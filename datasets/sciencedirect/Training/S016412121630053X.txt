@&#MAIN-TITLE@&#
How do software development teams manage technical debt? – An empirical study

@&#HIGHLIGHTS@&#
Exploratory case study with empirical data from eight software development teams.Observation of various different strategies for technical debt management.Developed technical debt management framework.

@&#KEYPHRASES@&#
Technical debt,Technical debt management,Exploratory case study,

@&#ABSTRACT@&#
Technical debt (TD) is a metaphor for taking shortcuts or workarounds in technical decisions to gain short-term benefit in time-to-market and earlier software release. In this study, one large software development organization is investigated to gather empirical evidence related to the concept of technical debt management (TDM). We used the exploratory case study method to collect and analyze empirical data in the case organization by interviewing a total of 25 persons in eight software development teams. We were able to identify teams where the current strategy for TDM was only to fix TD when necessary, when it started to cause too much trouble for development. We also identified teams where the management had a systematic strategy to identify, measure and monitor TD during the development process. It seems that TDM can be associated with a similar maturity concept as software development in general. Development teams may raise their maturity by increasing their awareness and applying more advanced processes, techniques and tools in TDM. TDM is an essential part of sustainable software development, and companies have to find right approaches to deal with TD to produce healthy software that can be developed and maintained in the future.

@&#INTRODUCTION@&#
Technical debt (TD) is a metaphor used to describe a situation in software development, where a shortcut or workaround is used in a technical decision (Kruchten et al., 2012b). TD has also similarities to three aspects of financial debt: repayment, interest, and in some cases high cost (Allman, 2012). In software development, a shortcut or workaround can give the company a benefit in the short term with quicker release to the customer and an advantage in time-to-market over the competition (Kruchten et al., 2012a; Yli-Huumo et al., 2015a). However, if these shortcuts and workarounds are not repaid, TD can accumulate and hurt the overall quality of the software and the productivity of the development team in the long term (Zazworka et al., 2011b). Creating temporary solutions to the code base increases complexity, which makes further development hard and time-consuming (Yli-Huumo et al., 2015a; Yli-Huumo et al., 2014). A simple solution for the problem would be to repay the known TD before issues start to show. However, the highly competitive software market forces companies to work in tight schedules and deadlines to release software to customers in faster cycles. This creates constant pressure for the development teams to deliver working features to customers within the given deadlines. In addition, perfection as an objective is also a risk, because it may cause delays and that way frustration to the customers, who may then select other commercial alternatives. Therefore, it is important to identify and develop processes for companies to live with TD and to know how, what and when the TD should be repaid. Technical debt management (TDM) consists of activities, processes, techniques, and tools that can be used to identify, measure, prevent, and reduce TD in a software product.TD and TDM receive attention currently both in the academia and the industry (Li et al., 2015a). Researchers and practitioners are becoming more interested in the concept of TD and the reasons why it should be an essential part of decision-making in software development (Falessi et al., 2014). The current literature has identified and developed some tools and practices to conduct TDM. However, according to a recent mapping study, the problem is the lack of empirical evidence about TDM in a real-life software development environment (Li et al., 2015a). It is important to gather evidence about TD and TDM in real-life software development situations to understand how TDM is currently perceived by real software development teams, and to use that knowledge to improve the existing processes and tools.In order to understand TDM in a real-life software development environment, we studied eight software development teams in a large organization that is a provider of multiple software solutions. For data collection and analysis, we used the eight TDM activities identified by Li et al. (2015a) in semi-structured interviews to gather empirical data about TDM in the selected software development teams. We used the exploratory case study method (Robson, 2002) to answer the following main research question:RQ: “How do software development teams manage technical debt?”Since the main research question can be considered quite a wide topic, including several other topics, we decided to create a set of sub questions to tackle specific topics of our interest.RQ1.1: What TDM activities are used in the studied development teams?Technical debt management can be separated into the following activities: identification, measurement, prioritization, prevention, monitoring, repayment, representation/documentation, and communication (Li et al., 2015a). However, it is not certain what activities are actually used and taken into consideration in real-life software development. Therefore, it is important to study and understand which TDM activities are currently applied/used and which are not. The results obtained from the studied development teams could reveal which activities will need more research in the future.RQ1.2: What methods, models, practices or tools do the studied development teams use for each TDM activity?There are a number of possible methods, models, practices or tools for every TDM activity (Li et al., 2015a). They have been developed and suggested in the literature, but they lack empirical evidence of their usability and functionality (ibid.). Therefore, it is essential to gather empirical evidence from real-life software development to understand what approaches different software development teams use for each TDM activity. Collecting such evidence could help to evaluate which TDM approaches should be categorized to each TDM activity.RQ1.3: Are there any maturity differences in adopting TDM activities between development teams?Every software development team is different, working with different products in different environments, and using different methods, models, practices, and tools in their unique way. It is highly possible that software development teams in general have different activities and approaches as regards TDM. Some software development teams may use more time on TDM, while some development teams may not pay much attention to it (Power, 2013). Therefore, it is important to understand if it is possible to distinguish between different maturities of TDM, similarly as in the capability maturity model (CMM)(Paulk et al., 1993). The results of this study can be used to develop a similar maturity model for TDM, which researchers and practitioners could use to conduct more research, or to improve companies’ internal and external practices.RQ1.4: What are the biggest challenges in TDM?Software process improvement includes the challenge of adopting new practices and tools to development teams. Understanding this challenge in relation to TDM is beneficial for software development teams and researchers.The rest of the paper is organized as follows: Section 2 introduces the theoretical background of TD and TDM in software development, Section 3 describes the research methodology used in this study, and Section 4 presents the results received from the empirical analysis of the studied software development teams. In Section 5 present the developed framework. In Section 6 we discuss the results and implications to future research. Section 7 concludes the paper.

@&#CONCLUSIONS@&#
