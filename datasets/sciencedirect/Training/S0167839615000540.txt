@&#MAIN-TITLE@&#
On a generalization of Bernstein polynomials and Bézier curves based on umbral calculus (II): de Casteljau algorithm

@&#HIGHLIGHTS@&#
Generalization of the de Casteljau algorithm with new parameters.Geometric interpretation of the new parameters.New direct method of curve design.New results are illustrated with many pictures.

@&#KEYPHRASES@&#
Umbral calculus,Bernstein polynomial,Bézier curve,de Casteljau algorithm,

@&#ABSTRACT@&#
The investigation of the umbral calculus based generalization of Bernstein polynomials and Bézier curves is continued in this paper: First a generalization of the de Casteljau algorithm that uses umbral shift operators is described. Then it is shown that the quite involved umbral shifts can be replaced by a surprisingly simple recursion which in turn can be understood in geometrical terms as an extension of the de Casteljau interpolation scheme. Namely, instead of using only the control points of levelr−1to generate the points on level r as in the ordinary de Casteljau algorithm, one uses also points on levelr−2or more previous levels. Thus the unintuitive parameters in the algebraic definition of generalized Bernstein polynomials get geometric meaning. On this basis a new direct method for the design of Bézier curves is described that allows to adapt the control polygon as a whole by moving a point of the associated Bézier curve.

@&#INTRODUCTION@&#
In Winkel (2014) the properties of generalized Bernstein polynomials and generalized Bézier curves introduced earlier (Winkel, 2001) have been investigated. For the convenience of the reader we repeat here the definition of generalized Bernstein polynomials of order n for the sequence of real parametersa¯=(a¯1,…,a¯n):(1.1)Bkn(t;a¯)=1ρn(a¯)(nk)pk(t;a¯)pn−k(1−t;a¯),0≤k≤n,where for any non-negative integer n(1.2)pn(t;a¯)=∑k=1npn,ktkwith the Bell polynomials (Comtet, 1974; Roman, 1984)(1.3)pn,k(a¯)=1k!∑i1+⋯+ik=ni1,…,ik>0(ni1,…,ik)a¯i1⋅…⋅a¯ik.The division byρn(a¯)=pn(1;a¯)normalizes the generalized Bernstein polynomials and guarantees the partition of unity property by the generalized binomial formula(1.4)pn(x+y;a¯)=∑k=0n(nk)pk(x;a¯)pn−k(y;a¯).Subsequently we often writepn(t),pn,kandρninstead ofpn(t;a¯),pn,k(a¯)andρn(a¯)if the choice ofa¯is clear from the context.A parameter sequencea¯is feasible, if the normalization can be done, i.e., ifρn≠0. To simplify formulas we use subsequently often the non-normalized generalized Bernstein polynomials(1.5)B˜kn(t;a¯)=ρnBkn(t;a¯).Without restriction of generality one can assumea¯1=1ina¯, since (by Winkel (2014, Thm. 5.4))(a¯1,…,a¯n)and(1,a¯2a¯12,…,a¯na¯1n)define the same generalized Bernstein polynomials of order n. For the ordinary Bernstein polynomials one hasBkn(t)=(nk)tk(1−t)n−k=B˜kn(t;(1,0,…,0))=Bkn(t;(1,0,…,0)).In Winkel (2014) it has been shown that the recursion formula for ordinary Bernstein polynomialsBkr(t)=(1−t)Bkr−1(t)+tBk−1r−1(t)can be generalized to(1.6)B˜kr(x,y;a¯)=θf,yB˜kr−1(x,y;a¯)+θf,xB˜k−1r−1(x,y;a¯)for the non-normalized bivariate generalized Bernstein polynomials of order r with variables(x,y)and parametersa¯:(1.7)B˜kn(x,y;a¯)=(nk)pk(x;a¯)pn−k(y;a¯).Hereθfis the umbral shift operator that generates the sequence of associated polynomialspn(x)according to(1.8)pn+1(x)=θfpn(x)forn∈N.The subscripts x or y indicate thatθfoperates on x or y, respectively, and f corresponds toa¯. We will give the complete definition ofθfin Section 3.The main purpose of the present paper is a detailed elaboration of the claim of Winkel (2014) that the generalized recursion (1.6) can be used to generalize the ordinary de Casteljau algorithmbk0(t)=bk(k=0,…,n)bkr(t)=(1−t)bkr−1(t)+tbk+1r−1(t)(r=1…,n;k=0,…,n−r)that generates the Bézier curvex(t;b)=∑k=0nbkBkn(t)=b0n(t)(0≤t≤1)by repeated linear interpolation out of the sequenceb=(b0,…,bn)of control points.In Section 2 we investigate bivariate Bernstein type polynomials in variables(x,y), and in Section 3 the generalization of the de Casteljau algorithm with umbral shifts. In Section 4 the complicated umbral shifts are replaced by a surprisingly simple recursion that can be understood in geometrical terms as an extension of the de Casteljau interpolation scheme. Namely, instead of using only the control points of levelr−1to generate the points on level r as in the ordinary de Casteljau algorithm, one uses two or more or all previous levels down to the control points at level 0. Thus the unintuitive parameters in the algebraic definition of generalized Bernstein polynomials get geometric meaning that is illustrated extensively. In Section 5 a new direct method for the design of Bézier curves is described that uses the additional freedom of the parametersa¯2,a¯3,…to adapt the control polygon as a whole by moving a point of the associated Bézier curve.Many references for the material used in this paper as well as an extensive and inspiring treatment of umbral calculus and CAGD can be found in Roman (1984), Farin (2001), Goldman (2003), respectively.The polynomialsR≤n[t]={p∈R[t]|deg⁡p≤n}of degree ≤n in t and the homogeneous polynomialsRn[x,y]={p∈R[x,y]|deg⁡p=n}of degree n in x and y form(n+1)-dimensional real vector spaces with respective canonical basis{tk|k=0,…,n}and{xkyn−k|k=0,…,n}. The mappingtk↦xkyn−kis an isomorphism betweenR≤n[t]andRn[x,y]. We define column vectorst=(1,t,…,tn)Tandh=(x0yn,…,xny0)T.The Bernstein polynomialsBkn(t)=(nk)tk(1−t)n−kof order n,0≤k≤n, and the bivariate homogeneous Bernstein polynomialsBkn(x,y)=(nk)xkyn−kare alternative bases forR≤n[t]andRn[x,y], respectively. We define column vectorsB(t)=(B0n(t),…,Bnn(t))TandB(x,y)=(B0n(x,y),…,Bnn(x,y))T.We call the substitution mappingΦ:Rn[x,y]→R≤n[t]withΦ(p(x,y))=p(t,1−t)the canonical parametrization. Clearly, Φ is a vector space isomorphism that maps the homogeneous monomialsxkyn−kto the basistk(1−t)n−kand the homogeneous Bernstein polynomialsBkn(x,y)to Bernstein polynomialsBkn(t).Similarly, the bivariate generalized Bernstein polynomialsBkn(x,y;a¯)=1ρn(nk)pk(x)pn−k(y)of order n,0≤k≤n, are parametrized to generalized Bernstein polynomialsBkn(t;a¯). We define column vectorsB(t;a¯)=(B0n(t;a¯),…,Bnn(t;a¯))TandB(x,y;a¯)=(B0n(x,y;a¯),…,Bnn(x,y;a¯))T.In Winkel (2014, Cor. 4.5) it has been shown thatB(t;a¯)=M(a¯)B(t),where(2.1)M(a¯)=1ρnM˜(a¯)=1ρn(m˜k,l(a¯))withm˜k,l(a¯)=(nk)(nl)∑j=0kπk,jπn−k,n−k−l+j=(nk)(nl)∑i=0n−kπk,k+i+l−nπn−k,iandπn,k=∑ν=0k(n−νn−k)pn,νwithpn,0=δn,0(using the Kronecker symbol).Clearly,B(t;a¯)is a basis ofR≤n[t], ifM(a¯)is regular, which is the case for a generic choice ofa¯.For the bivariate generalized Bernstein polynomials the analog result isTheorem 2.1Leta¯=(a¯1,…,a¯n)be a feasible parameter sequence. Then the transformation matrixM(x,y;a¯)∈R[x,y](n+1)×(n+1)inB(x,y;a¯)=M(x,y;a¯)B(x,y)is given byM(x,y;a¯)=M(aˆ)withaˆ=(aˆ1,…,aˆn)andaˆk=a¯k(x+y)k−1or in non-normalized form byM˜(x,y;a¯)=ρnM(x,y;a¯)=M˜(aˆ).Remark 2.2The result thatM(x,y;a¯)is justM(a¯)witha¯substituted withaˆshows that the seemingly more general bivariate Bernstein polynomialsBkn(x,y;a¯)orBkn(x,y)are in fact nothing more than the usualBkn(t;a¯)orBkn(t)in disguise. Nevertheless, it is sometimes much more convenient to operate with the bivariate form than with the usual, for example when considering the generalized de Casteljau algorithm with umbral shifts.For the proof of Theorem 2.1 we need the following lemma:Lemma 2.3For fixedn∈Nthe basis of homogeneous monomials of degree n can be represented in terms of the homogeneous Bernstein basis of degree n byh=T(x,y)B(x,y)=(tkj(x,y))B(x,y)withtkj(x,y)=(jk)(nk)(x+y)n−k.Sincetk,j(x,y)≠0only ifk≤j≤n, one computes∑j=0ntkj(x,y)Bjn(x,y)=∑j=kn(jk)(nk)(x+y)n−k(nj)xjyn−j=1(x+y)n−k∑j=kn(n−kj−k)xjyn−j=1(x+y)n−k∑j=0n−k(n−kj)xkxjy(n−k)−j=xk.□Proof of Theorem 2.1Going through the steps of the proof of Winkel (2014, Thm. 4.4) one sees with the above lemma that the only new thing are the factors(x+y)n−kin the denominators. One gets:m˜k,l(x,y;a¯)=(nk)(nl)∑j=0kπˆk,jπˆn−k,n−k−l+j=(nk)(nl)∑i=0n−kπˆk,k+i+l−nπˆn−k,iwithπˆn,k=∑ν=0k(n−νn−k)(x+y)n−νpn,ν.Now formula (1.3) reveals that the summandsa¯i1⋅…⋅a¯iνofpn,νall contain exactly ν factors whose indices sum up to n. Thereforea¯i1⋅…⋅a¯iν(x+y)n−ν=a¯i1(x+y)i1−1⋅…⋅a¯iν(x+y)i1−νcompletes the proof.  □Remark 2.4The definition of theaˆkabove is not unreasonable, if one observes that settingdeg⁡(a¯i)=i−1anddeg⁡(tk)=k(as usual) givesdeg⁡(pn,k(a¯))=n−ksuch thatpn(a¯)(t)becomes a homogeneous polynomial of degree n in the ringR[t,a¯1,a¯2,…,a¯n]. Thus theaˆk's have degree zero, since for allk∈Ndeg⁡(aˆk)=deg⁡(a¯k)−deg⁡((x+y)k−1)=0.The polynomials (1.2) used for the definition (1.1) of generalized Bernstein polynomials are systematically explored in umbral calculus (Roman, 1984). (The bars over thea¯k's are used to conform with the notations used in umbral calculus.) We present here only the facts that are needed for the understanding of the umbral shift operators and the subsequent calculations in this paper.LetP=R[[t]]denote theR-algebra of formal power series in t with coefficients inRand letP+={f∈R[[t]]|f(0)=0,f′(0)≠0}be the subalgebra of delta series. Then for any(3.1)f(t)=∑n=1∞ann!tn∈P+there exists a second delta series(3.2)f¯(t)=∑n=1∞a¯nn!tn∈P+which is the compositional inverse of f, i.e.,(f¯∘f)(t)=(f∘f¯)(t)=t. Nowf¯is the generating function for the associated polynomialspn(x)according to(3.3)exf¯(t)=∑n=0∞pn(x)n!tn.Using the notationpn(t;a¯)in (1.2) instead ofpn(x)as in (3.3) emphasizes that the associated polynomials depend on the parametersa¯and with the change from x to t we conform with the usual notation for the independent variable of Bernstein polynomials. The different meanings of x and t in different contexts in this paper should not be an obstacle.It is shown in umbral calculus that the umbral shift operatorθfgenerates the sequence of associated polynomials according to (1.8) if one defines (Roman, 1984, Cor. 3.6.6)(3.4)θfpn(x)=xf¯′(f(t))pn(x)=x[f′(t)]−1pn(x)with t acting as linear differentiation operator on a polynomialp∈R[x]astp(x)=p′(x).With (1.8) it is not difficult to establish (see Winkel, 2014) the following down recurrence for the non-normalized bivariate generalized Bernstein polynomials(3.5)B˜00(x,y;a¯)=1and forr=1,…,nandk=0,…,r:B˜kr(x,y;a¯)=θf,yB˜kr−1(x,y;a¯)+θf,xB˜k−1r−1(x,y;a¯),where the operatorsθf,xandθf,yact on the variables x and y, respectively.The canonical parametrization and the normalization by multiplication withρr−1then yields the recurrence for generalized Bernstein polynomials. Subsequently we often writeθxandθyinstead ofθf,xandθf,yif f is clear from the context.Example 3.1For ordinary Bernstein polynomials witha¯=(1,0,0…)one computesf¯(t)=t=f(t)by (3.1)–(3.2),pn(x)=xnby (3.3),ρr=1for allr∈N, and withf¯′(f(t))=[f′(t)]−1=1=t0(meaning no differentiation) one sees thatθf=xis simply multiplication by x. Hence we have confirmed formula (3.2) aspn+1(x)=xpn(x)in the ordinary Bernstein case. Canonical parametrization of (3.5) then gives the well-known recursion formula for Bernstein polynomials:Bkr(t)=(1−t)Bkr−1(t)+tBk−1r−1(t).Fig. 1shows that the down recurrence (3.5) is a triangular scheme (Goldman, 2003) that generates the bottom level n of generalized Bernstein polynomialsB˜kn(x,y;a¯)out of the single top polynomialB˜00(x,y;a¯)=1at level 0 by increasing the degree r of the polynomials on every new level.Theorem 3.2For fixedf∈P+,n∈Nand0≤k≤none has(3.6)Bkn(x,y;a¯)=1ρn(nk)(θf,x)k(θf,y)n−k(1)withρn=pn(x+y).From the down recursion (3.5) one sees thatB˜kn(x,y;a¯)is the sum of all differently ordered compositions of k times the operatorθxandn−ktimes the operatorθyapplied to 1. Alternatively, it is the sum over all paths that lead from the top of the triangular scheme toB˜kn. Since there are(nk)such compositions or paths and since the operatorsθxandθycommute, the formula follows for the non-normalized case. But the normalizing factorρnmust bepn(x+y)according to the generalized binomial formula (1.4).  □To the down recurrence there corresponds an up recurrence or generalized de Casteljau algorithm (see Fig. 2) that generates the generalized Bézier curve of degree n:(3.7)x0n(t;a¯;b)=∑k=0nbkBkn(t;a¯)(0≤t≤1)or some pointx0n(t0;a¯;b)witht0∈[0,1]on it from the sequence of control pointsb=(b0,…,bn). The control points can be viewed as constant generalized Bézier curves of order 0:(3.8)xk0(t;a¯;b)=bkB00(t;a¯)=bk(0≤k≤n).The bottom layer of this triangular scheme is formed by then+1control points and every new layer is given byn−rconsecutive generalized Bézier curves of order r orn−rpoints for fixedt=t0laying on these intermediary generalized Bézier curves(3.9)xkr(t;a¯;b)=∑j=0rbk+jBkr(t;a¯)(0≤k≤n−r,0≤t≤1).Note that (3.7) and (3.8) are special case of (3.9) forr=nandr=0, respectively. The following theorem describes the up recurrence in terms of umbral shifts.Theorem 3.3The generalized de Casteljau algorithm with umbral shifts results from normalization and canonical parametrization of the following up recurrence withx˜kr=x˜kr(x,y;a¯;b)(3.10)x˜k0=bkfork=0,…,n,x˜kr=θyx˜kr−1+θxx˜k+1r−1forr=1,…,n;k=0,…,n−rwhere(3.11)x˜kr:=∑j=0rbk+jB˜jr(x,y;a¯)(0≤k≤n−r,0≤t≤1).The initialization of thex˜k0(x,y;a¯;b)as control pointbkis consistent with (3.8) sinceρ0=1for alla¯. Assume that (3.10) is true forr−1. Then with some index shifting, the linearity ofθf, andB˜jr(x,y;a¯)=0forj<0orj>r:θyx˜kr−1+θxx˜k+1r−1=(3.11)θy(∑j=0r−1bk+jB˜jr−1(x,y;a¯))+θx(∑j=0r−1bk+1+jB˜jr−1(x,y;a¯))=θy(∑j=kk+r−1bjB˜j−kr−1(x,y;a¯))+θx(∑j=k+1k+rbjB˜j−k−1r−1(x,y;a¯))=θy(∑j=kk+rbjB˜j−kr−1(x,y;a¯))+θx(∑j=kk+rbjB˜j−k−1r−1(x,y;a¯))=∑j=0kbk+j(θyB˜jr−1(x,y;a¯)+θxB˜j−1r−1(x,y;a¯))=(3.5)∑j=0kbk+jB˜jr(x,y;a¯)=(3.11)x˜kr.□The appearance of derivations in the form of umbral shift operators in the above formulas seem to preclude a discrete generalized de Casteljau algorithm directly on the control pointsbkrof different ordersr=1,…,n, but since all calculations are done on polynomials of degree less than n, purely algebraic calculations are possible. The next section will show that the elimination of differentiation yields a surprisingly simple and geometrically meaningful generalized de Casteljau algorithm.Let f and its compositional inversef¯be defined with coefficientsananda¯n, respectively, as in (3.1)–(3.2). The formula (3.4) for the umbral shift operator shows that when parametersa¯nfor the generalized Bernstein polynomials are given, then we need to compute theanfrom them. This can be achieved by one of the formulas for Lagrange inversion, for which the most suitable in our context (Comtet, 1974, 5.8 Thm. E [8f]) is:(4.1)a1=1=a¯1an=∑k=1n−1(−n)kpn−1,k(a¯22,a¯33,…,a¯nn)forn≥2with(−n)k:=(−n)(−n−1)⋅…⋅(−n−k+1)=(−1)k(n+k−1)!(n−1)!,because we may have computed the Bell polynomialspn−1,k(a¯1,…,a¯n−1)already. Setting(4.2)[f′(t)]−1=∑n=0∞dnn!tngivesd0=1and the recursion(4.3)dn=−∑k=1n(nk)ak+1dn−kforn∈Nby the convolution of coefficients in1=f′(t)[f′(t)]−1=(∑n≥0an+1n!tn)(∑n≥0dnn!tn).The first few coefficients ared1=a¯2d2=−a¯22+a¯3d3=3a¯23−4a¯2a¯3+a¯4d4=−15a¯24+25a¯3a¯22−7a¯4a¯2−4a¯32+a¯5d5=105a¯25−210a¯3a¯23+60a¯4a¯22+70a¯2a¯32−11a¯5a¯2−15a¯3a¯4+a¯6.Then(4.4)θf=x[f′(t)]−1=x∑n≥0dnn!tn=x+x∑n≥1dnn!tn=:x+xDf.Note, that inDfone needs only the first m summands ifθfis applied to a polynomial of degree m.Remark 4.1From the definition (1.1)–(1.3) of generalized Bernstein polynomials it is clear that the polynomials of order r in (3.10) can depend only on parametersa¯1,…,a¯rand that the parametersa¯r+1,…,a¯ndo not appear up to level r. The same conclusion can be drawn also from (3.6) or the up recursion (3.10), because for the generation of a level r polynomial or curve one needsDfonly up todr−1and from (4.1) and (4.4) one concludes thatananddr−1depend exactly ona¯2,…,a¯r.Remark 4.2Using the representationθf=x+xDfin formula (3.6) for generalized Bernstein polynomials one can compute a formula that splits everyB˜kn(x,y;a¯)into a sum of the ordinary homogeneous Bernstein polynomialBkn(x,y)and a rather complicated rest:B˜kn(x,y;a¯)=(nk)(x+xDf,x)k(y+yDf,y)n−k(1)=(nk)xkyn−k+(nk)[xkD¯f,yn−k+yn−kD¯f,xk+D¯f,xn−kD¯f,xk](1)withD¯f,xk=∑i=1k(ki)xk−i(xDf,x)iD¯f,yn−k=∑j=1n−k(n−kj)yn−k−j(yDf,y)j.We know now how to compute the umbral shift operatorθfas a finite linear differential operator from givena¯. Next we take advantage of the fact, that we have to apply it only on very special polynomials that are connected in a seemingly tangled way to the coefficients of the operator.Theorem 4.3For fixed parameter sequencea¯andn∈Nthe derivatives of the associated polynomials are(4.5)∂xpn(x)=∑k=0n−1(nk)a¯n−kpk(x),and for the bivariate and parametrized generalized Bernstein polynomials(4.6)∂xB˜kn(x,y;a¯)=∑i=1k(ni)a¯iB˜k−in−i(x,y;a¯)(4.7)∂yB˜kn(x,y;a¯)=∑j=1n−k(nj)a¯jB˜kn−j(x,y;a¯),(4.8)dtB˜kn(t;a¯)=∑i=1k(ni)a¯iB˜k−in−i(t;a¯)−∑j=1n−k(nj)a¯jB˜kn−j(t;a¯).Using Thm. 2.4.9 of Roman (1984) and the umbral calculus definition of the action of a functionaltkapplied to a monomialxn〈tk|xn〉=n!δn,kone computespn′(x)=∑k=0n−1(nk)〈t|pn−k(x)〉pk(x)=(1.2)∑k=0n−1(nk)pn−k,1pk(x)=(1.3)∑k=0n−1(nk)a¯n−kpk(x).Then(nk)pk′(x)pn−k(y)=(nk)∑i=0k−1(ki)a¯k−ipi(x)pn−k(y)=∑i=0k−1a¯k−i(nk)(ki)pi(x)pn−k(y)=∑i=0k−1a¯k−i(nk−i)(n−k+ii)pi(x)pn−k(y)=∑i=0k−1(nk−i)a¯k−iB˜in−k+i(x,y;a¯).Instead of summing over i from 0 tok−1one can sum overk−ifrom k to 1. This gives (4.6). Using the symmetryB˜kn(x,y;a¯)=B˜n−kn(y,x;a¯)one computes∂yB˜kn(x,y;a¯)=∂yB˜n−kn(y,x;a¯)=(4.6)∑j=1n−k(nj)a¯jB˜n−k−jn−j(y,x;a¯)=∑j=1n−k(nj)a¯jB˜kn−j(x,y;a¯).For the last formula one observes thatdtB˜kn(t;a¯)is nothing but the canonical parametrization of∂xB˜kn(x,y;a¯)−∂yB˜kn(x,y;a¯).  □The next theorem shows that also l-fold differentiation yields surprisingly simple formulas.Theorem 4.4For fixeda¯,n∈Nandl∈N0the l-th derivatives for the bivariate generalized Bernstein polynomials are(4.9)∂xlB˜kn(x,y;a¯)=l!∑j=lk(nj)pj,l(a¯)B˜k−jn−j(x,y;a¯)(4.10)∂ylB˜kn(x,y;a¯)=l!∑j=ln−k(nj)pj,l(a¯)B˜kn−j(x,y;a¯).First of all, the formulas are correct forl=0(no differentiation), becausepj,0(a¯)=δj,0, and also forl=1, because one gets the formulas (4.6)–(4.7) of the previous theorem frompj,1(a¯)=a¯j. Forl=2one computes with the abbreviationB˜kn=B˜kn(x,y;a¯)∂x2B˜kn=(4.6)∑i=1ka¯i(ni)∂xB˜k−in−i=(4.6)∑i=1ka¯i(ni)∑i′=1k−ia¯i′(n−ii′)B˜k−i−i′n−i−i′=∑i=1k∑i′=1k−ia¯ia¯i′(ni)(n−ii′)B˜k−i−i′n−i−i′and in general with the abbreviationj=i1+i2+⋯+il∂xlB˜kn=∑i−1=1k∑i2=1k−i1…∑il=1k−i1−i2−⋯−il−1a¯i1a¯i2…a¯il(ni1)(n−i1i2)…(n−i1−i2−⋯−il−1il)B˜k−i1−i2−⋯−iln−i1−i2−⋯−il=∑i−1=1k∑i2=1k−i1…∑il=1k−i1−i2−⋯−il−1n!i1!i2!…il!(n−j)!a¯i1a¯i2…a¯ilB˜k−jn−j=∑j=lk∑i1+⋯+il=ji1,…,il>0(nj)(ji1,i2,…,ıl)a¯i1a¯i2…a¯ilB˜k−jn−j=(1.3)∑j=lk(nj)l!pj,l(a¯)B˜k−jn−j.Then∂ylB˜kn(x,y;a¯)=∂ylB˜n−kn(y,x;a¯)=(4.9)l!∑j=ln−k(nj)pj,l(a¯)B˜n−k−jn−j(y,x;a¯)=l!∑j=ln−k(nj)pj,l(a¯)B˜kn−j(x,y;a¯).□Going back to the triangular scheme for the down recurrence (Fig. 1) one observes that partial differentiation by x gives terms laying on the diagonal starting atB˜knand going up to the left whereas partial differentiation by y gives terms on the diagonal to the upper right.For the main theorem about the generalized de Casteljau algorithm below we need a formula that seems not to be mentioned in the umbral calculus literature.Lemma 4.5For fixeda¯andj∈N0one has the identity(4.11)∑i=0jdipj,i(a¯)=a¯j+1.From∑j=0∞a¯j+1j!tj=(3.2)f¯′(t)=f¯′(f(f¯(t)))=[f′(f¯(t))]−1=(4.2)∑i=0∞dii!f¯(t)ione concludes with the formula for conjugate representation for associated sequences (Roman, 1984, Thm. 2.4.4):pj,i(a¯)=coefficientoftjinf¯(t)ij!andf¯(t)i=ti+O(ti+1)that∑i=0∞dii!f¯(t)i=∑j=0∞1j!(∑i=0jdipj,i(a¯))tj.Comparison of coefficients gives (4.11).  □Now the laborious metamorphosis of the generalized de Casteljau algorithm that transforms the caterpillar with umbral shifts into the butterfly without umbral shifts can be completed with the next theorem. We emphasize the difference between functions and their differentiation in Theorem 3.3 and the elementary algebraic operations on points in Theorem 4.6 with the suggestive notationsxkrandbkralthough the functions become points upon evaluation and the points become functions ifx,y,tare taken as variables on a suitable range.Theorem 4.6Given a sequenceb=(b0,…,bn)of control points inRNand a (feasible) parameter sequencea¯. Then the generalized de Casteljau algorithm forb˜kr=b˜kr(x,y;a¯;b)is given by(4.12)b˜k0=bkfork=0,…,n,b˜kr=yb˜kr−1+xb˜k+1r−1+∑i=2r(r−1i−1)a¯i(yb˜kr−i+xb˜k+ir−i)forr=1,…,nandk=0,…,n−r.With similar initialization of the recursion and ranges for the indices the normalized recursion forbkr=bkr(x,y;a¯;b)is given by(4.13)bkr=1ρn∑i=1r(r−1i−1)ρr−ia¯i(ybkr−i+xbk+ir−i),and the parametrized recursion forbkr=bkr(t;a¯;b)by(4.14)bkr=1ρn∑i=1r(r−1i−1)ρr−ia¯i((1−t)bkr−i+tbk+ir−i).It is enough to prove the first recursion (4.12).B˜jr=(1.6)θyB˜jr−1+θxB˜j−1r−1=(1.7)(4.2)y(∑l=0r−1−jdll!∂ylB˜jr−1)+x(∑l=0j−1dll!∂xlB˜j−1r−1)=(4.9)(4.10)y(∑l=0r−j−1dl∑i=lr−1−j(r−1i)pi,lB˜jr−1−i)+x(∑l=0j−1dl∑i=lj−1(r−1i)pi,lB˜j−1−ir−1−i)=y(∑i=0r−1−j(r−1i)[∑l=0idlpi,l]B˜jr−1−i)+x(∑i=0j−1(r−1i)[∑l=0idlpi,l]B˜j−1−ir−1−i)=(4.11)y(∑i=0r−1−j(r−1i)a¯i+1B˜jr−1−i)+x(∑i=0j−1(r−1i)a¯i+1B˜j−1−ir−1−i).This gives withx˜krreplaced byb˜kr:b˜kr=(3.11)∑j=0rbk+jB˜jr=y(∑j=0rbk+j∑i=0r−1−j(r−1i)a¯i+1B˜jr−1−i)+x(∑j=0rbk+j∑i=0j−1(r−1i)a¯i+1B˜j−1−ir−1−i)=y(∑i=0r−1(r−1i)a¯i+1∑j=0r−1−ibk+jB˜jr−1−i)+x(∑i=0r−1(r−1i)a¯i+1∑j=i+1rbk+jB˜j−1−ir−1−i)=(3.11)∑i=0r−1(r−1i)a¯i+1(yb˜kr−1−i+x∑j=0r−1−ibk+j+i+1B˜jr−1−i)=(3.11)∑i=0r−1(r−1i)a¯i+1(yb˜kr−1−i+xb˜k+i+1r−1−i).With a final index shift and a splitting of the sum one arrives at (4.12).  □Hence we have discovered a geometrically meaningful interpretation of the parametersa¯kthat was not at all obvious from the original algebraic–combinatorial definition:Fora¯=(a¯1,0,…,0)witha¯1=1one gets the usual de Casteljau algorithm that generates the intermediary control points on level r by linear interpolation of two adjacent points from the previous levelr−1. A parametera¯2≠0adds ana¯2-weighted linear interpolation of two points separated by one point from levelr−2. Ana¯3≠0adds ana¯3-weighted linear interpolation of two points separated by two points from levelr−3, and so on.Fig. 3illustrates that the points that have an influence on somebjrlay on the left and right diagonal going down frombjr.In principle, the dependence of points on some level on more than just the previous level points can be achieved in many ways — but usually not in a way that doesn't sacrifice important properties such as affine invariance. Probably the only possible way to retain all the properties listed in Winkel (2014) is to use generalized Bézier polynomials as introduced in Winkel (2001). With formula (4.14) it is now easy to deduce an additional property that was hard to see from the algebraic definition (1.1)–(1.3): Though the generalized Bernstein polynomials do not in general respect the convex hull property — they include for example as special case the Lagrange polynomials with equidistant nodes —, they have the property of linear precision by an easy induction using (4.14). In other words, if the basic control pointsbj0lay on a straight line, then allbjrfor all levels r lay on this line.Figs. 4 and 5show for two different control polygons how the intermediary and final generalized Bézier curves look like in comparison with the ordinary intermediary and final Bézier curves. (The points on the curves fort=.4are not computed by evaluation but by (4.14)!) In Fig. 4 the parameter sequence uses a small negativea¯2, whereas the higher parameters are zero. This draws the (intermediary) generalized Bernstein polynomials closer to the control polygon. In Fig. 5 the parameter sequence for the interpolation of the control polygon is used as determined in Winkel (2014). The control polygon starts and ends at the point most to the right. Note that the intermediary curves are not interpolating, because the parameter sequences for interpolation are different for different numbers of control points.Fig. 6shows more intermediary Bézier curves to give an impression how versatile these curves are (and because they look nice). I each case the end of the control polygon overlaps suitably with the beginning to achieve perfect symmetry.Finally in this section we note that from the proof of Theorem 4.6 one gets immediately a down recurrence as (3.5) for bivariate generalized Bernstein polynomials but now without umbral shifts.Corollary 4.7Given a (feasible) parameter sequencea¯. Then forB˜kr=B˜kr(x,y;a¯)is given by(4.15)B˜00=1and forr=1,…,nandk=0,…,r:B˜kr=y∑i=1r−k(r−1i−1)a¯iB˜kr−i+x∑i=1k(r−1i−1)a¯iB˜k−ir−i.With similar initialization of the recursion and ranges for the indices the normalized recursion forBkr=Bkr(x,y;a¯)is given by(4.16)Bkr=yρr∑i=1r−k(r−1i−1)ρr−ia¯iBkr−i+xρr∑i=1k(r−1i−1)ρr−ia¯iBk−ir−i.Usually the designer of a Bézier curve sets up in an intuitive way a control polygon and inspects the resulting Bézier curve. If the curve is not as desired, then the control points are moved interactively one by one, until the result is satisfying. In the past there have also been invented a number of direct methods for curve design, that allow to change the whole Bézier curve by picking a point on the curve and changing its geometric constraints, e.g., its position in ambient space, the tangent direction and magnitude, or the magnitude of the curvature at the point (see for example Bartels and Beatty, 1989; Fowler and Bartels, 1993; Gleicher, 1992). The purpose of the present section is to indicate, how the additional freedom gained by the parametersa¯2,a¯3,…can be used to extend the known direct methods. Note that by the generalized de Casteljau algorithm of Theorem 4.6 these parameters do not describe local differential–geometric properties, but global properties of the generalized Bézier curves, e.g., ana¯2>0and ana¯2<0leads to a global decrease resp. increase (cf. Fig. 4) of curvature compared to the ordinary Bézier curves. We hope that other researchers can apply this approach to their particular problem.The new direct method is described and illustrated first from the perspective of the designer, then we discuss the mathematics behind the working steps. (Note, that also a weighting of control points can be done in the usual way in the generalized setup.)(1)At some stage in the design process a control polygonCP(b)for a sequence of control pointsb=(b0,…bn)is displayed together with its associated Bézier curvex(t;b). In addition, a pointS1:=x(t1;b)for somet1∈(0,1)is displayed. We call this point the first shaping point (Fig. 7(A)). The designer can moveS1onx(t;b). As we will see below, it will be favorable to choose a place forS1where the Bézier curve substantially deviates from the control polygon. Based on this criterion the software can also propose an initial position ofS1.The designer can move the shaping pointS1to a new positionS1,newasidex(t;b). Simultaneously a new Bézier curvexnewthrough the movedS1,newis displayed. The original curvex(t;b)can still remain visible for comparison (Fig. 7(B)).A soon as the new Bézier curvexnewis confirmed by the designer, a new control polygonCP(b′)for a new sequence of control pointsb′is displayed such thatxnew=x(t;b′)(Fig. 7(C)).The design process can be continued again with steps 1–3 as above or with adjustments of single control points in the usual way.It is also possible to display a second shaping pointS2:=x(t2;b)witht2∈(0,1),t2≠t1, that allows finer adjustments and more flexibility. Actually, there are up ton−1shaping points for a Bézier curve of degree n possible, but one or at most two should be sufficient in practice.(1)x(t;b)is computed fromCP(b)in the usual way, e.g., by subdivision, andS1is displayed for some predefinedt1, e.g.,t1=.4, or in a more sophisticated fashion, e.g., by inspection of the bending ofCP(b).Letx(a¯2):=x(t1;a¯;b)fora¯=(1,a¯2,0,…,0)be the curve of variation ofa¯2att1for short thea¯2-curve (see Fig. 8). In other words:x(a¯2)is computed with the formula for the generalized Bézier curve(5.1)x(t;a¯;b)=∑k=0nbkBkn(t;a¯)(0≤t≤1)but with variablea¯2and fixedt1. A suitable domain fora¯2could be the interval[rmax(n)+ϵ,2], wherermax(n)is the largest zero of(5.2)ρn(a¯2):=pn(1;(1,a2,0,…,0))=1+(n2)a¯2+O(a¯22).Why isrmax(n)of interest and why is (5.2) true? First of all, note that the zeros ofpn(1;a¯)as polynomial ina¯2are the values ofa¯2where the associated generalized Bernstein polynomials are not defined, or in geometric terms, where the generalized Bernstein polynomials blow up and flip over by passing through infinity. To determinermax(n)one observes that by (1.3) one haspn,n−1(a¯)=a¯1nandpn,n−1(a¯)=1(n−1)!⋅(n−1)⋅n!2!a¯1n−2a¯2=(n2)a¯1n−2a¯2.Evaluation ofpn(t;(1,a2,0,…,0))att=1in (1.2) then gives (5.2). Since all terms ofpn(1;a¯)are positive,ρn(a¯2)has negative roots only, the maximum one being equal (n=2,3) or smaller (n≥4) than−1(n2)=−2n(n−1).This gives the lower boundary−.1fora¯2used in Fig. 8. A slightly smaller choice like−.12continues thea¯2-curves vastly beyond the convex hull of the control polygon in the direction of infinity, because forp5(1;(1,a2,0,0,0))=15a¯22+10a¯2+1one hasrmax(n)≈−.1225. On the other hand, using 3, 4, 5, or greater numbers as the upper boundary fora¯2does not lead to a visible continuation of thea¯2-curves. Note further that thea¯2-curves are straight only if the control polygon is highly symmetric as in Fig. 8(A), and that thea¯2-curves need not be perpendicular to the Bézier curvex(t;b)(Fig. 8(B)).For the design process in step 2 it would be comfortable, ifS1,newwould not be restricted to thea¯2-curve at a fixedt1, but could be moved freely between differenta¯2-curves. A remark of caution is necessary here, because in general differenta¯2-curves intersect. So the topic ofa¯2-curve and the appropriate change between differenta¯2-curves needs further investigation.The Bézier curvexnewthat accompaniesS1,newon the design display is of course the generalized Bézier curvex(t;a¯;b)(5.1) for the respective choice ofa¯2. As discussed in Winkel (2014) the curvex(t;a¯;b)can be computed efficiently as ordinary Bézier curvex(t;b′)for a transformed control polygonb′=b(a¯): letC(b)andC(b′)be the matrices with control pointsb0,…bnandb0′,…bn′, respectively, as column vectors. ThenC(b′)=C(b(a¯))=C(b)M(a¯)with the transformation matrix (2.5).In general the use of further shaping pointsS2,S3,…,Sn−1relies similarly on the respective variation of the parametersa¯3,a¯4,…,a¯n.The new control polygonCP(b′)is simply the display of the last transformed control polygon computed in step 2 forxnew=x(t;a¯;b)=x(t;b′)in the background.Remark 5.1Instead of the parametera¯2one can also use the responsiveness c as described in Winkel (2014, Thm. 2.1), in particular, if one wants to have exact interpolation of control points as design option.Fig. 9xk5for n=6 anda¯=(1,−.3,0,0,0,0).

@&#CONCLUSIONS@&#
