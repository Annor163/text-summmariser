@&#MAIN-TITLE@&#
Computing approximate Nash equilibria in general network revenue management games

@&#HIGHLIGHTS@&#
A network revenue management problem under competition is studied.Booking limits for competing airlines are computed.A heuristic for computing an approximate Nash equilibrium is introduced.Payoff values are computed on demand, i.e. there is no need to provide the complete playoff matrix in advance.

@&#KEYPHRASES@&#
Network revenue management,Competition,Approximate Nash equilibria,Algorithmic game theory,

@&#ABSTRACT@&#
Computing optimal capacity allocations in network revenue management is computationally hard. The problem of computing exact Nash equilibria in non-zero-sum games is computationally hard, too. We present a fast heuristic that, in case it cannot converge to an exact Nash equilibrium, computes an approximation to it in general network revenue management problems under competition. We also investigate the question whether it is worth taking competition into account when making (network) capacity allocation decisions. Computational results show that the payoffs in the approximate equilibria are very close to those in exact ones. Taking competition into account never leads to a lower revenue than ignoring competition, no matter what the competitor does. Since we apply linear continuous models, computation time is very short.

@&#INTRODUCTION@&#
Although the concept of revenue management, as it is known today, emerged out of a competitive situation after the deregulation of the U.S. airline industry in 1978 (Talluri & van Ryzin, 2004, chap. 1.2), competition is still hardly considered in the revenue management literature. This is also one of the results Chiang, Chen, and Xu (2007) found after studying 221 publications (mainly past 1999) dealing with revenue management.Network revenue management competition is even less investigated than competition in single-leg flights. One reason for this is that already finding an optimal seat allocation even for a single airline network is “hard” because the amount of states in the dynamic program used for solving the problem grows exponentially (Talluri & van Ryzin, 2004, p. 92). Furthermore, finding an exact Nash equilibrium (NE) in general non-cooperative non-zero-sum games is “hard” in a computational way (Papadimitriou, 1994), even for two-player games (Chen, Deng, & Teng, 2009).Due to the (computational) complexities in both areas, revenue management and algorithmic game theory, approximations were proposed independently by both operations researchers (e.g. Talluri & van Ryzin, 1999; Klein, 2007; Zhang, 2011) and (algorithmic) game theorists (e.g. Tsaknakis & Spirakis, 2007; Daskalakis, Mehta, & Papadimitriou, 2009; Kontogiannis, Panagopoulou, & Spirakis, 2009).In order to overcome the twofold complexity of computing exact NE with optimal seat allocations, we in this paper combine approximations in the disciplines of operations research and algorithmic game theory and develop a heuristic to find an approximate NE in general network RM games in case it cannot converge to an exact NE. (The terms “exact NE” and “approximate NE” will be explained in Sections 2.2 and 4, respectively.) Thus the solution obtained by our procedure need not be an exact NE. For this reason we will use the term “heuristic” for the procedure we propose to compute approximate NE throughout the paper. Note that while an algorithm to compute exact NE with certainty would be useful, it might not be useable in practice except for very small instances due to the above mentioned complexities. An earlier attempt to approximate NE in RM games was made in Jiang and Pang (2011). We will compare their approach to ours in Section 6.We focus on the seat allocation problem two competing airlines face for substitute products when they are aware of competition and base their decision on this knowledge. The main goals we are trying to achieve are (1) to combine the disciplines of revenue management and algorithmic game theory in order to (2) reduce the game considered, to (3) compute a good solution for the problem on hand in a short time, and (4) to investigate how the revenue is affected when competition is taken into account in capacity allocation decisions. For this purpose simple linear models will be used to calculate the best responses iteratively and converge to (possibly approximate) NE. This approach avoids the effort of determining all possible strategies and setting up the players’ complete payoff matrices—which needs to be done for general exact algorithms and can be an exhausting task for itself due to the extremely large amount of possible combinations of booking limits—before the actual algorithm can be applied.We present the notation and define the concepts used throughout the paper in the next section. Section 3 summarizes related publications on the topics on hand while in Section 4 our notion of an approximate Nash equilibrium is introduced. In Section 5, the problem is formulated. Our contribution to the problem on hand and our heuristic are presented in Section 6. Section 7 illustrates our heuristic on an example. Section 8 provides a computational study followed by a conclusion in Section 9.Revenue management is, among other things, concerned with allocating a limited and perishable amount of inventory (e.g. the seat capacity on an airplane) to different types or segments of customers willing to pay different prices for these products. The need for capacity management arises because all of these segments request the same physical product. What makes the problem complicated is that demand for the different products is not known in advance but is subject to stochastic variations.Finding an optimal allocation of seats to different segments under these circumstances becomes difficult very quickly. If an airline offers only two classes on one flight leg, computing optimal seat allocations is easy (see e.g. Talluri & van Ryzin, 2004, chap. 2.2.1 for a simple optimal allocation rule). Nowadays many airlines operate in a hub-and-spoke network, though, enabling them to sell products which use several resources through connecting flights. This way the number of legs needed to be flown by a company can be much less compared to the amount of products offered. Each leg can be used by several products saving the airline money through avoiding to buy or lease aircraft (possibly one for each leg) and generating more revenue on each leg through higher capacity load factors.In the smallest possible network with two legs connecting three cities there are at least three possible origin–destination (O&D) combinations with one being a connecting flight with a stopover in a hub. If there are three legs between four cities already six O&D pairs can be offered. Fig. 1shows these simple network structures. Here the solid arcs represent actual legs connecting two nodes directly. The dashed arcs represent connecting flights through hubs which are marked bold. I.e. a trip from O1 to H2 needs a stopover in H1, while a trip from O1 to D1 has two stopovers, one in each hub.Note that only one-way products are considered in these illustrating examples. This means that round trips as well as “backward directed” flights—e.g. a flight from H1 to O1—are not included in the scenario set.Fig. 2shows even larger and more realistic networks with up to 22 O&D pairs in Fig. 2(d). For the sake of visibility, we ommitted the dashed arcs representing connecting flights in Fig. 2.However, a network structure also complicates the capacity allocation problem because it becomes insufficient (and possibly fatal) to optimize the seat allocation on each leg independently. A capacity decision on each leg needs to consider its impact on the whole network (and on the total revenue). In this setting it can be advantageous to deny a local flight request if a more profitable multi-leg request using this local flight is expected to arrive and vice versa.Airline alliances further complicate the problem. In low-demand markets airlines often cooperate within alliances and utilize so-called code-sharing flights. These allow several companies to sell tickets on a flight operated by another. However, if airlines interact within such code-sharing flights, the problem is not only to allocate capacity to different fare classes but also to divide the available capacity among the partners within the alliance. Graf and Kimms (2011, 2013) have developed procedures based on real options to solve this problem for a two-airline alliance. However, with more than one actor selling tickets, the problem of dividing the profit amongst them arises. Çetiner and Kimms (2012, 2013) presented procedures to allocate the alliance’s revenue among the partners in a fair way so that none of them has an incentive to leave the alliance. Their procedures are based on the nucleolus concept from cooperative game theory and are very effective. These and further results are also included in the Ph.D. thesis by Çetiner (2013).There are several—mostly approximate—methods to allocate capacity to different fare classes in a network setting. Some of the simplest formulations of the network revenue management problem are the Deterministic Linear Program (DLP), the Probabilistic Non-Linear Program (PNLP), and the Randomized Linear Programming (RLP) method (see e.g. Talluri & van Ryzin, 2004, chap. 3.3.1–3.3.3).In the DLP it is assumed that demand is known in advance. The model we present in Section 5 is an extension of the DLP which takes into account the competitor’s spill over demand. The latter is a part of the customers requesting a ticket at the respective airline if they are denied a ticket by the competitor.In the PNLP booking limits are set based on the probability of the products’ demand levels. If a product’s expected revenue—calculated from the product’s price multiplied by its expected demand—leads to an increase of total revenue, a further capacity unit is allocated to it. In Section 5, we also present a competitive version of the PNLP.The RLP is a randomized extension to the DLP. Although the RLP performs better than the DLP in some cases, it does not clearly dominate the DLP.In this section we first define what an NE is in general and then explain what we mean by exact NE. Approximate NE are explained in more detail in Sections 3.2 and 4.An NE is a state in a game in which none of the players can improve his utility by deviating from his equilibrium strategy. Formally, an NE(x∗;y∗)can be defined asua(x∗;y∗)⩾ua(x;y∗)withua,xandx∗denoting a player a’s utility, a sample strategy for him and his equilibrium strategy, respectively, andy∗representing the equilibrium strategy of the competitor(s). The strategyx∗=argmaxxua(x;y∗)is called a best response of player a to a given strategyy∗of the other player(s). The definitions of NE and of best responses are defined analogously for all players.What we call an exact NE is an NE in a game based on the players’ complete strategy sets and payoff matrices. We will call this game original game. An NE can be made up of either pure strategies or mixed strategies. In our case a pure strategy is a vector with P positions denoting the booking limit for thepth product on thepth position. A mixed strategy, on the other hand, defines a probability distribution on the available pure strategies.Nash (1950) proved that every finite game has at least one exact equilibrium (in mixed strategies) but did not provide an approach how to reach it. In order to compute NE special algorithms are needed.This is what algorithmic game theory deals with, among other things. See e.g. Nisan et al. (2007) for a collection of recent contributions on this topic. All such algorithms so far rely on the games’ complete payoff matrices as input. The entries in the matrices represent the payoffs to the players if e.g. player 1 plays strategy i and player 2 plays strategy j. If only two players are involved, the game based on their payoff matrices is called a bimatrix game. One of the best-known algorithms for solving bimatrix games is the algorithm by Lemke and Howson (1964) which is a pivoting algorithm that finds one equilibrium. The algorithm by Audet, Hansen, Jaumard, and Savard (2001) finds all (extreme) NE through a search tree. We will shortly explain the term extreme NE in Section 6. See McKelvey and McLennan (1996) for an overview on further algorithms.

@&#CONCLUSIONS@&#
