@&#MAIN-TITLE@&#
Hop constrained Steiner trees with multiple root nodes

@&#HIGHLIGHTS@&#
New optimization problem generalizing diameter and hop constrained tree problems.Analysis of special polynomial cases, NP-hardness proof and non-approximability result.Extended formulations based on layered graph reformulations and strengthening valid inequalities.Theoretical and computational comparisons between all models.

@&#KEYPHRASES@&#
Integer programming,OR in telecommunications,Steiner tree,Hop-constraints,

@&#ABSTRACT@&#
We consider a network design problem that generalizes the hop and diameter constrained Steiner tree problem as follows: Given an edge-weighted undirected graph with two disjoint subsets representing roots and terminals, find a minimum-weight subtree that spans all the roots and terminals so that the number of hops between each relevant node and an arbitrary root does not exceed a given hop limit H. The set of relevant nodes may be equal to the set of terminals, or to the union of terminals and root nodes. This article proposes integer linear programming models utilizing one layered graph for each root node. Different possibilities to relate solutions on each of the layered graphs as well as additional strengthening inequalities are then discussed. Furthermore, theoretical comparisons between these models and to previously proposed flow- and path-based formulations are given. To solve the problem to optimality, we implement branch-and-cut algorithms for the layered graph formulations. Our computational study shows their clear advantages over previously existing approaches.

@&#INTRODUCTION@&#
Quality-of-service aspects are among the major issues when designing modern telecommunication networks and in particular bounding the maximum overall delay of each relevant communication path is important. It is widely accepted that in many applications the delay along some connection mainly depends on the number of intermediate routers, i.e., hops, and that restricting the maximum length of each established path by some predefined threshold limits the probability of failures (see, e.g., Dahl, Gouveia, & Requejo, 2006; Salama, Reeves, & Viniotis, 1996). Furthermore, whenever redundancy is not of major importance it is usually desired that the final network has tree structure in order to ensure unique communication paths and to reduce the maintenance effort, cf. Salama (1996) and Salama et al. (1996).The literature contains many works dedicated to two problems that fit into this framework, namely the “centralized” hop-constrained minimum spanning/Steiner tree problem (HMSTP/ HMStTP), see, e.g., Dahl et al. (2006), Gouveia (1995), Gouveia and Requejo (2001), Gouveia, Paias, and Sharma (2011), Gouveia, Simonetti, and Uchoa (2011), and Voß (1999) and the references therein, and the “decentralized” diameter-constrained minimum spanning/Steiner tree problem (DMSTP/DMStTP), see, e.g., Achuthan, Caccetta, Caccetta, and Geelen (1994), Gouveia and Magnanti (2003), Gouveia, Magnanti, and Requejo (2004, 2006), Gouveia et al. (2011), and Gruber (2009) and the references therein.To define the HMSTP consider an undirected, edge-weighted graphG=(V,E)with node set V, edge set E, a hop limitH∈N, and one dedicated central noder∈V. The objective is to identify a minimum cost spanning tree such that the path between the root r and any nodev∈Vdoes consist of at most H edges. For the Steiner variant (HMStTP) we are further given a set of terminalsT⊂Vand the aim is to identify a minimum cost Steiner tree connecting all terminals such that the path between the root r and any terminal nodet∈Tdoes consist of at most H edges. To define the DMSTP consider, as before, an undirected, edge-weighted graph. The objective is to identify a minimum cost spanning tree such that the path between any two nodes does consist of at most D edges, for some given diameter limitD∈N. Changes to the Steiner variant (DMStTP) are analogous to the hop-constrained problems.However, several other tree problems with hop constraints appear to be of practical interest and one objective of this work is to propose a more general framework to contextualize these problems. In practice we may have multiple (e.g., replicated) central servers in which case each server communicates with a subset of terminals, and lengths of the corresponding communication paths are limited. One of the important sparse mode multicast routing protocols is based on core-based trees (CBTs) (Ballardie, Francis, & Crowcroft, 1993). In this protocol, a set of “core routers” is given, and they all multicast the information to a set of other relevant nodes (these correspond to receivers, that can be other routers or even end users). In classical multicast routing, each core router builds its own communication tree (also known as the source tree architecture), connecting the core router with the group of its relevant nodes. In the sparse mode multicast routing, however, it is required that the union of subtrees associated to the core routers builds a single tree. In this latter concept, also known as the shared-tree architecture, a common tree is built that connects all core routers and their relevant nodes, cf. Gossain, de Morais Cordeiro, and Carlos (2002), Salama (1996), and Salama et al. (1996). CBTs offer better scalability when compared to the source tree architecture and their main applications are for the Internet Protocol Television (IPTV) and in Mobile Digital Video Broadcasting-Handheld (DVB-H), see Minoli (2007). To ensure that the communication delays are not too high and also to ensure a certain reliability of the network, additional hop constraints may be imposed along the communication paths, e.g., between each server–receiver pair, cf. Dahl et al. (2006).In this paper, we provide a new generic mathematical model for the application described above. The problem is called the Hop Constrained Minimum Steiner Tree Problem with Multiple Root nodes (HSTPMR) problem. We are given an undirected graphG=(V,E), with node set V, edge set E, edge costsce⩾0, for alle∈E, and a hop limitH∈N. The node set V contains two disjoint subsets: root nodesR,|R|⩾1, and terminal nodesT⊆V⧹R. Furthermore, we are given a setT′⊆T∪Rof relevant nodes for which hop limits to all root nodes need to be considered.A solution to the HSTPMR is a Steiner treeG′=(V′,E′)spanning all root and terminal nodes, i.e.,R∪T⊆V′, such that the hop constraints are met for all relevant nodesv∈T′. More precisely, for each relevant nodet∈T′and each rootr∈R, the unique path between t and r can contain at most H edges. The objective is to find a feasible subtree yielding minimum total edge costs. IfT∪R=V, the solution will be a spanning tree of G.In this study we consider two particular cases of this new framework which as far as we know have not been studied before (with exception to the introductory work in Gouveia, Leitner, & Ljubić (2012a)): (a)T′=T∪Rand (b)T′=T. In the first case, delay bounds between roots have to be taken into consideration (e.g., when roots model replica servers) and in the second case delays between roots are not critical (e.g., when services by different providers are offered to terminals). An illustrative instance of the HSTPMR with two roots and three terminals is given in Fig. 1a, while Fig. 1b and c depict solutions to this instance forT′=T∪RandT′=T, respectively, assuming thatH=3. Notice that one could generalize this problem even further by introducing subsets of roots and hop limits that would depend on each node fromT′.However, the two cases already present different characteristics that strongly affect the corresponding models. For the caseT′=T∪R, it is easy to see that the hop-constrained arborescences associated to each root span the same set of nodes and the same set of undirected edges. This property is useful to strengthen the models that will be proposed in the next subsection. Unfortunately, this property may not be satisfied in the caseT′=Tsince the maximum distance between any two roots may exceed H. In fact as can be deduced from Fig. 1c, the subtree obtained from undirecting the arcs of the hop-constrained arborescence associated to root 0 does not coincide with the subtree obtained from undirecting the arcs of the hop-constrained arborescence associated to root 1. Thus, many of the model enhancements valid for the caseT′=T∪Rthat we will discuss below, will not be valid forT′=T. The following results, however, provide an upper bound on the maximum distance between any two roots.Lemma 1LetG′=(V′,E′)be a feasible solution to an instance of the HSTPMR withT′=Tand letd(u,v)denote the distance between two nodesu,v∈V′inG′. Then, the maximum distance between any pair of root nodes inG′does not exceed2H-ℓwhereℓis the maximum distance between any two terminal nodes inG′, i.e.,ℓ=maxu,v∈Td(u,v).If there is a single terminal, two roots can be each at distance H from it, which gives the maximum distance of2H. Assume that|T|⩾2, lett1andt2be two terminals at maximum distance and letP=(t1=v0,v1,…,vℓ=t2)(vi∈V′for0⩽i⩽ℓ, and{vi,vi+1}∈E′for0⩽i⩽ℓ-1) denote the path betweent1andt2inG′. Furthermore, letr∈Rbe an arbitrary root andvj∈P,0⩽j⩽ℓ, be the node from P such that the path between r andvjis edge disjoint to P. Since, the maximum distance between a terminal and a root node may not exceed H, we haved(r,vj)⩽H-ℓ+jifj⩽ℓ/2H-jifj⩾ℓ/2Now lets∈Rbe another root andvk∈P,0⩽k⩽ℓagain be the node from P such that the path between s andvkis edge disjoint to P. Without loss of generality we assume thatj⩽k. Then, by case distinction it is easy to see thatd(r,s)=d(r,vj)+d(vj,vk)+d(s,vk)⩽2H-ℓholds and that this bound can be tight. □The next corollary immediately follows from Lemma 1.Corollary 1Letdiam(T)be the minimum diameter of a subtree of G spanning all nodes from T. Then, for any feasible solutionG′=(V′,E′)to an instance of the HSTPMR on G withT′=Tthe maximum distance between any pair of root nodes inG′does not exceedH′, whereH′=2H-diam(T).Notice thatH′can be calculated in polynomial time: It suffices to run breadth-first-search starting from eacht∈Tuntil all remaining terminals are reached. The subtree with the smallest diameter obtained gives us the value ofdiam(T). As we will show in Section 3.4, this corollary allows us to provide modified models, where many of the enhancements directly valid for the caseT′=T∪Rapply. The drawback is that these modified models use many more variables and constraints than the original model without the enhancements.Our Contribution. In this paper, besides introducing the general and new problem we present three kinds of results: (a) Complexity: We analyze special cases in which the HSTPMR can be reduced to previously studied network design problems, identify special polynomial cases, show that the problem is NP-hard in general, and that one cannot guarantee to find an approximation ratio better thanΘ(log|V|)unless P=NP. (b) Mixed integer programming (MIP) models: We discuss layered graph reformulations, present strengthening valid inequalities and show that the obtained models theoretically dominate flow- and path-based models studied in Gouveia et al. (2012a). (c) Computational results: Branch-and-cut algorithms are developed for layered graph models and computationally compared to each other and to the best performing approach from Gouveia et al. (2012a). Computations are carried out on a set of benchmark instances known from the HMSTP – the results show that the branch-and-cut approaches appear to be reasonable alternatives to solve these more general cases.Outline of the Paper. In the remainder of this section we study the computational complexity of the HSTPMR. In Section 2 we discuss a generic integer linear programming (ILP) formulation of the problem and review a path-based formulation from our previous work (Gouveia et al., 2012a) which outperformed the other flow- and path-based models from Gouveia et al. (2012a) both theoretically, i.e., with respect to the quality of its linear programming (LP) bounds, and computationally. Afterwards, two possibilities for reformulating the HSTPMR over layered graphs together with further valid inequalities for strengthening the LP relaxations of the resulting models are discussed in Section 3. In Section 4 we compare our models with respect to their LP relaxation values and also show which variants dominate the previously proposed models. Details of the developed branch-and-cut approaches are given in Section 5, where we also discuss the results of our computational study. Finally, some conclusions are drawn in Section 6.Next, we analyze the computational complexity of the HSTPMR and its relationship with other problems. Obviously, for singleton sets R and T the problem becomes the Hop Constrained Shortest Path Problem (HSPP) which can be solved in polynomial time for any H since we are given nonnegative edge costs. If either|R|=1or|T′|=1(but not both), the problem is either the HMStTP ifV≠T∪Ror the HMSTP ifV=T∪R. These problems are known to be NP-hard if2⩽H<|V|-1, cf. (Gouveia, 1995). IfT′=Ror|T|=1andT′=T∪R, we have the DMStTP or the DMSTP with the diameter equal to H which are known to be NP hard if4⩽H<|V|-1, cf. Garey and Johnson (1979).In the remainder of this paper, we will consider the most general case, assuming thatH⩾3,|R|⩾2and|T|⩾2, which is shown to be NP-hard by the following Lemma (see Appendix A for the proof).Lemma 2Assuming that|R|⩾2and|T|⩾2, the HSTPMR can be solved in polynomial time forH=2. ForH⩾3, the problem is NP-hard, and it cannot be guaranteed to find an approximation ratio better thanΘ(logn)unless P=NP.An overview on all complexity results regarding the HSTPMR and its relationships with related problems is provided in Table 1where “∈P” is used to denote cases when the problem is solvable in polynomial time and “–” denotes that a particular case is infeasible or that no previously considered problem corresponds to that case.Notation. LetS=V⧹(T∪R)denote the set of remaining nodes that we will refer to as potential Steiner nodes. To model a feasible solutionG′=(V′,E′)on G, we will use binary edge variables,xij, that are set to one if{i,j}∈E′, and to zero, otherwise, for all{i,j}∈E. In addition, we will use binary node variables associated to potential Steiner nodes:yiis set to one ifi∈V′∩S, and to zero, otherwise, for all nodesv∈S. Furthermore, letA={(i,j),(j,i)|{i,j}∈E}denote the set of bi-directed arcs in G. For a subsetW⊂V, we useδ(W)={{i,j}∈E|i∉W,j∈W},δ-(W)={(i,j)∈A|i∉W,j∈W}, andδ+(W)={(i,j)∈A|i∈W,j∉W}to denote the undirected and directed, ingoing and outgoing cutset, respectively. For a set of arcsA′and some vector of variablesz, we also use notationz[A′]=∑(i,j)∈A′zij. Finally, for a binary vectorx∈{0,1}|E|letE(x)denote the subset of edges for whichxe=1.Next we present a generic model for the HSTPMR which will be specialized later on by means of paths and layered graphs.LetF={x∈{0,1}|E||∀s∈R,∀t∈T′,∃s-tpathPinE(x)s.t.|P|⩽H}be the set of incidence vectors that contain at least one feasible path between eachs∈Rand eacht∈T′⧹{s}, i.e., a path of length at most H. A generic MIP model for the HSTPMR is given by (1)–(7):(1)min∑{i,j}∈Ecijxij(2)s.t.x∈F(3)xij⩽yii∈S,{i,j}∈E(4)∑{i,j}∈Exij=|R|+|T|+∑i∈Syi-1(5)∑{i,j}∈Exij⩾2yii∈S(6)xij∈{0,1}{i,j}∈E(7)yi∈{0,1}i∈SConstraints (2) ensure that a solution must contain a feasible path for each commodity pair(s,t). These constraints can be modeled in several ways by using multi-commodity flows, path variables and constraints, or jump inequalities. To discuss the constraints (3)–(5) which, together with (2) ensure that the solution is a tree, we first observe that due to constraints (2) the solution subgraph induced by the hop-constrained paths for all commodities will be connected. Hence, to obtain a valid model, we further add constraints (3) and (4), inequalities (3) to guarantee that a node variable is set to one whenever an incident edge is chosen and Eq. (4) to ensure that the number of edges in the solution is one less than the number of nodes. Finally, constraints (5) guarantee that the degree of each Steiner node in a feasible solution is at least two, i.e., Steiner nodes cannot be leaves of a solution. Due to the hop constraints these constraints also guarantee that the solution is not disconnected as illustrated by Fig. 2. Thus (1)–(7) is a feasible model for the HSTPMR and Fig. 2 illustrates that constraints (5) are not redundant in this formulation since omitting them we may obtain isolated components.In this section, we briefly recall modelUPathDIfrom Gouveia et al. (2012a) which turned out to be the best model, both from a theoretical as well as from a computational perspective among all models presented in Gouveia et al. (2012a). Next to already introduced edge and node decision variables,UPathDIused disaggregated arc variablesaijs,∀s∈R,∀(i,j)∈A, to indicate whether or not arc(i,j)is used when interpreting the solution as an outgoing arborescence rooted at s. Furthermore, the set of all hop constrained pathsWst⊆2A,|p|⩽H,∀p∈Wst, from each roots∈Rto each relevant terminalt∈T′⧹{s}is considered and an exponential number of path variables0⩽λpst⩽1one for each commodity pair(s,t),s∈R,t∈T′⧹{s}, and each feasible pathp∈Wstis introduced. Then, a valid path model is obtained by replacing (2) by (8)–(12) in model (1)–(7).(8)aijs+ajis=xijs∈R,{i,j}∈E(9)∑p∈Wstλpst=1s∈R,t∈T′⧹{s}(10)∑p∈Wst:(i,j)∈pλpst⩽aijss∈R,t∈T′⧹{s},(i,j)∈A(11)λpst⩾0s∈R,t∈T′⧹{s},p∈Wst(12)aijs∈{0,1}s∈R,(i,j)∈AFinally, forUPathDIwe add the strengthening constraints (13) and (14) ensuring that the indegree of each nodei∉Ris identical for all arborescences and that Steiner nodes cannot be leaves in them. In turn, we remove (4) and (5) since these constraints were shown to be redundant in the resulting model (Gouveia et al., 2012a).(13)as[δ-(i)]=yi,i∈S0,i=s1,elses∈R,i∈V(14)as[δ+(i)]⩾yis∈R,i∈SReformulating hop-constrained network design problems using layered graphs recently became a popular technique for obtaining theoretically strong ILP models yielding tight LP bounds. Branch-and-cut algorithms used to solve these models are frequently among the leading approaches for the underlying problems, cf. Gouveia et al. (2011) and Ljubić and Gollowitzer (2013). In this section we show two different layered graph approaches that can be used to model the HSTPMR.We now introduce one layered graphGLs=VLs,ALsfor each root nodes∈R. For everys∈R,VLsis defined by its root nodes0, together with nodesih,1⩽h⩽H-1, for all original nodesi∈V⧹{s}and nodestHfor all other relevant terminalst∈T′⧹{s}. For each pair of nodesih,jh+1∈VLswe add an arc(ih,jh+1)toALsif(i,j)∈A. Formally, for eachs∈R,VLs={s0}∪{ih:i∈V⧹{s},1⩽h⩽H-1}∪{tH:t∈T′⧹{s}}andALs=(ih,jh+1):ih∈VLs,jh+1∈VLs,(i,j)∈A; see Fig. 3for an example.In addition to the previously introduced node and edge design variables, we use two new sets of binary variables to model the problem in the layered graph framework. VariablesXijsh, are associated to arcs(ih,jh+1)∈ALsand are set to one if the corresponding arc is part of the rooted Steiner arborescence inGLs, for eachs∈R. VariablesYishare associated to nodesih∈VLs,i∈V,0⩽h⩽H, and are set to one if the corresponding node is part of the rooted Steiner arborescence inGLs, for eachs∈R. The resulting MIP model to which we will refer to asLGis given by (15)–(21) together with (3)–(7).(15)min∑{i,j}∈Ecijxij(16)s.t.Xs[δ-(ih)]=Yishs∈R,ih∈VLs,i≠s(17)∑h=1HYish=1i∈T′⧹{s}⩽1i∈R⧹(T′∪{s})⩽yii∈Ss∈R,i∈V(18)∑(ih-1,jh)∈ALs,i≠kXijs,h-1⩾Xjkshs∈R,(jh,kh+1)∈ALs,j≠s(19)∑h=0H-1Xijsh+Xjish⩽xijs∈R,{i,j}∈E(20)Xijsh∈{0,1}s∈R,(ih,jh+1)∈ALs(21)Yish∈{0,1}s∈R,ih∈VLs(3)–(7)Indegree constraints (16) link arc to node variables on each layered graph, while constraints (17) ensure that each original node is used at most once on each layered graph and link node variables on the layered graph to original node variables for potential Steiner nodes. Since layered graphs are acyclic, inequalities (18) ensure connectivity on each layered graph, i.e., they guarantee that an arc(jh,kh+1)emanating from nodejhmay only be used if at least one ingoing arc(ih-1,jh)withi≠kis selected. Constraints (19) link arc variables on each layered graph to undirected edge variables on the original graph. Fig. 4shows that in the context of this model, that is after adding all the information provided by the layered graph variables, constraints (4) and (5) are still necessary to guarantee that the final solution will be a tree.Acyclicity of each layered graph, allows to eliminate subtours in modelLGusing a polynomial number of constraints (18). Hence,LGis a compact model which can be solved by LP-based branch-and-bound. It is well known, however, that one can strengthen layered graph based models by adding directed cutset constraints (22) whereVis=ih∈VLs|1⩽h⩽H.(22)Xs[δ-(W)]⩾1,s∈R,t∈T′⧹{s},W⊆VLs⧹{s0},Vts⊆WThe resulting model will be denoted byLGC. It contains an exponential number of constraints and can be solved by branch-and-cut (B&C).As pointed out in the introduction, the arborescences for each root share the same set of edges. Thus, we can replace inequalities by equations in (17) and (19), i.e., consider Eqs. (23) and (24) instead.(23)∑h=1HYish=yii∈S1i∈(R∪T)⧹{s}0i=ss∈R(24)∑h=0H-1Xijsh+Xjish=xijs∈R,{i,j}∈EWe useLGCIto refer to modelLGCwhere inequalities (17) and (19) are replaced by Eqs. (23) and (24). To make sure that the indegree of each Steiner node does not exceed its outdegree, we can further add (25) to obtain modelLGCIO.(25)Xs[δ+(ih)]⩾Yishs∈R,ih∈VLs,i∈SAnother set of valid inequalities is derived from the fact that the distance between two roots must not depend on the arborescence considered, i.e., on the chosen root. Root-depth constraints(26) which are further added to obtain modelLGCIORsimply state that if rootq∈Ris on level h w.r.t.GLs, then roots∈Rmust be on the same level w.r.t.GLq.(26)Yqsh=Ysqhs∈R,q∈R⧹{s},1⩽h⩽HAs pointed out above, the strengthening inequalities (23) and (24) are not valid in this case since we cannot simply ensure that the arborescences for each root share the same set of edges. Corollary 1 permits us to introduce a different layered graph modelG^LscontainingH′layers for the caseT′=Tin which all arborescences use the same set of original nodes and edges. In each such graphG^Lsthe maximum layerH(i)of some original nodei∈Vis defined asH(i)=0ifi=sH′ifi∈R⧹{s}H′-1ifi∈SHifi∈TFormally, for eachs∈R,G^Ls=V^Ls,A^Lsis defined byV^Ls={s0}∪{ih:i∈V⧹{s},1⩽h⩽H(i)}andA^Ls=(ih,jh+1):ih∈V^Ls,jh+1∈V^Ls,(i,j)∈A.Based on this observations, model (27)–(33) to which we will refer to asLGEuses the same set of variables as the previous model. Note, however, that for this case we considerH′layers which is almost as twice as the number of layers in the original graph. On the other hand, the model defined in this extended layered graph permits us to use the strengthening inequalities that have been used for theT′=T∪Rcase.(27)min∑{i,j}∈Ecijxij(28)s.t.Xs[δ-(ih)]=Yishs∈R,ih∈V^Ls,i≠s(29)∑h=1H(i)Yish=1i∈(T∪R)⧹{s}yii∈Ss∈R,i∈V(30)∑(ih-1,jh)∈A^Ls,i≠kXijs,h-1⩾Xjkshs∈R,(jh,kh+1)∈A^Ls,j≠s(31)∑h=0H(i)Xijsh+∑h=0H(j)Xjish=xijs∈R,{i,j}∈E(32)Xijsh⩾0s∈R,(ih,jh+1)∈A^Ls(33)Yish⩾0s∈R,ih∈V^Ls(5)–(7)Note that, we do not include constraints (3) and (4) in modelLGEsince they are redundant as we will prove in Section 4. As previously discussed, by considering directed cutset constraints (34) we can obtain a stronger modelLGECwhich contains an exponential number of constraints. To avoid that Steiner nodes may be leaves in any of the arborescences, we further add inequalities (35) yielding modelLGECO. Finally, by the same arguments as before root-depth constraints (36) are valid and we will useLGECORto refer to the resulting model.(34)Xs[δ-(W)]⩾1s∈R,t∈(T∪R)⧹{s},W⊆V^Ls⧹{s0},{th:1⩽h⩽H(t)}⊆W(35)Xs[δ+(ih)]⩾Yishs∈R,ih∈V^Ls,i∈S(36)Yqsh=Ysqhs∈R,q∈R⧹{s},1⩽h⩽H′In this section we compare the different formulations with respect to the value of their LP relaxation. In Section 4.1 we address the caseT′=T∪Rand in Section 4.2 we address that caseT′=T. We also show that some set of constraints becomes redundant after the addition of some sets of valid inequalities.ByPMwe will denote the convex hull of all feasible LP solutions of a MIP formulation M and byproja1,…,an(PM), the orthogonal projection of the convex hull of LP solutions of M onto the space defined by variablesa1, …,an. Furthermore, byvLP(.)we denote the value of the LP relaxation of some model. When comparing two formulationsF1andF2, we sayF1is stronger thanF2ifvLP(F2)⩽vLP(F1)and strictly stronger if there additionally exist instances for which strict inequality holds. Furthermore, if for two formulations, none of them is stronger than the other, we say that they are incomparable. In many cases strict dominance follows due to the computational results that will be discussed in Section 5.1. Usually, however, we will additionally provide solutions that are feasible for one model and not feasible for the other.For better readability, Table 2provides a summary of all model variants and their definitions.The following theorem which is proved by a series of subsequent lemmas summarizes the obtained relations between the considered models whenT′=T∪R.Theorem 4.1ForT′=T∪R, the following relations hold:Thereby, an arrow indicates that the formulation at the target is strictly stronger than the one at the source while a dashed edge indicates that the corresponding formulations are incomparable.FormulationLGCis strictly stronger than formulationLG.We skip the proof of this lemma, since it is well known that the result holds for the case of a single root and the result easily extends to multiple roots.Lemma 4FormulationLGCIis strictly stronger than formulationLGC. Furthermore, constraints(3) and (4)are redundant inLGCI.SinceLGCIcontains all constraints of modelLGCit is sufficient to consider the example given in Fig. 5 which shows that constraints (23) and (19) improve the LP bound. Computational results given in Section 5.1 further show this relation.To prove the second result, consider an arbitrary roots∈Rand edge{i,j}∈Eincident to some potential Steiner nodei∈S. To see that constraints (3) are redundant we use Eq. (24), (18), (16) and (23) together with the fact that the minimum and maximum layer of nodesihcorresponding to potential Steiner nodes i is 1 andH-1, respectively:xij=(24)∑h=0H-1Xjish+Xijsh=∑h=0H-2Xjish+∑h=1H-1Xijsh⩽(18)⩽∑h=0H-2Xjish+∑h=0H-2∑(kh,ih+1)∈ALs,k≠jXkish=∑h=1H-1Xs[δ-(ih)]=(16)∑h=1H-1Yish=(23)yiTo show that Eq. (4) is implied:∑{i,j}∈Exij=(24)∑{i,j}∈E∑h=0H-1Xijsh+Xjish=∑i∈V∑h=1HXs[δ-(ih)]=(16)=(16)∑i∈V∑h=1HYish=(23)|R|+|T|+∑i∈Syi-1□FormulationLGCIOis strictly stronger than formulationLGCI. Furthermore, inequalities(5)are redundant inLGCIO.SinceLGCIOcontains all constraints ofLGCI, it only remains to show thatLGCIOis strictly stronger. This relation can be seen from the computational results discussed in Section 5.1. In addition, Fig. 6illustrates an example that is feasible for theLGCImodel, but it violates inequalities (25).Finally, for each potential Steiner nodesi∈S, inequalities (5) are redundant since:∑{i,j}∈δ(i)xij=(24)∑{i,j}∈δ(i)∑h=0H-1Xijsh+Xjish=∑h=1HXs[δ-(ih)]+∑h=0H-1Xs[δ+(ih)]⩾(16) and (25)∑h=1HYish+∑h=0H-1Yish=(24)2yi□FormulationLGCIORis strictly stronger than formulationLGCIO.SinceLGCIORcontains all constraints ofLGCIO, it only remains to show that root-depth constraints (26) can be violated in an optimal LP solutions of modelLGCIO. Consider the solution shown in Fig. 7feasible forLGCIO(H=5;T′=T∪R). Clearly, inequalities (26) are violated sinceY∼105≠Y∼015and alsoY∼104≠Y∼014.It remains to show that, for solution values(x¯,y¯)corresponding to Fig. 7a we cannot find a different set of feasible vectors(X∼s,Y∼s),s∈{0,1}, that satisfy constraints (26). This is established by the following two observations which will be proved in the following:1.For any solution vector(X∼0,Y∼0)feasible w.r.t.(x¯,y¯),Y∼105⩾1/3holds.For any solution vector(X∼1,Y∼1)feasible w.r.t.(x¯,y¯),Y∼015=0holds.To see thatY∼105=1/3must hold, note that each path in Fig. 7a between nodes 0 and 3 consists of at least three edges. SinceH=5and we need to establish a feasible connection from 0 to 9, this implies thatY∼303=1and thus through the path 0–5–7–3 and 0–1–6–3 we send2/3and1/3units of flow, respectively. Since indegree of 6 and 7 needs to be one,1/3units of flow are sent through(6,7),(3,6),(2,6). Consequently,1/3units of flow has to be sent along 0–5–7–3–6–1 to reach node 1 which means thatY‾105⩾1/3.Note thatY∼015=0means that node 0 cannot be at the last layer. To see that this holds observe that terminal 4 can only be reached through node 0. Therefore, when 1 is taken as the root, the maximal layer for node 0 is four. □FormulationUPathDIis strictly stronger than formulationLG.Let(x¯,y¯,a¯,λ¯)be an optimal solution to the LP relaxation of formulationUPathDI. We first show how to derive a solution(x¯,y¯,X‾,Y‾)∈PLGwith the same objective value. The main difficulty in this derivation is that the linking constraints (19) of modelLGsum over all copies of one edgee∈Ewhile the linking constraints (8) of modelUPathDIconsider each terminal individually. Thus, for eachs∈Rand each arc(i,j)∈A, we use values of the variablesaijsto obtain the values of the variablesXijsh,(ih,jh+1)∈ALs,0⩽h⩽H-1as follows:(37)X‾ijsh=a¯ijsifi=smax0,mina¯ijs,∑(kh-1,ih)∈ALs:k≠jX‾kis,h-1-∑h′=0h-1X‾ijsh′otherwiseFor each root s and for each arc(i,j), the valuesX‾ijshare defined recursively w.r.t. the layers starting from the root. Available capacitiesa¯ijsare distributed among the layers while respecting the connectivity constraints (18) and ensuring that∑h=0H-1X‾ijsh⩽a¯ijs. We note that sincea¯s[δ-(i)]⩽1,∀i∈V, cf. (13), we can use Eq. (16) to set variable valuesY‾ish,∀s∈R,∀ih∈VLs. To see that inequalities (17) hold, we first observe that for each nodei∈V, we have∑h=1HY‾ish=(16)∑h=1HX‾s[δ-(ih)]=∑(j,i)∈A∑h=1HX‾jish⩽(37)∑(j,i)∈Aa¯jis=(13)y¯ii∈S0i=s1elseIt remains to prove that for each roots∈Rand each terminalt∈T′⧹{s},∑h=1HY‾tsh=1does hold. First observe that due to (9), (10), and (13) for each arc(u,t)we have∑p∈Wst:(u,t)∈pλ¯pst=a¯uts. Furthermore, for each arc(i,j),i≠s, contained in the used set of paths from s to t, i.e., in the set{p∈Wst|λ¯p>0}, we have∑p∈Wst|(i,j)∈pλ¯p⩽∑p∈Wst|(k,i)∈p,k≠jλ¯psince flow balance holds for each path. Thus, due to (37) we will distribute the total available capacitya¯itsfor each arc(i,t)witht∈T′⧹{s}on the arcs of the layered arborescence with root s, i.e.,∑h=1HX‾s[δ-(th)]=∑h=1HY‾tsh=a¯s[δ-(t)]=1.To see that the inequality can be strict consider the LP-solution(x¯,y¯,X‾,Y‾)given in Fig. 5 feasible forLG. It is, however, not possible to derive assignments of variable valuesa0anda1that satisfy all constraints of modelUPathDI. □FormulationsUPathDIandLGCare incomparable.We first consider the solution given in Fig. 5 which is a feasible LP-solution ofLGCbut infeasible for the LP relaxation ofUPathDI. Hence, it suffices to additionally consider an LP-solution feasible forUPathDIwhich is infeasible forLGC. As already observed by Gouveia et al. (2011) for the single root case a path formulation allows to use the full capacity of arcs at different positions in paths to different terminals, while in a layered graph formulation total capacity must be equal to the sum of capacities on different positions independently of the considered terminal. Their example can be generalized to the multiple root case in a straightforward way. □FormulationLGCIOis strictly stronger than formulationUPathDI.We show that given an LP solution(x¯,y¯,X‾,Y‾)ofLGCIOwe can construct a solution(x¯,y¯,a¯,λ¯)∈PUPathDIusing(38)a¯ijs≔∑h=0H-1X‾ijsh∀s∈R,∀(i,j)∈AHereby, to simplify the notation we assume thatX‾ijsh=0if(ih,jh+1)∉ALs. From Lemma 4 we conclude that inequalities (3) are satisfied since they are implied by modelLGCIO. Constraints (8) follow due to (38) and (24). Furthermore, from the directed cutset constraints (22), using the max-flow min-cut theorem together with the path decomposition of the flow we can construct the necessary set of paths on the layered graph for each roots∈Rand each relevant terminalt∈T′⧹{s}. Since hop constraints are implicitly satisfied in the structure of the layered graph, constraints (9) and (10) are satisfied. Using (38), (16) and (23) we show that Eq. (13) are satisfied as follows:∑(j,i)∈Aa¯jis=(38)∑(j,i)∈A∑h=0H-1X‾jish=∑h=1HX‾s[δ-(ih)]=(16)∑h=1HY‾ish=(23)y¯ii∈S0i=s1elseFinally, using the fact that potential Steiner nodesi∈Sdo not exist in any layered graph at layer H, inequalities (14) hold for each roots∈Rsince∑(i,j)∈Aa¯ijs=(38)∑(i,j)∈A∑h=0H-1X‾ijsh=∑h=0H-1X‾s[δ+(ih)]⩾(25)∑h=0H-1Y‾ish=(23)y¯i.To see that the inclusion can be strict, we refer again to the previously mentioned straightforward generalization of the example provided by Gouveia et al. (2011) for the single root case. □In this subsection we prove similar results for the caseT′=T. Again, the following theorem is proved by a series of subsequent lemmas.Theorem 4.2ForT′=T, the following relations hold:Thereby, an arrow indicates that the formulation at the target is strictly stronger than the one at the source while a dashed edge indicates that the corresponding formulations are incomparable.In what follows, we will prove only those results stated in the latter theorem that are non-trivial and cannot be derived in a similar way as for the caseT′=T∪R.Lemma 10FormulationLGCis strictly stronger than formulationLG. Furthermore, formulationLGECis strictly stronger than formulationLGE.We skip the proof of this result since it is well known for the case of one root and it is easy to find examples showing that the directed cutset constraints can be violated in optimal LP solutions of modelsLGandLGE, respectively.Lemma 11FormulationLGEis strictly stronger than formulationLGand formulationLGECis strictly stronger than formulationLGC. Furthermore, constraints(3) and (4)are redundant inLGE.To see thatLGEis stronger thanLG, we observe that it essentially differs from modelLGby equations Eq. (29) which are lifted variants of inequalities (17) and Eq. (31) which are stronger versions of inequalities (19). To see that the relation is strict, we consider the LP-solution ofLGcorresponding to Fig. 8and note that we cannot find a layered arborescence with root 1 feasible forLGE, i.e., such that the indegree of node 0 is one, without increasing the variable valuex01orx03.The same arguments can be used when considering the formulations with directed cutset constraints, i.e.,LGECandLGEC. Redundancy of constraints (3) and (4) inLGEcan be shown using an analogous deduction as in Lemma 4 for the caseT′=T∪R.□FormulationsLGEandLGCare incomparable.We first observe that ifT′=T, the solution given in Fig. 8 is a valid LP solution forLGC. As argued before, however, we cannot find a feasible arborescence with root 1 such that the indegree of 0 (and all terminals) is one. Since this argument does not depend on the maximum allowed path length (and thus on the number of layers on a layered graph) this solution is infeasible forLGE. On the other hand, it is well known that the directed cutset constraints (22) can be violated in optimal LP-solutions ofLGE. □FormulationLGECOis strictly stronger than formulationLGEC. FormulationLGECORis strictly stronger than formulationLGECO. Furthermore, constraints(5)are redundant inLGECO.LGECORcontains all constraints ofLGECOwhich in turn contains all constraints ofLGEC. Strict inequality can be seen by modifying the previously discussed exemplary solutions given in Fig. 6 andFig. 7 to the caseT′=T. Redundancy of inequalities (5) inLGECOcan be shown in an analogous way as for the caseT′=T∪Rin Lemma 5.□FormulationUPathDIis strictly stronger than formulationLG. Furthermore, formulationLGECOis strictly stronger than formulationUPathDI.One can prove thatUPathDIis stronger thanLGand thatLGECOis stronger thanUPathDIusing analogous arguments than for the caseT′=T∪R, cf., Lemmas 7 and 9. To see that the first relation can be strict consider the previously discussed example given in Fig. 8 which provides a feasible LP solution ofLGwhich is infeasible forUPathDI. For the second relation, again consider the previously mentioned straightforward generalization of the example from Gouveia et al. (2011) to the case with more than one root node.□FormulationsLGCandUPathDIare incomparable.As mentioned before for the caseT′=T∪Ran exemplary LP-solution feasible forUPathDIbut infeasible forLGCcan be constructed as a straightforward generalization from the single root case (Gouveia et al., 2011). On the other hand, as discussed in Lemma 12 the solution given in Fig. 8 is feasible forLGCbut we cannot find a feasible orientation with root 1 such that the indegree of 0 is one, i.e., the solution is infeasible for the LP-relaxation ofUPathDI.□In this section, we detail all components of the implemented branch-and-cut algorithms (B&C) for the different variants ofLGandLGEand of the column generation approach (CG) used to solve the LP relaxation ofUPathDI. All approaches are implemented in C++ using IBM CPLEX 12.4 and all experiments have been performed on a single core of an Intel Xeon processor with 2.53gigahertz using at most 3gigabytes RAM.For the separation of directed cutset constraints (22) or (34), respectively, we run the maximum flow algorithm of Cherkassky and Goldberg (1994). In all separation variants, we use nested and backcuts, cf. (Ljubić et al., 2006), and insert at most 100 violated cuts in each iteration. If a particular model considers outdegree constraints on potential Steiner nodes, cf. (25) and (35), or root-depth inequalities, cf. (26) or (36), they are separated dynamically, rather than statically inserted in the beginning, since preliminary tests showed that typically only very few of them will be violated.In the column generation approach ofUPathDI, a hop constrained shortest path problem between each root and each relevant node on a graph with nonnegative arc costs needs to be solved in order to solve the pricing subproblem. As originally proposed by Gouveia, Paias, and Sharma (2008) for a spanning tree problem with distance constraints we potentially add multiple path variables for each root terminal pair by considering the shortest paths to all nodes adjacent to a currently considered relevant node for all hop values0⩽h⩽H-1, for more details see Gouveia et al. (2012a).Benchmark Instances. Evaluation and comparison of the approaches and models is conducted on benchmark instances from Gouveia et al. (2011) that are typically used for testing HMSTP and DMSTP approaches. We choose the first instance from each of the groups of random (R) and Euclidean instances (C) with 31, 41, and 61 nodes. For the sake of simplicity we will use 30, 40, and 60 to refer to them. All graphs are complete and we use the first|T|nodes as terminals and the last|R|nodes as roots. In our experiments, we choose|R|∈{2,4,6,8},|T|∈{5,10,15,20}, and test all possible combinations for hop limitsH=3,…,6andT′∈{T,T∪R}.Tables 3 and 4detail our results regarding the LP relaxations of all proposed models forT′=T∪RandT′=T, respectively. Results are grouped by instance sets, numbers of root nodes, and the hop limit. The tables provide information on: the total number of instances in each group (#), the number of instances for which the LP relaxation of a particular model could be solved within 7200 CPU-seconds (#solved), geometric means of the corresponding CPU-times, the numbers of instances for which the LP relaxation is integral (#int), average and maximum LP gaps in percent calculated by(OPT-vLP(.))/OPT. Notice, that#alldenotes the number of instances for which the LP-relaxation could be solved by all models and for which the optimal IP solution is known. The values for#int, average and maximum gaps are calculated only among those instances.We first observe that solving the LP relaxation ofUPathDIneeds significantly more CPU-time than solving the LP-relaxation of any of the layered graph models both forT′=T∪Rand forT′=T. Furthermore, modelUPathDIis not only theoretically dominated by the stronger layered graph variants but also exhibits significantly larger LP gaps in our test cases. Thus, it is clearly not competitive to the layered graph approaches. Since in the integer case the latter are additionally expected to benefit much more from built-in preprocessing of state-of-the-art ILP solvers we will not consider modelUPathDIin the remainder of this study. Comparing the different layered graph models, the largest improvement on the reported LP gaps is obtained with the inclusion of the directed cutset constraints. On the other hand, their inclusion also significantly increases the runtime. From Table 3 we further observe that whenT′=T∪R, that is in the case where the arborescences of each root share the same set of nodes and edges, the addition of Eqs. (23) and (24), often yields a further significant reduction on the reported LP gaps. This reduction is usually obtained with no cost or only with little cost in terms of CPU-time. Adding outdegree constraints (25) for potential Steiner nodes on each layered graph and root-depth constraints (26) further reduces the obtained gaps in many cases. This improvement, however, is typically rather small. On the other hand, since we only dynamically separate these constraints the additional CPU-time is almost negligible.ForT′=T, cf. Table 4, we conclude that despite the reported tighter LP bounds, the additional CPU-time needed to solveLGEis not negligible compared toLG.Similar to our previous observations w.r.t.LGCIin caseT′=T∪R, the bounds of modelLGECare clearly better than those ofLGEorLGC. Outdegree and root-depth constraints produce a further, although usually rather small, improvement on the reported LP bounds. Their influence seems to be more significant for the larger random instances.Overall, we conclude that the LP gaps usually increase with the instance size, increasing number of root nodes or decreasing hop limit and that the gaps resulting from random instances (R) are usually significantly larger than those resulting from the Euclidean instances (C). Furthermore, all proposed model enhancements are not only of theoretical importance but clearly tighten the LP bounds in many cases. In general the additional CPU-time needed to compute the tighter gaps is reasonable and, as we will see below, using the enhancements often contributes for solving the integer models.Tables 5 and 6summarize the computational results for solving the layered graph models in the integer case forT′=T∪RandT′=T, respectively. Here, we report the numbers of instances in each set (#), the numbers of instances solved to proven optimality within the time limit of 7200 CPU-seconds (#solved), geometric means of CPU-times in seconds, average optimality gaps in percent, numbers of instances where the LP relaxation could be solved by each layered graph model (#L), and average optimality gaps in percent on them. Hereby, optimality gaps are calculated as(UB-LB)/UBwhereUBandLBdenote the obtained upper and lower bounds, respectively.From Table 5, i.e., in caseT′=T∪R, we first observe that modelLGCIclearly outperforms the weaker variantsLGandLGCwith respect to all analyzed criteria. WhetherLGCIor the two even stronger modelsLGCIOandLGCIORperform best heavily depends on the considered instance and its parameters. On the one hand,LGCIoften yields the lowest CPU-times and optimality gaps after two hours. On the other hand,LGCIOandLGCIORsuccessfully solve some instances to proven optimality that could not be solved by the theoretically weaker models. ForT′=Tthe benefit of the stronger models including the various enhancements is intensified.LGECORsolved more instances to proven optimality than any of the other models.LGECandLGECOalso perform almost as good. With respect to needed CPU-times, these three models are usually quite close to each other and frequently exhibit a better overall performance than the weaker variants. In particular, we conclude that considering the extended layered graph with2H-diam(T)layers which enables most of the strengthening techniques clearly pays off in practice. When comparing the average gaps grouped by the numbers of root nodes, we observe that only for|R|=2we were able to solve all instances to optimality. The problem becomes more difficult to solve already for|R|=4, where the average gaps are 11.1% and 21.3% forT′=T∪RandT′=T, respectively. Note that for the instances of manageable size (i.e., where the LP relaxations could be solved by all layered graph models) the average gaps are significantly smaller. When|R|=6or|R|=8the remaining gaps remain, however, quite large (e.g., around 26% for|R|=8). Overall, we conclude that the models including the proposed enhancements often outperform their weaker variants and in particular allow to solve more instances to proven optimality within the given time limit.

@&#CONCLUSIONS@&#
In this article, we studied a generalization of the hop- and diameter constrained Steiner tree problems which arises by introducing multiple central, i.e., root, nodes. After introducing the general case we draw our attention to two particular cases which are motivated from practical applications. For them we identified special polynomially solvable cases and proved that the problem is NP-hard in general. Furthermore, we discussed MIP models for the two cases based on layered graph reformulations together with strengthening valid inequalities, established a hierarchy with respect to their LP relaxation values, and also compared them theoretically to a previously proposed path model. A computational study carried out on a set of benchmark instances known from the literature shows that the branch-and-cut approaches based on the layered graph reformulations clearly outperform the previously leading path model. Our results clearly indicate that all proposed model enhancements reduce the LP gaps in practice. Furthermore, in spite of the additional time needed to solve the LP relaxations, the stronger ILP models often lead to a better overall performance.The results of our computational study also indicate two directions for potential future research: (a) Since even for the strongest among the proposed models the bounds of the linear programming relaxation are sometimes quite large, one may try to identify further strengthening valid inequalities or even different modeling approaches. (b) We observed that for several instances, no reasonably good primal solutions could be obtained leading to large optimality gaps. Hence, obtaining high-quality heuristic solutions is another interesting topic for future research. It is, however, an open question whether we can always find a feasible solution to the HSTPMR in polynomial time. We conclude this paper by pointing out that other variants of the more general problem introduced at the beginning of the paper may be worth studying. Consider the variant withT′=RandV=T∪R. This corresponds to the problem of finding a minimum cost spanning tree that includes a diameter constrained Steiner tree with terminal set R. This variant is closely related to the two-level problem described and studied in Gouveia, Leitner, and Ljubić (2012b). It is also worth pointing out the particular case with|R|=2where we obtain the problem of finding a minimum cost spanning tree such that the length of the path between the two given root nodes does not exceed H. To the best of our knowledge it is not known and it does not appear to be obvious whether this problem can be solved in polynomial time.Proof of Lemma 2H=2: For|R|⩾3, each optimal solution must be a star centered at a nodev∈Vwith all roots and terminals different from v being leaves. Thus, we enumerate all such stars and each one yielding lowest cost is an optimal solution. In case|R|=2there are additional feasible solutions that can be obtained by assigning each terminalt∈Tto the closest of the two roots and connecting the roots by an edge. Thus, we can still obtain an optimal solution by enumeration. This argument holds for both cases,T′=TandT′=T∪R.H⩾3: To show this non-approximability result, we use an error-preserving reduction (see, e.g., Crescenzi, Kann, Silvestri, & Trevisan (1999)) from the SET COVER problem. Given a set cover instance with the set of elementsX={x1,…,xn}and a collection of subsetsY={y1,…,ym}, we transform it into a HSTPMR instance with two roots0,1andH=3as follows: Construct a graph G with the set of nodesV={x1,…,xn,y1,…,ym,0,1}. We insert an edge of cost one betweenxiandyjwhenever the setyicontains the elementxi. We connect all y nodes to the root 0 and set the cost of those edges ton+1. Finally, we connect 0 and 1 with an edge of cost one (see Fig. 9). It is not difficult to see that there is a one-to-one correspondence between the set of feasible solutions of the set cover and the set of feasible solutions of the HSTPMR on G withH=3. This transformation can be done in polynomial time. To show that this transformation also preserves the approximation ratio, observe that if the cost of the set cover solution is k, so is the cost of the corresponding HSTPMR solution equal toF(k)=(n+1)(k+1). Let S be a feasible HSTPMR solution with the objective value equal toF(ks)whereksis the value of the corresponding set cover solution, and let k be the value of the optimal set cover solution. Then we have:F(ks)-OPTOPT=(n+1)(ks+1)-(n+1)(k+1)(n+1)(k+1)=ks-kk+1⩾βks-kkwhich is true for, e.g.,β=1/2. Therefore, any approximation algorithm for the HSTPMR that runs in polynomial time cannot have a better approximation ratio thanΘ(logn)sinceks-kk⩾Θ(logn)holds for the set cover problem unless P=NP (Lund & Yannakakis, 1994).For|R|⩾3, we attach all further roots to 0 and set the edge costs to one. The rest of the proof works similarly.□