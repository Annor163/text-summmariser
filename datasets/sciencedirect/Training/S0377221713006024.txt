@&#MAIN-TITLE@&#
Joint optimization of product family configuration and scaling design by Stackelberg game

@&#HIGHLIGHTS@&#
Currently module configuration and scaling design are treated as two separate decisions.A significant finding that these two problems are coupled in nature, leading to joint optimization.A novel application of Stackelberg game models to the product family design field.Synthesis of unique context of product families within a coherent equilibrium decision framework.Comparative study reveals that our bilevel model is advantageous over the existing practice.

@&#KEYPHRASES@&#
Product family design,Module configuration,Scaling design,Joint design optimization,Bilevel programming,Stackelberg game,

@&#ABSTRACT@&#
Product family design is generally characterized by two types of approaches: module-based and scale-based. While the former aims to enable product variety based on module configuration, the latter is to variegate product design by scaling up or down certain design parameters. The prevailing practice is to treat module configuration and scaling design as separate decisions or aggregate two design problems as a single-level, all-in-one optimization problem. In practice, optimization of scaling variables is always enacted within a specific modular platform; and meanwhile an optimal module configuration depends on how design parameters are to be scaled. The key challenge is how to deal with explicitly the coupling of these two design optimization problems.This paper formulates a Stackelberg game theoretic model for joint optimization of product family configuration and scaling design, in which a bilevel decision structure reveals coupled decision making between module configuration and parameter scaling. A bilevel mixed 0–1 non-linear programming model is developed and solved, comprising an upper-level optimization problem and a lower-level optimization problem. The upper level seeks for an optimal configuration of modules and module attributes by maximizing the shared surplus of an entire product family. The lower level entails parametric optimization of attribute values for optimal technical performance of each individual module. A case study of electric motors demonstrates that the bilevel joint optimization model excels in leveraging optimal scaling in conjunction with optimal module configuration, which is advantageous over the existing paradigm of product family scaling design that cannot change the product family configuration.

@&#INTRODUCTION@&#
Developing multiple product variants based on product families sharing common platforms has been well recognized as an effective means to cater for product variety while maintaining mass production efficiencies (Simpson, Siddique, & Jiao, 2005). It provides an important input for increasing the sustainability of value creation along the entire enterprise value chain (Tseng & Piller, 2003). A sizeable body of research on product family design has been reported over the last decade (Jiao, Simpson, & Siddique, 2007). Generally there are two types of approaches to product family design. One is called scalable product family design, whereby scaling variables are used to “stretch” or “shrink” the product platform in one or more dimensions to satisfy a variety of customer needs (Simpson, 2004). The other is referred to as module-based or configurational product family design, which aims to develop a modular product platform, from which product variants are derived by configuring various modules (Ulrich, 1995).Product family scaling design first needs to select platform variables, viz., to determine which design parameters that take common values (Simpson, 2004). While many existing methods assume that the platform architecture is known a priori (Fujita, Sakaguchi, & Akagi, 1999), some approaches attempt to determine platform variables along with scalable variables during optimization (Akundi, Simpson, & Reed, 2005). The subsequent task is to determine the optimal values of common and distinctive variables with the objective of satisfying performance and economic requirements. Most approaches consider only a single product platform, where each platform variable is shared across the entire product family. This strategy excels in computational simplicity; but may lead to a situation that some low-end products may be over-designed and certain high-end products may be under-designed (Dai & Scott, 2004). The other strategy is to consider multiple product platforms in product family scaling design, such that design variables can be shared by any subset of product variants within the product family (de Weck, Suh, & Chang, 2003) Multiple-platform design enhances exploration of the solution space, whereas sacrificing computational efficiency (Seepersad, Mistree, & Allen, 2002).In practice, optimization of scaling parameters is always enacted within one common product architecture (Fujimoto, 1999), in which a specific configuration of modules is pre-determined and all the modules and attribute structures are kept intact per se. In this sense, product family scaling design essentially addresses parametric optimization of a specific modular structure resulted from product family configuration design. On the other hand, product family configuration design copes with the selection and combination of existing modules and their associated attributes. However the attribute levels of each module are all pre-defined as options. As a result, a specific module configuration may not be optimal in terms of parametric design (Yu & Huang, 2010). Obviously, an optimal module configuration should depend on how module attributes/parameters are to be scaled; and vice versa (Lamothe, Hadj-Hamou, & Aldanondo, 2006). This suggests that module configuration and parameter scaling are coupled in nature during product family design. It is imperative to deal with joint optimization of these two design problems explicitly. In this regard, this paper proposes a Stackelberg game theoretic model for joint optimization of product family configuration and scaling design, in which a bilevel decision structure reveals coupled decision making between module configuration and parameter scaling.

@&#CONCLUSIONS@&#
