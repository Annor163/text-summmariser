@&#MAIN-TITLE@&#
Optimal driving during electric vehicle acceleration using evolutionary algorithms

@&#HIGHLIGHTS@&#
A multi-objective based system proposed for comfortable driving strategy.Energy consumption, acceleration duration, and jerk considered as objectives.Crowding distance based NSGA-II was found appropriate to solve the problem.Role of decision variables on system results analyzed using innovized principle.The system found to be feasible for online implementation in electric vehicle.

@&#KEYPHRASES@&#
Electric vehicle,Optimal driving,Acceleration energy,Acceleration duration,Driving comfort,Multi-objective optimization,

@&#ABSTRACT@&#
Due to the limited amount of stored battery energy it is necessary to optimally accelerate electric vehicles (EVs), especially in urban driving cycles. Moreover, a quick speed change is also important to minimize the trip time. Conversely, for comfortable driving, the jerk experienced during speed changing must be minimum. This study focuses on finding a comfortable driving strategy for EVs during speed changes by solving a multi-objective optimization problem (MOOP) with various conflicting objectives. Variants of two different competing evolutionary algorithms (EAs), NSGA-II (a non-dominated sorting multi-objective genetic algorithm) and SPEA 2 (strength Pareto evolutionary algorithm), are adopted to solve the problem. The design parameters include the acceleration value(s) with the associated duration(s) and the controller gains. The Pareto-optimal front is obtained by solving the corresponding MOOP. Suitable multi-criterion decision-making techniques are employed to select a preferred solution for practical implementation. After an extensive analysis of EA performance and keeping online implementation in mind, it was observed that NSGA-II with the crowding distance approach was the most suitable. A recently proposed innovization procedure was used to reveal salient properties associated with the obtained trade-off solutions. These solutions were analyzed to study the effectiveness of various parameters influencing comfortable driving.

@&#INTRODUCTION@&#
Electric vehicles (EVs) have received a lot of attention recently due to being classified as zero emissions vehicles in addition to having a higher energy efficiency than comparable internal combustion vehicles. It is well known that driving parameters, such as harshness of acceleration have an impact on the fuel economy [1–3] and that changes to the driving behavior can influence it [4]. However, there are only a few studies on quantifying acceleration effects on fuel economy and range, especially for EVs. Most of them focus on minimizing the energy consumption [5–8]. However, acceleration duration is also important because it affects the overall trip time. Ideally, the driver would like to accelerate the EV to a chosen speed with both minimum energy and minimum time. But, these two objectives are conflicting meaning an improvement in one leads to deterioration in the other. In a recent study by Vaz et al. [9] in solving this multi-objective problem it was found that multiple acceleration values can optimize the energy and time better than a single acceleration value. Similar observations of minimizing energy using multiple accelerations were also noticed in other research studies [6,7]. On the other hand, comfortable driving of a vehicle is essential. Otherwise, it may lead to critical health effects for the occupants.There are different ways to experience discomfort in vehicle driving: changing controls frequently [10], driver's position in the seat [11], jerk [12], etc. In the present work, only the issue of jerk (which is actualized during a change of acceleration) is considered in dealing with comfortable driving of the EV. Though the use of multiple accelerations reduces the overall energy consumption, it creates discomfort due to several jerks associated with multiple changes of acceleration. It has been suggested that the magnitude of the jerk affects the experience of acceleration [13] and creates oscillations. Oscillations have several complex impacts on the human body from causing slight discomfort to severe nausea [14], in addition to increasing the wear and tear on the EV. The concepts of comfort and discomfort are under debate and do not have a widely accepted definition [11]. It is generally agreed that the notion of comfort is subjective in nature and varies from driver to driver [15] and that low comfort is unacceptable from a user standpoint [10].There are only a few studies on designing an optimal driving strategy using jerk as a comfort metric [16–18]. In [9], the authors suggested two “a posteriori” approaches to select a preferred solution from the Pareto front obtained after solving the multi-objective problem. The approaches were based on the concepts of comfort and Pareto fronts’ knee [19]. In another study [10], the authors made an attempt by solving the multi-objective problem by minimizing total travel time, fuel consumption, and driving discomfort to present a Comfortable Driving Strategy (CDS). But this study has not been carried out for EVs. Moreover, those studies dealt with the entire driving cycle, which consists of different driving zones (acceleration, constant speed, etc.) that are related to different optimization objectives. Hence, such results have a high change to be a sub-optimal solution. Furthermore, in those works, authors used a crude metric to quantify discomfort [10],J=Δa. Here, J is the level of discomfort and Δa is the difference between two consecutive acceleration values. However, a more useful definition of comfort may be in terms of the jerk, i.e., the rate of change of acceleration, as proposed by Nilsson [12]. This definition accounts for the time duration during which the change in acceleration is in effect as opposed to only considering the magnitude of the differences in the acceleration values.An efficient and comfortable driving strategy depends on the optimal values of driving parameters (velocity and acceleration) and how these values are achieved during a trip while maximizing range and minimizing trip time. A comfortable driving experience for an EV depends on many factors such as driveline dynamics, vehicle chassis, tires, road surface, etc. [20]. However, these factors are not controllable, i.e., they are present regardless of the selected driving strategy. By ignoring these factors, the sole source of discomfort is due to the generation of jerk during the change of accelerations. Adopting multiple accelerations for a given speed change (Sc) in order to minimize the duration and energy means the EV driver experiences several jerk values. Naturally, it is also desirable to minimize the discomfort due to jerk in finding optimal acceleration(s) during speed changes. Thus, during speed changing, three objectives (namely minimization of acceleration duration, energy consumed during acceleration, and jerk) should be considered for an efficient and comfortable optimal driving strategy. In the present study, changing speed always indicates going from a lower speed to a higher speed.The rest of the paper is organized as follows: Section 2 describes problem definitions of concerned multi-objective optimization problem. Formulations of objective functions are presented in Section 3. A brief description of the working procedure of two MOO algorithms that are implemented for solving the present problem, various metrics to analyze the Pareto fronts, and decision-making for preferred solution selection are presented in Section 4. Multi-objective optimization for designing comfortable driving of EV is presented in Section 5. A comparative study of approaches based on problem type is made in Section 6. In Section 7, analysis of the role of decision variables in comfortable optimal driving is carried out. An investigation of the proposed system for online implementation is presented in Section 8.Optimization is one of the most common and pervasive issues in real-world systems including engineering. It is a technique to arrive at one or more solutions, which correspond to either minimum or maximum values of one or more objectives (in the form of objective/subjective functions or performance indices) satisfying certain conditions. Optimization, specifically multi-objective optimization (MOO) is at the heart of any decision-making task in which a choice must be made between several alternatives corresponding to multiple, sometimes conflicting objectives. Real world problems commonly involve more than one objective. The extreme value principle is not applicable in situations where all the objectives are equally significant. In this case, a number of solutions may be produced to create a compromise among different objectives. A solution that is extreme with respect to one objective requires a compromise with other objective(s). This restricts the choice of a solution which is optimal with respect to only one objective. Therefore, a number of sets of solutions are obtained and then the designer has to select a set from these sets of solutions, which will serve the purpose originally intended. The latter search is also known as multiple criterion decision making (MCDM). Thus, the primary objective of solving truly multi-objective optimization problems is to find the so-called Pareto-optimal front. The Pareto front is formed by the solutions in which any change in any of the decision variables aimed at improving a particular performance index will produce deterioration in some of the other performance indices. The present problem of finding optimal acceleration(s) with corresponding acceleration duration(s) and controller gains during speed changes deals with multi-objective optimization in order to maintain comfortable driving of an EV and it can be solved by a suitable multi-objective optimization tool.From the previous section, it is realized that the manner of changing the EV speed affects driving comfort, energy consumption, and travel time. Once an optimal trip speed is chosen, the driver would like to accelerate the EV to this speed in the shortest duration with sufficient comfort while expending the least amount of energy possible. A separate method may be used to find an optimal trip speed, vref[21]. Medical studies suggest that the human body can tolerate no more than a certain level of jerk [22,23]. Additionally, the perception of discomfort varies from person to person subjectively. Therefore, depending on the desired comfort level, it is expected that different optimal solutions can be achieved toward minimization of both acceleration duration and battery energy consumption. Moreover, it is interesting to see how the optimization results vary with different speed changes for comfortable driving of an EV. Furthermore, for online implementation of such a system to maintain a comfortable driving strategy during EV running, the system computational time (response time) should be low. Based on these requirements, in the present work, a comfortable driving strategy (i.e., optimal acceleration(s) and duration(s)) in speed changing may be designed using three approaches by solving three different multi-objective optimization problems (MOOPs) categorized depending on problem complexity.The formulation of multi-objective problems corresponding to these approaches is presented as follows. In MOOP I, two objectives, minimization of acceleration duration and minimization of energy consumption are considered. Here, comfort is considered as a constraint by restricting the maximum allowable jerk experienced by passengers to a particular value. In the MOOP II, in addition to the objectives in MOOP I, minimization of total jerk experienced by passengers during the entire acceleration period is considered as another objective. To carry out a deeper investigation, all three objectives are treated with equal importance in designing comfortable driving. On the other hand, MOOP III includes all the three objectives as well as the constraint of maximum allowable jerk.Here, the maximum jerk value created during acceleration is considered to be limited by tolerable jerk for the human body. Definition of MOOP I is stated as follows:(1)Minimize acceleration duration,Dacc=fDa1,2,3,…,K,d1,2,3,…,K−1,kp,ki(2)Minimize energy consumption,Eacc=fBa1,2,3,…,K,d1,2,3,…,K−1,kp,kisubject to(3)0.1≤a1,…,K≤3.0(4)dkmin≤dk≤dkmax(5)0.01≤kp≤0.3(6)0.01≤ki≤3.0(7)JMax≤JMax allowablewhere a1, 2,…,Kare the accelerations used in a speed change, K is the number of accelerations, d1, 2,…,K-1 are the time durations of first K-1 respective accelerations,dkminanddkmaxare the minimum and maximum values of dk, and kpand kiare the acceleration controller proportional and integral gains, respectively. The maximum jerk experienced by the driver/passenger (JMax=max(J)) should be less than or equal to JMax allowable (maximum allowable jerk), where J is the jerk value for a time step, dt, during an acceleration period. Keeping in mind practical driving situations and for the sake of reducing the computational complexity of the optimization process, in this work, the number of accelerations (to reach the chosen speed) was limited to six (K=6) and the task of the EAs is to find the optimal acceleration number out of six for a speed change. Furthermore, the sum of all acceleration durations is equivalent to the total acceleration duration (Dacc), which impliesd6=Dacc−∑k=15dk, if four accelerations are chosen.Since multiple accelerations (a1, a2,…,a6) are used to achieve a speed change, it is important to carefully constrain the selection of acceleration duration decision variables (d1, d2,…,d5) in order to have a realistic and appropriate search space for each acceleration duration variable. A large, unconstrained search space results in a longer time for the EA to converge. On the other hand, an arbitrarily small search space does not guarantee a global minimum to be reached by the EA. Therefore, appropriate values for the maximum and minimum limits of each acceleration duration variable (d1, d2,…,d5) were set as follows. To achieve a particular speed when multiple accelerations are used, there is a possibility that the first few accelerations may have a positive time duration whereas the rest may have a zero time duration. Based on this consideration, the lower limit of each time duration decision variable,dkmin, was kept as zero. On the other hand, if one can use a single acceleration, a, to achieve a speed change (Sc), it will take a theoretical value ofΔv/aseconds, whereΔvis the value of speed change. It is clear that the time duration (decision) variable cannot be significantly more than this value (allowing some time for the controller build up to a). Thus, the maximum value of kth acceleration duration (decision) variable (dk) corresponding to kth acceleration (ak),dkmaxis set toΔv/ak, where k=1,…,5.Based on the type of EV model used in the present study and considering the human tolerance of acceleration [24], the minimum and maximum values of aiare taken to be 0.1 and 3.0m/s2, respectively. The lower and upper limits of kpand kfare (0.01, 0.3) and (0.01, 3.0), respectively.Here the minimization of total jerk during the entire acceleration period was considered as an additional objective. Definition of MOOP II is stated as follows:(1)Minimize acceleration duration,Dacc=fDa1,2,3,…,K,d1,2,3,…,K−1,kp,ki(2)Minimize energy consumption,Eacc=fBa1,2,3,…,K,d1,2,3,…,K−1,kp,ki(8)Minimize total jerk,JTotal=fJtotala1,2,3,…,K,d1,2,3,…,K−1,kp,kisubject to(3)0.1≤a1,…,K≤3.0(4)dkmin≤dk≤dkmax(5)0.01≤kp≤0.3(6)0.01≤ki≤3.0Here the objective of minimization of total jerk (defined by Eq. (8)) was considered and the constraint of maximum jerk (defined by Eq. (7)) was applied. Definition of MOOP III is stated as follows:(1)Minimize acceleration duration,Dacc=fDa1,2,3,…,K,d1,2,3,…,K−1,kp,ki(2)Minimize energy consumption,Eacc=fBa1,2,3,…,K,d1,2,3,…,K−1,kp,ki(8)Minimize total jerk,JTotal=fJtotala1,2,3,…,K,d1,2,3,…,K−1,kp,kisubject to(3)0.1≤a1,…,K≤3.0(4)dkmin≤dk≤dkmax(5)0.01≤kp≤0.3(6)0.01≤ki≤3.0(7)J≤JMaxallowableThe primary motivation of solving the above multi-objective problems is to find a set of optimal non-dominated solutions. Traditional methods for generating the Pareto-optimal set aggregate the objectives into a single parameterized objective function by analogy to decision-making before search. However, the parameters of this function are not set by the decision maker (DM), but systematically varied by the optimizer. Several optimization runs with different parameter settings are performed in order to achieve a set of solutions which approximate the Pareto-optimal set. Basically, this procedure is independent of the underlying optimization algorithm. Moreover, classical multi-objective optimization approaches face a number of difficulties: not all Pareto-optimal solutions can be found by some algorithms in non-convex MOOPs, some required problem knowledge may not be available, high computational overhead, etc. Evolutionary methods have been actively applied to solve multi-objective optimization problems due to the inherent difficulties in calculating the analytical Pareto-optimal surfaces for many real-world systems. Previous attempts to solve multi-objective problems in the domain of vehicle design and transportation have shown that evolutionary algorithms can be successfully used in such cases [25–27]. Moreover, evolutionary algorithms are found to be effectively applied for optimization in the diverse field of real world problems [28–32]. Hence, in the present study, variants of two competing and well-established evolutionary algorithm (EAs) have been adopted: NSGA-II, a non-dominated sorting multi-objective genetic algorithm [33] and SPEA 2, a strength Pareto evolutionary algorithm [34]. One of the primary aims of this work is to investigate the performance of the two EAs in designing an optimal EV acceleration strategy in keeping the viability of its practical implementation. Another aim is to perform a comparative study on the appropriateness of selecting the above three MOOPs in designing an optimal EV acceleration strategy for a given Sc.The EV model used for calculating the objective functions is described in this section. The components modeled include the battery, the electric motor, and the vehicle dynamics. The electric motor was controlled using a proportional-integral (PI) controller. The model was programmed in C++ with the reference acceleration, aref, and the chosen speed, vref, as the inputs. The EV simulation was terminated when the vehicle real speed, v, reached within 1% of vref. This corresponded to n loop runs with a time interval, dt for each loop, i. The models used for the EV simulations, including most of the relevant parameters, are generic and well described in the literature [35–37].The relevant electric motor parameters are shown in Table 1. The model's inputs are the battery voltage, VP, the reference acceleration, aref (m/s2), the vehicle real acceleration, a (in m/s2), and the rotational speed, ω (in rad/s), and the model's outputs are the battery current, IP(in A), and the electric motor torque, τ (in Nm). The acceleration error is(9)e(i)=aref−a(i)A PI controller was used for acceleration control. The switching function of the electric motor is(10)SF(i)=kpe(i)+ki∫e(i),−1<SF<1where SF is the switching function. The terminal voltage, VT(in, V) applied to the electric motor is(11)VT(i)=VP(i)SF(i)where VPis the battery pack voltage (in V).The armature current is(12)Ia(i)=1La∫VT(i)−KIfω(i)−Ia(i)RaThe battery current is(13)IP(i)=Ia(i)SF(i)The torque generated is(14)τ(i)=KIa(i)IfThe Lithium-ion battery model used was proposed by Chen and Rincon-Mora [38]. The relevant battery parameters are shown in Table 2. The model's input is the battery current, IP, and the model's outputs are the battery voltage, VP, and the state of charge, SOC. The current flowing through an individual cell is(15)Icell(i)=IP(i)NPThe SOC of the battery pack is(16)SOC(i)=SOCinit−∫Icell(i)CapThe battery voltage is(17)VP(i)=NSVcell(i)Applying Kirchhoff's Current Law, the voltage of CTransient_L is(18)VC_L(i)=∫Icell(i)CTransient_L−VC_L(i)CTransient_LRTransient_LApplying Kirchhoff's Current Law, the voltage of CTransient_S is(19)VC_S(i)=∫Icell(i)CTransient_S−VC_S(i)CTransient_SRTransient_SThe open-circuit voltage is(20)VOC(i)=−1.031e(−35SOC(i))+3.685+0.215SOC(i)−0.117SOC(i)2+0.320SOC(i)3The voltage of an individual cell is(21)Vcell(i)=VOC(i)−VC_S(i)−VC_L(i)−Icell(i)RSeriecThe relevant vehicle parameters are shown in Table 3. The model's inputs are the electric motor torque, τ, and the model's outputs are the vehicle acceleration, a, the vehicle real speed, v (in, m/s), and the rotational speed, ω. The aerodynamic drag force, FD(in N) acting on the EV is(22)FD(i)=12ρairAfCDv(i)2The force due to friction between the road and wheel, Fr(in, N) is(23)Fr(i)=μmgThe traction force, Ft(in, N) provided by the electric motor is(24)Ft(i)=τ(i)GRAssuming the road has no gradient, neglecting the force due to the inertia of rotating wheels, and having all the braking force come from the electric motor, the acceleration is(25)a(i)=τ(i)G/R−1/2ρairAfCDv(i)2−μmgmThe EV speed is given by the following equation:(26)v(i)=vinit+∫a(i)where, vinit is the vehicle speed before speed change.The rotational speed is given by(27)ω(i)=v(i)GRThe objective functions for MOO of the present problem are defined as follows.(28)fD=n⋅dt(29)fB=∑i=1nIP(i)VP(i)(30)J=ak=1i−akidt(31)fJTotal=∑i=1nak=1i−akidtMulti-objective evolutionary algorithms (MOEAs) are a class of tools based on evolutionary algorithms (EAs) [39] to solve multi-objective optimization problems having conflicting objectives. In the following, two most popular and competing MOEAs are described.The flow diagram presented in Fig. 1illustrates the working principle of NSGA-II. For a given set of GA parameters, such as population size (set as 6 in Fig. 1), a maximum number of generations (set as the termination criterion of the GA iterations), a reproduction scheme (say crowded tournament selection with a chosen tournament size), a mutation scheme (with a mutation probability), and a crossover scheme (with a crossover probability), a maximum of six non-dominated solutions can be obtained after a complete generation. In the crowded tournament selection procedure, the solution having a lower rank value than other solutions is allowed to win a tournament. If more than one solution in a tournament had the same rank, then the solution that had a larger crowding distance value was permitted to win. After each generation, both the parent (Pt) and offspring (Qt) populations were mixed up to form a combined population, Rt. Then, a non-dominated sorting was carried out on the combined population in order to classify the solutions based on their rank. The solutions in a class having the same rank create a front. Fig. 1 shows that there are three fronts (F1, F2, and F3) obtained after the non-dominated sorting of Rtcorresponding to rank values. Since the population size of the GA was fixed throughout the generations, solution(s) of different non-dominated fronts, one at a time, filled the new population (Pt+1). The filling started with the best non-dominated front having a lower rank value and so on. Since the overall population size of Rtis double the size of population (12 in Fig. 1), not all fronts may be accommodated in N slots available in the new population, Pt+1. All fronts that could not be accommodated were simply deleted. When the last allowed front was considered, there was the possibility of having more solutions in the last front than the remaining slots in the new population. In Fig. 1, such a situation happens with F2. Instead of arbitrarily discarding some members from the last front, it is better to use a niche-preserving strategy to choose the members of the last front. Based on this new population, Pt+1 (now considered as the parent population, Pt) another offspring population Qtwas created using genetic operators like crowded tournament selection, crossover, and mutation in the next generation. This cycle was continued until a specified number of generations were reached or other specified termination criteria were fulfilled.Two popular niche-preserving strategies for determining the solution(s) to be retained in the last front are crowding distance sorting and clustering approach. In the crowding distance sorting approach [40], the crowding distance (cdi) for each individual is measured by calculating the cuboid length which is the sum of distances between an individual's two closest neighbors in each objective. The individuals with higher crowding distance are preferred; this is followed in the original NSGA-II. A random selection is taken among the solutions having same crowding distance value. The variant of NSGA-II using crowding distance approach as a niche-preserving operator will henceforth be referred to as EA-V1.In the clustering technique [41], first each of the solutions in the non-dominated front is assumed to belong to a separate cluster. Then, the distance between all pairs of clusters is calculated by first finding the centroid of each cluster and then calculating the (Euclidean) distance between the centroids. Two clusters having a minimum distance between them are merged together into a bigger cluster, thereby reducing one cluster from the previous number of clusters. Again the distance between all pairs of present clusters is calculated in the same way as done before. This procedure is continued until the desired number of clusters (equivalent to the desired number of solutions) is identified. Finally, the solutions closest to the centroid of the cluster are retained and all other solutions from each cluster are deleted. The variant of NSGA-II using clustering approach as a niche preserving operator will henceforth be referred to as EA-V2.The crowding distance operator is computationally faster but cannot maintain a good diversity for problems having three or more objective. On the other hand, the clustering approach uses Euclidean distances among solutions in the objective space and is usually computationally expensive. As mentioned earlier, in addition to low computational time, a set of good solutions is also extremely desirable for this problem. For this reason, an investigation into the performance of different EA variants is essential.SPEA 2 is an upgraded version of SPEA (strength Pareto evolutionary algorithm) proposed by Zitzler and Thiele [42]. The working procedure of SPEA 2 (presented in Fig. 2for an archive size of six) is similar to SPEA and it also starts with an initial set of random solutions called the parent population, Pt, and a fixed-sized empty archive, At. Unlike SPEA, the fitness, Fv, of an individual, j, is determined by the summation of the strengths (Sv) of its dominators (i) in both the archive and the population (also called raw fitness) plus a density function (fd) value as follows:(32)Fvj=∑i=1R′Svi+fd(j)where R′ is the number of solutions in both the archive and the parent population that dominate j. The strength of ith individual (Svi) in the archive and population represents the number of solutions that dominate it. Thus, a raw fitness value equaling zero indicates a non-dominated individual while a high value of fitness means that the individual is dominated by many individuals. In order to discriminate between individuals having identical raw fitness values, additional density information is incorporated in calculating the fitness value. The density value of an individual, fd(j), is equal to the inverse of the distance of its kth nearest neighbor [43] plus two. The new archive, At+1, is created by copying the non-dominated individuals (having a fitness value lower than one) from both the old archive and population. If the archive size is higher than the number of non-dominated individuals, the best dominated individuals (according to their fitness values) in the previous archive and population are copied to fill the new archive.When the size of the current non-dominated set exceeds the archive size, like NSGA-II, a niche-preserving operator is adopted to fill the solution archive size, Qt. The cycle is stopped if a specified number of generations is reached. Otherwise, another offspring population is created by performing the tournament selection on the new archive, followed by crossover and mutation.Two different niche mechanisms are adopted here. The niche mechanism used in the original SPEA 2 (EA-V3) invokes an archive truncation procedure, which iteratively removes individuals based on the kth nearest neighbor density information. That means, at each stage, the individual which has the minimum distance to another individual is chosen. If there are several individuals with a minimum distance, the individual with the second smallest distances is considered and so forth. In the other variant of SPEA 2 (EA-V4), the clustering approach as used in NSGA-II is adopted as a niche-preserving operator.In order to evaluate the performance of different variants of NSGA-II and SPEA 2 to solve the problems defined in Section 2, the results have been compared with the help of certain performance metrics. There are two main criteria to be taken into account to assess the performance of a multi-objective optimization algorithm, namely the distance of the obtained solutions to the Pareto front and the distribution of obtained solutions on the Pareto front. Due to the limitation of the knowledge of true Pareto-optimal solutions of the present problem, the following metrics are considered in order to make a comparison of the results obtained by the variants of NSGA-II and SPEA 2 based on different niche strategies.(1)Number of Pareto-optimal solutions obtained, N.Size of the dominated space, Sd.Coverage of two Pareto fronts A and B, C(A, B).Non-uniformity of the Pareto front, D.The size of the dominated space Sd(A) indicates a measure of how much of the objective space is weakly dominated by the Pareto front, A. For a three objective optimization problem (min–min–min), Sd(A) is calculated by Eq. (33).(33)Sd(A)=∑i=1N−1f1i+1−f1if2i+1−f2if3i+1−f3iwheref1i,f2i, andf3iare the function values of three objectives for the ith solution of Pareto front A. The higher value of Sd(A) the better the performance. The measurement, coverage of two Pareto fronts, A and B, (C(A, B)) provides the fraction of B weakly dominated by A and is calculated as follows:(34)C(A,B)=b∈B|∃a∈A:a≻bBwhereBis the cardinality of the Pareto-optimal set B and a≻b means that solution a dominates the solution b. If, C(A, B)>C(B, A), this means that the Pareto front, A has better solutions than the Pareto front, B. The measurements, size of the dominated space and coverage of two Pareto fronts, suggest the degree of convergence of a Pareto front. The measurement of non-uniformity of a Pareto front, A, is calculated as follows:(35)D(A)=∑di/d−12A−1where diis the distance between two consecutive solutions along the Pareto front, A, andd¯is the average distance. A lower value of D(A) indicates a better distribution of obtained solutions on the Pareto front, A.Although there are advantages to knowing the range of each objective for Pareto-optimality and the shape of the Pareto-optimal frontier itself in a problem for adequate decision-making, the task of choosing a single preferred Pareto-optimal solution is an important task because the driver finally adopts the chosen preferred solution for implementation in a driving strategy. Various MCDM techniques are available and, following a classification by Veldhuizen and Lamont [44], the articulation of preferences may be done either before the search (a priori) or after the search (a posteriori) or even during the search (progressive) of the optimization process. In the present problem, two such MCDM techniques were adopted after the optimization process: reference point-based technique [45] to identify a single preferred solution and the selection of a set of (few) preferred solutions by identifying the knee-zone [19] on the Pareto front based on trade-offs and then DM chooses a solution from the knee-zone based on higher-level information. Other typical methods of selecting a preferred solution from the set of Pareto-optimal solutions are the compromise programming approach [46], the marginal rate of substitution approach [45], the pseudo-weight vector approach [40], etc.The DM can decide a reference point based on various aspects concerning the problem domain. A well accepted reference point suitable to all kinds of multi-objective problems is the ideal point. An ideal point is referred to the vector of optimal objective values when each objective is individually considered. In the present application, the ideal point is considered as a reference point and a single preferred solution is determined by finding the solution on the Pareto front having minimum (Euclidian) distance from the reference point. On the other hand, after a thorough study of the shape of the Pareto-optimal front, it is sometimes observed that there may be solutions where a small improvement in one objective would lead to a large deterioration in any of the other objectives. The area of the Pareto front comprising such solutions is termed as a knee region/zone. Without any knowledge about the user's preferences, it may be argued that such region is most likely to be interesting for the decision maker.Based on the problem definition, the path to achieving a comfortable driving strategy through multi-objective optimization is to find the optimal number of accelerations, acceleration value(s) along with their duration(s), and optimal controller gains (kpand ki) in order to minimize the entire acceleration duration and minimize total energy consumption with a low jerk during a speed change. According to Berry [47], driving cycles can be categorized into three types, neighborhood (vehicle speed <40kph), urban (vehicle speed in between 40 and 72.4kph), and highway (vehicle speed less >72.4kph). In view of that, to investigate EAs’ performance to solve the present problem, three speed changes have been considered (from zero to a desired value) corresponding to the three categories. Considering the speed capabilities of current EVs, the desired value to accelerate for the study are taken as 40, 72, and 104km/h. These are demonstrative speed changes. The proposed approach of designing a comfortable driving strategy is applicable for any kind of Sc. For a highly comfortable ride, the maximum allowable jerk experienced by the passengers, JMaxallowable is suggested as 18m/s3[20]. In both SPEA 2 and NSGA-II, a binary-coded EA has been used and the EA parameters (presented in Table 4) were used throughout the study, unless otherwise mentioned. The value of the EV simulation time step, dt in Eqs. (28)–(31) is taken as 0.01s.Fig. 3describes the Pareto-optimal fronts of acceleration duration and battery energy consumption for optimal driving strategies obtained by variants of NSGA-II and SPEA 2 when the maximum jerk is considered as a constraint in the multi-objective optimization process (MOOP I). Such a Pareto-optimal front may be obtained using an analytical approach as well as classical optimization techniques such as e-constraint method, weighted sum method, etc. However, those techniques possess many demerits. First of all, there is no guarantee of convergence to optimal solutions, and the optimum highly depends on the chosen initial solution. However, in EAs, a global optimal solution can be expected. Moreover, multiple runs of these techniques are required to obtain a set of solutions. Each Pareto front shown in Fig. 3 is obtained by running EAs with a random seed of 0.4 and the corresponding performance metrics are listed in Table 5. The number of optimal solutions found by EA-V1, EA-V2, EA-V3, and EA-V4 for the 0 to 40km/h speed change are 500, 500, 443, and 444, respectively. However, the numbers of unique solutions present in the fronts are 498, 451, 160, and 160, respectively. Thus, after running the EAs, the obtained Pareto fronts may consist of many repeated solutions. A similar presence of repeated solutions in the Pareto front is observed for other speed changes. Therefore, in Table 5, the number of Pareto-optimal solutions obtained represents unique non-dominated solutions obtained by the EAs (denoted as N in Section 4.2) and the values of different Pareto front metrics (Sd, C, and D) are calculated based on these unique solutions of the respective fronts. The metrics, Sdand D, were measured by normalizing the objectives. The minimum and maximum values of Dacc were taken to be 0 and 70s and that of Eacc were taken to be 0 and 1700kJ, respectively, for all speed changes.After analyzing the values of D (presented in Table 5) for all values of speed change, Sc, it was noticed that SPEA 2 solution's diversity over entire Pareto front improves with increasing Scvalue. In contrast, as Scincreases, the size of dominated space by SPEA 2 decreases, suggesting that it loses convergence power. However, the search power of SPEA 2 slightly improves when Scincreases since the number of unique solutions present in Pareto front increases. On the other hand, both the NSGA-II variants maintain the solution's diversity and convergence as well as exhibit a similar searching power for all speed changes since a relatively small difference is observed among the values of respective performance metrics (namely, D, Sd, and N) corresponding to EA-V1 and EA-V2.In Table 5, it was noticed that both Pareto fronts obtained by SPEA 2 variants (EA-V3 and EA-V4) consist of the same number of solutions for any Sc. Moreover, the values of Sdand D of both fronts are the same except, for a small difference in case of the lowest Sc(40km/h). Furthermore, the coverage values between the Pareto fronts obtained by SPEA 2 variants are the same and close to 1.0. Thus, it may be concluded that for low Sc, both the variants of SPEA 2 create identical Pareto front. Moreover, for higher Sc, differences between the Pareto fronts metrics obtained by EV-V3 and EA-V4 are also not significant.In Fig. 3, the performance of EAs is evaluated by comparing the Pareto fronts of EV-A1 with that of EV-A3 and the Pareto fronts of EV-A2 with that of EV-A4 for all three ranges of speed changes. In Table 5, it was noticed that EA-V3 exhibits a higher value of Sdcompare to EA-V1, which suggests that EA-V3 has better performance. However, it was also noticed that almost all solutions of EA-V3 are dominated by EA-V1 solutions and it is observed in all ranges of Sc(values of C are 1.0, 0.983146, and, 0.921569 for speed changes 40, 72, and 104km/h, respectively). On the other hand, none of the EA-V1 solutions were dominated by EA-V3 solutions except for high Sc, 104km/h. Similar results were observed by comparing the Pareto fronts of EA-V4 and EA-V2.Based on the values of Pareto front evolution metrics, it is clear that NSGA-II variants outperforms SPEA 2 variants in terms of solution convergence as well as diversity across the Pareto front for any Sc. Based on the number of unique solutions present in the obtained Pareto front, it is realized that NSGA-II has a more thorough search power than SPEA 2. For higher Sc, performances of SPEA 2 variants improve, but still lag far behind from NSGA-II performance.The JMax allowable values do not affect the shape of the Pareto front. The only difference is that by reducing the JMax allowable value (meaning higher comfort), the number of Pareto-optimal solutions obtained by an EA decreases for the same population size and number of generations. Moreover, the spread of the Pareto front is also decreased.Since the results of an evolutionary algorithm are stochastic in nature being dependent on the initial chosen solutions as well as the random seed value. Thus, there is a need to compare the results of different EAs statistically for greater confidence in the results. Here, an extensive statistical study was conducted independently to make the results obtained by the EAs statistically reliable. The results of the statistical study on EA performance are presented for only one speed change (0 to 72km/h). Moreover, from Fig. 3 and Table 5, it was found that EA-V3 and EA-V4 show similar results. Therefore, only one of these EAs (namely, EA-V3) is considered in the statistical test as well as rest of the work. Ten independent runs of each of the three EA variants were performed with different values of random seed (chosen in the range of 0.1 to 1.0). The mean and standard deviation of N, Sd, D, and C of Pareto fronts obtained using each EA in ten different trials are listed in Table 6. A very low value of standard deviation of Sd, D, and C indicates that the performance of EAs is statistically more stable. However, a comparatively high value of standard deviation for the number of unique solutions, N, obtained by the Pareto front of the respective EAs is observed. This is because, first of all, a high Psvalue (500) is used in the optimization run. Moreover, it is noticed that the resulting Pareto fronts consist of many repeated solutions and the present statistical test is performed based on unique Pareto optimal solutions. After carrying out the same statistical test for the other speed changes (0 to 40km/h and 0 to 104km/h), similar results were observed.Comparing the performances among NSGA-II variants based on the data presented in Tables 5 and 6, it is observed that EA-V1 (NSGA-II based on crowding distance approach) produces a higher number of solutions (N) compare to EA-V2 (NSGA-II based on clustering approach) in the resulting Pareto front for all three speed changes. Moreover, in all three speed changes, it is also observed that a substantially lower value of non-uniformity of the Pareto fronts is found in EA-V1 compared to EA-V2. On the other hand, though the value of size of the dominated space in EA-V1 is found to be more than that of EA-V2, their difference is not high enough to make a conclusion that it can be happen for any Sc. Furthermore, after comparing the coverage of Pareto fronts based on EA-V1 and EA-V2, it is noticed that a higher number of solutions of EA-V2 are dominated by EA-V1 solutions, but not significantly always. Thus, there is a need to carry out an extensive study on whether EA-V1 performs better or not for any value of Sc, irrespective of the magnitudes of the initial and final speeds of the EV. In order to accomplish this, a non-parametric statistical test, namely the Wilcoxon signed-rank test (a test for testing hypothesis on median) [48] is performed on the performance metrics in order to decide whether the performance of NSGA-II variants (EA-V1 and EA-V2) is equivalent or not. The Wilcoxon signed-rank test was used to test the null hypothesis (H0) that both EA-V1 and EA-V2 are equivalent corresponding to a performance metric. The test uses the sign and the magnitude of the rank of the difference between pairs of performance metric measurements.In the Wilcoxon signed-rank test, Pareto front metrics are calculated based on the same minimum and maximum objective values as considered previously. This test is conducted independently in three speed zones, neighborhood, urban, and highway. Table 7presents results of Wilcoxon signed-rank test carried out for EA-V1 and EA-V2 for twenty independent runs with different speed changes from zero to a certain value taken within the respective speed zones. From Table 7, it is observed that for low Sc(neighborhood), performances of both the algorithms, EV-A1 and EV-A2 are the same in terms of Sdand C. In the urban zone, EV-A1 shows better than EV-A2 for a higher confidence level (above 0.05). In case of higher Sc(highway), EV-A1 is found better even for a lower confidence level (0.01).The values of Pareto front performance matrices of EA-V1, EA-V2, and EA-V3 based on the optimization results obtained after solving MOOP II are presented in Table 8. The metrics, Sdand D, in Table 8 are measured by normalizing the objectives taking minimum and maximum values of Dacc (0 and 500s, respectively), Eacc (0 and 5000kJ, respectively), and JTotal (20 and 750m/s3, respectively) for all speed changes.In MOOP II, unlike MOOP I, EA-V3 performs better in terms of size of the dominated space and uniformity of Pareto-solutions, since a higher value of Sdand lower value of D obtained by EA-V3 were observed compare to EA-V2. Almost the same value of coverage among the Pareto fronts obtained by these algorithms is also observed. However, the Pareto front of EA-V2 consists of more unique solutions. If the individual performance of EA-V2 and EA-V3 are compared with that of EA-V1, neither one of the algorithms performs similar to EA-V1. The EA-V1 based Pareto front (as shown in Fig. 4) has a significantly higher value of Sd, considerably lower value of D, higher number of unique Pareto-optimal solutions (which is comparable to EA-V2), and a notably better coverage of Pareto fronts in comparison to EA-V2 and EA-V3 fronts.Thus, in both the MOO problems (MOOP I and MOOP II as defined in Section 2), it is observed that EA-V1 performs better than the other variant of NSGA-II and the variants of SPEA 2. It may be noted that for lower speed changes, the performance of EA-V2 is observed to be more or less similar to EA-V1. Furthermore, in solving the present MOO problem of designing comfortable optimal driving during EV acceleration, it is observed that the EA based on the clustering approach that uses Euclidean distances among solutions in the objective space is usually computationally expensive. On the other hand, the EA based on the crowding distance operator is found to be computationally faster as well as maintaining a good diversity for both two and three objective problems (MOOP I and MOOP II, respectively) even better than the clustering operator-based EAs. Normally, for solving a MOOP, though the crowding distance operator is computationally faster, it cannot maintain a good diversity for three or more objective problems [40]. Based on these observations, for solving the MOOP for designing a comfortable optimal driving strategy considering MOOP III and comparative studies of the effectiveness of MOOP types, only EA-V1 algorithm is considered.Fig. 5represents the Pareto fronts obtained after minimization of Dacc, Eacc, and JTotal in MOOP III using EA-V1. In both MOOPs II and III, all the three objectives were considered, but MOOP III has the JMax_Allowable constraint as well After comparing the Pareto fronts presented in Figs. 4 and 5, it was observed that for a given Sc, the ranges of Dacc and Eacc found in solving MOOP III are lower than that obtained after solving MOOP II. This is because the constraint defined in Eq. (7) is incorporated in MOOP III. On the other hand, no significant differences in JTotal were observed among the Pareto fronts of both problems.In order to evaluate the efficacious of different MOOPs, the Pareto front performance metrics were calculated based on the three objective functions (acceleration duration, energy consumption, and total jerk during the acceleration period). Moreover, the Pareto solutions satisfy the constraint defined in Eq. (7). The maximum jerk value in Eq. (7) is taken as 18m/s3. For online implementation of the proposed system comfortable optimal driving, the system's computational time should be sufficiently low, within a few seconds. Thus, in addition to Pareto front performance metrics, the computational time required for solving the MOOPs is also considered in the comparative study for finding the suitability of a MOOP type to design a comfortable optimal driving strategy for the EV. Computational times were measured by running all simulations on a machine with these specifications: Intel(R) Core™ i7-3740QM; 4 CPUs @ 2.70GHz; 4.0GB RAM.Table 9demonstrates the comparative results obtained by solving the MOOPs defined in Section 2 using EA-V1. For a low Sc, the value of Sdin MOOP II is found to be significantly more than that of both problems, MOOP I and MOOP III. With increasing Scthough the difference of Sdamong the MOOPs reduces, MOOP II still shows its superiority compared to the others. In comparing the coverage between two Pareto fronts, it was observed that both the problems, MOOP II and III, exhibit better results than MOOP I because they possess a higher value of C than that of MOOP I. Now, after comparing the coverage between MOOP II and III, MOOP II encompasses a comparatively higher value, particularly at low and high speed changes. On the other hand, among the three problems, MOOP II exhibits a high value of D, indicating a poor diversity of solutions on the Pareto front in any Sc. According to the problem definition (presented in Section 2), MOOP III is more complex compared to other MOOPs since it comprises the objective defined in Eq. (8) and the constraint defined in Eq. (7). So, in general it is expected that MOOP III takes comparatively more computational time. From Table 9, it is found that MOOP III takes a more computational time than MOOP I but less than MOOP II. The reason behind taking less computational time by MOOP III is that the constraint defined in Eq. (7) allows the algorithm to handle a lower number of feasible solutions by eliminating the solutions having a high jerk value from the population set. Moreover, in the present problem no extra computational time is required for the constraint evaluation (defined in Eq. (7)) as it is performed in the EV simulation itself while optimization is carried out.Fig. 6demonstrates how the system computational time for solving the MOOPs varies with different Scconsidering zero initial EV speed (vinit=0). A second order polynomial relationship is found between the computational time and the Scvalue in case of MOOPs II and III, whereas computational time in MOOP I linearly varies with Sc, particularly when the EV initial speed is zero. The numerical relationships between system computational time and Scfor different MOOPs (yMOOP III, yMOOP II, and yMOOP I) are presented in Fig. 6.In order to know how the computational time of EA-V1 varies for a speed change with any EV initial speed, a plot of the computational time versus different initial speeds for a speed change, say 40km/h is presented in Fig. 7. It is interesting to notice that the computational time in all MOOPs decreases with increasing initial EV speed for the same Scup to a certain initial EV speed, called the critical speed and after that it settles to an almost constant value, called the critical computational time. The critical speed is found to be 15km/h for a speed change of 40km/h. Fig. 8shows the variation of critical speeds after which the algorithm (EA-V1) takes almost same computational time with different values of Scduring acceleration. Since the maximum speed capability of the present EV model is 120km/h, the Scvalue is limited to 65km/h for finding critical speeds. From Fig. 8, it is noticed that critical speed increases with increasing the Scvalue. Another interesting finding is that after the critical speed, the critical computational time of EA-V1 is the same for a MOOP (averaged over six initial speeds for the same Scof 40km/h in Fig. 7: 33.6s, 38.2s, and 36.3s in MOOP I, MOOP II, and MOOP III, respectively) irrespective of the Scvalue. This computational time of EA-V1 was calculated when Ps=500 and Ng=200, as mentioned in Table 4. A rigorous investigation reveals that variations of Psand Ngdiffer the critical computational time but not the critical speed for a speed change.Table 10illustrates the statistical data for the number of accelerations needed by the Pareto-optimal solutions obtained by EA-V1 in MOOP I (corresponding to Fig. 3), MOOP II (corresponding to Fig. 4), and MOOP III (corresponding to Fig. 5) out of the respective N values as depicted in Table 9. From Table 10, it is noticed that EA-V1 never chooses one acceleration in any MOOP and most of the solutions choose two accelerations. Among different MOOPs, MOOP II has above 50% of the solutions with more than two accelerations. A similar observation was found in [21]. However, [21] contained comfortable driving related information only as MCDM. From Table 9 it was found that solutions obtained in MOOP II are comparatively better than those obtained in MOOP I and III. For rest of the study, to analyze the decision variables’ role in comfortable driving and to investigate the present system for online implementation, EA-V1 algorithm and MOOP II were considered.The ideal points of speed changes, 40km/h, 72km/h, and 104km/h are identified from the obtained Pareto-optimal fronts (shown in Fig. 4(i)–(iii), respectively) in the optimization of acceleration duration and energy for comfortable driving of the EV using EA-V1 considering MOOP II (which does not include constraint defined in Eq. (7)) and are presented in Table 11. The preferred Pareto-optimal solutions for three speed changes obtained based on these ideal points are designated by ‘P’ as shown in Fig. 4 and the values of the corresponding objective functions, decision variables, and the maximum jerk experienced during the entire acceleration period are shown in Table 11. JMax values of preferred solutions in three speed changes are found to be lower than the value assumed for JMax allowable (18m/s3) in the constraint Eq. (7). It suggests that the constraint defined in Eq. (7) does not have any influence in finding preferred optimal solutions by EA. From Fig. 4, it is observed that a knee zone is clearly visible (marked by a dotted ellipse) in the entire Pareto-optimal front of each of the speed change. The solutions in this zone are characterized by the fact that a small improvement in either objective will cause a large deterioration in the other objectives, which makes moving in either direction not very attractive. If we assume linear preference functions, and (due to the lack of any higher-level information) also assume that each preference function (Dacc, Eacc, and JTotal) is varying in an equivalent manner, the solutions at the knee are most likely to be the optimal choice of the driver. Here the preferred point ‘P’ is obtained by calculating the minimum distance from the ideal point, which is positioned on the right end of the dotted ellipse. This suggests that the extent of the knee-zone on the right side is limited to the preferred point ‘P’.The primary motivation of this study is to analyze the role of different decision variables on optimal comfortable driving of the EV. During the above studies, a constant kpvalue, was observed, particularly for a high Sc. Another observation is that the kpvalue is close to its upper limit for a solution having a low jerk during the acceleration period. Fig. 9demonstrates the variation of kiwith energy consumption during acceleration (Eacc) in MOOP II. It was observed that variation of kiwith Eacc shows a complex relationship, particularly at a lower Sc(as shown in Fig. 9(i)). At a higher Sc(Fig. 9(iii)), variations between kiand Eacc fall into three energy zones (low (approx. 11–18×105J), medium (approx. 18–23×105J), and high (approx. 23–42×105J)). It was found that kivaries approximately exponentially with Eacc (ki=67.92e−2Eacc, in the high energy zone). It was also observed that most of the solutions belonging to the low and medium energy zones consist of two accelerations. Moreover, these two-acceleration solutions specifically lie in the knee region of the Pareto front (Fig. 4). Solutions having more than two accelerations are normally associated with the high energy zone. Such analysis of the obtained trade-off solutions by a multi-objective optimization study is termed as the task of innovization (obtaining innovative principles through optimization) [49].In order to implement the concept of designing comfortable optimal driving during EV acceleration using an EA, the primary goal is for the preferred Pareto solution to be as close as possible to the true optimal solution. The other issue is that the computational time to find the optimal solution should be very short (few seconds) for online implementation in an actual driving situation. The above comparative studies among different EAs as well as MOOP types were conducted with a large number for Psand Ng, yielding a high computational time that is not suitable for online application. Moreover, from the above studies, it was observed that the resulting Pareto front consists of many repeated solutions. Practically, the presence of multiple solutions in the Pareto front is not useful in this situation. Furthermore, the time step (dt) value used for the EV simulation contributes extensively to the system computational time. Thus, a study is carried out to find appropriate EA-parameters (namely, number of generations, Ng, and population size, Ps) and dt that reduces the system computational time to a minimum value without deteriorating the solutions’ optimality.The study was conducted by varying one EA parameter value and keeping other parameters fixed while running EA-V1. The results of different runs corresponding to different values of the parameter being varied were compared by using the difference of coverage values between two Pareto fronts for two consecutive parameter values t. In finding the appropriate Ng, experimentation is conducted based on 20 values of Ngwith an interval of 10, keeping Ps=100 and other EA parameters the same as shown in Table 4. Fig. 10(i) presents the plot of the Pareto front coverage difference versus Ngand the corresponding system computational times are presented in Fig. 10(ii), all for three speed changes. From Fig. 10(i), it is observed that after a certain Ngvalue, the Pareto front coverage value in all speed changes is not improved much. In many cases, it decreases continuously with increasing Ng. Such Ngvalues can be treated as the appropriate ones for online implementation and these are found as to be 80, 60, and 90 for the speed changes 40km/h, 72km/h, and 104km/h, respectively. From Fig. 10(ii), it is found that computational time varies with Ngwith a second-order polynomial relationship (y104) for 104km/h speed change and with linear relationships (y40andy72) for speed changes, 40 and 72km/h, respectively.A similar method is adopted to find the appropriate Psvalue. Twelve different population sizes varying with an interval of 40 are considered for experimentation while keeping the appropriate Ngvalues as found previously for different speed changes. The other EA parameters are as stated in Table 4. The difference of coverage values between two Pareto fronts obtained based on two consecutive Psvalues is plotted in Fig. 11(i). After analyzing the coverage difference values as a function of Ps, the appropriate Psvalues for speed changes 40, 72, and 104km/h are found to be 100, 120, and 160, respectively. The variation of computational time with Psis presented in Fig. 11(ii). It was found that as the population size increases, the system computational time fluctuates more and more. Approximate relationships of computational time with Psfor speed changes 40, 72 and, 104km/h (y40, y71, and y102, respectively) are expressed in Fig. 11(ii).According to the method adopted for calculating the total jerk, a decrease in dt could increase the total jerk since the number of time steps increases by decreasing dt. Therefore, it does not make any sense to consider the total jerk objective in the comparative study on the time step value. For this reason, the Dacc–Eacc projection of the Pareto front obtained after solving MOOP II with EA-V1 is used to find appropriate dt value. The appropriate Psand Ngvalues from Section 8.1 along with the other EA parameters presented in Table 4 are used for optimization. Table 12demonstrates the comparative results of different Pareto front performance metrics in solving MOOP II using EA-V1 considering five different simulation time step values. Here, the minimum and maximum values of Dacc and Eacc are taken as 0 and 500s and 0 and 5000kJ, respectively, to calculate the Pareto front metrics. After analyzing different Pareto front metrics, it was found that the appropriate dt value for speed changes 40km/h and 72km/h are 0.05 and 0.01s, respectively. In case of the 104km/h speed change, either of the dt values, 0.1 or 0.05s, can be adopted. Now, based on the appropriate values of Ps, Ng, and dt found in the above study, the required computational times are 3.03, 18.74, and 11.66s for speed changes 40km/h, 72km/h, and 102km/h, respectively. Though these values are relatively high, since the initial speed of the EV is zero, these computations can be performed off-line. The critical computational times (as described in Section 6) using the same EA parameters were 1.56 and 1.64s in neighborhood and urban speed zones, respectively. A little difference in critical computational times in different speed zones is observed, contrary to Fig. 8. This minor difference can be attributed to the different values of Ps, Ng, and dt used in the different speed zones. The critical speed of a speed change maintains the same, value as observed in Fig. 8. The critical computational time of the present system is found to be close to the response time (around 1.0s) that is normally used for data communication in navigation and vehicular systems [50,51]. Based on the above appropriate values of Ps, Ng, and dt, the preferred Pareto-optimal solutions for speed changes 40km/h, 72km/h, and 104km/h obtained based on the minimum distance from their respective ideal points are (Dacc=15.65; Eacc=228,643; JTotal=34.0752; JMax=5.19624), (Dacc=31.8; Eacc=589,228; JTotal=104.178; JMax=7.36624), and (Dacc=41.05; Eacc=1193,680; JTotal=39.1625; JMax=8.50777), respectively (with units (s, J, m/s3)). Interestingly enough, these preferred solutions are found to be non-dominated in comparison to the solutions (obtained based on Ps=500, Ng=200, and dt=0.01s) depicted in Table 11.The present strategy can easily be extended to the deceleration mode of the EV trip. However there is a difference in the primary motivation of adopting this strategy for an EV. Generally, the driver knows when he/she is going to accelerate and would like to do so optimally. But, it is not always so for deceleration. While several deceleration events may be planned (e.g., arriving at the destination), generally, deceleration is in response to the action of the preceding driver and may even be executed as an emergency action. In these situations, safety is the primary concern, not optimality. Additionally, acceleration costs the EV energy and must be executed optimally. Deceleration provides the EV with energy and by not accounting for it in trip planning calculations, a factor of safety is automatically introduced. Finally, it may be much harder to implement optimal deceleration because the driver would have to know how many meters in advance to start executing the optimal deceleration in order to arrive precisely at the destination and avoid overshooting (possibly dangerous) or undershooting (possibly inconvenient). Thus, unlike acceleration mode, the primary motivation in deceleration mode is to maximally restore the energy that is wasted through baking. The issue of optimal deceleration for EVs has been extensively studied under the subject of optimal regenerative braking [52–55].

@&#CONCLUSIONS@&#
