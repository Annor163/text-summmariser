@&#MAIN-TITLE@&#
Iso-parametric tool-path planning for point clouds

@&#HIGHLIGHTS@&#
A point-based iso-parametric tool-path planning method was proposed.The formulas for computing forward and side step were simplified significantly.Boundary conformed tool-path was generated for point clouds.

@&#KEYPHRASES@&#
Tool path,Point cloud,Meshless,Conformal parameterization,Linear interpolation,

@&#ABSTRACT@&#
Due to the compute-intensiveness and the lack of robustness of the algorithms for reconstruction of meshes and spline surfaces from point clouds, there is a need for further research in the topic of direct tool-path planning based on point clouds. In this paper, a novel approach for planning iso-parametric tool-path from a point cloud is presented. Since such planning falls into the iso-parametric category, it intrinsically depends on the parameterization of point clouds. Accordingly, a point-based conformal map is employed to build the parameterization. Based on it, formulas of computing path parameters are derived, which are much simpler than the conventional ones. By regularizing parameter domain and on the basis of the previous formulas, boundary conformed tool-path can be generated with forward and side step calculated against specified chord deviation and scallop height, respectively. Experimental results are given to illustrate the effectiveness of the proposed methods.

@&#INTRODUCTION@&#
Free-form surfaces (e.g., aero-parts and molds) are widely used in manufacturing industries. They are often machined by computer numerical control (CNC) machine tools that move cutter or table along a specified trajectory. In the most common cases, this trajectory is so-called tool-path which constitutes the core of computer-aided manufacturing (CAM). The automatic generation of tool-path for free-form surfaces is a fundamental issue in modern CAD/CAM systems.Planning tool-path is a compromising between precision and efficiency, which mainly involves two aspects, path pattern and path parameters. The former is about which shape the tool-path is. More specifically, there are three path patterns so far: direction parallel, contour parallel and spiral. The latter concerns geometric parameters of tool-path, i.e., forward step and side step bounding chord deviation and scallop height, respectively. In this paper, we shall use the terminology interval to refer to offsetting distance on surfaces and the step is used to refer to parametric offsetting distance. Fig. 1shows the three path patterns and Fig. 2describes the two path parameters. The basis of tool-path planning was laid in the 1990s. For instance, iso-parametric method  [1], iso-planar method  [2] and iso-scallop method  [3–5] are some typical approaches. Several developments are, e.g., iso-phote  [6] and C-space  [7] methods with planning tool orientation taken into account. The former in fact proposed another method of parameterization and the latter introduced the classical C-space method for robotics into tool-path planning. What should be noted is the work  [8] by G. W. Vickers et al. providing a mathematical method to determine the interval between the consecutive paths. And  [2] presented a true machining error calculation method with which accurate forward step can be determined. Based on these pioneering and fundamental works, some recent developments are iso-scallop  [9], boundary conformed  [10,11], curvilinear  [12], iso-conic  [13], steepest ascent approach  [14] and multiresolution method  [15], to name a few. Surveys of much more work about tool-path planning research can be referred in  [16,17].Tool-path planning on a surface is closely related to its representations among which the point cloud, as a direct description of surfaces, has been receiving a growing attention since the pioneering work of Marc Alexa et al.  [18]. In fact, a considerable part of meshes and spline surfaces encountered in CAD/CAM are reconstructed from point clouds through approximation. However, this kind of process is complicated and compute-intensive. What is worse, it is non-robust especially when the point cloud is a non-uniform sampling. Therefore, direct planning of tool-path for point clouds is of great significance. Compared with other representations, the lack of topological information simplifies the representation and storage of surfaces. Yet, when it comes to geometric processing, things become rather tough. That is why although there is enormous literature focusing on tool-path planning, those specified for point clouds are a few. The earlier methods of directly planning on point clouds resorted to resampling, which can be regarded as an extension of traditional iso-planar ones. Lin et al.  [19] employed a uniform rectangular grid (i.e., the Z-map constructed from an original point cloud) to generate tool-path for milling surfaces slice-by-slice. Rows of the grid on each slice (or level) were picked out as tool-path for the slice. Another relevant method is the work  [20] by Feng and Teng. They adaptively computed the forward and side step by constructing a so-called CL-net which in fact is a variant of the Z-map. The iso-scallop method  [5] of spline surfaces was extended to point clouds by Wei et al.  [21]. Apart from those, S. C. Park et al.  [22] generated contour parallel tool-path for pocket milling from a data structure point of view (i.e., PSC-map). The preceding review is carried out regardless of those based on local or global surface reconstruction, which in fact steps backward. To review as far as we can, the extension of traditional iso-parametric tool-path planning method, which can avoid complicated surface–surface intersection and surface offsetting in iso-planar and iso-scallop methods, to point clouds seems to remain blank.In this paper, a method of iso-parametric tool-path planning for point clouds is presented. Surface parameterization, closely related to machine learning and computer graphics  [23,24], is crucial for planning tool-path iso-parametrically. Yang et al.  [10] and Sun et al.  [25] employed harmonic map to parameterize spline surfaces and meshes respectively, of which free-boundary property was exploited to plan boundary conformed paths. The property means that the boundary of parameter domain can be defined arbitrarily. Thus, by mapping spatial boundaries to regular planar boundaries (i.e., rectangles and circles), boundary conformed tool-path can be generated. These methods as well as their developments are heavily dependent on the topological information and hence unlikely to be applied to unstructured point clouds. By locally triangulating, Floater et al.  [26] were able to extend their parameterization method to point clouds and this method has been extended to point clouds of spherical topology by Gotsman et al.  [27]. In the meshless domain where topological reconstruction is excluded, conformal parameterization is based on the spectral theory. There are mainly two ways to construct point-based Laplacian, heat diffusion scheme  [28] and optimal scheme  [29]. For heat diffusion scheme, choosing a proper time parameter is non-trivial, and thus the optimal scheme is preferred. Once point-based Laplacian constructed, harmonic map can be exploited to parameterizing point clouds conformally. It is obvious that such parameterization method holds the free-boundary property too. Therefore, similar to the preceding mapping-based family of tool-path planning methods  [10,25], boundary conformed tool-path can be generated. However, in addition to the free-boundary property, there is another more exciting property that their works did not cover, i.e., the conformal property. The advantage of conformal parameterization over conventional ones is the conformality (i.e., angle preserving) with which the computation of side and forward step can be simplified significantly. As known, a single path on a free-form surface is offset from a previous one along the direction orthogonal to forward direction. As the conformal parameterization is angle preserving, direction on a surface is consistent to that on its parameter domain. Therefore, for iso-parametric tool-path, its forward direction is thev-direction (oru-direction) and the offsetting direction is theu-direction (orv-direction). What is more, the step size calculation is avoided if the parameterization is conformal, since for any point on the surface, its local shape is similar to its parametric image, with respect to a factor. Namely, a small interval on the surface and its corresponding step in the parameter domain are proportional. In fact, these presented approaches can also be exploited to generate iso-scallop tool-path for point clouds as an extension of the works  [3,4].The remainder of this paper is organized as follows. Section  2 introduces the conformal parameterization of point clouds; in Section  3, we derive the formulas for calculating path parameters, which is a significant simplification of the conventional ones; Section  4 describes the proposed iso-parametric tool-path planning method; Section  5 shows the experimental results; Finally, we conclude the whole paper in Section  6.Surface parameterization is to find a bijective mapping between two surfaces with similar topology. If both surfaces are discretized as point clouds, the problem of computing such point-wise mapping is known as point cloud parameterization. Thus, for a point cloud, its parameterization is to find a planar counterpart that represents the point cloud. It is well known that harmonic map is an alternative of conformal parameterization. It satisfies the following Laplace equation∇2f=0,with respect to the Dirichlet boundary condition:f:∂∑1→∂∑2is homeomorphism, where∇2donates the Laplacian andfis a map over one surface∑1to the other∑2. If∂∑2is planar, the Laplace equation has a unique solution and hence its inverse is a conformal parameterization for the surface∑1. Similarly, in discrete cases, such parameterization can be obtained by constructing discrete Laplacian and subsequently solving discrete Laplace equation.The discrete LaplacianLfor a point cloudS={p1,p2,…,pn}⊆R3is a linear operator which takes a map onSas input and another map onSas output. If the size ofSisn, a map onSis ann-dimensional vector. Therefore,Lis a linear map between twon-dimensional vector spaces, which can be represented by ann×nmatrix. Generally, most methods of constructing such matrix fall into two categories, the Graph based methods and the Finite Element Method (FEM) based methods.The graph LaplacianLis defined aslij={deg(pi)i=j−1i≠jandpjneighbor topi0otherwise ,wheredeg(pi)donates the degree of pointpi. And subsequently, the LaplacianL(f(pi))of a mapfat a pointpican be expressed as a local sum(Lf)(i)=∑pj∈N(pi)[f(pi)−f(pj)],whereN(pi)is a set of points neighbor topi, e.g., theKnearest neighborhood (KNN). As for the FEM based methods, it is defined as(Lf)(i)=∑pj∈N(pi)wij[f(pi)−f(pj)],wherewijdonates introduced weights. In the literature of parameterization, there have been several weights proposed for meshes. For example, the famous cotangent scheme  [30] and the mean-value scheme  [31]. Since these weights were derived on triangular meshes, it seems to be hard for them to be applied to point clouds directly. However, a weight scheme specified for point clouds has recently been proved to converge to the continuous Laplacian as sampling getting denser by Belkin and Niyogi  [28]. The weights are as followswij=e−‖pi−pj‖t,t∈R+andpj∈N(pi),where parametertis constant for a point cloud. However, it is still unknown how to choose an optimaltfor a real model  [28]. There is another weight scheme (optimal weights) coinciding with Belkin’s. Schmidt and Singh  [29] parameterized point clouds conformally with such optimal weights which minimizes a quadric errorε=‖pi−∑wijpj′‖2,pj∈N(pi),subjecting to∑wij=1, wherepj′is the projected point ofpjon the tangent plane atpi. The errorεcan also be written asε=‖∑wij(pi−pj′)‖2.Then, minimizing the error becomes a least-square problem. Redonate the indices of neighbor points as{1…m}, wheremis the size of neighborhood. The solution is to solve a linear systemCW=1,cjk=(pi−pj′)T(pi−pk′),where 1 is the one-vector, and then rescale the weights so that their sum is 1.Once the discrete Laplacian for a point cloud constructed, the Laplace equation for a point cloud becomesLf=0. Suppose that∂S={pr+1,…,pn},∂D={qr+1,…,qn}and the boundary mapf:pi↦qi,r<i≤n. Then the conformal parameterization problem comes to find the interior mapping with respect to the boundary map, i.e., to solve a linear system(1)Lf=0⇒AUI=−BUB,where[An×rBn×(n−r)]=L,Ur×2I=[q1⋯qr]TandU(n−r)×2B=[qr+1⋯qn]T.However, in continuous cases, there is no differential property for boundary points. Therefore, rows associated with boundary points should be removed. Namely,[Ar×rBr×(n−r)C(n−r)×n]=L.This can also be rewritten asqi−∑pj∈N(pi)∖∂Swijqj=∑pj∈N(pi)∩∂Swijqj,i=1,2,…,r.Note thatqi=[ui,vi]Tand Eq. (1) is solved twice, one foruand the other forvcoordinate.The pre-step for constructing conformal parameterization is to define boundary map, with mainly two aspects involved: shape of planar boundary and distribution of boundary points. When planning contour parallel tool-path, the boundary is mapped to a circle in a Polar coordinates system. Thus iso-curves corresponding to concentric circles in parameter domain are selected as paths, which are free from intersection detection and trimming, as opposed to the conventional offsetting methods. Paths are generated in a manner as they morph inward from boundary and get smoother along the morphing. When planning direction parallel tool-path, boundary is mapped to a rectangle in a Cartesian coordinates system, so that paths can be simply generated by selecting segments parallel to either of the two edge pairs. This regular domain can help to avoid paths of small size (i.e., not boundary conformed), if the underlying surface is trimmed, as opposed to the conventional iso-planar methods. This merit was shown by Yang et al.  [10]. As for distribution, there are two procedures involved, ordering points and assigning them.The method used to order boundary points is inspired by the material in Floater’s  [26]. First, a point cloud is classified into two subsets, interior and boundary. Then, those boundary points are manually broken into several simple parts, as shown in Fig. 3(a). For each part, boundary points are parameterized into the unit interval [0,1] by the method similar to Section  2.1. Their boundary points are the end points of each part (i.e., the breaking points). And their weights arewij=1/‖pj−pi‖,pj∈N(pi).The ordering of parameter values is used to order the 3D boundary points. Finally, all parts are combined into an ordered boundary according to the ordering of breaking points.Boundary points are assigned along planar boundary according to chord length between the adjacent points on the 3D boundary. Specifically, when planning contour parallel tool-path, boundary points are mapped to a circle in a Polar coordinates system withf:pi↦(R0,λi⋅2π),pi∈∂S,where radiusR0can be set arbitrarily and we set it to beL/(2π)withLbeing length of the ordered boundary.λiis the distribution parameter withλr+1=0and forr+1<i≤nλi=∑j=r+2i‖pj−pj−1‖/L.Intuitively, points are proportionally mapped around the whole boundary, with respect to the chord length.When planning direction parallel tool-path, boundary points are mapped to a rectangle. They are first divided into four parts manually, so that four breaking points are consistent to the four planar corner points. Inherently, each part has a local ordering. Then, each part is also mapped to its corresponding planar edge proportionally. Suppose that consecutive lengths of the four parts areL1,L2,L3andL4. Then the lower left point is set to be (0,0) and the upper right point is((L1+L3)/2,(L2+L4)/2). The first part is mapped tou-axis withf:pi↦(λi⋅(L1+L3)/2,0),pi∈first part of∂S,whereλiis the assigning parameter withλr+1=0and for the rest pointsλi=∑j=r+2i‖pj−pj−1‖/L1,and correspondingly for the rest three parts.As the preceding shows, conformal point cloud parameterization can be boiled down to solve a sparse linear system. It can provide some perfect properties, described in Section  3, for tool-path planning. The angle preserving property helps to simplify the computation of path parameters, the free-boundary property provides natural parameter domains for planning tool-path and the shape preserving property makes the 3D shape of paths consistent to that of 2D parametric ones.Determining geometric parameters for tool-path (i.e., forward and side step) is closely related to differential properties of a surface. Some basic notions about differential geometry are introduced and it is also shown how to simplify the formulas for calculating forward and side step in this section.There are many curvatures for a surface (e.g., Gaussian curvature, mean curvature and principle curvatures) and the one involved with tool-path planning is normal curvature. Normal curvature is defined as the curvature of a curve that is the intersection between the surface itself and a plane determined by the normal vectornand a tangent vectore. Consider a parametric surface∑={r∈R3|r=r(u,v),(u,v)∈D⊆R2}, the normal curvature is expressed asκ=III=Ldu2+2Mdudv+Ndv2Edu2+2Fdudv+Gdv2,whereE=ru⋅ru,F=ru⋅rv,G=rv⋅rvare the coefficients of the first fundamental formIandL=n⋅ruu,M=n⋅ruv,N=n⋅rvvare coefficients of the second fundamental form II. The pair(du,dv)in fact represents the directione. For instance, the normal curvature along direction(du,0)isκ=L/E=n⋅ruu/ru⋅ru.When the parameterization is conformal, it is known thatE=GandF=0which implies directions(0,dv)and(du,0)are orthogonal on the surface. What is more, the local shapes aroundp∈∑andq∈D, wherep=r(q), are similar with respect to a factorσ. The factor can be given with the following derivationσ=|drdv|=I|dv|=rv⋅rvdv2|dv|=|rv|=|ru|.Therefore, a small increment on a surface is|ru|times of the corresponding parametric increment.In discrete cases, the difficulty is an approximation of the first and second order differential properties and the unit normal. The first idea may be rational spline surface reconstruction and then analytical evaluation. However, this is rather complicated. We next use a well-known difference scheme to approximate the two properties. Consider a planar pointq0and its KNN. Their corresponding spatial points can be obtained with the previous parameterization. Insert two pointsq1andq2into the KNN, as in Fig. 4. Their corresponding spatial points are computed using the method described in Section  3.3 and the differenceΔuis chosen as the shortest distance betweenq0and its KNN. Expandp1andp2as the Taylor seriesp1=r(u0−Δu,v0)=r(u0,v0)−ru(u0,v0)⋅Δu+ruu(u0,v0)⋅Δu2+O(Δu13);p2=r(u0+Δu,v0)=r(u0,v0)+ru(u0,v0)⋅Δu+ruu(u0,v0)⋅Δu2+O(Δu23).Thenru(u0,v0)=p2−p12Δuandruu(u0,v0)=p2+p1−2p02Δu2.And correspondingly forrvandrvv. Note that the coefficientsF,Mare not needed in our method.As to the unit normal estimation problem, it can be regarded as a local tangent plane approximation problem which in turn becomes a least-square fitting one  [18]. Specifically, for a pointpiand its KNN, its local covariance matrix isC=1|N(pi)|∑pj∈N(pi)(pj−ci)(pi−ci)Twhereciis the barycentric point. And the optimal unit normal is the normalized eigenvector corresponding to the smallest eigenvalue.Forward step is responsible for chord deviation. A single tool path is usually discretized to be a series of line or arc segments (this paper focuses on line segments), for the limited capacity of CNC interpolator. The chord deviation is defined to describe the error of approximating a curve segment with a line one, for details see  [2]. Maximizing the forward step which determines the length of each segment is significant for machining efficiency.The forward surface interval for machining can be expressed aslf=8eRcosθ−4e2,whereRis the radius of normal curvature along forward direction,eis chord deviation andθdonates angle between normal vector of the surface and normal vector (sometimes called curvature vector) of the single path. For iso-parametric tool-path, the radius of forward normal curvature along the direction(0,dv)can be simplified asR=|1κf|=|III|=|GN|=|rv⋅rvn⋅rvv|.To generate a single iso-parametric tool path, the forward step should be computed. As mentioned, conformal maps preserve shapes infinitesimally, namely, the 3D shape is similar to the 2D counterpart in a small range. Therefore, locally, the forward step is proportional to the forward surface interval with respect to a factorσ, implyingΔvi=vi+1−vi=lfiσi=lfi|rv|.Eventually, the forward step can be iteratively computed with the expression(2)vi+1=vi+lfi|rv|.Side step is responsible for scallop height. For machining free-form surfaces, they are often discretized to be a series of paths. Interval between two consecutive paths determines the scallop height that represents the error of approximating a surface with curves. Maximizing the side step is significant for machining efficiency too.The side surface interval for machining can be expressed asls=8hrRR+rorls=8hrRR−r,whereRis the radius of normal curvature along side direction,his the scallop height andrdonates the ball-end cutter radius (so that tool orientation does not matter). The former expression is for convex surfaces and the latter is for concave ones. The side direction is orthogonal to forward direction on the surface, which is consistent to the parametric direction(du,0), i.e.,κs=κuif the parameterization is conformal. Similar to forward step, the radius of side normal curvature along the direction(du,0)can be simplified asR=|1κs|=|III|=|EL|=|ru⋅run⋅ruu|.To generate the next iso-parametric tool path, the side step should be computed. Locally, for conformal parameterization and iso-parametric tool-path, it isΔui=ui+1−ui=lsiσi=lsi|ru|.Eventually, the side step for each point can be iteratively computed by(3)ui+1=ui+lsi|ru|.Note that, in the cases of point clouds, the|ru|and|rv|are only approximations of continuous cases whereσ=|ru|=|rv|. Therefore, the mean value of them is taken as the similarity factor for point clouds to reduce the approximation error.The assumption that each point of tool paths should be one of the existing points of a point cloud is unreasonable. Thus, interpolation is inevitable. The one we choose is of linear precision  [32], but much simpler than rational spline interpolation. It allows a point to be expressed as a weighted linear combination of its neighbor points. What is more, it is consistent to the conformal parameterization.Consider a planar pointq0with its KNN being{q1⋯qn}, its corresponding spatial pointp0isp0=∑i=1nwipi,∑i=1nwi=1,where{pi}are the corresponding spatial points of the planar KNN. Although there are many schemes of the weights, they are chosen as the optimal ones as in the conformal parameterization.Planning tool-path is to represent a surface with a series of curves against some error criteria (i.e., chord deviation and scallop height). Iso-parametric tool-path consisting ofmparametric curves (e.g.,{r(u0,v),…,r(um,v)}) are generated by keeping one parameter (e.g.,u) constant and varying others. We next show how to generate such curves on a surface for the two parallel tool-path patterns respectively.In order to construct row-like curves on surfaces by the iso-parametric method, the parametersuandvshould be variables of a Cartesian coordinates system. As mentioned, the conformal parameterization has a free-boundary property. Therefore, the parameter domain for planning direction parallel tool-path is set as a planar block, which means that the boundary is mapped to a rectangle. If the lower left point of the rectangle is set to be the original point and up right point be point(a,b), forward direction can be chosen as the positive direction ofv-axis and side direction as the positive direction ofu-axis.For each path, start from an initial point(ui,0), iteratively determine the next forward point(ui,vj)→(ui,vj+1)by the expression (2) and linear interpolation untilv-coordinate is out of range, i.e.,vj+1>b, and then set the lastvjto beb. The first initial point is (0,0), all other initial points are determined by side step.For consecutive paths, compute side step for each point on the previous path with expressions (3) or (4), where the expression (3) is for interior points and (4) for points near boundary. Then select the minimal step as side step for the next path. It is a two-stage procedure. First plan 3–5 paths from each side with the expression (4) resulting in a narrowed rectangular parameter domain, which is shown by dotted segments in Fig. 5(a). This procedure is necessary since there is distortion of conformality at points near boundary. Then iteratively determine side step with expressions (3) fromu0untilu-coordinate is out ofu1, as shown by the solid segments in Fig. 5(a). And set the lastuto beu1.Note that the expression (4) in Appendix A is the conventional formula for computing path parameters.The difference between contour and direction parallel tool-path is the coordinates system used. For contour parallel tool-path, the parametersuandvshould be variables of a Polar coordinates system. And the boundary is mapped to a circle with its center being the original point andRthe radius. Forward direction can be chosen as the positive direction ofθ-axis and side direction as the positive direction ofρ-axis.For each path, start from an initial point(ρi,0), iteratively determine next forward point(ρi,θj)→(ρi,θj+1)by the forward step computing and linear interpolation untilθ-coordinate is out of range2π. And then set the lastθjto be2π.For consecutive paths, similar to direction parallel tool-path, it is divided into two parts. First, plan 3–5 paths from the boundary, which also results in a narrowed circular parameter domain. Then iteratively compute side step for each path from the circleR′untilρ-coordinate is less than radius of cutter. And set the lastρto be the radius of cutter.

@&#CONCLUSIONS@&#
The shortcomings of converting point clouds to meshes or spline surfaces are compute-intensiveness and non-robustness. To overcome these, a direct tool-path planning method (iso-parametric) for point clouds is presented. It follows a conformal point cloud parameterization laying a foundation for the planning. Simpler mathematical formulas for determining path parameters analytically are then presented. Finally, tool-path can be generated by iteratively computing the path parameters and the linear interpolation. The angle preserving property of the conformal parameterization simplifies the calculation of tool-path parameters as well as the transferring of surface interval to parametric step. Moreover, the free-boundary property helps generate the boundary conformed tool-path.However, this work preserves the weakness of iso-parametric methods inherently. That is, the spatial path interval is uneven making it less efficient than iso-scallop ones. Fortunately, when planning iso-scallop tool-path from point clouds, most results in this paper remain valid, e.g., formulas of computing path parameters. The planning for point clouds with arbitrary topology (e.g., a point cloud with holes) is not studied. Yet, by controlling the boundary map, tool-path for them can be generated similar to the cases presented with some modification.