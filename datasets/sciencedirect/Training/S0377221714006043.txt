@&#MAIN-TITLE@&#
Solving the container relocation problem by an improved greedy look-ahead heuristic

@&#HIGHLIGHTS@&#
Investigate the container relocation problem, which is a classic problem in container operations in terminals.Develop a greedy look-ahead heuristic to solve the problem.Combine a greedy-based framework with a tree search procedure.Limit the look-ahead tree by the depth and width parameters.Provide high-quality solutions in a short runtime, especially for large-scale instances.

@&#KEYPHRASES@&#
Heuristics,Logistics,Transportation,Container relocation problem,

@&#ABSTRACT@&#
The container relocation problem (CRP) is one of the most crucial issues for container terminals. In a single bay, containers belonging to multiple groups should be retrieved by an equipped yard crane in accordance with their retrieval priorities. An operation of the crane can either relocate a container from the top of a stack to another within the bay, or remove a container with the highest retrieval priority among all remaining containers. The objective of the CRP is to find an optimized operation plan for the crane with the fewest number of container relocations. This paper proposes an improved greedy look-ahead heuristic for the CRP and conducts experiments on four existing data sets. The experimental results show that the proposed approach is able to provide better solutions for large-scale instances in shorter runtime, compared to the up-to-date approaches in the recent literature.

@&#INTRODUCTION@&#
Since the introduction of the containerization system in inter-modal freight transportation, the use of containers of standard dimensions has risen steadily in recent decades. The intense workload involved in container handling in marine terminals is a serious challenge for managers aiming to improve operational efficiency. The main objective of container operation research concentrates on controlling container handling time to reduce the eventual costs.The common process for container handling in marine terminals can be divided into three phases. In the first phase, new transship containers are assigned to certain storage areas in a container yard when arriving at the terminal; in a container yard, containers are piled vertically to form stacks, a row of stacks further constitutes a bay, and a block consists of a parallel group of bays. Fig. 1shows an example of a container yard.The first phase involves allocating placements for incoming transship containers, to reduce the expected number of future rehandles. De Castillo and Daganzo (1993) and Kim (1997) proposed methods for estimating the expected number of rehandles. Various studies on generating container storage strategies can be found in Kim, Park, and Ryu (2000), Kang, Ryu, and Kim (2006), Yang and Kim (2006) and Zhang, Chen, Shi, and Zheng (2010).In the second phase, transship containers are stored in the yard for some time before being shipped to consignees. The container pre-marshalling problem (CPMP) is usually investigated in this phase, which performs container rehandling in advance, to facilitate the ship-loading process.Two types of the CPMP have been studied in the recent literature, namely CPMP-A and CPMP-B. In the CPMP-A, an initial layout of these containers is given; the objective is to minimize the number of rehandles so as to transform the layout to an orderly final layout that does not need further rehandling. In the CPMP-B, an initial layout and a final layout are both given, and the objective is to minimize the number of rehandles in transforming the initial layout to the final layout. Lee and Hsu (2007) provided an integer programming formulation for both types of the CPMP as a multi-commodity flow problem, and Huang and Lin (2012) proposed heuristic algorithms for both types of the CPMP. Meta-heuristics have also been investigated for the CPMP, such as neighborhood search (Lee & Chao, 2009), corridor method (Caserta & Voß, 2009b), lowest priority first heuristic (Expósito-Izquierdo, Melián-Batista, & Moreno-Vega, 2012) and tree search (Bortfeldt & Forster, 2012).The third phase is the ship-loading process. During this phase, containers should be retrieved from the yard in accordance with a specific ship stowage (or loading) plan. The retrieval priorities of containers are determined by the ship stowage plan, which is known a prior. Containers which are planned to be placed on the bottom tiers of the cabin should be retrieved first; in other words, they are assigned higher retrieval priorities. Because berths are in short supply in comparison with the number of ships, the ship-loading process is a very important part of the terminal workload.If the containers are pre-marshalled in the second phase, the ship-loading process then becomes remarkably easy without requiring any additional container rehandle. Otherwise, the container relocation problem (CRP) has to be investigated in this phase; the CRP aims to find an optimal operation plan with the fewest rehandles, to save time and money.This paper extends our previous work (Jin, Lim, & Zhu, 2013), developing an improved greedy look-ahead heuristic for the CRP. The remainder of this paper is organized as follows. Section 2 gives a detailed description of the CRP. Section 3 discusses the existing approaches and data sets in the recent literature, and Section 4 describes the proposed greedy look-ahead heuristic in detail. Experiments are conducted on four existing data sets. We illustrate and discuss the computational results in comparison with the up-to-date approaches from the literature in Section 5. Finally, conclusions and suggestions for future research are given in Section 6.In this paper, we consider the problem of retrieving containers from a single bay. The bay consists of S stacks numbered 1,…,S and each stack has T tiers. The height of each stack s, denoted byh(s), should not exceed T. The initial layout contains N containers, which belong to G groups numbered 1,…,G.Two types of container operations are defined. A relocation is an operation that relocates a container from the top of one stack to another. We denote a relocation that moves container c from a source stacks1to a destination stacks2byc:s1→s2. A retrieval is an operation that picks a container up from the top of a stack, and then puts it onto a yard truck waiting nearby. We regard the position of the waiting truck as a virtual stack, say stack 0, and a retrieval that removes the top container c of stacks1is denoted byc:s1→0. Relocations and retrievals are executed by the yard crane equipped to the bay.An instance of the CRP consists of the information of the bay size and an initial layout of containers. According to the assortment on the container groups, instances of the CRP can be categorized into simplex instances and grouping instances. Containers in the initial layout of a simplex instance have distinct retrieval priorities. Conversely, in a grouping instance, containers are classified into several groups. We regard simplex instances as special cases of grouping instances, where each group contains only one container.A solution to an instance (or a layout) is a sequence of relocations and retrievals, following which the yard crane can clear the initial layout (or the layout). The objective of the CRP is to find the optimal solution to a given instance, with the fewest number of relocations.A smaller group index indicates a higher retrieval priority; in other words, containers should be retrieved in ascending order of group index. Given a layout, the containers with the highest retrieval priority among all remaining containers within, namely the targets, should be retrieved first before other containers. If there exists a target currently placed at the top of a stack, retrieving it directly is clearly the best choice for the current layout. When all the targets are beneath other containers, relocations are required.A container is well placed in a stack if all other containers placed below have lower retrieval priorities than itself; in other words, its group index is not greater than any container placed below. Otherwise, we say it is badly placed. Fig. 2illustrates a bay with 5 stacks and 4 tiers, in which each box represents a container and the number marked inside is its group index; badly placed containers are colored in gray. In this figure, the crane is retrieving a container from group 1, which is the only target in this layout.Let us distinguish between two variants of the CRP: the restricted CRP and the unrestricted CRP. In the restricted variant (R-CRP), anticipatory relocations are not allowed, i.e., a container is relocated if and only if it is at a higher tier than a target. Correspondingly, the general version allowing any relocations is referred to as the unrestricted variant (U-CRP) or the general CRP.The following definitions and notation are needed for explaining the detailed process of the proposed greedy look-ahead heuristic.For each stack s (s=1,…,S) in a layout, we usegmin(s)to denote the minimum group index among all containers in stack s. We useg(c)to denote the group index for container c. Stack s is able to support container c if c would be well placed after being relocated to stack s, to put it in mathematical way,h(s)<Tandg(c)⩽gmin(s). We usegtop(s)to denote the group index of the top container of stack s, andf(s)to denote the minimum group index among all containers in stack s (h(s)⩾1) except its top container. Hence, the top container of stack s is well placed if and only ifgtop(s)⩽f(s).The pseudo-codes in this paper contain the following mathematical operators:⊕Given a layout L and a crane operation opr,L⊕oprrepresents the successor layout of executing opr to L.Given two solutionssol1andsol2,sol1+sol2represents the compound solution by connecting crane operation sequences insol1andsol2; moreover, given a solution sol and a crane operation opr,sol+oprrepresents the resulting solution by appending opr to sol.Given a solution sol,‖sol‖represents the number of relocations in the solution.

@&#CONCLUSIONS@&#
From the comparison of the experimental results, the proposed GLAH is shown to provide better solutions for most of the existing instances, especially for large-scale instances. The GLAH is a very efficient approach for finding an efficient solution, although it cannot guarantee optimality even if given infinite runtime.The efficiency of the look-ahead procedure is mainly affected by the depth and width of the tree search. However, the increments in the time consumed by increasing tree search depth are exponential, and hence we need to limit the look-ahead depth depending on the scale of the instance.At the start of the whole process, the layout obviously has more containers that would yield more possible successor layouts. Thus, the GLAH should put more emphasis on the early period than on the later period. Such improvements will be studied in future work.