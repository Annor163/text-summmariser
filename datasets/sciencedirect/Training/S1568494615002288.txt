@&#MAIN-TITLE@&#
An on-line trained neural controller with a fuzzy learning rate of the Levenberg–Marquardt algorithm for speed control of an electrical drive with an elastic joint

@&#HIGHLIGHTS@&#
A MLP-based neurocontroller has been used as on-line trained speed controller in a drive system with elastic joint.The on-line adaptation mechanism of neurocontroller weights relies on Levenberg–Marquardt method with fuzzy model for adaptive changes of a learning rate.The developed speed neurocontroller uses only easy measurable motor speed (no sensors or estimators of other mechanical state variables are applied).Very good torsional vibration damping was obtained for this single-loop (from motor speed only) adaptive control structure of the two-mass system.

@&#KEYPHRASES@&#
Electrical drive,Elastic joint,Neural speed controller,Levenberg–Marquardt algorithm,Fuzzy learning rate,On-line training,

@&#ABSTRACT@&#
This paper describes the application of a neural model in a speed control loop of an electrical drive with an elastic mechanical coupling. Such mechanical construction makes precise speed control more difficult because of the oscillation tendency of state variables caused by a long shaft. The goal of the presented application was the replacement of a classical speed controller by an on-line trained neurocontroller, based on only one feedback from easily measurable driving motor speed. The proposed controller is based on the feedforwad neural network. Internal coefficients of neural model – weights – are adapted on-line according to the Levenberg–Marquardt algorithm. One of the problematic issues in such implementation is selection of a learning factor of the weight adaptation algorithm. In the proposed solution, a fuzzy model was implemented for calculation of this learning coefficient. The proposed solution was compared to the classical one with a PI speed controller. The designed control structure was tested in simulations and verified in experiments, using dSPACE1103 card.

@&#INTRODUCTION@&#
Precision of controllers applied in dynamical plants depends on the accuracy of a mathematical description of the object used in a design process. However, it is often hard to ensure the exactness of object identification. Moreover, there are a lot of external disturbances, changes of parameters and nonlinearities that are not simple to represent in a mathematical model of a plant. For such situations an interesting option is the application of controllers with adaptable parameters.Neural networks (NN) used as adaptive controllers are an interesting solution. These models contain many parameters which can be changed during the controlled object operation. This feature offers a possibility to calculate proper control signal even for changes of parameters of the plant [1].The structure of an adaptive neural controller contains two parts working parallel: a neural network structure and an on-line training algorithm. Coefficients (weights) of the neural network are recalculated (adapted) in order to minimize a control error. Most of popular adaptation algorithms need information about the dependence of cost function on weight changes (it is often represented by the Jacobian matrix with first-order partial derivatives) [2]. The exact level presenting the influence of several weights on an output error is obtained mostly using propagation of the error through the neural network [3]. The second group of training algorithms based on the second order derivatives of the cost function according to weights (represented by the Hessian matrix). So, these methods are very efficient and sensitive to changes of input signals [4]. Generally, calculation of the Hessian matrix requires a lot of calculation power. However, it is possible to find new methods for Hessian calculation in the second order training algorithms [5,6]. In the other solution only signs of the cost function first derivatives versus weights are used. An example of such an algorithm is Resilient Backpropagation and variations of this method [7]. It is very fast but not as accurate as the previously mentioned methods.Another completely different, but important issue in an adaptive neural controller is the mode of weights adaptation. The neural models trained on-line and off-line have the same rules of processing, but work quite differently in a given application [8]. The neural network trained off-line is based on fixed weights placed in memory of an executing program (in a processor), so the NN structure is very important because of its generalization features (we need to obtain the correct work of application even for signals not included in the training process). It is known from the NN theory that generalization properties highly depend on the NN structure. But it is not the case in our work.A different situation is observed in neural networks trained on-line. Weights of neural network model are recalculated in each iteration of the control algorithm (and thus the training algorithm) and generalization is obtained “on-line”, according to a different operation condition of the controlled plant, reference and disturbance signals. So the meaning of weights is different – they play the role of controller parameters tuned on-line. These parameters shape the control signal and a response of the controlled plant. So, in this sense the NN structure (the number of neurons, number of hidden layers), which is adapted on-line to the plant operation conditions, is not so important and should be as simple as possible for a given application.The main goal of this paper was the application and experimental implementation of a feedforward perceptron neural network with Levenberg–Marquardt training algorithm [9], as the adaptive speed controller trained on-line, in a specific application, namely in an electrical drive with an elastic connection between the driving motor and loading machine.A precise control of an electrical drive with an elastic shaft is a difficult task. Elasticity of the mechanical connection between a driving motor and a loading machine causes torsional vibration which could be dangerous for the whole system. There are a lot of drive system examples where these phenomena occur, such as: mill drives, servo drives, drives of the robots, positioning systems of hard disks, mechanisms of textile and paper machinery, conveyors, radio telescopes.Most often this phenomenon is simplified to a two-mass structure, containing elements related to a driving motor, a loading machine and the part corresponding to a flexible connection between them. The elasticity of the shaft could be significant and leads to oscillations of the state variables in the drive system. Therefore precise control of speed or position in such drives is difficult. In order to damp the torsional vibrations of drive systems with an elastic joint, the following solutions are applied:–expansion of the mechanical part of the drive (e.g. implementation of absorbers) [10],implementation of a modified (decreased) speed controller coefficients in the control structure [10],classical control structures with PI/PID controllers and additional feedbacks [10], or with a state controller [11],application of advanced control structures, such as: sliding-mode [12], predictive [13] and artificial intelligence based methods (fuzzy logic and neural networks) [14].The first of the above mentioned groups is associated with the introduction of additional elements in the mechanical part, this increases the cost of the drive and its dimensions. Sometimes in control systems with elasticity, gains in control loops are selected to weaken dynamics and in result oscillations of the state variables can be lower. One of the simplest methods of controlling the two-mass system is using classical controllers (PID) and introduction of additional feedbacks from mechanical state variables (e.g. load machine speed, torsional torque, their derivatives, etc.). But then another problem appears: in many applications measurement of all state variables is impossible. Moreover, such a solution leads to higher costs and a drive is more susceptible to damages. On the other hand – state variable estimators are required.Very effective solutions are advanced control structures, among them the most interesting are:–sliding mode control,adaptive control,predictive control,other algorithms providing robust control.It should be mentioned that the above methods of speed control have a few disadvantages such as: complexity of the structure, practical implementation problems, necessity of information about the full state vector, additional sensors or state variable estimators. All these methods require the knowledge of the drive system mathematical model and its parameters. On the contrary, due to the application of a neural network based speed controllers the knowledge of drive system model and parameters is not necessary, as the neurocontroller adapts to the control object under training procedure.Implementation of different types of neural network-based speed controllers in a drive with an elastic joint is presented in [14,15]. A vast majority of such control structures is based on multi-layer perceptron (MLP) neural networks with the Backpropagation algorithm used for weight adaptation. However, also other types of neural networks are implemented, e.g. radial basis (RBF) neural networks [15]. In the paper [15] a theoretical analysis, stability proof and simulations of a control system with a speed controller and a disturbance observer developed using RBF are presented.As it was said before, the main objective of this paper is presentation of an adaptive neural controller application trained on-line in an electrical drive with an elastic joint and demonstration of such control structure performance. The goal is obtaining precise control of this drive system, based only on information about motor speed, correct operation of the neural network based on the control structure in the presence of drive parameter changes, the simple design process of the neurocontroller, which does not need a mathematical model of the controlled object and parameters identification. This last issue is often problematic in industrial situations. One of our goals was the solution of the problem related to adaptive parameters selection of a neurocontroller.This paper is organized as follows: after the introduction of presenting issues related to neural controllers and electrical drives with elastic joints, the details of tested control structure are described. Next, simulation tests conducted in Matlab/Simulink and a discussion on the results are shown. In the last part of this paper, the experimental verification of the proposed adaptive neural controller for a drive with elasticity is shown in a different operation condition of the drive system and some conclusions resulting from this research are derived.The considered electrical drive contains a specific mechanical part, which contains a long elastic shaft, joining a driving motor and a loading machine. Such construction significantly complicates control of the motor speed, because additional oscillations of state variables may appear [10]. In control structures, often applied in a drive with such construction of a mechanical part, information about the state variables vector is used to provide signals for feedback loops in classical or advanced control structures [13]. However, this approach can be problematic in real applications, because problems with implementation of sensors can appear, and, additionally, the cost of the whole construction is higher. On the other hand, state estimators accuracy depends on drive system parameters, so the quality of control is significantly dependent on the precision of object identification.In this paper, due to the application of the neural model for speed control, the drive system identification problem is no longer valid, as the NN can adapt to unknown drive parameters during the training process. Moreover, it is assumed that the only easy measurable driving motor speed is used in the control structure, to avoid state estimators of other mechanical state variables (e.g. load side speed, torsional torque), which are sensitive to drive parameter changes. Thus, this project analyzes the control structure with two directly uncontrolled state variables: shaft torque and load speed. Normally, in the drive system with the classical PI controller and single feedback, control precision is rather poor and torsional vibrations are generated (it will be illustrated in simulation results). However, it will be shown, that the proposed solution of an adaptive neural controller can cope with the non-controllable dynamics of the drive system with a resilient shaft, and the obtained performance of the reference speed tracking is very good.Generally, the control structure of an electrical drive has a cascade structure and contains two main parts (Fig. 1). First, the internal loop is related to shaping electromagnetic torque of the driving motor. It includes such elements as: torque (or current) controller, power electronic converter, electromagnetic part of the motor (windings) and current measurement sensor. After properly conducted optimization of the torque (current) controller, this internal loop can be replaced by the first order transfer function:(1)Ge(s)=1Tmes+1,where Tmeis time constant of the torque control loop.In many cases, this internal loop can be assumed to be ideal, without delays (Tme=0). For some range of dynamics such simplification is possible and it facilitates the design procedure of the external speed control loop. In the analyzed control structure, an MLP network with on-line recalculated parameters is implemented as a speed controller. Delays of the internal torque control loop are not taken into account (Tme=0) during the design of a neural speed controller; however, the influence of changes of this parameter is tested later. The scheme of the described control structure is presented in Fig. 1.The mechanical part of the drive system with a resilient joint can be replaced with a two-mass system, where the first mass represents the driving motor and the second – the loading machine. It can be described by the following mathematical model (in per unit system, nonlinearities as friction torque and backlash are neglected) [10]:(2)T1dω1dt=me−ms,(3)T2dω2dt=ms−mL,(4)Tcdmsdt=ω1−ω2,where ω1 is a motor speed, ω2 is a load speed, meis an electromagnetic torque, msis a shaft torque, mLis a load torque, T1, T2 are mechanical time constants of the motor and the load (depending on inertia), Tcis a stiffness time constant.Comparing this mathematical model to usually analyzed drives with a stiff joint, additional state variables are visible: shaft torque and load speed. In the analyzed control structure these signals are treated as disturbance and are not used in feedbacks (as it was said above). The adaptive speed controller works based on information about motor speed ω1 only.The main element of the analyzed speed controller is the multi-layer perceptron (MLP) neural network. Data processing of each neuron can be described by the following equation:(5)yj=f∑i=1Nwijxi(t)+w0j,where f is an activation function, xiare inputs, yiare inputs, w0jis a bias, wijare weights, N is the number of inputs.Adaptation of weights in several steps is described as follows:(6)wij(k+1)=wij(k)+Δwij(k).For calculation of weight updates the Levenberg–Marquardt algorithm is used. This is a second order method, variation of Gauss–Newton algorithm, where weights are recalculated according to the expression (7) (using matrix notation):(7)Δw=−(H(w))−1JT(w)e(w),where approximation of the Hessian matrix is:(8)H=JT(w)J(w),(9)J(w)=∂e1∂w1∂e1∂w2⋯∂e1∂wN∂e2∂w1∂e2∂w2⋯∂e2∂wN⋮⋮⋮⋮∂eM∂w1∂eM∂w2⋯∂eM∂wN,(10)ej(w)=[dj−yj(w)],(11)e(w)=e1(w)e2(w)⋮eM(w),where M is the number of outputs, d is the desired output value, y is an actual output value of NN.In some cases the Hessian matrix may be non-invertible, thus another definition of this matrix is used [9]:(12)H=JT(w)J(w)+μI,Concluding, correction of NN weights according to the Levenberg–Marquardt algorithm is described by the following equation:(13)Δw=−(JT(w)J(w)+μI)−1JT(w)e(w).For calculation ofJmatrix the Backpropagation algorithm can be applied. Parameter μ corresponds to learning factor α in gradient-like methods. It can be represented as:(14)α=1μ.The details of the described MLP speed controller are presented in Fig. 2. The structure of the applied neural network is {2-5-1}, which means: 2 inputs, 5 neurons in the hidden layer and 1 neuron in the output. In the hidden layer nonlinear sigmoidal activation functions are used, in the output layer, a linear neuron is implemented. The inputs of neural network are: speed error (calculated as the difference between reference and actual value of the motor speed) and the integral of this signal (to avoid the steady-state error in the drive). It should be mentioned that the reference value of speed is filtered (with a very small time constant), which helps to eliminate an overshoot in case of the step change of the set value. In the main path of the algorithm, the data processing of the used NN structure is implemented.The second path of the controller is data processing connected with corrections of NN weights ΔW. The weights are updated in each iteration of this process according to the Levenberg–Marquardt algorithm, using the actual state of the network (values of weights, input signals and a propagated error). These two parts of the NN controller work parallel. Parameters in the NN are updated on-line, so several iterations of calculation in whole control structure corresponds to subsequent epoch of training algorithm.The learning parameter α, used in the Levenberg–Marquardt method usually takes a constant value. This coefficient determines the dynamics of the analyzed neural controller. The assumed value of α parameter is indirectly dependent on the time constants of the drive, and most often is chosen experimentally. Developing the analytical dependence describing the correlation between this adaptation coefficient and parameters of the object is troublesome. Moreover, it should be noted that object parameters may change during system operation. It should also be mentioned that in the analyzed drive system, the application of only one feedback in the control loop, taken from the motor speed, is assumed. So two uncontrolled directly state variables remain in the control structure (shaft torque and load speed). Thus, the excessive increasing of the dynamics can lead to oscillations of the state variables and great influence of the torsional torque on the load-side speed. Therefore, in this paper an introduction of the relationship between the parameter α and actual speed error value is proposed.It was assumed that, within certain limits, the variations of the adaptation parameter should be as follows:–for a small value of a speed error, parameter α should take a relatively small value, which prevents measurement noises amplifying and torsional vibration generation (related to elasticity of the connection),for a big difference between the reference speed and actual motor speed, dynamics should be higher for fast reduction of control error, so the parameter α should take bigger values.Adaptive changes of parameter α, related to the drive system operation conditions, can be introduced using a fuzzy model. The proposed adaptation rules for α parameter changes are based on observation of the plant behavior, so fuzzy modeling seems to be obvious. The absolute value of the speed control error e and its derivative de are input signals of the fuzzy model, while du is its output. Symmetrical triangular input membership functions of the fuzzy model are implemented (Fig. 3), where the following (typical for fuzzy systems) notation is used: (S – small, M – medium, B – big, MS – medium small, MB – medium big).The arrangement of membership functions is related to a range of input signal changes. Additionally, input limitations are introduced. Due to the nonlinearity and nonstationarity of the real object, nonlinear dependence of the controller parameter on the speed error is assumed. Hence uneven output membership functions are chosen. The range of the output signal changes was selected experimentally. The basic rule was prepared based on the previously presented observations and assumptions. For defuzzyfication a singleton method was applied.In this chapter simulation results of the described control structure are presented. Tests were realized in Matlab/Simulink. The whole control algorithm is implemented using three groups of tools. The standard m-file is used for parameter calculation, model running and plots preparation. The algorithm of the controller is implemented in Simulink, however, part of calculation of the Levenberg–Marquardt method is realized in the Embedded MATLAB Function. The tested drive has the following values of time constants: T1=T2=203ms and Tc=1.2ms.Simulation tests were realized for the drive system with the proposed NN speed controller and for the classical PI controller, to show the differences in obtained transients of both control structures of the drive with elastic mechanical coupling.The first tests present the influence of α parameter (14) on the dynamics of the control structure. A constant value of this coefficient is set. For different values of this learning factor both speeds and electromagnetic torque are shown in Fig. 4. The figure also shows that for higher values of the learning factor α, drive response is more dynamic, electromagnetic torque is shaped very quickly and as a result both speeds (ω1 and ω2) are set at reference value faster and without overshoot. For the presented changes of the adaptation parameter, the drive works correctly, only response time for the reference signal and overshoot change. It should be signed that correct selection of the α parameter is especially significant in the case of a drive with an elastic joint. For certain values of this parameter in the Levenberg–Marquardt algorithm, when forced dynamics is too high, uncontrolled directly state variables: the torsional torque and load speed can get oscillations which will not be effectively damped.Otherwise, if α parameter is too small, the drive response can be very slow. If the parameter in adaptation algorithm is incorrectly selected, oscillations can appear during fast changes of reference speed or load. Extreme cases are presented in Fig. 5.In this paper adaptation of the α parameter using a fuzzy model is proposed, so simulation α=αfuzzyhas been tested next. Transients presenting the control structure behavior are shown in Fig. 6. The neural speed controller cooperating with the fuzzy model in the adaptation loop ensures dynamic setting of both speeds on a reference value. Parameter α in weight adaptation algorithm (LM algorithm) plays the role of a scaling factor for update of weights (in other words – the parameters of the proposed speed controller). It is obvious that higher values of α lead to more significant impact of the LM algorithm on NN structure and faster reaction of the speed controller against the speed error. Parameter αfuzzyis changed on-line during drive operation. Under transients, such as rise of the speed or change of the load, level of training coefficient is bigger, so drive dynamics is higher. If instantaneous values of motor speed are close to reference speed, αfuzzyis smaller and oscillations and measurement noises are suppressed. As a result, we can observe in the speed control structure, that both speeds (driving motor and load machine) are equal to the reference speed much faster (for higher values of α parameter) – without overshoots, with smaller rising time; moreover a reaction to the load torque change (in t=2s) is better as well (Fig. 6a and c). The results presented above were obtained for neglected delays in the internal torque control loop (Tme=0). However, in real drives current measurement, controller and power electronic converter introduce some delay. Thus in next tests influence of Tmetime constant on state variables transients is taken into account (Fig. 7).Usually, the torque control loop is faster than external speed control loop. However, in this test a relatively high value of this time constant was assumed. Despite this, transients are almost the same as previously, small differences are observed during the start of the drive and switching of the load. It leads to the conclusion that analyzed control structure is robust to delays in torque control loop and can be applied for DC and AC drives as well.A comparison of the proposed control structure with the traditional method, which uses a PI controller [10], can give appropriate basis for assessing the analyzed structure. For this purpose the neurocontroller applied in the speed control loop of the drive system with an elastic joint (Fig. 1), was replaced by a classical PI controller (the most often implemented one). For fair comparison a solution based on the same number of additional feedbacks was chosen. So both compared neural and classical controllers, work using only one feedback from motor machine ω1 in the external speed control loop.The electromagnetic part of the control structure (torque controller, power converter and electromagnetic part of the motor) was assumed to be ideal (after proper optimization of the torque controller) and neglected for the PI controller synthesis. In result, the electromagnetic part of the drive can be described with the following transfer function:(15)Ge(s)=1,where s is a Laplace operator.The closed-loop transfer functions Gcl(s), calculated from the reference speed to the load speed for the control structure demonstrated in Fig. 1 (with a PI controller instead of NN), is described by the following equation:(16)Gcl(s)=Δω2(s)Δωr(s)=Gc(s)T1T2Tcs3+Gc(s)TcT2s2+(T1+T2)s+Gc(s),where Gc(s) is a transfer function of the PI controller described by the expression:(17)Gc(s)=Kp+Kis,where Kpand Kiare parameters of the controller.As a result of including Eq. (17) into Eq. (16), in its numerator appears sKp. It leads to a high overshoot, so for reduction of this phenomenon an input filter should be applied, with transfer function as follows:(18)GF(s)=KiKps+Ki,The parameters of the control structure are set using the pole placement method through the following methodology. The characteristic equation of the function (2) is compared to the desired polynomial of the following form:(19)(s2+2ξrωrs+ωr2)(s2+2ξrωrs+ωr2)=0where ξris a damping coefficient, ω0 is a resonant frequency.Through a comparison of relationships (16) and (19), a set of four equations is created:(20)4ξrω0=KpKi2ω02+4ξr2ω02=KiT1+1T1Tc+1T2Tc4ξrω03=KpT1T2Tcω04=KiT1T2TcThe resulting expressions which allow to set the parameters of the PI controller in the control structure are described as follows:(21)Kp=2T1Tc,Ki=T1T2Tc,while ξrand ω0are directly dependent on time constants values of the drive (T1, T2, Tc) [10].For the designed control structures (with a PI controller and NN controller) simulation results with the Matlab/Simulink software were prepared. For numerical evaluation of the obtained results and better comparison, IAE (Integral Absolute Error) was calculated:(22)IAE=∫|ε|dt=∫|d−o|dt,where d is a reference signal, o is an output of the system.The obtained transients are presented in Figs. 8–10, where values of IAE criterion obtained for both controllers are also shown. In Fig. 8 a comparison of ω2 transients for both controllers is presented. However, the additional input filter was introduced in the case of the PI speed controller based structure, a speed overshoot is still relatively high (Fig. 8) and both speeds have different trajectories in transient states (Fig. 9), especially for enlarged time constant T2, on the contrary to the NN controller case. It should be emphasized that the presented results are achieved with the PI controller only after expansion of control structure by input filter with parameters dependent on time constants of the system. It can reduce the robustness of control structure against parameter changes. However, this design process is complicated and requires precise information about drive parameters (see (18) and (21)). It can be observed that for the NN controller, the motor and load speed have almost the same transients, even at the time of load switching. It presents low influence of shaft elasticity on state variables in the control structure with the proposed NN controller. Generally, oscillations are much better damped in this case. Higher quality of control (speed is set on reference value very fast without overshoots) is observed even for changes of T2. In each of tests IAEnn(criterion value for NN controller) is lower than IAEpi(criterion value for PI controller).

@&#CONCLUSIONS@&#
This article presents the application of an adaptive neural controller, based on the MLP network with the Levenberg–Marquardt training algorithm, in an electrical drive with an elastic joint and demonstration of such control structure performance. The LM method uses an approximation of the second order derivative of cost function according to weights, so this method is more effective and sensitive to state variable changes than other NN-based methods which use only the first derivative of the cost function. The described controller is implemented in the speed control loop of drive with an elastic connection between the driving motor and load. Such a drive is more difficult to precisely control it than the drive with a stiff connection, especially if only motor speed is used in a feedback, like in the presented application. The proposed controller has only one parameter selected by the designer, it is learning coefficient α, used in the LM training algorithm. The specially designed fuzzy model has been proposed for on-line adaptation of this value. The presented results show high quality of control. The obtained simulation and experimental results present the correctness of the proposed control structure and its advantage in comparison with the classical structure with PI controller. The described controller does not need mathematical description of the object for the design process, on the contrary to the PI one. The application of an on-line trained neural speed controller (based on the Levenberg–Marquardt algorithm) in a two-mass system is hard to find in any paper, so the proposed solution is original. Also the proposition of the fuzzy adaptation of a training coefficient is new. The next work on similar NN-based solutions will focus on the introduction of additional state variables in the control structure.