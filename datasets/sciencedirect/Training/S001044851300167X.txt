@&#MAIN-TITLE@&#
Geometric interoperability via queries

@&#HIGHLIGHTS@&#
Queries solve interoperability problems that are unsolved by a data-centric approach.Interoperability, interchangeability, and integration use a semantic reference model.A hierarchy solves interoperation in design and manufacturing of incidence structures.

@&#KEYPHRASES@&#
Interoperability,Interchangeability,Integration,Geometric queries,Data exchange,Shape evaluation/comprehension,

@&#ABSTRACT@&#
Graphical abstract

@&#INTRODUCTION@&#
There is a bewildering variety of shape representations in use in computer-aided design and manufacturing. From point clouds and tessellated shape representation to NURBS, from net shape to fully parameterized, different stages of the process chain use different representations. The various representations have been evolved and refined so as to respond to the specific needs of the process using them, such as design, analysis, and particular manufacturing processes, to name a few. Moreover, the representations differ in information content, as is appropriate for the task for which they are employed [1].If digital-based manufacturing is to realize its full potential, the various representations have to be integrated and, acknowledging practice, nominally equivalent representations must be usable interchangeably and should interoperate. This is not a novel insight: there has been substantial work that attempts to reach this goal by seeking to standardize and translate models between different systems that have created them in the various representations  [2]. Unfortunately, the translation approach tends to fail in certain instances owing to mathematical reasons of representability, information content, and interpretation. As a specific example, recall that shape representations such as NURBS cannot accurately represent trimmed patches. Consequently, a CAD system has to interpret face extent and the exact location of edges and vertices. Those determinations are made by algorithms that balance what in principle amounts to uncertain or contradictory results. When such representations are translated, the needed compromises cannot be well supported, if at all. We therefore argue that the authoring system do the needed interpretations, and that model interchangeability be based on querying models instead of translating them.Note that, even if a translation approach worked, it would not even begin to address the larger problem of interoperability which also requires the ability to integrate different computations and applications, as well as to communicate between systems and representations that are often based on different mathematical assumptions.Despite decades of serious work the model translation approach contends with stubborn difficulties that remain to be solved fully. Therefore, we propose queries as an alternative. When systemDrequires data from a modelMauthored in systemC, thenDshould acquire that information through a series of queries, addressed to systemCaboutM. The queries depend on the nature of the task systemDis carrying out, for which information aboutMis needed. This interaction between the two systems suggests a form of model interchangeability: instead of queryingCaboutM, an equivalent modelM′, authored in systemC′, can be queried byD. In this scenario the notion of model interchangeability is relativized, restricting the domain of interchangeability to the information that is queried.The notion of interchangeability hinges on equivalence ofMandM′which applies only in the context of the applicationDrequires information for. This context is determined by a semantic reference model appropriate to the domain of interest.Note that modelMcould very well encode other information not relevant toD’s task. Moreover, such interchangeability arises from a basis of interoperability, whereCandC′accept the queries ofDand give answers in a format understood by systemD. Thus the relationship between the interacting systems is, barring further assumptions, asymmetric.We posit that a query-based approach offers an elegant way around the difficulties of a translation-based approach to interchangeability and interoperability because:(i)Queries, byD, restrict information transfer to only those data that are needed by the application of interest.Queries let the creating system,C, determine the appropriate query result based on proprietary algorithms used to disambiguate idiosyncratic model information inM.The query-based approach provides a rigorous foundation for developing broad communication and integration standards, in essence by providing operational semantics for fundamental, geometry-based activities.We examine a core set of queries that are appropriate to support geometric modeling tasks and applications. The required information may or may not be explicit in the model file, so one may have to make additional assumptions and write code to reveal that information. This situation suggests a theme that we articulate as follows. If the model contains specific information, it should be possible to reveal this information and make it explicit. We call this activity shape evaluation. However, if the information is not present in the representation of the shape model, and if it must be derived and computed under additional assumptions or imputations, then we will speak of shape comprehension. We will point to this theme periodically.Almost all earlier research on geometric interoperability can be characterized as data-centric by virtue of being focused either on format or specific representation conversions. A geometric representation can be thought of as a composition of geometric primitives by rules specific to a given representation scheme. In data translation, such a representation is transferred explicitly by various translators. However, in practice, the meaning of any representation is determined by the corresponding evaluation algorithms that usually also differ from system to system. Thus, conceptually, every geometric translation procedure involves three ingredients: primitive mapping, rule mapping, and possibly modified evaluation algorithms. While many of the primitives have been standardized in widely accepted STEP  [2] and IGES  [3] standards, representations in individual CAD systems remain incompatible. System-to-system translators are available in many cases, but they do not solve the fundamental bottleneck of interoperability. Perhaps the most widespread difficulty arises from the mismatch between the accuracy of geometric representation and the precision of the evaluation algorithms used in modeling systems. Attempts to deal with this issue include use of exact computation  [4–6], modeling imprecision of data  [7], methods for tolerant computing  [8–10], and a number of heuristic techniques to “heal” the translated models  [11–15].A fundamental unresolved issue is that all data translation methods implicitly or explicitly rely on theoretical foundations laid out thirty years ago  [16,17], assuming that sets of points and functions may be represented exactly by data structures and algorithms. These assumptions fail in the presence of numerical errors or approximations, as shown by researchers who proposed to extend the basic theory of solid modeling to account for geometric errors and tolerances  [18,19]. In an effort to bypass the numerical issues altogether, a number of researchers proposed to approach interoperability problems in terms of higher level parametric feature-based representations that are largely symbolic structures with minimal numerical data  [20–26]. Great progress has been made, but as of this writing, acceptable formal models are still lacking in a number of important areas, including blending, persistent referencing, constraints, and validity, to name a few. It was also observed that most geometric representations and algorithms may be recast in a canonical form using cellular representations [27–29]. In particular, researchers in  [29] advocated a representation-neutral DJINN API based on cellular decompositions as an interoperability solution. While the approach is intellectually appealing, it is nonetheless impractical because it requires that a superset of all useful geometric operations is represented and exchanged in the canonical cellular format, by all interoperable systems.Meanwhile, Shapiro showed  [28,30] that, in the presence of a proper formal model, all exact representation conversions can be reduced to a small number of computations that included the construction of primitives, intersections, sorting, and point membership tests. This approach has been used to solve a number of challenging representation conversion problems, including boundary to CSG conversion  [31,32] and maintenance of parametric families  [24,26]. He also showed that the same generate-and-test paradigm applies in the presence of approximations and tolerances, provided that robust point membership tests can be performed against a formally defined standard. For example, this approach was effectively used to construct approximations of general sweep and unsweep operations based on a formally defined trajectory intersection test  [33]. Independently, Hoffmann demonstrated that expensive and error-prone conversion of boundary representations models can be bypassed altogether, if such models may be tested against formally defined high-level parametric representations  [34].These and other recent results suggest that an effective approach to all “representation conversion” problems is not to convert them, but to compute on them via tests (or queries). The approach still requires a proper formal semantics, but this semantics is interpreted procedurally via computable queries. These observations were summarized in a recent report [1].Part interchangeability, in assemblies, is the basis for mass production and the economies of scale  [35]. Originally, a set of gauges was used to determine whether a given part was fit to function in an assembly. A gauge is a simplest example of a device that performs evaluation queries on a given physical part. Later, the mathematical basis for part interchangeability came into existence with the development and standardization of geometric dimensioning and tolerancing (GD&T). This basis allows a precise specification of nominal shape and tolerance zones. Any part whose net manufactured shape is within the specified tolerance zones is fit to function and is interchangeable with any other such shape, assuming a correct nominal shape design.We say that a partA, as a physical artifact, is interchangeable with another partB, also understood as a physical artifact, ifAcan be replaced byBwithout any compromise of form, fit, and function. Logically this relation is an equivalence. LetM(A)andM(B)be the point sets that modelAandBexactly, with all imperfections. SinceM(A)andM(B)cannot be congruent point sets, one may want to define interchangeability by positing thatM(A)andM(B)are within some allowable, specified tolerance. But this definition is problematic because it is not an equivalence. Historically, the problem was solved by the notion of a “golden” master part, which is used to establish the equivalence between the interchangeable physical partsAandB. That is, the parts are always compared with respect to an external common reference modelM0, and not directly to each other.In the early part of the 20th century, engineering drawings with dimensioning and tolerancing notations slowly replaced the need for keeping a physical master artifact, eventually leading to modern GD&T descriptions of all such reference models. In order to determine if a physical partApasses GD&T specifications, its geometric modelM(A)is obtained via measurement (evaluation) queries and then compared against tolerance zones via fitting (comprehension) queries. We make two crucial observations:(i)The above traditional concept of parts interchangeability is responsive to the concepts of form, fit and function in an assembly. The concept is thus application-dependent; here on the application of assemblies.The notion of interchangeability requires a common reference model that is determined by the application. In the case of GD&T the reference model comprises a set of tolerance zones and procedures for establishing them. Our query scenario is well-suited to this conceptualization.The remainder is structured as follows. Section  2 defines interoperability, interchangeability and the proxy concept, and explains the concept of integration we consider. Section  3 presents the query hierarchy and illustrates evaluation vs. comprehension. Section  4 discusses several application scenarios, and Section  5 summarizes and concludes our paper.The diagram of Fig. 1summarizes the concepts and definitions introduced below.Similarly to the time-tested approach to interchangeability in mechanical assemblies, a key concept of our framework is the reference modelM0without which model interchangeability is not an equivalence: if modelM′is withinϵof modelMand modelM″is withinϵof modelM′,M″need not be withinϵofM. By contrast, all models that are withinϵof reference modelM0may be deemed equivalent. So the notion of equivalence rests on the role of the reference modelM0.When a systemCauthoring a modelMimplements queries, consistent answers can only be to within a system-dependent accuracyϵC. In many cases, however,Mdoes not accurately describe the intended point setM0. Defining the query semantics  [36] that guides the interpretation ofMand the association ofM0, is thus at best consistent to withinϵC. Hence limited accuracy is inherent in the reference model concept, which motivates the notion of a proxy.Definition (Proxy). A modelMauthored in systemCis a proxy for a reference modelM0ifMdiscloses the same semantic information up to accuracyϵCwhen queried byC.These assumptions put the onus of achieving a correct and consistent query implementation on the authoring system, where it belongs. Since different systems achieve different accuracies, queries include a parameter that requests an accuracy specified by the user. This user-stipulated accuracyϵcan be at mostϵC. In the case of GD&T, for instance,ϵis usually an order of magnitude greater thanϵC. In solid modeling applications, a systemCmay be a NURBS modeler capable of correctly answering point membership classification (PMC) queries to an accuracy ofϵC=10−9andC′may be a polyhedral modeler that can correctly answer PMC queries to an accuracy ofϵC′=10−6. Both modelers understand PMC queries that are defined with respect to an idealized reference solid modelM0, and answer with a user-specified query toleranceϵQ. In other applications,M0may be a scalar field and its level set may be queried with accuracy up toϵthat is in turn limited by twice the sampling density.Interoperability applies to systems and means that one system can work with the models of another system within an application domain:Definition (Interoperability). LetCandC′be two systems and consider two models,Mauthored inC, andM′authored in systemC′. We say thatCcan interoperate withC′ifCcan interpret and use correctly the queries that modelM′supports.Once again, correctness is understood with respect to the semantics of the queries associated with the application-specific reference modelM0for whichM′can serve as proxy. The fact thatCcan interpret correctlyM′does not mean thatC′can interpret correctlyM. That is, interoperability is not a symmetric relation. Finally, the concept is restricted to a domain of queries understood byC′and byC. In the above example of a NURBS modelerCand a polyhedral modelerC′,Ccan interoperate withC′but not vice versa.Using interoperability of systems, it may be tempting (and sometimes practically necessary) to extend the notion of a proxy to computer models created in different systems. After all, if the systemCcan interoperate withC′, then a modelM′can be substituted forM, even ifMandM′have been authored in different CAD systems. In the previous example a polyhedral modelM′can be used as proxy for a NURBS modelMprovidedϵQ≥10−6. When using this approach, a modelMcreated in systemCmust serve as the “master” reference modelM0for all systems and applications that need to interoperate and exchange models withC. While this approach is often used in practice, it is limited by the fact that, by design, modelMmay not be mathematically sound, and the proxy relationship is asymmetric. In the query-centric approach, the systems query each other, each system disclosing data of the model it has authored, as requested. The concept of model proxy rests on the authoring system accepting and responding to queries in a way understood by both systems. The understanding must be based on a well-defined semantics ensuring correct interpretation.The notions of model proxy and system interoperability can be combined to define the notion of interchangeable models as an equivalence relation that extends and generalizes the notion of interchangeable parts in assemblies discussed in Section  1.3.Definition (Interchangeability). LetMandM′be two electronic models, authored in two different systemsCandC′respectively. IfMandM′are proxies forM0, andCandC′interoperate, we callMandM′to be interchangeable.Interchangeability of electronic models must be understood in an application context. The NURBS modelMand polyhedral modelM′may be interchangeable with respect to PMC queries withϵQ>10−6. But consider a 3D medical imageM0sampling a scalar field with a grid spacing ofδ, and two modelsMandM′of a level set of the field, supporting PMC queries with an accuracy ofϵ. Assumingϵ>2δ,  [37], bothMandM′can serve as proxy forM0and are therefore interchangeable. As another example, two proxy modelsMandM′of a reference modelM0may be deemed interchangeable if their structural performance is sufficiently close to that ofM0. In this case, depending on the problem and analysis method, specific shape features and model representation may be considered irrelevant. Thus, finite element mesh models, simplified boundary representations, or a detailed solid model sampled at some coarse resolution may all be considered interchangeable between systems that interoperate via queries.Last but not least, when systems import and export models in the neutral STEP format, there is also the need for a well-defined semantics ofM0. Here, too, we would define proxy models analogously to the query-centric definition above. We note that it, too, is a matter of system capabilities. We thus understand the various conceivable forms of proxy models as differentiated by the degree of system interaction and data granularity. In the data-centric approach the query is simply “give me the model, say in STEP format”. Once the model has been delivered, the job of the authoring system is done. This is a coarse-grained data interchange. In the query-based approach, there is an incremental information exchange that is finely-grained. Restricting the semantics to a set of queries allows a more nuanced semantics than for the data-centric approach.So far we have mainly considered model interchangeability, an equivalence where the application context narrows the semantic requirements. We now explore model complementarity.Definition (Integration). LetCandDbe two heterogeneous systems, withCa CAD system. ThenCandDcan be integrated into systemSifScan interoperate with bothCandDin order to acquire new functionality.Note thatCorDcan play the role ofS, in which case we talk about integratingDintoCor vice versa. System integration deals with combining systems to accomplish a task beyond the individual system’s capabilities. For instance, we might integrate a CAD systemCwith MatLab. MatLab has no notion of CAD models, but by queryingCit can determine the mass properties or compute the convex hull of CAD models inC.Similarly, consider a CAE systemDthat performs engineering analysis, such as linear static analysis, on a geometric modelMauthored in a systemC. The data-centric approach to integration requires convertingMinto a format acceptable toD, such as a finite element mesh. We will explain in Section  4 how, in a query-based approach, integration is achieved by replacing all geometric computations withinDby queries to systemC. Of course, this integration requires thatCcan interoperate withD, with respect to a common reference semantic model, in this example a valid solid.In this paper, we will assume that a modelMis a collection of shapes along with incidences and attributes. For instance, in a boundary representation the shapes are faces, edges and vertices that, based on the incidence and adjacency structures, imperfectly describe and interpret an ideal point setM0that is the boundary of a 3-dimensional semi-analytic set, the mathematical model of Requicha  [16].The information content of a CAD modelMhas to support many different views (information structures) of the artifacts to be manufactured, maintained and eventually disposed of. At the various stages in the lifecycle, different shape information is required. Beyond incidences and adjacencies, the shapes inMare associated with attributes and relationships. Common examples include: mechanical assemblies, composite material structures, and CAD boundary representations with GD&T information. Instead of thinking ofMas subdividing and relating parts ofM0, we think ofMas a collection of shapes.If different incidence structures refer to the same point setM0, we do not require that the incidence structures are compatible. For instance, ifMandM′refer to the same shapeM0, then a face ofMneed not be contained in a face ofM′or vice versa. Instead, we may think of a collection of different shape modelsM, each potentially supporting different stages and requirements in the life cycle.Throughout, we restrict to queries pertaining to shape and do not delve deeply into the application or process information that takes its cue from shape. However, we note that geometric incidence structures also carry large amounts of application-specific knowledge, usually in a form of attributes associated with the shapes ofM. Common examples include GD&T information associated with boundary representations, constraints associated with mating conditions in assemblies, and material and manufacturing process information associated with composite layers. In order to support such applications, an incidence structure would assign to the shapes ofMidentifying tags and would associate with some of these so-identified shapes labels that link to additional information and relationships pertaining to the application.We note that the same metaphor applies to other application domains, e.g. medical models, building information management, etc. Moreover, the modelMitself may be referred to by a tag that namesMin its entirety. Thus, when passing a shape query to a modelM, an argumentMcan be understood more generally to be an associated tag.We present a query hierarchy to demonstrate how to solve the interoperability, interchangeability, and integration problems. We will make a number of specific assumptions that are reasonable in the context of design and manufacturing applications. Note, however, that many of these assumptions may be modified if needed. For example, we will assume that all representations deal with subsets of Euclidean spaceRd, where typicallyd=2or 3. The queries and the hierarchy are based on well known results in geometric and solid modeling, which we cite as appropriate. The hierarchy is organized into levels, by increasing degree of comprehension: the higher level queries assume the existence of lower level queries and in fact may be implemented in terms of them, with additional assumptions. Our descriptions below aim for clarity instead of stodgy detail.We assume throughout that the modelMof the queried systemCis a logical incidence structure over a collection of one or more shapesMi. Without loss of generality, lower levels of queries will assume thatMis a single shape, while the highest level in the hierarchy assumes thatMis an incidence structure involving any number of shapes with attributes, as explained in Section  2.4. For modelsMof an incidence structure, we will assume thatMcan refer unambiguously to its constituent modelsMiby tags that can be queried. The constituent models may also contain attributes with labels that are relevant to applications. Such labels might refer to surface finish, material properties, and GD&T, to name a few. At the lower levels of the query hierarchy, however, it suffices to assume thatMrefers simply to a reference point setM0.In CAD, a (single) shapeMrepresents a setM0that is a connected compactk-manifold with boundary, that is tamely11Tame embeddings ensure that the represented shapes are physically realizable  [16,38]. In manufacturing, shapes are also assumed to be semi-analytic sets with piecewise smooth boundaries  [16].embedded in an ambient space. Unless stated otherwise, this is the Euclidean spaceR3. Generally speaking, we assume that the metric properties are determined by the properties of the reference space. The metric properties ofMneed not be the same as the metric properties of the ambient space, for example, whenMis a curve or surface embedded inR3.NowMis a possibly imperfect computer representation ofM0, the reference model. Assume that the authoring systemCofMcan correctly answer queries ofM. When the queries are numerical,Ccan answer them to a specific resolutionϵC.For example, a point membership query that returnsq∉Mmeans thatq∉M0and the distance of any boundary pointq0ofM0fromqis at leastϵC. If a nearest pointq0on the boundary ofM0has distance less thanϵC, then the query returns on the boundary ofM. The query may specify a coarser resolutionϵQ. An incorrect modelMeither does not have an interpretation ofM0, or point-membership queries return inconsistent answers. In an abuse of language we say thatMsupports a queryQto mean that the authoring systemCofMsupportsQ.The dimensionkofMis its intrinsic property. By definition,k≤d, the dimension of the ambient space. We assumed so far thatMmust be dimensionally homogeneous, which means, inR3,Mcan be only a single point, connected curve, surface, or solid. Disconnected sets and heterogeneous structures are represented by logical incidences between basic shapes.Dimension Query DQ(M): returns the dimensionskofMand the dimensiondof the ambient spaceRd.In most cases, certain bounds onMare needed that guarantee correctness of a computation involving local queries. They are a bound on the extent ofM, such as a bounding box, and a separation distanceδ0that informally states that no two nonadjacent points ofM0are closer thanδ0. This notion may be made precise by definingδ0=2min(δi,δe), whereδiandδeare the minimum feature sizes ofM’s interior and exterior respectively. The minimum feature size of a setXis in turn defined as the minimum distance between∂Xand its medial axis  [39]. Note that the medial axis ofXis computed using its metric properties; thus the medial axis of a surfaceMembedded inR3will be computed in terms of geodesic distances, while the medial axis of its complement will be computed using Euclidean distance (Fig. 2). IfMcan deliver consistent answers aboutM0up to the resolution limitϵC, it follows thatδ0>ϵC. Moreover, the native coordinate system underlyingMmust be understood so the queries can be meaningfully formulated. We accomplish both with the bounds query.Bounds Query BQ(M): returns the resolutionϵC, the separation distanceδ0, and a bounding volumeX, ofM0.Xis an axis-parallel box, specified by two vertices delimiting a main diagonal of the box and given in Cartesian coordinates in the native coordinate system ofM.Cis the authoring system ofM.We assign to each pointpthat is not inM0the shortest Euclidean distance to a pointq∈M0. Ifpis inM0, then its distance is less than the resolution limitϵC. Ifpis not inM0, then a nearest pointq∈M0is on the boundary∂M0.Distance Field Query DF(M,p,ϵ): Given pointpand distanceϵ, return a nearest point ofMprovided no point in theϵneighborhood ofphas more than one nearest point onM.If we are near singularities, i.e., near the medial structure of the complement space, there can be several equi-distant points onM. Spheres and surface elements of revolution have an infinite number of nearest points to points in the center or on the axis of revolution. If the query point is near such singularities, the query returns a nearest pointqplus an indication that there may be more than one nearest point. As mentioned, in GD&Tϵis typically an order of magnitude larger thanϵC.It is a basic fact that the distance field exists for any closed set, and conversely, a set of points satisfyingf(p)≥0for any real valued functionfis a closed set  [40]. This means that even at this very low level, we already have a model of informational completeness: a distance field defines a setM0with precisionϵC, which can be reconstructed within the bounding volume and feature details that are larger thanδ0. In fact, distance fields are used directly to represent shape and physics information in geometric and level set methods  [41,42]. It is possible to (re)construct a model in this way, but higher level queries allow more efficient algorithms to do so.We assume thatM0is a point set on whichd-neighborhoods are defined by distance. Ifpis a point in the space in whichM0is embedded, then theϵ-neighborhood ofpis simply the set of all pointsqat distance less thanϵfromp. The point-membership classification query (PMC) is defined as follows:(1) Point Membership Classification Query PMC(M,p,ϵ)The query is defined forϵ≥ϵC. It returns in if theϵ-neighborhood ofpcontains only points inM0and returns out if no point in theϵ-neighborhood ofpis contained inM0. The query returns on otherwise. In this latter case, a classical version of point membership test also returns a representation of the neighborhood ofpwith respect to setM0, usually in terms of normal directions at the boundary. In an effort to keep queries as simple as possible and to avoid complex representations, we will instead recover the neighborhood information through combinatorial and differential queries at Level 2.An iterated PMC query of the first type can construct anϵ-cover22A set of sampled points{pi}is an epsilon cover of setX, if every pointx∈Xlies withinϵ-distance from some sample pointpi.ofM0if we have a bounding box ofM0. An algorithm for constructing such a cover could proceed by exhaustive search within the bounding volume. Sinceϵis an argument to the query, more efficient algorithms can be devised that adaptively search for points near the boundary ofM0. In particular, an iteration can determine the distance of a query pointpfrom the boundary ofM0. This discovery process may be of limited efficiency, however, owing to a potentially large volume of queries to be issued. Indeed, in many representation formats (for example, in all parametric representations of curves and surfaces)Mcan more efficiently construct and return anϵ-cover ofM0. Thus we also include a generative version with the second query type.(2) COVER(M,ϵ)The query returns anϵ-cover ofM.Whenϵ<ϵC, both forms of the PMC query return unknown. With point membership andϵ-cover queries, we can claim a slightly higher level of informational completeness. If the extent ofM0is known, then it can be approximated by a point cloud withϵ≥ϵCaccuracy using PMC queries. Suchϵ-cover can be used directly by many applications or may be used to construct either combinatorial or differential models ofM0. The reconstruction is essentially a comprehension procedure that assumes additional properties ofM0. These properties may be established by local geometry queries next.At Level 1, we only worked withϵ-neighborhoods. We could classify points and find their distance from each other, but without additional information we did not know whether two nearby points were adjacent in a simplicial approximation ofM0. We now assume thatMhas basic local geometric and topological properties. In the discrete case, we consider a local simplicial approximation ofM0. In the continuous case, we consider approximate differential properties. In either case,M0admits these properties andMsupports querying them.The following queries assume thatMcan answer queries about the local topology correctly but only to a particular resolutionϵC. As before, this bound necessarily implies that the smallest distanceδ0between two points ofM0that are not adjacent is not smaller thanϵC.Combinatorial Neighborhood (CN) queries.(1)CN(M,p,ϵ,k):Given a pointpin or onM0, return the combinatorial neighborhood of sizeϵand dimensionk, of a local simplicial approximation of theϵneighborhood ofp.(2)CN(M,K,ϵ,k):Given anϵcoverKofM0, return a simplicial approximation of dimensionkofM0.Here we assume thatMcan determine differential properties such as normals and curvature. WhenMcontains only a piecewise simplicial approximation, then such differential properties could be supported approximately, derived from the local neighborhood.Differential neighborhood (DN) queries.(1)DN(M,p,k,r):Given a pointpin or onM0, return the differential information through orderrfor thek-dimensional submanifold ofM.(2)DN(M,K,k,r):Given anϵcoverKofM0, return for each point in the cover the differential information through orderrfor thek-dimensional submanifold ofM.The DN queries parallel the CN queries, and the two should yield the same information in the limit asϵ→0, allowing us to recover not only topological but also differential structure ofM0. Normals, curvature, and other differential information may not exist for singular points. In some cases, differential information may be replaced by equivalent generalizations, such as generalized normals or local cone approximations when they are defined and exist.Many common tasks in geometric modeling and applications require knowing global properties ofM0. Examples include collision and containment detection, ray casting, and surface–surface intersection, to name a few. Global properties can be computed, in principle, from lower-level local queries, at least approximately and with additional assumptions aboutM0. Thus, for reasons of convenience and efficiency it is helpful to define higher-level queries. In a data-centric approach, global model information is obtained from the modelMgiven in a particular CAD-model format. Instead, we want queries and their answers to be put in the simplest, most basic representation, and with a minimum of algorithmic requirements. This, in turn, requires identifying queries that acquire the global shape information in a variety of situations.We propose that this role is played by intersection queries. Formally, this argument is based on the observation that most global computations (boundary evaluation, collision detection, ray casting, etc.) tend to reduce to a finite number of Set Membership Classification procedures  [44] formulated as follows. The candidate setXis being classified against the reference setSinto three setsXinS,XonSandXoutS. Each of the three sets is computed by regularized intersection ofXwith the reference setS, its boundary, or complement, respectively. The results are regularized in the topology of the candidate setX. As explained in  [44], Set Membership Classification is a natural generalization of the point membership test. We adapt set membership classification as a basic query by treatingMas a representation for the reference setM0, and choosing a simplest possible generic representation for the setX: anr-dimensional simplex.Intersection Classification IC(M,P,ϵ,r): Given pointsPr={p0,…,pr}that form ar-simplexP, the query returns a collection ofr-simplices contained inPthat, together, approximateM∩Pwithϵresolution, usually measured in terms of the Hausdorff distance.The query clearly subsumes the line/solid classification IC(M,{p0,p1},ϵ,1) in which the segment(p0,p1)is partitioned into segments according to how the segment intersectsM0. In practice, we may not need to restrict to simplices and simplicial complexes. For instance, it may be convenient to include a box/solid classification even though it can be implemented by 5 or 6 simplex/solid classification queries. Ideally, the queried system answers the supported queries in ways that are best suited to its, possibly proprietary, internal logic.So far, our queries conceptualizeM0just as a point set approximately represented by the modelM. What structure is queried at those levels is primarily driven by submitting a point set of interest and obtaining how it relates toM0in a basic way: e.g. is a query point in, on or out ofM0? If it is in, what is its neighborhood; if it is out, how far away is it; etc. Queries with higher-dimensional volumes concern analogous questions, for instance how the query volume intersectsM0.Now we turn to a more differentiated view that acknowledges that a modelMcan have a logical structure and that this structure, for instance, decomposesM0and relates the constituent parts by incidence information inM. The parts ofM0, organized byM, have identifying tags which we denote as IDs. We may query what ID a particular point has, but we can also query what incidences there are between the IDs inM.Identification Query IDQ(M,p,ϵ): Given a pointpthat is in or onM0with resolutionϵ, return the set of IDs of the parts containingpand the dimensions of these parts.For example, ifMis a boundary representation andpis on the boundary ofM0, the label returned could be the name of the face or edge containingp, or of the vertexp. Because we assumed thatM0is a decomposition (and not necessarily a partition) into constituent closed sets (parts),pmay be contained in more than one part. When multiple IDs apply top, the list of IDs of all containing entities is returned. Once such an ID of a part is known, we can request incidence information:Incidence Query INC(M,J,k): Given the IDJof ak-dimensional part ofM0, return the IDs of allk-dimensional parts incident toJinM.These two queries are sufficient to reconstruct incidence information in any incidence structure, including commonly used simplicial and cell complexes, assembly and constraint graphs and tolerance tree models, heterogeneous material structures, finite element meshes, as well as design/manufacturing feature interaction graphs, among others.Recall that we have limited the space of represented incident structures to geometric information. Net shape and incidence structure, such as may be represented byM, is one component of the information structures that are employed to represent products. The shape and incidence model is augmented by other information, pertaining to features, surface finish, typical loads during product operation, etc. Much of this information can be conceptualized as attribute annotations associated with specific shape elements. Similarly, incidence relations may refer to datums, mating or interference surface features in an assembly, or indicate a critical distance constraint in a mechanism. Layering in composite materials, adjacency in open cell complexes, image segmentation, or datum relationships in GD&T specifications are other examples of many possible incidence relationships. That is, the application context modulates the needs and semantics of the comprehension-richer queries.The syntax and semantics of the attribute information are determined by an application and should be consistent with accepted standards  [45]. Examples of useful standardized attributes include type and degree of surfaces, material properties, GD&T specifications, and other annotations. We will see examples of how attribute information may be used in Section  4. But since our main focus is on geometric queries and interoperability, we will not attempt to deal with the semantics of the attributes.We demonstrate how the query-based approach may be used to implement a number of common tasks in computer-aided design, manufacturing, and simulation. Our goal is not to propose optimal solutions or to improve on existing algorithms, but to demonstrate the broad applicability of the query-based approach to solving problems of interoperability, interchangeability and integration.Consider first the classical problem of constructing an approximate polyhedral model of a homogeneous 3D solid. The modelMto be so approximated has been authored in a systemCthat answers the queries discussed before, and we assume thatCcan answer with an accuracy ofϵC. The task of (re)constructingM′in another systemC′corresponds to the simplest example of interoperability—that of net shape data acquisition. This may be useful in a variety of practical situations, for example, when a reconstructed modelM′can be prototyped using layered manufacturing equipment without revealing any information about the design process or intent. Another application relating to long-term archival is discussed in Section  5.2. In all of these applications,M′serves as a proxy for the nominal solid modelM0represented byM. A simple algorithm could proceed as follows:Algorithm 4.1(i)Establish a bounding volumeVforM′using a bounds query; BQ, Level 0. Note that we assume thatM′is three-dimensional, but its dimension can be established using a dimension query; DQ, also Level 0.SampleVwith a regular grid of densityϵ>ϵC, establishing for every grid point whether it is in, on or out of the solid represented byM, using the point-membership classification queries, PMC, Level 2.Assemble the polyhedral boundary of the approximation for modelM′using the usual marching cubes method  [46] or another polygonization algorithm.What accuracy can be achieved? According to the Nyquist–Shannon Theorem  [37], a sampling density of at leastδ/2is required to reconstruct a signal whose highest frequency isδ. Given thatCcan deliver an accuracy ofϵC, the smallest distinguishable feature size is therefore2ϵC. Note, moreover, that sampling can only approximate sharp edges and conical singularities, as they have infinite frequency. However, when theϵ-cover is constructed by the authoring systemC, then those features can be approximated as sharp polyhedral edges and conical singularities.The approximation ofM′, whether done with PMC queries constructing anϵ-cover or by obtaining a cover by query fromC, can be generated for any shape model of any dimension. For instance, manifolds for tool path design can be so approximated. Thus already low-level queries are flexible and quite useful. Recall from Section  3.2 that feature size is defined in terms of bounds on distances between the boundary ofMand the medial axes of its interior and exterior. In fact, we could even approximately reconstruct the medial axes using a combination of point membership and distance queries to some accuracyϵQand determine the smallest feature size. Of course, the correctness of the medial axis reconstruction itself is subject to the same sampling limitation, albeit at higher frequency. These limitations are reasonable manifestations of the fact that low-level queries make very few assumptions about represented properties ofM. In contrast, below we show that higher level queries may be used to reconstruct a modelM′more accurately.We consider whether and how some of the higher-level queries permit highly accurate reconstructions of modelMunder the assumption that the authoring systemCcan queryMwith precisionϵC. IfϵC=0, the reconstruction procedure would be exact. We illustrate this application with an example.A trivariate polynomial of degreemhasc(m)coefficients, wherec(m)isO(m3)[38]. Thus, an algebraic surface of degreemis fully determined byc(m)−1surface points, since we may scale the surface equation by a constant. An attribute query (Level 6) can ask the degree of an algebraic surface, followed by a sequence of queries to generate the required number of points. The specific sequence of queries may depend on queries supported by the authoring systemC′. For example, if surfaceMiis a parametric surface, anϵ-cover query (COVER, Level 2) will generate a sufficient number of candidate points; if theϵ-cover is not supported, the points on the surface could be located by a binary search using point membership and distance queries; or ifC′supports line/surface intersection queries, (IC, Level 4), then randomized line/solid queries will determinec(m)−1surface points with high probability. In all cases, once the required number of sample points is obtained the surface may be reconstructed with high accuracy using the representation in the receiving system.33Note that error estimates would depend on the distribution of the points in addition tomandϵC.This process may be combined with incidence queries (INC, Level 5) to support what is essentially a lossless transfer and reconstruction of any incidence structureMrepresenting piecewise-algebraic modelM0, including a boundary representation. It should be clear that the incidence queries are sufficient to determine dimension and adjacency information for all faces, edges, and vertices in any boundary representation. The geometric carrier of each boundary cell (edge or face) can be reconstructed precisely following the above procedure. When the type and degree of a cell may not be available, it is reasonable to expect that its geometry can be deduced from neighboring cells: intersection of incident faces for an edge, and interpolation of incident edges for a face. Additional information on accuracy of intersection or type of interpolation may be available as an attribute associated with the cell. In all cases, in contrast to data-centric interoperability solutions, the query-based approach does not require standardized representations or file formats beyond the minimal attribute information.The examples discussed above demonstrate that an information exchange between systems can provide a high level of interoperability. However, no universal claims of model interchangeability can be made based on such arguments alone, because the notions of interchangeability and proxy require semantic models with respect to which these notions can be defined rigorously and validated. For example, a proxy relationship may require that the Hausdorff distance between a computer-represented modelMand the referenceM0is bounded by some valueτ. This would also imply that all models that represent the same point set within the Hausdorff distance ofM0are interchangeable (see also Section  5.2). Similarly, we could postulate that the precise reconstruction described above procedurally defines yet another type of interchangeability of piecewise-algebraic boundary representations. Other notions of interchangeability are useful in the context of specific applications. In this section, we consider how the query-based approach may be used to test for one of the more common and important notions of interchangeability in mechanical assembly as defined by GD&T standards  [47].The purpose of GD&T is to establish part interchangeability in mechanical assemblies. Historically part interchangeability was established first with gauges, measuring critical dimensions and functional features. Later, gauges were replaced by conceptual (and sometimes physical) master parts that embodied the specifications. With the development of rigorous mathematical foundations for dimensioning and tolerancing, these tools and notions were supplanted by a mathematical modelM0(X)that specifies functional features, dimensions, and allowable variation of form for every partXin the assembly.In modern CAD systems,M0is represented as an incidence structureMthat is typically an augmented boundary representation; the GD&T information is stored textually as a set of attributes associated with faces. The task of (physical) metrology is to determine whether a given physical partXbelongs to the equivalence class of interchangeable parts specified byM0. We do not aim to improve on the current metrology procedures; rather, our goal here is to demonstrate that such procedures are readily formulated and implemented using queries.Roughly speaking, the semantics of a given GD&T specification is determined by the face attributes inM, which designate certain faces of the solid to be datums and certain faces to be features via feature control frames. Each frame controls size, position, or form of the associated faces in terms of allowable tolerance zones that may be formally constructed from the nominal boundary representation following the rules specified by the standard  [47]. Some of the tolerance zones, (for example, position and orientation tolerances) refer to other faces ofM0that serve as datums; other frames, for example, flatness and other form tolerances, are constructed with reference to the nominal face itself. Multiple feature control frames may be associated with a face; each frame dictates conformance of the physical part to a set of tolerance zones and must be verified independently from other requirements. For additional details, the reader is referred to  [47]; note, however, that the semantics of the GD&T standards (which determine what the reference modelM0is) is continuously evolving to reflect improved manufacturing and metrology practices.A typical GD&T requirement may be verified by a two-stage procedure. First, a physical partXis sampled, or evaluated, using a coordinate measuring machine (CMM) or another measuring device. The measurements are segmented into subsets, each subset sampling a particular feature, as stipulated by the feature control frame. This evaluation process typically results in a set of segmented point clouds. In the second step, these sample measurements are then used to fit shape features, such as datum planes, cylinders, spheres, or measure size of the implied tolerance zones. Thus a shape comprehension process, where higher-level shape semantics is derived from lower level queries, produces a modelM′(X)that needs to be compared to the specificationMaccording to the formal semanticsM0(X).As a concrete example, consider how conformance to a flatness tolerance may be verified for a flat surfaceXon a physical part  [48]. The specification modelMmay be queried for its nominal geometry, type (degree 1), and flatness tolerance specified as an attribute. The validation process requires obtaining a cloud of points measured onXthat are filtered and registered with respect toMby repeated point membership and distance queries. Once the desired cloud of points is obtained it can be used as anϵ-cover of the surfaceM′(X), or to simulateM′(X)via a least-square fitting procedure. It can also be used to measure the implied width of the tolerance zone containingM′and to compare it with the size of the tolerance zone specified inM.The same conceptual two-stage process may be used to validate all other types of GD&T specifications, but the two stages are often used iteratively and adaptively, and the comprehension processes may require queries from any level in the query hierarchy. For example, when a tolerance specification forM(X)refers to a datum featureY, that datum feature must be evaluated and comprehended before featureXcan be verified. For free-form surface features, non-uniform sampling, partitioning, and adaptive registration are usually required based on differential (curvature) and distance queries onMduring the evaluation stage of the procedure  [48].Thus, for physical metrology, physical part interchangeability rests on measurements that are ultimately vetted by the semanticsM0of GD&T specificationM. When replacing a physical partXwith a specific electronic CAD modelM(X)authored in some CAD systemC, these measurements neatly correspond to queries.Our final illustration of the query-based approach to interoperability is a fully implemented query-based solution of one of the most difficult integration problems: CAD/analysis integration. Analysis systems (FEA, CFD, etc.) and CAD systems represent geometry incompatibly  [49]. The most common and industry-accepted data-centric approach to engineering analysis is to discretize the CAD geometry by a boundary-conforming mesh. This translation is computationally challenging and error-prone. The mesh must satisfy certain quality measure criteria which depend both on the type of analysis problem and also on purely geometric considerations, such as aspect ratio, element size, and so on. Fully automated generation of high quality meshes remains a research problem  [50].Instead of meshing, we adopt a different query-based principle that delegates all geometric queries to the native CAD model and all analysis computations to a separate analysis model. This principle underlies RFM  [51], WEB-splines  [52], immersed boundary  [53], and many other meshfree methods  [49] that are becoming increasingly important. The viability of this approach has been demonstrated recently by a fully automated interoperability solution for structural analysis  [54]. The approach requires (1) formal semantics of the analysis problem suitable for queries; (2) identification and implementation of queries; and (3) a system architecture supporting a query-based approach to the analysis. We describe these components briefly; see  [54] for details.SemanticsFig. 3illustrates the approach for stress analysis. The CAD model is a boundary representation and the analysis model is a linear combination of B-splines on a uniform non-conforming grid. This approach is a modified Finite Element Method (FEM) based on a generalization of Kantorovich’s method  [55,51]. Briefly, the solution of the displacementuhas the general form(1)u=∑i=1nCiηi+u∗;ηi=(ωx,ωy,ωz)Tχi,whereω1,ω2andω3are smoothed distances to the boundary in the principal directions respectively and multiply B-splinesχithat are located on a uniform grid in space. The functionu∗interpolates the boundary conditions onΓu, and vector valued coefficientsCiof basis functionsηiare to be determined. Note that the functionu∗is constructed directly from the boundary conditions, without meshing. This is done by direct interpolation based on inverse-distance weighting  [56]. Secondly, the basis functionsηiare B-splines multiplied by distance functions, so they vanish on the boundary of the CAD model where Dirichlet boundary conditions (such as fixed restraints) are applied  [52,57]. Substituting this expression foruinto a weighted residual statement, we can derive a system of linear equations as shown in  [54]. The solution is substituted into expression (1) and gives an approximate solutionu(x)of the differential equation satisfying the specified boundary conditions. Complete details of this formulation and comparison with classical FEM can be found in  [54]; here we simply note that the application semantics requiresM0to be a valid solid with well defined point membership and distance-to-boundary functions.Queries. The above formulation cleanly separates geometric and analysis computations. Required geometric queries are:–Query boundary conditions (loads, restraints, etc.)—attributes associated with elements of the boundary representation (level 6 queries).Compute distances (DF, Level 1) to the restrained faces for multiplying B-spline and distance functions; i.e., distance-to-face computations for computingu∗.Point membership test (PMC, Level 2) for sampling points in the B-spline support, for the volumetric integrals.Point generation (COVER, Level 2) for the surface integrals and visualization of the computed results.System. The above analysis suggests a computation procedure that combines the two representations (geometry and analysis) at run time using appropriate interoperating queries in order to compute the solution of an analysis problem. The CAD model is never explicitly converted into a mesh or restrained by meshing. Implementation details can be found in  [54]. A commercial-strength implementation of this procedure for structural analysis of popular Rhinoceros models has recently become available.44www.scan-and-solve.com.For concreteness, consider how the system would perform specific geometric tasks and queries required to solve the analysis problem with approximatelyO(105)basis functions. Roughly,O(106)distance and possibly point-membership computations (PMC) would be used to sample each restrained face to generate a distance field. Integration algorithms rely on adaptive subdivision in order to generate the Gauss points at which the functions will be sampled  [58]. AssumingO(105)tri-variate B-splines, this can be achieved in several ways. An efficient method would requireO(105)Box/Boundary intersections andO(105)Ray/Boundary intersections, but these queries can be also reduced to repeated PMC tests. Volumetric integration requires roughlyO(107)function and derivative samples, while surface visualization will needO(104)boundary samples. The procedure reduces to massive sampling, ideal for massively parallel implementations, and solving a linear system of equations.

@&#CONCLUSIONS@&#
The advantages of our query-based approach include overcoming some of the thorniest obstacles to the data-centric approach to CAD interoperability, namely expressing, in a neutral format, the underlying (often incompatible) assumptions, proprietary algorithms, and heuristics used by the authoring system to interpret imperfect native CAD model data.Queries overcome these barriers by making the authoring system responsible for interpreting the original models about specific properties, such as point/solid classifications for which an external semantics can be defined. The specificity, and focus, of the queries ameliorates the semantic difficulties that both researchers and standardizing bodies have labored over for many decades. More than that, based on a sound semantic foundation, we can judge correctness and accuracy of the vendor’s implementation, an aspect traditionally approached heuristically by the end user with the question “how many of my models, translated into STEP or another standard, are flawless?” and “how difficult is it to repair those models?” Other advantages include the ability to devise new queries for advances in manufacturing processes, re-implementation of queries as better algorithms are found and other platforms are introduced. Queries are agile.Long-term archival of CAD models is a serious problem that is not directly improved by the query-based approach. As platforms change over time, and as CAD systems evolve, the interpretation of CAD models may change. Queries quarantine such seismic shifts and lay the responsibility squarely where it belongs: with the authoring system. Nevertheless, some more speculative applications of queries we suggest below might be helpful for long-term archival.In Section  3 we have offered some specific queries, focusing on geometric data. The point of that exercise is to show possibilities some of which are sketched in Section  4. The queries were roughly organized by the metaphors of evaluation and comprehension, a rough measure of detail knowledge vs. global characteristics. As we mentioned in the context of metrology, both paradigms are in play all the time, although we have not found an explicit identification elsewhere. Other example applications in Section  4 illustrate the flexibility of the queries we described. More queries could be defined, adding to the scope and applicability of our approach. We conclude with several more speculative applications of queries.We can establish that a physical artifact is within given specifications using physical metrology, verifying that the part is in conformance. In modern practice, specifications are a CAD model annotated with tolerance specifications. The represented net shape could contain errors, such as erroneous draft angles, improper gaps between features, etc.; see, e.g.,  [59]. By devising a suitable specification semantics and measurement queries to validate it, we can in principle establish whether an electronic CAD model, authored in a CAD systemC, is within specification. In analogy to present metrological practice, the process establishing conformance would begin with a shape evaluation, such as sampling point measurements, and would complete the task with a shape comprehension computation that checks specific features. Certain queries might be added to the ones of Section  3 to streamline the process.Before end users upgrade their CAD systems to the next major release, many perform due diligence and re-evaluate critical archived models to ensure that they remain usable. This is of particular importance for long-term archival. But how might one ensure that the re-evaluated model was correctly re-evaluated? Complex parts and large-scale assemblies necessitate an approach that is more rigorous than relying on visual inspection. Translation into STEP and comparing the resultant STEP models is unreliable: the STEP model may itself have errors, so if the two models diverge it could be the fault of the translator or of the CAD system. Virtual metrology may be an answer. For example, we could approximate the net shape by a polyhedral model, as discussed in Section  4.1, and compare whether the so evaluated models agree, within an acceptable tolerance. Some of the model deficiencies discussed in  [59] can be revealed by a sufficiently detailed polygonization. Other deficiencies, such as flawed nonmanifold structures, can be exposed by specific queries designed to locate such flaws.In addition to eliminating the bottleneck of meshing, the query-based implementation of analysis is easily parallelizable, tolerant and robust with respect to geometric errors, noise, and small features as illustrated in Fig. 4. CAD–CAE interoperability and integration can be done with queries, without understanding an opaque CAD representation or proprietary algorithms interpreting it. The same principles apply to other system integration tasks, not only in CAD/CAM, but also in consumer, biomedical, and cloud-based applications where geometric models are increasingly becoming important. Using queries, the information inherent in a data structure can be revealed without breaching proprietary walls or requiring disclosure of trade secrets. Moreover, when the functionality of the Service Oriented Architecture (SOA) interface is standardized, a task that partitions the standardization into small, tractable segments, software subsystems can be interchanged with ease.