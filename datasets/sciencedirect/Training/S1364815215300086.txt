@&#MAIN-TITLE@&#
Evaluating the simulation times and mass balance errors of component-based models: An application of OpenMI 2.0 to an urban stormwater system

@&#HIGHLIGHTS@&#
We compared coupled OpenMI components with equivalent standard SWMM configuration.SWMM was decomposed by process and space to explore coupling performance penalties.Performance was evaluated in terms of simulation time and mass balance error.We illustrate performance penalties to consider when using component-based models.Strategies to address computational costs of component-based models are proposed.

@&#KEYPHRASES@&#
OpenMI,SWMM,Computational costs,Component-based modeling,

@&#ABSTRACT@&#
In making the decision whether to use component-based modeling, its benefits must be balanced against computational costs. Studies evaluating these costs using the Open Modeling Interface (OpenMI) have largely used models with simplified formulations, small spatial and temporal domains, or a limited number of components. We evaluate these costs by applying OpenMI to a relatively complex Stormwater Management Model (SWMM) for the City of Logan, Utah, USA. Configurations of coupled OpenMI components resulting from decomposing the stormwater model by process (i.e., runoff coupled to routing) and then by space (i.e., groups of catchments coupled together) were compared to a reference model executed in the standard SWMM configuration. Simulation times increased linearly with the number of connections between components, and mass balance error was a function of the degree to which a component resolved time series data received. This study also examines and proposes some strategies to address these computational costs.We developed the SWMMOpenMIComponent (a C# SWMM Component), SWMMOpenMINoGlobals (a modified, native C SWMM computational engine code underlying the component), and a modified OpenMI C# project. We forked the OpenMI 2.0 C# project, including the Software Development Kit (SDK), the command line interface, and the OpenMI Configuration Editor found at http://sourceforge.net/p/openmi/code/HEAD/tree/trunk/src/csharp for this study. In addition to implementing minor bug fixes to ensure that the code compiled, we implemented a new graphical user interface for creating connections with chained adapters in accordance with the OpenMI 2.0 specification, a new simulation monitoring dialog, and fixed the project file reading and writing classes to ensure that connections with adapters are read and written properly.Caleb A. Buahincaleb.buahin@aggiemail.usu.edu2015PC running Microsoft WindowsThe C# SWMM Component (SWMMOpenMIComponent) and its underlying modified native C SWMM library (SWMMOpenMINoGlobals) are freely available under the GNU Lesser General Public License (LGPL) license at https://github.com/cbuahin/SWMMOpenMIComponent. The source code for the modified version of the OpenMI C# project can be found at https://github.com/cbuahin/OpenMI under the LGPL license.

@&#INTRODUCTION@&#
Traditional model development in the earth systems modeling field has largely been characterized by monolithic codes with highly interdependent functions compiled into a single executing unit. Models developed using this approach are referred to as tightly coupled models (Sui and Maggio, 1999). This approach to model development provides a developer complete control over a modeling system and has the advantage of allowing the optimization of computational performance across an entire modeling system (Castronova and Goodall, 2013). However, tightly coupled models are often overly specialized to the specific applications for which they were developed. This can make them inflexible for applications to different use cases. Additionally, adapting to technological advancements and isolating and remediating errors can be challenging for tightly coupled models (Szyperski, 2002).Component-based modeling, or loose model coupling, is an alternative model development paradigm that has been proposed to overcome the challenges identified with tightly coupled models. It involves decomposing a complex system into smaller functional units called “components” that have specified interfaces, which allows them to be coupled together to represent a larger and more complex system. A definition that captures the critical properties a component must possess was provided by Szyperski and Pfister (1997). They defined a component as a unit of composition with contractually specified interfaces and explicit context dependencies that can be deployed independently and is subject to composition by third parties. This general trend toward the use of components for software development is part of a movement within software engineering toward the assembly of complex systems by building from readily available, reusable parts (Gross, 2005). This approach to development promises greater reusability, extensibility, and maintainability as well as faster development times and more robust applications with lower development and long-term maintenance costs (Löwy, 2003). For earth systems modelers, component-based modeling provides a way to represent the complex dynamics that describe earth processes more holistically by allowing them to experiment with different model formulations and ultimately selecting those that are most appropriate for their specific study. It also facilitates interdisciplinary studies and integrated natural resources management efforts by allowing researchers to better explore relationships between domains of different sub-disciplines that are typically studied and modeled independently (Argent et al., 1999; Moore and Tindall, 2005; Peckham et al., 2013).A key requirement for the successful adoption and use of component-based models is the definition of clear and well-defined standards, specifications, and frameworks that describe how components are to be developed to enable interoperability as well as the proper context for their use. However, the addition of a component-based modeling framework that implements these standards on top of the native computational codes of existing models is likely to introduce performance costs into a modeling system. These costs may include increased total simulation times resulting from function calls and data transformations introduced by the underlying component-based framework. Additionally, errors may arise because of the discontinuities at the connection points between components over which data is exchanged. In order for component-based modeling frameworks to be adopted and used effectively, these computational performance cost considerations must be investigated and understood under realistic modeling scenarios.An understanding of the computational costs of component-based modeling will be instructive to model developers trying to assess the tradeoffs between the two modeling development paradigms for a particular model development effort. Large computing resource demands (e.g., large total simulation times) may preclude the use of component-based modeling frameworks for complex modeling studies spanning large spatial and/or temporal domains – e.g., climate and land use change evaluations. These demands may also make it more difficult to conduct integrated natural resource management, impact mitigation, model calibration, or forecasting studies using stochastic, optimization, or data assimilation methods, which typically require many simulations of a particular model with varied inputs. Accurate model predictions are important for applications where there are elevated societal risks associated with the processes being simulated (e.g., simulation of flood risk), and an assessment of model error introduced through coupling is important in evaluating the appropriateness of model coupling for these purposes.Examples of component-based modeling frameworks and standards in the earth systems field include: the Earth System Modeling Framework (ESMF) (Hill et al., 2004), Model Coupling Toolkit (MCT) (Warner et al., 2008), Community Surface Dynamics Modeling System (CSDMS) (Peckham et al., 2013), Object Modeling System (OMS) (David et al., 2002), and the Open Modeling Interface (OpenMI) standard (Moore and Tindall, 2005; Gregersen et al., 2005, 2007). Of these frameworks, OpenMI has recently been formally adopted as an Open Geospatial Consortium (OGC) standard (Vanecek and Moore, 2014) and is becoming more widely used.In this study, we evaluated the performance of OpenMI as the number of coupled model components increases. We employed the United States Environmental Protection Agency's (USEPA) Stormwater Management Model (SWMM) to develop a reference SWMM model for the stormwater conveyance system for the City of Logan, Utah, USA. This reference model was run in its standard, tightly coupled SWMM configuration and compared to several coupled model configurations using OpenMI 2.0. To derive the coupled model configurations for comparison, the native SWMM computational code was first wrapped as an OpenMI 2.0 compliant component library. The reference stormwater model was then decomposed by process (i.e., runoff coupled to routing) and then by space (i.e., individual catchments or groups of catchments with their associated hydraulic routing elements coupled to each other). Each of the model components that were coupled was represented using the SWMM OpenMI component library that we developed. We chose SWMM because it is widely used in practice for urban stormwater studies and can simulate backwater flows, pressurized flows, flow reversals, and non-dendritic stream and pipe network layouts (Rossman, 2010). SWMM's underlying formulations and setup options are similar to many hydrologic and hydrodynamic models and is, therefore, a useful model for exploring the general challenges to be expected when loosely coupling models.Comparison of the coupled modeling configurations and the reference model was accomplished by using total simulation time and total mass balance error (TMBE) as evaluation metrics. In general, for many hydrologic, hydraulic, and hydrodynamic models, using long time-steps yields shorter total simulation times. However, longer time-steps can produce larger TMBE. We therefore sought to create an experiment that could help assess the tradeoffs between TMBE and total simulation time by varying time-steps for all the model configurations evaluated.

@&#CONCLUSIONS@&#
