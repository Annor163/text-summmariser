@&#MAIN-TITLE@&#
Implementation of density-based implicit LU-SGS solver in the framework of OpenFOAM

@&#HIGHLIGHTS@&#
Implicit steady and dual-time LU-SGS solver is implemented in OpenFOAM.The implementation codes of the sweep process in LU-SGS approach are introduced.Typical test cases are used to investigate the performance of LU-SGS solver.Convergence performance of LU-SGS solver is superior to original explicit solver.The LU-SGS solver is significantly more efficient than original explicit solver.

@&#KEYPHRASES@&#
OpenFOAM,Density-based,Dual-time,Implicit,LU-SGS,Numerical,

@&#ABSTRACT@&#
In this paper, in the framework of OpenFOAM, the density-based steady and unsteady dual-time implicit LU-SGS solvers which are termed as lusgsFoam and lusgsDualFoam are established. The key implementation details of the forward and backward sweep looping process in the LU-SGS approach are introduced. Three typical test cases, i.e. hypersonic airflow across cylinder(steady), subsonic flow over bump (steady) and supersonic forward step flow (unsteady), are used to investigate the performance of these LU-SGS solvers, and the density-based explicit solver, i.e. the rhoCentralFoam in the official OpenFOAM, is adopted as the comparison solver. Through the comparison of the numerical results for the first two steady cases, it is found that, the convergence performance of the LU-SGS solver is significantly superior to explicit solver rhoCentralFoam. Meanwhile, considering the combined effect of time step and the iteration efficiency, the LU-SGS solver, lusgsFoam is significantly more efficient than the explicit solver, rhoCentralFoam. For the third test case, i.e. the unsteady supersonic forward step flow, the spatial accuracy of the unsteady dual time lusgsDualFoam solver is a little lower than the explicit rhoCentralFoam, but overall, this unsteady implicit solver can capture the transient characteristics efficiently.convective Jacobian matrixpositive/negative Steger–Warming flux-splitting Jacobian matrixsurface elementdiagonal matrix, the lower-diagonal matrix and the the upper-diagonal matrixconvective flux vectorsviscous flux vectorsidentity matrixsets of “owner” and “neighbor” cells which are adjacent to the cell i in OpenFOAMunit normal vector at the interfaceset of cells which are adjacent to cell iresidual of complete spatial discretization term for the discretized governing equationphysical time(s)contravariant velocityvector of conservative variablecontrol volumespectral radius of the convective flux Jacobian, AcL2 norm residualpseudo time stepconvective; sound speedindex of cellinterface between cell i and jtime level at the current pseudo timeCartesian coordinatesinversetime level at the current physical timeviscoussymbol indicating directiontemporary variable

@&#INTRODUCTION@&#
OpenFOAM® is a widely spread CFD (Computational Fluid Dynamics) open source library based on object-oriented C++ language [1,2]. Utilizing its high level programming syntax and related released code details, it is convenient for the researchers to reproduce the algorithm in other references recently published or even to develop their own code according to their new idea [3–15]. OpenFOAM originated from pressure-based velocity-pressure correction mode which is devised to solve the incompressible Navier–Stokes equations [2], e.g. PISO [16,17] and SIMPLE [18,19]. After decades of development the relevant pressure-based solving strategies in OpenFOAM have already been abundant. In contrast to pressure-based mode, the density-based algorithm in the framework of OpenFOAM, which is more proper to solve the high speed (especially for the supersonic/hypersonic) compressible flow problem, appears relatively lately. Until now, compared with the commercial CFD software, e.g. Ansys Fluent [20], Fastran [21], the amount of functions of the density-based solvers in the official or the extended version of OpenFOAM is less and the efficiency of them is relatively lower.So far, the only density-based solver in the official OpenFOAM is rhoCentralFoam, of which the convective discrete scheme is the central-upwind schemes of Kurganov and Tadmor [22,23]. Another popular density-based solver is densityBasedTurbo series in the extended version of OpenFOAM, of which the convective discrete schemes are the well known Godunov type schemes, e.g. AUSM family and Roe [24]. Based on the densityBasedTurbo solvers, for the all-speed flow, the time-derivative preconditioning method with all-speed convective discrete scheme (e.g. preconditioned Roe, AUSM+up, AUSM+P) was added in Refs. [25–27]. However, the density-based solvers above are all explicit, and so their computational efficiency is much lower than the density-based implicit solvers in the commercial software.Matrix-free LU-SGS (lower-upper symmetric Gauss–Seidel) implicit scheme is widely used because of its low numerical complexity and modest memory requirements [28–30]. Using the LU-SGS algorithm, a density based solver in OpenFOAM was performed by Kim et al. [31], especially focused on steady state. The authors primarily showed the comparison results reproduced by the developed LU-SGS solver, whereas regretfully, they didn't present sufficient details associated with their program architecture within OpenFOAM. Thereby, for others in the OpenFOAM community, it's difficult to follow and improve the solver further. Until now, there is no other density-based implicit solver released in OpenFOAM or related references to declare the establishment of systematic density-based implicit solver in the framework of OpenFOAM. And so the other new implicit solver needs to be developed to further enrich the density based-solver library within OpenFOAM. The basic motivation of the present work arises from the lack of the density-based implicit solver in the framework of OpenFOAM.Meanwhile there are many potential advantages due to its characteristics of open source in the framework of OpenFOAM . The most significant advantage of the solver in OpenFOAM is that a lot of other advanced models e.g. turbulence, can be directly added in. In comparison with other analogous solvers in commercial software, it could be also further improved by other researches due to its characteristics of open source. Moreover, it natively supports the unstructured grid for complex geometry and the parallelization to accelerate the computation process.In view of lack of the density-based implicit solver in OpenFOAM and the potential advantages of the solver in OpenFOAM, the objective of this paper is to further develop the complete steady and unsteady LU-SGS solver based on the program of Borm et al. [24] and Shen et al. [26], and to show the code architecture of the program properly for futher improvement and perfection by others in the OpenFOAM community. Several test cases are selected to investigate the convergence performance and the computational efficiency of this implicit solver, as the other open source fluid solvers based on OpenFOAM lib [15,23,26,32] or other open source platforms [33–37]. These test cases could cover a wide range of benchmark examples from subsonic to hypersonic and steady to unsteady flow regimes.Governing equations in integral form is shown as follows:(1)∫Ω∂W∂tdΩ+∮∂Ω(Fc−Fv)dS=0whereWis the vector of the conservative variables,FcandFvare the vectors of the convective fluxes and the viscous fluxes, respectively, and Ω, ∂Ω and dS denote the control volume, the closed surface related to the particular control volume Ω and a surface element. The specific forms corresponding to the above variables are presented in Refs. [25,27].By using the finite volume method for each grid cell i, the temporal and spatial discretization of Eq. (1) can be expressed as(2)[ΩiΔtI+∂Rin∂Wi]ΔWin=−RinwhereRinis the so-called residual-the complete spatial discretization term, the term∂Rin∂Wiis referred to as the flux Jacobian, I is identity matrix, and the superscript n denotes time level at the current time t, with(3)ΔWin=Win+1−Winbeing the solution correction. In this paper, we only consider the contribution of the convective flux Jacobian to the term∂Rin∂Wi, i.e.(4)∂Rin∂WiΔWin=∑j∈N(i)[(∂Fc,ijn∂W)ijΔSijΔWijn]=∑j∈N(i)[Ac,ijΔSijΔWijn]where Acis the convective Jacobian matrix, N(i) is the set of cells which are adjacent to cell i. Substituting Eq. (4) for the convective flux Jacobian into Eq. (2), the following form is obtained:(5)ΩiWin+1−WinΔti+∑j∈N(i)Ac,ijΔWijnSij=−Rin.Then applying the Steger–Warming splitting scheme to discretize implicit operator above(6)Ac,ijΔWijnSij=(Ac,ij+ΔWin+Ac,ij−ΔWjn)SijwithAc±denoting the positive/negative Steger–Warming flux-splitting Jacobian matrix. Finally, the following discretization form is obtained:(7)ΩiWin+1−WinΔti+∑j∈N(i)(Ac,ij+ΔWin+Ac,ij−ΔWjn)Sij=−Rin.According to the original theory of LU-SGS scheme, the implicit operator should be divided into the diagonal matrix D, the lower-diagonal matrix L and the the upper-diagonal matrix U. For this purpose, Eq. (7) could be deduced further as follows:(8)ΩiΔWinΔti−∑j∈L(i)(Ac,i−Sij)ΔWin+∑j∈U(i)(Ac,i+Sij)ΔWin−∑j∈L(i)(Ac,j+Sij)ΔWjn+∑j∈U(i)(Ac,j−Sij)ΔWjn=−Rin.The split convective flux Jacobian could be evaluated as follows:(9)A±ΔSij=12(AcSij±ΛcI)Λc=(|V|+c)Sijwhere the contravariant velocityV=U•nij=nxu+nyv+nzw, with the unit normal vectornij=nxi+nyj+nzkcorresponding to the face area vectorSij, and Λcrepresents the spectral radius of the convective flux Jacobian Ac. Then substituting Eq. (9) into Eq. (8), the diagonal matrix D could be written as(10)Di=ΩiΔtiI+∑j∈(L(i)+U(i))ω2Λc,ij.Meanwhile,Li=−∑j∈L(i)(Ac,j+Sij), with L(i) being the set of “owner” cells which are adjacent to the discrete element i(cellI), i.e. j ∈ L(i);Ui=∑j∈U(i)(Ac,j−Sij), with U(i) being the set of “neighbor” cells which are adjacent to the discrete element i(cellI), i.e. j ∈ U(i).In OpenFOAM, the superscript “+” and “−” denote the positive and the negative direction corresponding to the face normal vectornij=nxi+nyj+nzk. In other words, for each interface ij, the positive variable is directed from owner cell to neighbor cell and the negative variable has the reverse direction. Specially, it is noted that, if j ∈ L(i),Sijis the inward-pointing face area vector for cell i, so it means that, according to the Gauss theorem, the sign of the second and forth implicit operator term in the left hand of Eq. (8) should be negative.Finally, Eq. (8) could be transformed into(11)(D+L)D−1(D+U)ΔWn=−Rn.The solving process is divided into two steps: forward sweep and backward sweep, where forward and backward sweep processes are directly solving Eqs. (12) and(13), respectively,(12)(D+L)ΔW*=−Rn,(13)(D+U)ΔWn=DΔW*.Dual time-stepping approach is very often employed for the unsteady flow. In this approach, pseudo-time term, i.e.ΩiΔWi*Δτ, should be added in as follows:(14)ΩiΔWilΔτ+Ωi3ΔWil+3Wil−4Win+Win−12Δt+∑j∈N(i)(Fc,ijl+1−Fv,ijl)Sij=0with(15)ΔWil=Wil+1−Wilwhere superscript l denotes the current pseudo-time level. Similar as the discretization Eq. (2) for the physical time implicit scheme, Eq. (16) is obtained:(16)[Ωi(1Δτ+32Δt)+∂Ril∂Wil]ΔWil=−(Ri*)lwhere the residual term for dual time-stepping approach is(17)(Ri*)l=Ril+(Ωi3Wil−4Win+Win−12Δt).The discretization procedure to solve Eq. (16) is similar as that shown in Section 2.3.For the LU-SGS scheme, the sweeping process could be conveniently implemented. Eqs. (12) and (13) are transformed into the following form:(18)ΔW*=D−1(−Rn−LΔW*),(19)ΔW=ΔW*−D−1(UΔW).As mentioned above, Eq. (18) is related to the forward sweep that LΔW* is known in advance, and in OpenFOAM, it is equivalent to that, corresponding to the cell i(cellI) to be solved, the solutions of the variable at its adjacent owner cells are already known. Eq. (19) is related to the backward sweep that UΔW is known beforehand, and in OpenFOAM, the solutions of the variable at its adjacent neighbor cells are known in advance.Subsequently, the detail of the implementation of LU-SGS scheme in OpenFOAM is presented, taken the simple 2-D structured 3 × 3 mesh system, shown in Fig. 1. Fig. 1(a) shows the cell index i or cellI, and Fig. 1(b) shows the face serial index number faceI. Tables 1and 2 present mapping relationship between the internal face faceI (not including the boundary faces) and its adjacent owner and neighbor cells.Fig. 2 shows the implicit operator matrix (diagonal matrix D, the lower-diagonal matrix L and the upper-diagonal matrix U) for the 3 × 3 mesh in Fig. 1.Algorithms 1–3 show some details corresponding to the LU-SGS scheme in OpenFOAM in brief. Firstly, the lists of owner and neighbor cell index, i.e. cellI lists in Tables 1 and 2, should be obtained, as shown in Algorithm 1. These two lists are the basis to get cells adjacent to each cell cellI.Algorithm 2 shows the key ingredient of the LU-SGS scheme looping in OpenFOAM, i.e. definition of the Lower matrix, and performance of the forward sweep.The process corresponding to the backward sweep is similar to the forward sweep as shown in Algorithm 2. It is noted that the reverse cell looping command forAllReverse substitutes the positive cell looping command forAll, as shown in Algorithm 3.Fig. 3 shows the block diagram of forward sweeping process in the framework of OpenFOAM.

@&#CONCLUSIONS@&#
