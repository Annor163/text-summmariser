@&#MAIN-TITLE@&#
Iterated local search using an add and delete hyper-heuristic for university course timetabling

@&#HIGHLIGHTS@&#
Add and delete operations are encoded as a list/string of integers (ADL).An effective hyper-heuristic approach operating with ADLs is proposed.Low level heuristics perform search over the space of feasible solutions.Proposed approach produces new best solutions to some instances.Proposed approach achieves generality across two variants of the timetabling problem.

@&#KEYPHRASES@&#
Hyper-heuristic,Iterated local search,Add–delete list,Methodology of design,Educational timetabling,

@&#ABSTRACT@&#
Hyper-heuristics are (meta-)heuristics that operate at a higher level to choose or generate a set of low-level (meta-)heuristics in an attempt of solve difficult optimization problems. Iterated local search (ILS) is a well-known approach for discrete optimization, combining perturbation and hill-climbing within an iterative framework. In this study, we introduce an ILS approach, strengthened by a hyper-heuristic which generates heuristics based on a fixed number of add and delete operations. The performance of the proposed hyper-heuristic is tested across two different problem domains using real world benchmark of course timetabling instances from the second International Timetabling Competition Tracks 2 and 3. The results show that mixing add and delete operations within an ILS framework yields an effective hyper-heuristic approach.

@&#INTRODUCTION@&#
Hyper-heuristics are (meta-)heuristics that choose or generate a set of low level (meta-)heuristics in an attempt to solve difficult search and optimization problems [1,2]. Heuristics can be used to search the solution space directly or construct a solution based on a sequence of moves. Hyper-heuristics aim to replace bespoke approaches by more general methodologies with the goal of reducing the expertise required to construct individual heuristics [3]. In most of the previous studies on hyper-heuristics, low-level heuristics are uniform, i.e. they are either constructive or perturbative (improvement) heuristics [4].Educational timetabling problems are common and recurring real-world constraint optimization problems which are known to be NP-hard [5–7]. An educational timetabling problem requires scheduling of a set of events using limited resources subject to a set of constraints. There are a range of educational timetabling problems, such as examination timetabling and high school timetabling. This study focuses on the university course time-tabling problem, which can be further categorized as either post-enrollment problems, in which the student enrollment is available before the timetabling process, and curriculum-based problems in which the curricula of the students are known, but not the student enrollment [8]. There are two main types of constraints in a timetabling problem: hard and soft constraints. The hard constraints have to be satisfied in order to obtain a feasible solution, while violations of soft constraints are allowed, since they represent preferences. It is still the case at some universities that timetables are constructed by hand. Considering the inherent difficulty of generating high-quality feasible timetables which violate few soft constraints, it is usually desirable to automate timetable construction to improve upon solutions obtained by human experts [9]. However, automation of timetabling is not an easy task, since designing an automated method frequently requires a deep knowledge of the problem itself as well as the particular characteristics of the instance to be solved. This knowledge, in most cases, is not readily available to the typical researcher/end-user.In this study, we describe an iterated local search (ILS) algorithm hybridized with a hyper-heuristic that generates heuristics based on add–delete operations to solve examination and university course timetabling problems. Re-usability, modularity and flexibility are some of the key features of the proposed approach. To evaluate the generality of the generation hyper-heuristic, it is tested on a range of problem instances across two different domains; namely, post-enrollment university course timetabling and curriculum-based university course timetabling, without modification of the underlying solution framework.Although the problem domains we investigate are timetabling problems, each domain exhibits differing characteristics, particularly with respect to the complexity of the real-world constraints. This is the main reason why a recent competition has used two tracks. The International Timetabling Competition series was organized to create a common ground for the cross-fertilization of ideas, bridging the gap between theory and practice and creating a better understanding between researchers and practitioners in this field [8]. The second competition in the series (ITC2007) was on educational timetabling, containing an examination timetabling track and two separate tracks for post-enrollment and curriculum-based university course timetabling [8]. We have investigated the performance of the proposed approach on the last instances. The results show that our approach is promising.This paper is organized as follows. Section 2 provides an overview of educational timetabling problems, particularly university course timetabling. This section also discusses solution methodologies. Section 3 discusses the specifics of the solution methodology including the relevant data structures and the add–delete representation. Section 4 summarizes the experimental results. Finally, Section 5 presents the conclusions and future work.

@&#CONCLUSIONS@&#
This study describes a novel generative hyper-heuristic entitled ‘add–delete Lists’ and details their application across two different problem domains that is Tracks 2 and 3 of the 2007 International Timetabling Competition. An Add–Delete list is a ‘ruin-and-recreate’ sequence which is applied to a solution representation.The timetabling domain-description used here employs a layer of generality called Methodology of Design. This layer represents problem-specifics as a collection of generic structures, such that it can operate across competition tracks without modification (beyond the inevitable translation of problem-specific constraints).The ADL approach achieved competitive results when compared with the five papers which report state of the art results in Tracks 2 and 3 and in some cases reported best known results (more specifically in Track 3). It is important to note that none of the track winners are the same, due essentially to the existence of the ad hoc adaptation of the winning algorithms to specific domains. Conversely, our proposed approach can be applied to both domains and our results were obtained without requiring specific adaptation to a specific competition track. This demonstrates that the ADL approach is genuinely a hyper-heuristic, i.e. competitive across problem types without requiring domain-specific knowledge to be manually embedded in the solver.With regard to future work, the next step is to experiment with a dynamic or self-adaptive mechanism for the ADL length. In addition, it might be beneficial to investigate a new implementation of the window list used by the ILS in which additional ADL traits are stored. In this paper only two traits (appearance of specific events and event order) were used. In future implementations, the ADL length and the specific CSP heuristic used to reinsert an event could provide more information, allowing a more-informed ADL construction at each search step.