@&#MAIN-TITLE@&#
A rule-based expert system for inferring functional annotation

@&#HIGHLIGHTS@&#
Functional annotation aims to predict the biological function of DNA sequences.Automatic functional annotation is faster but less accurate than the manual one.INFAES is a rule-based expert system for functional annotation.INFAES combines biological knowledge with Bioinformatics heuristics.INFAES outcome is comparable to the best ranked tools in the CAFA experiment.

@&#KEYPHRASES@&#
Functional annotation,Rule-based expert system,Bioinformatics,

@&#ABSTRACT@&#
Functional annotation is the process that assigns a biological functionality to a deoxyribonucleic acid (DNA) sequence. It requires searching in huge data sets for candidates, and inferring the most appropriate features based on the information found and expert knowledge. When humans perform most of these tasks, results are of a high quality, but there is a bottleneck in processing; when experts are largely replaced by automated tools, annotation is faster but of poorer quality. Combining the automatic annotation with expert systems (ESs) can enhance the quality of the annotation, while effectively reducing experts’ workload. This paper presents INFAES, a rule-based ES developed for mimicking the human reasoning in the inference stage of the functional annotation. It integrates knowledge on Biology and heuristics about the use of Bioinformatics tools. Its development adopts state-of-the-art methodologies to facilitate the acquisition and integration of new knowledge. INFAES showed a high performance when compared to the systems developed for the first large-scale community-based critical assessment of protein function annotation (CAFA) [1].

@&#INTRODUCTION@&#
One of the most challenging tasks of Genomics is predicting the biological function of deoxyribonucleic acid (DNA) sequences, a procedure called functional annotation. Its outcome has to be as reliable and accurate as possible, as it will be used in further researches, including to predict new annotations.The functional annotation is currently a complex, labor-intensive, and time-consuming task for experts. It requires a high degree of expertise to use the proper tools, algorithms, and databases in order to collect relevant information, and to make the pertinent decisions. The amount of genomic data that has been produced, especially in the last years, makes this manual approach feasible just for small data sets or reference genomes. Besides, it may produce conflicting interpretations of the analysis [2].The alternative automatic approach uses tools able to process large volumes of data consistently without (almost any) user intervention. Its main drawback is that tools only use limited expert knowledge, so their results are less precise than those of human experts. For instance, only a few tools, like Figenix [3], take orthology knowledge into consideration, what increases the reliability of the annotation. Moreover, tools usually lack the flexibility to adapt to different needs and an ever evolving environment. For example, many of them restrict the kind of query sequences they support (e.g., sequences inside the genomic context [2] or bacterial sequences [4]), and they integrate only a limited and fixed set of data sources to search [5].A possible way to preserve the quality of the manual annotation without running into its drawbacks is applying expert systems (ESs) to emulate the expert reasoning in certain parts of the process. Among the variety of ESs for annotation [6], rule-based ones [7] are particularly well-suited because of several reasons. First, rules are a natural way of representing knowledge about procedures and heuristics [7], as that applied to a large extent in functional annotation. Second, there are multiple knowledge elicitation techniques [8] to guide rule specification with experts. Third, since rules are more easily understandable by experts than code, their usage promotes system evolution through user involvement [9].Despite these advantages, existing rule-based ESs (RBESs) for annotation present several issues. Their development is not usually related to standard good practices. Literature does not report the application of any engineering methodology, so key decisions are neither explained nor documented. Moreover, they frequently rely on ad-hoc technologies poorly supported. For instance, there is no documentation on the development approach of the Ensembl Analysis Pipeline (EAP) [2], and it uses its own inference engine. This way of working makes systems difficult to maintain and evolve. Regarding the traditional limitations of annotation tools previously mentioned, RBESs facilitate their solving, but designers need to address them explicitly. For instance, EAP [2] and Figenix [3] are designed to integrate other tools, but only considering dataflow management. There are no guidelines, either general for RBESs or particular for these systems, on how to integrate the new tools in their ESs regarding knowledge, so this integration relies on designers’ expertise.To address these issues, this work proposes a RBES for inferring the functional annotation of DNA sequences called INFAES. INFAES is part of a wider research project called MASSA, a multi-agent system (MAS) to Support functional Annotation. This MAS is a community of Intelligent Agents (IAs) [10] that work together. They implement a flexible pipeline of Bioinformatics tools that collects candidates and clues for the prediction task. Then, INFAES uses this information to evaluate the candidates and infer the most likely function.Although there are already some ESs and RBESs for this task, INFAES was specifically developed to overcome several of their limitations. In particular, it provides an integration of knowledge and analyses previously scattered among different tools, and mechanisms (i.e., an architecture and development guidelines) to facilitate further evolution of the system in order to keep it up to date with emerging research.As for the annotation process, INFAES is capable of assigning accurate functional annotations to DNA sequences regardless of the species, and whether they are or not complete genomes. Moreover, INFAES rules comprise knowledge that other systems do not consider, what increases the annotation effectiveness. Its rules are able to mine additional data related to the information from the pipeline, and compare the candidate annotations to come to a conclusion. These comparisons apply heuristics that integrate analysis variables from the pipeline tools (e.g., e-value, bit score, identity, and homology likelihood), and Biological knowledge (e.g., the orthology relationship between sequences, the domains and families, and the level of conservation of important sites). This knowledge has been extracted from several sources [11], and pursues modeling the Biologist expertise at the inference stage. These biological concepts are explained later in Section 2.1.Since INFAES has a special focus on evolution, its architecture and development consider requirements for maintenance. These have not been explicitly taken into account in related works, but they must be in order to keep tools up to date in a domain with a fast changing pace.INFAES knowledge is structured around the computation of scores and their interpretation. This facilitates considering new knowledge. It appears as new sets of rule to compute additional scores, that specific rules combine with existing ones.Addressing evolution is not only an issue of system design. The development process also has to consider it. INFAES improves this aspect compared to existing tools for annotation. It follows CommonKADS [12], a well-known methodology for ESs, to build its Knowledge Base (KB) and document the process [11]. Moreover, it adopts widespread technologies, such as Java and Drools [13], which reduces development costs. These decisions allow designers and experts to focus on eliciting and managing the specific domain knowledge required for the annotation process, while facilitating the examination and validation of results.The rest of the paper discusses these aspects in detail. Section 2 presents the background of the functional annotation problem. MASSA is briefly described in Section 3, while INFAES and the methodology used to tackle the problem are introduced in Section 4. Section 5 exemplifies the annotation and evaluates the system performance. The state of the art in systems for annotation is reviewed in Section 6. Finally, Section 7 discusses conclusions about the work and its results.

@&#CONCLUSIONS@&#
This paper has presented INFAES, a RBES for functional annotation. Functional annotation is currently a challenging process that involves the use of specialized tools and databases, and demands intensive expert participation. Support software tools for it present common limitations. On one side, there are those related to the annotation process, including the use of only part of the knowledge potentially useful for the task, and their limited scope that precludes annotating certain query sequences. On the other side, the issues pertaining to their development, such as the absence of documented engineering approaches supporting it, and the difficulties to maintain and evolve these systems. To address these problems, INFAES works on its development approach, design, and knowledge, with this paper focused on this last aspect.INFAES presents a KB design intended not only to produce accurate annotations, but also to facilitate the gradual integration of the knowledge elicited from experts. Its organization around scores promotes creating groups of rules to address specific areas of knowledge, and combine their results through additional rules directly related to the decision process.INFAES also brings improvements in the methodological approach to build ESs for annotation. It applies existing state-of-the-art methodologies to build both the embedding MAS (with INGENIAS [36]), and INFAES (with CommonKADS [12]) (see [11]). The content of the KB combines knowledge from different tools and experts that was extracted using knowledge elicitation techniques. The application of these methodologies to build the system facilitates its systematic study and maintenance, and thus its evolution according to users’ needs and new knowledge and technologies.Regarding its design, INFAES is part of a wider functional annotation project called MASSA. MASSA implements a flexible pipeline of Bioinformatics tools to gather data related to potential candidates for the annotation, and encapsulates INFAES for the inference stage. This architecture provides flexibility to integrate new tools and the required knowledge to manage them.INFAES performance was validated and assessed using the metrics described in CAFA [1]. The 866 sequences from this large-scale experiment were processed with MASSA and INFAES, and the results compared to the 10 top-performing algorithms described in CAFA. INFAES got a Fmaxabove 0.8 (out of 1) for the two GO categories tested (BP and MF), outperforming the best algorithms presented in CAFA, what is a very encouraging outcome.INFAES, and also the overall MASSA, are ongoing work, and there are several open issues that could improve them. Regarding INFAES, immediate work is targeted to enrich the KB with additional information. For instance, specific rules that take into account the different types of protein could provide more accurate annotations for some queries. This growth in the number of rules, along with different criteria to guide the annotation process, will lead to incorporate different types of InferenceAgents, each one containing instances of INFAES with different KBs. These agents will negotiate in order to suggest an agreed annotation. Research in agents have already addressed these negotiation issues [55]. We also intend to add semi-supervised learning to the ES, allowing it to calibrate scores according to the users’ feedback. At the level of MASSAPipe, more resources can be added to feed INFAES with additional evidences. Examples of these resources are: SIFT [56], to identify conserved residues that affect function; TMHMM [57], for the prediction of transmembrane regions; and SignalP [58], for signal peptide prediction.