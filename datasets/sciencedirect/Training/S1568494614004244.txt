@&#MAIN-TITLE@&#
Highly secured chaotic block cipher for fast image encryption

@&#HIGHLIGHTS@&#
Highly secured block ciphering with high encryption speed.Combination of chaos and linear Diophantine equation (LDE).Fast and dynamical generation of large permutations.Exploitation of the true accuracy of the computer.Adaptability of the cipher to any type of chaotic system.

@&#KEYPHRASES@&#
Chaos-based permutation,Image encryption,Information security,Linear Diophantine equation,

@&#ABSTRACT@&#
The real-time constraint for the codec execution and high security level protection are the two most important multimedia encryption requirements. In this paper, a method is presented for the fast generation of large permutation and diffusion keys, which are based on the sorting of the solutions of the linear Diophantine equation (LDE). The coefficients of the LDE are integers which can be dynamically generated from any type of dynamical chaotic systems, as the maximum precision of the computer can be used for the conversion of floating-point chaotic values into integers. This technique yields a fast image block encryption algorithm in which the security level is considerably strengthened. Although the architecture used in this cipher is the one for which the permutation and diffusion are considered as two separate stages, the generation speed of permutation and diffusion keys allows reducing the computational time required by the duplication of the image-scanning stage during the permutation and diffusion operations.

@&#INTRODUCTION@&#
Data encryption is of paramount importance for any effective computer security system. This can be justified for example by the fact that in today's world much of our personal information and financial transactions are processed via the Internet. One of the main reasons why encryption is important is to do with the way that sensitive information is sent via the Internet. Encryption is typically separated into two components: the encryption algorithm and the encryption/decryption key. In symmetric key ciphers, the same key is used for both the scrambling and unscrambling of the exchanged data.There are numerous encryption methods available today [1–6]. The factors that will determine which one is the most appropriate include: the level of security; the cost; the execution speed and performance issues. So, encryption algorithms modify the information entropy by creating new words or readjusting the probabilities of the existing words in the case the whole alphabet is already used. Nowadays, data encryption based on chaotic systems is useful for digital multimedia encryption whilst exhibiting the required enhanced sensitivity to initial conditions and system parameters (sensitivity of the encryption key) [7–16]. While encrypting is important, the encryption algorithms should meet some of the specific multimedia encryption requirements, such as: the real-time constraint and high robustness against all kinds of known attacks. The time to “crack” or decrypt an algorithm by the attack is also an important factor that has to be taken into consideration.The main principle in the existing symmetric ciphers consists of shuffling the positions of the image pixels and thereafter diffusing the relationship between the original and ciphered images. However, the difference between these algorithms resides in the technique used for the generation of the permutation and diffusion keys. In the case of the chaotic stream ciphers, the confusion and diffusion processes are dynamically updated as the dynamical system is iterated. The generation of the permutation key in such a cipher is computationally of low cost and the confusion-diffusion step should be repeated in order to attain a higher level of security.Although chaos-based encryption appears to be a promising technology today, the long computational time required for the generation of the permutation and diffusion keys remains its main limitation and hence of wider its adoption. Performing at the same high security level and fast encrypting is then the actual challenge in chaotic ciphering. Recently there were proposed some fast encryption schemes [17–20]. In all of these algorithms, the permutation and diffusion are as usual two separate and iterative stages and they both require scanning the image in order to obtain the pixel values. Thus, during the encryption process, the image is scanned twice per round of the permutation-diffusion operation. To avoid duplicating this effort, Y. Wang et al. proposed to combine the permutation and diffusion operations [21] and in thus doing so, obtained a higher encryption speed. Many other algorithms presenting both higher encryption speed and security level have been proposed [22–30].In our previous work [31], we proposed an image encryption algorithm based on the use of chaotic sequences sorted by ascending or descending order. The permutation key was defined as a distribution of indices derived from the sorting. This technique allowed taking advantage of the true accuracy of the computer used for chaotic sequence generation. The method also presented the advantage that it could be combined with any type of chaotic system. According to the execution time, the proposed scheme could guarantee real-time encryption. However, the initialization phase was not made dynamic to increase the complexity of the algorithm. Indeed, the generation of large permutation from the chaotic system was extremely time-consuming, due to the large amount of integrations/iterations. This process was necessary for generating chaotic numbers and the conversion of floating-point chaotic values into integers. As a consequence, it was necessary to make more than one round for the previous cipher to be of a higher level of security.In this paper, we propose a new technique for the fast generation of large permutation and diffusion keys, by combining chaotic system with LDE. Instead of iterating the chaotic system for all the pixels of the plain-image, only two coefficients of the LDE are required from the chaotic system. The large permutation and diffusion keys are derived from the ascending/descending sorting of the general solutions of the corresponding LDE. The main objective of such a work is to reduce the computational time required for the generation of large permutations in the actual fast ciphers, while maintaining a higher security level.The rest of the paper is organized as follows: the algorithm is proposed in Section 2; the results are discussed in Section 3 and the conclusions are made in Section 4.The encryption scheme we are proposing presents traditional steps such as confusion and diffusion. However, the way these operations are carried out typically depends on the combination of the LDE and the chaotic system. Below are presented some of the operations, followed by the whole algorithm.The first important operation is the generation of permutation and diffusion keys. In chaotic ciphers, this operation requires the integration (iteration) and conversion of floating-point values into integers. When the length of the permutation key is large, this generation becomes computationally time consuming. The idea presented in this paper suggests generating large random permutations from the LDE, whose coefficients are chaotically time dependent, as described below.The LDE is defined by:(1)ax+by=cwhere a, b and c are natural integers. The general solution (x, y) of (1) is such that:(2)x(u)=x0+bΛuy(u)=y0−aΛu(x0, y0) is a particular solution; Λ is the greatest common divisor (gcd) of a and b; andu∈ℤ. Depending on u the values taken by x and y are integers. For the set of solutions to be bounded, the following equation is useful:(3)x(u)=x0+bΛumod(v)y(u)=y0−aΛumod(v)wherev∈ℤ.Let X={x(u+i)} and Y={y(u+i)}, i=0, 1, ⋯L−1, be the sets of the first L values of xnand yn. The ranking of the values in X and Y (values ranged between 0 and p) depends on the LDE solution parameters a, b, v and u. Let also IXand IYbe the distribution of indices obtained by sorting sequences X and Y by ascending, like in sequences X and Y the ranking of values (ranged from 0 to L−1) in IXand IYdepends on the parameters of the LDE solution. Determining sequences X and Y as well as corresponding distributions of indices IXand IYcan be seen as a random process when parameters a, b, u and v are generated from a chaotic system. For a=7, b=11, c=1, u=0 andv=8for example, the first height values of x are given inX=5,0,3,6,1,4,7,2and the corresponding distribution of indices derived from the ascending sorting of X is the 8-uplet IX=(1,4,7,2,5,0,3,6). Such a permutation is shown in Fig. 1.The permutation key IZ=IX(IY) is derived from the distributions of indices generated as shown above. At the same time, the diffusion kernel is defined as XM=Xmod256. The main advantage of such a technique is its high speed for the generation of large permutation keys.Indeed, coefficients a and b of the LDE are derived from a chaotic system. By the chaotic scheme of these coefficients, we obtain a pseudorandom sequence of the distribution of the positions (indices) of LDE solutions. For example, if the set of the values of the variable x is such that:(4)X={x1,x2,………xi……xN}The initial distribution of values in the sequence X is such that:(5)I0=(1,2,………i……N)N being the length of X. In the sequence X, values are randomly distributed. Sorting the sequence by ascending order, we obtained a new sequence XSin which the indices (positions) of the values are also randomly distributed:(6)XS={x8,x3,………,xN,……,xi}with x8<x3<………<xN<……<xi.Let IXbe the sequence containing the position of the values of I0 in the sequence XS, from (6), IXcan be expressed as follows:(7)IX=(8,3,………,N,……,i)The ranking of values in IXdiffers from a distribution to another and the ranking of the distributions of indices IXitself depends on the chaotic sequence (depends on the initial conditions and the parameters of the chaotic system). Since chaotic systems are very sensitive to initial conditions, it is not possible to have identical distributions as the chaotic sequences never pass through the same states. In this point of view, the set of IXcan be seen as a random variable while each distribution IXitself can be also seen as a random variable. So, the whole image can be divided into sub-images and the number of probable events depends on the length of IXand the total number of sequences that are combined for processing the whole image, as the permutation key IZis updated for each sub-image. For instance, if q distributions of IXof length N are used for the encryption of the whole image then the total number of possibilities is equal toN!q. In Fig. 2is shown an example of ten chaos controlled permutation keys, where a and b are randomly obtained from the logistic map with two slightly different initial conditions.The scheme we are proposing can be combined with any type of chaotic system [31]. But for the rest of the paper, we will consider as the chaotic system, the piece-wise linear chaotic map (PWLCM), described by the following equation:(8)gn=F[g(n−1)]=gn−1×1r,if0≤gn−1<rgn−1−r×10.5−r,ifr≤gn−1<0.5F1−gn−1,if0.5≤gn−1<1where r is the control parameter and g(0)=g0 the initial condition. The PWLCM is known to be chaotic when its control parameter r is such that 0<r<0.5 and its initial condition chosen such that 0<g0<1 [33].The technique used for the permutation of pixels is based on the ascending or descending sorting of the solutions of the LDE. The original image Iois reshaped into a one dimensional signal of length L which itself is divided into q sub-sequences (sub-images) of length N. For each sub-image, the coefficients a and b of the LDE are generated from the chaotic system (for which the initial condition and the control parameter are given). Solutions of the LDE are then sorted as stated above for obtaining a permutation key, IZ=IX(IY). To a sub-image Z is applied the distribution IZ. Values in Z were initially ranked by ascension of the corresponding indices:(9)Z=Z(I0)After permuting the pixels in Z by IZ, we obtain a new sequence T such that:(10)P=Z(IZ)Sequence P corresponds to the permuted image and the reconstruction of Z cannot be made unless the distribution IZis determined.The permutation of pixels does not modify the entropy of the image, but it reduces the correlation between adjacent pixels. Increasing the image entropy requires the construction of new words in the image. This result is performed by the diffusion step.Pixel masking is performed by the XOR logical function. This operation is realized by using the sequence X of the LDE solution. Before using X for pixels masking, it is necessary to bring back values greater than 255 among [0,255], according to the image format. The set XMof values used for pixels masking is thus given by:(11)XM=Xmod256Like the permutation kernel, the masking kernel is also updated for each sub-image.In order to increase the randomness in the entire ciphered image as well as the sensitivity of the cipher to small changes in the plain image, pixels should pass from a ciphered sub-image to another. For this purpose, an image dependent initial condition c0kis determined. This initial condition is used for the generation of two chaotic integers which are used as parameters a and b of the LDE. A permutation IZtof length L (equal to the length of the whole image) is thus deduced from the LDE for shuffling the 1-D image as a whole. The dependence on the image of the initial condition of the chaotic system is expressed as follows:(12)c0k=∑j=0L−1P(j)255×Lwhere P is the 1-D image already confused and diffused, L is its length, k is the rank of the round and c0kis an internal key (the initial condition of the chaotic system). In this step, the control parameter of the chaotic system is the one used for the generation of IZin Section 2.2.Choosing a large number of rounds makes it progressively exponentially difficult for any statistical attack, as the number of possible combinations of the permutations npexponentially increases:(13)np=(N!)k⋅LNk being the number of rounds andnw=L/Nthe number of sub-images, also equal to the number of permutations combined per round. This number of possibilities suggests a high robustness of the proposed scheme against statistical attacks.A key of 128 bits or 256 bits is required for symmetric-key cryptosystems [32] for more security. We used an external 256-bit key (s1s2⋯si⋯s32, where Siare ASCII symbols) to derive initial conditions and control parameters of the chaotic system. The key is divided into two blocks of 16 ASCII symbols for the determination of the system control parameter and the initial condition respectively. For each block of 128 bits (corresponding to 16 ASCII symbols), we defined:(14)W=∑i=0152ii+1Kiwhere Kiare values (0–255) of ASCII symbols. Siand W is the value from which the control parameters and initial conditions are deduced, depending on the chaotic system. By considering the possible maximum value of ASCII symbols equal to 255 and the upper limit of the weight coefficient2ii+1equal to 2, the value of W presents an upper limit Wr=8160, which is used for its normalization. The control parameter and the initial condition g(0)=g0 are deduced from the key as follows:(15)r0=0.1934569872365r=r0+W/(10⋅Wr)g0=W/Wrwhere r0 is a constant chosen such that the behavior of the PWLCM remains chaotic for any key derived from (15), W is defined by (14).Fig. 3presents the flowcharts of the proposed encryption and decryption algorithms, whose algorithmic steps are described by Algorithm 1 and Algorithm 2, respectively.Algorithm 1 (Encryption):1.Define a window of size m×n pixels which could match a part or the whole plaintext image and reshape it so as to obtain a 1-D signal of length N=m·n;Choose a 256-bit key for determining the initial condition and the control parameter of the chaotic system;Generate two chaotic values from the initial condition and the control parameter;Digitize (with p bits) the chaotic values for obtaining two integers, namely a and b (the other LDE parameters being u=0 andv=Nfor the x solution andv=xfor the y solution);Generate X and IZ=IX(IY) from the general solution of LDE whose parameters are a, b, u and v;Shuffle the pixels of the sub-image with IZ;Mask the pixels of the shuffled sub-image with XM=Xmod 256;Update the sub-image to be processed and consider the latest value generated by the chaotic system in step 3 as the new initial condition;Repeat steps 3 to 8 until the whole image is processed;Shuffle the whole image with a LDE permutation key IZtgenerated from two image dependent chaotic integers, as described in Section 2.4;Repeat steps 3 to 10 for k times;Reshape the 1-D signal into the 2-D image (ciphered image).Algorithm 2 (Decryption):1.Reshape the 2-D ciphered image into a 1-D image;Define a window of size m×n pixels same as in the encryption algorithm;Choose a 256-bit key for determining the initial condition and the control parameter of the chaotic system;Generate2k⋅nwchaotic values from the initial condition and the control parameter, where k andnware respectively the number of rounds and the number of sub-images, and digitize (with p bits) these values for obtaining a vector C of2k⋅nwintegers and seti=k⋅nw;Generate the image dependent permutation key IZtas described in Section 2.4 and shuffle the whole 1-D image, split it intonwsub-images and consider the sub-image of rankj=nw;Generate X and IZ=IX(IY) from the general solution of LDE whose parameters are a=C(2i−1), b=C(2i), u and v as in the encryption algorithm;Mask the pixels of the sub-image j with XM=Xmod 256;Shuffle the pixels of the masked sub-image with IZand decrease i and j by one step;Repeat steps 6 to 8 until the whole image is processed;Repeat steps 5 to 9 for k times;Reshape the 1-D signal into the 2-D image (deciphered image).A good encryption scheme should resist any kind of known attacks: known-plaintext, ciphertext-only, statistical, differential and brute-force attacks. In this section, some security analyses results on the proposed cipher are presented, including some important ones like: key-space analysis, statistical analysis, differential analysis, number of pixel change rate (NPCR) and unified average changing intensity (UACI) for one pixel difference in the plain-text image. Some plain-images of size 512×512 pixels with 256 gray levels were selected for the evaluation of the proposed algorithm. The statistical properties of chosen images are summarized in Table 1.For the efficiency of the proposed scheme to be verified, we used two encryption sub-keys T1=azertyuiopqsdfgj and T2=azertyuiopqsdfg0 respectively for the determination of the control parameter and the initial condition, thus forming a 32 ASCII symbols key T1T2: (azertyuiopqsdfgjazertyuiopqsdfg0).A 256-bit key corresponding to 32 ASCII symbols is considered. The key space is the number of sets of 32 ASCII symbols that can be built. In hexadecimal representation, the number of different combinations of secret keys is equal to 2256. By considering only symbols “a–z”, “A–Z” and “0–9”, the scheme presents 6232=2.27·1057 secret keys, which is sufficiently large for resisting all presently known kinds of brute-force attack.High key sensitivity is generally required for preventing adaptive chosen-plaintext attacks and linear cryptanalysis. The key T2 was partially changed to perform the test on the sensitivity of the key with the proposed approach. The sensitivity of the key is then performed according to the following steps:i.First the image of Lena is encrypted by using T2a=azertyuiopqsdfg0 as key for initial condition;Then the least significant bit of T2 is changed, so that the initial key becomes T2b=azertyuiopqsdfg1 in this example, which is used to encrypt the same image of Lena;Finally, the above two ciphered images, encrypted by the two slightly different keys are compared.The number of rounds in this experiment is k=1 while the size of the sliding window is N=32×32. The results thus obtained are illustrated in Fig. 5. From left to right and from top to bottom are presented the original image, the first and second encrypted images and the difference between them. The comparison of the ciphered images shows that the image encrypted by T2a=azertyuiopqsdfg0 has 99.628% difference from the image encrypted by the key T2b=azertyuiopqsdfg1 in terms of pixel gray scale values, although there is only one bit difference between them (Fig. 4).In order to quantify the dependence between the two ciphered images, the Pearson's correlation coefficient rABis used:(16)rAB=cov(A,B)cov(A,A)⋅cov(B,B)where A and B are the images to be compared. Table 2recapitulates the values obtained for five plain-images.In Fig. 6is shown a decryption test where the key used for encryption is T2a=azertyuiopqsdfg0 and the one used for decryption is T2b=azertyuiopqsdfg1 (there is also only just one bit difference between the two keys). The two keys being slightly different, the decryption process should not succeed. From left to right and from top to bottom are presented the original, the encrypted, the decrypted and the unsuccessfully decrypted images. The results in Table 2 and Fig. 6 show that there is no relation existing amongst the encrypted images corresponding to a small change in the key, thus confirming that the proposed algorithm is highly key sensitive.Histograms of several 256 gray-scale images having different contents were calculated. Typical examples among them are shown in Fig. 7. From this figure, the histograms of the ciphered images are fairly uniform and significantly different from those of the plain-images. For instance, the histogram in (f) corresponding to the ciphered Black image highlights the effectiveness of the algorithm, as all the 256 gray-levels present the same probability. The entropy for this case is equal to its highest value (H=8), attesting to the fact that the ciphered image behaves like an ideal random source. According to these results, deducing the secret key from the cipher-text during the known/chosen plaintext attacks is complex.Fig. 8shows the correlation distributions of two horizontally adjacent pixels for the plaintext images in the left column and the ciphered images in the right column. The correlation of the pixels can clearly be seen to be randomly distributed in the ciphered images. The analysis of correlation coefficients in Table 3proves that the proposed encryption technique satisfies the zero co-correlation property. Because of the increased randomness in the distribution of the pixels, it has now become increasingly difficult to see any patterns of correlation between the pixels. This thus contributes to the difficulty in breaking the ciphered image using mathematical statistical attacks.The information entropy is defined to express the degree of uncertainties or randomness in a given system. The entropy H(m) of a message source is calculated as:(17)H=−∑i=12bp(mi)log2(p(mi))where p(mi) is the probability of the symbol mi. The entropy is expressed in bits and b is the number of bits. In the case of 256 gray-scale images, truly random image entropy is equal to eight, which is the ideal value. The entropy of a practical source generating random messages is smaller than the ideal one. However, the entropy of encrypted messages should be equal to eight; otherwise there exists a certain degree of predictability which threatens its security. Table 4gives the entropy of images encrypted by the proposed scheme. It appears that the entropy of ciphered images is almost equal to eight, compared to that of the plain-images in Table 1. It can also be noticed that the encrypted version of the image “Black” is a truly random image, thus confirming the efficiency of the proposed cipher.The sensitivity of the cipher to small changes in the plain-image (single pixel change) is one of the desirable properties. The number of pixel change rate (NPCR) and the unified average changing intensity (UACI) are two indicators commonly used for this purpose.The NPCR between two ciphered images A and B of size m×n is defined by:(18)NPCRAB=∑i=1m∑jnD(i,j)m×n×100where:(19)D(i,j)=1A(i,j)≠B(i,j)0otherwiseSimilarly, the UACI is defined by:(20)UACIAB=100m×n∑1m∑1nA(i,j)−B(i,j)255In order to test the influence of one-pixel change in the plain-image, encrypted by the proposed scheme, NPCR and UACI of two ciphered images whose corresponding plain-images have only one pixel difference are compared (see Table 5). According to the values of the NPCR (over 99.6% for all the images), the encryption scheme is very sensitive with respect to small pixel changes in the plain-image. UACI values are all close to the ideal value of 33.33%, indicating that the rate of one pixel change is very large. These values of NPCR and UACI, in the case of one pixel change, confirm the high sensitivity of the proposed algorithm with respect to the plain-image, hence its robustness against differential attacks.For an increased security level, it is necessary to consider more than one permutation (q>1). The number of permutations depends on the number of sub-images (L/N) and the number of rounds (k). The total number of combinations of the permutations is given by relation (13), where the number of permutations is given by:(21)q=k⋅LN=k⋅nwAccording to (21), high security levels can be attained even with k=1, provided that N<<L. An example is given with the image “Black” for which an entropy equal to eight has been obtained with N=64×64, L=512×512 and k=1. In the case N=L, it is necessary to consider more than one round for the security level to be strengthened. For assuring high secured encryption, the proposed cipher exploits the number of possible combinations (N!q) of large permutations instead of just the number of permutations (N!) as is the case for cryptosystems using a single and fixed large permutation. Such a combination of dynamically changing permutations is made possible thanks to the LDE, which gives the possibility of generating large permutations fast. The same process is extremely computationally time consuming when the permutations are directly generated from the chaotic system.Fig. 9shows the dependence on the number of combined permutations (q) of NPCR, UACI and entropy of ciphered images (homogeneous black image). In the first case, the number of windows is set tonw=1whilst in the second case, the number of rounds is set to k=1. Results obtained show that even for just one round, the scheme proposed presents a high security level fornw>>1. For instance ifnw≥16(N≤128×128), it is not necessary to make more than one round. Cases for which more than k=2 rounds are required are avoided, as they are computationally time consuming. Fig. 9 also shows that the size of the sub-images should be at least N=16×16 for our algorithm to give satisfactory results. Indeed, in the case the size of sub-images is less than 16×16, we have NPCR<<100%, UACI<<33.33% and H<<8 even for more than one round; which means that a high security level cannot be achieved in that case. Such a result is due to the fact that there are less than 256 different gray levels in X. The results presented in Fig. 9 were performed with a homogeneous image and should be obviously better with 256 gray-level images.The scheme is also sensitive to the precision used for the digitization of the chaotic values. While using Matlab with a precision of about ɛ=2−52≃10−15, coefficients of the LDE are obtained using the following relation:(22)a=2⋅E(2p⋅|gn|)+1b=2⋅E(2p⋅|gn+1|)+1where 2≤p≤50 is the number of bits used for the quantization; 0≤gn≤1 the normalized nth value of the chaotic system andE⋅the integer part function. Depending on the chaotic system, p is used for increasing the sensitivity of the key, as the sensitivity of the chaotic system on the initial conditions should be judiciously exploited by the quantization process. Such a result is illustrated in Fig. 10. The proposed cipher is thus adaptable for using the true accuracy of the computer with any type of chaotic system.Apart from the security consideration, the running speed or execution of the algorithm is also an important aspect for a good encryption scheme. The simulator for the proposed scheme is implemented using Matlab 7.10.0. Although the algorithm was not optimized, performances measured on a 2.0GHz Pentium Dual-Core with 3GB RAM running Windows XP are satisfactory.In [31] as in many other existing ciphers, the permutation keys are obtained by iterating the chaotic system N-times, N being the permutation length. Moreover, the chaotic values are floating-point and should be converted into integers. So, the computational time required for the generation of permutation keys increases with the permutation length. By reducing the number of iterations as well as the number of floating-point to integer conversions, the computational time of generation of the permutation keys process is considerably reduced. Table 6compares the time required for generating permutation keys by the method described in [31] and the LDE solution based method. Table 6 shows that the generation time of large permutations is significantly reduced by the use of the LDE solution based method and justify why the generation of the permutation is dynamically updated in the actual cipher. In [31], a high security level was achieved for N≥64×64 and according to the large generation time of permutations, it was not possible to dynamically update the permutations.The average running speed depends on the precision used for the quantization of chaotic values as shown in Fig. 11; the size of the sub-images is set to N=128×128 pixels. For p=9, the computational time is about tc=250 ms. Such a speed is promising for real-time data encryption.By comparing these results with those obtained in [21], the scheme can be said to have attained a high-speed of operation, as we only used a 2.0GHz processor and the Matlab 7.10.0 software. The modulus and the XOR functions are the most used basic operations in our algorithm. Table 7makes a comparison between the time required for 10,000,000 runs of these operations in the simulation conditions of Wang et al. [21] and in ours, given that the simulators and computers used are not the same. From Table 7, it appears that the computational times required in our experiment for these basic operations is more than ten times greater than in the Wang environment. This means that the actual computational time of our scheme could be at least ten times smaller if implemented in the same conditions than the Y. Wang algorithm. Moreover, the conversion of floating-point values into integers has been significantly reduced in our cipher and could also allow a significant gain in the computational time. As for p≥5 and N≥16×16, the proposed cipher presents a high security level even with just one round, we can state that for the case p=8 and N=128×128 as shown in Fig. 11, the computational time of our scheme could be shorter than tc=28 ms in the Wang et al. environment. Referring to other fast ciphers [17–25], our algorithm has a fast running speed. Indeed, the average computational time of recent fast chaotic ciphers is about 30ms, which is approximately the same as the proposed scheme. However, it is quite difficult to directly compare the computational times for computers having different configurations [26].Many researches show that digital realizations using floating-point arithmetic are close approximations of continuous-values of chaotic model and yield very good results if the fraction part is sufficiently long [21]. In our algorithm, we used double precision floating-point arithmetic and the digitization of corresponding values was made with the largest number of bits as possible. This high precision in the digitization process was made possible thanks to the fact that chaotic values are not directly used for the image diffusion like in most of the chaotic ciphers, but just for generating the LDE coefficients.For comparison with other fast encryption algorithms, the round number of image-scanning, permutation and diffusion rounds are required to achieve high security performances (NPCR>0.996 and UACI>0.333) are listed in Table 8. The results show that the new scheme requires fewer permutation and diffusion rounds than the other algorithms. This observation indeed suggests that the proposed algorithm presents a faster encryption speed.

@&#CONCLUSIONS@&#
