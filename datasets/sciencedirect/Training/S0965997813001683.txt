@&#MAIN-TITLE@&#
An object-oriented framework for finite element analysis based on a compact topological data structure

@&#HIGHLIGHTS@&#
We introduce a new finite element framework (TopFEM) based on the topological data structure (TopS).We demonstrate the use of this framework for a variety of finite element problems in efficient, but generic fashion and compare the new software to those of the literature.Examples are given to show the relevance of the new framework in the context of fragmentation and topology optimization simulations.

@&#KEYPHRASES@&#
Object-oriented programming,Finite element method,Topological data structure,Adaptive simulations,

@&#ABSTRACT@&#
This paper describes an ongoing work in the development of a finite element analysis system, called TopFEM, based on the compact topological data structure, TopS [1,2]. This new framework was written to take advantage of the topological data structure together with object-oriented programming concepts to handle a variety of finite element problems, spanning from fracture mechanics to topology optimization, in an efficient, but generic fashion. The class organization of the TopFEM system is described and discussed within the context of other frameworks in the literature that share similar ideas, such as GetFEM++, deal.II, FEMOOP and OpenSees. Numerical examples are given to illustrate the capabilities of TopS attached to a finite element framework in the context of fracture mechanics and to establish a benchmark with other implementations that do not make use of a topological data structure.

@&#INTRODUCTION@&#
In the past few decades, the presence of the finite element method has become more important in both research and industry, due to its ability to analyze and study detailed information that other tools cannot provide [3,4]. This growth has left practicing engineers with a steadily increasing need for more computational power. With today’s technology, designs continue to grow larger and faster, resulting in finite element models containing millions of elements that must be handled in an efficient and timely fashion. Furthermore, as computer hardware continues to advance, there is a necessity for software to grow accordingly to make the process capable of handling such large problems in the fields of solid, structural and fluid mechanics.Object-oriented programming has become more common for computationally intensive finite element applications spanning the field of continuum mechanics (e.g. aeronautical, automotive, biomechanical industries) due to its flexibility from the concepts of inheritance, polymorphism and encapsulation; however, the efficiency of these programs can be impacted significantly by the underlying data structures. In this paper, we introduce a new finite element analysis program (TopFEM) based on the concepts of object-oriented programming in conjunction with the topological data structure to create a robust framework for adaptive finite element problems. TopFEM was implemented in a way such that (i) the data structure (TopS) stores only node and element data explicitly, with other topological entries implicitly represented (i.e. they are only retrieved when needed) and (ii) expansion of the program is straightforward, as in other frameworks.Typical data structures consist of element-node mesh representations with tables to store the node and element information using the node connectivity information. While this data structure is seemingly simple and easy to implement, often it suffers in terms of efficiently providing the necessary adjacency information required to solve several problems (e.g. fragmentation simulation, visualization techniques) [5–9]. The topological data structure (TopS) [1,2] instead contains a complete and compact data structure which utilizes a relatively small amount of memory, while still providing the user with access to all topological entities. Furthermore, TopS is naturally applicable to adaptive meshes.TopS uses abstract topological entities (facet, edge, vertex) to represent a finite element mesh. With large models, the amount of data can require extensive storage space if not carefully considered, often rendering the cost of large models prohibitive. Moreover, the access to each topological entity can be computationally intensive, and relatively complex, making it difficult for the user to edit or query the data efficiently. Thus, the topological data structure selected here is well suited for the problems we aim to solve due to its (i) compactness, (ii) completeness and (iii) adaptivity.The data structure used in this work is compact in comparison with other data structures in the sense that the storage space requirement is reduced, but topological information can be retrieved in constant time, or time proportional to the output size [1,2]. The rationale behind the reduced storage space can be explained by the fact that only nodes and elements are explicitly stored in internal arrays, using a relatively small amount of memory. In finite element meshes, the node and element arrays are the most important entities in the respect that they can be used alone to construct a finite element model; therefore, the node and element entities are selected to be stored explicitly. In many finite element representations, the nodal array typically stores the {x,y,z} position in space for each node, and the element array holds connectivity information. Conversely, in the topological data structure, TopS, the nodal array is modified to store both position and a reference to one adjacent element, E. Each element is identified by its 〈ID〉. The element array stores the incidence (Inc []) and references to the adjacent elements (adj []). There is an array for each type of element and, therefore, each element is identified by the tuple 〈type, ID〉. Furthermore, the topological entities (facet, edge, vertex) are all implicitly represented, that is, conceptually they exist, but they are not directly stored in the memory – their representations are retrieved “on-the-fly”. All the entities, both explicit and implicit, are represented by 4-byte word values with one class for each type. From the client (analysis code) point of view, however, there is no difference between the explicit and implicit entities; the client has access to all types in a uniform, transparent way.A complete data structure is one in which all the adjacency relationships can be derived from the stored data [10]. Thus, TopS is complete due to its ability for the client to access all topological adjacency relationships between any pair of defined entities in the finite element mesh by using the fixed topology of the elements. Inspired by references [10,11], this data structure uses oriented (implicit) and non-oriented topological entities to access all adjacency information. The oriented entities represent the specific use of a topological entity by an element. These oriented entities consist of the use of each edge, facet, and vertex entity. Because the oriented entities are implicitly represented, they do not require any additional storage. These entities are represented by the element and the associated local id, 〈E, id〉. The non-oriented topological entities refer to the edges, facets, and vertices, which are anchored to an element (i.e. elements have a bit-field indicating its use as an anchor) and represented by its use associated to the anchoring element.The adaptivity of the topological data structure refers to its capabilities to easily modify the mesh, as is necessary in the case of fragmentation simulations [12,13]. In adaptive fragmentation simulations, cohesive elements are inserted along element interfaces, where edges, nodes or vertices may need to be duplicated. With the topological data structure, TopS, topological adjacency information required to make such modifications in the finite element mesh can be easily retrieved, and the elements can be inserted in time scaling linearly with the number of elements. Moreover, with the non-oriented entities defined as described previously, the management of the implicit entities is simplified because there is no need to keep track of orientation changes when the mesh is modified.Over the last few years, computer processors have grown faster by increasing parallelism to efficiently solve large-scale engineering problems, in place of the single processor machines predominately used before for such computationally heavy tasks. Thus, recent attention has been given to the parallel and distributed computing environments, where each computer has its own local private memory with access to the memory of other machines to exchange information when numerical simulations are prohibitively expensive for a single processor.The use of object-oriented programming is especially suited for parallel and distributed computing applications due to its ability to easily incorporate modifications in data structures for parallel/distributed computing, such as abstractions for data mapping, communication and message passing [3]. Thus, the TopFEM framework is flexible enough to be used across many different computer platforms.To incorporate such object-oriented programs into parallel computing environments, many modern libraries have been developed, such as ParTopS [14] for dealing with the data structure, and PetSC [15–17], PARDISO [18,19], and AMD Core Math Library (ACML) [20] for parallel linear algebra (linear solvers), among others. Such libraries can be easily implemented as extensions of the current object-oriented framework, however, some challenges result, including decomposing computations between processors, dynamic mesh partitioning (load balancing among processors), efficient communication between partitions, and adaption of current serial algorithms for parallel execution. For a discussion on these issues, the interested reader can refer to references [21–23]. For linear systems of equations, TopFEM uses a base class/derived class interface with these libraries to extend them to parallel/distributed computing in a manner similar to the Actor Model of OpenSees, in which the Actor abstract base class provides methods for descendent classes to communicate with their Shadow objects [24].The remainder of this paper is organized as follows: Section 2 reviews the state-of-the-art in object-oriented programming and discusses these concepts in the context of finite element programming. Next, in Section 3, the TopFEM class organization and framework are presented. Numerical examples are given to illustrate the effectiveness of the new framework using the topological data structure (compared to previous implementations for fracture mechanics) in Section 4. Finally, we conclude with some remarks in Section 5.Significant research has been conducted to demonstrate the effectiveness of finite element applications based on object-oriented programming. A detailed discussion on incorporating finite element concepts in an object-oriented framework is included in the series of papers by Zimmermann et al. [25–31], where they show that object-oriented programming can be used to achieve appropriate levels in development speed, ease of maintenance, software reliability and reusability. We discuss the main contributions of an object-oriented framework for finite element programming next.

@&#CONCLUSIONS@&#
In this work, we have presented the development of a finite element analysis system, TopFEM, based on the compact topological data structure, TopS [1,2]. This new framework was written to take advantage of the topological data structure together with object-oriented programming concepts to handle a variety of finite element problems, spanning from fracture mechanics to topology optimization, in an efficient, but generic fashion.The class organization of the TopFEM system was also presented and discussed in comparison to other frameworks in the literature that share similar ideas, such as GetFEM++, deal.II, FEMOOP and OpenSees. The main difference with TopFEM is the way in which the connectivity and topological information for adaptive mesh refinement is handled. The topological data structure is used to represent finite elements of any type, while utilizing the concept of oriented entities to significantly reduce the storage space requirements.The effectiveness of the TopFEM framework was demonstrated through numerical examples illustrating the analysis capabilities, in addition to its application in topology optimization. We showed how TopFEM can provide a common basis onto which independent finite element analysis codes can be consistently integrated in the topology optimization context. Future implementations in TopFEM will involve evolution problems such as those of Section 4.3.