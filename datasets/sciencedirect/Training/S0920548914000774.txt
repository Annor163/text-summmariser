@&#MAIN-TITLE@&#
Conceptual model for spatial data cubes: A UML profile and its automatic implementation

@&#HIGHLIGHTS@&#
The paper presents a state of art of conceptual models for Spatial Data WarehousesThe paper details a new UML profile for modeling complex Spatial OLAP applicationsThe implementation in a commercial CASE tool is presentedIts automatic implementation in a classical ROLAP architecture is shown

@&#KEYPHRASES@&#
Conceptual multidimensional modelling,UML profile,Object Constraint Language,Data aggregation,Spatial OLAP,

@&#ABSTRACT@&#
The increasing availability of geo-referenced data has increased the need to enrich OLAP with spatial analysis, leading to the concept of Spatial OLAP (SOLAP). The conceptual modelling of spatial data cubes requires the definition of two kinds of metadata: (i) warehouse metadata that model data structures that maintain integrated data from multiple data sources and (ii) aggregation11In this paper, the term “aggregation” does not refer to UML aggregation associations. In the text of our article, “aggregation” is used in the sense of calculating a result (as in the field of databases) — the terms “aggregation level” and “aggregating relationship” refer to OLAP aggregations.metadata that specify how the warehoused data should be aggregated to meet the analysis goals of decision makers.In this paper we provide a review of existing conceptual spatial data cube models. We highlight some limits of these models concerning the aggregation model design, and their implementation in existing CASE tools and SOLAP architectures.Firstly, we propose a new UML (Unified Modeling Language) profile for modelling complex Spatial Data Warehouses and aggregations. Our profile is implemented in the MagicDraw CASE tool.Secondly, we propose a tool for the automatic implementation of conceptual spatial data cube models, designed using our profile, in a SOLAP architecture. In particular, our solution allows: (i) generating different logical representations of the SDW (Spatial Data Warehouse) model (star schema and snow-flake schema) and (ii) implementing complex SOLAP analysis indicators using MDX (MultiDimensional eXpressions language).

@&#INTRODUCTION@&#
Today, Data Warehouses (DWs) and Online Analytical Processing (OLAP) tools are used in Business Intelligence (BI) applications to support the decision-making processes of large organisations [1]. DWs allow for storing huge volumes of integrated data from multiple data sources. OLAP systems provide effective means to query and to analyse the warehoused data by producing online statistical summaries (indicators) at different levels of detail. These indicators are computed using aggregate functions (e.g., Avg, Min) when users navigate through dimension hierarchies by performing OLAP operations (e.g., Roll-up, Drill-down). In addition, the increasing availability of geo-referenced data acquired by means of several technologies (e.g., sensor networks, remote sensing systems) has increased the need to enrich OLAP with spatial analysis. To support this, OLAP systems were successfully extended by new spatial data cube-specific concepts (e.g., spatial dimension) and operators (e.g., spatial drill-down). Consequently, new types of decision support systems, namely Spatial Data Warehouses (SDWs) and Spatial OLAP (SOLAP) tools, have emerged [2]. SDWs are collections of spatial and non-spatial data that support spatial multidimensional analysis [3]. SOLAP tools allow spatio-multidimensional analysis of the SDW content; they combine OLAP analysis with cartographic visualisation capabilities of GIS systems [2]. This enables, for example, the understanding of the geographic distributions of the analysed phenomena.Relevance of SOLAP technology has been widely recognised in several application domains (e.g., health care, marketing, and environmental risk management) [2,4]. However, SOLAP opens several research issues from the implementation, modelling and visualisation points of view [4].At the conceptual abstraction level, DW and SDW systems are modelled using the MultiDimensional (MD) model [7] and the spatial MD model [4], respectively. These models organise (in terms of measures and dimensions) decisional data multidimensionally according to the analytical needs of decision makers. Therefore, they represent an important means to exchange and to collaborate between decision makers and designers for attaining a high achievement with the decisional project, which depends on meeting the users' analysis goals [7].In the literature, many (spatial) MD models have been proposed for DW [13] and SDW [4] applications. However, until now, no standard model has emerged for these applications.Several authors proposed Unified Modeling Language (UML)-based models for the conceptual modelling of such applications [11,13,15]. There are many reasons for this. Firstly, UML provides designers with powerful constructs to better represent static and dynamic aspects of these applications. UML can be extended using profiles to handle specific complex aspects of these applications (e.g., security and multi-versioning). After its adoption by the software designer community, a growing number of UML-based tools emerged, allowing for easier and quicker development.As shown in this paper, all of the existing conceptual spatial MD models focus on the design of the warehouse structures and provide a simple representation of the aspects related to the aggregation of data that are central to SOLAP applications. Moreover, some models cannot be used to design these systems because they do not provide designers with visual notations (such as [4]). Others are ad hoc models and require more learning and modelling efforts.Thus, in this paper, we propose a conceptual model for spatial data cubes based on standard languages: UML and OCL. In particular we propose a new UML profile. This profile and its OCL-based constraints have been fully validated by a complete implementation in the UML-based tool called MagicDraw. Our profile meets the main classical modelling requirements that are identified in the literature (e.g., explicit complex hierarchies, measure sets and aggregate functions); see [13,16], and additionally, it allows representing complex analysis indicators (indicators computed using different aggregate functions along different dimensions).Finally, motivated by the need of an automatic implementation of conceptual spatial data cube models in a SOLAP architecture [20], we propose a system that allows (i) generating different logical representations of the SDW model (star schema and snow-flake schema) and (ii) implementing complex analysis indicators using the MultiDimensional eXpressions language (MDX).The remainder of this paper is organised as follows. In Section 2, the main OLAP/SOLAP concepts are defined. In Section 3, the retail case study used for illustration throughout the paper is described. In Section 4, modelling and implementation requirements for spatial data cubes are presented. In Section 5, we survey and discuss related work according to the requirements defined in Section 4. In Section 6, our UML profile for spatial data cubes is presented. In Section 7, our tool for the automatic implementation is described. In Section 8, conclusions and future work are outlined.In this section, we present the main concepts of OLAP applications (Section 2.1), SOLAP applications (Section 2.2) and UML (Section 2.3). As our proposal is to provide designers with a conceptual spatial MD model, we focus on conceptual abstraction level aspects.Data Warehouses allow for storing huge volumes of integrated data, extracted from multiple heterogeneous data sources. OLAP systems query these warehoused data to produce online statistical summaries (indicators) at different levels of detail.At the conceptual abstraction level, these applications are typically modelled using the MultiDimensional model that organises data into facts and dimensions according to the analytical requirements of decision makers [7]. The facts represent subjects of analysis (e.g., “sales”) and are described using measures (e.g., “price”). The dimensions represent perspectives of analysis (e.g., “Products”). They are organised into different dimension hierarchies which are composed of related aggregation levels allowing for viewing indicators (measure aggregates) at different granularities. Indicators (e.g., “Turnover”) are computed by applying aggregate functions (e.g., Sum, Avg, Min, and Max) to measure values [1].The data structures that represent indicators with their dimensional information (dimension members) at different granularities are called hypercubes (data cubes). These data cubes can be implemented in three main ways: (a) pre-computation and storage in optimised multidimensional arrays (Multidimensional OLAP (MOLAP)); (b) storage in Relational databases (ROLAP); and (c) Hybrid OLAP (combination of ROLAP and MOLAP).Finally, decision makers explore these data cubes by navigating through dimension hierarchies and performing OLAP operators. Common OLAP operators are the following: “Slice”, which defines a selection on one dimension of the cube; “Dice”, which performs a selection on two dimensions or more; “Roll-up”, which decreases the granularity of the measure values aggregating them along a dimension hierarchy; and “Drill-down”, which is the reverse of Roll-up.SDW and SOLAP systems [2] have been introduced to enrich BI applications with spatial analysis by considering the spatial components of the increasing volumes of geo-referenced data, which are generated by means of different technologies (e.g., sensor networks and remote sensing systems). A SDW multidimensionally organises and historicises data (spatial and non-spatial) coming from multiple data sources in support of decision-making processes. SOLAP systems enable interactive multidimensional map-based explorations of spatial data cubes by combining traditional OLAP analysis capabilities with GIS systems' functionalities [2].At the conceptual abstraction level, SDWs are modelled according to the spatio-multidimensional model [3], which extends the conventional MD model with new spatio-multidimensional concepts, such as spatial dimension, spatial measure, spatial fact and spatial hypercube. Spatial dimensions represent facts' locations as analysis axis and are composed of at least one spatial level (a level having a geometrical representation); see [3,19]. The spatial measure is often considered as a measure having a geometrical data type (e.g., a point) [3,4,20]. Spatial hypercubes are defined by at least one spatial measure or at least one spatial dimension [21], to allow cartographic representations and navigations through data. Spatial facts represent instances of spatial data cubes [21,22].Spatial measures are aggregated using spatial aggregate functions (e.g., GeometricUnion and Centroid) to calculate spatial indicators when navigating in both spatial and conventional dimension hierarchies [3].To enable spatial explorations of spatial data cubes, SOLAP re-defines traditional OLAP operators, such as Spatial Slice, Spatial Drill-down and Spatial Roll-up [4]. Spatial Drill-down and Roll-up allow navigating spatial dimensions by simply interacting with cartographic displays of the SOLAP client. Spatial Slice selects a data subset by applying a spatial predicate (metrical, directional or topological predicates — for example, the overlap operator) on spatial dimension members (i.e., instances of spatial dimensions).The classical SOLAP architecture is composed of three tiers: SDW, SOLAP server and SOLAP client (Fig. 1). In the SDW tier, (spatial) data that are collected from data sources are often stored at their finer grains using a spatial DataBase Management System (DBMS) such as Oracle Spatial.The Relational DB schema can be defined following three schema types: star, snow-flake or star-flake. In the star schema, every dimension is represented by one table containing all of the dimensional attributes of the dimension's aggregation levels as columns. In the snowflake schema, dimensions are normalised, and each aggregation level is mapped into one table. The starflake schema combines the two representations by normalising some dimensions or parts of them and denormalising others. In all of these schema types, each fact class is represented by one table that references the dimension tables by using foreign keys.The well-known constellation schema (a constellation of stars, or snowflakes, or starflakes) is obtained when the MD model is composed of two or more hypercubes, which eventually share some dimensions.The choice between normalising and denormalising dimensions is often based on the storage cost and the expected query performance. In contrast to denormalised dimensions, normalised dimensions are easy to maintain and optimise the storage space; however, they decrease the query performance because many joins need to be performed when executing queries [19].SOLAP servers (e.g., Mondrian) define spatial data cubes (dimensions, facts, aggregations, etc.) and implement SOLAP operators to compute and to navigate through (spatial) data cubes. Usually, the spatial data cubes (SOLAP server models) are defined by means of graphical wizard or using XML files.Finally, SOLAP clients (e.g., JRubiK and JMAP–SOLAP) provide users with interactive visual displays (crosstabs, histograms and maps) that trigger SOLAP operators and allow the visualisation of indicators and dimensions.Object-Oriented (OO) models are heavily used for data modelling [13] because they are very expressive and better represent static and dynamic aspects of complex applications. The Unified Modeling Language is the standard language for OO modelling [23] and is increasingly used for DW and SDW modelling [13,24]. An important advantage of UML is its extensibility. UML can be adapted in two ways: (a) with profiles to customise it to specific platforms or domains (e.g., security, spatial, and temporal) or (b) with metamodels to augment and to enrich its semantics [23]. Moreover, it has been shown that UML provides powerful constructs to represent static and dynamic aspects of complex applications, such as SDWs [20,24]. Complementary to the UML specification, the Object Constraint Language has been adopted by the Object Management Group (OMG) as the standard language for expressing integrity constraints on UML models [25]. OCL offers a good balance between expressivity and readability. Consequent to their large adoption by the software designers' community, a growing number of UML-based tools allow for easier and quicker developments of software applications (by automating certain tasks).To illustrate SOLAP/OLAP concepts and modelling requirements, we introduce a retail case study adapted from [19]. In this model, decision makers are interested in the analysis of two aspects of their activity: (1) the product supplies and (2) the product sales. In terms of OLAP, these aspects can be defined using two hypercubes (i.e., two data cubes): the “Supplying” and the “Sales” hypercubes. The Sales multidimensional model is depicted in Fig. 2using a graph notation. As shown in this figure, sales facts are described using five numerical measures: “price” (sales amounts), “quantity-sold” (quantities of sold products), “quantity-stock” (stock quantities of products), “costs” (sales costs) and “unit-price” (unit sales prices). The sales are analysed according to five dimensions, describing three different types of extents:-two dimensions (i.e., non-spatial and non-temporal dimensions), “Orders” and “Products”, containing only thematic information;two spatial dimensions, “Customers” and “Stores”, containing geographic and thematic information;one temporal dimension, “Time”, representing the time frames of facts (sales).The dimension “Orders” records the order identifiers. The dimension “Products” records thematic information about the products and their categories. The spatial dimension “Stores” records the stores and their locations. The dimension “Customers” stores the customers and their addresses. Dimensions are described using different types of attributes, called dimensional attributes. For example, the spatial dimension “Stores” (Fig. 2) contains thematic attributes such as “country-name” and spatial attributes such as “country-geometry”, which describes the locations of countries. The “Time” dimension is defined by temporal attributes (e.g., “month-temporality”) and thematic attributes such as “month-name”.The aggregation levels are formed by grouping dimensional attributes into disjoint subsets according to the analysis requirements. For example, the spatial dimension “Stores” (Fig. 3) consists of one hierarchy (“StoreLocation”) that is composed of four aggregation levels: “Store”, “City”, “State” and “Country”.Once the warehouse MD model (i.e., dimensions and measures) is defined, the decision makers decide how to aggregate data to compute different indicators of analysis in the SOLAP tier. In our case study, decision makers may want, for example, to compute the total quantity sold by summing the “quantity-sold” measure values or the turnover by summing the “price” values.Finally, this spatial data cube allows users to answer queries such as “What are the turnovers per store or per product between 2000 and 2011?” and “What are the total costs per state?”. These queries are visualised in the SOLAP client tier using different types of displays (e.g., tabular and maps). Specifically, a map representing states is used to show the results of the second query.In this section, we present the main spatial data cube conceptual modelling requirements (Section 4.1) (with particular attention on aggregation (Section 4.2)) and ones related to its implementation (Section 4.3). We illustrate these requirements using the retail case study previously described.Modelling requirements for conventional and Spatial Data Warehouses have been investigated in many studies [13,16]. These studies suggest that each (S)DW model must conform to the user's view of the decisional data by organising the data into facts and dimensions. This support for multidimensionality must be clear, non-ambiguous and independent from the implementation to facilitate the understanding and the validation of the model by the decision makers.In the literature, support for measure sets is a well-known requirement concerning the conceptual modelling of measures. An example of a measure set is the set composed of “quantity-sold” and “price” which describe sales facts.The main modelling requirements regarding dimensions are support for descriptive attributes, identifying attributes and multiple hierarchies[11,13,19]. The identifying attributes identify dimension members and are used for grouping purposes in Roll-up and Drill-down operations. An example of these attributes is “customer-id” (Fig. 2). The descriptive attributes are used to select and to filter results in Slice and Dice operations (e.g., “country-name”). Dimension hierarchies are widely used structures that support data aggregations [26]. Consequently, representing hierarchies explicitly is stated as a mandatory requirement. Moreover, as highlighted in [19], designers may want to model different hierarchies per dimension. In our example, the dimension “Customers” could be organised into two hierarchies, “CustomerLocation” and “CustomerType”. This requirement is known as multiple hierarchies per dimension.Several studies have highlighted the importance of aggregate functions for representing MD queries (data cubes) at the conceptual level [17], thereby allowing validation of the model with respect to the analytical requirements of decision makers at an early stage.A very important requirement for SDWs is the precise typing of multidimensional elements. Indeed, according to [12,19], SDW elements that either represent factual or dimensional data can be spatial, temporal and thematic (non-spatial and non-temporal). This requirement allows us to perform the following: (a) to improve readability by associating adequate graphical notations for each type, (b) to ease models' validation (e.g., spatial measures have to be aggregated using only spatial aggregate functions), and (c) to facilitate automatic implementation for each type (e.g., a spatial measure must be implemented using a geometric data type into the SDW tier). Measures can be of different categories according to their purposes of use in multidimensional analysis: Numerical, Spatial and Textual. Numerical measures are attributes that are used to quantify facts; for example, “quantity-sold” quantifies sales (Fig. 2). Spatial measures are geometric attributes that should be visualised on maps to better understand the geographic distribution of facts. Textual measures are qualitative attributes used to analyse textual data [28]. We refer to this concept as the measure using type. Regarding their additivity, measures are classified into flow, stock and value per unit measures [10]. Flow measures (e.g., “quantity-sold”) record the commutative effect (value changes) over a given time period. Stock measures record the state at specific points in time (“quantity-stock”). Value per unit measures record values per unit in a specific period (“unit-price”). The additivity type of a measure influences its aggregation. Flow measures can be summed (additive) on all dimensions; stock measures are not additive on the time dimension (semi-additive); and value per unit measures are not additive at all. We refer to this concept as the measure additivity type.The SDW model should explicitly support thematic, spatial, and temporal dimensions, and hierarchies and aggregation levels. These different types of MD elements influence differently aggregations; for example, stock measures (e.g., “quantity-stock”) cannot be summed (using Sum) along temporal dimensions (“Time”). For example, spatial topological relationships (e.g., geometrical inclusion) can be defined only between spatial levels (e.g., “City” and “State”). Finally, these different types of elements are used differently in SOLAP analysis. For example, only spatial hierarchies support Spatial Roll-up/Drill-down operations.Complex data structures are very frequent in real-world situations. Among these structures, we can cite irregular hierarchies (non-strict, non-onto and non-covering) and irregular fact-dimension relationships (non-strict and non-complete); for more details, see [19].Other important classical requirements are the separation between structure and content, the representation of multiple hypercubes that share dimensions, and the sharing of levels between hierarchies; see [13,16] for more details.Usually, decision makers aggregate measures using different aggregate functions to meet their analysis goals. For example, in our case study, managers may want to compute the maximum sales price by applying the Max aggregate function along all dimensions, the total sales price by applying the Sum along all dimensions, and the stock level by applying the Avg along the Time dimension and the Sum along the other dimensions.To model such different complex situations, we believe that it is necessary to distinguish between the following:-the measure that represents an attribute that is subject to data aggregations;the aggregation rule that specifies the aggregate function that is applicable to a measure along a certain number of dimensions, hierarchies or between two aggregation levels; andthe indicator that defines an ordered set of correct aggregation rules for a measure in response to an analysis need.In this way, we can easily associate multiple indicators for one measure (e.g., “Max_Price” and “Total_Price” with the measure “price”). We refer to this requirement as explicit indicators.Aggregation rules for “Max_Price” and “Total_Price” indicators simply use one aggregate function along all of the dimensions (i.e., Max and Sum, respectively); however, more complex scenarios can be formulated. Indeed, certain indicators may be defined by ordered sets of aggregation rules, where each rule may specify the aggregate function along a set of dimensions. For example, to compute the indicator “Stock_Level”, we must apply Avg along “Time” after applying Sum along other dimensions [27]. We refer to these requirements as multiple ordered aggregation rules per indicator and explicit dimension-related aggregation rules.Although these two requirements are supported by only some models [27], they are well-known requirements.Moreover (un)fortunately, when dimensions are composed of multiple hierarchies, it is possible to have different aggregate functions for each hierarchy of the same dimension [12,26]. For example, decision makers may want to aggregate the “quantity-sold” using the Sum along the “CustomerLocation” hierarchy and the Avg along the “CustomerType” hierarchy. We call this requirement explicit hierarchy-related aggregation rules. In specific situations, the aggregation rule may change between two aggregation levels of the same hierarchy [12,26]. For example, to obtain the maxima of city's turnovers for every combination of levels, we first sum the “price” values from “Store” to “City” and then apply Max. We call this requirement explicit sub-hierarchy-related aggregation rules.Finally, indicators such as “Profit” and “Unit_Price” may be derived from other indicators; “Profit”, for example, is calculated by subtracting the “Total_Price” from the “Total_Costs”; we refer to this requirement as explicit derived indicators.In [3], SOLAP aggregate functions are classified into three types according to their distributivity: distributive (e.g., Sum and GeometricUnion), algebraic (e.g., Avg and Centroid) and holistic (e.g., Mode and EquiPartition). With distributive aggregators, sub-aggregates can be safely reused to compute coarser ones. Algebraic aggregators are expressed as finite algebraic expressions over distributive aggregators; e.g., Avg is computed using Count and Sum. Holistic aggregators are all of the other aggregate functions that are non-distributive and non-algebraic. We refer to this knowledge as the aggregator distributivity type.Similar to dimensions and measures, aggregate functions can be classified with regard to the data types to which they apply; the categories are numerical (Sum), spatial (GeometricUnion) and Textual (list [28]). We refer to this knowledge as the aggregator applicability type.We state that representing these two characteristics of aggregators (i.e., the distributivity and the applicability types) at the conceptual abstraction level is very important for multiple reasons. The distributivity type can be used to ease the materialised view selection process by illuminating at an early stage the views that are calculated using non-distributive functions. More importantly, it can be only obtained from users22The user information and needs should be represented at the conceptual abstraction level because the languages used at this level are understood by users.when the aggregators are application-specific. The applicability type can be used to check the validity of the aggregation model at an early stage. For example, indicators associated with spatial measures must be defined using spatial aggregators.Conceptual models providing a visual notation have to be supported by CASE tools allowing designers to correctly “draw” their models [7]. Thus, as for classical databases, a conceptual SDM has to be supported by some CASE tools that should force designers to define SOLAP models being compliant with its formal definition [20].Secondly, in order to easy the implementation process, which can be tedious, complex and iterative, an automatic implementation of the SDM model should be supported [15]. It allows improving effectiveness of design process, and reducing errors generated by application ad-hoc implementations. In the context of Spatial Data Warehouses, the automatic implementation concerns the models of the SDW and SOLAP server tiers. The former is a relational model but with the particularity of using SDW logical models (star schema and snow-flake schema) that can be different from the conceptual representation of dimensions (c.f. Section 2.2). The SOLAP server model should be able to represent spatio-multidimensional elements but also complex indicators.

@&#CONCLUSIONS@&#
