@&#MAIN-TITLE@&#
A geometric method for computation of geodesic on parametric surfaces

@&#HIGHLIGHTS@&#
An efficient geometric algorithm aims to trace geodesic on parametric surfaces.Independent of the complex description of the geodesic equations.Simpler and faster than the existing geometric method.Step size of the algorithm adapts to the geometry of parametric surface.

@&#KEYPHRASES@&#
Geometric,Geodesic,Geodesic equations,Tessellated surface,

@&#ABSTRACT@&#
This paper proposes a geometric algorithm for computation of geodesic on surfaces. The geodesics on surfaces are traced in a simple way which is independent of the complex description of the geodesic equations. Through derivation process, the calculation error of this algorithm is obtained. A step size adjustment strategy which enables the step size adapt to the geometry of surface is introduced. The proposed method is also compared to some other well-known methods in this study. Many geodesics computed using these approaches on various B-spline surfaces or their equivalent tessellated surfaces have been presented. Experiments demonstrate that the proposed algorithm is efficient. Meanwhile, the results show that the step size adjustment strategy works well for most of the cases.

@&#INTRODUCTION@&#
Geodesic on a surface is an intrinsic geometric feature that plays an important role in a diversity of applications. The importance of geodesic is well known in the computer simulation of design and manufacturing process of composite components. For tape laying process, geodesic allows minimizing the steering of the tape (Debout et al., 2011). For filament winding process, it would be impossible to lay a filament in any way other than along a geodesic on a frictionless convex surface. Geodesic also finds its application in surface and shape processing, such as surface flattening (Azariadis and Aspragathos, 1997, 2001), segmentation, sampling, meshing and comparison of shapes (Peyré et al., 2010).A curve on a surface is called a geodesic if and only if the normal vector to the curve is everywhere parallel to the normal vector of the surface. A geodesic can also be defined as a curve with zero geodesic curvature.Available approaches for the computation of geodesic on surfaces can be classified broadly as analytical and numerical, and the later one is more widely used than the former one recently. The analytical approaches presented by Do Carmo (1976) are quite complex and closed form solutions cannot be found for geodesic on general surfaces. As for the numerical approaches, Beck et al. (1986) computed geodesic paths on a bicubic spline surface by using the fourth order Runge–Kutta method. Patrikalakis and Badris (1989) examined geodesic curves on parametric surfaces when they constructed offset curves on Rational B-spline surfaces. Sneyd and Peskin (1990) investigated the computation of geodesic paths on a generalized cylinder using a second order Runge–Kutta method. Hotz and Hagen (2000) presented a geometric method for the construction of geodesics on arbitrary surface. Their method is based on the fundamental property that geodesics are a generalization of straight lines on planes. The superiority of this method is that it makes us independent of the complex description of the surface. Ying and Candes proposed an approach for rapidly computing a very large number of geodesics on a smooth surface. Their approach is built upon the phase flow method and is especially well suited for the problem of computing creeping rays (Maekawa, 1996).Finding the shortest path between two points on surface is a classical problem and it has many important applications. Maekawa introduced an approach for finding the shortest path between two points on a free-form parametric surface based on a relaxation method relying on finite difference discretization (Ying and Candes, 2006). Kasap et al. (2005) presented a numerical method for the computation of geodesic between two points on surface. They solve the nonlinear differential equations of geodesic via the finite-difference method and the iterative method. Chen (2010) proposed a geodesic-like curve that approaches to the geodesic on surface when the order of the curve reaches to infinity. Chen's geodesic-like curve has been proved to be accurate.Many accurate discrete methods approach geodesics or the shortest paths on tessellated surfaces (Tucker, 1997; Ravi Kumar et al., 2003), polygonal surfaces (Polthier and Schmies, 1998; Kanai and Suzuki, 2001) and triangular meshes (Martinez et al., 2005; Surazhsky et al., 2005). Bose et al. (2011) did a survey which gave an overview of theoretically and practically relevant algorithms to compute geodesic paths and distances on three-dimensional surfaces. The algorithms are differentiated based on theoretical time complexity and approximation ratio.In general, conventional approaches for computation of geodesic can be classified broadly into three types. First, solve the nonlinear differential equations of geodesic by using a numerical integration method such as Runge–Kutta method. Second, compute discrete geodesics on discrete surfaces by following some rules. Last, construct geodesics on smooth surfaces by using geometric methods. The first type is elegant and accurate, but the differential equations of geodesic are very complicated and generally not easy to solve. Discrete geodesics have been gaining attention as computer becomes increasingly more powerful and discretized models become more prevalent in geometric modeling. However, the discrete geodesics cannot be computed directly on the original smooth surface. There is little work on constructing geodesics directly on smooth surfaces by using geometric methods. The geometric method presented by Hotz and Hagen is complicated as it needs to compute projection of point of tangent plane in each step. Ravi Kumar's method can be extended to estimate geodesics on regular surfaces (Chen, 2010). However, this method does not perform on regular surfaces directly. The discrete geodesic is computed at first and then projected to the regular surface. In this work, we present a compact geometric method for constructing geodesics directly on smooth surfaces. Firstly, principle of the method is described in detail. Then, calculation error of the method is provided through derivation process. Finally, the method is tested on a group of different surfaces. See Table 1for used notations.This work describes an efficient method which aims to trace geodesic on parametric surfaces. The presented approach is independent of the complex description of the geodesic equations and is summarized as follows:We look at a surface S which is given by a parameterizationr(u,v)=[x(u,v),y(u,v),z(u,v)], where x, y and z are differentiable functions of the parameters u and v. As this work focus on providing a computational method for the geodesic, we assume that S is regular.A curve C lying entirely on the surface S can be expressed in parametric form by:(1)u=u(s),v=v(s),where s is the arc length.LetQ0=r(u0,v0)denote a starting point on curve C in three-dimensional space, andT0the unit tangent vector of curve C atQ0.Then the three-dimensional directional vectorT0is pulled back to the parametric domain adopting a simple procedure (Piegl and Tiller, 1997), and we get the direction ofC′atq0=(u0,v0)which can be represented asL0=(u′(q0),v′(q0)). HereC′andq0are the preimage of curve C and pointQ0in the parametric domain, respectively.Assume thatq1=(u1,v1)is the point lying in the neighborhood ofq0onC′, and it can be approximated as:(2)(u1,v1)=(u0+u′(q0)Δs,v0+v′(q0)Δs),where Δs is arch length increment.LetQ1=r(u1,v1)denote the three-dimensional image point ofq1on S. According to the Frenet–Serret formulas, the unit tangent vector of curve C atQ1can be approximated as:(3)T1=T0+k0β0Δs,whereT1is the unit tangent vector of curve C atQ1,k0is the curvature of curve C atQ0andβ0is the principal normal vector of curve C atQ0.Suppose curve C is geodesic on surface S, and then Eq. (3) can be rewritten as:(4)T1=T0±k0n0Δs,wheren0is the unit normal vector of surface S atQ0which is parallel toβ0and is given by:(5)n0=ru(q0)×rv(q0)|ru(q0)×rv(q0)|.ruandrvare the first order parametric derivatives of the surface patch with respect to u and v, respectively.Then we consider the curvature of curve C atQ0.Let a denote the included angle made byT0andT1, andn1the unit normal vector of surface S atQ1(see Fig. 1).From the definition of curvature,k0can be obtained as:(6)k0=limΔs→0⁡|aΔs|.Assume Δs is small,k0is approached as follows:(7)k0=|sin⁡a|Δs=|n1.T0|Δs.To obtain the sign ofn1.T0in Eq. (7), the neighborhood ofQ0on curve C is approached by using a circular-arc approximation, as illustrated in Fig. 2. In this work, the circular-arc approximation is deemed to be accurate enough as it is of second order accuracy.In Fig. 2,Q0andQ1are both located on the circular-arc, and the direction in which the circular-arc is turning is determined byβ0.As seen in Fig. 2, whenβ0andn0are in the same direction,k0=−n1.T0Δs. Substitute it into Eq. (4) then it follows that:(8)T1=T0−(n1.T0)Δsn0Δs.Similarly, whenβ0andn0are in the opposite direction,k0=n1.T0Δs. Substitute it into Eq. (4), and then we get the same equation as Eq. (8).In summary, a universal equation is obtained to calculateT1. Next,T1is pulled back to the parametric domain, thus we getL1, whereL1=(u′(q1),v′(q1))is the direction ofC′atq1.Next, we can get pointq2(u2,v2)lying in the neighborhood ofq1. Similarly, the subsequent geodesic points can be computed until the boundary of the surface is reached or the number of computed points exceeds a maximal point number. The sequence of geodesic points gives a unique parametric geodesic usingQ0as initial value.We are tracing a geodesic on surface S usingQ0andT0as initial values.The main algorithm flow is described as follows:1.The three-dimensional directional vectorT0is pulled back to the parametric domain of the surface S, and the direction of curveC′atq0is obtained.Based on the direction of curveC′atq0, the point lying in the neighborhood ofq0onC′is derived asq1.The unit normal vector of surface S atQ0andQ1is obtained asn0andn1separately through a simple procedure.After the steps above, the three-dimensional directional vectorT1can be obtained through Eq. (8).Thenq1andT1are used to compute the subsequent geodesic point. The sequence of geodesic points gives a unique parametric geodesic usingQ0as initial value.The rest of the paper is organized as follows. In Section 3, the calculation error of this algorithm is obtained. In Section 4, we introduce a strategy which enables the step size adapt to the geometry of surface during the computation process. Section 5 shows the experimental results and Section 6 concludes the paper.Letqi=(ui,vi)denote the point calculated by the proposed method in step i(i=2…m,m≥2), the exact position ofqiis represented asqi‾=(ui‾,vi‾). The three-dimensional image point ofqiandqi‾on S is represented asQiandQi‾, respectively. The main focus in this section is to acquire the difference betweenqiandqi‾.Q0is the starting point of the geodesic, soq0=q0‾.As presented in Section 2, the position ofqiis obtained as:(9)qi=qi−1+Li−1Δs,whereLi−1=(u′(qi−1),v′(qi−1))is the direction ofC′at pointqi−1.From the Taylor expansion, it follows that:(10)qi‾=qi−1‾+Li−1‾Δs+12Mi−1Δs2+O(Δs3),whereLi−1‾=(u′(qi−1‾),v′(qi−1‾)),Mi−1=(u″(qi−1‾),v″(qi−1‾))andO()is big O notation.u′andv′are the first-order partial derivatives ofu(s)andv(s)with respect to s, whileu″andv″are the second-order partial derivatives ofu(s)andv(s).Combine Eq. (9) with Eq. (10), the position calculation error ofqiis obtained as:(11)Eip=qi−1‾−qi−1+(Li−1‾−Li−1)Δs+12Mi−1Δs2+O(Δs3),where the superscript p ofEispecifies the position calculation error.By referring to Eq. (11),Eipconsists of three parts:1.The position calculation error ofqi−1:Ei−1p=qi−1‾−qi−1.The error caused by the direction calculation error ofqi−1:ε1=Ei−1lΔs,whereEi−1l=Li−1‾−Li−1. The superscript l ofEi−1specifies the direction calculation error.The neglected remainder of the Taylor expansion:ε2=12Mi−1Δs2+O(Δs3).In Eq. (11),ε1+ε2is the local truncation error in step i. As can be seen from above,ε2is on the order ofO(Δs2). However, it is not easy to determine the order ofε1as we do not know the expression ofEi−1l.Ei−1lwill affectEipwhile will be affected byEi−1p, which reveals that there is a coupling relationship between ‘position calculation error’ and ‘direction calculation error’. In the subsequent part, in order to decoupling and acquireEip, we will perform an overall analysis.First of all, we make an assumption that this algorithm is of kth-order accuracy, wherek=0ork=1. ThenEipcan be represented as:(12)Eip=ω1Δsk+1,whereω1is constant depends on variable i.Next, we are going to show thatk=1.By referring to Section 2,Li−1is derived by solving the following system of linear equations:(13)ALi−1T=BTi−1T,whereA=[|ru(qi−1)|2ru(qi−1).rv(qi−1)ru(qi−1).rv(qi−1)|rv(qi−1)|2],B=[ru(qi−1)rv(qi−1)]andTi−1is the unit tangent vector atQi−1.At the same time,Li−1‾can be got by solving a system of linear equations quite similar to Eq. (13):(14)A‾Li−1‾T=B‾Ti−1‾T,whereA‾=[|ru(qi−1‾)|2ru(qi−1‾).rv(qi−1‾)ru(qi−1‾).rv(qi−1‾)|rv(qi−1‾)|2],B‾=[ru(qi−1‾)rv(qi−1‾)]andTi−1‾is the unit tangent vector atQi−1‾.From the Taylor expansion, it follows that:(15)ru(qi−1‾)=ru(qi−1)+O(Δsk+1),(16)rv(qi−1‾)=rv(qi−1)+O(Δsk+1).From Eq. (13), Eq. (14), Eq. (15) and Eq. (16), through simplification, the following equation is expressed:(17)AEi−1lT=BEi−1tT+O(Δsk+1),whereEi−1t=Ti−1‾−Ti−1. The superscript t ofEi−1specifies the unit tangent vector calculation error.With Eq. (17), in order to obtainEi−1l,Ei−1tis investigated.By referring to the Taylor expansion, it follows that:(18)Ti−1‾=Ti−2‾+|T′(Qi−2‾)|βi−2‾Δs+12T″(Qi−2)‾Δs2+O(Δs3),whereTi−2‾is the unit tangent vector atQi−2‾.|T′(Qi−2‾)|andβi−2‾is the curvature and principal normal vector ofC‾atQi−2‾, respectively.C‾represents the ideal geodesic withQ0andT0as initial values.The unit tangent vector calculation error ofQi−1is obtained as:(19)Ei−1t=Ti−2‾−Ti−2+(|T′(Qi−2‾)|βi−2‾−|ni−1.Ti−2|Δsβi−2)Δs+12T″(Qi−2)‾Δs2+O(Δs3)=Ti−2‾−Ti−2+(|T′(Qi−2‾)|−|ni−1.Ti−2|Δs)βi−2Δs+12T″(Qi−2)‾Δs2+O(Δsk+2),whereni−1is the unit normal vector of S atQi−1andβi−2is the principal normal vector of C atQi−2.MoveTi−2‾andTi−1‾to a same starting point O, and draw a unit circle with O as center (see Fig. 3). This unit circle will pass through the end points ofTi−2‾andTi−1‾, and the included anglea‾made byTi−2‾andTi−1‾is equal to the length of arc MN.As illustrated in Fig. 3, the following equation is obtained:(20)|ni−1‾.Ti−2‾|Δs=|sin⁡a‾|Δs=|MN|→Δs|sin⁡a‾||MN|→=|MN|→Δs|cos⁡a‾2|,where we assume|cos⁡a‾2|=1when ‘Δs’ is small.Now we consider|MN→|:(21)|MN→|=|Ti−1‾−Ti−2‾|=|T′(Qi−2‾)Δs+12T″(Qi−2‾)Δs2+O(Δs3)|.Substitute Eq. (21) into Eq. (20), the following equation is expressed:(22)−(12|T″(Qi−2)|Δs+O(Δs2))≤|ni−1‾.Ti−2‾|Δs−|T′(Qi−2)|≤12|T″(Qi−2)|Δs+O(Δs2).Substituteni−1‾=ni−1+O(Δsk+1)into Eq. (22), the following equation is derived:(23)−(12|T″(Qi−2)|Δs+O(Δsk))≤|ni−1.Ti−2‾|Δs−|T′(Qi−2)|≤12|T″(Qi−2)|Δs+O(Δsk).Ask=0ork=1, let|T′(Qi−2)|=|ni−1.Ti−2‾|Δs+O(Δsk). Substitute it into Eq. (19), we arrive at a recursion formula:(24)Ei−1t=Ti−2‾−Ti−2+(|ni−1.Ti−2‾|−|ni−1.Ti−2|)βi−2+O(Δsk+1).By referring to the recursion formula, the unit tangent vector calculation error ofQi−1is obtained as:(25)Ei−1t=Ti−1‾−Ti−1=ω2Δsk+1,whereω2is constant dependent on variable i.With Eq. (25) and Eq. (17),Ei−1lcan be derived as follows:(26)Ei−1l=ω3Δsk+1,whereω3is constant.SubstituteEi−1linto Eq. (11),Eipis obtained as:(27)Eip=qi−1‾−qi−1+12Mi−1Δs2+ω3Δsk+2+O(Δs3).With Eq. (27), it is acquired thatk=1. At the same time,Eipcan be simplified as:(28)Eip=qi−1‾−qi−1+12Mi−1Δs2+O(Δs3).By using the recursion formula as Eq. (28), the position calculation error ofqiis obtained:(29)Eip=12∑j=1iMj−1Δs2+O(Δs3).Although Eq. (29) is obtained wheni≥2, it can also be applied to the position calculation error ofq1.In this section, a strategy which enables the step size adapt to the geometry of surface is introduced.By referring to the mean value theorem, the local truncation error ofqican be rewritten as:(30)ε3=ε1+ε2=(12u″(δi−1)Δs2,12v″(φi−1)Δs2),where both ofδi−1andφi−1are located betweenqi−1‾andqi‾on curveC‾.Let λ denote the upper limit of the local truncation error ofqi, we get:(31)(|u″(δi−1)|+|v″(φi−1)|)Δs2≤2λ.In each calculation step, we chooseΔs=2λ(|u″(δi−1)|+|v″(φi−1)|)as the step size.Then the position calculation error ofqiis estimated as:(32)|Eip|=12|∑j=0i−1u″(δj)|Δs2+12|∑j=0i−1v″(φj)|Δs2≤iλ.In the subsequent part, the approximate values ofu″(s)andv″(s)are considered.From the derivation formula of composite function, it follows that:(33)r′(s)=[rurv][u′(s)v′(s)].Take the derivative of Eq. (33) on both sides with respect to s, and it follows:(34)[rurv][u″(s)v″(s)]=M,whereM=r″(s)−ruuu′(s)2−2ruvu′(s)v′(s)−rvvv′(s)2.By left multiply(rurv)Ton both sides of Eq. (34), we get:(35)[|ru|2ru.rvru.rv|rv|2][u″(s)v″(s)]=[ru.Mrv.M].By solving this system of linear equations, we can getu″(s)andv″(s).Here is the detail of the step size adjustment strategy:We start with a starting pointq0(u0,v0)and a starting directionT0. Further we have an initial step sizeh0and λ.1.By using the starting directionT0and initial step sizeh0,q1is obtained.u″(q0)andv″(q0)are obtained by solving Eq. (35), where−(n1.T0)n0h0is used to approachr″(q0).Change the step size intoh1=2λ(|u″(q0)|+|v″(q0)|), whereh1is the step size to calculate the position ofq2.The position ofq2is acquired as (u1+u′(q1)h1,v1+v′(q1)h1). Similarly, the subsequent geodesic points (q3,q4…) can be computed.In each step, we need to compute the position ofqiand the step sizehifor the next step. Although the time costs increases in each step, the overall time costs decreases generally.RemarkThe quality of result is influence by step size, curve curvature and parameterization. Therefore, for different parameterization or curve curvature, we adjust the step size to maintain result with good quality.In this section, we perform comparisons between our method and some existing elegant methods. At first, our approach is compared with Beck's approach on accuracy and efficiency as both approaches work directly on the original surface.Then, both of the two methods mentioned above are compared with Ravi Kumar's discrete method. Ravi Kumar's discrete method had been extended to estimate geodesics on regular surfaces in Chen's work. This method does not perform on regular surfaces directly. The discrete geodesic is computed at first and then projected to the regular surface. In this work, Liu's (2009) point projection method is adopted.Next, various surfaces are adopted to validate the proposed algorithms. All computer programs of the proposed algorithms are written in MATLAB 7.0 and run on a personal computer [Intel Core (TM) i5 Duo Processor, 2.8 GHz, 2 GB memory] to test the accuracy and the efficiency.In the present work, all the geodesics are computed until they reach the boundary of the surface and the computation time is recorded. In order to measure the accuracy of the three kinds of algorithms, we record the distancedist(qco,qid)between last pointqco(u(qco),v(qco))of the computed geodesic and last pointqid(u(qid),v(qid))of the ideal geodesic, wheredist(qco,qid)equals to|u(qco)−u(qid)|+|v(qco)−v(qid)|. The ideal geodesic on B-spline surface is not readily available, so we use the geodesic computed by using the fourth order Runge–Kutta method with extremely small step size as the ideal geodesic.Now, we will introduce the first two examples, respectively. In both of the two examples, our approach is compared with Beck's approach on accuracy and efficiency. For the two approaches, we record their computation errors at a group of equal step size and their computation time required to achieve a given level of accuracy, respectively. For the purpose of equity, step size of the two algorithms in both of the examples is fixed. Meanwhile, the accuracy and efficiency of Ravi Kumar's discrete method are also presented.In the first example, we consider a2×2B-spline surface. As illustrated in Fig. 4, the geodesics are computed on this surface in three different directions. The results of the comparison are demonstrated in Figs. 5–7. The results of Ravi Kumar's discrete method are shown in Fig. 8. In this work, we simply record the efficiency of Ravi Kumar's discrete method inV0(du:dv=1:1)as the results inV1(du:dv=1:2)andV2(du:dv=2:1)share a quite similar tendency asV0.For the2×2B-spline surface, as can be seen in Fig. 5(b), Fig. 6(b) and Fig. 7(b), although Beck's approach is more accurate, our method is always able to achieve a given level of accuracy with less computation time, which indicates that our method is more efficient. This is mainly due to that the divergence of accuracy between the two approaches is not significant on the2×2B-spline surface.In the second example, we consider a6×4B-spline surface. The geodesics are computed on this surface in three different directions, as illustrated in Fig. 9. The ideal geodesic on B-spline surface is calculated in a same way as in the first example. The results of the comparison are presented in Figs. 10–12. The results of Ravi Kumar's discrete method are shown in Fig. 13.The difference on efficiency of the two kinds of algorithm for the6×4B-spline surface is clearly illustrated in Fig. 10(b), Fig. 11(b) and Fig. 12(b). As shown in these diagrams, the comparison results of the two algorithms on efficiency inV0andV1depend on the level of the specified accuracy. To be more specifically, our approach is more efficient when the specified computation error is greater than5×10−5while Beck's approach is more efficient when the computation error is less than1×10−5. This is because Beck's method is much more accurate than our approach with the equal step size when the specified computation error is less than1×10−5. In this case, to obtain equivalent accuracy as Beck's method, our approach generally has to adopt very small step size, which is at the expense of computational efficiency. The comparison results inV2demonstrate that the divergence of accuracy between the two kinds of approaches is not significant and our method is more efficient, which is quite different from the results inV0andV1. This is mainly due to the improvement of accuracy of our approach inV2, which can be seen when we compare Fig. 12(a) with Fig. 10(a) and Fig. 11(a).As shown Figs. 5–7 and Figs. 10–12, when the step size decreases, the errors generally decrease. Meanwhile, the time costs increase. For each step size, the errors of Beck's algorithm are always smaller than those of our method, and this is more obvious in Example 2, which indicates that Beck's method is more accurate. However, as for the efficiency of the two kinds of algorithms about achieving a given level of accuracy, the results are different. Since our approach is less accurate, to acquire equivalent accuracy as Beck's method, our approach have to adopt smaller step size. The step size of our approach depends on the level of divergence of accuracy between the two approaches. If the accuracy of Beck's method is significantly better than our approach, the latter method might have to use very small step size, which will increase the time cost largely. It is well known that Beck's method is computationally intensive. In this work, we have found that the time costs of Beck's method is approximately 7 times larger than that of our approach with the same step size. Then, we have an estimation that our algorithm will be more efficient when the step size of our approach is bigger than 1/7 of the step size of Beck's approach.The computational results of Ravi Kumar's discrete method are presented in Fig. 8 and Fig. 13. As shown in these figures, the accuracy and time costs of Ravi Kumar's discrete method are influenced by the grid quantity instead of the step size. With the increase of the grid quantity, the tessellated surface gets closer to the original surface, and the computation errors generally decrease. However, the reorganization time increases obviously. The results show that the time needed to compute geodesic on tessellated surface is much less than that needed to reorganize data structure of the tessellated surface. The reorganization process is computationally expensive, so Ravi Kumar's discrete method is more suitable for computation of massive geodesics on one surface. In this case, the average reorganization time in each computation is reduced largely.As shown in Figs. 5–8 and Figs. 10–13, all of the three algorithms are able to compute geodesic on surface. Both of our algorithm and Beck's method have better accuracy than Ravi Kumar's discrete method as the former two directly use information of the original surface.Experimental results show that our algorithm is efficient, and the geodesics which are completely on the surfaces can be obtained. Meanwhile, we do not need to solve the differential equations of geodesic which are quite complicated.Next, in order to validate the effectiveness of our step size adjustment strategy, we will introduce another two examples. For convenience, our approach with step size adjustment strategy is called variable step algorithm, and with fixed step size is called fixed step algorithm. Then, variable step algorithm is compared with fixed step algorithm on accuracy and efficiency. The step size of the fixed step algorithm is determined by the minimum step size of the variable step algorithm.In the third example, the geodesics are computed on the surface given by the first example in three different directions. The results of the comparison are recorded in Table 2.As shown in Table 2, the accuracy of the fixed step algorithm is better than the variable step algorithm. This is due to the fact that the step size of the former algorithm is always not greater than the latter. However, as for the computational efficiency, the variable step algorithm has superiority. Furthermore, the number of discrete points on the geodesics computed by the variable step algorithm is smaller than half of that of the fixed step algorithm, which means the geodesics computed by the former algorithm are more compact.In the fourth example, we consider another2×2B-spline. The geodesics are computed on this surface in three different directions, as illustrated in Fig. 14. The results of the comparison are recorded in Table 3.As shown in Table 3, the comparison results of Example 4 in directionV1and directionV2are quite similar to the results of Example 3. However, as for directionV0, it takes the variable step algorithm more time on computational process even though the number of steps decreases, which means the reduced time costs due to the decrease of step numbers does not make up for the sum of the increased time costs in each step. As illustrated in Table 1 and Table 2, the average time costs in each step of the fixed step algorithm and the variable step algorithm are 1.2 ms and 2.1 ms, respectively. According to this, we have an estimate that the variable step algorithm is more efficient than the fixed step algorithm when the number of discrete points computed by the former algorithm is smaller than 4/7 of that of the latter.Generally speaking, our variable step algorithm works well for most of the cases. The location of discrete points obtained by this algorithm distributes reasonably according to the geometry of the surface, and this could contribute to outstanding reduction of the number of discrete points on the geodesic, which means the geodesic computed by the variable step algorithm is more compact.

@&#CONCLUSIONS@&#
