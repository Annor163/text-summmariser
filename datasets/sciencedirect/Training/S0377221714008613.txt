@&#MAIN-TITLE@&#
City streets parking enforcement inspection decisions: The Chinese postman’s perspective

@&#HIGHLIGHTS@&#
We view an administrative activity of issuing parking tickets in a city street setting as a revenue collection activity.The task of designing parking permit inspection routes is modeled as a revenue collecting Chinese Postman Problem.We demonstrate that our design of inspection routes maximizes the expected revenue.We investigate decision rules that allow the officers to adjust online their routes in response to the parking permits’ times.Our simulation shows that allowing an officer to selectively wait by cars until permit expires increases expected revenues between 10–69 percent.

@&#KEYPHRASES@&#
Chinese postman,Routing,Simulation,

@&#ABSTRACT@&#
We view an administrative activity of issuing parking tickets in a dense city street setting, like downtown Philadelphia or NYC, as a revenue collection activity. The task of designing parking permit inspection routes is modeled as a revenue collecting Chinese Postman Problem. After demonstrating that our design of inspection routes maximizes the expected revenue we investigate decision rules that allow the officers to adjust online their inspection routes in response to the observed parking permits’ times. A simple simulation study tests the sensitivity of expected revenues with respect to the problem’s parameters and underscores the main conclusion that allowing an officer to selectively wait by parked cars for the expiration of the cars’ permits increases the expected revenues between 10% and 69 percent.

@&#INTRODUCTION@&#
Consider a large city street grid, like downtown Philadelphia or New York City, represented as a graph G = (V, E), with parking segments along some streets in G and the common/familiar parking kiosk setting where the car owners buy parking time and place the receipt/permit on the dashboard of the car. The city administrators would like to maximize their street parking revenues by (a) collecting the parking fees from the legally parked cars – cars parked in designated parking spaces conforming to the parking times they purchased, and by (b) issuing parking tickets to cars parked in violation of the parking rules. Violation of the parking rules can take a number of forms. In our inquiry, we restrict the analysis to the time violations with respect to the parking times the car owners purchased and the parking tickets issued by the parking enforcement officers when observing parking time violations.In order to collect the revenues from the parking violations, the city administrators usually resort to employing a crew of enforcement officers assigned to patrol the city parking areas at any given time of day and night. Consider a single parking enforcement officer’s assignment. Without inferring any gender bias, we refer to the parking enforcement officer (from now on referred to as PEO) by the generic ‘he’. As such, the officer is usually assigned a subgraph of city streets, say G′(V′, E′)⊂G, and he has to select (or is provided) an itinerary that traverses all the edges (it is edges since the PEO can traverse a street segment in either direction using the sidewalk) in G′ where paid parking is allowed. We assume for simplicity that the subgraph G′ is a connected component of G and all edges of E′ have to be regularly inspected by the PEO during his patrol, both for public safety reasons and for the main function of parking permit enforcement. Again, the edges in E′ correspond to the segments of the streets along which paid parking is allowed. The PEO inspects the cars’ parking permits by walking along streets’ sidewalks. Since a PEO can walk on any sidewalk in either direction the graphs G and G′ are considered to be undirected. If paid parking is allowed on both sides of a given street segment the graph G′ is a multigraph with two edges connecting the corresponding pair of nodes in V′. From now on we will refer to G′ as a multigraph. In case it is desired to inspect the edges of the undirected multigraph G′ with different frequencies, we add without loss of generality appropriate copies of these edges to G′. The PEO does not know in advance the number, density, and individual parking times purchased for the parked cars. As he traverses the multigraph G′, he has to decide how, in what order of street segments (edges in G′), to traverse the streets’ segments and at what rate; should he stop and wait next to a car whose parking time on the permit is about to expire or continue to the next car? Essentially, at each car a PEO has an option to wait, return to previously inspected cars, or continue walking to inspect the ‘next’ car. It corresponds to processing parking cars’ information in real time and represents a real-time (online) optimization problem with the objective of collecting the maximum expected revenues from a PEO’s patrol assignment. At least that would be one of a number of the city administrators’ objectives to consider.Optimizing the traversal order of a multigraph’s edges is not a new problem. Given a connected multigraph G′(V′, E′) with ‘length’ weights w(e) for each edge e ∈ E′, the problem of designing the shortest tour – a path or a circuit, that traverses each edge in E′ at least once is well known under the heading of the Chinese Postman Problem (CPP) and dates back to 1962 (http://www.nist.gov/dads/HTML/chinesePostman.html).In our problem of designing a traversal scheme for a single PEO, we need to define a few more concepts. We associate with each edge e in the street multigraph G′ three weights; the weight w(e) expresses the expected revenue collected from edge e ∈ G′,w^(e)represents the expected traversal time of edge e while inspecting the cars parking permits, andw(e) is the dead-heading time for e (the traversal time with no inspections). The traversal minimization CPP problem on G′ refers to the weightsw^(e)and dead-heading weightsw(e). Our parking ticket revenue management problem is defined more formally below. Note that dead-heading edges might have to be added to E′ when solving a CPP on G′ as a necessary part of the CPP solution. We assume for now that in a planar graph such as a city street graph, we can construct an optimal CPP solution that traverses an edge in a dead-heading mode, when it is required, immediately after traversing it in a ‘working’ mode. We revisit this assumption in the paper’s Summary section. Observe that with the assumption of triangle inequality time traversal matrix for G′ for both ‘working’ mode times and dead-heading times, in an optimal CPP solution any edge in G′ will have at most one dead-heading traversal.Motivation: The potential of increased revenues due to more efficient issuing of parking tickets may constitute a non-negligible contribution to social economic well-being for many cities. Cities like New York, Philadelphia, Chicago, etc., are in great need for revenues and are desperately searching for innovative ways to raise additional revenues. The basic concept of CPP for an efficient traversal of city streets is well known to municipal managers from, for instance, planning of garbage collection operations (Beltrami and Bodin, 1974). Implementing some of the findings of this study in the daily routine operation of PEOs is rather straightforward.The solution presented in this paper has the potential to increase revenue by about 10–69 percent. The significance of increasing parking ticket revenues by even 10 percent is invaluable for any city. Quoting from one source on parking fines (http://money.cnn.com/2004/05/03/news/parkingfinesup/): “A typical fine in Manhattan now can make your wallet $65 lighter. Parking at a fire hydrant or bus stop will run $115. The city’s parking violations bureau expects to collect $562 million this year, up 48 percent from 2002. Los Angeles will collect $110 million in 2004, up 20 percent from two years ago. Angelenos endure some of the highest fines in the country; parking illegally in a disabled persons zone can draw a whopping $355 fine. Another beneficiary of higher parking fines is Chicago. Revenue has climbed 28 percent from 2002 to $141 million.”The significance of increasing parking related revenues can be illustrated by considering the city of Pittsburgh with population of about 0.3 million (http://www.census.gov/newsroom/releases/archives/2010_census/cb11-cn74.html). Based on the information from http://www.city.pittsburgh.pa.us/pghparkingauthority/assets/09_PPA_Annual_Report.pdfand http://www.post-gazette.com/pg/11248/1172336-53-0.stm?cmpid=localstate.xml, the total revenue of Pittsburgh Parking Authority from parking permit purchases and parking ticket revenues was $42 million. The city issued 280,000 tickets. The parking authority collected about $5 million from all parking-related fines with $2 million from expired meter fines. In terms of ticket-related variable cost, the facility and parking court management expenses were only $2 million (i.e. the variable cost is only 40 percent of all fines revenue). If we scale the number to match large cities, e.g. Manhattan, the 10 percent increase would translate to several million dollars.In 2003, the city of Berkeley collected $6.9 million from parking citations, out of this amount, $2.3 million was attributed to tickets issued for expired meters (http://www.berkeleydailyplanet.com/article.cfm?archiveDate=05-14-04&storyID=18852). In 2009, the city of Milwaukee issued nearly 150,000 tickets for expired meters which would have brought in $3.3 million if all the tickets were paid (http://www.bizjournals.com/milwaukee/print-edition/2011/01/07/expired-downtown-parking-meters.html?page=all). In terms of cost information, citing the Seattle Parking Management Study of September 2002 (96 page report), “The parking ticket revenue generated by a Parking Enforcement Officer (PEO) is approximately three times the cost of labor and necessary equipment. ... the average PEO generates $240 per hour in ticket revenue (collected revenue), ...”.The outline of this paper is as follows: Section 2 discusses the structure of our problem relative to other problems examined within Operational Research. Section 3 describes our notation and introduces the problem of designing a PEO route over G′ as a CPP. In Section 3.1 we start with the analysis of local inspection decisions regarding which car to inspect next as a function of the remaining times for the cars inspected so far on a given street segment. We begin by considering an option of waiting in front of a parked car with a valid permit anticipating its permit to expire before its owner’s arrival. We denote this option as memory size = 1. This operational option can be extended by allowing to step back to the last previously inspected car (memory size = 2). The general case of allowing to step back to any previously inspected car or just inspecting a new car is examined in Section 3.1.3. A simple simulation study for the CPP routing with inspections with online local decisions is presented in Section 4. In Section 5 we present the results. In the summary and discussion sections (Section 6) we examine the related technological issues and the feasibility of implementation.In this section, we discuss two topics: previous research on related problems involving the Chinese Postman Problem, and the structure of our problem in relation to some other problems examined within Operational Research.As mentioned before, the Chinese Postman Problem dates back to 1962 (see Dror, 2000, for the different aspects of related arc routing problems and for a more recent account see Corberán and Prins, 2010). Formally, a CPP is asking for a shortest closed circuit tour of a graph that visits (traverses) each edge and arc in that graph at least once. An optimizing solution for the CPP, if the multigraph G′ is undirected (the adjacent nodes in V′ are connected only by edges) or completely directed (has only arcs connecting the different nodes in V′), is obtainable in quadratic time in |V′|. Finding an optimal CPP solution in the case that G′ is a mixed graph (some node pairs are connected by edges and some by arcs) is NP-hard (Papadimitriou, 1976).The problem of designing an online algorithm that maximizes the expected total revenue collection in a CPP, like the one representing parking revenue collection, has not yet to our knowledge been introduced in the literature. However, a so-called orienteering version of a related problem has been examined by Feillet et al. (2005). There are several other papers on similar problems. Archetti et al. (2010) studied the Undirected Capacitated Arc Routing Problem with Profits (UCARPP). The UCARPP asks for a set of routes that maximize the total collected profit while satisfying the constraints on the route duration and on the vehicle capacity. Another capacitated variation of the orienteering CPP problem, called Maximum Benefit Chinese Postman Problem (MBCPP), was studied by Malandraki and Daskin (1993),Pearn and Wang (2003),Pearn and Chiu (2005), and recently by Corberán et al. (2013). The MBCPP asks for a tour that maximizes net benefit while traversing some edges a certain number of times. Aráoz et al. (2009) describe an algorithm for solving the Prize-collecting Rural Postman Problem (PRPP). Unlike CPP, the PRPP does not require traversing all edges and its profit collection on an edge is taken into account only the first time that the edge is traversed. Aráoz et al. (2009) modeled their problem version as a linear integer program.In our problem, as a PEO traverses a road network, he has to decide how, in what order of street segments, to traverse the streets’ segments and at what rate. At each car the PEO has an option to wait, return to previously inspected cars, or continue walking to inspect the next car. This setting is similar to the work of Dror and Stulman (1987) where a one dimensional robot movement control mechanism has been examined in a textile machine setting. A more elaborate examination was undertaken in the same robot movement setting by L’Ecuyer et al. (1991) modeling it as a Markov renewal decision process with a computational approach based on dynamic programming.We note that, in the broader context of sequential resource allocation problems, the car parking enforcement inspection decisions might be viewed as a multi-armed bandit problem (see Katehakis and Veinott, 1987). This class of problem is concerned with allocating one or more resources among several alternative (competing) projects by making decisions that sacrifice current gains with the prospect of better future rewards. Such broad view is not attempted here because of the nature of the underlying combinatorial structure of the CPP.Without significant loss of generality, we assume that the car parking spaces on any given street segment (segment capacity) are identical in terms of single length ‘consumed’ as a parking space, and we measure a parking segment’s capacity in car units. Our analysis is restricted to a single PEO’s subgraph G′ and a time interval [t0, td], td− t0 = S > 0, with S large enough to represent a PEO’s working shift duration. We do not consider the problem of partitioning an entire city car parking inspection graph G into a set of single PEO assigned subgraphs G′s, nor do we consider the selections of PEOs’ shift durations. We note that the corresponding graph partitioning problem is an important and mathematically ‘rich’ topic that is left for future study.We assume that it takes a constant time a > 0 to issue a parking ticket irrespective of the car location and that a ≪ S. We use t as time value (t ∈ [t0, td]). A parking space could be either empty or occupied by a car. At time t a parked car could be in either of two states: in compliance state with a valid parking permit, or in a parking violation state. Note that for a CPP it is immaterial to consider/introduce a starting node of a PEO’s shift in V′ and it is also immaterial if G′ is a graph or a multigraph. For simplicity, we refer to G′ as a graph.Some notation and definitions:G′(V′, E′)a connected subgraph with |V′| = v > 1 nodes and |E′| edges.number of parking spaces, ordered from 0 to ne− 1, available on edge e ∈ E′. (ne∈N0.)total number of parking spaces in G′.N=∑e∈E′ne.an a priori likelihood (probability) that parking space i ∈ {0, 1, …, ne− 1} on edge e is empty at time t. We assume for now that Zie(t) = z for all t, i, and e. That is, every parking space has the same likelihood to be empty. Zie(t) is a Bernoulli distribution. If we take a snapshot of G′(V′, E′) at any time t, there will be zN empty parking spaces and (1 − z)N occupied parking spaces.a probability that a car in a non-empty parking space i on edge e is in a parking violation state at time t. The rationale for i, e, and t dependencies is that certain parking spaces may be more likely to have a car in violation state in some times of day. We assume that all owners of cars in parking space i on edge e share the same probability distribution regarding a car owner’s return time with respect to permit duration and all permits at any location are of the same time duration L. Note that Zie(t) and Pie(t) are two independent probability density functions. Pie(t) can be calculated as shown below.Let y be a continuous random variable representing the time that the PEO arrives by the parked car for inspection. Because the PEO traverses the graph G′(V′, E′) several times a day, and cars may arrive and leave many times in each parking space, we assume that the probability density function of y is a uniform distribution u( y) between 0 and Y, and Y ≥ Xie. Probability density functions viet(x) and u( y) are independent. Note that y can also map to t by adding the time the car arrived tcto y.The event of the PEO’s arrival is equivalent to drawing y randomly. To calculate Pie(t), we are only interested in the probability that is conditional upon the parking space being non-empty, i.e., y < x.Pie(t)=Pr(y>L|y<x)=Pr(y>L,y<x)Pr(y<x)=∫LXiet∫Lxviet(x)u(y)dydx∫0Xiet∫0xviet(x)u(y)dydx.Without loss of generality we assume that viet(x) = v(x) and Xiet= X. Hence, Pie(t) is the same for all t, i, and e. Pie(t) = p where(1)p=∫LX∫Lxv(x)u(y)dydx∫0X∫0xv(x)u(y)dydx.If we take a snapshot of G′(V′, E′) at any time t, the expected number of cars in violation state is(1−z)∑e∈E′∑i=0ne−1Pie(t)=(1−z)pN.More notation:ξie(t)the time information, observed at t, about how long has car i been parked in parking space i on edge e. If car c arrives for parking in parking space i on edge e at tc< t, ξie(t) = t − tc. ξie(t) ≥ 0. If the parking space is empty, ξie(t) ≡ 0.the ‘observed’ time at t until parking permit’s expiration for a car in parking space i on edge e. If car c arrives for parking in parking space i on edge e at tc< t, sie(tc) = L and sie(t) = L − ξie(t) ≥ 0. sie(t) = 0 implies that at time t the car in parking space i on e is in a parking violation state. If the parking space is empty, sie(t) ≡ ∞.Given that a car is in a compliance state at time t′, the probability that the car’s owner will return to the car on or before switching to aparking violation state isH^ie(t′).(3)H^ie(t′)=Hie(t′,t′+sie(t′))=Pr(x≤L|x>ξie(t′))=∫ξie(t′)Lv(x)dx∫ξie(t′)Xv(x)dx.Proposition 1Assume that at a given time t ∈ [t0, td] the likelihood of an expired permit (a parking violation state) at any parked car in G is represented by probability Pie(t) = p and the likelihood of an empty parking space in G is represented by probability Zie(t) = z. Then, given that the PEO has no memory regarding the parking compliance time left for the cars he inspected so far, it is optimal for the PEO to follow the path found as the optimal solution to corresponding CPP on subgraph G′. That is, to traverse G′ in the shortest time.The PEO has no memory regarding the parking compliance time left for the cars on the path that he has been traversing so far, Pie(t) = p, and Zie(t) = z for all t, i, and e ∈ G′. The PEO will traverse a segment of a CPP solution in a dead-heading mode as dictated by the optimal CPP solution after the segment has already been inspected for parking violations in that CPP cycle. When traversing segment e in a dead-heading mode the PEO does not inspect the permit status of cars parked along e.Let each parking ticket issued to a car in violation state generate a revenue of r dollars. Hence, the expected revenue collected from any single parking space is (1 − z)pr dollars per tour cycle. Thus, by strictly executing the optimal CPP traversal solution, the PEO generates an expected revenue of (1 − z)prN from each tour cycle.Assume that to observe the parking status of a car (inspecting the parking permit) takes a constant time b > 0, it takes a constant time a > 0 to issue a parking ticket, and a timew(e) to dead-head through the edge e ∈ E′. Thus,w^(e)=w̲(e)+(1−z)(pa+b)neis the time required to inspect and issue parking tickets along the edge e ∈ G′. Assume also that the PEO executes an optimal CPP tour that may have dead-heading edges. Letαe*≥1represent the number of times edge e is used in one optimal CPP tour. Thus, the expected tour time is∑e∈E′αe*w̲(e)+(1−z)(pa+b)N. During the PEO’s shift duration S, he would expect to executeS∑e∈E′αe*w̲(e)+(1−z)(pa+b)Ntour cycles. Therefore the expected revenue per shift would be(1−z)SprN∑e∈E′αe*w̲(e)+(1−z)(pa+b)Ndollars.Consider the case of the PEO deciding to inspect the graph G by traversing G in a suboptimal CPP fashion of a longer time duration than the optimal CPP tour. For simplicity assume that the suboptimal tour requires additional dead-heading edges withαe≥αe*representing the number of times edge e is traversed in the suboptimal tour versus the optimal one. The expected revenue for each tour cycle is still (1 − z)prN. The expected suboptimal tour time is∑e∈E′αew̲(e)+(1−z)(pa+b)N. Thus, during the PEO’s shift duration S, he would expect to generate(1−z)SprN∑e∈E′αew̲(e)+(1−z)(pa+b)Ndollars per shift.Sinceαe≥αe*,the revenue of generated by the suboptimal CPP tour is lower than or equal to the optimal CPP.□For notation simplicity, letEr/t=(1−z)prN∑e∈E′αe*w̲(e)+(1−z)(pa+b)Nrepresent the expected revenue per unit time given an expected duration of optimal CPP solution.Now assume that the PEO observes the compliance time left for the car just inspected and has the option of waiting by the car for the parking permit to expire before its owner returns or continue to the next car (Fig. 1, left). (A PEO may remember the compliance time left on more than one car. However, in this section, we assume a memory of 1 thus not allowing the PEO’s return to a previously inspected car.)Consider the case that the PEO inspects car c in parking space i on edge e at time t′ where sie(t′) > 0 time left until its parking permit expires. Once the parking permit expires, the PEO spends a > 0 time issuing a ticket. The expected revenue for waiting sie(t′) unit time and issuing the ticket isr(1−H^ie(t′)).Clearly, if the owner of the car comes back before the parking permit expires and the PEO is waiting in front of it, the PEO would at that point continue to the next car on his CPP tour. But if the owner of the car comes back while the PEO is still issuing the ticket, the owner may not convince the PEO to discard the ticket. The waiting time function can be defined as(4)wiet′(x)={sie(t′)+aifx>Lx−ξie(t′)ifx≤Lwhere x is a continuous random variable representing the car owner’s return time after parking.Hence, the expected time for waiting in front of car c is(sie(t′)+a)(1−H^ie(t′))+∫ξie(t′)L(x−ξie(t′))v(x|x>ξie(t′))dxwhere v(x|x > ξie(t′)) is essentially a truncated distribution of v(x) with support (ξie(t′), X]. Thus, we divide the resulting distribution by 1 minus the integral up to the truncation point ξie(t′) to ‘normalize’ the distribution results.For instance, let V(x) be a cumulative probability distribution of v(x).(5)v(x|x>ξie(t′))={2x(1−V(ξie(t′)))mXif0≤x≤m2(X−x)(1−V(ξie(t′)))(X−m)Xifm<x≤XWe consider the expected revenue per unit time in comparison to the expected revenue per unit time from traversing the CPP path without waiting at car c, which is Er/t. Therefore, the PEO should wait in front of car c only if(6)r(1−H^ie(t′))(sie(t′)+a)(1−H^ie(t′))+∫ξie(t′)L(x−ξie(t′))v(x|x>ξie(t′))dx≥Er/tBy assuming the same distribution of v(x) for all cars, we can calculate the time slimit such that the PEO should wait by the car at i only if sie(t) < slimit.Suppose that it is optimal for the PEO to wait at time t′. Then, it is also optimal for him to wait at time t′ + δ where 0 < δ < sie(t′) and sie(t′ + δ) > 0. Because sie(t′) > sie(t′ + δ),(7)H^ie(t′)>H^ie(t′+δ)(8)∫ξie(t′)L(x−ξie(t′))v(x|x>ξie(t′))dx>∫ξie(t′+δ)L(x−ξie(t′+δ))v(x|x>ξie(t′+δ))dxNote that the expected revenue per shift of duration S given the option of waiting by cars with sie(t) > 0 is greater or equal to the expected revenue per shift without the option of waiting.Next, consider the case when the PEO remembers the parking permit’s expiration time for the car inspected last before the present car (Fig. 1, right). In this case, the PEO has the choice to wait at the current car, to step back to the previous car, or to move to the next car. For simplicity, assume that once he moves on to the next parking segment (different edge in G′), he cannot recall the compliance times left for any of the cars on the previous segment.Denote the time taken for stepping back to the previous car as λ > 0 (approximately, λ =w(e)/neunit time) and consider that the PEO inspects car i on edge e at time t′. Suppose that cars at i and i − 1 have sie(t′) > 0 and si − 1, e(t′) time left until the parking permits expire, respectively. Should the PEO wait in front of car i or car i − 1, or not wait at all? If he waits at car i and issues a ticket, should he still consider waiting at car i − 1 afterward?In our online heuristic rules we assume that the PEO makes two sequential decisions. The first decision is to choose among cars i − 1, i, and i + 1, the next parking space that has not been inspected yet. If he walks to car i − 1, waits, and issues a ticket, then he will make a second decision choosing between the remaining two cars, i and i + 1. If he walks to car i, waits, and issues a ticket, then he will have to decide between the remaining two cars, i − 1 and i + 1. Each of the two decisions will attempt to maximize the expected revenue per unit time.To calculate the expected revenue per unit time for the option of pursuing car i − 1, we divide the expected revenue by the expected time necessary for pursuing car i − 1. At time t′, if the remaining time on car i − 1’s permit si − 1, e(t′) is greater than λ which is the time to reach i − 1, then the expected revenue is the ticket revenuer(1−H^i−1,e(t′))or r(1 − Hi − 1, e(t′, t′′)) where t′′ = t′ + si − 1, e(t′). If the remaining time on the permit is less than the time the PEO takes to walk to it, then the expected revenue is the ticket revenue r times 1 minus the probability of the car owner arrival between t′ and t′′ = t′ + λ which is r(1 − Hi − 1, e(t′, t′′)). Hence, the expected revenue can be written as r(1 − Hi − 1, e(t′, t′′)) where t′′ = t′ + max {si − 1, e(t′), λ}.Consider the first decision. The function for the PEO’s time spent on car i − 1, corresponding to the owner’s return time after parking, can be defined as:(9)wi−1,et′(x)={2λifx≤ξi−1,e(t′+λ)2λ+x−ξi−1,e(t′+λ)ifξi−1,e(t′+λ)<xandx≤L2λ+si−1,e(t′+λ)+aifξi−1,e(t′+λ)<xandx>LThat is, if the owner of car i − 1 walks back to the car before the PEO walks to the car (x ≤ ξi − 1, e(t′ + λ)), the PEO would have spent in total of 2λ unit time which is the time walking to car i − 1 and from car i − 1 back to car i. If the owner of car i − 1 arrives while the PEO is waiting in front of the car (ξi − 1, e(t′ + λ) < x ≤ L), the PEO would have spent walking time plus the waiting time until the owner comes back. If the owner of car i − 1 arrives after the permit expired, the PEO would have spent walking time plus waiting time and plus the ticket issuing time.The expected revenue per unit time of car i − 1 isEi−1=r(1−Hi−1,e(t′,t′′))Ex[wi−1,et′(x)]whereEx[wi−1,et′(x)]=2λ+∫ξi−1,e(t′+λ)L(x−ξi−1,e(t′+λ))v(x|x>ξi−1,e(t′))dx+(si−1,e(t′+λ)+a)(1−Hi−1,e(t′,t′′)).We compare it with the expected revenues per unit time at car i which isEi=r(1−H^ie(t′))(sie(t′)+a)(1−H^ie(t′))+∫ξie(t′)L(x−ξie(t′))v(x|x>ξie(t′))dx.Hence, the PEO should wait at car i ifEi≥Er/tandEi≥Ei−1.On the other hand, the PEO should wait at car i − 1 ifEi−1≥Er/tandEi−1≥Ei.Once the above outcome occurs (the PEO waits) then the next decision will be considered/evaluated when either a parking violation ticket has been issued or the car owner returns to the corresponding car before its parking permit expiration time. Clearly, the availability of the option of stepping back leads to higher expected revenue than the previous case with the options to wait or continue since it subsumes the former.Now consider the case of a PEO who remembers the expiration times for all the cars inspected on edge e. The PEO can also visually observe which of the inspected cars are still parked and which have left their parking spaces. In this case, he has to choose whether to wait at the current car, to step back to any of the previous cars on that edge, or to walk to the next car on the current edge. As before, assume that it takes λ =w(e)/neto walk to the next car on the same edge.At each car in a compliance state, the PEO can go back to any of the previously inspected cars, stay put at the current car, or continue to inspect the next car. This setting has a very similar flavor to the work of Dror and Stulman (1987).Consider the following case. Say the PEO is currently positioned at car j. Let car at i < j have sie(t′) > 0 time left before its permit expires. The PEO should walk back to car i only if the expected revenue per unit time of pursuing car i is higher than the expected revenue per unit time earned when following the CPP path.To calculate the expected revenue per unit time for the option of pursuing car i, we divide the expected revenue by the expected time necessary for pursuing car i. At time t′, if the remaining time on car i’s permit sie(t′) is greater than λ|j − i| which is the time to reach i, then the expected revenue is the ticket revenuer(1−H^ie(t′))or r(1 − Hie(t′, t′′)) where t′′ = t′ + sie(t′). If the remaining time on the permit is less than the time the PEO takes to walk to it, then the expected revenue is the ticket revenue r times 1 minus the probability of the car owner arrival between t′ and t′′ = t′ + λ|j − i| which is r(1 − Hie(t′, t′′)). Hence, the expected revenue can be written as r(1 − Hie(t′, t′′)) where t′′ = t′ + max {sie(t′), λ|j − i|}.Given that the PEO is at car j at time t′, the function for the PEO’s time spent on car i, corresponding to the owner’s return time after parking, can be defined as:(10)wiet′(x)={2λ|j−i|ifx≤ξie(t′+λ|j−i|)2λ|j−i|+x−ξie(t′+λ|j−i|)ifξie(t′+λ|j−i|)<xandx≤L2λ|j−i|+sie(t′+λ|j−i|)+aifξie(t′+λ|j−i|)<xandx>LThe expected time spent for the option of pursuing car i while the PEO is at j is2λ|j−i|+∫ξie(t′+λ|j−i|)L(x−ξie(t′+λ|j−i|))v(x|x>ξie(t′))dx+(sie(t′+λ|j−i|)+a)(1−Hie(t′,t′+max{sie(t′),λ|j−i|})).Hence, the PEO should walk back to car i if the expected revenue per unit time spent is greater than or equal to Er/t.Now, consider when the PEO has more options than just walking to a certain car as shown in Fig. 2.Previously, the PEO was positioned at car 5 (he had inspected cars 1, 2, 3, 4, and 5, but no ticket was issued) but has decided to walk back to car 3. Say he issued a ticket to car 3. At this time t′, he knows of the time left on cars 1, 2, 4, and 5. He may choose to walk to any of them or continue to car 6, which he has not yet inspected. The simplest rule is for him to go to the car that promises the highest expected revenue per unit time. The calculation has to take care not to double count the walking time. That is, when he was at car 5 and decided to walk back to car 3, he has already accounted for the time walking from car 5 to car 3 and back from car 3 to car 5. Therefore, when he is at car 3 and evaluating this rule for car 5, he should not include the time walking from car 3 to car 5. Hence, at time t′, he can calculate the expected time spent at cars 1, 2, 4, and 5 relative to his current location (car 3) as:(11)car1:2λ|3−1|+∫ξ1e(t′+λ|3−1|)L(x−ξ1e(t′+λ|3−1|))v(x|x>ξ1e(t′))dx+(s1e(t′+λ|3−1|)+a)(1−H1e(t′,t′+max{s1e(t′),λ|3−1|})).car2:2λ|3−2|+∫ξ2e(t′+λ|3−2|)L(x−ξ2e(t′+λ|3−2|))v(x|x>ξ2e(t′))dx+(s2e(t′+λ|3−2|)+a)(1−H2e(t′,t′+max{s2e(t′),λ|3−2|})).car4:2λ|3−4|+∫ξ4e(t′+λ|3−4|)L(x−ξ4e(t′+λ|3−4|))v(x|x>ξ4e(t′))dx+(s4e(t′+λ|3−4|)+a)(1−H4e(t′,t′+max{s4e(t′),λ|3−4|})).car5:2λ|3−5|+∫ξ5e(t′+λ|3−5|)L(x−ξ5e(t′+λ|3−5|))v(x|x>ξ5e(t′))dx+(s5e(t′+λ|3−5|)+a)(1−H5e(t′,t′+max{s5e(t′),λ|3−5|})).Using our heuristic rules, the PEO will choose the car with the highest expected revenue per unit time. Below we describe a numerical experiment – a simple simulation study – that ‘calculates’ the expected revenue per shift when implementing our heuristic rules.We chose the graph depicted in Fig. 3for our numerical experiment. This graph could be translated into a street grid that surrounds two city blocks and cars are allowed to park on one side of each street. The graph in Fig. 3 is not Eulerian. We have to dead-head e3 to transform this graph into an Eulerian graph to allow for the construction of an optimal CPP solution. The optimal CPP solution requires the PEO to walk from the top-left node and follow the tour, e1 → e4 → e3 → e3 (reverse) → e7 → e6 → e5 → e2. He traverses e3 in reverse direction in a dead-heading mode.In the experiment we assume a constant number of cars on each edge. Specifically, we tested with neequals 25. That is, there are 175 parking spaces in total in the graph. The parameters that we used in our numerical experiment are as follows:•Each parking permit is valid for exactly 60 minutes (L = 60).Each violation ticket generates a revenue of r = 30 dollars.The PEO’s shift length S is 8 hours.The PEO spends b = 0.5 minutes inspecting the time left on each parking permit.The PEO spends a = 5 minutes issuing a ticket.Dead-heading timew(ek) on any edge of the graph is 6.25 minutes (λ = 0.25).These parameters were selected based on observing parking rules in various cities.We experiment with a PEO remembering expiration times for various numbers of parked cars, Bernoulli probability of empty parking spaces parameter z and time length of permits L.For simplicity, we chose a triangle distribution to represent the distribution of the time between the parking of a car and the return of its owner, with a mode m as 55, which is 5 minutes before the car turns into violation state and the end point X is 90, which is 30 minutes after the car turns into violation state.

@&#CONCLUSIONS@&#
