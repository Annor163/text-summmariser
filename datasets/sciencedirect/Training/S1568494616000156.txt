@&#MAIN-TITLE@&#
Mining fuzzy temporal association rules by item lifespans

@&#HIGHLIGHTS@&#
We propose a fuzzy temporal association rule mining algorithm (FTARM).Information inside transactions can be found correctly by using lifespan of items.Three datasets are used to show the FTARM is effective.Experiments show that FTARM can derive more rules than FAR.The derived rules are better than FAR in terms of supports and confidences.

@&#KEYPHRASES@&#
Fuzzy set,Fuzzy data mining,Fuzzy temporal association rule,Item lifespan,

@&#ABSTRACT@&#
Data mining is the process of extracting desirable knowledge or interesting patterns from existing databases for specific purposes. In real-world applications, transactions may contain quantitative values and each item may have a lifespan from a temporal database. In this paper, we thus propose a data mining algorithm for deriving fuzzy temporal association rules. It first transforms each quantitative value into a fuzzy set using the given membership functions. Meanwhile, item lifespans are collected and recorded in a temporal information table through a transformation process. The algorithm then calculates the scalar cardinality of each linguistic term of each item. A mining process based on fuzzy counts and item lifespans is then performed to find fuzzy temporal association rules. Experiments are finally performed on two simulation datasets and the foodmart dataset to show the effectiveness and the efficiency of the proposed approach.

@&#INTRODUCTION@&#
Data mining is commonly used for extracting association rules from transaction data. An association rule is an expression X→Y, where X and Y are a set of items. It means that in the set of transactions, if all the items in X exist in a transaction, then there is a high probability that Y is also in the transaction [1]. Most previous studies have focused on binary-value transaction data. Transactions in real-world applications, however, usually consist of quantitative values. Also, each item may have a publication time interval. This means that each item has a lifespan. Thus, designing a sophisticated data-mining algorithm able to deal with this type of data is a challenge for researchers in this field.The fuzzy set theory has been used more and more frequently in intelligent systems because of its simplicity and similarity to human reasoning [7,13,19,28,29]. Several fuzzy data mining algorithms for inducing rules from a given set of data have been designed and used with good results for specific domains [6,11,15,27]. For example, Chan et al. proposed an F-APACS algorithm to mine fuzzy association rules [6]. Kuok et al. proposed a fuzzy mining approach to handle numerical data in databases and derived fuzzy association rules [12]. At nearly the same time, Hong et al. proposed a fuzzy mining algorithm to mine fuzzy rules from quantitative transaction data [11]. Yue et al. then extended the above concept to find fuzzy association rules with weighted items [27].However, those fuzzy data mining approaches did not consider item lifespans. Although Lee proposed two algorithms for discovering fuzzy temporal association rules and fuzzy periodic association rules using fuzzy calendar algebra [21], the lifespan of each item was not considered. Generally speaking, each product has its own lifespan in a supermarket. If the traditional data mining approach is applied to mine rules, then some new products will not become frequent itemsets because the supports of those items cannot reach the minimum support threshold such that some associations among them will be missed. In this paper, we thus propose a fuzzy mining algorithm for deriving linguistic temporal association rules from a given temporal transaction database by considering item lifespans. It first transforms each quantitative value into fuzzy sets using given membership functions. During the transformation process, the lifespans of the items are collected and recorded in the temporal information table. The algorithm then calculates the scalar cardinality of each linguistic term of the items. The support values of items are calculated according to their corresponding periods such that the real importance of each item can be represented. The mining process, which is based on fuzzy counts, is then performed to find fuzzy temporal association rules, which can not be mined by the existing (traditional) fuzzy rule mining approaches since all the transactions are considered to calculate support values of items. Experiments are also performed using two simulation datasets and the foodmart dataset [12,22] to show the effectiveness and efficiency of the proposed approach. There are two contributions of the proposed approach. The first one is that we propose in fuzzy data mining the first work which takes the lifespans of products into consideration such that the associations of items can be exhibited more correctly. The second one is that by the proposed approach more useful fuzzy rules can be derived in terms of average supports and confidences through the experimental evaluation on some simulation and real datasets.The rest of this paper is organized as follows. The problem statement and some definitions are described in Section 2. Some related mining approaches are reviewed in Section 3. The details of the proposed fuzzy temporal association rule mining algorithm are given in Section 4. An example that illustrates the use of the proposed algorithm is described in Section 5. Experiments that demonstrate the performance of the proposed approach are stated in Section 6. Conclusions and suggestions for future work are discussed in Section 7.Since new products are continuously added to the market, each item in a transaction has its own lifespan. Some related terms such as temporal item, temporal transaction database, and temporal support are defined as follows [8].Definition 1Temporal ItemLet P=<p1, p2, …, pn> be a sequence of continuous time periods such that each period has a particular time granularity, e.g., day, week, month, year, etc. ∀ i, j, n, 1≤i≤j≤n, pioccurs before pj, which is denoted as pi≤pj. A temporal item x is an item with a starting period, denoted as S(x). The starting period of a temporal itemset X is then defined as S(X)=max({S(x)}), where x∈X. The set of temporal items is denoted as I such that ∀x∈I, S(x)≤pn.A temporal transaction, T, is a subset of I, which means T ∈ I. The period in which T occurs is denoted O(T). Then, D={T | p1≤O(T)≤pn} is a temporal transaction database on I over P.Let D be a temporal transaction database on I over P. Let X be a set of temporal items. The temporal support of X, with respect to the subset of D from the period pi, denoted as TSup(X, pi), is defined as formula (1):Then the temporal support of X, denoted as TSup(X), can be computed as TSup(X, S(X)). That is, the temporal support of itemset X is the ratio of the number of transactions that contain temporal itemset X to the total number of transactions that occur from S(X).From the above definitions, it can be seen that many previous studies have focused on handling binary-valued data. Transaction data, however, usually have quantitative values. We thus define the temporal quantitative item and temporal quantitative transaction database by extending Definitions 1 and 2. The definitions are as follows.Definition 4Temporal Quantitative ItemLet P=<p1, p2, …, pn> be a sequence of continuous time periods such that each period has a particular time granularity, e.g., day, week, month, year, etc. ∀ i, j, n, 1≤i≤j≤n, pioccurs before pj, which is denoted as pi≤pj. Temporal quantitative item x’ consists of temporal item x and quantitative value v, denoted as (x, v), where v is a positive real number. The temporal item is a special kind of temporal quantitative item. The starting period of a temporal quantitative item x′, denoted as S(x′), is the same as temporal item x, which is S(x). In the same way, the starting period of a temporal quantitative itemset X′ is S(X′)=max ({S(x′)}), where x∈X. The set of temporal quantitative items is denoted as I′ s.t. ∀ x′∈I′, S(x′)≤pn.Temporal quantitative transaction T′ is a subset of I′, which means T′∈I′. The period that T′ occurs is denoted as O(T′). Then, D′={T′ | p1≤O(T′)≤pn} is temporal quantitative transaction database I′ over P.For example, Table 1is a temporal quantitative transaction database with five temporal quantitative transactions over two periods, P={P1, P2}. The time granularity used in this example is day. There are five temporal items. That is I={A, B, C, D, E}. Each temporal quantitative item has its own starting period, e.g., S(A)=1 and S(A, D)=2. Each temporal quantitative transaction also has its own starting period, e.g., the starting period O(T′) of the 4th transaction is 2.In addition, since fuzzy theory is also commonly used to deal with quantitative values, in this paper, we thus utilize fuzzy theory to transform quantitative values into a more friendly representation that we can easily understand. We assume a given set of membership functions, and that quantitative value vj(i), which is the quantitative value of temporal item x (=Ij) in transaction T′(i), can be transformed into a fuzzy set represented asfji(i)Rj1+fj2iRj2+⋯+fjliRjl, where Rjkis the kth fuzzy region (linguistic term) of temporal item Ij, fj(i) is vj(i)’s membership value in region Rjk, and l (=|Ij|) is the number of fuzzy regions for Ij. Then, we define the fuzzy temporal support of a fuzzy region and fuzzy temporal confidence as follows:Definition 6Fuzzy Temporal SupportFuzzy temporal support of a fuzzy region Rjkof a temporal item x (=Ij) is defined as formula (2):Let s be a temporal q-itemset with items (s1, s2, …, sq), q≥2. Similarly, fuzzy temporal support of fuzzy regions Rsof temporal itemset X (=s) is defined as formula (3):(3)tFuzzySupports=counts/|{T′O(T′)≥S(s),T′∈D′}|where countsis the scalar cardinality of fuzzy region Rs, which is the summation of membership values fs(i). It should be noted that if the minimum operator is used for the intersection, the membership value is calculated as:fs(i)=Minj=1qfsj(i).Thus, the fuzzy temporal support of the fuzzy regions of temporal itemset X is the ratio of its scalar cardinality to the number of transactions that occur from the starting period of temporal item X. Besides, in this paper, the minimum operator is used as the fuzzy operator. Note that different fuzzy operators such as the product operator could be used as well. Of course, different operators will generate different results. For instance, when the product operator is used, the number of frequent itemsets will decrease such that it may generate fewer rules. Continuing the previous example, we can know from Table 1 that the number of transactions in periods P1 and P2 are 3 and 2, respectively. Firstly, the fuzzy region A.Low is taken as an example. Since its scalar cardinality is calculated as 2.5 (=1+0.5+0+0.5+0.5) and its starting time period is P1, its fuzzy temporal support is calculated as 0.5 (=2.5/(3+2)). On the other hand, since the starting time period of the fuzzy region E.High is P2, its fuzzy temporal support is calculated as 0.5 (=1/2). Note that the fuzzy support of E.High will be calculated as 0.2 (=1/5) if the lifespan of the item is not considered. From the example, the associations of the items can thus be exhibited correctly. In addition, if the starting periods of the items in an itemset are different, the maximum time period of the items will be used as the new starting period for calculating the fuzzy temporal support. Take the candidate 2-itemset (A.Low, D.High) as an example. Since the starting periods of the two temporal items A and D are P1 and P2, the fuzzy temporal support of (A.Low, D.High) is thus calculated as 0.5 (=(0.5+0.5)/2).Definition 7Fuzzy Temporal ConfidenceLet s be a temporal large q-itemset with items (s1, s2, …, sq), q≥2. Then, the fuzzy temporal confidence of a fuzzy temporal association rule, which is denoted as s1Λ…Λsk−1Λsk+1Λ…Λsq→sk, is defined as formula (4):Here, note that the starting period of tFuzzySupport(s1Λ…Λsk−1Λsk+1Λ…Λsq) is the same with tFuzzySupports. Thus, the range of the fuzzy temporal confidence is [0,1]. Continuing the previous example, assume the 2-itemset (A.Low, D.High) is a frequent itemset. In this case, the following two possible candidate fuzzy temporal rules will be generated: “If A.Low, Then D.High” and “If D.High, Then A.Low”. Since the fuzzy temporal supports of (A.Low) and (A.Low, D.High) are both 0.5. Its confidence is thus 1 (=0.5/0.5). In the same way, the confidence of the rule “If D.High, Then A.Low” is 0.5 (=0.5/1).In this paper, given a temporal quantitative transaction database, a set of membership functions, and pre-defined parameters including minimum fuzzy temporal support α, and minimum fuzzy temporal confidence value λ, we attempt to design an algorithm for mining fuzzy temporal association rules from the temporal quantitative transaction database.In this section, some related studies are briefly reviewed, including fuzzy data mining and fuzzy temporal data mining.The goal of data mining is to discover important associations among items such that the presence of some items in a transaction will imply the presence of some other items. To achieve this purpose, Agrawal and his co-workers proposed several mining algorithms based on the concept of large itemsets to find association rules in transaction data [1–4,24].However, in real-world applications, quantitative values exist in transactions. Thus, how to deal with quantitative values is an important issue. Since the fuzzy set theory has been used in intelligent systems for a long time because of its simplicity and similarity to human reasoning [7,13,19,28,29] and has been applied in different fields [10,14,24], many useful fuzzy data mining approaches have been proposed for solving quantitative mining problems [6,10,15–17,23,26,27]. Fuzzy data mining approaches can be divided into two kinds, namely single-minimum-support fuzzy-mining (SSFM) [6,11,15,23,26,27] and multiple-minimum-support fuzzy-mining (MSFM) [16,17] problems.For SSFM problems, Chan et al. proposed the F-APACS algorithm to mine fuzzy association rules [6]. They first transformed quantitative attribute values into linguistic terms and then used adjusted difference analysis to find interesting associations among the attributes. Kuok et al. proposed a fuzzy mining approach to handle numerical data in databases and derived fuzzy association rules [15]. At nearly the same time, Hong et al. proposed a fuzzy mining algorithm to mine fuzzy rules from quantitative transaction data [11]. Basically, these fuzzy mining algorithms first used membership functions to transform each quantitative value into a fuzzy set using linguistic terms and then used a fuzzy mining process to find fuzzy association rules. Yue et al. then extended the above concept to find fuzzy association rules with weighted items from transaction data [27]. They adopted Kohonen self-organized mapping to derive fuzzy sets for numerical attributes. Recently, Watanabe proposed approach for mining fuzzy rules based on output specification and redundancy of rules [26]. Prakash et al. proposed a mining approach based on Qualitative Approach [23]. Shen et al. proposed a fuzzy rule mining algorithm on data stream [25].Regarding mining approaches for MSFM problems, Lee et al. proposed a mining algorithm that used multiple minimum supports to mine fuzzy association rules [16]. They assumed that items had different minimum supports and the minimum support for an itemset was set was the maximum of the minimum supports of the items contained in the itemset. Under this constraint, the characteristics of level-by-level processing were kept, such that the original Apriori algorithm could easily be extended to find large itemsets. In [17], Lee et al. further extended the existing approach [16] and proposed a new fuzzy association rule mining algorithm with taxonomy.In temporal data mining, Lee et al. first proposed an algorithm, namely the Progressive-Partition-Miner (PPM), for mining general temporal association rules from a publication database [20], where the publication database is a set of transactions, and each item in the database contains its own exhibition period. The main advantage of PPM is that it is the first work, and provides an efficient way to mine temporal association rules from a publication database. Then, Chen et al. extended the PPM algorithm and proposed the Standing for Segmented Progressive Filter (SPF) algorithm [9]. Compared with PPM, the main advantage of SPF is that items with different exhibition periods in transactions could be handled and temporal association rules could be effectively mined. Based on Chen's approach [9,20], Chen et al. then proposed a mining approach for deriving temporal indirect associations [8]. However, these approaches focused on mining temporal rules from binary transaction databases.Regarding fuzzy temporal data mining, since fuzzy calendar algebra helps users to describe temporal requirements in fuzzy temporal calendars easily, Lee proposed two temporal patterns, fuzzy temporal association rules and fuzzy periodic association rules, based on fuzzy calendar algebra [21]. The main advantage of the approach is that three kinds of temporal components, including crisp, cyclic and fuzzy types, were proposed for representing temporal expressions with multiple time granularities. The transactions transformed by the above temporal components were then used to mine fuzzy temporal rules. Based on Lee's approach, Zhuo et al. introduced a relativity-based interest measure value for mining fuzzy calendar-based temporal association rules [30]. However, since the above approaches did not take the lifespans of items into consideration, we thus combine the lifespan concept into fuzzy data mining and propose an algorithm for deriving temporal fuzzy rules, which can reflect the associations of items more correctly.In this section, we will describe the proposed mining algorithm, the fuzzy temporal association rule mining approach (FTARM), for deriving fuzzy temporal association rules from given temporal databases. The details of the proposed mining algorithm are as follows.INPUT:A body of n temporal quantitative transactions where each item in the transaction has its own lifespan, a set of membership functions, a predefined minimum support threshold α, and a predefined minimum confidence threshold λ.OUTPUT:A set of fuzzy temporal association rules.Step 1:Execute the following substeps to transform the temporal quantitative transactions in each time period pt, t=1 to h, into fuzzy representations and collect items’ lifespans:SubSetp 1.1:Transform the quantitative value vj(i) of each transaction datum D(i) for each temporal item Ijin time period pt, where i=1 to n, j=1 to m, into fuzzy set fj(i), which is represented asfj1(i)Rj1+fj2iRj2+....+fjliRjlusing the given membership functions, where Rjkis the kth fuzzy region (linguistic term) of item Ij, fj(i) is vj(i)’s fuzzy membership value in region Rjk, and l (=|Ij|) is the number of fuzzy regions for Ij.SubStep 1.2:Record the number of temporal transactions in time period pt, denoted as |pt|, and the starting period of each temporal item, denoted as S(Ij), into a Temporal Information table, denoted as TI table. Each item in a transaction thus has its own lifetime.SubStep 1.3:Initialize the temporary sub-itemset (TS) table as an empty table, in which each tuple consists of three fields: fuzzy temporal sub-itemset, its corresponding start period and its scalar cardinality (count).Step 2:Calculate the scalar cardinality of each fuzzy region (linguistic term) Rjkin the temporal transaction data:countjk=∑i=1nfjki.Step 3:Calculate the fuzzy temporal support of each fuzzy region countjkaccording to the starting period of temporal item S(Ij) by formula (2) as follows:tFuzzySupportjk=countjk/∑t=SIjhptStep 4:Check whether the fuzzy temporal support of each fuzzy region is larger than or equal to the predefined minimum support value α. If Rjksatisfies the above condition, put it in the set of large 1-itemsets (L1). That is:L1=RjktFuzzySupportjk≥α,1≤j≤mand1≤k≤lStep 5:If L1 is not null, then complete the next step; otherwise, go to Step 11.Step 6:Set r=1, where r is used to represent the number of temporal items in the current itemsets to be processed.Step 7:Join the large itemsets Lrto generate the candidate set Cr+1 in a way similar to that in the a priori algorithm, but ensure that the two regions (linguistic terms) belonging to the same item cannot simultaneously exist in an itemset in Cr+1. In other words, it first joins Lrand Lrunder the condition that r-1 items in the two itemsets are the same and the other one is different to form the candidate set Cr+1. In addition, the candidate set Cr+1 does not have any two items Rjpand Rjq(p≠q) with the same attribute as Rjis kept.Step 8:Complete the following substeps for each newly formed (r+1)-itemset s with temporal itemss1,s2,...,sr+1in Cr+1:SubStep 8.1:Calculate the fuzzy value of each transaction data D(i) in s asfs(i)=fs1iΛfs2iΛ...Λfsr+1i, wherefsj(i)is the membership value of D(i) in region sj. If the minimum operator is used for the intersection, then:fs(i)=Minj=1r+1fsji.SubStep 8.2:Calculate the count of s in the transactions as:counts=∑i=1nfs(i)SubStep 8.3:Calculate the fuzzy temporal support of each fuzzy region Rjkaccording to the maximum starting period of temporal (r+1)-itemsets by formula (3) as follows:tFuzztSupports=counts/∑t=maxSs1,Ss2,…sr+1hptSubStep 8.4:If tFuzzySupportsis larger than or equal to the predefined minimum support value α, put s in Lr+1.SubStep 8.5:Decompose each large (r+1)-itemset s in the set of Lr+1 to generate all sub-itemsets of s, and put them in the TS table.SubStep 8.6:Scan the set of transactions in each time period to find the required count of each sub-itemset s according to the starting period field value of s in the TS table.Step 9:If Lr+1 is null, then complete the next step; otherwise, set r=r+1 and repeat Steps 7 and 8.Step 10:Construct the fuzzy temporal association rules for each large q-itemset s with items (s1, s2, …, sq), q≥2, by following the following substeps:SubStep 10.1:Form each possible association rule as follows:s1Λ…Λsk−1Λsk+1Λ…Λsq, k=1 to q.SubStep 10.2:Calculate the confidence values of all association rules according to the TS table by the formula (4):conf(s1,...,sk−1,sk+1,...,sq→sk)=tFuzzySupportstFuzzySupports1,...,sk−1,sk+1,...,sqStep 11:Output the fuzzy temporal association rules with confidence values larger than or equal to predefined confidence threshold λ.In order to show the proposed approach more clearly, the pseudo code of the proposed approach is given in Fig. 1.In this section, an example is given to show how the proposed fuzzy temporal association rule mining algorithm works. This is a simple example to show how the proposed algorithm can be used to generate association rules from temporal quantitative transactions. The dataset includes five transactions, which are shown in Table 1. These five temporal transactions will be used to illustrate the proposed approach. In this example, we assume that each item has its own membership functions. The membership functions for the items are shown in Fig. 2.In this example, each temporal item has two fuzzy regions: Low and High. Using the given temporal quantitative transactions and the membership functions, the proposed mining algorithm proceeds as follows.Step 1: The temporal quantitative transactions in two time periods, P1 and P2, are transformed into fuzzy representations and the lifespan of each item is also collected. Using transactions in time period P1 as an example, the substeps are processed as follows.SubStep 1.1: Each quantitative transaction in the database is transformed into corresponding fuzzy sets. Temporal item A of Trans1 in time period P1 will be used as an example. The quantitative value “5” is converted into a fuzzy set (1/A.Low+0/A.High) using the given membership functions. This step is followed for all transactions and time periods. The results are shown in Table 2.SubStep 1.2: The number of temporal transactions in each time period and the starting period of each temporal item are recorded in a Temporal Information (TI) table. Time period P1 will be used as an example. The number of transactions is three, and the starting period of temporal items A, B, and C is time period P1. The result of TI table is shown in Table 3.SubStep 1.3: The temporary sub-itemset (TS) table is initialized as an empty table. Each tuple consists of three fields that are fuzzy temporal sub-itemset, its corresponding starting period and its scalar cardinality (count).Step 2: The scalar cardinality of each fuzzy region (linguistic term) in the transaction is then calculated as the count value. Fuzzy region A.Low will be used as an example. Its scalar cardinality can be calculated as 1.0+0.5+0.0+0.5+0.5, which is 2.5. This step is followed for all fuzzy regions. The results are shown in Table 4.Step 3: The fuzzy temporal support of each fuzzy region is then calculated according to its temporal item starting period. First, fuzzy region A.Low will be used as an example because its starting time period is 1. Its fuzzy temporal support is calculated as 0.5 (=2.5/(3+2)). Next fuzzy region E.High will be used as an example because its starting time period is P2. Its fuzzy temporal support is thus calculated as 0.5(=1/2). The rest of the fuzzy temporal supports are shown in Table 5.Step 4: The fuzzy temporal support of each fuzzy region is checked using the predefined minimum support value. If it satisfies (is larger than or equal to) the condition, it will put in the set of large 1-itemsets (L1). Assuming the minimum support is set to 0.3, we get four large 1-itemsets, A.Low, B.Low, D.High and E.High.Step 5: In this example, since L1 is not null, the next step is followed.Step 6: The parameter r is set to 1, where r is used to represent the number of temporal items in the current itemsets to be processed.Step 7: It then generates candidate 2-itemsets C2 by joining large 1-itemsets L1. In this example, a total of six candidate 2-itemsets are generated. They are (A.Low, B.Low), (A.Low, D.High), (A.Low, E.High), (B.Low, D.High), (B.Low, E.High) and (D.High, E.High), respectively.Step 8: Complete the following substeps for each newly formed candidate itemset.Substep 8.1: The fuzzy membership value of each candidate itemset is calculated. Here, the minimum operator is used for the intersection. Take the 2-itemset {A.Low, B.Low} as an example. The derived membership value for transaction Trans1 is calculated as: min(1.0, 0.0)=0.0. The results for the other transactions are shown in Table 6.SubStep 8.2: The scalar cardinality (count) of each candidate 2-itemset is then calculated. Continuing the above example, we find that the count of candidate 2-itemset (A.Low, B.Low) is 1.5 (=0.0+0.5+0.0+0.5+0.5).SubStep 8.3: Since the starting periods of temporal items A and B are the same, time period P1, the fuzzy temporal support of (A.Low, B.Low) is 0.3 (=1.5/(3+2)). However, if the starting periods are different, the maximum time period will be used as their new starting period for calculating fuzzy temporal support. The candidate 2-itemset (A.Low, D.High) will be used as an example. The starting periods of temporal items A and D are P1 and P2, respectively. Thus, the fuzzy temporal support of (A.Low, D.High) is 0.5 (=(0+0+0+0.5+0.5)/2).SubStep 8.4: If the fuzzy temporal supports of the newly formed candidate 2-itemsets are larger than or equal to the predefined minimum support threshold, they will be kept in L2. Assuming that the minimum support is set to 0.3, five large 2-itemsets are kept in L2, which is shown in Table 7.SubSteps 8.5 and 8.6: The sub-itemsets are generated from the frequent itemsets, and are then put into the TS table. The scalar cardinalities of all the sub-itemsets are calculated. The results are as shown in Table 8.Step 9: Since L2 is not null Steps 7 and 8 are repeated. In this example, at last, we can only get two large 3-itemsets, which are (A.Low, B.Low, D.High) with a fuzzy temporal support of 0.5 (=(0.5+0.5)/2) and (B.Low, D.High, E.High) with a fuzzy temporal support of 0.375 (=(0+0.75)/2). The TS table will also be updated by using Steps 8.5 and 8.6. Although the two large 3-itemsets can generate a candidate 4-itemset, its support value is smaller than the threshold. Thus, Step 9 stops, and Step 10 is executed.Step 10: Fuzzy temporal association rules will be generated for each large q-itemset s with items (s1, s2, …, sq), q≥2, by completing the following substeps:SubStep 10.1: Each generated temporal large itemset is then used to derive the fuzzy temporal association rules. The temporal large 2-itemset (A.Low, D.High) will be used as an example. Two candidate fuzzy temporal association rules are generated as follows.(1) If D.High, Then A.Low, and(2) If A.Low, Then D.High.SubStep 10.2: The confidence value of each candidate fuzzy temporal association rule is calculated. The rule “If A.Low, Then D.High” will be used as an example. The fuzzy temporal supports of fuzzy regions (A.Low) and (A.Low, D.High) are both 0.5. Its confidence is thus 1 (=0.5/0.5). In the same way, the confidence of rule “If D.High, Then A.Low” is 0.5 (=0.5/1).Step 11: The fuzzy temporal association rules with their confidence values larger than or equal to the predefined confidence threshold λ are then outputted. In this example, if the minimum confidence is set at 0.8, the following five fuzzy temporal association rules will be derived and outputted as final results:(1) A.Low→D.High, its confidence is 1;(2)B.Low→D.High, its confidence is 1;(3) E.High→D.High, its confidence is 1;(4)B.Low→A.Low, its confidence is 0.85;(5) B.Low, E.High→D.High, its confidence is 1;

@&#CONCLUSIONS@&#
In real-world applications each item usually has a lifespan. In this paper, we thus take item lifespans into consideration and propose a fuzzy temporal mining algorithm for mining fuzzy temporal association rules. The proposed approach first transforms each quantitative value into a fuzzy set using the given membership functions. Meanwhile, item lifespans are collected and recorded in a temporal information table during the transformation process. An apriori-like concept is then utilized to derive fuzzy temporal association rules. Experiments on two simulated datasets and the two real datasets show how the proposed approach can actually derive more fuzzy rules than the previous one. The experimental evaluations also show that the derived fuzzy rules are useful in terms of average supports and confidences.The main contribution of this paper lies in that, since the lifespan of each item is considered, the proposed approach can find more information inside a given transaction database than the previous approach. In other words, the associations of items can be exhibited more correctly such that more useful decision can be made by the information. However, this approach is just a start. Many problems remain to be solved. For example, finding a fuzzy temporal mining approach for items with multiple minimum supports, figuring out how to choose appropriate membership functions for mining procedures, or efficient temporal fuzzy mining algorithm, is worthy of further studying. In addition, since the data in real applications are increasing day by day, incremental fuzzy temporal data mining is also an interesting direction worthy of further studying. We will also attempt to extend the proposed approach to solve more complex problems.