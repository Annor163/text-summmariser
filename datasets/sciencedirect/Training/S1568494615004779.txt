@&#MAIN-TITLE@&#
System reliability maximization for a computer network by finding the optimal two-class allocation subject to budget

@&#HIGHLIGHTS@&#
A capacitated-flow network with multistate components is modeled to describe a practical computer network.Focusing on allocating two classes of components to the computer network.A GA based algorithm to maximize system reliability subject to a budget is proposed.The proposed algorithm has better computational efficiency than several popular soft computing algorithms.

@&#KEYPHRASES@&#
Optimal two-class allocation,System reliability,Capacitated-flow network,Genetic algorithm,State-space decomposition,Allocation cost,

@&#ABSTRACT@&#
In the real world, a computer/communication system is usually modeled as a capacitated-flow network since each transmission line (resp. facility) denoted by an edge (resp. node) has multiple capacities. System reliability is thus defined to be a probability that d units of data are transmitted successfully from a source node to a sink node. From the perspective of quality management, system reliability is a critical performance indicator of the computer network. This paper focuses on maximizing system reliability for the computer network by finding the optimal two-class allocation subject to a budget, in which the two-class allocation is to allocate exactly one transmission line (resp. facility) to each edge (resp. node). In addition, allocating transmission lines and facilities to the computer network involves an allocation cost where the cost for allocating a transmission line depends on its length. For solving the addressed problem, a genetic algorithm based method is proposed, in which system reliability is evaluated in terms of minimal paths and state-space decomposition. Several experimental results demonstrate that the proposed algorithm can be executed in a reasonable time and has better computational efficiency than several popular soft computing algorithms.

@&#INTRODUCTION@&#
With the internet popularization in our modern life, data and information are usually transmitted through computer/communication systems. Since the quality of data transmission deeply influences on the effect of organizational operation, many organizations focus on the issues of system reliability evaluation and improvement to increase the transmission quality, especially for the issue of system reliability maximization. A computer system is usually modeled as a network composed of edges and nodes, in which each edge denotes a transmission line and each node denotes a facility. Generally, a transmission line is combined with several physical lines such as fiber cables, coaxial cables or twisted pairs and a facility is combined with several devices such as routers, hubs, switches or bridges. Because each physical line (resp. device) has a capacity and may fail due to failure, maintenance, etc., each transmission line (resp. facility) has multiple states. That is, the computer network is multistate, and thus is a typical capacitated-flow network [1–8]. System reliability is thus defined to be a probability that d units of data are transmitted successfully from a source node to a sink node, and is one critical performance indicator of the computer network. Several studies evaluated system reliability in terms of minimal paths (MPs) [1,2,4] or minimal cuts (MCs) [1–3] without node failure. An MP is a set of edges and nodes whose proper subsets are no longer paths. Lin evaluated system reliability with node failure in terms of MPs [5], and then in terms of MCs [6].From the perspective of quality management, system reliability maximization is a practical topic to discuss. Several studies [9–11] related to system reliability maximization determined the optimal network topology for a binary-state computer network. For multistate computer networks, Levitin and Lisnianski [12] proposed a technique integrating a universal generating function and genetic algorithm (GA) to solve a family of system reliability maximization problems, such as structure optimization, optimal expansion, and maintenance optimization. Ramirez-Marquez and Rocco [13] introduced an evolutionary optimization approach to solve the stochastic network interdiction problem. The problem considers the minimization of the transmission cost associated with an interdiction strategy such that the maximum flow can be transmitted between a source node and a sink node under a given reliability requirement. Considering that the resources are allocated to protect the edges under an evenly distributed attack strategy, Ramirez-Marquez et al. [14] presented a network optimization model to maximize the survivability of the network for successfully transmitting a specific flow from a source node to a sink node.In addition to these issues, there exists a problem to search for the optimal component allocation with maximal system reliability for the computer network with a given network topology. In this problem, all components are separated to be two sets which are a set of Class 1 components (transmission lines) and the other set of Class 2 components (facilities). In particular, allocating a Class 1 (resp. Class 2) component to an edge (resp. node) involves the allocation cost, in which the cost for allocating a Class 1 component depends on its length. Therefore, this paper devotes to the System Reliability based Two-Class Allocation problem subject to a Budget. For the convenience, such a problem is named SR2CAB problem herein. In this problem, the two-class allocation means that each Class 1 (resp. Class 2) component can be allocated to at most one edge (resp. node) and each edge (resp. node) must include exactly one Class 1 (resp. Class 2) component. With multistate Class 1 and Class 2 components, any computer network under a two-class allocation is regarded as a capacitated-flow network.Intuitively, an implicit enumeration method which enumerates all possible allocations may be applied to solve the SR2CAB problem. However, it is time-consuming for larger networks. Instead, we develop an efficient algorithm based on GA, namely SR2CAB-GA, to solve the addressed problem. The reason is that GA is a robust search technology and recently has been validated to be suitable for the allocation problems [15,16], such as Lin and Yeh [7,8], Lee et al. [17], Salcedo-Sanz et al. [18], Salcedo-Sanz and Yao [19], Kaminer and Ben-Asher [20]. In the proposed algorithm, a two-class allocation is represented as a chromosome (a solution), and system reliability is evaluated in terms of MPs and state-space decomposition. Through this algorithm, the optimal two-class allocation with maximal system reliability can be found in a reasonable time.The rest of this paper is organized as follows. The assumptions are shown in Section 2. The problem formulation is discussed in Section 3. Section 4 subsequently develops the SR2CAB-GA to solve the SR2CAB problem. Two numerical examples are adopted to demonstrate the computational efficiency of the proposed algorithm while comparing with several soft computing algorithms. Conclusions are described in Section 6, along with recommendations for future research.Let (E, N) be a computer network with a source s and a sink t where E={ei|1≤i≤n} denotes the set of n edges connecting a pair of nodes and N={ei|n+1≤i≤n+q} denotes the set of q nodes except for s and t. Let L={Li|1≤i≤n} where Liis the length of edge ei, i=1, 2, …, n. Let Ω1={ω1k|1≤k≤z1} be the set of z1 Class 1 components where ω1kdenotes the kth Class 1 component, and Ω2={ω2w|1≤w≤ z2} be the set of z2 Class 2 components where ω2wdenotes the wth Class 2 component. Each component ω1k(resp. ω2w) has multiple states, 1, 2, …, M1k(resp. M2w), with corresponding capacities, 0=h1k(1)<h1k(2)<⋯<h1k(M1k) for k=1, 2, …, z1 (resp. 0=h2w(1)<h2w(2)<⋯<h2w(M2w) for w=1, 2, …, z2), where h1k(l) (resp. h2w(l)) is the lth capacity of ω1k(resp. ω2w) for l=1, 2, …, M1k(resp. M2w). Let c1k(resp. c2w) be the allocation cost of component ω1k(resp. ω2w) for k=1, 2, …, z1 (resp. w=1, 2, …, z2). In particular, c1kis the allocation cost per unit of length of component ω1k. That is, the cost of Class 1 component allocation is proportion to its length. Let B=(b1, b2, …, bn+q) be a two-class allocation (we generally call a component allocation in the rest of this paper), where bi=k if component ω1kis allocated to eifor i=1, 2, …, n and bi=w if component ω2wis allocated to eifor i=n+1, n+2, …, n+q. Then, the computer network under B is a capacitated-flow network. In this study, there should be several assumptions addressed as follows:(I)Each Class 1 component can be allocated to at most one edge and each edge must contain exactly one Class 1 component.Each Class 2 component can be allocated to at most one node and each node must contain exactly one Class 2 component.Flow in (E, N) must satisfy the flow-conservation law [21].The capacities of different components are statistically independent.Let C be an allocation budget. The following constraint says the total cost of component allocation B should not exceed budget C,(1)∑i=1nc1bi⋅Li+∑i=n+1n+qc2bi≤C,where∑i=1nc1bi⋅Lirepresents the cost of Class 1 component allocation depending on the edge's length, and∑i=n+1n+qc2birepresents the cost of Class 2 component allocation.Under component allocation B, the maximal capacity of edge (resp. node) eidenoted by hbi(Mbi) is equal to h1k(M1k) (resp. h2w(M2w)) if bi=k (resp. bi=w). In other words, the maximal capacity vector under component allocation B is (hb1(Mb1), hb2(Mb2), …, hbn+q(Mbn+q)), designated asMB. Let X=(x1, x2, …, xn+q) denote a capacity vector where xidenotes the current capacity of ei, i=1, 2, …, n+q. Any capacity vector X satisfying the following constraint is said to be feasible under B,(2)X≤MB,where constraint (2) means that the current capacity xicannot exceed the allocated component's maximal capacity for i=1, 2, …, n+q. For the convenience, let UBbe the set of such X.According to the description of the SR2CAB problem, system reliability evaluation under component allocation B is meaningful as the total cost of B meets budget C. Let V(X) be the maximal flow of (E, N) under X. System reliability under component allocation B denoted by SRd(B) is defined to be a probability that the maximal flow of (E, N) is no less than a given demand d, i.e., SRd(B)Pr{V(X)≥d, X∈UB}. For the convenience, letXB={X|V(X)≥d, X∈UB}, and thus system reliability can be calculated by summing up the probabilities of all X∈XB, i.e., SRd(B)=∑Pr{X|X∈·XB}. The mathematical programming formulation for the SR2CAB problem is therefore represented as follows:(3)MaximizeSRd(B)=∑Pr{X|X∈XB}Subject to(4)bi=kfori=1,2,…,n,(5)bi=wfori=n+1,n+2,…,n+q,(6)bi≠bjfori≠jandi,j∈{1,2,…,n},(7)bi≠bjfori≠jandi,j∈{n+1,n+2,…,n+q},and(8)∑i=1nc1bi⋅Li+∑i=n+1n+qc2bi≤C.Constraints (4)–(7) are from the assumptions I and II. All feasible component allocations can be generated through constraints (4)–(8). Note that SRd(B)=0 ifXB=∅. The optimal component allocation with maximal system reliability is computed by maximizing objective function (3).Generally, it is not an efficient way to enumerate all X∈XBand then to sum up their probabilities in order to calculate SRd(B) [4]. A d-MP X is defined to be the minimal capacity vector inXB. In other words, X∈XBis a d-MP if and only if V(X)≥d and V(Y)<d for any capacity vector Y∉XBsuch that Y<X (where Y≤X if and only if yi≤xifor i=1, 2, …, n+q, and Y<X if and only if Y≤X and yi<xifor at least one i). Suppose X1, X2, …, Xvare all d-MPs, thenXB=⋃i=1v{X|X≥Xi}. Thus,(9)SRd(B)=∑Pr{X|X∈XB}=Pr⋃i=1v{X|X≥Xi}.Such a probability can be obtained particularly via inclusion–exclusion principle [5,22] or state-space decomposition [1,4]. Although inclusion–exclusion principle is an easier method to be understood, state-space decomposition has better computational efficiency. Calculating system reliability via inclusion–exclusion principle results in memory overloaded as there is a lot of d-MPs. State-space decomposition is proposed by Doullize and Jamoulle [23]. Aven [1] developed an MP based state-space decomposition to evaluate system reliability and then Lin and Yeh [7] showed the method is suitable for larger networks.Let P1, P2, …, Pmare totally m MPs of the network. A flow vector F=(f1, f2, …, fm), in which fjdenotes the flow through Pj, j=1, 2, …, m, is used to describe the flow transmission through the capacitated-flow network. Any F is feasible under X if and only if(10)fj≤minei∈Pj{xi}j=1,2,…,mand(11)∑ei∈Pjfj≤xii=1,2…,n+q,whereminei∈Pj{xi}is the maximal capacity of Pjunder X, and∑ei∈Pjfjis the amount of flow through ei. Hence, the maximal flow under X isV(X)=max∑j=1mfj|Fis feasible underX. Similarly, any F is feasible underMBif and only if(12)fj≤minei∈Pj{hbi(Mbi)}j=1,2,…,m,and(13)∑ei∈Pjfj≤hbi(Mbi)i=1,2,…,n+q,whereminei∈Pj{hbi(Mbi)}is the maximal capacity of Pjunder B. Constraint (12) says that the flow through Pjcannot exceed the maximal capacity of Pj, and constraint (13) says the amount of flow through edge eicannot exceed the maximal capacity of component ω1k/ω2wallocated to ei.Any flow vector F is said to meet exactly demand d if it satisfies constraints (12)–(14),(14)∑j=1mfj=d,where constraint (14) represents that the amount of flow from s to t should meet demand d. Let F={F|F satisfies constraints (12)–(14)}. The following lemma is a necessary condition for a d-MP X.Lemma 1If X∈UBis a d-MP, then there exists an feasible F∈F under X such thatxi=hbi(li) where li∈{1, 2, …, Mbi} such that(15)hbi(li−1)<∑ei∈Pjfj≤hbi(li),i=1,2,…,n+q≤hbi(li),i=1,2,…,n+q.Consider an F∈F feasible under the d-MP X. Suppose to the contrary that there exists a xrsuch thatxr>hbr(lr)≥∑er∈Pjfjandxi=hbi(li)≥∑ei∈Pjfjfor all i≠r. Set Y=(y1, y2, …, yn+q) where yr=hbr(lr) and yi=xifor all i≠r, then Y<X. Sinceyi=hbi(li)≥∑ei∈Pjfjfor each i, we have fj≤yi∀ei∈Pj, i.e.,fj≤minei∈Pj{yi}for each j. Therefore, F is feasible under Y. That is, V(Y)≥d which contradicts that X is a d-MP. Thus, xi=hbi(l) for i=1, 2, …, n+q. □Any X=(x1, x2, …, xn+q) transformed from F∈F according to Eq. (15) meets V(X)≥d and is treated as a d-MP candidate based on Lemma 1. Let Ψ={X1, X2, …, Xu} consists of all d-MP candidates and Ψminbe the set of minimal capacity vectors in Ψ. The following lemma shows Ψminis the set of d-MPs.Lemma 2Ψminis the set of d-MPs.Suppose X is a d-MP but X∉Ψmin. It is known X∈Ψ by Lemma 1. There exists a Y∈Ψ such that Y<X. It is given that V(Y)≥d which contradicts that X is a d-MP. Hence, any d-MP belongs to Ψmin. Conversely, suppose X∈Ψmin(that means V(X)≥d) but it is not a d-MP. Then, there exists a d-MP Y such that Y<X, that infers Y∈Ψ which contradicts X∈Ψmin. □Based on Lemma 2, each d-MP candidate can be further checked whether it is a d-MP or not according to the following algorithm.Algorithm 1Identify which capacity vectors in Ψ are d-MPs.Step 1. I=∅ (I is the stack which stores the index of non-d-MP X. Initially, I is empty.)Step 2.For i=1 to u & i ∉ I.//there are u d-MP candidates.Step 3. For j=i+1 to u, & j ∉ I.Step 4. If Xj<Xi, then Xiis not a d-MP, I=I ∪ {i}, and go to step 7.Else if Xj≥ Xi, then Xjis not a d-MP, I=I ∪ {j}.Step 5. Next j.Step 6. Xiis a d-MP.Step 7. Next i.All d-MPs generated from Algorithm 1 can be employed to calculate SRd(B).In this section, we develop the SR2CAB-GA to solve the addressed problem. The details of the proposed algorithm are introduced in the following subsections.Several major parameters including crossover rate (α), mutation rate (β), population size (θ) and number of generations (η) must be determined before executing the SR2CAB-GA. The crossover operator is utilized to search for approximately optimal solutions and provide a direction of convergence. The crossover rate controls the probability of implementing the crossover operator. Man et al. [24] recommended that the crossover rate should be between 0.6 and 1.0. The mutation operator is a momentum variable which maintains the diversity of the population and prevents premature convergence. The mutation rate controls the probability of implementing the mutation operator. Man et al. [24] suggested that mutation rate should not exceed 0.1. The population size represents the amount of chromosomes in the population and is usually set in the interval [30,100] [25]. The determination of crossover rate, mutation rate, and population size influences GA's computational performance. Unfortunately, how to set these parameters usually involves the implementation of many experiments because of a lack of mechanism [26]. Generally, Goldberg [27] suggested using a relatively high crossover rate, a low mutation rate and a small population size in most cases. The number of generations is regarded as the terminal condition of SR2CAB-GA. Usually, the more generations the SR2CAB-GA is executed for, the better solution it can obtain.This paper utilizes the integer representation to represent a chromosome because it has less utilization in memory than the binary representation, especially for larger networks. In the SR2CAB-GA, a chromosome is equivalent to a component allocation. Hence, a chromosome is denoted by G=(g1,g2, …, gn+q) where gi∈{1, 2, …, z1} for i=1, 2, …, n and gi∈{1, 2, …, z2} for i=n+1, n+2, …, n+q. If component ω1kis allocated to edge ei, gi=k for i=1, 2, …, n, and if component ω2wis allocated to node ei, gi=w for i=n+1, n+2, …, n+q. Such a representation satisfies constraints (4)–(7). For example in a network with six edges and two nodes, a chromosome, G=(2, 5, 1, 3, 6, 4, 1, 4) means that Class 1 (resp. Class 2) components ω12, ω15, ω11, ω13, ω16, and ω14 (resp. ω21 and ω24) are allocated to edges e1, e2, e3, e4, e5, and e6 (resp. nodes e7, and e8), respectively. We adopt bold-faced letters to represent the Class 2 component allocation in order to easily discriminate both allocations of Class 1 and Class 2 components.Fig. 1illustrates the entire procedure of the proposed algorithm. The SR2CAB-GA starts with an initial population, in which there are θ chromosomes in the population. Subsequently, an algorithm integrating MPs and state-space decomposition is utilized to evaluate fitness value (i.e., system reliability) for each chromosome. To be worthy of attention, if chromosome G violates the budget constraint or there is no X such that V(X)≥d under G, then system reliability of the chromosome is given with a small value. The following algorithm evaluates system reliability for each chromosome.Algorithm 2Search for all d-MPs and calculate system reliability.Step 1.Determine whether chromosome G satisfies constraint (16) or not,(16)∑i=1nc1gi⋅Li+∑i=n+1n+qc2gi≤C.Under chromosome G, if constraint (16) is not satisfied, a very small value is assigned to be its system reliability, and then evaluate the next chromosome.Step 2.Find all F satisfying the following constraints.(17)fj≤minei∈Pj{hgi(Mgi)}j=1,2,…,m,(18)∑ei∈Pjfj≤hgi(Mgi)i=1,2,…,n+q,and(19)∑j=1mfj=d.Under chromosome G, if no feasible F exists, a very small value is assigned to be SRd(G), and then return to step 1 to evaluate the next chromosome.Step 3.Transform each F from Step 2 into X via the following equation.(20)xi=hgi(li)whereli∈{1,2,…,Mgi}suchthathgi(li−1)<∑ei∈Pjfi≤hgi(li)fori=1,2,…,n+q.Step 4.Utilize Algorithm 1 to obtain all d-MPs from all X from step 3.Step 5.Suppose all d-MPs generated from step 4 are X1, X2, …, Xv. Calculate SRd(G)=Pr{⋃i=1v{X|X≥Xi}}via state-space decomposition.After evaluating all chromosomes, the following is to check whether the terminal condition is fulfilled. If the SR2CAB-GA is executed for η generations, then the SR2CAB-GA stops and returns the optimal solution at the current generation; otherwise, the evolution process is implemented. The evolution process consists of selection, crossover, mutation and replacement. We utilize the roulette wheel selection to select chromosomes, and then employ the crossover and mutation operators to generate new chromosomes according to the crossover and mutation rates. Subsequently we mix the new θ chromosomes and the original θ chromosomes. That is, there are 2×θ chromosomes at present. Finally, we select the better θ chromosomes from the 2×θ chromosomes to be the new population according to the system reliability.The proposed SR2CAB-GA crossover is based on the single-point crossover. Suppose that two chromosomes (2, 5, 1, 3, 6, 4, 1, 4) and (1, 3, 4, 2, 5, 6, 2, 3) are selected from the population. In the execution of the SR2CAB-GA crossover, we separate each selected chromosome to be two parts of (g1, g2, …, gn) and (gn+1, gn+2, …, gn+q), i.e., (g1, g2, g3, g4, g5, g6) and (g7, g8). We consider the first part of (g1, g2, g3, g4, g5, g6) for the two selected chromosomes. Suppose a crossover point (CrP) is randomly generated to be g5. The two chromosomes exchange with each other to be (2, 5, 1, 3, 5, 6, 1, 4) and (1, 3, 4, 2, 6, 4, 2, 3). After exchanging, the values of g2 and g5 in first chromosome are identical, as are the g3 and g6 in the second chromosome. For first (resp. second) chromosome, the value of g2 (resp.g3) is changed to one of the genes on the left hand side of CrP in the second (resp. first) chromosome randomly. However, if the value of g2 in the first chromosome is changed to the value of g1, g2 or g4 in the second chromosome, then the first chromosome includes two genes with the same value. That is, the value of g2 in the first chromosome can only be changed to the value of g3 in the second chromosome. Similarly, the value of g3 in the second chromosome can only be changed to the value of g2 in the first chromosome. Then, the two chromosomes are (2, 4, 1, 3, 5, 6, 1, 4) and (1, 3, 5, 2, 6, 4, 2, 3). The same process of crossover is implemented for the part of (g7, g8) in the two chromosomes and then we obtain (2, 4, 1, 3, 5, 6, 1,3) and (1, 3, 5, 2, 6, 4, 2,4) as CrP=g8.The mutation is also implemented for the two parts of (g1, g2, …, gn) and (gn+1, gn+2, …, gn+q) for each selected chromosome. For the first part of (g1, g2, …, gn), a mutation point (MuP) is generated randomly, e.g. MuP=g2. For example in the chromosome (2, 4, 1, 3, 5, 6, 1, 3), if the value of g2 changes to 3, then value g2 exchanges with that of g4 to prevent the duplication of g2 and g4. The chromosome thus becomes (2, 3, 1, 4, 5, 6, 1, 3). If the value of g2 changes to 7, then the chromosome becomes (2, 7, 1, 3, 5, 6, 1, 3) due to no duplicate gene in the chromosome. The same process of mutation is implemented for (gn+1, gn+2, …, gn+q) and then we obtain (2, 7, 1, 3, 5, 6,6, 3) with MuP=g7. Through the proposed crossover and mutation, the duplicate genes are avoided, and each chromosome does not violate assumptions I and II.In this section, we apply the SR2CAB-GA to both networks of a simple computer network and Taiwan Academic Network (TANET). In the simple network, there are 10 Class 1 components and 5 Class 2 components ready to be allocated, and the proposed algorithm is compared with the implicit enumeration method. In TANET case, there are 80 Class 1 components and 50 Class 2 components. In both networks, each Class 1 component is combined with several OC-18 (Optical Carrier 18) lines and each Class 2 component is composed of several hubs. Each OC-18 line provides has two capacities: 0bps (bits per second) and approximate 1Gbps (giga-bits per second). Similarly, each hub has two capacities: 0bps and 4Gbps. Since all components are provided by different suppliers, they have different probability distributions. In this section, all algorithms are programmed in MATLAB programming language and executed on a personal computer with Intel Core i7-4770 @ 3.4G and 4G RAM.A simple computer network with 6 edges and 2 nodes is presented in Fig. 2. There are 4 MPs: P1={e1, e2, e7}, P2={e1, e3, e6, e7, e8}, P3={e2, e4, e5, e7, e8} and P4={e5, e6, e8}. The length data of Fig. 2 is shown in Table 1. Each Class 1 (resp. Class 2) component's capacity and probability distribution are shown Table 2(a) (resp. 2(b)). In particular, the possible capacity of any Class 2 component is not formed with a range of consecutive integers. We compare the proposed algorithm and the implicit enumeration method based on both criteria of system reliability and CPU time under different demand and budget levels. The parameters of SR2CAB-GA are θ=30, α=0.8, β=0.1, and η=300, respectively. In Appendix, the solution procedure of Algorithm 2 is described through the example. According to Table 3, the proposed algorithm not only obtains the optimal solution, but also has better computational efficiency than the implicit enumeration method. If the budget does not exceed 6350 (unit: NTD, New Taiwan dollar), no solution can be obtained subject to any demand level.TANET is a network topology that is responsible to connect the major academic organizations in Taiwan. Each node denotes an academic organization (presented in Fig. 3). The length data of TANET is shown in Table 4. The Class 1 component capacity data and the Class 2 component capacity data are listed in Table 5(a) and (b), respectively. In this example, we focus on the connectivity of NTU and NSYSU, and search for the optimal component allocation such that system reliability is maximized under d=4Gb and C=165,000. Additionally, we discuss the various combinations of population size (θ), crossover rate (α), and mutation rate (β) under η=2000. The SR2CAB-GA is executed for 30 trails for each combination to obtain the largest maximal system reliability and the average maximal system reliability. Subsequently, the proposed algorithm is compared with several popular soft computing algorithms including particle swarm optimization (PSO), ant colony optimization (ACO), and tabu search (TS) in order to show its computational efficiency.At the first, we examine nine different population sizes under the given α=0.8 and β=0.1. The results are illustrated in Table 6(a). The largest maximal system reliability is 0.998623146 as θ=80, and the largest average system reliability is 0.998566175 as θ=80. Subsequently, we explore several combinations of crossover rate and mutation rate. Since the setting of “θ=80″ and η=2000 needs longer executional time, we observe each population size's average maximal system reliability which is obtained without more than 1h. Thus, we consider θ=50. The results are illustrated in Table 6(b), in which the largest maximal system reliability is 0.998569850 as α=0.8 and β=0.1. The largest average system reliability is 0.998211504 as α=0.8, β=0.1. Through the observation of these experiments, system reliability is not reduced and increased significantly with larger or smaller population size, crossover rate, and mutation rate according to the largest maximal system reliability and the average maximal system reliability. In addition, the optimal solution can be found in no more than 16,454s. Hence, the proposed algorithm is executed in the reasonable time as η=2000. We also use a bigger η=2000 to observe the convergent status of searching for the optimal solution under θ=50, α=0.8 and β=0.1. Fig. 4presents the search process of the proposed algorithm with θ=50, α=0.8, β=0.1, and η=2000. The maximal system reliability exceeds 0.9974 from the 342th generation.In this section, the TANET example is utilized to demonstrate the computational efficiency of SR2CAB-GA by comparing it with three popular soft computing algorithms including ACO, PSO, and TS, in which the adopted ACO is based on Blum [28], the adopted PSO is based on Yang et al. [29], and the adopted TS is based on Glover and Laguna [30]. Each algorithm is executed for 30 trails to obtain the largest maximal system reliability and largest average system reliability where each algorithm runs for 1800s. The experimental results are summarized in Table 7. Apparently, the proposed algorithm can find the better solution than the others from the viewpoint of the largest maximal system reliability and the average maximal system reliability. Fig. 5depicts each algorithm's search process based on the largest maximal system reliability for the TANET example. In the reasonable time, the proposed algorithm cannot only obtain better system reliability but also search for a better solution more quickly.

@&#CONCLUSIONS@&#
