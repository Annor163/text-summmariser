@&#MAIN-TITLE@&#
Declarative specifications for the development of multi-agent systems

@&#HIGHLIGHTS@&#
A multi-agent system development language based on declarative specificationsLanguage is defined formally via denotational semantics and attribute grammars.Applying denotational semantics provided precise definitions of the language.We could generate the language automatically from formal semantics.Using attribute grammars made evolutionary language development easier.

@&#KEYPHRASES@&#
Domain-specific language,Multi-agent system,Semantic Web,Formal semantics,Declarative specifications,

@&#ABSTRACT@&#
The designing and implementation of a multi-agent system (MAS), where autonomous agents collaborate with other agents for solving problems, constitute complex tasks that may become even harder when agents work in new interactive environments such as the Semantic Web. In order to deal with the complexities of designing and implementing a MAS, a domain-specific language (DSL) can be employed inside the MAS's development cycle. In such a manner, a MAS can be completely specified by programs written in a DSL. Such programs are declarative, expressive, and at the right abstraction level. In this way the complexity of MAS development is then partially shifted to DSL development and the task herein can be much more feasible by using a proper DSL development methodology and related tools. This paper presents and discusses our methodology for DSL development based on declarative formal specifications that are easy to compose, and its usage during MAS development. A practical case-study is also provided covering an example of a MAS's development for expert finding systems. By using denotational semantics for precisely defining the language, we show that it is possible to generate the language automatically. In addition, using attribute grammars makes it possible to have modular methodology within which evolutionary language development becomes easier.

@&#INTRODUCTION@&#
A software agent is an encapsulated software system situated within a certain environment, and is capable of flexible autonomous action within this environment in order to meet its design objectives [1]. These autonomous, reactive, and proactive agents can also behave in a cooperative manner and collaborate with other agents for solving common problems. In this way, these intelligent agents constitute systems called multiagent systems (MASs).The design and implementations of MASs are complex tasks when considering their dynamicity and autonomous characteristics. Their behaviour is more complex when taking into account the agent's interaction with new agent environments such as the Semantic Web [2,3].The Semantic Web extends the current web in such a way that the web pages' contents can be interpreted using ontologies [2] that help machines to understand web-content. Software agents can fulfil the interpretations in question by handling the semantic contents on behalf of their human users by collecting web contents from diverse sources, processing the information, and exchanging the results.In addition, autonomous agents can evaluate semantic data and collaborate with semantically-defined entities of the Semantic Web, such as semantic web services (SWS), by using content languages [4]. SWSs can be simply defined as the web services with semantic interfaces to be discovered and executed [5]. In order to support the semantic interoperabilities and automatic compositions of web services, the capabilities of web services are defined in service ontologies that provide the required semantic interfaces. Such interfaces of the SWSs can be discovered by software agents and these agents may then interact with these services to complete their tasks. The engagements and invocations of a semantic web service are also performed according to the service's semantic protocol definitions. For instance, the dynamic composition of heterogeneous services for the optimal selection of service providers can be achieved by employing agents and ontologies, as proposed in [6].However, agent interactions with semantic web services add further complexities when designing and implementing MASs. Different methodologies can be applied in order to deal with this complexity. One of the possible alternatives is domain-specific languages (DSLs) [7–10] that have notations and constructs tailored towards a particular application domain (e.g. MAS and Semantic Web). In this way, DSLs raise the abstraction level, expressiveness, and ease of use. In other words, when using this methodology the users focus on the program model of the solution instead of a platform code for the solution, and they can automatically generate code from the model using DSL tools. As a result, the DSLs' users mostly need the knowledge from the problem domain [11] but little programming experience.We are convinced that the use of a DSL can provide the required abstraction and support a more fruitful methodology for the development of MASs especially when working within a Semantic Web environment. Within this context, prior to the work discussed here, we first provided a metamodel defined in several viewpoints [12] for MASs working within a Semantic Web environment. Then, based on this metamodel, we developed a DSL called the Sematic web-Enabled Agent Language (SEA_L) [13,14] including an interpreter mechanism for SEA_L which is defined for enabling code generation regarding the implementation of SEA_L agents (e.g. in JADEX platform [15]).Although syntax definition based on a metamodel is an essential part of a modelling language, an additional and required part is the determination and implementation of DSL constraints that constitute those semantics that cannot be defined solely by a metamodel or syntax. In line with these constraints, the semantics of a DSL include some rules that restrict the instance models created according to the language.The definition of the semantic rules was provided towards this end in our previous study [16,17] focusing on Agent–Semantic Web Service interaction. However, the represented semantic rules were not implemented and applied to SEA_L language (although, it is one of the crucial tasks during a DSL's development). In other words, the defined formal semantic rules have not been applied to any translational/operational semantics and have no effects on the quality of the generated code. Such an application is important as the execution of the language is described directly or by translating to another language in translational/operational semantics.Therefore, in this study, the specification of the static semantics regarding the interactions between software agents and semantic web services in SEA_L language is formally declared using denotational semantics [18] which paves the way for the implementation of these specifications using attribute grammars [19,20]. Static semantics is used to control some constraints during system modelling in the DSL. On the other hand, denotational semantics interpret the phrases of a language as mathematical denotations and conceptual meanings that can be thought of abstractly.Our main motivation is that declarative specifications can present the meanings of both associations and constraints for the language in a formal way. The formal representation of the semantics helps to provide an unambiguous definition and precise meaning of a program. It also helps to have the possibility for more accurate code generation by the language-based tools [21], when they are implemented in the DSL (which is lacking in the related work). A successful system verification and validation can also be achieved with a proper formal semantics definition.In order to implement the defined declarative semantics of SEA_L, we have employed the LISA tool [22] which is based on attribute grammars. As can be noticed in further sections of this paper, implementation using LISA enables the separation of concerns between the syntax and the semantics. Moreover, it offers tools for syntax and semantics evaluation separately.Hence, the main contributions of this paper are listed as follows:•a new DSL-based methodology for the development of MAS with Semantic Web, where DSLs are formally specified with formalism that enables incremental specifications; andthe implementation of the static semantics of SEA_L MAS development language and integrating them within the operational semantics of SEA_L in the form of declarative specifications using attribute grammars; this leads to productivity and advanced semantic controls in our DSL, and modularity and extendibility for the new language.The remainder of the paper is organised as follows: Section 2 discusses the related work. The applied approach is elaborated in Section 3. The proposed methodology is discussed in Section 4 by especially taking into consideration the Agent–SWS interaction viewpoint of the system. In Section 5, use of the language and its semantics is presented using a case-study. Section 6 covers the evaluation and discussion for this study. Finally, the paper is concluded in Section 7.

@&#CONCLUSIONS@&#
