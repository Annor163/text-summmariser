@&#MAIN-TITLE@&#
Lower bounding procedure for the asymmetric quadratic traveling salesman problem

@&#HIGHLIGHTS@&#
Present different reformulations for the quadratic traveling salesman problem.Develop new bound based on reformulation-linearization technique.Propose a cycle based model and solve it by column generation approach.Develop a stabilized column generation.

@&#KEYPHRASES@&#
Traveling salesman,Reformulation-linearization technique,Cycle cover,Column generation,Lower bound,

@&#ABSTRACT@&#
In this paper we consider the Asymmetric Quadratic Traveling Salesman Problem (AQTSP). Given a directed graph and a function that maps every pair of consecutive arcs to a cost, the problem consists in finding a cycle that visits every vertex exactly once and such that the sum of the costs is minimal. We propose an extended Linear Programming formulation that has a variable for each cycle in the graph. Since the number of cycles is exponential in the graph size, we propose a column generation approach. Moreover, we apply a particular reformulation-linearization technique on a compact representation of the problem, and compute lower bounds based on Lagrangian relaxation. We compare our new bounds with those obtained by some linearization models proposed in the literature. Computational results on some set of benchmarks used in the literature show that our lower bounding procedures are very promising.

@&#INTRODUCTION@&#
The Traveling Salesman Problem (TSP) is one of the most studied optimization problems. Given a graphG=(V,A)with costs ce, e ∈ A, the problem consists in finding a cycle C that visits each vertex in V exactly once (i.e., a Hamiltonian cycle), and such that the total cycle cost is minimal. In its most common form, the TSP has a linear cost function, equal to the sum of the costs ceof each arc in C. Now, consider a variant of the TSP having a non-negative interaction cost Qeffor every pair of consecutive arcs e, f ∈ A. Because the cost of a cycle can be computed as a quadratic function, this problem is called Quadratic Traveling Salesman Problem (QTSP) and is NP-hard as shown in Fischer et al. (2014). As for the linear counterpart, the QTSP has a symmetric and an asymmetric variant. In this paper we focus on the Asymmetric Quadratic Traveling Salesman Problem (AQTSP) which appears to be more challenging. A preliminary version of the results presented here together with the study of the Symmetric Quadratic Traveling Salesman Problem (SQTSP) have been published as conference proceedings in Rostami, Malucelli, Belotti, and Gualandi (2013).The QTSP was introduced as an application of bioinformatics by Jäger and Molitor (2008) but it can also be applied in robotics and telecommunications. In robotics, a variant of QTSP called Angle-TSP can be used for the optimization of robot paths in terms of energy consumption. The Angle-TSP problem seeks to minimize the total angle of a TSP tour for a set of points in the Euclidean space where the angle of a tour is the sum of the direction changes at all points (Aggarwal, Coppersmith, Khanna, Motwani, & Schieber, 2000). Also, the QTSP can be viewed as a generalization of the Reload Cost TSP (RTSP) introduced by Amaldi, Galbiati, and Maffioli (2011). In the RTSP, one is given a graph whose each arc is assigned a color and there is a reload cost when passing through a node on two arcs that have different colors.The QTSP has been introduced quite recently and its literature is rather limited. In particular, the QTSP has been tackled by Fischer et al. (2014) with heuristic algorithms based on well-known heuristics for the TSP, with an ad-hoc branch-and-bound, and with a branch-and-cut approach based on a linearization of a 0-1 Quadratic Programming formulation of the problem. In Fischer and Helmberg (2013) and Fischer (2014) used the polyhedral structure of linearized integer programming formulations to develop a branch-and-cut algorithm for the SQTSP and AQTSP, respectively, that are the current state-of-the-art for QTSP.In this paper we study lower bounding procedures for the AQTSP. Considering the special structure of the quadratic costs of the AQTSP, we present an extended Linear Programming formulation of the problem with an exponential number of variables that is solved via Column Generation (CG). The basic idea is to have a variable for each cycle of G. This yields a pricing subproblem that consists in finding a cycle of minimum quadratic cost. We formulate the pricing subproblem as a 0–1 Quadratic Program, which is linearized and solved with standard techniques. We resort to stabilization techniques to overcome the tailing-off effect of the CG approach. We also present the linearized integer programming formulation proposed by Fischer (2014). This formulation is, in fact, based on the standard Asymmetric Traveling Salesman Problem (ATSP) formulation of Dantzig, Fulkerson, and Johnson (1954) which has an exponential number of constraints. In order to avoid this complication we modified the proposed model by using the compact formulation of Miller, Tucker, and Zemlin (1960) with a polynomial number of variables and constraints. To generate a tighter representation of the problem, we develop a Mixed Integer Linear Programming (MILP) formulation that make use of a particular application of the Reformulation-linearization technique (RLT) (Adams & Sherali, 1986; 1990). We develop an effective Lagrangian relaxation scheme to compute the associated lower bound.Consider a complete directed graphG=(V,A)with vertex setV={1,2,…,n},arc set A, and cost function Q that maps every pair of consecutive arcse=(i,j),f=(j,k)∈Ato a non-negative integer costQef=Qijk. The AQTSP seeks a directed tour (i.e., a directed cycle passing through every vertex exactly once) of minimum cost. Let the binary variable xijbe equal to 1 if the arc (i, j) ∈ A belongs to the minimum cost tour, and zero otherwise. A formulation for the AQTSP is then given by(1)AQTSP:min∑(i,j),(j,k)∈A:k≠iQijkxijxjks.t.∑j:(i,j)∈Axij=1i∈V(2)∑i:(i,j)∈Axij=1j∈V(3)∑i∈S,j∉S:(i,j)∈Axij≥1S⊂V,2≤|S|≤n−2(4)xij∈{0,1}(i,j)∈A.where constraints (1) and (2) force to select a single outgoing arc and a single incoming arc for each node, respectively, and constraints (3) are the well known subtour elimination constraints (Dantzig et al., 1954). To ease the argumentation, we define the new setAas follows:A={(i,j,k):(i,j)∈A,(j,k)∈A,i≠k}.The AQTSP formulation presented here is based on the ATSP formulation of Dantzig et al. (1954) which has an exponential number of constraints. Since, further on, we will need a more compact formulation we adapt the MTZ formulation of Miller et al. (1960) to the quadratic case. That formulation fixes node 1 as a “depot”, which the salesman must leave at the start of the tour and return to at the end of the tour. Let ujbe a continuous variable representing the position of node j in the tour. Then the MTZ type formulation for the AQTSP is given by(5)AQTSPMTZ:min∑(i,j,k)∈AQijkxijxjks.t.ui−uj+(n−1)xij⩽n−2i,j⩾2;i≠j(6)1⩽uj⩽n−1j⩾2(1),(2),(4).where constraints (5) ensure that, if the salesman travels from node i to node j, then the position of node j is one more than that of node i, and constraints (5) together with the bounds (6) ensure that each non-depot node is in a unique position.The main difficulty of the AQTSP and AQTSPMTZ, in addition to the TSP problem structure, lies in the quadratic structure of the objective function. One of the most natural ways for solving the problem is to linearize the quadratic terms xijxjkfor all(i,j,k)∈Ausing the standard linearization technique of Glover and Woolsey (1974). The approach is based on the introduction of new non-negative binary variablesyijk=xijxjkwhich satisfy the following set of constraints:yijk≤xij,yijk≤xjk,andyijk≥xij+xjk−1.The main disadvantage of the standard linearization is that it does not take the problem structure into account. Taking into account the problem structure to connect the x and y variables, Fischer (2014) introduced a mixed integer linear programming with continuous variables yijksuch thatyijk=xijxjkforall(i,j,k)∈A.The formulation has the following form:(7)LPF:min∑(i,j,k)∈AQijkyijks.t.∑k:(i,j,k)∈Ayijk=xij(i,j)∈A(8)∑k:(k,i,j)∈Aykij=xij(i,j)∈A(9)yijk≥0(i,j,k)∈A(1)−(4).where constraints (7) and (8) enforceyijk=xijxjk.Using the AQTSPMTZ compact formulation discussed above, we define a compact formulation of LPF, called LPFMTZ as follows:LPFMTZ:min{∑(i,j,k)∈AQijkyijk:(1),(2),(4)−(9)}.Padberg and Sung (1991) showed that the LP relaxation of the MTZ formulation yields an extremely weak lower bound for the ATSP. However, our computational results show that this is not always true for the AQTSP.To obtain an MILP formulation for the AQTSP, we apply a scheme based on the Reformulation-linearization technique (RLT). As far as the tightness of the bounds is concerned, the RLT base approaches are among the most successful lower bounding approaches for many combinatorial optimization problems (Adams, Guignard, Hahn, & Hightower, 2007; Adams & Johnson, 1994; Rostami & Malucelli, 2015; Sherali & Driscoll, 2002). The full application of the RLT for general zero-one polynomial programs (Adams & Sherali, 1986; 1990), transforms the original problem into an MILP via two basic steps of reformulation and linearization. In the reformulation step, the constraints are multiplied by the binary variables and their complements to construct redundant nonlinear constraints. In the linearization step, the objective and constraints of the reformulated problem are linearized by substituting each distinct nonlinear term with a new continuous variable. Depending on how many times this process is applied, different levels of RLT can be obtained.Let us consider the AQTSPMTZ formulation of the AQTSP proposed in Section 2. Following the idea of Sherali and Driscoll (2002) for the MTZ formulation of the ATSP, we replace constraints (5) with the nonlinear constraints (10) to obtain the following revised compact formulation(10)AQTSPRMTZ:min∑(i,j,k)∈AQijkxijxjks.t.ujxij=(ui+1)xiji,j⩾2;i≠j(1),(2),(4),(6).where constraints (10) enforce that if the salesman travels from node i to node j (i.e.,xij=1) for all i, j ≥ 2, thenuj=ui+1.To linearize the non-linear terms xijxjk,(i,j,k)∈Aand ujxij, i, j ≥ 2, i ≠ j we apply a scheme based on the RLT. For ease of notation let us first define a new setBas:B={(i,j,k):(i,j,k)∈A,i,j,k⩾2}.Then, the RLT based representation of AQTSPRMTZ is generated via the following two steps:Reformulation step:1– We multiply Eq. (1), for each i ∈ V, by each of the(n−1)variables xki, ∀k ≠ i. Then, we multiply Eq. (1), for each i ≥ 2 by each of uk, ∀k ≥ 2 and by each pairwise product of uixki, ∀k ≥ 2, k ≠ i. Moreover, for each j ∈ V, we multiply Eq. (2) by each of the(n−1)variables xjk, ∀k ≠ j. In addition, for each j ≥ 2 we multiply Eq. (2) by each of uk, ∀k ≥ 2 and by each pairwise product of ujxjk, ∀k ≥ 2, k ≠ j. All4n(n−1)such quadratic equations and2(n−1)(n−2)such cubic equations are included within the formulation. We then setxijxji=0for all (i, j) ∈ A to eliminate the two-vertex subtours.2– For each i, j ≥ 2; i ≠ j, we multiply Eq. (10) by each of the(n−2)variables xjkand xki, ∀k ≥ 2, k ≠ i, j. All(n−1)(n−2)2such cubic equations are then included within the formulation.3– Consider constraints (6). For each j ≥ 2, we multiplyuj−1⩾0by (i) each of the(n−1)variables xjiwith i ≠ j, i ≥ 2, and each of the(n−1)(n−2)pairwise product of xjixikwith(j,i,k)∈B; and by (ii)(1−xij−xji)with i ≠ j, i ≥ 2, and by(1−xij−xjk−xki+xijxjk+xjkxki+xkixij)with(i,j,k)∈B.4– Consider again constraints (6). For each j ≥ 2, we multiplyn−1−uj⩾0by (i) each of the(n−1)variables xijwith i ≠ j, i ≥ 2, and each of the(n−1)(n−2)pairwise products of xkixijwith(k,i,j)∈B; and by (ii)(1−xij−xji)with i ≠ j, i ≥ 2, and by(1−xij−xjk−xki+xijxjk+xjkxki+xkixij)with(i,j,k)∈B.We should note here that the inequalities used as multipliers of constraints (6) in the step (ii) of the third and fourth phase of the above reformulation generate the valid inequalities for the AQTSP. This is because the inequalities1−xij−xji≥0with i ≠ j are the two-vertex subtour elimination constraints, while the inequalities1−xij−xjk−xki+xijxjk+xjkxki+xkixij⩾0,for all(i,j,k)∈A,are triangle inequalities that are valid for the general Boolean Quadric polytope (Padberg, 1989).Linearization step:The linearization step makes the following substitutions:(11)wij=uixij,andwij′=ujxiji,j⩾2,i≠j,(12)(n−1)xj1=ujxj1,andx1j=ujx1jj⩾2,(13)vkij=ukxij,(i,j)∈A,k⩾2,i≠j≠k,(14)yijk=xijxjk,(i,j,k)∈A,(15)zijk=uixijxjk,(i,j,k)∈B,(16)zijk′=ujxijxjk,(i,j,k)∈B,(17)zijk′′=ukxijxjk,(i,j,k)∈B,(18)(n−2)yij1=uixijxj1,(i,j,1)∈A,i,j⩾2,(19)2y1ij=ujx1ixij,(1,i,j)∈A,i,j⩾2.Observe that, for any j ≥ 2, Eq. (12) enforce thatuj=(n−1)ifxj1=1,anduj=1ifx1j=1. Moreover, for any(1,i,j)∈A,i,j⩾2,Eqs. (18) and (19) enforce thatui=(n−2)ifxij=xj1=1,anduj=2ifx1i=xij=1.Using (10) and Eq. (12) we have:(20)wij′=wij+xij(i,j)∈A,Moreover, Eq. (14) to (17) together with the nonlinear constraints generated in the second phase of the reformulation step yield the following relationships:(21)zijk′=zijk+yijk(i,j,k)∈B,(22)zijk′′=zijk′+yijk(i,j,k)∈B.This allows us to eliminate all variableswij′for all (i, j) ∈ A, and variableszijk′andzijk′′for all(i,j,k)∈Bfrom the resulting model. This leads to the following MILP formulation:PRLT:(23)min∑(i,j,k)∈AQijkyijks.t.∑j≠1:(i,j)∈Awij+(n−1)xi1=uii⩾2(24)∑i≠1:(i,j)∈Awij+1=uji⩾2(25)∑k:(j,k)∈A,k≠i,1zijk+(n−2)yij1=wij(i,j)∈A,i,j⩾2(26)∑k:(k,i)∈A:k≠j,1zkij+xij=wij(i,j)∈A,i,j⩾2(27)∑j:(i,j)∈Avkij=uki,k,i≠k,k⩾2(28)∑i:(i,j)∈Avkij+1=ukj,k,j≠k,k⩾2(29)xij≤wij≤(n−2)xij(i,j)∈A,i,j⩾2(30)wij+wji≥uj+(n−2)xij−(n−1)(1−xji)(i,j)∈A,i,j⩾2(31)wij+wji≤uj−(1−xij)(i,j)∈A,i,j⩾2(32)yijk≤zijk≤(n−3)yijk(i,j,k)∈B(33)zijk+zjki+zkij≤(1−uj)+(vjki+wij+wjk)+(n−1)(yjki−xjk−xki)+(n−2)(1+yijk−xij)+(n−3)ykij(i,j,k)∈B(34)zijk+zjki+zkij≥(1−uj)+(vjki+wij+wjk)+(yjki−ykij−xjk−xki)(i,j,k)∈B(35)yijk≥0(i,j,k)∈A(1),(2),(4),(7),(8).where constraints (7), (8), and (23) to (28) are the results of the first phase of the reformulation step, Linearizations (11) to (19), and Substitutions (20) to (22). The lower and upper bounding restrictions in (29) and (32) are the results of step (i) of the third and the fourth phase of the reformulation step, respectively. Finally, step (ii) of the third and the fourth phase of the reformulation step yield constraints (30) to (34).Observe that, following the idea proposed by Sherali and Driscoll (2002) for the ATSP, we could also do the reformulation steps 3 and 4 for the depot 1 to construct new valid inequalities, i.e., multiply for each j ≥ 2, the inequalitiesuj−2⩾0andn−uj−2⩾0by xj1, xj1x1kwith(j,1,k)∈A,j,k⩾2,(1−x1j−xj1)with i ≠ j, i ≥ 2, and(1−x1j−xjk−xk1+x1jxjk+xjkxk1+xk1x1j)with(i,j,k)∈B. However, our preliminary computational experiments indicated that adding these new generated valid inequalities to PRLT does not tighten the LP relaxation of PRLT significantly, while increases the running time for the evaluation of the associated lower bound. For this reason, we do not consider them in PRLT formulation.We should also note that, with the intent of strengthening the problem representation, we applied a different RLT (Adams & Sherali, 1986; 1990) for the AQTSPMTZ formulation. In the reformulation step, we multiplied each constraints (1), (2), (5), and (6) by each of the |A|2 binary variables xkl, and append these new constraints to the formulation. Then we substitutedxkl2with xklthroughout the constraints and setxijxkl=0ifi=kand j ≠ l or i ≠ k andj=l. Moreover we setxijxji=0to eliminate subtours involving only two nodes. In the linearization step, we substituted each product xijxklwith tijkland enforced the following equations to the problem:tijkl=tklij(i,j),(k,l)∈A,i<k,j≠l,(i,j)≠(l,k).Due to the large number of variables and constraints of the resulting model, solving its linear programming relaxation is not practical. Instead, we constructed a Lagrangian dual by placing constraints (3) into the objective function as proposed by Adams and Johnson (1994) for the Level-1 RLT representation of the Quadratic Assignment Problem (QAP), and solved the Lagrangian dual using a dual-ascent strategy similar to those proposed by Hahn and Grant (1998), Adams et al. (2007) for the QAP. However, the dual-ascent algorithm did not provide a good lower bound on the optimal objective function value and, accordingly, the bounds were not much better than those of the compact linearized formulation LPFMTZ. For this reason, we decided to neither report its details here nor report the computational results.Consider the LP relaxation of PRLT. Following the idea proposed by Rostami and Malucelli (2014) for reducing the size of the RLT representations of the QAP, we can remove constraints (1) from the PRLT. This is because it can be computed as a linear combinations of the constraints (2), (7), and (8). However, due to the large number of variables and constraints of the resulting model, solving this relaxation is still too much time consuming for large instances. Therefore, we construct a Lagrangian function which similar to the LPF and LPFMTZ formulations, has only O(n2) constraints. We relax and dualize constraints (32) to (34) using a set of Lagrangian multipliers αijk, βijk, γijk, and θijkfor all(i,j,k)∈B,respectively. Note that αijk, βijkare the Lagrangian multipliers corresponding to the lower and upper bounding restrictions in (32), respectively. The resulting Lagrangian function is as follows:L(α,β,γ,θ)=min∑(i,j,k)∈AQ¯ijkyijk+∑(i,j,k)∈B(Bijkzijk+Dijkvijk)+∑(i,j)∈A:i,j⩾2(Eijxij+Fijwij)+∑j⩾2Pjuj+Ks.t.(2),(7),(8),(24)−(31),(35)α,β,γ,θ⩾0.whereQ¯ijk={Qijk+θjki−θkij−αijk+(n−1)γkij+(n−2)γijk+(n−3)(γjki+βijk)(i,j,k)∈BQijk(i,j,k)∈A∖BBijk=αijk+θijk+θjki+θkij−βijk−γijk+γjki+γkij(i,j,k)∈BDijk=γkij−θkij(i,j,k)∈BEij=∑k:(i,j,k)∈B(θjki+θkij+(1−n)(γjki+γkij)+(2−n)γijk)(i,j)∈A,i,j⩾2Fij=∑k:(i,j,k)∈B(γijk+γkij−θijk−θkij)(i,j)∈A,i,j⩾2Pj=∑i,k:(i,j,k)∈B(θijk−γijk)j⩾2K=∑(i,j,k)∈B((n−1)γijk−θijk).To obtain the optimal (near-optimal) Lagrangian multipliers (α, β, γ, θ) we use the subgradient optimization technique (Held & Karp, 1971). We perform at most 1,000 iterations of the subgradient method. This number was chosen because preliminary experiments showed that after 1,000 iterations, the improvement of the lower bound stops or becomes very slow. The usual parameter that controls the step size in subgradient methods is initialized at value 1 and then halved whenever 50 iterations have passed without improving the best lower bound.In this section we present a formulation of the AQTSP that considers an exponential number of variables, one for each cycle of the given graph. Let C be a cycle of G described as set of arcs. The cost of cycle C is the sum of the costs of the pairs of consecutive arcs contained in the cycle, i.e.,q(C)=∑(i,j,k)∈A:(i,j),(j,k)∈CQijk.LetCandTdenote the collection of all cycles and all tours of G, respectively. Clearly, we have thatT⊆C,and henceminC∈Cq(C)≤minT∈Tq(T).Following the approach of Held and Karp to the TSP (Held & Karp, 1970), we associate a penalty πiwith every vertex i in V, and defineπ(C)=∑i∈Cπi. Although C is a set of arcs, here we extend the notation so that i ∈ C means i ∈ V and ∃j ∈ V: (i, j) ∈ C. Let us consider a new cost function defined as follows:d(C)=q(C)+π(C). Let T* denote an optimal tour of G, i.e.,q(T*)=minT∈Tq(T). Then, the following relations hold:minC∈Cd(C)=minC∈C{q(C)+π(C)}≤d(T*)=q(T*)+π(V)minC∈C{q(C)−π(V∖C)}≤q(T*).For any vector of penalty terms π we get a lower bound. However, we are interested in finding π that maximizes the lower bound:(36)maxπ∈RnminC∈C{q(C)−π(V∖C)},which is linearized by introducing a variable ρ as follows:(37)P:maxρs.t.ρ+π(V∖C)≤q(C)C∈Cρ,πunrestricted.Let λCbe the dual multipliers of constraints (37). We can write the dual of problem P as follows:(38)MP:min∑C∈Cq(C)λCs.t.∑C∈C:i∉CλC=0i∈V(39)∑C∈CλC=1(40)λC≥0C∈C.Since all multipliers in (38) are non-negative, an optimal solution must satisfyλC*=1for someC*∈CandλC*=0for allC∈C∖C*. It follows that the cycle C* is optimal with the cost q(C*) for the AQTSP.In this section we develop a column generation approach to solve the cycle based formulation MP presented in Section 4. Since the number of cycles inCis exponential with respect to the number of vertices, we first consider a restricted master problem with a feasible subset of cycles,C¯⊆C. Letπ=(π1,π2,…,πn)and ρ be the dual variables corresponding to constraints (38) and (39), respectively. The reduced cost of the variable λCfor eachC∈Cisq(C)¯=q(C)−π(V∖C)−ρ.A column entering the basis can be found by computing a minimum cost cycle with respect toQijk+πjfor each (i, j) ∈ A, (j, k) ∈ A. Letq(Cp)¯=minC∈Cq(C)¯. Ifq(Cp)¯≥0then the current solution is optimal. Otherwise we select column Cpto enter the basis.Theorem 1If the column Cp entering the basis corresponds to a tour, then it is an optimal tour.Consider any cycle C. Since column Cpis the selected column to enter the basis we haveq(Cp)¯=q(Cp)−π(V∖Cp)−ρ≤q(C)−π(V∖C)−ρ.If cycle C is also a tour, then q(Cp) ≤ q(C).□As we mentioned in the previous section, a column entering the basis can be found by computing a minimum cost cycle in G with respect to the new costQijk+πj. Looking for a cycle having minimum negative cost with respect to a quadratic objective is itself an interesting combinatorial optimization problem, which is NP-hard (Aggarwal et al., 2000; Galbiati, Gualandi, & Maffioli, 2014). In this section we explain how to update the linearized models, presented in Section 2, to solve the pricing problems.Consider the AQTSP formulation. Following Fischer et al. (2014) we transform the problem to an Asymmetric Generalized TSP (AGTSP) on a new graphG¯. The AGTSP is an extension of the ATSP where we are given a partition of nodes into groups and we are required to find a minimum length tour that includes exactly one node from each group (Karapetyan & Gutin, 2012). In our transformation, the set of arcs in G are considered as a set of nodes inG¯,and then are partitioned into n clustersVi={(i,j)∈A:j≠i}fori=1,2,…,n. Moreover, for each pair of arcs (i, j), (j, k) with i ≠ k, a new arc(i,j,k)∈Ais introduced with the costQijk′=Qijkif Qijk> 0. The only difference of this transformation with the one proposed by Fischer et al. (2014) is that in their model infeasible arcs are also created, though penalized by big costs. The resulting formulation is as follows:(41)min∑(i,j,k)∈AQijkyijks.t.∑j,k∈V:(i,j,k)∈Ayijk=1i∈V(42)∑j,k∈V:(k,i,j)∈Aykij=1i∈V(43)∑k∈V:(i,j,k)∈Ayijk−∑k∈V:(k,i,j)∈Aykij=0(i,j)∈A(44)∑i∈S∑j∉S:(i,j)∈Vi∑k∈V:(j,k)∈Vjyijk≥1∅≠S⊊V(45)yijk∈{0,1}(i,j,k)∈A.where variables yijkindicate whether arc(i,j,k)∈Ais selected or not in the optimal solution. Constraints (41) require a solution to include exactly one of the arcs leaving a cluster, while constraints (42) require a solution to include exactly one of the arcs entering a cluster. Constraints (43) are equivalent to network flow conservation constraints and ensure that a solution tour is uninterrupted and continuous. Finally, constraints (44) eliminate all subtours.The following proposition is a straightforward result implied by construction ofG¯.Proposition 2For any tourT∈Tin G there exists an n-arc cycleT¯inG¯that goes through each cluster exactly once withq(T)=q′(T¯)and vice versa.Using Proposition 2, one can obtain an optimal solution for AQTSP by solving an AGTSP onG¯. The following Theorem shows a possibility to reduce the size of the AGTSP formulation.Theorem 3Constraints(41)in problem AGTSP are redundant and can be removed from the model.Suppose y* is a feasible solution for problem AGTSP after removing constraint (41) and define, for each i ∈ V,ϵi=∑j,k∈V:(i,j,k)∈Ayijk*.We show thatϵi=1for all i ∈ V. For that, we consider clusterVs. Since constraint (42) is satisfied for clusterVsby y*, i.e.,∑k,j∈V:(k,s,j)∈Ayksj*=1,there must exist a node(s,t)∈Vswith in-degree one in the tour, while the in-degree of all other nodes in clusterVsis zero. Hence by (43) the out-degree of node (s, t) must be equal to one while the out-degree of all the other nodes in the same cluster must be zero.□As a consequence of Theorem 3, AGTSP simplifies as follows:AGTSP":min{∑(i,j,k)∈AQijkyijk:(42)--(45)}.Now let us consider the pricing problem of MP. Finding a negative reduced cost cycle for this problem is equivalent to solve a modified version of problem AGTSP’, w.r.t. the new costQijk+πj,in which each cluster is visited at most once. The formulation is as follows:(46)PP:min∑(i,j,k)∈A(Qijk+πj)yijk−(ρ+∑i∈Vπi)∑j,k∈V:(k,i,j)∈Aykij≤1i∈V(47)∑i∈S,j∉S,k∈V:(i,j,k)∈Ayijk≥ℓ(S)∅≠S⊊V(43),(45).where constraints (46) are the so-called resource constraint which enforce the solution to visit each cluster at most once. Constraints (47) are referred to as connectivity constraints. The right-hand side ℓ(S) is 1 if at least one of the clustersVi,i ∈ S visited, otherwiseℓ(S)=0.It should be observed that by forcing the solution of the pricing problem to be a cycle with negative cost we can easily remove constraints (47) from the pricing model. Therefore, finding a cycle with negative reduced cost is simply a matter of finding a path originating and ending at each node (i, j) of graphG¯having a negative cost and satisfying the resource constraint (46). Since dual variables π are defined on each clusterVi,the problem of finding a negative reduced cost cycle can be formulated as resource-constrained elementary shortest path problem. Letq¯stdenote the cost of the resource-constrained elementary shortest path from origin node (s, t) to itself inG¯. The pricing problem can be written as:min(s,t)∈A{qst}.The solution of the subproblems provides either a certificate of optimality of the current solution (λ, π, ρ) or a new column Cpthat will be added to the master problem. It is worth pointing out that solving the pricing subproblem to optimality is only needed to prove optimality of the current primal and dual solutions; one can stop solving the subproblem whenever a negative reduced cost column is found (Barnhart, Johnson, Nemhauser, Savelsbergh, & Vance, 1998). This happens because adding this column toC¯ensures that the new dual solution (π, ρ) will be different, and therefore the termination of the algorithm.Column generation methods usually suffer from slow convergence to the optimal solution and tailing off effects. Primal degeneracy, dual degeneracy and instability in the behavior of dual variables are well known to be the main causes of this phenomenon (Gilmore & Gomory, 1961; Kallehauge, Larsen, & Madsen, 2006).To control the dual variables during the solution process, we use the stabilized column generation approach proposed by Du Merle, Villeneuve, Desrosiers, and Hansen (1999). This approach combines the box step method (Marsten, Hogan, & Blankenship, 1975) with a kind of descent method proposed by Kim, Chang, and Lee (1995). The box step method introduces a box around the previous dual vector and modifies the master problem such that the feasible dual space is limited to the area defined by these boxes, while the latter tries to adapt the master problem so that the distance separating a dual solution from the previous optimal dual solution is linearly penalized.In order to present the idea, let us rewrite the restricted version of the master problem MP, forC¯⊆C,as the following model:(48)RMP:min∑C∈C¯q(C)λCs.t.∑C∈C¯:i∈CλC≥1i∈V(39),(40).where constraints (48) are obtained by subtracting each constraint (38) from (39) and state that each i ∈ V must be covered by at least one cycle. Note that since the set partitioning constraints admit negative dual values which can be problematic for the sub-problem, we used a relaxed version of the problem as the first step of the stabilization approach.Consider the dual variables π associated with the constraints (48) and bound each πiin the interval[δi−,δi+]. These bounds are first given as parameters to the model and then automatically updated during the process. The dual variable πican take values outside the given bounds, but the dual objective is then penalized byɛi−(δi−−πi)ifπi<δi−and byɛi+(δi+−πi)ifπi>δi+. The dual of RMP then becomes:SRP:maxρ+∑i∈Vπi−ɛi−ωi−−ɛi+ωi+s.t.ρ+∑i∈Cπi≤q(C)C∈C¯πi+ωi−≥δi−i∈Vπi−ωi+≤δi+i∈Vπ,ω−,ω+≥0,ρunrestricted.The primal of the stabilized restricted master problem, and hence the dual of SRP, is:(49)SRMP:min∑C∈C¯q(C)λC+∑i∈V−δi−μi−+δi+μi+s.t.∑C∈C¯:i∈CλC−μi−+μi+≥1i∈V(50)∑C∈C¯λC=1μi−≤ɛi−i∈V(51)μi+≤ɛi+i∈V(52)λ,μ−,μ+≥0.This method is referred to as BoxPen stabilization since the bounds(δ−,δ+)on the original dual variables π can be represented by a bounding box containing the current dual solution.In order to use the stabilized models efficiently, one must initialize and update the parameters correctly. In order to reduce the dual variables’ variations, select[δ−,δ+]to form a small box containing the current dual solution, and solve the problem SRMP. At the first iteration, when no solution is available, the dual variables π can be simply estimated. If the new π lies in the box[δ−,δ+],reduce its width and augment the penalty given byɛ−andɛ+. Otherwise, enlarge the box and decrease the penalty. The update could be performed in each iteration, or alternatively, each time a dual solution of currently best value is obtained. In Section 6 we discuss more about the updating process.From now on, we use CG and SCG to denote the basic version of the column generation and its stabilized version for solving problem MP.In this section we present our computational experiments on the lower bound computations for the AQTSP. We used the AMPL modeling language (Fourer, Gay, & Kernighan, 1987) with Cplex 12.0.1 as linear solver for the RMP and as a mixed integer linear solver for the pricing problem on an Intel Core i5-2410M CPU with 2.30 GHz and 6 GB RAM in single processor mode. We implemented the algorithms for solving the PRLT and the LP models in the C++ language. In the following we present the test instances, the parameter setting of the stabilized column generation approach, and provide the comparison of the lower bounding approaches in details.In order to evaluate the presented methods we considered three classes of instances from the literature (Fischer et al., 2014). The first and the second classes (Random and Reload) are randomly generated instances, while the third one, Real, arises in an application of computational biology (Fischer et al., 2014; Jäger & Molitor, 2008). The Random data set consists of a class of randomly generated instances with size ranging fromn=5ton=25,where quadratic costs are defined as an integer number uniformly chosen within the set{0,1,…,10000}. The Reload data set are instances on random graphsG=(V,A)with different number of nodes and arcs are generated as follows: For each V with n ∈ {15, 20} arc (i, j), i, j ∈ V, i ≠ j is present with probabilityp∈{12,1}. If an arc (i, j) is present, then it is colored randomly with one of the colors1,…,dwhere d ∈ {5, 10, 20}. Based on the cost ctsof changing from color t to color s, two different data sets Reload1 and Reload2 are considered.We implemented the stabilized column generation approach using different sets of initial values. In the following we present the results of some preliminary experiments whose purpose was to initialize and update the parameters.We initializedδ−andδ+at−1000and 1000, respectively. The vector parameterɛ−andɛ+were selected as−5and 5, respectively and were kept fixed throughout the solution process. We updated the parameter(δ−,δ+)from(−1000,1000)to(π˜−100,π˜+100),whereπ˜is the current dual solution, only if the column returned by the subproblem had a non-negative reduced cost and(μ−,μ+)≠(0,0). The stopping criteria of the stabilized column generation algorithm isq(C)¯≥0and(μ−,μ+)=(0,0).In order to show the effectiveness of stabilization, we compare the computational time of column generation to its stabilized version on instances with dimensionn=20for all data sets in Fig. 1. For the Random and Reload data sets the results are the geometric averages over ten instances of sizen=20. The results show that the stabilization is very effective, especially for the Reload and the Real instances.As we proved in Theorem 3, if the column entering the basis corresponds to a tour, then it is an optimal tour. Therefore, in our CG approach, a solution of the pricing problem is optimal for the master problem MP if it covers all the nodes i ∈ V. Since looking for a single cycle in the pricing problem requires some kind of subtour elimination constraint, we restrict the search to find a single cycle or a multiple one (a collection of cycles) with negative cost. Therefore, when no more new columns can be priced out, a solution of the master problem MP gives a lower bound for the original problem.In Tables 1–3, we present our computational results. We compare different lower bounding procedures proposed in the paper in terms of arithmetic average gap and geometric average computational time. The formula we used to compute the percent gaps is100×(Opt−Lb)/Opt,where Opt and Lb stand for the lower bound and the optimal solution values, respectively. All the optimal objective values obtained from Fischer (2014). Moreover, we compare our bounding procedures with bounds presented by Fischer (2014) in terms of average gap; the first one is the bound of the LPF formulation obtained by dynamically separating the subtour elimination constraints (3) by means of the LEMON Graph Library (Dezs, Jüttner, & Kovács, 2011), while the second oneLPF+considers additional specific valid inequalities to LPF. Since the experiments have been done on different computers, it is difficult to establish a comparison in terms of computational times between our algorithms and those of Fischer (2014).Table 1 reports the results for Random instances. Each row of the tables reports the average results over 10 instances of the same size. The problem size (n) is found in the first column of the table. The next three columns, from left to right, give the percent gaps obtained using the compact formulation LPFMTZ, the subgradient implementation of PRLT, and the SCG. The CPU execution times of each approach are given in the next two columns of the table. The execution time of solving the LP relaxation of LPFMTZ is less than 1 second for all instances and we did not report it in the table. The last two columns of the table report the percent gaps obtained using two lower bounds LPF andLPF+presented by Fischer (2014).As we can observe from the results in Table 1, the SCG outperforms the best literature bounds LPF andLPF+when the size of the instances grows, and the difference becomes more evident for the largest instances. The bounds provided by PRLT are always better than those obtained by the compact linearized formulation LPFMTZ, and LPF formulation of Fischer (2014) when the size is over a certain threshold, but at the price of increased computational effort. Another interesting result observed from Table 1, is the quality of bounds obtained using the compact formulation LPFMTZ. The results indicate that the duality gaps implied by the LPF formulation of Fischer (2014) and the compact formulation LPFMTZ are competitive (especially when the dimension of the problem is increased). This shows that the main difficulty of the AQTSP for Random instances lies in the quadratic structure of the objective function rather than the TSP structure.Table 2 presents the computational results for the Reload1 and Reload2 instances. Again, each row of the tables reports the average results over ten instances of the same size. The first two columns indicate the problem size (n) and the probability and number of colors (p, c). The next three columns, from left to right, give the percent average gaps obtained by LPFMTZ, PRLT, and SCG. The CPU execution times of each approach (except LPFMTZ) are given in the next two columns of the table. Again, the running time of solving the LP relaxation of LPFMTZ is less than 1 second for all instances and we did not report it in the table. The last two columns report the best known literature lower bounds LPF andLPF+for the Reload presented by Fischer (2014). The results in this table confirm the indications arising from the random instances, namely that the SCG, with the exception of a few classes of instances, is much better than all the other bounds. The bounds obtained by PRLT are better than those of LPFMTZ, are competitive to the bounds of LPF (Fischer, 2014), but worse than the bounds ofLPF+.Table 3 presents the computational results for Real instances. The structure of the table is the same as Table 1, but each row reports the results for a single instance. These data set seems to be much easier than the previous classes of instances. Fischer (2014) pointed out that all instances have been solved in the root-node of the branch-and-bound-tree usingLPF+. As we can observe also from the table, the bounds obtained by LPF are tighter with respect to the previous classes of instances. Comparing the remaining, the SCG is comparable or even better than LPF (especially when the size of the instances grows), the PRLT bounds are better than LPFMTZ and competitive with those of LPF, but with the cost of increasing the running time.

@&#CONCLUSIONS@&#
In this paper we studied lower bounding schemes for the AQTSP. We proposed a cycle formulation for the problem and solved the resulting LP problem by a Column Generation approach. To solve the pricing problem of the Column Generation approach we used some modified version of the linearized formulations in the literature. To overcome the problems of instability in the behavior of dual variables of the presented master problem, we used a stabilized column generation approach. Moreover, we applied a specialized version of the reformulation-linearization technique on a compact formulation of the AQTSP, and developed an effective Lagrangian relaxation scheme to derive the associated lower bounds. Computational experiments show the value of our approach: first, the column generation approach is very promising as it outperforms the others on difficult test instances. Second, the linearized formulation of AQTSP combined with the compact formulation of Miller et al. (1960) for the ATSP provides bounds which (in contrast to ATSP) are competitive to those obtained by the linearized formulation combined with the Dantzig–Fulkerson–Johnson formulation (Dantzig et al., 1954). Finally, the bounds provided by the reformulation-linearization technique are always better than those of the compact linearized formulation, but with considerably increased running time.