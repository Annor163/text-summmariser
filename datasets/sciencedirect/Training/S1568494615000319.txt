@&#MAIN-TITLE@&#
Rules discovery in fuzzy classifier systems with PSO for scheduling in grid computational infrastructures

@&#HIGHLIGHTS@&#
Proposal to improve scheduling in grid computing based on soft computing.Fuzzy Classifier Systems are used as grid schedulers.Critical aspect in these grid schedulers: knowledge acquisition.New rules discovery strategy based on PSO is proposed, KARP.Higher quality of knowledge allows a more efficient scheduling in the grid.

@&#KEYPHRASES@&#
Fuzzy computing,Fuzzy classifier systems,Particle swarm optimization,Grid computing,

@&#ABSTRACT@&#
Particle swarm optimization (PSO) is a bio-inspired optimization strategy founded on the movement of particles within swarms. PSO can be encoded in a few lines in most programming languages, it uses only elementary mathematical operations, and it is not costly as regards memory demand and running time. This paper discusses the application of PSO to rules discovery in fuzzy classifier systems (FCSs) instead of the classical genetic approach and it proposes a new strategy, Knowledge Acquisition with Rules as Particles (KARP). In KARP approach every rule is encoded as a particle that moves in the space in order to cooperate in obtaining high quality rule bases and in this way, improving the knowledge and performance of the FCS. The proposed swarm-based strategy is evaluated in a well-known problem of practical importance nowadays where the integration of fuzzy systems is increasingly emerging due to the inherent uncertainty and dynamism of the environment: scheduling in grid distributed computational infrastructures. Simulation results are compared to those of classical genetic learning for fuzzy classifier systems and the greater accuracy and convergence speed of classifier discovery systems using KARP is shown.

@&#INTRODUCTION@&#
Fuzzy classifier systems (FCSs) are fuzzy rule-based systems (FRBSs) that integrate expert knowledge and learn through credit assignment and classifier discovery processes [1]. These expert systems are extensively used in current applications because of their ability to deal with uncertain, imprecise or partial information, e.g., medical diagnosis [2], image analysis [3], adaptive sampling [4] and protein classification [5]. Their main strength is their ability to offer an efficient trade-off between the empirical accuracy of classical engineering strategies and the interpretability obtained by the use of natural language through linguistic labels.The prototype learning of a FCS is divided into two main processes: the evaluation in the credit assignment system and the evolution in the classifier discovery system [6]. In the former, a collection of classifiers is provided and the efficacy of each classifier is determined considering feedback from the environment. In the latter, new classifiers are generated. In contrast to conventional expert systems where rules are provided by knowledge engineers, FCSs use discovery strategies to obtain new classifiers for their knowledge bases that are generally presented in the form of “IF-THEN” structures. Specifically, the traditional classifier discovery process for FCSs uses genetic algorithms (GAs) for this purpose based on the Michigan approach. In this way, the classifier discovery system generates new classifiers from the evolution of a previous set of classifiers. Basically, this approach selects those classifiers with high usefulness to take part and to generate new individuals in the next generation. In other words, with the aim of evolving the system knowledge, the genetic approach substitutes the set of classifiers of the population showing the lower efficiency with new classifiers that are generated through the application of genetic operators. Hence, the learning of rules is achieved following a similar procedure to natural evolution.In this work, an alternative bio-inspired method for classifier discovery systems, Knowledge Acquisition with Rules as Particles (KARP) is proposed, based on the swarm intelligence optimization strategy, Particle Swarm Optimization (PSO) [7]. PSO is a stochastic evolutionary algorithm that has shown its efficacy for the optimization of complex multi-dimensional problems in diverse areas including articulated human motion tracking [8], interplanetary trajectories [9], reactive power dispatch [10] and mortality prediction of septic patients [11]. It is a very straightforward strategy derived from a simple concept based on the movement of swarms that has become an extended optimization procedure. The strategy only uses elementary mathematical operations, it is not costly in terms of memory and speed and its ability to achieve a fast convergence has been demonstrated [7,12]. Furthermore, PSO has shown to be more efficient than other optimization strategies such as GAs in many situations [13]. One of the main advantages of this strategy with respect to GAs is given by its simple implementation and the limited number of parameters to be fixed. PSO does not require genetic operators such as crossover or mutation, but particles are updated considering internal velocities. In addition, particles have memory and consider unidirectional information exchanges what can significantly reduce the necessary communications among particles. In this work, the utilization of PSO is suggested to be adapted to classifier discovery systems in FCSs.In order to test performance, KARP is used in the classifier discovery system of FCSs in a well-known problem of practical importance, the design of metaschedulers for the emerging computational grids. Grid computing is a high-performance computational framework founded on the share of geographically distributed and heterogeneous computing resources with the purpose of solving large-scale problems in science, engineering, and technology [14]. Due to the high dynamism of grids, the coordination and cooperation of resources is a major problem and a lot of research has been done to find effective scheduling strategies. Specifically, the interest in fuzzy rule-based schemas is increasingly emerging to achieve near optimal schedules given their ability to tolerate and work with information subject to a certain degree of uncertainty, as the resources state in grid computing [15,16]. Hence, KARP is used for the self-learning of FCS metaschedulers for grid computing and the strategy is compared to fuzzy schedulers made up with classical classifiers discovery systems based on Michigan approach. There exist previous works that use PSO for knowledge acquisition in fuzzy schedulers where every particle represents a whole rule base (RB) that can be employed by the fuzzy schedulers [17,18] and therefore, they are computationally comparable to fuzzy genetic systems based on Pittsburgh approach. However, this work presents a learning strategy where every particle represents a single rule of the rule base used by the fuzzy scheduler, and in this way, it is computationally equivalent to fuzzy genetic systems based on Michigan approach.The rest of this paper is organized as follows. In Section 2, the general background to rules discovery in FCSs with GAs and the essentials of PSO are presented. The proposed learning strategy based on PSO, KARP, is introduced in Section 3. Section 4 analyzes the performance of KARP in a problem of practical importance, scheduling in grid computing and results are compared with the classical genetic learning. Finally, Section 5 concludes the paper.As introduced by Holland [6,19], a natural procedure in rule discovery processes of rule-based systems is to represent a whole rule as an individual, to generate a population of candidate rules, and to apply genetic operators to originate new generations of rules. He suggested a cognitive model (classifier system) where the individuals of the population are rules and a rule set represents the whole population. This strategy is known as Michigan approach. In this section, a brief introduction to rule discovery in FCSs is presented. First, the representation of fuzzy rules used in this work and the general procedure of FCSs systems for learning new rules based on the application of GAs with Michigan approach is described. Next, some background to the PSO optimization method that is adapted for rules learning in FCSs as an alternative strategy is provided.A fuzzy rule or classifier Riis made up of two differentiated terms: the antecedent and the consequent. The antecedent term corresponds to the rules activation condition whereas the consequent represents the output contribution to the final decision. In this work, a Mamdani codification [6,20] is considered for the rules and thus, no analytical functions are employed in consequent terms as in the case of Takagi, Sugeno and Kang approach [21]. Hence, a rule Riis denoted as,(1)Ri=IFx1isai,1,c=and/or,…xnisai,nTHENyisbiwhere (x1, …, xn) indicates the set of n input features, c represents the rule connective, ai,mand biare the associated fuzzy sets for feature xmand output for rule i, respectively, with m=1, 2, ..., n and i=1, 2, ..., N, N denoting the number of rules within the RB. As it can be inferred, ai,mand bicorrespond to one of the possible fuzzy sets for input xmand output,NFinmand NFout, respectively. Fig. 1depicts the encoding of a fuzzy rule considering two connectives “and/or” encoded as “1/2”, respectively.The rules of a FCS constitute a main part of the knowledge of the expert system and thus, its efficiency is strongly related to their quality and in turn, to the learning mechanisms. The traditional procedure of FCSs for learning new classifiers is based on the application of GAs following Michigan approach. A basic execution cycle can be summarized as follows [6]:(1)Generate a set of rules as initial population N of the strategy.Rank rules of N in regard to decreasing fitness or strength representing its usefulness.Select λ*N rules to be replaced among those rules with the lowest usefulness, where λ represents the selection rate.Select λ*N/2 pairs of rules to be parents of the new generation among those rules with the highest usefulness.Apply genetic operators to the λ*N/2 pairs selected at step 4 and generate λ*N/2 offspring pairs of rules.Substitute the λ*N rules selected at step 3 with the offspring population generated at step 5.Next, the different processes of the algorithm are described:•Initialization: the generation of N rules is done randomly in a way that no previous knowledge is required. Every antecedent ai,mcomponent can take a value in the interval[−NFinm,NFinm]where the negative elements correspond to the negation of the associated positive fuzzy set (i.e., not operator), the consequent is limited to the interval [−NFout, NFout] and the connective of every rule can be “and/or” operator.Selection: The selection process can be performed randomly with proportional selection probabilities of rules according to associated fitness, in a way that the strongest rules become parents of the new rules and participate in the next generation.Crossover: The mixing of the genome is done considering pairs of rules as in reproduction or biological recombination. In the uniform crossover every rule component is compared between parents and they are swapped with a given probability.Mutation: It consists of the random alteration of a component in a rule from its original form.Fig. 2illustrates an example of genetic operations (i.e., selection, crossover and mutation) of fuzzy rules with seven antecedents in Michigan approach.Through cooperation and competition among the population of rules, the genetic optimization approach in classifier discovery systems of FCSs can generally achieve good solutions. As discussed above, this strategy is founded on natural evolution. PSO, on the other hand, is derived by the social behavior of swarms such as flocks or schools to achieve better locations [7]. In contrast to GAs, PSO does not use evolutionary operators to handle individuals so-called particles but they move in the search space considering an internal velocity that is modified in a dynamic way regarding their own flying experience and their neighbors flying experience. Specifically, adjusting particles velocity is done considering three different terms: an inertial term, a self-recognition term or tendency of the particle to return to its best location, and a social term that is related to the individuals tendency to return to the best location reached by their neighbors. Hence, at every step (t+1), position x and velocityvof particle i are adjusted by the expression,(2)vi(t+1)=ωvit+d1r1(Pbit−xit)+d2r2(Gbt−xit)(3)xi(t+1)=xit+vi(t+1)where d1, d2 represent weight factors, Pbidenotes the best location achieved by particle i, Gbiis the best position found by the neighbors of particle i, r1, r2 indicate random factors, and ω is the inertia weight. In contrast to GAs, PSO does not contemplate a selection process where the fittest particles take part in the next generation but all the individuals of the swarm survive during the whole optimization process. The adaptation of the particles is done through the associated velocity. As shown in Eq. (2), each particle modifies its velocity in every step regarding its own current state, the own best solution and the best solution found by the whole swarm in the runs [12,22]. Hence, PSO does not perform a crossover process but it considers a so-called “conscious mutation” [23] through Eq. (3) where individuals evolve according to previous experience of the group. A key parameter in PSO is the inertia weight ω, which allows the balance between global and local searches. High values for ω promote global search whereas reduced values promote local search. In this way, inertia weight is generally associated to a decreasing value through the run of the strategy with the aim that the whole search space can be explored initially and that the search is intensified around final locations. In the next section, the adaptation of PSO to the learning of rules in FCSs is presented.In this work, a novel strategy for classifier discovery systems for the generation of high quality fuzzy rules in FCSs is suggested: Knowledge Acquisition with Rules as Particles (KARP). The learning strategy is based on the adaptation of PSO to the evolution of fuzzy rules in FCSs. In KARP, the swarm is made up of NP particles, each particle Pirepresenting a fuzzy rule with the encoding introduced in Section 2.1 and the goal is to move these particles or rules through the space to obtain good knowledge for the RB. The quality of particles is rated in terms of a selected fitness which is desirable for the FCS and that is obtained through the credit apportion system of the FCS. KARP approach stages are the following:(1)Generate a RB made up of NP particles determined by its position to become the individuals of the swarm. Definition of position of particles in the integer space. As stated before, PSO is a well-known optimization strategy where particles are represented by a position in the search space and whose aim is to find the best particle/position considering a specific cost function that evaluate the quality of the particle/position in that search space. The goal of KARP is obtaining high-quality Mamdani fuzzy rules for a FCS. Thus, the terms particle, position and rule are interchangeable used in this work. With this aim, each particle/position in KARP represents a rule and a rule is represented by a vector of integers values that indicate their antecedents a, consequent b and connectives c associated to a Mamdani structure (Eq. (1)). The structure for particle/position i is presented as follows,(4)Pi=[a1ia2i…anibici]where n is the number of input variables. The possible values for this vector are integers values in all of its terms and thus, the possible coordinates (i.e., antecedents, consequents and connector) of the particle/position are restricted to integers values. Therefore, KARP purpose is to obtain a set of vectors (set of particles/positions) that represents a set of fuzzy rules making up a high-quality RB for the FCS. Antecedents, consequents and connector representation are explained as follows in detail:Antecedent and consequent representation: Every possible fuzzy set for every variable is enumerated consecutively starting from 1 to NF, where NF is the number of possible fuzzy sets for a given variable. In every rule/particle, each variable is associated to an integer value representing its associated fuzzy set. Also, 0 value indicates the variable absence in the rule and negatives values represent the complementary set (i.e., NOT). Also, to keep the coherence of the fuzzy rules, a rule presenting zero value for all its antecedents is not allowed, i.e., it is considered as a nonsense to contribute to controller output regardless of all the controller inputs. On other hand, however, consequents are allowed to be set to zero as a way of representing the associated rule non contribution. Thus, every particle i in the swarm is restricted to the integer search space for antecedents and consequents,(5)aji∈[−NFin,NFin],j∈{1,2,...,n}(6)bi∈[−NFout,NFout]where NFin and NFout represent the number of fuzzy set for the input and the output, respectively, whereNFin,NFout∈ℕ.Connector representation: If the connector is set to 1, it indicates that the connective for the antecedents of the rule is “and”. However, if it is set to 2, it indicates the connector for the antecedents of the rule is “or”. Thus, the connector value must satisfy ci∈{1, 2} which made up the integer search space for connectives of rules.Associate each particle a velocity that drives the modification of each rule in every step. Definition of velocity of a particle in the integer space.On the other hand, the swarm position update process must be considered. With this aim, the velocity vector is introduced for this approach. The velocity at every iteration is represented as a vector of real values with the particle dimensions for each particle i, n+2,(7)Vi=[v1iv2i…vnivn+1ivn+2i]The velocity determines the increment or decrement in the value of the antecedent, consequent and connectives that must be added to a particle/position antecedents, consequent and connectives, respectively, in the following iteration and that lead to the movement or modification of the particle/position.Also, as in the initialization of rules, velocity must also be generated bearing in mind lower and upper bounds, Vmin and Vmax, respectively,(8)vki∈[Vmin,Vmax],k∈{1,2,...,n+2}with k=1, 2, ..., n+2. This limitation is given by the explosion control. As found in [24], explosion is generally contained through the consideration of a Vmax parameter, which limits step size of velocity. That is, with the goal of effectively guiding particles in the search space, the velocity in each iteration must be limited. In this way, the elements of the velocity must meet the following condition [25],(9)vki=sign(vki,)min(|vki|,Vmax)where the value for Vmax is fixed according to the dimension of the search space. As in the case of rules, the velocity vectors must be randomly generated.Identify the best particle found by every individual and the whole swarm. Quality of a particle.Once all the population of particles/rules and their associated velocities have been defined, they are evaluated to know its quality. With this aim, the RB made up by all the rules/particles is used by the FCS and its performance is measured considering a determined cost function. Considering this performance, a strength value that estimates each rule/particle quality using a credit assignment strategy (e.g., Holland's Bucket Brigade [26]) is obtained.Update the velocity of each particle according to the their own and social experience. In this stage, particles/rules are moved (i.e., modified) to obtain a greater quality. Specifically, the evolution of particles/rules is done modifying their associated velocity and adding this velocity to the particle/rule value. This modification is done considering three terms:•Inertial component: modification of the velocity of the particle/rule given by its value in the current iteration t weighted by a factor ω, so-called inertial weight,(10)ω⊗V(t)where ⊗ denotes the scalar multiplication of vectors.•Self-recognition component or inner tendency to return to its best position: modification of the velocity of the particle/rule given by the weighted difference of the best rule values for the particle/rule found so far, P#(t), and its current value P(t). The weight factor is denoted as (d1*r1),Social component representing the swarm particle leaning to move toward the best position found by its neighbors: modification of the velocity of the particle/rule given by the weighted difference of the best rule values found by all the swarm, P*(t), and its current value P(t). The weighted factor is denoted as (d2*r2),Therefore, the velocity for a particle/rule in the following iteration t+1 is given by,(13)V(t+1)=ω⊗V(t)⊕(d1*r1)⊗(P#(t)⊖P(t))⊕(d2*r2)⊗(P*(t)⊖P(t))where ⊕ indicates the regular addition between vectors. Note that after initialization, given to the weight factors mentioned above, velocity vectors are not necessarily composed of integers. However, the integer nature of particles must be considered in its update process as explained in the following step.Update the location of every particle in the search space.Finally, the particle value is updated as follows:(14)P(t+1)=round[P(t)⊕V(t+1)]where round function obtains the closer integer for every vector term. The update of particles must respect the coherence of the formulation of rules. Antecedents, consequents and connectives may exceed the integer search space as a consequence of the movement of particles (i.e., velocities vectors updated by Eq. (13) are not necessarily composed of integers, therefore, when considering Eq. (14), the value for antecedents, consequents and connectives must be rounded to the closer integers values within the search space). Thus, the following restrictions must be satisfied in every update process,(15)aki=NFinifaki>NFin−NFinifaki<−NFinround(aki)otherwise(16)bi=NFoutifbi>NFout−NFoutifbi<−NFoutround(bki)otherwise(17)ci=1ifci<12ifci>2round(ci)otherwiseAlgorithm 1Knowledge Acquisition with Rules as Particles, KARP.Rules initialization1. Swarm initialization: Num_particles=Num_rules=NP,Parameters initialization: Num_iter, Init_Inertial_weight ωo,r1, d1, r2, d22. Rules coherencefor(everyparticle/everyrulei),(a) No zero antecedents (rules coherence)(b)if|aki|>NFinthenEq.(15)(c)if|bki|>NFoutthenEq.(16)(d) ifci∉{1, 2}thenEq. (17)endforVelocity initialization3. Random setting of velocity.4. Velocity constraints. Eq. (8)Best rules initialization5. Initialize Gbest(P*) rule /Pbest(P#) ruleBest rules identification/Position updating/Velocity updating cyclefor (Num_steps)for (Num_particles)1. Update position. Eq. (14)2. Constraints Rules-Swarm position.(a) No zero antecedents (rules coherence)(b)if|aki|>NFinthen Eq. (15)(c)if|bki|>NFoutthen Eq. (16)(d) ifci∉{1, 2} then Eq. (17)3. Evaluate usefulness of the rule.Particles ++endforUpdate Gbest (P*) rulefor (Num_particles)1. Update Pbest (P#) rule.2. Update velocity. Eq. (13)3. Velocity Constraints. Eq. (8)Particles ++endforiter++endforReturn solution: Gbest (P*) ruleFig. 3illustrates the updating process of a rule Piin step t+1. As shown, Pinew location is obtained by the combination of the particle's current value and the new adjusted velocity. Specifically, the adjusted velocity is made up of the inertial, the self-recognition and the social components subject to weight factors. The basic cycle of KARP after initialization (i.e., steps 3–5) is reiterated until the stopping condition is met (e.g., number of iterations or determined quality for rules). In this way, particles are guided through a set of position updating steps to efficient locations that are translated into good quality rules. KARP strategy is summarized in Algorithm 1.Note that this work is focused on the design of the learning of the RB (learning of rules with fixed membership functions) in order to obtain fast and simple learning processes and with high interpretability. This is desirable in many systems like FRBS-based schedulers, where the time of the learning and interpretation of knowledge is relevant for its efficient performance and improvement [6,27]. Therefore, as in the case of genetic fuzzy learning such as Michigan approach (used for comparison), KARP assumes a predefined set of fuzzy membership functions in the database to which the rules refer to by means of linguistic labels and the evolutionary process adapts the RB, working with particles instead of chromosomes that describe a single fuzzy rule. The RB is represented by a list of rules following the Mamdani coding as presented before. The most common rule structure in Mamdani FRBSs involves the use of linguistic variables. Each linguistic variable has associated a fuzzy partition and the fixed number here for every variable represents the value in numeric form of the linguistic set which is not tuned.The proposed strategy for rules discovery in FCS, KARP, is evaluated in a challenging problem of practical importance nowadays, scheduling in grid computing. First, an introduction to scheduling in grid computing and the fundamentals of the application of FCSs to solve this problem are presented. Next, performance results of KARP are discussed.Grid computing is an emerging computational framework to solve large-scale problems in diverse fields of science and engineering based on the cooperation of widely distributed resources [14]. A grid is made up of a set of heterogeneous and geographically distributed resources from different institutions that share capabilities to overcome current limitations machines as independent entities. The structure of a hierarchical is grid is made up of two main levels. As shown in Fig. 4, the grid can be regarded as a set G of geographically distributed sites or resources domain (RD), GS={RD1, RD2, …, RDG}, where each site is defined as a collection of Hjheterogeneous computational resourcesRDj={rj,1,rj,2,…,rj,Hj}.Furthermore, grids are known to be “fully dynamic environments with uncertainties”[28] where machines actively become available, fall down or reduce its available capabilities in regard to several administrative policies that may change with time. A major challenge of these systems is the efficient coordination of resources and users demand, which is considered critical to harness grid networks potential. In this sense, scheduling in grid computing is a NP-hard problem [29]. In a hierarchical grid, two types of scheduling structure can be differentiated. On the one hand, the Local Resource Managers (LRMs) are responsible for allocating jobs within their own site or RD according to the site own local policies, whereas on the other hand, metaschedulers must decide the LRM where jobs must be sent to. Hence, the goal of a metascheduler is to manage the grid resources efficiently through the local scheduling systems coordination.Recent tendencies are focused on the adaptation of fuzzy rule-based models to cope with high dynamism and vagueness of such systems state in the scheduling [15,30]. Fuzzy rule-based schedulers base their schedules on the knowledge of the environment in the form of fuzzy rules or RBs and thus, the scheduler performance is subject to RB quality and consequently with the learning of fuzzy rules. Specifically, as shown in Fig. 4, a FCS metascheduler follows the structure of a Mamdani FRBS, i.e., fuzzification, inference and defuzzification systems. The objective of a FCS metascheduler is to provide a performance index for every participating RD or selector, yo, that represents the suitability of this RD to be selected for the following schedule. With this aim, at every scheduling step, the metascheduler retrieves the state information of all the available RDs given by a set of features in the form of crisp values. Also, these crisp values are transformed into fuzzy values through the fuzzification system in a way that the associated uncertainty is considered in the characterization of resources real conditions. Next, the inference system applies the system knowledge to obtain a fuzzy selector that is translated in a crisp performance index by the defuzzification system. Finally, once a selector yohas been derived for all the RDs, the site with highest selector is selected as the next target.As it can be derived, the whole scheduling process with FCS in based on the application of expert knowledge to the fuzzy state of the grid and thus, the quality of this knowledge in the form of rules and associated learning process is critical. In this work, the proposed learning strategy for FCSs, KARP, will be studied to improve the performance of FCS metaschedulers in grid computing.The fuzzy FCS metascheduler with KARP learning is evaluated through simulations with Alea software [31], a simulation toolkit based on GridSim [32] that lets the use of grid scenarios and traces from existing facilities for scheduling strategies evaluation. Specifically, the grid scenario is based on a Czech National Grid Infrastructure Metacentrum project [33], whose aim is to support the development of a distributed high-performance computing infrastructure through the joint cooperation of resources from academic and research institutions worldwide. In our simulations, the grid system consists of 14 sites integrating 806 central process units of diverse kinds (i.e., Opteron and Xeon) and speed (i.e., 1500–3200MHz) allocated in 210 resources with heterogeneous memory size (i.e., 1005,000–27343,000KB) running Linux. Furthermore, machines setting and machines maintenance, reservation and dedication traces are included in a way that information about the changes in performance of every grid machine through time due to failures, reservation, dedication or unavailability caused by changing condition or sharing policies are considered. In addition, jobs traces specify a set of parameters of every considered job: job identifier, associated job user or owner priority, list of properties to be met in the target resource and arrival time to the scheduler. These traces are collected from Metacentrum facilities in MWF format (available at [33]).The positive or negative performance of the acquired knowledge is evaluated using makespan[34] as performance index or fitness of the learning process. In a high-performance grid, the general goal of the scheduler is to maximize the productivity or throughput. Relevant previous works in the optimization of scheduling strategies [35–38] suggest makespan as performance criteria with this aim and it is also considered in this work. Thereby, the goal of the scheduler is the minimization of the latest job finalization time or makespan[34],(18)min{maxj∈JTj}with Tjthe finalization time of the latest job j of the set of jobs J.Regarding the configuration of the FCS metascheduler, the state of the grid system is described through 7 variables as shown in Table 1.Other features may be also used to obtain a more complete grid state characterization. Nevertheless, since the search space for the expert system RB highly expands with the number of features, this selection is considered to reach a balance between the RD state characterization and the effort of learning strategy for rule discovery [15,39]. Also, Fig. 5illustrates the fuzzy sets for the antecedent and consequent of the FCS metascheduler (corresponding to the grid state features and suitability index), the associated linguistic and numerical representation. Specifically, three fuzzy sets are considered for every antecedent, NFin=3, with labels low, middle and high encoded as 1, 2, and 3, respectively. Moreover, the negation sets, i.e., not low, not middle and not high, are associated to integers −1, −2 and −3, respectively. Additionally, the absence of the antecedent is encoded as 0,(19)a={nothigh,notmiddle,notlow,abscence,low,(20)middle,high}={−3,−2,−1,0,1,2,3};l=7The consequent contemplates five fuzzy sets with labels very low, low, middle, high and very high are encoded as 1, 2, 3, 4, 5, respectively. Also, negation sets corresponding to not very low, not low, middle, high and very high are encoded as −1, −2, −3, −4, −5, respectively, with the absence of consequent denoted by 0,(21)b={notveryhigh,nothigh,notmiddle,notlow,notverylow,(22)abscence,verylow,low,middle,high,veryhigh}(23)={−5,−4,−3,−2,−1,0,1,2,3,4,5};t=11The structure for each particle/position/rule i in grid computing problem in the simulations considering 7 input variables (i.e., antecedents of rules) describing the RD state, 1 output variable (i.e., consequent of rules), and 1 possible connector (i.e., “and/or” connectives of antecedents) relating inputs variables is,(24)Pi=[a1ia2i…a7ibici]with i=1, 2, ..., NP and(25)aji∈[−3,3],j∈{1,2,...,7}(26)bi∈[−5,5](27)ci∈{1,2}The number of rules, NP, in FCS for this work has been set considering previous experimental studies in the optimal number of rules in FCS metaschedulers in grid computing. Specifically, the results of these works were published in [15,39]. In these preliminary analysis, the optimal number of rules for seven-input-one-output fuzzy system, with cardinalities for the inputs and output T(x) and T(y) using Gaussian sets, 3 and 5, respectively (as in the present work) was studied for FCS metaschedulers in grid computing and 10 rules were indicated as the optimal number of rules for the problem in hand. Table 2presents an example of a swarm in its associated linguistic and vectorial forms.The swarm of rules made up a RB which is used by the FCS metascheduler to allocate workload (i.e., set of jobs) in the grid to the different RD. Once all the jobs have finished their execution in generation n of the learning strategy, the resulted makespan is taken as the evaluation of the RB for generation n, f,(28)fn=min{maxj∈JTj}Therefore, the shortest the achieved makespan fn, the better the quality of the RB. Nevertheless, in order to evolve rules an evaluation of each rule within the RB is necessary. The evaluation of a rule is given by its strength. The total strength of a rule, TSi,n, is obtained considering two different aspects: its influence in the final performance of the RB and its cooperation in the activation of other rules during the performance of the scheduler.•Influence in the final performance of the RBThe strength of rule i, Si,nis updated at each generation n considering its influence in the quality of the final performance of the RB as follows [6],(29)Si,n=Si,n−1+K·TR·Ei,n·(1−SR,n−1)ifEi,n⩾0Si,n−1+K·TR·Ei,n·SR,n−1ifEi,n<0where K and TRrepresent a constant concerning the setting of the system memory and the rule truth value, respectively, and the evaluation for rule i in generation n is calculated as,(30)Ei,n=SPn·RIi,nwith SPnthe system performance and RIi,nthe rule influence at generation n. SPnis a rate value showing improvement or deterioration of the system performance in the current generation compared to the previous generation performance (fn−1), and the overall performance until the current generation n on the basis of best and worst values for fitness f achieved by the strategy, fmin and fmax, respectively, so far,(31)SPn=1iffn≤fminfn−fn−1fmin−fn−1iffn>fmin∧fn⩽fn−1fn−1−fnfmax−fn−1iffn<fmax∧fn>fn−1−1iffn>fmaxRIi,nweights every rule contribution to the system output y (i.e., scheduler selector) in generation n in the defuzzification. It considers three different possibilities: the fuzzy set A in the consequent of the rule has been activated μA(yn)>0 and so it contributes to the system output and the fuzzy set of the consequent of the rule has not been activated μA(yn)=0 but the Euclidean distance of the limits of the fuzzy set of the consequent of the rule A and the system output has been reduced or increased from the previous generation n−1,(32)RIi,n=μA(yn)ifμA(yn)>00ifμA(yn)=0∧|A−yn|⩽|A−yn−1|yn−yn−1yn−1−ylifμA(yn)=0∧|A−yn|>|A−yn−1|where y1 denotes the closer bound of the associated fuzzy set to y[6].Cooperation in the activation of other rulesThe final quality of the RB (i.e., makespan) is achieved through the application of rules in the schedule of every job until the whole workload is allocated. Hence, the final success is given to a set of decisions. Note that the decision in every schedule has an influence in the state of the designed RD and thus, it has an influence on the activation of rules in the following schedule. Therefore, the contribution of activated rules in a schedule to the activation of rules in the following schedule is to be also valued to determine the strength of a rule. This is done through a credit assignment system in every generation n.One of the most successful strategies is Holland's Bucket Brigade (BB) [26] and it is used in this work. Essentially, BB algorithm considers each particle/rule as an intermediary that works with its suppliers (rules that make its conditions to be met) and consumers (rules that satisfy their conditions with its actions) and it is associated to a bid. If a rule wins a bid (i.e., it is activated), it has to pay part of this bid to its suppliers and it can receive payment from its customers in following stages. Thus, its strength increases if it receives more than it gives. Specifically, in BB, every rule, Ri, can be associated a bid value at schedule t in a given generation (in a generation the performance of a set of schedules is evaluated) that is expressed on the basis of the bid coefficient or specificity Cbidi, the strength Siand the firing strength Fi,(33)Bidi(t)=Cbidi·Si(t)n·Fi(t)where the firing strength is defined as the minimum degree of belonging to the membership function of those messages satisfying the rule [40]. Considering this bid value, the credit assignment system update particles/rules associated strength for those particle/rules cooperating in the achievement of the current system state. Thereby, the relevance of the participating rules in a given schedule t is recurrently subject to the success of active rules in the following schedule t+1. Thus, a given rule strength is calculated as follows [40],(34)Si(t+1)n=Si(t)n−Bidi+Fi∑k∈M(t)FkSbid(t+1)where M(t) denotes the collection of indexers of activated rules at the schedule t and Sbid(t) the sum of bids values,(35)Sbid(t)=∑k∈M(t)BidkIn this way, at every generation each particle/rule is associated a strength value that shows its contribution in the activations of other rules,Si(tE)nwith tEthe number of total schedules to allocate all the jobs of the workload in generation n.Finally, the total strength of rules is calculated as,(36)TSi,n=Si,n+Si(tE)nAt every generation, the velocity of every rule i must be updated considering its previous velocity, Vi(n), the best position found by the particle,Pi#(n), and the best position found by the whole swarm, P*(n), up to generation n,(37)Vi(n+1)=ω⊗Vi(n)⊕(d1*r1)(38)⊗(Pi#(n)⊖Pi(n))⊕(d2*r2)(39)⊗(P*(n)⊖Pi(n));Once the velocity for every rule i has been updated, rules are modified,(40)Pi(n+1)=round[Pi(n)+Vi(n+1)]Table 3shows an example of particles, velocity and associated strengths and evaluation of particles at generation n for example in Table 2. Also, Table 4presents an example of the update of velocities and particles for generation n.The learning of the FCS metascheduler with KARP is compared to the classical genetic strategy for classifiers discovery, Michigan approach. For both strategies several configurations are considered, as presented in Table 5.Also, in KARP approach, the inertia weight follows a decreasing exponential expression in a way that global search is favored at first iterations and a deepest exploration of the reached locations is allowed at the end ones,(41)ω(iter)=ω0·e(−iter/Numiter)cwhere iter represents the current step of the learning process, Numiteris the total number of steps in the learning process and c is constant fixed to 5 in our simulations.As stated before, the quality of the metascheduler is measured in terms of makespan. Fig. 6represents the learning evolution for the FCS metascheduler with the proposed swarm-based learning strategy and the classical genetic approach. As shown, the learning process for both types of classifier discovery systems is done for 200 iterations. Curves illustrate the average performance of the FCS metascheduler with the acquired knowledge at every step (40 runs) in the different configurations. It is observed that the initial convergence behavior of the FCS metascheduler with KARP in both configurations does not present any meaningful difference at early steps (approximately step 30) in comparison to the genetic strategy.Nevertheless, from this step, it can be appreciated that KARP achieves a faster convergence. Specifically, the genetic-based approach requires 103 and 141 iterations (configuration 1 and 2, respectively) to reach its final fitness, in contrast to KARP that converges in 97 and 81 iterations (configuration 1 and 2, respectively). In this way, the best configuration of KARP obtains its convergence in 22 iterations less than the best configuration of best genetic strategy, which is translated into a computational effort reduction of 22 function evaluations (FEs) [41].Regarding computational effort, it must be pointed out that optimizations algorithms are computationally rated generally according to the number of FE required [41,42]. Hence, since a FE in KARP is associated to a RB evaluation (as in Michigan approach), computational effort is measured interchangeably in RB evaluations or FE in this work. Specifically, in KARP the obtained RB is evaluated at every iteration and thus, computational effort for an experiment can be expressed as CEKARP=numiter, where numiter is the number of iterations or stopping condition. In the same way, computational effort for Michigan approach is CEMICHIGAN=numiter and therefore, both strategies can be fairly compared at each iteration in terms of computational effort. Also, regarding communication cost for the metascheduler to retrieve the state information of all the available RDs, it must be noted that communication cost of the FCS metascheduler is the same as any other state-based scheduling strategy for grid computing in the same scenario and using the same variables to describe the grid state [30,34,35]. The proposed FCS metascheduler using KARP is compared to the same FCS metascheduler using Michigan in the same conditions without considering communication cost. Communication cost is the same for both approaches and thus, the compared results are not affected by this network parameter.Table 6shows the performance of the classifier discovery strategies along several iterations, i.e., 50, 100 and 200 in 40 runs. Specifically, it presents the mean result achieved by the swarms/populations (average) with the associated standard deviation (standard deviation) and 95% confidence interval (confidence interval -95%) and the best result (Min). As shown, the performance of the classifier discovery system with KARP obtains better average convergence results (iteration 200) than the system with genetic learning. Furthermore, as expected from the discussion above, the better average results are significant from iteration 100 whereas there is not significant improvement in early iterations (50) of KARP over the genetic strategy in every configuration. Table 7summarizes the relative improvement of KARP over the genetic strategy in diverse iterations. It is shown that the best KARP final results (iteration 200) improve the genetic strategy by 1.23% and 2.47% in its best and worst configuration (configuration 2 and 1, respectively). Moreover, it can be appreciated that KARP in its worst setting (configuration 1) is able to improve the best result of the genetic strategy (configuration 2) by 0.34% and reach an improvement of 1.60% (configuration 1). Additionally, as shown in Table 6, the best RB found with KARP learning outperforms the best genetic RB fitness (Min) by 0.66%, something that proves KARP ability to achieve a deeper search space exploration.Also, statistical tests are conducted to further analyze the validity of results. First, the normality of data with Shapiro-Wilks test is studied for Michigan and KARP best final results. As shown in Table 8, p-values < = 0.05, then the null hypothesis that the samples came from a Normal distribution must be rejected.Therefore, the data is analyzed using nonparametric tests. Also, Table 8 presents the nonparametric Wilcoxon or Mann-Whitney test [43]. An observation is made to compare the best results for Michigan and KARP. It relates the average of the fitness function in two different populations (Distribution 1 vs Distribution 2). For Distribution 1, the evidence against the null hypothesis is that the sum of the ranges in Distribution 1 (Michigan) is higher than that of Distribution 2 (KARP). Wilcoxon W parameter results in W value with a p-value, i.e., the evidence against the null hypothesis is significant with the obtained p-value. As it can be observed, the p-value < = 0.05. Therefore, it can be concluded that the improvement of KARP is statistically significant in comparison to Michigan. Hence, simulations show that KARP learning provides a faster and more accurate learning that the genetic approach in classifier discovery systems.Finally, some observations are made about the comparison of KARP to genetic strategies. In many diverse previous works in literature [44,45] a wide range of configurations have been considered to test the performance of Michigan and Pittsburgh approach. It has been shown that Pittsburgh approach is able to achieve a greater accuracy than Michigan approach in most configurations. However, the associated computational effort is significantly more reduced for Michigan approach to achieve good results and thus, they can be convenient in many applications. In this work, the goal has been to provide an alternative learning strategy to Michigan approach for FCS requiring the same computational effort and improving its accuracy. An strategy, KARP, has been proposed that evolves rules as individuals as Michigan approach does, and that requires the evaluation of a RB at every iteration as Michigan approach requires too. However, the evolution of rules in not done through genetic operations as Michigan approach does but using PSO. Both strategies Michigan and KARP belong to the same type of fuzzy systems, FCS, and they can be fairly compared in terms of computational effort at every iteration. Results show that KARP has a greater accuracy than Michigan for FCS. Therefore, the main advantage of FCS using KARP or Michigan approach in comparison to Pittsburgh approach is its reduced computational effort. Since the computational effort of Michigan and KARP is it exactly the same at every generation and iteration, respectively, our previous works [18,39] comparing Michigan approach and Pittsburgh approach in grid computing fuzzy metaschedulers can be also considered to analyze the performance of KARP with regard to Pittsburgh in detail.

@&#CONCLUSIONS@&#
In this work, the application of swarm intelligence to rule discovery in FCSs has been proposed and a new strategy, KARP, has been presented. Specifically, KARP is based on PSO, a simple algorithm proving its efficiency for optimizing a wide range of functions based on the movement of swarms in the space towards best suited locations. In KARP approach each rule acts as particle that moves in the space with the final aim of finding the best location and thus, the best quality to cooperate in obtaining RBs for the experts classifiers systems. KARP is intended to be an alternative to the classic genetic approach for rule discovery in FCS, Michigan approach. To test the performance of KARP, a problem of practical importance nowadays, scheduling in grid computing has been selected. Specifically, the performance of FCS metaschedulers with both genetic and swarm-based strategies has been discussed. As simulation results show, KARP achieves an average greater accuracy (0.34–2.47%) and a faster convergence speed with the consequent reduction of computational effort. Moreover, one of the most relevant advantages of KARP over the genetic approach is related to its simplicity. KARP requires the use of a major operator, i.e., velocity, in contrast to the mutation, selection and crossover processes in the genetic approach. Hence, KARP is suggested as an efficient alternative for rule discovery in FCSs.