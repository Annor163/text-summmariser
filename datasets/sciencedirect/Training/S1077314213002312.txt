@&#MAIN-TITLE@&#
Topological modifications and hierarchical representation of cell complexes in arbitrary dimensions

@&#HIGHLIGHTS@&#
A set of basis topologically consistent homology-preserving and homology-modifying operators on cell complexes is introduced.A multi-resolution model for cell complexes (HCC) is defined.HCC based on homology-preserving operators is implemented.Homology generators are computed on the coarsest complex, and propagated to complexes at intermediate resolution using HCC.Proofs of the correctness are given.

@&#KEYPHRASES@&#
Computational topology,Cell complexes,Hierarchical models,Homology generators,

@&#ABSTRACT@&#
We propose a set of atomic modeling operators for simplifying and refining cell complexes in arbitrary dimensions. Such operators either preserve the homology of the cell complex, or they modify it in a controlled way. We show that such operators form a minimally complete basis for updating cell complexes, and we compare them with various operators previously proposed in the literature. Based on the new operators, we define a hierarchical model for cell complexes, that we call a Hierarchical Cell Complex (HCC), and we discuss its properties. An HCC implicitly encodes a virtually continuous set of complexes obtained from the original complex through the application of our operators. Then, we describe the implementation of a version of the HCC based on the subset of the proposed modeling operators which preserve homology. We apply the homology-preserving HCC to enhance the efficiency in extracting homology generators at different resolutions. To this aim, we propose an algorithm which computes homology generators on the coarsest representation of the original complex, and uses the hierarchical model to propagate them to complexes at any intermediate resolution, and we prove its correctness. Finally, we present experimental results showing the efficiency and effectiveness of the proposed approach.

@&#INTRODUCTION@&#
Cell complexes are used as a discretization and modeling tool in a wide range of application domains, such as solid modeling, computer graphics, computer aided design, finite element analysis, animation, scientific visualization, and geographic data processing. Cell complexes are used to discretize geometric shapes, such as static and dynamic 3D objects, or surfaces and hyper-surfaces describing the behavior of scalar or vector fields. A variety of topological operators have been designed for building and updating data structures representing two and three dimensional cell complexes, such as handle operators [1,2], Euler operators [3–10], or removal/insertion operators in nD [11–13]. Handle operators are based on the handlebody theory [14], stating that any n-manifold can be obtained from an n-ball by attaching handles to it. The main characteristic of Euler operators is that they maintain the Euler–Poincaré formula expressing a topological validity condition for a cell complex.We describe here a set of modeling operators which form a minimally complete basis for simplifying and refining cell complexes in arbitrary dimensions in a topologically consistent manner. These operators have been originally proposed in [15]. We distinguish between operators that maintain homology of the complex, and operators that modify it in a controlled manner. Homology-preserving operators add (or remove) a pair of cells of consecutive dimension, but they do not change the Betti numbers of the complex. Homology-modifying operators add (or remove) an i-cell, and increase (or decrease) the ith Betti number. We compare our modeling operators with other operators on cell complexes proposed in the literature, and we show how these latter can be expressed in terms of the former.Based on the proposed operators, we define a hierarchical model that we call a Hierarchical Cell Complex (HCC). An HCC is generated by applying our simplification operators, and it is defined based on their inverse refinement operators and on a dependency relation among these latter that guides the extraction of topologically correct complexes at uniform or variable resolutions. Unlike the pyramidal model defined on quasi-manifolds represented as 2-maps [16] and n-G-maps [17], an HCC can represent arbitrary cell complexes, is based on both homology-preserving and homology-modifying operators, and allows extracting a large number of complexes, also adaptive, according to any user-selected approximation criterion.In our work, we have also defined and implemented a version of the HCC based only on homology-preserving operators [18]. Here, we investigate the use of this model for homology computation. We show that the HCC based on the homology-preserving operators enables us to obtain the homology (with coefficients inZ2) of all the complexes encoded in the model by computing the homology of the complex at the coarsest resolution using standard techniques [19]. Moreover, we are able to construct homology generators of a complex at any intermediate resolution by computing generators on the coarsest complex and using the hierarchical model to propagate the computed generators to all the complexes at intermediate resolutions. Unlike approaches based on pyramids on n-maps and n-G-maps [12,20], the implementation of the HCC based on homology-preserving operators can be applied to general complexes, not only to quasi-manifolds and it supports the extraction of homology generators at variable resolutions.The remainder of this paper is organized as follows. In Section 2, we review some background notions on cell complexes. In Section 3, we describe the new set of topological operators for simplifying and refining cell complexes in arbitrary dimensions. In Section 4, we show how various other update operators on cell complexes proposed in the literature, such as removal/insertion operators, Euler operators and handle operators, can be expressed in terms of our operators. In Section 5, we investigate the properties of an HCC, and we show how to extract from an HCC a large number of complexes at intermediate resolutions. In Section 6, we discuss how we retrieve homology and homology generators of complexes at intermediate resolutions, starting from the homology and the homology generators of the complex at the coarsest resolution. In Section 7, we present some experimental evaluation of the model. In Section 8, we draw some concluding remarks, and discuss possible research directions.In this section, we review some notions on cell complexes (see [19,21] for more details). A (topological) k-cell in the Euclidean spaceEnis a homeomorphic image of a k-dimensional open ball. Intuitively, a cell complex inEnis a finite set X of cells inEnof dimension at mostd,0⩽d⩽n, such that•the cells in X are pairwise disjoint;for each cellx∈X, the boundary of x is a disjoint union of cells in X.If the maximum dimension of the cells in X is equal to d, then X is called a d-complex. The set of cells on the boundary of a cell x is called the (combinatorial) boundary of x. The (combinatorial) co-boundary (or star) of x consists of all the cells of X that have x on their combinatorial boundary. An h-cellx′on the boundary of a k-cellx,0⩽h⩽k, is called an h-face of x, and x is called a coface ofx′. Each cell x is a face of itself. Ifx′≠x, thenx′is called a proper face of x. The set of(k-1)-cells on the boundary of a k-cell x forms its immediate boundary (1⩽k⩽d), and the set of(k+1)-cells in its co-boundary forms its immediate co-boundary (0⩽k⩽d-1). A cell, that is not a proper face of any other cell in X, is a top cell. The domain, or carrier, of a cell d-complex X embedded inEn, with0⩽d⩽n, is the subset ofEndefined by the union, as sets of points, of all the cells in X.A simplicial complexΣis a finite set of (closed) simplexes (convex hulls of affinely independent points), such that each face of a simplex inΣis inΣand each nonempty intersection of any two simplexes x and y inΣis a face of both x and y. A simplicial d-complex X (where d is the maximum dimension of the simplexes inΣ) is a pseudo-manifold if (i) X is homogenous (each simplex is a face of some d-simplex), (ii) each(d-1)-simplex in X is a(d-1)-face of at most two d-simplexes and (iii) X is strongly connected (for any two distinct d-simplexes x and y in X there is a sequencex=x1,x2,…,xl=y, such thatxiandxi+1share a(d-1)-simplex,1⩽i<l-1).The Euler–Poincaré formula [19] for a cell d-complex X withnii-cells states that∑i=0d(-1)ini=∑i=0d(-1)iβi. Here,βiis the ith Betti number of X, and it measures the number of independent non-bounding i-cycles in X, i.e., the number of independent i-holes. The alternating sumn0-n1+⋯+(-1)dndis denoted asχ(X), and is called the Euler–Poincaré characteristic of X.In this section, we present the operators on cell complexes in arbitrary dimensions that we have first introduced in [15]. We show here that these operators form a minimally complete basis for the set of all possible operators that modify cell complexes in a topologically consistent manner.There have been many proposals in the literature for manipulating two- and three-dimensional cell complexes. We propose here a minimal set of Euler operators on cell complexes in arbitrary dimensions, which subsume, as we will show, all the other Euler operators proposed in the literature. These operators can be classified as:•homology-preserving operators:MiC(i+1)C(Make i-Cell and (i+1)-Cell), which create an i-cell and an(i+1)-cell,homology-modifying operators: MiCiCycle (Make i-Cell and i-Cycle), which create an i-cell and an i-cycle.There are in total d homology-preserving andd+1homology-modifying operators on cell d-complexes.Homology-preserving (refinement) operatorsMiC(i+1)Cchange the number of cells in the complex X by increasing the numberniof i-cells and the numberni+1of(i+1)-cells by a unit. We have proven, by using discrete Morse theory [22], that the homology-preserving operators do not change the Euler characteristic, or the Betti numbers of the cell complex with respect to any Abelian group. The proof is reported in Appendix A. There are two types of homology-preserving operators, each of which has two distinct instances.The operatorMiC(i+1)Cof the first type has the following two instances:•the first instance, that we denote asMiC(i+1)Cex(q,p,p′)(expand), subdivides the existing i-cellp′into two by splitting its co-boundary, and creates the(i+1)-cell q bounded by the two i-cells p andp′;the second instance, that we denote asMiC(i+1)Cin(q,p,p′)(insert), subdivides the existing(i+1)-cellp′into two by splitting its boundary, and creates the i-cell q separating the two(i+1)-cells p andp′.In both cases, the new i-cell appears exactly once on the boundary of the new(i+1)-cell.For a 2-complex X embedded inE3, the homology-preserving operators are usually called MEV (Make Edge and Vertex) and MEF (Make Edge and Face), which correspond toM0C1CandM1C2C, respectively. For a 3-complex X embedded inE3, there is an additional homology-preserving operator, MFVl (Make Face and Volume (3-Cell)) which creates a new 2-cell and a new 3-cell. It is the same asM2C3C.The operatorMiC(i+1)Cof the second type either creates an i-cell and an(i+1)-cell bounded only by the i-cell, or dually, it creates an(i+1)-cell and an i-cell bounding only the(i+1)-cell. The new i-cell appears exactly once on the boundary of the new(i+1)-cell. We will denote the first instance of the operator asMiC(i+1)Cex(q,p), and the second one asMiC(i+1)Cin(q,p).The inverseKiC(i+1)C(Kill i-Cell and (i+1)-Cell) (simplification) operators delete an i-cell and an(i+1)-cell from the complex X. Again, we have operators of two different types. The operatorKiC(i+1)C(q,p,p′)of the first type is feasible under the following conditions:•the(i+1)-cell q to be deleted is bounded by exactly two i-cells (the i-cell p to be deleted and the i-cellp′which will remain), and the i-cell p appears exactly once on the boundary of the(i+1)-cell q;the i-cell q to be deleted bounds exactly two(i+1)-cells (the(i+1)-cell p to be deleted and the(i+1)-cellp′which will remain) and the i-cell q appears exactly once on the boundary of the(i+1)-cell p.In the first case, denoted asKiC(i+1)Cco(q,p,p′)(contract), the effect of the operator is as follows:•the i-cell p is replaced with the i-cellp′on the boundary of each(i+1)-cell r in the co-boundary of the i-cell p.if the i-cell p appears k times on the boundary of the(i+1)-cell r, then k copies of the(i+1)-cell q are merged into each(i+1)-cell r.The second instance, denoted asKiC(i+1)Cre(q,p,p′)(remove), is completely dual.The operatorKiC(i+1)C(q,p)of the second type is feasible under the following conditions:•the(i+1)-cell q (to be deleted) is bounded only by the i-cell p, which will be deleted as well (KiC(i+1)Cco(q,p));the i-cell q (to be deleted) bounds only the(i+1)-cell p which will be deleted as well (KiC(i+1)Cre(q,p)).In both cases, the deleted i-cell appears exactly once on the boundary of the deleted(i+1)-cell. The effect of the operator is to delete both cells from the complex.Fig. 1illustrates a sequence consisting of operatorsK1C2Cre(q,p,p′),K1C2Cre(q1,p1,p1′)andK0C1Cco(q2,p2,p2′)in 2D.K1C2Cre(q,p,p′)removes 1-cell q and 2-cell p similarly toK1C2Cre(q1,p1,p1′), which removes 1-cellq1and 2-cellp1, whileK0C1Cco(q2,p2,p2′)collapses 1-cellq2and 0-cellp2into 0-cellp2′. Fig. 2illustrates a sequence consisting of operatorsK2C3Cre(q,p,p′)andK1C2Cre(q1,p1,p1′)in 3D.K2C3Cre(q,p,p′)removes 2-cell q and 3-cell p, whileK1C2Cre(q1,p1,p1′)removes 1-cellq1and 2-cellp1.Homology-modifying operators change the number of cells in a complex X plus its Betti numbers and Euler characteristic. Homology-modifying operator MiCiCycle increases the numberniof i-cells and the numberβiof independent non-bounding i-cycles by a unit. It is feasible on a complex X if all the cells on the boundary of the cell to be created are in X. The inverse KiCiCycle (Kill i-Cell and i-Cycle) operator deletes an i-cell and destroys an i-cycle, thus decreasing the numbersniandβiby a unit. It is feasible on a cell complex X if the co-boundary of the cell to be deleted is empty.For a 2-complex X embedded inE3, the homology-modifying operators (illustrated in Fig. 3) are also calledMV0Cycle(Make Vertex and 0-Cycle),ME1Cycle(Make Edge and 1-Cycle) andMF2Cycle(Make Face and 2-Cycle). OperatorMV0Cyclecreates a new vertex and a new connected component, it increases by a unit the number of vertices (0-cells) and the zeroth Betti numberβ0. It is used as an initialization operator to create a new complex X. OperatorME1Cyclecreates a new edge and a new 1-cycle, thus increasing both the number of edges (1-cells) and the first Betti numberβ1by a unit. OperatorMF2Cyclecreates a new 2-cell (face) and a new 2-cycle, thus increasing the number of 2-cells and the second Betti numberβ2by a unit. When considering a 3-complex X embedded inE3, the homology-modifying operators will be the same as for 2-complexes, since in this case the third Betti numberβ3is null.The operators described in Section 3.1 form a minimally complete set of basis operators for creating and updating cell d-complexes. To prove this fact, we interpret such operators as ordered(2d+2)-tuples(x0,x1,…,xd,c0,c1,…,cd)in an integer grid, belonging to the hyperplaneΠ:∑i=0d(-1)ixi=∑i=0d(-1)icidefined by the Euler–Poincaré formula. The firstd+1coordinates denote the number of i-cells created or deleted by the operator, depending on the sign of the coordinate, while the lastd+1coordinates denote the change in the Betti numbers of the complex induced by the operator. OperatorMiC(i+1)C,0⩽i⩽d-1, has coordinatesxi=xi+1=1,xj=0,j∈{0,1,…,d}⧹{i,i+1},cj=0,j∈{0,1,…,d}. OperatorMiCiCycle,0⩽i⩽d, has coordinatesxi=ci=1,xj=cj=0,j∈{0,1,…,d}⧹{i}. We will show that:(i)the2d+1(2d+2)-tuples corresponding to our operators are linearly independent, andany(2d+2)-tuple in the hyperplaneΠcan be expressed as a linear combination of2d+1(2d+2)-tuples corresponding to our operators,which will imply the claim.A linear combination∑i=0d-1αiMiC(i+1)C+∑i=0dβiMiCiCyclevanishes if and only if(α0,α0,0,…,0)+(0,α1,α1,…,0)+⋯+(0,…0,αd-1,αd-1,0,…,0)+(β0,0,…,0,β0,0,…,0)+(0,β1,0,…,0,β1,0,…,0)+⋯+(0,…,0,βd,0,…,0,βd)=0, which is equivalent to(α0+β0,α0+α1+β1,α1+α2+β2,…,αd-2+αd-1+βd-1,αd-1+βd,β0,β1,…,βd)=0. It follows thatαi=0,0⩽i⩽d-1,βi=0,0⩽i⩽d, implying that the tuples corresponding to our operators are linearly independent.A tuple(a0,a1,…,ad,b0,b1,…,bd)in the hyperplaneΠ(i. e., such that∑i=0d(-1)iai=∑i=0d(-1)ibi) can be expressed through the2d+1independent(2d+2)-tuples corresponding to our operators as∑i=0d-1αiMiC(i+1)C+∑i=0dβiMiCiCycleif(α0+β0,α0+α1+β1,α1+α2+β2,…,αd-2+αd-1+βd-1,αd-1+βd,β0,β1,…,βd)=(a0,a1,…,ad,b0,b1,…,bd). It follows thatβi=bi,0⩽i⩽d, andα0=a0-b0,α1=a1-b1-α0=(a1-a0)-(b1-b0),α2=a2-b2-α1=(a2-a1+a0)-(b2-b1+b0),…,αd-1=(ad-1-ad-2+⋯+(-1)da0)-(bd-1-bd-2+⋯+(-1)db0)=ad-bd. In short,αi=∑j=0i(-1)i-jaj-∑j=0i(-1)i-jbj,0⩽i⩽d-1(αd-1=ad-bd) andβi=bi,0⩽i⩽d. Thus, each operator satisfying Euler–Poincaré formula on a cell complex X can be expressed as a linear combination of our operators.In the space (hyperplane) of dimension2d+1, a generating set consisting of2d+1independent tuples forms a basis for the hyperplane.We compare the operators proposed here with other update operators on cell complexes proposed in the literature, in particular with removal and contraction operators, Euler operators and handle operators. For a more detailed discussion, see [15].Removal and contraction operators have been introduced in digital geometry as simplification operators on n-G-maps [11]. An i-cellq,0⩽i⩽n-1, can be removed in two cases: if it bounds exactly two different(i+1)-cells p andp′and it appears exactly once on the boundary of both p andp′; or if it bounds exactly one(i+1)-cell p and it appears exactly twice on the boundary of p. The contraction operator is dual.The first instance of the removal operator is a special case ofKiC(i+1)Cre(q,p,p′), as it requires that the i-cell q appears exactly once not only on the boundary of the(i+1)-cell p but also on the boundary of the(i+1)-cellp′. The effect of the first instance of the removal operator is the same as the effect ofKiC(i+1)Cre. The second instance of the removal operator may, but is not guaranteed to, preserve the topological characteristics of the complex (it may produce cells that are not topological cells, or it may disconnect the complex). Thus, it cannot be classified either as a homology-preserving, or as a homology-modifying operator.In [12], homology generators of a cell complex are computed using two homology-preserving simplification operators: the removal of an i-cell incident in exactly two(i+1)-cells (which is the same asKiC(i+1)Cre(q,p,p′)and as the first instance of the removal operator in [11]) and the removal of a dangling cell (which is the same asKiC(i+1)Cre(q,p)). The inverse (refinement) insertion and expansion operators have been introduced in [13]. They are the same asMiC(i+1)Cin(q,p,p′)andMiC(i+1)Cex(q,p,p′), respectively.Virtually all the proposed sets of basis Euler operators on cell 2- and 3-complexes contain MEV (Make Edge and Vertex) and MEF (Make Edge and Face) operators, which are the same asM0C1C(Make 0-cell and 1-cell) andM1C2C(Make 1-cell and 2-cell), respectively (see Section 3.1).Several homology-modifying operators have been proposed for 2-complexes that define the boundary of a solid inE3, called boundary models. In these models, there is only one implicitly represented volumetric cell, which is not necessarily homeomorphic to a 3D ball. The glue operator in [3] merges two 2-cells and deletes both of them. It corresponds to the connected sum operator on manifold surfaces. If the two glued 2-cells belong to two different connected components of the complex, one of the components is deleted (andβ0is decreased by a unit). If the two glued faces belong to the same connected components, a handle or through-hole is created (andβ1is increased by two units). In [4–6], the homology-modifying operator is called MRKF (Make Ring, Kill Face). It is similar to the glue operator in [3], but it imposes less restrictive conditions on the 2-cells to be glued, and it deletes only one of the 2-cells. The 2-cells are not supposed to be topological (homeomorphic to a 2D ball).Homology-modifying operators defined for general (non-manifold) 2-complexes inE3[7] are called MECh (Make Edge and Complex Hole), MFKCh (Make Face, Kill Complex Hole) and MFCc (Make Face and Complex Cavity). They are the same as operatorsM1C1Cycle,M2CK1Cycle(Make 2-Cell Kill 1-Cycle, which can be expressed asK1C1Cycle,M1C2C) andM2C2Cycle, respectively. For 3-complexes inE3[8,9], an additional homology-modifying operator is defined, called MVlKCc (Make Volume, Kill Complex Cavity). It is the same asM3CK2Cycle(Make 3-Cell, Kill 2-Cycle) operator, and can be expressed asK2C2Cycle,M2C3C.In [10], the operators defined in [8] have been extended to complexes called stratifications, in which the cells, called strata, are defined by analytic equalities and inequalities. The cells are not necessarily homeomorphic to a ball, and they may have incomplete boundaries. Among the operators on stratifications proposed in [10], operators on topological cells (that are homeomorphic to a ball) with complete boundaries can be classified as homology-preserving (called cell subdividers) and homology-modifying (called global hole shapers). Both types of operators are instances of the operators defined in Section 3.1. A cell subdivider subdivides an i-cell by inserting into it an(i-1)-cell. This operator is the same as theM(i-1)CiCoperator. A global hole shaper either attaches or detaches a cell, thus creating a hole. There are two instances of this operator: the attached topological i-cell creates an i-hole or the detached topological i-cell creates an(i-1)-hole. The first instance of this operator corresponds to MiCiCycle. The second instance corresponds toKiCM(i-1)Cycle(Kill i-Cell, Make (i-1)-Cycle), and can be expressed asM(i-1)C(i-1)Cycle,K(i-1)CiC. The inverse homology-modifying operators attach or detach a cell, thus deleting a hole. They correspond to KiCiCycle andMiCK(i-1)Cycle(inverse toKiCM(i-1)Cycle), respectively.(Homology-modifying) handle operators on a manifold cell 2-complex X triangulating a surface S have been introduced in [1]. They are based on the handlebody theory for surfaces [14], stating that any surface S can be obtained from a 2-ball by iteratively attaching handles (0-, 1- and 2-handles).Attachment of a 0-handle creates a new surface with one face, three edges and three vertices. It can be expressed as oneM0C0Cycleoperator, twoM0C1Coperators and oneM1C2Coperator, which together create a triangle. The operator that corresponds to the attachment of a 1-handle identifies two boundary edges of X (incident in exactly one face) with no vertices in common. The operator that corresponds to the attachment of a 2-handle identifies two boundary edges of X with two vertices in common. They can be expressed through our operators in a similar manner.Handle operators have been extended to 3D in [2]. The operator that creates a new 3-ball (initialization operator) corresponds to the attachment of a 0-handle. Other operators identify two boundary faces (incident in exactly one 3-cell) of a cell 3-complex X triangulating a solid S. The attachment of a 1-handle (2-handle, or 3-handle) can be applied if the two identified boundary faces have no edges (some edges, or all edges) in common. The handle operators in 3D generalize the glue operator in [3]. They can be expressed in terms of the operators defined in Section 3.1 in a similar manner.In this section, we introduce a hierarchy of cell complexes, that we call a Hierarchical Cell Complex (HCC), and we discuss its major properties. We define an HCC in terms of the refinement operators introduced in Section 3.A Hierarchical Cell Complex (HCC) is generated from a d-complex X at full resolution by iteratively applying simplification operatorsKiC(i+1)Cand KiCiCycle. By applying first the homology-preserving operators, we obtain a complexX′having the same homology as the original complex X but with fewer cells and such that no homology-preserving operator is feasible onX′. By applying next the homology-modifying operators to iteratively remove the cells ofX′, the homology is affected at each step and the process is repeated until a complex is obtained that has at least one i-cell,0⩽i⩽d. At each step, when we apply a homology-modifying operator, we remove a top cell from the complex. After each application of a homology-modifying operator, we perform feasible homology-preserving ones.We call the application of a simplification operator a simplification modification. The complex obtained as the result of the simplification sequence is the coarsest representation of the original cell complex X. We denote such coarsest complex asXB. It represents the first component of an HCC.The second component of an HCC is the setMof the refinement modifications which are inverse with respect to the simplification modifications that have producedXBfrom X. Each refinement introduces new cells (two cells if it is homology-preserving, one if it is homology-modifying).The third component of an HCC is the dependency relation between the modifications in the setMof all refinement modifications. We consider, for simplicity, the creation of the coarse complexXBas a dummy refinement modification that we denote asμ0(i.e.,μ0generatesXB). We define the dependency relation between the refinement modifications inMas follows:•a homology-preserving refinementμ=MiC(i+1)C, which creates cells p and q and is defined by the cells that will appear on the immediate boundary or co-boundary of either p or q, directly depends on a refinementμ∗, ifμ∗creates a cell that will be on the immediate boundary or co-boundary of p or q,a homology-modifying refinementμ=MiCiCycle, which creates i-cell p and is defined by the(i-1)-cells that will be on the immediate boundary of p, directly depends on a refinementμ∗, ifμ∗creates a cell that will be on the immediate boundary of p.An HCC is thus a triple(XB,M,R), whereRdenotes the direct dependency relation defined above. The dependency relation between refinement modifications is the transitive closure of the direct dependency relation. It is a partial order relation, since a cell is never introduced twice by the modifications inM. An HCC can be naturally encoded as a Directed Acyclic Graph (DAG), in which the nodes encode the modifications inM, the root encodes the creation of the base complexXB(modificationμ0), and the arcs describe the direct dependency relationR.From an HCC, a large number of complexes at intermediate resolution can be obtained by applying sequences of refinement modifications inMto the base complexXB. A sequenceU=(μ0,μ1,…,μk)is said to be feasible if each refinementμiin U is feasible on the complex obtained from the base complexXBby applying all the refinements precedingμiin U. For a feasible sequenceU=(μ0,μ1,μ2,…,μm)of refinement modifications inM, the complex obtained from the base complexXBby applying U is called the front complex associated with U, and we denote it asXU. A front complex is a complex at an intermediate resolution.The refinement modificationμ, which creates the cells p and q (ifμis homology-preserving), or the cell p (ifμis homology-modifying) is feasible on a front complexXU(at some intermediate resolution) if and only if all the cells on the immediate boundary and co-boundary of the cells p and q (ifμis homology-preserving) or all the cells on the immediate boundary of the cell p (ifμis homology-modifying) are in the complexXU, i.e., if the sequence U that createsXUfromXBcontains all refinement modifications on whichμdepends.A large number of adaptive morphological representations can thus be extracted from an HCC defined by the triple(XB,M,R)by considering the closed sets of refinement modifications inMplusμ0under the dependency relationR. Recall that the dependency relationRis a partial order relation, and thus it defines a closure operator on the setMof refinement modifications. We denote a closed set of such refinement modifications asU. SetUimplicitly defines complexXUrepresenting an approximation of the original complex.The setU={μ0,μ1,μ2,…,μm}of refinement modifications inMis closed with respect to the dependency relationRif for eachi,1⩽i⩽m, each refinement modification on which the refinementμidepends is inU. If the sequenceU=(μ0,μ1,μ2,…,μm)of refinement modifications inMis feasible, then the setU={μ0,μ1,μ2,…,μm}is closed with respect to the dependency relationR.Two feasible refinement modificationsμ1andμ2on a complex are interchangeable if the sequence(μ1,μ2)of refinements (consisting ofμ1followed byμ2) produces the same complex as the sequence(μ2,μ1)(consisting ofμ2followed byμ1). Any two independent refinement modificationsμ1andμ2are interchangeable. Thus, a closed subsetUof refinement modifications can be applied to the base complexXBin any total order U that extends the partial order, producing a complexXUat an intermediate resolution. An HCC encodes a collection of all complexes at intermediate level of detail which can be obtained from the base complexXBby applying a closed set of modifications onXB.From an HCC it is thus possible to dynamically extract representations of the original cell complex X at uniform and variable resolutions. The basic query for extracting a single-resolution representation from a multi-resolution model is known as selective refinement. A selective refinement query consists of extracting from an HCC a complex with the minimum number of cells, satisfying some application-dependent criterion. This criterion can be formalized by defining a Boolean functionτover all nodes of an HCC, such that the value ofτis true on nodes which satisfy the criterion, and false otherwise. The same value ofτis associated with the cells created by the modification encoded in the node of the HCC (p and q for homology-preserving modification, p for homology-modifying modification). The selective refinement query consists of extracting from the HCC an intermediate complex of minimum size among the complexes encoded in the HCC that satisfiesτ. Equivalently, it consists of extracting a minimal closed setUof modifications inM, such that the corresponding complex satisfiesτ. Such closed set of modifications uniquely determines a front complex, which is obtained from the base complexXB, by applying to it all modifications fromUin any order that is consistent with the partial order defined by the dependency relation. Criterionτcan be defined based on various conditions posed on the cells in the extracted complex, like the size of the cell (which may be expressed as the maximum distance between its vertices or the diameter of its bounding box) or the portion of the complex in which full resolution is required (while in the rest of the complex, the resolution may be arbitrarily low).In Fig. 4we show the HCC built from the sequence of simplifications illustrated in Fig. 1. We can notice that each node, with the exception of the root, represents a refinement dual to a simplification applied in Fig. 1. Each closed subset of refinement modifications produces a different cell complex at intermediate resolution.In this section, we present an approach for computing homology and homology generators at various resolutions using an HCC built based only on the homology-preserving operators, that we call a homology-preserving HCC.We are interested in computing the homology groupsHk(X;Z2)of a cell complex X with the coefficients inZ2. As described in [21], this corresponds to computing the Betti numbers of X with coefficients inZ2. Moreover, for eachk=0,…,d, we are interested in computing the homology generators of degree k, that we callHkgenerators. TheHkgenerators are the generators of theZ2-vector spaceHk(X;Z2), and they represent the independent non-bounding k-cycles in X. EachHkgenerator of a cell complex X is a linear combination of k-cells in X with coefficients inZ2. In Fig. 5(a), twoH1generators are shown as linear combination of 1-cells. The first generator is composed of the set of blue (bold) edges and the other one of the set of red (dotted) edges.In a homology-preserving HCC, any front complexXUis obtained from the base complexXBby applying a sequence of homology-preserving refinement modificationsMiC(i+1)C. In a homology-preserving HCC thus, the homology of the base complex is the same as the homology of any other complex implicitly encoded in the HCC. We use the Smith Normal Form (SNF) reduction algorithm [19] to compute homology and homology generators with coefficients inZ2on the base complexXB. Then, at each application of the refinement, we modify the homology generators in the currently extracted front complexXUaccording to algorithm ExpandGenerators described below. We have shown (see the proof in Appendix B) that, when applyingMiC(i+1)C, only theHi+1generators are affected.Let us consider refinement modificationMiC(i+1)Cex(q,p), which creates an i-cell p and an(i+1)-cell q (the case of a refinementMiC(i+1)Cinis entirely dual). OperatorMiC(i+1)Cex(q,p)is applied on a complex Y producing a refined complexY′. Algorithm ExpandGenerators checks if the introduced(i+1)-cell q inY′breaks an(i+1)-cycle corresponding to anHi+1generator in Y. This is done by considering the number of(i+1)-cells in the co-boundary of i-cell p that are involved inHi+1generators. This idea is illustrated in Fig. 5(b) and (c), where we show two different applications of operatorM0C1Cexto the same 2-complex (torus), depicted in Fig. 5(a). The application of operatorM0C1Cex(q1,p1,p′), illustrated in Fig. 5(b), modifies one of the twoH1generators in the torus. We can notice that the new 0-cellp1has exactly one incident 1-cell belonging to the blue (bold) 1-chain. Thus the 1-cycle has been broken by the refinement and 1-cellq1is added to the 1-chain to reconstruct the cycle. On the contrary, the application of operatorM0C1Cex(q2,p2,p′), illustrated in Fig. 5(c), does not affect the generators. Note that 0-cellp2has no incident 1-cell belonging to someH1generator.Algorithm 1ExpandGenerators(p,q,G)Require:p is an i-cellRequire:q is an(i+1)-cellRequire:G is the set ofHi+1generators1: // C is a map from a generator g to an integer m2: C = empty map3: //Extract the(i+1)-cells on the co-boundary of p4: for all cofaces r of pdo5: //Gris the set of generators containing r6:Gr= getGeneratorsOn(r,G)7: // Consider the number of incidences between p and r8:for all generators g inGrdo9:C[g]=getIncidence(p,r)+C[g]10: //Expand the generators on q if necessary11: for all pairs(g,m)in Cdo12:ifm is odd then13: addGenerator(g,q,G)14: return GIn the description of Algorithm ExpandGenerators(p,q,G), p and q denote, respectively, the i-cell and the(i+1)-cell introduced by the refinement operator, and G represents the set ofHi+1generators of X. The algorithm makes use of a map C from a generator g to an integer m, that, for each generator g, stores the number of(i+1)-cells in the co-boundary of i-cell p which also belong to g.Algorithm ExpandGenerators(p,q,G) uses the following three functions:•getGeneratorsOn(r,G), which returns the set of generatorsGrcontaining cell r in their chain,getIncidence(p,r), which returns the number of times i-cell p appears on the boundary of(i+1)-cell r,addToGenerator(g,q,G), which updates the generators in G by adding(i+1)-cell q to the(i+1)-chain corresponding to g.Algorithm ExpandGenerators(p,q,G) considers only the(i+1)-cells in the co-boundary of p that are part of one or moreHi+1generators. For each such(i+1)-cellr,Gris the set of generators that contain r (getGeneratorsOn(r,G)). For each generatorg∈Gr, map C is updated by adding the number of times the i-cell p appears on the boundary of r (getIncidence(p,r)). Once all the(i+1)-cells in the co-boundary of p have been examined, cell q is added to generator g only if the number m of incidences for g is odd (addGenerator(g,q,G)).We have implemented the homology-preserving HCC by using a DAG for encoding the direct dependency relation and the Incidence Graph (IG) [23] for encoding the base complexXB. We refer to [18] for details regarding the homology-preserving HCC encoding structure. We have performed experiments on the 2D and 3D complexes described in Table 1by using a desktop computer with a 3.2Ghz processor and 16GB of memory. All complexes are simplicial complexes, that become cell complexes after undergoing some simplification.The storage cost of the HCC encoding structure is about 25% less than the storage cost of the incidence graph representing the complex at full resolution (the original complex). These latter complexes have between 40K and 3.2M top cells in 2D case, and between 700K and 6M top cells in the 3D case, as shown in Table 1 (column Cells). The storage cost of the original cell complex is between 4.8MB and 398MB for 2D complexes, and between 118MB and 980MB for 3D complexes (column Complex cost). The storage cost of the corresponding HCC is between 3.3MB and 273MB, and between 84MB and 720MB (column HCC cost), respectively.In the first set of experiments we have evaluated the time required to compute the homology and its generators of the original complex (the one at full resolution) by using the HCC. To this aim, we first compute the homology generators on the base complex, encoded in the root of the HCC. This computation requires between8.3×10-5and 8.8s depending on the dataset (column SNF Time in Table 2). Then, we perform all the refinements in the HCC, by applying when necessary the refinement of the generators as described in Section 6. This produces the representation of the complex at full resolution together with the homology generators. The total cost of this computation is the sum of the time required to compute the homology of the base complex (column SNF Time) and the time needed to fully refine the complex and its generators (column Tot. Ref. Time). This takes from a minimum of 0.15 to a maximum of 83.3s. Applying the same SNF reduction directly on the original complex, requires about 2.6h on a relatively small complex (the dataset Genus3), while it results in very high computation times for the other datasets.In Fig. 6, we show theH1generators computed on two 2D shapes Fertility and Hand and, in Fig. 8(b) and (c), we show theH1andH2generators computed on the 3D Skull dataset.In the second set of experiments we have focused on extracting different representations of the complex by expanding the computed generators at different resolutions. We have considered first the extraction of representations at uniform resolution: we have extracted representations obtained from the base complex by applying approximatively 20%, 50% and 80% of the total possible refinements (column Uniform Ref. in Table 2). Refinements are forced to be evenly distributed inside the complex in order to obtain a uniformly refined complex. We can notice (see column Uniform Time) that the time required depends on the number of refinements performed and is between 0.03 and 7.5s for extraction at 20% resolution and between 0.12 and 69.3s for extraction at 80% resolution.Then, we have extracted representations of the complexes varying the resolution inside the domain. The objective has been to obtain a cell complex, and the corresponding homology generators, with a maximum resolution only in a neighborhood of a specific homology class. This corresponds to computing theHigenerators on the base complex and, by traversing the HCC, to performing only those refinements that create an i-cell belonging to someHigenerator (and the refinements on which they depend). This kind of selective refinement produces cell complexes with a low number of cells outside the area around the generators and thus leads to a further saving (15–30%) with respect to extracting generators and complexes at maximum resolution. Note that the extraction at variable resolution is a distinctive feature of the HCC which cannot be performed on other hierarchical models. Examples of variable resolution extractions are shown in Fig. 7and in Fig. 8(d).We have proposed a set of atomic modeling operators for simplifying and refining cell complexes in arbitrary dimensions, which either preserve the homology of a cell complex, or modify it in a controlled way. We have compared these operators with existing ones proposed in the literature. Based on our modeling operators, we have defined a hierarchical model for cell complexes, the Hierarchical Cell Complex (HCC), which implicitly encodes a virtually continuous set of complexes at different resolutions.We have developed an implementation of the HCC, based on our homology-preserving operators, as the basis for computing the homology and its generators for a cell complex at various resolutions in an efficient and effective way. The advantages of our approach are that a homology-preserving HCC is dimension-independent, can be applied to general cell complexes and enables the extraction of homology generators at variable resolutions.In our current and future work, we first plan to extend the previous approach to the computation of homology and homology generators with coefficients inZ. We also plan to adapt the HCC framework to simplicial complexes. We will consider two simplification operators for generating an HCC: simplex collapse[24], which is an instance of simplification operatorKiC(i+1)Cre(q,p), and edge contraction, a widely used operator in mesh processing which has been proven to be homology-preserving [25].

@&#CONCLUSIONS@&#
