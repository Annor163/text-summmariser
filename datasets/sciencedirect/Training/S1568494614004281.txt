@&#MAIN-TITLE@&#
Multiple colony bees algorithm for continuous spaces

@&#HIGHLIGHTS@&#
We developed a multiple colony bees algorithm for continuous spaces.Our algorithm simulates intra-hive and inter hive behaviours of honey bees.The basis of the algorithm is the similarity between homey bees and ant.The performance of the algorithm is tested through a set of computational study.Computational results indicate that the algorithm has a satisfactory performance.

@&#KEYPHRASES@&#
Functional optimization,Bees algorithm,Colonization,Similarity between honey bees and ants,

@&#ABSTRACT@&#
This paper represent a new multiple colony bees algorithm (MCBA) for functional optimization. The MCBA simulates the behaviours of honey bees in their own hive and realizes a communication strategy between the bees living in different hives. However, there is not much information about such a communication strategy between different hives of honey bees. Since information sharing is an essential issue from the optimization point of view, this relevant communication strategy has been based on the similarity between the waggle dance behaviours of real honey bees and the pheromone laying and following behaviours of ants. By the way the MCBA uses the positive feedback mechanism as distinct from the basic bees algorithm and other versions of the bee swarm optimization algorithms. The performance of the proposed MCBA is tested on a set of well-known test functions through a set of computational study, which contains comparison to some other standard meta-heuristics, cooperative approaches and ant-related approaches. The experimental results indicate the effectiveness of the proposed MCBA.

@&#INTRODUCTION@&#
Optimization problems can be modelled by means of a set of decision variables with their domains and constraints concerning the variable settings. They naturally are divided into three categories: (i) with exclusively discrete variables, (ii) with exclusively continuous variables, and (iii) with discrete as well as continuous variables. The class (ii) is also called as continuous optimization problems, and the main goal of this paper is to develop an efficient solution approach based on bees algorithm [1] for tackling the continuous optimization problems.Continuous optimization is a growing research field since numerous real world problems were handled within the scope of this research field, and involves finding the minimum or maximum value of a function of one or many real variables. Continuous optimization problems consist of one or more continuous decision variables each one may have an infinite number of values. Within this context, continuous optimization problems have not finite search spaces as distinct from the combinatorial optimization problems. Numerous studies developed a great deal of solution approaches, including meta-heuristics, in order to tackle continuous optimization problems in such a manner of this study.Nature is the most popular source of inspiration while designing effective meta-heuristic algorithms. The behaviours and communication systems of social insects are more appealing than the other sources of inspiration in nature, since their characteristics are attractive individually and holistically from the optimization point of view. Such that, the meta-heuristic algorithms based on the simulation of the mentioned individual and holistic behaviours of social insects named as swarm-based optimization algorithms. Ant Colony Optimization (ACO) [2], Particle Swarm Optimization (PSO) [3], Bee Colony Optimization (BCO) [4] and Bees Algorithm (BA) [1] are the most familiar approaches belonging to swarm-based group of meta-heuristics. Many recent variants of these algorithms were used to solve continuous optimization problems by researchers [5–15]. In this study, we attempt to solve continuous optimization problems via a multiple colony bees algorithm, each colony inspired by real honey bees and represents a hive, in which different bees live and constitute a population.BA basically depends on a combination of random search and a type of neighbourhood search, whose structural properties may differ according to the characteristics of the problem on hand. Most of the studies belonging to existing literature about the applications of BA tried to simulate the activities of honey bees only in a single colony. To the best of our knowledge, Akbari and Ziarati's work is the first attempt proposed a multiple colony bees algorithm for functional optimization [16]. An analogy and a computational comparison between their study and the current paper will be given in Section 3 and in Section 4.1 respectively, since we also dealt with developing a different multiple colony bees algorithm for continuous domains.In the present paper, we have proposed a multiple colony bees algorithm, whose main idea fundamentally origins from the one that proposed by Akpınar and Baykasoğlu [17], for functional optimization. Also, the similarities and the differences between these two algorithms will be discussed in Section 3. Our proposed approach is based on the multiple colonies (similar to Ozbakır et al.); each colony is formed in a different way, thus, with the purpose of improving the diversification of the algorithm [18]. As indicated by Lozano and García-Martínez diversification generally refers to the ability to visit many and different regions of the search space [19]. Moreover, we used a new neighbourhood structure enables the proposed approach to utilize the positive feedback mechanism as ACO does. Due to the multiple colonies, the proposed algorithm needs a communication strategy, which is realized by the neighbourhood structure, for sharing the information, an essential issue from the optimization point of view. However, we should mention here that there is not much information about the information sharing mechanisms between different colonies in real honey bees. Realizing such an information sharing mechanism makes our proposed algorithm a hybrid type of meta-heuristic. In other words, the proposed algorithm is a hybrid method which combines bee and ant swarm intelligences. The literature about hybridization of bee and ant swarm intelligences is scarce. Hybrid approaches, a combination of ant colony optimization and artificial bee colony algorithm, were developed for training the Artificial Neural Networks [20,21]. Another hybrid method based on the behaviour of ants and honey bees was presented for solving the shortest path problem [22]. For a similar problem, finding the best path between given a source and destination nodes [23], also developed a hybrid method based on the synergy of bee and ant agents as a routing algorithm. Additionally, a recent hybrid method, which has two phases (ant colony phase and artificial bee colony phase), was developed for the classification problem of medical data [24].The remainder of this paper is organized as follows. In Section 2, the description of the Bees Algorithm is given. The proposed Multiple Colony Bees Algorithm is defined in Section 3. Comparative computational study is given in Section 4. Finally, the discussions and conclusions are presented in Section 5.As mentioned earlier, swarm intelligence is an attractive and developing nature originated research area. Various researches attempted to solve both combinatorial and functional optimization problems by developing effective search algorithms based on the simulation of routine behaviours of different swarms such as birds, fishes, ants, and honey bees. Real honey bees are the source of inspiration of the basic BA, which was based on the simulation of the group behaviours of real honey bees in a hive and initially proposed by Pham et al. [1]. Henceforth, the behaviours of honey bees became one of the most inspirational areas for the researchers for developing efficient search algorithms.Before starting its search, the basic BA requires some parameters to be set: the number of scout bees (n), the number of patches selected out of n visited points (m), the number of best patches out of m selected patches (e), the number of bees recruited for e best patches (nep), the number of bees recruited for the other (m–e) selected patches (nsp), the size of patches (ngh) and the stopping criterion. BA starts by randomly placing n number of scout bees in the search space. After that, BA executes a fitness evaluation procedure for the visited points by the scout bees in order to determine the fittest bees as “elite bees”. The sites of these elite bees are chosen for neighbourhood search and the algorithm executes neighbourhood searches in the sites of the selected bees in terms of more bees for the e best bees. For each site only the fittest bee is selected to survive in the next bee population and the remaining bees in the population are assigned randomly around the search space scouting for new potential solutions. These steps are repeated until a stopping criterion is met. From the observations of the main steps of the basic BA, bee system has two essential components, food sources and foragers, as mentioned in [25].In this paper, we deal with the application of bee swarm intelligence to the continuous optimization problems. The basic BA was initially developed to solve continuous optimization problems, however, following studies attempted to solve both combinatorial and functional optimization problems. The application areas and algorithms on behavioural characteristics of the honey bees were surveyed in [25] and the authors presented a classification, while, a brief literature review about the “foraging behaviour” based optimization algorithms was given in [26]. Moreover, another survey of the algorithms based on the intelligence in bee swarms and applications has been presented in [27]. For more detailed information about the applications of bee swarm intelligence, the readers can refer to one of these three papers, especially to [25] or [27].Within the context of this paper we deal with the phenomenon of multiple colonies in order to achieve a high level of diversification, the ability to visit many and different regions of the search space. Probably, partitioning the search space is the most effective way for improving the level of diversification of an algorithm, thus, we partition the search space into separate areas in this paper. That is to say, our proposed algorithm realizes different colonies from different regions of the search space. Additionally, the phenomenon of multiple colonies is much more suitable for simulating the behaviours of real honey bees than a single colony. Each colony represents a hive, in which different bees are living, and we aim at simulating the group behaviour of real honey bees in a hive and the relations between different hives with a communication strategy. From the optimization point of view, communication strategy between different colonies plays a vital role. Nevertheless, based on our knowledge and investigation such a communication strategy between the hives of real honey bees is not known.Honey bees share the information about the direction and distance of the food source with each other by doing waggle dance. The members named as employed forager bees search food sources far from their hive and after returning their hive they start waggle dance to inform the other bees about the food source. If an unemployed recruit bee decides to start searching it requires some information about the food sources. For that reason, the bee attends to a waggle dance done by some other bee for getting information and using it during its search. Such behavioural properties observed from honey bees have almost the same characteristics of pheromone lying and following behaviours of ants. From this point of view, the communication strategy, realized by the proposed neighbourhood structure (Section 3.2), was based on this similarity between honey bees and ants.We envisage achieving the bees of the colonies to have two particular behavioural properties through the communication strategy in the proposed algorithm. The bees of the initial colonies are scattered due to the effect of randomness. For the subsequent colonies, the algorithm would direct the bees to have positions next to the position of their own colony's best bee and at the closer side of their colony's region to the global best bee. These characteristics of the proposed algorithm form the first and second particular behavioural properties, respectively. The first one is resulted from the follow up tendencies of the bees to their colony's best be, while the second one is resulted from the follow up tendencies of the bees to the best bee of all colonies.The proposed multiple colony bees algorithm, having the aforementioned characteristics, is based on the one that proposed for a combinatorial optimization problem by Akpınar and Baykasoğlu [17]. The rationale of both methods is the similarity between the waggle dance of honey bees and the pheromone lying and following behaviours of ants. Additionally, both approaches have multiple colony type of structures. The current algorithm partitions the search space and initiates the colonies from different regions of the search space, while the other one initiates the colonies by using different priority rules related to the combinatorial optimization problem on hand. Thus, they aim at achieving a high level of diversification during their search. Moreover, both methods realize information sharing mechanism between different colonies as well as between the individuals belonging to same colony due to their multiple colony type of structures. On the other hand, the main difference between these two algorithms is a result of the used neighbourhood structures. The neighbourhood structure of the current method does not limit the search of a colony within its starting region, while the other one does since the initially assigned priority rule of a colony does not change during the search. That is to say, the current paper determines the neighbourhood regions of the colonies dynamically as distinct from the elderly used one. Herein, we can conclude that the current method has the ability of searching more intensively. The dynamic nature of the current neighbourhood structure will be explained in Section 3.2 more clearly. And, Table 1represents the notations before giving the pseudo code of the proposed algorithm in Fig. 1.As mentioned earlier, Akbari and Ziarati's work also dealt with developing a multiple colony type of bee swarm optimization [16]. Both papers also aimed at sharing the information between the bees, while they differ in the used colonization and information sharing mechanisms. Akbari and Ziarati performed the colonization process after a predefined number of iterations by grouping the bees according to their fitness and they realized information sharing by exchanging partial information between bees. This colonization and information sharing mechanisms form the colonization process of their algorithm. On the other hand, our proposed algorithm portioned the search space initially and assigned each partition to exactly one colony, hence realized colonization at the beginning of the algorithm. Additionally, our proposed algorithm used positive feedback mechanism for sharing the information between the bees and colonies. A computational comparison between these two studies may clarify the superiority of the proposed algorithms to each other and will be carried out in Section 4.1.As mentioned previously, we prefer partitioning the search space in order to achieve a high level of diversification. In line with this purpose, we partition the search space into five areas (any other number of partitions is also possible) and each area assigned exactly to a different colony. That is to say, each colony starts its search from a different region of the space. Additionally, each colony selects its initial individuals randomly from its search region.Once the search space partitioned, each colony selects a predefined number of scout bees randomly in order to start its search. Scout bees search nectar sources (satisfactory solutions from the optimization point of view) within the search region of the related colony. The search regions of the colonies may be shifted during the execution of the algorithm. The shifting movements refer to the migration of the colonies. The proposed algorithm actualizes the migration of the colonies after each iteration. Migration refers to shifting the centre point of a colony to the best bee of the related colony after an iteration. This situation provides the algorithm initializing randomly S–P new solutions from the new search region formed by shifting the previous regions centre. By this way, algorithm concentrates searching around the best solution and this situation provides improving the intensification of the algorithm. In other words, the search of a colony is not limited within its starting search region, contrary, after each iteration scout bees of a colony allowed to visit different regions. Thus, colonies converge around the regions with plentiful amount of nectar after some iteration. This convergence behaviour of the colonies can be realized in Fig. 2much more clearly.The convergence behaviour realized by the proposed algorithm is one of the mechanisms forming the neighbourhood structure of the algorithm. Search direction and the step length are the other two components of the neighbourhood structure. These two components have much more effect on the performance of the algorithm and are explained in the following two subsections in details.All of the scout bees are positioned randomly within the search space at the initialization phase, while a scout bee may move from position to position by selecting a search direction at the following iterations. Within the scope of this paper, we consider five possible directions can be selected by a scout bee during its search. The search directions considered in this paper can be identified as below:1.A scout bee may not move from its current position, in other words, a scout bee may remain at the same point for the related dimension.(1)di(t)=sign(x→i(t)−x→i(t))A scout bee may select the direction towards its colony's best bee.(2)di(t)=sign(x→cbest(t)−x→i(t))A scout bee may select the direction towards the best bee of all colonies.(3)di(t)=sign(x→best(t)−x→i(t))A scout bee may select the direction towards the intersection of the direction towards its colony's bee and the best bee of all colonies.(4)di(t)=sign(x→best(t)+x→cbest(t)−x→i(t))A scout bee may select a direction randomly.(5)di(t)=round(−1+(1+1)).*rand());where xi(t)=[xi1, xi2, …, xiD] is the position of scout bee i at time t, xcbest(t) is the position of the related colony's best scout bee at time t, xbest(t) is the position of the best scout bee of all colonies at time t, and the sign(.) is a signum function on each dimension of the input vector.Since we deal with the multi-dimensional problems, it is necessary to determine a complete search direction, which requires selecting move directions for all of the dimensions of the problem separately. From the optimization point of view, selecting search directions separately for all dimensions will be more effective than selecting one direction for all dimensions. Every scout bee realizes this separate selection by a proportional selection rule, given by Eq. (1), until a complete search direction was determined. This rule is based on the Ant Colony System state transition rule proposed by Dorigo and Gambardella [28]. In this proportional selection rule, the probability of a direction being selected for a dimension of the problem is a function of: (i) the pheromone trail intensity between the dimensions and the identified search directions and (ii) the information provided by a dynamic priority rule for each search direction.Pheromone trail intensities are kept in a matrix, whose row and column numbers equal to number of dimensions of the problem and number of aforementioned search directions, respectively. Due to multiple colonies the proposed algorithm uses local pheromone matrixes in conjunction with a global pheromone matrix. Local matrixes keep the information for each colony, while the global matrix keeps the information for all colonies and is only updated by the best solution. Every artificial scout bee uses these two types of information while performing their waggle dance in a colony. By this way, the algorithm shares the information not only in a colony but also between different colonies. However, such a communication strategy between the colonies (hives) of real honey bees is not known as mentioned earlier. Sharing information in a hive and between different hives refers respectively to intra-hive and inter-hive communications (similar to Chen and Liao) [29].A new dynamic priority rule was developed and used while generating a complete search direction. This rule aims to determine the best direction for a dimension. A scout bee moves from one point to another during its search. From the optimization point of view, determining the right direction during the search of a scout is essential. As mentioned earlier, the proposed algorithm selects one of the identified search directions separately for every dimension of the problem. At this point the dynamic priority rule plays a vital role and assigns dynamically a value to all directions for the related dimension of the related solution by using the following algorithm (Fig. 3).The algorithm of the dynamic priority rule works the following way: before selecting a direction for a dimension, the rule analysis if a move towards a direction improves the objective value or not. A move towards a direction for a dimension may improve, downgrade or hold steady the objective function. In other words such a move may have positive, negative or no effect on the objective function. For these effects of a move for a dimension on objective function the rule assigns the priority values of 1, 0.1 and 0.2 for improving, downgrading and holding steady, respectively. It is obvious that this rule give significantly high importance of directions if it affects the objective function positively, thus leads the bees to promising areas of the search space.The proportional selection rule is based on the information sharing mechanism and uses a random number r between 0 and 1 and two user defined parameters r1 and r2 0≤r1, r2≤1 and r1+r2=1. The rule is given by:(6)j=J1=argmaxj∈Ai[φ.τ(i,j)g+γ.τ(i,j)l]α.[ηj]βifr≤r1J2:p(i,J2)=[φ.τ(i,j2)g+γ.τ(i,j2)l]α.[ηJ2]β∑j∈Ai([φ.τ(i,j)g+γ.τ(i,j)l]α.[ηj]β)ifr1<r≤r1+r2whereτ(i,j)gandτ(i,j)lare the pheromone trail intensities kept by global and local pheromone matrixes respectively in the path ‘selecting direction j for dimension i′, ηjis the priority value of direction j, Aiis the set of aforementioned search directions, φ and γ are parameters that determine the relative importance of global pheromone intensity versus local pheromone intensity, and α and β are parameters that determine the relative importance of pheromone intensity versus priority value.The search of the artificial bees depends on generating neighbours, which is one of the most crucial steps in designing any optimization algorithm including meta-heuristic [30]. From the optimization point of view, neighbour generation means determining new values for the decision variables and updating them to the newly determined values. The update of the decision variables requires deciding not only the search direction but also the step length, since the scout bees move from its current position to another position during its search. The current study deals with the multi-dimensional continuous problems and selects search directions for each dimension separately, as mentioned previously. For that reason, the proposed algorithm uses a neighbour generation function (Eq. (7)), which provides each artificial bee i (1≤i≤S, S is the number of scout bees) to update its position on dimension j (1≤j≤D, D is the number of dimensions of the problem on hand) at iteration t as follows.(7)xij(t+1)=xij(t)+slij(t)*dij(t)where xij(t) is the value of the position of bee i on dimension j at iteration t, slij(t) is the value of step length for bee i on dimension j at iteration t and dij(t) is the search direction of bee i on dimension j at iteration t, and dij(t)∈{−1, 0, 1}.At this point the step length for the decision variables must be set carefully in order improve the performance of the proposed algorithm by getting a high level of intensification. Various approaches in the literature dealt with setting up the step length as adaptive or variable step sizing strategies [31–35]. But, there is not an agreed method about the step sizing strategy in literature. A step sizing function based on the one that developed by Baykasoglu is presented in this current study [30]. This function starts an initial step length and updates it as the search progresses via the following proportional rule, which uses a random number r3 between 0 and 1, and a user defined parameter r4≤1(we set r4 as 0.75 in the current study).(8)slij(t+1)=slij(t)−e−k/(k+1)*φ*slij(t)ifr3≤r4slij(t)+e−k/(k+1)*φ*slij(t)ifr3>r4In Eq. (8), k is the number of iteration, φ is a user defined parameter and set to φ=0.001[30] in the present study. The step sizing function has a decreasing trend during the iterations as visualized in Fig. 4a. However, it increases the step length for some iterations as visualized in Fig. 4b. This behaviour of the step sizing function provides the algorithm a much more intensive search and the capability of easily jumping out of the local extremum points.In this section we carry out a performance evaluation test for the proposed multiple colony hybrid bees algorithm through a set of computational studies and provide an overview on the performance of the proposed algorithm in comparison to other algorithms suggested for continuous optimization problems. Within this context, we use the standard benchmark test functions that have been used for evaluating the performances of different methods and algorithms in the literature. Both unimodal and multimodal test functions have been included in the benchmark set. Multimodal functions are challenging problems in comparison to unimodal functions, because of their exponentially increasing number of local optimum as the dimension of the problem increases [36].Multiple colonies and the similarity between the waggle dance of honey bees and pheromone lying and following behaviours of ants are the bases of the proposed algorithm. Hence, the computational studies presented in the current paper depend on these characteristics of the algorithm. Since Akbari and Ziarati's work also deals with the multiple colony type of the bees algorithm, we firstly perform a comparison based on their work. The second part of the computational studies based on Socha and Dorigo's work, since they performed a comparison of ant-related algorithms [37], which is also reasonable to conduct a comparison of these algorithms to our proposed algorithm. We finally perform an extra comparison with some other meta-heuristics, whose results were taken from Socha and Dorigo's work, in order to validate the effectiveness of our proposed algorithm.The proposed multiple colony hybrid bees algorithm requires tuning some parameters before running it for a problem. The summary of the parameters used in this study is presented in Table 2. At this point, the reader must be noticed that the parameters given in rows 2–8 are related to used neighbourhood structure and were chosen experimentally, while the parameters given in rows 9–14 are related to bees algorithm and the values of them were also selected experimentally.As mentioned earlier the phenomenon of multiple colonies was also used by Akbari and Ziarati. For that reason we first conduct a comparison based on their work. Besides the cooperative approaches, their work contains some standard meta-heuristic approaches; hence, this first part of our computational study compares our proposed algorithm not only to multiple colony types of algorithms but also to some standard meta-heuristics. To carry out this computational study, we have run our multiple colony bees algorithm on the functions listed in Table 3.The test problems have been solved by the proposed multiple colony bees algorithm and the results of the other algorithms (Genetic Algorithm (GA), Cooperative Coevolutionary Genetic Algorithm (CCGA), Standard Particle Swarm Optimization (PSO), Cooperative PSO (CPSO-Sk), Concurrent PSO (CONPSO), Multi-Swarm Cooperative PSO (MCPSO), Artificial Bee Colony (ABC), and Cooperative Bee Swarm Optimization (CBSO)) were taken from Akbari and Ziarati's work. For a fair comparison we terminate the algorithm after evaluating 2.5E+06 number of functions, as the authors did. Table 4presents obtained mean and standard deviation measures of the function evaluations after running each algorithm 100 times for all the test problems.From the observation of the results indicated in Table 4, we can conclude that our proposed multiple colony bees algorithm has a satisfactory performance in comparison to other algorithms. For Sphere function, MCPSO has the most effective performance, while MCBA outperforms all of the other algorithms. On Rosenbrock function CBSO has better mean result than other algorithms, additionally, MCBA has almost the same performance. For the functions of Rastrigin, Schwefel and Griewangk, MCBA outperforms all of the other algorithms in terms of obtained mean values for 100 runs of the algorithms. Finally for the Ackley function, CBSO has the superior performance in terms of mean value of the obtained results and MCBA has also a significantly effective performance on this function.In consequence of the aforementioned experimental results, we can say that, our proposed algorithm has the ability of successfully optimizing the entire test functions presented in Table 3 with the given characteristics, as a conclusion for the first part of computational study. Furthermore, MCBA has satisfactory performance for both unimodal and multimodal functions, since Sphere and Rosenbrock functions are unimodal and the others are multimodal.This second part of the computational studies has been based on Socha and Dorigo's work, since our proposed algorithm also realizes the pheromone laying and following behaviour of ants due to the similarity to waggle dance of real honey bees. For that reason a comparison between our proposed algorithm and some published ant-related algorithms on a set of test functions will enrich the content of the current paper. The test functions listed in Table 5were taken from the above mentioned paper and used for this second part of the computational study. The reader should be noticed that some of the test problems are used by both first and second parts of the computational study with the differences in their dimensions and domains.The test functions of the second part of the computational study have also been solved by the proposed algorithm and the results of the other algorithms (Continuous Ant Colony Optimization (CACO), API (after Pachycondyla APIcalis), Continuous Interacting Ant Colony (CIAC) and Ant Colony Optimization for Continuous Domain (ACOℝ)) were taken from Socha and Dorigo's work. We performed 100 independent runs for each test function as all of the other four algorithms used for this second part of the computational study did. Furthermore, we terminate each run of the algorithm in the same way of the other algorithms on each test function. The algorithm stops itself if the terminating condition given by the following inequality is satisfied.(9)|f−f*|<ε1*f+ε2where f is the incumbent solution found by current run of the algorithm and f*is the priori known optimal solution for the related test problem, and ϵ1 and ϵ2 are the relative and absolute errors, respectively. For all the runs of the proposed algorithm ϵ1 and ϵ2 were set to 10−4, same as the values used by Socha and Dorigo and the values reported in literature.Table 6indicates the results obtained by the proposed algorithm in comparison to those obtained by the other four algorithms. The reported values of each algorithm on each test function are the median numbers of functions evaluations until the terminating condition is satisfied. Additionally, the reported values in square brackets indicate the percentage of successful runs. In other words, the values in square brackets are the number of runs that the algorithm did not get stuck in a local optimal point, since we run the proposed algorithm 100 times for each test problem.From the observation of Table 6, our proposed algorithm surpasses the algorithms of CACO, API and CIAC for all the test functions while outperformsACOℝfor 3 test functions (Rosenbrock, Goldenstein and Price, Martin and Gaddy) out of 6. For the other 3 test functions (Sphere, Griewangk, B2), it is reasonable to claim that the performance of our proposed algorithm is satisfactory, since the gaps between the results of our proposed algorithm andACOℝare not significantly high.Additionally, the obtained results for this second part of the computational study encourages our assertion that we made at the end of the first part of the computational study as our proposed algorithm has a satisfactory performance on both unimodal and multimodal functions.This final part of the computational study concentrates on validating the effectiveness of our proposed algorithm. Within the scope of this purpose, some test functions, listed in Table 7, were taken from Socha and Dorigo's paper [37].The test functions of the final part of the computational study have been solved by our proposed algorithm. The results for the other algorithms (Continuous Genetic Algorithm (CGA), Enhanced Simulated Annealing (ESA), Enhanced Continuous Tabu Search (ECTS), and Differential Evolution (DE)) were taken from Socha and Dorigo's work. At this part of the computational study, 100 independent runs for each test function were performed as all of the other algorithms did. Moreover, each run was terminated in the same way of the other algorithms on each test function as explained in Section 4.2 (Table 8).Our proposed algorithm has a superiority over the algorithms of ESA and DE for all the test problems, while outperformsACOℝfor 5 test functions (Rosenbrock, De Jong, Goldenstein and Price, Easom and Zakharov) and excels CGA for 7 test functions (Rosenbrock, De Jong, Goldenstein and Price, Easom, Zakharov, Griewangk and Branin RCOS) and ECTS for 5 test functions (De Jong, B2, Easom, Zakharov and Griewangk). Additionally, our proposed algorithm has the ability to provide solutions for all the test problems, while results on some test functions were not available for some algorithms. At this point, we can conclude that the obtained results validate the effectiveness of our algorithm.In this subsection we perform a convergence analysis on the two-dimensional form of the Rastrigin function. Within the scope of this analysis, we run the algorithm for a maximum number of 1000 iterations and we first constituted the contour plot of the selected function. After that, we scattered the individuals of the initial colonies and the individuals of the colonies after 200, 400, 600, 800 and 1000 iterations respectively in order to monitor the convergences of the colonies. By this way, we have the possibility to control the convergence behaviour of the proposed algorithm, if it is converged towards to global optimum or not. Fig. 5illustrates the convergence behaviour of the proposed algorithm on the Rastrigin function.An extra convergence analysis was also done on the two-dimensional form of the Sphere function and Fig. 6illustrates the convergence behaviour of the proposed algorithm on the Sphere function. In Figs. 5 and 6, individuals of colonies 1, 2, 3, 4, and 5 were visualized via the symbols of ■, + *, #, and x, respectively.This convergence analysis gives us the chance of testing the effectiveness of the neighbourhood structure developed in the current paper. The developed neighbourhood structure realizes a communication strategy and we aimed at leading the convergence behaviour of the proposed algorithm through this strategy. Within the scope of this purpose, we envisaged that the proposed algorithm to achieve a satisfactory level of convergence, which represents the stability of the proposed algorithm. From the observations of Figs. 5 and 6, we can conclude that our proposed algorithm has the capability of reaching a satisfactory level of convergence towards global optimum.On the other hand, premature convergence, which may cause the algorithm to trap in local optima or to stagnate, is a challenging problem of the meta-heuristic approaches. This problem generally occurs if an efficient balance between diversification (exploration) and intensification (exploitation) is not provided [38]. The convergence analysis, carried out on Rastrgin and Sphere functions, gives us the chance of monitoring the balance between the diversification and intensification characteristics of our proposed algorithm. Through this analysis, summarized in Figs. 5 and 6, we can conclude that our proposed algorithm coped effectively with the problems of premature convergence, trapping in a local optima and stagnation by the force of its proper balance between exploration and exploitation.

@&#CONCLUSIONS@&#
In this paper, we aimed to develop a new multiple colony Bees Algorithm in order to improve the performance of the basic Bees Algorithm for solving the continuous optimization problems more effectively. Since the proposed algorithm was a multiple colony type, it is required to communicate the bees living in the same hive and living in different hives in order to share the information. The proposed algorithm realized such a communication strategy through a newly developed neighbourhood structure, which was based on the state transition rule of the Ant Colony Optimization algorithm. The rationale why we used this transition rule was the similarity between the waggle dance behaviour of honey bees and pheromone lying and following behaviours of ants. Besides providing intra-hive and inter-hive communications, the developed neighbourhood structure provided the algorithm to utilize the positive feedback mechanism as Ant Colony Optimization algorithm does. Thus, it was envisaged that the proposed algorithm to reach a satisfactory level of convergence towards global optima and to cope effectively with the problems of premature convergence, trapping in a local optima and stagnation.In order to evaluate the performance of the proposed algorithm, a two-step computational study was carried out. The proposed algorithm was compared to some others meta-heuristic and cooperative approaches at the first step, while it was compared to some ant-related approaches at the second step. Additionally, a convergence analysis was conducted on the two dimensional forms of well known functions of Rastrigin and Sphere. Computational results indicate the effectiveness of the proposed algorithm in terms of obtained results, reached level of convergence and the capability of coping with the problems of premature convergence, trapping in a local optima and stagnation.