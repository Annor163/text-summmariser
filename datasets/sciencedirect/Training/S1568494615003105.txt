@&#MAIN-TITLE@&#
A hybrid CBO–PSO algorithm for optimal design of truss structures with dynamic constraints

@&#HIGHLIGHTS@&#
A new hybrid CBO–PSO algorithm is presented by adding positive properties of the PSO algorithm to the CBO.The CBO is a recently developed meta-heuristic algorithm which does not use the internal parameter and memory in its formulation.In the CBO–PSO the memory of the PSO is added to the CBO to improve the performance of the latter algorithm.The new algorithm is compared to other advanced meta-heuristic methods to illustrate the effectiveness.

@&#KEYPHRASES@&#
Colliding bodies optimization,Particle swarm optimization,Penalty approach,Structural design problems,Dynamic constrains,

@&#ABSTRACT@&#
The vibration domain of structures can be reduced by imposing some constraints on their natural frequencies. For this purpose optimal design of structures under frequency constraints is required which involves highly non-linear and non-convex problems. In this paper an efficient hybrid algorithm is developed for solving such optimization problems. This algorithm utilizes the recently developed colliding bodies optimization (CBO) algorithm as the main engine and uses the positive properties of the particle swarm optimization (PSO) algorithm to increase the efficiency of the CBO. The distinct feature of the present hybrid algorithm is that it requires no parameter tuning. The CBO is known for being parameter independent, and avoiding the use of the traditional penalty method to handle the constraints upholds this property. Two mathematical constrained functions taken from the literature are studied to verify the performance of the algorithm. The algorithm is then applied to optimize truss structures with frequency limitations. The numerical results demonstrate the efficiency of the presented algorithm for this class of problems.

@&#INTRODUCTION@&#
Optimization algorithms are utilized to maximize or minimize one/some objective functions under some specific limitations. In optimal design of structures, the main objective is to minimize the weight of the structures under some constraints, such as stresses and displacements. For structures subjected to dynamic excitations, the natural frequencies play important role in the dynamic response of structures and resonance phenomenon. In recent years, optimal design of structures under frequency limitations has been extensively investigated using different optimization algorithms by many researchers. This problem is high non-linear and non-convex with respect to the design variables [1].Algorithms for optimization can be divided into two general categories of Gradient-based methods and metaheuristics. The formulation of metaheuristic algorithms is often inspired by either natural phenomena or physical laws. Every metaheuristic algorithm consists of two phases: exploration of the search space and exploitation of the best solutions found. One of the main problems in developing a good metaheuristic algorithm is to keep a reasonable balance between the exploration and exploitation abilities [2,3]. Some of the well-known metaheuristic algorithms can be found in [4–9]. One of the difficulties with most of the metaheuristic algorithms is parameter tuning which is often time consuming. This problem becomes more severe when the parameters of penalty method for constraint handling are added. This is because the feasible solutions are extremely sensitive to setting the parameters. In practical structural design tasks, designers usually have limited knowledge about the appropriate values of these parameters. Therefore, the selection of proper values for the parameters and utilizing penalty approach becomes a tedious process.One of the recently developed metaheuristics is the colliding bodies optimization (CBO) algorithm originated by the present authors [10]. Compared to conventional meta-heuristic optimization algorithms, simple formulation and no necessity for parameter tuning are the main advantages of this algorithm. On other hand, the exploitation phase of this algorithm is weak due having no memory for saving the best-so-far solution in its formulation (i.e. the best position of agents from the previous iterations). Particle swarm optimization (PSO) developed by Eberhart and Kennedy [4] is also a popular metaheuristic algorithm which is based on swarm intelligence. In this algorithm, the agents (particles) improve their position by using their data from the past generations.The main objective of the present study is to optimize the weight of truss structures with natural frequency constraints. Thus, an efficient and no parameter tuning algorithm is proposed based on hybridization of CBO and PSO algorithms for constrained optimization problem. In this algorithm, the used memories of the PSO, i.e. the local and global best, is added to the CBO. Thus in the new algorithm the bodies move toward the best saved bodies increasing the exploitation and the convergence rate for the best found solution.The present paper is organized as follows: in the next section, formulation of the optimal design of truss structures with frequency limitations is presented. In Section 3, both standard algorithms are briefly introduced and the hybrid method is presented. This is followed by a section consisting of the study of optimization of two mathematical constrained functions and three truss structures. A discussion and brief concluding remarks are presented in Sections 4 and 5, respectively.Optimization problems can be classified as multi-objective and mono-objective. In structural optimization problems, the main objectives are minimizing the weight or cost of the structures while satisfying some constraints. In this class of optimization problems, the design variables can be considered as the cross-sectional areas of elements and/or the coordinates of nodes. The optimization problem for a truss structure can be stated as follows:(1)FindX=[x1,x2,x3,…,xN]minimizingW(X)=∑i=1neρiAilisatisfyinggj(X)≤0,j=1,2,…,mxlmin≤xl≤xlmaxwhere X is the vector of all design variables with N unknowns; W is the weight of truss structure; ρi, Aiand liare mass density, cross sectional area and length of the ith member, respectively; ne is number of the structural elements; gjis the jth constraint from m inequality constraints. Also, xlminand xlmaxare the lower and upper bounds of design variable vector, respectively.Since the solution of this multi-objective problem is rather complex, most researchers have considered this problem as mono-objective and the penalty function approach has been used for handling the constraints. Coello [11] compared different constraint-handling methods used in metaheuristic algorithms with comments on their advantages and disadvantages. These methods can generally be classified into five groups: penalty functions, special representations and operators, repair algorithms, separation of objectives and constraints, and hybrid methods. The most common and convenient method in metaheuristic algorithms to handle constraints is to use penalty functions. In this method, a constrained optimization problem is transformed into an unconstrained one by multiplying a certain value to objective function based on the amount of constraint violation appears in a problem. Therefore the merit (or pseudo objective) function which should be minimized is defined as:(2)Mer(X)=W(X)×fpenalty(X)where Mer(X) is the merit function; W(X) is the objective function (weight of truss structure); fpenalty(X) is the penalty function which results from the violations of the constraints corresponding to the response of the structure:(3)fpenalty(X)=1+γp∑j=1mmax(0,gj(X))=1+γp∗G(X)where γpis penalty parameter, and G(X) is the constraint function. In dynamic constraint problems the behavioral constraints are the restricted natural frequencies defined as follows:(4)ωn(x)≤ωun⇒,gn(x)=ωn(x)ωun−1≤0forsomenaturalfrequenciesnωm(x)≥ωlm⇒,gm(x)=1−ωm(x)ωlm≤0forsomenaturalfrequenciesmwhere ωnand ωmare the nth and mth natural frequency, respectively; ωlnand ωunare the lower bound and upper bound of the nth and mth natural frequency, respectively.As can be seen from Eq. (3), the penalty function method consists of a penalty parameter where the feasible solutions are dependent on right tuning of these parameters. By setting small values of the penalty parameter, the pseudo objective function becomes less sensitive to optimization constraints and the optimization process may converge to a violated solution. Conversely, setting the penalty parameter to a large value leads to amplify the effect of optimization constraints and the optimization process may get stuck in a local optimum. This dependency of the optimization algorithms performance on penalty parameters has led researchers to devise efficient method for constraint handling [12].In this paper, we present a constraint handling method that does not dependent on any parameter tuning. The pair-wise comparison method which presented in Ref. [13] has been adopted in the presented algorithm. In this method, for ranking and comparison of the agents (or populations), three criteria are enforced: in comparison of (i) two feasible/inviolate agents, the one with better objective function value is preferred, (ii) one feasible/inviolate and one infeasible/violate agent, the feasible agent is preferred, and (iii) two infeasible/violate agents, the one with smaller constraint violation is preferred.In the next section the new CBO–PSO based hybrid algorithm is presented using the positive features of the standard CBO and PSO algorithms.Inspired by the natural features of the CBO and PSO algorithms, we develop an efficient hybrid algorithm (CBO–PSO) in this section. In the following, both standard CBO and PSO algorithms are briefly introduced and then the proposed hybrid method is presented.Colliding bodies optimization (CBO) is a recently efficient and robust metaheuristic optimization algorithm for simple implementation of complex computations. As CBO is simple to be implemented and can deal with complex problems without extensive mathematical computations and parameter tuning, it is widely used in various fields of optimization problems [14,15]. The CBO mimics a 1-dimensional collision between two colliding bodies (CBs). In this case, each CB collides distinctly with its pair and updates its new velocity based on momentum and energy conservation law for 1-dimensional collision [16]. According to this law, the velocities of two bodies after a one-dimensional collision can be obtained as:(5)v′1=(m1−εm2)v1+(m2−εm2)v2m1+m2(6)v′2=(m2−εm1)v2+(m1−εm1)v1m1+m2where v1 is the velocity of the first object before impact, v2 is the velocity of the second object before impact,v′1is the velocity of the first object after impact,v′2is the velocity of the second object after impact, m1 is the mass of the first object, m2 is the mass of the second object, ɛ is the coefficient of restitution (COR) of two colliding bodies, defined as the ratio of relative velocity of separation to the relative velocity of approach.The CBO algorithm consists of steps that are briefly described as follows:Similar to other multi-agent methods, CBO has a number of individuals (or agents), named colliding body (CB), consisting of the variables of the problem. Each CB is treated as an object with specified mass and velocity and collides to others; after collision, each CB moves to a new position with new velocity (Fig. 1). CBO starts with an initial population consisting of 2n parent individuals created by means of a random initialization. Then, CBs are sorted in ascending order based on the value of cost function as shown in Fig. 2. The sorted CBs are divided equally in to two groups. The first group is stationary and consists of good agents. This set of CBs is stationary and velocity of these bodies before collision is zero. The second group consists of moving agents which move toward the first group. Then (see Fig. 2), the better and worse CBs, i.e. agents with upper fitness value, of each group will collide together to improve the positions of moving CBs and to push stationary CBs toward better positions. The change of the body position represents the velocity of CBs before collision as:(7)Vi=0,i=1,…,nXi−n−Xi,i=n+1,…,2nwhere Viand Xiare the velocity and position vectors of the ith CB, respectively. 2n is the number of population size.After the collision, the velocity of bodies in each group is evaluated using momentum and energy conservation law and the velocities before collision (Eq. (7)). The velocity of CBs after the collision is:(8)V′i=(mi+n+εmi+n)Vi+nmi+mi+n,i=1,…,n(mi−εmi−n)Vimi+mi−n,i=n+1,…,2nwhere ViandV′iare the velocities of the ith CB before and after the collision, respectively; miis the mass of the ith CB and defined as:(9)mk=1fit(k)∑i=1n1fit(i),k=1,2,…,2nwhere fit(i) represents the objective function value of the ith agent. Obviously a CB with good values exerts a larger mass and fewer moves than the bad ones. Also, for maximizing the objective function, the term 1/fit(i) is replaced by fit(i). ɛ is the coefficient of restitution (COR) and is defined as the ratio of the separation velocity of two agents after collision to approach velocity of two agents before collision. In this algorithm, this index is defined to control of the exploration and exploitation rates. For this purpose, COR decreases linearly from unit value to zero. Thus, ɛ is defined as:(10)ε=1−iteritermaxwhere iter is the actual iteration number and itermax is the maximum number of iterations. COR having unit value and zero value represent the global and local search, respectively. In this way a good balance between the global and local search is achieved by increasing the number of iterations.The new positions of the CBs are evaluated using the generated velocities after the collision in position of stationary CBs:(11)Xinew=Xi+rand∘V′i,i=1,…,nXi−n+rand∘V′i,i=n+1,…,2nwhereXinewandV′iare the new position and the new velocity after the collision of the ith CB, respectively.The PSO is based on a metaphor of social interaction such as bird flocking and fish schooling, and is developed by Eberhart and Kennedy [4]. The PSO simulates a commonly observed social behavior, where members (particles) of a group (swarm) tend to follow the lead of the best of the group.In this algorithm, position of the particles and their associated velocities are initialized with random positions. Then, the particles fly through the search space and their positions are updated based on the best positions of individual particles denoted bypikand the best position among all particles in the search space represented bypgk:(12)Xi(k+1)=Xi(k)+Vi(k+1)(13)Vi(k+1)=ω×Vi(k)+C1×r1∘(Pi(k)−Xi(k))+C2×r2∘(Pg(k)−Xi(k))where Xi(k) and Vi(k) are the position and velocity for the ith particle at iteration k; ω is an inertia weight to control the influence of the previous velocity; r1, and r2 are two random numbers uniformly distributed in the range of (0, 1); c1 and c2 are the cognitive and social scaling parameters, respectively; pi(k) is the best position of the ith particle up to iteration k; pg(k) is the best position among all particles in the swarm up to iteration k and the sign “∘” denotes element-by-element multiplication [17].In this study, CBO and PSO are hybridized leading to a new optimization search strategy. The main algorithm is based on the CBO, where some features of the PSO are added. Here, three features are added to the formulation of the standard CBO: (i) the stationary CBs move also toward better positions, (ii) the CBs move toward local best, i.e. piis added which is used in the PSO, (iii) the old velocities are added to the new velocities of CBs before collision. In fact, the exploitation ability of CBO algorithm increases by adding the saved particles.The CBO–PSO algorithm can simply be described as follows:Step 1: Initialization: initial position, velocities and best position of populations are created by means of a random initialization:(14)piij=xij∈[xiL,xiU]vij∈(arbitrarydomain),i=1,2,…N&j=1,2,…2nwherexij,vijandpiijare the ith element of position, velocity and best position of the jth population, respectively;xiLandxiUare the lower and upper bounds for the ith decisions variable, respectively; N and 2n are the number of decision variable and population size, respectively.Step 2: Arrangement of populations: as mentioned before, the arrangement of the CBs is performed such that three criteria are satisfied: in comparison of (i) two inviolate populations, the one with better objective function value is selected, (ii) one inviolate and one violate population, the inviolate population is selected, and (iii) two infeasible populations, the one with smaller constraint violation is preferred. For this purpose a matrix similar to Eq. (15) is constructed using the position, velocity and best local vectors, as well as with the pseudo objective function of each position vector F(X):(15)x11x21⋯xN1x12x22⋯xN2⋮⋮⋮⋮x12nx22n⋯xN2nv11v21⋯vN1v12v22⋯vN2⋮⋮⋮⋮v12nv22n⋯vN2npi11pi21⋯piN1pi12pi22⋯piN2⋮⋮⋮⋮pi12npi22n⋯piN2nF(X1)F(X2)⋮F(X2n)This matrix is sorted in ascending order of pseudo objective function, that is F(X1)≤F(X2)≤⋯≤F(X2n). The pseudo objective function is defined to compare the feasible and/or infeasible population based on the three mentioned criteria as:(16)F(X)=f(X)ifG(X)=0,fmax+G(X)otherwise,where f(X) and G(X) are the objective and constraint functions which are defined in Eqs. (1) and (3); and fmax is the objective function of the worse inviolate CB in the current iteration. Thus, the fitness of an infeasible population not only depends on the amount of constraint violation, but also on the population of solutions at hand. However, the fitness of a feasible solution is always fixed and is equal to its objective function value. It should be noted that the best position of population, pi, is evaluated based the above mentioned criteria.Step 3: Mating process: the CBs are divided to two parts as shown in Fig. 2. The first half and second half of this partition named as part 1 and part 2 agents, respectively.Step 4: Evaluation of velocities before collision: the part 1 and part 2 agents toward the best position of CBs of part 1 agents. The old velocities are also added to new velocities. Therefore, the velocity of CBs before collision is derived using:(17)Vj(k+1)=Vj(k)+(Pij(k)−Xj(k)),j=1,…,nVj(k)+(Pij−n(k)−Xj(k)),j=n+1,…,2nwhere Vj(k) and Xj(k) are the velocity and position vectors of the jth CB in the kth iteration, respectively; Pij(k) is the best position vector of the jth CBs up to iteration k.Step 5: Evaluation of velocities after collision: compute the velocity of CBs after the collision using Eqs. (5), (6) and (17):(18)V′j(k+1)=(mj−εmj+n)*Vj(k+1)mj+mj+n+(mj+n+εmj+n)*Vj(k+1)mj+mj+n,j=1,…,n(mj−εmj−n)*Vj(k+1)mj+mj−n+(mj−n+εmj−n)*Vj−n(k+1)mj+mj−n,j=n+1,…,2nwhereV′j(k+1)and Vj(k) are the velocity vectors of the jth CB after and before the collision, respectively; mjis the mass of the ith CB which is defined as Eq. (9). ɛ is the coefficient of restitution (COR) and is defined as Eq. (10).Step 6: Evaluation of new position: the new positions of the CBs are evaluated using the following expression:(19)Xj(k+1)=Pij(k)+rand∘V′j(k+1),j=1,…,nPij−n(k)+rand∘V′j(k+1),j=n+1,…,2nwhere rand is a random number uniformly distributed in the range of (−1, 1);Step 7: Updating the velocities: the velocities of the CBs are updated as:(20)Vj(k+1)=Xj(k+1)−Xj(k)Step 8: Termination criteria: the optimization is repeated from Step 2 until a termination criterion, as the maximum number of iteration, is satisfied.As it can be seen in equations, by sorting the populations based on feasible or infeasible solutions, the formulation of proposed algorithm needs no parameter setting or tuning. The following section provides examples and comparisons for validation of the presented hybrid algorithm.In this section the efficiency of the proposed algorithm, CBO–PSO, is studied through two mathematical function examples and three well-studied truss structures with frequency limitations taken from the optimization literature. Examples 1 and 2 show the applicability of the CBO–PSO for optimization of constraint problems. In example 3 a spatial truss structure is studied for finding the optimal cross sections. In example 4 the performance of the CBO–PSO is studied for finding the optimal size and shape of a spatial truss structures. In the last example, a planar truss structure with many variables is selected to show the importance of selection of optimization algorithm in the final optimal weight. These examples are independently optimized 20 times. The algorithm was coded in MATLAB, and structural analysis was performed with the direct stiffness method. A comparison study of the obtained results is performed for the considered examples and the next section consists of the discussions on the results.Optimization of the constrained function expressed in Eq. (22) is considered as the first example. This problem also has seven variables and four nonlinear inequality constraints. This problem is defined as:Find(21){x1,x2,x3,x4,x5,x6,x7}To minimize(22)f(x)=(x1−10)2+5(x2−12)2+x34+3(x4−11)2+10x56+7x62+x74−4x6x7−10x6−8x7Subjected to:(23)g1(x)=127−2x12−3x24−x3−4x42−5x5≥0,g2(x)=282−7x1−3x2−10x32−x4+x5≥0,g3(x)=196−23x1−x22−6x62+8x7≥0,g4(x)=−4x12−x22+3x1x2−2x32−5x6+11x7≥0.The bounds on the design variables are:(24)−10≤xi≤10(i=1−7)This problem has been solved in the literature using various global optimization techniques [13,18]. Taking into account the probabilistic nature of metaheuristic algorithms, a number of independent runs were performed. In this example, the population size of the CBO–PSO and CBO are set to 40 and 60 individuals, respectively, and the maximum number of optimization iterations was limited to 600.The best solution vectors and statistical result of these runs obtained by CBO and CBO–PSO are compared with those obtained by other metaheuristic algorithms in Table 1. As it can be seen from this table, the best solution obtained by CBO–PSO is better than CBO and those quoted for the other algorithms. However, the CBO–PSO, CBO and HS needs 24,000, 36,000 and 160,000 fittness function evalutions to find the optimum result, respectively. The objective function and constraint function of feseable population against generations are plotted in both sides of Fig. 3. As it can be seen, the constraint function is equal zero and hense the constrints are satisfed in the final iterations.This is a 10-variable challenging optimization problem. The problem has also eight nonlinear inequality constraints, and can be defined as:Find(25){x1,x2,x3,x4,x5,x6,x7,x8,x9,x10}To minimize(26)f(x)=x12+x22+x1x2−14x1−16x2+(x3−10)2+4(x4−5)2+(x5−3)2+2(x6−1)2+5x72+7(x8−11)2+2(x9−10)2+(x10−7)2+45Subjected to:(27)g1(x)=105−4x1−5x2+3x7−9x8≥0,g2(x)=−10x1+8x2+17x7−2x8≥0,g3(x)=8x1−2x2−5x9+2x10+12≥0,g4(x)=−3(x1−2)2−4(x2−3)2−2x32+7x4+120≥0,g5(x)=−5x12−8x2−(x3−6)2+2x4+40≥0,g6(x)=−x12−2(x2−2)2+2x1x2−14x5+6x6≥0,g7(x)=−0.5(x1−8)2−2(x2−4)2−3x52+x6+30≥0,g8(x)=3x1−6x2−12(x9−8)2+7x10≥0.The bounds on the design variables are:(28)−10≤xi≤10(i=1−10)This problem has been solved by Michalewicz and Schoenauer [19] using GA-based methods. Deb [13] utilized also an efficient constraint handling method for the GA, and Lee and Geem [18] employed the harmony search algorithm. In this case, CBO–PSO and CBO population sizes were set to 80 and 100 individuals, respectively. The maximum number of optimization iterations was set as 1000.Table 2compares the optimized variables, the corresponding objective function and statistical results obtained by CBO and CBO–PSO with those obtained by other existing metaheuristic algorithms. It can be seen that the proposed algorithm is the best among the four standard algorithms. The CBO–PSO needs 80,000 objective function evaluations to find the optimum result while it is 100,000 and 230,000 for the CBO and HS as reported, respectively. Similar to the first example, the objective function and constraint function of feasible population versus generations are plotted in Fig. 4.In this example a structural designer intends to evaluate the cross sections of a 72-bar space steel truss structure shown in Fig. 5such that its weight becomes minimum, while the first two frequencies are limited to some specified values. The structural elements are also labeled in Fig. 5. The following values are used for material properties of the steel: the material density is 2770kg/m3 and the modulus of elasticity is 69,800MPa. Four non-structural masses of 2270kg are attached to the nodes 1–4. This design case addresses a continuous treatment of the problem, in which the independent size variables are chosen from a real-valued design interval with lower bound equal to 0.645cm2. In this example, the first two natural frequency constraints are imposed as ω1≥4Hz and ω2≥6Hz. This example has been solved previously by Konzelman [20] using a dual method (DM) and by Sedaghati [21] using the force method (FM). Gomes [22] has investigated the problem using the PSO. Kaveh and Zolghadr [23,24] have investigated the problem using the standard and an enhanced CSS. The population size (i.e. number of CBs) and number of iterations are defined as 2n=30 and iteration=200 for both CBO and CBO–PSO.Comparison of the optimal design results reported in the literature and those of the present work are detailed in Table 3. The PSO–CBO algorithm found the best weight as 324.377kg after 6000 analyses, with the standard deviation of 1.55kg. Though, the number of iteration are more than standard CSS and enhanced CSS, this solution is reported to be the optimum design of the problem reached in the present study, and it is the best solution amongst the existing literature results. A comparatively better design weight of 325.459kg was determined using CBO. Fig. 6shows the feasible solution history for the obtained best results of 20 individual run. It can be seen that the best solution found by the proposed algorithm is 324.377kg which is attained at the 179th iterations.This example considers shape and size optimization of a dome-like space truss structure as shown in Fig. 7. The initial topology and the element numbering of this truss are shown in Fig. 7a. This design has also been investigated in Lingyun et al. [25] using the NHGA algorithm, and Gomes [22] utilizing PSO algorithm. The problem has also been optimized by Kaveh and Zolghadr [23,26] using the CSS algorithm. The space truss has 52 bars and non-structural masses of m=50kg are added to the free nodes. The material density is 7800kg/m3 and the modulus of elasticity is 210,000MPa. For this structure, the symmetry around x and y-axes is employed to group the 52 truss members into eight independent size variables, where all members in a group share the same material and cross-sectional properties.Table 4shows each element group by member numbers. The range of the cross-sectional areas varies from 1 to 10cm2. The shape optimization is performed considering that the symmetry is preserved in the process of design. Each movable node is allowed to move ±2m. For the frequency constraints, ω1≤15.916Hz and ω2≥28.649Hz are considered. Hence, this truss optimization problem has 13 design variables (five shape variables plus eight size variables). The population size and number of iterations are defined as 2n=30, and iteration=200 for both CBO and CBO–PSO, respectively.Table 5compares the optimal cross sections, best weight, mean weight and standard deviation of the results obtained using CBO and CBO–PSO with the outcomes of other researches. As anticipated, CBO–PSO has led to a much better results than the others in term of the best, the mean weight and also standard deviation. Fig. 8provides the convergence rates of the best result found by the CBO–PSO.In this problem, the objective is to achieve the minimum weight design of the 200-bar plane truss shown in Fig. 9. This truss has been investigated using the standard CSS and CSS–BB-BC algorithms as a frequency constraint weight optimization problem by Kaveh and Zolghadr [23,27]. The material density and modulus of elasticity of members are 7860kg/m3 and 210,000MPa, respectively. Non-structural masses of 100kg are attached to the upper nodes. A lower bound of 0.1cm2 is assumed for the cross-sectional areas. In calculating the frequency constraints, the first three frequencies are restricted to ω1≥5Hz, ω2≥10Hz and ω3≥15Hz. The elements are divided into 29 groups. For this example, the population size and number of iterations are also defined as 2n=30 and iteration=300 for both CBO and CBO–PSO, respectively.The elements grouping and results obtained using this research with those of the other researches are presented in Table 6. According to this table, the result obtained by the CBO–PSO is meaningfully lighter than that of the standard CSS, CSS–BB-BC and CBO algorithms. Fig. 10shows the convergence curves for the proposed algorithm.

@&#CONCLUSIONS@&#
