@&#MAIN-TITLE@&#


@&#HIGHLIGHTS@&#
We have developed a generic C++ library (called NiHu) for boundary elements.NiHu generates optimised code for a large variety of BEM formulations.Template metaprogramming is extensively exploited for adaptive and optimal code.We demonstrate NiHu’s versatility, flexibility, and performance by examples.

@&#KEYPHRASES@&#
Generic BEM library,C++ template metaprogramming,Boundary element methods,Object-oriented programming,Partial differential equations,Acoustics,

@&#ABSTRACT@&#
This paper introduces NiHu, a C++ template library for boundary element methods (BEM). The library is capable of computing the coefficients of discretised boundary integral operators in a generic way with arbitrarily defined kernels and function spaces. NiHu’s template core defines the workflow of a general BEM algorithm independent of the specific application. The core provides expressive syntax, based on the operator notation of the BEM, reflecting the mathematics behind boundary elements in the C++ source code. The customisable Component library contains elements specific to particular applications such as different numerical integration techniques and regularisation methods. The library can be used for creating a standalone C++ application using external open source libraries, or compiling a Matlab toolbox through the MEX interface. By massively exploiting C++ template metaprogramming, NiHu generates optimised codes for specific applications, including heterogeneous problems. The paper introduces the main concepts of the novel development, demonstrates its versatility and flexibility and compares the implementation’s performance to that of other open source projects.

@&#INTRODUCTION@&#
Several engineering problems of electrodynamics, acoustics, elastodynamics or fluid mechanics are related to the solution of partial differential equations (PDE). PDEs are the governing equations of the underlying physical model, whereas the actual problem setup is defined by the geometry, material properties, and boundary conditions. As analytical solutions—if they exist at all—have very restricted limitations, numerical solution methods need to be utilised in most practical applications.Boundary element methods (BEM) are based on a boundary integral representation of the PDE. Contrary to domain based solution techniques, like finite element (FE), finite volume (FV) or finite difference (FD) methods, the BEM solves the PDE by discretising the domain’s boundary only, hence reducing the dimensionality of the problem by one. Furthermore, the BEM provides a straightforward way of solving exterior problems defined over infinite domains. Due to these advantages the BEM is a very popular numerical technique, and is still being subjected to active research and development. Besides its advantages, the BEM has its drawbacks too. Opposed to the FE or FD methods, application of the BEM can result in the solution of linear equations with complex valued, dense system matrices. Furthermore, while solution schemes of the FE or FD methods are directly related to building blocks of the PDE, the application of the BEM requires knowledge of the PDE’s fundamental solution.Although different engineering problems involve various PDEs and their integral representations, boundary element methods have a well established, unified mathematical background [1,2]. Specific fields of application are described by particular cases of the general framework with dedicated fundamental solutions, discretisation options and solution strategies.In order to achieve good computational performance commercial boundary element software products are optimised for specific applications. Similarly, most of the open source tools and libraries available are implemented for narrow application segments, and typically support limited discretisation or solution strategies.The present paper introduces NiHu, an open source C++ BEM library. Instead of developing yet another open source library for a specific application area, NiHu aims to serve as a generic programming environment for boundary element problems of various kinds.NiHu consists of (1) a C++ core, (2) a C++ Component library and (3) a Matlab shell layer. The C++ core can be considered as a skeleton that defines boundary element problems in a generic way. Specific aspects of BEM implementations are contained in the corresponding C++ Component libraries of NiHu, which are designed to be easily customisable and extendible by researchers and developers. The Matlab shell layer provides extensive pre- and post-processing features and makes integration with other software tools straightforward. This concept allows a beneficial application of the library in education, and also in research, where the developer can focus on the improvement of smaller details, while having the implementation working as a part of a general system. Furthermore, the implementation is capable of solving problems of industrial size.The foregoing parts of the paper are organised as follows. Section ‘Background’ gives a short introduction into boundary element methods and C++ template metaprogramming, followed by the description of NiHu’s main software concepts. Section ‘The C++ core and the Component library’ provides a structural description of the C++ core and briefly summarises the capabilities of the Component library. Versatility and performance of the software are demonstrated in Section ‘Numerical examples’ through an academic example, an industrial size application, and comparison of the library’s performance with that of other open source packages. Finally, Section ‘Introducing a new PDE into the NiHu framework’ demonstrates how the library can be extended to solve a boundary value problem with a newly defined PDE.

@&#CONCLUSIONS@&#
A recently developed open source C++ BEM template library called NiHu has been introduced. The template library is capable of discretising boundary integral operators and generating the coefficients of system matrices for a variety of different BEM problems and discretisation formalisms.The main achievements of NiHu are its generality and flexibility. These aspects have been demonstrated by presenting the automatised discretisation of an academic problem using 18 different BEM formalisms, as well as demonstrating how a new PDE can be introduced into the matrix generation workflow.By exploiting recent C++ technologies and template metaprogramming, the NiHu core generates optimised code and compiles on any architecture where a C++11 compiler is available. This feature has been demonstrated by presenting modelling results of a large-scale problem, where computations were run both on a desktop PC and on a supercomputer. Furthermore, the implementation’s performance has been compared to other open source libraries, proving that the executables generated by NiHu provide good efficiency.Besides, the library compiles under Matlab through the MEX interface, providing a user-friendly environment for pre- and post-processing, and making an efficient BEM implementation available for Matlab users.The library is published under the GNU General Public License and can be downloaded at http://last.hit.bme.hu/nihu, where the complete source code together with examples and tutorials are also available.