@&#MAIN-TITLE@&#
Probability chains: A general linearization technique for modeling reliability in facility location and related problems

@&#HIGHLIGHTS@&#
An exact linearization technique based on the idea of probability chains is presented for modeling reliability in facility location.A well known model is considered in detail: the unreliable p-median problem.The method can be employed in a straightforward way to linearize other similarly structured problems containing compound probability terms.Extensions to problems with co-location and other, more general problem classes are discussed.Additional lower bounds as well as valid inequalities are proposed to significantly speed up overall solution time.Results demonstrate the efficiency of our linear model in comparison to existing problem formulations.

@&#KEYPHRASES@&#
Facility location,Reliability,Linearization,Probability chains,Probability flow networks,Valid inequalities,

@&#ABSTRACT@&#
In this paper, we propose an efficient technique for linearizing facility location problems with site-dependent failure probabilities, focusing on the unreliable p-median problem. Our approach is based on the use of a specialized flow network, which we refer to as a probability chain, to evaluate compound probability terms. The resulting linear model is compact in size. The method can be employed in a straightforward way to linearize similarly structured problems, such as the maximum expected covering problem. We further discuss how probability chains can be extended to problems with co-location and other, more general problem classes. Additional lower bounds as well as valid inequalities for use within a branch and cut algorithm are introduced to significantly speed up overall solution time. Computational results are presented for several test problems showing the efficiency of our linear model in comparison to existing problem formulations.

@&#INTRODUCTION@&#
In this paper, we consider the optimal location of unreliable facilities in a network. We propose a novel mixed integer linear programming (MILP) model for the unreliable p-median problem (Drezner, 1987; Berman et al., 2007). The objective of the model is to locate p facilities, any number of which may fail independently, so as to minimize the expected demand-weighted distance between customers and their closest operational facilities. A system-wide penalty is incurred if all facilities fail. In the general case, which we focus on here, facility failure probabilities are site-dependent.Our interest in such problems stems from the recognized need to design more robust service and supply networks that are resilient to the ill effects of random, short- to medium-term facility disruptions (Craighead et al., 2007). In practice, there are a wide variety of reasons why facilities can and do fail – common ones being equipment breakdowns, power outages, industrial accidents (e.g., fires), large natural disasters (e.g., earthquakes and hurricanes), disease outbreaks, work stoppages (i.e., labor strikes), and even malicious sabotage or attack (e.g., by terrorists). The effects of facility failures can sometimes be significant, resulting in major disruption to normal operations with high associated costs.A well documented example is the fire in 2000 at the Philips microchip factory in Albuquerque, New Mexico (Latour, 2001). The fire, which destroyed millions of chips used in the manufacture of mobile phones, had a significant impact on Nokia and, in particular, its competitor Ericsson, which were both supplied by the Philips factory. Short-term revenue losses for Ericsson were at least $400million. The long-term impact on Ericsson was even greater, ultimately contributing to an annual operating loss of $1.68billion.Other notable examples include the Tohoku–Kanto Earthquake and Tsunami that struck northeast Japan in 2011, causing an estimated $195–$305billion in physical damage alone (Nanto et al., 2011) to say nothing of the enormous human toll and longer-term economic impacts due to the ensuing nuclear crisis, electricity shortages, reduce manufacturing capacity and impairments to regional infrastructure; Hurricane Katrina, which hit the US Gulf Coast in 2005, causing major disruption to national oil and gas production (Cashell and Labonte, 2005); the SARS disease outbreak of 2003, which shutdown hospitals in Toronto, Canada (Berman et al., 2007); and the 2002 longshoremen’s strike along the US West Coast, which had a crippling effect on domestic and international shipping, costing an estimated $15.6billion to the US economy (Martin Associates, 2003).Hardening existing facilities can be an effective way of minimizing the risks associated with facility disruption (Scaparra and Church, 2008; Liberatore et al., 2011; Liberatore et al., 2012; Losada et al., 2012b). An alternative and oftentimes more robust approach is to find good initial location strategies. In this paper, we focus on the latter and restrict attention to random facility disruption as opposed to worst-case scenarios in which an interdiction type framework is commonly employed (e.g., O’Hanley and Church, 2011).Within the OR and location science literature, investigation into systematic methods for designing reliable facility networks goes back several decades. For the classical p-median problem (Hakimi, 1965) and related problems like the uncapacitated fixed-charge location problem (UFLP), a number of different models and solution approaches have been proposed.Drezner (1987) developed a heuristic to account for multiple, random facility disruptions in a p-median network when the probability of disruption is equal for all facilities. Snyder and Daskin (2005) use Lagrangian decomposition to optimally locate equally unreliable facilities for both the p-median problem and UFLP. Lim et al. (2010) extend work on the UFLP by considering the location of both reliable and unreliable facilities, which naturally differ in terms of cost.Berman et al. (2007) build upon Drezner (1987) and Snyder and Daskin (2005) by formulating an implicit nonlinear integer programming model of the unreliable p-median problem that allows for heterogeneous facility failure probabilities. The authors go onto explore key structural and asymptotic results of their model, focusing specifically on co-location effects associated with increasing failure probabilities, as well as the development of an efficient heuristic solution method with a proven worst-case error bound.Similarly, Cui et al. (2010) relax the assumption of equal failure probabilities for the UFLP. Importantly, the authors go a step further by presenting an exact linear formulation for the UFLP with unreliable facilities by employing the reformulation–linearization technique of Sherali and Alameddine (1992). To efficiently solve medium to large-sized instances, Lagrangian based algorithms as well as a continuous approximation model are proposed. The approximation model is further used to gain basic analytical insights into the problem. In Shen et al. (2011), alternative formulations of the UFLP with unequal failure probabilities are proposed, including a two-stage stochastic program and a nonlinear integer program. Heuristics are used to find near optimal solutions.Various other extensions of the unreliable p-median problem and UFLP have been considered as well. Continuous versions of the median problem, with facilities located either along a line or in a plane, are investigated in Lee (2001), Berman et al. (2007, 2010), Berman and Krass (2011), and Li and Ouyang (2010). The later three all deal with the case where facility failure probabilities may be correlated. Berman et al. (2009) examine the role that information plays in robust facility design, proposing a median type model in which customers do not have prior information about the operational status of facilities.Qi et al. (2010) investigate the design of an integrated supply chain, taking into account location, working inventory and transportation costs as well as the risk posed by supply disruptions. A linear formulation of the model is provided and solved using a Lagrangian based branch and bound algorithm. The authors show that considerable cost savings can be achieved by considering supply disruptions during the design phase as opposed to operational phase. A similarly structured problem is proposed by Aryanezhad et al. (2010), who further consider random customer demands and the cost of safety stock for avoiding possible stockouts. A genetic algorithm is developed to efficiently solve their nonlinear integer model.Considerable work on facility reliability has also been carried out within the context of covering type problems. Key work in this area includes backup or redundant coverage formulations (Hogan and ReVelle, 1986), the use of chance constraints (ReVelle and Hogan, 1989a; Marianov and ReVelle, 1996; Haight et al., 2000), and expected coverage models given both equal (Daskin, 1983; Saydam and McKnew, 1985) and unequal (Batta et al., 1989; Camm et al., 2002) facility failure probabilities. Further information on stochastic issues involved in facility location, including facility reliability, are discussed in reviews by Snyder et al. (2006), Snyder (2006) and Owen and Daskin (1998).Our present work extends Berman et al. (2007) and Cui et al. (2010) by proposing an exact linear reformulation of the unreliable p-median problem given unequal facility disruption probabilities. The problem is naturally represented in nonlinear form using high-degree polynomials to express probability products. We succeed in linearizing this model through the use of a specialized network flow structure, which we term a probability chain, in order to evaluate compound probability terms. The use of this technique is quite general and can be applied in a straightforward manner to other similarly structured problems, such as the maximum covering problem.Morton et al. (2007), as far as we are aware, were the first to employ a network flow structure to linearize probability products in the context of nuclear smuggling interdiction. One of our key aims here is to propose a novel way of constructing such networks. Moreover, as the computational results show, our approach produces much tighter problem formulations and, in turn, significantly reduced solution times compared to Morton et al. (2007).A further contribution of ours is the development of additional lower bounds and valid inequalities combined with lifting in order to efficiently solve medium to large problem instances. As we have found, problems reformulated using probability chains alone can result in rather weak linear relaxations, particularly for larger problem instances. The bounding constraints and valid inequalities suitably resolve this issue.The remainder of the paper is organized as follows. In Section 2 we begin by presenting a nonlinear formulation of the unreliable p-median problem and then show how it can be linearized through the introduction of probability chains. This is followed in Section 3 by extensions to the maximum expected covering problem, problems in which co-location is allowed, and even more general problem structures, including bilevel optimization models. In Section 4 we introduce some additional bounds to tighten our linear model. In Section 5 we propose families of valid inequalities that can be incorporated into a cutting plane algorithm. Computational results and key findings are covered in Section 6. Lastly, in Section 7, we end with some concluding remarks and recommendations for future work.In the following, we seek to locate a total of p unreliable facilities among n possible locations in order to minimize the expected demand weighted distance between a set of m customer demand points and their closest operational facility. In line with Berman et al. (2007), it is assumed that customers have prior information about the operational status of all facilities. If a facility is unavailable, customers must travel to the next closest operating facility. In the event that customers cannot be assigned to any facility (i.e., all fail), a system-wide penalty ϕ is incurred per unit demand.Formally, let I be the set of customers, indexed by i, and let J, indexed by j, be the set of potential facility locations, where m=∣I∣ and n=∣J∣. Further, let hirepresent the demand of customer i and let dijcorrespond to the distance between customer i and site j. Index ikis used to denote the kth closest facility to customer i. A facility located at site j is assumed to fail (not fail) with independent probabilityqj(q¯j=1-qj).Given the following set of location variables:xj=1ifafacilityislocatedatsitej0otherwisea nonlinear formulation of the unreliable p-median problem (UMP), equivalent to Berman et al. (2007), is given below.(1)UMP1min∑i∈Ihi∑k⩽ndiik∏ℓ<k1-q¯iℓxiℓq¯ikxik+ϕ∏ℓ⩽n(1-q¯iℓxiℓ)(2)s.t.∑j∈Jxj=p(3)xj∈{0,1}∀j∈Jwhere∏ℓ<0(·)=1by definition.For each customer i, the product∏ℓ<k(1-q¯iℓxiℓ)in objective (1) determines the probability customer i cannot receive service from any of its k−1 closest sites. Each expression1-q¯iℓxiℓ, ℓ⩽k−1, in this product equates to 1 if a facilities in not located at siteiℓ(xiℓ=0)orqiℓif a facility is located atiℓ(xiℓ=1). Hence, to receive service from a facility located at the kth closest location(xik=1), all facilities located closer than position ik(i.e., at sites iℓ, ℓ⩽k−1) must fail, while the facility at ikmust not fail, which occurs with probabilityq¯ik. Hence, the combined term∏ℓ<k(1-q¯iℓxiℓ)q¯ikxikin (1) gives the correct probability that customer i will receive service from its kth closest site. Similarly, the product∏ℓ⩽n(1-q¯iℓxiℓ)determines the probability that all facilities will fail. Constraint (2) requires exactly p facilities be located, while constraints (3) impose binary restrictions on the location variables.To reformulate UMP in linear form, we introduce the following auxiliary variables:yik=probability that customer i can be served by a facility located at the kth closest site (if no facility is located at ik, then yik=0)zik=probability that customer i cannot be served by facilities located among the k closest sites (if no facilities are located at any site iℓ, ℓ⩽k, then zik=1)The linear version of UMP is then given by:(4)UMP2min∑i∈Ihi∑k⩽ndiikyik+ϕzinsubject (2) and (3) and the following:(5)yi1+zi1=1∀i∈I(6)yik+zik=zi(k-1)∀i∈I,k=2,…,n(7)yik⩽q¯ikxik∀i∈I,k=1,…,n(8)yik⩽q¯ikzi(k-1)∀i∈I,k=2,…,n(9)yik,zik⩾0∀i∈I,k=1,…,nCorollary 1, based on Proposition 1 below, shows the equivalence between the nonlinear and linear versions of UMP.Proposition 1For constraint set(5)–(9), such that zik, k=1,…, n, is being minimized,zik=∏ℓ⩽k(1-q¯iℓxiℓ)andyik=∏ℓ<k(1-q¯iℓxiℓ)q¯ikxik.For k=1, constraints (5), (7) and (9) specify forxi1=0that yi1=0 and zi1=1, while forxi1=1thatyi1=q¯i1andzi2=qi1. In either case,yi1=q¯i1xi1andzi1=1-q¯i1xi1. More generally, assume thatzik=∏ℓ⩽k(1-q¯iℓxiℓ). Based on (6)–(9), we have yi(k+1)=0 andzi(k+1)=∏ℓ⩽k(1-q¯iℓxiℓ)forxi(k+1)=0, whileyi(k+1)=∏ℓ<k(1-q¯iℓxiℓ)q¯i(k+1)andzi(k+1)=∏ℓ⩽k(1-q¯iℓxiℓ)qi(k+1)forxi(k+1)=1. Regardless, we see thatyi(k+1)=∏ℓ<k(1-q¯iℓxiℓ)q¯i(k+1)xi(k+1)andzi(k+1)=∏ℓ⩽k(1-q¯iℓxiℓ)qi(k+1)xi(k+1). Since the two equations in question hold for k=1, they also hold by induction for k=2,…, n.□Model UMP2 is equivalent to UMP1.The proof immediately follows from Proposition 1.□Our linear reformulation of UMP is predicated on replacing the products of the xjbinary variables in (1) with continuous flow variables yikand zik, flow-balance constraints (5) and (6) and bounding constraints (7)–(9). Collectively, these variables and constraints form a specialized flow network for each customer i and serve to iteratively propagate probability terms across each site j in order of distance. We refer to this basic construct as a probability chain.Fig. 1provides an illustrative example of a single probability chain represented in graph form. The idea of forming a probability chain to evaluate compound probabilities like in (1) is actually quite general. As will be shown in the next section, this basic procedure can be applied to linearize other similarly structured problems.Our use of probability chains to linearize models like UMP is also noteworthy for being highly compact. Problem sizes grow polynomially with respect to the number of demand and location points only (i.e., parameters m and n, respectively). The model proposed in Berman et al. (2007) for the special case of equal facility failure probabilities (i.e., qj=q, ∀j∈J), in contrast, depends additionally on the number of facilities p. Compared to Cui et al. (2010), which can be easily modified to give an alternative linear formulation of UMP, model UMP2 is significantly more compact. The model in Cui et al. (2010) is based on the use of level assignments, which introduces a large number of variables (containing three indices) and a large number of constraints. Hence, whereas a linear model based on Cui et al. (2010) requires a total of O(mnp) binary variables, O(mnp) continuous variables and O(mnp) constraints, our model involves only O(n) binary variables, O(mn) continuous variables and O(mn) constraints.A closely related model to UMP is the maximum expected covering problem (MECP). As the name implies, the goal of MECP is to locate p unreliable facilities across a set of n potential locations in order to maximally cover (in an expected sense) m customer demand points. In addition to the notation introduced above for UMP, let Jibe the set of facilities covering customer i. Coverage of a particular demand point i is typically determined by a facility coverage radius R such that j∈Jiif dij<R, where parameters dijand R represent either distance or travel time. A nonlinear formulation of MECP given unequal failure probabilities, as presented in Camm et al. (2002), is given by:(10)MECP1min∑i∈Ihi∏j∈Ji(1-q¯jxj)subject to (2) and (3).The objective of MECP (10) is to minimize the expected amount of demand not covered by facilities. The product of the terms involving the xjvariables in (10) determines the probability that all facilities covering customer i will simultaneously fail. Specifically, if a facility is located at site j (xj=1), then the probability that i will not be covered by site j is qj, otherwise (xj=0) it is 1. Although framed as a minimization problem, the above model is equivalent to maximizing total expected coverage of demand points.To reformulate MECP in linear form, we first note that the ni= ∣Ji∣ locations covering a particular customer i can be ordered arbitrarily. With this in place, we redefine ik, k=1,…, ni, to be the kth site in set Jiand redefine variables yikand zikas follows:yik= probability that customer i can be covered by a facility located at the kth site in Ji(if no facility is located at ik, then yik=0)zik=probability that customer i cannot be covered by facilities located among the first k sites in Ji(if no facilities are located at any site iℓ, ℓ⩽k, then zik=1)The linear version of MECP, denoted MECP2, is then given by:(11)MECP2min∑i∈Ihizinisubject to (2), (3) and (5)–(9) but with n replaced accordingly by niin (6)–(9).In some situations, there exists the possibility of co-locating multiple facilities at the same site. Co-location is particularly beneficial when the risk of facility failure is comparatively high, in which case it often makes sense to provide backup service at certain critical sites that are centrally located among the demand points (Berman et al., 2007). As it turns out, probability chains can be extended in a straightforward way to deal with this important problem variant.To model co-location, we begin by defining new location variables xjrequal to 1 if r facilities are placed at site j, 0 otherwise. Assuming that up to p facilities can be located at a given site j, constraints (2) can be replaced with the following.(12)∑j∈J∑r⩽pxjr=p(13)∑r⩽pxjr⩽1∀j∈JTo continue, we let variable yirkbe the probability that customer i can be served (covered in the case of MECP) by at least one facility located at the kth closest site (kth site in Ji) when exactly r facilities have been located at site ik, 0 otherwise. Assuming facilities located at the same site j fail independently, constraints (5)–(9) can then be replaced with the following.(14)∑r⩽pyir1+zi1=1∀i∈I(15)∑r⩽pyirk+zik=zi(k-1)∀i∈I,k=2,…,n(16)yirk⩽1-qikrxik∀i∈I,k=1,…,n,r=1,…,p(17)yirk⩽1-qikrzi(k-1)∀i∈I,k=2,…,n,r=1,…,p(18)yik,zik⩾0∀i∈I,k=1,…,n,r=1,…,pIn terms of an underlying network structure, the extension of probability chains to problems involving co-location simply requires the addition of extra out-flow arcs, one for each yirkvariable, as demonstrated by the example shown in Fig. 2.It is important to point out that the models considered thus far (i.e., UMP and MECP and their co-location variants) all share a common goal – the minimization of facility failure probabilities. Our development of probability chains, in turn, has assumed that the zikvariables in constraint set (5)–(9) and (14)–(18) are being minimized as well. Taken more generally, we have restricted attention to the minimization of compound probability terms involving a set of xijbinary variables, i=1,…, n, j=1,…, mi, of the following basic form:minx∈Xzn=∏i⩽nai-∑j⩽mibijxijsuch that ai∈(0,1], ∀i, bij∈[0,1] and ai−bij∈[0,1], ∀i, j, and where X is a set of linear constraints on the vector of decision variablesx∈{0,1}∑i⩽nmithat includes∑j⩽mixij⩽1, for all i=1,…, n. Problems of this general type can be modeled using continuous variables yij⩾0, i=1,…, n, j=1,…, mi, and zi⩾0, i=1,…, n, and the following set of constraints, which we denote as a class I probability chain.(19)∑j⩽miy1j+z1=a1(20)∑j⩽miyij+zi=aizi-1∀i=2,…,n(21)yij⩽bijxij∀i=1,…,n,j=1,…,mi(22)yij⩽bijzi-1∀i=2,…,n,j=1,…,miOther problems besides UMP and MECP (and their co-location variants) which can be modeled using class I probability chains include Cui et al. (2010) and O’Hanley et al. (2007) (Appendix: (14)–(18)).For maximization problems, the probability chain needs to be modified slightly. Specifically, to model problems of the following basic form:maxx∈Xzn=∏i⩽nai+∑j⩽mibijxijsuch that ai∈[0,1), ∀i, bij∈[0,1] and ai+bij∈[0,1], ∀i, j, all that is required is that the signs of the yijvariables in constraints (19) and (20) be reversed, resulting in:(23)z1=a1+∑j⩽miy1j(24)zi=aizi-1+∑j⩽miyij∀i=2,…,nWe refer to (21)–(24) as a class II probability chain. Structurally, a class II probability chain differs from a class I chain in that the yijvariables represent in-flow arcs, as opposed to out-flow arcs (Fig. 3). Problems that fit this general structure include O’Hanley and Tomberlin (2005) and Losada et al. (2012a).We note that while the network structure employed in Morton et al. (2007) (Section 2, (2b)–(2f)) for linearizing compound probabilities is equally applicable to the problems we consider here, our formulation of class I and II probability chains is considerably stronger. This is due to the tight upper bounds (21) and (22) on the out-flow/in-flow yijvariables. As the computational results provided below confirm for UMP, this results in markedly reduced branching and solution times.We further note that the basic probability chain construct can be easily extended to handle even more general problems of the kind considered in Morton et al. (2007). Specifically, in Morton et al. (2007), the set of possibleai±∑j⩽mibijxijterms making up a compound probability are represented by nodes in a directed, acyclic graph with defined origin and destination nodes (i.e., a flow network). Feasible combinations of terms are determined by the arcs connecting individual nodes. Ultimately, the subset of terms which are active in a compound probability varies depending upon the selected path through the network (i.e., the evaluation of a compound probability is path-dependent). Such problems can be appropriately modeled through the use of probability flow networks (Fig. 4), a natural extension of probability chains, in which multiple paths exist between the origin and destination nodes in the network as opposed to just one, unique path.Formally, assume we are given a flow network G=(V,E) with node set V and arc set E. Let ℓ and k be indices for the nodes in V and let s and t denote the origin and destination nodes, respectively. We define a flow propagation variable zℓk⩾0 for each arc (ℓ,k) in E. Further, let FS (ℓ) denote the set of arcs entering node ℓ and RS(ℓ) the set of arcs leaving node ℓ. For given values of xℓj∈{0,1}, ℓ∈V, j=1,…, mℓ, such that∑j⩽mℓxℓj⩽1,∀ℓ∈V, the compound probability π involving a subset of termsaℓ-∑j⩽mℓbℓjxℓjfor which there is a feasible path through network G is determined by:(25)∑j⩽msysj+∑(s,k)∈FS(s)zsk=as(26)∑j⩽mℓyℓj+∑(ℓ,k)∈FS(ℓ)zℓk=aℓ∑(k,ℓ)∈RS(ℓ)zkℓ∀ℓ∈V⧹{s,t}(27)∑j⩽mtytj+π=at∑(k,t)∈RS(k)zkt(28)yℓj⩽bℓjxℓj∀ℓ∈V,j=1,…,mℓ(29)yℓj⩽bℓj∑(k,ℓ)∈RS(ℓ)zkℓ∀ℓ∈V⧹{s},j=1,…,mℓwith variables yℓj⩾0 representing additional out-flow arcs (not contained in E), one for each xℓj,∀ℓ∈V, j=1,…, mℓ. As before, for compound probabilities involving a subset ofaℓ+∑j⩽mℓbℓjxℓjterms, the signs of yℓjin constraints (25)–(27) simply need to be reversed. Accordingly, the yℓjvariables represent in-flow arcs in this case.The most natural situation in which a probability flow network arises is in the context of leader–follower or static Stackelberg games (Simaan and Cruz, 1973). Such problems are most often formulated as bilevel min–max or max–min optimization models. Here, the x variables are typically assigned by the leader, the y and z flow variables assigned by the follower. In the problem considered by Morton et al. (2007), the upper level determines the location of sensors for a leader who wants to maximize the detection of a nuclear smuggler (evader), while the lower level defines the path of an evader who wants to minimize his probability of detection whilst traveling through a transport network.Probability flow networks are thus applicable to problems of the following general formminx∈Xmaxu∈Uπ=∏ℓ∈V(aℓ-∑j⩽mℓbℓjxℓj)uℓandmaxx∈Xminu∈Uπ=∏ℓ∈V(aℓ+∑j⩽mℓbℓjxℓj)uℓ, where variable uℓ equals 1 if the termaℓ±∑j⩽mℓbℓjxℓjis included in the product, 0 otherwise, X defines a set of linear constraints on the upper-levelx∈{0,1}∑ℓ∈Vmℓvariables that includes∑j⩽mℓxℓj⩽1,∀ℓ∈V, and U defines a set of linear constraints on the lower-level decision variables u∈{0,1}∣V∣ that represent feasible combinations of probability terms as determined by available paths in network G. Note that Morton et al. (2007) conforms to the former of the two.For max–min and min–max models in which there exists a single path from origin to destination in network G, specialized probability chains can be devised. For min–max problems given byminx∈Xmaxzn=∏i⩽nai-∑j⩽mibijxij, constraints (19) and (20) can be combined with:(30)y1j⩾b1jx1j∀j=1,…,mi(31)yij⩾bijzi-1+xi-1∀i=2,…,n,j=1,…,miFor max–min problems defined asmaxx∈Xminzn=∏i⩽n(ai+∑j⩽mibijxij), meanwhile, constraints (23), (24), (30) and (31) are sufficient. This leads to two other classes of probability chains: class III defined by (19), (20), (30) and (31) and class IV defined by (23), (24), (30) and (31). On the downside, constraints (30) and (31) are not as tight as (28) and (29), which reduce to (21) and (22) in the case of single-path problems. Hence, class III and IV chains are not as strong as equivalent two-stage probability flow networks. On the other hand, class III and IV chains have a distinct advantage over two-stage probability flow networks in that the compound probability terms can be determined using a single-level formulation involving the minimization or maximization of zn, respectively.Based on preliminary testing, solution of UMP2 resulted in somewhat weak linear relaxations. In order to tighten our formulations, we introduce some lower bounds on the zikdecision variables as described below.The first set of lower bounds we introduce on the zikvariables are derived from Camm et al. (2002). To begin, letJik>0be the set of sites j such thatqiℓ>0, ℓ⩽k, and letJik=0be the set of sites j such thatqiℓ=0, ℓ⩽k. An alternative for evaluating zikis given by:(32)zik⩾θik-∑j∈Jik=0xj∀i∈I,k=1,…,n(33)θik=∏j∈Jik>0qjxj∀i∈I,k=1,…,nSince θikis strictly positive, we can take the logarithm of both sides of (33) giving us:(34)lnθik=∑j∈Jik>0ln(qj)xj∀i∈I,k=1,…,nEquality (34), in turn, can be approximated by a piecewise linear curve as described in Bradley et al. (1977). Letting btbe the value of the tth break-point, t=1,…, T, along the curve θikversus ln θikand letting variable λikt⩾0 be the weight assigned to the tth break-point we find:(35)zik⩾∑t⩽Tbtλikt-∑j∈Jik=0xj-ε∀i∈I,k=1,…,n(36)∑t⩽Tln(bt)λikt=∑j∈Jik>0ln(qj)xj∀i∈I,k=1,…,n(37)∑t⩽Tλikt=1∀i∈I,k=1,…,nThe term ε is the worst-case error for the linear approximation of ln θik. For a fixed number of breakpoints, ε can be minimized by adjusting the values of bt(see Camm et al., 2002 for details). For the results reported below, we used a total of T=24 breakpoints to represent each piecewise linear curve, yielding a maximum error of ε=0.001.A straightforward implementation would be to add (35)–(37) to UMP2 for all indices i and k. This obviously provides the tightest possible bounds but can lead to lengthy solution times for larger problems due to the additional time needed to solve each node in a branch and bound tree. Initial testing confirmed this. Initial tests also showed that solution times could be significantly reduced by only adding bounds (35)–(37) for the closetkI∗sites (i.e., fork=1,…,kI∗instead of k=1,…,n).To further strengthen UMP2, we introduce additional lower bounds on the zikvariables that are particularly effective when qj≈q for every site j. These bounds are generalizations of Daskin (1983). For a given customer i, imagine that w⩽k facilities have been located among its k closest sites. A lower bound on the probability that customer i will not receive service from any of its k closest sites (i.e., zik), is given by:zik⩾Qikw=∏s⩽wq[s](i,k)whereq[s](i,k)denotes the sth smallest failure probability for customer i among its k closest sites. Noting that Qik0=1 andΔQiks=Qiks-Qik(s-1)=∏ℓ<sq[ℓ](i,k)(q[s](i,k)-1), the term on the right-hand side above can be expanded as follows.zik⩾1+∑s=1wΔQiksLetting ψiks, k=1,…, n and s=1,…, min{k,p}, equal 1 if at least s facilities are located among the k closest sites to customer i, 0 otherwise, the inequality above leads in a natural way to the following lower bound on zik.(38)zik⩾1+∑s⩽min{k,p}ΔQiksψiks∀i∈I,k=1,…,n(39)∑s⩽min{k,p}ψiks=∑ℓ⩽kxiℓ∀i∈I,k=1,…,nNote that since ∣ΔQiks∣>∣ΔQik(s+1)∣, the ψiksvariables will automatically satisfy the requirement that for a particular customer i serviced by s facilities, variables ψik1 to ψiksmust equal 1, while variables ψik(s+1) onward must equal 0. Hence, no additional constraints besides (39) are needed to enforce binary restrictions or precedence on the ψiksvariables. As with the previous set of bounds on UMP2, initial testing showed that solution times could be significantly reduced by only including constraints (38) and (39) for sites k up to a preset maximumkII∗.The problem structure of UMP2 favors solutions with small values of zikand large values of yik. For a solution to the relaxed problem withxikfractional, the value yikbecomes inflated relative to what it should be according to (1). Conversely, zikis biased downward. The valid inequalities presented below work to drive up the value of zikand drive down the value of yikcloser to their exact values (i.e., based on Eqs. (40) and (44) given below) and can be used within a branch and cut framework to solve any problem based on constraint set (5)–(9).According to Proposition 1, we know that:(40)zik=∏ℓ⩽k(1-q¯iℓxiℓ)Given a feasible binary solutionxˆ∈{0,1}nsatisfying (5)–(9), let setAcontain the indices iℓ, ℓ<k, such thatxˆiℓ=1, and letBcontain the indices iℓ,ℓ<k, such thatxˆiℓ=0. Forxˆik=0, Eq. (40) implies the following.(41)zik⩾∏iℓ∈AqiℓGeneralizing (41) for any arbitrary solution x∈{0,1}nrequires down-lifting thexiℓvariables, ℓ<k, fixed at 1 and up-lifting thexiℓvariables, ℓ⩽k, fixed at 0 (i.e., the variables in setsAandB∪{ik}, respectively). Specifically, we would like to lift (41) in order to derive a valid inequality of the form:(42)zik⩾Q+∑iℓ∈Aαiℓ(1-xiℓ)+∑iℓ∈Bβiℓxiℓ+γxikwhereQ=∏iℓ∈Aqiℓ, A⊆Fik={iℓ∈J∣ℓ<k} is any subset of the indices iℓ, ℓ<k, withxiℓimplicitly fixed at 1 and B=Fik⧹A is the subset of indices, ℓ<k, with variablesxiℓimplicitly fixed at 0.Computing the coefficients in (42) is nontrivial. In general, for a given lifting sequence such that rnk (iℓ) is the “rank” or position of site iℓ within the sequence, finding the maximum value of coefficientciℓfor variablexiℓrequires solving:(43)maxciℓ=∏is∈Arnk(is)>rnk(iℓ)qis∏is∈Fik∪{ik}rnk(is)⩽rnk(iℓ)(1-q¯isxis)-Q-∑is∈Arnk(is)<rnk(iℓ)αis(1-xis)-∑is∈Brnk(is)<rnk(iℓ)βisxis-vγxikover all feasible permutations of thexisvariables, rnk(is)<rnk(iℓ), such that v=1 if rnk(ik)<rnk(iℓ), 0 otherwise,xiℓ=0forciℓ=αiℓandxiℓ=1forciℓ=βiℓor γ. Note that this problem is nonlinear.Proposition 2 below provides a set of coefficient values that are sufficient to make (42) valid for constraint set (5)–(9). Its proof is given in Appendix A. Although not necessarily the optimal choice according to (43), use of the values in Proposition 2 avoids the need to solve (43) by complete enumeration for each coefficientciℓ.Proposition 2For any site ikand lifting sequence of the sites i1,…, ik, letA(>iℓ)={is∈A|rnk(is)>rnk(iℓ)}and letB∼(<iℓ)={is∈B∪{ik}|rnk(is)<rnk(iℓ)}. Given the following set of values, inequality(42)is valid for(5)–(9).αiℓ=Qqiℓ∏is∈B∼(<iℓ)qisq¯iℓβiℓ=-∏is∈A(>iℓ)qisq¯iℓγ=-∏is∈A(>ik)qisq¯ikTo further strengthen the formulation, we introduce an additional family of valid inequalities for the yikvariables as follows. From Proposition 1, we know that:(44)yik=∏ℓ<k(1-q¯iℓxiℓ)q¯ikxikwhich for a given solutionxˆ∈{0,1}nsatisfying (5)–(9), implies forxˆik=1that:(45)yik⩽∏iℓ∈Aqiℓq¯ikwhere again setAcontains the indices iℓ, ℓ<k, such thatxˆiℓ=1. Using the same notation in (42), the natural generalization of (45) is an inequality of the form:(46)yik⩽Qq¯ik+∑iℓ∈Aαiℓ′(1-xiℓ)+∑iℓ∈Bβiℓ′xiℓ+γ′(1-xik)Solving for the coefficients in (46) takes on a structure similar to (43).For any site ikand lifting sequence of the sites i1,…, ik, letA(>iℓ)=is∈A|rnk(is)>rnk(iℓ)and letB(<iℓ)={is∈B|rnk(is)<rnk(iℓ)}. Given the following set of values, inequality(46)is valid for(5)–(9).αiℓ′=q¯ik∏is∈A(>iℓ)qisq¯iℓβiℓ′=-Qq¯ik∏is∈B(<iℓ)qisq¯iℓforrnk(iℓ)<rnk(ik)0otherwiseγ′=-Qq¯ik∏is∈B(<ik)qisFor k⩽2,Propositions 2 and 3yield facet defining inequalities.Proposition 3 above provides coefficient values that make (46) generally valid. Its proof is provided in Appendix A as is the proof for Corollary 2 above showing the conditions under which Propositions 2 and 3 yield facet defining inequalities.As an example of how Propositions 2 and 3 can be used to generate valid inequalities, consider the following. Imagine for a particular customer i that facility failure probabilities for the first 5 locations are given by(qi1,…,qi5)=(0.1,0.15,0.05,0.12,0.2). Given the (partial) fractional solution(xˆi1,…,xˆi5)=(1,0.01,0.97,0.001,0.05), one would obtain based on constraint set (5)–(9) vectors(yˆi1,…,yˆi5)≅(0.9, 0.0085, 0.0869, 0.0009, 0.003) and(zˆi1,…,zˆi5)≅(0.1,0.0915,0.0046,0.0037,0.0007).Now for ik=i5, let A={i1,i3} and B={i2,i4}. Accordingly,Q=qi1qi3=0.005. Given the following lifting order {i1,i2,i4,i5,i3}, we find based on Proposition 2 that:αi1=Qqi1q¯i1=0.045,αi3=Qqi3qi2qi4qi5q¯i3=0.00171,βi2=-qi3q¯i2=-0.0425,βi4=-qi3q¯i4=-0.044andγ=-qi3q¯i5=-0.04, which yields the following valid inequality.zi5⩾0.05171-0.045xi1-0.0425xi2-0.00171xi3-0.044xi4-0.04xi5The incumbent solution(xˆ,yˆ,zˆ)violates this constraint sincezˆi5=0.0007≱0.0026and thus would be cut off if the inequality were added to the LP relaxation.For lifting order {i1,i2,i3,i4,i5}, Proposition 3 would yield for ik=i5, A={i1,i3} and B={i2,i4}:αi1′=q¯i5qi3q¯i1=0.036,αi3′=q¯i5q¯i3=0.76,βi2′=-Qq¯i5q¯i2=-0.0034,βi4′=-Qq¯i5qi2q¯i4=-0.000528andγ′=-Qq¯i5qi2qi4=-0.000072. The resulting valid inequality,yi5⩽0.799928-0.036xi1-0.0034xi2-0.76xi3-0.000528xi4+0.000072xi5does not cut off the incumbent solution(xˆ,yˆ,zˆ)sinceyˆi5=0.003⩽0.0267. The lifting order {i5,i4,i3,i2,i1}, on the other hand, yields:αi1′=q¯i5q¯i1=0.72,αi3′=q¯i5qi1q¯i3=0.076,βi2′=βi4′=0,γ′=-Qq¯i5=-0.004and following valid inequality,yi5⩽0.796-0.72xi1-0.076xi3+0.004xi5which does cut off the incumbent solution(xˆ,yˆ,zˆ)sinceyˆi5=0.003≰0.0025.In what follows, we refer to the first valid inequality (42) as VI-1 and to the second valid inequality (46) as VI-2. In our implementation, we used a very simple procedure to solve the separation problem for finding violated inequalities. For each customer i, we started with position k=2 and then successively incremented k until we found the first violated VI-1 constraint given a pre-defined lifting order (see below). Intuitively, VI-1, as well as VI-2, is most effective when set A contains allxiℓvariables with values close to 1. Accordingly, for any given position k, we partitioned set A to include the indices iℓ, ℓ<k, such thatxiℓ⩾0.98. The same basic procedure was repeated to find violated VI-2 inequalities. Valid inequalities were added at the root node as well as all branch nodes.We considered a number of simple, pre-defined lifting orders for VI-1 and VI-2. Preliminary tests showed that especially strong cuts could be generated for VI-1 by first lifting site ik, followed by all sites iℓ∈B, and then sites iℓ∈A (same as B→ik→A). LettingQ′=∏iℓ∈Bqiℓ, this resulted in a cut of the following basic form.(47)zik⩾Q+QQ′qik∑iℓ∈Aq¯iℓqiℓ(1-xiℓ)-Q∑iℓ∈Bq¯iℓxiℓ-Qq¯ikxikFor VI-2, best performance was found by initially lifting ik, which caused theβiℓ′coefficients to drop out, followed by sites iℓ∈A. The sites in A for a given index k were lifted arbitrarily in order of increasing distance from ik. This resulted in a cut of the following basic form.(48)yik⩽q¯ik∑iℓ∈A∏is∈A|diis<diiℓqisq¯iℓ(1-xiℓ)+Qq¯ikxik

@&#CONCLUSIONS@&#
