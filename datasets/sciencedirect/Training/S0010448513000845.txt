@&#MAIN-TITLE@&#
Global obstacle avoidance and minimum workpiece setups in five-axis machining

@&#HIGHLIGHTS@&#
Classification of different types of obstacles encountered in five-axis NC machining.Efficient numerical algorithms on how to represent dynamic obstacles.Efficient computing of feasible regions considering all types of obstacles.A heuristic optimization algorithm for finding the best workpiece setup.A thorough analysis of both static and dynamic obstacles.

@&#KEYPHRASES@&#
Five-axis NC machining,Accessibility,Workpiece setup,V-map,F,I,-map and,F,II,-map,Tool path generation,

@&#ABSTRACT@&#
The state-of-the-art tool path computation algorithms for five-axis machining consider only the workpiece and clamping device for collision avoidance. However, in a real five-axis machining process, there are many other types of obstacles beyond workpiece and clamps that the tool assembly must avoid, e.g., sensors and other intrusive devices. In such cases, the only solution at present is by means of computer simulation of the machining process after the tool path has been computed. If collision is found, it requires re-computing the tool path and/or changing the setup of the workpiece. This process is then re-iterated until all the collisions are resolved. As a result, the process is time consuming and requires excessive human intervention. In this paper, we present rigorous analyses of the obstacles in five-axis machining and propose efficient numerical algorithms for calculating and representing them. Using our results, the obstacle-free tool orientations can be determined completely at the tool path planning stage, rather than relying on the simulation afterward. In addition, as a direct application of our mathematical modeling, we present a heuristic-based solution to the optimal workpiece setups problem: finding a minimum number of workpiece setups for an arbitrary sculpture part surface so that it can be machined completely on a given five-axis machine without colliding with the obstacles. We use orthogonal table–table five-axis machines as an example and work out a numerical experiment using the proposed solution.

@&#INTRODUCTION@&#
Five-axis machining enjoys tremendous advantages over traditional three-axis machining, including larger range of tool accessibility, faster material removal rate, better surface finishing quality, and so on. It is especially suitable for machining parts with high precision sculptured surfaces such as aircraft structure parts, turbine blades, propellers and impellers, molds and dies, etc. In five-axis machining, at the tool path planning stage, when determining the tool orientation for the tool to contact any particular point on the part surface, the minimum yet also the most critical condition is that the tool must avoid the obstacles during the entire machining process.Before any further discussion, it is imperative to give a clear classification of the obstacles encountered during a five-axis machining operation, as follows.Type  0 Obstacle(Obs0): The obstacle is part of the workpiece, including the part surface itself or in-process geometry model of the workpiece.Type  1 Obstacle (ObsI): The obstacle is attached to or fixed on the machine table (e.g., clamps and fixtures). Once the workpiece is set up on the machine table, anObsIcan be considered the same as anObs0.Type  2 Obstacle (ObsII): The obstacle is attached to or fixed on the machine’s base (e.g., sensors of the drive system).Obs0is static with respect to the part surface, since it is defined on the workpiece, and it is the most common obstacle type.ObsIandObsIIare those defined on the table and on the machine’s base, respectively. They are usually the clamps, the online measurement devices and some ancillary pieces of equipment used in the machining process.ObsIandObsIIdo exist in the machining process. However, they are both ignored in almost all the existing tool path generation algorithms. Specifically, current five-axis tool path generation algorithms bear the following two major caveats:(1)When deciding the obstacle-free orientations of the tool, only static obstacles (i.e.,Obs0) are considered, leaving bothObsIandObsIIunattended.The relative orientation and position of the part surface (i.e., the setup of the workpiece) on the machine table are usually disregarded.The fact that onlyObs0is considered when deciding the tool orientations causes two serious problems. First, sinceObsIis not considered, after the workpiece is mounted and clamped on the machine table, some originally collision-free tool axes at some contact points may now collide with theObsI. The second, which occurs during the machining process and is perhaps more troublesome, is that the tool assembly, according to an originally assigned tool axis, will either collide with theObsIIor the required machine table rotation angles are out of the working ranges of the rotary axes. At present, the only solution to both these two is by means of computer simulation of the machining process after the tool path has been computed. If collision or out-of-range is found, it requires re-computing the tool axes and/or changing the setup of the workpiece. This process is then re-iterated until all the collisions are resolved. As a result, the process is time-consuming and requires excessive human intervention.Since bothObsIandObsIIvary (with respect to the part surface) depending on how the workpiece is set on the machine table, the workpiece setup problem itself is integrally related to the general global obstacle avoidance problem. Different workpiece setups on the machine table bring different tool accessibility and multiple setups may be required to cover the whole part. Generally speaking, when machining a part, fewer workpiece setups means less auxiliary time and less errors resulting from the remounting and recalibrating operations. Therefore, finding the minimum number of setups for a given workpiece (ideally only a single one) has great significance in five-axis machining.Motivated by the above two problems and also the related workpiece setup problem, this paper has set forth two objectives: (1) to establish a rigorous classification of the algebraic structures of obstacles of all the three types and then propose efficient numerical algorithms for calculating and representing them; and (2) as a direct application of (1), to devise an optimization algorithm that will find a minimum number of workpiece setups for machining a given sculpture surface, attending to all the three types of obstacles.While past works pertaining to the first objective are scarce, the minimum workpiece setup problem has drawn a great deal of attention over the last two decades. Past works primarily have been focusing on the calculation of static Visibility Maps (V-map) and finding the relationship between theV-maps, the (set of) Tool Access Directions (TAD), and feasible tool orientations in tool path generation, to be reviewed next.Previous works in workpiece setup focus on different objectives. For the dynamic error reduction problem, Anotaipaiboon et al.  [1] minimized the kinematics errors by choosing an appropriate workpiece setup, and the optimization process is carried out by the least square method. While considering the design specification of the part, Zhang et al.  [2] used the tolerance analysis chart to get the optimal workpiece setup from the perspective of tolerance control. Contini and Tolio  [3] investigated and analyzed the machining requirement before generating a workpiece setup plan in the machining process. For the problem of accessibility and minimal number of workpiece setups, Radzevich and Goodman  [4] utilized the Gaussian map (G-map) of the part surface and the cutting surface of the cutter, taking both the number of setups and the optimal cutting condition into consideration, to determine the optimal workpiece orientation on the table; Gupta et al.  [5] used the concept of geometric duality and proposed a greedy heuristic method to find the optimal workpiece orientation which maximizes the number of (polygonal) faces machined in a single setup; Tang et al.  [6–8] conducted a series of works in finding the minimal number of workpiece setups for four-axis machining. However, all these works in accessibility and the minimum workpiece setup problem ignored the obstacles on the machine table and machine’s base; in other words, they can only treat static obstacles. There are also works done in workpiece setup for other purposes. Lee et al.  [9] proposed a manufacturability evaluation method and built a software module for the workpiece setup analysis for three, four and five axis machines; Kang and Suh  [10] gave a brute-force based method for finding a workpiece setup on theA–Btype andC–Atype five-axis machines that would minimize the maximum rotation angles ofA–B, orA–Caxis; Hu and Tang  [11] incorporated the workpiece setup into the kinematics chain of a five-axis machine, and improved the dynamics of machine’s rotary axes by finding the optimal workpiece setup; Cai et al.  [12] proposed an adaptive method for the setup planning in the machining of prismatic parts.TAD is the set of feasible tool orientations provided by the machine in the workpiece coordinate system (WCS), which is decided by the travel ranges of the machine’s rotary axes and can be represented by a great arc or spherical area on the Gaussian sphere (G-sphere) in four-axis or five-axis machining, respectively. In the existing works, Tang et al.  [6–8] divided the TAD of four-axis machining, i.e. a great arc, into three types according to the travel range of the rotary axis; Woo  [13] classified the TAD with different degrees of freedom (DOFs) into a great arc or spherical area on the G-sphere; Kang and Suh  [10] classified the TAD of five-axis machining into two types ofC–AandA–Baccording to the configuration of the machine’s two rotary axes, and further work by Cai et al.  [12] tested the effectiveness of such a division of TAD in a five-axis machine.For each point on the part surface, theV-map is the set of collision-free orientations of the tool on the G-sphere defined in the WCS. The notion of theV-map was introduced by Chen et al.  [14] and Woo  [13], deriving from the definition of the G-map. In the existing research, theV-map was usually calculated as part of the work in the planning of the collision-free tool path  [15–19]. Wang and Tang  [20] proposed a fast iterative method of calculating theV-map. Based on the continuity property of theV-map on smooth surfaces, they calculated theV-map of one point by taking its neighboring points as the references and proposed a boundary tracking algorithm to calculate theV-map for the entire surface. Elber proposed an algorithm to calculate theV-map of external obstacles with the restriction of tool orientation along the surface normal  [21], and later, he proposed another global solution to extend the method for the case of arbitrary tool orientations  [22]. Lacalle  [23] analyzed the issues in theV-map, and pointed out that the interference between the tool and fixture on the machine table and base was still an unsolved problem in the CAM system. Again, in all these works, only static obstacles are considered.AugmentingV-maps, some other types of constraints, which are equally important in tool path generation, have been added to further restrain or guide the tool orientation. Gong and Wang  [24] took the ball-end machined surface as a constraint for bounding the tool orientation in flank milling. Castagnetti et al.  [25] introduced the concept of Domain of Admissible Orientation (DAO) to restrain the allowable tool orientations at each CC point, which is defined according to the functional constraints specified by the machining requirements, and the tool orientation smoothing is carried out in the DAO. Hu and Tang  [11] defined the Domain of Geometrical Constraint (DGC) for the tool orientation based on the variation of the effective cutting radius in the iso-parametric tool path, and tool orientation smoothing for the dynamics of machine’s rotary axis was then carried out within the DGC. Considering the local geometry constraints of the surface,  [26–29] restricted the tool orientation in the local gouging-free region and carried out optimizations for different purposes. Lasemi et al.  [30] presented a comprehensive summary of the tool path generation algorithms in five-axis machining, together with a variety of constraints for the tool orientation.This paper is organized as follows. In Section  2, rigorous mathematical models of the minimum workpiece setup problem withObs0only and with all the three–Obs0,ObsIandObsII–are established, respectively. A brief description about how to compute aV-map is given in Section  3. In Sections  4 and 5, two important algebraic structures called Forbidden Map Type 1 (FI-map) and Forbidden Map Type 2 (FII-map) are introduced, which cater toObsIandObsII, respectively. In Section  6, we present our heuristic optimization algorithm for the minimum workpiece setups problem. Finally, in Section  7, we present a preliminary computer simulation experiment, followed by the summary.Throughout this paper, without loss of generality, we exclusively focus on orthogonal table–table five-axis machines—namely, the machine with two rotary axesAandCon the table, and three linear axes(XYZ)of the tool, as shown in Fig. 1.The workpiece setup on the table can be defined by a 6-tuple vector:(1)setup=(a,b,c,φ,θ,ψ)where:setupI=(a,b,c)is the first part ofsetup, which represents the position of the origin of the WCS, e.g.,owin Fig. 1, in the Table Coordinate System (TCS); whilesetupII=(φ,θ,ψ)is the second part ofsetup, which is composed of three Euler angles and represents the orientation of the WCS in the TCS. The details of the transformation can be found in  [11].As already stated, the TAD represents the range of tool orientations on the G-sphere in the WCS. From  [6,10], it is known that, with the specification of the ranges ofAandCaxis, the TAD is a function of(φ,θ,ψ)only, which can be expressed as:(2)TAD=f(setupII).To algebraically define the TAD, we will use as an example the orthogonal table–table five-axis machine in Fig. 1, in which the orientation of the toolTMis fixed in the MCS, i.e.,TM=[0,0,1]. With the specification of the range of (A,C), for exampleA∈[−2π/9,2π/9]andC∈[−π,π],TMforms a region on the G-sphere in the TCS:(3)[TT,0]T=Rot(z,−C)∗Rot(x,−A)∗[TM,0]T.Expanding Eq. (3) yields:(4)TT=(sin(A)sin(C)sin(A)cos(C)cos(A)).From Eq. (4), it is apparent that the TAD in the TCS is generated by revolving an arcχabout theztaxis with a revolving angleC, as illustrated in Fig. 2(a), andχis expressed as:χ=[0,sin(A),cos(A)],A∈[−2π/9,2π/9].After revolvingχabout theCaxis for2π, the TAD in the TCS is the double of the cap region on the G-sphere (Fig. 2(a)). This cap then is transformed to the WCS, as shown in Fig. 2(b):(5)[TW,0]T=TT→W∗[TT,0]Twhere:TT→Wis a function of the setup, representing transformation from the TCS to the WCS, and its exact definition will be left till Section  4 (Eq. (11)). Apparently, with the change of setup (Eq. (1)), only the center of the TAD moves around on the G-sphere in the WCS, with its shape and area unchanged.AV-map is the mapping of directions in the visibility cone (V-cone) (which considersObs0only) on the G-sphere, also in the WCS. For each point on the workpiece, there is a V-cone and a correspondingV-map on the G-sphere, as illustrated in Fig. 3. Because onlyObs0is considered,V-maps are static on the G-sphere of WCS, independent of workpiece setups.For all the sample points on the part surface, theirV-maps are defined and calculated on the same G-sphere, and the tool accessibility of any point is represented by the intersection between itsV-map and TAD, per Eq. (5). For example, in Fig. 3(b): in this particular setup, the corresponding TAD intersects theV-maps ofp1,p2andp4(i.e.V1,V2andV4), but not that ofp3, meaning thatp3is inaccessible in this setup.Note that in the above analysis TAD and all theV-maps are mapped onto the G-sphere in the WCS. The reason for this lies in the fact that there are in general a large number of sample points on the part surface which is defined in the WCS, but only one TAD defined in the Machine Coordinate System (MCS). It is much more computationally efficient to convert one TAD to the WCS than to transform hundreds or thousands ofV-maps to the MCS. For the same reason, hereafter all our accessibility checks will be carried out in the WCS.It becomes clear that if onlyObs0is considered, in a given setup, the obstacle-free tool orientations for any point on the part surface are exactly the intersection between the TAD (per Eq. (5)) and theV-map of that point. WhenObsIandObsIIare considered, however, things become much more complicated.Let us start with the analysis of the kinematic chain of the machine in Fig. 1, as depicted in Fig. 4. In the left branch of the chain, the table of the machine is mounted on the machine’s base, with two DOFs, i.e., rotary axesAandC, and the workpiece is mounted on the table with the relative position and orientation defined by the setup, whereas in the right branch of the chain, the tool can move with three DOFs along thex,yandzaxes. In the kinematic chain,H1andH2are theObsIandObsIIfixed in the machine’s table and machine’s base, respectively.ObsI, e.g.,H1in both Figs. 1 and 4, is defined in the TCS and fixed on the machine table. From Fig. 4 it is seen that the setup is the only chain between the workpiece andH1. Suppose that the geometric entities (such as vertices and vectors) ofH1defined in the TCS are represented byMH1T, the mapping ofH1from the TCS to the WCS gives:(6)MH1W=TT→W∗MH1Twhere:MH1Wrepresents the geometric entities ofH1defined in the WCS;TT→Wis a function of setup, to be defined later (by Eq. (11)).For any setup, the whole or part of aV-map can be obscured byH1in the WCS, which will be called the Forbidden Map I (FI-map). To reflect this obstruction on the G-sphere, theV-map must be eclipsed by theFI-map.From Eq. (6),MH1Wis a function of setup. Different setups will have differentMH1W, and hence differentFI-maps on the G-sphere. ForH1, bothsetupIandsetupIIcan affect theFI-map.ForObsII, e.g.,H2in both Figs. 1 and 4, we observe that, asH2is defined in the MCS and fixed on the machine base, the kinematic chain between the workpiece andH2is made of both setup and the two rotary axesAandC. LetMH2Mrepresent the geometric entities ofH2in the MCS, transforming it from the MCS to the WCS gives:(7)MH2W=TT→W∗TM→T(A,C)∗MH2Mwhere:MH2Wrepresents the geometric entities forH2in the WCS,TT→Wis the same as that in Eq. (5), andTM→T(A,C)is a matrix representing the forward kinematics for two rotary axesAandC.From Eq. (7),MH2Wis also a function of setup. Similar toObsI, there will also beFII-maps forH2and, for the same reason, bothsetupIandsetupIIwill affectFII-maps on the G-sphere in the WCS.In the presence ofObsIandObsII, aV-map is eclipsed by both itsFI-map andFII-map. We then define another map on the G-sphere in the WCS, the Global Visibility Map (Vg-map):(8)Vg-map=V-map−FI-map−FII-map .In Fig. 5(a), an example of aV-map, aFI-map and aFII-map is shown, and Fig. 5(b) shows its finalVg-map. In Eq. (8), theV-map is static, but not theFI-map and theFII-map, both of which are functions of setup. Consequently, theVg-map is also a function of setup.Therefore, withObsIandObsIIadded, the final set of obstacle-free tool axes for any point on the part surface should be the intersection between theVg-map of the point and the TAD, both of which depend on the workpiece setup. It is clear that on a globally gouging-free tool path, the tool orientation should always be bounded inside theVg-map with any particular setup. In the following three sections, algorithmic methods for computing theV-map,FI-map, andFII-map will be proposed, respectively.For the part surface as well as any obstacles or fixtures that are static with respect to the part (together they form the workpiece), they are first sampled into triangles withnnodes, which will be the sample points for checking the tool accessibility. For example, shown in Fig. 6(a) is the upper part of a car seat, and in Fig. 6(b) is the corresponding triangulation with the nodes as the sample points. Since these nodes are uniformly sampled and the surface is smooth enough, we can use the accessibility of these nodes to represent that for the entire smooth surface.We adopt the algorithm in  [20] to calculate theV-maps of the sample nodes.First, the space on the G-sphere is mapped into a plane defined by the two sphere anglesαandβin the Local Coordinate System (LCS)oLxLyLzL, as shown in Fig. 7. The LCS is a Cartesian coordinate system with the origin at the sample node and the three principal axes parallel to their respective counterparts in the WCS. Because of this parallelism, the G-sphere in the LCS is the same as in the WCS. The two sphere angles for the G-sphere are shown in Fig. 7(a), with their intervalsα∈[0,π], andβ∈(−π,π]. In practice, theα–βplane is always discretized in computation. Specifically, the sphere angle ranges are discretized into anm×ngrid, as shown in Fig. 7(b). AV-map then is stored as a binary matrix ofm×n.An initial node on the part surface, e.g.,pin Fig. 6(b), is selected, and itsV-map is calculated by a brute-force-like method as proposed in  [20]. Note that this calculation only needs to be done once.Starting from this initial point, whoseV-map is already available, its one-ring neighbors are then fetched, e.g.,q1–q7ofpin Fig. 6. As the part surface is smooth, so will be the change of theV-maps between neighboring nodes. Therefore, theV-map ofqican be constructed by incrementally updating that ofp, via a boundary-tracking algorithm as proposed in  [20]. The whole process can then propagate outward toward the boundary of the surface, until all the nodes are processed.The above iterative procedure is efficient for calculatingV-maps of an entire surface. Except for the lone initial node, whoseV-map calculation may need a certain noticeable computing time, theV-map calculations for all the other nodes are generally very fast, thus affording high sampling density.To simplify the computation of theFI-map, we approximate the shape of anObsI(and all other types of obstacles as well) with its convex hull. This will guarantee safety with the sacrifice of slightly smaller visibility region, which is worthwhile for the greater benefit of performance and ease. For any obstacle of concave shape, it can be decomposed into multiple convex components. Hereafter, we use a box as an example of anObsIbut the algorithm can be easily extended to cover any other arbitrary convex hulls.AsObsIis defined in the TCS, in order to get theFI-map, the first step is to transformObsIto the LCS.From Fig. 4 and Eq. (6), we see that the kinematic chain betweenObsIand workpiece is the setup itself. For each point on the part surface, e.g.,pin Fig. 1, itsFI-map is defined in its own LCS.Calculation of a boxObsIin the LCS takes the following three steps.(Step 1). Get vertices ofH1in the TCS.H1={o1,o2,…,o8}, andoi=(xiL,yiL,ziL)is theith vertex ofH1,i=1,2,…,8. These are the input data.(Step 2). Get vertices ofH1in the WCS. LetH1in the WCS beH1W={o1W,o2W,…,o8W}, andoiW=(xiW,yiW,ziW),i=1,2,…,8. Transform from the TCS to the WCS:(9)[oiW,1]T=TT→W∗[oi,1]Twhere:TT→Wis the transformation matrix from the TCS to the WCS, which, according to the kinematic chain, is a function of the six setup parameters(a,b,c,φ,θ,ψ). From  [11] we have:(10)TW→T=Trans(a,b,c)∗Rot(z,ψ)∗Rot(x,θ)∗Rot(z,φ)whereTransandRotare standard translation and rotation matrices, respectively. Thus,(11)TT→W=TW→T−1=Rot(z,−φ)∗Rot(x,−θ)∗Rot(z,−ψ)∗Trans(−a,−b,−c).Substitute Eq. (11) into Eq. (9), we obtainoiW,(i=1,2,…,8).(Step 3). Get vertices ofH1in the LCS. LetH1in the LCS ofpbeH1L={o1L,o2L,…,o8L},pW=(xpW,ypW,zpW)be the coordinates ofpin the WCS. Transform from the WCS to the LCS:(12)[oiL,1]T=Trans(−xpW,−ypW,−zpW)∗[oiW,1]T.Substitute Eq. (9) into Eq. (12):[oiL,1]T=Trans(−xpW,−ypW,−zpW)∗TT→W∗[oi,1]T,(i=1,2,…,8).For any pointpon the part surface, afterObsIis mapped into its LCS, we need to identify all the tool axes with which the tool will interfere withObsIif to contactp. These tool axes are therefore forbidden directions. Conceivably, this identification problem becomes inordinately difficult and complicated when both the shape and size of the tool are considered. As an alternative, we will first consider the degenerate case when the tool is simply a line (i.e., the tool radius is zero), while eventually the thus obtained forbidden maps will be amended to reflect the actual tool size (see Appendix). Although such a simplification might mistakenly label some otherwise forbidden directions as feasible, it makes the solution computationally affordable.We begin with the introduction of the visibility from a point to a convex polyhedron, with the example of boxH1shown in Fig. 8. As seen in the figure, only some of the faces and vertices ofH1are visible from pointp. For those visible faces, we borrow a concept in computing the 3-D convex hull from  [31], the horizon ofp, which is defined as the outmost enclosed edges of those faces visible fromp. For example, in Fig. 8, the horizon ofpis the closed poly-curve with the vertex of{o1,o2,o6,o7,o8,o4,o1}. Clearly, the horizon ofpdefines the largest set of visible directions forObsIfrom pointp. In other words, theFI-map ofpshould be the set of those rays that emit frompand lie inside its horizon.In Fig. 8, the horizon ofpforH1is a closed poly-curve composed of six vertices out of eight in the box, which means not all the vertices are involved in the calculation ofFI-map. Also, forH1, the horizon ofpis determined by its relative position and orientation with respect top. Fig. 9shows a 2-D case illustrating the above statement—when the rectangle (with edgese1,e2,e3ande4) moves or rotates in the LCSxlpzlofp, its horizon changes. More specifically, since the position and orientation of anObsIare functions of the setup, so is the horizon ofObsI.With a fixed setup, by projecting all the vertices and edges ofH1onto a plane, e.g.,Spin Fig. 8, when viewed fromp, the projection of the horizon is easily seen to be the 2-D convex hull of all the projected vertices in that plane. This statement holds wheneverH1is convex. Thus the calculation of the forbidden directions ofH1is equivalent to the well-solved 2-D convex hull problem in a projection plane. However, we must ensure that such a projection planeSpalways exists. Indeed, since the obstacleH1is assumed to be convex,pis outside the convex hull (H1itself actually), and all the rays originating frompand hittingH1form a cone which is strictly smaller than a hemisphere withpbeing the center. The boundary of this cone is made exactly of the rays contributed by the horizon ofH1. Obviously, any planeSpsuits our need as long as it intersects the entirety of the boundary of the cone. For instance, as adopted in our implementation, we can first find the closest pointp∗onH1fromp; any plane that is orthogonal to and intercepts the line segment (p,p∗) can be a candidate forSp. Note that this selection is valid as long as the obstacle is convex, not limited to boxes only. Once the vertices of the obstacle are projected to this plane, well-known 2-D convex hull algorithms (e.g., from  [23]) can then be adopted to compute the convex hull.TheFI-map calculation begins with the calculation of the two spherical anglesαandβ. For each of the forbidden directions, there is a corresponding mapping point in theα–βplane. For any line segment in the LCS ofp, e.g., line segmentlthroughp1andp2in Fig. 10(a), it can be represented as:l(t)=(1−t)p1+tp2;t∈[0,1].Letl(t)=(x(t),y(t),z(t))be an edge of the projectedObsIin planeSp. Its two spherical angles are also functions oft, i.e.,(α(t),β(t)), and(13)α(t)=acos(z(t)/|l(t)|)(14)β(t)=atan2(y(t),x(t))where:atan2(y,x)is a function defined as:atan2(y,x)={atan(y/x)−π,x,y<0;atan(y/x),x≥0;atan(y/x)+π,x<0,y≥0.Letlxy(t)denote the projection ofl(t)in thexlylplane of the LCS. In Eq. (13), forα(t)∈[0,π], it is continuous for allt∈[0,1]. However, in Eq. (14), forβ(t)∈(−π,π], it is discontinuous in two cases:(1)x(t)<0andy(t)changes sign. This case happens whenlxy(t)intersects the−xlaxis, i.e. whent=t∗, as shown Fig. 10(b). In this case,β(t)has a jump of2π.lxy(t)passes through the origin. In this case,β(t)has a jump ofπ.The discontinuity ofβ(t)sometimes may divide anFI-map in theα–βplane withα∈[0,π]andβ∈(−π,π]into two separate regions even though the forbidden directions themselves are always continuous.For a given convex polygon (CP) obstacle shown in Fig. 8, if itsβfalls into one of the two discontinuity cases, it needs to be divided into two parts by thexlpzlplane, and theFI-map in the plane ofα–βis calculated separately by Eqs. (13) and (14) for the two divided parts.When CP has continuousβ(t), theFI-map is calculated with Eqs. (13) and (14) for the entirety. The theoretical solutions ofαandβfor a CP are a complicated curve in theα–βplane. For simplicity of computation, we approximate this curve by a polygon in theα–βplane, e.g., Fig. 11.It is important to clarify that, projectingObsIinto a convex polygon in planeSpis only for the purpose of convenience, the corresponding solution curves per Eqs. (13) and (14) in theα–βplane are algebraic and in general may not be convex at all, neither is this required by us.To recap, to calculate theFI-map of a sample pointpdue toObsI, the vertices of theObsIare first transformed to the LCS ofp; next, thisObsIis projected into a chosen plane in the LCS; the convex hull CP of the projected vertices is then built; afterward, we calculate theFI-map of the CP tending to both continuous and discontinuous situations; finally, theFI-map is transformed to theα–βplane and then approximated into a polygon and finally its grid form.ObsIIis defined in the MCS and fixed on the machine’s base. Akin toObsI, a tetrahedronH2with vertices{b1,b2,b3,b4}is used to representObsII, as shown in Fig. 1. Similar to that ofObsI, the first step for calculating theFII-map is to transformObsIIfrom the MCS to the LCS of the sample node, e.g., pointpin Fig. 1. From Eq. (7), it is obvious that the kinematic chain betweenObsIIand the LCS, in addition to the setup, also includes theAand theCaxis.To characterize theFII-map, we first need to define a tool contact configuration to be called double touching: the bottom of the tool contacts the part surfaceSat a pointp, while at the same time its shank touches a boundary edge ofObsII, e.g., lineb2b4at pointqin Fig. 12(a). For the five-axis machine given in Fig. 1, since the tool axis is always parallel to[0,0,1]in the MCS, with the simplification of the cutter to a line, it is clear that bothpandqlie on the same vertical line (in the MCS) in the double touching condition. Let us project theObsIIinto thexmomymplane in the MCS system; in the simplest case, this projection is a triangle, e.g.,△m1m2m3in Fig. 12(b), which is static in MCS. WithObsII, the forbidden condition forpis to check whether thexandycoordinates ofpin the MCS are inside the projection△m1m2m3.From Figs. 1 and 4, it is evident that the coordinates of pointpin the MCS depend on both the workpiece setup and the rotary angles ofAandC. For a fixed setup, withAandCchanging in their corresponding ranges,pin the MCS forms, in general, a 3D surface, to be denoted byRegp3. By projectingRegp3into thexmomymplane, it becomes a feasible region, i.e.,Regp2, which describes the possible region ofpin thexmomymplane due to the specified ranges ofAandC. From the above analysis, the forbidden condition betweenpandObsIIcan be regarded as checking the intersection condition betweenRegp2and△m1m2m3: ifRegp2∩△m1m2m3≠0̸, then collision happens; and for any collision configurationf∈Regp2∩△m1m2m3, there is a least one corresponding(Af,Cf)from the Inverse Kinematic Transformation (IKT). Thus, theObsIIin the LCS can be derived from the Forward Kinematic Transformation (FKT) based on the calculated(Af,Cf). It becomes clear now that all the possible IKTs ofAandCfor all the points insideRegp2∩△m1m2m3should be identified, and the FKTs transformingObsIIto the LCS ofpshould then be calculated correspondingly.As already stated, for any five-axis machine, its two rotary axes have limited ranges, e.g., the machine tool shown in Fig. 1 hasC∈[−π,π]andA∈[−2π/9,2π/9]. With an arbitrary setup, the position of a pointpon the part surface in the MCS is bounded by the ranges of the two rotary axes.LetSet∗=(a∗,b∗,c∗,φ∗,θ∗,ψ∗)be an arbitrary setup andpW=(xpW,ypW,zpW)be the coordinates ofpin the WCS. LetpT=(xpT,ypT,zpT)be the coordinates ofpin the TCS, which is related topWby:(15)[pT,1]T=TW→T∗∗[pW,1]Twhere:TW→T∗is the transformation matrix defined by the setupSet∗; according to Eq. (10),TW→T∗=Trans(a∗,b∗,c∗)∗Rot(z,ψ∗)∗Rot(x,θ∗)∗Rot(z,φ∗).In Fig. 1, the origins of the TCS and MCS are set to coincide with each other, i.e.olandomare the same, which are just the crossing point between theAand theCaxis. Obviously, with differentAand/orCangles, the correspondingpin the MCS are different. In other words, for the samepT, the ranges ofAandCinduce a set of 3-D points in the MCS, which is exactlyRegp3.Explicitly,Regp3is formed by two rotations.(1) Rotation about theCaxis: a circle.SinceC∈[−π,π], whenprotates about theCaxis, it forms a circle. Let this circle beCp(u)=(xc(u),yc(u),zc(u))with parameteru. Then:(16)(xc(u)yc(u)zc(u))=(rcos(u)rsin(u)zpT)where:r=(xpT)2+(ypT)2, andu∈[−π,π]is the parameter of the rotation angle about theCaxis. We can defineuin terms of theCangle:(17)u=C+α;where:α=atan2(yp,xp), andatan2is the function defined in Eq. (14).(2) Rotation about theAaxis: theRegp3.Rotate the circleCp(u)about theAaxis, then the surface swept by the circle isRegp3:(18)Regp3=Rot(x,v)∗[Cp(u),1]T.Substituting Eq. (16) into Eq. (18), we haveRegp3=(xR(u,v),yR(u,v),zR(u,v))and:(19)(xR(u,v)yR(u,v)zR(u,v))=(rcos(u)rsin(u)cos(v)−zpTsin(v)rsin(u)∗sin(v)+zpTcos(v))where:vis the parameter ofCp(u)’s rotation angle about theAaxis, as shown in Fig. 13; settingv=A, so thatv∈[−2π/9,2π/9].In Eq. (19), changeyR(u,v)into another form:(20)yR(u,v)=−r2sin2(u)+(zpT)2sin(v−ω)where:ωis a function ofu, and:(21)ω=atan(rsin(u)/zpT).Now, we can getRegp2=(xR(u,v),yR(u,v))by projectingRegp3into thexmomymplane, i.e.:(22)(xR(u,v)yR(u,v))=(rcos(u)−r2sin2(u)+(zpT)2sin(v−ω)).Regp2is exactly the 2D region as defined by Eq. (22). In Fig. 15(a), one example ofRegp2is shown for some pointpon a part surface with a given setupSet∗. Next, we give a detailed geometric and algebraic analysis ofRegp2, with special attention paid to its partitioning in thexmomymplane.To account for all the possibleAandCfor the forbidden condition ofObsII, we divideRegp2into two parts–Regp2IandRegp2II–according to its parametric domain, which is needed for obtaining definite IKT solutions, as to be described next. ForRegp2I:u∈[−π,0], andv∈[−2π/9,2π/9]; forRegp2II:u∈[0,π], andv∈[−2π/9,2π/9]. LetHIandHIIdenote their respective boundaries. We next give a detailed analysis on the algebraic structures of these two parts.Regp2I.For allu∈[−π,0),xR(u,v)is monotonic, while for eachuboth the maximal and minimalyR(u,v)lie on the boundaryHI. Thus, for eachu,HIcan be defined by finding the minimal and maximal value ofyR(u,v)withv∈[−2π/9,2π/9].In five-axis machining, the part surface always lies above the machine table, that is,zpT>0. By definition,r≥0. Also, whenu∈[−π,0),sin(u)≤0. From Eq. (21) and all these constraints, we haveω∈(−π/2,0].The minimum ofyR(u,v)can be divided into two cases:min(yRI(u,v))={−r2sin2(u)+(zpT)2,2π/9−ω≥π/2−r2sin2(u)+(zpT)2sin(2π/9−ω),2π/9−ω<π/2.The maximum ofyR(u,v)is:max(yRI(u,v))=−r2sin2(u)+(zpT)2sin(−2π/9−ω).HIis therefore composed of four curves, i.e.,HI={e1I,e2I,e3I,e4I}, with:e1I=(rcos(u)min(yRI(u,v)));e2I=(rcos(u)max(yRI(u,v)));e3Iis a line with two end points:(−r,−zpTsin(2π/9))′and(−r,zpTsin(2π/9))′;e4Iis a line with two end points:(r,−zpTsin(2π/9))′and(r,sin(2π/9))′.An example of these four curves is given in Fig. 14(a).We define one more curvecIwithv=2π/9foru∈[−π,0):cI=(rcos(u)−r2sin2(u)+(zpT)2sin(2π/9−ω))cIwill coincide withe1Iif,∀u∈[−π,0),2π/9−ω≤π/2; otherwise there will be a closed region formed bycIande1I, i.e. Region Type 1 (RT1) in Fig. 14(a). In case of a non-emptyRT1, letBI={e1I,cI}denote its boundary.Regp2II.Foru∈[0,π],xR(u,v)is also monotonic. BecausezpT>0,r≥0, andsin(u)≥0, from Eq. (21) we haveω∈[0,π/2). Similar toRegp2I, we find the minimal and maximal value ofyR(u,v)as:The minimumyR(u,v)is:min(yRII(u,v))=−r2sin2(u)+(zpT)2sin(2π/9−ω).The maximumyR(u,v)can be divided into two cases:max(yRII(u,v))={r2sin2(u)+(zpT)2,(2π/9+ω)≥π/2−r2sin2(u)+(zpT)2sin(−2π/9−ω),(2π/9+ω)<π/2.Thus,HIIis also made of four curves, i.e.,HII={e1II,e2II,e3II,e4II}, as shown in Fig. 14(b):e1II=(rcos(u)max(yRII(u,v)));e2II=(rcos(u)min(yRII(u,v)));e3IIande4IIare lines coinciding withe3Iande4I, respectively.Akin tocI, we define a curvecIIwithv=−2π/9foru∈[0,π]:cII=(rcos(u)−r2sin2(u)+(zpT)2sin(−2π/9−ω)).Similar to that forcI,cIIwill coincide withe1IIif,∀u∈[0,π],2π/9+ω≤π/2; otherwise there will be a closed region formed bycIIande1II, e.g.,RT5in Fig. 14(b). Similarly, for a non-emptyRT5, its boundary is defined asBII={e1II,cII}.Examples ofHI,HII,BIandBIIare shown in Fig. 14. For theRegp2defined by Eq. (22),Regp2IincludesRT2,RT3and the double ofRT1(if any); whileRegp2IIincludesRT3,RT4and the double ofRT5(if any).Let us take a closer look at the examples in Figs. 14 and 15(a). For a pointpon the part surface, itsRegp2represents the ranges of theAandCaxis with whichpis accessible to the tool. For any pointp∗inRegp2, there may be more than one way forAandCto rotate to make thepcoincide withp∗in thexmomymplane. This is exactly the multiple Inverse Kinematics Solution (IKS) problem in five-axis machining (cf.  [32,33]). With anyp∗, the IKS ofAorCwill have multiple solutions whenp∗lies inRT1,RT3andRT5, but only a single solution whenp∗lies inRT2andRT4. The exact solution branches and their ranges for the IKT ofAandCare listed inTable 1.ForObsII, its projection in thexmomymplane, to be denoted asMCSxoy(ObsII), represents the potential forbidden ranges of theAandCaxis. For an arbitrary pointpon the part surface, to reflect the obstruction by thisObsII,Regp2should intersect withMCSxoy(ObsII); or to be more specific, itsRegp2must be eclipsed byMCSxoy(ObsII). For simplicity of discussion, letObsIIbe a tetrahedron whosexmomymprojection is a triangle△m1m2m3(see Fig. 12). From Table 1,Regp2can be partitioned into four sub-regions, i.e.,RT1,RT3∪RT2∪RT1,RT5∪RT4∪RT3, andRT5, and their corresponding ranges ofAandCare given in Table 2. Intersection between△m1m2m3and all the sub-regions should be performed, as shown in Fig. 15(b)–(e). Any point in the intersection, e.g., the sub-region shown in Fig. 15(b), will pose a forbidden direction afterObsIIis transformed into the LCS ofpby FKT. Note that the region{△m1m2m3−Regp2}, if non-empty as shown in Fig. 15(f), has no impact on theFII-map ofp.The intersection between△m1m2m3and the sub-regions ofRegp2involves calculating the intersections between lines (edges of△m1m2m3andymaxis) and the four groups of boundary curvesHI,HII,BIandBII, resulting in intersection points such as{nb1,nb2,nb3}and{nc1,nc2,nc3,nc4,nc5}in Fig. 15(b) and (c). These intersection points are calculated analytically as all theHI,HII,BIandBIIare algebraic. However, since their expressions are very complex, the details are omitted here.One note is needed: when defining the double-touching condition (Fig. 12), the entire tool assembly is assumed to be a line. But in real situation, the size of the tool and its holder can never be ignored. Our remedy for this is to replaceMCSxoy(ObsII)with its outward offset, with an offsetting distance of 2d. If the tool assembly and spindle head are modeled as several cylinders with different radii, to guarantee the safety of machining process, we adopt the most conservative method:dis chosen as the largest radius among all the cylinders. Withdspecified, the△m1m2m3in Sections  5.2 and 5.3 should all be replaced by its outward offset.With a given setupSet∗, the intersection regionRegp2∩MCSxoy(ObsII)(Fig. 15) can be found; we next need to calculate the IKS ofAandCfor every point in this region. For this task, Table 2 must be referred to, asAandChave different ranges in different sub-regions ofRegp2∩MCSxoy(ObsII).LetSR={n1,n2,…,nk},ni=(xni,yni,zni), be the vertices on the boundary of such an intersection sub-region, e.g.,{nc1,nc2,…,nc5}in Fig. 15(c). For a pointpon the part surface shown in Fig. 1, per Eq. (15), its coordinates in the TCS arepT=(xpT,ypT,zpT), which are then transformed topM=(xpM,ypM,zpM)in the MCS by:(23)[pM,1]T=Rot(x,A)∗Rot(z,C)∗[pT,1]T.SubstitutepT=(xpT,ypT,zpT)into Eq. (23) and expand it, we get the projection ofpMin thexmomymplane:(24)(xpMypM)=(xpTcos(C)−ypTsin(C)xpTcos(A)sin(C)+ypTcos(A)cos(C)−zpTsin(A)).IfpMis insideRegp2∩MCSxoy(ObsII),pwill be inaccessible due toObsII. In particular, suppose a pair of angles (Ai,Ci) rotatespto coincide withni, i.e.,(25)(xpM,ypM)=(xni,yni).Combine Eq. (24) with Eq. (25), we can solve the analytical solutions ofAiandCi:(26)(Ci=2atan(−ypT±(xpT)2+(ypT)2−(xni)2xpT+xni)Ai=2atan(−zpT±(xpTsin(C)+ypTcos(C))2+(zpT)2−(yni)2yni+xpTsin(C)+ypTcos(C))).As seen in Eq. (26), we must decide the correct ranges for solving bothAiandCi. In Eq. (26), the range ofCiisCi∈[−π,π], with the range length of2π. However, from Eq. (17) we know thatCis a function ofuand its range is[−π−α,π−α]. Defineui∗according to the value ofCifor the two following cases:(1)Whenα≥0:ui∗={Ci+a−2π,Ci+a>π;Ci+a,Ci+a≤π−a.Whenα<0:ui∗={Ci+a+2π,Ci+a≤−π;Ci+a,Ci+a>−π.Because the range ofCin each sub-region ofRegp2∩MCSxoy(ObsII)is represented by the range ofu,ui∗is defined for the purpose of choosing the correct analytical solution in each sub-region. From Table 2, the two anglesAiandCiare constrained to certain different ranges depending on the sub-regions. For example, for the sub-region in Fig. 15(c),Ai∈[−π/2+ω,2π/9]andui∗∈[0,π]. With the constraints ofAiandui∗from Table 2, we can find only one IKS for (Ai,Ci). LetIA={(A1,C1),(A2,C2),…,(Ak,Ck)}represent the thus obtained unique IK solutions forSR={n1,n2,…,nk}. The IKT process is carried out for all the nodes of the four sub-regions; those IKSs ofAandCare then used to calculateObsIIin the LCS ofpby FKT.Similar to the construction of theFI-map, to build theFII-map of apdue to anObsII,ObsIIneeds to be transformed to the LCS ofp. Our final step in building theFII-map ofpis to, for a given setup andIA, transform theObsIIfrom the MCS to the LCS ofp. Let us use the tetrahedralObsII{b1,b2,b3,b4}in Fig. 12(a) as an example, wherebj=(xbjM,ybjM,zbjM)forj=1,2,…,4. Consider any one (Ai,Ci) inIA, e.g.,(A1,C1), and letbjL=(xbjL,ybjL,zbjL)be the vertexbjin the LCS due to (Ai,Ci). We have:(27)Rot(x,A1)∗Rot(z,C1)∗TW→T∗Trans(xpW,ypW,zpW)∗[bjL,1]T=[bj,1]T.Then:(28)[bjL,1]T=Trans(−xpW,−ypW,−zpW)∗TT→W∗Rot(z,−C1)∗Rot(x,−A1)∗[bj,1]Twhere:pW=(xpW,ypW,zpW)is the coordinates of pointpin the WCS;TT→W∗is the transformation given in Eq. (11).Therefore, under theA–Crotation(Ai,Ci), the tetrahedralObsII{b1,b2,b3,b4}is transformed into four vertices{bi,1L,bi,2L,bi,3L,bi,4L}in the LCS ofp. As there areksuch(Ai,Ci)inIA, in total there will be4ksuch vertices in the LCS ofp, to be expressed asNp,SR={bi,jL|(i=1,2,…,k),(j=1,2,…,4)}. We next generate the 3-D convex hullCH3(Np,SR)ofNp,SR. All the rays fromptoCH3(Np,SR)are then regarded as the forbidden directions ofpdue to theObsII{b1,b2,b3,b4}.Note that the above procedure pertains to only one sub-region in the intersectionRegp2∩MCSxoy(ObsII). If there are multiple such sub-regions, e.g., Fig. 15, they are processed separately. Also, while tremendously simplifying the complexity of the algorithm, using the convex hullCH3(Np,SR)from the IKT of nodes in each sub-region nonetheless might be too conservative. Alternatively, one could sample more points on the boundary of the sub-region, obtain a largerNp,SR, and use it directly instead of its convex hull.AsCH3(Np,SR)is now defined in the LCS ofp, its treatment for calculation the discretizedFII-map inα–βplane will be identical to that for theObsI. The finalFII-map forpis then the union of all theFII-maps due to all the sub-regions of all theObsII.We have accomplished our primary task. To summarize, given a mesh part surfaceS(the workpiece), the specificA–Ctype five-axis machine (Fig. 1), the Type 1 obstacleH1and Type 2 obstacleH2represented as convex polyhedrons, and an arbitrary 6-tuple setup parameters(a,b,c,φ,θ,ψ), for any vertexponS, all the tool orientations for the tool to contact it without any obstacle-collision are uniquely represented by its global visibility mapVg-map(p), which is a continuous region in its spherical angleα–βplane. From Eq. (8),Vg-map (p) can be constructed by subtractingFI-map (p) andFII-map (p) fromV-map (p), and for this purpose, we have presented efficient algorithms to compute theFI-map andFII-map and established rigorous analytical expressions forVg-map (p) as functions of(a,b,c,φ,θ,ψ). When planning a tool path for machiningS, once the workpiece setup is decided, the tool axis direction for pointpthen can be chosen fromVg-map (p), which is guaranteed to be collision free in the machining process.To verify our results, we utilizeVg-maps and present a heuristic algorithm for the minimum workpiece setups problem: find a minimum set of setups so that every (sample) point on part surfaceScan be accessed by the tool without any obstacle-collision. A computationally feasible approach to this apparently NP-hard problem is the following greedy method: each time a setup is sought that tries to maximize the number of accessible point among the remaining sample points; these sample points are then removed from the set of remaining sample points and another setup is sought for the now smaller set of remaining sample points, until all the sample points are taken care of (cf.  [6]). In our setting, this means finding a setup that will maximize the number of theVg-maps that are intersected by the TAD, with both theVg-maps and TAD being functions of the setup. Understandably, due to the concern of numerical stability and also the desire for more freedom in selecting the tool axis, a larger intersection area between theVg-map and TAD is preferred. In other words, given two setups that realize the same number ofVg-maps intersected by the TAD, the one whose TAD intersects a larger area of theVg-maps should be preferred. For instance, in the example shown in Fig. 16, although the TADs of both setups intersect threeVg-maps, Setup 1 should obviously be preferred.To tend to both the number of intersectedVg-maps and the actual intersection area, the following weighted maximization optimization formulation is adopted by us:(29)F(a,b,c,φ,θ,ψ)=M∗∑i=1nIndex(i)+∑i=1nS(i)where:nis the number of sample points on the part surface;Mis a large positive number, which ensures that the intersection number has higher priority over intersection area;Index is ann-vector that represents the intersection relation between the TAD and theVg-maps: if TAD(setup) intersects theVg-map of theith sample point,Index(i)=1; otherwise,Index(i)=0;S(i)is the intersection area between TAD(setup) and theVg-map of theith sample point in its discretizedα–βplane, which is a non-negative integer (the number of the intersected grid).Eq. (29) is then our reduced optimization problem. Due to the inordinately high complexity of bothFI-map andFII-map as functions of(a,b,c,φ,θ,ψ), it is virtually impossible to solve the problem analytically. Instead, heuristic-based numerical optimization methods should be adopted. In our current system, a Genetic Algorithm (GA) is used.The whole optimization procedure for the minimum workpiece setups problem in five-axis machining can be outlined as follows.Procedure Minimum_Workpiece_SetupsInput.nsample points on the part surface, asPs={p1,p2,…,pn};ObsIin the TCS;ObsIIin MCS; the radiusrof tool (see Appendix); and other necessary sampling thresholds.Output. A setΩof setups1.Calculate theV-maps of thensample points using the method in Section  3, takingrinto consideration; setΩto nil.WHILEPs≠0̸Do {2.1Setup∗←Result of applying GA to the optimization Eq. (29) for the points inPsRemove fromPsthose sample points whoseVg-maps underSetup∗have non-empty intersections with TAD(Setup∗).AddSetup∗toΩ.}ENDTo ratify the results obtained in this paper, a prototype computer program is implemented using MATLab on an averagely configured PC and a preliminary experiment in simulation is conducted to test the presented heuristic optimization algorithm for the minimum workpiece setups problem. Refer to Fig. 17for the setting of the experiment. There are fourObsI(yellow boxes) defined in the TCS and twoObsII(red tetrahedrons) defined in the MCS. (Note that physicallyObsIshould never collide withObsIIwhen the machine table rotates.) We choose the five-axis machine shown in Fig. 1 as the machine and the car seat surface in Fig. 6 as the part surface for the test. The rotary ranges forAandCare set to be consistent throughout the paper, i.e.,A∈[−2π/9,2π/9]andC∈[−π,π]. The tool is of flat-end type with a radius ofr=20units, whereas the grid sampling thresholds foraandbare set to be△α=1°and△β=2°.For the workpiece mounted on the table, there are two limitations for its setup. The first is that the workpiece should never collide withObsIandObsII; the other is that the setup of the workpiece should be within the dimensional limits of the table. Assume that the workpiece lies inside a bounding sphere, and the range of the setup can be determined by restraining the bounding sphere to be both on the table and collision-free ofObsIandObsII. In this experiment,with these two constraints, the lower and upper bounds for the six parameters of setup are[−325,−50,−10,−π,0,−π]and[325,820,100,π,π/2,π], respectively.The experiment is first carried out with some arbitrary yet intuitive setups, which are usually chosen in real machining.The first setup issetup1=[0,0,0,0,0,0], which means the WCS coincides with the TCS, as shown in Fig. 18(b). Forsetup1, based on our algorithm, 83 out of the total of 102 sample points can be collision-freely accessed by the tool, as marked by the black dots in Fig. 18(a). In Fig. 18, the triangles that are accessible to the tool withsetup1are colored red (assuming the sample density is high enough that a triangle is accessible if all its three vertices are accessible).For the inaccessible sample points left aftersetup1, another setupsetup2=[100,400,0,0,0,0]is added. Geometrically this means to move the workpiece on the table with only translation from the last setup, with the position of the workpiece now set in the middle of the table, as shown in Fig. 19(b). Insetup2, 14 out of the remaining 19 sample points now become accessible, marked also by the black dots, and the newly added accessible triangles are colored yellow in Fig. 19.As there is still some area in the part surface remaining inaccessible after the two setups, a third setupsetup3=[100,400,0,0,0,π/3]is adopted; this time, the workpiece is rotated on the TCS without translation, as shown in Fig. 20(b). Withsetup3, our algorithm finds four out of the five remaining sample points to be accessible, as darkened in Fig. 20(a), which adds 14 more accessible triangles (colored in magenta).To finish off the process, we need one more setupsetup4=[325,820,0,π/3,π/4,π/5], as shown in Fig. 21(b). The workpiece this time is set on the right end of the table, with an arbitrary orientation[π/3,π/4,π/5]. With this setup, the lone remaining inaccessible sample point as well as its incident four triangles becomes accessible (shown in black and cyan respectively in Fig. 21).With the above four setups, the whole surface can be machined.Insetup1andsetup2the workpiece has different positions (although of the same orientation) on the table. From the results shown in Figs. 18 and 19, we see that withObsIandObsII, the position of the WCS on the TCS can affect the accessibility of the part surface. This confirms the statements made in Section  2. On the other hand,withsetup2andsetup3, the workpiece has different orientations only (i.e., the origin of the WCS remains the same), and the results in Figs. 19 and 20 also show the impact on the accessibility.Next, we run our optimization procedure Minimum_Workpiece_Setups, with an initial setup[0,0,0,0,0,0], the program outputs only one setupsetup∗=[0.94,0.73,0.16,0.40,0.34,0.08], as shown in Fig. 22(b). With this single setup, all the sample points on the part surface are now accessible to the tool, free ofObsIandObsIIand within the ranges of theAandCaxis.Regarding the computational efficiency, for one point on the part surface in a certain setup, the calculation of itsFI-map andFII-map is purely analytical and obviously takes constantO(1)time. As a result, fornsample points, theirVg-maps (except theV-map which is calculated only once in the whole process) can be calculated inO(n2)time (as aVg-map itself may have in the worst caseO(n)edges, although in our experiment on average it is much less thann). For the 102 sample points in the above example, theirVg-maps calculation took less than 1 s in our experiment. With a specified threshold in the GA algorithm, the algorithm runs for less than 15 min to yield the final result (Fig. 22), with about 2500 iterations. Since this is an offline optimization and done only once, higher sampling density is conceivably affordable.The above minimum workpiece setup problem is just one application of theVg-map. It aims at maximizing the region on the part surface which can be accessed by the tool, thus reducing the total number of setups. This is of great importance since every extra workpiece setup brings along additional auxiliary time due to the workpiece remounting and the surface cutting errors due to the recalibration of the machine tool. Besides this application, the more fundamental usage of theVg-map is in providing the complete set of global collision-free directions for the tool axis (catering to all the different types of obstacles). It can be incorporated into a current CAM system as a constraint in the five-axis tool path generation process. Together with the local gouging-free constraint  [11,25–29], theVg-maps make possible automatically generating gouging-free (both local and global) five-axis tool paths, given the specific machine and the workpiece setup. A typical five-axis tool path generation procedure utilizing the proposed methods would look like the following. Firstly, a (near-) minimum number of workpiece setups are identified which consider all the types of obstacles. Next, for each identified setup, the correspondingVg-maps are calculated. Finally, for each setup, commercial (or own-developed) CAM software is executed to generate an initial tool path which is made of CC curves and the associated tool orientations; this initial tool path is then amended by modifying the tool orientations such that they all fall into the correspondingVg-maps, in addition to maybe other constraints on the tool orientation (e.g., kinematics, dynamics, etc.).

@&#CONCLUSIONS@&#
