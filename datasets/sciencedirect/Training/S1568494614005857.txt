@&#MAIN-TITLE@&#
A systematic review of machine learning techniques for software fault prediction

@&#HIGHLIGHTS@&#
Reviews studies from 1991-2013 to assess application of ML techniques for SFP.Identifies seven categories of the ML techniques.Identifies 64 studies to answer the established research questions.Selects primary studies according to the quality assessment of the studies.Systematic literature review performs the following:Summarize ML techniques for SFP models.Assess performance accuracy and capability of ML techniques for constructing SFP models.Provide comparison between the ML and statistical techniques.Provide comparison of performance accuracy of different ML techniques.Summarize the strength and weakness of the ML techniques.Provides future guidelines to software practitioners and researchers.

@&#KEYPHRASES@&#
Machine learning,Software fault proneness,Systematic literature review,

@&#ABSTRACT@&#
BackgroundSoftware fault prediction is the process of developing models that can be used by the software practitioners in the early phases of software development life cycle for detecting faulty constructs such as modules or classes. There are various machine learning techniques used in the past for predicting faults.MethodIn this study we perform a systematic review of studies from January 1991 to October 2013 in the literature that use the machine learning techniques for software fault prediction. We assess the performance capability of the machine learning techniques in existing research for software fault prediction. We also compare the performance of the machine learning techniques with the statistical techniques and other machine learning techniques. Further the strengths and weaknesses of machine learning techniques are summarized.ResultsIn this paper we have identified 64 primary studies and seven categories of the machine learning techniques. The results prove the prediction capability of the machine learning techniques for classifying module/class as fault prone or not fault prone. The models using the machine learning techniques for estimating software fault proneness outperform the traditional statistical models.ConclusionBased on the results obtained from the systematic review, we conclude that the machine learning techniques have the ability for predicting software fault proneness and can be used by software practitioners and researchers. However, the application of the machine learning techniques in software fault prediction is still limited and more number of studies should be carried out in order to obtain well formed and generalizable results. We provide future guidelines to practitioners and researchers based on the results obtained in this work.

@&#INTRODUCTION@&#
The growing complexity and dependency of the software has increased the need for delivering high quality, maintainable software at lower costs. Software fault prediction is very important and essential activity in order to improve the software quality and reduce the maintenance effort before the system is deployed [1]. Early detection of faults may lead to timely correction of these faults and delivery of maintainable software. There are various software metrics available in the literature. These software metrics and fault data can be used to construct models that can be used for predicting faulty modules/classes in the early phases of software development life cycle.Software fault prediction (SFP) can be done by classifying the modules/classes as fault prone and not fault prone. The software metrics and fault data obtained from a similar project or previous release can be used to construct SFP models. The model constructed can be subsequently applied to the modules/classes of current software projects for classifying them as fault prone or not fault prone. The software practitioners can then target the available testing resources on the fault prone areas of the software in the early phases of software development. For example, if only 30% of testing resources are available, the knowledge of the weaker areas will help the testers in focusing the available resources on fixing the classes/modules that are more prone to faults. Hence, a low cost, high quality and maintainable software can be produced in the given time and budget.Soft computing techniques are well suited for real life problems that use methods to extract useful information from complex and intractable problems in less time. They are tolerant to data that is imprecise, partially incorrect or uncertain. One of the important components of the soft computing techniques includes the machine learning techniques. The machine learning (ML) techniques have been used in the literature in order to predict models for estimating the faulty modules/classes. For example, Singh et al. [2] have employed decision trees and artificial neural networks in order to predict classes at various severity levels of faults. There are several advantages of using these classification techniques for predicting faulty modules/classes.To facilitate the use of ML techniques in software fault prediction it is necessary to systematically summarize the empirical evidence obtained on these techniques from the existing literature and studies. The existing literature reviews aim to answer various research questions [3â€“5], but to the best of the authors knowledge there is no systematic review that focus on the ML techniques for the software fault prediction i.e. whether a module/class is faulty or not. This paper extensively reviews all the studies between the period of 1991 and 2013. In order to perform the review we have identified seven categories of the ML techniques. The aim of this systematic literature review is to summarize, analyze and assess the empirical evidence regarding: (1) ML techniques for SFP models (2) performance accuracy and capability of ML techniques for constructing SFP models (3) comparison between the ML and statistical techniques (4) comparison of performance accuracy of different ML techniques (5) summarize the strength and weakness of the ML techniques. We further provide future guidelines to software practitioners and researchers regarding the application of the ML techniques in SFP. In order to achieve this aim we extensively searched through seven digital libraries and identified 64 studies to answer the research questions pertaining to the use of the ML techniques for the SFP. The primary studies were selected according to the quality assessment of the studies and relevance.The rest of the paper is organized as follows: Section 2 presents the research questions that are addressed in this systematic review and the research criteria followed in this study for selection of primary studies. Section 3 presents the answers to the research questions identified in this work. Section 4 provides the limitation of this work and Section 5 provides conclusions and future directions obtained from this systematic review.

@&#CONCLUSIONS@&#
