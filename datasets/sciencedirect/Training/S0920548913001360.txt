@&#MAIN-TITLE@&#
A flexible time-triggered service for real-time CORBA

@&#HIGHLIGHTS@&#
CORBA service for orchestrating in a timely and flexible way the tasks of a DRTSDefinition of the FTT-CORBA architecture, task model and initial configurationImplementation issues of FTT-CORBA over TAO-CORBA and ACEPerformance of FTT-CORBA over low end hardware on different platformsCoordination of automation applications with reconfiguration needs with FTT-CORBA.

@&#KEYPHRASES@&#
Distributed real time systems,Middleware,Synchronous scheduling,Real-time,

@&#ABSTRACT@&#
This paper presents a new service for CORBA applications that orchestrates the timely execution of the tasks of a distributed real-time system in a flexible way. It follows the CORBA philosophy of complementing the CORBA standard with additional services that solve specific problems and facilitate using CORBA in complex applications. The service has been designed for highly coupled applications that execute over LANs. It provides a synchronous framework to synchronize distributed applications that is open to accepting and removing components on-line, with reduced impact on the application timing. It also provides the flexibility to use different distributed scheduling policies that can override the local operating systems schedulers. This paper describes the service architecture and implementation as well as its best-case performance on low computing power hardware with the QNX OS and connected to a switched Ethernet network. Finally the usage and of the service is illustrated with one case study: the synchronization of several robots in a welding process.

@&#INTRODUCTION@&#
Modern distributed real-time systems (DRTS) are required to satisfy stringent constraints. Traditionally, these requirements led to the use of low level programming techniques that reduce portability and reusability of code and make maintenance harder. During the last decade, certain technologies have been adopted to improve the efficiency, distribution and scalability of the applications with respect to the main programming techniques used in the past [1]. One example is the adoption of distribution middleware technologies which provide certain degree of independence with respect to the underlying hardware, operating system (OS) and programming language [2] such as CORBA [3], ICE [4] or DDS [5]. These middleware technologies have become a popular alternative to develop highly coupled distributed applications of small and medium size that require certain degree of processing power, like those found in robotics, manufacturing or avionics [6]. In the particular case of CORBA, recently standardized as ISO/IEC 19500-1 [7], advanced specifications were included, such as CORBA/e [8] or RT-CORBA [9], that address the specific requirements of DRTS. Moreover, the CORBA architecture is complemented with a broad set of OMG specifications [10] that offer additional services, which simplify the construction of complex CORBA applications. In this scenario, some works such as those reported in [11–13] proposed new patterns and tools that abstract the complexity of using the CORBA architecture in new applications. This work follows the same approach by proposing a new service and tools that ease the construction of time-critical but flexible DRTS complementing existing OMG specifications.Some DRTS applications may require the timely execution of their activities in an accurate way, such as those that require synchronous measurement by several distributed sensors, sequential measurements to mitigate interference or synchronous actuation [14]. As discussed in [15], this synchronization may be achieved by using either time-triggered techniques that schedule the execution of the tasks at appropriate time instants or event-triggered ones. Typically, event-triggered techniques are easier to implement and configure, whereas time-triggered approaches offer higher predictability and lower jitter. In addition, event-triggered techniques may cause a coupling between functionality and timing that is undesirable. For instance, it may lead to large jitter or to performance deviations upon updating a system component, e.g., by using a faster hardware or a more efficient code.Concerning the time-triggered approach, a typical way to synchronize distributed real-time applications is to use a global clock to activate their actions [15]. This approach is effective for static environments but raises several problems in dynamic environments where the number of active nodes can vary, or when changes in the functionality of the system are demanded at runtime, e.g., upon system reconfiguration. In such cases, changing dynamically the synchronization configuration becomes a complex issue since the configuration is distributed and, typically, requires exchanging a certain number of messages among the nodes. Moreover, special care must be taken to ensure consistency and avoid undesired transient phenomena in this kind of applications.Similar to network protocols, middleware can be decomposed in several layers [16]: from “host infrastructure middleware” at a lower level to “domain specific middleware services” at a higher level, below the “application level”. The problem addressed in this paper belongs to the second category since it provides distribution middleware technologies, CORBA in particular, with an appropriate, high-level service that supports synchronizing distributed applications in a flexible way, amenable to runtime reconfiguration.This paper presents a flexible time-triggered service for CORBA applications that orchestrates the execution of the tasks of a DRTS in a flexible way. More specifically, it provides a synchronous framework to synchronize distributed applications that is open to accepting the integration, adaptation and removal of applications and application components on-line. CORBA has been selected for this work, despite being a mature technology, for several reasons [17]: (1) it is an international standard middleware [7] complemented with diverse infrastructure services, promoted by the OMG [10], that ease the construction of complex distributed applications; (2) it provides support for real time developments over different embedded architectures (e.g. Atom, ARM); (3) it allows programmers to develop source code reusable across multiple platforms, OS and applications, maximizing technology investments; and (4) there are open source ORBs which provide good performance. Actually, current CORBA implementations are several orders of magnitude faster and smaller than earlier enterprise CORBA versions [18]. However, most of the concepts developed in this work can be easily adapted to other middleware technologies, such as ICE or DDS, since these adopt similar approaches to those used in CORBA.The service is deployed as a set of COTS (Commercial off-the-Self) components that activate in turn the operations of the distributed system. The objective of this service, henceforth FTT-CORBA, is twofold: (1) liberating programmers from the burden of writing the code for synchronizing the different distributed activities and (2) providing mechanisms to timely execute CORBA methods, reducing activation/termination jitter and latency in the access to shared resources. FTT-CORBA also provides mechanisms for deploying the initial configuration of the DRTS as well as interfaces that allow dynamic changes of the synchronization plan at runtime.The FTT-CORBA service follows the flexible time-triggered paradigm (FTT) [19]. However, FTT-CORBA is implemented on top of the IP stack instead of directly over the data link layer. In addition, when compared to other works that implement the FTT paradigm, FTT-CORBA follows a different approach since it focuses on the management of the distributed CPUs rather than on the network. Naturally, as in other real-time middleware architectures built over the IP stack, the service performance is affected by the selection of the underlying technologies (e.g. network and OS), so they must be carefully selected [20].This paper complements preliminary works reported in [21–25] where the authors defined the basics of the service. Here, the authors introduce: (1) a more refined definition of the service architecture which includes a new interface for performing dynamic reconfigurations of the system at runtime; (2) new performance results comparing the activation precision over different OS, namely a commercial RTOS, QNX, and a general purpose OS, Linux; and (3) a new case study beyond that presented in [23] that illustrates the benefits of using this service for coordinating several devices (robots in the example) in a hypothetical welding application. Finally, as proposed in [26], the approach proposed in this paper could be used in the scope of real-time service oriented applications (SOA) to orchestrate the invocation of services implemented as CORBA methods. Such work also describes how FTT-CORBA could be integrated in higher-level architectures with different scheduling algorithms to optimize the use of system resources.The paper is organized as follows: Section 2 discusses some related work. Section 3 describes the architecture of the proposed synchronization service. Section 4 describes the initial configuration of the service as well as its reconfiguration via the OrchestratorManager interface. Section 5 describes the current implementation of the service over ACE [27] and TAO [28]. Section 6 presents a performance study with different layouts over QNX and Linux. Section 7 illustrates the use of the service with one case study. Finally, Section 8 draws some conclusions.

@&#CONCLUSIONS@&#
This work presents a flexible-time-triggered service for CORBA applications, named FTT-CORBA. Following the CORBA philosophy, the service complements the CORBA standard [7] facilitating the development of applications that require dealing with synchronous operations in a flexible way. However, the service goes beyond since it also allows the creation of applications by sequences of tasks wrapped as standard CORBA objects. More specifically, the service, which is aimed at medium and small scale DRTS connected via multicast capable LANs, such as Ethernet or WiFi, orchestrates the invocation of CORBA objects in a global synchronous framework. However, as opposed to other previous synchronous approaches to system design, the FTT-CORBA service supports on-line changes to the synchronization parameters and system re-composition with low and limited latency. Thus, the service assists programmers in the creation of synchronous, yet flexible, applications that are required to adapt to changing requirements. The proposed service also promotes a separation of concerns between the functionality of the application code, wrapped as CORBA objects, and its synchronization, provided by the FTT-CORBA service. In addition, the proposed service architecture is open to different scheduling policies for managing the tasks of the distributed system.A preliminary version of the service, available in [50], was tested using relatively low end computing nodes on a general purpose OS (Linux), an RTOS (QNX) and in heterogeneous environments. These tests showed an acceptable performance in terms of activation latencies and jitter. In particular, we observed that, despite the complexity of the software/communications stack, remote objects could be invoked with a jitter below 400μs on low end hardware, in interference-free situations. Finally, one case study illustrated the use of the proposed FTT service.As future work the authors plan to focus on the global scheduling of the DRTS addressing both the schedulability analysis adequate for prompt runtime reconfigurations as well as the extension of the scheduling model to include other resources such as the network, battery and memory. Moreover, we will also consider the replication of the Orchestrator for fault-tolerance purposes following the ideas in [59].