@&#MAIN-TITLE@&#
A meshfree interface-finite element method for modelling isothermal solutal melting and solidification in binary systems

@&#HIGHLIGHTS@&#
A meshfree interface-finite element method (MI-FEM) for phase transformation.Implementation of radial basis functions for constructing interpolants at interface-embedded elements.Meshfree distance-regularized level sets with no re-initialization.Coupling of the MI-FEM with meshfree automata for predicting microstructural evolution.Analysis of bench mark problems yielded very good accuracy and excellent volume conservation.

@&#KEYPHRASES@&#
Level set method,Radial basis functions,Meshfree methods,Finite elements,Solidification,Melting,

@&#ABSTRACT@&#
In this paper, numerical modelling of isothermal solutal melting and solidification in binary systems is done using a new meshfree interface-finite element method (MI-FEM) where the implicitly represented liquid–solid interface is allowed to arbitrarily intersect the finite elements. A meshfree radial basis functions (RBFs) method is used for solving a distance-regularized level set (DRLS) equation such that re-initialization is completely eliminated and fast marching algorithms for interfacial velocity extension are not necessary resulting in a more efficient solution with excellent volume conservation. In the proposed method, intersection points between the mesh and the zero level set are used as meshfree nodes such that at the interface-embedded elements interpolants are constructed using meshfree RBFs ensuring both the partition of unity and Kronecker-delta properties are satisfied allowing for precise and easy imposition of Dirichlet boundary conditions (DBCs) on each side of the interface. A coupling of the MI-FEM with a new meshfree automata (MA) method is used to efficiently predict the microstructural evolution during solidification. Benchmark problems with strong discontinuities were solved where very good accuracy was obtained. The solute conservation and interfacial equilibrium equations describing solutal phase transformation in binary systems were solved using the newly developed method. Mathematical formulation and implementation followed by numerical results and analysis will be presented and discussed.

@&#INTRODUCTION@&#
Solutal phase transformation is an isothermal diffusion-controlled process such that under certain process parameters melting of the solid or, conversely, solidification of the liquid will occur. Maintaining equilibrium at the liquid–solid interface governs the direction and rate of its evolution. Proper understanding of the interfacial kinetics is essential since it occurs in a number of relevant industrial processes such as powder metallurgy which is an important technique for surface refurbishment and fabrication of complex components. Careful selection of bonding parameters is essential in order to avoid inferior mechanical and thermal properties of the finished product. Incomplete melting in wide-gap brazing results in porous joints with inferior mechanical properties [1]. Incomplete melting of additive powder particles during transient liquid phase bonding of single crystals results in stray grain formation which introduces grain boundaries into the single crystal along with their inherent weaknesses making the material more susceptible to grain boundary corrosion and sliding [2–5]. Careful selection of process parameters such as temperature, time and solute concentration is very important in optimizing the process and the final microstructure of the product. Therefore, it is not surprising that numerical modelling of the effect of process parameters on the interfacial kinetics during phase transformation is very essential.Numerical modelling of phase transformation of metals and alloys remains one of the most challenging problems in materials science. This is due to the requirement of simultaneously solving a highly non-linear and coupled free boundary problem in addition to predicting the future location of the liquid–solid interface which is itself an unknown. The complex topological evolution of the interface and handling of interfacial dynamics such as merging and splitting makes numerical analysis quite challenging.In numerical modelling of solidification and phase transformation, the interface separating two distinct phases can be assumed either diffuse (with a finite thickness) or a sharp interface (infinitesimally thin). The diffuse interface assumption is taken in phase field (PF) methods often attributed to Cahn and Hilliard [6,7]and Allen and Cahn [8]. In such methods, a phase parameter is introduced which is 1 in phase A and 0 in phase B while it varies sharply but smoothly across an interfacial region with a finite thickness. The PF method has gained considerable popularity in materials science and modelling of phase transformation due to its ability to directly incorporate the thermodynamics of phase transition into the formulation. It also eliminates the need to assign boundary conditions directly at the interface. Additionally, computation of interface normals and curvature is also avoided.Traditional finite element modelling of phase transformation based on the sharp-interface assumption involves interface tracking techniques [9–16] where the interfaces are explicitly tracked by imposing marker points directly at the interface while an adaptive meshing technique is used such that the mesh is continuously updated to conform to the evolving liquid and solid topology. The main advantage of this Lagrangian approach is that imposing the Dirichlet boundary conditions (DBC) at the interface, as is often typical in sharp-interface solidification and melting numerical models, is easy since there will always be interfacial nodes that directly represent the interface. However, the main challenge with this approach is that the interfaces are represented explicitly requiring the continuous update and re-generation of the mesh which becomes very time consuming especially in 3D analysis. Explicit handling of interfacial dynamics such as merging or splitting becomes a significant challenge where interfacial nodes must be added or deleted as required to ensure an accurate solution.Rather than explicitly tracking the sharp-interface, it can be captured using a fixed mesh while allowing it to evolve independently of the underlying mesh. Methods based on this Eulerian approach is the volume-of-fluid method developed by Hirt and Nichols [17] which is very popular in modelling computational fluid dynamics problems such as multi-phase flows. In the VOF method, a step function, f, is used to define the interface such that it is 0 in one phase and 1 in the other while the sharp-interface lies somewhere at0<f<1. Advantages of the VOF method include easy handling of interfacial dynamics and their excellent volume and mass conservation properties [18]. However, an extra step is often required to reconstruct the interface from the VOF solution using popular methods such as the piecewise linear interface calculation (PLIC) [19]. The overall accuracy of the method depends largely on the performance of its interface reconstruction schemes.Another approach is to implicitly define the interface by a higher dimension, smooth, and continuous function,Φ, such as a signed distance function (SDF), where the interface is the zero level set of that function. The SDF is then evolved by solving a Hamilton–Jacobi level set equation [20]:(1)∂Φ∂t+V→.∇→Φ+Vnext‖∇→Φ‖=0whereΦis the level set function (LSF) value,V→is the convective velocity in the domain, and Vextnis the normal velocity of the interface extended sufficiently around the interfacial area. This approach has a number of very attractive features such as easy calculation of the local normal vector to the interface, curvature, and easy handling of interface dynamics such as splitting and merging.It is important to note that since the interfacial evolution is now independent of the underlying mesh, a finite element formulation used to calculate the field variables must account for the inter-element discontinuities where the interface may arbitrarily intersect the elements. An additional complication due to the implicit representation of discontinuities is that there are no nodes that immediately lie on the interface. As a result, it is not straightforward to impose the essential boundary conditions governing interfacial equilibrium as in the conventional finite element method (FEM).The relatively recent generalized/extended finite element methods (GFEM/XFEM) based on the Partition of Unity method (PUM) developed by Melenk and Babuska [21] are excellent techniques for handling both weak and strong discontinuities that may arbitrarily intersect the finite elements. The (GFEM/XFEM) are practically identical methods [22] where the GFEM was adopted by the Texas school [21,23,24] and the XFEM was adopted by the Northwestern school [22,25,26]. In the GFEM/XFEM, discontinuities are allowed to intersect the element eliminating the requirement of aligning the edges of elements with the discontinuity as is typically done in conventional FEMs. A hybrid finite element-meshless approach is used where the conventional FEM is used for elements away from the discontinuity while local enrichment at nodes of elements intersected by the interface is done within the framework of the PUM [21] such that a field variable can be approximated by(2)U(x)=∑i=1nstdNi(x)Ui+∑j=1nenrψj(x)ajwhereNi(x)in Eq. (2) are the standard finite element shape functions for node i, Uiare the nodal degrees of freedom,ψj(x)are the enrichment functions and ajare the nodal enrichment degrees of freedom. nstdand nenrare the number of nodal standard degrees of freedom and nodal enriched degrees of freedom, respectively.The GFEM/XFEM is tremendously successful especially in the area of solid mechanics and modelling of crack propagation and fracture where it entertains a high degree of maturity. This is mainly due to the flexibility of the PUM for inclusion of pre-determined analytical solutions as enrichment functions which significantly facilitates handling of singularities that arise at crack tips during crack propagation analysis. Adding the well-known asymptotic singular near-tip solutions near crack fronts and dislocation cores as enrichments can significantly reduce the h-refinement required to handle such features.The GFEM/XFEM generally involves the use of some type of enrichment functions such as Heaviside or ridge functions where the added enrichment functions correspond to added degrees of freedoms at the nodes of the original element as shown in Fig. 1. Two complications become immediately apparent. The first is that for certain types of enrichment functions, such as ridge functions, the enrichment effect may not vanish for elements adjacent to the intersected element [22]. This means that shape functions at the adjacent elements will no longer satisfy the partition of unity property since only some of the nodes of the element are enriched while others are not. Such elements are termed “blending” elements which have been shown to slow convergence if left untreated [27,28]. Specialized methods are often needed to avoid the parasitic behaviour associated with blending elements and a lot of research has been done to overcome problems associated with them [22]. The second apparent problem is that there are no degrees of freedoms that are directly associated with the interface. The interpolation functions resulting from the PUM procedure do not in general satisfy the Kronecker-delta property. As a result, imposing the DBC at the interface requires special methods such as Lagrange multipliers, penalty methods, shifting, augmented Lagrangians, among other techniques [29–31].Within the context of solidification and phase transformation, the LSM is often used in the XFEM where it has been applied in [32–37]. Conventional Galerkin methods will immediately fail in obtaining a stable solution of the LSF and a stabilization technique such as the Galerkin least squares formulation is required which introduces a stabilization diffusion term [35]. This term is dependent on a stabilization parameter that scales the impact of stabilization. It is often unclear how to determine this parameter and is generally approximated by trial and error. Unfortunately, even if a stable solution of the LSF is obtained, it does not guarantee that the LSF remains a SDF. As a result the LSF can become too flat or too steep and the solution immediately deteriorates. Therefore, a very critical step for successful solution of the LSF is re-initialization [38] which often requires the solution of(3)∂Φ∂τ=sign(Φ)(1−‖∇→Φ‖)where τ are virtual time steps not related to the actual computation time. Thesign(Φ)is calculated by using(4)sign(Φ)=ΦΦ2+‖∇→Φ‖2h2where h is the element size. This iterative procedure is necessary for some virtual time steps to force back the LSF to be a SDF which, ideally, should keep the interface precisely fixed. However, this is never the case since the interface will always move even if the frequency of re-initialization was reduced to be done only every few time steps.In phase transformation, this issue is of significant concern since the parasitic interfacial movement is non-physical and unrelated to the physics of the problem. As a result the classical LSM is non-conservative. The re-initialization procedure also tends to excessively smooth out the interface which may prevent the formation of essential features such as the growth of secondary dendrite arms whose formation is dependent on the small perturbations that typically exist on primary dendrite arms. This has been investigated by Zabaras et al. [35] where it was reported that frequency and the number of iterations during re-initialization had a significant effect on the final interfacial morphology of the dendrite.To overcome the volume loss issue in level sets, Enright et al. [39] proposed a semi-Lagrangian particle LSM where random weightless particles are imposed at a narrow band on each side of the interface. Negative particles are located on the negative side of the interface while positive particles on the other. The particles are advected along with solving the LSF. As the interface evolves, some negative particles will creep into the positive side of the interface or vice versa. The particles are used to correct the predicted LSF. While the particle LSM effectively solves the mass/volume conservation issues with the classical level set method, it is computationally intensive since the re-initialization and velocity extension steps are still required along with advecting, deleting and addition of the virtual particles. Also, there must be sufficiently large number of particles near the interface to ensure that correction of the LSF is done accurately. Recently, Leung and Zhao [40] proposed a grid based particle method for moving interface problems which is shown to be computationally less expensive than Eulerian LSM techniques and can handle arbitrary topological changes such as particle splitting and merging and has been shown to work well in 3D.In the context of image segmentation, another class of solutions for solving the LSF without re-initialization involves variational formulation such that an energy term is added to the LSF which penalizes the approximation of the LSF if it deviates from a distance function [41]. Another approach proposed by Gomes et al. [42] forces the LSF into a SDF by solving three coupled partial differential equations (PDEs).In the field of computational geometry, construction of 3D CAD geometries from scanned shapes and objects is often done using radial basis functions (RBFs) for constructing implicit geometries by globally (or locally) interpolating surfaces based on only the distribution of scattered data points approximating the surface of the scanned object. Further parametrization or mesh generation is then used to generate the CAD model. Shape optimization can be done by interpolating LSFs using RBFs as was done by Wang et al. [43] where the Hamilton–Jacobi PDE was transformed into a system of ordinary differential equation (ODE). Xie et al. [44] reported that this approach preserves the LSF to remain as a SDF which deemed the re-initialization procedure unnecessary.Despite the robustness of phase transformation models based on the sharp-interface assumption using the XFEM/GFEM, they are not as popular as models based on PF methods which can directly incorporate the thermodynamics of phase transition into the formulation. However, it should be noted that recent works, such as that by Zhao et al. [45], developed a sharp-interface model based on energy functional minimization for modelling solid–solid phase transformation using the XFEM and LSM. Additionally, despite the popularity of PF methods, they have a number of shortcomings. Wheeler et al. [46] and Wang et al. [47] have shown that the interface thickness must be smaller than the capillary length for the solution to converge to the sharp-interface limit. As a result, one limiting factor of the PF methods is that the mesh size at the diffuse region must be significantly smaller than the size of the diffuse interface thickness. This factor coupled with the requirement of solving high-order non-linear set of PF equations causes the PF methods to be computationally demanding even when adaptive techniques are used. While the computational aspects of PF methods can be relatively mitigated by the use of parallel processing and more powerful processors, it still has the limitation that the PF solution converges to the true sharp-interface solution only when the diffuse interface thickness is very thin. Another difficulty is their dependence on a large number of unknown parameters that are generally difficult to determine experimentally and, as a result, are often assumed in simulations.Therefore, further development of share-interface based models is needed so as to provide a viable alternative to PF methods. The approach of approximating the solid phases immersed in liquid as dynamic implicit geometries exhibits very attractive advantages as discussed earlier. Our goal in this work is to further develop this approach for tackling phase transformation problems. We propose a meshfree interface-finite element method (MI-FEM) for modelling isothermal phase change in binary systems as a more convenient approach than the traditional GFEM/XFEM and LSM while preserving their attractive features in handling dynamic implicit geometries. For a fixed finite element mesh (structured or un-structured), a SDF is used to implicitly define the liquid–solid interface. Interface nodes are added directly at the intersection points between the underlying mesh and the zero iso-contour of the LSF. At the interface-embedded elements, interpolation functions are constructed using meshfree RBF such that both the partition of unity and Kronecker delta properties are satisfied allowing for precise imposition of DBCs on each side of the interface. It will be shown that using these meshfree interfacial nodes coupled with RBFs will facilitate calculation of the interfacial curvature, normal, interfacial velocity and will play a major role in meshfree solution of the distance-regularized level set (DRLS) function such that re-initialization is no longer necessary and exhibiting excellent volume conservation. Using the obtained solution of the DRLS function, the MI-FEM is coupled with a new meshfree automata (MA) method for efficiently determining the evolving microstructure. Mathematical formulation and implementation will be presented and discussed.Consider a domainΩthat consists of a solid phaseΩSand a liquid phaseΩLsuch thatΩ=ΩS∪ΩLandΩS∩ΩL=0. To describe the solid–liquid interfaceΓ(t)at time t, we introduce a field functionΦsuch that the interface is the zero level set ofΦ:(5)Γ(t)={x∈Ω:Φ(x,t)=0}where t is the time and the field functionΦis taken as a SDF such that the distance of pointx=(x,y,z)to the interface at time t can be represented as(6)d(x,t)=±min‖x−xΓ‖wherexΓlies onΓ(t). The LSF can then be defined as the SDF from the interface:(7)Φ(x,t)=‖x−xΓ‖={d(x,t)∀x∈ΩL0∀x∈Γ−d(x,t)∀x∈ΩSThe diffusion of the solute can be described by using Fick׳s second law of diffusion:(8)∂Cp∂t=∇→·(Dp∇→Cp)where Cpis the composition of the liquid and solid phases, Dpis the inter-diffusion coefficient, t is the time and subscript p=S for solid and p=L for liquid. Diffusivity in solid is computed using the Arrhenius equation:(9)DS=Doe(−Q/RT)where Dois the diffusion frequency factor, Q is the activation energy for diffusion, R=8.31451J/K/mol is the universal gas constant and T is the bonding temperature. Due to the diffusion of the solute, the liquid–solid interface must migrate to ensure mass balance. Migration of the interface can be expressed using the following equation:(10)(CL0−CS0)Vn=−DL∂CL∂n→+DS∂CS∂n→where Vnis the normal velocity of the interface, CL0 is the liquidus concentration, CS0 is the solidus concentration at the bonding temperature and(∂/∂n→)is the directional normal to the interface. The conditions at the interfaceΓ(t)include two DBCs for each side of the interface such thatC(Γ,t)=CS0forx∈ΩSandC(Γ,t)=CL0forx∈ΩL.To solve Eq. (10) we must compute the equilibrium solute concentrations CL0 and CS0 at the curved interface. For isothermal phase change this is expressed as [48–50](11)Cp0=Cpf{1+κEsVat(CLf−CSf)RT}where subscript p=L for liquid and p=S for solid. Cpfis the equilibrium solute concentration for a flat interface often determined from the equilibrium phase diagram, Esis the interfacial energy, Vatis the atomic volume, R is the universal gas constant, T is the isothermal bonding temperature, and κ is the interfacial curvature.The normal vector to the interface can be calculated from the LSF such that(12)n→=∇→Φ‖∇→Φ‖The local curvature at the interface can also be calculated from the LSF such that(13)κ=∇→·∇→Φ‖∇→Φ‖In the absence of convection, propagation of the liquid–solid interfaces is implicitly handled by evolving the LSF through time using(14)∂Φ∂t+Vnext‖∇→Φ‖=0where the speed function Vnextis the extended velocity of the interface within the level set solution domain such that(15)Vnext=VnatΦ=0Consider an interface implicitly defined as the zero iso-contour of a SDF,Φ, arbitrarily intersecting unstructured finite elements. If the sign ofΦis different at any two nodes of an elements edge, then the interface must intersect that edge. It is trivial to obtain the intersection points between the interface and the element edge as shown in Fig. 2by(16)xn=Φ(x2)x1−Φ(x1)x2Φ(x2)−Φ(x1)wherex1andx2are the nodal coordinates of the element edge nodes.These intersection points between the zero iso-contour of the LSF and the underlying mesh are treated as additional degrees of freedoms where they are appended to the global matrices and serve 5 purposes:1.Interpolation function construction at the intersected element using meshfree techniques which satisfy both the partition of unity and the Kronecker-delta properties.Imposition of the DBC at the interface. Since these points already lie at the zero level set at any time during the evolution of the interface, DBC can be applied exactly and easily as in the conventional FEM.Computation of the local normal and interfacial curvature.Computation of the local interfacial velocity.Computation of the extended interfacial velocity.Consider a sampling pointxpat one side of an element intersected by the interface as shown in Fig. 3. Traditionally, popular methods such as the GFEM/XFEM use the meshfree POU method proposed by Melenk and Babushka [21] for enriching the interpolation functions of the intersected element using the classical XFEM/GFEM equation (2).Technically however, any meshfree technique which satisfies the partition of unity property can be applied for constructing the interpolation functions at intersected elements. The main requirement is that all support nodes must either belong to the same phase as that of the sampling point or the interface. There also must be sufficient support nodes to construct the interpolants. In the XFEM/GFEM, this is accomplished by the POU method which has the very attractive ability to incorporate pre-determined analytical solutions as part of the enrichment. This significantly facilitates handling of singularities such as those encountered during crack-tip analysis. The meshfree POU method used for computing the approximation functionsΨ(xj)does not immediately satisfy the Kronecker-delta condition which complicates the manner of imposing DBC directly at the interface.For the purpose of the present work, we choose radial point interpolation using RBF for constructing the interpolation functions for elements intersected by the interface which inherently exhibit the Kronecker delta property in addition to the partition of unity requirement [51–53]. Higher order interpolation at the interface can be easily done by incorporating nodes of adjacent elements of the intersected element as support nodes for generating the interpolation functions. As will be seen later, the RBFs will also play a major role in solving the LSF.An alternative approach for constructing interpolants at the embedded element for the sampling pointxpshown in Fig. 3 where two interface nodesx4andx5are added is to construct radial point interpolants using RBF where the solute concentrationC(xp)at pointxpcan be approximated as(17)C(xp)=H(Φ(x1),Φ(xp))N1(xp)C(x1)+H(Φ(x2),Φ(xp))N2(xp)C(x2)+H(Φ(x3),Φ(xp))N3(xp)C(x3)+N4(xp)C(x4)+N5(xp)C(x5)where for element node i,H(Φ(xi),Φ(xp))is a Heaviside function dependent on the SDF valueΦ(xi)at that node such that(18)H(Φ(xi),Φ(xp))={1ifsign(Φ(xi))=sign(Φ(xp))0ifsign(Φ(xi))≠sign(Φ(xp))Φ(xp)is the SDF value at the sampling pointxp. Since the LSF is a continuous function,Φ(xp)can be easily calculated from(19)Φ(xp)=∑i=1nNi(xp)Φ(xi)whereNi(xp)is the standard Lagrange shape functions at the embedded element where n is the total element nodes.C(xp)can then be re-expressed in a general form as(20)C(xp)=∑i=1nH(Φ(xi),Φ(xp))Ni(xp)C(xi)+∑e=1mNe(xp)C(xe)It is clear that this equation is directly analogous to the classical XFEM/GFEM equation (2) where n is the total number of support nodes at the vicinity of the embedded element, usually nodes of immediately adjacent elements as shown by the green nodes in Fig. 3, and m is the total number of interfacial nodes in the element. The Heaviside function acts as a “switch” which turns on and off the contribution of the surrounding nodes depending on their location with respect to the sampling point. In other words, only support nodes that belong to the same phase or the interface are used for interpolation. For elements that are un-embedded by the interface, the original Lagrange shape functions of the element are used for interpolation.If we let NLagrangebe the interpolation functions constructed using the convectional Lagrange interpolation procedure while NRBFare the interpolants constructed using RBF, and we impose the requirement that(21)∑i=1nH(Φ(xi),Φ(xp))Ni(xp)+∑e=1mNe(xp)=1then for an embedded element:(22)C(xp)=∑i=1nH(Φ(xi),Φ(xp))Ni(xp)RBFC(xi)+∑e=1mNe(xp)RBFC(xe)while for a non-embedded element, where all the nodes belong to the same phase, implying thatH(Φ(xi),Φ(xp))=1and total interface nodes m=0. ThereforeC(xp)simply reduces to(23)C(xp)=∑i=1nNi(xp)LagrangeC(xi)A weighted-residual formulation can then be used to derive the weak-form of Eq. (8) such that(24)∫ΩembeddedW(∂C∂t−∇→·(D∇→C))dΩembedded+∫Ωnon-embeddedW(∂C∂t−∇→·(D∇→C))dΩnon-embedded=0where W is a weight function, taken here as simply the constructed interpolation functions, Ωembeddedis the set of liquid–solid interface-embedded elements, and Ωnon-embeddedis the set of elements not intersected by the liquid–solid interface. This yields a system of equations that can be expressed in matrix form as(25)[M]{C}̇+[K]{C}={F}where{C}̇is the partial derivative of{C}with respect to time,[M]and[K]are the global mass and stiffness matrices, respectively, each of size(n+m)(n+m), and{F}is the global force matrix with size ofn+mwhere the set of interface nodes{xm}are appended to the set of original mesh nodes{xn}such that(26)[K]=[K]non-embedded+[K]embedded(27)[M]=[M]non-embedded+[M]embedded(28){F}={F}non-embedded+{F}embeddedObviously[K]embedded,[M]embeddedand{F}embeddedoccupy zeros everywhere except at the interface nodes and their supports. Similarly,[K]non-embedded,[M]non-embeddedand{F}non-embeddedoccupy zeros everywhere at the indices corresponding to the interface nodes.The presented hybrid meshfree-finite element approach has a number of advantages in comparison to purely meshfree methods. Generally, pure meshfree methods are often time consuming due to:1.Lack of nodal connectivity information.The construction of interpolation functions.In the proposed work, the first problem is non-existent since the nodal connectivity is already defined from the finite element mesh and can be utilized to generate the set of support nodes. The impact of the second problem is significantly reduced since meshfree construction of interpolants is only done at the interface-embedded elements. Additional computational savings are obtained since no special methods are needed to impose the DBC at the interfaces. To construct the meshfree interpolants, NRBF, at the interface-embedded elements, RBFs are employed as discussed next.Combining radial and polynomial basis functions has been used in the meshfree point interpolation method to overcome singularity issues in meshfree methods based solely on polynomial basis [53]. Since it is an inherently meshfree method, the support nodes inside the domain can be arbitrarily distributed and are not limited to the element nodes only. In addition, the resulting interpolants satisfy both the POU and the Kronecker-delta properties allowing for straightforward imposition of the boundary conditions.To construct the RBF, the Euclidean distance r between a sampling pointxpand a nodexiis computed such that(29)r=‖xp−xi‖Common functions include inverse multiquadrics, Gaussian exponential, Thin-plate spline and Logarithmic RBF [42–44]. In the present work, the following Gaussian exponential is used:(30)Ri(xp)=exp(−γ(ridc)2)where dcis the size of the support domain, γ is a shape parameter that is often problem dependent. Notice that an attractive property of this function is that regardless of the order of differentiation, it is continuously differentiable. The effect of γ on the shape of the Gaussian exponential weight functions is shown in Fig. 4. As can be seen, a smaller shape parameter yields a wider, or flatter, weight function which will therefore alter the constructed RBF interpolant. It has been reported in the literature that the optimum shape parameter for Gaussian exponential basis yielding best accuracy is in the range of γ = 0.003–0.03 [54].For our sampling pointxpdiscussed in the previous section, the solute concentration can also be approximated by RBF such that [42–44](31)C(xp)=∑i=1sRi(xp)ai+∑j=1qPj(xp)bj=[R(xp)P(xp)][ab]whereRi(xp)is a RBF evaluated at the sampling pointxp=(x,y,z),Pj(xp)is a monomial evaluated atxp. s is the total number of support nodes, q is the number of polynomial basis functions. aiand bjare unknowns to be determined. For a given pointxpwith a given s support nodes wheres=m+n:(32)[R(xp)]T=[R1(xp),R2(xp),R3(xp),…,Rs(xp)](33)[a]=[a1,a2,a3,…,as]Tand for a given q polynomial basis function:(34)[P(xp)]T=[P1,P2,P3,…,Pq]for a second order polynomial basis function:(35)[P(xp)]T=[1,xp,yp,zp,xp2,yp2,zp2,xpyp,xpzp,ypzp](36)[b]=[b1,b2,b3,…,bq]TTo satisfy Eq. (31) at all support nodes, we express it in matrix form:(37)[CQ]=[RQPQ][ab]where(38)[CQ]=[C(x1),C(x2),C(x3),…,C(xs)]Tand[RQ]is an s×s matrix:(39)[RQ]=[R1(x1)R2(x1)R3(x1)…Rs(x1)R1(x2)R2(x2)R3(x2)…Rs(x2)R1(x3)R2(x3)R3(x3)…Rs(x3)...…....…....….R1(xs)R2(xs)R3(xs)…Rs(xs)]and[PQ]is an s × q matrix:(40)[PQ]=[P1(x1)P2(x1)P3(x1)…Pq(x1)P1(x2)P2(x2)P3(x2)…Pq(x2)P1(x3)P2(x3)P3(x3)…Pq(x3)...…....…....….P1(xs)P2(xs)P3(xs)…Pq(xs)]clearly there ares+qunknowns and only s equations. Therefore, we require to impose the constraint:(41)[PQ][a]=0which yields(42)[CQ]=[RQPQPQ0][ab]=[G][ab]To determine the unknowns[a]and[b]we can re-express this equation to be(43)[ab]=[G]−1[CQ]which can then be substituted back into Eq. (31) to yield(44)C(xp)=[R(xp)P(xp)][G]−1[CQ]=[NRBF][CQ]where[NRBF]are the set of interpolation functions[NRBF]=[N1,N2,N3,…,Ns]computed by(45)[NRBF]=[R(xp)P(xp)][G]−1First and second order derivatives of the constructed RBF interpolants can be computed by(46)[∂NRBF∂u]=[∂R(xp)∂u∂P(xp)∂u][G]−1where∂/∂uis a partial derivative with respect tou={x,y,z,xx,yy,zz,xy,xz,yz}.Properties of the constructed shape functions have already been discussed in detail in the literature [51–53] which include the satisfaction of the partition of unity property:(47)∑i=1sNi(xp)RBF=1In addition to the Kronecker delta property:(48)Ni(xp)RBF={1fori=p0fori≠pand the reproducing property:(49)∑i=1s(Ni(xp)RBF)x=xIn the previous section we presented the MI-FEM for computing the future solute concentration distribution in the solid and liquid phases by implicit representation of the liquid–solid interface. As the solute diffuses from the liquid to solid, the interface must migrate to ensure local equilibrium. Computing the interfacial velocity Vnrequires solving(50)Vn=1(CL0−CS0)(−DL∂CL∂n→+DS∂CS∂n→)One very attractive feature of the presented MI-FEM is that meshfree nodes directly corresponding to the interface is readily available and are automatically generated as the LSF evolves. Knowing that the normal vector is defined by∇→Φ/‖∇→Φ‖and using the RBF interpolants already computed, we can construct liquid and solid points normal to the interface node as shown in Fig. 5such that(51)xliquid=xinterface+δ∇→Φ‖∇→Φ‖(52)xsolid=xinterface−δ∇→Φ‖∇→Φ‖where δ is a normal distance to the interface node taken in this work to be0.3hwhere h is the embedded-element length. The concentration atxliquidandxsolidcan be computed such that(53)C(xliquid)=∑i=1nliqNi(xliquid)C(xi)(54)C(xsolid)=∑i=1nsolNi(xsolid)C(xi)where nliqand nsolare the total support nodes in the liquid and solid phases respectively and Niis the interpolation function corresponding to the support node i. The normal interface velocity can then be computed by(55)Vn=1(CL0−CS0)(−DLC(xliquid)−CL0δ+DSC(xsolid)−CS0δ)This is in agreement with the approach used by Zabaras et al. [35] for computing the interface velocity profile for dendritic growth simulations. While this approach is simple enough for directly computing the gradients on each side of the interface based on the SDF distribution, accumulation of numerical truncation errors may possibly yield a noisy interface velocity profile which may lead to an also noisy interface location. One approach for resolving this issue is to use a non-local smoothing procedure such as that developed by Ji and Dolbow [29] for computing the gradients on each side of the interface. It was shown that the non-local smoothing procedure yielded more accurate results than the direct approach for computing the gradients. For simplification, we will only consider the direct method for computing the interface velocity.Computing the interface curvature requires the solution of(56)κ=∇→·∇→Φ‖∇→Φ‖which is computed by solving(57)κ=(Φx2Φyy−2ΦxΦyΦxy+Φy2Φxx+Φx2Φzz−2ΦxΦzΦxz+Φ2Φxx+Φy2Φzz−2ΦyΦzΦyz+Φz2Φyy)/‖∇Φ‖3where subscriptsu={x,y,z,xx,xy,xz,…}are the respective partial derivative∂/∂u. Clearly, solving for curvature using conventional finite elements is troublesome due to the high order derivatives required. However, the presented meshfree interface approach allows us to compute higher order derivatives at the interface nodes with the condition that sufficient support nodes are available. In the present work, we found that using nodes of the embedded element and nodes of immediately adjacent elements are sufficient in computing the second order interpolants. If additional accuracy is required, one can add nodes of immediately neighbouring elements to the adjacent elements. The partial derivative of the LSF value at an interface node can then be approximated as(58)Φu=∑i=1sNuΦiwhere Nuare the partial derivatives of the interpolation functions with respect to u and s is the set of support nodes.As mentioned earlier, solution of the LSF using standard Galerkin finite element methods will often yield unstable solutions. In the context of finite differences commonly used for solving the LSF, up-winding and stabilization schemes such as the weighted essentially non-oscillating (WENO) scheme are often used for solution of the LSF [38]. However, finite difference solutions are often constrained to structured grids. An analogous stabilization scheme used in solving the LSF in the context of finite elements is the Galerkin-least squares FEM [35]. Unfortunately, even the use of stabilization schemes does not prevent the deterioration of the LSF from a SDF. This is because the solution of the Hamilton–Jacobi equation shown in Eq. (1) does not itself guarantee a SDF solution. As a result, frequent re-initialization of the LSF is necessary to force the LSF back into a SDF. As mentioned earlier, this re-initialization method results in parasitic interfacial movement that is un-physical and unrelated to the physics of the problem which violates mass and volume conservation laws.In Section 2.3 we showed how to construct the interpolants NRBF. We note that these interpolants are dependent on the location of the nodes. Each RBF is radially symmetric around its centre. If we take this centre to be an element node x, then similar to our approach in Section 2.3, one can then express the level set value at x at time t as(59)Φ(x,t)=∑i=1sR(xi)ai+∑j=1qPj(xp)bj=[R(xp)P(xp)][ab]letα(t)=[ab]and letΨ(x)=[R(xp)P(xp)]we also note that the set of RBF,[R(xp)], and the set of polynomial functions,[P(xp)], are dependent on space only while the coefficients[a]and[b]are dependent on time evolution. One can then compute the space–time dependent LSFΦ(x,t)as(60)Φ(x,t)=Ψ(x)α(t)the LSF, in the absence of convection, can then be expressed as(61)∂Φ(x,t)∂t+Vnext‖∇→Φ(x,t)‖=Ψ(x)dα(t)dt+Vnext‖∇→Ψ(x)α(t)‖=0It is clear that the original LSF in its PDE form is now transformed into an ODE. This is precisely the equation obtained by Wang et al. [43], Xie et al. [44], and Gelas et al. [55]. However for the purpose of our analysis we would like to re-express this equation in terms of the interpolants similar to those generated in Section 2.3 where we found that for a set of support nodes the interpolants can be expressed as(62)[NRBF]=[R(xp)P(xp)][G]−1=Ψ(x)[G]−1(63)α(t)=[ab]=[G]−1[ΦQ]Using Euler׳s forward differencing for the time derivative, we can re-express Eq. (61) as(64)Ψ(x)α(t+1)=Ψ(x)α(t)−ΔtVnext‖∇→Ψ(x)α(t)‖therefore(65)Ψ(x)[G]−1[ΦQ]t+1=Ψ(x)[G]−1[ΦQ]t−ΔtVnext‖∇→Ψ(x)[G]−1[ΦQ]t‖which can be re-expressed as(66)[NRBF]T[ΦQ]t+1=[NRBF][ΦQ]t−ΔtVnext‖[∇→NRBF]T[ΦQ]t‖since[NRBF]T[ΦQ]t+1≃Φ(x,t+1)and[NRBF]T[ΦQ]t≃Φ(x,t)then Eq. (64) can be re-expressed as(67)Φ(x,t+1)=Φ(x,t)−ΔtVnext‖[∇→NRBF]T[ΦQ]t‖in order to maintainΦ(x,t)as a SDF, the following conditions must be satisfied:(68)∂Φ∂t=Vnext(69)‖∇→Φ‖=1(70)∇→Vnext.∇→Φ=0(71)Vnext|(Φ=0)=VnLi et al. [38] proposed a variational approach where a penalization diffusion term is added to the LSF which forces it to be a SDF such that(72)∂Φ(x,t)∂t=−Vnext‖∇→Φ(x,t)‖+∇→·(D(Φ)∇→Φ(x,t))whereD(Φ)is a diffusion term expressed as(73)D(Φ)=1−1‖∇→Φ‖if‖∇→Φ‖>1then the diffusion rateD(Φ)is positive and the diffusion is forward which decreases‖∇→Φ‖. Conversely, if‖∇→Φ‖<1then the diffusion rateD(Φ)is negative and the diffusion is backward which increases‖∇→Φ‖. The diffusion term forces‖∇→Φ‖to 1 to maintain the signed distance property. However, notice that as‖∇→Φ‖approaches zero, the diffusion term tends to minus infinity which may result in instability at that region. To avoid this, we use a double-well function proposed by Li et al. [38] such that(74)p(‖∇→Φ‖)={1(2π)2(1−cos(2π‖∇→Φ‖))if‖∇→Φ‖≤112(‖∇→Φ‖−1)2if‖∇→Φ‖≥1This potential function has two minimum points at‖∇Φ‖=0and‖∇Φ‖=1. Taking the first derivative of the potential function with respect to‖∇Φ‖yields(75)p(‖∇→Φ‖)′={12πsin(2π‖∇→Φ‖)if‖∇→Φ‖≤1‖∇→Φ‖−1if‖∇→Φ‖≥1The diffusion termD(Φ)can then be expressed as(76)D(Φ)=p(‖∇→Φ‖)′‖∇→Φ‖=p(‖[∇→NRBF]T[ΦQ]t‖)′‖[∇→NRBF]T[ΦQ]t‖The final form of the DRLS function solved using meshfree RBF becomes(77)Φt+1=Φt−ΔtVnext‖[∇→NRBF]T[ΦQ]t‖+∇→·(D(Φ)∇→Φ)in the presence of convection this equation becomes(78)Φt+1=Φt−ΔtVnext‖[∇→NRBF]T[ΦQ]t‖−ΔtV→.([∇→NRBF]T[ΦQ]t)+∇→·(D(Φ)∇→Φ)Clearly this equation is non-linear where the diffusion term,D(Φ), is dependent on the LSF valueΦ. As a result, an iterative solution is required. Our investigations have shown that a converged solution is obtained using a direct iterative method after only a few iterations with a convergence tolerance of about 1E−10.To solve the DRLS function, we still need to determine a velocity function Vnextsuch that Eq. (71) is satisfied. Traditionally, the fast marching procedure is often used for re-initializing the LSF and extending the interfacial velocity. The basic idea is to sweep the front ahead in an upwind fashion by considering a set of points in a narrow band around the existing front and to march this narrow band forwards, locking the values of existing points and bringing new ones into the narrow band. In each iteration, the band node with the smallest value ofΦis to be re-initialized.The presented MI-FEM makes the process of determining the extended velocity Vnextquite simple with no need for fast marching algorithms or book-keeping the set of nodes to be re-initialized. Due to the following properties of the proposed approach:1.The LSF is forced as a SDF at the vicinity of the interface.At any time during the evolution of the interface, there is always a set of meshfree nodes that immediately correspond to the interface.The constructed interpolants at the meshfree interface nodes satisfy the Kronecker-delta property at the interface-embedded elements such that the interfacial velocity in Eq. (71) can be imposed precisely as DBC.We emphasize that there is no need to solve the DRLS in (77) or the Laplacian equation (79) in all of the domain. Similar to the conventional LSM, only the data at a narrow-band around the interface is needed for computation. In the present work, only nodes within a narrow band of about 6h thick (3h ahead of the interface and 3h behind the interface) were used for computation. This reduces the computational time especially if the size of the interface is significantly smaller than the total size of the computational domain.So far, our proposed MI-FEM has been presented to predict the liquid–solid interface propagation where the liquid phase is identified asΦ>0and the solid phase is identified asΦ<0. Consider a case of solidification where simultaneous growth of multiple solid phases each withΦ<0occurs. Obviously the crystallographic orientation of the solid phases are rarely ever the same. As a result, during growth of the solid, grain formation occurs where grain boundaries will exist between two grains of different crystallographic orientation. The presented MI-FEM so far can only predict the evolution and location of solid regions but not their crystallographic orientation. One way to enable prediction of the crystal structure using the proposed method is to use a multi-level set approach where multiple level sets are introduced such that each LSF corresponds to some crystallographic orientation defined by a spin index integerS>0. However, this approach is rather computationally intensive. In this work we used a single LSF where all the solid phases, regardless of their crystallographic orientation, have a SDF value ofΦ<0. The MI-FEM is coupled with a meshfree automata (MA) method to predict the crystal structure based on the distribution of the LSF.A cellular automaton is a dynamical system, in which space, time, and the states of the system are discrete. It was first developed by John Von Neumann in 1963 after a suggestion by Ulam [56] to study universal copiers and destructors. It was later analysed by Wolfram [57] in the 1980s. Cellular automata (CA) methods provide a framework to simultaneously study changes in the entire computational domain. This makes the method very useful in studying microstructural evolution and complex systems. It can also provide fast implementation on parallel computers due to the inherent parallelism of the CA structure. CA methods applied in materials science generally involve discretizing the microstructure into cells where each cell can have a finite number of states such as concentration, temperature, or phase order parameter. The basic idea of CA for phase change studies is to mimic interface propagation by capturing transition from nearby liquid cells to the solid body according to certain criteria, or a “rule”, which governs the future state of a cell based on its current state and the states of its neighbouring cells, which can be a Neumann-type or Moore-type, in a square cell lattice. A review of CA modelling of microstructural evolution can be found in [58–60].Coupling of CA and the FEM has been done previously for modelling phase transformation and predicting the microstructure of castings and can be attributed to the excellent works by Gandin and Rappaz [61] and Gandin et al. [62]. In their approach, a secondary “micro” CA grid is imposed on a “macro” finite element mesh and a coupling procedure is done where thermal distribution is computed at the finite element mesh, the data is then interpolated onto the CA grid where the CA transformation rule is then applied to evolve the solid fraction of the cell and determine the evolving microstructure. One of the issues of this approach is that there is no link between the CA grid and the finite element mesh. In other words, to interpolate data between the FE mesh and the CA grid, one must first determine which finite element occupies a CA grid cell. Since this information is not readily available, a searching algorithm is required. Clearly, this process would be very time consuming for complex more realistic 3D CAD models of actual components. Another down side to imposing CA grids on finite element meshes is that the structured nature of the CA grids leads to grid anisotropy issues which are well reported in the literature where a review can be found in [63]. It is found that grid orientation may have a significant effect on the CA evolution. Methods to mitigate this issue include random sampling, rotating grids, among others. Another limitation of this approach is that the FE model completely ignores the inter-element discontinuities across the interface which may arbitrarily intersect the finite elements. In other words, the stiffness matrix for an element is simply weighted by the corresponding local solid volume fraction regardless of the orientation of how the interface intersects the element. This is mainly due to the solution of a volumetric enthalpy equation which can only predict the presence of a “mushy zone” at which the interface resides. Additionally, since phase transformation is computed at the automata cell, curvature of the interface must be some how calculated. However, since only the solid fraction is tracked, not the interface itself, curvature can only be roughly approximated using a counting-cell method such as that proposed by Nastac [64].In the present work, no secondary CA grids imposed on the FE mesh are needed. A meshfree automata (MA) approach where “micro” meshfree automata points are embedded inside the finite elements of a “macro” mesh. The transformation of an automaton׳s state is governed by a rule dependent on the DSLS solution determined in the previous section, and on the state of immediately neighbouring automata points.To clarify, during pre-processing, random MA points are generated inside all elements. All MA points are initially set to a default state of “dead”. It is important to note that these MA points are generated only once during pre-processing and are fixed in space throughout the simulations. Only their binary states change during evolution. The SDF values of the MA points are interpolated from that of the FE mesh nodes such that if a point hasΦ>0it is assigned a phase parameter of 0 (liquid phase) and it is 1 ifΦ<0(solid phase). Automata points with a phase parameter of 1 are assigned a spin index representing the crystallographic orientation taken as a random integer>0for a solid phase and 0 for a liquid phase.During a simulation, only automata points within an embedded element and its immediately adjacent elements are set to a state of “alive”. Once the future solution of the DRLS has been computed, as shown in Fig. 6, a liquid MA point (shown as green points) at an initial time t=0 with spin index S=0 andΦ>0will have LSF valuesΦ<0at the next time step. To determine the new spin index S of the MA point, we determine its closest MA point withS>0andΦ<0obtained by computing the Euclidean distance between the transformed MA point and its nearest neighbour MA points which are simply taken as the embedded MA points inside the embedded element and its immediately adjacent elements. The spin index of the transformed point then inherits that of the closest solid MA point. This is summarized in Algorithm 1.Algorithm 1MA rule to determine the spin index S of a solidified MA point.fore=1 to TotalEmbeddedElementsdofori=1 toelement(e).TotalMAPointsdoifSi=0andΦi<0thenSpin=S(min(‖xi−{x}neighbours‖))ifSpin>0thenSifuture=SpinelseSifuture=Siend ifend ifend forend forOur MA approach has a number of attractive advantages:1.No secondary CA grids overlayed on the FE mesh are required to transfer the data between each. We have prior knowledge which element occupies an MA point.Due to the lack of structure of MA points, grid anisotropy problems often encountered in CA due to structured grids are absent.Due to the localized implementation of MA inside the interface-embedded elements, searching for the nearest MA points is limited to only the MA points within the interface-embedded element and its adjacent elements only resulting in a more efficient implementation.However, two obvious questions to successfully implement the MA rule arise:1.How to efficiently generate random MA points inside elements and not require any searching algorithms to determine which element occupies an MA point.How to efficiently interpolate the LSF values from the FE mesh nodes to approximate the LSF values at the embedded MA points.Instead of generating random points arbitrarily in a region inside the domain, we loop over the elements requiring the generation of MA points where, for a 2D case, MA points bounded inside a triangular element can be generated using Algorithm 2. For 3D cases, MA points bounded inside a tetrahedral element can be generated by using Algorithm 3.Algorithm 2Generating random MA points inside a 2D 3-node triangular element.fori=1 to TotalMAPointsdor1=random(0,1)r2=random(0,1)a=r1b=1−r2px=(1−a)x1+abx2+ar2x3py=(1−a)y1+aby2+ar2y3pz=(1−a)z1+abz2+ar2z3end forGenerating random MA points inside a 3D 4-node tetrahedral element.fori=1 to TotalMAPointsdos=random(0,1)t=random(0,1)u=random(0,1)ifs+t>1thens=1.0−st=1.0−tend ifift+u>1thentmp=uu=1−s−tt=1−tmpend ififs+t+u>1thentmp=uu=s+t+u−1s=1−t−tmpend ifa=1−s−t−upx=x1a+x2s+x3t+x4upy=y1a+y2s+y3t+y4upz=z1a+z2s+z3t+z4uend forClearly, the MA rule, as shown in Algorithm 1, is dependent on the LSF value at the MA point. This can be obtained by interpolating the LSF values of the vertices of the bounding element. We use Shepard׳s interpolation such that(80)Φ(p)=∑inwiΦ(xi)∑inwiwhere wiis(81)wi=1‖p−xi‖γand p is the location of MA point,xiis node i of the bounding element, n is the total number of element nodes, andγ=1. Note that any meshfree interpolation method, such as RBF, can be used to approximate the LSF at the MA point. However we use Shepard׳s method mainly due to its simplicity and due to the fact that no derivatives of interpolants are required.The presented MI-FEM provides an alternative approach for handling dynamic implicit geometries during phase transformation analysis. In this work, we will only consider the case of solutal melting and solidification where a strong discontinuity with a sharp drop in solute concentration occurs at the interface and DBCs must be satisfied precisely on each side of the interface.For simplification, analysis of solutal phase transformation is done under the following assumptions:1.Diffusivity of the solute is assumed constant in both the solid and the liquid.Diffusivity of the solute is isotropic.Melt convection is not present.To solve the problem, for a given fixed unstructured or structured mesh where a SDF which implicitly defines the liquid–solid interface has been generated the following computational algorithm is implemented:1.Compute the set of intersection points between the zero level set and the underlying mesh and append to list of nodes.Using the distribution of the LSF, compute the global matrices at non-embedded elements using the conventional FEM.Using the distribution of the LSF, update the global matrices at embedded elements by constructing RBF interpolants using nodes of the embedded elements and nodes of adjacent elements as support nodes.Solve the system of equations to obtain the future solute distribution in both the solid and liquid.Using the interface nodes generated in step 1 and the distribution of the LSF, compute interface curvature and velocity.Extend the interface velocity to sufficient neighbouring nodes.Evolve the DRLS using RBF interpolation.Using the final converged solution of the LSF, evolve the MA points at interface-embedded elements to determine the microstructure.The procedure is then repeated for the next time step. It is clear from the algorithm that the implicit LSF governs the handling of inter-element discontinuities and interfacial evolution.

@&#CONCLUSIONS@&#
In this paper we have presented the meshfree interface-finite element method (MI-FEM) as a hybrid meshfree/finite element approach tailored specifically for handling phase transformation problems in 2D and 3D. The theoretical foundation of the MI-FEM has been presented where its main characteristics can be summarized as follows:1.Representation of solid phases immersed in liquid as dynamic implicit geometries using level set signed distance functions.Tracking of interfaces using distance-regularized level sets which eliminates the requirement to re-initialize the level set solution.Automatic generation of meshfree interface nodes based on the distribution of the signed distance function.Construction of interpolants at interface-embedded elements using meshfree methods which satisfy the Kronecker-delta and partition of unity properties.Ability to impose the essential boundary conditions on the interfaces directly and precisely without any additional numerical procedures or treatments.Based on the level set solution, meshfree automata is used for predicting the crystallographic microstructure during phase transformation.The method has been applied in sharp-interface modelling of isothermal solutal melting and solidification in a binary system where it is found very suitable for handling phase transformation problems.