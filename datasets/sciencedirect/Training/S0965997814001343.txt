@&#MAIN-TITLE@&#
A bilevel integer programming method for blended composite structures

@&#HIGHLIGHTS@&#
A new optimization algorithm is presented for manufacturable composite structures.The structure weight is optimized taking the stacking sequences as design variables.The constraints are the mechanical behavior of structure and the manufacturing rules.The manufacturing rules are taken into account using a backtracking procedure.A bilevel integer programming method is proposed to solve this problem.

@&#KEYPHRASES@&#
Integer programming,Bilevel optimization,Backtracking,Composite structures,Design rules,Structural optimization,

@&#ABSTRACT@&#
This paper proposes a new approach for the design of a composite structure. This approach is formulated as an optimization problem where the weight of the structure is minimized such that a reserve factor is higher than a threshold. The thickness of each region of the structure is optimized together with its stacking sequence and the ply drop-offs. The novelty of this approach is that, unlike in common practice, the optimization problem is not simplified and split into two steps, one for finding the thicknesses and one for the stacking sequence. The optimization problem is solved without any simplification assumption. It is formulated as a bilevel integer programming and it uses the backtracking procedure to satisfy the blending and the manufacturing rules. Some numerical experiments are performed to show the efficiency of the proposed optimization method over complex cases which cannot be solved with the existing methods.

@&#INTRODUCTION@&#
In the recent years, composite materials have taken a growing importance in the aeronautical industry. Because they exhibit high performance properties and lead to a considerable weight reduction, they can be an alternative choice in the design of many aircraft parts. The design and manufacturing processes of a panel are based on a ply drop-off technique. If the panel is divided into regions (Fig. 1), each ply does not necessarily cover all the regions but some regions of it. As a consequence, the panel has a varying thickness over the surface of the panel which leads to a weight reduction. The fiber orientation in each ply can take one of the following values:{-45°,0°,45°,90°}. The angle sequences of each region of the panel have to satisfy the blending and the manufacturing rules. The angle sequences must contain a fixed number of plies of each orientation, two consecutive angles cannot have a difference of90°, there can be at most four consecutive identical orientations and the sequences must be symmetric. These constraints are called the design rules. The continuity of the plies between two adjacent regions of the panel is referred to as the manufacturing rules. The nature of such rules make the optimization problem a combinatorial one.Many optimization methods based on genetic algorithms have been developed to address this specific problem. They differ by the technique which is used to satisfy the design/manufacturing rules. In [1–6], the manufacturing constraints are addressed using a penalty approach. In [7,8] a sub-laminate approach is used where regions sharing the same sub-laminates are grouped into one design variable. This method can guarantee the continuity of the plies in all the regions (blended structure).In [9–12], the continuity of the plies (the blending) is satisfied by a guide-based design. It gives blended structures but it does not provide a lot of flexibility in the design of the panel: the stacking sequence of the thickest region imposes the stacking sequences of the all other regions. For a given stacking guide, only one sequence can be assigned to each region. To overcome this difficulty, a general definition of the blended sequences design is proposed in [13]. The blending constraint is taken into account with a penalty approach. However, severe stress concentration can be observed when the panel is not blended. The authors of this paper found that the penalty approach is not an efficient choice for satisfying the blending constraints. Another blending approach is the one described in [14,15], where the sequences of the regions are arranged into sets of plies which satisfy the blending principles. The approach in these two papers have the advantage of using the lamination parameters to compute the buckling instead of running expensive finite elements analysis.In [16], the stacking sequence optimization problem is formulated as a linear integer programming problem where the orientation of each ply is modeled with four binary variables. The purpose of using these binary variables is to derive a mathematical expression of the manufacturing constraints. A linear expression of the buckling load is derived with respect to the stacking sequence in the case of a panel with one region. The paper studied the case of a panel of one region with eight unknown plies to be optimized. This approach is limited to the case of such a panel. It cannot handle the general case of a panel with regions of different thicknesses, like in Fig. 1, because no linear expression for the buckling load can be derived. The same drawbacks have been found with the topology optimization approach proposed in [17–19]. They are able to optimize the buckling load with the manufacturing constraints but for a fixed blending scheme.In [20], the authors have proposed a combinatorial method to optimize a buckling load with respect to the stacking sequence guide and the ply drop-offs, but the thicknesses were constant. This method has also been compared with other existing methods in [21] and in the case of single stacking sequences without blending. In this paper, the design of a composite panel is formulated as a bilevel integer programing where the weight of the panel is minimized subject to the buckling load higher than a safety threshold. The thicknesses of the regions are expressed in number of plies and they are updated together with the stacking sequence guide and the ply drop-off. The manufacturing and design rules are satisfied using the backtracking approach proposed in [20]. This approach does not use any approximation of it and can be generalized to a reserve factor of any type. The advantage of this approach over the classical one is discussed in the next section. The proposed algorithm in the paper only deals with the laminates of the structure and it cannot deal with other kind of composites. Therefore, the other parts of the structure remain constant during the optimization of the laminates. This is a limitation of the algorithm. If one is interested in optimizing the other parts, this must be after the optimization of the laminates and using other methods.The full design of a composite panel consists in minimizing the weight of the panel and satisfying some buckling load constraints. This task is commonly divided into two steps, like in [14].•First step: this step gives a global description of the panel without the details on the stacking sequences. The computation of the buckling loads is based on the following assumption. Four different orientations are considered and the stacking sequence of each region is divided into four parts, each part is associated to an orientation and has its own thickness (see Fig. 2). The design variables are the thicknesses per orientation and per region. They are continuous variables. Gradient based optimization methods over a finite elements code can be used to solve this problem.Second step: from the resulting thicknesses per orientation and per region of the preceding step, the number of plies of each orientation in each region is deduced. This step gives a detailed description of the stacking sequences by giving the arrangement of the plies in each region. Starting from the optimal configuration of the first step, the plies are permuted such that the panel comply with the blending and design rules and the buckling load is maximal.This approach has the drawback that the sequences do not have a direct control over the thicknesses. If the second step gives a buckling load which is less than the safety threshold, then the thicknesses must be increased otherwise the overall optimization fails. If the second step gives a buckling load larger than the safety threshold, then the weight is not optimal and the thicknesses must be decreased.Moreover the manufacturing constraints are hardly satisfied using the penalty method. The computational cost is high because two optimization problems are solved with two expensive methods.The proposed bilevel approach overcomes these drawbacks by seeking simultaneously the thicknesses and the stacking sequences. At each iteration, the buckling load is computed using the current admissible stacking sequences. The thicknesses are updated according to this computed value. Then, the stacking sequences are updated based on the new thickness values.Paper [20] studies the optimization problem of the second step. It considers a structure with different regions. Each region has its own thickness and it is defined by the number of plies. These thicknesses can be defined from a preliminary design of the structure and they are the input of the optimization problem of our interest. The numerical example in the paper takes a panel of 8×6 regions, one region has 35 plies, some regions have 25 plies, others have 23 plies,… The optimization problem seeks to maximize the buckling load with respect to the stacking sequence of each region such that the structure is manufacturable. A new optimization algorithm is proposed in [20]. It has the advantage over the existing ones (GA, topology optimization) that all the manufacturing constraints are satisfied at each iteration. Note that this second step, and thus the proposed optimization algorithm, does not affect the weight of the structure. It only improves its reserve factor given the thicknesses of the regions.This paper proposes a new approach for the design of a composite structure which combines the two steps into one. The underlying optimization problem is the following. Minimize the weight of the structure with respect to the thicknesses of the regions such that the reserve factor is higher than a threshold and the stacking sequences are manufacturable. A new algorithm is proposed to solve this new formulation based on the one in [20]. Satisfying the constraint in the new formulation, which is the reserve factor is higher than a threshold and the stacking sequences are manufacturable, is the same as the optimization problem in [20]. For this reason, the new algorithm is based on this one. The new feature of this new algorithm with respect to the one in [20] is that it minimizes the weight and finds the thicknesses of the regions of the structure in addition to finding the corresponding manufacturable stacking sequences.Consider a panel composed of six regions, each one has its own thickness (see Fig. 1). Let A and B be two adjacent regions such that the thickness of B is smaller or equal to the thickness of A. If the panel is blended, then the set of plies composing region B must be a subset of the one of region A: some plies of region A are prolonged into region B and the others are dropped.The ply drop-offs are not fixed in advance but they are parametrized with a permutation vector D. It is explained in the following. Let N be the number of plies of the sequence guide. Consider aN×Nlower triangular matrix. This matrix defines a ply drop-off scheme. Each column of this matrix gives the set of plies for a given thickness. The first column corresponds to the thickness equal to N plies and has all its rows equal to one. The second column corresponds to the thickness equal toN-1and has all its rows equal to one except the first one which is equal to zero. This means that the region of thicknessN-1has all the plies of the region of thickness N except the first one. The third column has all its rows equal to one except the first two which are equal to zero. Thus, plies number 1 and 2 are dropped to get a stacking sequence ofN-2plies from a sequence of N plies and ply number 2 is dropped to get a stacking sequence ofN-2plies from a sequence ofN-1plies. The same reasoning applies to any thickness between N and 1. This ply drop-off scheme defined by a lower triangular matrix is a blended one because the set of plies of a region of thickness is present in all the thicker regions.Now if the rows of this lower triangular matrix are permuted according to a permutation vector D, another ply drop-off scheme which is also blended is defined because it is based on the lower triangular matrix. Therefore, the vector D can define all the possible ply drop-off schemes. This permuted lower triangular matrix is called a drop-off table. An element(i,j)of this table indicates whether ply i belongs to the set of plies of thickness j or not. Note that the number of regions in the panel is independent from the number of columns in the drop-off table. The stacking sequence of each region is deduced from its thickness and its corresponding column in the drop-off table. The table gives a stacking sequence for any value of the thickness even if no region in the panel has this value.Fig. 1 shows a drop-off table including this permuted lower matrix. In the example,D=(5,6,7,1,3,4,2), region 6 of thickness 7 has the plies(1,2,3,4,5,6,7)and region 3 of thickness 5 has of the plies(1,2,3,5,6). The plies which are dropped between these two regions are grayed in the table. They correspond to the plies having entries equal to 1 in the thickness 7 and 0 in the thickness 5. Note that with 7 plies, it is possible to have 7 different values for the thickness, even though only 6 of them are present in this particular panel.Letuibe the ply sequence of the region i of the panel. We haveu1=(1,2,3,5,6,7),u2=(1,2,3,6),u3=(1,2,3,5,6),u4=(2,3),u5=(1,2,3)andu6=(1,2,3,4,5,6,7). The design rules have to be applied to these ply sequences: the ply orientations of the stacking sequence guide must be chosen such that these ply sequences are admissible. The design rules are the following.•The orientation in each ply must be chosen such that two consecutive plies do not have a gap in the orientation equal to90°. Thus, (0°,90°) and (-45°,45°) cannot be two consecutive plies in all the regions of the panel. This rule aims to reduce the delamination risk at free edges.Maximum four consecutive plies in each region can have the same orientation. This rule reduces the progressive damage between the plies.Symmetric ply sequences. The laminate is symmetric so the stiffness matrix B is equal to zero. In this case, there is no coupling between the in-plane and out-of-plane effects. This also avoids bending and torsion of the laminate during the cooling phase which follows the curing process.A fixed number of plies of each orientation is defined in each region. This constraint is typically found in a global/local optimization framework as it is explained in [22,23] or with the two-steps optimization method in Section 2 and [14]. Note that this rule includes the case of a balanced sequence.Other constraints, can also be considered. For example, avoiding the sandwich laminates by imposing an additional manufacturing rule which is imposing a maximum of four consecutive dropped plies between two adjacent regions. In the following section, the mathematical formulation of the design rules is derived. It gives the mathematical relationship between the angles sequences and the ply drop-offs.Each ply can have one of the four possible orientations which are(-45°,0°,45°,90°). For each plyi=1…N, there are four binary variablesSi-45,Si0,Si45,Si90which represent the presence or the absence of orientationθat ply i. LetS={S-45,S0,S45,S90}∈{0,1}4Nbe a vector which represents the orientation sequence of the thickest region. S is the stacking sequence guide. One can deduce the first constraint on S which says that only one orientation is assigned to each ply:Si-45+Si0+Si45+Si90=1,i=1…N.LetNrbe the number of regions in the panel,t∈NNrthe vector of thicknesses of all the regions andurthe ply sequence of the region r. In the previous example we hadNr=6, the thicknesses of the regionstrwere{6,4,5,3,5,7}and the ply sequenceurof each region r is given byu1=(1,2,3,5,6,7),u2=(1,2,3,6),u3=(1,2,3,5,6),u4=(2,3),u5=(1,2,3)andu6=(1,2,3,4,5,6,7). The design rules must be applied to each of these sequences. Note that these sequences are derived from the specific ply drop-off scheme in the example, for whichD=(5,6,7,1,4,2).The rule which prevents two consecutive plies from having an orientation gap of90°is written as:Suir-45+Sui+1r45<2,Suir0+Sui+1r90<2,Suir45+Sui+1r-45<2,Suir90+Sui+1r0<2,r=1…Nr,i=0…tr-1,whereuirandui+1rare the indexes of two consecutive plies in a region r.The rule of having maximum four consecutive identical angles in each region is expressed as:Suir-45+Sui+1r-45+Sui+2r-45+Sui+3r-45+Sui+4r-45<5,Suir0+Sui+1r0+Sui+2r0+Sui+3r0+Sui+4r0<5,Suir45+Sui+1r45+Sui+2r45+Sui+3r45+Sui+4r45<5,Suir90+Sui+1r90+Sui+2r90+Sui+3r90+Sui+4r90<5,r=1…Nr,i=0…tr-1.The rule of having a fixed number of plies of each orientation is expressed as:∑i=0tr-1Suir-45=n-45r,∑i=0tr-1Suir0=n0r,∑i=0tr-1Suir45=n45r,∑i=0tr-1Suir90=n90r,r=1…Nr,wherenθris the fixed number of plies having orientationθin the region r. Takingn45r=n-45rmakes the structure balanced.Finally with the symmetry constraint, only the half upper part of the stacking sequence guide is considered. This constraint is coupled with the constraint of having maximum four identical plies. The orientations of the last three plies from the middle of the sequence must not be identical otherwise we have six consecutive identical plies:Sutrr-45+Sutr-1r-45+Sutr-2r-45<3,Sutrr0+Sutr-1r0+Sutr-2r0<3,Sutrr45+Sutr-1r45+Sutr-2r45<3,Sutrr90+Sutr-1r90+Sutr-2r90<3,r=1…Nr.All of these constraints are linear combinations of the elements of S and they depend on D through the indexesuir. These constraints can be written in a condensed matrix form as:(1)Ct(D)S≦z,whereCt(D)is a binary matrix and z is a vector grouping right-hand sides of the constraints equations.In this section, the ingredients of the optimization algorithm are given.The Levenshtein distance between two stacking sequences is the number of operations needed to transform one sequence into another one. The allowed operations are insert, delete and change. For example, letS1={-45,0,45,90}andS2={-45,0,45,0,90}. The Levenshtein distance between these two sequences is equal to one because one insertion of 0 is needed to transformS1intoS2. This distance measures the amount of difference between two sequences. It is a metric that is used to define later a neighborhood of a sequence.This definition is extended to the distance between two panels defined be(t1,S1,D1)and(t2,S2,D2). This distance,D((t1,S1,D1),(t2,S2,D2)), is the sum over the regions of the distances between the respective sequences.First, the following primal problem is defined. for a given ply drop-off scheme D and a vector t ofNrthicknesses, find all sequence guides S which are admissible with respect to D and t. LetAt(D)be this set of admissible sequence guides:(2)At(D)=S,suchthatCt(D)S≦zandS∈{0,1}4N.Second, the following dual problem is defined. For a given sequence guide S and thickness vector t, find all the ply drop-offs D for which S is admissible. In this case,At′(S)denotes the dual set:(3)At′(S)=D,suchthatCt(D)S≦zandD∈Sym(1…N),whereSym(1…N)is the group of all permutations over the set of integers(1…N).The enumeration of the elements of these sets is based on backtracking algorithms which will be presented in Section 6.LetD(S1,S2)be the Levenshtein distance between two sequences andD(D1,D2)be the one between two ply drop-offs. We finally define the neighborhood of a sequenceS1∈At(D)and the one of a ply drop-offD1∈At′(S)as:(4)VD,td0(S1)={S2∈At(D)suchthatD(S1,S2)⩽d0},(5)VD,td0(D1)={D2∈At′(S)suchthatD(D1,D2)⩽d0},for some predefined integerd0. The first one is the set of admissible sequence guides with respect to D that differ fromS1byd0operations. The second one is the set of ply drop-offs for which S is admissible and differ fromD1byd0operations.LetM(t)be the set of couples(S,D)such thatS∈At(D). It is the set of(S,D)such that the panel has thickness vector t and the sequence of each region is admissible. The projection operator is explained using the example in Fig. 3. The first panel has the thickness vectort1={5,3,2}and the stacking sequences are defined by(S1,D1)in the figure. The second panel has the thickness vectort2={6,4,1}but its stacking sequences are defined by(S2,D2)are unknown. One can see that the thicknesses of the first panel do not fit the second panel. One ply has to be added to regions 1 and 2 respectively and one ply has to be removed from region 3. The projection operator seeks to find(S2,D2)∈M(t2)such that the Levenshtein distance between these two panels is minimal. It gives the panel of thickness vectort2such that its stacking sequences are admissible and they are the most similar to the ones of the first panel. The projection operator is formulated as the following optimization problem:(6)min(S2,D2)D((t1,S1,D1),(t2,S2,D2)),s.t.(S2,D2)∈M(t2).In this section, the backtracking algorithm is presented. It aims at solving the primal and dual problems defined in (2) and (3) with a combinatorial procedure. Only the general idea of algorithm is presented. A detailed explanation of the backtracking concept can be found in [24–26].Finding admissible sequence guides or ply drop-offs is not a trivial task given the combinatorial nature of the constraints. Most of the time, one cannot guess intuitively such sequences and computer-based algorithms must be used to perform this task.The easiest but not the most efficient way to find sequence guides which are admissible for a given ply drop-off is the so-called brute-force enumeration. It consists in enumerating all the sequence possibilities and checking for each one its admissibility. The main disadvantage of this method is that its computational cost grows exponentially with the number of plies. For example, forN=16plies there are416=4,294,967,296 possibilities to be checked and forN=32plies there are432≊1.844×1019possibilities! A more sophisticated technique has to be used in order to decrease the number of possibilities to be checked.Enumerating all possible sequence guides consists in building an enumeration tree like in Fig. 4. Each level of the tree represents a ply and each node has four children which are the four possible angle values of the next ply. The enumeration tree must haveN+1levels. A stacking sequence guide is a branch of the tree connecting the root to a leaf (the lowest node). One can see that the size of the tree grows exponentially with N and spanning the whole tree becomes quickly unfeasible.The idea of the backtracking is to span the entire tree and to check at each node the admissibility of the partial stacking sequence constituted by the branch going from the root to the current node. If the partial sequence violates the constraint, then all the sub tree derived from the current node is eliminated (see Fig. 4). This pruning technique reduces considerably the size of the tree and makes the enumeration efficient. For example in Fig. 4, all the sub-sequences starting with(-45,45),(0,90),(45,-45)and(90,0)are pruned from the tree because they violate the90°gap rule. The leaves of the pruned tree are only the admissible sequence guides.The optimization problem is formulated as follows:(7)mintW(t),s.t.max(S,D)B(t,S,D)>c,(S,D)∈M(t),whereW(t)is the weight of the structure depending on the thickness vectort,B(t,S,D)is the buckling load and it must be higher than a safety threshold c. The couple(S,D)must give in each region an admissible sequence with respect to the blending and the manufacturing rules. Note that the proposed optimization method is not restricted to a certain type of a reserve factor. One can choose buckling, delamination, micro strains, repairability or any other reserve factor.The objective function only depends on t. For each value of t, a couple(S,D)is sought such that the buckling loadmaxB(t,S,D)is higher than c and in the admissible set of sequences defined byM(t). Seeking such a couple(S,D)is formulated as an optimization subproblem and the over whole formulation is a bilevel one.The optimization algorithm is the following. At iterationk,(Sk,Dk)are inM(tk). The buckling loadB(tk,Sk,Dk)is evaluated and the update oftkis based on the value of the buckling load. IfB(tk,Sk,Dk)>c,tkis updated with a random value vectortk+1such that it is in the neighborhood oftkandW(tk+1)<W(tk). IfB(tk,Sk,Dk)<c,tkis updated with a random value vectortk+1such that it is in the neighborhood oftkandW(tk+1)>W(tk).The update oftkis directly connected to the value ofB(tk,Sk,Dk). Giventk+1,(Sk,Dk)is updated as follows. It is projected overM(tk+1)to find a(Sk,Dk)pwhich fits the new thickness vectortk+1. The optimization subproblem of seekingB>cis solved by taking(Sk,Dk)pas an initial point and(Sk+1,Dk+1)is set to the solution of the optimization subproblem.The optimization algorithm requires, at each iteration k, solving two optimization subproblems: the projection operator and maximizing the buckling load. However, these two subproblems are not expensive in computations, because the first one is based on an analytical function (the Levenshtein distance) and the second one takes an initial point the projection of the solution of the previous iteration. The optimization algorithm is summarized in Algorithm 1.Algorithm 1Optimization algorithmDefinet0the initial thickness vector, the initial sequence guide and the ply drop-offs(S0,D0)∈M(t0).fork=0to maximal number of iterations doComputeB(tk,Sk,Dk)andW(tk).ifB(tk,Sk,Dk)>cthenGenerate a randomtk+1such thatW(tk+1)<W(tk)and it is in the neighborhood oftk.elseGenerate a randomtk+1such thatW(tk+1)>W(tk)and it is in the neighborhood oftk.end ifCompute(Sk,Dk)pthe projection of(Sk,Dk)overM(tk+1).OptimizeBby taking(Sk,Dk)pas an initial point.Set(Sk+1,Dk+1)to the solution of the previous step.end forThe algorithm for solving these optimization subproblems is in the following section.Note that, the proposed algorithm is a local optimization method. It only finds local minima and does not converge to the global one. This remark is added to the text.For a given thickness vector t, the optimization subproblem is formulated as follows:(8)maxS,DF(t,S,D),s.t.(S,D)∈M(t),where F is either the distance function or the buckling load function.At each iterationk,(Sk,Dk)are updated to(Sk+1,Dk+1)such thatSk+1is admissible with respect toDk+1. This task is performed in two steps (see Fig. 5). FirstDkis fixed and a random sequence guide candidateScis generated inVDkd0(Sk), the neighborhood ofSkwhich comply withDk. Then,Scis fixed and a random ply drop-off candidateDcis generated inVScd0(Dk), the neighborhood ofDkfor whichScis admissible. The buckling loadB(t,Sc,Dc)is computed. IfB(t,Sc,Dc)>B(t,Sk,Dk)then(Sk+1,Dk+1)=(Sc,Dc), otherwise(Sk+1,Dk+1)=(Sk,Dk).The operation of generating random elements in the neighborhood of the current iteration is called local search and it is based on the backtracking procedure described in the previous section. For more details about this optimization technique see [25].This is summarized in Algorithm 2.Algorithm 2Algorithm of the optimization subproblemDefine a neighborhoodd0, a permutation vectorD0=(0…N-1), a stacking sequence guideS0inA(D0)andk=0fork=0to maximal number of iterations doGenerate a random sequenceSc∈VDkd0(Sk).Generate a random ply drop-offsDc∈VScd0(Dk).ComputeF(Sc,Dc).ifF(Sc,Dc)>F(Sk,Dk)then(Sk+1,Dk+1)=(Sc,Dc)else(Sk+1,Dk+1)=(Sk,Dk)end ifend forSome numerical experiments are carried out to illustrate the performance of the algorithm. First, the projection operator is studied to show its capability to find the most similar stacking sequence guide and the ply drop-offs in a set of admissible ones. Next, the overall optimization is performed with the proposed algorithm.Consider a panelP1with defined thicknesses and stacking sequences and a panelP2with only its thicknesses known. The thicknesses of the regions in panelP1and panelP2are expressed in number of plies and are shown in Fig. 6. This figure shows one panel representing panelsP1andP2. Each region of contains the number of plies ofP1andP2respectively. They are denoted by the vectorst1andt2. The sequences of the regions of panelP1are defined by the couple(S1,D1)in Fig. 7. This figure is the drop-off table which corresponds to panelP1in Fig. 6. As it is shown in Fig. 6, panelP1has regions with 35 plies, 28 plies, 26 plies, 24 plies, 22 plies, 20 plies and 18 plies. Each region has its own stacking sequence given in Fig. 7. Like the drop-off table presented in Section 3 and Fig. 1, each column represents a stacking sequence. The first row of the column is the number of plies and then the stacking itself. The grayed columns in Fig. 7 correspond to the thicknesses of our interest because they are ones in panelP1. The same reasoning applies to Fig. 9. The percentages of20%of-45°,50%of0°,20%of45°and10%of90°are imposed to the number of plies in each region.The first test with the projection operator is a validation test which consists in projecting(S1,D1)overM(t1). The projection of(S1,D1)overM(t1)is the same couple(S1,D1)given that(S1,D1)∈M(t1). The minimal distance is equal to zero. It is a trivial test but interesting because the solution is known in advance. The evolution of the distance with respect to the iteration number is shown in Fig. 8. This test shows that the proposed optimization method described in Section 7.1 is able to find the exact solution of the optimization subproblem.The second case is the projection of(S1,D1)overM(t2). Here, the solution is not known in advance. A minimal distance is found equal to 150. The evolution of the distance with the iteration number is shown in at the left of Fig. 8and the resulting stacking sequences are in Fig. 9. One can see the similarity of the sequences of the two panels which demonstrates the efficiency of the projection operator.The experiments are based on a panel divided into8×6regions. The panel has dimensions of800mm×600mm. It is simply supported and it is loaded in compression only along the x-axis with a charge equal to 1N. It is assumed that the composite panel is made of carbon material with a Young’s modulus equal to[13×106,4650,4650]Nmm-2, a shear modulus equal to[4650,4650,4650]Nmm-2and a Poisson ratio equal to[0.35,0.35,0.35]. The ply thickness is equal to0.125mm. The finite elements analysis is run over a quadrangular mesh of size40×30with first order elements. Fig. 10shows the first three buckling modes of the panel computed using SAMCEF software. The first one is used as the buckling load for the optimization. The purpose of Fig. 10 is to show the deformation of the panel under compression. It is just to have an idea about the behavior of the structure which is considered for optimization, but it is not related to the optimization itself.The region thicknesses of the panel are defined using a shape function. It is the bilinear function which interpolates the values of the thickness at the four corners of the panel. Thus, the vector t is of dimension four. The purpose of this choice is to reduce the degrees of freedom of the thicknesses and hence the computational cost. It is also to have a smooth distribution of the thickness and hence a manufacturable one.The safety threshold of the buckling load c is equal to 500. This choice of this value is not based on a physical consideration. Given that the buckling load of the initial point before optimization is about 1400, the value 500 makes the initial far from satisfying the constraint. Therefore, this value for c would illustrate the optimization of the structure. The update of t is as follows and it is based on the correlation between weight and buckling load. IfB>c, then one of the four coordinates of t is randomly decreased by one which makes the weight of the panel decrease. IfB<cthen one of the four coordinates of t is increased randomly by one which makes the weight of the panel increase.Maximum 10 evaluations ofBare allowed to solve the optimization subproblem.Two tests are performed: one with a fixed percentage of orientations (20%of-45°,50%of0°,20%of45°and10%of90°) in each region and one without this constraint.Figs. 11 and 12show the evolution of the weight and the buckling load for the test case with the proportions constraint and Figs. 13 and 14are for the other test case. Table 1gives the optimal values of the weight, the buckling loads and the thickness vector for both cases. Figs. 15 and 16show the sequences of the two test cases respectively. The grayed columns are the ones that correspond to the obtained thicknesses by optimization.One can see the correlation between weight and buckling loads. First, the buckling load is more sensitive to the thicknesses that stacking sequences. With the first 50 evaluations, the weight decreases due to the decrease of the thicknesses and the buckling load follows the weight. When the value weight is stabilized after evaluation 50, the buckling load is also stabilized. The change in the buckling load due to the change of the stacking sequences is less than its change due to change in the thicknesses.Second, if the buckling load is less thanc=500this means that there is no couple(S,D)which gives an admissible buckling load with the current thickness. Therefore, the weight is increased in order to compensate the violation of the constraints. Note also that, each point of these graphs correspond to a panel which completely satisfies the blending and manufacturing constraints. The two cases give slightly the same optimal weight. However, the buckling load with the test case with the proportions constraint has a higher value because imposing50%of0°increases the stiffness of the panel with a compression along the x axis.The Von Mises stress distribution over the panel at the first evaluation, evaluation 100 and the last evaluation of the optimization are shown in Figs. 17–19. The stress in the panel increases when the weight of the panel is reduced between evaluations 1 and 100. After the evaluation 100, the weight remains about its optimal value and the stacking sequences redistribute the stress over the panel in order to comply with the buckling load.This paper does not provide a theoretical result concerning the sufficient conditions for the convergence. This will be the subject of a future work. Here, the stopping criterion is the total number of evaluations. In these examples, it is found that 750 evaluations where required to solve the optimization problem.The jumps inWandBcurves are due to the fact that it is a discrete optimization. A jump corresponds to an added or a removed ply from the panel. Therefore, these jumps cannot vanish with iterations like with a continuous optimization problem.This cost is very competitive with the genetic algorithms approach where 400 evaluations per iteration where required in [27]. This shows the efficiency of the proposed method.

@&#CONCLUSIONS@&#
