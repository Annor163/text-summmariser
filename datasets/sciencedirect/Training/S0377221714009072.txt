@&#MAIN-TITLE@&#
An exact method for the biobjective shortest path problem for large-scale road networks

@&#HIGHLIGHTS@&#
Recursive exact algorithm that implicitly enumerates all solutions.Fast method that works well on graphs of up to 1.2 million nodes and 2.8 million arcs.Consistently outperformed a top-performer benchmark algorithm for real road networks.Easily extensible to the multiobjective shortest path problem with three or more objectives.

@&#KEYPHRASES@&#
Routing,Multiobjective combinatorial optimization (MOCO),Biobjective shortest path,Multiobjective shortest path,Pulse algorithm,

@&#ABSTRACT@&#
The Biobjective Shortest Path Problem (BSP) is the problem of finding (one-to-one) paths from a start node to an end node, while simultaneously minimizing two (conflicting) objective functions. We present an exact recursive method based on implicit enumeration that aggressively prunes dominated solutions. Our approach compares favorably against a top-performer algorithm on two large testbeds from the literature and efficiently solves the BSP on large-scale networks with up to 1.2 million nodes and 2.8 million arcs. Additionally, we describe how the algorithm can be extended to handle more than two objectives and prove the concept on networks with up to 10 objectives.

@&#INTRODUCTION@&#
Consider a directed graphG=(N,A)whereN={v1,…,vi,…,vn}is the set of nodes andA={(i,j)|vi∈N,vj∈N}is the set of arcs. For all arcs(i,j)∈Alet there be two nonnegative weights denoted by cijand tij. Henceforth, and without loss of generality, we refer to cijand tijas the cost and time of traversing arc(i,j)∈A,respectively. The Biobjective Shortest Path Problem (BSP) is the problem of finding pathsPfrom the start nodevs∈Nto the end nodeve∈Nthat minimize two different (often conflicting) objective functions. The BSP can be formally defined as follows:(1)minz(x)=(c(x),t(x))s.t.,(2)x∈Xwhere x is a pathPrepresented by a vector of (binary) arc flows xij,(i,j)∈A;c(x)≜∑(i,j)∈Acijxijis the cost of path x;t(x)≜∑(i,j)∈Atijxijis the time of path x; andXis the set of all paths from vsto ve. In (1) we (simultaneously) minimize the cost and time components of the vector function z(x). Since the existence of a path that simultaneously minimizes both objectives in (1) cannot be guaranteed, alternatively we seek for a set of paths with an acceptable tradeoff between the two objectives. Henceforth, we use functions c( · ) and t( · ) to represent the cost and time for complete solutions (i.e., a pathPfrom vsto ve) or partial solutions (i.e., a pathPfrom vsto a certain node vi), respectively.This work aims to expand the body of knowledge of exact methods for the BSP. Our work shares its intuition with the pulse algorithm proposed by Lozano and Medaglia (2013) for the Constrained Shortest Path Problem (CSP), which has been successfully used as an algorithmic block for the multi-activity shift scheduling problem (Restrepo, Lozano, and Medaglia, 2012) and has been extended to the weight constrained shortest path problem with replenishment (Bolívar, Lozano, and Medaglia, 2014). To emphasize the fact that this work is an extension of a flexible solution framework, we purposely keep the pulse name in this paper.The rest of the paper is organized as follows. Section 2 introduces relevant concepts for the BSP. Section 3 presents a literature review of the main solution strategies for the BSP. Section 4 introduces the pulse algorithm and the intuition behind it. Section 5 presents the core components of the algorithm. Section 6 compares the proposed algorithm against a top-performer algorithm by Raith (2010). Finally, Section 7 concludes the paper and outlines future work.This section introduces relevant concepts related to the biobjective shortest path problem. Let us recall thatXis the set of all paths x from vsto ve. The image of any solutionx∈Xon the objective spaceZis a vector denoted byz(x)=(c(x),t(x))∈Z, where c(x) and t(x) are the values of each objective function (cost and time, respectively).In the BSP, we look for a set of solutions that cannot improve one component of the objective vector z(x) without deteriorating the other one. These solutions are referred to as efficient solutions and are formally defined as follows:Definition 2.1A solutionx∈Xis efficient if there does not exist another solutionx′∈Xsuch that c(x′) < c(x) and t(x′) ≤ t(x) or c(x′) ≤ c(x) and t(x′) < t(x).Efficient solutions could be either supported or non-supported. Supported solutions correspond to the optimal solutions of the mono-objective shortest path problem defined by the following linear (convex) combination of the objectives:(3)minx∈Xλcc(x)+λtt(x)where (λc, λt) ∈ Λ are the weights given to the cost and time within the weight set Λ = {(λc, λt) ∈ ℜ2|λc≥ 0, λt≥ 0, λc+ λt= 1}. On the other hand, efficient solutions which are non-supported cannot be obtained by solving a shortest path problem with a weighted sum of the objectives as in (3).Similar to the efficiency concept defined over the solution space, any given solution has a corresponding vector (point) in the objective spaceZthat can be either dominated or non-dominated. The following set of definitions clearly states the concepts of dominance and their relation with efficiency.Definition 2.2The image z(x) of an efficient solution x is said to be a non-dominated vector. If the solution is not efficient, then its image is a dominated vector in the objective space. The set of all non-dominated vectors is denoted byZN.Letx,x′∈Xbe two solutions representing feasible paths. If c(x′) < c(x) and t(x′) ≤ t(x) or c(x′) ≤ c(x) and t(x′) < t(x), then z(x) is said to be dominated by z(x′), and it is denoted by z(x′)⪯z(x).Letx,x′∈Xbe two solutions representing feasible, but different paths (x′ ≠ x). If c(x′) = c(x) and t(x′) = t(x), then x′ and x are said to be alternative paths.The set of all efficient solutions XEis called the true efficient set. Given an algorithm, the set of efficient solutions discovered so far at any given iteration is called the online efficient set and it is denoted byX^E. If the algorithm is exact, once it meets its stopping criterion,X^Ecoincides with XE. We also make the distinction between the online set of non-dominated vectorsZ^Nand the true non-dominated setZN.

@&#CONCLUSIONS@&#
We developed a new exact approach for the BSP that performs well on large-scale real road networks with up to 1,207,945 nodes and 2,840,208 arcs. The intuition of the algorithm is very easy to understand, backed on the simple idea of a pulse propagating through a network. To implement it, there are few considerations that must be taken into account, like the number of labels at each node and the criterion used to sort the outgoing arcs of each node. Although the algorithm is based on the idea of (implicit) enumeration, the proposed pruning strategies dramatically accelerate the exploration of the networks by exploring implicitly vast regions of the solution space. Our approach compares favorably against a top-performer algorithm by Raith (2010) in terms of the execution times. On the instance set from Raith and Ehrgott (2009), the proposed algorithm reaches speedups of up to 152 times and achieves an average speedup of 57 times over all instances. On the very-large scale instances from the DIMACS dataset, the pulse algorithm performed faster than bLSET on 123 out of 150 instances with a geometric mean of speedups of roughly 45 and 21 on the two largest problem sets. Aside from the good performance on the BSP experiments, we show the extensibility of the pulse algorithm to multiple objectives (p ≥ 3) on instances from the literature with up to ten objectives.Profiling our algorithm, we noticed that the key strategies are pruning by efficient set and nadir point for the proposed instances by Raith and Ehrgott (2009); and label and efficient set strategies for the DIMACS instances. As the algorithm progresses, the efficient set strategy is strengthened as new solutions complement the quick check made by the nadir point strategy and partial paths are more likely to be dominated.With the straightforward intuition behind the pulse, it is simple to extend our algorithm to several network problems. Some of the future work includes studying acceleration strategies to improve the algorithm’s performance, including non-additive cost functions, and further experimentation with multiple objectives. Finally, we would like to explore the stochastic variants of the BSP.