@&#MAIN-TITLE@&#
Benders decomposition without separability: A computational study for capacitated facility location problems

@&#HIGHLIGHTS@&#
We propose a simplified way of deriving Benders cuts for convex optimization.The method is applied to linear/quadratic capacitated facility location problems.For linear case, our Benders method qualifies as one of the best exact solvers.For quadratic case, our Benders method is by far the best available exact solver.Our Benders heuristics outperform previous proposals from the literature.

@&#KEYPHRASES@&#
Benders decomposition,Congested capacitated facility location,Perspective reformulation,Branch-and-cut,Mixed-integer convex programming,

@&#ABSTRACT@&#
Benders is one of the most famous decomposition tools for Mathematical Programming, and it is the method of choice e.g., in mixed-integer stochastic programming. Its hallmark is the capability of decomposing certain types of models into smaller subproblems, each of which can be solved individually to produce local information (notably, cutting planes) to be exploited by a centralized “master” problem. As its name suggests, the power of the technique comes essentially from the decomposition effect, i.e., the separability of the problem into a master problem and several smaller subproblems. In this paper we address the question of whether the Benders approach can be useful even without separability of the subproblem, i.e., when its application yields a single subproblem of the same size as the original problem. In particular, we focus on the capacitated facility location problem, in two variants: the classical linear case, and a “congested” case where the objective function contains convex but non-separable quadratic terms. We show how to embed the Benders approach within a modern branch-and-cut mixed-integer programming solver, addressing explicitly all the ingredients that are instrumental for its success. In particular, we discuss some computational aspects that are related to the negative effects derived from the lack of separability. Extensive computational results on various classes of instances from the literature are reported, with a comparison with the state-of-the-art exact and heuristic algorithms. The outcome is that a clever but simple implementation of the Benders approach can be very effective even without separability, as its performance is comparable and sometimes even better than that of the most effective and sophisticated algorithms proposed in the previous literature.

@&#INTRODUCTION@&#
In this article we study the multiple-allocation (or multiple-source) Capacitated Facility Location (CFL) problem and its quadratic variant known as the congested CFL problem. In both problems we are given a set of customers and potential facility locations. Customers have to be served by open facilities, and their demands have to be satisfied by the limited capacity of open facilities. Demand can be split and a customer can be partially served by several locations. Multiple allocations arise, for example, when customers correspond to population areas and not all the individuals from the same area have to be served by the same facility. In the problem variant with linear objective function (known as classical CFL), the solution cost, which is to be minimized, is defined as the sum of costs for opening facilities plus the costs for allocating customer demands to open facilities. In congested CFL, introduced by Desrochers, Marcotte, and Stan (1995), possible congestions at open facilities imply diseconomies of scale expressed through convex cost functions. These convex costs arise due to a possibly larger number of overtime workers, usage of more costly materials, or by neglecting or postponing equipment maintenance schedules (Harkness & ReVelle, 2003). Hence, the goal is now to minimize the sum of facility opening costs, customer allocation costs plus the congestion costs (typically defined as service/production costs at facilities and/or waiting times at facilities). In congested CFL considered throughout this paper, the convex cost are modeled using quadratic functions. In congested CFL, a more balanced solution is sought after, i.e., a solution that takes into consideration expected waiting times such that open facilities are not “overloaded” by customer demands. The congestion is usually not measured in the same units as the opening and allocation costs (which can be easily expressed in currencies), hence, it is not surprising that congestion costs (being quadratic), grow much faster than the remaining (linear) part of the objective function. Consequently, it may happen that the optimal solution requires to open too many facilities, so as to keep their load at minimum. Since decision makers prefer to have a control over the number of open facilities, a p-median constraint is usually added to the problem formulation, where p is a given input parameter.A large body of work is available for classical CFL. We address only a small portion of published articles, and refer the reader to a more comprehensive literature overview available in Klose and Drexl (2005) and a more recent one in Fernández and Landete (2015). To the best of our knowledge, the state-of-the-art exact methods for CFL are: (1) a branch-and-cut-and-price algorithm (B&C&P) by Avella and Boccia (2009), which is based on the idea of reformulating CFL as a fixed charge network design problem, and separating the mixed dicut inequalities, and (2) a Lagrangian-based branch-and-bound by Görtz and Klose (2012). State-of-the-art heuristics are those proposed by Avella, Boccia, Sforza, and Vasil’ev (2009) (a Lagrangian relaxation combined with a cutting plane method) and an MIP-based heuristic called kernel search by Guastaroba and Speranza (2012). On the contrary, congested CFL did not receive that much attention: besides the original article (Desrochers et al., 1995), in which the problem has been approached by column generation and optimal solutions have been reported for very small instances, the problem has been only recently considered in the master thesis (Selfun, 2011). However, there are plenty of models in which congestion issues at facilities are modeled using queuing theory, or considering different objective functions. For more details, see e.g., a recent survey by Boffey, R. Galvão, and Espejo (2007) and recent literature overviews given in Aboolian, Berman, and Krass (2012); Zhang, Berman, and Verter (2009).Applying Benders decomposition to CFL appears very natural as it follows the “recipe” given by Benders in the early 60’s (Benders, 1962): keep the integer variables, and relax the “complicated” continuous variables. A careful look into the recent literature suggests however that, since the work of Wentges (Wentges, 1996) in the 90’s, and despite a wide range of approaches applied to CFL, the Benders decomposition method was not considered the solution method of choice.The main motivation of the present article was therefore to rethink the well-known concept of Benders decomposition for CFL, considering both linear and convex nonlinear objective functions. Our goal was to provide guidelines for a modern implementation of Benders decomposition based on the MIP technology which was not available back in the 70’s and 80’s when most of the related articles have been published.For classical (i.e., linear) CFL, our method is competitive and sometimes better than the state-of-the-art exact approaches available in the current literature: a branch-and-cut-and-price algorithm by Avella and Boccia (2009) and a Lagrangian-based branch-and-bound by Görtz and Klose (2012). For the largest available CFL instances, our method has been run as a heuristic and successfully compared with the kernel search heuristic by Guastaroba and Speranza (2012), which was shown to beat all previous CFL heuristics. For the congested case, we show how to obtain a much tighter convex Mixed-Integer Non-Linear Programming (MINLP) formulation using the perspective reformulation (Frangioni & Gentile, 2009; Günlük & Linderoth, 2012). We then demonstrate that our new decomposition approach computationally dominates the perspective reformulation solved using a state-of-the-art commercial solver based on second-order cone cuts.More formally, CFL is stated as follows: Given a set J of potential facility locations, and a set I of customers, let di≥ 0 denote demand of a customer i ∈ I, and sj≥ 0 capacity of a facility j ∈ J. Opening a facility j ∈ J costs fj≥ 0, and serving a single unit of demand of customer i by facility j costs cij≥ 0, for all i ∈ I, j ∈ J. The goal is to find a subset of facility locations to open, and to serve all customers, so that the facility opening plus customer allocation costs are minimized. Let us assume without loss of generality that each customer can be allocated to every facility (if this is not the case, we will assumecij=∞). In the traditional compact Mixed-Integer Linear Programming (MILP) formulation for CFL,|J|+|I|·|J|variables are used to model the problem. For each j ∈ J, binary variable yjis set to one if facility j is open, and to zero, otherwise. For each i ∈ I and j ∈ J, the continuous allocation variable xij≥ 0 will denote the fraction of the demand of customer i ∈ I served by facility j ∈ J.The classical CFL model reads(1)min∑j∈Jfjyj+∑i∈I∑j∈Jdicijxij(2)s.t.∑j∈Jxij=1∀i∈I(3)xij≤yj∀i∈I,j∈J(4)∑i∈Idixij≤sjyj∀j∈J(5)xij≥0∀i∈I,j∈J(6)yj∈{0,1}∀j∈JThe objective is to minimize the sum of facility opening costs, plus the customer allocation costs. Assignment constraints (2) make sure that complete customer demand is satisfied, and capacity constraints (4) make sure that the capacity of an open facility cannot be exceeded. Constraints (3) state that allocation to a facility j is only possible if this facility is open. They are redundant in the MILP formulation, but are known to significantly strengthen the quality of Linear Programming (LP) relaxation bounds. Note that, because of capacity constraints (4), the integrality condition on variables xijis not automatically satisfied by an optimal solution, hence one should add it explicitly in case single-source CFL is considered—a variant not covered in the present paper.CFL is NP-hard, however, when a set of open facilities is fixed, the problem of finding optimal customer allocations boils down to a transportation problem that can be solved efficiently using specialized algorithms based on e.g., minimum-cost flows. Furthermore, the following well-known and very useful constraints are sufficient to guarantee that a chosen subset of open facilities may produce a feasible solution:∑j∈Jsjyj≥∑i∈Idi.These constraints turn out to be very important for our Benders reformulation as well.Similarly, congested CFL can be modeled as the following Mixed-Integer Non-Linear Program (MINLP)(7)min∑j∈Jfjyj+∑i∈I∑j∈Jdicijxij+∑j∈JF(∑k∈Idkxkj)∑i∈Idixij(8)s.t.∑j∈Jyj=p(2)−(6)where F(.) is the penalty function, which is assumed to be nonnegative, continuous and convex for non-negative arguments. This function penalizes every additional “unit” being served by a given facility. Depending on the application, function F is used here to model the service/production costs at the facilities or the waiting times—both are expected to increase with the increasing demand in a convex fashion. Desrochers et al. (1995) show that, under these assumptions, the objective function remains convex in (x, y) for all nonnegative values of x, hence we are dealing with a convex MINLP. Throughout this paper, for the ease of exposition, we will assume that F(t) is a linear function, sayF(t)=at+b,with nonnegative input coefficients a and b, though our decomposition approach (cf. Section 3) can be extended to more general cases. To prevent opening too many facilities and to allow the decision makers to control the number of open facilities, p-median constraint (8) is added to the model (Desrochers et al., 1995).Using aggregated variables to model the exact demand served by facility j (namely:vj=∑i∈Idixij,that we will refer to as facility load), the congestion cost at a facility j ∈ F is given as F(vj) · vj. Consequently, the objective function can be written as:min∑j∈Jfjyj+∑i∈I∑j∈Jdicijxij+∑j∈JF(vj)vjOur model then reads(9)min∑j∈Jfjyj+∑i∈I∑j∈Jdicijxij+b∑j∈Jvj+a∑j∈Jvj2(10)s.t.∑j∈Jyj=p(11)∑i∈Idixij=vj∀j∈J(12)∑j∈Jxij=1∀i∈I(13)xij≤yj∀i∈I,j∈J(14)vj≤sjyj∀j∈J(15)xij≥0∀i∈I,j∈J(16)yj∈{0,1}∀j∈JTo obtain a tighter model one can derive the so-called perspective reformulation (Frangioni & Gentile, 2009; Günlük & Linderoth, 2012) of the problem, in which each quadratic termvj2in the objective function is replaced by a nonnegative variable zj, namely:(17)min{∑j∈Jfjyj+∑i∈I∑j∈Jdicijxij+b∑j∈Jvj+a∑j∈Jzj∣vj2≤zjyj,∀j∈J,z≥0,(10)−(16)}The second-order cone (SOC) constraintsvj2≤zjyj,together with the minimization of the objective function, guarantee that the quadratic loadvj2of a facility j is zero if the facility is closed, and it is zjif the facility is open. Note that, for a given vj, the smaller yj> 0 the larger zj, meaning that small fractional values of yjare penalized by the objective function. As a result, the model automatically tends to favor integral values for the y variables, which explains why the perspective reformulation of a problem is typically much tighter than the standard one (see, e.g. Frangioni & Gentile, 2009; Günlük & Linderoth, 2012). We therefore use (17) in our computational study.In this section we describe the basic steps for the design of a Benders decomposition approach to be embedded in a modern MIP solver.For the sake of generality, let the problem of interest (an MILP or a convex MINLP) be restated as(18)minf(x,y)(19)s.t.g(x,y)≤0(20)yintegerwherex∈Rm,y∈Rn,and functionsf:Rm+n↦Randg:Rm+n↦Rpare assumed to be differentiable and convex. Let Ay ≤ b denote the subset of linear inequalities in (19) that do not involve x, including variable bounds on the y variables (if any). To simplify our treatment, we assume thatS:={y:Ay≤b}is a nonempty polytope, while the convex sets X(y) ≔ {x: g(x, y) ≤ 0} are nonempty, closed and bounded for all y ∈ S, as it happens in our CFL case. Problem (18)–(20) can trivially be restated as the master problem in the y space(21)minw(22)s.t.w≥Φ(y)(23)Ay≤b(24)yintegerwhereΦ(y):=minx∈X(y)f(x,y)is the convex function expressing the optimal solution value of problem (18)–(20) as a function of y, and w is a continuous variable that captures its value in the objective function. (Problems where X(y) can be empty for some y ∈ S can be handled similarly, by adding the feasibility condition 0 ≥ Ψ(y) ≔ min {1Ts | g(x, y) ≤ s, s ≥ 0} to (21)–(24).)Note that Φ(y), though convex, is nonlinear even in case f and g are. For example, the toy continuous problemmin{x∣x≥y,x≥−y,y∈[−1,1]}leads to the mastermin{Φ(y)∣y∈[−1,1]}whereΦ(y)=|y|is clearly convex but nonlinear, and attains its minimum iny=0,i.e., in a point that is not a vertex ofS=[−1,1].Master problem (21)–(24) is therefore a convex MINLP that can be solved by an LP-based branch-and-cut approach where the integrality requirement on y is relaxed and Φ(y) is approximated by linear cuts to be generated on the fly and added to the current LP-relaxation; see Bonami, Kilinc, and Linderoth for a recent introduction to modern MINLP solution techniques. A crucial point is therefore the efficient generation of the approximation cuts, whose correctness exploits the convexity assumption. To this end, consider a (possibly noninteger) solution y* of the LP relaxation of the current master. Because of convexity, Φ(y) can be underestimated by a supporting hyperplane at y*, so we can write the following linear cut(25)w≥Φ(y)≥Φ(y*)+ξ(y*)T(y−y*)Here ξ(y*) denotes a subgradient of Φ in y* that can be computed (if constraint qualifications hold) as(26)ξ(y*)=∇yf(x*,y*)+u*∇yg(x*,y*)where x* and u* are optimal primal and (Lagrangian) dual solutions of the convex problem obtained from (18)–(20) by replacing y with the given y*, and ∇yis the gradient operator with respect to the y variables; see (Geoffrion, 1972) for details.The above formula involves the computation of partial derivatives of f and g with respect to the yj’s, so it is problem specific and sometimes cumbersome to apply. We next introduce a very simple reformulation that makes its implementation straightforward. By definition, Φ(y) can be computed by solving the convex problem (referred to as the subproblem in the literature)(27)Φ(y)=minf(x,q)(28)s.t.g(x,q)≤0(29)y−q=0The variable-fixing Eq. (29) is meant to be imposed as y ≤ q ≤ y by just modifying the lower and upper bounds on the q variables, so it can be handled very efficiently by the solver in a preprocessing phase when y is given.By construction, y only appears in the trivial constraint (29), hence the subgradient in (26) is just(30)ξ(y*)=r*where r* is an optimal dual vector associated to (29), e.g., the vector of reduced costs when this constraint is imposed as y* ≤ q ≤ y*. This leads to the (generalized) Benders cut(31)w≥Φ(y*)+∑j=1nrj*(yj−yj*)where each (possibly negative) reduced costrj*defines a lower bound on the increase of the objective function Φ(y*) whenyj*increases—note that each reduced costrj*is the optimal dual variable associated with the bound constraintqj≥yj*(ifrj*≥0) orqj≤yj*(ifrj*<0).Following Benders general recipe, all continuous variables are projected out of the model, and the overall objective function is replaced by a single continuous variable w. The resulting master problem is then given by(32)minw(33)s.t.w≥Φ(y)(34)∑j∈Jsjyj≥∑i∈Idi(35)yj∈{0,1}∀j∈Jwhere Φ(y) in the convex function expressing the solution cost of the best-possible assignment compatible with the given (possibly noninteger) y ∈ [0, 1]J. Of course, for congested CFL one needs to extend the master problem by the p-median constraint (8).Recall that constraint (34) guarantees that the overall capacity of open facilities is sufficient to accommodate the overall customer demand. This latter constraint plays a very important role in our model, as it acts as a global feasibility cut ensuring that any solution y of the master admits a feasible x in the original model, hence Φ(y) is well defined for any master (possibly noninteger) solution y. As a consequence, no so-called Benders feasibility cuts are needed in our setting.Within a modern MIP solver, cuts are possibly separated at every node of the branching tree. Besides internal general-purpose cuts, the user can design his/her own separation function that receives a (possibly noninteger) master solution (y*, w*) on input, and tries to generate a violated cut. In our setting, we are interested in generating violated Benders cuts of the form (31) derived from the convex relaxation obtained by removing integrality constraints on y variables. Separation of Benders cuts is therefore performed for both, fractional and integer values of y*. To this end, for the given y* the convex subproblem (27)–(29) is solved fory=y*to get the optimal value Φ(y*) and the associated reduced cost vector r*. Note that the solution of the latter problem can be rather time consuming, as it does not decompose into smaller subproblems as it happens in typical application of Benders decomposition. Nevertheless, as y is fixed, the explicit constraints xij≤ yjare automatically preprocessed and become just implicit upper bounds on the x variables. In addition, for congested CFL the SOC constraintsvj2≤zjyjbecome regular quadratic constraints. As a consequence, the solution of the subproblem can be orders of magnitude faster than the solution of the convex relaxation where y is not fixed and only the integrality requirement is relaxed, making the Benders approach appealing.We observe that the solution of the subproblem (27)–(29) fory=y*could take advantage of the specific structure of the CFL problem. In particular, for linear CFL the subproblem is in fact a transportation problem that could be solved by a specialized algorithm. According to our experience, however, using a general-purpose LP solver such as the dual simplex method has the advantage of a better warm-start mechanism, so after some testing we decided not to use any specialized code—thus making the overall implementation simpler.Many authors pointed out that the subproblem is typically dual degenerate, which means that many optimal dual solutions exist (see, e.g., Magnanti & Wong, 1981; Naoum-Sawaya & Elhedhli, 2013; Van Roy, 1986; Wentges, 1996). Since each optimal dual solution leads to different reduced costs and hence to a different Benders cut, the question on how to choose the “best” Benders cuts to be inserted into the master is a key of an efficient implementation. In our implementation strategy, we do not insist on generating Pareto optimal cuts (like e.g., in Magnanti & Wong, 1981) but just apply the very basic method of the previous subsection. For linear CFL only, we apply the following simple recomputation of the optimal reduced costs (and hence of the Benders cut coefficients) that according to our experience produced more stable cuts.Let u* be the vector of dual variables associated to assignment constraints (2) found by the LP solver applied to the subproblem, i.e., to the original model (1)–(6) with the variable-fixing constraint y* ≤ y ≤ y*. Our idea is to fix u* and to recompute optimal reduced costs by solving a series of continuous knapsack problems. Recall that Φ(y) denotes the optimal value of (1)–(6) as a function of y. As already observed by many authors (see, e.g. Cornuéjols, Sridharan, & Thizy, 1991), by Lagrangian duality we can writeΦ(y)≥∑i∈Iui*+min0≤x≤1{∑j∈Jfjyj+∑j∈J∑i∈I(dicij−ui*)xij∣(3),(4)}=∑i∈Iui*+∑j∈J(fj+KPu*j)yjwhere the |J| independent continuous knapsack problemsKPu*j:=min{∑i(dicij−ui*)zi∣∑i∈Idizi≤sj,0≤z≤1}can be solved very efficiently (and in a numerically very clean way) by a simple sorting algorithm. This leads to the Benders cutw≥∑i∈Iui*+∑j∈J(fj+KPu*j)yjNote that the above procedure would work for any vector u of Lagrangian multipliers associated with (2), though the maximum cut violation is achieved for an optimal dual vector u* for the point y* to be separated.We have seen that the master problem (21)–(24) calls for the minimization of a convex function Φ(y) over a nonempty polytope S, under the integrality requirement (24). Branch-and-cut solution methods relax the integrality condition and use enumeration to enforce it. A crucial step is how to solve effectively, by cutting planes, the convex problem miny ∈ SΦ(y) arising at the root node. As a matter of fact, in many cases reported in the literature (and perhaps in many more not reported ones) such a solution approach turns out to be so slow that it makes the overall Benders method simply impractical.As already discussed, many authors attributed slow convergence to dual degeneracy, hence focused on how to select a “best possible” Benders cut for the given y* at hand. According to our experience, however, cut selection is important but the cut loop strategy adopted at the root node is the real culprit of inefficiency. Following Kelley’s recipe (Kelley, 1960), which is standard in MIP solvers, at each cut loop iteration one generates one or more cuts that are violated by the current LP-optimal solution y*, adds them to the current relaxation, and reoptimizes it to get the new optimal solution y* to cut at the next iteration. This approach works well in many cases, but it is known to be extremely inefficient when Φ and S have a shape that leads to a zig-zagging y* trajectory, as it happens e.g. in Lagrangian dual optimization or in column generation (Vanderbeck, 2005). In these cases, “stabilized” approaches such as the bundle method (Lemaréchal, Nemirovskii, & Nesterov, 1995) are known to outperform Kelley’s one by a large margin. Thus, the implementation of stabilized cutting plane (at least) at the root node is expected to be of crucial importance in Benders decomposition, in particular when a single cut is separated for each y* as it happens in our CFL implementation.Following our previous proposal for uncapacitated facility location (Fischetti, Ljubić, & Sinnl, 2016), we did not implement a bundle method but a simple in-out variant very much in the spirit of Ben-Ameur and Neto (2007); Fischetti and Salvagnin (2010); Naoum-Sawaya and Elhedhli (2013). The resulting cutting plane procedure is applied before starting the branch-and-cut, i.e., before the root node. It is aimed at quickly determining a hopefully small set of Benders cuts that brings the master LP relaxation value as close as possible to the “real optimal value” miny ∈ SΦ(y).At each cut loop iteration, we have two points in the y space: the optimal solution y* of the current master LP (as in Kelley’s method), and a stabilizing pointy˜inside the convex feasible set S. This point is initialized by solving the convex problem max {∑j ∈ Jyj∣y ∈ S} through an internal point method (barrier without crossover).At each iteration, we movey˜towards y* by settingy˜=αy˜+(1−α)y*and then apply our Benders-cut separator to the “intermediate point”λy*+(1−λ)y˜,where parameters λ ∈ (0, 1] and α ∈ (0, 1] are discussed later on. The generated Benders cut is statically added to the current master LP. After 5 consecutive iterations in which the LP bound does not improve, parameter λ is reset to 1 (so we are back to Kelley) and the cut loop continues. After 5 more consecutive iterations without improvement, the procedure is aborted, the LP is solved once again and all cuts with a positive slack are removed. To speedup computation, slack cuts in the current master LP are also removed at every 5th iteration.Our computational experience with CFL (both linear and congested) confirms the findings of Fischetti et al. (2016), and shows that the above stabilization approach—though very simple—works well and quickly produces lower bounds very close to the best-possible one.As to the choice of parameters α and λ, for congested CFL we adopted the values originally proposed in Fischetti et al. (2016), namelyα=0.5andλ=0.2. For linear CFL, instead, we noticed that an overall speedup can be obtained by a more conservative approach producing a sequence of very similar points to be separated. This is because, for the linear case, Benders cuts are generated by solving the subproblem through the dual simplex method, each time starting from the optimal LP base of the previous separation. So, the more similar the points to separate, the faster the cut generation. Hence we definedα=0.9andλ=0.1to increase the attraction grip of the internal pointy˜. A similar approach is instead not worthwhile for the congested CFL, where the subproblem is nonlinear and is solved by using a barrier method that starts from scratch at each call.To mitigate the use of the time-consuming Benders cut separation that requires the solution of a single but large subproblem, for the linear case we tested the following CFL-specific strategy that tries to enforce subproblem separability in a heuristic way. To this end, we observe that subproblem decomposition into smaller subproblems is inhibited by the presence of the capacity constraints (4): if we temporarily relax them, we get an uncapacitated problem for which Benders cuts can be derived very efficiently by using simple ad-hoc algorithms (Fischetti et al., 2016). So we can think of a two-level cut strategy where “blurred” Benders cuts are quickly generated from the uncapacitated model, and the generation of the capacitated Benders cuts is activated only as a last resort, i.e., when the given solution y* is integer and is going to update the incumbent—in which case we need the “real Benders cut” to assess the correct value of Φ(y*). Of course, the approach makes sense only for those instances where the capacity constraints (though non-redundant) are not very tight, meaning that only a few “real Benders cuts” need to be generated. According to our computational analysis, the approach is in fact very successful for just a few instances in our testbed, while it does not pay off in general.

@&#CONCLUSIONS@&#
This paper provides a computational study of a modern implementation of Benders decomposition, applied to two problems with non-separable subproblems: linear capacitated facility location, and its non-linear but convex variant known as congested CFL.Our Benders implementation is rather simple and general, and was not tweaked for the specific application at hand. In particular, we introduced a simplified way of deriving optimality generalized Benders cuts for convex problems, that works well in practice and is straightforward to implement.The resulting method is simpler and more efficient than some of the state-of-the art exact and heuristic approaches for linear CFL. The only exact method that remains competitive with Benders is another relatively simple approach proposed by Görtz and Klose (2012) and based on a Lagrangian relaxation. As pointed out by its authors, this Lagrangian-based branch-and-bound can work surprisingly well because of the fast way of solving the Lagrangian relaxation in combination with an effective branching strategy. In such a setting, Benders decomposition is intrinsically penalized because of the large overhead imposed by the non-decomposable LP/QP subproblems. Nevertheless, the obtained results indicate our simple Benders decomposition can be considered one of the state-of-the-art solution approaches for CFL.As to the congested CFL problem, Benders clearly qualifies as the best-available solution method.