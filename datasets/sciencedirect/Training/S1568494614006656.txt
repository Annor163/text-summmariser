@&#MAIN-TITLE@&#
Adaptive force–environment estimator for manipulators based on adaptive wavelet neural network

@&#HIGHLIGHTS@&#
An adaptive tracking control named WNN_AFEE is proposed which uses estimation of external forces.WNN_AFEE does not need the inverse of the Jacobian transpose for computing the force.WNN_AFEE can estimate external forces in the presence of some parametric uncertainties.WNN_AFEE has no limitation of estimating constant or slowly varying forces.WNN_AFEE uses fast learning and localized time-frequency features for environment changing estimation.

@&#KEYPHRASES@&#
Adaptive control,Force estimator,Environment modeling,Robot manipulator,Wavelet neural network,Lyapunov based design,

@&#ABSTRACT@&#
This study focuses on the accurate tracking control and sensorless estimation of external force disturbances on robot manipulators. The proposed approach is based on an adaptive Wavelet Neural Network (WNN), named Adaptive Force-Environment Estimator (WNN-AFEE). Unlike disturbance observers, WNN_AFEE does not require the inverse of the Jacobian transpose for computing the force, thus, it has no computational problem near singular points. In this scheme, WNN estimates the external force disturbance to attenuate its effects on the control system performance by estimating the environment model. A Lyapunov based design is presented to determine adaptive laws for tuning WNN parameters. Another advantage of the proposed approach is that it can estimate the force even when there are some parametric uncertainties in the robot model, because an additional adaptive law is designed to estimate the robot parameters. In a theorem, the stability of the closed loop system is proved and a general condition is presented for identifying the force and robot parameters. Some suggestions are provided for improving the estimation and control performance. Then, a WNN-AFEE is designed for a planar manipulator as an example, and some simulations are performed for different conditions. WNN_AFEE results are compared attentively with the results of an adaptive force estimator and a disturbance estimator. These comparisons show the efficiency of the proposed controller in dealing with different conditions.

@&#INTRODUCTION@&#
Regarding to developments in robot applications and their participating in human society, position control considering interactions with environment is more desirable. In many tasks, robot is in touch with different surfaces and moves on them. It produces an unknown variable force interacting with the end-effector. Furthermore, some position-controlled robots may damage themselves, environments or humans that are collided to reach their desired positions. Therefore, measuring this interactive force is necessary for control, analysis, or decision purposes. Mounting sensors on the end-effector for measuring this force was the only way for years, which led to high cost of repairs and maintenance. High noise, soft structure, limited dimensions of sensing and increasing complexity, are the other drawbacks of force sensors [1,2]. Recent advances in processors let the control algorithms to eliminate some instruments and consequently simplify the complexity of the system and reduce the cost.A common method to eliminate force sensors is employing disturbance observers (DO). In last two decades, many researches focused on DOs and developed them in many applications. The main application of DO is compensating disturbances in precision positioning. Some researchers used these observers for torque or force sensing and control [1–3]. In [2], authors studied the validation of Disturbance Observer (DO) for force control and compared its results with those of using force sensors. In [4], the authors analyzed the stability of a DO with limited variations of inertia. There are many interests in expanding DO for bilateral force control and haptic applications too [5,6]. The majority of these observers are based on linear systems, therefore compensating all nonlinearities before using them are required [7]. Consequently, some researchers present nonlinear-based designs of DOs [8–10]. However, they usually need accurate model of the friction and robot dynamics in order to be used instead of a force sensor. In [1,6,11], the authors estimated the robot dynamics in different phases where no force is exerted on the robot and finally they used the disturbance observer with the identified accurate model to control the force. Although disturbance observers are commonly used in estimating external forces, they have weaknesses in dealing with uncertainties. Another method that is presented for the force estimation in tracking control is the adaptive disturbance estimator [12], where an extended Kalman filter and an adaptive law are used to estimate the states and update the estimated disturbance, respectively. However, all disturbance observers or estimators detect the effects of forces on joints. Therefore, an important limitation for such schemes is the necessity of calculating the inverse of Jacobian transpose to compute the force, which causes some problems for the system in the vicinity of the robot singular points.Another approach is estimating the external force using an adaptive force estimator [13]. This approach compensates disturbing force using an adaptive law that updates the estimated force in the control law. There is no need to compute the inverse of Jacobian transpose, hence, controller works efficiently around singular points. The other advantage of that scheme is that no acceleration measurement is required for force estimation. The method was developed to estimates both force and robot parameters simultaneously in [14]. Although the estimator performs desirable, it shows some weaknesses in dealing with fast fluctuating forces, since it is designed based on the assumption of constant or low variant forces and has a limited estimation bandwidth. Some researches show that force sensing bandwidth limitation may cause instability in force control, thus, they try to widen it using different approaches [3,15].This limitation in estimating the variable forces motivated this research to develop the adaptive force estimator to a wider bandwidth estimator. Assume that an assembler robot stretches a spring to fix its end on a device. The exerted force is a function of end-effector position and the spring stiffness. If the environment model is identified, then estimating the force will be enough fast using the end-effector position and velocity. Thus, the model of environment should be identified to attain quick force estimating. Adaptive networks such as fuzzy and Neural Networks (NN) are widely used in control applications to identify nonlinear systems [16–23]. Although, these networks are powerful in approximating nonlinear functions, they have limited capabilities in characterizing the local time-frequency features such as discontinuities or sudden jumps. Regarding to this drawback, wavelet neural networks (WNN) has been developed which had significant improvements in estimating accuracy and convergence speed [24–27]. Unlike the spatially expanded sigmoid functions, wavelet functions are localized in both time and frequency domain [34]. This makes WNN desirable for characterizing the local time-frequency features. They combine the learning ability of Neural Networks and the decomposition capability of Wavelet [30]. These advantages focused many researchers attention on WNN in control systems (e.g. [29–33]). In many applications, WNN plays the role of adaptive network that uses adaptive laws for online tuning of its parameters [28–30]. Discontinuity and nonlinearity are commonly happening in environments that interact with robots. Moreover, force is computed based on this estimated environment model and consequently the speed of environment estimation is so important. Therefore, WNN is chosen for environment modeling in this study.This paper uses a WNN as an adaptive force-environment estimator (WNN-AFEE) that compensates disturbing forces in position tracking control by modeling the environment. Adaptation laws make WNN suitable to estimate the force directly and guarantee the stability of the system in the sense of Lyapunov. In this approach, the robot Jacobian matrix appears in online learning laws. Therefore, system works desirable in singular points since computing the inverse of Jacobian transpose is not necessary any more. An additional condition specifies the accuracy of WNN-AFEE in estimating the external forces. The overall advantages of the proposed schemes can be briefly expressed as follows:1.WNN_AFEE can estimate external forces in the presence of parametric uncertainties. As it was mentioned before, other force estimating schemes such as DOs [1,2,4] suffer from the uncertainties in the robot model.WNN_AFEE can estimate variable forces, thus, the limitation of estimating constant or slowly varying forces are removed from the adaptive force estimator [13,14].WNN_AFEE can work efficiently in the vicinity of singular points, while some of the other proposed schemes suffer from computing the inverse of Jacobian transpose in singular points [1,2,7,11,12].The environment may change in some robot tasks repeatedly. Therefore, WNN_AFEE is desirable for estimating the environment model since it has the advantages of the WNN discussed before.To verify the above claims and support each of the proposed WNN_AFE advantages, several numerical simulation results are provided in simulation section that are compared with both the other schemes, disturbance observer (here is estimator) and adaptive force estimator, in different conditions.The remainder of this paper is organized as follows. The Section 2 consists of preliminaries and has two parts. The first part explains the robot dynamics, and the second part presents concepts of WNNs. The Section 3 explains the proposed controller design and presents some suggestions for improving control performance. As a case study, a WNN-AFEE is designed for a 2-DOF revolute planar manipulator in Section 4. Results of the simulations are presented in Section 5. Finally, Section 6 contains the conclusions of the paper.Consider dynamic equations of an n-joint rigid robot manipulator described by(1)M(q)q¨+Vm(q,q˙)q˙+G(q)+J(q)Tfext+C(q˙)=τwhereqis the vector of joints positions.M(q) is the symmetric positive definite inertia matrix,Vm(q,q˙)denotes Coriolis and centripetal matrix andG(q) is the gravity vector,τis the vector of input joint torques.fextis the external force vector exerted on the environment, andJ(q) is the Jacobian matrix, andC(q˙)denotes joints frictions. Based on the linear parameterization property of robots, dynamic motion equations can be expressed by(2)M(q)q¨+Vm(q,q˙)q˙+G(q)+C(q˙)=Y(q,q˙,q¨)ϕwhereY(q,q˙,q¨)is the regression matrix, andφis the parameters vector.A wavelet family is represented as(3)Ψa,b(x)=a−1/2ψx−bawhere ψ(x) denotes a mother wavelet and Ψa,b(x) is the dilated and translated version of this mother wavelet by a and b. Note that for the q-dimensional input space, the multivariate wavelet can be calculated by the tensor product of q single wavelet basis function [24].(4)Ψa,b(x)=∏j=1qΨaj,bj(xj)wherex=[x1, x2, …, xq]T,a=[a1, a2, …, aq]Tandb=[b1, b2, …, bq]Tare the input, dilation and translation parameters, respectively. Based on Multiresolution Analysis (MRA), the dilation parameter of wavelet can be explained as a resolution parameter. Therefore, a linear combination of wavelets with different resolution levels can describe any function by a desired accuracy [24].(5)f(x)=∑i=1mwiΨai,bi(x)+εThe first term in the right hand side of (5) is noted as WNN that is a kind of neural network, using wavelet functions as activation functions. Fig. 1shows the structure of WNN with three layers, where Ψi, i=1, …, m is the ith wavelet transform of the inputs and is constructed as(6)Ψi=Ψai,bi(x)=∏j=1qΨaij,bij(xj)andwijis the output layer weight of the ith neuron to the jth output. Consider(7)Ψ=[Ψ1,…,Ψm]Tand(8)W=w11…w1p⋮⋱⋮wm1⋯wmpthat m and p denotes the numbers of neurons and outputs, respectively. Supposef=[f1, …, fp]T denotes the output layer, then(9)fj=∑i=1mwijΨi(x),j=1,…,por equivalently in the vector form(10)f=WTΨNow, this network can be used to estimate the environment. Since robot interacts with different environments and changing environment is a common happening in its operation, offline learning approaches are not suitable. Therefore, an online learning method with fast convergence speed is needed that can handle these situations difficulties. Furthermore, online learning processes that are presented for adaptive networks and are based on minimizing a criterion are not possible for this problem and that because there is no information about the force (network output). This shortage in necessary information for network learning led this study to pay attention to other possible methods of learning that are based on control approaches. In fact, adaptive control can offer some rules for updating the network parameters. The next section introduces these learning rules and shows that how they are computed.Assume a manipulator with inaccurate model parameters that an unknown external force is exerted on it. For proper control of the manipulator using model-based algorithms, parameters and external force must be determined accurately as much as possible. Consider the desired trajectory of the robot manipulator is expressed byqd(t). Define the tracking error ase=qd−qand two auxiliary signals ass=Λe+e˙,q˙r=Λe+q˙d, whereΛis a positive definite diagonal matrix. Based on linear parameterization of motion equations, one can write for anyq˙r(11)M(q)q¨r+Vm(q,q˙)q˙r+G(q)+C(q˙)=Y(q,q˙,q˙r,q¨r)φwhereφis the robot parameters vector. Now, define the estimation ofφasφˆand the estimation error asφ˜=φ−φˆ.For estimatingfext, we use an adaptive WNN. According to the universal approximation property of WNNs [34], there exists optimal parametersa*,b* andW* so that(12)fext=W*TΨ(x(t),a*,b*)+εwhereɛdenotes the vector of minimum approximation error. In fact, the optimum parameters required for the best approximation of a given nonlinear function are unknown. Definefˆas(13)fˆ=WˆTΨ(x,aˆ,bˆ)whereaˆ,bˆandWˆare the estimations ofa*,b* andW*. Moreover, the optimal parameters can be defined as(14)(a*,b*,W*)=argminaˆεΩa,bˆεΩb,WˆεΩWsupxεΩxf−WˆTΨ(x,aˆ,bˆ)where Ωa, Ωb, ΩWare the proper bounded sets fora, bandW, respectively. Therefore, the norms of the optimum parameters are bounded.Defining the force estimation error and then substituting (12) and (13) into it, gives(15)f˜=fext−fˆ=W*TΨ+ε−WˆTΨˆBy adding and subtractingW*TΨˆ,WˆTΨˆandWˆTΨ, (15) is rewritten as(16)f˜=W˜TΨˆ+WˆTΨ˜+W˜TΨ˜+εwithΨ˜=Ψ−ΨˆandW˜=W*−Wˆ. The design purpose is tuning the wavelet parameters using adaptive laws. To achieve this, linearization technique is used to transform the nonlinear wavelet functions into partial linear form. Hence, Taylor expansion linearization technique is employed forΨ˜to obtain(17)Ψ˜=Ψaa˜+Ψbb˜+hwherea˜=a*−aˆ,b˜=b*−bˆ(18)Ψa=∂Ψ1∂a,…,∂Ψm∂aTa=aˆ(19)Ψb=∂Ψ1∂b,…,∂Ψm∂bTb=bˆ(20)a=[a11,…,a1q,…,am1,…,amq]T(21)b=[b11,…,b1q,…,bm1,…,bmq]Tandhis the vector of higher order terms in Taylor series expansion and can be assumed to be bounded [35]. Substituting (17) into (16) gives(22)f˜=W˜TΨˆ+WˆTΨaa˜+WˆTΨbb˜+ω(t)whereω(t) includes uncertain terms and is defined as(23)ω(t)=WˆTh+W˜TΨ˜+εMoreover, it can be assumed thatωis bounded byδTξ:(24)ω=WˆT(h−Ψ˜)+W*TΨ˜+ε<δTξwhereξ=Wˆ,1Tandδ=[δ1, δ2]T, in which(h−Ψ˜)<δ1andW*TΨ˜+ε<δ2.Note 1: For simplifying the WNN, new parameters are defined as an=a−1, bn=a−1b and(25)wnij=wij∏k=1qaik−1/2Based on (3), (4), (9) and (25) the network outputs are(26)fj=∑i=1mwnij∏k=1qψanikxk−bnikfor j=1, …, p. In other words, the output is a linear combination of multiplied mother wavelets. For simplifying the notations, from now, a, b, w and Ψiare used instead ofan,bn,wnand∏k=1qψ(anikxk−bnik), respectively.Before representing the design procedure, a lemma is presented that would be used next.LemmaConsiderA(t)χ(t)≡0 whereA(t)∈ℛr×landχ(t)∈ℛl. It can be derived thatχ(t)≡0 for t∈[t0, t1], if and only if there exists a positive constant α such thatProof: It is obvious thatA(t)TA(t)≥0 and (27) is satisfied if and only ifA(t)TA(t)≠0 for all t∈[t0, t1]. First, the necessity of the lemma can be proved. Thus, we need to prove that ifA(t)TA(t)≠0 for all t∈[t0, t1], then the only answer isχ(t)≡0 in [t0, t1]. Now, the statement can be proved by contradiction. Assume that the only answer forA(t)χ(t)≡0 isχ(t)=0 over [t0, t1], but we haveA(t)TA(t)=0. This implies that there exists a nonzero vectorβ(t) such that(28)β(t)TA(t)TA(t)β(t)=(A(t)β(t))T(A(t)β(t))=0Since (A(t)β(t))T(A(t)β(t)) is non-negative for all t∈[t0, t1], thus,A(t)β(t)=0. This contradicts with the statement that the only answer isχ(t)=0. To prove the sufficiency of the lemma, assume that (27) is satisfied over [t0, t1], but there exists a nonzeroχ(t) forA(t)χ(t)≡0. This implies that(29)χ(t)TA(t)TA(t)χ(t)=0In the other hand, for any nonzeroχ(t), it can be derived from (27) that(30)αχ(t)2<χ(t)TA(t)TA(t)χ(t)which is in contradiction with (29), thus,χ(t) cannot be a nonzero vector. In addition, based on Rayleigh–Ritz theorem [30], α can be defined as(31)α=inft∈[t0,t1]{λmin(A(t)TA(t))}Remark I: For time-invariant vectorχ∈ℛl, this condition is the same as the well-known condition, the persistence of excitation (PE), that is(32)α1I≤∫t0t1AT(t)A(t)dtwhere α1 is a positive constant. Using the PE condition and havingA(t)χ≡0, it can be derived thatχ≡0, if χ is a time invariant vector. In fact, the condition (27) entails the condition (32). It means that ifA(t) satisfies (27), then it would satisfy (32) definitely. However, its reverse relation is not true. For instance, the following vector satisfies the PE condition and the only constant solution forA(t)χ≡0 isχ≡0.(33)A(t)=1tHowever,A(t) does not satisfy (27) and there are infinite time-varying solutions forA(t)χ(t)≡0. The overall form of these solutions isχ(t)=[κ(t)t−κ(t)]T, κ(t)ɛℛ.TheoremConsider the control system of Fig. 2with the robot dynamic (1), the control lawthe WNN (13) and the updating laws(35)φˆ˙=ΓYT(q,q˙,q˙r,q¨r)s(36)Wˆ˙=ΓwΨˆsTJT(37)aˆ˙=ΓaΨaTWˆJs(38)bˆ˙=ΓbΨbTWˆJs(39)δˆ˙=ηδξJswhereΓ,Γw,ΓaandΓbare diagonal positive definite matrices and ηδis a positive constant. Then,a)The position and velocity tracking errors converge to zero asymptotically, the force and the parameter estimation errors are bounded, and the system is uniformly stable in the sense of Lyapunov.The estimation errors of the force and the robot parameters converge to zero, if there exist α>0 such that(40)αI≤AT(qd)A(qd)whereA(qd)=Y(qd,q˙d,q¨d)JT(qd).Substituting the control law (34) in (1) yieldsBy expandingf˜using (22), (41) is rewritten as(42)Ms˙=Yφ˜−Vms−KVs+JT(W˜TΨˆ+WˆTΨaa˜+WˆTΨbb˜+ω)−urConsidering (42) ands, the states of closed loop system can be selected ass,e,φ˜,W˜,a˜,b˜andυ˜. Now let the candidate Lyapunov function be(43)Vs=12sTMs+12φ˜TΓ−1φ˜+12tr(W˜TΓw−1W˜)+12a˜TΓa−1a˜+12b˜TΓb−1b˜+eTΛKe+12υ˜Tηυ−1υ˜Differentiating (43) with respect to time, yields(44)V˙s=sTMs˙+12sTM˙s+φ˜˙TΓ−1φ˜+tr(W˜TΓw−1W˜˙)+a˜˙TΓa−1a˜+b˜˙TΓb−1b˜+2e˙TΛKe+υ˜˙Tηυ−1υ˜SubstitutingMs˙from (42) into (38) and simplifying equations, gives(45)V˙s=12sT(M˙−2Vm)s−sTKs+2e˙TΛKe+(sTYφ˜+φ˜˙TΓ−1φ˜)+(sTJTW˜TΨˆ+tr(W˜TΓw−1W˜˙))+(sTJTWˆTΨaa˜+a˜˙TΓa−1a˜)+(sTJTWˆTΨbb˜+b˜˙TΓb−1b˜)+sT(JTω−ur)+υ˜˙Tηυ−1υ˜skew-symmetry property ofM˙−2VmresultssT(M˙−2Vm)s=0. Consider the parameters to be constant, thus,φ˜˙=−φˆ˙…,b˜˙=−bˆ˙. Using (35)–(38) and the fact thatsTJTW˜TΨˆ=tr(W˜TΨˆsTJT), (45) can be rewritten as(46)V˙s=−sTKs+2e˙TΛKe+sT(JTω−ur)+υ˜˙Tηυ−1υ˜≤−sTKs+2e˙TΛKe+sJυ−sJυˆ+υ˜˙Tηυ−1υ˜≤−e˙TKe˙−eTΛKe+sJυ˜+υ˜˙Tηυ−1υ˜Using the updating law as defined in (39), we have(47)V˙s≤−e˙TKe˙−eTΛKeThusV˙s≤0,∀t≥0and since Vsis positive definite and decrescent [37], based on the Lyapunov theorem, the whole system is uniformly stable. Hence, if initial conditions of the states are bounded, all ofs,e,φ˜,W˜,a˜andb˜remain bounded. Moreover, Based on the Barbalat lemma [37],V˙s→0as t→∞, since Vsis lower bounded,V˙sis negative semi-definite and uniformly continuous in time. Thus[eT,e˙T]→0as t→∞, means that tracking error of position and velocity converges to zero asymptotically.b) According to the previous section as t→∞ thene→0 ande˙→0, thuss→0 ands˙→0. Using this result, we have[sT,s˙T]=0for t=∞ and from (41), we derive(48)[Y(q,q˙,q˙r,q¨r)JT(q)]φ˜f˜=0,fort→∞Thus, ifA(q)=[Y(q,q˙,q˙r,q¨r)JT(q)]satisfies the condition (27), it yields[φ˜Tf˜T]=0. This means that the errors of estimated parameters and force converge to zero. Varyingqover time, causesA(q) to be a time varying matrix. According to part a,e→0. Therefore, we can assume thatq=qd(after sufficient time), thus it can be expressed as(49)αI≤AT(qd)A(qd)In the presented theorem, it was proved that the force estimation error tends to zero ifZ(qd) satisfies (40).Remark 2The condition (27) can be modified asIn manipulators,A(qd) and how it satisfies the condition (40) depend on several items, especially the robot structure. In the following, some considerations are discussed about WNN–AFEE ability of estimating external forces.In first step, just the force estimation is discussed, whereA(qd)=J(qd)T. Consider a SCARA robot in Fig. 3with an exerted force on its end-effector. The force can be decomposed in three dimensions. Fzcan merely move the third prismatic joint, therefore, it has no effect on the robot singularity (the singular configuration depends on the previous joints position). Therefore, Fzcan be independently estimated using WNN–AFEE. Two other forces are exerted on the first and the second revolute joints. The second joint may locate the robot in singular configuration. For example, if both of the first and the second links are in the x-axis direction, Fxcannot be estimated at all. This point is in the singular area of the manipulator. However, the controller performance is not affected by this singularity, since the force is endured by the robot structure and no additional torque is exerted on the joints. It is worth mentioning that if the robot works in vicinity of singular areas,Jsis decreased and this slows down the learning speed for the corresponding force. Now consider the Cartesian manipulator in Fig. 3. Decomposed forces are exerted only on their corresponding joints. Therefore, these forces can be estimated using WNN–AFEE and there is no singular point in the robot task space. These two examples clearly show the effect of robot structure in capability of WNN–AFEE for estimating external forces.The next factor that affectsZ(qd) is the trajectory of the robot. This is more critical for the robots that have singular areas. For example, for the SCARA manipulator in Fig. 3, if the trajectory of the second link is varying around zero, WNN–AFEE cannot estimate the Fxand Fyexactly. In fact, the singular point depends on q2 and which force is affected by this singularity depends on q1. For example, over the singularity if q1=0° the affected force is Fxand if q1=90° then the affected force is Fy. In general, a suitable trajectory for robot is the one that is far enough from the singular areas. For instance,JT(q)J(q)is depicted in Fig. 5 for the robot shown in Fig. 4. As it shows, the singular point of q2=0 affects the learning process.Now, consider that there is uncertainty in the robot model and we need to estimate it during the force estimation. The main point is that we have to limit the numbers of uncertain parameters that must be estimated in addition to the force. The condition (27) can be satisfied easier for square matrices or for matrices with more rows than columns.There is another point that deserves to be discussed here. For common adaptive controllers, moving on more exciting trajectories would increases the persistency of regressor excitation and thus the constant parameters can be identified easier. However, when we need to estimate the force this trick cannot help any more. That is because of the Jacobian structure, which has no joint velocity or acceleration in it. This structure has some advantages and some disadvantages either. The most important advantage of this structure is that WNN–AFEE can estimate the external force when the robot tracks the low speed trajectories and even when robot does not move. The other advantage is that the most unknown parameters of the robot dynamics are in the inertia and Coriolis and centrifugal forces matrix, which are apparently independent from the Jacobian matrix in low speed trajectories. Consider that the inertia of a link is unknown and the controller must estimate both force and inertia. WNN–AFEE can estimate the force due to Jacobian structure, but the inertia cannot be guaranteed to converge due to weak exciting trajectory. If the trajectory of the robot remains smooth and low variant, the force can be estimated approximately.The uncertainty in the gravity vector of robot is the most challenging part in estimating the external forces. Consider the third link of the SCARA manipulator in Fig. 3. The gravity force on the joint is the same as the force in z-axis direction. This makes the force estimation unavailable based on condition (40). In these cases, the speed and acceleration of the robot links may help the controller to distinguish between gravity force and the external force.In this section, WNN–AFEE is applied to the manipulator shown in Fig. 4. Dynamic equations and Jacobian matrix are [36](51)M(q)q¨+N(q,q˙)+J(q)Tfext=τM(q)=(m1+m2)l12+m2l22+2m2l1l2cosq2m2l22+m2l1l2cosq2m2l22+m2l1l2cosq2m2l22N(q,q˙)=−m2l1l2(2q˙1q˙2+q˙22)sinq2m2l1l2sinq2J(q)=−l1sinq1−l2sin(q1+q2)−l2sin(q1+q2)l1cosq1+l2cos(q1+q2)l2cos(q1+q2)A WNN is designed for estimating the environment model and external forces exerted on the end-effector. Assume that the robot interacts with a nonlinear impedance type environment, thus the inserted force on the end-effector in each dimension depends on the position and velocity of the end-effector in that dimension. Therefore, we choose separate networks for each dimension that works independently. The proposed network for dimension x is shown in Fig. 6. For example, the estimated force in x-axis can be expressed as(52)fˆx=WxTΨx([x,x˙]T,ax,bx)whereWx=[Wx1, …, Wxm]T,Ψx=[Ψx1, …, Ψxm]TandΨxi=ψ(x,axi1,bxi1).ψ(x˙,axi2,bxi2), and wavelet parameters areax=[ax11, ax12, ax21, ax22, …, axm2]Tandbx=[bx11, bx12, bx21, bx22, …, bxm2]T.Besides, the estimated force in y-axis can be expressed as(53)fˆy=WyTΨy([y,y˙]T,ay,by)whereWyandΨyare the same as that mentioned for x-axis.The total output can be defined as(54)fˆ=fˆxfˆy=WˆTΨˆ=WˆxT00WˆyTΨˆxΨˆyDefineaandbas(55)a=axT,ayTT(56)b=bxT,byTTNow, the control and adaptation laws can be used for this system. For this study, the first derivative of Gaussian function is selected as the mother wavelet in WNN. Note that the inputs of WNN are positions and velocity of end effector and vary in a wide range. Therefore, a wavelet function is needed that can cover this wide area. First derivative of Gaussian function has the advantages of wavelet functions and has a relatively wider basis than other mother wavelets functions. In fact, selecting this function is a tradeoff between localized approximation ability of wavelet functions and the spatially expanded coverage of input signals in sigmoid functions. Besides, by using this wavelet function, the sensitivity of WNN to initial values of shift and scale parameters reduces. These initial values can be selected in a way that widens the wavelet function sufficiently to cover the inputs range.To check out the efficiency of the proposed approach several simulations are performed in different situations and the convergence of estimation and tracking errors is studied. For the first simulation, a vertical wall is considered as a nonlinear environment and the robot interacts with it during tracking its trajectory. In addition, there is an uncertainty in the robot model for this simulation. In other simulation, the environment is considered as a nonlinear spring-damper. Finally, the last simulation consists of estimation of a nonlinear environment during tracking a singular trajectory to check the capability of WNN–AFEE in force estimation for singular points. For each simulation, the simulation results of an adaptive force estimator and a disturbance estimator are provided in order to facilitate the reader's evaluations. Furthermore, the WNN is replaced by radial basis function (RBF) network in each simulation and results are compared.In these simulations, parameters of the robot are l1=1m,l2=0.9m, m1=12kg and m2=8kg. The initial conditions are set to be q(0)=qd(0) andq˙(0)=[00]T. Let the controller parameters beΛ=3I,K=40I,Γw=103I,Γa=3I,Γb=6IandΓ=70. Five wavelet functions are used and for the initializing of their parameters, all scales are set to one, the shifts are selected over [–1,1] with equal distances and weights are set to zero. These initial conditions and parameters are for all the simulations.Simulation 1:First, the WNN-AFEE performance is examined for force estimation and tracking control of the robot in interaction with a nonlinear environment. It is assumed that there is an uncertainty in the robot model, where the second link mass is unknown. Here, the tracking performance and force estimation are both important for us. The wall is located at xe=1.3m and has a nonlinear spring-damper model asFx=100(x−xe)+20(x−xe)3+20x˙+10x˙3. Due to the wall position, the robot can exert force in the positive direction of the x-axis. The commanded trajectory isqd(t)=π3+π6cost,−π2−π4costTradthat is shown for just one cycle with the interacted environment in Fig. 7. The trajectory is in the robot workspace with no singular points. The results of this simulation are depicted in Fig. 8, which shows the convergence of the force and mass estimations besides the tracking control of the robot. Fig. 8a and b shows the learning process of the proposed controller that improves the tracking control during the simulation. Fig. 8c shows a little force estimation error in the early collisions that is because of WNN estimation error and the mass uncertainty in the model. Fig. 8d shows the convergence of the estimated mass to its real value that improves the learning process of the WNN and reduces the force estimation error.For comparing WNN-AFEE with other schemes, the previous simulation is repeated with a single adaptive force estimator. The force estimation law isFˆ˙=103Js[13]. The trajectory tracking and force estimation results are represented in Fig. 9for this case, which show larger tracking and force estimation errors. Unlike the WNN–AFEE that improves its performance during the process, the force estimator has an unimproved performance. Another simulation for a disturbance estimator with the adaptive lawdˆ˙=500swas done [12], in which the estimated force isFˆT=dˆTJ†and J† is the pseudo inverse of J. Fig. 10illustrates the results of disturbance estimator for this case. Table 1provides the RMS of tracking and force estimation errors of both joints together (forming a vector) for the four methods of WNN–AFEE, force estimator and disturbance estimator during the simulation. RMS of error is a usual criterion for comparison, which is used in many studies [38–41]. The results show significant improvements in the tracking and force estimation errors for WNN–AFEE. This table also includes the results of a RBF based force–environment estimator which is called RBF_AFE. For this network, 10 neurons are used which their activation functions are Gaussian functions. The parameters of the activation function are selected similar to WNN. The updating rule of weights is also similar to WNN with same gains. RBF_AFE results in Table 1 are improved rather than the two schemes of force estimator and disturbance estimator. However, due to discontinuity of the environment WNN is more successful than RBF in estimating the external force and controlling the robot.Simulation 2:For this simulation, the manipulator is interacting with a uniform nonlinear environment. The environment is modeled as a nonlinear spring-damper connected between the end-effector and a fixed point in the following form.(57)F=15(l−0.4)+12(l−0.4)3+7dldt+5dldt3(N)l=(y−1.5)2+(x−1.1)2(m)dldt=x˙lx+y˙lyl(m/s)Fx=Flxl=Fx−1.1(y−1.5)2+(x−1.1)2(N)Fy=Flyl=Fy−1.5(y−1.5)2+(x−1.1)2(N)where l is the spring-damper length, lx and ly are the decomposed components of l in x-axis and y-axis. For this simulation, it is assumed that the accurate robot model is known. The controller parameters and the desired trajectory are similar to the Simulation 1. The posture of the robot in the presence of the spring-damper is depicted in Fig. 11for one cycle of the trajectory. Fig. 12illustrates the simulation results of the robot for this environment. According to this Fig., it is clear that the WNN–AFEE has an efficient performance in both force estimation and tracking control of the robot. Again, this simulation is repeated for a force estimator and disturbance estimator and results are depicted in Figs. 13 and 14respectively. For better comparison, Table 2provides the RMS of tracking and force estimation errors for these three schemes. Comparing the results of WNN_AFEE with other two schemes shows the efficiency of the proposed approach in both tracking and force estimation accuracy. The other important advantage of using WNN–AFEE instead of a force estimator or a disturbance observer is that the performance efficiency would be increased over time. The other information included in Table 2 is the results of RBF_AFEE, which is competitive with the results of WNN_AFEE. In fact, the continuousness of the environment led to improved results for RBF_AFEE. In these cases that the environment is not discontinuous and complicated, using RBF_AFEE is more beneficial since there are less computations and less parameters exists for updating.Simulation 3:To study the effect of the singularity in WNN–AFEE performance, another simulation is performed for the trajectories with singular points. The trajectory of the robot is selected asqd(t)=π4+π6cost,−π4−π4costTrad, which is depicted in Fig. 15for a single cycle of the robot motion. The singular points are indicated in Fig. 15c. In these points, the exerted force cannot be estimated accurately due to the structural force endurance of the manipulator, which its direction is shown by an arrow in Fig. 15a. It means that the force cannot affect the actuators or the controller performance since it is endured by robot structure. Fig. 16illustrates the results of this simulation, which shows an acceptable position tracking control. Force estimation is affected by the singularities and has inevitable estimation errors. Figs. 17 and 18illustrate the results of force estimator and disturbance estimator for this case. As it is observable, the worst response is for disturbance estimator, which need Jacobian inverse to compute the external force. Even though, the pseudo inverse is used to minimize the singularity influence on the force estimation, but the estimation results are still unacceptable. Table 3provides the RMS of tracking and force estimations errors for these schemes. This table helps us to compare these schemes in two important criteria: tracking accuracy and force estimation accuracy. Clearly, tracking results of RBF_AFEE is competitive with WNN_AFEE results. However, the force estimation accuracy is affected by the singularity in RBF_AFEE, because it needs more time for learning before singularity happens.These three simulations clearly show the efficiency of the proposed WNN_AFEE in dealing with different conditions in estimating external forces. Moreover, comparing the results of WNN_AFEE with adaptive force estimator, disturbance estimator and RBF_AFEE shows the superiority of the proposed approach. WNN_AFEE not only was less impressed by the uncertainty and the singular points in trajectory rather than other schemes, it also shows a more significant behavior in estimating variable external forces. Following this study, the WNN_AFEE can be used for force controlling of manipulators. When force tracking control is needed, estimating both force and environment is more desirable which is provided in this study. Furthermore, facilitating the accurate force estimating condition (49) by changing updating rules or adaptive schemes would be another valuable study following this article.

@&#CONCLUSIONS@&#
