@&#MAIN-TITLE@&#
Optimal Golomb ruler sequence generation for FWM crosstalk elimination: Soft computing versus conventional approaches

@&#HIGHLIGHTS@&#
The application of Genetic Algorithm and Biogeography Based Optimization to generate near-optimal Golomb ruler sequences is being proposed.Both the approaches produce near-optimal Golomb ruler sequences very efficiently in reasonable execution time.The performances have been compared with the two other classical methods namely Extended Quadratic Congruence and Search Algorithm.The preliminary results indicate that BBO and GA appear to be most efficient approach to such NP-complete problems.BBO approach outperforms the GA slightly for larger mark values.

@&#KEYPHRASES@&#
Four-wave mixing,Optimal Golomb ruler,Unequal channel spacing,Soft computing,Genetic Algorithm,Biogeography Based Optimization,

@&#ABSTRACT@&#
Four-wave mixing (FWM) crosstalk is the dominant nonlinear effect in long haul, repeaterless, wavelength division multiplexing (WDM) lightwave fiber optical communication systems. To reduce FWM crosstalk in optical communication systems, unequally spaced channel allocation method is used. One of the unequal bandwidth channel allocation techniques is designed by using the concept of Golomb ruler. It allows the gradual computation of an optimally allocated channel set such that degradations caused by inter-channel interference (ICI) and FWM is minimal. This paper applies two soft computing based approaches, i.e., Genetic Algorithm (GA) and Biogeography Based Optimization (BBO) to generate near-optimal Golomb ruler sequences in reasonable time. The generated sequences have been compared with the two other classical approaches namely Extended Quadratic Congruence (EQC) and Search Algorithm (SA). It has been observed that BBO/GA outperforms the other two approaches.

@&#INTRODUCTION@&#
In conventional wavelength division multiplexing systems, channels are usually assigned with center frequencies (or wavelength) equally spaced from each other. Due to equal spacing among the channels there is very high probability that noise signals (such as FWM signals) may fall into the WDM channels, resulting in severe crosstalk [1].FWM crosstalk is the main source of performance degradation in all WDM systems. Performance can be substantially improved if FWM generation at the channel frequencies is avoided. It is therefore important to develop algorithms to allocate the channel frequencies in order to minimize the FWM crosstalk effect. The efficiency of FWM signals depends on the channel spacing and fiber dispersion [2,3]. If the frequency separation of any two channels of a WDM system is different from that of any other pair of channels, no FWM signals will be generated at any of the channel frequencies. This suppresses FWM crosstalk [4–7]. Thus, the use of proper unequal channel spacing keeps FWM signals from coherently interfering with the desired signals.In order to reduce the FWM crosstalk effects in WDM systems, several unequally spaced channel allocation (USCA) techniques have been studied in literature [1,8–14]. An optimum-USCA (O-USCA) technique ensures that no FWM crosstalk signals will ever be generated at any of the channel frequencies if the frequency separation of any two channels is different from any other pair of channels in a minimum operating bandwidth [11].Forghieri et al. [6] treated the channel-allocation design as an integer linear programming (ILP) problem by dividing the total available bandwidth into equal frequency slots. But the ILP problem was NP-complete and no general or efficient method was known to solve the problem. So optimum solutions (i.e., channel allocations) were obtained only with an exhaustive computer search [1].However, the techniques [1,8–14] have the drawback of increased bandwidth requirement as compared to equally spaced channel allocation. This is due to the constraint that the minimum channel spacing between each channel and that the difference in the channel spacing between any two channels is assigned to be distinct. As the number of channels increases, the bandwidth for the unequally spaced channel allocation methods increases in proportion [4].Optimal Golomb ruler (OGR) [7,15–17] has been proposed in literature for optimal channel allocation. This method for channel allocation achieves reduction in FWM crosstalk effect with the WDM systems without inducing additional cost in terms of bandwidth. This technique allows the gradual computation of a channel allocation set to result in an optimal point where degradation caused by inter-channel interference (ICI) and FWM is minimal [4,16].Much effort has been made to compute short or dense Golomb rulers and to prove them optimal. Golomb rulers represent a class of problems known as NP-complete [18]. Unlike the traveling salesman problem (TSP), which may be classified as a complete ordered set, the Golomb ruler may be classified as an incomplete ordered set. The exhaustive search [19,20], without heuristics, of such problems is impossible for higher order models. As marks are added to the ruler, the time required to search the permutations and to test the ruler increases exponentially. The success of soft computing approaches such as Genetic Algorithms (GAs) [21–23] in finding relatively good solutions to NP-complete problems provides a good starting point for methods of finding near-optimal Golomb ruler sequences. Hence, soft computing approaches seem to be very effective solutions for the NP-complete problems. No doubt, these approaches do not give the exact or best solutions but reasonably good solutions are available at a given cost. In this paper, a novel optimization algorithm based upon the theory of biogeography called Biogeography Based Optimization to generate the near-OGR sequences for various marks in reasonable time and its comparison with two conventional/classical approaches and Genetic Algorithm is being introduced.The remainder of this paper is organized as follows: Section 2 introduces the concept of Golomb rulers. Section 3 presents the problem formulation. Section 4 briefly introduces two soft computing approaches, i.e., Genetic Algorithms and Biogeography Based Optimization. This section further presents steps to generate the near-optimal Golomb ruler sequences by using these soft computing approaches. Section 5 provides simulation results comparing with conventional/classical approaches of generating unequal channel spacing, i.e., Extended Quadratic Congruence (EQC) and Search Algorithm (SA). Section 6 presents some concluding remarks.The idea of Golomb rulers was first introduced by Babcock [7] in 1952, and further derived in 1977 from the relevant work by Golomb et al. [15], a professor of mathematics and electrical engineering at the University of Southern California. According to Colannino [24] and Dimitromanolakis [25], Babcock [7] first discovered Golomb rulers up to 10-marks, while analyzing positioning of radio channels in the frequency spectrum. He investigated inter-modulation distortion appearing in consecutive radio bands and observed that when positioning each pair of channels at a distinct distance, then third order distortion was eliminated and fifth order distortion was lessened greatly. According to Rankin [26], all of rulers’ up to eight are optimum, the nine and ten mark rulers that Babcock presents are near-optimum.The term Golomb ruler refers to a set of non-negative integers such that no distinct pairs of numbers from the set have the same difference [27]. These numbers are referred to as marks[15,21,28] and correspond to positions on a linear scale. The difference between the values of any two marks is called the distance between those marks. The difference between the largest and smallest number is referred to as the length of the ruler. The number of marks on a ruler is sometimes referred to as the size of the ruler. Unlike usual rulers, Golomb rulers measure more discrete lengths than the number of marks they carry. Normally the first mark of the ruler [15,16,29] is set on position 0. Since the difference between any two numbers is distinct, the new FWM frequencies generated would not fall into the one already assigned for the carrier channels. Golomb rulers are not redundant as they do not measure the same distance twice [29].Fig. 1shows an example of Golomb ruler. The distance between each pair of marks is also shown in the figure [21].The particularity of Golomb rulers is that all differences between pairs of marks are unique [29,30]. Although the definition of a Golomb ruler does not place any restriction on the length of the ruler, researchers are usually interested in rulers with minimum length.A perfect Golomb ruler measures all the integer distances from 0 to L, where L is the length of the ruler [18,21,22]. In other words, the difference triangle of a perfect Golomb ruler contains all numbers between one and the length of the ruler. The length [31,32] of an n-mark perfect Golomb ruler should be at least (1/2)n(n−1).An optimal Golomb ruler is defined as the shortest length ruler for a given number of marks [21,33]. There can be multiple different OGRs for a specific number of marks.For example, as shown in Fig. 2the set (0, 1, 3, 7) is a non-optimal 4-mark Golomb ruler since its differences are (1=1−0, 2=3−1, 3=3−0, 4=7−3, 6=7−1, 7=7−0), all of which are distinct. As from the differences it is clear that the number 5 is missing so it is not a perfect Golomb ruler sequence.However, the unique optimal Golomb 4-mark ruler is (0, 1, 4, 6), which measures the distances (1, 2, 3, 4, 5, 6) (and is therefore also a perfect ruler) as shown in Fig. 1.The OGRs are used in a variety of real-world applications including communications and radio astronomy, X-ray crystallography, coding theory, linear arrays, computer communication network, PPM communications, circuit layout, geographical mapping and self-orthogonal codes [7,15,21,22,26].An n-mark Golomb ruler is a set of ‘n’ distinct nonnegative integers (a1, a2, …, an), called marks, such that the positive differences |ai−aj|, computed over all possible pairs of different integers i, j=1, 2,…, n with i≠j are distinct [20]. Let anbe the largest integer in an n-mark Golomb ruler [34]. Then an n-mark Golomb ruler (0, …, an) is said to be optimal if and only if1.There exists no other n-mark Golomb rulers having smaller largest mark an, andThe ruler is written in canonical form as the smaller of the equivalent rulers (0, …, a2, …, an) and (0, …, an−a2, an), where “smaller” means the first differing entry is less than the corresponding entry in the other ruler.In such a case, anis the called the length of the optimal n-mark ruler.Various classical methods are proposed in [1,8–14] to generate the OGRs. This paper proposes a novel soft computing technique based on the mathematics of biogeography to generate near-optimal Golomb ruler sequences, i.e., Biogeography Based Optimization algorithm and its performance comparison with existing soft computing methods that employ Genetic Algorithm (GA) [21–23,29].If the spacing between any pair of channels is denoted as CS and the total number of channels is ‘n’, then the objective is to minimize the length of the ruler denoted as RL, which is given by Eq. (1):(1)RL=∑i=1n−1(CS)isubject to(CS)i≠(CS)jwhere i, j=1, 2, …, n−1 with i≠j are distinct.If each individual element is a Golomb ruler, the sum of all elements of an individual forms the bandwidth of the channels. Thus, if an individual element is denoted as IE and the total number of elements (called channels) is ‘n’, then the second objective is to minimize the total bandwidth (BW), which is given by Eq. (2):(2)BW=∑i=1n(IE)isubject to(IE)i≠(IE)jwhere i, j=1, 2, …, n with i≠j are distinct.Since the use of exact methods for finding OGRs is unpractical in terms of computational resources, different heuristics [21–23,32] have been proposed to find optimal and near-optimal solutions in a reasonable time.In this section, the capabilities of one of the existing soft computing technique based on the theory of natural genetic called Genetic Algorithms and a new technique which is based on the theory of biogeography called BBO for the generation of near-optimal Golomb ruler sequences will be discussed.Genetic Algorithms are computerized global search and optimization algorithms based on the mechanics of natural genetics and natural selection [35]. Genetic Algorithms (GAs) were invented by John Holland in 1960s and were developed by Holland, his students and colleagues at the University of Michigan [36] in the 1960s and 1970s. GA is computerized techniques which have proved to be very efficient in search and optimization in the NP-hard or NP-complete problems [21,22]. These algorithms are good at taking large, potentially huge, search spaces and navigating them, looking for optimal combinations of things, solutions which we might not find in a lifetime.GAs operates on a population of potential solutions applying the principle of survival of the fittest to produce (hopefully) better and better approximations to a solution. At each generation, a new set of approximations is created by the process of selecting individuals according to their level of fitness in the problem domain and breeding them together using operators borrowed from natural genetics. This process leads to the evolution of populations of individuals that are better suited to their environment than the individuals that they were created from, just as in natural adaptation [32,36,37].Corresponding general pseudo-code for Genetic Algorithm is shown in Fig. 3.The pseudo-code for Genetic Algorithm to generate near-optimal Golomb ruler sequences proposed in this paper is shown in Fig. 4.Biogeography Based Optimization is a population-based evolutionary algorithm (EA) developed for global optimization. It is based on the mathematics of biogeography. It is a new kind of optimization algorithm which is inspired by the science of biogeography. It mimics the migration strategy of species to solve the problem of optimization [38–43]. Biogeography is the study of the geographical distribution of biological organisms. Biogeography theory proposes that the number of species found on habitat is mainly determined by immigration and emigration. Immigration is the arrival of new species into a habitat, while emigration is the act of leaving one's native region. The science of biogeography can be traced to the work of nineteenth century naturalists such as Wallace [44] and Darwin [45].In BBO, problem solutions are represented as islands and the sharing of features between solutions is represented as emigration and immigration. An island is any habitat that is geographically isolated from other habitats [46]. The idea of BBO was first presented by Dan Simon in December 2008 and is an example of how a natural process can be modeled to solve general optimization problems [47]. This is similar to what has occurred in the past few decades with Genetic Algorithms, Artificial Neural Networks (ANNs), Ant Colony Optimization (ACO), Particle Swarm Optimization (PSO), and other areas of computer intelligence. Biogeography is nature's way of distributing species, and is analogous to general problem solving. Suppose that there are some problems and that a certain number of candidate solutions are there. A good solution is analogous to an island with a high Habitat suitability index (HSI), and a poor solution is like an island with a low HSI.Features that correlate with HSI include factors such as distance to the nearest neighboring habitat, climate, rainfall, plant and animal diversity, diversity of topographic features, land area, human activity, and temperature [43]. The variables that characterize habitability are called suitability index variables (SIVs). High HSI solutions are more likely to share their features with other solutions, and HSI solutions are more likely to accept shared features from other solutions [47–49]. As with every other evolutionary algorithm, each solution might also have some probability of mutation, although mutation is not an essential feature of BBO the improvement of solutions is obtained by perturbing the solution after the migration operation [50]. In BBO, for each habitat the probability of its species count [47] is given by Eq. (3).(3)P˙s=−(λs+μs)Ps+μs+1Ps+1,S=0−(λs+μs)Ps+λs−1Ps−1+μs+1Ps+1,1≤S≤Smax−1−(λs+μs)Ps+λs−1Ps−1,S=Smaxwhere λs, and μsare the immigration and emigration rates, which are given by Eqs. (4) and (5) respectively.(4)λs=I1−SN(5)μs=ESNwhere N=Smax; S is number of species in the habitat; E is maximum emigration rate; I is maximum immigration rate and Smaxis maximum species count in the population.The general pseudo-code for BBO Algorithm is shown in Fig. 5.The pseudo-code for BBO Algorithm [28,51] to generate near-OGR sequences proposed in this paper is shown in Fig. 6.This paper applied GA and BBO approaches to obtain near-OGRs. The two approaches to generate near-OGR sequences have been written and tested in Matlab-7.6.0.324 (R2008a) [54] language under Windows 7, 64-bit operating system. Both the approaches have been executed on Intel(R) core™ 2 Duo CPU T6600 @ 2.20GHz processor Laptop with a RAM of 3GB. This section is devoted to the performance of soft computing approaches (GA and BBO) and their comparison with known OGR [15,20,24,26,34,52,53] and two of the conventional/classical approaches of generating unequal channel spacing, i.e., Extended Quadratic Congruence and Search Algorithm [1,13,21].To get near-optimal solution after a number of careful experimentation, following optimum values of GA and BBO parameters have finally been settled as shown in Tables 1 and 2respectively.In Table 2 the migration rates (I and E) are set to as maximum (i.e., 1) because in [43,47], it is mentioned that the maximum migration rates do not have a significant effect on the performance of BBO. This is because if I and E change, then the migration rates λ and μ change by the same relative amount for each solution. So the maximum migration rates are relative quantities; therefore, a simple scaling of their magnitudes does not affect BBO performance.The various near-optimum Golomb ruler sequences generated by Genetic Algorithm and Biogeography Based Optimization algorithm are shown in Appendices A and B respectively for different values of marks. It has been verified that all the generated sequences are Golomb rulers.As discussed in [35–37], there are various crossover methods available in Genetic Algorithm. In this subsection, the significance of crossover methods is investigated on the performance of Genetic Algorithm to generate near-OGR sequences in terms of ruler length and total bandwidth occupied by the different marks/channels. Table 3illustrates the comparison of three crossover methods namely single point, double point and uniform crossover for different marks/channels ‘n’ respectively, while all the other parameters are the same as mentioned in Table 1.From Table 3, it is clear that the crossover methods have little effect on the performance of Genetic Algorithm to generate near-optimal Golomb ruler sequences. But the single point crossover slightly outperforms the other two types of crossover.In this subsection, the significance of different selection methods on the performance of GA to generate near-optimal Golomb ruler sequences in terms of length of the ruler and total bandwidth occupied by the different marks/channels ‘n’ is investigated.The choice of particular selection method is problem dependent. Table 4illustrates the comparison of different selection methods namely rank selection, Roulette-wheel selection, and tournament selection [35–37] for different marks/channels respectively. Here, all remaining parameters are kept same as mentioned in Table 1 except for the selection methods.From Table 4, it is clear that rank selection method can find the best fitness easily then the other two selection methods.In this subsection, the influence of crossover probability (Pcross) on the performance of GA to generate near-OGRs for various values of marks/channels is investigated. Change in crossover probability, affects the performance of GA. To get near-optimal solution using GA, Pcrossis increased from 0.1 to 1.0 in suitable steps as shown in Table 5. The selection of the best crossover probability is not easy for a specific problem, and there are no concrete rules. Four different crossover probabilities, namely, Pcross=0.1, 0.5, 0.8 and 1.0, are chosen in this experiment. All remaining parameters are the same as mentioned in Table 1. Table 5 shows the influence of crossover probability on total bandwidth and ruler length occupied by the different number of marks/channels ‘n’ for GA approach.From Table 5, it is noted that for a crossover probability Pcross=1.0, the performance is significantly better as compared to other crossover probability. Based on the experimental results, we find that a small crossover probability is not able to sufficiently increase solution diversity.As the number of iterations increases, the total bandwidth of the sequence tends to decrease; it means that the rulers reach their optimum values after a certain number of iterations. This is the point where the results are optimum and no further improvement is seen, that is, we are approaching toward the optimal solution. This can be seen in tabular form for BBO and GA in Table 6for various marks/channels ‘n’ and graphically in Figs. 7 and 8respectively.From Table 6, it is noted that the iterations has little effect for low value marks say for n=3, 4 and 5 so they are not shown in Figs. 7 and 8. But for higher order marks, the number of iterations has a significant effect on the total bandwidth, i.e., bandwidth gets optimized after a certain numbers of iterations. The maximum number of iterations for the BBO and GA approaches is set to 5000.In this subsection, the influence of population size (Popsize) on the performance of soft computing approaches (GA and BBO) for various values of marks is investigated. Increasing the population size increases the diversity of possible solutions, and promotes the exploration of the search space. But the choice of the best population size of GA and BBO is problem-specific [43]. In this experiment, all the parameter settings for GA and BBO are same as mentioned in Tables 1 and 2 respectively except for population size. Table 7shows the influence of population size on total bandwidth and ruler length occupied by the different number of marks/channels ‘n’ for GA and BBO approaches.It is noted that for low value mark such as n=4, the population size had no significant effect on the performance of GA and BBO. From Table 7 it is clear that for population size of 100, the performance is significantly better as compared to other population sizes. But as the size of population increase the time required to get the optimized results slightly increase as the diversity of possible solutions increase. Research shows that after some limit, it is not useful to increase population size, because it does not help in solving the problem faster. The population size depends on the type of the problem [55]. By carefully looking at the results, the population size of 30 was found to be most appropriate for near-OGR problem.Here, the influence of different mutation rate (Pmutate) on the performance of BBO and GA to generate near-OGR sequences is investigated. As there are no concrete rules available for mutation rate, so selecting the best mutation rate is not easy for a particular problem. Here, three different mutation rates, namely, Pmutate=0.5, 0.05 and 0.005 are chosen, while all the remaining parameters are the same as mentioned in Tables 1 and 2. Table 8shows the results for different mutation rate on total bandwidth and ruler length occupied by the different number of marks/channels ‘n’ for BBO and GA approaches. The mutation helps to increase diversity and increases the changes for a good solution, but a high mutation rate (Pmutate=0.5) results in too much exploration and is detrimental to the improvement of candidate solutions. As the mutation rate decreases from 0.5 to 0.05, optimization ability increases greatly, but as the mutation rate continues to decrease to 0.005, optimization ability decreases rapidly. A small mutation rate is not able to sufficiently increase solution diversity [43].By carefully looking at the results in Table 8, we can find that when mutation rate is Pmutate=0.05, the performance is better than for the other mutation rates.The aim to use soft computing approaches (BBO and GAs) in this paper was to optimize the length of the ruler so as to conserve the total bandwidth occupied by the channels.Table 9lists the length of ruler (RL) and total bandwidth (BW) occupied by different sequences obtained by soft computing approaches for various marks/channels ‘n’ and its comparison with known OGR [15,20,24,26,34,52,53], EQC and SA [1,13,21]. Both the approaches were run 20 times until an optimal solution was found.Kwong and Yang [1] noted that the application of EQC and SA is limited to prime powers, so the total bandwidth and ruler length for EQC and SA are shown by a dash line in Table 9.Comparing the simulation results of BBO and GA with classical approaches, i.e., EQC and SA; it is observed that there is a significant improvement with respect to the length of the ruler and thus the total bandwidth occupied by the use of soft computing approaches that is, the results gets better. Figs. 9 and 10illustrate the comparison of soft computing approaches (BBO and GAs) to generate near-optimal Golomb ruler sequences with known OGR, EQC and SA in terms of the length of the ruler and total bandwidth occupied by the sequence for n=3, 4, 6, 8, 12, 14, 18 and 20, respectively.As shown in Table 9, for smaller mark values up to 7 the ruler length and total bandwidth occupied by BBO and GA are same. But for higher mark values, the ruler length and hence total bandwidth obtained by BBO Algorithm slightly approaches to their optimal values as compared with GA. This is also graphically shown in Figs. 9 and 10, respectively. Therefore, for most of the mark values, the computational cost (i.e., ruler length and total bandwidth) of BBO and GA will be same since it will be dominated by fitness function evaluation.Generation for Golomb ruler sequences is a very hard combinatorial optimization problem. The main reason is that finding OGRs by exhaustive search for large number of marks is; computationally very time consuming [20]. For example, the implementation for 19-mark optimal Golomb ruler took approximately 36,200 CPU hours on a Sun Sparc workstation using exhaustive parallel Search Algorithms [26]. The search for 20–26 marks were implemented by exhaustive parallel distributed OGR projects, taking several months-even years of calculation on thousands computers [27,31,52,53].The main technical contribution of this section is to show the experimental computational time taken by soft computing approaches to generate near-OGRs. Table 10lists the average CPU time of 20 executions obtained by soft computing approaches for various marks/channels ‘n’. The soft computing approaches (BBO and GAs) are able to find near-optimal Golomb rulers for up to 21-marks at the expense of significant execution time.In literature [22], it is specified that the program that employed a heuristic based exhaustive search, the times varied from 0.035s for 5-marks to 6 weeks for 13-marks ruler, whereas by non-heuristic exhaustive searches took 12.57min for 10-marks, 2.28 years for 12-marks, 2.07e+04 years for 14-marks, 3.92e+09 years for 16-marks, 1.61e+15 years for 18-marks and 9.36e+20 years for 20-marks. In literature [32], it is mention that OGRs obtained for 11, 12 and 13-marks took approximately 5h, 8h and 11h respectively with maximum iterations of 30,000. According to [32], the OGRs obtained by Tabu search took around 720s for 10-marks, 960s for 11-marks, 1913s for 12-marks and 2516s (approximately 41min) for 13-marks. Also the OGRs specified in [20] for 14 and 16-marks took approximately 1h and 100h respectively and in [26,31] for 17–19-marks took seven months. From Table 10, it is clear that for both soft computing approaches, the execution time varied from 0.00s for 3-marks ruler to about 34h (approximately 1.4 days) for 21-marks ruler. This represents the improvement achieved by the use of soft computing approaches to generate near-OGR sequences. Of course computers today play dominant role in reducing the computation time; efficient algorithms can further reduce the time complexity drastically by substituting best for reasonably good solutions.

@&#CONCLUSIONS@&#
