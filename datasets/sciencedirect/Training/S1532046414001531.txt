@&#MAIN-TITLE@&#
Modular design, application architecture, and usage of a self-service model for enterprise data delivery: The Duke Enterprise Data Unified Content Explorer (DEDUCE)

@&#HIGHLIGHTS@&#
DEDUCE is a self-service platform for data generated in clinical practice.The application is a framework of modules, each providing a targeted functionality.DEDUCE Cohort Manager is the keystone module for user data exploration.The DEDUCE application is based on a data-driven architecture.DEDUCE has 674 activated users with an average length of activity of 9.9months.

@&#KEYPHRASES@&#
Cohort definition,Research query tool,Medical informatics applications,Information systems,Application development,System design and architecture,

@&#ABSTRACT@&#
PurposeData generated in the care of patients are widely used to support clinical research and quality improvement, which has hastened the development of self-service query tools. User interface design for such tools, execution of query activity, and underlying application architecture have not been widely reported, and existing tools reflect a wide heterogeneity of methods and technical frameworks. We describe the design, application architecture, and use of a self-service model for enterprise data delivery within Duke Medicine.MethodsOur query platform, the Duke Enterprise Data Unified Content Explorer (DEDUCE), supports enhanced data exploration, cohort identification, and data extraction from our enterprise data warehouse (EDW) using a series of modular environments that interact with a central keystone module, Cohort Manager (CM). A data-driven application architecture is implemented through three components: an application data dictionary, the concept of “smart dimensions”, and dynamically-generated user interfaces.ResultsDEDUCE CM allows flexible hierarchies of EDW queries within a grid-like workspace. A cohort “join” functionality allows switching between filters based on criteria occurring within or across patient encounters. To date, 674 users have been trained and activated in DEDUCE, and logon activity shows a steady increase, with variability between months. A comparison of filter conditions and export criteria shows that these activities have different patterns of usage across subject areas.ConclusionsOrganizations with sophisticated EDWs may find that users benefit from development of advanced query functionality, complimentary to the user interfaces and infrastructure used in other well-published models. Driven by its EDW context, the DEDUCE application architecture was also designed to be responsive to source data and to allow modification through alterations in metadata rather than programming, allowing an agile response to source system changes.

@&#INTRODUCTION@&#
Many healthcare organizations have created integrated data repositories to organize and store data generated in the care of patients for secondary analysis [1–3]. Traditionally, these data have been provided to researchers following consultation with database analysts, who translate requirements into structured query language (SQL) queries that return data extracts. However, this method is time-consuming, does not scale easily, and often does not allow clinician researchers or quality improvement personnel to intervene during data exploration in order to match project and research objectives.A self-service query interface can alleviate these issues, allowing users to access data without first needing to understand the underlying database structure [1–3]. However, such an interface must ensure a consistent environment for data exploration and related activities by users and provide a robust framework for complex query concepts. Despite the importance of this topic, issues surrounding the design of a user-friendly query interface, query path, and underlying application architecture have received scant attention in the literature, likely reflecting the wide heterogeneity of available methods and technical frameworks [4–7].In this paper, we discuss the design, application architecture, and implementation of Cohort Manager (CM), the keystone module within the Duke Enterprise Data Unified Content Explorer (DEDUCE) self-service data access portal, and its context in the overall application modular design. CM allows subject–area-spanning cohort definition, combination of cohorts from multiple queries, and data extract definition in a Web-based environment. We describe our framework for presenting complex query design options to users, the application architecture supporting this framework, and the product’s usage patterns to date.The Duke Medicine enterprise data warehouse (EDW) stores and interrelates data generated in the care of the approximately 4.3million patients in our health system, comprised of three hospitals and a wide network of affiliated outpatient primary care and specialty clinics. Retrospective data extend back to 1996. The EDW is a dimensionally modeled, standards-based database organized into multiple high-level subject areas such as demographics, encounters, provider orders, procedures, diagnoses, lab results, medications, vitals, radiology reports, and pathology reports. A series of extract-transform-load (ETL) processes integrate data from source systems to ensure consistency and quality and to minimize redundancy. The EDW is supported by a team of more than 25staff, and has been described previously [8].Individual consultation with data analysts had typically been required for obtaining clinical data extracts for research and quality improvement tasks at our organization, but the number of requests exceeded available resources, and wait times for service increased. To address this issue and support a sustainable mechanism to facilitate access to data, we developed a Web-enabled business intelligence environment called DEDUCE Guided Query (GQ), which allows researchers and quality improvement personnel direct access to EDW data. Specifically, DEDUCE GQ allows users to apply filter criteria to one clinical subject area at a time in a wizard-like setting to obtain both aggregate reports and pre-designed raw data extracts from the EDW, with protected health information (PHI) available as appropriate [8]. DEDUCE v1.0, with GQ as the centerpiece, was deployed in August 2008 within the Cognos Business Intelligence (BI) platform (version 8.2; IBM, Armonk, NY, USA).DEDUCE GQ was intentionally designed to be simple and easy to use; for those reasons, it was not configured to allow user-defined “join” logic. Through feedback from users, we quickly realized that more sophisticated self-service querying functionality was desirable. For example, a researcher may wish to identify all patients with a given chronic disease, such as type 1 diabetes, who have presented to a health-system clinic within the previous month. The user may realize that although this chronic condition is persistent for a patient (as is sex or race), it would not be captured on a patient-based, demographic basis. It would seem logical to use GQ to search for all clinic encounters within the past month and then identify those with appropriate diagnosis codes from the billing context. However, this strategy would miss diabetic patients who might have presented at Duke Medicine, but who did not have the relevant ICD-9-CM code applied during their most recent encounter – a potential scenario if, for example, the patient presented for a lab test or urgent care visit where their diabetes was not pertinent to the care provided. A better approach would be to individually identify two distinct, encounter-based patient cohorts: (a) all patients who had ever had a diagnosis code for type 1 diabetes; and (b) all patients who had presented at a Duke clinic in the past month. Joining these two cohorts to retain only those individuals common to both groups (by applying the Boolean “and” operator) would create the correct dataset and have the effect of using information associated with encounters as “patient-based” query attributes.To allow for this more sophisticated type of self-service data querying, we reevaluated our overall approach and conceptualized an environment of interconnecting modules that, taken together, comprise the DEDUCE enterprise data delivery framework (Fig. 1).This modular conception has been the blueprint for subsequent releases of DEDUCE. DEDUCE was extended as a Web-based ASP.NET and C# application beginning with v2.0 in August 2009. This infrastructure, which is complimentary to the Cognos BI platform supporting DEDUCE v1.0, has been the basis for all subsequent module development.CM was released with DEDUCE v2.0 and is the keystone module that provides cohort definition and data exploration features; it sits at the core of the DEDUCE framework. CM allows the definition of complex datasets by filtering across multiple subject areas, providing query join features, and serving as a hub of activity for other modules. GQ remains as a simple wizard-like module for data exploration, and is extensible to CM via a mechanism allowing a cohort defined within GQ to be loaded into CM. DEDUCE v2.0 also included the Chart Review functionality allowing review of the electronic health record (EHR) from within the DEDUCE application, thus facilitating efficient manual screening of the patient’s medical record through the clinician’s regular workspace. DEDUCE v3.0 (December 2010) added an application-level project organization to accommodate sharing of cohorts among project team members, as well as Export Manager, an interface that allows users to review, recall, and modify prior extract exports created in the system.More recent versions of DEDUCE have added new modules with functionality sufficiently distinct to require description in separate, future manuscripts. In brief, DEDUCE Clinical Text (CT; DEDUCE v4.0, September 2011) allows querying and retrieval of radiology reports and pathology reports, with the ability to receive cohorts from CM for further review, as well as to return further-filtered cohorts back to CM for additional refinement and export. Our newest feature, DEDUCE Geo (v4.3, November 2012), allows the visualization of patient data within an interactive mapping application, with the ability to filter and compare the geospatial characteristics of different cohorts, including the relationship to population density.DEDUCE development follows an agile software development methodology in which regular testing, release, and feedback cycles from users drive system design, thereby providing DEDUCE with community-chosen design elements that ensure utility and longevity. Future DEDUCE modules, which are likely to target genomics data, biospecimen availability, and access to Duke Medicine-based clinical trial databases, will be developed and placed into the DEDUCE framework in such a way that CM continues to act as a point of central interaction.In order to deconvolute the details of a query and the actions involved in creating a patient cohort, we determined that the search method should be presented sequentially and visually. Each progressive step represents an additional SQL step that has the net effect of creating a more complicated query, as described in early work by Nigirin and Kohane [9]. Because CM is the central hub of the DEDUCE modular environment, we emphasized the seamless integration with other modules and ease of user experience in our design.The CM query interface is designed to guide users to organize their queries in a manner that separates the execution steps for filter criteria that should be restricted to co-occurring within the same patient encounter (e.g., find a lab report generated within a type of inpatient visit by joining encounter identifiers) from the steps required to describe relationships occurring across encounters (e.g., a chronic disease diagnosis). We did this by creating the CM user query interface as a grid where users sequentially add grid lines corresponding to distinct cohorts of patients and their encounters. This approach is supported by a qualitative analysis of the structure of 16years’ worth of research data queries, where queries were seen to be developed in sets, with each new query in a set working off the results of the previous query in a parent–child relationship [10]. There are four options for adding an initial cohort: upload a patient identifier list to create a discrete cohort, add all EDW patients, import a GQ cohort, or import a CT cohort. Applying sequential user-specified filters to a cohort grid line restricts the cohort such that all encounters must meet all filter criteria (i.e., the Boolean “and” operator is applied). Joining cohorts from different grid lines has the effect of finding those patients with the specified join relationship without considering their encounter basis.Our second major design decision separated the query definition activity in CM (“who do you want to identify for your cohort?”) from the data extraction activity (“what do you want to know about your cohort?”). For example, although race and sex are not typical cohort exclusion criteria, this information is critical for grant applications. This approach helps the user deconstruct their goal into a series of discreet steps and is similar to the process and logic likely to be used by a data analyst in the same situation.Finally, we ensured that most query steps could be built, and the results of queries saved, without forcing any refresh of data until the user dictated this action. This allows the user to expect the same set of data to persist, even after they discontinue a session, unless they explicitly trigger a re-execution of the query. This decision also improved system efficiency, given both the considerable volume of data that must be filtered to define a specific query, as well as variable system load on shared hardware and network resources within our technology stack.In addition to the user interface and modular design, the augmentation of DEDUCE in subsequent releases has incorporated important decisions about application architecture. This context is largely transparent to the user, but is important for system scalability, support of rapid development and deployment, and extensibility.The data warehousing context behind DEDUCE was a primary driver for the development of these architecture components. The EDW is a consumer of source system data from applications used in the delivery of patient care within Duke Medicine. Because the EDW is the recipient of source system data, and does not directly control the source systems themselves, a primary objective of our work was to create a scalable architecture that is responsive to changes in source system data. The concepts discussed in the following Sections (2.5.1 through 2.5.3) constitute the framework of DEDUCE as a data-driven application.The DEDUCE application “data dictionary” is the linchpin of the data-driven application architecture. This set of metadata tables contain the system attributes of every data element available to users within DEDUCE, including the data element’s data type, database location, and type of filter/operator that can be applied. The data dictionary serves as a mediator between the DEDUCE application and EDW data structure.The DEDUCE data dictionary is based on a patient-centric and encounter-basis model. Clinical data are organized into subject areas, such as diagnoses, procedures, and medications. Each subject area must have a logical relationship to the associated patient and/or encounter data. Almost all subject areas are associated with the encounter basis, which represents an important chronological dimension for these data.Each data element has an access indicator in the data dictionary, defining it as being PHI, a value allowed in a limited dataset, or a value allowed in a de-identified dataset. This property is used to determine whether the data element is available to the user within the context of a given session. For example, if the user is connected to DEDUCE under the role of review preparatory to research, only data elements associated with limited datasets would be available within their session.Beyond being flexible for when new data elements are added, this structuring allows DEDUCE to be relatively tolerant of changes and expansion of the EDW because database table locations are stored as metadata. New data elements and subject areas are incorporated into the application by entries into the data dictionary and do not necessitate changes to the DEDUCE application programming.The EDW is a dimensionally modeled data warehouse. In broad terms, dimension tables represent the master terminologies, while fact tables contain the corresponding measures. We recognized the opportunity to extend the dimensional concept to an application-specific context, especially to support user exploration of data. Therefore, in addition to the existing infrastructure of dimension tables within the EDW, we implemented a complimentary component within DEDUCE (beginning with v2.1) which we call “smart dimensions.”Smart dimensions are driven from the DEDUCE data dictionary for every categorical data element. These smart dimension data are stored in a separate application-specific table, which contains the distinct values and counts of associated patient and encounter records. Each night, the smart dimensions are refreshed by automated queries that run against the DEDUCE data dictionary and source data. Smart dimensions are reflective of actual data availability and sources, independent of the data modeling for the EDW itself.This nightly process allows the user interface to be dynamically constructed in a more efficient manner, since the smart dimension values are already populated, are available to all users, and do not need to be queried at point of interaction. Dimensional values without associated patient or encounter data are not presented to the user. This automated process precludes the need for manual profiling or curation of lists within the application.The DEDUCE data-driven application architecture is exposed to the user through the interactive filter dialogues used to explore data and apply data parameters within DEDUCE, primarily within the CM module. Such user interfaces are constructed dynamically at application run-time, rather than being programmed with a static set of options within the application.When the user triggers a filter action within DEDUCE, the user interface screen is constructed dynamically to display the results. These dynamic user interfaces use a combination of the DEDUCE data dictionary (for the context of the data elements) and the associated smart dimensions (Fig. 2). By default, all filter action interfaces are rendered by dynamic user interfaces, although the application can be programmed to override this behavior.The patient and encounter counts displayed through the smart dimension allow the user to incorporate data volume and prevalence considerations into their selection without having to drill down to individual results. This context is important in an EDW environment, where naming conventions and distribution of data values within source systems may not be known by the user, and allows more efficient data exploration.DEDUCE includes a rigorous privacy and security framework that provides only the information that users are authorized to access. DEDUCE has its own active institutional review board (IRB)-approved study protocol that permits it to be used by quality improvement personnel and researchers with appropriate IRB authorization. All DEDUCE developers and data analysts have training in Health Insurance Portability and Accountability Act (HIPAA) regulations with regard to research with human subjects. In all cases, DEDUCE authenticates using Microsoft Windows Server 2003 (Redmond, WA, USA) Active Directory accounts. If an IRB access mode is selected, the user is prompted for the protocol number. Using a connection to the IRB study database, the DEDUCE authentication process validates that the study is active and that the user is included in the protocol. A detailed audit log is maintained of the activity. DEDUCE supports five modes of access (Table 1), an expansion since this model was first described [8] (see Table 2).

@&#CONCLUSIONS@&#
Like many institutions, Duke Medicine is a dynamic environment in which the technical infrastructure of patient care systems is continuously evolving. By incorporating an application architecture that is responsive to underlying data, and that allows modifications to be driven by alterations in metadata rather than programming, DEDUCE is an efficient solution that can respond to source system changes in an agile method. This is particularly important in a data warehousing environment where source systems have different software development life cycles than the platforms, such as DEDUCE, that consume these data.Research needs are also continuously evolving, and DEDUCE is well-positioned to support future directions in patient care and research interests, allowing data-driven exploration to precede and strengthen hypothesis development, and allowing the investigator to interact directly with the data without depending on EDW data analysts.Because of the DEDUCE self-service model, careful requirements analysis and user feedback are essential to the interface development process, especially for interface design. Our overall experience indicates that a user-friendly environment is essential for ensuring accessibility to enterprise assets and, ultimately, opening the treasure trove of data generated in the care of patients for continuing use.