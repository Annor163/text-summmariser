@&#MAIN-TITLE@&#
A multi-objective optimization of type-2 fuzzy control speed in FPGAs

@&#HIGHLIGHTS@&#
This paper proposes a multi-objective genetic optimization of type-2 fuzzy controllers.The method was tested in speed regulation of a direct current motor.Comparison with a type-1 fuzzy control is presented.Interval type-2 fuzzy control was implemented on FPGAs.Comparison with PID control is also presented.

@&#KEYPHRASES@&#
Multiobjective,GA,AT2-FLC,T1-FLC,ReSDCM,FPGA,

@&#ABSTRACT@&#
This paper proposes a design of multi-objective genetic optimization for the average approximation of an interval type-2 fuzzy logic controller (AT2-FLC) using linear combination of individual criteria. There has been shown, on the real case, that the proposed method can be competitive to other commonly used approaches in the design of fuzzy controllers. The AT2-FLC was tested with different levels of uncertainty and different number of bits for the VHDL codification to regulate speed in a direct current motor (ReSDCM). Comparisons were made between the type-1 fuzzy logic controller versus AT2-FLC synthesized in VHDL code for FPGA and the AT2-FLC in VHDL versus the PID controller to ReSDCM. The main contribution of the paper is the design, implementation and comparison of multi-objective GA optimization of AT2-FLC for FPGA real applications. The AT2-FLC is targeted to a Xilinx Spartan 3A XC3S700A device using the Xilinx Foundation Environment.Fuzzy controllers are commonly used due to their advantages in managing uncertainty in non-linear plants. There are at least two approaches for designing such controllers, leading to: type-1 (T1-FIS) and type-2 fuzzy inference system (IT2-FIS, AT2-FIS). Typically, a T1-FIS consists of three stages: fuzzification, inference and defuzzification [24]. A T1-FIS uses exact membership functions, while interval type-2 fuzzy inference systems (IT2-FIS) are described by membership functions with uncertainty [16,25]. The IT2-FIS consists of four stages: fuzzification, inference, type reduction and defuzzification [17]. The average approximation of interval type-2 fuzzy inference system (AT2-FIS) is an interval. Type-2 controllers have been designed as fuzzy inference system or average approximation of interval inference system. AT2-FIS is an interval type-2 fuzzy system, that involves replacing a type 2 fuzzy system using the average of two appropiate T1-FISs, and this method [23] is applied as follows: (1) replace each T2-MFs with two T1-MFs, with different degrees of membership in order to obtain the footprint of uncertainty. (2) In the type-2 inference stage it is necessary to compute the inference stage from each T1-FIS. (3) Compute the defuzzification of each T1-FIS, the results of the two systems are averaged instead of the type reduction and defuzzification stage. The hardware implementation of AT2-FIS was recognized as competitive to software implementation because offers significantly faster processing and ability of performing parallel processing [5].An IT2-FIS and AT2-FIS can be implemented on a general purpose computer [1,2,9] or by a specific use of a microelectronics realization such as the FPGA. There are IT2-FISs implemented in computer software, but the required computer processing time particularly in real-time systems is slow. For this reason a FPGA hardware implementation of the AT2-FIS is proposed because the FPGA has fast processing and the ability of performing parallel processing [7].The FPGA is a logic device that contains a two dimensional array of generic logic cells and programmable switches. A logic cell can be programmed to perform a simple function, and a programmable switch can be customized to provide interconnections among the logic cells. A custom design can be implemented by specifying the function of each logic cell and selectively setting the connection of each programmable switch. These cells contain IOBs, LUTs and slices. A logic cell contains a small configurable combinational circuit with a D-type flip-flop. The most common method to implement a configurable combinational circuit is a look-up table (LUT). An n-input LUT can be considered as a small 2n by 1 memory. The IOB is an input/output block of a Spartan 3A FPGA device provides a programmable interface between an I/O pin and the device's internal logic. It contains several storage registers and tri-state buffers as well as analog driver circuits that can be configured to provide different slew rates and driver strength and to support a variety of I/O standards. In Xilinx terms, two cells are grouped to form a slice, and four slices are grouped to form a configurable logic block (CLB) [4].The AT2-FIS and IT2-FIS are based on rules, which incorporate linguistic variables, linguistic terms and fuzzy rules; the acquisition of these rules is not an easy task for the expert and is of vital importance in the operation of the controller. The process of adjusting these linguistic terms and rules is usually done by trial and error, which implies a difficult task for the designer, but there are many optimization methods such as genetic algorithms (GA) [11,22] that can be used to find optimal fuzzy systems designs [8]. Optimization algorithms help in the controller design and the model identification, most of the time the objective function depends on several criteria, in these cases it is better to use multiple criteria approach [5,19], which provide reliability and robustness in difficult search environments [6].There are some works related to the optimization of a particular problem. In [3], a review of the methods used in the design of interval type-2 fuzzy controllers is presented. The fundamental focus of the work is based on the basic reasons for optimizing type-2 fuzzy controllers for different areas of application. They consider the application of genetic algorithms, particle swarm optimization and ant colony optimization as three different paradigms that help in the design of optimal type-2 fuzzy controllers. In [12], the authors propose a neuro-fuzzy inference circuit that generates membership function and inference rules automatically in the learning process. In this circuit they uses membership functions, which are generated by only using NOT operations and bit shift operations and tune only the parameters of the consequent part to reduce the circuit scale. This circuit is designed by using the Verilog HDL hardware description language and realized on the FPGA. In [18] they carried out the optimization and implementation of a fuzzy logic controller used as a maximum power point tracker for a standalone photovoltaic power system. The near optimum design for membership functions and control rules were found simultaneously by genetic algorithms. The fuzzy logic controller was designed, as well the components of the photovoltaic control unit, were implemented efficiently on a Xilinx reconfigurable FPGA chip using VHDL. In [21] the authors proposed a GA IP core that can be customized in terms of the population size, number of generations, crossover and mutation rates, random number generator seed and the fitness function. This proposal has been successfully synthesized and verified on a Xilinx Virtex II pro FPGA device with a clock speed of 50MHz. The GA core has been used as a search engine for real time adaptive healing, but can be tailored to any given application by programming the values of the desired GA parameters.This paper proposes a method for genetic optimization of the triangular and trapezoidal type-2 membership functions (T2-MFs) of an AT2-FIS for hardware applications such as the FPGA. This method involves considering only certain points of the membership functions, the fuzzy rules are not changed in order to give greater efficiency to the algorithm for use in real time applications. The GA is synthesized in Matlab code. The GA has been tested in both the AT2-FLC and T1-FLC.The main contributions of this paper are the optimization of the fuzzy controller embedded in electronic systems, such as an FPGA using the average of two type-1 fuzzy systems, and with this, an approximation of a type-2 fuzzy system with less execution time was obtained. Different resolutions for hardware encoding were shown; the result was interesting because after 14bits the error does not decrease but the response time (speed DC motor) is slower. We evaluate the advantages of type-2 fuzzy systems in the uncertainty characteristics offered.Comparisons were made between the T1-FLC versus AT2-FLC in VHDL code and AT2-FLC in VHDL code versus PID controller to ReSDCM, to evaluate the difference in performance of three types of controllers, using the t-Student statistical test. Fig. 1shows the methodology diagram used for the optimization of T2-MFs for AT2-FIS in the FPGA.This paper has been organized as follows: in Problem statement section the description of the control problem is given, in Multiobjective optimization approach section the multiobjective approach of the T1-MFs and T2-MFs for T1-FLC and AT2-FLC respectively are presented, a design of AT2-FLC for ReSDCM in VHDL for FPGA is presented in Design of the AT2-FIS for FPGA section, discussion of experimental results between the T1-FLC and AT2-FLC versus PID controller are shown in Discussion of experimental results section. Finally, Conclusion section offers conclusions about this work.The problem statement is formulated as follows, regulation speed of the DC motor in real environment, to solve this problem arise the following questions, which control type is adequatÃ«?, fuzzy control?, conventional control (PID for example)?, which is the best device for programming the control speed?, FPGA?, microcontroller?. The following answers are given: fuzzy systems are used because they can solve linear and nonlinear problems regardless of the plant model, are also able to solve problems when the inputs are uncertain. The fuzzy system may be implemented in a FPGA due to parallel processing, as well as the ability to be reprogrammed n times. Fig. 2shows the AT2-FLC for ReSDCM, in this case the AT2-FLC is a fuzzy incremental controller model [10].Fig. 2 has the following inputs, error (e(t)) and change of error(eâ²t), and the output is the control signal (y(t)), the control objective of the AT2-FLC where t is the sampling time is:(1)limtâây(t)âr(t)=0The reference signal r(t), is given by [0.70] revolutions per minute (rpm). The inputs are calculated as follows:(2)e(t)=r(t)ây(t)(3)eâ²t=e(t)âe(tâ1)The uncertainty block represents an external perturbation, the goal is to disrupt the AT2-FLC and then the AT2-FLC retrieved its desired path. The uncertainty is represented by Eq. (4), where x is the uncertainty level factor [0.1]:(4)yË(t)=y(t)+xÃrandnA GA method was used for the optimization of the T2-MFs and T1-MFs parameters. This section is divided in two subsections, the first is the GA optimization of the T1-FLC, and the second is the GA optimization of the AT2-FLC, this with the idea of performing a comparison of the GA optimization of the AT2-FLC versus GA optimization of the T1-FLC.Fig. 3shows the triangular and trapezoidal membership functions (MFs) that are used.Fig. 4shows the inputs and output shape of the T1-FLC, in other words, three MFs, two trapezoidal MFs to the extremes and one triangular MF in the center are used.Fig. 5shows the range of the MFs for inputs and output, where the center of the triangular MF is fixed, in this case 128 (if n is 8bits), which for us is the zero.For the optimization of the T1-FLC using the GA method, the chromosome that represents the information of the individual must be defined, in this case is related to the universe of discourse and the linguistic terms. Fig. 6shows the chromosome of the GA.In Table 1, the boundary for the T1-MFs parameters of the chromosome are shown, where n is the number of bits, which can be modified by the user. For the GA optimization of the T1-FLC is only necessary to move three MF parameters for each input and output (a2, b2 and a1) instead of eleven MF parameters for the inputs and output (a0, a1, a2, a3, b0, b1, b2, a0, a1, a2, and a3) because we have eight MF parameters fixed (a0, a1, a3, b0, b1, a0, a2 and a3).For the genetic optimization of the AT2-FLC, triangular and trapezoidal T2-MFs are used. Fig. 7shows the T2-MFs that are used.The design of the AT2-FLC only considers triangular and trapezoidal T2-MFs for each input and output, and Fig. 8shows the design of the T2-MFs.Fig. 8 shows the design of the input and output of the AT2-FLC with fixed and variable parameters, where the universe of discourse and the degree of membership are divided into n bits. The blue points are fixed, the red dots represent the parameter a2, the green dots are fixed (b1) and the yellow dots represent the parameter a1. In Table 2, we show the boundary T2-MFs parameters.where PU corresponds to the ranges of the upper T2-MF and PL corresponds to the ranges of the lower T2-MF. We can see in Fig. 8 that the GA only needs to move ten points (a2, a3U, a3L, b0U, b0L, b2U, b2L, a0U, a0L and a1) for each input and output instead of seventeen points for each input and output (a0U, a0L, a1, a2, a3U, a3L, b0U, b0L, b1, b2U, b2L, a0U, a0L, a1, a2, a3U, a3L), because we have seven MF parameters fixed (a0U, a0L, a1, b1, a2, a3L and a3U). This is gives greater speed and efficiency to the genetic algorithm.After we designed the shape of the input, output and range is necessary to define the chromosome of the GA that represents the information of the individual, which in this case is related to the universe of discourse and the linguistic terms. Fig. 9shows the chromosome used for the GA.The objective function to evaluate the GA for the T1-FLC and AT2-FLC must be defined, and in this particular case we are proposing to solve the problem of regulation of speed of a DC motor. It can be noticed that we have a multi-objective GA [14] because the output of the both controllers needs three characteristics help us to determine the best individual solution, the weighted sum method was used for multiobjective optimization. The weighted sum approach treats the multiobjective optimization as a composite objective function [15]. The composite objective function is expressed as follows:(5)U=âi=1wiFi(x)where wiis the positive weight values. Minimizing Eq. (5) will provide a sufficient condition for optimal multiobjective solution to be found. Since the objective of this research is to provide a compromise between the minimum overshoot (O1), minimum undershoot (O2) and minimium steady state error (sse), the following composite objective functions is considered:(6)U=w1F1(x)+w2F2(x)+w3F3(x)where w1, w2 and w3 are the assigned weights and F1=O1, F2=O2 and F3=sse. In this case w1=w2=w3=1 [15]. The transient closed loop response of T1-FLC and AT2-FLC can be evaluated by the using the error criterions such as O1, O2 and sse. These cost functions are evaluated as follows:a)Minimum overshoot(7)ify(t)>r(t)âo1=min(y(t))âr(t)Minimum undershoot(8)o2=min(y(t))âr(t)Minimum output steady state error (sse)(9)sse=ât=2011000y(t)âr(t)where y(t) is the output of the system and r(t) is reference.The methodology for the process of GA optimization consists in that the MFs parameters for both controllers are initialized randomly and the weights set (w1, w2 and w3) are assigned. The objective function and fitness are evaluated. The best set of MFs parameters are memorized. If there are better individuals, the MFs parameters of the both controllers are downloaded into the FPGA using the Xilinx system generator toolbox of Matlab, once we obtained the data from the speed DC motor, the GA cycle continues, if it meets the convergence criteria (generations number) of optimization the process ends, if this criteria is not met, then evaluates each individual, selecting (stochastic universal sampling was used) a percentage of population, the crossover operation is performed the crossover single point(XOVSP, this function performs single point crossover between pairs of individuals and returns the current generation after mating), mutation (the mutate rate takes the representation of the current population, mutates each element with given probability and returns the resulting population) and reinsertion to preserve elitism. Then new individuals are sent (MFs parameters) to both controllers in the FPGA, if it meets the convergence criteria then the cycle ends, if the convergence criteria are not met again, selection, crossover, mutation and reinsertion operators are performed to meet the convergence criteria.Fig. 10shows the process of the GA, which is carry out in real time, the GA finds parameters for MFs respectly and are evaluated in the T1-FLC or AT2-FLC until the iteration condition is fulfilled.The average approximation of interval type-2 fuzzy systems was codified into VHDL, the AT2-FIS has four stages: fuzzification, inference, defuzzification and average. Fig. 11shows the block diagram of the AT2-FIS in VHDL.The common inputs for each stage of the AT2-FIS are reset (rst), clock (clk) and clock enable (ce), these inputs are used to restart the system at any time and clk input is a clock pulse, which is determined by the FPGA (in this case 50MHz). The fuzzification stage has two inputs error (x1) and change of error (x2), these inputs correspond to the AT2-FIS block of Fig. 2, fuzzification stages receives the upper and lower T2-MFs parameters respectively, from Fig. 8 each input has two trapezoidal MF and one triangular MF, the first trapezoidal MF has nb_tra label, which is a four elements vector, this is each point of the trapezoidal MF (nb_tra1, nb_tra2, nb_tra3, nb_tra4). The z_tri label correspond to triangular MF, which is a three elements vector representing the triangular MF points (z_tri1, z_tri2, z_tri3). Finally we have the pb_tra label this correspond trapezoidal MF of four elements (pb_tra1, pb_tra2, pb_tra3, pb_tra4). We can differentiate each input checking the subscript labels of each MF parameters, in other words the nb_tra label correspond to trapezoidal MF of the input 1 and nb_2_tra label to correspond to trapezoidal MF of the input 2. These parameters are sent from the GA to the fuzzification stage. In the fuzzification stage these data are processed for to compute the membership degrees and linguistic labels.The inference stages receive from fuzzification stage the membership degrees, which are g_e and g_de, these are two vectors of three elements (g_e1, g_e2, g_e3, g_de1, g_de2, g_de3). Also receive the linguistic labels, which are e and de, these are two vectors of three elements (e1, e2, e3, de1, de2, de3). The inference process consist in calculate the firing forces (gc) and consequents (c) using the min operation, these consequents and firing forces are two vectors of nine elements (c1, c2, c3, c4, c5, c6, c7, c8, c9 and gc1, gc2, gc3, gc4, gc5, gc6, gc7, gc8, gc9) respectively, and sent to the defuzzification stage. In the defuzzification stage the firing forces and consequents vectors are received to compute the crisp value (yl or yr) using the height method (see Eq. (10)), the max point of the MFs output (BD_pmax, H_pmax, BI_pmax) are added because in the defuzzification method is necessary, the yl and yr are sent to the final average stage to obtain the crisp value using the average for these variables.Fig. 12shows a description of the stages involved in the AT2-FIS codified to VHDL.In Fig. 12 the input data are the T2-MFs parameters sent by the GA and the inputs of the fuzzy system (in this case the ReSDCM), the MFs parameters are sent to a counter and once to a register where they are stored, subsequently it calculates the value of the slope (m) [13] may be positive or negative (bits is the number of bits is selected by the user P1, P2 and P3 are the MFs points), then to calculate the m the fuzzification stage calculated the degree of membership using the equation of the line Î¼x=m*(XâP), where X is the input of the AT2-FIS, m is the slope and P is the point of closest to MF to the input value, the linguistic label (Lx) is sent to directly to the inference stage. The inference stage receives all membership degrees and its multiplexed to obtain the min operation (Î¼x ^ Î¼dex) [20], the Lx are evaluated in the rule base is given by Table 3. At the defuzzification stage receives the dates obtained in inference stage, in this case consequents (Cm) and degree of membership called firing forces (Om), these data are evaluated using the method of the heights to finally get the range ylor yras the case.Table 3 shows the rule base of the AT2-FIS.An example of rules using this codification is: If e is â01â and de is â11â then C (consequent) is BD. The defuzzification stage is calculated using the height is method [24] as shown in Eq. (10).(10)y(x)=âm=1nCmomâm=1nomwhere Cmare the consequents and Omare the firing forces, in this case m=1, 2, 3,â¦,9.Experiments were performed on the FPGA implementation environment. The AT2-FISs are targeted on a FPGA Xilinx Spartan 3A XC3S700A device; Table 4shows the device utilization summary for this stage. We see that after having synthesized in VHDL the AT2-FIS there are space is available on the FPGA.As shown in Table 4, the fuzzification and defuzzification stages are the stages that use more space on the FPGA, because there is where more operations are performed. In the first stage of algorithm we compute the division for the calculation of the slope, multiplication, addition and subtraction to calculate the degree of membership for each membership function and compute the division for obtain the crisp value in the last stage.To demonstrate the performance of the T2-MFs optimization for the AT2-FLC for ReSDCM in FPGA, we considered two main experiments: genetic optimization for AT2-FLC for ReSDCM in FPGA implementation and comparisons for AT2-FLC and T1-FLC with GA optimization versus PID controller with ZieglerâNichols method [26] for the Kd, Ki and Kp tuning.Several experiments were performed to find the best AT2-FLC optimized with GA method. The main idea is to achieve a comparison of the results obtained with different levels of uncertainty, which amounts to making an external perturbation and then verify the robustness of the controller. Table 5shows different results for the optimization of the AT2-FLC in FPGA.It can be noticed in Table 5 that the best AT2-FLC found by the GA has the smallest convergence error (experiment no. 13). Below are the AT2-FLC characteristics for experiment no. 13. Fig. 13shows the T2-MFs of the error and change of error inputs for experiment no. 13.Fig. 14shows the T2-MFs of the control signal output and convergence error of the GA method for experiment no.13.Fig. 15shows the speed DC motor at 40rpm for experiment no. 13.Different levels of uncertainty (Eq. (4)) were applied to the AT2-FLC in order that the AT2-FLC does not get out control. Fig. 16shows the speed of the DC motor at 40rpm with different levels of uncertainty for experiment no.13.A comparison of average errors was performed between the best AT2-FLC in simulation versus best AT2-FLC in implementation, and Table 6shows the results.In Table 6 we note that the difference of error, because in simulation we are using a XSG tool of Matlab. XSG is a toolbox that is designed to simulate VHDL code in Matlab, in other words, all operations performed to carry out the speed DC control are performed within the PC, no time delay and the operations are performed in floating point, contrary to what happens in the FPGA. In the FPGA the error can be reduced if we increase the number of bits or resolution, and experiments were performed with different resolutions of the VHDL codification for AT2-FLC with optimized GA, in this case we use 8, 10, 14, 16, 20 and 24bits. Table 7shows the results obtained of the AT2-FLC with GA optimization for ReSDCM (experiment no. 13) at 40rpm for different number of bits.In Table 7 can be noted that after 20bits, the average error does not change, this is because the AT2-FLC performed operations with floating point and it is likely after a certain number of bits some data cannot be considered.Fig. 17shows the comparison of the speed of the DC motor for different numbers of bits (n).Fig. 18(a) and (b) shows a zoom to observe the difference between speeds DC motor with different resolution for AT2-FLC optimized with a GA at 40rpm.In Fig. 18(a) can be seen that the speed of DC motor for 24bits has a longer time delay compared to the others speeds, which might be expected because the FPGA performs more operations for 24bits in comparison with 8bits.In Fig. 18(b) we have a close-up to get a better vision of the behavior of the speeds for different resolution, we see that the others speeds of the DC motor (10, 14, 20 and 24bits) have a lower average in comparison with 8bits.The PID controller tuning was performed with the ZieglerâNichols method and the obtained values of the constants are kp=0.5, ki=0.2 and kd=0.025. The T1-FLC and AT2-FLC were optimized with the GA method (each one for 8bits of resolution). We use these three optimized controllers for comparison by adding perturbation. In Table 8, we show the comparison between the AT2-FLC, T1-FLC versus the PID controller for different levels of uncertainty in the implementation environment (FPGA). We noticed that the AT2-FLC has a lower error at different levels of uncertainty (noise), while the PID has lower error when there is no uncertainty.A statistical analysis of the three controllers using a t-Student test was performed. Table 9shows the statistical results in comparing the three controllers, the AT2-FLC is the best option for the problem of the ReSDCM, because the t-Student test is within the degree of confidence of 95 percent.Now the comparison between the three controllers is shown, which are the AT2-FLC, T1-FLC and PID controllers in FPGA. Fig. 19shows the comparison for Speed of DC motor when there is some uncertainty factor (x=0.5).Fig. 20shows the DC motor speed of the AT2-FLC in comparison with the T1-FLC and PID controllers with a particular level of uncertainty (x=1).As shown in Fig. 20 is very difficult to determine which controller has better performance, for that reason we decided to use the t-Student statistical test shown in Table 9.

@&#INTRODUCTION@&#


@&#CONCLUSIONS@&#
In this paper, an average approximation of an interval type-2 fuzzy system was proposed for hardware implementation, in this case to be implemented into a FPGA. We propose the GA optimization for the AT2-FLC, our goal is to achieve an optimized AT2-FLC with a small runtime, for this reason the fuzzy rules are not changed and we propose an optimization for T2-MFs, where only some of these parameters are modified.The objective function of the GA considers three characteristics: overshoot, undershoot and steady state error, so that this makes it a multi-objective GA using the weighted sum method for this approach.For the AT2-FLC implementation, we use the main characteristics of the FPGA, fuzzification, inference and defuzzification are performed in parallel. Timing results prove that an 8bits parallel implementation of the algorithm is capable of provide real time operation for this hardware platform, however we make comparisons for different number of bits for VHDL, reaching the conclusion for to our particular application, which is the regulation speed of DC motor, the use of 20bits is the best option because the error decreases 62% compared with the 8bits initially used in the implementation.Comparisons were made between the T1-FLC with GA optimization versus AT2-FLC with GA optimization and AT2-FLC with GA optimization versus PID Controller with ZieglerâNichols tuning, for ReSDCM, to evaluate the difference in performance of the three types of controllers, using the t-Student statistical test, giving a lower error for the AT2-FLC when there is uncertainty present.For all experiments it was considered the common goal of controlling the speed of the DC motor in a FPGA.The controllers were implemented on a Xilinx Spartan 3A XC3S700A FPGA device. We have shown the device utilization for FPGA, these results are encouraging because they allows us to introduce of more T2-MFs and fuzzy rules, in other words, a more complex AT2-FLC to obtain a better result, but this would increase the runtime. These results lead us to be optimistic about the advantages of designing more complex type-2 fuzzy logic controllers.