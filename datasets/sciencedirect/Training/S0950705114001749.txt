@&#MAIN-TITLE@&#
XML Matchers: Approaches and challenges

@&#HIGHLIGHTS@&#
We describe to what extent the specificities of DTDs/XSDs impact on the Schema Matching task.We introduce a template to describe the main components of an XML Matcher, their role and behavior.We illustrate how each of these components has been implemented in some popular XML Matchers.We analyze commercial tools implementing XML Matchers.We discuss XML source clustering and uncertainty management in XML Matchers.

@&#KEYPHRASES@&#
Schema Matching,DTD,XML Schema,XSD,XML source clustering,Uncertainty management in XML Matchers,

@&#ABSTRACT@&#
Schema Matching, i.e. the process of discovering semantic correspondences between concepts adopted in different data source schemas, has been a key topic in Database and Artificial Intelligence research areas for many years. In the past, it was largely investigated especially for classical database models (e.g., E/R schemas, relational databases, etc.). However, in the latest years, the widespread adoption of XML in the most disparate application fields pushed a growing number of researchers to design XML-specific Schema Matching approaches, called XML Matchers, aiming at finding semantic matchings between concepts defined in DTDs and XSDs. XML Matchers do not just take well-known techniques originally designed for other data models and apply them on DTDs/XSDs, but they exploit specific XML features (e.g., the hierarchical structure of a DTD/XSD) to improve the performance of the Schema Matching process. The design of XML Matchers is currently a well-established research area. The main goal of this paper is to provide a detailed description and classification of XML Matchers. We first describe to what extent the specificities of DTDs/XSDs impact on the Schema Matching task. Then we introduce a template, called XML Matcher Template, that describes the main components of an XML Matcher, their role and behavior. We illustrate how each of these components has been implemented in some popular XML Matchers. We consider our XML Matcher Template as the baseline for objectively comparing approaches that, at first glance, might appear as unrelated. The introduction of this template can be useful in the design of future XML Matchers. Finally, we analyze commercial tools implementing XML Matchers and introduce two challenging issues strictly related to this topic, namely XML source clustering and uncertainty management in XML Matchers.

@&#INTRODUCTION@&#
The eXtensible Markup Language (XML) has emerged as a de-facto standard for the representation and the exchange of data in a wide range of scenarios [1,25,62].As an example, XML has been widely adopted in many scientific domains, like biology [52], chemistry [71] and geography/geology [21], to name a few. In the context of e-commerce, many Web sites use XML as a tool to encode their catalogue of products, as well as to represent business documents, like invoices or orders.To make data exchange easier, organizations like the World Wide Web Consortium (W3C) are increasingly committed to the definition of advanced languages to describe the structure and content of an XML data source. One of the first languages was XML DTD (Document Type Definition) [34]. Later, W3C developed a more complex language called XSD (XML Schema Definition), also known as WXS (W3C Schema Definition), in order to overcome some limitations of DTD [101].1For instance, the fact that DTD does not support namespaces and that data type management provided by it is weak and can be applied only to attributes.1These languages are used to build a schema, i.e. a collection of metadata called schema components or schema elements. A schema specifies a set of rules an XML document must obey in order to be considered valid according to the schema itself. The availability of a schema significantly simplifies data exchange procedures [25]. For instance, there exist simple software programs that can check if a given document satisfies the constraints imposed by a given schema, and, in the positive case, allow for seamless data exchange among the interested parties.Despite the presence of powerful languages like DTD/XSD, the achievement of the full interoperability among applications based on XML data is often illusory. DTDs/XSDs, in fact, provide self-describing capabilities, i.e. they allow designers to define names for elements and attributes. However, the widespread assumption that these names denote some intrinsic semantics can be false; therefore, it is not sufficient to look at element/attribute names to catch the content of an XML document [35,99].An indefeasible precondition to achieve interoperability consists of detecting and identifying if two or more schema elements convey the same semantics, despite, for instance, they have different names.The task of finding pairs (or groups) of elements sharing the same semantics has a long tradition in Computer Science: In Database and Artificial Intelligence literature such a problem is known as Schema Matching[85], whereas in the Semantic Web community it is known as Ontology Alignment[35] or Ontology Matching[39]. The vast majority of these approaches was reviewed in books or surveys [9,10,35,39,85]. However, most of them do not make any specific assumption on the data model and format used to represent Schemas/Ontologies. Most of them have been originally designed to work on some data models (e.g., E/R diagrams) but, subsequently, have been applied and tested on DTD/XSD.However, in the latest decade, a growing number of researchers focused on the specificities of DTD/XSD and considered them in the design of new, ad hoc, Schema Matching approaches. We call XML Matchers these approaches.DTDs/XSDs offer advanced capabilities and features that are not present in other data models. The usage of these features is far from trivial, but it can have a positive impact in the design of an XML Matcher. By now, Schema Matching of XML sources is a mature and well-established research area in which several and authoritative contributions have been provided.The goal of this survey is to offer a comprehensive coverage of XML-specific Schema Matching, regarded as a narrow sub-area of Schema Matching.The main contributions of this paper are as follows:1.We describe to what extent the specificities of DTD/XSD impact on the Schema Matching process. We show that the hierarchical features of DTD/XSD open up new research problems that do not emerge, for instance, in the matching of E/R diagrams or relational schemas.We provide a template, called XML Matcher Template, describing the main components of an XML Matcher, as well as their role and behavior. We discuss how each of these components has been implemented in some popular XML Matchers. This helps us to better describe how XML Matchers work in practice. Our template acts as a tool for highlighting and understanding commonalities among XML Matchers that, at a first glance, could appear as totally unrelated. It can act as a baseline for future work allowing research on this topic to make progress at a faster pace.We discuss some commercial prototypes designed to find matchings between DTDs/XSDs and we use our XML Matcher template to classify them.We discuss two challenges strictly related to XML-specific Schema Matching, namely XML source clustering and uncertainty management in XML Matchers.This paper is structured as follows: In Section 2 we review related surveys on Schema Matching/Ontology Matching with the aim of showing the main novelties brought in by this work. In Section 3 we summarize the basic notions and definitions about Schema Matching. Our XML Matcher Template is presented in Section 4, whereas Section 5 provides a framework to systematically classify XML-specific Schema Matching approaches. In Section 6 we provide an overview of commercial XML Matchers. In Section 7 we examine two important challenges related to XML Matcher research, namely XML source clustering and uncertainty management in XML Matchers. In Section 8 we discuss the main lessons learned from our analysis. Finally, in Section 9, we draw our conclusions.

@&#CONCLUSIONS@&#
Finding semantic matchings between DTDs/XSDs is a key step to ensure a full interoperability across multiple data sources. In this paper we have provided a detailed analysis of approaches (that we called XML Matchers) explicitly designed to find matchings between DTDs/XSDs. We discussed in depth the opportunities (which, sometimes, represent also severe challenges) provided by some constructs which represent key components of the XML specification but are not available in other data modeling languages, like E/R diagrams or relational schemas (think, for instance, of distributed namespaces or of the hierarchical organization of schema elements). We introduced a template, called XML Matcher Template, to describe the main components of an XML Matcher, their role and their interactions. We used our template to characterize and compare a set of XML Matchers which gained a large popularity in the literature. Afterwards, we focused on commercial XML Matchers. Finally, we presented two important challenges related to XML Matchers, namely the clustering of large collections of DTDs/XSDs and the uncertainty management in XML Matchers.Despite Schema Matching and XML Matching are success stories lighted up by brilliant research results, further efforts are required from both a theoretical perspective and a technological one. On one hand, external sources (like domain-specific dictionaries or thesauri), which played a significant role in early Schema Matching systems, are now accompanied by further information sources (like user query logs). Therefore, it becomes compulsory to design and test new Schema Matchers capable of handling the information offered by these sources in an effective and efficient fashion. On the other hand, in real-life scenarios, human experts are often part of the matching cycle, because, for instance, their intervention is required to configure the whole matching workflow or to provide a feedback on the correctness of matching candidates. Therefore, advanced graphical tools are required to better help them. These tools could support a human expert to select the fragment of DTDs/XSDs to match, the matching algorithms to apply and the auxiliary data sources to employ in the matching process. An advancement in these fields would be of great benefit for commercial systems, which often deal with large DTDs/XSDs containing hundreds of schema elements.We argue that, in the future, the problems outlined above will catch the interest of researchers in both academy and industry, and we plan to analyze in detail scientific advancements in these fields.