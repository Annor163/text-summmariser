@&#MAIN-TITLE@&#
A hybrid scenario cluster decomposition algorithm for supply chain tactical planning under uncertainty

@&#HIGHLIGHTS@&#
A heuristic is proposed for solving large-scale multi-stage stochastic mixed-integer programs.The algorithm significantly accelerates the scenario cluster decomposition approach.An accelerated sub-gradient algorithm is used to solve scenario-cluster sub-models.The algorithm is specialized to lumber supply chain tactical planning under uncertainty.

@&#KEYPHRASES@&#
Multi-stage stochastic programming,Scenario decomposition,Lagrangian Relaxation,Sub-gradient method,Variable Fixing Heuristic,

@&#ABSTRACT@&#
We propose a Hybrid Scenario Cluster Decomposition (HSCD) heuristic for solving a large-scale multi-stage stochastic mixed-integer programming (MS-MIP) model corresponding to a supply chain tactical planning problem. The HSCD algorithm decomposes the original scenario tree into smaller sub-trees that share a certain number of predecessor nodes. Then, the MS-MIP model is decomposed into smaller scenario-cluster multi-stage stochastic sub-models coordinated by Lagrangian terms in their objective functions, in order to compensate the lack of non-anticipativity corresponding to common ancestor nodes of sub-trees. The sub-gradient algorithm is then implemented in order to guide the scenario-cluster sub-models into an implementable solution. Moreover, a Variable Fixing Heuristic is embedded into the sub-gradient algorithm in order to accelerate its convergence rate. Along with the possibility of parallelization, the HSCD algorithm provides the possibility of embedding various heuristics for solving scenario-cluster sub-models. The algorithm is specialized to lumber supply chain tactical planning under demand and supply uncertainty. An ad-hoc heuristic, based on Lagrangian Relaxation, is proposed to solve each scenario-cluster sub-model. Our experimental results on a set of realistic-scale test cases reveal the efficiency of HSCD in terms of solution quality and computation time.set of harvesting blocksset of manufacturing millsset of raw materialsset of available raw material scenariosset of time periods corresponding to node n in the scenario treethe demand scenario treeset of immediate predecessor of each node n in scenario treethe total harvesting capacity in period tthe total transportation capacity in period tunit cost to harvest block bl during period tunit cost to transport raw material rm from block bl to mill m during period tunit cost to store raw material rm in block bl during period tstumpage fee for raw material rm in block bl during period tinventory holding cost of raw material rm at mill minventory capacity at mill m during period tsupply capacity of block bl in period tmaximum number of periods over which harvesting can occur in block bllead time of procuring raw material rm from block blunit purchase cost of raw material rm from block m in period tmaximum number of blocks in which harvesting can occur during period tprobability of node n in scenario treeprobability of supply scenario scminimum contract purchase quantity from block blsafety stock of raw material rm at mill mvolume of available raw material rm in block bl for supply scenario scforecasted demand of raw material rm for mill m in period t at node n of the scenario treebinary variable that takes 1 if harvesting occurs in block bl during time period t at node n of the scenario tree and 0 otherwiseinventory of raw material rm in block bl at the end of period t for supply scenario sc at node n of the scenario treeinventory of raw material rm at mill m at the end of period t for supply scenario sc at node n of the scenario treepurchasing quantity of raw material rm from block bl in period t at node n of the scenario treeproportion of harvested block bl in period t at node n of the scenario tree

@&#INTRODUCTION@&#
Large-scale Multi-stage Stochastic Mixed Integer Programming (MS-MIP) models usually arise in multi-period planning problems under uncertain parameters with dynamic and non-stationary behavior over the planning horizon. Supply chain planning (e.g., Alonso-Ayuso, Escudero, Garín, Ortuño, & Pérez, 2003; Alonso-Ayuso, Escudero, & Ortuño, 2003), and production planning (Kazemi Zanjani, Ait-Kadi, & Nourelfath, 2013; Kazemi Zanjani, Nourelfath, & Ait-Kadi, 2010; Kazemi Zanjani, Nourelfath, & Ait-Kadi, 2013) under uncertainty are few examples among others.Such models are among the most intractable ones due to the fact that the number of complicating binary and/or integer variables in the deterministic MIP model increases exponentially once the uncertainty is modeled as a scenario tree in a multi-stage setting. The latter is a viable way of capturing the evolution of all information trajectories over time. A variety of algorithms for solving multi-stage stochastic MIP models have been proposed (e.g., see van der Vlerk, 1996). Branch-and-Price (Lulli & Sen, 2004) and Branch-and-Fix Coordination methods (Alonso-Ayuso, Escudero, Garín et al., 2003; Alonso-Ayuso, Escudero, & Ortuño, 2003; Escudero, Garín, Merino, & Pérez, 2010; 2012)) are two of prevalent methods in the literature for solving MS-MIP models. Nonetheless, such algorithms are designated for special structured models such as lot-sizing and batch-sizing problems or pure 0–1 integer programming models. This makes them less suitable for general large-scale MS-MIP models with no particular structure similar to the supply chain tactical planning model investigated in this article.Scenario decomposition strategies (e.g., see Carøe & Schultz, 1999; Rockafellar & Wets, 1991) are among the most efficient approaches to solve large-scale multi-stage stochastic programs. Progressive Hedging Algorithm (PHA) (Rockafellar & Wets, 1991) is one of the scenario decomposition techniques that has been successfully applied as a heuristic to solve multi-stage stochastic MIP models. The main idea behind this algorithm is to decompose the original multi-stage stochastic program into deterministic scenario sub-models. Such subproblems are then coordinated by Lagrangian penalty terms in their objective function in order to obtain an implementable solution. Løkketangen and Woodruff (1996) proposed a heuristic algorithm based on PHA and Tabu Search. Haugen, Løkketangen, and Woodruff (2001) cast the PHA in a meta-heuristic algorithm where the generated sub-problems for each scenario are solved heuristically. Despite several advantages of Scenario Decomposition (SD) algorithms in solving stochastic programs, such approaches suffer from critical issues non-convergence or unacceptably long run-times in the context of large-scale MS-MIP models. Recently, Watson and Woodruff (2011) proposed algorithmic innovations to address several critical issues of PHA in the context of large-scale two-stage discrete optimization problems. In an attempt to speed up scenario decomposition algorithms in the context of large-scale MS-MIP models, the idea of scenario partitioning (clustering) in scenario trees has been proposed by several authors. The idea is to decompose the initial scenario tree into smaller sub-trees that share a certain number of ancestor nodes. The multi-stage stochastic model is then decomposed into scenario cluster sub-models which are coordinated by Lagrangian penalty terms in their objective function in order to compensate the lack of non-anticipativity. Escudero et al. (2010) embedded the idea of scenario partitioning with the Branch-and-Fix Coordination method to solve large-scale 0–1 multi-stage stochastic models. Escudero, Garín, and Unzueta (2016) proposed a cluster Lagrangian decomposition algorithm for solving MS-MIP model while implementing four approaches for updating Lagrangian multipliers. Carpentier, Gendreau, and Bastin (2013) proposed a heuristic for scenario partitioning of large scenario trees within the PHA. Escudero et al. (2016), Escudero, Garín, Pérez, and Unzueta (2013) demonstrated that adopting the sub-gradient algorithm to coordinate scenario cluster sub-models would result considerably higher convergence rates comparing to the PHA. It is noteworthy that in the PHA, an implementable solution in each node of the scenario tree is considered as the average of solutions of the set of scenario cluster sub-models that are indistinguishable at that node. In contrary, the sub-gradient method directly imposes the implementability condition in each node through a pair-wise comparison between the solutions of the set of indistinguishable scenario clusters at that node.In this study, we extend the idea of scenario clustering ofEscudero et al. (2016)based on an accelerated sub-gradient method. More precisely, we propose a scenario cluster decomposition (SCD) based on the sub-gradient method. Along with this contribution, there are also three other main contributions in the present paper. First, with the goal of reducing the number of iterations, we embed a variable-fixing heuristic within the sub-gradient algorithm. This algorithm fixes the value of binary variables in the common nodes of scenario cluster sub-models obtained at each iteration of SCD algorithm to zero or one in the next iteration according to a consensus rule among the solution of indistinguishable scenario cluster sub-models. Second, the accelerated SCD algorithm is specialized to tactical supply and procurement planning in the lumber supply chain under demand and supply uncertainty. To the best of our knowledge, due to high computational complexity, this problem has never been addressed in the literature. In this problem, scenario-cluster sub-models are MS-MIP models that are hard to solve. Hence, our third contribution is focused on proposing an ad-hoc heuristic to solve such sub-models. This algorithm is a Lagrangian Relaxation-based heuristic enhanced through updating the sub-gradient step-size.Hence, the proposed algorithm in this study is a Hybrid Scenario Cluster Decomposition (HSCD) heuristic applicable to large-scale MS-MIP models with a particular application in supply chain tactical planning. Along with the possibility of parallelization, the main advantage of the HSCD heuristic is accelerating the sub-gradient algorithm applied to coordinate scenario cluster sub-models into an implementable solution. Furthermore, it provides the possibility of embedding proper heuristics for solving scenario cluster sub-models depending on their special structure. Hence, significant improvement in terms of the convergence rate of the sub-gradient algorithm within the HSCD algorithm can be expected.Our experimental results on a set of real-size test cases in a Canadian lumber supply chain indicate the high quality of the solutions obtained by the HSCD heuristic in addition to significant CPU time reduction comparing to a commercial solver and the SCD algorithm proposed in Escudero, Garín, Merino, and Pérez (2012), Escudero et al. (2016).This article is organized as follows. In Section 2, a brief description of multi-stage stochastic programming is provided. The details of the HSCD algorithm is presented in Section 3. Section 4 summarizes the specialization of the HSCD algorithm to tactical supply and procurement planning in the lumber supply chain. Numerical results and concluding remarks are respectively provided in Sections 5 and 6. Finally, the multi-stage programming model for harvesting and procurement tactical planning in the lumber supply chain that is another contribution of this study is presented inAppendix A.Let us consider the following multi-period deterministic mixed integer model (Birge & Louveaux, 2011):(1)Z=min∑t∈τ[atxt]Subjectto:A1x1≤c1A′txt−1+Atxt≤ct∀t∈τ∖{1}xt≥0∀t∈τwhereτ={1,2,3,…,T}is the set of periods such thatT=|τ|; xtis the vector of decision variables including binary, integer, and continuous variables. atis the vector of objective function coefficients, AtandAt′are the constraints matrices, and ctis the right-hand-side vector in period t. For the sake of simplicity, we only present constraints with variables linking consecutive periods. These types of models are very useful in practice and usually arise in multi-period planning models under uncertain parameters with dynamic and non-stationary behavior over the planning horizon. Supply chain planning, lot-sizing, and batch-sizing problems are few examples among others.Without loss of generality, we assume that the uncertainty may affect parameters associated with technological coefficients in the constraints, as well as the right-hand-side vector. Furthermore, we consider that uncertain parameters have a dynamic behavior over time, hence they can be modeled as a scenario tree. A scenario tree, represented by Tree in this paper, is a computationally viable way of discretizing the underlying dynamic stochastic data over time. Fig. 1represents a four-stage scenario tree. Each stage in a scenario tree denotes the stage of the time when new information is available to the decision maker. The root node in a scenario tree represents the current state while the other nodes represent scenarios in other stages. Moreover, a scenario ω is a specific path from the root to the leaf of the tree. A probability (pr(n)) is associated to each node of the scenario tree indicating the likelihood of the corresponding node.It is possible to reformulate model (1) in the stochastic context based on a given scenario tree that leads to the Deterministic Equivalent Model (DEM). In order to obtain the multi-stage stochastic formulation, each decision variable in model (1) can be defined for each scenario, leading to the scenario reformulation model. However, the latter will not yield an implementable solution, as the decision maker cannot foresee the unknown parameters. The implementability or non-anticipativity condition (NAC) indicates that the decision variables corresponding to each node of the scenario tree at stage t are identical for any pair of indistinguishable scenarios at that stage. There are at least two ways to impose NAC in multi-stage stochastic programs leading to split and compact variable formulations. In the split formulation (model (2)), we need to enforce non-anticipativity by adding extra constraints explicitly.(2)Z=min∑ω∈Ω∑t∈τwω[atxtω]Subjectto:A1ωx1ω≤c1ω∀ω∈ΩA′tωxt−1ω+Atωxtω≤ctω∀t∈τ∖{1},ω∈Ωxtω=xtω′∀t∈τ∖{T},ω,ω′∈Btω,ω≠ω′xtω≥0∀t∈τ,ω∈Ωwhere Ω represents the set of scenarios, wωrepresents the probability attributed to scenario ω, andBtωis bundle of scenarios that are indistinguishable from ω at stage t.AtωandA′tωare the constraints matrices andctωis the right-hand-side vector for scenario ω in period t. Moreover, the non-anticipativity condition is explicitly formulated asxtω=xtω′.In contrast, in the compact formulation, the NAC is implicitly considered in DEM through defining decision variable for the nodes of the scenario tree. Model (3) is the compact formulation of model (1) in the stochastic context.(3)Z=min∑n∈Tree∑t∈τpr(n)[atxt(n)]Subjectto:A1x1≤c1A′t(n)xt−1(a(n))+At(n)xt(n)≤ct(n)∀t∈τ∖{1},n∈Treext(n)≥0∀t∈τ,n∈Treewhere xt(n) represents the vector of decision variables at node n in stage t in the scenario tree. At(n) andAt′(n)are the constraints matrices and ct(n) is the right-hand-side vector at node n in stage t. The immediate predecessor of node n in the scenario tree is denoted as a(n). Moreover, the probability of each node, pr(n), is calculated as∑ω∈Btωwω.Comparing multi-stage stochastic models (2) and (3) with the deterministic model (1) clearly indicates that the number of decision variables grows exponentially as the number of stages and branches in the scenario tree increases. This would make the model computationally intractable, particularly in cases that all or part of decisions are binary/integer. This is the main motivation behind developing efficient solution algorithms for solving this class of problems.The main idea behind the HSCD algorithm is to embed efficient heuristics within the scenario cluster decomposition (SCD) scheme in order to accelerate its convergence rate. Hence, we extend the method of Escudero et al. (2016) in MS-MIP models based on an accelerated sub-gradient method.The acceleration is based on a Variable Fixing Heuristic (VFH). Furthermore, since each scenario cluster sub-model is a multi-stage stochastic program that might be hard to solve in real-size instances, we propose to use an efficient ad-hoc heuristic to solve it. The procedure described above is summarized in Algorithm 1and will be elaborated in what follows.Scenario clustering in multi-stage stochastic programming is equivalent to breaking down the original scenario tree in a given stage (i.e., break stage) and obtain a set of scenario cluster sub-trees. For instance, in the scenario tree depicted in Fig. 1, if the break stage is chosen as stage 2, four scenario cluster sub-trees are obtained, as depicted in Fig. 2. As can be observed in Fig. 2, two of the latter sub-trees share node 2 and the other two share node 3, and all share node 1 in the original scenario tree. In the SCD algorithm proposed in this article, after clustering the original scenario tree, we formulate a multi-stage stochastic model for each scenario sub-tree (cluster) using the compact formulation by relaxing the NACs corresponding to common nodes. Scenario cluster sub-models are then coordinated by Lagrangian penalty terms in their objective function in order to compensate the lack of non-anticipativity. Finally, scenario cluster sub-models are solved into an implementable solution by the aid of sub-gradient algorithm. The advantages of using a direct sub-gradient method for coordinating scenario cluster sub-models rather than the PHA in terms of convergence rate has been demonstrated in Escudero et al. (2013) for two-stage stochastic programs.In order to select the break stage in the SCD algorithm, the trade-off between the size and the number of scenario cluster sub-models must be taken into consideration. On the one hand, as the number of scenario cluster sub-trees increases more sub-problems in the sub-gradient algorithm should be solved which would slow down its convergence rate. On the other hand, if the chosen number of scenario clusters is small, each scenario cluster sub-model becomes a large-scale MS-MIP which might be hard to solve. Finally, it should be noted that the convergence of scenario decomposition algorithms to an optimal solution has been proved in the literature (Rockafellar & Wets, 1991) for linear MSP problems. However, such algorithms can be considered as heuristics in the context of integer or MIP problems (see, e.g., Løkketangen & Woodruff, 1996). Same can be expected when applying the SCD algorithm to MS-MIP models. In what follows, we provide more details on partitioning the original scenario tree into sub-trees as well as the general formulation of scenario-cluster sub-models within the SCD framework.As mentioned earlier, the first step of the SCD algorithm is choosing the break stage (t*). Hence, in a symmetric scenario tree, the original scenario tree is decomposed top^=|Ω|/lscenario cluster sub-trees, where Ω indicates the scenario set and l denotes the number of scenarios in each sub-tree. It should be noted that the abovementioned sub-trees share common nodes that belong to stagest=1,2,…,t*in the initial scenario tree. Let us denote Npas the set of nodes belonging to sub-tree p and ηnas sub-tree sets that have node n in common. N1 and N2 are sets of nodes belonging to stages that are not after (i.e.,t=1,2,…,t*) and after the break stage (i.e.,t=t*+1,t*+2,…,T). Furthermore,N1p=N1∩NpandN2p=N2∩Npare sets of nodes in sub-tree p belonging to N1 and N2, respectively. For example, consider the four-stage scenario tree in Fig. 1 that is broken down into four scenario cluster sub-trees in Fig. 2. In this figure, the breaking stage is att*=2,and there are four scenario cluster sub-trees.η1={sub-tree1,sub-tree2,sub-tree3,sub-tree4},η2={sub-tree1,sub-tree2},η3={sub-tree3,sub-tree4}show that node 1 is included in sub-trees 1, 2, 3 and 4; node 2 is included in sub-trees 1 and 2; and node 3 is included in sub-trees 3 and 4. Also,N1={1,2,4,8,9},N2={1,2,5,10,11},N3={1,3,6,12,13},andN4={1,3,7,14,15}. Moreover,N1={1,2,3},N2={4,5,…,15},N11={1,2},andN21={4,8,9}.Let us consider the compact formulation of the DEM of a multi-stage stochastic problem (model (3)). After breaking down the scenario tree intop^sub-trees, we decompose model (3) intop^sub-models accordingly. Thus, the multi-stage stochastic MIP sub-model for each scenario cluster p can be expressed by the following compact formulation (model (4)).(4)Zp=min∑n∈N1p∑t∈τwp(n)[atxtp(n)]+∑n∈N2p∑t∈τpr(n)[atxtp(n)]Subjectto:A1x1≤c1A′tp(n)xt−1p(a(n))+Atp(n)xtp(n)≤ctp(n)∀t∈τ∖{1},n∈Npxtp(n)≥0∀t∈τ,n∈Npwherewp(n)=∑ω∈Ωpwωis the weight (probability) of nodes before the break stage (n ∈ N1) in sub-tree p; wωis likelihood of scenario ω; and Ωpis the set of scenarios belonging to sub-tree p. Moreover, thep^sub-problems (4) should be linked with each other by the NAC as follows:(5)xtp(n)−xtp′(n)=0∀p,p′∈ηn:p≠p′,t∈τ,n∈N1Considering the same example in Fig. 2, the explicit NAC formulated in (5) can be expressed as follows:(6)x11(1)=x12(1)=x13(1)=x14(1)x21(2)=x22(2)x23(3)=x24(3)It is also possible to consider the NAC (5) as a set of inequalities:(7)xtp(n)−xtp+1(n)≤0∀p=p̲ηn,…,(p¯ηn)−1,t∈τ,n∈N1(8)xtp¯ηn(n)−xtp̲ηn(n)≤0∀t∈τ,n∈N1wherep̲ηnandp¯ηnare the first and the last ordered sub-trees belonging to ηn(i.e., min {p|p ∈ ηn} and max {p|p ∈ ηn}, respectively). At each stage belonging toτ={1,2,…,t*(breakstage)},ηnrepresents the set of scenario sub-trees that have node n ∈ N1 in common. For instance, in the decomposed scenario sub-trees in Fig. 2, at stage 2, η2 represents the scenario sub-trees 1 and 2; and η3 represents the scenario sub-trees 3 and 4. Finally, the original MS-MIP model can be formulated as a splitting-compact variable representation model over the set of sub-trees (Escudero et al., 2012) as follows:(9)ZMS-MIP=min∑p=1p^∑n∈N1p∑t∈τwp(n)[atxtp(n)]+∑p=1p^∑n∈N2p∑t∈τpr(n)[atxtp(n)]Subjectto:A1x1≤c1A′tp(n)xt−1p(a(n))+Atp(n)xtp(n)≤ctp(n)∀p∈ηn,t∈τ∖{1},n∈{N1,N2}xtp(n)−xtp+1(n)≤0∀p=p̲ηn,…,(p¯ηn)−1,t∈τ∖{T},n∈N1xtp¯ηn(n)−xtp̲ηn(n)≤0∀t∈τ∖{T},n∈N1xtp(n)≥0∀t∈τ,n∈Tree,p∈ηnBy relaxing the NACs (the last two set of constraints) in model (9), the latter is decomposable intop^sub-problems corresponding to each scenario cluster sub-tree p. In order to compensate the lack of non-anticipativity in such sub-models, Lagrangian penalty terms (μtp(n)) can be added to their objective function and the sub-gradient algorithm can be implemented to solve the Lagrangian models. Model (10) is the Lagrangian relaxation of model (9) after relaxing the NACs.(10)ZSCD(μ,p^)=min∑p=1p^∑n∈N1p∑t∈τwp(n)[atxtp(n)]+∑p=1p^∑n∈N2p∑t∈τpr(n)[atxtp(n)]+∑p=p̲ηn(p¯ηn)−1∑n∈N1∑t∈τμtp(n)(xtp(n)−xtp+1(n))+∑n∈N1∑t∈τμtp¯ηn(n)(xtp¯ηn(n)−xtp̲ηn(n))Subjectto:A1x1≤c1A′tp(n)xt−1p(a(n))+Atp(n)xtp(n)≤ctp(n)∀p∈ηn,t∈τ∖{1},n∈{N1,N2}xtp(n)≥0∀t∈τ,n∈Tree,p∈ηnAs we mentioned before, model (10) can be decomposed intop^smaller sub-problems (model (12)), and its objective function can be obtained as the sum ofZSCDp(μ)values corresponding to each sub-tree as follows:(11)ZSCD(μ,p^)=∑p=1p^ZSCDp(μ)whereZSCDp(μ)is the objective value of the pth scenario sub-tree. Forp=p̲(ηn)+1,….,p¯ηn,the scenario cluster sub-model can be expressed (in compact formulation) as follows:(12)ZSCDp(μ)=min∑n∈N1p∑t∈τwp(n)[atxtp(n)]+∑n∈N2p∑t∈τpr(n)[atxtp(n)]+∑n∈N1∑t∈τ(μtp(n)−μtp−1(n))(xtp(n))Subjectto:A1x1≤c1A′tp(n)xt−1p(a(n))+Atp(n)xtp(n)≤ctp(n)∀t∈τ∖{1},n∈{N1,N2}xtp(n)≥0∀t∈τ,n∈NpIt should be noted that forp=p̲ηn,the term∑n∈N1∑t∈τ(μtp(n)−μtp−1(n))(xtp(n))should be replaced by∑n∈N1∑t∈τ(μtp̲ηn(n)−μtp¯ηn(n)).(xtp̲ηn(n))in the objective function. Finally, scenario cluster sub-models (12) are coordinated to an implementable solution by the aid of the sub-gradient algorithm. In what follows, we provide the details of sub-gradient algorithm and heuristics embedded in it to speed-up its convergence rate.The SCD algorithm is summarized in Algorithm 2. After initializing the Lagrangian multipliers (μtp(n)), each scenario cluster sub-model is solved by the aid of an ad-hoc heuristic. Once, the solutions of all sub-trees are obtained, the violation of corresponding NACs are verified and subsequently the sub-gradient vector (stk(n)) is calculated. Next, the Lagrangian multipliers are updated. This procedure is repeated for a number of iterations until the NAC are satisfied within a given error threshold. In Algorithm 2,Z¯HSCDis an upper-bound on the objective function of each scenario cluster sub-model and αkis the step modifier. The stopping criterion in this algorithm requires that ZHSCDdoes not improve after two consecutive iterations.As mentioned earlier, in order to accelerate the convergence of sub-gradient algorithm within the SCD algorithm, we propose a Variable Fixing Heuristic. The idea is to reduce the number of binary variables in each scenario cluster sub-model (12) in order to reduce the CPU time required to solve them. The details of this heuristic algorithm are elaborated in Algorithm 3. In this algorithm,xtpB(n)represents the vector of binary decision variables.At each iteration of the SCD algorithm, the VFH algorithm verifies the value of binary variables corresponding to all nodes in each stage before the break stage (n ∈ N1), obtained in the previous iteration over all scenario cluster sub-models (12). Next, such binary variables are fixed to 0 or 1 according to a consensus rule among all sub-trees. For instance, consider the case of 3 scenario sub-trees, where at a given iteration k, the value of a given binary variable at node n in a given stage before the break stage is equal to 1 in two of sub-trees and equal to 0 in the third one. According to the consensus rule given in Algorithm 3, we fix that binary variables at node n to 1 at iterationk+1in all scenario sub-trees that share node n.In this section, we aim at specializing the proposed HSCD algorithm described in Section 3 to a tactical supply and procurement planning in the lumber supply chain (SC) under supply and demand uncertainty. In what follows, we first describe the problem and the uncertainty involved in it. Furthermore, we provide the details of the application of the HSCD algorithm to solve this problem.In the lumber supply chain, the raw materials are logs that are shipped from forest contractors to sawmills. Logs are then sawn to green/finished lumbers in sawmills and are distributed to the lumber market through different channels. Supply and procurement planning in the lumber SC determines the optimal harvesting and procurement decisions over a planning horizon with the goal of minimizing cost while satisfying the log demand in sawmills. More precisely, we are looking for the harvesting schedule, i.e. the selection of harvesting blocks and the quantity of harvesting in each period by considering several harvesting constraints as well as log procurement decisions in sawmills. This problem can be formulated as a MIP model in the deterministic context (Sanei Bajgiran, Kazemi Zanjani, & Nourelfath, 2016).In lumber SC, forecasting the exact amount of demand for log type rm at sawmill m in period t (drm, m, t) is almost impossible. Furthermore, the availability of log type rm in harvesting block bl (vrm, bl) is also uncertain. Thus, considering random demand and supply in harvesting and lumber procurement tactical planning is essential. The uncertain log demand can be modeled as a scenario tree similar to the one depicted in Fig. 1. The nodes at each stage of the scenario tree constitute the states of the demand that can be distinguished by the information available up to that stage. On the other hand, the uncertainty in forecasting the availability of logs in each block can be modeled as a time independent random variable over the planning horizon; hence it can be modeled as a scenario set. According to the abovementioned uncertainty modeling for the log demand and supply, the Harvesting/Procurement (HP) tactical planning problem can be formulated as multi-stage mixed-integer stochastic program with recourse (model (A.1)–(A.15) in Appendix A).It should be noted that model (A.1)–(A.15) is a compact formulation, where the decision variables have been defined for each node of the scenario tree. Also, the stages in model (A.1)–(A.15) incorporate a number of time periods, and tndenotes the set of all time periods corresponding to node n. Due to the large size of tactical planning model in a real-size case study, we applied the HSCD heuristic described in Section 3 as a solution method.The HP problem is a multi-stage-stochastic mixed-integer programming problem. After decomposing the original scenario tree into a set of sub-trees (step 1.1. of Algorithm 1), we formulate the HP problem as an MS-MIP model for each scenario sub-tree (step 1.2) by considering the NACs corresponding to the implementability of Hbl, t(n) (harvesting schedule), Ybl, t(n) (portion of harvesting),Xrm,m,tbl(n)(procurement quantity) in model (A.1)–(A.15) as follows:(13)Hbl,tp(n)−Hbl,tp′(n)=0∀p,p′∈ηn:p≠p′,bl∈BL,t∈tn,n∈N1(14)Ybl,tp(n)−Ybl,tp′(n)=0∀p,p′∈ηn:p≠p′,bl∈BL,t∈tn,n∈N1(15)Xrm,m,tbl,p(n)−Xrm,m,tbl,p′(n)=0∀p,p′∈ηn:p≠p′,bl∈BL,rm∈RM,m∈M,t∈tn,n∈N1Next, we implement the sub-gradient algorithm to solve the scenario cluster sub-models into an implementable solution. Since, such sub-models are MS-MIP problems that are hard to solve for large-scale test instances, steps 2.1 and 2.2 in Algorithm 1 are applied as follows:Step 2.1 (Algorithm1): A Lagrangian Relaxation-based Heuristic (LRH) for solving scenario cluster HP sub-modelsIt is worth mentioning that the complexity of the integrated model (A.1)–(A.15) is due to the existence of binary variables corresponding to harvesting schedule during the planning horizon, in addition to constraints (A.6) and (A.7) that formulate the harvesting constraints in the forest. In other words, the latter two constraints can be considered as complicating constraints in the sense that after relaxing them from model (A.1)–(A.15), the resulting model can be solved much faster by a commercial solver. Hence, we propose a Lagrangian Relaxation (LR) algorithm where the aforementioned constraints are relaxed and their violation is penalized in the objective function by the aid of Lagrangian multipliers. Next, the sub-gradient method can be used to solve the Lagrangian model. The summary of LRH algorithm for model (A.1)–(A.15) is summarized in Algorithm 4. The stopping criterion in the LRH is the same as SCD algorithm (Algorithm 2), and ϵhis the step modifier. The Lagrangian Relaxation of model (A.1)–(A.15) (Lagrangian model) can be stated as model (16) where ubl(n) and vt(n) are the Lagrangian multipliers corresponding to constraints (A.6) and (A.7), respectively. A(n) is the set of ancestors of nodes that belong to the last stage (NT).(16)LIPh(u,v)=Minimize{ZHP−∑n′∈NT∑bl∈BLubl(n′)*(lbl−∑t∈tn∑n∈A(n′)Hbl,t(n))−∑n∈Tree∑t∈tnvt(n)*(nt−∑bl∈BLHbl,t(n))}Subjectto:(A.1)--(A.5)and(A.8)--(A.15).Note that solving model (16) by a classical sub-gradient algorithm suffers from two essential issues namely the slow convergence of the algorithm and the infeasibility of the converged solution. Consequently, we propose a Lagrangian Relaxation Heuristic (LRH) where we embed a heuristic algorithm which iteratively updates the search step-size of the sub-gradient algorithm. This is achieved through obtaining a new upper-bound on the objective function value based on the most recent lower-bound. The idea is to improve the quality of upper-bound based on the improved lower-bound as we proceed in the sub-gradient algorithm. The improved upper-bound can be used to adjust the search step-size (step 3 in Algorithm 4) which is expected to accelerate the convergence rate of the sub-gradient algorithm and to avoid the infeasibility of the converged solution. Algorithm 5summarizes the upper-bound updating algorithm. Updating the upper-bound is performed by solving a reduced MS-MIP model obtained after fixing a certain number of binary decision variables to zero according to the following criteria. In each iteration of the LRH, the solution of the Lagrangian model is verified in terms of feasibility of the relaxed binary constraints. Next, in the non-violated constraints, we identify those binary variables with the value equal to zero at the optimal solution. Those variables are then fixed to zero in each HP scenario cluster sub-model in order to obtain a feasible solution and a new upper-bound on the optimal objective function value.Step 2.2 (Algorithm1) (VFH)In each iteration of Algorithm 2 (SCD), we apply VFH heuristic (Algorithm 3) in order to reduce the number of iterations. For this purpose, we should find the value of∑p∈ηnHbl,tp(n)in all nodes belonging to the stages before the break stage (n ∈ N1) and fix the value ofHbl,tp(n)to 0 or 1 in the next iteration of SCD algorithm based on the given criterion in Algorithm 3.In this section, we first provide details on generating a testbed of problem instances along with algorithmic implementations. Then we provide the results of applying the HSCD heuristic proposed in this article to those test instances, where we compare the CPU time and the quality of solutions obtained by this algorithm with a commercial solver (CPLEX v12.5) and a 3-cluster SCD algorithm that provides optimal solution to the MS-MIP HP model.We consider 3 classes of tactical supply and procurement (HP) planning problems (model (A.1)–(A.15)) that differ in terms of the number of stages. In the first class (problem instances P1–P4), each stage incorporates 6 month (periods) over the 12-month planning horizon, leading to a 3-stage MS-MIP model; while in the second and third classes (P5–P8 and P9–P12 instances), each stage encompasses, respectively 4 and 3 months, leading to 4 and 5-stage MS-MIP models. In each class of test instances, we consider two types of lumber supply chains that differ in terms of the number of harvesting blocks available during the planning horizon and the amount of log demand. Finally, within each class and supply chain size, two variants of problems have been investigated that differ in terms of the variability level of the random log demand. More specifically, we consider two normal distributions for the log demand with equal mean-values and variances equal to 5 percent and 20 percent of the mean-values, respectively. The above-mentioned approach leads to 12 problem instances as summarized in Table 1. Its headings are as follows: Instance, member of the testbed we have experimented with; nc, number of constraints; ncv, number of continuous variables; nbv, number of 0–1 variables; nel, number of nonzero coefficients in the constraint matrix; dens, constraint matrix density (in percent); |Ω|, number of scenarios; |Tree|, number of nodes in the scenario tree; T, number of stages; Variability percent, variance of random log demand as a percentage of mean-value; and |BL|, number of harvesting blocks. In all test instances, the supply capacity of each block in the forest per month is supposed to be 2350 cubic meter. As in Beaudoin, LeBel, and Frayret (2006), the maximum number of periods (months) over which harvesting can occur in each block in the forest as well as the maximum number of blocks in which harvesting can occur per month are randomly generated from uniform distributions in the following intervals: U[10, 12] and U[1, 6], respectively. The average volumes of each log class available in each block are also randomly generated based on Beaudoin et al. (2006). The total harvesting capacity per month is supposed to be approximately 175,000 cubic meter. At each stage in the scenario tree corresponding to each test instance, we consider a normal distribution for the log demand which is approximated by a 3-point discrete distribution (i.e., high, average, and low demand). Furthermore, in each node of the demand scenario tree, 3 scenarios have been considered for the yield of different blocks in the forest according to the yield data provided in Beaudoin et al. (2006). The above-mentioned data sets have been validated by our industrial partner to correspond to the reality.All algorithms in this paper were coded in C++ using CPLEX v12.5 concert technology on a Dual-Core CPU 3.40 gigahertz computer with 16.00 gigabytes RAM.In this section, we first provide the main results of our computational experiments on implementing the HSCD heuristic (Algorithm 1) on the 12 HP tactical planning instances, described in Table 1, where we compare the solution and CPU time with a commercial solver (CPLEX v12.5). Next, we verify the importance of embedding LRH and VFH algorithms into SCD algorithm in terms of improvement in CPU time and the quality of the solution.It is noteworthy that CPLEX v12.5 could find a feasible solution with 18 percent optimality gap after 15 hours CPU time for the smallest test instances (P1 and P2) while considering a compact representation. Moreover, for the other test instances (P3–P12), CPLEX v12.5 could not find any feasible solution after 15 hours CPU time. Hence, this commercial solver was disregarded as an efficient tool for solving the 12 test instances. Alternatively, by decomposing the original scenario tree into 3 clusters, the SCD algorithm (Algorithm 2) (solving scenario cluster sub-models by CPLEX v12.5) can obtain the optimal solution of the MS-MIP HP model ((A.1)–(A.15)). The reason is the lack of NACs in stage one (break stage). Table 2represents the comparison between the results of HSCD algorithm with a 3-cluster SCD algorithm applied to solve the HP model for 12 test instances described in Table 1. 4 hours has been considered as the time limit to run both algorithms. The results are provided for two different values of break-stage includingt*=1andt*=2that results, respectively, 3 and 9 scenario clusters in both algorithms. The headings of Table 2 are as follows: Instance, member of testbed; Cost (HSCD), the best objective function value obtained by HSCD; HSCD time, time it takes for the HSCD algorithm to converge; Optimal 3-cluster SCD cost, the optimal objective function value (cost) obtained by the 3-cluster SCD algorithm; and Gap percent, the relative gap between the optimal objective value of the HSCD and SCD algorithms (relative optimality gap). In this table, N.A. indicates that the algorithm does not converge in 4h. All cost values in this table are divided by 1000 and CPU times are indicated in seconds. Furthermore, as indicated in Section 3, the stopping criterion for the HSCD heuristic requires that ZHSCD does not improve in two consecutive iterations. It should be noted that the HSCD heuristic is a Lagrangian-Relaxation based algorithm that provides a Lower Bound (LB) on the objective function value of the original MS-MIP HP model. Hence, it is expected that the bound obtained for break-staget*=1is smaller than the one for t* ≥ 2 (as also indicated in Escudero et al., 2016). As it can be observed in this table, fort*=1,SCD cannot provide an optimal solution for the last 4 test instances within 4h CPU time. In contrary both SCD and HSCD algorithms provide an optimal solution for the first 8 instances (0 optimality gap between the LB obtained by HSCD and the SCD algorithm). Also, fort*=2(9 scenario clusters), HSCD converges in less than 3 hours for the largest test instances. As expected, the quality of LB obtained by the HSCD heuristic is worse thant*=1although the optimality gap is less than 1 percent (0.68 percent) in average over the first 8 test instances. Furthermore, all non-anticipativity constraints are satisfied over all test instances. Since the quality of the LB obtained by considering t* > 2 was not better thant*=2,the results are not provided in the article.Next, in Table 3, for the same test instances, we compare the performance of the HSCD heuristic with the following three algorithms: (i) the SCD algorithm (Algorithm 2), where scenario cluster sub-models are solved by CPLEX v12.5, indicated as “SCD”; (ii) the SCD algorithm, where scenario cluster sub-models are solved by the aid of LRH (Algorithm 4), indicated as “SCD-LRH”; and (iii) the combination of SCD-LHR and VFH (Algorithm 3), indicated as “HSCD”. In Table 3 the headings are defined as follows: Instance, member of testbed; Algorithm, type of algorithm used to solve each test instance; cost (LB), the converged LB in each algorithm; # iteration, number of iterations that each algorithm requires to converge according to the stopping criterion previously defined; and CPU time, the convergence time of each algorithm (seconds). It should be noted that the results provided in Table 3 correspond tot*=2(9 scenario clusters) since the last 4 instances did not converge by the considering 3 clusters within 4 hours CPU time. Also, all algorithms are run until a converged LB is obtained. As it can be observed in this table, embedding the LRH algorithm in the SCD algorithm considerably improves the CPU time (average of 40 percent over all test instances) with a negligible degradation in the objective function value. Furthermore, embedding VFH heuristic in addition to LRH and the SCD algorithm (i.e. HSCD heuristic) improves the CPU time by 60 percent on average with a slight degradation in the objective function value.To conclude, the results provided in Tables 2 and 3 demonstrate the high quality of LB that can be obtained by the HSCD algorithm in a reasonable amount of time while CPLEX v12.5 is not able to find a high quality feasible solution within 15 hours CPU time for the smallest test instance. Furthermore, embedding the VFH into SCD algorithm in addition to solving scenario cluster sub-models by the aid of LRH significantly improves the convergence rate of SCD algorithm with a negligible degradation of the converged LB.In this study, we proposed a new algorithmic procedure to solve multi-stage stochastic mixed-integer programming models applicable to supply chain tactical planning problems. This algorithm is based on the idea of on scenario clustering in multi-stage stochastic programs. The Hybrid Scenario Cluster Decomposition scheme proposed in this article is an accelerated scenario cluster decomposition method that decomposes the MS-MIP model into smaller MS-MIP sub-models after breaking down the initial scenario tree into a set of smaller sub-trees. The scenario sub-models are formulated in a compact format and are coordinated by Lagrangian penalty terms in order to compensate the lack of non-anticipativity corresponding to the nodes of scenario sub-trees that are common in the initial scenario tree. The scenario tree decomposition framework described above is expected to converge faster than classical scenario decomposition methods, due to smaller number of relaxed non-anticipativity constraints in MS-MIP sub-models. In contrary, each sub-model is an MS-MIP model on its own that can be challenging to solve in realistic-size instances. Consequently, with the goal of accelerating the SCD algorithm, we proposed to solve scenario cluster sub-models by the aid of an ad-hoc heuristic (a Lagrangian based heuristic). Furthermore, we embedded a Variable Fixing Heuristic within the SCD algorithm in order to speed up its convergence rate. Another contribution of this article is the specialization of the above-mentioned algorithm to supply and procurement tactical planning in the lumber SC under demand and supply uncertainty. Our experimental results on a set of realistic-size cases revealed that the HSCD algorithm proposed in this article can find high quality solutions in a reasonable CPU time while CPLEX fails to find a high quality feasible solution within 15 hours CPU time for the smallest test instance. Furthermore, it was observed that embedding the above-mentioned accelerating heuristics into the SCD scheme has substantially reduced the CPU time with a negligible degradation of the solution. Two of the main advantages of the HSCD algorithm are: (i) amenability to parallelization; and (ii) possibility of embedding specialized algorithms for solving scenario cluster sub-models depending on their particular structure.Since many industries are faced with several types of perturbations in their business environment, adopting a stochastic optimization approach in their decision models seems to be inevitable for robust decision making. More specially, when the industry is dealing with sequential decisions over time such as supply chain tactical planning or dynamic supply chain design problems, multi-stage stochastic programming is one of the most promising methods in order to obtain robust decisions in the presence of future uncertainties. In contrast, such models are featured as intractable ones for real-size problem instances. While the ability to come up with robust plans in a relatively short amount of time is one of the main competitive advantages of an industry, the new HSCD algorithmic procedure proposed in this paper is an attempt to reduce the challenge of solving such problems. The high quality of the plans proposed by our algorithm while overcoming the computational complexity of multi-stage stochastic MIP models, demonstrated through our industrial case study, can motivate the lumber industry to move toward adopting more robust decision making tools rather than current deterministic ones.Future research would focus on the implementation of the HSCD algorithm on parallel machines in order to reduce the CPU time. Furthermore, this algorithm can be applied to other supply chain tactical planning problems that incorporate uncertain parameters with a dynamic behavior over time. Finally, other efficient heuristic algorithms can be embedded within the HSCD scheme in order to efficiently solve scenario cluster sub-models.

@&#CONCLUSIONS@&#
