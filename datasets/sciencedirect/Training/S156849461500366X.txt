@&#MAIN-TITLE@&#
Gene Suppressor: An added phase toward solving large scale optimization problems in genetic algorithm

@&#HIGHLIGHTS@&#
Gene Suppressor, proposed as a new add-on phase in GA for attaining self-adaption and repairing.This regulates genes dosage and its functional expression with respect to its environment.Identifies suppressor genes to perform suppression activity for attaining specific phenotype.Allows adjustment by gene adaption and repairing to obtain best solution and improving it.Experiment focused on proving single problem but, the buildup model can be easily adopted to other problem that uses MKP as a base.

@&#KEYPHRASES@&#
Bio-inspired process,Evolutionary computation,Gene Suppression,Genetic algorithm,Multiple Knapsack Problem,Optimization,

@&#ABSTRACT@&#
Genetic algorithm (GA) is a branch of evolutionary algorithm, has proved its effectiveness in solving constrain based complex real world problems in variety of dimensions. The individual phases of GA are the mimic of the basic biological processes and hence the self-adaptability of GA varied in accordance to the adjustable natural processes. In some instances, self-adaptability in GA fails in identifying adaptable genes to form a solution set after recombination, which leads converge toward infeasible solution, sometimes, this, infeasible solution could not be converted into feasible form by means of any of the repairing techniques. In this perspective, Gene Suppressor (GS), a bio-inspired process is being proposed as a new phase after recombination in the classical GA life cycle. This phase works on new individuals generated after recombination to attain self-adaptability by adapting best genes in the environment to regulate chromosomes expression for achieving desired phenotype expression. Repairing in this phase converts infeasible solution into feasible solution by suppressing conflicting gene from the environment. Further, the solution vector expression is improved by inducing best genes expression in the environment within the set of intended constrains. Multiobjective Multiple Knapsack Problems (MMKP), one of the popular NP hard combinatorial problems is being considered as the test-bed for proving the competence of the proposed new phase of GA. The standard MMKP benchmark instances obtained from OR-library [22] are used for the experiments reported in this paper. The outcomes of the proposed method is compared with the existing repairing techniques, where the analyses proved the proficiency of the proposed GS model in terms of better error and convergence rates for all instances.

@&#INTRODUCTION@&#
Genetic algorithm adopts the working principle of natural evolutionary process, which has proved its excellence in solving constrain based complex problems. GA found to tackle these constrain based complex problems, which are found to be an issue for other approaches like branch and bound, dynamic programming, brute force, etc., In GA, major role lies in choosing a suitable crossover and mutation for solving constrain based problems. Since, new individuals generated after recombination, have more possibilities of violating constrains in GA and these violations could be overruled, either by using penalty function or by repairing techniques.Penalty function ‘P’ used in global optimization problems, retains the solution vector within its feasible region. Here, ‘P’ is an external action over set of ‘Y’ constrains for problem Minimize→f(Z) where, Z∈Rn. Initially, these problems are converted into unconstrained problem {f(Z)+m}, where, ‘m’ is the degree of violation made by the solution vector. For {P(Y):m∈Rn}, ‘P(Y)’ increases with increase in ‘m’ and here, ‘n’ is the number of variables in the problem. This penalty function increases the performance by retaining the search space to remain within its boundary ‘Sp→{Z∈Rn:LB≤zi≤UB}’ where, LB and UB are the lower bound and upper bound of search space. This approach found to be efficient in converting infeasible solution into feasible solution but, does not work efficiently for converging toward optimal solution [1–3].Repairing technique is another approach for handling ‘Y’ constrains for ‘zi’ solution vector where, i=1, 2, 3, …, N uses repairing technique if constrains have been violated. The repairing approach adjusts the points of the solution vector to acquire feasible region LB≤zi≤UB from non-feasible region zi>UB. The approach works on trial and error method either by point assessment or by replacing the original solution. Various repairing approaches are available like Profit-Repair, Greedy Repair, Correction Repair Operator (CRO), RO2, etc., which have been used in GA. These approaches are found to be hard in treating infeasible solution but, repairing approach considered to be the best when compared to penalty function [4–6].Profit repair approach uses ‘profit’ as utility ratio for arranging the objects on descending order for constrain violated solution vector by which the solution vector are made feasible by eliminating the object with lowest ratio and holds the objects till the constrain gets satisfied. This approach converts infeasible solution into feasible solution but, fails in attaining optimal solution and this issue is due to prioritizing ‘profit’ by omitting the dependency factor ‘volume’. Greedy repair approach works on constrain violated solution vector which uses ‘profit/weight’ utility ratio for repairing. In this approach, by using utility ratio, objects are deleted in decreasing order till constrain violations are overruled. Further, this converts infeasible solution into feasible solution but, it is not sure to converge toward optimal solution for all cases [7–12]. Correction Repair Operator (CRO) is similar to ‘Greedy Repair’ which converts infeasible solution into feasible solution by ‘Drop’ phase and improves the solution by ‘Add’ phase by means of ‘profit/weight’ utility ratio. This approach fails for knapsack problems containing object with small volume, which is similar to greedy approach and could not converge toward optimal solution for all cases [13,14]. Self-adaptive check and repair operator (SACRO) is similar to CRO approach which has been proposed to overcome the drawback of CRO. SACRO works on constrain violated solution vector by using ‘profit density’ and ‘profit/weight’ utility ratio for eliminating objects with lowest ratio till infeasible solution is converted into feasible solution. This approach has been developed specifically for evolutionary algorithms for converting infeasible solution into feasible solution [14]. This approximation method fails in converging toward optimal solution at most of the times but, the performance is higher than CRO. Repair operator (RO2) developed specifically for Multiple Knapsack Problems (MKP), works on constrain violated solution by using ‘profit/weight’ utility ratio for constructing F matrix to arrange genes in descending order. Objects with lowest utility ratio are eliminated from the solution vector till feasibility is attained in converting infeasible solution into feasible solution. This approach is well suited for multi-dimensional MKP problems but, fails to hold its performance for uni-dimensional MKP problem [15]. Finally, based on literature review on existing repairing approaches, it has been found that these repairing operators developed, specifically suits for solving knapsack problem for making infeasible solution into feasible solution, that are attained after recombination in GA [1,3,16,17]. In order to overcome the drawback faced in repairing techniques in GA and to improve the quality of the solution for converging toward best solution, Gene Suppressor (GS) has been proposed in this paper.Generally, genetic algorithm uses evolutionary approach for effective solving of combinatorial problems to attain optimization with selective subset of elements. These types of problems are highly constrained based, that are complex, holding large search space. Normally, solving combinatorial problems with multiple objectives relies to be a challenge in attaining optimization [18,19] and these problems are applicable for many real world problems like nurse scheduling, project scheduling, timetabling, etc. [20,21]. Using MKP with single objective could not be applicable for most of the real world problems, thus, Multiobjective MKP has been chosen in this paper for experimental analysis. From the proposed GS experimental results and its analysis, it reveals that feasibility has been observed by converging toward optimal solution, when compared with other repairing approaches in GA.Gene Suppressor's mechanism performs three activities: (i) acts on mutated genes that are functionally over-expressed by suppressing its functional expression substantiality by adjusting genes expression to its environmental requirement. (ii) To identify and suppress inappropriate genes expression involving in the biological process. (iii) Finally, to recognize highly required gene that plays vital role in the environment and to regulate its expression for attaining best phenotype expression. The mechanism depends on the functional activity of the genes that act as Gene Suppressor for performing suppression activity. This mechanism found to be superior in separating genes that causes negative impacts in the environment and to obtain highly favored phenotype expression to certain extent.Thus, Gene Suppressor (GS) has been adopted as a computational phase by converting biological process to computational model. This plays the role of repairing by performing suppression activity on conflicting and consistent genes in an individual, based on its functional expressibility and its adaptability in the environment, by invoking Gene Suppressor. Appropriate genes are induced to meet environmental requirement to attain desired improvement in phenotype expression. Performance of GS was analyzed based on its known optimal value taken from OR-library [22].The remaining section of the paper is organized as follows: in Section 2, a brief discussion has been made about biological fundamentals of gene suppression and Gene Suppressor. Depiction from biological process to computation model has been represented in Section 3. The proposed Gene Suppressor phase (GS) in GA has been projected as an outline in Section 4. Experimental outcome with analysis has been discussed in Section 5 for the proposed method and finally, Section 6 represents the conclusion of this paper.Gene dosage acts as a resource to regulate gene functional expression, by means of gain of expression or loss of expression in the environment. This expression relates to gene intensification in background for biological processing. Naturally genes undergo various mutation processes which reflect as overexpression in phenotype expression. Suppression, a mechanism involved in earlier spans involves in regulating gene expression by means of loading gene dosage and also used to prove perfect correlation between genes by defining appropriate outcomes even in lack of gene information [23]. Examining any biological process through classical genetic approaches requires genes that undergo countless mutation process for identifying biological process activity. Using mutation as an approach for identifying biological process activities, found to be sensitive in maintaining accuracy. Whereas, using suppression activity as an approach on conflicting genes might provide a way toward retaining original phenotype expression. Apart from this, recurrently performing the suppression activity on genes in a chromosome used to establish deceive conversion in the biological process effectively.Suppression is an excellent strategy for identifying modifier genes that are involved for change in biological process based on resultant phenotype expression which are attained from previous researches. This is also an effective mechanism for converting defective functional genes to non-functional genes through gene suppression in order to avoid misleading transformation of biological process. Inhibition of defective gene is the simplest form of suppression and it can also be related as second mutation to revert or to retain the original state of genes. Suppressor acts as an effective tool for carrying translation accuracy or a phenomenon for change recognition in the chromosomal environment apart from identifying suppression regulators [24,25].A “Lock-and-key” mechanism is generally used for suppression experiments to act on genes and to perform suppression activity for attaining observable changes in phenotype expression. External factors like environment, other related gene in the same chromosome, proteins, etc., act as suppressor for prohibiting abnormalities in gene functionalities for carrying out suppression mechanisms. Suppression can be acquired naturally or through artificial means, which can be tested based on scenarios by which changes could be recognized in the environment either by gain or loss in gene functionality. While suppression mechanism is carried out, over genes are essential in identifying defective genes for prohibiting its expression and attaining desired phenotype expression to certain extent [26–31].Pointing on biological aspect of gene suppression and Gene Suppressor as a computational model, Gene Suppressor (GS) has been developed. This model accumulates as an added phase after recombination to enhance the classical genetic algorithm structure.Naturally considering biological aspect, genome sequence contains genes as a set and each chromosome in the genome contains subset of genes. To emulate this biological aspect, the model considered genome ‘G’ containing set of ‘n’ genes ‘G={g1, g2, g3, …, gn}’ and each gene comprises set of alleles ‘gi={a1, a2, …, az}’. Subsets of genes are contained in ‘N’ chromosome as C={C1, C2, …, CN} of subset size ‘l’ that varies from ‘5’ to ‘n’. This has been further defined as,(1)G→def{g1Cj,g2Cj,g3Cj,…,gnCj}li∈{1,2,…,n}j∈{1,2,…,N}l∈{5,6,…,n}where, ‘G’ contains ‘n’ genes and subsets of these genes of length ‘l’ belongs to chromosome ‘Cj’. For this model a standard has been followed for specifying gene by indicating it as positive ‘gi’ where, i=1, 2, …, n and each gene in a chromosome ‘Cj’ is represented as ‘0’ if gene does not survive or as ‘gi’ if gene survive in the environment.Functional expressibility of a gene varies due to influence of other adapted gene's expression in the chromosome with respect to their environment. This change in gene expressibility in-turn reflects on the phenotype expression of the chromosome. Based on this natural concept, functional expressibility ‘Gf’ of gene ‘gi’ in environment ‘ev’ is based on genes functional variables. Each gene in a chromosome contains functional variable{vfdr,vfdt}on which gene expression relies. Based on these aspect, by considering these associated functional variable, gene functional expressibility ‘Gf(gi)’ is calculated as:(2)Gf(gi)=gi∑av=1lvfdtvfdrav∈{1,2,…,l}where ‘vfdrand vfdt’ are functional variables that are associated with each other and it could be observed that change of ‘Δvfdt’ changes ‘Δvfdr’ Here, ‘av=0′ either when ‘vfdt, vfdr’ found to be ‘0’ or when ‘vfdt’ is ‘0’. In reality, other highly expressed genes in the environment, act as a factor for influencing genes expressibility. Taking this aspect into consideration, genes with high functional expressibility ratio ‘Gfmax’ are identified from chromosome ‘Cj’. Here, ‘Gmax’ is the highest expressibility ratio attained so for from generations. Based on ‘Gfmax’, and gene's functional expressibility ratio, proportion at which each gene are influenced by its environmental factors ‘VE(gi)’ are evaluated by using the below equation.(3)Gfmax(Cj)=max{Gf(gi)}(4)Gmax=maxt=1,2,…,Gt︷maxGfmax(cj)(5)VE(gi)=Gf(gi)Gmaxwhere, ‘Gmax’ denotes gene's highest functional expressibility ratio representing maximum of ‘Gfmax’ ratio of individuals identified for generation, which act as a tool to identify ‘Gene Suppressor’ that influences other genes in an individual with respect to their environment ‘ev’. ‘VE(gi)’ is the rate at which gene ‘gi’ in ‘Cj’ are influenced by environmental factor. In reality, expressibility of a gene varies when gene's expression projected with environmental factors. Based on this aspect, variation in gene expressibility ‘VE(gi)’, relies on ‘Gf(gi)’ and ‘VE(gi)’ in the chromosome ‘Cj’. ‘VG(gi)’ is calculated as:(6)VG(gi)=Gf(gi)×VE(gi)Biologically, survival of a gene in an environment depends on its adaptability in the environment. Based on this reality, adaptability of a gene ‘VGE(gi)’ is calculated by using influence of environmental factor and its variation in expressibility as:(7)VGE(gi)=VG(gi)+VE(gi)where, ‘VE(gi)’ is the rate at which ‘gi’ influenced by its environmental factor and ‘VG(gi)’ is the variation in gene expressibility when projected with the environmental factors. Phenotype expression depends on the expression of genes that survives in its environment and other circumstances with its influencing factors. Thus, phenotype expression represented in Eq. (8) has been defined as in population genetics [32],(8)Phenotype(P)→Genotype+EnvironmentBased on Eq. (8), phenotype expression ‘P’ of the chromosome ‘Cj’ absolutely involves in the overall expression of the survival genes in ‘Cj’ pertaining to the environment it acts. This has been computationally defined as,(9)P(Cj)=def∑i=1nGexp(gi)×ki,k∈{0,1}subject to(10)P(Cj)≤ev(exp)where, ‘Gexp’ is the expression of gene ‘gi’ based on{vfdr,vfdt}and ‘k’ represents ‘0’ for gene that does not survive in the individual and ‘1’ for gene that survives in the individual. Phenotype expression of chromosome ‘P(Cj)’ should always be within environmental constrain ‘ev(exp)’ in which the gene reacts. In population genetics, gene's expression ‘Gexp(gi)’ changes ‘ΔGexp(gi)’ due to influence of environment and its reactivity ‘VGE’ in the environment. This usually changes the expression of the chromosome ‘C’ as ‘ΔC’, which reflects in the expression of phenotype ‘P’ [32]. Based on this aspect change in phenotype expression ‘ΔP’ from ‘P’ [32] has been defined as:(11)ΔP=ΔC←ΔGexp(gi)←ΔVGE(gi)Functional expression is based on individual's gene expression that has its negative impact in the chromosome. In reality, over-expressed or conflicting genes are identified from the environment, to undergo suppression either by completely suppressing its expression or by suppressing its expression to the required level. This makes the genes as adaptable genes and to make it survive in the environment by neglecting its negative impacts. Based on this biological aspect, conflicting genes in the generated new individuals are forced to undergo suppressor mechanism ‘suppress’ in generation ‘Gt’. This makes change in gene state of expressibility ‘fs’ and make it survive for next generation ‘Gt+1′ that applies changes in phenotype expression ‘P’ as ‘ΔP’ which has be expressed as:(12)O(Gt)→Suppress:fs(gi)ΔO(Gt+1)→ΔPwhere, ‘fs(gi)’ represents, the state of change of suppressed gene giin offspring ‘O’. If ‘fs(gi)∈1′ for gene in full expression state and ‘fs(gi)∈−1′ for gene expression in suppressed state either fully or partially.Fig. 1provides a visual model of genome which has been converted to computational model from biological aspect. In reality, genome which contains set of ‘N’ chromosomes ‘{C1, C2, …, CN}’, each comprises of ‘n’ genes ‘{g1, g2, …, gn}’as subset. In each chromosome and each gene, in reality holds ‘k’ alleles ‘{a1, a2, …, az}’. Suppression, is a mechanism performed during transcription process in reality changes gene ‘Δgi’ expression with change in its function variable expressiongi:{Δvfdt,Δvfdr}that are reflected in overexpression of the gene. This influences of gene expression, makes changes in the chromosome ‘ΔC’ and in its resultant phenotype expression ‘ΔP’.Table 1symbolizes personalities of gene suppression used in analyzing biological aspect and converting it to the proposed computational model as Gene Suppressor (GS) and the table denotes the relatedness attained in computational model development. Five personalities are considered in this paper for modeling Gene Suppressor phase. (i) ‘Process’ trait denotes the main activity of gene suppression process in biological aspect and its activity in computational model. (ii) ‘Mechanism’ used for identifying abnormal gene expression in the environment to perform suppression activity in biological aspect and the mechanism used in computational model to identify conflicting gene expression in the environment and regulating its expression. (iii) ‘Process Phase’ denotes the stage at which suppression activity takes place on biological aspect and on computational model. (iv) ‘Gene State’ represents genes functional expression level and genes state after undergoing suppression in biological aspect and the same activity has been represented in computational model. (v) Finally, ‘Gene Suppressor’ represents environmental factors that influence gene functional expression in biological process and similarly factors that act as suppressor in the computational model.In this section, the projected Gene Suppressor phase has been outlined as in genetic algorithm for solving Multiobjective Multiple Knapsack Problems. Effects of proposed GS in GA are based on three aspects: (i) Adoption, (ii) Adaptiveness and (iii) Scope. Based on the first aspect ‘Adoption’, individuality has been maintained in fitting Gene Suppressor, a biological mechanism as a phase after recombination in GA. The second aspect ‘Adaptiveness’, performs suppression on genes functional expression in the environment to regulate functional expressivity of the chromosome within environmental constrains. Based on the final aspect, ‘Scope’, relies toward inducing function expression of the solution vector in the environment to attain best expression.Initialization phase is the first step that follows classical GA approach, in which ‘Cj’ represents individual as the solution vector with ‘n’ dimension with solution points that are randomly generated, where, j={1, 2, …, N} is the population generated as solution vectors for Multiobjective MKP. Each point in the solution vector ‘Cj’ denotes gene ‘gi’ where, i={1, 2, …, n} and these point are coded with real values ‘>0’ if gene exists in the individual, otherwise ‘0’.Fitness evaluation is, maximization or minimization of the objective function ‘f(X)’ that relies on individuals expression in the environment ‘ev’. Gene's expression in the individuals is considered for fitness evaluation that uses reserved expression of gene after suppression. Fitness evaluation is calculated using Eq. (9) and below is its semantic represented,(13)f(X):P(Cj(vfdr,vfdt))←∑i=1nGexp(gi(vfdr,vfdt))×kik∈{0,1}where, ‘k’ is ‘1’ if gene ‘i’ survives in an individual else ‘k’ is ‘0’. Desired change in P(Cj) representing ‘f(X)’ that retained within ‘ev(exp)’, indicates the convergence toward the optimal solution.In this phase of GA, initially parents ‘P1’ and ‘P2’ are randomly selected from population for performing recombination operation to generate new individuals as offsprings. Parent ‘P1’ is substituted by best individuals identified from generations {P1:bestGt=Cj,Gt|Cj,Gt−1, j∈1, 2, …, N}. While, ‘P2’ has been randomly selected without any correlation with ‘P1’ or other previously generated offsprings. Here, the selection phase follows steady-state selection technique for retaining best solution vector of previous generation for successive population generation.Recombination phase in GA is identified to be one of the main source for improving the efficiency of genetic algorithm. This performs, operation over vector of parents ‘P1’ and ‘P2’ by opting selective points and merging it to generate new individuals as offsprings from both parents. Problem dependent optimal procedure is chosen in generating offsprings and to provide a ways to converge toward optimal solution. For the purpose of magnifying the performance of the proposed GS, single-point crossover has been used for recombination.Single point crossover randomly chooses a point ‘pt’ in-between ‘1’ and ‘n−1′ from ‘C’ vector of n-dimension, in order to perform recombination operation to generate new individuals ‘o1’ and ‘o2’. Vector portion {1, 2, …, pt} of ‘P1’ are copied to ‘o1’, similarly ‘P2’ vector portion {1, 2, …, pt} are copied to ‘o2’. while, the succeeding portions {pt+1, …, n} of ‘P1’ are copied to ‘o2’ and the same succeeding portions of ‘P2’ are copied to ‘o1’. Probability of recombination considered to be 85% for this operation.Gene Suppressor (GS) is a mechanism, merged as an added phase after recombination in GA, which not only enhances the structure of GA but also its performance. In this phase, gene functional expressibility ‘Gf(gi)’ is identified based on its expression in ‘Cj’. Each gene ‘gi’ in an individual ‘Cj’ consists of functional variables ‘vfdr’ and ‘vfdt’ with values ‘≥0’ for gene that exists in the individual. Functional variable ‘vfdr’ depends on ‘vfdt’ and the changes in the functional variables expression of a gene in ‘Cj’ depends on the environment constrains ‘ev(exp)’ in which the gene acts.Genes holding highest functional expressibility ‘Gfmax(gi)∈Maximum{Gf(gi), Cj}’, are identified from ‘Cj’ of current individual for identifying the highest genes expressibility ‘Gmax’ so far identified from generations. Genes holding ‘Gfmax(gi)’ rate, in current individual are preserved in Gene Suppressor subset ‘S’ for further usage in the next generated new individuals for improving the solution vector. For each generation, subset ‘S’ is reformed as Gene Suppressor if any change in ‘Gmax’ are identified, by omitting all the pervious genes in the Gene Suppressor set. Variation in gene's expressibility ‘VG(gi)’ and its influence by environmental factors ‘VE(gi)’ are used to identify, gene's adaptability ‘VGE(gi)’ in an environment. Based on this adaptability, hierarchical order of genes in the current individual is conserved in fitting best genes into the environment. This activity stabilizes the phenotype expression ‘P’, in linkage with other related genes in ‘Cj’ for converging toward the optimal solution. Algorithm 1 is the pseudo code for identifying suppressor genes and genes adaptability in the environment. This initially inserts genes from the Gene Suppressor vector S[r] into newly generated individual ‘Cj’, if gene ‘gr’ does not survive in ‘Cj’. Further, each gene's functional states ‘fs(gi)’ in the individual are evaluated for identifying the expressibility rate ‘Gf’ for assessing the rate at which genes in ‘Cj’ are influenced by environmental factors ‘VE’ using gene's highest expressibility rate ‘Gmax’ attained for generations. In each generation, genes in the individuals holding high expressibility rate ‘Gfmax’ are considered as ‘suppressor gene’ of current generation which are preserved Gene Suppressor vector S[r] for usage in next new individuals. This acts as a base toward attaining the desired phenotype expression by enhancing the structure of the individuals.Algorithm 1: Gene Suppressor identificationRequires: Cj,Gtj=1, 2, …N, r=0, S[r]=empty and other values for parametersIfrgreater than 0 thenGene Suppressor subset S[r]≠emptyInsert gene grfrom S[1, 2, …R] into Cj,Gtwith full expression if gene grdoes not survive in Cj.End IfSet gene functional state for gene's that survive in Cj:IfCj(gi) is fully expressed thenfs(gi)←1Elsefs(gi)←−1End IfFori=1 to ndoCompute Gf(gi) with complete functional variable expression:Gf(gi)←∑av=1lgi(vfdtav/vfdrav)Gexp(gi)←gi∑av=1lgi(vfdtav,vfdrav)Identify high expressibility rate of Gfin Cj,Gtand set it as Gfmax.End ForIdentify Gmax Maximum gene's functional expressibility attained from previous generations by:Evaluate Cj,Gt(Gfmax)>Gmax then Gmax←Cj,Gt(Gfmax)Fori=1 to ndoCompute gene's influence by environmental factors VE(gi) as:VE(gi)←Gf(gi)/GmaxCompute variation in gene expressibility VG(gi) as:VG(gi)←Gf(gi)×VE(gi)Compute expected functional expressibility of a gene VGE(gi) as:VGE(gi)←VG(gi)+VE(gi)End ForSort gibased on descending order of VGE(gi)Group best subset of genes to act as suppressor genes:If new Individual AND Gmax change thenReset subset S[r]=empty and make r=0.Insert every giof vector Cjholding Gmax to S[r+1].ElseInsert every giof vector Cjholding Gfmaxto S[r+1] if gene gidoes not subsists in S[1, 2, …, R].End IfPerform SuppR process on giof vector CjGenes in an individual that are highly adaptable act as suppressor toward suppressing, conflicting or over-expressed gene, when explored in the environment ‘ev’and the functional state ‘fs(gi)’ of the suppressed genes are changed from ‘1’ to ‘−1’. In an individual, lesser adaptable genes are considered as conflicting gene when its reactivity in the environment overrules environmental constrains ‘ev(exp)’. Suppressed genes with high adaptability are regulated to its normal expression and the functional state of the genes ‘fs(gi)’ are changed from ‘−1’ to ‘1’. This activity is preformed to improve the quality of phenotype expression. Algorithm 2 is the pseudo code for fitting in best genes in the environment by suppression and inducing process. The algorithm initially checks for phenotype expression ‘P(Cj)’ is over-expressed from environmental expression ‘ev(exp)’ for undergoing suppression process. This suppression activity on genes, regulate functional expression rather than prohibiting them from their involvement in recombination and mutation process. Here, gene's that are holding lowest ‘VGE’ in the individual undergo suppression process till environment constrain ‘ev(exp)’ has been retained. Genes holding high ‘VGE’ are regulated from suppression state till ‘ev(exp)’ constrain has been met. The change in gene functional state ‘fs(gi)’ and its expression relays on regulation of gene expression level ‘δ’ to meet ‘ev(exp)’. Phenotype expression ‘P(Cj)’ found under-expressed from environmental expression ‘ev(exp)’ undergoes gene induction process. Here, gene's having high ‘VGE’ are regulated from it level of expression ‘δ’ till ‘ev(exp)’ are met to certain extent. The gene's functional state ‘fs(gi)’ changes depending on the regulation carried out on the gene in ‘Cj’. Thus, this process repairs the individual by converting infeasible solution into feasible solution and further the mechanism is to improve the phenotype expression as it objective function as f(X).Algorithm 2: SuppR ProcessRequires: ev, VGE(gi), Gexp and other related parameter valuesEvaluate phenotype expression of Cj:P(Cj)←∑i=1nGexp(gi)×kiIfP(Cj)>ev(exp)thenPerform Suppression on (Cj): Suppress conflicting gene functional from the environment evFor i=1 to nIfGexp(gj)≤0 then: for gene exist in chromosome having conflicting expressionEliminate gifrom Cj: gi←0 and ki←0End IfEnd ForEvaluate phenotype expression of Cj:P(Cj)←∑i=1nGexp(gi)×kiPerform suppressor activity on genes in individuals if P(Cj) over-expressed from ev(exp):Sort gibased on ascending order of VGE(gi)Fori=1 to ndo for genes in chromosomal pool CjDeviation of P(Cj) from targeted environment ev(exp):afr←P(Cj)−ev(exp)Identify for gene fs(gi) state is 1 or −1:Ifafr≥Gexp(gi) AND Gexp(gi)>0 thenSuppress gene functional expressionGexp(gi)←SuppressGexp(gi)on ev: fs(gi)←−1Evaluate phenotype expression of Cj:P(Cj)←∑i=1nGexps(gi)×kiDeviation of P(Cj) from targeted environment ev:afr←P(Cj)−ev(exp)Else Ifafr<Gexp(gi) AND afr>0 thenSuppress gene functional expressionGexp(gi)←SuppressGexp(gi)on ev: fs(gi)←−1δ←Gexp(gi)−afrGexp(gi)←δgi←gi×−1Evaluate phenotype expression:P(x)←∑i=1nGexp(gi)×kiDeviation of P(Cj) from targeted environment ev:afr←P(Cj)−ev(exp)End IfIf afr=0: terminate suppression on attaining ev(exp)End ForEnd IfIfP(Cj)<ev(exp)thenPerform induction on P(Cj) to revert suppression: Induce suppressed gene expression in the environment evSort gibased on descending order of VGE(gi)Fori=1 to ndo: in chromosomal pool CjIdentify for gene fs(gi) state is −1:Deviation of P(Cj) from targeted environment ev:afr←ev(exp)−P(Cj)Ifafr>0 thenCompletely induce suppressed genes expression Gexp(gi) to original level for the targetedenvironment ev(exp): Gexp(gi)←SettoPrecedingexpressionfs(gi)←1Ifafr≥Gexp(gi) AND Gexp(gi)>0 thenEvaluate phenotype expression of Cj:P(Cj)←∑i=1nGexp(gi)×kiElse Ifafr<Gexp(gi) AND afr>0 thenPartially suppress incompatible gene functional expression Gexp(gi) from the targeted environment ev(exp): fs(gi)←−1δ←Gexp(gi)−afrGexp(gi)←δgi←gi×−1Evaluate phenotype expression of Cj:P(Cj)←∑i=1nGexp(gi)×kiEnd IfEnd IfEnd ForEnd IfMutation is an optional phase in GA, which works on individuals with a minimal rate for increasing the Convergence Rate toward attaining the optimal solution. This phase has been omitted here to evaluate the performance in terms of convergence and diversity of the proposed phase. Here, ‘Gtmax’ considered to be the maximum generation to be carried out. Let ‘Zmax’ be the best value attained by the approach and ‘Kopt’ is the known optimal value for the instance that exists in OR-Library. Here, termination is based on the following constrains Gt≥Gtmax or Gtcount>5. The execution of the algorithm continues till the termination condition gets satisfied.Algorithm 3 represents the proposed GS phase in classical GA and the pseudo code for Multiobjective Multiple Knapsack Problem. Initially, populations are generated randomly, which contains combination of objects as solution vector of individuals. These individuals are chosen without any constrain violation to act as parents for generating new individuals as offsprings after recombination over which, GS mechanism are performed. GS process, initially checks for existence of suppressor object in ‘S[r]’ to be inserted into the new individual ‘Cj’ if the object in ‘S[r]’ does not exist in ‘Cj’. In order to enrich the superiority of the solution, object's with highest expressibility ‘Gfmax’ of each individual of current generation are preserved as ‘Gene Suppressor’, that are inserted into next generated new individuals. This activity enhances the individuals expressibility and further, the object's highest functional expressibility ratio ‘Gmax’ that are identified for generations from ‘Gfmax’. This is used for evaluating the rate at which objects are influenced by its environmental factors ‘VE(gi)’ and the objects expected functional expressibility in the environment ‘VGE(gi)’. Objects in ‘Cj’ are sorted based on ‘VGE(gi)’ and the further process is to identifying the suitable objects that fit into the best knapsack ‘evKx’ on hierarchical order without over-ruling knapsack capacity ‘evkx(exp)’. Object with higher ‘VGE’ that is best suited for ‘evKx’ are reserved in its vector ‘xkx’. Further, for improving the quality of the solution, objects with higher ‘VGE’ in suppression state are fully induced, to its nominal expression with changes in ‘fs(gi)’ from ‘−1’ to ‘1’ and the objects are preserved in ‘xkx’. Objects that conflicts in fitting the knapsack are fully suppressed by means of expressivity in the individual ‘Cj’ and these objects are eliminated from preserving. Apart from this, the functional state ‘fs(gi)’ of the object is set to ‘−1’ in ‘Cj’. This mechanism performed to convert infeasible solution into feasible solution and to improve the expression of the solution vector by inducing highly adaptable object's expression from suppression state. For this problem the following objectives are considered to be satisfied: (1) maximizing profit by accumulating objects in the knapsack, (2) adding distinctive objects in the knapsack with full object weight and (3) Finally, reducing the gap between knapsacks capacity. Here, suppression activation directly depends on objects expression as fitness function, in fitting the knapsack and improving the solution to converge toward the optimal solution.Algorithm 3: GS for Multiobjective MKPRequires: maxt,kopt,evKx,kx=1,2…,m, r=0 and other required parameter valuesSet Gt≔1. Initialize population Cj,Gt, j=1, 2, …, N.RepeatChoose random Individuals from population as P1[1, …, n] and P2[1, …, n]Generate new individuals o1[1, …, n] and o2[1, …, n] as offsprings by recombination.Cjrelates to either one of the new individuals for further process:If r greater than 0 thenGene Suppressor subsetSr≠emptyInsert each object grfrom S[1, 2, …, R] into Cj,Gtwith full expression if object does not survive in Cj.End IfFori=1 to ndoEliminate object giholding normal weightgi(vfdr)≤0or normal profitgi(vfdt)≤0from vector of solution.End ForFori=1 to ndoSet objects functional state in Cj:IfCj(gi) is fully expressed thenfs(gi)←1Else IfCj(gi) is fully suppressed thenfs(gi)←−1End IfEvaluate object's expressibility Gf(gi):Gf(gi)←gi(vfdt/vfdr)Gfmax←maximum(Gf(gi))End ForIdentify Gmax: Maximum object's functional expressibility attained from previous generations by:Evaluate Cj,Gt(Gfmax)>Gmax then Gmax←Cj,Gt(Gfmax)Evaluate object for Gene Suppressor Subset:If new Individual AND Gmax change thenReset subset S[r]=empty and make r=0.Insert every giof vector Cjholding Gmax to S[r+1].ElseInsert every giof vector Cjholding Gfmax to S[r+1] if gene gidoes not subsists in S[1, 2, …, R].End IfEvaluate objects Expected Functional expressibility which is an adaptability ratio:Fori=1 to ndoCompute object's influence by environmental factors VE(gi) as: VE(gi)←Gf(gi)/GmaxCompute variation in object expressibility VG(gi) as: VG(gi)←Gf(gi)×VE(gi)Compute expected functional expressibility of an object VGE(gi) as: VGE(gi)←VG(gi)+VE(gi)End ForEvaluate individual phenotype expression of Cjis vfdtand vfdrrelating to environmental expressabilityevkx(exp):Sort descending order: giin Cjbased on VGEfor fitting objects for Cjby consideringgi(vfdr)toevkx:Fori=1 to ndoForkx=1 to mdoFitting object giin suitable knapsackevKxwith reduced in gap withinevKx:IfGexp(gi(vfdr))+P(xkx(vfdr))≤evkx(exp)thenIffs(gi)←−1 thenInduce object expression to normal expression and set fs(gi)←1End IfAdding object gito uniquely to vector xkxthat fits to maintain proximity and to vector xkxEvaluateP∑xkxby adding ΔGexp(gi) by consideringgi(vfdt,vfdr)toP∑xkx.End IfEnd ForIf object giexpression vfdrconflicts in fitting none of the knapsackevKxthenSuppress object expression by transforming gito −giin CjMake Functional state of object fs(gi)←−1Evaluate P(Cj):P(Cj(vfdr,vfdt))←∑i=1nGexp(gi(vfdr,vfdt))×kiEnd IfEnd ForIfP(Cj(vfdt))>Zmaxthen make currentΔP(Cj(vfdt))as Zmax otherwise increment Gtcountby 1.Terminate if Gtcountfound >5.UntilGt≤GtmaxBenchmark instances for MKP from OR-library of Beasley [21] are taken for practical performance examination of GS phase in genetic algorithm. Tests have been carried on Medium data instances of ‘1000’ and ‘2500’ objects and large data instances of ‘5000’, ‘7500’, ‘10,000’ and ‘20,000’ objects with ‘2’ and ‘5’ knapsacks. Some MKP instances, presented here for medium dataset experiment, are ‘A02-1’, ‘A02-2’, ‘A02-3’, ‘A02-4’, ‘A02C-1’, ‘A02C-2’, ‘A05C-1’, ‘B02-1’, ‘B05-1’ and ‘B05C-2’. Some MKP instances presented here for large dataset experiment are ‘C02C-1’, ‘C05-2’, ‘C05C-1’, ‘C05C-2’, ‘C05C-3’, ‘D02-1’, ‘D05-1’, ‘E05-1’, ‘F02-1’ and ‘F05-1’. To assess the quality of the proposed phase in GA, comparison has been made with classical GA using the following approaches such as Greedy repair, RO2 repair and SACRO.Five performance measures have been used for assessing GS with other approaches based on experimental results. Performance measures considered for analysis has been summarized as follows [33,34].(i)Best Convergence RateBest Convergence Rate (CR) in the experiment, measures the quality attained by the instance in terms of percentage for reaching the best value w.r.t. the known optimal value. This measure has been calculated as(14)BestConvergenceRate%=1−optimal−bestbest×100where, ‘optimal’ is the known optimal value for the taken instance and ‘Best’ is highest fitness value obtained for the instance by an approach.Error RateError Rate (ER) in the experiment, measures the missing quality level of the instance in terms of percentage, for calculating the difference attained by the best value w.r.t. the known optimal value. This has been calculated as(15)ErrorRate=optimal−bestbest×100where, ‘optimal’ is the known optimal value for the taken instance and ‘Best’ is highest fitness value obtained for the instance by an approach.AccuracyAccuracy measure in the experiment, measures the quality level attained by the instance in terms of percentage, for calculating the best fitness value obtained w.r.t. the known optimal value. This has been calculated as(16)Accuracy%=BestOptimal×100where, ‘optimal’ is the known optimal value for the taken instance and ‘Best’ is highest fitness value obtained for the instance by an approach.GapGap percentage is a mandatory performance measure for evaluating the space that relies in attaining the best fitness value w.r.t. the known optimal value. This could be defined as,(17)Gap%=Optimal−BestOptimal×100where, ‘optimal’ is the known optimal fitness value and ‘Best’ is the highest fitness value obtained by the approach for the taken instance.Error CorrectionError Correction Rate (EC) is a measure to evaluate the rate at which, correction has been made to convert infeasible solution into feasible solution. Here, ‘ECR’ is the rate of repair carried out over objects, to obtain best fitness value. This could be expressed as,(18)ErrorCorrectionRate(EC)=SIIwhere, ‘SI’ is the number of objects corrected in the individual to obtain best fitness value for the instance. ‘I’ is the total number of objects enclosed in the individual.This section analyzes about the results attained by the experiment for each approach and it has been compared with GS in the form of tables and graphs. It has been discussed w.r.t. the five performance measures which have been summarized as follows based on the results identified.Experimental results represented for GS in Tables 2–4shows its performance in GA with other repairing techniques. Test instances for medium and large datasets with m={2, 5} knapsacks have been considered for experiment analysis. ‘Zmax’ in Tables 2–4 represent best value attained by each approach for the taken instances and the highlighted ‘Zmax’ values in the tables represent the best value attained is superior to the known optimal value ‘Kopt’. List of observations are given below are for both medium and large datasets.Observation 1 – accuracy: For all the taken instances from Table 2, it reveals that ‘81%’ of minimum accuracy has been achieved and a maximum of ‘140.84%’ has been achieved which has been highlighted in the Table. This exemplifies that there is an increase in accuracy rate which in-turn increases the proportional rate in achieving the optimal value. Test instances ‘A05C-1’, ‘B05C-2’, ‘B05-1’, ‘F05-1’, ‘E05-1’, ‘D05-1’, ‘C05C-1’, ‘C05C-2’ and ‘C05C-3’ obtains the best value compared to the known optimal value.Observation 2 – Error Rate: This measure ‘ER’ found to attain maximum of ‘23.31%’ for GS which has shown in Table 3 for the considered set of instances without any limitation in size of the objects. Error Rate depends on the difference between the best value obtained w.r.t. the known optimal value. Test instances ‘A05C-1’, ‘B05C-2’, ‘B05-2’, ‘F05-1’, ‘E05-1’, ‘D05-1’, ‘C05C-1’, ‘C05C-2’ and ‘C05C-3’ were found to be negative, since the results obtained for these instances were considered to be the best value compared to the known optimal value.Observation 3 – Convergence Rate: ‘CR’ obtained for the considered set of instances found to increase with increase in the best value. In Table 3 ‘CR’ highlighted shows a maximum Convergence Rate of ‘129%’ attained by the test instances with best value w.r.t. the known optimal value. ‘A02-1’ found to attain a minimum Convergence Rate of ‘76.69%’ when compared to the other instances.Observation 4 – GAP: Table 3 shows that the test instance ‘E05-1’ found to be higher with ‘40.84%’ of GAP. For ‘E05-1’ instance distance from the known optimal value found to be high since, this instance found to attain the best value w.r.t. the known optimal value. Test instances ‘E05-1’, ‘D05-1’, ‘F05-1’, ‘A05C-1’, ‘B05C-2’, ‘C05C-1’, ‘C05C-2’ and ‘C05C-3’ GAP found to be ‘positive’, which represent the superiority attained by converging toward the best value w.r.t. the known optimal value.Observation 5 – Error Correction: In Table 4 ‘EC’ represents, the correction made by inducing or suppressing the objects from the individual to obtain the best value. For this approach, ‘EC’ found to be below ‘0.53’ for the taken instances and above ‘0.04’ which has been highlighted in the Table 4. ‘F02-1’ test instance, underwent a minimum of ‘0.04’ Error Correction to convert infeasible solution into feasible solution and to improve the solution. ‘E05-1’ and ‘F05-1’ found to have an higher Error Correction Rate of ‘0.53’ for achieving ‘140.84%’ and ‘137.54%’ of accuracy rate represent in Table 3 for converging toward the optimal value.Finally, GS phase in GA found to perform better for most of the test instances considered and it has proved its efficiency in solving large datasets. Fig. 3depicts the accuracy obtained by Error Correction through Gene Suppressor for medium size datasets. Fig. 4represents accuracy obtained by Error Correction through Gene Suppressor for large datasets.Experiments carried with existing repairing approaches are done with the same benchmark test instances from OR-library for the purpose of comparing the performance of proposed GS with other prevailing approaches. The comparison results have been represented in Tables 2–4. The experimental result analysis for the existing approaches Greedy, RO2 and SACRO along with proposed GS are illustrated below.Observation 6 – accuracy: This performance measure, represents the proportion of the best value obtained w.r.t. the known optimal value. GS and SACRO approach found to have same accuracy rate for most of the cases. Minimal accuracy found was ‘81.09%’ for attaining the best value for GS and ‘51.06%’ for SACRO. Higher accuracy achieved was ‘140.84%’ for both the approaches by attaining the best value. Test instances ‘A05C-1’, ‘B05C-2’, ‘E05-1’, ‘D05-1’, ‘C05C-1’, ‘C05C-2’ and ‘C05C-3’ found to have best value, compared to the known optimal value for both approaches GS and SACRO. ‘F05-1’ is an additional instance to attain the best value for GS approach. Similarly greedy approach has minimal accuracy of ‘48.47%’ and higher accuracy of ‘140.84%’. Instances ‘A05C-1’, ‘B05C-2’, ‘C05C-3’ and ‘E05-1’ achieved the best value compared to known optimal value. RO2 approach has the minimum accuracy of ‘35.95%’ and higher accuracy of ‘65.12%’. All the solution attained for this approach falls below the known optimal value. In Table 2 highlighted values for accuracy represents the maximum and minimum percentage of accuracy attained by each approaches for the taken set of instances. Figs. 5 and 6gives a better visualization of the optimal value attained by each approach and its accuracy is shown in the comparison graph. Finally, GS found to have better accuracy, that fall within ‘81.09–140.84%’ when compared to the other existing approaches. In addition to this it can be identified from the above tables that GS performs better for most of the instances when compare to other approaches.Observation 7 – Error Rate (ER): This performance factor, measures the variation found in obtaining the best value w.r.t. the known optimal value. Error Rate for GS found to be from ‘−29% to 23.31%’, Greedy contains ‘−29% to 106.31%’, RO2 contains ‘49% to 169.01%’ and SACRO Error Rate falls within ‘−29% to 95.85%’. Instance ‘E05-1’, found to hold lesser Error Rate of ‘−29%’ for all the approaches except for RO2. It has been observed that GS found to hold maximum Error Rate as ‘23.32%’ but, when compared to other approaches ‘23.32%’ found to be lesser and from this analysis, GS found to work best with minimum Error Rate for most of the considered test instances when compared to other approaches.Observation 8 – Convergence Rate (CR): Proportional rate arising toward optimal value used in assessing the quality of a technique and higher Convergence Rate denotes the closeness toward the optimal value. Convergence Rate found to falls in the range of ‘76.67–129%’ for GS, Greedy found to have CR ‘−6.31% to 129%’, RO2 found to have ‘−78.16% to 46.44%’ and SACRO has CR of ‘4.17–129%’. Instance ‘E05-1’ found to have maximum CR rate for all approaches except for RO2. Since, GS found to perform better when compared to other approaches by attaining minimum Convergence Rate of ‘84.86%’ which could not be attained by other approaches. Fig. 7gives a better visualization of CR as comparison graph for the considered approaches for this experiment. The higher the CR, the lesser the Error Rate and finally it could be identified from the results attained that GS has higher Convergence Rate with higher possibilities of moving toward the optimal value.Observation 9 – GAP ratio: This measure the distance in the form of ratio to attain the best value w.r.t. the known optimal value. GS found to have ‘positive’ GAP, for instances ‘C05C-1’, ‘C05C-2’, ‘C05C-3’, ‘E05-1’, ‘F05-1’, ‘B05C-2’ and ‘A05C-1’ denoting that the values attained by these instances are best compared to the known optimal value, while GS fails for other instances. Greedy found to have ‘positive’ GAP for instances ‘C05C-3’, ‘E05-1’, ‘B05C-2’ and ‘A05C-1’ which denotes that the value attained are best compared to known optimal value. RO2 approach fails in all the instances to hold ‘positive’ GAP and SACRO found to be positive for ‘C05C-1’, ‘C05C-2’, ‘C05C-3’, ‘E05-1’, ‘B05C-2’ and ‘A05C-1’. GS and SACRO found to have positive GAP within ‘18.45–40.84%’ which are closer in GAP ratio even though SACRO fails for this instance ‘F05-1’ to be positive which has been attained by GS.Observation 10 – Error Correction Rate (EC): This factor is used to measure the proportion of correction made to obtain the best value either by eliminating, suppressing or by inducing objects expression. EC found to be ‘0.04–0.53%’ for GS, greedy has ‘0.10–0.54%’, RO2 has ‘0.18–0.65%’ and SACRO has EC of ‘0.16–0.51%’. Increase in correction rate also increases the execution time and from the tables it could be visualized that GS attains best value for most of the instances with less ‘number of functional evaluations (FES)’ by undergoing EC when compared to other approaches.

@&#CONCLUSIONS@&#
