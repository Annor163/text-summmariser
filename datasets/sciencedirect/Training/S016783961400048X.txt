@&#MAIN-TITLE@&#
Adaptively refined multilevel spline spaces from generating systems

@&#HIGHLIGHTS@&#
The construction of (T)HB-splines is extended to generating systems.Among other potential applications, this supports local refinement in the presence of features.The generalization does not require linear independence of the underlying generating systems.Many results on (T)HB-splines can be extended to the more general setting.We identify the linear dependencies that are present in multilevel Zwart–Powell elements.

@&#KEYPHRASES@&#
Multilevel spline space,Generating system,Preservation of coefficients,Zwart–Powell element,

@&#ABSTRACT@&#
The truncated basis of adaptively refined multilevel spline spaces was introduced by Giannelli et al. (2012, 2014). It possesses a number of advantages, including the partition of unity property, decreased support of the basis functions, preservation of coefficients and strong stability, that may make it highly useful for geometric modeling and numerical simulation. We generalize this construction to hierarchies of spaces that are spanned by generating systems that potentially possess linear dependencies. This generalization requires a modified framework, since the existing approach relied on the linear independence of the functions generating the spaces in the hierarchy. Many results, such as the preservation of coefficients, can be extended to the more general setting. As applications of the modified framework, we introduce a hierarchy of hierarchical B-splines, which enables us to perform local refinement in the presence of features, and we also extend the adaptive multilevel framework to spaces spanned by Zwart–Powell (ZP) elements, which are special box splines defined on the criss-cross grid. In the latter case we show how to identify the linear dependencies that are present in the truncated hierarchical generating system and use this result to perform adaptive surface fitting with multilevel ZP elements.

@&#INTRODUCTION@&#
The study of adaptively refined multilevel spline spaces, such as hierarchical B-splines, has a long history in Computer Aided Geometric Design (Forsey and Bartels, 1988; Greiner and Hormann, 1997; Kraft, 1997; Pulli and Lounsbery, 1997). Recently, the investigation of such spaces has gained significant momentum, partially due to their importance for isogeometric analysis (IgA) (see Hughes et al., 2005; Cottrell et al., 2009), where generalizations of tensor-product splines are needed in order to enable localized mesh refinement. Besides the use of T-splines (Dörfel et al., 2010; Li et al., 2012) and of the recently introduced Locally Refined (LR) splines of Dokken et al. (2013), approaches that rely on hierarchical techniques have been employed successfully to address the issue of local refinement in IgA (e.g. Vuong et al., 2011; Kuru et al., 2014; Bornemann and Cirak, 2013; Schillinger et al., 2012).So far, the construction and analysis of adaptively refined multilevel spline spaces have been restricted almost entirely to spaces spanned by basis functions, which – by the very definition of this notion – possess the property of linear independence. The aim of the present paper is to provide the generalization to spaces obtained as the span of certain generating systems that are potentially linearly dependent.More precisely, we extend the framework of truncated hierarchical bases (Giannelli et al., 2012, 2014; Speleers et al., 2009) to the case of generating systems. Since the existing approach relies heavily on the property of linear independence, we need to formulate a modified framework (including a different notation) for this generalization. We show that many of the advantageous properties of truncated hierarchical bases can be extended to the new setting. These include the preservation of coefficients, the nested nature of refinement via domain enlargement, and the partition of unity property.We also consider two applications of the generalized setting. First, we introduce a hierarchy of hierarchical B-splines that enables us to perform local refinement in the presence of features (local modifications). Second, we consider the adaptive multilevel framework to spaces spanned by Zwart–Powell (ZP) elements, which are special box splines defined on the criss-cross grid (see de Boor et al., 1993; Wang, 2001).This highly interesting class of functions was studied extensively in approximation theory (Lyche et al., 2008; Foucher and Sablonnière, 2008; see also Prautzsch and Boehm, 2002 for additional information on box splines). ZP elements achieveC1smoothness with piecewise quadratic functions and possess a single non-trivial linear dependency relation. We show how to analyze the linear dependencies that are inherited by the generating system that spans the adaptively refined multilevel space. The capabilities of the new construction for adaptively refined multilevel ZP elements are demonstrated by using them for surface fitting, where elimination of these linear dependencies is essential.The remainder of the paper consists of six parts. First we present the generalized hierarchical construction in Section 2. The third section discusses the property of preservation of coefficients and its consequences. Section 4 derives our results concerning refinement via space and/or domain enlargement. It also presents the first application of the generalized setting to define hierarchies of hierarchical B-splines, which allow to perform adaptive refinement in the presence of features. After briefly discussing the case of generating systems with the property of local linear independence in Section 5, we show how to identify and eliminate the linear dependencies that are inherited by a truncated hierarchical generating system for a certain class of generating systems (which includes hierarchical ZP elements). Based on these results, we present an application to surface fitting using adaptively refined hierarchical ZP elements. Finally, we conclude the paper and identify topics for future research.This section shows how to generalize the construction of truncated hierarchical splines to the case of generating systems, where linear dependencies may or may not be present. We start with some preliminary remarks concerning the notation and establish the selection procedure that leads to the hierarchical construction. Further, we explain the truncation mechanism and introduce the notation of the truncated hierarchical generating system.Throughout this paper we consider spaces V of functions defined on an open setΩ⊂RDthat are spanned by finite11Even though we consider finite generating systems, the following theory can also be applied to locally finite systems (see Davydov et al., 1997, for the definition of this notion).generating systems G. The generating systems are represented by column vectors(1)G=(γ1,…,γn)T,where the positive integer n denotes the number of functions in G. We will use row vectors c to collect the coefficients of functions inV=spanG={cG:c∈RD}.We assume that all functionsγiare non-negative and different from the null function. Generating systems that form a partition of unity,1G=1,with1=(1,…,1), will be said to be normalized.Example 1As an example of a generating system with a linear dependency relation we consider translates of Zwart–Powell (ZP) element, aC1piecewise quadratic box spline. It is defined over a four directional criss-cross grid and it is obtained by applying convolutions to the characteristic function of the unit square in four directions inR2:(1,0),(0,1),(1,1)and(−1,1). Its support has the shape of an octagon as shown in Fig. 1. Hence, the function can be associated with the central point of its support. The translates with respect to the integer gridZ2form a generating system with one linear dependency relation. It is known that removing one function restores linear independence. For further information we refer to the monographs of de Boor et al. (1993) and Wang (2001).We will denote the ZP element in the original position byφ(x). The associated point is(1/2,1/2), i.e. the center of its support. The support and the associated point are depicted in Fig. 1(a). The function itself is shown in Fig. 1(b).The translates of φ areφi(⋅):=φ(⋅−i),i∈Z2.Given an open set Ω, we consider only those translates that do not vanish on Ω and collect their indices in a setI. These translates then form a finite generating system(2)G=(φi)i∈I.Obviously, we can introduce a suitable numbering and obtain a column vector of the form (1). The linear dependency relation of ZP elements will be discussed later in Example 22.Note that the support of each element of the generating system G is always a subset of Ω, since Ω is the domain of all functions that we consider. Those parts of the octagonal (untrimmed, i.e. not restricted to Ω) supports of the translates that are not contained in Ω will simply be ignored.  ⋄We define a relation between generating systems.Definition 2Considering two different generating systems G andGˆ, the generating system G is said to be coarser than the generating systemGˆ(and, conversely,Gˆis finer than G),G≺Gˆ,if there exists a non-negative matrix S (i.e. a matrix with non-negative entries) such that(3)G=SGˆ.Since the generating systemsG,Gˆand the matrix S are non-negative, the relation implies the following simple observation: Consider the row(sij)jin the matrix S that contains the coefficients ofγiwith respect toGˆ,(4)γi=(cij)j=1,…,nˆGˆ,wherenˆis the dimension ofGˆ. Thencij≠0impliessuppγˆj⊆suppγi, whereGˆ=(γˆ1,…,γˆnˆ)T. Thus, each functionγiof G has a representation with respect toGˆthat involves only functions with support contained insuppγi. Since the systems are not assumed to be linearly independent, several representations with this property may exist.We summarize several simple properties of the relation ≺.Lemma 31.IfG≺GˆthenspanG⊆spanGˆ.The relation ≺ is reflexive, transitive and weakly antisymmetric in the sense thatG≺GˆandGˆ≺Gimply thatspanG=spanGˆ.If the elements of G form a subset of the elements ofGˆ, thenG≺Gˆ.To show that ≺ is not antisymmetric consider two generating systemsG=(f)andGˆ=(λf), whereλ>1and f is an arbitrary function; these two systems are different but related in both directions, i.e.G≺GˆandGˆ≺G.Hierarchical generating systems are defined with the help of a domain hierarchy and a hierarchy of generating systems. The domain hierarchy is simply a decreasing sequence ofN+1subsetsΩℓ⊂RD,(5)Ω=Ω0⊇Ω1⊇…⊇ΩN+1=∅,where we added the final domainΩN+1=∅in order to simplify the notation later on.The domains define the complementary hierarchy(6)Δℓ=Ω∖Ωℓ+1satisfyingΔ0⊆Δ1⊆…⊆ΔN=Ω.The elements of this hierarchy will be denoted as rings, because, conceptually,Δℓconsist of Ω with the ‘hole’ defined byΩℓ+1(even though it need not be ring-shaped).The hierarchy of generating systems is a sequence ofN+1generating systemsGℓ=(γiℓ)i=1.…,nℓthat is monotonically increasing with respect to relation ≺,(7)G0≺G1≺…≺GN.Denoting their spans withVℓ=spanGℓ, we obtain a nested sequence of spaces,V0⊆V1⊆…⊆VN.Without loss of generality we will assume that each domainΩℓis the union of supports of a certain subset of the functions inGℓ+1. Considering domain hierarchies without this property does not lead to additional hierarchical generating systems.In order to prepare the construction of the hierarchical generating systems, we first assume their ordering according to the chosen domain hierarchy. More precisely, such ordering allows for splitting the vectorsGℓinto three sub-vectorsGAℓ,GBℓ,GCℓwith dimensionsnAℓ,nBℓ,nCℓ, respectively. The sub-vectors are defined as follows:(8)Gℓ=(γiℓ)i=1,…,nℓ=(GAℓGBℓGCℓ)=((γiℓ)i=1,…,nAℓ(γiℓ)i=nAℓ+1,…,nAℓ+nBℓ(γiℓ)i=nAℓ+nBℓ+1,…,nAℓ+nBℓ+nCℓ)such that(9)i≤nAℓ⇔suppγiℓ⊈Ωℓ,i>nAℓ+nBℓ⇔suppγiℓ⊆Ωℓ+1,andnℓ=nAℓ+nBℓ+nCℓ.If the support of a functionγiℓpossesses a non-empty intersection with the ringΔℓ−1, then it belongs toGAℓ. If it possesses a non-empty intersection withΔℓ, but not withΔℓ−1, then it belongs toGBℓ. All other functions are elements ofGCℓ. The partition ofGℓis shown in Fig. 2. Note that some of these sub-vectors may not be present (void) at certain levels. In particular,GA0is void, since the supports of all functions are contained inΩ=Ω0, andGCNare void sinceΩN+1=∅.Since the generating systems form an increasing sequence (7), there exist matricesSℓ+1with non-negative entries, which relate them in terms of Definition 2,(10)Gℓ=Sℓ+1Gℓ+1,ℓ=0,…,N−1.These equations will be called the refinement relations. The matrices are denoted by S because of their relation to subdivision methods (e.g. for box splines).Example 4Subdivision for box splines is already known and has been well studied (de Boor et al., 1993; Prautzsch and Boehm, 2002). We will consider the refinement relation for ZP elements, where a coarse function is a linear combination of twelve functions defined on a finer grid (the supports of some of these finer functions are depicted in Fig. 3).We will consider a nested sequence of domains inR2and a nested sequence of generating systems of ZP elements on the grids obtained by refinement steps that split each elementary square into four smaller ones (note that there are two systems of elementary squares on the criss-cross grid). The ZP elements on a grid after ℓ refinement steps areφiℓ(x)=φ(2ℓx−i).According to the choice of the domain hierarchy we obtain finite index setsIℓ, such that the functionsφiℓdo not vanish on Ω fori∈Iℓ. We then define the generating systems(11)Gℓ=(φiℓ)i∈Iℓ.The coefficients in the refinement relation between a coarse and twelve finer functions are shown in Fig. 4. Note that not all finer functions need to be present at the next level, since some of them might vanish on the domain Ω.  ⋄Taking (8) into account, we obtain 9 sub-matrices,(12)Gℓ=(GAℓGBℓGCℓ)=[SAAℓ+1SABℓ+1SACℓ+1SBAℓ+1SBBℓ+1SBCℓ+10SCBℓ+1SCCℓ+1](GAℓ+1GBℓ+1GCℓ+1)=Sℓ+1Gℓ+1.Note thatSCAℓ+1=0(the null matrix), since the functions inGAℓ+1cannot contribute to the values of functions inGCℓ, cf. Eq. (4).The following result follows directly from the last row in (12):Lemma 5We may expressGCℓwith respect to allGBk,k≥ℓ+1,GCℓ=∑k=ℓ+1N−1(∏p=ℓ+1k−1SCCp)SCBkGBk.We are now ready to describe the selection mechanism of the hierarchy, which generalizes the definition in Vuong et al. (2011) to generating systems.Definition 6The vector of functionsK=(GBℓ)ℓ=0,…,Nis called the hierarchical generating system. Its span is called the hierarchical space.Example 7We consider the hierarchical generating system with respect to generating systems (11) forℓ=0,1. The domain hierarchy is depicted in Fig. 5. The selected functions from level 0 and level 1 are denoted by circles that are placed at the associated points. Note that some of these points are not contained in Ω, since we use the center point of the untrimmed supports (not restricted to Ω).  ⋄In this section we generalize the construction of truncated hierarchical B-splines of Giannelli et al. (2012, 2014) to the case of generating systems. We consider the same setting as in the previous section.The truncation of a functionf∈Vℓwith respect to the next generating systemGℓ+1is based on the following simple observation: The values of f on the ringΔℓare fully determined by its coefficients with respect toGAℓ+1,f=cAℓ+1GAℓ+1+cBℓ+1GBℓ+1+cCℓ+1GCℓ+1=[onΔℓ]cAℓ+1GAℓ+1.The right-hand side of this equation represents the truncation with respect to generating systemGℓ+1and domainΩℓ+1. It is obtained by removing the contributions of all functionsγiℓ+1that are selected (i.e. included into the hierarchical generating systemK), while leaving the values of f onΔℓunchanged. More precisely, we omit the contributions of functions fromGBℓ+1that have been selected directly. Moreover, we also omit the contributions of the functions fromGCℓ+1that have been selected indirectly, as they can be represented by functions that are selected at higher levels, see Lemma 5.Repeatedly applying truncation to the functionsGBℓthat were selected for the hierarchical generating systemKgives(13)GBℓ=[onΔℓ]SBAℓ+1GAℓ+1=[onΔℓ+1]SBAℓ+1SAAℓ+2GAℓ+2=[onΔℓ+2]…=[onΔN]SBAℓ+1(∏k=ℓ+2NSAAk)GAN,where we used the refinement equations (12). Finally we obtain the functions(14)Tℓ=SBAℓ+1(∏k=ℓ+2NSAAk)GAN,ℓ=0,…,N−1.Additionally, we defineTN=GBN.Definition 8The vectorT=(Tℓ)ℓ=0,…,Nis called the truncated hierarchical generating system.Any functionτ∈Tℓis obtained by repeatedly truncating a functionβ∈GBℓ. We say that β is the mother of τ and τ is the child of β. Any functionτ∈Tℓis derived from its corresponding motherβ∈GBℓby subtracting the contributions of functions in finer generating systems whose children are included in the truncated hierarchical generating system. Consequently, the support ofβ−τis contained inΩℓ+1andβ=[onΔℓ]τ.Written in vector notation,(15)GBℓ=[onΔℓ]Tℓ.Also note that according to (13), the restriction ofTℓtoΔpforp>ℓcan be expressed as(16)Tℓ=[onΔp]SBAℓ+1(∏r=ℓ+2pSAAr)GAp.Example 9According to the refinement relation described in Example 4 we can truncate the ZP element with respect to higher levels. Fig. 6shows truncation of a function inGℓwith respect to levelℓ+1. The boundary ofΩℓ+1is depicted by the dashed line. Fig. 6(b) shows how the support of a function after truncation becomes smaller. A similar observation was made by Giannelli et al. (2012) for the case of truncated hierarchical B-splines.  ⋄The preservation of coefficients is a useful property of truncated hierarchical generating systems. It has already been described by Giannelli et al. (2014) for the case of basesGℓ, but its proof relied heavily on their linear independence. Here we generalize it to the case of generating systems. We observe that it requires an additional compatibility condition (18) between the representations of a function at different levels.Theorem 10Preservation of coefficientsConsider a function f that possesses representations of the form(17)f=[onΔℓ]cAℓGAℓ+cBℓGBℓ,ℓ=0,…,N,where the coefficients of the different levels satisfy the compatibility conditions(18)cAℓ+1=cAℓSAAℓ+1+cBℓSBAℓ+1,ℓ=0,…,N−1.Thenf∈spanTand(19)f=∑ℓ=0NcBℓTℓ=(cB0,cB1,…,cBN)Ton the entire domain Ω.The coefficient corresponding toτ∈Tis the same as the coefficient associated with its motherβ∈GBℓin the representation (17) of f onΔℓwith respect toGℓ. Thus, the truncated hierarchical generating system preserves the coefficients of mother functions.ProofWe start with the representation of f at the finest level,f=cANGAN+cBNGBN,onΔN=Ω, whereGCNis not present. Repeatedly using (18) we replace the coefficientscAℓuntil we arrive at levelℓ=0,f=cAN−1SAANGAN+cBN−1SBANGAN+cBNGBN=cAN−2SAAN−1SAANGAN+cBN−2SBAN−1SAANGAN+cBN−1SBANGAN+cBNGBN=…=∑ℓ=0N−1cBℓ(SBAℓ+1(∏k=ℓ+2NSAAk)GAN)+cBNGBN.Note that the last step does not produce a term involvingcA0, sinceGA0is not present. The theorem then follows directly from the definition of truncated hierarchical generating system.  □Example 11Due to Theorem 10, the functions in the truncated hierarchical generating system from Example 7 (ZP elements) can be associated with the same (Greville-type) points in the domain. Indeed, we can represent the two coordinate functions, x and y, in all levels by simply choosing the coefficient of each function equal to the coordinates of the associated center point of its support. These coefficients satisfy the compatibility conditions and they are therefore inherited by the truncated hierarchical generating system for any choice of the domain hierarchy. It should be noted that the representations of the coordinate functions are not unique, as ZP elements are not linearly independent. However these Greville-type points are the only ones that give linear precision.  ⋄The following result describes the relation between the hierarchical generating systemKand the truncated hierarchical generating systemT.Corollary 12The hierarchical generating systemKis coarser than the truncated hierarchical generating systemT, i.e.K≺T. Both generating systems span the same space,spanK=spanT. The matrix relating them is upper triangular and its diagonal elements are all equal to 1.Note thatTdoes not actually span a finer space thanK. Still,Tis “finer” thanKin the sense of relation ≺.ProofRepeatedly using refinement relations (10) allows to derive a similar relation between any two hierarchical generating systems,Gℓ=Pℓ,kGk,ℓ=0,…,N;k=ℓ,…,N,wherePℓ,k=∏i=ℓ+1kSiand in particularPℓ,ℓ=I.The matricesPℓ,khave all non-negative entries. They also possess a block structure of3×3matrices analogous to (12), and the blocks will be denoted in a similar way. (However, no blocks vanish in general.) These equations implyGBℓ=[onΔk]PBAℓ,kGAk+PBBℓ,kGBk,k=ℓ,…,N.In addition, relation (9) givesGBℓ=[onΔk]0,k=0,…,ℓ−1.The coefficients ofGBℓat different levels also satisfy the compatibility condition (18). Consequently, we can use Theorem 10 to derive the relation(GB0GB1⋮GBN−2GBN−1GBN)=[IPBB0,1PBB0,2⋯PBB0,N−1PBB0,N0IPBB1,2⋯PBB1,N−1PBB1,N⋮⋮⋱⋮⋮00⋯IPBBN−2,N−1PBBN−2,N00⋯0IPBBN−1,N00⋯00I](T0T1⋮TN−2TN−1TN)betweenKandT, where 0 and I represent null-matrices and identity matrices of the appropriate dimensions. The matrix appearing in this relation is non-negative, thusK≺T. Moreover, the matrix is invertible, as it is upper triangular and the diagonal entries are all 1, thereforespanK=spanT.  □As another consequence of the preservation of coefficients, we are able to show that the functions inTsum up to one:Corollary 13For normalized generating systemsGℓthe truncated hierarchical generating systemTforms a convex partition of unity, provided that the refinement matrices satisfy the compatibility conditions1ℓ+1=1ℓSℓ+1,ℓ=0,…,N−1.1kdenotes the row vector of dimensionnkwith all elements equal to 1.ProofThis can be derived using Theorem 10 and considering the representation of the function1=1ℓGℓ=[onΔℓ]1AℓGAℓ+1BℓGBℓat different levels, where1Aℓand1Bℓare row vectors consisting entirely of ones and of dimensionsnAℓandnBℓ, respectively. Moreover, the functions inTare non-negative, since they are linear combinations of non-negative functions with non-negative coefficients, cf. (14).  □Example 14Fig. 7shows the sum of functions in the hierarchical generating system and the truncated hierarchical generating system constructed with respect to the domain hierarchy in Example 7. Observe that the sum for the hierarchical generating system is not equal to 1, since the functions do not form a partition of unity.  ⋄We consider two strategies for refining the hierarchical space.•The first approach consists of enlarging each domainΩℓin the domain hierarchy toΩˆℓ⊇Ωℓ(except forΩˆ0=Ω0=Ωthat remains unchanged).The second possibility is to replace each generating systemGℓby a new systemGˆℓwhich is finer with respect to the relation ≺. E.g., in the case of tensor-product B-splines, this can be achieved by knot insertion or degree elevation.Proposition 15Consider two nested domain hierarchies(20)Ω=Ω0⊇Ω1⊇⋯⊇ΩN+1=∅Ω=Ωˆ0⊇Ωˆ1⊇⋯⊇ΩˆN+1=∅}withΩℓ⊆Ωˆℓ,ℓ=1,…,Nand the hierarchical generating systems defined on them. The second hierarchical generating system is finer than the first one,K≺Kˆ.ProofEnlarging the domain hierarchy changes the definitions of sub-vectorsGAℓ,GBℓandGCℓofGℓ. We denote the sub-vectors with respect to the enlarged domain hierarchy byGˆAℓ,GˆBℓandGˆCℓ. Some of the functions fromGAℓmay belong toGˆBℓor even toGˆCℓ, and some of the functions inGBℓmay belong toGˆCℓ. The relation between the two sets of sub-vectors can be expressed by a permutation matrixQℓwith 9 sub-matricesQAAℓ,QABℓ, etc.,(21)Gℓ=(GAℓGBℓGCℓ)=QℓGˆℓ=[QAAℓQABℓQACℓ0QBBℓQBCℓ00QCCℓ](GˆAℓGˆBℓGˆCℓ).Note thatQBAℓ,QCAℓandQCBℓare zero matrices, since functions inGBℓcannot be expressed with respect toGˆAℓand functions inGCℓcannot be expressed with respect toGˆBℓandGˆCℓ.We now express each sub-vectorGBℓas a non-negative linear combination of the sub-vectorsGˆBk,k=0,…,N. By (21)GBℓcan be written as(22)GBℓ=QBBℓGˆBℓ+QBCℓGˆCℓ.Using Lemma 5 we replaceGˆCℓin the above equation byGˆCℓ=∑k=ℓ+1N(∏p=ℓ+1k−1SˆCCp)SˆCBkGˆBk,whereSˆkdenotes the matrix relating the enlarged generating systemsGˆkandGˆk+1. Thus we can writeGBℓas a linear combination ofGˆBkwith non-negative coefficients fork=ℓ,…,N−1. The matrix connectingKandKˆhas therefore non-negative entries.  □Example 16Consider the domain hierarchy in Example 7,Ω⊇Ω1⊇Ω2=∅. By enlarging the domainsΩ1⊂Ωˆ1andΩ2⊂Ωˆ2we obtain a finer hierarchical generating system. Fig. 8shows the new domain hierarchy and the selected functions from level 0, 1 and 2. They are represented by circles. Notice that adding a domain is just a special case of domain enlargement.  ⋄Second, we consider the possibility of enlarging the generating systems in terms of Definition 2. The proof of Proposition 15 can be extended to cover this situation as well. Indeed, the refinement relations betweenGℓandGˆℓcan be written in the same form as in (21). The matricesQℓin this case, however, are no longer just permutation matrices.Proposition 17Consider two sequences of generating systems(23)G0≺G1≺…≺GNGˆ0≺Gˆ1≺…≺GˆN}withGℓ≺Gˆℓ,ℓ=0,…,N,and the hierarchical generating systems defined by them. The second hierarchical generating system is finer than the first one,K≺Kˆ.Note that both propositions also imply that(24)spanT=spanK⊆spanKˆ=spanTˆ.Example 18We consider the nested spaces spanned by the generating systemsGℓthat consist of ZP elements from Example 4. In addition, for each generating systemGℓ, we consider the Bernstein-Bézier basisGˆℓofC0quadratic splines on the triangulation defined by the ZP elements of that level. It consists of one function for each vertex and one (additional) function for each edge of the triangulation (this corresponds to the six quadratic Bernstein polynomials for each triangle). When replacingGℓwithGˆℓwe enlarge the hierarchical space defined by the (truncated) hierarchical generating systemKandT.  ⋄The combination of both refinement strategies leads to the following General Enlargement Theorem (GET):Theorem 19General Enlargement Theorem – GETConsider two sequences of hierarchical domains(20), two sequences of generating systems(23)and the hierarchical generating systems defined by them. Then the second hierarchical generating system is finer than the first one.The proof follows directly from the previous two propositions. Several remarks on this result are in order.•As a special case, GET covers the case of adding another level to the hierarchy. In particular, one may consider two hierarchies with∅=ΩN⊆ΩˆN≠∅.This also proves that the generating systems which are generated by an inductive definition (as used, e.g. in Giannelli et al., 2012) form an increasingly finer sequence.GET makes it possible to define a hierarchy of hierarchies as follows. Consider a sequence of (truncated) hierarchical generating systemsGk=Kk(orGk=Tk),k=0,…,M, such that each of them is generated by a hierarchy of domainsωk,ℓand a hierarchy of generating systemsgk,ℓ,ℓ=0,…,N. We assume that these hierarchies are all nested,(25)ωk,ℓ⊆ωk,ℓ+1,gk,ℓ≺gk,ℓ+1,ℓ=0,…,N−1.Now, if we consider another global domain hierarchy (5), then we can define a hierarchy of hierarchical spaces. This allows for adaptive refinement in the presence of local features, e.g. surfaces with sharp edges and localC0continuity22Other techniques for modeling surfaces with sharp features include using T-splines or special subdivision surfaces (Sederberg et al., 2003; Kosinka et al., 2014).(see Example 20), but also for local degree elevation (combinations of adaptive p- and h-refinement).GET can be extended to truncated hierarchical generating systems, but this requires an additional condition concerning the compatibility of the refinement relations,(26)Sℓ+1Qℓ+1=QℓSˆℓ+1forℓ=0,…,N−1.Due to space limitations we do not discuss further details. Note that the spaces are nested even without this assumption.Example 20We consider a hierarchical generating system, constructed with respect to nested sequence of two hierarchical B-spline basesK0≺K1. Their hierarchical meshes and selected functions are depicted in Fig. 9(a) forK0and in Fig. 9(b) forK1. We define a surface as a linear combination of basis functions inK0with coefficients inR3. We build a hierarchy of hierarchical spaces to allow for adaptive refinement in a selected region, see Fig. 9.The hierarchical B-spline basisK0is obtained from quadratic B-spline basesg0,0≺g0,1and domainsω0,0⊇ω0,1. Note thatg0,1has a double knot in the middle, which results in a surface with a local sharp feature. More precisely, the smoothness of the surface in this region decreases toC0.In order to perform adaptive refinement of this particular surface, we find a finer hierarchical generating system by performing space enlargement while leaving the domains unchanged. In particular, we obtaing0,0≺g1,0andg0,1≺g1,1by knot insertion. By Theorem 19 we get a nested sequence of hierarchical generating systemsK0≺K1.Moreover, we choose a domain hierarchyΩ⊇Ω1, whereΩ=ω0,0=ω1,0. The domainΩ1is shown in Fig. 9 in blue. We construct a hierarchical generating systemKwith respect to the domain hierarchyΩ⊇Ω1and nested sequenceK0≺K1. In this special configurationK0andK1are even locally linearly independent. Thus,Kis linearly independent.Figs. 9(c) and 9(d) show the selected functions fromK0andK1with respect to the domains Ω andΩ1. Figs. 9(e) and 9(f) show the surface before and after local modification. Note that the smoothness of the surface stays the same after modification and the local feature does not extend globally.  ⋄Clearly, linear independence is a highly desirable property of a generating system, since it is essential for various applications. This section describes how to guarantee it with the help of local linear independence. This approach goes back to the work of Kraft (1997).Recall that a generating system G is said to be locally linearly independent, if for any open subsetU⊆Ωall the functionsγifrom G that do not vanish on U are linearly independent on U,(27)∀j=0,…,n:(0|U=∑i=0nciγi|U∧γj|U≢0|U⇒cj=0).This property allows to conclude linear independence of the hierarchical generating systems and truncated hierarchical generating systems that are derived from domain hierarchies and hierarchies of generating systems.Proposition 21If the generating systemsGℓare locally linearly independent, then both the hierarchical generating systemKand the truncated hierarchical generating systemTare linearly independent.The first proof of this result for hierarchical generating systems is due to Kraft (1997). For the proof in the case for truncated hierarchical generating systems see Giannelli et al. (2012).Local linear independence is a stronger requirement than linear independence. For instance, while it is known that B-splines are locally linearly independent, the general construction of the hierarchical B-spline basis introduces local dependencies. Even the truncation does not guarantee the absence of local linear dependencies. However, we can maintain the local linear independence of hierarchical B-splines, provided that the underlying spaces and hierarchical domains satisfy further assumptions. For instance, the hierarchical B-splines in Example 20 are locally linearly independent. We plan to perform a more detailed investigation of this issue in the future.The results of the previous section do not apply to generating systems with linear dependencies. For ZP elements it is known that omitting one function from the generating system restores linear independence. In this section we will show how to extend this observation to the hierarchical setting. More precisely, we formulate assumptions that will allow us to characterize the linear dependencies that are present in the truncated hierarchical generating system. These assumptions are satisfied by ZP elements.Each generating system G defines a linear mapping fromRnto spanG,c↦cG,c∈Rn.The kernel of this mapping is the space of all linear dependency relations in G. We denote this space byL(G). We show how to find a basis forL(T).We consider a hierarchy of generating systems that possess exactly one linear dependency relation each, i.e.dim⁡L(Gℓ)=1. For each generating systemGℓthere exists a non-trivial row vectorzℓ=(z1ℓ,…,znℓℓ), such thatzℓGℓ=0. Moreover, we assume that the linear dependency relation involves all functions, i.e. that all elements of this vector are non-zero.Applying the refinement relation (10) to the linear dependency relation ofGℓproduces a representation of the functionf=0with respect toGℓ+1. We make the following simplifying assumption:(A1)Applying the refinement relation (10) to the linear dependency relation ofGℓgives the trivial representation off=0, i.e.zℓSℓ+1=Oℓ+1,whereSℓ+1is the matrix relatingGℓandGℓ+1in terms of relation ≺ andOℓ+1is a row null vector of dimensionnℓ+1.Example 22The generating system of ZP elements possesses one linear dependency relation. The null function can be represented as a linear combination with coefficients in a “chessboard pattern” of alternating coefficients +1 and −1 as shown in Fig. 10. Note that this linear dependency relation involves all functions in the generating system. Moreover, this relation satisfies assumption (A1).  ⋄Recall that the definition of the truncated hierarchical generating system is based on the hierarchy of domains (5). These define the rings (6). For each generating systemGℓwe define a connectivity graphCℓas follows:•All elements ofGAℓandGBℓare vertices ofCℓ.Two different verticesγiℓandγjℓare connected by an edge wheneversuppγiℓ∩suppγjℓ∩Δℓ≠∅.We defineGℓ-connected components of the ringΔℓ,(28)Δkℓ=⋃j=0,…,nℓγjℓ∈Ckℓsuppγjℓ∩Δℓ.Note that eachΔkℓis not necessarily a connected set inRD. Ifj>nAℓfor all j such thatγjℓ∈Ckℓ, then bothΔkℓandCkℓwill be called orphans of level ℓ. Thus, all functions fromGAℓvanish (are equal to 0) on an orphanΔkℓ.We assume a special ordering of the vectorsGℓas follows: We order the functions in the sub-vectorGAℓwith respect to connected componentsCkℓfork=1,…,Mℓ. Similarly we order the sub-vectorGBℓ. More precisely, after the ordering we can writeGAℓandGBℓasGAℓ=(GA,kℓ)k=1,…,Mℓ,GBℓ=(GB,kℓ)k=1,…,Mℓ.Note that some sub-vectors may be void (not present). For instance,GA,kℓis not present wheneverCkℓis an orphan. When considering a linear combinationcℓGℓ, wherecℓis the row vector of coefficients, the sub-vectors of coefficients corresponding toGA,kℓandGB,kℓwill be denoted bycA,kℓandcB,kℓ, respectively. In particular, this also applies to the coefficients of the global linear dependency relations with coefficientszℓ.Example 23We consider the hierarchical B-spline basis, defined with respect to the univariate cubic B-splines over uniform knot vectors. The hierarchy of bases is obtained by dyadic knot insertion and the domain hierarchy is shown in Fig. 11(a). Although connectivity graphs in case of B-splines are irrelevant, since the hierarchical generating system is linearly independent, the example gives the idea how the connectivity graphs are generated.Fig. 11(d) shows the connected components of the connectivity graphs. The functions inGBℓare represented by shaded circles.First, we consider the level 0. SinceGA0is empty, the connectivity graph at level 0 contains only functions fromGB0. Therefore, every connected component is an orphan. In this particular example, the connectivity graph consists of two componentsC10andC20. We obtain twoG0-connected componentsΔ10andΔ20, see Fig. 11(b).Second, we consider level 1. The connectivity graph consists of three connected components. Note thatC21contains only functions fromGB1and is therefore an orphan. We obtain threeG1-connected components ofΔ1and one of them is an orphan. Note thatΔ11is not a connected set inR.The connectivity graph at level 2 (not shown) has only one connected component, sinceΔ2=Ω. It is not an orphan since all functions inGA2are present.  ⋄In addition to the assumption (A1) about the linear dependency relations, we will also need an assumption concerning the ringsΔℓ.(A2)Each connected componentΔkℓof the ringΔℓadmits only linear dependency relations that are instances of the global linear dependency relation inGℓ. More precisely, if(29)cA,kℓGA,kℓ+cB,kℓGB,kℓ=[onΔkℓ]0then there exists a scalar ϱ, such thatcA,kℓ=ϱzA,kℓ,cB,kℓ=ϱzB,kℓ,wherezA,kℓandzB,kℓare sub-vectors of the vectorzℓ, corresponding toGA,kℓandGB,kℓ.A linear dependency relation inTwill be represented by a row vector w. Its sub-vector with respect toTℓwill be denoted byuℓ,0=wT=(u0,…,uN)T=∑ℓ=0NuℓTℓ.Moreover, eachuℓconsists of sub-vectorsukℓ, one for eachGℓ-connected component of the ringΔℓ.Due to the ordering ofGBℓand truncation process (13),Tℓconsists ofMℓsub-vectorsTkℓsuch thatTℓ=[onΔkℓ]Tkℓ.Note that some of the vectorsTkℓmay be void.Let K and L be indices, such thatCKLis an orphan. We define a linear dependency relation associated with it,wKL=(u10,…,uM00,…,u1N,…,uMNN),where(30)ukℓ={zB,kℓifℓ=Landk=K,0otherwise,forℓ=0,…,Nandk=1,…,Mℓ.Lemma 24The vectorwKLrepresents a linear dependency relation ofT.ProofWe consider the representation off=0on the ringΔℓwith respect toGℓdefined by(31)0=[onΔkℓ]OA,kℓGA,kℓ+OB,kℓGB,kℓfor each connected componentCkℓ,k=1,…,Mℓ,k≠K,ℓ=0,…,N,ℓ≠L, and0=[onΔKL]zB,KLGB,KLfor the orphanCKL. Note that representing 0 on the orphanΔKLinvolves only functions fromGBL. Using assumption (A1) we can verify that the compatibility condition (18) is satisfied. The lemma now follows from Theorem 10.  □Theorem 25The set of linear dependencies(32){wKL:L=0,…,N,K=0,…,Mℓ,CKLis an orphan}is a basis for the spaceL(T)of linear dependency relations inT.ProofAccording to the previous lemma, eachwKLis a linear dependency relation inT. Due toGL-connectivity, the non-zero entries ofwKLhave mutually different indices. Therefore, the vectorswKLare linearly independent.We show that these linear dependencies span the entire linear spaceL(T). Supposew=(v0,…,vN)is a linear dependency relation inT,(33)0=wT=(v0,…,vN)T=∑ℓ=0NvℓTℓ.We show that w can be expressed as a linear combination ofwKL. We use induction with respect to level ℓ to express w on each ringΔℓ. Starting with the lowest levelℓ=0we restrict Eq. (33) to each connected componentΔk0. Using Eq. (15) we obtain0=[onΔk0]wT=[onΔk0]vk0Tk0=[onΔk0]vk0GB,k0.SinceG0satisfies assumption (A2), there existsϱk0, such that(34)vk0=ϱk0zB,k0=ϱk0uk0.We now considerℓ≥1. Using Eq. (14) we obtain0=wT=[onΔℓ]v0T0+…+vℓTℓ=[onΔℓ]∑p=0ℓ−1vpSBAp+1(∏r=p+2ℓSAAr)GAℓ+vℓGBℓ.By induction, all sub-vectorsvkp,p<ℓ, can be written asvkp=ϱkpzB,kp=ϱkpukpwheneverΔkpis an orphan, andvkp=OTotherwise. Using assumption (A1) we obtainvpSBAp+1(∏r=p+2ℓSAAr)=OAℓforp=1,…,ℓ−1.For eachGℓ-connected componentΔkℓwe get0=[onΔkℓ]OA,kℓGA,kℓ+vkℓGB,kℓ.IfΔkℓis not an orphan, then we concludevkℓ=0, since the only non-trivial representation of a null function with respect toGℓinvolves all functions (we assumed all elements ofzℓto be non-zero).Otherwise, ifΔkℓis an orphan, thenGA,kℓis void. According to assumption (A2) there exists a scalarϱkℓ, such thatvkℓ=ϱkℓzB,kℓ=ϱkℓukℓ.We conclude that any linear dependency relation can be obtained as a linear combination of vectorswKL, whereCKLis an orphan,w=∑K,L:CKLisan orphanϱKLwKL.□Theorem 25 gives us all linear dependency relations in the truncated hierarchical generating system for certain classes of hierarchies of generating systems, including ZP elements. Consequently, one can restore linear independence by omitting a suitable subset ofT. This observation will be used in the next section.The authors believe that the approach to restore linear independence can be extended to generating systems that possess linear dependency relations with similar properties, such as other box splines on the criss-cross grid. It would be also of interest to analyze the general case of generating systems with possibly unstructured linear dependencies. A more detailed discussion is beyond the scope of the present paper.Zwart–Powell elements are a particularly interesting class of box splines on the criss-cross grid, since they combine low degree withC1smoothness. Based on the theoretical results presented so far we use their truncated hierarchical version to perform surface fitting with adaptive refinement.Given a set of data (points(xi,yi)with associated valuesfi,i=1,…,m, for a large number of points m), we iteratively compute a least-squares approximation and perform a refinement procedure until the approximation error becomes smaller than a given tolerance.In our examples, the points are distributed uniformly in the domain Ω (which is an axis-aligned box) and their number is much larger than the dimension ofspanT. In order to simplify the presentation we do not consider any regularization strategy here, which might be needed in order to avoid problems with singular linear systems.33For instance, such problems would be present if the number of degrees of freedom in certain subset of Ω exceeds the number of data points in that subset.The discussion of such a strategy is beyond the scope of the present paper. Instead, we focus on the issue of adaptive refinement and the elimination of the linear dependencies in the truncated hierarchical generating system.We consider two different refinement strategies; they will be referred to as relative and full refinement. Moreover, since the computation of the least-squares approximation needs a generating system that is a basis, we have to find linear dependencies inTand eliminate suitable functions to restore linear independence. Except for this part (step (b) below), our algorithm is similar to the one used by Giannelli et al. (2012):Hierarchical approximation•Input: an initial domainΩ⊂R2together with the data set(xi,yi,fi),i=1,…,m, which associates real valuesfito a set of points(xi,yi)∈Ω, a certain tolerance ε, and a maximum value for the number of iteration stepssmax.Algorithm:(a)define an initial generating systemG0of ZP elements on Ω and initializes=0;determine the linear dependency relations in the current truncated hierarchical generating system and restore linear independence by omitting suitably chosen functions fromT; this creates a modified generating systemT⋆.compute the least squares approximationf=∑φ∈T⋆cφφthat minimizes(35)∑i=0m(fi−f(xi,yi))2with respect to the coefficients ofT⋆;ifmax⁡|fi−f(xi,yi)|>εands<smax, then sets=s+1and apply the hierarchical refinement according to the considered refinement strategy; repeat steps (b) and (c); otherwise the algorithm terminates.Output: The least-squares approximation f expressed in terms of truncated hierarchical generating system of ZP elements so thatmax⁡|fi−f(xi,yi)|≤εors=smax.In step (d) we use two different refinement strategies. Both fit into the same black-box procedure.Hierarchical refinement•Input: the current hierarchical sequence of nested hierarchical domains together with points(xi,yi)marked for refinement;Output: a nested sequence of domainsΩˆ⊇…⊇ΩˆN, so that(36)Ωˆ=Ω,Ωˆℓ⊇Ωℓ,ℓ=1,…,N,and the corresponding truncated hierarchical generating system. For each point that is marked for refinement, the level of the domain containing itmaxℓ⁡{ℓ|(xi,yi)∈Ωℓ}increases.The enlargement of the domains in (36) is obtained by adding a suitable number of cells from the neighborhood of each point that is marked for refinement to the corresponding domain. This neighborhood is chosen such that at least one ZP element is added to the corresponding generating system. The domain enlargement is followed by a cleaning step in order to restore the property that the domains are nested in the hierarchy.We compute the least-squares approximations of the functionf(x,y)=23exp⁡((3x−5)2+(3y−5)2)+23exp⁡((3x+5)2+(3y+5)2)+23exp⁡((2x)2+(2y)2),(x,y)∈[−3,3]2,shown in Fig. 12(a). A similar function was used by Giannelli et al. (2012). We obtained the data by sampling on a uniform grid of size100×100. In step (d) we performed hierarchical refinement by considering5%of the points. The tolerance was chosen asε=10−5and we considered 5 steps of refinement. The relative refinement strategy results in the loss of symmetry as it is evident from Fig. 12(f). Due to the loss ofC1smoothness around the 3 “peaks”, the refinement is concentrated around them. Table 1provides information concerning the number of degrees of freedom and the resulting error in the five steps of refinement. The error is measured between the fitted surface and the sampled data, that is, on the100×100grid.In the initial configuration (s=0), the ZP elements possess one linear dependency relation. We recover the linear independence by eliminating the function represented by a circle in the upper left corner in Fig. 12(b). After the first refinement, the domainΩ1splits Ω into two orphans. Thus, we eliminate two functions from level 0, see Fig. 12(c).Note that we always eliminated functions that are located close to the boundary of the domain Ω. Consequently, the circles representing them are placed outside of Ω, since they are located at the center of the full support (not trimmed by Ω).Similarly we proceed with the refinement and eliminate four functions after each of the three following refinement steps. In the last step one should note that the connected component ofΔ2(red), which is surrounded byΔ3(yellow), is not an orphan, since it isG2-connected to the other parts ofΔ2. Similarly, the small yellow spots in the mesh obtained in the last step do not represent additional orphans.In the second example we considered the function (also used by Giannelli et al., 2012),f(x,y)={1,y−x≥1/2,2(y−x),0≤y−x≤1/2,1/2cos⁡(4πq(x,y))+1/2,q(x,y)≤1/16,0,otherwise,(for(x,y)∈[0,2]×[0,1])whereq(x,y)=(x−3/2)2+(y−1/2)2. Again we sampled100×100points on a uniform grid. The threshold is nowε=10−2. The results of the surface approximation are summarized in Table 2. After four steps, the error satisfied the given tolerance and no further refinement was necessary.Once more, the ZP elements of the initial configuration possess one linear dependency relation. It is eliminated by omitting function in the upper left corner, see Fig. 13(b). In this particular example, the dimension ofL(T)increases by one in each step of refinement, and thus, we omit more and more (suitably chosen) functions.According to our experience, the second refinement strategy performs better, since it better preserves the symmetry that may be present in the data and it also reduces the error faster than the first one. However, if the error threshold is chosen too small (such that it cannot be reached by using only the maximum number of levels that is specified), then the second strategy may lead to an almost global refinement, and the relative refinement strategy would give better results.

@&#CONCLUSIONS@&#
