@&#MAIN-TITLE@&#
Hybrid bare-bones PSO for dynamic economic dispatch with valve-point effects

@&#HIGHLIGHTS@&#
A new PSO-based hybrid algorithm is presented to solve dynamic economic dispatch problems with valve-point effects.An improved bare-bones PSO and a directionally chaotic search are well combined to achieve better performance.An adaptive disturbance factor and a new genetic operator are incorporated into the improved BBPSO.An effective constraint handing mechanism is introduced to solve complicated equality and inequality constraints.The proposed algorithm shows good performance to solve the DED problem.

@&#KEYPHRASES@&#
Dynamic economic dispatch,Particle swarm optimization,Disturbance factor,Directionally chaotic search,Constraint handling,

@&#ABSTRACT@&#
This paper presents an efficient hybrid particle swarm optimization algorithm to solve dynamic economic dispatch problems with valve-point effects, by integrating an improved bare-bones particle swarm optimization (BBPSO) with a local searcher called directionally chaotic search (DCS). The improved BBPSO is designed as a basic level search, which can give a good direction to optimal regions, while DCS is used as a fine-tuning operator to locate optimal solution. And an adaptive disturbance factor and a new genetic operator are also incorporated into the improved BBPSO to enhance its search capability. Moreover, a heuristic handing mechanism for constraints is introduced to modify infeasible particles. Finally, the proposed algorithm is applied to the 5-, 10-, 30-unit-test power systems and several numerical functions, and a comparative study is carried out with other existing methods. Results clarify the significance of the proposed algorithm and verify its performance.

@&#INTRODUCTION@&#
Dynamic economic dispatch (DED) with valve-point effects is one of the most important optimization issues in power system operations. It is referred to determine the optimal combination of power outputs of all generators over the entire scheduling period so as to minimize the total cost of fuel, while satisfying the unit and system constraints and ramp-rate constraint [1]. Traditionally, the cost function for each generator has been approximately represented by a single quadratic function, but the dynamic connections among the system state variables during optimization interval were ignored. This would often lead inaccuracy to the dispatch result of operation in real. To overcome this difficulty, DED is implemented which takes into account the dynamic costs involved in changing from one-generation level to the other. Mathematically, the DED problem with valve-point effects can be categorized as a dynamic nonlinear optimization problem with non-smooth and non-convex characteristics subjected to various equality and inequality constraints, which makes a challenge to find the global optimal solutions.In the past decades, lots of optimization methods including classical and heuristic algorithms were applied to solve the DED problem with valve-point effects. Classical methods include gradient projection algorithm (GPA) [2], linear programming (LP) [3], Lagrange relaxation (LR) [4], dynamic programming (DP) [5] and quadratic programming [6], etc. However, most of those methods have often failed to find optimal solutions due to the nonlinear and non-convex characteristics of generators.With rapid development of heuristic search techniques, over the past few years many heuristic search-based methods were applied to solve this problem, such as simulated annealing (SA) [7], Hopfield neural networks (HNN) [8], artificial bee colony algorithm [9], differential evolution algorithm (DE) [10,11], artificial immune system [12], evolutionary programming (EP) [13], genetic algorithm (GA) [14], Tabu search (TS) [15], pattern search [16], frog leaping algorithm [17], bacterial foraging algorithm [18] and various hybrid algorithms [19,20]. Recently, Mohammadi-ivatloo et al. summarized those heuristic algorithms for solving the DED problem in detail, and proposed a new and effective method by improving the imperialist competitive algorithm (ICA) [21]. Results on optimizing DED test cases show that ICA also is a high competitive technology.Particle swarm optimization (PSO) is one of the modern heuristic algorithms suitable to solve large-scale, non-convex optimization problems [22]. Due to advantages such as simplicity, fast convergence and population-based feature, PSO has become a favorable technique to tackle static economic dispatch problems [23–27]. However, when tackling the DED problem with value-point effects which comprises many local optima and constraints, it lacks the ability if finding globally optimal solutions due to the drawbacks such as local optimal trapping, insufficient capability to find nearby extreme points [22]. To this end, Victoire and Ebenezer adopted a sequential quadratic programming (SQP) as a fine-tuning technique to improve the exploitation capability of PSO [28]. Yuan et al. developed a feasibility-based rule and heuristic strategies with a priority list to handle constraints [29]. Wang et al. proposed an improved PSO for the DED problem, by employing a chaotic mutation to increase the exploration capability of PSO, and adopting an enhanced heuristic strategy to handle constraints [30]. Niknam et al. proposed an enhanced adaptive PSO algorithm, by employing a mutation technique to prevent premature phenomena, and using an approach based on fuzzy IF/THEN rules to adjust the inertia weight factor dynamically [31]. Bahmani-Firouzi et al. extended the dynamic economic emission dispatch problem by incorporating wind power plant, then proposed an adaptive multi-objective PSO algorithm to obtain its best expected solutions [32].In this paper, an improved bare-bones particle swarm optimization (BBPSO) is proposed to solve the DED problem with value-point effects. BBPSO is first introduced by Kennedy [33]. Differing from the traditional PSO, BBPSO is control parameter-free, it does not require fine tuning on control parameters such as inertia weight and acceleration coefficients in order to achieve a good performance of algorithm. Although this algorithm deleted such control parameters, it has shown good performance on solving optimization problems in different areas such as integer programming problems [34], unsupervised image classification [35]. BBPSO has also been successfully applied to the static multi-objective economic dispatch problem [25]. Since the ramp constraints of each generator are dynamically changed in every interval, that method in [25] is not appropriate to the DED problem. For all we know, up to now there has no discussion in the existing literature about extending BBPSO to tackle the DED problem with valve-point effects.Compared with the previously BBPSO algorithm, the improved algorithm we proposed has several improvements as follows:(1)An adaptive disturbance factor is incorporated into the BBPSO algorithm to update the particles’ positions. Based on this operator, those stagnant/premature particles will obtain again a chance to fly new search areas.A new genetic operator, by integrating the mutation and the crossover of genetic algorithm, is proposed to improve the particles’ diversity.A heuristic handing mechanism of constraints is introduced to modify infeasible particles produced by the BBPSO algorithm. Based on this operator, the degree that an infeasible particle violates constraints can be reduced fast, and that particle even is converted into a feasible one at once.Moreover, a dynamic strategy is designed to adjust the value of penalty parameter. In this paper, the penalty function method is used to deal with the inequality constraint (i.e., the demand-supply balance of DED). At the initial phase of BBPSO, a small penalty parameter is assigned to increase the breeding chance of part infeasible particles, which have high fitness; at the end phase, a large value is assigned to ensure that all the particles satisfy constraints.The remainder of the paper is organized as follows. Section 2 reviews related works of BBPSO. Section 3 describes the DED problem. The proposed method is shown in Section 4. The numerical examples are given in Sections 5 and 6. Finally, conclusions are drawn in Section 7.PSO is a population-based search algorithm, which searches in parallel using a swarm of particles. In the swarm, each particle represents a potential solution of the optimization problem. Supposing that at the k-th iteration, the position and the velocity of the i-th particle in the swarm areXik=(xi,1k,xi,2k,…,xi,nk)andVik=(vi,1k,vi,2k,…,vi,nk), respectively, its new position and velocity at the (k+1)-th iteration will be calculated by using the following formulas:(1)vi,jk+1=w⋅vi,jk+c1⋅r1⋅(pbesti,jk−xi,jk)+c2⋅r2⋅(gbestjk−xi,jk)(2)xi,jk+1=xi,jk+vi,jk+1wherePbestik=(pbesti,1k,pbesti,2k,…,pbesti,nk), called the local leader or the personal best position (Pbest), represents the best position found by the i-th particle itself so far;Gbestk=(gbest1k,gbest2k,…,gbestnk), called the global leader or the global best position (Gbest), represents the global best position found by neighbors of this particle so far. Acceleration coefficients c1 and c2 are nonnegative constants, which control the influence of Pbest and Gbest on the search process; and w is the inertia weight to control the exploration capability of particles in the search space; r1 and r2 are two random numbers within [0,1].BBPSO was proposed by Kennedy in 2003 [33]. Differing from the traditional PSO, BBPSO does not use the particle velocity, but use a Gaussian sampling based on Pbest and Gbest to update the particles’ positions:(3)xi,jk+1=Gpbesti,jk+gbestjk2,|pbesti,jk−gbestjk|Based on formula (3), the position of each particle is randomly generated by the Gaussian distribution with Pbest and Gbest.Kennedy also proposed an alternative of BBPSO, referred to as BBExp [33], where formula (3) is replaced by(4)xi,jk+1=Gpbesti,jk+gbestjk2,|pbesti,jk−gbestjk|,U(0,1)<0.5pbesti,jkotherwiseBased on the above formula, there is 50% chance that the j-th dimension of a particle changes to that of the corresponding personal best position. Hence BBExp biases toward exploiting its personal best positions [36]. Pan et al. demonstrated that BBPSO can be deduced from the traditional PSO [37].Comparing with the traditional PSO, BBPSO is obviously control parameter-free and more compact. So it is natural to apply BBPSO to some real optimization problems. Successful examples include the integer programming [34], the unsupervised image classification [35], and the static multi-objective economic dispatch problem [25]. However, there has no discussion in the existing literature about extending BBPSO to tackle the DED problem with valve-point effects.The DED problem with valve-point effects is to minimize the total cost of fuel by determining the optimal combination of outputs of all generators over the whole dispatch period, while satisfying all kinds of physical and operational constraints. In this section we will discuss the mathematical model in detail.Considering a power system with N generators, the cost of fuel of generator j is represented by a superposition of quadratic formula and sinusoidal function. The objective of a classical DED problem is to minimize the total cost of fuel of all N generators over the given dispatch period, and described as follows [11,12]:(5)minFT=∑t=1T∑j=1Nfj(pj,t)(6)fj(pj,t)=aj+bpj,tj+cjpj,t2+|ejsin(hj(pj,min−pj,t))|where FTis the total cost of fuel or generating cost ($); N is the number of generators; T is the number of intervals in the scheduling period; pi,jis the power output of the j-th generator during subinterval t; fj() is the fuel cost of the j-th generator; aj, bjandcjare the cost coefficients of the j-th generator; ejandhjare the valve-point effect coefficients of the j-th generator; pj,maxandpj,min are the lower and upper limits of the j-th generator.During each subinterval t, the total power generation must cover the total demand pD,tand the power loss pL,tin transmission lines, namely,(7)∑j=1Npj,t=pD,t+pL,t,t=1,2,…,T.where the transmission losses pL,tis usually determined by Kron's loss function [38]:(8)pL,t=∑j=1N∑j′=1Npj,tBj,j′pj′,t+∑j=1NB0,jpj,t+B0,0whereBj,j′is the (j, j′)-th element of the loss coefficient square matrix of size N, B0,jis the j-th element of the loss coefficient vector, B0,0 is the loss coefficient constant. The representation using B-coefficients is suitable for interpretation of the real power system losses under certain conditions. If the actual operating conditions are close to the base case, where B-constants were computed, then the B-coefficients method should compute the system losses with reasonably high accuracy. In practice, large systems are often represented using just one set of loss coefficients which are sufficiently accurate throughout the daily variations of load on the system [38].For stable operation, the power output of each generator is bounded by the lower and the upper limits as follows:(9)pj,min≤pj,t≤pj,max,j=1,2,…,N,t=1,2,…,TTo avoid undue thermal stresses on the boiler and the combustion equipments, the actual operating range of each generator is restricted by its corresponding ramp rate limits. The ramp-up and ramp-down constraints for each generator can be written as follows:(10)pj,t−pj,t−1≤URjpj,t−1−pj,t≤DRjj=1,2,…,N,t=2,…,Twhere URjand DRjare the up-ramp and the down-ramp limits of the j-th generator, respectively.Considering the ramp rate and the power output limits at the same time, formulas (9) and (10) can be rewritten as the following inequality constraint:(11)pj,min≤pj,t≤pj,max,t=1max(pj,min,pj,t−1−DRj)≤pj,t≤min(pj,max,pj,t−1+URj)otherwiseIn this section, procedures of the proposed algorithm for solving the DED problem with valve-point effects are described in detail. Several effective operators will be given to enhance the search capability of the proposed algorithm. Moreover, a heuristic handing mechanism for constraints will be introduced to modify infeasible particles. The process of the proposed algorithm can be summarized as follows.In this paper, the power output of each generator over the schedule period is taken as the encoded element, and multiple elements form a particle representing a candidate solution of the DED problem. For the DED problem with N generators and T intervals, a particle X is described as follows:(12)X=x1,1x2,1⋯xN,1x1,2x2,2⋯xN,2⋮⋮⋮⋮x1,Tx2,T⋯xN,T=p1,1p2,1⋯pN,1p1,2p2,2⋯pN,2⋮⋮⋮⋮p1,Tp2,T⋯pN,Twhere pi,tis the real power output of generator i at time interval t.Inspired by the work [11], this paper adopts a fitness function with penalty item to deal with infeasible particles:(13)F(X)=1FT(1+(λ/T)∑t=1T|pD,t+pL,t−∑i=1Nxi,t|)where FTis the objective value generated by formula (5), pD,tis the total load at time interval t; λ is a weight coefficient to control the influence of constraints on the evolution process. It can be seen that the smaller the violation degree of a particle to the demand-supply constraint is, the larger the fitness value of this particle is.Analyzing the fitness function above, it can be observed that the parameter λ plays an important effect on the evolutionary process of particles. On the one hand, a large λ can make feasible particles obtain high breeding chance, but easily accelerates the loss of the swarm diversity. On the other hand, a small value can give infeasible particles more breeding chance. Sometime, a part of infeasible individuals with high fitness maybe have located near global optimum. Although they are infeasible in current iteration, in next iterations they may generate feasible offspring with high fitness. Recent researches have realized the advantage of using infeasible solutions to search for global optimum [39].In order to deal with the dilemma above, a dynamic strategy is designed to adjust the parameter λ, as follows:(14)λ=0.001+0.11+e(K−2k)/0.1kwhere K is the maximal iteration times of the proposed algorithm, k is the current iteration times. By using this strategy, the value of λ will increase from 0.001 to 0.1 with the increasing of iteration times. At the beginning of our algorithm, a smaller λ will give those infeasible particles with high fitness more breeding chances; in the end, a larger λ will make the particles satisfy various constraints. A detailed discussion about the setting of λ will be shown in Section 5.1.Although BBPSO has been found to be competitive, it still suffers from the disadvantage of premature convergence. It is observed from Eqs. (3) and (4) that, if the Pbest of a particle happens to be close or equal to Gbest in the evolution process, obviously, this particle will stop updating at once because the variance of Gaussian distribution becomes 0. Furthermore, if most particles among the swarm stop updating prematurely, BBPSO will converge to a false global optimum with high probability.In order to make BBPSO more effective, a new variant of BBPSO based on the adaptive disturbance, called BBV2, is proposed in this paper. Considering the i-th particle among the swarm,Xik=(xj,tk)N×T, the modified update method is described as follows:(15)xj,tk+1=Gpbestj,tk+gbestj,tk2,|pbestj,tk−gbestj,tk|+δ,U(0,1)<0.5xj,tkotherwise(16)δ=r3×URj+DRj2×eF(Xik)−F(Gbestk)where r3 is a random number within [0,1], URjand DRjare the up-ramp and the down-ramp limits of the j-th generator, respectively.Comparing with formula (3), in formula (15) a disturbance δ is added to the variance of Gaussian distribution. Moreover, instead of an arbitrary constant, the adaptive approach is adopted to adjust the value of δ based on the similarity between particles and Gbest. Herein, the difference on the fitness space is used to measure the similarity between solutions, because of their small computation cost.It can be observed that the smaller the difference between a particle and its Gbest is, the higher the disturbance factor δ is. When a particle has the same fitness as Gbest, this particle will be affected by the maximal magnitude 0.5(UR+DR). At this moment, the disturbance item, like a re-initialization operator, may prevent our algorithm from trapping into local optima. With the decreasing of the similarity between the particle and Gbest, effect of the disturbance item will decrease, which is reflected by the fact that the disturbance range shrinks. At this moment, the disturbance item, like a local perturbation factor, may put a local exploitation on the particle. Therefore, the use of BBV2 is able to well balance the exploration and exploitation capabilities of particles.In order to increase the particles’ diversity further, this section introduces a new genetic operator by integrating the mutation and crossover operators, called the M+C operator. In each iteration, each particle in the swarm will be modified with the probability pe, where peis used to control the recombination speed among particles. Taking the i-th particles at the k-th iterationXikas an example, the details steps of M+C are showed as follows.Step 1Initialize two empty matrixes Z and Y.Select a Pbest position at random, denoted byPbestlk, and assign the particleXikand Pbest to the matrixes Z and Y, respectively, i.e.,(17)Z←Xik,Y←Pbestlk,l=rand(1,|S|),Modify the particleXikbased on the positionPbestlk. In this process, the rows ofXikis checked in turn from 1 to T. If the value of 1/T is larger than a random number rand(0,1), then the current row of the particle will be replaced by thePbestlkor/and G(0, 1)×rang. Taking the j-th row of the particle as an example, the update equation is as follows:(18)Zj,q=Yj,q+G(0,1)×rang,rand(0,1)>0.5Yj,qotherwiserang=0.5×min{URq,DRq},q=1,2,…,NTake the position Z as the new position ofXik, i.e.,Xik=Z.It can be seen by Eq. (18) that, when G(0, 1) takes a small value, like the crossover operator in an evolutionary algorithm, crossing with the Pbestlcan help a particle to construct good schemas rapidly. However, when G(0, 1) takes a big value, like the mutation operator, G(0, 1)×rang can help a particle escape from local optima.Due to easy implementation and ergodicity, chaos has been a novel optimization technique and some simulation results reveal that chaotic local search is always able to increase the exploitation capability of an algorithm and enhance its convergence property [1,40]. In this paper, a novel chaotic operator, called the directionally chaotic search (DCS), is adopted to increase the exploitation capability of our algorithm. In this paper, the improved BBPSO algorithm is employed to give a good direction to optimal regions, while DCS is used as a fine tuning operator to locate globally optima.Differing from most chaotic search methods, this operator only re-initializes a fixed element of Gbest by chaotic operator. At each iteration, an element of Gbest is selected randomly, and then re-initialized by chaos until c_num new solutions are generated. If a new solution has better fitness than Gbest, it will become the new Gbest. The detail steps of DCS are shown as follows.Step 1: Select an element of Gbest at random, denoted by Gbest(n1, t1), n1=rand(1, N), t1=rand(1, T).Step 2: Generate c_num new solutions by chaos operator. For the i-th new solutionNewpi,Step 2.1: Generate a chaotic variable,(19)βi=μβi−1(1−βi−1),βi≠0.25,0.5,0.75,β0=rand(0,1).Step 2.2: Set the initial position ofNewpias the position Gbest, i.e.,Newpi=Gbest;Step 2.3: Update the (n1, t1)-th element ofNewpiby the following equation:(20)Newpi(n1,t1)=Gbest(n1−1,t1)+DRt1×(2×βi−1),n1≠1pt1,min+URt1×(2×βi−1)elseStep 2.4: Modify Newpito satisfy the constraints by the method in Section 4.6.Step 3: Update the Gbest based on the c_num new solutions. If a new solution has better fitness than Gbest, it will become the new Gbest.Obviously, the value of c_num determines the search capability of DCS. A bigger value of c_num means a higher probability to find global optima, as well as a bigger computational cost of DCS.During the evolutionary process above, not every particle can satisfy all the constraints of DED. In this section, we focus mainly on introducing a heuristic strategy to modify infeasible particles. Taking a particle X as an example, the proposed strategy is described as follows:Step 1: Set the current interval t=1.Step 2: Calculate the up and the down limits of each generator at interval t by (21):(21)Pi,tdow=pi,minift=1max(pi,min,xi,t−1−DRi)otherwisePi,tup=pi,maxift=1min(pi,max,xi,t−1+URi)otherwisei=1,2,…,Nt=1,2,…,TStep 3: Adjust the output of each generator at current interval to satisfy Eqs. (9) and (10) by (22)(22)xi,t=Pi,tdow,xi,t≤Pi,tdowPi,tup,xi,t≥Pi,tupxi,totherwiseStep 4: Tackle the demand-supply constraint by the following steps:Step 4.1: Set iter=1.Step 4.2: Calculate the transmission network loss in current interval (i.e., pL,t) using Eq. (8).Step 4.3: Calculate the difference value, Dif, by subtracting the total demand in current interval (i.e., pD,t+pL,t) from∑i=1Nxi,t. If the absolute value of Dif is larger than a small value ɛ(≥0), go to Step 4.4; otherwise, set t=t+1, and go to Step 2.Step 4.4: Select a generator unit h from N generators at random, and reset its output at current interval as(23)xh,t=xh,t−DifStep 4.5: Adjust the output xh,tto the feasible horizon by (22).Step 4.6: Set iter=iter+1, h=mod(h, N)+1. If iter is larger than a fixed integer it_max, then set t=t+1 and go to Step 2; otherwise, go to Step 4.2, where mod(h,N) returns the remainder when N is divided by h.Step 5: Ift=T, terminate the above process and output the particles’ positions.In these steps above, a particle violating constraints is modified by two phases. In the first phase, the output of each generator is adjusted by formulas (21) and (22) to satisfy the inequality constraint of the DED problem. Based on the results of the first phase, in the second phase, the demand-supply constraint is treated with. For the output at interval t, (x1,t, x2,t, …, xN,t), we first check its feasibility by calculating the difference Dif between pD,t+pL,tand∑i=1Nxi,t, IfDifis greater than a small value ɛ (we set ɛ=10−3 in this paper), then the values of (x1,t, x2,t, …, xN,t) are modified in turn from the h-th dimension, until they satisfy the demand-supply constraint or reach the limit it_max, where the parameter it_max is set not too large. A large it_max can guarantee that all particles satisfy the inequality constraints of the DED problem, but much calculation cost is needed to run the corresponding process.The proposed hybrid algorithm is applied to the DED problem with valve-point effects, its steps are summarized as follows:Setp 1: Initialize the positions of all particles in the swarm at random, while satisfying various constraints;Step 2: Evaluate all particles in the swarm by using the formula (13);Step 3: Update Pbest and Gbest for each particle by using the traditional method [33]. Note that, the global topology among particles is adopted to update Gbest in this paper.Step 4: Update the position of each particle by the method in Section 4.3;Step 5: Implement the adaptive M+C operator introduced in Section 4.4;Step 6: Modify the particles to satisfy the constraints by the method in Section 4.6;Step 7: Apply the local search operator DCS in Section 4.5 to improve the global best position (Gbest);Step 8: Stop the proposed algorithm while the maximum iteration or the precision of solution has reached; otherwise, go to step 2.

@&#CONCLUSIONS@&#
