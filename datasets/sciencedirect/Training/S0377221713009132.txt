@&#MAIN-TITLE@&#
Note on “Inverse minimum cost flow problems under the weighted Hamming distance”

@&#HIGHLIGHTS@&#
The inverse minimum cost flow problem under the Hamming distance is considered.A counter example shows that algorithm proposed by Jiang et al. is not correct.A strongly polynomial-time algorithm is proposed to solve the inverse problem.

@&#KEYPHRASES@&#
Combinatorial optimization,Minimum cost flow problem,Inverse problem,Hamming distance,

@&#ABSTRACT@&#
Jiang et al. proposed an algorithm to solve the inverse minimum cost flow problems under the bottleneck-type weighted Hamming distance [Y. Jiang, L. Liu, B. Wuc, E. Yao, Inverse minimum cost flow problems under the weighted Hamming distance, European Journal of Operational Research 207 (2010) 50–54]. In this note, it is shown that their proposed algorithm does not solve correctly the inverse problem in the general case due to some incorrect results in that article. Then, a new algorithm is proposed to solve the inverse problem in strongly polynomial time. The algorithm uses the linear search technique and solves a shortest path problem in each iteration.

@&#INTRODUCTION@&#
The networkN(V,A,u,c)is supposed whereV={1,2,…,n}is the set of nodes, A is the set of m arcs,uis the capacity vector for arcs andcis the cost vector for arcs. Each nodei∈Vhas an associated supply or demand of valueb(i). The well-known minimum cost flow (MCF) problem is formulated as follows (Ahuja, Magnanti, & Orlin, 1993):(1)min∑(i,j)∈Acijxij,∑(i,j)∈A(i)xij-∑(j,i)∈A′(i)xji=b(i)∀i∈N,0⩽xij⩽uij∀(i,j)∈A,whereA(i)andA′(i)are respectively the sets of arcs emanating from and arriving at node i. Assume thatx0is a feasible flow to the problem (1). The corresponding inverse problem is to modify components of the cost vectorcas little as possible so thatx0becomes optimal to the problem (1). The modifications can be measured by various distances. Jiang, Liu, Wuc, and Yao (2010) considered the inverse minimum cost flow (IMCF) problem under the sum-type and the bottleneck-type weighted Hamming distance. In the sum-type case, they show that a special case of the inverse problem reduces to the weighted feedback arc set problem to be APX-hard. In the bottleneck-type case, they presented an algorithm to solve the inverse problem. In this note, we give a counter example to show that their algorithm fails for solving the IMCF problem in more cases. We show that this problem arises due to some incorrect results presented in that article. It is also mentioned that a restricted version of the IMCF problem can be solved correctly by this algorithm. Finally, we propose an algorithm based on the reduced cost optimality conditions to solve the problem in the general case. Our proposed algorithm solves a shortest path problem on an auxiliary network in each iteration and runs in strongly polynomial time.In this section, the formulation of the IMCF problem is given and the algorithm proposed by Jiang et al. (2010) is reviewed.For a feasible flowx0of the MCF problem, its residual networkN′(V,A′,u′,c′)can be constructed by the following algorithm.Algorithm 1Ahuja et al., 1993Step 1:The node set is still V.Step 2:If(i,j)∈Aandxij0<uij, then(i,j)∈A′,cij′=cijanduij′=uij-xij0.Step 3:If(i,j)∈Aandxij0>0then(j,i)∈A′,cji′=-cijanduji′=xij0.We denote the arc sets created by steps 2 and 3 asA(c)1andA(c)2, respectively.For each arc(i,j)∈A, the associated reduced cost is defined ascijπ=cij-πi+πjwhereπi,i∈V, is the ith variable of the corresponding dual problem. The following lemmas give some optimality conditions for a given feasible solution.Lemma 2.1Negative cycle optimality conditions Ahuja et al., 1993A feasible flowx0to the problem(1)is optimal if and only if the corresponding residual networkN′(V,A′,u′,c′)does not contain any negative cost cycle.A feasible flowx0is optimal to the problem(1)if and only if some dual variables satisfy the conditionscijπ⩾0,∀(i,j)∈A′.Ifx0is optimal to the problem(1), thencijπ=0for each(i,j)∈Awith0<xij0<uij.From Lemma 2.1, the IMCF problem under the bottleneck-type weighted Hamming distance is formulated as follows:(2)minmax(i,j)∈AwijH(dij,cij),The residual network respect tox0andN(V,A,u,d)contains no negative cycle,-pij⩽dij-cij⩽+qij∀(i,j)∈A,where for each(i,j)∈A,wijis a penalty associated with modifyingcijtodij,pijandqijare respectively given bounds for decreasing and increasing cost coefficientcij, the valueH(dij,cij)equals to 1 ifdij≠cijand otherwise,H(dij,cij)=0. Jiang et al. (2010) proposed the following algorithm to solve the problem (2).Algorithm 2Step 1:Run Algorithm 1 to construct the residual networkN′(V,A′,u′,c′)respect toN(V,A,u,c)andx0. LetW=Ω=∅; and go to Step 2.Step 2:Choose a negative cost cycle C of the current residual network. If no negative cycle exists, then go to Step 5. Otherwise go to Step 3.Step 3:IfC⧹Ω=∅, then go to Step 6. Otherwise go to Step 4.Step 4:Find an arc(x,y)∈C⧹Ωthat satisfies(3)wxy=min{wij:(i,j)∈C⧹Ω}and update the current network and the corresponding residual network as follows:If(x,y)∈A(c)1, thencxy=cxy+qxy,cxy′=cxy,W=W∪{wxy}.If(x,y)∈A(c)2, thencyx=cyx-pyx,cxy′=-cyx,W=W∪{wyx}.Ω=Ω∪{(x,y)}.Go back to Step 2.Step 5:Stop and output thatx0is the minimum cost flow of the current network, the optimal solution of the problem (2) is the cost vector of the current network and the associated optimal objective value ismax{wij:wij∈W}.Step 6:Stop and output that the problem (2) has no feasible solution.We shall mention that there exists a little typing error in Algorithm 2 (Jiang et al., 2010). In Step 4, they setcyx′=-cyxwhen(x,y)∈A(c)2. This can be corrected tocxy′=-cyxsince(x,y)is in the residual network and not(y,x).In this section, we give a counter example to show that Algorithm 2 does not solve the problem (2) in the general cases. Then, we state some reasons of the inaccuracy of the algorithm.Example 3.1The network given in Fig. 1(a) is considered. For each(i,j)∈A, the penaltywijis also given in Fig. 1(a). Assume thatpij=qij=10for each(i,j)∈A. By using Algorithm 1, we construct the residual network respect to this network and feasible solutionx14=1andxij=0for all(i,j)∈A⧹{(1,4)}(see Fig. 1(b)). It is obvious that the residual network contains three negative cycle: 1–4–3–1, 1–2–4–1 and 1–2–4–3–1 are denoted byC1,C2andC3, respectively. It is easy to check an optimal solution of the problem (2) isd14∗=5,d24∗=c24+q24=8anddij∗=cijfor every(i,j)∈A⧹{(1,4),(2,4)}with the objective valuew24=max{w14,w24}=2.Now, let us to implement Algorithm 2 on this network. We initializeΩ=∅,W=∅. Suppose that the algorithm identifiesC1in the first iteration. Sincew14=min{wij:(i,j)∈C1⧹Ω}and(1,4)∈A(c)1, the algorithm cancels this negative cycle by updatingc14=c14+q14=13. Consequently,c14′=+13andc41′=-13in the new residual network. Also,W={w14}andΩ={(1,4)}. It is easy to see that the cyclesC2andC3has negative costs equal to-17and-8in the new residual network, respectively. In the second iteration, suppose that the cycleC2is identified by the algorithm. The algorithm selects arc(4,1)∈(C2⧹Ω)∩A(c)2satisfying (3). It updatesc14=c14-p14=-7andΩ={(1,4),(4,1)}. Consequently, the corresponding residual network is updated with settingc14′=-7andc41′=+7. In the third iteration, suppose that the algorithm identifiesC1to be created again with cost-11. The algorithm chooses arc(4,3)∈(C1⧹Ω)∩A(c)1and updatesc43=c43+q43=8because(1,4)∈Ωcannot be selected. Now, the algorithm terminates with the objective valuew43=max{w14,w43}=4since the new residual network does not contains any negative cycle. Therefore, the algorithm does not solve this instance, correctly.By using directly two following propositions, Jiang et al. (2010) proposed Algorithm 2. We show that these propositions are also incorrect.Proposition 3.2Jiang et al., 2010, p. 53, Theorem 3.1If the problem(2)has a feasible solution, then there exists an optimal solutiond∗such that(a)dij∗⩾cijfor(i,j)∈A(c)1.dij∗⩽cijfor(j,i)∈A(c)2.(Jiang et al., 2010, p. 53, Theorem 3.2)If the problem(2)has a feasible solution, then there exists an optimal solution d∗such that(a)If(i,j)∈A(c)1anddij∗≠cij, thendij∗=cij+qij.If(i,j)∈A(c)2anddij∗≠cij, thendij∗=cij-pij.Jiang et al. (2010) have not presented any proof for Proposition 3.2 and they mentioned that the proof is similar to the proof of Theorem 2.1 (Jiang et al., 2010, p. 51). But, those are two completely different results. In Jiang et al. (2010)’s proof of Proposition 3.3, the situation that both(i,j)∈A(c)1and(j,i)∈A(c)2for some(i,j)∈Ais not considered. Let us show that the results presented in Proposition 3.2 and 3.3 are invalid by exemplifying this situation. By using Propositions 3.2 or 3.3, there exists an optimal solutiondˆto the problem presented in Example 3.1 so thatdˆ14=c14because of both(1,4)∈A(c)1and(4,1)∈A(c)2. Since for the feasibilitydˆ, the residual network respect tox0andN(V,A,u,dˆ)contains no negative cycle, it follows that the relationdˆij≠cijmust hold at least for two arcs in the network to cancel three negative cyclesC1,C2andC3. Due to this fact anddˆ14=c14, the objective value fordˆwill be greater than 2 that this is a contradiction. Therefore, Propositions 3.2 and 3.3 cannot valid in the general case. It is easy to verify that the results obtained from these Propositions are valid when the situation that both(i,j)∈A(c)1and(j,i)∈A(c)2does not occur for some(i,j)∈A. Therefore, we can state the following comment.Remark 3.4Propositions 3.2 and 3.3 are correct and Algorithm 2 finds an optimal solution to the problem (2) only when the given feasible solutionx0is as follows:xij0=uijfor some arcs(i,j)∈A,0otherwise,∀(i,j)∈A.Based on Remark 3.4, Algorithm 2 can only solve the special case of the problem (2) correctly.Let us discuss more about Algorithm 2 and answer to the question “is it possible that a little modification ofAlgorithm 2can solve the problem(2)correctely?”. Assume that C is a negative cycle in the residual network respect to the networkN(V,A,u,c)and a given feasible solutionx0. Suppose that we want to modify the costclkfor some(l,k)∈Cto remove the negative cycle C from the residual network. We consider three following situations:•(l,k)∈A(c)1and(k,l)∉A(c)2: In this case, we can resetclk=clk+qlkto increase cost of the cycle C byqlk.(l,k)∈A(c)2and(k,l)∉A(c)1: It is always possible to increase cost of the cycle C by resettingclk=clk-plk.Both(l,k)∈A(c)1and(k,l)∈A(c)2: In this case, we can always increase the cost of C byplkorqlkby modifyingclk=clk-plkorclk=clk+qlk, respectively. This increment is associated with the directions of the cycle C and arc(l,k). But if the residual network contains some cycles which have arc(l,k)in the opposite direction, then the modification decreases the cost of the cycles. Consequently, it is possible to construct a new negative cycle in the residual network. In this case, it may be necessary to increase or decreaseclkstrictly byα, such thatα∈(-plk,qlk).Based on the above argument, since Algorithm 2 only restricts attention to one negative cycle in each iteration, it cannot resetclkcorrectly when both(l,k)∈A(c)1and(k,l)∈A(c)2. Hence, a little modification in Algorithm 2 cannot improve it.In this section, we use the reduced cost optimality conditions to propose an algorithm for solving the IMCF problem under the bottleneck weighted Hamming distance. Based on Lemma 2.2, the problem can be formulated as(4)minmax(i,j)∈AwijH(dij,cij),dijπ⩾0∀(i,j)∈A′,-pij⩽dij-cij⩽+qij∀(i,j)∈A,wheredijπ=dij-πi+πjfor all(i,j)∈A′. In this problem,dij’s andπi’s are to be determined.Suppose we have sort the arc penaltieswij’s: letw1⩽w2⩽…⩽wmbe the sorted list of these penalties. The proposed algorithm uses the linear search technique to find the least indexl∈{1,…,m}so that there exists a feasible solution of the problem (4) with the objective valuewl. Suppose thatdis such the feasible solution. Since the objective value ofdis at mostwl, it follows thatdij=cijfor each(i,j)∈Awithwij>wl. But ifwij⩽wlfor some(i,j)∈A, then the componentdijcan be any value in the interval[cij-pij,cij+qij]. Let us to introduce some notations as follows:L={(i,j):xij0=0},U={(i,j):xij0=uij},M={(i,j):0<xij0<uij}.The following result shows that we can restrict our attention to a special form of feasible solutions for finding an optimal solution of the problem (4).Proposition 4.1Ifdis feasible to the problem(4)with the objective valuewl, thend(l)to be defined as(5)dij(l)=cijwij>wl,cij+qijwij⩽wland(i,j)∈L,cij-pijwij⩽wland(i,j)∈U,dijwij⩽wland(i,j)∈M,is also feasible with the same objective valuewl.It is easy to see thatd(l)satisfies the bound constraints-pij⩽dij-cij⩽qijfor each(i,j)∈A. Thus, it is sufficient to show(d(l))ijπ=dij(l)-πi+πj⩾0for each(i,j)∈A. We consider the following cases:•If(i,j)∈M∪{(i,j):wij>wl}, then we havedij(l)=dijand equivalently(d(l))ijπ=dijπ⩾0.If(i,j)∈Lwithwij⩽wl, then the relationdijl=cij+qij⩾dijimplies that(d(l))ijπ⩾dijπ⩾0.If(i,j)∈Uwithwij⩽wl, then sincedijl=cij-pij⩽dij, it follows that(d(l))jiπ⩾djiπ⩾0for arc(j,i)in the residual network.Based on the definition ofd(l), the objective value ofd(l)iswl. This completes the proof.□We now state how the vectord(l)can be determined without having the feasible solutiond. By using Lemma 2.3,(d(l))ijπ=0for each(i,j)∈M. Then, we can setdij(l)=πi-πjfor each(i,j)∈M. Consequently, we find a feasible solutionπof the dual MCF problem instead of finding the feasible solutiondof the problem (4) to constructd(l). From the reduced cost optimality conditions, the vectord(l)is feasible to the problem (4) if and only if the following system has at least a solution:πi-πj⩽cij+qij∀(i,j)∈Lwithwij⩽wl,πi-πj⩽cij∀(i,j)∈Lwithwij>wl,πi-πj⩾cij-pij∀(i,j)∈Uwithwij⩽wl,πi-πj⩾cij∀(i,j)∈Uwithwij>wl,πi-πj=dij(l)∀(i,j)∈Mwithwij⩽wl,πi-πj=cij∀(i,j)∈Mwithwij>wl,dij(l)⩽cij+qij∀(i,j)∈Mwithwij⩽wl,dij(l)⩾cij-pij∀(i,j)∈Mwithwij⩽wl,whereπi’s anddij(l)’s, for each(i,j)∈Mwithwij⩽wl, are the unknowns to be determined. We can eliminate the unknownsdij(l)by using the equalitydij(l)=πi-πjfor(i,j)∈Mwithwij⩽wl. Therefore, the system is converted intoπi-πj⩽cij+qij∀(i,j)∈Lwithwij⩽wl,πi-πj⩽cij∀(i,j)∈Lwithwij>wl,πi-πj⩾cij-pij∀(i,j)∈Uwithwij⩽wl,πi-πj⩾cij∀(i,j)∈Uwithwij>wl,πi-πj=cij∀(i,j)∈Mwithwij>wl,πi-πj⩽cij+qij∀(i,j)∈Mwithwij⩽wl,πi-πj⩾cij-pij∀(i,j)∈Mwithwij⩽wl,or equivalently,(6)πi-πj⩽cij+qij∀(i,j)∈Lwithwij⩽wl,πi-πj⩽cij∀(i,j)∈Lwithwij>wl,πj-πi⩽-cij+pij∀(i,j)∈Uwithwij⩽wl,πj-πi⩽-cij∀(i,j)∈Uwithwij>wl,πi-πj⩽cij∀(i,j)∈Mwithwij>wl,πj-πi⩽-cij∀(i,j)∈Mwithwij>wl,πi-πj⩽cij+qij∀(i,j)∈Mwithwij⩽wl,πj-πi⩽-cij+pij∀(i,j)∈Mwithwij⩽wl,The system (6) contains several difference constraints. We introduce an auxiliary networkN‾=(V‾,A‾,d¯)corresponding to the system (6). The networkN‾=(V‾,A‾,d¯)has n nodes corresponding to the n variablesπi,i∈V, and an arc corresponding to each difference constraint with arc length equal to the right hand side of the corresponding constraint. We add a source node s to the network together with zero-length arcs(s,i),i∈V‾⧹{s}. The system (6) can be solved by finding shortest paths from s to the other nodes on the auxiliary networkN‾(Ahuja et al., 1993). If the auxiliary network contains any negative cycle, then the system (6) has no solution and equivalently, the feasible solutiond(l)does not exist. But if the auxiliary network contains no negative cycle, thenπis a solution of the system (6) whereπi,i∈V‾, equals to the shortest path distance of node i from the source. We can use the FIFO label-correcting algorithm to obtain these shortest path distances or to detect the presence of negative cycles in the residual network (Ahuja et al., 1993).Now, we are ready to state our proposed algorithm formally.Algorithm 3Step 1:Sort the arc penaltieswij’s: letw1⩽w2⩽…⩽wmbe the sorted list of these penalties. Setl=1.Step 2:Construct the auxiliary network corresponding to the system (6) and use the FIFO label-correcting algorithm.Step 3:If the network contains any negative cycle, then setl=l+1and go to Step 4. Otherwise, go to Step 5.Step 4:Ifl>m, then terminate because the problem (4) is infeasible. otherwise, go to Step 2.Step 5:Setπi,i∈N, to the shortest path distance of node i from the source. Compute the vectord(l)defined asdij(l)=cijwij>wl,cij+qijwij⩽wland(i,j)∈L,cij-pijwij⩽wland(i,j)∈U,πi-πjwij⩽wland(i,j)∈M.d(l)is optimal to the problem (4) with the objective valuewl.We now analyze the complexity of Algorithm 3. The number of nodes and arcs of the auxiliary networkN‾areO(n)andO(m), respectively. Since we use the FIFO label-correcting algorithm, each iteration runs inO(mn). On the other hand, the number of iterations is at most m. Therefore, the following result is established.Theorem 4.2Algorithm 3solves the problem(4)inO(m2n)time.Finally, let us give some suggestions to improve the complexity of Algorithm 3:•In Algorithm 3, we use the linear search technique to find the least index l so thatd(l)is feasible. One can use the binary search technique to improve the complexity.Due to the little difference between the auxiliary networks in two consecutive iterations, one can use the sensitivity analysis for solving the shortest path problems in these networks.•In this note, the inverse minimum cost flow problem under the bottleneck-type weighted Hamming distance is considered.This paper focuses on the proposed algorithm presented by Jiang et al. (2010). A counter example is used to show that the algorithm is not correct.It is mentioned that Algorithm 2 solves the problem correctly if the given feasible solutionx0has a special form thatxij0=0orxij0=uijfor each(i,j)∈A.An algorithm based on the linear search technique is presented to solve the inverse problem in the general cases.

@&#CONCLUSIONS@&#
