@&#MAIN-TITLE@&#
The discrete forward–reserve problem – Allocating space, selecting products, and area sizing in forward order picking

@&#HIGHLIGHTS@&#
Existing literature mainly focuses on “fluid models”.We formulate discrete versions of basic and extended forward–reserve problems.We discuss their computational complexity and present suitable solution procedures.We show the basic allocation problem to be solvable in polynomial time.We propose and computationally examine a very effective “repair heuristic”.

@&#KEYPHRASES@&#
Assignment,Logistics,Warehousing,Order picking,Forward–reserve problem,

@&#ABSTRACT@&#
To reduce labor-intensive and costly order picking activities, many distribution centers are subdivided into a forward area and a reserve (or bulk) area. The former is a small area where most popular stock keeping units (SKUs) can conveniently be picked, and the latter is applied for replenishing the forward area and storing SKUs that are not assigned to the forward area at all. Clearly, reducing SKUs stored in forward area enables a more compact forward area (with reduced picking effort) but requires a more frequent replenishment. To tackle this basic trade-off, different versions of forward–reserve problems determine the SKUs to be stored in forward area, the space allocated to each SKU, and the overall size of the forward area. As previous research mainly focuses on simplified problem versions (denoted as fluid models), where the forward area can continuously be subdivided, we investigate discrete forward–reserve problems. Important subproblems are defined and computation complexity is investigated. Furthermore, we experimentally analyze the model gaps between the different fluid models and their discrete counterparts.

@&#INTRODUCTION@&#
Picking highly-demanded stock keeping units (SKUs) directly from bulk storage typically requires removal from deep-lane pallet racks and causes unproductive travel between far-distant picking locations. Thus, especially in high-volume distribution, many warehouses are subdivided into a forward and a reserve area. The forward area serves as a “warehouse within a warehouse” and stores popular SKUs in easy-to-access racks, e.g., gravity flow racks, concentrated in a compact area. The use of a forward area improves order picking efficiency, but requires additional effort for replenishing the forward area from the reserve area (double handling). Clearly, reducing SKUs stored in forward area enables a more compact forward area (with reduced picking effort) but requires a more frequent replenishment. To tackle this basic trade-off, forward–reserve problems have been formulated and modeled to determine the SKUs to be stored in the forward area, the space allocated to each SKU, and the overall size of the forward area.Hackman et al. (1990) were the first that formulated a mathematical model to allocate space in a continuously divisible forward area and proposed a greedy heuristic. Their work motivated the paper of Hackman and Platzman (1990) who proposed a generic discrete model for deciding which SKUs to pick from the automated (forward) area and how much space to allocate on which (forward) storage device to each selected SKU. They also developed a heuristic procedure with a good guaranteed performance whenever each allocation is a small fraction of storage space. Further contributions stem from Frazelle et al. (1994), who extended the model by regarding the size of a forward area as a decision variable, Van den Berg et al. (1998), who optimized unit-load replenishments that take place during busy and idle periods, Bartholdi and Hackman (2008), who analyzed two wide-spread real-world stocking strategies for small parts in a forward area, and Gu et al. (2010), who provided a branch-and-bound algorithm for solving the joint assignment and allocation problem. Except for the contribution of Hackman and Platzman (1990) and Van den Berg et al. (1998), all these studies presuppose the “fluid model”, where a forward area can continuously be partitioned among SKUs. Clearly, this simplifying assumption might be justified if merely an approximate benchmark solution is sought. However, for a detailed stocking plan of the forward area, the fluid model shows some severe drawbacks (Bartholdi and Hackman, 2011):•SKUs can only be stored in discrete units, so that a continuous distribution of space in either case can only be an approximation of reality. This approximation becomes the less accurate the larger an item compared to the size of the shelves.Often the number of units stocked in forward area cannot be increased piece-wise but only in steps of multiple units. For instance, consider a gravity flow rack where each lane is filled with units of a single homogeneous product. In this case, e.g., either 0, 1000 or 2000 units can be stored depending on whether none, one or two lanes (each having a capacity for 1000 units) are allocated to the respective SKU.Finally, some SKUs show sub-additivity with regard to space because they can be stored in a nested fashion. Consider bathtubs where two units occupy only a little more space than a single unit. This coherency cannot be considered within the continuous forward–reserve problem, because here a linear increase of space utilization is presupposed.To avoid these shortcomings, this paper considers the discrete forward–reserve problem. Specifically, we investigate three different problem settings each within two important parameter constellations, so that in total six problem cases are treated. The most basic problem setting is the discrete forward–reserve allocation problem (DFRAP), where the given space of a forward area is to be partitioned among a predetermined set of SKUs (see Section 2). The discrete forward–reserve assignment and allocation problem (DFRAAP) combines the space allocation problem with the assignment problem of selecting the products to be stored in the forward area (see Section 3). Finally, the discrete forward–reserve allocation and sizing problem (DFRASP) treats the allocation problem jointly with the sizing problem, i.e., for a given set of products a forward area of variable size is to be allocated (see Section 4).With regard to the parameter constellations, we differentiate between variable storage modes and equally sized shelves. In the former case, for any product different storage alternatives exist. For instance, SKUs can be stored in small or large boxes, on one or more pallets in shelves of variable size, or in one or more lanes of varying capacity in a gravity flow rack, where each alternative corresponds to a certain storage mode. Each mode is defined by a specific space utilization and the corresponding discrete number of stored product units. Clearly, the confinement to equally sized shelves defines a special case of variable storage modes. Here, the storage mode of each SKU is already defined and the decision reduces to determining the discrete number of equally sized shelves (each storing an identical multiple of units) to be assigned to any product. Typically, standardized racks with equally sized shelves, e.g., identical lanes in a gravity flow rack, are applied in a wide range of distribution centers as they allow for fast and simple re-assignments, i.e., some products that have been stored forward during the last period will be partly or fully replaced by new products within the next period. Furthermore, standardized racks, typically, cause less investment cost.In the following, the DFRAP, the DFRAAP, and the DFRASP are treated in Sections 2, 3, and 4, respectively. In each section both parameter constellations are investigated by defining the respective problem version and either providing a polynomial time solution procedure or provingNP-hardness. Furthermore, in each case we explore the loss in precision of the continuous problem version compared to the discrete case in a comprehensive computational study. Finally, Section 5 concludes the paper.Consider a predefined set P of products (or SKUs) to be stored in a forward area of given size S, where due to the compact size of the forward area the locations of SKUs are assumed to not affect picking efficiency. Each product i∈P can be stored in one of nipossible modes j=1, …, niin the forward area. Associated with each mode j for SKU i is a value aij>0 which gives the (integral) number of units of SKU i that can be stored in mode j. The space required by storing product i in mode j is denoted by wij. Throughout the paper we assume that the storage modes of each product i are labeled so thatwi1<wi2<⋯<wini. According to this, we consider only non-dominated storage modes for each SKU i∈P, i.e.,ai1<⋯<aini.As formulated in the mathematical model (1)–(4), the DFRAP decides on the mode in which each SKU is stored in the forward area (restriction (2)). Equivalently, it decides on the number of units to be stored per product without exceeding given storage space S (restriction (3)) which is assumed to be at least as large as∑i∈Pwi1. Otherwise, not all products of the predefined set could be stored in the forward area. Binary variables xijdefined in (4) indicate which storage mode is chosen for SKU i. Clearly, the more space is associated with each SKU the less restocks are required per time unit. If direpresents the total demand for product i during the planning period, e.g., a year, then the number of restocks per SKU can simply be calculated by dividing the total demand diby the number of units stored in the forward area of the respective product. Note that the underlying assumptions with regard to restocks are discussed in detail by Bartholdi and Hackman (2008).When weighting the number of restocks with product specific replenishment cost cithe objective (1) of the DFRAP is to minimize the overall restock cost per planning period:(1)DFRAP:MinimizeC1(x)=∑i∈P∑j=1nicidiaijxij(2)subject to∑j=1nixij=1∀i∈P(3)∑i∈P∑j=1niwijxij⩽S(4)xij∈{0,1}∀i∈P;j=1,…,niThe DFRAP is mathematically equivalent to the well-known multiple-choice knapsack problem (MCKP), which becomes obvious when interpreting the parameters of the MCKP as follows:•SKUs correspond to classes and (storage) modes (of a SKU) correspond to items (of a class),the profit of item j of class i is pij=−cidi/aij(minimizing∑i∑jpijxijis equivalent to maximizing∑i∑j-pijxij),the weight of item j of class i equals the space wijrequired by storing SKU i in mode j,the capacity of the knapsack is c=S,the size of class i is ni.Clearly, the DFRAP isNP-hard as the MCKP, which is a generalization of the knapsack problem, is well-known to beNP-hard (see Kellerer et al., 2004, Chap. 11). Furthermore, pseudo-polynomial solution procedures for the MCKP exist, e.g., the dynamic programming approach of Dudzinski and Walukiewicz (1987), so that it follows that the DFRAP is weaklyNP-hard.For adopting the basic DFRAP to the case of equally sized shelves of a rack or lanes of identical capacity in a gravity flow rack, we keep to the notation introduced in Section 2.1 with a slightly different interpretation of S, wij, and aij. Parameter S denotes the total (integral) number of shelves that are available for storing the products of set P in the forward area. Hence, we let wijdenote the number of shelves that are available when storing SKU i in mode j. As we agreed on allowing any integral number of shelves between 1 and nifor forward storing of SKU i, where ni=S−∣P∣+1 if no other upper bound on the maximum number of shelves is given, we have wij=j for all i∈P and j=1, …, ni. Finally, we let aidenote the number of units of SKU i that can be stored in one shelf, which means that aij=j·aifor all i∈P and j=1, …, ni. Using this modified notation, the DFRAP with equal shelves (denoted as DFRAPES) can be rewritten as follows:(5)DFRAPES′:MinimizeCES1′(x)=∑i∈P∑j=1nicidij·aixij(6)subject to∑j=1nixij=1∀i∈P(7)∑i∈P∑j=1nij·xij⩽S(8)xij∈{0,1}∀i∈P;j=1,…,niTo shorten notation we define qi≔cidi/aias the aggregate restock costs of SKU i for the planning period, if only a single shelf is allocated to i. Thus, qi/j denotes the aggregate restock costs of SKU i when j shelves are allocated to i.In order to avoid infeasible or trivial solutions, we assume|P|⩽S<∑i∈Pni. Hence, any optimal solution satisfies constraint (7) with equality. Then, using integer variables xifor all SKUs i∈P the DFRAPES can be rewritten in its compact form as follows:(9)DFRAPES:MinimizeCES1(x)=∑i∈Pqixi(10)subject to∑i∈Pxi=S(11)xi∈{1,…,ni}∀i∈PThe compact formulation (9)–(11) – which also arises in family disaggregation at hierarchical production planning (cf. Bitran and Hax, 1977) – reveals the equivalence of the DFRAPES and the simple (discrete) resource allocation problem with (generalized) lower bounds xi⩾1 and upper bounds xi⩽nifor all SKUs i∈P (cf. Katoh and Ibaraki, 1998). The objective function∑i∈Pfi(xi)where fi(xi)=qi/xiis separable and convex as each fiis a convex function of one variable. In our case, the fi’s are even strictly convex and thus the difference or decrement(12)di(xi)≡fi(xi)-fi(xi+1)(xi∈{1,…,ni-1})is decreasing in xifor all fi.Several efficient polynomial time algorithms have been developed for the integer resource allocation problem (cf. Ibaraki and Katoh, 1988, Chap. 4). The fastest one is the polynomial time algorithm of Frederickson and Johnson (1982) that has an optimal running time ofO(max{|P|,|P|log((S-|P|)/|P|)}). For another algorithm with the same run time complexity see Hochbaum (1994).It is important to note that DFRAPES as a special case of DFRAP is efficiently solvable without any further assumptions on the maximum number of shelves nifor each SKU i. Compared to the simple and quite fast algorithm developed by Hackman and Platzman (1990) which has a tight worst-case performance if the ni’s are quite small in comparison to S, this constitutes an improvement as we showed the DFRAPES to be solvable to optimality in polynomial time. However, the underlying model considered by Hackman and Platzman for which their heuristic had been designed is far more general.Relaxing the integrality condition (11) in DFRAPES leads to the continuous relaxation denoted by FMB which is a generalization of the classic fluid model (FM) by Hackman et al. (1990):(13)FMB:MinimizeFC(z)=∑i∈Pqizi(14)subject to∑i∈Pzi=S(15)1⩽zi⩽ni∀i∈PIn contrast to FMB, the classic fluid model neither considers additional lower nor upper bounds for variables, i.e., (15) is replaced by zi>0. Solving FM by means of convex nonlinear programming (cf. Rockafellar, 1970) results in an optimal allocation of(16)zi∗=Sqi∑k∈Pqkshelves to SKU i and the corresponding optimal Lagrangian multiplier for constraint (14) is (cf. Hackman et al., 1990)(17)λFM∗=-∑k∈Pqk2S2The more general problem FMB can be solved, for instance, by application of a recursive algorithm proposed by Bitran and Hax (1981) that repeatedly allocates shelves according to (16) till all SKUs i received at least one shelf and at most nishelves. One iteration consists in identifying SKUs that received less than one shelf or more than nishelves, either increasing all allocations that are smaller than 1 exactly to this lower bound or decreasing all allocations larger than niexactly to the respective upper bound, and then reallocating the remaining number of shelves among the remaining SKUs. More precisely, let Stand Ptdenote the remaining number of free shelves and the remaining set of SKUs for which the optimal allocations have not yet been determined at the beginning of iteration t, respectively. Then, obtainzi∗(St)for all i∈Ptby solving FM restricted to Stand Pt. In case1⩽zi∗(St)⩽nifor all i∈Pt, setzi∗=zi∗(St)for all i∈Ptand stop the procedure since an optimal solution to FMB has been found. Otherwise, definePt+=i:zi∗(St)>nias well asPt-=i:zi∗(St)<1and computeΔt+=∑i∈Pt+zi∗(St)-nias well asΔt-=∑i∈Pt-1-zi∗(St). IfΔt+⩾Δt-, setzi∗=nifor alli∈Pt+,Pt+1=Pt⧹Pt+, andSt+1=St-∑i∈Pt+ni. Otherwise, setzi∗=1for alli∈Pt-,Pt+1=Pt⧹Pt-andSt+1=St-Pt-.Since at each iteration the optimal number of shelves is determined for at least one SKU, this procedure requires at most ∣P∣ iterations where iteration t consumes at mostO(|P|-t)time. Thus, the worst-case running time of Bitran and Hax’s algorithm isO(|P|2)time.Interestingly, the valueszi∗(i∈P) can also be used to efficiently determine an optimal solution for the discrete problem version (cf. Ibaraki and Katoh, 1988, Section 4.6). Therefore, lett¯denote that iteration of Bitran and Hax’s algorithm at which an optimal FMB-solution has been found. Then, sincez∗=z1∗,…,z|P|∗is optimal, the Kuhn-Tucker conditions (cf., e.g., Rockafellar, 1970) are satisfied and we receive the optimal Lagrangian multiplierλFMB∗=-∑k∈Pt¯qk2St¯2associated with constraint (14) of problem FMB. Furthermore, due to the convexity of the functions fifor all i, we can conclude(18)λFMB∗+di(xi)⩾0forall1⩽xi⩽⌊zi∗⌋-1and(19)λFMB∗+di(xi)⩽0forall⌊zi∗⌋+1⩽xi⩽niThen, by setting(20)x̃i=zi∗ifzi∗isintegralzi∗ifλFMB∗+dizi∗⩽0zi∗+1ifλFMB∗+dizi∗>0for all i∈P we obtain an optimal solution to the Lagrangian relaxation of DFRAPES with the right-hand side S being replaced by∑i∈Px̃i. Verifying the optimality ofx̃is straightforward by equivalently reformulating the objective of the Lagrangian relaxation for a given real number λ as follows:min∑i∈Pfi(xi)-λ∑i∈Pxi-S⇔min∑i∈P(fi(xi)-λxi)⇔min∑i∈Pfi(1)-(di(1)+λ)-(di(2)+λ)-…-(di(xi-1)+λ)-λ⇔max∑i∈P((di(1)+λ)+(di(2)+λ)+…+(di(xi-1)+λ))Sincex̃is optimal,D∼={di(y)|i∈P;y=1,…,x̃i-1}contains theS∼-|P|largest elements of the set D={di(y)∣i∈P; y=1, …, ni−1} of all decrements whereS∼=∑i∈Px̃i. Then, it remains to determine the(S-S∼)largest elements inD⧹D∼ifS∼<Sor the(S∼-S)smallest elements inD∼ifS∼>S. Clearly, as∑i∈Px̃i-∑i∈Pzi∗⩽|P|-1, this can be done inO(|P|log|P|)time (cf. Weinstein and Yu, 1973) or even faster inO(|P|)time (cf. Ibaraki and Katoh, 1988, Section 4.6) based on the algorithm of Frederickson and Johnson (1982). Note that the latter observation on∑i∈Px̃i-∑i∈Pzi∗induces that the maximal absolute difference in the discrete and the continuous optimal allocation is bounded above by ∣P∣ for each SKU i, more formally,xi∗-zi∗∞⩽|P|(cf. also Hochbaum, 1994, for a more general result).To sum up, the above mentioned efficient procedures optimally partition storage space among SKUs if the forward area meets the quite typical and only mildly restricting precondition of equally sized shelves. In this case, it seems not meaningful to apply the fluid model as proposed by Hackman et al. (1990) since it is neither much more efficiently solvable (though it requires onlyO(|P|)time) nor leads to better solutions. Instead, as filling a single shelf with multiple products is often not manageable in the real-world, practitioners usually apply simple repairing techniques (mainly based on rounding) rather than the previously described method for ensuring integer solutions. Of course, such a repair bears the risk of non-optimal integer solutions as can be seen by the following small (pathological) example, where three SKUs with aggregate restock costs q1=1, q2=251, and q3=1000, respectively, have to be allocated to S=4 shelves. Clearly, the optimal allocation is x∗=(1,1,2) yielding CES1(x∗)=752. In contrast, the fluid model solution according to Bitran and Hax’s algorithm isz∗=1,3251251+1000,31000251+1000. Then, inappropriate repairing can lead to the solutions (1,2,1) or (2,1,1) and relative deviations in the objective function values of 49.8% and 66.4%, respectively, compared to the optimal value.In the following section, we strengthen the previous argumentation by quantifying the resulting gap between the DFRAPES and its fluid counterpart FMB when applying different repair heuristics.As existing research on the fluid model does not draw attention to repair heuristics which are typically applied by practitioners, we propose four different simple, intuitive, and easily applicable procedures for altering a non-integral solution gained with the fluid model to an integer solution. All repair heuristics are based on the following two steps:1.SetxiR=zi∗, i.e., round down non-integral solution elements of the fluid model.In case∑i∈PxiR<S, adequately allocate all remaining free shelves to the products until all S shelves are allocated. In case∑i∈PxiR=S, stop the procedure.Clearly, after step 1 is performed, at least one shelf is allocated to each product and the total number of allocated shelves is integral. Thus, the solution is feasible for the discrete problem, but, typically, the number of allocated shelves will be smaller than S. Note also that this solution is generally not optimal for the DFRAPES with the right-hand side S being replaced by∑i∈PxiR(in contrast to the data given in Section 2.3). Let δ denote the difference between S and the number of shelves allocated in Step 1, i.e.,δ=S-∑i∈PxiR. As∑i∈Pzi∗=S, it is readily verified that δ∈{0,1,…,∣P∣−1}. In order to yield a better estimate on the maximum number of iterations during Step 2, the co-domain of δ can be tightened to those values that are smaller than{i∈P:zi∗∉N}, i.e., the number of products to which the fluid model allocates non-integral numbers of shelves.Clearly, in case δ>0 it is meaningful to allocate additional shelves to some SKUs as this improves the objection function value. This Step 2, i.e., the identification of promising SKUs, is specified next. Each of the four heuristical procedures will require exactly δ iterations and no SKU will receive more than one additional shelf per adaptation step:Procedure R1: Randomly choose δ different SKUs according to a uniform distribution and increase the respective numbers of allocated shelves by one in each case.Procedure R2: Rank all SKUs in order of non-decreasingzi∗. According to this ranking increase the number of allocated shelves by one for each of the first δ SKUs.Procedure R3: Rank all SKUs in order of non-increasing differenceszi∗-xiR. After that, increase the number of allocated shelves for each of the first δ SKUs by one.Procedure R4: Rank all SKUs in order of non-increasingdi(xiR). Then, increase the number of allocated shelves for each of the first δ SKUs by one.In case that a certain ranking is not unique, equal elements remain in their original order. For instance, assume xR=(1,2,1,2,1) after the first step. Then, the ranking of the SKUs according to R2 is (1,3,5,2,4).The repair heuristics are ordered in such a way, that they incorporate an increasing level of relevant information. R1 is a pure random procedure, R2 is implicitly based upon decreasing decrements di(xi) for all i (considered isolated), and R3 constitutes standard rounding in integer programming. Finally, procedure R4 includes a (simpler) variant of the main idea underlying the incremental algorithm devised by Gross (1956) for the simple resource allocation problem and is assumed to perform best.As there is no established test bed available, we now elaborate on the generation of test instances. As can be seen from the formulation of the DFRAPES, the three relevant parameters are the number of products ∣P∣, the total number of available shelves S, and the aggregate restock costs qias introduced in Section 2.2.As a forward area stores only fast moving (quite homogeneous) SKUs, aggregate restock costs qi, typically, do not vary substantially. Therefore, we assume three different product categories P1, P2, and P3, and probabilities p1, p2 and p3, where pkdefines the probability of a product belonging to category Pk(k=1,2,3). See Table 1for the different distributions D1,D2, and D3 of the product categories. We assume the aggregate restock costs – which can be scaled to the interval (0,1] – to be independent samples uniformly distributed in the intervals [0.1,0.2) (for P1-products), [0.2,0.4) (for P2-products), and [0.4,0.8) (for P3-products). Note that in each category the aggregate restock costs vary at most by a factor of 2 where the maximum total variation seen over all three categories is bounded by a factor of 8.The forward area is assumed to consist of S equally sized storage locations, e.g., lanes of gravity flow racks. We investigate differently sized forward areas, i.e., we choose S∈{50,150,500}. Finally, to analyze the impact of the number of products that are stored in the forward area, we assume a total number of ∣P∣=S/r products, where r is varied as follows: r∈{5,2,1.25}. For each (S,r)-combination and distribution of the product categories according to Table 1 (leading to 33=27 constellations) we generated 10,000 independent instances assuming ni=S−∣P∣+1 for each SKU i.For each of these instances the discrete and the continuous optimum is determined as described above. Then, the four repair heuristics are applied to obtain an integer solution out of the fluid model solution. As performance indicators we evaluate the following data for each (S,r,D)-constellation:•“AVG” denotes the relative gap between the objective function value of the discrete optimum x∗ and the respective “repaired” fluid model solution xRaccording to procedure R∈{R1,R2,R3,R4}, i.e., (CES1(xR)−CES1(x∗))/CES1(x∗) averaged over all instances (in %),“MAX” defines the maximal relative deviation between the corresponding objective function values (in %),“DIF” denotes the relative number of instances for which x∗ and xRdiffer in at least one element, i.e., different number of shelves for at least one SKU (in %).Note that for each generated instance the discrete solution is unique, which is due to the fact that the aggregate restock costs are i.i.d. drawn from a continuous probability distribution. Hence, DIF indicates the relative number of instances for which a certain repair heuristic generates a non-optimal solution, so that a DIF-value of 0 (100) means that the respective repaired solutions have always (never) been optimal for the discrete problem.

@&#CONCLUSIONS@&#
Unlike existing research, which predominantly focuses the fluid model, the paper on hand investigates three discrete forward–reserve problems. Problem DFRAP allocates the storage space among a given set of SKUs, problem DFRAAP additionally selects the products to be stored in the forward area, and problem DFRASP jointly addresses the storage space allocation problem and the overall size of the forward area. All resulting problem versions are investigated for two different constellations, namely variable storage modes and equally sized shelves. While the former case allows each SKU being stored in facultative modes each requiring a specific amount of space for a specific number of products, the latter scenario presupposes some standardized rack being subdivided into equally sized shelves. The complexity results for all six resulting problem versions are summarized in Table 5. Considering equally sized shelves, in three separate computational studies we, furthermore, quantify the resulting gap between the respective discrete problem version and its continuous counterpart (denoted as fluid models) repaired to an integral solution.From the practitioner’s point of view the main finding of this paper is, that (given a suited rounding procedure, i.e., R4) the model gaps between the fluid models and their discrete counterparts are negligible. Thus, warehouse managers currently using a problem version of the widespread fluid model for planning forward areas do not have to worry about being misled by pronounced rounding errors.Future research should further concentrate on the discrete versions of the forward–reserve problem. For instance, a powerful branch-and-bound algorithm for the DFRAAP based on the ideas of this paper would be a valuable contribution. Furthermore, relevant problem extensions should be investigated. For example, explicitly considering the impact of both the location of a SKU in the forward area and the overall size of the forward area on the resulting picking effort, incorporating SKU assignments into the sizing model, examining distinctive characteristics of SKUs that are stored forward, and explicitly scheduling replenishment activities bear plenty opportunities for future research.