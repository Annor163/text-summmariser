@&#MAIN-TITLE@&#
A bi-objective inventory optimization model under inflation and discount using tuned Pareto-based algorithms: NSGA-II, NRGA, and MOPSO

@&#HIGHLIGHTS@&#
A multi-product multi-period inventory control problem under budget constraint is developed.The shortages in combination of backorders and lost sales are considered for each product.The ordered quantities of products are delivered in batch sizes of known number of boxes.All unit discount policy is considered to purchase the products.Three meta-heuristic algorithms i.e. NSGA-II, NRGA and MOPSO are applied to solve the problem.

@&#KEYPHRASES@&#
Multiproduct inventory control,Inflation,Discounts,Shortages,NSGA-II,NRGA,MOPSO,Taguchi method,

@&#ABSTRACT@&#
This study presents a seasonal multi-product multi-period inventory control model with inventory costs obtained under inflation and all-unit discount policy. The products are delivered in boxes of known quantities and both backorder and lost-sale quantities are considered in case of shortage. The goal is to find a representative set of Pareto optimal solutions (including the ordering quantities) in different periods and to minimize both the total inventory cost (i.e. ordering, holding, shortage, and purchasing costs) and the total storage space, simultaneously. Three multi-objective optimization algorithms of non-dominated sorting genetic algorithm (NSGA-II), non-dominated ranked genetic algorithm (NRGA), and multi-objective particle swarm optimization (MOPSO) are proposed to solve the problem. The Taguchi approach with a novel metric (based on the coefficient of variation) is utilized to model the response variable and compare the performances of the algorithms. Three numerical examples are used to demonstrate the applicability and exhibit the efficacy of the procedures and algorithms. The results of statistical analyses show significant differences in the performance metrics for all three algorithms and in all three numerical examples.

@&#INTRODUCTION@&#
In inventory control problems, determining the ordering times and the order quantities of products are the two strategic decisions either to minimize total costs or to maximize total profits. In this regard, numerous research works were performed in the past decade. Some of these works are connected to the well-known economic order or production quantity models (EOQ and EPQ) to achieve maximum profit or minimum cost (see for example [1–7]).Inventory problems dealing with seasonal and fashion products are usually modeled in a known number of periods. To name a few research works on multi-periodic inventory control problems, Ahmed et al. [8] investigated a multi-period single-item inventory problem with linear cost, where the objective function was a coherent risk measure. Sepehri [9] formulated an integrated flow network and expanded it to a multi-period multi-product inventory control problem with the possibility of holding inventories in a multi-stage multi-member cooperative supply chain. Zhang et al. [10] presented some convex stochastic programming models for multi-period inventory control problems where the market demand was random and order quantities needed to be decided before the demand was realized. Chio et al. [11] proposed a solution scheme for a periodic review multi-period inventory problem under a mean-variance (MV) framework.In addition to managing multiple items, real-world inventory control systems have many limitations in warehouse space, budget, shortage, and the like. Zhou [12] developed a deterministic replenishment model with multiple warehouses (one an owned warehouse and others rented) possessing limited capacity, in which the replenishment rate was infinite and the demand rate was increasing at a decreasing rate with respect to time. Taleizadeh et al. [13] considered a multiproduct multi-constraint inventory control system with budget and space constraints where replenishment intervals were stochastic and the items were sold under discount.Nowadays, due to high volume financial turnover between or inside companies, inflation is an important factor to model inventory costs. The effects of inflation on inventory control decisions have been considered in many works since 1975 when Buzacott [14] proposed an EOQ model with inflation subject to different types of pricing policies. Dey et al. [15] considered two- storage inventory problems with dynamic demand and interval valued lead-time over finite time horizon under inflation and time-value of money. Sarkar and Moon [16] proposed a production inventory model for stochastic demand with the effect of inflation where due to real-life constraints (labor problems, machine breakdown, etc.), a certain percentage of products are of imperfect quality. Recently, Mirzazadeh et al. [17] introduced an inventory model with stochastic inflation rate for multiple items with budget constraint.In many real-world inventory problems, managers desire to optimize multiple objectives of different types simultaneously. As a result, many authors extended inventory models to involve multiple objectives. As an example, Mahapatra and Maiti [18] extended a multi-objective multi-item production/inventory system in which demand was a function of inventory level and selling price of the commodity. Maiti and Maiti [19] formulated an inventory control system of deteriorating multi-items under a single management with resource constraints under inflation and discounting in fuzzy environment. Zhang et al. [20] studied a two-stage, multi-item inventory system where stochastic demand occurs at stage 1, and nodes at stage 1 replenish their inventory from stage 2.In order to solve multi-objective inventory models, Pareto dominance solutions have been proposed by several authors. While the amount of research in this area is limited, some works are Tsou [21] and Tsou et al. [22] who employed a multi-objective particle swarm optimization (MOPSO), Rezaei and Davoodi [23], and Ojha et al. [24] who applied a multi-objective genetic algorithm (MOGA) to find Pareto dominance solutions.The non-dominated sorting genetic algorithm (NSGA-II), initially proposed by Deb et al. [25], is a multi-objective evolutionary algorithm (MOEA) that has been applied to find Pareto front solutions in different fields of studies. For example, Liao and Hsieh [26] and Bhattacharya and Bandyopadhyay [27] employed it in a facility location problem, Yuan and Quanfeng [28] and Kang et al. [29] used it in a scheduling problem, Amodeo et al. [30] applied it in an inventory control problem and Mousavi et al. [31] solved a multi-state redundancy allocation problem using NSGA-II and CE-NRGA. In addition, Sadeghi and Niaki [32] applied NSGA-II and NRGA to solve a multi-objective vendor-managed inventory problem with trapezoidal fuzzy demand. Non-dominated ranked genetic algorithm (NRGA) is another MOEA proposed by Al Jaddan et al. [33] to solve multi-objectives optimization models. While the implementation of NRGA is limited in the literature, Moradi et al.’s [34] work is the one that uses it to find solutions of a multi-objective assembly line sequencing model. They compared solutions obtained via NRGA against the ones obtained via total enumeration scheme in small problems and against the ones obtained by four other search heuristics in small, medium and large problems as well. Experimental results showed that NRGA was competitive with the investigated algorithms in terms of quality and diversity of solutions. Rahmani et al. [35] proposed a new mathematical model with nonlinear terms and integer variables that could not be solved efficiently for medium and large-sized problems. In their research, a method combining a new ranked-based roulette wheel selection algorithm with Pareto-based population ranking algorithm, named non-dominated ranking genetic algorithm (NRGA), was presented to find non-dominated solutions in a reasonable time. They compared solutions obtained via NRGA against solutions obtained via ɛ-constraint method in small-sized problems. Moreover, Kayvanfar et al. [36] used two meta-heuristic algorithms (NRGA and NSGA-II) for solving an economic lot scheduling problem regarding deteriorating items and allowable shortage using extended basic period approach under Power-of-Two policy. They showed that there was no significant difference between the performances of the two algorithms in small-sized problems. However, NRGA performed better that NSGA-II for medium and large-sized problems.Since meta-heuristic algorithms are sensitive to their parameter settings, in order to improve the quality of solutions obtained the Taguchi method is usually applied. Some recent works that employed this method are in location-allocation problem [37], in scheduling problem [38–42], and in statistical quality control problem [43].While in the past decade, a considerable amount of research works have been devoted to modeling, development, and solution procedures of the multi-objective inventory control problem, the main contribution of this paper is two-folds. First, the modeling area in which a novel bi-objective mathematical formulation for seasonal multi-product multi-period EOQ problem with inflation, discount, and shortage under limitations on budget, number of orders, and available number of transportation boxes is proposed. Although this type of inventory-control formulation that involves various features has many real-world applications, no research has been devoted to it yet. Second, the solving methodologies for the proposed optimization model in which three Pareto-based multi-objective meta-heuristic algorithms called NSGA-II, NRGA and MOPSO are proposed. Since meta-heuristic algorithms are sensitive to their parameters, a Taguchi procedure is employed to tune the parameters of both algorithms, where a novel metric that takes into account both the convergence and diversity is introduced as the response variable. Finally, several performance metrics are used to compare the efficiency of the proposed algorithms using various graphical and statistical methods.To be more specific, the present paper involves a multi-product multi-period EOQ problem with shortages in which the planning horizon is finite and the demand rates of the items are different in various periods. The problem is modeled under realistic constraints of budget and truck-space, where the vendor sells the products in boxes of known number of items under all-unit discount, where inflation plays an important role affecting the inventory costs. Further, three binary variables are used to model the shortage, the ordering, and the purchasing costs; a novel approach that distinguishes this work with others. The objective is to find the optimum order quantities of the products in different periods such that both the total inventory cost (including ordering, holding, shortage, and purchasing) and the required storage space are minimized simultaneously. The proposed bi-objective inventory model can be used in situations in which production managers desire to produce a new product that requires an extended storage space to locate their purchased items with limited budget. They must consider inflation, discounts, and other mentioned realistic limitations.The remainder of this paper is organized as follows: In Section 2, the notations and assumptions are presented. In Section 3, the problem is formulated. Solution algorithms are introduced in Section 4. Section 5 provides experimental results along with discussions. Conclusion and future works are given in Section 6.To develop the mathematical model of the inventory control problem at hand, the indices, parameters, and decision variables adopted in this article are as follows:Indicesi: An index for a product; i=1, 2, …, mj: An index for a replenishment cycle; j=0, 1, …, Nk: An index for a price break point; k=1, 2, …, KParametersN: Number of replenishment cycles in the planning horizonm: Number of productsK: Number of price break pointsAi,j: Replenishment cost per order of product i in period jPi: Purchasing cost per unit of the ith productPi,k: Purchasing cost per unit of the ith product at the kth price break pointhi: Inventory holding cost per unit per unit time of the ith productπi,j: Backorder cost per unit of the ith product in period jπ′i,j: Lost sale cost per unit of the ith product in period jC: Total available budgetIi,j(t): Inventory position of ith product at time t in period jDi,j: Demand of ith product in period jBi: The fixed batch size of ith productqi,k: kth price discount point for ith product (qi1=0)Si: Required storage space per unit of ith productTi,j: Total time elapsed up to and including the jth replenishment cycle of the ith productT′i,j: The time in period j at which the inventory of item i reaches zeroUi,j,k: A binary variable; set equal 1 if item i is purchased at price break point k in period j, and 0 otherwiseWi,j: A binary variable; set equal 1 if a purchase of product i is made in period j, and 0 otherwiseLi,j: A binary variable; set equal 1 if a shortage occurs for product i in period j, and 0 otherwiseβi: Percentage of unsatisfied demand of ith product that is back orderedM1: An upper bound for order quantity of ith product in period jM2: An upper bound for the available number of boxesDecision variablesVi,j: Number of the boxes for ith product order in period jbi,j: Shortage quantity for ith product in period j (bi,0=0)Qi,j: Ordering quantity of ith product in period jXi,j: Beginning positive inventory of the ith product in period j (in j=0, the beginning inventory of all items is zero)The assumptions involved in the inventory problem at hand are:1.Replenishment is instantaneous.Demand rates of all products are independent from each other and are constant in a period.In each period, at most one order can be placed for a product.All products are delivered in special boxes, i.e. the order quantity of the products is a multiple of a fixed-sized batch.When a shortage occurs, a fraction is considered backorder and a fraction lost sale.The initial inventory level of all products is zero (i.e. Xi,1=0).The order quantity of each product in each period is at least equal to the shortage quantity of the product in the previous period (i.e. Qi,j+1≥bi,jfor i=1, 2, …, m; j=0, 1, …, N−1, where bi,0=0).Planning horizon is finite and known. In the planning horizon, there are N periods of equal length.The total available budget to purchase products is limited.The order quantity of a product in a certain period is limited.The number of available boxes to deliver products in different periods is limited.The holding cost of an item is assumed independent of its required storage space.A graphical representation of the inventory control problem at hand with five replenishment cycles for product i is shown in Fig. 1, where some possible inventory scenarios are given. Based on Fig. 1, the inventory planning starts in period T0 and ends in period T5, where shortages occur in some periods in between. Moreover, an order that is at least equal to the shortage quantity of the previous period is placed in a period.The total inventory cost consists of ordering, holding, shortage, and purchasing costs that are modeled as follows. Since at most one order can be placed for a product in a period, in order to model the ordering cost, a binary variable Wi,jis used where it is 1 if a purchase of a unit of product i is made in period j, otherwise 0. As a result, the total ordering cost when inflation is not present is obtained as∑i=1m∑j=1NAi,jWi,j. In case of an existing inflation with a rate of f, the total ordering cost (A) under continuous compounding policy becomes [15](1)A=∑i=1m∑j=1NAi,jWi,je−fTi,jThe holding cost of a product in a period is equal to the area of a trapezoid above the horizontal line of Fig. 1. Therefore, forTi,j−1<t<Ti,j(1−Li,j)+T′i,jLi,jthe holding cost under inflation (H) is(2)H=hi∫Tj−1Tj(1−Li,j)+T′jLi,jIi(t)e−ftdtForTi,j−1<t<Ti,j(1−Li,j)+T′i,jLi,j, since the inventory position of product i at time t in period j is Ii,j(t)=Xi,j+Qi,j−Di,j(t−Ti,j−1) and that at timeTi,j−T′i,j=bi,j/Di,jin period j the inventory becomes zero, by lettingTi,j(1−Li,j)+T′i,jLi,j=a, Eq. (2) becomes(3)H=∑i=1m∑j=1N−1hie−fa−e−fTi,j−1fDi,je−faa+1f−e−fTi,j−1Ti,j−1+1fe−fa−e−fTo,j−1−Xi,j+Qi,jDi,j−Ti,j−1The shortage cost consists of two parts; backorder and lost sale. Since βipercentage of the demand of product i is backorder and the (1−βi) percentage is lost sale, based on Fig. 1, the backorder (BO) and lost sale (LS) costs under inflation are obtained as(4)BO=∑i=1m∑j=1N−1πi,je−fTi,jβi∫T′i,jTi,jIi,j(t)e−ftdt(5)LS=∑i=1m∑j=1N−1π′i,je−fTi,j(1−βi)∫T′i,jTi,jIi,j(t)e−ftdtwhere forT′i,j<t<Ti,jwe haveIi,j(t)=Di,j(t−T′i,j).To formulate the purchasing cost under the all-unit discount policy, let the price break points be(6)Pi=Pi,10≤Qij<qi2Pi,2qi2≤Qij<qi3⋮Pi,KqiK≤QijThen, the purchasing cost (P) becomes(7)P=∑i=1m∑j=1N−1∑k=1KQi,jPi,kUi,j,ke−fTi,jThe first objective function is the minimization of the total inventory cost Z1=A+H+BO+LS+P obtained as(8)MinZ1=∑i=1m∑j=1N−1Ai,jWi,je−fTi,j+∑i=1m∑j=1N−1hie−fTi,j-1∫Ti,j−1Ti,j(1−Li,j)+T′i,jLi,jIi,j(t)e−ftdt+∑i=1m∑j=1N−1πi,je−fTi,jβi∫T′i,jTi,jIi,j(t)e−ftdt+∑i=1m∑j=1N−1π′i,je−fTi,j(1−βi)∫T′i,jTi,jIi,j(t)e−ftdt+∑i=1m∑j=1N−1∑k=1KQi,jPi,kUi,j,ke−fTi,jThe second objective can be formulated as the minimization of the total required storage space (Z2). Since in a given period j, the order quantity of item i plus its inventory in the previous period require storage space, a total of Qi,j+Xi,junits, each requiring Siunit of storage need space. Therefore, the second objective function becomes(9)MinZ2=∑i=1m∑j=1N−1(Qi,j+Xi,j)SiThe inventory of a certain product i at the end of period j, i.e. Ii,j, must be either positive denoted by Xi,j+1 (the beginning inventory of period j+1) or zero. In other words,(10)Ii,j=Xi,j+1;Ii,j>00;Ii,j≤0Moreover, the beginning inventory of product i in period j+1 is equal to its beginning inventory in the previous period j, plus the order quantity, minus demand. Or(11)Ii,j+1=Ii,j+Qi,j−Di,jT′i,jLi,j+Ti,j(1−Li,j)−Ti,j−1In the case a shortage happens for a product in a specific period, then Li,jtakes the value of 1, Ii,jbecomes negative in Eq. (11), and the shortage becomes:(12)bi,j+1=Di,jT′i,j−Ti,j−1−(Ii,j+Qi,j)Eq. (12) shows the shortage quantity of each item in a period completely depends on waiting time of its demand.Since the order quantity of product i in period j, Qi,j, is delivered in Vi,jboxes, each containing Biproducts, the next constraint becomes(13)Qi,j=BiVi,jDue to real-world limitations on the transportation methods (e.g. truck space), the order quantity of all products in a period cannot be greater than a given fixed number M1. In other words,(14)∑i=1mQi,j≤M1;∀jFurthermore, the number of available boxes to deliver product i in period j is limited and we have(15)Vi,j≤M2The purchasing price per unit of product i is Pi, the order quantity of product i in period j is Qi,jand the total budget is C. As a result the budget constraint is(16)∑i=1m∑j=1N−1∑k=1KQi,jPi,kUi,j,ke−fTi,j≤CFinally, since at most one order can be placed for a product in a period and that it can be purchased at one price break point, we have(17)∑k=1KUi,j,k=1In short, the mathematical formulation of the bi-objective inventory control problem at hand becomes(18)MinZ1=∑i=1m∑j=1N−1Ai,jWi,je−fTi,j+∑i=1m∑j=1N−1hie−fTi,j-1∫Ti,j−1Ti,j(1−Li,j)+T′i,jLi,jIi,j(t)e−ftdt+∑i=1m∑j=1N−1πi,je−fTi,jβi∫Ti,j'Ti,jIi,j(t)e−ftdt+∑i=1m∑j=1N−1π′i,je−ft(1−βi)∫Ti,jTi,jIi,j(t)e-ftdt+∑i=1m∑j=1N−1∑k=1KQi,jPi,kUi,j,ke−fTi,jMinZ2=∑i=1m∑j=1N−1(Qi,j+Xi,j)Sis.t.:Ii,j=Xi,j+1;Ii,j≥00;Ii,j<0Ii,j+1=Ii,j+Qi,j−Di,jT′i,jLi,j+Ti,j(1−Li,j)−Ti,j−1Qi,j=BiVi,j∑i=1mQi,j≤M1;∀jVi,j≤M2∑i=1m∑j=1N−1∑k=1KQi,jPi,kUi,j,ke−fTi,j≤C∑k=1KUi,j,k=1i=1,2,…,m,j=0,1,…,N,k=1,2,…,KIn the next section, two parameter-tuned multi-objective evolutionary algorithms are proposed to obtain Pareto-optimal set for the above constrained bi-objective inventory model.Although different exact methods such as Lagrangian relaxation [17] and branch and bound [44] have been developed in the literature to solve less complicated inventory control models, due to multi-objectivity and complexity, they cannot be employed to find optimal solutions of the model at hand. As a result, in this work, a non-dominated sorting genetic algorithm (NSGA-II), a non-dominated ranked genetic algorithm (NRGA), and a multi-objective particle swarm optimization (MOPSO) algorithm are utilized in the following subsections, are employed to find Pareto solutions.Among various multi-objective optimization methods, the elitist non-dominated sorting genetic algorithm (NSGA), due to its simplicity, effectiveness, and minimum user interaction, is one of the most popular methods. NSGA-II, first introduced by Deb et al. [25], is an improved NSGA and it has been applied in many engineering design optimization successfully. Using Pareto dominance solutions, it is a computationally efficient algorithm implementing the idea of a selection method based on classes of dominance of all the solutions. It has a better sorting algorithm compared to NSGA, incorporates elitism, and requires no sharing parameter to be chosen a priori. The original NSGA-II algorithm consists of five operators: initialization, fast non-dominated sorting, crossover, mutation and the elitist crowded-comparison operator. The proposed NSGA-II of this research also involves these operators where they are described in the following subsections.In this research, a chromosome represents a box containing different number of products ordered in different periods. In other words, a chromosome is represented by a m×(N−1) matrixQ=[Qi,j;i=1,2,…,m,j=1,2,…,N−1]shown in Fig. 2. Moreover, since the upper bound on the number of boxes in each period is M2, in the initialization step of the proposed NSGA-II algorithm, a uniform integer random number m2 in [0, M2] is generated for each chromosome. In order to accelerate the run process of the algorithm and reach a near optimal solution in a shorter time, infeasible solutions (those that violate the constraints) are penalized by a specific quantity determined by a penalty function shown in Eq. (19). This function was shown to be the best among several penalty functions used in a pilot study. In addition, several studies have utilized this function to penalize their infeasible constraints (Mousavi et al. [45,46]). For an infeasible solution when a constraint exceeds its right hand side value (R), both the objective values are fined to an amount found as the difference of the left-hand-side and the right-hand-side of that particular constraint as shown in Eq. (19).(19)Penalty=Y(x)−RαWhere Y(x)≤R is a constraint of the problem, α=10, and x is the decision variable. This penalty is added to the values of both objective functions.In this step, the R populations that were generated in the previous step are compared and are sorted. To do this, all chromosomes in the first non-dominated front are first found. Since both objective functions in model (17) are of a minimization type, the chromosomes are chosen using the concept of domination, in which a solution xiis said to dominate solution xj, if ∀o∈{1, 2} we have Zo(xi)≤Zo(xj) and ∃o∈{1, 2} such that Zo(xi)<Zo(xj). In this case, we say xiis the non-dominated solution within the solution setxi,xj. Otherwise, it is not. Then, in order to find the chromosomes in the next non-dominated front, the solutions of the previous fronts are disregarded temporarily. This procedure is repeated until all solutions are set into fronts. It should be mentioned that the computational complexity of NSGA-II is O(MR2) where M and R are the number of objectives and the population size, respectively [25].After sorting the populations, a measure called the crowding distance is defined to evaluate solution fronts of populations in terms of the relative density of individual solutions [25]. To do this, consider Z and fk;k=1, 2, …, M the number of non-dominated solutions in a particular front (F) and the objective functions, respectively. Besides, let diand djbe the value of crowding distance on the solution i and j. Then, the crowding distance is obtained using the following steps:1.Set di=0 for i=1, 2, …, ZSort all objective functions fk;k=1, 2, …, M in ascending orderThe crowding distance for end solutions in each front (d1 and dZ) are d1=dZ=∞The crowding distance for dj;j=2, 3, …, (Z−1) aredj=dj+(fkj+1−fkj-1)In order to select individuals of the next generation, the crowded tournament selection operator “≻” is applied [25]. To do this, the following steps are required to be carried out1.Choose n individuals in the population, randomlyObtain non-dominated rank of each individualCalculate the crowding distance of the solutions having equal non-dominated rankAt the end, the solutions with least rank are the selected ones. Moreover, if more than one individual share the least rank, the individual with highest crowding distance must be selected.In other words, the NSGA-II comparison criterion can be written asIf rx<ryor (rx=ryand dx>dy) then x≻ywhere rxand ryare the ranks and dxand dyare the crowding distances.Let PCbe the crossover probability and r1 be a uniform random number between zero and one. For each of the R populations, if r1 is less than PC, select two parent chromosomes O1 and O2 randomly. Then, the crossover operator of the proposed NSGA-II algorithm is performed based on the following equations.(20)O′1=λO1+(1−λ)O2(21)O′2=(1−λ)O1+λO2whereO′1andO′2are offspring and λ is a uniform random number between zero and one.In order to reach better solution of the problem, several different forms of mutation operator provided in the literature are tested. It has been found that the uniform mutation operator was more suitable than the others. In this operations, for each chromosome for which r1>PC, select two integer numbers y1 and y2 in intervals [1,m] and [1,N], first. Then, generate an integer number randomly between 0 and M2 for row y1 and column y2 of the chromosome. Fig. 3shows how to do mutation operator of NSGA-II algorithm for a problem with m=6 and N=5 since y1=3 and y2=2.In this step, the parents and offspring population are combined to ensure the elitism. Since the combined population size is naturally greater than the original population size N, once more, non-domination sorting is performed [25]. In fact, chromosomes with higher ranks are selected and added to the populations until the population size becomes N. The last front is also consisted of the population based on the crowding distance.The algorithm stops when a predetermined number of iterations is reached.NRGA is a new multi-objective genetic algorithm to find feasible Pareto front solutions. NRGA is similar to NSGA-II with the difference that in the selection operation the roulette wheel strategy is employed [33]. Similar to NSGA-II, here Eq. (19) is used to fine infeasible solutions violating the constraints. In NRGA, a fitness value representing rank is assigned to each individual of the population. In this regard, two ranked based roulette wheel selection features including: (I) select the fronts and (II) choose solutions from the fronts, are used. The selection probability of fronts, Pf, and the selection probability of solutions, Pfs, are obtained using Eqs. (21) and (22).(22)Pf=2×RankfNF×(NF+1);f=1,…,NF(23)Pfs=2×RankfsNSf×(NSf+1);f=1,…,NF,s=1,…,NSwhere NF and NSfare the number of fronts and the number of solutions in front f, respectively. Eq. (22) ensures that a front with highest rank has the highest probability to be selected. Similarly, based on Eq. (23), solutions with more crowding distance are assigned higher selection probability. The roulette wheel selection is iterated until a desired number of solutions are selected. At the end, the algorithm stops when a predetermined number of iterations is reached.The MOPSO algorithm have been commonly used in the literature to some a wide range of optimization problems ([47–50]) including inventory control problems ([51,52]). The first, second, and third steps of the algorithm used in this study are initialization, fast non-dominated sorting, and crowding distance, similar to the NSGA-II algorithm. The fourth step is called updating and velocity of the particles (chromosomes) obtained using Eqs. (24) and (25) as follows:(24)vk+1,di=w.vk,di+C1.r1.(pbestk,di−xk,di)+C2.r2.(gbestk,di−xk,di)(25)xk+1,di=xk,di+vk+1,diwhere r1 and r2 are uniform random numbers between 0 and 1, coefficients C1 and C2 are the given acceleration constants towardspb→estandgb→est, respectively, andwis the inertia weight. Introducing a linearly decreasing inertia weight into the original PSO significantly improves its performance through the parameter study of inertia weight [53,54]. Moreover, the linear distribution of the inertia weight is expressed as follows [53](26)w=wmax−wmax−wminNOGiteration,where NOG is the maximum number of iterations and iteration is the current number of iteration. Eq. (26) presents how the inertia weight is updated, consideringwmaxandwminare the initial and the final weights, respectively. We use parameterswmax=0.9andwmin=0.4in this study which have been investigated by Naka et al. [54] and Shi and Eberhart [53]. Note that the ranks and the crowding distances of the new chromosomes (offspring) are first determined. The parents and the offspring are then combined similar to the NSGA-II method. The algorithm stops when a predetermined number of iterations is reached.In order to demonstrate the application of the proposed methodology and to evaluate and compare the performances of the two MOE algorithms, the parameters of the algorithms are first tuned by the Taguchi method using two numerical examples.As mentioned previously, NSGA-II and NRGA are employed to find Pareto fronts of the bi-objective optimization model (18), in which the population size (PS), the number of generations (NOG), the crossover probability (CP), and the mutation probability (MP) are the input parameters of both algorithms. Each algorithm runs 10 times and the performances are compared in terms of five indices; (1) an error ratio (ER), (2) the required CPU time (seconds), (3) the number of optimal Pareto solutions (NPS), (4) the mean ideal distance (MID) introduced in [55] to gauge the convergence rate of the Pareto fronts towards a specific point (0, 0), and (5) the diversification metric to measure the distribution of the solution set [55]. Moreover, ER is obtained in Eq. (27), in which euis zero if solution u belongs to Pareto front and one otherwise and n is the population size [56].(27)ER=∑u=1neunSince the meta-heuristic algorithms are severely sensitive to their parameters, a Taguchi procedure has been utilized to calibrate the parameters of the algorithms. Taguchi method is a fractional factorial experiment introduced by Taguchi as an efficient alternative for full factorial experiments [57]. Taguchi procedure uses orthogonal arrays for setting family of experiences to investigate a group of factors. In this procedure, factors are categorized into two groups consisted of controllable or signals factors and noise factors. Now, based on the concept of the robustness, the method seeks to minimize the effect of noise and to determine the optimal level of signal factors. To do so, the signal to noise ratio (S/N), which calculates the amount of variation involved in the response, is used. While there are different ways to obtain variation in Taguchi procedure, in this research, since the goal is to minimizeS/N, the smaller-the-better type of response has been utilized, whereS/Nis given as(28)S/N=−10×logSY2nIn Eq. (28), Y and n are the response value and the number of orthogonal arrays, respectively, and S(Y2) is the summation of the responses Y2. To consider the two main goals of Pareto-based algorithms (convergence and diversity) simultaneously, a new metric is introduced to contain the error ratio (ER) and the number of Pareto solutions (NPS). This ratio is defined as(29)C.V.R.=ERNPSSince this metric mimic the classical coefficient of variation, it is called coefficient of variation ratio (C.V.R.) and acts as the response variable of the Taguchi method.To implement the Taguchi procedure, first, the levels of the factors are provided in Tables 1 and 2for the three algorithms. In each of the algorithms, three levels are considered for each factor. Then, by selecting the L9 design and using the Minitab Software, the orthogonal arrays along with their responses are presented in Tables 3 and 4. We found the L9 design of orthogonal arrays (OA) to be the best to tune the parameters of the algorithms using several tests. This has been a common approach in several studies such as [31,45,46,58].The effect plots ofS/Nratio are given in Figs. 4–6for NSGA-II, NRGA, and MOPSO, respectively. Using these plots, the optimal values of the parameters for each algorithm are obtained in Table 5. We used Figs. 4–6 to select the optimal values of the parameters according to the parameter levels of Low, Medium, and High, where the highest response is selected. The ranges of values defined for each level of Low, Medium, and High are selected based on a pilot study with several test problems. In other words, we set a wide range of values for the parameters and then run the problem to find the best ranges for each parameter. Interested readers can refer to [31,45,46,58] for more details on the selection of these optimal values.The computer coding of both algorithms are developed using MATLAB software and the experiments are performed on a computer with 2.50GHz of core 2 CPU and 3.00 GB of RAM.Numerical Example 1: Consider an inventory control problem with 6 products and 4 periods where the input data is given in Table 6. The other parameters of the problem are: Tj=2;(j=1, 2, …, 5); M2=3200; f=0.08; M1=100; C=24000. Moreover, the price-break points for products 1 and 2 are defined as follows:Pi=120≤Qi,j<201120≤Qi,j<50950≤Qi,jFor products 3, 4, and 5 the price-break points arePi=100≤Qi,j<40840≤Qi,jFinally, the price-break points for product 6 areP6=130≤Qi,j<601160≤Qi,jIn the presence of inflation, the objective is to find the optimal order quantities of the products in different cycles such that both the total inventory cost and the required warehouse space are minimized.The five performance measures obtained by employing the three parameter-tuned algorithms on all 10 replications of numerical example 1 are given in Table 7. The last two rows in Table 7 show the average (Ave.) and the standard deviation (St.dev.) of the values of the metrics in these 10 replications. In addition, five one-way ANOVAs are used to statistically compare the performances of the three algorithms in terms of the five abovementioned criteria. Tables 8–12show the one-way ANOVA of the performance indices NPS, ER, CPU (Sec), MID, and DM at 95% confidence level along with the values of the corresponding p-values. Tables 8–11 show while there are significant differences between the three algorithms in terms of the means of NPS, ER, CPU (Sec), and MID, there are no significant differences among the proposed algorithms in term of the means of DM. Moreover, Fig. 7exhibits the best Pareto solutions of the three algorithms in 10 runs of the algorithms for the numerical example 1.Figs. 8–12show the plots and the box plots of NPS, ER, CPU (Sec), MID, and DM in the three algorithms for numerical example 1.Numerical Example 2: Consider an inventory control system with 8 products and 4 periods. The input data is shown in Table 13, where the other data are: M2=3500; f=0.08; M1=100; C=25000. The price-break points for all 8 products, (i=1, 2, …, 8), are defined as follows:Pi=160≤Qi,j<251325≤Qi,j<601160≤Qi,jTable 14shows the five performance measures obtained by employing the three parameter-tuned algorithms on all 10 replications of numerical example 2. The last two rows of Table 14 exhibits the average (Ave.) and the standard deviation (St.dev.) of the values of the metrics in 10 the replications.Tables 15–19show the one-way ANOVA for the performance metrics NPS, ER, CPU (Sec), MID, and DM at 95% confidence level along with their corresponding p-vales. The results show while there are significant differences among the three algorithms in terms of the means of ER, CPU (Sec) MID, and DM, there are no significant differences among the proposed algorithms in term of the means of NPS. In addition, Fig. 13shows the best Pareto solutions for the numerical example 2 and the three algorithms in 10 runs.Figs. 14–18show the plots and the box plots of NPS, ER, CPU (Sec), MID, and DM of the three algorithms for the numerical example 2.Numerical Example 3: Consider an inventory control problem with 10 products and 5 periods where the input data is given in Table 20. The other parameters of the problem are: Tj=2;(j=1, 2, …, 5); M2=10000; f=0.08; M1=100; C=40000. Furthermore, the price-break points for different products are given as follows.For (i=1, 2, 3),Pi=140≤Qi,j<351335≤Qi,j<501050≤Qi,jFor (i=4, 5, 6, 7),Pi=180≤Qi,j<401740≤Qi,j<701370≤Qi,jFor (i=8, 9, 10),Pi=210≤Qi,j<301930≤Qi,j.Using the optimal values of the parameters, the five performance measures obtained by employing the three parameter-tuned algorithms on all 10 replications of numerical example 3 are given in Table 21. The last two rows of Table 21 shows the average (Ave.) and the standard deviation (St.dev.) of the values of the metrics for the 10 replications.In addition, Tables 22–26show the one-way ANOVA of the performance indices NPS, ER, CPU (Sec), MID, and DM at 95% confidence level along with the values of the corresponding p-values. The results in these tables also indicate that while there are significant differences among the three algorithms in terms of the means of NPS, ER, CPU (Sec), and MID, there are no significant differences among the utilized algorithms in term of the means of DM. Moreover Fig. 19shows the best Pareto solutions of the three algorithms in 10 runs in numerical example 3.Figs. 20–24show the plots and box plots of NPS, ER, CPU (Sec), MID, and DM of the three algorithms in numerical example 3.In this paper, a closer to reality multi-product inventory control problem was investigated with the goals of minimizing both the total inventory cost and the total required storage space. The number of replenishment cycles was limited, shortages were allowed, and the costs were obtained under inflation. The problem was first formulated into a bi-objective model and then three MOEA, namely NSGA-II, NRGA, and MOPSO, were employed to find Pareto front solutions of the model. Moreover, Taguchi method was implemented to tune the parameters of all algorithms, in which a novel metric that considers both the convergence and the diversity was introduced as the response variable. Three numerical examples were next given to demonstrate the application of the proposed methodology and to evaluate and compare the performances of the three algorithms in terms of NPS, ER, CPU time, MID, and DM criteria. The results showed that the three algorithms had different performances in terms of different metrics. In other words, there found statistically significant differences among the algorithms in terms almost all the performance metrics.As recommendations for future research, demands or inflation rate can be considered stochastic or fuzzy to make the model's usage more realistic. Moreover, the selling prices of the products can be used and the problem can be modeled into the framework of a supply chain management. For example, one can extend a two-level multi-buyer multi-vendor supply chain problem in which each vendor has storage to store products and each buyer order each product from each vendor.

@&#CONCLUSIONS@&#
