@&#MAIN-TITLE@&#
A Behavioral Adaptive Fuzzy controller of multi robots in a cluster space

@&#HIGHLIGHTS@&#
Novel cluster-space controller for non-holonomic systems based Behavioral Adaptive Fuzzy tuning algorithm (BAFC).Controller is easy to implement and performs tasks based on their importance.Fuzzy tuned controller uses position error and its rate of change as inputs.Implementation using SIMULINK on Lego EV3 WMRs wheeled robot is presented.Wi-Fi link establishes communication between agents and controller.

@&#KEYPHRASES@&#
Cluster space,Behavioral control,Fuzzy adaptive,Multi-robots,

@&#ABSTRACT@&#
Cooperation between autonomous robot vehicles holds several promising advantages like robustness, adaptability, configurability, and scalability. Coordination between the different robots and the individual relative motion represent both the main challenges especially when dealing with formation control and maintenance. Cluster space control provides a simple concept for controlling multi-agent formation. In the classical approach, formation control is the unique task for the multi-agent system. In this paper, the development and application of a novel Behavioral Adaptive Fuzzy-based Cluster Space Control (BAFC) to non-holonomic robots is presented. By applying a fuzzy priority control approach, BAFC deals with two conflicting tasks: formation maintenance and target following. Using priority rules, the fuzzy approach is used to adapt the controller and therefore the behavior of the system, taking into accounts the errors in the formation states and the target following states. The control approach is easy to implement and has been implemented in this paper using SIMULINK real-time platform. The communication between the different agents and the controller is established through Wi-Fi link. Both simulation and experimental results demonstrate the behavioral response where the robot performs the higher priority tasks first. This new approach shows a great performance with a lower control signal when benchmarked with previously known results in the literature.

@&#INTRODUCTION@&#
In addition to their ability to withstand extreme environment conditions, robotic systems can provide more speed, precision, repeatability and strength to any automated tasks such as sensor deployment, mapping, rescue like firefighting and surveillance to name just a few. However, a vast majority of applications use robots with individually assigned tasks. Hence, each robot operates independently from all other robots and is dedicated to achieve a particular task. Interest is growing in the use of multi-robot systems to push forward the limits of capabilities and improve individual work efficiency of each robot. The use of multi-robot systems provides great features such as flexibility, configurability, redundancy, increased coverage, throughput, and spatially diverse functionalities [1].Multi-agent systems have many features but also several challenges. One of the key challenges they are facing is the simultaneous coordination of motion and formation control. Formation control is important especially when sensors’ coverage and/or capabilities are limited. In the case of sensors coverage, formation allows each robot to concentrate its sensors on a region of the area of interest [2]. For example, robot scout benefits from a formation by directing the sensors of each robot towards achieving maximum area coverage [3]. Several approaches have been proposed to address formation control. The concept of virtual leader in the leader–follower framework has been extensively studied in designing control strategies (see for example Refs. [4–6]). Comparison of different methods to optimize the path planning in leader–follower formation with obstacle avoidance and their suitability for real-time implementation has been presented in Ref. [7].Cluster-space is another approach for formation control and maintenance (see Refs. [8–12]). This control method considers the group of robots as single entity and therefore, calculates the control commands at the cluster level. The main aspect of such approach is that the group of robots is perceived as one big robot. Once determined, cluster commands are translated to robot space commands by applying inverse kinematics and using the appropriate Jacobean matrix allowing each robot to have its own command that is derived from the cluster’s command. By doing so, the control process is made simpler than dealing with many robot entities as in the virtual-leader framework.Cluster space control can be centralized or decentralized. A centralized cluster space control is currently being implemented. Decentralized implementations are also possible [13]. However, the cluster space controller has its own challenges such as singularity problems—due to the Jacobean matrix of the cluster-to-robot space becoming singular [14], collision avoidance issues [15], and also the effects of the actuator nonlinearities on robot mobility which has the potential to put all the cluster in an unstable mode. Another similar approach is the null space algorithm. This is a task-based control algorithm for a group of multi-robots [16,17]. Null space approach is similar to the cluster space in the sense that it considers the robot group as one entity, but has some differences in the mathematical representation of the group dynamics.Design of intelligent and adaptive controllers are crucial to improve the performance of the cluster while addressing issues like nonlinearity, uncertainty, faults, and external disturbances. Fuzzy control method is a promising intelligent method since it does not require the availability of a precise model. For instance, The study in Ref. [18] developed a grey-prediction self-organizing fuzzy controller to address active suspension systems control. Experimental results demonstrate the effectiveness of the approach when compared to self-organizing fuzzy controllers. Neuro-fuzzy techniques are used in Ref. [19] to optimize the control of robot navigation through combination of rules. A good review of fuzzy systems and their applications can be found in Ref. [20]. On the other hand, behavior control methods have been developed to tackle complex control problems that autonomous robots encounter in an unfamiliar real-world environment [21]. The behavior controller has general set of constraints that allow robots to react in a certain domain [22]. Based on these constraints the robot will select the appropriate response called behavior, task or routine. A hierarchy of distributed behaviors was tackled in the literature to fulfill a given goal with different scenarios. In order to switch between these behaviors, fuzzy logic technique was used since, in addition to the fact that it does not need a precise model, it is based on logistic commands that makes it suitable for representing the behavior selection criteria or constraints [21,23,24]. For example, behavior-based control has been tackled for soccer playing robot in Ref. [24] and was used in navigation and coordination control in Ref. [21,23,25,26]. However, these methods were not applied to multi-robot clusters. Behavioral-fuzzy controller for the null space has been proposed in Ref. [27]. However, to our knowledge it has never been implemented in cluster space control framework. Also, in literature, a classical PID controller was proposed as the behavior-based controller. Issues like disturbance effects, robots nonlinearity or actuator saturation are not yet considered. The nonlinearity issue is important especially when having a group of nonlinear robots dynamics. Equally important, actuator saturation issues can make the formation of the group of robots completely unstable. One of the recommended solutions to deal with these issues is fuzzy adaptive controllers [28–31].Motivated by the research gaps in the literature and by the appealing nature of the fuzzy approach owing to its features, this paper proposes a novel behavior-fuzzy-based adaptive control algorithm (BAFC) for cluster space control. The present study considers two competing behaviors, which are target following and formation maintenance and control. The algorithm is simple, easy to implement, and its control approach accomplishes tasks based on their level of importance. In this proposed novel BAFC, the position error and its rate of change are both considered as inputs to the fuzzy logic control tuning algorithm. This will in turn improve the controller’s performance in an adaptive manner. The task-based control algorithms considers the robots actuator power allocated to one task at a time. This may help in solving the actuator saturation issue.In addition, cluster space concept has been applied on different types of robots, the unmanned vessel fleets [9,32], aerial robots and ground robots [11]. In this paper, non-holonomic robots are considered owing to the fact that the majority of wheeled robots are constrained in motion (wheels rotate without slipping). The implementation of the new control approach on Lego EV3 WMRs wheeled robot is also presented. The control strategy is implemented using SIMULINK. Real-time communication between robots and the controller is established through a Wi-Fi link.The rest of the paper is organized as follows. Section 2 introduces the kinematics and dynamics of non-holonomic robot as well as the definition of multi-robot cluster control. In Section 3, the adaptive fuzzy-based trajectory-tracking controller is presented with its stability proof. The simulation results are discussed in Section 4 and the experimental validation and results are presented in Section 5. Section 6 concludes the paper and discusses future work.A wheeled mobile robot (WMR) with two driven wheels (in the rear part) and a passive castor wheel (in the front) is considered. The schematic model is shown in Fig. 1(see Ref. [5] for more details).The state-space model of the considered kinematic vehicle with the associated non-holonomic constraints (rolling with no slipping) is given by Eq. (1):(1)[X˙(t)=u1(t)cos(θ(t))Y˙=u1(t)sin(θ(t))q˙(t)=u2(t)]In order to implement the cluster space for two robots, an appropriate set of cluster variables are chosen to represent the shape of the cluster. As shown in Fig. 2, the proposed cluster variables are (Qc,Xc,Yc,dc) and the corresponding robot space are (X1,Y1,q1), (X2,Y2,q2). The following Eqs. (2)–(5) shows the relation between the cluster space and the robot space variables.(2)Xc=X1+X22(3)Yc=Y1+Y22(4)Qc=tan2−1(Y1−Y2,X1−X2)+π2(5)dc=12(Y1−Y2)2+(X1−X2)2where (Xc, Yc) is the center of the cluster; Qcis the cluster heading and dcis the spacing between the robots from the cluster center.As shown in Fig. 3, the proposed cluster space controller, which is, consists of a closed loop controller with an adaptive fuzzy tuner that changes the controller parameters.This scheme measures the robots states and converts it into cluster space states. The conversion is implemented by comparing cluster position and velocities with the desired trajectory values and outputting cluster velocities. These output cluster velocities are then translated into commands and sent to the robots. The following steps show the control procedure;Step 1: calculating the error in the cluster variables using Eq. (6)(6)Ec=[Xcd−XcYcd−YcQcd−Qcdcd−dc]Step 2: differentiate the error using Eq. (7)(7)E˙c=dEcdtwhere EcandE˙care (1×4) vectors,Step 3: adapt the values of Kp(1×4), and Kd(1×4) by implementing the fuzzy functions as given in Eqs. (8) and (9):(8)Kp=K¯p+ΔKp{Ec,E˙c}fuzzy(9)Kd=K¯d+ΔKd{Ec,E˙c}fuzzywhereK¯pandK¯dare the proportional and integral constant controller gains andΔKp{Ec,E˙c}fuzzy=[ΔKpXc,ΔKpYc,ΔKpQc,ΔKpdc]ΔKd{Ec,E˙c}fuzzy=[ΔKdXc,ΔKdYc,ΔKdQc,ΔKddc]Kp=[KpXc,KpYc,KpQc,Kpdc]Kd=[KdXc,KdYc,KdQc,Kddc]K¯p=[K¯pXc,K¯pYc,K¯pQc,K¯pdc]K¯d=[K¯dXc,K¯dYc,K¯dQc,K¯ddc]More details on the fuzzy model structure is presented in Section 3.1.Step 4: applying the Cluster fuzzy PD controller commands using Eq. (8)(10)C˙cmd=KpEc+KdE˙cwhereC˙cmd=[ΔXc,ΔYc,ΔQc,Δdc]T. Note that ΔQc should be in the range of [−π, π].Step 5: the cluster controller commands are translated into robot velocities by calculating the velocity inverse kinematics as in Eqs. (11)–(14):(11)ΔX1=ΔXc+Δdcos(Qc−π2)−dcΔQcsin(Qc−π2)(12)ΔY1=ΔYc+Δdsin(Qc−π2)+dcΔQccos(Qc−π2)(13)ΔX2=ΔXc−Δdcos(Qc−π2)+dcΔQcsin(Qc−π2)(14)ΔY2=ΔYc−Δdsin(Qc−π2)−dcΔQccos(Qc−π2)Step 6: the low level controller (WMRs controller):(15)Ei1=ΔXi(16)Ei2=ΔYi(17)Ei3=Qc−Qid(18)Ei4=Qid−qiwhere i=1,2 indicates the robot index.(19)Qid=tan−1(Ei2Ei1)The robot commands in Eq. (1) can be calculated using Eqs. (20) and (21)(20)ui1=(Ei12+Ei22)cos(Ei4)(21)ui2=kiEi3where 0<ki, where u1 is the head speed and u2 is the orientation speed.As described in Fig. 4, the body of the fuzzy controllers consists of1.Input fuzzification (crisp-to-fuzzy conversion).Fuzzy rule base (linguistic knowledge base).Inference engine and Output defuzzification (fuzzy-to-crisp conversion).The fuzzy inference engine simulates the fuzzy rules using the input variables. In order to achieve the foregoing objectives, two main methods are generally used: Mamdani’s method and Sugeno’s method. Mamdani’s method is the first known fuzzy inference system, which consists of fuzzification, rule evaluation, aggregation of the rule outputs, and defuzzification. The main difference between Mamdani’s method and Sugeno’s method is in the way crisp output is generated from the fuzzy inputs. While Mamdani’s method uses the defuzzification of a fuzzy output, Sugeno’s method uses a weighted average function to get the crisp output.In this work, Mamdani’s method has been adopted, which is the commonly used inference engine. The proposed fuzzy approach starts with applying the defuzzification step to get the fuzzy values from the crisp inputs. These fuzzy values are represented in the fuzzy membership functions (see Figs. 5 and 6). Next, the fuzzy rules are simulated on the fuzzy inputs as shown in Tables 1–3. In this case, the fuzzy inputs are the error terms, derivatives of the errors on the cluster space and the priority value P. The fuzzy outputs are the controller tuning parameters ΔKpand ΔKd[33].Fig. 7shows the BAFC graphical structure for two robots cluster presented in Eqs. (8) and (9). The priority is achieved using by the max function. The higher control gain from the higher priority states will be passed. Therefore, if the output of the max is high then the fuzzy model will output a low control gain. And if no high gain is applied to the higher priority states, then the max function will return low signal. By so doing, the fuzzy model will give this state the priority to adapt its errors. The small triangles are the scaling constants that may be selected by try and error or by applying an evolutionary approach such as Genetic Algorithm.Remark 1PD controller is used in this case as an example of the classical controllers. Any controller, especially PID type, can also be selected.The proposed fuzzy model is a hybrid adaptive system. This means that the fuzzy model is simulated in a discrete time, while the robots dynamic model is simulated in the continuous time. Therefore, the fuzzy model should be slower than the robots model during the simulation.Let(22a)Ec=Cd−C(22b)E˙c=C˙d−C˙and(23)Ccmd=∫0tKpEc+KdE˙cdτTheorem 1Consider the mobile non-holonomic system (1). If the control command defined in Eq. (23) is applied to the mobile robot then the position and the velocity tracking errors (22a) and (22b) converge to zero.Starting from Eqs. (8)–(10), the cluster states error and its derivativeEc,E˙care defined as in as in Eqs. (22a), (22b) and (23),SubstitutingE˙cfrom Eq. (23) into Eq. (10) leads toE˙c=C˙d−Kp(Cd−C)−Kd(C˙d−C˙)(24)E˙c=C˙d−KpEc1+KdwhereK¯p,K¯d>0. Now the equilibrium point isEc=[0000]T, so by considering the following Lyapunov function candidate(25)V=12EcTEcwithV(0→)=0. Computing the derivativedVdt(26)dVdt=EcTE˙c=EcTC˙c−EcTKpEc1+KdAccording to Lyapunov theorem, the system is stable ifV(0→)=0→,dV(0→)/dt=0anddV/dt<0. Since−EcTKpEc<−λmin(Kp)∥Ec∥2andI+Kd>0whereλmin(Kp)is the minimum eigenvalues of the controller gain Kp, thendV/dt<0is true when Eq. (27) is satisfied, and accordingly the system is stable.(27)∥EcT∥<∥C˙d∥λmin(Kp)Remark 3The above proof is for general PD control gains. When using fuzzy logic tuning, the PD controller becomes nonlinear. A necessary and sufficient condition for stability is to always verify that Kp>0 and (I+Kd)>0. However, in practice, actuator saturation or heterogeneous characteristics of the robots may lead to instability. The first issue is well known in the literature. The latter is due to the coupling created within the cluster between the robots and the inability of some robots to keep up with the cluster. This issue will be investigated in a future work.In this case, disturbance was added to robot 2 during a time frame of 1–3s. Also, there is an existence of an initial condition error. Therefore, the controller should overcome two challenges: the initial condition and the disturbances. And also the controller’s objective is to give more priority to the formation shape than the target following, in addition to the adaptability of the controller gain based on the changes in the states errors and errors velocity. As seen in Fig. 8, the BAFC’s the response of the shape states (dcand Qc) are better than the classical controller (Fig. 9).The dynamics of three robots cluster are presented in Ref. [10]. The BAFC structure is similar to the one with two robots but with more fuzzy models. In this case, disturbances were added to both robot 2 and robot 3 between 4–8s. And also, there is existence of an initial condition error. Therefore, the controller should be able to overcome two challenges: the initial condition error and the disturbances. The controller’s objective is to give priority to the formation shape more than the target following. In addition, BAFC adapts the controller gain based on the changes in the states errors and errors velocity. Figs. 10–15show the comparison between the classical controller and the BAFC. The results show better performance in qc, pcstates, as depicted in Figs. 10 and 11. These improvements are apparent in the transient response even with both the initial condition and the disturbance challenges. qc, pcare considered as the shape states and they are given the highest priority among the system states followed by βc, Qc, Xcand Ycsequentially. As a result, qc, pcshould have better responses with BAFC than the classical controller.Other potential advantages of BAFC over the classical approach are the actuators energy consumption and the max control values. As shown in Fig. 16, the max absolute value of the control signal with the classical controller is 266 and with BAFC is 115. This means that BAFC is better in dealing with actuator saturation than the classical controller, and this will in turn minimize the effects of actuators saturation problem. Therefore, BAFC requires a smaller actuator to be used in the Robots. This observation is arguably correct because BAFC controller allocates the energy to one objective at a time rather than to two conflicting objectives. This conflict may result to increase of the control energy and may cause instability.The Lego EV3 WMRs are used in the experiments. Those WMRs (see Fig. 17) have a 32-bit, 48Mhz ARM9CPU with 16MB flash memory and 64MB RAM, Bluetooth and Wi-Fi transceivers, and two servo motors with encoders ±1° resolution. A PC interface with SIMULINK program is also required to transmit the control signal by means of Wi-Fi protocol. The SIMULINK has a powerful feature called External Mode. This feature is useful for monitoring and tuning the EV3 WMRs controller online. A Two-level controller structure uses High level and Low level controllers. The high level-controller is in the center PC, which enables the WMRs to send and receive data/command to and from the central PC.Based on the proposed control algorithm, the central PC receives the location feedback from each robot, it then calculates the error and control signals and sends the command to each robot. The low-level controller on the robot CPU (simply a closed loop speed controller) receives the commands from the PC and relays these signals to the motors. The encoders provide special measurements for the feedback. The actual time of one loop process depends on the robot sampling time (set to 25ms) and the Wi-Fi delay time, which is dependent on the computer speed and the network usage. The Robot localization is achieved by using the encoders.Two WMRs moves from initial positions [x, y, q] for the first robot[0.2,0,π2]and[0,0,π2]for the second robot. The desired path isQc=π2, xc=0.5, yc=0.1t, dc=0.3 in the cluster space that is equal to x1=0.8, y1=0.1t,q1=π2, x2=0.2, y2=0.1t ,q2=π2in the robot space, where t is the time, (see Fig. 18). In order to show the disturbance effects on each controller a software disturbance is added to Robot 2. This disturbance will hold Robot 2 for 90s with no movement see Fig. 18(A–C). The comparison now is based on how the other robot (Robot 1) will behave using both approaches (classical PD controller and the proposed BAFC).Comparing the normal PD controller response (see Fig. 19) with the fuzzy PD controller (see Fig. 20), the BAFC gives more priority to the shape than the normal PD. Fig. 21shows the improved shape dynamics (the cluster angle and the distance between the robots) with the proposed BAFC controller when compared with the normal one. The Odometer uncertainties cause an accumulated error which can be lessened by calibrating the odometry equations [34,35]. Also, adding a sensor-like compass can greatly reduce this error [36].

@&#CONCLUSIONS@&#
