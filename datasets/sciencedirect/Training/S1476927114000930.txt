@&#MAIN-TITLE@&#
The complex task of choosing a de novo assembly: Lessons from fungal genomes

@&#HIGHLIGHTS@&#
Three key parameters of a typical short read sequencing and de novo assembly design are the read length, the insert size and a bioinformatic parameter, the k-mer length (k); k is easy to modify, and one can monitor the effects of its variation before choosing a final k-mer length or assembly.The success and the complexity of a de novo genome assembly task depend on one's needs or priorities: gene space, all the unique DNA, or entire genome with all its repeats.When one restricts a fungal de novo assembly task to a mapping of the gene space by reliable sequences, k often plays only a very minor role, but a correct choice of k can be far from trivial if one needs to map the genome's repetitive regions.Plotting metrics that assess presence of DNA and its genes and repeats in a de novo assembly versus k-mer length used can give valuable insight into an assembly process and its variation.

@&#KEYPHRASES@&#
Genome assembly methods,Repetitive DNA,Next-generation sequencing,

@&#ABSTRACT@&#
Selecting the values of parameters used by de novo genomic assembly programs, or choosing an optimal de novo assembly from several runs obtained with different parameters or programs, are tasks that can require complex decision-making. A key parameter that must be supplied to typical next generation sequencing (NGS) assemblers is the k-mer length, i.e., the word size that determines which de Bruijn graph the program should map out and use. The topic of assembly selection criteria was recently revisited in the Assemblathon 2 study (Bradnam et al., 2013). Although no clear message was delivered with regard to optimal k-mer lengths, it was shown with examples that it is sometimes important to decide if one is most interested in optimizing the sequences of protein-coding genes (the gene space) or in optimizing the whole genome sequence including the intergenic DNA, as what is best for one criterion may not be best for the other. In the present study, our aim was to better understand how the assembly of unicellular fungi (which are typically intermediate in size and complexity between prokaryotes and metazoan eukaryotes) can change as one varies the k-mer values over a wide range. We used two different de novo assembly programs (SOAPdenovo2 and ABySS), and simple assembly metrics that also focused on success in assembling the gene space and repetitive elements. A recent increase in Illumina read length to around 150bp allowed us to attempt de novo assemblies with a larger range of k-mers, up to 127bp. We applied these methods to Illumina paired-end sequencing read sets of fungal strains of Paracoccidioides brasiliensis and other species. By visualizing the results in simple plots, we were able to track the effect of changing k-mer size and assembly program, and to demonstrate how such plots can readily reveal discontinuities or other unexpected characteristics that assembly programs can present in practice, especially when they are used in a traditional molecular microbiology laboratory with a ‘genomics corner’. Here we propose and apply a component of a first pass validation methodology for benchmarking and understanding fungal genome de novo assembly processes.

@&#INTRODUCTION@&#
“Complexity” is, itself, a complex concept. In a review of complexity and its measures in the context of DNA, Li (1997) has correctly pointed out the need to occasionally return to first principles when considering which, if any, of the more widely used (and sometimes not fully interchangeable) definitions of complexity is most relevant to a given task at hand. Indeed, the task itself can be used to define a measure of complexity of a genome (or other object), namely the difficulty of accomplishing that task on the genome (Li, 1997and refs. therein).A task associated with eukaryotic genomics that has become increasingly important for individual laboratories as DNA sequencing costs continue their decrease is the task of obtaining a reliable, annotated de novo assembly of a genome of a species, isolate/strain/population or, especially in large metazoans, of an individual. Depending on the questions one wishes to answer by obtaining genome sequences, in some contexts one may be interested primarily in obtaining the sequences of all genes or coding regions of the genome being studied; in other contexts one may also need to obtain the unique intergenic regions that could be relevant for the genes’ expression such as promoters and enhancers; finally, one's aim may be to offer to the community a ‘full’ reference sequence for a genome, including as much of its repeat landscape as is feasible given the available technology, time and funds. The optimal design or simulation of a sequencing strategy, and indeed the ‘complexity of the genome’ one faces, can vary depending on the precise task of interest.Clearly it can be of much utility if one can design, compare and then choose a relatively optimal sequencing strategy together with the subsequent steps of assembly and annotation, before embarking on the actual library preparation and sequencing (Muñoz et al., 2014). For this one needs to know what one wants most, e.g., what cost-effectiveness, cost–utility or cost–benefit tradeoffs (Drummond et al., 2005) one is prepared to make, and what sequencing technologies, options, and hardware configurations are available to one's laboratory.There have been promises of what the next NGS generation (post-next generation sequencing, or third/fourth generation sequencing), will soon be able to offer. Some of the promises still need to be fulfilled, however. As a recent article in Science (Pennisi, 2014) has emphasized, because of various delays we have still not fully arrived at the goal of empowering small laboratories to enjoy reliable, stand-alone implementations of the projected new technologies that fit within their often modest budget.In this article, we therefore focused on a second generation technology, Illumina short read sequencing (single or paired-end reads), a widely used solution that has consistently remained accessible and typically reliable now for several years, for which costs charged by some service providers have decreased, and for which read lengths have recently increased to about 150bp. Insights obtained for this specific technology can be partly generalized or extrapolated, mutatis mutandis, to other read sequencing technologies that also use de Bruijn graph-based assembly methods (Compeau et al., 2011). Also, a recent analysis by Li et al. (2014) in the context of reference assembly, showing that mappability of reads (or r-mers) to reference sequences does not markedly improve above read lengths r of 150–200bp, could suggest that at least some findings for de novo assembly of currently available (≈150bp) reads might extrapolate well to longer Illumina reads that may be available in future.We will restrict our genomic context to unicellular fungi, eukaryotes that have served as models of metazoan eukaryotes (including human) in many respects including disease (Bassett et al., 1996; Foury, 1997), and that represent an intermediate in size and complexity between the genomes of prokaryotes (bacteria or archea) and those of vertebrates and flowering plants. Since the prime model fungus, the baker's yeast S. cerevisiae, has a relatively compact nuclear genome, we break with tradition by choosing as our main example another, less compact fungal genome that has recently been fully sequenced, assembled and annotated (Desjardins et al., 2011), the thermally dimorphic human pathogenic fungus Paracoccidioides brasiliensis. Its nuclear genome has a larger size and contains more repetitive DNA than yeast, and in this respect it may be more representative of other eukaryotes and their assembly challenges.In short read sequencing of such genomes, and the subsequent processing of the reads, there are at least three stable, key parameters that can currently be considered fundamental (Fig. 1). Other measures or parameters determining the success of an assembly include measures pertaining to read depth or coverage, and non-tunable measures reflecting the repeat structure or profiles of the genome itself.Two of the key parameters depicted in Fig. 1 are sequencing-related, namely the read size r and, if paired-end reads are used as part of the design, also the insert size I of the insert library. In actual practice, where there is a spread of insert sizes, one can take the mean insert size, i.e., the average fragment size <Io>, to represent the insert size (see Fig. 1), or one can include more information ranging from the standard deviation to an estimate of the full frequency distribution of fragment lengths given by an electropherogram.The third key parameter depicted in Fig. 1 is a bioinformatic parameter that is used only after the sequencing of the raw reads is done, the so-called k-mer length, or k. This parameter is the length of a read's fixed-length subsequences, or words, that are used in the de Bruijn graph-based assembly steps that form a part of most modern, widely used short-read assembly programs (Compeau et al., 2011). Given the value of k, the assembly program traces out from the reads the corresponding regions of a full de Bruijn graph over an alphabet of size 4 (i.e., 0,1,2,3 or A,C,G,T) and dimension k (Berge, 2001, p. 167 ff.). In this way, flows on the de Bruijn graph correspond to successive 1-step shifts of a window of size k traversing a sequence. At least conceptually, one needs to generalize the de Bruijn graph because reverse complements should not be counted twice (Medvedev and Brudno (2009), cf. also Deng and Wu (2005)). Implementations differ, but they all involve steps in which regions of a full de Bruijn or de Bruijn-like graph are traced out by the reads and the flows are recorded (see Muñoz et al. (2014) and refs. therein). Which de Bruijn-like graph is partially constructed is decided by the parameter k. The value of k can also be thought of as the ‘window size’ through which these steps of the assembly program ‘see’ the reads. A further consideration, which different assembly programs may deal with in different ways, is the additional constraint on the possible assemblies imposed by the pairing of the reads, i.e., by the knowledge of which reads are paired, together with the knowledge of the frequency distribution of the insert/fragment sizes in the library used for sequencing: this is where the experimental parameter I is needed.The ability to wisely choose options and parameters ensuring a good de novo assembly is a valuable asset when designing a sequencing project for a fungal genome. One sometimes needs to consider bioinformatic options or parameters at the same time as one chooses experimental details for the initial read sequencing (as one would do when writing a grant proposal). Given a selected fungal organism (species and strain/isolate) and a particular experimental strategy, which for Illumina short-read sequencing will always involve choosing read length r and usually also insert length(s) I, what assembly and annotation quality could we expect in the best possible case? A closely related reference species’ existing assembly or reads, where available, can often help answer this question in silico. Simulated reads can be obtained from the scaffolds by in silico ‘sonication’ and fed to a series of different assembly and annotation runs with different parameters/choices, thus averting unpleasant surprises later, such as the discovery that one's choice of read or insert length was inherently unsuited for the chosen genome and task. Low and high k values may have different advantages and drawbacks.The problem addressed here, the choice of an assembler and ‘k strategy’, or the choice of an assembly from a set of assemblies obtained from the same reads using different strategies, is indeed a complex one, depending also on the repeat complexities of the genome of interest, as is now finally being acknowledged (see, e.g., Haznedaroglu et al. (2012) and refs. therein). In a single contribution presenting original data it would be very difficult to do justice to this complex problem if one insists on also maintaining generality, providing an exhaustive review, or suggesting general guidelines that one cannot feasibly alpha-test. In this contribution, we therefore choose a restricted context, and report results from an initial exploration of fungal assemblies from real reads, using two widely used assembly programs or pipelines that were run over a wide range of k-mer lengths: the SOAPdenovo2 pipeline (up to but not including the final GapCloser run; Luo et al. (2012)) and the ABySS program (Simpson et al., 2009). We imagine a typical molecular microbiology laboratory endowed with a medium-sized grant to initiate constructive genomics work (e.g., a server with no more than 64GB RAM), and having no bioinformatic ‘insider information’ or dedicated informatic personnel, i.e., no access to tips, tricks or ‘tweaks’ that are not available in the public domain. Although Illumina read-based quality reports and other analytical studies have been offered before, to our knowledge few if any focused on non-model fungi having repeat-rich genomes, or 150bp read sets; including such realistic and timely features that are likely to reflect real in-house genomics projects allows us to obtain a wider picture.Paracoccidioides brasiliensis strains Pb113, Pb1445 and PbBAC were sequenced using an Illumina HiSeq 2500 sequencer, with 150bp paired-end reads and a nominal length (insert size) of 620bp. Insert library construction and sequencing were performed at the DNA Services facilities of the University of Illinois at Urbana-Champaign.Saccharomyces cerevisiae strain S288c paired-end reads were downloaded from the NCBI Sequence Read Archive (SRA), Experiment ERX240932, Run ERR266425. The reads were sequenced using Illumina HiSeq 2000 with a nominal length (insert size) of 450bp and a read length of 144bp.Although plots are shown here only for P. brasiliensis strain Pb113 as an example, full plots were also obtained for the other two P. brasiliensis strains and the S. cerevisiae strain, with corresponding findings.For comparing SOAPdenovo2 metrics at the observed jump from 49bp ≤k≤ 51bp for a third fungal genus, paired-end Illumina reads (read length 101bp) of Emmonsia crescens strain UAMH 4076 and Emmonsia parva strain UAMH 130 were used. Insert library construction and sequencing with a HiSeq 2000 sequencer were performed at the Broad Institute, Cambridge, MA (collaborative paper in preparation; NCBI Bioproject PRJNA179100).The program SOAPdenovo version 2.04-r240 (SOAPdenovo2; Linux binary for k values up to 127bp) was used with all odd (i.e., allowed) k-mer values from 17bp to 127bp. The assemblies were run essentially using default parameters (except for the k-mer values), only modifying the config files with the corresponding read lengths and insert sizes, along with the maximum read length as the read length. The recommended SOAPdenovo2 pipeline also includes the programs KmerFreq and Corrector (SOAPec_v2.01), which are run prior to calling the SOAPdenovo2 program, and GapCloser, which is run after SOAPdenovo2 as a final step. Paradoxically, however, KmerFreq comes with no clear recommendations for pre-piping reads for which one wants SOAPdenovo2 to use high k values (e.g., around 50): KmerFreq_HA does not accept k values above 27, and KmerFreq_AR uses 4GB RAM for k=17, 256GB RAM for k=19, etc., and so is not useful in normal practice even at moderately high k values. In both variants of KmerFreq, the defaults were 17, so we used that value for all assemblies in KmerFreq_AR (-k 17-q 33-t 10) and Corrector_AR (-k 17-l 3-Q 33-r 50-t 12). Because we wanted to focus on the processes of the core assembly program, we did not attempt to close the gaps remaining after SOAPdenovo2 by running GapCloser.ABySS version 1.3.7 was used with all odd k-mer values from 17bp to 127bp. The assemblies were run using default parameters.BLASTX version 2.2.28+ was run locally with default settings using protein sets from reference annotations as the database, and the 17–127bp k-mer assemblies were the query.Augustus (Keller et al., 2011, http://bioinf.uni-greifswald.de/augustus/) was used for fully automated gene calling on each assembly.RepeatMasker version open-4.0.3 was used to detect repetitive elements in each assembly using the fungal repeats data set from Repbase.LTR_Finder version 1.0.5 (tlife.fudan.edu.cn/ltr_finder/) was used to find long terminal repeat (LTR) transposons in each assembly, with default settings.

@&#CONCLUSIONS@&#
