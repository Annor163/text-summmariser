@&#MAIN-TITLE@&#
A low-power SHA-3 designs using embedded digital signal processing slice on FPGA

@&#HIGHLIGHTS@&#
Two low-power SHA-3 designs are provided on UltraScale FPGA using its embedded Digital Signal Processing (DSP) slice; one for the area constrained environments and the other for high-speed applications.All bitwise logical operations of SHA-3 are logically grouped in 48-bit wide parallel operations to get maximum benefit of Xilinx DSP48E2 slice structure.Logical Cascade Structure (LCS) strategy is used to confine maximum SHA-3 logic within same DSP slice column and also to get maximum benefit from its low-power dedicated interconnect.The DSP based compact SHA-3 design utilizes 79.10% less DSP slices and consumes only 1/7th of power while high-speed 1600-bit design provides 23.57 Gbps with consumption of only 1/5th of power.

@&#KEYPHRASES@&#
Cryptography,Secure hash algorithm-3 (SHA-3),Field programmable gate array (FPGA),Keccak,DSP48E slice,Logical cascade structure (LCS),

@&#ABSTRACT@&#
This work presents two low-power Secure Hash Algorithm-3 (SHA-3) designs on Field Programmable Gate Array (FPGA) using embedded Digital Signal Processing (DSP48E) slice, one for area constrained environments and the other for high-speed applications. The seven equations of SHA-3 are logically optimized to three and four stage pipelined organizations for our compact and high-speed designs, respectively. The maximum parallelism between all the bitwise operations of different stages of SHA-3 is explored with respect to the 48-bit structure of DSP slice. Further Logical Cascade Structure (LCS) design strategy is proposed in accordance with the DSP slice organization. These optimizations result in saving of resources and at the same time achieve low-power with high performance. Our compact design results in saving of 79.10% DSP slices and consumes only 1/7thof power while 1600-bit DSP design provides 23.57 Gbps throughput and consumes only 1/5thof power as compared to the conventional SHA-3 designs.

@&#INTRODUCTION@&#
Secure Hash Algorithm-3 (SHA-3) was announced as a new cryptographic hash standard by National Institute of Standard & Technology (NIST) in 2012 [1] and the same was standardized in August 2015 as FIPS-PUB-202 [2]. It was designed to provide more security strength as compared to the previous hash functions that are nowadays vulnerable to pre-image and collision attacks [3,4]. Hardware implementations of SHA-3 on Field Programmable Gate Array (FPGA) are gaining more importance in order to meet real-time constraints such as high-speed (data rates) and low-power consumption of emerging systems. On communication platform like Internet of Thing (IoT) and in IPv6 over Low-power Wireless Personal Area Networks (6LoWPAN), the power consumption of SHA-3 core is a critical issue while in wired and wireless data networks, high data rates are also important as well. Similarly the same attributes are the major implementation requirements for all modern applications. Therefore there is a need for an efficient FPGA based SHA-3 core that has low-power consumption and also provides high data rates in order to meet the demanding requirements of modern applications.All modern FPGA devices, apart from standard Slices & Look-Up-Table (LUT) primitives, are now also equipped with dedicated embedded resources like Block RAM (BRAM) and Digital Signal Processing (DSP) slices. These embedded resources can result in high performance and low-power designs, if efficiently explored and utilized. The basic structure of DSP slice i.e. DSP48 is almost same in all the series of Xilinx FPGAs with some enhancements and additional features along with Multiply Accumulate (MAC) stage. Apart from MAC operation, these enhanced features can also be utilized to perform different kinds of logical as well as arithmetic functions [5].Earlier, the number of DSP slices on Xilinx FPGA fabric were very less. However, with the advancement in VLSI technology their numbers are increasing and are now available in abundant quantity in all the newer generations of FPGA families such as Xilinx 7 Series [6], UltraScale & UltraScale+ Series [7]. There are many application areas in which we require very less MAC functionality but we have lot of logic intensive computations to implement on same FPGA. In those particular scenarios these DSP resources remain unutilized during the design process, although they are physically present on FPGA chip and at the same time, the logical resources of FPGA i.e. LUT primitives & Slices are entailed for the implementation of other modules of complete system. Cryptographic accelerator card is an example of such system in which we require encryption core like Advanced Encryption Standard (AES), hash core like SHA-3 as well as complete communication system on the same fabric.Therefore, we require different design methodologies to port these logic intensive computations from conventional LUT based platform to other embedded FPGA components like DSP slices. Our proposed method in this work enabled us to shift the logical intensive functions like XOR, AND & NOT of SHA-3 algorithm from LUT primitive to these unused DSP slices and provide feasibility to save more logical resources for the implementation of other parts of system on the same chip. In addition to this, these DSP slices are low-power components as compared to their logical counterpart and have reduced set-up and clock-to-out timing characteristics. These are available in the form of DSP titles and have dedicated low-power interconnect between two cascading DSP slices that can be utilized for low-power consumption. Hence, in this work we provide low-power and resource-efficient SHA-3 cores; one for the area constrained environments and the other for the high-speed applications thereby effectively utilizing every feature of Xilinx DSP slices.The rest of the paper is organized as follows, Section 2 gives a brief description of SHA-3 compression function whereas Section 3 focusses on the architecture of DSP48 slice of Xilinx FPGA. Section 4 presents a literature survey on SHA-3 implementations while in Section 5, we provide the details of our proposed DSP based SHA-3 designs. Implementation results of our proposed designs and their comparison with previously reported SHA-3 implementations are given in Section 6. Finally, Section 7 concludes our work.Keccak-f[1600] variant of SHA-3 consists of 1600-bit of input state array that is arranged in the form of 5 × 5 matrix of 64-bit words each, as shown in Fig. 1. A[0,0] denotes number of bits from 1599 to 1536 (64-bit word), A[1,0] is from 1535 to 1472 (64-bit word) and so on as per definition of its standard [2].The permutation function of Keccak-f[1600] uses a round function that comprises of five step mappings with seven computing equations as follows.θ-Step: (0 ≤ x, y ≤ 4, 0 ≤ z ≤ 63)(1)C[x,y,z]=A[x,0,z]⊕A[x,1,z]⊕A[x,2,z]⊕A[x,3,z]⊕A[x,4,z];(2)D[x,z]=C[(x−1),z]⊕ROT(C[(x+1),1]);(3)A′[x,y,z]=A[x,y,z]⊕D[x,z];ρ-Step: (0 ≤ x, y ≤ 4)(4)A[x,y,z]=ROT(A′[x,y,z],r[x,y]);π-Step: (0 ≤ x, y ≤ 4, 0 ≤ z ≤ 63)(5)B[y,(2x+3y),z]=A[x,y,z];χ-Step: (0 ≤ x, y ≤ 4, 0 ≤ z ≤ 63)(6)A′[x,y,z]=B[x,y,z]⊕(NOT(B[(x+1),y,z])AND(B[(x+2),y,z]));ι-Step: (0 ≤ z < 63)(7)A′[0,0,z]=A[0,0,z]⊕RC[z];In above five steps; parameters x and y signify the operations within the range of modulo 5 while z is of modulo 64. The A[x, y, z] represents a particular 64-bit lane of state while B[x, y], C[x] and D[x] are the intermediate results. The five steps consist of different bitwise operations such as XOR (⊕), NOT and AND logical operations. In addition to these operations, SHA-3 also comprises of bitwise cyclic shift operator (i.e. ROT) and XORing of 64-bit Round Constant (RC) with first lane (A[0,0,z]) only. The ROT rotates the number of bits within a particular lane (64-bit) by a constant value of r[x, y] while 24 rounds of SHA-3 have different values of RC.A DSP48 slice is available in all the modern Xilinx FPGAs that can be used to perform different kinds of logical and arithmetic operations. The logical operation capability of these slices makes them more suitable for the design of efficient cryptographic hash cores in which all the operations are logical. A DSP48 slice is a built-in embedded component of Xilinx FPGA device families, such as DSP48E primitive is available in Virtex-5 [5], DSP48E1 is available in Virtex-6 & all 7 Series [8] while DSP48E2 is available in the newest UltraScale & UltraScale+ Series [9] of Xilinx FPGA.The number of DSP48 slices increase with the device size and family and are organized in the form of DSP tiles that are stacked vertically in columns. A DSP48 slice of Xilinx FPGA supports many absolute functions including multiply, multiply accumulate (MACC), three input addition, barrel shifter, bit-wise logic operations and many other mathematical functions. Multiple DSP48 slices can be cascaded to implement complex arithmetic and extensive mathematical functions. DSP48 slice offers upgraded proficiency of applications, improved utilization and decreased overall power consumption.The architecture of DSP48E2 slice in UltraScale FPGA is shown in Fig. 2. It has three direct inputs A, B and C of 30-bit, 18-bit and 48-bit respectively and one cascaded 48-bit input Pcin. Inputs A and B can be concatenated as [A:B], if design needs to implement 48-bit wide logic operation whereas A[29:0] forms the MSB while B[17:0] forms the LSB. These three inputs in DSP48E2 slice can be selected with the help of an appropriate OPMODE setting; A:B input via X multiplexer, C input via W or Y multiplexer, and Pcin via Z multiplexer while in DSP48E1 we can only select two inputs A:B input via X multiplexer and C or Pcin via Z multiplexer. Similarly, it has 48-bit output that is available at both the P and Pcout ports, where output from Pcout port can only be provided to Pcin port of the next DSP slice.The logical functionality is defined in adder/subtracter/logic unit of DSP48 slice by using ALUMODE settings that enable to implement 48-bit XOR, NOR, AND, NOT, NAND and combination of these logic operations. Furthermore, this DSP48 slice also contains internal Input/Output registers as shown in Fig. 2, that can be used for pipelining of SHA-3 design to further improve the performance with no additional hardware cost.

@&#CONCLUSIONS@&#
