@&#MAIN-TITLE@&#
Integrated production and delivery on parallel batching machines

@&#HIGHLIGHTS@&#
The problem of scheduling n jobs on m parallel batching machines is considered.The goal is to maximize the total profit earned.We show that the problem can be solved efficiently if each job has the same size.The problem becomes unary NP-hard if the jobs have different sizes.For the NP-hard cases, heuristics are given and their performance analyzed.

@&#KEYPHRASES@&#
Parallel batching machines,Coordinated production-delivery,Fixed time departure,NP-hard,Heuristics,

@&#ABSTRACT@&#
We consider the problem of scheduling a set of n jobs on m identical and parallel batching machines. The machines have identical capacities equal to K and the jobs have identical processing times equal to p. Job j has a size sj, a due date djand a profit Rj. Several jobs can be batched together and processed by a machine, provided that the total size of the jobs in the batch does not exceed the machine capacity K. The company will earn a profit of Rjdollars if job j is delivered by time dj; otherwise, it earns nothing. A third party logistic (3PL) provider will be used to deliver the jobs. The 3PL provider picks up the jobs at times T1 < T2 < ⋅⋅⋅ < Tz, and vk(1 ≤ k ≤ z) vehicles will be provided for delivery at time Tk. The vehicles have identical capacities equal to C. The objective is to find a production and delivery schedule so as to maximize the total profit that the company can earn. We show that the problem is solvable in polynomial time if the jobs have identical sizes, but it becomes unary NP-hard if the jobs have different sizes. We propose heuristics for various NP-hard cases and analyze their performances.

@&#INTRODUCTION@&#
A parallel batching machine can process several jobs simultaneously as a batch. Such machines are encountered in many manufacturing industries such as the semiconductor industry, casting industry, metal industry, aeronautical industry, pharmaceutical industry, and logistics freight (Mathirajan & Sivakumar, 2006). Since parallel batching machines are encountered in many industries, it has received tremendous attention in the literature, see Brucker et al. (1998), Mathirajan and Sivakumar (2006) and Potts and Kovalyov (2000) for a survey. Most scheduling problems in parallel batching machines are concerned with optimizing some classical objectives such as the makespan, total (weighted) completion time, maximum lateness, (weighted) number of late jobs, etc. With the advancement in the Make-To-Order (MTO) business model, these objectives are not sufficient to satisfy customer demands. A major concern in the MTO business model is the timely delivery of products to customers. This calls for a closer link between the production process and the delivery process. Integrated production and delivery scheduling have received a lot of attention in recent years, see Chen (2010) for a survey. However, these studies have been concerned with the classical scheduling model, where a machine can process only one job at a time. In this paper we consider production-delivery scheduling on parallel batching machines. To the best of our knowledge, no one has ever studied this problem before.Consider a manufacturing plant that has m (m ≥ 1) identical and parallel batching machines,M={M1,M2,…,Mm}. Each machine has a capacity K. There are n (n ≥ 1) jobs,J={J1,J2,…,Jn},each of which will be processed by one of the machines. Each job has a processing time p. Job Jjhas a size sj, a due date djand a profit Rj. Several jobs can be batched together and processed by a machine simultaneously, provided that the total size of all the jobs in the batch does not exceed K. If job Jjis processed by one of the machines and delivered by its due date dj, the company will earn a profit of Rjdollars; otherwise, it earns nothing. The company hires a third party logistic (3PL) provider to deliver products to the customers. The 3PL provider comes to the manufacturing plant at times T1, T2,…,Tz(T1 < T2 < ⋅⋅⋅ < Tz) to pick up the products and delivers to the customers. We assume that all jobs can start processing at time 0 and that Tzis an integral multiple of p. At time Tk, 1 ≤ k ≤ z, the 3PL provider provides vkvehicles, each of which has capacity C. That is, each vehicle can deliver a number of jobs whose total size does not exceed C. We assume that sj≤ K and sj≤ C for each 1 ≤ j ≤ n. A job cannot be split and delivered by two or more vehicles. From the company point of view, the goal is to find a schedule so that it can earn a maximum profit; in other words, find a subsetJ′⊆Jsuch that each job inJ′can be processed and delivered by its due date and∑Jj∈J′Rjis maximized.The due date of each job is obtained by offsetting the customer’s actual due date by the delivery time from the manufacturing plant to the customer. There are two models concerning the capacity C of the vehicles. The first model assumes that each job takes one unit of the capacity, regardless of the size of the job. If the sizes of the jobs are identical, then we can assume, without loss of generality, that each job takes one unit of capacity. Even if the jobs have different sizes, this model assumes that each job is packaged into a standard-size pallet for delivery convenience, regardless of the job size. Thus, each vehicle can deliver at most C jobs in this model. The second model assumes that each job will take an amount of capacity equal to the size of the job. This model is only applicable to jobs with different job sizes. In this case, a vehicle may deliver less than C jobs even though the vehicle is completely filled. We shall call the first model “model 1” and the second model “model 2”.While we formulate the problem that the company hires a 3PL provider to deliver products, the problem is also applicable to the situation where the company owns the vehicles and delivers the products by themselves. The company may have several manufacturing plants located in various places, and it has a fixed number of vehicles. Due to their integrated production-distribution planning, this particular manufacturing plant will be given vkvehicles at time Tkfor its own disposal. Therefore, the problem is the same as what we have just described.It will be more convenient to represent our problem by a 3-field notation (Graham, Lawler, Lenstra, & Kan, 1979). In the α-field, we use P to denote m identical and parallel machines, where m is arbitrary. Likewise, we use 1 to denote a single machine. In the β-field, we use “p-batch” to denote the parallel batching machines. We use “fdep” to denote shipping with fixed delivery departure dates, see Chen (2010) for an explanation of the notation “fdep”. We use “model1” and “model2” to denote “model 1” and “model 2”, respectively. For example,P∣fdep,p-batch,sj=1∣∑Rjdenotes the problem with all jobs having identical sizes. Since the jobs have identical sizes, “model 1” will be assumed for delivery capacity. The problemP∣fdep,p-batch,model2,Rj=1∣∑Rjdenotes that the jobs have identical profits but different sizes, and “model 2” will be assumed for delivery capacity. The problem P∣ fdep, p-batch, model1 ∣∑Rjdenotes that the jobs have different sizes and different profits, but “model 1” is assumed for delivery capacity.Our problem can also be viewed as a double bin-packing problem as follows. There are two types of bins. The first type of bins correspond to machines with each bin having a capacity of K. We call this type of bins the “machine-bins”. The second type of bins correspond to vehicles with each bin having a capacity of C. We call this type of bins the “vehicle-bins”. For each k, 1 ≤ k ≤ z, there arem⌊Tk−Tk−1p⌋type-k machine-bins, where T0 is defined to be zero. In addition, there are vktype-k vehicle-bins. Each job Jjcan be viewed as consisting of two pieces. The problem is to pack the first piece of Jjinto one of the type-e machine-bins (1 ≤ e ≤ z), and then pack the second piece into one of the type-f vehicle-bins, with the restriction that f ≥ e. If Tf≤ dj, then we can obtain a profit of Rjfrom job Jj; otherwise, we obtain nothing from job Jj. Our problem is to pack a subset of jobs so that we can maximize the total profit from this subset of jobs.There are two models of the problem. In “model 1”, the first piece of job Jjhas a size of sjwhile the second piece of Jjhas a size of 1. In “model 2”, the first piece and the second piece have the same size of sj.This double bin-packing problem is rather unusual in that the packing is done twice, once on the machine-bins and once on the vehicle-bins. Moreover, the packing on the vehicle-bins cannot be on a lower type than the packing on the machine-bins. Furthermore, the packing on the vehicle-bins is restricted to be on any type-f vehicle-bins, where Tf≤ dj. Also, the sizes of the pieces can be different in “model 1”. The objective is not the usual bin-packing objectives such as the number of bins used, or the number of pieces packed. Instead, there is another profit parameter that we want to maximize. We have not seen this kind of bin-packing problem in the literature. Therefore, we do not know if there is any result related to this bin-packing problem. As we shall see in the following, if the jobs have identical sizes, i.e.,sj=1for each 1 ≤ j ≤ n, then the problem can be solved in polynomial time. On the other hand, if the jobs have non-identical sizes, then the problem is unary NP-hard, even though we have one type of machine-bins, a single vehicle-bin,m=1andRj=1for each 1 ≤ j ≤ n. For various NP-hard cases, we provide fast heuristics and analyze their performances.The rest of the paper is organized as follows. In the next section we will review existing literature concerning parallel batching machines and integrated production-delivery scheduling. In Section 3, we provide a polynomial-time algorithm to solve the case of identical sizes. In Section 4, we prove that the problem becomes unary NP-hard when the jobs have different sizes. In Section 5, we give a fast heuristic for “model 1” and analyze its performance. In Section 6, we give a fast heuristic for “model 2” and perform computational studies on the heuristic. Finally, we draw some concluding remarks in Section 7.

@&#CONCLUSIONS@&#
