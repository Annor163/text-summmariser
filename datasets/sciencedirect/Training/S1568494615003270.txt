@&#MAIN-TITLE@&#
Two-phase neighborhood search algorithm for two-agent hybrid flow shop scheduling problem

@&#HIGHLIGHTS@&#
Two-agent hybrid flow shop scheduling problem is first considered.The feasibility model is considered unlike most of literature on multi-agent scheduling.A two-phase neighborhood search is proposed, which is composed of VNS and ILS.Two variable neighborhood mechanism and an effective perturbation are used.Computational results show the promising advantage of the proposed algorithm.

@&#KEYPHRASES@&#
Hybrid flow shop scheduling,Feasibility model,Two-phase neighborhood search,

@&#ABSTRACT@&#
In this paper hybrid flow shop scheduling problem with two agents is studied and its feasibility model is considered. A two-phase neighborhood search (TNS) algorithm is proposed to minimize objectives of two agents simultaneously under the given upper bounds. TNS is constructed through the combination of multiple variable neighborhood mechanisms and a new perturbation strategy for new current solution. A new replacement principle is also applied to decide if the current solution can be updated. TNS is tested on a number of instances and compared with the existing methods. The computational results show the promising advantage of TNS on the considered problem.

@&#INTRODUCTION@&#
In the scheduling problem with multiple agents, all agents compete on the use of common processing resources and each of them wishes to minimize an objective function that depends on the completion time of his/her own set of jobs. The goal of the problem is either to find a schedule that minimizes a combination of the agents’ objective functions or to find a schedule that satisfies each agent's requirement for his/her own objective function.The scheduling problems with multiple agents have attracted much attention in the past decade since the pioneering works of Agnetic et al. [1] and Bake and Smith [2] and a large body of literature has discussed the problems in single machine, parallel machines and flow shop environments. Cheng et al. [3] study the NP-compete feature of multi-agent single-machine scheduling, in which each agent's objective is to minimize the total weighted number of tardy jobs. Cheng et al. [4] discuss the feasibility model and the minimality model of multi-agent scheduling on a single machine. Lee et al. [5] propose three genetic algorithms (GA) for two-agent single-machine scheduling with release time. The objective is to minimize the total tardiness of jobs from the first agent given that the maximum tardiness of jobs from the second agent does not exceed an upper bound. Yin et al. [6] consider several two-agent single-machine scheduling problems with assignable due dates and provide polynomial-time algorithms. Liu et al. [7] discuss the optimal properties of two-agent single-machine scheduling with sum-of-processing-times-based deterioration and present some polynomial time algorithms to solve the problem. Wu et al. [8] propose a branch-and-bound (BB) algorithm and a tabu search (TS) for two-agent single-machine scheduling with deterioration jobs.With respect to multi-agent parallel machines scheduling, Li and Yuan [9] consider the constrained optimization problem with unbounded parallel-batch machines and two agents and provide polynomial-time and pseudo-polynomial-time algorithm. Elvikis et al. [10] discuss the problem with two conflicting objectives and provide polynomial time algorithms for solving the problem. Fan et al. [11] study the NP-hard feature and polynomial solvability of bounded parallel-batching scheduling with two competing agents and different objectives.Some studies have considered multi-agent scheduling in flow shop environments. Lee et al. [12] study a two-machine flow shop problem with two agents where the objective is to minimize the total completion time of first agent with no tardy jobs for the second agent. Lee et al. [13] consider two-agent two-machine flow shop scheduling problem and develop a BB algorithm and simulated annealing (SA) to minimize the total tardiness of the first agent with no tardy jobs for the second agent. Luo et al. [14] investigate the weighted-sum optimization model and the constrained optimization model and study approximation schemes for two-machine flow shop scheduling with two agents.The previous studies on multi-agent production scheduling problems have the following features:(1)Most of papers have been presented for multi-agent scheduling on single machine. Multi-agent scheduling is not considered fully in many-machines environments, for example, scheduling problem in hybrid flow shop has attracted much attention [15–17]; however, to the best of our knowledge, multi-agent scheduling problem is not considered in hybrid flow shop.The polynomial-time algorithm and mathematical programming methods are main approaches to solve the problem. The applications of meta-heuristics such as GA, TS and SA are not extensively investigated.In most of literature, multiple objectives are involved and the goal is to optimize an objective of jobs from the first agent given that the objective of jobs from the second agent does not exceed an upper bound. Generally, all agents should have the same chance to compete for the common resources and the objectives of them should be dealt with equally and optimized simultaneously. It is not fair to optimize the objective of only one agent.Iterated local search (ILS) is a simple stochastic local search method, in which perturbations of the current solution is used to overcome local optimality. ILS has been applied to many combinatorial optimization problems [18–21]. Variable neighborhood search (VNS) is also a local search based meta-heuristic, which has been extensively applied to a number of production scheduling problems [22–25]. The characteristic variable neighborhood mechanism can effectively avoid the search of VNS falling into the local optima.ILS and VNS have been proved that they are competitive when they are applied to solve scheduling problem; however, some difficulties still exist in their applications. For ILS, its perturbation can produce new starting points; however, the inappropriate perturbation may lead to the frequent deterioration of quality of the current solution, as a result, the solution of ILS cannot be improved after many iterations and the search of ILS may stagnate. For VNS, more than one variable neighborhood mechanism can increase its exploration ability. When multiple variable neighborhood mechanisms are combined with the appropriate perturbation, the advantages of ILS and VNS can be used fully.In this study hybrid flow shop scheduling problem (HFSP) with two agents is considered, which is composed of operation sequence sub-problem and machine assignment sub-problems. The feasibility model is considered. The goal of the problem is to minimize objectives of two agents simultaneously under the given upper bounds. Obviously, the problem is multi-objective one with two sub-problems. The optimization difficulties of the problem and the advantages of the combination of ILS and VNS motivate us to propose a TNS for the problem.The remainder of the paper is organized as follows. Problem under study is described in Section 2. The proposed algorithm for the problem is shown in Section 3. Numerical test experiments on TNS are reported in Section 4. The conclusions are summarized and some topics of the future research are provided in the final section.HFSP is generally to optimize the processing of a set of n jobs in a series of m stages in terms of certain objectives. At least two machines exist on at least one stage. HFSP is quite common in practice, especially in the process industry. In general, it is assumed that all jobs of HFSP come from the same agent; however, more than one agent provides processing tasks for the same manufacturer.Notations used in this section are listed below:nthe number of jobsmthe number of stagesℳkthe set of all parallel machines on stage k=1,2,…,mSlthe set of jobs of agent AGl, l=1, 2pihkthe processing time of job Jion machine h of stage k,1≤h≤ℳkCilthe completion time of job Jifrom AGl, l=1, 2dildue date of job Jifrom AGl, l=1, 2In this study, HFSP with two agents consists of n jobs and m stages. There are n jobs J1, J2, …, Jnbeing processed according to the same production flow: stage 1, stage 2,…, stage m. There areℳk≥1machines in parallel on stage k andℳk>1is set for at least one stage. Each job belongs to either the first agent AG1 or the second agent AG2. Processing constraints of HFSP can be directly adopted in the problem, for example, each machine can only process one job at a time.The goal of the problem is to obtain an appropriate processing sequence and machine assignment of all jobs to minimize the following two objectives simultaneously.(1)Minimizef1=maxi∈S1Ci1(2)Minimizef2=∑i∈S2maxCi2−di2,0where the first objective f1 is the maximum completion time of jobs of the first agent and the second objective f2 is the total tardiness of jobs of the second agent.Obviously, the schedule of the problem is composed of jobs of two agents and these jobs affect each other. We cannot schedule jobs of each agent independently and should treat each job equally, as a result, the considered problem can be regarded as the traditional HFSP when it is solved using meta-heuristics; moreover, the makespan of the first agent and the total tardiness of the second agent must conflict each other because of the competition between agents for processing resources. These characteristics show that the problem is a multi-objective one in essence. Table 1shows an illustrative example of the problem, where “_” indicates no due date is considered for jobs of AG1.Cheng et al. [3,4] considered the following two models in single machine environments.(1)Feasibility model: objectives should satisfies fi≤Qi, i=1, 2, …, TMinimality model: the sum of all objectives∑i=1Tfishould be minimized.In most of the literature on two-agent scheduling, the task is to find a schedule that minimizes the objective of first agent given that the objective of jobs from the second agent does not exceed an upper bound. There are some defects on the above handling, for example, the objective of only one agent is minimized and the optimization results may be just beneficial to only one agent. When two agents should be treated fairly, the feasibility model should be applied because many feasible solutions meeting fi≤Qican be obtained, from which the win-win schedule for two agents can be chosen.For the problem with minimization of f1 and f2, the optimal result is not a single solution but a set of solutions; moreover, the optimal set cannot be obtained without comparing all solutions. When solutions in a set are compared each other, take x and y as an example, if fi(x)≤fi(y) for∀i∈1,2and fi(x)<fi(y) for∃i∈1,2, then x dominates y; if a solution x cannot be dominated by any other solutions in the same set, x is non-dominated solution regarding the set. If a solution is not dominated by other solutions in search space, the solution is Pareto optimal. Pareto front is the set of all Pareto optimal solutions.When all objectives of the problem are optimized simultaneously, the goal is to obtain a set of non-dominated solutions which locate on the Pareto front and cover the whole front. To implement the goal, some steps such as sorting solutions based on Pareto dominance must be added in the multi-objective optimization method, as a result, the construction of the multi-objective method is often more difficult than that of the single-objective one.The main steps of ILS are local search and perturbation. The general framework of ILS is as follows: for initial solution x0, a local search is applied to x0 and a new solution x is obtained. The following steps are repeated until the termination condition is met: (1) perturbation is performed on x and a solution x′ is generated; (2) local search is applied to the solution x′ and a solution x″ is obtained; (3) the acceptance criterion is used to decided if x can be replaced with x″.Contrary to other meta-heuristics based on local search such as TS and SA, VNS does not follow a trajectory but explores increasingly distant neighborhoods of the current incumbent solutions and jumps from this solution to a new one if and only if an improvement has been made. In this way the favorite features of the incumbent solutions are kept and used to produce the promising neighborhood solutions.As shown above, ILS and VNS have been proved that they can effectively deal with production scheduling problem; however, they are seldom applied to multi-agent scheduling problems. In this paper TNS combining VNS with ILS is proposed for HFSP with two agents.Obviously, jobs of two agents cannot be scheduled independently and should be scheduled together because of the sharing of resources, so the representation of the traditional HFSP can be adopted.For the problem with n jobs, a job permutationπ1,π2,…,πnand a string of the assigned machines of all operationsθ11,θ12,…θ1m,…,θn1,θn2,…,θnmused to indicate its solution, whereπi∈1,2,…,n, θik∈ℳkis the machine assigned to job Jiat stage k. In the second string, the first m machines are allocated into the m operations of job J1, the second m machines are assigned to all operations of J2 and so on.When the job permutation and the machine assignment string are decoded, the processing of the job π1 is first done on machineθπ11at stage 1, then π1 is processed on machineθπ12of stage 2, and so on; after the processing of π1 is done at all stages, the processing of π2 is begin on the machineθπ21, and then on machineθπ22and so on; after the processing of π2 is done at all stages, the remained jobs are processed sequentially according to the job permutation and the string of the assigned machines.The technique of moving from a solution to its neighborhood one is neighborhood structure. Many neighborhood structures have been applied to scheduling problems. Neighborhood structure should prevent any infeasible solutions. In this section, four neighborhood structures are used to produce new solutions in TNS.For job permutationπ1,π2,…,πnof the current solution x,swapis described as follows: a pair of jobs πiand πj, i≠j, are randomly chosen and exchanged. Neighborhood structure insert is defined as follows: a job πiis stochastically selected, a position j is randomly chosen, and then the job πiis inserted into the position j. Neighborhood structure insert1 is described below: three jobsπi1,πi2andπi3are stochastically chosen and deleted from the permutation, thenπi3is inserted into position i1,πi1is into position i2 andπi2into position i3.Neighborhood structurechange(v)is used to change the machine assignment of some chosen operations. The detailed steps ofchange(v)are shown as follows: the following steps are repeatedvtimes: (1) setΘ=oijℳj>1,i=1,2…,n,j=1,2…,mis first determined; (2) an operation is randomly chosen from the set Θ, for example, oijis selected, and then (3) a machine is randomly selected from ℳjand allocated to oij.We letN1indicateswap,N2denote insert,N2represent insert1,N4indicatechange1andN5denotechange2in this paper. When neighborhood structureN1i=1, 2, 3, 4, 5 is applied to the current solution x and a new solutiony∈Nixis obtained, a new replacement principle is applied: if x∈Ω and y is not dominated by any solutions in Ω, or if x∉Ω and y is not dominated by x, then y becomes the new current solution, whereNixis the set of neighborhood solutions of x produced withNiand Ω is the set of the non-dominated solutions generated by TNS. The different conditions based on the solution quality are used in the above method to decide if x can be replaced with the new solution.When multiple objectives are optimized simultaneously, the set Ω should be updated using new solutions of TNS. After a neighborhood structureNiis performed on the current solution x, if x can be replaced with a new solutiony∈Nix, then the set Ω is updated in the following way: x is included into the set Ω, all solutions in Ω are compared in terms of Pareto dominance and the dominated ones are deleted from Ω.Two variable neighborhood mechanisms are used. The first one withN1,N2,N3is applied to the operation sequence sub-problem and the second one withN4andN5is constructed for the machine assignment problem.In ILS, perturbation is used to modify the current solution to avoiding falling into the local optima. We perturb the current solution in the following way: when a predetermined condition is met, for example, perturbation is done after m_it1 iterations, a solution y is randomly chosen from the non-dominated set Ω and then neighborhood structureswapis performed on y, the obtained solution y′ directly substitutes for the current solution x, where m_it1 is an integer.Unlike the existing ILS, the ILS part of TNS has the following features: (1) the perturbed solution does not come from the neighborhood of the current solution and is obtained by perturbing a chosen member from the set Ω; (2) Perturbation is not done in the early search stage of TNS.The detailed procedure of TNS is shown as follows.(1)Start with a randomly produced initial solution x and construct the initial non-dominated set Ω, iter=1(2)Whileiter≤m_itdo(1) k1←1, k2←4.(2) Randomly generate a new solutiony∈Nk1x; if the current solution x and y meet the conditions in the replacement principle, then replace x with y and continue the search withN1(k1←1); otherwise, k1←k1+1.(3) if k1>3, then k1←1.(4) Randomly generate a new solutiony∈Nk2x; if the current solution x and the new one meet the conditions of the replacement principle, replace x with y and continue the search withN4(k2←4); otherwise, k2←k2+1.(5) if k2>5, then k2←4.(6) Update the set Ω using the current solution if possible, iter←iter+2.(7) If iter>m_it1, then perturb the solution x, update the set Ω and iter←iter+1.(3)End while(4)Output all members of set Ω which meet fi≤Qi, i=1, 2.where m_it is the maximum number of iteration.Generally, objectives cannot exceed the predetermined upper bounds in the feasibility model; however, these upper bounds are not considered in the search process of TNS to simplify the handling on objective constraint and make TNS freely explore new solutions. If upper bounds are considered with the beginning of the search, the set Ω will be empty in many iterations and the first condition of the replacement principle does not work. On the other hand, stagnation can be effectively avoided when perturbation is done after m_it1 iterations and the deterioration of new starting point is controlled. The exploration ability of TNS is also improved because of the usage of two variable neighborhood mechanisms. These features guarantee that TNS is reasonable and effective for the considered problem.Extensive experiments are conducted on a set of problems to test the performance of TNS for the considered problem. All experiments are implemented by using Microsoft Visual C++ 7.0 and run on 2G RAM 4.0G CPU Pentium PC.As stated in Section 1, multi-agent scheduling problem is not considered in hybrid flow shop, so no benchmark instances are existed for the considered problem. We construct six problems with m=5, 10 and n=40, 50, 60, 80, 100, 200. Some instances are stochastically generated for each problem according to the value ofS1so that 66 problem instances are obtained. For each instance, for job Ji, pihkis integer randomly produced on [30,100], for job Jiwith i≤15,di∈320,670and for Jiwith i>15,di=di−15+δ,δ∈70,290. Qiis an upper bound of fiand should have been provided in the benchmark instances; however, there are no such instances, so we decide Qiaccording to the initial schedule and the convergence curve of TNS without step (4). Table 2shows the set of ℳk. TNS randomly run 20 times for each instance and total∑i=166∑j=120σijdata are generated, where σijis the number of non-dominated solutions produced by the jth run of TNS on the problem instance i, σij≥1.Many performance metrics have been applied to compare the results of multi-objective Pareto optimization results of the different algorithms. The following three metrics are used in this study.Metric ρiindicates the number of the elements in the setx∈Ωix∈Ω*.Distance metric DIRis used to measure the performance of non-dominated solution set Ωjrelative to a reference set Ω*.(3)DIRΩj=1Ω*∑y∈Ω*mindxyx∈Ωjwhere dxyis the distance between a solution x and a reference solution y in the normalized objective space,dxy=(f1*(x)−f1*(y))2+⋯+(fD*(x)−fD*(y))2, D is the number of objectives,fi*is the ith normalized objective using the reference solution set Ω*, the details of normalization can be found in Ishibuchi et al. [26]. The reference set Ω* consists of the non-dominated solutions of⋃j=1AΩj, A is the total number of algorithms.The smaller the value of DIR(Ωj) is, the better the solutions of Ωjare.We define a metric SP that measures the extent of Ωiusing the maximum extent in each dimension based on the metric of Zitzler et al. [27].(4)SPΩi=∑i=1Dmaxfi*x−fi*y2,∀x,y∈ΩiTwo algorithms are chosen to compare with TNS and described in this section.The first algorithm is non-dominated sorting genetic algorithm 2 (NSGA2) [28], which is a famous evolutionary algorithm and has very competitive performance on solving multi-objective problems. In NSGA2, a non-dominated sorting approach is used for each individual to create a Pareto rank, and a crowding distance assignment method is applied to implement density estimation. In fitness assignment, between two individuals, NSGA2 prefers the point with a lower rank value, or the point located in a region with fewer points if both of the points belong to the same front. Therefore, by combining a fast non-dominated sorting approach, an elitism scheme, and a parameter-less sharing method with its origin, NSGA2 is claimed to produce a better spread of solutions in some test problems. The strong search ability on multi-objective problem motivated us to choose NSGA2 as the comparative algorithm.The second algorithm is called L-NSGA [15], which is based on NSGA2 coupled with Lorenz dominance not Pareto dominance. Lorenz dominance relationship restricts the Lorenz searching space to a subset of Pareto searching space, so Lorenz dominance can increase the speed of the algorithm by focusing on the promising area; however, more computation time is needed to sort the Lorenz non-dominated solutions, Lorenz dominance is also called equitable dominance defined by Kostreva and Ogrycak [29] and extended by Kostreva et al. [30]. Dugardin et al. [15] proposed L-NSGA for reentrant hybrid flow shop scheduling and compared it with NSGA2. The computational results show that L-NSGA can approximate the optimal solutions obtained by full enumeration, so we choose L-NSGA as the second comparative algorithm. In paper [15], the same crossover and mutation are used in L-NSGA and NSGA2. In this paper, these crossover and mutation are also adopted in two GAs and applied to job permutation part of the solutions of the problem. Two-point crossover and assignment mutation are applied to the string of the assigned machine. Assignment mutation is described below: an operation is randomly chosen and reassigned a machine.

@&#CONCLUSIONS@&#
Multi-agent scheduling has attracted much attention in recent years; however, multi-agent hybrid flow shop scheduling is seldom considered. In this paper, HFSP with two agents is investigated and the feasibility model is considered, in which the objective is to minimize two agent's conflicting objectives simultaneously under the corresponding upper bounds. A new algorithm named TNS has been presented by combining multiple variable neighborhood mechanisms of VNS and the perturbation step of ILS. A new replacement principle is also applied to decide if the current solution can be updated.TNS is tested on a number of problem instances and compared with NSGA2 and L-NSGA. Computational results show that TNS can provide notably better solutions than NSGA2 and L-NSGA on most of instances. For TNS, its variable neighborhood mechanism and perturbation avoid the search falling into the local optimum and the new replacement principle guarantees the continuous improvement of solution quality.In the near future, we will continue to focus on multi-agent flow shop scheduling problem. We will discuss the problems with no-wait, blocking and deterioration jobs and try to apply some meta-heuristics to solve them. We also pay attention to the application of other meta-heuristics to multi-agent scheduling problems in more complex shop.