@&#MAIN-TITLE@&#
A formulation space search heuristic for packing unequal circles in a fixed size circular container

@&#HIGHLIGHTS@&#
First paper to consider packing unequal circles in a fixed size circular container,Proves the optimal solution has a particular form when maximising number packed,Uses formulation space search, a new and merging metaheuristic,Computational results for publicly available test instances with up to 40 circles.

@&#KEYPHRASES@&#
Circle packing,Formulation space search,Mixed-integer nonlinear optimisation,Nonlinear optimisation,

@&#ABSTRACT@&#
In this paper we consider the problem of packing unequal circles in a fixed size circular container, where the objective is to maximise the value of the circles packed. We consider two different objectives: maximise the number of circles packed; maximise the area of the circles packed.For the particular case when the objective is to maximise the number of circles packed we prove that the optimal solution is of a particular form.We present a heuristic for the problem based upon formulation space search. Computational results are given for a number of publicly available test problems involving the packing of up to 40 circles. We also present computational results, for test problems taken from the literature, relating to packing both equal and unequal circles.

@&#INTRODUCTION@&#
The problem considered in this paper concerns the packing of unequal circles in a fixed size circular container. It can be easily understood by means of an example. Consider Fig. 1 which shows five circles (of radii 1,2,3,4,5) and a circular container (of radius 6). Suppose that we wish to maximise the number of smaller circles that we pack inside the larger circular container. Which of the smaller circles should we choose and where should they be positioned?Here any packing chosen must satisfy the constraints that the packed circles lie fully inside the circular container and do not overlap. One possible solution is shown in Fig. 2. Here we have chosen to pack circles 1, 2 and 3; at the positions shown.A related problem is to maximise the area of the smaller circles that we pack inside the larger circular container. One possible solution to this problem is shown in Fig. 3. Here we have chosen to pack circles 1 and 5; at the positions shown.It is trivial to demonstrate that a solution which maximises the number of circles packed does not necessarily also maximise the area of the circles packed. For example, suppose we expand the example considered here to include a sixth circle of radius equal to the radius of the circular container. Clearly to maximise the area of the circles packed we would chose this sixth circle. But obviously a solution that involves just this single sixth circle is not optimal if we were interested in maximising the number of circles packed.This paper is organised as follows. In Section 2 we discuss the literature relating to the circle packing problem with unequal circles, as well as the literature relating to formulation space search. We also discuss the practical applications of the problem considered in this paper, as well as what we believe the contribution of this paper to the literature to be. In Section 3 we present our formulation of the problem, whilst Section 4 proves that when maximising the number of circles packed the optimal solution has a particular form. Section 5 describes the algorithm proposed. In Section 6 we present computational results and finally in Section 7 we present conclusions.In this section we review the work that has been done with respect to circle packing and unequal circles. It is important to note here that, for space reasons, we concentrate purely on literature relating to packing unequal circles. We also discuss the practical applications of the problem considered in this paper. We give a brief introduction to formulation space search (henceforth FSS) and the work that has been done using FSS. We also discuss what we believe to be the contribution of this paper to the literature.A common feature of circle packing problems with unequal circles (i.e. circles with differing sizes) as considered in the literature is that it is assumed that there exists a set of circles which all have to be packed into a container.In other words, there is no element of choice as to whether a circle is packed or not, it must be packed.This avoids introducing any combinatorial element into the problem which would complicate any solution approach.In order to pack every unequal circle in a specified set typically the container is of variable dimension. So for example if the container is a circle it is of variable radius, leading to the natural optimisation problem: find the minimum circular container radius such that all circles can be packed. This problem has been extensively considered in the literature, e.g. see (Addis, Locatelli, & Schoen, 2008; Akeb & Li, 2006; Al-Mudahka, Hifi, & M’Hallah, 2011; Castillo, Kampas, & Pinter, 2008; Fu, Huang, & Lu, 2013; Grosso, Jamali, Locatelli, & Schoen, 2010; Hifi & M’Hallah, 2009, 2008a, 2008b; Huang, Fu, & Xu, 2013; Huang, Li, Li, & Xu, 2006; Huang, Li, & Xu, 2001; Huang & Zhan, 1982; Kallrath, 2009; Liu, Xue, Liu, & Xu, 2009a; Liu, Yao, Zheng, Geng, & Zhou, 2009b; López & Beasley, 2013; Lu & Huang, 2008; Wang, Huang, Zhang, & Xu, 2002; Zhang & Deng, 2005; Zhang & Huang, 2004a).If the variable dimension container is a rectangle (of which the square is a special case) there are a number of differing objectives that have been adopted in the literature. So for the square a natural objective is to minimise the length of the side, this also minimises the perimeter and area of the square. For the rectangle natural objectives are to minimise the perimeter or minimise the area.Alternatively for the rectangle we can regard one dimension as fixed and minimise the other dimension. Problems of this type are often referred to as strip packing problems (or as circular open dimension problems).The problem of packing unequal circles into rectangular containers has also been considered in the literature, e.g. see (Akeb & Hifi, 2008, 2013; Castillo et al., 2008; George, George, & Lamer, 1995; He, Huang, & Yang, 2015; He & Wu, 2013; Huang, Li, Akeb, & Li, 2005; Kubach, Bortfeldt, & Gehring, 2009; López & Beasley, 2013; Stoyan & Yaskov, 2014; 2004; Zhang, Liu, & Chen, 2004b).In this paper we introduce the element of choice as to whether a circle is packed or not. This introduction of a combinatorial element into the problem transforms the problem from a continuous nonlinear optimisation problem into a nonlinear optimisation problem involving zero-one (binary) variables. Such problems are more generally referred to as MINLPs (mixed-integer nonlinear programming problems).To the best of our knowledge the problem considered in this paper, packing unequal circles in a fixed size circular container where there is an element of choice as to whether to pack a circle or not, has not been considered in the literature before. Indeed, as far as we aware, there is also no work in the literature relating to this problem with respect to any other containers with a circular element, such as rings and semicircles.The circle packing problem has a long history and a wide variety of applications. An introduction to its history can be found in Szabó et al. (2007). Practical applications of the circle packing problem relating to: circular cutting, container loading, cylinder packing, facility dispersion and communication networks, facility and dashboard layout, are considered in Castillo et al. (2008).The practical applications of the specific problem considered in this paper arise when, within the contexts discussed in Castillo et al. (2008), the circular container is of insufficient size to pack every circle. As such it becomes necessary to make a choice as to which circles to pack. The circular container may be of insufficient size due to economic considerations, or due to placement considerations (i.e. its size is limited as the container has to fit within a predefined space).One practical example of the problem given in this paper of which we are aware relates to fibre optic cabling. Here the circular container is an outer protective layer within which we must pack a number of circular fibre optic cables. These cables are typically of a standard diameter, such as 250 microns and 900 microns. The question therefore is how many 250 micron cables, and how many 900 micron cables, can be packed within the circular container (and their positioning). This question can be answered using the heuristic given in this paper. For example, referring to Fig. 1, suppose we have a large number of circles of diameter 250 microns, and a large number of circles of diameter 900 microns. Then we have exactly the same problem as considered above in Fig. 1, which circles should be chosen and where should they be positioned in the circular container so as to maximise an appropriate objective.Formulation space search was first introduced by Mladenović, Plastria, and Urošević (2005) in the context of circle packing (formulated as a nonlinear optimisation problem). FSS was motivated by the remark in Mladenović et al. (2005) that, when solving a nonlinear problem with the aid of a solver, the solution may not be a local optimum, but a stationary point. Stationary points are those whose derivative is zero, but are neither minimum nor maximum. Different formulations of the same problem may have different characteristics that can be exploited to escape from stationary points, and possibly find better solutions. That is, whilst in one formulation we reach a stationary point, this may not be the case in another formulation. The main idea is to solve alternatively each formulation of the problem, once the solution is the same for all formulations then a good solution has been found. Applications of FSS relating specifically to circle packing can be found in López and Beasley (2011, 2013), Mladenović et al. (2005), Mladenović, Plastria, and Urošević (2007).In López and Beasley (2011, 2013, 2014) FSS was expanded beyond the original concept of different stationary points in different formulations. That work exploits the fact that:•because of the nature of the solution process in nonlinear optimisation we often fail to obtain a globally optimum solution from a single formulation; and soperturbing/changing the formulation and then resolving the nonlinear program may lead to an improved solution.Given the above it is a simple matter to construct iterative schemes that move between formulations in a systematic manner.FSS has been applied to a few problems additional to circle packing (e.g. timetabling Kochetov, Kononova, & Paschenko, 2008). In López and Beasley (2014) FSS was used to solve some benchmark mixed-integer nonlinear programming problems. In a more general sense an adaptation to FSS was presented in Brimberg, Drezner, Mladenović, and Salhi (2014) for solving continuous location problems. More discussion as to FSS can be found in Hansen et al. (2010). A related approach is variable space search, which has been applied to graph colouring (Hertz, Plumettaz, & Zufferey, 2008, 2009). Other related approaches are variable formulation search which has been applied to the cutwidth minimisation problem (Pardo, Mladenović, Pantrigo, & Duarte, 2013), and variable objective search which has been applied to the maximum independent set problem (Butenko, Yezerska, & Balasundaram, 2013).The contribution of this paper to the literature is twofold. Firstly there is a contribution with regard to the specific problem under consideration. Here we believe that our contribution is:•to be the first in the literature to consider the problem of packing unequal circles in a fixed size circular container, where there is an element of choice as to whether circles are packed or not, and the objective is to maximise the value of the circles packedto prove that, when the objective is to maximise the number of circles packed, the optimal solution consists of the first K circles (when circles are ordered in increasing size order), for some Kto use formulation space search, a new and merging metaheuristicto present computational results for test problems, involving up to 40 circles, with these test problems being made publicly available for future workers.Secondly we believe that there is a wider contribution with regard to enhancing FSS and its applications. Here we believe our contribution is to demonstrate that the continuous FSS relaxation proposed, whereby zero-one variables are relaxed into continuous variables, together with use of a single relatively tight nonlinear constraint, is an effective relaxation approach for MINLPs. This continuous FSS relaxation is an enhancement to FSS as originally proposed by Mladenović et al. (2005).The problem we consider is to find the maximal weighted packing of n unequal circles in a fixed size circular container. Here we have the option, for each unequal circle, of choosing to pack it or not. We can formulate this problem as follows.Let the fixed size circular container be of radius R0 and, without loss of generality, let it be centred at the origin of the Euclidean plane. We have n circles from which to construct a packing, where circle i has radius Riand value (if packed) Vi. Here we label the circles so that they are ordered in increasing radius (size) order (i.e.Ri≤Ri+1i=1,…,n−1). We assume that Rn≤ R0, i.e. that it is feasible to pack the largest circle inside the container.Using a value Vihere for each circle i enables us to consider a number of different problems within the same formulation. For example, if we takeVi=1i=1,…,nthen we have the problem of maximising the number of circles packed. If we takeVi=πRi2i=1,…,nthen we have the problem of maximising the area of the circles packed. Alternatively theVii=1,…,ncan be assigned arbitrary values.Then the variables are:•αi=1if circle i is packed, 0 otherwise;i=1,…,n(xi, yi) the position of the centre of circle i;i=1,…,nThe objective function, Eq. (1), maximises the value of the circles packed. Eq. (2) ensures that if a circle is packed (so for circle i withαi=1) its centre is appropriately positioned such that the entire circle lies inside the circular container. If a circle is not packed the right-hand side of Eq. (2) is zero, which implicitly forcesxi=0andyi=0,since the left-hand side is a sum of squares, i.e. this unpacked circle is positioned at the origin.Eq. (3) guarantees that any two circles i and j which are both packed (soαi=αj=1) do not overlap each other (since in that case their centres must be at least the sum of the radii,Ri+Rj,apart). If one or other of the circles is not packed the right-hand side of Eq. (3) becomes zero, which means that this constraint is automatically satisfied, since the left-hand side is a sum of squares.Eq. (4) ensures that if a circle is packed its x-coordinate lies in[−(R0−Ri),+(R0−Ri)]. If the circle is not packed then the x-coordinate is forced to be zero (and hence consistent with Eq. (2), which has the same effect when a circle is not packed). Eq. (5) is the equivalent constraint for the y-coordinate. Eq. (6) is the integrality constraint.As discussed above our formulation positions any unpacked circle at the origin. For unpacked circle i the inclusion of an appropriate αiterm on the right-hand side of Eq. (3) ensures that this unpacked circle, although positioned at the origin, does not actively participate in the overlap constraint which must apply between all packed circles.The formulation we have given above is a mixed-integer nonlinear programming problem. In this MINLP the integer variables are the zero-one variables that relate to whether a particular circle is packed or not (so [αi]). The continuous variables are the variables that give the position of the circle centres (so (xi, yi)). The nonlinear aspect of the problem arises from Eqs. (2) and (3). In Eq. (2) we have a nonlinear sum of squares involving the continuous variables. In Eq. (3) we also have a nonlinear sum of squares involving the continuous variables, but in addition a product term involving two zero-one variables.Our formulation, Eqs. (1)–(6), involves n zero-one variables, 2n continuous variables and5n+n(n−1)/2constraints.Recall that the circles are ordered in increasing radius (size) order. If the objective is to maximise the number of circles packed (equivalentlyVi=1,i=1,…,n) then it is possible to show thatthere exists at least one optimal solution which consists of the first K circles (for some K). In terms of the notation we have adopted this implies thatαi=1i=1,…,Kandαi=0i=(K+1),…,n.To prove that this is so suppose that the optimal solution is not of this form, i.e. that there exists an optimal solution with a i for whichαi=0,and a j > i for whichαj=1. Replace circle j in this packing by circle i (i.e. setαi=1andαj=0with circle i at the same position as circle j originally occupied). This replacement must be feasible as circle i has radius Ri≤ Rjsince j > i, i.e. it is a smaller circle (or of equal size). Moreover the solution after replacing circle j with circle i still has the same (optimal) value, since the number of packed circles has not changed.Iteratively replacing circle pairs (i withαi=0and j > i withαj=1) in the manner described above we can therefore feasibly transform a solution into the desired form, and still retain the same (optimal) value.Hence we have proved theoptimality requirement: the optimal solution must consist of the first K circles (for some K).Technically, as the above argument illustrates, we have actually shown that out of the set of all possible solutions each with the same (optimal) value of K there is one that consists of the first K circles. However, since we are typically aiming to find just one optimal solution (rather than a full set), it suffices to concentrate attention on this particular solution.Given this optimality requirement, which applies when we are maximising the number of circles packed, we have:(7)αi−1≥αii=2,…,n(8)αk=0if∑i=1kπRi2>πR02k=1,…,nEq. (7) ensures that, if αiis one (so circle i is packed), thenαi−1must also be one (so circlei−1is packed). If circle i is not packed (αi=0) then the right-hand side of this constraint is zero, so the constraint is always satisfied whatever the value forαi−1. Collectively the(n−1)inequalities represented in Eq. (7) ensure that the optimality requirement is met.In Eq. (8) we have that if we were to pack circle k then we would (by the optimality requirement) have to pack all circles up to and including circle k. If this packing were to exceed the area of the container then clearly circle k cannot be packed.Aside from these additional constraints the optimality requirement enables us to amend the overlap constraint, Eq. (3). Note that Eq. (3) applies for j > i and includes a αiαjterm. Now ifαj=1we automatically know from the optimality requirement thatαi=1(since j > i) and hence thatαiαj=1. Ifαj=0then it is irrelevant what value αitakes since we must haveαiαj=0. In other words, the αiαjterm in Eq. (3) can be replaced by αjso that the overlap constraint, Eq. (3), becomes:(9)(xi−xj)2+(yi−yj)2≥αj(Ri+Rj)2∀(i,j)∈Qj>iNote that the optimality requirement proved here actually has wider applicability than packing circles inside a fixed size circular container. Specifically:•The proof given did not depend upon the container being circular, and so the optimality requirement applies whatever the shape of the fixed size container.The proof given only depended on the condition that we could order the items to be packed in size order (such that item i could fit inside item j > i). Hence this optimality requirement also applies if we are packing squares inside a fixed size container.With respect to packing squares the optimality requirement applies when all squares have the same fixed rotational orientation with respect to their centres. It also applies when the squares have unlimited rotational possibilities; or rotational possibilities given by a finite set (albeit the same set for all squares).In other words, the optimality requirement proved here applies to the packing of both circles and squares (under certain rotational conditions) in any fixed sized container, irrespective of its shape, when the objective is to maximise the number of items packed.In this section we first present our FSS algorithm for the problem. We then discuss a number of constraints that can be used in conjunction with our FSS approach.For simplicity we first discuss our approach using the original formulation of the problem, Eqs. (1)–(6), before amendment (in the specific case when we maximise the number of circles packed) by the optimality requirement. We discuss at the end of this section how we incorporate the constraints derived from the optimality requirement, as well as a number of other constraints presented in this section, into our approach.Consider the formulation, Eqs. (1)–(6), given above. Letting δ be a small positive constant replace the integrality requirement, Eq. (6), by:(10)∑i=1nαi(1−αi)≤δ(11)0≤αi≤1i=1,…,nIf δ was zero these equations would force[αi,i=1,…,n]to assume zero-one values. However, given the capabilities of nonlinear optimisation software simply replacing an explicit integrality condition by Eqs. (10) and (11) would not be computationally successful, since we would be hoping to generate a (globally optimal) solution to a continuous nonlinear optimisation problem with a very tight inequality constraint (note that if δ is zero then Eq. (10) is effectively an equality constraint as the left-hand side is non-negative).Accordingly we adopt a heuristic approach and have δ > 0. Hence our original MINLP has now become a continuous nonlinear optimisation problem, since we have relaxed the integrality requirement using Eqs. (10) and (11). This nonlinear optimisation problem is optimise Eq. (1) subject to Eqs. (2)–(5), (10) and (11). We refer to this problem as thecontinuous FSS relaxationof the problem and denote it by P*, where P denotes the original MINLP.If we solve this nonlinear problem the[αi,i=1,…,n]can deviate (albeit only slightly, if δ is small) from their ideal zero-one values, but we can round them to their nearest integer value to recover an integer set of values. Given an integer set of values for[αi,i=1,…,n]then the original formulation (Eqs. (1)–(6)) becomes a nonlinear feasibility problem, namely find positions (xi, yi) for each circle i that we have chosen to pack (so withαi=1in the rounded solution) that satisfy the constraints (Eqs. (2)–(5)).We have a feasibility problem here as the objective function, Eq. (1), is purely a function of the zero-one variables (and these have been fixed by rounding). In the computational results presented below we solved this feasibility problem by applying a continuous nonlinear solver, artificially terminating the solver as soon as one feasible solution had been found (if one is found before termination due to a predefined time limit).With just a single value for δ we have just a single nonlinear problem: optimise Eq. (1) subject to Eqs. (2)–(5), (10) and (11). However, changing δ in a systematic fashion creates a series of different problems that can be given to an appropriate nonlinear solver in an attempt to generate new and improved solutions for our original MINLP. The idea here is that altering δ perturbs the nonlinear formulation and hence, given the nature of any nonlinear solution software, may well lead to a different solution.The pseudocode for our FSS algorithm for the circle packing problem considered in this paper is presented in Algorithm 1. We first initialise values, here Zbestis the best feasible solution found and t is an iteration counter. We then solve the original MINLP P. In this pseudocode all attempts to solve a nonlinear problem (e.g. P or P* or the feasibility problem) must be subject to a time limit, since otherwise the computation time consumed can become extremely high. For this reason we always terminate the solution process after a predefined time limit, returning the best feasible solution found (if one has been found). In the computational results reported later below this time limit was set to 10n seconds. Note here that even if solving P or P* returns a feasible solution we have no guarantee that this is a globally optimal solution.The iterative process is to update the iteration counter, and solve the continuous FSS relaxation P*. We round the solution to P* and solve the resulting feasibility problem (again subject to the predefined time limit). The best feasible solution found is again updated, and provided we have not reached the termination condition we reduce δ by a factor β and repeat.We terminate the algorithm when δ is small (≤10−5) or we have performed a number of consecutive iterations (three iterations) without improving the value of the best solution found. Based on limited computational experience we reduced δ by a factorβ=0.5at each iteration.Finally we would comment here as to the motivation behind our approach. In essence we take the original MINLP P, optimise Eq. (1) subject to Eqs. (2)–(6), and attempt to solve it using an iterative process based on the continuous FSS relaxation P*, optimise Eq. (1) subject to Eqs. (2)–(5), (10) and (11). We hope that by adopting such an approach we can (in the same computation time) achieve better quality results than were we to simply solve the original MINLP using a standard solver. In the computational results presented below we compare our approach against a standard solver showing that, in the same computation time, we do indeed generate better quality results.If we are maximising the area of the circles packed then the overlap constraint (Eq. (3)) contains a product term (αiαj) involving two zero-one variables. A well-known linearisation of such a term is to replace it by the linear expression(αi+αj−1). However, this is usually viewed as quite a weak linearisation when the zero-one variables are relaxed in a standard continuous way (so relaxed to 0 ≤ αi, αj≤ 1).However, here we are not using a standard continuous relaxation, rather we are using a continuous FSS relaxation which involves Eq. (10). That constraint implicitly forces the relaxed zero-one variables to assume values near to zero or one, and hence the linearisation is much stronger than is usually the case. For this reason we replace Eq. (3) by:(12)(xi−xj)2+(yi−yj)2≥(αi+αj−1)(Ri+Rj)2∀(i,j)∈Qj>iThere are a number of general constraints that apply whatever the objective adopted. Recall that Zbestis the value of the best feasible solution encountered during our FSS heuristic. Let the set of circles that are packed in this best feasible solution be denoted by F. Then the general constraints that apply are:(13)αi+αj≤1i=1,…,n;j=1,…,n;j>i;Ri+Rj>R0(14)∑i=1nαiπRi2≤πR02(15)∑i=1nαiVi≥Zbest(16)∑i∉Fαi+∑i∈F(1−αi)≥1Eq. (13) says that if the sum of the radii of any two circles is greater than the container radius we cannot pack both circles. Eq. (14) ensures that the total area of the circles packed cannot exceed the area of the container. Eq. (15) ensures that the value of any solution found is at least that of the best feasible solution known. Eq. (16) is a feasible solution exclusion constraint, and ensures that whatever solution is found must differ from the best known solution (of value Zbestwith packed circles F) by at least one circle. The effect of Eqs. (15) and (16) is to seek an improved feasible solution.Note here that although these constraints may be redundant in the original MINLP, they may not be redundant in any relaxation of the problem, in particular here the continuous FSS relaxation when we drop the requirement that the[αi,i=1,…,n]are zero-one.Suppose that the positions of the packed circles in the best feasible solution (of value Zbest, involving the set of packed circles F) are given by (Xi, Yi) i ∈ F. At each FSS iteration we introduce a set of heuristic constraints to restrict the movement of the circles in F. Let Δibe the amount by which we allow circle i ∈ F to move (either horizontally or vertically) from its current best known position. The constraints that restrict circle positions are:(17)αi(Xi−Δi)≤xi≤αi(Xi+Δi)∀i∈F(18)αi(Yi−Δi)≤yi≤αi(Yi+Δi)∀i∈FHere if circle i ∈ F is packed (soαi=1) these constraints ensure that its centre cannot move more than Δifrom its current best known position. However, if circle i ∈ F is not packed (soαi=0) these constraints ensure that it is positioned at the origin.We refer to these constraints as heuristic constraints as (depending upon the values for[Δi,i=1,…,n]) they could preclude the possibility of finding the optimal solution to the problem. The question therefore arises as to why we might choose to introduce them. In terms of the FSS heuristic for the problem considered in this paper the reason is that these constraints reduce the size of the nonlinear program that we have to solve.The predominant set of constraints are the overlap constraints involving the set Q of circle pairs, where|Q|=n(n−1)/2,see Eqs. (3), (9) and (12). By restricting the movement of circle centres we can, for some pairs [(i, j) i ∈ F, j ∈ F], detect whether or not they can overlap, and if not remove the pair from Q. For example, a pair (i, j) that are both packed in the current best feasible solution, but are so far apart in the packing that, given the constraints Eqs. (17) and (18) on circle centre positions, can never overlap. Removing pairs from Q because they can never overlap obviously reduces the size of the nonlinear program that we have to solve.With respect to updating Q to remove circle pairs that can never overlap, details as to how this can be done were previously presented in López and Beasley (2011) and so (for space reasons) we will not repeat those details here. With respect to[Δi,i=1,…,n]we usedΔi=Ri/2+U(Ri/2)where U is a continuous random number drawn from [0,1]. In other words, Δiwas set equal to half the radius of circle i plus a random factor also related to half the radius of circle i.

@&#CONCLUSIONS@&#
In this paper we have considered the problem of packing unequal circles inside a fixed size circular container. We considered two different objectives: maximise the number of circles packed; maximise the area of the circles packed.When the objective is to maximise the number of circles packed we proved that the optimal solution consists of the first K circles (when circles are ordered in increasing size order), for some K. This optimality requirement applies to the packing of both circles and squares (under certain rotational conditions) in any fixed sized container, irrespective of its shape, when the objective is to maximise the number of items packed.We presented a heuristic for the problem based upon formulation space search. In particular we used a continuous formulation space search relaxation, which consists of relaxing the integrality requirement on the zero-one variables using a nonlinear constraint. We also presented a number of additional constraints that were incorporated into our solution approach.Computational results were given for test problems, involving up to 40 circles, with these test problems being made publicly available for future workers. We also presented computational results, for test problems taken from the literature, relating to packing both equal and unequal circles.