@&#MAIN-TITLE@&#
The inverse convex ordered 1-median problem on trees under Chebyshev norm and Hamming distance

@&#HIGHLIGHTS@&#
We investigate in this paper the inverse convex ordered 1-median problem.We consider this problem on trees and under Chebyshev norm and Hamming distance.We develop exact algorithms (with time complexity O(n2log (n)) for both cases.We show that the problem is NP-hard under the weighted sum Hamming distance.

@&#KEYPHRASES@&#
Ordered median,Inverse optimization problem,Convex,Tree,Chebyshev norm,Hamming distance,

@&#ABSTRACT@&#
We investigate the inverse convex ordered 1-median problem on unweighted trees under the cost functions related to the Chebyshev norm and the Hamming distance. By the special structure of the problem under Chebyshev norm, we deduce the so-called maximum modification to modify the edge lengths of the tree. Additionally, the cost function of the problem receives only finite values under the bottleneck Hamming distance. Therefore, we can find the optimal cost of the problem by applying binary search. It is shown that both of the problems, under Chebyshev norm and under the bottleneck Hamming distance, can be solved in O(n2log n) time in all situations, with or without essential topology changes. Here, n is the number of vertices of the tree. Finally, we prove that the problem under weighted sum Hamming distance is NP-hard.

@&#INTRODUCTION@&#
In the classical location problems we aim to find optimal locations of new facilities with respect to an objective function. The common objective function may be the median or center function, see Eiselt and Marianov (2011); Kariv and Hakimi (1979a,b). However, in some cases the decision maker would like to choose another class of objective function such as the center-median function Halpern (1976) or the k-centrum function Tamir (2001). Thus, it motivates us to study the universal approach of location problems in which the methods and algorithms can be applied to a wide class of objective functions, see the book of Nickel and Puerto (2005).In recent years, inverse optimization problems have been investigated. To our best knowledge, the work of Burton (1993) on the inverse shortest path problem was the first paper in the field of inverse optimization problems. For a survey of inverse combinatorial optimization problems and methods, we refer to the paper of Heuberger (2004).The inverse median problems on the plane and on networks with variable weights were studied by Burkard, Pleschiutschnig, and Zhang (2004). They proved that the inverse 1-median problem on trees can be solved in O(nlog n) time, where n denotes the number of vertices. In a later work Galavii (2008, 2010), improved the complexity to linear time. Burkard, Galavii, and Gassner (2010) solved the inverse Fermat–Weber problem in O(nlog n) time by a greedy algorithm if the prespecified point does not coincide with any given point(s). Otherwise, the problem can be formulated as a convex program and is, therefore, solvable in polynomial time. Based on the concavity of the inverse 1-median problem on a cycle, Burkard, Pleschiutschnig, and Zhang (2008) solved the problem with variable weights in O(n2) time. Bonab, Burkard, and Gassner (2011) investigated the inverse p-median problem on networks with variable edge lengths. They showed that the problem is NP-hard on general networks. Nevertheless, it is solvable in polynomial time if the underlying network is a tree and especially in linear time for the problem on a star graph.For the inverse 1-center problem on networks, Cai, Yang, and Zhang (1999) first showed that although the 1-center problem on directed networks can be solved in polynomial time, the corresponding inverse version is NP-hard. Thus, it is interesting to study in which cases the inverse 1-center problem can be solved in polynomial time. The inverse 1-center problem on unweighted trees was solved efficiently in polynomial time, see Alizadeh and Burkard (2011a,b); Alizadeh, Burkard, and Pferschy (2009). However, for the inverse 1-center problem on cactus graphs which is a simple generalization of the corresponding problem on tree networks, Nguyen and Chassein (2014) showed the NP-hardness. Furthermore, Nguyen and Anh (2015) investigated and proved that the inverse k-centrum problem on trees with variable vertex weights, a generalization of the inverse 1-median problem fork=nand the inverse 1-center problem fork=1,is NP-hard. They further solved the inverse 1-center problem in quadratic time.Most of the previous papers studied the problem under rectilinear norm. Furthermore, the consideration of other types of objective functions such as Chebyshev norm or Hamming distance is worthwhile. Guan and Zhang (2012) investigated the inverse 1-median problem on trees under Chebyshev norm and Hamming distance. They solved the problem under Chebyshev norm and bottleneck Hamming distance efficiently in linear time and proved that the problem under weighted sum Hamming distance is NP-hard. In addition, Nguyen and Sepasian (2015) developed efficient algorithms to solve the inverse 1-center problem on trees under Chebyshev norm and Hamming distance in O(nlog n) time, if no topology change occurs during the modification of edge lengths. Otherwise, the problem can be solved in quadratic time. On the other hand, the first who studied the inverse ordered median location problem on trees was Gassner (2012). She proved that the inverse convex ordered median problem on trees with uniform weights is NP-hard, the inverse k-centrum problem on a general weighted tree is also NP-hard. However, the inverse k-centrum problem on uniform weighted trees can be solved in polynomial time by dynamic programming. In this paper, we consider the interconnection between these two papers, i.e. the inverse ordered median location problem under Chebyshev norm and Hamming distance. The problem has not been studied so far to our best knowledge.This paper is organized as follows. We formulate the problem with general cost function and construct some prerequisites in Section 2. We consider in Section 3 the problem under Chebyshev norm. The problem under Hamming distance is investigated in Section 4.We first introduce the ordered median function on a given network. Consider a graphG=(V,E)with n vertices. A nonnegative weighted wiis assigned to each vertex vi∈ V. Ifwi=wjfor all i ≠ j, we get a uniform weighted or an unweighted graph. In this case, one can always assume thatwi=1for all vi∈ V. Each edge e ∈ E is associated with a nonnegative length ℓe. Given u, v ∈ V the distance d(u, v) is the length of the shortest path P(u, v) connecting these two vertices. Denote by A(G) the set of continuum points in G. In other words, we consider an edgee=[u,v]with length ℓe. A point x ∈ e is identified byd(u,x)=tℓefor some t ∈ [0, 1]. Obviously,x=uift=0andx=vift=1. Given a vector of multipliersλ=(λ1,λ2,…,λn)∈R+n,the single facility ordered median function on A(G) is defined as:fλ(x)=∑i=1nλiw(i)d(x,v(i)).Here, the operator (.) is a permutation of{1,2,…,n}such thatw(1)d(x,v(1))≤w(2)d(x,v(2))≤…≤w(n)d(x,v(n)).A permutation with this property is called a feasible permutation. There may exist many feasible permutations with respect to a given point x. Thus, we denote by Π the set of all feasible permutations.A point x0 ∈ A(G) such that fλ(x0) ≤ fλ(x) for all x ∈ A(G) is called the ordered 1-median of the graph. Especially, if the networkG=Tis a tree and the components of λ are nondecreasing, i.e.λ1≤λ2≤…≤λnthen the ordered median objective function is convex along each path of the tree Nickel and Puerto (2005). In this case the problem of finding an ordered 1-median on a tree T is called the convex ordered 1-median problem. An algorithm to find the convex ordered 1-median of a tree is investigated in Kalcsics, Nickel, Puerto, and Tamir (2002); Nickel and Puerto (2005). In which, the authors try to search in decreasing direction of the objective function until the optimality criterion holds. We look deeply into the optimality criterion of the convex ordered median problem on an unweighted tree T. Given a point x ∈ A(T), denote byT(x)the set of subtrees induced by deleting all points y ∈ A(G) withd(x,y)=0together with the edge(s) which contain y.Theorem 1[Optimality criterion, reformulation ofKalcsics et al. (2002)]Given a uniform weighted treeT=(V,E)andλ∈R+nso thatλ1≤λ2≤…≤λn. Then a point x ∈ A(T) is an ordered 1-median of T if and only if for each subtreeTsub∈T(x)there exists a feasible permutation σsub such that∑vσsub(i)∈Tsubλiwσsub(i)≤∑vσsub(i)∉Tsubλiwσsub(i).Observe that, if x is not an ordered 1-median of the tree then there exists exactly one subtree inT(x)that violates the optimality criterion. If we restrict us to unweighted trees, we can reformulate the optimality criterion in a simplified form.Definition 1A weighted sum of a subtreeTsub∈T(x)is defined as:ΛTsub=minσ∈Π∑vσ(i)∈TsubλiThe complementary weighted sum of Tsubis given by:ΛTsub′=∑i=1nλi−ΛTsub.Note that we can express the complementary weighted sum of T′ in the formΛTsub′=maxσ∈Π∑vσ(i)∉Tsubλi.We can findΛTsubin O(nlog n) time by first identifying the feasible permutationσ=argminσ∈Π∑vσ(i)∈Tsubλi. To do so, we have to sort all vertices viwith respect to d(x, vi) and break all ties such that all vertices v ∈ Tsubare preferred. This means that, if two vertices v ∈ Tsuband v′ ∉ Tsubhave the same distance to x, v gets a smaller index as v′ in the ordering.By Theorem 1, we can reformulate the optimality criterion as follows.Corollary 1[Ordered median criterion] Given an unweighted treeT=(V,E)andλ∈R+nso thatλ1≤λ2≤…≤λn. Then, a point x ∈ A(T) is an ordered 1-median of T if and only ifΛTsub≤ΛTsub′for allTsub∈T(x).Now we study the inverse ordered 1-median problem on trees under various objective functions. Given an unweighted treeT=(V,E)and a vector of multipliers λ such thatλ1≤λ2≤…≤λn. The length of each edge e ∈ E can be increased or decreased by an amount peor qe, i.e. the new edge length isℓ˜e:=ℓe+pe−qefor e ∈ E. Let v* be a prespecified vertex and (p, q) be the vector of modifications, the inverse ordered 1-median location problem on trees under the objective function F(p, q) can be stated as follows:1.Modify the edge lengths such that the prespecified vertex v* becomes an ordered 1-median of the perturbed tree T.The cost function F(p, q) is minimized.The edge length modifications are feasible, i.e.0≤pe≤p¯eand0≤qe≤q¯e.Assume that increasing or decreasing one unit length of an edge e ∈ E costsce+orce−,respectively. We focus in this paper on the following cost functions.If we use the Chebyshev norm, then the objective function is written asF(p,q):=maxe∈E{ce+pe,ce−qe}.In case of the bottleneck Hamming objective function, we obtainF(p,q):=maxe∈E{ce+H(pe),ce−H(qe)},where H(.) is the Hamming distance;H(θ)=0ifθ=0andH(θ)=1otherwise. Furthermore, the cost function under weighted sum Hamming objective isF(p,q):=∑e∈E(ce+H(pe)+ce−H(qe)).From now on, we concentrate on the inverse convex ordered 1-median problem on unweighted trees under Chebyshev norm or Hamming distance. Instead of the NP-hardness of the inverse convex ordered 1-median problem on unweighted trees under rectilinear norm (Gassner (2012)), we prove that the problem under Chebyshev norm and the bottleneck Hamming objective function is solvable in polynomial time. However, the problem under weighted sum Hamming distance is NP-hard.This section considers the inverse convex ordered 1-median problem on an unweighted tree T under Chebyshev norm. For a prespecified vertex v* that is not an ordered 1-median of the tree, there exists exactly one subtree, sayT′∈T(v*),such thatΛT′>ΛT′′. We denote the optimality gap byGT′:=ΛT′−ΛT′′.We shorten the notation by writingGif it is clear which tree defines the optimality gap. Let v be the adjacent vertex of v* in T′. If the length of (v*, v) is reduced to 0, the structure ofT(v*)is destroyed, as v coincides with v* andT(v*)is the set of all subtrees induced by deleting all vertices with distance 0 to v*. An edge length modification leading to a change ofT(v*)is denoted as a topology change, see Alizadeh and Burkard (2011a); Alizadeh et al. (2009). Note that the gapGhas to be reevaluated if a topology change has occurred. Therefore, we consider the following two situations.We assume in this section that(1)q¯(v*,v)<ℓ(v*,v).Then the setT(v*)does not change throughout the edge length modification. Thus, denote by T′* the subtree of T induced by T′ ∪ {v*}. We consider the following proposition.Proposition 1In an optimal modification, we decrease the length of edges in T′*and increase the length of edges in T\T′*.From Proposition 1, we can simplify the cost function tomaxe∈E{cexe}.Here, an edge e is modified by an amount xemeans that its length is shortened (lengthened) by xeif e ∈ T′* (e ∈ T\T′*). Furthermore,ce=ce+if e ∈ T\T′* andce=ce−otherwise. The upper bound of modification of an edge e isx¯e=p¯eif e ∈ T\T′* andx¯e=q¯eif e ∈ T′*. We consider the relation between the optimality of v* and the edge length modification in the following proposition.Proposition 2The optimal modification ensuring thatGT′≤0is also an optimal modification for the original problem.Letxe*for e ∈ E, shortly denoted by x*, be the optimal modification with cost C* such thatGT′≤ 0. We distinguish two cases.Case 1: Applying edge modification x* makes vertex v* an ordered 1-median of T. As every other modification x′ with cost C′ making v* an ordered 1-median of T induces a gapGT′≤ 0 and x* was the optimal modification ensuring this, it must hold that C* ≤ C′. Hence x* is an optimal modification of the original problem.Case 2: Applying x* makes v* not an ordered 1-median of T. Thus, we know that there must exists a subtreeT′′∈T(v*)withΛT′′>ΛT′′′and T′′ ≠ T′. This means that for all feasible permutations σ it holds that∑vσ(i)∈T′′λi>∑vσ(i)∈T∖T′′λi. As T′ ⊂ T\T′′ and T′′ ⊂ T\T′ we conclude further that∑vσ(i)∈T∖T′λi≥∑vσ(i)∈T′′λi>∑vσ(i)∈T∖T′′λi≥∑vσ(i)∈T′λiBut this would mean thatGT′<0for all feasible permutations, even for the permutation that breaks all ties not in favor of T′, i.e. the nodes of T′ are assigned to the largest λ-values among of all nodes with equal distance. But if all ties could be broken this way, we could also decrease the objective function by a small amount, by reducing the edge length modifications by a small amount. Note that this can only increase (decrease) the distance from v* to all nodes from T′ (T\T′). The changed distances would lead to a changed set of feasible permutations, but this set would still contain a permutation that would yield a gapGT′≤0. This yields a contradiction to the optimality of C*.□By Proposition 2, we aim to reduceGuntil it is nonpositive with minimum cost. Note that, the gapG=ΛT′−ΛT′′is decreased as much as possible if for the same cost C we increase the edge lengths in T\T′* and decrease the edge lengths in T′* by maximum amounts such that the cost is limited within C. We give the following definition.Definition 2A maximum modification (xe(C))e ∈ Ewith costC is given as follows.xe(C):={Cce,ifcex¯e>Cx¯e,ifcex¯e≤C.Observe that one can decrease the optimality gapGas much as possible with respect to a given cost by applying a maximum modification. The next proposition is a immediate consequence of this observation.Proposition 3There exists an optimal modification such thatG≤0which is a maximum modification.We assume without loss of generality that the problem is feasible and that the setS={cex¯e}e∈E,x¯e>0contains distinct elements, i.e.cex¯e≠ce′x¯e′for e ≠ e′, e, e′ ∈ E. Denote bym:=n−1the number of all edges in T. After sorting the elements ofSin nondecreasing order, we getS={cix¯i}i=1,…,mwithc1x¯1<c2x¯2<…<cmx¯m.Now we aim to find the smallest indexi0∈{1,…,m}such that the gapGbecomes nonpositive by applying the maximum modification with costci0x¯i0. We can find such an index by applying a binary search algorithm. If the application of the maximum modification with costckx¯kresults in a gapG>0,we know that i0 > k. In the case whereG≤0,we know that i0 ≤ k.Let us analyze the complexity of the procedure to find the index i0. For a given cost C, we can update the length of each edges of the tree and calculate the new distances to the root node v* by a breath-first-search algorithm in linear time. Then we sort the distances with priority of T′ in order to updateGin O(nlog n) time. As the binary search stops after O(log n) steps and each iteration costs O(nlog n) time, the procedure runs in O(nlog2n) time.After finding the index i0, we apply the maximum modification(xe(C˜))e∈Ewith costC˜:=ci0−1x¯i0−1and update the upper bounds as below. Note that ifi0=1,we apply no modification.•Update the length of an edge e ∈ T′* (e ∈ T\T′*) toℓe˜:=ℓe−xe(C˜)(ℓe˜:=ℓe+xe(C˜)).Update the modification bound of an edge e tox˜e:=x¯e−xe(C˜).Denote the distance that is computed with respect to edge lengthsℓ˜byd˜.Next, our goal is to find a maximum modification with smallest cost in[0,ci0x˜i0]in order to get a nonpositive gap. We use a parametert∈[0,x˜i0]to present the modified distances in T. In other words, applying the maximum modification with costci0tyields the modified distancedt(v,v*):=d˜(v,v*)+sign(v)∑e∈P(v,v*):x¯e>0ci0tce,wheresign(v)=−1if v ∈ T′* andsign(v)=1otherwise. Computing dt(v, v*) for a fixed t and for all v ∈ V can be done in linear time by a breath-first-search algorithm.As can be seen by the following observation, the number of values of t that have to be considered is bounded by n2. The optimality gapGcan only be reduced for a value t if for a pair of vertices v ∈ T\T′* and v′ ∈ T′* withd˜(v*,v)<d˜(v*,v′)holds that dt(v*, v) ≥ dt(v*, v′).For each pair v ∈ T\T′* and v′ ∈ T′* withd˜(v*,v)<d˜(v*,v′)we calculate an amount, saytvv′,tvv′≤x˜i0,such thatdtvv′(v*,v)=dtvv′(v*,v′). As there are at most O(n2) pairs (v, v′) for v ∈ T\T′* and v′ ∈ T′* we obtain at most O(n2) distinct valuestvv′. Note that dt(v*, v) is an affine function. We can compute the n different affine functions dt(v*, v) for v ≠ v* in O(n2) time. To computetvv′we have just to compute the intersection of two affine functions which can be done in constant time. We sort these values in O(n2log n) time in order to get the set{t1,t2,…,tτ}witht1<t2<…<tτand τ ≤ n2.In the next step we use binary search to find the smallest indexj0∈{1,…,τ}such that the gapGbecomes nonpositive by applying the maximum modification with costci0tj0. The binary search stops after O(log n) iterations. In each iteration we have to calculate the distancedtj(v*,v)for all nodes v ∈ T. This can be done in O(n) time by a breath-first-search algorithm. Next we have to sort the modified distances with priority to T′ to updateG,this can be done in O(nlog n) time. Hence, the index j0 can be found in O(nlog2n) time. The complete algorithm is stated as Algorithm 1.In conclusion, we get the following result.Theorem 2The inverse convex ordered 1-median problem on unweighted trees under Chebyshev norm requiring no topology change can be solved in O(n2log n) time.In this section condition (1) is relaxed, i.e. we can reduce the length of an edge e* incident to v* to 0. This yields a change of the structure ofT(v*), i.e. a topology change.We use the following idea for the algorithm. First identify the tree T′ with positive gapG. Let e* be the edge that connects T′ and v*. Check if e* can be contracted to a 0 length edge. If this is not the case, one can just solve the problem as in Section 3.1. Otherwise check if the edge must be contracted in an optimal solution. If there exists an optimal solution that does not contract the edge, one can again solve the problem as in Section 3.1. In the other case, where an optimal solution contracts edge e* we setℓe*:=0as well asp¯e*=q¯e*:=0,i.e. we fix edge e* to be a 0-length edge, and store the cost that were necessary to contract edge e*. We continue by restarting the algorithm with the modified instance. Note that the algorithm will terminate after at most m edge contractions.We still need to discuss how one can check efficiently (in O(nlog n) time), whether an edge e must be contracted in an optimal solution. First apply the maximum modification with cost ceℓe. Next compute all distances d(v*, v). Remember the idea that was used in Section 3.1 to discretize the cost interval to a finite set of points. We consider the cost interval [0, ceℓe). Denote by {t1, ..., tτ} the set of points where the vertex ordering changes if a maximum modification with cost cetiis applied. Hence, we can choose a small enoughϵ>0such thatcetτ<ce(ℓe−ϵ)<ceℓe. Next we apply a maximum modification with costce(ℓe−ϵ)and compute the value ofG.IfG≤0the value of the optimal solution must be smaller then ceℓe, hence no topology change will occur in an optimal solution. On the other hand ifG>0,we know that the cost of the optimal solution must be at least ceℓe, as the value of the gapGis the same for all maximum modifications with cost from the interval[ce(ℓe−ϵ),ceℓe).An appropriate value forϵcan be computed by the following procedure. Assume that the maximum modification with cost ceℓeis applied and the distances d(v*, v) are computed. Sort all vertices with respect to their distances. Computeδ:=min(v′,v)∈(T′,T∖T′):d(v*,v′)≠d(v*,v)|d(v*,v′)−d(v*,v)|the smallest difference between the distances of two vertices from T′ and T\T′ that have not the same distance. To simplify the presentation of the algorithm we do not cover the special case, where all vertices have the same distance to v*. If we are in this case and the gapG>0it is obvious that the edge connecting v* and T′ must be contracted. Hence, we can just skip Algorithm 2and directly contract this edge. Note that all edges e′ withce′=0have under every maximum modification the same length. Hence, we only need to consider edges withce′>0. Define byC′:=min{e′∈E:ce′>0}ce′. Note that the change of the edge length, if one switches from the maximum modification with cost ceℓeto the maximum modification with costce(ℓe−ϵ),is bounded byceϵC′. Therefore, as at most m edges lie between a vertex v and v*, the distance from v to v* changes by at mostmceϵC′by using the cheaper modification. By settingϵ:=δC′4mce,we can guarantee the demanded property ofϵ. Note that all necessary computations can be done in O(nlog n) time.To give a clearer presentation of the algorithm we extract the method CONTRACT-TESTChethat tests for a given edge e if this edge has to be contracted in an optimal solution and describe this method explicitly.At the end of the section we analyze the time complexity of Algorithm 3. All iterations of the while loop except of the last one have to execute algorithm CONTRACT-TESTChewhich can be done in O(nlog n) time. Identifying the new tree that maximizes the gapGafter the topology change has occurred needs O(deg(v′)log n) time, where v′ is the vertex of T′ that is connected to v*, as only subtrees of T′ are candidates for the new tree. Hence, the amortized cost of this step is also in O(nlog n). The last iteration of the while loop can be done in O(n2log n) time as shown in Section 3.1. Hence, as there are at most n iterations of the while loop the complete Algorithm can be executed in O(n2log n) time. This proves the main theorem of this section.Theorem 3The inverse convex ordered 1-median problem on an unweighted tree under Chebyshev norm can be solved in O(n2log n) time.We will illustrate the algorithm in the following example. Given an unweighted tree T as in Fig. 1. The modification costs are uniform, i.e.ce+=ce−=1for all e ∈ T. The vector of multipliers isλ=(0,1,2,3,4,5,7). Assume that the prespecified vertex is v1.We note that the subtree T′ induced by {v2, v3, v4, v5, v6} violates the optimality criterion asΛT′>ΛT′′. At first, we have to check if (v1, v2) has to be contracted in the optimal solution or not. By using the formula presented in Algorithm 2 withδ=1,C′=1,andm=6we get thatϵ:=124. Applying the maximum modification with costce*(ℓe*−ϵ):=2324,where e* ≔ (v1, v2), yields a gapG:=ΛT′−ΛT′′=18−−4>0. Therefore, we have to contract edge e* and get the tree as shown in Fig. 2.Note that the tree T′′ induced by {v3, v4, v5} maximizes the gapGT′′after the topology change has occurred. We update e* ≔ (v1, 2, v3) and check if edge e* has to be contracted or not. We obtain againϵ:=124. The gap isG:=11−11≤0if we apply the maximum modification with costce*(ℓe*−ϵ):=4724. We use the Algorithm 1 to get the optimal perturbed tree shown in Fig. 3. The optimal cost of this instance is53.In this section we consider the inverse ordered 1-median problem under bottleneck Hamming cost function, i.e.F(p,q)=maxe∈E{ce+H(pe),ce−H(qe)},where the Hamming distance H is defined asH(θ):={0,ifθ=01,otherwiseWe solve the inverse convex ordered 1-median problem under bottleneck Hamming distance according to the following two cases.In this section condition (1) holds, i.e. there exists no topology change during the edge length modification. Assume that the prespecified vertex v* is not an ordered 1-median of the tree, then there exists exactly one subtreeT′∈T(v*)that violates the optimality criterion, i.e.ΛT′>ΛT′′. We define the optimality gapG=ΛT′−ΛT′′>0as in the last section and aim to reduce the gap until the optimality criterion holds.We can easily observe that Proposition 1 is still true for the case of the bottleneck Hamming distance. Thus, the objective function can be simplified as(2)F(p,q):=maxe∈E{ceH(xe)},wherece:=ce+if e ∈ T\T′* andce:=ce−if e ∈ T′*. Furthermore,x¯e=p¯eif e ∈ T\T′* andx¯e=q¯eotherwise. Recall that an edge e ∈ T\T′* (e ∈ T′*) is modified by an amount xeif its length is increased (decreased) by the amount xe.Note that the cost function (2) can only attain at most m different values cifori=1,…,m.We first sort the modification costs increasingly to get the sequencec1≤c2≤…≤cmConsider the following definition.Definition 3The active edgeei0is the edge with the smallest index i0 such that modifying all edges eiwith i ≤ i0 suffices to obtainG≤0.We consider the relation between the active edge and the optimal solution in the following proposition.Proposition 4The costci0corresponding to the active edgeei0is the optimal cost.We construct a solution of the the inverse convex ordered median problem as follows. We modify all edges ej∈ E byx¯jif j < i0. By the definition of the active edge, the gapGmust still be positive after this modification. We now modifyei0step by step. Note again that there are at most O(n2) many interesting modification values t for edgeei0that lead to a change ofG. Namely, all modifications such that a pair of vertices v′ ∈ T′ and v ∈ T\T′ with d(v*, v′) ≠ d(v*, v) anddt(v*,v′)=dt(v*,v),where d is the distance obtained by modifying the edges ejwith j < i0 and dtis the distance where additionally the length of edgeei0is modified by t. Lett˜be the smallest modification such thatG≤0. Assume that v* is not the ordered 1-median of the tree if we have modified edgeei0byt˜. Hence, there must exist another subtreeT′′∈T(v*)withΛT′′>ΛT′′′. We can use again the tie breaking argument, that was used in the proof of Proposition 2 to create a contradiction.By the definition of the active edge, every modification with cost smaller thanci0can not lead to a gapG≤0and, hence, make v* to be an ordered 1-median of T. This shows the proposition.□By Proposition 4, we can find the optimal objective value through finding the active edge.Without loss of generality we assume that all modification costs are pairwise different and that the problem is feasible, i.e. the gapG≤0with respect to the modificationxe:=x¯efor all e ∈ E. Note that the active edge can be found by using a binary search algorithm. If modifying all edges ejwith j ≤ k byx¯jresults in a gapG>0,we know that k < i0. In the case whereG≤0we know that i0 ≤ k. In every iteration of the branch and bound algorithm we have to apply one edge modification and recompute all modified distances. This can be done in linear time by a breath first search algorithm. Computing the gapGcan be done in O(nlog n) time. As the binary search algorithm stops after O(log n) many iterations and each iteration costs O(nlog n) time, finding the active edge can be done in O(nlog2n) time.After one has found the active edge one has already computed the optimal objective function. To obtain also an optimal edge modification one has only to consider the modification of edgeei0,as all edges ejwith j < i0 can be modified byx¯j. The idea used at the end of Section 3.1 can be reused to solve the problem of finding the optimal modification of edgeei0. Compute the set of O(n2) many interesting modifications {t1,…,tτ} that lead to a change ofG. The smallest of these modifications that lead to a gapG≤0ensures that v* becomes an ordered 1-median of the tree (see the proof of Proposition 4). Finding this modification can be done in O(n2log n) time using basically the same technique as at the end of Section 3.1. In conclusion, we get:Theorem 4The inverse convex ordered 1-median problem on unweighted trees under bottleneck Hamming objective function with no topology change can be solved in O(n2log n) time.In this section condition (1) is relaxed, i.e. we can reduce the length of an edge e* incident to v* to 0. This yields to a change of the structure ofT(v*), i.e. a topology change.We use basically the same algorithm as described in Section 3.2. First we test if the edge e* that connects T′ which is the subtree that maximizes the gapGwith v* has to be contracted in an optimal solution with algorithm CONTRACT-TESTHam(Algorithm 4). We use the same concept as in CONTRACT-TESTChe. Compute a smallϵ>0such that the gap valueGmust be the same for all modifications in[x¯e−ϵ,x¯e). Note that we can simplify the formula forϵas we modify only a single and not multiple edges simultaneously. Next we compute the gap valueGfor the modifications given in the algorithm. If the gap valueG≤0only two cases can happen. IfG≤0even for the case where we use no modification for edge e*, we know that edge e* must not be modified in an optimal solution. On the other hand ifG>0for these modifications, we know that there exists a modification of edge e* that does not contract e* completely but ensures that v* becomes an ordered 1-median of T. In both cases no topology change occurs. In the other case whereG>0,edge e* must be contracted in an optimal solution as all other modifications of this edge that do not contract the edge yield also strict positive gap values. Hence, a topology change occurs for this case. If CONTRACT-TESTHamis positive, we contract edge e* and restart the process. Otherwise, we can solve the problem as described in Section 4.1. The correctness proof of Algorithm 5is similar to the proof of Algorithm 3.The time complexity of Algorithm 5 can be analyzed basically in the same way as for Algorithm 3. Hence, we get that the running time of Algorithm 5 lies in O(n2log n).Theorem 5The inverse convex ordered 1-median problem on trees under bottleneck Hamming objective function can be solved in O(n2log n) time.In the rest of the paper, we focus on the inverse ordered 1-median problem on unweighted trees under weighted sum Hamming objective function. Note that the inverse 1-center problem is a special case of the inverse ordered 1-median problem. One can obtain the inverse 1-center problem from the inverse ordered 1-median problem by settingλi=0fori=1,…,n−1andλn=1. We can show the following negative result even for the special case of inverse 1-center problems.Theorem 6The inverse 1-center problem on unweighted path graphs under weighted sum Hamming objective function is NP-hard.We consider an instance (I) of the partition problem. Given a setS={a1,a2,…,ak}⊂Nsuch that∑i=1kai=2B,B∈N. Does there exist a subset S′ ⊂ S such that∑ai∈S′ai=B? The partition problem is known to be NP-hard, see Garey and Johnson (1979).For a given instance (I), we construct an instance (Inv) of the inverse 1-center problem. The path graphP=(V,E)consists of the vertex setV={v*,v0,v1,…,vk}and the edge setE={e0,e1,…,ek}wheree0=(v*,v0),e1=(v*,v1)andei=(vi−1,vi)fori=2,…,kas in Fig. 4.The length of each edge eiis set to 1 fori=1,2,…,kand the length of edge e0 is set toB+k. The length of edge e0 is fixed and the length of edge eican be increased by piwith 0 ≤ pi≤ aiwith the cost coefficient aifor eachi=1,2,…,k. (Inv) is a ’yes’-instance if there exists a feasible edge length modification that has costs at most B under weighted sum Hamming distance. To make v* the 1-center of the path graph P one has to modify the edge lengths such thatd˜(v*,v0)=d˜(v*,vk).Assume that (I) is a ’yes’-instance. Hence, there exists a subset S′ ⊂ S such that∑ai∈S′ai=B. Consider the following modification. For all i ∈ S′ increase the edge lengths of edge eiby ai. The costs of this modification under weighted sum Hamming distance are exactly∑ai∈S′ai=B. We get further that the modified distance from v* to vkisd˜(v*,vk)=∑ai∈S′ai+k=B+k=d˜(v*,v0).Hence, (Inv) is ‘yes’-instance.Conversely, assume that (Inv) is a ’yes-instance, i.e. there exists a solution of (Inv) with cost at most B. Denote by I the set of indices of edges eithat are lengthened in this solution. The bound of the cost function gives that ∑i ∈ Iai≤ B. Assume that ∑i ∈ Iai< B, in this case we get thatd˜(v*,vk)=∑ai∈Iai+k<B+k=d˜(v*,v0).This leads to a contradiction asd˜(v*,vk)=d˜(v*,v0)must hold in every feasible solution of (Inv). Therefore, we can conclude that∑i∈Iai=B,which shows that (I) is a ‘yes’-instance. This finishes the proof.□

@&#CONCLUSIONS@&#
