@&#MAIN-TITLE@&#
An array content static analysis based on non-contiguous partitions

@&#HIGHLIGHTS@&#
An abstract domain that partitions array elements according to semantic properties.The abstract domain can represent non-contiguous partitions.Allowing empty groups eliminates the need for global disjunction.We verify two non-trivial invariants in two distinct operating systems.

@&#KEYPHRASES@&#
Array analysis,Abstract domain,Program verification,

@&#ABSTRACT@&#
Conventional array partitioning analyses split arrays into contiguous partitions to infer properties of sets of cells. Such analyses cannot group together non-contiguous cells, even when they have similar properties. In this paper, we propose an abstract domain which utilizes semantic properties to split array cells into groups. Cells with similar properties will be packed into groups and abstracted together. Additionally, groups are not necessarily contiguous. This abstract domain allows us to infer complex array invariants in a fully automatic way. Experiments on examples from the Minix 1.1 memory management and a tiny industrial operating system demonstrate the effectiveness of the analysis.

@&#INTRODUCTION@&#
Arrays are ubiquitous, yet their mis-use often causes software defects. Therefore, a large number of works address the automatic verification of array manipulating programs. In particular, partitioning abstractions [12,18,20] split arrays into sets of contiguous groups of cells (also called segments), in order to, hopefully, infer that they enjoy similar properties. A traditional example is that of an initialization loop, with the usual invariant that splits the array into an initialized zone (the segment from index 0 to the current index) and an uninitialized region (the segment from the current index to the end of the array).However, when cells that have similar properties are not contiguous, these approaches cannot infer adequate array partitions. This happens for unsorted arrays of structures, when there is no relation between indexes and cell fields. Sometimes the partitioning of array elements relies on relations among cell fields. This phenomenon can be observed in low-level software, such as operating system services and critical embedded systems drivers, which rely on static array zones instead of dynamically allocated blocks [30]. When cells with similar properties are not contiguous, traditional partition based techniques are unlikely to infer relevant partitions/precise array invariants.Fig. 1illustrates the Minix 1.1 Memory Management Process Table (MMPT) main structure. The array of structures mproc defined in Fig. 1(a) stores the process descriptors. Each descriptor comprises a field mparent that stores the index of the parent process in mproc, and a field mpflag that stores the process status. Fig. 1(c) depicts the concrete values stored in mproc to describe the process topology shown in Fig. 1(b) (the whole mproc table consists of 24 slots, here we show only 8, for the sake of space). An element of mproc is a process descriptor when its field mpflag is strictly positive and a free slot if it is null. Minix 1.1 uses the three initial elements of mproc to store the descriptors of the memory management service, the file system service and the init process. Descriptors of other processes appear in a random order. In the example of Fig. 1, init has two children whose descriptors are inmproc[3]andmproc[4]; similarly, the process corresponding tomproc[4]has a single child the descriptor of which is inmproc[6]. Moreover, Minix assumes a parent–child relation between mm and fs, as mm has index 0 and the parent field of fs stores 0. To abstract the process table state, valid process descriptors and free slots should be partitioned into different groups.Traditional, contiguous partitioning cannot achieve this for two reasons: (1) the order of process descriptors in mproc cannot be predicted, hence is random in practice, and (2) there is no simple description of the boundaries between these regions (or even their sizes) in the program state. The symbolic abstract domain by Dillig, Dillig and Aiken [15] also fails here as it cannot attach arbitrary abstract properties to summarized cells.In this paper, we set up an abstract domain to partition the array into non-contiguous groups for process descriptors and free slots so as to infer this partitioning and precise invariants (Section 2) automatically. Our contributions are:•An abstract domain that partitions array elements according to semantic properties, and can represent non contiguous partitions (Section 4).Static analysis algorithms for the computation of abstract post-conditions (Sections 5 and 6), widening and inclusion check (Section 7).The implementation and the evaluation of the analysis on the inference of tricky invariants in excerpts of some operating systems (e.g. Minix 1.1) and other challenging array examples (Sections 8 and 9).

@&#CONCLUSIONS@&#
