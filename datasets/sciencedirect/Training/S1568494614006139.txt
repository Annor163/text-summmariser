@&#MAIN-TITLE@&#
A CMFFP-tree algorithm to mine complete multiple fuzzy frequent itemsets

@&#HIGHLIGHTS@&#
Deriving the complete fuzzy association rules.A compressed tree structure.Greatly reduce the computational costs.Handling the quantitative databases.

@&#KEYPHRASES@&#
Data mining,Fuzzy set,Quantitative database,Multiple linguistic terms,Fuzzy frequent itemsets,Frequent pattern tree,

@&#ABSTRACT@&#
In the past, many algorithms were proposed to adopt fuzzy-set theory for discovering fuzzy association rules from quantitative databases. The fuzzy frequent pattern (FFP)-tree and the compressed fuzzy frequent pattern (CFFP)-tree algorithms were respectively proposed to mine the incomplete fuzzy frequent itemsets from the tree-based structures. In the past, multiple fuzzy frequent pattern (MFFP)-tree algorithm was proposed to keep more linguistic terms for mining fuzzy frequent itemsets. Since the MFFP-tree algorithm inherits the property of the FFP-tree algorithm, numerous tree nodes are thus required to build the MFFP-tree structure for mining the desired multiple fuzzy frequent itemsets. In this paper, the compressed multiple fuzzy frequent pattern (CMFFP)-tree algorithm is designed to keep not only the linguistic term with maximum membership value but also the other frequent linguistic terms for mining the completely fuzzy frequent itemsets. In the designed CMFFP-tree algorithm, the multiple frequent linguistic terms are sorted in descending order of their occurrence frequencies to build the CMFFP-tree structure. The construction process is the same as the CFFP-tree algorithm except more information are kept for later mining process to discover the completely fuzzy frequent itemsets. Each node in the CMFFP-tree uses the additional array to keep the membership values of its prefix path by intersection operation. A CMFFP-mine algorithm is also designed to efficiently mine the multiple fuzzy frequent itemsets from the developed CMFFP-tree structure. Experiments are then conducted to show the performance of the proposed CMFFP-tree algorithm in terms of execution time and the number of tree nodes, compared to those of the MFFP-tree and CFFP-tree algorithms.

@&#INTRODUCTION@&#
Knowledge discovery in databases (KDD) is used to derive valuable information, thus helping to make significant decisions. Methods for KDD can be divided into various types, including association rules [3,4], classification [19,35], clustering [17,23,26], and sequential pattern [6,34], among others. Among them, association-rule mining is commonly used in data mining research [9,30,31].Most association-rule mining methods apply Apriori algorithm [4] to generate and test candidate itemsets in a level-wise approach, thus requiring many computations to iteratively re-scan databases for deriving the desired association rules. To solve this problem, Han et al. proposed the frequent-pattern-tree (FP-tree) structure for efficiently mining association rules without generating huge candidate itemsets [12]. The FP-tree algorithm compresses databases by storing only frequent (large) items in a tree structure. It executes the updated transactions tuple by tuple, from the first transaction to the last one, to build the FP tree in the construction phase. A recursive approach called the FP-growth algorithm [12] is then used to efficiently derive frequent patterns from the FP-tree structure in the mining phase.Fuzzy-set theory [37] has been applied to intelligent systems due to its simplicity and similarity to human reasoning [20]. Several fuzzy learning algorithms for inducing rules from given sets of data have been designed and used to good effect in specific domains. Some fuzzy data mining approaches have been also proposed for handling quantitative data [13,14], which use the Apriori algorithm to generate and test fuzzy frequent itemsets level-by-level. Membership functions are used to transform each quantitative value into linguistic terms according to fuzzy-set theory. The membership value of each linguistic term is then calculated for all transaction data for the subsequent mining process to derive fuzzy association rules. Papadimitriou and Mavroudi proposed an approach based on FP-trees to find fuzzy association rules [29]. Their approach considers only two linguistic terms to construct the tree structures. The transformed linguistic terms with transformed membership values in each transaction are then checked against the user-specified minimum support threshold. Some infrequent linguistic terms in a transaction are not produced even if the summation of their membership values in the entire databases is greater than or equal to the user-specified minimum support threshold, which leads to incomplete results. Moreover, fuzzy operations are not used to combine the linguistic terms for producing fuzzy frequent itemsets.Lin et al. proposed the fuzzy FP-tree algorithm [25] and the compressed fuzzy FP-tree (CFFP-tree) algorithm [24] for mining fuzzy frequent itemsets. The quantitative values in transactions are transformed into linguistic terms based on predefined membership functions [13,14]. Each term uses only the linguistic term with the maximum membership value in later processes; the number of linguistic terms is thus equal to the number of original items, which reduces processing time. The fuzzy frequent itemsets, represented by linguistic terms, are then derived from the designed fuzzy FP tree [25] and CFFP tree [24].Considering the multiple linguistic terms of an item to form the complete fuzzy association rules, however, is more reasonable in real-world applications than only considering a single linguistic term with the maximum membership value to represent fuzzy association rules. In this paper, each item may be represented by multiple linguistic terms in subsequent processes. The proposed compressed multiple fuzzy-term FP-tree (CMFFP-tree) structure stores the complete set of linguistic terms regardless whether they are generated from the same item or not. The CMFFP tree inherits the properties of the CFFP tree [24] to keep linguistic terms in descending order of their occurrence frequencies, forming the updated transactions to construct the tree structure tuple by tuple. Each node in the tree has an attached array that stores the membership values of itemsets with its super-items in the path via minimum operation. Based on the CMFFP tree, a mining process called the CMFFP-mine algorithm is proposed for efficiently deriving the related fuzzy frequent itemsets from the paths of the tree, which reduces the recursive process of the FP-growth-like approach.The remaining of this paper is organized as follows. Related works are reviewed in Section 2. The proposed CMFFP-tree construction algorithm and an example are described in Section 3. The proposed CMFFP-mine algorithm and an example are given in Section 4. Experimental results that show the performance of the proposed algorithm are provided in Section 5. Conclusion and discussion are given in Section 6.In this section, fuzzy-set concept, fuzzy association rules, and the FP-tree algorithm are briefly reviewed.A fuzzy set is an extension of a crisp set. Crisp sets allow only full membership or no membership at all, whereas fuzzy sets allow partial membership. An element may belong to more than one set. In a crisp set, the membership of element x in set A is described by a characteristic function uA(x):uA(x)=1ifx∈A,0ifx∉A.Fuzzy set theory extends this concept by defining partial memberships, which can take values ranging from 0 to 1. A membership function is formally defined as [21,37]:uA:X→[0,1]where X refers to the universal set for a specific problem. Assuming that A and B are two fuzzy sets with membership functions uA(x) and uB(x), respectively, the following common fuzzy operators can be defined.(1) Intersection operator:uA∩B(x)=uA(x)τuB(x)where τ is a t-norm operator. That is, τ is a function of [0, 1]*[0, 1]→[0, 1] and must satisfy the following conditions for each a, b, c∈[0, 1]:1.aτ1=a;aτb=bτa;aτb≥cτd if a≥c, b≥d;aτbτc=aτ(bτc)=(aτb)τc.Two instances of a t-norm operator for a τ b are min(a, b) and a*b.(2) Union operator:uA∪B(x)=uA(x)ρuB(x)where ρ is an s-norm operator. That is, ρ is a function of0,1*0,1→0,1and must satisfy the following conditions for each a, b,c∈0,1:1.aρ0=a;aρb=bρa;aρb≥cρd if a≥c, b≥d;aρbρc=aρ(bρc)=(aρb)ρc.Two instances of an s-norm operator for a ρ b are max(a, b) and a+b−a*b.(3) α-cut operator:Aα(x)={x∈X|uA(x)≥α}where Aαis an α-cut of fuzzy set A. Aαthus contains all the elements in the universal set X that has membership grades in A greater than or equal to the specified value of α. These fuzzy operators are used in the proposed fuzzy FP-tree mining algorithm to derive fuzzy association rules.Association rules are commonly derived from transaction databases for data mining [4,7,9,30,31]. Relationships among items are discovered; the presence of certain items in a transaction implies the presence of certain other items. Traditional association-rule algorithms treat items as binary variable in databases, which consider whether an item is bought in a record or not. Transactions with quantitative values are, however, commonly found in real-world applications. Representing quantitative data using binary variables is difficult, making traditional algorithms difficult to apply. Fuzzy-set theory [37] has been increasingly used in intelligent systems due to its simplicity and similarity to human reasoning. Linguistic representation (term) is easily implemented using fuzzy sets, as fuzzy set theory is concerned with quantifying and reasoning using natural language. Several fuzzy mining approaches have been proposed for finding interesting linguistic association rules or sequential patterns from transaction data with quantitative values. Approaches can be divided into two types, namely level-wise algorithms and pattern-growth algorithms.Chan and Au proposed a level-wise approach called the F-APACS algorithm for mining fuzzy association rules [8]. The algorithm transforms quantitative attribute values into linguistic terms and then uses adjusted difference analysis to find interesting associations among attributes. Kuok et al. proposed a fuzzy mining approach for handling numerical data in databases to derive fuzzy association rules [22]. Hong et al. proposed fuzzy mining algorithms for mining fuzzy rules from quantitative transaction data [13,14].Fuzzy data mining based on pattern growth is rare because fuzzy-set processing from the tree structure is much more complicated than crisp-set processing. Several methods for fuzzy data mining from tree structures have been proposed. For example, Papadimitriou and Mavroudi proposed the fuzzy frequent-pattern tree (FFPT) algorithm for finding fuzzy association rules [29]. It uses a user-specified minimum support threshold to remove small linguistic terms in a transaction. In this process, only local frequent linguistic terms (items) in each transaction are stored for subsequent construction and mining procedures. Some infrequent linguistic terms in a transaction are not produced even if the summation of their membership values in the entire databases are greater than or equal to the user-specified minimum support threshold, which leads to incomplete results. Moreover, fuzzy operations are not used to combine the transformed linguistic terms. Lin et al. proposed the fuzzy FP (FFP)-tree algorithm [25] and the CFFP-tree algorithm [24] for efficiently mining fuzzy frequent itemsets from a quantitative database. These algorithms handle a single linguistic term with the maximum membership value among transformed linguistic terms of an item, thus generating incomplete fuzzy frequent itemsets. Many other mining methods for finding fuzzy association rules have been proposed [10,16,32,33,36].The limitations of the Apriori algorithm can be overcome using the frequent-pattern (FP) tree structure and the FP-growth algorithm proposed by Han et al. [12]. Their approach efficiently mines frequent itemsets without the generation of candidate itemsets, and it scans the original transaction database only twice. The mining algorithm consists of two phases; the first constructs an FP-tree structure and the second recursively mines the frequent itemsets from the structure. Three procedures are used in the FP-tree construction phase. All items with their frequencies (counts) in the database are first scanned to check whether they are greater than or equal to the user-specified minimum support threshold. Items which satisfy this condition are considered as frequent 1-itemsets (items) and sorted in descending order of their frequencies to update the transactions in the database. The sorted items of each transaction in the database are then processed tuple by tuple, from the first transaction to the last one, to construct the FP tree. A mining algorithm called FP-growth [12] is then recursively applied to find all frequent itemsets. Several other algorithms based on the FP-tree algorithm have been proposed for mining association rules or frequent itemsets. Some related research is still in progress [2,11,15,27].The proposed construction algorithm for building a compressed multiple fuzzy FP tree (CMFFP tree) from quantitative databases is described in this section. An example is also given. The notation used in the proposed fuzzy data mining algorithm is first described below.DOriginal quantitative database, in which Di∈D, 1≤i≤|D|.A set of membership functions.User defined minimum support threshold.the jth item, 1≤j≤n.Quantitative value of Ijin Di, in which Di={v(i)1, v(i)2,…,v(i)n}.Transformed fuzzy set of an item Ij.kth linguistic term of Ij.v(i)j's fuzzy membership value of Rjk.Number of linguistic terms of Ij.Summation of fuzzy membership value of Rjk.The large fuzzy frequent 1-itemsets of Rjk.Occurrence frequency of Rjkin D.An index table for keeping the sorted order of L1.Designed CMFFP-tree with a null root.The proposed CMFFP-tree construction algorithm integrates fuzzy-set concept and a FP-tree-like approach to find completely fuzzy frequent itemsets from quantitative transaction data. The algorithm uses tree structures similar to those in the CFFP-tree algorithm [24] to store multiple fuzzy frequent itemsets for the subsequent mining process. In the construction phase, quantitative values in transactions are firstly converted into the fuzzy set with several linguistic terms by employing the given membership functions. The membership value of each linguistic term in the transformed database is then sum up to determine whether the summed membership value is larger than or equals to the minimum support count. After that, the transformed transactions are then refined to find the satisfied linguistic terms as the frequent items for later construction process. Each refined transaction is then used to construct the CMFFP tree tuple by tuple from the first transaction to the last one. In the construction process, each node in the CMFFP tree stores a fuzzy frequent item (linguistic term), its membership value, and an array that stores the membership values of its super-itemsets in the path according to the intersection operation, which is the minimum operation here. Note that the transformed linguistic terms from a given item cannot form fuzzy frequent itemsets because they would be meaningless; they are thus not stored in the array. Based on the built CMFFP tree, the fuzzy frequent itemsets are efficiently derived without the need to recursively build a conditional tree in the subsequent mining process. The CMFFP-tree construction algorithm is shown in Fig. 1.First, the quantitative value of each item in the database is then transformed into the fuzzy set (with several linguistic terms) based on the pre-defined membership functions (Lines 1–3). The membership value of each linguistic term is then summed up as the count value (Lines 4–6). Each linguistic term is then determined to check whether its count value is larger than or equals to the minimum support count (Line 7). Besides, the occurrence frequency of each linguistic term is also calculated for later construction process (Lines 8–10). The discovered linguistic terms are sorted in descending order of their membership values to build the Header_Table of the CMFFP tree (Line 11). Each transformed transaction in database is then refined to keep only the sorted linguistic terms (Lines 12–17). After that, the initially root node of CMFFP-tree is first built (Line 18). The construction process is similar as the FP-tree algorithm except each node keeps more information for later mining process (Lines 19–21). In the construction process of tree nodes, an array is used to keep the membership values of the currently processed linguistic term with its prefix linguistic terms in the path by the intersection operation. This approach can thus speeding up the later mining process compared to the pattern-growth-like approach. After all transformed and refined transactions are processed, the final CMFFP-tree structure is thus completely built. An example is given blow to show the process of the processed algorithm.Suppose a transaction is used to respectively construct the MFFP-tree and CMFFP-tree structures for deriving fuzzy frequent itemsets as {f1:v1, f2:v2, …, fn:vn}, where fkis a linguistic term and vkis the membership value of fk, 1≤k≤n. Assume two transactions are {f1:v1, f2:v2} and {f1:v3, f2:v4}. For the MFFP tree, the membership values in a transaction are then sorted in descending order to construct the MFFP-tree structure. Thus, if v1>v2 and v4>v3, four tree nodes are thus generated to construct the MFFP tree. For the designed CMFFP tree, it uses the occurrence frequencies of linguistic terms in descending order to sort the linguistic terms in the transaction. Thus, the occurrence frequencies of f1 and f2 are the same, only two nodes are generated since the membership value of f1 will be (v1+v3) and the membership value of f2 is (v2+v4). Assume a database contains m transactions and each transaction consists of n linguistic terms. In the worst case, there will be (m×n) nodes in MFFP tree but have (n) nodes in CMFFP tree.In this section, an example is given to illustrate how to construct the CMFFP tree from quantitative transaction data. The quantitative transaction database shown in Table 1is used in the example. The database consists of 6 transactions and 5 items, denoted A to E.Assume that minimum support threshold is set at 30% and that the fuzzy membership functions are the same for all items. In this example, the linguistic variables are set at: Low, Middle, and High according to user's preference. The used membership functions in this example are shown in Fig. 2.The construction of the CMFFP tree for this example is described below. First, the quantitative values of the items in the transactions are represented as fuzzy sets. Take the first item in transaction 1 as an example. The amount “4” of (B) is converted into (0.4/B.Low, 0.6/B.Middle) by using the membership functions in Fig. 2. This step is repeated for the other items. The results are shown in Table 2.The membership value of each linguistic term in the transactions is summed as the count value. Take the (B.Low) as an example to illustrate the step. In this example, the membership value of (B.Low) in the transactions is calculated as (0.4+0.8+0.6) (=1.8). The other linguistic terms are calculated in the same way. After that, the results are shown in Table 3.The linguistic terms in Table 3 are then checked against the minimum support count as (6×0.3) (=1.8). Take an item (C) as an example to illustrate the step. The count of three linguistic terms of an item (C) are {(C.Low):0.8, (C.Middle):2.4, (C:High):2.8}. Since the membership values of (C.Middle) and (C.High) are larger than the minimum support count (1.8), they are concerned as the fuzzy frequent 1-itemsets (linguistic terms) and put them into the set of L1. The other linguistic terms of each item are processed in the same way. After that, L1={(A.Middle):3.4, (B.Low):1.8, (C.Middle):2.4, (C.High):2.8}. In the same time, the occurrence frequencies of the linguistic terms in L1 are calculated as the sorted order for later construction process. Take the (C.Middle) as an example to illustrate the step. In this example, (C.Middle) exists in transactions (1, 2, 3, 4, 5, 6); the occurrence frequency of (C.Middle) is calculated as 6. The other 1-itemsets in L1 are calculated in the same way, and the results are shown in Table 4.The linguistic terms in Table 4 are sorted in descending order of their occurrence frequencies to build an index Header_Table of the CMFFP tree. After that, the transactions in Table 2 are then refined to keep only linguistic terms in L1. The linguistic terms of each transaction are then sorted in descending order of their occurrence frequencies in Table 4. After that, the updated transactions are shown in Table 5.The updated transactions in Table 5 are then used to construct the CMFFP-tree structure tuple by tuple. First, the root of the CMFFP tree is initially set atnull. Each node in the constructed CMFFP tree includes the linguistic term, its accumulative membership value, and an attached array to keep the membership values of its prefix linguistic terms in the path by intersection operation. Take the first transaction in Table 5 as an example to illustrate the step. A new node (C.Middle) with its membership value 0.4 is created and linked to therootnode of the CMFFP tree. Since (C.Middle) is the first linguistic term in the path, it is unnecessary to find the membership values of its prefix linguistic terms from the transaction. Next, the node (C.High) with its membership value of 0.6 is created and linked to its parent (prefix) node of (C.Middle). Since (C.Middle) and (C.High) are both associated with an item (C), it is meaningless to calculate the membership value of those two linguistic term. Next, the node (B.Low) with its membership value of 0.4 is created and linked to its parent (prefix) node of (C.High). In this example, an array is then attached to the node (B.Low) to keep the membership values of its prefix linguistic terms (C.Middle) and (C.High) by intersection operation in the path. The membership values of (C.Mddile, B.Low) and (C.High, B.Low) in the attached array of (B.Low) are respectively calculated as min(0.4, 0.4) (=0.4) and min(0.6, 0.4) (=0.4). After that, three hyperlinks from the Header_Table are pointed to three built nodes since they are initially created in the CMFFP tree. The same procedure is then processed for the other transactions in Table 5. After that, the results are shown in Fig. 3.The constructed CMFFP tree can be used for deriving all the fuzzy frequent itemsets without generating the conditional patterns based on the pattern-growth approach. The proposed CMFFP-mine algorithm, which used the CMFFP tree, is described in the next section.After the CMFFP tree is constructed, the fuzzy frequent itemsets can be found using the proposed CMFFP-mine algorithm. The details of the proposed algorithm are given below.The linguistic terms from Header_Table in Fig. 3 are processed one by one and bottom-up to generate the fuzzy frequent itemsets. The nodes containing the currently processed linguistic term in Header_Table are first found in the CMFFP tree. The associated fuzzy frequent itemsets with the currently processed node can be thus efficiently derived using the intersection operation in fuzzy sets, which is minimum operation here. The mining algorithm is given below.In the designed algorithm, the linguistic terms in Header_Table are then processed one-by-one and bottom-up to find the fuzzy frequent itemsets. The hyperlink of each node in the currently processed linguistic term is then used to sum up the membership values of the same combined linguistic terms in the path from its attached array (Lines 2–5). This procedure is then repeated processed until all combined linguistic terms (supersets) are then extracted and the related membership values are accumulated. After that, the kept combined linguistic terms are then determined against to the minimum support count to find the satisfied linguistic terms as the fuzzy frequent itemsets in which the membership values of the satisfied linguistic terms are larger than or equal to the minimum support count (Lines 6–8). An example is given below to illustrate the algorithm.For the constructed CMFFP tree in Fig. 3, the proposed CMFFP-mine algorithm finds the multiple linguistic terms as the fuzzy frequent itemsets as follows. The linguistic terms in Header_Table are processed one by one and bottom-up. In this example, the processed order are (B.Low, C.High, A.Middle C.Middle). Take the (B.Low) as an example to illustrate the step. Nodes with the currently processed (B.Low) in the CMFFP tree are found and shown in Fig. 4.From Fig. 5, the combined linguistic terms with its membership values are then extracted and summed as {(C.Middle, B.Low):(0.4+1.0) (=1.4), (C.High, B.Low):0.4, (A.Middle, B.Low):1.2, (C.Middle, A.Middle, B.Low):1.0}. In this example, all supersets (combined linguistic terms) of (B.Low) are smaller than minimum support count, thus only (B.Low):1.8 is put in the set of fuzzy frequent itemsets (FRs). The other linguistic terms are processed in the same way and the final FRs={(C.Middle):2.4, (A.Middle):3.4, (C.High):2.8, (B.Low):1.8, (C.Middle, A.Middle):2.0}.

@&#CONCLUSIONS@&#
