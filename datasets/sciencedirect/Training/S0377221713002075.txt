@&#MAIN-TITLE@&#
Unoriented two-stage DEA: The case of the oscillating intermediate products

@&#HIGHLIGHTS@&#
We introduce an iterative approach to solve the unoriented two-stage DEA model using the classical radial objective.Our approach determines optimal levels for each input and output by simultaneously reducing inputs and increasing outputs while the intermediate products oscillate and converge.Unlike the slacks-based approach, our model does not require arbitrary weights on inputs and outputs.We demonstrate our model by applying it to Major League Baseball teams during the 2009 season. The model has one input, two intermediate products, and one output.

@&#KEYPHRASES@&#
Data envelopment analysis,Two-stage,Unoriented,Major League Baseball,

@&#ABSTRACT@&#
Data envelopment analysis (DEA) allows us to evaluate the relative efficiency of each of a set of decision-making units (DMUs). However, the methodology does not permit us to identify specific sources of inefficiency because DEA views the DMU as a “black box” that consumes a mix of inputs and produces a mix of outputs. Thus, DEA does not provide a DMU manager with insight regarding the internal source of the organization’s inefficiency.Recent methodological developments have extended the basic DEA methodology to allow the analyst to “look inside” the DMU and model the network of production processes that comprise the organization. In such models, sub-DMUs consume inputs from outside the DMU and intermediate products from other sub-DMUs to produce outputs that flow out of the DMU and intermediate products that flow into other sub-DMUs. In this paper, we present an unoriented two-stage DEA model to measure efficiency in situations in which analysts seek to simultaneously reduce input quantities and increase output quantities. The methodology extends previous work in which the model must be either input-oriented or output-oriented. The key to the methodology is an iterative algorithm that alternates between an input-oriented “push backward” step and an output-oriented “push forward” step that is characterized by damped oscillations in the intermediate products. We apply the methodology to Major League Baseball teams during the 2009 season to demonstrate how this approach provides a deeper understanding of each team’s operations.

@&#INTRODUCTION@&#
Data envelopment analysis (DEA) is a linear programming-based non-parametric methodology for evaluating the relative efficiency of organizational units with multiple inputs and outputs, otherwise called decision making units (DMUs) (Charnes et al., 1978). Each DMU consumes certain levels of inputs and converts them into certain levels of outputs. DEA evaluates the efficiency of a DMU relative to an empirical production possibility frontier determined by all DMUs under appropriate assumptions regarding returns to scale and model orientation.DEA treats each DMU as a “black box,” focusing entirely on the DMU’s inputs, outputs, and their relative efficiencies. There is no consideration of the internal working mechanisms or processes of the DMU. This perspective often fulfills the purpose of analyzing and identifying the inefficient DMUs. A major drawback is that it fails to explain the reasons behind the inefficiencies to DMU managers and hence managers will gain little insight on how to improve efficiency.To address this issue, many researchers have proposed various approaches to network DEA in which the internal structure of the production process is considered when measuring efficiency. In a survey paper, Cook et al. (2010) review and classify several two-stage network DEA structures. In many of these models, the first stage processes the DMU’s inputs into intermediate products and the second stage converts the intermediate products into outputs.Färe and Whittaker (1995) apply an input oriented two-stage network DEA model to study relative efficiency of dairy production. In another study, Färe and Grosskopf (2000) present a network DEA model for the Swedish Institute for Health Economics. Sexton and Lewis (2003) present a two-stage DEA model to measure efficiency of Major League Baseball teams. Their method provides a radial measure of efficiency. Lewis and Sexton (2004a) extend the above mentioned two-stage DEA model to organizations with complex internal structures. Seiford and Zhu (1999) evaluate the performance of 55 US commercial banks using a two-stage network DEA model. Zhu (2000) applies two-stage network DEA to develop a multi-factor financial performance model to examine Fortune Global 500 companies. Yang (2006) creates a two-stage DEA model to provide managerial insights for the Canadian life and health insurance industry. Kao and Hwang (2008) develop a two-stage DEA model and apply it to measure efficiency of non-life insurance companies in Taiwan. Chen et al. (2009b) develop an additive efficiency decomposition approach to generalize the two-stage DEA model presented by Kao and Hwang (2008). Liang et al. (2008) examine and extend the two-stage DEA model using game theory concepts. They also investigate the relationship among non-cooperative, centralized, and standard DEA approaches. Chen et al. (2006) contend that two-stage network DEA with a single intermediate product can behave as a parametric linear model. They develop a nonlinear DEA model to evaluate the impact of Information Technology (IT) on multiple stages of a business operation along with information on how to distribute IT-related resources such that efficiency is achieved. Chen et al. (2009a) examine the relationship and equivalence between the two-stage DEA approaches of Chen and Zhu (2004) and Kao and Hwang (2008). Chen et al. (2010) develop an approach for determining the frontier points for inefficient DMUs within the framework of two-stage DEA.Tone and Tsutsui (2009) present a slacks-based measure approach to network DEA that applies to differing model orientations.They demostrate their methodology by measuring the efficiency of electric power companies. Tone and Tsutsui (2010) present a dynamic slacks-based measure model that can evaluate the overall efficiencies of the DMUs as well as the efficiencies of the individual sub-DMUs in a network DEA. However, the slacks-based measure approach used in both Tone and Tsutsui (2009, 2010) is nonradial and requires the analyst to specify weights on the slacks. By contrast, the model presented in this paper uses the classical DEA radial objective and does not require the specification of subjective weights.In this paper, we consider an unoriented two-stage DEA model in which we seek to simultaneously decrease input levels and increase output levels. The methodology expands on that proposed in Sexton and Lewis (2003), which assumes either an input orientation or an output orientation. This method has also been applied to measure efficiency of bank holding companies (Holod and Lewis, 2011). Currently, we are generalizing this methodology to network DEA models with more complex internal structures (Mallikarjun et al., 2013).To demonstrate our approach, we apply the unoriented two-stage DEA model to Major League Baseball (MLB) teams during the 2009 season. Each MLB team is modeled as a DMU composed of two sub-DMUs. The first sub-DMU represents the front office operation and the second sub-DMU represents the on-field operation. The front office uses the team’s financial resources to acquire its players’ offensive and defensive talents. The on-field operation transforms the talent into team victories.The two-stage DEA approach allows us to evaluate the relative efficiency of each sub-DMU as well as the overall organizational efficiency. We determine the efficiency of each sub-DMU by solving a standard unoriented DEA model using the actual levels of inputs (or intermediate products) consumed and outputs (or intermediate products) produced by the sub-DMU.Let xij0 be the actual level of input i consumed by DMU j, ypj0 be the actual level of intermediate product p at DMU j, and zrj0 be the actual level of output r produced by DMUj. Define ε1kand ε2kto be the efficiencies of the stage 1 sub-DMU and the stage 2 sub-DMU at DMU k, respectively, and define θ1kand θ2kto be the approximate inverse efficiencies of the stage 1 sub-DMU and the stage 2 sub-DMU at DMU k, respectively. Denote by λjthe weight placed on DMU j by DMU k when solving the stage 1 sub-DMU model and denote by μjthe weight placed on DMU j by DMU k when solving the stage 2 sub-DMU model.The stage 1 sub-DMU variable returns-to-scale model for DMU k can be formulated as follows:Minε1korMaxθ1ksubjectto∑j=1nλjxij0⩽ε1kxik0i=1,2,…,I∑j=1nλjypj0⩾θ1kypk0p=1,2,…,P∑j=1nλj=1ε1k+θ1k=2λj⩾0j=1,2,…,nε1k,θ1k⩾0The objective function minimizes the stage 1 sub-DMU relative efficiency at DMU k (or equivalently maximizes its approximate inverse efficiency). The first constraint set ensures that the target stage 1 sub-DMU for DMU k consumes no more of each input than the actual stage 1 sub-DMU. The second constraint set ensures that the target stage 1 sub-DMU for DMU k generates at least as much of each intermediate product as is produced by the actual stage 1 sub-DMU. The third constraint guarantees variable returns to scale. The fourth constraint is a first-order linear approximation of the constraint ε1k*θ1k=1 (Sexton, 2005). Constraints 3 and 4 appear in all the following models.The stage 2 sub-DMU variable returns-to-scale model for DMU k can be formulated as follows:Minε2korMaxθ2ksubjectto∑j=1nμjypj0⩽ε2kypk0p=1,2,…,P∑j=1nμjzrj0⩾θ2kzrk0r=1,2,…,R∑j=1nμj=1ε2k+θ2k=2μj⩾0j=1,2,…,nε2k,θ2k⩾0The objective function minimizes the stage 2 sub-DMU relative efficiency at DMU k (or equivalently maximizes its approximate inverse efficiency). The first constraint set ensures that the target stage 2 sub-DMU for DMU k consumes no more of each intermediate product than the actual stage 2 sub-DMU. The second constraint set ensures that the hypothetical target stage 2 sub-DMU for DMU k generates at least as much of each output as is produced by the actual stage 2 sub-DMU.To evaluate the organizational efficiency, we apply an iterative process which alternates between each stage. At a particular iteration, we use the target levels of the inputs and outputs from the previous iteration on the right-hand sides of the relevant constraints. In addition, we incorporate target levels of intermediate products from the alternate stage on the right-hand sides of the relevant constraints. We continue iterating until all inputs, intermediate products and outputs converge. Finally, we determine the organizational efficiency from the ratios of the final target levels of inputs and outputs to their actual levels.Define ε1ktand ε2ktto be the efficiencies of the stage 1 sub-DMU and the stage 2 sub-DMU for DMU k during iteration t, respectively, and define θ1ktand θ2ktto be the approximate inverse efficiencies of the stage 1 sub-DMU model and the stage 2 sub-DMU model for DMU k during iteration t, respectively. Denote by λjtthe weight placed on DMU j by DMU k when solving the stage 1 sub-DMU model during iteration t and denote by μjtthe weight placed on DMU j by DMU k when solving the stage 2 sub-DMU model during iteration t. Letλjt∗andμjt∗denote the optimal weights.The stage 1 sub-DMU variable returns-to-scale model for DMU k during iteration t can be formulated as follows:Minε1ktorMaxθ1ktsubjectto∑j=1nλjtxij0⩽ε1ktxik0t=1;i=1,2,…,Iε1kt∑j=1nλjt-1∗xij0t⩾2;i=1,2,…,I∑j=1nλjtypj0⩾θ1ktypk0t=1;p=1,2,…,Pθ1kt∑j=1nμjt-1∗ypj0t⩾2;p=1,2,…,P∑j=1nλjt=1ε1kt+θ1kt=2λjt⩾0j=1,2,…,nε1kt,θ1kt⩾0The objective function minimizes the stage 1 sub-DMU relative efficiency at DMU k during iteration t (or equivalently maximizes its approximate inverse efficiency). The first constraint set ensures that the target DMU for DMU k during iteration t consumes no more of each input than it does during iteration t−1. The second constraint set ensures that the target DMU for DMU k during iteration t generates at least as much of each intermediate product as is consumed by the stage 2 sub-DMU during iteration t−1.The stage 2 sub-DMU variable returns-to-scale model for DMU k during iteration t can be formulated as follows:Minε2ktorMaxθ2ktsubjectto∑j=1nμjtypj0⩽ε2kt∑j=1nλjt∗ypj0p=1,2,…,P∑j=1nμjtzrj0⩾θ2ktzrk0t=1;r=1,2,…,Rθ2kt∑j=1nμjt-1∗zrj0t⩾2;r=1,2,…,R∑j=1nμjt=1ε2kt+θ2kt=2μjt⩾0j=1,2,…,nε2kt,θ2kt⩾0The objective function minimizes the stage 2 sub-DMU relative efficiency at DMU k during iteration t (or equivalently maximizes its approximate inverse efficiency). The first constraint set ensures that the target DMU for DMU k during iteration t consumes no more of each intermediate product than is generated by stage 1 sub-DMU during iteration t. The second constraint set ensures that the target DMU for DMU k during iteration t generates at least as much of each output as that during iteration t−1Note that the previous two formulations assume that we first solve the stage 1 sub-DMU model during each iteration. If we solve the stage 2 sub-DMU model first, then the second constraint set in the stage 1 sub-DMU formulation becomes:∑j=1nλjtypj0⩾θ1kt∑j=1nμjt∗ypj0p=1,2,…,Pand the first constraint set in the stage 2 sub-DMU formulation becomes:∑j=1nμjtypj0⩽ε2ktypk0t=1;p=1,2,…,Pε2kt∑j=1nλjt-1∗ypj0t⩾2;p=1,2,…,PIn this section, we present some theoretical results about the unoriented two-stage DEA model presented in the previous section.Theorem 1Under the assumption of constant returns-to-scale, the unoriented two-stage DEA methodology guarantees convergence of the input, intermediate product, and output of a single input, single intermediate product, and single output two-stage DEA model.Letxkt∗be the optimal level of input consumed by DMU k during iteration t,y1kt∗be the optimal level of intermediate product produced by the stage 1 sub-DMU of DMU k during iteration t,y2kt∗be the optimal level of intermediate product consumed by the stage 2 sub-DMU of DMU k during iteration t, andzkt∗be the optimal level of output produced by DMU k during iteration t. Denote by xk0 the actual level of input consumed by DMU k, by yk0 the actual level of intermediate product produced by the stage 1 sub-DMU of DMU k and consumed by the stage 2 sub-DMU 2 of DMU k, and by zk0 the actual level of output produced by DMU k. Define ε1ktto be the efficiency of the stage 1 sub-DMU of DMU k during iteration t, θ1kt=2−ε1ktto be the approximate inverse efficiency of the stage 1 sub-DMU of DMU k during iteration t, ε2ktto be the efficiency of the stage 2 sub-DMU of DMU k during iteration t, and θ2kt=2−ε2ktto be the approximate inverse efficiency of the stage 2 sub-DMU of DMU k during iteration t. Finally, let c1 be the slope of the frontier of the stage 1 sub-DMU and c2 be the slope of the frontier of the stage 2 sub-DMU. Assume that we solve the stage 1 sub-DMU model first during each iteration.We know thatxkt∗=ε1ktxkt-1∗⩽xkt-1∗since ε1kt⩽1 for all t. Thus,xk1∗⩾xk2∗⩾⋯⩾xkt∗is a non-increasing sequence. In addition,y1kt∗=c1xkt∗for all t. Thus,y1k1∗⩾y1k2∗⩾⋯⩾y1kt∗is a non-increasing sequence. We know thatzkt∗=θ2ktzkt-1∗⩾zkt-1∗since θ2kt⩾1 for all t. Thus,zk1∗⩽zk2∗⩽⋯⩽zkt∗is a non-decreasing sequence. In addition,y2kt∗=zkt∗/c2for all t. Thus,y2k1∗⩽y2k2∗⩽⋯⩽y2kt∗is a non-decreasing sequence. We know thaty2kt∗=ε2kty1kt∗⩽y1kt∗since ε2kt⩽1 for all t. Therefore,y1k1∗⩾y1k2∗⩾⋯⩾y1kt∗⩾y2kt∗⩾⋯⩾y2k2∗⩾y2k1∗.We knowy1kt∗=θ1kty2kt-1∗⩾y2kt∗⩾y2kt-1∗for all t. Furthermore, for all t,y1kt-1∗=θ1kt-1y2kt-2∗⩾y1kt∗=θ1kty2kt-1∗andy2kt-2∗⩽y2kt-1∗. Therefore, θ1kt−1⩾θ1ktis a non-increasing sequence bounded below by 1 and ε1kt−1⩽ε1ktis a non-decreasing sequence bounded above by 1.We know thatxk1∗=ε1k1xk0andxk2∗=ε1k2xk1∗=ε1k2ε1k1xk0. Thus,xkt∗=ε1ktxkt-1∗=ε1kt⋯ε1k2ε1k1xk0. Suppose limt→∞ε1kt<1 thenlimt→∞xkt∗=0which cannot be true. Thus, limt→∞ε1kt=1 and limt→∞θ1kt=limt →∞(2−ε1kt)=limt→∞2−limt→∞ε1kt=2−1=1. This implies thatlimt→∞y1kt∗=limt→∞θ1kty2kt-1∗=limt→∞θ1ktlimt→∞y2kt-1∗=limt→∞y2kt-1∗=limt→∞y2kt∗. Hence, the intermediate product will converge toyk∗=limt→∞y1kt∗=limt→∞y2kt∗, the input will converge toxk∗=yk∗/c1, and the output will converge tozk∗=c2yk∗.□We note that the convergence proof assumes that the slope of the frontier at each stage is constant. This is not true in a variable returns-to-scale model. In the one input, one intermediate product, and one output model, the constraints on the input and the intermediate product in the stage 1 model and the constraints on the intermediate product and the output in the stage 2 model are sure to be binding, which is necessary for our proof. However, when the model has multiple inputs, intermediate products, and outputs, the associated constraints are no longer guaranteed to be binding.Thus, while we are unsure of the convergence behavior of the iterative process for general unoriented two-stage DEA models, our computational experience shows that the inputs and outputs converge to unique values but that the intermediate products either converge to unique values or alternate between two values. In Appendix A, we show a one-input, one-intermediate product, and one-output variable returns-to-scale example in which the intermediate product alternates between two values. Further, we show a one-input, two-intermediate products, and one-output constant returns-to scale example in which one of the intermediate products alternates between two values.Theorem 2If at least one of the two sub-DMUs is efficient, the final values of the inputs, intermediate products, and outputs will be the same whether solving the stage 1 sub-DMU first during each iteration or solving the stage 2 sub-DMU first during each iteration.Let xik0 be the actual level of input i consumed by DMU k, ypk0 be the actual level of intermediate product p produced by the stage 1 sub-DMU of DMU k and consumed by the stage 2 sub-DMU of DMU k, and zrk0 be the actual level of output r produced by DMU k. Definexik1∗to be the optimal level of input i consumed by DMU k during iteration 1,ypk11∗to be the optimal level of intermediate product p produced by the stage 1 sub-DMU of DMU k during iteration 1,ypk12∗to be the optimal level of intermediate product p consumed by the stage 2 sub-DMU of DMU k during iteration 1, andzrk1∗to be the optimal level of output r produced by DMU k during iteration 1.Suppose we solve the stage 1 sub-DMU model first during each iteration and it is efficient. Then,xik1∗=xik0for all i andypk11∗=ypk0for all p. This is identical to solving the stage 2 sub-DMU model first during each iteration.Similarly, suppose we solve the stage 2 sub-DMU model first during each iteration and it is efficient. Then,zrk1∗=zrk0for all r andypk12∗=ypk0for all p. This is identical to solving the stage 1 sub-DMU model first during each iteration.□Major League Baseball (MLB) is comprised of 30 teams divided into two leagues. The teams are the DMUs in our analysis. There are 16 teams in the National League and 14 in the American League. Each league is comprised of three divisions containing between 4 and 6 teams. The leagues play under essentially identical rules with one major exception: the American League allows the use of a designated hitter who bats in place of the pitcher.Each team’s objective is to win the World Series. Each team plays 162 regular season games, 144 within its own league and 18 with teams in the other league. Within each league, the first place teams in the three divisions and the second-place team with the most wins qualify for post-season play. Two short series of games within each league determine the league champions, who then compete in the World Series. Our analysis will examine only the regular season, including the interleague games but excluding post-season games.We conceive of an MLB team as a two-stage acquisition and production operation. In the first stage, the team’s front office uses player salaries to acquire talent (offensive and defensive production). In the second stage, the talent produces games won on the field.We assume that each team’s initial focus is on winning enough regular season games to become eligible for post- season competition. We therefore construct our DEA model with only one output: the number of regular season games won (GW).A baseball team wins a game by scoring more runs than their opponent scores after nine innings of play. No game can end in a tie, so games that are tied after nine innings continue until one team wins. A team scores a run when one of its players successfully advances four bases. A player can advance through the bases in several ways and in doing so, may advance teammates. Thus, we identify two inputs to the on-field production process that produces games won: (1) total bases gained (TBG) and (2) total bases surrendered (TBS). We define these quantities below. We will treat TBG and TBS as both inputs to the second stage and outputs from the first stage. Thus, TBG and TBS are the intermediate products in our model.TBG and TBS are the consequences of the team’s talent, which the front office acquires by signing players to contracts. We define total player salary (TS) as the sum of all salaries paid by the team to all players. Thus, TS is the input for our model.MLB uses a statistic called total bases (TB) to measure offensive performance. Specifically, MLB’s definition of total bases for a team in a single year is TB=S+2*D+3*T+4*HR, where S is the number of singles, D is the number of doubles, T is the number of triples, and HR is the number of home runs hit by the team. We extend this definition by adding W, the number of walks received by the team and E, the number of fielding errors committed by the opposing team. Thus, TBG=TB+W+E. We recognize that not every error results in the batter reaching first base. However, each error results in at least one runner (and in many cases the batter) advancing at least one base. We elected to model errors as the approximate equivalent of singles and walks.We define TBS identically except that the summands refer to the number of such hits and walks surrendered by the team, and the number of fielding errors committed by the team, in the given year. We note that TBS is a reverse intermediate product. A team that has surrendered more total bases has had relatively poorer defense, and therefore has had less defensive output from the front office and input to the on-field operation. We model this reverse quantity according to Lewis and Sexton (2004b).Fig. 1shows our model of an MLB team. Note how TBG and TBS are treated as intermediate products connecting the two stages. We can evaluate the efficiency of a team as well as the efficiency of the front office and on-field operation using our unoriented two-stage DEA model.Let TSj0 be the actual total player salary of team j, TBGj0 be the actual number of total bases gained by team j, TBSj0 be the actual number of total bases surrendered by team j, GWj0 be the actual number of games won by team j. Define λjto be the weight placed on the front office sub-DMU of team j by the front office sub-DMU of team k, ε1kto be the relative efficiency of the front office sub-DMU of team k, and θ1kto be the approximate inverse efficiency of the front office sub-DMU of team k. The front office variable returns-to-scale model for team k can be formulated as follows:Minε1korMaxθ1ksubjectto∑j=130λj(TS)j0⩽ε1k(TS)k0∑j=130λj(TBG)j0⩾θ1k(TBG)k0∑j=130λj(TBS)j0⩽ε1k(TBS)k0∑j=130λj=1ε1k+θ1k=2λj⩾0j=1,2,…,30ε1k,θ1k⩾0The objective function minimizes the relative efficiency of the front office sub-DMU of team k or equivalently maximizes its approximate inverse efficiency. The first constraint ensures that the hypothetical target team consumes no more of input (total player salary) than team k. The second constraint ensures that the hypothetical target team generates at least as much of intermediate product (total bases gained) as does team k. The third constraint ensures that the hypothetical target team generates no more of intermediate product (total bases surrendered) as does team k. Our formulation is unoriented since we believe that team management seeks to simultaneously decrease input levels and increase output levels (intermediate products in this case).Define μjto be the weight placed on the on-field sub-DMU of team j by the on-field sub-DMU of team k, ε2kto be the relative efficiency of the on-field sub-DMU of team k, and θ2kto be the approximate inverse efficiency of the on-field sub-DMU of team k. The on-field variable returns-to-scale model for team k can be formulated as follows:Minε2korMaxθ2ksubjectto∑j=130μj(TBG)j0⩽ε2k(TBG)k0∑j=130μj(TBS)j0⩾θ2k(TBS)k0∑j=130μj(GW)j0⩾θ2k(GW)k0∑j=130μj=1ε2k+θ2k=2μj⩾0j=1,2,…,30ε2k,θ2k⩾0The objective function minimizes the relative efficiency of the on-field sub-DMU of team k or equivalently maximizes its approximate inverse efficiency. The first constraint ensures that the hypothetical target team consumes no more of intermediate product (total bases gained) than team k. The second constraint ensures that the hypothetical target team consumes at least as much of intermediate product (total bases surrendered) as does team k. The third constraint ensures that the hypothetical target team generates at least as much of output (games won) as does team k. Our formulation is unoriented since we believe that team management seeks to simultaneously decrease input levels (intermediate products in this case) and increase output levels.To evaluate the overall team efficiency, we apply the iterative process described earlier in this paper. Define ε1ktand ε2ktto be the efficiencies of the front office model and the on-field model for team k during iteration t, respectively, and define θ1ktand θ2ktto be the approximate inverse efficiencies of the front office model and the on-field model for team k during iteration t, respectively. Define λjtto be the weight placed on team j by team k when solving the front office model during iteration t and define μjtto be the weight placed on team j by team k when solving the on-field model during iteration t. Letλjt∗andμjt∗denote the optimal weights.The front office variable returns-to-scale model for team k during iteration t can be formulated as follows:Minε1ktorMaxθ1ktsubjectto∑j=130λjtTSj0⩽ε1ktTSk0t=1ε1kt∑j=130λjt-1∗TSj0t>1∑j=130λjtTBGj0⩾θ1ktTBGk0t=1θ1kt∑j=130μjt-1∗TBGj0t>1∑j=130λjtTBSj0⩽ε1ktTBSk0t=1ε1kt∑j=130μjt-1∗TBSj0t>1∑j=130λjt=1ε1kt+θ1kt=2λjt⩾0j=1,2,…,30ε1kt,θ1kt⩾0The objective function minimizes the relative efficiency of the front office model of team k during iteration t or equivalently maximizes its approximate inverse efficiency. The first constraint ensures that the hypothetical target team for team k during iteration t consumes no more of input (total player salary) than it does during iteration t−1. The second constraint ensures that the hypothetical target team for team k during iteration t generates at least as much of the intermediate product (total bases gained) as is consumed by the on field operation during iteration t−1. The third constraint ensures that the hypothetical target team for team k during iteration t generates no more of the intermediate product (total bases surrendered) as is consumed by the on field operation during iteration t−1.The on-field variable returns-to-scale model for team k during iteration t can be formulated as follows:Minε2ktorMaxθ2ktsubjectto∑j=130μjtTBGj0⩽ε2kt∑j=130λjt∗TBGj0∑j=130μjtTBSj0⩾θ2kt∑j=130λjt∗TBSj0∑j=130μjtGWj0⩾θ2ktGWk0t=1θ2kt∑j=130μjt-1∗GWj0t>1∑j=130μjt=1ε2kt+θ2kt=2μjt⩾0j=1,2,…,nε2kt,θ2kt⩾0The objective function minimizes the relative efficiency of the on-field model of team k during iteration t or equivalently maximizes its approximate inverse efficiency. The first constraint ensures that the hypothetical target team for team k during iteration t consumes no more of the intermediate product (total bases gained) than as is generated by the front office during iteration t. The second constraint ensures that the hypothetical target team for team k during iteration t consumes at least as much of intermediate product (total bases surrendered) as is generated by the front office during iteration t. The third constraint ensures that the hypothetical target team for team k during iteration t generates at least as much of output (games won) as it does during iteration t−1.Note that the previous two formulations assume that we solve the front office model first during each iteration. If we solve the on-field model first, then the second and third constraints in the front office formulation become:∑j=130λjtTBGj0⩾θ1kt∑j=130μjt∗TBGj0∑j=130λjtTBSj0⩽ε1kt∑j=130μjt∗TBSj0Finally, the first and second constraints in the on-field formulation become:∑j=130μjtTBGj0⩽ε2ktTBGk0t=1ε2kt∑j=130λjt-1∗TBGj0t>1∑j=130μjtTBSj0⩾θ2ktTBSk0t=1θ2kt∑j=130λjt-1∗TBSj0t>1

@&#CONCLUSIONS@&#
