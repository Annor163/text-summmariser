@&#MAIN-TITLE@&#
A reference architecture for Farm Software Ecosystems

@&#HIGHLIGHTS@&#
We mould the concept Software Ecosystems to the agricultural domain.We propose a reference architecture for Farm Software Ecosystems.Our reference architecture describes an organizational and technical infrastructure.We motivate that our reference architecture can improve farm enterprise integration.Our reference architecture is used to review some existing initiatives.

@&#KEYPHRASES@&#
Farm Management Information Systems,Software Ecosystems,Open Software Enterprise,Interoperability,Precision agriculture,Smart farming,

@&#ABSTRACT@&#
Smart farming is a management style that includes smart monitoring, planning and control of agricultural processes. This management style requires the use of a wide variety of software and hardware systems from multiple vendors. Adoption of smart farming is hampered because of a poor interoperability and data exchange between ICT components hindering integration. Software Ecosystems is a recent emerging concept in software engineering that addresses these integration challenges. Currently, several Software Ecosystems for farming are emerging. To guide and accelerate these developments, this paper provides a reference architecture for Farm Software Ecosystems. This reference architecture should be used to map, assess design and implement Farm Software Ecosystems. A key feature of this architecture is a particular configuration approach to connect ICT components developed by multiple vendors in a meaningful, feasible and coherent way. The reference architecture is evaluated by verification of the design with the requirements and by mapping two existing Farm Software Ecosystems using the Farm Software Ecosystem Reference Architecture. This mapping showed that the reference architecture provides insight into Farm Software Ecosystems as it can describe similarities and differences. A main conclusion is that the two existing Farm Software Ecosystems can improve configuration of different ICT components. Future research is needed to enhance configuration in Farm Software Ecosystems.

@&#INTRODUCTION@&#
Agri-food supply chain networks are confronted with a growing world population and increasing prosperity and associated changing demands. These developments are challenging because the demand on food is increasing while there are stricter requirements regarding food safety, sustainable food production and transparent supply chains. Therefore, farm enterprises1A farm enterprise can be an arable farm, livestock farm or horticultural farm. In this paper we focus on arable farm enterprises however it is expected that the concept Farm Software Ecosystem can address software integration challenges for the other type of farms as well.1are pushed to improve their production processes by smart monitoring and control. Smart monitoring, -planning and -control of production processes, which can be referred to as smart farming, can be supported by a broad spectrum of technologies, ICT components, and their constituent hard- and software systems (Aubert et al., 2012; Cox, 2002; Lamb et al., 2008; Wolfert et al., 2010). Examples of these ICT components are all kinds of sensors, terminals, implement assemblies, computers and software applications. For smart monitoring and control an integrated information system is required that enables seamless interaction and sharing of data between different ICT components. However, a lack of interoperability is currently severely hindering smart farming because ICT components of multiple vendors do not operate as one integrated farm information system (Aubert et al., 2012; Fountas et al., 2005; Pedersen et al., 2004; Pierce and Nowak, 1999).To overcome this, Wolfert et al. (2014) identified five main challenges (i) handling the increasingly large amounts of data, especially from all kind of agricultural equipment, (ii) interoperability between various systems at farm level and in the whole supply chain network surrounding the farm, (iii) standardization of data, (iv) go beyond the small scale and the regional focus of farm software development while at the same time (v) comply with national or regional differences in farming practices. More specifically for interoperability, the systematic analysis of Kruize et al.(2013) showed that ICT components used within the same farm enterprise (i) have partly overlapping and partly unique services, functions and interfaces, (ii) are missing required application services, functions and interfaces, (iii) have separated data repositories and (iv) have inadequate and incomplete data exchange. In conclusion, most of the available ICT components are lacking both technical and semantic interoperability, resulting in data sharing issues and non-coherent user interfaces (Kruize et al., 2013). Consequently, current ICT components often hamper farm enterprise integration as they do not sufficiently support the monitoring, planning and control processes to enable smart farming. Supporting these processes by making a combination of multiple ICT Components is currently challenging. In addition, the creation of one overarching system developed by one software vendor that overcomes all mentioned challenges is neither a feasible nor – from a competitive point of view – a desirable solution. Hence, a promising method to achieve such integrated solutions is a best of breed approach, which allows users to configure customized software systems from standardized components that are supplied by multiple vendors (Light et al., 2001; Verdouw et al., 2010). As a consequence, software systems are not supplied by single companies, but by a set of independent actors which collaborate and can compete via an integration platform (Light et al., 2001). This integration approach requires an advanced infrastructure that covers both organizational and technological aspects (Wolfert et al., 2010). An organizational infrastructure is required that enables and facilitates both collaboration and competition between actors. In such infrastructure, actors collaborate in their development to provide interoperable ICT components that are based on their core competences and compete with ICT components that provide similar functionalities. A technological infrastructure is required that can support the linkage of ICT components into integrated FMISs. Both the organizational and technological infrastructure should enable and ensure a sustainable collaboration and competition in which all actors, including software developers, farm enterprises, contractors, technology providers and others, can flourish.A concept that addresses such an infrastructure is nowadays called a Software Ecosystem. Currently, Software Ecosystems are becoming more widespread as they are increasingly considered to provide an effective way to construct large software systems on top of a software platform by combining components, developed by actors that are part of different organizations (Bosch, 2009; Manikas and Hansen, 2013; te Molder et al., 2011). Examples of current Software Ecosystems are, among others, Eclipse, Linux/Linux kernel and Android (Manikas and Hansen, 2013). At the moment there are no well-established Software Ecosystems for farming available, although several developments go into this direction. Large agricultural machinery vendors have setup their own proprietary platforms (e.g. John Deere’s Farmsight2www.myjohndeere.deere.com.2or AGCO’s Fuse Technology3www.agcotechnologies.com.3). With these platforms it is still difficult to establish interoperability with other components that come from other manufacturers. Several multi-vendor platforms (e.g. 365FarmNet4www.365farmnet.com.4, Crop-R, AgroSense, FIspace) are recently introduced, but these are still in an early stage of development and sometimes regionally oriented lacking a large international user base.To gain deeper insights into these developments and to support further development of Farm Software Ecosystems, this paper proposes a reference architecture that can be used to map, assess, design and implement Farm Software Ecosystems that contribute to integrated FMISs. The purpose of the reference architecture is to improve communication and collaboration between multiple actors that are part of real-world Farm Software Ecosystems. It will help them to understand Software Ecosystems and enable them to join, form or improve Farm Software Ecosystems that lead to integrated farm information systems.The remainder of this paper first introduces literature about Software Ecosystems and the relation to software development for farming. Second, the methodology for designing the reference architecture for Farm Software Ecosystems is described. Next, the requirements for the reference architecture, the reference architecture itself and an example farm information system that can result from a Farm Software Ecosystem is described. This is followed by an evaluation to verify the Reference Architecture based on the requirements and to validate if it can map existing Farm Software Ecosystems to provide insight how it matches and in what extend. This paper concludes with a discussion and outlook for future research and development.In the Internet of Services (IoS) software components are available as interoperable services on the internet. The IoS allows to decouple the possession and ownership of software from its usage and thus to use Software as a Service (Turner et al., 2003). Users do not need to buy and install a large software system, but required functionality is delivered as a set of distributed web services that can be configured and executed when needed. In contrast to traditional non-modular software systems, it is no longer necessary that components are delivered by the same software vendor. Software companies can concentrate on the development of components that fit best to their core competences. Users can configure customized software systems from standardized components that are supplied by multiple vendors that interact via a common technological platform. Such collaborative environments are nowadays referred to as Software Ecosystems. Software Ecosystems are defined as the interaction of a set of actors on top of a common technological platform that results in a coherent set of ICT components or services (Manikas and Hansen, 2013). These components include hardware, software and service modules, along with an architecture that specifies how they fit together (Eisenmann et al., 2008).In practice, a Software Ecosystem is usually started by a single- or a group of software producing organizations that open up their business processes to become an Open Software Enterprise (Jansen et al., 2012). Such an Open Software Enterprise provides a technical platform and additional (collaboration) artefacts that are essential for the coherence of the software components and for collaboration between multiple actors (Seichter et al., 2010). There are various reasons why actors with different perspectives would like to collaborate in such an environment (Bosch, 2009; Wolfert et al., 2010):•It increases the value of the core offering to existing users and increases the attractiveness for new users.Increase “stickiness” of the technology platform, i.e. it is harder to change the platform when it is widely used (cf. PC operating systems e.g. Windows, iOS, etc.).It creates and facilitates a structural and independent environment, developed by partners in the ecosystem that potentially offers a large critical mass of users (once success has been proven).Share the costs of innovation by collaborating with other actors and accelerate innovation through open innovation in the ecosystem.Decrease total costs of ownership and risks for commoditizing functionality by sharing the maintenance with networking partners.The concept of Software Ecosystems is new for the agricultural domain. Related literature focuses on the integrating capabilities of farm ICT components by proposing a standardized infrastructure that supports the integration of ICT components of multiple vendors (Iftikhar and Pedersen, 2011; Kaloxylos et al., 2012; Nash et al., 2009; Steinberger et al., 2009; Wolfert et al., 2010). Most of these papers focus on semantic aspects of the data to improve interoperability of application components (Iftikhar and Pedersen, 2011; Nash et al., 2009; Steinberger et al., 2009). Examples of available standards for the agricultural domain that facilitates data exchange between application components are the international ISO-11783 standard5http://dictionary.isobus.net/isobus/.5, the Dutch EDI-Teelt standard6www.agroconnect.nl.6, and the German AgroXML standard7www.agroxml.de.7. Most papers also focus on application integration in which there is a focus on the design of an integrated FMIS (Kaloxylos et al., 2012; Kaloxylos et al., 2014; Nikkilä et al., 2010; Sørensen et al., 2010a; Sørensen et al., 2010b). A recent implementation of a platform that can be used to develop an integrated Farm Management Information System (FMIS) is described in Kaloxylos et al. (2012) and Kaloxylos et al. (2014). Yet, this literature misses a specification on how to operationalize and organize a Farm Software Ecosystem. The reference architecture in this paper will address this shortcoming.Furthermore, the Software Ecosystem literature is in an early stage since the concept is coined relatively recently (Messerschmitt and Szyperski, 2005). There is still little consensus on what precisely constitutes a Software Ecosystem, a few analytical models of Software Ecosystems exist, and little research is done in the context of real-world Software Ecosystems (Manikas and Hansen, 2013). Hence, this paper also aims to contribute to the theoretical basis of Software Ecosystems in general.

@&#CONCLUSIONS@&#
This paper proposed a reference architecture for Farm Software Ecosystems that contributes to software development to enable smart farming. Seamless data exchange and dynamic interoperability of different Application Components to enable configuration were identified as the most important challenges. A suitable configuration approach is necessary to link Application Components to each other in a meaningful and coherent way. The resulting Composite Application Component needs to be deployed at Farm Enterprises and be supported by a agricultural service provider. An Open Software Enterprise governs and facilitates the ecosystem and the collaboration between Actors. The reference architecture can be used to map current real-world Farm Software Ecosystems and it is expected to be able to design and implement future Farm Software Ecosystems.It was demonstrated how Farm Software Ecosystems can align software development with multiple Actors in a distributed environment. In such an ecosystem small players can focus on development of small Application Components while relying on larger ICT players that provide general infrastructural components (data storage, servers, etc.) or more complex analyses (e.g. super computers, big data) by generic software components (see Fig. 2). In this way innovation can be stimulated giving small start-up companies a fair chance to accelerate their innovative product and gain market share. This approach is currently stimulated in the FIWARE accelerator program16www.fiware.org/fiware-accelerator-programme.16, which is partly connected with the FIspace Platform, and in which agriculture is an important focus area. For end-users in the ecosystem it is expected that the alignment of software development will lead to better and more affordable solutions because innovation costs are shared. Additionally, the solution can become more flexible because end-users can change the different sub-components of an integrated solution, which will stimulate competition at that level.For integration of different sub-components it is important that the configuration process is supported in an appropriate and well-defined manner. It was concluded that both evaluated Farm Software Ecosystems, AgroSense and Crop-R, are lacking such a support. The FIspace Ecosystem and platform provides a business collaboration core for that purpose (Kruize et al., 2014; Verdouw et al., 2014), although this platform and its ecosystem is still being established. Reference information models - especially Business Process models – could play an important role in a configuration process by describing the farm Business Processes at various levels and from different viewpoints (Verdouw et al., 2010). Such reference information models are also still poorly defined in the current FIspace architecture. They should also refer to common standards as much as possible to ensure interoperability at higher integration levels and acceptation by many users at a global level. The reference models and standards could be offered by an (agricultural) service provider to one or more Farm Software Ecosystems. Future research should focus on developing these information models for Farm Software Ecosystems to provide knowledge about software configuration.The reference architecture presented in this paper is supposed to be a common basis for various Instances of Farm Software Ecosystems that could compete with each other. However, the Open Software Enterprises should prevent ecosystem lock-ins, i.e. that End-Users are hindered in substituting components from one ecosystem to the other. To that end, a kind of federated structure between the different Farm Software Ecosystems is needed. This can be reached by using common standards mainly focussing on platform and semantic interoperability.Although the general market principles and business models for Farm Software Ecosystems will not be fundamentally different in comparison to the past, there are definitely new modes of collaboration emerging that make it necessary for companies to reconsider their strategies (Porter and Heppelmann, 2014). Developers of application and ICT Components should realize that their solution will be part of larger integrated solutions at a higher level. As a consequence, they should not focus at the final end-user so much but establish collaboration with agricultural service providers supporting configuration and other Application Component developers. It also becomes more important to comply with common standards as much as possible to increase the potential usage of a component at a global level. Agricultural Service providers could focus on specific end-users groups (e.g. farmers, input suppliers) combining personal advice and communication with the best customized configuration of ICT- and Application Components based on flexible Contracts. These are just a few examples of developments in new business models that can be expected from Farm Software Ecosystem development. Examples from other sectors show that successful business models emerge gradually as the ecosystem develops (Van ’t Spijker, 2014). An essential issue in these developments is about data ownership, security, privacy and trust. Although the importance was emphasized in this paper, further research is needed on how to deal with this topic in the context of open dynamic Farm Software Ecosystems.From this discussion it can be concluded that there are still technical challenges to be met, especially in the configuration of different components into integrated solutions. It is also clear that there are still many organizational developments needed to successfully develop Farm Software Ecosystems. The reference architecture in this paper can help to guide these developments, which can enrich the architecture.