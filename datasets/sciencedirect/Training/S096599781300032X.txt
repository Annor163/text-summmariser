@&#MAIN-TITLE@&#
A distributed-memory parallel technique for two-dimensional mesh generation for arbitrary domains

@&#HIGHLIGHTS@&#
We present a parallel technique for generating two-dimensional triangular meshes.Generated meshes show the same quality as those generated with serial approaches.Our parallel technique presents a fairly good speed-up.Our load estimation is very effective and can be used for efficient load balancing.

@&#KEYPHRASES@&#
Parallel mesh generation,Advancing front technique,Parallelism,Triangulation,Recursive decomposition,Quadtree,

@&#ABSTRACT@&#
This work describes a technique for generating two-dimensional triangular meshes using distributed memory parallel computers, based on a master/slaves model. This technique uses a coarse quadtree to decompose the domain and a serial advancing front technique to generate the mesh in each subdomain concurrently. In order to advance the front to a neighboring subdomain, each subdomain suffers a shift to a Cartesian direction, and the same advancing front approach is performed on the shifted subdomain. This shift-and-remesh procedure is repeatedly applied until no more mesh can be generated, shifting the subdomains to different directions each turn. A finer quadtree is also employed in this work to help estimate the processing load associated with each subdomain. This load estimation technique produces results that accurately represent the number of elements to be generated in each subdomain, leading to proper runtime prediction and to a well-balanced algorithm. The meshes generated with the parallel technique have the same quality as those generated serially, within acceptable limits. Although the presented approach is two-dimensional, the idea can be easily extended to three dimensions.

@&#INTRODUCTION@&#
This work presents a parallel technique for generating two-dimensional triangular meshes by the advancing front method. The technique was designed to meet four requirements: to respect the input front, discretized in segments, i.e., no boundary refinement can be employed; to produce well-shaped elements, avoiding elements with poor aspect ratios; to provide good transitions among refined and coarse regions of the mesh; and to generate meshes efficiently in terms of time. The algorithm is based on a serial 2D and 3D advancing front strategy developed by the authors [3,9,10].The first requirement is very important in many problems, such as those encountered in simulations in which the domain contains regions with different materials and/or holes. In these problems, it is often desirable that the mesh conform to an existing boundary discretization of those regions. This requirement can be also very important in problems where remeshing can be used, such as in crack growth simulations, since it allows remeshing to occur locally in a region near the crack tip. Our parallel approach can also be extended to crack growth problems.Regarding the second requirement, although the proposed technique does not guarantee bounds on element aspect ratios, care is taken at each step to generate elements with the best possible shapes. In Section 4, it is shown that the technique is successful in meeting this requirement.Concerning the third requirement, in many applications, the size difference between elements in a refined region and those in a coarse region is larger than two orders of magnitude. Thus, to provide good transition capabilities is an important requirement in practical problems.To achieve the fourth requirement, the proposed technique uses a distributed-memory computer architecture with a very high load-balancing capability. This kind of architecture has been widely available nowadays with the cheapening of cluster computers. The parallel technique presented in this work uses the master/slave parallelism paradigm and is easily expandable to three dimensions.The remainder of this work is divided into four sections. The following section describes the related work. Section 3 describes the parallel technique developed, where a hypothetical two-dimensional model (a disk) is used to illustrate the process. Some examples are shown in Section 4, where the important measures of load estimation, speed-up and mesh quality are assessed. Finally, some conclusions are drawn in Section 5.

@&#CONCLUSIONS@&#
This work presented an Advancing Front Technique (AFT) for generating meshes in parallel using a master/slaves model. The estimation of the load for distribution of the meshing work is performed by a quadtree that is built for the given input boundary, which is defined by a sequence of mesh refinement segments. The domain is decomposed in several squared subdomains also based on a quadtree, which takes into consideration the load and the number of slaves processes in the parallel system. These subdomains are sent to the slaves, which will generate mesh employing a serial mesh generation algorithm for each subdomain.After that, the resulting front is sent back to the master process, which will shift the decomposition quadtree cells to a Cartesian direction, repartition the updated front, and send the newly placed subdomains back to the slave processes, which, once again, will generate mesh serially. This shift-and-remesh procedure continues until no more mesh can be generated, shifting the decomposition quadtree cells to different directions each turn.The present implementation presented a fairly good speed-up, balanced by the accurate load estimation, used for efficient load balancing, and maintains the quality of the generated mesh with respect to the serially generated mesh.Some points are still of interest to this research. The amount of serial work performed by the finalizing step could be reduced by employing shifts in other directions, to get rid of cavities such as those shown in the left of the Fig. 12; and by applying the improvement of the layers of elements in parallel, taking more advantage of the Cartesian shifts.It is also possible to remove the global synchronization present in the shifting of the decomposition quadtree. To shift a cell to a direction, it is necessary for a subdomain to know only its neighbors in that direction, along with their front segments. Therefore, a local shift can be employed only among the involved subdomains.The idea presented in this work can also be naturally extended to three-dimensional mesh generation, and the authors are currently working on a 3D version of this technique.