@&#MAIN-TITLE@&#
Bicubic hierarchical B-splines: Dimensions, completeness, and bases

@&#HIGHLIGHTS@&#
We explore the topologic explanation of the dimension formula.The configuration of the T-mesh has been given to guarantee the completeness.We construct a basis.Some elementary applications have been given.

@&#KEYPHRASES@&#
Spline spaces over T-meshes,Completeness,Basis,

@&#ABSTRACT@&#
In this paper, we discuss the bicubicC2spline spaces over hierarchical T-meshes in detail. The topological explanation of the dimension formula is further explored. We provide three necessary conditions for the completeness of the spline spaces. Based on the three conditions, the rule of the refinement of the hierarchical T-mesh is given, and a basis is constructed. The basis functions are linearly independent and complete, which provides a solution for the defects in the former literature.

@&#INTRODUCTION@&#
Splines, which can be adaptively locally refined, are an effective tool for both surface modeling and isogeometric analysis. Because of the special structure of T-mesh, adaptive local refinement is possible for splines defined on this type of mesh. The study of this type of splines appeared early. In 1988, hierarchical B-splines (Forsey and Bartels, 1988) were introduced by Forsey and Bartels. With the advent of isogeometric analysis, the study of this type of splines has increased.In 2003, Sederberg et al. (2003) introduced T-splines. T-splines are a useful tool in surface modeling (Sederberg et al., 2004, 2008), and they have been used in isogeometric analysis (Bazilevs et al., 2010; Dorfel et al., 2010). However, in 2010, Buffa et al. (2010) discovered that the blending functions of T-splines are linearly dependent on some special T-meshes. Li et al. (2012), Li and Scott (2014) introduced analysis-suitable T-Splines (ASTS) to solve this problem. However, because of the refinement rule of T-splines, they act badly in the locality of the refinement (Dorfel et al., 2010). Therefore, researchers have begun to pay attention to other splines defined on T-meshes for isogeometric analysis.PHT-splines (Deng et al., 2008), which usually refer to bicubicC1polynomial splines defined on hierarchical T-meshes, have been used both in surface modeling (Li et al., 2007; Wang et al., 2011a) and isogeometric analysis (Nguyen-Thanh et al., 2011a, 2011b; Wang et al., 2011b). The main drawback of PHT-splines is that they are onlyC1continuous, which restricts their applications somewhere. For example, in geometric modeling,G2continuity is required usually. In 2013, a new type of splines, LR-splines (Dokken et al., 2013), was constructed, and they have been used in IGA (Johannessen et al., 2014). However, their linear independence cannot be guaranteed. In Dokken et al. (2013), the authors provide some strategies to solve this problem. Hierarchical B-splines are also used in isogeometric analysis (Vuong et al., 2011). For the partition of unity, THB-splines are introduced in Giannelli et al. (2012). Because hierarchical B-splines are generated directly from the T-meshes rather than the spline spaces, the completeness cannot be guaranteed generally. Therefore, several articles (Berdinsky et al., 2014, 2015; Giannelli and Jüttler, 2013; Mokriš et al., 2014; Mokriš and Jüttler, 2014) were published to discuss this question.However, these discussions are somewhat complex, and the rules that guarantee the completeness demand many additional cells to be refined beyond the ones we actually need. Actually, the choice of the basis functions of the traditional hierarchical B-splines leads to the incompleteness. In Fig. 1, we show the procedure of generating a hierarchical T-meshTwith the dyadic refinement in Giannelli et al. (2012), Vuong et al. (2011). There is a tensor-product B-spline defined on the tensor-product submesh consisting of the red lines. However, this B-spline is not considered in Giannelli et al. (2012), Vuong et al. (2011). Therefore, the hierarchical B-spline space is not complete in this simple hierarchical T-mesh. We believe adding this B-spline is reasonable.In this paper, we consider this question directly from the spline spaces. As we know, cubic splines are the most considerable splines in both theory (Deng et al., 2008; Li et al., 2012; Li and Scott, 2014) and applications (Bai and Wang, 2010; Desquilbeta and Mariottib, 2010; Li, 2012; Mohanty and Gopal, 2011). We focus on the bicubicC2spline spaces over hierarchical T-meshes in this paper as well. This question has been discussed preliminarily in Wu et al. (2012). In that paper, the T-mesh is a special hierarchical T-mesh denoted byT3,3and a basis function may be the sum of several tensor-product B-splines. In this paper, the hierarchical T-mesh is more general and all of the basis functions are tensor-product B-splines. Unlike the traditional hierarchical B-splines in Vuong et al. (2011), the basis functions concerned include the B-splines we discussed in the last paragraph. We explore the topological explanation of the dimension formula of bicubicC2spline spaces, which also cues the completeness of the traditional hierarchical B-splines. We give three rules of refinement to guarantee the completeness, and a basis is constructed.The remainder of this paper consists of eight sections. In Section 2, we review the definitions and some results regarding T-meshes and spline spaces over T-meshes. Then, we review the dimension formula of bicubicC2spline spaces over hierarchical T-meshes. In Section 4, the topological explanation of the dimension formula is further explored and the rules of refinement are elaborated. The basis is constructed in Section 5. In Section 6, we compare the new splines with HB-splines and T-splines. We give the proof of the linear independence in Section 7. Section 8 provides a number of applications. We end the paper with conclusions and future work in Section 9.Definition 2.1Given two finite strictly increasing sequences of numbers{x1,x2,…,xm},{y1,y2,…,yn}, we obtain mn verticesvi,j(1⩽i⩽m,1⩽j⩽n)inR2, where the coordinate ofvi,jis(xi,yj). Connectingvi,jandvi+1,j(1⩽i⩽m−1)with line segment, and connectingvi,jandvi,j+1(1⩽j⩽n−1)with line segment, we obtain a mesh, which is called a tensor-product mesh.A T-mesh is a rectangular grid that allows T-junctions.Definition 2.2(See Deng et al., 2006, 2013.) SupposeTis a set of axis-aligned rectangles and the intersection of any two distinct rectangles inTeither is empty or consists of points on the boundaries of the rectangles. Then,Tis called a T-mesh. Furthermore, if the entire domain occupied byTis a rectangle,Tis called a regular T-mesh. If some edges ofTalso form a T-meshT′,T′is called a submesh ofT.In this paper, we only consider regular T-meshes. The definitions of vertex, edge and cell are the same as in Deng et al. (2006). A T-junction is a vertex of one rectangle that lies in the interior of an edge of another rectangle. A crossing-vertex is a vertex of four rectangles. An l-edge is a line segment that consists of several edges. It is the longest possible line segment, the interior edges of which are connected and the two end points are T-junctions or boundary vertices. If an l-edge consists of some boundary edges, then it is called a boundary l-edge; otherwise, it is called an interior l-edge. Apparently, a regular T-mesh has four boundary l-edges.A hierarchical T-mesh (Deng et al., 2008) is a special type of T-mesh that has a natural level structure. It is defined recursively. Generally, we start from a tensor-product meshT0, which can be non-uniform and the elements (vertices, edges, cells and l-edges) of which are called the level 0 elements. Then, some cells at level k are each divided into2×2subcells equally, where the new vertices, the new edges, the new cells and the new l-edges are of levelk+1, and the resulting T-mesh is calledTk+1. Continuing this process several times, finally, we obtain a T-meshT, which is called a hierarchical T-mesh. Fig. 2illustrates the process of generating a hierarchical T-mesh.For a hierarchical T-meshT, whenT0is given, the maximal level number of the cells is called the level of the hierarchical T-mesh, which is denoted bylev(T). Conversely, iflev(T)is given,T0is also determined.We useTkto denote the set of all of the level k l-edges. The setTk(k⩾1)can be divided into several subsets,Tk,1,Tk,2,…,Tk,mk, such that the l-edges ofTk,ido not intersect with the l-edges ofTk,j, wherei,j∈{1,2,…,mk}andi≠j. The subsetTk,ris called a connected component ofTk,r∈{1,2,…,mk}. For any l-edge l ofTk(k⩾1)and any cell c of levelk−1, ifl∩cis a line segment, we say lcrossesc. We useN(l)to denote the number of cells of levelk−1that l crosses. For the convenience of the following discussion, we setN(l)=+∞for the l-edge l of level 0. In a hierarchical T-mesh which has more than one cell, at least one of the four vertices of a cell is a crossing-vertex. For a given crossing-vertex v, there are four cellsc1,c2,c3andc4surrounding v. Suppose the smallest level number of the four cells is n. We call the level n cells ofc1,c2,c3andc4the adjacent cells of v.In Fig. 3,Tis a hierarchical T-mesh andlev(T)=1;T1has only one connected component;c1andc2are the adjacent cells ofv1,c3is the adjacent cell ofv2,c4,c5andc6are the adjacent cells ofv3, andc7,c8,c9andc10are the adjacent cells ofv4;N(l1)=2andN(l2)=3for the two l-edgesl1(betweenv5andv6) andl2(betweenv7andv8).Given a T-meshT, we use Ω to denote the region occupied by all of the cells inT, which is called the domain ofT. In Deng et al. (2006), the following spline space definition is proposed:S(m,n,α,β,T):={f(x,y)∈Cα,β(Ω):f(x,y)|ϕ∈Pmn,∀ϕ∈T},wherePmn={p(x,y):p(x,y)=∑i=0m∑j=0ncijxiyj,cij∈R},Cα,βis the space consisting of all of the bivariate functions continuous in Ω with order α along the x-direction and with order β along the y-direction, and thatϕ∈Tmeans ϕ is a cell ofT. It is obvious thatS(m,n,α,β,T)is a linear space. In this paper, we only discussS(3,3,2,2,T), which is denoted asS3(T)for convenience.For a T-meshTofS(m,n,m−1,n−1,T), we can obtain an extended T-mesh in the following fashion. Produce a tensor-product meshMwith2(m+1)vertical lines and2(n+1)horizontal lines, the central rectangle of which is identical to the region occupied byT. Then extend the edges with one end point on the boundary ofTto the boundary ofM. The resulting mesh, which is denoted byTε, is called the extended T-mesh ofTassociated withS(m,n,m−1,n−1,T). Fig. 4is an example of the extended T-mesh.A spline space over a given T-meshTwith homogeneous boundary conditions is defined by Deng et al. (2013)S‾(m,n,α,β,T):={f(x,y)∈Cα,β(R2):f(x,y)|ϕ∈Pmn,∀ϕ∈T,andf|R2∖Ω≡0},wherePmn,ΩandCα,βare defined as before. One important observation in Deng et al. (2013) is that the two spline spacesS(m,n,m−1,n−1,T)andS‾(m,n,m−1,n−1,Tε)are closely related.Theorem 2.3(SeeDeng et al., 2013.) Given a T-meshT, letTεbe the extended T-mesh associated withS(m,n,m−1,n−1,T). ThenS(m,n,m−1,n−1,T)=S‾(m,n,m−1,n−1,Tε)|Ω,dim⁡S(m,n,m−1,n−1,T)=dim⁡S‾(m,n,m−1,n−1,Tε).With the above theorem, to consider the spline space over a T-mesh, we need only to consider the corresponding spline space with homogeneous boundary conditions over its extended T-mesh. In this paper, we only discuss the spline spaceS3(T)with homogeneous boundary conditions, which is denoted byS‾3(T).Definition 3.1Given a hierarchical T-meshTwithlev(T)⩾1, supposeTi,j(i,j⩾1)is a connected component. IfTi,jonly divides the2×2neighbor cells inTi−1(Fig. 5), we callTi,ja minimal connected component.Theorem 3.2(SeeZeng et al., 2015.) SupposeTis a hierarchical T-mesh withV+crossing-vertices and E interior l-edges,lev(T)=n, any l-edge t satisfiesN(t)⩾2, and there areδ4iminimal connected components inTi(i⩾1), whereTiis the set of all of the level i l-edges (see Section2.1). Letδ4=∑i=1nδ4i. IfT0has at least 4 horizontal l-edges and 4 vertical l-edges, thendim⁡S‾3(T)=V+−2E+4+δ4.In the following, the hierarchical T-meshTwe discuss satisfies thatT0has at least 4 horizontal l-edges and 4 vertical l-edges.In Deng et al. (2013), the following definition is introduced to propose a topological explanation to the dimension formulae.Definition 3.3(See Deng et al., 2013.) Given a hierarchical T-meshT, retaining all of the edges that are a part of a line segment with two end points that are crossing-vertices and removing the other edges, we obtain a submeshG. From the construction, we know thatGconsists of all of the line segments whose two end points are crossing-vertices inTand the vertices ofGare the crossing-vertices ofT. The submeshGis called the crossing-vertex-relationship mesh (CVR mesh for short) ofT.There two examples in Fig. 6.InG, we can define cell, edge and l-edge similarly to that in the T-mesh. The difference is that a cell ofGmay not be a rectangle.Proposition 3.4For a hierarchical T-meshT, with the restriction ofN(t)⩾2for any l-edge t, the CVR mesh is connected (i.e., if we treat the CVR mesh as a graph, the graph is connected).Supposelev(T)=n. Consider a connected componentTn,1ofTn. BecauseN(t)⩾2, every l-edge t ofTn,1has at least three crossing-vertices. Therefore, t corresponds to a line segment (denoted byt′) whose two end points are both crossing-vertices. That is,t′will present inG. Therefore, the number of the l-edges inGis the same as inT, and the l-edges ofGare also hierarchical. The level number of an l-edge ofGis equal to the level number of the l-edge it corresponds to inT.Moreover, for two l-edget1andt2inT, ift1intersects witht2at a crossing-vertex, thent1′intersects witht2′, wheret1′andt2′are the l-edges thatt1andt2corresponds to inG, respectively. SinceT0has at least 4 horizontal l-edges and 4 vertical l-edges, the CVR meshG0ofT0is a tensor-product mesh which has at least 2 horizontal l-edges and 2 vertical l-edges. That is,G0is a connected mesh. For any l-edge l at level 1, becauseN(l)⩾2, l intersects with at least one l-edgel0of level 0 at a crossing-vertex. Therefore,l′intersects withl0′, wherel′andl0′are the l-edges that l andl0correspond to inG, respectively. That is, the CVR mesh of the mesh obtained by adding l toT0is a connected mesh. Similarly analyzing for other l-edges at level 1, we obtain thatT1is connected.By induction on the level of the T-mesh, we know the conclusion is right.  □In the following, the hierarchical T-meshTwe discussed is with the restriction ofN(t)⩾2for any l-edge t.We useVGto denote the number of the vertices of the CVR mesh. Therefore,VG=V+. InG, a vertex is the intersection of two l-edges. We distinguish vertices ofGinto six types as follows:1.Type 1: a boundary vertex ofG, which is an end point of an l-edge and an interior vertex of another l-edge,Type 2: a boundary vertex ofG, which is the end points of two l-edges,Type 3: a boundary vertex ofG, which is the interior vertices of two l-edges,Type T: an interior vertex ofG, which is a T-junction ofG,Type +: an interior vertex ofG, which is a crossing-vertex ofG,Type L: an interior vertex ofG, which is the end points of two l-edges.Theorem 3.5(SeeZeng et al., 2015.) SupposeTis a hierarchical T-mesh,lev(T)=n,N(t)⩾2for any l-edge t, its CVR mesh isG, and there areδ4iminimal connected components inTi(i⩾1). Letδ4=∑i=1nδ4i. IfT0has at least 4 horizontal l-edges and 4 vertical l-edges, then(1)dim⁡S‾3(T)=VG+−VGL+δ4.There are several ways to construct a basis, such as the smoothing co-factor method (Wang, 2001), B-net method (Schumaker and Wang, 2012), and finding B-splines over local tensor-product meshes (Deng et al., 2008; Dokken et al., 2013; Sederberg et al., 2003). From the viewpoint of application, the last method is the best choice. Therefore, the first task is to determine the configuration of the hierarchical T-mesh to guarantee that all the tensor-product B-splines can span the whole spline space.A tensor-product B-spline inS‾3(T)is defined on a5×5tensor-product submesh whose CVR mesh is a3×3tensor-product mesh. We want to construct the basis with the help of the CVR mesh ofT. We call the3×3tensor-product submesh ofGa basic mesh, and call the center vertex of the basic mesh an anchor. We useAto denote the set of all the anchors ofG. A vertex may be the anchor of several basic meshes.In Fig. 7, there are 5 basic meshes;v1,v2,v3andv4are all of the anchors;v1is the anchor of 2 basic meshes.Every5×5tensor-product submesh ofTcorresponds to a basic mesh ofG, whereas a basic mesh ofGdoes not necessarily correspond to a5×5tensor-product submesh ofT. See Fig. 8for an example. For the basic mesh in red inG, we cannot find a5×5tensor-product submesh corresponding to it inT.The reason is that the level-difference of some adjacent cells is bigger than 1. In Fig. 8, the cell in light-gray is of level 0, while one of its adjacent cells in blue is of level 2. The level-difference of the two adjacent cells is 2. We have the following lemma.Lemma 4.1For a hierarchical T-meshT, if the level-difference of the adjacent cells is at most one, a basic mesh ofGcorresponds to a5×5tensor-product submesh ofT.To clarify this fact, we should classify the basic meshes.We consider the basic mesh in the refinement process. Suppose the old T-mesh isT; we refine some cells ofTand obtain a new meshT′. The anchor of the new basic mesh could be the center of a cell ofT, the center of an edge ofTor a crossing-vertex ofT. With the restriction of the level-difference less than 2, all types of basic meshes and their corresponding5×5tensor-product meshes are discussed in the following. In Figs. 9, 10 and 11, the basic meshes are bounded by the red lines and the corresponding5×5tensor-product meshes are bounded by the dashed lines.1.The anchor is the center of a cell ofT. See Fig. 9.(a)If cells 1, 2, 3 and 4 are not all refined, the situation is as in Fig. 9.a.If cells 1, 2, 3 and 4 are all refined, the situation is as in Fig. 9.b.The anchor is the center of an edge ofT. See Fig. 10.A. Here we only consider the horizontal edge; the vertical edge can be discussed similarly.(a)If cells 3, 4, 5 and 6 are all refined, the situation is as in Fig. 10.a.If cells 5 and 6 are both refined, cells 3 and 4 are not both refined, and cell 1 is refined, then the situation is as in Fig. 10.b.If cells 5 and 6 are not both refined, cells 3 and 4 are both refined, and cell 2 is refined, the situation is similar.If cells 5 and 6 are not both refined, cells 3 and 4 are not both refined, and cells 1 and 2 are both refined, then the situation is as in Fig. 10.c.The anchor is a crossing vertex ofT, the situation is as in Fig. 11. □A basic mesh is a3×3tensor-product mesh, and its edges belong to 6 l-edges inG. The maximal level number of the 6 l-edges is called the level of the basic mesh, and so is its corresponding5×5tensor-product submesh inT. For example, in Fig. 9, if cells 1, 2, 3 and 4 are of level k, then the new basic meshes are of levelk+1.Every5×5tensor-product submeshT0is divided into 16 parts by its edges, which are called the cells ofT0. Fig. 12is the mesh of case 1(a), and the 16 cells have been marked1,2,…,16. Every basic meshG0is divided into 4 parts, which are called the cells ofG0. In Fig. 12, the four cells are the cells 6, 7, 10 and 11.IfT0is of levelk+1, we can see that a cell ofT0is a cell ofTat level k, consists of two cells ofTat levelk+1, or is a cell ofTat levelk+1. We call the three types of cells ofT0are of level k, levelk+1/2, levelk+1, respectively. In Fig. 12, the cells 1, 4, 13, 16 are of level k, and all the cells 2, 3, 5, 8, 9, 12, 14, 15 are of levelk+1/2. For the case 1(b), the 16 cells ofT0are all of levelk+1. A cell ofG0consists of two cells ofTat levelk+1, or is a cell ofTat levelk+1. We call the two types of cells ofG0are of levelk+1/2, levelk+1, respectively. In Fig. 12, the cells 6, 7, 10, 11 are of levelk+1. For the case 2(c), all of the 4 cells ofG0are of levelk+1/2. We call the5×5tensor-product mesh that consists of 16 cells at the same level a standard tensor-product mesh. For example, the5×5tensor-product meshes of case 1(b), case 2(b), and case 3 are all standard tensor-product meshes. The tensor-product B-spline defined on the standard tensor-product mesh is called a standard B-spline, and the CVR mesh of a standard tensor-product mesh is called a standard basic mesh.Remark 4.2For the hierarchical B-splines in Vuong et al. (2011), all of the basis functions are standard B-splines.With the restriction of the level-difference less than 2, we discuss when the type L points appear. In Fig. 13, dividing the cellc0(bounded by red lines), we want the vertex v to be a type L point in the CVR mesh. Cellc0must be an interior cell, whose adjacent cells arec1,c2,c3andc4. Whenc1andc2are divided andc3andc4are not divided, orc2andc3are divided andc4andc1are not divided, orc3andc4are divided andc1andc2are divided, orc4andc1are divided andc2andc3are not divided, v is a type L point in the CVR mesh.Our first rule is: the level-difference of the adjacent cells is at most one. In the following, the hierarchical T-mesh we discuss satisfies this rule.We have the following two facts about the CVR mesh.1.The adjacent points of a type L point are type + or type 3 points ofG;A type + point is either an anchor or the adjacent point of some type L points.Definition 4.3Lchain: the longest chain consisting ofv0,v1,…,v2n, wherev0,v2,…,v2nare type + or type 3 points,v1,v3,…,v2n−1are type L points, andvi+1is adjacent tovi. Because the level-difference is less than 2, the vertices in an L chain are of the same level.Because an L chain is the longest chain, a type + or type 3 point could only be in one L chain.Ifv0orv2nis type 3, the chain is called a boundaryLchain; otherwise it is called an interiorLchain.For a boundary L chain, ifv0andv2nare both type 3, the chain is called a type 1 chain; otherwise, it is called a type 2 chain. For an interior L chain, ifv0=v2n, it is called a type 3 chain; otherwise, it is called a type 4 chain.If two L chains have the same vertices, we regard the two chains as the same chain. For example,v0,v1,…,v2nandv2n,v2n−1,…,v0are the same chain.In Fig. 14, there are 6 L chains:v20,v21,v22andv30,v31,v32,v33,v34are type 1 chains;v50,v51,v52is a type 2 chain;v40,v41,…,v48is a type 3 chain;v00,v01,v02andv10,v11,…,v16are type 4 chains.Lemma 4.4Type 1 chains and type 3 chains appear if and only if they are in the basic meshes corresponding to the minimal connected components (Fig. 5).This fact could be proved by analyzing the mesh. We only prove the conclusion for type 3 chains, and the case of type 1 chains could be proved similarly.The sufficiency is obvious. For the necessity, consider a part of a hierarchical T-mesh in Fig. 15.a. Suppose all of the cellsc1,c2,…,c16are of level k. We divide some of them to construct a type 3 chain of levelk+1. From the analysis above, the type L points in the CVR mesh appear at the center of the cells that will be divided. Suppose the top-right type L pointvLof the type 3 chain appears at the center ofc7. Here “top-right” means that in this type 3 chain, there is not a type L point abovevL, and among all of the type L points which are in the same height asvLis,vLis the rightmost one. Thenc6,c7andc11will be divided, andc3andc8will not be divided. See Fig. 15.b. Because we will construct a type 3 chain, the center ofc6will also be a type L point in the CVR mesh, otherwise, this chain will terminate. Thenc10will be divided, andc2andc5will not be divided. See Fig. 15.c. Similarly, the center ofc10andc11will also be type L points in the CVR mesh, thenc9,c14,c15andc12will not be divided.Therefore, the connected component in Fig. 15.c is just the connected component that the type 3 chain corresponds to, which is a minimal connected component.  □Theorem 4.5SupposeTis a hierarchical T-mesh,N(t)⩾2for any l-edge t, the level-difference of the adjacent cells is at most one, and the numbers of type 3 chains and type 4 chains inGareC3andC4, respectively, whereGis the CVR mesh ofT. Then,(2)dim⁡S‾3(T)=#A+C3+C4,where#Ais the number of the elements ofA.Suppose the numbers of type 1 chains and type 2 chains inGareC1andC2, respectively. By Lemma 4.4, we have(3)δ4=C1+C3,whereδ4has the same meaning as in Theorem 3.5.For a type 2 chain or a type 3 chain, the numbers of type + and type L points are the same. For a type 1 chain, there is one more type L point than type + points. For a type 4 chain, there is one less type L point than type + points. Therefore,(4)VG+−VGL=#A+C4−C1.Combining Equations (1), (3) and (4), we obtain Equation (2).  □We want all of the basis functions to be tensor-product B-splines. From Equation (2), we know that every type 4 chain must correspond to a basic mesh, that is, every type L point should be in a basic mesh. To explain this phenomenon simply, consider the hierarchical T-meshT2in Fig. 6. By Equation (1) or Equation (2), we havedim⁡S‾3(T2)=5. However, there are only 4 basic meshes in the CVR mesh ofT2. That is, all of the tensor-product B-splines cannot span the space ofS‾3(T2). Therefore, our second rule is: every type 4 chain must correspond to a basic mesh.From Equation (2), we know that different interior L chains should correspond to different basic meshes. In Fig. 16, the L chainv0,v1,v2and the L chainv0′,v1′,v2′are in the same basic mesh. By Theorem 3.5, we havedim⁡S‾3(T)=7, but we can only find 6 basic meshes.To prevent the occurrence of such a situation, we set the third rule: two different L chains cannot be in the same (standard) basic mesh.Now we collect all the restrictions of the hierarchical T-mesh here:1.the hierarchical T-meshTis regular;the initial tensor-product meshT0has at least 4 horizontal l-edges and 4 vertical l-edges;N(t)⩾2for any l-edge t;the level-difference of the adjacent cells is at most one;every type 4 chain corresponds to a basic mesh;two different L chains are not in the same (standard) basic mesh.Then we can define the multiplicity of the anchor under these restrictions. For an anchor v, if there are m type 3 and type 4 chains, the anchors of which are all v, then the multiplicity of v ism+1, denoted bymul(v)=m+1. Combining with Equation (2), we have(5)dim⁡S‾3(T)=∑v∈Amul(v).For example, in Fig. 7,mul(v1)=2,mul(v2)=mul(v3)=mul(v4)=1.In this section, we introduce the algorithm for the refinement briefly. Usually, we choose a5×5tensor-product mesh asT0, no matter whether it is uniform or not.To ensure the second rule, we set the refinement style: we refine the mesh around the crossing vertices. If we want to refine around a crossing vertexv0, we divide the adjacent cells ofv0. In Fig. 17, the crossing vertices ofTthat will be refined around have been marked andT′is the resulting T-mesh. Under this refinement style, every type 3 or type 4 chain is in a standard basic mesh. We call the anchor of the basic mesh the anchor of this L chain. With this refinement style, we haveN(t)⩾2for any l-edge t as well.Different from other types of splines, we refine the mesh based on crossing-vertices instead of cells. Now we give the algorithm for finding the crossing-vertices that will be refined around.We compute the error around every crossing vertex. For a given crossing vertexv0, suppose the adjacent cells ofv0are of level k. There are four cells of level k inTkthat are aroundv0. For example, in Fig. 17, the four cells are in light-gray for the crossing vertex v. We compute the error on the area occupied by the four cells. If the error is greater than a given tolerance ε, this crossing-vertex should be refined around.To guarantee that the level-difference is at most one, we should refine around more crossing-vertices.See Fig. 18. There are three situations that we should refine around more crossing-vertices. If we want to refine aroundv1, because either the cellc1orc2is not divided, we should refine aroundv1′first. If we want to refine aroundv2, because neither of the cellc2andc3is divided, we should refine aroundv2′first. If we want to refine aroundv3, because the cellc5is not divided, we should refine aroundv3′orv3″first. Our principle is to divide as few cells as possible. Therefore, if the cellc4has been divided already, we choosev3′to refine around, which means we should only dividec5. Similarly, if the cellc4has not been divided and the cellc6has been divided already, we choosev3″to refine around, which means we should only dividec5as well. If neither ofc4andc6has been divided, we can choose either ofv3′andv3″to refine around.A standard basic mesh can have one, two, three or four type L points. The situation where two different L chains appear in the same (standard) basic mesh occurs only when the standard basic mesh has two type L points that are not in two different L chains.We use Fig. 19to illustrate when this situation occurs. The red lines correspond to the boundary lines of a standard basic mesh in the CVR mesh. We pay attention to the four verticesv1,v2,v3,v4that can be type L points. It is easy to check that this situation occurs whenv1andv3are both type L points and neither ofv2andv4is a type L point, orv2andv4are both type L points and neither ofv1andv3is a type L point.Here we supposev1andv3are both type L points in the CVR mesh and neither ofv2andv4is a type L point in the CVR mesh. Therefore, none of the cellsa,b,eand f is divided, c or d is divided, and g or h is divided. To avoid this situation, we divide more cells to changev1orv3to a type + point or a type T point. The refinement style tells us that we should refine around the crossing vertex. We choose an appropriate crossing vertex to avoid dividing more cells. For example, in Fig. 19, c is divided. Therefore, we choosev0to refine around. Then, we should only divide b.If we want to refine around a vertex v, Algorithm 1is a simple process for finding a sequence of cross-vertices that should be refined around to ensure the first rule and the third rule. Here we use the recursion of functions. This algorithm is always guaranteed to terminate, because the worst case is that the mesh will become a tensor-product mesh after refining around all the crossing-vertices in RefineListAt(v).In the actual operation, we should refine around more than one cross-vertex. Algorithm 2is a simple process of the refinement of a hierarchical T-mesh.In this section, we provide a detailed construction process for the bicubic hierarchical basis. Supposelev(T)=N. Now that we refined around a crossing vertex v, we divide some cells at levelk+1. The chosen cells are the adjacent cells of v.In Fig. 20, we divide the cell bounded by red lines. The crossing vertices (if they exist) upon this cell that will be influenced have been markedv1,v2,…,v7. We only consider these crossing vertices, and the crossing vertices in other directions can be dealt with in the same manner.We can analyze every vertex ofv1,v2,…,v7as the classification of anchors in Section 4. If the vertex satisfies one of the cases, we add the corresponding tensor-product B-spline to the original basis. After treating all of the vertices surrounding the divided cell, we deal with the crossing vertexv0.We uselev(f)to represent the level of the basis function f andFi0to represent the set of all of the basis functions at level i, andF0=⋃i=0NFi0, whereF00is the tensor-product basis functions ofS‾3(T0)as in Vuong et al. (2011).An anchor can be the center of several basic meshes at different levels.We delete the basis function at level k if the domain of its basic mesh is covered by the domains of the basic meshes of some basis functions at levelk+1. Because the level difference is less than 2, this only occurs to the standard basis functions (i.e., standard B-splines). Now we discuss when this situation appears.In Fig. 21.a, the5×5tensor-product mesh is the domain of a standard B-spline g at level k. First, the cellsa,b,cand d should all be divided. This is because the cells of the basic mesh at levelk+1are at least at levelk+1/2. In Fig. 21.b, the four cells have been divided. In Fig. 21.c, the red lines compose the CVR mesh of the mesh in Fig. 21.b.Second, the four crossing verticesv1,v2,v3andv4should all be anchors. It is easy to verify that when this is true, the domain of the basic mesh of g is covered. To prove the necessity, look at the CVR mesh in Fig. 21.c. The edgeliorli+1, wherei=1,3,5,7, should exist in the CVR mesh. Otherwise, suppose neither ofl1andl2exists. Then, there is a cell (the light-gray cell) that is neither at levelk+1/2nor at levelk+1, thus it cannot be contained in any basic mesh of levelk+1, a contradiction. Whenl1orl2exists, andl7orl8exists,v1is an anchor. Similarly,v2,v3andv4are all anchors. This conclusion is equivalent to none ofv1′,v2′,v3′orv4′is a type L point.After deleting, we useFito represent the basis functions remaining at level i. The final basis we obtain is denoted byF=⋃i=0NFi.Lemma 5.1After the process above, we have(6)dim⁡S‾3(T)=#F.After this process, for ∀ anchor v, we claim that there aremul(v)basis functions whose anchor is v.We use Fig. 21 to prove this claim. The crossing-vertexv0is an anchor. Without losing generality, we can assumev0is of level 0. There is one basis functionf0whose anchor isv0inF0. After dividing the cellsa,b,cand d, v is the anchor of a basic mesh of level 1. Iff0is not deleted, then at least one ofv1′,v2′,v3′,v4′is a type L point. That is, this basic mesh corresponds to a type 3 or type 4 chain of level 1. Therefore,mul(v0)=2inT1. Iff0is deleted, none ofv1′,v2′,v3′,v4′is a type L point. That is, this basic mesh does not correspond to a type 3 or type 4 chain of level 1. Therefore,mul(v0)=1inT1. By induction on the level, we know this claim is right.Combing with Equation (5), we complete the proof.  □In this section, we give an example to illustrate the process above. We useN[x0,x1,x2,x3,x4](x)to denote the cubic B-spline basis function associated with the knot vector[x0,x1,x2,x3,x4]in x-direction,N[y0,y1,y2,y3,y4](y)to denote the cubic B-spline basis function associated with the knot vector[y0,y1,y2,y3,y4]in y-direction, andfvito denote the basis function at level i whose anchor is v.In Fig. 22,Tis the initial T-mesh andGis its CVR mesh. The verticesv10,v20,v30,v40are all the anchors. Therefore,#F00=4. The basis function whose anchor isv10isfv100=N[0,1,2,3,4](x)N[1,2,3,4,5](y).Now we refine aroundv40,v50,v60and obtain a new meshT′whose CVR mesh isG′. By Lemma 4.1, three basis functions whose anchors arev40,v50,v60are added for case 3, one basis function whose anchor isv31is added for case 2(a), one basis function whose anchor isv21is added for case 2(b), and one basis function whose anchor isv11is added for case 2(c). Because the adjacent cells ofv10are not all divided in the refinement process,fv100will not change. So dofv200andfv300. Forv40, because the vertexv′is a type L point,mul(v0)=2andfv400will not change as well. We havefv400=N[1,2,3,4,5](x)N[0,1,2,3,4](y),fv401=N[2,2.5,3,3.5,4](x)N[1,1.5,2,2.5,3](y).Now we refine aroundv70and obtain a new meshT″whose CVR mesh isG″. By Lemma 4.1, one basis function whose anchor isv70is added for case 3, one basis function whose anchor isv′is added for case 1(a), two basis functions whose anchors arev41,v51are added for case 2(b). Becausev′is no longer a type L point inG″,mul(v0)=1andfv400will be deleted.Finally, we haveF0={fv100,fv200,fv300},F1={fv501,fv601,fv701,fv401,fv111,fv211,fv311,fv411,fv511,fv′1}.In this section, we discuss some properties of the basis obtained in Section 5. The support set of any function f issupp(f)={(x,y)∈Ω:f(x,y)≠0},where Ω is the region occupied by the cells inT.First, we give three lemmas about the basis.Lemma 6.1For two basis functionsf1andf2, supposeT1andT2are the tensor-product meshes whichf1andf2are defined on, respectively. InFig. 23,T1andT2are bounded by solid lines and dashed lines, respectively. The pointsA1,A2,A3andA4are the four corner points ofT1. Ifsupp(f1)∩supp(f2)≠∅,supp(f1)⊈supp(f2)andsupp(f2)⊈supp(f1), thenAicannot be the corner point ofT2, wherei=1,2,3,4.ProofThis lemma can be proved by checking all of the types of the basis functions. Iflev(f2)>lev(f1), supposeA1is also the corner point ofT2. Then,supp(f2)⊆supp(f1), a contradiction. Conversely, iflev(f2)<lev(f1), thensupp(f1)⊆supp(f2), also a contradiction.Iflev(f1)=lev(f2), this conclusion is also correct. We omit the proof here.  □Lemma 6.2SupposeFk0={f1,f2,…,fm}. For any basis function f at levelk+1,∃i,i∈{1,2,…,m}, such thatsupp(f)⊆supp(fi).We should check this conclusion for all of the types of the basis functions. Here, we only check this lemma for the first type (in Fig. 9.a) of the basis functions. The others can be verified similarly.The setsupp(f)consists of 9 cells at level k, which have been marked in Fig. 24.a. The cells at level k are obtained by dividing the cells at levelk−1. Therefore, the cells1,2,4and 5, or2,3,5and 6, or4,5,7and 8, or5,6,8and 9 are from the same cell at levelk−1. Here, we suppose the cells4,5,7and 8 are from the same cell at levelk−1. In Fig. 24.b, the cells at levelk−1have been bounded by red lines. The standard B-spline whose support is occupied by the four cells at levelk−1is the one we are looking for.  □Lemma 6.3Supposef∈Fk,f1,f2,…,fmare all of the basis functions at levelk+1whose support is a subset ofsupp(f). Then,supp(f)\⋃i=1msupp(fi)≠∅If f is not a standard basis function,supp(f)consists of at least one cell at levelk−1. However, the support set of the basis functions at levelk+1cannot contain the cells at levelk−1. Therefore, the conclusion is correct for this situation.If f is a standard basis function, see Fig. 25.a. If not all of the cellsc1,c2,c3andc4are divided, we can supposec1is not divided. Then we can check that the cella⊈⋃i=1msupp(fi). If all ofc1,c2,c3andc4are divided, see Fig. 25.b. Because f is not deleted in the refinement, at least one ofv1,v2,v3orv4is a type L point in the CVR mesh. Supposev1is a type L point in the CVR mesh. Then, bothc5andc6are not divided. We can also check that the cella⊈⋃i=1msupp(fi).  □Theorem 6.4The functions inFare linearly independent.SupposeF00={f1,f2,…,fm,fm+1,…,fn},F0={f1,f2,…,fm}, andlev(T)=N.For any function f at level 1, from Lemma 6.2, we know thatsupp(f)is a subset of the support sets of some functions at level 0. We only choose one of them and call it the mother function of f, which is denoted bymot0(f). Similarly, we can definemoti−1(f′)for a functionf′at level i, where1⩽i⩽N. For a function g at level k, we denotemot0(mot1⋯(motk−1(g))⋯)asmot0(g).Suppose(7)∑f∈Fc(f)f=0,c(f)∈RWe should only provec(f)=0for all thef∈F.Letgi={c(fi)fi+∑f∈F1,mot0(f)=fic(f)f+⋯+∑f∈Fn,mot0(f)=fic(f)f,1⩽i⩽m,∑f∈F1,mot0(f)=fic(f)f+⋯+∑f∈Fn,mot0(f)=fic(f)f,m+1⩽i⩽n.Equation (7) becomes(8)∑i=1ngi=0.From the definition, we knowsupp(gi)=supp(fi). Consider the bottom-left cell α of the meshT. Here “bottom-left” means that there is not a cell whose bottom edge is below α, and among the cells whose bottom edges are in the same horizontal line as α is, α is the leftmost cell. From Lemma 6.1, there is only one functionfj∈F00satisfyingα∈supp(fj), namelyα∈supp(gj). Therefore,gjis the only non-zero function acting on α. By Equation (8), we obtaingj=0.Excludinggjfrom Equation (8), we consider the bottom-left cell of the region given byT\α. Also from Lemma 6.1, there is only one function ofgk,k≠jthat can be non-zero on this cell, and it is zero. Continuing this argument, we obtaingl=0for all1⩽l⩽n.From the definition, we know that⋃f∈Fk+10,mot0(f)=fisupp(f)⊆⋃f∈Fk0,mot0(f)=fisupp(f). Therefore, by Lemma 6.3, we havesupp(fi)\⋃k=1N⋃f∈Fk,mot0(f)=fisupp(f)⊇supp(fi)\⋃k=1N⋃f∈Fk0,mot0(f)=fisupp(f)=supp(fi)\⋃f∈F10,mot0(f)=fisupp(f)≠∅,where1⩽i⩽m. Becausegi=0, we obtainc(fi)=0,1⩽i⩽m.Now everygihas become:gi=∑f∈F1,mot0(f)=fic(f)f+⋯+∑f∈Fn,mot0(f)=fic(f)f.We can repeat the discussion on everygi, and obtainc(f)=0whenf∈F1,mot0(f)=fi.Continuing this process, we prove this theorem.  □The basis functions are all tensor-product B-splines, so they inherit some properties, such as nonnegativity and local support. From Equation (6) and the linear independence, we know they are complete. Therefore,Fis a basis ofS‾3(T).Our new splines are somewhat similar to HB-splines in Vuong et al. (2011), but the two types of splines are different in essence:1.The starting points are different. The starting point of HB-splines is that we first construct the basis, and then add some restrictions to guarantee the completeness. The starting point of our new splines is that we first analyze the spline spaces and the topological explanation of the dimension formula, and then construct the basis.The basis is different. We have discussed this difference in Section 4. The tensor-product mesh that a basis function is defined on in HB-splines consists of cells from the same level, while the tensor-product mesh that a basis function is defined on in our new splines may consist of cells from different levels.The starting point of T-splines is the same as HB-splines. The basis (blending functions for more accurate) were constructed as early as in 2003 (Sederberg et al., 2003), while the analysis of the basis begun from 2010 (Buffa et al., 2010). The biggest difference between T-splines and our new splines is that the method of the construction is different. For the same (hierarchical) T-mesh, every vertex is an anchor for T-splines, while only a small part of the vertices are anchors for our new splines.In this section, we attempt to solve a two-dimensional elliptic boundary value problem (BVP)−Δu=fdefined on[0,1]×[0,1]with homogeneous conditions. Heref=−{40000[(2x−1)2(y2−y)2+(x2−x)2(2y−1)2]+400(y2−y+x2−x)}e200(x2−x)(y2−y). The exact solution isu=e200(x2−x)(y2−y)−1.The exact solution is depicted in Fig. 26. Fig. 27shows the adaptive hierarchical T-meshes after 1, 4, 9 and 13 refinements. Fig. 28gives the convergence results forS3(T)over hierarchical T-meshes and forS3(T)over tensor-product meshes. In Table 1we show the iteration number (n), dimensions of the spline spaces, the CPU time, and the error‖uexact−uh‖L2/‖uexact‖L2forS3(T)over hierarchical T-meshes and forS3(T)over tensor-product meshes.In this section, we give two examples of the application on IGA.This problem is a benchmark problem: an infinite plate with a circular hole under constant in-plane tension in the x-direction in IGA and can be described as follows. The infinite plate is modeled by a finite quarter plate. The setup is illustrated in Fig. 29. The exact solution evaluated at the boundary of the finite quarter plate is applied as a Neumann boundary condition. Here,Txis the magnitude of the applied stress for the infinite plate case (we letTx=10here), R is the radius of the hole, L is the length of the finite quarter plate, E is Young's modulus, and ν is Poisson's ratio.At the initial tensor-product mesh, the geometry is represented exactly with two patches by rational bicubic B-splines. The geometrical representation remains the same as divisions are being performed. Fig. 30shows the adaptive hierarchical T-meshes after 1, 5, 10, 14 and 18 refinements. Fig. 31is the xy-direction stress error‖σexact−σh‖L2after 1, 5 and 10 refinements. Fig. 32gives the convergence results forS3(T)over hierarchical T-meshes and forS3(T)over tensor-product meshes. In Table 2, we show the iteration number (n), the dimensions of the spline spaces, the CPU time and the xy-direction stress error‖σexact−σh‖L2forS3(T)over T-meshes andS3(T)over tensor-product meshes.Fig. 32 and Table 2 both show that the adaptive refinement reaches a given tolerance with slightly fewer degrees of freedom than the uniform refinement with NURBS. This phenomenon has be shown in Dorfel et al. (2010), Vuong et al. (2011), Wang et al. (2011b).We consider a conduction equation in this part. The geometry of the domain is illustrated in Fig. 33, whereΩ=[−1,1]×[−1,1]\[0,1]×[0,1]. The heat conduction equation is−Δu=0in Ω with a homogeneous condition onΓD, and Neumann boundary condition∂u∂n=∂f∂nonΓN, where n is outer normal direction, f is an exact solution of the problem and is given here for reference.f={(x2+y2)13sin⁡((2θ−π)/3),(x,y)≠(0,0),0,(x,y)=(0,0),whereθ={arccos⁡(x/r),x≤0andy≥0,π−arcsin⁡(y/r),x≤0andy≤0,2π+arcsin⁡(y/r),x≥0andy≤0.Fig. 34shows the adaptive hierarchical T-meshes after 1, 6 and 12 refinements. Fig. 35gives the convergence results forS3(T)over hierarchical T-meshes and forS3(T)over tensor-product meshes. In Table 3, we show the iteration number (n), the dimensions of the spline spaces, the CPU time and the error‖uexact−uh‖L2forS3(T)over T-meshes andS3(T)over tensor-product meshes.For this example, the advantage of the adaptive refinement is distinct. From the two examples of the application on IGA, we know that whether the advantage of the adaptive refinement is distinct or not is based on the property of the solution.Given an open surface triangulation with verticesVj,j=1,…,Nin 3D space, the corresponding parameter values(uj,vj),j=1,…,Nare obtained from shape-preserving parametrization in Floater (1997), and the parameter domain is assumed to be[0,1]×[0,1]. To construct a spline to fit the given surface, we need only to compute all the control pointsPi,i=1,…,massociated with all the basis functionsbi,i=1,…,m. We denote the fitting spline∑i=1mPibi(u,v)asS(u,v). To find the control points, we just need to solve an over-determined linear systemS(uj,vj)=Vj,j=1,…,Nusing least squares fitting. The surface fitting scheme repeats the following two steps until the fitting error in each cell is less than the given tolerance ε:1.Compute all the control points for all the basis functions.Find all theVjwhose errors are greater than the given error tolerance ε and the nearest crossing vertices in the T-mesh of(uj,vj). Refine around these crossing vertices to form a new mesh, and construct the basis for the new mesh. We use‖S(uj,vj)−Vj‖to define the fitting error ofVj.Fig. 36is the fitting result of the female head. The iteration number (n), the dimensions of the spline spaces, the max error and the CPU time are shown in Table 4.

@&#CONCLUSIONS@&#
We discuss the completeness of the bicubic spline spaces over hierarchical T-meshes. The rules of refinement to guarantee the completeness are obtained. Under these rules, the basis are constructed, which have many useful properties for application. The new splines are compared with HB-splines and T-splines. We give three examples for the preliminary applications, which show the efficiency of the new basis.Although we only discuss bicubic splines in this paper, with the conclusions in Deng et al. (2013), we can analyze biquadratic splines similarly. The difference is that the anchors of the basis functions of biquadratic splines are cells.In the future, more applications will be explored. The 3-variate case is also a considerable question.