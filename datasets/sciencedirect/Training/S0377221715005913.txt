@&#MAIN-TITLE@&#
Design of automated negotiation mechanisms for decentralized heterogeneous machine scheduling

@&#HIGHLIGHTS@&#
We study decentralized scheduling with heterogeneous machines and competing job sets.The jobs belong to self-interested stakeholders with private preference information.We present a metaheuristic-inspired negotiation protocol with various building blocks.The protocol achieves (near) Pareto efficient outcomes and low aggregate social cost.The limitedly informed protocol performs similar to informed centralized approaches.

@&#KEYPHRASES@&#
Group decisions and negotiations,Scheduling,Negotiation protocol,Mechanism design,Complex contracts,

@&#ABSTRACT@&#
We consider a hard decentralized scheduling problem with heterogeneous machines and competing job sets that belong to different self-interested stakeholders (agents). The determination of a beneficial solution, i.e., a respective contract in terms of a common schedule, is particularly difficult due to information asymmetry and self-interested behavior of the involved agents. The agents intend to minimize their individual costs that consist of tardiness cost and their share of the machine operating cost. The aim of this study is to find socially beneficial outcomes by means of negotiation mechanisms that comply with decentralized information and conflicting interests. For this purpose, we present an automated negotiation protocol, which is inspired by metaheuristics, along with a set of optional building blocks. In the protocol, new solutions are iteratively generated, as mutations of a single provisional contract, and proposed to the agents, while feasible rules with quotas restrict the acceptance decisions of the agents. The computational experiments show that the protocol—without central information and subject to strategic behavior—can achieve high quality solutions which are very close to results from centralized multi-criteria procedures. Particular building block configurations yield improved outcomes. Concluding, the considered scheduling problem enhances standard scheduling models by incorporating multiple stakeholders, nonlinear cost functions, and machine operating cost, whereas the presented negotiation approach contributes to the methodology and practice of collaborative decision making.

@&#INTRODUCTION@&#
Planning and scheduling face new challenges these days. As companies are often strongly integrated within supply networks, related decisions are not exclusively subject to a single company’s own preferences but increasingly depend on the interaction with, e.g., suppliers, subcontractors, or customers (Dawande, Geismar, Hall, & Sriskandarajah, 2006). Consequently, decision making becomes a collaborative task. Since the stakeholders have their very own preferences and objectives, planning and scheduling must consider strategic behavior (Kersten & Mallory, 1990). For example, decision makers that compete for shared machine resources may not be willing to disclose private information or may provide biased information such as exaggerated needs to work toward higher individual profits to the detriment of the overall allocation efficiency (Klein, Faratin, Sayama, & Bar-Yam, 2003). Thus, revealed information can be incomplete or misleading and, hence, is a fruit of a poisonous tree for a central authority. As a consequence, a traditional centralized scheduling approach may not be effective in obtaining high quality solutions. Since Operational Research is generally concerned with analytical methods for decision making, the issue of collaborative decision making within a group of autonomous decision makers is highly relevant. In multi-party situations, there is usually no single fully-informed authority that is entitled to hierarchically allocate resources and determine the courses of action for the whole system. Thus, a decentralized group decision making procedure is needed which takes into account strategic behavior of self-interested parties and restricted availability of information.In this paper, we focus on decentralized decision problems on the level of operations management (in particular scheduling problems), which are characterized by recurring decision tasks as well as the potential and need for a formalized and automated decision support procedure. Thus, it is appropriate to devise and apply an automated negotiation approach. At this, decision making entities are represented by autonomous non-cooperative software agents. In contrast to human negotiators, software agents can easily negotiate for millions of rounds to find a mutually agreed upon solution (also called contract). Respective negotiations may be regarded as decentralized search processes which aim to iteratively enhance a contract from a contract space (search space). A major challenge of negotiations are complex contract spaces, which are characterized by multiple interdependent issues that lead to many local optima as well as a vast nonlinear search space (Fink, 2004; Klein et al., 2003). A negotiation procedure is defined by a protocol that controls the observable actions of the agents and related interactions. Such procedures work without requiring the parties to reveal full information on preferences. The rules of the protocol should work toward finding a contract that achieves pursued criteria such as Pareto-efficiency and social welfare.Hence, this paper introduces a novel decentralized scheduling problem that incorporates competing job sets that are connected to multiple self-interested agents, machine operating costs, particularly energy costs, as well as tardiness costs. Extending conventional scheduling assumptions, we argue that both cost functions may be nonlinear and decisions are to be made by finding a multi-lateral contract. The assumption of nonlinearity in tardiness costs rests upon several considerations: firstly, in some scenarios, tardiness may induce a base cost—e.g., due to missing a strict deadline. Secondly, it might be that a small tardiness can mostly be offset by countermeasures, but the more tardiness occurs the higher the cost are (increasing marginal cost). Thirdly, the opposite can occur; missing a due date induces an immediate high penalty but the cost converges to an upper bound (decreasing marginal cost)—e.g., a product cannot be delivered to a customer anymore. Furthermore, energy costs have drawn the interest of managers and researchers in recent years. For instance, while they have always constituted a large part of operational costs for energy-intensive industries, rising energy prices and increasing power consumption of hardware have turned energy into a major cost driver for providers of IT infrastructure as well (Chen et al., 2005). The fact that energy consumption does not necessarily increase linearly with workload adds an additional computational challenge to scheduling approaches that include energy costs (Bodenstein, Schryen, & Neumann, 2012), as do dynamic tariff schemes that compensate industrial customers for reducing their consumption during peak times (Braithwait & Hansen, 2011; Mohsenian-Rad, Wong, Jatskevich, Schober, & Leon-Garcia, 2010). We include these determinants of energy costs into our negotiation scheme to provide a realistic representation of total expenditures. Concerning the nonlinearity of machine operating costs, empirical work has shown that, e.g., computing components’ energy consumption is nonlinearly increasing or decreasing subject to their utilization (Bodenstein et al., 2012). Similarly, vessels’ fuel consumption follows an approximate cubic function subject to their speed (Tierney, Áskelsdóttir, Jensen, & Pisinger, 2014). Furthermore, machine pools tend to be heterogeneous and of mixed efficiency, as broken machines are replaced by more advanced ones, while other older machines are still in place (Heath, Diniz, Carrera, Meira, & Bianchini, 2005).The aim of this paper is twofold. Firstly, we want to advance the knowledge on generic decentralized negotiation procedures for complex contract spaces. For this purpose we describe, enhance, and analyze negotiation mechanisms with different building blocks for achieving beneficial outcomes. Secondly, we introduce and solve the considered multi-agent machine scheduling problem by means of a negotiation protocol with problem-specific operators. For this purpose, we incorporate characteristics of restricted information availability and strategic behavior of autonomous agents in a decentralized scheduling situation. The findings from this study contribute to the methodology and practice of decision support for hard decentralized scheduling problems with information asymmetry and multiple self-interested agents. For such kinds of problems, for the first time, we devise a rich framework of mainly generic negotiation mechanisms which is applied for challenging problem instances with up to 19 agents.The remainder of this paper is structured as follows: After this introduction, we formally define the considered multi-agent scheduling problem and give illustrative examples for applications. Afterward, we give an overview of related work and introduce the devised negotiation-based solution mechanism. The protocol is evaluated in a computational study which is subsequently presented together with a discussion of results. Finally, we conclude the paper and present future work.A set of non-preemptable jobsJ={1,…,j,…,J}which originate from a set of competing agentsI={1,…,i,…,I}has to be scheduled on a set of machinesM={1,…,m,…,M}. Each job j has an associated agent aj(∈I), a standardized processing timepjs,a resource consumption per time slot rj(in terms of a single resource type), a release time sj, and a due date dj(pjs,rj,sj,dj≥0). Without loss of generality, we assume a discrete planning horizon withT={1,…,tmax}as set of all time slots andpjs,sj, and djas non-negative integer values. We assume thatpjs,rj,and sjare publicly known, whereas djis just known to agent aj.The M machines are heterogeneous and have three relevant characteristics: (1) a capacity capm, which is the maximal resource provision by a machine m per time slot, (2) an operating speed osm, which determines the speed of job processing, and (3) an operating cost function Et,m, which determines the cost at time t subject to the machine’s utilization ut,m(as described below). All machines have to fulfill the capacity constraint which is0≤ut,m≤1,∀t∈T,∀m∈M.The machines’ parameters are public information, i.e., all parties are aware of them.The key decision variable of the problem is the schedule π which determines the start time (σj) and assigned machine (μj) for each job:(1)π={(σ1,μ1),…,(σJ,μJ)}.The time pj(π) required for the processing of a job j on a machinem=μjis determined by a machine’s operating speed osm, the job’s standardized processing timepjs,and a standardized operating speedos¯:pj(π)=⌈os¯osμj*pjs⌉(ifosμj=os¯,thenpj(π)=pjs). The completion time fjof a job j is determined by its start and processing time:fj=σj+pj(π). As the problem includes release times, the start time must not be earlier than the release time of a job, that isσj≥sj,∀j∈J.The objective of an agent i is the minimization of his or her total cost which consists of two components: machine operating costs and tardiness costs. The agents use the same measuring commodity (numéraire; e.g., monetary units).The operating cost Et,mfor a given machine m at a given time slot t is subject to the three non-negative parametersαmE,βmE,γmE,the machine utilizationut,m(π)=∑k∈J:μk=m∧σk≤t<fkrkcapm,and a tariff Γ(t):Et,m(ut,m)=[αmE*(ut,m)βmE+γmE*Θ(ut,m)]*Γ(t),with Θ as the Heaviside function:Θ(•)=1:•>0;Θ(•)=0:•≤0.The overall operating costs of the machines are given by(2)EC(π)=∑t∈T∑m∈MEt,m(ut,m).The overall operating costs EC have to be split among the set of agentsI,i.e., each agent i has to cover a share ECiwith∑i∈IECi=EC. Different cost allocation schemes are discussed later on.The tardiness Tjof a job j depends on the completion time fjand the due date dj:Tj=max{fj−dj;0}.Only if a job is tardy, there arises a tardiness cost TCj(Tj). This function TCj(Tj) can be nonlinear and is represented byTCj(Tj)=αjw*(Tj)βjw+γjw*Θ(Tj),withαjw,βjw,γjw≥0and only known to the job’s owner aj. The total tardiness cost of an agent i is given byTTCi(π)=∑j∈J:aj=iTCj(Tj).Finally, we obtain an agent i’s overall objective, minimization of his or her individual cost Ciconsisting of tardiness and operating cost:(3)minπCi=TTCi(π)+ECi(π).Since we are in a group decision situation, the agents decide according to their individual objectives, i.e., a central authority can neither determine the schedule nor instruct how they must decide or behave. The outcome depends on the applied negotiation protocol P. Consequently, we define that the schedule is determined by a contract c that is the outcome of a negotiation NPsubject to a protocol P:(4)π←c=NP(J,I,M).The task of mechanism design for facilitating the planning process is to find an effective negotiation protocol P for a given objective. The outcome of a negotiation protocol should ideally be Pareto-efficient (Jennings et al., 2001; Zhang, Song, Chen, & Hong, 2011), i.e., no agent can reduce his or her individual cost without increasing another agent’s cost. For nonlinear search spaces, strict achievement of Pareto-efficiency cannot be expected. Therefore, a reasonable objective is to find a protocol P that minimizes the Euclidean distance d(•, •) to the closest Pareto-efficient solution:(5)minPminπ*∈ParetoSetd(π,π*)Since assessing Pareto-efficiency may be computationally infeasible in case of a considerable number of agents, we consider as a further evaluation measure the minimization of social cost (maximization of social welfare):(6)minP∑i∈I(TTCi(π)+ECi(π)).Such a cost optimum is itself a Pareto-efficient solution. The aggregate cost represent the social welfare function (or in this case, the social loss) which is also a usual criterion of multi-party optimization (Harsanyi, 1955; Myerson, 1981). We expect a protocol P to deliver near Pareto-efficient solutions for a small agent count and a preferably high social welfare, i.e., low aggregate costs.The introduced scheduling problem is complex due to the decentralized decision situation and the nonlinear objective functions in addition to the fact that the included single-agent problems are alreadyNP-hard as a simplified version:Proposition 1The single agent version of the presented problem isNP-hard.The considered problem contains the well-knownNP-hard single machine total weighted tardiness problem (SMTWTP), which was proven to beNP-hard by Lenstra, Kan, and Brucker (1977), as a special case. We obtain the SMTWTP, if we setM=1;I=1;sj=0,rj=1,βjw=1,γjw=0,∀j ∈ J;cap1=1;os1=os¯;Γ(t)=0,and let the one and only agent decide about the procedure P minimizing TTCi. Consequently, the presented problem isNP-hard as well.□In this section, we present two illustrative application examples from the domains of (1) production and (2) high-performance scientific computing services.In classical production scheduling, the machines can represent, e.g., industrial robots or workshops. We argue that such machines may have nonlinear operating cost functions for two reasons: firstly, present fixed costs are associated to nonlinear average variable costs (see Varian, 2010, Ch. 21); secondly, a lot of technical procedures of machines and relationships of machine components are nonlinear (see Vergnano et al., 2012). The agents can be interpreted differently: for instance, they can represent (1) different departments within a company (e.g., the production and the prototype engineering department), (2) different companies using shared resources (e.g., a joint venture sharing a factory), or (3) large customers (e.g., in a supply chain). The jobs can be production orders with an announced fulfillment date. There is very little empirical work about tardiness cost functions. Nevertheless, Cook, Tanner, and Lawes (2012) showed empirically that the perceived inconvenience and propensity to switch airlines of air travelers is indeed nonlinearly increasing with delay time or, in other words, with fulfillment tardiness.Our second example refers to job scheduling for high-performance computing (HPC)—e.g., in the academic domain. The computing infrastructure of research organizations and universities generally includes HPC machines which are used by several researchers or research groups. Commonly, computers in data centers are heterogeneous, since failed components are replaced with newer and better ones and expansions in capacity and performance favor state-of-the-art components (Heath et al., 2005). This heterogeneity results in varying levels of power consumption among the different types of machines for a given utilization. However, previous research has shown that this power consumption is often nonlinear and best approximated by an allometric function (Bodenstein et al., 2012). In a scientific computing scenario, the agents represent the different stakeholders that share computing resources (e.g., researchers, institutes, departments, or even universities). The individual entities are almost exclusively interested in getting their jobs done (Kraus, 2001). In this scenario, typical jobs are simulations or optimization procedures. The tardiness cost function is arguably not linear: for instance, in the critical phase before a project deadline, the cost may be exponentially increasing, because the risk of missing the deadline rises (see Kraus, Wilkenfeld, & Zlotkin, 1995). To conclude, the management of HPC services involves multi-agent machine scheduling problems with nonlinear operating and tardiness costs as well.Concluding, the presented problem model reflects the circumstances of many real-world application scenarios. The findings of the later presented negotiation procedures can be applied within a decision support system to support reaching agreements in intercompany scheduling.

@&#CONCLUSIONS@&#
This paper studies the scheduling of competing jobs with due dates on multiple heterogeneous machines by multiple agents. As a feature, the model incorporates not only tardiness cost but also machine operating cost (or energy cost). The operating cost is subject to a time-dependent tariff and the machine’s utilization. Furthermore, we argue that tardiness as well as energy cost functions may be nonlinear. This already complex problem is exacerbated by selfish strategic considerations of the involved agents and their unwillingness to share relevant information. To overcome the latter, we present and evaluate a negotiation protocol framework that is partly inspired by metaheuristic concepts and is designed to achieve beneficial outcomes in terms of Pareto efficiency and social cost.For evaluation purposes, we present a computational study with problems that include 300–1200 jobs, 5–20 machines, and 3–19 agents. The results of the computational experiments indicate that the proposed methods are capable to find (near) Pareto-efficient outcomes that also show a good performance in terms of social cost. Although the protocol is mainly generic, parameters such as the number of proposals or negotiation rounds have a significant impact on the eventual quality of the contracts. Even when there are a large number of agents, the measured price of anarchy is rather small and the outcomes are still relatively close to the best centrally determined solutions.Summarizing, the paper contributes to research by the following: Firstly, we introduce a new challenging scheduling problem that incorporates nonlinear tardiness cost as well as machine operating cost functions for heterogeneous machines, which is substantiated by real-world data. Furthermore, the presented problem also considers the presence of different stakeholders (agents), which are self-interested and pursue their individual aims. Self-interested agents are unlikely to share private information with other agents or a central authority and act strategically as well as non-cooperatively. This reflects the reality of intercompany planning and scheduling. Besides the advancement of scheduling theory and applications, the paper enhances the knowledge on generic negotiation procedures. We introduce new policy building blocks and evaluate the negotiation protocol for multi-agent scheduling. As shown, despite having very limited information and suffering from self-interested agents, the protocol is able to obtain beneficial results similar to centralized approaches—even for this very hard scheduling problem.Future work will be to further elaborate the protocol by developing and evaluating additional building blocks. For instance, the protocol could incorporate social choice mechanisms such as eliminating runoff votings in case of an equal amount of approvals. Moreover, the validity of the findings from this study should be assessed by considering other kinds of applications. Those applications might be within the scheduling domain, but the generic protocol might also be applied to other realms such as routing problems. Concerning the presented kind of scheduling problem, the performance will be analyzed subject to the parameters of the problem instances, i.e., we will evaluate the impact of the release time and due date tightness. Related to this, we will work out a decision support system for protocol selection. If protocol configurations perform differently subject to given problem instance characteristics, then the protocol can be chosen dynamically. This can be carried out by means of machine learning algorithms that are able to identify such performance-affecting problem properties. With regard to the underlying agent behavior, the agents could evaluate their improvements prospectively (e.g., by means of Markov chains), i.e., they value their potential improvement in future rounds rather than their current improvement. For the given scenario, such a prospective behavior requires, however, an immense computational effort due to the enormous combinatorial possibilities. Future work may also incorporate the empirical confirmation of the hypotheses of nonlinear cost functions. Another interesting aspect is the consideration of an unbalanced job allocation among the agents or mixed objective functions for the agents. Finally, beyond efficiency considerations, fairness among the agents (e.g., by means of the Gini coefficient) will be a criterion in future work.