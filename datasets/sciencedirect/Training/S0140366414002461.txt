@&#MAIN-TITLE@&#
DCube: A family of network structures for containerized data centers using dual-port servers

@&#HIGHLIGHTS@&#
We propose DCube for data centers with dual-port servers and low-end switches.DCube is a compound graph of a basic building block and hypercube or Mobius graph.DCube significantly reduces the wires and switches compared to BCube and fat-tree.The basic ideas also apply if Dcube uses other hypercube-like graphs.

@&#KEYPHRASES@&#
Data center networking,Compound graph,Hypercube graph,

@&#ABSTRACT@&#
A fundamental goal of datacenter networking is to efficiently interconnect a large number of servers in a cost-effective way. Inspired by the commodity servers in today’s data centers that come with dual-port, we consider how to design low-cost, robust, and symmetrical network structures for containerized data centers with dual-port servers and low-end switches. In this paper, we propose a family of such network structure called a DCube, including H-DCube and M-DCube. The DCube consists of one or multiple interconnected sub-networks, each of which is a compound graph made by interconnecting a certain number of basic building blocks by means of a hypercube-like graph. More precisely, the H-DCube and M-DCube utilize the hypercube and 1-möbius cube, respectively, while the M-DCube achieves a considerably higher aggregate bottleneck throughput compared to H-DCube. Mathematical analysis and simulation results show that the DCube exhibits graceful performance degradation as the failure rate of server or switch increases. Moreover, the DCube significantly reduces the required wires and switches compared to the BCube and fat-tree. In addition, the DCube achieves a higher speedup than the BCube does for the one-to-several traffic patterns. The proposed methodologies in this paper can be applied to the compound graph of the basic building block and other hypercube-like graphs, such as Twisted cube, Flip MCube, and fastcube.

@&#INTRODUCTION@&#
As the fundamental infrastructures for cloud computing, data centers have recently been studied extensively because of their support of many online applications and infrastructural services [1]. Inside a data center, a large number of servers are interconnected by network devices using a specific networking structure, which is becoming an important area of research.A number of novel networking structures for large-scale data centers have been proposed recently [2]. These structures can be roughly divided into two categories. One is switch-centric, which organizes switches into structures other than tree and puts the interconnection intelligence on switches. Fat-Tree [3], VL2 [4], PortLand [5], Dragonfly [6], and PERCS [7] fall into this category. The other category is server-centric, which utilizes the rapid growth of the server hardware and multiple NIC ports to put the interconnection and routing intelligence on the servers. DCell [8], FiConn [9], BCube [10], and BCN [11] fall into the second category. In this setting, the routing capability of each server can be implemented by software-based systems [12], FPGA-based systems [13], and ServerSwitch [14].The containerized data center takes on a different method of building modern mega data centers [15,16]. In a containerized data center, a few thousand servers, usually1k∼4k, along with switches, are packed into a standard 20-feet or 40-feet shipping container. The container environment has several advantages: easy wiring, low cooling cost, high power density, etc. [17]. Containerized data centers can be interconnected by an inter-container networking structure, such as uFix [17] and MDCube [18], so as to scale a data center from thousands of servers to millions.In this paper, we study a simple technical problem: can we build a low-cost, fault-tolerant, and symmetrical network structure for containerized data centers, using commodity servers each only with dual-port and low-end commodity switches? The potential benefits of solving such problem are multifaceted. Firstly, we do not use expensive, high-end switches which are widely used today. Thus, it costs less to build a network structure for containerized datacenters. Secondly, the wiring has a relatively low-cost and low-complexity since each server does not need to have any additional hardware installed except for two NIC ports. Lastly, it can offer an easy-to-build and easy-to-afford testbed at a university or institution [9]. Besides such benefits, most standard, off-the-shelf servers already have two high-speed ports, one primary port and one backup port. Hence, there is no need to physically upgrade the servers when using new servers or reusing servers in existing data centers.In this paper, we propose a family of low-cost and robust network structures, called DCube(n,k), for containerized data centers with dual-port servers and low-end n-port switches. DCube(n,k)consists ofk⩾1interconnected sub-networks, each of which is a compound graph made by interconnecting a certain number of basic building blocks by means of a hypercube-like graph. In each subnetwork, the basic building block is justn/kservers connected to a switch. More precisely, we first design H-DCube, which uses the hypercube graph, and we further enhance the aggregated bottleneck throughput significantly by proposing M-DCube, which adopts the möbius cube. Note that the möbius cube has a diameter approximately half that of the hypercube and its expected distance is approximately two-thirds the hypercube’s expected distance.H-DCube and M-DCube offer high degrees of regularity and symmetry, which are desirable properties of data center networks. These benefits are obtained at the cost of only two links being associated with each server, regardless of the network size. In addition, DCube provides higher bandwidth for the one-to-one traffic and greatly improves the ability of fault tolerance. Mathematical analysis and simulation results show that the DCube has a higher aggregate bottleneck throughput than DCell as the server or switch failure rate increases. Moreover, the DCube significantly reduces the number of required wires and switches compared to BCube and fat-tree; hence, the construction cost, energy consumption, and cabling complexity are largely reduced. Additionally, the DCube achieves a higher speedup compared to BCube does for one-to-several traffic pattern by constructing more edge-disjoint complete graphs.DCube, however, cannot achieve the same aggregate bottleneck throughput as BCube, which employs more ports for each server and switches for routing. In fact, the lower ABT (aggregate bottleneck throughput) of Dcube is the tradeoff of a significantly less number of links and switches. Such an issue can be addressed by other techniques at the application layer, such as the locality-aware task placement.The rest of this paper is organized as follows. Section 2 describes the compound group and related work. Section 3 presents the structures and constructions of the H-DCube and M-DCube. Section 4 proposes dedicated routing schemes for the one-to-one and one-to-several traffic patterns. Section 5 evaluates the properties of the network structures proposed in this paper. Section 7 concludes this paper.A compound graph is suitable for constructing large-scale interconnection networks due to its good regularity and expansibility, where many smaller networks at the lowest level are interconnected to constitute a larger network [19]. Consequently, lower level networks support local communication while higher level networks support remote communication.Definition 1Given two regular graphs, G andG1, a Level-1 regular compound graphG(G1)is obtained by replacing each node of G by a copy ofG1and replacing each link of G by a link which connects two corresponding copies ofG1.A level-1 regular compound graphG(G1)employsG1as a unit cluster and connects many such clusters by means of a regular graph G. In the resultant graph, the topology of G is preserved, and only one link is inserted to connect two copies ofG1. An additional remote link is associated with each node in a cluster. A constraint must be satisfied for the two graphs to constitute a regular compound graph. The node degree of G must be equal to the number of nodes inG1. Otherwise, an irregular compound graph is obtained. For ease of presentation, we show an example of the compound graph in Fig. 1.The basic idea of a compound graph can be extended to the context of a multi-level compound graph, recursively. For ease of explanation, we consider the case where the regular G is a complete graph. A level-2 compound graphG2(G1)employsG(G1)as a unit cluster and connects many such clusters using a complete graph G. More generically, a level-i (i>>0) graphGi(G1)adopts a level-(i-1)graphGi-1(G1)as a unit cluster and connects many such clusters by a complete graph G.As we will show in the next section, the topology of DCell is just a multi-level regular compound graph, while the topologies of FiConn and BCN are two different multi-level irregular compound graphs. The topologies of H-DCube and M-DCube proposed in this paper are two types of one-level regular compound graph. Note that the multi-level regular or irregular graph is a natural way to construct hierarchical network. On the other hand, BCube is an emulation of the generalized Hypercube and is an example of the product network [19]. DCell, FiConn, BCN, and BCube are defined by recursively utilizing the method of compound graph or product network.

@&#CONCLUSIONS@&#
