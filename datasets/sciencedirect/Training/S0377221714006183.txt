@&#MAIN-TITLE@&#
Planning safe navigation routes through mined waters

@&#HIGHLIGHTS@&#
A safe transit of a ship through an area threatened by sea mines has to be found.The problem is solved using a network-based approach.The network is especially tailored to the maneuverability of the ship.Each path in the network is a combination of clothoids and straight line segments.We minimize route length, traveling time, number of maneuvers, or other objectives.

@&#KEYPHRASES@&#
Graph theory,Path planning,Navigation routes,Sea mines,Clothoid curves,

@&#ABSTRACT@&#
In this paper we investigate the problem of finding a safe transit of a ship through areas threatened by sea mines. The aim is to provide decision-making support by a tool that can be integrated into a naval command and control system. We present a route finding algorithm which avoids regions of risk higher than a given threshold. The algorithm takes into account the technical and operational restrictions of the ship’s movement. It allows to minimize the route length, the traveling time, the number of maneuvers, or other objectives.The basic idea is to embed a network in the operational area and compute a least-cost path. Instead of using a regular grid graph which strongly restricts the types of maneuvers and necessitates a path smoothing after optimization, we design a network which is especially tailored to the maneuverability of the vessel. Each path in this network represents a continuous-curvature track based on combinations of clothoids and straight line segments. The approach allows a large variety of maneuvers, hence high-quality solutions are achievable provided a sufficiently dense network.

@&#INTRODUCTION@&#
The rapid increase in the proliferation of sea mines presents a unique challenge to maritime security. Sea mines are self-contained explosive devices placed in water to destroy surface ships or submarines. Since mines are inexpensive they form an effective means to deny the use of large areas. For over a century, they have been used as a strategic weapon in military conflicts to blockade ports, waterways or other maritime zones. The naval forces must be prepared to counter the danger posed by mines. This, in particular, includes to find safe passages in order to sustain commercial and military shipping operations.Planning a navigation route through an area threatened by sea mines is closely related to the classical problem of finding a collision-free path of a vehicle in an environment with obstacles. The latter, also known as path planning or trajectory planning problem, has long been the subject of intensive research. We refer to the reviews of Latombe (1991) and LaValle (2006).Numerous ideas have been investigated to resolve the path planning problem. The most promising include the potential field method, cell decomposition, the roadmap method, the mass-spring-damper method, mixed integer linear programs, and several network-based methods with discretizations of the space by visibility graphs, Voronoi diagrams or regular grids. Newer approaches include the rapidly-exploring random tree method, model predictive control methods, and mathematical programming methods. Comprehensive reviews are given by Goerzen, Kong, and Mettler (2010) and Ferguson, Likhachev, and Stentz (2005).While previous research mainly focused on vehicles moving on ground (mobile robots, autonomous vehicles) or in air (unmanned aerial vehicles, drones, autonomous helicopters), less work has been published for sea vehicles. Although the problems are closely related the proposed algorithms are not directly applicable since, from a technological point of view, ships behave quite differently than ground vehicles or aircraft. Moreover, shipping may imply specific operational requirements.An important fact is that continuous methods can only find locally optimal solutions which may be far from globally optimal. On the other hand, network-based methods give an approximate problem, but means that one can find a globally optimal solution (see e.g. Zabarankin, Uryasev, & Pardalos, 2002). Furthermore, network-based methods appear more promising for realizing specific technological and operational constraints.Fagerholt, Heimdal, and Loktu (2000) present an algorithm to find a shortest route for a ship located at sea to a destination port, in the presence of polygonal obstacles. It relies on the partial computation of a visibility graph and solves the problem using two variants of the algorithm of Dijkstra.In a series of papers, Piatko, Diehl, McNamee, Resch, and Wang (2002), Piatko, Priebe, Cowen, Wang, and McNamee (2001) and Resch, Piatko, Pineda, Pistole, and Wang (2003) present path planning techniques to find low-risk paths of a ship through a minefield. They discretize the operational area by evenly distributing vertices, with eight edges emerging from each vertex (along the axes and the diagonals), hence generating a regular grid graph. The authors develop probabilistic risk models and identify different path quality attributes. The problem is then solved by defining appropriate costs on the edges of the graph and calculating a least-cost path.A similar method has been suggested by Bekker and Schmid (2006). They also use a regular grid graph, and remove all edges which lie within some safety radius around the mines. The remaining edges get as a cost either the length, or a risk value depending on the distance to the mines, or a mixture of both. Again a least-cost path has to be determined. Their approach has been extended by Li (2009) who added longer edges to the graph in order to improve the solution.A drawback of the above methods is that important factors including the characteristics of the ship (maneuverability, turning circle, etc.) or restrictions which are implied by operational reasons (e.g. no sharp maneuvers due to passenger or cargo safety) are not considered. Each method provides a polygonal line, possibly with sharp turns or extreme maneuvers, which the ship may not be able to follow.Turn constraints have been successfully implemented in a recent research of Ari, Aksakalli, Aydogˇdu, and Kum (2013) where the goal is to find a shortest path through an area with obstacles. Their approach is based on a regular grid as above, however, they use a vertex replication technique where each vertex is split into copies labeled by the direction the ship is coming from. This incorporates navigation history into the present location and allows to impose realistic ship turn constraints. Moreover, the operational area can be discretized at any desired resolution. Indeed, there is still room for improvement since ship maneuvers are limited to 45° turns with full rudder deflection (which might imply that the solution is far from optimal) and a path smoothing is required after optimization (which might cause collision with an obstacle if not provided with a buffer zone).The aim of our work is to develop an algorithm which finds a safe route through a mined area. Particular attention will be given to the technical capabilities and operational restrictions of the ship’s movement. Moreover, the maritime environment including shallows, islands, obstacles, etc., will be considered. The algorithm is intended to be integrated as a decision-making tool into a naval command and control system.We propose a network optimization approach, focusing on the generation of a special randomized network which is adapted to the maneuverability of the ship. The paths in the network correspond to smooth (continuous-curvature) tracks consisting of clothoids and straight line segments. The approach allows to set restrictions on the track including (non-symmetric) turn radius constraints, thus avoiding too sharp maneuvers, but also other restrictions such as the exclusion of long-lasting weak maneuvers (which might be undesirable due to operational reasons). The change of velocity during turning maneuvers is taken into account. The random structure of the network allows a large variety of maneuvers of different strengths and without turn degree limitations.By applying standard shortest-path methods, we can determine routes which avoid regions of risk higher than a given threshold. With appropriate costs defined on the edges, different objectives can be considered such as minimizing route length, traveling time, the number of maneuvers, or some compromise of these. Like all network-based methods, our approach is of a heuristic nature. On the other hand, the quality of the solutions can be continually improved by increasing the size of the network, as illustrated in Section 5.In the next section, a mathematical model of the ship’s movement is presented, along with a brief description of the threat model and the optimization problem. Section 3 contains the basic idea of the network generation and the route planning algorithm. In Section 4 we discuss how to speed up the algorithm by using efficient intersection procedures, and by separating the planning into preprocessing and online planning. Computational results are presented in Section 5. We conclude with final remarks in Section 6.Our first task is to establish a realistic model of the movement of a ship. From an operational point of view, a planned ship track should fulfill certain requirements. First, the track should be easy to navigate, i.e. it should allow easy handling and control of the ship by the crew. To the extent possible, long-lasting maneuvers and extreme course alterations should be avoided. Finally, the track’s curvature should be continuous in order to guarantee a smooth navigation. This is because following a planned track should not unduly burden the ship and the crew. These aspects become crucial in transporting people or dangerous goods. Comfort and safety can only be ensured for continuous-curvature trajectories.A clothoid, also known as Euler or Cornu spiral, is a curve whose curvature changes linearly with its length (Abramowitz & Stegun, 1972). It is well known that a vehicle following the curve at constant speed will have a constant change of centripetal acceleration. Hence, the clothoid is a perfect representation of a vehicle traveling at constant speed with a constant rate of change of the steering angle (Kanayama & Miyake, 1985). The linear steering motion makes such a track comfortable for vehicle and crew.It has been shown in Mohović, Mohović, and Rudan (2012) that a clothoid very well approximates the curve of a turning ship up to a turning angle of about 100–120°, although the speed is not constant. In the first phase of the maneuver, when the rudder is deflected, the track is close to a straight line since the ship starts turning very slowly. Then the curvature increases and the track gradually turns into a circle. During this part of the turn, the speed of the ship decreases. If the angle exceeds 120° the ship moves with constant speed in a circle with constant radius. The characteristic phases of a turning ship and the approximating clothoid are sketched in Fig. 1. Our goal is to realize the ship track as a combination of straight line segments and clothoids. The transitions between the track segments have to be smooth.A clothoid can be expressed as a parametrized curveγ(t)=x(t)y(t),0⩽t⩽Twith domain[0,T]andx(t)=aπ∫0tcosπτ22dτ,y(t)=aπ∫0tsinπτ22dτ.It is well known and straightforward to verify that the arc length and the curvature of the curve ares=aπt,κ=πat,respectively. Henceκ=1a2s,i.e. the curvature is proportional to the arc length. The parameter a represents a scale factor which defines the rate of change of the curvature and hence the size of the clothoid. The Fresnel integralsC(t)=∫0tcosπτ22dτ,S(t)=∫0tsinπτ22dτ,do not have an analytical solution. According to the power series expansions of cosine and sinecos(t)=1-t22!+t44!-t66!+…,sin(t)=t-t33!+t55!-t77!+…,they can be solved numerically usingC(t)=t-12!π22t55+14!π24t99-16!π26t1313+…,S(t)=π2t33-13!π23t77+15!π25t1111-17!π27t1515+…,For more details, particularly with regard to convergence, numerical stability and efficient computation, we refer to the standard text book (Press, Teukolsky, Vetterling, & Flannery, 2007).We define a configuration as a combination of a position and a direction in the plane. For the route planning algorithm that will be presented in Section 3, we need to solve a huge number of subproblems (SP) of the following type:(SP)Given two configurations, find a ship track from the first (initial) to the second (final) configuration. The velocity at both endpoints should equal the cruising speedv0.To construct such a track from a configuration A to a configuration B, we first connect A and B by two line segments and a circle segment. We confine ourselves to circle segments with angle smaller than 180°. Otherwise (SP) is assumed to have no solution. Hence the ray originating from A intersects with the ray ending in B. A circle with some predefined radius r is placed tangential to the line segments between A and B (see Fig. 2). Note that the transition from a straight line path to a tangential circular path implies a sudden centripetal acceleration (which a ship is not able to follow). This is avoided by replacing the circle segment by two symmetric clothoid curves. They are adjusted in such a way that the acceleration is continuous along the whole track and equal to zero at both ends.Consider a circle segment with radius r and angle2αas depicted in Fig. 3. The first clothoid starts in the origin of the coordinate system tangential to the x-axis and ends in point S, perpendicular to the angle bisector. The second clothoid is mirrored at the bisector line. We denote the first clothoid byγ(t). The parameter a and the range T ofγ(t)is then calculated as follows. The tangent vector ofγ(t)isγ′(t)=x′(t)y′(t)=aπcosπt22sinπt22.Since the slope ofγ(t)in S equals α we getcosπT22sinπT22=cosαsinα.This impliesT=2απ.The point S lies on the bisector liney=-cotα·x+r. Hencecotα·x(T)+y(T)=rand, by substitutingx(T)andy(T),aπcotα∫0Tcosπτ22dτ+∫0Tsinπτ22dτ=r.The expression in brackets, abbreviated with I, is evaluated numerically. Thena=rπI,which determines the parameter of the clothoid.The curvature of the curve is maximal at connection point S of the clothoids. At that pointκmax=πaT=1r2παI.Since the ship must be able to follow the track,κmaxmust not exceed the curvature of the minimum turning circle (which is related to the maximal rudder deflection). IfRturndenotes the minimum turning radius then1r2παI⩽1Rturn,must hold. We defineRmin=2παIRturn.For the construction from above, we restrict the radius r of the circle segment byRmin⩽r⩽Rmax.The upper boundRmaxis the radius of the largest circle that can be placed tangential to the line segments. Note that this bound might be used to forbid long-lasting weak maneuvers, if those are not desired due to operational reasons. The radius r is selected randomly within the bounds in order to enable a large variety of maneuvers. Alternatively, to control the type of the occurring maneuvers, one might also define the radius deterministically, e.g. by always selecting the smallest possible value which provides short but strong maneuvers, or the largest possible value which provides short length curves. IfRmin>Rmaxthen the subproblem (SP) is assumed to have no solution.One might also define separately restrictions for left and right turns if left (port) and right (starboard) turn radii are different (which indeed is true for most ships, see American Bureau of Shipping, 2006). In that case, the lower boundRminhas to be replaced by two different valuesRminlandRminr, according to the turn direction.It remains to create a speed change model. During turn, the drag of the rudder and the sideways drift of the ship result in a progressive loss of speed, even though the engine revolutions are maintained constant (see e.g. American Bureau of Shipping, 2006). Experience shows that most ships with full rudder deflection lose about one-third of their original speed after a 90-degree turn.We assume that the ship travels with cruising speedv0along the straight line segments. The ship decelerates during the first clothoid where the curvature increases, achieves its minimum speedv1at the end of the first clothoid (at symmetry point S), and accelerates during the second clothoid where the curvature decreases, until it again achieves cruising speedv0. We suppose a velocity curve with average speed(v0+v1)/2and definev1as a function of the turning radius r and turning angle α byv1=v(α,r)=v01-13απ/2Rminr,where α is restricted by 90°. The largest decrease in speed occurs for maximal angle and minimal radius wherev1=vπ2,Rmin=23v0.Since the rate of deceleration varies between different types of ship, one might have to adapt the model accordingly.The operational area is a marine area which is passable by ships. The area possibly includes islands, reefs, shallows and nonnatural impassable sites such as shipwrecks and other obstacles. The operational area depends also on the draught of the ship, the tides and other environmental conditions. Modeling is done by defining appropriate (non-convex) polygons. A large outer polygon defines the shoreline or the boundary of the mission area, cut-out inner polygons represent the impassable regions.The threat areas consist of solitary mines and minefields. With the former we mean single mines for which accurate information is available. The latter are aggregations of mines with imprecise or vague information. For a classification of mine types, mine counter measures and methods of mine delivery, see e.g. (Lu, 1991; Rios, 2005). The detection and mapping of sea mines is discussed e.g. in An, Cobb, Shenefelt, and Tolimieri (2006) and Zerr, Fawcett, and Hopkin (2009).Solitary mines are characterized by their location and damage radius. The damage radius is mainly determined by the explosive charge of the mine. However, it also depends on technical ship data including signature and vulnerability. The signature of a ship consists of those emitted signals (e.g. acoustic, magnetic, visual, infrared) which can be used by sensors to detect the ship’s position. The vulnerability of a ship is based on its construction, hull material, armour, etc. These data determine the effective radius of a mine which, under no circumstances, may be entered. Otherwise the ship will sustain damage. The radius can be increased by additional safety margins to take into account uncertainty of the position of the mine and the navigational error of the ship.In contrast to the mapped mines described above, there is only inaccurate information for minefields. The individual positions (and possibly the types) of the mines are not precisely known. Minefields are modeled by polygons which include the supposed positions of the mines with an appropriate safety margin. They can be considered as forbidden areas where the ship is not allowed to pass through.Risk models for mines have been discussed in several papers, e.g. (Bekker & Schmid, 2006; Piatko et al., 2001; Resch et al., 2003). They may rely on information from different sensors, available actuation and damage curve data and other sources. Mine detection, classification uncertainty, and damage are then represented by suitable probability distributions. Since a full treatment of all relevant data would lead to highly complex models, some simplifications seem inevitable.The point of closest approach to the closest mine is used in Bekker and Schmid (2006) to determine the risk of a path. With D denoting the minimal distance, the risk is defined proportional to any user selectable inverse power of D, such as1/Dor1/D2. A similar point risk model is used in Piatko et al. (2001). The probability of being damaged at each location is an inverse function of the distance to the location of the mine. The risk associated with each path is then estimated by summing the point risks along the path. A more sophisticated model is introduced in Resch et al. (2003) where the location of a mine is represented by a normal distribution. This is combined with a triggering model for the mine which is given by a Gaussian-like distribution.We call a navigation route passable if it proceeds completely within the operational area. Such a route is clear of obstacles and can be traveled without the danger of collision. A route is called feasible if it considers the technical and operational limitations of the ship, i.e. the ship is able to follow the route.Safety will be expressed by the level of risk that the mission planner or head of operations is willing to bear. It is reflected by a safety margin which is added to the effective radius of each mine. For that purpose, an appropriate risk functionf(D)has to be defined which is inversely proportional with distance D to the mine. Ifpmaxdenotes the maximum acceptable risk then the solution of the equationf(D)=pmaxprovides the radius around the mine which can be considered as a forbidden area for the ship. We choose the risk function proportional to1/D, noting that it can easily be replaced by a more sophisticated model (see Bekker & Schmid, 2006; Resch et al., 2003). A similar idea is realized for minefields. The risk for the ship reduces if the distance to the minefield increases. The associated polygon is enlarged by a buffer zone (see Ari et al., 2013) until the maximum acceptable risk is achieved.The ship routing problem discussed in this paper is to determine a passable and feasible route of minimum length or minimum traveling time from an initial configuration (starting point with direction) to a final configuration (destination point with direction) which avoids regions with risk higher than a given threshold.The above formulation aims to minimize one criterion (length or time) under a hard bound on the other criterion (the risk). An alternative approach would be to determine a route which minimizes the risk, or a combination of risk and length (time). Both problem definitions have been extensively discussed e.g. in Piatko et al. (2002, 2001).Let us mention that our algorithm, although designed for the constraint-based approach, can easily be extended to find a passable and feasible route with smallest accumulated risk or combination of risk and length (time). For the calculation of the accumulated risk along a path we refer to Piatko et al. (2001).The basic idea of our approach is to generate a network over the water surface in such a way that each path in this network represents a possible navigation route. The shortest navigation route in the network is then determined by applying standard methods of combinatorial optimization. The quality of the solution increases with the density of the network.Network-based solutions are also proposed in other publications, e.g. in Bekker and Schmid (2006), Li (2009), Piatko et al. (2002, 2001) and Resch et al. (2003). The common procedure is to evenly distribute vertices over an area and link close pairs of vertices by straight lines. This provides a discretization of the area in the form of a regular grid network. A drawback is that the ship’s characteristic (turning radius, maneuverability, etc.) is not sufficiently considered. The resulting navigation route is a polygonal line which might be difficult, or even impossible to navigate. Moreover, if the number of vertices in the network is small then the route might be far away from an optimal solution. With increasing number of vertices the route might become an annoying zigzag course.Our network considers the technical and operational limitations of the ship. The network is not regular since its generation is affected by some random process. The vertices are not connected by straight lines but by curved lines consisting of two straight line segments and two symmetric clothoids in between those segments. This provides a smooth track which allows convenient control of the ship. In contrast to the situation described above the track remains smooth, independent of the density of the network.The following algorithm scheme describes the generation of the network and the route planning.Algorithm Find-Ship-TrackInput:Start configuration P, target configuration QOperational area, performance data of ship, threat areasOutput:Ship trackγ(t)from P to Q1  Create verticesvPandvQfor start configuration P and target configuration Q2  Initialize vertex setV≔{vP,vQ}and edge setE≔∅3  Generate a huge number of configurations in the operational area by randomly choosing position and direction4For each configuration A5Create a new vertexvA,V≔V∪{vA}6end7For each pair of configurations(A,B)8Generate a feasible trackγAB(t)from A to B consisting of clothoids and straight line segments (if existing) by solving the corresponding (SP)9Check whetherγAB(t)is passable, i.e. the track is entirely within the operational area10Check whetherγAB(t)is safe, i.e. the track avoids the threat areas11IfγAB(t)is passable and safethen12Create a new edge(vA,vB)with costc(vA,vB)≔∫γAB′(t)dt,13E≔E∪{(vA,vB)}14end15end16 Find a shortest path in the networkG=(V,E,c)fromvPtovQ17 Concatenate the tracks belonging to the path to a P–Q trackγ(t)The vertices of the network represent randomly generated configurations. Each (directed) edge represents a track segment connecting two configurations. Each path is a concatenation of track segments. The construction of the track segments, described in the previous section as the solutions of subproblems (SP), guarantees that the transition between any two of them is smooth. More precisely, this means that each path corresponds to a twice continuously differentiable curve. As a result of the checks performed in lines (9) and (10), each path in the network represents a passable, feasible and safe navigation route.The cost of an edge is the length of the associated track segment. It is obtained by adding twice the arc lengths=aπTof a clothoid to the lengths of the straight line segments. Alternatively, if a route with smallest traveling time has to be found, the cost of an edge is the time required to pass the track. This is twice the time2s/(v0+v1)to pass one clothoid plus the time for the straight line segments.The idea of the network generation is sketched in Fig. 4. It shows a number of configurations (arrows) with connecting track segments. The scenario contains solitary mines (circles), minefields (polygons) and other obstacles.For operational use, the algorithm Find-Ship-Track should deliver a solution within a couple of seconds. Unfortunately, a straightforward implementation is too slow. Hence further efforts are needed to speed up the algorithm.The main workload of the algorithm occurs in lines (8)–(10) where a huge number of tracks is generated and analyzed. The generation follows the description given in Sections 2.1 and 2.2. According to the construction, the tracks are feasible. Checking whether tracks are passable and safe is time-critical. The former means to find out whether a track lies completely within the outer (polygonal) boundary of the operational area and does not collide with an inner (polygonal) obstacle, the latter whether a track passes through a (circular) solitary mine or through a (polygonal) minefield.Hence, we have to develop efficient procedures to check the intersection of a track with circles and polygons. The first problem is addressed by solving the following more general question:Given an arbitrary curveγ(t)with varying speed (describing the motion of a vehicle) and a set of circles with varying radii, does the curve intersect with at least one circle?We propose the following procedure.Procedure Intersect-Curve-with-CirclesInput:Curveγ(t)with0⩽t⩽T, minimal time stepΔtMaximal velocity or upper boundvmaxSet of circlesCkwith centerMkand radiusrkOutput:Message, ifγ(t)intersects with a circle1  LetA≔γ(0)andB≔γ(T)be the start and end point of the curve, respectively2  Calculate the length of the curvel≔∫0T|γ′(t)|dt3  Initialize the set of candidate circlesC≔∅4For each circleCk5Ifdistance(A,Mk)+distance(Mk,B)⩽l+2rkthen6C≔C∪{Ck}7end8end9IfC≠∅then10t≔0,i≔111Whilet⩽T12Pi≔γ(t)13Find the circleCk∈Cwhich is closest toPi14and letdi≔distance(Pi,Mk)-rk15Ifdi<0then output “INTERSECTION” and STOP end16ti≔di/vmax17Ifti<Δtthenti≔Δtend18t≔t+ti,i≔i+119end20endA preselection test is performed in lines (4)–(8) of the procedure. We construct an ellipse with focal points located at the start and end points of the curve and with major diameter equal to the length l of the curve. If a circle lies outside the ellipse then it certainly cannot intersect with the curve (see Fig. 5(a)). The other circles are subject to an intersection test with the curve.This test comprises lines (9)–(20) of the procedure. The idea is illustrated in Fig. 5(b). In the first step, the smallest distanced1from the start pointP1=γ(0)of the curve to all candidate circles is determined. Thent1=d1/vmaxis the smallest possible time to reach that circle, presumed a straight line connection fromP1to the circle and maximal velocity. We can proceed along the curve to the pointP2=γ(t1)without intersecting a circle. This is repeated until the end of the curve is reached or a point lies inside a circle. In case of intersection, termination of the procedure is ensured by introducing a minimal time stepΔt. Note that a (potentially occurring) discretization error is neglectable in our application.Intersection tests with polygons can be constructed in a similar way. Due to lack of space we omit the details.A further measure to improve the efficiency of the algorithm is the separation into preprocessing and online planning. The preprocessing covers all preparatory work, including the generation of a basic network which takes into account all a priori available information.In a first step we create a network with a huge number of configurations (vertices) and feasible tracks (edges). All tracks are eliminated which intersect with obstacles within the operational area or with its outer boundary. The result is a network where all tracks are passable and feasible. Since threat areas are not considered in this phase, the tracks are not necessarily safe.In a second step, the network is thinned out in order to remove non-relevant vertices and edges. Only those vertices must be preserved which lie on a path from the source vertexvPto the target vertexvQ. All other vertices are worthless and can be deleted from the network, together with the incident edges. Hence, a vertexvAremains in the network if.(a)the vertexvAcan be reached from source vertexvP, andthe target vertexvQcan be reached from vertexvA.We determine the set of vertices that are reachable from the source vertexvPand, in the reversed network, the set of vertices that are reachable from the target vertexvQ. The reversed network is obtained by reversing the directions of all edges (i.e. if a network G contains an edge(u,v)then the reverse of G contains the edge(v,u)and vice versa). The vertices which belong to both sets remain in the network, all other vertices are deleted. Finding the set of reachable vertices in a network is a basic problem in graph theory. It can be solved very efficiently by simple graph-searching algorithms such as depth-first search or breadth-first search (see e.g. Cormen, Leiserson, Rivest, & Stein, 2009).The basic networks for different operational areas can be generated well in advance and stored in a database.The online planning considers up-to-date information about threats. In contrast to the preprocessing phase, where computer running time is not crucial, the online planning phase should be very fast.A straightforward idea would be to adjust the basic network to the current scenario, and then find a shortest path in the updated network. This means to eliminate all edges (tracks) which are not safe, i.e. which intersect with threat areas. However, investigating all edges is very time-consuming.Instead, only those edges are inspected which are visited during the execution of the shortest-path algorithm. A variety of shortest-path algorithms have been proposed in the literature (see e.g. Cormen et al., 2009). Particularly well suited for our purpose is the A∗-algorithm (Hart, Nilsson, & Raphael, 1968) which can be considered as an extension of the famous algorithm of Dijkstra (1959). By performing a target-directed search, a significantly smaller number of vertices and edges are visited than by other search algorithms, making it much more efficient.We adapt the A∗-algorithm in two ways: by integrating the intersection test of tracks with threats and by using a specific heuristic distance function of the vertices. The input for the algorithm is a network with passable and feasible edges (tracks). The result is a shortest path consisting of safe edges only.Modified A∗-AlgorithmInput:NetworkG=(V,E,c)withc:E→R+Source vertexvPand target vertexvQEstimated distanceh(v)from v tovQ, for eachv∈VOutput:Shortest path of safe edges fromvPtovQ1For eachv∈V2d(v)≔∞,π(v)≔NIL3end4S≔{vP},d(vP)≔05WhileS≠∅6Findu∈Swithf(u)=d(u)+h(u)minimal7Ifu=vQthenSTOPend8S≔S⧹{u}9For eachv∈Vwith(u,v)∈E10Check whether edge(u,v)is safe11If(u,v)is not safethen12Delete the edge from the network,E≔E⧹{(u,v)}13elseIfd(v)>d(u)+c(u,v)then14d(v)≔d(u)+c(u,v)15π(v)≔u16Ifv∉SthenS≔S∪{v}end17end18end19end20endThe modification covers lines (10)–(12). Checking whether an edge is safe takes place by the intersection procedures for circles and polygons presented above.d(v)is the distance of a vertex v to the source vertexvP.π(v)is the predecessor of v in the shortest path fromvPto v. The shortest path fromvPtovQis obtained by iteratively building the sequencevQ,π(vQ),π(π(vQ)),…until the source vertexvPis reached, and reversing the order. The length of the path isd(vQ).The A∗-algorithm traverses the network by visiting first those vertices which are expected to lead to the target very quickly. In order to find the most promising vertex, each vertex v is assigned a valuef(v). It estimates the length of the path from the source to the target via vertex v. The algorithm always selects the vertex with smallest value of f. This realizes a target-directed search.f(v)consists of the exact distanced(v)already traveled from the source vertex to v and an estimateh(v)of the distance from v to the target vertex. The heuristic functionh(v)must not overestimate the distance. The Euclidean distance is often used as a suitable heuristic since the actual distance in the network cannot be shorter than the straight line connection. Note that, the lowerh(v)is, the more vertices are visited which makes the algorithm slower. Ifh(v)is 0, then onlyd(v)plays a role, and the A∗-algorithm turns into the algorithm of Dijkstra.We use an estimate which is more accurate than the Euclidean distance, namely the exact distance in the basic network (where threats have not yet been considered). In the extreme, if there is no threat on the shortest path, the algorithm follows the optimal path and never expands anything else. This means that only edges on the shortest path, or edges incident to vertices of the shortest path are investigated, which keeps the effort extremely small.The distances are calculated in the preprocessing phase by applying Dijkstra’s algorithm to the reversed network, withvQbeing the source vertex. As mentioned before, Dijkstra’s algorithm is obtained from the (original) A∗-algorithm by settingh(v)=0for all verticesv∈V. If the termination condition in line (7) is omitted, then we obtain shortest paths from the source vertex to all other vertices of the network.The algorithm has been implemented with Matlab R2013b on a standard PC with 3.5Gigahertz Intel Xeon Processor E3-1270v2 and 8Gigabyte of RAM. Fig. 6illustrates a safe route in a typical scenario (a sea passage to a harbor) with two minefields and several solitary mines with different safety radii.Fig. 7shows two routes in a small scenario with ten solitary mines and two obstacles. The ship is a merchant vessel with turning circle diameter 1090meter. The short route is obtained by our algorithm, the other one by an algorithm derived from Ari et al. (2013) which relies on a regular grid (lattice) discretization. The ship turn constraints are realized in the following way: the track must first follow a straight line of about 450meter length (called the first leg) along the grid lines or along the diagonals, then performs a 45° turn, and then again follows a straight line of the same length (called the second leg). The polygonal line is smoothed after the optimization by replacing the inner halves of the two legs by the arc segment of the minimum turning circle. The resolution of the grid can be refined by subdividing the leg lengths into a larger number of edges. However, independent of the selected resolution, the method cannot find a route which is close to the optimum.The test case in Fig. 8shows the results of our route planning algorithm for two different risk thresholds, with the objective to minimize traveling time. The scenario covers an operational area of 4kilometer×3kilometer with five obstacles and a large number of solitary mines. The small circles correspond to a high acceptable risk, the large circles to a lower risk. The associated basic network has 4000 vertices (configurations) and approximately 300 000 edges (tracks). The computation time of the preprocessing phase is about 2.2minutes, the online planning requires less than 1seconds.Experience shows that the calculated routes tend to get more winding if the number of mines and obstacles increases, or if the acceptable risk of the threats is reduced (which inflates the threat areas). From a practical point of view, permanent changes of the ship’s course are not desired. One reason is that routes with fewer turns are easier to execute accurately, and navigational accuracy is critical when crossing an area affected by mines. Another reason is simply not to overstress ship and crew. Hence, in those cases it seems advisable to modify the optimization objective. Instead of minimizing the route length or traveling time, we minimize the number of maneuvers.Since each edge (track) implies one single maneuver, the number of edges in a path from the start to the target is identical to the number of maneuvers in the route. We change the costs of the edges in the network to the constant value 1 and determine a path with the smallest number of edges. This is again done by applying the modified A∗-algorithm from above. The heuristic functionh(v)is the minimal number of edges in a path from v to the target in the basic network.h(v)is calculated in the preprocessing phase using a simple breadth-first search.Fig. 9shows the obtained routes with minimum length and with minimal number of maneuvers in a scenario with solitary mines and minefields. The basic network consists of 4000 vertices and over 500 000 edges. The preprocessing time is about 3.1minutes, the online planning time little more than 1seconds.To evaluate the performance of the algorithm, we tested it on randomly generated scenarios. The size of the operational area is 6kilometer×4.5kilometer. A varying number of mines is randomly distributed within this area. The safety radius of the mines is 200meter. The ship is a naval vessel with cruising speed 23knots and turning circle diameter 580meter.The impact of the network size on the quality of the solutions and the required calculation times are listed in Table 1. The results are the average values for 10 random scenarios, each with 50 randomly distributed mines. The number of edges refers to the basic networks which are generated in the preprocessing phase (i.e. the edges correspond to tracks which are passable and feasible, but not necessarily safe). The objective is to minimize the route length. As expected, the length decreases if the density of the network increases. However, at some point the effort grows overproportionally for a very modest improvement of the solution. As a simple rule-of-thumb, 300 vertices per square kilometer seem to be a reasonable compromise between accuracy and processing time.Table 2contains results for different optimization objectives. The associated basic networks have 10 000 vertices, the number of mines is increasing. We minimized the route length (see the left section of the table) and the number of maneuvers (right section). It becomes evident that, the shorter the route, the more maneuvers are included. On the other hand, a route with few maneuvers is usually rather long.A compromise between both objectives can be achieved by optimizing a linear combination of length and number of maneuvers. The usual approach is to calculate the mean length (mean cost) of all edgesc¯=1|E|∑(vA,vB)∈Ec(vA,vB),and define the length ratio (cost ratio) of an edge asc∗(vA,vB)=c(vA,vB)c¯.The weighted edge cost used for optimization isα·c∗(vA,vB)+(1-α)·1.The parameterα∈[0,1]allows a balance between the objectives and is selected by the mission planner.α=1means to minimize the route length,α=0is to minimize the number of maneuvers. Fig. 10shows a test case with a route of minimum length, a route with a minimal number of maneuvers, and a route obtained by settingα=0.5.

@&#CONCLUSIONS@&#
