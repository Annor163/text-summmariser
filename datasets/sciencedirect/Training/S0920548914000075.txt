@&#MAIN-TITLE@&#
Tracing conceptual models' evolution in data warehouses by using the model driven architecture

@&#HIGHLIGHTS@&#
A set of semantic traces to support conceptual traceability in data warehousesSimplifies analysis of the impact of changes and integration of data and new sourcesIncludes a set of rules based on the QVT standard for deriving the data warehouseWe apply our proposal to create an education data mart.

@&#KEYPHRASES@&#
Data warehouses,Traceability,Conceptual models,Business intelligence,MDD,MDA,QVT,

@&#ABSTRACT@&#
Developing a data warehouse is an ongoing task where new requirements are constantly being added. A widely accepted approach for developing data warehouses is the hybrid approach, where requirements and data sources must be accommodated to a reconciliated data warehouse model. During this process, relationships between conceptual elements specified by user requirements and those supplied by the data sources are lost, since no traceability mechanisms are included. As a result, the designer wastes additional time and effort to update the data warehouse whenever user requirements or data sources change. In this paper, we propose an approach to preserve traceability at conceptual level for data warehouses. Our approach includes a set of traces and their formalization, in order to relate the multidimensional elements specified by user requirements with the concepts extracted from data sources. Therefore, we can easily identify how changes should be incorporated into the data warehouse, and derive it according to the new configuration. In order to minimize the effort required, we define a set of general Query/View/Transformation rules to automate the derivation of traces along with data warehouse elements. Finally, we describe a CASE tool that supports our approach and provide a detailed case study to show the applicability of the proposal.

@&#INTRODUCTION@&#
Developing a data warehouse (DW) is an ongoing task where new requirements are constantly being added. Either as a result of the dynamic environment, or due to new sources of information becoming available (i.e. social media), decision makers constantly pose new requirements and questions which need to be answered by analyzing information. This information is integrated from several heterogeneous sources. Then, it is structured in terms of facts and dimensions in the DW [1]. Therefore, the development of the DW is a continuous and complex process that must be carefully planned in order to meet user needs and incorporate new requirements. To this aim, three different development approaches have been proposed: bottom-up or supply-driven, top-down or demand-driven, and hybrid [2,3].The first two approaches ignore one source of information until the end of the process, either requirements or data sources. This lack of information leads to failure in some DW projects [2,4] since they either (i) ignore user needs or (ii) assume that all the necessary data is available, which is not always the case. On the other hand, the hybrid approach makes use of both data sources and user requirements [3], solving incompatibilities by accommodating both requirements and data sources in a single conceptual model before implementing the DW. Nevertheless, the current accommodation process is performed much like a schema redesign process: successive modifications are made to the schema, removing, renaming, and adding new elements according to the designer's experience. In turn, the resulting DW schema may neither match the data sources in structure nor in naming conventions. As a result, existing traceability by name matching is lost. Therefore, these correspondences must be identified again when (i) validating and reviewing old requirements, (ii) posing new requirements, or (iii) modifying data sources, all of which are error prone tasks. Consequently, time and resources required are increased while the quality of the final product is decreased [5].In our previous works [6,3,7,8], we defined a hybrid DW development approach in the context of the Model Driven Architecture (MDA) framework [9]. The idiosyncrasy of DW development favors our approach. In DW development, data sources act as both a source of additional information as well as a limiting factor. In order to implement a requirement in the final DW, the required information must be present in the data sources, either directly or by deriving it. Therefore, we can clearly identify the desired structure of the DW (requirements), and what information is supplied (data sources). The final step in this process is to adequately relate this information in order to easily trace and incorporate changes, instead of arbitrarily mixing the schema, and making it difficult to perform further analysis tasks. Additionally, unlike in software development, the reconciling process may find elements not present in the requirements model (due to an oversight) that provide relevant information for decision makers [8]. Thus, it is interesting to trace elements present in the data sources that do not have a requirement counterpart, but are present in the implementation of the DW, since they help to elicitate overlooked user requirements.The automatic derivation is done by means of model to model transformations specified by Query/View/Transformation (QVT) [10] rules. QVT is a language defined by the Object Management Group (OMG) and proposed as a standard to create model to model transformations. This language can be used to create both DW models as well as trace models. However, due to our experience, the reconciliation task can only be done at most semi-automatically, since there is not enough information available to fully automate it. The set of trace models employed in our approach are shown in Fig. 1, and are further detailed in Section 3.In the short version of this paper [11] we developed a set of traces for preserving the traceability of requirements at the conceptual level. Now, in this extended version, we (i) provide a deeper review of the related work describing details of the existing traceability approaches, (ii) provide a formal definition of our traces, (iii) generalize a set of QVT transformations which allow us to derive the data warehouse from any trace configuration specified, and (iv) provide an extended case study which tests and shows better the application of the proposal.The remainder of this paper is structured as follows. Section 2 presents related work about traceability and DWs. Section 3 introduces the necessary trace semantics in order to include traceability at the conceptual level in DWs. Section 4 presents a set of QVT rules for automatic derivation of traces. Section 5 presents a case study to show the applicability of our proposal. Finally, Section 6 outlines the conclusions and further work to be done.

@&#CONCLUSIONS@&#
In this paper, we have proposed a traceability approach in order to record explicitly the relationships between elements at the conceptual level in DWs. We have defined the necessary trace semantics to record these relationships, and have formalized them in order to guide their application. Furthermore, we have shown how trace derivation and recording can be automated. We have also exemplified the application of the proposal by means of a case study with another university. The great benefit of our proposal is that the reconciliation task is only performed once per element, and is preserved for further derivations or changes. Therefore, we avoid having to repeteadly inspect the data sources in order to match conceptual elements coming from requirements with those coming from data sources. In turn, we reduce the amount of time and resources spent and improve the maintainability of the system.The current challenges involve improving the process by semi-automating the generation of reconciliation traces and obtaining initial Extraction/Transformation/Load processes from their definition. The semi-automation of trace generation will require an approach to guide the designer on what reverse engineering method to use, depending on the information provided by user requirements and data sources. Regarding the generation of ETL processes, this generation will require to specify model transformations to transform trace models into conceptual ETL models. To this aim, the transformations will need to consider what subsets of traces that fit best into a single ETL process.Our future works involve developing a set of algorithms to propagate changes and to analyze the quality of the matching performed. In the long term, we plan to tackle the generation of an initial subset of traces automatically, thus helping the developer to perform the reconciliation process. The resulting algorithms will be implemented in our tool in order to improve its usability and further shorten the time and effort required to develop the data warehouse. Finally, we plan to introduce visual support for analyzing the trace models, in order to provide the designer with a quick view of the relationships modeled.