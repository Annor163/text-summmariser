@&#MAIN-TITLE@&#
Modeling nonlinear dynamic biological systems with human-readable fuzzy rules optimized by convergent heterogeneous particle swarm

@&#HIGHLIGHTS@&#
Human-readable rules based modeling is proposed for biological systems.The fuzzy model (MoPath) is embedded in optimization framework.Particle swarm optimization is developed and analyzed for MoPath.Two cases of the biological systems demonstrate the efficiency of MoPath.

@&#KEYPHRASES@&#
Global optimization,Computational biology,Particle swarm optimization (PSO),Takagi–Sugeno (T–S) fuzzy model,Dynamical system,

@&#ABSTRACT@&#
It is an important issue to model the dynamic biological networks from their time-course response datasets, which is critical to understand the system behaviors. This task includes two sub-tasks: network structure identification and associated parameters estimation. In most existing methods, the two sub-tasks are dealt with step by step, which may result in inconsistence between them and hence inaccuracy of the final model. Another challenge is how to transparently understand the derived model, which cannot be achieved by the traditional black-box methods. A human readable fuzzy rule-based model, denoted as MoPath, is developed for the identification of both structure topology and associated parameters, simultaneously, of a biological network within an optimization framework. MoPath encodes the fuzzy rules into particles of heterogeneous particle swarm optimization (CHPSO) algorithm to generate the optimal model. Theoretically, we demonstrate that the cooperation in CHPSO can maintain a balance between exploration and exploitation to guarantee the particles converge to stable points, which is greatly helpful for finding the optimal model consisting of both the network topology and parameters. We demonstrate MoPath on two dynamic biological networks, and successfully generate a few human readable rules that can well represent the network with high accuracy and good robustness.

@&#INTRODUCTION@&#
In biological systems, kinetics, from estimated reaction rates, are fundamental for modeling the behavior of complicated pathways and networks for applications such as drug design (Shirai et al., 2014). Models and theory of operations research (OR), such as Markov models (Yaesoubi & Cohen, 2011), fuzzy sets theory and fuzzy models (Shi, Eberhart, & Chen, 1999; Sugeno & Yasukawa, 1993; Wu, Wu, & Chang, 2013), artificial neural networks (Voit & Almeida, 2004) and regression models (Özmen & Weber, 2014; Weber, Batmaz, Köksal, Taylan, & Yerlikaya-Özkurt, 2012), have become the central to mimic the complicated behaviors of systems biology. With aid of artificial intelligence methods, these methods from OR can reason about missing (unknown) parts of a pathway. Hence, it is highly important to develop a mathematical model for systems biology to analyze the omics data. Recently, computational approaches have attracted increasing attentions, and they have been used to infer proper mathematical models and dynamically simulate the behaviors of dynamic systems. These approaches are demonstrated to be able to provide new ways toward a great understanding of the cell and organism systems (Kell, 2004, 2006). Various modeling methods have been proposed to represent and analyze the biological phenomena (Kim, Ghate, & Phillips, 2012; Zomorrodi & Maranas, 2014). The main task of modeling a biological system is to systematically understand its natural characteristics and predict its dynamic behavior. However, it is difficult to give exact mathematical equations of the complex processes in biological systems, such as gene regulation networks (Gebert, Radde, & Weber, 2007; Weber, Defterli, Gökc, & Kropat, 2011; Xu, 2013), metabolic pathways (Schuster, Fell, & Dandekar, 2000; Zazopoulos et al., 2003), and signal transduction cascades (Acharya, Judeh, Duan, Rabbat, & Zhu, 2000; Chen & Wu, 2012).Over the last decade, numerous data-driven computational methods have been developed in order to approximately infer and model the biological networks. For instance, Gebert et al. (2007), developed a model, which is able to capture the most relevant regulating interactions. They also optimize the parameters for the model using the discrete approximation method of least squares from time-series data. Wu et al. (2013) designed a fuzzy-based neural framework, in which fuzzy reasoning and neural-network learning were employed to approximate MIMO biological systems. Zhan and Yeung (2011) developed two parameter estimation methods by combining spline theory with linear programming (LP) and nonlinear programming (NLP), which does not need the ordinary differential equation (ODE) solvers during the identification process. Chou and Voit (2012), a supplements dynamic flux estimation (DFE) was proposed to overcome the necessity of completion of the data and a great quantity of independent fluxes in the system. Gennemark and Wedelin (2009) specified the identification problems as an optimization issue with a model space of allowed reactions, ranges for the parameters, time series data and an error function. Liu et al. introduced an interactive inference algorithm to infer a realizable S-system structure for biochemical networks (Liu & Wang, 2008). In this method, a multi-objective optimization approach was applied to minimize simultaneously the concentration error, slope error, and interaction measure in order to find a suitable S-system model structure and its corresponding model parameters. Tsai and Wang (2005) presented a variant of collocation method to convert the differential equations to the system of algebraic equations. Accordingly, the time-course data was substituted into the algebraic system equations to decouple system for building the approximate model by hybrid differential evolution.Generally, it comprises two main stages to obtain a mathematical model of a biological system. They are: (1) determining the structure of the model, and (2) optimizing its associated parameters. Structure identification is concerned with the determination of the number of rules, while parameter optimization concerns the calculation of the appropriate fuzzy set parameters that provide a reliable system description (Kroll, 1996; Sugeno & Yasukawa, 1993). Cao, Rees, and Feng (1997), fuzzy clustering method is employed to identify T–S fuzzy models, including identification of the number of fuzzy rules and parameters of fuzzy membership functions. In traditional methods, the structures and the parameters of the models are determined separately in different stages described above as opposed to simultaneously, where the structure of a model is first derived by S-system or neural network (Almeida & Voit, 2003; Kikuchi, Tominaga, Arita, Takahashi, & Tomita, 2003; Xu, Wunsch, & Frank, 2007), and then the associated parameters are optimized by evolutionary algorithms (Tsai & Wang, 2005) or heuristic methods (Chen, Lee, Chuang, Wang, & Shieh, 2010; Sun, Garibaldi, & Hodgman, 2012; Xu et al., 2007). However, it is difficult to guarantee that the obtained models will have good performance because of the potential inconsistence between the two steps. An example is that the performance of a constructed model can be further improved by tuning the associated parameters of a structure (Shi et al., 1999). Another challenge of existing approaches is how to transparently explain the derived model. Although some effective algorithms have been proposed, most of them are black-box, where we can only see the input and output, but do not know the detailed relationship among the system parameters. For instance, the artificial neural network (ANN) has been employed to model the generic branch pathway (Voit & Almeida, 2004) with reasonable accuracy, the dependent relationship among the four variables in the pathway cannot be revealed because of the black-box property of the ANN algorithm.As we know, fuzzy sets play an essential role in the field of operations research (Herrera & Verdegay, 1997). Since, transparent expression of the fuzzy sets and models is greatly important for human beings to make better decision in biological systems, in this study we design an optimization framework combining heterogeneous PSO algorithm and fuzzy model for imitating the biological systems, which is denoted as MoPath. The developed MoPath has the merits of generating human readable rules and achieving the optimal system structures and the best associated parameters simultaneously to imitate the dynamic phenomena of system biology.This section presents the S-system model of the biological systems, and the objective criterion, which is the foundation of the proposed MoPath to achieve the optimal structure and the best parameters.Generally, a collection of enzymatic reactions, including processing metabolites within a cell, and converting inter-cellular metabolites into intracellular metabolites and the contrary processes, can be considered as a biological network. In a biological network, all metabolites sustain the dynamic mass balances as a system. It is a common measurement method to figure out the rates of reactions or fluxes, which directly correspond to the changes in concentrations. The changes can be formulated as a set of differential equations describing the concentrations of substrates, enzymes, factors or products (Chen, Wang, Wu, & Li, 2005). Typically, these differential equations can be expressed as an S-system (Tsai & Wang, 2005; Voit, 2000), which is formulated mathematically as follows:(1)dXdt=f(X,v)=[ζ1∏j=1n+mXjg1j−η1∏j=1n+mXjh1j⋮ζn∏j=1n+mXjgnj−ηn∏j=1n+mXjhnj],where f is the set of net rate equations. X and v are the n-dimensional components or pools and rate constants, respectively, which include ζi, ηi, kinetic orders, gij, and hij. n is the number of dependent state variables, while m is the number of independent variables.To build a mathematical model of a biological system, we need an objective function to measure the approximation between the model and a given experimental time-course dataset. The MSE (mean square error) is formulated as the criterion to evaluate the quality of the model, and it is defined as follows:(2)J=1nNs∑i=1n∑j=1Ns[Xi(tj)−Xim(tj)]2,where Nsis the number of sampled data points. Xi(tj) is the measured data for the ith component at the sampling time tj, andXim(tj)is the concentration predicted by the model for the ith component at the sampling time tj. The dynamic profiles Xi(tj) are generated by solving the differential Eq. (1).The aim of this study is to simultaneously achieve the optimal structure and parameters of the biological system. In general, it can be considered as an optimization problem to infer the biological systems (Chen et al., 2010; Kikuchi et al., 2003; Liu & Wang, 2008; Tsai & Wang, 2005; Weber et al., 2011). For example, Weber et al. (2011) proposed an improved modeling of gene-environment networks with analyses of uncertainty and constraints on complexity and regularization via different optimization techniques. However, most of the existing studies focus on the only estimation of either structures or the parameters, and it is difficult to guarantee the obtained mathematical model can optimally describe the biological system. Although an approach (OptiFel) developed by Cheung, Ding, and Shen (2014) was able to model a nonlinear system simultaneously, it is applied to simple static and dynamic system only, that is, it is not suitable to a system with strong coupling and highly dynamical behavior like biological systems. The main difference between OptiFel and MoPath is the exhibition ability of the dynamic behavior in real systems. As an important contribution, MoPath employs the ODE solver in T–S fuzzy model, and, accordingly, it can infer and exhibit the dynamic behavior of the real biological systems.In this study, we design an optimization framework denoted as MoPath, which combines CHPSO and Takagi–Sugeno fuzzy model to identify both the structure and parameters of dynamical biological networks simultaneously. The MoPath encodes the system structure and the parameters of fuzzy model into particles to find the optimal solution.In Fig. 1, the flowchart of MoPath is illustrated. There two parts in the flowchart are: definition and optimization. In the former, we define fuzzy rules, objective space, and handle constraints as the pre-process. Then, the structure and parameters of fuzzy model are all encoded into the particles of CHPSO for the optimization process, and the MSE value is used to select the best individual and the global optimum in a swarm. According to the topological structure in optimization process of Fig. 1, the final global best structure, which can express the biological system with the optimal structure and the best parameters, is obtained from the four ‘global’ optimumgoptsin the sub-swarms. We have found that the heterogeneous search strategies achieved by multiple sub-swarms in CHPSO are particularly helpful for identifying accurate T–S fuzzy models while using the PSO optimization framework. The reasons are: when we combine the model structures and parameters into one unified particle, their different attributes and potential optimal values can be better dealt with by multiple sub-swarms instead of only one swarm; at the same time, using the multiple sub-swarms is also helpful to derive the optimal values that located in different sub-spaces of T–S fuzzy system.Takagi and Sugeno (1985) proposed the well-known fuzzy model to describe a complicated nonlinear system, which is also used to approximate the S-system of Eq. (1). To map the time-series data and describe the S-system, the ith rule of T–S fuzzy model for biological systems is described as follows:(3)RuleRi:ifx1isFi1,x2isFi2,…,xnisFin,thendx1dt=α11ix1+α12ix2+⋯+α1nixn+α10i,dx2dt=α21ix1+α22ix2+⋯+α2nixn+α20i,⋮dxndt=αn1ix1+αn2ix2+⋯+αnnixn+αn0i,where Riis the ith fuzzy rule,Fi1,…,Finare fuzzy variables,αjli,j=1,2,…,nand l = 0, 1, 2,…, n is the consequent parameters of the ith rule.The dynamic behavior of the whole system in T–S model is achieved by an ordinary differential equation (ODE) with the rule-based linear properties in Eq. (3). As a combination of T–S and ODE (shown in Fig. 1), the developed system optimized by CHPSO can simulate the dynamic behavior of the real system. The final output of the T–S fuzzy model can be calculated as follows:(4)dXdt=[∑i=1NRμi(X)·(Ai1X+α10i)∑i=1NRμi(X)·(Ai2X+α20i)⋮∑i=1NRμi(X)·(AinX+αn0i)],where NRis the total number of rules, X = [x1, x2,…, xn]Tis the input variable,Aij=[αj1i,αj2i,…,αjni],j = 1,…, n is the consequent parameters and μi(X) is given by(5)μi(X)=∏l=1nMil(xl)∑i=1R∏l=1nMil(xl),where Mil(xl), i = 1, 2,…, NRrepresents the grade of membership function.As shown in Eq. (4) and Fig. 1, MoPath adaptively learns and adjusts itself by the CHPSO algorithm. According to the T–S fuzzy model expressed in Eq. (4), MoPath can exhibit the dynamic behavior of the real system including the inputs, outputs and states of the system. For a simple example, given an initial inputs X = [x1, x2, x3], let the number of rules be two in T–S fuzzy model, then, according to Eq. (4), we can obtain(6)[dx1dtdx2dtdx3dt]=[∑i=12μi(X)·(α11ix1+α12ix2+α13ix3+α10i)∑i=12μi(X)·(α21ix1+α22ix2+α23ix3+α20i)∑i=12μi(X)·(α31ix1+α32ix2+α33ix3+α30i)].Depending on the classical fourth-order Runge–Kutta method (RK4) (Ascher & Petzold, 1998), MoPath can exhibit dynamic behavior to simulate the biological systems. Accordingly, we can solve the Eq. (6) and obtain(7)[x1,(m+1)x2,(m+1)x3,(m+1)]=[x1,m+h6[K11+2K12+2K13+K14]x2,m+h6[K21+2K22+2K23+K24]x3,m+h6[K31+2K32+2K33+K34]],and tm + 1 = tm+ h, for m = 0, 1, 2, 3,…, here the step-size h > 0, using{Kj1=TS(tm,xj,m)Kj2=TS(tm+0.5h,xj,m+0.5hKj1)Kj3=TS(tm+0.5h,xj,m+0.5hKj2)Kj4=TS(tm+h,xj,m+hKj3),(j=1,2,3),where TS(·, ·) is the T–S fuzzy model as shown in Eq. (4). As can be seen, the value of the next state (Xm + 1) is determined by the present state (Xm) plus the weighted average of four increments (Kj1, Kj2, Kj3 and Kj4), where each increment is the product of the size of the interval, h, and the estimated function TS(·, ·).Once the appropriate structure and parameters of Takagi–Sugeno fuzzy system are selected, the final output of the T–S fuzzy model in Eq. (4) can be used to replace the S-system in Eq. (1) and describe the dynamic behavior of the biological systems. In this study, the system of MoPath is developed with two different kernel functions as shown in Eqs. (8) and (9). In the developed framework, the structure and the parameters of a T-S fuzzy model are all encoded into a particle that will be optimized by the CHPSO algorithm. Let cijand σijbe the center of the data set and the width of the fuzzy set, respectively. For a data set with n inputs, we can calculate Mij(xij) according to the Gaussian function in Eq. (8),(8)Mij(xij)=exp(−(xij−cij)2σij2)(Gaussian),where the dimension of ciis the same as that of input variable, and σij> 0.In the experimental study, we also employed the Bell-shaped distribution as the membership function for identifying the biological systems. The distribution is formulated as shown in Eq. (9),(9)Mij(xij)=[1+(xij−cijσij)2bij]−1(Bell-shaped).In MoPath, each particle represents a potential T–S fuzzy model, where the expected best solution is solved by the following CHPSO algorithm. For a T–S fuzzy model with Gaussian distribution, the single particle in the CHPSO algorithm is illustrated in Fig. 1. As can be seen, the premise parameters (cijandσij) and the consequent parameters (αij) in the ith rule are all encoded. The code strategy of a fuzzy model with Bell-shaped distribution is similar to that of Gaussian distribution-based model.Particle Swarm Optimization (PSO), originally developed by Kennedy and Eberhart (1995), maintains a swarm of particles to search a given space for an optimal solution. Each particle represents a potential solution to an optimization problem. The ith particle is represented by xi= (xi1, xi2,…, xiD) in a D-dimensional space, and its velocity is vi= (vi1, vi2,…, viD). Each particle will dynamically adjust its trajectory based on its historical best position (li) and the best position (gopt) discovered by the whole swarm during the search process. The position and velocity of the ith particle are updated according to Eqs. (10) and (11),(10)vi(t+1)=ωvi(t)+c1r1〈li−xi(t)〉+c2r2〈gopt−xi(t)〉,(11)xi(t+1)=xi(t)+vi(t+1),wherec1andc2are both positive constants, which are known as cognitive and social parameters, respectively. r1, r2 are vectors consisting of random numbers generated by the uniform distribution between 0 and 1.According to the update rules in the classical PSO algorithm, all particles are attracted by both the individual best position and the global best position. If the particles converge at a high speed, they will always shrink toward local regions within a few generations (Liang, Qin, Suganthan, & Baskar, 2006). This phenomenon leads to similar search behavior among the particles and the loss of diversity in the swarm. If the particles are trapped in local regions, they will not be able to jump out due to their homogeneous search behavior and the absence of exploration abilities. Ever since PSO was introduced, researchers have proposed many improved PSO variants, which were mainly dependent on the efficient strategies for selecting parameters (Leu & Yeh, 2012), the useful topology structures (van den Bergh & Engelbrecht, 2006; Bratton & Kennedy, 2007), the designs based on the multiple swarms (Liang & Suganthan, 2005), and heterogeneous update rules (Engelbrecht, 2011).Different from the homogeneous PSO algorithms, this study designed a convergent heterogeneous particle swarm optimization to improve the search ability of the classical PSO. The proposed CHPSO algorithm is a heterogeneous search approach based on four sub-swarms (denoted asSa,Sb,Sc,andSdas shown in Fig. 2). Among the four sub-swarms, we define two sub-swarms as the basic sub-swarms (SaandSb) for exploitation search. The other two sub-swarms are the adaptive sub-swarm (Sc) and the exploration sub-swarm (Sd), respectively. The adaptive sub-swarm uses the information from the basic sub-swarms to adjust the flight trajectory adaptively, while the exploration sub-swarm utilizes the flight direction information of the other sub-swarms to develop the unknown region. Accordingly, the PSO updating rules are modified to accommodate the designed multiple-swarm concept. In CHPSO, we design three update rules to search the new areas according to the differences among the sub-swarms. Additional design involves the information exchange based on the useful knowledge of the velocities, the positions and the fitness values of particles in different sub-swarms. Based on the design of different multiple swarms and the cooperative heterogeneous search mechanisms, CHPSO can achieve a good balance between the local search and the global exploration.The cooperation and communication model among the sub-swarms, as shown in Fig. 2, is used to update fitness values and maintains CHPSO to share information among different sub-swarms. Meanwhile, it also shows the general concept of the cooperative relationship among the sub-swarms. One can obtain the basic idea of CHPSO—all sub-swarms contribute to the global exploitation and share the information with each other. For example, in sub-swarmSc,the particles use the messages of the velocities and fitness values from the particles in the basic sub-swarmsSaandSbto refresh their positions and velocities. Based on this information sharing mechanism, the particles in each sub-swarm can learn from others and fully enhance their search abilities. As shown in Fig. 2, the global optimum gopt is determined by the global optimum in the four sub-swarms, that is,gopt=argmin〈f(gopts|s=a,b,c,d)〉for minimization problems.In CHPSO, the particles perform heterogeneous search mechanisms in the solution space. According to the framework, we present the update rules in following paragraphs. Observing from Fig. 2, we can find out that it is important to provide the foundation knowledge for the adaptive sub-swarmScand the exploration sub-swarmSd. The update rules of the particles in the basic sub-swarmsSaandSbare defined as shown in Eqs. (10) and (11). In the adaptive sub-swarmSc,the particles can adjust the flight directions adaptively by learning from better particles in the basic sub-swarms. The velocity of the ith particle, employing the fitness values from the basic sub-swarms to update, is updated by Eq. (12),(12)vic(t+1)=ω〈γγavia(t+1)+γγbvib(t+1)+vic(t)〉+c1r3〈lic−xic(t)〉+c2r4〈gopt−xic(t)〉,where γaand γbare the fitness values of the particles in the sub-swarmSaandSb,respectively. γ is the sum of the fitness value, that is, γ = γa+ γb. Similar to r1 and r2, r3 and r4 are also vectors of random numbers.The fitness tracking strategy is employed by comparing the fitness values among the particles in sub-swarmsSaandSb,and the one with the better fitness has larger effect on the particles in sub-swarmSc. Additionally, in sub-swarmsSa,SbandSc,the position update rules are the same as the one in Eq. (11).In sub-swarmSd,however, both the position and velocity update rules are different from those of the other three sub-swarms. The ith particle adjusts the velocity according to the velocities of the particles in the sub-swarmsSa,SbandSc. Accordingly, the particles of sub-swarmSdare able to develop the new areas rooting in the differences. The velocity of the ith particle in the sub-swarmSdis defined as shown in Eq. (13),(13)vid(t+1)=via(t+1)+vib(t+1)−vic(t+1).Guided by the velocity difference between the basic sub-swarms and the adaptive sub-swarm, the particles in sub-swarmSdcan create more potential solutions and explore new regions. There is evidence that gopt can guide particles to the global optimal solution (Liang et al., 2006). To enhance the searching ability, the positionxidin sub-swarmSdis updated by Eq. (14) as follows:(14)xid(t+1)=α1xid(t)+α2lid+α3gopt+vid(t+1),whereα1,α2andα3are called the impact factors, and they are subject toα1+α2+α3=1. From Eq. (14), the different impact factors control the effects of previous information on the position of the particle in sub-swarmSd. The bigger αk(k = 1, 2, 3) is, the larger effect of previous information on the current search; and vice versa. As a result, the particles in sub-swarmSdreceive information, e.g. the velocity difference, from the particles of the other sub-swarms. In this study,α1,α2andα3are set to16,13and12according to previous experiments, respectively.For clarity, we use Fig. 3to illustrate the above Eqs. (10)–(14). From the graph, the positions xa, xband xcare all approaching to the captured global position gopt, while xdhas the potential ability to explore new region for enhancing the diversity of the swarm. This result can be deduced from the information shared directly or indirectly by all the particles in each iteration. To create more potential solutions and remove unnecessary search, the worst particle in each sub-swarm is replaced by the negative global optimum in every other iteration. As a result, CHPSO avoids falling into the local minima, and it can also help to find the optimal structure and parameters of the T–S model.The convergence of the sequence{xt}t=0+∞to a stable equilibrium will be determined if the magnitude of the eigenvalues λ of the state matrix satisfies ‖λ‖ ≤ 1 (if ‖λ‖ = 1, λ is the unique solution of the minimal polynomial of the state matrix) (Lyapunov, 1992). According to Eq. (S7), we analyze the relationship between ω andκi|i=1,2,…,6and illustrate it in Fig. 4. CHPSO can perform steadily and converge to an equilibrium when ω and κiare fixed in the shaded zone. Furthermore, CHPSO can achieve the best performance when ω ∈ (0, 1), and κi∈ (0, 3) if only if they are all fixed at the shaded region in Fig. 4.We prove the CHPSO algorithm can theoretically converge to a stable state. Without loss of generality, the CHPSO is reduced into a system with only one particle in each sub-swarm. The position update rule of particles in the sub-swarmSaandSbcan be deduced from Eqs. (10) and (11), which are formulated as follows:(15)xt+1a/b=(1+ω−κ1−κ2)xta/b−ωxt−1a/b+κ1lta/b+κ2goptt,whereκ1=c1r11,andκ2=c2r12. Similarly, we can also obtain the update formulations from Eqs. (11)–(14) for the particles in the sub-swarmScandSd,respectively,(16)xt+1c=(1+ω−κ5−κ6)xtc−ωxt−1c+κ3ltc+ωγ(ω−κ1−κ2)γaxta−ω2γγaxt−1a+ωγκ1γalta+ωγ(ω−κ3−κ4)γbxtb−ω2γγbxt−1b+ωγκ3γbltb+(κ6+ωγκ2γa+ωγκ4γb)goptt,(17)xt+1d=α1xtd+α2ltd−(ω−κ5−κ6)xtc+ωxt−1c−κ3ltc+(1−ωγγa)[(ω−κ1−κ2)xta−ωxt−1a+κ1lta]+(1−ωγγ2)[(ω−κ3−κ4)xtb−ωxt−1b+κ3ltb]+[(1−ωγγa)κ1+(1−ωγγb)κ4−κ6+α3]goptt,whereκ3=c1r21,κ4=c2r22,κ5=c1r31,andκ6=c2r32.Accordingly, the state equation of the CHPSO system can be easily achieved, which is formulated as follows:(18)x(t+1)=Gx(t)+Hu.In Eq. (18), let a state vector bex(t)=[xta,xtb,xtc,xtd,xt−1a,xt−1b,xt−1c]T,andu=[la,lb,lc,ld,gopt]Tbe a column vector, which can be designed for the target optimum. G and H are the system matrix and the constant matrix, respectively. The matrices G and H are presented in Eqs. (19) and (20), respectively,(19)G=[1+ξ10ϖ1ξ1(1−ϖ1)ξ110001+ξ2ϖ2ξ2(1−ϖ2)ξ2010001+ω−κ−ω−κ001000α1000−ω0−ω2γγaω(ϖ1−1)0000−ω−ω2γγbω(ϖ2−1)00000−ω−ω000]T,whereϖ1=ωγγa,ϖ2=ωγγb,ξ1=ω−κ1−κ2,ξ2=ω−κ3−κ4,andκ=κ5+κ6,(20)H=[κ10ωγκ1γa(γa−ωγ)κ1γa0000κ3ωγκ3γb(γb−ωγ)κ3γb00000κ5−κ5000000α2000κ2κ4τ+κ6κ2+κ4−τ−κ6+α3000]T,whereτ=ωγκ2γa+ωγκ4γb.The eigenvalues of the system in Eq. (18) are obtained as follows:(21)λi={α1,1+ξ1±[(1+ξ1)2−4w]2,1+ξ2±[(1+ξ2)2−4w]2,1+ξ3±[(1+ξ3)2−4w]2},where i = 1, 2,…, 7, andξ3=ω−κ5−κ6.Considering an autonomous system of Eq. (18), we can obtain the limit of xtas follows:(22)limt→+∞x=0.This limit means that xe= 0 is the only equilibrium state of the autonomous system, because the matrix G with det(G) = α1ω3 ≠ 0 is non-singular. Therefore, two main conclusions can be obtained from the autonomous system. The first one is that the convergence of the CHPSO algorithm is conditional on the values of ω and κ (Fig. 4). The second is the system in Eq. (18) converges to an equilibrium state, which is associated with the vector u with a weighted matrix H. The convergence can be adjusted adaptively according to the fitness values of the particles in sub-swarmsSaandSb.According to Eq. (22), we then have the limit of xtin Eq. (18) as follows:(23)limt→+∞x=Hu.In the matrix H, γ = 2γa= 2γbwhen the trajectory converges to the global optimumgopt. To get a fixed weight value and decrease the randomness of the matrix H, the expected value of the stochastic variableκi|i=1,2,…,6is calculated in Eqs. (24) and (25), respectively,(24)E[κi|i=1,3,5]=∫01c1x1−0dx=c12,(25)E[κi|i=2,4,6]=∫01c2x1−0dx=c22.As shown in Eq. (24), we calculated the expectancy values ofκi|i=1,3,5=c·r,where r is a random numbers generated by the uniform distribution between 0 and 1. It is to reduce the freedom of the matrix G in Eq. (19). Based on Eqs. (18) and (20), we can obtain(26)limt→+∞xa=limt→+∞(κ1la+κ2gopt)=limt→+∞(c12la+c22gopt).Accordingly, particles in each sub-swarmSa–Sdconverge to their own stable points, which are formulated by the limits as shown in Eqs. (27)–(30),(27)limt→+∞xa=c12la+c22gopt(28)limt→+∞xb=c12lb+c22gopt(29)limt→+∞xc=ωc1(la+lb)+c12lc+(2ωc2+c22)gopt(30)limt→+∞xd=(1−2ω)c12(la+lb)−c12lc+α2ld+((1−2ω)c2−c22+α3)gopt.According to Eqs. (27)–(30), it is easy to obtain(xc+xd)−(xa+xb)=α2ld+α3goptwhen the limits are achieved. Combined with Eq. (13), we can conclude that the balance between exploitation and exploration depends on the dynamics between the different sub-swarms. Additionally, the balance also depends on the historical best position of the particle in sub-swarmSdand the global optimum. That is, the basic sub-swarms maintain good exploitation, while the exploration is enhanced by sub-swarmsScandSd. When the particles do not converge, there will always exist the difference between the basic sub-swarms and the other two sub-swarms to support the diverse information. Also, the trajectory of CHPSO can converge to the individual best positions and the global optimum with constant weights if and only if the values of ω and κiare located in the shaded region of Fig. 4.To validate the proposed MoPath, we conducted experiments over two cases to model the biological systems involving generic branch pathway (Voit & Almeida, 2004) and cascade-network system (Tsai & Wang, 2005). The true time-series data sets were generated by solving the S-system, and the proposed MoPath is demonstrated on these time-series data for training and test.The first case is the dynamic of the generic branch pathway system (Voit & Almeida, 2004), which is illustrated in Fig. 5. As can be seen, the source variable, X0, generates the dependent variable X1, which is affected by the inhibition exerted by X3. X3 is produced by the intermediate X2 from the dependent variable X1. Another branch is also derived from X1, and it determines the generation of X4, which inhibits the degradation of X3.Although there are only four dependent variables in the generic branch pathway, it is difficult to predict its dynamic behavior. We cannot intuitively figure out what it is, i.e., what the fixed status of X3 is if the input to the system is increased or decreased (Voit & Almeida, 2004).In the generic branch pathway, the simulation time is set from t = 0s to t = 2s with a step of 0.02s. The MSE of test trials is considered as a result of prediction experiment, in which the initial conditions are different from that of the training trials. For the independent test, we set the initial conditions X1(0) = 0.2, X2(0) = 0.3, X3(0) = 4.2 and X4(0) = 0.02 as the same in Voit and Almeida (2004).To determine the appropriate fuzzy rule number, we first conduct a design of experiment (DoE) over the generic branch pathway system. In DoE, the population size is set to 50, and the generations are set to 1200. MoPath varies the number of the fuzzy rules from 1 to 15 by increment of 1. For each number of fuzzy rules, MoPath is independently run for 20 times, and the average MSEs of MoPath with different kernels (Bell-shaped and Gaussian) are illustrated in Fig. 6. As shown in the figure, although MoPath with Bell-shaped kernel achieves its minimal average MSE when eight fuzzy rules are employed in MoPath, while MoPath with Gaussian kernel can exhibit the best result when there is 14 fuzzy rules, these fuzzy rules are too complex to describe the system.In this experiment, accordingly, the rule number R in Eq. (3) is set to 3 and 4 for the Bell-shaped and Gaussian kernels, respectively, in building the mathematical model of the generic branch pathway by MoPath. In MoPath, the maximum number of the iterations is set to 2000, and the population size is set to 80 in each sub-swarm of CHPSO (total 320). The search ranges of premise parameters are cij∈ [0, 5] and σij∈ (0, 50]. bijis set to [0.1, 10] only used in the Bell-shaped membership functions, and the consequent parameters are set to αij∈ [−6, 6].Table 1shows the membership function, the number of fuzzy rules and the total number of premise parameters, and also the train MSE and the test MSE are all illustrated in details. As shown in Table 1, MoPath with Gaussian function performed better than that of the Bell-shaped function. And no matter MoPath uses Gaussian or Bell-shaped function, it was always better than other five compared methods. The methods (B_2, G_2, and G_3) proposed in Wu et al. (2013) are also rule-based approximator, we can observe from the table that MoPath has a better performance with less number of rules and needed parameters. MoPath also surpassed SA (Simulated Annealing) method (Gonzalez et al., 2007) a little, but it was far better than the ANN-method (Voit & Almeida, 2004). Compared with the Bell-shaped function, the Gaussian function needs fewer parameters but performs better under the same parameter settings.Fig. 7(a) shows the dynamic behavior of two kinds of membership functions, respectively. In Fig. 7(b), the robustness of MoPath with two different membership functions over the data set with 10 percent white noise was validated, and the MSEs were 7.8 × 10−3 (Gaussian) and 1.3 × 10−2 (Bell-shaped) for MoPath with the two kernel functions, respectively. The detailed illustrations are presented in Figs. S1 and S2 of the Supplementary Material. The human readable fuzzy rules generated by the MoPath approach for the generic branch pathway system can be found in Tables S1, S2, S3 and S4 of the Supplementary Material. These rules are helpful to understand the dependent relationship among the variables.In Table 2, the train MSE results of MoPath with different kernels are listed. As shown in the table, the errors of Gaussian kernel based MoPath is a little bit better than those of MoPath combining with Bell-shaped kernel over noise-free (0 percent) and noise (10 percent) system. More experimental details on the datasets with 10 percent white noises and the corresponding rules are shown in the Supplementary Material (see Fig. S2, Tables S3 and S4).To further validate the proposed method, we conducted the experiment on a cascade-network system (Tsai & Wang, 2005). Cascaded mechanism is very common and can be discovered in diverse areas of biochemistry and physiology, which comprises hormonal control, gene regulation, immunology, blood clotting and visual excitation, which is illustrated in Fig. 8.In the cascade system, there are three steps and two feedback signals. As illustrated in Fig. 8, the independent precursors X4 generates the dependent variable X1, which inhibits the production of X2. X2 is also an inhibiting signal of X3, and both of them inhibit the production of X1.The training data set is generated by the S-system in Fig. 8 with the initial conditions X1(0) = 0.5, X2(0) = 0.2 and X3(0) = 0.5. On the other hand, we use different initial conditions, X1(0) = 0.72, X2(0) = 0.08 and X3(0) = 0.72, to generate the independent test data set. The simulation time is the same in the training and test cases, which is set from t = 0s to t = 8s with an increment step of 0.08s.In this case study, DoE is implemented to figure out the appropriate rule number for MoPath. In this DoE, the number of fuzzy rules is varied from 1 to 15 by increment of 1, while the generation number and the population size in the CHPSO are set to 1200 and 50, respectively. The achieved average MSEs are shown in Fig. 9. Accordingly, MoPath with Gaussian kernel obtains the minimal and similar MSEs when it employs different number of rules (R = 3, 4, 5, 6, 8, 14), but the larger the rule number is, the more serious the overlap among the fuzzy rules is. In DoE, on the other hand, although MoPath with Bell-shaped kernel achieves the minimal MSE value when two rules are embedded in MoPath, it is hard for MoPath with Bell-shaped kernel to use only two rules in simulating the complex dynamic behavior of the system. As shown in Fig. 9, MoPath can performance well with two different kernels when the rule number is set to three. Accordingly, the number of fuzzy rules for both Gaussian and Bell-shaped MoPath is set to the same value, that is, R = 3.In this case study, the maximum number of iterations and population size are all set to the same values as those in the first experiment, but the consequent parameters are different, which are set to αij∈ [−8, 8].In Table 3, we compared the adaptive neural-based fuzzy models and the HDE-based methods with MoPath over the cascade system. As shown in the table, it is easy to observe that the MSE results of MoPath were better than those of HDE-based methods in terms of both train MSE and test MSE.Table 4illustrates the MSE results, which include the experimental results over different data set (noise or noise-free system). As shown, over the train data with 10 percent noise, they achieve a similar accuracy, but Gaussian-MoPath is a little bit better.In Fig. 10(a), we can see that it is also different between the proposed MoPath with two membership functions, that is, the Gaussian-based MoPath surpassed to the Bell-shaped one with an order of magnitude in terms of the test MSE. As shown in Fig. 10(b), the robustness of MoPath over the data set with 10 percent white noise was illustrated. The detailed results are presented in Fig. S4 of the Supplementary Material, in which the human-readable rules are also included in Tables S7–S8. From the robustness study (10 percent white noise), we found the robustness of Gaussian-based MoPath was also better than that of Bell-shaped MoPath in term of MSE, which were 2.0 × 10−3 (Gaussian) and 3.1 × 10−3 (Bell-shaped), respectively. The experiment results suggest that the robustness of Gaussian kernel superior to that of Bell-shaped one in MoPath modeling the cascade-network system.

@&#CONCLUSIONS@&#
