@&#MAIN-TITLE@&#
Hybrid heuristics for a short sea inventory routing problem

@&#HIGHLIGHTS@&#
A mixed integer model is introduced for a real short sea inventory routing problem.Valid inequalities for maritime inventory routing problems are discussed.Hybrid heuristic strategies are combined to provide good feasible solutions.

@&#KEYPHRASES@&#
Maritime transportation,Hybrid heuristics,Inventory routing,Mixed integer programming,

@&#ABSTRACT@&#
We consider a short sea fuel oil distribution problem where an oil company is responsible for the routing and scheduling of ships between ports such that the demand for various fuel oil products is satisfied during the planning horizon. The inventory management has to be considered at the demand side only, and the consumption rates are given and assumed to be constant within the planning horizon. The objective is to determine distribution policies that minimize the routing and operating costs, while the inventory levels are maintained within their limits. We propose an arc-load flow formulation for the problem which is tightened with valid inequalities. In order to obtain good feasible solutions for planning horizons of several months, we compare different hybridization strategies. Computational results are reported for real small-size instances.

@&#INTRODUCTION@&#
Maritime transportation is the major mode of transportation of goods worldwide. The importance of this mode of transportation is obvious for the long distance transportation of cargoes but it is also crucial in local economies where the sea is the natural link between the local developed regions, such as countries formed by archipelagoes. When a company has the responsibility of coordinating the transportation of goods with the inventories at the ports, the underlying planning problem is a maritime inventory routing problem. Such problems are very complex. Usually modest improvements in the supply chain planning can translate into significant cost savings.In this paper we consider a real Short Sea Inventory Routing Problem (SSIRP) occurring in the archipelago of Cape Verde. An oil company is responsible for the inventory management of different oil products in several tanks located in the main islands. Fuel oil products are imported and delivered to specific islands and stored in large supply storage tanks, so the inventory management does not need to be considered in these tanks. From these islands, fuel oil products are distributed among all the inhabited islands using a small heterogeneous fleet of ships with dedicated tanks. These products are stored in consumption storage tanks with limited capacity. Consumption rates are assumed to be given and constant over a time horizon of several months. Some ports have both supply tanks for some products and consumption tanks of other products.We have witnessed an increased interest in studying optimization problems within maritime transportation (Christiansen, Fagerholt, Nygreen, & Ronen, 2007, 2013; Christiansen, Fagerholt, & Ronen, 2004) and, in particular, in the last fifteen years, problems combining routing and inventory management (Andersson, Hoff, Christiansen, Hasle, & Løkketangen, 2010; Christiansen & Fagerholt, 2009). These problems are often called Maritime Inventory Routing Problems (MIRPs). Most of the published MIRP contributions are based on real cases from the industry, see for the single product case (Christiansen, 1999; Flatberg, Haavardtun, Kloster, & Løkketangen, 2000; Furman, Song, Kocis, McDonald, & Warrick, 2011; Grønhaug, Christiansen, Desaulniers, & Desrosiers, 2010) and for the multiple products case (Al-Khayyal & Hwang, 2007; Christiansen et al., 2011; Rakke et al., 2011; Ronen, 2002; Siswanto, Essam, & Sarker, 2011; Sta˚lhane et al., 2012).This SSIRP is addressed in a companion paper (Agra, Christiansen, & Delgado, 2013b) where different mathematical formulations are discussed and compared for the SSIRP considering a shorter time horizon. There, two main approaches to model the problem are considered. One uses a continuous time model where an index indicating the visit number to a particular port is added to most of the variables. This approach was used in Al-Khayyal and Hwang (2007), Christiansen (1999) and Siswanto et al. (2011) for MIRPs where the production and/or consumption rates are considered given and fixed during the planning horizon. The other approach consists of using a model that combines a discrete and continuous time where the discrete time corresponds to an artificial discretization of the continuous time. Discrete time models have been developed in Agra, Andersson, Christiansen, and Wolsey (2013), Furman et al. (2011), Grønhaug and Christiansen (2009), Grønhaug et al. (2010), Rakke et al. (2011), Ronen (2002), Song and Furman (2013) to overcome the complicating factors with time varying production and consumption rates. In addition, for each approach two new extended formulations are tested in Agra et al. (2013b).In Agra, Christiansen, and Delgado (2013a), the SSIRP for short-term planning is considered. For the short-term plans demand orders are considered, that is, fixed amounts of oil products that must be delivered at each port within a fixed period of time. These orders are determined from the initial stock levels and the consumption rates and lead to a problem with varying demands (corresponding to the demand orders). Several key issues taken into account in the short-term problem are relaxed here or incorporated indirectly in the data. For instance, port operating time windows that are essential in the short-term plan are ignored here. Otherwise, the problems considered originate from the same company in the same region. These problems are solved using the same commercial solver we use here, considering a formulation which is improved by the strengthening of defining inequalities and the inclusion (through separation) of valid inequalities. In Al-Khayyal and Hwang (2007) a problem similar to the SSIRP is considered with constant consumption rates and dedicated compartments in the ships.In this paper we develop and compare different hybrid heuristics for the SSIRP. As discussed in Andersson et al. (2010) and Song and Furman (2013), most combined maritime routing and inventory management problems described in the literature have particular features and characteristics, and tailor-made methods are developed to solve the problems (Christiansen & Fagerholt, 2009). These methods are often based on heuristics or decomposition techniques. Recent hybrid heuristics that use MIP solvers as a black-box tool have been proposed. Here we consider and combine three hybrid heuristics: Rolling Horizon (RH), Local Branching (LB) and Feasibility Pump (FP). In RH heuristics the planning horizon is split into smaller sub-horizons. Then, each limited and tractable mixed integer problem is solved to optimality. Within maritime transportation RH heuristics have been used in Hwang (2005), Rakke et al. (2011), Sherali, Al-Yakoob, and Hassan (1999), Siswanto et al. (2011), Song and Furman (2013). Local Branching (LB) was introduced by Fischetti and Lodi (2003) to improve feasible solutions. LB heuristics search for local optimal solutions by restricting the number of binary variables that are allowed to change their value in the current solution. Feasibility Pump (FP) was introduced by Fischetti, Glover, and Lodi (2005) to find initial feasible solutions for MIP problems.Computational experiments reported in Section 6 show that a combined heuristic using the three approaches outperformed the other tested heuristics and, in particular, outperformed the most used approach within MIRPs, the RH heuristic.To solve each subproblem we consider the arc-load flow (ALF) formulation introduced in Agra et al. (2013b), since this was the model with the best performance among all the tested models for this problem with short time horizons. The ALF formulation is improved by a pre-computation of estimates for the number of visits to each port, and with the inclusion of valid inequalities. In particular, we introduce a new family of clique inequalities for MIRPs when continuous time models are used.The main contributions of this paper, the heuristic strategies and the valid inequalities, can easily be used in other MIRPs.The remainder of this paper is organized as follows. In Section 2, we describe the real problem. The arc-load flow formulation is presented in Section 3 and strategies to tighten the formulation are discussed in Section 4. In Section 5 we describe several hybrid heuristics. The computational experimentations are reported in Section 6. Final conclusions are given in Section 7.In Cape Verde, fuel oil products are imported and delivered to specific islands and stored in large supply storage tanks. From these islands, fuel oil products are distributed among all the inhabited islands using a small heterogeneous fleet of ships. The products are stored in consumption storage tanks. Two ports have both supply tanks for some products and consumption tanks for other products, while the remaining ports have only consumption tanks. Not all islands consume all products. The consumptions (which are usually forecasted) are assumed to be constant over the time horizon. It is assumed that each port can receive at most one ship at a time and a minimum interval between the departure of a ship and the arrival of the next one must be considered. Waiting times are allowed.Each ship has a specified load capacity, fixed speed and cost structure. The cargo hold of each ship is separated into several cargo tanks. The products can not be mixed, so we assume that the ships have dedicated tanks to particular products.The traveling times between two consecutive ship visits are an estimation based on practical experience. Additionally, we consider set-up times for the coupling and decoupling of pipes, and operating times.To prevent a ship from delivering small quantities, minimum delivery quantities are considered. The maximum delivered quantity is imposed by the capacity of the consumption storage tank. Safety stocks are considered at consumption tanks. As the capacity of the supply tanks is very large when compared to the total demand over the horizon, we omit the inventory aspects for these tanks.In each problem instance we are given the initial stock levels at the consumption tanks, initial ship positions (which can be a point at sea) and quantities on board each ship. The inter-island distribution plan consists of designing routes and schedules for the fleet of ships including determining the number of visits to each port and the (un)loading quantity of each product at each port visit. The plan must satisfy the safety stocks of each product at each island and the capacities of the ship tanks. The transportation and operation costs of the distribution plan must be minimized over a finite planning horizon.In Agra et al. (2013b) a comparison of six different formulations for the SSIRP for a shorter time horizon is given. Three of those formulations consider a time discretization and the other three consider continuous time. For each time option the following formulations are considered: an arc-load formulation, where the model keeps only track of the information of the load on board each ship compartment in each port visit; an arc-load flow formulation, where new variables are used to keep the information about the quantity of each product in each compartment when a ship leaves a port en route to the next one; and a multi-commodity formulation, where the flow on each arc is disaggregated accordingly to its destination. That comparison led to the choice of the continuous time arc-load flow formulation. In this section we present that arc-load flow formulation.Let V denote the set of ships. Each ship v∈V must depart from its initial position in the beginning of the planning horizon. The set of ports is denoted by N. For each port we consider an ordering of the visits accordingly to the time of the visit. The ship paths are defined on a network where the nodes are represented by a pair (i,m), where i is the port and m represents the mth visit to port i. Direct ship movements (arcs) from port arrival (i,m) to port arrival (j,n) are represented by (i,m,j,n).We define SAas the set of possible port arrivals (i,m),SvAas the set of ports that may be visited by ship v, and setSvXas the set of all possible movements (i,m,j,n) of ship v.For the routing we define the following binary variables: ximjnvis 1 if ship v sails from port arrival (i,m) directly to port arrival (j,n), and 0 otherwise; xoimvindicates whether ship v sails directly from its initial position to port arrival (i,m) or not; wimvis 1 if ship v visits port i at arrival (i,m), and 0 otherwise; zimvis equal to 1 if ship v ends its route at port arrival (i,m), and 0 otherwise; zovis equal to 1 if ship v is not used and 0 otherwise; yimindicates whether a ship is visiting port arrival (i,m) or not.(1)∑(i,m)∈SvAxoimv+zov=1,∀v∈V,(2)wimv-∑(j,n)∈SvAxjnimv-xoimv=0,∀v∈V,(i,m)∈SvA,(3)wimv-∑(j,n)∈SvAximjnv-zimv=0,∀v∈V,(i,m)∈SvA,(4)∑v∈Vwimv=yim,∀(i,m)∈SA,(5)yi(m-1)-yim⩾0,∀(i,m)∈SA:m>1,(6)xoimv,wimv,zimv∈{0,1},∀v∈V,(i,m)∈SvA,(7)ximjnv∈{0,1},∀v∈V,(i,m,j,n)∈SvX,(8)zov∈{0,1},∀v∈V,(9)yim∈{0,1},∀(i,m)∈SA.Eq. (1) ensure that each ship either departs from its initial position and sails towards another port or the ship is not used. Eqs. (2) and (3) are the flow conservation constraints, ensuring that a ship arriving at a port also leaves that port or ends its route. Constraints (4) ensure that one ship only visits port (i,m) if yimis equal to one. Constraints (5) state that if port i is visited m times, then it must also have been visited m−1 times. Constraints (6)–(9) define the variables as binary.Let K represent the set of products and Kvrepresent the set of products that ship v can transport. Not all ports consume all products. Parameter Jikis 1 if port i is a supplier of product k; −1 if port i is a consumer of product k, and 0 if i is neither a consumer nor a supplier of product k. The quantity of product k on board ship v at the beginning of the planning horizon is given by Qvk, and Cvkis the capacity of the compartment of ship v dedicated for product k. The minimum and the maximum discharge quantities of product k at port i are given byQikandQ‾ik, respectively.In order to model the loading and unloading constraints, we define the following binary variables: oimvkis equal to 1 if product k is loaded onto or unloaded from ship v at port visit (i,m), and 0 otherwise. In addition, we define the following continuous variables: qimvkis the amount of product k loaded onto or unloaded from ship v at port visit (i,m), fimjnvkdenotes the amount of product k that ship v transports from port visit (i,m) to port visit (j,n), and foimvkgives the amount of product k that ship v transports from its initial position to port visit (i,m).The loading and unloading constraints are given by:(10)foimvk+∑(j,n)∈SvAfjnimvk+Jikqimvk=∑(j,n)∈SvAfimjnvk,∀v∈V,(i,m)∈SvA,k∈Kv(11)foimvk=Qvkxoimv,∀v∈V,(i,m)∈SvA,k∈Kv,(12)fimjnvk⩽Cvkximjnv,∀v∈V,(i,m,j,n)∈SvX,∈Kv,(13)0⩽qimvk⩽Cvkoimvk,∀v∈V,(i,m)∈SvA,k∈Kv:Jik=1,(14)Q̲ikoimvk⩽qimvk⩽Q‾ikoimvk,∀v∈V,(i,m)∈SvA,k∈Kv:Jik=-1,(15)∑k∈Kvoimvk⩾wimv,∀v∈V,(i,m)∈SvA,(16)oimvk⩽wimv,∀v∈V,(i,m)∈SvA,k∈Kv,(17)fimjnvk⩾0,∀v∈V,(i,m,j,n)∈SvA,k∈Kv,(18)foimvk,qimvk⩾0,∀v∈V,(i,m)∈SvA,k∈Kv,(19)oimvk∈{0,1},∀v∈V,(i,m)∈SvA,k∈Kv.Eq. (10) are the flow conservation constraints. Eq. (11) determine the quantity on board when ship v sails from its initial port position to port arrival (i,m). Constraints (12) require that the vehicle capacity is obeyed. Constraints (13) impose an upper bound on the quantity loaded at a supply port. Constraints (14) impose lower and upper limits on the unloaded quantities. Constraints (15) ensure that if ship v visits port arrival (i,m), then at least one product must be (un)loaded. Constraints (16) ensure that if ship v (un)loads one product at visit (i,m), then wimvmust be one. Constraints (17)–(19) are the non-negativity and integrality constraints.In order to keep track of the inventory level it is necessary to determine the start and the end times at each port arrival. We define the following parameters:TikQis the time required to load/unload one unit of product k at port i;TikSis the set-up time required to operate product k at port i. Tijvis the traveling time between port i and j by shipv;TivOindicates the traveling time required by ship v to sail from its initial position to port i;TiBis the minimum interval between the departure of one ship and the next arrival at port i. T is the length of the time horizon. Given the start time timand end timetimEvariables for port arrival (i,m), the time constraints can be written as:(20)timE⩾tim+∑v∈V∑k∈KvTikQqimvk+∑v∈V∑k∈KvTikSoimvk,∀(i,m)∈SA,(21)tim-ti(m-1)E-TiByim⩾0,∀(i,m)∈SA:m>1,(22)timE+Tijv-tjn⩽T(1-ximjnv),∀v∈V,(i,m,j,n)∈SvX,(23)∑v∈VTivOxoimv⩽tim,∀(i,m)∈SA,(24)tim,timE⩾0,∀(i,m)∈SA.Constraints (20) define the end time of service at port visit (i,m). Constraints (21) impose a minimum interval between two consecutive visits at port i. Constraints (22) relate the end time of port visit (i,m) to the start time of port visit (j,n) when ship v sails directly from port visit (i,m) to (j,n). Constraints (23) ensure that if ship v travels from its initial position directly to port visit (i,m), then the start time is at least the traveling time between the two positions. Constraints (24) define the continuous time variables.The inventory constraints are considered for each unloading port. They ensure that the stock levels are within the corresponding bounds and link the stock levels to the (un)loaded quantities.For each consumption port i, and for each product k, the consumption rate, Rik, the minimumSik, the maximumS‾ikand the initial stockSik0levels, are given. The parameterμ‾idenotes the maximum number of visits at port i.We define the nonnegative continuous variables simkandsimkEindicating the stock levels at the start and at the end of port visit (i,m) for product k, respectively. The inventory constraints are as follows:(25)si1k=Sik0-Rikti1,∀i∈N,k∈K:Jik=-1,(26)simkE=simk+∑v∈Vqimvk-Rik(timE-tim),∀(i,m)∈SA,k∈K:Jik=-1,(27)simk=si(m-1)kE-Rik(tim-ti(m-1)E),∀(i,m)∈SA:m>1,k∈K:Jik=-1,(28)S̲ik⩽simk,simkE⩽S‾ik,∀(i,m)∈SA,k∈K:Jik=-1,(29)S̲ik⩽siμ‾ikE-Rik(T-tiμ‾iE)⩽S‾ik,∀i∈N,k∈K:Jik=-1.Eq. (25) calculate the stock level of each product at the first visit. Eq. (26) calculate the stock level of each product when the service ends at port visit (i,m). Eq. (27) relate the stock level at the start of port visit (i,m) to the stock level at the end of port visit (i,m−1). The upper and lower bounds on the stock levels are ensured by constraints (28) and (29).The objective is to minimize the total routing costs including traveling, operating and set-up costs. The traveling cost of ship v from port i to port j is denoted byCijvT, whileCoivTrepresents the traveling cost of ship v from its initial port positions to port i. The set-up cost of product k at port i is denoted byCikO. The objective function is as follow:(30)∑v∈V∑(i,m,j,n)∈SvXCijvTximjnv+∑v∈V∑(i,m)∈SvACoivTxoimv+∑v∈V∑(i,m)∈SvA∑k∈KvCikOoimvk.The formulation defined by (1)–(30) is denoted by F-SSIRP, and the feasible set will be denoted by X.Tightening the formulation provided in the previous section is essential to speed up the solution approaches (Branch and Bound and hybrid heuristics), and to provide tighter bounds that will be used in Section 6 to evaluate the quality of the tested heuristics. The tightening is done by including new inequalities. Many families of inequalities were tested. Here we present only the ones that provided best results from a preliminary study.Time constraints (22) linking the time variables with the routing variables are very weak. Parameter T works as a big M constant. An approach to tighten such constraints is to establish time windows to the time events.(31)Aim⩽tim⩽Bim,∀(i,m)∈SA,(32)AimE⩽timE⩽BimE,∀(i,m)∈SA.Then, constraints (22) can be replaced by the stronger inequalitiestimE-tjn+(BimE+Tijv-Ajn)ximjnv⩽BimE-Ajn.These inequalities can be further strengthened as follows (see Proposition 1 in Agra et al. (2013)):(33)timE-tjn+∑v∈V|(i,m,j,n)∈SvXmax{0,BimE+Tijv-Ajn}ximjnv⩽BimE-Ajn,∀(i,m),(j,n)∈SA.One can takeAim=AimE=0andBim=BimE=T. However, by reducing the widths of the time windows we strengthen inequalities (33). In this SSIRP we are dealing with multiple ships, multiple products, and all supply ports also act as demand ports of other products. Because of this characteristics it is hard to derive tight time windows.For simplicity, we provide only those time windows formulas that proved to be most effective for our case. Other rules can be derived adapting the ones given in Christiansen (1996) for the single item case. Since inventory aspects are only relevant for consumption tanks, and since all the loading ports of certain products are also consumption ports of other products, time windows are established based on the unloading products only.The start of time windows are computed as follows:Aim=minv∈VTivO+(m-1)∗TiB+mink∈K|Jik=-1TikQQ̲ik+TikS,AimE=minv∈VTivO+(m-1)∗TiB+m∗mink∈K|Jik=-1TikQQ̲ik+TikS,and the end of time windows are computed as follows:Bim=minT,mink∈K|Jik=-1Sik0+(m-1)∗S‾ik-S̲ik/Rik-TikS,BimE=minT,mink∈K|Jik=-1Sik0+m∗S‾ik-S̲ik/Rik-TikS-TiB.The end of time windows can be further strengthened. Letμidenote a lower bound on the number of visits to port i, i∈N (see in Section 4.2 how to compute these parameters). If m⩽μi, then T in the Bimformula given above can be replaced byT-(μi̲-m)∗TiB-(μi̲-m+1)∗mink∈K|Jik=-1TikQQ̲ik+TikS,and, if m<μi, then T in theBimEformula can be replaced byT-(μi̲-m)∗TiB+mink∈K|Jik=-1Q̲ikTikQ+TikS.A common approach to tighten formulations for routing problems is to include constraints imposing a minimum number of visits to each node. The impact on the reduction of the integrality gap is usually high. Equations(34)yiμi̲=1,∀i∈Ncan be added to each model. These parametersμican be computed from the inventory information and traveling times. However, since the traveling times between islands are small, the number of visits is better estimated through the inventory information and storage capacities (at ships and ports).For each port i∈N where product k is unloaded, Jik=−1, letDikN=max{T×Rik-Sik0+S̲ik,Q̲ik}denote the net consumption over the time horizon. The minimum number of visits to port i for unloading product k is given byλ̲ik=DikNQ‾ik.In the real problem, each product has a single origin. As inventory management at supply tanks is disregarded, the minimum number of visits to load a product can be estimated using the total consumption supplied by that origin. The consumption of that product must be satisfied either from that port or from the quantity in the ship tanks at the beginning of the planning horizon.For each product k∈K, loaded at port i∈N (Jik=1) letDikN=∑j∈N|Jjk=-1(T×Rjk-Sjk0+S̲jk),denote the net consumption of this product over the time horizon. The minimum number of loadings of product k at port i is given byλ̲ik=DikN-∑v∈VQvkmax{Cvk:v∈V}.A lower bound on the total number of visits to port i∈N can be given by the following equation:(35)μ̲i=max{λ̲ik:k∈K}.Better bounds can be obtained by solving subproblems for each port. A subproblem is solved for the consumption products at the port and, if the port is also a supplier of other products, another subproblem is solved for the supply products.Although the subproblems are NP-hard, they can be solved very quickly using a commercial software.First we state the subproblem for consumption products. All the routing constraints are ignored in the subproblems. For these subproblems associated to each port the inventory and time constraints are the same as for the original model. The ship capacity for each product is overestimated by the maximum of the ship capacities for that product.LetC‾k=max{Cvk:v∈V,k∈Kv}. For each port i letMi={1,2,⋯,μ‾i}. The subproblem is defined as follows:(36)NVD(i):min∑m∈Miyim(37)s.t.q‾imk⩽C‾ko‾imk,∀m∈Mi,k∈K,Jik=-1,(38)Q̲iko‾imk⩽q‾imk⩽Q‾iko‾imk,∀m∈Mi,k∈K:Jik=-1,(39)o‾imk⩽yim,∀m∈Mi,k∈K:Jik=-1,(40)Constraints(25)–(29)fornodeiConstraints(20),(21),(24)fornodeiyim∈{0,1},∀m∈Mi,(41)o‾imk∈{0,1},∀m∈Mi,k∈K:Jik=-1,(42)q‾imk⩾0,∀m∈Mi,k∈K:Jik=-1,whereo‾imk=∑v∈Voimkv,q‾imk=∑v∈Vqimkv.The objective function (36) minimizes the number of visits at port i. Constraints (37)–(39) have a similar meaning as constraints (13), (14), (16), only now the ship is ignored and an overestimation of the ship capacities is used.If port i is also a supplier, we define the following subproblem, NVS(i), where only the ship tank capacities are considered.min∑v∈Vuiv:∑v∈VCvkuiv⩾∑j∈N:Jjk=-1DjkN-∑v∈VQvk,∀k∈K:Jik=1,uiv∈Z+,v∈V,where uivindicates the number of visits of ship v to port i.If port i is simultaneously a consumption and a supply port, the minimum number of visits is the maximum between NVD(i) and NVS(i). These two subproblems will be called port subproblems.Inequalities from knapsack relaxations have previously been used for MIRPs, see for instance (Grønhaug et al., 2010; Persson & Göthe-Lundgren, 2005; Song & Furman, 2013).Let Dk(S) denote the total demand of product k, from ports in S during the planning horizon, where S⊆N and Jik=−1 for all i∈S. Hence,Dk(S)=∑i∈ST×Rik. Let NDk(S) denote the amount of demand Dk(S) that must be transported from ports in N⧹S. That is,NDk(S)=Dk(S)-∑v∈VQvk-∑i∈S(Sik0-S̲ik). Then, the following integer set is a relaxation of X:RX=χ∈Z+|V|:∑v∈VCvkχv⩾NDk(S).whereχv=∑(i,m)∈SvA|i∈N⧹S∑(j,n)∈SvA|j∈Sximjnv,denotes the number of times ship v visits a port in S coming from a port not in S during the planning horizon T.Valid inequalities for RX are valid for X. A particular case of these inequalities is the following Gomory cut(43)∑v∈V∑(i,m)∈SvA|i∈N⧹S∑(j,n)∈SvA|j∈SCvkQximjnv⩾NDk(S)Q,where Q can be any positive number. We takeQ=C‾k.However, when ∣V∣=2 the convex hull of RX can be completely described in polynomial time, see (Agra & Constantino, 2007). When ∣V∣>2 facet defining inequalities for restrictions of RX to two variables χvcan be lifted using the lifting function ω3 presented in Agra and Constantino (2007). This approach was used in Agra et al. (2013a). Here we provide an example.Example 4.1Let N={1,2,…,7}, V={1,2,3,4}, K={1,2,3,4}. Fix port i=6, and consider the capacities of the compartments dedicated to product k=1: C11=900, C21=600, C31=920, and C41=700. Suppose that for i=6 and k=1 with J61=−1, we have ND61=3675. The following relaxation is derivedRX=χv∈Z+:900χ1+600χ2+920χ3+700χ4⩾3675.Inequality 3χ1+2χ2⩾13 is a facet-defining inequality for RX restricted to χ3=χ4=0. The lifting function associated with this inequality is:φ(z)=max13-3χ1-2χ2s.t.900χ1+600χ2⩾3675-z,χ1,χ2∈Z+.In order to lift simultaneously the coefficients of χ3 and χ4, the lifting function φ(z) can be overestimated by the subadditive lifting function ω3 described in Agra and Constantino (2007). Both functions are depicted in Fig. 1. Then the lifted inequality 3χ1+2χ2+ω3(920)χ3+ω3(700)χ4⩾13 ⇔ 3χ1+2χ2+3.26667χ3+3χ4⩾13 is valid for RX.Notice that if only three variables are considered then one can use φ(z) instead of ω3 which gives a better coefficient for χ3 since φ(920)=3.Similar knapsack inequalities can be derived for loading ports and for relaxations using the operating variables oimvkinstead of the traveling variables. For brevity we omit those inequalities.The name clique inequalities has been used for different families of valid inequalities for vehicle routing problems. Here we introduce a family of clique inequalities which can be regarded as a generalization of the subtour elimination constraints (SEC):ximjnv+xjnimv⩽1Although subtour elimination constraints including more than two variables can be useful to improve the integrality gap, our experience showed that good computational results can be obtained using SEC including only two variables. These inequalities can be regarded a particular case of clique inequalities on a given conflict graph. Consider the conflict graphG=(N,E), where each node inN, denoted by (i,m,j,n,v), corresponds to a variable ximjnv, and there is an edge in E between two nodes if the corresponding variables cannot be set simultaneously to one (the two nodes are in conflict).Definition 4.2LetG=(N,E)be a conflict graph. Then we define the following pairs of incompatible variables:(i)ximjnvandxjnimv,∀v∈V,(i,m,j,n)∈SXv.ximjnv1andximlwv2,∀v1,v2∈V,(i,m,j,n)∈SXv1,(i,m,l,w)∈SXv2.xlwjnv1andximjnv2,∀v1,v2∈V,(l,w,j,n)∈SXv1,(i,m,j,n)∈SXv2.xlwjnv1andxjnimv2,∀v1,v2∈V:v1≠v2,(l,w,j,n)∈SXv1,(j,n,i,m)∈SXv2.As consequence of the above discussion we have the following result:Proposition 4.1IfC⊂Nis a clique in the conflict graph G, then the inequality(44)∑(i,m,j,n,v)∈Cximjnv⩽1is valid for X.An inequality based on a pair of incompatible inequalities of type (i) is a SEC.In order to separate clique inequalities we need to consider weights on the nodes. The weight of node (i,m,j,n,v) is given by the value of the variable ximjnvin the linear solution. Finding the most violated clique inequality implies to solve the maximum weight clique problem, which is known to be strongly NP-hard. Here we use a simple greedy separation heuristic. First, find the maximum weight clique with two nodes and update C accordingly. Then augment set C in a greedy fashion. In each iteration add to C the maximum weight node that forms a clique with the nodes in C, that is, C←C∪{v∗} wherev∗=argmax{wv:∀u∈C,{u,v}∈E}.and wvis the weight of node v. The process stops when a maximal clique is found. If the resulting clique inequality (44) is violated then it is added as a cut, otherwise no new inequality is added.Fig. 2shows an example of a linear relaxation solution and the respective conflict graph. Starting with the maximum weight clique with two nodesC={(1,1,2,1,2),(1,1,2,2,2)}.C is further expanded. First with (2,2,1,1,2) and then with (3,1,1,1,1). Hence, C={(1,1,2,1,2), (1,1,2,2,2), (2,2,1,1,2), (3,1,1,1,1)}. The (violated) maximal clique inequality isx11212+x11222+x31111+x22112⩽1The formulation F-SSIRP tightened with the strategies discussed in the previous section can hardly be used to solve real instances using a generic MIP solver. However, recent hybrid heuristics have been proposed that use MIP solvers as a black-box tool. Here we consider and combine three such heuristic procedures: rolling horizon, local branching and feasibility pump.When considering a planning horizon of several months, the tested instances become too large to be handled by commercial software. To provide feasible solutions we have developed a Rolling Horizon (RH) heuristic. The main idea of the RH heuristic is to split the planning horizon into smaller sub-horizons, and then repeatedly solve limited and tractable mixed integer problem for the shorter sub-horizons. In transportation problems, RH heuristics have been used in several related works (Bredström & Rönnqvist, 2006; Rakke et al., 2011; Savelsbergh & Song, 2007; Sherali et al., 1999).In each iteration k of the RH heuristic (except the first and last one), the sub-horizon considered is divided into three parts: (i) a frozen part where binary variables are fixed; (ii) a central part (CPk) where no restriction or relaxation is considered, and (iii) a forecasting period (FPk) where binary variables are relaxed. The central period in iteration k becomes a frozen period in iteration k+1, and the forecasting period from iteration k becomes the central period in iteration k+1, see Fig. 3. The process is repeated until the whole planning horizon is covered. In each iteration the limited mixed integer problem is solved. When moving from iteration k to iteration k+1 we (a) fix the values of the binary variables, (b) update the initial stock level of each product at each port, (c) calculate the quantity of each product on board each ship, and (d) update, for each ship, the initial position and the travel time and cost from that position to every port, see Algorithm 1. Based on preliminary tests we set CPk=FPk=5days.Algorithm 1Rolling Horizon heuristic1: k←12: U←number of iterations to cover the planning horizon [1,…,T]3:whilek⩽Udo4: Relax binary variables in forecasting period FPk5: Solve a limited mixed integer problem defined by CPkand FPk6: Freeze the variables ximjnv, xoimv, oimvk, wimv, zimvand yimin CPk7:ifk<Uthen8:Update the initial stock level of product k at port i9:Calculate the quantity of each product on board each ship v10:Update, for each ship v, the initial position and the travel time and cost from that position to every port i11:end if12:k←k+113: end whileLocal Branching (LB) was introduced in Fischetti and Lodi (2003) to improve a given feasible solution. The LB heuristic searches for a local optimum by restricting the number of variables that can change their value in the current feasible solution.More formally, consider a feasible set of the form{(u,v)∈{0,1}n×Rm∩P}where P is a polyhedron. Given a feasible solution(u‾,v‾), letS‾={j∈{1,…,n}:u‾j=1}denote the set of indices of the binary variables that are set to 1. The extra constraint(45)∑j∈S‾(1-uj)⩽Δ,is considered, where Δ is a given positive integer parameter, indicating the number of variablesuj,j∈S‾that are allowed to flip from one to zero.Many strategies were tested to combine the two heuristic approaches RH and LB. Here we present only three such strategies. In the RH, the problem is decomposed into subproblems. In each iteration the subproblem is solved to optimality. For the combined heuristics we used the same decomposition as for the RH. For all three combined strategies, for each subproblem, a constraint (45) with Δ=0 is added on the variables of the frozen period. Doing so, we allow the continuous variables to change their value within the frozen period. The strategies differ in the solution approach for each subproblem, and on whether they perform a local search in the neighborhood of the final solution or not.LB1: For each subproblem, the solver is interrupted when the first feasible solution is reached.LB2: Solve each subproblem twice. First the solver is run until either an integrality gap (gap=100×(UB−LR)/LR where UB is the best known upper bound and LR is the best known lower bound) less than or equal to 10% is achieved or a maximum time limit is reached. Then a constraint (45) with Δ=2 is added over the variables in the central period, and the subproblem is solved again until a gap of 5% is reached or the time limit is attained.LB3: Obtain a feasible solution with LB2. For a t, 0<t<T, impose a constraint (45) with Δ=0 for the period [0,T−t], and a constraint (45) with Δ=6 for the period [T−t,T]. Solve the new problem. Using the new solution impose new constraints on periods [0,T−2t], with Δ=0, and [T−2t,T], with Δ=6, and solve the problem again. This procedure is repeated until at least one of the following stopping criterion is reached: (i) time limit; (ii) maximum number of iterations without improvement; and (iii) a maximum number of iterations. This algorithm is detailed in Algorithm 2. In our experiments we used t=5days, and a maximum number of 5 iterations.LB3 heuristic// first part (obtain a feasible solution for a planning horizon T,x¯imjnv)1: T←length of the planning horizon2: T1←length of the sub-horizon3: Solve the problem for a time horizon of T1=2t periods4: Save the feasible solution,x¯imjnv, and computeS‾5: T1←T1+t6: Δ1←07: Δ2←68: Bin ← 09: whileT1⩽Tdo10: Using the port subproblem NVD(i), determine the minimum number of visits at each port i for time horizon [0,T1]11: Add constraints∑j∈S‾(1-x‾j)⩽Δ1for time horizon [0;T1−3t]12:ifBin=0 then13: Solve the problem until gap ⩽10% or time limit is reached14: Bin ← 115: else16: Add constraints∑j∈S‾(1-x‾j)⩽Δ2for time horizon [T1−3t;T1]17: Solve the problem until gap ⩽5% or time limit is reached18: Bin ← 019:T1←T1+t20: Remove all added constraints and update the model21:end if22: Update the solution,x¯imjnvandS‾23: end while//second part (improve the feasible solution,x¯imjnv)24: number of iterations ← 125:whilenumber of iterations⩽max number of iterations and solution improvesdo26: Reduce the fixed period of variables with t days: T1←T1−t27: Add constraints∑j∈S‾(1-x‾j)⩽Δ228: Update the solution,x¯imjnvandS‾29:number of iterations ← number of iterations+130: end whileFeasibility Pump (FP) was introduced by Fischetti et al. (2005) as a heuristic scheme to find a feasible solution for a given mixed integer program. Such a procedure can be useful for those problems where finding an initial solution can be an hard task. FP is a rounding scheme that generates a sequence of fractional solutions from the linear relaxation which are rounded. The heuristic stops when a feasible solution is found or other stopping criteria is reached.Here we use FP to speed-up the finding of an initial feasible solution. Although we followed the underlying ideas of FP, it was necessary to adjust this heuristic scheme to our MIRP. We focus on the problem at hand and not on the general FP scheme.In this section, and for simplicity, we denote the points in the space of variables of F-SSIRP by x. First the linear relaxation of F-SSIRP is solved and a linear solution x∗ is obtained. Then the binary variables with fractional values are rounded, and a solutionx‾is obtained. Ifx‾is feasible (x‾∈X) we stop. Otherwise, a new fractional solution is derived by finding the linear solution in the linear relaxation of X that minimizes a distance function tox‾. The process is repeated until a feasible solution is found or a predefined maximal number of iterations is reached. If the rounding procedure stops without a feasible solution, then we run the solver.Next we address the main steps of the FP algorithm in more detail.For the rounding scheme we first consider the routing variables, ximjnv. We setx¯imjnv=1whenever ximjnv>0.5 andx¯imjnv=0whenever ximjnv<∊, for small ∊. Using the routing flow conservation constraints we fix the value of the remaining routing variables. Then the remaining binary variables xoimv, wimv, zimv, yimand oimare trivially fixed. This guided rounding scheme provided better results than rounding all binary variables simultaneously or rounding all the routing variables simultaneously first. Sophisticated rounding schemes are discussed in Fischetti and Salvagnin (2009). In our experiments we use ∊=0.1.Given a 0–1 MIP solution obtained by roundingx¯we define the following distance function(46)ϕ(ximjnv,x¯imjnv)=∑v∈V∑(i,m,j,n)∈SvX|ximjnv-x¯imjnv|=∑v∈V∑(i,m,j,n)∈SvX|x¯imjnv=1(1-ximjnv)+∑v∈V∑(i,m,j,n)∈SvX|x¯imjnv=0ximjnvIfϕ(ximjnv,x¯imjnv)=0, then a feasible solution can be derived. Otherwise a new linear solution x∗ is obtained by solving the problem:min{ϕ(ximjnv,x¯imjnv):x∈XL}where XLdenotes the linear relaxation of the feasible set X of F−SSIRP.During the execution of the procedure two problems may arise: (i) the algorithm can be caught in a cycle, i.e., the same sequence is visited consecutively; and (ii) the convergence to a feasible solution is very slow.Both problems (i) and (ii) are solved by performing a restart, that is, a new 0–1 MIP solution is derived by performing a random perturbation step. This step is similar to the one given in Achterberg and Berthold (2007) and it is applied to the routing variables on the rounding scheme, that is,x¯imjnv=⌊ximjnv∗+ρ(z)⌋where z∈[0,1] is a uniform random variable and ρ(z)=2z(1−z) if z⩽0.5 and ρ(z)=1−2z(1−z) if z>0.5.To measure the convergence speed we compute the difference between the value of the distance function in two consecutive solutions. When this difference is very small (smaller than a given δ) we perform the random perturbation.Algorithm 3 describes the FP heuristic. In the computational results we set δ=0.1 and a maximum number of 50 iterations.Algorithm 3Feasibility Pump heuristic1: Relax binary variables2: Solve LP-relaxation of F-SSIRP. Let x∗ denote its optimal solution3: Obtainx¯by rounding x∗4: number of iterations ← 15: whilenumber of iterations ⩽max number of iterations andϕ(ximjnv,x¯imjnv)>0do6: Solve the LP:x∗←argmin{ϕ(ximjnv,x¯imjnv):x∈XL}7: Obtainx¯by rounding x∗8:ifϕ(x¯imjnv,ximjnv∗)<δthen9: Apply the random perturbation step10:end if11:number of iterations←number of iterations+112: end whileIn this section we report the computational results when testing different hybrid heuristic approaches.All computations were performed using the optimization software Xpress Optimizer Version 20.00.05 with Xpress Mosel Version 3.0.0, on a computer with processor Intel Core 2 Duo 2.2gegahertz and with 4gigabyte of RAM.We tested 12 real instances from a company in Cape Verde with 2 different ships, 7 ports and 4 products.First we report a summary of results that testify the model choices. These tests were run for periods of 15days. Then we report the results from the tests conducted to compare several hybrid strategies for periods of 2 and 6months.First we consider the use of port subproblems to estimate the minimum number of port visits. Fig. 4, on the left, shows the minimum number of visits calculated using the formula (35), calculated using the subproblems, and the number of visits in the optimal solution for the 12 instances tested. On the right, the figure depicts the integrality gap (GAP), given by GAP=100×(OPT−LR)/OPT where OPT is the optimal value, obtained using the Xpress optimizer, and LR is the value of the linear relaxation. We consider the cases: “initial” when no minimum number of visits is imposed, “formula” when the minimum is obtained using (35), “subproblem” when the minimum is obtained using port subproblems and “exact” when we consider the minimum equal to the number of visits in the optimal solution.In average, the initial integrality gap is 26.7%, drops to 24.1% using Eq. (35), and drops to 17.7% using subproblems. If the exact value in the optimal solution is used, the average gap is 13.2%.Table 1summarizes the integrality gaps when model F-SSIRP is used. TT means that the time constraints were tightened, SP means that the minimum number of visits was estimated using the port subproblem. IK indicates that the Integer Knapsack inequalities are added, and C means that the clique inequalities are added.In Table 2we present the average solutions times, the number of B&B nodes, and the number of cuts added in each case. We can see that although the clique inequalities do not improve the integrality gap significantly, they are important with regard to the reduction in number of B&B nodes and running time.In this section we report experiments carried out for comparing the hybrid heuristics in terms of running time, integrality gap and number of B&B nodes over two planning horizons: 2 and 6months. Since the optimal solutions could not be obtained for these time horizons, the integrality gap (GAP) is computed as GAP=100×(UB−LR)/LR where UB is the value obtained by the heuristic and LR is the value of the linear relaxation. The value LR is obtained using the port subproblems to estimate the number of visits, and including IK and C inequalities. These model strengthening techniques are used whenever the optimization of the model F-SSIRP occurs as a subproblem embedded in a hybrid heuristic. The valid inequalities are added only at the root node.For a time horizon of 2months, Table 3shows the performance of the RH heuristic, LB1 and LB1 combined with FP. It reports the time in seconds, the number of B&B and the integrality gap for each heuristic. The performance of LB2 and LB2 combined with FP is given in Table 4, and the performance of LB3 and LB3 combined with FP is given in Table 5.We can see that LB heuristics combined with FP are, in average, faster than the LB heuristics which are in turn faster than the RH heuristic. The use of FP is more relevant on those harder instances, where the solver is not able to find good initial feasible solutions quickly. As expected, LB1 is faster than LB2, and LB2 is faster than LB3. However, the quality of the solutions obtained varies in the opposite direction. The most sophisticated heuristic, LB3 combined with FP, provides solutions with an integrality gap which is, in average, half of the integrality gap of the usual RH heuristic. The running time is almost a third of the running time of the RH heuristic.Tables 6 and 7give the computational results for 6months for heuristics RH, LB1, and LB2 and LB3 combined FP. The behavior of these algorithms is similar to the case of 2months. Only the gaps are higher. However, as this gap is computed by use of the linear relaxation value we do not know whether this increase results from a deterioration of the upper bound, the lower bound, or both.To test the heuristic approaches that performed best on the larger instances, we created two artificial future scenarios where the demands as well as the number of ships are increased. One scenario with three ships and demands that are 1.5 times the current demands, and another scenario with four ships and double demands. Each scenario is identified by the number of ships (∣V∣=3 and ∣V∣=4). We opted not to reduce the length of each sub horizon. All the tested heuristics run within a reasonable computational time effort for 2months. For 6months, RH, LB2 and LB3 heuristics were too time consuming.In Table 8we give the computational results. For ∣V∣=3 we used a variant of LB2, where only the first run (until a gap of 10%) is performed, combined with FP. For ∣V∣=4 we used LB1 combined with FP. We could not solve most of the linear relaxations within 1day time limit. To compute the lower bound we computed the linear relaxation of the model obtained from F-SSIRP by removing all time and inventory constraints, and with the additional cuts discussed in Section 4. Additionally we imposed, for each port i and each product k such that Jik=−1, the constraint∑v∈V∑m=1μi̲qimvk⩾T×Rik+S̲ik-Sik0.

@&#CONCLUSIONS@&#
We have presented a mathematical model for the short sea inventory routing problem. This model is tightened with valid inequalities and an estimation of the minimum number of visits to each port by solving some port subproblems. In particular we introduced new clique inequalities that can be used to tighten continuous time maritime inventory routing models.Given the long time horizons, we propose and compare different strategies of combining three well-known heuristics that use the mathematical model as a black-box. The Rolling Horizon heuristic is used to decompose the original problem into smaller and more tractable problems, the Feasibility Pump heuristic is used to find initial solutions for MIP problems, and the Local Branching heuristic is used to improve feasible solutions.The best strategy tested combines all the three heuristics, and allowed us to obtain solutions whose integrality gap is in average half of the integrality gap obtained using the rolling horizon heuristic alone. We provided computational results for time horizons up to 6months.In order to evaluate the quality of the solutions obtained by the hybrid procedures, an important future direction of research is to investigate approaches to derive tight lower bounds, specially for long time horizons where the size of the linear relaxation model is quite large.