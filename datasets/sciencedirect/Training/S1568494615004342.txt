@&#MAIN-TITLE@&#
A hybrid artificial bee colony for a nurse rostering problem

@&#HIGHLIGHTS@&#
Proposed a hybrid artificial bee colony (HABC) algorithm for a nurse rostering problem (NRP).Compared the HABC results with other eleven comparative methods using INRC2010 dataset.Showed that HABC algorithm performs well.This research showed that a well-designed hybrid technique is a competitive alternative for solving NRP.

@&#KEYPHRASES@&#
Metaheuristics,Rostering,Artificial bee colony,Nurse rostering problem,Hill climbing,

@&#ABSTRACT@&#
The nurse rostering problem (NRP) is a combinatorial optimization problem tackled by assigning a set of shifts to a set of nurses, each has specific skills and work contract, to a predefined rostering period according to a set constraints. The metaheuristics are the most successful methods for tackling this problem. This paper proposes a metaheuristic technique called a hybrid artificial bee colony (HABC) for NRP. In HABC, the process of the employed bee operator is replaced with the hill climbing optimizer (HCO) to empower its exploitation capability and the usage of HCO is controlled by hill climbing rate (HCR) parameter. The performance of the proposed HABC is evaluated using the standard dataset published in the first international nurse rostering competition 2010 (INRC2010). This dataset consists of 69 instances which reflect this problem in many real-world cases that are varied in size and complexity. The experimental results of studying the effect of HCO using different value of HCR show that the HCO has a great impact on the performance of HABC. In addition, a comparative evaluation of HABC is carried out against other eleven methods that worked on INRC2010 dataset. The comparative results show that the proposed algorithm achieved two new best results for two problem instances, 35 best published results out of 69 instances as achieved by other comparative methods, and comparable results in the remaining instances of INRC2010 dataset.

@&#INTRODUCTION@&#
Nurse rostering problem (NRP) involves assigning a set of nurses with different working skills and working contracts to a set of shifts of different types, taking into account a set of hard and soft constraints. The hard constraint satisfaction is mandatory in any roster to be feasible while the violation of the soft constraints is allowable but it should be minimize as much as possible. Normally, the satisfaction of some soft constraints might be lead to violate others. Therefore, in most cases, finding a global optimal solution is almost impossible [1]. Since NRP is among the most prevalent problems that are being tackle in the domain of automated timetabling and operations research, researchers have proposed several algorithmic techniques over the last few decades [2–4]. Some of these techniques are the mathematical programming, graph-based heuristics, metaheuristic-based method and hyper-heuristics.In particular, the metaheuristic-based method is normally divided into local-based search methods such as Tabu Search [5,6], Simulated Annealing [7], Variable Neighbourhood Structure [8–10] and population-based methods which include Ant Colony optimization algorithm [11], Electromagnetic algorithm [12], Genetic Algorithm [13–15], Scatter Search [16]. Note that the major concern of local search-based methods is to exploit the problem search space whereas population-based methods focus more on the exploration [17]. Exploration is the process of visiting the not-yet-visited search space regions, while exploitation is the process of makes use of accumulative search [18]. Due to the nature of the NRP search space, the researchers in this domain introduced a more robust solution method of solving this problem, named hybrid approaches. This hybrid approaches involve hybridizing the local-based search method within the population-based method in order to strike a balance between exploration and exploitation [19]. In these approaches, the local search-based methods work as a local exploiter to find the local optima at each region of the search, while the population-based methods work as a global explorer to diversify the search. The main advantage obtained from the usage of the hybrid method is that the search space of the solutions in the population is reduced to the subspace of local optima. In [20], the genetic algorithm (GA) is combined with Simulated Annealing hyper-heuristic as a local search procedure to tackle this problem. In another study, the NRP is tackled with the hybridization of the steepest descent improvement within GA [21]. Similarity, the GA is integrated with hill climbing optimizer (HCO) to solve this problem [22].In the recent times, a new swarm intelligence population-based metaheuristic algorithm based on the foraging behaviour of honey bees, namely artificial bee colony algorithm (ABC), has been initially proposed by Karaboga in [23]. ABC is exemplified as a simple idea which is very easy to implement with only a few parameters and high degree computational efficiency. Based on these advantages, ABC has successfully been used to tackle numerous optimization problems [24,25]. In particular, it has been successfully been adapted and hybridized with local search-based methods to empower its exploitation capability. Bolaji et al. [26,27] proposed a hybrid approach combining ABC with the HCO for the university timetabling problems. In another research, the ABC is hybridized with a greedy heuristic and a local search for the quadratic knapsack problem [28]. Furthermore, the tabu search algorithm is combined with three operators of ABC for solving the flexible job shop scheduling problems [29].Therefore, this paper presents a new hybrid algorithm that hybridized HCO within the operators of the ABC for NRP and henceforth called HABC. In HABC, the functionality of the employed bee operator is replaced by HCO to empower its exploitation properties and the usage of HCO is controlled by hill climbing rate (HCR) parameter. The performance of the proposed method is evaluated using the standard dataset published in the first international nurse rostering competition (INRC2010) [30]. Experimental results and comparisons demonstrate the effectiveness of the proposed algorithm for NRP.In Section 2 the description of the NRP is presented, while the presentation of the original ABC is given in Section 3, this is followed by the proposed approach as described with detailed information in Section 4. Next, the experimental results are presented in Section 5. Finally, conclusions are considered in Section 6.The NRP involves the allocation of specific number of nurses to a set of shift types for a predefined rostering period. Shift type is the term used for representing a time frame for which a nurse with specific skill is needed. The solution roster is subjected to two types of constraints: hard and soft. The problem considered in this research includes two hard constraints (i.e., H1, H2 as shown in Table 1) that must be satisfied. The two hard constraints including that the roster should provide a specific number of nurses for each shift and a nurse can work at only one shift per day. The other type of constraints (i.e., S1–S13 as shown in Table 1) are considered as soft and in which their violations must be minimized as much as possible. The roster is feasible if it satisfies all hard constraints and its quality is determined by calculating the penalty of violating the soft constraints. The basic objective is to find a feasible roster with a good enough quality.Formally, the problem instances include a setN={n0, n1, …, nm−1} of nurses, each has a specific skill from the set of skill categoriesK={k0, k1, …, kq−1}. Each nurse has a specific work contract from the set of contractsC= {c0, c1, …,cw−1}. A setD= {d0, d1, …, db−1} of days represent the rostering period, and each day split to a setS= {s0, s1, …, sr−1} of shift types. It should be noted that the mathematical formulation of the hard and soft constraints can be seen in [31,32].The nurse roster is evaluated using the objective function formalized in Eq. (1) that adds up the penalty of soft constraint violations in a feasible roster.(1)minf(x)=∑s=113cs.gs(x).Note that s refers to the index of the soft constraint, csrefers to the penalty weight for the violation of the soft constraint s, and gs(x) is the total number of violations of the soft constraint s in solution rosterx.Fig. 1shows illustrative example of a feasible nurse roster, an instance of allocating a six nurses to a set of four shifts over 28 days of rostering period. Each row represents a schedule of each nurse, while each column represents a day. The content in a cell represents the shift type allocated to a nurse. It should be noted that each nurse allocated to one shift at most per day, where the number of shifts assigned to each nurse during the rostering period should be within the range of shifts agreed in his/her contract.The problem instances in the INRC2010 dataset were classified into three tracks: sprint, medium, and long instances that are varying in size and complexity. Each track of this competition is grouped into four types in terms of their publication time in the competition: early, late, hidden, and hint. The sprint track instances are divided into 10 early, 10 hidden, 10 late, and 3 hint. However, the medium and long tracks are divided into 5 early, 5 hidden, 5 late, and 3 hint. A brief summary of the characteristics of the INRC2010 dataset is fully given in Table 2. This table includes the number of nurses, the nurse skills, the shift types, the work contracts, the number of unwanted patterns, and the existence of day-off and shifts-off nurse preferences.For example, Long_early05 instance refers to a ward of hospital with 49 nurses. These nurses are grouped into two types of skills: nurse and head-nurse, and three types of work contracts. Each working day is divided into five types of shifts (i.e., day, night, early, late, and day-head). Furthermore, three types of unwanted patterns should be avoided during the construction process of roster. In contrast, the day-off and shift-off nurse preferences should be respected as much as possible in the roster.The NRP has been widely studied by operational research and artificial intelligence research communities during the past five decades [2–4]. Several methods which have been proposed to solve the NRP using the INRC2010 dataset shall be briefly review as follows:Valouxis et al. [33], the winner of the challenge, utilized the Integer Programming with local search procedures to solve NRP using INRC2010 dataset. Their solution method consists of two phases: In the first phase, the different nurses are allocated to the different working days, while in the second phase the shifts are assigned to the nurses. For medium and long track instances, they employed three local search procedures to enhance the exploitation capability of their method in the first phase. These three local search procedure are (i) rescheduling one day, (ii) rescheduling two days, and (iii) reshuffling the shifts among nurses.Bilgin et al. [34], combined hyper-heuristic with a greedy shuffle heuristic for tackling the problem. The hyper-heuristic is initially adapted to generate a feasible roster that satisfied the soft constraints as much as possible. Then the greedy shuffle heuristic is used for further improvements. In addition, the authors provided the computational results of Integer Linear Programming using IBM CPLEX.In another study, Burke and Curtois [35], adapted ejection chain-based method called Variable Depth Search (VDS) and branch and price method separately for solving the problem. The experimental results show that the branch and price algorithm outperforms the VDS especially for medium and long track instances.Nonobe [36], modeled NRP as Constraint Optimization Problem, and then used the “COP solver” based on tabu search algorithm. It should be noted that their method had previously been used to solve other timetabling problems [37].Similarly, the adaptation of tabu search is investigated by Lü and Hao [38] to solve the NRP. The proposed solution method consist of two phases: (i) random heuristic is used to construct a feasible roster by allocating different nurses to the different shifts randomly. And (ii) the tabu search algorithm is used to improve the feasible roster locally with the aid of two neighbourhood structures (i.e., move and swap).Santos et al. [39], presented Integer Programming technique to tackle the problem by decomposing the problem into subproblems. The violations of these subproblems are handled as must as possible to speed up the improvement of feasible solutions. Later on, the Variable Neighborhood Descent (VND) is used for further improvements. Note that the local search procedures used is similar to the one employed in [33].The hybridization of harmony search algorithm with HCO is presented by Awadallah et al. [40]. The HCO is combined within the harmony search algorithm to improve the solution locally till the local optima is obtained. It is noteworthy that some of the local search procedures in the HCO were used for the first time in the nurse rostering domain. Finally, the harmony search hyper-heuristic is proposed by Anwar et al. [41] to solve this problem with promising results.As shown in the literature, none of these methods has been able to achieved exact solution due to the nature of the NRP search space. Clearly, the research in this domain is still active and presentation of a new method maybe able to achieve better results.Artificial bee colony algorithm proposed in [23], is recently emerged as one of most popular nature-inspired algorithms which has bee utilized for tackling practical optimization problems [24,25]. This algorithm carry out a search by evolving a population of food sources (i.e. solutions) with the aid of nondeterministic operators (e.g., employed, onlooker and scout), by iteratively improving the solutions using these operators until some criterion of convergence has been achieved. Studies have shown that ABC algorithm has offer significant advantages such as simplicity and ease of implementation over other traditional algorithms when applied to tackle many practical optimization problems [24,25,42]. The colony of ABC comprises three groups of bees: employed bees, onlookers and scouts. A bee on the dance floor waiting for dance behaviour of employed bee in order to choose a desired food source is referred to as onlooker while the one sharing the information of the food source visited by it before on the dance area is called employed bee. The other category of bee that carries out random search for discovering new sources is called scout bee. The position of a food source is given as a possible position of the solution to the optimization problem, furthermore, the nectar quantity of a food source corresponds to the fitness (i.e., quality) of the associated food source.In ABC algorithm, the first part of the colony comprises employed bees whereas the second part contains the onlookers. The number of the employed bees or the onlooker bees is equal to the number of food sources (i.e. the solutions) in the food source memory (i.e., population). At the initial stage, the ABC generates initial population of food source randomly where the population of the solutions is subjected to repeat search processes with the aid of three operators (i.e. employed, onlooker and scout bees). An employed bee modifies the position of the solution in her memory based on the local information and calculates the nectar quality of the new solution. Provided that, the quality of the new solution is better than that of the previous one, then it memorizes the position of the new solution. If not, the position of the previous one remains in its memory. After the search process is completed by all employed bees. Then the nectar and position information of all food sources are shared with the onlooker bee on the dance area. An onlooker bee calculates the nectar information taken from all employed bees and selects a solution with higher probability. Using similar strategy as in the case of the employed bee, the onlooker modifies the position of the solution in her memory and evaluates the nectar quality of the solution. If better than that of the previous one, the new position is memorized by the bee and forgets the old one. A new solution is generated randomly by a scout bee to replace a food source whose nectar quality is abandoned by the onlooker bees. The search process of the ABC is given in Algorithm 1 as follows:Algorithm 1Schematic pseudo-code of ABC procedureInitialization of the ABC and problem parametersInitialization of the food source memoryrepeatSend the employed bees to the food sources.Send the onlooker bees to select a food source.Send the scout bees to search possible new food sources.Memorize the best food source.until(termination criterion are met)The description of the detailed search process of the ABC algorithm is given in [25]. It is worthy of mentioning that other version of ABC have been recently proposed in which the scout bee phase of the old version of ABC which was based on generations is modified to count fitness evaluations consumed [43]. However, the research in this study is based on the old version of ABC.Note that ABC algorithm as a nature-inspired algorithm has some similarity with ant colony optimization because both algorithms exchange information on the quality of their solutions through a memory structure [44]. However, ant colony system shares their information through the pheromone whereas in ABC, the employed bee communicates their information with other bees through the use of waggle dance in the dance floor [44].This section provides the detailed descriptions of hybridization of HCO within employed bees operator of the ABC algorithm for NRP. First of all, the description of original ABC as adapted for the NRP shall be discussed, this is followed by hybridization of ABC algorithm.In this section, the ABC algorithm is adapted for tackling the NRP in which different neighbourhood structures are integrated with the operators of the ABC to cope with the nature of NRP search space.In ABC, any NRP solution (i.e. roster) is represented as a vector of allocationsx=(x1, x2, …, xN), of which each allocation xitakes three values (nurse number, day number, shift number). For instance, letx=((1, 2, 1), (1, 3, 2), …, (5, 5, 4)) be a feasible roster. Then, this roster is interpreted by the ABC algorithm as follows: the allocation x1=(1, 2, 1) means nurse n1 is assigned to shift s1 at day d2. The second allocation x2=(1, 3, 2) means to nurse n1 assigned to shift s2 at day d3, and so on. The six main procedural steps of ABC algorithm for tackling NRP are described bellow and Algorithm 2 shows the pseudo-code.Algorithm 2ABC algorithm for NRPSTEP IInitialize the parameters of NRP and HABC1: Set the NRP parameters drawn from the INRC2010 dataset.2: Set the HABC parameters (SN, MCN, limit).3: Define the roster representation and utilize the objective function.STEP IIInitialization of the Food Source Memory1: fors = 1 to SNdo2:   xs← heuristic ordering strategy3:   fs= f(xs)4: end for5: Sorts(x1, x2, …, xSN),where f1≤f2≤⋯≤fSNSTEP IIISend the Employed Bees to the Food Sources1: fors = 1 to SNdo2:   r = rand(1, 4)3:xs′= Nr(xs)N1 = MNS(), N2 = SNS(), N3 = SPS(), N4 = TRM()4:   if(f(xs′)< fs) then5:     xs=xs′6:     fs=f(xs′)7:     trials= 08:   else9:     trials++10:   end if11: end forSTEP IVSend the Onlooker Bees to the Food Sources1: r = rand(0, 1)2: found = false3: i = 1, sum_prob=04: while(i ≤ SN AND NOT (found)) do5:   sum_prob = sum_prob + pi6:   if (sum_prob ≥ r) then7:     s = i8:     found = true9:   else10:     i++11:   end if12: end while13: r = rand(1, 4)14:xs′= Nr(xs)15: if(f(xs′)< fs) then16:   xs=xs′17:   fs=f(xs′)18:   trials= 019: else20:   trials++21: end ifSTEP VSend the Scout to Search for Possible New Food Sources1: s = rand(1, SN)2: if (trials≥ limit) then3:   xs= random(xs)4:   fs= f(xs)5:   trials=06: end ifSTEP VIStopping condition1: while (time ≤ MCN) do2:   Repeat STEP III to STEP V3: end whileSTEP I: Initialization of ABC and NRP parameters. In this step, the three control parameters of the ABC algorithm which are needed for tackling the NRP are initialized. These parameters include solution number (SN) which is the number of solutions (i.e., food sources) in the population and similar to the population size in GA; maximum cycle number (MCN) that corresponds to the maximum number of iterations; and limit that is responsible for the abandonment of solution, whenever it is not improved for certain number of iterations and basically it is utilized to diversify the search. Similarly, the NRP parameters are initiated by extracting them from the problem instances of the INRC2010 dataset such as the set of nurses, the set of skill categories, the set of shift types, the scheduling period, the set of work contracts, matrix of weekly nurse demand, matrices of nurses preferences (i.e., shift-off, shift-on, day-off, and day-on), and eventually the set of unwanted patterns. The job specification such as maximum/minimum number of assignments over rostering period, maximum/minimum number of consecutive working days, maximum/minimum number of consecutive free days, the number of days-off after a series of night shifts, maximum number of consecutive working weekends, and maximum working weekend in four weeks. It should be noted that contents of the problem instances are modified to number format for the initialization of the NRP parameters.STEP II: Initialization of the food source memory. The food source memory (FSM) is the memory allocation spaces that comprises set of feasible food source (i.e., rosters) as determined by SN as shown in Eq. (2). In this step, the set of feasible rosters are generated using the heuristic ordering strategy and stored in ascending order in FSM with respect to the objective function values that is f(x1)≤f(x2)≤⋯≤f(xSN). The heuristic ordering is utilized to sorts the different shifts in ascending order based on the level of difficulty. Note that the required nurses per week (i.e., weekly nurses demand) for the different shifts is used as a difficulty factor. The shift with the lesser required nurses is the most difficult to be assigned and thus the nurses with shift are allocated first before the other. Later, the nurses are assigned to the second lesser weekly nurses demand till the last shift.(2)FSM=x11x12⋯x1Nx21x22⋯x2N⋮⋮⋱⋮xSN1xSN2⋯xSNNf(x1)f(x2)⋮f(xSN)Table 3provides an illustrative example of different shifts arrangement using the heuristic ordering strategy. In this table, the summation of the weekly nurse demand for each shift is available in the second-to-last column. The shift with the lesser value in the sum of demand column is ranked first by the heuristic ordering strategy (see the last column in Table 3) and so on. In the construction process, the shift with the prior rank is assigned to the different nurses first, followed by the shift with the second rank, until the shift with the last rank is assigned. It should be noted that the shift is eligible to assign for any nurse if the hard constraints are preserved.STEP III: Send the employed bees to the food sources. In this step, the set of feasible rosters are sequentially selected by the employed bee operator from the FSM in which each roster are exploited using the set of neighbourhood structures in order to produce a new set of neighbouring rosters (i.e., new food sources). The neighbourhood structures used by employed bee operator are:•Move Neighbourhood Structure (i.e., MNS()): This neighbourhood is used to move the shift of current nurse to another nurse selected randomly while maintaining feasibility. Fig. 2shows an example of this procedure, where the early shift E is released from nurse n1 and reassigned to the nurse n4.Swap Neighbourhood Structure (i.e., SNS()): In this neighbourhood, the shift allocated to a specific nurse is exchanged with the shift of another nurse while maintaining feasibility. Note that both nurses are assign to two different shifts on the same day. An example of this procedure is given in Fig. 3, where the night shift N of nurse n1 is exchanged with the early shift E of the nurse n3.Swap Pattern of Shifts (i.e., SPS()): This neighbourhood is used to exchange a pattern of shifts among two nurses, if the feasibility is maintained. Fig. 4shows an example of this procedure, where the two consecutive shifts for nurse n3 are exchanged with another two consecutive shifts of the nurse n5.Token Ring Move (i.e., TRM()): If the shift of a specific nurse is violated the soft constraint S7 (i.e. partial weekend), then this shift is moved to another nurse who has incomplete weekend. Furthermore, If the complete weekend is not identical (i.e. soft constraint S8), then the shift is exchanged with another nurse who has shift on the same day. Fig. 5shows an example of this procedure, where the early shift E of nurse n5 is moved to the nurse n3 to solve the violations of the soft constraint S7 (i.e. complete weekend). Furthermore, the early shift E of nurse n3 on Sunday is exchanged with the day shift D of the nurse n1 on the same day to solve the violation of the soft constraint S8 (i.e. identical weekend).The quality of each new rosterf(xs′)is calculated. If it is better than the quality of the old roster f(xs), then it replaces the old roster in FSM. The detailed of this process is given in Algorithm 2.STEP IV: Send the Onlooker Bees to the Food Sources. Subsequent to the completion exploitation of the employed bee phase, the employed bees share the information of exploited food sources (i.e. rosters) with onlooker bee. The onlooker bee decides to follow certain employed bee and exploits their corresponding food source randomly using the set of neighbourhood structures discussed above based on proportional selection probability as shown in Eq. (3)(3)pi=f(xi)∑k=1SNf(xk)Note that the∑i=1SNpiis unity.Thus, the roster with higher selection probability may be selected and adjusted to its neighbourhood using the same strategy as the employed bee. The quality of the new roster is calculated and if it is better, then it replaces the old one in FSM.STEP V: Send the Scout to Search for Possible New Food Sources. Owing to continuous exploitation, some food sources may finally be exhausted in which they might be abandoned by its corresponding employed bee. Thus, the associated employed bee turns to a scout bee and explores the roster search space randomly for a possible new food source to replace the abandoned one. Memorize the quality of the best roster (f(xbest) = f(x1)) found so far in FSM.STEP IV: Stopping condition. Repeat steps III to V until a stop condition is achieved which is originally determined by MCN value.In this section, the proposed hybrid algorithm based on integration of HCO within the employed operator of the ABC to solve NRP is presented. Firstly, in next section, the description of HCO is briefly given, which is followed by its integration with the employed bee operator of the original ABC.Hill climbing optimizer is one of the simplest search techniques which belongs to the category of local search-based method. It is most intuitive type of search which evaluates a set of possible solutions in the neighbourhood associated with a move. The process of HCO begins with a random generated solution and its quality is evaluated. The generated solution is iteratively improved by making small changes and its quality is re-evaluated. The old solution is replaced with the new one if its has a better or equal quality. This process is repeated until a termination criterion is reached. In this paper, the proposed hybrid technique which based on integration of HCO within the employed bee operator of ABC takes initiative from the memetic algorithms that have been mostly been employed in tackling numerous combinatorial optimization problems. Literature have shown that hybridization between local search-based methods like HCO with population-based methods such as ABC algorithm could be effective, though it may be computational expensive.In this paper, the hybridization of ABC algorithm with HCO is proposed. The integration involves replacing the process of the employed bee operator by HCO in order to optimize the rosters (i.e. food sources) locally to the maximum limit. The concept of this hybridization is adapted from our previous works on the ABC to the university timetabling problem [26] in which of the employed bee operator is replaced by the HCO in its operation to enhance the search intensification. Note that the feasibility of the solution search space is taken into consideration during the search process.The HABC begins with a set of feasible rosters stored in FSM at initial stage (see STEP II of Algorithm 2). Iteratively, each employed bee utilizes the HCO to find the local optima of some rosters stored in FSM controlled by the hill climbing rater (HCR) parameter. The HCR with higher value leads to higher exploitation capability and thus the computational time increased. It is noteworthy that the HCO randomly utilize the four neighbourhood structures (i.e., MNS(), SNS(), SPS(), and TRM()) discussed in Section 4.1 to optimize the rosters in FSM. Algorithm 3 shows the new process of the employed bee operator in HABC, where this pseudo-code is replaced the old one in Algorithm 2. The other steps of the ABC are used as discussed in the original version of ABC presented in Section 4.1.Algorithm 3Employed bee operator of the HABC1: fors = 1 to SNfor2:     if (U(0, 1)≤HCR) then3:       while (Local optima is not reached) do4:       r = rand(1, 4)5:xs′= Nr(xs)N1 = MNS(), N2 = SNS(), N3 = SPS(), N4 = TRM()6:       if(f(xs′)< fs) then7:         xs=xs′8:         fs=f(xs′)9:       end if10:     end while11:   end if12: end forIn this section, the performance of the proposed HABC for NRP is evaluated using the INRC2010 dataset released by Haspeslagh et al. [30] which is available at INRC2010 website.11https://www.kuleuven-kulak.be/nrpcompetition.A brief summary of the characteristics of the INRC2010 dataset is fully given in Table 2.It is worthy to note that the proposed method is programmed using Microsoft Visual C++ version 6.0 under windows Vista. The experiments presented here ran on an Intel Machine with Core™processor 2.66GHz, and 4GB RAM.

@&#CONCLUSIONS@&#
