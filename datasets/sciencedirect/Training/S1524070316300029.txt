@&#MAIN-TITLE@&#
Building binary orientation octree for an arbitrary scattered point set

@&#HIGHLIGHTS@&#
We extend the binary orientation tree (BOT) data structure by extending the ‘in/out’ labels to ‘front/back/NA’ labels.Apply a global propagation process to get the consistent labels.It’s useful for both open and closed point sets.

@&#KEYPHRASES@&#
Incomplete point cloud,Surface reconstruction,Binary orientation tree,Label propagation,

@&#ABSTRACT@&#
The binary orientation tree (BOT), proposed in [Chen, Y.-L., Chen, B.-Y., Lai, S.-H., and Nishita, T. (2010). Binary orientation trees for volume and surface reconstruction from unoriented point clouds. Comput. Graph. Forum, 29(7), 2011–2019.], is a useful spatial hierarchical data structure for geometric processing such as 3D reconstruction and implicit surface approximation from an input point set. BOT is an octree in which all the vertices of the leaf nodes in the tree are tagged with an ‘in/out’ label based on their spatial relationship to the underlying surface enclosed by the octree. Unfortunately, such a data structure in [Chen, Y.-L., Chen, B.-Y., Lai, S.-H., and Nishita, T. (2010). Binary orientation trees for volume and surface reconstruction from unoriented point clouds. Comput. Graph. Forum, 29(7), 2011–2019.] is only valid for watertight surfaces, which restricts its application. In this paper, we extend the ‘in/out’ relationship to ‘front/back/NA’ relationship to either a closed or an open surface, and propose a new method to build such a spatial data structure from a given arbitrary point set. We first classify the edges of the leaf nodes into two different categories based on whether their two end points are in the same side of the surface or not, and attach respective labels to the edges accordingly. A global propagation process is then applied to get the consistent labels of those end points that are in the same side of the surface. Experiments show that our BOT building method is much more robust, efficient and applicable to various input compared to existing methods, and the applications of BOT when doing RBF reconstructions and envelope surface computations of given 3D objects are shown in the experimental part.

@&#INTRODUCTION@&#
Spatial hierarchical structures, such as the octree and the Binary Space Partition (BSP) tree, play an important role in computer graphics, geometric modelling, geometric processing, etc, as they provide an efficient way for analysing data sets locally and iteratively. Octrees were proposed by Jackins and Tanimoto [11], and have been extensively used to process scattered point cloud in the last decade. Algorithms about building an octree of a given scattered point set abound, and octrees are then used for 3D reconstruction Cheng et al. [7], Kazhdan et al. [15,16]. However, the information in octrees is not enough for many tasks such as reconstructing surfaces with sharp features. Kobbelt et al. [17] assigned directed distances to leaf node vertices of the octree, and Ju et al. [13] extended the octree by attaching hermite data to each edge of the octree to get sharp features when performing reconstruction using the octree, Liu et al. [19] then combined hermite data and octree to do manifold-guaranteed out-of-core simplification of large meshes.Considering the importance of awareness of the orientation of the underlying surface for a scattered point cloud, Chen et al. [5] proposed the BOT, by tagging each vertex of a leaf node in the octree with an ‘in/out’ label to classify the grid points of the octree into two disjoint inside/outside groups, and it was proved that such a data structure improved both quality and efficiency in 3D reconstruction, consistent normal computation and implicit surface approximation from scattered points. However, the method only works for closed surfaces represented by a well captured point set due to its use of space carving, which relies on the direct visibility detection for point set in Katz et al. [14], to determine the side a grid point belongs to. This is a big disadvantage since large holes often occur in deep, hard to reach cavities of the object, or places where object parts are too close to each other. These impose serious adverse effects on the quality of the captured point set and subsequently affect the quality of reconstruction, particularly in terms of its topology. To remedy this problem, a new method was proposed in Chen et al. [6] by the same group of the authors in Chen et al. [5], for getting two mutually invisible sets lying in the opposite sides of underlying surface by doing bipartite Voronoi poles classification. The method could deal with small holes on the surface of a shape, but it still has the limitation that the point cloud must explicitly separate the ambient space into two opposite sides, which implies that the method is still sensitive to big size holes. Further, both of the two methods proposed by  Chen et al. [5] and  Chen et al. [6] demand to find a set of viewpoints from one of which every point in the input is visible. This leads to a very large computational consumption and non-robustness when there are loops or cavities on the surface of a shape, and it will be worse when scattered points are non-uniformly distributed. Several different approaches have been investigated to solve the problem. For instance, in  Carr et al. [4] dipole off-surface points were created by offsetting the input points along their estimated normal directions on either side of the underlying surface. The method needs estimates of normal directions which tends to be unreliable for incomplete point sets. Shalom et al. [22] proposed a cone carving method to carve out the exterior space of a shape to acquire an accurate measurement of distance to surface for surfaces even with the presence of large holes or missing data. However, the high computational complexity is its main issue.In this paper, what we want to do is to extend the BOT for either closed surface or so called open surface, which is maybe the underlying surface of a point set with big holes or missing data, or a surface of a shape with boundaries, such as a pipe in Fig. 5(a). The difficulty encountering in building such a BOT is that the ‘in/out’ relationship of a point to an open surface is inapplicable, we must find a new representation of the space relationship in BOT. Furthermore, due to lack of the intrinsic inside/outside subspaces and its orientation for an open surface, even when we can test whether two points are in the same side or in the opposite side of the surface, we still don’t know which side each of them belongs to. This leads to another problem about how to classify the grid points of the octree into two disjoint groups lying on different sides of the open surface.To solve the problems above, we extend the ‘in/out’ relationship in the BOT to ‘front/back/NA’, in which points labelled with ‘front’ and ‘back’ are just relative position to the surface, means those vertices lying in the same of opposite sides of the surface. The points labelled with ‘NA’ are those non-applicable points for determining which side they are located. It is meaningful since we define the ‘NA’ points as the grid points of empty cells in the octree, they are far away from the underlying surface of the input, hence few applications use the information. The three kinds vertices are depicted in this paper by red, green and blue disks respectively, for instance, as shown in Fig. 1(e). Based on the extension of the definition of BOT, we develop an approach based on label propagation instead of space carving to differentiate the grid points of the octree into two disjoint groups lying on different sides of the given surface.In summary, the main contributions of the paper are as follows: first we devise a unified method to build a BOT, which is robust for various input, either an open or closed surface represented by a point cloud, complete or incomplete, uniformly distributed or not. Second, we propose a label propagation method on octree, to achieve a label consistent algorithm for those grid points in the same side of the surface with high efficiency and robustness compared to the previous methods. The data structure we build can facilitate implicit surface approximation and envelope computation, as we shown in the experimental results.The rest of the paper is organized as follows: firstly we review some related work in Section 2, then illustrate our method in Section 3. Sections 4 and 5 demonstrates the experimental results and some applications of our BOT respectively, finally we conclude this paper in Section 6.

@&#CONCLUSIONS@&#
