@&#MAIN-TITLE@&#
A cell evolution method for reliability-based design optimization

@&#HIGHLIGHTS@&#
A novel and effective cell evolution method for RBDO has been proposed.A sampling method is proposed to generate template cells with target reliability indices.A real-coded genetic algorithm is developed to evolve the reliability test cells.A concise parameter selection guideline is provided.New observations and findings on the dramatic change of reliable solutions are reported.

@&#KEYPHRASES@&#
Reliability-based design optimization (RBDO),Most probable points (MPPs),Cell evolution method,Real-coded genetic algorithm (RCGA),Sobol's quasi-random sequence,Spherical parameterization technique,

@&#ABSTRACT@&#
The reliability-based design optimization (RBDO) presents to be a systematic and powerful approach for process designs under uncertainties. The traditional double-loop methods for solving RBDO problems can be computationally inefficient because the inner reliability analysis loop has to be iteratively performed for each probabilistic constraint. To solve RBDOs in an alternative and more effective way, Deb et al. [1] proposed recently the use of evolutionary algorithms with an incorporated fastPMA. Since the imbedded fastPMA needs the gradient calculations and the initial guesses of the most probable points (MPPs), their proposed algorithm would encounter difficulties in dealing with non-differentiable constraints and the effectiveness could be degraded significantly as the initial guesses are far from the true MPPs. In this paper, a novel population-based evolutionary algorithm, named cell evolution method, is proposed to improve the computational efficiency and effectiveness of solving the RBDO problems. By using the proposed cell evolution method, a family of test cells is generated based on the target reliability index and with these reliability test cells the determination of the MPPs for probabilistic constraints becomes a simple parallel calculation task, without the needs of gradient calculations and any initial guesses. Having determined the MPPs, a modified real-coded genetic algorithm is applied to evolve these cells into a final one that satisfies all the constraints and has the best objective function value for the RBDO. Especially, the nucleus of the final cell contains the reliable solution to the RBDO problem. Illustrative examples are provided to demonstrate the effectiveness and applicability of the proposed cell evolution method in solving RBDOs. Simulation results reveal that the proposed cell evolution method outperforms comparative methods in both the computational efficiency and solution accuracy, especially for multi-modal RBDO problems.

@&#INTRODUCTION@&#
The framework of deterministic designs presumes that there does not exist any uncertainty in both the design variables and model parameters. Because no uncertainties are involved in the design problem, the deterministic optimization usually locates an optimal solution which lies on the extreme limits or boundaries of the design constraints. However, an actual process can inevitably encounter uncertainties resulting from input perturbations, process disturbances, unmodeled dynamics and parameter variations, etc. When faced with uncertainties, the obtained deterministic optimal solution often becomes unreliable because of the violation of some active constraints. To achieve a reliable design under uncertainties, one promising way is to formulate the design problem through the framework of reliability-based design optimization (RBDO), which is expressed as follows [2,3]:(1)mind,μxf(d,μx,μp)s.t.Pr(Gi(d,x,p)≤0)≥Ri,i=1,…,n1gj(d,μx,μp)≤0,j=1,…,n2dL≤d≤dU,μxL≤μx≤μxUIn the formulated RBDO, f(·) is the objective function to be minimized, d∈Rmis the vector of the deterministic design variables, x∈Rnis the vector of random (uncertain) decision variables and μxis the mean vector of x, p∈Rqis the vector of random parameters (which are not design variables), μpis the mean vector of p, Gi(·) denotes the ith stochastic constraint, and gj(·) the jth deterministic constraint. Besides, Pr(·) is the probability function used to indicate the probability for which the stochastic constraint is satisfied and Riis the desired reliability of the ith probabilistic constraint. In this paper, we assume the random decision vector x obeys a normal distribution N(μx, σx) with mean μxand covariance matrix σx. Similarly, the random parameter vector p, which represents the process uncertainties, is also assumed to follow a normal probability distribution given by N(μp, σp). It is noted that other types of probability distribution can be studied as well since approximate transformation techniques [4] are available. Also noted is that this paper only considers the inequality constraints in the RBDO formulation. This is because if an equality constraint involves uncertain decision variables and/or random model parameters, an optimal solution may not exist for any arbitrary reliability against failure. Besides, in the formulated RBDO problem we classify all inequality constraints into two categories: the stochastic constraints Giinvolving at least one stochastic quantity and the deterministic constraints gjthat contain no stochastic quantities. With the use of a priori information about the covariance matrices and a given target reliability, the RBDO in (1) aims to determine the decision variable vectors d and μxsuch that the objective function evaluated at d, μxand μpis minimized, while subject to both the deterministic and probabilistic constraints. Here, we note that one of the most important and successful RBDO applications is the car side-impact design problem, which targets at a balance design of the vehicle weight and the safety performance. The need of a balance design is crucial because an increase in dimension of the core parameters may improve the performance on a dummy in terms of head injury, load in abdomen, etc., but that increment would unavoidably increase the vehicle weight and thus strongly affect the fuel economy. As has been reported by many researchers [1,3], the balance design of car side-impacts can be successfully achieved by using the framework of reliability-based design optimization which involves the minimization of vehicle weight subject to EEVC (European Enhanced Vehicle-Safety Committee) restrictions on safety performance.To solve the RBDO, the solution scheme essentially involves a nested, double-loop procedure where the outer optimization loop includes inner loops of reliability analysis. In each reliability analysis, the performance measure approach (PMA) [2,5] or reliability index approach (RIA) [6] is commonly used as a separate optimization procedure in the standard normal space to search for the most probable point (MPP) for each of the active probabilistic constraints. Since the iterative search of MPPs often accounts for the major computational expense, the conventional double-loop schemes for RBDOs are usually computationally inefficient. Recently, single loop methods [3,7], which integrate both optimization tasks together by not exactly finding the optimum of the inner-loop optimization task, establish an approximation approach to find the MPPs. Because the single-loop method is only an approximation to the double-loop procedure, it usually cannot produce accurate solutions but is computationally faster than double-loop methods. A recent work of Deb et al. [1] proposed the use of evolutionary algorithms to solve three different aspects of RBDO problems that are difficult to handle using conventional methods. To search for the MPPs, they applied the fast performance measure approach (FastPMA) [8], which is a faster variant of the PMA approach, in the inner reliability analysis loop. By using the embedded FastPMA, one needs to calculate a gradient vector of each probabilistic constraint repeatedly at an intersection in the U-space until the norm of two consecutive gradient vectors converges. Since the embedded fastPMA requires the gradient calculations, their evolutionary algorithm would encounter difficulties when dealing with non-differentiable constraints. In addition, their algorithm may suffer from problems of slow convergence as the initial guesses for gradient evaluations are far from the true MPPs. In this paper, we propose a novel and alternative population-based evolutionary method, named cell evolution method, to solve the RBDO problems. The proposed cell evolution method not only provides a specific feature evolving the reliability test cells directly in the feasible domain, but also enables the nucleus (center) of the evolved final cell to be the reliable solution to the RBDO. For directly locating the MPPs, a family of cells that satisfies the required reliability index is generated with a sampling technique that combines the use of a Sobol's quasi-random sequence [9,10] and the spherical parameterization technique [11]. The assistance of these reliability test cells enables the searching of MPPs to become a simple algebraic evaluation step performed on the supersurface of the cells, which is a simple parallel computation process rather than the iterative optimization tasks of using the traditional PMA, fastPMA or RIA methods. Since this parallel MPP determination process does not require gradient calculations and any initial guesses, the computational efficiency can be greatly enhanced and highly improved. Having determined the MPPs, a modified real-coded genetic algorithm is then applied to determine the survival or elimination of these reliability test cells according to their individual fitness. This cell evolution procedure repeats until the family of cells converges to one that satisfies all the deterministic and probabilistic constraints and at the same time possesses the best value of the objective function. Notably, the nucleus (center) of the obtained final cell contains the solution to the RBDO. Illustrative examples are provided to demonstrate the effectiveness and applicability of the proposed cell evolution method for RBDO. Besides, as a basis of performance evaluation, the performance of the proposed cell evolution method is compared with that of existing methods such as double-loop and single-loop methods. Simulation results reveal that the proposed method outperforms existing methods in both the computational efficiency and solution accuracy, especially for multi-modal RBDO problems. The remainder of this paper is organized as follows. First, in Section 2 we briefly review the basic ideas and concept of RBDO as well as the PMA method, which inspired us to develop the reliability test cells for MPP determination. Following this, in Section 3, we describe how to generate the cells with a sampling technique that combines the use of a Sobol's quasi-random sequence and the spherical parameterization method. Consequently, a modified real-coded genetic algorithm is introduced to evolve these reliability test cells according to their fitnesses. In Section 4, several well-known and typical RBDO examples including the uni-modal and multi-modal problems are used to illustrate and evaluate the effectiveness and applicability of the proposed approach. Therein, we report some notable observations and new findings about the dramatic change of the reliability solutions with respect to the target reliability indices, which are extremely valuable to process engineers in solving real-world optimization problems under uncertainties. Finally, in Section 5 concluding remarks are given to the proposed cell evolution method for RBDO problems.Before we proceed to present the proposed cell evolution method, the ideas and concept of failure probability and the reliability index used to describe the satisfaction of probabilistic constraints will be introduced first, followed by the review of the PMA method for the reliability assessment of probabilistic constraints.The essential core of RBDO is its probabilistic constraint defined in Eq. (1), which distinguishes the reliability-based design optimization from conventional deterministic ones. The function Pr(·) in Eq. (1) is defined as follows [3]:(2)Pr(Gi(d,x,p)≤0)=∬⋯∫Gi(d,x,p)≤0ψx,p(x,p)dxdpwhere ψx,p(x, p) is the joint probability density function of all random variables and parameters. Truly, it is usually impossible to find an analytical expression for the above integral equation for any arbitrary constraints. An alternative way is to consider the actual reliability level for the ith probabilistic constraint by introducing the failure probability; that is,(3)Ri=1−Piwhere(4)Pi=Pr(Gi(d,x,p)>0)is the failure probability to indicate the violation of the ith stochastic constraint. Since the failure probability is usually very small for a reliable design, one can approximate it by using the first-order approximation as follows [12]:(5)Pi≈Φ(−βi)where Φ(·) stands for the standard normal cumulative distribution function and βiis the target reliability index given by βi=Φ−1(Ri).As mentioned earlier, RBDO intrinsically constitutes a so-called double-loop solution procedure that employs two nested optimization loops: the outer design optimization loop and inner reliability assessment (analysis) loop. The reliability analysis can be generally viewed as an iterative process to search for the most-probable point (MPP) of failure, which is the point located on the constraint boundary and closest to the solution. The concept of reliability assessment based on MPPs leads to the development of the commonly used MPP-based reliability analysis methods such as RIA-based and PMA-based approaches. With the RIA-based approach, the following optimization problem can be formulated [5,6](6)minUs.t.Gi(U)=0The solution to the RIA-based optimization problem yields the MPP that is on the constraint curve in the U-space (the standard normalized variable space characterized by zero mean and unit variance) and is closest to the origin. Although the obtained MPP is in the U-space, one can easily convert it back to the original coordinate system by using the Rosenblatt transformation [13]. In solving (6), the optimization procedure ignores the desired reliability index βiin order to obtain the minimum U-vector on the constraint boundary. The obtained minimal U* is then compared with βi. IfU*≥βi, it is concluded that the required reliability of the probabilistic constraint is satisfied. Obviously, the RIA-based approach, though involves an equality constraint, has a remarkable characteristic to reflect the distance of the current solution from the constraint; in other words, it is a measure to account for how far a constraint would be violated. Based on a different design practice, the PMA-based approach aims to determine the MPP of the constraint Gifrom the following optimization problem [2,5](7)minGi(U)s.t.U=βiMore precisely, the PMA-based optimization problem aims to find an optimal U* that lies on a circle of radius βiand minimizes Gi(U). If the corresponding constraint function value is non-positive, the probabilistic constraint is considered to have been satisfied. Mathematically, we describe the PMA-based RBDO problem as follows [2,14]:(8)mind,μxf(d,μx,μp)s.t.Gi*={FGi−1[Φ(−βi)]}≤0,i=1,…,n1gj(d,μx,μp)≤0,j=1,…,n2dL≤d≤dU,μxL≤μx≤μxUwhereFGidenotes the cumulative distribution function andGi*is calculated from the reliability optimization problem (7).In this subsection, we will present the underlying idea of the proposed cell evolution method for solving the PMA-based RBDO problem. Before we proceed further, it is recalled that the purpose of the MPA approach is to find the MPP point on the hypersurfaceU=βiover which the function Gi(U) takes the minimum value. This inspired us to develop a simple algorithm to search over the hypersurfaceU=βifor the MPP. The central idea is that if a cell with the decision vector being in the nucleus and the required reliability index as the radius is constructed, the points on the hypersurface of the cell all satisfy the constraintU=βiin the standard normalized variable space. Accordingly, one can directly evaluate the points on the hypersurface of the cell and the one that takes the minimum value of Giis the MPP associated with this constraint. Note that in the MATLAB environment the command “min” can be used to facilitate the parallel determination of the MPPs for each reliability test cell. Since the MPP determination involves only a simple calculation process performed on the hypersurface of the cell rather than a time-consuming effort of solving an optimization problem, the proposed solution scheme is computationally more efficient and effective. Besides, compared with the fastPMA, the MPP determination based on using the reliability test cells is rather simple and easy to operate since it does not require gradient calculations and any initial guesses. For illustration, we schematically depict in Fig. 1the role of reliability test cells in the determination of MPPs.In the following subsections, we will first describe how to generate the reliability test cells and then state how to incorporate with a modified real-coded genetic algorithm to evolve these reliability test cells to a final solution cell that satisfies all the constraints and has the best value of the objective function for the RBDO.LetB(β)={zz=β}denote a cell in U-space with the target reliability index β as radius. In one-dimensional space, the cell degenerates to two endpoints of an interval; in two- or three-dimensional cases, the cell turns out to be a circle or sphere respectively; for a higher dimensional problem, the cell becomes a hypersphere. Although simple parameterization methods such as the circle and sphere generation methods are available for use to generate the cells of low dimensions, the conventional parameterization methods are not generally applicable to a higher dimensional case due to the lack of an analytic parametric expression. In this paper, we propose a technique of random sampling to generate the cells of any dimension. The proposed scheme for cell generation involves two steps. The first step generates a Sobol's quasi-random sequence [9,10] in a unit hypercube and then in the second step the spherical parameterization technique [11] is utilized to convert the sequence into a hypersphere in U-space. The procedure and algorithm of the proposed cell generation method is briefly stated as follows. LetN˜sampling points be uniformly distributed in the M-dimensional decision space, then the jth component in the i-th point of Sobol's quasi-random sequence can be generated by(9)zi,j=i1η1,j⊕i2η2,j⊕i3η3,j⊕⋯where ⊕ is the bit-to-bit exclusive-or operator and ηkjis the direction number given by(10)ηkj=δkj2kwhere the parameter δkjis obtained by the following recurrence relation:(11)δkj=2a1jδk−1,j⊕22a2jδk−2,j⊕⋯⊕2Mj−1aMj−1,jδk−Mj+1,j⊕2Mjδk−Mj,j⊕δk−Mj,jThe initial valuesδ1,j,δ2,j,…,δMj,jcan be freely selected if each δk,j, 1≤k≤Mj, is odd and less than 2k. Besides, the coefficient aijin the above equation, which takes a value either 0 or 1, is determined from the following primitive polynomial(12)Pj=ωMj+a1jωMj−1+a2jωMj−2+⋯+aMj−1,jω+1An error-bound analysis of the Sobol's sequence [9] indicates that the order of the chosen primitive polynomials should be as low as possible. For details of the Sobol's quasi-random sequence generation algorithm, please refer to Bratley and Fox [10].Having constructed a Sobol's quasi-random sequence in a hypercube, one can then apply the spherical parameterization method to convert them into a cell. In doing so, one can first formulate an optimization problem, which minimizes the harmonic objective function∫ΩΔu2dAover the surface subject to the constraint ofu2=βfor all vertices made from the sequence [11]. Although the nonlinearity of the constraints makes the super-spherical setting more involved than its hypercube counterpart does, one can easily solve this transformation problem by applying the Gauss-Seidel method together with the technique of tangential Laplacian smoothing for local relaxation [15]. Finally, through back projection onto the hypersphere, a template cell with target reliability index in hyper-spherical domain is created.In Figs. 2 and 3, we depict, respectively, the two- and three-dimensional template cells generated by the combined use of the Sobol's quasi-random sequence and the spherical parameterization method with different sampling numbers and target reliability indices. Here, we note that a cell generated by the above-mentioned method is in the U-space and centers at the origin. To form a cell with an arbitrarily assigned center y (a non-zero vector), i.e.B(y,β)={zz−y=β},one can make use of the template cell of the same reliability index and directly shift its nucleus from the origin to the new center. In this way of shifting the center (nucleus) to the new positions specified by the decision vectors, one can generate a family of reliability test cells which has the same reliability index but with different nuclei.In the previous subsection, we have described how to generate a family of reliability test cells based on the direct use of a template cell of the target reliability index. In this section, we will present a modified real-coded genetic algorithm (RCGA) to evolve these cells into a final cell whose nucleus contains the reliable solution to the RBDO. To proceed, we first introduce the underlying design concept and notations of the RCGA, followed by a detailed description of the cell evolution algorithm. Letθ=d,μx=θ1,θ2,…,θMbe a solution termed as chromosome in the sense of the RCGA. Then, each θj,j∈n¯,n¯={1,2,…,M}and M=m+n, in the chromosome θ is called a gene and represented by a real number. Since all the genes θjare confined to lie in the region specified by the vector of lower boundθL≡[θ1L,θ2L,…,θML]=[dLμxL]and the vector of upper boundθU≡[θ1U,θ2U,…,θMU]=[dUμxU], the admissible parameter space for the decision vector θ is explicitly given by(13)Ωθ={θ∈RM|θ1L≤θ1≤θ1U,θ2L≤θ2≤θ2U,⋯,θML≤θM≤θMU}.For θ∈Ωθ, the expression B([θ, μp], β) mathematically denotes the reliability test cell in the admissible region that centers at [θ, μp]. In other words, the reliability test cell is with the reliability index as its radius and the nucleus [θ, μp] as its center. It is obvious that the nucleus of the cell contains the solution θ to the RBDO. For ease of presentation, we use Bβ(θ) to replace the full notation of B([θ, μp], β). Furthermore, let N and prdenote the number of the cells in the population and the reproduction parameter respectively, and let λ be the threshold parameter used to control the activation of the crossover and mutation operations [16,17] in the algorithm. Having clarified the notations and basic concepts of reliability test cells, we are ready to introduce the proposed cell evolution method. Fig. 4depicts the flow chart of the proposed RCGA-based cell evolution scheme, which integrates a cell generation method with a modified real-coded genetic algorithm as a whole. In the following subsections, we will describe the proposed cell evolution method through the individual part of the algorithm.According to the admissible region Ωθ, one can create an initial population Θ with N chromosomes randomly. Then, with the chromosomes Θ being in the nuclei, a family of N cells, which has the same desirable reliability index β, can be generated by using the cell generation method stated in Section 3.2.Once the cell population is formed at each generation, the individual cell fitness has to be evaluated. To handle the constraints and to assist the RCGA in allocating solutions from the feasible set of the RBDO problem, in this paper we use a simple static penalty function to combine the objective function and the satisfaction of constraints into a single fitness function as follows(14)F(θ)=f(θ,μp)+C∑i=1n1Gi*+(θ,μp)+∑j=1n2gj+(θ,μp)where θ∈Θ and C is a user-specified penalty parameter. Usually, to magnify the penalty function a large positive value for C is used. In the above equation,Gi*+(⋅)andgj+(⋅), which represent the indication functions to account for the violations of the stochastic constraint and the deterministic constraint respectively, are given by(15a)Gi*+(θ,μp)=max[Gi*(θ,μp),0],i=1,2,…,n1(15b)gj+(θ,μp)=max[gj(θ,μp),0],j=1,2,…,n2.In Eq. (15a), the function value ofGi*(θ,μp)is calculated byGi(zi*),wherezi*=argminz∈Bβ(θ)Gi(d,x,p)is the MPP associated with the stochastic constraint Gi. Besides, the max-operator in Eq. (15) returns zero as the solution θ belongs to the feasible solution space; otherwise, the indication function will produce a considerably large value to penalize the infeasible solution.In conventional evolutionary algorithms, roulette wheel and tournament selections are two commonly used mechanisms for chromosome selection. In a basic sense, one can visualize the roulette wheel selection by imagining a wheel where each solution occupies an area related to the level of fitness. When a spinning wheel stops, a fixed marker will determine which chromosome is selected based on the area size that the chromosome occupies. Since this kind of selection mechanism involves more numerical computations, it would thus slow down the evolutionary speed. In contrast, the scheme of tournament selection is simply operated based on the competition of individual fitness. By randomly picking some chromosomes from the population to compete, the tournament selection scheme selects the winner who has the best fitness among the competitors. The selected winner chromosome is then added into the mating pool waiting for the subsequent recombination. Note that the tournament selection procedure repeats until the target size of the mating pool is reached. Compared to the roulette-wheel schemes, this kind of selection mechanism is more straightforward and has less computational complexity, but it might miss some potential solutions and in turn lead to a suboptimal solution [16]. In the proposed cell evolution scheme, we convey an alternative method called ranking selection (RS) [16,17] to perform the cell selection. In using RS, we first rank the cell population according to the fitness defined by Eq. (14). Then, according to the fitness ranking, we discard the amounts ofprNcells that have relatively lower rankings (i.e., worse fitness), while at the same time reproduce the same amounts of cells that possess higher rankings. Note that pris a user-defined proportional parameter used to control the amount of current top chromosomes that will be reproduced. Compared to the roulette-wheel and the tournament selection mechanisms, the RS is much easier to operate since it is directly operational using the fitness ranking information. Besides, since the RS discards and reproduces the same number of cells, it keeps the total number of cells in the population constant. This specific feature of the RS helps divide the population into two groups and thus facilitate the subsequent DBX crossover operation. We will make this clear in the next subsection. More importantly, the RS operator preserves those top solutions in the population and makes the whole population toward a situation that has a better average fitness.Due to its capability of blending parents’ information for offspring generation, crossover operation is widely recognized as the most important evolutionary function to create new possibilities and higher population diversity. In this paper, we carry the ideas and function of an efficient operator, named direction-based crossover (DBX) operator [16,17], to execute the cell's crossover operation. From a comparison study of the DBX operator, Chuang and Chen [17] have revealed that the DBX possesses a more superior searching ability than several existing crossover operators in locating the global solution. The key to this superior ability is that the DBX allows more directional explorations to generate potential offspring [17]. By conveying DBX to the cell evolution, we first sort the cells according to the fitness rankings and then separate them into two groups waiting for recombination. LetBβ(Θ˜)={Bβ(θ1),Bβ(θ2),…,Bβ(θN)}denote the sequence of the sorted cells after the RS operation, which satisfies the relation ofBβ(θ1)≺_Bβ(θ2)≺_⋯≺_Bβ(θN). ByA˜≺_B˜, we mean that the fitness ofA˜is better than or equal to that ofB˜. Without loss of generality, we let the cell population number N be even andN¯=N/2. Then, according to the fitness rankings, we divide the cell populationBβ(Θ˜)into the following two groups:Group I (the leading group):(16)Bβ(Θ˜I)={Bβ(θ1),Bβ(θ2),…,Bβ(θN/2)}≡{Bβ(θ1I),Bβ(θ2I),…,Bβ(θN¯I)}Group II (the group of cells having worse fitness):(17)Bβ(Θ˜II)={Bβ(θN/2+1),Bβ(θN/2+2),…,Bβ(θN)}≡{Bβ(θ1II),Bβ(θ2II),…,Bβ(θN¯II)}It is obvious that, for the same ranking i,Bβ(θiI)in group I has a better fitness than that ofBβ(θiII)in group II. By using the DBX operator, we consecutively chooseBβ(θiI)from group I andBβ(θiII)from group II to make the ith pair of parents for the subsequent crossover operation. The idea of using this specific paring method is to formN¯pairs of parents of which each pair possesses the property ofBβ(θiI)≺_Bβ(θiII); as a result, a significant gradient can be created to benefit an effective crossover. In other words, the chosen ith paired parent cellsBβ(θiI),Bβ(θiII)can naturally formulate a gradient to generate the potential offspring to substantially improve the fitness since the inequalityBβ(θiI)≺_Bβ(θiII)is satisfied. For a clear presentation, we describe the DBX operator in detail as follows. Let r be a number randomly chosen from the range of 0 and 1. Then, if r is greater than the specified crossover probability threshold λ, the DBX operation is activated to perform on the selected pair of parent cells,Bβ(θiI),Bβ(θiII), to generate two offspring cells by using the following rule(18a)Bβ(θiI*):θiI*←θiI+sc,iD→i(18b)Bβ(θiII*):θiII*←θiII+sc,iD→ifori=1,2,…,N¯,where the step size sc,iand the crossover directionD→iare, respectively, calculated by [16,17](19)sc,i=F(θiI)−F(θiII)max⋅{F(Θ)}−min⋅{F(Θ)}and(20)D→i,j=0,ifr<0.5θi,jI−θi,jII,ifr≥0.5fori=1,2,…,N¯,and j=1, 2, …, M. In light of Eq. (19), it is obvious that the value of the step size sc, which is computed by dividing the fitness difference of the chosen parent cells with the current cell population's maximum fitness difference, naturally lies in the range of 0 and 1. Besides, Eq. (20) indicates that each of the paired genes has the same probability to produce the crossover direction by blending parents’ chromosome information. Since this effort enables one to explore 2M−1 possible search directions [17] for generating offspring cells, the DBX operator is much more effective in locating the potential solutions than conventional vector-based crossover operators. More precisely, at the very beginning evolution stage, the DBX operator will contribute a big movement to explore the potential offspring along the direction vector because of the high diversity in the initial cell population. When gradually converged through some successful generations, the DBX turns out to be considerably insignificant to produce crossover variations due to the reduced magnitude of the direction vector. In such a circumstance, some chosen parent cells would have the same properties. By the same properties of two cells, we mean that they have identical chromosomes and/or fitness, i.e.θiI=θiIIand/orF(θiI)=F(θiII). When two chosen parents are observed to have the same properties, the DBX operation will be replaced with a dynamic mutation operator (DRM) (to be introduced later) to intensify the cell diversity through the function of mutation. Unlike the conventional crossover and mutation operators that work in a series framework, the operation of DBX and DRM constitutes a specific parallel loop for cell evolution. In Fig. 4, we clearly illustrate this specially designed parallel loop formed by the DBX and DRM operators in the proposed RCGA-based cell evolution algorithm.To provide the cell's diversity through mutation, we apply the dynamic random mutation (DRM) operator as follows:(21)Bβ(θi):θi←θi+smΨ0(θU−θL),i=1,2,…,Nwhere Ψ0 is a random perturbation vector in the M-dimensional cube [−Ψ0, +Ψ0]Mof which Ψ0 is a random number chosen from the interval (0, 1]. Besides, through progressive generations we dynamically update the mutation step size smwith the adaptive rule [16]:(22)sm=1−k/kmaxbwhere kmax is the pre-specified maximum number of generations and b (>0) is the parameter used to control the decay rate of the mutation. Note that the DRM is activated if the random number r is greater than the specified crossover probability threshold λ, i.e. r≤λ, or two parent cells have the same properties.Because the cell population size is kept constant and unchanged during evolution, it is very important to preserve the current best solution cell for use in subsequent generations. The generational replacement and the steady-state replacement strategies [18] are two commonly used replacement operators to select the survival chromosomes in conventional genetic algorithms. In this paper, we implemented the generational replacement with elitism strategy in the proposed cell evolution algorithm to execute the cell replacement. This is because that, when performing on the cells, the generational replacement with elitism strategy enables one to systematically compare and replace the parent cells with offspring cells; as a result, it is superior in performance to the steady-state replacement strategy which directly inserts the offspring cells into the population. More precisely, the generational replacement with elitism strategy first compares the fitness of the offspring cell with that of its parent cell individually, i.e.Bβ(θiI*)compares withBβ(θiI)andBβ(θiII*)withBβ(θiII)and then selects the better cells as the survivors in the population for the next evolution.It is well known that premature convergence and stagnation can occur when the convergence speed of an evolutionary algorithm is too fast and/or the solution has been trapped by a local optimum. To prevent possible premature stagnation and make the cell evolution algorithm more effective in finding an optimal solution cell, we refresh all cells except the current best one by regenerating a new set of reliability test cells when a stagnation index is less than a pre-specified criterion. In this paper, we use the measureStd.(F(Θ˜))(the standard deviation of cells’ fitness) as the stagnation index; in other words, we activate the above-mentioned stagnation prevention procedure whenStd.(F(Θ˜))≤ε, where ɛ is a very small positive number. Although other criteria for predicting the premature condition are available, our experiences indicate that using the suggested stagnation index is a simple yet effective strategy to prevent prematurity of the cell population at each generation.Up to this stage, we have described the operational principle and the underlying ideas of the proposed cell evolution operators. Note that if the obtained chromosome of the cell is outside ΩΘ, the original cell is retained. The proposed cell evolution algorithm uses the following termination criteria: (1) the number of generations attains the user-specified maximum number; (2) the family of the reliability test cells has evolved to a final cell that satisfies all the constraints and has the best value of the objective function.The proposed cell evolution method chiefly consists of eight heuristic parameters; they are the cell population number N, the maximum number of generations kmax, the sampling numberN˜, the reproduction parameter pr, the crossover and mutation threshold λ, the mutation parameter b, the penalty factor C, and the tolerance ɛ for stagnation avoidance. In general, the selection of the population size and the maximum number of generations in evolutionary algorithms are system dependent, representing a tradeoff between the possibility of locating the global optimum and the computation time. Our experiences indicate that a larger population size would allow a smaller number of generations to achieve an optimal solution. In light of the proposed algorithm, the sampling number has a profound effect on the convergence properties of the algorithm. Generally, a large sampling number can facilitate the accurate determination of the MPPs but would increase the computation time, whereas a small sampling number has a complementary effect. In practice, because there is no single value suitable for all cases, the sampling number is usually chosen experimentally for each specific application. Besides, a larger sampling number is normally required for a complex RBDO to ensure its solution accuracy. The parameter pr, which is used to determine the amount of the cells that needs to be replaced, should be set small to avoid a premature convergence to a local optimum. Recall that the threshold parameter λ is used to control the activation of the crossover and mutation. To ensure that most paired parents can go through the DBX operation to generate potential offspring, we recommend the use of a small threshold value, say λ=0.1. Note that the parameter b governs the shape of the allowable mutation region and the allowable mutation range through generations. Our numerical experiences indicate that the best value of b would be in the range of 2 and 4, which helps preserve better solution efficiency and provide a greater ability to prevent from being trapped by a local optimum. To evaluate the fitness of the cell, this paper simply applies a static penalty function of which the penalty factor C is used to penalize the infeasible cell solution. Our experiences show that for most cases a suitable large value of the penalty parameter, say 106, is good enough to amplify the penalty function, enabling the proposed cell evolution method to successfully eliminate the infeasible cell solution. Another valuable observation gained from our experiences is that the performance of the proposed cell evolution method is insensitive to the values of the penalty factor as the penalty factor is set larger than 106. Finally, we report that the suitable value of the parameter ɛ would be in the range of 10−10 and 10−8, which can effectively assist the proposed cell evolution method to alleviate premature stagnation.In this section, we will evaluate the performance of the proposed cell evolution method through three RBDO problems. The first one is a typical, uni-modal RBOD, which has two uncertain decision variables and three probabilistic constraints. In the first example, we will explore the effects of algorithm parameter settings on the RBDO solutions and provide a clear outlook on parameter selection in solving RBDOs. The second example, which is a slight modification of the first example, is a multi-modal RBDO from which we report some interesting observations about the dependency of the objective function on the target reliability index. Finally, in the third example we consider the car side-impact problem, which has seven uncertain decision variables and four random model parameters. As a basis of performance evaluation, we will compare the obtained results with those reported in the literature.Example 4.1In the first test example, we consider the typical RBDO problem described as follows [3,7]:minμ1,μ2f=μ1+μ2s.t.Pr(Gi(x)≤0)≥Ri,i=1,2,3G1(x)=1−x12x220G2(x)=1−(x1+x2−5)230−(x1−x2−12)2120G3(x)=1−80x12+8x2+50≤μi≤10,i=1,2σ1=σ2=0.3,βj=Φ−1(Rj)=3,j=1,2,3where μiand σiare, respectively, the mean value and the standard deviation of the uncertain design variable xi. Although a different target reliability index can be used for each stochastic constraint, for demonstration purpose we use the same reliability index βj=3 for all the three constraints.The first set of numerical experiments is conducted to investigate the effects of the algorithm parameters on the obtained RBDO solutions. In Table 1, we list the parameter settings for the sixteen designate tests (Test-1∼16). In this series of test runs, we formed the template cell by setting the number of Sobol's sequence asN˜=1000and initialized the initial population uniformly and randomly in the search space. To gather the statistic performance data, we executed each test run 100 times and recorded the mean, best, median, worst and the standard deviation of the optimized objective function values. In Table 2, we list the collected statistical data from the test runs for performance evaluation. It can be observed that for a population of 100 cells various parameter combinations followed the guideline can achieve the global solution to the RBDO perfectly, i.e. the proposed cell evolution algorithm reaches 100% success rate in all the test runs. As the cell population number is reduced to 50, the parameter prshould be slightly increased to 0.02 to ensure at least the best cell is reproduced by the RS and the maximum iteration number should also be increased, say kmax=50, to fully complete the cell evolution process. On the other hand, it is observed that the recommended small value of λ=0.1 works well to control the crossover and mutation probability, ensuring most paired parents can go through the DBX operation. Besides, we also make sure that the suggested values of the mutation parameter b in the range of 2 and 4 can substantially assist the DRM to preserve high population diversity and thus provide a greater ability to prevent from being trapped by a local optimum. Finally, from the statistical data we conclude that a small parameter ɛ in the range of 10−10 and 10−8 is suitable to effectively alleviate the stagnation so that the proposed cell evolution algorithm can achieve the RBDO solution perfectly.Another important factor that influences the RBDO solution is the sampling number that relates to the generation of template cells and in turn the MPP determination. Therefore, in the second set of simulation studies we aim to explore the effects of the sampling numbers on the solution accuracy and the required computation time. In this case, we executed the proposed cell evolution method by using the algorithm parameters concluded from the previous set of studies; they are: N=100 (cell population number), pr=0.01 (reproduction parameter), λ=0.1 (threshold parameter), kmax=100 (maximum number of generations), b=4 (mutation parameter), C=106 (penalty factor) and ɛ=10−8 (stagnation criterion). In Table 3, we list the execution time and the solutions obtained by the proposed cell evolution method with respect to different sampling numbers. Besides, in Table 4we depict the obtained MPPs with respect to the sampling numbers used. The obtained results show clearly that the larger the sampling number, the more accurate the solution that can be obtained, while at the expense of CPU time. We conclude from the comparisons of Tables 3 and 4 that the obtained result is exactly the correct solution as the sampling number is set greater than 500. The above observations reveal that the sampling number has a profound effect on the convergence properties of the algorithm as well as the solution accuracy. As that shown in Table 3, the selection of this parameter corresponds to a tradeoff between the computation time and the accuracy level of the solution. We note that in this paper the cell evolution algorithm was executed in the MATLAB environment running with a personal computer equipped with Intel Core 2 Duo CPU at 3.16GHz with 8G RAM.Table 5lists the solution results achieved by the proposed cell evolution method, therein those previously reported results obtained by the double-loop method with PMA [8] and the single-loop method [7] are also shown for comparison. From Table 5, one can observe that the solution obtained by the proposed cell evolution method is as accurate as the results obtained by the double-loop method. Since an approximation task was involved to estimate the MPPs, the single-loop method, though computationally faster, does not result in a solution of high accuracy. To demonstrate further, we depict in Fig. 5the final solution cells obtained by the proposed cell evolution method with respect to different designated reliability indices.This figure depicts that the deterministic, global optimum is located at the left corner of the feasible region. Note that this global solution was found by the proposed algorithm when setting the reliability index to zero (no reliability was considered). As the target reliability index increases, the optimal solution moves further away from the deterministic, global optimum, but all located on the left hand side of the feasible region.Example 4.2Reconsider the RBDO stated in Example 4.1 except that the objective function is changed to μ2. Using the same algorithm parameters as those in Example 4.1, i.e., N=100, pr=0.01, λ=0.1, kmax=100, b=4, C=106, ɛ=10−8 andN˜=1000,we performed the cell evolution method to search for the optimal solution to this modified RBDO. Table 6lists the obtained results with respect to different target reliability indices.From this table it is interesting to observe that, though the value of the objective function increases smoothly in accordance with the increment of the target reliability index, a dramatic change appears in the optimized decision variable as the target reliability index is set roughly within the range of 1 and 1.5. To have a better understanding of this dramatic change, we plot in Fig. 6the obtained final cells with respect to the designated reliability indices. From this figure, it is obvious that the deterministic, global optimum of this example is now located at the right corner of the feasible region. By slightly increasing the reliability index above zero, the solution cell begins to move away from the deterministic, global optimum but is still located close to the right corner when the target reliability index is less than 1. As the reliability index is increased above a critical value (about β=1.3), the obtained solution cell drastically jumps from the right corner to the left corner where there is a deterministic, local optimum. The above observations and findings reveal that the RBDO problem is a multi-modal problem and the proposed cell evolution method can effectively locate the truly reliable solution despite the existence of many local solutions. For further investigation, we performed the proposed method to this multi-modal RBDO problem by increasing the reliability index from 0 to 5 with an increment of 0.1. The obtained results illustrated in Fig. 7demonstrate in more detail the dramatic change of the reliable solutions with respect to the reliability indices. Such information, which provides a good understanding of how the optimal solution varies depending on the desired reliability, is extremely valuable to process engineers in solving real-world optimization problems.Example 4.3In the third illustrative example, we consider a vehicle side-impact problem. This problem, which has been extensively studied and widely used to test the accuracy and effectiveness of RBDO methods in recent years, has the following RBDO formulation [3,7,19]:minμ1,μ2,…,μ7f(μ)=1.98+4.9μ1+6.67μ2+6.98μ3+4.01μ4+1.78μ5+2.73μ7s.t.Pr(Gi(x)≤0)≥Ri,i=1,2,…,10G1=0.16−0.3717x2x4−0.00931x2x10−0.484x3x9+0.01343x6x10G2=14.36−9.9x2−12.9x1x8+0.1107x3x10G3=1.86+2.95x3+0.1792x10−5.057x1x2−11x2x8−0.0215x5x10−9.98x7x8+22x8x9G4=−3.02+3.818x3−4.2x1x2+0.0207x5x10+6.63x6x9−7.7x7x8+0.32x9x10G5=−0.059−0.0159x1x2−0.188x1x8−0.019x2x7+0.0144x3x5+0.0008757x5x10+0.08045x6x9+0.00139x8x11+0.00001575x10x11G6=−0.106+0.00817x5−0.131x1x8−0.0704x1x9+0.03099x2x6−0.018x2x7+0.0208x3x8+0.121x3x9−0.00364x5x6+0.0007715x5x10−0.0005354x6x10+0.00121x8x11G7=0.42−0.61x2−0.163x3x8+0.001232x3x10−0.166x7x9+0.227x22G8=0.71−0.5x4−0.19x2x3−0.0122x4x10+0.009325x6x10+0.000191x112G9=0.68−0.674x1x2−1.95x2x8+0.02054x3x10−0.0198x4x10+0.028x6x10G10=0.76−0.489x3x7−0.843x5x6+0.0432x9x10−0.0556x9x11−0.000786x1120.5≤μ1≤1.5,0.45≤μ2≤1.35,0.5≤μ3≤1.5,0.5≤μ4≤1.5,0.875≤μ5≤2.625,0.4≤μ6≤1.2,0.4≤μ7≤1.2,μ8=0.345,μ9=0.192,μ10=μ11=0,σi=0.3,i=1,2,…,4,σ5=0.05,σ6=σ7=0.03,σ8=σ9=0.006,σ10=σ11=10.0βj=Φ−1(Rj)=3,j=1,2,…,10Apparently, this RBDO problem contains seven uncertain decision variables, x1−x7, and four random model parameters, x8−x11. For comparison purpose, we list the solutions obtained by the proposed cell evolution method in Table 7, therein those results previously reported in the literature are also shown. Note that the algorithm used the same parameter settings as those mentioned in Example 4.2, exceptN˜=106. The use of a larger amount of sampling points is to ensure the solution accuracy since this side-impact problem has a large set of decision variables with several involved random parameters. Recently, Deb et al. [1] applied a multi-objective approach to solve this car side-impact design problem. Their formulation adds the extra term 0.00001μ6 to modify the vehicle weight f and the optimization task was then performed to simultaneously minimize the modified vehicle weight and maximize the reliability index. By using the evolutionary algorithm NSGA-II in associated with the fastPMA method, they plotted the obtained solutions in a figure to show the change of decision variables with respect to reliability requirements. We observed that their results are closer to the solutions obtained by the RDS method [3]. Since no precise data are available and their design was accomplished by using a multi-objective approach along with a modified objective function about vehicle weight, we exclude the results of Deb et al. [1] from this comparison table. Besides, to ensure the consistency of comparison, in Table 7 we added a negative sign to the constraint values for those data adopted directly from the literature. It can be shown from Table 7 obviously that, compared to the deterministic optimization which reduces the objective function (vehicle weight) to 23.59, the proposed cell evolution method just increases the vehicle weight slightly to 24.3289 for β=1.28 (90% reliability) and to 27.5330 for β=3 (99.875% reliability). Besides, compared with those results reported in the literature, the optimal results obtained by the proposed cell evolution method apparently possess a lighter vehicle weight under the same level of design reliability. From the above observations, we point out that this vehicle side-impact problem belongs to the category of multi-modal RBDO problems and the proposed cell evolution method is able to offer greater search ability in achieving better solutions than comparative methods.

@&#CONCLUSIONS@&#
In this paper, we have proposed a population-based cell evolution method to solve the reliability-based design optimization (RBDO) problems. In addition to the design concept, the problem formulation and algorithms introduced, we have also demonstrated the effectiveness and applicability of the proposed cell evolution method by solving some typical RBDOs, including uni-modal and multi-modal problems. In summary, we draw main conclusions about the algorithms, contributions and new findings of this paper as follows:(1)We applied a sampling technique, which combines the use of a Sobol's quasi-random sequence and the spherical parameterization method, to create a template cell of any dimension. This template cell of the target reliability index enables one to generate a family of the reliability test cells systematically.With the assistance of these reliability test cells, the determination of MPPs becomes a simple calculation process that does not require gradient calculations and any initial guesses. Due to its specific feature of evaluating the points on the superspherical surface of the reliability test cell, this technique is more effective in locating MPPs than conventional PMA, IRA and fastPMA methods.To evolve the cells, we applied a modified real-coded genetic algorithm to determine the survival or elimination of these reliability test cells according to their individual fitness. Especially, the nucleus of the evolved final cell contains the reliable solution to the RBDO. Extensive simulation results have revealed that the proposed cell evolution scheme outperforms existing methods in achieving better solutions, especially for multi-modal RBDO problems.We have reported some interesting observations and findings about the dramatic change of the reliable solutions with respect to the reliability indices. Such information, which provides a good understanding of how the optimal solution varies depending on the target reliability, is extremely valuable to process engineers in solving real-world optimization problems.We have provided a concise parameter-selection guideline for the proposed cell evolution method. Among the heuristic algorithm parameters, the sampling number was found to be the most important one to influence the RBDO solution and the required computation time. This is because that this parameter directly relates to the generation of template cells and in turn the MPP determination. We also found that the sampling number required for cell generation depends on the size and the complexity of the RBDO problem, and the selection of this parameter presents to be a trade-off between the computation time and the accuracy level of the solution.With the above-mentioned advantages, its distinct feature of evolving the reliability test cells and excellent performance in locating the reliable solution, the proposed cell evolution method is assuredly an effective and promising solution approach to the RBDOs. The applications of the proposed solution scheme to solve diversified engineering design problems subject to uncertainties are underway. As a specific topic of research, an extension of the proposed cell evolution method to one that is able to solve multi-objective RBDOs would also deserve a great attention and the future development.