@&#MAIN-TITLE@&#
Generalized Nash equilibria for SaaS/PaaS Clouds

@&#HIGHLIGHTS@&#
The Cloud service provisioning problem is modeled as a generalized Nash game.We show that a potential function for the game exists.We propose solution methods based on the best response dynamics.Equilibria efficiency is evaluated with respect to the social optimum.Results show that our algorithms can manage at run-time very large scale systems.

@&#KEYPHRASES@&#
Game theory,Cloud computing,Generalized Nash equilibrium problem,

@&#ABSTRACT@&#
Cloud computing is an emerging technology that allows to access computing resources on a pay-per-use basis. The main challenges in this area are the efficient performance management and the energy costs minimization.In this paper we model the service provisioning problem of Cloud Platform-as-a-Service systems as a Generalized Nash Equilibrium Problem and show that a potential function for the game exists. Moreover, we prove that the social optimum problem is convex and we derive some properties of social optima from the corresponding Karush–Kuhn–Tucker system. Next, we propose a distributed solution algorithm based on the best response dynamics and we prove its convergence to generalized Nash equilibria. Finally, we numerically evaluate equilibria in terms of their efficiency with respect to the social optimum of the Cloud by varying our algorithm initial solution. Numerical results show that our algorithm is scalable and very efficient and thus can be adopted for the run-time management of very large scale systems.

@&#INTRODUCTION@&#
Cloud computing is an emerging paradigm that aims at streamlining the on-demand provisioning of flexible and scalable services accessible through the Internet (Dikaiakos, Katsaros, Mehra, Pallis, & Vakali, 2009). The main idea is to supply users with on-demand access to computing or storage resources and charge fees for their usage. In these models, users pay only for the resources they use and they can access software applications (Software as a Service – SaaS), tools for the development and deployment of Cloud-based applications (Platform as a Service – PaaS) or even low level hardware physical resources (Infrastructure as a Service – IaaS).In the SaaS paradigm, applications are available over the Web. The SaaS provider hosts both the application and the data, hence the end-user is able to use and access the service from all over the world. With PaaS, applications are developed and deployed on platforms transparently managed by the Cloud provider. The platform typically includes databases, middleware, and also development tools. In IaaS systems, virtual computer environments are provided as services and servers, storage, and network equipment can be outsourced by customers without the expertise to operate them.Many companies (e.g., Google, Amazon, and Microsoft) are offering Cloud computing services such as Google’s App Engine and Amazon’s Elastic Compute Cloud (EC2) or Microsoft Windows Azure. Large data centers provide the infrastructure behind the Cloud, and virtualization technology (which allows the execution of multiple virtual machines on the same physical machine) makes Cloud computing resources more efficient and cost-effective both for providers and customers. Indeed, end-users obtain the benefits of the infrastructure without the need to implement and administer it directly adding or removing capacity almost instantaneously on a “pay-as-you-use” basis. On the other hand, Cloud providers can maximize the utilization of their physical resources also obtaining economies of scale.The development of efficient service provisioning policies is among the major issues in Cloud research. Indeed, modern Clouds operate in a new and dynamic world, characterized by continuous changes in the environment and in the system and performance requirements that must be satisfied. Continuous changes occur without warning and in an unpredictable manner, and are outside the control of the Cloud provider. Therefore, advanced solutions need to be developed that manage the Cloud system in a dynamically adaptive fashion, while continuously providing service and performance guarantees. Recent studies (Armbrust et al., 2009; Birke, Chen, & Smirni, 2012; Dikaiakos et al., 2009) have shown that the main challenges for Cloud systems are the reduction of costs and the improvements of performance levels.Information Technology (IT) analysts state that at the end of 2012, up to 40% of the budgets of Cloud service centers are devoted to energy costs (Cao, Hwang, Li, & Zomaya, 2013; Greenpeace, 2012). Service centers investment grew by 22.1% during 2012 and it is expected it will further grow by another 14.5% in 2013 (Datacenter Dynamics, 2012). Energy efficiency is therefore one of the main focal points on which resource management should be concerned. In addition, providers need to comply with Service Level Agreement (SLA) contracts that determine the revenues gained and penalties incurred on the basis of the level of performance achieved. Quality of Service (QoS) guarantees have to be satisfied despite workload fluctuations, which could span several orders of magnitude within the same business day (Birke et al., 2012; Cao et al., 2013).The recent development of Cloud systems and the rapid growth of the Internet have led to a remarkable usage of game-theoretic tools. Problems arising in the IT industry, such as quality of service or resource allocation, pricing, and load shedding, cannot be handled with classical optimization approaches because each player can be affected by the actions of all players, not only by his own actions. In this setting, a natural modeling framework involves seeking an equilibrium or stable operating point for the system, provided that it exists. More precisely, each player seeks to optimize his own goal, which depends on the strategies of the other players upon his own, and this optimization is performed simultaneously by different players. An equilibrium (in the sense of Nash) is reached when no player can improve his objective function by changing unilaterally his strategy. A survey of different modeling and solution concepts of networking games, as well as a number of different applications in telecommunications and wireless networks, based on game theory, can be found in Altman, Boulogne, El-Azouzi, Jiménez, and Wynter (2006).In Cloud computing, game theory methods have been used to provide load balancing and resource allocation solutions. A number of papers consider centralized and decentralized load balancing strategies in a system with parallel servers (see Anselmi & Gaujal (2011) and Haviv & Roughgarden (2007) and the references therein). The requests arrive as a Poisson process, and the service time of incoming jobs is assumed to be known. For such system, the load balancing problem is investigated in two different scenarios: (i) a centralized setting leading to a global optimization problem, in which a dispatcher decides where each job will get service so as to minimize the weighted mean number of jobs in the system, and (ii) a distributed non-cooperative setting leading to a non-cooperative game transformed into a standard convex optimization problem. The paper studies structural properties of both strategies, and the efficiency loss in terms of Price of Anarchy (PoA) (Koutsoupias & Papadimitriou, 1999) of the decentralized scheme relative to the global optimal (centralized) one.In Yolken and Bambos (2008), the authors propose a pricing mechanism for resource allocation in a utility computing system among competing end-users requests. The fixed available service capacity is allocated among the different flows proportionally to their monetary bids. The paper studies the resulting equilibrium point, establishes convergence of a best-response algorithm, and bounds the efficiency loss of this distributed mechanism. More precisely: End-users requests are represented as job flows in a controlled queueing system. These jobs arrive to the system through a fixed, random process, are stored in a buffer, and then are serviced by the resource in a first come, first served manner. The service rate is set through a proportional share mechanism. Within this framework, the interactions between end-users are modeled as a game. Then, authors show that the equilibrium can be reached in a distributed, asynchronous manner. The paper also reports the sensitivity analysis with respect to the variation of problem’s parameters (e.g., load intensity and relative importance of the competing user requests). Differently from our point of view, in Yolken and Bambos (2008) the problem of the resource allocation is considered for a single virtualized server among competing user requests, while in this paper we consider the Cloud data center at a higher granularity (i.e., VMs).In this paper we take the perspective of SaaS providers which host their applications at a PaaS provider. Each SaaS provider wants to maximize its profit while complying with QoS requirements of their end-users, which determine the revenues and the penalties on the basis of the achieved performance level. The profit of the SaaS is given by the revenues from SLAs minus the cost sustained for using the resources supplied by the PaaS. The profit maximization is challenging since on-line services see dynamic workloads that fluctuate over multiple time scales (Birke et al., 2012; Croll, 2011). Resources have to be allocated flexibly at run-time according to workload fluctuations. Furthermore, each SaaS behaves selfishly and competes with others SaaSs for the use of resources supplied by the PaaS. The PaaS, in its turn, wants to maximize the revenues obtained providing the resources. The profits are given by the revenues from the SLA with the SaaSs minus the energy costs sustained for running physical servers.To capture the behavior of SaaSs and PaaS in this conflicting situation, we will model the run-time service provisioning problem as a Generalized Nash Equilibrium Problem (GNEP) (see e.g. Bigi, Castellani, Pappalardo, & Passacantando, 2013; Cavazzuti, Pappalardo, & Passacantando, 2002; Debreu, 1952; Facchinei & Kanzow, 2010; Rosen, 1965), which is an extension of the classical Nash equilibrium problem (Nash, 1951), in which both the objective function and the feasible region of each player depend on the strategies chosen by the other players. We then use results from game theory to develop efficient algorithms for the run-time management and allocation of PaaS resources to competing SaaSs.In Ardagna, Panicucci, and Passacantando (2011, 2013), we have considered a problem similar to the one faced here, analysing the service provisioning problem with on spot resources. With respect to our previous work, in this paper we extend the game-theoretic model considering a new and more realistic pricing model regulating SaaS and PaaS contract. Furthermore, we explicitly model energy costs of the PaaS infrastructure which requires to include additional decision variables and a totally different solution approach.The remainder of the paper is organized as follows. Section 2 describes the problem under study. In Section 3, we introduce our model based on the concept of Generalized Nash Equilibrium (GNE); moreover, we prove the existence of a potential function for the game and of social optimum solutions. In Section 4, we prove that the social optimum problem is convex and we derive some properties of social optima from the corresponding Karush–Kuhn–Tucker system. In Section 5, we provide a solution algorithm based on the best reply dynamics and we prove its convergence to GNE. The experimental results discussed in Section 6 demonstrate the efficiency of our algorithm by varying its initial solution. Conclusions are finally drawn in Section 7.We consider SaaS providers using Cloud computing facilities according to the PaaS paradigm to offer multiple transactional Web-Services (WSs), each service representing a different application.The hosted WSs can be heterogeneous with respect to resource demands, workload intensities and QoS requirements. The set of WS applications offered by SaaS provider s are denoted byAs, whileSindicates the set of SaaSs. In the following, we denote byAthe set of all WS applications hosted at the PaaS location, i.e.,A=def∪s∈SAs, and we assumeAs1∩As2=∅, for alls1≠s2.Each SaaS provider signs with its customers an SLA contract specifying: (i) the QoS levels that it must meet while responding to end-user requests for a given application, and (ii) the corresponding pricing scheme. In particular, we assume SaaSs have to guarantee to their end-users that the average response time when accessing application k is less than or equal to a given thresholdRkS, while the per-request revenue for the SaaS isαk(see Fig. 1).In turn, each SaaS provider signs an SLA contract with the PaaS: The PaaS must guarantee that the average response time for WS application k is less than or equal toRkP(⩽RkS). Furthermore, for the execution of a single requestk∈As, SaaS s pays a feeβkto the PaaS. The SaaS per-request revenueαkis greater than or equal tomkβk, wheremk>1is the SaaS margin for the execution of individual requests. BothRkPandβkmay vary with the time of the day. Therefore, the SaaS can ask the PaaS provider to reduce its application response time to improve the final end-user experience and thus to increase the loyalty of its customers. However, intuitively, the more stringent are the performance requirements imposed by the SaaS, the higher is the number of resources devoted by the PaaS to the SaaS and overall the higher is the per-request feeβkpayed by the SaaS. In particular, we assume that the average response timesRkPenters the SaaS payoff function with a linear function,Uk=δs(RkS-RkP). Linear functions are a flexible mechanism to express the discontent of final end-users as a function of response times and have been widely used in the literature (see e.g. Ardagna, Panicucci, Trubian, & Zhang, 2012; Bennani & Menasce, 2005; Urgaonkar & Shenoy, 2004).Current Cloud platforms are based on virtualization technology, which allows a flexible management of the overall intrastructure. Therefore, we assume that applications are executed in virtual machines (VMs), which are dynamically instantiated by the PaaS provider. We make the simplifying assumption that each VM hosts a single WS application. Multiple VMs implementing the same WS application can also run in parallel. We also assume that physical servers are dedicated to SaaS providers, i.e. every physical server runs the VMs of the same SaaS. Cloud users usually prefer dedicated servers especially for business critical applications and/or when security requirements are of paramount importance. The use of dedicated servers is becoming widespread in the Cloud market (Amazon Inc., 2013a). For example, Amazon has devoted specific data centers to run applications for US government agencies and contractors (Amazon Inc., 2013c).For simplicity, we assume that physical servers are homogeneous, having the same processing capacity C. However, our framework can be extended relaxing this latter assumption. In the following,NPdenotes the total number of physical servers used for the dedicated execution of WS applications at the PaaS site.On each physical servers, we assume that SaaS VMs are replicated with a fixed pattern for fault-tolerance reasons (Anselmi & Verloop, 2011) (e.g., for every DBMS instance, two instances of application servers and three instances of web servers are allocated) and if any additional physical server is needed, VMs are replicated on the new server according to this fixed allocation pattern. In the following, we will denote byvskthe proportion of VMs for WS application k hosted by one server dedicated to SaaS s.The number of physical servers that the PaaS decides to supply to SaaS provider s is denoted byNs. Since the workload of Internet applications can vary by orders of magnitude within the same business day Birke et al. (2012), the physical servers are dynamically allocated by the PaaS provider periodically, e.g., every hour, according to a short-term workload prediction. One hour is also the time unit which is usually adopted by PaaS and IaaS to bill the use of resources to their customers (Amazon Inc., 2013b). We denote byΛkthe prediction for the arrival rate of WS application k.In this context, each SaaS provider can make the decision of accepting or rejecting a WS application execution request to maximize its own revenue. In other terms, SaaS providers can implement an admission control scheme trading off between the platform costs and the revenues they gain from their customers (Almeida et al., 2010). We assume that such decisions are taken according to some i.i.d. probabilistic law. The resulting application execution rate (or throughput, acceptance rate) is denoted byXk⩽Λk. SaaS providers may possibly incur in penaltiespk⩾0upon rejection of request executions of k. In order to fix the rejection rate above a fixed threshold and guarantee a minimum availability, SaaS s may decide to guarantee a minimum throughputλk.We assume that each physical server runs a Virtual Machine Monitor (VMM) configured in work-conserving mode. The resource allocation mechanism implemented by VMMs can be modeled as a first approximation by the Generalized Processor Sharing (GPS) (Parekh & Gallager, 1994) scheduling (see e.g. Chandra, Gong, & Shenoy, 2003; VMware, 2005). Under GPS, the fraction of the available processing capacity of each server devoted to WS application k at time t is:(1)ϕsk∑l∈K(t)ϕsl,whereϕskdenotes the CPU share, or weight, of application k of the SaaS provider s, andK(t)⊆Asis the set of WS applications with waiting requests at time t.To estimate the per-request mean response time achieved with the GPS mechanism, we adopt the approximation proposed in Anselmi and Verloop (2011, Formula (18)). Under the assumption that the requests of a given application are evenly distributed among the physical servers in a probabilistic manner, the mean response time for application k can be approximated by(2)Rk=NsXk·ρsρskϕskC∑l∈Asvslρslϕsl-ρsρskϕsk,whereXk/Nsis the arrival rate of application-k requests to one physical server of SaaS s (requests are evenly distributed among theNsphysical servers),μkdenotes the maximum service rate of a capacity-one server for executing a class k request,ρsk=defXk/(μkNs)is interpreted as the “utilization” of application k requests, andρs=def∑l∈Asvslρsl. Formula (2) renders the mean response time of a virtual machine when the VMM uses the GPS mechanism described above; we point the interested reader to Anselmi and Verloop (2011) for further details.It is shown in Anselmi and Verloop (2011, Theorem 5) that the mean response time of all SaaS-s applications, that is∑k∈AsXk∑k′∈AsXk′RkwhereRkis given by (2), is minimized whenϕsk=ρsk, for allk∈As. We assume that PaaSs make this choice for the CPU shares, which implies that the average WS application k response time becomes (upon substitution in (2) and noting that∑l∈Asvsl=1)(3)Rk=NsXk·∑l∈AsvslXl/μlCNs-∑l∈AsvslXl/μl.Such choice of the weights induce a fair load-balancing among the number of on-going WS execution requests. In fact, (3) implies that the number on-going WS execution requests of application k, which isRkXk/Nsby Little’s law Lazowska, Zahorjan, Graham, and Sevcik (1984), is independent of k.Remark 1In the remainder of the paper, we use (3) as model of the response time of application k requests on PaaS s. However, part of the results presented below immediately follow by only using the convexity ofRk. This lets us stipulate that they hold also for a wider class of response time functions.Finally, we denote by c the time unit cost for a physical server when it is turned on, including its power consumption and cooling overhead (Greenpeace, 2012).Table 1summarizes the notation used in this paper for quick reference. Note that, the SaaS SLA contract parameters (e.g.,RkSorpk) are usually public available and stored in public registries (Ardagna & Pernici, 2007). Requests arrival rates and resource demands (i.e.,Λk,μk) can be determined by SaaS and PaaS by prediction methods or monitoring (Andreolini & Casolari, 2006; Ardagna, Casolari, Colajanni, & Panicucci, 2012). Vice versa, platform parameters (e.g., servers time unit costs c and the overall number of servers available N) are known only by the PaaS. Hence, the PaaS has or can determine easily the full knowledge of the system parameters.As discussed in Section 1, the goal of the PaaS is to maximize its revenues obtained from the execution of SaaS applications minus the cost incurred with the use of the physical servers.On the other hand, the goal of each SaaS provider is to maximize its payoff which considers the profits obtained from the execution of incoming requests, the costs incurred for the use of the platform and the penalties associated with request rejections. Each SaaS payoff function finally includes also a linear term which takes into account, for each application-k request, the impact of the response timeRkPon the end-user loyalties and expresses the discontent of final end-users experiencing large response times.As it will be detailed in the following, the behavior of the PaaS and the SaaSs in this conflicting situation can be modeled as a GNEP. Section 3.1 formulates the PaaS resource allocation problem, while Section 3.2 formalizes SaaS providers optimization problems. The Generalized Nash equilibria of the game which is originated with this setting are defined in Section 3.3 and a potential function for the game is described in Section 3.4.The PaaS optimization problem is:(4)maxβk,Ns∑k∈AβkXk-∑s∈ScNssubject to:(5)βk⩽αkmk,∀k∈A,(6)∑s∈SNs⩽NP,(7)Ns∑l∈AsvslXl/μlCNs-∑l∈AsvslXl/μl⩽RkPXk,∀s∈S,∀k∈As,(8)∑l∈AsvslXlμl<CNs,∀s∈S.The first and second terms of the payoff function are the revenues for the execution of end-user requests and the costs of using physical servers, respectively. Constraint family (5) guarantees each SaaS with a margin for the execution of end-user requests (mk>1). Constraint (6) entails that the total number of servers adopted is lower than the one available. Constraints (7) guarantee that the average response time for requests execution satisfies the SLA between PaaS and SaaSs. Finally, constraint family (8) guarantees that physical servers resources are not saturated.In the formulation of the PaaS problem, we have not imposed variablesNsto be integer, as in reality they are. In fact, requiring variables to be integer makes the solution much more difficult. Therefore, we consider the continuous relaxation of the problem. However, experimental results have shown that if the optimal values of the variables are fractional and they are rounded to the closest integer solution, the gap between the solution of the real integer problem and the relaxed one is very small. This is a common assumption adopted in the literature (Zhang, Zhu, Zhani, & Boutaba, 2012) and is also intuitive for large scale data centers including thousands of servers.We note that the objective function of the PaaS provider is linear and increasing with respect to variablesβkwhich are bounded above by the constantsαk/mk. Henceβk=αk/mkin every optimal solution of the PaaS provider for any strategy chosen by the SaaS providers. Thus the PaaS revenue for the execution of end-user requests is equal to∑k∈AαkXk/mk, which depends only on variablesXkchosen by SaaS providers and is independent from PaaS variablesNs, hence this term can be deleted from the PaaS objective function. In other words, the PaaS optimization problem consists in minimizing costs of using physical servers. From now on, we assume that the PaaS optimization problem has the following form:(9)maxNsΘp=def-∑s∈ScNssubject to:(10)∑s∈SNs⩽NP,(11)Ns∑l∈AsvslXl/μlCNs-∑l∈AsvslXl/μl⩽RkPXk,∀s∈S,∀k∈As,(12)∑l∈AsvslXl/μl<CNs,∀s∈S.We note that the problem (9)–(12) is easy to solve because constraints (11) and (12) can be rearranged to obtain linear constraints with respect toNsso that each variableNscan be optimized separately. Hence the PaaS optimal solution is(13)Ns=maxk∈AsRkPXk∑l∈AsvslXl/μlCRkPXk-∑l∈AsvslXl/μl,∀s∈S,provided that the sum of the right-hand sides does not exceed the upper boundNP; otherwise there is no feasible solution.The SaaS s optimization problem is:(14)maxXk,RkPΘs=def∑k∈Asαk1-1mkXk-pk(Λk-Xk)+δs(RkS-RkP)Xksubject to:(15)λk⩽Xk⩽Λk,∀k∈As,(16)RkP⩽RkS,∀k∈As,(17)Ns∑l∈AsvslXl/μlCNs-∑l∈AsvslXl/μl⩽RkPXk,∀k∈As,(18)∑l∈AsvslXl/μl<CNs.The first terms of the payoff function compute the net revenues obtained from the execution of end-users’ request. The second terms determine the penalties incurred with request rejections. Finally, the last term evaluates the response timeRkPfor WS application k requests according to the utility function established in the SLA between the SaaS and each end-user. Constraint family (15) states thatXkcannot be larger than the actual arrival rateΛkand smaller than the minimum admission rateλk. Constraint family (16) entails that the response time for application k negotiated with the PaaS is smaller thanRkS. As in the previous section, constraints (17) and (18) guarantee that the application response time satisfies the SLA and that physical servers are not saturated, respectively.The model resulting from the optimization problems described in the previous sections is a Generalized Nash Equilibrium Problem with joint constraints, where the players are the PaaS and SaaS providers: The strategies of the PaaS provider areN=(Ns)s∈S, the strategies of each SaaS provider s areXs=(Xk)k∈AsandRsP=(RkP)k∈As. Each SaaS provider shares constraints (17) and (18) with the PaaS provider.In this setting, a Generalized Nash Equilibrium (GNE) is a set of strategies such that no player can improve its payoff function by changing its strategy unilaterally (Facchinei & Kanzow, 2010), i.e. a GNE is a vector(X‾,R‾P,N‾)such that the following relations hold:(19)Θp(N‾)⩾Θp(N),∀Ns.t.(X‾,R‾P,N)satisfies constraints(10)–(12),and for alls∈S(20)Θs(X‾s,R‾sP)⩾Θs(Xs,RsP),∀(Xs,RsP)s.t.(Xs,RsP,N‾)satisfies constraints(15)–(18).Since (i) the payoff functionΘpof PaaS provider depends only on his own strategiesNs, (ii) the payoff functionΘsof each SaaS provider s only depends on his own strategiesXsandRsP, and (iii) constraints (17) and (18) are shared among the players, we can conclude that this game is a generalized potential game (Facchinei, Piccialli, & Sciandrone, 2011; Monderer & Shapley, 1996) where the potential function is simply the sum of the players payoff functions. This potential function represents a social welfare for the game.Proposition 1The function(21)Π(X,RP,N)=def∑s∈S∑k∈Asαk1-1mkXk-pk(Λk-Xk)+δs(RkS-RkP)Xk-∑s∈ScNsis a potential for the game.We denote byΩthe feasible region containing the variables of all the players, i.e.Ω={(X,RP,N):(10), (11),(12)hold and(15)and(16)hold for alls∈S}.Since this is a generalized potential game, we can assume that the potentialΠis the payoff function of each player; therefore each global maximizer ofΠon the setΩ, called social optimum, is a special Generalized Nash Equilibrium (GNE). In other words, social optima represent the GNE which are optimal from a social point of view.Proposition 2There exists at least one social optimum.First, we prove thatΩis a closed set. For any(X,RP,N)∈Ωwe have:CNs-∑l∈AsvslXlμl⩾Ns∑l∈AsvslXlμlRkPXk[from(11)]⩾Ns∑l∈AsvslXlμlRkSΛk[from(15)and(16)]⩾∑l∈AsvslXlμl2CRkSΛk[from(12)]⩾∑l∈Asvslλlμl2CRkSΛk[from(15)]for alls∈Sandk∈As. Therefore we obtain that(22)CNs-∑l∈AsvslXlμl⩾maxk∈As∑l∈Asvslλlμl2CRkSΛk∀s∈S,hence in the definition ofΩwe can replace constraints (12) with constraints (22), thusΩis a closed set. SinceΩis also bounded andΠis continuous, the existence of social optima follows from the well-known Weierstrass theorem. □The Cloud provisioning game is extremely challenging since the number of SaaS providers|S|and WS applications|A|characterizing problem instances of interest in practice are extremely large (i.e., hundreds of SaaS and thousands of applications (Birke et al., 2012)). In order to identify efficient solution methods, in this section we analyze the social optimum problem determining its main properties.In particular, we will show that constraints (11) hold as equality in any social optimum and that the social optimum problem is convex. Furthermore, bounds relating the platform capacity, the energy costs and the penalties incurred in case of requests rejection will be identified for interesting system regimes.Proposition 3If(X‾,R‾P,N‾)is a social optimum, then the response time constraints(11)are all active, i.e.(23)N‾s∑l∈AsvslX‾l/μlCN‾s-∑l∈AsvslX‾l/μl=R‾kPX‾k,∀s∈S,∀k∈As.Suppose, by contradiction, that there exists an indexk∈As, for some s, such thatN‾s∑l∈AsvslX‾l/μlCN‾s-∑l∈AsvslX‾l/μl<R‾kPX‾k.If we slightly decrease the value ofR‾kP, keeping fixed the values of the other variables, we obtain a new feasible vector(X,RP,N)such thatΠ(X,RP,N)>Π(X‾,R‾P,N‾), which is impossible.□It follows from Proposition 3 that the variablesRkPcan be expressed as function ofXkandNs, hence the social optimum problem can be rewritten as follows:(24)maxX,N∑s∈S∑k∈Asαk1-1mkXk-pk(Λk-Xk)+δsRkSXk-∑s∈ScNs+δs|As|Ns∑l∈AsvslXl/μlCNs-∑l∈AsvslXl/μlsubject to:(25)λk⩽Xk⩽Λk,∀k∈A,(26)Ns∑l∈AsvslXl/μlCNs-∑l∈AsvslXl/μl⩽RkSXk,∀s∈S,∀k∈As,(27)∑s∈SNs⩽NP,(28)∑l∈AsvslXl/μl<CNs,∀s∈S.Proposition 4The social optimum problem(24)–(28)is convex.We have to prove that the objective function is concave and all the constraints are convex. To this end, it is sufficient to show that the functions(Xs,Ns)↦Ns∑l∈AsvslXl/μlCNs-∑l∈AsvslXl/μlare convex when constraints (28) are satisfied. Since all these functions have the same structure, we can consider only the functionh(x1,…,xn,y)=defy∑i=1naixiby-∑i=1naixi,where variablesx=(x1,…,xn)and y correspond toXsandNsrespectively, and the constantsai>0andb>0tovsl/μland C respectively. Therefore, it is sufficient to prove that the function h is convex whenby-∑i=1naixi>0(which corresponds to constraint (28)).The first derivatives of h are∂h∂xj=bajy2(by-∑i=1naixi)2,j=1,…,n,∂h∂y=-∑i=1naixi2(by-∑i=1naixi)2;the second derivatives of h are∂2h∂xj∂xℓ=2bajaℓy2(by-∑i=1naixi)3,j,ℓ=1,…,n,∂2h∂xj∂y=-2bajy∑i=1naixi(by-∑i=1naixi)3,j=1,…,n,∂2h∂y2=2b∑i=1naixi2(by-∑i=1naixi)3.Thus the Hessian matrix of h is∇2h(x1,…,xn,y)=2bby-∑i=1naixi3a12y2⋯a1any2-a1y∑i=1naixi⋮⋱⋮⋮a1any2⋯an2y2-any∑i=1naixi-a1y∑i=1naixi⋯-any∑i=1naixi∑i=1naixi2.For any vectoru=(u1,…,un,un+1)∈Rn+1we haveuT∇2h(x1,…,xn,y)u=2b(by-∑i=1naixi)3uTa1y2∑i=1naiui-a1yun+1∑i=1naixi⋮any2∑i=1naiui-anyun+1∑i=1naixi-y∑i=1naixi∑i=1naiui+un+1∑i=1naixi2=2b(by-∑i=1naixi)3y2∑i=1naiui2-2yun+1∑i=1naiui∑i=1naixi+un+12∑i=1naixi2=2b(by-∑i=1naixi)3y∑i=1naiui-un+1∑i=1naixi2.Therefore, ifby-∑i=1naixi>0, then the Hessian matrix of h is positive semidefinite and hence h is convex.□In the rest of this section we analyze the Karush–Kuhn–Tucker (KKT) system of the social optimum problem and derive some bounds for the social optima relating the platform capacity, the energy costs and the penalties incurred in case of requests rejection.Since the social optimum problem is convex and the Slater constraint qualification holds, the KKT conditions are necessary and sufficient for the optimality. If we denoteLki⩾0, fork∈Aandi=1,2,3, the KKT multipliers associated to constraints (25) and (26), andL4⩾0, the multiplier associated to constraint (27), then the KKT system is the following:(29)αk1-1mk+pk+δsRkS-CvskNs2μk(CNs-∑l∈AsvslXl/μl)2δs|As|+∑l∈AsLl3+Lk1-Lk2+Lk3RkS=0,∀s∈S,∀k∈As,(30)-c+∑l∈AsvslXl/μlCNs-∑l∈AsvslXl/μl2δs|As|+∑l∈AsLl3-L4=0,∀s∈S,(31)Lk1(Xk-λk)=0,∀k∈A,(32)Lk2(Xk-Λk)=0,∀k∈A,(33)Lk3Ns∑l∈AsvslXl/μlCNs-∑l∈AsvslXl/μl-RkSXk=0,∀s∈S,∀k∈As,(34)L4∑s∈SNs-NP=0,constraints(25)–(28).In the following we will analyze two limiting regimes for the Cloud system. In particular Proposition 5 considers that the system provides very good performance for a provider s (i.e., the constraints (26) are not active for the whole set of WS applicationsAshosted at the PaaS site), which corresponds to light load conditions for the SaaS s. Vice versa, Proposition 6 considers the case a provider s is under heavy load and the minimum workload is served for every WS applications inAs. These results are used in Section 5 to identify the initial solution for our resource allocation algorithm, and, as it will be further discussed in Section 6, they allow to achieve the best efficiency in terms of PoA.In the remainder of the paper, we will denote withΨsk=αk1-1mk+pk+δsRkSand we setΩsk=vskC/μk.Proposition 5If(X,N)is a social optimum solution and there exists a SaaS provider s such thatXk=Λkand the response time is strictly lower thanRkSfor all WS applicationsk∈As, then:(35)∑k∈AsvskΛk/μkC-δs|As|mink∈AsΨsk/Ωsk⩽Ns⩽c+δs|As|Cc∑k∈AsvskΛk/μk.Since for allk∈Asthe constraint (26) is not active andXk=Λk, we obtainLk1=Lk3=0. It follows from (29) thatΨsk-Ωskδs|As|Ns2(CNs-∑l∈AsvslXl/μl)2=Lk2⩾0∀k∈As,hence we havemink∈AsΨskΩsk⩾δs|As|Ns2(CNs-∑l∈AsvslXl/μl)2.SettingXl=Λland taking into account the equilibrium conditionCNs-∑l∈AsvslΛl/μl>0, we obtain the first inequality of (35).On the other hand, it follows from (30) thatδs|As|∑l∈AsvslXl/μlCNs-∑l∈AsvslXl/μl2-c=L4⩾0.SettingXl=Λlfor alll∈As, we getδs|As|c∑k∈AsvslΛl/μl2⩾CNs-∑l∈AsvslΛl/μl2,which, together with the equilibrium conditionCNs-∑l∈AsvslΛl/μl>0, implies the second inequality of (35). □If(X,N)is a social optimum solution and there exists a SaaS provider s such thatXk=λkand the response time is strictly lower thanRkSfor all WS applicationsk∈As, then(36)Ns⩽min1C-δs|As|maxk∈AsΨsk/Ωsk,c+δs|As|Cc∑k∈Asvskλk/μk.Since for allk∈Asthe constraint (26) is not active andXk=λk, we obtainLk2=Lk3=0. From (29) we obtainΨsk-Ωskδs|As|Ns2(CNs-∑l∈AsvslXl/μl)2=-Lk1⩽0,∀k∈As,hence we havemaxk∈AsΨskΩsk⩽δs|As|Ns2(CNs-∑l∈AsvslXl/μl)2.SettingXl=λland taking into account the equilibrium conditionCNs-∑l∈Asvslλl/μl>0, we obtain(37)Ns⩽∑l∈Asvslλl/μlC-δs|As|maxk∈AsΨsk/Ωsk.On the other hand, from (30) we getδs|As|∑l∈AsvslXl/μlCNs-∑l∈AsvslXl/μl2-c=L4⩾0.SettingXl=λlfor alll∈As, we getδs|As|c∑k∈Asvslλl/μl2⩾CNs-∑l∈Asvslλl/μl2,which, together with the equilibrium conditionCNs-∑l∈Asvslλl/μl>0, implies(38)Ns⩽c+δs|As|Cc∑k∈Asvskλk/μk.Finally, the thesis follows from (37) and (38).□In the previous section it has been proved that the social optimum problem is convex and, from a theoretical point of view, it could be solved by the PaaS which has the full knowledge of system parameters (see Section 2). However, computational results demonstrate that only small instances can be solved to optimality with commercial nonlinear optimization packages (see Section 6). To handle representative problem sizes, in this Section we provide a solution algorithm which converges to a GNE. Several different versions of the algorithm we implemented are characterized by a different choice of the initial solution.Before describing the solution algorithm, we analyze in more details the PaaS and SaaSs problems. In Section 3.1 we have shown that PaaS problem is easy to solve. On the other hand, the SaaS problem (14)–(18) cannot be solved analytically, but it can be reformulated as a convex problem. In fact, we can prove similarly to Proposition 3 that constraints (17) are active in any SaaS optimal solution. Hence, the variablesRkPcan be expressed as function ofXkby formula (23) and we can rewrite the SaaS problem as follows:(39)maxXs∑k∈Asαk1-1mkXk-pk(Λk-Xk)+δsRkSXk-δs|As|Ns∑l∈AsvslXl/μlCNs-∑l∈AsvslXl/μlsubject to:(40)λk⩽Xk⩽Λk,∀k∈As,(41)Ns∑l∈AsvslXl/μlCNs-∑l∈AsvslXl/μl⩽RkSXk,∀k∈As,(42)∑l∈AsvslXl/μl<CNs.Finally, it can be proved that this problem is convex following the proof of Proposition 4.Now, we describe the solution algorithm and prove that it converges to a GNE.Solution Algorithm1.An initial value for the number of physical servers of each SaaSNsis identified.If∑s∈SNs>NP, the PaaS provider reducesNsproportionally to constraint (10) violation, i.e. the PaaS sets(43)N‾s=NsNP∑s′∈SNs′,∀s∈S;otherwise PaaS provider setN‾s=Nsfor alls∈S.GivenN‾, each SaaS provider s finds a optimal solution(X‾k)k∈As, of the convex optimization problem (39)–(42) and setR‾kP=1X‾kN‾s∑l∈AsvslX‾l/μlCN‾s-∑l∈AsvslX‾l/μl,∀k∈As.The algorithm performs three simple steps. An initial estimate for the number of physical servers is identified. If the initial server assignment is unfeasible, then the PaaS reallocates servers among SaaSs. Finally, each SaaS computes the optimal values for(X‾s,R‾sP)accordingly to its objective. We can obtain many different versions of the algorithm according to the way and the players (SaaS or PaaS) that select the initial number of servers. We first prove that the solution algorithm converges to a GNE, then we formulate five alternative methods that will be evaluated in the next section.Proposition 7IfN‾is such that the feasible region(40)–(42)of each SaaS provider is non-empty, then the vector(X‾,R‾P,N‾)found by the solution algorithm is a GNE.Since each SaaS determines the best reply(X‾s,R‾sP)to the PaaS strategyN‾, we obtain that all the constraints (17) are active. Thus, by formula (13) also the strategyN‾of the PaaS is the best reply to the strategies(X‾,R‾P)of the SaaS players. Hence(X‾,R‾P,N‾)is a GNE because of relations (19) and (20).□According to the previous result, the solution algorithm finds a GNE. However, the equilibrium is found in a single best reply dynamic iteration and depends on the arbitrary choice N at step 1. Hence, finding good equilibria for the problem under study could be hard. We have implemented the following heuristic methods for defining a vector N which provides a good equilibrium.•Method 1: Each SaaS randomly selectsNsat step 1. Random initialization at step 1 is considered as a benchmark for the comparison of alternative methods.Method 2: At step 1, each SaaS setsXkrandomly in the interval[λk,Λk]and determinesNssuch that physical servers average utilization is∑l∈AsvslXlCNsμl=0.6. In other words, the initial number of physical servers is determined according to the utilization thresholds principle which is an heuristic for Cloud systems resource allocation widely used in the literature (Cherkasova & Phaal, 2002; Wolke & Meixner, 2010; Zhu et al., 2009) and adopted in practice by IaaS/PaaS providers (Amazon Inc., 2013b).Method 3: At step 1, each SaaS s maximizes the function∑k∈Asαk1-1mkXk-pk(Λk-Xk)+δsRkSXk-cNs-δs|As|Ns∑l∈AsvslXl/μlCNs-∑l∈AsvslXl/μlsubject to constraints (40)–(42), considering bothXsandNsas decision variables.Method 4: At step 1, the PaaS setsNs=c+δs|As|Cc∑k∈AsvskΛk/μk,according to Proposition 5.Method 5: At step 1, the PaaS setsNs=min1C-δs|As|maxk∈Ascsk/Ωsk,c+δs|As|Cc∑k∈Asvskλk/μk,according to Proposition 6.Note that the initialization steps implemented by methods 4 and 5 are performed by the PaaS provider, since they require the knowledge of the time unit cost c of use of the physical servers, which is usually unknown by the SaaS providers. Method 3 can be implemented in practice only if the PaaS shares c with SaaSs. Methods 1–5 are suitable for a distributed implementation and require at most three messages exchange between each SaaS and PaaS (for providing the initial service demand, to communicate the effective number of physical servers, and finally set up the WS applications response time threshold and overall throughput).The solution algorithm proposed has been evaluated for a variety of system and workload configurations. Section 6.1 is devoted to quantitatively analyze the efficiency of the equilibria achieved by our approach, while the scalability is discussed in Section 6.2. Finally, Section 6.3 illustrates the equilibria properties for a medium size system by varying application performance parameters.To evaluate the efficiency of our algorithm we have considered a very large set of randomly generated instances. The number of SaaS providers has been varied between 100 and 1000, the number of applications (evenly shared among SaaSs) between 1000 and 10,000.1We have verified that the performance of our solution is not affected by the applications to SaaSs assignment cardinality (we varied the number of applications per SaaS in the range 1–100), both in terms of Price of Anarchy and execution time. Results are omitted for space limitation.1The performance parameters of the applications and infrastructural resources costs have been randomly generated uniformly in the ranges reported in Table 2as in Anselmi and Verloop (2011); Ardagna et al. (2012); Kusic, Kephart, Hanson, Kandasamy, and Jiang (2008), considering also real applications (Ardagna et al., 2013), according to commercial fees applied by IaaS/PaaS Cloud providers (Amazon Inc., 2013b; Microsoft, 2013) and the energy costs available in the literature (Greenpeace, 2012). We have included in the time unit cost c of a physical server also the overhead of the cooling system according to the values reported in Greenpeace (2012), varying also the cost of energy per kWh. Furthermore, the penalty valuespkhave been set proportional to the revenues for single request executionαk,pk=γk1αk, whereγk1has been randomly generated uniformly in the range[5,50], as in Zhang and Ardagna (2004), while the upper bounds on the average response time thresholds guaranteed to the SaaS customers were set proportional to the request service demand1/μk, i.e.,RkS=γk2/μk, whereγk2has been randomly generated uniformly in the range [100,200], as in Ardagna and Pernici (2007). Finally, since request rejection has an important impact on SaaS provider reputation, we setλk=0.95Λk.We denote withx∼any social optimum and withx‾the GNE found by the solution algorithm using methods 1–5. The efficiency has been measured in terms of the Price of Anarchy (PoA) evaluated asPoA=Π(x‾)Π(x∼).The PoA is a measure of the inefficiency due to PaaS and SaaSs selfish behavior with respect to the scenario where the social optimum is pursued. The metric is lower or equal to 1 (the greater the better).Random instances have been generated guaranteeing that the constraint (27) is active, which corresponds to the worst case situation for a Cloud system (heavy workload) and for the proposed methods which otherwise can determine the social optimum naively (e.g., if the servers are not saturated, PoA is always equal to 1 for method 3). This has been obtained by solving the social optimum problem with an infinite number of servers and then by settingNPequal toρtimes the total number of servers actually used. In order to evaluate the robustness of our solution,ρhas been set equal to 0.9, 0.8 and 0.7, which corresponds to increasing workload conditions for the PaaS.Results are reported in Tables 3–5. The figures reported in each table are the means computed on 10 different runs.For every method the PoA does not depend significantly on the system size, neither on the system workload conditions. Furthermore, methods 1–3 perform similarly, the PoA is around 0.4 (i.e., on average the percentage difference of the sum of the payoff functions with respect to the social optimum is lower than 60%). This means that the heuristic solution based on the utilization threshold proposed in the literature (implemented by method 2) achieves the same results of random initialization (implemented by method 1). Vice versa, methods 4 and 5, based on the analysis of the KKT system of the social optimum problem, allow to improve the PoA by 15% and 25%, respectively.The scalability of our approach has been evaluated performing tests on a VMWare virtual machine based on Ubuntu 11.04 server, running on an Intel Nehalem dual socket quad-core system with 32gigabytes of RAM. The virtual machine has a physical core dedicated with guaranteed performance and 4gigabytes of memory reserved. KNITRO 8.0 has been used as nonlinear optimization solver, which can exploit the multi-core architecture of our system. We have considered a very large set of randomly generated instances obtained as in the previous Section varying the model parameters according to the ranges reported in Table 2.Table 6reports the average execution time required by our methods for problem instances of different sizes. As in the previous section, the average values reported in the table have always been computed by considering 10 instances with the same size. Results show that the proposed methods are very efficient and can solve problem instances of maximum size in less than one minute. Usually in Cloud systems resource allocation is performed periodically on a hourly basis (Almeida et al., 2010; Armbrust et al., 2009; Birke et al., 2012). Hence, a social optimum solution can be computed directly by the PaaS only for problem instances including 700 SaaSs and 7000 WS applications which are not very significant in practice.The aim of this section is to analyze how the equilibrium changes by varying the game parameters. The results have been obtained by Method 5 only, since the methods proposed do not differ significantly in terms of execution time and Method 5 performs better in terms of PoA.In particular, we considered three SaaSs offering five heterogeneous applications each. If not differently stated we setαk=0.5$/req,μk=10kreq/second,mk=1.5,c=0.09$/hour,Λk=450req/second, andδs=0.45(i.e., we considered the midpoint of the random intervals reported in Table 2). For the sake of simplicity, we considered the following application to SaaS provider assignmentA1={1,…,5},A2={6,…,10},A3={11,…,15}.In the following we will vary one parameter at the time for the first applicationk=1, while the parameters of the remaining ones will be held fixed. We will investigate how the parameter change will affect: (i) the throughput ratio of WS application 1, i.e.,X1/Λ1, (ii) the throughput of the remaining applications for the first provider (i.e.,∑k=25Xk) and the total throughput of the remaining providers (i.e.,∑k=615Xk), (iii) the number of servers of the first SaaS providerN1, and (iv) WS application 1 average response timeR1.Figs. 2–5show the results we achieved by varyingΛ1in[495,1165]req/second: AsΛ1increases, the number of servers used by the SaaS provider 1 increases also linearly (Fig. 4), whileR1decreases non-linearly improving by around 57% (Fig. 5). Vice versa,X1/Λ1ratio is not affected significantly and stays close to 1 (Fig. 2), as the overall throughput of the remaining applications (Fig. 3).Figs. 6–9analyze how the GNE changes by varying application 1 maximum service rateμ1(the range[60,510]req/second has been considered). If the maximum service rate increases, the service time required to process each WS application 1 request decreases and the overall capacity required to process WS application 1 decreases accordingly (Figs. 8 and 9). Vice versa, application throughput is not affected (see Figs. 6 and 7).Surprisingly, varying the revenue for application 1 single request execution (α1varied in[0.17,1.02]$/req) has no impact on the metrics under analysis, see Figs. 10–13(however, recall that WS application rejection penaltyp1is proportional toα1).Finally, we varied SaaS provider 1 utility function slopeδ1in the range [0.2,1]. Asδ1increases, the metrics under analysis remain almost constant but change abruptly whenδ1=0.82(see Figs. 14–17). For that value, the ratioX1/Λ1drops suddenly from 100% to 95% (the minimum achievable value), which is very unintuitive.

@&#CONCLUSIONS@&#
We proposed a game-theoretic approach for the run-time management of a PaaS provider capacity among multiple competing SaaSs. The cost model consists of a class of utility functions which include revenues and penalties incurred depending on the achieved performance level and the energy costs associated with PaaS resources.The solution methods proposed have been evaluated for a variety of system and workload configurations and have been demonstrated effective even for very large size problem instances. Systems up to thousands of applications can be managed very efficiently.Results have shown that solution methods proposed by the literature and the one based on random initialization perform similarly from the PoA point of view. Vice versa, methods 4 and 5 which have been obtained through the analytical analysis of the social optimum problem, allow to improve PoA by 15–25%. Future work will extend the proposed solutions to consider multiple time-scales for performing resource allocation ranging from few minutes to one hour. Finally, the opportunity to allocate SaaS applications on multiple PaaS providers will be also investigated.