@&#MAIN-TITLE@&#
Private surveys on VoIP

@&#HIGHLIGHTS@&#
We propose an eVoting framework to preserve the privacy of the voters.The voters will receive questions depending on their answers to previous questions.The platform is built upon a cloud computing system, VoIP technologies and a new eVoting platform.

@&#KEYPHRASES@&#
Privacy,Audio streaming,eVoting,Survey,

@&#ABSTRACT@&#
In a question-driven survey, the answers to one question may decide which question is presented next. In this case, encrypting the answers of the participants is not enough to protect their privacy since the system is able to learn them by inspection of the next question the participants request.In this article, we explore the technologies involved in surveys performed through a mobile phone. Participants receive the questions using VoIP technologies and, since their answers affect which questions are presented next, they must protect the selection of the relevant questions. In addition, this paper considers the performance of the proposed encryption technologies in mobile phones. Finally, the answers to the poll must be sent to the server. This paper proposes an eVoting framework to preserve the privacy of the users while sending the answers to the system.Such a scenery involves many different communication channels and technologies. As we will show, the decisions taken in some of the modules force some technologies and decisions in the others.

@&#INTRODUCTION@&#
Privacy concerns modify how people answer surveys, resulting in emotional reactions and biased responses. Researchers in the social science field reported [1–3] that falsification of responses about sensitive matters is a common problem in social surveys and undercut their usefulness. The concerns about how the data collected by the system is managed is one of the main reasons to provide a false answer. In order to circumvent this psychological reaction, we propose a system to perform private opinion polls using state-of-the-art technologies in VoIP and eVoting.Our research is focused on surveys run through a phone line. In this case, the poller calls to the participants and asks them questions. The participants will provide a ballot to the poller with their answers at the end of the survey. In some cases, the next question depends on the answer to the previous one. For example, a survey about the religious knowledge of US citizens had different questions according to the self-declared religion of those polled [4]. Another example is the periodic labor force survey run by many European governments [5] (EU LFS). In this survey, the answer to some questions such as the number of family members or whether the person was actively seeking for a job in the last week directly modifies the next question. Another example of this kind of opinion surveys for a traditional eVoting scenario is the self-determination referendum proposed by the Catalan government [6]. In this referendum, there are two questions with NO/YES answers. Answering the second question only makes sense if the answer to the first was a YES.11At the moment of writing this article, the referendum was halted by Spain’s constitutional court.In all these examples, even if the answers to the questions are kept in secret, the provider is able to learn private information about a participant just by inspection of the question requested to the system. For example, if a participant request a question about how many times he/she attends the Mass, the poller learns that the participant is a religious person. In an official survey, such as the one of the Catalan government, requesting the second question leaks to the system that the voter answered YES to the first question.The system we will describe involves two steps. They are both shown in Fig. 1and analyzed in this paper.1.Users get the questions from the server while preserving privacy. This will be explored in Section 2. Section 2.1 presents the schemes of private streaming that we will use in this article, and analyzes the use they make of the network. Section 2.3 describes how these schemes are implemented on a VoIP system where servers are organized as a tree in a cloud computing environment. The description of this step is the main contribution of this paper.Users send their answers to the poller. This will be described in Section. 3, which deals with the problem of sending the answers of the users to the poller while preserving his privacy. This step is only hinted in this paper. It is still under development and it will be described in depth in a future work.We will describe a survey service that can provided as a VoIP service and the participants in the survey will use their personal phones. The questions are not presented by a human operator, but by an automatic system that stream pre-recorded questions as requested. The main interest of the system described in this article is the protection of the privacy of the answers. If the participants are convinced their answers are really private, they are expected to provide better and more accurate answers. Hence, participants will see the pollers as opponents. Participants want to answer the questions but they do not want to leak their specific answer if some questions depend on the answer to previous questions.During this article, we will organize questions as a K-ary tree where the next question to be presented to the participant depends on the answer to the previous question. An example of a simple question is shown in Fig. 2.There are two alternatives to control the voter navigation through the question tree during the voting phase:1.The voting client receives the full tree of questions from the voting server at the beginning of the voting process and decides which question present to the voter depending on the answer she provided at the previous one. Depending of the size of the set of questions and possible ways to rephrase them (for example, due to the different income brackets, or different available languages), the amount of data the phone must download from the Internet before starting the questionnaire may be significant. This is the case of the EU LFS [5].The voting client requests to the server the next question to be presented to the user, based on the answer provided at the previous question. This second alternative raises privacy risks, since the server could infer, from the requests made by the voting client, which are the answers given by the participant.If the user downloads directly from the database the audio file of each question after answering the last one, the database learns immediately the user’s answer to the last question, and this is the behavior that we wish to avoid. We aim to develop a system where the user downloads the ith question from the database, without the database learning the index i. As a result, the attacker of our system is the question database, and he is successful if he learns the index i of the question requested by the participant.This objective is in line with the objectives of an eVoting system. In an eVoting systems, voters want to participate without leaking their vote. To do so, the voters submit their opinions using specific cryptographic mechanisms. We will adapt one of these eVoting systems to VoIP polls. Participants in the surveys will receive the questions from pollers by means of VoIP technologies, and they will make use of a Private Information Retrieval system (PIR) to not leak any information about the questions they are currently answering.During this work, we will assume the participants download and install an application on their phones to answer these polls. We are aware the use of and external application is undesirable. How this could be done without installing an application on the personal mobile phone is a very interesting open issue. At the time being, we will focus our efforts on providing a secure system to answer polls even if it involves installing an application. The provision of smart, advanced services on VoIP systems without the need of an external application will remain an open issue.For the sake of simplicity, a full K-ary tree is considered and during the development of this article every question has the same number k of sub-questions. In order to simplify the management of the answers, we define that the possible answers for each question are in a well-knows, closed set. For example, yes-no, Jew–Christian–Muslim–Atheist. We assume that the server organizes the N different audio files of the questions in an ordered databasea¯={a1,…,aN}. To model the relation between the questions, there is an inner reference such as if the user answers b to question number 2, question number 5 should be presented and if he answers c, then question 7 is next.We define an attacker model where users and databases follow the protocols, and attackers are only passive observers of the communication. Indeed, a misbehaving database can be immediately detected. For example, if the user does not receive a playable file of the received question does not make sense.

@&#CONCLUSIONS@&#
This article presents a mesh-up of different technologies to provide privacy during a poll performed over VoIP. If the next question depends on the answer to previous questions, even if the answers are not sent to the poller in clear, the index of the question the participant requests may leak enough data to the poller to learn private information.The system provided in this paper is based on state-of-the-art Private Information Systems and eVoting. It explores some current proposals in the literature about efficiency of the PIR system, and concludes that the PIR protocol used to select questions depends on the size of the audio files of the system and how the system is configured to cut down these files for streaming. Simple approaches are more suitable for the needs of the application than complex organizations of queries. The system must be aware of the size of the question file, and select one mechanism or the other depending on this size. Initial simulations of the system showed that an important bottleneck was present at the client side. That is, the encryption mechanisms need the calculation of large vectors and these calculations are slow on current mobile phones as our initial implementations showed.To address this issue, we have described a cloud system to organize databases in a tree that minimizes the size of the selection vector for the participants in the survey and makes the system more efficient and feasible. Despite our initial simulations and analysis, the cloud of databases was not implemented. We are especially concerned about the creation of the selection vector in a smartphone with constrained memory and processing power. Even if we feel that the results provided by the theoretical analysis are promising, an implementation of the final system to validate our ideas is very convenient. Currently, we are working on this implementation.Finally, we presented a system to send back the answers to the survey to the poller. This system is based on eVoting technologies, and warrants the privacy of the user and the anonymity of each one of the ballots issued by the participants. This system is already implemented and will be fully described in future papers.