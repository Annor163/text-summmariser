@&#MAIN-TITLE@&#
Constrained differential evolution with multiobjective sorting mutation operators for constrained optimization

@&#HIGHLIGHTS@&#
This study proposes a new constraint differential evolution framework.Parents in the mutation operators are selected in proportion to their rankings based on fitness and diversity.The framework can be applied to most constraint differential evolution variants.The proposed framework is tested on CEC’2006 and CEC’2010 benchmarks.

@&#KEYPHRASES@&#
Differential evolution,Constrained optimization,Exploration and exploitation,Diversity,Nondominated sorting,

@&#ABSTRACT@&#
Differential evolution (DE) is a simple and powerful evolutionary algorithm for global optimization. DE with constraint handling techniques, named constrained differential evolution (CDE), can be used to solve constrained optimization problems (COPs). In existing CDEs, the parents are randomly selected from the current population to produce trial vectors. However, individuals with fitness and diversity information should have more chances to be selected. This study proposes a new CDE framework that uses nondominated sorting mutation operator based on fitness and diversity information, named MS-CDE. In MS-CDE, firstly, the fitness of each individual in the population is calculated according to the current population situation. Secondly, individuals in the current population are ranked according to their fitness and diversity contribution. Lastly, parents in the mutation operators are selected in proportion to their rankings based on fitness and diversity. Thus, promising individuals with better fitness and diversity are more likely to be selected as parents. The MS-CDE framework can be applied to most CDE variants. In this study, the framework is applied to two popular representative CDE variants, (μ+λ)-CDE and ECHT-DE. Experiment results on 24 benchmark functions from CEC’2006 and 18 benchmark functions from CEC’2010 show that the proposed framework is an effective approach to enhance the performance of CDE algorithms.

@&#INTRODUCTION@&#
Most real world optimization problems have constraints of different types (e.g., physical, time, geometric, etc.) which modify the shape of the search space. During the last couple of decades, a wide variety of metaheuristics have been designed and applied to solve constrained optimization problems (COPs) [1]. What constitutes a great challenge of the optimization problems are the various constraints imposed upon decision variables, the types of constraints involved, interferences among constraints, and the interrelationship between constraints and objective functions. Therefore, COPs are generally more difficult to solve than unconstrained ones. Due to the presence of constraints, the feasible space might be reduced to some portion of the overall search space, and finding feasible solutions itself can be a daunting challenge.Differential evolution (DE), which was first proposed by Storn and Price [2], is one of the most powerful evolutionary algorithms for global numerical optimization. The advantages of DE are its ease of use, simple structure, speed, efficiency, and robustness [3,4]. Recently, DE has been successfully applied in diverse domains [4–6]. DE, coupled with constraint handling techniques, has been used to solve COPs and has been dubbed constrained differential evolution (CDE). In the CDE algorithm, the core operator is differential mutation. Generally, the parents in the mutation are always randomly chosen from the current population. Since the parent vectors in the mutation are selected randomly, it may lead CDE to be good at exploring the search space and locating the region of global minimum, but to be slow at exploitation of the solutions [7].In view of the limitations of previous work, we extend our previous improved DE framework [8] to solve COPs. Hence, constrained DE with multiobjective sorting based mutation operators, called the MS-CDE framework, is proposed in this study. In MS-CDE, fitness and diversity information is introduced, with the aim of favoring those individuals with both high fitness values and high diversity contributions. In this way, two underlying objectives, fitness and diversity, are considered simultaneously. The proposed scheme is named the multiobjective sorting based mutation operator. More specifically, individuals in the current population are first sorted according to their fitness and diversity contribution by using nondominated sorting from the multiobjective optimization field. Then some of the parents in the mutation operators are proportionally selected according to their rankings; thus, the promising individuals with better fitness and diversity have more opportunity to be selected as parents.The major advantages of the MS-CDE framework are its simplicity and generality, which makes it easily combine with most of the CDE variants. In order to evaluate the effectiveness of MS-CDE, the proposed framework is applied to two representative CDE variants, (μ+λ)-constrained differential evolution ((μ+λ)-CDE) and ensemble of constraint handling techniques using the DE (ECHT-DE). We chose 24 benchmark functions presented in CEC’2006 [9] and 18 benchmark functions presented in CEC’2010 [10] as the test suite. Experimental results verify our expectation that the MS-CDE framework is able to accelerate these CDE variants in the majority of test cases, and MS-CDE is also able to enhance the performance for CDE variants in solving constrained optimization problems.The main contributions of this study are as follows:(1)In CDE, the parents are randomly selected from the current population to produce trial vectors, regardless of fitness and diversity information. However, when fitness and diversity information is used with multiobjective sorting to select the parents, a good balance between exploration and exploitation can be achieved. The balance between exploration and exploitation is a core of all kinds of CDEs. The proposed approach provides a simple yet efficient way to deal with the balance.The proposed approach is simple because it keeps the simple structure of the CDE algorithm, and no additional parameter is introduced. The proposed approach can be easily applied to other advanced CDE variants (i.e., (μ+λ)-CDE [11], ECHT-DE [12]) and thus cooperate with different kinds of modifications in advanced DE variants to further improve the performance. This provides a promising approach for solving benchmarks.The rest of this paper is organized as follows. Section 2 briefly introduces the COPs and the original DE algorithm. Related work is reviewed in Section 3. The proposed framework (MS-CDE) is presented in detail in Section 4. In Section 5, experimental results are reported. Finally, conclusions are drawn in Section 6.In this section, we first introduce the COPs used in this work. Then, the original DE algorithm is described.In this study, the following optimization problem with inequality constraints, equality constraints, upper bound constraints and lower bound constraints are discussed.(1)minimizef(x)subject to(2)gj(x)≤0,j=1,…,q(3)hj(x)=0,j=q+1,…,m(4)li≤xi≤ui,i=1,…,nwhere x=(x1, x2,…, xn) is an n dimensional vector, f(x) is an objective function, gj(x) ≤0 and hj(x)=0 are q inequality constraints and m–q equality constraints, respectively. Functions f, gjand hjare linear or nonlinear real-valued functions. Values uiand liare the upper bound and the lower bound of xi, respectively. Also, let the feasible space in which every point satisfies all constraints be denoted by U and the search space in which every point satisfies the upper and lower bound constraints be denoted byS(⊂U).In evolutionary constrained optimization, equality constraints are always converted into inequality constraints(5)|hj(x)|−δ≤0where j∈{q+1,…,m} and δ is a positive tolerance value. The distance of a solution x from the j-th constraint can be constructed as(6)Gj(x)=max{0,gj(x)},1≤j≤qmax{0,|hj(x)|−δ},q+1≤j≤mThen, the distance of the solution x from the boundaries of the feasible set, which also reflects the degree of its constraint violation, can be denoted as(7)G(x)=∑j=1mGj(x)DE is a very popular EA which exhibits remarkable performance in optimizing a wide variety of problems in diverse fields. It evolves a population of NP candidate individuals (solutions) with n-dimensional parameter vectors; each individual is denoted as xi,t=[xi,1,t, xi,2,t,…, xi,n,t], where i=1, 2,…, NP, and t is the current generation. It has three main operators: mutation, crossover and selection. The main procedure of DE is described in the following subsections.Mutation: This operator generates a mutant vector vi,twith respect to each individual xi,t(named a target vector). The originally proposed and most frequently used mutation strategies in the literature are [13,14]:(8)rand/1:vi,t=xr1,t+F⋅(xr2,t−xr3,t)(9)best/1:vi,t=xbest,t+F⋅(xr1,t−xr2,t)(10)current-to-best/1:vi,t=xi,t+F⋅(xbest,t−xi,t)+F⋅(xr1,t−xr2,t)(11)best/2:vi,t=xbest,t+F⋅(xr1,t−xr2,t)+F⋅(xr3,t−xr4,t)(12)rand/2:vi,t=xr1,t+F⋅(xr2,t−xr3,t)+F⋅(xr4,t−xr5,t)where indices r1, r2, r3, r4, and r5 are distinct integers randomly selected from the set {1, 2,…, NP}\{i} and xbest,tis the best individual in the population at generation t. The scaling factor F is a real number and is usually chosen between 0 and 1.Crossover: After mutation, a binomial crossover operation is applied to create the trial vector ui,tas follows:(13)ui,j,t=vi,j,t,ifrandj(0,1)≤CRorj=jrandxi,j,t,otherwisewhere i=1, 2,…, NP; j=1, 2,…, n; jrandis an integer randomly chosen from 1 to n; and randj(0, 1) is a uniformly distributed random number on the interval [0,1] which is newly generated for each j. The parameter jrandis adopted to ensure that the trial vector ui,tdiffers from its target vector xi,tby at least one parameter. The crossover control parameter CR usually ranges between 0 and 1.Selection: In the selection operation, the target vector xi,tis compared against the trial vector ui,tin terms of the objective function value, and the better one will be added to the next population:(14)xi,t+1=ui,t,iff(ui,t)≤f(xi,t)xi,t,otherwise

@&#CONCLUSIONS@&#
