@&#MAIN-TITLE@&#
Complete hardware evolution based SoPC for evolvable hardware

@&#HIGHLIGHTS@&#
First CHE for EH based on the CGP model, and hence, the complete algorithm, including the required memory is realized on the CLB logic of a single FPGA.No other hard/soft resource (microcontroller or Power PC) usage for the implementation.Memory requirements for the chromosomes and their fitness remain the same irrespective of the number of generations traversed to reach the optimum.Architecture supports evolution with no limit on the number of generations.Computational delays of the architecture are of the order of a few nanoseconds.

@&#KEYPHRASES@&#
Genetic algorithm,Evolvable hardware,Complete hardware evolution,FPGA,SoPC,

@&#ABSTRACT@&#
Evolvable hardware (EH) is a thriving area of research which uses the genetic algorithm (GA) to construct novel circuits without manual engineering. These algorithms have been widely implemented using software but have not gained an appreciable edge because of the huge computation time involved. This has been a major hindrance to real-time applications. A major speed-up could be achieved by shifting the implementation to hardware. Major issues to be addressed in hardware implementation are scalability, providing flexibility and reduced computational delays. Presented here is the first complete hardware evolution (CHE) based system on programmable chip (SoPC) for EH. The architecture includes the required memory and modules for performing all operations of the algorithm. It is completely built on the configurable logic blocks (CLB) of a single commercial off the shelf (COTS) field programmable gate array (FPGA). The coding is done using Verilog hardware description language (HDL). Xilinx ISE 9.1i has been used for synthesis and simulation. As a proof of concept, the architecture has been synthesized for evolving three combinational circuits. The results show that the architecture is able to cater to evolution with no limit on the number of generations, accompanied with no scaling in the resource utilization. The results present computational delays of the order of a few nanoseconds for this CHE based architecture.

@&#INTRODUCTION@&#
Genetic algorithms (GAs) belong to a large family of stochastic search methods that mimic the process of natural biological evolution called evolutionary algorithms (EAs). GA is a search technique widely used in computing, to find exact or approximate solutions, to solve optimization and search related problems [1,2]. These algorithms search or operate on a given population of potential solutions to find those that satisfy some specification or criteria. To do this, the algorithm applies the principle of survival of the fittest to find better and better approximations. This process leads to the evolution of populations of individuals that are better suited to their environment than the individuals that they were created from, just as in natural adaptation [3]. A GA will generally include the three fundamental genetic operations of selection, crossover and mutation. These operations are used to modify the chosen solutions and select the most appropriate offspring to pass on to succeeding generations. GA as an optimization technique has been widely accepted and implemented using software, but mostly in an offline mode. Software implementation of a GA is easy as the various operations involved in the algorithm are simple. The flexibility present in software accommodates the important attribute of ‘change’ occurring in the pipeline easily [4]. GAs have been applied to various fields like engineering, art, biology, economics, marketing, genetics, operations research, robotics, physics etc. But still, applications of GA to increasingly complex problems have not gained an appreciable edge, as software implementation of the GA causes unacceptable delays in the optimization process. It is seen that, if the search space is large, even trivial applications take a huge computation time [5]. This huge computation time consumed by a GA implemented in software has been a hindrance for real time applications, opening up the avenues for hardware implementation of GAs. But, hardware evolution does have several aspects that need not be addressed to, in software evolution like, effect of transients, feedback loops, propagation delays, signal loss, power dissipation, etc. Nevertheless, in order to harvest the benefits of hardware realizations, several research groups are looking into hardware realizations for different applications like, automation of circuit partitioning for VLSI [6], solving traveling salesman problem [7], image registration [8], EH design, optimization [9], etc.The motivation for implementing a GA in hardware stems from the fact that they are very much CPU intensive, while also being intrinsically parallel algorithms. The basic operations of a GA can be executed in a pipelined fashion, which could also be replicated for different members of the population [9]. An added advantage with hardware implementation is the elimination of the need for complex time and resource consuming protocols needed by an equivalent software implementation to interface with the main application [10]. However, a general purpose GA engine requires certain parts of its design to be easily configurable. These changes in configurations can easily be implemented in software but not with traditional hardware. So, hardware implementations of genetic algorithms were not feasible until reconfigurable devices like FPGAs (field programmable gate arrays) were developed [5]. FPGA implementation combines the speed and massive parallelism of hardware with the flexibility of software. They are conducive to computational modeling and allow a vast number of configurations that compute different functions [11]. Of the various applications for which, this class of bio-inspired algorithms have been applied, evolvable hardware (EH) is a thriving area of research.EH is a new field, about the use of GAs to create specialized electronics without manual engineering [12,13]. EH was first proposed in the early ‘90s for hardware design [14,15]. It brings together reconfigurable hardware, artificial intelligence, fault tolerance and autonomous systems. The emergence of this field has been influenced profoundly by the progress in reconfigurable hardware and evolutionary computation [16]. EH makes hardware ‘soft’, by its capacity to adapt to problems dynamically [17]. The advantage of this method is that very novel structures can be synthesized and also have no restriction in terms of the logic algebra rules [18]. Traditional design techniques require human skill & knowledge of design methodologies. It is a time consuming and a skill based technique. Genetic Algorithm based circuit design overcomes these requirements of traditional design methods. When applied to the evolution of electronic circuits, the general evolution process is as follows:•The circuit to be evolved is represented as a chromosome that includes the functionality of the components as well as their interconnections.The standard genetic operators such as initialization, mutation, recombination and selection are carried out on the chromosomes, till the representation that satisfies all the input/output sequences evolve.The suitability of the evolved configuration is decided by means of a fitness function.The process of evolution helps to generate a phenotype from the genotype. The genotype of an organism represents its exact genetic makeup. The phenotype of an organism, on the other hand, refers to its actual physical properties, that are the outward, physical manifestations of the genotype. This indicates the final circuit evolved.Specifically, EH is built on programmable logic device (PLD) or field programmable gate array (FPGA) where a bit string called the configuration bit stream determines the hardware structure of the device. The configuration bit stream is the genotype and the resulting hardware structure is the phenotype. The mapping between the genotype and the phenotype is encoded into the chromosome (genome), and is of great importance in evolvable hardware. FPGAs have been used as a platform for accelerating EH [19] and also as a raw parameterized learning model [20]. Evolutionary techniques have made use of unconventional properties of the physical device, yielding designs that defy conventional analysis [21]. It is this unrestricted model that interests all researchers.Basically, evolution in hardware is classified into two broad classes, extrinsic and intrinsic. In an extrinsic implementation, the different solutions are tested for their fitness using software models and simulators. Only the best fit chromosome is implemented in hardware. In an intrinsic implementation, the different operations of the algorithm are performed on a computer and each and every generated chromosome's fitness is directly tested in hardware [22].A third dimension to hardware evolution called complete hardware evolution (CHE) was introduced in 1999 [23]. In CHE, the complete GA pipeline is implemented in hardware. A vital limitation with intrinsic evolution is the difficulty with the proprietary configuration bit stream used to configure the commercial FPGA. Without specific knowledge of the bit stream's construction, random bit streams could cause damage to the fabric of the FPGA [24]. An important advantage that CHE brings over intrinsic evolution is that of overcoming this limitation of proprietary configuration bit stream validity. Here, since the chromosomes are internally generated by the slice logic itself, they do not cause any harm to the FPGA fabric. Even the operations of crossover and mutation which introduce randomness into the algorithm are performed within the configurable logic blocks (CLB) of the FPGA. Thus, the fear of damage to the fabric is eliminated and knowledge of the structure of the configuration bit stream is no more essential. This observation of the authors has been a stimulus for the architecture proposed in this work.Presented here is a CHE based architecture, for evolution of digital combinational circuits. To the best of the authors’ knowledge, this is the first implementation of CHE using a single FPGA for EH based on the Cartesian genetic programming (CGP) model [25]. The desired results are achieved with significant reduction in hardware utilization and computational speeds of the order of few nanoseconds. This architecture is able to cater to evolutionary processes which run to hundreds of generations without scaling in resource utilization. The flexibility and the heuristic approach of the algorithm, combined with the speed-up advantage of the hardware, is an attempt toward making real time application of GAs a reality.The main contributions of our work can be summarized as:•First CHE for EH based on the CGP model.Implementation of the complete algorithm including the required memory on the CLB logic of a single FPGA.No other hard/soft resource (microcontroller or Power PC) usage for the implementation.Inclusion of user defined parameters to suit varying requirements.Computational delays of the order of few nanoseconds.Conservation of logic slices.Minimum I/O requirement.The rest of the paper is organized into five different sections. Section 2 presents a collection of available literature that is related to this work. The design issues are compiled in Section 3. Section 4 depicts the architecture of the implemented framework. Section 5 discusses the results obtained and analyses the performance. Section 6 concludes the work done and presents the possible directions of extending the work.

@&#CONCLUSIONS@&#
