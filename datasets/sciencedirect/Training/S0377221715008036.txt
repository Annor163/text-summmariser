@&#MAIN-TITLE@&#
Finding robust timetables for project presentations of student teams

@&#HIGHLIGHTS@&#
We develop a MIP model for timetabling of student teams with diver-sity/homogeneity criteria.We use a bicriteria approach with diversity/homogeneity objective versus robustness of timetables.We identify a Pareto front using the solution pool given by CPLEX.We model the solutions in the solution pool as a network and use it to calculate some heuristic robustness metrics.Tests on seven real instances show some metrics have very high rank cor-relation with the robustness measure.

@&#KEYPHRASES@&#
Timetabling,Mixed integer programming,Robustness,Diverse grouping,Bicriteria optimization,

@&#ABSTRACT@&#
This article describes a methodology developed to find robust solutions to a novel timetabling problem encountered during a course. The problem requires grouping student teams according to diversity/homogeneity criteria and assigning the groups to time-slots for presenting their project results. In this article, we develop a mixed integer programming (MIP) formulation of the problem and then solve it with CPLEX. Rather than simply using the optimal solution reported, we obtain a set of solutions provided by the solution pool feature of the solution engine. We then map these solutions to a network, in which each solution is a node and an edge represents the distance between a pair of solutions (as measured by the number of teams assigned to a different time slot in those solutions). Using a scenario-based exact robustness measure, we test a set of metrics to determine which ones can be used to heuristically rank the solutions in terms of their robustness measure. Using seven semesters’ worth of actual data, we analyze performances of the solution approach and the metrics. The results show that by using the solution pool feature, analysts can quickly obtain a set of Pareto-optimal solutions (with objective function value and the robustness measure as the two criteria). Furthermore, two of the heuristic metrics have strong rank correlation with the robustness measure (mostly above 0.80) making them quite suitable for use in the development of new heuristic search algorithms that can improve the solution pool.

@&#INTRODUCTION@&#
In practice, analysts are often more interested in finding a robust solution rather than an optimal solution to a discrete optimization model of a problem, especially when a model has plenty of good solutions (including several optimal or close-to-optimal solutions). Because models are simplified representations of actual problems, analysts are usually forced to leave out some characteristics or quality criteria of the problems they are addressing. Robustness is one such criterion that is not straightforwardly integrated into a mathematical model. In this research, we propose an approach in which first a solution engine is used to generate a set of solutions (in this case, CPLEX with its solution pool feature) and then the set of solutions is represented by a network. Next, after a robustness measure is calculated using this network, Pareto-optimal solutions are identified (using the objective function values and the robustness measures of the solutions as the two criteria). Because robustness is calculated after a set of solutions has been found, the network-based approach is applicable not only to timetabling but also to scheduling and possibly other discrete optimization problems, with any solution engine that produces a set of alternative solutions (e.g. meta-heuristics).The timetabling problem we address herein is one that one of the authors faced in an undergraduate-level Introduction to Management course. The characteristics of the course, which we describe in detail subsequently, led to the need to assign student teams to time slots according to diversity and homogeneity criteria. To the best of our knowledge, the literature has not addressed combining grouping decisions with diversity objectives and timetabling in a single model. Furthermore, rather than simply finding an optimal solution, we were interested in discovering a robust solution that was easy to modify (typically by assigning one team to a different time slot) without significantly deteriorating the solution quality (i.e. objective function value). Although scheduling literature has addressed robustness concerns, we have not come across any research on robustness for academic timetabling problems.The term project of the Introduction to Management course is the preparation of a business plan. For this, teams of three or four students prepare their business plans, which they present at the end of the semester. The course consists of approximately 150 students per semester, resulting in approximately 40 teams. For pedagogical reasons, three or four teams present in a time slot and all members of the teams in a time slot must be in the audience when other teams present their business plans. Each team has 25 minutes to setup, present, and answer questions and, thus the length of each time slot is 100 minutes. This is equivalent to two consecutive lecture hours at the university. Each time slot has two judges; one is the instructor of the course and the other is usually a teaching assistant.Diversity of the teams assigned to the time slot is an important concern. The university’s undergraduate curriculum does not require students to declare their major until the end of their second (sophomore) year. Although students enter one of the three colleges (called Faculty or School) as freshmen, their choice of major can be in any one of the Faculties (Engineering, Arts & Social Sciences and Management). All students, regardless of the Faculty they enter, take the same set of core courses in their first year. During their sophomore year, students choose a set of courses from different majors, to help them make an informed choice. The Introduction to Management course is one such course; thus, many students with different backgrounds and interests take it. Many juniors and seniors (mainly studying engineering or economics) also take this course, resulting in significant diversity in the academic characteristics of the students.Thus, two pedagogic concerns are taken into account when grouping teams. First, because judges inevitably grade presentations relative to one another, the instructor wanted each group of teams to reflect the academic diversity present in the course (with respect to enrolled Faculty, GPA, and class). Second, teams with the same type of business plan (e.g. retail, manufacturing, services) should be assigned to the same time slot, with the goal of sparking livelier question-and-answer periods because all the teams would have faced similar challenges in preparing their business plans and could cross-check others’ assumptions, make recommendations, and so on. Therefore, ideally teams in a time slot would have different Faculty, class, and GPA characteristics (referred to as “academic diversity”) but have the same business plan type (referred to as “business plan homogeneity”).With approximately 40–50 teams, 10–13 time slots were required in a week (the last week of the semester) for the presentations. The course instructor wanted the number of days spanning the time from the first to the last presentation (referred to as the time-span of the timetable) to be as small as possible. From the students’ perspective, this creates a sense of fairness; everyone presents on the same two or three days (around final exams).The instructor wanted a robust solution for cases when a team, for one reason or another, could not present during its assigned time slot. That is, having announced the timetable to the entire class, the instructor needed to quickly devise an alternative timetable that not only is feasible for each team but also was roughly similar to the initial timetable.The article is organized as follows: Section 2 provides a review of relevant literature. Section 3 details how the mixed integer programming (MIP) model is formulated (including the data model used, pre-processing of data) and solved (including a heuristic for an initial upper bound). Section 4 discusses the methodology used to identify robust solutions. Section 5 demonstrates the entire approach with an example. Section 6 presents the results of seven semesters’ worth of actual data, and Section 7 concludes.

@&#CONCLUSIONS@&#
In this research, we address a practical and novel timetabling problem, for which we developed an MIP formulation. We designed the model to achieve three goals: (i) to ensure that the students who listen to one anothers’ presentations worked on similar business plans, to facilitate exchange of ideas (“business plan homogeneity”); (ii) to ensure that teams of judges listen to presentations of teams with diverse academic characteristics (“academic diversity”); and (iii) to have as compact a timetable as possible.A key concern was finding robust solution alternatives rather than a single optimal solution. To this end, we added several constraints to the MIP model that prioritize the use of some time slots (by time slot dominance network) and forbid the use of other time slots (those feasible for at most one team for all plan types). We also introduced additional constraints to avoid degenerate solutions (by tiebreaker constraints for primary plan type of each time slot). With these constraints, CPLEX was able to find a reasonably sized solution pool within acceptable CPU time for seven real instances.Given the solution pool, we developed a network-based methodology to evaluate the robustness of these solutions. Visual depiction of the network, which we obtained by mapping Hamming distances between solutions to edge weights, mapping objective function values to node sizes, and assigning the same color to the nodes for which the corresponding solutions use the same set of time slots, resulted in a network that provides both quick and good insight into the quality of the solution pool (the open-source social network analysis tool Gephi clustered the nodes as well).To place the solutions on a Pareto frontier (so that the analyst can trade off objective function against robustness), we developed a scenario-based measurement of robustness. We adopted this measure Q with the assumption that the need to update the timetable would be triggered by the necessity of moving one team from its initially assigned time slot.One relevant question was whether we could find a heuristic robustness metric that was strongly correlated with the robustness measure Q. We tested a set of metrics by changing the distance cut-off parameter C used in creating the network (C was set to 4 and 8) and the penalty value used in the calculation of Q (two values were tested, M1 and M2), to determine how sensitive these metrics’ performances were to these parameters. The results showed that when M1 was used, R1 (the degree of the node) was the best-performing metric (with average rank correlation of 0.825). By contrast, when M2 was used, R2 (the sum adjacent nodes’ node sizes) was the best-performing metric (with average rank correlation of 0.855). Although these rank correlations are quite good, the fact that these two metrics measure the relationship between a solution and its neighbors without attempting to identify characteristics associated with the rest of the network structure, led us to use a complementary measure (denoted as R8). R8 measured the similarity among the neighboring solutions as a percentage of the theoretical maximum value. Creating a simple additive metric that uses R8 led to consistently improved rank correlations. Specifically,R1+2R8,when M1 was used, andR2+10R8,when M2 was used, were the best metrics with average rank correlations of 0.86 and 0.89, respectively. The finding that R8 improves the prediction of robustness is important since it is the only metric that measures the relationship among the neighbors of the given solution, and thus cannot be calculated without creating the solution network. On the other hand, it is important to note here that the question still remains whether other measures exist that might be even better than R8.Future research could aim to make solution network creation an integral part of the solution algorithm, whether it is an evolutionary algorithm or a hybrid MIP/evolutionary algorithm as Rothberg (2007) discusses. In this effort, the metrics identified here could have a critical role, because they could be used to direct the search to more fruitful solutions.It would also be useful for research to test the use of this methodology with other timetabling and scheduling problems. The ability to identify a Pareto frontier by using CPLEX (without the need to develop a custom solution engine) should make this methodology quite attractive for practitioners.