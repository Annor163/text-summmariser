@&#MAIN-TITLE@&#
Patch-Levy-based initialization algorithm for Bees Algorithm

@&#HIGHLIGHTS@&#
A novel initialization algorithm for Bees Algorithm (BA) has been proposed.The enhanced Bees Algorithm compared with other BA variants.The enhanced Bees Algorithm compared with the Artificial Bee Colony and its variants.The enhanced algorithm outperforms other algorithms in terms of convergence speed.The enhanced algorithm outperforms other algorithms in terms of quality and success rate.

@&#KEYPHRASES@&#
Bees Algorithm,Metaheuristic algorithm,Population initialization,Levy flight,Patch environment,

@&#ABSTRACT@&#
The Bees Algorithm (BA) is a population-based metaheuristic algorithm inspired by the foraging behavior of honeybees. This algorithm has been successfully used as an optimization tool in combinatorial and functional optimization fields. In addition, its behavior very closely mimics the actual behavior that occurs in nature, and it is very simple and easy to implement. However, its convergence speed to the optimal solution still needs further improvement and it also needs a mechanism to obviate getting trapped in local optima. In this paper, a novel initialization algorithm based on the patch concept and Levy flight distribution is proposed to initialize the population of bees in BA. Consequently, we incorporate this initialization procedure into a proposed enhanced BA variant. The proposed variant is more natural than conventional variants of BA. It mimics the patch environment in nature and Levy flight, which is believed to characterize the foraging patterns of bees in nature. The results of experiments conducted on several widely used high-dimensional benchmarks indicate that our proposed enhanced BA variant significantly outperforms other BA variants and state-of-the-art variants of the Artificial Bee Colony (ABC) algorithm in terms of solution quality, convergence speed, and success rate. In addition, the results of experimental analyses conducted indicate that our proposed enhanced BA is very stable, has the ability to deal with differences in search ranges, and rapidly converges without getting stuck in local optima.

@&#INTRODUCTION@&#
Metaheuristic algorithms are often nature-inspired algorithms that imitate the most successful behaviors in nature. As a result, they have garnered considerable interest from researchers seeking global optimization algorithms that can find near-optimal solutions in reasonable running times. Various approaches, such as Genetic Algorithms (GA) [1], Simulated Annealing (SA) [2], Particle Swarm Optimization (PSO) [3], and Ant Colony Optimization (ACO) [4] can be found in the literature. These metaheuristic algorithms can be categorized into population-based algorithms and trajectory-based or directed search algorithms [5]. Trajectory-based algorithms, e.g., SA [2], use a single agent throughout the search space, while population-based algorithms, e.g., GA [1], use a population and a set of agents throughout the search space. Some of the techniques in the population-based category are inspired by the collective intelligent behaviors of swarms of animals and insects such as fish, birds, bacteria, ants, termites, wasps, and fireflies. Consequently, algorithms such as ACO [4], PSO [3], Bacterial Foraging Optimization (BFO) [6], and the Firefly Algorithm (FA) [7] have been developed. This led to the emergence of swarm intelligence in the field of artificial intelligence. Over the past decade, the collective intelligent behaviors of swarms of bees have been attracting the attention of researchers seeking to develop intelligent search algorithms. Examples of algorithms inspired by the behavior of bees include the Honey Bee Mating Optimization (HBMO) [8], ABC [9], Beehive (BH) [10], and Bee Colony Optimization (BCO) [11] algorithms. Metaheuristic algorithms have been applied to problems in many areas, such as the high school timetabling problem [12], the job shop scheduling problem [13], the vehicle routing problem [14], image segmentation [15], continuous optimization [16], model-based object detection, and locating dampers equipped with civil structures [17].One of the most recent bee-based algorithms is the Bees Algorithm (BA). BA is a population-based search algorithm proposed by Pham et al. [18] and is inspired by the foraging behavior of swarms of honeybees searching for good food sources. Fundamentally, the algorithm performs a kind of exploitative local or neighborhood search combined with an exploratory global search. Both kinds of search modes implement uniform random search. In the global search, the scout bees are distributed uniformly at random to different areas of the search space to scout for potential solutions. In the local or neighborhood search, follower bees are recruited for patches found by scout bees to be more promising in order to exploit these patches. BA has been successfully used to optimize both combinatorial (discrete) [19–21] and functional (continuous) [18] problems.As a result of this, and also its simplicity and closeness to the actual behavior in nature, as outlined in section ‘The Basic Bees Algorithm (Basic BA)’, BA has garnered a significant amount of interest from researchers since its invention. BA can be divided into four parts or components: the parameter tuning or parameter setting part, the initialization part, the local search (exploitation) part, and the global search (exploration) part. Several studies have sought to improve BA and to enhance its performance. Some of these studies focused on the parameter tuning or setting part. The resulting improvements in these studies were gained by reducing the number of tunable parameters [22] or by investigating other strategies to define some control parameters [23,24]. Other studies focused on developing other concepts and strategies for the local (neighborhood) search part, both for general purposes [23–26] and for specific problems [20].However, limited attention has been paid to improvement of the initialization and global search parts of BA. In the initialization component, the foragers or searchers fly at random to initial resources. The initial location of foragers or searchers relative to the optimal resource (target) may affect the degree of optimality of other algorithm components. As a result, the initialization part is critical because it can significantly affect the quality of the resource reached and the speed of convergence to the optimal target. In BA, this part is performed by distributing the bees uniformly at random to food sources. In addition, there is no clear exploitation of the fact that food sources are usually found in patches in the initialization part in spite of the fact that the patches concept is used clearly in the local search part. However, flowers in nature are usually distributed in patches that regenerate and are rarely completely depleted [27]. Furthermore, a scout honeybee searches for new flowers by flying away from the hive and moving randomly throughout the space according to Levy flight motion [28–30], which has been found to constitute the optimal search strategy [27,29,31].Consequently, in this paper, we propose an improved version of BA that utilizes a novel initialization algorithm that very closely mimics the actual behavior in nature. This initialization algorithm is called the patch-Levy-based initialization algorithm (PLIA); thus, the variant of BA that utilizes it is denoted by PLIA_BA. In this variant of BA (i.e., PLIA_BA), the search space that represents the environment is divided into clear segments, representing patches, such that the food sources are clearly distributed in patches. Then, the bees are distributed randomly according to Levy flight distribution, which is believed to approximate the natural flight patterns of bees.Levy flights were first proposed as models of random walks in optimization algorithms by Gutowski [32], who advocated the use of Levy distributions instead of uniform and Gaussian distributions as mechanisms to generate the size of steps. The justification for this is found in the frequent short steps generated by Levy distributions that enable the optimization algorithm to intensify the search in regions around the current promising points. In addition, the occasional long jumps produced by Levy distributions help the optimization algorithm to escape from local optima. Levy flights were subsequently utilized as a search mechanism in many optimization algorithms, such as Cuckoo Search [33], the FA [34], the Bat algorithm [35], the Krill Herd algorithm [36], and the ABC algorithm [37]. However, to the best of our knowledge, this is the first time it is being employed to generate the initial population for population-based optimization algorithms. Furthermore, in this work, the use of Levy flights is accompanied by a proposal for patchily distributed environments similar to those existing in nature.The remainder of this paper is organized as follows. Section ‘The Basic Bees Algorithm (Basic BA)’ reviews the Basic Bees Algorithm (Basic BA). Section ‘Proposed approach’ describes the Levy flight and our proposed algorithm. Section ‘Experimental results and discussion’ presents the results of performance evaluations and experiments obtained for our proposed BA variant (PLIA_BA), and compares these results with those obtained using other BA variants and both the ABC algorithm and its variants. Finally, section ‘Conclusion’ concludes this paper.As stated above, the BA proposed by Pham et al. [18] is a swarm intelligence-based optimization algorithm inspired by the food foraging behavior of honeybees. Honeybees can exploit a large number of flower patches as food sources by extending their foraging over more than 10km and in multiple directions [18]. During harvesting, the foraging process begins in a colony with the deployment of scout bees to search for useful flower patches with rich pollen or nectar and that are close to the hive. The scout bees fly randomly from one patch to another. On returning to the hive, they deposit their collected nectar or pollen. Then, these returned bees go to the dance floor to report their foraging results to other bees in the hive by performing the so-called waggle dance. This dance is very important as it communicates to the colony three pieces of information regarding the food source, its direction, distance, and quality rating, which represent the fitness of the source. As a result, this waggle dance is essential for evaluating the food sources simultaneously and enables the colony to recruit follower bees that follow the dancers to the promising food sources precisely. More follower bees are sent to more promising patches, which helps the colony to search food sources quickly and efficiently. Further, during the overall harvesting season, a colony continues its exploration, keeping a percentage of the population as scout bees.In its basic version, during the selection of the best solutions, BA strikes a fine balance between an exploitative local or neighborhood search and an exploratory global search. Both kinds of search implement uniform random search. In the global search, the scout bees are placed according to uniform random distribution in different areas in the search space to scout for potential solutions. In the local or neighborhood search, follower bees are recruited for patches found by scout bees to be more productive in order to exploit these patches. To conduct the local search, two processes are required, which are the selection and recruitment processes. In the selection process, the patches found to be more promising are chosen, whereas in the recruitment operation, follower bees are recruited for those promising patches with more bees are recruited for the best patches out of those selected patches. In its simplest form, the main steps followed by BA can be summarized as follows [18]:1.Initialize the population with random solutions.Evaluate the fitness of the population.While (stopping criterion not met)// Form new populationSelect sites for neighborhood search.Recruit bees for selected sites (with more bees for the best e sites) and evaluate their fitness.Select the fittest bee from each patch.Assign the remaining bees to search randomly and evaluate their fitness.End while.In the initialization part of BA, a number of (n) scout bees are distributed uniformly at random to explore the search space. Then, the sites visited by scout bees are evaluated. In step 4, the (m) sites with the highest fitness values are selected for neighborhood search. In step 5, the neighborhood region (the site itself and the region around it) of each of the m selected sites is determined with a size of (ngh). Then, this region is exploited by recruiting follower bees that follow the selected bees, with more bees (nep) are recruited for the best (e) elite sites out of the m selected sites and less bees (nsp) are recruited for the (m–e) remaining sites. In step 6, the bee with the highest fitness is selected from each neighborhood region to be a member of the next population. In step 7, the remaining bees of the population are reassigned to search uniformly at random on the global scale of the search space. These steps are repeated until a stopping criterion is met. At the end of each iteration, the colony will have a population that consists of two parts: the fittest bees that are selected from each selected patch and the scout bees that are reassigned to conduct random search.In this paper, a novel initialization algorithm (PLIA) that more closely mimics nature is developed and is incorporated into an enhanced version of BA called the PLIA_BA. The food sources in this enhanced BA are clearly distributed in patches and the bees are randomly distributed according to Levy flight distribution. In this section, the foraging patterns, Levy flight, and the proposed initialization algorithm are presented, and the development of PLIA_BA is outlined on the basis of the proposed initialization method.Foraging can be classified into two classes: non-destructive and destructive foraging. In non-destructive foraging, the forager can revisit the same food source many times. Conversely, in destructive foraging, the food source cannot be detected in subsequent flights. However, resources in nature, such as flowers, fish, and krill, are usually distributed in patches that regenerate and are rarely completely depleted. Hence, non-destructive foraging is more realistic than destructive foraging [27]. In the absence of prior knowledge about the locations of patches of food sources, stochastic search strategies are considered more efficient strategies than systematic deterministic strategies [38]. Thus, random walks can be used as models of animal movement. Among random walks, it has been demonstrated that Levy flight motion is the optimal search strategy for the forager or searcher in non-destructive foraging [27,29,31].The existence of Levy flights as a movement pattern in biological organisms was first noted by Shlesinger and Klafter, who stated that the characteristics of Levy flights can be observed in foraging ants [39]. Levandowsky et al. subsequently introduced Levy walks as a swimming behavior in microorganisms [39]. Various empirical and theoretical studies have subsequently identified the Levy flight patterns and characteristics in the foraging of various animals and species such as the wandering albatross, reindeer, jackals, dinoflagellates, spider monkeys, sharks, bony fish, sea turtles, penguins, fruit flies (drosophila), bumblebees, and honeybees [39]. Evidence of using Levy flights as search patterns was also found in the foraging patterns of humans such as the Dobe Ju/’hoansi hunter-gatherers [40].The evidence of Levy flight foraging patterns in honeybees is especially strong [39]. This is because, compared with other studies, Reynolds et al. used techniques of which only a few have been criticized by recent studies [41,42]. Reynolds et al. [31] recorded the flight paths of honeybees navigating back and searching for their hives using harmonic radar. Analysis of the recorded flight paths indicated a series of scale-free moves and Levy distributions. They showed that these results combined with the “no preference direction” characteristics of the moves, proved that the bees were flying an optimal search pattern. In another study, Reynolds et al. [30] trained foraging bees to utilize an artificial feeder that was then removed in order to investigate the search pattern of bees for a food source that already ceased to be available. They used harmonic radar to record the flight patterns of the foraging bees after removing the artificial feeder and showed that the flight patterns have a scale-free Levy flight characteristic that constitute an optimal search strategy even in the case of imperfect implementation of Levy flights. The imperfect implementation of these flights can result from errors or difficulties such as errors in the path integration system of the bees or difficulty responding to variable wind conditions.Levy flights are random walks that are named after Paul Levy, a French mathematician [32]. Levy flights consist of sequences of independent, randomly oriented steps with lengths l, drawn at random from an inverse power-law distribution with heavy and long tail, p(l)∼l−uwhere 1<μ≤3. Levy flights are scale-free since they do not have any characteristic scale because of the divergent variance of p(l), and they present the same fractal patterns regardless of the range over which they are viewed. The pattern in Levy flights can be described by many relatively short steps (corresponding to the detection range of the searcher) that are separated by occasional longer jumps.It can be easily observed from the definition of Levy flights that these flights constitute a series of displacements and orientations. Therefore, two steps are required to mimic Levy movements in nature and to implement these flights. The first step generates a random direction d to mimic the random choice of direction by drawing it from a uniform random distribution. In our proposed initialization algorithm, the direction is drawn from a uniform distribution between −1 and 1. The second step generates the step length that obeys a Levy distribution. One of the most efficient and straightforward algorithms for generating Levy stable variables is the Mantegna's Algorithm for symmetrical Levy stable distribution [43]. A stochastic variable z can be called stable if it satisfies the following property: a linear combination of several independent stochastic copies xiof the stochastic variable z has the same distribution of xivariables [43].The symmetrical Levy stable distribution can be defined as(1)Lα,γ(z)=1π∫0∞exp(−γqα)cos(qz)dqwhere 0<α≤2 defines the index and determines the shape of the distribution and γ>0 is a scale parameter that selects the scale unit of the distribution. The Mantegna algorithm is divided into three steps. The first step generates a stochastic variablevas follows(2)v=x|y|1/αwhere x and y are normally distributed. That is,(3)x∼N(0,σx2),y∼N(0,σy2)where(4)σx(α)=Γ(1+α)sin(πα/2)Γ((1+α)/2)α2(α−1)/21/α,σy=1and Γ is the gamma function. The distribution of the stochastic variablevhas the same behavior as the Levy stable distribution for large values of the variable (|v|≫0).To obtain a random variable with a distribution that converges rapidly to the Levy stable distribution all over the range of this stochastic variable, a nonlinear transformation is achieved as follows:(5)w=[K(α)−1]exp−|v|C(α)+1vwhere parameter K(α) is obtained using(6)K(α)=αΓ((α+1)/2α)Γ(1/α)αΓ((α+1)/2)Γ(1+α)sin(πα/2)1/αParameter C(α) is obtained by solving the following integral equation:(7)1πσx∫0∞q1/αexp−q22−q2/αC(α)22σx2(α)dq=1π∫0∞cosK(α)−1e+1C(α)exp(−qα)dqMantegna [43] solved this integral equation numerically and tabulated the values of C(α) for specific values of α(0.75≤α≤1.95), whence it was found that the algorithm is very fast and efficient for these values of α. In our proposed initialization algorithm, α is considered to be 1.5, and thus, C(α) is set to 2.737, which is the corresponding value of C(α), as tabulated by Mantegna [43].Then, n independent copies of w are generated and the central limit theorem is used to generate a random variable z that converges quickly to the Levy stable distribution as follows:(8)z=1n1/α∑k=1nwkThe distribution for z obeys the Levy distribution for all values of z in the range, not only for the large values. Thus, random variable s, which represents the step length, is given by(9)s=γ1/αzwhere γ is the scale factor of the Levy distribution and can be considered the search step size of Levy flight. This parameter is related to the scale of the problem under study.One of the most important components of foraging is the search component [38]. This component can be divided into three subcomponents: initialization, exploitation of patches, and exploration for patches. Starting foraging or searching from good points not very far from the optimal resource can significantly enhance the optimality of the subsequent components, improve the quality of the final solution, and accelerate arrival at the optimal solution as well. Consequently, population initialization is considered a critical part or component of BA and other population-based metaheuristics. Thus, we propose our population initialization algorithm, PLIA, to initialize the population of bees in BA.In PLIA, the scout bees are initially distributed at random according to Levy flight distribution instead of uniform distribution in the population initialization of Basic BA. In addition, the concept of patch is clearly used in the initialization step. Thus, the food sources are initially distributed into clear patches rather than treated as being uniformly distributed in the initialization part of Basic BA. In our proposed enhanced BA, it is assumed that the number of patches in the initialization step is not necessarily the same as the number of patches in subsequent steps.It should be noted that, for scout bees, the site of a food source could be either close to the hive of honeybees or far from the hive. In addition, finding a food source near the hive is energetically more efficient than finding a food source further away [29]. As a consequence, more bees need to fly to search near the hive and other bees need to fly longer distances further from the hive. Because the hive area is represented in our proposed algorithm by the centers of patches, more bees are required to search within the same patch. Conversely, less bees are required to fly longer distances to search in other patches. The Levy flight search strategy comprises many short moves punctuated by rare longer moves; thus, it is considered the optimal search strategy for foraging honeybees [29].In the original version of BA, although patches are considered in the local search step, they are not exploited clearly in the initialization part. Instead, the food sources are treated as being distributed uniformly. On the other hand, in the PLIA_BA, the patches are clearly exploited in the initialization component. However, it should be noted that it is important to determine the way in which the patch is determined [38]. In our proposed algorithm, the number of patches is a user-defined parameter (P) that can be determined by a small number of trials, where 1≤P≤n and n is the number of scout bees. The range of the search space is segmented or divided equally according to the number of patches to get P sub-ranges or segments. Then, each sub-range or segment represents one patch. Fig. 1shows a schematic diagram depicting patch definition, in which n=17 and the search space is divided into five patches ((P=5)<17).In nature, bees are found in different locations or areas inside the hive. As a result, this difference in the locations of bees inside the hive is modeled by the assumption that one of the points in a patch represents an area of the hive from which one bee or more start to fly searching for food. Hence, every patch will be close to the bees that will fly from the area represented by the point selected from this patch. On the other hand, the other patches will be far from those bees. In the proposed algorithm, the point that represents a site inside the hive is chosen to be typically the center of a patch (segment) because it represents the mean, as depicted in Fig. 1.In summary, in the proposed BA (PLIA_BA), the food sources are patchily distributed in a clear way. In addition, the scout bees fly initially according to the Levy flight distribution demonstrated to characterize the foraging pattern of honeybees. Some of these bees fly to patches that are close to the hive and others fly far away from the hive to other patches.On the basis of the operations above, we propose the following algorithm to generate the initial population in BA:1.Divide the search space equally into P patches or segments.Evaluate the vector of areas in the hive from which scout bees will fly (c1, c2, …, cP), represented by the centers of the patches (segments).Divide and assign the (n) scout bees into the hive areas and evaluate the number of scout bees (nb) to be assigned in each area in the hive using the following equation:(10)nb=IntnPEvaluate the number of remaining scout bees still not assigned (nrb) to be assigned in the last area in the hive using the following equation:(11)nrb=n%PSet j=1Set Current area=cjWhile (Current area (ci) is not the last area (cP))Distribute (nb) bees from the current area (cj) inside the hive to the patches according to Levy flight distribution to constitute (nb) bees in the initial populationSet j=j+1Set Current area=cjEnd whileDistribute (nb+ nrb) bees from the last hive area to the patches according to Levy flight distribution to constitute (nb+nrb) bees in the initial population.Return the constructed initial population of (n) scout bees.First, the search space is divided into P equal sub-ranges or segments, with each sub-range or segment representing a patch. The centers of patches are calculated in step 2 and stored in a vector of size P to represent different areas in the beehive from which the scout bees will start flying in order to forage for food. To calculate the center of a patch, the mean of the sub-range representing the patch is used. In step 3, the number of scout bees (nb), out of (n) required scout bees (population size) in the hive, is calculated according to (10) where the integer part is taken as nb. In this step the (n) scout bees are assigned equally to P areas inside the hive such that nb scout bees are assigned to each hive area, and in some cases, there may remain some scout bees among the (n) scout bees not assigned. In these cases, the remaining scout bees are assigned and considered to fly from the last hive area in addition to the previously assigned (nb) bees. The number of bees remaining (nrb) is evaluated in step 4 according to (11).Then, the assignment of the scout bees into the search space starts in step 5. In this step, (nb) scout bees are distributed from an area (cj) of the hive according to the following equation derived based on the schematic diagram in Fig. 1:(12)bi=cj+(2r−1)×Levyγ,i=1,2,…,n;j=1,2,…Pwhere biis the initial position of the ith scout bee in the search space, cjis the jth site or area of bees in the hive, (2r−1) gives the direction drawn from a uniform random distribution between −1 and 1, r∈uniform(0, 1), andLevyrepresents the step length generated randomly from the Levy flight distribution with a scale parameter (search step size) γ, as stated in section ‘Foraging patterns and Levy flight’ above.Step 5 is repeated for all areas other than the last area. In step 6, when the last hive area is reached, (nb+nrb) scout bees are distributed from this area and placed in the search space randomly according to Levy distribution, in the same manner as in step 5. Finally, (n) scout bees would have been initially distributed, and thus, an initial population of (n) scout bees will be constructed and returned. A flowchart of the proposed initialization procedure is given in Fig. 2.Having presented the proposed initialization procedure, the main steps of the improved BA can be summarized as follows.1.Initialize the population using the proposed initialization algorithm (PLIA).Evaluate the fitness of the population.While (stopping criterion not met)// Form new populationSelect sites for neighborhood search.Recruit bees for selected sites (with more bees for the best e sites) and evaluate their fitness.Select the fittest bee from each patch.Assign the remaining bees to search randomly and evaluate their fitness.End while.We tested our proposed BA (PLIA_BA) on twelve scalable benchmark functions. These benchmarks are used extensively in the literature to test the performance of general-purpose optimization algorithms [44,45]. Table 1shows the test functions and their global optima. Further, the acceptance value is shown in this table for comparison among BA-based algorithms (BAs) and for comparisons with ABC-based algorithms (ABCs) under the columns “Accept BAs” and “Accept ABCs,” respectively. Each run of an algorithm in a comparison is terminated and determined to be successful when the error in the value of the function is less than or equal to the acceptance value in that comparison. As BA and, thus its improved versions were designed to search for the maximum, these minimization functions were inverted by multiplying them by (−1) before applying the two algorithms.Functions f1–f3 are continuous unimodal functions and function f4 is a discontinuous step function that has one minimum as a region rather than a point [44]. For the Rosenbrock function f5, although it is a unimodal function, it may have multiple minima in high dimension cases [44]. In addition, the global minimum of this function lies inside a long, narrow, parabolic-shaped flat valley, and the variables are dependent; thus, the gradients do not point toward the optimum in general. As a result, the convergence to the global optimum in Rosenbrock may be difficult [45,46]. Functions f6–f12 are multimodal functions and the number of local minima they have increases exponentially as the problem dimension increases. Therefore, these functions are often considered to be the most difficult class of problems for many general-purpose optimization algorithms [47].To demonstrate the effectiveness of our proposed initialization algorithm (PLIA), we evaluated the performance of PLIA_BA, which utilizes this initialization procedure, and compared the results with that of the Basic BA and IBA. IBA is an improved version of BA that utilizes the neighborhood shrinking procedure [48]. For this comparison, we used functions f1–f12 with dimension d=30. In order to perform a fair comparison among the BAs, the three versions of BA were executed with the same setting for the common parameters: n=50 for the number of scout bees, m=5 for the number of selected sites, e=2 for the number of elite sites, nep=20 for the number of recruited bees for each site of the e sites, and nsp=10 for the number of bees recruited for every site of the remaining (m-e) sites. In addition, the parameters relevant to each version were set: In PLIA_BA, the scale or search size of Levy flights (γ) was set to 1.00E−77, the neighborhood size (ngh) was set to one, and the number of patches, P, was set to different values for different functions, as shown in Table 2. In Basic BA, the neighborhood size (ngh) was set to different values for different problems, as shown in Table 2. With respect to the IBA, the initial neighborhood size (nghinit) was set to five, and the shrinking factor (sf) was set to 0.999 for all functions except the Weierstrass function, as can be seen in Table 2 as well. In addition, the maximum number of function evaluations was set to 2.00E+06. The results reported are the averages for 50 independent runs.In addition, we conducted two additional sets of experiments to compare the performance of PLIA_BA with that of several versions of ABC. The versions compared included the classical ABC algorithm and two variants: GABC and PABC [44]. In the experiments functions f1–f12 were employed with dimensions d=30 and d=60. The parameter setting used for PLIA_BA in the comparisons among the BAs was used in these comparisons with the ABCs as well. The maximum number of evaluations was set to 5.00E+04 for both dimensions, d=30 and d=60. All experiments were carried out 50 times independently for each benchmark. Then, the results produced by the PLIA_BA were compared with the results for the variants of ABC (ABCs) reported in [44]. The setup for the experiments carried out on the ABCs can be found in [44].We used three performance metrics to evaluate the performance of PLIA_BA; namely, the mean best fitness value, the success rate, and the mean number of evaluations. Further, we analyzed the convergence behavior and stability of the proposed algorithm. In addition, we investigated the population distribution in the initial stage of PLIA_BA and the sensitivity of PLIA_BA to different search ranges.The mean best fitness value was chosen as a performance indicator to ascertain the quality of the solutions obtained using BA based on the proposed initialization scheme. Success rate is one of the performance criteria used in the literature for evaluating the reliability of algorithms. Success rate can be defined as(13)S=NsuccessfulNAll×100where S is the success rate, Nsuccessful is the number of successful runs in which the optimal solution was found, and NAll is the total number of runs performed. With respect to the third criterion, the average number of times any test function had to be evaluated and calculated to reach the optimal solution was taken through the 50 independent runs to ascertain the convergence speed of the algorithms.The mean of the best fitness values and their standard deviation obtained by the BA variants are presented in Table 3. In this table, it can be clearly seen that the proposed initialization procedure (PLIA) helps BA to produce better solutions than the Basic BA and IBA, as indicated by the mean best fitness values. In addition, it is obvious from the same table that the standard deviations of the optimal solutions obtained using our enhanced BA in 50 independent runs were lower than those of the optimal solutions produced by Basic BA and IBA. These better mean solutions with the smaller standard deviations from the means emphasize the better quality obtained by employing our proposed algorithm for initialization in BA.To statistically analyze the results obtained for PLIA_BA, we used the Friedman test. The Friedman test is the best-known statistical method for testing the performance differences between more than two algorithms [49,50]. The ranks computed by this test for the three BA-based algorithms are tabulated in Table 4. It can be clearly seen in this table that PLIA_BA was the best performing algorithm, with rank 1.0417, whereas the worst was Basic BA, with rank 3. The p-value calculated using the Friedman test (0.00001) showed very high significant differences among the BA-based algorithms. Subsequently, we used two post hoc tests (Finner and Li tests) [49,50] to test the specific difference between PLIA_BA and each of the other versions of BA. Table 5shows the adjusted p-values obtained by the Finner and Li tests considering the PLIA_BA as the control method. The Finner and Li methods strongly suggest a significant difference in the performance between the PLIA_BA and the other two BAs. It can be seen in Table 5 that PLIA_BA demonstrated a highly significant improvement over Basic BA with a significance level α=0.01, and a significant improvement over IBA with a significance level α=0.05.To compare the convergence speed of the BAs, we calculated and compared the mean number of function evaluations. In addition, to test the reliability of the various BA variants, we computed the success rate for each function and obtained the average success rate for each algorithm. Table 6shows the average number of evaluations and the success rates that resulted from applying BA variants to the twelve 30-dimesnional benchmark functions.It can be clearly observed in this table that PLIA_BA was able to converge to the optimal solution much faster than Basic BA and IBA. PLIA_BA delivered a highly significant improvement in terms of the number of function evaluations. An interesting finding is that the initialization algorithm, PLIA, helped BA to reach the optimum after just one iteration, which corresponds to 165 function evaluations for all tested functions. This can be explained by the ability of the initialization algorithm to generate initial search points that are very close to the optimum, as illustrated in detail in section ‘Parameter and initial population distribution analysis’. However, the number of iterations can be greater than one, as will be observed with Easom function in section ‘Convergence of our proposed algorithm’, despite the low number of dimensions used. This can be accounted for by the function's shape [47], which can have a large impact on the performance and the convergence rate of PLIA_BA. This validates the conclusion in section ‘Solution quality’ that dimensionality does not play a crucial role in determining the behavior of PLIA_BA. Concerning the success rate, PLIA_BA achieved the highest average success rate, 100%, followed by IBA with 65.08%. Conversely, Basic BA failed to reach the optimal solution with the accuracy specified in Table 1 within the specified maximum number of evaluations on virtually all the 30-deimensional functions.In addition to the findings of the comparisons conducted in this work, results have been reported for Basic BA and another improved version of BA called ANSSA_BA [26]. ANSSA_BA is an improved BA that employs adaptive neighborhood shrinking and site abandonment procedures. The accuracy of both Basic BA and ANSSA-BA were calculated by setting 0.0000 if the final solution is less than or equal to 0.001, otherwise the difference between the final solution and the optimal one was used. Then, the average accuracies were calculated for 100 independent runs. It is quite clear from that work [26] that in spite of the low-dimensionality of the functions used, both versions significantly underperform PLIA_BA in terms of convergence speed and accuracy of results.Tables 7 and 8present the mean of the best results obtained by PLIA_BA and the ABC variants on functions f1–f12 for dimensions d=30 and d=60 respectively. In the tables, it can be clearly seen that PLIA_BA performed best on all the test functions in both the 30 and 60 dimensions cases. A point of interest to note is that very comparable results were obtained by PLIA_BA in both the 30-dimensional and the 60-dimensional versions despite the large difference in the function dimensionality. It can be concluded from these results that our proposed enhanced BA is less sensitive to increases in the dimensionality of the problem.We also used the Friedman test to conduct statistical comparisons between PLIA_BA and other ABC variants. We conducted two sets of comparisons using d=30 and d=60 dimensions to evaluate the results. Tables 9 and 10show the ranks achieved by this test for both sets of comparisons. It can be clearly seen in these tables that PLIA_BA ranked first, followed by PABC, GABC, and ABC, in both cases. The p-values calculated using the statistic from the Friedman test were 0.000355 and 0.000108 in the 30- and 60-dimensional cases, respectively, as shown in Tables 9 and 10. These p-values suggest significant differences among the performance of the algorithms considered. Subsequently, we used Finner and Li tests to evaluate the specific difference between PLIA_BA and each of the variants of ABC. Table 11shows the adjusted p-values obtained by these post hoc tests of the results of comparison on the 30-dimensional functions. As can be seen in the table, PLIA_BA showed a significant improvement over the traditional ABC algorithm with a level of significance of α=0.01, and over GABC at a level of significance of α=0.1. In the comparison conducted on the 60-dimensional version of the benchmarks, it is clear from Table 12that the post hoc procedures show significant improvement of PLIA_BA over ABC at significance level of α=0.01, and over GABC at a level of significance of α=0.05.To compare the convergence speed of PLIA_BA with the ABC-based algorithms, we calculated the mean number of function evaluations, computed the success rate for each function, and then obtained the average success rate for each algorithm. Tables 13 and 14show the mean number of evaluations and success rates produced by PLIA_BA and the ABC variants on the twelve benchmark functions for 30 and 60 dimensions, respectively. It can be clearly seen in these tables that PLIA_BA was able to converge to the optimal solution much faster than the ABCs in both the 30 and 60 dimensions cases. PLIA_BA delivered a highly significant improvement in terms of the number of function evaluations.Regarding the success rate, in the 30 dimensions case, PLIA_BA and PABC achieved the highest average success rate with 100%, followed by GABC and ABC with 99% and 52% respectively. However, in the case where the 60-dimensional version of the functions was used, PLIA_BA satisfied the highest average success rate with 100%, followed by PABC with 91.66%, GABC with 90.33%, and classical ABC with 50%. The comparison of success rates validated the previous conclusion of the least sensitivity to the problem dimension of PLIA_BA.To further analyze the convergence of the enhanced BA based on the proposed initialization procedure, we used two additional test functions to compare the proposed enhanced BA with other variants of BA. The first test function was a 2-dimensional function called Easom function, while the second was the Schwefel 2.26 function with six dimensions. As mentioned before, because the proposed and other versions of BA search for the maximum and both test functions are minimization functions, we inverted the functions by multiplying them by (−1) before applying the algorithms. Overviews of these functions in 2D are shown in Fig. 3. Fig. 4shows the convergence progress of PLIA_BA, IBA, and Basic BA to the best fitness with the number of evaluations of the inverted test functions.Easom function is a unimodal function for which the global minimum is located within a small area of the search space [51]. This function is defined in 2D as follows:(14)f(X)=−cos(x1)cos(x2)exp(−(x1−π)2−(x2−π)2)where −100≤xi≤100, i=1, 2. The global minimum isf(x→min)=−1andx→min=(π,π). The global optimum of the function was located by PLIA_BA more quickly, as can be seen in Fig. 4. It is obvious from the figure that PLIA_BA converged to the global maximum of the inverted function after approximately 1100 function evaluations. Conversely, Basic BA and IBA were able to reach solutions close to the optimal solution only after approximately 2600 and 2200 evaluations, respectively, as shown in Fig. 4. The parameter values used for this test were n=8, m=3, e=1, nsp=2, and nep=4. This parameter setting was used for all BA variants. Moreover, the values P=1, γ=1, and ngh=1 of the parameters related to the number of patches, the Levy scale and the neighborhood size, respectively were used in PLIA_BA. The parameter ngh=0.1 was set for the neighborhood size in Basic BA. For the IBA, nghinit=1 was used for the initial patch size and sf=0.999 was set to the shrinking factor.Schwefel 2.26 function is a highly multimodal test function with a large number of peaks and valleys. In addition, this test function is deceptive in that the global minimum is geometrically far from the second best local minimum where a search algorithm can be trapped. Consequently, a search algorithm is likely to converge in the wrong direction [51]. The definition of this function is as follows:(15)f(X)=∑i=16−xisin|xi|where −500≤xi≤500, i=1, …, 6. The global minimum isf(x→min)=−2513.8974andx→min,i=420.9687, i=1, …,6. With respect to the inverted 6-dimensional Schwefel 2.26 function, PLIA_BA converged to the global maximum (2513.8974) of the inverted function, with 100% success rate, much faster than Basic BA and IBA. It can be seen clearly in Fig. 4 that the improved BA based on the proposed initialization algorithm converged to the global optimum after exactly 1535 function evaluations, which corresponded to exactly one iteration. Conversely, both Basic BA and IBA took large numbers of evaluations of comparable values and achieved only a 60% success rate. We plotted the average number of evaluations in the successful runs among the 50 runs against the best fitness value, as shown in Fig. 4. It is clear that the Basic BA and IBA were able to find solutions close to the optimum after approximately 1,400,000 and 1,500,000 evaluations, respectively, in the successful runs. However, in the unsuccessful runs, Basic BA and IBA were trapped in the second best solution. For this test, the parameter values used for all BA versions were n=500, m=15, e=5, nsp=30, and nep=50. In addition, the values P=500, γ=1.00E−09, and ngh=1 of the parameters related to the number of patches, the Levy scale and the neighborhood size, respectively were used in PLIA_BA. The parameter ngh=0.1 was set for the neighborhood size in Basic BA. For the IBA, nghinit=1 was used for the initial size of the patch and sf=0.999 was set as the shrinking factor.In conclusion, we state that our proposed initialization algorithm (PLIA) is able to improve the convergence speed of Basic BA and the quality of the solutions with 100% success rate without getting trapped in local optima.To analyze the effect of the additional parameters related to our proposed initialization procedure, PLIA, we conducted experiments in which we investigated the population distribution in the initialization stage. We used the Rosenbrock function (f5) with d=2 and search space −10≤xi≤10 in this analysis because of the difficulties posed by this function, as explained before and as can be deduced from the results. The same parameter settings utilized for the comparisons was used. In our experiments, the number of allowable patches that could be explored according to PLIA was 1≤P≤50 because the number of scout bees was n=50. Fig. 5shows the impact of different numbers of patches (P) at a specified search size for Levy flight γ=1 on the spread of search points in the initial population. It is quite clear that PLIA was able to produce search points closer to the global optimum than those generated by uniform random distribution for the cases P=1, P=3, P=10, and P=50. Among these cases, it was found that when P=10 or P=50, PLIA employing Levy flight distribution could generate search points that are in the vicinity of the global optimum.In general, treating the search space as a patchily distributed environment in PLIA helps the bees to fly using Levy flights to the neighborhood of the global optimum in the initial phase. In contrast, treating the search space as uniformly distributed food sources and flying uniformly at random to those resources results in a low probability of producing search points in the proximity of the global optimum, especially in large search spaces, as explained below.Having found that P=10 or P=50 are the optimal P values for the Rosenbrock problem being studied, we tried different γ values for Levy flight search size to obtain the optimal γ value in both cases, i.e., where P=10 and P=50. According to the population distribution shown in Fig. 5, γ values that are smaller than one can be expected to generate initial search points that are much closer than those generated when γ=1 in the case of P=10 or P=50. Figs. 6 and 7confirm this expectation. Conversely, larger values for γ can be expected to enhance the locations of initial search points in cases where other numbers of patches are employed, particularly when P=2, as confirmed by Fig. 8. Therefore, decreasing the value of γ helps to generate search points that are much closer to the global optimum. We found that the optimal γ when P=10 is 1E-25, whereas in the case of P=50, the optimal value for γ is 1E−27, as depicted in Figs. 6 and 7, respectively.Figs. 6 and 7 clearly indicate that small step sizes are required; thus, Levy flights of short steps were generated. Since a hive area is modeled in PLIA as a point among the points of a patch, and is typically the center point, every patch is considered to be close to the hive area represented by a point within that patch. This can account for the small step sizes in γ required when P=10 or P=50 because segmenting the search space into any of these number of patches results in patches in which the hive areas are very close to the optimal point. Consequently, bees are required to fly short steps from these close hive areas. In general, the optimal combination of P and γ is based on the problem under study.To analyze the sensitivity of our proposed BA and Basic BA to the initial range of the search space, we conducted four additional sets of experiments on the same function used in parameter analysis (Rosenbrock function) with d=2 and different search spaces—from smaller to larger. In addition to the search space, −10≤xi≤10, used in the parameter analysis, we also used the following search spaces in these experiments: −1.2≤xi≤1.2, −5≤xi≤10, −30≤xi≤30, and −100≤xi≤100. We also employed the same parameter settings used in the comparisons. For parameters P and γ, the optimal of their combination is based on the problem, as explained before. Table 16 shows the values of these two parameters. The final results of each experiment are averaged over 50 independent runs. Tables 15 and 16report the results obtained using the original and proposed BA in the four experimental sets, in addition to the results of the previous experimental set where the search space was −10≤xi≤10.With small initial search ranges of −1.2≤xi≤1.2, −5≤xi≤10, and −10≤xi≤10, especially with the initial range of −1.2≤xi≤1.2, it was expected that both Basic BA and PLIA_BA would perform equally well. This is because these small search spaces can be expected to help generate initial search points that are very close to the global optimum in the two algorithms. On the other hand, when the search space is enlarged to −30≤xi≤30 and −100≤xi≤100, the problem can be expected to be more difficult, resulting in both Basic BA and PLIA_BA becoming less efficient. However, the underlying concepts of patch and Levy flights comprising short and long steps used by PLIA enabled our proposed BA to converge to the optimum and significantly outperform Basic BA in all cases. Even though, in the case where the search space was −100≤xi≤100, the number of scout bees (n) had to be increased to 100 to allow the use of P=100 since 1≤P≤n, our proposed BA was still able to locate near-optimal solutions and achieved significantly better results than those of Basic BA, even in the case of n=50 and P=50, as shown in Tables 15 and 16. In contrast, it is quite clear that the performance of Basic BA gets worse with the expanded search spaces, which makes the average distance of the initial search points to the global optimum increasingly large.In general, the experimental results indicate that our proposed enhanced BA is remarkably less sensitive to the initial search ranges than Basic BA. In addition, the experiments conducted demonstrate the ability of PLIA_BA to deal with different search ranges by virtue of the capability of controlling the combination of the patch number and Levy search size. Thus, PLIA_BA is more robust than the traditional version of BA. In real-world problems, the global optimum is usually unknown [47]. In addition, there is not enough knowledge to make a constraint on the search space that results in a sufficiently small region. In such cases, choosing PLIA_BA would be better than choosing Basic BA.Like other metaheuristic algorithms, Basic BA, and by extension variants of BA, is stochastic in nature. Consequently, the results of different runs for these algorithms are not the same. Therefore, it was necessary to analyze the stability of PLIA_BA and to compare it with Basic BA and IBA. A metaheuristic algorithm with a specific parameter setting is stable if there are only small variations in the best fitness values from their average for a number of runs.In order to analyze the stability of the enhanced BA based on the proposed initialization scheme with the parameter settings previously used in the experimental comparisons, we used the standard deviation of the best fitness values produced from applying PLIA_BA to each benchmark function for 50 independent runs. In addition, for the comparison purposes, we calculated the standard deviation of the best values resulting from applying Basic BA and IBA on each function for 50 independent runs. The standard deviation, which measures how much variation exists from the average, can be calculated using(16)std=∑i=1Rfi−μ2Rwhere fiis the best fitness or objective value in the ith run of the algorithm, μ is the mean value of all best objective values fi, and R represents the number of runs of the algorithm. The lower the value of the standard deviation, the more stable the algorithm. Table 3 shows the standard deviations of the best fitness values obtained by applying the BA-based algorithms to the 12 benchmark functions over 50 independent runs. The table clearly shows that our enhanced BA using the proposed initialization scheme is more stable than Basic BA and IBA.

@&#CONCLUSIONS@&#
