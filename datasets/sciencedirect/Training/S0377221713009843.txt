@&#MAIN-TITLE@&#
Pricing exotic derivatives exploiting structure

@&#HIGHLIGHTS@&#
We deal with exotic derivatives when the discrete monitoring is considered.We prove that, in the classical quadrature recursive approach, the structure of the sampling matrix is strongly clustered.We show how the cluster property allows us to improve the performance of the recursive approach.We show numerical results considering the CEV process.

@&#KEYPHRASES@&#
CEV process,Discrete monitoring,Exotic derivatives,Matrix Factorization,Numerical quadrature,Option pricing,

@&#ABSTRACT@&#
In this paper we introduce a new fast and accurate numerical method for pricing exotic derivatives when discrete monitoring occurs, and the underlying evolves according to a Markov one-dimensional stochastic processes. The approach exploits the structure of the matrix arising from the numerical quadrature of the pricing backward formulas to devise a convenient factorization that helps greatly in the speed-up of the recursion. The algorithm is general and is examined in detail with reference to the CEV (Constant Elasticity of Variance) process for pricing different exotic derivatives, such as Asian, barrier, Bermudan, lookback and step options for which up to date no efficient procedures are available. Extensive numerical experiments confirm the theoretical results. The MATLAB code used to perform the computation is available online at http://www1.mate.polimi.it/∼marazzina/BP.htm.

@&#INTRODUCTION@&#
Over the years exotic options, such as Asian, barrier, and lookback contracts, have become more and more popular in equity markets and raised the attention in the academic research. Most of the articles in this literature price these contracts assuming a continuous monitoring, i.e., the payoff is triggered by events occurring continuously before expiry. Under this assumption, the option can often be priced in closed form. However, many real exotic contracts specify discrete monitoring instants, such as daily or weekly, see for example (Becker & Wystup, 2009) for a detailed description of the real market functioning of foreign exchange discrete barrier options. On the other hand, analytical formulae are available only when the underlying evolves according to a geometric Brownian motion (GBM) process and barrier and lookback options are considered, see (Fusai, Abrahams, & Sgarra, 2006), whilst other path-dependent options, such as Asian, do not admit closed form pricing formula. In addition, as at first noticed in Broadie, Glasserman, and Kou (1997), there can be substantial differences between discrete and continuous monitoring prices, even under very frequent monitoring. In fact, given the complexity of financial models and option contracts used in practice, we need a numerical method able to calibrate plain vanilla options, and at the same time price and hedge in a fast and accurate way exotic derivatives, such as the ones considered in this paper. As discussed in Bouzoubaa and Osseiran (2010), errors in computing sensitivities replacing the discrete feature with the continuous one (or a different discrete one) can cause large damages in the dynamic hedging strategy. As an example, in Fig. 1we show how the Deltas of exotic contracts (barrier, Bermudan, Asian and lookback) vary according to different discrete monitoring features: with the exception of the Asian call, where the Deltas are very similar, for all the other contracts different monitoring features result in significant differences in Deltas, and thus in very different replicating portfolios. This problem is illustrated in detail in Castagna (2009): the author considers a market maker who is short a reverse knock-out option with a short time to maturity and the underlying spot price is around the barrier level and between two fixings dates, it is not possible to take the unequivocal decision whether to completely unwind the Delta-hedge. This uncertainty generates the so-called slippage cost that can be quite significant, and motivates the search for a fast and accurate algorithm for pricing the above mentioned contracts.The discrete monitoring feature here considered is also relevant in real option application, for which the management decision making to continue or to abandon the project is determined on the basis of accounting reports published periodically. An interesting application using additive processes is given by Alexander, Mengija, and Stent (2012).The discretely monitoring pricing procedure for exotic options is based on the standard backward recursion: at each monitoring date the option price is updated by taking the expectation of the derivative price at the previous date and checking if the underlying satisfies the monitoring condition. For example, in a down-and-out barrier option we set to zero the option value if the corresponding underlying price falls below the barrier. A possible numerical implementation consists of computing the nested (iterated) expectation via a recursive numerical quadrature (integration), as shown for example in Andricopoulos, Widdicks, Duck, and Newton (2003), Fusai and Recchioni (2007). This approach allows us to move directly from one date to the following one without any intermediate time discretization. In contrast lattice and finite difference or element methods are affected by errors due to the time discretization between monitoring dates. A considerable speed-up in the recursion can be obtained when the underlying asset evolves according to an exponential Lévy model. In this case the iterated expectation is a convolution between the transition density and the contract price at the previous monitoring date. The convolution can be computed efficiently via Fourier transform and exploiting the Fast Fourier Transform (FFT) algorithm: at each monitoring date we apply a Fourier transform-convolution-Fourier inversion, see for example (Fusai & Recchioni, 2007; Fusai, Marazzina, Marena, & Ng, 2012; Lord, Fang, Bervoets, & Oosterlee, 2008) and references therein. In this case, the computational cost is linear in the number of monitoring dates and of ordermlog(m)with respect to the number of discretization points m of the quadrature scheme. However the convolution structure of the transition density is due to the independent and identically distributed (i.i.d.) assumption on log-price increments. Unfortunately, if this assumption does not hold, the numerical integration becomes computational intensive with a cost proportional tom2.Therefore the main contribution of the present paper is to devise an efficient algorithm to price discretely monitored options previously described exploiting the structure of the probability transition density of the underlying asset and of its sampling matrix when log-price increments are not i.i.d. and the FFT algorithm cannot be used. More precisely, we introduce the concept of cluster of eigenvalues of a sequence of matrices arising from the numerical quadrature of the backward recursion as we increase the number of nodes m. We formally prove (Theorem 3) that the number of significant eigenvalues (i.e., larger than a fixed tolerance∊) is approaching a constantr∊independent ofm,r∊≪m, as we take larger values of m. This result can be exploited to factorize the iteration matrix, giving a computational cost ofO(k∊m)operations,k∊≈r∊, for the matrix–vector multiplication, instead of the standardO(m2). Given that the cost of the factorization is nearly independent on the number of monitoring dates, the advantage of our approach will be the greatest, greater the number of monitoring dates. The algorithm is general in the sense that it can be applied to stochastic processes for which the transition density is known in closed form. However, to make concrete our analysis, we examine it in detail with reference to the Constant Elasticity of Variance (CEV) model, introduced by Cox (1996), Cox and Ross (1976). This dynamics is interesting allowing for very different transition densities and implied volatility shapes. Very few option pricing models yield fully analytical results, and most require numerical evaluations. The CEV model is not an exception. Numerical methods for pricing derivatives under the CEV process are presented, for example, in Boyle and Tian (1999), Boyle, Tian, and Imai (1999), Costabile (2006), Peng (2006). All the mentioned articles refer to the continuous monitoring case and do not admit a simple implementation for exotic derivatives, whilst our approach can easily deal with a variety of path-dependent options.Our algorithm is suitable to fast and accurate computation of prices and sensitivities of discretely monitored path-dependent options and therefore makes a real novel contribution for pricing real life contracts, see (Becker & Wystup, 2009), and risk-management decision making, (Castagna, 2009). For this reason our research is relevant to the methodology of operational research and to the practice of decision making. From the methodological point of view, we would like also to stress that the proposed factorization has potential and immediate applications to the study of properties of discrete time Markov Chains as well, a very important topic in operational research for modeling queuing sequences and many other practical systems, see (Norris, 1997).To confirm the efficiency of the proposed methodology, theoretical results are proved in appendix, and extensive numerical experiments are conducted to compare the accuracy and the computational cost of our algorithm with respect to a standard backward recursive quadrature and to Monte Carlo simulation. In particular, numerical experiments confirm that the greatest benefits are achieved for a large number of monitoring dates.The structure of the paper is as follows. First of all, Section 2 introduces the general setup to price exotic derivatives with the discrete monitoring feature. Section 3 deals with the quadrature approach to solve the recursive pricing formulas, and we introduce the factorization idea, based on the structure of the pricing matrix. Finally, in Section 4 we validate the pricing procedure with numerical results assuming a CEV dynamics for the underlying. Accuracy and computational cost of our pricing algorithm are compared with the above mentioned benchmarks, i.e., the classical quadrature approach and Monte Carlo simulation. Theoretical results supporting the proposed methodology are provided in appendix.Let us consider a derivative contract with a payoffϕ·at maturityT=NΔ, where N is the number ofΔ-equally spaced monitoring dates, and let S be the underlying asset price. The standard backward procedure computes the derivative priceV(S,n)at timenΔthrough the following recursion (eventually with a modification to deal with the early exercise feature):(1)VS,n=e-rΔ∫ΩpS,ξ;ΔVξ,n+1dξ,n=N-1,…,0,where r is the risk-free rate, andpS,ξ;Δis the transition density from S at time t toξat timet+Δ.Ωrefers to the integration domain and can vary depending on the trigger event. The above recursion starts with the payoff condition at maturityV(S,N)=ϕ(S). We are interested in computingV(S0,0),S0being the current spot price.In the following subsections, we show how the above framework fits different exotic contracts.If we deal with barrier options, the pricing recursion (1) starts from the payoff functionϕ(S)≔(φ(S-E))+, where E is the strike price andφis a binary variables taking value 1 for calls, and −1 for puts. If we denote withL(U)the lower (upper) barrier, the domainΩis(L,+∞)for down-and-out,(L,U)for knock-and-out, and(0,U)for up-and-out barrier options.For numerical purposes, the integration interval in (1) is truncated to(L,U)– for down-and-out options – or(L,U)– for up-and-out options – withL<S0(U>S0). The truncation is chosen such that the probability of moving fromS0toL(U) is less than a preassigned tolerance.A Bermudan option gives the holder the right to early exercise at each monitoring date. This option is worth more than the corresponding European version, but less than the American counterparty, for which the exercise occurs continuously. To take into account the early exercise possibility we modify (1) into:(2)VS,n=maxe-rΔ∫ΩpS,ξ;ΔVξ,n+1dξ,ϕ(S),n=N-1,…,0,withΩ=(0,+∞)for standard Bermudan options. If we have Bermudan contracts with a barrier trigger, thenΩ=(L,+∞),Ω=(0,U)orΩ=(L,U). Payoff function and domain truncation are as in Section 2.1.The maturity settlement of lookback options is based on the minimum or the maximum value of the underlying asset as registered during the lifetime of the option. At maturity, the holder can “look-back” and select the most favorable figure of the underlying as occurring at the monitoring dates. If we letS(nΔ)to be the asset price at the nth monitoring date, we can define the discretely observed minimum price asJn≔min{S(0),…,S(nΔ)}.The payoff function of a fixed-strike lookback on the minimum is given byE-JN+. The lookback option price at timenΔdepends on the underlying asset price S, and on the up-to-date minimumJn=Jand we denote it byV(S,J,n). Clearly it must beJ⩽S. Similar considerations hold for payoffs written on the maximum.Respect to the GBM dynamics, where a change of numeraire argument reduces the number of state variables, under a more general process specification we must keep track of both state variables, underlying price and running minimum. Given thatJn+1=min{Jn,S((n+1)Δ)}, the backward recursion becomesV(S,J,N)=φJ-E+and forn=N-1,…,0(3)V(S,J,n)=e-rΔ∫0+∞p(S,ξ;Δ)V(ξ,min{J,ξ},n+1)dξ,S being greater or equal to J. Heremin{J,ξ}is the minimum value of the underlying asset at the(n+1)th monitoring date given thatJn=JandS((n+1)Δ)=ξ. The initial option price is then given byV(S0,S0,0).Asian options are a very popular type of exotic derivative. Such as for lookback options, their pricing requires the introduction of a new state variable, i.e., the (arithmetic) average up to timenΔAn=1n+1∑i=0nS(nΔ).The arithmetic average follows the updating ruleAn+1=n+1n+2An+1n+2S((n+1)Δ),so that the price of the arithmetic fixed-strike Asian option satisfies the following backward recursion:(4)V(S,A,n)=e-rΔ∫0+∞p(S,ξ;Δ)Vξ,n+1n+2A+1n+2ξ,n+1dξ,forn=N-1,…,0, withV(S,A,N)=(φ(A-E))+.Step options are similar to barrier options, but the knock-and-out feature operates only gradually. To this aim we define the occupation timeInof the subsetI,I⊂R+,In=∑i=1n1{S(iΔ)∈I},where1{S(iΔ)∈I}is the indicator function, i.e., it is equal to 1 ifS(iΔ)∈I, 0 otherwise. Notice thatInmeasures the time spent by the underlying asset in the setIup to timenΔ.Intakes values in{0,1,2,…,n}and satisfies the updating ruleIn+1=In+1{S((n+1)Δ)∈I}.GivenS(NΔ)=SandIN=I, the payoff of a step option with principal amortization below the barrier isV(S,I,N)=1-ρNI+(φ(S-E))+,whereρis the knock-out killing rate. The introduction of the knock-out range has the advantage of regularize the barrier option by making the price and the delta continuous at the barrier, see for example (Linetsky, 1999). The price recursion for step options reads as: forn=N-1,…,0V(S,I,n)=e-rΔ∫0+∞p(S,ξ;Δ)Vξ,I+1{ξ∈I},n+1dξ.We also refer to (Cai, Chen, & Wan, 2010) for further details.As shown in the previous section, the general pricing framework requires the numerical computation of the following recursive integral equation(5)W(x,n)=∫abH(x,y;Δ)W(y,n+1)dy,∀x∈(a,b),forn=N-1,…,0, withW(x,N)assigned. This recursion holds for European and barrier options. Bermudan options also require an early exercise clause.If we have more than one state variable (such as for lookback, Asian and step derivatives), the function W depends on the time index n and on two state variables, so that we writeW(x,·,n). The additional state variable is the minimum value J if lookback options are considered, the average value A for Asian contracts and the occupation time I for step options.If we apply a quadrature formula to (5), with nodessiand weightswi,i=0,…,m-1, we obtain(6)W(si,n)=∑j=0m-1wjH(si,sj;Δ)W(sj,n+1).If we define the matrixHmasHm=H(si,sj,Δ)i,j=0m-1, then (6) can be written as(7)Wn=HmDmWn+1,n=N-1,…,0,whereWn=[W(si,n)]i=0m-1, andDm=diag(w0,…,wm-1). The matrixHmis called the sampling matrix of the function H, whileHmDmis the iteration matrix of the backward procedure (in the following we omit the subscripts to lighten the notation). Due to additional contractual features, such as early exercise, lookback or time averages, the recursion in (7) needs additional changes. In particular, the iteration matrix is the same for European, Bermudan, Asian, lookback and step options. The knock-out trigger event in barrier options generates a different structure of the domainΩand thus of the iteration matrix. This is discussed in Appendix A.In the recursion (7) the size of the iteration matrix equals the number of discretization points (nodes). It is well-known that increasing the number of nodes improves the accuracy of the solution. More precisely, the speed of convergence of the quadrature error to zero can be determined by using results on the speed of convergence of the integration rule when it is applied to the integral∫ΩH(·,ξ;Δ)dξ, as discussed in Atkinson (2009, Chapter 4). In this setting the backward recursion (7) has a cost proportional toNm2operations.Our aim is to reduce this cost substantially by exploiting the spectral properties of the iteration matrixHD, analyzed in details in Appendix B, as the matrix size m grows. In fact, in the present context, the iteration matrix has two interesting properties: (1) its eigenvalues are clustered at zero, i.e., only a small number of non-negligible eigenvalues can be retained, and (2) it is close, within a prefixed tolerance, to a banded matrix. Given these properties, the main idea is at first to replace the iteration matrix by its factorizationPJQH, wherePandQare unitary matrices,QHis the hermitian of matrixQ, andJis a bidiagonal matrix.1For the sake of completeness, we recall that the hermitian matrix of a matrixQis its transpose conjugate, andQis unitary if and only ifQQHis the identity matrix.1The factorization gives a relevant computational advantage in performing the matrix–vector multiplications required at each step of the backward procedure. The factorization, performed via the bidiagonalization algorithm of Golub and Kahan (1965), is very fast given the clustering property of the eigenvalues of the iteration matrix. In fact, as proved in Appendix B.2, the numberr∊of eigenvalues greater than a fixed tolerance∊is small with respect to the size m of the given matrix (usually, in applications, we use matrices of size at most4000×4000). To grasp the idea, if we consider an Asian option with 252 monitoring dates, and we let m to grow from 1000 to 4000,r∊remains constant at 412 (this will be throughly discussed in the numerical section part).Secondly, due to the fact that the matrixHDis obtained by the discretization of a transition probability density, it turns out to be ‘nearly’ banded: the significant entries having values larger than a prefixed tolerance are confined to a diagonal band. The banded behavior is illustrated by the coloured part of the iteration matrix in Fig. 2. Therefore we can exploit the banded structure by “breaking into pieces” the matrixHDas shown in the same figure. In practice, we factorize separately each piece via the bidiagonalization algorithm. This is possible because each sub piece of the sampling matrixHDinherits its cluster property, so that it is convenient to perform the factorization on matrices of a smaller size. This makes the procedure even faster (especially when the size of the original matrix is very large). It is clear that a too large band leads to consider “pieces of matrix” having a large size, so that we do not achieve any benefit from the suggested breakdown procedure. In this case, the standard quadrature will remain the preferred approach. However, if a band structure is detected, once each piece is factorized we can calculate the matrix–vector product as shown in Fig. 2: the original matrix (top left corner of Fig. 2) is “broken” into smaller pieces (top right corner of Fig. 2). Then each piece is factorized using the Golub-Reinsch algorithm (bottom left corner of Fig. 2) and the matrix–vector product is computed exploiting the Householder or bidiagonal structure of the matrices involved. Finally the resulting vectors are “summed up” taking into account the overlapping parts.In conclusion, the combination of the clustering and bandwidth properties allows us to reduce the computational cost of the pricing procedure, thanks to the factorization, which can be performed in a fast way due to the spectral properties above mentioned. More precisely, since in the recursive quadrature Eq. (7) we have to compute N matrix–vector products, the classical approach requiresO(Nm2)operations againstO(k∊m2+Nk∊m)operations, beingO(k∊m2)(O(k∊m)) the cost of the factorization (matrix–vector multiplication). In practicek∊≈r∊, and we have a cost reduction ifr∊<mN/(N+m). In particular, as the number of monitoring dates increases, the cost reduction is effective ifr∊<m, that, in general, it is always the case for the examples here considered, such as the previously mentioned Asian option contract. Using the proposed “Breaking into pieces” algorithm, it is thus possible even to achieve a larger time reduction exploiting the structure of the matrixHD, since the factorization and the matrix–vector products are computed considering the smaller submatrices and not the whole (large) iteration matrix, as shown in Fig. 2. The idea here described find a theoretical support in Appendix B.In this section we validate with numerical experiments the ideas put forward in the previous section (theoretical results are in the appendix). The setup is absolutely general but for aim of clarity we consider the CEV process. This dynamics is indeed quite interesting allowing for very different transition densities and implied volatility shapes. For this reason, we describe it in some detail in Section 4.1. Then in Section 4.2 we show that the matrixHDobtained by the discretization of the CEV transition density exhibits eigenvalues strongly clustered at zero: if we increase the size (number of quadrature points) of the matrix, the number of eigenvalues greater than a given tolerance remains constant. Thus the CEV process admits the cluster property that allows us to improve the performance of the recursive approach. Finally, in Section 4.3 we apply our algorithm (hereafter denominated BP algorithm) to “break into pieces” the matrixHDand we apply it to price exotic derivatives. This algorithm is detailed with a pseudo-code in the electronic supplementary material.For the numerical discretization of (5) we opt for a Gauss–Legendre quadrature (Quarteroni, Sacco, & Saleri, 2000). Numerical experiments not reported here have shown that the cluster of eigenvalues of the iteration matrix is independent of the adopted quadrature formulas, but the bandwidth of the matrix is larger for Gaussian quadrature respect to Newton–Cotes ones. However the results are similar, in terms of computational efficiency, for both classes of quadrature formulas.All calculations were performed using Matlab R2008a on a PC Intel Core2 Quad 2.40GHz with 3.24GB RAM and Windows XP operating system.Even if our algorithm is quite general, from now on, we assume that the underlying asset evolves according to a CEV process (Cox, 1996), i.e.,(8)dS(t)=rS(t)dt+σSβ+1(t)dW(t),S(0)=S0,and thus the transition probability density is given bypS,ξ;Δ≔e-rΔp0S,e-rΔξ;12rβe2rβΔ-1,withp0S,ξ;Δ=ξ-2β-32S12σ2|β|Δe-S-2β+ξ-2β2σ2β2ΔI12|β|S-βξ-βσ2β2Δ,whereIνis the modified Bessel function of the first kind of orderν. In particular, whenβ=0we have the classical geometric Brownian process (GBM), whenβ=-1we have an arithmetic Brownian motion (ABM), while whenβ=-0.5the Cox-Ingersoll-Ross square-root process (SR) is obtained. For details see also (Cox, 1996; Davydov & Linetsky, 2001; Fusai & Recchioni, 2007). In Fig. 3we plot the density function for different values of the leverage parameterβ(left panel) and the corresponding implied volatility curve (right panel). In particular, large negative values ofβgenerate a skewed to the left density function and a very steep implied volatility curve, as often observed in the market. The CEV process, consistently with empirical studies, allows for the volatility to depend on the price level and in addition the two are negatively correlated (leverage effect); moreover, the model is able to generate the smirk effect often observed in the market implied volatility curve. See for example (Boyle & Tian, 1999; Costabile, 2006). Unfortunately, the transition density of the CEV process is not of convolution type, thus a fast computation of the recursion via the FFT is not feasible. For these reasons, the CEV dynamics turns out to be an interesting case to test our pricing procedure.Numerical methods for pricing derivatives under the CEV process are presented, for example, in Boyle and Tian (1999), Boyle et al. (1999), Costabile (2006), Peng (2006). These articles price derivatives contracts, like barrier (Boyle & Tian, 1999), lookback (Boyle & Tian, 1999; Boyle et al., 1999; Costabile, 2006) and geometric Asian (Peng, 2006) options, assuming continuous monitoring and using a lattice approach, i.e., binomial or trinomial trees. In general, if we consider a non-Gaussian diffusion process, the diffusion coefficient is not constant and it is not possible to construct a recombining tree in the usual way. Therefore, the price process is transformed into another process having a constant diffusion coefficient, and the tree is built for the transformed process. In this case, advanced technique, like the adaptive averaging binomial method presented in Moon and Kim (2013) are available. Unfortunately, this procedure is reliable only for barrier options. For example, results in Boyle and Tian (1999) for lookback options are not accurate. To cope with this problem, in Costabile (2006) the author proposes a forward induction procedure that allows to compute the risk-neutral probability of each different payoff of the lookback option at maturity but with a computational cost that is cubic in the number of time step against the linear cost of the recursive quadrature. In addition, by using trees, we have slow and erratic convergence to the true price largely caused by the position of the barrier relative to the adjacent stock prices, see the theoretical results in Lin and Palmer (2013) with reference to the GBM dynamics. We can have large errors even with thousands of time steps and millions of node calculations. American options are considered in Nunes (2009), where the author proposes an alternative characterization of the early exercise premium that is valid for any Markovian and diffusive underlying price process. However, the author does not consider Bermudan options, for which early exercise can occur only on discrete dates. Finally, an analytical Laplace transform approach based on the scale function of a diffusion process is pursued in Davydov and Linetsky (2001). These authors obtain Laplace transform of barrier and lookback option prices involving Whittaker and Bessel functions of complex argument. Option prices are then obtained via a numerical inversion of the Laplace transform. Unfortunately, the procedure is quite computational intensive mainly for lookback options: this problem requires the numerical computation of an integral involving the inverse Laplace transform.Unless otherwise specified, we consider the same parameter setting as in Davydov and Linetsky (2001): the initial asset price isS0=100, the risk-free interest rate is10%per annum (r=0.1), the volatility isσ=0.25/S0β. Moreover, we assume that the asset pays no dividends (q=0), and all options have six months to expiration (T=0.5). If necessary, we truncate the integration interval as stated in Section 2.1 with a10-8tolerance.Table 1provides the number of eigenvalues greater, in absolute value, than∊=10-11and the bandwidth sizebtopof the matrixHD, see Fig. 2. The bandwidth size is fixed setting to zero the elements smaller, in absolute value, than10-9. The leverage parameterβin the CEV model is set equal to-0.5(results for different values ofβare reported in the electronic supplementary material). We stress that this table refers to pricing problems characterized by a different iteration matrix. We notice that:•a strong cluster at zero always occurs. For example, let us consider down-and-out options in Table 1, given a number of monitoring datesN=52. The number of significative eigenvalues (greater than∊) is 107, independently of the matrix dimension m;the cluster increases less than linearly with respect to the number of monitoring dates N. Thus our algorithm will achieve a large time reduction when N is large. In fact, we see in Table 1 that, given m, as the number of monitoring dates increases, the same happens to the number of eigenvalues greater than∊, but the ratior∊/Ndecreases;the presence of barriers strongly improves the cluster. This is evident if we compare the double barrier case in Table 1 to other contracts. In particular this suggests a relative better performance of the algorithm in pricing this kind of exotics;changing the value of the leverage parameterβin the CEV density does not affect the cluster. This is shown in the electronic supplementary material.We can also make some additional considerations on the bandwidth of the matrix:•we always have banded matrices; for example in Table 1 for European, lookback, Asian or step options withN=52andm=4000, the bandwidth size isbtop=493. However, the presence of barriers increasesbtop. Indeed barriers cut the tails of the density so that we have to sample a function that does not approach zero on the frontier of the domain. In general, the ratiobtop/mremains constant as m varies.the bandwidth size decreases as we increase the number N of monitoring dates; this is, for example, confirmed for all contracts in Table 1 whenm=4000and we let N to vary from 52 to 1008;Since the performance of the algorithm is optimized when the cluster sizer∊and the bandwidth sizebtopare both small, the above remarks suggest that this happens in all cases and the greatest benefit occurs as we increase N.In Table 2we show the speed-up for different contracts. Here the speed-up is defined as the ratio between the CPU time for the classical recursive (Rec.) algorithm and the one for our pricing procedure (Rec.+BP). As expected, the speed-up is always greater than 1. Double barrier options are the exception when the number of monitoring dates is small, due to a too large bandwidth.In this section we validate our pricing procedure comparing it to standard numerical quadrature and to Monte Carlo simulation. This has been implemented with an Euler discretization scheme with 300 steps between two consecutive monitoring dates, and 1,000,000 runs. In general Monte Carlo simulations applied to the CEV process achieve a two digits accuracy, but with a CPU time that turns to be higher than the recursive quadrature of a factor that varies from 4 to 10.2We also considered an exact Monte Carlo simulation by sampling from the known transition cumulative density function, but the procedure turns out to be too time consuming and of no practical relevance.2Extended numerical results are reported in the electronic supplementary material.In Tables 4,5we price European and barrier call options. Analytical formulas for European options are available in terms of the non-central chi-square distribution, see (Schroder, 1989). Prices of continuously monitored barrier options, i.e.,N=∞, are given in Davydov and Linetsky (2001) and reported here in Table 3.Since European options are path-independent contracts, their pricing requires a single recursion. For this reason, in Table 4 we setN=1and the BP algorithm is not at all convenient because the factorization is too costly with respect to a single matrix–vector multiplication. However the algorithm has the same accuracy as the analytical formula: our price estimates agree with those of the first row of Table 3.Numerical results for barrier options withβ=-0.5are given in Table 5. Prices for different values ofβand for up-and-out options are reported in the electronic supplementary material. We notice that:•prices computed with the BP algorithm agree with the ones from the pure recursion up to five decimal digits;as expected, the BP algorithm performs better as we increase the number of monitoring dates N, since the factorization has to be performed only once, and, at the same time, the bandwidth decreases (see Table 1 – we recall that our algorithm performs well if the bandwidth size is not too large). In fact, from Table 5 we notice the benefits of the BP factorization forN=252or greater;the algorithm works better as we increase the number of quadrature nodes m, since the cluster sizer∊does not increase varying m, while the computational cost of the matrix–vector multiplication increases;for double barrier options we observe that, increasing N, we have a trade-off between the cluster size (it improves) and the bandwidth size (it becomes larger). On this point we can make two remarks:1.In general, our algorithm improves the standard recursion for N larger than 252. Additional numerical tests have shown that the algorithm applied to the double barrier case can achieve a speed-up up to 3.6 whenN=10,000.Numerical results in Table 2 show that the BP algorithm performs better for single barrier respect to double barrier options if N is lower than 1008.concerning the convergence of the discrete monitoring price to the continuous monitoring case, we notice a slow convergence from above of prices in Table 5 to the ones in Table 3. For example, whenβ=-0.5andN=10,000, a single barrier option with discrete monitoring is worth 6.2756, whilst the continuous version is 6.2554. Moreover, comparing the two tables, it is clear that pricing a discrete monitoring contracts with a continuous monitoring algorithm could result in a substantial different, and thus wrong, price. As an example, consideringβ=-0.5and assuming to price a twice-a-day monitoring double barrier option, i.e.,N=52, the real price, i.e., the one computed considering the real monitoring is 0.7710, while the one computed assuming the continuous monitoring is 0.5126. Thus the importance of considering numerical algorithms with discrete monitoring, when contracts with this feature have to be priced.Experiments not reported here show similar performances for Bermudan options. The results are not affected by the presence or absence of dividends.Pricing lookback options is in general more expensive than pricing barrier options, because we have to keep trace of an additional state variable, the running minimum J. Thus, we expect an increase in the CPU time with respect to barrier and Bermudan option. However, since the matrix factorization is independent on the J-grid nodes, we still expect an improvement with respect to the standard recursion. Results reported in Table 6confirm this. In addition the two recursive algorithms show comparable accuracy. Table 7provides, as benchmark, confidence intervals computed by the Monte Carlo algorithm. An additional speed-up can be obtained considering less nodes on the J-grid, up to ten times if we reduce by a factor of four the nodes on the J-grid (ω=4in the mentioned table), maintaining a two decimal digits accuracy.Asian options (see Section 2.4) share with lookback options the presence of an additional state variable. Given that the iteration matrix is the same for the two contracts, we expect a similar performance of the algorithm in the Asian as in the lookback case. Results are given in Table 8, and comments given in Section 4.3.2 still apply. For example, if we setω=4, we reduce the CPU time by a factor of seven, still maintaining a two decimal digits accuracy. Reported option prices always fall into the Monte Carlo confidence intervals (see Table 9).Finally, in Table 10we consider the log-normal process (β=0). In this case, indeed, it is more efficient to use a FFT approach, as in Černý and Kyriakou (2011), or a randomization technique, as in Fusai, Marazzina, and Marena (2011). We use the results in Černý and Kyriakou (2011, Table 7) as benchmark. In Table 10 we also analyze the effect on the price accuracy of the truncation of the integration interval (see Section 2.1). The Rec.+BP algorithm always achieves a three to five decimal digits accuracy depending on the tolerance level when we truncate the domain. Significant reduction in the CPU time, without loss of accuracy, can be achieved with a sparser grid (ω=2andω=4) on the running average.Numerical results given in Table 11show that our algorithm applied to step options achieves the same accuracy as the direct recursive procedure: they agree up to the sixth digit, but with a strong reduction in the computational time. Thus, also for this kind of contracts the Rec.+BP algorithm is more efficient than the plain recursion and Monte Carlo simulation.

@&#CONCLUSIONS@&#
