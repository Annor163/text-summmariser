@&#MAIN-TITLE@&#
Discriminating risky software project using neural networks

@&#HIGHLIGHTS@&#
This study presents a predictive model to effectively predict riskiness of a project.Artificial neural networks can be used to learn the complex patterns of the OMRON dataset.Performance is evaluated and shown to be more advantageous than the logistic regression model.It provides better accuracy and sensitivity.

@&#KEYPHRASES@&#
Risks,Software project risk management,Risky project,Neural network,

@&#ABSTRACT@&#
Early and accurate discrimination of risky software projects is critical to project success. Researchers have proposed many predictive approaches based on traditional modeling techniques, but the high misclassification rate of risky projects is common. To overcome this problem, this study proposes a typical three-layered neural network (NN) architecture with a back propagation algorithm that can learn the complex patterns of the OMRON dataset. This study uses four accuracy evaluation criteria and two performance charts to objectively quantify and visually illustrate the performance of the proposed approach. Experimental results indicate that the NN approach is useful for predicting whether a project is risky. Specifically, this approach improves accuracy and sensitivity by more than 12.5% and 33.3%, respectively, compared to a logistic regression model developed from the same database. These results imply that the proposed approach can be used for early planning of limited project/organization resources and appropriate action for risky projects that are likely to cause schedule slippage and cost overload.

@&#INTRODUCTION@&#
A recent industry survey has revealed that software projects can fail due to a variety of problems including cost overload, schedule slippage, requirement misunderstandings, and client dissatisfaction [1]. There is a certain risk involved for any worthwhile software project. This fact highlights the need for early identification of risky projects to enable the planning of essential risk management activities and resources during their implementation. Suitable planning of resources and actions can effectively increase the success rates of such software projects [2].Research work on risk prediction for software projects involves two approaches: (1) predicting the overall degree of risk of a project and (2) predicting whether a project is risky. The former provides a quantifiable risk value so that project managers can discriminate between high, medium, or low risk software projects with respect to a given project risk level scale or by using clustering techniques [3–5]. The latter provides a meaningful sign (risky/not risky) as a classifier that a risk-prone project can be effectively identified early and thus aid the planning of risk management strategies [6,7]. The latter approach was considered in this study.Numerous binary prediction approaches have been constructed by statistical techniques for classifying risk-prone projects in the literature. Examples include logistic regression [6], Bayesian classification [8], and the association rule [9]. Although the overall classification accuracy of these approaches is at an acceptable level, correctly identifying a risky project at a true-positive rate is still a challenge.Effort investment without the premise that a risky project is correctly identified at the initial stage is ineffective [10]. For project managers, misjudging a risky project diminishes their alertness during implementation. Consequently, the failure rates of the project would increase without prior warning and thus, a great cost would be expended in controlling the crisis. In other words, the incorrect classification of not risky projects at the initial stage does not increase failure rates, even if extra effort and resources are invested.While neural networks (NNs) are regarded as a useful and accurate model building technique, little research has been conducted using this method to investigate issues related to software project risk management. The two known applications we found focused on risk analysis [11] and risk control [12]. There are currently no studies on the use of NN for classifying projects as either risky or not risky.In this study, an NN model with a back propagation algorithm is developed to predict how risk-prone a software project is. The remainder of this paper is organized as follows. Section 2 reviews some approaches related to project risk prediction. In Section 3, we introduce the OMRON dataset and briefly explain the basic concepts of NN. The steps for constructing our prediction approach are presented in Section 4. In Section 5, the experimental results are presented and then compared to results without the prediction model. A comparison with previous work using logistic regression is shown in Section 6. The external valuations produced are shown in Section 7. Conclusions are presented in Section 8. Finally, limitations and directions for future research are presented in Section 9.

@&#CONCLUSIONS@&#
