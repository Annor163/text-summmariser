@&#MAIN-TITLE@&#
The mixed capacitated general routing problem under uncertainty

@&#HIGHLIGHTS@&#
Probabilistically constrained formulation.Deterministic formulation where uncertain parameters follow a normal distribution.Branch-and-cut algorithm and an efficient heuristic algorithm.

@&#KEYPHRASES@&#
Routing problem,Mixed graph,Neighborhood search,Probabilistic constraints,

@&#ABSTRACT@&#
We study the General Routing Problem defined on a mixed graph and with stochastic demands. The problem under investigation is aimed at finding the minimum cost set of routes to satisfy a set of clients whose demand is not deterministically known. Since each vehicle has a limited capacity, the demand uncertainty occurring at some clients affects the satisfaction of the capacity constraints, that, hence, become stochastic. The contribution of this paper is twofold: firstly we present a chance-constrained integer programming formulation of the problem for which a deterministic equivalent is derived. The introduction of uncertainty into the problem poses severe computational challenges addressed by the design of a branch-and-cut algorithm, for the exact solution of limited size instances, and of a heuristic solution approach exploring promising parts of the search space. The effectiveness of the solution approaches is shown on a probabilistically constrained version of the benchmark instances proposed in the literature for the mixed capacitated general routing problem.

@&#INTRODUCTION@&#
An important operative issue in the context of the distributive logistics consists in planning the delivery routes performed by a fleet of vehicles to satisfy the requests of a set of elements of a network, namely required vertices, edges and arcs. In mathematical terms, the problem is modeled as Mixed Capacitated General Routing Problem (MCGRP): it basically consists in finding a set of routes on a mixed graph, beginning and ending at the same vertex (depot), with minimum total cost, satisfying demands located at links and vertices and with a capacity restriction on the demand satisfied by each route. The MCGRP generalizes many vehicle routing problems that have been widely studied in the last forty years and for which hundreds of papers have been written, either to give exact or heuristic procedures for their resolution or to provide lower bounds. Despite the practical importance of the mixed general routing problem, relatively few studies have been published on it. Most works deal with the uncapacitated case. Corberán, Letchford, and Sanchis (2001, 2003, 2005) studied the feasible polyhedron starting from an integer programming formulation solved through an efficient cutting-plane algorithm. Blais and Laporte (2003) proposed a different approach based on the transformation of the original problem into an equivalent Traveling Salesman Problem or Rural Postman Problem which are solved in turn through available exact algorithms.With respect to the capacitated case, Bosco, Laganà, Musmanno, and Vocaturo (2013) proposed a novel integer programming formulation and a branch-and-cut algorithm (B&C) where surrogate inequalities, introduced for the Capacitated Arc Routing Problem, are extended to the MCGRP polyhedron.The aim of this paper is the introduction of the uncertainty issue in this latter and more involved case, where each vehicle has a limited capacity. In effect, most of the real-world applications modeled as MCGRP are characterized by some uncertainty which affects the customers’ demand. For example, the operational plan of pickup routes in solid waste collection systems implies modeling the service by the means of required arcs or edges whenever the collection points are distributed along the streets, while some vertices are required if the collection is concentrated around specific points (e.g., hospitals, schools, and supermarkets). For generality, we shall also assume that the requests of random elements might be correlated to faithfully represent real situations. For example, in the garbage collection, the geographical nearness of some customers within the same regional district or along the same street suggests to consider a statistical correlation among their garbage productions.Following these considerations, we bring the stochasticity into the MCGRP by adopting the paradigm of the probabilistic constraints defined within the general Stochastic Programming (SP) framework (Birge & Louveaux, 1997). This modeling paradigm is appropriate in many situations, where an operational plan is periodically updated over a long planning horizon, and hence, becomes crucial to design a set of a priori routes that will cover the uncertain requests with a high reliability level. In particular, we formally introduce a stochastic formulation of the MCGRP where the stochastic capacity constraints are re-formulated in terms of probabilistic constraints. The explicit inclusion of the uncertainty within an already proved NP-hard problem, poses additional challenges, calling for the design of tailored solution approaches. This represents the second core contribution of the present paper. We develop a branch-and cut (B&C) algorithm for solving small instances and we design a large neighborhood search heuristic for the solution of instances of larger size where the B&C algorithm is used, in turn, to perform an exact local search on a portion of the overall feasible region.To put our contribution in the right perspective, we should precise that the adoption of the SP framework to model routing problems under uncertainty is not completely new. For an extensive survey, the readers are referred to Dror and Trudeau (1986) and Gendreau, Laporte, and Seguin (1996).Within this stream, most of the contributions rely on the two-stage paradigm and different recourse policies have been proposed in the literature. Bertsimas (1992) and Bertsimas and Simchi-Levi (1994) focused their researches on simple recourse policies that are separable by vehicle. A different policy has been presented by Ak and Erera (2007), that proposed a two-vehicle sharing recourse policy. During the last decades various heuristic and exact optimization approaches have been proposed and analyzed for constructing a set of tours minimizing expected costs given this recourse policy. Gendreau, Laporte, and Seguin (1995) proposed an exact solution for an a priori optimization model based on an integer L-shaped method. Laporte, Louveaux, and van Hamme (2002) presented an improved method where strong lower bounds at the root node contribute significantly to speed up the solution times. Gendreau, Laporte, and Seguin (1996) applied local search concepts embedded into a tabu search scheme to solve the a priori model presented in Gendreau et al. (1995). More recently, Laporte, Musmanno, and Vocaturo (2010) studied the capacitated arc-routing problem with stochastic demands in the context of garbage collection and proposed an adaptive large neighborhood search heuristic.Scant attention has been devoted to the formulation of routing problems with probabilistic constraints. Stewart and Golden (1983) presented a model able to find minimum cost routes with a threshold constraint on the probability of a route failure, whereas Laporte, Louveaux, and Mercure (1989) proposed a chance-constrained model for location-routing problems. A chance constrained version of the vehicle routing problem, solved to optimality by algorithms similar to those developed for the deterministic case, has been presented in Dror, Laporte, and Louveaux (1993).Besides the stochastic programming approach, the robust optimization framework has been adopted to deal with routing problems involving uncertain parameters where the probability distributions are not known. Amongst the recent contributions, we cite Sungur, Ordóñez, and Dessouky (2008), who analyze the case of uncertain customer demands and travel times. The goal is to determine vehicle routes which satisfy the capacity constraints and the specified time windows if all the uncertain parameters attain the worst case realizations simultaneously. The problem can be simplified to a deterministic model, which is attractive from a computational standpoint. Gounaris, Wiesemann, and Floudas (2013) (see also the references therein) investigate the case of capacitated vehicle routing problem. Robust optimization counterparts of several deterministic formulations of the problem are derived and numerically compared. Robust rounded capacity inequalities are developed, which can be separated efficiently for two broad classes of demand supports. Finally, the authors analyze the relation between the robust models and the chance constrained counterparts. Lee, Lee, and Park (2004) considered two types of uncertainty sets for the possible realizations of travel times and demands. The authors propose a column generation algorithm which encapsulates the robustness in the pricing problem cast as a robust version of the shortest path with resource constraints.In this paper we study the Mixed Capacitated General Routing Problem with Probabilistic Constraints MCGRPPC. In Section 2, we introduce the problem and we provide a chance-constrained integer linear programming formulation for the MCGRPPC. In Section 3 we define the B&C algorithm for solving small instances of the MCGRPPC. In Section 4 we present a tailored heuristic search to solve larger MCGRPPC instances. In Section 5, we present the results of our computational study. Finally, in Section 6, we give our conclusions and discuss future perspectives in this area.The MCGRPPC is defined over a mixed graphG=(V,A,E), whereV={1,…,n}represents the set of vertices, where vertex 1 represents the depot, andA={(i,j)⊆V×V}is the set of arcs, whereasE={(i,j)⊆V×V:i<j}is the set of edges.In the following, we shall denote byL=A∪E, the set of links and we shall indicate bycija non-negative cost coefficient associated with each link(i,j). We assume that the service activity may occur at some verticesVR⊆V, named required vertices, arcsAR⊆Aand/or edgesER⊆E, named required arcs and required edges, respectively. Thus,LR=AR∪ERdenotes the set of required links of G and all the required vertices and links will be referred to as required elements and indicated by R.For each subsetS⊂Vof vertices, or its complementary setS‾(S‾=V⧹S), we define the following sets:(a)δ+(S)={(i,j)∈A:i∈S∧j∈S‾},δ-(S)={(i,j)∈A:i∈S‾∧j∈S},δAR+(S)={(i,j)∈AR:i∈S∧j∈S‾},δAR-(S)={(i,j)∈AR:i∈S‾∧j∈S},δ(S)={(i,j)∈E:i∈S∧j∈S‾,ori∈S‾∧j∈S},δER(S)={(i,j)∈ER:i∈S∧j∈S‾,ori∈S‾∧j∈S},δL(S)=δ+(S)∪δ-(S)∪δ(S),δLR(S)=δAR+(S)∪δAR-(S)∪δER(S),SR=S∩VR,AR(S)={(i,j)∈AR:i∈S∧j∈S},ER(S)={(i,j)∈ER:i∈S∧j∈S},R(S)=AR(S)∪ER(S)∪SR.The previous notation remains valid as long as S is replaced by v, andS‾byv‾, orV⧹{v}. We denote byGRthe graph induced on G by all the required links and vertices. Generally, this graph is non-connected. The vertex sets corresponding to connected components ofGRare called R-sets. The subgraphs of G induced by the R-sets define the so-called R-connected components of G. An isolated required vertex represents itself an R-connected component of G.In real settings, the service demand associated with all but a subset of required elements is seldom, if ever, known at the time routes have to be designed. Thus, with the aim of more realistically modeling general routing problems, one should deal with the stochastic nature of the input parameters. In the following, we shall assume that the set of required elements is partitioned into two subsetsRCandRUto differentiate between elements with known and uncertain demands, respectively. Following the stochastic programming modeling framework, we shall assume that the uncertain demands are represented in terms of random variables defined on a given probability space(Ω,F,P). Thus, we shall denote bydi(ω)anddij(ω)the random demands associated with the “stochastic” required vertices and links, respectively. Deterministic demands are denoted analogously but without explicating the dependence onω. The introduction of the random variables within the mathematical formulation makes the classical criterion of feasibility, introduced for the deterministic case, no longer valid, since it may happen that the stochastic capacity constraints are satisfied for some elementsω∈Ω, but not for all. To deal with this issue, we adopt the paradigm of probabilistic constraints, determining a set of a priori routes of minimum cost satisfying the random demands with a fixed reliability levelα. In the next subsection, we shall introduce the mathematical formulation.For each required link(i,j)∈LRand each vehiclek=1,…,m, we denote byxijkthe binary variable equal to 1 if(i,j)is serviced by vehicle k which travels from vertex i to vertex j and 0 otherwise, and byyijkthe non-negative variable representing the number of deadheading traversals from vertex i to vertex j by vehicle k, i.e., the number of times that link(i,j)∈LRis traversed from vertex i to vertex j by vehicle k without being serviced.Moreover, for each required vertexi∈VRand each vehicle k, we denote byxikthe binary variable equal to 1 if i is serviced by k and 0 otherwise.The following constraints hold:(1a)∑k=1m(xijk+xjik)=1,(i,j)∈ER(1b)∑k=1mxijk=1,(i,j)∈AR(1c)∑k=1mxik=1,i∈VR(1d)P∑(i,j)∈ER∩RUdij(ω)xijk+xjik+∑(i,j)∈AR∩RUdij(ω)xijk+∑i∈VR∩RUdi(ω)xik+∑(i,j)∈ER∩RCdijxijk+xjik+∑(i,j)∈AR∩RCdijxijk+∑i∈VR∩RCdixik⩽Q⩾α,k=1,…,m(1e)∑j:(i,j)∈δAR+(i)xijk+∑j:(i,j)∈δ+(i)yijk-∑j:(j,i)∈δAR-(i)xjik-∑j:(j,i)∈δ-(i)yjik=∑j:(i,j)∈δER(i)xjik+∑j:(i,j)∈δ(i)yjik-∑j:(i,j)∈δER(i)xijk-∑j:(i,j)∈δ(i)yijk,k=1,…,m,i∈V(1f)∑(i,j)∈δAR+(S)xijk+∑(j,i)∈δAR-(S)xjik+∑(i,j)∈δER(S)(xijk+xjik)+∑(i,j)∈δ+(S)yijk+∑(j,i)∈δ-(S)yjik+∑(i,j)∈δ(S)(yijk+yjik)⩾2(xuvk+xvuk),(u,v)∈ER(S),2xuvk,(u,v)∈AR(S),2xhk,h∈SR,k=1,…,m,S⊆V⧹{1}(1g)xijk∈{0,1},k=1,…,m,(i,j)∈AR∪ER(1h)xjik∈{0,1},k=1,…,m,(i,j)∈ER(1i)yijk∈Z+,k=1,…,m,(i,j)∈A∪E(1j)yjik∈Z+,k=1,…,m,(i,j)∈E(1k)xik∈{0,1},k=1,…,m,i∈VR.Constraints (1a)–(1c) ensure that each request is serviced exactly once by exactly one vehicle (assignment constraints). Constraints (1d) are the probabilistic capacity constraints imposing, for each route, that the probability of not exceeding the vehicle capacity should be greater than or equal to a reliability levelα. Inequalities (1e) represent flow constraints. They model the symmetry conditions at each vertex. Note that, together with the integrality conditions, such constraints also imply parity conditions at each vertex.Constraints (1f) are connectivity constraints. They impose that for each subset of vertices (excluding the depot) containing a required link or vertex serviced by a vehicle, at least two links incident to the subset must be used to visit it (deadheaded or serviced); they also eliminate subtours not connected with the depot.The selection of the optimal route is guided by the minimization of the total cost, expressed by the sum of the total service costf1and the total deadheading costf2:(2)Minf=f1+f2f1=∑k=1m∑(i,j)∈ERcijxijk+xjik+∑k=1m∑(i,j)∈ARcijxijkf2=∑k=1m∑(i,j)∈Ecijyijk+yjik+∑k=1m∑(i,j)∈AcijyijkThe feasibility region of model (1) can be rewritten in a compact form as:X=x∈{0,1}(|AR|+2|ER|+|VR|)×m,y∈Z+(|A|+2|E|)×m|x,y∈X′,P(D(ω)xk⩽Q)⩾α,k=1,…,m.HereX′is the feasible set defined by the deterministic constraints (1a)-(1f), where D denotes a row vector having the following structure:D=dij(ω)…︸(i,j)∈ER∩RUdij(ω)…︸(i,j)∈AR∩RUdi(ω)…︸i∈VR∩RUdij…︸(i,j)∈ER∩RCdij…︸(i,j)∈AR∩RCdi…︸i∈VR∩RC.The formulation introduced above imposes individual chance constraints on each vehicle. This condition provides a guarantee that any individual route is feasible (with a reliability levelα), but it does not account for the performance of the entire fleet. Such an issue could be addressed by means of the joint probabilistic constraints, posing additional theoretical and computational challenges. Our formulation may constitute a safe approximation of the joint case by setting appropriately the values of the reliability parameter. Indeed, by Bonferroni’s inequality, a sufficient condition for ensuring feasibility in the joint chance constrained problem, is to divide the joint probability level∊among the m individual chance constraints and letting, for instance,α=∊/m(Nemirovski & Shapiro, 2006).Notwithstanding the individual nature of the chance constraints, the proposed model poses several challenges since it belongs to the class of integer problems under probabilistic constraints, for which the literature is rather scarce. Problems involving discrete random variables, arising either directly or as empirical approximation of the continuous ones, have been studied by Beraldi and Ruszczyński (2002), Beraldi and Ruszczyński (2002), Beraldi and Ruszczyński (2005), Beraldi and Bruni (2010), Beraldi, Bruni, and Violi (2012), and Bruni, Beraldi, and Laganà (2013). Here both exact and heuristic approaches have been proposed and tested.The case of general continuous random variables is even less investigated. In Fortz and Poss (2010) deterministic reformulations are analyzed for the case of independently distributed random variables, whereas in Klopfenstein (2010) the author studies valid inequalities for the problem with individual probabilistic constraints with uncertainty in both sides.In this paper, we assume that the random variables follow a multivariate normal distribution. While this assumption might appear restrictive, it often provides an accurate approximation of different probabilistic assumption, because of the well-known Central Limit Theorem and its variants. Under the above assumption, the chance constraints can be equivalently rewritten as second-order cone constraints. In the next subsection, we introduce our derivations.Letde,e∈RUdenote the random demands which assume normally distributed with meanμe, varianceσe2, and letθe,e′denote the covariance between e ande′. The probabilistic constraints can be rewritten as (see, e.g. Section 4 of Fortz & Poss (2010))(3)∑e∈RUμezek+∑e∈RCdezek+Φ-1(α)∑(e,e′)∈RU2θe,e′zekze′k⩽Qwhere(4)zek=xijk+xjikife=(i,j)∈ER,zek=xijkife=(i,j)∈AR,zek=xikife=i∈VR.By assuming thatde=μeandσe=0whenevere∈RC, andθe,e′=0when eithere∈RCore′∈RC, we can simplify the above relation as follows:(5)∑e∈Rμezek+Φ-1(α)∑(e,e′)∈R2θe,e′zekze′k⩽Q,that is equivalent to:∑e∈Rμezek⩽Q,Φ-1(α)2∑e∈Rσe2zek+∑(e,e′)∈R2|e≠e′θe,e′zekze′k⩽Q-∑e∈Rμezek2.Sincezek, are binary variables, the latter inequality can be linearized using classical techniques (see also Section 4 in Beraldi & Ruszczyński (2005)), so that (3) can be rewritten as:Xk={zk∈{0,1}|R|∑e∈Rμezek⩽Q,(6)∑e∈RΦ-1(α)2σe2+2Q-μeμezek⩽Q2+∑(e,e′)∈R2|e≠e′μeμe′-Φ-1(α)2θe,e′we,e′k,we,e′k⩽zek,we,e′k⩽ze′k,we,e′k⩾zek+ze′k-1,(e,e′)∈R2,e≠e′,zek=xijk+xjikife=(i,j)∈ER,zek=xijkife=(i,j)∈AR,(7)zek=xikife=i∈VR}.where the binary variableswe,e′kact to linearizezekze′k. As a result, an equivalent deterministic integer programming formulation of the MCGRPPC is obtained by replacing each probabilistic constraint (1d) with the set of additional variables and constraints given by (6). More precisely, it is(|R|2-|R|)2+|R|variables and2+32(|R|2-|R|)+|R|constraints. The complexity of the above model increases quickly with the number of vehicles and the number of uncertain required elements.Remark 1The reformulation (5) and the successive derivations also hold for the significant class of radial distribution (Calafiore & El Ghaoui, 2006), for which the probability constraints can be converted explicitly into convex second-order cone constraints of type (5). It is worth to highlight also the close relation that exists between the constraints (5) and the explicit deterministic counterparts of distributionally robust chance constraints, which are enforced over an entire family of probability distributions. In particular, for the family composed of all distributions having given mean and covariance, the distributionally robust constraint can be converted, once again, into an explicit second-order cone constraint of the type (5). This broadens the applicability of the approach presented in this paper to several interesting contexts.In the following section we present a branch-and-cut algorithm to optimally solve instances with a small number of vehicles and a limited number of required elements.In this section, we present the branch and cut algorithm designed to optimally solve the MCGRPPC. We mainly focus on the crucial aspects of (i) the determination of an initial feasible solution to use as upper bound and (ii) the definition of valid inequalities. The outline of the algorithm is provided by Algorithm 1 in Appendix A.In order to design an efficient branch-and-cut algorithm, it is also important also to have a good initial solution, that we built on the basis of the “partition-first-route-next” paradigm. A first attempt to obtain a good feasible partition relies on solving a probabilistic version of the capacitated concentrator location-based problem (see Gouveia & Saldanha-da Gama, 2006; Correia, Gouveia, & Saldanha-da Gama, 2010) with stochastic demands, in which several required elements are selected as concentrator locations, named “seeds”, and the remaining required elements are aggregated around each seed, while respecting, amongst the other deterministic constraints reported in Gouveia and Saldanha-da Gama (2006) also the probabilistic capacity constraints. The number of required elements selected as concentrators must be equal to m, initially set todT(α)Q, wheredT(α)represents theα-quantile of the random variables representing the total demand of the required elements. If the model is infeasible because m is inadequate, then m is increased to ensure feasibility.The goal consists in minimizing the total assignment cost of all the required elements to the selected seeds computed as the average of all the costs associated with the shortest paths linking the endpoints of two required elements.The solution of the above model returns a set of clusters defining a partition of all the required elements. Each cluster represents an instance of the mixed general routing problem that is solved through the B&C algorithm.This partitioning model does not adequately take into account the routing cost associated with each cluster. To improve the routing cost estimation an iterative scheme is designed, in which a set of diversification constraints is added dynamically to the partitioning model with the aim of selecting other seeds around which different clusters are generated and possible better routes are built. Such diversification constraints aim at exploring more promising portions of the search space according to the classical Variable Neighborhood Search (VNS) scheme (see, e.g. Fischetti, Polo, & Scantamburlo, 2004). More precisely, given a feasible partition of all the required elements, we identify the seed generating the cluster with the highest routing cost and we impose that such a seed cannot be selected for the nextζconsecutive iterations. We solve again the probabilistic version of the capacitated concentrator location-based problem with this additional constraint and repeat the diversification procedure by exiting with the best cost solution obtained within a maximum number of iterations, sayI. Observe that all the required elements that are prevented to become a seed can be selected again as a concentrator afterζiterations. In our implementation we setIas the minimum between the number of all the required elements and a threshold equal to 10, whileζ=I2.Alternatively, a feasible partition can be built heuristically as follows:(a) a set of seeds is defined by identifying at each step the one that is the unclustered required element farthest from the depot and the other seeds;(b) a cluster of required elements closest to each seed is generated in such a way that the overall demand associated with this cluster satisfies the probabilistic capacity constraint.The routing of the required elements collected in each cluster is obtained by using the B&C algorithm. In order to define a starting number of vehicles, we set m equal to the number of vehicles in the minimum cost solution chosen between the best solutions returned by both heuristic procedures.The initial LP relaxation includes Eqs. (1a)–(1c), (6), (1e), one connectivity inequality (1f) for each R-set, and some additional connectivity and R-odd cut inequalities that are identified according to the Sequence of edge cutsets procedure described by Belenguer and Benavent (2003). The separation problem associated with connectivity inequalities is solvable heuristically through a modification of the heuristic procedure presented by Fischetti, Salazar, and Toth (1997), and to optimality by means of polynomial time max-flow calculations.Besides these well-known cuts, we also derive some additional cuts exploiting the reformulation of the problem, which take as a basis the capacity inequalities proposed by Belenguer and Benavent (2003).(8)∑(i,j)∈δL(S)ηij⩾2D(R(S),δLR(S))Q-|δLR(S)|,S⊆V⧹{1},whereD(R(S),δLR(S))=∑e∈R(S)∪δLR(S)μewithηij=∑k=1m(yijk+yjik)if(i,j)∈E∑k=1myijkif(i,j)∈A.These inequalities can be adapted to our problem as follows:(9)P2D(R(S,ω),δLR(S,ω))Q⩽∑(i,j)∈δL(S)ηij+|δLR(S)|⩾α,S⊆V⧹{1},whereD(R(S,ω),δLR(S,ω))represents the demand associated with the stochastic and deterministic required elements inside S denoted byR(S,ω), andδLR(S,ω)indicates the stochastic and deterministic required links with one endpoint in S and the other outside of S.To the best of our knowledge, no polynomial algorithm exists to exactly solve the separation problem (8). However, a max-flow algorithm can be used to solve the separation problem of the so-called fractional capacity inequalities (see Belenguer & Benavent, 2003). In our context,we have to deal with the separation problem of the following probabilistic fractional capacity inequalities:(10)P2D(R(S,ω),δLR(S,ω))Q⩽∑(i,j)∈δL(S)ηij+|δLR(S)|⩾α,S⊆V⧹{1},that can be transformed in the following way:(11a)∑(i,j)∈δL(S)ηij⩾2D(R(S),δLR(S))Q-|δLR(S)|,and(11b)4Q2Φ-1(α)2∑e∈R(S)∪δLR(S)σe2+∑(e,e′)∈(R(S)∪δLR(S))2|e≠e′θe,e′⩽2|δLR(S)|-2D(R(S),δLR(S))Q∑(i,j)∈δL(S)ηij+2D(R(S),δLR(S))Q-|δLR(S)|2+∑(i,j)∈δL(S)ηij2,S⊆V⧹{1}The following property holds.Property 3.1ForS⊆V⧹{1}, if the following linear inequalities hold:(l1)∑(i,j)∈δL(S)ηij⩾2D(R(S),δLR(S))Q-|δLR(S)|, and(l2)4Q2Φ-1(α)2∑e∈R(S)∪δLR(S)σe2+∑(e,e′)∈(R(S)∪δLR(S))2|e≠e′θe,e′⩽2|δLR(S)|-2D(R(S),δLR(S))Q∑(i,j)∈δL(S)ηij+22D(R(S),δLR(S))Q-|δLR(S)|2,From (l1), (l2), and for anyS⊆V⧹{1}, it follows that:(12)4Q2Φ-1(α)2∑e∈R(S)∪δLR(S)σe2+∑(e,e′)∈(R(S)∪δLR(S))2|e≠e′θe,e′⩽2|δLR(S)|-2D(R(S),δLR(S))Q∑(i,j)∈δL(S)ηij+22D(R(S),δLR(S))Q-|δLR(S)|2=2|δLR(S)|-2D(R(S),δLR(S))Q∑(i,j)∈δL(S)ηij+2D(R(S),δLR(S))Q-|δLR(S)|2+2D(R(S),δLR(S))Q-|δLR(S)|2⩽2|δLR(S)|-2D(R(S),δLR(S))Q∑(i,j)∈δL(S)ηij+2∑(i,j)∈δL(S)ηij2,that is inequality (11b). □Observe that (l1) and (l2) are sufficient but not necessary conditions to ensure that the probabilistic inequality (10) holds. An example of violation of the condition is provided in Appendix A. Observe that, whenever all the demands are deterministic, the probabilistic inequality (10) reduces to the deterministic fractional capacity inequality expressed by (11a). In such a case, condition (l1) is necessary and sufficient to ensure that (10) holds.The following theorem states that conditions expressed by Property (3.1) are sufficient to ensure that inequality (10) holds. Hence, no violation of (10) occurs if no violations of (l1) and (l2) are checked.Theorem 3.1For anyS⊆V⧹{1}, let∊=2D(R(S),δLR(S))Q-|δLR(S)|⩾0be the fractional minimum number of deadheading traversals in the cutsetδLR(S)to service the overall average demand inR(S)∪δLR(S), then the probabilistic inequality(10)is valid for the MCGRPPC if conditions(l1)and(l2)are satisfied.From condition (l2), it follows that:4Q2Φ-1(α)2∑e∈R(S)∪δLR(S)σe2+∑(e,e′)∈(R(S)∪δLR(S))2|e≠e′θe,e′⩽-2∊∑(i,j)∈δL(S)ηij+2∊2.Condition(l1)implies that∑(i,j)∈δL(S)ηij⩾∊⩾0, therefore the following inequalities hold4Q2Φ-1(α)2∑e∈R(S)∪δLR(S)σe2+∑(e,e′)∈(R(S)∪δLR(S))2|e≠e′θe,e′⩽-2∊∑(i,j)∈δL(S)ηij+2∊2⩽-2∊∑(i,j)∈δL(S)ηij+∊2+∑(i,j)∈δL(S)ηij2.Hence, inequality (10) is valid for the MCGRPPC. □If∊<0, then(l2)is satisfied for a given value of∑(i,j)∈δL(S)ηij.A heuristic procedure to identify violations of the probabilistic capacity inequalities is applied at every node of the branch and cut tree, consisting in identifyingS∗such that (l1) is checked for possible violations. If a violation occurs, thenη¯ij,(i,j)∈δL(S∗)is computed according to the LP optimal solution, and the condition (l2) verified. Hence, the following inequality is added to the LPrelaxation:(11m)∑(i,j)∈δL(S∗)ηij⩾2D‾(S∗)Q-|δLR(S∗)|,whereD‾(S∗)=∑e∈R(S∗)∪δLR(S∗)μe+Φ-1(α)∑e∈R(S∗)∪δLR(S∗)σe2+∑(e,e′)∈(R(S∗)∪δLR(S∗))2|e≠e′θe,e′.As usual in the branch-and-cut method, a cut pool is maintained with some cuts generated so far in the algorithm. When the cut pool has grown to a certain size (50 cuts in our implementation), it is permanently deleted.In this section we describe a neighborhood search algorithm for the MCGRPPC. It relies on an outer diversification scheme, where different types of diversification methods are tested for different rates, followed by both heuristic and exact intensification phases. The diversification rate indicates the number of required elements modified in the current solution, while the diversification type specifies how to diversify the solution. After a solution is found in the outer loop, new solutions are explored through an intensification phase, after which an exact local search procedure based on the B&C algorithm is performed with the aim of finding the best solution in a given neighborhood.In the next subsections we provide a detailed description of the main procedures briefly discussed above. Algorithm 2 reported in Appendix A provides a pseudocode of the overall heuristic scheme.The diversification phase consists of removing some required elements from a solution s, and reinserting them to the modified solutions̃. The rationale is that the solutions obtained by diversification represent the entry point to explore more promising portion of the feasible space.A lot of freedom arises in designing the strategy for selecting the customers to remove from the solution, and reallocating them intos̃(see. e.g. Shaw, 1998; Russell, 1995; Franceschi, Fischetti, & Toth, 2006; Pisinger & Ropke, 2007).We implemented some of the removal and insertion heuristics presented by Pisinger and Ropke (2007), but without using statistics from the search to guide the choice. A detailed description of the removal and insertion procedures is provided below:•randomRemove(p,s)selectsp%required elements at random and removes them from the solution.worstRemove(p,s)removesp%of the required elements from solution s by selecting the ones whose removal returns the maximum saving.demandOrientedRemove(p,s)removesp%of the required elements from solution s according to a distance defined on the basis of the demands of these elements. More precisely, letΔij=‖di-dj‖be the metric associated with the required elements i and j with demandsdianddj, respectively. (for random elements we have considered the mean value). The first required element to remove is randomly chosen, while the second is selected as the nearest to the first, the third as the nearest to the second and so on untilp%of the required elements are removed from s.All the removal procedures return the listΓof the required elements removed from s (see Algorithm 3 in Appendix A).Concerning the insertion heuristics, the following procedures are used in combination with the removal ones:•randomInsert(Γ,s̃)randomly inserts ins̃the elements extracted fromΓ. More precisely, for each elemente∈Γ, a router∈s̃is selected randomly among the routes such that the total demand associated with the already serviced required elements satisfies (1d). A random positionπis chosen inside r where e will be inserted and serviced. Whenever e is already deadheaded in r, no attempt is made to select its position.regretInsert(Γ,s̃)inserts intos̃the elements extracted fromΓ, with the aim of maximizing the regret associated with each element. We use the regret objective proposed by Pisinger and Ropke (2007), withk=3, and verify (1d).Current solutions provided by the diversification phase represent a good starting point to address the search towards the construction of improved MCGRPPC solutions. Several neighborhoods are explored according to the basic Variable Neighborhood Descent (VND) strategy described by Hansen, Mladenovic, and Gerad (2003) until no further improvement can be found. All these neighborhoods are searched within a mechanism allowing a restart of the search from the first neighborhood at each improving solution found. The main features of the neighborhood moves are summarized as follows:(m1) merge: for each couple of routes r andr′in the current solution s, an attempt is made in order to merge these routes by servicing all the required elements ofr′after the required elements serviced in r.(m2)λ-interchange: this move is similar to the one defined by Osman (1993), and the CROSS-exchange move proposed by Taillard, Badeau, Gendreau, Guertin, and Potvin (1997). In the computational experiments, we usedλ∈{1,2,3,4,5}.(m3) interchangeInterRoute: this move is the same introduced by Savelsbergh (1992) and consists of reinserting a single required element at a time in an alternate route.(m4) interchangeInterRouteNewPath: this move creates a new empty route in which a single required element is inserted.(m5) twoOptPlusInterRoute: this move corresponds to the 2-opt∗ move defined by Potvin and Rousseau (1995).Each move is applied with the best-accept strategy. Whenever a move generates a solution with one or more empty routes, such routes are dropped from the solution. In order to escape from local optima, we accept also infeasible solutions, penalized in the objective function by a constraint violation penalty factor (see Cordeau, Gendreau, & Laporte, 1997; Toth & Vigo, 2003).More precisely, solutions with a number of vehicles larger than m are m-infeasible (alternatively, m-feasible), whereas the ones in which one route at least (alternatively, no route) violates (1d) are Q-infeasible (alternatively, Q-feasible). Given a solution, letξm=[m(s)-m]+be the number of routes in solution s exceeding m, andξQ=∑k=1m(s)μk-Q++[Φ-1(α)]2σk2-(Q-μk)2+,where[.]+=max{0,.},μkandσk2are the mean and variance of the random demand associated with the required elements serviced by the kth vehicle, respectively. Then, the penalty cost associated with such a solution is defined asυmξm+υQξQ, whereυmandυQare the unit penalties associated with the m-infeasibility or Q-infeasibility, or both. The modified objective function becomesf̃=f+υmξm+υQξQ. Penaltyυmis decreased by settingυm=maxυmmin,υm·υm-if, afterτconsecutive iterations, all the generated solutions are m-feasible, whereas it is increased by settingυm=minυmmax,υm·υm+whenever these solutions are m-infeasible. Similarly, penaltyυQis decreased by settingυQ=maxυQmin,υQ·υQ-, and it is increased by settingυQ=minυQmax,υQ·υQ+in the opposite case. The overall algorithm is detailed in Algorithms 4 and 5 reported in Appendix A.The B&C algorithm presented in Section 3 cannot be used to solve real-life instances directly because of prohibitive computational times, but it can effectively solve instances with a number of vehicles not greater than six. This suggests that the B&C algorithm may be used successfully to improve portions of the solution. In particular, a route optimization search relying on integer programming is used as a neighborhood search scheme. With respect to other applications of this idea (see Savelsbergh & Song, 2008; Song & Furman, 2013), in our implementation the B&C is used to recover the feasibility of the schedules of some required elements. We select such schedules in a subset of couples and triplet of routes of the solution returned by the intensification phase, and we solve a restricted problem, where the schedules of the remaining routes are kept fixed. Several strategical decisions are adopted to make efficient the proposed approach. How do we select the two or three vehicles whose routes define the neighborhood? Which is the criterion to stop the neighborhood search? We choose a simple and straightforward scheme. LetLdd(k)be the set of links deadheaded by vehicle k in routerk. Among the subsets of two vehicles that have not been selected before, we select the couple of vehicles(k1,k2)with the following rules:(a)Ldd(k1)∩Ldd(k2)is maximum. In case of multiple couples, we select(b) the couple for which the maximum violation of (1d) is checked. If no violation of (1d) takes place, then we select the two vehicles with the maximal residual capacity. If more couples still exist, then(c) we choose randomly the couple of vehicles with the maximum value ofLdd(k1)∩Ldd(k2)and the maximum violation of (1d) or the maximal residual capacity.We stop after evaluating 30% of all the couples. This scheme has been evaluated on a subset of tuning instances with a number of vehicles equal to or less than six, and it was able to find the optimal solution provided by the B&C algorithm, or a near optimal solution. However, to deal with instances with a number of vehicles larger than six, we enlarged the neighborhood size by considering the schedules of the required elements serviced by three vehicles, and optimizing the triple selected in accordance with the above rules. To maintain tractability with respect to the computational times, we optimized a triple everyfactor·nccouples of routes, wherefactor=0.2andncis the total number of couples to be examined.In order to test the efficiency of the proposed approaches, we used a dataset of randomly generated instances with probability levelα∈{0.85,0.95}. Each instance is built starting from the corresponding mggdb instance withβ=0.25of the dataset designed by Bosco et al. (2013) for the MCGRP. For each required elemente∈Rwith demandde, a random binary number is extracted to decide ifdeis affected by uncertainty or not. Then, a random value from the discrete uniform distribution over{1,…,coef×de},coef=5, is selected as variance of the random variablede(ω). All the stochastic required elements in the neighborhood of the end vertices of each stochastic required link are considered to define a negative or positive correlation with this link. Correlationρis selected randomly in the interval[-1,1]. Whenever the correlation betweene,e′∈R,e≠e′, is not zero, then the relevant entry in the covariance matrix is set asθe,e′=ρσeσe′. Finally, if no non-zero correlation occurs, then an other attempt is made by forcing some stochastic required elements close to the end vertices of the stochastic links to have a covariance with such links. The new instances are named mggdbsd, where sd stands for stochastic demand.Computational experiments have been carried out on a PC equipped with 2 Intel Xeon Quad Core CPUs @3.0gigahertz, with 6gigabytes RAM. The heuristic and the B&C algorithm have been coded in java. The B&C has been implemented by using ILOG CPLEX library, release 12.2, where all the standard CPLEX cuts are activated. We have run each heuristic for 5 times by using the same parameter configuration.In the tuning phase, we experimented a large range of diversification rates. We removed from 5 up to 90% of all the requests in each iteration. Due to the weakness of the insertion heuristics, the improvements obtained with the lowest and highest rates were very limited. Consequently we decided to reduce the range from 15 up to 60. More precisely, we observed that for small instances the best efficiency in removing requests relies on rates chosen in the set{15,25,35}, while for larger instances the best rates are the ones selected in the set{50,60}. To ensure consistency, we used the same set of rates for all the instances, that is{15,25,35,50,60}.

@&#CONCLUSIONS@&#
We studied the mixed capacitated general routing problem under uncertainty and we proposed a probabilistically constrained formulation where capacity constraints are imposed to hold with a given reliability value. We provided a deterministic equivalent formulation under the assumption that the uncertain parameters follow a normal distribution. We designed a B&C algorithm for the optimal solution of instances of limited size and an efficient heuristic approach. Extensive numerical experiments have been carried out on a set of stochastic instances of benchmark test problems proposed in the literature for the deterministic case. The analysis of the numerical results has shown the efficiency of the proposed approaches. The proposed approach can be extended to deal with other general routing problems in which operative constraints come into play.Hereafter is reported an example showing that conditions (l1) and (l2) are not necessary to ensure that the probabilistic inequality (10) holds. Consider, for example the instance defined by the mixed graph G depicted in Fig. 1, where all the required elements are marked in bold and their demands are defined through pairsμe,σe2that represent the corresponding mean and variance, respectively. SupposeΦ-1(α)=1.645andQ=3. Edge costs are not shown as they are not relevant to the example. LetS={6,7}be a subset of vertices not connected with the depot such thatD(R(S),δLR(S))=2,|δLR(S)|=1, and∑(e,e′)∈(R(S)∪δLR(S))2|e≠e′θe,e′=0.5. The minimum number of deadheading traversals in the cutsetδL(S)to satisfy (10) must be equal to 3. In fact:∑(i,j)∈δL(S)ηij=3>0.333=2D(R(S),δLR(S))Q-|δLR(S)|,the left hand side of inequality (11b) is equal to:4Q2Φ-1(α)2∑e∈R(S)∪δLR(S)σe2+∑(e,e′)∈(R(S)∪δLR(S))2|e≠e′θe,e′=3.006,while the right hand side becomes:2|δLR(S)|-2D(R(S),δLR(S))Q∑(i,j)∈δL(S)ηij+2D(R(S),δLR(S))Q-|δLR(S)|2+∑(i,j)∈δL(S)ηij2=7.111.On the other hand, since2|δLR(S)|-2D(R(S),δLR(S))Q∑(i,j)∈δL(S)ηij+22D(R(S),δLR(S))Q-|δLR(S)|2=-1.777,condition(l2)is violated.Algorithm 1The general scheme of the heuristicdiversificationrates={15,25,35,50,60}.diversificationtypes={RANDOM,WORST,DEMAND_ORIENTED}.Initial solution:s¯. Best solution:sB=∅. Current solution:s=s¯.ifs¯is feasible thensB=s¯.end ifforrate∈diversificationRatesdoITERATIONLocal best solution:sL=∅.fortype∈diversificationTypesdosD=diversification(rate,type,s)ifsDis feasible andf̃(sD)<f̃(sB)thensB=sD.end ifsI=Intensificationphase(sD).sI∗=ExactLocalSearch(sI).ifsI∗is feasible andf̃(sI∗)<f̃(sB)thensB=sI∗.end ififsL=∅orf̃(sI∗)<f̃(sL)thensL=sI∗end ifend fors=sL.end forreturnsB.Diversification procedure:diversification(rate,type,s)iftype=RANDOMthenΓ=randomRemove(rate,s).s′=randomInsert(Γ,s̃).returns′.end ififtype=WORSTthenΓ=worstRemove(rate,s).s′=regretInsert(Γ,s̃).returns′.end ififtype=DEMAND_ORIENTEDthenΓ=demandOrientedRemove(rate,s).s′=regretInsert(Γ,s̃).returns′.end ifIntensificationphase(s)Part Imoves={merge,λ-intechange, withλ=1,…,5, interchangeInterRoute,interchangeInterRouteNewPath, twoOptPlusInterRoute7}Sets′=s. Setγm=0,γQ=,τ=10,υmmin=1,υQmin=1,υmmax=1000,υQmax=1000,υm-=0.7,υQ-=0.7,υm+=1.5,υQ+=1.5.SetNSiterations=0.for alli=0;i<moves.size;i=i+1doApply the ith move to s:s̃=move(s′,moves[i]);ifs̃ism-infeasible thenγm=γm+1.end ififs̃isQ-infeasible thenγQ=γQ+1.end ifNSiterations=NSiterations+1.ifNSiterations⩾τthenUpdate unit penalties:ifγm=0thenυm=maxυmmin,υm·υm-.end ifIntensificationphase(s)Part IIifγm=NSiterationsthenυm=minυmmax,υm·υm+.end ififγQ=0thenυQ=maxυQmin,υQ·υQ-.end ififγQ=NSiterationsthenυQ=minυQmax,υQ·υQ+.end ifNSiterations=0.γm=0.γQ=0.end ififf̃(s̃)<f̃(s′)thens′=s̃.Restart from the first move:i=-1.end ifend forreturns′.