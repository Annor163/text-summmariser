@&#MAIN-TITLE@&#
Large-eddy simulation in a complex hill terrain enabled by a compact fractional step OpenFOAM® solver

@&#HIGHLIGHTS@&#
More transparency to CFD softwares gained via high-level open source developments.A generic ‘recipe’ provided for implementation of a new LES solver in OpenFOAM.Wall function implementation with environmental focus discussed.LES code validation for a challenging flow case over complex hill terrain.LES shows good agreement with reference data.

@&#KEYPHRASES@&#
OpenFOAM®,Runge–Kutta,Projection methods,Incompressible flows,Bolund hill,Complex terrain,

@&#ABSTRACT@&#
We report computational fluid dynamics (CFD) code developments using the high-level programming syntax of the open source C++ library OpenFOAM®. CFD simulations utilizing the large-eddy simulation (LES) approach are carried out using the developed code in a real-world application. We investigate wind flowing over the Bolund hill, Denmark. In the present configuration a west–east wind meets the steep west side of the hill. Such conditions lead to flow separation at the location of a sharp cliff. A full scale simulation, with a simulation duration of over one month, is carried out on a supercomputer. Physically, about 45min of real time is simulated in the LES enabling the statistical averaging of the results. The novelty of the paper consists of the following features: (1) we report validation results of the newly developed LES code for the Bolund hill case, (2) we show the high-level LES solver code in its entirety in a few tens of code lines which promotes transparency in CFD-code development in the OpenFOAM® environment, (3) the study is the first study to use LES in pointing out the complex 3d characteristics of the Bolund hill case with the computationally challenging west–east (270°) wind direction, and (4) based on the comparison with previous experimental data, and Reynolds averaged Navier–Stokes (RANS) simulations, the present LES gives so far the best match for the turbulent kinetic energy increase at the considered measurement positions.

@&#INTRODUCTION@&#
For some time already, the open source C++ code OpenFOAM® has been changing the way engineers and researchers can numerically solve partial differential equations (PDE’s) related to physical conservation laws using the finite volume method [1,2]. The high-level programming syntax of OpenFOAM® mimics the mathematical notation of PDE’s and it provides a meaningful, relatively straightforward opportunity to write your own CFD codes within a reasonable time frame [3–14]. Such features are particularly tempting for academics for whom a thorough understanding about the details of the implementation of various simulation algorithms often plays a major role. In fact, the compact programming syntax of OpenFOAM® also provides a meaningful opportunity for the enhanced dissemination of scientific results as the actual solver code implementation can be discussed together with new findings within publications [3,4,9].Recently, another benefit of open source CFD solver programming has been pointed out by Vuorinen et al. [3]. Vuorinen et al. noted that in the PISO pressure correction algorithm of the 2.0.1 version of the OpenFOAM® code, an artificial ad hoc damping term was introduced in the algorithmic implementation of the mass flux. The damping term was not a part of the original implementation by Issa [15] and it was noted to cause heavy dissipation of kinetic energy in certain flow cases although the influence of the ‘extra term’ remained very small in certain other cases [3]. Such observations would not have been possible in closed-source numerical software where similar details may equally well exist. In the present paper, we discuss the implementation of a LES code for turbulent flows using OpenFOAM®, and validate the code in a real-world complex hill terrain.In the past, Reynolds averaged Navier–Stokes simulation (RANS) has been the traditional technique for predicting the time-averaged flow in most engineering applications including wind engineering. In RANS all the turbulent motions are modeled using a turbulence model. In particular two-equation turbulence models have been widely utilized for wind prediction over complex terrains such as the Askervein hill located in Scotland [16–19], the Serra das Meadas mountains located in the north of Portugal [20], and over the Blashaval hill located in Scotland as well [21]. To date, the RANS based models are considered as a good compromise between the accuracy and the computational cost [22,23]. Although RANS models perform reasonably well for the mean wind prediction over such topographies, they may not perform well in flows containing complex phenomena such as streamline curvature, acceleration, deceleration and separation as the model constants are typically calibrated for simple, canonical flows such as turbulent channel flow [24]. For example, Abdi et al. [22] noted the challenge of predicting wakes in separating flow using RANS. For example, in a wind turbine CFD simulation, such disability of a method of predicting flow unsteadiness, could result in failure in turbine blade design, or non-optimal inter-spacing of the turbines in a wind park.In the present paper, we use LES turbulence modeling approach [24]. Although RANS simulations have been carried out on environmental flows extensively in the past, the application of LES over a real topography is not so common due to various challenges. In contrast to RANS, in LES only the subgrid scale turbulence is modeled and the flow unsteadiness is thereby explicitly resolved on the grid scale. As a drawback, LES requires typically much higher spatial resolution resulting in substantially longer computational times [24]. Special attention is required in wall-modeling as the heterogenous ground-roughness requires specialized wall functions. Additionally, the complex surface topology requires a fine grid in LES in order for the near-wall turbulence structures and flow separation at sharp edges to be adequately captured. Further, the inflow boundary condition and fully developed turbulent flow needs to be modeled using, e.g. the flow recirculation technique. Thereby, to date only a few LES studies in environmental applications have been reported of which many are involved in simulating wind flow over the Askervein hill [25–30].Indeed, the Askervein hill project [31] is one of the best-known experimental field campaigns for the validation of numerical codes and turbulence models. However, it should be noted that the hill in question has a relatively smooth terrain with almost two-dimensional surface topology [23]. In 2007–2008, Berg et al. [32] performed an experimental field campaign of three months over another environmental site, the Bolund hill. This research site is located in the coastal area of Denmark and a vast number of wind velocity measurements from the hill exist enabling a comparison also with the present LES. Although the Bolund hill is a relatively small hill (12m high), it has a more challenging topography than that of the Askervein hill. For example, the steep slope and the sharp cliff of the Bolund hill produce complex three-dimensional flow features which make the Bolund hill a relatively challenging, and also quite unexplored, test case for numerical codes [32].Only a few previous numerical studies have been reported on the Bolund hill. Prospathopoulos et al. [23] carried out the first RANS simulations finding quite good agreement between the data by Berg et al. [32]. Diebold et al. [34] employed LES together with the immersed boundary method for simulating flow over the Bolund hill on relatively coarse grid resolutions. Thereby, the small number of previous studies motivates gaining further insight on using LES to capture the flow unsteadiness around the Bolund hill, and to compare the simulations with (1) the experiments by Berg et al. [32] and (2) to the previous RANS by Prospathopoulos et al. [23]. We note that Diebold et al. [34] did not show the LES data for the wind direction 270°, and thus there seems to be no previous LES validation data for these conditions.For the present authors, the greatest benefits of OpenFOAM® have been (1) ability to carry out license free CFD, (2) the applicability of the code to parallel computing, and (3) the flexibility of the high-level code syntax which provides an opportunity to implement new flow solvers, often, using essentially only a few tens of code lines. The particular focus of our past studies has been in the development of well-known, existing simulation algorithms which are highly common in academic studies but which are not commonly available in OpenFOAM®. For example, Vuorinen et al. [3,8] implemented a density based fourth order Runge–Kutta solver which was utilized for 3d large-eddy simulations of supersonic jets [8,11]. A solver for such high speed flow with turbulence and shock waves did not exist previously in OpenFOAM® and it was thereby necessary to write a new density based solver. With regard to the present paper, Vuorinen et al. [3,7] utilized OpenFOAM® to write an incompressible flow solver based on the fourth order Runge–Kutta (RK) time integration, and the projection method for pressure–velocity coupling [28]. The new incompressible solver, called rk4projectionFoam, was written at the Aalto University in 2011. The solver was written as an alternative, low-dissipative method to the standard pisoFoam solver based on second order time integration and the PISO pressure–velocity coupling. The encouraging experience of our work is that writing such codes is a relatively straightforward task. For example, rk4projectionFoam was programmed in just a few days even though at that time our experience of OpenFOAM® scripting was still rather limited.Our previous studies have demonstrated the basic principles and ideas of rk4projectionFoam for simple geometries together with comprehensive validation studies for laminar the inviscid 2d Taylor–Green vortex, the 2d lid-driven cavity flow at two Reynolds numbers Re=2500 [3] and 10,000 [7], as well as turbulent channel flows at friction Reynolds numbersReτ=180[3] andReτ=590[7]. Moreover, the previous studies showed that rk4projectionFoam is computationally efficient, and typically numerically less dissipative than the standard pisoFoam solver of OpenFOAM® [3]. For example, LES studies on a 3d shear layer showed that rk4projectionFoam was approximately 50% faster than pisoFoam. Further, simulation of turbulent channel flow showed that rk4projectionFoam was marginally faster than pisoFoam. Based on the experiences gained in [3,7] on simplified Cartesian geometries, we decided to continue developments of rk4projectionFoam, and evaluate its performance in realistic, complex geometries which is the topic of the present paper.Here, we report an outcome of Finnish cross-disciplinary collaboration between Combustion and Thermodynamics research group at the Aalto University School of Engineering, Department of Energy Technology, and the Wind Engineering research group at the Lappeenranta University of Technology (LUT). Since 2010, the group at Aalto has been focusing on the development of compressible and incompressible Runge–Kutta based solvers for internal combustion engine related flows using OpenFOAM® [3,7,8,11]. The group at LUT has been utilizing the rk4projectionFoam solver with the particular focus of gathering understanding on the effect of complex landscape on choosing the optimal location of wind parks. The computational examples of the present study focus on the utilization of rk4projectionFoam for LES of wind flow over the Bolund hill [32].The paper has three objectives. First, we aim to provide a brief, yet informative, description of how a new LES solver based on the Runge–Kutta projection method can be implemented using the OpenFOAM® software. This solver is not available in the standard OpenFOAM® release which relies on the PISO [15] pressure correction method. The solver is very short in implementation allowing the complete description of the fluid dynamics part of the code. Second, the extremely high Reynolds number of environmental flows together with rough surfaces enforces one to resort to wall functions. Thereby, one objective is to provide a brief description on the practical implementation of a new wall function encoding information on the surface roughness of physical terrain, e.g. due to vegetation and rocks. Such a rough wall function is also not available in the standard OpenFOAM® release. Third, we present examples of LES of wind flow over the Bolund hill and compare the results with experimental measurement data, and previous RANS simulations in order to validate our solver for real-life flow applications. The present paper provides, to our knowledge, the first insights into the practical utilization of OpenFOAM® in environmental wind flows covering the full path from the practical implementation of a whole simulation code to the full scale application in a physical landscape. The developments herein promote the transparency of CFD codes that are applied for environmental flows or any other generic flow configurations.In the present paper, we implement flow solvers for incompressible flows as described by the Navier–Stokes equations:(1)∂u∂t+∇·(uu)=-∇p+νΔuwhich is of the general formNS=NS(u,p,…)=0. In Eq. (1) the convective term isC=∇·(uu), the pressure gradient isP=-∇p, and the viscous term isD=νΔu. Incompressibility of the fluid is guaranteed by the continuity equation(2)∇·u=0.Taking divergence from both sides of Eq. (1) leads to the Poisson equation for pressure(3)Δp=-∇·C.Eq. (3) is an elliptic equation implying global coupling between velocity and pressure.Projection methods link the pressure–velocity coupling to the well-known Helmholtz-decomposition [28,37]. In the decomposition, a scalar potential, i.e. pressure p is required such that:(4)u=u∗-∇p.In Eq. (4)∇·u∗≠0,∇·u=0and∇×∇p=0since the gradient of any scalar field is curl-free. It follows that p is a solution to the Poisson equation. Hence, the projection method is straightforward to understand taking the explicit Euler method as an example. First, an intermediate velocityu∗is evaluated using onlyCandDusing data from timestep n. Applying the Euler method over a timestepΔtyields(5)u∗=un+Δt(Dn-Cn).Based on Eq. (4), divergence is removed fromu∗using pressure gradientPwhen p has been solved from Eq. (3). Hence, in fractional step, fourth order Runge–Kutta (RK4) projection methods the velocity field is time integrated explicitly using RK4 similar to solving ordinary differential equations, and in-between the four substeps, the divergence can be removed as based on the Helmholtz decomposition.In direct numerical simulation (DNS) the NS-equations are solved as such using fine space and time resolution. In LES, the resolution is coarser and Eq. (1) is solved for the spatially filtered variablesũ,pˆwith additional subgrid scale (SGS) terms appearing as source terms in the equations. The LES equations take the formNS(ũ,pˆ,…)=τsgs, whereτsgsrequires modeling. Here, we choose the one-equation eddy-viscosity SGS approach by Yoshizawa et al. [38] whereksgsobeys the following transport equation:(6)∂ksgs∂t+∂∂xj(ujksgs)=∂∂xj(ν+νsgs)∂ksgs∂xj+Pksgs-C∊ksgs3/2ΔwherePksgs=2νsgsSijSij,Sijis the resolved rate of strain tensor,νsgs=Ckksgs1/2Δ,Δ=V1/3, where V is the volume of the computational cell.Ck=0.094andC∊=1.048. The filtered LES equations can then be closed by settingτsgs=∇·(νsgs∇ũ). From here on, the notation is simplified and we refer to the LES-filtered velocity simply asu. The spatial discretization utilizes the second order accurate finite volume method [1–3].High Reynolds number flows, such as the present Bolund hill case, need to utilize a wall-function approach in order to account for the thin, turbulent boundary layers. Also the surface roughness, e.g. due to vegetation and waves, can be conveniently accounted for using wall functions. In our wall function, the wall shear stressτwis obtained by prescribing the boundary condition of the kinematic SGS viscosityνsgsat the wall by using the logarithmic law of the rough wall(7)u=uτκlnzz0whereuτis the friction velocity,κ=0.41is the von Kármán constant, u is the instantaneous LES resolved velocity, z is the distance from the ground level andz0is the ground roughness length. The wall shear stress can be defined using an effective viscosityμeff=(μ+μsgs)such that(8)τw=(μ+μsgs)dudz≈(μ+μsgs)upzpwhere μ is the fluid viscosity,μsgsis SGS viscosity and subscript p indicates the values of velocity at the first interior nodes from the wall. Using the definitions of the friction velocityuτ=τw/ρand the kinematic viscosityν=(μ/ρ)into the Eq. (8), we get(9)uτ2=(ν+νsgs)upzp.Consequently, the boundary condition forνsgsat the wall can be calculated as(10)νsgs=uτ2(up/zp)-νin whichuτfollows from the Eq. (8),(11)uτ=upκln(zp/z0).OpenFOAM® includes several examples in writing high-level solvers for various CFD-applications. The basic principle is typically simple: old, existing code is copied, renamed, modified, and compiled. Fig. 1depicts this process schematically. In order to implement a new solver for the projection method we choose as a starting point an existing incompressible solver called pisoFoam, and delete the script inside the main while-loop (see Fig. 2).As explained in the study by Vuorinen et al. [3] for the explicit Euler method, the projection method for the NS-equations can involve the calculation of the velocity increment using syntax similar to.phi=interpolate(U)&mesh.Sf();dU=dt∗(nu∗fvc::laplacian(U) - fvc::div(phi, U));which evaluates the momentum flux on cell faces as a surfaceScalarFieldϕ=u·ndSand the velocity increment at the cell centroids as a volVectorFieldδu=Δt(D-C). Consequently, one finds an intermediate velocityu∗=un+δuand then removes divergence using the pressure gradient P. The full, functional part of rk4projectionFoam is provided in Fig. 1 to implement the fourth order Runge–Kutta projection method. The high-level implementation of fluid dynamics part within the main while-loop of the code is less than 40 lines long, the code runs in parallel, and the code works readily in arbitrary geometries on unstructured grids. Here, we use the classical choice for the time-stepping coefficients:a1=16,a2=13,a3=13, anda4=16. We note that Eq. (6) is integrated in time numerically using the second order backward implicit method and it is solved after the fourth (last) sub-step of the RK4 method. This is seen at the end of the while-loop in Fig. 4 where a call to updateksgsis implemented with syntax turbulence->correct().As mentioned, the rk4projectionFoam code has been previously validated for laminar flows, and for turbulent channel flow atReτ=180[3], andReτ=590[7]. Here, we show a brief comparison of the radial statistics for the mean and root-mean-square velocities for turbulent pipe flow atReτ=360for which DNS data by Eggels et al. [39] exists. As noted from Fig. 3, for the present LES on a coarse grid (without a subgrid scale model), rk4projectionFoam and the pisoFoam both give results which, considering the coarse grid resolution, are in close agreement with the reference data by Eggels et al. [39]. In the previous study [3] it was concluded that, in parallel runs, the pisoFoam was typically somewhat slower than the rk4projectionFoam. For example, LES studies on a 3d shear layer showed that rk4projectionFoam was approximately 50% faster than pisoFoam. Also the time accuracy of pisoFoam is only of second order in contrast to the fourth order accuracy of rk4projectionFoam[3]. Hence, as our present LES is computationally very demanding lasting over one month of wall-clock time, from now on, we only focus on using the rk4projectionFoam solver.In order to implement a new wall function a procedure similar to the one depicted in Fig. 1 is carried out. An existing wall function code is located, copied, and renamed consistently into a new wall function followed by the compilation of the code. Part of the new wall function implementation code is shown in Fig. 4. It should be noted that the boundary condition on boundary cell faces can be easily set forνsgsby looping over the boundary cell faces. The wall-function model is validated together with rk4projectionFoam by simulating a fully developed rough turbulent boundary-layer flow at the high friction Reynolds number ofReτ=7500. This test is carried out in a domain of size4×2×1m3 on a coarse Cartesian grid typical to environmental flows withΔx=0.08m andΔy=Δz=0.04m. The respective non-dimensional grid-spacings areΔx+=600andΔy+=Δz+=300, respectively. The ground roughness lengthz0is set to3.33×10-5m. Fig. 5compares the simulated mean streamwise velocity profile with the logarithmic velocity profile given in Eq. (7) as well as other rough log-lawU+=(1/κ)ln(z+/ks+)+8.5using the relationks=30z0. As seen from Fig. 5, very good agreement between the simulated and theoretical profiles is obtained using the newly implemented wall-function with a maximum velocity mismatch of less than 5% between LES and the logarithmic law.

@&#CONCLUSIONS@&#
In the present paper, we reported LES of the Bolund hill with an intention to validate the newly implemented solver rk4projectionFoam and the wall-function model suitable for the rough surface into OpenFOAM®. The validation is demonstrated for the real-life atmospheric flows at a full scale. Further, we briefly outlined the key implementation details of roughness wall functions and a solver code into OpenFOAM®. The results from the Bolund hill simulations indicate good agreement between present LES and the experimental data. Based on the prediction-error criteria, it is found that LES produces the best results of the TKE due to the smallest error compared with the results by any other numerical or experimental (wind tunnel and water channel) studies reported previously for the Bolund case. It must be mentioned that the best prediction is only from the 270° wind direction. However, it would be also important to account for the prediction errors from other wind directions, which is a subject of our future work.The important feature of OpenFOAM® is the compact syntax and e.g. the effective, fluid dynamical part of rk4projectionFoam only includes about 50 lines in total while solving the Navier–Stokes in an explicit, unhidden manner in contrast to most hidden source, commercial codes. In the future, the applications of rk4projectionFoam will be extended by further implementing a forest canopy and actuator disk models to simulate atmospheric flows over forested wind parks common to Finnish landscape. The presented solver code for rk4projectionFoam could be applied to various other flows as well. For example, the accurate prediction of turbulence properties is highly important in understanding about wind comfort and safety for pedestrians in urban environments [35]. Further, rk4projectionFoam could be well used in understanding e.g. sediment transport by wind in the vicinity of plantations [36].