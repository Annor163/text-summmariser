@&#MAIN-TITLE@&#
A formal approach for modeling context-aware Human–Computer System

@&#HIGHLIGHTS@&#
We propose a formal approach for specification of pervasive user interface.We define a Petri nets modeling language for pervasive Human–Computer System.We demonstrate that the accuracy of the generated interface depends on the context and task’s validity.We demonstrate the validity of our approach by a case study in a medical domain.We propose a system for monitoring diabetic patient in smart hospital.

@&#KEYPHRASES@&#
Human–Computer System,Pervasive computing,Context-awareness,Context modeling,Petri nets,PNML,

@&#ABSTRACT@&#
Ubiquitous environments are often considered as highly dynamic environments and contextual information can change at runtime. The user interface should provide the right information for a given user considering runtime context. Such an objective can be achieved only when we deduce the user’s requirements in terms of information and present it to the user according to his current context of use. The overall objective of our research is to generate a user interface adapted to the current context of use for critical fields. This paper explores some key issues related to the architecture of context-aware applications. A formal approach for the analysis of pervasive Human–Computer System (HCS) is presented. XML Petri nets are used to model the pervasive HCS. The proposed approach is illustrated with a case study which presents a hypoglycemic diabetic patient in a “smart hospital”.

@&#INTRODUCTION@&#
Pervasive computing offers the capacity to build systems that can adapt the delivered information in order to meet users’ requirements. This new type of interaction raises once again the issue of adapted interface. We switched from a user-centered system design to a context centered system design. Indeed, Human–Computer Systems (HCS) have evolved to become context-aware. Thus, the HCS switched from the triplet (System, Task, User) to the triplet (System, Task, Context). Designing, implementing and evaluating context-aware HCS is specifically adapted to user’s task by taking into consideration the context in which the user is operating.Modeling the user’s task has a strong impact on the design of user interface. In recent years, there have been different approaches to the specification of the task and how it is related to the area of application. Several notations have been proposed (Concur Task Trees CTT [1], Collaborative Task Modeling Language CTML [2]). The latter differs in terms of presentation, expression, degrees of formality and granularity, but they are all based on the same principle: tasks are organized hierarchically in order to represent the task’s decomposition which is executed to meet a particular purpose. The process of task decomposition ceases once the atomic task ‘action’ is obtained.In addition to the above-mentioned approaches, Petri nets (PN), which were proposed by Carl Adam Petri in 1962, are also considered as a promising tool for task modeling. PN are a mathematically based formalism dedicated to the modeling of parallelism and synchronization in discrete systems [3]. PNs are continuously expanding and are a suitable tool for HCS modeling. Initially, they were only used to describe tasks that were to be computerized. However, later, especially with the emergence of High Level Petri Nets, they were used to model Human–Computer Interaction.With the rapid evolution of user interaction, new problems emerged. Indeed, the environments in which users interact via interfaces are becoming increasingly complicated and include various types of sensors that provide different data to users. Several tools were suggested to create, edit, manipulate, implement, view, validate and verify user’s interface.Consideration of the user’s task represents an important criterion in an environment where the context has a direct impact on the user’s task. Users’ interface must change according to the context and task, at a specific moment. Modeling the ubiquitous environment and user’s task raise several issues. Pervasive environments are extremely dynamic and hold a vast amount of information. In critical fields, such as health, nuclear and transport systems, modeling pervasive systems must be rigorous with a minimum proportion of error risk. If the user’s interface shows wrong information, it may have a disastrous impact on human lives and on equipment. So, the use of formal approach in such fields is required to guarantee a valid interface starting at the modeling stage.To demonstrate the strength of formal modeling tools in critical areas, we chose to test our approach in the medical field: the monitoring of diabetic patients in a smart hospital. This case study is very significant. Indeed, applications related to diabetes continue to increase due to the growth of the number of diabetic patients around the world. Hypoglycemia or mishandling by the medical team may cause the patient’s death. The aim of our approach is to reach a valid mobile interface to guide the user to best accomplish his task.Our research focuses on this, and we aim to adapt the user interfaces to their context of use. We need (i) to model the context in a ubiquitous environment, (ii) to model the user’s task based on its environment and (iii) to identify the user’s requirements for the generation of the user’s interface adapted to the context in a critical field.Section two of this article discusses some literature reviews of context-aware architectures and lays out the requirements that need to be respected in the functioning of a pervasive system. In section three, we present a review of context modeling. Our modeling approach for pervasive HCS is mentioned in section four. XML based tools for specifying and generating pervasive interfaces are often used, so, we introduce a state of the art of Petri nets through XML and we particularly focus on PNML. Our approach will be illustrated in section five with a case that concerns the monitoring of diabetic patients suffering from hypoglycemia in a smart hospital. Finally, in section six, we will examine how to verify the model properties’ built by composition based on PN for a valid generation of user interface.Ubiquitous computing has become increasingly necessary to improve customized access to a wide range of mobile devices and services. Researchers are trying to overcome ergonomic inconsistencies caused by context variations (screens, locations, users, etc.). A number of context-aware systems have been developed to demonstrate the usefulness of context-aware computing technology. This section defines the notion of context and presents the different architectures of context-aware systems.The concept of context is widely used in many fields, especially in the field of computing. Definitions of context and context-awareness are widely available in the literature. One of the earliest definitions of context-awareness was introduced by Schilit. It links location, user identity and environmental resources to a mobile system [4]. In 1996, other authors considered context as the objects of the environment and added the notion of time, temperature and season to the location of the user. Then, the context is considered as the location of the user and the state of their environment. Dey defines context as a set of information that characterizes the situation of an entity. An entity can be a person, a place or an object [5]. At the same time, some researchers agree with the definition set forth by Dey and propose the environment as a triplet of entities namely<Object,person,event>. The notion of plasticity and interfaces adapted to users are also defined.In 2004, Calvary substitutes the term “context” with “context of use” and proposes a user interface adapted to the context of use. Calvary suggests a new triplet namely<user,platform,environment>[6]. More recently, all context definitions have revolved around Dey’s definition [5]. However, some authors also added the notion of social context and take into account the emotions and mood of the user. Others base their work on Dey’s definition and consider the context as being all external application parameters that affect its behavior by defining new views of its data and services.Following our study of the main definitions, we have concluded that the majority agree on the definition proposed by Dey. For our research, we will use Dey [5] and Calvary’s definitions which define context as the triplet<user,platform,environment>[6]: the user’s model represents the user of the pervasive system. It identifies the user’s nature, his personal information, his field of experience, his preferences, etc. The platform model defines the hardware and software platform supporting the interaction; and the environment model represents the physical and social conditions where the interaction takes place (e.g., noise level). It expresses the ambient environment around the interactive system and the geographic location of the pervasive system.In conclusion, pervasive computing allows a system to interact with users through context-aware devices. A system is considered context-aware when it is based on the different contextual information detected or inferred from the environment, it evaluates this information and may decide on the best service to provide to the user. The following section presents a state of the art of different architectures of context-aware systems.The majority of published works state that it is imperative to separate acquisition and modeling of the context from its use. All research agrees on an architecture that consists of five layers (Fig. 1), where each layer has its own well-defined function: context acquisition, context interpretation, context storage, context diffusion and finally the application layer.Context acquisition represents the first step in the development of a context-aware application. To intercept context data, the sensing layer has a number of sensors. A sensor is a hardware or software source able to intercept or generate contextual information. The layer of context interpretation allows analysis and processing of the collected data provided by context acquisition. It aims to convert this data to a higher level, which is easier for systems to understand and manipulate. The use of multiple sources from the environment can lead to conflicting and contradictory results, which lead to incorrect situations. Once the layer has performed its analysis, it must action some form of “intelligence” to intercept and resolve these conflicts [7]. The context storage models and archives the data provided by the interpretation layer for subsequent use of the data collected and interpreted. To do this, an appropriate model should be defined in order to describe this information. Context storage is a critical step in the development of context-aware applications. There are several methods available in the literature for modeling context as the object-oriented model, the graphical models, ontologies and hybrid models. Section three will describe these different approaches. The context diffusion aims to adapt the application layer according to the information provided by the storage layer. It has technical communication to notify the application layer of possible changes in context. In other words, this layer has two main roles: (i) provide the application layer services and functions necessary for the development of a context-aware application, and (ii) notify the application layer of changes occurring within the context [7]. Finally, the application layer contains the adaptation engine responsible for defining the various adjustments and reactions that the system must make due to a change of context.Having presented the general structure of a context-aware system, we introduce in the following section, the different architectures cited in the literature.

@&#CONCLUSIONS@&#
