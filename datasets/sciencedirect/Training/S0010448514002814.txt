@&#MAIN-TITLE@&#
A mapping-based approach to eliminating self-intersection of offset paths on mesh surfaces for CNC machining

@&#HIGHLIGHTS@&#
A method of eliminating self-intersection of offset paths on mesh surfaces is proposed.The new orientation rule based on the local loop is developed and discussed in detail.The method of rounding the sharp corner is preliminarily investigated.Simulation and real machining are performed.

@&#KEYPHRASES@&#
CNC machining,Mesh surfaces,Mesh mapping,Offset path,Corner rounding,

@&#ABSTRACT@&#
Geometrically, a tool path can be generated by successively offsetting its adjacent path on the surface with a given path interval, which preferably starts from one of the surface boundaries or a primary curve. The key issues involved in offset path planning are the generation of raw offset paths and the elimination of the self-intersection of raw offset paths. Most researches available in this area are focused on how to generate the raw offset paths, however, the latter, especially how to eliminate the self-intersection of the offset paths on mesh surfaces, has not been sufficiently addressed. In this paper, a mapping-based approach to eliminating the self-intersection of offset paths is proposed for the CNC machining of mesh surfaces. The method first flattens the mesh surface onto a predefined plane by using a mesh mapping technique, and then taking the mapping as a guide, the offset paths are also naturally mapped onto the plane, from which those invalid self-intersection loops can be effectively identified and eliminated. To handle the issue of self-intersection for all types of offset path, a notion of local loop is introduced to detect and eliminate the invalid self-intersection loops. After that the planar paths are inversely mapped into the physical space and the final tool paths used for the machining of mesh surface are obtained. Meanwhile, in order to improve the kinematic and dynamic performance of the machine tool when machining along the generated offset paths, a method for rounding the sharp corners of tool paths, which result from the process of eliminating the self-intersection of raw offset paths, is also preliminarily investigated. Finally, the proposed method is validated by the results of simulations and machining experiments.

@&#INTRODUCTION@&#
Computer numerical control (CNC) machining has been commonly used in the aerospace, automobile, die/mold industries. Since CNC machine tools cut a part out of a blank by moving the cutter along a given tool path, generating an efficient tool path becomes very important for sculptured surface machining. At present, although some primary tool path generation methods such as iso-parametric method  [1,2], iso-planar method  [3–5] and iso-scallop method  [6–8] have been proposed, most of these methods are only applicable to parametric surfaces. Straightforward extensions of these methods to other type of surfaces are not obvious to us. For example, few of them can be directly used for the machining of mesh surfaces. From the manufacturing point of view, parametric models utilized widely in design stage may not be a good choice for the purposes of CAM and process planning due to its complexity in data exchange between different CAD/CAM systems and geometric computations related to tool path generation  [9–12].Compared with parametric model, the mesh model saved by STL format only simply records the positions of vertices and the normal vectors of all facets, so that it can be handily translated between different CAD/CAM systems, and its geometric computation is much simpler than that of parametric model due to the linear model representation. As an alternative it is often confronted with the issue of generating tool paths from mesh surfaces and is now becoming the focus of interest. In most previous studies  [13–17], mesh surfaces are usually used to check the gouge and collision in CNC machining, and almost only one topology of iso-planar type is adopted for tool path generation. Recently, several different strategies have been proposed for planning tool paths based on mesh surfaces. For example, Kim and Yang  [18] first proposed the iso-scallop method for mesh surfaces by means of CL surface deformation and mesh slicing technique. Lee et al.  [19] extended the concepts of conventional drive surface and guide plane, and used a series of planes at regular intervals to slice the CL surface to generate iso-scallop tool paths. Sun et al.  [20] and Li et al.  [21] proposed the methods of generating contour-parallel tool paths for mesh surfaces. In their works, the offset paths are planned on the plane, but not directly on the original mesh surface. Latter, Xu et al.  [22] proposed another method of generating closed contour-parallel tool paths on mesh surfaces by means of mesh flattening technique. Geometrically, iso-scallop and contour-parallel tool paths can both be regarded as offsets of a target curve on mesh surfaces. Up to date, two types of offsets on 3D spatial surfaces, namely geodesic offsets and functional offsets, have been proposed for diverse applications  [23]. The former is based on the geodesic metric, which is essentially a non-Euclidean distance metric and needs the construction of Voronoi diagram as a premise. It is mainly used in pattern analysis. The latter is a dominant method applied in NC machining since it takes a classical Euclidean distance metric in computing the path interval. In CNC machining, the functional offsets of a tool path may often intersect in more complicated ways than that in planar domain. By far, the issue of self-intersection of offset paths on mesh surfaces, especially aiming at that of open offset paths with variable path intervals (e.g. iso-scallop tool path and also be called open non-uniform offset paths), has either not been addressed  [18,19] or addressed insufficiently  [20–22,24,25] in the previous works.Offset paths in machining are usually represented by directed line segments linked end to end on the mesh surface, and as a result it will bring the issue that some path segments should intersect theoretically at the self-intersection points, but actually not intersect each other due to the linear expression, so the direct calculation of intersection points and the removal of self-intersection interferences on the mesh surface is highly undesirable. In  [26], Lee calculated the self-intersection points of offset paths by projecting them ontoXYplane alongZaxis, however this method is only suitable for convex surfaces. When projecting the offset paths on non-convex surfaces, the corresponding planar paths onXYplane may possibly produce such self-intersection points which do not exist in offset paths. Similarly, Hatna et al.  [27] and Tam et al.  [23] mapped the offset paths back onto the uv parameter plane via the equation of surface, on which the self-intersection interference is removed. The method works well for parametric surfaces, but it is infeasible for mesh surface because of its dependency on the parameter domain. Some other methods  [28–31] were also proposed specifically for the planar offset path generation of pockets, and their extensions to offset paths on mesh surfaces are still not obvious and have not been reported yet. Moreover, most of these methods are limited to uniform offsets paths of a closed curve. Needless to say, the identification and removal of self-intersection of offset paths on the mesh surface is a complicated issue, and more researches are needed to be done.Based on our previous work  [22], this paper develops a unified mapping-based method of eliminating the self-intersection of all types of offset paths on mesh surfaces, including uniform or non-uniform, open or closed offset paths. Mesh parameterization is introduced to realize the bidirectional mapping between the mesh surface and the plane, which enables that the identification and removal of complex self-intersection interferences are reduced from 3D surface to 2D plane. A principle of orientation rule is adopted and has been extended to deal with the issue of the self-intersection of more complex open or necked offset paths by means of the proposed notion of the local loop. An approach to rounding sharp corners on the generated offset paths is also investigated for improving the kinematic and dynamic performance of the machine tools. The rest of this paper starts with raw offset path generation and the detail of self-intersection elimination are discussed in Section  3. Sharp corner rounding is investigated in Section  4. Section  5 shows the results of simulations and experiments with discussion. Section  6 concludes the paper.The raw offset path planning is initially from a master curve on the interior or the boundaries of the mesh surface. It can be generated by sequentially performing the operations of determining a number of offset points of current path and then linking these points with line segments. The key step in raw offset path generation is the determination of offset points which definitely lie on the small facets. It can be categorized as the issue of finding an intersection point between a predefined auxiliary circle and some facet of the mesh surfaces.For a CC point of the current tool path on the mesh surface, the determination of its corresponding CC point on next adjacent offset path needs first to calculate the path intervalLat current CC point using the following formula(1)L=8hrρ/(ρ+r)wherehis scallop height,ris the cutter radius for ball nose cutters or the effective cutting radius for flat-end cutters, andρis the radius of curvature of the mesh surface in the plane perpendicular to feed direction, with a positive value for a convex surface and a negative value for a concave surface. As shown in Fig. 1(a), a predefined auxiliary circle, such that the plane containing this circle is perpendicular to the feed direction, can be mathematically represented asx2+y2=L2in a local coordinate system (LCS). LCS is constructed by means of Darboux frame with the following expressions(2){C1;nC1×fc‖nC1×fc‖,nC1,fc}wherenC1andfcare the unit normal vector of the mesh surface and the unit feed vector at pointC1respectively. In this case, the auxiliary circle is exactly in thexwywplane.To conveniently calculate the intersection pointOMof the auxiliary circle and a facetΔi,Δiis also transformed into LCS. Thus, in LCS the intersection pointOLis just the intersection of the auxiliary circle and a line of intersection between thexw–ywplane and the plane containing facetΔias shown in Fig. 1(b). In this way, the intersection pointOLcan be calculated analytically and further transformed into pointOMin the model coordinate system (MCS) with the following formula:(3)OM=[R]LMOL+C1,[R]LM=[nC1×fc‖nC1×fc‖,nC1,fc]Twhere[R]LMis rotational matrix, the sub and superscripts denote a transformation from LCS to MCS. Since in above calculation the equation of a plane that containsΔiis used to find the feasible solutions of offset points instead of the real facetΔi, it is not sure that the obtained intersection pointOMlying in this plane must be in the interior or the boundaries of the facetΔi. This candidate pointOMneeds to be further confirmed whether it is the required offset point or not.Assuming three vertices of the facetΔiarev1,v2andv3, together with the obtained intersectionOM, three new triangles, namelyΔv1v2OM,ΔOMv2v3andΔv1OMv3, can be formed and then the value of indicatorδis calculated as(4)δ=Area(Δi)−(Area(Δv1v2OM)+Area(ΔOMv2v3)+Area(Δv1OMv3))whereArea(Δ)is the area of the triangleΔ. If indicatorδ<0, it shows thatOMis an invalid point since it is in the exterior of facetΔi. As shown in Fig. 1(b), if these two intersection points between the auxiliary circle and the intersecting line are both invalid points, another facet has to be selected, and the above procedures are repeatedly performed until the proper offset point is found. Fig. 2shows an example of offset paths generated by the above method. It can be seen that the self-intersection occurs at area ‘A’. Such intersection characterizes the point at which the cutter starts to traverse the areas that have been previously cut. Especially when the shape of master path is very irregular, its offset may intersect in complicated ways. In the region of self-intersection, those offset segments that do not contribute to the final tool path must be eliminated carefully. Therefore, after raw offset path generation, the remaining task is the determination of the self-intersection points, the identification and elimination of the invalid self-intersection loops.To remove the self-intersections of 3D offset paths on the mesh surface, a new approach is proposed by using a mesh mapping technique, which is conventionally used in the parameterization of scattered points for surface modeling  [32]. Once the corresponding relationship is built between the mesh surface and the planar domain, the issue of self-intersection removal encountered in mesh surface machining can be reduced to 2D planar domain. Suppose that each facet is provided with a local orthonormal basis, where(x1,y1),(x2,y2)and (x3,y3) are the coordinates of its three vertices in this basis. The local bases of two facets sharing a common edge are consistently oriented. According to the conformity criterion to the mapf:(x,y)→(u,v), where (u,v) is the corresponding point in the planar domain of the vertexf(x,y)of the facet, in the local frame of the facet the conformal map can be written as(5)∂f∂x+i∂f∂y=0wherefhas been written as complex number. For the purpose of mesh mapping, the above equation generally need not be strictly enforced. The violation of the conformity is minimized in the least squares sense as follows.(6){E(T)=∑Δ∈TE(Δ)E(Δ)=∫Δ|∂f∂x+i∂f∂y|2dA=|∂f∂x+i∂f∂y|2AΔwhereAΔis the area of the facetΔof the mesh surfaceT, and|f|stands for the modulus of the complex numberf. The above objective function can be finally rewritten as(7)C(X)=‖AX−B‖2,A=(Mr1−Mr2Mr2Mr1),B=−(Mp1−Mp2Mp2Mp1)(fp1fp2)where the superscripts 1 and 2 stand respectively for the real and imaginary part, the subscriptsrandprepresent the local coordinates (x,y) of the unknown and known vertices, respectively,Mis the coefficient matrix andX=(fr1T,fr2T)Tis the vector of unknowns. Since Eq. (7) only involves solving a sparse linear system, the implementation of the algorithm is very efficient.Through the solutions to the linear systems, we can formulize the mapping from a facetΔis(vis,vi+1s,vi+2s)to its corresponding facetΔip(vip,vi+1p,vi+2p)on the plane in forms of matrix:(8)fi:(Δis→Δip)=[vip,vi+1p,vi+2p][vis,vi+1s,vi+2s]−1.The collection of allfi:(Δis→Δip)forms a piecewise linear mapping from the mesh surface to the planar meshf:(Δs→Δp). Using the mapping as a guide, the corresponding pointqjpinΔipof a pointqjsinΔiscan be calculated by the following equation.(9)qjp=fi:(Δis→Δip)qjs,and contrarilyqjs=fi−1:(Δip→Δis)qjpwherefi−1is the inverse mapping offi.Fig. 3shows the results that the meshes and offset paths generated in Fig. 2 are mapped onto a preset planar domain by using Eq. (9). Utilizing the mesh mapping technique, it is found that some offset path segments intersect truly each other on the planar meshes. It can effectively solve the issue that some path segments should intersect each other in the physical space but not intersect actually due to the discrete sampling of offset points on the physical surface. Undoubtedly, the proposed method considerably simplifies the complexity of the identification of self-intersection points on the mesh surface.A naive implement of this procedure, which attempts to evaluate the intersection status of each individual offset path segment and any other segments, will becomes very costly (O(n2)) as the numbernof offset segments increases. To achieve a significant improvement in computing efficiency, for mesh surfaces the planar mesh itself is used here as a way of division and conquer instead of traditional region subdivision, and three new data structures are defined to speed up the process of self-intersection point calculation.Structure 1OPoint:Q={q,Δ}, whereqis the offset point andΔis the facet in whichqis located.When calculating the offset point using the method described in Section  2, the facet which contains the offset point is also recorded inQat the same time. StoringΔtogether withqis not only for the computing efficiency of determining self-intersection points, but also for the mapping convenience between the planar domain and the mesh surface. According to this data structure, we can conveniently determine the facet in which the offset point is located, and then the point can be mapped easily onto the planar region or the mesh surface using Eq. (9).Structure 2OFacet:A={Δ,{s}}, whereΔis a facet of the mesh model and{s}is a set of offset segments that traverse the facetΔ.Structure 3OSegment:S={s,{A}}, wheresis an offset segment that connects two adjacent offset points, for example,si=qiqi+1, and{A}is a set of facets that are traversed bys.When a new offset segmentsis obtained, the elementAof structureSassociated with this offset segment and its traversed facets need to be instantly updated. This updating process is performed on the planar mesh, which starts from a facet in which the start point ofsis located, and terminates until a facet that contains the end point ofsis found. After the facets traversed bysare all obtained according to the neighborhood relationship among the facets of the mesh surface, they are added to{A}ofSand the offset segmentsis simultaneously added to the set{s}of each traversed facet. For example, in Fig. 4(b) the search of the facets traversed by the offset segmentsi(qiqi+1)starts from the facetΔj−1that contains the start pointqiofsi, traverses its adjacent facetΔjand finally reaches the facetΔj+1where the end pointqi+1ofsiis located. According to the searching results, offset segmentsiis stored asSi={si,{Aj−1,Aj,Aj+1}}and the offset segmentsiis also simultaneously added to the set{s}ofAj−1,AjandAj+1, respectively.With the above data structure, the operation of intersection judgment can be simplified greatly since the intersection possibly occurs only if two offset segments share the same facet. In other words, if two offset segments do not share any common facets, they must not intersect. It is worth to mention that a facet shared by both two adjacent segments with a common endpoint in the offset path is not viewed as an overlapping facet and counted, as shown in Fig. 4(a). Once all overlapping facetsΔhave been identified, the self-intersection point of offset path can be calculated among the elements of the set{s}stored in the overlapping facetA. As shown in Fig. 4(b), offset segmentssiandsi+1share two common facets,ΔjandΔj+1, in which an intersecting algorithm for two line segments is performed to determine the intersection pointqs.Now, letsbe one of the offset segments, then the process of calculating the possible intersection ofswith other offset segments that have stored inS, are now described as follows:(1)Find the facet set{A}traversed bys.Choose one facet from{A}and determine whether it is not shared by other offset segments or not by searching the set{s}of this facet. If it is not an overlapping facet, jump to Step (4);The possible intersection ofswith other segments stored in the set{s}ofAis calculated;If all facets in{A}are processed, the algorithm terminates; otherwise, jump to Step (2).Compared with the number of offset segments, the actual number of intersections is much smaller, so in most cases the set of the overlapping facets in which the offset segments possibly intersect is empty. The main expense of this algorithm is not the time required for calculating the intersections, but searching the overlapping facets. Since this search process has been efficiently refined by the presented data structures, the cost of finding intersections can be reduced more drastically than the naive method. Moreover, by means of the topology relations of the meshes built when reading the mesh model from a STL file, the performance of this algorithm is further improved.In offset path generation, a loop is regarded as a valid loop only if it has the same orientation with the master path when using a traditional orientation rule, and consequently a prerequisite of keeping the correctness of this rule is that the master path and its offset must both be closed, as shown in Fig. 5(a). However, for the sake of large path interval, good kinematic performance or convenience, the master path is possibly selected as an open curve without a definite orientation as shown in Fig. 5(b). Moreover, when handling the case of closed necked curve as shown in Fig. 5(c), the interference loop should be deleted at the necked region has also the same orientation as the master path. In these cases, if the traditional orientation rule is still used, it will lead to wrong offset results.To enable the orientation rule to handle the self-intersection of all types of offset paths, especially open or necked offset paths, a notion of local loop is introduced, which is based on such fact that a self-intersection loop consists of part of the offset segments of a master path rather than the whole offsets of the master path. It provides us a clue that a local loop, whose offset is just the self-intersection loop, can be constructed in the master path. To make the process of self-intersection elimination based local loop easier to understand, we first give some preliminary definitions which are used in the following.Definition 1Corresponding point of an intersection point (CP). It is a point on the master path, whose offset point is just the self-intersection point of offset path segments of the master path.In Fig. 6(a), the two pointsq1andq2on the master path have the same offset point, namely the self-intersection pointqs,1of the offset path, thus they both can be taken as the corresponding points of intersectionqs,1. In the implementation of our algorithm, once an intersection point of two offset segments is found, the procedure of local loop construction is activated. CPs can be obtained by calculating the closest points of the intersection point on the master segments of these two offset segments. When labeling two CPs of an intersection point, according to the order that they appear on the master path, the first CP, e.g.q1in Fig. 6(a), is abbreviated as FCP, the other CP is abbreviated as LCP, e.g.q2in Fig. 6(a).Definition 2Virtual edge (VE). It is a line segment that connects the intersection point and its CP, which is mainly used in the construction of local loop and virtual master path (Definition 4).In Fig. 6 all the light blue line segments with an arrow are VEs, and the arrow indicates the direction of VE. When constructing a local loop and a virtual master path, the direction of VE is different. In local loop construction, LCP of an intersection is first connected to the intersection point and the corresponding virtual edge is abbreviated as LI_VE, e.g.q2qs,1in Fig. 6(a). Then, the intersection point is connected to its FCP and this virtual edge is abbreviated as IF_VE, e.g.qs,1q1in Fig. 6(a). However, when LI_VE and IF_VE are used in constructing a virtual master path, as shown in Fig. 6(b), their direction are reversed and in this case they are denoted as IL_VE and FI_VE, respectively, For example, IL_VE and FI_VE in Fig. 6(b) areqs,1q2andq1qs,1, respectively.Definition 3Local loop (LLOOP). It is a closed loop consisting of the part of the master path (or virtual master path) between FCP and LCP and two virtual edges, LI_VE and IF_VE.The process of constructing LLOOP at self-intersection point is described as follows:(1)Find FCP and LCP in the master path using the presented method below Definition 1;Construct two virtual edges, LI_VE and IF_VE, using the method given below Definition 2;Successively link virtual edge IF_VE, the part of master path between FCP and LCP, and virtual edge LI_VE;Form a closed LLOOP.For example, in Fig. 6(a),qs,1is an intersection point of the offset path,q1andq2are FCP and LCP of pointqs,1, respectively. After linkingqs,1q1(IF_VE),s2(the part of the master path between FCP and LCP), andq2qs,1(LI_VE), the light blue LLOOP (qs,1→q1→s2→q2→qs,1) is obtained. We can see that the offset of the LLOOP except forq2qs,1andqs,1q1is just the self-intersection loop of the offset path which is marked as blue color. In this case, the validity of the self-intersection loop can be easily identified using the orientation rule based local loop (Criterion 1).Criterion 1Orientation rule based local loop. If a self-intersection loop has the same orientation as its local loop, it is a valid loop and should be remained; otherwise it is an invalid loop and should be eliminated from the offset path.As shown in Fig. 6(a), though the orientation of the master path is ambiguous, the orientation of the constructed local loop is definite and counterclockwise (CCW), and the orientation of the self-intersection loop is clockwise (CW). According to Criterion 1, the self-intersection loop is an invalid loop and needs to be eliminated from the offset path, as shown in Fig. 6(b). In the following, it will be also seen that this rule is equally applicable to the offset of the necked path shown in Fig. 7without additional processing.Definition 4Virtual master path (VMP). After the validity of the self-intersection loop is identified, its local loop will be deleted from the master path. The gap, which is caused by deleting the part of the master path between FCP and LCP, will be filled by the virtual edges, FI_VE and IL_VE. The updated master path including FI_VE and IL_VE is called VMP.The process of constructing VMP is described as follows:(1)Delete the local loop from the master path;Reverse the VEs in the local loop to fill the gap caused by deleting the part of the master path between FCP and LCP;Form a VMP.For example, in Fig. 6(b), a gap appears in the master path after deleting the LLOOP(qs,1→q1→s2→q2→qs,1)in Fig. 6(a). To keep the master path continuous, the gap is filled byq1qs,1(FI_VE) andqs,1q2(IL_VE), which are the reversed VEs ofq2qs,1andqs,1q1in the LLOOP (qs,1→q1→s2→q2→qs,1). Then the updated VMP is obtained as (s1→q1→qs,1→q2→s3→s4→s5→s6→s7→s8). The remaining part in the VMP which has not performed the offset operations is continuously offset. Of course, the new added VEs need not to be offset and are only used to connect the split master path.Based on above preliminary notions and algorithms, the procedure of calculating offset segments and eliminating the self-intersections of the offset path is described as follows:(1)Calculate the offset segmentsusing the method in Section  2;Calculate the possible intersection pointqsofswith other already obtained offset segments using the algorithm proposed in Section  3.2. If intersection point does not exist, jump to Step (1);Create the LLOOP atqsby calling the procedure of constructing LLOOP;Determine the validity of the self-intersection loop by Criterion 1. If the self-intersection loop is invalid, it will be discarded; otherwise the self-intersection loop is pushed into a stackSstackwhich is specially used for the store of those valid offset path;Create the VMP by calling the procedure of constructing VMP and update the master path using VMP;Continue to offset the updated master path and jump to Step (1);When dealing with the global self-intersection loop shown in Fig. 6(e), the proposed method does not need additional operations. After the red valid self-intersection loops in Fig. 6(c) and (d) are identified and pushed into the stackSstack, the VMP becomes (s1→q1→qs,1→q2→s3→s4→s5→s6→q3→qs,2→q4→s8). Offsetting segments8forms the blue global self-intersection loop shown in Fig. 6(e). We only need to call the procedure of LLOOP to construct the LLOOP at the intersection pointqs,3, (qs,3→q6→s6→q3→qs,2→q4→s8→q5→qs,3), and then utilize Criterion 1 to identify the validity of this global self-intersection loop. Likewise, the proposed method is equally applicable to the offset of the necked path shown in Fig. 7 without additional processing and the specific process is not repeated here.After eliminating the interference loops, the planar offset paths without self-intersection can be inversely mapped into the physical space to obtain the offset tool paths on the mesh surface. Given a facetΔjpof the planar meshes, which contains offset pointqipand is recorded inQi(see Structure 1), its corresponding facetΔjson the mesh surface can be easily established. Then the corresponding pointqisofqipon the mesh surface can be obtained using the following equation.(10)qjs=fi−1:(Δip→Δis)qjpwherefi−1is the inverse mapping offi.Fig. 8shows an example of offset paths that self-intersections have been removed from the mesh surface. Sometimes, due to the variable path interval and curvature of the mesh surface, the offset of the master path, even a single curve, is not sure it must be a single curve. It is certainly possible that the offset path is divided into multiple paths, as shown in Figs. 6 and 7. In this case, the stackSstackis used to store these valid offset paths, as mentioned in the algorithm of calculating offset segments and eliminating the self-intersections in Section  3.3. Then, the offset path on the top of the stack is popped as the master path of next offset operation. The above process is repeated until the stackSstackis empty.As seen in Fig. 8, the self-intersection elimination may result in sharp corner near the region where the interference loop is eliminated. No matter from the view of preventing the occurrence of uncut phenomenon or acquiring a good kinematic performance of machine tool, it is preferred that the sharp turns of tool paths should be made as smooth as possible. Assume that the sharp corner has been recorded in the generated offset path after eliminating the self-intersection loops. At the corner, as shown in Fig. 9, if the path intervalLsatisfies the following condition:(11)L>r(1+sin(θ2)).It indicates that the region, where the interference loops are eliminated, has uncut materials left after machining along the generated offset path. In this case, the additional tool path segment has to be added into two adjacent offset tool paths at the region near the corner so that the uncut materials can be sufficiently cut. In order to detect the uncut region conveniently, Eq. (11) can be rewritten as(12)θ<2arcsin(L−rr)whereθis the angle between two adjacent offset segments at the corner.On the other hand, when the cutter passes through such a corner, it has to slow down, change its moving direction and accelerate again as it leaves the corner. Otherwise, it will certainly cause a weak performance of kinematics and dynamics of the machine tool in real machining. Excess vibrations and impactions in machining are not only harmful for the machine tool and also deteriorate the machining quality. For maintaining a steady-state cutting process, it is necessary to round the corner to further improve the kinematic and geometric performance of the tool path. To round the sharp corner, a transition circular arc can be added inside or outside the corner region.According to Eq. (11), if there is not uncut material left at the corner region and the cusp height also can be limited within a preset value, an interior arc, which is helpful for improving the kinematics performance of machine tools, can be set to round the corner. Letrc,Ibe the radii of the interior arc, whererc,Iis generally set larger than a preset value specified by the user. As shown in Fig. 10(a), the centerpc,Iof the interior arc can be calculated as.(13)pc,I=p+eb,I−ea,I‖eb,I−ea,I‖rc,Isin(θ/2)wherepis the corner,ea,Iandeb,Iare the unit direction vectors of two offset segments forming the corner, respectively. The start and end points of this interior circular arc are calculated as(14){ps,I=p−ea,Irc,Itan(θ/2)pe,I=p+eb,Irctan(θ/2).Along such arc path, the cutter can pass through the corner more steadily and quickly.However, when the corner is very sharp, interior arc may result in an excessive distanceε(as shown in Fig. 10(a)) from the corner so that uncut material will be left or the cusp height is out of control. Moreover, the sharp corner itself causes possibly the occurrence of uncut phenomenon. In this case, external circular arc is preferred to be added into offset tool paths at the region near the corner. The radius of external arcrc,Ecan be specified by the user only if it is not more than the path intervalL. Generally,rc,Emay be set as(0.7–0.9)L. As shown in Fig. 10(b), the centerpc,Eof the external arc is calculated using the following equation.(15)pc,E=p+ea,E−eb,E‖ea,E−eb,E‖rc,Esin(θ/2)wherepis the corner,ea,Eandeb,Eare the unit direction vectors of two offset segments forming the corner, respectively. The start and end points of this arc are calculated as(16){ps,E=p+ea,Erc,Etan(θ/2)pt=p+eb,Erc,Etan(θ/2).Hence, the transition arc can be represented by a form (pc,ps,pe,), and then through sampling some discrete points from the transition arc, the transition path segments in the physical space can be finally obtained by inversely mapping these sampling points onto the mesh surface using Eq. (10).

@&#CONCLUSIONS@&#
In many applications of CNC machining, it is often confronted with the challenging task of planning offset paths from mesh surfaces. However, the offset path generation methods are very limited for mesh surface machining, and the elimination of the self-intersection of offset paths have not been well solved yet. In this paper, we propose a new mapping based approach to eliminate the self-intersection of offset paths for CNC mesh surface machining. The method first builds the relations between the mesh surface and a predefined plane using a mesh mapping technique with free boundary. It not only reduces the self-intersection of spatial paths to planar self-intersection, but also is suitable for non-convex surface. No matter from the aspect of generality or flexibility, the proposed mapping method is more superior to the conventional projection method. Another point worth mentioning is that a new orientation rule based local loop is defined so that the uniform or non-uniform offsets of open and closed master paths can both be effectively handled. In addition, aiming at the corner rounding of spatial paths, a rounding method based on transition arc is also given for preventing uncut or at the same time improving the kinematic and geometric performance of offset paths.Our experimental results have shown that the proposed offset path planning method is efficiently, numerically stable, and universal. Therefore, the proposed method is a generalized method and can be used for planning all types of uniform or non-uniform offset path on mesh surfaces, especially complex sculptured surfaces. Future works will be focused on the path linking algorithm and process planning based on offset paths. Another future task is to extend the proposed method to the CNC machining based on point cloud. This can be possibly solved by resorting to the support of the well-known tessellating algorithms or meshless mapping techniques of scattered points.