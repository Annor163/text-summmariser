@&#MAIN-TITLE@&#
Hybrid large neighborhood search for the bus rapid transit route design problem

@&#HIGHLIGHTS@&#
We present a new model formulation for the bus rapid transit route design problem.We propose a hybrid metaheuristic based for the problem at hand.The proposed algorithm is able to obtain high quality in short run times.

@&#KEYPHRASES@&#
Large neighborhood search,Hybrid Metaheuristic,Bus rapid transit route design,Public transportation,Decomposition approach,

@&#ABSTRACT@&#
Due to an increasing demand for public transportation and intra-urban mobility, an efficient organization of public transportation has gained significant importance in the last decades. In this paper we present a model formulation for the bus rapid transit route design problem, given a fixed number of routes to be offered. The problem can be tackled using a decomposition strategy, where route design and the determination of frequencies and passenger flows will be dealt with separately. We propose a hybrid metaheuristic based on a combination of Large Neighborhood Search (LNS) and Linear Programming (LP). The algorithm as such is iterative. Decision upon the design of routes will be handled using LNS. The resulting passenger flows and frequencies will be determined by solving a LP. The solution obtained may then be used to guide the exploration of new route designs in the following iterations within LNS. Several problem specific operators are suggested and have been tested. The proposed algorithm compares extremely favorable and is able to obtain high quality solutions within short computational times.

@&#INTRODUCTION@&#
Due to an increasing demand for public transportation and intra-urban mobility, an efficient organization of public transportation has gained significant importance in the last decades. Cities have continued to grow and hence require more transport capacity and improved access to those. In this paper we will focus on a specific type of public transportation system: the design of routes and their frequencies for bus rapid transit (BRT) systems.BRT systems enjoy great popularity. Currently more than 168 cities world-wide employ BRT systems, covering a network of 4424km and providing service to approximately 31 million passengers on a daily basis. BRT systems are especially popular in Latin America, where BRT systems are currently in use in 56 cities. One of the largest among those is operated in Bogotá (Colombia), covering a network of 106km and offering1.98million passenger trips per day (see WWW, 2013).BRT systems deliver fast and cost-effective public transportation through busses. The route design problem for BRT systems involves the design of routes given the current infrastructure, as well as the determination of their frequencies they will be operated. The network under consideration consists of a single corridor and stations, which are located within the corridor in a predefined way. Busses may be operated on designated lanes, allowing them right-of-way with respect to regular traffic. For the problem under consideration the network of the BRT system is given. A typical network consists of corridors (composed of several individual lanes), as well as the sequence and the location of stations along them. The travel time of busses is assumed to be given. Additional time will be taken into account for ac- and deceleration of busses after or before stopping at a station. Similarly we assume waiting times at stations to be fixed and given.The demand for the public transport system can be represented in terms of an origin–destination matrix, which provides us with an estimate of the number of passengers requiring transportation between any pair of stations within the time horizon under consideration. This matrix is assumed to be known beforehand and is assumed not depend on the set of routes offered. Depending on the variation of demand throughout the day, the demand during peak hours should be taken into account preferably. The actual demand will depend on the offered set of routes and their frequencies, as passengers may react upon the offer. For the purpose of this paper we assume the demand to be constant and independent of the set of routes offered. The reaction can be seen as a dynamic process (see Guihaire & Hao, 2008), which is beyond the scope of this paper.We consider a homogeneous and limited fleet of busses. Passengers may enter, leave or transfer among routes, at any station a route stops. As passengers tend to become confused if the number of offered routes is too large, the total number of routes offered will be limited from above. Besides, due to managerial efficiency it is desirable to operate the system with a limited number of routes (see Walteros, Medaglia, & Riaño, (forthcoming)).We refer to Levinson, Zimmerman, Clinger, and Rutherford (2002) and Walteros, Medaglia, and Riaño (forthcoming) for a more detailed overview on BRT systems.The problem at hand can be defined as follows: given a connected network we try to design a set of routes and determine their frequencies, such that the total travel time by passengers can be minimized, while taking into account capacity restrictions. Frequencies determine how often a route will be served within the planning horizon, which might be in regular intervals (cyclic timetable) or in an aperiodic way. Routes do not necessarily need to stop at all stations among a specific corridor, but may skip stations along their way.We assume passengers decide upon their route using a common objective function, such as the total travel time of all passengers spent in the system. This is a common objective function chosen in the literature in the sense of a system optimum (Borndörfer, Grötschel, & Pfetsch, 2008).For a route to be feasible it needs to stop at least at two stations. Furthermore we assume that the provided routes are symmetric, i.e. will be operated in both directions. This should make the system easier to be used from a customers’ point of view. The underlying model and the proposed solution approach can be extended easily to cope with asymmetric route designs as well (see Walteros et al., forthcoming).A graphical representation of a simple instance is shown below. Fig. 1shows a simple network consisting of one corridor and four stations, labeled 1 to 4, as well as a selection of 5 feasible routes. Routes may operate on the given corridor and may only stop at stations in the designated order.For a single corridor the number of routes grows exponentially and can be calculated as2S-S-1, given the number of stations S. For systems with several corridors the number of different routes can be calculated in a similar way, but in addition the structure of the network, i.e. the number of segments and stations several corridors might share, also needs to be taken into account. It is important to mention that for any realistically sized instance the total number of routes is too large to be explored or enumerated, let alone to be offered. The large number of routes makes it practically impossible to solve instances of realistic size. Hence we propose an efficient hybrid metaheuristic to solve the problem at hand.The contribution of this paper is threefold. In this paper we are going to introduce a new mixed integer problem formulation for the problem at hand. In order to solve the problem we decompose the problem into two interrelated subproblem, the design of routes and determining the frequencies together with the resulting passenger flows. We then propose an iterative hybrid metaheuristic. A metaheuristic component is focused on designing promising routes, which then can be (optimally) evaluated by determining their frequencies as well as the flow of passengers while ensuring feasibility. They key contribution in terms of the proposed algorithm is the notation of feedback, which will guide and bias the decisions of the metaheuristic in the route design phase. Feedback will be provided in terms of estimates upon the consequences on the (global) objective function, based on the solution obtained in the previous iteration.The paper is structured as follows. We discuss literature on related problems and similar solution approaches in Section 2. We then introduce the mathematical model in Section 3. Our hybrid solution approach, as well as its core components, will then be sketched in Section 4. Results obtained on benchmark instances available in the literature will be presented in Section 5.Mathematical optimization has gained considerable attention for optimizing line planning problems in public transportation. We refer to Odoni, Rousseau, and Wilson (1994) and Bussieck, Kreuzer, and Zimmermann (1997) for an overview. Planning of public transportation services includes several steps that are usually performed in a sequential manner (see Ceder & Wilson, 1986; Liebchen & Möhring, 2007). The problems as such however are highly interrelated. Interactions made possible by handling several problems at the same time will be beneficial to the final results (see Guihaire & Hao, 2008). First, decisions based on the physical layout of the transportation system need to made. We refer to Laporte, Mesa, and Ortega (2000) on optimization methods for the planning of rapid transit systems. Bruno, Gendreau, and Laporte (2002) propose a heuristic for locating a rapid transit line, by optimizing the total population covered by the alignment. Laporte, Mesa, and Ortega (2002) deal with deciding on where to locate individual stations given the alignment. Based on information related to its infrastructure, public transport lines and frequencies can be determined within the scope of strategic planning, taking into account expected demand. Within the tactical planning phase, in the subsequent timetabling step, a set of public transport lines and frequencies is instantiated with actual departure times, usually minimizing transfer times. During the an operational planning phase (vehicle scheduling), vehicles are then assigned to individual trips in order to cost-efficiently realize public transport operations (vehicle scheduling, operational planning, see Bunte & Kliewer (2009)). The planning process is concluded with the determination of crew schedules for a given set of vehicle schedules. A general overview on optimization for planning of public transport operations is provided in Desaulniers and Hickman (2007). In this paper we will focus on a fundamental strategic planning problem for public transport, i.e. determining routes and their frequencies for BRT systems. According to the classification provided in Guihaire and Hao (2008) the problem can be seen as Transit Network Design and Frequency Problem (TNDFP), planning both the transit network design (i.e. the set of routes offered), as well determining the frequencies, simultaneously.We focus on the network planning and not the actual operation. Hence given the strategic nature and the planning horizon of the problem we focus on a frequency-based approach, as opposed to a schedule-based approach. Actual schedules or time tables will not be considered at this planning stage. Rather we focus on determining service frequencies. However, frequency-based approaches only allow taking into account average number of passengers on board of a vehicle (Nuzzolo, Russo, & Crisalli, 2001). We accept this and believe it can be overcome by considering an appropriate time horizon (during peak hours) and the respective demand, i.e. designing a set of routes for those and later adjust frequencies (but not necessarily routes, in order not to confuse the passengers) for off-peak hours. Additionally, as opposed to schedule-based approaches, larger networks can be considered (Miandoabchi, Farahani, & Szeto, 2012).Early models for line planning typically use so called two-phase approaches to solve the problem at hand. During a first phase a set of routes is built. Afterwards a subset of them is chosen and their frequencies are determined. Silman, Barzily, and Passy (1974) propose to use a skeleton model, which starts with choosing endpoints of a route. Its main idea is assembling routes from short pieces. Afterwards intermediate stops are added, which are then connected using shortest paths. Their approach further has been extended in Dubois, Bel, and Llibre (1979). Claessens, van Dijk, and Zwaneveld (1998) and Bussieck et al. (1997) propose an exact approach for solving the underlying MIP using an approach based on branch-and-cut. For practical reasons, frequencies should be chosen when designing the set of routes. Failure to do so may result in unnecessary waiting time and inefficient usage of available resources (see Schmidt, 2011). More recently several approaches have been proposed that generate routes dynamically within the optimization process. Schöbel and Scholl (2006) propose a MIP formulation and present decomposition approach to solve its linear relaxation. Borndörfer, Grötschel, and Pfetsch (2007) propose an approach based on column generation. In Feillet, Gendreau, Medaglia, and Walteros (2010) the problem is tackled using branch-and-cut-and-price. An efficient hybrid genetic algorithm is presented in Walteros et al. (forthcoming) for both single and multi-corridor instances. The main idea of their approach is to decouple decision concerning the selection of routes and their performance evaluation. Routes will be designed using a genetic algorithm. Chosen routes will then be evaluated by solving a linear optimization problem.Line planning models can further be differentiated according to their assumptions concerning passenger behavior and routing. In early models proposed by Goossens, van Hoesel, and Kroon (2004) and Borndörfer and Karbstein (2012), passengers are preassigned to paths according to a so called system split. The assignment however fixes their path through the network and will be done before the actual routes have been designed. Thereby the demand on each segment in the network will be determined. This approach facilitates the handling of multi-mode transportation networks. Once the assignment has been made to paths, the problem can be solved independently for each mode. However this assumption might not be realistic, leaves for less degree of freedom and might result in a less efficient usage of resources. Subsequently models taking into account passengers that can be freely routed have been proposed. In Borndörfer et al. (2008) two models for line planning are proposed, which design lines and frequencies simultaneously. The authors investigate their LP relaxation, which is shown to be NP-hard, and solve the LP using column generation. Their approach has further been extended in Borndörfer et al. (2007). In those models however transfers between lines are ignored. A novel direct connection approach has been proposed in Borndörfer and Karbstein (2012), where transfers can also be handled. This approach also advances the work of Bussieck et al. (1997), overcoming the drawback of the system split assumption. In this paper passengers are allowed to determine their paths based on the routes offered. Their paths are not assumed to be fixed, as we do not consider system split.An alternative approach to route passengers freely has been chosen in Schöbel and Scholl (2006). In their work the flow of passengers is modeled on a so called change-and-go-graph (GNG), which allows for transfers and tries to minimize total travel times. In their approach the resulting MIP is solved using Dantzig-Wolfe decomposition for the LP relaxation. An overview on models and methods for line planning in public transportation is given in Schöbel (2012). This paper can also be seen as an extension of their approach based on a GNG as indicated in the following sections.Several different problem settings for line planning problems exist, which can also be classified based on the underlying network topology. Most papers focus on the classical line planning problem, where given a network of nodes and edges, routes and frequencies need to be defined. The BRT is slightly different, as routes may only operate along specific (given) corridors. Not all stations along a corridor need to be served by a route along that particular corridor, but may be omitted. The resulting model formulation is more complex, but allows for more efficient passenger transportation. Torres, Torres, Borndörfer, and Pfetsch (2011) discuss an optimization model taking into account the aforementioned topology. Passenger flows however are not optimized explicitly, but assumed to be given. An exact approach based on branch and cut and price for solving the BRT without system split has been proposed in Feillet et al. (2010). Using this approach 17 instances with up to 19 stations on a single corridor could be solved to optimality.Two different streams of optimization methods have been developed to solve combinatorial optimization problems: Integer programming and metaheuristics. Integer programming, based on the concepts of linear programming, is an exact approach, which guarantees to find an optimal solution and proving its optimality. Only small or moderately sized instances can be solved to optimality and the required computational times might be long. For larger instances optimality may no longer be guaranteed. Instead metaheuristics can be used to find good quality solution within a reasonable amount of run time.Our intention is to combine the strengths of those approaches and to overcome their weaknesses by a hybrid metaheuristic, or matheuristic. According to the classification provided in Puchinger and Raidl (2005) the proposed technique can be seen as a collaborative combination between an exact and a metaheuristic algorithm, that exchange information. The concept of decomposition and use of hybrid metaheuristics is not new. Other successful applications can be found in Parragh and Schmid (2013) and Schmid and Doerner (2014).In this paper we are going to present a new model formulation, extending the formulations introduced in Feillet et al. (2010) and Gonzalez, Lozano, Walteros, Feillet, and Medaglia (2012). Rather then solving the problem based on a (sub) set of given routes, the model will also allow designing a given number of routes. This work can also be seen as an enhancement of Torres et al. (2011), as we allow passengers to be freely routed. The proposed formulation is based on a modified version of the change-and-go graph used in Scholl (2005) and Schöbel and Scholl (2006). The proposed hybrid solution approach is an extension of the hybrid genetic algorithm proposed in Walteros et al. (forthcoming). The problem will be decomposed in a similar manner; however we will consider information on the solution obtained after evaluating it within the subsequent route design phase. The provided feedback will allow guiding the route design phase into promising directions and reinforce good design choices.We extend the problem formulation introduced in Feillet et al. (2010) and Gonzalez et al. (2012). Rather than relying on a given (sub) set of routes the model designs a given number of routes, by determining where they are supposed to stop. Simultaneously their frequencies are chosen and passenger flows are determined. To formulate the optimization problem mathematically we introduce the following notation: We consider a network consisting of a set of stationsS={1,…,S}along a single corridor. The set of routes to be designed is denoted byR={1,…,R}, where R denotes the maximum number of routes to be considered.The problem can be modeled using an directed graphG=(V,A), whereVdenotes the set of vertices andAthe set of arcs. These sets are generated as follows: for every stations∈Swe define a (station) vertexvs∈V¯. Stations vertices serve as the entry and exit point for passenger flows, i.e. entering passengers upon starting their trip at their origin and leaving passengers upon arrival of their destination. Additionally we define a (route) vertexvifor every combination(r,s), taking into account that router∈Rmay stop at stations∈S. Route vertices will be used to model the flow of passengers through a station using a particular router∈R. The station associated with route vertexviis denoted bys(vi)and we user(vi)to refer to the corresponding route. We use setVr(Vs) to denote the set of route (station) vertices associated with route r (station s). HenceV={V¯∪(⋃r∈RVr)}={V¯∪(⋃s∈SVs)}. The set of arcsAconsists of two different types of arcs: station and route arcs. The former set will be used to model the flow of entering and leaving passengers (through station vertexvs∈V¯) and transferring passengers between routes within station s. Therefore a set of station arcsAs={(vi,vj)|vi,vj∈Vs∪vs,i≠j}is defined for every stations∈S, connecting all route vertices and the associated station vertexvspairwise. The latter set of arcs is introduced for modeling the flow of passengers between stations, i.e. on board of a bus. Hence we define a set of route arcsAr={(vi,vj)|vi,vj∈Vr,i≠j}for every router∈R, connecting any two different route vertices pairwise, if the associated stations could be used as two subsequent stops along the same route. ConsequentlyA={⋃r∈R(Ar)∪⋃s∈S(As)}.A graphical representation of the underlying extended GNG graph for the example presented in Fig. 1 using a maximum number ofR=3routes, is shown in Fig. 2. The corresponding four station nodes are highlighted in bold and indexed by 1–4, i.e.V¯={1,…,4}. The remaining route nodes are indexed by 5–16. Route and station nodes associated with the same station are grouped together. Route nodes (i>4) are indexed such thatr(vi)=⌊i-14⌋; the station of a route node i is defined ass(vi)=imod4. Station arcs are illustrated using dotted lines. Route arcs connect route nodes corresponding to the same route, where the associated stations could be served consecutively along the respective route. For illustrative purposes all nodes and arcs corresponding to the first route are shown in black, those for the remaining routes in gray. More precisely the set of route nodes forr=1is defined asVr={5,6,7,8}. The set of route arcs (ignoring reverse arcs) for the first route is defined asAr={(5,6),(5,7),(5,8),(6,7),(6,8),(7,8)}. The set of route nodes for stations=1is defined asVs={5,9,13}.To model the time required for boarding, deboarding and transferring between routes at stations∈Swe use the notion of transfer time, which is denoted bycsand is assumed to be identical for all station arcs(vi,vj)∈Aswithin stations∈S. We usecijto denote the direct ride time (including time for acc- and decelerating the vehicle) along all arcs(vi,vj)∈⋃r∈RArbetween stations(vi)ands(vj)along router∈Rwithout any intermediate stops. We assume travel times to be symmetric and that the triangular inequality holds. The number of passengers demanding transportation from station o to d (whereo,d∈S) is denoted bybod. Demand is not required to be symmetric. For modeling purposes we define thebiodfor every vertexvi∈V, wherebood=bod,bdod=-bodandbiod=0, otherwise. The fleet of vehicles available consists of m homogeneous busses that may transport up to u passengers at a time.The objective is to minimize the total travel time required, using a limited set of at most R routes. The available number of busses, as well as their capacity needs to be respected. We use decision variablesxijodto model the number of passengers on arc(vi,vj)∈Aon their way from station o and d (whereo,d∈S). The number of busses allocated to router∈Rwill be modeled in terms offr. Binary decision variablesyrswill evaluate to 1 if and only if router∈Rstops at stations∈S. We use binary decision variablesnrst, which will be equal to 1 if a stop at station t will be an adjacent stop of station s (r,s∈S) along router∈R. M denotes a big number. The problem hence can be modeled as follows:(3.1)Z=∑r∈R∑(vi,vj)∈Ar∑o,d∈Scijxijod+∑s∈S∑(vi,vj)∈As∑o,d∈Scsxijod→min(3.2)∑vj:(vi,vj)∈Axijod-∑vj:(vj,vi)∈Axjiod=biod∀i∈V,o,d∈S(3.3)∑o,d∈Sxijod⩽u·fr∀r∈R,(vi,vj)∈Ar(3.4)∑r∈Rfr⩽m(3.5)∑vj:(vi,vj)∈A∑o,d∈Sxijod⩽M·yr,s(vi)∀r∈R,vi∈Vr(3.6)∑o,d∈Sxijod⩽M·nr,s(vi),s(vj)∀r∈R,(vi,vj)∈Ar(3.7)2·yrs⩾∑t∈Snrts∀r∈R,s∈S(3.8)xijod⩾0∀(vi,vj)∈A,o,d∈S(3.9)fr⩾0∀r∈R(3.10)yrs∈{0,1}∀r∈R,s∈S(3.11)nrst∈{0,1}∀r∈R,s,t∈S.The objective function (3.1) minimizes the total travel time, i.e. ride and transfer time, spent by all passengers in the system. Transportation of all passengers is guaranteed by flow balancing constraints (3.2). Constraints (3.3) ensure the number of passengers using a particular link does not exceed the capacity of the assigned busses. The total number of busses in use is limited by Constraint (3.4). Constraints (3.5) ensure that flows through route vertexvimay only exist, if the corresponding router=r(vi)stops at stations=s(vi). Similarly (see Constraints (3.6)) flows on route arcs(vi,vj)may only exist, if the corresponding stationss(vi)ands(vj)are successive stops on router=r(vi)=r(vj). Constraints (3.7) guarantee that any stop may have at most two adjacent stop along any route r. Finally Constraints (3.8)–(3.10) and (3.11) impose bounds on all decision variables in use.The number of required binary decision variables grows substantially, depending on the number of stations S and routes R to be considered. The size of the problem depends on the type of network. For networks consisting of a single corridor, in the GNG graph the number of nodes and arcs is polynomial with respect to the number of stations and routes given. The number of nodes is equal toS(R+1), the number of arcs is equal toR2S+2RS-R. Within the MIP as stated before, the number of binary decision variables is equal toRS(1+S), besidesRS3(R+1)-RS2(R+3)+R(S+1)continuous decision variables are required. The number of constraints is equal toRS(S2-S+4)+S2(S-1)-2R+1.Please note that given a fixed set of routes the size and complexity of the underlying problem reduces substantially. The proposed model can then be used to evaluate a given set of routes, i.e. determine their frequencies and the actual passenger flows. The resulting formulation reduces to a network flow problem with additional capacity-related side constraints. The corresponding GNG graph reduces dramatically, as most of the nodes and arcs can be pruned once fixing the set of routes to be evaluated. Given its structure the formulation then reduces to a linear multi-commodity network flow formulation which can be solved efficiently by commercial solvers. The resulting graph for the instance shown in Fig. 1 taking into account the first three routes is shown in Fig. 3.The number of decision variables and constraints depends on the actual route design provided. Assuming thatR′routes will be in use and in totalS′stops are included within the set of routes (whereS′≪RS), the number of nodes in the GNG graph will reduce toS+S′. The required number of arcs reduces as well. The actual number of station arcs required depends on the provided route design or, more specifically, the number of routes that stop in any given station. The number of route arcs will reduce to2(S′-R′). The model then reduces to a linear problem withS′S(S-1)+2(S′-R′)constraints andS(S-1)continuous decision variables per arc in the GNG graph.The main idea of our hybrid solution approach can be described as follows: We propose a hybrid metaheuristic based on Large Neighborhood Search (LNS) and linear programming (LP) for the problem at hand. The solution approach will decompose the problem into a route design and evaluation phase. Decisions upon the actual design of routes will be handled using LNS. Next the set of feasible routesΩobtained in this stage will be evaluated. The resulting (optimal) passenger flows and frequencies are determined by solving a LP. Solution characteristicsFobtained at this stage will be passed to the route design component, where we try to bias the route design process in a favorable way. The provided feedback will allow guiding the route design phase into promising directions and reinforce good design choices. Please note thatFis available only starting from the second iteration. A graphical representation of the iterative framework is shown in Fig. 4.LNS is a well-established metaheuristic, which has been introduced by Schrimpf, Schneider, Stamm-Wilbrandt, and Dueck (2000). Their ideas were extended by Ropke and Pisinger (2006) who apply this method to a pickup and delivery problem using different destroy and repair operators and successfully solved the problem at hand. In this section we will propose several destroy and repair operators to be used within our proposed framework. In every iteration, given a set of routes, we try to redesign it. Therefore the set of routes will be partially destroyed and repaired again. This will be done by removing and adding elements (i.e. stops) from the current set of routes. The way these operations are performed is problem-specific. Different ways to remove and insert elements exist. We will describe in more detail the main operators proposed to be used within LNS for the problem at hand, how the obtained feedbackFis used to bias the decisions involved as well as further problem specific considerations that have been taken into account.A general algorithmic outline of the proposed procedure is shown in Algorithm 1. The required components and ideas will be elaborated in more detail in the subsequent subsections. After having generated an initial set of routesΩ, they will be evaluated by solving the problem introduced in Section 3, given the set of routes. We will then start to modify the set of routes using informationFobtained from the current solution by first destroying and recreating the set of routes iteratively. Its operators will be biased byF, thereby favoring the exploration of promising route designs. A lower bound on the objective function value given a set of routes can be determined. Only favorable routes will be evaluated using the proposed LP. We work with a pool of best solutions found so far. Solutions are compared in terms of their objective function value. In case a solution is better than the current best solution found so far, the pool will reinitialized with that solution. In case a (new) best solution has been found (i.e. containing different routes, but ties with the current best solution(s) in terms of its objective function value), it will be added accordingly. Otherwise, a solution is chosen randomly from the set of best solutions found so far. The procedure stops after a given termination criteria. In case a (new) best solution has been found it will be stored accordingly, otherwise a route design will be chosen randomly from the set of best route designs found so far. The procedure stops after a total number of N iterations.Algorithm 1Basic Steps of Hybrid Solution ApproachinitializeΩbestΩ←GenerateInitialSolution▷generate initial route designF←LP(Ω)▷evaluate route designZbest←Z(Ω)▷save objective of best solution so farΩbest←Ωbest∪{Ω}▷initialize pool of best route designswhile termination criteria not reached do▷maximum number of iterations NΩ′←DestroyAndRepair(Ω,F)▷route (re)designLB←calcLB(Ω′)▷calculate lower boundifLB⩽Zbestthen▷check if route design is promising?F←LP(Ω′)▷evaluate route designifZ(Ω′)⩽Zbestthen▷(new) best solution found?updateΩbest,Zbest▷update pool and objective of best solutionelseΩ←any route design fromΩbest▷randomly pick route design from poolF←passenger flows associated withΩ▷restore passenger flowsend ifend ifend whileThe proposed hybrid method is based LNS. However we would like to emphasize that a similar decomposition technique and the notion of feedback could be used within other metaheuristics as well.To represent a solution for the proposed hybrid solution framework we focus on a set of routes in use, i.e. the set of stations where they stop. This corresponds to decision variablesyrs(and implicitlynrst) in the mathematical formulation introduced in Section 3. Actual passenger flows and frequencies can be retrieved by solving the mathematical formulation described in Section 3, by fixing the respective decision variables.Note that a given set of routes may not necessarily result in a feasible solution. A solution may be considered infeasible, due to a set of routes and hence the underlying GNG graph being disconnected, i.e. passengers may not be able to reach their destination using the current set of routes offered. Another reason for infeasibility might be due to the passengers’ demand, the number of busses available and their capacity respectively. To evaluate infeasible solutions we will add a dummy route. The dummy route is supposed to stop at every station in the predefined order according to its corridor. Let d denote the index of the dummy route, which does not count towards the fleet size limit and hence will be ignored in Constraint (3.4). However its usage will be penalized (using parameterγ) by the following modified objective function(4.1)ZD=Z+γ·fd→min.Given a solution x all binary decision variables previously in use (i.e.nrstandyrs) can be fixed accordingly. Hence the problem introduced in Section 3 reduces to a linear problem (LP), which may be used to evaluate the given set of routes. The number of solution evaluations required may be reduced by estimating a lower bound (LB). Solutions whose LB is worse than the objective of the best solution found so far will be discarded immediately. A valid LB can be obtained by ignoring capacity restrictions and assuming that every passenger travels on her shortest (i.e. fastest) path within the resulting GNG. The resulting problem reduces to a shortest path problem for every pair ofo,d∈S.We will now provide a description of a solution’s encoding. Afterwards the proposed metaheuristic based on LNS, as well as all operators involved for finding promising route designs, will be described in more detail.The main idea when generating an initial solution is inspired from the following observation: Ideally passengers will be able to travel along what could be considered their shortest path, i.e. without unnecessary transfers between routes and using routes with no intermediate stops between their desired origin and destination. Hence in a good or (near-)optimal solution we expect a high percentage of passengers to be able travel along their shortest paths. Only few passengers should be required to deviate from them, which would lead to an increase in the passengers total travel time and hence a deterioration of the solutions’ quality. We will use this observation when generating an initial solution, by trying to create a set of routes that contains segments (i.e. pairs of consecutive stops) that belong to the shortest paths of many passengers.The solution will be initialized empty, i.e. without any routes created. In the first step we will identify the set of segmentsh∈H, i.e. pairs of consecutive stops, that would be part of any shortest path of any passenger demanding transportation. Additionally we calculate the demand on each segment, given by the number of passengers that would travel along that particular segment. Segments can be identified by solving a shortest path problem on an extended GNG graph as shown in Fig. 2 considering only one route.Starting from an empty set of routes, we iteratively try to add stops according to the identified segments. The probability of a segment to be selected for potential insertion is proportional to its demand. Upon selection of a segment we try to insert it into any of the existing route. Insertion into any route r is considered feasible, if segment h does not overlap with, i.e. would destroy, other segments already included. If several routes qualify for insertion, the actual route r will be determined randomly among eligible ones. In case no route qualifies for a feasible insertion of segment h and the total number of routes R has not yet been reached, a new (empty) route is added. If a route was identified that allows for the feasible insertion of the segment h, the corresponding stop(s) will be added. The actual number of stops to be added depends on the current route, as they might exist already. The procedure stops, once all segments have been considered for potential insertion. Routes are guaranteed to be connected after applying the post-optimizing procedure as described in Section 4.5.In every iteration we will first destroy the current set of routes by removing a certain number of elements (i.e. stops in routes) from it. The number of stops k to be removed is chosen randomly between0.01nand0.4n, where n denotes the number of stops in the current solution. Next a destroy operator is selected and applied to the current solution x. We propose three different destroy operators which are described in more detail below.The random destroy operator randomly removes k stops from the current solution. The worst destroy operator removes stops, whose removal result in the highest deterioration of the objective function value. Following similar ideas the biased worst destroy operator removes k stops while biasing the selection towards stops, whose removal would deteriorate the objective function the most.The resulting change in the objective function upon removal of a stop is estimated by evaluating the consequences for passengers, given their current flows. More precisely, consequences for both passing and directly affected passengers will be evaluated. This approximation is made locally, i.e. we assume that the path of passengers may only change between the vertices affected in the GNG graph. An estimation is made for all routes nodes currently in use, i.e. whereyrs=1. The approximated change when removing the stop at station s from route r is denoted byΔ(r,s). Its derivation for passing and directly affected passengers will be illustrated in more detail in the subsequent paragraphs using the following notation: Let t (w) denote the station of the next (previous)1The terms previous and next may imply a direction, but are chosen arbitrarily. Routes however are symmetric, i.e. operate in both directions. For illustrative purposes we may also use the terms left and right1stop of route r, i.e.nrst=1(nrws=1). The corresponding route vertices in the succeeding (proceeding) station are indexed byvjandvkrespectively, i.e.r=r(vj)=r(vk),s(vk)=wands(vj)=t. Note that t andvj(w andvk) may not be defined, if station s under consideration happens to be the last (first) stop of the underlying route. Upon removal of the stop at station s of route r, vertexvi(wheres(vi)=sandr(vi)=r) would be eliminated from the underlying change-and-go graph. Consequently any station arcs within station s invoking nodeviwould be removed as well. If applicable, new route arcs(vk,vj)and(vj,vk)will be added and route arcs(vk,vi),(vi,vk),(vi,vj)and(vj,vi)will be removed.Letαkjdenote the number of passengers traveling on route r from stationw=s(vk)tot=s(vj), without getting off at station s. This number can be calculated givenF, i.e. the passengers’ flow according to the current set of routesΩ. We refer to them as passing passengers, as their path is not subject to immediate change upon removal of a stop at s in route r. For them, the removal of the stop at station s would – other things being equal – not lead to a deterioration of their total travel time. Note that there are no passing passengers in case of the removal of the first or last stop on any route. Their resulting change due to the removal of a stop at station s in route r is denoted asΔP(r,s), where(4.2)ΔP(r,s)=(αkj+αjk)·(ckj-cki-cij).Similar ideas are applied to passengers who, given the current solution, were supposed to board or deboard route r at station s. This might be either because they are leaving from there, having reached their final destination or are transferring to another route in s. For them, the removal of the stop at station s, will inevitably lead to a modification of their path towards their destination. We will approximate the resulting change in terms of the travel time required by determining an alternative path between stations s and t and w respectively. We refer to Fig. 5for illustrative purposes. Dotted connections refer to arcs that would be removed. New arcs to be inserted are represented using solid lines. Alternative paths are illustrated using dashed connections.Letβij+denote the number of passengers that are using link(vi,vj)and just boarded at stations(vi). Similarly we defineβij-as the number of passengers using link(vi,vj), that will deboard at stations(vj). LetpiR(piL) denote the alternative shortest path we assume passengers to choose when traveling between stations(vj)(s(vk)) and s in case the stop at station s along route r would be omitted. The corresponding travel time along them is referred tocˆiRandcˆiLrespectively. Letrˆdenote the route on which station s is entered or left using the alternative path. Eventually an additional transfer within station s can be avoided for passengers that were supposed to transfer between r andrˆanyway. Hence we defineγi-as the percentage of passengers deboarding at station s from route r who were supposed to transfer to routerˆ. Similarly we defineγi+as the percentage of passengers boarding route r at station s fromrˆ. Using this notation we then may estimate consequences usingΔA(r,s), where(4.3)ΔA(r,s)=(βik++βki-)·(min(ckj+cˆiR,cˆiL)-cki)+(βij++βji-)·(min(ckj+cˆiL,cˆiR)-cij)-cs·(γi+·(βik++βij+)+γi-·(βki-+βji-)).Consequently the approximated total change can be expressed as follows:Δ(r,s)=ΔP(r,s)+ΔA(r,s).Next, following a destroy operation, the solution will be repaired. In every iteration l stops will be added into the current solution. The number l is chosen randomly between0.6kand1.4k, where k denotes the number of stops removed during the previous destroy phase.A repair operator is selected and applied to the current solution. We propose three different repair operators, which we describe in the following paragraphs: The random repair operator randomly adds stops into the current solution. The best repair operator adds stops, whose insertion leads to the highest improvement of the objective function value. Similarly the biased best repair operator selects stops to be added randomly, the selection of which will be biased proportionally to their improvement. The resulting change is estimated by approximating the consequences for delayed and detouring passengers. Again we assume that the paths of passengers only change locally between the affected nodes in the GNG graph.Fig. 6illustrates the proposed idea, assuming that we are about to insert a stop at station s of route r. This results in nodevibeing added to the underlying GNG graph, wheres(vi)=sandr(vi)=r. We will use the same notation for referring to previous and succeeding stops and nodes as in previous Section 4.3.We consider passengers as being delayed if they are currently on route r traveling between stations w and t. For them adding an additional stop at station s would result in an increase of their travel time and hence a deterioration of the objective function value. The resulting change can be calculated as follows(4.4)ΛL(r,s)=(αkj+αjk)·(cki+cij-ckj).Additionally we take into account consequences for so called detouring passengers, who could avoid a detour through the insertion of a stop in a route they are currently using. Fig. 6 shows the underlying idea of avoiding detours. Again, new arcs to be inserted are represented using solid lines. Dotted connections refer to arcs that would be removed. Two possible alternative pathsp,q∈Pit(Piw) between station t(w) and s are illustrated dashed connections.For a particular station s to be added into route r, we refer to detouring passengers as passengers that are using route r, who want to get to station s, but currently pass it.2Station s might be their final (or original) station. Alternatively they might be supposed to change there into another route.2They will return to station s by transferring at another stop further along the route, and return to station s. Due to capacity restrictions not all passengers returning to station s might do so on the same path. Hence letp∈Pit(Piw) denote the set of paths that passengers passing station s may use to return to it via station t (w). The costs of path p, from the corresponding next used node along the route, back to station s are denoted bycˆp. LetδipR(δipL) denote the number of passengers that, given the current solution, pass and return to stations=s(vi)on pathp∈Pitandp∈Piwrespectively. Using this notation we can easily summarize the estimated changes in the objective function upon insertion of a stop at station s in route r usingΛT(r,s), where(4.5)ΛT(r,s)=∑p∈PitδipR·(-ckj-cˆp+cki)+∑p∈PiwδipL·(-cjk-cˆp+cij).The total change will then be approximated usingΛ(r,s)=ΛL(r,s)+ΛT(r,s).Please note that any set of routes (excluding the dummy route) obtained after having applied a destroy and repair operator is not guaranteed to be feasible, as it may result to be disconnected. The same holds for the initial set of routes generated. For a solution to be connected two conditions need to hold: First, for any stationo∈Swith a non-zero demand (i.e. where∑d∈Sbod+∑d∈Sbdo>0) there needs to be at least one route serving that station. Additionally, we have to ensure that the resulting network in terms of routes is connected. To address the former issue we add a simple check and add additional stops into an eligible route randomly to regain connectivity. To ensure the connectivity of the GNG we compute the number of the graphs’ components (i.e. the minimum number of disjoint connected subgraphs). In case the number of components is larger than one the underlying set of routes is not connected. In this case we would randomly choose two routes which may – but currently do not – have stops in common. A stop will be added randomly at a station they have in common. The procedure stops once the set of routes is connected, i.e. the number of components in the graph reduces to one.

@&#CONCLUSIONS@&#
In this paper we presented a model formulation for the bus rapid transit (BRT) route design problem, given upper bounds on number of routes to be offered. We proposed a hybrid metaheuristic based on Large Neighborhood Search (LNS) for the problem at hand. We decompose the problem into a route design and evaluation phase. Decisions upon the actual design of routes have been handled by LNS. We proposed and tested several problem-specific destroy and repair operators to be used within the LNS framework. The resulting (optimal) passenger flows and frequencies may then be determined by solving a linear program (LP). The proposed algorithm is iterative. Any solution obtained by the LP will bias the choice of destroy and repair operations to be performed in the next iteration. The provided feedback will allow guiding the route design phase into promising directions and reinforce good design choices. The algorithm is able to provide competitive results within a short amount of run time.The problem formulation and the suggested solution approach may easily be extended in order to include more realistic constraints. These may include limits on the number of passengers within a certain station building, a limit on the frequency of busses along certain routes, the length of routes, or a limit on the maximum number of busses within certain segments. Hence allowing for increased security and safety for the resulting operations. Within this paper we focused on a passenger oriented objective, hence minimizing their total travel time, given a (budget) restriction expressed by the available fleet size. Alternative approaches may also include the number of direct travelers, the minimization of the number of transfers required, or their deviation from their optimal path. Additionally one could focus on cost oriented goals, i.e. minimizing operating costs, or a combination of both. This would require to modify the objective function, and might include additional (linear) constraints which can be added to the model formulation presented in Section 3. Besides the presented problem-specific operators should be modified accordingly taking into account the consequences for different objective functions accordingly.The algorithms can be extended in a straight forward way for more general networks, i.e. network consisting of several corridors. No changes are necessary for the underlying change-and-go graph (GNG). And only small changes are required for the proposed algorithm itself. Most importantly, every route needs to be assigned to a corridor. Consequently the set of feasible stations where a route could stop may be limited. Hence the repair operator may only add stops at stations, if it would be feasible with respect to the underlying corridor. Two different versions of the problem may be considered: the number of routes per corridor may be given, or not. The former case is slightly easier. If routes may be freely chosen among corridors an additional operator for changing the corridor assignments should be included.In the future we are planning to extend our approach and also solve larger instances considering more complex network structures. Additionally more realistic times of the time required to board and transfer between busses should be taken into account.