@&#MAIN-TITLE@&#
Benefits of a new Metropolis–Hasting based algorithm, in non-linear regression for estimation of ex vivo antimalarial sensitivity in patients infected with two strains

@&#HIGHLIGHTS@&#
We model the antimalarial sensitivity in a blood sample with two strains of parasite.We develop a Metropolis–Hasting algorithm to estimate parameters of the model.We compare our estimation results with three other algorithms.We evaluate our algorithm on a simulation study, on in vitro and ex vivo data.For poor concentration design, our algorithm gives accurate results.

@&#KEYPHRASES@&#
Plasmodium,Modeling,Nonlinear regression,Gauss–Newton algorithms,Simulated annealing algorithms,Metropolis–Hasting algorithms,Antimalarials,Sensitivity,

@&#ABSTRACT@&#
Malaria is one of the world׳s most widespread parasitic diseases. The parasitic protozoans of the genus Plasmodium have developed resistance to several antimalarial drugs. Some patients are therefore infected by two or more strains with different levels of antimalarial drug sensitivity. We previously developed a model to estimate the drug concentration(IC50)that inhibits 50% of the growth of the parasite isolated from a patient infected with one strain. We propose here a new Two-Slopes model for patients infected by two strains. This model involves four parameters: the proportion of each strain and their IC50, and the sigmoidicity parameter. To estimate the parameters of this model, we have developed a new algorithm called PGBO (Population Genetics-Based Optimizer). It is based on the Metropolis–Hasting algorithm and is implemented in the statistical software R. We performed a simulation study and defined three evaluation criteria to evaluate its properties and compare it with three other algorithms (Gauss–Newton, Levenberg–Marquardt, and a simulated annealing). We also evaluated it using in vitro data and three ex vivo datasets from the French Malaria Reference Center.Our evaluation criteria in the simulation show that PGBO gives good estimates of the parameters even if the concentration design is poor. Moreover, our algorithm is less sensitive than Gauss–Newton algorithms to initial values. Although parameter estimation is good, interpretation of the results can be difficult if the proportion of the second strain is close to 0 or 1. For these reasons, this approach cannot yet be implemented routinely.

@&#INTRODUCTION@&#
Malaria is one the main causes of death around the world. World Health Organization (WHO) estimates for 2010 put the number of deaths at more than 660000 (490000–836000) and the total number of cases at 219 (154–289) million [1]. Malaria is transmitted through the bite of a mosquito (Anopheles) infected by a parasite called Plasmodium: the infected female mosquito bites someone to feed itself and to enable the development of its eggs, and at the same time injects the parasite present in its saliva into the host. There are 5 species of Plasmodium responsible for malaria but the most dangerous is Plasmodium falciparum, which is the most prevalent species in Africa (98% [2]).The fight against malaria consists of attempts to control mosquitoes, the main vector of the parasite and the use of antimalarial drugs. However depending on the targeted populations and the mode of treatment, mosquitoes are rapidly becoming resistant to insecticide, Plasmodium parasites are becoming resistant to antimalarial drugs, and these drugs, which are very effective for prevention and treatment, are expensive for some populations, especially the most affected [2].Because of the increasing resistance of P. falciparum to antimalarial drugs, organizations such as the French Malaria Reference Center (CNRpalu), Drug Resistance and Containment (DRC/GMP/WHO), and the World Wide Antimalarial Resistance Network (WWARN) have decided to monitor antimalarial resistance. In France, CNRpalu records all cases of malaria reported cases in France, takes blood samples and performs ex vivo tests to evaluate the level of resistance to various antimalarial drugs: chloroquine, atovaquone, desethyl amodiaquine, dihydroartemisine, quinine, doxycycline, mefloquine. To determine if a parasite has decreased susceptibility to an antimalarial drug, the estimated concentration that inhibits 50% of the parasite׳s activity for a given drug is compared with a series of values for isolates that normally respond to treatment. For example the threshold for chloroquine is 100nmol/L [3]. In the CNRpalu, results from ex vivo tests are recorded in a data bank.The concentration which inhibits 50% of the parasite׳s activity is called IC50 (i.e., the in vitro drug 50% inhibitory concentration).The IC50 for a given drug determines whether the parasite in the blood sample is resistant or not to this drug. To estimate IC50 for a blood sample a web tool called ICEstimator [4] is used routinely at CNRpalu. ICEstimator, which was developed by our research group, provides an IC50 estimation based on an Emaxmodel [5]. It was written as an R [6] function with a nonlinear regression performed with nls in R for parameters estimation with the Gauss–Newton algorithm. This algorithm efficiently estimates IC50 when there is a parasite population with homogeneous susceptibility.Using molecular detection of resistance mutations, some biologists have noted that blood samples may contain two or more different strains of parasite with different levels of resistance to antimalarial drug and in this case the use of the Emaxmodel is inappropriate due to the way it is written. The slow growing Plasmodium needs weeks to be cloned and so more time is needed for the selection process. An ex vivo Plasmodium susceptibility test then measures the response of a heterogeneous population (median number of clones with different levels of resistance to an antimalarial drug, in an infected patient, is 3 in Africa).To analyze this type of data, we propose a new model, inspired by Willet et al.[7] the “Two Slopes” (TS) model which is a convex linear combination of two Emaxmodels with the same sigmoidicity factor. This model contains two IC50 values, one for each of the two parasite strains, which may havedifferent antimalarial drug resistance, and their proportions. As previously, parameters were estimated by non-linear regression. As the difficulty of finding good initial values hampers use of Gauss Newton algorithms in our case, we developed our own optimization algorithm, the Population Genetics Based Optimizer (PGBO), based on the Metropolis–Hasting (M–H) algorithm. PGBO was developed in order to optimize hundreds of parameters in complex neural network models [8]. To evaluate it, we compared it with three other algorithms: Gauss–Newton and Newton–Raphson which are respectively implemented in R functions nls and MarqLevAlg [9], and another algorithm based on Metropolis Hasting [10] which is implemented in the R package GenSA [11]. First, we evaluated estimations from our algorithms using simulation data, and then using the in vitro data of Kaddouri et al. in [12] and, finally, we illustrated our approach using three sets ex vivo data, from three different infected patients, given by the CNRpalu.As with the ICEstimator, data were normalized as follows [4]: assuming that the average responses when the drug concentration is null (C0) are equal to 100% and that the average responses when the drug concentration is the highest (Cmax) equal to 0%, we callE(C0)the average of the observed responses at C0,E(Cmax)the average of the observed responses at Cmaxand Eithe observed responses at Ci, therefore the relative effect REiat concentration Ciin percent is given byRE(Ci)=Ei−E(Cmax)E(C0)−E(Cmax)×100.The TS model was developed to evaluate the sensitivity of two strains of parasite with different levels of antimalarial drug resistance. As in [7], the TS model is defined by(1)RE(C,Θ)=(1−P)[EMAX−EMAXCγCγ+IC50,1γ]+P[EMAX−EMAXCγCγ+IC50,2γ]where Θ is the vector of parameters defined byΘ=(IC50,1,IC50,2,P,γ),RE(C,Θ)is the relative effect of the parasite activity at a concentration C of antimalarial drug for a given Θ, EMAXis the maximal effect (here equals 100),IC50,1is the drug concentration that inhibits 50% of the activity of the parasite with the lowest drug resistance,IC50,2is the value that inhibits 50% of the activity of the parasite with the highest level of drug resistance (IC50,1<IC50,2), P is the proportion of parasite that has the highest level of drug resistance, and γ is the sigmoidicity factor.For P=0, P=1 orIC50,1=IC50,2, the TS model is equivalent to the simple one slope Emaxmodel [5].Fig. 1displays five examples of the TS model with various parameter values. In this example, we consider that the black curve is the reference and the others were built from the reference by changing the value of one parameter.The higher theIC50,1the more the curve is on the right of the plot. The higher the γ, the steeper the slope. Also the closer the P is to 1 (respectively to 0), the higher (respectively lower) the second inflection point. For similar values ofIC50,1andIC50,2the TS model corresponds to a one slope model. We consider the statistical model with an additive error as follows:(2)Yi=RE(Ci,Θ)+σϵii=1,…,nwhere Ciis the ith concentration, Yithe ith normalized observation,ϵi~N(0,1),σ>0and n is the number of observations.Because the error is additive and homoscedastic we estimate parameters using the Ordinary Least Square (OLS) method, which minimizes the sum of squared vertical distances between the observed responses in the dataset and the responses predicted by the model. ThusOLS(Θ)=∑i=1n(Yi−RE(Ci,Θ))2thusΘ^=argmin{Θ∈R+2×[0;1]×R+,OLS(Θ)}For linear models, the exact solution of the OLS method is well known, but our model is nonlinear. Therefore algorithms must be used to solve the OLS and approximate the solution. We used two kinds of algorithms: Newton type (NT) algorithms and Metropolis–Hasting (M–H) algorithms.Two NT algorithms were implemented in R [6]:Gauss–Newton׳s algorithm was the default algorithm in the R function nls, andMarquardt–Leveberg׳s algorithm (which is based on the Newton–Raphson algorithm) was used in the R׳ package “MarqLevAlg” [9].The Gauss–Newton algorithm can be described in several steps. The first step is the selection of an initial value for the vector of the parameter to initialize the algorithms. We call this vector Θ0. Then, with iteration k to iterationk+1, we have(3)Θ(k+1)=Θ(k)+[JT(Θ(k))J(Θ(k))]−1JT(Θ(k))r(Θ(k))whereJ=(∂RE(Ci,Θ)/∂Θj)1≤i≤n,1≤j≤4is the n×n Jacobian matrix of parameters, JTis the transpose matrix of J andr(Θ(k))=(r1(Θ(k)),⋯,rn(Θ(k)))Twithri(Θ(k))=Yi−RE(Ci,Θ(k)). A stopping criterion is defined, for example in nls the algorithm stops when|Θ(k+1)−Θ(k)|<10−s,s∈N(with, s=5 by default). The matrix JTJ should not be singular, hence the choice of the initial parameter vector is crucial.The MarqLev method uses the Marquardt Levenberg algorithm [13–15], which is a mixture of a gradient algorithm and the Gauss Newton algorithm. This algorithm belongs to the set of the quasi-Newton algorithm. It was developed to be less sensitive to the initial value while remaining as fast as the Gauss Newton algorithm. This method is very similar to the Gauss Newton method, and in fact Eq. (3) can be re-written as(4)Θ(k+1)=Θ(k)+[JT(Θ(k))J(Θ(k))+λI]−1JT(Θ(k))r(Θ(k))for the Marquardt Levenberg algorithm, where λ is the so-called dumping parameter and I is the identity matrix. Due to the dumping parameter, this method is more stable and robust than the Gauss Newton method because it estimates parameters even if the initial values are far from the real ones. By using the default MarqLev method in R we did not choose the dumping parameter because it is not a required value. Thus the main difficulty in using these algorithms is finding the initial vector of the parameters.Because, with our model and the associated data, it is not easy to find automatic initial values of parameters close to the real ones, we used stochastic algorithms.Stochastic algorithms based on M–H algorithms [16] use a meta-heuristic method to approximate a global estimation of a given function by minimizing the OLS. Because we wanted to be as general as possible, we used two implementations of these types of algorithms: GenSA, an R implementation of the generalized simulated annealing algorithm [17], and our algorithm, PGBO, which was successfully used in a previous study to optimize parameters in a complex model [8].GenSA has been commented on and used by [18].PGBO is an algorithm based on an evolutionary process with mutation and selection to optimize the parameters of a function. It uses Markov dynamics within a Markov chain with transitions driven by the probability of fixation of a mutant in a population as described in [19] and modified for haploid populations by Sella and Hirsh [10]. In PGBO, biological terms are used to describe each component. We define a mutant as a set of parameters (ΘM) and its fitness as an evaluation of how close the parameters are to the optimal solution. We define the resident (ΘR) as the latest mutant selected by the algorithm. Based on the mutant fitnessfitΘ^Mrelative to the resident fitnessfitΘ^R, the mutant either immediately invaded the population and became the new resident or disappeared. The probability of invasionP(Θ^R→Θ^M)depended on the evolving population size N and the difference between the fitness of the resident and the fitness of the invader:P(Θ^R→Θ^M)=1−(fitΘ^RfitΘ^M)21−(fitΘ^RfitΘ^M)2NwherefitΘ^is defined from the OLS ase−βOLS(Θ^)and β is the specific drift parameter.While simulated annealing uses its temperature parameter to avoid getting stuck too quickly in local minima and to maximize the exploration of the solution space, the strategy used in PGBO is to maintain a balance between the probability of escaping the local minima and the efficiency of converging to optima. To maintain this equilibrium, N was set to 40 and β was adjusted every 1000 iterations to keepfitΘ^near 0.03 [8].The value ofN=40was chosen arbitrarily to facilitate fast exploration and reduce local optima issues. After5×105iterations the algorithm was stopped and theΘ^iwith the highestfitΘ^was kept as the best solution.We simulated data from the TS model and a homoscedastic error as it was described in Eq. (2) with σ = 5. Two concentration designs were studied: n=10 and n=30; the concentrations were regularly spaced with a regular step in log10 scale between 0 and 105. We called a design with 10 concentrations “poor” (P) and a design with 30 concentrations “rich” (R). We defined k as the ratio betweenIC50,2andIC50,1. We called a ratio with k=100 “large” (L), and a ratio with k=10 “small” (S). We simulated 10 datasets for each design and each ratio, i.e., a total of 40 datasets.To limit P to between 0 and 1 and to limitIC50,2to be greater thanIC50,1, we did not estimate P andIC50,2but we estimated Q and α which are defined byQ=logit(P)wherelogit(P)=ln(P1−P)α=ln(k−1),wherek=IC50,2IC50,1.Finally we estimated 4 parameters:IC50,1, α, Q, and γ, so Θ is now defined byΘ=(IC50,1,α,Q,γ)To evaluate the sensitivity of the initial value of the algorithms, we simulated 100 vectors Θ of initial parameters randomized asIC50,1~U[1;100]α=ln(k−1)withk~U[1+e;100]Q=logit(P)withP~U[0.02;0.98]γ~U[0.5;10]whereU[a,b]is the uniform distribution between a and b.For each of the 40 simulated datasets, we estimated Θ using the 4 algorithms, with each initial value of the vector. Thus, each parameter of Θ was estimated 400 times.To estimate parameters by means of M–H algorithms, we defined the maximum number of iterations (It),It=5×105, the temperature (T),T=103, and the bounds for Θ: lower bounds were (1, 1, −4, 0.5) and upper bounds were (500, 7, 4, 10). The MarqLev algorithm was used as a “booster” as described in [9] and the Gauss–Newton algorithm was used by default in the nls function.The estimated standard deviation for the model was computed as(5)σ^2=1n−4∑i=1n(Yi−RE(Ci,Θ^))2For the vector of each estimated parameter, the standard error (SE) was determined by taking the square roots of the diagonal elements of the inverse of the Fisher matrix (F) whereF=JT(Θ^)J(Θ^)/σ^2.To evaluate the estimation properties of the four algorithms, we used 3 criteria for each set of simulated data. For a ratio r, a design d, a dataset l, and an initial value of the vector v, we definedΘ^r,d,l,vA=(θ^1,r,d,l,vA,θ^2,r,d,l,vA,θ^3,r,d,l,vA,θ^4,r,d,l,vA)whereΘ^r,d,l,vis the parameter estimated ofΘr,d,l,vby the algorithm A andσ^r,d,l,vAis the estimated standard deviation of the model.The first criterion is the estimated standard deviation of the error modelσ^r,d,l,vA. To simplify the notation, we writeσ^for the algorithm A, instead ofσ^r,d,l,vA.The second evaluation criterion is the relative median error of each component ofΘ=(θ1,θ2,θ3,θ4), for each ratio, each design and each algorithm.Hence, for a given ratio, a given design, and a given algorithm, because of the 100 initial values and the 10 datasets, there are 1000 estimates of each component p of Θ. LetLp=(θ^p,r,d,1,1A,…,θ^p,r,d,1,100A,…,θ^p,r,d,10,1A,…θ^p,r,d,10,100A), we defineRmed(θp,r,dA)as(6)Rmed(θp,r,dA)=Median(Lp)−θpθpwhere θpis the true value.If an algorithm did not give an estimation of the parameters for a dataset we set the parameters to the initial value.The third criterion is a score used to compare two algorithms (A1 and A2). For eachθ^p,r,d,l,vA, (p=1,⋯4andA=A1or A2) we calculate the distance betweenθ^p,r,d,l,vAandθp,r,d,l,v.Thus for a parameter p, the algorithm A1 gains 1 point if|θ^p,r,d,l,vA1−θp,r,d,l,v|is lower than|θ^p,r,d,l,vA2−θp,r,d,l,v|and the other has 0 point. By repeating this for the four parameters, an algorithm may have a maximum of 4 points.Thus we define(7)scr,d,l,vA1=∑p=141|θ^p,r,d,l,vA−θp,r,d,l,v|=minA∈(A1,A2)|θ^p,r,d,l,vA−θp,r,d,l,v|suchasscr,d,l,vA2=4−scr,d,l,vA1.The score for the ratio r, the design d and the algorithm A is(8)Sr,dA=∑l=110∑v=1100scr,d,l,vAWe also evaluated the algorithms using more realistic data, the in vitro data of Kaddouri et al.[12].These data are from 7 different mixtures of two P. falciparum strains: HB3 and FCM29 with different proportions (in percent): 0/100; 10/90; 30/70; 50/50; 70/30; 90/10; 100/0 such as HB3 is chloroquine resistant and FCM29 is sensitive to chloroquine. Each mixture was studied in duplicate.These 14 experiments were tested using the microtest [12], which quantifies the parasite effect for a given drug concentration.A blood sample is washed and cultured [20]. To test an antimalarial drug concentration, it is mixed with100μLof washed blood with hypoxanthine which is a marker for monitoring the growth of the parasite and put in a hole of a 24 well plate. The plates are incubated for 42h at 37°C in a CO2 incubator and then frozen and kept at −20°C [20]. After thawing of the plates, the contents of each well are harvested on fiber filter disks. The fiber filter papers disk is washed and dried and mixed with 2mL of scintillation fluid, and incorporation of radioactivity (in counts per minute) into the parasite is measured with a liquid scintillation counter [20].Ten chloroquine concentrations from 0 to 3200nM were used, each in duplicate or triplicate. We first normalized the data, as described in Section 2.1, and then estimated parameters with the four algorithms, taking the initial vector value asΘ0=(100,1,0,1).Because these data are artificial, we know exactly the proportion of FCM29 in each mixture which is estimated by P in the TS model, and we also know the usual IC50 of HB3 and of FCM29, 50 and 1100 respectively, with a ratio of 22.From the CNRpalu 2011 database, we chose three patients infected by malaria to illustrate our approach. For each patient, one blood sample was divided into eight samples for testing [4] with eight different drugs. The process described in Section 2.6 was used.Among the eight tested drugs, we focused on the atovaquone, and so have a dataset of concentrations versus effects for each patient.Twenty two concentrations of atovaquone from 0 to 24000nmol/L were each tested once, except for the null concentration which was done 8 times. We therefore had 22 effects. As with the in vitro data we normalized the ex vivo data by the process described in Section 2.1, and then estimated parameters using the four algorithms. The vector of the initial values wasΘ0=(100,1,0,1).

@&#CONCLUSIONS@&#
