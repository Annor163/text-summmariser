@&#MAIN-TITLE@&#
On type-reduction of type-2 fuzzy sets: A review

@&#HIGHLIGHTS@&#
Presenting a comprehensive review on the type-reduction process of type-2 fuzzy sets.Surveying various type-2 fuzzy disciplines including fuzzy systems, fuzzy clustering, etc.Extensive comparisons among the existing approaches from different view points including computational complexity, etc.

@&#KEYPHRASES@&#
General type-2 fuzzy sets,Interval type-2 fuzzy sets,Type-reduction,Defuzzification,Fuzzy logic systems,Fuzzy clustering and classification,

@&#ABSTRACT@&#
As an undetachable module of type-2 (T2) fuzzy computations and reasoning, type-reduction methods play an important role in various fuzzy disciplines including fuzzy logic systems and fuzzy clustering. Importance of type-reduction techniques lies in the fact that they are the main tools for collecting the entire inherent vagueness of the data. Therefore, type-reduction methods form the output of type-2 fuzzy sets (T2 FSs) as the representative of the entire uncertainty in a given space. Hence, their accuracy, precision, and performance speed is of much interest. This paper, presents a comprehensive review on various type-reduction and defuzzification strategies for general and interval type-2 fuzzy sets and systems. It is tried to analyze the existing approaches from different point of views accompanied by extensive comparisons on different features of type-reduction methods to facilitate further research studies by the fuzzy community.

@&#INTRODUCTION@&#
Uncertainty is an inherent feature of information. Today, most of decision making processes involve retrieving and analyzing information which is mostly vague, incomplete, noisy, fragmentary, or sometimes contradictory. With the advent of soft computing (SC) methods, several powerful tools in the field of computational intelligence were introduced including: type-1 fuzzy logic, neural networks, evolutionary algorithms, and hybrid intelligent systems (HIS) [59–61].As an efficient tool, type-1 fuzzy sets (T1 FSs) have long been employed in various disciplines such as pattern recognition, medical applications, engineering problems, etc. Although for many cases, application of T1 FSs makes sense but in more uncertain environments it does not seem to be appropriate. T1 FSs assign a single value from the interval [0,1] to each member of the primary domain as membership value while sometimes membership of an object to the universe of discourse is uncertain itself. This property led the researchers to interval type-2 fuzzy sets (IT2 FSs) whose membership functions are an interval instead of a single value. IT2 FSs are a special form of general type-2 fuzzy sets (GT2 FSs) whose secondary membership values for the entire members of the primary domain are 1. This property reduces computational efforts needed for analysis of GT2 FSs while remarkably enhancing imprecision handling capabilities of traditional T1 FSs.Most approaches being constructed on the concept of T1 FSs need to perform an operation called defuzzification in order to integrate environment uncertainty and to give a single value which represents the entire imprecision of the environment. On the contrary, T2 FSs require an additional step for representing a single value as the representative of the uncertainty. This step is called type-reduction which converts a T2 FS into its T1 counterpart. Type-reduction is a necessary step in different computational intelligence fields including fuzzy systems, clustering, and classification.The general T2 FLS schema is illustrated in Fig. 1. This process is similar to T1 FLS and the main difference between T1FLSs and T2FLSs can be observed in defuzzification step. T2 FSs are described by MF which is more flexible than T1 FSs. In Fig. 2, an overview of applications published in the literature on T2 fuzzy logic accompanied by the position of type-reduction process is depicted. According to Fig. 2, 14 groups can be considered in T2 fuzzy logic, and four classes of exact methods, uncertainty bounds approaches, approximate and geometrical methods can be listed as type reduction approaches. Most of the researches emphasize on IT2 FSs, because of their manageability and docility; however, the influence of GT2 fuzzy models has gradually increased these days. This paper focuses on state of the art T2 fuzzy logic type reduction methods. It has been tried to collect the entire existing type-reduction strategies in the literature for both IT2 and GT2 FSs. Then, comprehensive comparisons from diverse aspects including computational complexity, accuracy, operational criteria, etc., will be presented that can be a good reference for future references.A review of type-2 fuzzy logic applications in pattern recognition and classification problems and a representative review of the most successful applications of type-2 fuzzy logic in these fields are provided by Melin and Castillo [62]. Also in [67], a concise review on tuning of IT2 FSs using bio-inspired approaches is presented. Some of real applications of IT2 FSs can be found in [65,66,68,70]. In a recent publication [64], very useful investigation on granular computing and intelligent systems applications including IT2 FSs are represented.The rest of the paper is organized as follows: Section 1 is devoted to comprehensive surveying of the entire existing type-reduction strategies in the literature. In Section 2, the considered approaches will be discussed more and Section 3 represents a brief discussion and analysis on the existing approaches. Conclusion remarks will be presented in Section 4.Before heading down to the review process, it is necessary to have a brief review on the basic definitions of IT2 and GT2 FSs.On a universe of discourse X, a GT2 FSA˜is expressed using its corresponding T2 membership functionμA˜(x,u)where x∈X and u∈Jx[1]:(1)A˜=∫x∈X∫u∈JxμA˜(x,u)(x,u),Jx⊆[0,1]where x denotes the primary variable value, u denotes the secondary variable, Jxdenotes an interval between the lower and the upper membership functions, andμA˜(x,u)represents the secondary membership function. In (1), ʃʃ represents the union over the entire possible values of x, u, andμA˜(x,u).IT2 FSs are a special form of GT2 FSs whose secondary membership values for the entire values of the primary domain and primary membership space is 1. Hence, the third dimension of IT2 FSs reveals no extra information and is ignored. This property has made such FSs widespread since they require less computational efforts than the GT2 FSs and their computational complexity is rather less. Based on (1), an IT2 FSsA˜can be stated as (2):(2)A˜=∫x∈X∫u∈Jx1(x,u),Jx⊆[0,1]Despite versatile characteristics of GT2 FSs compared to IT2 FSs, for several years, representation of GT2 FSs has been a major bottleneck for implementing GT2 FSs in researches. With the advent of new representation techniques such as vertical slice, wavy slice, z-slices, and α-planes more research studies are being performed on theoretical aspects of GT2 FSs.A GT2 FSA˜can be represented by its vertical slices. Vertical slice ofA˜can be obtained by considering a specific point in universe of discourse such as x=x′. Then, the vertical sliceμA˜(x′,u)of the fuzzy membership functionμA˜(x,u)can be obtained. In fact, vertical slices at each point represent a secondary membership functionμA˜(x=x′,u)for x′∈X and∀u∈Jx′⊆[0,1]:(3)μA˜(x=x′,u)≡∫u∈Jx′fx′(u)u,Jx′⊆[0,1]wherefx′(u)is the amplitude of the secondary membership function andfx′(u)⊆[0,1].When the entire domain is discretized into N samples then the GT2 FSA˜can be represented as an aggregation of its entire vertical slices as below [2]:(4)A˜=∑i=1N∫u∈Jxifxi(u)/uxiThe other well-known representation method for a GT2 FSA˜has been provided as below [2]:(5)A˜=⋃∀A˜eA˜eHere,A˜is represented by the union of all its embedded T2 FSs. An embedded T1 fuzzy set ofA˜,A˜e, is described by a MFuA˜e:X→[0,1], whereuA˜e∈Jx.A˜ecan be stated below[3]:(6)A˜e=∫x∈Xux,u∈Jxwhere the embedded T1 FSA˜ewhich corresponds to an embedded T2 FSA˜econtains the primary memberships of thatA˜e. A schematic view of an IT2 and GT2 FSs are represented in Fig. 3. In Fig. 4, orthogonal view of the figures in Fig. 3 is represented.The concept of α-planes has been independently studied by several researchers such as Liu [4], Chan and Kawase [5], and Tahayori et al. [6]. An α-plane of a GT2 FSA˜is the union of the entire primary memberships ofA˜whose secondary grades are greater than or equal to α (0≤α≤1). α-Plane ofA˜is denoted byA˜α.(7)A˜α=∫∀x∈X∫∀u∈Jx{(x,u)|fx(u)≥α}An α-cut of the secondary MFμA˜(x)is represented bySA˜(x|α):(8)SA˜(x|α)=[SL(x|α),SR(x|α)]As a result,A˜αcan be constructed as a composition of all α-cuts of all of its secondary membership functions, i.e.,(9)A˜α=∫∀x∈XSA˜(x|α)x=∫∀x∈X∫∀u∈[SL(x|α),SR(x|α)]uxUsing α-planes, we can redefine the well-known definition of footprint of uncertainty (FOU). FOU is equal with the lowest α-plane i.e.,(10)FOU(A˜)=A˜0According to [3], each α-plane is bounded from above by its upper membership function,μ¯A˜(x|α), and from below by its lower membership function,μ_A˜(x|α). The upper and lower membership functions of a planeA˜αcan be described in terms of α-cuts as follows:(11)μ¯A˜(x|α)=∫∀x∈XsR(x|α)(12)μ_A˜(x|α)=∫∀x∈XsL(x|α)Eachα-plane is indeed an interval T2 FS with the centroidCA˜α(x). Liu [4] states that the centroid of a GT2 FSA˜,CA˜(x), is a composition of its all α-planes, i.e.,(13)CA˜(x)=⋃α∈[0,1]αCA˜α(x)Note that centroid of each α-plane,CA˜α(x), has a lower and an upper bound so that centroid of a GT2 FSA˜can be rewritten as (14):(14)CA˜(x)=⋃α∈[0,1]α[cl(A˜|α),cr(A˜|α)]In this section, a representative account of the existing type reduction approaches in the literature is presented. The reviewed papers consist of a wide range of approaches from exact methods, iterative algorithms, and approximative techniques.The concept of T2 fuzzy logic was first introduced by Zadeh [7] in 1975. Since then, the problem of type reduction has always been an interesting research subject. The initial type reduction method is an exact technique called “complete enumeration” [1]. This method uses the entire embedded sets constructing a T2 FS and then computes centroids of them, entirely. This approach is rather impossible for most real world problems especially in continuous environments where the number of embedded sets is infinite. The number of embedded sets with respect to the number of discretized points in the primary domain and the primary membership points are depicted in Fig. 5.One of the well-known type reduction methods designed for dealing with IT2 FSs is Karnik–Mendel (KM) algorithm [8–11]. Philosophy of this approach lies in the fact that the exact defuzzified value of an IT2 FS cannot be computed directly but it can be reduced to a T1 FS whose left and right endpoints can be obtained. This method initiates with a simple average value in order to find the initial switch point between the upper and the lower membership values. Then, two different algorithms are proposed for computing the left and right endpoints. The first step of both algorithms is the same, e.g., finding and initial solution through a simple averaging. Then, through an iterative procedure, endpoints of the resulting T1 interval are obtained. The KM algorithms are known to converge monotonically and superexponentially fast [17,18]; however, several iterations are needed before convergence. In this regard, Wu and Mendel [12,13] have provided an enhanced version of the KM algorithms called enhanced KM (EKM) algorithms. The main goal of the EKM approach is to reduce the number of iterations before convergence occurs. The framework of the both KM and EKM algorithms are the same and the difference between their performances relies on finding the initial switch point. Against the KM algorithms, the EKM algorithms do not begin by a simple averaging for finding the initial switch point. Wu and Mendel show that if the primary domain is discretized into N points then arranged in an ascending order, the left (right) switch points will be located somewhere less than a primary value of the order N/2.4 (N/1.6). Based on extensive simulations, they show that the EKM algorithms can save about two iterations which corresponds to more than a 39% reduction in computation time.In this regard, Melgarejo and Duran [14] have provided two hardware architectural proposals for the EKM algorithms. In the first proposal, sequential online arithmetic has been used where the second one includes operators based on the CORDIC (Coordinated Rotation Digital Computer) algorithm. These architectures consist of three units including: data path, control unit, and memory. The inputs to the system are the FOU, UMF and LMF and centroid endpoints are the system outputs. The authors conclude that in the case of the EKM algorithm, implementing the CORDIC arithmetic proposal has better performance rather than using online arithmetic from speed and accuracy point of views.The KM algorithms have also been investigated in continuous spaces [19,20]. In these papers, it has been proved that in continuous spaces left and right endpoints of the type-reduced IT2 FSs is equivalent to the switch points. This is a useful property which has been utilized in [15]. In this regard, Liu and Mendel prove that the centroid computation of an IT2 FS using the original KM algorithms is equivalent to the Newton–Raphson method in root finding. They show that when discretization steps become smaller, accuracy of the KM algorithms improves. Equivalently, it has been demonstrated that when derivative steps becomes smaller accuracy of the Newton–Raphson also improves. Despite weakness of the KM algorithms in finding the exact centroid value of an IT2 FSs, connect KM (CKM) algorithms result in exact optimal values of the centroids. However, CKM algorithms cannot deal with problems where primary domain values are not naturally ordered and have to be re-ordered, e.g., interval weighted average, fuzzy weighted average, linguistic weighted average, and generalized centroid.Liu et al. [16] have provided a fast iterative version of the KM algorithms. In that research, instead of presenting computational efficiency improvement or uncertainty bound methods, new iteration formulas are proposed to accelerate the convergence speed of the KM/EKM algorithms from quadratic to cubic. Liu et al. have shown that if the EKM initialization is applied, their approach can result in very close values to the exact centroid values (with relative error of 3%) so that their algorithms can be regarded as an exact approach.One of alternative approaches for dealing with IT2 FSs has been provided by Nie and Tan [21]. Unlike the KM algorithm which based on the wavy-slice representation, as discussed in the previous section, the Nie–Tan (NT) algorithm has been developed using the vertical-slice representation. NT algorithm has some advantages over the KM algorithms including: (1) in this approach, the output of the type-reducer can be expressed in closed form, thereby providing an efficient tool for theoretical analysis of IT2 FLSs; and (2) lower computational complexity compared to the KM/EKM algorithms and approaches implementing uncertainty bounds. In fact, the main idea behind the NT algorithm is to reduce the order of an IT2 FS by using vertical slices. Because of the lower computational costs of the NT approach, it may be useful for real-time or embedded applications and can be an appropriate substitute to the KM/EKM algorithms.In [22], Mendel and Liu present the first closed-form solution for KM+defuzzification. This approach is actually a Taylor-series approximation whose first term is the Nie–Tan (NT) formula and its second term is a correction to it. It should be noted that the second term is actually the third-order term in the Taylor series. The authors after some numerical examples state that the proposed algorithm leads to more accurate results.In order to enhance running speed of the KM algorithm, Melgarejo [28] has proposed a fast recursive type reduction method based on the principles of the KM algorithm. In this approach, formal equation for finding the left and right centroid endpoints used by the KM algorithm in discrete space has minor changes so that makes this approach an optimization approach without searching the switch points (as the KM algorithm does). Computational experiments performed in this paper shows higher speed over the KM algorithm. However, this approach has an evident problem since it does not have a termination condition when the left or right endpoints of the type-reduced set are reached. Hence, the recursive algorithm has to scan the entire universe of possible solutions for the presented relations in [28] in order to find the optimal points. To tackle such drawback, Duran et al. [29] proposed a novel recursive approach called iterative algorithm with stop condition (IASCO). The main difference between the IASCO and the approach in [28] lies in having a termination criterion which is the number of total iterations the algorithm can operate. Computational experiments demonstrate an outstanding result for this algorithm.An alternative approach for representation and reasoning with IT2 FSs is called geometric interval type-2 fuzzy logic. In fact, a geometric fuzzy sets is represented by an ordered collection of vertices called a polyline over a continuous domain. These vertices are then sorted in an ascending order based on their x coordinate. The y-coordinate denotes the membership value of the considered FS. Indeed, geometric fuzzy logic involves replacing the discrete computational model of fuzzy sets with a continuous computational model based on geometric primitives. In such fuzzy sets, the entire operations are geometric manipulations of the primitives that make up the geometric fuzzy sets. Based on this definition, Coupland and John [24] have introduced the geometric IT2 FSs. Then they have provided geometric operators such as OR and AND between IT2 FSs. At the end, they have used a simple defuzzification procedure called center-of-area for finding the centroid of an aggregated consequence of an IT2 FLS.In another study by Coupland and John [25], they have defined a novel direct defuzzifier for T2 FLSs. Their method is based upon the sampling technique and they have experimentally proved that increasing the number of samples and level of discretization may reduce or even eliminate the noise. This direct defuzzification method has been evaluated under the minimum and product t-norms. The authors report that the results under minimum t-norm are satisfactory while the developed method shows some strange characteristics under the product t-norm. In [25], in order to compare the developed IT2 FLS with T1 FLSs, a non-stationary IT2 FLS based on the developed direct defuzzifier was constructed and it was proved that under the minimum t-norm a much smoother surface was obtained than any other system being considered.As noted before, geometric T2 FSs are easy to implement with less computational efforts. Based on this idea, Coupland [26] proposed a geometric-based type reduction method for GT2 FSs. In this approach, membership function of a GT2 FS is considered as a collection of points in 3-dimensional space. This method is broken into two stages:•Modeling the area encompassed by the points with geometric primitives.Calculating the center of this area to give a centroid value for the membership function.In [26], convexity of the primary membership function is mandatory but it is not necessary for the secondary membership functions. Coupland reports that his method generally consists of covering the 3-dimentional space of GT2 membership function using 2-dimentional triangles. These triangles are then used to compute the area encompassed by the GT2 membership function. Regarding complexity issues, this method is so simple to implement and against other methods there is no need to perform iterative defuzzification operations and the final crisp value can be obtained directly. Fig. 6represents a sample of a geometric GT2 FS represented by the method prepared in [26].Based on the approach in [26], Coupland and John [27] represented a fast geometric type reduction procedure which is claimed to be 200,000 times faster that its iterative counterparts. For more investigation on accuracy of this method, it was implemented on a mobile robot navigator that used geometric defuzzifier. This controller had to navigate a real robot around a curved obstacle constructed from wood. The fuzzy logic controller was designed to navigate a mobile robot around a curved edge obstacle maintaining a distance of 0.5m between the center of the robot and the obstacle all the times. In this experiment, the fuzzy logic controller was a Mamdani style FIS employing minimum and maximum t-norms and t-conorms and the geometric defuzzifier was used to compute the final system output from the output T2 FS. Numerous experiments revealed that the geometric defuzzifier outperforms both T1 Mamdani FLC and IT2 FLC.One interesting approach for finding the centroid of an IT2 FS is to convert an IT2 FS into its corresponding T1 FS which is assumed to have the same crisp value as the centroid f IT2 FS. This method is called the collapsing method [30]. In the collapsing method, first, the primary domain is discretized into predetermined parts. Then, starting from the first primary domain value, it is assumed that the centroid of the IT2 FS is the same with a T1 FS whose membership values are the same as the upper membership values of the IT2 FS except the membership of the first primary domain value. Based on this idea, the IT2 FS iteratively collapses into a T1 FS which has an equivalent centroid. Greenfield et al. discuss characteristics of this approach with other well-known methods such as KM/EKM algorithms and show that collapsing method can be an appropriate alternative in order to perform direct defuzzification of IT2 FSs.Today, with extension of theoretical studies on T2 fuzzy logic, to the best of our knowledge, no comprehensive comparison on various aspects of T2 FSs has been made. The existing studies in this regards are scarce. For example, Greenfield and Chiclana [31] have addressed the challenge of the efficiency and accuracy in defuzzification of IT2 FSs. They have surveyed four alternative strategies for defuzzification including: (1) KM procedure, (2) Wu–Mendel approximation, (3) the collapsing defuzzifier, and (4) the Nie–Tan method. They have evaluated these methods using six representative test sets with diverse characteristics. From accuracy point of view, ranking of these four approaches is: (1) the collapsing defuzzifier, (2) the Nie–Tan method, (3) the KM procedure, and (4) the Wu–Mendel approximation. It is also reported that there was no evidence of a significant difference between the accuracy of the collapsing and Nie–Tan methods, and between that of KM procedure and the Wu–Mendel approximation but there was evidences that the collapsing and Nie–Tan methods are more accurate that the other ones. From computational complexity view, the Nie–Tan method was the least complex method while KM algorithm in the highest complexity condition was the last approach. In another comparison paper, Wu and Nie [32] have prepared a comparative study among KM, EKM, and IASCO methods and finally conclude that the EKM algorithm is faster and more precise. Greenfield et al. [39] have surveyed several type-reduction algorithms including exhaustive enumeration, KM, Nie–Tan algorithm, and the collapsing procedure. Then, they have investigated the effects of discretization level on accuracy of the mentioned methods. They conclude that the collapsing algorithm gives more accurate results than the Nie–Tan method. They also prove that the discretization level directly influences accuracy and precision of all these algorithms which work in the discrete spaces.So far, most of the papers which are surveyed can deal with any kind of IT2 FSs. But there can be found some approaches in the literature which concentrate on special forms of IT2 FSs. Of which, Refs. [33–35] can be considered. Refs. [33,34] consider piecewise linear IT2 FSs whose bandwidth is constant while having linear upper and lower membership functions. This constant width provides a way to compute the centroid of an IT2 FS in closed-form using derivative-based optimization without any need of iterations. This approach gives an optimal exact result for IT2 FSs where FOU are originally constant width, otherwise, an enhancement can be performed in order to minimize the error between the accurate and the obtained centroids. Moreover, proposing analytical formulas based on geometry has eliminated the need of using discretization of the primary domain. These approaches have been tested on seven sample datasets and are compared with EKM algorithm and their capabilities are proved. Another kind of IT2 FSs is LR T2 FSs. The same authors have also observed the defuzzification issue from control view in FLSs. Against most of the existing methods which compute the final output of a fuzzy controller through averaging the endpoints of the type-reduced sets, Ulu et al. [37] utilize linear combination of these endpoints as the output of fuzzy controller. Such approach plays an important role in reducing the errors a fuzzy controller may encounter. Chen et al. [35] have tried to derive a theorem and to propose a heuristic algorithm which can fast and accurately identify the minimum and maximum switch points of a piecewise smooth IT2 FS if both upper and lower membership functions are parameterized as LR fuzzy sets. After then, type-reduction process can be simplified to solve a closed-form expression of the switch points. LR IT2 FSs in this paper are formed based on the Dubois and Prade's notation [36].The last type reduction method for IT2 FSs is based upon α-cuts [38]. In this approach, each IT2 FSs has been decomposed into several α-cuts and centroids of α-cuts are then aggregated in order to find the final defuzzified value of an IT2 FS. Although this method seems to be fast but it is not competitive enough in accuracy and precision.Type reduction process through iterative algorithms are almost time consuming. This is why several research teams are working to tackle such drawback. One alternative approach presented for the first time by Wu and Mendel [40] is called uncertainty bounds. Against most approaches presented so far, uncertainty bounds try to estimate uncertainty intervals corresponding to IT2 FSs and do not lead to the exact type-reduced values. However, they are much faster than their iterative counterparts. In [40], the authors derive inner and outer bound sets for the type-reduced set of an IT2 FLS. This derivation is based on a new mathematical interpretation of the KM procedure. Such uncertainty bounds not only can be used as an ordinary type reduction method for IT2 FSs but also can be utilized for designing IT2 FLSs. According to several simulation experiments conducted by the authors, the authors have demonstrated that the uncertainty bounds can be an appropriate substitute to the iterative type-reduction algorithms and can relieve the computation burden of an IT2 FLS during its operation. Wu and Mendel have also shown that they have to incorporate the difference between the defuzzified outputs of the type-reduced set and its approximation set and its upper bound into the design of an IT2 FLS so that the resulting system can be used during real-time applications. They have also showed that IT2 FLSs can operate using the concept of uncertainty bounds without a need to have a type-reducer module. Using uncertainty bounds, Lynch and Hagras [41] have presented an embedded real-time T2 neuro-fuzzy controller (RT2NFC) for controlling the speed of marine diesel engines. Since such engines operate in highly dynamic and uncertain environments then T2 FL implementation makes sense. In order to avoid the computational overhead associated with the system, Lynch and Hagras have used the Wu–Mendel uncertainty bounds approximation. After performing numerous experiments on a real diesel engine testing platform, it was shown that under no or small levels of uncertainties the same performance as the controller using KM algorithm was recorded for the proposed approach. However, the KM-using controller had problems when the number of firing rules, and consequently the number of membership functions, increases. Also the RT2NFC had significant faster computational times than its competitor in these tests.To increment computational speed of the Wu–Mendel uncertainty bounds approximation, Fazel Zarandi et al. [42,69] present a new indirect approach to T2 FLSs based on a novel view to the concept of uncertainty bounds. In [40], endpoints of the type reduced set is computed through a simple average of the upper and lower bounds of the aggregated fired rules but in [42], the authors propose a weighted summation of these endpoints to increase the system accuracy. On the other hand, since when using uncertainty bounds, some accuracy is lost, the authors had provided a model for fuzzy systems output processing module in the form of a linear combination of left and right aggregated values of the fired fuzzy rules. This approach has then been implemented in a steel desulphurization process and its computed results have been compared to many similar approaches. The authors conclude that for cases where the training samples are rare, their method performs than any other methods such as neural networks, ANFIS [43], DENFIS [44], and T1 FLSs.The newest work on the uncertainty bounds is reported in [45]. In this paper, the authors have provided two enhanced versions for the KM algorithm and Wu–Mendel uncertainty bounds procedure. Such enhancement includes pre-computation of the main operations and initialization based on the concept of uncertainty bounds. Extensive numerical analysis in this study reveals that these new algorithms can achieve computation time reductions with respect to the EKM algorithm ranging from 40% to 70%.With the advent of new representation methods such as α-planes and z-slices, the way was flattened for more efficient type-reduction methods for GT2 FSs. Theory and applications of α-planes has been thoroughly discussed in [46]. One of the very first type reduction methods developed for GT2 FSs has been presented by Liu [4]. This type-reduction strategy decomposes a GT2 FSs into several planes. Each plane in this approach is actually an IT2 FS itself. Therefore, any computational approach developed basically for IT2 FSs can be implemented on these planes. Liu uses KM algorithm on each plane and then aggregates these type-reduced sets and obtains the final T1 type-reduces set. In order to calculate the final crisp value as the defuzzified representative of the GT2 FS, he defuzzifies the computed T1 FS. Although Liu's method is of high complexity but it has opened new ways for more investigations on the concept of α-planes both in theory and application. α-Planes play the main role in many research studies available including [47–51].In this regards, Zhai and Mendel [3] have presented a new type-reduction algorithm called centroid flow (CF) algorithm. This paper presents several novelties on geometric properties of GT2 FSs and their influences on the quality of type-reduction processes. Zhai and Mendel have extracted the mutual relation between consecutive α-planes and call these relations as ‘connection equations’. Based on these equations, one can directly compute the upper and lower bounds of the previous and next α-planes, directly. The CF algorithm begins with finding the centroid of the lowest α-plane using KM/EKM algorithms. Then, using the connection equations, the difference between the left and right endpoints of the current α-plane and the next α-plane is computed. Finding centroid endpoints of each α-plane continues until the entire centroid endpoints for each α-plane is computed. In the CF algorithm, iterative procedures such as KM and EKM need to be used once for the lowest α-plane. After then, these centroids automatically flow upwards. Extensive computations in these studies approve increased speed presented by the CF algorithm against other methods such as the Liu's work. It is shown that the CF algorithm reduces the computation time by 75–80% and 50–75% compared with KM and EKM algorithms, respectively. The CF algorithm suffers from two issues: (1) KM/EKM algorithm have to be implemented only on the lowest α-plane; (2) the CF approximation errors will gradually accumulate as the algorithm flows upwards. To modify the CF algorithm, Zhai and Mendel [50,51] proposed the enhanced version of CF algorithm called enhanced CF (ECF) algorithm. In ECF, instead of allowing the approximation errors to accumulate from the bottom α-level all the way up to the top α-level, the ECF begins at the middle α-level and then flows both upward to the top α-level and downward to the lowest α-level. With this, the original set of α-level centroids are partitioned into two independent subsets. The accumulative errors in each subset are half of their counterparts in the original set, because the results in each subset only propagate through half the number of α-levels as in the CF algorithm. Zhai and Mendel conclude that the ECF algorithm is faster and more accurate than its predecessor CF. In [2], Linda and Manic have discussed the monotonicity property of the secondary membership functions of GT2 FSs. This approach entitled ‘Monotone CF’ (MCF) is much faster than the CF and can begin from any α-level without any loss of generality. They provide four advantages of the MCF over the CF algorithm including: (1) computing numerically identical centroids as the KM procedures, unlike the approximated centroids obtained with the CF algorithm, (2) faster implementation than the CF algorithm, (3) easy to implement without needs to compute the derivatives of the centroids, and (4) completely eliminating the need to apply the KM procedure to any α-level of the GT2 FS.To compute the centroid of a GT2 FS more efficiently, Yeh et al. [47] proposed an algorithm that utilizes the heuristic that the centroids which are obtained by the KM/EKM algorithms for the current α-level can better initialize the KM/EKM algorithm for the next α-level. Their method reduces the number of iterations needed by the KM/EKM algorithms to converge at each α-level and therefore, speeds up the overall computation; however, there is no way to know, ahead of time, how close the results of the current α-level are to the results of the next α-level. Therefore, there is no way to know how many iterations can be reduced. In other words, their method is still heavily depended to the KM/EKM algorithms and it cannot be completely freed of their time-consuming iterative feature. At the end, Yeh et al. test their algorithm on a large number of examples and show that two or more rounds of computations are still needed at each α-level.Wu et al. [48] have also worked on type-reduction of GT2 FSs and have provided some properties of switch points in the KM/EKM algorithms. Based on these properties, they have improved the Liu's method in order to speed up the type-reduction process presented by Liu. Unfortunately, they have made comparisons only with Liu's strategy and its capabilities has not been measured versus other powerful approaches.Recently, based on the concept of α-planes, Doostparast and Fazel Zarandi [57] have provided two fast approaches on GT2 FSs. Their first approach called hierarchical collapsing (HC) method applies the collapsing procedure on the lowest α-level. Then, extracting mathematical and geometrical relations among α-planes, they provide direct relations that can hierarchically compute centroid endpoints of each α-planes without a need to extensive iterative computations. In their second approach [58], they introduce a method called constrained switching (CS) algorithm which tries to confine the search space on each α-plane in order to reduce the required number of iterations to reach the centroid endpoints on each α-level. They have showed that the CS algorithm considerably reduces the number of iterations and the total computational time.In a comparative study on α-planes, Greenfield and Chiclana [49] have compared three widespread methods originally developed for IT2 FSs if they are implemented on α-planes of GT2 FSs. They want to know which of the KM, Nie–Tan, and collapsing methods perform better when applied to α-planes. They have considered three issues to make a comparison: (1) convergence iterations, (2) accuracy, and (3) defuzzification times. In all these compared methods, the defuzzified values tend to oscillate before converging. In each case, the value they appear to converge to is just different from the exhaustive defuzzified value. In the second comparison criterion, the collapsing method was the first and the KM and Nie–Tan methods were second and third, respectively. Finally, Nie–Tan algorithm is the fastest and the collapsing method is the second one while the KM algorithm is the slowest among them.As discussed in the previous sections, z-slices are a similar approach to α-planes as a representation technique of GT2 FSs. Using this concept, Wagner and Hagras [52] have developed the theoretical framework of z-slice based GT2 FLSs and to prove its characteristics, they have implemented it on a two-wheeled mobile robot. A schematic view of a GT2 FS represented by its z-slices is depicted in Fig. 7.In less than a year, Zhai and Mendel [53] show that z-slices and α-plane representations are in essence equivalent and prove that reasoning based on both these representation techniques actually leads to a common results.In addition to various representation methods mentioned before, in [54,55] an intuitive and easy to implement approach based on sampling methods have been proposed. In these studies, the entire domain of the FOU of a GT2 FSs is first discretized into several blocks (grids). Then, predetermined number of discrete embedded sets are randomly chosen from these blocks. After all, using a simple t-norm operator, the final defuzzified value of GT2 FS is computed. They also show that the sampling method outperforms iterative procedures from accuracy and speed aspects. In Fig. 8, two sample embedded sets of a GT2 FS is depicted. Greenfield and Chiclana [56] have also improved the sampling method and call it elite sampling procedure. In this method, each domain value is associated with only one membership grade which is the maximum secondary grade available to the domain value but in ordinary sampling method any given domain value can be associated with more than one secondary grade. They have also made a comprehensive test for comparing the behavior of the most well-known and widespread type-reduction methods including: Liu's approach [4], collapsing method [30], sampling method [54,55], elite sampling technique, Nie–Tan approach [21], and vertical slice centroid type reduction (VSCTR) [23]. These test aim at investigating the accuracy of the five mentioned approaches when the number of samples change. Results of these investigations are reported in Fig. 9. In another comparison, effects of different type-reduction strategies are investigated on accuracy of IT2FLS models [63].

@&#CONCLUSIONS@&#
As an undetachable module of T2 fuzzy computations and reasoning, type-reduction methods play an important role in various fuzzy disciplines including fuzzy logic systems and fuzzy clustering. Importance of type-reduction techniques lies in the fact that they are the main tool for collecting the entire inherent vagueness of the data. Therefore, type-reduction methods form the output of T2 FSs as the representative of the entire uncertainty in a given space. Hence, their accuracy, precision, and performance speed is of much interest. In this paper, a comprehensive review on the concept of type-reduction for both GT2 and IT2 FS was prepared. Moreover, for each approach, its advantages and disadvantages were investigated so that the readers will be able to utilize any of them based on the requirements of the problem to be modeled and solved through T2 FSs. Additionally, several comprehensive comparative tables containing various characteristics of each approach were presented to facilitate future researches.