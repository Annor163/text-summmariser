@&#MAIN-TITLE@&#
A block chaotic image encryption scheme based on self-adaptive modelling

@&#HIGHLIGHTS@&#
Self-adaptive error is added in the initial conditions in every round, of which shows the novelty of this manuscript.A rule is designed to let errors be positive or negative. A new control parameter is generated dependent on errors, it is also self-adaptive.Only diffusion function is applied, but it can reach a high security and less time cost.The keystream depends on the plain-image which can resist efficiently the known-plaintext and chosen-plaintext attacks.UACI (unified average changing intensity) and NPCR (number of pixels change rate) results confirm that the proposed method can reach the ideal effect.

@&#KEYPHRASES@&#
Error,Division,Hyper-chaos,Logistic map,Modular function,

@&#ABSTRACT@&#
In this paper, we suggest a block image encryption algorithm which can give us an efficient scheme to hide and encrypt image data. Only the diffusion function, instead of classical permutation plus diffusion operations, is adopted. The plain-image is firstly divided into two equal parts randomly by vertical, horizontal, or diagonal directions. Then encryption of one part depends on the other part, in which the keystream is generated by the plain-image, i.e., one of the two parts. An error concept is added in the initial conditions in every round. It means that the keystreams are different in the process of encryption steps. The error may be positive or negative decided by a rule of sign function. Experiment results show that the proposed method can provide a high security of cryptosystem, and can reduce the computation redundancy compared with that of the traditional architectures such as Arnold map based method, and totally shuffling based method.

@&#INTRODUCTION@&#
Chaos-based image encryption has been a keen issue in nowadays. On one hand, traditional methods, such as AES and DES, can not be suitable for digital image because of bulk data capacities, high redundancy, and strong correlations among pixels [1]. On the other hand, it is due to the superior properties of security and complexity, for example, nonlinear equation, sensitivity to initial conditions, control parameters, ergodicity, and random-like behaviour, in the chaotic system [2,3]. Therefore, it has been drawn more and more attentions recently using chaos which has been successfully applied to the image encryption algorithm.As early as year 1989, Matthew [4] presented a chaotic encryption algorithm, he derived firstly such a chaotic function, and then showed that it was suitable for cryptography. In [5], Shannon pointed out a classical encryption structure, i.e., the confusion plus diffusion functions, which has been adopted in image encryption algorithms [6–10] till now. For simplicity, Logistics map, Chebyshev map and other one-dimensional chaotic maps are widely employed to produce random sequence. However, we know it is not secure enough if low-dimensional chaos is used only, and it has been proved to be weak under brute-force attack. As a result, hyper-chaos based image encryption scheme is naturally brought into our eyes. For example, Gangadhar and Rao [11] proposed hyper-chaotic key based algorithm using hyper-chaos to enhance the security of CKBA. Gao [12] employed an image total shuffling matrix to shuffle the positions of image pixels, and used a four-dimensional hyper-chaotic system to confuse the relationship between the plain-image and the cipher-image. Some other algorithms [13–19] were also suggested to improve the security.However, the whole permutation-diffusion process should be repeated many rounds to achieve a satisfactory level of security. Permutation based image encryption algorithm has been broken [20] with known-plaintext and chosen-plaintext attack. Additionally, many algorithms [6,8,11,14,21,22] have been found to be insecure in [23–28] respectively. After the security analysis, the main reason is found, i.e., key-dependent problem in the generation of keystream in permutation, or diffusion, or both. However, can we apply the diffusion only to implement the encryption? In this paper, we propose an encryption algorithm using a hyper-chaos system and Logistic map, in which we divide the plain-image into two parts and achieve the diffusion function with modular operation. It can satisfy the rules given by Shannon, i.e., (1) any small value changed in initial conditions should bring us an entirely different cipher-image, (2) a slight change to the plaintext should cause almost all the pixel values modified. We produce keystream according to error concept which is dependent on the plain-image. Here, a rule used to judge the sign of error is constructed at the same time.This paper is organized as follows, double chaotic systems, four methods to divide the plain-image matrix, and error concept are introduced in Section 2. Section 3 lists the steps of the proposed encryption scheme with the encryption and decryption process in detail. The simulation results and performance analyses are shown in Section 4.Finally, Section 5 draws a conclusion for this paper.Logistic map is a famous one-dimensional chaotic system with single control parameter. It has been adopted widely to image encryption due to its simple structure. It is described as following Eq. (1).(1)f(xk)=μxk−1(1−xk−1),k=1,2,3,….where, xk∈(0, 1) is time series while μ is the control parameter, and x0 is the initial value. The parameter μ should be dropped into the field of [3.9,4] to ensure good chaotic properties [9]. Fig. 1(a) shows the chaotic phenomenon of Logistic map.However, using low-dimensional system solely can not guarantee security, since it can be easily broken by brute-force attack actually. Therefore, the study of high-dimensional system is a general trend. Function (2) is a four-dimensional chaotic system named as hyper-chaotic system [12] with four control parameters and four initial conditions.(2)x˙=a(y−x)y˙=−xz+dx+cy−wz˙=xy−bzw˙=x+kHere, a=36, b=3, c=28, d=−16, and k∈[−0.7, 0.7], the system can be in chaotic state (Fig. 1(b–d) display the chaotic attractor). These two systems (1) and (2) are used in the proposed image encryption scheme.To reduce the computation of handling with method pixel-by-pixel, we treat the preprocessed image matrix by blocks. The plain-image of size m×n is shown in Fig. 2. The matrix can be divided into two parts in vertical or horizontal direction [13]. These two parts are decomposed equally according to practical use. Here, we design a new division by diagonal and anti-diagonal lines. In Fig. 2(a) and (b), we use the mid-row and mid-column to depart the image matrix into two parts vertically and horizontally respectively. Fig. 2(c) and (d) shows two parts in upper triangle and lower triangle, of which is divided by diagonal and anti-diagonal line respectively. For simple expression, we take the case of Fig. 2(a) for consideration in this paper. Other cases can be handled under the same structure (see Appendix section).We give the definition of error, relative error, and absolute error in this subsection. Normally two types of error, i.e., absolute error and relative error are studied. The term error is existed in every practical application.Definition 1(error)A discrepancy existed between a computed, estimated, or measured value or condition and that which is true, specified, expected, or theoretically correct, and it can be called as an error with notation ɛ.Definition 2(absolute error)Suppose that y is true value of a quantity, and y0 is observed value of the quantity, then we call ɛaabsolute error of y if,(3)ɛa=y−y0Definition 3(relative error)Relative error ɛris determined by following formula,(4)ɛr=(x−x0)/xwhere, x is true value of a quantity while x0 is observed value of the quantity.Usually, we should remove or reduce the probably potential error in most of the cases to make the value more precisely as possibly as we can, the reason is that the error will influence the final results as we except. On the contrary, in this paper, we introduce error in the hyper-chaotic system (2) to make the keystream dependent on the plain-image. It can avoid chosen-plaintext attack and known-plaintext attack.Without loss of generality, we suppose that the grey plain-image P is in the size of m×n, and adopt the case of Fig. 2(a), i.e., the matrix is divided into vertical blocks, the top one is the upper one P1, and the bottom one is a lower one P2. We assume that the cut-off line is the mid-row of pixels in image matrix. Then, the blocks P1 and P2 are in the size of p×n, where, p=m/2. The upper one P1 is processed firstly.With initial conditions x0, y0, z0, andw0, we can obtain a chaotic sequence if we iterate the system (2) for some rounds and arrange it into a matrix of size p×n. Before that, we insert an error concept here to make a function that a tiny difference in the plain-image can cause a big difference in the cipher-image. In first place, we calculate the sum of lower part P2 as following formula (5).(5)s=Σi,jP2(i,j),i=1,2,…,p,j=1,2,…,n.where, the value of s is in range as following,(6)s∈(0,2088960),ifimageisinsize128×128.(0,8355840),ifimageisinsize256×256.(0,33423360),ifimageisinsize512×512.(0,133693440),ifimageisinsize1024×1024.For satisfying the error property, the value of s should be a small one, for example, we let s fall into field of (−1,1) by formula (7). Here, we suppose the pre-processed image is not bigger than 1024×1024. Of course, we can extend it easily to any size dependent on the practical use.(7)s×10−9Secondly, we design four absolute errors for initial condition x0, y0, z0 andw0. If we denote s as s=α1α2…αt. Errors ɛ1, ɛ2, ɛ3, ɛ4 between −1 and 1 are defined and computed as Equation (8) in our method.(8)ɛ1=±0.α1α2…αtɛ2=±0.α2α3…αtɛ3=±0.α3α4…αtɛ4=±0.α4α5…αtHere, the sign of + and − will be decided by the first number after radix point (see the following (9)). If this number is an even, then we choose negative sign −. Otherwise, we choose positive sign +. We add them into initial conditions x0, y0, z0 andw0respectively as following formula (10) before iterated them into system (2).(9)ɛi=−0.αiαi+1…αt,if(αi)mod2=0+0.αiαi+1…αt,otherwise.(10)x0′=x0+ɛ1y0′=y0+ɛ2z0′=z0+ɛ3w0′=w0+ɛ4Then, we can iterate the hyper-chaos system with updated initial conditionsx0′,y0′,z0′andw0′, and get a chaotic sequence CS with size of 1×pn after throwing some parts of former iteration values. For a higher randomness, the sequence CS is pre-processed [14] by function (11) andCS¯is obtained. However, as the element ofCS¯is in decimal fraction format, we should transform it into scale of 0–255 before being used to the block P1 as Eq. (12) and gainCS˜. Consider the size of P1, we arrange theCS˜into the matrix HS of size p×n by the order from left to right and from top to bottom.(11)CS¯j=CSj×104−⌈CSj×104⌉,j=1,2,3,…,pn.where the function ⌈ρ⌉ rounds ρ to the nearest integer.(12)CS˜j=mod(⌊CS¯j×1014⌋,256),j=1,2,3,…,pn.here, the function ⌊ρ⌋ rounds ρ to the nearest integer less than or equal to ρ, andmod(u,v)returns the remainder after dividing u byv.In following stages, we diffuse the upper block P1 by HS just using the modular function as (13) with control parameter r1. Here r1 is determined by a random chosen number rn as equation (14). So, the parameter r1 is also dependent on the plain-image.(13)P¯1=P1+˙r1×HShere,+˙denotes the modular function.(14)r1=mod(⌊(ɛ1+ɛ2+ɛ3+ɛ4)×105⌋,rn)For another case of lower block P2, the modular function is adopted again as following (15) with control parameter r2. Here r2 is a random chosen number.(15)P¯2=P¯1+˙r2×LS+˙P2here, LS is a chaotic matrix of size p×n got from Logistics map (1) with secret keyx¯0together with function of (12) after throwing some former iterated values to increase the randomness. We use the Logistic map to reduce the computation and avoid employing high-dimensional chaotic system again. Surely, we can change it to any chaotic system if the aim is to enlarge key space. Then, one round of iteration is finished. The cipher-image can be formed in this way withP¯=[P¯1;P¯2]. However, to enhance the security, more than one round of iteration should be considered [9] while three rounds are iterated in this paper.Due to the symmetrical characteristic of the encryption, the process of decryption is similar to the above-mentioned encryption operations, but in a reversed order. With secret keyx¯0, we can get matrix LS. Then the block P2 is recovered by formula (16) from cipher-imageP¯with control parameter r2.(16)P2=P¯2−P¯1−r2×LSWith block P2, we can calculate the error ɛ1, ɛ2, ɛ3 and ɛ4 added into initial conditions x0, y0, z0 andw0respectively. So, the block P1 can be easily got with control parameter r1=mod(⌊(ɛ1+ɛ2+ɛ3+ɛ4)×105⌋, rn) by following Eq. (17). Then the plain-image P is decrypted finally.(17)P1=P¯1−r1×HSIn this subsection, we list the steps of the proposed image encryption scheme according to the analysis above. To enhance the security, from the step 1 to step 6 should be taken no less than one round.Step 1:Read the plain-image with matrix P, and divide it into two blocks P1 and P2 using mid-row.Calculate the s by (5) for block P2 and produce four errors ɛ1, ɛ2, ɛ3, ɛ4 using (8).Update the initial conditions x0, y0, z0 andw0by Eq. (10).Get HS by functions (11) and (12), of which is dependent on the plain-image.Generate LS using function (1) with keyx¯0.Do the modular functions for P1 and P2 with the control parameters rn and r2. Then, the cipher-imageP¯is formed.Matlab 7.0 running on Windows 7 with an Intel(R) Core(TM) i3-2350M, 2.30GHz CPU is used to test the proposed scheme in this paper. A 512×512 8-bit Boat image shown in Fig. 3(a) is chosen randomly as the test image. With initial conditions a=36, b=3, c=28, d=−16, k=0.66, x0=−3.02, y0=11.01, z0=−5.43, andw0=2.44in system (2) while μ=3.96 andx˜0=0.276in system (1), together with double control parameters rn=43 and r2=15, Fig. 3(b) depicts the corresponding cipher-image after applying the proposed encryption method expressed clearly in Section 3.There are seven secret keys in the proposed method, i.e., x0, y0, z0,w0,x¯0, rn, and r2. So, the key space can reach rn×r2×1070 if the precise is set to be 10−14. As we know that, to resist the brute-force attack, the key space should be kept as large as possible. Table 1gives the comparisons of key space with some existing methods. Thus, the results indicate that the size of key space of the proposed algorithm is large enough to resist brute-force attacks.(1)Key sensitivity analysisFig. 3(b) is the cipher-image of Fig. 3(a), but just with 10−14 added in key x0, the cipher-image is then shown in Fig. 3(c). Fig. 3(d) displays the cipher-image when we changex¯0tox¯0+10−14. As to control parameter rn, Fig. 3(e) is the corresponding cipher-image after adding one to the rn. However, we find that there is big difference between Fig. 3(b) and (c), Fig. 3(b) and (d), of which can be explained by Fig. 3(f) and (g) respectively. Furthermore, we can not get the correct plain-image when any changes are made to the secret key. For example, Fig. 3(h) is a wrong decrypted image with keyw0=11.01+10−14. Fig. 3(i) displays the wrong plain-image just with one-bit shifted in r2. Therefore, the system is very sensitive to initial keys. It means that the proposed image encryption algorithm can satisfy the criterion of an ideal cryptosystem.(2)UACI and NPCR analysisUnified average changing intensity (UACI), and number of pixels change rate (NPCR), are the coupled measures to test the sensitivity whether any one-bit pixel change in the plain-image can lead to big difference in the cipher-image. They are defined [15,16] as Eqs. (18) and (19). The test results for randomly chosen images are listed in Tables 2 and 3. All show that the proposed method is acceptable because the results are near the ideal values (no less than 0.995 and 0.334 [15]). So, the system is very sensitive to the plain-image.(18)NPCR=∑ijD(i,j)M×N×100%(19)UACI=1M×N∑i,j|C1(i,j)−C2(i,j)|255×100%where D(i, j)=0 if C1(i, j)=C2(i, j). Otherwise, D(i, j)=1.(1)HistogramHistogram of an image can show the distribution of its pixels. Commonly, a meaningful image should have a regular distribution, in this case, any proposed method should have the ability to make the histogram of the cipher-image be uniform distribution and be completely different from that of the plain-image [29,30]. Or, it will let the attackers to break the cipher-image by statistical analysis. In our scheme, Fig. 4(a) and (b) is the histogram of the plain-image and the cipher-image for Lena image. Thus, we can conclude that the new method does not provide any clue to attackers with useful statistical information.(2)Correlation coefficient analysisBecause the high correlation exists between the adjacent pixels in the plain-image, a good cryptosystem should decrease the correlation coefficient to zero in the cipher-image. We usually take the following formulas (20)[21,22] to calculate the correlation coefficient between two-adjacent pixels for an image. In our proposed image encryption algorithm, randomly 2500 pairs in vertical, horizontal, and diagonal directions from the plain-image and the cipher-image respectively are selected, the test results are given in Table 4for Lena image. From these results, we know that the proposed method can make the cipher-image more safer.(20)rxy=cov(x,y)D(x)D(y)wherecov(x,y)=(1/N)∑i=1N(xi−E(x))(yi−E(y)),D(x)=(1/N)∑i=1N(xi−E(x))2, andE(x)=(1/N)∑i=1Nxi. Here, xiand yirepresent the grey values of two adjacent pixels.For a message source m, its information entropy E can be defined as Eq. (21). Many images are chosen to test with results listed in Table 5. The value can surpass 7.99 compared with the theory value 8. So, we see that the algorithm in this paper can resist effectively entropy attack in practise.(21)E(m)=∑i=02N−1p(mi)log1p(mi)where N is the number of bits to represent a symbol mi∈m while p(mi) represents the probability of symbol mi, and log represents the base 2 logarithm.To reach the real-time communications, the speed for running the whole algorithm is an important factor. In the proposed method, we consider the diffusion only compared with the traditional confusion plus diffusion structure, the time spend on the permutation function is save in our method. The computation complexity is O(8.5n) each round for plain-image length of n in our algorithm. So, obviously, our method is faster than other encryption schemes. Table 6also shows the efficiency of the proposed scheme which is suitable for real-time image encryption in transmission.

@&#CONCLUSIONS@&#
