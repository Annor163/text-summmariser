@&#MAIN-TITLE@&#
Robust route inference and representation for uncertain sensor data

@&#HIGHLIGHTS@&#
We propose DBN based route models and prediction of users’ routes using robust particle filtering.We use a DBN to infer the next locations or destinations based on the observed spatio-temporal data.The robust particle filter handles uncertainty and constraints to enhance accuracy and efficiency.

@&#KEYPHRASES@&#
Robust particle filter,Personal assistant,Spatial–temporal context-aware services,Uncertain sensor data,Dynamic Bayesian network model,Route model,

@&#ABSTRACT@&#
This paper proposes a robust particle filter to deal with incomplete sensor data to predict the user’s routes and represents users’ movements using a dynamic Bayesian network model that patterns the user’s spatiotemporal routine. The proposed particle filter includes robust particle generation to supplement any incorrect and incomplete sensor information, efficient switching/weight functions to reduce computation complexity while considering uncertainty, and resampling to enhance the accuracy of the particles by solving the degeneracy problem. The robust particle filter enhances the accuracy and efficiency with which a user’s routes and destinations are determined.

@&#INTRODUCTION@&#
Personal assistants on smartphones such as Google Now are evolving to spatiotemporal context-aware services by understanding users’ locational situations [1]. The intelligence in the context-aware services depends on the accuracy and efficiency of prediction of the user’s destinations and routes in real-time using sensor data of smartphones. Much research has been conducted on enhancing performance of route inference by dealing with uncertainty of smartphone sensor data, time constraints on real-time processing and resource constraints such as battery life and memory size [2–5]. As a preprocessing step, we snap the original GPS coordinates to nearest streets using a Geographic Information System (GIS) to overcome the inaccuracy of GPS data. In this paper, we define hierarchical concepts of routes and propose Dynamic Bayesian Network (DBN) based representation of route models and prediction of users’ routes using robust particle filtering to consider the uncertainty and constraints. Our route model is represented using probabilistic parameters by snapping points to nearest streets, time and transportation actions such as walking or taking bus. The time sequence has to be considered because route models are used to infer the next locations or destinations of users based on the observed current spatiotemporal information. As an approximated inference, the robust particle filter includes hierarchical samplings using structural and semantic route concepts, particle generations to expand observation space to cover sensor errors, weight computations to consider overall spatiotemporal information, and resampling to alleviate waste of resources from the problem of particle degeneracy. Our proposed particle filter effectively reduces the sampling space by hierarchical sampling with proposed prior distribution and exhibits robustness to errors and relatively short convergence time.This paper is organized as follows. In Section 2, we discuss the information contained in sensor logs and define the concept of routes. In Section 3, we outline how route models are represented based on DBN and its parameters. In Section 4, we discuss our proposed particle filtering method for inferring users’ routes from GPS data. In Section 5, we analyze the efficiency and performance of our method experimentally through simulations and in real environments using smartphones. Finally, in Section 6, we present concluding remarks.A route is defined as the pattern of trajectories that a person follows frequently when moving between places of interest. Each trajectory is a sequence of GPS measurements that are sequentially read on a regular basis by GPS sensors on smartphones [6]. We assume that people in city environments move along streets by foot or vehicles [7]. On the basis of this assumption, we project the GPS measurements onto corresponding streets using geographical information. These projections are used to complement the uncertain GPS data usually generated by sensor errors and to enhance the accuracy and stability of a user’s positions. A user’s trajectories are represented with projected streets instead of GPS measurements (see Fig. 1).When people choose their travel routes, diverse factors other than the streets themselves, such as the time, weekdays/weekends, and their transport actions,2In this paper, actions are walking, jogging, bus, subway, and stay. The actions are identified by the system presented in [8, 9] using accelerometers and sounds. We use only the results of [8, 9] and focus on the representation and inference of user routes.2have an impact on their decisions. Because these various sensing data are required to infer a user’s routes, we log each trajectory with projected streets, time, and transportation actions. We call the log a street observation log, and formally define it as follows:Definition 1Street observation logA street observation log, SL, is a sequence of streets consisting of projected and snapped street si, the projected GPS positions onto si〈lati, loni〉, time hi, and moving action ai. Thus,〈si,lati,loni,hi,ai〉∈SL,SL=〈s1,lat1,lon1,h1,a1〉,…,〈sn,latn,lonn,hn,an〉,h1<h2<⋯,〈hn,|h2-h1|〉=Δh,ai∈{walking,jogging,bus,subway,stay}si=〈gps1,gps2,…,gpsm〉,gpsj=〈latj,lonj〉where sidescribes the GPS data of the features, the start points and end point of the street, and the middle GPS points that sometimes exist according to the porosity of the streets.We frequently use various transportation modes to get to places we wish to visit. For example, in a scenario where we take buses from home to a friend’s home, we first walk from our home to a bus stop, take the bus to the bus stop nearest the friend’s home, and then walk to the destination. The route is usually described as comprising three parts: walking from home to a bus stop, taking the bus between bus stops, and walking from the bus stop to the friend’s home. We define a sequence of streets with the same action information as a trip [2]. The concept of trip helps us to concisely and conceptually describe routes. The trip is defined as follows:Definition 2TripA trip, T, is the section of the street observation log with the same action information on their sensing points.T={t1,t2,…,tn},ti={〈sij,hij,aij〉|aik=ail,hi1<hi2<⋯<hin},hin<h(i+1)1,ai1≠a(i+1)1A route R is a series of trips in which a user moves from a starting place to a destination. A route may comprise a trip or several trips.Definition 3RouteA route, R, is a sequence of trips; consecutive trips on a route have different action information.R={r1,r2,…,rn},ri={〈tij,hij〉|tij·a≠tij+1·a,hi1<hi2<⋯<hin}In this paper, we hierarchically define routes as the top layer of our model, trips as the middle layer, and streets as the bottom layer. The hierarchical relationships are shown in Fig. 2(a).Sensing errors in the GPS devices on smartphones and the time interval of the GPS points to be written create different logs for the same route. Although the snapping from GPS data to streets reduces the disparities resulting from those errors, errors still exist. Fig. 2shows the differences between two trajectories snapped onto streets at two different times on the same route with the same smartphone.The two lines(①,②) in Fig. 2(a), which are connected with consecutive projected GPS points onto adjacent streets, appear similar; however, the sequence of streets shown at the bottom are quite different. The middle of Fig. 2 shows magnified details of a piece of each route, with the rectangles in each picture showing the incorrect streets and missing streets. The difference and inaccuracy by uncertainty of sensor data makes it difficult to search user routine patterns and infer a user’s destination and routes. In this paper, we propose a robust method that infers user’s routes and destinations using uncertain sensor data in real-time environments.In this research, we design the overall system for a personal assistant, which is performed in real-time on smartphones, to implement our proposed model and inference method. Our system consists of four components: a recognizer of sensor data, an inference engine for route prediction, a visualizer to show predicted results, and a blackboard to maintain current states and models. Fig. 3shows the four components comprising our proposed system.First, the recognizer periodically acquires sensor data from a GPS sensor and users’ actions using an audio sensor and an accelerator sensor [8,9]. The recognizer also communicates with a GIS server in order to snap GPS data onto streets. Next, the inference engine predicts the user’s destination and route by continuously performing particle filtering using the model of the user’s spatiotemporal patterns, observation of sensors, and current states. The visualizer then shows the probabilities of top three predicted routes and destinations. The visualizer shows the predicted routes and destinations on maps to make it easy for users to perceive the results and to evaluate the accuracy of the predictions. Finally, the blackboard shares models of the user’s movement patterns and states of other components, and iteratively updates the states of sensors, inferred routes, and data of other intelligent services [10]. Each component communicates with only the blackboard to obtain the data required for processing without considering other components. The blackboard architecture makes it easy to operate and maintain the inference process by making each component operate independently. In this paper, we focus on representing and inferring routes using route models and use the system for evaluating our proposed method.The daily patterns of a user’s movements cannot be understood from only a piece of a situation, it requires sequences of observable states over continuous periods of time. Time is a critical factor in the prediction of a user’s behavior [11]. We use a DBN to represent a user’s route model, to reflect changes in situations over time, and to infer the next locations or destinations based on the observed spatiotemporal information. DBNs, extended models of the existing Bayesian network model, allow the variables in a Bayesian network to be time-dependent, which facilitates the modeling of time sequences. DBNs consist of Bayesian networks which define a prior probability P(Qk) and two-slice temporal Bayesian networks (2TBNs) which define transition probabilities P(Qk|Qk−) from time k−1 to time k. The BN of each time slice comprises the hidden states and observations [12,13]. Hidden states present possibilities that change over time, whereas observations are measured factors that may affect the possibility of hidden states:p(Qk|Qk-1)=∏i=1Np(Qi|Pa(Qi)),Qk=(Xk,Zk)p(Q1=q1,…Qk=qk)=p(q1)·∏k=1Kp(Qk|Qk-1)=p(q1)·∏k=1K∏i=1Np(Qi|Pa(Qi))where the random variable Qkconsists of hidden variables (Z) and observable variables (X) that are observable in the environment, and Pa(Qk) is the parent node Qk, which are both located in the same time or previous time. Fig. 4shows our route model, which is represented as a DBN.The circular nodes represent the variables goal(xgk), route(xrk), trip(xtk), and street(xsk). In the model, we merge the route node and the goal node to lessen computation complexity without information loss because routes include starting places and goal places. The rectangular nodes are observed nodes where the values are measured by smartphone sensors at certain times to represent the temporal variables, i.e., (zmk), day(zdk), and time (ztk), a spatial variable for the GPS coordinates (zgk), and a behavioral variable (zak). Boolean switching functions (fkgr, fkt, fks) are used to improve the efficiency of inference. Based on the continuity of routes, a goal, a trip, and a street at time k are in general the same goal, trip, and street at time k−1. Some measurements captured by the sensors on smartphones, such as GPS and time, are continuous, whereas other measurements, such as days, months, and actions, are discrete. We represent the observed variables as discrete values only. Continuous GPS values are changed into discrete values as streets using a correction function θk, which snaps the GPS readings to the best possible street using geographical information. The continuous times are normalized by placing them into discrete bins (0–23), while the days range from Monday to Sunday.To learn the user route models, an expectation–maximization (EM) algorithm based on DBN is applied; the learning algorithm is described in [14]. In this paper, we focus on the inference using the user route model (see Table 1).The goal of user route inference is to recursively estimate goals, trips, and the current streets of users based on a set of observable measurements, such as GPS, time, day, and action. We use particle filtering to estimate the users’ goals and routes from a series of observationsZ1:kin noisy environments.Particle filtering is a general Monte Carlo method that solves the problems of Bayesian filtering to approximate the filtering density when performing inferences in discrete-time nonlinear non-Gaussian systems [15–18]. The key idea of the particle filter is to represent the posterior distributionp(x0:ki|z1:k)in the state space using a set of random particles with associated weightsw0:kiatx0:kitime k:P(xk|z1:k)=∑i=1Nwkiδ(xk-xki),xk={x0:ki,wki|1⩽i⩽1}wherexkiis a sample that consists of a goal-route pair, a trip, and a street. The samples are drawn from a proposal distributionq(x0:ki|z1:k)instead of a target distributionp(x0:ki|z1:k)because it is difficult to generate samples from the latter [15,19]. The weights are defined by the following importance sampling principle:wki∝p(x0:ki|z1:k)q(x0:ki|z1:k)∝p(zk|xki)p(xki|xk-1)p(x0:k-1i|z1:k-1)q(xki|x0:k-1i,z1:k)q(x0:k-1i|,z1:k-1)=wk-1ip(zk|xki)p(xki|xk-1)q(xki|x0:k-1i,z1:k)=wk-1ip(zk|xki)p(xki|xk-1)q(xki|xk-1i,zk)≈wk-1ip(zk|xki)Based on the first-order Markov assumption, the probability of the state at time k depends only on the state at time k−1, the densityq(xki|xk-1i,zk)is simplified fromq(xki|x0:k-1i,z1:k). By using the sampling importance resampling (SIR) algorithm, the proposal distributionq(xki|xk-1i,zk)is taken to be the transition distribution.As shown in Fig. 3, particle filters perform three steps every time: The first step is particle generation, in which transition probabilityp(xk|xk-1)is used to propagate states after selecting n particles in time k−1. The second step is weight computation, in which the importance of particles is calculated according to likelihoods of observationswk≈p(zk|xk). The third step is resampling, in which the particles with low weights are replaced by particles with higher weights. To deal with incomplete sensor data with time and resources constraints, we enhance each step of the existing particle filter. In this section, we describe the each step of the robust particle filter to consider uncertainty of real-time sensors on smartphones and incompleteness of user models.User route models based on DBNs for user inferences represent relationships of random variables at time k and time k−1; the particles at each time are generated using the transition probability of each state node:xkgr(i),xkt(i)xks(i)∼qxkixk-1gr(i),xk-1t(i)xk-1s(i)Particle xkconsists of a pair of destination and route, a trip and a street. By our definition in Section 2, a route is composed of a sequence of trips and a trip consists of streets. The components of a particle have semantic hierarchical relations and also have structural relations on DBN structures. Particles are generated considering these hierarchical structural and semantic relations.Fig. 5shows an example of particle generation, which explains the state transition from the values 〈school_r1, trip1(walk), street1〉 in time k−1 to the values 〈school_r1, trip2(bus), street6〉 of time k. The switch functions, located between times k and k−1, are fkgr, fktand fks. Each switch function is a decisive function that determines whether state transitions are performed. In case the value of a switch function is on, state transition occurs, whereas if the value is off, the states of the particles are preserved. In Fig. 5, the switch values of fkgr, fkt, and fksassume off, on, and on respectively. xkgr(i)keeps the previous state of 〈school_r1〉. The possible values of xkt(i)are 〈trip1=0.05, trip2=0.8, trip3=0.15〉 by the conditional probability distribution P(xkt|xk-1t=trip1(walk),xk-1s=street1,xk-1gr=school_r1,fkt=on). The value of xkt(i)could be any value in the row, such as trip1, trip2, or trip3, even though the value of trip2 is the highest by random function of multi-nominal distribution. In this example, xktis chosen for trip2(bus). In the same way, xkt(i)is chosen for street6 among values of 〈street1=0.05, street6=0.8, street8=0.15〉 by probability distribution P(xks|xk-1s=street1,xkt=trip2(bus), fks=on). The transited particle at time k is 〈school_route1, trip2(bus), street6〉.GPS sensing errors, sensing interval, and errors in snapping streets sometime make transitions of states impossible for finding conditional probability distributions using the observable values and previous states. The typical two problems are as follows. First, observable streets at time k are in the vicinity of actual correct streets because of sensing or snapping errors. The situations are sometimes not covered by conditional probability distributions of the route model, and lead to false inferences or interrupt the inference process. Second, the sensing interval between times k and k−1 is extremely long, errors are generated in transiting states using the probabilistic distributions by limiting the range of states for a transition. In Fig. 6(a), the observations at time k are not processed from the states of time k−1, because observations are not in the reachable range from states at time k−1. Fig. 6(b) shows an example that combines the problem of long GPS data loss and the problem of vicinity streets.To alleviate the errors in the first cases, we extend the range of state transitions of particles not by considering only the observed street zs, but by considering every street in the threshold of the observed street as possible observations. The set of streets in the threshold is defined as follows:Sk={ski|min(dist(zks,ski)<200m,ski∈S}In this case the observation space is not included in the transited space after a transition, but it is included in the advanced streets of the predicted routes. Multiple transitions are performed sufficiently often to include the streets in the observation space by consecutively transiting from the results of the previous steps. The proposed method enhances accuracy of inference, even though it causes higher computational complexity.In the process of particle generation, choosing a prior distribution for particle initialization is crucial for performance and efficiency. Thus, we consider the subspace of the initial GPS as the prior distribution. The prior probability, considering the semantic relations of routes, trips, and streets using observed starting points by GPS sensors, is described as follows:S0={s0i|min(dist(gps0,s0i)<200m,s0i∈S},T0={t0i|s0j∈t0i,s0j∈S0},GR0={gr0i|t0m∈gr0j,t0m∈T0}where GR0, T0, and S0 respectively represent a set of goal-route pairs, a set of trips, and a set of streets in k=0. S0 is the set of streets within the GPS error (<200m) of the initial GPS observation. T0 is the set of trips that contains the streets in S0 and GR0 is the goal-route set that contains the trips in T0.The initial particles are drawn from subspace 〈GR0, T0, S0〉, which is much smaller than the original space. Hence, we can infer the user’s route from a smaller number of samples (N) and the convergence is comparatively fast. The creditability of the initial GPS observation affects the entire system. To decide on the initial observed position, the initial set of S0 is defined by several initial observations. We have also designed a robust error-correcting system that repeatedly performs particle filtering using continuously changed observed values for cases in which the initial set of S0 is unpredictable.In resource-constrained systems such as smartphones, computation complexity is a critical factor in the inference generation of user routes in real time. In this section, the switching and weighting functions that reduce computation time and enhance efficiency are discussed.In general, particle filtering predicts states by performing particle generation and weight computation in each step. In [2], the switching concept has been applied considering continuity of moving routes. The switching function performs calculations only when there are state transitions, rather than all the time the sensor data are acquired. The existing switching functions do not properly operate in real-world situations in which the streets to be observed are frequently missing. We redesign the switching function by relaxing the switching conditions to enhance robustness on errors.The switching functions fkgr, fkt, fksare associated with a goal-route pair, a trip, and a street respectively, all components of particles. The fksin the street layer returns on when the street value at time k is different from that at time k−1. The fktin the trip layer determines changes in the trips when the end of the trip is reached and returns on. However trips are frequently changed in the real world, even when the street observed at time k−1 is not the final street of the previous tripxk-1t(i). To overcome the problem, we relax the switching conditions. The fktreturns on when the street at time k−1 is located in the second half of the previous tripxk-1t(i)and the observed street at time k is located in the first half of the next trip. The fkgrof a goal-route pair layer returns on when the state of fktis on and trip tkis the last trip component of current route rk.In this paper, we calculate the switching values in a bottom-up manner. The street switching function in the lowest layer is first calculated, the trip switching function is then returned, and finally, the switching function of the goal-route pair is calculated. The bottom-up switching function calculation prevents the dispersion of the problem space associated with the hierarchical top-down method.The weight of a sample is calculated by importance sampling. The weight is represented by the likelihood of the previous weight and the transition probabilitypxk(i)xk-1(i)to be simplified by proposal distributionqxk(i)xk-1(i),zk.wk(i)∝wk-1(i)pzkxk(i)pxk(i)xk-1(i)qxkixk-1i,zk≈wk-1(i)pzkxk(i)=wk-1(i)pzks,zka,zkt,zkd,zkmxkgr(i),xkt(i),xks(i)In our problem, the observationszkis the user’s current streetzkg, actionzka, timezkt, dayzkd, and monthzkm. The posterior probability is simplified by conditional independence of each Bayesian network as follows:Pzks,zka,zkt,zkd,zkmxkgr(i),xkt(i),xks(i)=pzktxkgr(i)·pzkdxkgr(i)·pzkmxkgr(i)·pzka|xkt(i)·dist_funct-1zks,xks(i)·regress_funct-1xks(i),xkgr(i)where dist_funct−1is the reverse function of shortest-distance from the observed GPS reading to the street. regress_func is calculated by performing regression analysis of continuous changes of distances between the predicted goal of the particle and the current street to accelerate user prediction. When advancement is being made toward the destination, the value of weight gets higher. Conversely, when advancement is being made against the destination, the value of the weight gets lower. The only cases that are relevant are those in which the considered predicted destination is in the radius.To calculate how changes in distances progress between the predicted goal of the particle and the current street, we define linear regression using changes in distances over time:Y=α+βX,yi=α+βxi+εi,i=1,2,…,n,yi^=α+βxi,εi=Yi-Yi^,i=1,2,…,nThe regression formula is represented as the linear formula of independence variable X. The parameters α and β are called regression coefficients. β is the slope of the regression line. It indicates the change in the mean of the distance distribution of Y per unit time increase in X. α is the intercept of the regression line, which is the mean of the distribution of Y at time=0. εiis a residual, which is the summation of the differences between the predicted values and the actual observation values. We use the least square method to minimize the value of εito estimate α and β[20].β=∑i=in(xi-x¯)(yi-y¯)∑i=in(xi-x¯)2α=y¯-βx¯Tendencies in the changes in distances are applied to weight calculation and make it faster to understand users’ movement intentions.In particle filters, the degeneracy problem occurs when particles with small weight values are chosen. The problem reduces the overall accuracy by returning larger variances among particles and wastes time and resources by continuously performing calculations of inferences.The effective sample size Neff, which is a measure to understand particle degeneracy, is defined as follows:Neff=1∑i=in(wki)2The smaller is the values of Neff, the larger is the variances. When Neffis lower than a specified threshold, resampling is performed. In this operation, particles with lower weights are removed and the particles with higher weights regenerated. Solving the particle degeneration problem reduces unnecessary calculations [21,22]. To do this, we perform multinomial resampling according to multinomial distribution based on weights.

@&#CONCLUSIONS@&#
