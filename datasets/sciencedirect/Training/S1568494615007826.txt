@&#MAIN-TITLE@&#
Interval-model-based global optimization framework for robust stability and performance of PID controllers

@&#HIGHLIGHTS@&#
Constrained particle swarm optimization algorithm is used to tune the parameters of a robust PID controller.The design is oriented towards robust control performance and robust stability.Various control-performance criteria can be easily implemented.Robust stability within the intervals of the uncertain parameters is ensured.Useful, computationally tractable and efficient framework based on interval models.

@&#KEYPHRASES@&#
Robust PID controller,Parameter tuning,Interval model,Constrained particle swarm optimization,Robust stability and control performance,

@&#ABSTRACT@&#
PID controller structure is regarded as a standard in the control-engineering community and is supported by a vast range of automation hardware. Therefore, PID controllers are widely used in industrial practice. However, the problem of tuning the controller parameters has to be tackled by the control engineer and this is often not dealt with in an optimal way, resulting in poor control performance and even compromised safety. The paper proposes a framework, which involves using an interval model for describing the uncertain or variable dynamics of the process. The framework employs a particle swarm optimization algorithm for obtaining the best performing PID controller with regard to several possible criteria, but at the same time taking into account the complementary sensitivity function constraints, which ensure robustness within the bounds of the uncertain parameters’ intervals. Hence, the presented approach enables a simple, computationally tractable and efficient constrained optimization solution for tuning the parameters of the controller, while considering the eventual gain, pole, zero and time-delay uncertainties defined using an interval model of the controlled process. The results provide good control performance while assuring stability within the prescribed uncertainty constraints. Furthermore, the controller performance is adequate only if the relative system perturbations are considered, as proposed in the paper. The proposed approach has been tested on various examples. The results suggest that it is a useful framework for obtaining adequate controller parameters, which ensure robust stability and favorable control performance of the closed-loop, even when considerable process uncertainties are expected.

@&#INTRODUCTION@&#
Despite recent advances in control theory and several frameworks for advanced control approaches, PID controllers are still widely used in industrial practice. The reason for this is that the PID structure is well-known in the control-engineering community and is supported by a vast variety of automation hardware. PID controllers can be used for a broad range of processes in a simple and relatively robust manner. However, the problem of tuning the controller parameters has to be tackled by the control engineer and this is often not dealt with in an optimal way.In literature, there are several PID tuning strategies and rules that are well known and often used (e.g. [1]). These rules generally allow the engineer to adequately set the PID parameters and achieve a certain degree of control performance and robustness. However, one cannot be certain that the controller is optimally tuned. On one hand, if the parameters are set too conservatively, the control performance will suffer. On the other hand, if the parameters are set too aggressively, the robustness properties are lost and the closed-loop system can even become unstable.Therefore, in order to design a controller for a process with uncertain parameters, it is essential to take these uncertainties into account. In such manner, it can be assured that the controller will put the closed-loop dynamics on the edge of the required robustness properties and thus ensure high control performance in operation. By considering the bounds of the uncertain parameters’ intervals it is possible to derive the required robustness properties by limiting the complementary sensitivity function. If the imposed constraints are not violated, closed-loop stability can be ensured.In the last years, several heuristic-based and partially bio-inspired optimization approaches, such as genetic algorithm, ant colony optimization, particle swarm optimization etc. have been gaining popularity, due to their fast convergence and especially their ability to avoid local extrema and result in the global extremum. Particle swarm optimization (PSO) has been introduced in [2]. Since then, it has been used in many global optimization applications. The basic approach has been modified in many regards. Various techniques for the alleviation of local minima and for detecting multiple minimizers are described in [3]. Furthermore, the paper also presents results on the ability of the PSO in tackling multiobjective, minimax, integer programming and several other approaches. Various advanced multiobjective PSO (MOPSO) algorithms have been presented lately. MOPSO was first introduced in [4]. These algorithms tend to be more effective when dealing with multiobjective optimization. A MOPSO algorithm, where Pareto dominance is used to determine the flight direction of a particle, is presented in [5]. The computational complexity is treated ad reduced in [6]. A review of MOPSO state-of-the-art can be found in [7–9]. Besides some later MOPSO applications (e.g. in the field of grid optimization [10–12]), a survey of applications is presented in [13]. Vector evaluated PSO (VEPSO) is also suitable for multiobjective optimization [14,15,8]. Some promising results have been obtained by involving fuzzy logic in the PSO algorithm [16–18].There are several interesting approaches to PID-type controller tuning in the literature. In [19], a tuning algorithm is presented, which is used to design and tune PI controllers for stable processes with a small dead time while meeting specified gain and phase margins. In [20] a predictive PI controller is used for dead-time dominated linear time-invariant first-order processes. In [21,22], the author graphically computes all feasible gain and phase margin specifications-oriented robust PID controllers for open-loop unstable processes with time delay. Another graphical approach to finding stabilizing parameter sets of PID parameters with regard to gain and phase margins for a class of processes with time-delay is presented in [23]. An approach with internal model control based PID tuning method for 2nd order processes with time delay, again considering gain and phase margins is presented in [24]. A genetic algorithm and bacterial foraging based PID tuning is proposed in [25]. Advanced tuning approaches involving fuzzy controller and iterative tuning with applications are presented in [26–28].PSO algorithms have also been used for PID tuning. Conventionally, in order for the controller to satisfy a specified gain and phase margin specification, the design is carried out graphically by trial-and-error use of Bode plots. The authors in [29] propose a PI controller tuning optimization based on gain and phase margin specifications. The approach uses PSO combined with Hooke Jeeves method in the second stage. An modified PSO for tuning robust PID controllers is presented in [30]. A design approach to PI Controllers based on non-convex optimization of load disturbance rejection is proposed in [31]. A PI controller design for linear systems with parametric uncertainty with respect to sensitivity margin is presented in [32]. A PID controller tuned using PSO is compared to a PID controller tuned using Ziegler–Nichols rule in [33,34]. A modified PSO is used to tune a PID controller in [35], whereas a PID-type fuzzy controller is tuned using PSO in [36].Various methods for tuning PID controllers using PSO have been implemented, but approaches considering the robustness of the solution with regard to parameter uncertainty are rather scarce. The goal of this paper is to present an approach, where a PSO algorithm is used to obtain the best performing robust PID controller. Several performance criteria can be considered by including them in the fitness function. At the same time, the solution takes into account the frequency-domain based complementary sensitivity function constraints, so as to ensure robustness within the bounds of the uncertain parameters’ intervals. Furthermore, the relative stability requirements are given using the maximum value of sensitivity function as defined in [37,38]. Unlike some other approaches, the considered maximum value of sensitivity function takes into account both gain and phase margins and is thus more appropriate as a relative stability measure.Hence, the presented approach can be regarded as a framework for obtaining a simple, computationally tractable and efficient optimization solution for tuning the parameters of the controller, while considering the gain, pole, zero and time-delay uncertainty of the controlled process. The goal is to derive a robust PID controller that provides good control performance while assuring robust stability within the prescribed uncertainty constraints that affect the robustness of the closed-loop system. From the a priori estimations of the uncertainties of the process, the presented approach ensures that robust stability constraints are not violated. Therefore, it provides good control performance and at the same time robustly safe closed-loop operation, even when dealing with relatively complex uncertain process dynamics.The paper is structured as follows. In Section 2, the problem is introduced and the basic preliminaries are given. The idea behind the representing system that is used in the optimization is proposed. Gain, delay, zero and pole uncertainties are treated and a simple illustrative example is shown. In Section 3, the controller design is dealt with. The PSO algorithm mechanism is explained and the particular features used in the approach are pointed out. Using the simple illustrative example, an appropriate PID controller is derived and the closed-loop properties are analyzed. Section 4 presents a three tanks system case study. A nonlinear mathematical model of the system is derived and linearized for a general operating point. The proposed PSO approach is used to tune the PID controller parameters and the closed-loop behavior is analyzed. Finally, the controller is tested on the nonlinear plant. The results show that the controller performance is adequate only when the relative system perturbations are considered as proposed in the paper. The framework is discussed with regard to its repeatability and convergence properties. In Section 5, another case study is treated. The considered system is a batch reactor used in medicine production by a pharmaceutical company in Slovenia. The closed-loop results are shown and the repeatability and convergence properties are discussed. The results further support the usability of the proposed framework. Section 6 gives some concluding remarks. In Appendix A, the pseudo code of the PSO algorithm is presented and in Appendix B, the derivation of the representing system parameters is explained.Consider a process with a known structure and several uncertain process parameters that lie in a known bounded interval. The goal is to design a suitable PID controller that will ensure adequate stability properties and at the same time fast operation for any of the process varieties within the boundaries.Assume the system is formulated in the factorized form, as shown in Eq. (1).(1)GP(s)=KDC·∏j=1m1+sbj∏i=1n1+sai·e−τsIn Eq. (1), KDCis the process gain, τ stands for the delay, −bj(where j∈{1, …, m}) denote the process zeros and −ai(where i∈{1, …, n}) are the process poles.When dealing with such processes, the actual uncertainties in the process parameters that eventually influence closed-loop behavior have to be taken into account. When the controller is tuned for good control performance for one particular variation of the uncertain process, as it is often the case in industrial practice, it cannot be ensured that the control performance will still remain adequate when a particular uncertain process-parameter changes its value. Furthermore, it is also possible that the closed-loop eventually becomes unstable when that controller is used.If there is one uncertain process-parameter with known boundaries, the most obvious control-design approach would be to derive two bounding systems that consider the minimum and the maximum value of the uncertain parameter, respectively. The controller would then be designed and tuned by taking into account both extreme cases, assuming that the actual process’ dynamics lie somewhere in between. However, if there are n uncertain process parameters with known boundaries, 2nbounding systems need to be considered. Therefore, the number of bounding systems can easily become quite high and it is at least unpractical to tune the controller by taking into account the whole set of the bounding systems.The goal is to derive the parameters of the controller using PSO [2]. In the proposed approach the optimization is run only once. In order to be able to do that, the representing process used for the optimization must be derived and robustness of the solution according to the process-parameter uncertainties must be ensured.Before going into further design steps, it is sensible to transform the problem of dealing with the system with uncertain parameters to a system without any uncertainties, which nevertheless best represents the original system with uncertain parameters. The representing system is then used in the PSO algorithm in order to obtain the optimal controller parameters.Let us take into account the robust stability properties expressed in Eq. (2).(2)ΔGP(jω)GP(jω)≤1T(jω)Here, GP(jω) is the original system, ΔGP(jω) stands for the system perturbation11In this case, the perturbations are considered as a consequence of uncertain parameters.and T(jω) is the complementary sensitivity function – see Eq. (3). The maximum value of the complementary sensitive function is denoted as Mt– see Eq. (4). However, a more general solution can be obtained by limiting the maximum value of the complementary sensitive function depending on the frequency. Thus, from Eq. (2), it is possible to derive the robustness requirement as given in Eq. (5).(3)T(jω)=GP(jω)·GR(jω)1+GP(jω)·GR(jω)(4)Mt=maxω|T(jω)|(5)|T(jω)|≤Tmax(ω);Tmax(ω)=1ΔGP(jω)GP(jω)Here, GR(jω) stands for the controller.The closed-loop system will remain stable for system perturbations ΔGP(or for that matter relative system perturbationsΔGPGP) that comply with Eq. (2).Hence, in order to relieve the stability constraints with regard to the admissible complementary sensitivity function, it is vital to derive such representing system GP0(jω) so that the relative system perturbationsΔGP0GP0due to the uncertain parameters are the smallest possible for even the worst case scenario.Therefore, four possible types of system perturbations due to uncertain parameters are considered and each of them is analyzed separately:•gain uncertainty,delay uncertainty,zero uncertainty,pole uncertainty.In this case, the gain of the system is assumed to be uncertain (parameter KDCof the system GP(s)), as given in Eq. (6).(6)GP(s)=KDC·GPfix(s)KDC1<KDC<KDC2Here, GPfix(s) represents an arbitrary multiplicatory system with fixed parameters that are assumed not to be affected by any uncertainties. In order to ensure that the relative system perturbations due to the uncertain parameter are as small as possible, the representing system GP0(s) should be defined as given in Eq. (7).(7)GP0(s)=KDC0·GPfix(s)The resulting parameter K0 can be derived as defined in Eq. (8). The proof is given in Appendix B.(8)KDC0=KDC1+KDC22The time-delay of the system is assumed to be uncertain (parameter τ of the system GP(s)), as given in Eq. (9).(9)GP(s)=e−τs·GPfix(s);τ0≤τ≤τmaxGPfix(s) represents an arbitrary multiplicatory system with fixed parameters that are assumed not to be affected by any uncertainties. Assume the representing system GP0(s) is defined as given in Eq. (10) – see Appendix B.(10)GP0(s)=e−τ0s·GPfix(s)In this case, the position of one of the zeros in the transfer function of the system is assumed to be uncertain (parameter −b of the system GP(s)), as given in Eq. (11).(11)GP(s)=1+sb·GPfix(s)b1<b<b2Here, GPfix(s) represents an arbitrary multiplicatory system with fixed parameters that are assumed not to be affected by any uncertainties. In order to ensure that the relative system perturbations due to the uncertain parameter are as small as possible, the representing system GP0(s) should be defined as given in Eq. (12).(12)GP0(s)=1+sb0·GPfix(s)The resulting parameter b0 can be derived as defined in Eq. (13). The proof is given in Appendix B.(13)b0=2b1b2b1+b2The position of one of the poles in the transfer function of the system is assumed to be uncertain (parameter −a of the system GP(s)), as given in Eq. (14).(14)GP(s)=11+sa·GPfix(s)b1<b<b2GPfix(s) represents an arbitrary multiplicatory system with fixed parameters that are assumed not to be affected by any uncertainties. In order to ensure that the relative system perturbations due to the uncertain parameter are as small as possible, the representing system GP0(s) should be defined as given in Eq. (15).(15)GP0(s)=11+sa0·GPfix(s)The resulting parameter a0 can be derived as defined in Eq. (16). The result depends on the most interesting frequency band. The proof is given in Appendix B.(16)a0=a1+a2−a11+ω2+a22ω2+a12This means that a0 lies in the interval bounded by the low-frequency solution (ω→0) and the high-frequency solution (ω→∞) as defined in Eqs. (17)–(19).(17)a0∈[a0|ω=0,a0|ω=∞](18)a0|ω=0=2a1a2a1+a2(19)a0|ω=∞=a1+a22In the illustrative example, a 3rd order process with a variable gain and a variable dominant pole is considered, as shown in Eq. (20).(20)GP(s)=K(s+a)(s+1.5)(s+2);25<K<35,0.8<a<1.2There are 22=4 bounding systems for the illustrative example in Eq. (20). The bounding systems are given in Eq. (21).(21)GP1(s)=25(s+0.8)(s+1.5)(s+2)GP2(s)=35(s+0.8)(s+1.5)(s+2)GP3(s)=25(s+1.2)(s+1.5)(s+2)GP4(s)=35(s+1.2)(s+1.5)(s+2)In the aforementioned case (see Eq. (20)) gain uncertainty and pole uncertainty is dealt with. Therefore, the representing system is derived by taking into account Eqs. (7), (8), (15) and (18). In this manner, the representing transfer function can be formulated as in Eq. (22).(22)GP0(s)=30(s+0.96)(s+1.5)(s+2)Fig. 1depicts the maximum relative system perturbations of the representing system GP0 with regard to GP1, GP2, GP3 and GP4, as defined in Eq. (23). The bold line represents the maximum relative system perturbations perturbation for a given frequency.(23)ΔGP0(jω)GP0(jω)=maxiGPi(jω)−GP0(jω)GP0(jω),wherei=1,2,3,4The transfer function of the PID controller is given in Eq. (24).(24)GR(s)=KP1+1TIs+TDsTfs+1There are four parameters needed to fully define the PID controller in Eq. (24), namely KP, TI, TD, and Tf. The approach tries to alleviate the computational burden of the optimization algorithm by only seeking the optimal parameters KP, TIand TD. The filtering parameter is defined in a standard manner asTf=TD5.In this case, the maximum values of the sensitivity function S (Eq. (26)) and complementary sensitivity function T (Eq. (3)) are considered in order to ensure stability and robustness requirements.According to Eq. (2), the closed-loop system will remain stable for relative process perturbations|ΔGP0(jω)GP0(jω)|that are bounded with regard to the complementary sensitivity function T. Therefore, by knowing the maximum relative process perturbations as depicted in Fig. 1, it is possible to set the constraint for the value of Mt,max, which is defined in Eq. (4), as given in Eq. (25).(25)Mt,max=1maxωΔGP0(jω)GP0(jω)In this case,Mt,max=10.4=2.5. Hence, if this constraint is fulfilled, the closed-loop system will keep its stability properties for the whole range of uncertain systems within the prescribed limit.The stability requirements can be specified using the sensitivity function, or rather its maximum value – see Eqs. (26) and (27).(26)S(jω)=11+GP(jω)·GR(jω)(27)Ms=maxω|S(jω)|The inverse of the maximum value of the sensitivity functiond=1Mscan be graphically interpreted as the minimum distance of the Nyquist diagram from the critical point −1+0j. In this regard, it is a better stability criterion than the classic gain margin gmand the phase margin φm. However, the criteria are connected as given in Eqs. (28) and (29).(28)gm≥MsMs−1(29)φm≥2arcsin12MsAssume gm≈6dB and φm≈30° are required. This means that the solution should aim for Ms,max≈2.The particle swarm optimization (PSO) algorithm is employed in order to find the optimal solution of the problem. A particle represent one of the possible solutions, in this case as defined in Eq. (30).(30)x=TITDKPThe algorithm is initiated using the parameters22Note that the solutions obtained with the proposed framework indicate that the choice of parameters hardly presents a practical problem to the user as long as the suggested values are set: the algorithm yields similar results with various sets of parameter values.in Eq. (31).(31)xminmax=0.0001200.000150.00012vminmax=−5050−5050−55niter=40npart=100ω=0.7c1=1.5c2=1.5Note that the solutions obtained with the proposed framework indicate that the choice of parameters hardly presents a practical problem to the user as long the suggested values are set: the PSO algorithm yields similar results with various sets of parameter values.Here, xminmaxdenotes the minimum and maximum value of particles,vminmaxstands for the minimum and maximum particle velocity. Note that there are as many rows as the dimension of the solution space. niteris the maximum number of iterations, npartdenotes the number of particles, ω is the inertial factor, and c1 and c2 represent the self-cognitive constant and social-component factor, respectively.The aforementioned parameters influence the performance of the PSO algorithm especially from the convergence and efficiency aspects. Despite there are several useful methods for determining the values of the parameters available (see e.g. [39–41]), in this case the choice of proper parameters can be done heuristically, due to the relatively simple optimization task.The minimum and maximum value of particles xminmaxare set so that the expected optimal solutions lie within the boundaries, which is not too difficult for x in Eq. (30). If in doubt, a larger interval can be used. The drawback is that this might require more iterations niterand particles npart, rising the computational complexity. Anyways, when the resulting solution lies very close to the border of the interval xminmax, a wider interval needs to be selected.The minimum and maximum velocity of particlesvminmaxinfluence the convergence rate. If a smaller interval is used, the solution will converge at a slower rate, but the local search around the extremum will be smoother. However, due to the use of inertial factor ω, the algorithm is not so sensitive to the values invminmax.The number of iterations niteand particles npartinfluence the computational complexity. The values were selected by examining the convergence trajectories. Since the task is not computationally critical, a rather large number of iterations niteand particles npartwas used in the algorithm.The inertial factor ω influences how the velocity of a particle in the previous iteration influences the velocity in the next iteration. Thus, low inertial factors are more suitable for local extremum search (exploitation), whereas higher inertial factors favor global extremum search (exploration). The self-cognitive constant and social-component factor c1 and c2 influence the algorithm in of rate of convergence and alleviation of local extrema. In the literature, several benchmark optimization problems are treated and different sets of parameters are proposed. The parameters ω, c1 and c2 are set as suggested in [42] – see Eq. (31).The fitness function for the optimization is defined in Eq. (32). It considers two continuous criteria in Eqs. (33) and (34), and one discrete criterion representing the robustness and stability constraint in Eq. (35).(32)F(GZZ)=−J1(GZZ)−0.1·J2(GZZ)−Jc(GZZ)(33)J1(GZZ)=−fb(GZZ)(34)J2(GZZ)=TST,2%(GZZ)(35)Jc(GZZ)=∞;GZZisunstable⋁Ms(GZZ)>Ms,max⋁Mt(GZZ)>Mt,max0;otherwiseHere, GZZdenotes the closed-loop transfer function, fb(GZZ) is the bandwidth of the closed-loop system, and TST,2%(GZZ) stands for the settling time of the step response of the closed-loop system.A practically usable fitness function can be constructed quite easily. It is however important to include several objectives that are in conflict with each other in the fitness function. This makes the approach related to multiobjective optimization methods. In literature, there are several multiobjective optimization methods that could be implemented in the proposed approach [7–9]. However, in order to keep the algorithm as simple as possible, all the objectives are gathered into one fitness function and the basic PSO algorithm described in Appendix A is used.The simple criterion function enables the use of a simpler algorithm. On one hand, the algorithm could seek e.g. Pareto fronts so as to make the optimization more transparent, but this would make the approach more difficult to implement for an average user. Furthermore, a more advanced global optimization algorithm could also be used to improve the convergence and computational complexity aspects. However, that could also make the approach more complicated and further research is needed to support the potential advantages in this regard.The criteria in Eqs. (33) and (34) can be pondered arbitrarily. Changing the ponder values affects the closed-loop behavior, however they can be set in a relatively simple manner. The criteria J1, J2 and Jchave several different purposes in the fitness function:•The continuous criterion J1 in Eq. (33) treats the bandwidth of the closed-loop system, which should be as high as possible. However, this criterion alone would provide a solution with a very high value of KP, resulting in a high bandwidth of the closed-loop system with oscillatory response, rendering a very long settling time.The continuous criterion J2 in Eq. (34) treats the settling time of the step response of the closed-loop system, which should be as short as possible. This criterion counteracts the high-bandwidth requirement by keeping the value of KPlow and thus preventing the unwanted closed-loop oscillations. In this case, the settling time was pondered with regard to the bandwidth heuristically, as shown in Eq. (32). This can easily be achieved by rising the ponder of J2 as much as required to prevent excessive oscillation. It needs to be noted that fine adjustments of the ponder value are not needed as it does not influence the final closed-loop behavior dramatically.The discrete criterion Jcin Eq. (35) treats the robustness and stability and is used for constraining the optimization algorithm. The particles that violate the robustness or stability constraints cannot be considered as a final solution. The appropriate constraints are set by considering the expected parameter uncertainties of the representing system. Therefore, Jcensures safe and robustly stable closed-loop operation within the uncertainties’ limits.The PSO algorithm described above is run in order to obtain a solution that represents the optimal parameters of the PID controller to be used. The solution considers the uncertain parameters, which are constrained with the interval bounds. The goal of the presented framework is thus to provide the best performing PID controller with regard to several possible criteria, but at the same time taking into account the complementary sensitivity function constraints, which ensure robustness within the bounds of uncertain parameters’ intervals.The closed-loop step response for the representing system and all the bounding systems using the optimized controller is shown in Figs. 2 and 3.In order to illustrate the proposed approach for controller design on a realistic system, a three tanks hydraulic system is considered.The system is depicted in Fig. 4. It consists of three containers for liquids. The input of the system represents the voltage u applied to the pump, which induces flow ϕinthat fills the first tank according to Eq. (36), where Kuis a parameter of the pump. The liquid flows from the first tank into the second one with flow ϕ1 according to Eq. (37). Here, K1 denotes the constant of the output pipe in the first tank, and h1 stands for the level of liquid in the first tank. Similarly, the liquid flows from the second tank into the third one with flow ϕ2 according to Eq. (38) and finally out of the third tank according to Eq. (39). Note that the installation involves considerable length of piping between the pump and the first tank and between the tanks, therefore, the actual flow at one point is subject to a considerable time delay with regard to the flow at another point. K2 and K2 denote the constant of the output pipe, and h2 and h3 stand for the level of liquid in the second tank and the third tank, respectively. The output of the system is the level of liquid in the third tank h3.(36)ϕin(t)=Ku·u(t−τ)(37)ϕ1=K1h1(38)ϕ2=K2h2(39)ϕ3=K3h3Note that the time delay is introduced at the input in Eq. (36). The dynamics of the system are given in Eqs. (40)–(42).(40)dh1dt=1S1(ϕin−ϕ1)(41)dh2dt=1S2(ϕ1−ϕ2)(42)dh3dt=1S3(ϕ2−ϕ3)In Eqs. (40)–(42), S1, S2 and S3 represent the surface area of the first, second and third tank, respectively.The proposed system can be linearized at an operating point. Assume it is linearized around the input value of u0. In this case, the variables of the deviation model can be rewritten as in the following equations.(43)u=u0+Δu(44)ϕin=ϕin0+ΔϕinΔϕin(t)=∂ϕin(t)∂u(t−τ)|u=u0·Δu(t−τ)=KuΔu(t−τ)(45)ϕ1=ϕ10+Δϕ1Δϕ1=∂ϕ1∂h1|h1=h10·Δh1=K12h10·Δh1(46)ϕ2=ϕ20+Δϕ2Δϕ2=∂ϕ2∂h2|h2=h20·Δh2=K22h20·Δh2(47)ϕ3=ϕ30+Δϕ3Δϕ3=∂ϕ3∂h3|h3=h30·Δh3=K32h30·Δh3A steady state at the chosen operating point is reached when the inflows and the outflows of all the tanks are equal. Therefore, the following constants for a particular operating point can be derived.(48)ϕin0=ϕ10=ϕ20=ϕ30Ku·u0=K1h10=K2h20=K3h30h10=Ku·u0K12h20=Ku·u0K22h30=Ku·u0K32By taking into account the aforementioned equations and rewriting the linearized system in the state-space form, Eqs. (49) and (50) are obtained.(49)Δh1˙(t)Δh2˙(t)Δh3˙(t)=−K122·S1·Ku·u0,0,0K122·S2·Ku·u0,−K222·S2·Ku·u0,00,K222·S3·Ku·u0,−K322·S3·Ku·u0Δh1(t)Δh2(t)Δh3(t)+KuS100·Δu(t−τ)(50)Δh3(t)=001Δh1(t)Δh2(t)Δh3(t)By converting Eqs. (49) and (50), the transfer function in Eq. (51) and Eqs. (52)–(55) is derived.(51)GP(s)=K(s+a)(s+b)(s+c)·e−sτ(52)K=Ku·K12·K224·S1·S2·S3·(Ku·u0)2(53)a=K122·S1·Ku·u0(54)b=K222·S2·Ku·u0(55)c=K322·S3·Ku·u0The basic parameters of the exemplary system are as follows.(56)S1=S2=S3=π·0.072=15.4·10−3m2K1=1.22·10−3m3/smK2=1.41·10−3m3/smK3=1.00·10−3m3/smKu=0.10·10−3m3/VsThe operating point is assumed to vary between the output value h30,1=7m≤h30≤h30,2=12m. The constant of the output pipe of the third tank varies betweenK32=0.0009m3/sm≤K3≤K31=0.001m3/sm. Furthermore, the delay is limited to τ≤50s. Therefore, gain, poles and delay of the transfer function in Eq. (51) fall within the following boundaries. Hence, 32 bounding systems GPi, where i∈{1, …, 32}, must be considered.(57)1.71·10−6≤K≤2.94·10−61.41·10−2≤a≤1.84·10−21.88·10−2≤b≤2.46·10−20.94·10−2≤c≤1.23·10−2By taking into account Eqs. (7)–(8), (9), (15) and (18), the representing transfer function given in Eq. (58) is derived.(58)GP0(s)=2.33·10−6(s+0.0160)(s+0.0213)(s+0.0106)The bode plot of the representing system GP0 is shown in Fig. 5. The Nyquist diagram of the representing system GP0 and the family of Nyquist diagrams of the extreme cases GPi, where i∈{1, …, 32}, are shown in Fig. 6.Furthermore, Fig. 7depicts the maximum relative system perturbations of the representing system GP0 with regard to GPi, where i∈{1, …, 32}, as defined in Eq. (59).(59)ΔGP0(jω)GP0(jω)=maxiGPi(jω)−GP0(jω)GP0(jω),wherei∈{1,…,32}The particle swarm optimization of controller parameters is carried out as described in Section 3. A particle represent one of the possible solutions, in this case as defined in Eq. (60).(60)x=TITDKPThe algorithm is initiated using the parameters in Eq. (61).(61)xminmax=130013001300vminmax=−33−33−33niter=40npart=100ω=0.7c1=1.5c2=1.5The fitness function is defined in Eqs. (62)–(64).(62)F(GZZ)=−J1(GZZ)−Jc(GZZ)(63)J1(GZZ)=−fb(GZZ)(64)Jc(GZZ)=∞;GZZisunstable⋁Ms(GZZ)>Ms,max⋁|T(GZZ,jω)|>Tmax(ω)0;otherwiseThe optimized parameters are given in Eq. (65).(65)KP=2.82TI=141TD=61.11Tf=12.22The closed-loop step response for the representing system and all the bounding systems using the optimized controller are shown in Figs. 8 and 9. Furthermore, Fig. 10shows the optimized complementary sensitivity function and the constraint imposed by the relative system perturbations. The constraint is not violated, therefore, the closed loop is stable for all bounding systems, although some cases are very close to the stability limit.In order to prove the practical applicability of the proposed approach an experiment on a real nonlinear three tank hydraulic system simulation example was conducted. The reference signal covered the operating range from h3=7 to h3=12. Furthermore, there is an additive input disturbance Δudist=2V applied between t=500s and t=1750s.The closed-loop control performance is analyzed for two cases: first, the expected poor results are shown for the case where the relative system perturbations are not considered in the design phase; next, the case where the relative system perturbations are taken into account as proposed in the paper is shown.In case relative system perturbations are not considered in the design phase, the optimized solution yields a controller that is adequate only for the linearized case of the representing system in one operating point. However, critical closed-loop properties, such as stability, cannot be guaranteed in the whole operating range. The closed-loop response is shown in Fig. 11. The results show that the overall controller performance is not adequate. This was expected, because relative system perturbations have not been considered in the design phase.If the proposed approach is carried out as proposed in the paper, the relative system perturbations are taken into account by constraining the complementary sensitivity function as shown in Fig. 10. In this case, the closed-loop response is shown in Figs. 12 and 13.The results indicate that the reference-trajectory tracking is satisfactory within the whole operating range that defines the robustness requirements.The results suggest that the presented approach can be a useful framework for obtaining controller parameters, even when dealing with relatively complex system dynamics. However, in order to further analyze the proposed approach, especially with regard to its repeatability and convergence properties, the algorithm has been used to solve the task (described in Section 5) 30 times consecutively.For the 30 consecutive solutions, the globally best value of the fitness function FgBestwith regard to the iteration step iter is depicted in Fig. 14. The set of 30 closed-loop step responses is depicted in Figs. 15 and 16.As the optimality of the solution is linked to the formulation of the fitness function, the solution itself – i.e. the controller parameters KP, TIand TD– tend to be slightly dispersed. Hence, the closed-loop step responses of the representing system using the set 30 consecutive solutions are similar, but not exactly equal, as can be seen in Figs. 15 and 16. This has been expected as the solution values are interdependent, yielding similar control performance with respect to the fitness function with different parameter values, therefore, they must be interpreted within the context of the optimization task. That said, the final value of the fitness function FgBest,fin, which actually indicates the convergence and repeatability of the algorithm, seems to reach almost the same value every time (see Fig. 14), with the average value FgBest,fin=0.02029 and very small standard deviation σ(FgBest,fin)=7.7·10−6.The statistics of the consecutive algorithm runs are given in Table 1.The results of the repeated runs lead to the conclusion that the algorithm is capable of reaching the optimal solution with regard to the predefined fitness function.Furthermore, the computational complexity of the approach has been estimated. On a computer running Matlab, the solutions have been obtained in 213s on average. In the worst case, 219s were required, while in the best case, the solution was obtained in 210s. The time required to consecutively carry out the optimization indicates that the computational complexity of the approach is quite predictable and does not vary from one run to another.The proposed approach has been applied on a batch rector example. The case study includes the results of the experiments carried out on model of a real batch reactor. The considered batch reactor is situated in a pharmaceutical company in Slovenia and is used in production of medicines [43].The aim is to control the temperature of the ingredients that are stirred in the core of the batch reactor, where the final product is made. In order to achieve a satisfactory quality of the final product it is vital to ensure that the trajectory of the reference temperature, which is defined in the production recipe, is followed as accurately as possible.The control problem of the batch reactor has been approached in various ways. Several advanced control methods have been considered, such as predictive control based on a reachability analysis [43], predictive control based on a genetic algorithm [44], self-adaptive predictive control with an online local-linear-model identification [45–47] and control using an inverse hybrid fuzzy model [48]. That said, the industrial partners in the company that actually use such batch reactors have been traditionally inclined towards PID controllers and tend to prefer PID over more advanced control methods. In addition, PID controllers can easily be implemented using the existing hardware. However, due to the parameter variability of the plant, the parameter intervals need to be considered, which turns out to be problematic using classic design approaches. In this regard, the proposed framework proves to be very useful.A scheme of the batch reactor is shown in Fig. 17. The reactor's core (temperature T) is heated or cooled through the reactor's water jacket (temperatureTw). The heating medium in the water jacket is a mixture of fresh input water, which enters the reactor through on/off valves, and reflux water. The water is pumped into the water jacket with a constant flow ϕ.The dynamics of the system depend on the physical properties of the batch reactor, i.e. the mass m and the specific heat capacity c of the ingredients in the reactor's core and in the reactor's water jacket (here, the indexwdenotes the water jacket). λ is the thermal conductivity, S is the contact area and T0 is the temperature of the surroundings.Tinstands for the temperature of the fresh input water. TCand THdenote the temperature of the cool and hot fresh input water, respectively. The position of the on/off valves for cool and hot fresh input water are labeled kHand kC, respectively. The position of the mixing valve is denoted by kM.The temperature of the fresh input water Tindepends on two inputs: the position of the on/off valves kHand kC. There are two possible operating modes of the on/off valves. In case kC=1 and kH=0, the input water is cool (Tin=TC=12°C), whereas if kC=0 and kH=1, the input water is hot (Tin=TH=75°C).The ratio of fresh input water to reflux water is controlled by the third input, i.e. by the position of the mixing valve kM.Table 2contains the input signals, Table 3contains the input signals, and Table 4the other physical parameters and quantities related to the batch reactor.Thus, the considered process can be regarded as a multivariable system with two discrete inputs (kC, kH), a continuous input (kM) and two measurable outputs (T andTw). Due to the nature of the system, the time constant of the temperature in the water jacket is obviously much shorter than the time constant of the temperature in the reactor's core. Therefore, the batch reactor is considered as a stiff system.The dynamics of the batch reactor can be described using differential equations, which can be derived from the law of conservation of energy. The heat flows in the batch reactor can be divided as follows.•heat conduction between the reactor's core and the reactor's water jacket;heat conduction between the reactor's water jacket and the surroundings;heat convection due to fresh water inflow in the reactor's water jacket;heat convection due the outflow of water from the reactor's water jacket.For the sake of simplicity, the mathematical submodels for the core and for the water jacket of the batch reactor are treated separately. In this manner, it is possible to split the complex multivariable system representing the batch reactor into two simpler multiple-input-single-output subsystems.The temperature in the reactor's core T is affected only by the heat conduction between the reactor's core and the reactor's water jacket. Furthermore, it is surmised that the heat conduction is proportional to the temperature difference between the reactor's core T and the reactor's water jacket Tw. It is therefore possible to derive a differential equation from the law of conservation of energy for the core of the batch reactor as given in Eq. (66).(66)mcdTdt=λS(Tw−T)The temperature in the reactor water jacket Tw is affected by all of the aforementioned heat flows taking place in the batch reactor. A differential equation is derived from the law of conservation of energy for the water jacket of the batch reactor as given in Eq. (67).(67)mwcwdTwdt=kMϕcwTin+(1−kM)ϕcwTw−ϕcwTw−λS(Tw−T)−λ0S0(Tw−T0)=kMϕcwTin−kMϕcwTw−λS(Tw−T)−λ0S0(Tw−T0)The valves are rather large and thus cannot be moved instantaneously. Due to slow movement of the valves in the reactor an input delay τ is introduced, which represents the time delay between the change of the input signal and the actual resulting change of the valve position.Without going too much into detail, the resulting model can be expressed by defining y=T−T0 andu=(Tin−Tw)·ukMas a transfer function given in Eq. (68).(68)GP(s)=Y(s)U(s)=ϕλSmmwc·e−sτs2+λSmc+λSmwcw+λ0S0mwcws+λSλ0S0mcmwcwEq. (68) can be rewritten as Eq. (69), with K, a, and b in (70)–(72), respectively.(69)GP(s)=Y(s)U(s)=K(s+a)(s+b)·e−sτ(70)K=ϕλSmmwc(71)a=−λSmc+λSmwcw+λ0S0mwcw2+λSmc2+λSmwcw2+λ0S0mwcw2+2λ2S2mcmwcw−λSλ0S0mcmwcw+λSλ0S0mw2cw22(72)b=−λSmc+λSmwcw+λ0S0mwcw2−λSmc2+λSmwcw2+λ0S0mwcw2+2λ2S2mcmwcw−λSλ0S0mcmwcw+λSλ0S0mw2cw22The measured parameters of the real batch reactor are as follows.(73)mw=40kgcw=4200J/kgKc=4200J/kgKT0=18°CTC=12°CTH=75°Cϕ=1.6kg/sλ=420W/m2Kλ0=84W/m2KS=2m2S0=2m2The quantity of the raw material being processed in the batch reactor is not constant. During the production process, additional material is injected into the core of the batch reactor, according to the reference recipe. Thus, the quantity varies between m1=300kg≤m≤m2=600kg. Furthermore, the delay due to valve movement is not greater than τ≤12s. Hence, the parameters of the transfer function in Eq. (69) fall within the following boundaries.(74)1.33·10−5≤K≤2.67·10−55.31·10−5≤a≤1.02·10−46.28·10−3≤b≤6.57·10−3By taking into account Eqs. (7)–(9), (15) and (18), the representing transfer function given in Eq. (75) is derived.(75)GP0(s)=2.00·10−5(s+6.97·10−5)(s+6.42·10−3)From here on, the subsequent steps to achieving suitable controller parameters are exactly the same as in the previous case study, which is presented in detail in Section 5. The only difference is that the PSO algorithm uses more appropriate parameters, according to the expected solution (see Eq. (76)).(76)xminmax=120,0000.11000.1100vminmax=−500500−33−33The resulting optimized parameters are given in Eq. (77).(77)KP=72.34TI=10,548TD=33.00Tf=6.60The obtained controller was tested on the batch reactor. The results are shown in Figs. 18 and 19. The reference recipe prescribes that the reactor core should first be heated to 35°C. 130kg of fresh ingredients are injected into the core. Next, the core is heated to 45°C and 80kg of ingredients are added. Finally, the core temperature is brought up to 62°C and the final batch of ingredients (90kg) is injected into the reactor. The abrupt drops of temperature are due to freshly injected ingredients that are added during the process, as they have roughly the same temperature as the surroundings. Due to measurement noise the depicted signals are not smooth.The results indicate that the reference-trajectory tracking is satisfactory within the whole operating range and that the robustness requirements are satisfied as well. As in the previous section, in order to further analyze the proposed approach with regard to its repeatability and convergence properties, the algorithm has been run 30 times consecutively. The globally best value of the fitness function FgBestwith regard to the iteration step iter is depicted in Fig. (20). The statistics of the consecutive algorithm runs are given in Table 5.The results of the repeated runs once again lead to the conclusion that the proposed framework is useful for reaching the optimal solution with regard to the predefined fitness function. In this case, the solutions were obtained on average in 184s, with the worst case requiring 186s.

@&#CONCLUSIONS@&#
