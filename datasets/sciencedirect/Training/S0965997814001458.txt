@&#MAIN-TITLE@&#
Finding influential agent groups in complex multiagent software systems based on citation network analyses

@&#HIGHLIGHTS@&#
A model for finding influential agent groups in multiagent software systems.A concept of extended group centrality to evaluate the impact of an agent group.The impact of an agent is mainly characterized by its citation relations.A group’s impact is determined by both of direct and indirect citations.

@&#KEYPHRASES@&#
Complex software systems,Multiagent software systems,Agent groups,Citation networks,Group centrality,Group influence,

@&#ABSTRACT@&#
Current complex engineering software systems are often composed of many components and can be built based on a multiagent approach, resulting in what are called complex multiagent software systems. In a complex multiagent software system, various software agents may cite the operation results of others, and the citation relationships among agents form a citation network; therefore, the importance of a software agent in a system can be described by the citations from other software agents. Moreover, the software agents in a system are often divided into various groups, and each group contains the agents undergoing similar tasks or having related functions; thus, it is necessary to find the influential agent group (not only the influential individual agent) that can influence the system outcome utilities more than the others. To solve such a problem, this paper presents a new model for finding influential agent groups based on group centrality analyses in citation networks. In the presented model, a concept of extended group centrality is presented to evaluate the impact of an agent group, which is collectively determined by both direct and indirect citations from other agents outside the group. Moreover, the presented model addresses two typical types of agent groups: one is the adjacent group where agents of a group are adjacent in the citation network, and the other is the scattering group where agents of a group are distributed separately in the citation network. Finally, we present case studies and simulation experiments to prove the effectiveness of the presented model.

@&#INTRODUCTION@&#
Currently, there are many complex engineering software systems, such as networked control systems, emergency management systems, and air traffic control systems. A complex engineering software system has a large number of software components that can operate autonomously but coordinate with each other [1–3]. Due to the large number of software components, as well as their dynamic and heterogeneous nature, it is difficult to design and develop a perfect complex engineering software system to satisfy the requirements of users. To build high quality and industrial-strength software, a multiagent-based approach is proposed [4]; with the multiagent-based approach, the software components can be modeled by software agents, and the complex software systems can be implemented as a collection of interacting autonomous software agents.In multiagent software systems, the software agents often interact and coordinate with each other; the operation of some software agents may be implemented by citing the operation results of other agents [5], which can be denoted as citation networks where the link between two nodes denotes that the software agent associated with the first node directly cites the operation result of the one associated with the second node [6]. In the citation network, each agent occupies a social position, which can only be shaped and described by the agent’s citation relations with other agents [6,7]; therefore, the impact of an agent on the entire software system is mainly characterized not by that agent’s inherent properties, but instead by its citation relations with other agents [8–11]. Obviously, if an agent is cited by more agents, then such agent is more influential in the multiagent software system; therefore, the citation frequency of an agent determines that individual agent’s impact within the entire software system. Finding influential agents is important to improve the performance of the entire system; for example, in some mission critical applications, such as financial systems and traffic control systems, it is crucial to find the influential software agents and ensure higher reliability onto them. To measure the impacts of software agents, the social ranking of agents can be used; this can be achieved by analyzing the citation relations among agents.Moreover, a large-scale engineering software system is composed of several subsystems, and each subsystem contains a group of software agents undergoing similar tasks or having similar goals [12–14]; therefore, the software agents in a large-scale system are often organized into various groups [15–19]. Generally, an agent group can undergo certain tasks and build some impact within the entire multiagent software system; the impact of a group is determined by its members’ experiences in the systems [20]. In large-scale multiagent software systems, if the impact of an agent group is high, the group may have high dominance and influence the performance of the entire system. Therefore, while we want to improve the utility of the entire system, the groups with higher impacts should be considered more; if the utilities of the groups with higher impacts are improved, the outcome utility of the entire system can be easily improved accordingly. The following example in real world can express our motivation.In a multiagent system for network intrusion detection [32], there are four groups of agents: intrusion sensor agents, intrusion detection agents, tracing agents, and recovery agents. In the system, tracing agents and recovery agents should decide their behavior strategies based on the operation results of intrusion detection agents; the intrusion sensor agents should also receive the instructions from the intrusion detection agents. Therefore, now the group of intrusion detection agents has higher impacts in the system. If we can improve the function of group of intrusion detection agents, the performance of the entire system will be improved accordingly.Then, how can we evaluate the impact of an agent group (i.e., the social ranking of an agent group) formed by more than one agent? Obviously, we can also seek influential agent groups based on analyses of the citation topology among them. However, previous related approaches do not match the particularities of the social ranking of agent groups in complex multiagent software systems, as described in the following points: (1) previous approaches are often developed for the social ranking of individual agents but not agent groups; (2) because previous approaches only concern the social ranking of individual agents, they do not explore the effects of the citation topology within a group on such group’s ranking; and (3) previous approaches are often developed based only on the direct (immediate) citation relations between agents and ignore the indirect citation relations.To address the above problems, in this paper, we extend the concept of group centrality and use it to evaluate the impact of agent groups in complex multiagent software systems through the analyses in their citation networks. Centrality is one of the most important and widely used conceptual tools for analyzing network structures [7]: if the centrality of an agent in the network is higher, its social ranking will also be higher. By the same rule, if the centrality of an individual software agent in a citation network is higher, that agent’s impact is higher in the multiagent software system. Traditionally, centrality measures have been applied to individual agents. However, an agent group usually includes more than one individual agent. Therefore, in this paper we introduce the concept of group centrality. The group centrality analysis method can find the group that has the maximal centrality, but the traditional group centrality is always determined only by the direct interaction from other agents outside the group [7]. In this paper, we extend the traditional concept of group centrality so that it is determined not only by the direct citations but also by the indirect citations from other agents outside the agent group.In comparison with related work, our study makes the following contributions.•We focus on the social ranking of agent groups but not individual agents, which can solve the social ranking problem in grouped multiagent software systems.On the topology analyses of citation networks, we consider not only the direct citation relations of agents but also the indirect citation relations of agents. In other words, a group’s impact is determined not only by the direct citations from the group’s adjacent agents but also by the indirect citations from other agents that are not adjacent to the group.We extend the traditional concept of group centrality and include the factor of topology within the group itself (such as the geographical center of the group), which can make the group centrality more effective at measuring the impact of the agent group in the entire software system.In summary, in this paper, we present a novel model for seeking influential agent groups using group centrality analyses in citation networks. If a group has higher group centrality in the citation network, then such a group has a higher impact in the entire system, and the outcome utility of the system can be improved significantly by the influential groups.The rest of this paper is organized as follows. In Section 2, we compare our contribution with previous work; in Section 3, we model the citation networks and groups in multiagent software systems; in Section 4, we present the model of group centrality analyses in citation networks; in Section 5, we make case studies and simulation experiments to prove the presented model; and finally, we conclude our paper and discuss our future work in Section 6.

@&#CONCLUSIONS@&#
In current large-scale multiagent software systems, the agents are always divided into various groups for certain tasks. To improve the total outcome utilities of systems, it is crucial to find the influential agent groups within systems. This paper presented a new method to find the influential agent group by using group centrality analyses in citation networks. Our model can make the evaluation of group influence quantitative and measurable, in comparison with other related studies where the evaluation of group influence is sometimes qualitative. Moreover, we address two types of agent groups, adjacent groups, where the agents in a group are adjacent in the citation network, and scattering groups, where the agents in a group are distributed separately in the citation network. Finally, we present case studies and simulation experiments to prove the effectiveness of the presented model. From the simulation experiments, we see that our model can find the agent groups that can significantly influence the total outcome utility of the entire system.Regarding the generality and future work of our model, the following are several aspects for discussion.(1)In this paper, we only make the group centrality analyses in the citation networks. In fact, the relations among agents are very rich, even excluding the citation relations. Moreover, a group may sometimes be influential for other factors, even if its operation results are seldom cited by others. Therefore, in the future, we should implement group centrality analyses in other interaction topologies of agents and make our model more feasible for real complex software systems by including more real factors.In the paper, we have the prior knowledge of group structures. In the future work we will investigate discovering group structures, which can be based on the graph clustering methods [30,31]. Moreover, although our model can be used in dynamic multiagent software systems on the basis of recalculating when the network topology is changed as described in Section 5.1.3, this recalculating method may be not efficient. Therefore, we will investigate models that can better be used in dynamic multiagent software systems.