@&#MAIN-TITLE@&#
Exact Voronoi diagram of smooth convex pseudo-circles: General predicates, and implementation for ellipses

@&#HIGHLIGHTS@&#
Exact Voronoi diagram of smooth convex pseudo-circles via dual Delaunay graph.Geometric and algebraic analysis of required predicates.Complete, exact and efficient c++ implementation for intersecting ellipses.Novel combination of symbolic & numeric techniques.

@&#KEYPHRASES@&#
Voronoi diagram,Exact computation,cgal implementation,InCircle predicate,Parametric curve,

@&#ABSTRACT@&#
We examine the problem of computing exactly the Voronoi diagram (via the dual Delaunay graph) of a set of, possibly intersecting, smooth convex pseudo-circles in the Euclidean plane, given in parametric form. Pseudo-circles are (convex) sites, every pair of which has at most two intersecting points. The Voronoi diagram is constructed incrementally. Our first contribution is to propose robust and efficient algorithms, under the exact computation paradigm, for all required predicates, thus generalizing earlier algorithms for non-intersecting ellipses. Second, we focus on InCircle, which is the hardest predicate, and express it by a simple sparse5×5polynomial system, which allows for an efficient implementation by means of successive Sylvester resultants and a new factorization lemma. The third contribution is our cgal-based c++ software for the case of possibly intersecting ellipses, which is the first exact implementation for the problem. Our code spends about a minute to construct the Voronoi diagram of 200 ellipses, when few degeneracies occur. It is faster than the cgal segment Voronoi diagram, when ellipses are approximated by k-gons fork>15, and a state-of-the-art implementation of the Voronoi diagram of points, when each ellipse is approximated by more than 1250 points.

@&#INTRODUCTION@&#
Computing the Voronoi diagram, and its dual Delaunay graph, of a set of sites in the plane has been studied extensively due to its links to other important questions, such as medial axis computations, but also its numerous applications, including motion planning among obstacles, assembly, surface reconstruction, and crystallography (Anton, 2004). Our work is also motivated by other problems besides Voronoi diagrams: The predicates examined can be used to implement an algorithm for the convex hull of smooth convex pseudo-circles (Elber et al., 2001), whereas some of them appear in the computation of the visibility map among ellipses (Habert, 2005) (the software being developed for this problem uses our predicates). Recently, there has been some interest in applying our methods for contact detection in molecular dynamics (Ogarko and Luding, 2010).Exact and certified geometric computing is an important enhancement to CAGD methods and an area of intense activity, since it exploits the modern power of geometric and algebraic algorithms which offer speed without jeopardizing robustness. Following this trend, our work guarantees the exactness of the dual Delaunay graph. This means that all combinatorial information is correct, namely the definition of the graphʼs edges, which, of course, have no geometric realization. The Voronoi diagram involves algebraic numbers for representing the vertices and bisector edges: our algorithms and software handle these numbers exactly. For instance, they can answer all point-location queries correctly. Hence, we say that our representation of the Voronoi diagram adheres to the principles of the exact computation paradigm, a distinctive feature in the realm of non-linear computational geometry. Our methods allow also for an approximation of the algebraic numbers with arbitrary precision, and this precision need not be fixed in advance, which is useful for drawing the diagram on the screen, or in cases where faster, yet approximate, computation is needed. We use the term exact Voronoi diagram to refer to a Voronoi diagram that is represented exactly via its dual Delaunay graph, while at the same time its vertices and edges can be approximated up to an arbitrarily high precision.Input sites have usually been linear objects, the hardest cases being line segments and polygons (Held, 2001; Karavelas, 2004); moreover, only the latter (Karavelas, 2004) yields an exact output. The approximation of smooth curved objects by (non-smooth) linear or circular segments with noG1continuity may introduce artifacts and new branches in the Voronoi diagram, thus necessitating post-processing. It may even yield topologically incorrect results, as explained in Ramamurthy and Farouki (1999b).The Voronoi diagram has been studied in the case of planar sites with curved boundaries (Ramamurthy and Farouki, 1999b; Alt et al., 2005), where topological properties are demonstrated, including the type of bisector curves, though the predicates and their implementation are not considered. There are works that compute the planar Voronoi diagram approximately: In Hanniel et al. (2005), curve bisectors are traced within machine precision to compute a single Voronoi cell of a set of rationalC1-continuous parametric closed curves. The runtime of their implementation varies between a few seconds and a few minutes. It is briefly argued that the method extends to exact arithmetic, but without elaborating on the underlying algebraic computations or the handling of degeneracies. In Ramanathan and Gurumoorthy (2003), the boundary of the sites is traced with a prescribed precision, while Ramamurthy and Farouki (1999a) suggest working with lower-degree approximations of bisectors of curved sites. Finally, error-bounded bisector approximations of planar NURBS for the case of non-intersecting curves have been considered by Seong et al. (2008) and their implementation runtimes are within a couple of seconds for up to three sites. See also Kim et al. (2001) for the Voronoi diagram of circles, which maintains topological consistency but not geometric exactness.Curve-curve bisectors of parametric curves are considered in medial axis computations. In Aichholzer et al. (2009) the medial axis of a simply connected planar domain is computed, using a divide and conquer algorithm. The boundary of the domain is approximated viaG1-continuous biarcs. The correct medial axis up to a predefined input accuracy is computed. The advantage of this type of approximation is that resulting medial axis is geometrically stable, exploiting the properties ofG1continuity and the preservation of curvature maxima.Few works have studied exact Voronoi diagrams for curved objects. In the case of circles, the exact and efficient implementation of Emiris and Karavelas (2006) is now part of CGAL (2013). There is also the very efficient and robust implementation of Held (2001), but relies on floating-point computations. For a more recent implementation that treats (non-intersecting) line segments and circular arcs, see Held and Huber (2009). Conics were considered in Anton (2004), but only in a purely theoretical framework. Moreover, the algebraic conditions derived were not optimal, leading to a prohibitively high algebraic complexity. In fact, the approach relied on eigenvector computations, hence was not exact.Karavelas and Yvinec (2003b) have studied the properties of smooth convex, possibly intersecting, pseudo-circles in general position. They have shown that the Voronoi diagram of these sites belongs to the class of abstract Voronoi diagrams (Klein et al., 1993) and propose an incremental algorithm that relies on certain geometric predicates.Our own previous work (Emiris et al., 2008) studied non-intersecting ellipses, and proposed exact symbolic algorithms for the predicates required by the incremental algorithm of Karavelas and Yvinec (2003b). Predicates SideOfBisector, DistanceFromBitangent were implemented. We established a tight bound of 184 complex tritangent circles to 3 ellipses (in fact, the result holds more generally for 3 conics). The upper bound on the number of real circles is still open, but we have examples with 76 real tritangent circles, when the ellipses intersect.11G. Elber first showed us such examples. Recently, G. Moroz confirmed the same bound using adaptive sampling methods.Predicate InCircle had been implemented in maple, and used a different polynomial system than the one in this paper. Some of its properties had been observed without proof; this is rectified below to yield an optimal method for resultant computation, using a more suitable polynomial system.Emiris and Tzoumas (2008) proposed a certified method for InCircle, relying on a Newton-like numerical subdivision, which exploited the geometry of the problem and exhibits quadratic convergence for non-intersecting ellipses, while for intersecting ones, the convergence is quadratic in general, except some special cases where the algorithm converges more slowly. The motivation behind this approach was to use a fast subdivision algorithm in order to filter out non-degenerate configurations and revert to slower algebraic algorithms only when necessary. The implementation made use of the double precision interval arithmetic library alias.22http://www-sop.inria.fr/coprin/logiciels/ALIAS/.In this work, we re-implement the proposed subdivision-based method in c++ using multi-precision floating point arithmetic. Experiments with state-of-the-art generic algebraic software on InCircle (Emiris et al., 2008), and generic numeric solvers (Emiris and Tzoumas, 2008), imply that our specialized c++ implementation is much more efficient, both in the exact as well as in the certified numeric part.In this article, which is an improved and finalized version of our work in Emiris et al. (2009), we extend previous results, that considered only non-intersecting ellipses, to smooth convex, possibly intersecting, pseudo-circles. This is the hardest step towards arbitrarily intersecting objects and requires re-working the predicates, especially InCircle. At the same time, pseudo-circles are quite powerful. For instance, the Voronoi diagram in free (complementary) space of a set of arbitrarily intersecting convex objects coincides with the diagram of appropriate pseudo-circles (cf. Fig. 12). We propose algorithms for all necessary predicates and examine the algebraic operations required for an efficient exact implementation. The algebraic analysis of the required predicates, besides its theoretical importance, sheds light to the intrinsic complexity of computing with non-linear objects in an exact way.To express the Voronoi circle of parametric curves, we introduce a new5×5polynomial system, where we trade number of equations and unknowns for polynomial degree. Although there is no determinant formula for this resultant, we exploit the structure of the system to find a succession of Sylvester determinants which eventually yields the resultant. Moreover, this approach bounds the degree of the algebraic numbers involved. In the case of arbitrary smooth parametric curves, Corollary 5 provides almost all the extraneous factors of the resultant. In the case of the conics we provide the complete factorization of the resultant (Theorem 3). Our technique is quite general and could be used to other problems as well.Finally, we present an implementation33http://www.di.uoa.gr/~geotz/vorell/.in c++ for the case of ellipses that may intersect in pseudo-circles (cf. Fig. 1), extending cgalʼs existing implementation for circles. It spends about 63 seconds for the Voronoi diagram of 200 ellipses with few degeneracies. More importantly, it is faster than cgalʼs segment and point Voronoi diagram, when ellipses are approximated by 16-gons and, respectively, by more than 1000 points roughly.44This is for state-of-the-art implementations, as for simpler implementations about 300 points suffice to make them slower.This is the first implementation under the exact computation paradigm for sites more complex than circles. Our benchmarks demonstrate that carefully implemented algebraic procedures incur a very reasonable overhead. Our ambition is to support arbitrary smooth convex objects and we hope CAGD shall benefit from the power of modern certified computing in the effort of reliable and robust software.The rest of the paper is organized as follows. The next section introduces notation, and examines some basic operations on the sites, whereas Section 3 studies the predicates of general parametric curves. Section 4 deals with InCircle, where we prove certain geometric and algebraic properties that lead to its efficient implementation. Section 5 presents our c++ implementation along with benchmarks measuring predicate performance, as well as how it competes against cgalʼs Voronoi diagram for points and polygons, concluding with future work.Our input is smooth convex closed curves given in parametric form. Smoothness allows the tangent (and normal) line at any point of the curve to be well-defined. We denote byC(t)a smooth closed convex curve parameterized by t. We refer to a point p onC(t)with parameter valuetˆbyptˆ, or simply bytˆ, when it is clear from the context. ByCt∘we denote the region bounded by the curveC(t).Ctis a smooth convex object (site), so that if p denotes a point in the plane,p∈Ct⇔p∈C(t)∪Ct∘. When two sites intersect, we assume that their boundaries have at most two intersections, i.e., they form pseudo-circles. A curveC(t)is given by the map(1)C(t):[a,b]∋t↦(x(t),y(t))=(X(t)W(t),Y(t)W(t)),but actual denominators can differ; we use (1) for simplicity in our proofs. Here X, Y and W are polynomials inZ[t], with degrees bounded by d. Moreover,a,b∈Q∪{±∞}. All algorithms, predicates and the corresponding analysis are valid for any parametric curve, even when the polynomials have different degrees, though we use (1) for simplicity. We assume thatW(t)≠0, for anyt∈[a,b]. The derivative of a polynomialA(t)with respect to t is denoted byA′(t). To simplify notation two sites defined by the closed curvesC1(t)andC2(r)will be denoted byCtandCr. We do the same for the defining curves, writingC(t)andC(r). Whend=2the curves are conics; ellipses and circles are the only closed convex curves represented. Another example of a curve in the form of (1) is the bean curve,t↦(1+t2t4+t2+1,t(1+t2)t4+t2+1).We represent real algebraic numbers, i.e., the real roots of an integer polynomial, by the so-called isolating interval representation. For such a number α, this representation consists of a square-free polynomial, say A, which vanishes on α and an interval, say[a,b], with rational endpoints that contains α and no other real root of A. The square-free part computation guarantees that the resulting polynomial does not have multiple roots. The polynomial may not be irreducible, since to derive an irreducible polynomial we need to perform factorization, which is a costly operation. In contrast with the computation of the square-free part which is cheap, as it consists of a GCD computation of a polynomial and its derivative.Letpt(x(t),y(t))be a point on the curveC(t). The equation of the tangent line atptis(y−y(t))x′(t)−(x−x(t))y′(t)=0. After the substitution of the rational polynomial functions ofx(t)andy(t), and multiplication of the equation by the denominators, we get a polynomial inZ[x,y,t], that is linear inx,yand of degree⩽2d−2in t. The equation of the normal line atptis(x−x(t))x′(t)+(y−y(t))y′(t)=0. As in the case of the tangent, after substitutions and elimination of the denominators we obtain a polynomialN(x,y,t)∈Z[x,y,t], which is linear inx,yand of degree⩽3d−2in t.Now we characterize the relative position of sitesCt,Cr, i.e., whether they are separated, intersecting, externally or internally tangent, or if one is contained inside the other. The computation and characterization of all their bitangent lines suffices, due to the following properties: (i) By definition,Ct,Crintersect as pseudo-circles iff they have at most two external bitangent lines. (ii) If one is contained inside the other, then there are 0 internal bitangent lines, and either 0 (boundaries separated) or up to a constant number (boundaries tangent) of external bitangent lines. If the number of external bitangent lines is greater than 2, then the pseudo-circles property is violated; otherwise, sites are internally tangent at 1 or 2 points. In this case, the pseudo-circles set is not in general position. We assume that our input is in general position, so that the properties of abstract Voronoi diagrams hold. Detection of internally tangent sites is performed by picking boundary points on either side of the tangency point, and testing whether they belong to the interior of the other site. (iii) If the sites do not intersect, then they have 2 internal and 2 external bitangent lines (only one internal bitangent if they are externally tangent). (iv) Finally, if the sites admit more than 2 external bitangent lines, then they intersect in more than two points and then they do not form pseudo-circles.The same technique decides the relative position of a point and a site since, if a point is interior to a site, there are no supporting lines tangent to the site. Consequently, this property is used to identify a site contained inside another, by considering a boundary point of one of the sites. In the case of conics (i.e. ellipses) the method of counting and characterizing the bitangents involves solving a polynomial of degree 4. There are cases where we need to compute the intersection points of sitesCt,Cr. These are solutions of the resultant ofX(t)W(r)−X(r)W(t)andY(t)W(r)−Y(r)W(t)with respect to t. This resultant is a polynomial in r of degreed2.The insertion of a new site in the Voronoi diagram consists of the following: (i) Locate the nearest neighbor of the new site, (ii) find a conflict between an edge of the current diagram and the new site, or detect that the latter does not affect the Voronoi diagram (nor the Delaunay graph), as it is hidden by other sites (see Section 4.4 for a strict definition of hidden sites), (iii) find the entire conflict region, defined as that part of the Voronoi diagram which changes due to the insertion of the new site, and update the dual Delaunay graph. The randomized complexity of an insertion (in a diagram with n sites) isO(log2n)for disjoint sites andO(n)for intersecting or hidden sites. Computing an exact Voronoi diagram implies that we identify correctly all degenerate cases, including Voronoi circles tangent to more than 3 sites.The basic predicates that are used in these steps are: SideOfBisector that performs nearest neighbor location; DistanceFromBitangent that determines if an infinite (unbounded) edge of the current Voronoi diagram will be modified, which can also be used to determine the existence of a Voronoi circle (Section 4.4); InCircle that determines if a vertex of the current Voronoi diagram is in conflict with the newly inserted site; EdgeConflictType which determines which part of an existing edge of the current Voronoi diagram will be modified due to the insertion of a new site. We briefly analyze predicates SideOfBisector and DistanceFromBitangent (abbreviated by SoB and DFB from now on). For a more elaborate analysis the reader may refer to Emiris et al. (2009). Predicate InCircle is presented separately in the next section due to its higher complexity.Given a siteCtand a point q in the plane, their (signed) distance equalsminx∈C(t)‖q−x‖whenq∉Ctand−minx∈C(t)‖q−x‖whenq∈Ct, where‖⋅‖denotes the Euclidean norm. The absolute value of the distance equals the radius of the smallest circle centered at q tangent toCt. Given two sitesCtandCrand a pointq=(q1,q2)∈Q2, this predicate decides which site is closest to the point. Ifq∉Ctandq∈Cr, then q is closer toCr, due to the signed distance (cf. pointq′in Fig. 2, left), otherwise, we compute the (squared) lengths of segmentsqptˆandqprˆas algebraic numbers and compare them. Let ζ denote the squared length of segmentqptˆ, whereptˆ=(x(t),y(t)), fort=tˆ. Then we have thatζ−(x(t)−q1)2−(y(t)−q2)2=0. Recall (from Section 2) the equation of the normal line passing through q satisfyingN(q1,q2,t)=0. We can eliminate t from these two equations by computingR(ζ)=Rest(ζ−(x(t)−q1)2−(y(t)−q2)2,N(q1,q2,t))(i.e. the resultant of the two polynomials with respect to t). This yields a polynomialR∈Z[ζ], of degree3d−2, the smallest positive real root of which is equal to‖q−ptˆ‖2.The degree of the real algebraic numbers involved in the predicate is3d−2. For conics, this degree becomes 4, and is optimal, as shown in Emiris et al. (2008), where it was obtained using the pencil of two ellipses. Note that we do not compute the bisector of the two curves. The parametric bisector of two rational parametric curves is a bivariate polynomial of degree4d−2in each variable, while in the Cartesian space (as a polynomial inx,y) the degree is even higher (see Elber and Kim, 1998 and Emiris et al., 2008 for the case of ellipses). Therefore, the approach presented here is preferred, as we are dealing with algebraic numbers of lower degree.Consider two sites,CtandCr, and their bitangent line, which leaves both sites on the right-hand side, as we move from the tangency point ofC(t)to the tangency point ofC(r); such a bitangent appears in Fig. 2, right, and is called a CCW bitangent line, because it can be considered as a circle of infinite radius oriented in CCW direction. This line divides the plane into two halfplanes and DFB decides whether a third site,Cs, lies in the same halfplane as the other two. The realization of this predicate consists in deciding the relative position ofCswith respect to the bitangent line. We define the outcome of the predicate to be negative, that isDFB(Ct,Cr,Cs)<0, iffCsdoes not lie in the same halfplane asCtandCrwith respect to the CCW bitangent line. We split the problem to two sub-problems: compute the external bitangent of interest, and decide the relative position of the third site with respect to this bitangent.To compute all bitangents ofC(t),C(r), we consider the equation of a tangent line toC(t)that also crossesC(r). For the line to be tangent to both sites, the discriminant of the corresponding polynomial should vanish. Among the real roots of the discriminant are the values of the parameter that correspond to the tangency points, which allow us to compute the implicit equations of the bitangent lines. We characterize the bitangents as external or internal by computing their relative position with respect to (rational) points inside the sites.To decide the position ofCswith respect to the CCW bitangent line, we first check if the line crossesCs. If this is the case, then the predicate is answered immediately, sinceCscannot lie within the same halfplane asCtandCr. If this line does not crossCs, then to decide in which halfplaneCslies, it suffices to compute the sign of the evaluation of the polynomials of the bitangent over an interior (rational) point ofCs. To check whether the bitangent line crossesCs, we consider the tangency points of all the bitangents ofC(t)andC(s), shown with circular marks in Fig. 2, right. We then decide the position ofCsby the ordering of the aforementioned points and the tangency point of the bitangent andC(t), shown with solid circular mark in the same figure. The algebraic numbers considered in this predicate are of degree⩽4(d−1)2.The predicates examined so far, apart from the computation of the Voronoi diagram, can also be used for the computation of the convex hull of smooth convex pseudo-circles.This section introduces a polynomial system for expressing the Voronoi circle, leading to a robust and fast implementation. Each point q on a Voronoi edge that is equidistant to two sitesCtandCris the center of a disk tangent to the boundariesC(t)andC(r)of the sites. This disk is called an internal bitangent Voronoi disk, if it is contained inCt∩Crand an external bitangent Voronoi disk, if it lies in the complement ofCt∘∪Cr∘. Similarly, a Voronoi vertex equidistant from three sitesCt,CrandCs, is the center of a disk tangent to the boundaries ofCt,CrandCs. Such a disk is called an internal tritangent Voronoi disk, if it is contained inCt∩Cr∩Csand an external tritangent Voronoi disk, if it lies in the complement ofCt∘∪Cr∘∪Cs∘.Given sitesCt,Cr,Csin this order, we denote their associated Voronoi disk byVtrsiff their tangency points on the disk are in CCW direction. In this case,Vtrsis a CCW Voronoi disk, andVtsris a CW Voronoi disk. Since the Voronoi diagram of smooth convex pseudo-circles is an abstract Voronoi diagram, given 3 sites, there may exist at most one CCW Voronoi disk and at most one CW Voronoi disk (cf. Fig. 6, where sitesCt,Cr,Cscorrespond to ellipses 1, 2 and 3 resp.). Note that the boundary of the Voronoi disk is the Voronoi circle.Point q on the Voronoi diagram and site C are in conflict if the Voronoi disk associated with q is an internal Voronoi disk contained inC∘, or an external Voronoi disk intersectingC∘(cf. Fig. 3). Given sitesCt,Cr,Cs, letVtrsbe their Voronoi disk and C be a query site. IfVtrsis an external Voronoi disk, we say that C is in conflict withVtrsifVtrsis intersectingC∘. IfVtrsis an internal Voronoi disk, we say that C is in conflict withVtrsifVtrsis included inC∘. This type of conflict is called vertex conflict, because when a newly inserted site C is in conflict with a Voronoi disk, the center of that disk corresponds to a Voronoi vertex that will no longer exist in the new Voronoi diagram, as shown in Fig. 3.InCircle decides if a newly inserted site C is in conflict withVtrs. A degeneracy arises when C is also tangent toVtrs. Given thatVtrsexists, the predicate is computed as follows: (i) Solve the algebraic system that expresses the Voronoi circle. Among the solutions (which correspond to various tritangent circles, cf. Fig. 4, right), findVtrs. (ii) Determine the relative position of C with respect toVtrs. Each step is explained in the subsections that follow.The polynomial system expressing all circles tangent toCt,Cr,Csis:(2)N(x,y,t)=N(x,y,r)=N(x,y,s)=Mtr(x,y,t,r)=Mts(x,y,t,s)=0and has a mixed volume of 512 for the case of conics, which immediately provides an upper bound on the number of roots inC⁎. The first 3 equations correspond to normals at pointst,r,son the 3 given sites. All normals go through the Voronoi vertex(x,y). The last two equations are linear inx,yand force(x,y)to be equidistant from the sites: each one corresponds to the (perpendicular) bisector of the segment between two footpoints (cf. Fig. 4, left). This system was also used by Ramamurthy and Farouki (1999a). Elimination ofx,yfromMtr(x,y,t,r),N(x,y,t),N(x,y,r)yields the bisector of two sites with respect tot,r. System (2) shall be solved overR, thus yielding a set of solution vectors inR5. Only one solution vector corresponds toVtrs. There exist solution vectors with CCW orientation of the tangency points, and solution vectors with CW orientation which do not correspond to the Voronoi circle we are looking for. They just correspond to some tritangent circle (cf. Fig. 4, right).The resultant ofn+1polynomials in n variables is an irreducible polynomial in the coefficients of the polynomials which vanishes iff the system has a complex solution. Irreducibility occurs for generic coefficients; otherwise, resultants can be factorized. In particular, sparse (or toric) resultants express the existence of solutions in(C⁎)n(Cox et al., 2005). We employ vectorsα=(α1,…,αn)∈Nn, where|α|is the 1-norm and we writexαforΠixiαi.Proposition 1We are given polynomialsF0,…,Fn∈K[x1,…,xn]over a fieldK, such thatFi=∑0⩽|α|⩽diui,αxαis of total degreedi, where0⩽i⩽n. Their resultant with respect tox1,…,xnis homogeneous of degreed0⋯dj−1dj+1⋯dninuj,α, where0⩽|α|⩽dj, andj∈[0,n]. This means, for anyλ∈K, thatRes(F0,…,λFj,…,Fn)=λd0⋯dj−1dj+1⋯dnRes(F0,…,Fn). The total degree of the resultant is∑j=0nd0⋯dj−1dj+1⋯dn.Lemma 2Letf(x)=T2anxn+Tan−1xn−1+∑i=0n−2aixiandg(x)=T2bnxn+Tbn−1xn−1+∑i=0n−2bixi. Then the resultant of f and g with respect to x is a multiple ofT4.ProofLet S be the2n×2nSylvester matrix off,gwith respect to x. Their resultant equals detS. We shall exploit its properties (for a more elaborate proof, with matrices shown see Tzoumas, 2009, p. 89). Denote bySithe new matrix S after step i: Divide the first two columns byT2and T respectively and get|S|=T3|S1|. Then, divide rows 2 andn+2by T and rows i andn+i,3⩽i⩽n, byT2and get|S|=T5T2(n−2)2|S2|. Now, multiply column 4 by T and columns 5 to 2n byT2to remove denominators, thus obtaining|S|=T5T2(2n−4)T−1T(−2)(2n−4)|S3|⇔|S|=T4|S3|.  □It is impossible to compute the resultant of 5 arbitrary polynomials as a determinant, so we apply successive Sylvester determinants, i.e., optimal resultant formulae forn=1. This typically produces extraneous factors but, by exploiting the fact that some polynomials are linear, and that none contains all variables, we shall provide the complete factorization of the computed polynomial; we focus on conics for simplicity, but our approach holds for any parametric curve. We denote byΠ(t)the resultant of (2) when eliminating all variables except t: it is, generally, an irreducible univariate polynomial and vanishes at the values of t that corresponds to the complex tritangent circles. Recall that the curves are defined by (1).Theorem 3IfΠ(t)is the resultant of(2)as above, thenResxy(R1,R2,N(x,y,t))=Π(t)W(t)40(Y(t)W′(t)−Y′(t)W(t))36, whereR1=Resr(Mtr(x,y,t,r),N(x,y,r)),R2=Ress(Mts(x,y,t,s),N(x,y,s))and the degree of Π is 184.ProofAll polynomials belong toZ[x,y,t,r,s]: we shall eliminate x, y, r, s to obtain the univariate resultant inZ[t]. PolynomialsN(x,y,t),N(x,y,r), andN(x,y,s)are of total degree 5, linear inx,yand of degree 4 in the parameter. PolynomialsMtr(x,y,t,r)andMts(x,y,t,s)are of total degree 9, linear in x and y and of degree 4 in the parameters. First, we eliminate r fromMtr(x,y,t,r)andN(x,y,r):R1(x,y,t)=Resr(Mtr(x,y,t,r),N(x,y,r)). It is of total degree 22, of degree 6 in x, in y, and inx,y, and 16 in t. We do the same forMts(x,y,t,s),N(x,y,s)and obtain:R2(x,y,t)=Ress(Mts(x,y,t,s),N(x,y,s)), which follows the same degree pattern. It remains to compute the final polynomial inZ[t]:R3(t)=Resxy(R1(x,y,t),R2(x,y,t),N(x,y,t)).LetN(x,y,t)=D(t)y+A(t)x+C(t), whereD(t)=W(t)(Y(t)W′(t)−Y′(t)W(t))of degree 4. To computeR3, we solveN(x,y,t)for y and substitute inR1,R2. This introduces denominators, eliminated by multiplying byD(t)6. Then, we take the Sylvester resultant with respect to x (denominatorD(t)vanishes ifN(x,y,t)is vertical; in this case, we computeR3by solvingN(x,y,t)for x and proceed symmetrically with the resultant with respect to y). We apply Proposition 1 as follows:(3)Resxy(D6R1,D6R2,y+Ax+CD)=D36D36Resxy(R1,R2,y+Ax+CD)=D36Resxy(R1,R2,D(y+Ax+CD))=D36R3.By Proposition 1, the degree of the resultant in t is16(6⋅1)+16(6⋅1)+4(6⋅6)=336. The previous discussion implies that(W(t)(Y(t)W′(t)−Y′(t)W(t)))36, the leading coefficient of y inN(x,y,t), appears as an extra factor. After substitution of y inR1andR2, we obtain polynomials of the formW(t)2c6x6+W(t)c5x5+c4x4+c3x3+⋯+c0. Lemma 2 implies that the resultant of two such polynomials containsW(t)4as a factor. Therefore, the degree of Π is336−4⋅36−2⋅4=184.  □This theorem provides an upper bound of 184 complex tritangent circles to 3 conics. Numeric examples show that the bound is tight. This bound was also obtained in Emiris et al. (2008) using a different system. Now, we describe the factorization for arbitrary degree curves based on Proposition 1.Corollary 4We are givenR0,R1,R2∈K[x,y], where the total degree ofR1andR2is n in x, in y, and in x and y together, andR0=Dy+Ax+C, whereAD≠0, thenResx(Resy(R0,R1),Resy(R0,R2))=Dn2Resxy(R0,R1,R2).Corollary 5The degree of the resultant of(2)for general parametric curves, as in(1), is bounded by(3d−2)(5d−2)(9d−2), after dividing out the factor of(W(t)(Y(t)W′(t)−Y′(t)W(t)))(5d−2)2.A more careful analysis may exploit term cancellations to yield a tighter bound.If we solve the resultant of system (2), we obtain one coordinate of the solution vectors (in isolating interval representation). There are methods to obtain the other variables, too. For instance, plugging a value of t in the bisector ofCtandCrallows us to find r (cf. Section 4.2). The resultant allows us to detect degenerate configurations: 4 sites tangent to the same Voronoi disk. Consider tripletsCt,Cr,CsandCt,Cr,Ch. LetΠ1(t),Π2(t)be the resultants of (2) respectively. If the triplets admit an identical Voronoi circle, thengcd(Π1,Π2)≠1. Ifgcd(Π1,Π2)≠1, the triplets may have an identical solution vector, which is verified by looking at the other coordinates analogously to Emiris et al. (2008).We consider the question of choosing, among all solutions of the polynomial system corresponding to the tangency points(tˆ,rˆ,sˆ)of a tritangent circle, the one that corresponds to Voronoi circleVtrs. To eliminate irrelevant solutions, consider tangency pointsptˆ,prˆ,psˆfor a solution triplettˆ,rˆ,sˆ. The tangency points corresponding toVtrssatisfyCCW(ptˆ,prˆ,psˆ)and we disregard the rest of the solution vectors.Now we distinguish an external and an internal tritangent circle from the rest of the tritangent circles. The tangency points define the former iff the tangent line of the Voronoi circle at each tangency point separates its adjacent site from the other two tangency points, see Fig. 4, left. Even if the tangent line intersects the other sites (not shown in the example), the tangency points are still separated. Checking that the tangency points correspond to an internal circle is more complex, because an argument symmetric to the external case (i.e. the internal tritangent circle is such that all three tangency points are on the same side of the tangent line as the site, and inside the site) does not apply, due to the fact that the internal tritangent circle may be “locally” inside the curve, but not “globally”. Determining whether the tangency points correspond to an internal circle can be performed by applying the following lemma:Lemma 6(SeeEmiris et al., 2009.) Given intersecting sitesCtandCr, consider their bitangent circleBtrat pointstˆandrˆrespectively withtˆ,rˆ∈Ct∩Cr. ThenBtris an internal bitangent circle iffBtrhas the smallest radius among all bitangent circles ofC(t)andC(r)tangent attˆ, and the radius ofBtris bounded by the radius of curvature ofC(t)attˆand the radius of the self-bitangent circle ofC(t)attˆ.Finally, an external bitangent circleBtrcan be computed as in Emiris et al. (2008), by considering the tangent line attˆ, and the boundary of the convex hull oftˆ∪Cr.In our implementation, the above properties (computing internal and external bitangent circles) are used through an improved version of the subdivision scheme of Emiris and Tzoumas (2008) that converges to the tangency point of the Voronoi circle. We have incorporated Lemma 6 so that we are able to handle internal Voronoi circles as well. This way, not only are we able to choose the proper solution of (2), we can also approximate the root before computing the resultant. Therefore the resultant is computed only when our approximation cannot guarantee correctness, i.e., when the precision chosen is not enough, or when we are in a degenerate case (cf. Section 5).Since the Voronoi circle is expressed algebraically, it is not clear how to decide its relative position with respect to the query site, i.e., how to apply the method of Section 2. There is an interesting geometric property that allows us to determine a conflict by comparing tangency points on the boundary of one site. These points have “easy” representation as roots of the resultant of system (2).Definition 7The shadow regionStr(C)of a site C with respect to the bisectorB(t,r)of two sitesCtandCris the locus of points q ofB(t,r)that are in conflict with C.Alternatively, the shadow region can be seen as the part of the Voronoi diagram of two sites that will disappear (i.e., the part of the bisector that will be invalidated) due to the insertion of a third site. An important property of abstract Voronoi diagrams is that the bisector of two sites is homeomorphic to the open interval(0,1)and the shadow region has one out of six possible forms: ∅,(0,1),(0,a),(b,1),(a,b)and(0,a)∪(b,1), wherea,b∈(0,1)(Karavelas and Yvinec, 2003b; Klein et al., 1993), as shown in Fig. 5.Only endpoints of the shadow region that are not equal to 0 or 1 correspond to centers of circlesVtrhandVthr. Therefore, no Voronoi circles exist in cases (1) and (2) of Fig. 5. OnlyVthr(resp.Vtrh) exists (assuming thatCt,Cr,Chcorrespond to top site, bottom site and the shaded site of Fig. 5) in case (3) (resp., case (4)). Finally, both Voronoi circles exist in cases (5) and (6). Cases (2), (4) and (6) of Fig. 5 imply thatDFB(Ct,Cr,Ch)<0. This is so, because insertion of a third site which is in conflict with the CCW bitangent line, invalidates a part of the bisector that goes to infinity, as shown in the figure.Table 1(columns C–H) shows all possible combinations for the shadow region, and the evaluation of DFB. These combinations imply in turn the form the Voronoi diagram of three sites, as shown in Fig. 6.Lemma 8The possible combinations for the shadow region of three sites are those presented inTable 1.ProofConsider all permutations of 3 sitesCt,Cr,Ch. There are two permutation groups generated by cyclic permutations of(CtCrCh)and(CtChCr). Due to symmetry, it suffices to consider only one of the two, since the bisector of two sites is independent of the order in which the sites are considered. However for the oriented bisector (mapped to(0,1)), points at infinity are reversed. Therefore we have the following equivalences:Str(Ch)=∅⇔Srt(Ch)=∅,Str(Ch)=(0,1)⇔Srt(Ch)=(0,1),Str(Ch)=(0,a)⇔Srt(Ch)=(b,1),Str(Ch)=(b,1)⇔Srt(Ch)=(0,a),Str(Ch)=(a,b)⇔Srt(Ch)=(a′,b′),Str(Ch)=(0,a)∪(b,1)⇔Srt(Ch)=(0,a′)∪(b′,1).Next, we show that a form ofStr(Ch)implies a form ofSrh(Ct)and a form ofSht(Cr). For each permutation in the cyclic group, consider the shadow region of the third element with respect to the first two. That is for the cyclic group(CtCrCh)we consider(Str(Ch),Srh(Ct),Sht(Cr)), cf. columns C, E, G of Table 1. Due to the cyclic symmetry, all cyclic permutations of the shadow region forms are possible. Therefore, if we prove that(Str(Ch),Srh(Ct),Sht(Cr))can be(∅,∅,(0,1)), then it can also be(∅,(0,1),∅)or((0,1),∅,∅)(cf. rows 1 and 2 of the table).Rows 1 and 2 ofTable 1. LetStr(Ch)=∅. Then,Srh(Ct)andSht(Cr)are equal to either ∅ or(0,1). If this was not the case, there would exist an endpoint of some shadow region, not equal to 0 or 1, which would be associated with a (tritangent) Voronoi circle. Such circles are always associated with points of the shadow region inside(0,1). This is a contradiction, sinceStr(Ch)=∅. Moreover, it has to be thatSrh(Ct)≠Sht(Cr). Because ifSrh(Ct)=Sht(Cr)=∅, then the Voronoi diagram of the three sites consists of three non-intersecting infinite edges (bisectors). This subdivides the plane into four disjoint cells associated with three sites, which forces a Voronoi cell of some site to consist of two disjoint cells according to the pigeonhole principle. This is a contradiction, because every Voronoi cell is connected in abstract Voronoi diagrams. Similarly, ifSrh(Ct)=Sht(Cr)=(0,1), then the Voronoi diagram consists of a single bisector that subdivides the plane in two cells. This is a contradiction, since each site should be associated with a different Voronoi cell. Therefore, the only possible cases of the shadow region are those presented in rows 1 and 2 of Table 1.Rows 3 and 4 ofTable 1. LetStr(Ch)=(0,a). Then, the endpoint a is associated with a Voronoi vertex which is the center of a Voronoi circle. Since there exists only one Voronoi vertex, the form ofSrh(Ct), andSht(Cr), is either(0,a)or(b,1); as it has to contain exactly one endpoint which is not at infinity. It follows thatSrh(Ct)=Sht(Cr)=(0,a), becauseStr(Ch)=(0,a)⇒ the part(0,a)of the oriented bisector ofCtandCris destroyed ⇒ part(a,1)remains ⇔ part(0,a)of the oriented bisector ofCrandCtremains ⇒ part(0,a)of the oriented bisector ofCrandChis destroyed ⇒Srh(Ct)=(0,a). This argument justifies line 3 of Table 1 and by symmetry, line 4.Rows 5 and 6 ofTable 1. LetStr(Ch)=(a,b). Since there exist exactly two Voronoi vertices, the form ofSrh(Ct)andSht(Cr)is either(a,b)or(0,a)∪(b,1); as it has to contain two endpoints not at infinity. IfSrh(Ct)=Sht(Cr)=(a,b), then the Voronoi diagram consists of 3 infinite bisectors of two connected components, whose finite endpoints coincide pairwise (if this was not the case, then we would have more than 2 Voronoi vertices, which is a contradiction). This is also not possible as those 3 infinite bisectors would subdivide the plane into 5 cells, while the Voronoi diagram of the three sites has only 3 cells. In the same spirit, ifSrh(Ct)≠Sht(Cr)andSrh(Ct)=(0,a)∪(b,1), then the Voronoi diagram consists of 2 infinite bisectors of two connected components, the finite endpoints of which coincide pairwise, and 1 finite bisector connecting the endpoints of the other two. Such a Voronoi diagram contains 4 cells which is again a contradiction. Therefore,Srh(Ct)=Sht(Cr)=(0,a)∪(b,1)that yields a Voronoi diagram with 3 cells. This justifies lines 5 and 6 of Table 1 and concludes the proof.  □The total number of cases in Table 1 is 8. It suffices to evaluate DFB on the cyclic permutations of three sites to determine the form of the shadow region, as well as to compute the number of Voronoi circles (i.e. the number of vertices of the Voronoi diagram of three sites), cf. columns (A, B) of Table 1. Up to this point, we have silently assumed that all three sites contribute to the Voronoi diagram (i.e. there are no hidden sites). In Section 4.4, we present an approach to handle hidden sites, as well.Lemma 9Vertex conflict can be decided by looking at the ordering of the tangency points of Voronoi circlesVtrs,VtrhandVthronC(t).ProofIt follows from Definition 7 and the fact that Voronoi circles are associated with the endpoints of the shadow region.  □To conclude, EdgeConflictType determines the type of the conflict-region, by computing the type of intersection of each edge of the Voronoi diagram (represented by an interval[a,b]) with the shadow region. This type of intersection is called edge conflict type. Like shadow region, the edge conflict type may have one out of six possible forms: ∅,(a′,b′),[a,b′),(a′,b],[α,b′)∪(a′,b]and[a,b].At some parts of the algorithm, it is required to know whether the CCW Voronoi circleVtrsexists or not, for example to determine the type of shadow region, in order to decide how to update the diagram upon insertion of a new site. This is a generalization of the Existence predicate (Emiris and Karavelas, 2006) to pseudo-circles.There is a straightforward way to determine ifVtrsexists. Solve the algebraic system and look forVtrs. If it is not found, then we may conclude thatVtrsdoes not exist. However, this is non-practical and we have already shown that we can decide whether a Voronoi circle exists or not, using only the DFB predicate. Here we show that we can also determine its type (i.e. external or internal).Clearly, when sites do not intersect, there cannot exist an internal Voronoi circle. When sites intersect in pseudo-circles, we first have to determine whether a site is hidden by one or more other sites. This is performed by a process called medial axis location, described in Karavelas and Yvinec (2003b). We mention it here for completeness, along with some issues concerning the implementation. LetM(Ct)denote the medial axis of siteCt. We say that a point p ofM(Ct)is covered by some siteCiif the maximal disk inCtcentered at p is included in the interiorCi∘. If all pointsM(Ct)are covered, we say that siteCtis hidden and all sitesCithat have been covering points ofM(Ct)form a covering set ofCt. Due to the fact that each point p ofM(Ct)is associated with at least two footpoints on the boundary,C(t), and the fact that the medial axis is a tree (for simple closed shapes), we can start from a leaf vertex of the medial axis and represent the covered part by an arc on theC(t). Note that medial axis location becomes trivial when a site is fully contained in another one, as we can immediately deduce that it is hidden. Fig. 6 (case (2d)) shows an example of three intersecting ellipses where one of them is hidden by the other two and therefore it does not contribute to the Voronoi diagram.In the case of ellipses, the medial axis is part of the major axis, more precisely the segment joining the centers of the circles of maximum curvature (foci of the ellipse). Due to the pseudo-circles intersection, the covered part of the medial axis always contains an endpoint (leaf vertex) (Karavelas and Yvinec, 2003a, Theorem 4), and can therefore be represented by an arc. We use a variation of system (2) to represent the footpoints of points p that correspond to the covered part of the medial axis. In the case of ellipses, they are represented as algebraic numbers of degree 16.The following lemma combines Table 1 and location of medial axis, to correctly determine the existence and type (internal or external) of Voronoi circles in the case of hidden sites.Lemma 10Given sitesCt,Cr,Cs, let κ be the number of conflicts of DFB, when evaluated at triplets(Ct,Cr,Cs),(Cr,Cs,Ct)and(Cs,Ct,Cr). Then (i) ifκ<2thenVtrsdoes not exist. (ii) Ifκ=2then: (a) ifCt∩Cr∩Cs=∅, thenVtrsexists and is external. (b) otherwise,Vtrsexists iff there are no hidden sites and it is internal iff there exists a[t,r,s]sequence of arcs on the boundary of the intersection (i.e. a CCW sequence of arcs belonging toCt,CrandCsrespectively). (iii) Ifκ=3thenVtrsexists; it is internal iffCt∩Cr∩Cs≠∅.Proof(i)κ<2. From Table 1 we see thatκ<2holds only for cases (1), (2) and (3), where the shadow region is of the form ∅,(0,1)or(0,a)respectively. When the shadow region is ∅ or(0,1), it is obvious that no Voronoi circle exists. We see that the remaining case(0,a)is associated with a circle of opposite orientation (Vtsr). ThereforeVtrsdoes not exist. See also Fig. 6, case (0), where sitesCt,Cr,Cscorrespond to labels 1, 2, 3 resp., as well as case (1), where sites correspond to labels 1, 3, 2 resp.(ii)κ=2. Without loss of generality we may assume thatDFB(Ct,Cr,Cs)⩾0andDFB(Cs,Ct,Cr)<0(cf. case (5) of Table 1, we donʼt have to consider case (6) since that one is a cyclic permutation of (5)). (a) CaseCt∩Cr∩Cs=∅. It is obvious that in this case,Vtrscannot be internal. It follows (cf. Fig. 6, case (2a)) thatVtrsexists and is external (in fact, the other Voronoi circle,Vtsr, exists as well, since the shadow region is of the form(a,b), therefore these endpoints have to be associated with a Voronoi circle each). (b) CaseCt∩Cr∩Cs≠∅. Given the possible cases of the Voronoi diagram of three sites (Fig. 6(2b), (2c), (2d)) we have that ifCsis hidden (figure case (2d)) thenVtrsdoes not exist; otherwise, ifCsis not hidden, thenVtrsexists, since the shadow region is of the form(a,b).Vtrsis internal in this case iff there exists a[t,r,s]sequence of arcs (true for figure cases (2b), (2c) when sitesCt,Cr,Cscorrespond to labels 1, 2, 3 resp., but false for figure case (2b), when sites correspond to labels 2, 1, 3 resp.).(iii)κ=3. From Table 1 we see thatκ=3holds only for case (4), where the shadow region is of the form(b,1)andVtrsalways exists in this case, since it is associated with endpoint b of the shadow region. Now ifCt∩Cr∩Cs=∅,Vtrsshould necessarily be external, since it exists. Otherwise, in the case of common intersection,Vtrsshould be internal, because we know that only one Voronoi circle exists (since it is associated with endpoint b of the shadow region) and moreover, pairwise bisectors ofCt,CrandCr,Csintersect and their point of intersection (center of Voronoi circle) lies in the intersection of all three sites (cf. case (1b) of Fig. 6).  □This section describes our efficient, complete, and exact implementation for ellipses in the plane, possibly intersecting as pseudo-circles (Fig. 1), based on the algorithms we presented in the previous sections. We exploit the efficiency of our implementation on various datasets.Our code is based on the existing cgal Apollonius package for the combinatorial part of the algorithm. cgal follows the generic programming paradigm and so the main issue is to implement the predicates for ellipses by generalizing the ones for circular sites. Some minor modifications in the combinatorial part of the algorithm are required in order to handle hidden ellipses correctly. A circle is hidden iff it is contained in some other circle. However, for more general convex objects, such as ellipses, a site can be hidden without necessarily being fully contained in another one (cf. Section 4.4 and Fig. 6(2d)).Our implementation requires an extensive set of algebraic and arithmetic tools, including interval arithmetic, algebraic number representation, multivariate polynomial representation, and multivariate resultant computation. The most demanding predicate is InCircle and in the sequel we elaborate on the main design and implementation choices that we incorporate for its realization.To answer quickly non-degenerate cases of InCircle we adopt the subdivision-based algorithm of Emiris and Tzoumas (2008). If a Voronoi circle exists, the algorithm will converge to it quadratically (although, for arbitrary intersecting smooth curves, when we are interested in an internal Voronoi circle, the convergence of the subdivision-based algorithm might not be quadratic). We implement this algorithm using interval arithmetic of multi-precision floating point numbers that cgal provides through the libraries mpfi and mpfr.55http://www.mpfr.org/.We no longer rely on alias or mathemagix66http://www.mathemagix.org/.as in Emiris et al. (2009). Using this subdivision-based algorithm, we avoid solving the underlying polynomial system exactly using costly algebraic techniques e.g., resultant computations, and performing the tests of Section 4.2. The subdivision step integrates these tests and provides a quick and certified evaluation InCircle. At the heart of the subdivision method we have implemented a univariate interval Newton solver, that handles polynomials with interval coefficients. This allows us to solve quickly multivariate equations by plugging in interval approximations for each variable.However, when mpfr precision is not sufficient (i.e. when there exists a degenerate Voronoi circle, tangent to 4 sites), we fall back to the exact algebraic method (cf. Theorem 3). Because, even though the subdivision algorithm can approximate the tangency points that correspond to the Voronoi circle up to any precision, degenerate cases cannot be decided by merely a subdivision algorithm (in the case of equal algebraic numbers, the enclosing intervals will always intersect which makes it impossible to separate the numbers). The resultant provides us the true separation bound (for more details we refer the reader to Emiris and Tzoumas, 2008) and therefore a stopping criterion. This is due to the fact that the (slower) resultant computation provides a polynomialR(t)while the subdivision method converges to some root of R without knowledge of R. In the presence of degeneracies, where equal algebraic numbers are to be expected, knowledge of the polynomials provides a means to determine such equality; the subdivision algorithm by itself is insufficient.Such a combined approach can be seen from a more general perspective. We perform “difficult” algebraic operations using interval arithmetic as a filter. When degeneracies or near-degeneracies occur, this leads to uncertain sign evaluations, that prevent us from deciding the corresponding predicates. In this case, resultant computations provide us with the necessary information to decide. They determine the exact number of bits we need to decide the predicate. Almost always, we have to increase the precision by a constant number of bits, that is orders of magnitudes less than the number of bits predicted by the theoretical separation bound.Finally, we have implemented a visualization algorithm for the bisector of two ellipses. The implicit equation of the bisector has total degree of 28 in the Cartesian space, that makes it impossible to handle numerically. To overcome this obstacle we trace the equivalent implicit curve in parametric space, where the degree is 12. This approach works quite well in practice. The bisectors in Fig. 1 were traced and sketched using this visualization routine.Overall, the design of our software package is generic and distinguishes the geometric from the algebraic computations. This is an important feature, that allows us to connect and interact with various algebraic software libraries as long as certain interface requirements are satisfied. Our final goal is to submit our implementation as a cgal package, making it an official part of the library in one of the coming future releases.In this section, we present various experimental results. All runtimes are obtained on a Core 2 Duo (T7200) 2.0 GHz machine with 2 GB of RAM, running Debian GNU/Linux 6.0 (Squeeze). We have measured the performance of SoB, DFB and InCircle with varying bitsize. Fig. 7(top) corresponds to ellipses with randomly perturbed coefficients (axes, rotation and center of ellipses) by adding/subtracting10−e, where e varies. This forces the polynomials computed during each predicate evaluation to have coefficients of very large bitsize, since these coefficients depend on the input coefficients (axes, rotation, center) which are now perturbed. All runtimes appear to grow sub-quadratically (almost linearly in non-degenerate cases) in e. This is expected since SoB, DFB have constant arithmetic complexity (in terms of the bitsize of the polynomials that occur in the computations). Looking closely at Fig. 7, we see that non-degenerate and degenerate cases for SoB and DFB are decided extremely fast; it takes about 1 second for input coefficients of 1600 bits (DFB is decided somewhat faster than the other ones). However, runtimes for near-degenerate cases scale more rapidly due to the fact that near-degenerate cases trigger a big number of subdivision steps for comparing algebraic numbers. For example, we decide in about 20 seconds when the coefficients have 1600 bits. We should point out that our Algebraic Kernel benefits from constant arithmetic complexity algorithms for computing with algebraic numbers of degree up to 4, as they are implemented in mathemagix. Unfortunately such algorithms are yet to be found for higher degree numbers.The performance of the first two predicates in near-degenerate cases is equivalent to that of InCircle in both non-degenerate and near-degenerate cases. This comes as no surprise, because the implementation of InCircle always uses a subdivision-based scheme to quickly approximate the solution of system (2).We have measured the time needed for the subdivision algorithm to reach a precision of2−b, using mpfr floats, in Fig. 8, top (top and right axes). The x axis shows the numberb/1000, i.e., the precision achieved in Kbits. Since the algorithm exhibits quadratic convergence, it computes τ bits inO(logτ)iterations. Standard floating point precision (53-bits) is achieved in about 30 miliseconds (and 7 iterations, due to the quadratic convergence), and 1 second suffices for almost 6000 bits of precision (14 iterations), whereas a 50-Kbit approximation takes about 40 seconds (17 iterations). This shows that while one can achieve enormous precision, the theoretical separation bound of several million bits (Emiris et al., 2008) cannot be attained efficiently, hence the usefulness and the importance of resultant-based methods. Therefore, in the case of degeneracies, the runtime of InCircle is dominated by the resultant computation, shown in Fig. 8, top (bottom and left axes). We observe that the resultant computation, even with 10-bit input coefficients, takes about 4 seconds to compute, i.e., 100 times slower than the subdivision algorithm using standard floating point precision of2−53. However, the algorithm is guaranteed to terminate in the case of degeneracies, while the subdivision scheme will run forever (trying to achieve the separation bound of several million bits, computing with numbers of huge precision). In short, both methods have to be combined for an exact, robust and efficient implementation.The overall time for the construction of the Voronoi diagram (and the structure representing its dual graph) is shown in Fig. 8, bottom. It takes, for instance, 63 seconds to compute the exact Voronoi diagram of 200 non-intersecting ellipses. More importantly, it is about linear in the number of sites. The runtime for intersecting ellipses is affected heavily by the number of times that location of medial axis has to be performed, as a resultant is being computed in that case. This fact suggests that we could benefit again from a subdivision scheme, as for InCircle. Fig. 9shows the Voronoi diagram of 15 intersecting ellipses with 10-bit coefficients, as computed by our implementation. The runtimes vary between 1 and 5.5 seconds. Fig. 6 was also generated by our implementation and shows a few more instances of intersecting ellipses, i.e., the possible cases of the Voronoi diagram of 3 ellipses.Currently, we are trying to parallelize several parts of the implementation to take advantage of modern multi-core technologies in order to boost performance. We have already adjusted the drawing routine of the bisectors. Since the Delaunay graph is stored in memory, the drawing routine has to visualize the bisectors one by one. This is currently performed in a parallel loop using OpenMP.77http://www.openmp.org/.Parallelization may require modifications to cgal itself. For example, the evaluation step in the resultant computation by interpolation which is performed by the Algebraic Kernel, can be done in parallel. We also perform some other optimizations like caching the outcome of expensive predicates, in the case they are reused. For instance, during the construction of the diagram, InCircle quickly approximates Voronoi circles (i.e. bisector endpoints). These are stored and are readily available for the drawing routine as starting points to begin tracing.An alternative way to solve problems with curved sites is to approximate them by simpler objects such as polygons or even sets of points. However, a good approximation may require a large number of input sites. Each ellipse is approximated by a constant number of k points taken uniformly on its boundary (cf. Fig. 10, left and middle). These points have rational coordinates, as they are obtained using (1). Using GNU rational arithmetic88http://gmplib.org/.(Gmpq in cgal), we compare against 4 variations of the incremental algorithm of cgal for the Delaunay triangulation: (i) without filtering,99Filtering is a technique where the predicates are answered using double arithmetic, falling back to slower exact arithmetic only when the filter fails to produce an answer. This implies that there is some mechanism of determining that the outcome of the filter is correct or not.(ii) with filtering, (iii) with filtering and improved nearest neighbor location: points are inserted in CCW order for each ellipse, so the Delaunay face of the lastly inserted point is given as a hint for the insertion routine, (iv) with filtering and spacial sorting.Our own implementation for ellipses uses Gmpq but no filtering, except for InCircle that uses the subdivision-based method. This means that the whole implementation could be accelerated further if filtering is implemented in all predicates.Fig. 11, left, presents results concerning 50 ellipses, with k varying from 120 to 1250. We see that the Delaunay graph computation of 50 ellipses is faster for variations (i), (ii), (iii), (iv) of the Delaunay triangulation of points fork⩾120,k⩾160,k⩾320andk⩾1250respectively. The corresponding Delaunay triangulation have 600, 800, 1600 and 6250 vertices respectively. There are Delaunay edges corresponding to pairs of points on the same ellipse (with dual Voronoi edges in the ellipsesʼ interior). These should be discarded which induces an extra overhead not measured. This is also true for all but one Delaunay edge between neighboring ellipses.We compare against the cgal package for the segment Voronoi diagram (more precisely, the segment Delaunay graph (Karavelas, 2004)). The cost of an insertion is roughlyO(log2k), where k is the number of already inserted sites. We replaced each ellipse by a polygon (cf. Fig. 10, left and right). Care has been taken to perform smartly the nearest neighbor queries. In particular, since each segment is added in CCW order around each ellipse, a probable nearest neighbor is the lastly inserted segment. This is given as a hint to the insertion routine. In these benchmarks, the segment Delaunay implementation uses Gmpq arithmetic and no filtering.Fig. 11, right, shows the time required to construct the Voronoi diagram of 50 ellipses (white bar) and that of 50 polygons approximating each ellipse with 16, 20 and 64 edges (gray bar). Interestingly, the Delaunay graph of polygons is slower with >15 segments per ellipse. As the number of edges per ellipse increases, the squared-logarithmic cost per insertion becomes non-negligible.While our c++ implementation covers only ellipses for now, we have applied the proposed approach for the resultant computation on various types of curves using maple. Some preliminary results are summarized in Table 2. The first column shows the type of curve, the second its degree, the third the time in seconds, the fourth the degree of the resultant and the last column shows the (non-tight) bound of our general formula from Corollary 5. First, we took the bean curve and applied simple affine transformations yielding very small (5-bit) coefficients. We computed the resultant of such triplets. The long runtimes indicate that working with high-degree curves requires very efficient implementations in order to be practical. We additionally considered the case of 3 random conics with small (10-bit) coefficients. In this case whered=2, we have a tight bound of 184, while the general formula yields 512. We also tested the resultant computation on polynomial branches of degree 2 and 3 (B-splines), with very small (5-bit) coefficients. The runtime is less than 1 second ford=2and less than 10 seconds whend=3. These experiments indicate that an efficient exact implementation may still be possible for larger bitsizes, and we can benefit from the increased flexibility that piecewise functions offer (with a trade-off between the total number of non-linear objects and the complexity of the algebraic operations).

@&#CONCLUSIONS@&#
