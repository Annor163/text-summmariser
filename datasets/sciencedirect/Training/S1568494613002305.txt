@&#MAIN-TITLE@&#
Multiobjective fireworks optimization for variable-rate fertilization in oil crop production

@&#HIGHLIGHTS@&#
An evolutionary algorithm named MOFOA is proposed, which is the first study that extends the relatively new fireworks optimization heuristic for multiobjective optimization.Differential evolution operators are integrated into the algorithm to diversify the search.The algorithm is successfully applied to a number of oil crop variable-rate fertilization (VFR) problems, including a real-world application in east China.

@&#KEYPHRASES@&#
Multiobjective optimization,Precision agriculture,Variable-rate fertilization (VRF),Fireworks optimization algorithm (FOA),Differential evolution (DE),Hybrid optimization method,

@&#ABSTRACT@&#
Variable-rate fertilization (VRF) decision is a key aspect of prescription generation in precision agriculture, which typically involves multiple criteria and objectives. This paper presents a multiobjective optimization problem model for oil crop fertilization, which takes into consideration not only crop yield and quality but also energy consumption and environmental effects. For efficiently solving the problem, we propose a hybrid multiobjective fireworks optimization algorithm (MOFOA) that evolves a set of solutions to the Pareto optimal front by mimicking the explosion of fireworks. In particular, it uses the concept of Pareto dominance for individual evaluation and selection, and combines differential evolution (DE) operators to increase information sharing among the individuals. The experimental tests and real-world applications in oil crop production in east China demonstrate the effectiveness and practicality of the algorithm.the number of fieldsthe number of types of fertilizerthe (average) gradient of field ithe (average) plant density of field ithe unit price of fertilizer jthe dosage of fertilizer j in field ithe inherent quantity of fertilizer j in field ithe residual of fertilizer j in field ithe function for estimating the crop yieldthe function for evaluating the crop qualitythe function for estimating the cost of fertilizationthe function for estimating the energy consumption of fertilizationthe function for estimating the residual fertilizer

@&#INTRODUCTION@&#
Variable-rate fertilization (VRF) decision problem is concerned with specifying the dosage of each type of fertilizer for the crop(s) in each field. Traditional VRF problems are typically described as a single-objective model maximizing crop yield or the rate of yield to cost. Nevertheless, different VRF solutions may cause very different impacts not only on crop yield, but also on crop quality, soil quality, as well as other aspects of the environment. In modern precision agriculture systems, VRF decision should take both economical and ecological effects into consideration and thus should be modeled as an optimization problem with multiple objectives and constraints.In a multiobjective optimization problem (MOP), there are often conflicts among various objectives and it is impossible to find a single solution that is optimal in terms of all objectives. Therefore, it is preferable to search for a set of Pareto optimal or non-dominated solutions, i.e., there is no solution that is better than another solution in all objectives. Multiobjective models are first introduced to irrigation decision in agricultural practices. Raju and Kumar [1] studied the irrigation problem with three conflicting objectives including net benefits, agricultural production, and labor employment. They employed a constraint method that successively optimizes each individual objective while all the others are constrained. Chen et al. [2] presented a fuzzy irrigation problem model which divides the period of growth into multiple stages and considers two objectives including the crop yield and the risk of shrivel. They used a weighted function to combine the two objectives, and applied a multi-dimensional dynamic programming approach to solve the problem stage by stage. However, methods like the constraint and the weighted sum transform the problem to a single-objective one and do not simultaneously evolve all the objectives. Kilic and Anac [3] considered a problem of increasing the benefit from production, increasing the total area irrigated and reducing the water loss, and used a mathematical programming method to solve it; but the three objectives have a close relationship and generally do not conflict each other.In recent years, multiobjective models and algorithms have been introduced for fertilization decision problems. Wang and Zhang [4] presented a model of multiobjective rice fertilization, and employed a linear approximation iteration method to solve the problem. However, such programming methods are only efficient for small-size problems, which has motivated many researchers to use more effective heurisic algorithms. When solving a generalized fertilization problem, Yuan et al. [5] applied the genetic algorithm (GA) and introduced a reduction factor into the fitness function to improve convergence efficiency; but they did not employ the multiobjective evolution strategy in the algorithm. Some researchers (e.g., [6,7]) also used neural network approaches for fertilization decisions, in which fertilizer variables are used as network inputs and objective values are used as network outputs; nevertheless, the topology design and optimal weights search remain a main difficulty in algorithm implementation.Multiobjective evolutionary algorithms (MOEA) have been considered as one of the most effective approaches to MOP, mainly because they deal simultaneously with a set of possible solutions (the so-called population) which allows to find several members of the Pareto optimal set in a single run of the algorithm, and their applicabilities are less susceptible to the shape or continuity of the Pareto front [8]. A variety of Pareto-based MOEA have been proposed in the last decade, including the non-dominated sorting genetic algorithm (NSGA) [9] and NSGA-II [10], the strength Pareto evolutionary algorithm (SPEA) [11] and SPEA2 [12], the Pareto archived evolution strategy (PAES) [13], the Pareto differential evolution algorithm (PDE) [14], the non-dominated sorting particle swarm optimizer (NSPSO) [15], the constrained nonlinear multiobjective optimization immune algorithm (CNMOIA) [16], the co-evolutionary particle swarm optimization algorithm (CCPSO) [17], the dominating-tree based multiobjective evolutionary algorithm (DTEA) [18], the adaptive multiobjective particle swarm optimization algorithm (MO-TRIBES) [19], the hybrid MOEA with two crossover operators [20], the multi-objective endocrine particle swarm optimization algorithm (MOEPSO) [21], etc. These methods have attracted much attention among researchers and shown promising results for many practical problems [22–24].For example, Niknam et al. [25] applied an MOEA for volt/var control in distribution networks, which simultaneously and effectively minimize electrical energy losses, voltage deviations, total electrical energy costs, and total emissions of renewable energy sources and grid. In [26] Ahmadi et al. used an MOEA for optimal design of a polygeneration energy system, which considers minimizing total cost rate of the system while maximizing the system exergy efficiency. Studies on the application of MOEA in the field of sustainable and renewable energy can also be found in [27–31,24]. However, the studies of MOEA in fertilization decision problems are very few. The only report we found was that by Reddy and Kumar [32], where an MODE approach was proposed for the simultaneous evolution of optimal cropping pattern and operation policies for a multi-crop irrigation reservoir system, and the result provides a wide spectra of Pareto optimal solutions and gives sufficient flexibility to select the best irrigation planning and reservoir operation strategy.Fireworks optimization algorithm (FOA) [33] is a relatively new heuristic method inspired by the phenomenon of fireworks explosion. The algorithm selects in the search space a certain number of locations, each for exploding a firework to generate a set of sparks (new solutions); the fireworks and sparks with good performance (fitness) are chosen as the locations for the next generation's fireworks, and the evolutionary process continues until a desired result is obtained. Numerical experiments on a number of benchmark functions show that FOA can converge to a global optimum with a much smaller number of function evaluations than that of particle swarm optimizers [34,35]. Recently Zheng et al. [36] develop an improved version of FOA by introducing differential evolution (DE) operators [37] to improve the population diversity. However, to our best knowledge, there is still no research on the application of fireworks optimization in multiobjective problems.The motivation for this paper derives from our precision agriculture practices on oil crop production in east China. The government and the agronomists try to guide the farm managers to achieve balance not only between expected profits and potential risks but also between short-term profits and long-term profits. We establish multiobjective optimization models for oil crop fertilization problems, and try to solve the problems based on different heuristic methods, among which we find that the multiobjective fireworks optimization algorithm (MOFOA) has more advantages over other methods on the efficiency and effectiveness. The proposed MOFOA employs a problem-specific strategy for generating the initial population, uses the concept of Pareto dominance for individual evaluation and selection, combines the DE operators including mutation, crossover, and selection to increase the information sharing among the population, and thus significantly decreases the computational cost and improves the quality of result solution set. The main contributions of the paper can be summarized as follows:•It establishes a multiobjective VRF problem that is of practical interest in precision agriculture.It firstly studies the extension of FOA in MOP.The proposed MOFOA outperforms some state-of-the-art methods on a set of real-world VRF problems.In the remainder of the paper, we give the multiobjective oil crop VRF problem in Section 2, and present the MOFOA algorithm for the problem in Section 3. Section 4 describes the computational experiments, Section 5 discusses the results, and Section 6 concludes.Different VRF decisions significantly affect the production of oil crops and the ecological conditions of environment. Besides the yield of crops and the cost of fertilizers, here we are also concerned with overall crop quality, energy consumption, and residual fertility.The problem is to determine a dosage matrixx=(xij)m×n, i.e., the dosage of each fertilizer in each field. For a given field i, the expected crop yield can be estimated by a fertilizing effect function Yi(x). There are a number of models for describing the relationship between yield and fertilizer, among which the most widely used form of Yiis a quadratic function as follows [38]:(1)Yi(x)=∑j=1n∑k=1naijkxˆijxˆik+∑j=1nbijxˆij+ciwhere aijkis the quadratic regression coefficient, bijis the simple regression coefficient, ciis the constant coefficient, andxˆij=xij+xij0, i.e., the sum of the dosage of fertilizer xijand the inherent fertilityxij0in the field.11For the fields with the same or similar soil conditions, their equations can have the same coefficients. This is also the case for some coefficients in the following computational equations.A crop usually has a number of quality criteria, e.g., protein content, oil content, crop density, etc. In many cases, a majority of such criteria are not contradictory to each other, and thus we can establish a fertilizing effect function to evaluate the comprehensive quality index. Such a function can also be modeled by a quadratic regression equation as follows:(2)Qi(x)=∑j=1n∑k=1naijk′xˆijxˆik+∑j=1nbij′xˆij+ci′whereaijk′,bij′, andci′are regression coefficients.In case there are indeed conflicts between some quality criteria, then we can establish a set of quality sub-indices, e.g., Q′, Q″, etc., and construct a computational model for each of them.Given unit price pjfor each fertilizer j, the total fertilizer cost can be computed as:(3)C(x)=∑i=1m∑j=1npjxijAnd we use the following empirical formula to estimate the energy consumption of crop fertilization based on the gradient αiand plant density diof each field i (where λ is a constant coefficient):(4)Ei(x)=λ∑j=1nαidi(1/3)xijFor agricultural soil, the residual fertility is an important criterion to evaluate the soil quality. A simple formula to estimate the residual of fertilizer j in field i is as follows [39]:(5)yij=μjxij+νjxij0where μjand νjare coefficients relevant to the characteristics of the fertilizer.22If the soil conditions vary greatly from the different fields, we may need to define the coefficients μijand νijfor not only different kinds of fertilizer but also different fields. However, the goal is to improve the homogeneity of fertilizer content among the fields with the same or similar soil conditions.Therefore, the homogeneity of residual fertilizer j in the planting area can be computed as:(6)Rj(x)=∑i=1m(yij−y¯j)2wherey¯j=(∑i=1myij)/m.Based on above analysis, we model the multiobjective optimization VRF problem for oil crop production as follows:(7)maxQ(x)=∑i=1mYi(x)Qi(x)(8)minC(x)=∑i=1m∑j=1npjxij(9)minE(x)=∑i=1mEi(x)(10)s.t.∑i=1mYi(x)≥YL(11)∑i=1m∑j=1npjxij≤CU(12)∑j=1nRj(x)≤RU(13)xij≥0∀i=1,2,…,m;∀j=1,2,…,nwhere YL is the lower limit of the total crop yield, CU is the upper limit of total fertilizer cost, and RU is the upper limit of the fertilizer residual homogeneity index. In general, (7)–(13) constitute a non-linear multiobjective programming problem.The above problem is difficult to solve using traditional approaches such as mathematical programming and branch-and-bound algorithms, since we need to simultaneously evolves multiple objectives towards the Pareto-optimal front. In this section we propose a novel MOFOA, which will be compared to some competitive MOEA in the next section. First we simply introduce the basic fireworks optimization algorithm for single-objective problems.FOA is a hueristic algorithm inspired by the phenomenon of fireworks explosion. At each generation, the algorithm selects some quality points as fireworks, which generates a number of sparks to search the local space around them. The evolutionary process continues until at least one spark reaches a desired optimum, or the stopping criterion is met.In the algorithm presented in [33], the number of sparks and the amplitude of explosion for each firework xiis respectively defined as follows:(14)si=sm·fmax−f(xi)+ϵ∑i=1p(fmax−f(xi))+ϵ(15)Ai=Aˆ·f(xi)−fmin+ϵ∑i=1p(f(xi)−fmin)+ϵwhere smandAˆare control parameters, p is the size of the population, fmaxand fminare respectively the maximum and minimum objective values among the p fireworks, and ϵ is a small constant to avoid zero-division-error.To avoid overwhelming effects of splendid fireworks, lower and upper bounds are defined for sisuch that:(16)si=sminifsi<sminsmaxelse ifsi>smaxsielseFor a D-dimensional problem, the location of each spark xjgenerated by xican be obtained by randomly setting z directions (z<D), and for each dimension k setting the componentxjkbased onxik(1≤j≤si, 1≤k≤z). There are two ways for settingxjk. For most sparks, a displacement hk=Ai·rand(−1, 1) is added toxik, i.e.:(17)xjk=xik+Ai·rand(−1,1)To keep the diversity, for a few specific sparks, an explosion coefficient based on Gaussian distribution is applied toxiksuch that:(18)xjk=xik·Gaussian(1,1)In both the ways, if the new location falls out of the search space, it is mapped to the search space as follows:(19)xjk=xmink+xjkmod(xmaxk−xmink)At each iteration of the algorithm, among all the current sparks and fireworks, the best location is always selected as a firework of the next generation. After that, p−1 fireworks are selected with probabilities proportional to their distances to other locations.There are a variety of fitness assignment strategies for MOEA, and in the MOFOA we employ a strategy based on the Pareto strength used in SPEA2 [12]. That is, for an individual solution xiin the population P or in the non-dominated solution archive NP, a strength value s(xi) is calculated according to the number of other individuals it dominates:(20)s(xi)=|{xj∈P∪NP|xi≻xj}|where ≻ denotes the Pareto dominance relation. And the raw fitness value of xiis determined by the strengths of its dominators:(21)r(xi)=∑(xj∈P∪NP)∧(xj≻xi)s(xj)It should be noted that the fitness is to be minimized here. A density value of xiis then calculated by (22) and incorporated into the fitness by (23):(22)d(xi)=1σk(xi)(23)f(xi)=r(xi)+d(xi)where σk(xi) is the distance from xito its kth nearest individual, and k is typically set to equal to the square root of sample size |P∪NP| [40].In addition, if a solution violates the problem constraints (10)–(12), we respectively compute the degrees of constraint violations:(24)υY(xi)=YL−∑i=1mYi(xi)if∑i=1mYi(xi)≤YL0else(25)υC(xi)=C(xi)−CUifC(xi)≥CU0else(26)υR(xi)=∑j=1nRj(xi)−RUif∑j=1nRj(xi)≥RU0elseand multiply the fitness value by a penalty coefficient p(xi) as follows:(27)p(xi)=w1υY(xi)+w2υC(xi)+w3υR(xi)wherew1,w2andw3are three predefined weights.As most MOEA, MOFOA maintains two collections of solutions: a population P and a non-dominated solution archive NP, and at each algorithm iteration selects non-dominated solutions from P to update NP. However, in MOFOA such update is done twice at each iteration.In detail, for each generation of population P, we explode its individuals (fireworks) to generate a number of sparks according to the method described in Section 3.1, compute their fitness values, and then select those non-dominated sparks to update NP.Afterwards, we randomly select p solutions from all the fireworks and sparks, where the selection probability of a solution is proportional to its fitness value. For each selected solution xi, the DE operators [37] are applied as follows:(1)(Mutation) generate a mutant solution viby adding the weighted difference between two randomly selected solutions to a third one:(28)vi=xr1+γ(xr2−xr3)where random indexes r1, r2, r3∈{1, 2, …, p} and coefficient γ>0.(Crossover) generate a trial solution uiby mixing the components of the mutant solution and the original one, where each jth component of uiis determined as follows:(29)uij=vijifrand(0,1)<crorj=r(i)xijelsewhere cris the crossover probability ranged in (0, 1) and r(i) is a random integer within (0, N] for each i.(Selection) choose the better one for the next generation by comparing the trial solution with the original one:(30)xi=uiiff(ui)≤f(xi)xielseAt the last step, if the trial solution uiis selected, we test whether it is a non-dominated solution in current generation and, if so, use it to update NP.Now we present the algorithmic framework of MOFOA as follows.1)(1)Initialization.(1.1)Randomly generate a population P of p feasible solutions.Create the empty non-dominated solution archive NP, and select those non-dominated solutions from P to update NP.Iterative improvement.(2.1)For each individual xiin P do:(2.1.1)Calculate sifor xiaccording to Eqs. (14) and (16).Calculate Aifor xiaccording to Eq. (15).Generate sisparks of xiaccording to Eqs. (17) and (19).Generate a specific spark of xiaccording to Eqs. (18) and (19).Compute fitness for all sparks according to Eqs. (20)–(27).Update NP based on the new solutions (sparks).Select p solutions from the fireworks and sparks, where the selection probability of each solution xiis f(xi)/∑j∈Pf(xj).For i=1 to p do:2.3.1)Apply the mutation, crossover, and selection operators to xiaccording to Eqs. (28)–(30) and get a trial solution ui.If the DE result indicates that xiis to be replaced by ui, then use uito update NP.Update P by including the best solution and other p−1 ones randomly selected according to distance-based propability.If the termination condition is satisfied, then the algorithm stops; else go to step 2.1).Typically, the algorithm termination condition can be a maximum number of iterations (generations) or a maximum CPU time. Besides, we can also set a maximum number of non-improvement iterations, i.e., the algorithm stops if it cannot find a new non-dominated solution after certain iterations.The basic algorithm flow is shown in Fig. 1. Next we discuss some implementations details on initial population generation and non-dominated archive maintenance.For many MOEA, it may be difficult to obtain a certain number of initial feasible solutions when the problem is heavily constrained [41]. Here we tackle this issue based on some specific characteristics of the VFR problem. That is, the step 1.1) of the MOFOA can be further broken into the following steps:1.1.1)For i=1 to m, work out the partial solutionxi*such thatYi(xi*)is maximized, and thus obtain a fertilizing matrix(xij*)m×n.LetΔij=(xij*)/q, generate a set of q solutions(Δij)m×n,(2Δij)m×n,…,(qΔij)m×n, and then randomly select p feasible solutions from them as the initial population P.Step 1.1.1) results a (typically infeasible) solution x* maximizing the crop yield, which can be worked out by Gauss–Newton method based on Eq. (1). Next we generate q solutions uniformly distributed between 0 and x*, and randomly select p solutions satisfying constraints (10)–(12) to compose the initial population. According to our experimental data, when q is about 4–5 times the population size p, the number of feasible solutions is larger than p in most cases.Our idea is based on the fact that, for the solution x* maximizing the crop yield, the proportions of fertilizers are usually balanced or reasonable. Therefore, solutions with such fertilizer proportions are more likely to be effective, and starting from such a population can also improve (but not critically affect) the algorithm performance.According to our experiments, the size of archive NP may increase rapidly during the search process, and thus it is reasonable to limit the size of NP, especially for large problem instances. In general, when NP reaches the size limit, a new non-dominated solution can be inserted into NP and an archive one will be removed only if the diversity of NP can be potentially improved by doing that, because the preservation and improvement of diversity of the population is crucial not only to avoid losing potentially efficient solutions but also avoid premature convergence [42].In MOFOA we use the minimum pairwise distance metrics [43] which is of low computational cost. During the search process, whenever NP reaches the size limit, we mark two solutions xa, xb∈NP, the Euclidean distance between which is the minimum among all pairs in NP, i.e.,dis(xa,xb)=minx,x′∈NP∧x≠x′dis(x,x′)And the following procedure is applied for possible inclusion of a new solution x if |NP|=|NP|U:(1)If x is dominated by any x′∈NP, then x is discarded.Else if x dominates some x′∈NP, then remove those x′ and insert x.Else ifminx′∈NP∧x′≠xadis(x,x′)>dis(xa,xb), then remove xaand insert x.Else ifminx′∈NP∧x′≠xbdis(x,x′)>dis(xa,xb), then remove xband insert x.Else choose a closest x1∈NP to x; ifminx′∈NP∧x′≠x1dis(x,x′)>dis(x,x1), then remove x1 and insert x.Else discard x.In this section, we assess the performance of the proposed MOFOA on a set of VRF problems for three kinds of oil crops including Brassica napus (BN or rapeseed), Canarium album (CA or olive), and Camellia oleifera (CO). The BN VRF problem considers two kinds of fertilizers, i.e., N and P, and the CA and CO VRF problem considers three kinds of fertilizers, i.e., N, P, and K. We conduct extensive experiments by comparing with competitive algorithms on the first two kinds of crops, and then apply the MOFOA to a real-world CO VRF problem in east China.We test the MOFOA on the BN and CA VRF problems in comparison with four other MOEA: NSGA-II [10], PDE [14], DE-MOC [44], and NSPSO [15]. The mathematical models for crop yield and/or quality estimation are based on the results from [45,46]. The experiments are conducted on a computer of 4× Intel Xeon X3430 2.4GHz processors and 4×2GB memory. For all the algorithms, the upper limit of the archive size is set to 20, and the maximum number of generations is set to⌈100nm⌉. Moreover, if the algorithm cannot find a new non-dominated solution after 300 continuous generations, it is also stopped. The population size is set to 30 for the MOFOA, 200 for the NSGA-II, and 100 for PDE, DE-MOC, and NSPSO. The penalty coefficient computed by Eq. (27) applies to all the competitive algorithms. For the MOFOA, the DE-related parameters are set as those in [37], and other parameter settings are given in Table 1, which are suggested by our preliminary empirical data.For each crop, we generate 10 problem instances with swarm size m ranges from 20 to 800. On each instance, each algorithm is run 30 times with different random seeds. The performance metrics include:•The CPU time t (s).The hypervolume HV[48] of the result solution set.The coverageC[48], which is a comparative metric on the result sets obtained by different algorithms. Let S1 and S2 be two solution sets, then the coverageC(S1,S2)is defined as the fraction of solutions in S2 that are (strictly) dominated by a solution in S1:(31)C(S1,S2)=|{x2∈S2|∃x1∈S1:x1≻x2}||S2|In the comparative experiments, we calculate the coverage of the result set of MOFOA over that of the four competitive algorithms, denoted byC1,C2,C3, andC4respectively, and the coverage of the result sets of the four competitive algorithms over that of MOFOA, denoted byC′.The experimental results of the BN and CA problems are summarized respectively in Tables 2 and 3, and the variations of CPU time with the problem size are illustrated respectively in Figs. 2 and 3. As we can see, for relatively small-size problems (mn≤200), all the algorithms achieve nearly the same Pareto front, and MOFOA consumes a little more CPU time than NSGA-II, PDE, and DE-MOC. However, with the increase of the problem size, MOFOA shows more and more performance advantages over the other three algorithms. For the problem instances with mn>400, MOFOA always obtains higher quality solution set (in terms of hypervolume and coverage) with less computational time, in comparison with NSGA-II, DE-MOC, and NSPSO. PDE is faster than MOFOA, but the quality of its result sets is far less than that of the MOFOA.In particular, the coverage metrics show that the result solutions obtained by the MOFOA is never dominated by those obtained by the NSGA-II, PDE, and DE-MOC, given that the values ofC′are always zero in the corresponding table columns of the three algorithm. Only on large-size problems, NSPSO occasionally obtains a few solutions that dominate some result solutions of the MOFOA, but the coverage value is always smaller thanC4, and it should be noted that NSPSO consumes much more computational cost than MOFOA. On the contrary, except for some small-size problem instances, there are always a part of result solutions of the competitive algorithms dominated by those of the MOFOA, as indicated by the values ofC1,C2,C3, andC4. For very large problem instances (mn>1000), those values are relatively high, which means that the distance between the Pareto front and the result set of the MOFOA is much closer than those of the other algorithms.For those BN and CA problems where m≥200, we also monitor the variations of HV values with the algorithm iterations, the results of which are presented in Figs. 4 and 5respectively. From the convergence curves we can clearly see that, the performance of the MOFOA overwhelms the other three algorithms. Roughly speaking, the curves of the NSGA-II and the PDE have similar shapes — both are smooth and grow slowly towards the final results. The PDE has the lowest performance among the algorithms, which indicates that its search capability is very limited on the test problems. The performance of the NSPSO is the best in the three competitive algorithms, and its convergence curves grow very fast; In particular, during the early algorithm iterations, the NSPSO occasionally achieve better results than the MOFOA on some large problem instances (for example, see Figs. 4(f) and 5(d) and (f)). Therefore, we can conclude that, the NSPSO has a good search capability, but it is easy to be trapped in the local optima and thus converge prematurely.By comparison, we found that the MOFOA also converges fast, but it can effectively avoid the local optima and guide the search towards the Pareto fronts. In summary, on the test VFR problems, the proposed MOFOA has significant performance advantages over the other competitive algorithms.We apply the MOFOA to a real-world Camellia oleifera VRF problem in Yichun District, Jiangxi Province, east China. The plant area is 585ha and can be partitioned into two parts: 375ha in sunny slope and 210ha in semi-sunny slope, which are further divided into 40 fields and 24 fields respectively according to their gradients. The crop quality is evaluated based on the percentage of unsaturated fatty acid in fruits. According to our field experiments, the yield and quality estimation model of the sunny and semi-sunny areas are respectively as follows:(32)Ya=850.2+9.3x1+6.1x2+14.88x3+6.68x1x2+2.04x2x3−3.06x1x3−0.61x12−4.12x22−0.35x32(33)Yb=661.8+19.02x1+26.46x2+1.49x3−4.78x1x2+1.6x2x3+3.08x1x3−3.98x12−1.65x22−0.67x32(34)Qa=59.9+0.37x1+4.94x2+0.62x3+0.52x1x2−0.04x2x3+0.04x1x3−0.31x12−0.47x22−0.02x32(35)Qb=49.1+0.9x1+2.25x2+1.18x3+0.39x1x2−0.03x2x3+0.1x1x3−0.27x12−0.35x22−0.04x32where Yaand Ybstand for the yields of the sunny area and the semi-sunny area respectively, and Qaand Qbstand for the corresponding quality objectives. And the mathematical formulation of the real-world problem is as follows (where aidenoted the area of the field i):(36)maxQ(x)=∑i=140aiYa(x)Qa(x)+∑i=4164aiYb(x)Qb(x)minC(x)=∑i=164∑j=13pjxijminE(x)=∑i=164Ei(x)s.t.∑i=164Yi(x)≥YL∑i=164∑j=13pjxij≤CU∑j=13Rj(x)≤RUxij≥0∀i=1,2,…,64;∀j=1,2,3The unit price of the fertilizer N, P, and K are respectively 6.3, 3.5, and 4.6 (RMB/kg). The gradient α and plant density d of each field are presented in Table 4.The organization has a precision agriculture management software which employs a multiobjective random search (MORS) algorithm based on [47] for VFR optimization and decision. The software has been used for three years and demonstrated its contribution to crop production. We respectively execute the MORS and the MOFOA algorithms for five times on this problem. The MORS consumes 48s in average and its best result set consists of 10 solutions. The MOFOA uses only 5.1s in average and its best result set consists of 6 solutions. Table 5presents the objective function values of the result solutions, and Fig. 6comparatively shows the distribution of the solutions in the objective space.It is not difficult to observe that, none of the solutions obtained by the MOFOA are dominated by those obtained by the random search. On the contrary, except solution#7, all the other solutions obtained by the MORS are dominated by the result of the MOFOA. For example, the MOFOA's solution#1 dominates the random search's solution#1, the MOFOA's#3 dominates the MORS's#8 and#9, and the MOFOA's#5 dominates the random search's#2−−#6. That is, the coverage of the result set of MOFOA to that of MORS is 88.9%, and the coverage of MORS to MOFOA is 0.After empirical analysis, the decision-maker believes that solutions#2,#3, and#5 of the MOFOA (but none of the random search) are preferred VRF solutions that achieves excellent balance between the objectives, and takes solution#3 as the final decision which suggests to put more emphasis on the crop quality for sunward fields and put more emphasis on the crop yield for non-sunward fields. Furthermore, having seen the effectiveness of the new algorithm, the organization decides to integrate the MOFOA into the precision agriculture management software.

@&#CONCLUSIONS@&#
