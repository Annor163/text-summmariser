@&#MAIN-TITLE@&#
Symmetry detection of rational space curves from their curvature and torsion

@&#HIGHLIGHTS@&#
The paper presents a novel, deterministic, and efficient method to detect whether a given rational space curve is symmetric.The method is significantly faster, simpler, and more general than earlier methods addressing similar problems.An analysis of the arithmetic complexity of the algorithm and timings from an implementation in Sage are included.

@&#KEYPHRASES@&#
Symmetry detection,Rational space curves,Pattern Recognition,

@&#ABSTRACT@&#
We present a novel, deterministic, and efficient method to detect whether a given rational space curve is symmetric. By using well-known differential invariants of space curves, namely the curvature and torsion, the method is significantly faster, simpler, and more general than an earlier method addressing a similar problem (Alcázar et al., 2014b). To support this claim, we present an analysis of the arithmetic complexity of the algorithm and timings from an implementation in Sage.

@&#INTRODUCTION@&#
The problem of detecting the symmetries of curves and surfaces has attracted the attention of many researchers throughout the years, because of the interest from fields like Pattern Recognition (Boutin, 2000; Calabi et al., 1998; Huang and Cohen, 1996; Lebmeir and Richter-Gebert, 2008; Lebmeir, 2009; Suk and Flusser, 1993, 2005; Tarel and Cooper, 2000; Taubin and Cooper, 1992; Weiss, 1993), Computer Graphics (Berner et al., 2008; Bokeloh et al., 2009; Lipman et al., 2010; Martinet et al., 2006; Mitra et al., 2006; Podolak et al., 2006; Schnabel et al., 2008; Simari et al., 2006), and Computer Vision (Alt et al., 1988; Brass and Knauer, 2004; Jiang et al., 1996; Li et al., 2008, 2010; Loy and Eklundh, 2006; Tate and Jared, 2003; Sun and Sherrah, 1997). The introduction in Alcázar et al. (2014b) contains an extensive account of the variety of approaches used in the above references.A common characteristic in most of these papers is that the methods focus on computing approximate symmetries more than exact symmetries, which is perfectly reasonable in many applications, where curves and surfaces often serve as merely approximate representations of a more complex shape. Some exceptions appear here: If the object to be considered is discrete (e.g. a polyhedron), or is described by a discrete object, like for instance a control polygon or a control polyhedron, then the symmetries can be determined exactly (Alt et al., 1988; Brass and Knauer, 2004; Jiang et al., 1996; Li et al., 2008). Examples of the second class are Bézier curves and tensor product surfaces. Furthermore, in these cases the symmetries of the curve or surface follow from those of the underlying discrete object. Another exception appears in Lebmeir and Richter-Gebert (2008), where the authors provide a deterministic method to detect rotation symmetry of an implicitly defined algebraic plane curve and to find the exact rotation angle and rotation center. The method uses a complex representation of the curve and is generalized in Lebmeir (2009) to detect mirror symmetry as well.Rational curves are frequently used in Computer Aided Geometric Design and are the building blocks of NURBS curves. Compared to implicit curves, rational parametric curves are easier to manipulate and visualize. Space curves appear in a natural way when intersecting two surfaces, and they play an important role when dealing with special types of surfaces, often used in geometric modeling, like ruled surfaces, canal surfaces or surfaces of revolution, which are generated from a directrix or profile curve. Furthermore, in geometric modeling it is typical to use rational space curves as profile curves.In this paper we address the problem of deterministically finding the symmetries of a rational space curve, defined by means of a proper parametrization. Notice that since we deal with a global object, i.e., the set of all points in the image of a rational parametrization, and not just a piece of it, the discrete approach from Alt et al. (1988), Brass and Knauer (2004), Jiang et al. (1996), Li et al. (2008) is not suitable here. Determining if a rational space curve is symmetric or not is useful in order to properly describe the topology of the curve (Alcázar and Díaz Toca, 2010). Furthermore, if the space curve is to be used for generating, for instance, a canal surface or a surface of revolution, certain symmetries of the curve will be inherited by the generated surface. Hence, for modeling purposes it can be interesting to know these symmetries in advance.Recently, the problem of determining whether a rational plane or space curve is symmetric has been addressed in Alcázar (2014), Alcázar et al. (2014a, 2014b) using a different approach. The common denominator in these papers is the following observation: If a rational curve is symmetric, i.e., invariant under a nontrivial isometry f, then this symmetry induces another parametrization of the curve, different from the original parametrization. Assuming that the initial parametrization is proper (definition below), the second parametrization is also proper. Since two proper parametrizations of the same curve are related by a Möbius transformation (Sendra et al., 2008), determining the symmetries is reduced to finding this transformation, therefore translating the problem to the parameter space. This observation leads to algorithms for determining the symmetries of plane curves with polynomial parametrizations (Alcázar, 2014) and of plane and space curves with rational parametrizations (Alcázar et al., 2014b), although in the latter case of general space curves only involutions were considered. The more general problem of determining whether two rational plane curves are similar was considered in Alcázar et al. (2014a).In this paper we again employ the above observation, but in addition we now also use well-known differential invariants of space curves, namely the curvature and the torsion. The improvement over the method in Alcázar et al. (2014b) is threefold: First of all, we are now able to find all the symmetries of the curve instead of just the involutions. Secondly, the new algorithm is considerably faster and can efficiently handle even curves with high degrees and large coefficients in reasonable timings. Finally, the method is simpler to implement and requires fewer assumptions on the parametrization.Some general facts on symmetries of rational curves are presented in Section 2. Section 3 provides an algorithm for checking whether a curve is symmetric. The determination of the symmetries themselves is addressed in Section 4. Finally, in Section 5 we report on the performance of the algorithm, by presenting a complexity analysis and providing timings for several examples, including a comparison with the curves tested in Alcázar et al. (2014b).Throughout the paper, we consider a rational space curveC⊂R3, neither a line nor a circle, parametrized by a rational map(1)x:R⇢C⊂R3,x(t)=(x(t),y(t),z(t)).The componentsx(t),y(t),z(t)ofxare rational functions of t with rational coefficients, and they are defined for all but a finite number of values of t. Let the (parametric) degree m ofxbe the maximal degree of the numerators and denominators of the componentsx(t),y(t),z(t). Note that rational curves are irreducible. We assume that the parametrization (1) is proper, i.e., birational or, equivalently, injective except for perhaps finitely many values of t. This can be assumed without loss of generality, since any rational curve can quickly be properly reparametrized. For these claims and other results on properness, the interested reader can consult (Sendra et al., 2008) for plane curves and (Alcázar, 2012, §3.1) for space curves.We recall some facts from Euclidean geometry (Coxeter, 1969). An isometry ofR3is a mapf:R3⟶R3preserving Euclidean distances. Any isometry f ofR3is linear affine, taking the form(2)f(x)=Qx+b,x∈R3,withb∈R3andQ∈R3×3an orthogonal matrix. In particulardet⁡(Q)=±1. Under composition, the isometries ofR3form the Euclidean group, which is generated by reflections, i.e., symmetries with respect to a plane, or mirror symmetries. An isometry is called direct when it preserves the orientation, and opposite when it does not. In the former casedet⁡(Q)=1, while in the latter casedet⁡(Q)=−1. The identity map ofR3is called the trivial symmetry.The classification of the nontrivial isometries of Euclidean space includes reflections (in a plane), rotations (about an axis), and translations, and these combine in commutative pairs to form twists, glide reflections, and rotatory reflections. Composing three reflections in mutually perpendicular planes through a pointpyields a central inversion (also called central symmetry), with centerp, i.e., a symmetry with respect to the pointp. The particular case of rotation by an angle π is of special interest, and it is called a half-turn. Rotation symmetries are direct, while mirror and central symmetries are opposite.Lemma 1A rational space curveC⊂R3different from a line cannot be invariant under a translation, glide reflection, or twist.IfCwere invariant under translation by a vectorb, then, for any pointxonC, the lineL={x+tb:t∈R}would intersectCin infinitely many points, implying thatL⊂Cand contradicting thatCis an irreducible curve different from a line. Since applying a glide reflection twice yields a translation,Ccannot be invariant under a glide reflection either. SupposeCis invariant under a twist f with axisAand angle α, and letπ:R3⟶Πbe the orthogonal projection onto a planeΠ⊥A. Then the projectionC′:=π(C)is a plane algebraic curve invariant under the rotationπ∘fby the angle α about the pointA∩Π. By Lemma 1 in Alcázar et al. (2014b),α=2π/kwithk≤deg(C′). But thenCis invariant under the translationfk, which is a contradiction.  □Therefore, the rotations, reflections, and their combinations (like central inversions) are the only isometries leaving an irreducible algebraic space curve, different from a line, invariant. We say that an irreducible algebraic space curve is symmetric, if it is invariant under one of these (nontrivial) isometries. In that case, we distinguish between a mirror symmetry, rotation symmetry and central symmetry. If the curve is neither a line nor a circle, it has a finite number of symmetries (Alcázar et al., 2014b).We recall the following result from Alcázar et al. (2014b). For this purpose, let us recall first that a Möbius transformation (of the affine real line) is a rational function(3)φ:R⇢R,φ(t)=at+bct+d,Δ:=ad−bc≠0.In particular, we refer toφ(t)=tas the trivial transformation. It is well known that the birational functions on the real line are the Möbius transformations (Sendra et al., 2008).Theorem 2Letx:R⇢C⊂R3be a proper parametric curve as in(1). The curveCis symmetric if and only if there exist a nontrivial isometry f and nontrivial Möbius transformation φ for which we have a commutative diagram(4)Moreover, for each isometry f there exists a unique Möbius transformation φ that makes this diagram commute.Note thatφ(t)is the parameter value corresponding to the image under the symmetry f of the point onCwith parameter t.Lemma 3Let φ be a Möbius transformation associated to a parametrization x and isometry f in the sense ofTheorem 2. Then its coefficientsa,b,c,dcan be assumed to be real, by dividing by a common complex number if necessary.For any proper parametrizationxand isometry f the associated Möbius transformationφ=x−1∘f∘xmaps the real line to itself. In particular, since0=φ(t)−φ(t)¯=(ac¯−a¯c)t2+(bc¯−b¯c+ad¯−a¯d)t+(bd¯−b¯d)(ct+d)(c¯t+d¯)for any t for whichφ(t)is defined,ac¯andbd¯are real, so thatarg⁡(a)=arg⁡(c)andarg⁡(b)=arg⁡(d). A similar argument forφ−1yields that−dc¯/|ad−bc|2and−ba¯/|ad−bc|2are real, implying thatarg⁡(c)=arg⁡(d)andarg⁡(a)=arg⁡(b). It follows that all coefficients of φ have a common argument θ. Therefore, after dividing the coefficients of φ byexp⁡(iθ), the coefficients of φ can be assumed to be real.  □Let the curvature κ and torsion τ of a parametric curvexbe the functionsκ=κx:=‖x′×x″‖‖x′‖3,τ=τx:=〈x′×x″,x‴〉‖x′×x″‖2of the parameter t. Note that κ is non-negative. The functionsκ2andτ2are well-known rational differential invariants of the parametrizationx, in the sense that(5)κf∘x=κx,τf∘x=det⁡(Q)⋅τxfor any isometryf(x)=Qx+b. This follows immediately fromQbeing orthogonal and the identity(6)(Ma)×(Mb)=det⁡(M)M−T(a×b),which holds for any invertible matrixMand follows from a straightforward calculation. Althoughτxandκx2are rational for any rational parametrizationx, the curvatureκxis in general not rational.The following lemma describes the behavior of the curvature and torsion under reparametrization, for instance by a Möbius transformation.Lemma 4Let x be the rational parametrization(1)and letϕ∈C3(U), withU⊂Ropen. Thenκx∘ϕ=κx∘ϕ,τx∘ϕ=τx∘ϕ,whenever both sides are defined.ProofWritingx˜:=x∘ϕand using the chain rule, one findsx˜′(t)=x′(ϕ(t))⋅ϕ′(t),x˜″(t)=x″(ϕ(t))⋅(ϕ′(t))2+x′(ϕ(t))⋅ϕ″(t),x˜‴(t)=x‴(ϕ(t))⋅(ϕ′(t))3+3x″(ϕ(t))⋅ϕ′(t)⋅ϕ″(t)+x′(ϕ(t))⋅ϕ‴(t),whenevert∈Uandxis defined atϕ(t). Thereforeκx∘ϕ(t)=‖x˜′(t)×x˜″(t)‖‖x˜′(t)‖3=‖x′(ϕ(t))×x″(ϕ(t))‖⋅|ϕ′(t)|3‖x′(ϕ(t))‖3⋅|ϕ′(t)|3=(κx∘ϕ)(t),and similarly one findsτx∘ϕ=τx∘ϕ.  □In this section we derive a criterion for the presence of nontrivial symmetriesf(x)=Qx+bof curves of type (1), together with an efficient method for checking this criterion. The casesdet⁡(Q)=±1need to be checked separately, but are considered simultaneously using linked ± and ∓ signs consistently throughout the paper. The resulting method is summarized in Algorithm Symm±.For any parametric curvexas in (1), writeκx2(t)=:A(t)B(t),τx(t)=:C(t)D(t),with(A,B)and(C,D)pairs of coprime polynomials. Let(7)Gx±:=gcd⁡(Kx,Tx±),with(8)Kx(t,s):=A(t)B(s)−A(s)B(t),Tx±(t,s):=C(t)D(s)∓C(s)D(t)the result of clearing denominators in the equations(9)κx2(t)−κx2(s)=0,τx(t)∓τx(s)=0.Similarly, associate to any Möbius transformation φ the Möbius-like polynomial(10)F(t,s):=(ct+d)s−(at+b),ad−bc≠0,as the result of clearing denominators ins−φ(t)=0. We call F trivial whenF(t,s)=s−t, i.e., when the associated Möbius transformation is the identity. Note that F is irreducible sincead−bc≠0.Theorem 5Consider the curveCdefined by x in(1)and letGx±be as above. ThenChas a nontrivial symmetryf(x)=Qx+b, withdet⁡(Q)=±1, if and only if there exists a nontrivial polynomial F of type(10), associated with a Möbius transformation φ, such that F dividesGx±and the parametrizations x andx∘φhave identical speed,(11)‖x′‖=‖(x∘φ)′‖.The zeroset of F is the graph of φ, which is either a rectangular hyperbola with horizontal and vertical asymptotes whenc≠0, or a line with nonzero and finite slopea/dwhenc=0. Whenever F is a factor ofGx±, the corresponding hyperbola or line is contained in the zeroset ofGx±; see Fig. 1.Proof of Theorem 5“⟹”: IfCis invariant under a nontrivial isometryf(x)=Qx+b, withdet⁡(Q)=±1, by Theorem 2 there exists a Möbius transformation φ such thatf∘x=x∘φ. Let F be the Möbius-like polynomial associated with φ. The points(t,s)for whichKx(t,s)=Tx±(t,s)=0are the points satisfyingκx(s)=κx(t)andτx(s)=±τx(t). This includes the zeroset{(t,s):s=φ(t)}ofF(t,s), sinceκx∘φ=κx∘φ=κf∘x=κx,τx∘φ=τx∘φ=τf∘x=det⁡(Q)τx=±τxby Lemma 4 and (5). Since F is irreducible, Bézout's theorem implies that F dividesKxandTx±, and thereforeGx±as well. Furthermore, sinceQis orthogonal, the parametrizations have equal speed,‖(x∘φ)′‖=‖(f∘x)′‖=‖(Qx+b)′‖=‖Qx′‖=‖x′‖.“⟸”: Let φ be the nontrivial transformation associated to F. Lett0∈I⊂Rbe such thatx(t)is a regular point onCfor everyt∈I, and consider the arc length functions=s(t):=∫t0t‖x′(t)‖dt,t∈I,which (locally) has an infinitely differentiable inverset=t(s). By (11),‖dds(x∘t)‖=‖dxdtdtds‖=1=‖ddt(x∘φ)dtds‖=‖dds(x∘φ∘t)‖,so thatx∘tandx∘φ∘tare parametrized by arc length. Since F dividesGx±, any zero(t,φ(t))of F is also a zero ofKxandTx±, implying thatκx=κx∘φandτx=±τx∘φ. Then, by repeatedly applying Lemma 4,(12)κx∘t=κx∘t=κx∘φ∘t=κx∘φ∘t,τx∘t=τx∘t=±τx∘φ∘t=±τx∘φ∘t.The Fundamental Theorem of Space Curves (Do Carmo, 1976, p. 19) then implies thatx∘tandx∘φ∘tcoincide ons(I)up to an isometryf(x)=Qx+bwithdet⁡(Q)=±1. ThereforeCandf(C)have infinitely many points in common. SinceCandf(C)are irreducible algebraic curves, it follows thatC=f(C)and therefore f is a symmetry ofC.  □Note that the polynomialGx±cannot be identically 0. Indeed,Gx±is identically 0 if and only ifKxandTx±are both identically 0, which happens precisely whenκxandτxare both constant. Ifκx=0thenCis a line, ifτx=0andκxis a nonzero constant thenCis a circle, and ifκx,τxare both constant but nonzero thenCis a circular helix, which is non-algebraic. All of these cases are excluded by hypothesis.The criterion in Theorem 5 requires to check if a bivariate polynomialG=Gx±has real factors of the formF(t,s)=(ct+d)s−(at+b), withad−bc≠0. However,a,b,c,dneed not be rational numbers, so that we need to factor over the algebraic or real numbers. This problem has been studied by several authors (Cheeze, 2004; Cheeze and Galligo, 2006; Corless et al., 2002; Galligo and Rupprecht, 2002). However, since in our case we are looking for factors of a specific form, we develop an ad hoc method to check the condition.LetGbe the curve in the(t,s)-plane defined byG(t,s). Lett0be such that the vertical lineLatt=t0does not contain any zero ofGwhere the partial derivativeGs:=∂G∂svanishes; see Fig. 1. These are the pointst0for which the discriminant ofg(s):=G(t0,s)does not vanish, which is up to a factor equal to the Sylvester resultantRess(G,Gs)and has degree at most(2ms−1)mtint0, with(mt,ms)the bidegree of G. Therefore one can always find an integer abscissat0with this property by checking for at most(2ms−1)mt+1pointst0whether the gcd ofg(s)andGs(t0,s)is trivial.If G has a Möbius-like factor F as in (10), then the zeroset of F intersectsLin a single pointp0=(t0,ξ)satisfying(13)(ct0+d)ξ−(at0+b)=0.SinceGs(p0)≠0, the equationF(t,s)=0implicitly defines a functions=s(t)in a neighborhood ofp0. Moreover, by differentiating the identityF(t,s(t))=0once and twice with respect to t, and evaluating atp0, we find the relations(14)−a+ds0′+c⋅(ξ+t0s0′)=0,(15)ds0″+c⋅(2s0′+t0s0″)=0,whereξ=s(t0),s0′:=s′(t0), ands0″:=s″(t0). In order to find expressions fors0′,s0″, we now use that the functions(t)is also implicitly defined byG(t,s)=0, because F is a factor of G andGs(p0)≠0. Differentiating once and twice the identityG(t,s(t))=0with respect to t gives(16)s′=−Gt(t,s)Gs(t,s),s″=−Gtt(t,s)+2Gts(t,s)s′+Gss(t,s)(s′)2Gs(t,s).Evaluating these expressions atp0yields expressionss0′=s0′(ξ)ands0″=s0″(ξ).Now we distinguish the casesd≠0andd=0. In the first case, we may assumed=1by dividing all coefficients in the Möbius transformation by d. In that case2s0′+t0s0″=2Δ/(ct0+1)3≠0and (13)–(15) yield rational expressions(17)c1(ξ):=−s0″2s0′+t0s0″,a1(ξ):=s0′+c1(ξ)(ξ+t0s0′),b1(ξ):=−a1(ξ)t0+ξ+c1(ξ)t0ξ.The polynomial F is a factor of G if and only if the resultantRess(F,G)is identically 0. Substitutinga1(ξ),b1(ξ),c1(ξ), andd=1into this resultant yields a polynomialP1(t), whose coefficients are rational functions of ξ. LetR1(ξ)be the gcd of the numerators of these coefficients and ofg(ξ). The real roots ξ ofR1(ξ)for whicha1(ξ),b1(ξ),c1(ξ)are well defined andΔ1(ξ):=a1(ξ)−b1(ξ)c1(ξ)≠0correspond to the Möbius-like factors F of G as in (10) withd=1.On the other hand, whend=0we may assumec=1, and (13)–(15) yield rational expressions(18)a0(ξ):=ξ+t0s0′,b0(ξ):=−a0(ξ)t0+t0ξ.Substitutinga0(ξ),b0(ξ),c=1, andd=0into the resultantRess(F,G)yields a polynomialP0(t), whose coefficients are rational functions of ξ. LetR0(ξ)be the gcd of the numerators of these coefficients andg(ξ). The real roots ξ ofR0(ξ)for whicha0(ξ)andb0(ξ)are well defined andΔ0(ξ):=−b0(ξ)is nonzero correspond to the Möbius-like factors F of G as in (10) withd=0. We obtain the following theorem.Theorem 6The polynomial G has a real Möbius-like factor F as in(10)withd≠0(resp.d=0) if and only ifR1(ξ)(resp.R0(ξ)) has a real root. Furthermore, every such real root provides a factor of this form.Note that the casesd=0andd≠0can be computed in parallel.Example 1Consider the bivariate polynomialG(t,s)=3s4t4−6s4t3+3s4t2−6s2t4−s2t2+2s2t−s2+2t2.The vertical lineL:={t=t0:=2}does not intersect the zeroset of G in a point whereGsvanishes, since the discriminant ofg(ξ):=G(t0,ξ)=12ξ4−97ξ2+8is nonzero (see Fig. 1). Evaluating (16) atp0=(2,ξ)yieldss0′=−18ξ4−97ξ2+4ξ(24ξ2−97),s0″=16416ξ10−206316ξ8+879669ξ6−1387682ξ4+55302ξ2+1552ξ3(24ξ2−97)3.Whend≠0, we may assumed=1and Eqs. (17) yieldc1(ξ)=−1216416ξ10−206316ξ8+879669ξ6−1387682ξ4+55302ξ2+15526048ξ10−66636ξ8+256371ξ6−456385ξ4+17666ξ2+1552,a1(ξ)=−12ξ(72ξ8+2019ξ6−21192ξ4+40138ξ2−4656)504ξ8−5511ξ6+20905ξ4−36290ξ2−1552,b1(ξ)=−(9504ξ10−163836ξ8+879621ξ6−1434145ξ4+133646ξ2−4656)ξ(504ξ8−5511ξ6+20905ξ4−36290ξ2−1552)(12ξ2−1).Substituting these expressions into the resultantRess(F,G)and taking the gcd of the numerators of its coefficients and g yields a polynomialR1(ξ)=ξ2−8. We findF1(t,s)=−st+2t+sforξ=8andF2(t,s)=−st−2t+sforξ=−8as factors of G. In the cased=0, we may assumec=1and we geta0(ξ)=−(ξ2−8)(12ξ2−1)ξ(24ξ2−97),b0(ξ)=418ξ4−97ξ2+4ξ(24ξ2−97).HereR0(ξ)=12ξ2−1and we obtainF3(t,s)=st−133forξ=1/12andF4(t,s)=st+133forξ=−1/12. The entire computation takes a fraction of a second when implemented in Sage on a modern laptop. For more details we refer to the worksheet accompanying this paper (Muntingh, personal website).Algorithm Symm±.Letx:R⇢Cas in (1) be a parametric curve of degree m. Distinguishing the casesd=0,1, each tentative Möbius transformation can be written asφξ(t)=ad(ξ)t+bd(ξ)cd(ξ)t+d,with ξ a root ofRdandad,bd,cdas in (17), (18). Condition (11) can be checked as follows. Squaring and clearing denominators yields an equivalent polynomial condition(19)Wξ(t)=wn(ξ)tn+wn−1(ξ)tn−1+⋯+w0(ξ)≡0of degreen≤24m−4. By Theorem 5, a root ξ ofRdcorresponds to a symmetry ofCprecisely whenWξ(t)vanishes identically. In other words, every root ξ of(20)gcd⁡(Rd,w0,…,wn)defines a Möbius transformationφξcorresponding to a symmetryfξ:=x∘φξ∘x−1as in Theorem 2. We thus arrive at Algorithm Symm± for determining the number of symmetries of the curveC.Algorithm Symm± detects whether the parametric curvexfrom (1) has nontrivial symmetries. In the affirmative case we would like to determine these symmetries. By Theorem 2, every such symmetry corresponds to a Möbius transformationφ=(at+b)/(ct+d), which corresponds to a Möbius-like factor F of G computed by Algorithm Symm±. In this section we shall see how the symmetryf(x)=Qx+bcan be computed from φ.The commutative diagram in Theorem 2 describes the identity(21)Qx(t)+b=x(φ(t)).Let us distinguish the casesd≠0andd=0. In the latter case, (21) becomesQx(t)+b=x(φ(t))=x(a˜/t+b˜),a˜:=b/c,b˜:=a/c.Applying the change of variablest⟼1/tand writingx˜(t):=x(1/t), we obtain(22)Qx(t)+b=x˜(a˜t+b˜).Without loss of generality, we assume thatx(t)(respectivelyx˜(t)), and therefore any of its derivatives is well defined att=b˜(respectivelyt=0), and thatx′(0),x″(0)are well defined, nonzero, and not parallel. The latter statement is equivalent to requiring that the curvatureκx(t)att=0be well defined and distinct from 0. This can always be achieved by applying a change of parameter of the typet⟼t+α. Observe thatφ(t)can be determined before applying this change, because afterwards the new Möbius transformation is justφ(t+α).Evaluating (22) att=0yields(23)Qx(0)+b=x˜(b˜),while differentiating once and twice and evaluating att=0yield(24)Qx′(0)=a˜⋅x˜′(b˜),Qx″(0)=a˜2⋅x˜″(b˜).Using (6) and thatQis orthogonal, taking the cross product in (24) yields(25)Q(x′(0)×x″(0))=det⁡(Q)⋅a˜3⋅x˜′(b˜)×x˜″(b˜).MultiplyingQby the matrixB:=[x′(0),x″(0),x′(0)×x″(0)]therefore givesC:=[a˜⋅x˜′(b˜),a˜2⋅x˜″(b˜),det⁡(Q)⋅a˜3⋅x˜′(b˜)×x˜″(b˜)]andQ=CB−1. One setsdet⁡(Q)=1to find the orientation-preserving symmetries, anddet⁡(Q)=−1to find the orientation-reversing symmetries. One findsbfrom (23).Next we address the cased≠0. After dividing the coefficients of φ by d, we may assumed=1. As before, we assume thatx(t)is well defined att=0, and we again assume that the curvatureκx(0)is well defined and nonzero. Differentiating (21) once and twice,(26)Qx′(t)=x′(φ(t))⋅φ′(t)=x′(at+bct+1)Δ(ct+1)2,(27)Qx″(t)=x″(φ(t))(φ′(t))2+x′(φ(t))φ″(t)=x″(at+bct+1)Δ2(ct+1)4−2x′(at+bct+1)cΔ(ct+1)3.Evaluating (26) and (27) att=0yields(28)Qx′(0)=x′(b)⋅Δ,Qx″(0)=x″(b)⋅Δ2−2x′(b)⋅cΔ.Using (6) and thatQis orthogonal, taking the cross product in (28) yields(29)Q(x′(0)×x″(0))=det⁡(Q)⋅Δ3⋅x′(b)×x″(b).Since φ is known, the matrixQcan again be determined from its action onx′(0),x″(0), andx′(0)×x″(0), which is given by Eqs. (28) and (29). One findsbby evaluating (21) att=0.OnceQandbare found, one can compute the set of fixed points off(x)=Qx+bto determine the elements of the symmetry, i.e., the symmetry center, axis, or plane.Example 2LetC⊂R3be the crunode space curve parametrized byx:t⟼(tt4+1,t2t4+1,t3t4+1).Applying Algorithm Symm+ we getG+(t,s)=(t−s)(t+s). The first factor corresponds to the identity mapφ1(t)=tand the trivial symmetryf1(x)=x. The second factor corresponds to the Möbius transformationφ2(t)=−t. Clearlyφ2satisfies Condition (11), so that Theorem 5 implies thatChas a nontrivial, direct symmetryf2(x)=Q2x+b2. Witha=−1,b=0,c=0,d=1, and using thatdet⁡(Q)=1,B=[100020002],C=[−10002000−2],Q2:=CB−1=[−10001000−1].Evaluating (21) att=0givesb2=(I−Q2)x(0)=0, so thatCis invariant underf2(x)=Q2x, which is a half-turn about the y-axis. Since there are no other factors inG+, there are no direct symmetries corresponding to a Möbius transformation withd=0.As for the opposite symmetries, applying Algorithm Symm− yieldsG−(t,s)=(st−1)(st+1), whose factors correspond to the Möbius transformationsφ3(t)=1/tandφ4(t)=−1/t. A direct computation shows thatφ3andφ4satisfy Condition (11), and that they correspond to symmetriesf3(x)=Q3xandf4(x)=Q4x, withQ3=[001010100],Q4=[00−1010−100].The sets of fixed points of these isometries are the planesΠ3:z−x=0andΠ4:z+x=0, which intersect in the symmetry axis of the half-turn; see Fig. 2.Example 3Consider the family of daisies of increasing degreem=4j+4, which are given parametrically by(30)x(t)=(u∑i=0j(−1)i(2j2i)u2j−2iv2i,v∑i=0j(−1)i(2j2i)u2j−2iv2i,1−t4j+41+t4j+4),withu=1−t21+t2,v=2t1+t2,j=0,1,…Applying Algorithm Symm+ for the casej=1, we getG+(t,s)=(t−s)(st−1). The first factor again corresponds to the trivial symmetryf1(x)=x. The second factor corresponds to the Möbius transformationφ2(t)=1/t. Clearlyφ2satisfies Condition (11), so that Theorem 5 implies thatChas a nontrivial, direct symmetryf2(x)=Q2x+b2. Witha=0,b=1,c=1,d=0, and using thatdet⁡(Q)=1,B=[0−2002000040],C=[020020000−40],Q2:=CB−1=[−10001000−1].Eq. (23) givesb2=x˜(b˜)−Q2x(0)=0, so thatCis invariant underf2(x)=Q2x, which is a half-turn about the y-axis.Similarly applying Algorithm Symm−, we getG−(t,s)=(s+t)(st+1), whose factors correspond to the Möbius transformationsφ3(t)=−tandφ4(t)=−1/t. A direct computation shows thatφ3andφ4satisfy Condition (11), and that they correspond to symmetriesf3(x)=[1000−10001]x,f4(x)=[−1000−1000−1]x,which are a reflection in the planeΠ3:y=0and a central inversion about the point(0,0,0), respectively; see Fig. 2.Let us determine the arithmetic complexity of Algorithm Symm±, i.e., the number of integer operations needed. In addition to using the standard Big O notationOfor the space- and time-complexity analysis, we use the Soft O notationO˜to ignore any logarithmic factors in the time-complexity analysis. The bitsize τ of an integer k is defined asτ=⌈log2⁡k⌉+1; the bitsize of a parametrizationx(taken with integer coefficients) is the maximum bitsize of the coefficients of the numerators and denominators of the components. The following theorem presents the arithmetic complexity of Algorithm Symm± when applied to parametric curves of varying degree m and of fixed bitsize.Theorem 7For a parametric curve x as in(1)with degree m, AlgorithmSymm±finishes inO˜(m5)integer operations.ProofStep 1. Using the Schönhage–Strassen algorithm, two polynomials of degree m with integer coefficients can be multiplied inO˜(m)operations (Von zur Gathen and Gerhard, 2003, Table 8.7). Therefore the computation ofκ2and τ can be carried out inO˜(m)operations as well, resulting in rational functions whose numerators and denominators have degreeO(m). As a consequence, K andT=T±can also be computed inO˜(m)operations, and have degreesO(m)in t and s. The bivariate gcdG=G±can be computed inO˜(m5)operations using the ‘half-gcd algorithm’ (Reischert, 1997), and has degreeO(m)in both variables. Step 1 therefore takes at mostO˜(m5)operations.Step 2. SinceF(t,s)=(ct+d)s−(at+b), the resultantRess(F,G)is the polynomial in t obtained by replacing s by(at+b)/(ct+d)and clearing denominators. WritingG(t,s)=∑k=0m0Gk(t)skas a sum ofm0+1=O(m)terms, with eachGk(t)polynomial of degreeO(m), gives(31)Ress(F,G)=∑k=0m0Gk(t)(at+b)k(ct+1)m0−k,which is a polynomial of degreeO(m)ina,b,c, and t.Step 3. For any integert0, the two polynomialsG(t0,s),Gs(t0,s)have degreeO(m), so that their (univariate) gcd can be computed inO˜(m)operations (Von zur Gathen and Gerhard, 2003, Corollary 11.6). Since we need to consider at mostO(m2)values oft0, Step 3 takesO˜(m3)operations.Step 4. For any integert0and unknown ξ, evaluating (16) at(t0,ξ)takesO(m2)operations, yielding rational functionss0′(ξ)ands0″(ξ)whose numerator and denominator have degreeO(m). Substituting these rational functions into (17) takesO˜(m)operations and yields rational functions(32)a(ξ)=a1(ξ)a2(ξ),b(ξ)=b1(ξ)b2(ξ),c(ξ)=c1(ξ)c2(ξ),whose numerator and denominator have degreeO(m). Substituting these rational functions into (31) followed by binomial expansion, i.e., computing(33)∑n=0k(kn)a1nb2m0−k+nb1k−na2m0−ntna2m0b2m0,∑n=0m0−k(m0−kn)c1nc2m0−ntnc2m0,involves raising polynomials of degreeO(m)to the powerO(m), which can be computed inO˜(m2)operations using repeated squaring, i.e.,O(log⁡m)multiplications of polynomials of degreeO(m2). All powersail,bil,cil, withi=1,2andl=0,…,m0, in the above expression can therefore be computed inO˜(m3)operations, resulting in polynomials of degreeO(m2)in ξ. All remaining products can be computed inO˜(m3)operations, resulting in polynomials of degreeO(m2).Now the rational functions in (33) are determined, the product of their numerators can be carried out inO˜(m)ring operations, the ring now being the polynomials in ξ. Since these polynomials have degreeO(m2), the product ofGk(t)and the rational functions in (33) takeO˜(m2)integer operations, and yield the terms in the sum (31). After factoring out the common denominator(a2b2c2)m0, this sum involvesO(m)polynomials of degreeO(m)in t, which requiresO(m2)additions of polynomials of degreeO(m2)in ξ. This involvesO(m4)integer operations and yields a polynomial of degreeO(m)in t, whose coefficientsPi(ξ)are polynomials of degreeO(m2). The gcd ofg(ξ)with thePi(ξ)can be computed inO˜(m3)operations, resulting in a polynomialR1(ξ)of degreeO(m), sinceg(ξ)has degreeO(m). Step 4 therefore takesO(m4)operations.Step 5. One determines whetherR1(ξ)has real roots using root isolation, which takesO˜(m)operations using Pan's algorithm for root isolation (Pan, 2002; Mehlhorn et al., 2015).Step 6. Writingx=(x,y,z)=(x1/x2,y1/y2,z1/z2), we find that‖x′‖2=(x2x1′−x1x2′)2y24z24+(y2y1′−y1y2′)2x24z24+(z2z1′−z1z2′)2x24y24x24y24z24can be computed inO(m)operations. From Step 3 we already know the expansions of the powers(at+b)l,(ct+d)land their products, thus determiningx∘φ. Taking the derivative ofx∘φand then squaring involves multiplying and adding polynomials of degreeO(m)in t andO(m2)in ξ, which requiresO˜(m2)operations. Similarly we determine[(y∘φ)′]2and[(z∘φ)′]2inO˜(m2)operations. The resulting rational functions have numerator and denominator of degreeO(m)in t andO(m2)in ξ, and can be added inO˜(m2)operations. Clearing denominators again takesO˜(m2)operations and results in the polynomialWξ(t)from (19) of degreeO(m)in t and of degreeO(m2)in ξ. To compute (20), we need to computeO(m)times the univariate gcd of polynomials of degreeO(m)and degreeO(m2), which requiresO˜(m3)operations. Step 6 therefore requiresO˜(m3)operations.Steps 7–10. These steps have the same complexity as Steps 4–6.  □Note that resorting to probabilistic algorithms, the bivariate gcd G in Step 1 can be computed inO˜(m2)operations using the ‘small primes modular gcd algorithm’ and fast polynomial arithmetic (Von zur Gathen and Gerhard, 2003, Corollary 11.9.(i)). Thus a probabilistic version of Algorithm Symm± usesO(m4)operations.Algorithm Symm± was implemented in the computer algebra system Sage (Stein et al., 2013), using Singular (Decker et al., 2011) as a back-end, and was tested on a Dell XPS 15 laptop, with 2.4 GHz i5-2430M processor and 6 GB RAM. Additional technical details are provided in the Sage worksheet, which can be downloaded from the third author's website (Muntingh, personal website) and can be tried out online by visiting SageMathCloud (Alcázar et al., 2015).We present tables with timings corresponding to different groups of examples. Table 1corresponds to the set of examples in Alcázar et al. (2014b), making it possible to compare the timingtnewof Algorithm Symm± to the timingtoldof the algorithm in Alcázar et al. (2014b). It is clear from the table that the algorithm introduced in this paper is considerably faster for each curve.To test Algorithm Symm± for symmetric curves with higher degree, Table 2lists the timings for a family of daisies of increasing degreem=4j+4, parametrically given by (30). The algorithm quickly finds the symmetries of these symmetric curves, also for high degree.Table 3lists average timings for random dense rational parametrizations with various degrees m and coefficients with bitsizes at most τ. To study the effect of an additional nontrivial symmetry, we consider random parametrizationsx=(x1,x2,x3)with antisymmetric numerators and symmetric denominators of the same degree m and with bitsize at most τ, i.e., of the formxi(t)=ci,0+ci,1t+⋯−ci,1tm−1−ci,0tmdi,0+di,1t+⋯+di,1tm−1+di,0tm,i=1,2,3,with⌈log2⁡|ci,j|⌉,⌈log2⁡|di,j|⌉≤τ−1. Sincex(1/t)=−x(t), such parametric curves have a central inversion aboutx(1)=0. Table 4lists average timings for these curves with various degrees m and bitsizes at most τ.For very large coefficient bitsizes (>256, i.e., coefficients with more than 77 digits) and high degrees (>20) the machine runs out of memory. We have therefore analyzed separately the regime with high degree and the regime with large coefficient bitsize.Fig. 3presents log-log plots of the CPU times against the degree (left) and against the coefficient bitsizes (right). The (eventually) linear nature of these data suggests the existence of an underlying power law. Least squares approximation yields that, as a function of the degree m, the average CPU timetnewsatisfies(34)tnew∼αmβ,α≈6.7⋅10−3,β≈3.2in case of random dense rational parametrizations with coefficient bitsize at mostτ=4,(35)tnew∼αmβ,α≈4.7⋅10−3,β≈3.3,in case of random dense rational parametrizations with a central inversion and with coefficient bitsize at mostτ=4, and(36)tnew∼αmβ,α≈7.9⋅10−5,β≈3.2for the daisies. Note that these timings are close to theO˜(m3)operations needed by Brown's modular gcd algorithm (Brown, 1971), which is used in the implementation in Sage for bivariate gcd computations. The reason is that in the analyzed examples almost all time is spent computing the bivariate gcd in Step 1, which then typically has low degree, so that the remaining calculations take relatively little time.IfCis planar, then τ andT±are identically zero, so thatG±=K. Although Algorithm Symm± is still valid for such curves, we have observed a very poor performance in this case. The reason is that, for non-planar curves, the degree ofG±is typically small compared to the degrees of K andT±. However, for plane curves the degree ofG±is equal to the degree of K, and then the computation takes a very long time. Therefore, for plane curves, the algorithms in Alcázar et al. (2014a, 2014b) are preferable.Table 1 indicates a dramatic improvement of the CPU time of Symm± over the method described in Alcázar et al. (2014b). In that paper the symmetryf(x)=Qx+band Möbius transformationφ(t)=(at+b)/(ct+d)are first expressed polynomially in terms of some (yet unknown) algebraic number β. By far the most CPU time is spent after that, on substitutinga(β),b(β),c(β),Q(β)andb(β)into the relationf(x(t))−x(φ(t))≡0.Since the degrees can get very high in this relation, this substitution can take a long time. Then the algebraic numbers β, and therefore the symmetry and Möbius transformation, are found by requiring that this relation holds identically.Furthermore, the method described in Alcázar et al. (2014b) requires that the parametrizationxsatisfies rather strict conditions. Quite often, a reparametrization is needed in order to achieve these conditions, which can result in destroying sparseness and increasing the coefficient size. This, in turn, has an impact on the time taken by the substitution step.By contrast, in Algorithm Symm± we use additional information provided by the curvature and torsion of the curve to computeGx±=gcd⁡(Kx,Tx±), whose degree is generally low. The Möbius transformations are then computed in just one step as factors ofGx±. As a consequence, no substitution step is needed. Moreover, unlessxis not proper, no reparametrization is required.

@&#CONCLUSIONS@&#
