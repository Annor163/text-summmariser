@&#MAIN-TITLE@&#
Optimal design of submarine pipeline routes by genetic algorithm with different constraint handling techniques

@&#HIGHLIGHTS@&#
Parameterization, encoding, and evaluation of candidate routes are addressed.Design criteria grouped as “soft” or “hard” according to consequence of violation.Static penalty technique inadequate; ε-Constrained and Ho-Shimizu performed better.Optimization tool minimizes installation/operation costs for submarine pipelines.

@&#KEYPHRASES@&#
Marine structures,Submarine pipelines,Oil,&,gas,Optimization,Evolutionary algorithms,Constraint-handling techniques,

@&#ABSTRACT@&#
This work deals with optimization methods for the selection of submarine pipeline routes, employed to carry the oil & gas from offshore platforms. The main motives are related to the assessment of constraint-handling techniques, an important issue in the application of genetic algorithms and other nature-inspired algorithms to such complex, real-world engineering problems.Several methods associated to the modeling and solution of the optimization problem are addressed, including: the geometrical parameterization of candidate routes; their encoding in the context of the genetic algorithm; and, especially, the incorporation into the objective function of the several design criteria involved in the route evaluation. Initially, we propose grouping the design criteria as either “soft” or “hard”, according to the practical consequences of their violation. Then, the latter criteria are associated to different constraint-handling techniques: the classical static penalty function method, and more advanced techniques such as the Adaptive Penalty Method, the ε-Constrained method, and the Ho-Shimizu technique.Case studies are presented to compare the performance of these methods, applied to actual offshore scenarios. The results indicate the importance of clearly characterizing feasible and infeasible solutions, according to the classification of design criteria as “soft” or “hard” respectively. They also indicate that the static penalty approach is not adequate, while the other techniques performed better, especially the ε-Constrained and the Ho-Shimizu methods. Finally, it is seen that the optimization tool may reduce the design time to assess an optimal route, providing accurate results, and minimizing the costs of installation and operation of submarine pipelines.

@&#INTRODUCTION@&#
Real-world engineering optimization problems are complex by nature. Their modeling may be characterized by a very large number of design variables, being defined on high-dimensional spaces, with objectives and constraints that are generally non-linear functions of the variables [1,2]. For such problems, the application of classical optimization techniques requiring gradient information faces remarkable difficulties, such as being trapped in local optima. On the other hand, nature-inspired algorithms (NIAs) such as genetic algorithms (GAs) [3,4], particle swarm optimization (PSO) [5,6] and artificial immune systems (AIS) [7,8] have the distinct advantage of being able to solve multi-objective and multi-constraint problems that gradient-type optimizers have failed to meet. In fact, those and other heuristic and non-gradient methods have been successfully applied to many engineering problems [9–16].However, the treatment of constraints is still an important issue in the application of NIAs to engineering optimization problems. Originally, GAs and other nature-inspired meta-heuristics were designed to deal with unconstrained search spaces [17,18]; the most common approach to treat constraints was to adopt penalty functions to transform a constrained optimization problem into an unconstrained one. Presently, the study of constraint-handling techniques associated to NIAs is an important line of research [2,19,20], to guide the search process of these algorithms to feasible regions.This issue is even more important for the particular engineering application considered in this work, related to the development of offshore oil exploitation activities. This task involves the use of production systems comprised by fixed or floating platforms. The oil and gas produced by these platforms are transported using pipeline systems, as illustrated in Fig. 1. They may be considerably long, crossing rough seafloor that may present several obstacles such as subsea equipment, flowlines, and other pre-existent pipelines. Also, there may be environmental, commercial or even geopolitical issues that can determine specific regions that should be avoided: regions with corals; geotechnical hazards; or fields allotted to another oil company, as usual in the offshore fields along the Brazilian coast.Traditionally, in the oil & gas industry, the selection of a route has been manually performed by the engineer by inspection of the seabed bathymetry and the available information regarding obstacles. However, this is an iterative and very complex process, highly dependent on the expertise of the engineer, and governed by several variables following design recommendations addressed by codes such as DNV-OS-F101 [21]. Therefore, it has already been recognized [22–24] that the selection of a submarine pipeline route with good performance and low cost must indeed be formally described and treated as a synthesis and optimization problem. In this context, a previous work [25] described the initial steps taken towards the development of a computational tool for the synthesis and optimization of submarine pipeline routes. That work described the geometrical representation of a route, and some of the terms of the objective function; the treatment of constraints considered only the classical static penalty method. Subsequently, a preliminary assessment of the Adaptive Penalty Method (APM) [26,27] has been presented in [28].Now, this work presents the implementation of the optimization tool, with special focus on the study and assessment of different, more advanced constraint-handling techniques such as the Adaptive Penalty Method (APM), the ε-Constrained method [29], and the Stochastic Ranking/Ho-Shimizu technique [30,31]. The goal is to allow the development of more efficient optimization procedures that can be employed not only for this particular real-world application, but eventually can be generalized for other complex engineering problems in general. The constraint-handling techniques could be associated to different evolutionary optimization methods, such as PSO or AIS that have been implemented in an in-house tool for the optimization of risers and mooring lines of floating production systems [32,33], but here the focus will be on GAs that have been shown to be useful for the optimization of such offshore engineering problems [34–36].Initially, Section 2 presents a brief overview of the main characteristics of the GA as implemented in the pipeline route optimization tool. Section 3 begins by addressing some aspects of the modeling of the optimization problem – specifically, the geometric parameterization of a given candidate route, and its encoding in the context of the GA. Next, alternative formulations for the objective function are defined, and the distinction between “soft” and “hard” design criteria is introduced, initially associated to the classical penalty technique. The more advanced constraint handling methodologies are then discussed in Section 4.The modeling of the pipeline route optimization problem is concluded in Section 5 that describes the relevant design criteria and their incorporation in the context of the aforementioned constraint-handling techniques. Case studies are presented in Section 6 to illustrate the use of the optimization tool on actual offshore scenarios, and to compare the constraint handling methodologies. Lastly, final remarks and conclusions are presented in Section 7.Genetic algorithms may be considered one of the most well-known and successful bio-inspired evolutionary algorithms. GAs are inspired on Darwin’s evolution theory, involving mechanisms of natural selection, genetic recombination and mutation: the fittest individuals have higher probability of surviving and reproducing, and their descendants keep the good genetic material in the species. A detailed description of GAs can be found in many references in the literature [3,4]. In summary, each candidate solution of the optimization problem is represented by a chromosome. The chromosome comprises a set of genes, encoding the M optimization variables or parameters of the problem, using an appropriate representation such as real number or a string of bits. A population of solutions is represented by a set of N individuals along with its chromosomes. In general, an initial populationP0={X11,X21,…,Xj1,…,XN1}is randomly created, whereXir={xi,1r,xi,2r,…,xi,jr,…,xi,Mr}is the i-th individual in the r-th generation, andxi,jris the j-th parameter ofXir.Individuals are evaluated via an objective function that characterizes the problem, taking into account a set of constraints. As a result of the evaluation, they are assigned a fitness value that assesses their relative quality as a solution for the problem. During the process of evolution, the fittest individuals have higher probability to be selected for the mating and reproduction operators. Selection operators generally follow probabilistic rules, the fitness-proportional roulette wheel method being one of the most popular. Mating is performed with crossover, combining genes from different parents to produce children and generate a new population. The children inherit features from each of the parents, and may be submitted to mutation, which confers innovative characteristics to the individual and provide a better exploration of the search space.In generational GAs, the population is updated by replacing all parents by their offspring, which are made to compete with each other. GAs may also include elitism, which consists in directly injecting into the new population the fittest individuals from the previous population. The process ends when a pre-defined stopping criterion is reached, and the individual with the best fitness is then defined as the solution of the optimization problem.The pipeline route optimization tool described in this paper employs a canonical implementation of a generational GA with real value representation. In this implementation, selection is performed by the roulette-wheel method. Other operators employed are single point crossover with probability equal to 0.6; random mutation is applied with rate equal to 0.2; and one-individual elitism.As described above, the GA optimization process relies on encoding, into a group of genes comprising a chromosome, the set of parameters that represent each individual candidate solution. This requires a clear definition of how a given pipeline route may be uniquely defined, in terms of its geometric parameterization. For this purpose, this section will begin by presenting the 2D representation of a route, as a horizontal line defined in the xy-plane. Then, the complete three-dimensional representation will be described later in Section 3.2.Considering that the endpoints of a route are represented by points A and B, ideally the straight line AB connecting these points would be the shortest and best route. However, actual routes must bypass obstacles that cross this straight line, and comply with other constraints and criteria that will be defined later. Therefore, candidate routes should incorporate curved segments, defined as circular arcs as illustrated in Fig. 2.In this figure, the route is comprised by straight and curved sections that are characterized by the following parameters: (a) The coordinates of Points of Intersection (PIi) – the point at which the prolongation of the straight lines before and after each curve intersect; (b) The curvature radius (Ri) of each circular arc; (c) The central angle AC of the circular sector; (d) The length T of the tangent straight sections connecting the initial and final point of each curve (PCiand PTirespectively) to the point of intersection PI; (e) The coordinates of points PCi/PTi; and (f) The coordinates of the center C of the circle containing the circular arc.The position of the set of PIs can be associated to base points (pi) uniformly distributed along the straight line AB. The position of each PI relative to the respective base point may then be defined in terms of relative radial (δ) and angular (α) polar coordinates, as indicated in Fig. 3. The following expressions define the absolute Cartesian coordinates of each PI, given the Cartesian coordinates of the corresponding base point (xipandyip):(1)XiPI=xip+δ·cos(α)YiPI=yip+δ·sin(α)Now follows a demonstration that the set of straight lines and curves that comprise a route between points A and B may be completely described by the “primary” parameters (a) and (b) listed above: the relative polar coordinates (δ and α) of the point of intersection PIi, and the curvature radius Riassociated to each curve i. The remaining “secondary” parameters (c) to (f), illustrated in Fig. 4, may be obtained by expressions based on those primary parameters, as will be presented next.The central angle AC of the circular sector can be calculated by parameterizing the two consecutive segments (PIi-1PIi‾andPIiPIi+1‾), with lengths L1 and L2 respectively, employing the following expression:(2)AC=arccosΔx1·Δx2+Δy1·Δy2(Δx12+Δy12)·(Δx22+Δy22)Δx1=XiPI-Xi-1PIΔx2=Xi+1PI-XiPI,Δy1=YiPI-Yi-1PIΔy2=Yi+1PI-YiPIThe length T of the tangent segment can then be calculated from the central angle AC curvature radius Ri:(3)T=Ri·tanAC2The Cartesian coordinates of the initial and final point of each curve, respectively PC(xiPC,yiPC) and PT(xiPT,yiPT), are calculated using the parametric equations of the two straight segments:(4)xiPC=Xi-1PI+Δx1·[1-(T/L1)]yiPC=Yi-1PI+Δy1·[1-(T/L1)]xiPT=XiPI+Δx2·(T/L2)yiPT=YiPI+Δy2·(T/L2)Finally, to calculate the coordinates of the center C of the circle containing the circular arc, one can employ point H (xiH,yiH) indicated in Fig. 4, which divides the linePCPT‾.in two segments of equal length. The coordinates of this point and the lengths of segmentsHPI‾andCPI‾are given by(5)xiH=(xiPC+xiPT)·0,5yiH=(yiPC+yiPT)·0,5HPI‾=(ΔxH)2+(ΔyH)2;CPI‾=T2+R2ΔxH=(xiH-XiPI)ΔyH=(yiH-YiPI)The desired coordinates of the center C of the circle containing the circular arc can then be calculated by(6)xC=XiPI+s·ΔxHyC=YiPI+s·ΔyHs=CPIHPI‾‾The formulation described above provides the planar representation of the route, as a horizontal line defined in the xy-plane and comprised by a sequence of straight and curved segments. However, to evaluate the terms of the objective function and constraints that will be presented later, one needs to obtain the complete three-dimensional representation, in terms of the (x,y,z) coordinates of a series of nodal points along each candidate route.For this purpose, the optimization tool incorporates facilities to import bathymetric data for a given subsea region, from design databases maintained by oil companies – including the SGO database developed by Petrobras, the Brazilian state oil company [37]; SGO is an acronym for “Sistema de Gerenciamento de Obstáculos”, or Obstacle Management System in Portuguese. Usually such data, generated by specialized oceanographic vessels equipped with side-scan sonars, is provided as contour maps of isobathymetric curves, or isobaths. Having imported the isobaths, a standard gridding technique is then employed to generate a wireframe of quadrangular elements.During the optimization process, the planar representation of each candidate route is divided into N equal-length segments connecting N+1 nodal points, with (x,y) coordinates determined using the formulation described in Section 3.1. Using these (x,y) coordinates, the corresponding vertical z-coordinate is then obtained by interpolating on the quadrangular wireframe mesh.Besides the isobathymetric curves, design databases also contain frequently updated information on the positioning and specification of subsea obstacles, gathered by specialized vessels equipped with a ROV (Remotely Operated Vehicle). Therefore, the pipeline optimization tool also incorporates facilities to selectively or fully import the obstacles stored in the database for a given subsea region. Alternatively, the graphical interface of the tool allows the user to manually define and position any given obstacle not included in the database.In any case, the following types of geometric representation for the obstacles are currently being considered: (1) Lines defined by segments connecting points, representing for instance pre-existent pipelines, flowlines or risers; (2) Polygons defined by vertices connected by segments, representing a closed region that should be avoided, e.g. with corals or geotechnical hazards; (3) Spherical Volumes defined by the position of its center and a radius r; and (4) Cylindrical Volumes defined by the position of its center, a radius r and a height z, oriented in the vertical direction. These two latter representations are used for different types of subsea equipment, including pipeline end terminations (PLETs), and pipeline end manifolds (PLEMs).Fig. 5illustrates the visualization of obstacles for a typical scenario, including other pipelines, depicted in green; flowlines and risers, in yellow and red; and the mooring lines of floating platforms, in black. This scenario also includes many other smaller obstacles that cannot be seen in the scale of this picture, such as the subsea equipment mentioned above. The isobathymetric curves, and the straight line AB connecting the points of the route to be optimized, are also represented.Summarizing the geometric parameterization described in Section 3.1, it is seen that the set of straight lines and curves that comprise a route may be completely described only by the three “primary” parameters associated to each curve: the polar coordinates δ and α of the point of intersection PI relative to its associated base point p, and the radius R.It should also be considered that the number of curves needed to adequately represent a route may vary, depending on the route length and the complexity of the scenario in terms of seabottom bathymetry and obstacles. Therefore, in the implementation of the GA, the number of curves actually employed to define each candidate route varies along the evolution process – from zero, corresponding to the trivial straight line AB, up to a user-defined maximum value nmax. That is, the number of curves and their associated PI is also a variable of the optimization process.Each individual candidate route is then encoded by a chromosome with nmaxsets of genes. Each set is associated to a curve, and comprises four genes. The last three genes correspond to the “primary” parameters – radial coordinate δ, angular coordinate α, radius R; and the first gene is an “activation key” A. This is a real value ranging between 0 and 1, which indicates whether the corresponding curve is active or not, associated to an activation threshold At that will be defined next. The full codification of a chromosome can then be written as:A1δ1α1R1A2δ2α2R2…AnmaxδnmaxαnmaxRnmaxwhere A1δ1α1R1 are the genes corresponding to the first curve, and so on.To explain the process of activating the curves, it should be recalled that the individuals of the initial population are randomly created. Therefore, during the generation of this first population, a value for the activation key Aicorresponding to each curve in a route is randomly generated within the range [0,1]. Then, these Aivalues are compared with a given user-defined activation threshold Atthat defines the probability of activation of the curve as (1.0−At)×100. If Ai>At, the corresponding curve is generated by the other three genes: its radius, and the polar coordinates of the PI relative to the closest base point. Otherwise, the curve is inactive and the corresponding section of the route is straight.For instance, if the user feels that a given scenario is relatively simple, he may define a higher value for the threshold parameter, for instance At=0.6; this means that the probability of a given curve to be generated is only 40%, and therefore the generated candidate routes will tend to have fewer curves. On the other hand, the user may force all nmaxcurves to be permanently active for all routes, simply by defining At=0.0.As the evolution of the GA proceeds, the selection/reproduction operators of the GA propagate the values of the activation keys Ai, favoring routes with either fewer or more curves depending on the complexity of the scenario; also, the mutation operator may introduce new random values for these genes.Fig. 6illustrates this issue with a simple example of two randomly generated routes connecting points A and B. These routes should avoid the shaded region defining an obstacle. The maximum number of curves nmaxis set to three; as mentioned before, to each curve is associated a base point piand its respective PIi, positioned by the polar coordinates δiand αi. It can be seen that, even with a uniform distribution for the base points, this relative positioning of the PI allows a non-uniform distribution of the curves. Considering the threshold value set to At=0.2, and assuming randomly generated values for gene A2 of routes (a) and (b) equal to 0.3 and 0.1 respectively, it can be seen that route (a) has all curves active, but is infeasible since it crosses the obstacle. On the other hand, route (b) has its second curve disabled, but avoids the obstacle.Here it is important to stress that these two routes are independently generated, that is, route (b) is not a “modification” of route (a). In the implementation of the GA, a given candidate route will not be altered by disabling or enabling curves in order to increase its fitness; rather, all routes of a given population will be ranked according to their fitness, and their genetic information will be propagated following the usual GA operators. Also, it is not merely the number of curves that determine the feasibility of the route; given different values for the parameters δ, α, and R, a route with three curves could be feasible, and another one with two curves could be infeasible.To formally define a general constrained optimization problem, one can consider a r-dimensional search space S comprised by a vector of design variables x=(x1, x2, x3,…, xr), where the components ximay have lower and upper bounds [lk, uk]. The goal is then to minimize an objective function f(x), considering inequality and equality constraints (respectively gj(x)⩽0 and hj(x)=0) that define the feasible regionfexisting inf⊆S:(7)minimizef(x)subjecttogi(x)≤0,i=1,…,mhj(x)=0,j=1,…,plk⩽xk⩽uk,k=1,…,qConsidering the pipeline route optimization problem, the objective function and constraints should take into account the relevant aspects concerning the choice of the best route. The first and perhaps most important factor is the total length, which should be minimized to reduce material and intervention costs. Therefore, the objective function f could be simply defined as the ratio between the lengths of a given candidate route (Lroute) and of the straight line connecting endpoints A and B (distAB):(8)f=LroutedistABHowever, besides the total length there are several other physical, geometric and structural criteria that must be considered in the design of submarine pipelines, to assess their performance and safety. The criteria are related for instance to geographical/topographical aspects associated with the seabed bathymetry; interference with obstacles; slopes, and so on [24,25]. A detailed description will be presented later on Section 5; at this point it can be stated that the violation of some of those criteria would not indicate that the corresponding solution is infeasible, since mitigation procedures could be adopted. This is the case, for instance, of interference with particular types of obstacles such as other pre-existent pipelines; there are specific installation procedures that allow the new pipe to pass safely over the existing one. From now on we will refer to these as soft criteria; solutions that violate them would still be feasible, although presenting additional costs, therefore they do not formally characterize constraints in the search space.On the other hand, there are other types of criteria whose violation cannot be mitigated; these will be referred as hard criteria – e.g., interference with other types of obstacles such as subsea equipment and mooring lines, and other criteria that will be detailed later in Section 5. Their violation will mark the solution as infeasible, and therefore they should be formally considered as constraints, to be treated by a particular constraint-handling technique including those that will be presented shortly. Here only inequality constraints gj(x) will be considered; equality constraints are not present in this particular engineering application.In this work we propose to treat these “soft” and “hard” criteria separately, as will be described in the remainder of this section.The “soft criteria” will be considered by adding, to the objective function of Eq. (8), cost functions cj(x) associated to the violation of the j-th soft criterion and weighted by positive constant values rjthat provide a relative measure of the importance of the criterion. This leads to the following expression for the objective function f:(9)f(x)=LroutedistAB+∑j=1prjcj(x)SoftCriteriaThis objective function corresponds to a minimization problem, where the goal is to reduce both the value of Lrouteand the cost terms related to the soft criteria; for the ideal route one would trivially have Lroute=distAB, and f=1. Solutions that violate one of the soft criteria are not considered as infeasible; adding the cost terms only represents a handicap, to favor the other possible solutions that do not violate them.Recalling that GAs and other NIAs were originally designed to deal with unconstrained search spaces, in this real-world engineering application the consideration of “hard” criteria that characterizes constraints requires specific constraint-handling techniques, to guide the evolutionary search process to feasible regions.The usual approach consists in transforming the constrained problem into an unconstrained one, by adding penalty terms p(x) to the objective function whenever a given constraint is violated, proportional to the degree of violation. This leads to the following “expanded” expression for the objective function of Eq. (9):(10)F(x)=f(x)+p(x)The most simple penalty function p(x) is the so-called “death-penalty” [2] that assigns arbitrarily large penalty values, or simply eliminates the infeasible individuals from the optimization process; however, this would prevent the search from using valuable information from the infeasible solutions. More generally, the penalty term p(x) may be represented by the sum of values for violation functions vj(x) associated to the m inequality constraints g, affected by positive constants – the penalty factors kjthat scale and/or weight the relative importance, or degree of severity, of the constraints:(11)p(x)=∑j=1mkjvj(x)HardCriteriaThe preliminary implementation of the pipeline route optimization tool presented in [25] employed the so-called static penalty technique – the first and most popular penalty approach, where the factors kiof Eq. (11) have user-specified values and remain fixed along the evolution of the algorithm. Although easy to implement, there are important drawbacks on this approach [2,30]. The most obvious is that it requires a careful fine-tuning of the value for each penalty factor kito determine the severity of the penalties to be applied. This tuning is heavily associated to the particular application and scenario, requiring a “trial and error” process that may lead to high computational costs, and may not be easily generalized; that is, the values that may be suitable for one scenario may not be adequate for a different one.Moreover, in the context of the pipeline route optimization problem that is the focus of this work, there is no practical distinction between “soft” and “hard” criteria, since all of them are represented by violation functions that in the end are added as penalty terms to the unconstrained objective function f. In fact, in the preliminary implementation of the optimization tool presented in [25] the violations of all criteria were incorporated into penalty terms, without distinction between feasible and infeasible individuals.Therefore the use of more recent constraint-handling techniques is desirable, including those that will be presented in this section: respectively, the Adaptive Penalty Method (APM), the ε-Constraint method, and the Ho-Shimizu method. These techniques were implemented on the route optimization tool, according to the pseudo-codes presented in Appendices A and B, and their performance will be assessed later in the case studies.The dynamic and adaptive penalty approaches consider the variation of the penalty factors ki. The former introduces the use of time or the generation counter as a value that affects the factor; and in the adaptive techniques, information from the population is gathered during the evolution process to self-adaptively define “ideal” values kifor each constraint [38–40]. In the APM [26,27] the factor kjthat corresponds to a given violation function vj(x) is adaptively computed at each generation by the following expression:(12)kj=|〈f(x)〉|〈vj(x)〉∑l=1m[〈vl(x)〉]2where the angle brackets 〈〉 indicate the average over the current population: for instance, 〈f(x)〉 is the average of the objective function values for all solutions in the current population, and 〈vl(x)〉 is the violation of the lth constraint averaged over the population. Using this expression, higher penalty factors will be assigned to the constraints more hardly satisfied, that is, with higher average violation values.The objective function for each candidate solution is evaluated by the following expression, where an individual is marked as infeasible if at least one of the “hard” criteria is violated:(13)F(x)=f(x)ifnotviolatedf∗(x)+∑j=1mkjvj(x)otherwisewhere the term f* is given by:(14)f∗(x)=f(x)iff(x)>〈f(x)〉〈f(x)〉otherwiseFig. 7illustrates this procedure for a given objective function f(x) submitted to the constraint g(x). The infeasible individuals (x=1, 2, 3, 4, 5, 6) have their value f* calculated according to expression (14) above. For individuals #1 and #2, the values of the objective function are higher than the average of the population 〈f(x)〉, and therefore f*=f(x). Individuals #3, #4, #5 and #6 (represented by open circles) have values for the objective function which are lower than the average and therefore f* is set to 〈f(x)〉.In the aforementioned penalization techniques, the selection operator of the GA is based merely on comparing the values of the objective function F for each individual of the population. More recently, other constraint-handling techniques reported in the literature introduced modifications on the ranking procedure for selecting individuals: this is the case of the so-called ε-Constrained method[2,29]. In this technique, the individuals are ranked based on a lexicographic order of sets of values (f, ϕ) assigned to each individual, where ϕ is a function that indicates the level of constraint violation, given by the following expression:(15)ϕ=∑j=1mvj(x)2vj(x)>0ifconstraintviolatedvj(x)=0otherwiseConsidering two individuals 1 and 2, their ranking is performed as follows:(16)(f1,ϕ1)<ε(f2,ϕ2)⇔f1<f2,ifϕ1,ϕ2⩽εf1<f2,ifϕ1=ϕ2ϕ1<ϕ2,otherwiseIn this expression ε is a specified value that represents a tolerance related to the sum of constraint violation. The first option inside the curly bracket means that if both solutions in the pairwise comparison are feasible or slightly infeasible, as determined by the ε value, they are compared using their objective function values f. The second and third options refer to infeasible solutions: the second option means that two infeasible solutions presenting the same sum of constraint violation ϕ will also be compared using their objective function values; otherwise, in the third option they will be compared based on their sum of constraint violation.It can be seen that, for the particular case ε=∞, the pairwise comparison is made only in terms of the objective function values f; therefore, if the objective function includes penalty terms associated to constraints, the method would be similar to the classical static penalty technique of Eq. (10) where all infeasible solutions would be kept in the optimization process.In this work, the objective function for the pipeline route optimization problem is given by f(x) of Eq. (9) that incorporates the cost functions for the soft criteria but does not incorporate penalty terms. Also, assuming that for this particular application the feasibility of a solution is more important than the minimization of its objective function, we take ε=0; in this case, the lexicographical ordering considers that the minimization of the sum of constraint violation ϕ precedes the minimization of the objective function f. Feasible solutions are ranked based on their unconstrained objective function values f; infeasible solutions are compared based on their sum of constraint violation ϕ. If one of the solutions is infeasible (ϕ>0) and the other is feasible (ϕ=0), the latter will be selected.This reasoning also applies for other finite, positive values of ε: in this case, considering ε as a relaxation of the limit to consider a solution as acceptable, “slightly infeasible” solutions with ϕ<ε would also be compared using their objective function values.The Stochastic Ranking method is one more technique that has been proposed to deal with the inherent shortcomings of standard penalization methods [2,30] – that is, how to combine into one term values with different orders of magnitude that may be used to describe each individual of a given population: (a) The objective function f; (b) A measure of constraint violation such as the sum of its squares ϕ given by Eq. (15); and (c) The number of constraints violated Nv.In the original formulation of the Stochastic Ranking method presented in [30], the fitness of each individual is determined through a Stochastic Ranking procedure similar to a bubble sort, in which the individuals are compared only to the adjacent neighborhoods. The comparison criterion may be based either on the objective function or the constraint violation, and this choice is randomly determined by a user-specified probability term Pf.In this work, we follow the approach proposed in [31], which adds a simple ranking method that balances the objective function against the constraint violation without requiring any user-defined additional parameters. The set of individuals are ranked independently with respect to each parameter (f, ϕ, Nv), producing three new ranking terms, denoted by Rf, Rϕand RNv, respectively. The first rank Rfcompares the value of the objective function f; the second rank Rϕcompares the sum of constraint violations; and the third rank RNvcompares the number of constraints violated. The position of a given individual A in each one of these ranks is equal to 1+d, where d is the number of individuals that dominate A. Therefore each one of these three ranks ranges from 1 to N, where N is the size of population, so the three ranking terms have the same order of magnitude and can be easily manipulated.If a given population has only infeasible individuals, the final value of the objective function will be defined as the sum of the rank terms Rϕand RNvsince the goal is to seek the first feasible solution from the search space and the information from f becomes unimportant:(17)F=Rϕ+RNvOtherwise, if the population has both feasible and infeasible individuals, the algorithm should explore the search space adding the Rfrank to find the optimal solution. Therefore the objective function is given by:(18)F=Rf+2forfeasiblesolutionsRf+Rϕ+RNvforunfeasiblesolutionswhere Rϕand RNvserve as penalty terms for infeasible solutions; for feasible solutions Rϕ=RNv=1.As mentioned before, the choice of a given pipeline route should comply with several criteria that assess their performance and safety. This section describes the criteria that are considered in this work, taking into account the classification of the pipeline route design criteria into “soft” and “hard” introduced in Section 3.5, and presents the corresponding expressions for their cost functions c(x) or violation functions v(x) to be incorporated on the constraint-handling techniques.Here it should be recalled that the focus of this work is in the selection of the route. It is assumed that the outer diameter and wall thickness of the pipes have already been selected from previous design steps; usually, the outer diameter is dictated by the amount of oil or gas to be transported, according to the yield of the well; and the wall thickness is dictated by strength constraints related to collapse under external hydrostatic pressure [41]. However, there are other strength constraints that could be included in the route optimization procedure, such as on-bottom stability criteria [42] and criteria related to the structural behavior of the pipe in free spans [43]. These are presently being considered for inclusion in future works.As described in Section 3.3 and illustrated in Fig. 5, the pipeline optimization tool can automatically import seabottom data from standard design databases, including data related to different types of obstacles: subsea equipment, flowlines, other pre-existent pipelines, regions with corals or geotechnical hazards that should be avoided.The implementation of the tool allows the user to associate a level of severity to each obstacle, according to the consequences of the possible interference: Level 1 – Interference can be tolerated, with low severity and easily mitigated; Level 2 – Interference could be conditionally allowed, with moderate severity introducing relatively higher mitigation costs; Level 3 – Interference is not allowed, severity is high; Level 4 – Interference is not allowed, severity is critical.According to the classification of the pipeline route design criteria into “soft” and “hard” as described in Section 3.5, obstacles with Level 1 and Level 2 such as pre-existent pipelines are considered “soft” since interference with them would require mitigation procedures with additional costs, but would not indicate that the route is infeasible. On the other hand, obstacles with Level 3 and Level 4 such as subsea equipment or mooring lines are considered “hard” criteria that define constraints.During the optimization process, interference is identified by verifying the intersections between the segments or volumes that define the obstacles, described in Section 3.3, against the nodal points and segments along each candidate route defined by the three-dimensional representation defined in Section 3.2. The total number of intersections for each “soft” or “hard” severity group is counted and assigned to the variable nInterS and nInterH respectively.The cost and violation terms associated to these criteria are then defined by the following expressions, considering a severity value assigned by the specialist to each level:(19)cobst=∑i=1nInterSSeverityi(20)vobst=∑i=1nInterHSeverityiUsing the geometric parameterization described in Section 3, the optimization process might eventually generate routes in which the pipeline passes over itself. To avoid such configurations with self-crossings or loops, the following violation term associated to a “hard” criterion defining a constraint is then introduced, based on an algorithm that spans all nodes and segments of the route and counts the number of self-crossings (nSelfCross):(21)vSelfCross=nSelfCrossPipeline launching operations requires straight sections between two consecutive curves, to allow proper space for the maneuvering of the launching ship. Straight sections are already incorporated in the geometric parameterization described before, but if a given minimum length Lmin is not respected the operation may be infeasible. Therefore a “hard” criterion/constraint is defined, represented by the following violation term, activated whenever the route contains one or more straight sections with length Lilower than Lmin:(22)vLminStr=∑i=1nStraightLmin-LiLminA similar term is also introduced to comply with the installation requirement that the route should begin and end with straight sections, with length greater than Lmin.During the pipeline launching operation, the top connection device at the launching ship applies a given tension to the pipe. After the completion of the operation and the accommodation of the pipeline on the seabed, the pipe segments still maintain a certain level of residual tension. It is the balance between this residual tension and the lateral friction forces from the soil that maintains the curved sections of the pipeline over the predefined route. On curves with smaller radius the friction forces may not be sufficient, and the pipe can slide sideways.Therefore, to assure the feasibility of a given route, the curved sections should present radius of curvature larger than a given value Rmin that is function of the pipe-soil friction coefficient μ, pipe weight wsand residual pipe tension Tresidualat its equilibrium configuration after installation:(23)Rmin=Tresidualμ∗wsThis corresponds to a “hard” criterion defining a constraint, for which the following violation term is introduced, whenever the radius of a given curve of the route Riis lower than the minimum value Rmin:(24)vRmin=∑i=1n(Rmin-Ri)RminAnother important geographical-topographical aspect, related to the seabottom bathymetry, is the slope of the regions where the pipeline is set. Values for the declivity of a given number of nodes of a candidate route can be calculated taking the z-coordinate of two consecutive nodes along the route, which in turn are determined from the grid of quadrangular elements interpolated from the isobathymetric curves. Fig. 8illustrates, using a color gradation scheme, the degree of declivity along a typical route.Assuming that mitigation procedures can be adopted for route segments with declivityθLiexceeding a given limit θL_Lim, this can be defined as a “soft” criterion to which the following cost function is associated, where nNodesViol is the number of points along the route where the criterion is violated, and nNodes is the total number of points on the route:(25)cdecliv=∑i=1nNodesViolθLi-θL_LimnNodesifθLi>θL_LimIn some situations during the design of a pipeline route, it would be desirable to keep the route near to some regions of interest – for instance, a manifold connecting other pipelines or flowlines, or even production platforms, allowing the pipeline to collect the production of adjacent oil field. This can also be considered a “soft” criterion if one assumes that routes passing far from such regions would not be infeasible, but would require higher costs. These regions are referred here as “attractors”; in Fig. 9they are represented as purple circles around given points.Considering nAttr as the number of attractors, the following cost function can then be activated whenever the distance between the route segment closest to a given attractor (minDisti) exceeds a certain limit defined as the radius of the attractor circle RiAttr:(26)cattr=∑i=1nAttrwiminDistidistABifminDisti>RAttriIn this expression, wiis a weight factor indicating the relative importance of each attractor; distABis the length of the straight line AB connecting the endpoints of the route, employed to scale and normalize the cost function.In this section the pipeline route optimization tool, built according to the modeling presented in Sections 3 and 5 and incorporating the constraint handling methodologies described in Section 4, will be applied for the scenarios illustrated in Figs. 10 and 11, both representative of actual offshore operations. The straight line AB connecting the points of the route to be optimized is depicted in pink, with length distAB=12.474km and 49.393km respectively for the first and second scenario. The pipeline properties are listed in Table 1.Seabottom data, including the isobathymetric curves and the obstacles, have been automatically imported from a design database, as described in Section 3.3. The classification of the obstacles for these scenarios, following the definition presented in Section 5.1, will be detailed shortly in Sections 6.2 and 6.3.It can be seen that the second scenario is more complex: not only the distance between the endpoints is greater, but it presents a seabottom with a much more irregular bathymetry; also, it incorporates an obstacle indicated by a black polygon, representing an area allotted to another oil company, which must be avoided by the candidate routes. Finally, attractors, indicated as purple circles in Fig. 11, are considered as an additional criterion.The general form of the objective function is represented by Eq. (9), recalling that this expression incorporates the cost functions cj(x) for the “soft” criteria whose violation can be mitigated, but does not incorporate the “hard” criteria that formally characterizes design constraints – those will be summarized next in Section 6.3.Among the criteria presented in Section 5, the ones that are classified as “soft” are summarized below:•Interference with Level 1 and Level 2 obstacles, as described in Section 5.1. In Figs. 10 and 11 they are indicated respectively in green and yellow: green lines represent pre-existent pipelines, and yellow lines represent flowlines and risers.Declivity, as described in Section 5.5, recalling that mitigation procedures can be adopted for route segments with declivityθLiexceeding a given user-defined limitθL_Lim.Attractors, as described in Section 5.6.The particular form of the objective function corresponding to Scenario 2 that includes attractors is then written as:(27)f(x)=LroutedistAB+robstcobst+rdeclivcdecliv+rattrcattrwhere the three last terms at the right-hand side correspond to the cost functions defined respectively by Eqs. (19), (25), and (26) presented in Section 5. For Scenario 1 that does not include attractors, the last term is omitted. It should be recalled that, although the mathematical expressions of these cost terms may seem simple, their evaluation is not trivial since this involves calculations performed for possibly hundreds or thousands of points along each candidate route, using the three-dimensional representation obtained by combining the planar formulation presented in Section 3.1 with the vertical z-coordinates determined by interpolating the seafloor bathymetric data as described in Section 3.2.Table 2presents the cost factors and the user-assigned values for the parameters associated to these soft criteria, tuned through preliminary studies, considering the characteristics of the respective scenario and the previous experience in the design of submarine pipeline routes.As described in Section 3.5, the design constraints correspond to the “hard” criteria whose violation cannot be mitigated. The general form of the expression that defines the constraints is dependent on the particular constraint-handling technique employed. For the static penalty technique and the APM, it is defined by the penalty term of Eq. (11). The ε-Constrained and the Ho-Shimizu methods work directly with ϕ of Eq. (15), function of the sum of violations vj(x).Amongst the criteria presented in Section 5, the ones that are classified as “hard” are summarized below:•Interference with Level 3 and Level 4 obstacles, as described in Section 5.1. Recalling that the classification of the obstacles is defined by the designer, for scenario 1 (Fig. 10) only Level 3 obstacles are defined – the mooring lines of the floating platforms, indicated in red. On the other hand, for scenario 2 (Fig. 11) the mooring lines are treated as Level 4 obstacles, indicated in black; also, another Level 4 obstacle is added – the black polygon representing an area allotted to another oil company.Self-crossing, as described in Section 5.2.Minimum length of straight sections, as described in Section 5.3.Minimum radius of curvature, as described in Section 5.4.The particular form of the constraint functions for both scenarios may then be easily assembled by including, in Eqs. (11), (15) according to the constraint-handling technique employed, the violation functions defined by Eqs. (20), (21), (22), and (24) presented in Section 5. Again it should be recalled that, although the mathematical expressions of these violation terms may seem simple, their evaluation is not trivial since this involves calculations performed for possibly hundreds or thousands of points along each candidate route.Table 3presents the penalty factors and the user-assigned values for the parameters associated to these “hard” criteria/design constraints, also tuned through preliminary studies considering the previous experience of the designer. It should be recalled that the penalty factor values of Eq. (11) are employed only by the static penalty technique; the APM technique automatically adjusts these factors, while the ε-Constrained and the Ho-Shimizu methods work directly with ϕ of Eq. (15) and therefore do not employ penalty factors.The parameters that define the search space of the problem, as described in Section 3.4, are the maximum number of curves nmaxand the threshold of the activating factor At. Is important to emphasize that each activated curve adds four new parameters to the route representation; thus, in using the optimization tool for a given scenario, care should be taken in the selection of the maximum number of curves nmax: few curves may not allow an adequate representation for a route to avoid all obstacles in a given seabed; too many curves increase the search space and complexity of the problem, possibly hampering the convergence of the optimization process. Here these parameters are set to nmax=3 and 5 respectively for Scenarios 1 and 2, and At=0.25 for both scenarios.

@&#CONCLUSIONS@&#
This work describes the modeling, formulation and implementation of a computational tool for the synthesis and optimization of submarine pipeline routes. Special attention is dedicated to the incorporation of the more relevant design criteria, classified into “soft” and “hard” according to the consequences of their violation, and to the assessment of more efficient techniques to handle the constraints associated to the “hard” criteria.The case studies demonstrate the application of the optimization tool to scenarios representative of real-world pipeline installation operations, mainly on offshore Southeastern Brazil pre-salt fields. It can be expected that its actual use in the oil & gas industry, replacing the traditional procedure where the engineer manually inspects bathymetric data and obstacles, will reduce the design time needed to assess an optimal pipeline route. More important, it will provide more accurate results, avoiding mistakes with route interpretation, and ultimately minimizing the huge costs that are associated to the installation and operation of submarine pipelines.The results of the case studies indicated the importance of clearly characterizing feasible and infeasible solutions, according to the proposal of classifying the design criteria as “soft” or “hard” respectively. In this context, one can observe that the use of the classic static penalty approach is not adequate, especially in more complex scenarios; therefore it is important to associate these criteria to more advanced constraint-handling techniques including the APM, ε-Constrained and Ho-Shimizu methods that have shown better performances in selecting the best feasible route, with smaller number of evaluations.Future works will present the association of these techniques to additional pipeline design criteria including on-bottom stability criteria [42], and criteria related to free spans [43]. It is expected that, with the addition of these criteria, the computational overhead required for the evaluation of each candidate solution will be more determinant for the choice of the constraint-handling technique; therefore special attention should be focused on increasing its ability of providing feasible solutions, while reducing the number of evaluations to determine the optimal solution.Finally, the performance of other evolutionary optimization methods such as SIA, PSO and Differential Evolution (DE) will also be assessed, coupled with these constraint handling techniques. In this context, it is well known that the performance of such algorithms may be significantly dependent on the particular application; therefore, a fair performance comparison clearly depends on tailoring the settings of their parameters by taking the results of extensive parametric studies, following procedures similar to those employed by the authors in the context of the optimization of risers connected to floating oil production systems [32,33,36].