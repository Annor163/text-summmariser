@&#MAIN-TITLE@&#
Model checking XSL transformations

@&#HIGHLIGHTS@&#
We develop a framework to model XSL transformations and XML Schema constraints.We use model checking to verify the correctness of XSL transformations.We provide a tool for XSL verification, including an advanced error reporting.We show how to interactively check and fix XSL transformations in our framework.

@&#KEYPHRASES@&#
XML technologies,XSLT language,Software verification,Model checking,

@&#ABSTRACT@&#
The XSLT language is key technology to develop software which manipulates data encoded in XML, a versatile formalism widely adopted for information description and exchange. This motivates the adoption of formal techniques to certify the correctness (with respect to the expected output) and robustness (e.g., tolerance to malformed inputs) of the XSLT code. Unfortunately, such code cannot be validated using only static approaches (i.e., without executing it), due to the complexity of the XSLT formalism. In this paper we show how a software verification technology, namely the model checking, can be adapted to obtain an effective and easy to use XSLT validation framework. The core of the presented methodology is the XSLToMurphi algorithm, which is able to build a formal model of an XSLT transformation, suitable to be verified through the CMurphi tool.

@&#INTRODUCTION@&#
The eXtensible Markup Language (XML) [1] is a flexible tagged text format derived from the Standard Generalised Markup Language (SGML) [2], proposed in 1996 by the W3C Consortium [3] as a tool to standardise the format of all the documents used on the Web and to meet the challenges of large-scale electronic publishing. The XML language is extremely simple and versatile: the information is organised in a tree-structured fashion, which is both human readable and machine processable.This W3C proposal had immediate success, becoming a de facto standard, and it is now being widely adopted for the description and the manipulation of data. Indeed, XML documents represent data structures in a clear, cross-platform and open format, which is ideal for the Web. This trend has been further pushed by the fact that applications can easily manipulate XML-structured data using specialised tools and languages like the XSL Transformations (XSLT [4]).XSLT is a key technology for accessing XML data: indeed, by using XSLT it is possible to•Perform complex data manipulation that would traditionally require server side programming.Transform XML data in any text or XML based format.Achieve a strong separation between the data and its representation, which could be otherwise obtained only using methodologies like the HTML templates [5,6].These features make XSLT suitable to many scenarios, like data manipulation and presentation in XML databases [7–12], publishing of XML data through XHTML [13] or XSL-FO [14,15] and conversion between XML data structures [7,16–18]. Moreover, the introduction of XML-based standards in many research communities led to the adoption of XSLT for data manipulation tasks that were previously performed using traditional programming languages: for example, the XMI [19] standard made XSLT transformations a powerful tool in the software engineering field [20–22].More recently, in XML databases, new languages like XQuery [23] are being used to perform XML data manipulation and transformation. XQuery and XSLT have the same expressive power, so both formalisms can be used alternatively [24].

@&#CONCLUSIONS@&#
The benefits deriving from XSLT validation are widely testified by the number of research works and tools in this field (see Section 8). In this paper we described a new technique to validate XSL transformations by means of a standard technology, i.e., model checking. In particular, our work focused on the full automatisation of the XSLT model checking process through an algorithm called XSLToMurphi, which completely hides the complexity of the model checking technology to the user.Indeed, we first devised an algorithm that, starting from an XSLT stylesheet, is able to generate a transformation model suitable to be analysed by the model checker CMurphi. Then, we implemented another algorithm that translates XML Schemas (or fragments of them) into invariants that can be checked on each state of the transformation. Finally, we joined these two algorithms to the model checker CMurphi and added an output analyser that generates effective error reports to help fixing the detected problems. The resulting XSLT validation framework is extremely accurate and straightforward, as reported by our experiments, whose results are very encouraging.The application of model checking techniques in any field, from the verification of code to the safety checking of internet protocols and to the validation of circuit design and software architectures, always produced some benefits, often integrating preexisting static verification approaches. Therefore, we feel that XSLToMurphi, as the first tool exploiting model checking in the XSLT context, will also offer a valuable support in this field, thanks to its ability to detect and guide the correction of all the XSLT errors, from the most common, e.g., missing elements, to the most subtle, like deadlocks or loops, on stylesheets of any complexity.The current prototype of XSLToMurphi does not support the full XSLT and XML Schema specifications. However, most of the missing features have been studied and their implementation is planned in the next releases of the algorithm. In particular•The current XPath interpreter of XSLToMurphi does not support the use of variables and limits the XPath expressions complexity. To achieve a full XPath compliance, we plan to use an external XPath parser and embed the parse results in the transformation model.User-defined simple types are not considered in the validation process. To support them, we intend to extend the current type checking routines, which handle only built-in simple types.Finally, we aim at supporting all the XSLT 2.0 advanced features.Future enhancements of XSLToMurphi could also include some kind of context analysis: indeed, useful hints on the current document structure could be generated by better exploiting the instructions context, in particular looking at theandattributes. Moreover, the input verifier generation capability of XSLToMurphi, introduced in Section 6.1, may potentially be very useful in the XSLT practice. This feature is in a very early development, and the generated “offending paths” may still be too generic to be useful at this stage. However, we are working to refine this interesting feature, also by modifying the CMurphi verifier.Finally, a variant of CMurphi, called FHP-Murphi [66], allows to express finite-horizon constraints using the probabilistic temporal logic PCTL [67] and perform probabilistic verification [68–70]. Both these techniques may result useful also in our framework, for example to check performance and safety aspects. In this way, the model generated by XSLToMurphi may be used for purposes that are beyond the simple XSLT validation issues.