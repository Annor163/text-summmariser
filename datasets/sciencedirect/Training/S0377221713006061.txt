@&#MAIN-TITLE@&#
Determining near optimal base-stock levels in two-stage general inventory systems

@&#HIGHLIGHTS@&#
We consider a two-level general inventory system.We propose an easily implementable, scalable decomposition heuristic for determining base-stock levels.The base-stock levels identified by the heuristic are near optimal.Considerable improvements can be obtained compared to common- sense heuristics.

@&#KEYPHRASES@&#
Supply chain management,Inventory management,Safety stocks,General inventory system,

@&#ABSTRACT@&#
This paper proposes an easily implementable, scalable decomposition heuristic for determining near optimal base stocks in two-level general inventory systems. In this heuristic, the general system is decomposed into assembly systems—one for each end product. For these assembly systems, the base-stock levels are calculated separately, taking into account risk-pooling effects for the common components. Our numerical analyses yield two main insights: First, the base-stock levels determined by the heuristic are close-to-optimal. Second, considerable improvements can be obtained compared to common-sense heuristics.

@&#INTRODUCTION@&#
This paper considers a two-level general inventory system. Outside suppliers deliver components to a raw material warehouse. Customers’ demands are fulfilled from stocks of finished products. For replenishing these stocks, components are taken out of the warehouse and assembled. We have product-specific components as well as common components, which are included in the bill-of-materials of multiple end products. The assembly capacity is unlimited. The lead times for producing the finished product and for supply of components are deterministic and may be significant. There are no fixed costs for supply and assembly. Demands are stochastic. In case of shortages of finished products, demands are backordered. Both components and finished products can be held in stock at the expense of item-specific inventory holding costs. All problem parameters are stationary. The objective is to minimize the long-run average expected inventory and backorder costs.This setting has a high practical relevance. Examples are the production of circuit boards (e.g., Grotzinger, Srinivasan, Akella, & Bollapragada, 1993) and of surgery sets (e.g., customer procedure trays at Paul Hartmann AG). Surgery sets consist of up to 60 different components. Customers can configure their sets on their own, thereby choosing between several thousands of different components. Often customers order their sets continuously during some years. Before a set can be sold, it has to be sterilized. Since sterilization and transport after assembly take at least 3weeks (including quarantine time), stocks of finished products have to be built up. Capacities can often be regarded as unlimited in this context. Assembly personnel is extendable rather easily at short-term (e.g., through flexible working hours), and sterilization activities can be outsourced. As the (deterministic) sterilization and transport times are much larger than the assembly time, the assumption of deterministic production lead times seems appropriate in this context.In practice, inventory management in such systems is often driven by simple heuristics without focus on cost-effectiveness. We believe that a major reason for this is the lack of scalable approaches which yield near optimal solutions and do not require heavy computation. Even the potential benefits from more sophisticated methods are largely unknown. Probably the most important topics in this context are the choice of the safety stocks and the strategy for component allocation. For component allocation, we assume a fixed and—in our opinion—favorable procedure. The main contribution of this paper is a new, simple heuristic for determining the safety stocks. We assume that the inventory levels of products and components are controlled using base-stock policies. Our heuristic decomposes the general system into separate assembly systems. For these assembly systems, the optimal base stocks can be determined using standard approaches. Among those is the procedure of Shang and Song (2003), which is the base for the heuristic developed by us. The main idea of our heuristic is to take the risk-pooling effects due to component commonality into account. When calculating the base stocks of the common components, the cumulated secondary demand for all their successors is considered. Apart from our new heuristic, we evaluate two “common-sense” heuristics in computational tests: level-by-level optimization and holding stocks of finished products only. Our heuristic performs well. In all of its variants, the resulting costs increased by less than 0.9–1.2% on the average, compared to the optimal solution from enumerating all combinations of base stocks between wide upper and lower limits. Compared to the common-sense heuristics, the improvement is considerable. The solutions have been more than 7.9% cheaper.In the literature, effective heuristics for determining safety stocks in general inventory systems are rare. Despite the significant advances during the last years (e.g., Song & Yao, 2002; Benjaafar & ElHafsi, 2006; Song & Zhao, 2009; Lu & Song, 2005; Lu, Song, & Zhao, 2010; Dogru, Reiman, & Wang, 2010; Nadar, Akan, & Scheller-Wolf, 2012), this is also true for assemble-to-order (ATO) systems (see also Song & Zipkin, 2003 for this argument). ATO systems represent an important special case of the setting investigated in this paper: In ATO systems we have negligible lead times for assembly, such that finished products are not held in inventory. (A further related problem class is the repair kit problem (e.g., Smith, Chambers, & Shlifer, 1980). This problems share with ATO systems the assumption of zero finished product inventory since repair jobs cannot be done in advance. A main difference is that for component replenishment, the repairman undertakes a tour to a central depot. Thus, the repair kit models usually consider a single period or a periodic review policy with negligible component replenishment lead times.)We are aware of two bodies of work dealing with scalable heuristics for general inventory systems (see also Graves & Willems, 2003 & de Kok & Fransoo, 2003 for overviews). The first is the so-called “guaranteed-service model approach” (e.g., Inderfurth & Minner, 1998; Graves, Willems, & Zipkin, 2000; Humair & Willems, 2006). Here a fixed external service time and upper bounded demand are assumed. Then each stage is able to quote a guaranteed, deterministic service time to its successors, which simplifies the determination of the safety stocks. The scope differs significantly from ours because the trade-off between inventory holding and backorder costs for finished products is not optimized by these models—this trade-off is exogenously predetermined by the amount of the external service time and the demand bound.The second body corresponds to the “stochastic-service model approach”. On the one hand, this includes large-scale, generic supply chain models where the stochastic lead times between stages are approximated by a random variable, while assuming that at most one component can be out of stock (e.g., Ettl, Feigin, Lin, & Yao, 2000). This assumption is especially critical in assembly structures with many components. There, we have a significant probability for stockouts of more than one component at one instance of time. Our heuristic does not rely on this assumption.On the other hand, some researchers propose heuristics particularly designed for inventory systems with an assembly focus. Chew, Lee, and Lau (2010) determine safety stocks using infinitesimal perturbation analysis and a steepest descent algorithm. This requires significant problem-specific computing, in contrast to the heuristic proposed here. de Kok and Visschers (1999) propose a decomposition algorithm. For the special case where different components have the longest cumulative lead times, they outline a concrete solution procedure. More general settings, like the one investigated in this paper, are not considered. In this special case, the system is decomposed into serial systems, like our approach. The solution procedure of de Kok and Visschers (1999), however, cannot be compared with ours since its objective is different: the minimization of inventory subject to a service-level constraint. However, there is one important analogy: De Kok and Visschers solve the serial systems separately. Since they do not take risk-pooling effects into account, however, their solutions will often become suboptimal. We investigated an analogous scenario in our computational tests of Section 4 (αi=0). There, the degree of suboptimality ranged between 1.8% and 5.1% compared to the preferred variant of our heuristic.This paper is organized as follows. Section 2 presents the model and the allocation procedure. The decomposition heuristic is described in Section 3. The computational study in Section 4 provides insights into the solution quality of the heuristic and the potential savings compared to common-sense heuristics. Section 5 concludes the paper.Consider a two-level general inventory system. There are i=1,…, m finished products. The products are assembled on resources with unlimited capacities using components j=1,…, n. Denote the number of units of component j required to assemble product i by rji, where rji⩾0. The components are procured from outside suppliers with unlimited capacities. The lead times Liand Ljfor assembly and supply are deterministic. Inventory holding is allowed for all items. Denote by hiand hjthe (local) holding costs for the products and components, respectively, per unit time. The echelon holding costs of products arehie. For each product i, customers’ demand follows a Poisson process {Di(t): t>0} with rate λi, where Di(t) is the cumulative demand in the interval (0,t]. (Note that the heuristic is applicable for other distributions, too. Therefore, we will keep our exposition as generic as possible and highlight the settings specific to Poisson demand.) Demands are satisfied from on-hand inventory if possible. Shortages are backordered. Each unit backorder of product i incurs a (penalty) cost bi.The following variables are used to describe the dynamics of the system:For the products,Bi(t)backorders of product i in period t,Ii(t)on-hand inventory of product i in period t,INi(t)net inventory of product i in period t, INi(t)=Ii(t)−Bi(t),IOi(t)inventory on order of product i in period t,ITi(t)work-in-progress inventory of product i in period t (this corresponds to transit inventory in multiple-retailer models),ITPi(t)work-in-progress inventory position of product i in period t,ITPi(t)=ITi(t)+INi(t).For the components,Wj(t)units of component j that are consumed for production in period t,Ij(t)on-hand inventory of component j in period t,IOj(t)inventory on order of component j in period t.Moreover, denote Dias the lead time demand for product i. This is a random variable with the distribution of Di(t, t+Li]=Di(t+Li)−Di(t).The sequence of events in the system is as follows: At first, the on-hand component inventories are allocated to the outstanding orders (a). The production of finished goods is carried out and inventory replenishments from the suppliers arrive (b). The customers’ demands occur (c). The resulting inventories as well as new reorders are determined (d). Last, holding and backorder costs are calculated (e).The allocation procedure, which determines Wj(t) and, consequently, ITi(t) in step (a), will be described below. For actualizing the inventories in step (d), we rely on the following calculation. The net inventory of product i is determined considering the incoming and outgoing elements over the production lead time:(1)INi(t)=INi(t-Li)+ITi(t-Li)-Difori=1,…,m.We rely on ITi(t) instead of IOi(t) as incoming elements in (1) because in case of component shortages, not all orders IOi(t) will be fulfilled within the production lead time. The amount of delayed orders for product i in period t is equal to IOi(t)−ITi(t). From INi(t), we obtain Ii(t) and Bi(t) byIi(t)=max{0,INi(t)}fori=1,…,m,Bi(t)=max{0,-INi(t)}fori=1,…,m.For the inventories of components, we have(2)Ij(t)=Ij(t-Lj)-∑τ=t-Lj+1tWj(τ)+IOj(t-Lj)forj=1,…,n.Eq. (2) is constructed analogously to (1). A main difference is that we rely here on the on-hand inventories instead of the net inventories since external (back) orders on the component level are not included in our model.For determining the reorders in step (d), assume that each product i and each component j are controlled centrally using base-stock policies. (Note that the optimal policy in this setting is not known. Dynamic programming (see, e.g., Powell, 2007) could be applied to calculate an approximately optimal policy. This approach has been used, e.g., for comparing different pull systems in Ohno (2011). For our target, the development of a simple heuristic, a predetermined policy seems to be better suited. Like most of the literature (e.g., Lu & Song, 2005), we assume a base-stock policy as a surrogate for the optimal one.) The installation base-stock levels are sifor product i and sjfor component j. Since we have base-stock policies, the reorders are determined byIOi(t)=si-INi(t)fori=1,…,m,IOj(t)=sj-Ij(t)forj=1,…,n.Next, we address the allocation (step a). For general inventory systems, the optimal allocation strategy is not known. In this paper, we develop a new strategy, which is not too complex and combines features of two strategies, which have proved favorable in special cases. (Note that our heuristic can be applied in combination with any allocation procedure. The procedure outlined here seems effective and underlies our computational tests of Section 4.) The first is “myopic allocation” (see Federgruen & Zipkin, 1984). Given a divergent system, the common component is allocated in such a way that the current costs for inventory holding and backorders are minimized. DefineITPi-(t)as the inventory position of product i before allocation in period t. The inventory position after allocation is ITPi(t). Assume that the total amount of the common component to be allocated,ITPr(t)=∑i=1mITPi(t), is an input data for the allocation. The costs related with product i in period t are Ci(ITPi(t))=hiIi(t)+biBi(t), where both Ii(t) and Bi(t) depend on ITPi(t). Formally, myopic allocation means to choose ITPi(t) (i=1,…,m) as the optimal solution tomin∑i=1mCi(ITPi(t))∑i=1mITPi(t)=ITPr(t),ITPi(t)⩾ITPi-(t)fori=1,…,m,whereITPi(t)∈Z(i=1,…,m)in case of Poisson demand.The second strategy is no-holdback (NHB) allocation, which is used for ATO systems (see Lu et al., 2010). Here shortages of particular components may prevent the assembly of prioritized products. There are two ways to react: One is FCFS (first-come-first-served), i.e., to reserve the inventories of the available components for the prioritized products and to wait for the missing components to arrive. The other option is NHB, i.e., not to reserve inventories, but to produce the next product with available components according to the given priorities.In this paper, we take the largest marginal cost savings in the current period as prioritization criterion—like in myopic allocation. Component inventories are not reserved—like in NHB. Instead, we allocate in case of shortages the available components to the product with the second-largest marginal cost savings, then to that with the third-largest savings, and so on.Below we state our allocation procedure in algorithmic form. We use a fixed step size ∊ for increasing ITi(t) (and, hence, ITPi(t)) during the allocation. For the Poisson distribution, ∊=1 holds. (For continuous distributions, the trade-off between the envisaged accuracy and the computational effort determines the step size.) To reduce the computational effort, in each step of the algorithm we only consider the relevant subset of products A⊆{1,…,m}, i.e., the products with sufficient component inventory and outstanding orders. Define Pias the set of predecessors of product i. The function determineMarginalCostReduction (ITi(t),i,∊) calculates the cost reduction for increasing ITi(t) by ∊. In case of Poisson demand, the result of this function equalsbi(1-Fi(ITPi+∊))-hiFi(ITPi+∊),with Fi(.) as the cumulative distribution function (cdf) of Di.Algorithm 1Allocation procedureThis section provides the main contribution of this paper, the new decomposition heuristic. The basic idea of the heuristic is simple: To decompose the general system into assembly systems and to calculate the optimal base-stock levels for them. For each product, the decomposition generates an assembly system, which consists of this product and its predecessors (see Fig. 1for an illustration). Based on that, there is a straightforward approach for calculating the base stocks for the original, general system: At first, the optimal base stocks are separately determined for each assembly system. Then we sum up for each component the base stocks of all assembly systems. Unfortunately, this approach will usually yield suboptimal results since it overstates the inventories of the common components. This is because the synergy effects of component commonality are not accounted for. Our heuristic devises an effective way to capture these synergy effects: When we calculate the base stocks for common components, we rely on a reduced demand variability.As a base for this calculation, we use the decomposition heuristic developed by Shang and Song (2003) for serial systems. Consider the assembly system for product i. Assume that this assembly system has been transformed into a serial system with k=1,…, K stages, where K=∣Pi∣+1. (Each assembly system with deterministic component lead times can be transformed into an equivalent serial system, see Rosling, 1989.) From the last stage K, the customers’ demands for product i are satisfied. The other stages correspond to the predecessors of product i. We introduce the mapping matrix Mi(j) to link a component j to the stage k<K of the assembly system of product i, i.e., we set Mi(j)=k. The structure of this mapping depends on the lead times of components; the components with shorter lead times form the stages nearer to the customer and vice versa. Let the echelon holding costs in the system of product i behkie=hj, withj=Mi-1kfor stages k<K andhKie=hi-∑j∈Pihj. Moreover, the lead time demand is Dki=Di(t+Lj+Li)−Di(t), withj=Mi-1(k)for stage k<K and Difor stage K. The resulting echelon base-stock level isskie.We consider two extreme scenarios for our calculation of the component base stocks. In the first one, we determine the base stocks for each assembly system separately. Then the algorithm of Shang and Song (2003) can be applied directly. Let Fki(·) be the cdf of Dki. Applying the formulas of Shang and Song (2003), we have:(3)skie,lb=Fki-1bi+∑l=1k-1hliebi+∑l=1Khlie,(4)skie,ub=Fki-1bi+∑l=1k-1hliebi+∑l=1khlie,skie=skie,lb+skie,ub/2.As indicated above, the base stocksskieresulting from this recursion are usually too large for the common components. Therefore, we consider them as upper limits in our heuristic and refer to their calculation as the “variant without demand bundling”. Setsi=sKie, and for k<K, setsjie,+=skiewithj=Mi-1(k).In the other extreme scenario, we take the complete risk-pooling effects into account. We call this the “variant with demand bundling”. This variant only applies to (component) stages k<K; for products, we take same values without demand bundling. We regard the resulting component base stocks as lower limits for sj(j=1,…,n). DefineD∼kias the lead time demand for stage k<K of the assembly system i cumulated over all successors, where primary demand sources are all products sharing the common componentj=Mi-1(k). That is to say,D∼ki=∑l=1mrjl(Dl(t+Ll+Lj)-Dl(t))withj=Mi-1(k). Moreover, denote by σkithe standard deviation of Dki. The calculation of σkidepends on the demand distribution. In case of the Poisson distribution, we have σki=λi(Lj+Li) withj=Mi-1(k). To calculate the component base stocks with demand bundling, we also rely on (3) and (4), but with Fki(·) replaced byF∼ki(·), the cdf ofD∼ki. The results of this calculation,skie,lbandskie,ub, are used as follows:(5)s̃kie=skie,lb+skie,ub/2,(6)skie=E[Dki]+s̃kie-ED∼kirjiσki∑l=1mrjlσkl,withj=Mi-1(k).In (5), we determine for componentj=Mi-1(k)the base stock which covers the total secondary demand. From this base stock, we separate in (6) the safety stock and assign toskiea fraction proportional to rjiσki. Then we setsjie,-=skiewithj=Mi-1(k).Finally, the component base stocks for the entire system,sje(j=1,…,n), are computed as weighted sums ofsjie,+andsjie,-:(7)sje=∑i=1,rji>0mαisjie,++(1-αi)sjie,-.The optimal choice of the weighting parameter αi(0⩽αi⩽1, i=1,…, m) will be discussed at the end of this section.Next, we will illustrate the heuristic for a divergent system. Consider a system of one component and two products, where h1=h2 and b1=b2. We rely here on the so-called “balance assumption”. This assumption allows to (disassemble and) redistribute costlessly and instantaneously the on-hand inventories, backorders and work-in-progress inventories of products during the allocation (step (a), see Section 2). While not completely realistic, this assumption is an appropriate approximation and makes the divergent system analytically tractable. In particular, myopic allocation is optimal then. Moreover, given h1=h2 and b1=b2, the divergent system reduces to a (single) serial system, for which the optimal base-stock policy is known (see, e.g., Zipkin, 2000).When applying our heuristic to this divergent system, the system gets decomposed into two serial systems, consisting of product 1 and component 1, and product 2 and component 1, respectively. Consider the demand bundling case (αi=0). Here we have(8)s1e=s11e,-+s12e,-=E[D11]+(s̃11e-E[D∼11])r11σ11r11σ11+r12σ12+E[D12]+s̃12e-E[D∼12]r12σ12r11σ11+r12σ12=E[D11]+E[D12]+s̃11e-E[D∼11]=s̃11e=s̃12e.The same base-stock levels̃11e=s̃12eresults from a direct application of the heuristic of Shang and Song (2003) to the single serial system into which the original distribution system can be transferred. That means, our heuristic yields the same result as directly solving the centralized problem by the approach of Shang and Song (2003).In case of normally distributed demand, a further interesting interpretation of the lower-limit component base stocks can be obtained. (A normal distribution is a common approximation for a Poisson distribution, see, e.g., Zipkin (2000). We rely on this distribution type in this paragraph since our insights can be conveyed more clearly that way.) Then the base stock can be calculated as the sum of the expected lead time demand and a safety stock that depends on the standard deviation of the lead time demand:(9)s̃11e=s̃12e=E[D∼11]+σ̃11fext,where fextis an external safety factor andσ̃11the standard deviation ofD∼11. Combining (9) with (6) yields(10)s1ie,-=E[D1i]+s̃1ie-E[D∼1i]r1iσ1i∑l=1mr1lσ1l=E[D1i]+E[D∼1i]+σ̃1ifext-E[D∼1i]r1iσ1i∑l=1mr1lσ1l=E[D1i]+σ1ir1iσ̃1i∑l=1mr1lσ1lfext,i=1,2.The result of (10) is precisely the component base stock for the separate serial system of product i calculated analogously to (9), however with a demand variability reduced by the risk-pooling factorr1iσ̃11/∑l=1mr1lσ1l. This is another interpretation of what the heuristic does: It performs a (standard) calculation of the base stocks with a reduced demand variability for the common components.In general systems, we adhere to the same methodology. However, myopic allocation is a less accurate approximation here and may result in too low component base stocks. On the one hand—as it has been recognized for distribution systems (see, e.g., Zipkin, 2000)—myopic allocation ignores some of the risk-pooling effects of common components. On the other hand, due to the assembly elements in general structures, we need an exact match of components for each finished product. If there is no such a match, the stocks of the available components cannot be used for demand fulfillment and become “dead” stocks in the current period. This is a further reason for increasing the stocks of the common components since dead stocks of single-purpose components are less probable then. Therefore, we propose to set αi>0. For an indication which values of αiare most appropriate, we refer to our computational study of Section 4. There, the total costs are approximately convex functions of αiwith fairly broad minima around αi∈[0.3,0.65].Algorithm 2 summarizes the decomposition heuristic. The function sortPi() yieldsPis, the set of predecessors of product i sorted according to ascending lead times. For the sorting, any efficient procedure (e.g., quicksort) can be applied.Algorithm 2Decomposition heuristicNote that the inputs for the heuristic are limited to common data for supply chain modeling. Apart from the system structure and cost factors, we need estimations about the primary demands Di(i=1,…,m) and the cumulative secondary demandsD∼ji(i=1,…,m,j=1,…,n). The secondary demands can be obtained by folding the primary demands. Alternatively, when the demand data are estimated from the past, the secondary demands are directly observable (e.g., as the result of a previous MRP run). Then the computational effort is equivalent to that for determining optimal base stocks in the decomposed serial inventory systems.Two major questions for determining the theoretical and practical value of the heuristic are:•What is the optimality gap of the heuristic?How relevant is it to have near optimal base stocks? How large are the savings compared to common-sense strategies?We have conducted a computational study to obtain insights into these questions. There, we have evaluated 1664 test instances using simulation. These instances are based on different combinations of parameters regarding the system structure and the proportions of item-specific values such as lead times and backorder costs. The simulations have been run for 20,000 time periods with 20 replications. To evaluate the accuracy of the simulations, we have calculated confidence intervals for Ii(t) (i=1,…,m) and Ij(t) (j=1,…,n) based on a Student distribution and a confidence level of 99%. When evaluating the base stocks resulting from our heuristic by simulation, the average widths of these intervals have been smaller than 0.32% of their averages. This suggests that our results are representative. In the symmetric instances, the installation base stocks of upstream echelons k have been set equal to their equivalents in downstream echelons l>k.We have calculated ch, the costs from our heuristic, with αi=0.5. We have compared chwith the (near) optimal costs c∗ resulting from enumerating all base-stocks levels between wide, predetermined upper and lower limits (the determination of these limits is explained below), the minimum costs chefrom enumerating all combinations of 0⩽αi⩽1 with a step size of 0.05, as well as the costs from two simple heuristics observable in practice: Level-by level optimization (cl) and holding only finished products but no components in inventory (cf). For all these heuristics, we assume that base-stock policies and the allocation procedure described in Section 2 are applied. All resulting reorder levels have been rounded to the next integer.In level-by-level optimization, the optimal base stocks are determined sequentially for finished products and components. Then the system can be decomposed into separate single-item systems that can be optimized locally. For this purpose, we need to assume deterministic availability of components and internal backorder costsbˆjfor component shortages. Given that components are always available, the lead times for replenishing products i (i=1,…,m) are equal to Li. Let Sjbe the set of successors of component j. For calculating the internal backorder costs, we propose the following approach, which balances holding and backorder costs:bˆj=∑i∈Sjbihjhirji|Pi|.Then the locally optimal base stocks can be calculated using the newsvendor formula:(11)si=Fi-1bibi+hifori=1,…,m,sj=F∼j-1bˆjbˆj+hjforj=1,…,n.If only finished products are held in stock, the general system decomposes into single-item systems, too. Here, we again apply (11), with the following adjustment: For the lead time we take the sum of the assembly lead time for product i and the maximum supply lead time of its predecessors. That is to say, we set Fi() equal to the cdf ofDi(t+Li+maxj∈Pi{Lj})-Di(t).The identification of an optimal solution raises significant problems. We are not aware of any efficient procedure for determining optimal base stocks in the setting considered here. For discrete demand distributions such as the Poisson distribution, complete enumeration can be applied. However, the number of stock levels to be investigated increases exponentially with the number of products and components. To limit the computational effort, we restrict the scope of the enumeration as follows: First, for the test instances with a symmetric structure, we conjecture that symmetric base stocks are near optimal, and limit our search to them. Second, we start the enumeration at lower boundssienum,-,sjenum,-and proceed up to upper boundssienum,+,sjenum,+. For the products, we construct the bounds similarly as Gallego, Özer, and Zipkin (2007) do: The upper bounds are set equal to the base stocks chosen in case of holding product inventories only. (Gallego et al., 2007 conjecture that the optimal base stocks will not exceed this upper bound when holding nonzero inventory of components.) Assienum,-, we take the base stocks from level-by-level optimization. These base stocks should underestimate the optimal ones since they presume complete component availability. Regarding the components, Gallego et al. (2007) take∑i=1msjie,+as upper bounds. In general systems, however, the existence of a common component may slightly increase the optimal base stocks of single-purpose components compared to∑i=1msjie,+(see Baker, Magazine, & Nuttle, 1986). To account for these effects, we definesjimax=E(Dj)+maxl∈Pislie,+-E(Dl)and setsjenum,+=∑i=1,rji>0msjimax.For the lower bound base stocks, we setsjenum,-=0. In general, all upper bounds have been rounded up and all lower bounds rounded down.To obtain representative results, we have investigated different input parameters and performed sensitivity analyses. We consider several structures, the well-known “system-W” and “system-M” as well as 3 larger general structures—termed “system-G1”, “system-G2”, and “system-G3” here (see Fig. 2). For all structures we choose rij∈{0,1}.We focus on symmetric data since the computational effort for enumerating base-stock levels is much lower here. For the system-W, that means we have equal parameters for products 1 and 2, and for components 3 and 5, respectively. In total, we consider all of the following parameters combinations:h1e=h2e∈{0.5,3}, h3=h5∈{0.5,3}, h4∈{0.5,3}, b1=b2∈{20,120}, L1=L2∈{1,3}, L3=L5∈{1,2}, L4∈{1,2}, and λ1=λ2∈{1,2,3}. That way, 384 test instances have been obtained. Similarly to the other structures, these instances cover a broad range of different service-levels in their optimal solutions. For the products, the service-levels cover the range [67.1%,99.7%], and for the components, the (internal) service-levels cover [0%,99.2%].We proceed analogously with the other structures. For the system-M, we obtain 1024 instances by combiningh1e=h3e∈{0.5,3},h2e∈{0.5,3}, h4=h5∈{0.5,3}, b1=b3∈{20,120}, b2∈{20,120}, L1=L3∈{1,3}, L2∈{1,3}, L4=L5∈{1,2}, λ1=λ3∈{1,2}, and λ2∈{1,2}. For the system-G1, we have generated 256 instances using the following parameters:h1e=h3e∈{0.5,3}, h4=h6∈{0.5,3},h2e=2, h5∈{0.5,3}, b1=b3∈{20,120}, b2∈{20,120}, L1=L3=L4=L5=L6=1, L2∈{1,2}, λ1=λ3=1, and λ2∈{1,2}. The instances for the system-G2 are combinations of:h1e=h3e=h5e=2,h2e=h4e∈{0.5,3}, h6=h7∈{0.5,3}, b1=b5=60, b3∈{20,120}, b2=b4∈{20,120}, L1=L2=L3=L4=L5=1, L6=L7∈{1,2}, λ1=λ2=λ4=λ5=1, and λ3∈{1,2}. For the system-G3, the parameter combinations are:h1e=h3e∈{0.5,3},h2e=2, h4=h7=2, h5=h6∈{0.5,3}, b1=b3∈{20,120}, b2=60, L1=L2=L3=L4=L7=1, L5=L6∈{1,2}, and λ1=λ2=λ3=1.For asymmetric data, we limit to the system-W and the system-M. For the former, we have generated 32 instances based on combinations ofh1e∈{0.5,3},h2e=2, h3=2, h4∈{0.5,3}, h5∈{0.5,3}, b1∈{20,120}, b2=60, L1=L2=L3=L4=L5=1, and λ1=λ2=1. For the system-M, we obtained 16 instances by combiningh1e=2,h2e∈{0.5,3},h3e=1, h4∈{0.5,3}, h5=2, b1=60, b2∈{20,120}, b3∈{20,120}, L1=L2=L3=L4=L5=1, and λ1=λ2=λ3=1.

@&#CONCLUSIONS@&#
