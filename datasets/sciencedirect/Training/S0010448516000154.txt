@&#MAIN-TITLE@&#
Efficient simulation and rendering of realistic motion of one-dimensional flexible objects

@&#HIGHLIGHTS@&#
Natural and realistic motion of flexible 1D objects.Smoother and higher order continuity by use of splines.Tractrix based motion applied to control polygon instead of the polyline.Approximate length preservation by modifying control polygon.Adaptive subdivision and merging to reduce computation effort.

@&#KEYPHRASES@&#
One-dimensional flexible body,Natural motion,Control polygon,Approximate length preservation,Subdivision,Merging,

@&#ABSTRACT@&#
In gross motion of flexible one-dimensional (1D) objects such as cables, ropes, chains, ribbons and hair, the assumption of constant length is realistic and reasonable. The motion of the object also appears more natural if the motion or disturbance given at one end attenuates along the length of the object. In an earlier work, variational calculus was used to derive natural and length-preserving transformation of planar and spatial curves and implemented for flexible 1D objects discretized with a large number of straight segments. This paper proposes a novel idea to reduce computational effort and enable real-time and realistic simulation of the motion of flexible 1D objects. The key idea is to represent the flexible 1D object as a spline and move the underlying control polygon with much smaller number of segments. To preserve the length of the curve to within a prescribed tolerance as the control polygon is moved, the control polygon is adaptively modified by subdivision and merging. New theoretical results relating the length of the curve and the angle between the adjacent segments of the control polygon are derived for quadratic and cubic splines. Depending on the prescribed tolerance on length error, the theoretical results are used to obtain threshold angles for subdivision and merging. Simulation results for arbitrarily chosen planar and spatial curves whose one end is subjected to generic input motions are provided to illustrate the approach.(A.1)l(θ)=∫01dl=(L15+2L13L22+2L12L23+L25)L12+L22+2L1L2cosθ+(L13L22+L12L23)cos2θL12+L22+2L1L2cosθ2(L12+L22+2L1L2cosθ)52−L12L22(L12+L22)sin2θ2(L12+L22+2L1L2cosθ)52log−L12−L1L2cosθ+L1L12+L22+2L1L2cosθL22+L1L2cosθ+L2L12+L22+2L1L2cosθ+L1L2cosθ(3L13+L1L22+L2(L12+3L22))L12+L22+2L1L2cosθ2(L12+L22+2L1L2cosθ)52+2L13L23sin2θcosθ2(L12+L22+2L1L2cosθ)52logL22+L1L2cosθ+L2L12+L22+2L1L2cosθ−L12−L1L2cosθ+L1L12+L22+2L1L2cosθ,0<θ<π

@&#INTRODUCTION@&#
Motion simulation and rendering of one-dimensional (1D) flexible objects and development of algorithms for real time and realistic or natural motion have been active areas of research in the geometric modeling, CAD and robotics community. The original motivation was the requirement of realism in simulation and display of the motion of cables, ropes, chains, hair, snakes etc. in computer graphics and animation industry. In one of the earlier works, Barzel  [1] uses mode shapes of a constrained string model to fake the dynamics of a string. Hergenröether and Däehne  [2] discretize the flexible 1D object into a large number of small (linear) rigid objects, each endowed with mass and connected by different kinds of springs and dampers. With appropriate choice of parameter values of mass, spring and damping constant, a physics-based realistic simulation was obtained. Taskıran and Güdükbay  [3] have also employed spring–mass system for simulating hair dynamics. In an extension to these works, Güdükbay et al.  [4] propose spring mass systems for simulation of elastically deformable models. The main issue in these techniques is to choose or obtain appropriate spring and damping constants for which Natsupakpong and Çavuşoğlu  [5] have devised an algorithm for estimating these based on error minimization between FEM and lumped element models. However, the algorithm is not feasible for real-time implementation. Moll and Kavaraki  [6] present path planning for flexible 1D objects using minimal energy curves and probabilistic root maps. Ward et al.  [7] survey the field of hair modeling, approaching the majority of the existing methods. Grégoire and Schömer  [8] and, Spillmann and Tescner  [9] use Cosserat model for rod-like solids to model bending and torsion for real-time realistic simulation of flexible parts. Lenoir et al.  [10] use Lagrangian formulation posing lumped masses on the control polygon vertices and springs along the curve (resisting bending and stretching) combined with spline refinement techniques, namely sub-division/merging to simulate the motion of flexible objects. In an extension to this work, Theetten et al.  [11] generate geometrically exact expressions for deformations of flexible 1D objects by concurrently using beams and spline theory. Goldenthal et al.  [12] use a constrained Lagrangian mechanics based approach to handle inextensible cloth simulation—the length constraint (in-extensibility) is explicitly enforced on the cloth mesh thereby increasing computational effort especially when the resolution in the cloth model is increased. To overcome the stiff nature of the differential equation in cloth simulation (due to the high compliance along cloth surface normal vector as compared to almost zero compliance for the in-plane extension), Baraff and Witkin  [13] use an implicit solver to simulate cloth motion. This is however an iterative procedure and convergence is an issue. Wang et al.  [14] use strain limiting algorithms to overcome the stiffness issue. In another work, Mikchevitch et al.  [15] use free-form surfaces and flexible beams to model a real time simulator for assembly–disassembly operations. The review paper by Nealen et al.  [16] discuss the existing physically deformable models in computer graphics in detail and gives a very good overview. In all the above mentioned works, dynamics is incorporated and a large amount of effort is towards speeding up the computation or improving the accuracy by adjusting the algorithms. However, all of these methods suffer from one or more issues like stability, convergence, computational errors due to mathematical stiffness of the system, dependence on many arbitrary parameters, phantom forces from high residuals, excessive damping/numerical losses or lack of feasibility for real-time implementation.In contrast to the above mentioned approaches, many authors have focused on viewing this problem from a pure kinematics perspective so that the issues of stability, convergence and choice of parameters do not arise. Brown et al.  [17] have presented tying of knots in a rope with a geometric approach where the flexible 1D object is discretized into linear segments connected by joints and the motion of a trailing segment uses a follow the leader based strategy. Su et al.  [18] use inverse kinematics and energy minimization to approximately preserve length of deformed polyline and a 4-point subdivision scheme is used to obtain smoothC1curve from the deformed polyline. In another work, Sreenivasan et al.  [19] use the closed-form equations of the classical tractrix curve to iteratively compute the motion of all trailing linear segments. They show that the tractrix based approach has the property of attenuating the motion of the segments from the input end, and this results in a more natural motion of the flexible 1D object. In a subsequent work, Menon et al.  [20] have shown that the tractrix based solution can be derived from a constrained optimization problem involving minimizing the velocity of points on a curve subject to preservation of the length of the curve. In all of these works, only the kinematics of the 1D object is used to impart realism in the simulation and rendering and since the flexible 1D object is discretized into linear rigid segments, the length is explicitly and always preserved.In the robotics community, motion planning and simulation of snake and other robots with large number of rigid links connected by actuated joints have been a continuing research area (see, for example,  [21–24] and the references therein). In a robot, if the number of actuated joints is more than six for motion in 3D space and more than three for motion in a plane, then there exist many joint angle sets (configurations) which will achieve the same position and orientation of the end-effector of the robot. The main approach in such redundant robots is to effectively use the extra actuated joints for selecting poses/paths which optimize a useful functional—this is called the resolution of redundancy. One of the earliest techniques used for resolution of redundancy involved the use of the manipulator Jacobian matrix to minimize joint rotation, velocity, torque or to avoid obstacles and singularities in the path of the robot  [21]. This approach involves obtaining the pseudo-inverse of the manipulator Jacobian matrix and can have a complexity ofO(n3)wherenis the number of joint variables. Pseudo-inverse based methods are thus not suitable for motion planning when the numbers of links and joints are large. A second approach developed by Chirikjian and Burdick  [22] involves the use of a backbone curve to approximate the redundant robot and the motion planning is done on the backbone curve. The complexity of their algorithm isO(n)but in this approach the length of the curve may not be preserved. In another approach by Reznik and Lumelsky  [23], the motion planning is done in the task space (instead of in the joint space) using the classical tractrix curve. As mentioned earlier, the use of the tractrix curve results in a more natural motion of the robot. The tractrix based algorithm has a complexity ofO(n)wherenis the number of rigid links.In recent past, there has been an increased interest in real-time simulation and rendering of the motion of 1D and 2D flexible objects. This is driven by the need to build simulators for laparoscopy, endoscopy and in the general area of training of medical practitioners where motion of blood vessels, tendons etc., motion inside the gastro-intestinal tract or intestine and actions such as tying of knots and suturing needs to be simulated with a high degree of realism  [25,26]. This work has been motivated by the need for developing more realistic simulators for endoscopy and laparoscopic surgeries and is restricted to real-time, efficient and realistic simulation and rendering of the motion of flexible 1D objects.In this work, the flexible 1D object to be simulated is modeled as a B-spline curve as opposed to being discretized into large number of straight segments. All manipulations are done on the segments of the control polygon which generates the B-spline curve. The main contributions are (a) obtaining new analytic expressions of change in length of a B-spline curve from an initial configuration as the angle between two adjacent segments of its control polygon is changed, (b) use of a tractrix based algorithm on the control polygon of a B-spline curve representing the flexible 1D object, and (c) the development of an adaptive algorithm to approximately preserve the length of the flexible 1D object. The tractrix based algorithm results in a more natural and realistic motion of the curve modeling the flexible 1D object. As the control polygon is moved, the resulting length of the curve is not preserved and the adaptive algorithm is used to sub-divide and merge sides of the control polygon so that a prescribed error tolerance on the length of the curve is maintained at all times during the motion of the curve. Since the angle between the adjacent segments is related to the length of the B-spline curve, monitoring the angle is enough to decide on the subdivision and merging.Note that the tractrix based algorithm has a complexity ofO(n)wherenis the number of segments used to represent the flexible 1D object. However, since the number of sides of the underlying control polygon is much less thann, the complexity of the algorithm can be termed asO(1). The algorithms for natural and realistic motion planning, the adaptive altering of the control polygon and the mathematical results are illustrated using numerical examples where an arbitrary curve is moved along a generic direction with a prescribed length error tolerance. The efficiency of the developed algorithms are also demonstrated with the numerical examples.The paper is organized as follows: in Section  2 we briefly present the tractrix based motion of a flexible 1D object. New analytic expressions and results for the length of a quadratic B-spline and cubic B-spline curve in terms of the angle between two adjacent segments of the control polygon are presented. The notion of moving the generating control polygon and resulting change in the length of the spline due to motion of the control polygon is also presented. In Section  3, we present an algorithm to adaptively subdivide and merge edges of a control polygon to maintain the length of a curve to within a specified length error. In Section  4, we present numerical results illustrating our approach for efficient and realistic motion simulation and visualization of motion of flexible 1D objects. In Section  5 we present the conclusions of this work.In this section, we present the main theoretical results used to obtain the algorithms for efficient and realistic simulation and rendering of the motion of flexible 1D objects. We start with a brief discussion on the tractrix based algorithm and then present new results dealing with length of quadratic and cubic B-splines.The tractrix based approach for natural and realistic motion of a curve or a flexible 1D object is dealt in details in Refs.  [19,20]. We present the key results used in this work.•Consider a curve of lengthLwhose one end is given an input motion as shown in Fig. 1(a) subject to the constraint that the length of the curve is preserved. As shown, using calculus of variation, the infinitesimal motion at any point on the curve is minimized when the velocity of the point is along the tangent to the curve  [20].For the special case of a line segment of lengthL, initially lying along theYaxis and an input motion given to the leading end on theXaxis along theXaxis, the path (curve) traced by the trailing end of the linear segment is given in a parametric form as(1)x(q)=q−Ltanh(qL)andy(q)=Lsech(qL),whereqdenotes the parameter which in our case is the timet.The above Eq. (1) is the well-known equation of a classical curve known as the tractrix   [23]. It can be shown that for a infinitesimal motion,dq, of the leading end, the infinitesimal displacement of the trailing enddr=dx2+dy2is the minimum of all possible infinitesimal displacements of the trailing end, if it follows a tractrix curve. It can also be shown thatdr≤dq. Additionally, asq→∞(ort→∞),tanh(q/L)→1andsech(q/L)→0which gives(2)x(∞)→q−L,y(∞)→0,implying that as time increases, the linear segment aligns with theX-axis and in this casedr=dq.The tractrix based approach can be applied to arbitrary 3D motion of a flexible 1D object discretized bynlinear segments as shown in Fig. 1(b) (see Ref.  [19] for details). This is due to the observation that the destination point(x,y,z)pT, the leading end or point 1 and the trailing end of the first segment or point 2 define a plane. For the arbitrary 3D displacement of the leading end (point 1) to(x,y,z)pT, the new location of the trailing end (point 2) in the plane can be obtained from Eq. (1). The location of the trailing end in 3D space, denoted by(x,y,z)2T, can then be obtained by using an appropriate rotation matrix. The second segment23⃗and the vector along the displacement of point 2 to(x,y,z)2T, in general, will lie on a different plane. However, again the new location of the trailing end (point 3) given by(x,y,z)3Tcan be computed using the tractrix equations and a different appropriate rotation matrix. Proceeding in a similar manner, the displacement of the leading end of the(i−1)th segment is the displacement of the trailing end of theith segment and one can thus iteratively go down to thenth linear segment and obtain the new configuration of the discretized flexible 1D flexible object.The algorithm described above has a complexity ofO(n)wherenis the number of line segments used to discretize the flexible 1D object. Since the line segments are considered as rigid, the sum of the length of the segments is automatically preserved during motion. Ifnis chosen appropriately to ensure that the curve length is approximately equal to the sum of the length of the line segments, the length of the curve is approximately preserved during the motion.When the input end is displaced, the displacements of all the trailing segments obey the inequalitydr0≥dr1≥⋯≥drn−1≥drn, with the equalitydri=dri−1reached only when all the segments align with the input displacement direction. A consequence of this observation is that the motion of the segments progressively gets smaller and appears to ‘die’ out away from the input end. If the input motion vector is constant in one direction, from Eq. (2) it can be concluded that all the segments eventually align with the direction of the input motion.As mentioned earlier, one of the key ideas of this paper is to move the segments of the control polygon instead of the elements of the discretized curve (polyline) to reduce computation and enable real-time simulation and visualization. However, it is well-known that as the control polygon changes, the spline curve and its length changes  [27]. This is illustrated in Fig. 2: the left most spline curve of lengthLC1is generated by the control polygonCP1and as the sides of the control polygon is moved toCP2keepingLCP1=LCP2, one can clearly see that the length of the spline curve changes. It can be observed from Fig. 2 that as the angle between the adjacent segments decrease the length of the spline decreases and the upper bound of curve length is the length of the control polygon. We provide mathematical proofs of these two observations next, first for a quadratic B-spline and then for a cubic B-spline. Finally, arguments for any higher degree 3D splines are provided.For a quadratic spline shown in Fig. 3, the three consecutive pointsP1,P2andP3always lie on a plane. It may be noted that the analysis is not restricted to planar quadratic splines as the next three points can lie on a different plane and the entire curve can be spatial. Without loss of generality, the coordinates of the three points can be assumed to be[L1,0]T,[0,0]Tand[L2cosθ,L2sinθ]T, respectively, whereL1,L2are the lengths of the two sides of the control polygon andθis the angle between the adjacent sides of the control polygon. The set of control points(P1,P2,P3)generate the part of the spline shown in Fig. 3 for the parameter intervalu∈(ui,ui+1). The length of the spline curve foru∈(ui,ui+1), is given by(3)l(θ)=∫uiui+1((∑i=13dNi,p(u)duXi)2+(∑i=13dNi,p(u)duYi)2)12du,wherel(θ)means that the spline curve length depends on the included angleθ.In an open-uniform knot vector of the form[u1u1u1u2u3…um−1umumum]withu1≤u2≤u3≤⋯≤um, without loss of generality, an intermediate knot interval(ui,ui+1)(i≠1,2,m−2,m−1) can be reduced to(0,1)by appropriate scaling and translation of parameteru. The basis functionsNi,pfor a quadratic spline withp=2and for the knot interval(0,1)are given by(4)N1,2=12(1−u)2,N2,2=−u2+u+12andN3,2=12u2.Using the above,l(θ)can be simplified to(5)l(θ)=∫01(−L1(1−u)+L2ucosθ)2+(L2usinθ)2duand forL1=L2=L,l(θ)is given by(6)l(θ)=132L2(1+cosθ)(8L4(1+cosθ)+L2(−1+cosθ)log2−1+cosθ2+1+cosθ),0<θ<π.From above,limθ→πl(θ)=Land this agrees with known result for a quadratic curve (see pp. 82 in  [27]). From Eq. (6),(L−l(θ))is maximum whenθ→0and the maximum difference is 50% (see Fig. 5). The expression forl(θ)whenL1≠L2is more complicated and is given in Appendix A.In general, for a quadratic spline withnsegments in the control polygon, the total curve length can be computed as(7)LC=(12(Ls+Le)+∑i=1n−1li(θi)),whereLs,Ledenotes length of starting and ending segment of the control polygon, respectively,Lidenotes the length of theith control polygon segment andli(θi)denotes the length of the portion of the curve defined by theith,(i+1)th and(i+2)th control points.In the case of the quadratic spline, the three points generating the spline define a plane and locally the spline is planar in a knot interval. This is not valid for a cubic spline since the four generating points and the resulting cubic spline need not be planar. In Appendix B, we show that the worst case, in terms of difference between the curve length and the length of the control polygon, is obtained when all the four points lie on a plane. Hence, we consider the case of a planar cubic spline and obtain expressions for bounds on this difference.Fig. 4shows four interior control pointsPi,i=1,…,4on a plane and the two included angleθ1,θ2between the first and second, second and third segments, respectively. The initial configuration of the knot vector is assumed to be a clamped open-uniform knot vector of the form[u1u1u1u1u2u3…um−1umumumum],u1≤u2≤⋯≤um. Note that for a uniform non-repeated knot vector, the difference between the curve length and control polygon length is maximum as any repetition of knot vector or subdivision pulls the curve towards the control polygon thereby reducing the length difference.From the figure, the points of the spline areP1=[L1,0]T,P2=[0,0]T,P3=[L2cosθ1,L2sinθ1]TandP4=[L2cosθ1−L3cos(θ1+θ2),L2sinθ1−L3sin(θ1+θ2)]T. The elemental length of the cubic splineC0(u)is given by(8)dl=((∑i=1ndNi,p(u)duXi)2+(∑i=1ndNi,p(u)duYi)2)12du,where(Xi,Yi)are the coordinates ofPi,i=1,…,4.Substituting theXandYcoordinates of the points on the control polygon and usingNi′to denotedNi,3(u)du, we get(9)dl=A+Bdu,A=(∂X∂u)2=(N1′L1+N3′L2cosθ1+N4′(L2cosθ1−L3cos(θ1+θ2)))2andB=(∂Y∂u)2=(N3′L2sinθ1+N4′(L2sinθ1−L3sin(θ1+θ2)))2.For a cubic spline, the basis functions inu∈[01]areN1,3=16(1−u)3,N2,3=23+12u3−u2,(10)N3,3=16+12u−12u3+12u2andN4,3=16(1−u)3.Substituting the above in Eq. (9), we getdl=Pu4+Qu3+Ru2+Su+Tdu,P=14L12+14L32+L22+L1L2cosθ1+12L1L3cos(θ1+θ2)+L2L3cosθ2,Q=−L2L3cosθ2−3L1L2cosθ1−L1L3cos(θ1+θ2)−L12−2L22,R=32L12+52L1L2cosθ1+12L1L3cos(θ1+θ2)−12L2L3cosθ2,(11)S=L22−L12,T=14L12+14L22−12L1L2cosθ1,and the length of the spline generated in the knot interval[01]can be obtained as the integral of the right-hand side in Eq. (11). Unlike in the quadratic case, for a cubic spline, the analytical form of the integral as a function ofθ1andθ2is not known and it is not possible to find analytical expressions for the difference between the total length of the control polygon and B-spline curve length. The length difference is a surface (being a function ofθ1andθ2) and can always be found using numerical integration. We can, however, obtain useful approximations to the integral by considering the following:•We consider the effect of change of one angle at a time, i.e.,θ1is varied withθ2held constant. This is reasonable since during the motion of the control polygon, the angles between the adjacent segments are monitored. When the difference in length between spline and control polygon due to a single angle change becomes large, subdivision is used to reduce the difference (see Section  3) and hence effect of change in one included angle can be considered.We consider the case of a control polygon with equal lengths, i.e.,L1=L2=L3=L.

@&#CONCLUSIONS@&#
