@&#MAIN-TITLE@&#
A PNN self-learning tool breakage detection system in end milling operations

@&#HIGHLIGHTS@&#
The system provides a function of on-line real-time cutting tool monitoring.The system applies PNN to shorten the training time to achieve the objective of real-time learning in manufacturing.The property of PNN prevents the detection system from Type II error to ensure the quality of product.The self-learning ability enables the system to achieve higher accuracy of the system.

@&#KEYPHRASES@&#
Probabilistic neural network,Self-learning,Tool breakage,End milling operations,

@&#ABSTRACT@&#
With the advance of technology over the years, computer numerical control (CNC) has been utilized in end milling operations in many industries such as the automotive and aerospace industry. As a result, the need for end milling operations has increased, and the enhancement of CNC end milling technology has also become an issue for automation industry. There have been a considerable number of researches on the capability of CNC machines to detect the tool condition. A traditional tool detection system lacks the ability of self-learning. Once the decision-making system has been built, it cannot be modified. If error detection occurs during the detection process, the system cannot be adjusted.To overcome these shortcomings, a probabilistic neural network (PNN) approach for decision-making analysis of a tool breakage detection system is proposed in this study. The fast learning characteristic of a PNN is utilized to develop a real-time high accurate self-learning tool breakage detection system. Once an error occurs during the machining process, the new error data set is sent back to the PNN decision-making model to re-train the network structure, and a new self-learning tool breakage detection system is reconstructed. Through a self-learning process, the result shows the system can 100% monitor the tool condition. The detection capability of this adjustable tool detection system is enhanced as sampling data increases and eventually the goal of a smart CNC machine is achieved.

@&#INTRODUCTION@&#
To the modern automation industry, computer numerical control (CNC) machine provides more convenient operations than traditional NC because of its capability of not only performing traditional numerical control but also using CPU to control various machining operations. CNC machining provides high precision and accuracy to satisfy the needs of customers in quality. However, the machining processes of CNC are dynamic and can be changed at any moment. One of the significant factors is the cutting tool condition. The broken or worn cutting tool would influence the quality of products and may damage the machine [29]. To ensure the quality of products and the condition of cutting tool, a real-time tool monitoring system for CNC machining is developed.The development of an effective tool monitoring system is of great value to the automation industry [13]. Over the years, various types of real-time tool monitoring system have been developed in different machining processes. Liao et al. applied acoustic emission signals with different methodologies, such as hidden Markov model-based clustering methods [22], a wavelet-based method [24], boosted minimum distance classifiers [23], and ant colony optimization for feature selection [21], to monitor the tool conditions for grinding operations. Ghani et al. used strain gauge to monitor the force signals, and implemented a statistical analysis to detect the tool conditions in a turning operation [11]. Rizal et al. applied neuro-fuzzy technology to monitor the tool wear in turning process [30]. Ahilan et al. integrated hybrid decision making tools to monitor the cutting quality in the turning process [1]. Patra et al. applied current signals with artificial neural networks to predict tool flank wear in a drilling operation [28]. Panda et al. used force, vibration and torque signals to predict flank wear in drilling operations [26]. Wang et al. used force signals to detect the tool wear in milling process [33,34]. Bassiuny and Li implemented the Hilbert–Huang transform function to analyze the motor current and judge the tool condition [4]. These references indicate the importance of a real-time monitoring system in traditional machining operations. Because a machining operation is very costly, it should be done as a last resort. Under the circumstance, the quality of machining should be ensured as quickly as possible. That is why the real-time tool monitoring system has to be studied and implemented in industries. Among the machining processes, the milling operations have been frequently applied in automobile industry. The studies of a real-time tool monitoring system for milling operations have been widely discussed. In 2000, Chen and Jen used a fusion approach to combine raw data obtained from the dynamometer and accelerometer and train them in the neural network to monitor the tool condition in CNC end milling operations [8]. Also in 2004, Haber et al. used time domain and frequency domain analysis to compare the size variation and signal sensitivity, and to analyze tool wear in high speed operations [14]. Cho et al. used multi-sensors to measure end milling signals, and also support vector regression (SVR) to detect tool breakage in end milling operations. It was discovered that SVR produces higher accuracy compared to multivariate regression analysis [9].In milling operations, the tool breakage has huge impact on end milling operations, many tool breakage studies focus on its application in milling operations [3,6,9,15,20,25]. An end milling operation is a machining process in which a work part on the milling machine is fed into a rotating milling cutter with a series of blades on the edge to remove metal materials. Milling machines are the most widely used machines which produce extremely smooth and accurate finish. By using various independent cutting tools and controlling the platform's different moving directions (e.g. rotation), end milling can form all kinds of angles, slots and gears in the work part [10]. Machining is a process in which a cutting tool is used to cause plastic deformation in a work part, making the work part peel to form a chip. Therefore, during the machining process, the cutting tool is subjected to a resistance, called cutting force, from the work part. The direction and magnitude of the cutting force varies depending on the type of machining process, tool angle, cutting conditions and work part material [18].A real-time tool condition monitoring system consists of two components: the sensing technology and a decision-making model. In milling operations, the cutting force detected by a force sensor is a significant factor to determine the tool condition. Chen and Huang indicated the maximum peak force and the peak force between adjacent teeth could be analyzed to distinguish a good tool from a broken one [7]. Cakir and Isik mentioned the tool condition is difficult to build into a mathematic model, and the change of cutting force is a good indicator to monitor the tool condition [5]. Kious et al. applied cutting force signals to monitor tool wear in high speed milling operations [19]. Girardin et al. integrated cutting force and spindle rotational frequency to monitor tool wear and breakage [12]. In summary, the force signals are very effective in the detection of tool conditions in milling operations.The second component of a real-time condition monitoring system is the decision-making model. An artificial neural network (ANN) has been widely applied as a decision making model for cutting tool detection [3,8,16,26]. The ANN is a computational simulation model inspired by a biological neural system. It enables a computer to perform machine learning and decision-making, the capability that is known as artificial intelligence. From the literature, most of the studies implemented the back-propagation neural network (BPNN) as a decision-making model for the monitoring system. However, the BPNN needs a large amount of data and time to train the network. Furthermore, once the model has been constructed, and the weight between each neuron has been achieved, the model cannot be modified. Therefore, if some new situations of machining happened during the real-time monitoring, the system could not be updated, and the error would happen again. To solve this issue, a probabilistic neural network (PNN) was proposed to develop a quick model training and self-learning tool condition monitoring system.The purpose of this study is to develop a real-time self-learning CNC tool breakage detection system using the combination of sensor technology and a decision-making model. First, a supervised learning network processes the input factors, which are the machining parameters and the signals obtained from the force sensor, to detect the tool condition. Once error detection occurs, the data set, which includes both input and output factors, is sent back to the decision-making model to be re-trained. A higher accuracy real-time self-learning tool detection system is eventually derived from the detection pattern described above. The feature of the system is that it is able to send data set back to the network to be re-trained when an error occurs. This significantly lowers the overall error rate to achieve a more accurate in-process tool breakage detection system.This study is going to construct a real-time self-learning tool breakage detection system which allows the machine to detect tool breakage while operating, and to stop the operation in time to adjust the cutting conditions as needed to improve product quality and to eliminate unnecessary waste. However, many factors can affect the detection accuracy of the system. These factors, which include the type of CNC end milling process, cutting force and data processing method, are discussed in the following sections.The main objective of this study is to construct a self-learning tool detection system, an extension of the real-time tool monitoring system. The system sends the error data set of the tool detection back to the training network to be re-trained in order to increase its detection accuracy. This training network applies the probabilistic neural network (PNN) as its primary training method for a decision-making model. The most important feature of the system is that it can be implemented during operations, which reduces waste in production and labor caused by machine shutdown to check the tool manually, and achieves upmost efficiency in CNC end milling operations. The system block diagram of a PNN self-learning tool breakage detection system is shown in Fig. 1.Based on the self-learning tool breakage detection system shown in Fig. 1, and the literature discussed in Section 1, to develop an accurate tool detection system in an end milling operation, force signals collected from sensor are recommended. In an end milling operation, the cutting force in XY plane is an interrupted force, which increases when the cutter merges into the material, and decreases as the cutter passes through the center of the material. The force signal looks like a peak for each cutting tooth. Since the cutting force in XY plane works simultaneously, the force in each axis can be integrated into resultant force, and expressed as:(1)FR,i=FX,i2+FY,i2,i=1ton,where FRis the resultant force in XY plane; FXand FYare the force signals in X and Y axis, respectively, i is the sequent number of collected data from 1 to n, and n is the number of data in one revolution.Fig. 2shows the resultant force of a good and a broken cutter with four teeth in XY plane in an end milling operation. The peak force is the key factor to detect the tool condition. A broken tooth cuts less material and then causes the following tooth to cut more material than usual. Therefore, from Fig. 2, the maximum peak force and maximum variance peak force between adjacent teeth can be applied to distinguish the tool condition. The maximum peak force can be expressed as:(2)Fp,max=max{Fp,j},j=1tom,(3)Fp,j=maxi=((j−1)n/m)(jn/m){FR,i},where Fp,jrepresents the resultant peak force of tooth j, m is the number of teeth of a cutter, and jn/m should round to an integer. Furthermore, the maximum variance peak force between adjacent teeth can be stated as:(4)ΔFmax=max{ΔFp,j},(5)ΔFp,j=|Fp,j+1−Fp,j|.The system constructed in this study utilizes probabilistic neural network for data training and decision-making model to achieve the purpose of self-learning ability. Next, more details of the probabilistic neural work are discussed.Proper learning process and algorithm are the basic elements of an artificial neural network. This research selects appropriate machining parameters, including feed rate, spindle speed, depth of cut and cutting force, and utilizes PNN to change or adjust each network's learning parameters to minimize the difference between network output value and the target value set in this research. The strengths and weaknesses between each algorithm are then compared.A PNN is a method used for problem classification, which was first introduced by Specht in 1990 [31]. As one of the forward neural network structures, the learning speed of PNN is so fast that its learning time is literally zero. Its network connection weight is singly set, and the required data are loaded directly from training examples to be re-trained. This network model is highly regarded for its classification capability to recall [32]. In addition, the output of PNN is highly orientated. Its outputs are categorized as a type of analysis data, and can be clearly oriented toward the density function with higher probability. Therefore, PNN works very well with classification problem [2,17].The structure of a PNN, constructed based on Bayes Decision theory, consists of four layers of neurons. These four layers are input layer, pattern layer, summation layer and output layer. Bayes Decision theory is based on the classification concept in principles of statistics, mainly to find the minimal expected risk. Assume that the number of class of a problem is k, which are C1, C2,…,Ck. The classification rule is decided by the number of characteristic vector n. The classification formula of Bayes Decision can be expressed as:(6)hicifi(X)>hjcjfj(X)∀j≠i,where hkis the Prior Probability of the number of class k; ckis the loss function of class k, but is incorrectly classified; fkis the probability density function (or characteristic vector function) of class k.However, when Bayes Decision is used in problem classification, it is unable to define the probability density function of data in advance. To solve this issue, a Parzen Window was proposed by Parzen in 1962 [27]. Parzen used one characteristic to estimate one class, and created Gaussian distribution with characteristic value as the center of the distribution for the training data. All the curves were then stacked into a probability density function belonging to that class. If used in a random dimension problem, the probability density function can be expressed as:(7)fk(x)=1(2π)d/2σd1Nk∑l=1Nkexp−(x−xkl)t(x−xkl)2σ2,where fk(x) is the probability density function of the testing vector in the number of class k; d is the dimension of the training vector; σ is the smoothing parameter; Nkis total number of training vectors in class k; x is the testing vector, and xklis the number of training data in sequence l of class k.Although the development of PNN is based on Bayes Decision, it makes the following three assumptions about the probability density function:•The probability density function of each class is the same.The common probability density function is presented in Gaussian distribution.The variance matrix of the probability density function in the format of Gaussian distribution of each class is a diagonal matrix in which each of the diagonals has the same element value σ2.With these three restrictions, PNN does not have a design flaw as does Bayes Classifier. PNN's structure allows free expansion of both input and output dimensions with the classified problems. When facing a more complicated problem, the neuron bonding between each layer in a regular neural network also increases exponentially as the number of neurons grows. If a neural network contains a feedback mechanism, the computational complexity also increases significantly. The network bonding in PNN increases linearly with the number of the neurons. This characteristic and its distributed structure vastly reduce the computational complexity. The learning process of PNN is unique and different from other supervised learning networks in the following ways:•PNN has no initial network weight. In other supervised learning networks, the initial network weight is randomly set. PNN is the only network without the initial network weight.PNN learning process is irrelevant to the recalling process. In other supervised learning networks, the training examples are sent to the input layer to obtain estimate output through the recalling process.PNN is less complicated compared to the other networks as the network connection is not modified using the difference between network training output and target input vector.The development of a self-learning decision-making model requires useful input factors that can respond the change of conditions and a quick training algorithm that can immediately learn from the new condition and adjust the model in no time. The PNN self-learning tool breakage detection system applied the property of quick training in PNN and the proper force signals to respond the new cutting condition of machining to achieve the self-learning ability. With the self-learning ability, the real-time monitoring system can always adjust itself to fit different kinds of new conditions. This would allow the industry to adopt the real-time monitoring system without hesitation. In the next section, the construction of a self-learning tool breakage detection system is discussed.Continued from the previous section, a demonstration of how the self-learning and real-time training feature of a PNN can be taken advantage of to derive an adjustable tool breakage detection system would be discussed in this study. The objective of the system is to increase the detection accuracy and to also reduce loss caused by the risk of Type I error, which would detect a good tool as a broken tool.In this section, the equipment needed for the experiment is illustrated. The data collecting system for force signals, illustrated in Fig. 3, consists of many devices through a complex microprocessor. The input force signals, which are analog data responded by the dynamometer, are transmitted to an electric charge amplifier through a multiplexer. These force signals are then converted to digital format by an analog/digital converter (ADC), and transmitted through the data bus to the computer for storage. The original force signals cannot be applied for tool detection. Therefore, as shown in the block diagram in Fig. 3, the microprocessor controls the procedures of data conversion and data analysis to achieve the useful force signals. Upon completion of data conversion, the digital data are sent to the computer for storage through a connecting device. Finally, the experiment uses Matlab software with PNN toolbox to train the data and achieve the decision-making algorithm for a tool breakage detection system.In order to build a PNN self-learning tool breakage detection system, an experimental setup for data collection and system testing is constructed. A vertical CNC machine center is used to perform the experiment. Four 3/4″ four-flutes HSS milling cutters are used to cut steel 1018 mounted on a dynamometer sensor. One of the cutters is a good tool, and the others are broken ones in different broken degree. The machining parameters, such as spindle speed, depth of cut and feed rate are set at different levels to manipulate possible real machining environment in industry. A dynamometer is set above the milling platform to measure the cutting force in each experiment during the machining process, and is connected to an n-channel electric charge amplifier which takes the outputted electric charge signals from the dynamometer and converts them to voltage signals. The voltage signals are then converted to digital signals by an ADC and transmitted to a microprocessor for analyzing. Therefore, the useful cutting force signals and machining parameters of each machining process can be stored in the computer for further training. The hardware setup is shown in Fig. 4.The software setup consists of an A/D converting program converting the analog force signals to digital data, a NC part program performing the machining process, a data analysis program calculating the maximum peak force and the maximum variance peak force between adjacent teeth, and the Matlab software performing the PNN training for the system. Eventually, a program of PNN self-learning tool breakage detection which integrates a converting program, data analysis program and PNN decision-making algorithm is constructed for the system.In this section, the probabilistic neural network detection (PNND) model derived from Bayes Classifier, a probabilistic classifier used in statistics, is developed for cutting tool monitoring. The PNND model is primarily used for data classification. It utilizes the vector characteristics of input data, and the regularity and relevance of output data for network training, and then determines the class with a competing transfer function. The selection of input and output factors is completely the same as that of a BPNN. Based on Chen and Huang's study [7], five input factors are selected for the system, and they are spindle speed, feed rate, depth of cut, maximum peak force and maximum variance pack force between adjunct teeth, while the output parameter is the tool condition, good or broken. The input vector for the PNND model can be expressed as:(8)S1f1D1Fp,max,1ΔFmax,1⋮⋮⋮⋮⋮StftDtFp,max,tΔFmax,t,where S, f, and D represent the spindle speed, feed rate and depth of cut, respectively, and t is the number of training or testing data sets.The outputs of the PNND model are discrete data. The number “1” represents a tool in good condition; the number “0” represents a broken tool. Therefore, there is no need to normalize the data. However, when constructing a PNN in Matlab, its output data must be in the form of a sparse matrix. Assume that 10 input data are required to be trained in the network. Therefore, 10 output data are produced in the form of a row vector matrix, as expressed below:(9)1110000111.Then, the data must be converted in the form of a sparse matrix, as shown below, to be read by the PNN in Matlab.(10)11100001110001111000.The data set for constructing the PNND model is collected after the experimental setup is completed. The machining parameters are set at different levels. The spindle speed is set from 450 to 650 RPM, feed rate is from 10 to 20in/min and depth of cut is set from 0.06 to 0.1in. 350 data sets are collected by four different cutters mentioned in Section 3.1.1. 200 of them were collected from the good tool and the others were collected from three broken tools. Due to the limitation of space, part of the data sets has been displayed in Table 1. These data sets were randomly divided into two groups with 250 data sets (150 from the good tool and 100 from the broken tool) in a training group and 100 data sets (50 from the good tool and 50 from the broken tool) in a testing group. The 250 training data sets were used to adjust the network parameters and to train the PNN network and the 100 testing data sets were then input to the trained network one by one to evaluate the accuracy of the system.Not many network parameters in a PNN require to be set up. The only parameter that needs to be set in the PNN network training is the smoothing parameter σ, which controls the accuracy of the recalling result during network training. Therefore, it is very important to set a good smoothing parameter for a system. If σ is near zero, the network determines a sample's classification completely based on the most similar sample already classified. If σ is much larger, the network almost blindly performs classification, which means each classification has equal probability. As mentioned in the previous section, the smoothing parameter needs to be properly set in order to optimize the accuracy of network recalling.The initial value of the smoothing parameter selected in this study is the lowest value 0.1, as shown in Table 2. Based on the accuracy, the value of the smoothing parameter is slowly adjusted until the maximum accuracy of testing data sets is found. The initial results with σ=0.1 of the training and the test group are illustrated in Figs. 5 and 6, respectively. The red dash line represents the target outputs and the blue solid line represents the outputs from the PNND model. As it can be observed in Fig. 5, the target outputs and outputs from the PNND model are completely the same as the pattern layer in the PNN records all the patterns of the output vector. Since each pattern neuron matches with only one output neuron, an identical output is always selected when a training vector is set. Therefore, the accuracy of the training group from the PNND model is 100%. In Fig. 6, the value of the smoothing parameter is too low so the network determines the class based on samples already classified. As a result, all broken tools are incorrectly detected as tools in good condition from the PNND model. The accuracy is only 50%.During the training process of the PNND model, the smoothing parameter σ is slowly increased to find the best accuracy in network training. Finally, the accuracy in network training reaches 100% for the training group, while the accuracy of the testing group reaches 95% when σ=40. Table 3shows the results of detection analysis in the PNND model. The classification results are illustrated in Figs. 7 and 8. In Fig. 7, it is observed that the training accuracy of the PNND model is 100%. In the test group shown in Fig. 8, there are no errors in detecting a broken tool, while five errors occur in detecting a good tool as a broken tool.The results of network training of the PNND model in the previous section show that a PNN tool breakage detection system achieves an accuracy of 95%. All of the five errors occur when a tool in good condition is detected as a broken tool. To increase the accuracy of the system, a self-learning mechanism is activated. The data of the five errors are inserted into the training group in which the number of training data set is increased to 255. 255 data sets are re-trained with σ=40 in the PNND model, the network structure is responded in the testing group with 95 testing data sets to compute the accuracy of the system.The result of testing group in the PNND model with the first self-learning is shown in Fig. 9. The red dash line represents the target outputs; the blue solid line and circles represent the final outputs of network testing from the PNND model. Table 4shows the results of detection analysis in the PNND model after first self-learning. It is clearly seen that the detection accuracy maintains at 100% in detecting a broken tool. On the other hand, the number of errors in detecting a tool in good condition is reduced from 5 to 2. The overall accuracy of the testing group is significantly increased from 95% to 98%.The first self-learning of the PNN tool breakage detection system shows significant enhancement of accuracy in testing data; however, there are still two errors. To find out if the system's overall accuracy can be enhanced through repeated self-learning, the data of the two remaining errors are inserted again into the training group in which the number of data is now increased from 255 to 257. After the 257 data sets are re-trained in the PNN, the network structure is then used for the testing group to compute the accuracy of the system.The result of the testing group in the PNND model with the second self-learning is shown in Fig. 10. The red dash line represents the target outputs; the blue solid line represents the final outputs of network testing. It is clearly seen in Table 5that the accuracy in detecting a broken tool for the second time is still 100%. The number of errors in detecting a tool in good condition is reduced from 2 to 0. This time the overall accuracy reaches 100%.The above PNN self-learning tool breakage detection system was conducted without the influence of the risk of Type II error, which misjudges a broken tool as a good tool in the testing group. The reason is that the broken tools have different degrees of broken edge, which result in the distribution of center of each data set is wider than the one of the good tool. After adjusting the smoothing parameter for classifications, the probability density function of broken tools is relatively wider because of the large variance. In the PNND model, under the “winner takes all” policy, if some abnormal signals occur during the machining process and result in an increase in the variance of force signals, the good tool may be misjudged as a broken one. However, the broken tool will not take any chance to be misjudged as a good tool since its force signals always have larger variance. Under the circumstance, when a Type I error occurs during the machining process and is found by the operator, the data is sent back to the system to re-train the network to improve the detection rate of the system in the future. With the property of quick training process of PNN, the PNND model is suitable for inserting data as a self-learning to re-train the network and to improve the detection accuracy of the PNN self-learning tool breakage detection system.The experimental result shows that the PNN self-learning tool breakage detection system can achieve 100% detection rate through self-learning mechanism. The system will not misjudge the detection of a broken tool. To ensure the feasibility and superiority of the system, further discussion would be illustrated in the following section.

@&#CONCLUSIONS@&#
The PNN self-learning tool breakage detection system was successfully developed in this study. This system uses the cutting force measured by the dynamometer during an end milling operation and three machining parameters, the feed rate, spindle speed and depth of cut, in a supervised learning PNN algorithm to perform detection analysis of tool breakage and learning ability when an error occurs in the machining process. The final conclusions are as follows: (1) An end milling tool breakage detection system is successfully constructed using a PNN with the accuracy of the testing group reaching 100% after a self-learning process; (2) The PNN learning process is irrelevant to the recalling process. Although its training accuracy is slightly lower at the beginning, but its training time is near zero to provide re-training until the training result reaching 100% without wasting time of training; (3) Since the PNN is able to insert data and re-train immediately, the network can be reconstructed when an error of tool detection occurs in order to achieve better accuracy; (4) Comparing with the back-propagation algorithm, the self-learning property of PNN allows the system to increase its training data sets by inputting the error detection collected from a real-time machining process and re-train the decision-making model. This mechanism will make the system more robust in practical application; (5) In this study, a high detection sensitivity of the PNN toward a particular characteristic in a binomial data is effectively utilized. In a PNN, as long as the most appropriate smoothing parameter is determined through experiments, the result tends to be the one with the higher probability. Since the distribution of broken tools is wider, the probability of detecting a broken tool is higher compared to a tool in good condition. Therefore, a PNN is more sensitive in detecting a broken tool, which means a tool in broken condition is rarely detected as a good tool. The PNN self-learning tool breakage detection system not only eliminates the Type II error, but also provides self-learning ability to significantly enhance the system accuracy and to avoid error detections. In summary, a PNN is the key to constructing an accurate, self-learning and intelligent CNC automatic machine.In this study, the training process of the PNND model followed the regular training procedures of a PNN. The training and testing data sets have been randomly separated only one time at the beginning. The selection of training data sets may affect the structure of PNN algorithm, and the initial accuracy of testing data sets. Even through the self-learning process will be activated to re-train the algorithm, it may take several self-learning cycles to achieve the final result. For the further study, the K-fold cross validation could be applied for the classification of data sets. It would take more time in training the system, but the initial system could be more robust. Furthermore, the total data used in this study was 350. It takes time and cost to collect the data for training. With the self-learning ability, the experimental design could be applied in the future to determine what the optimal number of data sets to train the PNN self-learning tool breakage detection system could be.