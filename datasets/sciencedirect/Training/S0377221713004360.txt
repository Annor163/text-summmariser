@&#MAIN-TITLE@&#
A new mixed integer program and extended look-ahead heuristic algorithm for the block relocation problem

@&#HIGHLIGHTS@&#
We present a new mathematical formulation for the block relocation problem (BRP).New formulation has better runtime performance than other formulations.We present the first computational results for two math programs of the BRP.We introduce a new look-ahead algorithm (LA-N) for the BRP.LA-N algorithm generally outperforms all other algorithms from the literature.

@&#KEYPHRASES@&#
Logistics,Block relocation problem,Seaport container terminal,Mixed integer programming,Look-ahead algorithm,

@&#ABSTRACT@&#
This paper considers the block relocation problem (BRP), in which a set of identically-sized items is to be retrieved from a set of last-in-first-out (LIFO) stacks in a specific order using the fewest number of moves. The problem is encountered in the maritime container shipping industry and other industries where inventory is stored in stacks. After surveying the work done on the BRP, we introduce “BRP-III”—a new mathematical formulation for the BRP—and show that it has considerably fewer decision variables and better runtime performance than the other formulation in the literature. We then introduce a new look-ahead algorithm (LA-N) that is an extension of the algorithms from the literature and show that the new algorithm generally obtains better solutions than the other algorithms and has minimal CPU runtime.Today most overseas shipping of finished consumer goods is done via 20-, 40-, or 45-foot long steel containers aboard deep-sea container vessels. In addition, the amount of meat, fish, fruit, vegetables, and general foodstuffs shipped in refrigerated containers continues to increase. The efficient storage, handling, and retrieval of shipping containers in seaports and on container ships is therefore an important component of global supply chain management.In this paper, we consider a problem related to the handling of steel shipping containers called the block relocation problem (BRP). The BRP is an important problem at logistics facilities such as seaport container terminals where overhead gantry cranes,straddle carriers, and/or reach stackers sort and stack containerized cargo that awaits a future journey (Fig. 1).The BRP is defined as follows. Consider C containers (blocks, items) numbered 1 to C that are temporarily stored as inventory. Due to space limitations, these containers are stacked directly on top of each other in a storage bay consisting of S last-in-first-out (LIFO) stacks. As the time to move this inventory approaches, management learns that the containers must be retrieved from the bay according to the sequence 1,2,3,…,C. In other words, container 1 must be retrieved first; container 2 must be retrieved second, and so on. Containers that have not been retrieved must remain in one of the bay’s S stacks until their retrieval time arrives. The goal is to retrieve all C containers from the bay using the minimum number of moves, where a move is either a direct retrieval, in which a container is permanently taken out of the bay, or a relocation (reshuffle, shift), in which a container is moved from one stack to another stack. A container may only be moved when no other container is above it. Also associated with the problem is a maximum stack height, mxHeight, which gives the maximum number of containers that can be in any stack at any time. This limitation is important when height is limited by a ceiling or other predetermined limit such as the height of a material handling crane. Note that there is essentially no maximum stacking height when mxHeight⩾C.The most challenging aspect of the BRP is deciding when and how to relocate containers (blocks) so as to minimize the total number of moves. Hence the name “block relocation problem.” Fig. 2shows three possible solutions to an instance of the BRP where C=9 and S=3. In solutions (i) and (ii), there is no height limit (i.e. mxHeight=9). In solution (iii), there is a height limit mxHeight=5. Solutions (i), (ii), and (iii) use 16, 15, and 17 moves respectively.This paper is organized as follows. Section 2 reviews the relevant literature. In Section 3, we present “BRP-III”—a new mathematical formulation of the BRP—and compare its performance to the other formulation in the literature. In Section 4, we introduce a new look-ahead algorithm (LA-N) for the BRP that is an extension of the algorithms from the literature. In Section 5, we show that the new algorithm generally obtains better solutions than the other algorithms from the literature and has minimal CPU runtime. We conclude in Section 6.

@&#INTRODUCTION@&#


@&#CONCLUSIONS@&#
In this paper, we introduced “BRP-III”—a new mathematical formulation of the BRP—and showed that it has considerably fewer decision variables and better runtime performance than formulation BRP-I from Caserta et al. (2012). In doing so, we presented the first computational results for the literature’s only two math programming formulations of the BRP that allow cleaning moves. We also introduced a new look-ahead algorithm (LA-N) for the BRP that uses ideas from existing algorithms in the literature. This new algorithm generally obtains better solutions than the KH, DH, CM, and LL algorithms from the literature, and it also has minimal CPU runtime. The performance of the LA-N algorithm varies depending on the “look-ahead” value N. For small- and medium-sized instances, the algorithm usually performs better when N is large. For extremely large instances, the algorithm performs better when N is 1. Future work on the BRP might consider additional safety constraints that ensure that two adjacent stacks can never differ in height by more than Z containers (constraints (7)–(8) in Table 4). We might also try to find new algorithms that outperform the LA-N algorithms introduced here.Supplementary data associated with this article can be found, in the online version, at http://dx.doi.org/10.1016/j.ejor.2013.05.037.Scanned version of Petering (2004).Pages 1, 2, 55, and 56 of Petering et al. (2005).The .tex source code for supplementary file #1 above. This file was last modified on June 21, 2004.Computer (C++) code, written by M.E.H. Petering in 2004, that implements the basic LA algorithm. This file was last modified on April 27, 2004.Output produced by the C++ code in supplementary file #4 above. This file was last modified on April 26, 2004.