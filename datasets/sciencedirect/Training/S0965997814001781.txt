@&#MAIN-TITLE@&#
Study of a Jacobian-free approach in the simulation of compressible fluid flows in porous media using a derivative-free spectral method

@&#HIGHLIGHTS@&#
We employ the DFSANE algorithm in the simulation of miscible flows in porous media.We report results and comparisons with a Jacobian-free inexact Newton method.The DFSANE was able to simulate miscible processes using the lowest CPU time.

@&#KEYPHRASES@&#
Compressible fluids,Miscible flows,Porous media,Jacobian-free approach,Derivative-free spectral method,Large-scale nonlinear systems,

@&#ABSTRACT@&#
The development of Jacobian-free software for solving problems formulated by nonlinear partial differential equations is of increasing interest to simulate practical engineering processes. For the first time, this work uses the so-called derivative-free spectral algorithm for nonlinear equations in the simulation of flows in porous media. The model considered here is the one employed to describe the displacement of miscible compressible fluid in porous media with point sources and sinks, where the density of the fluid mixture varies exponentially with the pressure. This spectral algorithm is a modern method for solving large-scale nonlinear systems, which does not use any explicit information associated with the Jacobin matrix of the considered system, being a Jacobian-free approach. Two dimensional problems are presented, along with numerical results comparing the spectral algorithm to a well-developed Jacobian-free inexact Newton method. The results of this paper show that this modern spectral algorithm is a reliable and efficient method for simulation of compressible flows in porous media.

@&#INTRODUCTION@&#
The simulation of the flow of miscible fluids through porous materials takes place in several situations of interest in applied sciences and engineering, as in oil recovery, subsurface contaminant transport and remediation, supercritical extractions, chromatography processes, etc. In fact, after the initial stages of oil extraction, the enhanced oil recovery techniques use injections of fluids that seek to reduce the viscosity of the resident oil and improving the flow. In general, these fluids comprise gases or liquids that are miscible with oil, such as carbon dioxide, nitrogen, gels, polymer solutions, and other. A large number of chemical substances commonly used in the industrialized world have their fate in the environment. Such events that occur intentionally or accidentally include fertilizer and pesticide applications in agriculture, leaks in industrial (and residential) facilities used for the disposal of waste, and inappropriate choices of waste disposal sites. These chemicals often contaminate sources of subsurface water. Thus, to simulate such events, many of these processes are modeled as the flow of miscible fluids, water and a solute. Various processes for remediation of soil and ground water that use injections of solvents can also be described by these miscible models. In chemical engineering, the study of miscible flows in porous media is important in many practical situations, such as the simulation of supercritical processes used in the extraction of natural products. As an example, we can cite the extraction of caffeine from the injection of carbon dioxide in a supercritical state. In applied analytical chemistry, the flows in porous columns, used in chromatography processes, are in general miscible, where the injected fluid (eluent) can be in a supercritical state.Generally, the mathematical models used to describe these complex processes are formulated by nonlinear partial differential equations [3,7], which can present solutions with singularities in the injection and production wells.Thus, the discretization of these problems (governed by nonlinear differential equations) leads to large nonlinear systems of algebraic equations. These equations are commonly solved using the classical Newton method [1]. In spite of this, the convergence of the Newton method depend on the location of the starting point; this iterative method is attractive because it usually presents a local quadratic rate of convergence [9]. However, to simulate the dynamic evolution of the flow, at each time step the Newton method requires the solution of a number of linear systems, where the Jacobians of the nonlinear system evaluated at the current points are the coefficient matrices, which are generally large and sparse.To minimize the computational cost spent on resolutions of such linear systems, in recent years some researchers in this area have used inexact Newton methods, [4,8,14,16]. Such inexact methods are variants of the Newton method, where linear systems are solved only approximately [10,12,13], what is commonly done using a Krylov method [15].The Derivative-Free Spectral Algorithm for Nonlinear Equations (DFSANE) is a modern method for solving large-scale nonlinear systems, developed from the spectral gradient method [2,21], which does not solve linear systems, nor use any explicit information associated with the Jacobin matrix, being a Jacobian-free approach with a solid theoretical foundation [17].The objective of this work is to study the performance of the DFSANE in the numerical simulation of miscible compressible fluid flows in porous media, where the model used considers point sources and sinks, possible large adverse mobility ratio and anisotropic dispersion in tensor form. Furthermore, in this model the density of the fluid mixture varies exponentially with the pressure. In addition, using a pseudo-language, all the algorithms discussed here will be presented in a clear and well-established form, in order to facilitate future applications to engineering problems.For this, two dimensional problems are presented, along with numerical results comparing the DSANE to a Jacobian-free inexact Newton method.The remainder of this paper is organized as follows. In Section 2, we describe the mathematical model for the miscible compressible fluid flows in porous media. Section 3 is devoted to the presentation of the DFSANE. In Section 4 we report the numerical results and comparisons. The conclusions are given in Section 5.In this section, we describe the differential equations that model the isothermal compressible fluid flows in porous media. In addition, we include a discretized form of this mathematical model, which was used to test the spectral method for nonlinear systems of interest here.We consider flows of binary mixtures (an invading fluid plus a resident fluid) through porous materials associated with processes where the invading fluid and the resident fluid are fully miscible, and flow together as one-phase fluid. Here, these processes are described by the mass conservation equations for the invading fluid and for the mixture, Darcy’s law, and an equation of state, which will provide the thermodynamic properties of the binary mixture [3,7].Let w be the mass fraction of the invading fluid in the mixture, and t the time. Then, the mass conservation equations of this species is given by(1)ϕ∂(ρw)∂t+∇.(ρwu)-∇.(ρD∇w)=wq,where ϕ is the porosity of the porous material, ρ is the mass density of the fluid mixture, q is the source (or sink) term that represents the mass flow rate per unit volume injected into (or produced from) the porous medium, D denotes the tensor of the mass diffusive-dispersive flux of the invading fluid, and u is the velocity of the fluid mixture. Here, this velocity is described using a differential form of Darcy’s law,(2)u=-kμ∇P,which disregards gravity effects. In Eq. (2)k is the permeability of the porous medium, μ and P are, respectively, the viscosity and pressure of the binary mixture. The governing differential equation that describes the conservation of mass for the total fluid mixture is given by(3)ϕ∂ρ∂t+∇.ρu=q.The viscosity of binary mixture depends on the mass fraction w, being described by the following mixing rule [22],(4)μ(w)=μr(1-w)+w(μr/μi)1/44where μiand μrare, respectively, the viscosities of the invading and resident fluids.The density ρ depends only on the pressure of the fluid, and obeys the equation of state [7],(5)ρ(P)=ρrefecf(P-Pref),where ρrefis the value of ρ at a reference pressure Pref, and cfis the compressibility of the fluid.For a two-dimensional velocity field of the type u=u1i+u2j(whereiandjare the unit vectors in x-direction and y-direction, respectively), the diffusion–dispersion tensor D takes the form shown in [19],(6)D11D12D21D22︸D=ϕdM1001+αTu12+u221001+αL-αTu12+u22u22u1u2u1u2u12,where, from Eq. (2), we have(7)u1=-kμ(w)∂P∂x,(8)u2=-kμ(w)∂P∂y.In Eq. (6), the scalar dMis the coefficient of molecular diffusion, and αTand αLare, respectively, the transverse dispersivity and longitudinal dispersivity of the invading fluid. The coefficient dMhas dimension of area per unit time, while αTand αLhave dimensions of length.Let Ω be the spatial domain representing the porous medium, whose boundary is denoted by ∂Ω. The boundary conditions are those that describe the absence of flow in the borders of Ω:(9)ρu·n=0,at∂Ω,for allt≥0,(10)(ρwu-ρD∇w)·n=0,at∂Ω,for allt≥0,where n is the unit vector normal to ∂Ω.Here, the spatial domain Ω is (essentially) two-dimensional. This rectangular domain (supposedly horizontal) will be denoted by Ω=[0,Lx]×[0,Ly], where Lxand Lyare the lengths of the sides of this rectangular region in x-direction and y-direction, respectively. For the spatial discretization, we use a uniform block-centered grid. Thus, given two integers nxand ny, this grid will be described byΩ^=(xi,yj)∈R2;i=1,…,nxandj=1,…,ny, with xi=(i−1/2)Δx and yj=(j−1/2)Δy, such that Δx=Lx/nxand Δy=Ly/ny. Each point(xi,yj)∈Ω^represents a node of the block-centered grid, where the values of the unknown functions of the problem in question are effectively calculated. Given xi+1/2=xi+Δx/2,yj-1/2=yj−Δy/2, etc., the setΩ^ij=[xi-1/2,xi+1/2]×[yj-1/2,yj+1/2]denotes a block ofΩ^, whose node is the point (xi,yj). Thus, we have nx×nydiscretization blocks. The temporal domain is represented by a closed interval [t0,tf], where tfdenotes the final time and t0(=0) is the initial time. Given an integer nt, this interval will be partitioned in the form0=t0<t1<…<tn<…<tnt=tf, providing an uniform temporal grid, whose time step is Δt=tn−tn−1, for all n=1,…,nt. Following the traditional notation,fi,jndenotes the value of a function f at the node(xi,yj)∈Ω^, at the level of time tn.Replacing Eq. (2) in Eq. (3), we obtain the so-called pressure equation, which for a node (xi,yj) takes the form(11)ϕ∂ρ(P)∂ti,j-∂∂xρ(P)kμ(w)∂P∂xi,j-∂∂yρ(p)kμ(w)∂P∂yi,j-qi,j=0Similarly, replacing Eq. (3) in Eq. (1), we have the so-called concentration equation(12)ϕ∂(ρ(P)w)∂ti,j+∂Fx∂xi,j+∂Fy∂yi,j-wi,jqi,j=0.In Eq. (12),FxeFyare the total mass flows of the invading fluid in x-direction and y-direction, respectively, given by(13)Fx=-wρ(P)kμ(w)∂P∂x-ρ(P)D11∂w∂x-ρ(P)D12∂w∂y,(14)Fy=-wρ(p)kμ(w)∂P∂y-ρ(P)D21∂w∂x-ρ(P)D22∂w∂y.Eqs. (11) and (12) are integrated in time using a time-marching approach based on the classical IMPES time stepping strategy [1], which is described in Algorithm 1 in Fig. 1. This strategy is characterized by three main aspects: (a) decouples the model equations in each time step; (b) the pressure equation (a nonlinear parabolic partial differential equation) is solved implicitly; (c) the concentration equation (of the type advection–diffusion) is solved explicitly.In order to carry out the Step 2 of Algorithm 1, the spatial derivatives in Eq. (11) are approximated by centered finite differences. Thus, using the backward-Euler method for time discretization, the pressure equation takes the following discretized form, [1]:(15)ϕρi,j(Pn+1)-ρi,j(Pn)Δt-1Δxρ(Pn+1)kμ(wn)i+1/2,jPi+1,jn+1-Pi,jn+1Δx-ρ(Pn+1)kμ(wn)i-1/2,jPi,jn+1-Pi-1,jn+1Δx-1Δyρ(Pn+1)kμ(wn)i,j+1/2Pi,j+1n+1-Pi,jn+1Δy-ρ(Pn+1)kμ(wn)i,j-1/2Pi,jn+1-Pi,j-1n+1Δy-qi,jn=0In Eq. (15), on each edge of a block of the block-centered grid the transmissibilityλ≡ρPn+1k/μwnis calculated by harmonic average [1]. For example:λi+1/2,j=2λi,jλi+1,j/(λi,j+λi+1,j).On the other hand, for the implementation of Step 3 of Algorithm 1, the concentration equation (Eq. (12)) is discretized by an explicit scheme,(16)wi,jn+1=ρ(Pn)i,jwi,jnρ(Pn+1)i,j-ΔtϕρPn+1i,j1ΔxFxwn,Pn+1i+1/2,j-Fxwn,Pn+1i-1/2,j+1ΔyFywn,Pn+1i,j+1/2-Fywn,Pn+1i,j-1/2-wi,jnqi,jnHere, to avoid non-physical oscillations and excessive artificial numerical dispersions, in Eq. (16) the advective parts of the total fluxesFxandFy, across grid block edges, are approximated by a flux limiting scheme, taken in the upstream direction [5]. The approximations of the diffusive parts ofFxandFyfollow a finite differences scheme based on a numerical strategy suitable for the discretization of the cross derivatives [11].In practice, it is often preferable to specify the volumetric rate Q (volume per unit time) instead of q (mass per unit volume, per unit time). For this, we use in Eqs. (15) and (16) the following relationship:(17)qi,jn=1(Vb)i,jρi,jnQi,jn,where (Vb)i,j=ΔxΔyh denotes the volume of the blockΩ^ij. Here, h is the thickness of the porous medium, a relatively small step taken in z-direction. Thus, in an injection block, the rateQi,jnis specified throughout the injection time. On the other hand, in a production block,Qi,jnis described by using a well model,(18)Qi,jn=-2πhkμi,jnlnr0/rwPi,jn-Pw,where Pw(<Pi,jn)and rw>0 are two previously fixed values called, respectively, well pressure and well radius [1]. In this model, r0 (>rw) is the equivalent radius of the blockΩ^ij. Here, as suggested in [20], we use(19)r0=0.14Δx2+Δy2.From Eq. (15) we obtain a system of nonlinear equations, whose solution provides in each time step the pressure field of a compressible flow in a porous medium. This nonlinear system presents some peculiarities, as the singularities associated with the injection and production wells, and the exponential variation of fluid density with respect to the pressure.In this section, we write this nonlinear system in the form(20)F(x)=0,where(21)F:RN→RN,is the nonlinear mapping defined by the expression on the left side of Eq. (15),x∈RNis the vector whose components are the pressure values at each node of the discretization grid, and N=nx×ny.Here, we consider the problem of findingx∗∈RN, such that F(x∗)=0. Classically, this problem has been solved with the Newton method. Using an initial guessx0∈RN, the Newton method generates an iterative sequencexk⊂RNdefined byxk+1=xk+dkN, where the vectordkN(the Newton direction) is the solution of the linear system(22)F′(xk)dkN=-F(xx).In Eq. (22), F′(xk) is the Jacobian matrix of F at xk, which is supposed invertible.One of the disadvantages of the Newton method is the necessity to solve the linear system above (Eq. (22)) in each iteration. This is heightened when F(x)=0 is a large-scale nonlinear system, whose solution is required repeatedly, as in the problem addressed here.In what follows, ||x|| denotes the Euclidean norm of x, i.e.,||x||=xTx.There is a clear relationship between findx∗∈RN, such that F(x∗)=0, and solve the following minimization problem(23)Minf(x)=‖F(x)‖2x∈RNIn fact, since ∇f(x∗)=2F′(x∗)TF(x∗), if F′(x∗) is invertible, then ∇f(x∗)=0 if and only if F(x∗)=0.Among the methods used to solve the minimization problem shown in Eq. (23) there is a class of iterative algorithms which use low storage, and are more suitable for large problems. In this class is the classical steepest descent method which, unfortunately, converge slowly [9].Given a differentiable functionf:RN→R, in order to accelerate the convergence of the steepest descent method, Barzilai and Borwein [2] proposed an iterative method defined by(24)xk+1=xk-1αk∇f(xk),where, for all k⩾1, the scalar αkis the argument that minimizes the function ‖αsk−1−yk−1‖2, with sk−1=xk−xk−1 and yk−1=∇f(xk)−∇f(xk−1), given by(25)αk=sk-1Tyk-1sk-1Tsk-1.If f is a quadratic form of the typef(x)=12xTAx-bTx+c, whereA∈RN×N,b∈RNandc∈R, then ∇f(x)=Ax−b. In this case, αkbecomes a Rayleigh quotient, given byαk=sk-1TAsk-1/sk-1Tsk-1[21]. Thus, If A is symmetric and sk−1 is an eigenvector of A, then αkis an eigenvalue of A. For this reason the αkparameter defined in Eq. (25) is called the spectral coefficient, and the method proposed by Barzilai and Borwein [2] is called the spectral gradient method.To solve the problem shown in Eq. (23), in [18] the authors observed that instead of employing ∇f(x)=2F′(x)TF(x), the gradient vector of f=‖F(x)‖2 which requires the calculation of the Jacobian F′(x), is possible to define a spectral method of the form(26)xk+1=xk±1αkF(xk),with(27)1αk=sk-1Tsk-1sk-1Tyk-1,where now we have sk−1=xk−xk−1 e yk−1=F(xk)−F(xk−1). In Eq. (26), the choice of the signs±comes from the fact that the search direction −F(xk) is not necessarily a descent direction of f(xk)=||F(xk)||2 at xk, i.e., in general, ∇f(xk)Tdk=−2F(xk)TF′(xk)F(xk) is not a negative number. In this case, the method selects the search direction +F(xk).Using the search directionsdk=±1/αkF(xk), the iterations of the so-called DFSANE (Derivative-Free Spectral Algorithm for Nonlinear Equations) are given by [17],(28)xk+1=xk+λk±1αkF(xk)︸dk,where, in each iteration, the step lengthλkis chosen appropriately to force the convergence of the sequence {xk}, regardless of the location of the starting point. This is made employing a globalization step that performs a nonmonotone linear search in the directions dk=±(1/αk)F(xk), governed by the derivative-free condition(29)f(xk+λkdk)⩽max0⩽j⩽Mf(xk-j)+∊k-γλk2f(xk),where {∊k} is a given convergent sequence, M is a non-negative integer, and γ∊(0,1).Thus the DFSANE initially attemptsλk=1. If this initial step length does not satisfy the condition shown in Eq. (29), then, in order to cause a reduction in the step length, the method makes use of a backtracking strategy. This strategy uses second degree polynomials,p(λ), obtained by a two-point interpolation, such that p(0)=f(xk)≡‖F(xk)‖2, p′(0)=−2f(xk)≡−2‖F(xk)‖2 andp(λc)=f(xk+λcdk)≡‖F(xk)+λcdk‖2, whereλcdenotes the current step length that was rejected for not meeting the condition shown in Eq. (29). Thus, we have(30)p(λ)=f(xk)-2f(xk)λ+f(xk+λcdk)-f(xk)+2f(xk)λcλc2λ2.Then, the critical point ofp(λ)is calculated analytically by(31)λt=λc2f(xk)f(xk+λcdk)+(2λc-1)f(xk),which is a minimizer ofp(λ), iff(xk+λcdk)≥f(xk). Finally, the next candidate for the step length (denoted here byλ±) is computed by(32)λ±=σ0λc,ifλt<σ0λcσ1λc,ifλt>σ1λcλt,otherwiseGiven an interval [σ0,σ1], the first two terms shown in Eq. (32) are safeguards that guarantee thatλ±is always of the formλ±=σλc, for some σ∊[σ0,σ1]. This process is repeated until the step length defined in Eq. (32) satisfies the condition stated in Eq. (29).More recently, Cheng and Li [6] improved the performance of the DFSANE. For this, these authors exchanged the condition shown in Eq. (29), using one that has proven more suitable for the nonmonotone derivative-free linear search associated with globalization step of this algorithm. This condition, which is also derivative-free, is given by(33)f(xk+λkdk)⩽Ck+∊k-γλk2f(xk),where C0=f(x0), and, for k⩾1, Ckis updated by the following rules:(34)Qk+1=βkQk+1,(35)Ck=βkQk(Ck+∊k)+f(xk+1)Qk+1,with Q0=1 and βk∊[0,1], for all k.During the development of this work, we had the opportunity to note that sometimes the original condition described in Eq. (29), which depends on the choice of the integer M, proved inadequate to solve the pressure equation (Eq. (15)), especially when N was chosen to be relatively large. Thus, in this work we chose to use the nonmonotone linear search determined by Eqs. (33)–(35).Algorithm 2, in Fig. 2, describes in detail the steps of the DFSANE, which are essentially those described in [17] together with the changes proposed in [6]. We considerγ=10-4,∈k=‖F(x0‖)(1-k)2and βk=0.85, for all k⩾0, [6,17]. In Step 6 of Algorithm 2, it can be seen a practical procedure used to prevent that the magnitude of the spectral coefficient becomes too large or too small.It can be shown that the nonlinear system of interest in this work has (in each iteration) a Jacobian which is symmetric and diagonally dominant. Thus the matrix F′(xk) is always symmetric and positive definite. Consequently, we have ∇f(xk)Tdk=−2F(xk)TF′(xk)F(xk)<0, if ‖F(xk‖)≠0. In this case there is no need to employ the alternative direction given by dk=F(xk), because it will never be selected. Therefore, Steps 3 and 4 of the DFSANE algorithm effectively used here have the simplest shapes shown below:Step 3. Set dk=−(1/αk)F(k),λ+=1and∈k=‖F(x0)‖(1-k)2.Step 4. Iff(xk+λ+dk)⩽Ck+∈k-γλ+2f(xk)thenSetλk=λ+andxk+1=xk+λkdk,else, setλt+=λ+2f(xk)f(xk+λ+dk)+(2λ+-1)f(xk),λ+=σ0λ+,ifλt+<σ0λ+σ1λ+,ifλt+>σ1λ+λt+,otherwiseand go to Step 4.end-if.It can be seen that the DFSANE is a genuinely spectral method. In fact, from a Taylor series expansion with integral remainder, we can write [9],(36)yk+1=F(xk+1)-F(xk)=∫0λkF′(xk+tdk)dtλkdk.Sinceλkdk=xk+1-xk=sk+1, then we have(37)yk+1=∫0λkF′(xk+tdk)dtsk+1.Using Eq. (37) we obtain(38)αk+1=sk+1Tyk+1sk+1Tsk+1=sk+1T∫0λkF′(xk+tdk)dtsk+1sk+1Tsk+1,for allk⩾0.Thus, the spectral coefficient of the DFSANE method is a Rayleigh quotient associated with the matrix∫0λkF′(xk+tdk)dt, which represents an average of the values of the Jacobian F′(xk+tdk) taken when t varies in the range[0,λk]. So if sk+1 approaches an eigenvector of∫0λkF′(xk+tdk)dt, then spectral coefficient of the DFSANE method approaches an eigenvalue of this matrix.

@&#CONCLUSIONS@&#
The DFSANE constitutes a Jacobian-free approach recently developed for solving large-scale nonlinear systems, which does not solve linear systems and nor use any explicit information associated with the Jacobin matrix. In this work, we have applied the DFSANE method to solve the discretized form of the pressure equation, a nonlinear partial differential equation which governs the distribution of the pressure field in the simulation of miscible compressible flows in porous media with point sources and sinks, where the density of the fluid mixture varies exponentially with the pressure. Here, the discretized forms of this differential equation have given rise to non-linear systems with ten thousand variables which have been addressed several times, over many time steps of the considered transient processes. Using a flow pattern of the type five-spot on two-dimensional geometries, we have simulated three different displacements of compressible fluids, including a flow with highly adverse mobility ratio, where the viscosity of the resident fluid is significantly higher than that of the invading fluid. We have compared the performance of the DFSANE to a well-developed Jacobian-free inexact Newton method, in time intervals up to 10h of injection of the invading fluid. In all tests, the DFSANE was able to simulate such process using the lowest CPU time, without introducing non-physical phenomena to numerical solutions.Thus, we conclude that the o DEFSANE is a reliable and efficient method for simulation of compressible flows in porous media.