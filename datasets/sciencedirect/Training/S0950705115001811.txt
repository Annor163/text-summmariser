@&#MAIN-TITLE@&#
A memetic algorithm for computing and transforming structural balance in signed networks

@&#HIGHLIGHTS@&#
This paper aims at reducing the potential conflicts in real-world signed networks.We model the computation of structural balance as the optimization of energy index.We present a more general energy function Hwincorporated with transformation cost.We model the transformation of structural balance as the optimization of Hw.We propose a fast memetic algorithm to solve the modeled optimization problems.

@&#KEYPHRASES@&#
Structural balance,Balance computation,Balance transformation,Memetic algorithm,Signed networks,

@&#ABSTRACT@&#
Structural balance enables a comprehensive understanding of the potential tensions and conflicts of signed networks, and its computation and transformation have attracted increasing attention in recent years. The balance computation aims at evaluating the distance from an unbalanced network to a balanced one, and the balance transformation is to convert an unbalanced network into a balanced one. In this paper, firstly, we model the balance computation of signed networks as the optimization of an energy function. Secondly, we model the balance transformation as the optimization of a more general energy function incorporated with transformation cost. Finally, a multilevel learning based memetic algorithm, which incorporates network-specific knowledge such as the neighborhoods of node, cluster and partition, is proposed to solve the modeled optimization problems. Systematical experiments in real-world social networks demonstrate the superior performance of the proposed algorithm compared with the state-of-the-art algorithms on the computation and transformation of structural balance. The results also show that our method can resolve the potential conflicts of signed networks with the minimum cost.

@&#INTRODUCTION@&#
Social interaction involves friendly and hostile relationships in many complex systems, including multi-player online games, Wikipedia, Web 2.0, online communities and information recommendation systems [1–3]. In these systems, the entities with friendly relationships are friends, cooperators, alliances or memberships in a group, while those with hostile relationships are enemies, competitors, opponents or memberships in different groups. These systems can be represented as signed networks in which nodes represent social entities and positive/negative edges correspond to friendly/hostile relationships.Structural balance, one of the most popular properties in ensembles of signed networks, reflects the origin of tensions and conflicts, and its computation and transformation have received much attention from physicist, sociologist, economist, ecologist, ecologist and mathematician [4–10]. The structural balance theory introduced by Heider states that the relations “the friend of my friend is my enemy” and “the enemy of my enemy is my enemy” are unbalanced in the strong definition, which is based on the statistical analysis of the balance of signed triads from the perspective of social psychology [11]. There are broad applications of the computation of structural balance, due to the ubiquity of the multi-relational organization of modern systems in a variety of disciplines. Furthermore, the pursuit of balance is desirable in many real-world signed systems. For instance, the pursuit of balance in international relationship networks can reduce military, economic and culture conflicts. The pursuit of balance in information systems can improve the authenticity of collected information and accelerate opinion diffusion [12–14].The computation of structural balance aims at calculating the least imbalances of signed networks [7]. There are mainly two issues in the computation of structural balance: (i) how to verify imbalances and (ii) how to compute the least imbalances. There have been recent efforts in addressing these issues. The frustration index [5] evaluates the imbalances of signed networks as the number of negative cycles which have an odd number of negative links. The energy function proposed by Facchetti et al. [7,15] measures the imbalances as the number of unbalanced links in signed networks, and both the gauge transformation [7,15] and memetic algorithms [16] are utilized to minimize the energy function. Besides, some studies evaluate the imbalances as the sum of the positive links across two different communities and the negative links within the same community [15,17], and thereafter they adopt the classical community detection algorithms, such as Infomap [18], FEC [19] and MODPSO [20], to identify the communities in signed networks. Note that, in many cases these studies are constraint to the strong definition of structural balance, and they are worth to be applied to the weak definition of structural balance. In the weak definition, “the friend of my friend is my enemy” is unbalanced while “the enemy of my enemy is my enemy” is balanced.The transformation of structural balance focuses on how to convert an unbalanced network into a balanced one. Classical transformation models are divided into two categories: discrete-time dynamic models and continuous-time dynamic models [21]. Local triad dynamic and constrained triad dynamic are two representative discrete-time models [22,23]. With these models, an unbalanced network is finally evolved towards a balanced or a jammed state by changing signs of edges [5]. Another classical discrete-time model is based on transforming the least number of unbalanced links in signed networks [24,25]. Differential dynamic presented by Kulakowski et al. [26] is a classical continuous-time model, and it exhibits the evolutionary process from an unbalanced network to a balanced one. In this model, the final evolutionary state (i.e., conflict or harmony) of social networks is determined by the total amount of positive links [8]. These models can effectively transform an unbalanced network into a balanced one, and they are worth improving if they take into account the cost of balance transformation.Recent studies have demonstrated that the computation and transformation of structural balance in signed networks are non-deterministic polynomial-time hard (NP-hard) problems [7,27]. This is of particular concern since the solution space increases with the size of a signed network exponentially. Memetic algorithms (MAs) as hybrid global–local search methodologies are widely adopted to solve NP-hard problems [28]. In general, a global search benefits explorations while a local search facilitates exploitations [28]. MAs synthesize the complementary advantages of global and local search methodologies [28–31], which makes it possible to solve large-scale NP-hard optimization problems. MAs have been applied into some large-scale networks optimizations, including balance computation [16], community detection [32,33], network resource allocation [34], neural network design [35], network robustness improvement [36] and network prediction [37–39].In this study, we propose a fast memetic algorithm, referred to as MLMSB, to compute and transform structural balance of signed networks. First, we extend the energy function criterion [7] to the weak definition of structural balance, and model the computation of structural balance as the optimization of the extended energy function H. Second, by introducing a cost coefficient parameter, we present a more general energy functionHwto evaluate the balance transformation cost, and model the transformation of structural balance as the optimization ofHw. Finally, a multilevel learning based local search is integrated into a population-based genetic algorithm (GA) to solve the modeled optimization problems. For the proposed MLMSB algorithm to converge fast, we make full use of the network-specific knowledge such as the interactions of nodes, clusters and partitions. Experimental results on five real-world networks demonstrate that MLMSB outperforms the classical algorithms that compute and transform the structural imbalance of signed network. Furthermore, the results also illustrate that MLMSB can identify and resolve potential conflicts with the minimum transformation cost.The rest of this paper is organized as follows. Section 2 briefly introduces ground knowledge about structural balance of signed networks. The optimization models and our method MLMSB are detailed in Section 3, followed by systematical empirical results in Section 4. The conclusions are summarized in Section 5.A signed network with N nodes can be represented as an adjacency matrix J, with each itemJijdefined as follows.(1)Jij=+1if nodesviandvjare positively linked,-1if nodesviandvjare negatively linked,0if nodesviandvjhave no link.Structure balance theory investigates the balance of three interconnected individuals. Assuming that an edge labeled+(-) indicates a friendly (hostile) relationship between the corresponding two individuals, there are the following four types of social relations [11]:•+++: “the friend of my friend is my friend”;++-: “the friend of my friend is my enemy”;--+: “the enemy of my enemy is my friend”;---: “the enemy of my enemy is my enemy”.Structural balance theory in its strong definition claims that the social relations+++and--+are balanced while the relations++-and---are unbalanced. Structural balance theory in its weak definition illustrates that the social relations+++,--+and---are balanced while the relation++-is unbalanced. Fig. 1illustrates the differences between the strong and the weak definitions of structural balance.Structural balance theory states that a complete signed network is balanced if and only if all its signed triads are balanced. For a non-complete signed network, it is balanced if it can be filled into a complete network by adding edges in such a way that the resulting complete network is balanced [1]. Wasserman gives an equivalent theorem from the perspective of clustering as follows [40].The strong (weak) definition of structural balance: “A signed network G is completely balanced, if and only if its nodes can be divided intok=2(k⩾2) clusters such that the nodes are positively linked within each cluster whereas negatively linked between the clusters” [40].According to the equivalent balance theorem, the social relation---is unbalanced (balanced) when its individuals are divided intok=2(k=3) clusters.The energy function [7] measures the imbalances of signed networks as the number of unbalanced links, and it is computed as follows.(2)h=∑(i,j)(1-Jijxixj)2,whereJij∈{+1,-1}represents the sign of the edge between nodesviandvj:+1denotes a positive link, whereas-1indicates a negative link;xi∈{+1,-1}is the identifier of clustersi. It is noteworthy that if two friendly nodes are assigned to different clusters,(1-Jijxixj)/2=1, and(1-Jijxixj)/2=0otherwise. If two hostile nodes are assigned to different clusters,(1-Jijxixj)/2=0, and(1-Jijxixj)/2=1otherwise. In other words, the link between nodesviandvjis unbalanced when its corresponding(1-Jijxixj)/2value is 1. The minimization of h is to find the minimum number of unbalanced links by dividing the nodes of networks into two clusters, namely “+1” or “−1” [7]. Fig. 2illustrates the identified unbalanced links of a toy networkG1by optimizing h.The computation of structural balance of signed networks in the weak definition can be modeled as follows.(3)minH=∑(i,j)(1-JijΘ(xi,xj))2,where H is the extended energy function andΘ(xi,xj)is a sign function whose value is 1 ifxi=xjand −1 otherwise. Here, thexivalue is an integer value in the range of[1,N], where N is the number of nodes. The minimization of H is to find the minimum number of unbalanced links by dividing the nodes of a signed network intok⩾2clusters.It is worthwhile to note that the energy function in Eq. (2) is a special case of H with k fixed at 2, and the function H can cater both the strong and weak definitions of the structural balance of signed networks. For instance, the social relation---can be classified as an unbalanced (balanced) structure withH=1(H=0) by dividing the nodes into two (three) clusters. It is necessary to setk=2in advance when we use H to compute the structural balance of signed networks in the strong definition. An illustration of the computation of structural balance on a toy networkG2is shown in Fig. 4.The unbalanced entities and connections of complex systems are the potential threats to their functionality. For complex systems to improve the functional security, it is necessary to alleviate their potential imbalances.The extended energy function H can be further expressed as follows.(4)H=-∑(i,j),xj≠xiJij+Θ(xi,xj)2-∑(i,p),xp=xiJip-Θ(xi,xp)2=∑(i,j),xj≠xi|Jij+|/2+∑(i,p),xp=xi|Jip-|/2,whereJij-(Jij+) represents the negative (positive) links between nodesviandvj.∑(i,p),xi=xp|Jip-|/2and∑(i,j),xj≠xi|Jij+|/2indicate the number of the negative links within the same cluster and the positive links across different clusters, respectively.Algorithm 1Framework of the proposed MLMSB1: Input: The cost coefficient w; the population size:NP; the size of mating pool:Nm; the tournament size:No; the crossover probability:pc; the mutation probability:pm; the maximum number of generations:gmax.2: Step 1.Initialization: Adopt the initialization described in Section 3.2.3 to generate a population of initial solutionsX(0)={x1,x2,…,xNP}; Sett=0;3: Step 2.Selection: Use the tournament selection described in Section 3.2.4 to chooseNmsolutions fromX(t)as parent solutionsY(t);4: Step 3.Genetic operation: Employ the network-specific genetic operation described in Section 3.2.5 onY(t)to evolve towards offspring solutionsZ(t);5: Step 4.Local search: Employ the node, cluster, and partition learning techniques described in Section 3.2.6 on the best solutionxl(t)ofZ(t)to find an optimal solutionxl′(t)around the region generated byxl(t).6: Step 5.Update: Get the next populationX(t+1)by choosingNPsolutions with lowHwfromX(t),Z(t)andxl′(t).7: Step 6.Stop criteria: Ift⩾gmax, stop the algorithm and outputX(t+1); otherwiset=t+1and go toStep2.8: Output: CovertX(t+1)into the clustering divisions of networks and output the negative edges within clusters and positive edges across clusters.A balanced network will be achieved if the signs of the unbalanced links found by the optimization of H are changed.In reality, the cost of changing a positive link may be different from that of a negative link. Thus, a more general energy functionHwis introduced with cost coefficient parameter w evaluating the different cost of changing positive and negative links for balance transformation. The corresponding optimization model for the balance transformation with minimum cost is as follows:(5)minHw=w·∑(i,j),xj≠xi|Jij+|/2+(1-w)·∑(i,p),xp=xi|Jip-|/2,wherew∈{0,1}evaluates the emphasis on either positive links or negative ones. If0⩽w<0.5, changing a negative link is more costly compared with changing a positive one; whereas if0.5<w⩽1, positive links affect more. An illustration of balance transformation on the toy networkG2is shown in Fig. 3.Our algorithm MLMSB is first initialized with a population of solutions, each of which represents a possible balance transformation. The population of solutions is then evolved via global search conducted by Genetic Algorithm (GA) and a network-specific local search iteratively. The network-specific knowledge, such as the neighborhoods of node, cluster and partition, is incorporated into the GA and local search. The framework of MLMSB is listed in Algorithm 1. The rest of this section will detail the definitions of neighborhoods and the representation, initialization, tournament selection, genetic operation and network-specific local search.A signed network can be viewed as a microscopic graphG={V,E}, with a set of nodesV={v1,v2,…,vN}and positive/negative links E. And the links between nodes can be represented as an adjacency matrix J as shown in Eq. (1).In the meantime, from a macroscopic viewpoint, a signed network can also be divided into a set of clustersS={s1,s2,…,sk}with positive and negative connectionsE′between clusters, in summaryG′={S,E′}. Here, weighted adjacency matricesA+andA-are used to measure the effect of the positive and negative links, respectively, and their items are defined as follows:Aij+=∑u∈si∑q∈sjJuq+andAij-=∑u∈si∑q∈sjJuq-. Especially,Aii+/Aii-indicates the number of internal positive/negative links within the clustersi; andAij+/Aij-(j≠i) is the number of external positive/negative links between clusterssiandsj.Fig. 5demonstrates both the microscopic and the macroscopic viewpoints of a toy network.Based on the knowledge that negative links have little influences on the formation of communities [17] and that the final balance state of signed networks is determined by the number of positive links [8], we define the neighborhoods of node, cluster and partition as follows.Definition of the neighborhood of node. The neighborhood of a nodeviis a set of nodes that have a positive link withvi.Definition of the neighborhood of cluster. The neighborhood of a clustersiis a set of clusters that have external positive links withsi.Definition of the neighborhood of partition. The neighborhood of a partitionSiis a set of partitions that can be transformed intoSiby merging any of their two neighboring nodes or clusters.In this study, each chromosome (or solution)xiis expressed as an integer vector [41]xi={xi1,xi2,…,xiN},wherexij∈{1,2,…,N}is the cluster identifier of nodevj[41]. For instance,xij=10indicates that the nodevjof ith chromosome is classified into the 10th cluster. With this representation, each solution represents a possible clustering division of this network. Thereafter, the nodes are divided into several clusters and the ones with the same cluster identifier are grouped in the same cluster.In the transformation of structural balance, it is necessary to change signs of positive edges across different clusters and negative edges within the same cluster. Fig. 6illustrates the integer vector representation on a toy networkG4with 10 nodes. It can be clearly seen that the number of clusters is automatically determined by the integer vectorxi.Initialization corresponds to Step 1 of MLMSB. In general, the convergence of MAs can be accelerated by a population of initialized solutions with high quality and good diversity [28]. For the initialization to generate a population of high-quality solutions, it is necessary to incorporate network-specific knowledge. Here, we utilize the neighborhood of node, and generate a population of solutions by assigning the cluster identifiers of nodes to those of their neighbors. In order to maintain the diversity of the initial solutions, we adopt a random sequence strategy to update the cluster identifiers of nodes. Algorithm 2 lists the pseudocode of the network-specific initialization.Algorithm 2Network-specific initialization1: Input: The size of populationNP.2: GenerateNPsolutionsX(0)={x1,x2,…,xNP}, wherexij←j,1⩽i⩽NP,1⩽j⩽N.3: for each solutionxiofX(0)do4: Generate a random sequence (e.g., {r1,r2,…,rN}).5:for each chosen nodevrjof Gdo6:xiu←xirj,∀u∈{u|Jurj=1}.7:end for8: end for9: Output:X(0)={x1,x2,…,xNP}.In the end, the network-specific initialization will generate a population of unsupervised solutionsX(0).In Step 2 of MLMSB, we chooseNmsolutions from the population as the parent chromosomes (solutions). Here, the classical tournament selection is used to choose the parent chromosomes. The tournament selection firstly generatesNmtournaments. Each tournament consists ofNosolutions chosen from the population randomly, whereNois the size of the tournament. Then, the solution of each tournament with minimumHwis chosen as the parent chromosomesY(t), where t is the running number of generations.Genetic operation is the primary impetus of GA to generate promising regions in the solution space. Genetic operation mainly consists of crossover and mutation. The crossover aims to generate good offspring chromosomes by inheriting excellent properties from their parent chromosomes and the mutation is to generate disturbances [28].In Step 3 of MLMSB, we employ a two-way crossover and a neighborhood based mutation. The two-way crossover exchanges the clustering information of parent chromosomesY(t). More specifically, for each pair of chromosomesxa={xa1,xa2,…,xaN}andxb={xb1,xb2,…,xbN}inY(t), we choose a nodevqrandomly and generate a random value within [0 1]. If the generated random value is smaller than the crossover probabilitypc, thenxaμ←xbq,∀μ∈{μ|xbμ=xbq}xbν←xaq,∀ν∈{ν|xaν=xaq}.The two-way crossover can inherit useful clustering divisions from their parents [32]. Fig. 7gives an illustration of the two-way crossover on two parent chromosomesxaandxb. It shows that the offspringxcinherits the cluster {1, 2, 3} and {4, 5, 6, 7} fromxbandxa, respectively.In order to reduce useless explorations and generate dependable offsprings, we adopt a neighborhood based mutation which mutates the cluster identifiers of nodes with those of their neighbors. In the mutation processes, when a node has more than one neighbor and these neighbors are in different clusters, we randomly replace its cluster identifier with one of its neighbors. The neighborhood based mutation performs on each solutionxigenerated by the crossover, and its processes can be expressed as follows. For each nodevjinxi,1⩽j⩽N, we generate a random value within[0,1]and choose at random a nodevufrom the neighbors ofvj. If the generated random value is smaller than the mutation probabilitypm, thenxij←xiu.Fig. 8gives an illustration of the neighborhood based mutation. The solutions generated by the mutation form the offspring populationZ(t).In MLMSB, GA can explore and exploit a few promising regions in the solution space. However, it cannot converge to the optimal solutions of promising regions within a few generations. A local search technique is designed to accelerate the convergence of GA to the optimal solutions [30]. Generally, start from an initial solution, and then a local search technique is adopted to repeatedly search for an improved solution by local changes [30]. A local search can effectively reduce useless explorations by incorporating problem-specific knowledge.In this study, the neighborhoods of node, cluster and partition are incorporated into our multilevel learning technique which consists of a microscopic-level node learning, a macroscopic-level clustering learning and a partition learning. In Step 4 of MLMSB, the multilevel learning is employed on the best solutionxlinZ(t). The visualization of the multilevel learning is shown in Fig. 9. In the following, detailed descriptions of the node learning, cluster learning and partition learning are given.Node learning. In the node learning, each nodevriinxlis reassigned to the cluster of its neighborvru, which will result in the maximum decrement inHw. More specifically, for each nodevrichosen in a random sequenceR1={r1,r2,…,rN}, its cluster identifierxlriis updated as follows.xlri=argmaxxlu-ΔHw(xl∣xlri←xlu),u∈{u|Jriu=1},whereΔHw(xl∣xlri←xlu)represents the decrement ofHwwhen nodevriis reassigned to the cluster ofvu. The node learning ends when the assignment of each node to the clusters of its neighbors cannot result in the decrement ofHw.The node-level learning can converge to a good solution quickly. However, the node learning technique falls into a local optimum easily because it cannot traverse all solutions in the promising regions. By incorporating the neighborhood structure of cluster, we present a cluster learning technique to find a better solution around the solutionxl={s1,s2,…,sk}generated by the node learning technique, wheresi={vi1,vi2,…,vin}is a cluster with n nodes.Cluster learning. In the cluster learning, each clustersiupdates its cluster identifier with that of its neighborsq, which will lead to the maximum decrement inHw. More specifically, for each clustersichosen in a random orderR2={r1,r2,…,rk}, its cluster identifierxlsiis updated as follows.xlsi=argmaxxlsq-ΔHw(xl∣xlsi←xlsq),∀q∈{q|Asisq+⩾1}.The updating process ends when the cluster identifier of each cluster keeps unchanged.The cluster learning considers different neighborhood structures compared with the node learning, which makes it possible to find a better solution around the solutionxl. However, the cluster learning is still easy to trap into a local optimal clustering division because it is hard to separate the merged nodes and communities again [33].Partition learning. In order to overcome the constraint of cluster learning, we design the partition learning. The partition learning performs on two solutionsxl={xl1,xl2,…,xlN}andxg={xg1,xg2,…,xgN}, wherexlis the solution generated by the cluster learning andxgis the best solution in the population, and it consists of two steps. The first step is to find the consensus neighborxfofxgandxl. At this step, the nodes are divided into the same cluster if they have the same identifiers in bothxgandxl, but separated into different clusters if they have the same identifiers inxgwhile different identifiers inxl. An illustration of this step is shown in Fig. 9. The second step uses the node and cluster learning to optimize the consensus neighborxf, and generates a solutionxl′.The partition learning can learn the skeletal structure fromxlandxgand evolve the consensus neighbor towardsxlorxg, or even a better solution.Computation ofΔHw. TheΔHwof merging a nodevifrom its clustersiinto its neighboring clustersjcan be quickly computed as(6)ΔHw(xl∣xli←xlsj)=w·∑(i,q),q∈si|Jiq+|+(1-w)·∑(i,q),q∈si|Jiq-|-w·∑(i,p),p∈sj|Jip+|-(1-w)·∑(i,p),p∈sj|Jip-|.The computational complexity ofΔHwisO(k¯), wherek¯is the averaged degree of a signed network.The reasons why the multilevel learning technique works are that the multilevel learning technique incorporates the network-specific knowledge into the search rules. Moreover, the node learning and the cluster learning can quickly converge to the optimal solutions in the promising regions discovered by GA. In addition, the partition learning overcomes the constraint of cluster learning. Finally, extensive experiments demonstrate the effectiveness of the multilevel learning technique.It is time-consuming to implement the genetic operations and multilevel learning of MLMSB. In genetic operations, the two-way crossover and the mutation are implemented forNm/2andNmindependent times, respectively, whereNmrepresents the size of chosen solutions. The computational complexities of the crossover and the mutation areO(k¯)andO(k¯+M+), respectively, wherek¯is the averaged degree andM+represents the number of positive edges. In the node and cluster learning,ΔHwis computedM+times. Moreover, the formation of clusters needsk¯basic operations in the cluster learning. In addition, the identification of consensus neighbor needs N basic operations in the partition learning. Therefore, the computational complexities of the node learning, cluster learning and partition learning areO(k¯M+),O(Mk¯2)andO(N+M+k¯+Mk¯2), respectively. For MLMSB, its computational complexity isO(k¯2Mgmax), wheregmaxis the maximum number of iterations.MLMSB and our previous works Meme-Net [32], MLCD [33] and Meme-SB [16] model the issue of complex systems as a network optimization problem, and use the network-specific MA to solve the modeled problem. However, they are different in the motivation, optimization model, GA operation, network-specific knowledge and local search.As for the motivation, Meme-Net focuses on detecting the multi-resolution community structures of undirected networks. However, it is impossible for Meme-Net to detect communities in large-scale networks because of its high computational complexity [33]. MLMCD is devised to identify communities in large-scale networks. Meme-SB aims at computing the structural balance of signed networks in the strong definition. MLMSB is designed for the transformation of structural balance of signed networks.In the optimization model, Meme-Net models the community detection in undirected networks as the optimization of modularity density (Dλ) [42]. Multi-resolution communities can be detected by maximizingDλwith differentλ. MLCD models the community detection of networks as the optimization of modularity (Q) [43]. The maximization of Q can detect communities with massive internal links and few external links. Meme-SB models the computation of structural balance as the optimization of energy function h while MLMSB solves the transformation of structural balance by optimizing a more general energy functionHw.In the adopted GA operation, Meme-Net, MLCD and MLMSB have different representations from Meme-SB. Meme-Net, MLCD and MLMSB adopt an integer vector representation while Meme-SB uses a bit vector representation. Moreover, Meme-Net and MLMSB have different initializations from Meme-SB and MLCD. In the initialization, Meme-Net and MLMSB assign the cluster identifiers of nodes to those of their neighbors while Meme-SB and MLCD update the cluster identifiers of nodes with those of their neighbors. In addition, Meme-Net, MLCD and MLMSB have different crossover operators from Meme-SB. Meme-Net, MLCD and MLMSB use a two-way crossover while Meme-SB adopts a two-point crossover.In the incorporated network-specific knowledge, Meme-Net uses the undirected links among nodes while MLCD adopts both the undirected connections of node and community. Meme-SB and MLMSB are used for tackling signed networks. Meme-SB uses the neighborhood of node while MLMSB adopts the neighborhoods of node, cluster and partition.In the devised local search, Meme-Net and Meme-SB adopt a hill climbing and node learning as the local search, respectively. The hill climbing and the node learning optimize the clustering division of networks by updating the cluster identifier of nodes iteratively. MLCD and MLMSB adopt multilevel learning techniques as the local search. However, the detailed operations of the multilevel learning are different because MLCD and MLMSB tackle different optimization models and types of networks.

@&#CONCLUSIONS@&#
The computation and transformation of structural balance are fundamental to unearth the potential conflicts and maintain the stability of complex systems. In this paper, we have extended the classical energy function so that it can compute the structural balance of signed networks both in strong and weak definitions. After that, the unbalanced links can be transformed by changing signs of unbalanced edges. Moreover, we have proposed a more general energy function to evaluate the transformation cost. In addition, by incorporating the neighborhoods of node, cluster and partition, we have devised a fast memetic algorithm to compute and transform structural balance in signed network. Experimental results have demonstrated the superior performance of the proposed method (MLMSB) compared with other state-of-the-art models in five real-world signed networks. The results also have illustrated the effectiveness of MLMSB on the pursuit of balance at minimum cost.Despite of the promising performance of MLMSB, there are still some follow-up works. For instance, it is highly likely that multiple relations in complex systems are transformed to each other over time, i.e., dynamic properties. To cater this property, one of our future works will aim at transforming unbalanced structures to balanced ones in dynamic signed networks. Also, directed relationship may be more suitable for some real-world social systems [2,6], and therefore current work will be extended to signed directed networks.