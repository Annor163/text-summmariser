@&#MAIN-TITLE@&#
Hybrid multiobjective artificial bee colony for multiple sequence alignment

@&#HIGHLIGHTS@&#
We propose multiobjective evolutionary computation for multiple sequence alignment.We optimize two widely-used objective functions in the literature: WSP and TC.Hybridization of ABC and Kalign2 to obtain more accurate alignments.A study between our proposal and 13 aligners from the bioinformatics field.

@&#KEYPHRASES@&#
Artificial bee colony,Multiobjective optimization,Multiple sequence alignment,Evolutionary computation,Swarm intelligence,Bioinformatics,

@&#ABSTRACT@&#
In the bioinformatics community, it is really important to find an accurate and simultaneous alignment among diverse biological sequences which are assumed to have an evolutionary relationship. From the alignment, the sequences homology is inferred and the shared evolutionary origins among the sequences are extracted by using phylogenetic analysis. This problem is known as the multiple sequence alignment (MSA) problem. In the literature, several approaches have been proposed to solve the MSA problem, such as progressive alignments methods, consistency-based algorithms, or genetic algorithms (GAs). In this work, we propose a Hybrid Multiobjective Evolutionary Algorithm based on the behaviour of honey bees for solving the MSA problem, the hybrid multiobjective artificial bee colony (HMOABC) algorithm. HMOABC considers two objective functions with the aim of preserving the quality and consistency of the alignment: the weighted sum-of-pairs function with affine gap penalties (WSP) and the number of totally conserved (TC) columns score. In order to assess the accuracy of HMOABC, we have used the BAliBASE benchmark (version 3.0), which according to the developers presents more challenging test cases representing the real problems encountered when aligning large sets of complex sequences. Our multiobjective approach has been compared with 13 well-known methods in bioinformatics field and with other 6 evolutionary algorithms published in the literature.

@&#INTRODUCTION@&#
Any living species is represented by its biological sequence and; therefore, an accurate alignment among several biological sequences is critical for finding an evolutionary relationship among different species [1,2]. This problem is known in the literature as the multiple sequence alignment (MSA) problem [3]. However, MSAs not only allow us to infer phylogenetic relationships among living species, but also they can provide biological facts about proteins – most conserved regions are biologically significant [4]. Furthermore, an accurate MSA is highly valuable in the formulation and test hypotheses about protein 3-D structure and function, that is to say, it helps us to detect which regions of a gene are susceptible to mutation and which can have one residue replaced by another without changing the function.The natural formulation of the MSA problem, in computational terms, is to define a model of sequence evolution that assigns probabilities to all possible elementary sequence edits and then to seek an optimal directed graph in which edges represents edits and terminal nodes represents the observed sequences [5]. Unfortunately, in biologically realistic models it is not possible to determining an optimal directed graph; therefore, we need to turn to approximate heuristics. A well-known heuristic is to optimize the sum of alignment score (SP score) between each pair of sequence.The MSA problem may be defined as an NP-hard optimization problem [6] which can be solved by using dynamic programming with a time and space complexity of O(k2kLk) [7] when aligning k sequences of length L. Although the use of dynamic programming guarantees mathematically optimal alignments, the problem space increases significantly with the number of sequences and with the length. In order to overcome this drawback, several heuristics have been proposed in the literature. We can classify them into two main categories: progressive and iterative alignments.Progressive alignment is the most widely used technique for multiple sequence alignment in the literature. It basically starts aligning the closest evolutionary sequences and after that, continues with the more distant ones until all the sequences are aligned. This method presents the advantage of being simple and very fast; however, a certain level of accuracy is not guaranteed. In this way, we can highlight that the main disadvantage of this method is that it can be trapped in suboptimal alignments. Among the main multiple sequence aligners published in the literature that make use of progressive alignment are Clustal W [8], or Clustal Ω [9], Tree-based Consistency Objective Function For alignment Evaluation (T-Coffee) [10], PRANK [11], Fast Statistical Alignment (FSA) [12], or Kalign [13].The iterative alignment techniques make use of one method to produce an initial alignment (such a progressive method) and then refine this initial alignment by performing diverse iterations until a given stopping criterion. The main idea behind this technique is therefore to consider the initial alignment as suboptimal and then refine it until no further improvements can be achieved. In the literature we find several approaches that takes the advantage of performing an iterative refinement in order to obtain more accurate alignments, among the main ones are MUltiple Sequence Comparison by Log-Expectation (MUSCLE) [5], Multiple Alignment using Fast Fourier Transform (MAFFT) [14], PROBabilistic CONSistency-based multiple sequence alignment (ProbCons) [15], MSAProbs [16], or MUMMALS [17]. Genetic algorithms and evolutionary computation have also been considered for solving the multiple sequence alignment problem, we find diverse genetic algorithms (GA) in the literature: Sequence Alignment by Genetic Algorithm (SAGA) [18], Multiple Sequence Alignment Genetic Algorithm (MSA-GA) [19], Rubber Band Technique Genetic Algorithm (RBT-GA) [20], Vertical Decomposition Genetic Algorithm (VDGA) [21], Genetic Algorithm for Multiple Sequence Alignment using Progressive Alignment Method (GAPAM) [22], Multiobjective Optimizer for Sequence Alignments based on Structural Evaluations (MO-SAStrE) [23]. In addition, we find other single-objective approaches based on swarm intelligence, such as Artificial Bee Colony (ABC) [24,25], Ant Colony Optimization algorithm (ACO) [26,27], or Immune Artificial System Algorithm (IMSA) [28].In the last years some efforts were done on incorporating structural information for obtaining more accurate alignments. Basically, these methods use Protein Data Bank (PDB) structures as template in order to guide the alignment of a given set of unaligned sequences using structure-based sequence alignment methods, two examples of structural-based methods are 3D-COFFEE [29] and MO-SAStrE. The main drawback of these methods is the limited availability of PDB structures.One of the main contributions of this work is to use multiobjective evolutionary computation to solve the MSA problem. In the literature, we find evolutionary approaches that optimize the sum-of-pairs function (SAGA [18], MSA-GA [19], RBT-GA [20], VDGA [21], GAPAM [22], ABC [24,25], ACO [27], or IMSA [28]) or the column score (RBT-GA [20], ACO [26]). In [30], a multiobjective evolutionary algorithm was implemented with the aim of assembling previously aligned sequences, trying to optimize jointly the sum-of-pairs function and the column score.In this work, we also optimize at the same time two of the most widely-used objective functions in the literature: the weighted sum-of-pairs function with affine gap penalties (WSP) and the number of totally conserved (TC) columns score. Therefore, each objective function focuses on either preserving the quality of the alignment and consistency; respectively.In addition, we apply a well-known swarm intelligence approach, the Artificial Bee Colony (ABC) algorithm [31]; but adapted to handle multiobjective problems, we refer to it as MOABC. The ABC algorithm was developed by D. Karaboga, inspired by the foraging and dance of honey bee colonies [31]. The swarm algorithms, such as ABC, have been successfully applied to solve real-world problems in different domains, such as the design and manufacturing problem [32], selection of cutting parameters in machining operations [33], the structural damage detection problem [34], image segmentation problems [35], image classification [36], the abnormal brain detection [37], or in the path planning problem [38].As we have mentioned, several Genetic Algorithms (GAs) have been proposed in the literature for solving the MSA problem (SAGA [18], MSA-GA [19], RBT-GA [20], VDGA [21], GAPAM [22], or MO-SAStrE [23]). Whereas GAs take the information from 2–3 parents to generate a new solution; the algorithms based on swarm intelligence produce new individuals taking into account information not only from their parents, but also from the rest of the population. The effectiveness and goodness of the ABC against traditional GAs has been widely studied in the literature [39,40].In the ABC algorithm, we find three types of bees: employed bees, onlooker bees, and scout bees. In the canonical ABC, an employed bee becomes scout if it reaches a certain number of iterations with no improvements, which means that this bee is replaced by a new random solution. In our proposal, when an employed bee becomes scout, its stagnated solution (alignment) will be processed by the fast and accurate Kalign [13], avoiding the stagnation of the algorithm and promoting the diversity of the population as a result. In this way, the multiobjective ABC algorithm proposed in this paper was hybridized with the progressive, fast, and accurate Kalign to boost the accuracy and effectiveness of the algorithm, we refer to it as hybrid multiobjective artificial bee colony (HMOABC). In [41], a hybrid multi-objective artificial bee colony is proposed for burdening optimization of copper strip production. The main difference between the approach proposed in [41] and ours relies on the use of a deterministic heuristics (Kalign) in the scout phase of the ABC algorithm.The remainder of this paper is organized as follows. Section 2 describes the multiple sequence alignment problem. A detailed description of HMOABC is presented in Section 3. Section 4 is devoted to analysis of the experiments carried out and also a comparison with other approaches published in the literature. Finally, Section 5 summarizes the conclusions of the paper and discusses possible lines of future work.Multiple sequence alignment (MSA) is simply an alignment of more than two sequences and is considered as an NP-hard optimization problem [42]. The MSA problem can be defined as follows:Given a set of sequences S: {s1, s2, …, sk} of lengths |s1|, |s2|, …, |sk| defined over an alphabet Σ, for example ΣDNA={A, C, G, T} or Σprotein={A, C, D, E, F, G, H, I, K, L, M, N, P, Q, R, S, T, V, W, Y}.A multiple sequence alignment of S is defined as S′:{s1′,s2′, …,sk′}, where the length of the all the k sequences is exactly the same. Note that, S′ is defined over the same alphabet as S (Σ) with an additional gap symbol (−); so, S′ is defined over the alphabet Σ∪{−}. The gap symbol refers to indels, that is to say, the insertion or deletion of bases in the unaligned sequences.In this way, a multiple alignment is obtained by adding gaps to the sequences of S so that their lengths become the same. It can be seen as a matrix representation where the rows are sequences and the columns represent aligned symbols. Each column of an alignment must contain at least one symbol of Σ, in other words, a column with all gaps is not allowed. According to [42], the complexity of finding an optimal alignment is O(k2kLk), where k is the number of sequences and L is the max(|s1|, |s2|, …, |sk|).In this work, we propose the use of multiobjective optimization for solving this NP-complete optimization problem. Therefore, we search the best solution that simultaneously maximizes the weighted sum-of-pairs function with affine gap penalties (WSP, f1) and the number of totally conserved (TC, f2) columns score.The weighted sum of pairs with affine gaps (WSP, f1) needs to maximize the following equation:(1)WSP(S)=∑l=1LSP(l)−∑i=1kAGP(si)where L is the alignment length, SP(l) is the sum-of-pairs score of the lth column, which is defined as:(2)SP(l)=∑i=1k−1∑j=ikWi,j×SM(si,l,sj,l)and AGP(si) is the affine gap penalty score of sequence si:(3)AGP(si)=(gopen×#gaps)+(gextend×#spaces)In Eq. (2), Wi,jrefers to the sequence weight between sequence siand sj, and SM is the substitution matrix used, either Point Accepted Mutation (PAM) or Block Substitution Matrix (BLOSUM). In addition, in Eq. (3), gopenis the weight to open the gap and gextendis the weight to extend the gap with one more space. In this work we have used the BLOSUM62 substitution matrix, gopen=6, and gextend=0.85.The number of totally conserved (TC, f2) columns score refers to the number of columns that are completely aligned with exactly the same compound. This objective function needs to be maximized to ensure more conserved regions within the alignment.This Multiobjective Optimization problem with 2 objective functions for maximization can be formally defined as:(4)maximizeF(x)=(f1(x),f2(x))where x is the vector of variables in the set X,F: X→Y⊂R2 is a vector of 2 objective functions, and Y is the objective space. For any two objective vectors a=(a1, a2) and b=(b1, b2), the vector a is said to dominate b if and only if ((a1>b1) and (a2≥b2)) or ((a1≥b1) and (a2>b2)). Therefore, for any two solutions x1, x2∈X, x1 is said to dominate x2 (x1⪯x2) if F(x1) dominates F(x2). We denominate a solution x* as non-dominated solution if no solution in X dominates x*. The set of all non-dominated solutions in X is known as Pareto-optimal set or simply Pareto set[43].The representation of the individual determines how the MSA problem is structured in the proposed algorithm. It gives us the necessary knowledge to understand the behaviour of the proposal. In Fig. 1, we illustrate a novel representation of the individual. As we can see, for each sequence, we store the number of gaps followed by a list with the initial position of the gap (positive value) and its length (negative value). In case of finding a gap of length equal to one, we only store the initial position.The Artificial Bee Colony (ABC) algorithm is a swarm-based evolutionary algorithm created by Dervis Karaboga [31] and it is inspired by the intelligent behaviour of honey bees. In this algorithm, the position of a food source represents a feasible solution, that is to say, a feasible alignment; and the amount of nectar indicates the quality of the food source (fitness value).In ABC, the population of individuals is known as colony of bees, in which we find three types of bees: employed, onlooker, and scout. The first type of bees (employed) are related to a specific food source, the onlooker bees remain in the colony watching the dance of the employed bees with the objective of exploiting those food sources with higher amount of nectar, and finally, the scout bees are in charge of searching new food sources when one of the food sources becomes exhausted.In Fig. 2, we present a diagram that summarizes the flow of our proposal, the Hybrid Multiobjective Artificial Bee Colony Algorithm (HMOABC). As we can see, there are six steps in the HMOABC algorithm:•Step 1: Given a set of unaligned sequences, generate N random alignments, that is to say, one source of food for each of the N employed bees of the colony.Step 2: For each employed bee Eiin the colony (E), select a random employed bee (Erandom) from E, and perform a one-point crossover between the two solutions (alignments) in order to obtain a new one (Ei′). Once we have obtained N new employed bees in E′, perform a Fast Non-Dominated Sorting procedure [44] over E∪E′ with the aim of preserving in E the best N bees, that is to say, those bees with lower rank and higher crowding distance. For further information about the Fast Non-Dominated Sorting procedure (see Algorithm 2), including the rank and crowding distance assignments (see Algorithms 3 and 4), please refer to Deb et al. [44].Step 3: Compute the amount of nectar of each source of food associated with each employed bee in E. In this work, the amount of nectar (MOFitness) is computed by using the rank and crowding distance (CD) (line 16 in Algorithm 1). After that, for each employed bee, we calculate a probability of being selected by an onlooker bee in the next step (line 14 in Algorithm 1).Step 4: Generate N new onlooker bees by selecting those sources of food with higher probability of being selected. As we can see in Fig. 2, when an employed bee is selected, its related source of food goes through a mutation process. This mutation process consists of four steps: (1) Move a block: select a random block of gaps/compounds and move it towards the left or right; (2) Merge two groups: for each sequence, if a mutation probability is satisfied (F), select a random group of gaps/compounds and merge it with its adjacent group; (3) Divide a group: for each sequence, in case of mutation, select a random group of gaps/compounds and divide it into two groups; (4) Compact: delete those columns with all gaps. In Fig. 2, an illustrative example of each step is presented. Finally, check if the new mutated alignment (Oj) dominates (⪯) the previous one (Ei), in such case, we store in O the new bee; otherwise, store the previous one with an increment in its stagnation limit.Step 5: Check the stagnation limit of every bee in E and O. If the limit of a bee reaches a maximum number of cycles with no improvements (maxLimit), then this bee becomes scout, which means that its source of food will be strongly modified by using a Local Search. In this work, our multiobjective version of the ABC algorithm has been hybridized (HMOABC) with the fast and accurate Kalign2 [13]. In the local search, a random portion of the alignment is extracted. The size of this portion is chosen randomly in the range [5–25%] of the alignment length. Then, we delete all gaps in the portion and re-align it by using the Kalign2 method. Once we obtain the new alignment, we replace the old portion by the new one.Step 6: If the maximum number of evaluations is reached, then stop and output the set of non-dominated solutions, otherwise, use the Fast Non-Dominated Sorting procedure [44] over E∪O to preserve in E the best N bees, then, go to Step 2.As we have seen, to calculate the MOFitness of each employed bee, we first need to rank the employed colony by Pareto dominance, see Algorithm 3. In this way, we need to assign rank 1 to the non-dominated individuals and removing them from contention, then finding a new set of non-dominated individuals and assign rank 2, and so forth (see Fig. 3(a)). The second step is to compute the crowding distance (see Algorithm 4) of the bees with the same rank. As we can see in Algorithm 4, to calculate the crowding-distance, we first sort the bees in each objective domain. Then, the first and last solutions (bees) are assigned a distance equal to infinity. For the other solutions, the crowding distance is calculated by the difference of the objective value of the two closest neighbours. In Fig. 3(b), we present an example where the crowding distance of the non-dominated solution B is higher than the crowding distance of the non-dominated solution A because A1+A2<B1+B2.

@&#CONCLUSIONS@&#
In this paper, we have introduced a novel multiobjective evolutionary algorithm based on swarm intelligence for the multiple sequence alignment problem. By using our approach (HMOABC), we are able to obtain a set of accurate and consistent solutions by simultaneously maximizing two well-known objective functions: the weighted sum-of-pairs function with affine gap penalties (WSP) and the number of totally conserved (TC) columns score.The proposed approach is inspired by the foraging behaviour of honey bees and it incorporates a local search procedure based on the fast and accurate Kalign. HMOABC has been compared with the most relevant multiple sequence alignment methods published in the literature. In this comparison, we have used the BALiBASE3.0 benchmark and two accuracy measures: Q and TC. In addition, we have compared our proposal with other GAs published in the literature for solving this bioinformatics problem. From these comparisons, we conclude that the HMOABC algorithm is a very promising approach for solving the MSA problem.In future work, we intend to apply other multiobjective variants of evolutionary algorithms based on swarm intelligence to the MSA problem. Furthermore, it would be a good future challenge to test the parameters and performance of HMOABC in other benchmarks, such as PREFAB, SABMARK, or OXBENCH. This work is mainly focused on proving the effectiveness of HMOABC in experimental data; therefore, an in-depth mathematical analysis will be performed in order to provide a strong theoretical support of HMOABC.Algorithm 1Pseudocode of the HMOABC.Algorithm 2Pseudocode of the FastNonDominatedSorting.Algorithm 3Pseudocode of the rank-assignment.Algorithm 4Pseudocode of the crowding-distance-assignment.