@&#MAIN-TITLE@&#
Serving many at once: How a database approach can create unity in dynamical ecosystem modelling

@&#HIGHLIGHTS@&#
Scientific and educational experience with the proposed Database Approach To Modelling (DATM) shows the following:It facilitated overview of and insight in the model by developers and users.Allowed for a much more dynamic scientific development of the model.Allowed for a direct implementation of these developments in multiple platforms.

@&#KEYPHRASES@&#
Modelling framework,Programming language,Differential equation,Community-based modelling,Database approach to modelling,DATM,

@&#ABSTRACT@&#
Simulation modelling in ecology is a field that is becoming increasingly compartmentalized. Here we propose a Database Approach To Modelling (DATM) to create unity in dynamical ecosystem modelling with differential equations. In this approach the storage of ecological knowledge is independent of the language and platform in which the model will be run. To create an instance of the model, the information in the database is translated and augmented with the language and platform specifics. This process is automated so that a new instance can be created each time the database is updated. We describe the approach using the simple Lotka–Volterra model and the complex ecosystem model for shallow lakes PCLake, which we automatically implement in the frameworks OSIRIS, GRIND for MATLAB, ACSL, R, DUFLOW and DELWAQ. A clear advantage of working in a database is the overview it provides. The simplicity of the approach only adds to its elegance.

@&#INTRODUCTION@&#
Since the onset of ecological simulation modelling based on differential equations – in the sixties and seventies of the last century – attempts have been made to bring conceptual unity through the development of modelling frameworks. In the field of aquatic ecology, such frameworks include the widely used DELWAQ – a library of water quality and ecology models developed by Delft Hydraulics (Delft Hydraulics, 1995; Deltares, 2013), as well as the Computational Aquatic Ecosystem Dynamics Model (CAEDYM) – a library of ecological process sub-models (Hipsey et al., 2007), AQUASIM (Reichert, 1994), the Dutch Waterboards' DUFLOW framework (Spaans et al., 1989) and the recently developed FABM – Framework for Aquatic Biogeochemical Models (http://fabm.sourceforge.net). Each of these frameworks is internally consistent, intuitive and well suited to answer the ecological questions it was designed for (Clemmens et al., 1993; Gal et al., 2004), and all are based on the same basic mathematical principles underlying the differential equations. Nonetheless, because these frameworks were developed independently, they all have their own sets of implementation requirements, language and coding specifications, spatial configuration options as well as boundary conditions and forcing function specifications, etc.A user must therefore invest a considerable amount of effort to master any given framework, which in turn reduces the number of frameworks that any single user can master. The choice of framework to be used for any given project is thus primarily based on its availability, owned licenses, user experience and developer familiarity. This in turn leads to models being locked into their given frameworks, a narrowing-down of scientific expertise to the framework-scale and to the proverbial ‘re-invention of the wheel’ – i.e., the inefficient redevelopment of existing tools for each framework, rather than a more productive cross-pollination of approaches to analyze models across frameworks, institutions, disciplines and scientists (Leavesley et al., 2002; Mooij et al., 2010; Trolle et al., 2012). We are confronted with the paradoxical situation that, while there is unity within each framework, there is no unity at the level of the ecological models.Here we propose a method to bring unity at the level of the ecological module, with the idea that many of the existing frameworks will continue to coexist, and that, taken together, they provide the user with a wide and rich array of tools for model analysis. We coin this method a ‘Database Approach To Modelling’ (DATM). We developed this approach for the ecosystem model for shallow lakes PCLake, and its twin model for linear waters PCDitch. However, our approach is in no way limited to these models. In fact, it applies to all models based on differential equations and probably even beyond. We here show how one can automatically link these models to a wide variety of frameworks, including OSIRIS (Mooij and Boersma, 1996), GRIND for MATLAB (available on http://www.sparcs-center.org/grind.html), ACSL (Mitchell and Gauthier, 1976), R (R Development Core Team, 2008), DUFLOW (Spaans et al., 1989) and DELWAQ (Deltares, 2013). Note that the latter two frameworks are spatially explicit and therefore are formulated in terms of partial differential equations (PDE's), whereas implementations of an ecological model (e.g. PCLake) in the general purpose frameworks are a set of ordinary differential equations (ODE's). We will show that with DATM we can overcome this difference, and translate a single code either in a set of ODE's in a general purpose framework or as the ecological component of a set of PDE's in these spatially explicit frameworks. In the latter case, these ecological components are then merged by the frameworks with the advective and diffusive transport of matter to get the full PDE. Please note that in its current form, DATM does not provide the spatial configuration of the model, this has still to be entered at the level of the framework.To explain the principles of DATM, we use as an example the classical Lotka–Volterra equations. These equations represent the earliest use of coupled differential equations in ecology (Lotka, 1920; Volterra, 1926, 1931). With this example, we show how knowledge of quite a few framework-specific details is necessary to implement even this simplest of models in some of the most widely used mathematical frameworks. From experience, we have learned how implementing more complex models in more specific frameworks takes a considerable effort, which is why we propose to automate this process: an essential component of DATM is the set of translators developed to automatically convert the database definitions of a given model into a working implementation in a specific framework. Conceptually, we argue that the overview and insight that arises when the model definition is stored in the database, conveniently displayed in tables and accessed through queries, facilitates model development and understanding.

@&#CONCLUSIONS@&#
