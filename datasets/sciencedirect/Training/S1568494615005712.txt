@&#MAIN-TITLE@&#
A simulated annealing heuristic for the multiconstraint team orienteering problem with multiple time windows

@&#HIGHLIGHTS@&#
We study multiconstraint team orienteering problem with multiple time windows (MC-TOP-MTW).We develop a simulated annealing (SA) with special solution encoding and restart strategy for MC-TOP-MTW.Using restart strategy in SA is promising for solving MC-TOP-MTW.Cauchy function is better than Boltzmann function in determining acceptance probability.The proposed simulated annealing outperforms existing approaches.

@&#KEYPHRASES@&#
Routing,Multiconstraint team orienteering problem,Multiple time windows,Simulated annealing,Cauchy function,Restart strategy,

@&#ABSTRACT@&#
This study proposes a simulated annealing with restart strategy (SA_RS) heuristic for the multiconstraint team orienteering problem with multiple time windows (MC-TOP-MTW), an extension of the team orienteering problem with time windows (TOPTW). A set of vertices is given in the MC-TOP-MTW. Each vertex is associated with a score, a service time, one or more time windows, and additional knapsack constraints. The goal is to maximize the total collected score using a predetermined number of tours. We develop two versions of SA_RS. The first version, SA_RSBF, uses Boltzmann function to determine the acceptance probability of a worse solution while the second version, SA_RSCF, accepts a worse solution based on the acceptance probability determined by Cauchy function. Results of the computational study indicate that both SA_RSBFand SA_RSCFcan effectively solve MC-TOP-MTW. Moreover, in several cases, they find new best solutions to benchmark instances. The results also show that SA with restart strategy performs better than that without restart strategy.

@&#INTRODUCTION@&#
Souffriau, Vansteenwegen, Van den Berghe and Van Oudheusden [1] proposed the multiconstraint team orienteering problem with multiple time windows (MC-TOP-MTW) as a sub-problem in the development of a personal tourist guide. The personal tourist guide helps tourists plan their visits to points of interest (POIs). Usually, when visiting a city, tourists gather relevant information and select POIs to visit because they have limited tour time. The tourists then plan their tour based on available time and POI opening hours. The planning process is often extremely complex and time-consuming. The personal tourist guide can consider all the complications and promptly suggest best itinerary for tourists. The problem of selecting POIs and planning associated tours is called the tourist trip design problem [2].The tourist trip design problem is closely related to the well-known orienteering problem (OP) introduced by Tsiligirides [3]. The OP can be defined using a set of vertices, each associated with a score. Travel time between each pair of vertices is known. The goal of the OP is to determine a tour that maximizes the total score collected at the visited vertices. The score of each vertex can be collected at most once. The OP scores represent the strength of tourist preference for or interest in the POIs. The available tour time in the tourist trip design problem resembles the time budget in the OP. Therefore, the tourist trip design problem can be resolved by solving an OP.Because of practical considerations or restrictions, there are several variants of the OP in the literature, including the team orienteering problem (TOP), orienteering problem with time windows (OPTW), and team orienteering problem with time windows (TOPTW). Vansteenwegen, Souffriau and Van Oudheusden [4] provide a comprehensive survey about the OP and some of its extensions.The MC-TOP-MTW discussed in this study is an extension of the TOPTW. In the TOPTW, each location is associated with a single time window. However, in real world tourist trip design, a location may have multiple time windows. Additionally, different trips may have different time windows for certain locations. The MC-TOP-MTW considers these situations and includes additional knapsack constraints that deal with the budget limitations and “max-n type constraints” [1].During tourist trip design, the underlying MC-TOP-MTW needs to be rapidly solved. On the other hand, given sufficient planning time, high quality solutions are desirable. For example, a tourist may have searched for information about the destination and come up with a list of attractions that s/he wants to visit before the journey starts. In this case, the tourist is willing to spend a longer time for a high-quality trip design. The main contribution of this study is developing an efficient simulated annealing with restart strategy (SA_RS) heuristic that can produce high quality MC-TOP-MTW solutions within a reasonable time. Two versions of SA_RS, SA_RSBFand SA_RSCF, were developed. The main difference between the two versions is in the acceptance probability of worse solutions used in SA. The SA_RSBFuses Boltzmann function to determine the acceptance probability of a worse solution, while the SA_RSCFaccepts a worse solution based on the Cauchy function. Both SA_RSBFand SA_RSCFare compared with GRILS[1] in the computational study. The GRILS hybridizes an iterated local search (ILS) approach with a greedy randomized adaptive search procedure (GRASP).The remainder of this paper is organized as follows. Section 2 defines the problem and reviews the literature. Section 3 then describes the proposed simulated annealing with restart strategy heuristic for the MC-TOP-MTW. Next, Section 4 details the computational experiment and discusses the computational results. Finally, Section 5 draws conclusions.The MC-TOP-MTW is an extension of the TOPTW, which originates from the famous orienteering problem. Tsiligirides [3] defined the OP based on the sport of orienteering. Orienteering involves participants beginning from a control point, attempting to collect as many points as possible from checkpoints, and finally returning to the control point before a predetermined time. The goal is to maximize the total score collected at checkpoints. The OP is also known as the selective traveling salesperson problem [5] or the maximum collection problem [6].The TOP [7,8], also known as the multiple tour maximum collection problem (MTMCP) [6], is an extension of the OP. The goal of TOP is to find a specified number of paths, each limited by a time budget that maximizes the total collected score. The TOP resembles orienteering as played by several members, each collecting points either simultaneously or sequentially, or by a player who collects points over several successive days. In either case, each check point can be visited at most once.The TOPTW extends the TOP by including the additional consideration of time windows at the checkpoints. In the TOPTW, a checkpoint can only be visited within the specified time window of the checkpoint. This is the only difference between the TOP and the TOPTW.Vansteenwegen, Souffriau and Van Oudheusden [4] provided an excellent review of OP, TOP, and TOPTW. Tang and Miller-Hooks [8] also presented a detailed review of various approaches for solving the OP and TOP. These problems have recently attracted strong researchers’ interest due to their practical applications and complexity [6–14].TOPTW is a highly constrained NP-hard problem and is very difficult to solve [10]. Therefore, the MC-TOP-MTW is unlikely to be optimally solved within polynomial time. Heuristic approaches thus may be the only feasible means of solving this problem.Although the literature has proposed numerous efficient heuristic approaches for solving the TOP [6,8,14–18], these approaches may not be suitable for the TOPTW. For example, Vansteenwegen, Souffriau, Van den Berghe and Van Oudheusden [10] pointed out that the local search procedures used in existing TOP solution methods are less effective when applied to the TOPTW. Consequently, several studies have attempted to develop efficient solution approaches for the TOPTW. The best performing algorithms appear to be the ant colony system (ACS) approach developed by Montemanni and Gambardella [11], iterated local search (ILS) heuristic developed by Vansteenwegen, Souffriau, Van den Berghe and Van Oudheusden [10], variable neighborhood search (VNS) heuristic developed by Tricoire, Romauch, Doerner and Hartl [12], and simulated annealing heuristic developed by Lin and Yu [13]. This study modifies the SA heuristic of Lin and Yu [13] for the TOPTW into an SA_RS heuristic to solve the MC-TOP-MTW.Several problems in the literature are closely related to the MC-TOP-MTW, including the selective vehicle routing problem with time windows (SVRPTW) [19], the capacitated TOP [20], and the (T)OP with multiple (and different) time windows [12]. Souffriau, Vansteenwegen, Van den Berghe and Van Oudheusden [1] briefly described these problems and highlighted the differences between these models and the MC-TOP-MTW. They proposed a GRILS algorithm for the MC-TOP-MTW. The GRILS is based on the ILS for the TOPTW [10] and the greedy randomized adaptive search procedure (GRASP). The GRASP adds to the ILS extra diversifications to deal with the extra constraints in MC-TOP-MTW. To the best of our knowledge, the GRILS is the only heuristic approach proposed for the MC-TOP-MTW in the literature.The MC-TOP-MTW can be defined as follows. N+2 vertices, denoted by 0, 1, …, N+1, and number of desired tours M are given. Each vertex is associated with W time windows, a nonnegative score Si, and Z attributes. Vertex 0 is designated as the starting vertex, while vertex N+1 is the end vertex. Furthermore, tijdenotes the length of the minimum path (or the minimum travel time) between vertices i and j or vice versa. Oiwmand Ciwmdenote the opening and closing times of time window w of vertex i in tour m, respectively. eimzrepresents the cost associated with attribute z for vertex i in tour m. Ezdenotes the cost budget for attribute z. They are used in the knapsack constraints which assure that a tour does not violate a max-n type constraint for attribute z, i.e. exceed the maximum number of visits to vertices of attribute z in a tour, or the cost budget for a tour. The goal is to set up M tours that collect the maximum total score while satisfying the time windows of visited vertices, knapsack constrains, and time budget. Let P be a large constant and define the following decision variables:xijm=1, if tour m visits vertex j immediately after visiting vertex i, 0 otherwise;yim=1 if tour m visits vertex i, 0 otherwise;sim=start time of the visit at vertex i in tour m.Souffriau, Vansteenwegen, Van den Berghe and Van Oudheusden [1] formulated the MC-TOP-MTW as the following integer linear program.(1)max∑m=1M∑i=1NSiyimsubject to(2)∑m=1M∑j=1N+1x1jm=∑m=1M∑i=0Nxi(N+1)m=M(3)∑i=0Nxikm=∑j=1N+1xkjm=ykm,∀k=1,…,N;∀m=1,…,M(4)sim+tij−sjm≤P(1−xijm),∀i,j=0,…,N+1;∀m=1,…,M(5)∑m=1Myim≤1,∀i=0,…,N+1(6)∑m=1M∑i=0N+1eimzyim≤Ez,∀z=1,…,Z(7)∃w∈{1,…,W}:Oiwm≤sim≤Ciwm,∀i=0,…,N+1;∀m=1,…,M(8)xijm,yim∈{0,1},∀i,j=0,…,N+1;∀m=1,…,MThe objective function (1) maximizes the total scores collected by the M tours. Constraints (2) enforce that all M tours start from vertex 1 and terminate at vertex N. Constraints (3) ensures flow balance at each vertex. Constraints (4) calculate the arrival time at each vertex. Constraints (5) make sure that each vertex is visited no more than once. Constraints (6) are knapsack constraints which ensure that the maximum number of visits or maximum budget for visits to type z vertices is not violated. Constraints (7) enforce that arrival time at each vertex is within one of the vertex's time windows. Constraints (8) define binary variables.This study is motivated by the fact that the literature proposes only one efficient heuristic approach for the MC-TOP-MTW. Particularly, this study develops an SA-based heuristic for the MC-TOP-MTW. Simulated annealing is a local search-based meta-heuristic capable of escaping from local optimum by accepting, with small probability, worse solutions during the search process. SA has been successfully applied to many hard combinatorial optimization problems [21–30], multi-criteria decision making problems [31–34], and various real-world applications [35–40]. Because of its simplicity and flexibility, SA has also been hybridized with other meta-heuristics [40–46] or mathematical programming techniques [47–50] for solving difficult optimization problems.SA typically starts with an initial solution generated at random. Then it selects a neighborhood solution of the current solution at each iteration. If the selected neighborhood solution is better than the current solution, it replaces the current solution and the search process resumes from the new current solution. SA allows a worse neighborhood solution to replace the current solution, with a small probability, so that the procedure can escape being trapped at a local optima. However, in many cases, SA-based search procedures may require more diversification mechanisms to avoid being trapped at local optima. Without these diversification mechanisms, the search space of these SA-based search procedures may be confined to a small region of the solution space. Consequently, the chance of reaching a global optimum may be reduced [51]. A popular diversification mechanism is the restart strategy, which can be used to guide the search escape from a local optimum. This study therefore proposes a simulated annealing with restart strategy heuristic for the MC-TOP-MTW. The proposed SA_RS heuristic combines the advantages of SA-based algorithms in rapid search convergence and of the restart strategy in escaping local optima.The following subsections discuss the solution representation, neighborhood structure, and the parameters used in the proposed heuristic.Assume that N+2 locations, denoted by 0, 1, 2, …, N+1, are given in MC-TOP-MTW, where 0, N+1 represents the start vertex and end vertex, respectively. A solution to the problem is represented by a permutation of the numbers in {1, …, N} and M−1 zeros, where M is the number of tours. These zeros are used to terminate tours. The jth non-zero entry in the solution representation represents the jth location to be visited. Thus, the first nonzero number is the first location of the first tour. Subsequent locations are added to the current tour, one at a time, to complete the tour provided that the time window constraints of the depot and the locations are not violated. When multiple time windows exist for a location, only the nearest time window is considered since it requires the shortest waiting time. If adding a location to the current tour violates the location's time window constraint, the depot's time window constraint, or other constraints (such as budget constraint and location type constraint), discard this location and consider the next location. If the next number in the solution is a zero, terminate the current tour and start a new tour whenever feasible.A visit to a location must start within one of the service time windows of the location. If the arrival time of a vehicle does not fall into any one of the location's time windows, the vehicle must wait until the opening time of the next time window. This solution representation thus always provides a feasible MC-TOP-MTW solution.Table 1lists an MC-TOP-MTW instance with 20 locations, denoted by 1, 2, …, 20, to be serviced by two tours. The tours start from location 0 and end at location 21 (=location 0). For each location, the table lists the coordinates (X, Y), service time (ST), score (S), and entrance fee (EF). Two time windows exist for each location. O1 (E1) and O2 (E2) are the opening (closing) times of the first and second time windows, respectively. The monetary budget is 400. The total entrance fees for the visited locations thus cannot exceed 400. Let eizbe 1 if location i is of type z; otherwise let eizbe 0. This example involves five location types and the sum of all eizfor the locations visited cannot exceed 2, 3, 2, 4, and 3 for location types 1, 2, 3, 4, and 5, respectively.Fig. 1shows a sample solution to this instance. The solution includes one dummy zero since M−1=2–1=1. The Euclidean distance is used and rounded down to the first decimal. Fig. 2visually illustrates the solution represented in Fig. 1.In this example, the first tour visits location 19 followed by locations 11, 15, 4, 8, 2, and 9. Then it is terminated by a zero. Note that, because of time window constraints, locations 15 and 9 are not visited by the first tour.The second tour starts by visiting location 16 which is followed by locations 3, 13, and 6 in the solution. However, location 3 is not visited because of the location type constraint. The tour resumes by visiting location 13 and location 6. It then returns to the depot because adding any location to the tour will make the tour infeasible. More specifically, adding locations 5 or 10 to the current tour violates the location type constraint, adding locations 12, 1, 18, or 17 violates the budget constraint, and adding locations 7 or 14 violates the time window constraint of the depot. Thus, the second tour cannot visit locations 3, 12, 5, 10, 1, 20, 7, 18, 14, and 17. Because the solution representation has determined the locations and sequence of each tour, the objective function value (total score) of a given solution X, denoted by obj(X), can be easily obtained.The proposed SA_RS heuristic is based on the standard SA procedure which uses a random neighborhood structure that includes three types of moves: swap, insertion, and inversion. Denote the set of neighboring solutions of the current solution X as N(X). At each iteration, the algorithm selects a new feasible solution Y from N(X) with one of the moves mentioned above, as follows.The swap move randomly chooses the ith and the jth locations of X and swaps their positions. The insertion move randomly selects the ith location of X and then inserts it into the position immediately before another randomly selected jth location of X. The inversion move randomly selects two locations and then reverses the sequence between them (including the two selected locations). To avoid generating useless moves (i.e., the visited locations has not been changed after the move), one of the selected locations must be a visited location in the current solution. Figs. 3–5show examples of neighborhood solutions generated by applying swap, insertion and inversion move to the solution given in Fig. 1. It should be noted again that the objective function value must be recalculated and any location violating the constraints will not be visited. Therefore, the resulting solution is always feasible.These three types of moves are performed with a probability of 1/3, 1/3, and 1/3, respectively. Note that the tours must be recalculated as illustrated above after a move is performed. Therefore, after a move, a location that is not visited in the current solution may be visited in the new solution, and vice versa. The new solution resulted from a move is always feasible because of the proposed solution representation scheme.The proposed heuristic uses six parameters: Iiter, T0, α, Nnon-improving, Maxnon-improvingT and MaxT. Iiter specifies the number of iterations to be performed at a specific temperature. T0 denotes the initial temperature. α is the control coefficient of the cooling schedule. If the best objective function value has not been improved for Nnon-improving consecutive temperature reductions, the proposed heuristic will restart. Maxnon-improvingT is the maximum elapsed time during which the current best objective function value has not been improved. We set the maximum run time for the proposed heuristic to be MaxT.Initially, the current temperature T is set to T0 and an initial solution X is randomly generated. The objective function value of X is denoted as obj(X). Then the current best solution Xbest are set to be X. Fbest denotes the best objective function value obtained in the current SA run and is initialized as obj(X). FGbest, the best objective function value obtained so far in all SA runs, is set to zero.At each iteration, a neighborhood solution Y in N(X) is selected and its objective function value is assessed. If Y is not worse than X, then it replaces X as the new current solution. Otherwise, Y is accepted as the new current solution with a small probability. This probability is usually calculated by the Boltzmann function. More specifically, let ΔE=obj(Y)−obj(X). Then the probability of replacing X with a worse neighborhood solution Y is calculated as exp(ΔE/T). Tiwari, Kumar, Prakash and Shankar [52] reported that replacing the Boltzmann function commonly used in SA with the Cauchy function gives the SA_RS heuristic more opportunities to escape local optima. Thus this study develops a second version of SA_RS, called SA_RSCF, in which Cauchy function replaces the Boltzmann function in determining the acceptance probability of a worse solution. The first version using Boltzmann function is called SA_RSBF. Using the Cauchy function, the probability of replacing the current solution X with a worse neighborhood solution Y is T/(T2+(ΔE)2). This is implemented by randomly generating a number 0<r<1 and replacing X with Y when r<T/(T2+(ΔE)2).The current temperature T decreases after performing Iiter iterations at the current temperature according to the formula T=αT;0<α<1. Following each temperature reduction, a local search is performed to improve Xbest, the best solution found so far from the current initial solution. The local search procedure first applies all possible swap moves to Xbest. If the best solution obtained from all possible swap moves is better than Xbest, it replaces Xbest. All possible insertion moves are then applied to Xbest. Similarly, the best solution obtained from all possible insertion moves replaces Xbest if it is better. If Xbest is better than XGbest, the best solution found so far during the entire search (i.e. in all SA runs), replace XGbest with Xbest and set FGbest to Fbest.The algorithm restarts if the current best solution Xbest has not improved for Nnon-improving consecutive temperature decreases. Once the algorithm restarts, the current temperature is reset to the initial temperature. A new initial solution is generated randomly to initiate a new SA run.The algorithm is terminated when the computational time used equals MaxT or the elapsed time during which XGbest has not been improved exceeds Maxnon-improvingT. After SA_RS procedure is terminated, the best MC-TOP-MTW solution can be derived from XGbest. Fig. 6shows the flowchart of the proposed SA_RS heuristic using Cauchy function, i.e. SA_RSCF. The flowchart of SA_RSBFcan be obtained by replacing r<T/(T2+(ΔE)2) with r<exp(ΔE/T) in the flowchart of SA_RSCF.The proposed SA_RS heuristic was coded using C language and run on a personal computer with an Intel Core 2 2.5GHz CPU, which is comparable to the computational environment employed by Souffriau, Vansteenwegen, Van den Berghe and Van Oudheusden [1]. The performance of the proposed SA_RS heuristic using the Cauchy function (SA_RSCF) was compared with that using the Boltzmann function (SA_RSBF) and the GRILS heuristic proposed by Souffriau, Vansteenwegen, Van den Berghe and Van Oudheusden [1].Souffriau, Vansteenwegen, Van den Berghe and Van Oudheusden [1] converted the TOPTW instances [10] into 148 MC-TOP-MTW instances which can be downloaded from http://www.mech.kuleuven.be/en/cib/op. The number of tours in these instances ranges from one to four. These instances can be categorized into two sets. The first set of instances is based on Solomon's VRPTW instances [53], while the instances in the second set originate from Cordeau et al.’s instances for periodic and multi-depot vehicle routing problems [54]. Details on the generation of MC-TOP-MTW instances can be seen in Souffriau, Vansteenwegen, Van den Berghe and Van Oudheusden [1]. Notably, because of the way these instances are generated, a high quality MC-TOP-MTW solution is already known for each instance, and can be used to evaluate algorithm performance in problem solving. Additionally, in the computational study, the instances of Cordeau, Gendreau and Laporte [54] have the Euclidean distance rounded to the second decimal, while for other instances, the Euclidean distance is rounded to the first decimal.In order to determine appropriate parameter values, two instances were randomly selected from each of the four problem sets (m=1, 2, 3, 4) for preliminary testing. The following combinations of parameters were tested on the eight test instances: T0=0.2, 0.3, 0.4, 0.5, 1.0, 1.5; α=0.90, 0.93, 0.95, 0.97, 0.99, Nnon-improving=5, 10, 20, 30; MaxT=(N+M−1)×əs, where ə=0.12, 0.18 and 0.24; Maxnon-improvingT=ө×MaxT, where ө=0.25, 0.50 and 0.75; Iiter=(N+M−1)×B, where B=500, 1000, 2000, and N and M are the numbers of locations and tours, respectively. Based on the preliminary testing, the following parameter values appear to optimize performance while preserving reasonable computational time: T0=1.0, B=1000, α=0.90, Nnon-improving=10, ə=0.18, and ө=0.5 for the SA_RSCFand SA_RSBF. Therefore, this study adopted these parameters for all subsequent experiments. In order to verify the effect of restart strategy, SAs without restart strategy, named SACFand SABF, are also implemented and tested by simply setting Nnon-improving to a very large value in SA_RSBFand SA_RSCF, respectively.Tables 2–5compare the scores obtained using the GRILS of Souffriau, Vansteenwegen, Van den Berghe and Van Oudheusden [1], the SABF, SACF, SA_RSBFand SA_RSCFapproaches based on Solomon's instances. In these tables, column one (Name) presents the name of the instance and column two (M) lists the number of tours. Finally, Column three (BKS) gives the best known solution, which is actually the optimal solution obtained by Righini and Salani [55] for M=1 and the solution of Vansteenwegen, Souffriau, Van den Berghe and Van Oudheusden [10] for M>1, respectively. Column four (BKS*) lists the best solution among BKS, the solution of Souffriau, Vansteenwegen, Van den Berghe and Van Oudheusden [1], and the solution of SA_RS. Note that for a fair comparison among the algorithms, SABF, SACF, SA_RSBFand SA_RSCFwere executed only once.Columns five (GRILS) and six list the best score based on ten runs obtained using the GRILS heuristic and the total computational time required for ten runs. Columns seven (SABF) to nine list the score obtained, the computational time, and the time required to obtain the final solution using SABF, respectively. Columns 10 (SACF) to 12 list the score obtained, the computational time, and the time required to obtain the final solution using SACF, respectively. Columns 13 (SA_RFBF) to 15 list the score obtained, the computational time, and the time required to obtain the final solution using SA_RSBF, respectively. Finally, columns 16 (SA_RSCF) to 18 list the score obtained, the computational time, and the time required to obtain the final solution using SA_RSCF, respectively. All computational times are measured in seconds. Bold numbers indicate a new best solution. The final row of the tables calculates the average relative percent deviation (ARPD) of each approach. The relative percentage deviation (RPD) is the gap between the new best-known solution (BKS*) and the obtained solution.Tables 2–5 show that for Solomon's test problems, the ARPDs for GRILS are 0.225%, 1.93%, 4.15% and 5.40%, for SABFare 0.75%, 4.55%, 5.05%, and 4.87%, for SACFare 0.75%, 4.06%, 4.37%, and 4.30%, for SA_RSBFare 0.47%, 3.86%, 3.50%, and 4.17%, and for SA_RSCFare 0.47%, 2.26%, 2.77%, and 3.53%, for m=1, 2, 3 and 4, respectively. This indicates that the quality of the solutions obtained using both the SA_RSBFand the SA_RSCFclosely approach the new best-known solutions. The SA_RSBFand SA_RSCFobtain better results than GRILS does for instances with m=3 or 4, while GRILS performs better for instances with 1 or 2 tours.The overall ARPDs for GRILS, SABF, SACF, SA_RSBFand SA_RSCFare 2.93%, 3.84%, 3.62%, 3.00% and 2.26%, respectively. Thus, for Solomon's test problems, SA_RSCFhas the best performance among the approaches in comparison. Moreover, SA_RSCFobtains the best solutions to 53 out of the 116 problems in the four datasets, including 5 new best solutions. Meanwhile, the SA_RSBFobtains the best solutions to 49 of the 116 problems, including 4 new best solutions. SABFobtains the best solutions to 44 of the 116 problems, including 3 new best solutions. SACFobtains the best solutions to 45 of the 116 problems, including 2 new best solutions. GRILS only obtains the best solutions to 42 of the 116 problems. Notably some of the solutions obtained using the proposed SA_RS heuristic are better than the original high-quality solutions to the TOPTW. Restated, the original high-quality solutions of TOPTW can be further improved using the proposed SA_RS heuristic.Tables 6–9clearly show that for the test problems of Cordeau, Gendreau and Laporte [54], the ARPDs for GRILS are 3.53%, 6.21%, 6.07% and 6.93%, for SABFare 1.72%, 4.16%, 5.34%, and 4.62%, for SACFare 0.75%, 5.45%, 6.42%, and 4.30%, for SA_RSBFare 1.82%, 4.16%, 4.67%, and 4.51%, and for SA_RSCFare 2.44%, 5.32%, 4.75%, and 3.98%, for m=1, 2, 3, and 4, respectively. The quality of the solutions obtained using either SA_RSBFor SA_RSCFis very close to that of the new best-known solutions, and exceeds that of the solutions obtained by GRILS. The overall ARPDs for GRILS, SABF, SACF, SA_RSBFand SA_RSCFare 5.69%, 3.96%, 4.50%, 3.79%, and 4.12%, respectively. All of the SABF, SACF, SA_RSBFand SA_RSCFoutperform GRILS. Furthermore, SA_RSCFobtains the best solutions to eight of the 32 problems in the dataset, including one new best solution. Meanwhile, SABF, SACFand SA_RSBFalso obtain the best solutions to eight of the 32 problems while GRILS only obtains the best solutions to four of the 32 problems. Again, the original high-quality TOPTW solutions can be further improved using the proposed SA_RS heuristic.Table 10compares the performance of the GRILS, SABF, SACF, SA_RSBF, and SA_RSBF. SA_RSCFclearly outperforms GRILS, SABF, SACF, and SA_RSBFbecause the average gaps of the SA_RSCFare the smallest for five of the eight datasets. Table 10 lists the average computational times for the GRILS, SABF, SACF, SA_RSBFand SA_RSCF, and shows that these heuristics use about the same computational time.To verify the effectiveness of the proposed SA_RSCFheuristic, paired t-tests were performed on the RPD to compare the proposed SA_RSCFheuristic with GRILS, SABF, SACF, and SA_RSBF. Table 11lists the results.At confidence level α=0.05, the results listed in Table 11 show that the proposed SACFheuristic significantly outperforms the GRILS, SABF, SACF, and SA_RSBF. These statistical results confirm the superiority of the proposed SA_RSCFheuristic.

@&#CONCLUSIONS@&#
This study proposes a simulated annealing with restart strategy heuristic for MC-TOP-MTW. The proposed algorithm uses a solution representation scheme that is suitable for MC-TOP-MTW. It also features effective control of parameters, a good hybrid of different search strategies, and a balance between computational time and solution quality. Computational study indicates that both SA_RSBFand SA_RSCFproduce high quality MC-TOP-MTW solutions. Furthermore, SA_RSCFoutperforms SA_RSBFfor MC-TOP-MTW. Computational study also indicates that both SA_RSCFand SA_RSBFoutperform GRILS. In general, SA_RSCFis better than SACF, while SA_RSCFis better than SACF.That is, the restart strategy can be used to enhance the performance of SA. GRILS only obtains best solutions to 46 of the 148 problems. On the other hand, SABFobtains the best solutions to 52 of the 148 benchmark instances, including three new best solutions while SACFobtains the best solutions to 53 of the 148 benchmark instances, including two new best solutions. SA_RSBFobtains the best solutions to 57 of the 148 benchmark instances, including four new best solutions. SA_RSCFobtains best solutions to 61 of the 148 benchmark instances. Moreover, SA_RSCFfinds six new best solutions. These new best solutions can be found at http://web.ntust.edu.tw/~vincent/op/.The contribution of this study is four-fold. First, computational study shows that SA_RS is a promising heuristic method to solve MC-TOP-MTW. Second, this study compares two versions of SA_RS with different acceptance probabilities based on Boltzmann function and Cauchy function respectively. It appears that Cauchy function is more suitable for MC-TOP-MTW. Third, computational study shows that restart strategy can enhance the performance of SA. Finally, the new best solutions obtained using the proposed SA_RS heuristic may provide benchmarks for future studies. The proposed heuristic may also be applied to other similar problems. As (T)OP related problems are attracting increasing attention from both academia and industry, practical considerations may lead to more new variants of (T)OP being proposed. Future research thus can also apply or modify the proposed SA_RS heuristic to solve these new variants.