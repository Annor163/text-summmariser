@&#MAIN-TITLE@&#
An optimization approach for constructing trivariate

@&#HIGHLIGHTS@&#
Automatically construct a trivariate tensor-productB-spline solid.The minimal Jacobian of the resulting solid is positive.A volumetric functional is minimized to improve parametrization quality.Deformation, constraint aggregation, and divide-and-conquer techniques combined.

@&#KEYPHRASES@&#
Trivariate,B,-spline solid,Jacobian,Divide-and-conquer,Constraint aggregation,Hierarchical optimization,

@&#ABSTRACT@&#
In this paper, we present an approach that automatically constructs a trivariate tensor-productB-spline solid via a gradient-based optimization approach. Given six boundaryB-spline surfaces for a solid, this approach finds the internal control points so that the resulting trivariateB-spline solid is valid in the sense the minimal Jacobian of the solid is positive. It further minimizes a volumetric functional to improve resulting parametrization quality.For a trivariateB-spline solid even with moderate shape complexity, direct optimization of the Jacobian of theB-spline solid is computationally prohibitive since it would involve thousands of design variables and hundreds of thousands of constraints. We developed several techniques to address this challenge. First, we develop initialization methods that can rapidly generate initial parametrization that are valid or near-valid. We then use a divide-and-conquer approach to partition the large optimization problem into a set of separable sub-problems. For each sub-problem, we group theB-spline coefficients of the Jacobian determinant into different blocks and make one constraint for each block of coefficients. This is achieved by taking an aggregate function, the Kreisselmeier–Steinhauser function value of the elements in each block. With block aggregation, it reduces the dimension of the problem dramatically. In order to further reduce the computing time at each iteration, a hierarchical optimization approach is used where the input boundary surfaces are coarsened to difference levels. We optimize the distribution of internal control points for the coarse representation first, then use the result as initial parametrization for optimization at the next level. The resulting parametrization can then be further optimized to improve the mesh quality.Optimized trivariate parametrization from various boundary surfaces and the corresponding parametrization metric are given to illustrate the effectiveness of the approach.

@&#INTRODUCTION@&#
Isogeometric analysis is a numerical analysis technique where CAD basis functions are used to represent both geometry and the approximate physical field  [1]. It has emerged as an important numerical analysis technique and offers the potential to bridge CAD and finite element analysis. A prerequisite in isogeometric analysis is the availability of CAD basis based volumetric parametrization of the physical domain since a geometric representation in CAD systems provides only boundary definitions. Towards this end, this paper provides an approach that can automatically construct a trivariateB-spline solid from a given set of six boundary surfaces or from a boundary triangulation. A trivariateB-spline solid establishes a mapping that maps a cubic parametric domain to a 3D physical domain. A mapping that is useful for many practical applications such as finite element or isogeometric analysis is one that does not involve self-intersection or folding. One way to ensure that the mapping is free from self-intersection is to ensure that the Jacobian of the mapping does not change sign. In this paper, we find the internal control points to maximize the minimal Jacobian of theB-spline solid. When the minimal Jacobian is positive, the mapping is free from self-intersection. This approach further minimizes a volumetric functional to improve resulting parametrization quality.Fig. 1gives an example of constructing aB-spline solid from a boundary triangulation. Fig. 1(a) shows the input triangles and Fig. 1(b) shows the reconstructed 6 compatibleB-spline surfaces. Fig. 1(c), (d), and (e) are respectively the initial constructedB-spline solids, the optimized validB-spline solid, and the solid with improved parametrization. The colour represents the Jacobians. Bézier patches with negative Bézier coefficients ofdetJare shown in shaded colours and the control points that affect them are shown in blue points. It can be seen that the Bézier patches on the neck intersect each other. In Fig. 1(d) the mesh is valid. The Bezier patches in Fig. 1(d) now have all positive Bézier coefficients ofdetJexcept the zero coefficients on the boundary edges. It can be seen that the elements on the neck no longer intersect each other (see the boxed area in Fig. 1(c) and (d)). After mesh quality improvement, in Fig. 1(e) the mesh becomes much smoother than that in Fig. 1(d) (see the circled areas in Fig. 1(d) and (e)).Our basic approach is as follows. From the boundary triangulations we reconstruct simultaneously six valid and compatible boundaryB-spline surfaces with optionalG1smoothness across the boundary curves and corners. From the boundaryB-spline surfaces, we use deformation techniques to create an initialB-spline solid that is valid or near-valid. We then maximize the minimalB-spline coefficient ofdetJuntil a validB-spline solid is obtained. This is possible since the Jacobian of aB-spline solid is a high order trivariateB-spline. The minimal Jacobian is thus bounded by the minimalB-spline coefficient ofdetJ.For a trivariateB-spline solid even with moderate shape complexity, direct optimization of the Jacobian of theB-spline solid is computationally prohibitive since it would involve thousands of design variables and hundreds of thousands of constraints. We have thus developed several techniques to address this challenge. We use a divide-and-conquer approach to partition the large optimization problem into a set of separable sub-problems. For each sub-problem, we group theB-spline coefficients ofdetJinto different blocks and make one constraint for each block of coefficients. This is achieved by taking an aggregate function, the Kreisselmeier–Steinhauser function value of the elements in each block. With block aggregation, the dimension of the problem reduces dramatically. In order to further reduce the computing time at each iteration, a hierarchical optimization approach is used where the input boundary surfaces are coarsened to difference levels. We optimize the distribution of internal control points for the coarse representation first, then use the result as initial parametrization for optimization at the next level. At last, we further improve the mesh quality by minimizing a volumetric functional and several parametrization metrics are used to evaluate the mesh quality.Our approach extends earlier work in 2D parametrization where minimal Jacobians ofB-spline surfaces are maximized  [2,3]. Optimization approaches to 3D parametrization have been attempted. In  [4], a variational approach for generating NURBS parametrization of swept volumes is presented. In  [5] an optimization based approach for generating trivariateB-spline solids is also presented. However, as shown in this paper, direct optimization is only applicable to small scale problems. Other approaches to volumetric parametrization for isogeometric analysis have also been developed. In  [6], a tetrahedral mesh was parametrized based on discrete volumetric harmonic functions and then fitted to a single skeleton based trivariateB-spline solid. Instead of having six exterior surfaces, it only has one exterior surface with singularities on the inner skeleton axis. In  [7], a method of converting an unstructured quadrilateral and hexahedral mesh to a rationalT-spline was proposed. Based on the method in  [7], in  [8], solidT-splines were constructed from the triangular boundary representations for genus-zero geometry. Further, in  [9], a method of constructing solidT-splines from boundary triangulations with arbitrary genus topology is given.Thus far few of the above approaches have addressed the quality of the parametrization. Even though isogeometric analysis is shown to be robust even under severe mesh distortion  [10], the statistics in  [11] suggests that the mesh quality influences the accuracy and convergence of the analysis solutions. In this paper, besides the Jacobian, we evaluate the resulting mesh metrics such as orthogonality, Oddy metric and condition number.A trivariateB-spline solid can be defined asT(u,v,w)=∑i=0m∑j=0n∑k=0lNi,p(u)Nj,q(v)Nk,r(w)Pi,j,k,wherePi,j,k,i=0,1,…,m,j=0,1,…,n,k=0,1,…,lare control points in theu,vandwdirections andNi,p(u),Nj,q(v),Nk,r(w)areB-splines of degreepin theu, degreeqin thevand degreerin thewdirections. AB-spline solid can be decomposed to Bézier volumes. A trivariate Bézier volume can be defined asTB(u,v,w)=∑i=0p∑j=0q∑k=0rBi,p(u)Bj,q(v)Bk,r(w)Pi,j,k,wherePi,j,kare control points andBi,p(u),Bi,q(v),Bi,r(w)are respectively degreep,q,rBernstein basis polynomials.Definition 1A point(x1,x2,…,xn)Tis singular ifrank(J(x1,x2,…,xn))<n.At a singular point, finite length, area and volume is mapped to zero length, area and volume.Let us focus onR3→R3mapping,u=(u,v,w)T→T=(x,y,z)T.Lemma 1Assume pointu0=(u0,v0,w0)Tis singular, which meansrank(J)<3anddetJ=0. IfdetJhas the same sign in the neighbourhood of(u0,v0,w0)T, then it is singular but not self-intersecting; ifdetJchanges its sign across point(u0,v0,w0)T, the neighbourhood around this point has self-intersection   [12,13].In this paper, for brevity, we abbreviate the determinant of the Jacobian matrix as the Jacobian. According to Lemma 1, a solid mesh has singular points if it has a zero Jacobian and has a self-intersection area if it has both positive and negative Jacobians. By properly determining theu,v,wdirections, we could have that, for a valid solid, we have all positive Jacobians and for a self-intersecting solid, we have both positive and negative Jacobians. An all positive Jacobian meansmin(detJ)>0. One method to achieve an all positive Jacobian is to maximize the minimum Jacobian until it becomes positive. However, in general it is difficult to obtainmin(detJ). In this paper, we focus on theB-spline solid and we expressdetJof aB-spline solid in the form of a higher order trivariateB-spline. We can thus obtain the bound ofmin(detJ)from theB-spline coefficients ofdetJ. Via maximizing the minimumB-spline coefficient ofdetJ, we can obtain aB-spline solid with an all positive Jacobian.The partial derivatives of aB-spline solidT(u,v,w)are:∂T∂u=∑i=0m−1∑j=0n∑k=0lNi,p−1(u)Nj,q(v)Nk,r(w)αiΔPijk,u∂T∂v=∑i=0m∑j=0n−1∑k=0lNi,p(u)Nj,q−1(v)Nk,r(w)βjΔPijk,v∂T∂w=∑i=0m∑j=0n∑k=0l−1Ni,p(u)Nj,q(v)Nk,r−1(w)γkΔPijk,wwhereΔPijk,u=Pi+1,j,k−Pi,j,k,ΔPijk,v=Pi,j+1,k−Pi,j,k,ΔPijk,w=Pi,j,k+1−Pi,j,k;αi=pui+p+1−ui+1,βj=qvj+q+1−vj+1,γk=rwk+r+1−wk+1;ui+1,vj+1,wk+1are the values of the knot in the knot vectors. The determinant of the Jacobian matrix is(1)detJ(u,v,w)=det[Tu,Tv,Tw]=∑i1=0m−1∑j1=0n∑k1=0l∑i2=0m∑j2=0n−1∑k2=0l∑i3=0m∑j3=0n∑k3=0l−1Ni1,p−1(u)Ni2,p(u)Ni3,p(u)Nj1,q(v)Nj2,q−1(v)Nj3,q(v)Nk1,r(w)Nk2,r(w)Nk3,r−1(w)pqrαi1βj2γk3det[ΔPi1j1k1,uΔPi2j2k2,vΔPi3j3k3,w].The product ofB-splines is a higher orderB-spline  [14]. Therefore (1) becomes(2)detJ(u,v,w)=∑s1=0mJ∑s2=0nJ∑s3=0lJNs1,3p−1(u)Ns2,3q−1(v)Ns3,3r−1(w)Js1,s2,s3whereJs1,s2,s3is the coefficient of the higher order Jacobian trivariateB-spline. The degrees corresponding to theu,v,wparameters are3p−1,3q−1,3r−1andmJ=(m−p)(2p+1)+3p−1,nJ=(n−q)(2q+1)+3q−1,lJ=(l−r)(2r+1)+3r−1which are the number of coefficients in theu,v,wdirections.Lemma 2The Jacobian of aB-spline solid is itself a higher order trivariateB-spline.Lemma 3The coefficientsJs1,s2,s3bound the higher order Jacobian trivariateB-splinedetJ(u,v,w), thus a sufficient condition for theB-spline solidTto be valid is that the minimalB-spline coefficient ofdetJ(u,v,w)is positive.Fig. 2compares an invalidB-spline solid and validB-spline solid with the same set of boundary surfaces. In Fig. 2(a),mindetJ(u,v,w)=−2.0344, and the minimumB-spline coefficient ofdetJisminJs1,s2,s3=−4.7286, which boundsdetJ(u,v,w). It has mesh folding around the boundaries. By adjusting positions of the internal control points, it becomes a validB-spline solid, as shown in Fig. 2(b) where the minimalB-spline coefficient ofdetJisminJs1,s2,s3=1.4.To ensure a validB-spline solid, we need that the minimal ofJs1,s2,s3,s1=0,…,mJ;s2=0,…,nJ;s3=0,…,lJis positive. Since this is a sufficient but not necessary condition, it is thus desirable to reduce the Jacobian bound  [2]. Since Bézier patches have a tighter convex hull than that of theB-spline solid, we can conduct knot insertions in the internal knots of theU,V,Wknot vectors forp−1,q−1,andr−1times respectively to extract the Bézier patches from theB-spline solid. Then, we calculate the Bézier coefficients ofdetJfor each Bézier patch. If they are all larger than zero, then the solid is valid. Otherwise, we maximize the minimal Bézier coefficient ofdetJto obtain a valid solid. By taking advantage of the properties of Bernstein Bézier polynomials, we have the Jacobian of the Bézier solid asdetJ(u,v,w)=∑s1=03p−1∑s2=03q−1∑s3=03r−1Bs1,3p−1(u)Bs2,3q−1(v)Bs3,3r−1(w)Js1,s2,s3,(3)Js1,s2,s3=∑i1+i2+i3=s1i1∈[0,p−1]i2∈[0,p]i3∈[0,p]∑j1+j2+j3=s2j1∈[0,q]j2∈[0,q−1]j3∈[0,q]∑k1+k2+k3=s3k1∈[0,r]k2∈[0,r]k3∈[0,r−1](p−1i1)(pi2)(pi3)(qj1)(q−1j2)(qj3)(rk1)(rk2)(r−1k3)(3p−1i1+i2+i3)(3q−1j1+j2+j3)(3r−1k1+k2+k3)pqrdet[ΔPi1j1k1,uΔPi2j2k2,vΔPi3j3k3,w].After each Bézier patch’s Jacobians are computed into a Bézier form (3), they will then be recomposed into a C0 smoothB-spline form to avoid redundant constraints in optimization. Assume that there areneuBézier segments in theudirection andnevin thevdirection andnewin thewdirection for the originalB-spline solid of degreep,q,r. After the recomposing, we would have the Jacobian of aB-spline solid of degree3p−1,3q−1,3r−1in each direction and with a total of(neu(3p−1)+1)×(nev(3q−1)+1)×(new(3r−1)+1)number of coefficients.The inputs for the optimization are six boundaryB-spline surfaces, based on which we first create an initialB-spline solid and then maximize the minimalB-spline coefficient ofdetJto obtain a validB-spline solid. Mathematically this can be noted as(4)maxXj,Yj,ZjminiJi,i=1,…,MwhereJi,i=1,…,Mare theB-spline coefficients ofdetJandXj,Yj,Zj,j=1,…,Nare the coordinates of the internal control points.Nis the number of the internal control points of theB-spline solid. Eq. (4) itself is not differentiable. We thus introduce an auxiliary design variableβto transform the formulation of the unconstrained problem into a constrained optimization (5) as follows.(5)minβ,Xj,Yj,Zj−βs.t.β−Ji≤0,i=1,…,MXj∈[Xmin,Xmax],Yj∈[Ymin,Ymax],Zj∈[Zmin,Zmax],j=1,…,N.For simplicity,Xmin,Xmax,Ymin,Ymax,Zmin,Zmaxare set as the bounding box of the control net of the boundaryB-spline surfaces. In this formulation, we use all the internal control points of theB-spline solid as the design variables and all theB-spline coefficients ofdetJas constrains. Since the internal control points have no influence over theB-spline coefficients at the edges and corners, which are only affected by the input boundaryB-spline surfaces, so in our implementation, we exclude all the coefficients at the edges and corners from the constraint list.Direct maximization of the minimal Jacobian as shown in (5) is both time consuming and memory inefficient. For a degreep×q×rB-spline solid with(m+1)×(n+1)×(l+1)control points, the number of design variables isN=3(m−1)(n−1)(l−1)+1. The number of Jacobian constraints isM=(neu(3p−1)+1)×(nev(3q−1)+1)×(new(3r−1)+1), whereneu=(m−p+1),nev=(n−q+1),new=(l−r+1). We could see that bothNandMincrease linearly with the number of control points. So the size of the sensitivity matrix (measuring the sensitivity of Jacobian constraints with respect to control point change) increases quadratically with the model size. If the number of control points are20×20×20=8000and the degrees arep=q=r=3, the sensitivity matrix will beN×M=17497×2571353, about 45G entries. This analysis suggests that, although the formulation shown in (5) has been successfully used in bivariateB-spline parametrization  [2,3], its direct application in trivariateB-spline parametrization is computationally untractable. That is, direct optimization with all the internal control points as design variables andB-spline coefficients ofdetJas constraints can only be used for small size models, for example, with less than 1000 control points. Next, we present four computational techniques to make the formulation applicable to practical 3D problems.Four techniques have been developed to tackle the challenge. Firstly, several initialization methods for rapidly generating near-valid initialB-spline solids are proposed. After some comparisons, the method of deformation governed by the elastic equilibrium equation gives better initial solids. With good initialization, we thus have aB-spline solid with a very small number of invalid Bézier patches that are scattered in the solid instead of having a larger number of invalid patches throughout the whole solid. Thus, a divide-and-conquer method is then applied to optimize the isolated groups of invalid Bézier patches separately, which significantly reduces the problem size. Constraint aggregation can further reduce the size of the optimization problem by reducing the total number of constraints. Hierarchical optimization uses a good coarse solid as the initial model for the fine solid optimization. Thus, the computing time at the fine level is reduced at the cost of solving an additional coarse and small optimization problem.Fig. 3overviews our optimization approach. The inputs are sixB-spline boundary surfacesSi1,i=1,2,…,6, the superscript means theB-spline refinement level and the subscript means the surface number. Firstly, we build the multilevel models by coarsening the fine boundary surfacesS1to coarse boundary setsSα,α=1,…,H, which are the inputs for hierarchical optimization. Secondly, an initialB-spline solidTHis created from the coarsestB-spline boundarySH. Thirdly, we optimizeTαto make it valid. Fourthly, judge ifα=1; if not, refineTαand use its internal control points as the initial parametrization forTα−1, letα=α−1and go to step 2; if yes, end this process. When hierarchical optimization is desired,His usually 2 or 3. Otherwise,H=1corresponding to single level optimization.We maximize the minimalB-spline coefficient ofdetJuntil it is positive. For brevity, when a Bézier patch has a negative Bézier coefficient ofdetJin (3), we refer to the patch as an invalid Bézier patch. Our optimization approach obtains a validB-spline solid by changing all the invalid Bézier patches into valid ones.A good initialization method is critical for reducing the number of iterations in gradient-based optimization. A good initialization method also creates aB-spline solid with fewer isolated invalid Bézier patches that can be subsequently handled in a divide-and-conquer manner. The inputs for initialization are six valid and compatibleB-spline boundary surfaces,S1H(u,v),S2H(u,v),S3H(u,w),S4H(u,w),S5H(v,w),S6H(v,w). We have the superscriptHbecause initialization is only needed at the coarsest level in the hierarchical optimization. In the later sections we omitHfor brevity. The output is the initialB-spline solid with the internal control points created from the boundary surfaces. In this paper, we study and compare two sets of initialization methods: Coons patch based and deformation based methods.Coons patch interpolation: The first method forB-spline solid initialization is through Coons patch interpolation. A Coons patch[15,16] interpolates six boundary surfaces, twelve boundary edges and eight corners. Letψ0u=1−u,ψ0v=1−v,ψ0w=1−w,ψ1u=u,ψ1v=v,ψ1w=w. Then the Coons volume is defined as follows(6)Tc(u,v,w)=ψ0wS1(u,v)+ψ1wS2(u,v)+ψ0vS3(u,w)+ψ1vS4(u,w)+ψ0uS5(v,w)+ψ1uS6(v,w)−[ψ0vψ0wS1(u,0)+ψ1vψ0wS1(u,1)+ψ0vψ1wS2(u,0)+ψ1vψ1wS2(u,1)+ψ0uψ0wS1(0,v)+ψ1uψ0wS1(1,v)+ψ0uψ1wS2(0,v)+ψ1uψ1wS2(1,v)+ψ0uψ0vS3(0,w)+ψ1uψ0vS3(1,w)+ψ0uψ1vS4(0,w)+ψ1uψ1vS4(1,w)]+[ψ1uψ0vψ0wS1(1,0)+ψ0uψ0vψ0wS1(0,0)+ψ0uψ1vψ0wS1(0,1)+ψ1uψ1vψ0wS1(1,1)+ψ1uψ1vψ1wS2(1,1)+ψ0uψ0vψ1wS2(0,0)+ψ1uψ0vψ1wS2(1,0)+ψ0uψ1vψ1wS2(0,1)].The Coons volume interpolating 6 surfaces is then used to generate the initial internal control points of theB-spline solid. In this case, we uniformly distribute the parametersu,v,wand evaluate (6) to obtain a set of inner points of the Coon’s volumeTc(im,jn,kl),i=1,2,…,m−1,j=1,2,…,n−1,k=1,2,…,l−1, then we use these points as the internal control points of theB-spline solid.Deformation method. The second type of initialization method is through deformation. We deform a cuboid discretized with hexahedral grids to the given shape with the boundary nodes of the cuboid in six sides deformed to the corresponding control points of the six surfaces. The resulting internal grid points of the cuboid thus become the initial internal control points of theB-spline solid. We solve this deformation through the finite element or finite difference method.In Fig. 4, a cuboid is deformed to the duck shape. The initial size of the cuboid in theudirection is the average distance between the control net of the two oppositeB-spline surfaces inudirection. The same holds for the initial size of the cuboid invandwdirections. The node indexed by(0,0,0)of the cuboid is set as the same position as the control point indexed by(0,0,0)of theB-spline solid. The grid points for the cuboid are noted asui,j,k1,i=0,…,m,j=0,…,n,k=0,…,l, which is a hexahedral grid with uniformly sized elements.ui,j,k1are the coordinates of node(i,j,k). After being deformed to the duck shape, the grid coordinates areui,j,k2. Superscript 1 means un-deformed and 2 means deformed grid points. The coordinates of the boundary nodes of the deformed cuboid are set as control points of the 6 boundary surfaces.In the deformation, we only apply loads on the boundary nodes (nodes on six exterior faces). There are no loads on the internal nodes. The loadsfon the boundary are unknown and the displacements on the boundary are given as(7)ui,j,kδ=ui,j,k2−ui,j,k1,i=0,m,j=0,n,k=0,l,whereui,j,kδis the nodal displacement on node(i,j,k). Thus we can easily solve the displacement field of the cuboid by FEM or the finite difference method.The deformed grids of the cuboid are then used as the control net of theB-spline solid. The exterior nodes correspond to the exterior control points and the internal nodes correspond to the internal control points. After the deformation, we can obtain the internal control points of theB-spline solid from the displacements of the internal grids nodes of the cuboid, namelyui,j,k2=ui,j,k1+ui,j,kδ,i=1,…,m−1,j=1,…,n−1,k=1,…,l−1.The deformation can be computed as follows.(i)Equilibrium equations of linear elasticity(8)(λ+μ)∇∇⋅uδ+μΔuδ+f=0,whereuδis the displacement field,λandμare lame and shear modulus, determined by Poisson ratio, which is usually set as 0.3. If the model has large concave areas, one can try larger Poisson ratios like 0.4, but it should be smaller than 0.5.fis unknown in the boundary, and 0 in the interior. (8) is solved by FEM.Poisson equations(9)Δuδ+f=0fis unknown in the boundary, and 0 in the interior. (9) is solved by FEM.Discrete form of Laplace equations(10)ui,j,kδ=16(ui−1,j,kδ+ui+1,j,kδ+ui,j−1,kδ+ui,j+1,kδ+ui,j,k−1δ+ui,j,k+1δ)i=1,…,m−1;j=1,…,n−1;k=1,…,l−1ui,j,kδis the displacement of node(i,j,k), (10) is derived by finite difference and can be solved directly since it is just a linear system.One main benefit of having a good initialization method is that the resultingB-spline solid is near valid, i.e. most of the Bézier patches are valid and the invalid Bézier patches are scattered and may be separable. The divide-and-conquer approach exploits the separability of invalid Bézier patches to reduce the original large optimization problem into a set of separable small sub-problems. That is, instead of optimizing the wholeB-spline solid, isolated groups of invalid Bézier patches are optimized separately.In Fig. 5, there are three isolated groups of invalid Bézier patches, noted asΩs,s=1,2,3. Since they are isolated from each other we can optimize them separately. In the optimization ofΩs, the optimization variables are the internal control points that affectΩs, the constraints are theB-spline coefficients ofdetJthat are affected by those internal control points. Next, we define what are the separable Bézier groups.Definition 2Let two groups of Bézier patches beΩs1andΩs2. TheB-spline control point sets that affectΩs1andΩs2are noted asΘs1andΘs2. IffΘs1∩Θs2=0̸,Ωs1andΩs2are separable from each other.Separable groups can be optimized independently while non-separable groups must be optimized simultaneously since moving any control point of one group will have an influence over the other. The criterion for two groups to be separable is given in Lemma 4.Lemma 4AB-spline solidTis decomposed into Bézier patchesTBi,j,k,i=0,…,m−p,j=0,…,n−q,k=0,…,l−r.(i,j,k)are the indexes of the Bézier patch in theu,v,wdirections. For two Bézier patchesTBi1,j1,k1andTBi2,j2,k2, if(11)|i1−i2|≤p,|j1−j2|≤q,and|k1−k2|≤rthen there exist such control points that affect bothTBi1,j1,k1andTBi2,j2,k2, thusTBi1,j1,k1andTBi2,j2,k2are not separable from each other. Otherwise if(12)|i1−i2|>por|j1−j2|>qor|k1−k2|>rTBi1,j1,k1andTBi2,j2,k2are separable from each other. For two groupsΩs1andΩs2to be separable, all the Bézier patches inΩs1must be separable from the ones inΩs2.Based on Lemma 4, we group those invalid Bézier patches into different separable groups. Then we can optimize these groups one by one as in (5), yet the problem dimension for each group is now substantially smaller than the entireB-spline solid due to far fewerB-spline control points being involved in each sub-problem.As shown in Section  3.1, direct optimization faces challenges of handling a large number of constraints. Even with a divide-and-conquer strategy, sometimes we still have a considerable number of constraints. We thus propose to use constraint aggregation [17,18] to effectively reduce the number of constraints. A single Bézier solid hasM=27pqrBézier coefficients ofdetJ. If the degreesp,q,r=2, then we haveM=216, if the degreesp,q,r=3,M=729. So even with relatively good initialB-spline solid and a small number of invalid Bézier patches, we still have thousands of Jacobian constraints. Using the constraint aggregation strategy, we can reduce the number of constrains to tens or hundreds which would help reduce the running time in optimization. A simple constraint aggregation can be achieved through a Kreisselmeier–Steinhauser (KS) function(13)G=−1Pln[∑iexp(−PJi)].As the penalty parameterP→∞,G→min(Ji),i=1,…,M.Jiare theB-spline coefficients ofdetJ.However, grouping too many constraints into one K–S function can lead to a large discrepancy betweenGandmin(Ji)which leads to poor convergence in optimization. Thus, we replace this simple aggregation with block aggregation. That is,(14)Gk=−1Pln[∑i∈Ikexp(−PJi)],k=1,2,…,LIkis thekth block of theB-spline coefficients ofdetJ,Gkis the value of the K–S function of blockIk,Lis the number of blocks.MLis the block size, namely the number of elements in one block. We divide theB-spline coefficients ofdetJinto multiple blocks and calculate the K–S function valueGkfor each blockk, which corresponds to one constraint. In the optimization, we useGk,k=1,…,Lto substituteJi,i=1,…,Mto reduce the number of constraints. The new optimization formulation is as belowminXj,Yj,Zj,β−βs.t.β−Gk≤0,k=1,…,L.Based on our numerical experiments, we have chosen the following block aggregation strategy: as shown in Fig. 6, theB-spline coefficients ofdetJare first ordered according to their numerical values, from small to large. They are then aggregated into blocks so that there is a separation amongB-spline coefficients in each block. Such a separation in numerical values ofB-spline coefficients, especially the minimal coefficient is separated from the other coefficients, is numerically shown to be effective for maximizing the minimal coefficient. Such a separation in numerical values ofB-spline coefficients makes the K–S function an effective substitute for the minimal Jacobian since the difference betweenGkandmini∈IkJiis small and the resulting sensitivity matrix is well-conditioned, and good convergence in the optimization can be achieved. The specific parameters include (1) adaptively setting the parameterP∈[5,25]. and (2) choosing the number of entries in each block to beML∈[300,1000].A further technique developed for efficient optimization in this paper is through hierarchical optimization. The hierarchical optimization is useful when initialization fails to produce a near-validB-spline solid. We optimize the coarse mesh first, then refine the coarse mesh and use the internal control points of the coarse mesh as the initial model for fine model optimization. Using this strategy, we can obtain good initial control points in the fine level optimization and can reduce the optimization time at the fine scale. Reducing the problem scale in the fine optimization level at the cost of an additional coarse optimization can be very profitable since the coarse optimization usually involves a much smaller problem.As the inputs of the hierarchical optimization, multilevel models are obtained by coarsening the fine boundary surfacesS1to coarse boundary setsSα,α=1,…,Has shown in Fig. 3. AssumeSi1=Ni1Pi,i=1,…,6, the fineB-spline boundary surfaces,Siα=NiαQi,i=1,…,6, the coarseB-spline boundary surfaces inαth level, then the deviation from coarse boundary to fine boundary is(15)Δα=∑i=16∬‖NiαQi−NiαPi‖2dudv.We can obtain the coarse boundary by minimizing (15), in this case just a set of linear equations needs to be solved. At each level of theB-spline solidTαin the hierarchical optimization as shown in Fig. 3, both divide-and-conquer and constraint aggregation strategies are used.By applying the above optimization approach, we can efficiently obtain a validB-spline solid. In this paper, we also demonstrate how the overall mesh quality can be further improved via minimizing a volumetric functional.We evaluate the mesh quality with the following metrics.(i)Jacobian metricdet(J), indicate that if the mesh is valid.det(J)≥0is always required.Condition number metricfcond=‖J‖F⋅‖J−1‖F=‖J‖F2|det(J)|, indicate if the Jacobian matrix at a given point is ill-conditioned. The subscriptFmeans the Frobenius norm. For an equilateral and orthogonal element,fcond=3. In other casesfcond≥3. The smallerfcondis, the more equilateral and orthogonal the element would be.Oddy metric  [19]fOddy=det(J)−34{‖JTJ‖F2−13‖J‖F4}, it is based on an analogy between mesh distortions and mechanical strains. For an equilateral and orthogonal element,fOddy=0, in other casesfOddy>0. The largerfOddyis, the bigger the distortion would be.Orthogonal metricf⊥=(1−|Tu‖Tu‖2⋅Tv‖Tv‖2|)×(1−|Tu‖Tu‖2⋅Tw‖Tw‖2|)×(1−|Tv‖Tv‖2⋅Tw‖Tw‖2|),f⊥∈[0,1]. For the orthogonal elements,f⊥=1. For the elements with 0° or 180° angle,f⊥=0. The largerf⊥is, the more orthogonal the mesh would be.Given a validB-spline solid, we minimize the following functional to improve mesh quality(16)minXj,Yj,Zjλ1Estretching+λ2Ebendings.t.−Ji≤0,i=1,…,Mwhere optimization variablesXj,Yj,Zjare internal control points of theB-spline solid. MinimizingEstretching=∭(Tu2+Tv2+Tw2)dudvdwtends to make the iso-curves short and generates orthogonal elements  [20], and minimizingEbending=∭(Tuu2+Tvv2+Tww2+2Tuv2+2Tvw2+2Twu2)dudvdwtends to make the iso-curves parallel to each other and generates uniformly sized elements[21,5]. Sometimes the orthogonality and uniformity are contradictory. If we want an orthogonal mesh and short iso-curves, then choose largerλ1; if we want uniformly sized elements, then choose largerλ2. Usually, largerλ2will give very good statistics in the condition number metric and Oddy metric. Since (16) is a global volumetric functional, the solution thus would lead to improved mesh quality in an average sense.The inputs for the optimization is six compatibleB-spline boundary surfaces, based on which theB-spline solid initialization, mesh rectification and quality improvement are conducted. We can obtainB-spline boundary surfaces directly from CAD systems, or from free-form sweeping  [22], or from boundary triangulations. We briefly describe below how we fitB-spline boundary surfaces from the boundary triangulations.As shown in Fig. 7, the input is a closed boundary triangulation. We partition the boundary triangulations into six areas, each area corresponding to one face of the hexahedral solid. Then, by applying the harmonic parametrization method  [8], the boundary triangulations are parametrized in the sense that each vertex has unique parametersu,v,w. Based on the parametrization, six compatible and validB-spline boundary surfaces with optionalG1smoothness constraint (18) are reconstructed by (17) as follows.(17)minX,Y,Z∑i=16[λ1iEis_error+λ2iEistretching+λ3iEibending](18)s.t.C1X=0,C2Y=0,C3Z=0X,Y,Zare the vectors of the coordinates of the surface control points.Eis_erroris the deviation from the fittedB-spline surface to the boundary triangulations, calculated by the method in  [23].Eistretching=∫01∫01(Si,u2+Si,v2)dudv,Eibending=∫01∫01(Si,uu2+2Si,uv2+Si,vv2)dudv. A largerλ1iwill reduce the fitting error and largerλ2iandλ3iwill make the surface smoother and suppress mesh folding. (18) represents simplifiedG1linear constraints  [24] that ensureG1continuity across both the shared edges and corners.We demonstrate below the effect of our optimization approach on four sets of data as shown in Fig. 8. The inputs are boundary triangles. We reconstruct six boundaryB-spline surfaces for each of the models, whereG1constraints are imposed for the first three models (whereG1edges are shown in red). We then obtain theB-spline solid models from the initialization methods. Table 1compares the statistics of the resultingB-spline solids. Through optimization, we obtain validB-spline solids with relatively good mesh quality. In this paper, all optimization is done by Matlab’s fmincon with the active-set option. Before optimization, the Jacobians are scaled to make the absolute value of the minimal Jacobian to be within[1,10]. We first multiply each Jacobian byα=γ−min(Ji)withγ∈[1,10]. If the magnitude of the minimal Jacobian is scaled to be too small, there would not be enough separation from the other Jacobians and there would be large errors betweenGkandmini∈IkJi. If the magnitude of the minimal Jacobian is scaled to be too big, the sensitivity matrix involving the K–S function would be ill-conditioned. In all examples, we choseγ=6. All reported Jacobians are scaled back to true values.In Fig. 9we compare the resultingB-spline solids from the four initialization methods on the duck model. The deep coloured shaded patches in this figure are the invalid Bézier patches. It can be seen that deformation through elasticity leads to the fewest number of invalid Bézier patches. It also involves the least optimization time for obtaining a valid duck solid with positive minimalB-spline coefficient ofdetJ. In Table 2we compare the number of invalid Bézier patches for the four models (duck, femur bone, human head and tooth) from four initialization methods. It is clear from Table 2 that deformation through elasticity leads to the fewest invalid Bézier patches for all four models. Since the number of optimization variables and the number of Jacobian constraints both increase linearly with the number of invalid Bézier patches, the optimization time increases quadratically with the number of invalid Bézier patches. Thus in the remainder of this paper, we use the deformation through elasticity to generate the initialB-spline solid.Figs. 1, 10, 11and 12show the process of obtaining a valid solid with its minimal Jacobian maximized until it is positive. They start with respectively 6 inputB-spline surfaces, then through elasticity based deformation, initialB-spline solids are obtained where invalid Bézier patches are shown in deep shaded colour. Upon optimization, all Bézier patches become valid, i.e. with positive minimal Bézier coefficients ofdetJ. Figs. 11 and 12 show the hierarchical optimization process where the optimization at a coarse model can be used to reduce significantly the number of invalid Bézier patches in the fine model. Table 4 further compares the effects of various techniques on optimization time where technique O stands for direct optimization without any technique, technique D stands for the Divide-and-conquer technique, technique C stands for the Constraint aggregation technique, and technique H stands for Hierarchical optimization. The symbol ‘/’ means that the process is too long to count the time. As the table shows, with the elasticity based deformation as the initialization method, the divide-and-conquer approach is most effective. Combining the divide-and-conquer technique with the constraint aggregation technique can lead to even faster convergence. In all these cases, it usually only takes 1 or 2 iterations to find a valid model, i.e. the minimal Jacobian becoming positive. Hierarchical optimization becomes helpful when the model from the initialization does not lead to many separable invalid Béizer groups, and the coarse model and fine model are similar as in the head and tooth examples. It should be pointed out, in all examples, without using the above developed optimization technique, the process would either fail to find a validB-spline solid or the process would be too long for it to be practically useful. Table 3gives an example in the reduction of problem size for the duck model. As show in Figs. 1(c) and 5, with the initialization, the duck model is divided into three separable invalid Bézier patch groups. Table 3 compares the number of optimization variables (number of internal control points), number of Jacobian constraints, and the number of constraints with constraint aggregation before and after the application of our optimization techniques. For the invalid Bézier patch group on the duck neck, before constraint aggregation we need 4.0 s for one iteration in the optimization, after constraint aggregation we need 1.7 s for one iteration.With the above validB-spline solids, we further minimize the functional (16) on the four models with the goal of improving mesh quality. Due to the space limitation, only two of the four models, the duck model and the head models, are shown here. Figs. 13 and 14show the distribution of quality metricsdet(J),fcond,fOddyandf⊥. From the figures, we can observe that the mesh becomes much smoother after mesh quality improvement. The condition number metric and Oddy metric both become smaller and also smoother as there are larger warm colour areas. The orthogonal metric becomes larger as there are larger blue coloured areas. Table 5compares the mesh quality metrics of the four models before and minimizing (16), whereμmeans the average measure andσthe standard deviation, model 1 represents the obtained validB-spline solid and model 2 represents the solid after minimizing (16). We can observe from the table that, with the minimization of (16), the average condition numberfcondand average Oddy measurefOddybecome smaller and better. The average orthogonality becomes larger and better.

@&#CONCLUSIONS@&#
