@&#MAIN-TITLE@&#
Integrating a reduced-order model server into the engineering design process

@&#HIGHLIGHTS@&#
A reduced-order model server is incorporated into the engineering design process.Proper orthogonal decomposition is used for the reduced-order model.The reduced-order model server stores all data for a particular model.The proposed engineering workflow is compared with a common workflow.The reduced-order model server provides more efficient information exchange.

@&#KEYPHRASES@&#
Engineering design,Proper orthogonal decomposition,Client–Server,Distributed computing,Reduced-order modeling,Engineering workflow,

@&#ABSTRACT@&#
Engineering design is a complex and iterative process that involves multiple engineering teams sharing and communicating information during the design process. One aspect of engineering design involves the development of physics-based models and their analysis via numerical simulations that are computationally expensive. To overcome the time constraints due to the complexity of numerical simulations, reduced-order models (ROM) such as proper orthogonal decomposition are being increasingly used. Decreasing the simulation time, however, does not address the inefficiencies in communicating engineering models and analysis during the design process. This paper proposes developing and incorporating a ROM server into the design workflow. The ROM server stores all data associated with a given engineering model and automatically constructs a ROM every time a model is created or updated, thus maintaining a consistent version of information across multiple engineering teams. A common engineering workflow is compared with one using a ROM server. A cost of synchronization metric has been defined based on the parameters of data size, size of the engineering team and design iterations. This metric has been evaluated and compared for the cases with and without a ROM server and it was found that the cost of synchronization is lower when a ROM server is used in the design workflow. It is shown that as the team size increases, the ROM server helps with more efficient information storage and transfer. Finally, an example problem of a heat-exchanger fin shape design is used to demonstrate the ROM server framework.

@&#INTRODUCTION@&#
Engineering is increasingly dependent on modeling and simulation for design, optimization, and many other engineering decision-making tasks. With increasing computational capabilities it has become easier to run large-scale, physics-based high-fidelity simulations and analyze various physical phenomena. Examples of these simulation techniques include computational fluid dynamics (CFD), finite element analysis, and molecular dynamics. Often this involves discretizing the domain into a finite number of grid points and solving the governing, coupled partial differential equations over the discretized domain. Resolving physical phenomena at these levels of fidelity is time-consuming, and the computational complexity is a function of the number of grid points considered, the complexity of the geometry, and the physics represented by the equation set. As a result, running the numerous “what-if” scenarios needed to support a simulation-based engineering and design process is often computationally prohibitive.To overcome this limitation, various data-driven reduced-order modeling techniques have been developed. Data-driven reduced-order modeling relies on first creating a collection of computational solutions to construct a set of basis functions. These basis functions are then used to make evaluations of the reduced-order model (ROM) in lieu of using the original large-scale physics-based computational model [5–7,11]. One reduced-order modeling technique is proper orthogonal decomposition (POD). POD-based ROMs have been used in a number of engineering and scientific applications, including fluid mechanics [3,6,9,11] and solid mechanics [16,18]. For example, Suram et al. [3] constructed a ROM based on CFD simulations of flow through a mixing nozzle. Samadiani et al. [5] reviewed design methodologies for data-center server thermal management based on the POD method. Willcox et al. [7] developed an inverse design technique based on a POD technique for incomplete data. Zhou et al. [18] used POD to analyze turbulent flow structures in a reacting jet. Du et al. [19] have incorporated the POD technique into a finite difference scheme and have analyzed the errors after applying this unified scheme to develop a ROM for a chemical vapor deposition reactor. The generality of the POD methodology also makes it useful in any field that involves studying and analyzing patterns of data that have been collected either computationally or experimentally. One interesting example where POD-based ROMs have been used with experimental data is in Chen et al. where the authors have analyzed bat flight kinematics from data collected from video samples [17]. In engineering design, the focus of POD is to reduce the time to run the computational models within the engineering workflow. That is, the high fidelity models are created and are then used to create the ROM. The ROM is then used in the design process. Within this process it is often assumed that the ROM creation process is a linear and static process and that design exploration, optimization, and decision-making wait for the creation of the ROM. And that once the ROM is created, it does not change. However, engineering design is a dynamic process of exploration and consideration of multiple design options within a broad analysis space. Because of this, detailed high fidelity computational modeling is often delayed until the design is nearing completion. Pushing this detailed modeling forward in the design process has the potential to reduce costs and improve designs, but it requires a framework in which the existing computational results can be utilized and updated while the analysis process proceeds. That is, the analysts and engineers need a common framework that enables a shared design-analysis workflow.To meet this need, this paper proposes a client–server based architecture to build and evaluate POD-based ROMs in which the inputs from multiple engineers and analysts are incorporated and managed as a part of a dynamic and shifting engineering design process. This ROM server enables independent insights obtained by the designers and analysts within each iteration of a design to be used to improve successive iterations. In addition, integrating the various steps into a cohesive workflow enables faster, more consistent, and more predictable information sharing within the engineering design team, which may result in shorter more effective design cycles.

@&#CONCLUSIONS@&#
In this work a computational data management system is proposed that incorporates reduced-order modeling to enable a distributed framework for engineering design. The data management system has been enabled by developing a client–server based architecture. The server stores computational data in a vendor agnostic format and enables POD computations that can be used in analysis and optimization for simulation-based engineering design. The client–server based architecture enables persistent storage of computational data that can be accessed on-demand from any geographical location, thus improving collaboration among members of a distributed engineering team. The cost of synchronization was computed based on the size of the data and the number of times it needs to be transferred amongst multiple producers and consumers participating in a product design cycle, and this cost was computed for the cases with and without the ROM server. It was found that the cost of synchronization is lower when a ROM server is used in the design workflow. The software infrastructure developed allows real-time collaboration in a distributed engineering team by leveraging the fast computational capabilities of POD-based ROMs. As discussed above a batch process creates a bottleneck to information sharing, which is overcome by utilizing a server-based solution. Furthermore, the client–server architecture enables exposing a synchronized view of all existing computational models and also accounts for the changes to these models in a near real-time fashion. The centralized server-based solution also eliminates the user cost of data synchronization, which is high in a distributed engineering team. The solution developed in this work is especially useful to help with collaboration in a geographically distributed team of analysts and design engineers.Further research is needed to address several issues. To assemble the ensemble matrix in the POD algorithm, all the CFD datasets are required to have the same number of grid points. This is a rather stringent requirement in most cases. Developing an algorithm to reconcile data from CFD models into the ensemble matrix can help automate construction of the ensemble matrix. In the client–server model because the computation is being performed on a remote server, the total computational time is the sum of the time to perform the arithmetic and the network communications time. The network communication time introduces latency, which was not considered in this article. This is an important aspect and needs further study. This current work, implicitly requires that the computational database be located on a single node because of the restrictions imposed by the ROM server. In the future the authors plan to explore the possibility of utilizing a cloud-based ROM database to store as well as compute ROM parameters. The capabilities of the ROM server can thus be extended to incorporate multiple computational databases simultaneously. This will require that the ROM computation be performed in a distributed manner, where each node in the network can access data on other nodes based on some global metadata. Another aspect of this work that can be made more efficient is the recomputation of the POD basis functions when new data is added or removed from the ROM database. This can be improved by utilizing SVD update methods so that the ROM server is always available for processing requests. A lazy recomputation can be performed when the ROM server has a negligible client load. Another aspect of this work that needs further study is the development of appropriate clients that access and leverage the ROM server. For instance, an optimization client can be developed that utilizes the ROM server to evaluate the objective function. Client-side caching techniques can be developed to minimize the effects of latency in making network calls. Also, versioning of engineering models can help engineers keep track of and compare incremental changes during the design process.