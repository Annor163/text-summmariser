@&#MAIN-TITLE@&#
Optimal design of bilateral contracts for energy procurement

@&#HIGHLIGHTS@&#
A robust approach to the optimization of bilateral contracts in energy management.The modeling of different layers of agents operation within a smart grid environment.From the algorithmic viewpoint, the design of an algorithm that factors in long term information within a short term model.The optimization tools provide information for both strategic planning and bilateral contract design.

@&#KEYPHRASES@&#
Distributed energy resource,Bilateral contract,Dynamic resource allocation,

@&#ABSTRACT@&#
In this paper, we consider the problem of optimizing the portfolio of an aggregator that interacts with the energy grid via bilateral contracts. The purpose of the contracts is to achieve the pointwise procurement of energy to the grid. The challenge raised by the coordination of scattered resources and the securing of obligations over the planning horizon is addressed through a twin-time scale model, where robust short term operational decisions are contingent on long term resource usage incentives that embed the full extent of contract specifications.A contract is said to be valid at week t if week t is within the contract’s validity period and if it has a positive number of request tokens left at the end of week t − 1. A resource contract that has announced a maintenance for week t is not valid at week t.Contract Level information.Projected Flow information.set of weeks.set of time slots in week t.duration of time slot s ∈ S(t).set of time slots types.type of time slot s ∈ S(t).set of demands (grid contracts).set of resources (generator’s contracts).set of valid demand contracts in time slot s ∈ S(t).set of valid resource contracts in time slot s ∈ S(t).set of valid and compatible demand/resource contract pairs in time slot s ∈ S(t).set of valid resources in time slot s ∈ S(t) that are compatible with demand i.set of valid demands in time slot s ∈ S(t) that are compatible with resource i.set of demand contracts in time slots of type k.subset of valid demand contracts inD^kforming the ℓth horizontal slice of the corresponding demand histogram.number of slices in histogram associated with demandD^k.slide indices for time slot type k: Lk= [1, … , nk].static feasibility set associated with resource set R and demand set D.robust feasible at week t.set of feasible demand request scenarios.subset of feasible demand request scenarios compatible with the uniform forecast.amount of mobilization m used in time slots of type k along the ℓth slice (to respond to simultaneous requests from demandsD^kℓ).binary decision variable set to 1 if resource i is assigned to demand j in time slot s ∈ S(t).binary parameters set to 1 if demand j makes a request in time slot s ∈ S(t).upper bound on the expected number of simultaneous requests from demandsD^kℓin time slots of type k.expected number of requests from demand j in time slots of type k.number of request tokens for resource i at the beginning of week t.number of requests tokens for demand j at the beginning of week t.adjusted cost of resource i for demand j at time slot s ∈ S(t).cost for the mobilization of resource i for one unit of time.set of mobilizations for time slots of type k for demands inD^kℓ.total cost of resource mobilization for mobilization m ∈ Mkℓ.mobilization incidence matrix associated with slice ℓ of time slot type k.duration of time slot s ∈ S(t).power delivered (resp. received) for resource (resp. demand) ℓ.

@&#INTRODUCTION@&#
Recent technological advances, together with adequate policies, explain the increased penetration of renewable energy in several countries (Bürer & Wüstenhagen, 2009; Moosavian, Rahim, Selvaraj, & Solangi, 2013; Timilsina, Kurdgelashvili, & Narbel, 2012). This brings issues related to reserve requirements (Matos et al., 2009), management of distributed energy (involving synchronization of excess production with the grid (Lopes, Hatziargyriou, Mutale, Djapic, & Jenkins, 2007)), security and load forecast (Mills, 2010), as well as the related financial aspects.Distributed generators (of heat and power, for instance) can integrate the grid’s operation through ancillary services and demand-side management, providing load reduction in the advent of contingencies (Walawalkar, Fernands, Thakur, & Chevva, 2010). Alternatively, load reduction can be provided by curtailment service providers, which use aggregation to form bids on wholesale markets. However, current distribution networks do not allow for the procurement of significant amounts of energy from generators connected along the distribution network. This is mostly due to standard relays and switches architectures, which are not designed to monitor power flows in multiple directions (F. E. R. Commission, 2007).While it is currently difficult for distributed generators to trade energy with the grid, the situation is likely to change. Indeed, the falling cost of technologies such as photovoltaic units (Bazilian et al., 2013), and the possibility of pairing them with storage units (Ru, Kleissl, & Martinez, 2013), suggest the advent of dynamic network management in the near future.To the best of our knowledge, little has yet been achieved to address the challenges that will be faced by distributed generators that are unlikely to have direct access to wholesale markets. In this context, and inspired by current practice in demand-response management, namely the bilateral contractual structure involved in incentive programs (Moghaddam, Abdollahi, & Rashidinejad, 2011), we posit an energy aggregator that acts as a third party between the grid and distributed generators, and that provides offers to the grid via aggregation (Gkatzikis, Koutsopoulos, & Salonidis, 2013).In our framework, we assume that the aggregator is endowed with a portfolio of internal and external bilateral contracts with its clients and the grid, respectively. Internal contracting serves as a flexible tool to adjust any client participation to the aggregator’s external activities on the grid, so that it be tailored to each client’s financial goals and specific processes. External operations may be positioned at several levels, such as ancillary services, wholesale markets or load curtailment. In the current study, we focus on the management of bilateral contracts designed for the pointwise involvement of the aggregator’s clients in the delivery of energy to the grid, in response to contingencies (spinning reserve).Notwithstanding the fact that the settlement of bilateral contracts can be tightly coupled to bid production on the market, we do not specifically address this issue, which has been well documented in a number of recent studies (Corchero & Heredia, 2011; Pandžić, Morales, Conejo, & Kuzle, 2013). Although pool operations intervene in the aggregator’s operations, we yet believe that the management of the two-sided portfolio is important per se, and that it raises challenges that need to be addressed independently and prior to any pool activity.The aim of this paper is to propose a model for an energy aggregator providing contingency reserve using distributed generators, and to devise an efficient algorithm for its operations, which are set in a stochastic and dynamic environment, whose time horizon typically spans several months. Due to the fact that discrete decisions are involved, the resulting multi-stage stochastic program can only be tackled for small portfolios. Alternatively, addressing the curse of dimensionality directly through statistical learning schemes (Powell, 2007) is problematic on account of the involved combinatorics. In this respect, our contribution is twofold. First, we position an energy aggregator attached to the smart grid which manages a two-sided portfolio of forward contracts, respectively with its clients and the pool. Second, we devise a two-frame model that involves a robust mixed integer short term formulation, covering the aggregator against any weekly demand scenarios, together with a long term model that captures the full extent of all contracts, based on the available configurations. On the algorithmic side, this naturally leads to an optimization framework where a long term model passes information to a short term model.The paper is organized as follows. The problem’s formulation is presented in Section 2, while the algorithmic framework is developed in Section 3, and a numerical experiment is documented in Section 4. The conclusion is then followed by the list of notation. The conclusion is then followed by the Appendix.In this section, we first introduce and describe the energy aggregator, the corresponding contractual framework, and the time frames underlying the activities involved. Next, we present our optimization model.We recall that the energy aggregator manages a two-sided portfolio of bilateral contracts that involves distributed generators and the grid. A grid contract is set for an amount of power to be delivered to the grid, upon request by the grid, within the aggregator’s specific time frames. Let D be the set of grid contracts, referred to as demands in the sequel. Each demand contract j ∈ D allows for a finite number of requests from the gridrjdem. The aggregator responds to any such request by forwarding it to a relevant set of contracted generators. A generator contract is set for an amount of power to be produced by the generator, upon request by the aggregator, within generator specific time frames. Let R be the set of generator contracts, referred to as resources in the sequel. Correspondingly, and for each i ∈ R, letriresbe the maximum number of requests the aggregator can submit to resource i.Energy delivery must be monitored. At the beginning of each week, before any demand request has been received, the aggregator broadcasts to all parties involved a mobilization schedule that assigns available and compatible resources to available demands, for each weekly time slot. Mobilized resources can then be used to respond to requests. We assume the following general structure for both demand and resource contracts, which involve a fixed cost to be paid in advance for the total amount of power to be delivered throughout the entire contract validity period, and variable mobilization costs on the basis of which resources are paid for their availability. We assume that the aggregator’s portfolio is fixed, hence optimization is performed with respect to mobilization costs alone. We denote byCimobthe associated marginal cost of mobilizing resource i ∈ R.The heterogeneous nature of the aggregator resources, whose underlying processes can involve hard operational constraints (ramping delay, successive requests delay) restricts the compatibility of resources and demands. The subset of resources available to meet a request from demand contract j is denoted by the set Rj⊂R. Similarly, the subset of demands for which resource i is compatible is expressed as Di⊂D. Finally, in order to manage uncertainties associated with their processes, each resource contract allows for a predefined number of maintenance periods (mi)i ∈ R, during which the generator is not available to meet the requests.Some key assumptions underlying the model are that (i) the aggregator has sufficient resources to meet the demand within its pool of resources; it then remains for the aggregator to minimize its costs by selecting which resources to mobilize at the current week, without putting at risk the feasibility of the portfolio in the long run, (ii) the aggregator is risk-averse, that is, resources that are mobilized at the current must have sufficient request ‘tokens’ to respond to any possible weekly request scenario, (iii) at most one request falls within any given time slot, and (iv) the mobilization schedule is fixed through the week.Note that resource contracts are not targeted toward generators with high availability randomness, such as stand-alone PV units. Also, even though maintenance periods allows for some flexibility, we assume that they are announced at least one week in advance, while the remaining resources are reliable. This should not be too restrictive though, as PV units can be coupled with storage to provide the required reliability (Ru et al., 2013).In this study, we consider a time horizon of several months, partitioned into a finite set T of weeks, each week t ∈ T being itself partitioned into a finite set of time slots S(t) of possibly uneven durations. Let Rts⊂R and Dts⊂D denote the subsets of contracts available and eligible for receiving or sending requests, respectively, during time slot s ∈ S(t). A contract with no remaining tokens is unavailable for the rest of the time horizon. Contract eligibility is encapsulated in notation DRts⊂Rts× Dts, representing the sets of compatible resource-demand couples that are available in time slot s. We denote byRjts(resp.Dits) the set of available resources (resp. demands) compatible with demand j (resp. resource i) in time slot s.We now introduce the model’s variables and constraints. Let(xijts)be the mobilization schedule for week t, wherexijtsis set to 1 if resource i is assigned to demand j in week t and time slot s ∈ S(t). The mobilization schedule must ensure that sufficient power is gathered for each demand, that is,xts∈Xpow(Rts,Dts),where(1)Xpow(R,D)={x:∑j:(i,j)∈DRxij≤1i∈R∑i:(i,j)∈DRpowerixij≈powerjj∈D}.These constraints are separable by time slot. The first one ensures that each resource is assigned to at most one demand in any given time slot. In the second, the parameter powerjinR×Ris the interval of valid power levels (for demand j). The symbol ≈ specifies that demand should be approximately satisfied, i.e., up to a prespecified tolerance.All fixed costs are assumed to be paid in advance, and any resource contract that ends with a positive number of requests represents a lost in value for the aggregator. Since the situation is similar for grid contracts, the aggregator is expected to agree on all demand requests. The aggregator’s objective is to minimize the total mobilization costs:(2)cost(x)=∑t∈T∑s∈S(t)∑(i,j)∈DRtsλtscimobxijts,where λtsis the duration of time slot s ∈ S(t).Stochasticity impacts the aggregator’s operations at two levels: demand requests and resource maintenance. Maintenance notices are given at the beginning of the week, allowing to account for them directly within the sets Rtsand DRts, which are thereby random. Let y be a demand scenario, such thatyjtsis set to 1 if a request from demand j is received in time slot s of week t. We assume that the width of time slots is sufficiently small, so that the probability of more than one request within a single time slot is negligible. Independent of any particular assumption on the demands distribution, we must have that y ∈ Y, whereY⊂{yjts∈{0,1},t∈T,s∈S(t),j∈Dts:∑t∈T∑s∈S(t)yjts≤rjdem}.A sequence of mobilizations (xt)t ∈ Tthat covers a scenario y ∈ Y is such that∑t∈T∑s∈S(t)∑(i,j)∈DRtsxijtsyjts≤rires,i∈R.The mobilization xtchosen at the beginning of week t is a function of all past information(yt′)t′<tand(Rt′)t′≤t,and it covers the aggregator against any demand scenario at week t:xt((yt′)t′<t,(Rt′)t′≤t)∈Xweekt((yt′)t′<t,(Rt′)t′≤t)where(3)Xweekt((yt′)t′<t,(Rt′)t′≤t)={xts∈Xpow(Rts,Dts),s∈S(t):∑t′≤t∑s∈S(t′)∑(i,j)∈DRt′sxijt′syjt′s≤rtires,y∈Y,i∈R}.In the sequel, parameters(yt′)t′<tand(Rt′)t′≤tare dropped whenever the context is clear, and we simply writext∈Xweekt.At a high level, the aggregator’s problem is expressed as the multi stage mixed integer stochastic program:Program 1minxE[cost(x)]s.t.xt∈Xweektt∈T.As mentioned above, and implicit to the formulation is the assumption that the aggregator’s resources are a priori sufficient to cover any demand scenario: the issue is how to achieve this at minimal cost, and using a minimal amount or resources. Considering the risk-averse environment within which the aggregator operates, together with the fact that failures not only impact the aggregator’s welfare in the short term, but perhaps more importantly impact negatively his ability to secure future contracts with the grid, uncovered time slots are to be avoided at all cost, and are simply not considered. (Obviously, in practice, failure to cover a time slot will yield severe penalties for the aggregator.)As an illustration, consider the small Portfolio 1 described in Table 1, where time slots are set to days for simplicity. In Table 1, column Pow refers to energy per request; columns t0 and tnrefer to first and last weeks of the contract, respectively; column Req refers to maximum number of requests in the contract; and columns Mon through Sun refer to weekly availability.In Portfolio 1, either of the two resources R1 and R2 can alone cover requests from the only demand D1. Resource 1 is only available 2 days a week, while Resource 2 is available 6 days a week. Observe that while the combined resources allow for a total of 15 requests, only 10 requests can be satisfied between Wednesday and Saturday. Table 2provides the data of a demand scenario history and two associated sequences of mobilization policies leading to either the failure to cover all time slots (top), or a coverage of the entire time horizon (bottom). Entries in each column correspond to a (weekly) mobilization policy (set at the beginning of the week) where either resource R1 or R2 is assigned to cover demand D1. Circles correspond to requests, and uncovered time slots are labeled with symbol ‘*’. Mobilization costs are displayed at the bottom.Straightforward combinatorics yields that at least 4 percent of all possible request scenario cannot be covered. Indeed,(4)(6011)(301)+(6012)(9012)≈0.04,where the denominator corresponds to the number of ways the 12 demand requests fall in any one of the 6 × 15 = 90 contracted days, and the numerator is the number of ways at least 11 requests occur between Wednesday and Saturday, where only 10 requests can be satisfied by R1, the only available resource on those days.The above analysis does not account for the weekly robustness of Program 1, which would have provided an estimate of weeks when robust weekly constraints are violated. Inspection of Portfolio 1 suggests to favor the use of R2 over R1 on Monday and Tuesday, as R1 must cover the rest of the week. To simplify the exposition, let us refer to Monday and Tuesday as day type 1 and Wednesday to Saturday as day type 2. Consider the following policy: resource R2 is mobilized on days of type 1 until a single request token is left. Next, it is mobilized each week on a single day of type 1, while resource R1 covers the rest of the week. If, on a given week, 7 requests have been received on days of type 2, and less than 2 requests on days of type 1, then R1 has 3 tokens left to cover 4 time slots (Wednesday to Saturday), on which demand D1 can still make more than 3 requests. It follows that the aggregator can no longer guarantee the feasibility of the portfolio. It is readily seen that this is the only failure under the mobilization policy, and the resulting probability of failure, given equiprobable demand scenarios, is given by the sum of the following two binomial probabilities:p′=P{7requestsondaytype2and0ondaytype1}=(07)(2/3)7p′′=P{7requestsondaytype2and1ondaytype1}=(18)(2/3)7(1/3).which yield a probability of failure(5)p′+p′′≈0.21.The mathematical model takes the form of a multistage mixed integer stochastic program, and is thus algorithmically challenging. As typical forward contracts span periods between 3 months to a year, exact resolution schemes such as Ahmed, King, and Parija (2003), Lulli and Sen (2004) must be ruled out, while scenario based heuristics proposed in Løkketangen and Woodruff (1996),Carøe and Schultz (1999) involve but a small number of scenarios, which in our case are difficult to sample. Moreover, taking into account the large number of states (number of requests and maintenances left in each contract), the set of scenarios required to properly implement non-anticipativity would by far exceed our computational capabilities. It is otherwise difficult to see how approximate dynamic programming (Powell, 2007) can properly account for the problem combinatorial features.The resolution scheme we present enforces short term feasibility of the portfolio, covering for every possible demand scenario at the current week, while making use of its resources so to best account for the full validity period of all contracts. We devise a two-time scale model in which a simpler long term model passes long term information to a short term model, where a single week of operations is considered. The two formulations are solved in sequence, over a rolling time horizon. Numerical experiments are conducted based on simulated demand and maintenance scenarios.The short term formulation yields a robust optimization problem that involves binary decision variables, where the minimized costs are provided by the long term model. The latter is expressed as a min-cost flow problem and is based on expected amounts of demand requests that occur in various time slot types. Its solution is expressed in terms of the number of times a resource can safely be used to respond to a given demand, for a given time slot type, without jeopardizing the feasibility of the portfolio. The type of a time slot is specified by the demand and resource contracts that are online within its range.The main simplifying assumption behind the long term formulation consists in replacing the demand stochastic process by expected number of events falling under various time slot types. (Note that such quantities may be fractional). The feasibility of a demand scenario is then independent of the exact order in which the requests are received. Its solution is used by the short term model to value the use of resources at the current week different time slots.The rest of this section is organized as follows. In Section 3.1 we discuss robust short term feasibility. In Section 3.2 we introduce the short term model and present a preliminary heuristic to value the use of resources at the current week, which will be used as benchmark. The notion of time slot type, and the underlying static representation of the aggregators activity, is introduced in Section 3.3. Finally, the long term model is presented in Section 3.4 together with the incentives it provides to the short term formulation.Mobilization schedules must account for every possible weekly demand scenario. For example, a resource assigned to a single demand over a full week should either (i) be assigned to no more time slots than it has request tokens, or (ii) be assigned to a demand that has at most as many request tokens as the resource does. The following result provides necessary and sufficient conditions for the covering of any weekly demand scenario in the general case, where one resource can cover multiple demands on different time slots.Theorem 1Letrtiresandrtjdemare the number of requests left in resource i and demand j, respectively, at the beginning of week t. A mobilization policyxt∈Xweektif and only ifxts∈Xpow(Rts,Dts)for each s ∈ S(t) and(6)rtires≥∑j∈Dimin{∑s:(i,j)∈DRtsxijts,rtjdem},i∈R.See the Appendix.□The above result allows the characterization of weekly feasibility through a system of linear inequalities.Theorem 2A mobilization policyxt∈Xweektif and only ifxts∈Xpow(Rts,Dts)for each s ∈ S(t) and there exist binary vectors (zij) and(x˜ijs)such that(7)rires≥∑j∈Di(rtjdemzij+∑s:(ij)∈DRtsxijts−x˜ijts)i∈R(8)∑s:(i,j)∈DRtsxijts−rtjdem−μ≤Mzij(i,j)∈DR(9)∑s:(i,j)∈DRtsxijts−rtjdem≥−M(1−zij)(i,j)∈DR(10)x˜ijts≤xijts(i,j)∈DRtss∈S(t)(11)x˜ijts≤zij(i,j)∈DRtss∈S(t)(12)x˜ijts≥xijts+zij−1(i,j)∈DRtss∈S(t)from any 0 < μ < 1.See the Appendix.□Letqijtsbe the cost associated with the mobilization of resource i for demand j on time slot type s ∈ S(t), and consider the single stage optimization program:Program 2minxt∑s∈S(t)∑(i,j)∈DR(t,s)qijtsxijtss.txt∈Xweekt.This short term model is solved from one week to the next, over a rolling time horizon, on the basis of simulated demand requests and resource maintenances. For each week t ∈ T, the following operations are performed:1.Simulate weekly resource maintenances(mit)i∈Rt.Update the available resource sets on account of activated maintenance periods:Rts={i∈Rts:mit=1},s∈S(t).Set the coefficients of the short term model objective (Program 2) according to long term information (Equations (13) or (24) in the sequel).Solve the short term model and broadcast the optimal mobilization x obtained from the solution of Program 2.Simulate weekly demand requests (yts)s ∈ S(t).Update contract states:rt+1jdem=rtjdem−∑s∈S(t)yjts,j∈Dtrt+1ires=rtires−∑s∈S(t)∑j∈Dtixijtsyjts,i∈Rt.Remove fulfilled contract from the availability lists:Rt+1s={i∈Rts:rtires>0}Dt+1s={i∈Dts:rtidem>0}.Before introducing the long term model in the next section, let us consider the following simple scheme to set the coefficients in the objective of Program 2. The Contract Level (CL) information is defined as(13)qijts=rtjdem−rtirest∈T,s∈S(t),(i,j)∈DRts,and can be used to detect the resources having an amount of request tokens that exceeds the demand for which they are mobilized, the rational being that an uncovered time slot can only arise if at least one resource runs out of tokens before a demand.The CL information is evaluated at week t = 1 for Portfolio 1 (Tables 1 and 2) in Table 3, and was actually used in the simulation at the top of Table 2. Over 100 simulations based on a uniform demand distribution were performed, sequentially solving Program 2 using the CL information allowed to fully cover 19 of the scenarios, out of the 79 expected to be feasible (see equation (5)).The long term formulation requires to first cast the aggregator’s problem within a static framework defined in terms of the total number of requests received in time slot types, characterized by available demand-resource configuration pairs(D^k,R^k)⊂D×R.Let (πk)k ∈ Kbe a partition of the time horizon, where class πk(time slots of type k), are characterized by the set of online and compatible demand-resource pairs(D^k,R^k)⊂D×R. A uniform distribution of demand yields the expected number of requestsy¯kjfrom contract j in time slots of type k:(14)y¯kj={rjdem|πk|/rjresifj∈D^k0otherwise.Let k(t, s) ∈ K be the type of time slot s ∈ S(t), and defineYuni⊂Yas the set of compatible demand scenarios, i.e.,y∈Yuniif and only if y ∈ Y and⌊y¯kj⌋≤∑t∈T∑s∈S(t)1(k(s,t)=πk)yjts≤⌈y¯kj⌉.Note that the uniformity assumption is readily generalized to forecast data, and is otherwise consistent with a Bayesian approach given that no predictive information is available.The key to the long term model formulation is the expression of the aggregate forecast in terms of the maximum number of requests issued simultaneously from demand subsets. The left-hand side of Fig. 1 displays a request scenario’s history. It corresponds to requests from demands j1, j2 and j3 occurring on time slots of a given type, say Monday mornings, for weeks t = 1, … , 15. The corresponding histogram is shown in the middle. The data on the right-hand side corresponds to the maximum number of simultaneous requests from demand subsets { j1, j2, j3}, { j2, j3} and { j2}.The following procedure is instrumental in computing quantities relevant to the analysis. Consider the sequence of nested sets(15)D^knk⊂…⊂D^k1⊂Dkand the vectory^k∈Rnk,recursively constructed as follows: first, set(16)D^k1={j∈D^k:y¯kj>0}and lety^k1be the smallest quantity such that(17)D^k2={j∈D^k1:y¯kj−y^k1>0}≠D^k,1,then updatey¯kj←y¯kj−y^k1for eachj∈D^k1and repeat the operation until no positive components remains in vectory¯k,for each k ∈ K.Theorem 3LetD^kℓandy^kℓobtained from procedure (14)–(17). Theny^kℓis an upper bound on the number of requests received simultaneously from the demandsD^kℓ,in any one time slot of type k, in any compatible scenarioy∈Yuni.See the Appendix.□Assuming that the set of mobilizationsXpow(D^kℓ,Rk)are provided explicitly for each time slot type, let us consider the problem of addressing requests, independent of their arrival order, within the static framework described in the previous section. We now show that, if fractional requests are allowed, the aggregator’s problem reduces to a minimum cost flow problem. To this aim, let Mkℓ be an ordering ofXpow(D^kℓ,Rk)and let δkℓ be the corresponding mobilization-resource incidence matrix:δmikℓ={1ifthem-thmobilizationofXpow(D^kℓ,Rk)usesresourceiforoneofthedemandsinD^kℓ,0otherwise.LetCmkℓbe the cost associated with mobilization m ∈ Mkℓ such that(18)Cmkℓ=∑i,j∈DRkℓδmikℓ1{j∈D^kℓ}ci,and let variable wkℓm> 0 denote the number of time slots on which joint requests from demandsD^kℓare satisfied by mobilization m. In other words, variable wkℓmrepresents the number of resource tokens that are used in mobilization m for addressing joint requests from demandsD^kℓon time slots of type k. Letw¯ki=∑ℓ≤nk∑m∈Mkℓδmikℓwkℓm,be the total amount of tokens from resource i used to respond to requests on time slots of type k, and lety^t·be the aggregate forecast constructed following procedure (15)–(17), at the beginning of week t. Now, consider the set of flow constraintsW(y^,rres)defined by the inequalities(19)∑m∈Mk,ℓwkℓm≥y^kℓk∈Kℓ∈Lk(20)∑k∈Kw¯ki≥riresi∈R,wkℓm≥0k∈Kℓ∈Lk,together with the mathematical program:Program 3(21)minw∈W(y^t,rtres)∑k∈K∑ℓ∈Lk∑m∈MkℓCmkℓwkℓm,whose optimal solution ensures that a maximum number of demand requests are satisfied at minimum cost. Constraint (19) models demand satisfaction and ensures that, given a sufficient amount of resources, all demands are satisfied, and then all components of constraint (20) are tight. Otherwise, the slack variable associated with resource constraints (20) provide information on missing resources. More formally:Theorem 4If resources are sufficient to satisfy all demand, that is, there exists aw∈W(y^t,rt·res)such that(22)∑m∈Mkℓwkℓm*=y^tkℓ,k∈K,ℓ∈Lk(23)∑k∈K∑ℓ∈Lk∑m∈Mkℓδmikℓwkℓm*≤rtires,∀i,then constraints (20) are tight in Program3.See the Appendix.□With respect to an optimal solution of Program 3, two situations may arise. First, there exists an index i ∈ R such that (20) is not tight, i.e., resource i is lacking request tokens, and then at least one of the component of (19) is tight, say component (k, ℓ), where additional resources are required to satisfy demandsD^kℓ. The opposite situation entails that all demands are covered. This is consistent with our general positioning of the aggregator’s problem, where resources are assumed to be sufficient to cover demand. In this context, the mobilization policy of the current week should be such that the long term model remains feasible in subsequent weeks.To satisfy the above requirement, we factor in bounds on the use of each resource (provided by the long term solution) and restrain the current week’s mobilization accordingly. The stochastic nature of the aggregated forecastw¯(on the basis of which the long term model is built) suggests not to implement this as hard constraints. In the proposed scheme, the coefficients of the short term objective are corrected in the following manner. Consider the restrictionx^(w)of the long term solution w to the time slots at current week t, that is, the expected amount of resource i used to satisfy requests from demand j in time slot s ∈ S(t), for each (i, j) ∈ DRts:x^ijts(w)=pt,k(ts)∑ℓ∈Lk(t,s):j∈D^kℓ∑m∈Mk(t,s)ℓδmik(t,s)ℓwk(t,s)ℓm,where ptkis the conditional probability that a request in a time slot of type k occurs at current week t under the uniform demand assumption, and is expressed asptk=|{s∈S(t):k(ts)=k}|/|πk|.Since incorporating the constraintspt,k(ts)xijts≤x^ijts(w)(ij)∈DRts,s∈S(t)may make the short term model infeasible, we look for a feasible mobilization schedule x* such thatpt,·x*∈argminxt∈Xtweek∥x^t(w),xt∥.Equivalently, the square of the norm can be minimized:(24)∥x^t(w),xt∥2=∑s∈S(t)∑(i,j)∈DR(t,s)(x^ijts(w)−xijts)2=∑s∈S(t)∑(i,j)∈DR(t,s)(x^ijts(w))2−2x^ijts(w)xijts+(xijts)2=∑s∈S(t)∑(i,j)∈DR(t,s)[1−2x^ijts(w)]xijts+constant,where we used(xijts)2=xijts,asxijts∈{0,1}. We now have:pt,·x*∈argminxt∈Xtweek∑s∈S(t)∑(i,j)∈DR(t,s)[1−2x^ijts(w)]xijts.We then set the long term information in the short term model (Program 2) to(25)qijts=(pt,k(ts))−1(1−2x^ijts(w)),which is referred to as the projected flow (PF) information in the sequel.Consider again Portfolio 1 (Tables 1 and 2), which involves two time slot types (referred to as day types above): Mondays and Tuesdays for k = 1, and the remaining week days for k = 2, and thus K = {1, 2}. As a single resource suffices to cover a request, mobilizations can be expressed directly in terms of the mobilized resource. We have M1 = {R1} and M2 = {R1, R2}, andw¯ki=wk1i. That is, the amount of resource i assigned to day type k matches the flow of the corresponding mobilization on the unique slice 1. Variable wkℓmrepresents the amount of resource i mobilized in time slot of type k to cover the demandsD^kℓ,where k ∈ {1, 2}, ℓ = 1 and m ∈ 1, 2. Mobilization 1 (resp. mobilization 2) corresponds to the use of resource R1 (resp. resource R2) andD^11=D^12={1},that is, a single demand is involved. Recalling that c1 = 2 and c2 = 5, Program 3 takes the form:minw≥02(w111+w211)+5w112s.t.w111+w112≥y¯11=4w211≥y¯12=8w¯11+w¯21≥r1res=10w¯12≥r2res=5.Its optimal solution is illustrated on the right-hand side of Fig. 2. For example, at week t = 1 and for time slot s = 1, resource i = 1 (D1) and demand i = 2 (R2), we havep11=1/15andx^2111=1/3,and the corrected costq2111=(1/15)−1[1−2(1/3)]=5.The PF information at week t = 1 is summarized in Table 4. The left-hand side of Fig. 2 provides a graphical comparison between the CL and PF information.A simulation run using FB information on Portfolio 1 is presented at the bottom of Table 2, and compared with one based on CL information. Note that all time slots are now covered. CL and FP information are compared on Portfolio 1 in Table 5, where 100 simulations have been performed. The PF information provides a coverage of 83 percent of all scenarios, compared to 19 percent for the CL information. While the FB information performs better, both schemes ‘agree’ that Portfolio 1 cannot be covered with probability 1, which confirms our previousobservations.We now contrast CL and FP’s long term information on the larger Portfolio 2 given in Table 6. The meaning of the columns are as in Table 1, and the additional column mainly refers to maximum number of maintenances. Table 7 provides the total number of eligible mobilization candidates per time slot types. Fig. 3 and Fig. 4 give the total power gathered and the available contracts in each time slot type, respectively.The results of 50 simulation runs are summarized in Table 8and Table 9, respectively. The statistics are gathered for each time slot type, showing average mobilization costs, average number of uncovered time slots (failures) and the proportion of runs where demand is fully covered. At the bottom, we provide the average number of unused resource tokens, for each resource, as well as the total proportion of unused power.Considering the distribution of uncovered time slots for the different types, both algorithms (information type) broadly agree that resources are lacking on time slots of type 1, time slot of type 7 (weeks 1 through 16), and time slot of type 10 (weeks 17 through 24). The CL information otherwise manages a lower average mobilization cost of 887.62, compared to 1037.64 when using the FP information. However, the extra mobilization cost allows the FP scheme to fully cover 76 percent of scenarios, compared to none for the CL scheme, and this is achieved using only 2 percent of additional resources.

@&#CONCLUSIONS@&#
