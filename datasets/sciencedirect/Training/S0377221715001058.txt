@&#MAIN-TITLE@&#
On-line supply chain scheduling for single-machine and parallel-machine configurations with a single customer: Minimizing the makespan and delivery cost

@&#HIGHLIGHTS@&#
We study 10 new supply chain scheduling problems in the on-line environment.We provide the lower bounds of competitive ratio for all the problems.We propose optimal algorithms for four of the 10 problems.We propose approximate algorithms for the other problems.Computational experiments confirm good performance.

@&#KEYPHRASES@&#
Supply chain scheduling,On-line algorithm,Delivery cost,Makespan,

@&#ABSTRACT@&#
This paper investigates minimization of both the makespan and delivery costs in on-line supply chain scheduling for single-machine and parallel-machine configurations in a transportation system with a single customer. The jobs are released as they arrive, which implies that no information on upcoming jobs, such as the release time, processing time, and quantity, is known beforehand to the scheduler. The jobs are processed on one machine or parallel machines and delivered to the customer. The primary objective of the scheduling is time, which is makespan in this case. The delivery cost, which changes due to the varying number of batches (though the cost for each batch is assumed to be the same) in delivery, is also concerned. The goal of scheduling is thus to minimize both the makespan and the total delivery cost. This scheduling involves deciding when to process jobs, which machine to process jobs, when to deliver jobs, and which batch to include jobs. We define 10 problems in terms of (1) the machine configuration, (2) preemption of job processing, (3) the number of vehicles, and (4) the capacity of vehicles. These problems (P1,P2,…,P10) have never been studied before in literature. The lower bound for each problem is first proved by constructing a series of intractable instances. Algorithms for these problems, denoted byH1,H2,…,H10,respectively, are then designed and a theoretical analysis is performed. The results show that H1, H2, H6, and H7 are optimal ones according to the competitive ratio criterion, while the other algorithms deviate slightly from the optimum. We also design the optimal algorithm for a special case of P5. A case study is provided to illustrate the performance of H5 and to demonstrate the practicality of the algorithms.

@&#INTRODUCTION@&#
In a large-scale manufacturing and/or service operation, jobs are processed on machines in a factory or shop and delivered via a transportation system to customers in different locations. Two performance measures for such operations are time and cost. The cost includes both job processing costs and delivery costs, and time refers to the time interval between the time when a customer places an order and the time when the customer receives the ordered product. For customers, both the cost and time are a concern, and a low cost and short time are always desired. Scheduling for such an operation involves deciding when to process products and when to deliver products so that shorter time and lower cost may be achieved.In supply chain scheduling, information such as future jobs, job release times, job processing times, and job quantity may not be known in advance, or scheduling runs as the demand occurs, which is called an on-line environment. Algorithms for the supply chain problem in an on-line environment are called on-line algorithms and must schedule jobs as they arrive (also called current jobs). On-line algorithms are evaluated using so-called competitive analysis instead of complexity analysis (Borodin and El-Yaniv, 1998; Pruhs, Sgall, and Torng, 2004). Algorithms with complete information of jobs for supply chain scheduling are called off-line algorithms, among which there are optimal ones. LetPbe an on-line problem, of whichIis an instance. LetA(I)be the result of the on-line algorithm forI,and letOPT(I)be the optimal result of the corresponding off-line algorithm. IfA(I)OPT(I)≤rfor allIand r ≥ 1,Ais called an r-competitive algorithm. Furthermore, the on-line algorithm has competitive ratioRA=inf{r≥1,A(I)OPT(I)≤r,for allI},where inf denotes the infimum. For an on-line problem, if no on-line algorithm can achieve a competitive ratio of less than L, we say that L is the lower bound of that on-line problem. If an algorithm has competitive ratio L, we call this on-line algorithm optimal.Machine configuration is another factor in supply chain scheduling. Here we consider single-machine and parallel-machine configurations in this paper. In the case of parallel machines, there are m identical machines, and a particular machine and a particular job are however exclusively related at any time. Several results have been published for the on-line problem of classical parallel-machine scheduling to minimize the makespan. If preemption of job processing is allowed, the 1-competitive on-line algorithm can be designed according to Hong and Leung (1992), whereby the McNaughton algorithm is applied whenever there is a new job. The McNaughton algorithm finds the shortest preemption schedule on parallel machines (McNaughton, 1959). If preemption of job processing is not allowed, the longest processing time (LPT) rule can generate a32-competitive schedule. According to the LPT rule, the job with the longest processing time is processed whenever there are idle machines (Chen and Vestjens, 1997).Hall and Potts (2003) defined a supply chain scheduling problem and solved some basic off-line problems. Note that off-line refers to the situation that the job release information is given to the scheduler before scheduling. The difference between supply chain scheduling and classical scheduling problems is that in the former case, products may not be delivered immediately owing to transportation costs; instead, products may be held for arrangement into a batch for delivery. Therefore, supply chain scheduling involves deciding not only when and on which machine to process a product, but also when and in which batch to deliver the product. When there is more than one customer and the number of transportation vehicles is finite, the products in one batch may belong to different customers, so an appropriate delivery route should also be considered. Chen (2005) studied eight off-line supply chain scheduling problems, of which four have a routing problem; however, the author assumed that the number of customers is constant and solved the routing problem by permutation. If the number of customers is variable, the routing problem is strongly NP-hard (Christofides, 1976) and the problem reduces to the traveling salesman problem (TSP), so the permutation based approach will not work.Averbakh and Xue (2007) considered on-line single-machine supply chain scheduling in which preemption of job processing is allowed and the total flow time and total delivery cost are minimized. The authors developed an on-line optimal algorithm for the case of a single customer and an on-line approximate algorithm for the case of more than one customer. They later considered an on-line supply chain scheduling problem with constraints on vehicle capacity and designed an on-line optimal algorithm for the single customer case (Averbakh, 2010). Chen (2010) reviewed the supply scheduling problem and modified a three-field notation for the classical scheduling problem to a five-field notation for supply chain scheduling.In recent years, the supply chain scheduling problem has been the focus of much attention. Lee, Lei, and Dong (2013) considered a supply chain scheduling problem with capacitated multistage operations to minimize weighted tardiness. They proposed a method for iterative solution of the upstream problem under a given production quantity. The supply chain scheduling in a semi-on-line environment was first studied by Averbakh and Baysan (2012) to minimize the sum of the total flow time and the total delivery cost. The authors designed an algorithm with competitive ratio2DD+P,where D is the cost of a shipment and P is a lower bound for all processing times. Rasti-Barzoki, Hejazi, and Mazdeh (2013) investigated supply chain scheduling for a single-machine or two-machine flow to minimize the total weighted number of tardy jobs and delivery costs. The structural properties were explored to develop a new branch-and-bound algorithm; and computational tests were conducted to show the performance. A three-tier supply chain scheduling model with three objective functions was proposed by Tang, Jing, and He (2013). They designed an improved ant-colony optimization algorithm and demonstrated that the method was better than those for other methods. Ivanov and Sokolov (2013) studied a new dynamic model of supply chain scheduling under a process modernization, which can be represented as a special case of the scheduling problem with dynamically distributed jobs. They explored optimality conditions and structural properties with discrete optimization techniques. Koc, Toptal, and Sabuncuoglu (2013) considered a supply chain scheduling problem with two vehicles for delivery under different delivery policies. Meisel, Kirschstein, and Bierwirth (2013) were the first to include production set-ups and production quantity, cargo consolidation, and capacity bookings for transportation in a supply chain scheduling model. A branch-and-cut method with heuristics was applied, and a case study demonstrated the performance. A supply chain scheduling problem with a third-party logistics provider was studied by Agnetis, Aloulou, and Fu (2014). They considered different transportation modes and investigated the complexity of the problems. Different techniques have been introduced in this domain. Bashir, Badri, and Talebi (2012) considered the supply chain scheduling problem as a production–distribution network, and described several hypothetical cases to show the planning process. Ivanov, Dolgui, and Sokolov (2012) studied supply scheduling problems combined with control theory, and proposed corresponding real-time policies. Different schemes have been introduced to search for a better solution in a shorter time, including an intelligent algorithm (Meinecke and Scholz-Reiter, 2014; Ullrich, 2013), the Taguchi method (Hajiaghaei-Keshteli, Aminnayeri, and Ghomi, 2014), and a piecewise linear model (Baghalian, Rezapour, and Farahani, 2013).However, little research has considered the makespan as the objective function. In addition, to the best of our knowledge there have been no studies of the problem with different vehicle characteristics and machine configurations in an on-line environment. To reduce knowledge gap was the motivation for our study.Here we propose and define 10 on-line supply chain scheduling problems for single-machine and parallel-machine configurations for a single-customer and different vehicle characteristics. For all these problems, the objective functions are the makespan and the delivery cost. There are no related work for these supply chain scheduling problems in the existing literatures. Furthermore, consideration of the vehicle characteristics (or tool more generally) in supply chain scheduling represents the first step toward tackling more realistic application problems.The remainder of the paper is organized as follows. The 10 problems are first defined and their lower bounds are investigated. Then an on-line optimal or approximate algorithm is developed for each problem. To show the effectiveness of the algorithm developed, a simulated experiment is presented and the results are discussed. The paper concludes with a summary of the contributions from this study and suggestions for future work.Suppose there are n jobsJ1,…,Jnwith processing timep1,…,pnthat are released on-line at timer1,…,rn,respectively, and that the manufacturer has a single machine or m identical machines. After jobs are processed, they are transported to the customer in vehicles, for which there is a delivery cost. A schedule should specify what machine a job is assigned to and when a job is processed and transported. A completed job should be packed in a batch, and the schedule should also decide which jobs are packed in which batches. Furthermore, delivery may not be carried out immediately, which means that there may be a waiting time for a processed product before it is delivered.Let I be an instance (i.e., a particular problem). We give the following notations:•η: A feasible schedule.opt: An optimal off-line schedule.Jj: The jth job.rj: Release time for jobJj.pj: Processing time for jobJj.Cj(η): Completion time for jobJjin schedule η.Cmax(η):maxJj∈ICj(η).ρj(η): Departure time for jobJjin schedule η.ρmax(η):maxJj∈Iρj(η),the latest time of delivery for jobs in I.T: Round-trip transportation time between the machine and the customer.Dj(η): Return time for the vehicle containing jobJjin schedule η, that is,Dj(η)=ρj(η)+T.Dmax(η):maxJj∈IDj(η),makespan.B: Cost of one delivery, which is a constant.TC(η): Total cost of all deliveries in schedule η, which is the number of deliveries multiplied by B.θ: Positive root of equationθ2+θ−1=0,that is,θ=5−12≈0.618.Full batch: A batch containing C jobs, where C is the vehicle capacity.Z(η): Total cost of schedule η.It is noted that all the problems considered in this paper involve both a time-based and a cost-based objective function. These problems are multi-objective problems. Different approaches can be used for the multi-objective problems. Taking two objectives as an example, we can: (1) to minimize one first and then minimize the other; (2) to minimize one by taking the other as a constraint and vice versa; (3) to combine the objectives into a single objective and minimize their weighted sum. These three approaches share the common trait of subjectivity. For instance, in method (3), the user’s choice of weights is subjective. In method (2), the threshold that defines the constraint is subjective. All the problems considered here are in an on-line environment, which implies that future information on jobs is unknown. Therefore, it is difficult to set a threshold for the time-based function or the cost-based function. Therefore, we explore the method (3), i.e., to minimize the weighted sum of the objectives. However, we note that the total delivery cost has a linear relation to the decision variable, the number of batches. With this property, we are able to represent a simple sum of two objectives without weights in form. This form does not change the nature of the multi-objective optimization but does facilitate the algorithm development.The delivery cost of delivery considered in this paper assumes that the cost for each batch is the same. Therefore, we have:w1Dmax+w2TC=w1Dmax+w2B×z=w1(Dmax+w2w1B×z),where w1 and w2 are the weights and z is the number of batches. Thus, minimizingw1Dmax+w2TCis equivalent to minimizingDmax+w2w1B×z. The unit delivery cost is B. LetB′=w2w1Band let TC′ be the total delivery cost. Then the problem is equivalent to minimizingDmax+TC′. Without loss of generality and without confusion, in the remainder of this paper we use the objective functionDmax+TC(TC replaces TC′).We define 10 problems for single-machine and parallel-machine configurations with a single-customer and different vehicle characteristics using the five-field notation α|β|π|δ|γ(Chen, 2010) as follows:(P1)1|rj,on-line|V(1,∞),direct|1|Dmax+TC.1|rj,on-line|V(∞,∞),direct|1|Dmax+TC.1|rj,pmtn,on-line|V(1,C),direct|1|Dmax+TC.1|rj,on-line|V(1,C),direct|1|Dmax+TC.1|rj,on-line|V(∞,C),direct|1|Dmax+TC.Pm|rj,on-line|V(1,∞),direct|1|Dmax+TC.Pm|rj,on-line|V(∞,∞),direct|1|Dmax+TC.Pm|rj,pmtn,on-line|V(1,C),direct|1|Dmax+TC.Pm|rj,on-line|V(1,C),direct|1|Dmax+TC.Pm|rj,on-line|V(∞,C),direct|1|Dmax+TC.The detail of the five-field notation is presented below for reader convenience in later discussions.α: Machine configuration1:Single-machine configuration, whereby all jobs are processed by a single machine.Parallel-machine configuration, whereby jobs are processed by m identical machinesβ: Restrictions and constraints on job parametersrj:Jobs have unequal release times.Jobs are released on-line.Job processing can be preempted and resumed later.π: Delivery characteristics including vehicle characteristics and delivery methodsVehicle characteristics:V(x, y):There are x vehicles available, each with capacity y.A single vehicle is available.A sufficient number of vehicles are available such that the number of vehicles is not constrained.Each vehicle can accommodate C jobs, where C < n and C is finite.Each vehicle can accommodate any number of jobs.Only jobs for the same customer can be delivered together in the same shipment.δ: Number of customers1:A single customer.γ: Objective functionTime-based:Dmax:The makespan for the whole procedure.Total trip-based delivery cost.Problems P1–P5 have the single-machine configuration. When there is only one machine and one customer, job processing becomes trivial, so the only issue is the delivery schedule.We consider that there is only one vehicle and that its capacity is sufficient for all the jobs. It is obvious that the optimal schedule for the off-line counterpart of the on-line problem is to process the jobs without idle time and deliver all jobs in one batch when the processing of the last job is complete. Thus, the optimal result isZ(opt)=Cmax(opt)+T+B. However, the on-line problem has a lower bound for the competitive ratio for all the on-line algorithms for this problem, which leads to the following theorem.Theorem 1No on-line algorithm for P1 can have a competitive ratio less thanmax{1+θ,1+BT+B},even if all processing times are 0.We first show that1+θis a lower bound for P1. JobJ1with zero processing time arrives at timer1=0. Suppose an on-line algorithm H deliversJ1at time ρ1. If there is no job coming, then the optimal schedule delivers the job at time 0 and the ratio of H to opt satisfiesR≥ρ1+T+BT+B. If the instance releases another jobJ2with zero processing time at timeρ1+ɛ,where ɛ is a sufficiently small number, then the optimal schedule will deliver two jobs in one batch at timeρ1+ɛ(while H delivers two jobs in different batches), and the ratio of H to opt satisfiesR≥ρ1+2T+2Bρ1+ɛ+T+B(Fig. 1). Combining these two cases, we obtainR≥min{ρ1+T+BT+B,ρ1+2T+2Bρ1+ɛ+T+B}.As ɛ approaches 0 andρ1=θ(T+B),the right-hand side of the inequality reaches the maximum value1+θ.Now we prove the other part of the theorem. The instance releases a job with zero processing time at timer1=0,and if an on-line algorithm H delivers the job at timeρ1≥B(T+B),then there is no job coming. Otherwise, a second job with zero processing time arrives at timer2=B(T+B),and if the departure time of this job isρ2≥2B(T+B),then there is no job coming, or else a third job comes at timer3=2B(T+B). In this ongoing process, if algorithm H delivers the ith job with zero processing time at timeρi≥iB(T+B),then there is no job coming, or else the(i+1)thjob with zero processing time comes at timeri+1=iB(T+B). The process is repeated until N jobs have been released and delivered, where N is a sufficiently large integer.If there are k jobs finally released and delivered, where k < N, then we can infer that the k jobs are delivered in k different batches andρk≥kB(T+B). Therefore, the result for schedule η obtained by algorithm H isZ(η)=ρk+T+kB≥k(B+B(T+B))+T,and the optimal schedule delivers all the jobs in a batch at time(k−1)B(T+B)and the result isZ(opt)=(k−1)B(T+B)+T+B. Then we can obtainR≥k(B+B(T+B))+T(k−1)B(T+B)+T+B=1+(k−1)B+B(T+B)(k−1)B(T+B)+T+B=1+BT+B.If there are N jobs finally released and delivered, we can also infer that the N jobs are delivered in N batches andρN≥rN=(N−1)B(T+B). Therefore, the result for schedule η obtained by algorithm H isZ(η)=ρN+T+NB≥(N−1)B(T+B)+T+NB,and the optimal schedule delivers all the jobs in a batch at time(N−1)B(T+B)and the optimal value isZ(opt)=(N−1)B(T+B)+T+B(Fig. 2). As N gets infinitely large, the ratio of H to opt tends toB(T+B)+BB(T+B)=1+BT+B. This completes the proof of Theorem 1.□Theorem 1 implies the following: whenT>(1+θ)B,the lower bound for P1 is1+θ; whenT≤(1+θ)B,the lower bound is1+BT+B. Next, we describe an algorithm that can achieve the best result, that is, the optimal on-line algorithm.Algorithm H1Jobs are scheduled on the machine without idle time.WhenT>(1+θ)B,at timeθ(T+B)+lT,where l ≥ 0 is an integer, if there is no uncompleted job that has been released, then there is a batch to deliver all completed jobs.WhenT≤(1+θ)B,at timelB(T+B),where l ≥ 1 is an integer, if there is no uncompleted job that has been released, then there is a batch to deliver all completed jobs.Note that whenT≤(1+θ)B,there will beB(T+B)≥T,and Algorithm H1 is feasible. Next, we show that Algorithm H1 is the optimal on-line algorithm for P1, which means that the competitive ratio of H1 to opt ismax{1+θ,1+BT+B},which leads to the following theorem.The competitive ratio for the on-line Algorithm H1 for P1 ismax{1+θ,1+BT+B},which is optimal.Let η be the schedule obtained by Algorithm H1. The proof has two parts for the two different cases of the algorithm.Case 1:T>(1+θ)B. Suppose there are k periods of T in schedule η after timeθ(T+B).Case 1.1:k=0. As there is no batch after timeθ(T+B),the only delivery in η occurs atθ(T+B). Therefore,Z(η)=θ(T+B)+T+B=(1+θ)(T+B). BecauseZ(opt)≥T+B,the statement obviously holds.Case 1.2: k ≥ 1. In this case, we haveρmax(η)=θ(T+B)+kT,and thusDmax(η)=ρmax(η)+T=θ(T+B)+(k+1)T. As there are at most k batches afterθ(T+B),with one possible batch atθ(T+B),the cost of delivery in η satisfiesTC(η)≤(k+1)B. SinceCmax(opt)≥ρmax(η)−T=θ(T+B)+(k−1)T,we haveZ(η)Z(opt)≤θ(T+B)+(k+1)(T+B)θ(T+B)+kT+B=1+T+kBθ(T+B)+kT+B=1+(T+B)+(k−1)B(1+θ)(T+B)+(k−1)T=1+θ.Case 2:T≤(1+θ)B. Let k be the number of batches delivered in schedule η. As delivery only occurs at timeB(T+B)multiplied by an integer, there should bek≤ρmax(η)B(T+B). Meanwhile, there should be jobs completed afterρmax(η)−B(T+B)in schedule η, otherwise there would not be a kth batch. Thus, we haveTC(η)≤ρmax(η)B(T+B)BandCmax(opt)≥ρmax(η)−B(T+B). That is,Z(η)Z(opt)≤ρmax(η)+T+ρmax(η)B(T+B)Bρmax(η)−B(T+B)+T+B=1+BB(T+B)+T−(1+BB(T+B))(T+B−B(T+B))ρmax(η)−B(T+B)+T+B=1+BT+B.From Theorem 1, there is no on-line algorithm with a competitive ratio less thanmax{1+θ,1+BT+B}. This completes the proof of Theorem 2.□We consider that the number of vehicles is sufficient and that their capacity is sufficient for all the jobs. As the vehicle is always available, we assume that the transportation timeT=0(nonzero transportation time would increase the cost of every schedule by the same constant and would not change the validity of our results). It is clear that P2 is a special case of P1 (withT=0). BecauseT=0≤(1+θ)B,the lower bound for P2 is1+B0+B=2.Corollary 1No on-line algorithm for P2 can have a competitive ratio less than 2, even if all processing times are 0.Jobs are scheduled on the machine without idle time. At time lB, where l ≥ 1 is an integer, if there is no uncompleted job that has been released, then there is one batch to deliver all completed jobs.The competitive ratio for the on-line Algorithm H2 for P2 is 2, which is optimal.Hereafter, we consider the case that there is only one vehicle, that its capacity is finite and that the preemption of job processing is allowed. We use pmtn in the five-field notation to represent the preemption (see the definition of the problem P3).The shortest remaining processing time (SRPT) rule is to process jobs with the smallest processing time among all already released uncompleted jobs at any instant t. The SRPT rule is important to the preemption problem and it is also the optimal processing rule for off-line version of P3 (Lu, Yuan, and Zhang, 2008). The off-line optimal schedule processes jobs with the SRPT rule, packs all jobs reversely into as few batches as possible (only the first batch can be unfull), and delivers the batches as soon as possible.Using the similar method in proving Theorem 1 and making N be C, it is easy to get that no on-line algorithm for P3 can achieve a competitive ratio less thanmax{1+θ,1+BT+B−B(T+B)(C−1)B(T+B)+T+B}.Corollary 3No on-line algorithm for P3 can have a competitive ratio less thanmax{1+θ,1+BT+B−B(T+B)(C−1)B(T+B)+T+B},even if all processing times are 0.Next, we modify H1 to give an algorithm that has a competitive ratio ofmax{1+θ,1+BT+B}.Algorithm H3Jobs are scheduled on the machine with the SRPT rule.WhenT>(1+θ)B,at timeθ(T+B)+lT,where l ≥ 0 is an integer, then there is a batch to deliver as many completed jobs as possible.WhenT≤(1+θ)B,at timelB(T+B),where l ≥ 1 is an integer, then there is a batch to deliver as many completed jobs as possible.The competitive ratio for the on-line Algorithm H3 for P3 ismax{1+θ,1+BT+B}.Let η be the schedule obtained by Algorithm H3. The proof has two parts for the two different cases of the algorithm.Case 1:T>(1+θ)B. Suppose there are k periods of T in schedule η after timeθ(T+B).Case 1.1:k=0. As there are no batches after timeθ(T+B),the only delivery in η occurs atθ(T+B). Therefore,Z(η)=θ(T+B)+T+B=(1+θ)(T+B). BecauseZ(opt)≥T+B,the statement obviously holds.Case 1.2: k ≥ 1. Suppose that τ is the last deliver time beforeρmax(η)=θ(T+B)+kTwhen there is not a full batch. If there is always a full batch before ρmax(η), thenτ=0. Let h be the number of full batches between τ and ρmax(η), so there areh+1batches after time τ, which meansρmax(η)≤τ+(h+1)T(θ(T+B)≤T).As opt also processes the jobs with the SRPT rule, there are more than hC jobs completed after τ. Therefore,Dmax(opt)≥τ+(h+1)T≥ρmax(η)andTC(opt)≥(h+1)B.Z(η)Z(opt)≤θ(T+B)+(k+1)(T+B)θ(T+B)+kT+(h+1)B≤θ(T+B)+(k+1)(T+B)θ(T+B)+kT+B≤1+θ.Case 2:T≤(1+θ)B. We can use the similar analysis for case 1.2 to the case here. Suppose that τ is the last deliver time before ρmax(η) when there is not a full batch. Let h be the number of full batches between τ and ρmax(η), so there areh+1batches after time τ, which meansρmax(η)=τ+(h+1)B(T+B). Meanwhile,Dmax(opt)≥τ+(h+1)T=ρmax(η)+(h+1)(T−B(T+B))andTC(opt)≥(h+1)B.Z(η)Z(opt)≤ρmax(η)+T+ρmax(η)B(T+B)Bρmax(η)+(h+1)(T+B−B(T+B))=1+BB(T+B)+T−(1+BB(T+B))(h+1)(T+B−B(T+B))ρmax(η)+(h+1)(T+B−B(T+B))≤1+BB(T+B)=1+BT+B.Further, it is necessary to show that this ratio can be achieved by the algorithm. At time 0, there is a job with 0 processing time, and for this instance the ratioZ(η)Z(opt)equals tomax{1+θ,1+BT+B}.□We consider that there is only one vehicle and that its capacity is finite. In this case, the problem becomes more difficult as the off-line problem without delivery cost is strongly NP-hard (Lu et al., 2008). It is obvious that the lower bound of P3 can be extended to this case.Corollary 4No on-line algorithm for P4 can have a competitive ratio less thanmax{1+θ,1+BT+B−B(T+B)(C−1)B(T+B)+T+B},even for if processing times are 0.Next, we describe an algorithm that has a competitive ratio of 2.Algorithm H4Jobs are scheduled on the machine without delay.WhenT>(1+θ)B,at time lT, where l ≥ 1 is an integer, if the number of completed jobs is not less than C or there is no uncompleted job that has been released, then there is a batch to deliver as many completed jobs as possible .WhenT≤(1+θ)B,at timelB(T+B),where l ≥ 1 is an integer, if the number of completed jobs is not less than C or there is no uncompleted job that has been released, then there is a batch to deliver as many completed jobs as possible.The competitive ratio for the on-line Algorithm H4 for P4 is 2.Let η be the schedule obtained Algorithm H4. The proof has two parts for the two different cases of the algorithm.Case 1:T>(1+θ)B. Suppose τ is the last delivery time before ρmax(η) when there is an unfull batch. Note that if there is no such τ, letτ=0. In this case, all the jobs processed after τ are released after τ, which means τ < Cmax(opt). Meanwhile, for every delivery time between τ and ρmax(η), there is either no batch or there is a full batch. Let h be the number of full batches. At last, there will be a possible unfull batch at ρmax(η). Therefore, there will be more than hC jobs released after τ. In opt, there are at leasth+1batches after τ, that is,Dmax(opt)≥max{τ+(h+1)T,Cmax(opt)+T}andTC(opt)≥(h+1)B. For η, the worst case is that all the jobs are delivered after Cmax(η):Dmax(η)≤max{τ+T,Cmax(η)}+(h+1)T≤Cmax(η)+(h+2)TandTC(η)≤τTB+(h+1)B.Z(η)Z(opt)≤Cmax(η)+(h+2)T+τTB+(h+1)Bmax{τ+(h+1)T,Cmax(opt)+T}+(h+1)B≤1+(h+1)T+τTBmax{τ+(h+1)T,Cmax(opt)+T}+(h+1)B≤2.Case 2:T≤(1+θ)B. We define the same τ and h with Case 1. As such, we haveDmax(opt)≥max{τ+(h+1)T,Cmax(opt)+T},TC(opt)≥(h+1)B,Dmax(η)≤Cmax(η)+(h+1)B(T+B)+TandTC(η)≤τB(T+B)B+(h+1)B.Z(η)Z(opt)≤Cmax(η)+(h+1)B(T+B)+T+τB(T+B)B+(h+1)Bmax{τ+(h+1)T,Cmax(opt)+T}+(h+1)B≤1+(h+1)B(T+B)+τB(T+B)Bmax{τ+(h+1)T,Cmax(opt)+T}+(h+1)B≤1+BT+B.At last, we shall show that the ratio of the algorithm can achieve 2 for the following instance. At time 0, there is a job with NT processing time released, and at timeϵthere are NC jobs with 0 processing time released, where N is a sufficient large integer andϵis a very small number.Z(η)=(2N+1)T+(N+1)BwhileZ(opt)=ϵ+(N+1)T+(N+1)B. Asϵand B gets infinitely small but N gets infinitely large, the ratioZ(η)Z(opt)will tend to 2.□We consider that the number of vehicles is sufficient and that their capacity is finite. Similarly, P5 is a special case of P4 withT=0. We can modify the lower bound of P4 to obtain the lower bound of P5,max{1+θ,1+B0+B−B(0+B)(C−1)B(0+B)+0+B}=max{1+θ,2−1C},and an 2-approximate algorithm modified by H4 can be obtained for P5.Corollary 5No on-line algorithm for P5 can have a competitive ratio less thanmax{1+θ,2−1C},even if all processing times are 0.Jobs are scheduled on the machine without idle time. At the time of lB where l ≥ 1 is an integer, if there is no uncompleted job that has been released, then there are batches to deliver all completed jobs; otherwise there are full bathes to deliver as many completed jobs as possible.The competitive ratio for the on-line Algorithm H5 for P5 is 2.Actually, we can have better results in some special case. For the special case thatC=2,the lower bound is1+θand the optimal algorithm can be found.Corollary 7No on-line algorithm for P5 withC=2can have a competitive ratio less than1+θ,even if all processing times are 0.Algorithm CTH.Jobs are scheduled on the machine without idle time and re-indexed by the completion time. When a jobJjis completed, the delivery rules are instituted as follows:If there are two completed jobs, then there is a batch to deliver them at once.IfJjis the only completed job but there are other uncompleted jobs, then do nothing.IfJjis the only completed job, there is no uncompleted job that has been released and j is even, then there is a batch to deliver it at once.IfJjis the only completed job, there is no uncompleted job that has been released and j is odd, then wait untilCj+θBto deliver it in a batch, or other jobs arrive during the waiting period.Let η be the schedule obtained by algorithm CTH and kj(η) be the number of batches which deliverJ1,…,Jj. Suppose that there are h jobsJli(i=1,2,…,h) which construct a batch on their own in schedule η. We first give a lemma for these jobs.Lemma 5ρli(η)+kli(η)BCj(opt)+⌈li2⌉B≤1+θ,fori=1,2,…,h.Noting thatCli(opt)=Cli(η),we just need to prove the following expressionρli(η)+kli(η)BCli(η)+⌈li2⌉B≤1+θ,fori=1,2,…,h.We apply inductive proof in i.First, let us show that the statement of the lemma holds for the casei=1. It is obvious that l1 is odd andkl1(η)=l1+12. Therefore,ρl1(η)+kl1(η)BCl1(η)+⌈l12⌉B=Cl1(η)+θB+l1+12BCl1(η)+l1+12B≤1+θBCl1(η)+l1+12B≤1+θBB=1+θ.Assume now that the statement of the lemma is proved for i ≤ s, and consider the casei=s+1.Case 1:ls+1is odd. Obviously lsis even and we haveρls+1(η)=Cls+1(η)+θB,ρls(η)=Cls(η)andkls+1(η)=kls(η)+ls+1−ls+12.From the foregoing assumption, we have the following expressionCls(η)+kls(η)B≤(1+θ)Cls(η)+(1+θ)ls2Bkls(η)B≤θCls(η)+(1+θ)ls2B≤θCls+1(η)+(1+θ)ls2B.Consequently, we haveρls+1(η)+kls+1(η)B=Cls+1(η)+θB+kls(η)B+ls+1−ls+12B≤Cls+1(η)+θB+θCls+1(η)+(1+θ)ls2B+ls+1−ls+12B≤(1+θ)Cls+1(η)+(1+θ)ls2B+(1+θ)ls+1−ls+12B(ls+1−ls+12≥1)=(1+θ)(Cls+1(η)+ls+1+12B)=(1+θ)(Cls+1(η)+⌈ls+12⌉B).Case 2:ls+1is even. Obviously lsis odd and we haveρls+1(η)=Cls+1(η),ρls(η)=Cls(η)+θBandkls+1(η)=kls(η)+ls+1−ls+12.From the foregoing assumption, we haveCls(η)+θB+kls(η)B≤(1+θ)Cls(η)+(1+θ)ls+12Bkls(η)B≤θCls(η)+(1+θ)ls+12B−θB=θ(Cls(η)+θB)+(1+θ)ls+12B−(θ2+θ)B=θρls(η)+(1+θ)ls+12B−B≤θCls+1(η)+(1+θ)ls+12B−BConsequently, we haveρls+1(η)+kls+1(η)B=Cls+1(η)+kls(η)+ls+1−ls+12B≤Cls+1(η)+θCls+1(η)+(1+θ)ls+12B−B+ls+1−ls+12B=(1+α)Cls+1(η)+(1+θ)ls+12B+ls+1−ls−12B≤(1+θ)Cls+1(η)+(1+θ)ls+12B+(1+θ)ls+1−ls−12B(ls+1−ls−12≥0)=(1+θ)(Cls+1(η)+ls+12B)=(1+θ)(Cls+1(η)+⌈ls+12⌉B).This completes the proof.□The competitive ratio for the on-line algorithm CTH for P5 withC=2is1+θ,which is optimal.Note thatZ(opt)=Cmax(opt)+⌈n2⌉B=Cmax(η)+⌈n2⌉B. In the following, we consider these cases:Case 1:h=0. In this case, η is optimal.Case 2: h > 0 andlh=n. From Lemma 5, the statement of the theorem holds obviously.Case 3: h > 0 but lh< n. In this case n and lhhave the same parity. As such, we haveZ(η)=ρmax(η)+kn(η)B=ρn(η)+kn(η)B=Cn(η)+klh(η)B+n−lh2B=ρlh(η)+klh(η)B+(Cn(η)−ρlh(η))+n−lh2B≤(1+θ)(Clh(η)+⌈lh2⌉B)+(Cn(η)−Clh(η))+n−lh2B≤(1+θ)(Clh(η)+⌈lh2⌉B)+(1+θ)((Cn(η)−Clh(η))+n−lh2B)=(1+θ)(Cn(η)+⌈n2⌉B)=(1+θ)Z(opt).According to Corollary 7, the ratio of CTH cannot be less than1+θ,which completes the proof.□By extending the first part of the proof of Theorem 1, we can also obtain that a greater lower bound for P5 with C being a constant as 1.8939 forC=3,1.9275 forC=4,and 1.9756 forC=5. We can see that the trend such that as C increases and tends to infinitely large, the lower bound tends to 2 (which agrees with the result of Corollary 5). However, for a fixed C that is greater than 2, it is hard to get an on-line optimal algorithm just like for the case ofC=2,but the Algorithm H5 is good enough for these conditions.We extend the results for the single-machine case to the parallel-machine configuration. Note that the lower bounds for single-machine configuration are valid for parallel-machine configuration, as the lower bounds are not affected by the machine configuration.We consider that there is only one vehicle and that its capacity is sufficient for all the jobs.Corollary 8No on-line algorithm for P6 can have a competitive ratio less thanmax{1+θ,1+BT+B},even if all processing times are 0.Jobs are scheduled on the machines with the LPT-rule.WhenT>(1+θ)B,after timeθ(T+B),if there is no uncompleted job that has been released and the vehicle is available, then there is a batch to deliver all the completed jobs .WhenT≤(1+θ)B,at timelB(T+B),where l ≥ 1 is an integer, if there is no uncompleted job that has been released, then there is a batch to deliver all the jobs.The competitive ratio for the on-line Algorithm H6 for P6 ismax{1+θ,1+BT+B},which is optimal.Let η be the schedule obtained by Algorithm H6. As the algorithm has two different cases, the proof also has two parts for the two cases, respectively.Case 1:T>(1+θ)B.Case 1.1: There is only one batch in η.Z(opt)=Cmax(opt)+T+BandZ(η)=max{θ(T+B),Cmax(η)}+T+B. AsCmax(η)≤32Cmax(opt),Z(η)Z(opt)≤1+θ.Case 1.2: There is more than one batch in η. The information of all the jobs is known after Cmax(opt), so there is only one batch after Cmax(opt). Note that there is at least one batch before Cmax(opt). Suppose that there areh+1batches before Cmax(opt) and the last delivery time is τ. Thenτ≥θ(T+B)+hTand all the jobs completed after τ are released after τ.Dmax(η)≤max{Cmax(η),τ+T}+T≤Cmax(η)+2TandTC(η)=(h+2)B. Furthermore,Cmax(η)−τ≤32(Cmax(opt)−τ).Z(η)Z(opt)≤Cmax(η)+2T+(h+2)BCmax(opt)+T+B≤32Cmax(opt)−12τ+2T+(h+2)BCmax(opt)+T+B≤1+12Cmax(opt)−12τ+T+(h+1)BCmax(opt)+T+BIf−12τ+T+(h+1)BT+B<12,Z(η)Z(opt)≤1+12; else,Z(η)Z(opt)≤1+12τ−12τ+T+(h+1)Bτ+T+B≤1+T+(h+1)Bτ+T+B≤1+T+B+hB(1+θ)(T+B)+hT≤1+θ.Case 2:T≤(1+θ)B. Suppose that there are h batches before Cmax(opt) and the last delivery time is τ. Thenτ≥hB(T+B)and all the jobs completed after τ are released after τ.Dmax(η)≤Cmax(η)+B(T+B)+TandTC(η)=(h+1)B.Z(η)Z(opt)≤Cmax(η)+B(T+B)+T+(h+1)BCmax(opt)+T+B≤32Cmax(opt)−12τ+B(T+B)+T+(h+1)BCmax(opt)+T+B≤1+12Cmax(opt)−12τ+B(T+B)+hBCmax(opt)+T+B.If−12τ+B(T+B)+hBT+B<12,Z(η)Z(opt)≤1+12; else,Z(η)Z(opt)≤1+12τ−12τ+B(T+B)+hBτ+T+B≤1+B(T+B)+hBτ+T+B≤1+hB+B(T+B)hB(T+B)+T+B≤1+BT+B.According to Corollary 8, the competitive ratio of H6 cannot be less thanmax{1+θ,1+BT+B},which completes the proof.□We consider that the number of vehicles is sufficient and that their capacity is sufficient for all the jobs. Similarly, we can see P7 as a special case of P6 withT=0.Corollary 9No on-line algorithm for P7 can have a competitive ratio less than 2, even if all processing times are 0.Jobs are scheduled on the machines with the LPT rule. At time lB, where l ≥ 1 is an integer, if there is no uncompleted job that has been released, then there is a batch to deliver all jobs .The competitive ratio for the on-line Algorithm H7 for P7 is 2, which is optimal.Hereafter, we consider the case that there is only one vehicle, that its capacity is finite and that the preemption of job processing is allowed.Corollary 11No on-line algorithm for P8 can have a competitive ratio less thanmax{1+θ,1+BT+B−B(T+B)(C−1)B(T+B)+T+B},even if all processing times are 0.When a new job is released, the McNaughton’s algorithm is applied to all the uncompleted jobs.WhenT>(1+θ)B,at time lT, where l ≥ 1 is an integer, then there is a batch to deliver as many completed jobs as possible.WhenT≤(1+θ)B,at timelB(T+B),where l ≥ 1 is an integer, then there is a batch to deliver as many completed jobs as possible.As Algorithm H8 minimizes Cmax, the analysis of the algorithm will be the same with that of H4.Corollary 12The competitive ratio for the on-line Algorithm H8 for P8 is 2.We consider that there is only one vehicle and that its capacity is finite.Corollary 13No on-line algorithm for P9 can have a competitive ratio less thanmax{1+θ,1+BT+B−B(T+B)(C−1)B(T+B)+T+B},even if all processing times are 0.Jobs are scheduled on the machines with the LPT-rule.WhenT>(1+θ)B,at time lT, where l > 1 is an integer, if the number of completed jobs is not less than C or there is no uncompleted job that has been released, then there is a batch to deliver as many completed jobs as possible.WhenT≤(1+θ)B,at the time oflB(T+B),where l > 1 is an integer, if the number of completed jobs is not less than C or there is no uncompleted job that has been released, then there is a batch to deliver as many completed jobs as possible.The on-line Algorithm H9 for P9 ismax{32+θ,32+BT+B}-competitive.Let η be the schedule obtained Algorithm H9. The proof has two parts for the two different cases of the algorithm.Case 1:T>(1+θ)B. Suppose τ is the last delivery time before ρmax(η) when there is an unfull batch. Note that if there is no such τ, letτ=0. As such, all the jobs processed after τ are released after τ, which means τ < Cmax(opt). Meanwhile, for every deliver time between τ and ρmax(η), there is either no batch or there is a full batch. Let h be the number of these full batches. At last, there will be a possible unfull batch at ρmax(η). Therefore, there will be more than hC jobs released after τ. In opt, there are at leasth+1batches after τ, that is,Dmax(opt)≥max{τ+(h+1)T,Cmax(opt)+T}andTC(opt)≥(h+1)B. For η, the worst case is that all the jobs are delivered after Cmax(η):Dmax(η)≤max{τ+T,Cmax(η)}+(h+1)T≤Cmax(η)+(h+2)TandTC(η)≤τTB+(h+1)B.Z(η)Z(opt)≤Cmax(η)+(h+2)T+τTB+(h+1)Bmax{τ+(h+1)T,Cmax(opt)+T}+(h+1)B≤32Cmax(opt)−12τ+(h+2)T+τTB+(h+1)Bmax{τ+(h+1)T,Cmax(opt)+T}+(h+1)B≤1+12Cmax(opt)−12τ+(h+1)T+τTBmax{τ+(h+1)T,Cmax(opt)+T}+(h+1)B≤32+(h+1)T+τTBmax{τ+(h+1)T,Cmax(opt)+T}+(h+1)B≤32+θ.Case 2:T≤(1+θ)B. We define the same τ and h with Case 1. As such, we haveDmax(opt)≥max{τ+(h+1)T,Cmax+T},TC(opt)≥(h+1)B,Dmax(η)≤Cmax(η)+(h+1)B(T+B)+TandTC(η)≤τB(T+B)B+(h+1)B.Z(η)Z(opt)≤Cmax(η)+(h+1)B(T+B)+T+τB(T+B)B+(h+1)Bmax{τ+(h+1)T,Cmax(opt)+T}+(h+1)B×32Cmax(opt)−12τ+(h+1)B(T+B)+T+τB(T+B)B+(h+1)Bmax{τ+(h+1)T,Cmax(opt)+T}+(h+1)B≤1+12Cmax(opt)−12τ+(h+1)B(T+B)+τB(T+B)Bmax{τ+(h+1)T,Cmax(opt)+T}+(h+1)B≤32+(h+1)B(T+B)+τB(T+B)Bmax{τ+(h+1)T,Cmax(opt)+T}+(h+1)B≤32+BT+B.□We consider that the number of vehicles is sufficient and that their capacity is finite.Corollary 14No on-line algorithm for P10 can have a competitive ratio less thanmax{1+θ,2−1C},even if all processing times are 0.Jobs are scheduled on the machines with the LPT-rule. At time lB, where l ≥ 1 is an integer, if there is no uncompleted job that has been released, then there are batches to deliver all completed jobs; otherwise there are only full bathes to deliver as many completed jobs as possible.The competitive ratio for the on-line Algorithm H10 for P10 is 2.Let η be the schedule obtained by Algorithm H10. Suppose τ is the last delivery time before ρmax(η) when there is no batch or not all batches are full. Note that if there is no such τ, letτ=0. As such, all the jobs processed after τ are released after τ, which means τ < Cmax(opt). Leth+1be the number of batches for the delivery time after τ, where only one possible batch at ρmax(η) is unfull and the other h batches are all full. Meanwhile, suppose that there are a full batches and b unfull batches at the delivery time no later than τ. As at every delivery time, there is at most one unfull batch, bB ≤ τ. Because the number of jobs is more than(a+h)C,there are at leasta+h+1batches in opt.Dmax(η)≤Cmax(η)+B,TC(η)=(a+b+h+1)B,Dmax(opt)=Cmax(opt)andTC(opt)≥(a+h+1)B.Z(η)Z(opt)≤Cmax(η)+B+(a+b+h+1)BCmax(opt)+(a+h+1)B≤32Cmax(opt)−12τ+B+(a+b+h+1)BCmax(opt)+(a+h+1)B≤1+12Cmax(opt)−12τ+B+bBCmax(opt)+(a+h+1)B≤1+12Cmax(opt)+12τ+BCmax(opt)+(a+h+1)B≤2.At last, we shall show that the ratio of the algorithm can achieve 2 for the following instance. At time 0, there is a job with 0 processing time released, and the ratio of the result of H10 to that of opt will achieve 2. This completes the proof.□We present a simulated experiment to demonstrate the run-time algorithm performance (H5 for P5 in particular) in normal scenarios and we show how the algorithms may be used in practice. We revisit the definition of problem P5 as follows. There are n jobsJ1,…,Jnfor a single customer with processing timep1,…,pn,released on-line at timer1,…,rn,respectively, and the manufacturer has a single machine. These jobs need to be processed on the machine and then delivered to the customer via a transportation system. There are a sufficient number of vehicles, each with capacity C. The cost of each shipment is B. The scheduling objective is to minimize the makespan and the total delivery cost:Dmax+TC. An instance of P5 can be defined by prescribing a set of the parameters n, pjand rj(j=1,2,…,n), C, and B. These parameters are determined according to the following assumptions:(1)The release of jobs follows a Poisson distribution with mean release interval λ, that is,rj−rj−1∼P(λ)forj=1,2,…,n,wherer0=0.The job processing time follows a uniform distribution in the interval [0, b], that is, pj∼ U(0, b) forj=1,2,…,n,where b is twice the mean processing time.The delivery cost follows a normal distribution with mean μ and standard deviation σ, that is, B ∼ N(μ, σ2).The vehicle capacity isC=2,C=5,orC=12.The total number of jobs is eithern=100orn=1000.Suppose that the cost of one shipment is stable. We chooseμ=20andσ=1for the delivery cost B. By choosing different values for λ, b, C, and n, instances are generated and scheduling is then executed. In all cases, 100 instances are generated and the results are the average of the 100 instances. The algorithm is implemented in the Matlab environment. Table 1shows the results forC=2.From Table 1 it is evident that the ratio never exceeds 1.23. In most cases, the result of the algorithm is very close to the result of the optimal off-line algorithm. The worst case occurs whenλ=20andb=8,that is, the mean release interval λ is almost equal to the mean unit delivery cost B (B ∼ N(20, 1)) and the mean processing time (b2) is not very large. This situation is consistent with the worst instance in the proof of the lower bound, in which jobs with zero processing time are released at time lB (where l is an integer). This result can be explained as follows. When the job release frequency is low and the processing time is not long, at every delivery point, many jobs are delivered in nonfull batches, whereas the off-line optimal schedule waits to deliver as many jobs as possible in full batches. Then the time-based objective function Dmax and the cost-based objective function TC may have similar values, and this situation seems to approach to the worst competitive ratio. When λ is not close to 20, the competitive ratio will be much better (e.g.,λ=3,10,50). In addition, when λ is equal to 20 but b is large enough (e.g.,λ=20,b=30), the results will approach those for the off-line optimal schedule. It is clear that these special situations for the processing time and job release frequency are responsible for the worst case.The run time never exceeds 0.005 seconds forn=1000and is much shorter forn=100,so the efficiency of H5 is very high. According to our experience in running algorithms such as GA (Genetic Algorithm), this run time is very short. The run time results forn=100andn=1000indicate that the algorithm tends to have polynomial time complexity. This means that the algorithm can easily be scaled to much larger problems. The algorithm results forC=5andC=12support this conclusion. Tables 2and 3give similar results forC=5andC=12,respectively. The results show that the competitive ratio increases with C. This may imply that H5 will deliver more nonfull batches to delivery points as the vehicle capacity increases; by contrast, the off-line optimal algorithm delivers fewer batches that are fuller. The results for C suggest that better H5 performance can be achieved according to the C value, in agreement with the discussion in Section 3.5.From the results of Algorithm H5, it can be inferred that the 10 algorithms can perform well for normal scenarios and are robust to the worst case owing to their similar structure.

@&#CONCLUSIONS@&#
We proposed 10 on-line supply chain scheduling problems under single-machine and parallel-machine configurations for one customer that are more realistic but more complex than in previous work (Averbakh, 2010; Averbakh and Xue, 2007; Chen, 2005). The problems were represented using the notation proposed by Chen (2010). We developed algorithms for the problems and conducted a simulation for one of them. The algorithms are robust and efficient according to competitive ratio analysis. In particular, the algorithms for P1, P2, P6, and P7 can achieve optimal results in terms of the competitive ratio and lower bound. For P5, the optimal result can be obtained for a special case. For the other problems, the larger the parameter C, the better the result. Several conclusions, which may be limited generalizability, were drawn from the P5 simulation: (1) the algorithm for P5 tends to have polynomial time complexity; (2) the P5 worst case corresponds to a situation in which the job processing time is short and the job release frequency is close to the value of the unit delivery cost, but such a situation seems to be rare; and (3) the capacity limit C is a very sensitive parameter, but the algorithm performs well for different C values.The study results can likely be applied to real-world problems. The problem studied here can be generalized according to the infrastructure–substance (I-S) architecture of manufacturing-service systems (Zhang and van Luttervelt, 2011). According to the I-S architecture, a system has two layers: infrastructure and substance, and the substance “flows” over the infrastructure. For instance, machinery for processing jobs and transportation systems are infrastructure components. Jobs or products are substances that are processed on the machinery and then transported. Thus, the infrastructure system in our study comprises one production center (there may be many centers, but at the level considered here, one center is sufficient to describe the problem of interest) and one route for delivery (although there may be a network of roads from the production center to the customer, one route is sufficient to describe the problem of interest at the level considered here). The substance system comprises jobs that are processed in the production center and transported via road to the customer. There is no limit to the capacity of the production center, but there is a limit to the capacity of the vehicle. Note that the word “vehicle” is a generic term denoting all possible transport modes (truck, train, ship, plane). The scheduling problem considered here involves determining: (1) when a job should be processed, (2) which machine a job should be assigned to, (3) which batch a processed job should go to, and (4) when a batch should leave the center for delivery to the customer; the objectives are to minimize the total cost and total time for the whole process, including both production and transportation.The generic problem considered here corresponds to several real world problems. For instance, suppose a chemical plant explosion occurs in a town and that victims are transported to a hospital in the town. The demand for medical resources suddenly increases unpredictably, and may soon overwhelm the capacity of the hospital. Therefore, the hospital has to place a timely call to a medical resource center to request the delivery of medical resources. In this case the hospital is the customer and the resource center is the supplier. The scheduling problem for these medical resources in this real-world problem can use the algorithms developed in our study. Consider a real-world manufacturing problem. Suppose that manufacturing firm A1 assembles products for customers and uses parts supplied by company A2 in a different location, so transportation of the parts is required. In this case, A1 is the customer in the generic problem and A2 is the production center. A2 can solve scheduling problems to meet the demands of A1 using our algorithms. Another example is food supply to meet requests from a customer who is not located in the same place as the restaurant.The main contributions of the paper are: (1) the definition of new problems in on-line supply chain scheduling for single-machine and parallel-machine configuration with one customer; (2) the development of algorithms (optimal or approximate) for these problems; and (3) the development of an optimal algorithm for one particular problem (P5) for with the special conditions.Future work will focus on optimal algorithms for P3, P4, P8, P9, and P10 for some special cases. Development of optimal algorithms is feasible for these problems as an optimal algorithm for P5 withC=2was successfully developed. We will also investigate cases with more than one customer for different machine configurations in the future. Furthermore, some assumptions underlying the present study will be relaxed to be more in line with real situations. For example, there should be more than one factory to supply jobs.