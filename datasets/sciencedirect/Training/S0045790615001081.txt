@&#MAIN-TITLE@&#
User preference-based automatic orchestration of web services using a multi-agent

@&#HIGHLIGHTS@&#
The proposed approach uses a multi-agent system to automate the process.It increases the overall system performance over traditional approach.It supports several QoS parameter such as reliability, throughput, response time and reusability.The graph depicts the response time between proposed and traditional approach.

@&#KEYPHRASES@&#
Service-oriented architecture,Web service,Web service composition,Multi-agent,

@&#ABSTRACT@&#
Service-oriented architecture (SOA) is a self-contained service with a collection of services. Services communicate with each other using a web service. Web services use a collection of open protocols and standards for communication between different web services and their applications. In today’s environment, users are not satisfied with a single web service. To fulfill the users’ needs, two or more atomic services must be combined to provide a single complex service. Hence several atomic web services must be orchestrated based on user preference by using a multi-agent system. In the traditional approach, the orchestration of web services is a manual process. The proposed system reduces human intervention and supports the orchestration of atomic web services into a complex service by using a multi-agent system. Therefore, this paper addresses the automatic orchestration by using a multi-agent i.e., two agents. The first agent is used to select an appropriate web service from the available atomic service. The second agent is used to orchestrate the selected web services to form a complex service based on a user’s requirement and quality of service (QoS).

@&#INTRODUCTION@&#
Service-oriented architecture (SOA) is a collection of services that communicate with each other through the help of web services. SOA [1] is a triangular model. SOA services have certain characteristics, such as being autonomous, discoverable, composable, and reusable and having loosely coupled services. The web services are used to implement the SOA. SOA plays three major roles, namely service provider, service consumer and service registry. The service provider creates a web service and publishes it to the service registry. The service consumer finds the services from the service registry and then binds them with the service provider to access the service whenever they need. Currently, users are not satisfied with a single web service. Two or more atomic web services are combined into a complex service in order to fulfill the users’ needs. Some quality of service (QoS) [2] parameters such as availability, response time, throughput and reliability, must be considered before the orchestration of web services. Therefore, it is a tough task to select a service according to a specific requirement and to build a composite complex web service. In the traditional web service composition approach, orchestration is performed manually. The business process execution language for web services (BPEL4WS)-based, workflow-based, and template-based approaches are used. Recently, a multi-agent system approach has been used to compose a complex web service from a set of atomic web services. Based on users’ requests and QoS parameters, the web services are selected by agents. In the proposed system, orchestration is performed automatically by agents, which reduces human effort and response time. Here, the autonomous and negotiation agents orchestrate web services. Autonomous agents have a high degree of self-determination. Autonomous agents decide for themselves what action to perform and when. These autonomous agents need to communicate with other agents to achieve their goal. A negotiation agent is used to bind the web services with a set of selected web services to build a complex web service. Negotiation agents work based on certain parameters, such as the performance and cost of web services, quality of service, reliability, availability and interoperability. By using these two agents, the performance of the proposed system is improved.The organization of this paper is as follows: first, the definition of a web service is given. Second, the web service composition process is depicted and then the principle of a multi-agent system is defined. Finally the multi-agent based framework for web service composition is proposed and the response time comparison between both the traditional and agent systems is shown in the results analysis.

@&#CONCLUSIONS@&#
