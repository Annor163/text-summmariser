@&#MAIN-TITLE@&#
Step out–Step in sequencing games

@&#HIGHLIGHTS@&#
We introduce a new class of relaxed sequencing games, SoSi sequencing games.We prove that SoSi games have a non-empty core.A polynomial algorithm is provided to derive the coalitional values in SoSi games.

@&#KEYPHRASES@&#
(Cooperative) game theory,Sequencing games,Core,

@&#ABSTRACT@&#
In this paper a new class of relaxed sequencing games is introduced: the class of Step out–Step in sequencing games. In this relaxation any player within a coalition is allowed to step out from his position in the processing order and to step in at any position later in the processing order. First, we show that if the value of a coalition in a relaxed sequencing game is bounded from above by the gains made by all possible neighbor switches, then the game has a non-empty core. After that, we show that this is the case for Step out –Step in sequencing games. Moreover, this paper provides a polynomial time algorithm to determine the values of the coalitions in Step out–Step in sequencing games.

@&#INTRODUCTION@&#
In this paper one-machine sequencing situations are considered with a queue of players in front of a single machine, each with one job to be processed. Such a situation specifies for each player the processing time, time the machine takes to process the corresponding job of this player. In addition, it is assumed that each player has a linear cost function specified by an individual cost parameter. Moreover, there are no restrictive assumptions as due dates, ready times or precedence constraints imposed on the jobs. To minimize total joint costs, Smith (1956) showed that the players must be ordered with respect to weakly decreasing urgency, defined as the ratio of the individual cost parameter and the processing time. Assuming the presence of an initial order, this reordering will lead to cost savings. To analyze how to divide the maximal cost savings among the players, Curiel, Pederzoli, and Tijs (1989) introduced cooperative sequencing games. They show that sequencing games are convex and therefore have a non-empty core. This means that it is always possible to find a coalitionally stable cost savings division.Several classes of sequencing games have been discussed before. These classes are all based on different features of the underlying sequencing situations, for example grouping of jobs, stochastic data, dynamic/multistage situations, multiple jobs and/or machines. Both Gerichhausen and Hamers (2009) and Grundel, Çiftçi, Borm, and Hamers (2013) applied grouping of jobs, but in a different way. Gerichhausen and Hamers (2009) considered partitioning sequencing games where jobs arrive in batches and those jobs that arrive in earlier batches have some privilege over jobs in later arrived batches. Grundel et al. (2013) introduced family sequencing situations and included the concept of set-up times in their model. Alparslan-Gök, Branzei, Fragnelli, and Tijs (2013) and Klijn and Sánchez (2006) considered stochastic data in sequencing games. Alparslan-Gök et al. (2013) considered sequencing games where uncertainty in the parameters (costs per time unit and/or processing time) is involved by means of interval data. Klijn and Sánchez (2006) considered the arrival pattern of the jobs to be stochastic, so they assumed that no initial order is specified. In multi-stage sequencing situations, the order arrived at after each stage becomes the starting order for the next stage. Multi-stage sequencing situatons are for example considered by Curiel (2015). In Lohmann, Borm, and Slikker (2014) another type of dynamic sequencing situations is considered, in which a player enters the system at the moment the player starts to prepare the machine for his job (there is a predecessor dependent set-up time) and leaves the system as soon as his job is finished. Çiftçi, Borm, Hamers, and Slikker (2013) considered machines which can simultaneously process multiple jobs. Multiple machine sequencing games are for example discussed in Estévez-Fernández, Mosquera, Borm, and Hamers (2008), Slikker (2006a) and Slikker (2005). Key questions in all of the above literature are finding optimal orders, allocation rules and properties of the corresponding cooperative games.A common assumption underlying the definition of the values of the coalitions in many sequencing games is that two players of a certain coalition can only swap their positions if all players between them are also members of the coalition. Curiel, Potters, Prasad, Tijs, and Veltman (1993) argued that the resulting set of admissible reorderings for a coalition is too restrictive because there may be more reorderings possible which do not hurt the interests of the players outside the coalition. Relaxed sequencing games arise by relaxing the classical assumption about the set of admissible rearrangements for coalitions in a consistent way. In Curiel et al. (1993) four different relaxed sequencing games are introduced. These relaxations are based on requirements for the players outside the coalition regarding either their position in the processing order (position unchanged/may change) or their starting time (starting time unchanged/not increased). This means that a player in a certain coalition is allowed to jump over players outside the coalition as long as the exogenously imposed requirements are satisfied. As a consequence, a player may be moved to a position earlier in the processing order when another player moves backwards. Slikker (2006b) proved non-emptiness of the core for all four types of relaxed sequencing games considered in Curiel et al. (1993). In Van Velzen and Hamers (2003) two further classes of relaxed sequencing games are considered. In the first class there is a specific player allowed to switch with a player in front of him in the processing order if this player has a larger processing time, and with a player behind him in the processing order if this player has a smaller processing time. In the second class there are fixed time slots and thus only jobs with equal processing times can be switched. Van Velzen and Hamers (2003) proved that both classes of relaxed sequencing games have a non-empty core. In fact, a lot of attention has been paid to non-emptiness of the core of relaxed sequencing games. However, surprisingly enough, up to now for none of the relaxed sequencing games described above attention has been paid to finding polynomial time algorithms determining optimal processing orders for all possible coalitions.In this paper another class of relaxed sequencing games is introduced: Step out–Step in (SoSi) sequencing games. This relaxation is intuitive from a practical point of view, because in this relaxation a member of a coalition is also allowed to step out from his position in the processing order and to step in at any position somewhere later in the processing order. In particular, each player outside the coalition will not obtain any new predecessors, possibly only fewer. For the time being we apply this relaxation on the classical sequencing situation as introduced by Curiel et al. (1989). However, this relaxation can also applied to other types of sequencing situations. We start with proving non-emptiness of the core for the class of relaxed sequencing games where the values of the coalitions are bounded from above by the value of this coalition in a classical sequencing game if this coalition would have been connected. After that, we show that the class of SoSi sequencing games belongs to this class, and thus every SoSi sequencing game has a non-empty core. Moreover, we provide a polynomial time algorithm determining an optimal processing order for a coalition and the corresponding value. The algorithm considers the players of the coalition in an order that is the reverse of the initial order, and for every player the algorithm checks whether moving the player to a position later in the processing order is beneficial. This algorithm works in a greedy way in the sense that every player is moved to the position giving the highest cost savings at that moment. Moreover, every player is considered in the algorithm exactly once and every player is moved to another position in the processing order at most once.The organization of this paper is as follows. Section 2 recalls basic definitions on one-machine sequencing situations and formally introduces SoSi sequencing games. In Section 3 it is shown that every SoSi sequencing game has a non-empty core. Section 4 provides a polynomial time algorithm to determine the values of the coalitions in a SoSi sequencing game. Finally, in Section 5 we summarize our results and provide some directions for future research. In particular we consider another type of relaxed sequencing games, so-called Step out sequencing games.A one-machine sequencing situation can be summarized by a tuple (N, σ0, p, α), whereN={1,…,n}is the set of players, each with one job to be processed on the single machine. A processing order of the players can be described by a bijectionσ:N→{1,…,n}. More specifically,σ(i)=kmeans that player i is in position k. Let Π(N) denote the set of all such processing orders. The processing order σ0 ∈ Π(N) specifies the initial order. The processing time pi> 0 of the job of player i is the time the machine takes to process this job. The vectorp∈R++Nsummarizes the processing times. Furthermore, the costs of player i of spending t time units in the system is assumed to be determined by a linear cost functionci:[0,∞)→Rgiven byci(t)=αitwith αi> 0. The vectorα∈R++Nsummarizes the coefficients of the linear cost functions. It is assumed that the machine starts processing at timet=0,and also that all jobs enter the system att=0.Let Ci(σ) be the completion time of the job of player i with respect to processing order σ via the associated semi-active schedule, i.e., a schedule in which there is no idle time between the jobs. Hence, the completion time of player i equalsCi(σ)=∑j∈N:σ(j)≤σ(i)pj.A processing order is called optimal if the total joint costs ∑i ∈ NαiCi(σ) are minimized. In Smith (1956) it is shown that in each optimal order the players are processed in non-increasing order with respect to their urgency uidefined byui=αipi. Moreover, with gijrepresenting the gain made by a possible neighbor switch of i and j if player i is directly in front of player j, i.e., withgij=max{αjpi−αipj,0},the maximal total cost savings are equal to(1)∑i∈NαiCi(σ0)−∑i∈NαiCi(σ*)=∑i,j∈N:σ0(i)<σ0(j)gij,where σ* denotes an optimal order.A coalitional game is a pair (N, v) whereN={1,…,n}denotes a non-empty, finite set of players andv:2N→Rassigns a monetary payoff to each coalition S ∈ 2N, where 2Ndenotes the collection of all subsets of N. The value v(S) denotes the highest payoff the coalition S can jointly generate by means of optimal cooperation without help of players in N\S. By convention,v(∅)=0.To tackle the allocation problem of the maximal cost savings in a sequencing situation (N, σ0, p, α) one can analyze an associated coalitional game (N, v). Here N naturally corresponds to the set of players in the game and, for a coalition S ⊂ N, v(S) reflects the maximal cost savings this coalition can make with respect to the initial order σ0. In order to determine these maximal cost savings, assumptions must be made on the possible reorderings of coalition S with respect to the initial order σ0.The classical (strong) assumption is that a member of a certain coalition S ⊂ N can only swap with another member of the coalition if all players between these two players, according to the initial order, are also members of S. Given an initial order σ0 the set of admissible orders for coalition S in a classical sequencing game is denoted byAc(σ0,S). This leads to the definition of a classical sequencing game. However, note that the resulting set of admissible reorderings for a coalition is quite restrictive, because there may be more reorderings possible which do not hurt the interests of the players outside the coalition.In a SoSi sequencing game the classical assumption is relaxed by additionally allowing that a member of the coalition S steps out from his position in the processing order and steps in at any position later in the processing order. Hence, a processing order σ is called admissible for S in a SoSi sequencing game if(i)P(σ, i) ⊂ P(σ0, i) for all i ∈ N\S,σ−1(σ(i)+1)∈F(σ0,i)for all i ∈ N\S,whereP(σ,i)={j∈N|σ(j)<σ(i)}denotes the set of predecessors of player i with respect to processing order σ andF(σ,i)={j∈N|σ(j)>σ(i)}denotes the set of followers. Condition (i) ensures that no player outside S obtains any new predecessors. As a result, a player who steps out from his position in the processing order, steps in at a position later, and thus not earlier, in the processing order. Note that from an optimality point of view it is clear that we can assume without loss of generality that a member of S who steps out, only steps in at a position directly behind another member of the coalition S. Therefore, condition (ii) requires that each player outside S has a direct follower who was already a follower of him with respect to σ0. Given an initial order σ0 the set of admissible orders for coalition S is denoted byA(σ0,S).Correspondingly, the Step out–Step in (SoSi) sequencing game (N, v) is defined byv(S)=maxσ∈A(σ0,S)∑i∈Sαi(Ci(σ0)−Ci(σ)),for all S ⊂ N, i.e., the value of a coalition is equal to the maximal cost savings a coalition can achieve by means of admissible rearrangements. A processing orderσ*∈A(σ0,S)is called optimal for S if∑i∈Sαi(Ci(σ0)−Ci(σ*))=maxσ∈A(σ0,S)∑i∈Sαi(Ci(σ0)−Ci(σ)).SinceA(σ0,S)⊃Ac(σ0,S),the value of S in a SoSi sequencing game is at least its value in the classical sequencing game. For σ ∈ Π(N), S is called connected with respect to σ if for all i, j ∈ S and k ∈ N such that σ(i) < σ(k) < σ(j) it holds that k ∈ S. Note that for each coalition that is connected with respect to σ0 the set of admissible orders in the SoSi sense equals the set of admissible orders in the classical sense. This means that the value of any connected coalition is the same in the SoSi sequencing game and in the classical sequencing game. Therefore, similar to (1), it readily can be concluded that the value of a coalition S that is connected with respect to σ0 is given by(2)v(S)=∑i,j∈S:σ0(i)<σ0(j)gij.Example 2.1Consider a one-machine sequencing situation withN={1,2,3}. The vector of processing times isp=(3,2,1)and the vector of coefficients corresponding to the linear cost functions isα=(4,6,5). Assume that the initial order isσ0=(123). It then follows thatg12=10,g13=11andg23=4.Let (N, v) be the corresponding SoSi sequencing game. Table 1presents the value of all coalitions. Note that the values of the coalitions in the game (N, v) are equal to the values of the coalitions in the classical sequencing game of this one-machine sequencing situation except for the only disconnected coalition, coalition {1, 3}. For instance, for the grand coalition N it follows from (2) thatv(N)=∑i,j∈N:σ0(i)<σ0(j)gij=g12+g13+g23=25.The disconnected coalition {1, 3} cannot save costs in the classical sequencing game because there exists no admissible order other than the initial order. However, in the SoSi sequencing game the set of admissible orders consists of two elements11Processing order (2 3 1) means that player 2 is in the first position, player 3 in the second position and player 1 in the last position.:A(σ0,{1,3})={(123),(231)}.These processing orders are illustrated in Fig. 1. Hence, the value of coalition {1, 3} is given byv({1,3})=max{0,∑i∈{1,3}αi(Ci((123))−Ci((231)))}=max{0,−12+15}=3.Recall that the core C(v) of a game (N, v) is formally defined as the set of all allocationsx∈RNsuch that∑i∈Nxi=v(N)(efficiency) and ∑i ∈ Sxi≥ v(S) for all S ⊂ N (stability). Given an initial order σ0, assume that the set of admissible ordersAr(σ0,S)for coalition S satisfiesAc(σ0,S)⊂Ar(σ0,S),for all S ⊂ N. Then, the corresponding relaxed sequencing game (N, v) is defined byv(S)=maxσ∈Ar(σ0,S)∑i∈Sαi(Ci(σ0)−Ci(σ)),for all S ⊂ N. Note that a SoSi sequencing game indeed is a relaxed sequencing game in the above sense. The following theorem proves non-emptiness of the core of any relaxed sequencing game (N, v) where the value of a coalition is bounded from above by the gains made by all possible neighbor switches, i.e.,v(S)≤∑i,j∈S:σ0(i)<σ0(j)gij,for all S ⊂ N. Notice that if a relaxed sequencing game (N, v) satisfies this condition, then we havev(S)=∑i,j∈S:σ0(i)<σ0(j)gij,for every connected coalition S ⊂ N.Theorem 3.1Let (N, σ0, p, α) be a one-machine sequencing situation and let (N, v) be a corresponding relaxed sequencing game such that(3)v(S)≤∑i,j∈S:σ0(i)<σ0(j)gij,for all S ⊂ N. Then, (N, v) has a non-empty core.Let π ∈ Π(N) be a connected order with respect to σ0, i.e., π is such that the set {j ∈ N|π(j) ≤ π(i)} is connected with respect to σ0 for all i ∈ N. We show that the corresponding marginal vector mπ(v) belongs to the core C(v).Let i ∈ N and denoteTi={j∈N|π(j)<π(i)}. Because π is connected it follows that either Ti⊂ P(σ0, i) or Ti⊂ F(σ0, i) and therefore we havemiπ(v)=v(Ti∪{i})−v(Ti)=∑j,k∈Ti∪{i}:σ0(j)<σ0(k)gjk−∑j,k∈Ti:σ0(j)<σ0(k)gjk={∑j∈TigjiifTi⊂P(σ0,i)∑j∈TigijifTi⊂F(σ0,i),where the second equality follows from the fact that the coalitions Tiand Ti∪{i} are connected with respect to σ0.Then, for S ⊂ N it holds that∑i∈Smiπ(v)=∑i∈S:Ti⊂P(σ0,i)∑j∈Tigji+∑i∈S:Ti⊂F(σ0,i)∑j∈Tigij≥∑i∈S:Ti⊂P(σ0,i)∑j∈Ti:j∈P(σ0,i)∩Sgji+∑i∈S:Ti⊂F(σ0,i)∑j∈Ti:j∈F(σ0,i)∩Sgij=∑i∈S:Ti⊂P(σ0,i)∑j∈Ti:j∈P(σ0,i)∩Sgji+∑i∈S:Ti⊂F(σ0,i)∑j∈Ti:j∈P(σ0,i)∩Sgji+∑i∈S:Ti⊂P(σ0,i)∑j∈Ti:j∈F(σ0,i)∩Sgij+∑i∈S:Ti⊂F(σ0,i)∑j∈Ti:j∈F(σ0,i)∩Sgij=∑i∈S∑j∈Ti:j∈P(σ0,i)∩Sgji+∑i∈S∑j∈Ti:j∈F(σ0,i)∩Sgij,=∑j∈S∑j∈Ti:i∈F(σ0,j)∩Sgji+∑i∈S∑j∈Ti:j∈F(σ0,i)∩Sgij=∑i∈S∑i∈Tj:j∈F(σ0,i)∩Sgij+∑i∈S∑j∈Ti:j∈F(σ0,i)∩Sgij=∑i∈S∑j∉Ti:j∈F(σ0,i)∩Sgij+∑i∈S∑j∈Ti:j∈F(σ0,i)∩Sgij=∑i∈S∑j∈F(σ0,i)∩Sgij=∑i,j∈S:σ0(i)<σ0(j)gij≥v(S).In the above derivation, the equations follow from-the fact thatP(σ0,i)∩F(σ0,i)=∅for all i ∈ N (third equality),interchanging the summations of the first term (fifth equality),interchanging the indices of the summations of the first term (sixth equality),the fact that i ∈ Tjif and only ifj∉Tifor all i, j ∈ N with i ≠ j (seventh equality).Note that ifS=Nthe inequalities become equalities. This proves that mπ(v) ∈ C(v).□To show that every SoSi sequencing game has a non-empty core, it remains to be proven that SoSi sequencing games satisfy condition (3) in Theorem 3.1. We start with some basic definitions and notations regarding components, modified components and urgency respecting orders. For S ∈ 2N\{∅}, σ ∈ Π(N) and s, t ∈ N with σ(s) < σ(t), defineSσ(s,t)={i∈S|σ(s)<σ(i)<σ(t)},S¯σ(s,t)={i∈N∖S|σ(s)<σ(i)<σ(t)},Sσ[s,t]={i∈S|σ(s)≤σ(i)≤σ(t)},S¯σ[s,t]={i∈N∖S|σ(s)≤σ(i)≤σ(t)}.The sets of players Sσ[s, t),S¯σ[s,t),Sσ(s, t] andS¯σ(s,t]are defined in a similar way.For σ ∈ Π(N), a connected coalition T ⊂ S with respect to σ is called a component of S with respect to σ if T ⊂ T′ ⊂ S and T′ connected with respect to σ implies thatT′=T. Let h(σ, S) ≥ 1 denote the number of components of S with respect to σ. The partition of S into components with respect to σ is denoted byS∖σ={S1σ,S2σ,…,Sh(σ,S)σ}. Furthermore, we defineS¯0σ={i∈N∖S|σ(i)<σ(j)forallj∈S1σ},S¯h(σ,S)σ={i∈N∖S|σ(i)>σ(j)forallj∈Sh(σ,S)σ},S¯kσ={i∈N∖S|σ(j)<σ(i)<σ(l)forallj∈Skσ,foralll∈Sk+1σ},for allk∈{1,…,h(σ,S)−1}(cf. Fig. 2). Notice thatS¯0σandS¯h(σ,S)σmight be empty sets, butS¯kσ≠∅for allk∈{1,…,h(σ,S)−1}.Note that for given S ⊂ N it is possible that a processing orderσ∈A(σ0,S)contains less components for S than σ0, because all players of a certain component with respect to S may step out from this component and join other components. Define modified componentsS1σ0,σ,⋯,Sh(σ0,S)σ0,σbySkσ0,σ={i∈S|σ(j)<σ(i)<σ(l)forallj∈S¯k−1σ0,foralll∈S¯kσ0},for allk∈{1,…,h(σ0,S)}. Note thatSkσ0,σmight be empty for some k while⋃k=1h(σ0,S)Skσ0,σ=S,and⋃k=1lSkσ0,σ⊂⋃k=1lSkσ0,for alll∈{1,…,h(σ0,S)}.A processing orderσ∈A(σ0,S)is called urgency respecting if(i)(σ is componentwise optimal) for alli,j∈Skσ0,σwithk∈{1,…,h(σ0,S)}:σ(i)<σ(j)⇒ui≥uj.(σ satisfies partial tiebreaking) for alli,j∈Skσ0withk∈{1,…,h(σ0,S)}:ui=uj,i<j⇒σ(i)<σ(j).The partial tiebreaking condition ensures that if there are two players with the same urgency in the same component of S with respect to σ0, then the player with the lowest index is earlier in processing order σ. Note that the partial tiebreaking condition does not imply anything about the relative order of two players with the same urgency who are in the same component of S with respect to σ but who were in different components of S with respect to σ0. Therefore, an urgency respecting order does not need to be unique. Clearly, there always exists an optimal order for S that is urgency respecting. The partial tiebreaking condition is required to make sure that there is a well-defined procedure of consecutive movements to go from the initial order σ0 to the urgency respecting order σ, as is explained later in this section.Next, defineσ0S∈A(σ0,S)to be the unique urgency respecting processing order such thatSkσ0,σ0S=Skσ0,for allk∈{1,…,h(σ0,S)}.For a processing order σ ∈ Π(N) and i, j ∈ N, with σ(i) < σ(j), we define [i, j]σ to be the processing order that is obtained from σ by moving player i to the position directly behind player j, i.e.,([i,j]σ)(s)={σ(s)ifs∉Nσ[i,j]σ(s)−1ifs∈Nσ(i,j]σ(j)ifs=i,for every s ∈ N (see Fig. 3).In a SoSi sequencing game there are two types of operations allowed for a coalition S given the initial order σ0. A type I operation is a swap of adjacent pairs in the same component of S. A type II operation is a move from a player in S to the position directly behind another player of S within one of the subsequent components.An urgency respecting processing orderσ∈A(σ0,S)can always be obtained with the operations described above from the initial order σ0 via the processing orderσ0S. In order to obtain the processing orderσ0Sfrom the initial order σ0 only type I operations are performed, while for obtaining the processing order σ fromσ0Sonly type II operations need to be performed. These type II operations can be chosen in such a way that the moved player is already on the correct urgency respecting position in his new component, as demonstrated below.Letσ∈A(σ0,S)be urgency respecting. Define R(σ) as the set of players who switch component, i.e.,(5)R(σ)={i∈S|i∈Skσ0,i∈Slσ0,σwithk,l∈{1,…,h(σ0,S)}suchthatl>k}.Ifσ≠σ0S,then |R(σ)| ≥ 1. Next, define r1(σ) ∈ R(σ) such thatσ0S(r1(σ))≥σ0S(r),for all r ∈ R(σ) and m1(σ) ∈ S withm1(σ)∉R(σ),such thatσ(m1(σ))<σ(r1(σ))andσ(m1(σ))≥σ(j),for all j ∈ S withj∉R(σ)and σ(j) < σ(r1(σ)). Note that m1(σ) is well-defined becauseσ0S(m1(σ))>σ0S(r1(σ))due to condition (ii) of admissibility. Definingτσ,S,1=[r1(σ),m1(σ)]σ0S,τσ, S, 1 is an urgency respecting and admissible order for S. Intuitively, player r1(σ) is the first player who is moved in order to go from the orderσ0Sto the order σ. Moreover, m1(σ) is the player where player r1(σ) must be positioned behind.Fork∈{2,…,|R(σ)|},recursively, definerk(σ)∈R(σ)∖{r1(σ),…,rk−1(σ)}such thatσ0S(rk(σ))≥σ0S(r),for allr∈R(σ)∖{r1(σ),…,rk−1(σ)}. Moreover, define mk(σ) ∈ S withmk(σ)∉R(σ)∖{r1(σ),…,rk−1(σ)}such thatσ(mk(σ))<σ(rk(σ))andσ(mk(σ))≥σ(j),for all j ∈ S withj∉R(σ)∖{r1(σ),…,rk−1(σ)}and σ(j) < σ(rk(σ)), and, finally, set(6)τσ,S,k=[rk(σ),mk(σ)]τσ,S,k−1.Note that mk(σ) is well-defined becauseτσ,S,k−1(mk(σ))>τσ,S,k−1(rk(σ))due to condition (ii) of admissibility. Moreover, τσ, S, kis an admissible urgency respecting order for S (because σ is urgency respecting) andτσ,S,|R(σ)|=σ.For notational convenience we define τσ, S, 0 to beσ0S.An illustration of the procedure described above can be found in the following example.Example 3.1Consider a one-machine sequencing situation (N, σ0, p, α) withS={1,2,⋯,10}, such that σ0(k) < σ0(l) if and only if k < l, for k, l ∈ S. Moreover, assume that the components of coalition S with respect to σ0 are given byS1σ0={1,2,3},S2σ0={4,5},S3σ0={6}andS4σ0={7,8,9,10},with the urgencies of the players in S specified in Table 2.In Fig. 4the orders σ0 andσ0S(the first two processing orders) are illustrated, together with an urgency respecting orderσ∈A(σ0,S)(the last processing order) for whichS1σ0,σ={3},S2σ0,σ={1,4},S3σ0,σ=∅andS4σ0,σ={2,5,6,7,8,9,10}.Hence, from (5) it follows thatR(σ)={1,2,5,6},andr1(σ)=6,r2(σ)=5,r3(σ)=2andr4(σ)=1.Moreover,m1(σ)=7,m2(σ)=6,m3(σ)=7andm4(σ)=4.The orders τσ, S, 1, τσ, S, 2, τσ, S, 3 and τσ, S, 4 are depicted in Fig. 4 as well. Sinceτσ,S,4=σwe find thatσ=[1,4][2,7][5,6][6,7]σ0S.Now we are ready to prove non-emptiness of the core of SoSi sequencing games.Theorem 3.2Every SoSi sequencing game has a non-empty core.22This result can also be obtained using Theorem 5.1 in Slikker (2006b), but the current proof via Theorem 3.1 is in our opinion more elegant.Clearly, it suffices to show that SoSi sequencing games satisfy condition (3) in Theorem 3.1. Let (N, σ0, p, α) be a one-machine sequencing situation and let (N, v) be the corresponding SoSi sequencing game. Next, let S ⊂ N and let σ* be an urgency respecting optimal order for coalition S. Because of (2) we can assume without loss of generality that S is not connected. We define a special processing order θ0 such that the coalition S is connected with respect to θ0. Thereafter, all type I and type II operations that are used to obtain σ* from σ0 viaσ0Sare performed on the processing order θ0.Denote by Q the set of players outside S and positioned between two components of S according to σ0, i.e.,Q=⋃k=1h(σ0,S)−1S¯kσ0.Consider a one-machine sequencing situation (N, θ0, p, α) with N, p and α as defined above and θ0 an initial order such that1.θ0(i)=σ0(i)foralli∈N∖(S∪Q),σ0(i) < σ0(j)⇒θ0(i) < θ0(j) for all i, j ∈ S,min{θ0(i)|i∈S}=min{σ0(i)|i∈S},max{θ0(i)|i∈S}=min{σ0(i)|i∈S}+|S|−1.Hence, the order θ0 is derived from σ0 in such a way that-the position of the players outside S∪Q has not been changed,the relative order between the players in S remains the same,the players in S are moved forward as far as possible.As a consequence, all players in Q are positioned in an arbitrary way betweenSh(σ0,S)σ0andS¯h(σ0,S)σ0according to θ0. In particular, S is a connected coalition with respect to θ0 (cf. Fig. 5).Denote processing orderθ^0∈A(θ0,S)such that1.θ^0(i)=θ0(i)for alli∉S,σ0S(i)<σ0S(j)⇒θ^0(i)<θ^0(j)for all i, j ∈ S.Hence, the orderθ^0is obtained from θ0 in such a way that-the position of the players outside S has not been changed,such that the relative order between the players in S is the same as their relative order inσ0S.Obviouslyθ^0can be obtained from θ0 in exactly the same way asσ0Sfrom σ0 using the same operations of type I, conducted in the same order. Note that each operation results in the same cost difference. Therefore,(7)∑i∈Sαi(Ci(σ0)−Ci(σ0S))=∑i∈Sαi(Ci(θ0)−Ci(θ^0)).Observe that if the order σ0 is already urgency respecting, i.e., ifσ0S=σ0,then alsoθ^0=θ0and thus (7) still holds.Next, letR=R(σ*),rk=rk(σ*)andmk=mk(σ*)for allk∈{1,…,|R|}as defined in (5) such thatσ*=[r|R|,m|R|]⋯[r2,m2][r1,m1]σ0S.Define the processing order θ* byθ*=[r|R|,m|R|]…[r2,m2][r1,m1]θ^0.Remember, if|R|=0,thenσ*=σ0Sand thus alsoθ*=θ^0. The processing order θ* is obtained fromθ^0in the same way as σ* is obtained fromσ0Susing the same type II operations, conducted in the same order. Note that these operations are indeed valid due to the definition ofθ^0. Obviously, θ* is an admissible order for S in the sequencing situation (N, θ0, p, α). Abbreviateτσ*,S,kfork∈{0,1,…,|R|}as defined in (6) byσ^k. Moreover, setθ^k=[rk,mk]…[r2,m2][r1,m1]θ^0,for allk∈{0,1,…,|R|}. Notice thatθ^|R|=θ*.Letk∈{1,…,|R|}and consider the operation [rk, mk] performed onσ^k−1andθ^k−1. Then,∑i∈Sαi(Ci(σ^k−1)−Ci(σ^k))=(∑i∈Sσ^k−1(rk,mk]αi)prk−αrk(∑i∈Nσ^k−1(rk,mk]pi)≤(∑i∈Sσ^k−1(rk,mk]αi)prk−αrk(∑i∈Sσ^k−1(rk,mk]pi)=(∑i∈Sθ^k−1(rk,mk]αi)prk−αrk(∑i∈Sθ^k−1(rk,mk]pi)=∑i∈Sαi(Ci(θ^k−1)−Ci(θ^k)).Hence,v(S)=∑i∈Sαi(Ci(σ0)−Ci(σ*))=∑i∈Sαi(Ci(σ0)−Ci(σ0S))+∑k=1|R|∑i∈Sαi(Ci(σ^k−1)−Ci(σ^k))≤∑i∈Sαi(Ci(θ0)−Ci(θ^0))+∑k=1|R|∑i∈Sαi(Ci(θ^k−1)−Ci(θ^k))=∑i∈Sαi(Ci(θ0)−Ci(θ*))≤maxθ∈A(θ0,S)∑i∈Sαi(Ci(θ0)−Ci(θ))=∑i,j∈S:θ0(i)<θ0(j)gij=∑i,j∈S:σ0(i)<σ0(j)gij,also if|R|=0. In the above derivation, the last two equalities follow from-the fact that coalition S is connected with respect to θ0,the fact that the relative order of the players in S with respect to θ0 is the same as the relative order of the players in S with respect to σ0. □This section provides a polynomial time algorithm determining an optimal order for every possible coalition and, consequently, the values of the coalitions. First, some new notions as composed costs per time unit, composed processing times and composed urgencies are introduced. Using these notions we can exclude some admissible orders from being optimal.The composed costs per time unit αSand the composed processing time pSfor a coalition S ∈ 2N\{∅} are defined byαS=∑i∈SαiandpS=∑i∈Spi,respectively. The composed urgency uSof a non-empty coalition S ∈ 2N\{∅} is defined byuS=αSpS.Next we explain how the concept of composed urgency helps to decide which of two related processing orders is less costly for a certain coalition. For the moment we do not worry about admissibility of these orders. Consider a non-empty coalition S and a processing order σ ∈ Π(N). First take i ∈ S and j ∈ N such that σ(i) < σ(j). Letσ^∈Π(N)be the processing order obtained from σ by moving player i to the position directly behind player j. Then the difference between the costs for coalition S with respect to the processing order σ and the processing orderσ^can be calculated as follows:∑s∈SαsCs(σ)−∑s∈SαsCs(σ^)=∑s∈Sσ(i,j]αspi−αi∑s∈Nσ(i,j]ps=αSσ(i,j]pi−αipNσ(i,j].Similarly, take i ∈ S and j ∈ N such that σ(i) > σ(j) and letσ˜∈Π(N)be the processing order obtained from σ by moving player i to the position directly in front of player j. Then the difference between the costs for coalition S with respect to processing order σ and processing orderσ˜is equal toαipNσ[j,i)−αSσ[j,i)pi.Hence, withδiσ(j,S)representing the cost difference for coalition S made by moving player i directly behind player j in case σ(i) < σ(j) and the cost difference made by moving player i directly in front of player j in case σ(i) > σ(j), we have(8)δiσ(j,S)={αSσ(i,j]pi−αipNσ(i,j]ifσ(i)<σ(j)αipNσ[j,i)−αSσ[j,i)piifσ(i)>σ(j),for all i ∈ S and j ∈ N.The above cost differences have an additive structure in the following sense. Take i ∈ S and j, k ∈ N such that σ(i) < σ(j) < σ(k). The cost differenceδiσ(k,S)can be split up in two parts by first moving player i to the position directly behind player j and thereafter moving player i to the position directly behind player k. Hence, we can writeδiσ(k,S)=δiσ(j,S)+δiσ^(k,S),whereσ^∈Π(N)is the processing order obtained from σ by moving player i to the position directly behind player j.Using the above notation of a cost difference it is easily checked whether having a certain player i ∈ S in a later position (behind player j) in the processing order is beneficial for S or not becauseδiσ(j,S)>0⇔αipi<αSσ(i,j]pNσ(i,j],δiσ(j,S)=0⇔αipi=αSσ(i,j]pNσ(i,j],δiσ(j,S)<0⇔αipi>αSσ(i,j]pNσ(i,j],with σ(i) < σ(j). Similarly, it is also easily checked whether having a certain player i ∈ S on a position earlier (in front of player j) in the processing order is beneficial for S or not becauseδiσ(j,S)>0⇔αipi>αSσ[j,i)pNσ[j,i),δiσ(j,S)=0⇔αipi=αSσ[j,i)pNσ[j,i),δiσ(j,S)<0⇔αipi<αSσ[j,i)pNσ[j,i),with σ(i) > σ(j).Using these criteria one can exclude some admissible orders from being optimal, as illustrated in the following lemma. To be specific, Lemma 4.1 states that if there is a player t ∈ S positioned according toσ∈A(σ0,S)behind a player s ∈ S with lower urgency and it is admissible that these players swap their position then σ cannot be an optimal order, i.e., σ can be improved.Lemma 4.1Let (N, σ0, p, α) be a one-machine sequencing situation, let S ∈ 2N\{∅} and letσ∈A(σ0,S). Let s, t ∈ S such that σ(s) < σ(t), us< ut and σ0(t) < σ0(i) for alli∈S¯σ(s,t). Then, σ is not an optimal order for coalition S.IfNσ(s,t)=∅,then players s and t are neighbors with respect to σ, so interchanging the positions of players s and t results in cost savings ofαtps−αspt>0because us< ut. Hence, σ cannot be an optimal order for coalition S.Hence, Nσ(s, t) ≠ ∅ and denote the first player of Nσ(s, t) with respect to σ by k. We distinguish between three different cases by consideringαtptandαSσ(s,t)pNσ(s,t),and show that for every case we can find an admissible order for which the total costs for coalition S is less than the total costs with respect to processing order σ.Case 1:αtpt>αSσ(s,t)pNσ(s,t). Consider the processing order σ1 obtained from σ by moving player t to the position directly behind player s (which is the position directly in front of player k, cf. Fig. 6). Notice that the processing order σ1 fulfills condition (i) of admissibility because all players inS¯σ(s,t)are positioned behind player t with respect to σ0 while condition (ii) is satisfied trivially. According to (8) the resulting cost difference for coalition S with respect to σ and σ1 isδtσ(k,S)=αtpNσ[k,t)−αSσ[k,t)pt=αtpNσ(s,t)−αSσ(s,t)pt>0,and thus σ is not optimal for coalition S.Case 2:αtpt=αSσ(s,t)pNσ(s,t). Consider again the admissible processing order σ1 defined in Case 1. In this case the resulting cost difference for coalition S with respect to σ and σ1 isδtσ(k,S)=αtpNσ[k,t)−αSσ[k,t)pt=αtpNσ(s,t)−αSσ(s,t)pt=0.Consider processing order σ2 obtained from σ1 by interchanging the positions of players s and t (cf. Fig. 6). This order is also admissible and the resulting cost difference for coalition S with respect to σ1 and σ2 isαtps−αspt>0since us< ut. Therefore,∑i∈Sαi(Ci(σ)−Ci(σ2))=∑i∈Sαi(Ci(σ)−Ci(σ1))+∑i∈Sαi(Ci(σ1)−Ci(σ2))=0+αtps−αspt>0,and thus σ is not optimal for coalition S.Case 3:αtpt<αSσ(s,t)pNσ(s,t). In this case Sσ(s, t) ≠ ∅. Let l be the last player in S between s and t. Consider the processing order σ3 obtained from σ by moving player s to the position directly behind player l (cf. Fig. 6). Then, σ3 is admissible for S and by (8) the resulting cost difference for coalition S with respect to σ and σ3 isδsσ(l,S)=αSσ(s,l]ps−αspNσ(s,l]≥αSσ(s,t)ps−αspNσ(s,t)>0,where the last inequality follows from us< utand thusαsps<αSσ(s,t)pNσ(s,t). Hence, σ is not an optimal order for coalition S.□Given a coalition S, Algorithm 1below determines an urgency respecting optimal order and the corresponding cost savings with respect to σ0. The algorithm starts in Step 0 with reordering the players within components of S with respect to σ0. This is done by setting the current processing order σ equal to the urgency respecting processing orderσ0S. The cost savings resulting from these rearrangements are equal to the maximum gain made by all possible neighbor switches within the components as given by∑j=1h(σ0,S)∑s,t∈Sjσ0:σ0(s)<σ0(t)gst.Hence, v(S) can be initialized by this value, as is done in Step 1.Subsequently, the players are considered in reverse order with respect toσ0S. Note that it is not admissible for a player from the last component with respect to σ0 to step out from his component. Hence, the algorithm does not consider the players in the last component and the first player to be considered is the last player of the penultimate component. This initialization is done in Step 1 where k represents the current modified component and i represents the current player.In Step 2 it is checked whether moving the current player i to a later modified component is beneficial. When one wants to move player i from the modified component k to a later modified component l, the position of this player in modified component l is fixed because the processing order must remain urgency respecting. This is guaranteed by considering the unique option to move the player directly behind the last player in modified component l with strictly higher urgency than player i. In this way, the partial tiebreaking condition is satisfied if later in the course of algorithm’s run another player is moved to the same modified component. So, player i is never moved to a subsequent component having no players with higher urgency than player i. LetA⊂{k+1,…,h(σ0,S)}correspond to all later modified components that contain at least one player with higher urgency than player i. IfA=∅,then moving player i cannot be beneficial and the processing order is not adapted. With l ∈ A, define tlas the last player inSlσ0,σwith strictly higher urgency than player i. According to (8), for every l ∈ A the resulting cost savings due to moving player i toSlσ0,σare equal toδiσ(tl,S). If these costs savings are nonpositive for all l ∈ A, then moving player i is not beneficial for S and the processing order is not adapted. On the other hand, ifδiσ(tl,S)is positive for some l ∈ A, then player i is moved to the modified component giving the highest cost savings. Moreover, when there is a tie then the component with the smallest index is chosen (such that the partial tiebreaking condition is still satisfied at a later stage if another player joins the same component). With l* representing the index of the new modified component of player i, processing order σ is adapted by moving player i to the position directly behind playertl*and the current value of the coalition v(S) is increased byδiσ(tl*,S).In Step 3 the settings of k and i are updated. If player i was not the first player of his component, then his old predecessor is the new considered player while going back to Step 2. Otherwise, the last player of the component preceding the old component of player i is considered while going back to Step 2. Moreover, if player i was the first player of coalition S with respect to processing orderσ0S,then all players have been considered and the algorithm stops. Note that the algorithm is polynomial and thus terminates in a finite number of steps.LetσSalgdenote the urgency respecting processing order obtained from Algorithm 1 with respect to coalition S. Note thatR(σSalg)⊂S,as defined in (5) in Section 3, exactly consists of those players for whom an improvement was found in Step 2. Moreover, the playersr1(σSalg),…,r|R(σSalg)|(σSalg)are exactly the players considered by the algorithm, conducted in the same order. Furthermore,mk(σSalg)withk∈{1,…,|R(σSalg)|}corresponds to the player where playerrk(σSalg)is positioned behind (the correspondingtl*) according to the algorithm. Note that processing orderτσSalg,S,k−1is the processing order obtained by algorithm when playerrk(σSalg)is considered and therefore the total cost savings obtained by the algorithm are equal to∑j=1h(σ0,S)∑s,t∈Sjσ0:σ0(s)<σ0(t)gst+∑k=1|R(σSalg)|δrk(σSalg)τσSalg,S,k−1(mk(σSalg),S).In the example below Algorithm 1 is explained step by step.Example 4.1Consider a one-machine sequencing situation (N, σ0, p, α) withS={1,⋯,10}.In Fig. 7an illustration can be found of initial order σ0 together with all relevant data on the cost coefficients and processing times (the numbers above and below the players, respectively). The completion times of the players with respect to this initial order are also indicated in the figure (bottom line in bold).In Step 0 of the algorithm σ is set to processing orderσ0S,see Fig. 8. Note thath(σ0,S)=4. The resulting gains yielded by these switches within the components are∑j=14∑s,t∈Sjσ0:σ0(s)<σ0(t)gst=193.We initialize v(S) ≔ 193. In Step 1, the component to be considered first is the penultimate component, i.e., k ≔ 3, and the first player to be considered is the last player of this component, which is player 6, so i ≔ 6.k=3,i=6:̲Since there exists a player inS4σ0,σwho is more urgent than player 6, for example player 10, we have A ≔ {4}. This means that it might be beneficial to move player 6 to componentS4σ0,σ. Since player 7 is the last player in componentS4σ0,σwith higher urgency than player 6, player 6 should be moved to the position directly behind player 7 if he is moved to componentS4σ0,σ,so t4 ≔ 7. Moving player 6 to this component results in a cost difference ofδ6σ(7,S)=αSσ(6,7]p6−α6pNσ(6,7]=(α10+α7)p6−α6(pS¯3σ0+p10+p7)=11·8−3·19=31.Sinceδ6σ(7,S)>0,it is beneficial to move player 6 andl*=4. Hence, we update the processing order σ by moving player 6 to the position directly behind player 7 and we setv(S):=193+δ6σ(7,S)=224. The updated processing order σ can be found in Fig. 9.In Step 3 we have to update k and i. Since player 6 was the only player in his component, and thus his previous predecessor is not a member of coalition S, we consider next the component that was in front of player 6 and thus k ≔ 2. The considered player is the last player of this component, i.e., i ≔ 5.k=2,i=5:̲SinceS3σ0,σ=∅we know3∉A. Moreover, asS4σ0,σdoes contain a player who is more urgent than player 5, we have A ≔ {4}. According to the given urgencies, player 5 should be moved to the position directly behind player 6 if he is moved to componentS4σ0,σ(t4 ≔ 6). The resulting cost savings areδ5σ(6,S)=αSσ(5,6]p5−α5pNσ(5,6]=(α10+α7+α6)p5−α5(pS¯2σ0+pS¯3σ0+p10+p7+p6)=14·9−3·32=30.Sinceδ5σ(6,S)>0we havel*=4and thus the processing order σ is updated as illustrated in Fig. 10. Moreover, v(S) is increased byδ5σ(6,S)=30,so v(S) ≔ 254.Since the previous predecessor of player 5, player 4, is a member of coalition S, he becomes the new current player (so i ≔ 4 and k ≔ 2).k=2,i=4:̲Since componentS3σ0,σis empty and all players in componentS4σ0,σhave urgencies smaller than u4, we have A ≔ ∅. This means that it is not possible to reduce the total costs by moving player 4 to a different component. Hence, σ and v(S) are not changed.Since the predecessor of player 4 is outside S, we next consider the first component (k ≔ 1) and the last player of the first component (i ≔ 1).k=1,i=1:̲Here A ≔ {2, 4}. According to the urgencies of the players, if player 1 is moved to a different component then the position of player 1 should be either directly behind player 4 (t2 ≔ 4) or directly behind player 10 (t4 ≔ 10). The resulting cost savings areδ1σ(4,S)=αSσ(1,4]p1−α1pNσ(1,4]=(α4)p1−α1(pS¯1σ0+p4)=6·9−4·9=18andδ1σ(10,S)=αSσ(1,10]p1−α1pNσ(1,10]=(α4+α10)p1−α1(pS¯1σ0+p4+pS¯2σ0+pS¯3σ0+p10)=13·9−4·24=21.Since moving player 1 to componentS4σ0,σresults in larger cost savings than moving player 1 to componentS2σ0,σ,we have l* ≔ 4. Therefore, processing order σ is updated as illustrated in Fig. 11and v(S) is increased byδ1σ(10,S)=21,so v(S) ≔ 275.Since the previous predecessor of player 1, player 2, is also a member of coalition S, he becomes the new current player (i ≔ 2 and k ≔ 1).k=1,i=2:̲Like in the previous step it can be concluded that A ≔ {2, 4}, t2 ≔ 4 and t4 ≔ 10, so the potential cost savings areδ2σ(4,S)=αSσ(2,4]p2−α2pNσ(2,4]=(α4)p2−α2(pS¯1σ0+p4)=6·6−3·9=9andδ2σ(10,S)=αSσ(2,10]p2−α2pNσ(2,10]=(α4+α10)p2−α2(pS¯1σ0+p4+pS¯2σ0+pS¯3σ0+p10)=13·6−3·24=6.Sinceδ2σ(4,S)>δ2σ(10,S)we have l* ≔ 2 and thus the processing order σ is modified by moving player 2 to the position directly behind player 4 (cf. Fig. 12). Moreover, v(S) is increased byδ2σ(4,S)=9,so v(S) ≔ 284.The next player to be considered is player 3 (i ≔ 3 and k ≔ 1).k=1,i=3:̲Since all players in the componentsS2σ0,σandS4σ0,σhave urgency smaller than u3, we have A ≔ ∅. Hence, σ and v(S) are not changed.Next k ≔ 0. According to Step 4, the algorithm terminates and an optimal order for coalition S is found, namely the processing order in Fig. 12 which can be summarized asσSalg=[2,4][1,10][5,6][6,7]σ0S.Moreover, the total cost savings obtained are 284.33Note that the only feature of the algorithm that has not been illustrated in this example, is the tiebreaking rule in Step 2 for choosing l*.The following lemma shows that Algorithm 1 always constructs an urgency respecting admissible order for a certain coalition S. This lemma is used to prove that the processing order found by the algorithm is also optimal with respect to coalition S (see Theorem 4.3).Lemma 4.2Let (N, σ0, p, α) be a one-machine sequencing situation and let S ∈ 2N\{∅}. Then Algorithm1constructs an urgency respecting admissible orderσSalgfor coalition S.For simplicity we denote in this proofσSalgby σalg. We only have to prove that σalg satisfies the partial tiebreaking condition, because the other conditions of admissibility and urgency respecting are satisfied trivially by construction. Suppose, for sake of contradiction, that σalg does not satisfy the partial tiebreaking condition. Then there exist i, j ∈ N,k∈{1,…,h(σ0,S)}withui=uj,i < j,i,j∈Skσ0while σalg(i) > σalg(j). Without loss of generality we can assumeσ0S(j)=σ0S(i)+1. Let σjbe the order obtained during the run of the algorithm just before player j is considered and σibe the order obtained during the run of the algorithm just before player i is considered, i.e., immediately after player j is considered. We distinguish between two cases:σj=σiand σj≠ σi.Case 1:σj=σi,i.e., player j has not been moved by the algorithm. Then, due to the structure of the algorithm, there is a modified componentSmσ0,σi≠∅and a playertm∈Smσ0,σiwithutm>ui,m > k such thatδiσi(tm,S)>0,whileδjσj(tm,S)≤0.However,δiσi(tm,S)=αSσi(i,tm]pi−αipNσi(i,tm]=αSσj(j,tm]pi+αjpi−αipNσj(j,tm]−αipj=αSσj(j,tm]pi−αipNσj(j,tm]>0,and thusαjpj=αipi<αSσj(j,tm]pNσj(j,tm].Therefore,δjσj(tm,S)=αSσj(j,tm]pi−αipNσj(j,tm]>0,which is a contradiction.Case 2:σj≠ σi, i.e., player j has been moved by the algorithm. Let l > k be such thatj∈Slσ0,σiand lettl∈Slσ0,σjsuch thatσi=[j,tl]σj. Due to the structure of the algorithm there is an m > l andtm∈Smσ0,σiwithδiσi(tm,S)>δiσi(tl,S),whileδjσj(tm,S)≤δjσj(tl,S).However,δiσi(tm,S)−δiσi(tl,S)=αSσi(i,tm]pi−αipNσi(i,tm]−αSσi(i,tl]pi+αipNσi(i,tl]=αSσi(tl,tm]pi−αipNσi(tl,tm]=αSσj(tl,tm]pi+αjpi−αipNσj(tl,tm]−αipj=αSσj(tl,tm]pi−αipNσj(tl,tm]>0,and thusαjpj=αipi<αSσj(tl,tm]pNσj(tl,tm].Therefore,δjσj(tm,S)−δjσj(tl,S)=αSσj(j,tm]pj−αjpNσj(j,tm]−αSσj(j,tl]pj+αjpNσj(j,tl]=αSσj(tl,tm]pj−αjpNσj(tl,tm]>0,which is a contradiction.□The class of urgency respecting orders for S can be divided into groups with identical costs for S. Within these groups one can select a unique representative σ by imposing that(i)for alli,j∈Skσ0,σwithk∈{1,…,h(σ0,S)}:ui=uj,σ0S(i)<σ0S(j)⇒σ(i)<σ(j),there does not exist a different urgency respecting orderσ^with∑i∈SαiCi(σ^)=∑i∈SαiCi(σ)and i ∈ S such thati∈Skσ0,σ^andi∈Slσ0,σforsomek,l∈{1,…,h(σ0,S)}withk<l,andj∈Skσ0,σ^andj∈Skσ0,σforsomek∈{1,…,h(σ0,S)}for all j ∈ N\{i}.Thus, condition (i) determines the relative order for players with the same urgency and from the same modified component of S with respect to σ. Likewise, condition (ii) ensures that no player in S can be moved to an earlier modified component of σ while the total costs remain the same. In particular, for coalition S there is a unique representative of the urgency respecting optimal orders and denote this order byσS*.Theorem 4.3Let (N, σ0, p, α) be a one-machine sequencing situation and let S ∈ 2N\{∅}. ThenσSalg=σS*.Suppose for sake of contradictionσSalg≠σS*. For simplicity we denote in this proofσSalgby σalg andσS*by σS. From Lemma 4.2 it follows that σalg is an urgency respecting admissible order for coalition S and thus there is a well-defined procedure of consecutive movements to go from initial order σ0 to the urgency respecting order σalg, as is also the case for order σ*. Therefore, we can distinguish between the following three cases:1.|R(σalg)| ≥ 1 and|R(σ*)|=0,i.e., at least one player switched component in σalg, but no player switched component in σ*,|R(σalg)|=0and |R(σ*)| ≥ 1, i.e., no player switched component in σalg, but at least one player switched component in σ*,|R(σalg)| ≥ 1 and |R(σ*)| ≥ 1, i.e., both in σalg and σ* there is at least one player who switched component.Note that the case where no player switched component in both σalg and σ*, i.e.,|R(σalg)|=|R(σ*)|=0,is not possible because then it would hold thatσalg=σ*(=σ0S).Case 1: Denoteτ=σ*(=τσalg,S,0),r=r1(σalg)andm=m1(σalg). The algorithm moved player r to the position behind player m, thereforeδrτ(m,S)>0. Consequently,δrσ*(m,S)>0which is a contradiction with the optimality of σ*.Case 2: Denoteτ=σalg(=τσ*,S,0),τ*=τσ*,S,1,r=r1(σ*)andm=m1(σ*). The algorithm did not move player r to the position behind player m, thereforeδrτ(m,S)≤0,i.e.,αrpr≥αSτ(r,m]pNτ(r,m]=αSτ*[k,r)pNτ*[k,r),where player k ∈ N is the direct follower of player r with respect to τ. Note thatS¯τ*[k,r)=S¯σ*[k,r)andSτ*[k,r)⊂Sσ*[k,r)because every follower of player k with respect to τ* will not be moved anymore. IfSτ*[k,r)=Sσ*[k,r),thenαrpr≥αSσ*[k,r)pNσ*[k,r),i.e.,δrσ*(k,S)≥0,which is either a contradiction with the optimality of σ* or with condition (ii) of σ*. Hence,Sτ*[k,r)⊊Sσ*[k,r). Note thatSσ*[k,r)∖Sτ*[k,r)consists of players positioned between players k and r with respect to σ*, but who are in front of player r with respect to τ*. Let us call these players the “new players”. Defineq∈Sσ*[k,r)∖Sτ*[k,r)such thatσ*(q)≤σ*(i),for alli∈Sσ*[k,r)∖Sτ*[k,r). This means that player q is among the “new players” the player positioned first with respect to σ* and thusSσ*[k,q)does not contain any “new players”. We show that moving player q in front of player k with respect to σ* does not result in worse costs for coalition S which is a contradiction. As τ(q) < τ(r) < τ(k) and σ*(k) < σ*(q) < σ*(r), we know that the swap of players q and r with respect to σ* is admissible. Consequently, from Lemma 4.1 it follows that uq≥ ur. IfNτ*[k,r)=Nσ*[k,q),thenαqpq≥αrpr≥αSτ*[k,r)pNτ*[k,r)=αSσ*[k,q)pNσ*[k,q),i.e.,δqσ*(k,S)≥0,which is either a contradiction with the optimality of σ* or with condition (ii) of σ*. Hence,Nτ*[k,r)≠Nσ*[k,q),i.e.,Nτ*[k,r)∩F(σ*,q)≠∅. Definet∈Nτ*[k,r)∩F(σ*,q)such thatσ*(t)≤σ*(i),for alli∈Nτ*[k,r)∩F(σ*,q). Hence, playert∈Nτ*[k,r)is defined such thatNτ*[k,t)=Nσ*[k,q). This property of player t is used in order to show the contradiction. Denote byτ^the processing order that is obtained from τ* by moving player r to the position directly in front of player t, which is the same as [r, l]τ where player l ∈ N is the direct predecessor of player t with respect to τ. Note that since q ∈ R(σ*) andσ*∈A(σ0,S),we know from condition (ii) of admissibility that l ∈ S and thusτ^∈A(σ0,S). Moreover, as the algorithm did not move player r we knowδrτ(l,S)≤0,and thusαqpq≥αrpr≥αSτ(r,l]pNτ(r,l]=αSτ^[k,r)pNτ^[k,r)=αSσ*[k,q)pNσ*[k,q),where the last equality follows fromNτ^[k,r)=Nτ*[k,t)=Nσ*[k,q). Consequently,δqσ*(k,S)≥0which is a contradiction with the optimality of σ*, or with condition (i) or (ii) of σ*.Case 3: We make a further distinction, namely the following three cases:3.1.|R(σalg)| > |R(σ*)| and[rk(σalg),mk(σalg)]=[rk(σ*),mk(σ*)],for allk∈{1,…,|R(σ*)|}. Hence, there are more players in σalg switching components than in σ*. Moreover, σ* is an intermediate processing order of σalg in the procedure of consecutive movements to go from σ0 to σalg.|R(σalg)| < |R(σ*)| and[rk(σalg),mk(σalg)]=[rk(σ*),mk(σ*)],for allk∈{1,…,|R(σalg)|}. Hence, there are more players in σ* switching components than in σalg. Moreover, σalg is an intermediate processing order of σ* in the procedure of consecutive movements to go from σ0 to σ*.There exists a c ≤ min {|R(σalg)|, |R(σ*)|} such that[rc(σalg),mc(σalg)]≠[rc(σ*),mc(σ*)]and[rk(σalg),mk(σalg)]=[rk(σ*),mk(σ*)],for all k < c. Hence, neither σalg is an intermediate processing order of σ* nor σ* is an intermediate processing order of σalg in the procedure of consecutive movements to go from σ0 to σ* and σalg.Note that the case where|R(σalg)|=|R(σ*)|and[rk(σalg),mk(σalg)]=[rk(σ*),mk(σ*)],for allk∈{1,…,|R(σalg)|}is not possible because then it would hold thatσalg=σ*.Case 3.1: Denoteτ=σ*(=τσalg,S,|R(σ*)|),r=r|R(σ*)|+1(σalg)andm=m|R(σ*)|+1(σalg). Similar to Case 1 we haveδrσ*(m,S)=δrτ(m,S)>0which is a contradiction with the optimality of σ*.Case 3.2: Denoteτ=σalg(=τσ*,S,|R(σalg)|),τ*=τσ*,S,|R(σalg)|+1,r=r|R(σalg)|+1(σ*)andm=m|R(σalg)|+1(σ*). Then, using the same arguments as in Case 2, we have a contradiction.Case 3.3: We make a further distinction, namely the following three cases:3.3.1.σ0S(rc(σalg))>σ0S(rc(σ*)),i.e., player rc(σalg) switched component in σalg but did not switch component in σ*.σ0S(rc(σalg))<σ0S(rc(σ*)),i.e., player rc(σ*) switched component in σ* but did not switch component in σalg.rc(σalg)=rc(σ*),mc(σalg) ≠ mc(σ*), i.e., playerrc(σalg)(=rc(σ*))switched component in both σalg and σ*, but he is positioned behind two different players.Case 3.3.2: Denoteτ=τσalg,S,c−1(=τσ*,S,c−1),τ*=τσ*,S,c,r=rc(σ*)andm=mc(σ*). Then, using the same arguments as in Case 2, we have a contradiction.Case 3.3.3: We make a further distinction, namely the following three cases:3.3.3.1.mc(σalg)∈Skσ0,σalgandmc(σ*)∈Slσ0,σ*with k > l, i.e., playerrc(σalg)(=rc(σ*))is moved with respect to σalg to a modified component further than with respect to σ*.mc(σalg)∈Skσ0,σalgandmc(σ*)∈Slσ0,σ*with k < l, i.e., playerrc(σalg)(=rc(σ*))is moved with respect to σ* to a modified component further than with respect to σalg.mc(σalg)∈Skσ0,σalgandmc(σ*)∈Skσ0,σ*,i.e., playerrc(σalg)(=rc(σ*))is moved both with respect to σalg and σ* to the same modified component.Case 3.3.3.2: Denoteτ¯=τσalg,S,c−1(=τσ*,S,c−1),τ*=τσ*,S,c,τ=τσalg,S,c,r=rc(σ*)(=rc(σalg))andm=mc(σ*). Observe thatδrτ¯(m,S)=δrτ¯(mc(σalg),S)+δrτ(m,S),becauseτ=[r,mc(σalg)]τ¯. Since the algorithm moved player r behind player mc(σalg), we know from the greedy aspect of the algorithm thatδrτ¯(mc(σalg),S)≥δrτ¯(m,S),i.e.,δrτ(m,S)≤0. Then, using the same arguments as in Case 2, we have a contradiction.Case 3.3.3.3: Denoter=rc(σalg)(=rc(σ*)). Sinceτσalg,S,candτσ*,S,care both urgency respecting, we knowur≤umc(σalg)andur≤umc(σ*). Moreover, by the definition of the algorithm we knowur<umc(σalg). In addition, since mc(σalg) ≠ mc(σ*), it must hold thatur=umc(σ*). Consequently, sinceσ0S(r)<σ0S(mc(σ*))andσ*(r)>σ0S(mc(σ*)),we have a contradiction with condition (i) of σ*.As one can see, for every (sub) case there is a contradiction and thusσalg=σ*.□In this paper a new class of relaxed sequencing games is introduced. This relaxation is intuitive from a practical point of view, because a member of a coalition is allowed to step out from his position in the processing order and to step in at any position somewhere later in the processing order. First, we have shown non-emptiness of the core for the class of relaxed sequencing games where the value of a coalition is bounded from above by the gains made by all possible neighbor switches. Moreover, we have shown that the class of SoSi sequencing games belongs to this class, and that consequently every SoSi sequencing game has a non-empty core. It would be interesting to further analyze the possible convexity of SoSi sequencing games. Note that we applied our SoSi relaxation to the classical sequencing setting considered by Curiel et al. (1989). Another direction of future research is to apply the SoSi relaxation to other sequencing models as well.Closely related to the class of SoSi sequencing games is the class of so-called Step out sequencing games. In a Step out sequencing game a member of a coalition S can swap with another member of the coalition S who is in the same component of S with respect to σ0, while he is also allowed to step out from his initial position in the processing order and enter at the rear of the processing order. Hence, in contrast to a SoSi sequencing game, a player in S cannot join any position later in the processing order but only the rear of the processing order. Example 5.1 illustrates the differences between admissible orders in a Step out sequencing game and a SoSi sequencing game.Example 5.1Consider a one-machine sequencing situation (N, σ0, p, α) withS={1,2,3}. Assume that the components of coalition S with respect to σ0 are given byS1σ0={1}andS2σ0={2,3}.Moreover, assume thatS¯2σ0≠∅(cf. Fig. 13(a)). In a SoSi sequencing game it is allowed for player 1 to step out from his position in the processing order and to step in in the second component of S, for example in between players 2 and 3. However, this is not allowed in a Step out sequencing game, because in a Step out sequencing game player 1 can only enter at the rear of the processing order. This means that processing orderσ^in Fig. 13(b) is admissible in a SoSi sequencing game but not in a Step out sequencing game.Using similar arguments as in the proof of Theorem 3.2, it can be shown that Step out sequencing games also belong to the class of relaxed sequencing games as discussed in Theorem 3.1, which implies that every Step out sequencing game has a non-empty core.In this paper we also provided a polynomial time algorithm determining an optimal processing order for a coalition and the corresponding value in a SoSi sequencing game. Finding a polynomial time algorithm determining an optimal order for every possible coalition for a Step out sequencing game turns out to be different than for a SoSi sequencing game. Example 5.2 gives an example of a Step out sequencing game where moving some players individually is not beneficial, but moving these players simultaneously is. This illustrates that the algorithm of SoSi sequencing games cannot be applied to Step out sequencing games because this algorithm moves players individually. It would be interesting to develop a polynomial time algorithm for determining an optimal order for every possible coalition in a Step out sequencing game.Example 5.2Reconsider the one-machine sequencing situation (N, σ0, p, α) of Example 5.1 withS={1,2,3}. In Fig. 14an illustration can be found of an initial order σ0 together with the cost coefficients and processing times (the numbers above and below the players, respectively). The completion times of the players with respect to this initial order are also indicated in the figure (bottom line in bold).Some alternative admissible orders are given in Fig. 14. The corresponding cost savings for coalition S with respect to these admissible orders are as follows:∑i∈{1,2,3}αi(Ci(σ0)−Ci(σ1))=0+0−1=−1,∑i∈{1,2,3}αi(Ci(σ0)−Ci(σ2))=−105+72+8=−25,∑i∈{1,2,3}αi(Ci(σ0)−Ci(σ3))=−49+72−1=22.Hence, both moving player 1 and player 3 individually to the rear of the processing order is not beneficial (cf. σ1 and σ2, respectively). However, if you move players 1 and 3 simultaneously to the rear of the processing order, then some cost savings are obtained (cf. σ3). This illustrates that a more sophisticated algorithm is needed.

@&#CONCLUSIONS@&#
