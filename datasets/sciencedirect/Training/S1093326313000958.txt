@&#MAIN-TITLE@&#
AutoGrow 3.0: An improved algorithm for chemically tractable, semi-automated protein inhibitor design

@&#HIGHLIGHTS@&#
AutoGrow is an evolutionary algorithm that facilitates drug design and optimization.AutoGrow is now improved because it uses the rules of click chemistry to guide optimization, enhancing synthesizability.Additionally, the program discards any growing ligand whose physical and chemical properties are not druglike.As a demonstration, we use AutoGrow to generate predicted inhibitors of three important drug targets.AutoGrow is available free of charge and has been tested on Linux and Mac OS X.

@&#KEYPHRASES@&#
Drug design,Click chemistry,Autogrow,Computational chemistry,

@&#ABSTRACT@&#
We here present an improved version of AutoGrow (version 3.0), an evolutionary algorithm that works in conjunction with existing open-source software to automatically optimize candidate ligands for predicted binding affinity and other druglike properties. Though no substitute for the medicinal chemist, AutoGrow 3.0, unlike its predecessors, attempts to introduce some chemical intuition into the automated optimization process. AutoGrow 3.0 uses the rules of click chemistry to guide optimization, greatly enhancing synthesizability. Additionally, the program discards any growing ligand whose physical and chemical properties are not druglike. By carefully crafting chemically feasible druglike molecules, we hope that AutoGrow 3.0 will help supplement the chemist's efforts.To demonstrate the utility of the program, we use AutoGrow 3.0 to generate predicted inhibitors of three important drug targets: Trypanosoma brucei RNA editing ligase 1, peroxisome proliferator-activated receptor γ, and dihydrofolate reductase. In all cases, AutoGrow generates druglike molecules with high predicted binding affinities.AutoGrow 3.0 is available free of charge (http://autogrow.ucsd.edu) under the terms of the GNU General Public License and has been tested on Linux and Mac OS X.

@&#INTRODUCTION@&#
Ligand identification and optimization are challenging tasks. In recent years, computational algorithms have played increasingly prominent roles in assisting the medicinal chemist. Driven by the exponential growth of computer power and the ever expanding number of experimentally derived, atomistic structures of receptors and ligand–receptor complexes [1], these programs have been applied at almost every stage of the drug-discovery process. Computational algorithms have assisted in the development of many drugs, including dorzolamide, zanamivir, oseltamivir, nelfinavir, raltegravir, aliskiren, and boceprevir [2–4].Despite advances in computer-aided drug discovery, the processes of ligand identification and optimization are still largely medicinal-chemist driven. While computers lack the insight and intuition that chemists have, recent efforts have sought to improve automation; the AutoGrow algorithm [5], among others [6–14], has been developed to aid the identification and optimization of predicted ligands. The initial version, released in 2009, uses an evolutionary algorithm in conjunction with existing docking software to add interacting moieties to models of known inhibitors in order to optimize their predicted binding affinities. At the time of its initial release, the main advantage of the program was its degree of automation; beyond the initial setup of fragment libraries and docking parameters, no user interaction is required until the final compounds are presented for evaluation.However, in the absence of the chemist's insight, AutoGrow versions 1.0 and 2.0 often produce compounds that are neither druglike nor easily synthesizable. These programs are useful for providing chemists with insights into possible ligand–receptor interactions, but if a compound cannot be synthesized and/or lacks the necessary physical properties characteristic of approved drugs [15,16], clinical success is unlikely.In the current paper, we present AutoGrow 3.0, an improved algorithm that attempts to introduce some chemical intuition into the automated identification/optimization process. Though no substitute for the medicinal chemist, AutoGrow 3.0 can produce chemically synthesizable, druglike molecules that may supplement the chemist's efforts. Version 3.0 is significantly improved over previous versions. Additionally, as the new implementation is written in python rather than java, editing and expanding the code is easier than ever.AutoGrow 3.0 is dependent on several other free software packages, including MGLTools [17], Open Babel [18], AutoDock Vina [19], and NumPy/SciPy [20]. We are hopeful that AutoGrow 3.0 will be even more useful to the drug-design community than previous implementations. A copy can be downloaded free of charge from http://autogrow.ucsd.edu/.As an evolutionary algorithm, AutoGrow 3.0 deals not with a single ligand, but with populations of ligands. These populations are divided into “generations.” Each generation is subject to three operators, called mutation, crossover, and selection [5].To derive a novel compound via mutation, AutoGrow 3.0 first randomly selects one of the many click-chemistry reactions programmed into AutoClickChem [21]. A fragment that can participate in this reaction is then selected at random from a user-specified database and added to the known or suspected ligands by simulating the reaction in silico.AutoClickChem performs two kinds of virtual reactions. Modification reactions involve replacing certain moieties with chemically reactive groups. For example, a halide atom can be replaced with an azide group. In contrast, joining reactions involve combining two distinct molecular models into one via simulated click-chemistry reactions. For example, a molecule containing an azide group can be joined to a molecule containing an alkyne group via a simulated azide-alkyne Huisgen cycloaddition. AutoGrow 3.0 allows the user to specify whether “mutant” ligands should be derived using both modification and joining reactions, or if joining reactions alone should be permitted.The AutoGrow 3.0 crossover operator is based on the LigMerge algorithm [22]. First, two “parent” molecules are aligned by superimposing the maximum (largest) substructure common to both. Novel compounds are then generated by systematically mixing and matching the distinct fragments attached to the respective aligned substructures. In this way, “child” molecules can be generated that are topologically similar to but nevertheless distinct from their two “parents.”Once a generation of compounds has been created using the mutation and crossover operators, the selection operator is used to identify the ligands that are the most “fit.” A number of criteria are used in selecting the top ligands. First, each ligand is evaluated for druglike properties using Open Babel [18] and python definitions built with the pymolecule framework [21]. Compounds that are not druglike are discarded. The user can select whether generated compounds must satisfy Lipinski's Rule of Fives [15] with no violations, Lipinski's Rule of Fives with at most one violation, or the criteria described by Ghose et al. [16].The user can also instruct AutoGrow to discard any compounds that do not contain specific, key moieties. For example, suppose previous research has identified ten inhibitors that all contain a single carboxylate group. As the carboxylate group may be critical for binding, the user may wish to use AutoGrow to generate novel compounds from these ten that preserve this key moiety. However, AutoClickChem considers carboxylate groups to be reactive and tends to convert them into esters, amides, etc. Additionally, LigMerge could potentially generate compounds that do not contain the carboxylate group. To preserve this key moiety, the user can “mark” the two oxygen atoms of the carboxylate group by editing the PDB files of the ten known inhibitors and in every case appending an exclamation point to the atom names of the two carboxylate oxygen atoms. AutoGrow can then be instructed to discard all generated compounds that do not contain at least two marked atoms, thus preserving the key moiety.Finally, those ligands that remain are subsequently docked into the receptor of interest using AutoDock Vina [19]. Optionally, the docked poses can be reevaluated with NNScore 1.0 [23] or NNScore 2.0 [24]. The best-scoring ligands are then selected to be the founders of the next generation. The compounds of this new generation are again created via mutation and crossover operators, this time applied to the best ligands of the previous generation, and the process begins anew, repeating until the user-specified number of generations has been completed.The mutation (AutoClickChem) operator draws upon a user-specified library of molecular fragments. In the absence of a user-generated fragment library, one of the default libraries that ship with AutoGrow 3.0 can be used. These default libraries were generated by performing sub-structure searches of the compounds in the ZINC database [25] to identify fragments that could potentially participate in any of the many reactions of click chemistry [21]. Molecules containing acid anhydride, acyl halide, alcohol, thiol, alkene, alkyne, amine, azide, carbonochloridate, carboxylate, epoxide, ester, halide, isocyanate, isothiocyanate, sulfonylazide, and thio acid moieties were included. The structures of these compounds were optimized using Schrodinger's LigPrep program in conjunction with the OPLS 2005 forcefield [26,27]. The LigPrep models were then filtered according to molecular weight and categorized by the specific reactive moiety identified. Libraries of fragments with molecular weights less than 150, 200, and 250Da, containing 2264, 8772, and 21,010 fragments, respectively, are provided with the program.To demonstrate the utility of the AutoGrow algorithm, crystal structures of RNA editing ligase 1 (REL1), peroxisome proliferator-activated receptor γ (PPARγ), and dihydrofolate reductase (DHFR) were obtained form the Protein Data Bank (PDB) [1] (PDB IDs: 1XDN [28], 1FM9 [29], and 3DFR [30], respectively). In all three cases, crystallographic water molecules and co-crystallized ligands were removed. We note, however, that AutoGrow does not require that water molecules be removed, and in some cases these molecules may in fact mediate important ligand–receptor interactions. Hydrogen atoms were subsequently added to the protein using PDB2PQR [31,32]. In the case of DHFR, the NDP cofactor was retained, with hydrogen atoms assigned according to those present in the DUD database [33].For REL1, AutoGrow created 20 mutants per generation and advanced the top ten to the subsequent generation. AutoClickChem, serving as the mutation operator, performed both modification and joining click-chemistry reactions. No crossover operations were permitted. For PPARγ, AutoGrow generated ten mutants and five crossovers for each generation, advancing the top five to the subsequent generation. For DHFR, AutoGrow generated ten mutants and ten crossovers for each generation, advancing the top fifteen to the subsequent generation.In all three cases, AutoDock Vina [19] was used for docking and scoring. Docking boxes centered on the REL1, PPARγ, and DHFR actives sites measured 30Å×30Å×20Å, 40.912Å×44.262Å×46.769Å, and 42.851Å×44.835Å×44.012Å, respectively. In all three cases, compounds were filtered according to Lipinski's Rule of Fives (no violations allowed), and fragment addition drew upon the default AutoGrow 3.0 fragment library of compounds with molecular weights less than 250Da.

@&#CONCLUSIONS@&#
