@&#MAIN-TITLE@&#
An analysis of metamodeling practices for MOF and OCL

@&#HIGHLIGHTS@&#
An empirical study of metamodeling practices.A set of metrics formally defined on MOF and OCL.An openly available benchmark of metamodels.OCLMetrics: an Eclipse-based environment to compute metrics.

@&#KEYPHRASES@&#
Metamodeling,MOF,OCL,

@&#ABSTRACT@&#
The definition of a metamodel that precisely captures domain knowledge for effective know-how capitalization is a challenging task. A major obstacle for domain experts who want to build a metamodel is that they must master two radically different languages: an object-oriented, MOF-compliant, modeling language to capture the domain structure and first order logic (the Object Constraint Language) for the definition of well-formedness rules. However, there are no guidelines to assist the conjunct usage of both paradigms, and few tools support it. Consequently, we observe that most metamodels have only an object-oriented domain structure, leading to inaccurate metamodels. In this paper, we perform the first empirical study, which analyzes the current state of practice in metamodels that actually use logical expressions to constrain the structure. We analyze 33 metamodels including 995 rules coming from industry, academia and the Object Management Group, to understand how metamodelers articulate both languages. We implement a set of metrics in the OCLMetrics tool to evaluate the complexity of both parts, as well as the coupling between both. We observe that all metamodels tend to have a small, core subset of concepts, which are constrained by most of the rules, in general the rules are loosely coupled to the structure and we identify the set of OCL constructs actually used in rules.

@&#INTRODUCTION@&#
Metamodeling is a key activity for capitalizing domain knowledge. A metamodel captures the essential concepts of an engineering domain, providing the basis for the definition of a modeling language. A precise metamodel is essential to drive all the development steps of the modeling language (definition of semantics, construction of editors, etc.) [1]. Yet, the activity of capturing a specific domain expertise in the form of a generic metamodel, is still a craft, where domain experts are the craftsmen. They look at existing practices, interact with stakeholders who build models in that domain and identify the essential concepts to describe abstractions in that domain, providing an initial metamodel. Metamodeling, is thus a labor intensive task, which is not well supported with established best practices and methodologies [2,3]. Our work aims at observing previous metamodeling experiences, through rigorous empirical inquiry, in order to provide a quantified state of the practice.Fifteen years ago, the Object Management Group (OMG) [4] introduced the first version of the Meta-Object Facility (MOF) as an attempt to provide a standard metamodeling language, in conjunction with the Object Constraint Language (OCL) [5] to define additional properties through well-formedness rules. Today, in practice MOF is not clearly established as a standard, but a large number of metamodels are defined with two parts: an object-oriented definition of concepts and relationships, and a set of logic-based well-formedness rules. This work׳s intuition is that the conjunct usage of two languages is cumbersome and thus a major concern for the metamodeling craftsmen (domain experts). Actually, when looking at the most popular metamodel repositories, we find hundreds of metamodels which include only the object-oriented structure, with no well-formedness rules. The consequence is an increased risk of errors in the metamodel [6] and thus errors in all assets that rely on the metamodel. This intuition is thus the hypothesis that guides our scientific method, and the basis for our research questions.This paper proposes the first extensive empirical analysis of metamodeling practices. The authors published a preliminary proposal at Experiences and Empirical Studies in Software Modeling (EESSMod 2011) held in conjunction with MODELS 2011 [7]. This earlier publication proposed the idea and sketched the workflow to perform the analysis; we present the full survey in this paper. The study focuses on the articulation of an object-oriented MOF-compliant language with a logic-based language (OCL) for the definition of metamodels. We have gathered a collection of 33 metamodels, which combine both paradigms. These metamodels come from diverse backgrounds, in order to effectively cover the state of practice: the OMG (a standardization organism), industry and academia. The object-oriented structures are modeled either with MOF or UML, and all well-formedness rules are modeled with OCL. We analyze the complexity of both parts, as well as different aspects of the coupling relationship. This analysis, based on a set of metamodeling metrics, aims at understanding possible trends in the way metamodeling craftsmen articulate both languages. We observe four phenomena that occur, independent from the metamodel origin:•Well-formedness rules written in OCL are generally loosely coupled to the underlying object-oriented structure, with a high tendency (87.62% of studied expressions) to define rules referring to 4 or less elements of the domain structure.The definition of these rules are not scattered throughout the metamodel, but actually centered in a small subset of classes. In our study, 25 metamodels have a concentration of 80% of their invariants in only one quarter of the metamodel concepts.Less than half of the OCL language is used to define invariants. Almost 97% of the studied invariants use a subset of OCL consisting only of 10 concrete expression types out of the 22 specified by the complete language.Only 84% of the studied set of invariants (840 out of 995) were written in accordance to the correct syntax of OCL and conforming to the underlying object-oriented structure.The main contributions of this paper are:•An empirical inquiry of metamodeling practices, focusing on the combined usage of OCL-based logic formulas and MOF-based object-oriented structures.A set of metrics formally defined on MOF and OCL, to quantify the relationship between two paradigms used for metamodeling.An openly available set of metamodels using both standards, with a benchmark measuring the aforementioned metrics.An Eclipse-based environment to automatically import metamodels and compute metrics on the MOF and OCL parts. OCLMetrics is the core tool in this environment, which implements our set of metrics for metamodeling.Target audience: This paper is intended for software engineers who use model-driven techniques and wish to get acquainted with current practices in building metamodels with MOF and OCL, tool vendors interested in providing support for the metamodeling activity with these standards.Article structure: In Section 2 we illustrate some design issues that arise when metamodeling with MOF and OCL. Then, we give an overview of the two languages. Section 3 formulates our research questions and defines the set of metrics, while Section 4 introduces our set of data. Section 5 presents the implementation in the OCLMetrics tool. Section 6 answers our research questions and provides empirical answers. Section 7 presents related work. Finally, Section 8 concludes and proposes future directions for this work.

@&#CONCLUSIONS@&#
