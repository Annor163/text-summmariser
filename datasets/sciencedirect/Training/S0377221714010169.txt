@&#MAIN-TITLE@&#
Pattern-set generation algorithm for the one-dimensional cutting stock problem with setup cost

@&#HIGHLIGHTS@&#
We propose a two-stage approach for the one-dimensional cutting stock problem.Many patterns are generated in the first stage by a sequential grouping procedure.An integer programming model is solved to select the patterns in the solution.The sequential grouping procedure is efficient for pattern reduction.Solving the integer programming model can significantly reduce the total cost.

@&#KEYPHRASES@&#
Cutting,Cutting stock,One-dimensional cutting,Pattern reduction,Setup cost,

@&#ABSTRACT@&#
The primary objective in the one-dimensional cutting stock problem is to minimize material cost. In real applications it is often necessary to consider auxiliary objectives, one of which is to reduce the number of different cutting patterns (setups). This paper first presents an integer linear programming model to minimize the sum of material and setup costs over a given pattern set, and then describes a sequential grouping procedure to generate the patterns in the set. Two sets of benchmark instances are used in the computational test. The results indicate that the approach is efficient in improving the solution quality.

@&#INTRODUCTION@&#
In the classical one-dimensional cutting stock problem (CSP), m item types with lengths (l1, …, lm) and demands (d1, …, dm) are cut from stock bars of length L to minimize material cost. The solution is a cutting plan that contains a set of different cutting patterns, each of which has specified frequency. The primary objective in the CSP is to minimize material cost. Auxiliary objectives (costs) exist in real-life production (Cherri, Arenales, Yanasse, Poldi, & Vianna, 2014; Kallrath, Rebennack, Kallrath, & Kusche, 2014), one of which is pattern reduction. It is necessary to adjust the positions of the cutting tools in the cutting machine each time a new pattern is set up. Reducing the pattern count (the number of different cutting patterns) of the cutting plan is useful to decrease setup cost, especially for the cases where setup cost is high. A typical case is the cutting of a large steel slab, where the cutting tools have large size, changing their positions incurs much additional cost and setup time.A heuristic is presented in this paper for the CSP with pattern reduction (CSPPR). It solves the CSPPR in two stages. In the first stage, it calls a sequential grouping procedure (SGP) to generate a set of patterns. In the second stage, it uses the CPLEX optimizer to solve an integer linear programming (ILP) model that minimizes the sum of material and setup costs over the given pattern set. The proposed algorithm is called the SGPIP to denote that the SGP is used in the first stage to generate the patterns and an integer programing model (IP) is solved in the second stage over the patterns. Computational test is performed on two sets of benchmark instances to compare the algorithms for the CSPPR. The results show that the SGPIP yields the best average solution quality.The remaining contents are arranged as follows. The literature is reviewed in the next section. The ILP model that minimizes the sum of material and setup costs over a given pattern set is established in Section 3, together with the general frame of the SGPIP. The SGP for generating the patterns in the pattern set is presented in Section 4. Computational results are reported in Section 5 and conclusions are given in the last section.

@&#CONCLUSIONS@&#
The SGPIP has been described in detail. The computational results indicate that it is powerful in improving material utilization. When the default parameters are used (see the general part of Section 5), among the 1840 instances in two sets, only the solutions of four instances do not reach the minimum material cost.Pattern reduction is important in some applications. The SGPIP is also effective in pattern reduction. Among the algorithms tested, the SGPIP is able to yield the minimum average number of pattern count, without increasing the material cost. The algorithm is easy to design. With the help of the CPLEX optimizer, software engineers can easily code it into applications.Future research may include the extension of the SGPIP to deal with the one-dimensional cutting stock problem of multiple stock lengths.