@&#MAIN-TITLE@&#
Curve fitting and optimal interpolation for CNC machining under confined error using quadratic B-splines

@&#HIGHLIGHTS@&#
The explicit Hausdorff distance of a line segment and a quadratic curve is given.G01 codes can be fitted by quadratic B-splines with confined error.We combine the tool path generating and optimal velocity planning in one step.We simulate the manufacture process with our proposed method.

@&#KEYPHRASES@&#
CNC interpolation,G01 code,Curve fitting of polyline,Quadratic B-spline,Trajectory planning,Confined error,

@&#ABSTRACT@&#
In CNC machining, fitting the polyline machining tool path with parametric curves can be used for smooth tool path generation and data compression. In this paper, an optimization problem is solved to find a quadratic B-spline curve whose Hausdorff distance to the given polyline tool path is within a given precision. Furthermore, adopting time parameter for the fitting curve, we combine the usual two stages of tool path generation and optimal velocity planning to derive a one-step solution for the CNC optimal interpolation problem of polyline tool paths. Compared with the traditional decoupled model of curve fitting and velocity planning, experimental results show that our method generates a smoother path with minimal machining time.

@&#INTRODUCTION@&#
The G01 codes in the form of polylines or microlines have been used extensively in CNC machining. Since the polyline segment is usually very small, this representation is highly memory consuming and tends to introduce extreme changes in traveling directions. The corner transition process is used to improve the smoothness in  [1,2], but it enlarges the data and the smooth degree is not high enough. Yau and Wang  [3,4] address a continuous-short-blocks criterion, that initially divides the G01 codes into groups, and then finds the spline that interpolates all points in a group. This procedure may introduce too many short curves when the points generated by G01 codes are very close to each other. Hence, for a large data set, people generally choose to fit the original data with an approximate curve to achieve the required smoothness and data compression. After this fitting process, feedrates are designed along the new curve for CNC interpolation.Curve fitting has undergone deep investigation in CAD. Fitting a set of pointspk,k=1,…,mby a curvef(s)is an optimization problem of minimizing the total squared distances:(1)minF=12∑k=1md2(pk,f(s))+λη,whered(pk,f(s))is the distance betweenpkand the target curvef(s), andηis an auxiliary smooth function with weightλ. A suitable choice of the distance functiondis key to the optimization problem. Some nice distance estimation methods including PDM (Point Distance Minimization), TDM (Tangent Distance Minimization), SDM (Squared Distance Minimization), GTDM (Generalized Tangent Distance Minimization) and CDM (Curvature Distance Minimization) are proposed by  [5,6], which possess different advantages either in numerical accuracy or in computational efficiency. Special requirements for the fitting curve can be involved as additional constraints for the optimization problem. For instance, Flöry  [7] fit the points with B-spline curves which can avoid the given obstacles.In CNC machining, the G01 codes represent a tool path in the form of polylines. If we consider only fitting the G01 points, the result curve may go far from those non endpoints on the polylines (see Fig. 3(a)). This situation is unacceptable in CNC machining, since the CNC error control is to guarantee that the fitting curve lie completely within the “band” of a given width along the polyline. Therefore, the fitting problem should be considered under the confined error constraint, which hereby we apply the Hausdorff distance between the original polylines and result fitting curve. Then the optimization problem of (1) becomes:(2)minF=12∑k=1m−1d2(pkpk+1,f(s))+λη,s.t.d(pkpk+1,f(s))≤ϵ,whered(pkpk+1,f(s))is the Hausdorff distance between the line segmentpkpk+1andf(s), andϵis the error bound. It is clear that problem (2) is much more difficult to solve than problem (1); however, we shall show that when we choosef(s)to be quadratic B-splines, problem (2) can be nicely solved.Throughout the following context,f(s)is assumed to be a quadratic B-spline. We shall show the explicit formulas of the Hausdorff distance and the distance constraint between a line segment andf(s), which directly facilitate our solution of (2). It is worth mentioning that the distance constraint between a line segment and a curve of degree higher than two does not have explicit representation, and its numerical computation is also time consuming.In CNC machining, given a smooth parametric tool path, there are various ways for velocity planning according to different constraints  [8–14]. Bobrow et al.  [8] give a time-optimal interpolation method for robotics under the kinematic constraints. Timar et al.  [11] propose a time-optimal interpolation method for general spline curves under the constraints of maximal acceleration capabilities of each motor axis. Yuan et al.  [9] present a time-optimal interpolation method for curved tool path with confined chord error and tangential acceleration. Boyadjieff et al.  [15] and Zhang et al.  [13] use different approaches to smoothing the acceleration profile. Erkorkmaz and Altintas  [14] give a quintic spline trajectory generation algorithm with velocity, acceleration and jerk constraints. Dong et al.  [10], Beudaert et al.  [16] and Zhang et al.  [12] present different velocity planning methods with acceleration and jerk constraints for each axis under a greedy way. As another important issue for high-speed machining is the kinematic performances of cutter. Nam et al.  [17], Lin et al.  [18] and Lai et al.  [19] investigate velocity planning methods based on tangential acceleration and jerk constraints with look-ahead facility. Jin et al.  [20] use two stages way to do the interpolation, that is, use line segments to interpolate the parametric tool path first then to do the fine interpolation. In this paper, once the fitting curve is computed, we use the interpolation method given by  [21] for velocity planning. Our approach generates the time optimal feedrate for quadratic B-splines efficiently.Moreover, taking the fitting curve to be time-parameterized, a two-in-one (which combines the usual two stages of tool path generation and velocity planning) optimization target is built under the constraints of distance, velocity and acceleration boundaries. The solution for this optimization problem is a time optimal trajectory with confined error. Here, quadratic B-spline shows its advantage in providing velocity and accelerations with convex property in each segment, hence restriction of the velocity and accelerations to each knot point is allowed.The paper is organized as follows. First, some necessary preliminaries are presented in Section  2. In Section  3, we compute the fitting curve of given data with confined error. An alternative numerical method is introduced in Section  4. Setting the parameter as time parameter, we give the trajectory planning method in Section  5. The examples and simulation results are proposed in Section  6. Finally, we conclude the paper in Section  7.Let a planar B-spline curvef:R→R2:s↦f(s)withncontrol pointsci=(xi,yi)T∈R2be presented as  [22]f(s)=∑i=1nBi,k(s)ci,whereBi,k(s)∈R[s]is theith Bernstein basis function of degreek. For convenience,f(s)can be written in the matrix formf(s)=B(s)c.For given knotsτ1≤⋯≤τn+k+1, the Bernstein basis functions are defined as(3)Bi,0(s)={1,s∈[τi,τi+1);0,else .Forr=1,2,…,k,i=1,2,…,n+k−r,(4)Bi,r(s)=s−τiτi+r−τiBi,r−1(s)+τi+r+1−sτi+r+1−τi+1Bi+1,r−1(s).One can find thatBi,k(s)is associated with the knots{τi,…,τi+k+1}. In this paper, we investigate the quadratic B-spline curve, i.e.,k=2. According to the above definition, the curve in[τi,τi+1]is(5)fi(s)=Bi,2(s)ci+Bi−1,2(s)ci−1+Bi−2,2(s)ci−2=(s−τi)2(ci−ci−1)(τi+2−τi)(τi+1−τi)+(s−τi+1)2(ci−2−ci−1)(τi+1−τi−1)(τi+1−τi)+ci−1.The first and second differentials offi(s),s∈[τi,τi+1]are(6)fi′(s)=2(s−τi)(ci−ci−1)(τi+2−τi)(τi+1−τi)+2(s−τi+1)(ci−2−ci−1)(τi+1−τi−1)(τi+1−τi),(7)fi″(s)=2(ci−ci−1)(τi+2−τi)(τi+1−τi)+2(ci−2−ci−1)(τi+1−τi−1)(τi+1−τi).Fitting a given point set{pk,k=1,…,m}by a parametric curvef(s)can be reduced to solving a nonlinear optimization problem, i.e., find control pointsci,i=1,…,nfor the objective function (1). In the iterative solving process, we assume thatf(sk)is the nearest foot point ofpkinf(s), so the distance betweenpkandf(s)isd(pk,f(s))=‖f(sk)−pk‖, and the objective function is the sum of squared distancesd(pk,f(s))2,k=1,…,m. To update the control points, we introduce the position perturbationδcofc. Hence, the updated control points isc+δcand the updated fitting curve isf˜(s)=f(δc;s)=B(s)(c+δc).Thenδcshould be solved from(8)minδcF(δc)=12∑k=1md2(pk,f˜(s))+λη.The smooth functionηcan be designed according to different demands. For instance, it can be taken as the arc length∫‖f˜′(s)‖2dsfor geodesic fitting or the simplified plate energy∫‖f˜″(s)‖2dsfor general smooth curve fitting  [23]. Here we use the latter one,η=∫‖f˜″(s)‖2ds=(c+δc)T(∫B″(s)TB″(s)ds)(c+δc).The weightλis set to control the curve shape, and it can be determined by the users and we just select a fixed value in our experiments. The unknown distanced(pk,f˜(s))betweenpkandf˜(s)can be estimated bypkandf˜(sk). See  [5,6] for PDM, TDM and SDM of different estimation methods (see Fig. 1). We here apply SDM since it takes both computational efficiency and fitting effect into account. Then, the estimated distance is(9)d2(pk,f˜(s))={dkdk−ρk[(pk−f˜(sk))TTk]2+[(pk−f˜(sk))TNk]2,dk<0;[(pk−f˜(sk))TNk]2,0≤dk<ρk,whereTk,Nkandρkare unit tangent vector, unit normal vector and radius of curvature of curvef(s)ats=sk, respectively, and|dk|=‖pk−f(sk)‖. Note thatdk>0ifpkand the curvature center off(sk)are on the same side off(s); otherwise,dk<0. The distance (9) is exact if there is no perturbation, i.e.,f˜(s)=f(s).By (8) and (9), one can solve forδcfrom a quadratic programming problem without constraints. We summarize the above discussion as the general B-spline curve fitting process:1.Compute an initial B-spline curvef0(s)=B(s)c0for the pointspk,k=1,…,m.Find the nearest foot pointfr(sk)in the current curvefr(s)for the pointpk, and compute the estimated distance by (9).Solve (8) forδcrand update the current curve byfr+1(s)=B(s)(cr+δcr). Iffr+1(s)satisfies the precondition (e.g. error bound or maximum iteration), output it. Otherwise, go step 2.We solve the optimization problem given in (2) following the classic routine for point set fitting given at the end of Section  2.2. Three key points for consideration here: the initial curve fitting, the distance computation, and the foot-point location (i.e., to solve forδcr).Letpk,k=1,…,mbe given CNC points. To avoid fitting along straight lines or losing sharp geometry features, we first segment the data by long-line segment detection and extreme discrete curvature detection  [21,24]. Then for each segmented CNC point set, we select those feature points with large discrete curvatures and force the fitting curve to pass these feature points.  [21] shows that proper selection of feature points can reduce curve fluctuations and preserve the expected features at the same time.For the long-line segment detection,pkpk+1is set to be a long line segment ifLk=‖pk−pk+1‖is greater than a threshold valueLmax. For the extreme discrete curvature detection, we compute the discrete curvature of each pointpkby the following formula  [25].(10)Kk=2△pk−1pkpk+1Lk−1Lk‖pk−1−pk+1‖=sgn(△pk−1pkpk+1)2sinαk‖pk−1−pk+1‖,where△pk−1pkpk+1is the signed area of triangle, andαkis angle ofpk−1pk⃗andpkpk+1⃗. Similarly,pkis set as segment point if its curvature|Kk|is larger than a threshold valueKmax.In the following, we assume that the data under investigation has already been segmented and inner feature points on the current segment are already computed  [21].To fit data with a degreekopen curve, we usually fix the start and end control points and associate them with knots of multiplicityk+1. Knots determination is key to the fitting effect. For example, the knots are automatically determined according to the discrete curvatures of data points in  [26], and by the dominant points in  [27]. In this paper, we compute the initial curve with an adaptive method  [21]. The parameter valueskforpkis computed using the approximate arc lengthsk=∑i=1k−1Li/∑i=1m−1Li.Then one can get an initial quadratic B-spline curve interpolating the inner feature points.The confined error analysis is based on the distance computation of polyline and B-spline curve. LetP={pk∈R2,k=1,…,m}be an ordered point set which defines a polyline. Letf(s)be a quadratic B-spline curve andf(sk)be the foot point ofpkonf(s). Denote the distance frompktof(s)bydk=‖f(sk)−pk‖. The distance between the pointf(s0)and line segmentpkpk+1¯can be defined as(11)dp,k(s0)≔{‖f(s0)−pk‖,if(pk+1−pk)T(f(s0)−pk)≤0;‖f(s0)−pk+1‖,if(pk+1−pk)T(f(s0)−pk+1)≥0;|(pk+1−pk)T‖pk+1−pk‖J(f(s0)−pk)|,otherwise ,whereJis the rotation matrix by angle ofπ/2.The Hausdorff distance of the line segmentpkpk+1¯and curve segmentfkfk+1˜is denoted bydH,k=dH(pkpk+1¯,fkfk+1˜), wherefk=f(sk)andfk+1=f(sk+1). Then the distance of the polylinePandf(s)ismax{dH,k,k=1,…,m−1}.Lemma 1The Hausdorff distance is computed by(12)dH,k=max({dk,dk+1}∪{|(pk+1−pk)T‖pk+1−pk‖J(f(s)−pk)|∣s∈[sk,sk+1],(pk+1−pk)TJf′(s)=0,(pk+1−pk)T(f(s)−pk+1)<0,(pk+1−pk)T(f(s)−pk)>0}∪{‖f(s)−pk‖∣s∈[sk,sk+1],(pk+1−pk)T(f(s)−pk)≤0,(f(s)−pk)Tf′(s)=0}∪{‖f(s)−pk+1‖∣s∈[sk,sk+1],(pk+1−pk)T(f(s)−pk+1)≥0,(f(s)−pk+1)Tf′(s)=0}).ProofSee Appendix A.□Remark 1Lemma 1 gives an explicit form of the Hausdorff distance between a given line segment and a curve segment (not necessarily quadratic), which helps check whether the fitting curve is within the confined error bound.In practical fitting process, we need to use the distance constraints on the line segments and the curve segmentsf(δc;s)with undeterminate coefficientsc+δc(to be updated); however, we prefer not to use the distance given by Lemma 1 since it is too complicated. Fortunately, if the curve is quadratic, the distance constraints on the updating curvef(δc;s)and the line segments has a more compact form (see Lemma 2).The constraints on distance betweenpkandf(δc;s)is constrained by‖f(sk)−pk‖≤ε, which can be approximated by SDM (9). In our implementation, the data has been segmented hence is without large curvature point. In this situation, SDM can be degenerated to TDM for approximation(13)dTD(pk,f(δc;s))=|(pk−f(δc;s))TNk|,whereNkis the unit normal vector off(sk)associated withpk. Then the distance constraint|dTD(pk,f(δc;s))|≤εofpkandf(δc;s)is approximated by linear constraint(14)dk−ε≤NkTB(sk)Tδc≤dk+ε.The quadratic B-spinef(s)is a piecewise continuous function, whose segmentfi(s)of the form (5) for the knot interval[τi,τi+1]is determined by the control pointsci,ci−1,ci−2. Sinced(fi(s),pkpk+1)≤εforfi(s),s∈[τi,τi+1]andpkpk+1¯, the parametersthen locates within[max(sk,τi),min(sk+1,τi+1)]. We now derive the explicit distance constraints for quadratic B-spline curves.Lemma 2Fors∈[max(sk,τi),min(sk+1,τi+1)], we have that1.If there exists ansmsuch that(f(sm)−pk)Tf′(sm)=0and(pk+1−pk)T(f(sm)−pk)≤0, then the distance constraint is(15)cTBT(sm)B(sm)c−2pkTB(sm)c+pkTpk−ε2≤0.If there exists ansmsuch that(f(sm)−pk+1)Tf′(sm)=0and(pk+1−pk)T(f(sm)−pk+1)≥0, then the distance constraint is(16)cTBT(sm)B(sm)c−2pk+1TB(sm)c+pk+1Tpk+1−ε2≤0.If there exists ansmsuch that(pk+1−pk)TJf′(sm)=0and(pk+1−pk)T(f(sm)−pk+1)<0,(pk+1−pk)T(f(sm)−pk)>0, then the distance constraint is(17)pk+1TJpk−εLk≤(pk+1−pk)TJB(sm)c≤pk+1TJpk+εLk.ProofSee Appendix B.□Remark 2Case 1 is degenerated to the greatest distance fromfi(s)topk, similarly for case 2. These two situations seldom occur in the practical experiments.In Lemma 2, we give the constraints on distance betweenfi(s)andpkpk+1¯. Similar as before, we shall approximate these distance constraints for the new curvef(δc;s)in the next iteration with control pointsc+δc. Notice that the solutionsmis associated withc, butsm(c+δc)is not explicit forf(δc;s)sinceδcis unknown. A natural approximation is to replacesm(c+δc)bysm(c), then the constraints on distance betweenfi(δc;s)andpkpk+1¯are quadratic polynomials ofδcfor case 1 and case 2, but linear for case 3. Precisely, the linear approximations of the case 1, case 2 and case 3 can be proposed as follows (details refer to Appendix C).(18)∇cg1(c)Tδc≤ε2−g1(c),∇cg2(c)Tδc≤ε2−g2(c),(19)pk+1TJpk−εLk−g3(c0)≤∇cg3(c0)Tδc≤pk+1TJpk+εLk−g3(c0),where∇cis the gradient with respect toc.Now we are ready to give the curve fitting algorithm with confined error.Algorithm 1Curve fitting algorithmInput: The G01 pointspk,k=1,…,mwhich can be approximated by a quadratic B-spline and the error boundε.Output: The quadratic B-spline with confined error1.For the given pointspk,k=1,…,m, by the adaptive feature points selecting method, find an initial quadratic B-spline curvef0(s)=B(s)c0using chord length parameter  [21]. Letr=0.Find the nearest foot pointfr(sk)offr(s)for eachpk, and compute the distance using (9).LetU=∅, for each line segmentpkpk+1¯, if[τi,τi+1]∩[sk,sk+1]≠∅and there exists ansmin Lemma 2, thenU=U∪{(k,i)}. If|dH(fir(s),pkpk+1)|≤ε,∀(k,i)∈Uand‖fr(sk)−pk‖≤ε,k=1,…,m, outputfr(s).Optimize the distance between curve and line segments by solving the following optimization problem with constraints (14), (18) and (19),minδcF=12[∑k=1md2(pk,fr+1(s))+∑(k,i)∈Ud2(fir+1(s),pkpk+1)]+λη(20)s.t.dTD(pk,fr+1(s))≤ε,k=1,…,m;d(fir+1(s),pkpk+1)≤ε,∀(k,i)∈U.Find the solutionδcrand update the curve byfr+1(s)=B(s)(cr+δcr),r=r+1, then go to step 2.Remark 3In Step 3, we check the Hausdorff distance by Lemma 1, to guarantee the confined error. In Step 4, the optimization problem (2) is simplified for quadratic curve (see Lemma 2).For spline curves of degree higher than two, Lemma 2 does not hold, then an important task is to simplify and solve the optimization problem in Step 4.To solve the problem given in (2), another way is to discretize the boundary of the “band” and then set the discretized points as obstacles to replace the Hausdorff distance condition. This can be done by Flöry’s method  [7].Letd(uj,f(s))be the directed distance fromujtof(s), the plane can be divided into inner part and outer part off(s), i.e.,ujis insidef(s)ifd(uj,f(s))<0andujis outsidef(s)ifd(uj,f(s))>0. Without loss of generality, we assume that the obstacle pointujis in the inner part off(s). Letf(sj)be the nearest foot point ofujandN(sj)the unit outer normal vector atf(sj). The constraintd(uj,f(sj))<0is equivalent to(21)(uj−f(sj))TN(sj)<0.The parametersjis associated with control points; on other words,sjcan be regarded as a functionsj(c). Then(uj−f(sj))TN(sj)is a function with respect toc, which has a linear approximationlj(c), where(22)lj(c)=lj(c0)+∇clj(c0)T(c−c0).Letδc=c−c0, the constraint is approximated by(23)∇clj(c0)Tδc<−(uj−f(sj(c0)))TN(sj(c0)).In the gradient matrix∇clj(c0), the differential ofljw.r.t.ciis(24)∂lj(c)∂ci=−Bi⋅N(sj)+[Bi⋅I−J⋅f″⋅(Bi′⋅(f−uj)+Bi⋅f′f″T⋅(f−uj)+f′T⋅f)T](uj−f),whereBiis theith Bernstein function,Iis the identity matrix with degree two andJis the rotation matrix which rotates the tangent vector byπ/2;f,f′andf″are differentials offatsj. The detailed deductions can be found in  [7].Once the offset of polyline of given points by translation±ε,ε>0is computed, we shall fit the curve in the pipeline of the offset. Discretize the two offsets to two point setsujandvk,j=1,…,l1,k=1,…,l2and regard them as two obstacles respectively. Then the associated inequality constraints ared(uj,f(s))≤0andd(vk,f(s))≥0. By (21), in step 3 of the general algorithm framework in Section  2.2, we need to solve an optimization problem with inequality constraintsminδcF(δc)=12∑k=1md2(pk,f˜(s))+λη(25)s.t.(uj−f(sj))TN(sj)<0,j=1,…,l1;(vk−f(sk))TN(sk)>0,k=1,…,l2.The discrete error conditions are added to refine the error control. The constraints are applicable to any target curve since only the discrete points are needed, and one can get correct fitting curve in many examples. In the discretization of the offset polylines, the number of points may increase the reliability of error control but also the computing time. Such numerical approach may fail in some cases (see Fig. 3(b)).In CNC data trajectory planning, under the confined error control, we need to decrease the machining time as possible as we can. In the practical manufacture process, the velocity and acceleration of kinematics are generally limited by certain values. Hence, the maximum velocity and acceleration constraints should be added to the optimization model.Regarding the parametersas the time parametert, the equation (6) indicates the axis velocity to be linear at every interval[τi,τi+1]. The squared velocity function is quadratic with positive leading coefficient. Hence, we need only to check the velocity constraints at each knot(26)‖f′(τi)‖=‖2(ci−1−ci−2)τi+1−τi−1‖≤Vmax,i=3,…,n+1.By (7), the acceleration is a constant at every knot interval and the acceleration constraints are then(27)|fi″(τi)|≤Amax,i=3,…,n,whereAmax=(Axmax,Aymax)TandAxmaxandAymaxare the acceleration bounds forx- andy- axis respectively. Then, the constraints (26) and (27) can be reduced to the constraints on the control points and the knots of B-spline curves.In Section  3, the objective function is the squared distance in the optimization model. In this section, we need to optimize the time with distance constraints. The time optimization is achieved by the knots refinement and hence the optimization model is nowminfF=τn+1s.t.d(fir+1(t),pkpk+1)≤ε,∀(k,i)∈U;(28)d(pk,fr+1(t))≤ε,k=1,…,m;‖f′(τi)‖≤Vmax,i=3,…,n+1;|fi″|≤Amax,i=3,…,n,whereUcan be computed by Step 3 of Algorithm 1.Using time parameter in curve fitting, it is possible to compromise the fitting accuracy. This is the fact the accuracy is compromised when the machining time is shorten (see Figs. 3(c) and 5(b)). But we should emphasis that our model is designed with confined error by adding the exact distance constraints, that means the fitting accuracy is always controlled.Similar to discussions in Section  3, we can approximate the constraints by linear ones to simplify the optimization problem. However, here we prefer to solve the problem with a faster two-step process.For a time-optimal velocity function, a necessary condition is that it is “Bang–Bang-Singular”, that is, the velocity or acceleration of one axis reaches its bound for every point on the tool path  [12]. For the initial curve, this property is usually not satisfied.For the first step, starting from a given curve, we use the time transformationst→αit+ti,t∈[τi,τi+1],i=1,…,nsuch that for each curve segmentf(t),t∈[τi,τi+1]the velocity or acceleration of one axis reaches its bound. This can be done since whenαiconverges to zero, the velocity and acceleration of each axis will converge to zero, and whenαiconverge to infinity, the velocity or at least one of the axis will converge to infinity. To be concrete, let(29)f(t)=(a1t2+b1t+c1,a2t2+b2t+c2),t∈[τi,τi+1],thenf′(t)=(2a1t+b1,2a2t+b2)and the accelerations ofx- andy- axis areax=2a1anday=2a2respectively. The velocity function is(30)v(t)=(2a1t+b1)2+(2a2t+b2)2.Under time transformation,f̃(t)=f(αit+ti). Then, the accelerations ofx- andy- axis areãx=2αi2a1andãy=2αi2a2respectively and the velocity function is(31)ṽ(t)=αi(2a1αit+2a1ti+b1)2+(2a2αit+2a2ti+b2)2.Letτ̃0=τ0=0. By induction, we get thei−1th curve segment of the quadratic B-spline, hence we knowτ̃i. Note thatτi=αiτ̃i+tiandτi+1=αiτ̃i+1+ti. Hence we can omittiin the velocity function,(32)ṽ(t)=αi(2a1αi(t−τ̃i)+2a1τi+b1)2+(2a2αi(t−τ̃i)+2a2τi+b2)2.The above function is convex, hence the maximum value ofṽ(t),t∈[τ̃i,τ̃i+1]can be obtained at the ending points, that is,maxτ̃i≤t≤τ̃i+1ṽ(t)=max(ṽ(τ̃i),ṽ(τ̃i+1)). Here(33)ṽ(τ̃i)=αi(2a1τi+b1)2+(2a2τi+b2)2=αiv(τi),(34)ṽ(τ̃i+1)=αih12+h22=αiv(τi+1)wherehk=(2akαi(τ̃i+1−τ̃i)+2akτi+bk).By solving for the minimal positive solutionαi(andtiis obtained at the same time) ofãx=Axmax,ãy=Aymax,ṽ(τ̃i)=vmax,ṽ(τ̃i+1)=vmax, one can make one reach the boundary and others controlled by the given bounds. Specifically,(35)αi=min(Axmax2|a1|,Aymax2|a2|,vmaxv(τi),vmaxv(τi+1)),ti=τi−αiτ̃i.Note that, if anyai=0,i=1,2, we delete the associatedAxmax2|a1|orAymax2|a2|from the above equation, since the velocity ofx- ory-axis is a constant.For the second step, we fix the knots and reduce the optimization problem to the one in Section  3. In other words, we use the squared distance instead of the time objective function. We find the solution and update the curve. Now, since the objective function is squared distance, the velocity and acceleration of the curve is generally loose. Then we go to the first step if the time optimization problem does not reach their bounds.Except for the initial curve, the machining timeτn+1is strictly decreased in the iteration, hence the two-step process will terminate. The solution of (28) proposes a new trajectory with optimal machining time and confined error, and at each instant, the velocity and acceleration are bounded byVmaxandAmaxrespectively. From the experimental results, one can see that the velocity of the B-spline curve is almost “Bang–Bang-Singular”. Now, we give the trajectory planning algorithm for the given G01 codes under the confined error.Algorithm 2Trajectory planning algorithmInput: The G01 pointspk,k=1,…,mwhich can be approximated by a quadratic B-spline and the error boundεOutput: The time parameterized quadratic B-spline with confined error1.Solve the following optimization problem by Algorithm 1minfF=12[∑k=1md2(pk,fr+1(s))+∑(k,i)∈Ud2(fir+1(s),pkpk+1)]+ληs.t.d(fir+1(t),pkpk+1)≤ε,∀(k,i)∈U;(36)d(pk,fr+1(t))≤ε,k=1,…,m;‖f′(τi)‖≤Vmax,i=3,…,n+1;|fi″|≤Amax,i=3,…,n.Find the solutionf(t)=B(t)(c).Let theith curve segment off(t)be of the form (29). Starting fromτ0=0,t1=0, use the time transformationst→αit+ti,t∈[τi,τi+1],i=1,…,n, whereαiandtiare obtained by Eq. (35). Updatef(t)by the above time transformation. If|αi−1|<0.001for eachi, outputf(t); otherwise, goto the above step and letf(t)be the initial curve of the optimization problem (36).Remark 4Note that the tangential acceleration is bounded byAxmax2+Aymax2. The tangential acceleration along the tool pathf(t)isaT(t)=v′(t)=4(a1+a2)t+2a1b1+2a2b2(2a1t+b1)2+(2a2t+b2)2,sinceaT′(t)=4(a1b2−a2b1)2/v(t)3≥0,aT(t)is monotone with respect tot. Hence, if we consider the tangential constraints along the tool path, we need only to add the tangential acceleration constraints at each knot point to the optimization model since they are convex with respect to parametertfor the quadratic B-splines, that is, add|aT(τi)|≤ATto the optimization problem (36).Remark 5The quadratic B-spline curve obtained above is a trajectory with confined velocity, and acceleration for each axis. The jerk limitation is not considered since the acceleration is not continuous at each knot point of the quadratic B-spline. However, one can get the smooth acceleration (associated with tangential jerk) by the method given in  [15,13].

@&#CONCLUSIONS@&#
