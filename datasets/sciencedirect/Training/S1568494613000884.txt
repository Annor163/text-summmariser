@&#MAIN-TITLE@&#
Multi-agent modeling for solving profit based unit commitment problem

@&#HIGHLIGHTS@&#
Multi-agent modeling is proposed for profit based unit commitment (PBUC) problem.A system of generators is modeled as a system of intelligent agents.Six communication and negotiation stages are developed for agents.Proposed multi-agent approach generated the best profit solutions in substantially smaller computation time.

@&#KEYPHRASES@&#
Profit based unit commitment,Agent rules,Multi-agent modeling,Deregulation,

@&#ABSTRACT@&#
Profit based unit commitment problem (PBUC) from power system domain is a high-dimensional, mixed variables and complex problem due to its combinatorial nature. Many optimization techniques for solving PBUC exist in the literature. However, they are either parameter sensitive or computationally expensive. The quality of PBUC solution is important for a power generating company (GENCO) because this solution would be the basis for a good bidding strategy in the competitive deregulated power market. In this paper, the thermal generators of a GENCO is modeled as a system of intelligent agents in order to generate the best profit solution. A modeling for multi-agents is done by decomposing PBUC problem so that the profit maximization can be distributed among the agents. Six communication and negotiation stages are developed for agents that can explore the possibilities of profit maximization while respecting PBUC problem constraints. The proposed multi-agent modeling is tested for different systems having 10–100 thermal generators considering a day ahead scheduling. The results demonstrate the superiority of proposed multi-agent modeling for PBUC over the benchmark optimization techniques for generating the best profit solutions in substantially smaller computation time.profit of GENCOprofit of GENCO in iteration ‘it’revenue of GENCOtotal operation cost of GENCOprofit generated by generator i at hour tpower generation of generator i at hour treserve generation of generator i at hour tON/OFF status of generator i at hour tforecast demand at hour tforecast reserve at hour tdemand left at hour treserve left at hour tminimum generation limit of generator imaximum generation limit of generator inumber of generator unitsnumber of hoursforecast spot prices at hour tforecast reserve prices at hour tstart-up cost of generator iprobability that reserve is called and generatedminimum up/down time of generator iduration during which unit i is continuously ON/OFFcost coefficients of generator i

@&#INTRODUCTION@&#
In the traditional vertically integrated power market, the power generator companies (GENCOs) are obliged to satisfy load demand by optimally scheduling power generating units at least operation cost. In this process of scheduling, ON–OFF (1–0) decision for every generating unit has to be taken by GENCOs for every hour on the planning horizon. Usually, the less expensive units are committed while satisfying the problem constraints. Once unit commitment (1–0) is decided for every generating unit, an economic dispatch from committed units is calculated in order to minimize the total operation cost. It is referred as unit commitment (UC) problem in the literature.Now, the traditional power market is undergoing a radical transformation due to deregulation. Contrary to the regulated market, an independent system operator (ISO) would have no control on bids submitted by GENCOs. Therefore, GENCOs are not obliged to satisfy load demand constraint. GENCOs can decide generators scheduling plan (0–1) and the amount of power sold in the deregulated market that can maximize their individual expected profits. A scheduling plan involves ON–OFF (1–0) decision for every generating unit. An economic dispatch of power is calculated for maximizing its profit. This problem is referred as profit based unit commitment (PBUC) in the literature. Every GENCO solves PBUC problem independently and compete each other to sell their power in the power market by submitting their bids. Therefore, it is necessary to have an efficient algorithm available for GENCO that can generate best profit solutions.Various techniques have been reported in the literature for solving UC and PBUC problems. Priority list [1] which is based on heuristics, is simple and computationally efficient but leads to sub-optimal solutions. Dynamic programming [2] can find near optimal solutions. But, it is mathematically complex, and it requires large computation time and memory size. Lagrange relaxation (LR) method [3] is viewed as an efficient and applicable method to even solve for a large system. However, it is sensitive to a choice of parameters such as Lagrange multipliers. Tuning of Lagrange multipliers itself is an optimization problem which can take different values for different power system.Soft computing techniques have also been used for same purpose. Techniques like genetic algorithm (GA) [4], particle swarm optimization (PSO) [5,6], evolutionary programming (EP) [7], neural network [8], simulated annealing [9], ant colony optimization [10,11] to name a few, have been used to avoid premature convergence. However, these techniques are computationally expensive as most of the techniques are populations based algorithms. The hybrid techniques are designed such LR-EP [12], LRGA [13], and EP-Tabu search [14], to preserve a global searching capacity of optimization techniques but in a reasonable computation time. An aim is to find an optimum set of parameters for parameter-sensitive techniques using soft computing.Above mentioned techniques generated the best profit solutions till the multi-agent approaches have not been used for solving PBUC. Two multi-agent approaches have been reported in the literature. In first multi-agent approach [15], different random traveling routes are designed for visiting generator agents. A mobile agent negotiates profit and power with generator agents as per the traveling routes. But, it can possible that none of the traveling route can generate the best profit solution in a stipulated time. Moreover, this approach involves stochasticity that can generate different profit solutions when executes at different time for same load demand condition. Other multi-agent approach is our previous work [16] where maximum profit generating generator agents are committed for a given load demand. Thereafter, a negotiation stage is used to commit those generators which can produce positive profit for remaining load demand. These multi-agent studies reported the best profit solution when compared with the benchmark techniques. An efficient and improved version of our previous study [16] is proposed in this paper that produces the best profit solutions. In the following section, an overview of multi-agent system is given.A term ‘agent’ is defined in [17] as “a software or hardware entity that is situated in some environment, and is capable of performing autonomous actions in that environment in order to meet its design objectives”. An agent is characterized by its autonomy, social ability, reactive and protective behavior. Being autonomous an agent can independently perform any complex task. Social ability allows an agent to interact and negotiate with human or other agents to achieve its task. Reactive characteristic of agent helps it to perceive and respond toward a changing environment in a timely fashion. Proactive behavior of agent is not simply act in response to its environment but it is able to meet its goal by changing its behavior dynamically. Some other properties that are associated with agents include mobility, temporal continuity, collaborative behavior, etc. Agents which satisfy all or a few above mentioned properties, can be further categorized as weak or strong agency. Multi-agent system (MAS) is an extension of agent technology where agents are loosely connected and act in an environment to achieve their goals. Some benefits of using MAS technology for large system are [18]:•Parallel computation and asynchronous operations can increase speed and efficiency of the operation.Fault-tolerance for graceful degradation of system when agents fail.Scalability and flexibility of adding or removing agents from a system whenever necessary.Reusability of agents that can be reused multiple times.However, some critical challenges with MAS are:•Concurrent learning and action of agents toward a changing environment can result in unstable behavior and can cause possible chaos.Limited visibility or information for agents distributed in the system can lead to sub-optimal solution.Action or decision taken by any agent may not be suitable for another agent that can be reduced by sharing the information on constraints, action preference and goal priorities. But the problem is when to communicate and to which of the agents.Difficulty in debugging and testing a massively parallel and distributed system.Nevertheless, MAS has been used as a potential tool for various real world problems over the past few year. Broadly, MAS has been used as an approach to the building of robust, flexible and extensible hardware/software systems, or as a modeling approach [19]. In former approach, a system of multi-agents is required for those applications where agents can respond correctly in a changing environment, agents can be added as and when required, agents can be replaced in other system or be upgraded, and for graceful degradation of system when one or more agents fail. A few such applications can be found in [20–23].In modeling approach, MAS is used to represent a large and complex system which is difficult to model explicitly. The entities are designed as intelligent agents to simulate complex behavior. Many real world problems using this modeling approach can be found in studies like [24–27]. In power engineering domain, studies [19,28] summarized the concepts, approaches, and technical challenges, technologies, standards, and tools for building multi-agent systems for various applications. PBUC is one such problem from power system area which is high-dimensional, mixed variables and complex due to its combinatorial nature. Multi-agent modeling is done to solve PBUC problem by decomposing the problem into asynchronous operations. In the remaining paper, the formulation for PBUC problem is described in Section 3. Our proposed multi-agent modeling for PBUC is discussed in Section 4. The simulation results are discussed in Section 5 which is followed by conclusions in Section 6 with a note on future work.A formulation of PBUC is adopted from study [12] where profit maximization of a GENCO in the deregulated market is modeled with the soft constraints on load demand and reserve. A description of objective function and constraints is given in the following sections.In the deregulated power market, objective for a GENCO is to maximize its expected profit as per Eq. (1).(1)Maximize:Profit(PF=RV−TC)A GENCO can sell power in the energy market and the reserve (ancillary) markets, respectively. A purpose of maintaining reserve in the ancillary market is to cater uncertainty in load demand. The amount of power and reserve sold depends on the way reserve payments are made [29]. A payment is made for reserve allocated where GENCO receives the reserve price per generator of reserve for every time period that the reserve is allocated but not used. When reserve is used, GENCO receives the spot price for the generated reserve [12]. Thus, the revenue for GENCO is evaluated according to Eq. (2).(2)RV=∑i=1N∑t=1T(Pi,t.SPt).Xi,t+∑i=1N∑t=1T((1−r)RPt+r.SPt)Ri,t.Xi,tThe term on the left hand side of addition in above equation represents the expected revenue from power selling. Second term on the right hand side of addition signifies the expected revenue from reserve. If reserve is used and then, GENCO can receive the spot price with probability ‘r’. Otherwise, the reserve price is received when reserve is allotted but not used.Total operation cost for a GENCO is evaluated as per Eq. (3) that includes fuel cost and start-up cost for committed generators.(3)TC=(1−r)∑i=1N∑t=1TF(Pi,t).Xi,t+r.∑i=1N∑t=1TF(Pi,t+Ri,t).Xi,t+STi.Xi,t.(1−Xi,t−1)Fuel cost (F(Pi,t)) of generator i at time t is represented by a quadratic polynomial which is given in Eq. (4)(4)F(Pi,t)=ai+biPi,t+ciPi,t2where ai, biand ciare cost coefficients of generator i.PBUC problem is subjected to various constraints which are as follows:1.Load demand constraint: In the deregulated power market, this constraint is represented as soft constraint [29]. It suggests that the total power generated from the committed generators at time t can be less than or equal to the forecast load demand at t.(5)∑i=1NPi,tXi,t≤LD′tSpinning reserve constraint: It also suggests that the reserve generated from the committed generators at time t can be less than or equal to the reserve requirement at t.(6)∑i=1NRi,tXi,t≤SR′tGeneration limit constraints: The power and reserve produced by any generator must be within its limited capacity as indicated below:(7)Pimin≤Pi,t≤PimaxPi,t+Ri,t≤PimaxMinimum up and down time constraints: These constraints indicate that a generator must be ON/OFF for minimum number of hours before shut-down or start-up, respectively. These constraints are given by Eq. (8).(8)(tup(i)−Tiup)(Xi,t−1−Xi,t)≥0(tdown(i)−Tidown)(Xi,t−1−Xi,t)≥0From the above formulation, we can observe that PBUC problem is high dimensional (N), has real and binary variables (Pi,t, Ri,t, Xi,t), a non-explicit objective function (PF) and various inequality constraints. Due to minimum up and down time constraints, PBUC problem becomes combinatorial in nature which is complex and difficult to solve. In the following section, a multi-agent modeling for PBUC problem is discussed which can maximize an expected profit of GENCO by communication and negotiation among the agents.JADE (Java Agent DEvelopment) [30] framework is used that conforms to the Foundation for Intelligent Physical Agents [31] standards for intelligent agents. JADE platform provides a set of functions and classes to implement agent functionality, such as agent management service, directory facilitator and message passing services. Agent management service (AMS) is responsible for managing agent platform, which maintains a directory of Agent Identifiers (AIDs) and agent states. Directory facilitator (DF) provides default yellow page services in the platform which allow agents to discover other agents in a network based on services they wish to offer or to obtain. Finally, message transport service (MTS) which is responsible for delivering messages between agents, provides services for message transportation in agent system.Two types of agents are created using JADE platform that are coordinating agent (CA) and generator agents (GenAgents). Fig. 2shows a simplified architecture of multi-agent system for PBUC where G1–G8 represent GenAgents. It can be seen from figure that GenAgents can only communicate and share information/data with CA. However, any negotiation between GenAgents can possible via CA.PBUC problem is decomposed in this paper so that a task can be distributed among CA and GenAgents. For example, Eqs. (2) and (3) show two summations over ‘T’ and ‘N’. Summation over time is decomposed for CA so that CA can interact and negotiate with GenAgents for every time period ‘t’. Other functionalities for building CA are:•CA can take decision for committing GenAgents which depends on profit values evaluated by GenAgents.Apart from communicating with GenAgents, CA also stores data which can be shared with GenAgents.CA is responsible to satisfy constraints given in (5) and (6) and to update (DLt, RLt) every time when any GenAgent commits or shuts down.CA also asks GenAgents to check their up and down time constraints.Summation over ‘N’ is broken down by generating ‘N’ GenAgents. Eq. (1) is now simplified and these GenAgents can evaluate profit according to (9).(9)Profit(Pri,t)=[{Pi,t.SPt+Ri,t.((1−r).RPt+r.SPt)}−{(1−r).F(Pi,t)+r.F(Pi,t+Ri,t)}].Xi,tConstraints given in (5) and (6) are modified for these GenAgents as given in (10) in which values of DLtand RLtare to be supplied by CA. However, the generation limit constraints are same as given in (7).(10)Pi,t.Xi,t≤DLtRi,t.Xi,t≤RLtIt can be seen here that a desired amount of power and reserve is decided by GenAgents, whereas CA tries to commit those GenAgents for which the profit for GENCO can be maximized. GenAgents also satisfy up and down time constraints given in (8) when asked by CA.For intelligent scheduling of generators, CA communicates GenAgents at various stages as shown in Fig. 3. These stages are broadly divided into six stages which are discussed in the following sections.This stage is designed to initialize important parameters. CA assigns zero value to current and last iteration's profit of GENCO, that is, {PFit, PFit−1=0}. Similarly, {DLt, SPt}= forecast load demand and spot price, respectively. RLtis set to 10% of DLtand RPt=0.001×SPtfor benchmarking the results. Starting iteration (it) and time (t) are equal to one in this stage.This stage is designed for GenAgents to evaluate their profit values using Algorithm 1. Values of {DLt, RLt, SPt, RPt} which are stored by CA, are shared with GenAgents. In this process, every GenAgent evaluates {Pri,t, Pi,t, Ri,t} values and send them to CA. GenAgents which are already committed or cannot satisfy constraint given in (10), will not evaluate profit.Algorithm 1 which evaluates {Pri,t, Pi,t, Ri,t} is motivated from the reserve payment method described in Section 3.1 where RPt≪SPt. In this algorithm, every GenAgent tries to deliver as much power in hour t depending on DLt. If generating capacity further allows, then reserve gets scheduled depending on RLtand unit capacity as given in Eq. (7). Profit, power and reserve values for every GenAgents are then stored by CA that helps in committing them in following stage.Algorithm 1Profit evaluation by GenAgent_(i)1:ifDLt>=Pimaxthen2:Pi,t=Pimaxand Ri,t=0 for selling3:else4:ifDLt>=PiminthenPi,t=DLt5:ifPi,t+RLt>PimaxthenRi,t=Pimax−Pi,t6:else7:Ri,t=RLt8:end if9:end if10:end if11:Evaluate PRi,tfrom equation (9)Algorithm 2Rule for committing potential GenAgent_(i)1:if Profit of potential GenAgent_(i) >0 for remaining {DLt, RLt} then2:Current_profit=Last_profit=03:for every committed GenAgent at hour tdo4:Apply power sharing rules shown in Fig. 45:Current_profit =Pri,t+Prj,t+∑k=1k≠ik≠jMPrk,t6:ifCurrent_profit>Last_profitthen7:Last_profit=Current_profit8:Store updated Pri,t, Pi,t, Ri,t, Prj,t, Pj,t, Rj,t9:end if10:end for11:Commit GenAgent_(i) with updated values of Pri,t, Pi,t, Ri,t. Also, assign updated Prj,t, Pj,t, Rj,tvalues for previously committed GenAgent_(j) of the best Last_profit combination12:Update DLtand RLt13:end ifThis stage is referred as a competing stage for GenAgents where every GenAgent tries to commit first. This stage can help GENCO to accumulate a significant profit by committing maximum profit generating GenAgents. Therefore, CA sorts GenAgents in descending order of their profit values and commit them one-by-one. When any GenAgent_(i) is committed, {DLt, RLt} values are updated as {DLt=DLt−Pi,t, RLt=RLt−Ri,t}. The process of committing GenAgents continues till DLt≥Pi,t. Otherwise, this stage gets over.After executing rules of competing stage, some GenAgents may available in a system of GenAgents which can still generate positive profit for remaining {DLt, RLt}. These GenAgents are referred as potential GenAgents. In some other cases, a few GenAgents have to satisfy minimum up/down time constraint by committing for a specified period. These GenAgents are designated as must_commit GenAgents for identification and further processing in next iteration. The details of assigning must_commit condition is described later in Section 4.2.5.In cooperative stage, a potential or a must_commit GenAgent cooperatively negotiates power and reserve with already committed GenAgents. The aim of this stage is to further accumulate profit for GENCO, after-all every generating unit belongs to same GENCO. Based on a potential or a must_commit GenAgent, two power sharing scenarios are developed here. Power sharing scenario 1 is developed to commit potential GenAgent after negotiating power and reserve with committed GenAgents. The rules of negotiation for must_commit GenAgent and committed GenAgent are designed in power sharing scenario 2. These scenarios are discussed in following sections.This power sharing scenario is designed to explore a best profit combination for potential GenAgent_(i) when all committed GenAgents participate in power sharing. The rules are designed in Algorithm 2 where two power sharing cases for a potential GenAgent_(i) and a participating committed GenAgent_(j) are shown in Fig. 4. Based on higher profit accumulating case, the values of current_profit and last_profit values are updated as and when required. When every committed GenAgent takes part in this power sharing process, GenAgent_(i) is committed with the updated values of Pri,t, Pi,t, Ri,t. The participating committed GenAgent_(j) of the best profit combination also updates its Prj,t, Pj,t, Rj,tvalues.Algorithm 3Rules for must_commit GenAgent_(i)1:Current_profit=Last_profit=02:forevery committed GenAgent at hour tdo3:ifDLt≥Piminthen4:Apply power sharing rules shown in Fig. 45:else6:Apply power sharing rules shown in Fig. 57:end if8:Prefer high profit generating case9:ifPri,t+Prj,t≥0 then10:Store updated Pri,t, Pi,t, Ri,t, Prj,t, Pj,t, Rj,t11:else12:ifPri,t≥Pri,t+Prj,tfor case 1 || Pri,t<0 for case 2 from both Figs. 4 and 5then13:Store updated Pri,t, Pi,t, Ri,t, Prj,t, Pj,t, Rj,t14:else15:Explore a possibility of de-committing participating committed GenAgent_(j) using Algorithm 416:end if17:end if18:ifCurrent_Profit>Last_profitthen19:Last_profit=Current_profit20:Store updated Pri,t, Pi,t, Ri,t, Prj,t, Pj,t, Rj,t21:end if22:end for23:Store updated ON–OFF status of best Last_profit combination and Pri,t, Pi,t, Ri,t, Prj,t, Pj,t, Rj,tvalues of GenAgent_(i) and GenAgent_(j).24:Revise the decision of committing must_commit GenAgent_(i)25:if Minimum up time constraint of must_commit GenAgent_(i) is satisfied from t tot−Tiupthen26:Profit_sum of GenAgent_(i) =∑k=tt+TidownPri,k27:ifProfit_sum of GenAgent_(i) <Prj,tof GenAgent_(j) then28:Remove must_commit condition and shut down GenAgent_(i) from t tot+Tidown.29:Participating committed GenAgent_(j) remains committed with its original Prj,t, Pj,tand Rj,tvalues30:else31:Commit GenAgent_(i) and GenAgent_(j) with updated values of Pri,t, Pi,t, Ri,t, Prj,t, Pj,t, Rj,tof the best profit combination32:end if33:else34:Commit GenAgent_(i) and GenAgent_(j) with updated values of Pri,t, Pi,t, Ri,t, Prj,t, Pj,t, Rj,tof the best profit combination35:end if36:Update DLtand RLtWhen any GenAgent with must_commit condition exists in a system of GenAgents, this power sharing scenario is executed. The rules are designed in Algorithm 3 with the same motivation of finding a best profit combination for a must_commit GenAgent when all committed GenAgents participate in this power sharing process. However, there exist two conditions for power sharing cases which depend on available DLtand capacity (Pimin) of must_commit GenAgent_(i). First power sharing condition corresponds to the same rules as shown in Fig. 4. Second power sharing condition triggers the rules which are shown in Fig. 5. These rules are similar to the rules in Fig. 4, but must_commit GenAgent_(i) is either allowed to commit forPiminor for more power.Once a higher profit generating case is chosen, a possibility of complete power sharing from a participating committed GenAgent_(j) to a must_commit GenAgent_(i) is explored. It is referred as de-committing a participating committed GenAgent_(j) and conditions are shown in Algorithm 4. This possibility is explored so that the profit for GENCO can be maximized further by allowing must_commit GenAgent to commit for more power. However before shutting committed GenAgent_(j), its minimum up and down time constraints as given in (8) are to be satisfied for specified time period as mention in Algorithm 4. Whether participating GenAgent_(j) is de-committed or not, updated Pri,t, Pi,t, Ri,t, Prj,t, Pj,t, Rj,tvalues are stored. In a same manner, every committed GenAgent participates in power sharing and a best profit combination for must_commit GenAgent_(i) is explored. ON–OFF status and updated Pri,t, Pi,t, Ri,t, Prj,t, Pj,t, Rj,tvalues of GenAgent_(i) and GenAgent_(j) of the best profit combination are stored.Algorithm 4Conditions for de-committing a participating committed GenAgent_(j) for GenAgent_(i)1:if Minimum up time constraint of GenAgent_(j) is satisfied from t tot−Tjupthen2:if Minimum down time constraint of GenAgent_(j) is satisfied from t tot+Tjdown, assuming its current status ‘OFF’ then3:GenAgent_(j) is assumed de-committed4:Update DLt=DLt+Pj,tand RLt=RLt+Rj,t5:GenAgent_(i) then evaluates and store its Pri,t, Pi,t, Ri,tfor updated DLt, RLt6:else7:Profit_sum of GenAgent_(j) =∑k=tt+TjdownPrj,k8:ifProfit_sum of GenAgent_(j) < best stored Pri,tof GenAgent_(i) then9:Update DLt=DLt+Pj,tand RLt=RLt+Rj,t10:GenAgent_(i) then evaluates and store its Pri,t, Pi,t, Ri,tfor updated DLt, RLt11:else12:GenAgent_(j) cannot de-commit13:Store updated Pri,t, Pi,t, Ri,t, Prj,t, Pj,t, Rj,t14:end if15:end if16:end ifDuring a process of committing GenAgent with must_commit condition, there is a possibility that must_commit GenAgent_(i) generates higher negative profit and none of participating committed GenAgents is ready to de-commit as described earlier in Algorithm 4. At this stage, the decision of committing GenAgent_(i) with must_commit condition is revised. It is done by evaluating profit of GenAgent_(i) from t tot+Tidownhours and then, compare it with original Prj,tof GenAgent_(j). Based on the comparison, either must_commit GenAgent is de-committed from t tot+Tidownhours and participating GenAgent_(j) is restored with its original values of Prj,t, Pj,tand Rj,t. Or, GenAgent_(i) and GenAgent_(j) of the best profit combination are committed with their updated values of Pri,t, Pi,t, Ri,t, Prj,t, Pj,t, Rj,t.Next stage is checking the minimum up and down time constraints given in (8) for all committed GenAgents. Rules are designed either to assign must_commit condition or shut down GenAgent so that the loss in revenue can be minimized.Rules designed for minimum up and down time constraints are shown in Algorithms 5 and 6. Both algorithms are similar except a specified time period that depends ontiupandtidownhours for up and down time constraints, respectively. Based on profit, either must_commit condition is assigned to GenAgent_(i) or shut it down.Algorithm 5Rules to satisfy minimum down time constraint for GenAgent_(i) at time t1:Suppose GenAgent_(i) is de-committed for tdownhours (<Tidown)2:Profit_sum of GenAgent_(i) =03:fork=t−tdown→t−tdown+Tidowndo4:ifk<tthen5:ifDLt≥Piminthen6:Profit_sum of GenAgent_(i) = Profit_sum + Pri,tevaluated by Algorithm 1 for given DLt7:else8:Profit_sum of GenAgent_(i) = Profit_sum + Pri,tevaluated by Algorithm 1 forPimin9:end if10:else11:Profit_sum of GenAgent_(i) = Profit_sum + Prk,t12:end if13:end for14:ifProfit_sum of GenAgent_(i) >STiof GenAgent_(i) then15:Assign must_commit condition to GenAgent_(i) from t−tdownto t−1 hours16:else17:Shut-down GenAgent_(i) from t tot−tdown+Tidownhours18:Update DLtand RLtfor t tot−tdown+Tidownhours19:end ifAlgorithm 6Rules to satisfy minimum up time constraint for GenAgent_(i) at time t1:Suppose GenAgent_(i) is committed for tuphours (<Tiup)2:Profit_sum of GenAgent_(i) =03:fork=t−tup→t−tup+Tiupdo4:ifk<tthen5:Profit_sum of GenAgent_(i) = Profit_sum + Prk,t6:else7:ifDLt≥Piminthen8:Profit_sum of GenAgent_(i) = Profit_sum + Pri,tevaluated by Algorithm 1 for given DLt9:else10:Profit_sum of GenAgent_(i) = Profit_sum + Pri,tevaluated by Algorithm 1 forPimin11:end if12:end if13:end for14:if Profit_sum of GenAgent_(i) >STiof GenAgent_(i) then15:Assign must_commit condition to GenAgent_(i) from t tot−tup+Tiuphours16:else17:Shut-down GenAgent_(i) from t−tupto t−1 hours18:Update DLtand RLtfor t−tupto t−1 hours19:end ifCA terminates the proposed multi-agent approach when two conditions are satisfied simultaneously. First condition satisfies when profit values from committed GenAgents of current and last iterations are same. Second termination condition triggers when none of GenAgent with must_commit condition exists in a system of GenAgents. If any of these conditions is not met, an iteration count increases by 1. The procedure of Fig. 3 starts from interaction stage and t=1h.Simulations using proposed multi-agent modeling for solving PBUC are performed for different systems consisting ten to 100 thermal generating units. These systems of generators can be owned by a GENCO for a day ahead scheduling. The ten generation units data and forecast data is taken from [12]. Table A.4 in Appendix A shows generating unit's data required to perform the simulations. In this table, the data of every row is self explanatory from nomenclature except “Ini.” which suggests that a generator is either ON (positive integer) or OFF (negative integer) for given number of hours at time t=0. The data of forecast load demand and forecast spot price for ten generators’ system is given in Table A.5. For testing out a larger system, the thermal generator data is obtained by duplicating the ten generators’ data. The value of forecast load demand is adjusted in proportion to the generator size. In following paragraphs, the results of proposed multi-agent approach are discussed and benchmarked against the commonly used techniques such as Lagrangian relaxation (LR), genetic algorithm (GA) and hybrid LRGA. A comparison of distributed artificial intelligence based multi-agent approach with the mathematical technique, the meta-heuristic algorithm and the hybrid stochastic method can help us to analyze an overall performance of proposed approach on the solution quality and on the execution time as well. Note that the ramp up and down constraints are not considered for benchmarking purpose.For LR, a relative duality gap ≤0.01 is set. Lagrangian multipliers are tuned for every system to generate best profit results. For economic power dispatch, Lambda-iteration method is used. GA proposed in study [4] is used which terminates when either 100 generations are over or variation in the best fitness solutions over consecutive 20 generations is ≤0.1. For ten to 60 generators, population of 100 is used, whereas for larger generator sets population of 150 members are used to evolve the best profit solutions. The hybrid LRGA [32] terminates when a duality gap ≤0.001. For updating Lagrangian multiplier, GA is executed for 50 generations with the population of 100. The source codes are developed on MatLab platform and executed on 64 bit Intel CPU @ 2.66GHz with 16 GB RAM. For benchmarking the results of proposed multi-agent modeling against [10,12,15,16,32–35] studies, PBUC problem is solved for r=0.005 and RPt=0.01×SPt.For ten generators system, various algorithms have been reported in the literature for finding best profit solutions of PBUC problem. These algorithms are muller method by [33], nodal any colony optimization (NACO) by [10], LR and GA by [4], LRGA by [32], LREP by [12], tabu search EPSO (TS-EPSO) by [34], LR-PSO by [35], multi-agent approach (MAA) by the authors of this paper [16], and multi-agent system (MAS) given by [15]. The proposed multi-agent modeling for PBUC is referred as “MAM” in this paper. The best profit solutions by these algorithms are shown in Fig. 6. It can be observed from figure that the approaches based on multi-agent system generated the higher profit solutions than the mathematical techniques, the meta-heuristic algorithms and the hybrid stochastic methods reported in the literature. MAM and MAS generated the best profit solution for ten generators system. The reason behind an improved solution for PBUC is the developed rules for intelligent scheduling the generators. However, the modeling of multi-agent system for MAM is based in fixed rules, whereas stochastic rules are developed for MAS.A day-ahead scheduling by MAM is shown in Table 1. During the process of scheduling, the power sharing rules were negotiated 43 times between potential GenAgents and participating GenAgents via CA. Moreover, one of the participated committed GenAgents was shutdown for some period to maximize an expected profit of GENCO. For example in Table 1, G3 is de-committed from hour 15 which allows G4 to commit at itsPimaxat the same hour. The power sharing rules further assist G5 to commit for more load demand. Another good example of power sharing can be seen at hour 17 when G2 shares its power with G4.The above techniques reported in the literature have been tested on ten generator system only. However, a performance of these algorithms can be really tested when they are executed on a larger system where the profit solution and time to generate this solution are equally important. There are some benchmark techniques which are frequently referred in the literature and are used for unit commitment problem in a vertically integrated power system. In this paper, LR, GA and LRGA techniques have been chosen for benchmarking our results for larger and scaled-up systems. A comparison of best profit solutions obtained by MAM and benchmarked algorithms is shown in Fig. 7. It can be seen from figures that MAM generated the best profit solutions which indicates its supremacy over the benchmarked algorithms for a wide range of thermal generator systems. In Fig. 7(f), the gain in profit values using MAM is shown against LRGA. Among the benchmarked techniques, LRGA is chosen because it generated the next best profit solutions for every system of generators. It can be seen that the gain in profit values ranges from $1613.6 for ten generator system to $18985.94 for 100 generator system that a generator company can earn in a single day. It suggests that MAM can help GENCO to accumulate a huge annual profit.In this section, a posterior analysis is done to capture the communication and negotiation among the agents that define a working behavior of MAM. Various data is shown in Table 2. Second column of table shows number of executions for the power sharing rules shown in Figs. 4 and 5. An increasing trend of calling the power sharing rules by CA indicates their significance for exploring and finding the intelligent schedule corresponding to the best profit solution.In Section 4.2.4.3, a possibility to de-commit a participating committed GenAgent is explored that can help in accumulating profit for a GENCO. Fourth column of Table 2 indicates an increasing values of such generators so that must_commit GenAgent can commit for more power.In Section 4.2.4, a decision of committing must_commit GenAgent is revised and a possibility to de-commit it is explored. Third column of Table 2 reveals the importance of this rule when a GENCO owns a large number of generating units.Table 3shows a comparison of execution time which suggests a remarkable improvement in the CPU time of MAM against LR, GA and LRGA techniques. MAM consumes less time because the rules are executed which depend on examining various conditions. On the other hand, the optimization techniques improve quality of solution iteratively where more function evaluations is required to generate an optimal solution. Moreover, the computation time suggests that MAM can be used for a shorter period scheduling than a day ahead.It is interesting to note that LR solves generation scheduling problem by decomposing Lagrange formulation [12]. Lagrangian function is minimized for each generator separately without considering any affect on other generators. Similarly, MAM also commits maximum profit generating GenAgents. For economic power dispatch, LR based methods use optimization technique where Lagrangian multiplier are to be tuned for different generator system. However, MAM delivers the desired power and reserve based on the rules developed under cooperative stage as discussed in Section 4.2.4. Moreover, MAM is not sensitive to any parameter setting.As mentioned in Section 1, two multi-agent system based studies for solving PBUC have been reported in the literature. In first study by [15] which is referred as MAS, the negotiation of profit and power is designed on random traveling routes for a mobile agent to visit generators agents. However, the fixed rules are designed for communication and negotiation with generator agents in this paper. Stochasticity in random traveling routes is involved in MAS approach that can generate different solutions for same load demand condition when execute at different time. On the other hand, MAM can give consistent results.Other study was our previous work [16] which is referred as MAA. In MAA, the maximum profit generating generator agents are committed for remaining load demand. It is similar to the competing stage (Section 4.2.3) of MAM, but the working behavior is different. For example, when a maximum profit generating generator agent is committed, the load demand is updated by MAA. The generator agents which are currently OFF, then evaluate their profit, power and reserve using genetic algorithm for the remaining demand and reserve. In MAM, once a profit is evaluated according to Eq. (9) by GenAgents at theirPimax, these GenAgents are sorted and committed one-by-one tillDLt≥Pimax. By doing this, number of function evaluations or computation time is saved. In our previous study, a heuristic repair operator is used. However in this paper, the cooperative stage (Section 4.2.4) with different power sharing scenarios and cases is designed. The rules to de-commit generator agents (Sections 4.2.4.3 and 4.2.4.4), and assigning must_commit condition for satisfying minimum up and down time constraints (Section 4.2.5) are also introduced for MAM. The rules and conditions designed in this paper make MAM effective and able to generate the best profit solutions against the benchmarked techniques.

@&#CONCLUSIONS@&#
