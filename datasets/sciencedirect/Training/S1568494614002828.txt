@&#MAIN-TITLE@&#
A joint antenna and user selection scheme for multiuser MIMO system

@&#HIGHLIGHTS@&#
In this paper, we present a low-complexity algorithm for real-time joint user scheduling and receive antenna selection (JUSRAS) in Multiuser MIMO systems.The computational complexity of exhaustive search for JUSRAS problem grows exponentially with the number of users and receives antennas.We apply binary particle swarm optimization (BPSO) to the joint user scheduling and receive antenna selection problem.In addition to applying the conventional BPSO to JUSRAS, we also present a specific improvement to this population-based heuristic algorithm; namely, we feed cyclically shifted initial population, so that the number of iterations until reaching an acceptable solution is reduced.The proposed BPSO for JUSRAS problem has a low computational complexity, and its effectiveness is verified through simulation results.

@&#KEYPHRASES@&#
Multiuser MIMO,Particle swarm optimization,Genetic Algorithm,User selection,

@&#ABSTRACT@&#
In this paper, we present a low-complexity algorithm for real-time joint user scheduling and receive antenna selection (JUSRAS) in multiuser MIMO systems. The computational complexity of exhaustive search for JUSRAS problem grows exponentially with the number of users and receives antennas. We apply binary particle swarm optimization (BPSO) to the joint user scheduling and receive antenna selection problem. In addition to applying the conventional BPSO to JUSRAS, we also present a specific improvement to this population-based heuristic algorithm; namely, we feed cyclically shifted initial population, so that the number of iterations until reaching an acceptable solution is reduced. The proposed BPSO for JUSRAS problem has a low computational complexity, and its effectiveness is verified through simulation results.

@&#INTRODUCTION@&#
Recent research on wireless communication systems shows that the multiple-input-multiple-output (MIMO11In wireless communication systems, the term multiple-input and multiple-output (MIMO) is used to describe a system that has multiple antennas at both the transmitter and receiver. Many standards in practice e.g., IEEE 802.11 Wifi, 802.16 Wimax, and all new 4G systems have this technology.) communication systems have significantly higher channel capacity22A measure of how much information that can be transmitted and received with a negligible probability of error is called the channel capacity.than the single-input-single-output (SISO) system for the same total transmission power and bandwidth [2]. However, increased number of antennas in the MIMO system has a cost consequence. In practical wireless communication systems, signals of each antenna go through a separate Radio Frequency (RF) hardware known as RF chain (e.g., amplifiers, analog-to-digital converters, etc.). In MIMO systems, combining signals carried by a large number of antennas results in a high hardware cost due to the large number of RF chains. In [1] Molisch et al. showed that hardware cost can be significantly reduced by selecting a good subset of antennas from the set of physically available antennas and using the signals from the selected antennas only, without sacrificing the advantage of multi antenna diversity. In practical multiuser MIMO wireless communication systems, due to the limited hardware resources and computational limitations of real-time signal processing (e.g., channel estimation, joint equalization and detection etc.), it would be impractical for a base station to simultaneously handle all the users. In overcoming this problem the user scheduling plays a significant role in improving the system performance. One measure of the performance of a multiuser MIMO wireless communication system is the sum rate capacity [3–9]. User scheduling scheme selects the best group of users at each time slot to maximize the sum rate capacity of multiuser MIMO wireless communication system. In [10], authors investigate the performance of binary particle swarm optimization for joint antenna selection in single user MIMO system.A number of user scheduling and receive antenna selection schemes are in the literature, with the motivation to improve the system performance in terms of either sum rate capacity or bit error rate. However, there is little research on the joint user scheduling and receive antenna selection (JUSRAS) problem. This is a challenging problem because the complexity of exhaustive search for JUSRAS problem increases exponentially with the number of users and receive antennas. For example, let us denote by Ksthe maximum number of users that a base station can handle simultaneously, denote by K the total number of users in the system, denote by Nrthe number of receive antennas to be selected at the base station, and denote by NRthe total number of receive antennas at base station. Then, the number of possible ways of joint users and receive antennas selection isNRNr∑i=1KsKi. Exhaustive search algorithm (ESA) evaluates all possible ways of JUSRAS. Enumerating over all possible combinations and finding the one that can give best performance is computationally inefficient. Therefore, in a real-time33Real-time means computational time is in fraction of a millisecond or microsecond.environment, in which the channel condition changes frequently and user/antenna selection should quickly adapt to the changing channels, a computationally efficient algorithm is needed. Due to the high computational complexity of the optimal selection (e.g., ESA) there is a need for low-complexity algorithm to solve JUSRAS problem. One suboptimal solution for JUSRAS problem is to apply separate exhaustive search on user scheduling and antennas selection. The number of possible ways of scheduling users is∑i=1KsKiand number of possible ways of selecting receive antennas isNRNr. We call this algorithm as exhaustive antenna selection with exhaustive user scheduling (ESA-ESU). The ESA-ESU needs to evaluateNRNr+∑i=1KsKisubsets instead ofNRNr∑i=1KsKisubsets as in ESA. In this paper, we apply binary particle swarm optimization (BPSO) to the joint user scheduling and receive antenna selection problem. In addition to applying BPSO to JUSRAS, we present an improved BPSO scheme, which uses cyclic shifted initial population to achieve better performance in the JUSRAS problem. Our experimental results show that the computational complexity of BPSO is less than ESA and ESA-ESU, and the results (user scheduling and antenna selection) produced by BPSO have sum rate capacities very close to those produced by ESA, an optimal algorithm. According to our results, BSPO tends to produce with reduced computing time a solution comparable to an optimal solution.The rest of the paper is organized as the following. In section ‘System model’, we describe the JUSRAS problem and its formulation. In section ‘Binary particle swarm optimization for JUSRAS’, we illustrate the BPSO and its implementation to JUSRAS problem. Numerical results are presented in section ‘Computational complexity and numerical results’. The conclusion is given in section ‘Conclusions and discussions’.We consider an uplink multiuser MIMO system with K mobile users. Each user has NTtransmit antennas, and the base station (BS) has NRreceive antennas. Because of hardware cost concern, we consider a system that has only NrRF chains at the receiver, where Nr≤NR. It is assumed that the receiver has the channel state information (CSI). The receiver (base station) will schedule the best subset of mobile users for transmission at each time block. Signals to be transmitted are generated from the information messages in accordance with the modulation schemes, such as M-PSK, M-FSK, M-QAM, etc. The mobile radio channel is assumed to be quasi-static; that is, the channel gain remains constant during each code block of data. We denote by vectorSk≡sk1sk2⋯skNTT∈ℂNT×1the NTsymbols transmitted through NTtransmit antennas simultaneously from the kth user in each channel use. The signal received at the receiver at each symbol duration can be expressed as [3](1)Y=∑k=1KHkSk+Zwhere Hkis Nr×NTchannel matrix whose entries represent the channel gains between Nrreceive antennas at the base station (BS) and NTtransmit antennas of the kth user,Y≡y1y2…yNrT∈ℂNr×1is the received signal vector andZ≡z1z2…zNrT∈ℂNr×1is the complex additive white Gaussian noise with zero mean and unit variance.We assume that users (mobile stations) do not have their uplink channel state information44Channel state information is information about the current value of its channel H.(CSI), but the receiver at the base station has the uplink CSI. We further assume that the base station does not feedback the uplink CSI to the mobile stations. Because the users do not have the uplink CSI, it is reasonable for each of them to allocate equal transmission power to all their transmission antennas [4]. Furthermore, we assume that the base station assigns equal power for all transmitting users, and limits the total transmission power to P. If all K users are to transmit together, each user consumes transmission power P/K through NTantennas. In this case, the mutual information (or channel capacity) per symbol time for the uplink multiuser MIMO system for independent Gaussian distributed source signals for transmit antennas is [3,4](2)Csum(H1,…,HK)=log2detINr+ρ∑k=1KHkHk†where ρ=P/(N0KNT),Hk†denotes Hermitian (conjugate transpose) of channel matrix Hk, P is the sum of average transmit power from all mobile users, N0 is the noise power, andINris the Nr×Nridentity matrix. For many channel conditions (H1, H2, …, HK), disabling some users and allocating the total average power P to transmitting users results in higher mutual information (or channel capacity). Let us denote by ϕ a particular selection of users and antennas; we define ϕ to be the set of mobile users and receive antennas selected. Then, the sum rate capacity of the selected users with selected receive antenna is(3)Csum(ϕ,H1,…,HK)=log2detINr+ρ|ϕ|∑k∈ϕHkHk†The main issue of this paper is how to determine selection ϕ so that the sum rate capacity is maximized for a given value of (H1, H2, …, HK).We denote by Φ the collection of all possible joint selections of users and receive antennas. Then, the number of possible ways of jointly selecting users and receive antennas is|Φ|=NRNr×∑i=1KsKi. We can model JUSRAS problem as a combinatorial optimization problem(4)maxϕ∈ΦCsum(ϕ,H1,H2,…,HK)ormaxϕ∈Φlog2detINr+PN0|ϕ|∑k∈ϕHkHk†We also denoteϕ*=argmaxϕ∈ΦCsum(ϕ,H1,H2,…,HK). We represent each selection ϕ by a binary string(5)ϒ=ε1k,ε2k,…,εKk,ε1R,ε2R,…,εNRR,εik∈{0,1},εiR∈{0,1}whereεikis a binary indicator of whether user i is selected or not from the K users. SimilarlyεiRis a binary indicator of whether antenna i is selected or not from NRreceive antennas. For example, let us consider a case with K=9, Ks=5, NR=5 and Nr=2. Suppose that the first, third, fifth, sixth and ninth users are selected from these K=9 users and the first and the third antenna are selected from NR=5. Then ϕ representing this selection will be [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0]. Exhaustive search algorithm (ESA) evaluates all possible |Φ| solutions. Enumerating over all possible solutions and finding the one that achieves maximization (4) is computationally inefficient. Computational complexity increases exponentially with the number of users. High-speed communications demand lower complexity. In the next section we will describe the BPSO-based joint user scheduling and antenna selection scheme.In this section we present a JUSRAS scheme that utilizes particle swarm optimization (PSO). PSO is a collaborative computational technique that is derived from the social behavior of bird flocking and fish schooling. Like other evolutionary algorithms, PSO is a population-based search algorithm. In PSO, each individual is termed as a particle and a collection of particles is called population (or swarm). PSO algorithms are plausibly considered to be robust in the sense that a PSO algorithm can successfully operate (1) for a range of problem parameters and (2) despite disturbances occurring to an individual or malfunction of an individual [11,13]. Such notion is derived from a number of factors that can be observed in social insects in their operation. First, swarms are inherently redundant systems. The loss of an individual can be immediately compensated by another. Second, coordination is decentralized, so the destruction of a particular part of the swarm is unlikely to stop the operation. Third, the individuals that make up the swarm are relatively simple, making them less prone to failure. Fourth, sensing is distributed; hence the system is robust against the perturbations in the environment [16].If we represent the optimization as maximizing the objective function (or minimizing the cost function) of several variables, x1, x2, …, xn, or finding the value of vector (x1, x2, …, xn) that best fit in term s of the fitness measure F(x1, x2, …, xn), then vector (x1, x2, …, xn) can be analogically viewed as a position of a particle in the n-dimensional space. Exploring through the space to find the best solution can be analogically viewed as particles flying in the space to find the best position. PSO provides a population-based search procedure in which individuals (particles) change their positions with time. In a PSO system, particles fly around (changes their position) in a multidimensional search space (set of all potential solutions). During the flight, each particle adjusts its position on the basis of its own experience and on the basis of the neighboring particles’ experience, making use of the best position encountered by itself and its neighbors. Thus, the PSO system combines local search methods with global search methods. Therefore, each particle has a tendency to fly (move) toward better solutions [13]. In this paper, we formulate the JUSRAS problem as a discrete binary optimization problem and apply binary particle swarm optimization (BPSO) [14]. BPSO is a binary version of PSO. In BPSO every particle's position is expressed as a string of binary digits ‘0’ and ‘1’ (bits). In BPSO, a particle can move from its current position to any other feasible position in the search space by flipping various numbers of bits.In general, BPSO can be characterized by parameters and notations (Is, F, N, Iter, D, χl,PBl,GBl, Vl), where(1)Isis the space of all potential solutions.F denotes a fitness function.N is the size of population – i.e., the number of particles.Iter are the maximum number of iterations.D is the length (dimension) of the binary string that represents a particle position.χl=X1l,X2l,…,XNldenotes the positions of the particles at the lth iteration, whereXkl, k=1, 2, …, N, represents the position of the particle indexed by k at the lth iteration. Components of vectorXklare denoted asXkl=xk,1l,xk,2l,...,xk,Dl, wherexk,il∈{0,1}i=1,2,…,D.We denote byPbklthe best position at which particle k has been up to the lth iteration (best among the history of particle k's positions); that is,Pbkl≡argmax0≤i≤lF(Xki). We explicitly denote its components asPbkl=pbk,1l,pbk,2l,…,pbk,Dl. For N particles in the population collectively, we denotePBl=Pb1l,Pb2l,...,PbNl.GBlis the globally best position ever visited by any particle up to the lth iteration in terms of fitness function F. That is,GBl=argmax1≤k≤NFPbkl=argmax1≤k≤N,0≤i≤lFXki. We explicitly denote its components asGBl=gb1l,gb2l,…,gbDl.Vkl, k=1, 2, …, N, denotes the velocity of particle k at the lth iteration. We also explicitly denote its components asVkl=vk,1l,vk,2l,…,vk,Dl. For N particles in the population collectively, we denoteVl=V1l,V2l,…,VNl.In this paper we also introduce modifications to conventional BPSO in order to improve the efficiency of the proposed selection scheme. Especially, we devise, for the JUSRAS problem, a method of assigning initial positions to the particles. The BPSO algorithm in general can be briefly described as the following.Step 0: Generate initial population and velocities. At the initial iteration l=0, initialize each particle's best position,Pb10=X10,Pb20=X20,…,PbN0=XN0, initialize the global best asGB0≡(gb10,gb20,…,gbD0)=argmax1≤k≤NFPbk0Step 1: Update the iteration counterStep 2: For each particle, calculate the velocity(6)vk,il=vk,il−1+c1×U(0,1)×gbil−1−xk,il−1+c2×U(0,1)×pbk,il−1−xk,il−1,gbil−1∈{0,1},xk,il−1∈{0,1},pbk,il−1∈{0,1}k=1,2,…,Nandi=1,2,…,Dwhere U(0,1) is the random variable uniformly distributed in interval (0,1), and c1>0 and c2>0 are social and cognitive parameters to control the movement of the particle in any specific direction.Step 3: Update the position of particle k's ith element as(7)xk,il=1ifU(0,1)<σvk,il0otherwise,k=1,2,…,Nwhere σ is a sigmoid-kind function [14]. In this paper we use σ(q)=(1+exp(−q))−1.Step 4: Evaluate the current population according to the fitness function F. Store these values in temporary variablesPBTmp=Pb1Tmp,Pb2Tmp,…PbNTmp.Step 5: If the convergence criteria are satisfied, then terminate. Otherwise go to step 6.Step 6: For k=1, 2, …, N, update the particle k's best as(8)ifFPbkTmp>FPbkl−1,thenPbkl=PbkTmpelsePbkl=Pbkl−1Step 7: Update the global best asGBl=argmax1≤k≤NFPbkl. Go to step 1 and repeat the stepsIn the JUSRAS problem, we represent the selection of users and receive antennas by a binary string (vector)ϒ=ε1k,ε2k,…,εKk,ε1R,ε2R,…,εNRR,εik∈{0,1}andεiR∈{0,1}. Each element of the binary vector is associated with a user or antenna, so the length of the string (dimension of the vector) ϒ is exactly the total number of users plus total number of receive antennas in the system. Value 1 of an element indicates that the associated user or antenna is selected, and value 0 indicates that the user or antenna is not selected (Each particle X in the general description of BPSO represents a candidate value of ϒ.).Now we discuss the modifications to the conventional BPSO. In conventional BPSO, the initial population is generated randomly. We propose technique of selecting the initial population that reduces the number of iterations until reaching an acceptable solution. The basic idea is to produce a selection of users and antennas, which we call the initial feed and represent it as a binary string X0, and then to use cyclic shifts of this binary string X0 as the initial positions of the particles (In the JUSRAS problem, we set the length of binary string X0 (dimension of vector X0) to be the total number of users plus receive antennas.). We refer to this method as BPSO with cyclic shifted population. We tried two methods of generating the initial feed and presented the results in section ‘Computational complexity and numerical results’. One is to generate the initial feed randomly, and another is to generate it based on the channel condition (Fig. 1).The cyclic shifted operation is illustrated in Fig. 2. It shows that we apply cyclic shift operation on users and antennas separately and then we join the two cyclic shifted strings to make a complete BPSO particle. Fig. 3shows an example of cyclically shifted initial population. Fig. 3 uses the case of K=12, Ks=4, NR=8, and Nr=3 to illustrate the idea of cyclically shifted initialization. The use of cyclic shifts as the initial positions of the population ensures that every user/antenna is selected more or less the same number of times in the initial population (equal opportunity for all users/antennas). This results in unbiased users/antenna selection at the initialization of the BPSO. In randomly generated initial population, some users/antenna may not even be selected in the initial population in an extreme case. After generating cyclic shifts of the initial feed for the users and receive antennas separately, one can think of a number of ways of combining the users selections and the receive antenna selections generate the initial positions of particles. In this paper we use a concatenation technique illustrated in Fig. 3. To generate initial positions of particles, we concatenate the initial feed (binary string) of the user and the initial feed of the receive antennas, the first cyclic shift of the user's initial feed and the first cyclic shift of the receive antenna's initial feed, the second cyclic shift of the user's initial feed and the second cyclic shift of the receive antennas’ initial feed, etc. In the case of K=NR, this concatenation approach generates K=NRinitial positions of the particles. In the case of K≠NR, we first concatenate min(K,NR) user-receive antenna string pairs, and we choose max(K,NR)−min(K,NR) strings randomly from all cyclic shifts of the user/receive antenna side (whichever has the smaller number) and concatenate them with the rest max(K,NR)−min(K,NR) cyclic shifts of the other side one by one. Fig. 3 illustrates the BPSO initialization procedure for the case that the numbers of the user and the receive antennas are not equal. In this paper we just described the generation of max(K,NR) initial positions. Note that one can add more by including concatenation of different user–receive antenna combination of strings or by adding randomly generated positions.For performance comparison, we present the simulation results of the proposed BPSO JUSRAS problem. We use, as the performance metric, the percentage deviation from the optimal value (the results of the exhaustive search algorithm). The percentage deviation is expressed as100CsumESA−Csumθ/CsumESA, whereCsumESAis the sum-rate capacity of ESA (optimal) algorithm andCsumθis the sum-rate capacity of any suboptimal algorithm (Note: θ can be BPSO, GA or random selection). In this section we compare the performance of BPSO with Genetic Algorithm (GA), Random Selection,55Random Selection [1,4] chooses a combination of user subset and antennas subset randomly.and ESA-ESU. In all our simulations the channel was assumed to be quasi-static, and different channels in the MIMO were assumed statistically independent. The parameters used for simulations were selected so that the performance of BPSO is evaluated for different search space sizes and signal to noise ratios.For performance comparison, we used four scenarios (K, Ks, NT, NR, Nr, N, Iter)=(10, 4, 2, 10, 2, 10, 25), (26, 4, 2, 8, 2, 26, 25), (30, 3, 2, 6, 3, 30, 25), (16, 6, 2, 8, 3, 16, 25), and (20, 4, 10, 2, 20, 25). The results are presented in Figs. 4–8respectively. Figs. 4–8 illustrate the performance the ESA-ESU, Random Selection, conventional BPSO, and GA-based JUSRAS schemes in relation to the optimal performance (performance of ESA). Expression (4) is used as the fitness function. The initial population in these figures is randomly generated. Each point in these figures is based on averaging the fitness values of 100 independent simulation runs. In each simulation run, a set of channel matrices H1, H2, …, HKwere randomly generated independently of other simulation runs (We generated the real and imaginary parts of all components of theses channel matrices randomly and statistically independently each from the 0-mean Gaussian distribution with variance 1/2.). For the case of ESA-ESU algorithm, the average performance presented in each point of Figs. 4–8 takes into account different random channel realizations in different simulation runs. For the cases of stochastic algorithms, Random Selection, GA, BPSO, the average performance presented in each point of Figs. 4–8 takes into account each algorithm's random behaviors realized in different simulation runs as well as different channel realizations (We randomized the channel gains in order to evaluate different algorithms comprehensively for different possible channels. Gaussian channel is a well accepted channel model in wireless communications.). These figures show that percentage deviation from the optimal algorithm achieved by the BPSO algorithm is close zero and is better than GA, Random Selection, and ESA-ESU algorithms for a wide range of SNR. Intuitively, BPSO is highly likely to yield a better solution if the algorithm runs more iterations for the same population size.Figs. 9–11exhibit the effect of different schemes of generating BPSO initial population in BPSO. The performance is evaluated with three scenarios (K, Ks, NT, NR, Nr, N, SNR)=(8, 3, 2, 8, 4, 8, 10dB), (8, 3, 2, 8, 4, 8, 20dB) and (10, 4, 2, 10, 4, 10, 10dB). Figs. 9–11 show the sum rate capacities achievable by the intermediate solutions against the number of iterations run to obtain the intermediate solutions for different BPSO initialization schemes and GA. The three different BPSO initialization schemes are denoted in these figures as the “BPSO with random population” (random selection of all initial population), “BPSO with cyclic shift” (randomly generated initial feed and its cyclic shifts for the initial population), and BPSO with the best norm feed. In the BPSO with the best norm feed,66In BPSO with best norm feed, the initial feed selects Nrrows that have the highest vector norms from concatenated matrix H≡(H1, H2, …, HK) and selects the corresponding receive antennas. As for the users, the initial feed selects Ksmatrices with the highest Frobenius norms from the set of matrices {H1, H2, …, HK}and selects the corresponding users.the antennas/users with the best channel conditions are selected to construct the initial feed, and the individuals in the initial population are generated by cyclically shifting this initial feed. Simulation results show that performance of BPSO with best norm feed and BPSO with cyclic shift is better than BPSO with randomly chosen population and GA.Figs. 12–14explore the stochastic nature of BPSO and GA algorithms in the JUSRAS problem. For these figures the parameters were set (K, Ks, NT, NR, Nr, N, Iter)=(12, 4, 2, 8, 2, 12, 10). There were 1000 independent simulation runs. Figs. 12 and 13 show the empirical distribution histogram of the sum rate capacities achieved by BPSO and GA for SNR=5dB and SNR=20dB, respectively. The results indicate that BPSO obtains more consistent quality of solutions than GA. Fig. 14 shows the standard deviation versus SNR plot. The standard deviation of BPSO is less than that of GA for all values of SNR.As a measure of computational complexity we consider the number of complex multiplications and additions (CMAA) required by each algorithm. For a n×n matrix, each determinant requires (1/3)n3 complex multiplications and additions [15]. In order to calculate the expression inside the determinantINr+ρ|ϕ|∑k∈ϕHkHk†, approximately|ϕ|(Nr2NT)complex multiplications and additions are required. The termdetINr+ρ|ϕ|∑k∈ϕHKHk†needsNr3/3+|ϕ|Nr2NTcomplex multiplications and additions. The exhaustive search algorithm needs to computeNRNr×∑k∈ϕKkcomplex determinants, so the number of complex multiplications and additions for ESA isNRNr×∑k∈ϕKk×Nr3/3+|ϕ|Nr2NT. The BPSO and GA compute NIter determinants, so they requireNIterNr3/3+|ϕ|Nr2NTcomplex multiplications and additions. The ESA-ESU requiresNRNr+∑k∈ϕKk×Nr3/3+|ϕ|Nr2NTcomplex multiplications and additions.In modern communication and signal processing systems, dedicated DSP processors are used for complex multiplications and additions. To check the feasibility of proposed algorithm for practical implementation, in Table 1we present the computation time and number of complex multiplications and additions (CMAA) required by each algorithms for different parameter settings (i.e., different search space size). The time is calculated for Texas Instruments DSP processor C67XX series with the capability of 500 millions multiplications and additions per second (MMACS). The comparison shows that BPSO requires less time than ESA and ESA-ESU. The time for BPSO and GA is approximately same but the performance of BPSO is better than GA.We studied the idea of applying PSO to a problem of contemporary interest in the field of wireless communications, the joint user scheduling and receive antenna selection (JUSRAS) problem in multiuser MIMO system. We focused on BPSO and made significant efforts to design a good BPSO algorithm for JURAS. In particular, we used some intuition gained from domain knowledge of JURAS in order to design a method to generate initial population of BPSO. We found BPSO algorithms that require very low computational complexity and yet provide solutions that are close to the solution obtained by the exhaustive search.An important conclusion of this paper is that we found a BPSO algorithm that produces a better solution to the JURAS problem in a shorter computation time on the average than popular algorithms (ESA-ESU and Random Selection algorithms) discussed in the wireless communications field. The significance of this conclusion is that bio-inspired probabilistic evolutionary algorithms should receive attention as a new practical approach to the JURAS problem. This calls for more thorough study of BPSO as a solution to JURAS problem by exploring the space of BPSO parameters. The results in this paper also call for more study of other bio-inspired evolutionary algorithms such as ant colony optimization (ACO) [18] as approaches to solving the JURAS problem. Furthermore, the probabilistic evolutionary algorithms such as GA should be more thoroughly studied for their suitability for solving the JURAS problem, although our preliminary results indicate that our BPSO appears more suitable than GA and ACO for the JURAS problem. In fact, the simple model, low implementation complexity, resistance to trap in a local minimum all make probabilistic evolutionary algorithms suitable candidates for solving complex communication problems like the joint user scheduling and antenna selection.Our main focus within the probabilistic evolutionary algorithms in this paper was particle swarm optimization (PSO). There are already many examples of applying PSO to engineering problems (e.g., Jammer Excision in CDMA [19], optimization of power network [20], image processing and feature selection [21] etc.) BPSO fits well for solving challenging discrete optimization problems. In fact, for any NP-hard [17] problems, BPSO should be considered as a potentially practical approach. PSO in general can be used for optimization problem in which the domain of the cost function is continuum in the Euclidian space. The position in each particle can represent a candidate solution in the Euclidian space. PSO in general should be considered again as a potentially practical approach to solving optimization problems in which the objective function has many local extrema.

@&#CONCLUSIONS@&#
