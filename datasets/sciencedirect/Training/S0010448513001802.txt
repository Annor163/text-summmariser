@&#MAIN-TITLE@&#
Longest-edge algorithms for size-optimal refinement of triangulations

@&#HIGHLIGHTS@&#
We improve geometrical results on longest-edge refinement algorithms.We provide new results on the refinement propagation of the Lepp-bisection algorithm.The iterative application of the algorithm improves the quality of the triangulation.We perform an empirical study of the algorithm and the behavior of the propagation.We also review mathematical properties of the iterative longest-edge bisection.

@&#KEYPHRASES@&#
Computational geometry,Mesh refinement algorithms,Longest-edge bisection,

@&#ABSTRACT@&#
Longest-edge refinement algorithms were designed to iteratively refine the mesh for finite-element applications by maintaining mesh quality (assuring a bound on the smallest angle). In this paper we improve geometrical results on longest-edge refinement algorithms and provide precise bounds on the refinement propagation. We prove that the iterative application of the algorithm gradually reduces the average extent of the propagation per target triangle, tending to affect only two triangles. We also include empirical results which are in complete agreement with the theory.

@&#INTRODUCTION@&#
Mesh generation and refinement techniques are widely used in applications that require a decomposition of geometric objects for processing. The domain is typically discretized into a mesh composed of triangles. For most applications, the time required to process a geometric object depends on the size and quality of the decomposition. Thus, provably good mesh generation algorithms are desirable.We consider a conforming 2-dimensional triangulationτ, where pairs of neighbor triangles have either a common vertex or a common edge. We also assume a quality triangulation in the sense that the minimum angle is greater than or equal to an angle parameterθ. For a triangle setS⊂τ, the triangle-set refinement problem needs to produce a conforming refined triangulationτ′of quality analogous toτ, and where every trianglet∈Shas been refined. Note that for finite element applications, triangle-setScorresponds to the triangles inτwith unacceptable finite element error.Longest-edge refinement algorithms were designed to deal with the iterative triangle-set refinement problem. These algorithms perform local refinement based on the bisection of triangles by their longest edge, and produce conforming triangulations that maintain the quality of the input mesh. The local refinement implies the refinement of the triangles in the current triangle set and some of their neighbor triangles due to refinement propagation.In this paper we focus on the study of refinement propagation. We show that the iterative application of the algorithm asymptotically reduces the propagation to a constant value (less than three triangles in practice). We prove that the overall quality of the triangulation improves, increasing the area covered by quasi-equilateral triangles and isolating the triangles with the smallest angles.Given a trianglet(ABC)of verticesA,B,C, and edgesAB≥BC≥CA(Fig. 1(a)), the longest-edge bisection oftis performed by joining the midpointMofABwith the opposite vertex.We call any triangletthat behaves like an equilateral triangle with respect to its iterative longest-edge bisection (Fig. 2), a quasi-equilateral triangle. For quasi-equilateral trianglet(ABC), the longest-edge bisection of its descendants, trianglesAMCandMNC, is respectively performed by the edgesACandMC. Note that these bisections only produce edges parallel to the edges of initial triangleABC. This implies that at most four similarly distinct triangles are produced:ABC,MBC,AMCandMNC. Therefore, further longest-edge bisections oftand its descendants will only produce triangles similar to one of these four triangles.The mathematical properties of the iterative longest-edge bisection of triangles were studied by Rosenberg and Stenger  [1], Stynes  [2], and Adler  [3]. These can be summarized as follows: (a) for any triangletof smallest angleα, the iterative longest-edge bisection oftand its descendants produce trianglest′whose smallest interior angles are always greater than or equal toα/2(Fig. 1(b)); (b) every triangle generated is similar to one of a finite number of associated non-similar triangles; (c) the global iterative bisection (the bisection of all the triangles in the preceding level) covers, in a monotonically increasing form, the area oftwith quasi-equilateral triangles.More recently, Gutierrez et al.  [4] studied the complexity of the iterative bisection of a triangle, introducing a taxonomy of triangles based both on the evolution and the number of non-similar triangles produced. They defined six classes of triangles, considering the geometric position where vertexCof a trianglet(ABC)lies, considering thatAB≥BC≥CA(Fig. 3(a)). Note that the half-circle of centerMand radiusAMcorrespond to right-angled triangles. Triangles from Regions I and VI correspond to quasi-equilateral triangles. In  [4] it was proved that the generation of new triangles stops when a quasi-equilateral triangle is obtained, which happens inO(1α)steps, withαthe smallest angle oft. This behavior is summarized in Fig. 3(b). The graph shows the path between regions in the generation of new non-similar triangles by longest-edge bisection, as well as the convergence to quasi-equilateral triangles.The following lemmas summarize these results.Lemma 2.1The iterative bisection of a trianglet(ABC)generates a finite number of non-similar triangles that move throughout the six regions ofFig.  3(a). Furthermore, Region I or VI triangles generate at most four non-similar triangles.Lemma 2.2The iterative bisection of triangles from Regions  II  to  V  produce a sequence of new non-similar triangles until triangles of Region  I  or  VI  are obtained.Longest-edge refinement algorithms  [5,6] were designed to deal with the local iterative refinement of triangulations as needed for finite element method applications. In order to refine a set of trianglesSof a triangulationτ, these algorithms perform the longest-edge bisection of the triangles inS(and some of their neighbors and descendants) to produce a conforming triangulation, where pairs of neighbor triangles have either a common vertex or a common edge. Fig. 4shows the use of the algorithm to refine the trianglet(ABC)and how the refinement is propagated in order to obtain a valid (conforming) triangulation.Longest-edge bisection refinement algorithms inherit the properties discussed in Section  2. In particular it is guaranteed that every refined triangulation has smallest angle≥θ/2, whereθis the smallest angle in the initial triangulation.The Lepp-bisection algorithm  [6,7] is an efficient formulation of pure longest-edge bisection algorithms  [5], that maintains a conforming triangulation throughout the refinement process. This algorithm is based on the concepts of terminal edges and longest edge propagating path.An edgeEis called a terminal edge in triangulationτif it is the longest edge of every triangle that sharesE. The triangles sharingEare called terminal triangles (edgeABin Fig. 4(a)). IfEis shared by two terminal triangles thenEis an interior edge; ifEis shared by a single terminal triangle thenEis a boundary edge.For any trianglet0inτ, the longest edge propagating path oft0,Lepp(t0), is the ordered sequence{tj}0N+1, wheretjis the neighbor triangle on the longest edge oftj−1, andlongest_edge(tj)>longest_edge(tj−1), forj=1,…,N. The process ends by finding a terminal edge.To refine a trianglet0, the Lepp-bisection algorithm proceeds as follows: (1) findsLepp(t0)and a pair of terminal trianglestNandtN+1which share terminal edgeE; (2) performs the longest edge bisection oftNandtN+1by the midpoint ofE. This process is repeated until initial trianglet0is refined. Algorithm 1 presents a generalization of the algorithm for the triangle set refinement problem.Fig. 4 illustrates the refinement of trianglet0. The first step computesLepp(t0)and terminal triangles,t2andt3, which are then bisected by their longest edge (Fig. 4(b)). Next,Lepp(t0)is recomputed with terminal trianglest1andt2a(a sub-triangle oft2) as shown in Fig. 4(c). Then, a last computation ofLepp(t0)occurs, with terminal trianglest0andt1a(a sub-triangle oft1), whose bisection refines target trianglet0and stops the process (Fig. 4(d)).As stated and illustrated in the preceding section, for refining an individual trianglet0, the algorithm locally propagates the refinement to a set of largest triangles related withLepp(t0)in order to produce a conforming triangulation. Thus two new triangles are added by refining the target trianglet0, andNpropnew triangles are introduced by refinement propagation. For an illustration see the example of Fig. 4, whereNprop=8.Note thatNpropdepends on: (a) the Lepp size; and (b) the number of bisections performed inside each propagating trianglet∗, which in turn depends on the shape oft∗.Firstly, note that independent of the triangle shape, a fixed number of bisections is needed to eliminate non-conforming midpoints situated over either the longest edge, or the second longest edge oft∗as shown in Fig. 6. In exchange, for non-conforming midpoints situated over the smallest edge oft∗, some additional points in the interior and/or over the edges oft∗are introduced, depending on the geometric triangle class oft∗.Bedregal and Rivara  [8] showed that working with acceptable quality triangulations the Lepp-bisection algorithm  performs a constant number of bisections per triangle. They extended the classification of Gutierrez et al.  [4] to eliminate non-conforming points. (See Fig. 5.) They proved that any triangle in regions I, V and VI requires at most two bisections to be successfully refined; region II triangles require at most four bisections, while region IV.a triangles require only three. The worst case scenario occurs for triangles in regions III and IV.b, where the number of bisections is bounded byO(log21α), withαthe triangle’s smallest angle. Since these poor quality triangles tend to insert multiple non-conforming points over their edges (which then propagate to neighboring triangles), they generalize this bound toO(log21αmin)for triangulations with arbitrary smallest angleαmin. Lemma 4.1 summarizes these results.Lemma 4.1The average number of longest-edge bisections performed by the Lepp-bisection algorithm to maintain a triangle conforming is constant. Furthermore, this constant is less than  5  for triangles from regions  I, II, IV.a, V  and  VI; for region  III  and  IV.b  triangles, it is bounded byO(log21α).Here we analyze the evolution ofLepp(t)throughout the refinement process. Consider that, (1) whenever a triangle is bisected by the midpoint of its longest edge, a propagated refinement occurs to maintain the mesh valid, and (2) the propagation is finite since the refinement always propagates to bigger triangles.To refine an individual triangle, the size of the propagation depends on the distribution of terminal triangles in the triangulation since they represent the end of a Lepp. Therefore, the more frequent the terminal triangles are, the shorter the average propagation of the refinement is. In the rest of this section we are interested in measuring the proportion of terminal triangles in a triangulation.Also, the size of the propagation is directly affected by the presence of terminal triangles in the triangulation since they represent the end of a Lepp. Therefore, the more frequent the terminal triangles are, the shorter the average propagation of the refinement is. We are interested in measuring the proportion of terminal triangles in a triangulation.In what follows, we show that the percentage of terminal triangles increases as the refinement proceeds. To this end we will take advantage of a result on the 4-Triangles refinement algorithm (a special longest-edge algorithm  [9]) by Suarez et al.  [10]. They showed that the iterative application of the 4-Triangles refinement algorithm on a triangulationτincreases the proportionB(τ)=T(τ)N(τ), whereT(τ)is the number of pairs of terminal triangles in the meshτ, andN(τ)is the total number of triangles; tending to coverτwith terminal triangles, and reducing the average length of propagation to five triangles.Note that one 4-Triangles partition of a triangle is equivalent to two steps of longest-edge bisections of a quasi-equilateral triangle. This, along with Lemma 2.2, allows us to extend these results to the longest-edge bisection algorithm.Proposition 4.2For any triangulationτ, the global iterative use of the Lepp-bisection of triangles generates triangulation covered by terminal triangles.ProofThe iterative longest-edge bisection of triangles generates triangles from Regions I and VI (Lemma 2.2). Furthermore, the iterative longest-edge bisection of these triangles presents the same bisection pattern as the 4-Triangles partition. Therefore, the theoretical results on the propagation problem for the 4-Triangles algorithm hold for the Lepp-bisection algorithm. □Theorem 4.3The global iterative application of the Lepp-bisection algorithm increases the proportion of Region  I  and  VI  triangles in the mesh, approaching  1  as the number of iterations increases.ProofGiven a triangletwith smallest angleαand largest angleγ, functionFimodels the number of triangles from Regions I and VI after thei-th nested bisection of the triangles int. The following recurrence relations represent the growth of functionFifor each similarity region:(i)Fi=2Fi−1, andF0=1; for Regions I and VI triangles (See Fig. 7(a))Fi=2Fi−1+2Fi−2, andF0=0,F1=1; for Region II triangles (See Fig. 7(b))Region III triangles will behave like Region II fori>1.7log(π6α), the number of bisections needed to obtain a Region I or II triangle. (See Fig. 7(c))Region IV: will behave like Region I, II or III triangles fori>(δ−π2)/α, the number of bisections to obtain a Region I or II triangle.Region V: will not behave worse than Region III.FunctionFionly considers the nested bisection of a triangle. It does not consider the internal propagation that the algorithm performs in order to maintain the conforming mesh (if it did, that would translate into a faster appearance of quasi-equilateral triangles during a single refinement step). Therefore,Firepresents a lower bound on the algorithm’s generation of Regions I and VI triangles. For Region III, IV and V triangles, Lemmas 2.1 and 2.2 ensure the convergence of the generation of Region I and VI triangles.As the number ofiiterations tends to infinity,FiN(τi)tends to 1, withN(τi)the number of triangles of triangulationτat iterationi.N(τi)is represented by the recurrence relationNi=2Ni−1since every triangle is bisected at each iteration, doubling the number of triangles.□Fig. 7 shows the transition among regions during the iterative longest-edge bisection of triangles until obtaining quasi-equilateral triangles. Fig. 7(a) shows how quasi-equilateral triangles only generate other quasi-equilateral triangles. Fig. 7(b) shows the transition tree of Region II, IV.a and V triangles (the green triangle represents the refinement tree of a Region I triangle tree). Fig. 7(c) shows the transition behavior of Region III, IV.b and V triangles (the white triangle represents the refinement tree of a Region I, II or III triangle). The generation of new subtrees in Fig. 7(c) halts within a finite number of steps with the appearance of a Region I or II triangle (Lemma 2.1).Corollary 4.4The iterative application of the Lepp-bisection algorithm gradually reduces the average extent of the propagation, tending to  2  triangles.ProofThe proof follows from the direct application of Theorem 4.3 and Proposition 4.2.Note that Region I and VI triangles are regarded as good quality triangles, mostly having a smallest angleα≥π6. Therefore, the Lepp-bisection algorithm not only reduces the work of refinement in repetitive applications, but improves the overall quality of the triangulation.

@&#CONCLUSIONS@&#
In this paper we presented a complete study on refinement propagation for the Lepp-bisection algorithm, proving that size-optimal meshes are obtained. Our experiments show that both the number of triangles generated inside propagating triangles, and the size of the propagation remain constant. The Lepp-bisection algorithm produces more quasi-equilateral triangles in each iteration. Thus, better quality triangles tend to cover the propagation path, so future iterations are processed faster with shorter longest-edge propagating paths, while the triangles with the smallest angles are isolated. In practice, longest edge algorithms are efficient techniques for fast and robust refinement of good quality triangulations.