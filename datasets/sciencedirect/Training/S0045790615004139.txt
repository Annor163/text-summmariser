@&#MAIN-TITLE@&#
Application of a recurrent wavelet fuzzy-neural network in the positioning control of a magnetic-bearing mechanism

@&#HIGHLIGHTS@&#
A new recurrent wavelet fuzzy neural network (RWFNN) controller is proposed.RWFNN is adopted to control the rotor position of a thrust magnetic bearing (TMB).The online learning algorithm of RWFNN is derived using back-propagation method.The adaptive learning rates are performed via improved particle swarm optimization.Numerical simulations show the validity of TMB using the RWFNN controller.

@&#KEYPHRASES@&#
Fuzzy Neural Network (FNN),Magnetic Bearing (MB),Particle Swarm Optimization (PSO),Positioning control,

@&#ABSTRACT@&#
Graphical abstractImage, graphical abstract

@&#INTRODUCTION@&#
Magnetic bearings (MBs) are a very promising technology and are now being employed for a variety of high performance applications [1-4]. Based on the noncontact and frictionless characteristics, MB offers advantages such as longer lifetime, lower frictional losses, higher rotational speed, and elimination of the lubrication [1, 3]. In most applications, the control objects should be positioned and moved precisely and functionally to deal with the different operation demands or environments. Therefore, precise positioning control is a very important issue for MBs. In [5], a nonlinear control system of a magnetic journal bearing was designed using a combination of feedback linearization and backstepping concepts for tracking control. In this design, a proportional-derivative (PD) feedback law, which was used for pseudo-input during the backstepping procedure, is unable to deal with the time-varying disturbance. In [6], a decentralized proportional-integral-derivative neural network (PIDNN) control scheme was proposed to regulate and stabilize a fully suspended five degree-of-freedom MB system. Based on the decentralized concepts, the computational burden was reduced and the controller design was simplified. A three-pole MB using a decentralized proportional integral derivative (PID) feedback law with linear quadratic Gaussian (LQG) optimization and an integral sliding mode controller was presented in [7]. Furthermore, some other control designs such as linear quadratic Gaussian control [8], H∞ control [9], backstepping control [10], feedback linearization approach [11] were reported for the positioning and tracking controls of MBs in recent years.In the operation of MB systems, the purpose of bias current setting is to improve the linearity of the force-current relationships around the operating point and allow for a higher slew rate of force [1]. Moreover, the operating modes of the drive system which supply the currents to the electromagnets can be classified into three classes [4]. The most popular is Class-A driving mode, i.e. DDM, in which both the bias currents of the opposite MBs are set at half of the maximum allowable current. Then, the control current is added to the bias current in one electromagnetic coil and subtracted from the bias current in the opposite one. This operating mode provides maximum range of the force dynamic and good linearity of the control dynamic. For Class-B driving mode, both bias currents are set at lower values and control current is superimposed on only one side of the pair of coils. Though the energy consumption can be improved efficiently, this operating mode is only suitable for low bearing stiffness and low vibration applications due to poor slew rate and controllability of the force. If there is no bias current used, it is categorized as Class-C driving mode. Though the rotor heating is the least, high nonlinearity of the electromagnetic force dynamic degrades the control characteristic greatly.By combining wavelet functions with neural networks (NNs), wavelet neural networks (WNNs) have been developed for a wide range of fields and applications [12]. Since the WNN introduces the wavelet decomposition property into NN, it provides quick converge and high precision with reduced network size for an alternative in nonlinear control problems. Moreover, a wavelet fuzzy neural network (WFNN) combining wavelet theory with fuzzy neural network (FNN) was further proposed [13]. In WFNN, each fuzzy rule corresponds to a sub-WNN [13]. Thus, the sub-WNNs at different resolution levels are used to capture different behaviors of the dynamic systems. Additionally, the role of the fuzzy rules of FNN is to determine the different contribution of each sub-WNN to the output of the WFNN [13]. Compared with conventional WNNs, the approximation accuracy and generalization capability of the WFNN can be improved greatly via wavelet and fuzzy sets parameters learning [13-15].Particle swarm optimization (PSO), which is a population-based optimization method, has attracted increasing attention to achieve high efficiency solver for global optimization problems in scientific and engineering domains [16, 17]. The PSO method is based on the simulation of animal social behaviors with self-adaptive characteristic. Comparing with genetic algorithm (GA), PSO has the ability to retain a memory of good solutions by all particles, whereas previous knowledge is not considered after each evolution in GA. Meanwhile, since the unique information diffusion and interaction mechanism of PSO are comparably simple, it requires low computational burden and is suitable in various applications such as control [18, 19], system identification [20], diagnosis [21], and image process [22, 23]. These works have clearly shown that PSO is a fast and reliable tool to design the optimal strategy, and also can outperform other evolutionary algorithms. On the other hand, many variants of PSO have been proposed to further enhance the particle's learning ability and make it powerful in reasoning over the past decade [24-26]. In [24], the worst experience component is included in improved particle swarm optimization (IPSO) to give additional exploration capability.In this study, the TMB system is first represented by a nonlinear dynamic model. Moreover, since the exact parameters of this model are unknown, the six layers RWFNN controller with IPSO is proposed to control the rotor position on the axial direction of the TMB system for tracking reference trajectory with robustness. Finally, simulation results illustrating the validity and advantages of the proposed RWFNN for the TMB control system are discussed.A typically structure of the TMB using DDM drive system is shown in Fig. 1where a thrust disk is embedded on the rotor and used to carry out the rotor position control on the defined axial direction Z. Moreover, in the DDM drive system, both the bias currents of the left and right MBs are set as the half of maximum allowable current. The control current is added to the bias current in one electromagnetic coil and subtracted from the bias current in the opposite one. According to the dynamic adjustment of the control current, the rotor can be suspended and its position z can be moved to the reference position zm.As shown in Fig. 1, the deviation of the nominal air gap z0 is denoted by variable z which is also referred as the rotor position. Moreover, a pre-designed bias voltage v0 is used for both the magnetic bearings to produce the same basic attractive forces for both sides of the thrust disk. On the other hand, the control voltage vzis obtained by the proposed RWFNN controller. The total current is a combination of bias current i0 and control current izfrom the power amplifier, and circulates through coils on the stator.Using the Newton's law, the dynamic model of the TMB control system can be described as:(1)mz¨+cz˙−fdz=Fzwhere m is the mass of the rotor; c is the friction constant; Fzis the electromagnetic force and defined asFz≡fz1−fz2in which fz1 and fz2 are the electromagnetic forces produced by the right and left electromagnets, respectively; fdzis the external disturbance. The nonlinear electromagnetic force term is modeled in the following [1]:(2)Fz=k[(i0+iz)2(z0−z)2−(i0−iz)2(z0+z)2]where k is the electromagnet constant related to the core material of electromagnet.The proposed RWFNN integrates sub-recurrent WNNs (RWNNs) to traditional FNN in which the FNN part is responsible for determining the different contributions of inherent sub-RWNNs to the total output of the RWFNN. The details of the structure and learning algorithm are introduced as follows.The structures of inherent sub-RWNN and six-layer RWFNN are shown in Figs. 2and 3, respectively. The kth fuzzy rule of the proposed RWFNN can be presented as:Rule k: IFx1isA1kandx2isA2k(3)THENy^k=∑j=1nwjkvjk,k=1,2,…,l.where xi(i = 1, 2) is the ith input,Aikis the fuzzy set of ith input corresponding to kth fuzzy rule, l is the number of fuzzy rules. For the kth sub-RWNN as shown in Fig. 2,wjkare the connective weights between hidden layer and output layer;vjkis the output of the jth neuron in hidden layer;y^kis the output and is equal to the linear combination of wavelets. The signal propagation of the RWFNN as shown in Fig. 3 is introduced in the following:Layer 1 (input layer): The nodes in this layer only pass the input signal to the next layer. In this study, two input variables are selected as tracking errorx1(N)=eand its derivativex2(N)=e˙where N represents the Nth iteration. Moreover, the tracking error is defined ase≡zm−z.Layer 2 (membership layer): In this layer, the Gaussian function is adopted as the membership function. For the kth rule,(4)Aik(xi)=exp(−(xi−mik)2(σik)2),i=1,2wheremikandσikare the mean and standard deviation of the Gaussian function for the ith input variable associated with kth fuzzy rule, respectively.Layer 3 (rule layer): For the kth rule node, the output can be referred to its firing strength as:(5)uk(N)=∏i=12Aik(xi(N))Layer 4 (normalized layer): The kth node in this layer calculates the ratio of the firing strength of kth fuzzy rule to the sum of the firing strengths of all the fuzzy rules via the equation:(6)u¯k(N)=uk(N)∑k=1luk(N)Layer 5 (RWNN layer): In the inherent sub-RWNN, self-connections of the hidden neurons are attached for improving learning efficiency as shown in Fig. 2. Furthermore, the first derivative of a Gaussian functiong(x)=−xexp[−(1/2)x2]is chosen as a mother wavelet function in the hidden layer of sub-RWNN. The input for the jth wavelet neuron in hidden layer corresponding to the kth sub-RWNN is defined as:(7)ojk(N)=x1(N)+x2(N)+α·vjk(N−1)−ajk(N)bjk(N)whereajkandbjkare the translation and dilation of wavelet function; 0<α<1 is the self-connection feedback gain. The outputs of wavelet neurons are:(8)vjk(N)=g(ojk(N))=−ojk(N)exp(−12ojk(N)2)Considering the output of sub-RWNNy^kas shown in (3), the output of this layer is shown as follows:(9)ψk=u¯ky^kLayer 6 (output layer): The output node acts as a defuzzifier as follows:(10)Y=∑k=1lθkψk=∑k=1lθku¯ky^kwhere Y is the output of the RWFNN and is also the control signal vzfor the TMB control system.The online parameter learning of the RWFNN is based on the supervised learning algorithms. To derive the training algorithm for the parametersθk,wjk,ajk,bjk,mik, andσikof RWFNN, the energy function E is defined as:(11)E(N)=12[zm(N)−z(N)]2=12e2(N)By applying the energy function E and the gradient descent method, the learning algorithms for inherent sub-RWNNwjk,ajk, andbjkcan be obtained by(12)wjk(N+1)=wjk(N)−ηw∂E∂wjk(13)ajk(N+1)=ajk(N)−ηa∂E∂ajk(14)bjk(N+1)=bjk(N)−ηb∂E∂bjkwhere ηw, ηa, and ηbare the learning rates. The values of derivations in (12)–(14) can be calculated by the following formulas:(15)∂E∂wjk=∂E∂Y∂Y∂ψk∂ψk∂y^k∂y^k∂wjk=δθku¯kvjk(16)∂E∂ajk=∂E∂Y∂Y∂ψk∂ψk∂y^k∂y^k∂vjk∂vjk∂ojk∂ojk∂ajk=δθku¯kwjkbik[1−(ojk)2]exp[−12(ojk)2](17)∂E∂bjk=∂E∂Y∂Y∂ψk∂ψk∂y^k∂y^k∂vjk∂vjk∂ojk∂ojk∂bjk=δθku¯kwjkojkbjk[1−(ojk)2]exp[−12(ojk)2]whereδ=∂E/∂Y=(∂E/∂z)(∂z/∂Y)is an error term. Moreover, the learning algorithms for the RWFNNθk,mik, andσikcan be obtained by(18)θk(N+1)=θk(N)−ηθ∂E∂θk(19)mik(N+1)=mik(N)−ηm∂E∂mik(20)σik(N+1)=σik(N)−ησ∂E∂σikwhere ηθ, ηm, and ησare the learning rates. The values of derivations in (18)–(20) can be calculated by the following formulas:(21)∂E∂θk=∂E∂Y∂Y∂θk=δψk(22)∂E∂mik=∂E∂Y∂Y∂ψk∂ψk∂u¯k∂u¯k∂uk∂uk∂Aik∂Aik∂mik=2δθky^ku¯k(xi−mik(σik)2)(23)∂E∂σik=∂E∂Y∂Y∂ψk∂ψk∂u¯k∂u¯k∂uk∂uk∂Aik∂Ak∂σik=2δθky^ku¯k((xi−σik)2(σik)3)Though the error term δ in the learning algorithms (12)–(14) and (18)–(20) can be expressed by a partial differential term using the backpropagation method, the sensitivity ∂z/∂Y in δ cannot be derived exactly due to the unclear dynamic of the TMB. Though a neural network identifier can be implemented to estimate the sensitivity of the system [14], intensive computation burden is resulted. Alternatively, the derivative ∂z/∂Y can be approximated by its sign function [27]. However, this leads the value of δ change violently. Hence, to overcome these problems and increase the online learning ability of the RWFNN, the error term δ is replaced by using a delta adaption law based on the concept of proportional-derivative control [6].(24)δ≅e+e˙To improve the on-line learning capability of the proposed RWFNN, the IPSO algorithm is adopted in this study to adapt the learning rates ηθ, ηw, ηa, ηb, ηm, and ησon-line. In the IPSO, each particle adjusts its position according to its own experience and the experiences of neighbors, including the current velocity, position, and the best previous position experienced by itself and its neighbors. Moreover, the inclusion of the worst experience component in the behavior of the particle gives additional exploration capacity to the swarm [24]. The algorithm of the IPSO is derived as follows:(25)ϕid(t+1)=ϕid(t)+c1×rand()×(Pbestid−Rid(t))+c2×rand()×(Rid(t)−Pworstid)+c3×rand()×(Gbestd−Rid(t))whereϕid(t)is the current velocity of ith particle,i=1,...,P, in which P is the population size; the superscript d is the dimension of the particle;Pbestidis the best previous position of the ith particle;Pworstidis the worst previous position of the ith particle;Gbestdis the best previous position among all the particles in the swarm;Rid(t)is the current position of the ith particle; c1, c2 and c3 are the acceleration factors; rand() represents the uniform random number between 0 to 1. In this study, a suitable fitness function is selected to calculate the fitness value and defined as(26)FIT=10.1+|zm−z|where FIT is the fitness value. The configuration of the proposed RWFNN controller with IPSO is shown in Fig. 4. By using the online tuning learning rates based on IPSO, the proposed RWFNN can control the rotor of the TMB to track the reference trajectories accurately.Comparing with the classical PSO, the adopted IPSO adds an additional bad experience component which helps the particle to remember its previously visited worst position as shown in (25). It has been shown that the IPSO performs better convergence speed than PSO due to the extra diversification provided by the worst experience component [24]. Since each particle moves from its initial position to promising positions based on its velocity, its best own position, its worst own position, and the particle swarm's global best position, the optimal learning rates which can obtain the highest fitness value, i.e. the lowest tracking error can be found after evolution.To verify the proposed RWFNN with IPSO controller, the control objective is to control the rotor to track the designed reference trajectory as shown in (27) precisely considering the external disturbance and system parameters variations. In the simulation, a random external disturbance around 50N force is added in 1∼1.5 s and a load with 5 kg weight is added to the rotor in 3∼5 s to test the robustness of the controllers.(27)zm(t)={0.2×sin(2πt),0≤t≤20.3×sin(4πt)×sin(0.4πt),2<t≤5where zm(t) is the reference trajectory at time t.To compare the control performance of the proposed RWFNN controller, a PID and conventional recurrent neural network (RNN) [28] are also evaluated with performance measures including the maximum tracking error TM, average tracking error TAand standard deviation of tracking error TS[19].(28)TM=maxN(Te(N)),whereTe(N)=|e(N)|(29)TA=∑N=1R(Te(N))R(30)TS=∑N=1R(Te(N)−TA)2Rwhere R is the number of the interations.The simulation is carried out using the “Matlab” package. In the simulation, the executions of the RWFNN and IPSO are with 2kHz and 0.5kHz frequencies, respectively. The mass of the rotor is 3 kg. The friction constant c is 0.001. The nominal air gap z0 of the TMB system, where the thrust disk is centralized between two opposite magnetic bearings, is 0.5 mm. The scaling of the input voltage and the output current of the power amplifier is 0.5 A/V. The electromagnet constant k is8.47×10−6Nm2/A2. The bias voltage v0 is selected as 1.4V to achieve the best transient and steady state control performances. Moreover, all the initial learning rates are selected as 0.0005. Furthermore, the control parameters for the PID controller and RWFNN controller with IPSO are given as follows:(31)kp=25;kd=0.5;ki=20;c1=1;c2=1;c3=3,P=15,d=6,α=0.15In the simulation, first, larger values are chosen for the P, I, and D control gains of PID controller. Though the selections of larger control gains result in shorter response time during the transient, the excessive control gains will cause the rotor to generate unstable oscillations in steady-state easily. Therefore, all the control gains should be further adjusted manually considering the trade-off between control accuracy and system stability. The initial formation process [19] is adopted to find the initial values of the parameters of the RWFNN and RNN. In this study, a 1 s sinusoidal wave was used to train the parameters of RWFNN and RNN in the initial formations. In the initial formations, the initial values of the network parameters are chosen randomly and accurate tracking performance can be obtained in 1 s online learning cycle. Subsequently, all the network parameters after 1 s online learning are saved. After that, these pre-trained network parameters are adopted as the initial values for the RWFNN and RNN controllers to evaluate the control performances in the simulation. Therefore, the network parameters of the RWFNN and RNN controllers are well trained before control performance test.The number of neurons for the RWFNN controller is obtained by trial and error, and is chosen to achieve the best control performance in the simulation considering the requirements of stability and computation burden. In this study, three membership functions are designed for each input of the RWFNN. Therefore, there are totally nine neurons in the rule layer, i.e. l = 9. On the other hand, there are nine hidden neurons and two input neurons in the RNN.The tracking responses of the rotor using PID and RNN controllers are shown in Figs. 5–6, respectively. Observing Figs. 5–6, one can find that the bigger positioning errors are resulted in time 1∼1.5 s due to the added external disturbance and the control voltage vzis increased in time 3∼5 s due to the added external load. Moreover, though the PID control gains have been chosen to achieve the best transient and steady state control performance, poor tracking responses are obvious in time 1∼1.5 s as shown in Fig. 5 due to that the fixed gains PID controller is unable of dealing with the uncertainties. Though the tracking responses is improved by using RNN as shown in Fig. 6, the unfavorable tracking errors are existent due to the limitation of the approximation ability of RNN.The tracking responses of the rotor using RWFNN controller with IPSO are shown in Fig. 7. From the simulated results, satisfactory tracking performance can be obtained using the proposed RWFNN controller with IPSO under the occurrence of the uncertainties. In addition, the IPSO is also evolved effectively to adapt the learning rates online, which can be observed obviously by the fitness function shown in Fig. 7 (c).To further investigative the improved control performance of the TMB control system using RWFNN, the performance measures of the PID controller, RNN controller and RWFNN controller with IPSO for the tracking of the reference trajectory are shown in Table 1. Comparing the performance measures of the PID, RNN and RWFNN controller with IPSO, the RWFNN controller with IPSO possesses not only improved control performance, but also precise tracking response. Therefore, the proposed RWFNN controller with IPSO can control the highly nonlinear TMB system effectively.

@&#CONCLUSIONS@&#
