@&#MAIN-TITLE@&#
A novel high-speed approach for 16 × 16 Vedic multiplication with compressor adders

@&#HIGHLIGHTS@&#
A 16 bit Vedic multiplier with Urdhava Tiryakbhyam sutra is proposed.Higher compressor adders with the help of lower Compressor adders are proposed.Proposed compressor adders are used in architecture of Vedic multiplier.Proposed multiplier shows good speed results over Traditional multipliers.

@&#KEYPHRASES@&#
Vedic mathematics,Vedic multiplier,‘Urdhava-tiryakbhyam’ sutra,5-3 compressor,10-4 compressor,15-4 compressor,20-5 compressor,

@&#ABSTRACT@&#
Graphical abstractImage, graphical abstract

@&#INTRODUCTION@&#
Vedic multiplier is built on Vedic mathematics which further is extracted from the ancient Vedas by the Sri Bharati Krishna Tirthaji in between 1911 and 1918 [1]. The specialty of Vedic mathematics is that it gives simple way to solve the calculations which can be easily understood by human minds. This Vedic mathematics is divided into 16 sutras which give different rules for the simplification of the problems related to trigonometry, algebra, geometry etc. Designs based on Vedic mathematics have been used in many applications like ALU, MAC etc. and have shown better results in terms of delay, area [2–6]. Among the 16 sutras, ‘Urdhava-tiryakbhyam’ is picked as this sutra is a universal method for multiplication and thus always remained favorite method of implementers. Previously this method was used only for multiplication of decimal numbers but from some time it has been used and proved to be better for binary number multiplication. Also the increase in delay and area with the increase in number of input bits is at a slow rate with respect to other sutras [1]. With the selection of ‘Urdhava-tiryakbhyam’ sutra, further selection comes with adders to add the partial products generated for the resultant bits (s0–s31). These adders decide the speed of the multiplier and thus requirement of high-speed adder becomes the need for concern. In this paper, we have given a novel architecture for the separate calculation of product bits of the multiplication of multiplier and multiplicand. For this method, compressor adders [7] have been used over conventional architectures of half-adders and full adders because of their higher speed performance. These compressors actually act as counters and count the number of 1s in the given bits and thus behave as adders. They make use of multiplexer in addition with half-adders and full adders which allow the use of lesser XOR gates and thus high speed. With each resultant bit some carries are also generated which goes further for the calculation of next final product bits.The paper is divided into 4 sections. Section 2 describes the ‘Vertically and crosswise’ technique for multiplication of the binary as well as decimal numbers. Section 3 describes the concept and full architectures of the 5, 10, 15 compressor adders which are used in the implementation of proposed architecture. Section 4 depicts the full details of proposed architecture by conjoining the architectures of Vedic multiplier and compressor adders. Section 5 illustrates simulation results for the multiplier and Section 6 describes its conclusion and future scope.The Sanskrit name for this rule is ‘Urdhava-tiryakbhyam’ which is a universal formula for the multiplication. This method multiplies the digits vertically and crosswise and finally adds them with the help of the appropriate adder. This rule is applicable to both integers and binary numbers. The best feature of this method is that the partial products needed for the multiplication are already generated in advance and this leads to decrease in delay and thus saves the time. The increase in number of bits however brings little increase in area and critical delay [3].The method is explained for multiplication of decimal numbers and binary numbers differently.For N digit number there will be 2N − 1 steps. The digits on the ends of the line are multiplied and result is stored. Then the previous carry is added to it. The least significant digit of resultant coming from addition is kept as answer bit of the multiplication and all other digits are considered as previous carries for the next step. When the number of lines becomes more than one in the same step, then all the outcomes are accumulated with the previous carries. Following same steps, final output of multiplication comes. Initial carry in this case is taken as zero [8]. Fig. 1shows the multiplication of two 3 digit decimal numbers, 325 and 738 in five steps.The same way is extended to the binary digit multiplication. One bit multiplication is simple AND gate operation of the operands. For the higher bit product, the following method is used for the evaluation of the equations for the resultant bits of multiplication. This method is known as square table method. In this technique firstly each small square block inside the table is partitioned into two identical parts. Then multiplier and multiplicand are written on the successive sides of the table.After that each bit of them is multiplied separately and result is stored in the lower part of small square block. Then starting from least significant bit of multiplier, all the bits coming in lower part of small square blocks are added and sum bit of the their resultant is considered as the resultant bit of the multiplication. Carry bits of the addition are further sent to succeeding blocks and also added to the results coming in their way [9]. Fig. 2shows the multiplication of the two binary numbers a = a3a2a1a0 (4 bits) and b = b3b2b1b0 (4 bits) and final product is r7r6r5r4r3r2r1r0 (8 bit). Because partial products are generated in parallel, so the critical delay will be only the time taken by the signal to pass through the logical gates [9].Compressor adders are basic circuits which add bits more than four at a time to give better delay results over the combinational circuits of half and full adders. The symbolic representation of compressor architecture is N − r where ‘N’ represents the number of the bits that are fed and ‘r’ represents the total count of the 1s present in N bits. It actually reduces the gate counts and delay in comparison to adder circuits and that is why named as compressor. A large part of research has been done in improving the circuits of lower compressors [10-12]. Along with this, higher compressors are also implemented to add higher number of bits. In this paper, the main compressor architectures which are used are 5-3, 10-4, 15-4 and 20-5. They are defined below separately.A 5-3 compressor adder is a logical circuit in which maximum five bits can be added at the same time and three bit resultant of maximum value 101 is obtained. The circuit uses three 4:1 multiplexers. This multiplexer allows only one output to be high at a time and this property makes the multiplier fast and low power consuming circuit [13–15]. The circuit is reorganized in such a way that only 3 XOR operations are used instead of 5 XOR operations (in case of conventional 5-3 compressor) and other two inputs (X3 and X4) acts as a control signals. The conventional and the modified 5-3 compressor adder circuit are shown in Fig. 3a and b.Its circuitry takes ten inputs, adds them and gives four bit output. The maximum resultant can be 1010. It makes use of two 5-3 compressors, two full adders and a half adder at the required position. Because of the use of modified 5-3 compressor circuitry, this compressor shows lesser delay and gate counts making the multiplier fast and ultimately the processer. Fig. 4given below represents the modified circuitry of the 10-4 compressor.Similar to the 5-3, 10-4 compressor adders, 15-4 compressors feed 15 bits at a time and give four bit resultant which can go to extreme value of 1111. Its circuitry contains two 5-3 compressors, five full adders and one 4 bit parallel adder. The inputs are given in a group of three to the five full adders. Then the sum bits of all five full adder are added using one 5-3 compressor and the carry bits of the full adders are fed to another 5-3 compressor. Further a 4 bit parallel adder is used to add the outputs of these two 5-3 compressor and gives the final result. Fig. 5given below represents the modified circuitry of the 15-4 compressor.In the proposed design we need to add 19 bits at the same time and so need to use a higher compressor adder circuit. In 20-5 compressor circuit, it converts 20 partial products into five output bits having maximum value of 10010. This makes use of one 15-4 compressor, one 5-3 compressor, two half-adders and two full adders. The improved architectures of lower compressors 15-4 and 5-3 bring speed improvement in its circuit in comparison with conventional architectures containing only full and half-adders. The 20-5 compressor adder circuit is shown in Fig. 6.In conventional designs of the Vedic multiplier, half-adders and full adders are used for the accumulation of the partial products which are generated during the process. They lead to increase in propagation delay of the circuit and thus cause large processing time. In our novel approach, we propose a 16 × 16 bit Vedic multiplier with the use of compressor adders which calculate the resultant bits (32 in this case) individually. Equations are calculated by using ‘Vertically and crosswise’ technique of Vedic mathematics.Both ‘a’ and ‘b’ are 16 bit inputsa=a1a14a13a12a11a10a9a8a7a6a5a4a3a2a1a0Andb=b15b14b13b12b11b10b9b8b7b6b5b4b3b2b1b0And their product ‘r’ is 32 bit (r31−0).The carry signalsc1−c89, generated during the implementation, have partial results and are added to the next sum bits.The equations that are required to be implemented are given below.(1)s0=a0b0(2)c1s1=a0b1+a1b0(3)c3c2s2=c1+a0b2+a1b1+a2b0(4)c5c4s3=c2+a0b3+a1b2+a2b1+a3b0(5)c7c6s4=c4+c3+a0b4+a1b3+a2b2+a3b1+a4b0(6)c10c9c8s5=c6+c5+a0b5+a1b4+a2b3+a3b2+a4b1+a5b0(7)c13c12c11s6=c8+c7+a0b6+a1b5+a2b4+a3b3+a4b2+a5b1+a6b0(8)c16c15c14s7=c11+c9+a0b7+a1b6+a2b5+a3b4+a4b3+a5b2+a6b1+a7b0(9)c19c18c17s8=c10+c12+c14+a0b8+a1b7+a2b6+a3b5+a4b4+a5b3+a6b2+a7b1+a8b0(10)c22c21c20s9=c17+c15+c13+a0b9+a1b8+a2b7+a3b6+a4b5+a5b4+a6b3+a7b2+a8b1+a9b0(11)c25c24c23s10=c20+c18+c16+a0b10+a1b9+a2b8+a3b7+a4b6+a5b5+a6b4+a7b3+a8b2+a9b1+a10b0(12)c28c27c26s11=c23+c21+c19+a0b11+a1b10+a2b9+a3b8+a4b7+a5b6+a6b5+a7b4+a8b3+a9b2+a10b1+a11b0(13)c32c31c30c29s12=c26+c24+c22+a0b12+a1b11+a2b10+a3b9+a4b8+a5b7+a6b6+a7b5+a8b4+a9b3+a10b2+a11b1+a12b0(14)c36c35c34c33s13=c29+c27+c25+a0b13+a1b12+a2b11+a3b10+a4b9+a5b8+a6b7+a7b6+a8b5+a9b4+a10b3+a11b2+a12b1+a13b0(15)c40c39c38c37s14=c33+c30+c28+a0b14+a1b13+a2b12+a3b11+a4b10+a5b9+a6b8+a7b7+a8b6+a9b5+a10b4+a11b3+a12b2+a13b1+a14b0(16)c44c43c3842c41s15=c37+c34+c31+a0b15+a1b14+a2b13+a3b12+a4b11+a5b10+a6b9+a7b8+a8b7+a9b6+a10808b5+a11b4+a12b3+a13b2+a14b1+a1545b0(17)c48c47c3846c45s16=c32+c35+c33+c41+a1b15+a2b14+a3b13+a4b12+a5b11+a6b10+a7b9+a8b8+a9b7+a10808b6+a11b5+a12b4+a13b3+a14b2+a1545b1(18)c52c51c3850c49s17=c45+c42+c39+c36+a2b15+a3b14+a4b13+a5b12+a6b11+a7b10+a8b9+a9b8+a10b7+a11808b6+a12b5+a13b4+a14b3+a15b2(19)c56c55c54c53s18=c49+c43+c46+c40+a3b15+a4b14+a5b13+a6b12+a7b11+a8b10+a9b9+a10b8+a11b7+a12b6+a13b5+a14b4+a15b3(20)c60c59c58c57s19=c53+c50+c47+c44+a4b15+a5b14+a6b13+a7b12+a8b11+a9b10+a10b9+a11b8+a12b7+a13b6+a14b5+a15b4(21)c63c62c61s20=c57+c54+c51+c48+a5b15+a6b14+a7b13+a8b12+a9b11+a10b10+a11b9+a12b8+a13b7+a14b6+a15b5(22)c66c65c64s21=c61+c58+c55+c52+a6b15+a7b14+a8b13+a9b12+a10b11+a11b10+a12b9+a13b8+a14b7+a15b6(23)c69c68c67s22=c56+c59+c62+c64+a7b15+a8b14+a9b13+a10b12+a11b11+a12b10+a13b9+a14b8+a15b7(24)c72c71c70s23=c67+c65+c63+c60+a8b15+a9b14+a10b13+a11b12+a12b11+a13b10+a14b9+a15b8(25)c75c74c73s24=c70+c68+c66+a9b15+a10b14+a11b13+a12b12+a13b11+a14b10+a15b9(26)c78c77c76s25=c73+c71+c69+a10b15+a11b14+a12b13+a13b12+a14b11+a15b10(27)c81c80c79s26=c76+c76+c72+a11b15+a12b14+a13b13+a14b12+a15b11(28)c33c32s27=c79+c77+c75+a12b15+a13b14+a14b13+a15b12(29)c85c84s28=c82+c80+c78+a13b15+a14b14+a15b13(30)c87c86s29=c84+c83+c81+a14b15+a15b14(31)c88s30=c85+c86+a15b15(32)c89s31=c88+c87Clearly for the evaluation we require adder circuitry which can add 2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19 bits at the same time. Here we propose to use the compressor adder structure in place of conventional adders.The proposed architecture shown in Fig. 7 uses the above equations and calculates each output bit separately for the product of two 16 bit operands. It consists of the four main compressor adders 5-3, 10-4, 15-4 and 20-5 shown by using dark blue, red, purple and brown color blocks respectively. Input to these adders is given in accordance with the equations and represented by blue lines. Full and half-adder's architectures also have been used at the required stages shown with green and graycolor blocks respectively. Implementation of each equation gives a sum bit and some carries. These sum bits are product bits shown by red line and carries go to next blocks again according to the equations. Carry flow is shown by green color. The use of multiplexer in the proposed architecture brings the lesser XOR gate operation and causes the improvement of the speed of the multiplier. It also reduces the parallel stages to implement the result which further enhances the speed of the Vedic multiplier by using ‘Vertically and crosswise’ technique. The comparison of combinational delay of the used modified compressor adders with conventional one and proposed multiplier with existing ones is presented in next section. Results support the improvement in speed by our proposed architecture.The architectures of 16 bit Vedic multiplier and modified compressor adders are designed in VHDL language. Logic synthesis and simulation is done using EDA (Electronic Design Automation) tool in Xilinx ISE 13.1 simulator. Device used is XILINX: SPARTAN 3E:XC3S500e fg320, speed grade – 4.Comparison of combinational delay (ns) for the modified compressor adder with conventional one is tabulated in Table 1. For inputs of bits 5, 10, 15 and 20 compressor adder has shown combinational delay (ns) of 5.294, 6.791, 7.676 and 8.050, respectively which are lesser than conventional adders.A combinational delay of 32 ns is seen for proposed 16 bit Vedic multiplier architecture which is small in comparison to the Array, Wallace Tree and Booth multiplier clearly shown in Table 2. Our purposed architecture has shown approximately 27%, 30.5% and 13.6% improvement in comparison with Array, Wallace tree and Booth multiplier respectively. The higher speed of the multiplier is come across by the use of modified compressor architectures. These compressors use multiplexer which is a low power and high-speed circuit and reduces the sum operations. The comparison table of the speed of the modified and original compressors, given in Table 1, validates the use of modified compressor adder in our architecture.Comparison charts of the modified compressor with conventional one and proposed 16 bit Vedic multiplier with Array, Wallace tree and Booth multiplier is given in Figs. 8and 9, respectively.Figs. 10–13show the simulation results for 5-3, 10-4, 15-4 and 20-5 compressor adders respectively. Compressor adder act as counter and counts number of ‘1’s in input bit. Fig. 14shows the simulation results for proposed 16 bit Vedic multiplier with ‘a’ and ‘b’ as 16 bit input bits and ‘s’ as an 32 output bit which is multiplication result of a and b.A novel technique for multiplication of 16 bit operands with the help of Vedic multiplier is described. The proposed architecture is based upon ‘Urdhava-tiryakbhyam’ sutra of Vedic mathematics which is a general multiplication technique for multiplication. This sutra makes the parallel generation of partial products and removes unwanted multiplication steps. Also with this sutra increase in area and delay is less with increase in number of bits. This proposed technique works in two steps. First Step is computation of equation for each bit of resultant. Second step is execution of that equation with required compressor adders. These compressor adders add more than 4 bits at a time and use multiplexers in its circuitry which reduces the XOR gate operations and this results in reduction of delay. Compressor adders of 5-3, 10-4, 15-4, and 20-5 have shown speed improvement with percentage of 6.5, 1.2, 5.9 and 5.9, respectively over the traditional adders which use only half adder and full adder. A good result in terms of speed is seen in the work with an approximate combinational path delay of 32 ns for multiplier. On comparing it with Array, Wallace tree and Booth multiplier, it shows approximate percentage improvement of 27, 30.5 and 13.6, respectively in terms of speed. This proposed optimized Vedic multiplier design may prove to be of great use in future digital signal processing applications, ALU, MAC etc. with stringent demands of speed, area and power.Supplementary material associated with this article can be found, in the online version, at doi:10.1016/j.compeleceng.2015.11.006.Image, application 1Image, application 2

@&#CONCLUSIONS@&#
