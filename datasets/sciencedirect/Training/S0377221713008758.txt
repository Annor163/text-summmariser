@&#MAIN-TITLE@&#
A mixed integer linear programming approach to minimize the number of late jobs with and without machine availability constraints

@&#HIGHLIGHTS@&#
A generic model is proposed for minimizing the number of late jobs on one machine.Machine availability constraints, non-resumable and resumable jobs are considered.An efficient mixed integer linear program is described as well as improvements.Most 500-job instances can be solved to optimality within 1hour.

@&#KEYPHRASES@&#
Scheduling,Integer programming,Modeling,Availability constraints,Late jobs,Exact method,

@&#ABSTRACT@&#
This study investigates scheduling problems that occur when the weighted number of late jobs that are subject to deterministic machine availability constraints have to be minimized. These problems can be modeled as a more general job selection problem. Cases with resumable, non-resumable, and semi-resumable jobs as well as cases without availability constraints are investigated. The proposed efficient mixed integer linear programming approach includes possible improvements to the model, notably specialized lifted knapsack cover cuts. The method proves to be competitive compared with existing dedicated methods: numerical experiments on randomly generated instances show that all 350-job instances of the test bed are closed for the well-known problem1|ri|∑wiUi. For all investigated problem types, 98.4% of 500-job instances can be solved to optimality within 1hour.

@&#INTRODUCTION@&#
Even though most scheduling problems assume that a job can be processed anytime after its release date, an increasing number of research papers investigate scheduling problems that are subject to machine or job availability constraints. In this context, machines or jobs may be unavailable for processing during given time intervals. Such constraints appear (Hashemian, Diallo, & Vizvàri, 2012; Kubiak, Blazewicz, Formanowicz, Breit, & Schmidt, 2002; Mellouli, Sadfi, Chu, & Kacem, 2009, 2013; Schmidt, 2000) in the cases of joint production and maintenance management (where preventive maintenance or periodic repair tasks limit the usage time of machines), operating systems for mono and multi-processors (where high priority tasks interfere with low priority programs) or when implementing rolling time horizon approaches (where decisions taken for a first time horizon are considered as fixed for the consecutive overlapping time horizon), etc.The problems investigated in this paper are defined by a setI={J1,…,Jn}of n jobs. Each jobJiis characterized by a release dateri, a due datedi, a processing timepi, and a weightwi. All jobs must be processed on a single machine so that the weighted number of late jobs is minimized. A job cannot be preempted by another one: if a job starts on the machine, no other job can start until the first one completes. Additional input consists of a set of K time intervals[Bs,Fs],s∈{1,…,K}, when the machine is unavailable. Moreover, we add two fictitious unavailability periods 0 andK+1with no loss of generality, such thatB0=F0=0andBK+1=FK+1=∞. All data are integers and deterministic.We investigate different job behaviors in terms of unavailability constraints. First, jobs are said to be non-resumable, according to the classification of Ma, Chu, and Zuo (2010): if a job has started but has not completed before an unavailability period, it must be restarted from zero after the unavailability period. This problem is denoted by1,hk|ri,nr-a|∑wiUiin standard three-field notation (Graham et al., 1979). Conversely, jobs may be resumable: a job may start before an unavailability period and be resumed thereafter. In this case, the completion of the job is simply postponed for the duration of the unavailability periods crossed by the job. This problem is denoted by1,hk|ri,r-a|∑wiUi. A third type of problem allows jobs to be resumed after an unavailability period at the expense of an additional setup time. Two variations are possible for this feature, which we refer to as semi-resumable jobs: according to Lee (1999), interrupted jobs must be partially restarted after an unavailability period, occupying the machine for a time which is proportional to the duration of the job that has already been processed. In this paper, we address a variation of this feature for which the additional setup time is fixed and job-dependent, analogous to the work of Graves and Lee (1999). More precisely, the setup duration is equal tomin(αi,Bs+1-Fs), whereαiis a fixed setup time related to jobJi. The hypothesis is motivated by the following: The industrial process does not require partial job reprocessing in many real-life situations, especially in the case of preventive and planned maintenance. Instead, the machine requires a setup operation, whose duration only depends on the job to be resumed. An example of this kind of requirement is encountered in the corrugated cardboard industry following the periodic cleaning operations of cutting devices. These setup times are implicitly included in job processing times when no maintenance activities are considered. Also, sometimes a setup operation followingFswill not be completed beforeBs+1, and another setup time will be performed afterFs+1. Therefore, in many practical situations, the job will simply be deferred untilFs+1. According to the classification of Allahverdi, Ng, Cheng, and Kovalyov (2008), these are referred to as non-batch sequence-independent setup times. The problem is denoted by1,hk|ri,STsi|∑wiUi, of which problems1,hk|ri,r-a|∑wiUiand1|ri|∑wiUiare clearly special cases.This paper aims to provide a generic mixed integer linear programming (MILP) approach to solve problems1,hk|ri,nr-a|∑wiUiand1,hk|ri,STsi|∑wiUiand their special cases1,hk|ri,r-a|∑wiUiand1|ri|∑wiUi. Because problem1|ri|∑wiUiis strongly NP-hard (Graham et al., 1979), so are the other problems. To the best of our knowledge, to date no published work proposes an exact solution approach for cases with availability constraints, nor an efficient MILP approach for1|ri|∑wiUi.Our paper is structured as follows: Section 2 contains a brief literature review for related scheduling problems. Section 3 describes the general scheduling problem (STWP) of selecting and scheduling jobs that are subject to time windows and group constraints on parallel machines; three MILP models are proposed. Section 4 presents valid inequalities and bound tightening results to improve these models. In particular, we use one of the MILP formulations to derive lifted knapsack cover cuts, which are also valid for the other models. We propose two specialized lifting procedures, embedding a subset of the specific constraints of STWP to yield stronger cuts. Section 5 describes how problems1,hk|ri,nr-a|∑wiUiand1,hk|ri,STsi|∑wiUican be converted into STWP. Moreover, we show that problem1,hk|ri,r-a|∑wiUiis equivalent to1|ri|∑wiUi, which proves some complexity results. Our method proves to be reasonably competitive compared with existing dedicated methods: in Section 6, numerical experiments on randomly generated instances show that most (98.4%) 500-job instances can be solved to optimality within one hour for all investigated problem types. For the well-known problem1|ri|∑wiUi, all 350-job instances are closed and only one (resp. four) 400-job instance (resp. 500-job instances) remains open. Section 7 discusses possible extensions and improvements to this work. Finally, an Appendix provides details concerning the dynamic programming algorithms used by the lifting procedures.

@&#CONCLUSIONS@&#
