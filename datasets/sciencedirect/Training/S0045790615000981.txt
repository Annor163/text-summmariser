@&#MAIN-TITLE@&#
Security analysis on a color image encryption based on DNA encoding and chaos map

@&#HIGHLIGHTS@&#
The flaws of an image encryption algorithm based on DNA encoding and chaos are founded.According to the flaws, a known plaintext attack is presented to reveal the plain-image from the cipher-image.A remedy is suggested to enhance the security of the image encryption algorithm.

@&#KEYPHRASES@&#
Cryptanalysis,Image encryption,Chaos-based cipher,DNA encoding,

@&#ABSTRACT@&#
Recently, several image encryption algorithms based on DNA encoding and chaotic maps have been proposed, which create a novel direction in image encryption. By a careful examination on most of these image cryptosystems, we find that DNA operators can only influence one DNA base, which leads to poor diffusion. A recent image encryption scheme based on DNA encoding and chaos is treated as a case study. The flaws of this algorithm are illustrated. By applying a known plaintext attack, we demonstrate that a hacker can determine the chaotic sequences used to confuse the image and reveal the plain-image. Finally, a suggestion is given to enhance the diffusion ability of image encryption scheme based on DNA encoding and chaos. The experiment results prove that the suggestion is effective.

@&#INTRODUCTION@&#
With the development of computer network technologies, secure transmission of confidential digital images has become one of the most important issues in modern communications. Image encryption is different from text encryption due to some intrinsic properties, such as bulky size and high redundancy, which are generally difficult to be handled by traditional techniques. Properties of chaotic systems such as ergodicity and sensitive dependence on initial conditions and system parameters are quite advantageous in information especially image encryption [1–6]. Nowadays, DNA computing is applied to cryptography. DNA cryptogram utilizes DNA as information carrier and takes advantage of biological technology to achieve encryption [7–9]. However, DNA encryption method has its disadvantages such as costly experimental equipment, complicated operations and difficult to grasp its biotechnology. Thus, it still cannot be broadly applied in the field of encryption. In order to overcome these weakness, some operations from DNA computing are employed to confuse information. Moreover, several image encryption algorithms combined DNA operations and chaotic maps are proposed [10–13], which open a new direction to secure image communications and have been attracting more and more researchers’ interests.Recently, an image encryption algorithm is presented [14], which utilizes DNA addition to scramble pixel values of image and then mask the scrambled image with chaotic maps. The algorithm is simple to implement and its secret key space is large enough to resist exhaustive attack. This paper examines the security of the image encryption algorithm in Ref. [14], where a security problem of this algorithm is found. The problem leads to the algorithm’s vulnerability to attacks on block cipher, such as known plaintext and chosen plaintext attacks. By applying a known plaintext attack, we demonstrate that a hacker can determine the sequence of chaos, which is equivalent to the secret key, and exploit it to reveal the plain-image. Finally, we suggest a remedy to the loophole, which is important to the design of image encryption scheme based on DNA encoding and chaos.The rest of the paper is organized as follows. Section 2 briefly introduces the image encryption algorithm in Ref. [14]. The flaws in the algorithm are illustrated and the related security problem is analyzed in Section 3. Section 4 demonstrates known plaintext attack on the image encryption algorithm. Some measures to remedy the loophole of this algorithm are suggested in Section 5. Finally, conclusion is drawn in Section 6.The algorithm in Ref. [14] uses the encoded matrix of DNA sequence to carry out DNA addition operation. Then, the DNA encoded image is encrypted under the control of two chaotic maps which are shown in Eqs. (1) and (2).(1)xn+1=μ1xn(1-xn),x∈[0,1](2)yn+1=μ2yn(1-xn),y∈[0,1]whereμi∈[3.569945,4](i=1, 2) is the control parameter of the logistic map. The keys of the image encryption algorithm include x0, y0, μ1, μ2, k1 and k2.x0∈[0,1]andy0∈[0,1]are the initial values of Eqs. (1) and (2), respectively. k1 and k2 are two integer numbers, which are both in interval [1,8]. The image encryption algorithm is briefly described as follows and an illustration is given in Fig. 1.Step 1. Define m and n as the image dimension of rows and columns, respectively. According to RGB level of image A, decomposes A into three level matrices R, G, B with size (m, n). Transform R, G, B to the corresponding binary matrices Rb, Gb and Bb with size (m, n×8). According to the DNA encoding rules shown in Table 1, Rb, Gb and Bb are encoded to the corresponding DNA matrices Ar, Ag and Ab with size (m, n×4) under the control of k1.Step 2. Perform the DNA addition operation on Ar, Ag and Ab as below:(3)Ar′(i,j)=Ar(i,j)+Ag(i,j)i=1,2,…,m;j=1,2,…,n×4(4)Ag′(i,j)=Ag(i,j)+Ab(i,j)i=1,2,…,m;j=1,2,…,n×4(5)Ab′(i,j)=Ag′(i,j)+Ab(i,j)i=1,2,…,m;j=1,2,…,n×4Step 3. Generate a chaotic sequence xi(i=1, 2, …, l), by iterating Eq. (1), whose length is l=m×n×4. Obtain a binary sequence ziaccording to the threshold function shown in Eq. (6), whose length is also l. Then, transform the binary sequence zi, i=1, 2, …, l to a matrix Z with size (m, n×4).(6)zi=00<xi⩽0.510.5<xi<1Step 4. Repeat executing the following operation from i=1 to m and j=1 to n×4:If Z(i, j)=1, do DNA complement on Ar′(i, j), Ag′(i, j) and Ab′(i, j).Step 5. According to the DNA map rule selected by k2, translate the DNA matrices Ar′, Ag′ and Ab′ to the binary matrices Rb′, Gb′ and Bb′, respectively. Note, Rb′, Gb′ and Bb′ have the same size (m, n×8). Then, translate Rb′, Gb′ and Bb′ to the corresponding byte matrices R′, G′ and B′ with size (m, n).Step 6. Generate a sequence yi(i=1, 2, …, m×n) by iterating Eq. (2) and map yifrom (0, 1) to {0, 1, 2, …, 255}. Finally, the integer matrix Y with size (m, n) is obtained.Step 7. Do the XOR operation as below(7)R″(i,j)=R′(i,j)⊕Y(i,j)i=1,2,…,m;j=1,2,…,n(8)G″(i,j)=G′(i,j)⊕Y(i,j)i=1,2,…,m;j=1,2,…,n(9)B″(i,j)=B′(i,j)⊕Y(i,j)i=1,2,…,m;j=1,2,…,nStep 8. ComposeR″,G″andB″to a RGB image, which is the encrypted color image.For a detail explanation of this image encryption algorithm, it is highly recommended the thorough reading of Ref. [14].In the process of the above image encryption, the DNA complement operation in Step 4 is solely controlled by matrix Z and the XOR operation in Step 7 is only determined by the matrix Y. Thus, the effect of Z and Y is identical to that of keys x0, y0, μ1, μ2. For attacker, obtaining Z and Y is similar to getting the keys. Moreover, the two matrices Z and Y are both independent of the plaintext. It is the flaw of the algorithm that the matrices Z and Y are only determined by x0, μ1 and y0, μ2, respectively. This flaw enables known plaintext attack. To demonstrate the security loophole caused by this flaw, we first encrypt two different images named Lena and Plane shown in Figs. 2 and 3. The secret keys are set to x0=0.501, y0=0.401, μ1=3.81, μ2=3.68, k1=1 and k2=7. We fill the first ten pixel values of the plain-images, the cipher-images, and the corresponding elements of Z and Y used to encrypt these ten pixels into Tables 2 and 3, respectively. From Tables 2 and 3, we observe that the elements in Z and Y are totally identical. This is not caused by coincidence, but resulted from the flaw mentioned above. Once x0, μ1 and y0, μ2 are determined, the matrices Z and Y are fixed too, regardless of the plaintext.It is well known that confusion and diffusion are two basic design criteria for encryption algorithms. The confusion operation complicates the dependence of the statistics of ciphertext on that of the plaintext. Diffusion spreads out the influence of a single plaintext symbol over many ciphertext symbols so as to hide statistical structure of plaintext. In the process of the above image encryption, five main operations are needed from the plain-pixel to the cipher-pixel. They are: DNA coding, DNA addition, DNA complementation, DNA decoding and XOR operation. Although the XOR operation makes the masked values have uniform distribution, it has no contribution to the diffusion. Since one DNA base is expressed in two-bit number, the DNA operations, such as DNA addition and DNA complementation, can only influence two bits of one pixel. Thus, the diffusion ability of DNA operations is poor. Furthermore, the image pixels are encrypted one by one. The changes in one pixel cannot spread to other pixels, which leads to the poor diffusion of the image encryption algorithm described in Section 2. To verify this flaw, we change the R level value of the first pixel of image Lena from 226 to 225. Then, encrypt the changed image with the same key. The first ten pixel values of the plain-image and cipher-image are listed in Table 4. Compared with the ciphertexts in Table 2, it can be seen that 1-bit change in plain-image only causes 1-bit change in the cipher-image, which shows that the diffusion effect is not apparent.When cryptanalyzing an encryption algorithm, the general assumption is that the cryptanalyst knows all details of the algorithm except the key. Cryptanalysis is the study of taking encrypted data, and trying to decrypt it without use of the key. There are numerous techniques to perform cryptanalysis, depending on what access the cryptanalyst has to the plaintext, ciphertext, or other aspects of the cryptosystem. Here, the most common types of attacks are listed, ordered from the hardest type of attack to the easiest as follows:(i)Ciphertext only attack: the cryptanalyst only possesses some pieces of ciphertexts. It is probably the most difficult type of cryptanalysis.Known plaintext attack: the cryptanalyst have some plaintexts and the corresponding ciphertexts.Chosen plaintext attack: the cryptanalyst owns the encryption machinery. Hence he can choose any plaintexts and obtain the corresponding ciphertexts.Chosen ciphertext attack: the cryptanalyst owns the decryption machinery. Hence he can choose any ciphertexts and obtain the corresponding plaintexts.In each of these four attacks, the objective is to determine the key. As long as the key is figured out through one of the attacks mentioned above, the cryptosystem is considered as insecure.From the above analysis, we know that five main operations, i.e. DNA coding, DNA addition, DNA complementation, DNA decoding and XOR operation, are needed when encrypting a plain-image pixel. DNA coding changes a two bit binary number to a DNA base under the control of k1. DNA decoding performs the reverse change of DNA coding, that is, converting the DNA base to a two bit binary number under the control of k2. Since k1 and k2 are usually different, the two bit binary number is probably converted to another two bit binary number after executing DNA coding and DNA decoding. Thus, DNA coding and DNA decoding can be replaced by a substitution operation of two bit binary number. According to the DNA map rules shown in Table 1, we construct eight 2×2 substitution boxes (S-boxes) shown in Table 5. Undoubtedly, we can always find an S-box in Table 5 which has the equivalent effect to DNA coding and DNA decoding, no matter what values are set to k1 and k2.Suppose ri,j, gi,jand bi,jare the R, G, B level value of the pixel (i, j). Expressing ri,j, gi,jand bi,jin binary representation, we have(10)ri,j=f1(ri,j)f2(ri,j)f3(ri,j)⋯f8(ri,j)(11)gi,j=f1(gi,j)f2(gi,j)f3(gi,j)⋯f8(gi,j)(12)bi,j=f1(bi,j)f2(bi,j)f3(bi,j)⋯f8(bi,j)where function fi(x) returns the ith bit of x.Based on the algorithm and above analysis, the process of encrypting pixel (i, j) can be re-described as follows:Step 1. Perform the DNA addition on pixel (i, j) and we have(13)fk(ri,j′)fk+1(ri,j′)=(fk(ri,j)fk+1(ri,j)+fk(gi,j)fk+1(gi,j))mod4k=1,3,5,7(14)fk(gi,j′)fk+1(gi,j′)=(fk(gi,j)fk+1(gi,j)+fk(bi,j)fk+1(bi,j))mod4k=1,3,5,7(15)fk(bi,j′)fk+1(bi,j′)=(fk(gi,j′)fk+1(gi,j′)+fk(bi,j)fk+1(bi,j))mod4k=1,3,5,7where r′i,j, g′i,jand b′i,jare the R, G, B level value of pixel (i, j) after DNA addition is executed.Step 2. Execute DNA complementation to r′i,j, g′i,jand b′i,j. Supposezi,j=f1(zi,j)f2(zi,j)f3(zi,j)f4(zi,j)is the control number of DNA complementation. Since the DNA base can be seen as a two bit binary number, DNA complementation is equivalent to a special XOR expression as belowD⊕Fwhere D is the two bit binary number mapped to the DNA base, F is also a two bit binary number composed only byfk(zi,j), i.e.F=fk(zi,j)fk(zi,j). Thus, we can get the following expressions.(16)(f2k-1(ri,j′)f2k(ri,j′))⊕(fk(zi,j)fk(zi,j))=f2k-1(ri,j′)‾f2k(ri,j′)‾iffk(zi,j)=1f2k-1(ri,j′)f2k(ri,j′)otherwisek=1,2,3,4(17)(f2k-1(gi,j′)f2k(gi,j′))⊕(fk(zi,j)fk(zi,j))=f2k-1(gi,j′)‾f2k(gi,j′)‾iffk(zi,j)=1f2k-1(gi,j′)f2k(gi,j′)otherwisek=1,2,3,4(18)(f2k-1(bi,j′)f2k(bi,j′))⊕(fk(zi,j)fk(zi,j))=f2k-1(bi,j′)‾f2k(bi,j′)‾iffk(zi,j)=1f2k-1(bi,j′)f2k(bi,j′)otherwisek=1,2,3,4Step 3. Do the DNA decoding operation. According to the above analysis, the DNA decoding is equivalent to the substitution of two bit binary number. Suppose Sqis the substitution box replacing DNA decoding. The outputs of this Step are listed as below:(19)Sq(f2k-1(ri,j′)f2k(ri,j′))⊕(fk(zi,j)fk(zi,j))k=1,2,3,4(20)Sq(f2k-1(gi,j′)f2k(gi,j′))⊕(fk(zi,j)fk(zi,j))k=1,2,3,4(21)Sq(f2k-1(bi,j′)f2k(bi,j′))⊕(fk(zi,j)fk(zi,j))k=1,2,3,4Based on Table 5, we can see that if the two-bit number x is the complement of y, Sq(x) is also the complement of Sq(y). Thus, we have:(22)Sq(f2k-1(ri,j′)f2k(ri,j′))⊕(fk(zi,j)fk(zi,j))=Sqf2k-1(ri,j′)f2k(ri,j′)⊕fk(zi,j)fk(zi,j)k=1,2,3,4(23)Sq(f2k-1(gi,j′)f2k(gi,j′))⊕(fk(zi,j)fk(zi,j))=Sqf2k-1(gi,j′)f2k(gi,j′)⊕(fk(zi,j)fk(zi,j))k=1,2,3,4(24)Sq((f2k-1(bi,j′)f2k(bi,j′))⊕(fk(zi,j)fk(zi,j)))=Sq(f2k-1(bi,j′)f2k(bi,j′))⊕(fk(zi,j)fk(zi,j))k=1,2,3,4Juxtaposes all two-bit numbers from left to right to get an 8-bit number. Defineri,j″,gi,j″andbi,j″as the 8-bit juxtaposed number. Then, we have(25)ri,j″=Sq(f1(ri,j′)f2(ri,j′))⊕(f1(zi,j)f1(zi,j))∘Sq(f3(ri,j′)f4(ri,j′))⊕(f2(zi,j)f2(zi,j))∘Sq(f5(ri,j′)f6(ri,j′))⊕(f3(zi,j)f3(zi,j))∘Sq(f7(ri,j′)f8(ri,j′))⊕(f4(zi,j)f4(zi,j))=(Sq((f1(ri,j′)f2(ri,j′))∘Sq(f3(ri,j′)f4(ri,j′))∘Sq(f5(ri,j′)f6(ri,j′))∘Sq(f7(ri,j′)f8(ri,j′)))⊕(f1(zi,j)f1(zi,j)f2(zi,j)f2(zi,j)f3(zi,j)f3(zi,j)f4(zi,j)f4(zi,j))=SBq(ri,j′)⊕Di,jwhere Di,j=f1(zi,j)f1(zi,j)f2(zi,j)f2(zi,j)f3(zi,j)f3(zi,j)f4(zi,j)f4(zi,j), The operator ∘ means connecting the two-bit numbers; FunctionSBq(x)=Sq(x1x2)∘Sq(x3x4)∘Sq(x5x6)∘Sq(x7x8)and xiis the ith bit of x.Similarly, we get:(26)gi,j″=SBq(gi,j′)⊕Di,j(27)bi,j″=SBq(bi,j′)⊕Di,jStep 4. Xorri,j″,gi,j″andbi,j″with Y(i, j) and output the cipher-pixel. SupposeCri,j,Cgi,jandCbi,jare the R, G, B level value of the cipher-pixel, respectively. Thus, we have:(28)Cri,j=ri,j″⊕Y(i,j)=SBq(ri,j′)⊕Di,j⊕Y(i,j)(29)Cgi,j=gi,j″⊕Y(i,j)=SBq(gi,j′)⊕Di,j⊕Y(i,j)(30)Cbi,j=bi,j″⊕Y(i,j)=SBq(bi,j′)⊕Di,j⊕Y(i,j)Although the image encryption algorithm proposed in Ref. [14] looks like a block cipher, it behaves as a stream cipher indeed. The operations of the above encryption scheme as a stream cipher can be explained as follows. The three sequences r′i,j, g′i,jand b′i,j, i=1,2, … m; j=1,2, …, n are regarded as the plaintexts. The keys k1 and k2 are used to determine Sq. The other keys x0, y0, μ1, μ2 and the two logistic maps are used to generate keystream K=(D1,1Y(1,1))(D1,2Y(1,2)) … (D1,n Y(1,n))(D2,1Y(2,1)) … (Dm,n Y(m,n)). This keystream is used to encrypt the plaintexts according to the following rules:(31)Cr=Cr1,1Cr1,2⋯Cri,j⋯Crm,n=(SBq(r1,1′)⊕D1,1⊕Y(1,1))(SBq(r1,2′)⊕D1,2⊕Y(1,2))⋯(SBq(ri,j′)⊕Di,j⊕Y(i,j))⋯(SBq(rm,n′)⊕Dm,n⊕Y(m,n))(32)Cg=Cg1,1Cg1,2⋯Cgi,j⋯Cgm,n=(SBq(g1,1′)⊕D1,1⊕Y(1,1))(SBq(g1,2′)⊕D1,2⊕Y(1,2))⋯(SBq(gi,j′)⊕Di,j⊕Y(i,j))⋯(SBq(gm,n′)⊕Dm,n⊕Y(m,n))(33)Cb=Cb1,1Cb1,2⋯Cbi,j⋯Cbm,n=(SBq(b1,1′)⊕D1,1⊕Y(1,1))(SBq(b1,2′)⊕D1,2⊕Y(1,2))⋯(SBq(bi,j′)⊕Di,j⊕Y(i,j))⋯(SBq(bm,n′)⊕Dm,n⊕Y(m,n))Decrypting the ciphertext Cr, Cg and Cb can be accomplished by computing the keystream (Di,j Y(i,j)) and SBq. Thus, (Di,j Y(i,j)) and SBqare equivalent to the secrete keys. Moreover, Di,jis constructed according to the matrix Z. As the matrix Z, Di,jis independent of the plaintext and only determined by the key.Suppose CI is a color cipher-image with size (u, v) needed to be broken. Color image A is a known plain-image which has the same size with CI, and CA is the corresponding cipher-image. Our known plaintext attack is described below and an illustration is given in Fig. 4:Step 1. Assume CIr, Ar and CAr are the R level values of CI, A and CA, respectively. The DNA addition result of Ar is defined as Ar′. According to Eq. (26), we have:(34)CAri,j=SBq(Ari,j′)⊕Di,j⊕Y(i,j),fori=1,2,…,u;j=1,2,…,νSince Ar is known, we can calculate Ar′ according to Eq. (3). Since SBqis unknown, the substitution value ofAri,j′cannot be determined. However, there are only 8 different S-boxes in Table 5. It is very easy to enumerate all possible substitution results of SBq. We perform Xor operation and obtain the following 8 sequences:(35)CAri,j⊕SB1(Ari,j′)CAri,j⊕SB2(Ari,j′)⋮CAri,j⊕SB8(Ari,j′)fori=1,2,…,u;j=1,2,…,νObviously, SBq(Ar′i,j) must be one of {SB1(Ar′i,j), SB2(Ar′i,j), … , SB8(Ar′i,j)}. Therefore, the keystream Di,j⊕Y(i,j) must be a sequence in the following set:CAri,j⊕SB1(Ari,j′),CAri,j⊕SB2(Ari,j′),⋯,CAri,j⊕SB8(Ari,j′).Step 2. For k=1, 2, …, 8, calculate the following Xor results ofCIri,jandCAri,j⊕SBk(Ari,j′)as below:(36)CIri,j⊕CAri,j⊕SB1(Ari,j′)CIri,j⊕CAri,j⊕SB2(Ari,j′)⋮CIri,j⊕CAri,j⊕SB8(Ari,j′)fori=1,2,…,u;j=1,2,…,νOwing toCIri,j=SBq(Iri,j′)⊕Di,j⊕Y(i,j), it is easy to deduce thatSBq(Iri,j′)must be a sequence in Expression (36). Suppose RSqis the reverse S-box of SBq. The sequence Ir′i,jmust be in Eq. (37).(37)Ir1i,j′=RS1(CIri,j⊕CAri,j⊕SB1(Ari,j′))Ir2i,j′=RS2(CIri,j⊕CAri,j⊕SB2(Ari,j′))⋮Ir8i,j′=RS8(CIri,j⊕CAri,j⊕SB8(Ari,j′))fori=1,2,…,u;j=1,2,…,νSimilarly, Ig′i,jand Ib′i,jmust be in Eqs. (38) and (39), respectively.(38)Ig1i,j′=RS1(CIgi,j⊕CAgi,j⊕SB1(Agi,j′))Ig2i,j′=RS2(CIgi,j⊕CAgi,j⊕SB2(Agi,j′))⋮Ir8i,j′=RS8(CIgi,j⊕CAgi,j⊕SB8(Agi,j′))fori=1,2,…,u;j=1,2,…,ν(39)Ib1i,j′=RS1(CIbi,j⊕CAbi,j⊕SB1(Abi,j′))Ib1i,j′=RS2(CIbi,j⊕CAbi,j⊕SB2(Abi,j′))⋮Ib1i,j′=RS8(CIbi,j⊕CAbi,j⊕SB8(Abi,j′))fori=1,2,…,u;j=1,2,…,νStep 3. Recover all possible plain-images. Since the eight possible values of Ir′i,j, Ig′i,jand Ib′i,jare determined. According to the reverse rule of DNA addition shown in Eqs. (40)–(42), the R, G, B level values of the plain-image pixel (i, j), i.e. Iri,j, Igi,jand Ibi,jcan be calculated. With the same way, all possible R, G, B level values of plain-image are obtained. Finally, eight possible plain-images of CI are recovered. Making use of the redundancy and correlation of image data, it is easy to get the final plain-image I.(40)αk=(αk′-βk′+γk′-βk′)mod4(41)βk=(βk′-γk′+βk′)mod4(42)γk=(γk′-βk′)mod4whereαk=fk(Iri,j)fk+1(Iri,j)βk=fk(Igi,j)fk+1(Igi,j)γk=fk(Ibi,j)fk+1(Ibi,j)k=1,3,5,7.αk′=fk(Iri,j′)fk+1(Iri,j′)βk′=fk(Igi,j′)fk+1(Igi,j′)γk′=fk(Ibi,j′)fk+1(Ibi,j′)k=1,3,5,7.In our known plaintext attack, we need a plain-image A and its cipher-image CA. They have the same size as cipher-image CI that we want to attack. Suppose the time complexity of encrypting image A is O(Tencryption). To estimate the attack time, we defines O(T1), O(T2), O(T3) and O(T4) as the time complexity of processing one pixel by DNA coding, Xor operation, DNA addition and decomposing the pixel to its R, G, B components, respectively. Moreover, we can get that the time complexity of composing R, G, B components to a pixel is also O(T4) and DNA decoding has the same time complexity with DNA coding. According to the description in Section 4.2, Di,j, Y(i,j) and SBqare equivalent to the secrete keys, which are used to decrypt CI(i, j). Since SBqis hard to be determined, we try to obtain all possible Di,jand Y(i,j). The time complexity of getting all possible Di,jand Y(i,j) is denoted as O(T)i,j. Based on Fig. 4, it can be calculated as below(43)O(T)i,j=O(T4)+O(T3)+8×O(T1)+O(T4)+8×O(T2)For the encrypted image CI with size (m, n), the time complexity of getting all possible keystreams is shown in Eq. (44). Furthermore, according to the steps in Fig. 4, the time complexity of recovering the encrypt image CI is easy to be calculated and formulated in Eq. (45)(44)O(T)=O(Tencryption)+m×n×(O(T4)+O(T3)+8×O(T1)+O(T4)+8×O(T2))=O(Tencryption)+m×n×(2×O(T4)+O(T3)+8×(O(T1)+O(T2)))(45)O(T′)=O(Tencryption)+m×n(O(T4)+O(T3)+8×O(T1)+O(T4)+8×O(T2))+m×n(O(T4)+8×O(T2)+8×O(T1)+8×O(T3)+8×O(T4))=O(Tencryption)+m×n(16×O(T1)+16×O(T2)+9×O(T3)+11×O(T4))From Eqs. (44) and (45), it can be concluded that the time complexity to get the key is low and our attack has high efficiency.Without loss of generality, we encrypt a bitmap image named Lena with the scheme in Ref. [14] and break it by our approach of known plaintext attack. The plain-image and cipher-image of Lena are denoted as I and CI, respectively. The bitmap image named Plane and its cipher-image are both known, which are denoted as A and CA, respectively. The main process of attack is shown in Figs. 5–10.The image Plane A is divided into three parts Ar, Ag and Ab. Then, Ar′, Ag′ and Ab′ are obtained, which is illustrated in Fig. 5. Fig. 6 shows the results of decomposing CI. The process of getting all possible images of Ir′ is shown in Fig. 7. Similarly, all possible images of Ig′ and Ib′ are given in Fig. 8. Based on Ir′, Ig′ and Ib′, all possible images of Ir, Ig and Ib are calculated, which are illustrated in Fig. 9. Finally, the eight possible color images are recovered and shown in Fig. 10.For most DNA operators, they can only influence one DNA base. It means that the changes in one DNA base can be hardly transferred to the adjacent bases only by DNA operators. Thus, some special operations should be added to improve the diffusion ability of image encryption algorithm based on DNA encoding and chaos. Here, we give the following general measures.Since chaotic sequences are sensitive to the control parameters and status values, the changes of one DNA base can be enlarged and diffused by using the DNA results as feedback to adjust the parameters, status values or iteration number. By the evolvement of chaotic map, the changes will become more and more remarkable.Here, the image encryption algorithm proposed by Ref. [14] is used as a case to demonstrate our suggestion. We add two feedbacks to adjust the iteration number before extracting value from chaos. In the first feedback, the operations in Steps 3 and 4 are combined and modified as follows:Set v0=0. For i=1, 2, 3, …, m×n×4, generate xiby iterating Eq. (1) for vi−1 times and obtain ziaccording to Eq. (6). Calculate two integer values j and k according to Eqs. (46) and (47).(46)j=⌈i/(n×4)⌉(47)k=mod(i-1,n×4)+1where function⌈x⌉returns the smallest integer not less than x. If zi=1, do the DNA complement on Ar′(j, k), Ag′(j, k) and Ab′(j, k). Then, translate Ar′(j, k) to a two-bit number viunder the control of k1. In the second feedback, the operations in Steps 6 and 7 in Ref. [14] are merged as below:Set w0=1. For i=1, 2, 3, …, m×n, generate yiby iterating Eq. (2) for wk−1 times. Calculate two integer values j and k according to Eqs. (48) and (49).(48)j=⌈i/n⌉(49)k=mod(i-1,n)+1Map yifrom (0, 1) to {0, 1, 2, …, 255} and get Yi. Do the following XOR operation.R″(j,k)=R′(j,k)⊕Yi⊕R″(j,k-1)G″(j,k)=G′(j,k)⊕Yi⊕G″(j,k-1)B″(j,k)=B′(j,k)⊕Yi⊕B″(j,k-1)Here, the initial valuesR″(1,0)=0,G″(1,0)=0,B″(1,0)=0. Then, calculate wkaccording to Eq. (50)(50)wk=mod(R″(i,j)+G″(i,j)+B″(i,j),256)From the analysis in Section 3, we know that the matrices Z and Y are independent of plaintext, which causes the encryption algorithm in Ref. [14] vulnerable to known plaintext attack. After employing our suggestion, we encrypt the images Lena and Plane again with the same secrete key, i.e. x0=0.501, y0=0.401, μ1=3.81, μ2=3.68, k1=1 and k2=7. Similarly, the first ten pixel values of the plain-images and cipher-images are listed in Tables 6 and 7. The corresponding elements of Z and Y used to encrypt these first ten pixels are also filled into Tables 6 and 7, respectively.From Tables 6 and 7, it can be seen that different plain-images have different matrices Z and Y, which shows that the loophole is remedied. Moreover, we change the R level value of the tenth pixel of image Lena from 225 to 226 and encrypt the original and modified images with the algorithm in Ref. [14] and the method using the feedbacks, respectively. The comparisons of the first 512 pixels of the cipher-images are shown in Figs. 11 and 12. It is obvious that the diffusion is improved.In order to improve the diffusion of image encryption scheme, Hamming distance of plain-image is used to set the initial value of chaotic map in Ref. [10]. Similarly, the image hash value is employed in Ref. [12]. These two measures also have apparent effect on enhancing diffusion. But the computation of these two measures is larger than that of our suggestion, which means that our suggestion has higher efficiency.

@&#CONCLUSIONS@&#
