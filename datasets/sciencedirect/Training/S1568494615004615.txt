@&#MAIN-TITLE@&#
Scheduling trucks in cross docking systems with temporary storage and repetitive pattern for shipping trucks

@&#HIGHLIGHTS@&#
This paper proposes a meta-heuristic based algorithm for scheduling inbound and outbound trucks in cross docking problems.The proposed method lets the outbound trucks to intermittently move in and out of the dock during the time intervals between their task executions.The numerical results reveal that the proposed method is superior to the method of Yu and Egbelu [1] from the view point of minimizing makespan.Two heuristic algorithms of dynamic crossover for inbound and outbound trucks are provided.Two heuristic algorithms of dynamic mutation for inbound and outbound trucks are provided.

@&#KEYPHRASES@&#
Logistics,Cross docking,Scheduling,Meta-heuristics,Genetic algorithm,

@&#ABSTRACT@&#
Cross docking is a logistic concept in which product items are unloaded from inbound trucks into a warehouse and then are sorted out based on customer demands and loaded into outbound trucks. For a dock holding pattern for outbound trucks, two possible scenarios can be defined. In the first scenario, whenever a truck goes into a shipping dock, it does not leave the dock until all needed product items are loaded into outbound truck. In the second scenario, outbound trucks can enter and leave the dock repeatedly. Therefore, in the second scenario it is possible that an outbound truck loads some of its needed products from shipping dock, leaves the dock for another outbound truck, waits and goes into the shipping dock again to load all or part of its remaining product items. This paper proposes a genetic algorithm-based framework for scheduling inbound and outbound trucks in cross docking systems with temporary storage of product items at shipping dock for the second defined scenario such that minimizes total operation time. In order to show the merit of the proposed method in providing a sequence that minimizes the total operation time, the operation time of the proposed method is compared to a well-known existing model by several numerical examples. The numerical results show the high performance of the proposed algorithm.

@&#INTRODUCTION@&#
Cross docking is a product handling and distribution concept in which product items sorted out and recognized based on customer demands and move directly from receiving dock to shipping dock, without being held as inventory in the warehouse. Cross docking systems can decrease the storage and products retrieval costs in comparison with traditional warehouses, by synchronizing the flows of inbound and outbound trucks. Generally, cross docking is a good strategy for companies that distribute large volume of products and/or serve a large number of stores [1].Cross docking facilities include four main functions of warehousing. These four major functions are receiving, storage, order picking and shipping. Among these four functions, storage and order picking are typically the most costly. Storage function is costly because of inventory holding costs. On the other hand, order picking is expensive because it needs labor work. Cross docking minimizes the storage and order picking functions of a warehouse while still it allows to receive and to ship the product items. According to what proposed by Yu and Egbelu [1], the general framework of this cross docking system is illustrated in Fig. 1. The cross docking system generally operates as (1) product items arrive at the cross dock facility and are verified at the receiving docks, (2) products are placed on the sortation systems, which are sorted by destinations, (3) products are transferred to the proper location on the shipping docks and leave the cross dock facility.There are some works in the literature aiming at the concept of cross docking and scheduling transportation facilities in cross docking systems. Buffa [2] showed that logistic costs could be reduced by integrating inbound and outbound trucks in distribution systems. Cross docking operation can achieve this function actually. The most famous application of cross docking is Wal-Mart. Cross docking has helped Wal-Mart to improve its market share and profitability [3]. Moreover, cross docking make great commercial success in Home Depot, Costco, Canadian Tire, FedEx and so on. For perishable products or environment with limited or no storage, cross docking operation can be a helpful technique and can provide low inventory and transportation cost for companies by integrating goods in distribution center [4]. Lau et al. [5] suggested a tabu search algorithm to minimize transportation costs for vehicle routing in cross docking system with specified time windows and a finite number of vehicles. Lee et al. [6] proposed a model integrating cross docking with the pickup and delivery process in the supply chain. Moreover, a mathematical model was developed to determine an optimal vehicle routing schedule which considered cross-docking. Since this problem is known as NP-hard, an algorithm based on a tabu search algorithm was also developed. Mosheiov [7] studied an important version of the vehicle routing problem with pick-up and delivery. The objective in his study was to find a set of vehicle routes that service customers such that vehicle capacity is not violated and the total distance traveled is minimized. He introduced two heuristics that focus on efficient utilization of vehicles’ capacities. Chen and Song [4] studied a two-stage hybrid cross-docking scheduling problem in which a precedence criterion must be fulfilled between consecutive jobs. They dealt with the model in two different phases. For problems with small scale, they addressed a mixed integer programming model and solve each problem with CPLEX while for problems with medium and large scale, they proposed four heuristics compared with each other via a given lower bound. Barbarosoglu and Ozgur [8] developed a new tabu search heuristic to solve the single-depot vehicle routing problem of a distribution company carrying goods from a depot to a set of dedicated dealers. Their heuristic proposed a new neighborhood generation procedure which considers the scattering pattern in the locations of the dealers. Boloori et al. [9] worked on a cross docking scheduling problem in a just in time environment in which the delivery of products should conform to pre-determined time schedules. Hence, any late or soon delivery might be inappropriate for customers. Therefore, they considered earliness and tardiness as the two main criteria in a multi-criteria scheduling problem. In addition, these criteria are combined through a penalty factor considering penalties for any soon or late delivery of commodities. Three meta-heuristics have been developed in their paper, to solve the problem. Maknoon and Babtiste [10] proposed two stage approaches for the same problem. The first approach proposed a dynamic programming algorithm for loading/unloading and a heuristic evolutionary algorithm for sequencing. The second approach provided a heuristic and an evolutionary algorithm. It was shown that the second approach is better from the viewpoint of time and profit. Vahdani and Zandieh [11] applied five meta-heuristic algorithms to schedule the trucks in cross-dock systems such that minimize total operation time when a temporary storage buffer to hold items temporarily is located at the shipping dock. Konur and Golias [12] studied a cross-dock operator's truck scheduling problem at inbound doors in case of unknown truck arrival times. They analyzed the cross-dock operator problem of determining a cost-stable scheduling strategy while minimizing the average of total costs. Joo and Kim [13] proposed genetic algorithm (GA) and self-evolution algorithm for a truck scheduling problem with three types of truck: inbound trucks, outbound trucks and compound trucks. The compound trucks play the roles of inbound trucks and outbound trucks. Li et al. [14] considered the cross docking scheduling problem as a two-phase parallel machine problem with earliness and tardiness and proposed two genetic algorithm-based approaches for its solution. Besides, they supposed that the temporary storage is not allowed. Lioa et al. [15] considered inbound and outbound truck sequencing for cross docking operation with objective of minimizing makespan. They proposed two new hybrid differential evolution algorithms and a more realistic operational policy. Agustina et al. [16] focused on the integration of vehicle scheduling and routing in one comprehensive model, which have traditionally been modeled separately. The integrated model also considered product consolidation at the warehouse and respected delivery time windows specified by the customer.Yu [17] and Yu and Egbelu [1] studied Cross Docking model with Temporary storage in front of the shipping dock and dock Non-Repeat truck holding pattern at the dock (CDTNR). The objective of their study was determining the best truck sequencing for both inbound and outbound trucks in order to minimize total operation time (makespan). Yu [17] proposed Cross Docking model with Temporary storage in front of the shipping dock and dock Repeat truck holding pattern (CDTR). In his study, it is assumed that there is a temporary storage in front of the shipping dock and both the receiving trucks and the shipping trucks can intermittently move in and out of the dock during the time intervals between their task execution. He developed a mathematical model and a heuristic algorithm to solve the problem. He stated that the developed mathematical model for this problem is inefficient and impractical because of the large computational time required even for small problems. In order to assess the performance of the heuristic algorithm, the heuristic solutions need to be compared with the optimal solutions that cannot be found using the mathematical programming model. However, the optimal solution for the CDTNR can be used as the upper bounds for the optimal solutions for the CDTR. Moreover, he stated that the optimal solution for the CDTR must be, at least, as good as or better than the optimal solutions obtained for the CDTNR from the viewpoint of makespan since the CDTR is a more relaxed problem compared to CDTNR. Despite of the later argument, computational results in his study showed that the solutions of developed heuristic algorithm for CDTR is not always as good as or better than the optimal solutions obtained for the CDTNR. In fact, the computational results revealed that in some test problems, the solutions of the CDTR are worse than the solutions of the CDTNR. Therefore, it seems that the proposed heuristic algorithm in Yu [17] for CDTR is not reliable to be used for dock repeat truck holding pattern.The present paper proposes a solution framework based on genetic algorithm for Cross Docking model with Temporary storage in front of the shipping dock and dock Repeat truck holding pattern for Outbound trucks (CDTRO). For a dock holding pattern for outbound trucks, two possible scenarios can be defined. In the first scenario, whenever a truck goes into a shipping dock, it does not leave the dock until all needed products are loaded into the outbound truck. In the second scenario, the outbound trucks can enter and leave the docks intermittently. Therefore, in the second scenario it is possible that an outbound truck loads some of its products, leaves the shipping dock for another outbound truck, waits and goes into the shipping dock again to load all or part of its remaining product items.The proposed algorithm of this paper schedules the sequence of inbound and outbound trucks for the second defined scenario such that minimizes total operation time. Obviously, the best method of cross docking is one that provides a solution with fewest total operation time compared to other methods. Therefore, in order to show the merit of the proposed method of this paper in providing a solution that minimizes the total operation time, the operation time of the proposed sequencing method is compared to the sequencing method of Yu and Egbelu [1] by several numerical examples in Section 4. Yu and Egbelu [1] provided three different solution approaches for cross docking problem. In the first approach, a mathematical model with the objective of minimizing total operation time was developed. In the second approach, they employed complete enumeration to generate all possible truck sequences to a problem. The third approach which consists of nine heuristic algorithms was developed to overcome the time complexity of the mathematical and the complete enumeration approaches. Since the second approach (complete enumeration) definitely performs better than or at least equivalent to the two other approaches, the proposed method of this paper is compared to the second approach –Complete Enumeration- of Yu and Egbelu [1] which is abbreviated in the remainder of the paper as CEYE.The computational results of Section 4 illustrate that the operation time of the solutions obtained by the proposed method is less than CEYE. As a result, the obtained solutions of the proposed method of this paper yields the shorter delivery times of products to customers.Since this paper proposes a dynamic approach for crossover and mutation operation of genetic algorithms, a literature review about adaptive and combinatorial works is provided.Tang and Tseng [18] proposed adaptive directed mutation operator and then employed it to solve complex function optimization problems. They stated that the suggested adaptive directed mutation operator enhances the abilities of genetic algorithms in searching global optima as well as in speeding convergence by integrating the local directional strategy and the adaptive random search strategies. Bingul [19] described an adaptive genetic algorithm with dynamic fitness function for multiobjective problems in a dynamic environment. In order to see performance of the algorithm, adaptive genetic algorithm was applied to two kinds of multiobjective problems. Firstly, the algorithm was used to find an optimal force allocation for a combat simulation. The paper discussed four objectives that need to be optimized and presented a fuzzy inference system that forms an aggregation of the four objectives. A second fuzzy inference system was used to control the crossover and mutation rates based on statistics of the aggregate fitness. Srinivasa et al. [20] proposed a self-adaptive migration model genetic algorithm, where parameters of population size, the number of points of crossover and mutation rate for each population are adaptively fixed. Further, the migration of individuals between populations is decided dynamically. The paper of Ref. [20] gives a mathematical schema analysis of the method stating and showing that the algorithm exploits previously discovered knowledge for a more focused and concentrated search of heuristically high yielding regions while simultaneously performing a highly explorative search on the other regions of the search space. Liang and Leung [21] introduced a new technique called adaptive elitist-population search method. This technique allows unimodal function optimization methods to be extended to efficiently explore multiple optima of multimodal problems. It is based on the concept of adaptively adjusting the population size according to the individuals’ dissimilarity and a novel direction dependent elitist genetic operator. Incorporation of the new multimodal technique in any known evolutionary algorithm leads to a multimodal version of the algorithm. Yun [22] proposed a hybrid genetic algorithm (a-hGA) with adaptive local search scheme. For designing the a-hGA, a local search technique is incorporated in the loop of genetic algorithm (GA), and whether or not the local search technique is used in the GA is automatically determined by the adaptive local search scheme. Two modes of adaptive local search schemes are developed in this paper. First mode is to use the conditional local search method that can measure the average fitness values obtained from the continuous two generations of the a-hGA, while second one is to apply the similarity coefficient method that can measure a similarity among the individuals of the population of the a-hGA.The remainder of the paper is organized as follows. Section 2 provides the model description and assumptions, Section 3 presents the proposed algorithm for solving the problem, Section 4 presents the illustrative examples and computational results, and Section 5 concludes the paper.It is possible to generate various cross docking scenarios or models, depending on the facilities, operating conditions or strategies employed. In Yu [17], 32 scenarios are introduced based on the number of receiving and shipping docks, the docking pattern for the inbound and outbound trucks, and the existing of temporary storage. The docking pattern refers to the rule for holding or moving trucks in and out of the docks. The present paper gives a solution method for one of the 32 problem scenarios.The characteristics of the cross docking system considered in this paper are assumed as follows. First, the inbound trucks enter the distribution center and unload products onto the receiving dock. Second, products move to the shipping dock. Third, the products are loaded by outbound trucks and leave the distribution center.In this model, it is assumed that there is temporary storage in front of the shipping dock and also the shipping trucks can move in and out of the dock repeatedly. After a shipping truck loads some of its needed products, it can choose one of the two decisions; either more products are loaded into the current shipping truck, or the current shipping truck is moved out from the shipping dock and another shipping truck is moved to the shipping dock to load its products.The objective of this problem is to find the best sequence of inbound and outbound trucks in order to minimize makespan. Makespan in this study is defined as the total operating time of the cross docking operation. The makespan covers the interval between the moment of unloading the first product from an inbound truck into receiving dock and the moment of loading the last product into shipping truck. Furthermore, it is assumed that all inbound and outbound trucks are available at time zero; the total number of units received of a given product type must be equal to the number of units shipped of the same product type; the loading and unloading time are the same for all product types and it takes one unit of time for one unit of product; truck changeover time is the same for all inbound and outbound trucks; there is one receiving dock and one shipping dock and the docks are separate; all received products must be shipped out, in other words, long term storage is not allowed; moving time of products from the receiving dock to the shipping dock is certain and deterministic.This section proposes a genetic algorithm-based method to solve the CDTRO problem. By the proposed algorithm of this paper, we want to obtain the best sequence of inbound and outbound trucks such that the makespan is minimized. The sequence of inbound and outbound trucks is considered as a solution of the problem. Before describing the proposed algorithm to solve the problem, it is necessary to show the representation scheme of solutions in the proposed algorithm. Fig. 2demonstrates a sample of the solution. As shown in Fig. 2, the solution consists of two parts which the first part (left part) illustrates the sequence of inbound trucks and the second part (right part) illustrates the sequence of outbound trucks. Note that in the second part of the solution, the above row indicates the sequence of the outbound trucks and the below row indicates the product type that should be loaded into the truck. In this sample, it is assumed that there are four inbound trucks, five outbound trucks and three different product types. According to the Fig. 2, the sequence of the inbound trucks at the receiving dock is as follows: truck #3–truck #4–truck #1–truck #2. Note that each receiving truck unloads all its products when enters the receiving dock. On the other hand, the sequence of the outbound trucks is as follows: (i) truck #2 enters the shipping dock and loads some of its needed products (product #1), (ii) truck #2 leaves the shipping dock and truck #5 enters the shipping dock and loads some of its needed products (product #3), (iii) truck #5 leaves the shipping dock and truck #1 enters the shipping dock to load some of its needed products (product #2), (iv) truck #1 leaves the shipping dock and truck #3 enters the dock and loads some of its needed products (product #2), (v) truck #3 leaves the shipping dock and again truck #2 enters the dock and loads some of its needed products (product #1). Note that truck #2 has been loaded some of its needed products in step i and now truck #2 loads another part of its needed products, vi) truck #2 leaves the shipping dock and again truck #5 enters the dock to loads some of its needed products (product #2). Again note that truck #5 has been loaded some of its needed products in step ii and now truck #5 loads another part of its needed products. This procedure is continued until all the outbound trucks load all their needed products.The explained scheme of solution is used as a chromosome in the proposed genetic algorithm-based framework of this paper. Genetic Algorithms have proven to be very adaptable to a great variety of different complex optimization tasks, and many researches apply this algorithm to solve the different types of problems [23–31].The main role of genetic algorithm (GA) is to perform global search within all feasible search spaces. GA was first introduced by Holland [32]. A GA is a directed random search method that starts with a randomly generated population. In GA, a population is constructed by individuals or chromosomes and every individual or chromosome is encoded into a structure that represents its properties. The individuals evolve through successive iterations, called generations. During each iteration, the individuals are evaluated using some fitness measures. A new generation is created as follows: some of the chromosomes are selected through a selection mechanism and the selected chromosomes mate by the crossover operator and generate new chromosomes, called the offspring. Thereafter, for the purpose of having variety in solutions, some characteristics of some chromosomes are changed through the mutation operator. Then the new generation is evaluated and this process is repeated until a stopping criterion is met. The stopping criterion is considered usually by maximum number of generations or a specific value for fitness tolerance among iterations.The genetic algorithm-based framework of this paper to solve the CDTRO problem is described by the following subsections. It should be noted that the organization of the following sections (Sections 3.1–3.5) is according to the structure of genetic algorithm proposed by Holland [32] which is explained above. In other words, the main steps of a genetic algorithm are (1) randomly generating population (2) evaluating the chromosomes based on their fitness (3) performing crossover operation (4) performing mutation operation (5) Reproduction. Therefore, the following subsections are organized based on the main steps of genetic algorithm.The first section of the proposed algorithm initializes the population. Since the structure of the chromosome for inbound trucks is different from outbound trucks, Section 3.1.1 proposes the population initialization for inbound trucks, and Section 3.1.2 proposes the population initialization for outbound trucks.This section describes the proposed algorithm for initializing the inbound trucks by the following pseudo code.l1fori=1 to population size*2 step 2l2forj=1 to NITl3ifj=1 thenl4parent(i,j)←a random number between 1 and NITl5update the list of inbound trucksl6end ifl7ifj≥2 thenl8parent(i,j)←a random number from the updated list of inbound trucksl9update the list of inbound trucksl10end ifl11nextjl12nextiThe above algorithm initializes the inbound trucks in population. The reason of considering step 2 in line l1 is explained below.As it is demonstrated in Fig. 2, the structure of the chromosome for inbound trucks is single-level, but the structure of the chromosome for outbound trucks is bi-level. Hence, generating inbound trucks chromosomes with the number of population size is performed with step 2 as it is shown in line l1.The above algorithm generates chromosomes of population for inbound trucks such that a chromosome does not consist of repetitive inbound trucks. For this purpose, line l4 allocates a random integer number between 1 and NIT (number of inbound trucks) to the first gene of the chromosome. Note that the parent (i,j) denotes a gene of a parent chromosome. Moreover, i in parent (i,j) denotes the chromosome #i of the population size, and j in parent(i,j) denotes the gene #j of the chromosome. Line l5 updates the list of inbound trucks in order to remove the scheduled truck from the list of inbound trucks.For the other genes of the chromosome (j≥2), line l8 allocates a random integer number from the updated list of inbound trucks to the parent (i,j), and again the list of inbound trucks is updated by line l9. In this way, a population of inbound trucks is generated such that each truck in each chromosome is observed only once.In this section, the proposed algorithm for initializing the outbound trucks is described by the following pseudo code.l1fori=1 to population size*2 step 2l2counter←1l3dol4counter1←1l5dol6parent(i, NIT+counter)←a random outbound truck #u between1 and NOTl7counter←counter+1l8counter1←counter1+1l9loop whilecounter1≤αl10counter←counter-counter1+1l11dol12counter2←1l13dol14parent(i+1, NIT+counter)←a random product type #kl15counter←counter+1l16counter2←counter2+1l17loop while (counter2≤bracket(mostuff(u,k)/lot)l18loop while (all product types of the outbound truck #u are allocated)l19loop while (all outbound trucks are scheduled)l20nextiThe proposed algorithm of this section initializes the outbound trucks in population. As it demonstrated in Fig. 2, the second part of each chromosome consists of the outbound trucks and the product types to be loaded into outbound trucks. Line l6 chooses and schedules randomly an outbound truck #u from the list of outbound trucks and repeats it α times in chromosome by loop of l5–l9 which α is defined by Eq. (1) and NOT stands for the number of outbound trucks.(1)α=∑k=1productbracket(mostuff(u,k)/lot).It should be noted that this scheduled outbound truck #u is not be changed in the loop of line l5–l9 for scheduling a specific outbound truck #u.In order to better explaining the above algorithm and the Eq. (1) as well, assume that there are 5 inbound trucks, 4 outbound trucks and 3 product types in a problem. Let the sequence of unloading the products in the first part of the chromosome is as 2-3-1-5-4 for inbound trucks as it demonstrated in Fig. 3. Now the algorithm of sequencing the outbound trucks in the second part of the chromosome is described.In order to consider the repetitive dock pattern for outbound trucks, the proposed algorithm of this paper assumes that whenever a shipping truck is located on the opposite of the shipping dock, it loads a fixed quantity of a product type called lot size. For instance, if the lot size is determined equal to 10, it means that whenever a shipping truck enters the shipping dock, it loads 10 products from a specified product type.To better describing the proposed algorithm, see Fig. 3 as a chromosome. Line l6 randomly allocates an outbound truck #u to load some of its products at the beginning of the sequence. Lines l5 to l9 repeats the outbound truck #u several times (equal to α) in chromosome to load its needed products. Mostuff(u,k) stands for total product type k that should be loaded into shipping truck #u. bracket(mostuff(u,k)/lot) calculates the number of repeating the outbound truck #u in chromosome for loading total number of needed product type #k. In fact, in each time of appearance of the outbound truck #u in chromosome for loading product type #k, the quantity of loading the product type k is equal to lot size and in the last occurrence of the outbound truck #u in chromosome for loading the product type #k, the quantity of loading the product type #k is equal to lot size+remained quantity of product type #k that is less than lot size. Finally, α calculates the total number of repeating the outbound truck #u in a chromosome for loading total number of its needed products.As an instance, let the outbound truck #3 is scheduled first and should loads 24 units of product type #2 and 33 units of product type #4; also let the lot size is equal to 10. Therefore, the outbound truck #3 should be repeated two times in chromosome for loading product type #2 (bracket(24/10)=2) and three times for product type #4 (bracket(33/10)=3). Totally, the outbound truck #3 should be repeated five times in chromosome for loading its needed products. In the first occurrence of outbound truck #3 in chromosome, it loads 10 units of product type #2, in the second occurrence it loads 14 units of product type #2, in the third as well as the forth occurrence of the outbound truck #3 it loads 10 units of product type #4, and in the fifth occurrence it loads 13 units of product type #4.Lines l10–l18 allocate the products to the outbound trucks that are scheduled by the lines l5–l9. In order to retain the stochastic nature of generating chromosomes, the proposed algorithm randomly allocates a product type to the outbound trucks. For this purpose, line l14 allocates a random product type #k to the first scheduled outbound truck #u and repeats the random product type #k, bracket(mostuff(u, k)/lot) times by loop of l13–l17. It should be noted that the product type #k is not be changed in the loop of l13–l17 to be loaded into outbound truck #u. This procedure is repeated for other needed products of outbound truck #u until all the other needed products of outbound truck #u are allocated. For instance, for the chromosome demonstrated in Fig. 3, the product type #2 is scheduled first for the outbound truck #3 by random allocation and it is repeated two times for outbound truck #3, also, the product type #4 is scheduled second for the outbound truck #3 and it is repeated three times. As it explained before, through this chromosome, the outbound truck #3 loads 24 units of product type #2 and it loads 33 units of product type #4.After initializing the population that explained in Section 3.1, the proposed algorithm enters in a loop of evaluating the generated solutions, crossover, mutation and reproduction such that this loop is repeated until the stopping criteria are satisfied. For this purpose, Section 3.2 explains the proposed algorithm of fitness evaluation of solutions.Since the makespan in this study is defined as the total operating time of the cross docking operation, the makespan of a solution/chromosome is considered as the fitness of the solution/chromosome.Since the makespan is affected by the schedule of both inbound and outbound trucks, this section calculates the total time needed for unloading products by inbound trucks through the following algorithm.l1fori=1 to population size*2 step 2l2forj=1 to NITl3ifj=1 thenl4tstart(i,j)←0l5end ifl6ifj>1 thenl7tstart(i,j)←tfinish(i,j−1)+changeoverl8end ifl9tfinish(i,j)←tstart(i,j)+total product of the inbound truckl10nextjl11nextiThe above algorithm calculates the start and the finish time of unloading operation for inbound trucks in a sequence. This computation consists of two parts. The first part calculates the start and the finish time for the first scheduled inbound truck in sequence, while the second part calculates the start and finish time for the other scheduled inbound trucks in sequence. Note that tstart(i,j) stands for the start time of unloading operation, and tfinish(i,j) stands for the finish time of unloading operation. The start time of unloading operation for the first inbound truck is considered equal to zero as illustrated by line l4. Since in this paper the loading and unloading time are considered the same for all product types and it is considered to take one unit of time for one unit of product, the finish time of unloading for the first inbound tuck is considered equal to the total product of the inbound truck by performing line l9.Line l6 checks whether the considered inbound truck is the first truck in sequence or not. If the considered inbound truck is not the first truck in sequence, the algorithm considers the start time of unloading operation equal to the finish time of the previous truck in sequence (tfinish(i,j−1)) plus the changeover time (line l7). The finish time for an inbound truck that is not the first truck in sequence is equal to the start time of unloading the products plus total product of the inbound truck which is performed by line l9.Since the makespan of a solution/chromosome is equal to the finish time of the last outbound truck in the sequence, this section proposes an algorithm to calculate the start as well as the finish time for the outbound trucks in a sequence. For this purpose, the following pseudo code explains the proposed algorithm for calculating the start and the finish time for the outbound trucks in a sequence.l1fori=1 to population size*2 step 2l2forj=NIT+1 to NIT+βl3u←parent(i,j)l4k←parent(i+1,j)l5ifmostuff(u,k)≥2*lotthenl6ostuff(u,k)←lotl7mostuff(u,k)←mostuff(u,k)−lotl8elsel9ostuff(u,k)←mostuff(u,k)l10mostuff(u,k)←0l11end ifl12ifj=NIT+1 thenl13tstart(i,j)←0l14else ifj>NIT+1 thenl15ifparent(i,j)=parent(i,j−1)thenl16tstart(i,j)←tfinish(i,j−1)l17elsel18tstart(i,j)←tfinish(i,j−1)+changeoverl19end ifl20end ifl21λ1←tstart(i,l)+ostuff(u,k)+Vl22λ2←tstart(i,j)+ostuff(u,k)l23tfinish(i,j)←max(λ1, λ2)l24update the number of products in inbound truck ll25nextjl26nextiThe above proposed algorithm calculates the time of start and finish of loading operation for outbound trucks in a sequence. Line l1 assures that the start and finish time for outbound trucks be calculated for all the chromosomes of a population. Line l2 assures that the start and finish time for all outbound trucks in a sequence be calculated. For this purpose, the algorithm starts from the first outbound truck in the sequence (j=NIT+1) to the last outbound truck in the sequence (j=NIT+β) which β is defined by Eq. (2). In Eq. (2), the parameter NOT stands for the number of outbound trucks as mentioned before, and β calculates the total number of appearance of all the outbound trucks in a chromosome for loading their needed products. In other words, the total number of genes for inbound trucks is equal to NIT and the total number of genes for the outbound trucks is equal to β. Therefore, the total number of genes in a chromosome is equal to NIT+β.(2)β=∑u=1NOT∑k=1productbracket(mostuff(u,k)/lot).Whenever an outbound truck #u enters the shipping dock for loading product type #k, it loads the product type #k with the fixed quantity of lot size and in the last entrance of the outbound truck #u for loading product type #k, the quantity of loading the product type #k is equal to lot size+remained quantity of product type #k that is less than lot size. In other words, in the last entrance of the outbound truck #u for loading product type #k, the quantity of loading the product type #k is bigger than or equal to the lot size according to the total quantity of product type #k needed for outbound truck #u. For this purpose, line l5 checks whether the mostuff(u,k) is bigger than or equal to 2*lot size. If the mostuff(u,k) is bigger than or equal to 2*lot size, the line l6 determines the quantity of loading the product type #k for outbound truck #u equal to lot size; ostuff(u,k) in line l6 stands for the quantity of product type #k that should be loaded into outbound truck #u. Since line l6 allocates some of the product type #k to be loaded into outbound truck #u, line l7 updates the remained quantity of product type #k that should be loaded into outbound truck #u. Line l8 checks whether the mostuff(u,k) is less than 2*lot size. In this case, the line l9 determines the quantity of loading the product type #k to be loaded into outbound truck #u equal to mostuff(u,k); therefore, the updated quantity of mostuff(u,k) is equal to zero as it is shown by line l10. Line l12 checks whether the present considered outbound truck is the first scheduled outbound truck in sequence. In this case, as it shown by line l13, the start time of the outbound truck is considered equal to zero. If the present considered outbound truck is not the first scheduled outbound truck in sequence as it shown by line l14, lines l15–l19 calculate the start time of the outbound truck. Line l15 checks whether the under evaluation outbound truck is located in the previous gene too. In this case that an outbound truck is repeated in the two consecutive genes whether for loading the same product type or the different product types, the start time of the outbound truck in the further gene should be equal to the finish time of the outbound truck in the previous gene as it is performed by lines l15 and l16. However, if the under evaluation outbound truck is not the same as the outbound truck in the previous gene, the line l18 determines the start time of the outbound truck equal to the finish time of the outbound truck in the previous gene plus changeover time. After calculating the start time of product loading for the outbound truck #u, lines l21–l23 calculate the finish time of product loading for the outbound truck #u. In the line l21, V stands for the moving time of products from the receiving dock to the shipping dock and tstart(i,l) stands for the start time of the first inbound truck #l in the inbound trucks sequence that has got the needed product #k for outbound truck #u. Line l21 sums up the start time of the first inbound truck #l in the inbound trucks sequence that satisfies the needed product #k for outbound truck #u and the quantity of product type #k that should be loaded into outbound truck #u and the moving time of products from the receiving dock to the shipping dock; finally, line l21 allocates the obtained value of the later statement to λ1. Line l22 sums up the start time of the under evaluation outbound truck and the quantity of product type #k that should be loaded into outbound truck #u; then, line l22 allocates the obtained value to λ2. The finish time of loading operation for the under evaluation outbound truck is determined by max(λ1, λ2) as it is performed by line l23. Since some of the products of inbound truck #l are transferred into outbound truck #u, line l24 updates the number of products in inbound truck #l.The loop l2–l25 calculates the start and the finish time for the all outbound trucks in a sequence. Since the makespan of a solution/chromosome is equal to the finish time of the last outbound truck in the sequence, the finish time of the last outbound truck in the sequence is considered as the fitness of the sequence/solution and the fitness of the solutions is considered to compare the solutions. It is clear that the lower the makespan is, the better the solution will be. Therefore, the chromosome with the lowest makespan is the best chromosome in a population.The crossover operator exchanges genes between two chromosomes, which allow GA to explore new solutions while still retaining some structured parts of previously discovered solutions. The crossover rate (Pc) indicates the probability that a pair of parents will undergo crossover. Moreover, parents that do not crossover may still undergo mutation.The dynamic and adaptive approaches are addressed in many of the meta-heuristic applications e.g. [18–22]. It is illustrated in many studies, that these approaches are helpful in acceding global optima. Therefore, this paper proposes a dynamic crossover method such that the probability of crossover is changed during iterations. In fact, as algorithm moves along in iterations, it gets closer to optimal solution. Therefore, reducing the probability of crossover along iterations could diminish unsuitable sudden changes in solution. Thus, the crossover probability in iteration t is calculated by Eq. (3).(3)Pct=crmax−(crmax−crmin)×(t−1)itermax−1.ThePctin Eq. (3) stands for the probability of crossover in iteration t. The parameterPctstarts from the maximum value of crossover probability (crmax) in the first iteration to the minimum value (crmin) in the last iteration (itermax).Since the dock pattern for inbound trucks is different from outbound trucks, Sections 3.3.1 and 3.3.2 propose the algorithm of crossover operator for inbound and outbound trucks, respectively.In the sequence of the inbound trucks, each inbound truck must stay in receiving dock until it finishes its unloading task once it comes into receiving dock. Therefore, an inbound truck cannot leave the receiving dock until all of its products are unloaded into the receiving dock. In other words, each inbound truck enters the receiving dock just for once; therefore, an inbound truck is located once in the sequence of inbound trucks. In order to retain this property, a modified random single-point crossover operator is proposed in this section as follows.l1θ←a random number between [0,1]l2ifθ≤Pctthenl3select two parentsl4random←a random number between 1 and NITl5copy the genes of parent #1 before random into the offspring #1l6copy the legitimate genes of parent #2 into the remaining places of the offspring #1l7copy the genes of parent #2 before random into the offspring #2l8copy the legitimate genes of parent #1 into the remaining places of the offspring #2l9end ifLine l1 allocates a random number between [0,1] to θ and θ is used in line l2 to check the probability of crossover. If θ is less than the probability of crossover in iteration t (Pct), lines l3–l8 perform the crossover operation. For this purpose, line l3 selects two chromosomes for crossover. The proposed algorithm uses a selection technique to select individuals from the population to insert individuals into mating pool. Individuals from the mating pool are used to generate new offspring, with the resulting offspring forming the basis of the next generation. Goldberg and Deb [33] have shown that the tournament selection has better or equivalent convergence and computational time complexity properties when compared to any other reproduction operator that exists in the literature. Therefore, in this study tournament selection operator is used and the fitness of chromosomes is considered as the measure of prominence. Line l4 allocates a random number between 1 and NIT to random such that the random is used in crossover operator as crossing point. Line l5 copies the genes of selected parent #1 before crossing point into the offspring #1. Line l6 copies the legitimate genes of parent #2 in the order they appear in parent #2 into the remaining places of the offspring #1. In other words, whenever line l6 wants to copy a gene of parent #2 into remaining places of offspring #1, it assures the considered gene is not repeated in offspring #1. Fig. 4illustrates the operations of lines l5 and l6. Similar to the operation of lines l5 and l6, the line l7 copies the genes of parent #2 before random into the offspring #2 and line l8 copies the legitimate genes of parent #1 into the remaining places of the offspring #2.Since the outbound trucks can be repeated several times in the sequence of outbound trucks (second part of chromosome), the crossover algorithm for outbound trucks is different from the inbound trucks. This section explains the proposed crossover algorithm for outbound trucks as follows.l1θ←a random number between [0,1]l2ifθ≤Pctthenl3select two parentsl4random←a random number between NIT+1 and NIT+βl5copy the genes of parent #1 before random into the offspring #1l6counter←NIT+1l7dol8count the number of appearance of “gene #counter of parent #2” in offspring #1l9η←the number of appearance of “gene #counter of parent #2” in offspring #1l10ifη<bracket(mostuff(gene #counter of parent #2)/lot) thenl11copy the “gene #counter of parent #2” into offspring #1l12end ifl13counter←counter+1l14loop until (counter<=NIT+β)l15end ifLine l1 allocates a random number between [0,1] to θ and line l2 evaluates whether θ is less thanPct. If θ is less than the probability of crossover in iteration t, lines l3 to l15 perform the crossover operation. For this purpose, line l3 selects two parents by tournament strategy for crossover operation. Line l4 allocates a random number between NIT+1 and NIT+β to random such that β is defined by Eq. (2) and random is used in crossover operator as crossing point. Line l5 copies the genes of selected parent #1 before crossing point into the offspring #1. In order to filling up the remaining genes of offspring #1, lines l6 to l14 should be performed. The proposed crossover algorithm for outbound trucks is similar to the algorithm of inbound trucks but with some modifications.The phrase bracket(mostuff(u,k)/lot) calculates the allowed number of repeating the outbound truck #u in a chromosome for loading total number of needed product type #k. In other words, the number of appearance of outbound truck #u in a chromosome for loading product type #k should not exceed from bracket(mostuff(u,k)/lot). For this purpose, line l8 counts the number of appearance of “gene #counter of parent #2” in offspring #1. It should be noted that, since the structure of the chromosome for outbound trucks is bi-level as illustrated in Fig. 1, the gene #counter of parent #2 contains both the outbound truck #u and product type #k. Line l10 checks whether the number of appearance of “gene #counter of parent #2” in offspring #1 is less than bracket(mostuff(gene #counter of parent #2)/lot) or not. If η in line l10 is less than bracket(mostuff(gene #counter of parent #2)/lot), the line l11 copies the “gene #counter of parent #2” into offspring #1. The loop of l7–l14 is repeated NIT+β times such that all the remaining places of offspring #1 are filled up. It should be noted that the similar algorithm is performed for generating offspring #2.Fig. 5illustrates the proposed crossover algorithm for outbound trucks. Assume that there are five inbound trucks, four outbound trucks, four product types, and there are two parents for crossing. As demonstrated in parent #1 and parent #2, the outbound truck #1 is repeated two times for loading product type #2 and two times for loading product type #4; the outbound truck #2 is repeated two times for loading product type #2 and four times for loading product type #3; the outbound truck #3 is repeated two times for loading product type #4 and three times for loading product type #1; the outbound truck #4 is repeated three times for loading product type #2 and three times for loading product type #3.According the proposed algorithm of Section 3.3.1 for crossover of inbound trucks, parent #1 (3-1-5-2-4) and parent #2 (4-2-1-5-3) are crossed and as a result, the sequence of inbound trucks in offspring #1 is as 3-1-5-4-2. Now, the proposed algorithm of Section 3.3.2 to do crossover for outbound trucks is explained. For crossing the second part (outbound trucks) of these two parents, line l5 copies the genes of parent #1 before crossing point into the offspring #1 as it is demonstrated in Fig. 5. In order to fill up the remaining genes of offspring #1, the proposed algorithm uses the genes of parent #2 as explained in the proposed pseudo code. For this purpose, line l8 counts the number of appearance of “gene #6 of parent #2” in offspring #1. As it is shown in Fig. 5, the sixth gene (gene #6) of parent #2 is truck #1 that loads product type #4 and this gene is repeated two times in offspring #1 (gene #10 and #11). Since the allowed number of repeating the outbound truck #1 for loading product type #4 is equal to 2, the algorithm does not copy the sixth gene of parent #2 into offspring #1. This situation is applied for the seventh gene of parent #2 also, and the algorithm does not copy the seventh gene of parent #2 into offspring #1. Thereafter, line l8 counts the number of appearance of “gene #8 of parent #2” in offspring #1. As it shown in Fig. 5, the gene #8 of parent #2 is truck #2 that loads product type #3 and this gene is repeated two times in offspring #1. Since the allowed number of repeating the outbound truck #2 for loading product type #3 is equal to 4, the algorithm copies this gene of parent #2 into offspring #1. This procedure is continued until all the remaining genes of offspring #1 are filled up.Mutation operator prevents the solution from being excessively localized. Therefore, the mutation operator increases the possibility of obtaining the global solution [25]. The Mutation rate (Pm) indicates the probability that a chromosome will undergo mutation. In this paper a dynamic adaptive mutation algorithm is proposed such that the probability of mutation is decreased during iterations. As algorithm moves along iterations, it gets closer to optimal solution. Therefore, reducing the probability of mutation along iterations could decrease unsuitable sudden changes in solution, but this reduction should be performed subject to improvements in fitness of solutions that be explained further. The mutation probability in iteration t is calculated by Eq. (4).(4)Pmt=mumax−(mumax−mumin)×(counter−1)itermax−1.ThePmtin Eq. (4) stands for the probability of mutation in iteration t. This parameter (Pmt) starts from the maximum value of mutation probability (mumax) in the first iteration to the minimum value (mumin) such that itermax stands for maximum number of iterations. The parameter counter is considered equal to one in the first iteration, and it is updated by counter←counter+1 whenever the fitness of the best chromosome of offspring population is better than parent population in an iteration. In other words, if the fitness of the best chromosome of offspring population is not better than the parent population, counter is not updated. As a result, the next probability of population is not changed in order to seek more solution space. However, if the fitness of the best chromosome of offspring population is better than parent population, counter is updated, and the next probability of mutation is decreased. In a case that in all iterations the fitness of the best chromosome of offspring population is better than parent population, thePmtin the last iteration is equal to mumin, otherwise thePmtin the last iteration is bigger than mumin.Since the dock pattern for inbound trucks is different from outbound trucks, Sections 3.4.1 and 3.4.2 propose the algorithm of mutation operator for inbound and outbound trucks, respectively.In order to perform the mutation operation for inbound trucks, a known method called swap mutation is applied as follows.l1fori=1 to population size*2 step 2l2θ←a random number between [0,1]l3ifθ≤Pmtthenl4random gene1←a random number between 1 and NITl5random gene2←a random number between 1 and NITl6swap the value of the two random selected genes in chromosome il7end ifl8nextiLine l2 allocates a random number between [0,1] to θ and θ is used in line l3 to check the probability of mutation. If θ is less than the probability of mutation in iteration t (Pmt), lines l4 to l6 perform the mutation operation. For this purpose, line l4 and l5 allocate a random number between 1 and number of inbound trucks (NIT) to random gene1 and random gene2, respectively; line l6 swaps the value of the two random selected genes in chromosome.Since the outbound trucks can be repeated several times in the sequence of outbound trucks, the length of the second part of the chromosome (sequence of outbound trucks) is much more than the first part (sequence of inbound trucks) as it is demonstrated in Fig. 5. Therefore, in order to deeply seeking the solution space, a multiple swapping method is proposed for mutation in sequence of outbound trucks as follows.l1fori=1 to population size*2 step 2l2θ←a random number between [0,1]l3ifθ≤Pmtthenl4counter←1l5dol6random gene1←a random number between NIT+1 and NIT+βl7random gene2←a random number between NIT+1 and NIT+βl8swap the values of the two random selected genes in chromosome il9counter←counter+1l10loop while (counter≤bracket(β*δ))l11end ifl12nextiLine l2 allocates a random number between [0,1] to θ and line l3 evaluates whether θ is less than the probability of mutation in iteration t (Pmt). If θ is less thanPmt, lines l4–l10 perform a multiple swapping for mutation of outbound truck sequence. For this purpose, lines l6 and l7 allocate a random number between NIT+1 and NIT+β to randomgene1 and randomgen2, respectively. In other words, lines l6 and l7 select random genes of outbound trucks such that each selected gene contains a truck and a product type. Line l8 swaps the values of the two random selected genes. This operation is repeated for bracket(β*δ) times by loop of lines l5-l10 such that δ stands for the percentage of genes that undergo mutation; therefore, β*δ calculates the number of mutation operation in chromosome i. Note that δ should be determined at the beginning of the algorithm, and it is better to tune the δ in order to obtain the more near optimal solutions. For example, assume that δ is determined equal to 0.1 and β is equal to 34 in a chromosome, so the proposed mutation algorithm performs the swapping method for three times: bracket(β*δ)=bracket(34*0.1)=3.In Sections 3.3 and 3.4, the proposed algorithm of crossover and mutation are provided, respectively. Thereafter, the fitness of offspring is calculated by the proposed algorithm of Section 3.2. After genetic operators are applied to generate the population of offspring and also fitness of offspring is calculated, tournament selection and a replacement strategy are used to combining the current generation and offspring for reproduction. For this purpose, a number of chromosomes (equal to tournament size) are randomly selected from the parent population and the best one is selected. This operation is performed for the offspring population as well. Then, the best chromosome of parent population and offspring population are compared, and the better chromosome is transferred to the next generation.The new generated population will undergo fitness evaluation, crossover and mutation again. This loop is continued until the stopping criterion is satisfied. A maximum number is chosen to be the upper bound of evolving generations in this proposed algorithm.In order to illustrate the performance of the proposed method, several cases with different number of inbound trucks, outbound trucks and product types are provided in this section.This section represents three main problems with different amounts of inbound trucks, outbound trucks and product types. The main problems are presented by Sections 4.1–4.3. Each main problem consists of two sub problems with different quantity of products. In order to perform a more precise comparison between the proposed method and CEYE, each sub problem is solved with different amounts of changeover time. Finally, Section 4.4 analyzes the numerical examples.In the numerical examples of this section, it is shown that the operation time of the proposed sequencing method of this paper is superior to CEYE. It should be mentioned that in all the numerical examples, the moving time of products from the receiving dock to the shipping dock (V) is considered equal to 100 and the lot size (lot) is considered equal to 10.The parameters of the proposed method of this paper are determined by experimental approach. Therefore, in all the numerical examples, the population size is considered equal to 200; the crmax and crmin are considered equal to 1 and 0.8, respectively; the mumax and mumin are considered equal to 0.2 and 0.05, respectively; the maximum number of iterations is considered equal to 1000.Sub problem 1: In this numerical example, it is assumed that there are three inbound trucks and five outbound trucks for delivering four product types. The quantity of products in inbound trucks is as follows according to the format inbound truck: [(product type, quantity).1: [(1, 48), (2, 28), (3, 46), (4, 34)]; 2: [(1, 47), (2, 32), (3, 48), (4, 35)]; 3: [(1, 59), (2, 28), (3, 40), (4, 37)].The quantity of products in outbound trucks is as follows according to the format outbound truck: [(product type, quantity).1: [(2, 65), (3, 11), (4, 12)]; 2: [(1, 15), (4, 73)]; 3: [(1, 12), (2, 11), (3, 102), (4, 21)]; 4: [(1, 114)]; 5: [(1, 13), (2, 12), (3, 21)].This problem is solved by the proposed algorithm of Section 3 for three cases. In the first case, the changeover time is considered equal to 10. In the second and third cases, the changeover time is considered equal to 30 and 50, respectively.Case 1 of sub problem 1: In the first case of sub problem 1, the changeover time is considered equal to 10. Applying the proposed algorithm of Section 3 for solving this problem, the optimal/near optimal sequence of the inbound trucks is as 1-2-3 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:Truck55552244433333333344111Product21334411143333331411234The sequence of outbound trucks (continued):Truck1111122222233333444444Product2222244414433233111111In the above sequence, the first scheduled outbound truck is truck #5 that loads product type 2, 1 and 3, respectively. As explained in lines l5 to l11 of Section 3.2.2, the first gene of outbound trucks sequence shows that truck #5 loads 12 product type #2; the second gene shows that truck #5 loads 13 product type #1; the third gene shows that truck #5 loads lot=10 product type #3; the forth gene shows that truck #5 loads 11 product type #3. After loading of product type #3 by truck #5 in the forth gene, truck #5 leaves the shipping dock and truck #2 enters the shipping dock to load its products. This procedure is continued until all the outbound trucks completely load their products. As it shown in the sequence of outbound trucks, once truck #5 and truck #1 enter the shipping dock, they do not leave the dock until all needed product items are loaded into the trucks, but the situation of trucks #2, #3 and #4 is different. In other words, trucks #2, #3 and #4 load some of their products from shipping dock, leave the dock for another outbound truck, wait and go into the shipping dock again to load all or part of their remaining products.In order to illustrate the performance of the proposed algorithm of this paper, this problem is also solved by CEYE. The obtained sequence by CEYE for the inbound trucks is 2-1-3 and for the outbound trucks is 5-3-1-4-2.The makespan of the solution of the proposed algorithm of this paper is equal to 670, while the makespan of the solution of CEYE is equal to 787. It is clear that the makespan of the proposed algorithm of this paper is less than CEYE, so the sequence of the proposed method uses fewer total operation time compared to CEYE.Case 2 of sub problem 1: In the second case of sub problem 1, the changeover time is considered equal to 30. Applying the proposed algorithm of Section 3 for solving this problem, the optimal/near optimal sequence of the inbound trucks is as 1-3-2 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:Truck55551333333333111444444Product13324142433333222111111The sequence of outbound trucks (continued):Truck4444422222222333331111Product1111114444444333332223In the above sequence, the first scheduled outbound truck is truck #5 that loads product type #1, 3 and 2, respectively. According to lines l5–l11 of Section 3.2.2, the first gene shows that truck #5 loads 13 product type #1; the second gene shows that truck #5 loads lot=10 product type #3, and the third gene shows that truck #5 loads the remained amount of product type #3 which is equal to 11; the forth gene shows that truck #5 loads 12 product type #2. After loading of product type #2 by truck #5, truck #5 leaves the shipping dock and truck #1 enters the shipping dock to load its products. This procedure is continued until all the outbound trucks completely load their products.In order to illustrate the appropriate performance of the proposed algorithm of this paper, this problem is also solved by CEYE. The obtained sequence by CEYE for the inbound trucks is 2-1-3 and for the outbound trucks is 5-3-1-4-2.The makespan of the solution of the proposed algorithm of this paper is equal to 792, while the makespan of the solution of CEYE is equal to 887. It is clear that the makespan of the proposed algorithm of this paper is less than CEYE, so the sequence of the proposed method spends a fewer total operation time compared to CEYE.Case 3 of sub problem 1: In this case, the changeover time is considered equal to 50. Applying the proposed algorithm of this paper for solving the problem, the optimal/near optimal sequence of the inbound trucks is as 2-1-3 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:Truck15555444444433333333333Product43123111111131334323433The sequence of outbound trucks (continued):Truck3334444111111122222222Product3331111222222344144444In the above sequence, the first scheduled outbound truck is truck #1 that loads product type #4. According to lines l5 to l11 of Section 3.2.2, the first gene shows that truck #1 loads 12 product type #4. After loading of product type #4 by truck #1, truck #1 leaves the shipping dock and truck #5 enters the shipping dock to load its products. The second gene shows that truck #5 loads lot=10 product type #3; the third gene shows that truck #5 loads 13 product type #1. The forth gene shows that truck #5 loads 12 product type #2. The fifth gene shows that truck #5 loads the remained amount of product type #3 which is equal to 11. This procedure is continued until all the outbound trucks completely load their products.The obtained sequence by CEYE for the inbound trucks is 2-1-3 and for the outbound trucks is 5-3-1-4-2. The makespan of the solution of the proposed algorithm of this paper is equal to 905 which is less than the makespan of the solution of CEYE equal to 987. Therefore, it is clear that the proposed method of this paper is superior to CEYE.Sub problem 2: In this example, it is again assumed that there are three inbound trucks and five outbound trucks for delivering four product types but with the different quantity of loading/unloading products compared to sub problem 1.The quantity of products in inbound trucks is as follows according to the format inbound truck: [(product type, quantity).1: [(1, 41), (2, 48), (3, 39), (4, 33)]; 2: [(1, 42), (2, 50), (3, 36), (4, 31)]; 3: [(1, 44), (2, 47), (3, 39), (4, 33)].The quantity of products in outbound trucks is as follows with the same formatting of inbound trucks.1: [(2,12), (3,11), (4, 74)]; 2[(1, 94), (2, 13)]; 3[(1, 21), (3, 89), (4, 12)]; 4[(2, 109), (4, 11)]; 5[(1, 12), (2, 11), (3,14)].This problem is solved by the proposed algorithm of Section 3 for three cases. In the first case, the changeover time is considered equal to 10. In the second and third cases, the changeover time is considered equal to 30 and 50, respectively.Case 1 of sub problem 2: In the first case of sub problem 2, the changeover time is considered equal to 10. As a result of solving the problem by the proposed algorithm of Section 3, the optimal/near optimal sequence of the inbound trucks is as 1-2-3 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:Truck5554441133344433344411Product3122424433122231322244The sequence of outbound trucks (continued):Truck3333344111112222222222Product3343322443242111111111In the above sequence, the first scheduled outbound truck is truck #5 that loads product type #3, 1 and 2, respectively. With reference to lines l5 to l11 of Section 3.2.2, the first gene shows that truck #5 loads 14 product type #3; the second gene shows that truck #5 loads 12 product type #1, and the third gene shows that truck #5 loads 11 product type #2. After loading of product type #2 by truck #5 in the third gene, truck #5 leaves the shipping dock and truck #4 enters the shipping dock to load its products. This procedure is continued until all the outbound trucks completely load their products.In order to illustrate the performance of the proposed algorithm of this paper, the problem is also solved by CEYE. The obtained sequence by CEYE for the inbound trucks is 1-2-3 and for the outbound trucks is 5-4-3-2-1.The makespan by the proposed algorithm of this paper is equal to 693, while the makespan by CEYE is equal to 818. Therefore, since the makespan of the proposed algorithm is less than CEYE, the proposed algorithm is superior to the CEYE.Case 2 of sub problem 2. In the second case of sub problem 2, the changeover time is considered equal to 30. Applying the proposed algorithm of Section 3 for solving this problem, the optimal/near optimal sequence of the inbound trucks is as 2-1-3 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:Truck5554442233444441111111Product1322421133222224443442The sequence of outbound trucks (continued):Truck1122222222444333333333Product4412111111222333333411In the above sequence, the first scheduled outbound truck is truck #5 that loads product type #1, 3 and 2, respectively. With reference to lines l5 to l11 of Section 3.2.2, the first gene shows that truck #5 loads 12 product type #1; the second gene shows that truck #5 loads 14 product type #3, and the third gene shows that truck #5 loads 11 product type #2. After loading of product type #2 by truck #5 in the third gene, truck #5 leaves the shipping dock and truck #4 enters the shipping dock to load its products. This procedure is continued until all the outbound trucks completely load their products.In order to illustrate the appropriate performance of the proposed algorithm of this paper, this problem is also solved by CEYE. The obtained sequence by CEYE for the inbound trucks is 1-2-3 and for the outbound trucks is 5-4-3-2-1.The makespan by the proposed algorithm of this paper is equal to 823, while the makespan by CEYE is equal to 918. Since the makespan of the proposed algorithm is less than CEYE, the proposed algorithm is superior to CEYE.Case 3 of sub problem 2: In this case, the changeover time is considered equal to 50. Applying the proposed algorithm of this paper for solving the problem, the optimal/near optimal sequence of the inbound trucks is as 2-1-3 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:Truck5553333444444444333333Product1233431222222242331333The sequence of outbound trucks (continued):Truck3441111111112222222222Product3224444344241111111112In the above sequence, the first scheduled outbound truck is truck #5 that loads product type #1, 2 and 3, respectively. According to lines l5 to l11 of Section 3.2.2, the first gene shows that truck #5 loads 12 product type #1; the second gene shows that truck #5 loads 11 product type #2, and the third gene shows that truck #5 loads 14 product type #3. After loading of product type #3 by truck #5 in the third gene, truck #5 leaves the shipping dock and truck #3 enters the shipping dock to load its products. This procedure is continued until all the outbound trucks completely load their products.The obtained sequence by CEYE for the inbound trucks is 1-2-3 and for the outbound trucks is 5-4-3-2-1. The makespan by the solution of the proposed algorithm of this paper is equal to 931 which is less than the makespan by the solution of CEYE equal to 1018. Therefore, it is clear that the proposed method of this paper is superior to CEYE.Fig. 6demonstrates the trend of makespan for the obtained solutions of proposed method along 1000 iterations for sub problems 1 and 2.Sub problem 3: In this example, it is assumed that there are three inbound trucks and six outbound trucks for delivering five product types.The quantity of products in inbound trucks is as follows according to the format inbound truck: [(product type, quantity).1: [(1, 53), (2, 41), (3, 24), (4, 31), (5, 35)]; 2: [(1, 54), (2, 39), (3, 25), (4, 34), (5, 37)]; 3: [(1, 53), (2, 39), (3, 25), (4, 33), (5, 34)].The quantity of products in outbound trucks is as follows with the same formatting of inbound trucks.1: [(4, 75), (5, 14)]; 2: [(2, 81), (4, 12), (5, 18)]; 3: [(1, 12), (4, 11), (5, 74)]; 4: [(2, 14), (3, 21)]; 5: [(1, 108), (2, 13)]; 6: [(1, 40), (2, 11), (3, 53)].This problem is solved by the proposed algorithm of Section 3 for three cases. In the first case, the changeover time is considered equal to 10. In the second and third cases, the changeover time is considered equal to 30 and 50, respectively.Case 1 of sub problem 3: In the first case of sub problem 3, the changeover time is considered equal to 10. As a result of solving the problem by the proposed algorithm of Section 3, the optimal/near optimal sequence of the inbound trucks is as 3-1-2 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:Truck44425552211555555511116633Product32341112244111111244453355The sequence of outbound trucks (continued):Truck3333333522222221166666666Product5155545122222524433311211In the above sequence, the first scheduled outbound truck is truck #4 that loads product type #3, 2 and again 3, respectively. According to lines l5–l11 of Section 3.2.2, the first gene shows that truck #4 loads lot=10 product type #3; the second gene shows that truck #4 loads 14 product type #2, and the third gene shows that truck #4 loads 11 product type #3. After loading of product type #3 by truck #4 in the third gene, truck #4 leaves the shipping dock and truck #2 enters the shipping dock to load its products. This procedure is continued until all the outbound trucks completely load their products.The obtained sequence by CEYE for the inbound trucks is 3-1-2 and for the outbound trucks is 4-5-2-1-6-3. The makespan by the solution of the proposed algorithm of this paper is equal to 781 which is less than the makespan by the solution of CEYE equal to 931. Therefore, it is clear that the proposed method of this paper is superior to CEYE.Case 2 of sub problem 3: In the second case of sub problem 3, the changeover time is considered equal to 30. The problem is solved by the proposed algorithm of Section 3. The obtained sequence of inbound trucks is as 1-3-2 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:Truck44411155555555553333333111Product23344411211111111555555444The sequence of outbound trucks (continued):Truck5336666666666222222222211Product1542111133333222222224545In the above sequence, the first scheduled outbound truck is truck #4 that loads product type #2 and 3, respectively. With reference to lines l5–l11 of Section 3.2.2, the first gene shows that truck #4 loads 14 product type #2; the second gene shows that truck #4 loads lot=10 product type #3, and the third gene shows that truck #4 loads 11 product type #3. After loading of product type #3 by truck #4 in the third gene, truck #4 leaves the shipping dock and truck #1 enters the shipping dock to load its products. This procedure is continued until all the outbound trucks completely load their products.The obtained sequence by CEYE for the inbound trucks is 3-1-2 and for the outbound trucks is 4-5-2-1-6-3. The makespan by the solution of the proposed algorithm of this paper is equal to 950 which is less than the makespan by the solution of CEYE equal to 1051. Therefore, it is clear that the proposed method of this paper is superior to CEYE.Case 3 of sub problem 3: In this case, the changeover time is considered equal to 50. The problem is solved by the proposed algorithm of Section 3. The obtained sequence of inbound trucks is as 1-3-2 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:Truck44455555155555333333333222Product23321111411111155554555222The sequence of outbound trucks (continued):Truck2222222666666666651111111Product2222254211333331114544444In the above sequence, the first scheduled outbound truck is truck #4 that loads product type #2 and 3, respectively. According to lines l5–l11 of Section 3.2.2, the first gene shows that truck #4 loads 14 product type #2; the second gene shows that truck #4 loads lot=10 product type #3, and the third gene shows that truck #4 loads 11 product type #3. After loading of product type #3 by truck #4 in the third gene, truck #4 leaves the shipping dock and truck #5 enters the shipping dock to load its products. This procedure is continued until all the outbound trucks completely load their products.The obtained sequence by CEYE for the inbound trucks is 3-1-2 and for the outbound trucks is 4-5-2-1-6-3. The makespan by the solution of the proposed algorithm of this paper is equal to 1085 which is less than the makespan by the solution of CEYE equal to 1171. Therefore, it is obvious that the proposed method of this paper is superior to CEYE.Sub problem 4: In this example, it is again assumed that there are three inbound trucks and six outbound trucks for delivering five product types, but with the different quantity of loading/unloading products compared to sub problem 3.The quantity of products in inbound trucks is as follows according to the format inbound truck: [(product type, quantity).1: [(1, 31), (2, 28), (3, 50), (4, 30), (5, 47)]; 2: [(1, 33), (2, 31), (3, 52), (4, 31), (5, 50)]; 3: [(1, 33), (2, 35), (3, 49), (4, 30), (5, 49)].The quantity of products in outbound trucks is as follows with the same formatting of inbound trucks.1: [(1, 74), (2, 12), (3, 14)]; 2: [(1, 12), (2, 14), (5, 114)]; 3: [(2, 68), (3, 22), (5, 21)]; 4: [(3, 103), (4, 12)]; 5: [(1, 11), (4, 68), (5, 11)]; 6: [(3, 12), (4, 11)].This problem is solved by the proposed algorithm of Section 3 for three cases. In the first case, the changeover time is considered equal to 10. In the second and third cases, the changeover time is considered equal to 30 and 50, respectively.Case 1 of sub problem 4: In the first case of sub problem 4, the changeover time is considered equal to 10. As a result of solving the problem by the proposed algorithm of Section 3, the optimal/near optimal sequence of the inbound trucks is as 2-1-3 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:Truck662222121113322225555552444Product435525153113255515444145333The sequence of outbound trucks (continued):Truck44444455222111333344113333Product33333344555111532234122522In the above sequence, the first scheduled outbound truck is truck #6 that loads product type #4 and 3, respectively. With reference to lines l5 to l11 of Section 3.2.2, the first gene shows that truck #6 loads 11 product type #4; the second gene shows that truck #6 loads 12 product type #3. After loading of product type #3 by truck #6 in the second gene, truck #6 leaves the shipping dock and truck #2 enters the shipping dock to load its products. This procedure is continued until all the outbound trucks completely load their products.The obtained sequence by CEYE for the inbound trucks is 1-3-2 and for the outbound trucks is 6-2-4-1-3-5. The makespan by the solution of the proposed algorithm of this paper is equal to 839 which is less than the makespan by the solution of CEYE equal to 976. Therefore, it is obvious that the proposed method of this paper is superior to CEYE.Case 2 of sub problem 4: In the second case of sub problem 4, the changeover time is considered equal to 30. The problem is solved by the proposed algorithm of Section 3. The obtained sequence of inbound trucks is as 2-1-3 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:Truck444222222665522444444422222Product333555515434455334333325555The sequence of outbound trucks (continued):Truck45555553333333333111111111Product35444415523322222312111111In the above sequence, the first scheduled outbound truck is truck #4 that loads product type #3. According to lines l5 to l11 of Section 3.2.2, the first gene shows that truck #4 loads lot=10 product type #3; the second gene shows that truck #4 loads lot=10 product type #3; the third gene shows that truck #4 loads lot=10 product type #3. It should be noted that the outbound truck #4 should load 103 product type #3. Therefore, this truck loads 30 product type #3 in the first, second and third gene of sequence, and it loads the remained amount of product type #3 in the other genes of the sequence. After loading of product type #3 by truck #4 in the third gene, truck #4 leaves the shipping dock and truck #2 enters the shipping dock to load its products. This procedure is continued until all the outbound trucks completely load their products.The obtained sequence by CEYE for the inbound trucks is 2-1-3 and for the outbound trucks is 6-2-4-1-3-5. The makespan by the solution of the proposed algorithm of this paper is equal to 979 which is less than the makespan by the solution of CEYE equal to 1096. Therefore, it is clear that the proposed method of this paper is superior to CEYE.Case 3 of sub problem 4: In this case, the changeover time is considered equal to 50. The problem is solved by the proposed algorithm of Section 3. The obtained sequence of inbound trucks is as 3-1-2 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:Truck662222442222222111111111333Product341255435555555213111111523The sequence of outbound trucks (continued):Truck33333332255555555444444444Product22232525544444415333333333In the above sequence, the first scheduled outbound truck is truck #6 that loads product type #3 and 4, respectively. With reference to lines l5–l11 of Section 3.2.2, the first gene shows that truck #6 loads 12 product type #3; the second gene shows that truck #6 loads 11 product type #4. After loading of product type #4 by truck #6 in the second gene, truck #6 leaves the shipping dock and truck #2 enters the shipping dock to load its products. This procedure is continued until all the outbound trucks completely load their products.The obtained sequence by CEYE for the inbound trucks is 2-1-3 and for the outbound trucks is 6-2-4-1-3-5. The makespan by the solution of the proposed algorithm of this paper is equal to 1122 which is less than the makespan by the solution of CEYE equal to 1216. Therefore, it is obvious that the proposed method of this paper is superior to CEYE.Fig. 7demonstrates the trend of makespan for the obtained solutions of proposed method along 1000 iterations for sub problems 3 and 4.Sub problem 5: In this example, it is assumed that there are five inbound trucks and four outbound trucks for delivering six product types.The quantity of products in inbound trucks is as follows according to the format inbound truck: [(product type, quantity).1: [(1, 11), (2, 12), (3, 12), (5, 10), (6, 13)]; 2: [(1, 12), (2, 14), (3, 16), (4, 15), (5, 10), (6, 12)]; 3: [(1, 10), (2, 11), (3, 15), (5, 12), (6, 18)]; 4: [(1, 13), (2, 15), (3, 17), (4, 25), (5, 10), (6, 11)]; 5: [(1, 11), (2, 14), (3, 18), (4, 11), (5, 13)].The quantity of products in outbound trucks is as follows with the same formatting of inbound trucks.1: [(1, 57), (4, 12), (6, 12)]; 2: [(2, 66), (4, 12), (6, 14)]; 3: [(4, 14), (5, 55), (6, 13)]; 4: [(3, 78), (4, 13), (6, 15)].This problem is solved by the proposed algorithm of Section 3 for three cases. In the first case, the changeover time is considered equal to 10. In the second and third cases, the changeover time is considered equal to 30 and 50, respectively.Case 1 of sub problem 5: In the first case of sub problem 5, the changeover time is considered equal to 10. As a result of solving the problem by the proposed algorithm of Section 3, the optimal/near optimal sequence of the inbound trucks is as 3-2-5-1-4 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:Truck3132221444442111Product5162264333342111The sequence of outbound trucks (continued):Truck122444433333122Product622333655455124In the above sequence, the first scheduled outbound truck is truck #3 that loads product type #5. With reference to lines l5 to l11 of Section 3.2.2, the first gene shows that truck #3 loads lot=10 product type #5. It should be noted that the outbound truck #3 should load 55 product type #5. Therefore, this truck loads 10 product type #5 in the first gene, and it loads the remained amount of product type #5 in the other genes of the sequence. After loading of product type #5 by truck #3 in the first gene, truck #3 leaves the shipping dock and truck #1 enters the shipping dock to load its products. This procedure is continued until all the outbound trucks completely load their products.The obtained sequence by CEYE for the inbound trucks is 2-3-1-5-4 and for the outbound trucks is 4-3-2-1. The makespan by the solution of the proposed algorithm of this paper is equal to 588 which is less than the makespan by the solution of CEYE equal to 712. Therefore, it is clear that the proposed method of this paper is superior to CEYE.Case 2 of sub problem 5: In the second case of sub problem 5, the changeover time is considered equal to 30. The problem is solved by the proposed algorithm of Section 3. The obtained sequence of inbound trucks is as 1-3-2-5-4 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:Truck1122133344444442Product6122155534633334The sequence of outbound trucks (continued):Truck222223333441111Product622224556331114In the above sequence, the first scheduled outbound truck is truck #1 that loads product type #6 and 1, respectively. With reference to lines l5–l11 of Section 3.2.2, the first gene shows that truck #1 loads 12 product type #6; the second gene shows that truck #1 loads lot=10 product type #1. It should be noted that the outbound truck #1 should load 57 product type #1. Therefore, this truck loads 10 product type #1 in the second gene, and it loads the remained amount of product type #1 in the other genes of the sequence. After loading of product type #1 by truck #1 in the second gene, truck #1 leaves the shipping dock and truck #2 enters the shipping dock to load its products. This procedure is continued until all the outbound trucks completely load their products.The obtained sequence by CEYE for the inbound trucks is 5-3-2-1-4 and for the outbound trucks is 4-3-2-1. The makespan by the solution of the proposed algorithm of this paper is equal to 725 which is less than the makespan by the solution of CEYE equal to 852. Therefore, it is clear that the proposed method of this paper is superior to CEYE.Case 3 of sub problem 5: In this case, the changeover time is considered equal to 50. The problem is solved by the proposed algorithm of Section 3. The obtained sequence of inbound trucks is as 3-1-2-5-4 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:Truck2322333444444442Product2626555333634332The sequence of outbound trucks (continued):Truck222233341111111Product422255434111116In the above sequence, the first scheduled outbound truck is truck #2 that loads product type #2. With reference to lines l5 to l11 of Section 3.2.2, the first gene shows that truck #2 loads lot=10 product type #2. It should be noted that the outbound truck #2 should load 66 product type #2. Therefore, this truck loads 10 product type #2 in the first gene, and it loads the remained amount of product type #2 in the other genes of the sequence. After loading of product type #2 by truck #2 in the first gene, truck #2 leaves the shipping dock and truck #3 enters the shipping dock to load its products. This procedure is continued until all the outbound trucks completely load their products.The obtained sequence by CEYE for the inbound trucks is 5-3-2-1-4 and for the outbound trucks is 4-3-2-1. The makespan by the solution of the proposed algorithm of this paper is equal to 873 which is less than the makespan by the solution of CEYE equal to 992. Therefore, it is obvious that the proposed method of this paper is superior to CEYE.Sub problem 6: In this example, it is again assumed that there are five inbound trucks and four outbound trucks for delivering six product types but with the different quantity of loading/unloading products compared to sub problem 5.The quantity of products in inbound trucks is as follows according to the format inbound truck: [(product type, quantity).1: [(1, 20), (2, 12), (3, 15), (4, 8), (5, 11), (6, 21)]; 2: [(1, 16), (2, 11), (3, 14), (4, 12), (5, 13), (6, 11)]; 3: [(1, 19), (3, 15), (4, 11), (5, 12), (6, 9)]; 4: [(1, 14), (2, 15), (3, 16), (4, 11), (5, 14)]; 5: [(1, 15), (2, 11), (3, 15), (4, 11), (5, 13)].The quantity of products in outbound trucks is as follows with the same formatting of inbound trucks.1: [(2, 10), (3, 63), (6, 12)]; 2: [(2, 12), (5, 52), (6, 14)]; 3: [(1, 73), (2, 14), (3, 12), (6, 15)]; 4: [(1, 11), (2, 13), (4, 53), (5, 11)].This problem is solved by the proposed algorithm of Section 3 for three cases. In the first case, the changeover time is considered equal to 10. In the second and third cases, the changeover time is considered equal to 30 and 50, respectively.Case 1 of sub problem 6: In the first case of sub problem 6, the changeover time is considered equal to 10. As a result of solving the problem by the proposed algorithm of Section 3, the optimal/near optimal sequence of the inbound trucks is as 4-5-3-2-1 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:Product44321114222433333Truck41253334525411113The sequence of outbound trucks (continued):Product3222333444411111Truck1565161454233326In the above sequence, the first scheduled outbound truck is truck #4 that loads product type #4 and 1, respectively. With reference to lines l5 to l11 of Section 3.2.2, the first gene shows that truck #4 loads lot=10 product type #4. It should be noted that the outbound truck #4 should load 53 product type #4. Therefore, this truck loads 10 product type #4 in the first gene, and it loads the remained amount of product type #4 in the other genes of the sequence. The second gene shows that truck #4 loads 11 product type #1. After loading of product type #1 by truck #4 in the second gene, truck #4 leaves the shipping dock and truck #3 enters the shipping dock to load its products. This procedure is continued until all the outbound trucks completely load their products.The obtained sequence by CEYE for the inbound trucks is 3-4-5-2-1 and for the outbound trucks is 2-4-1-3. The makespan by the solution of the proposed algorithm of this paper is equal to 575 which is less than the makespan by the solution of CEYE equal to 666. Therefore, it is clear that the proposed method of this paper is superior to CEYE.Case 2 of sub problem 6: In the second case of sub problem 6, the changeover time is considered equal to 30. The problem is solved by the proposed algorithm of Section 3. The obtained sequence of inbound trucks is as 5-3-2-4-1 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:Truck11311223333222223Product32133551311625551The sequence of outbound trucks (continued):Truck3333111144444444Product1261333645444421In the above sequence, the first scheduled outbound truck is truck #1 that loads product type #3 and 2, respectively. With reference to lines l5–l11 of Section 3.2.2, the first gene shows that truck #1 loads lot=10 product type #3. It should be noted that the outbound truck #1 should load 63 product type #3. Therefore, this truck loads 10 product type #3 in the first gene, and it loads the remained amount of product type #3 in the other genes of the sequence. The second gene shows that truck #1 loads 10 product type #2. After loading of product type #2 by truck #1 in the second gene, truck #1 leaves the shipping dock and truck #3 enters the shipping dock to load its products. This procedure is continued until all the outbound trucks completely load their products.The obtained sequence by CEYE for the inbound trucks is 5-4-3-2-1 and for the outbound trucks is 2-1-4-3. The makespan by the solution of the proposed algorithm of this paper is equal to 713 which is less than the makespan by the solution of CEYE equal to 786. Therefore, it is clear that the proposed method of this paper is superior to CEYE.Case 3 of sub problem 6: In this case, the changeover time is considered equal to 50. The problem is solved by the proposed algorithm of Section 3. The obtained sequence of inbound trucks is as 4-3-2-5-1 and the sequence of outbound trucks is as follows:The sequence of outbound trucks:3433333222222244434211115552655414The sequence of outbound trucks (continued):44443333111111114254111623336333In the above sequence, the first scheduled outbound truck is truck #3 that loads product type #3. With reference to lines l5–l11 of Section 3.2.2, the first gene shows that truck #3 loads 12 product type #3. The second gene shows that truck #4 loads lot=10 product type #4. It should be noted that the outbound truck #4 should load 53 product type #4. Therefore, this truck loads 10 product type #4 in the second gene, and it loads the remained amount of product type #4 in the other genes of the sequence. After loading of product type #4 by truck #4 in the second gene, truck #4 leaves the shipping dock and truck #3 enters the shipping dock to load some part of its products. This procedure is continued until all the outbound trucks completely load their products.The obtained sequence by CEYE for the inbound trucks is 4-3-5-2-1 and for the outbound trucks is 2-3-4-1. The makespan by the solution of the proposed algorithm of this paper is equal to 837 which is less than the makespan by the solution of CEYE equal to 906. Therefore, it is clear that the proposed method of this paper is superior to CEYE.Fig. 8demonstrates the trend of makespan for the obtained solutions of proposed method along 1000 iterations for sub problems 5 and 6.Fig. 9.In Sections 4.1–4.3, various examples are provided with different number of inbound trucks, outbound trucks and product types. In all the provided examples, the merit of the proposed algorithm of this paper is discussed. This section summarizes the results of the provided numerical examples. Table 1indicates the brief results of numerical examples solved by the proposed algorithm of this paper and CEYE. Since GA is a probabilistic algorithm, in order to perform a more precise analysis, each example is executed 50 times, and results are reported in Table 1. It should be noted that, the columns MOP and CToP illustrate the best makespan and related CPU time (in minutes) in 50 executions. Moreover, algorithms run on a PC with Core i5 CPU (2.6GHz) and 4GB of RAM.It is clear that the makespan of the proposed method is less than CEYE in all 18 examples, but the CPU time of CEYE is less than the proposed method in all 18 examples as expected. It should be noted that CEYE is inefficient for solving medium to large size problems because of time complexity requirement.The results show that the maximum deviation of the makespan is equal to 21.1% for examples with changeover time equal to 10, and this index is equal to 17.5% and 13.6% for examples with changeover time equal to 30 and 50, respectively. Moreover, the average deviation of the makespan is equal to 18.0% for examples with changeover time equal to 10, and this index is equal to 12.3% and 9.4% for examples with changeover time equal to 30 and 50, respectively. Therefore, the numerical results show that the more the changeover time is, the less the deviation of two methods will be, as expected. In other words, the superiority of the proposed method is more for the lower value of changeover time. This is expected because the proposed method of this paper allows the outbound trucks to enter and leave the dock repeatedly. Therefore, for the lower values of changeover time, the flexibility of the proposed method is more to fill the idle time of outbound trucks. As a result, despite of the superiority of the proposed method to CEYE in all 18 examples, this superiority is stronger for lower value of changeover time. Therefore, if the cross docking system diminishes the changeover time of trucks, it can better use the advantage of the proposed algorithm of this paper to decrease the makespan.

@&#CONCLUSIONS@&#
