@&#MAIN-TITLE@&#
The simpler GMRES method combined with finite volume method for simulating viscoelastic flows on triangular grid

@&#HIGHLIGHTS@&#
SGMRES(m) integrated with FVM to simulate the viscoelastic fluid flows.Oldroyd-B flow in a planar channel with SGMRES(m) fitting analytical flow.Oldroyd-B flow past a circular cylinder with SGMRES(m) fitting empirical flow.Example applications for small m values being optimal for SGMRES(m) and GMRES(m).Example applications showing that SGMRES(m) could be faster than GMRES(m).

@&#KEYPHRASES@&#
Modeling,Navier–Stokes,Oldroyd-B,SGMRES,Finite volume,Triangular grid,

@&#ABSTRACT@&#
An efficient solver integrating the restarted simpler generalized minimal residual method (SGMRES(m)) with finite volume method (FVM) on triangular grid is developed to simulate the viscoelastic fluid flows. In particular, the SGMRES(m) solver is used to solve the large-scale sparse linear systems, which arise from the course of FVM on triangular grid for modeling the Newtonian and the viscoelastic fluid flows. To examine the performance of the solver for the nonlinear flow equations of viscoelastic fluids, we consider two types of numerical tests: the Newtonian flow past a circular cylinder, and the Oldroyd-B fluid flow in a planar channel and past a circular cylinder. It is shown that the numerical results obtained by the SGMRES(m) are consistent with the analytical solutions or empirical values. By comparing CPU time of different solvers, we find our solver is a highly efficient one for solving the flow equations of viscoelastic fluids.

@&#INTRODUCTION@&#
Viscoelastic flow is widely studied in various fields, such as plastics [1,2], cosmetics [3], food industries [3,4] and blood [5,6]. It is usually governed by the continuity equations, the momentum equations and the constitutive equations (see Section 2). The behavior of viscoelastic fluids is different from that of the Newtonian fluids in ways that are often complex and striking [7,8]. The flow equations of viscoelastic fluids are more difficult to solve than the flow equations of Newtonian fluids in that the stress term in the momentum equation is strongly coupled with the velocity field, thus slowing the convergence speed [9]. What’s more, the increase of unknowns due to the additional variables adds some difficulties to resolve the flow equations of viscoelastic fluids [10].A great many of numerical methods have been developed to accurately predict flow behavior of viscoelastic fluids by employing rheological models. Finite difference method (FDM) [11,12], finite element method (FEM) [13] and finite volume method (FVM) [14,15] have been used in the discretization of the governing equations. FDM is generally restricted to simple geometries [16]. FVM is advantageous both in saving computer space and in numerical stability compared to FEM [17].The unstructured FVM for viscoelastic flow was first published in [17], which used non-structured techniques to simulate a viscoelastic fluid in eccentric bearings. A collocated FVM for non-orthogonal block structured grid with curvilinear co-ordinates has been developed in [18]. The cell-centered FVM for the viscoelastic flow was presented in [19], in which the velocity components, pressure, shear stresses and normal stresses were all stored at the center of the grid.The cell-centered FVM on triangular grid [19] is employed to model the viscoelastic fluid flows. A set of large sparse, indefinite linear systems are generated in the discretization of the nonlinear governing equations, including the continuity equation, the pressure-correction equation and the constitutive equation. In the earlier works [20,21], the Gauss–Seidel method is generally used to solve the resulting linear systems. Alternatively, the GMRES(m) method has also been employed to solve the resulting linear systems due to the nonlinear problems [22,23]. Sometimes, the alternating direction implicit (ADI) algorithm is used to solve the resulting linear systems due to the pressure-correction equation [16], but it is based on structured grid. The conjugate-gradient (CG) method has been used to solve the resulting linear systems due to the pressure equation while the BiCGSTAB has been used to solve the resulting linear systems due to the constitutive equation [24]. Recently, performances of the Newton-BiCGSTAB solver and the Newton-GMRES solver have been studied concerning the linear systems due to power-law non-Newtonian fluid flow [9], revealing that ILU(1)/Newton-GMRES is the most efficient. Actually, both of the Gauss–Seidel and GMRES(m) are still popular to solve the resulting linear systems due to nonlinear problems [25,26]. However, the convergence speed of the two iterative solvers is generally slow when they are utilized to deal with the resulting linear systems due to nonlinear problems.By shifting the Arnoldi process of GMRES(m) to begin withAr0, instead ofr0, the SGMRES(m) method free from the upper Hessenberg factorization is obtained [27]. Being efficient in solving large-scale sparse linear systems, the SGMRES(m) has been studied by many researchers. In 2004, Boojhawon & Bhuruth [28] presented an augmented version of SGMRES(m) requiring less calculation than that of the augmented GMRES(m). Recently, Lin et al. [29] have proposed an effective SGMRES(m) with deflated restarting, which requires less matrix–vector products per restart cycle.However, little attention has been paid to the SGMRES(m) coupled with FVM on triangular grid for solving the incompressible flow problems, especially the viscoelastic fluid flow. In this paper, we integrate the SGMRES(m) with FVM on triangular grid to solve the flow equations of viscoelastic fluids. To examine the actual performance of the presented solver, we apply it to a simple example-the Newtonian flow past a circular cylinder at first. Then we deal with the flow equations of viscoelastic fluids with our solver. In particular, we consider numerical tests concerning the Oldroyd-B fluid flow in a planar channel and past a circular cylinder.The paper is organized as follows. The description of the governing equations and numerical method are presented in Sections 2 and 3, respectively. In Section 4, the proposed method is applied to the Newtonian flow past a circular cylinder, and the Oldroyd-B fluid flow in a planar channel and past a circular cylinder, respectively. In the last section, we give our conclusions.In the 2D frame, we consider an incompressible flow of a Newtonian fluid. The movement of the fluid is governed by the mass conservation and the Newton’s second law. The governing flow equation resulting from the application of the mass conservation is called the continuity equation and that resulting from the application of the Newton’s second law is named the momentum equation. In dimensionless form, the continuity and the momentum equations are written as follows:(1)∇·u=0,(2)Re∇·uu=-∇p+Δu,whereuis the velocity vector, p the pressure, and Re the Reynolds number defined byρULη(with U being the characteristic velocity, L the characteristic length, ρ the fluid density and η the dynamic viscosity).Now, we consider an incompressible flow of a viscoelastic fluid. The movement of this kind of fluid is also governed by the mass conservation and the Newton’s second law, of course, while the fluid behavior is described by the Oldroyd-B constitutive equation. In dimensionless form, the continuity and the momentum equations are expressed as follows:(3)∇·u=0,(4)Re∂u∂t+∇·uu=∇·β∇u+-∇p+∇·τ1.While the constitutive equation for the Oldroyd-B fluid is(5)We∂τ1∂t+∇·uτ1=21-βD+We∇uT·τ1+τ1·∇u-τ1,whereτ1is the viscoelastic component, t the time,D=12∇u+∇uT,Wethe Weissenberg number defined byλ1UL, the parameter β defined byλ2λ1(withλ1being the retardation time,λ2the relaxation time), and the definitions ofu,Re,p,U,Lare the same as that in subsection 2.1.The governing Eqs. (3)–(5) are expressed in general conservative form(6)∂δφ∂t+∇·θuφ=∇·Γφ∇φ+Sφ,where δ, θ and Γφare constants and the functions φ and Sφare defined in Table 1. The terms in the Eq. (6) from left to right represent the transient, convective, diffusive and source contributions, respectively. The Eqs. (1) and (2) are dealt with similarly.We employ the cell centered finite volume technique on unstructured meshes to tackle the flow equations, where velocity components, pressure, shear stresses and normal stresses are all stored at the centre of the control volume. Some relevant derivations are sketched as follows.①We divide the Eq. (6) byΔtand engage the divergence theorem for the convection and diffusion terms leading to the equation(7)1Δt∫tδ∫V∂φ∂tdVdt+∑j=13∫sjθuφ-Γφ∇φ·dS=∫VSφdV.With the linear approximation, we turn the transient term to(8)1Δt∫tδ∫V∂φ∂tdVdt≃VP0δφP0-δ0φP00Δt,where the subscriptP0means the average value in the center of the control volume,VP0the volume of the control volume and the superscript 0 represents the value at the previous time step.Through the usage of DCQ-QUICK scheme [30], the convective term is changed as:(9)∑j=13∫sjθuφ·dS=∑j=13maxFj,0φP0+minFj,0φPj+FjφfQ-QUICK-φfFUS0,whereFj=θjAju·nj,Ajis the area of the facej,u·njthe normal component of velocity at the facej,Pjthe average value in the center of the neighboring cellj,φfQ-QUICKthe value derived from an interpolation using a Q-QUICKscheme,φfFUSthe value derived from an interpolation using a FUS scheme.Using Green Theorem [31], we turn the diffusive term to:(10)∑j=13∫sjΓφ∇φ·dS=∑j=13ΓφφPj-φP0sj+φg-φedj2Vf·sj,wheresj=Ajlj,Ajis the area of the face j,ljthe vector along the direction of the facej,djthe vectorP0Pj,Vfthe volume of the control volumegP0ePj(with g and e being the endpoints of the facej).Using a linear approximation, the source term is changed as(11)∫VSφdV=SC-SP0φP0VP0,whereSCis the constant part of the source term,SP0the coefficient of φ.Taking the Eqs. (8)–(11) into Eq. (7), we get(12)a0φP0=∑j=13ajφPj+b0,whereaj=-minFj,0+Γφsj·sj2Vf,a0=∑j=13aj+δVP0Δt+SP0VP0,b0=-∑j=13FjφjQ-QUICK-φjFUS0-Γφφg-φedj2Vf·sj+δ0φP00ΔtVP0+SCVP0.We adopt relaxation techniques to prevent the divergence of the iteration. Then, the actual equation to be solved is modified as:(13)a0αφφP0=∑j=13ajφPj+b0+1-αφa0αφφP00,whereαφis the relaxation factor of φ.The coefficient matrix of Eq. (13) takes a form ofa11∗∗a22∗∗⋱⋱∗∗aii∗⋱⋱∗∗∗aNNwhere the symbol “∗” stands for the nonzero negative value, withaii>0. In particular, the coefficient matrix possesses at most four nonzero values on each row.The velocity field, improved from the pressure-correctionp′, must satisfy the continuity equation. By the concept of momentum interpolation due to Rhie and Chou [32], we define the revised value of interface velocity as:(14)uj′=-12Va0uP0+Va0uPjpPj′-pP0′|dj|Sj|Sj|,whereSj=Ajn,Ajis the area of the facej,nthe outward normal unit vector.Then, we obtain pressure-correction equation(15)a0ppP0′=∑j=13ajppPj′+b0p,whereajp=12Va0uP0+Va0uPj|Sj||dj|,a0p=∑j=13ajp,b0p=-∑j=13Fj.The shape of the coefficient matrix of the Eq. (15) is the same as that of the Eq. (13).With the revised value of pressure being obtained, we update pressure and velocity as follows:(16)pP0=pP0∗+αppP0′,(17)uP0=uP0∗-∑j=13pj′Sja0u,whereαpis the relaxation factor ofp,uP0∗the value obtained in Eq. (13),pP0∗the value at the previous iterative step.The governing equations are solved by the FVM on unstructured non-staggered grid. Then, the SIMPLE algorithm [33] on the collocated grid is employed to settle the pressure–velocity decoupling problem. The flow chart to the SIMPLE algorithm is given as below.In each iteration of the nonlinear process, the systems in Step 1 and Step 4 corresponding to Eq. (13) and that Step 2 corresponding to Eq. (15) are large-scale, sparse and irregular linear systems. Effective and efficient method for solving such equations still faces many challenges. We introduce the SGMRES(m) to solve these equations, which were previously solved with the Gauss–Seidel iteration and the GMRES(m) method.Considering the linear equation(18)Ax=b,we define K and L as m-dimensional subspaces ofRn, respectively. Giving an initial guessx0to Eq. (18), we seek the approximation from the affine spacex0+K. The initial residual vectorr0is defined asr0=b-Ax0.In the SGMRES(m) method, the m-dimensional subspace K is the Krylov subspaceKm=spanr0,Ar0,A2r0,…,Am-1r0.Then, we find an approximate solutionxmin the affine spacex0+Km=x0+spanr0,Ar0,A2r0,…,Am-1r0. In the iteration process,xmsatisfies certain orthogonal conditions, such as Petro-Galerkin condition:b-Axm⊥L, whereL=AKmis a m-dimensional subspace. We defineVm=v1,…,vm∈Rn×m, where the columns of the matrixVmform the standard orthogonal basis of L, withv1=Ar0‖Ar0‖andv2,…,vmbeing obtained from the Arnoldi process. Then,Zm=r0‖r0‖,Vm-1makes up a basis ofKm. In particular, we haveAZm=VmRm, whereRmis anm×mnonsingular and upper triangular matrix.By applying the conditions(19)rm∈r0+AKm=r0+RVm,andrm⊥RVm,we acquire(20)rm=I-VmVmTr0,orrm=rm-1-αmvm,αm≡〈r0,vm〉.The corresponding approximate solution is(21)xm=x0+Zmtm,wheretmcan be determined by the following relation as(22)rm=r0-AZmtm=r0-VmRmtm,or(23)Rmtm=VmTr0=α1,…,αm.Similar to the restarted GMRES [34], we have the SGMRES(m), in which the SGMRES is restarted once the Krylov subspace reaches dimension m, and the current approximate solution becomes the new initial guess for the next m iterations.Concerning our non-linear problem, as illustrated in Fig. 1, we need to solve three large-scale, sparse and irregular linear systems in Step 1, Step 2 and Step 4 in each iteration. The coefficient matrices and the right-hand sides in Step 1 and Step 4 are determined by Eqs. (12) and (13), while the linear system in Step 2 are determined by Eq. (15). Once the coefficient matrices and right-hand sides are determined, the equations in Step 1, Step 2 and Step 4 become linear systems which can be solved with the SGMRES(m) in each iteration, while they were previously solved with the Gauss–Seidel iteration and the GMRES(m) method.To examine the actual performance of the presented solver for the flow equations of viscoelastic fluids, we test our code at first on a simple example model, namely the Newtonian flow. Then we consider its performance on the flow of a viscoelastic fluid known as the Oldroyd-B fluid. The flow of an Oldroyd-B fluid through a planar channel has an analytical solution, while the flow of an Oldroyd-B fluid past a circular cylinder is difficult to model.The Gauss–Seidel iterative, the GMRES(m) method and the SGMRES(m) method are applied to solve the resulting linear systems, respectively. The efficiency of the three methods will be compared, and the performance concerning different problem sizes will be compared in 4.2.1 especially.All the simulations presented are based on C language. The CPU timing information of both the Newtonian flow modeled in 4.1 and the flow of an Oldroyd-B fluid through a planar channel modeled in 4.2.1 was measured on a common desktop computer (CPU speed 2.8GHz; RAM 2GB) for the model problem. The test of the Oldroyd-B fluid past a circular cylinder modeled in 4.2.2 was performed on a standard PC (CPU speed 3.2GHz; RAM 4GB).In this section, we solve the discrete problem due to the momentum and the pressure-correction equations of the Newtonian flow past a circular cylinder on triangular non-staggered grid. Flow past a circular cylinder is so widely used in real projects that it has been concerned by researchers all the time as a representative scenario. This problem has also been employed as a benchmark to verify the effectiveness of new numerical methods on triangular grid. We simulate the Newtonian flow past a cylinder in a channel (Fig. 2). The channel has the length of 24, the width of 8, and the center of the circular cylinder is (5.5, 4.0), with radius of 0.5. It has 9873 cells, giving a total of 29,619 unknowns. The boundary conditions are:(1)Inlet boundary conditions:u=1-y-42/16,v=0,∂p/∂n=0.Solid boundary conditions:u=0,v=0,∂p/∂n=0.Outlet boundary conditions:∂u∂x=0,∂v∂x=0,p=0.The simulations are carried out on the meshes shown in Fig. 3, which consist of unstructured non-orthogonal triangular elements. The triangular grid is created by the EASYMESH software [35] based on the Delaunay method (same as below).Fig. 4displays a comparison of the drag coefficient between the SGMRES(m) solution and the benchmark solution due to Stokes and Clift [36], indicating that the numerical solutions due to the SGMRES(m) solver are reliable. The accuracy of the results proves the effectiveness of our algorithm in dealing with triangular meshes for the Newtonian flow past a circular cylinder.Table 2shows the relevant CPU timing information and the number of iterations of the SIMPLE algorithm when the two resulting linear systems were solved with SGMRES(m), GMRES(m) and Gauss–Seidel solver, respectively, with m=3 andε=10-6. We set Krylov dimension m to be 3 (discussed below). The setting ofε=10-6is typical for iterative solvers [24,37–39]. From Table 2, we find the number of iterations of the SGMRES(m) is smaller than that of the GMRES(m), thus leading to the assembling time of the SGMRES(m) shorter than that of the GMRES(m). Though the number of iterations of the SGMRES(m) is more than that of Gauss–Seidel, the reduced solving time of the SGMRES(m) compared with Gauss–Seidel is more significant than the increased assembling time of Gauss–Seidel compared with the SGMRES(m). In particular, the solving time of the SGMRES(m) is the shortest.Fig. 5shows a comparison of convergence histories of the SGMRES(m), GMRES(m) and Gauss–Seidel solvers, respectively. The SGMRES(m) method is more than 2 times faster than the GMRES(m) method, or about 4 times faster than the Gauss–Seidel method. The performance of the SGMRES(m) method is obviously the best.It should be noted that, like the GMRES(m) solver, the setting of the Krylov dimension m may have significant impact on the performance of the SGMRES(m) solver when applied to specific problems [40–42]. Unfortunately, there is no theoretical guide on determining a proper or optimal m value for the GMRES-like solvers [43]. Generally, the typical settings of m=20 or 30 are often used for the restarted GMRES-like solvers in practical applications [39,44,45]. However, it seems desirable to determine a nearly optimal setting for the Krylov dimension m by virtue of trials, so that the concerned iterative solvers may achieve the best performance under the specific circumstance [43]. To this end, we set mto be 1, 2, 3, 4, 5, 10, 20 and 30 respectively for the SGMRES(m) solver, withε=10-6, and measuring the corresponding CPU time of the whole SIMPLE algorithm consumed for solving the flow equations, with Re=5, 20, 40, respectively; see Fig. 6(a). It is revealed that the CPU time of the whole program is minimized with SGMRES(3) for the three concerned cases of Reynolds number. This is remarkable in that a small m value is favorable in saving the run time memory. Clearly, the typical settings of m=20 or 30 for the GMRES(m)-like solvers are far from being optimal to the specific problem under consideration. Indeed, to our problem, the GMRES(m) solver also exhibits the best performance with a small m value of 2 or 3; see Fig. 6(b).In this section, we solve the flow equations composed of the momentum, the pressure-correction and the constitutive equations for the Oldroyd-B fluid (with β=1/9) in a planar channel, discretized on the triangular non-staggered grid. The planar channel has a channel length of 18 and width of 8. Two meshes (M1 and M2) are considered in the experiments. M1 has 5902 cells, giving a total of 35,412 unknowns; M2 has 8342 cells, giving a total of 50,052 unknowns. The boundary conditions are:(1)Inlet boundary conditions:u=3128-y2+8y,v=0,∂p/∂n=0.Solid boundary conditions:u=0,v=0,∂p/∂n=0.Outlet boundary conditions:∂u∂x=0,∂v∂x=0,p=0.When Re=0, the analytical solutions for stresses are [19]τ1xx=2We1-β∂u∂y2,τ1xy=1-β∂u∂y,through which we can quantitatively verify the accuracy of the numerical solutions by our code. Fig. 7displays the numerical results with the SGMRES(m) solver against the analytical stressesτ1xxandτ1xyat the central line and x=5 of the channel. Forτ1xx, it is shown that the numerical solutions are reliable for increasing We values. While relating toτ1xy, solutions are less affected by the larger We values according to the figure. The results are also consistent with those in the literature [19]. These results demonstrate the effectiveness of the proposed algorithm in dealing with the viscoelastic flow in a planar channel using triangular meshes.Besides the effectiveness in dealing with the viscoelastic flow in a planar channel, the proposed SGMRES(m) also produces better performance on the CPU time and the convergence speed compared with GMRES(m) and Gauss–Seidel.Table 3shows the CPU timing information and the number of iterations for the SIMPLE algorithm with the three resulting linear systems being solved with SGMRES(1), GMRES(2) and Gauss–Seidel solver withε=10-6on the two meshes, respectively, revealing that the SGMRES(1) solver converged to the solution with a minimum number of iterations for most of the cases, thus demanding the minimum assembling time. We also find that the solving time of the SGMRES(1) is the shortest among the solvers. All of the results show that the SGMRES(1) solver is the most efficient among the three solvers. (The choice of the Krylov dimension is accounted below). Another interesting finding of the study is that the ratio of the degrees of freedom due to the two meshes (M2 to M1) is about 1.4 and this ratio is approximately reflected in the iterations in Table 3.Fig. 8shows the convergence performances of the SGMRES(m), GMRES(m) and Gauss–Seidel solvers on different meshes, respectively. These results endorse our previous discussions. The rate of convergence of the SGMRES(m) is approximately linear. Comparing the convergence time for We=0.1, 1, 2, 3, we find that the convergence speed of the SGMRES(m) method is about 1.5–2 times faster than the GMRES(m) method, or about 2.5–3.5 times faster than the Gauss–Seidel method.As before, the nearly optimal m values used in the runs above are determined by systematic trails on the various specific cases of our problem; see Fig. 9. We find that the influence of m on CPU time becomes less significant when m is smaller than 5. It seems that the SGMRES(m) solver achieves the best performance on both the meshes by setting m=1 or 2, since it does not increase too much workspace and saves more time compared with m=3, 4, 5; see Fig. 9(a, b). In addition, the performance of the SGMRES(m) solver seems to be less affected by the larger We values on the two meshes, especially when the m values are small. For the purpose of comparison, we have conducted similar trails for the GMRES(m) solver, as shown in Fig. 9(c, d). For the GMRES(m) solver, it achieves the best performance on both the meshes by setting m=2. It should be noted that the GMRES(1) solver is divergent for all the cases tested. Again, our results demonstrate that the typical settings of the krylov dimension could be far from being optimal for specific problems.In this section, we solve the flow equations discretized from the momentum, the pressure-correction and the constitutive equations for the Oldroyd-B fluid withβ=0.4on triangular non-staggered grid past a circular cylinder in a planar channel. The channel has the length of 80, the width of 4, and the center of circular cylinder is (0, 0), with radius of 1. It has 25,198 cells, giving a total of 151,188 unknowns. The boundary conditions are:(1)Inlet boundary conditions:u=1,v=0,∂p/∂n=0.Solid boundary conditions:u=0,v=0,∂p/∂n=0.Outlet boundary conditions:∂u∂x=0,∂v∂x=0,p=0.Table 4compares the drag coefficient between the SGMRES(m) solution and the solution of the article [46], indicating that the numerical solutions due to the SGMRES(m) solver are reliable. The accuracy of the results proves the effectiveness of the algorithm in dealing with triangular meshes for the viscoelastic flow past a circular cylinder.Besides the effectiveness in dealing with the viscoelastic flow past a circular cylinder, the proposed SGMRES(m) also produces better performance on the CPU time and the convergence speed compared with the solvers GMRES(m) and Gauss–Seidel.Table 5shows the relevant CPU timing information and the number of iterations for the SIMPLE algorithm with the three resulting systems being solved with SGMRES(m), GMRES(m) and Gauss–Seidel solver with m=3 andε=1-6, from which we obtain the results similar to that of the Newtonian flow.Fig. 10displays the convergence performances of the SGMRES(m), GMRES(m) and Gauss–Seidel solvers. The convergence rate of the SGMRES(m) is linear after a short period. Comparing the convergence time for We=0.1, 0.3, 0.5, 0.7, we find that the convergence speed of the SGMRES(m) method is more than 1.3 times faster than the GMRES(m) method, or about 2.6–3.6 times faster than the Gauss–Seidel method.As before, the nearly optimal m values used in the runs above are determined by systematic trails on the various specific cases of our problem; see Fig. 11. In particular, the SGMRES(m) solver achieves the best performance by setting m=3; see Fig. 11(a). As a general trend, the CPU-time seems to grow in a log profile when the m values become bigger. For the purpose of comparison, we have conducted similar trails for the GMRES(m) solver, as shown in Fig. 11(b), which reveals an exponential growing profile in CPU-time against the m values, regardless of the We values. In addition, the performance of the two solvers seems to be less affected by the larger We values, especially when the m values are small. Again, our results demonstrate that the typical settings of the krylov dimension could be far from being optimal for specific problems.

@&#CONCLUSIONS@&#
Based on the SIMPLE algorithm, this paper develops an efficient solver for the nonlinear flow equations of Newtonian fluids and viscoelastic fluids, in which the SGMRES(m) method has been successfully integrated with the FVM on triangular grid. Within the solver, the SGMRES(m) is employed to solve the large-scale sparse linear systems arising from the course of FVM on triangular grid for modeling the Newtonian and the viscoelastic fluid flow. We examine the performance of the solver on two types of numerical tests: the Newtonian flow past a circular cylinder, and the Oldroyd-B fluid flow in a planar channel and past a circular cylinder. It is shown that the numerical results obtained by the SGMRES(m) are consistent with the analytical solutions or empirical values. In addition, by comparing CPU time and convergence speed of SGMRES(m), GMRES(m) and Gauss–Seidel, we find that the proposed SGMRES(m) solver is much more efficient than the other two solvers on the three numerical tests, with the accuracy of the results being still satisfactory. Furthermore, our results demonstrate that small m values are optical for SGMRES(m) and GMRES(m) to our problem.