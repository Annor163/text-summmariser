@&#MAIN-TITLE@&#
Threshold-based preprocessing for approximating the weighted dense k-subgraph problem

@&#HIGHLIGHTS@&#
We model the selection of key owners in forestry regions as dense k-subgraph problem.By a chain-reaction of vertex deletions, the size of the input graph is reduced.The reduced graph contains a (1+1/k)-approximate solution.

@&#KEYPHRASES@&#
(I) Graph theory,OR in forestry,Dense subgraph,Approximation algorithms,

@&#ABSTRACT@&#
Based on an application in forestry, we study the dense k-subgraph problem: Given a parameterk∈Nand an undirected weighted graph G, the task is to find a subgraph of G with k vertices such that the sum of the weights of the induced edges is maximized. The problem is well-known to be NP-hard and difficult to approximate if the underlying graph does not satisfy the triangle inequality.In the present paper, we develop a fast preprocessing routine which results in a graph still containing a1+1k-approximation for the problem. The key idea is to identify vertices which are of low interest to an optimal solution for the problem due to falling below a special ‘threshold’. Using this information, we initiate a chain-reaction of vertex eliminations to reduce the number of vertices in the input graph without losing a lot of information. This graph reduction step runs in polynomial time.The success of this preprocessing step mainly depends on finding a large threshold, which ensures that many vertices can be removed. For this purpose, we devise an efficient algorithm which yields a provably optimal threshold.Finally, we present empiric studies for our application. Even though the graphs tied to our application in forestry have several hundred vertices and do not satisfy the triangle inequality, they exhibit special properties which yield a very favorable performance of our approach. The pruning step typically removes more than 90% of the vertices, and thus enables an optimal solution of the problem on the reduced graph.

@&#INTRODUCTION@&#
The problem of identifying a subgraph with maximal weight subject to some sort of size constraint in a given graph is a well-known and widely studied problem in Operational Research with applications in such diverse fields as facility location (Pisinger, 2006) and (social) network analysis (Andersen & Chellapilla, 2009). Various interpretations of this problem setting have been investigated in the literature.In the present paper, we consider the (weighted) densek-subgraph (DkS) problem. It is a natural generalization of the maximum clique problem (readily implying NP-hardness), and has therefore been subject to a substantial amount of research. It asks for the densest subgraph with exactly k vertices of a weighted or unweighted graph.ProblemDense k-subgraph (DkS)Input: Graph G=(V,E), weight functionw:E→N, andk∈N.Output: Induced subgraph G′=(V′,E′) of G such that ∣V′∣=k and∑e∈E′w(e)is maximal.Variations of this particular problem, asking for the densest subgraph with at least (DalkS) or at most (DamkS) k vertices have also been considered.In recent years, at lot of attention has been attracted by weighted versions of this problem where both edge weights and vertex weights are considered. The so-called maximal weighted k-clique problem (abbreviated in the literature as MEWCP, WCPk) asks for a k-clique of maximal weight in a complete weighted graph.In the context of location problems, the weighted DkS problem is also often referred to as maximal dispersion (or 1-dispersion) problem. As these problems usually arise from weighted graphs representing distances in a Euclidean space, the weights are often assumed to satisfy the triangle inequality. Conversely, our interest in the DkS problem is motivated by a real-world application in forestry, for which this is not the case. Let us provide some basic notation, before turning to this application.In the following, we consider (undirected) graphs G=(V,E) with a vertex set V={v1,…,vn} and a set of undirected edges E={e1,…,em}. We denote the edges as sets e={vi,vj}. For the addition of edge e to an edge set E, we use the wording E←E∪{e}. When adding the vertices vi, vjof e={vi,vj} to a vertex set V, we write V←V∪e. The number of elements in a vertex or edge set is denoted as ∣V∣, ∣E∣ respectively. To emphasize that a subgraph has size exactly k, we sometimes denote it as k-subgraph (e.g., a k-forest is a forest on exactly k vertices). The neighborhood of a vertex v or a set of vertices A is referred to as N(v) or N(A) respectively. Here, N(A)={v′∈V⧹A : {v,v′}∈E} does not contain any vertices in A.We will study sequencesS=(v1,…,vt)of vertices. For a convenient notation, we useS←S∪vto denote that we append vertex v to the end of the sequence, andS←S∪eto denote that we append the vertices of edge e toSin arbitrary, but fixed order. When performing set operations on such a sequence, we useSto also refer to the set of vertices in the sequence, when the context is clear. In particular, we useS⊆Vto denote thatSonly contains vertices in V, and for A⊂V,S⧹Ais the subsequence ofSfor which all v∈A are deleted.In many cases, we have a weight functionw:E→N, and then also refer to the graphs as weighted graphs G=(V,E,w). We use the canonical wording V(E′) for the set of vertices covered by a set of edges E′, and the wording E(V′) for the edge set induced by a vertex set V′. For the sake of simplicity, we refer to subgraphs (V(E′),E′) by their inducing edge set E′, and refer to subgraphs (V′,E(V′)) by the inducing vertex set V′.Further, w(E′) denotes the sum of weights of the edges in E′ and w(V′) the sum of weights of edges in E(V′). Finally, we talk about the potential or weighted degree of a vertex v with respect to a subgraph G′ of G by usingpG′(v)=∑v′∈N(v)∩V(G′)w({v,v′}), or shorter p(v) if the subgraph G′ is clear from the context. For vi∈V, we also write p(i) if it allows a simpler notation. For the additional graph-theoretical standard terms and notation used, see e.g., Diestel (2005).Let us now describe the real-world application at hand.

@&#CONCLUSIONS@&#
