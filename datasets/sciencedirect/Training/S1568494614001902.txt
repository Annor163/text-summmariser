@&#MAIN-TITLE@&#
Enhancing clustering quality of geo-demographic analysis using context fuzzy clustering type-2 and particle swarm optimization

@&#HIGHLIGHTS@&#
We focused on improving clustering quality of Geo-Demographic Analysis.A novel interval type-2 fuzzy clustering algorithm was presented.It included some additional techniques to speed up the whole algorithm.The proposed method obtained better clustering quality than relevant algorithms.Suitable parameters for the best quality of the proposed algorithm were discussed.

@&#KEYPHRASES@&#
Context clustering,Fuzzy clustering type-2,Geo-demographic analysis,Heuristic algorithms,Particle swarm optimization,

@&#ABSTRACT@&#
Geo-Demographic Analysis, which is one of the most interesting inter-disciplinary research topics between Geographic Information Systems and Data Mining, plays a very important role in policies decision, population migration and services distribution. Among some soft computing methods used for this problem, clustering is the most popular one because it has many advantages in comparison with the rests such as the fast processing time, the quality of results and the used memory space. Nonetheless, the state-of-the-art clustering algorithm namely FGWC has low clustering quality since it was constructed on the basis of traditional fuzzy sets. In this paper, we will present a novel interval type-2 fuzzy clustering algorithm deployed in an extension of the traditional fuzzy sets namely Interval Type-2 Fuzzy Sets to enhance the clustering quality of FGWC. Some additional techniques such as the interval context variable, Particle Swarm Optimization and the parallel computing are attached to speed up the algorithm. The experimental evaluation through various case studies shows that the proposed method obtains better clustering quality than some best-known ones.

@&#INTRODUCTION@&#
Geo-Demographic Analysis (GDA), which was defined as “the analysis of spatially referenced geo-demographic and lifestyle data”[33], is one of the most interesting inter-disciplinary research topics between Geographic Information Systems and Data Mining, and is widely used in the public and private sectors for the planning and provision of products and services. There are various examples showing the needs of GDA in practical applications. Shelton et al. [34] performed a geo-demographic classification for mortality patterns in Britain and found the main causes of deaths in England and Wales from 1981 to 2000 associated with geographical locations in a map so that they could assist decision makers in better understanding the distribution of major causes. Michael [23] conducted a GDA analysis to gather community attitudes on the future growth of Werri Beach and Gerringong, NSW (Nelson), Australia focusing primarily on what actions Council should take to manage population growth within existing neighborhoods. Páez et al. [29] presented a geo-demographic framework using data from Montreal, Canada to identify potential commercial partnerships that could exploit the characteristics of smart cards. Campbell et al. [8] provided a detailed GDA of over 37,000 gifted and talented students admitted to the National Academy for Gifted and Talented Youth in England in 2003/2005 and showed that National Academy had nonetheless reached significant numbers of students in the poorest areas, something over 3000 students, and 8% of students identified as gifted and talented at this stage. Day et al. [11] took a survey that determined clusters of nations grouped by health outcomes by comparing life expectancy and a range of health system indicators within and between each cluster in order to provide sensible groupings for international comparisons. Some other typical applications of GDA such as the spatial and socio-economic determinants of tuberculosis, urban green space accessibility for different ethnic and religious groups, children disorders investigation, etc. could be referenced in the articles [1,6,9,32,36,37].In order to perform GDA, some soft computing methods are often used such as Principal Component Analysis (PCA), Self-Organizing Maps (SOM) and clustering. Walford [41] described a method using PCA to study the spatial distribution of the 1991 census data scores. However, results of PCA depend on the scaling of the variables, and its applicability is limited by certain assumptions made in the derivation. Loureiro et al. [21] introduced the use of SOM as an adequate tool for GDA. Based on the variations in edge length in a path between two units on the SOM, the authors presented a new way of calculating fuzzy memberships of fuzzy clustering method. However, it requires a lot of memory spaces to store all neurons and weights; what is more the speed of training phase is quite slow. Because of some limitations in those methods, clustering is often used instead because it has many advantages in comparison with the rests such as the fast processing time, the quality of results and the used memory space. Our previous work in [36] made an overview about some clustering methods for GDA such as Fuzzy C-Mean (FCM) [3], the agglomerative hierarchical clustering [11], Neighborhood Effects (NE) [13], K-Means clustering [20] and Fuzzy Geographically Weighted Clustering (FGWC) [24]. Among them, FGWC was considered the most favorite algorithm and was used in most of research articles about GDA applications.(1)u'k=α×uk+β×1A×∑j=1cwkj×uj(2)α+β=1(3)wkj=(popk×popj)bdkjaFGWC calculates the influence of one area upon another by Eqs. (1)–(3) where uk′ (uk) is the new (old) cluster membership of the area k. Two parameters α and β are the scaling variables. popk, popjare the populations of areas k and j, respectively. The number dkjis the distance between k and j. Two numbers a and b are user definable parameters. A is a factor to scale the “sum” term and is calculated across all clusters, ensuring that the sum of the memberships for a given area for all clusters is equal to one.Although FGWC is the most popular clustering algorithm for GDA, it still contains some limitations such as the speed of computing and the clustering quality. One of our previous works in [35] presented a method so-called CFGWC to accelerate the speed of computing of FGWC by attaching the context variable terms. Other works in [36,37] have showed some preliminary results in improving the clustering quality of FGWC through intuitionistic fuzzy sets and geographical spatial effects. Thus, our focus in this work is to continue with the clustering quality problem of FGWC. Based upon the observation that FGWC was constructed on the basis of the traditional fuzzy sets, which contain some limitations in membership degrees as pointed out by Mendel [25], this fosters us to improve FGWC in an extension of the traditional fuzzy sets to enhance the clustering quality of the algorithm. Now, let us explain why clustering algorithms on the traditional fuzzy sets have low clustering quality.According to Mendel [25], the traditional fuzzy sets cannot process some exceptional cases where the membership degrees are not the crisp values but the fuzzy ones instead. For example, the possibility to get tuberculosis disease of a patient concluded by a doctor is from 60 to 80 percents after examining all symptoms. Even if some modern medical machines are provided, the doctor cannot give an exact number of that possibility. This shows the fact that crisp membership values cannot model some situations in the real world and should be replaced with the fuzzy ones. Rhee [30] stated that using the traditional fuzzy sets often results in bad clustering quality because their uncertainties such as distance measure, fuzzifier, centers, prototype and initialization of prototype parameters can create imperfect representations of the pattern sets. For example, in case of pattern sets that contain clusters of different volume or density, it is possible that patterns staying on the left side of a cluster may contribute more for the other rather than this cluster so that choosing suitable value for the fuzzifier is difficult. Bad selection can yield undesirable clustering results for pattern sets that include noise. Because of those limitations, some preliminary results of deploying fuzzy clustering methods in an extension of the traditional fuzzy sets so-called Interval Type-2 Fuzzy Sets (IT2FS) have been introduced. Mendel [25] described the definition of IT2FS as follows.(4)A˜=(x,u,μA˜(x,u)=1)|∀x∈A,∀u∈JX⊆0,1.From Eq. (4), we recognize that IT2FS is a generalization of the traditional fuzzy sets since IT2FS will return to the traditional fuzzy sets when there is no uncertainty in the third dimension. Based upon this definition, some authors introduced several interval type-2 fuzzy clustering algorithms such as in the works of Hwang and Rhee [15] and Rhee [30]. Specifically, Hwang and Rhee [15] presented a type-2 fuzzy clustering algorithm to solve the problem of choosing distance measures in FCM algorithm, taking the difference of each type-2 membership function area with the corresponding type-1 membership value. Rhee [30] presented an improvement of this algorithm using two different values of fuzzifiers to solve the uncertainty of fuzzifier in FCM. Some other variants of the interval type-2 fuzzy clustering algorithms could be referenced in [2,10,12,14,17,19,22,26,27,31,42].Motivated by those results, in this article, we will present a novel interval type-2 fuzzy clustering algorithm so-called Context Fuzzy Geographically Weighted Clustering on IT2FS or in short CFGWC2 to enhance the clustering quality of FGWC. The difference of CFGWC2 with those interval type-2 fuzzy clustering algorithms above is two fold: Firstly, CFGWC2 is specially designed for the GDA problem that requires the modification of geographical spatial effects to the algorithm itself; secondly, it is equipped with some additional techniques to speed up the whole algorithm, namely:•An interval context variable, which is an extension of the single context variable of Pedrycz [28], is proposed and used to clarify the clustering results and accelerate the computing speed.In order to avoid bad initialization, which may occur in other interval type-2 fuzzy clustering algorithms, and to converge quickly to the (sub-) optima solutions, a meta-heuristic optimization method namely Particle Swarm Optimization – PSO [18] is used to determine good initial centers for CFGWC2.Since context values in the interval context variable can be simultaneously processed in CFGWC2, parallel computing technique is adapted to CFGWC2 to reduce the computational costs.What have been listed in those bullets are our contributions in this paper. The proposed algorithm will be implemented and compared with some relevant methods in term of clustering quality to verify its efficiency.The rests of this paper are organized as follows. Section “The proposed methodology” elaborates the proposed method in details including those additional techniques one-after-another. The numerical experiments through various case studies and discussions are given in Section “Results”. Finally, Section “Conclusions” gives the conclusions and outlines future works of this article.In the previous section, we have known that CFGWC2 is an interval type-2 fuzzy clustering algorithm equipped with some additional techniques such as the interval context variable, PSO and the parallel computing for the GDA problem. Since those techniques are necessary for the description of CFGWC2, they are firstly presented in Sections “Using PSO for the determination of initial centers” and “The interval context”. The CFGWC2 algorithm accompanied with the parallel computing mechanism will be described in Section “Evaluation by various case studies”.This section mentions the technique that finds good initial centers for clustering algorithms by PSO. The idea of this technique is to give a preliminary classification of the original pattern set so that “temporal” cluster results can be used to orient the classification in the main algorithm. The objective function is shown in Eq. (5), and its constrains are given in Eqs. (6)–(7):(5)J=∑k=1N∑j=1CXk−Vj2→min.(6)minj=1,C¯j≠iVi−Vj>maxs=1,POP(i)¯Xs−ViXs∈Cluster(i)i=1,C¯(7)Cluster(i)≤ε1wherePOP(i)=1andi=1,C¯Constrain (6) requires that all clusters are separated from the others. Alternatively, the minimal distance from a cluster's center to the others is not shorter than the maximal one from this center to all data points in the cluster. POP(i) is the population or number of patterns in the cluster Cluster(i). Constrain (7) minimizes the number of outliers in the result. Accordingly, the number of outliers is not greater than a pre-defined threshold ɛ1.For the problem (5)–(7), we use PSO [18] to determine the (sub-) optima solutions with the beginning population being initiated with P particles. Each particle is a vectorz=z1,z2,..,zCwhere zi(i=1,C¯) is a pattern randomly chosen from the original pattern set. The velocities of ziare set to zeros. Details of the algorithm are described by the pseudo-code in Table 1.Notice that Eq. (9) is used solely for the first iteration of MaxStep_PSO. In the next iterations, the centers are calculated from the previous one. Additionally, the value of MDiin Eq. (10) is set to zero in case that this cluster has not got any element. The fitness value of a particle is calculated by Eq. (13) where (γ1,γ2) are the ratio constants. Eqs. (14)–(16) are used to update the velocities and positions of all particles. In those equations, c1 is the ratio to keep the velocity intact, c2 is the ratio to change the velocity following by pBest and c3 shows the influence level of gBest to the velocity. Since the role of zi(i=1,C¯) from the second iteration afterwards is replaced with center Vi, the domain of random number in Eq. (14) is set to (−1, 1) in order to ensure the values of the centers are bounded within the domain of the pattern set. After a number of iteration steps defined by MaxStep_PSO, the solution is getting better because of the amelioration process after each “flying step” based on the fitness function. The outputted result V(0)=(V1, V2, .., VC) can be found from the particle holding current gBest and is used as the initial center for CFGWC2.In order to clarify the clustering results and accelerate the computing speed of the clustering algorithms, the context variable could be used. According to Pedrycz [28], a (single) context variable in Y⊂X is defined through the map below.(17)A:Y→0,1yk→fk=A(yk),where fkcan be understood as the representation for the level of relation of the kth point to the supposed context fk. There are some ways to define the relation between fkand the membership of kth point to the ith cluster, for instance, using the sum operator (18) or maximum operator (19).(18)∑i=1cuki=fk,k=1,N¯,(19)maxi=1cuki=fk,k=1,N¯In our previous work in [35], we defined a context variable to narrow the original geographical dataset under some conditions of certain dimensions. The reason to use the term of context for the clustering algorithm is twofold. Firstly, a context variable is useful to clarify the results following by users’ purposes. Because only a subset of the original dataset which has considerable meaning to the context is invoked, the result focuses on the area that really has many relevant points. Secondly, it helps improving the speed of computing. In the traditional clustering method, it not only takes long time to process the whole data, but also makes the results less meaning to the considered context. On the contrary, the context-based clustering methods both accelerate the speed and improve the semantic. Nevertheless, there are some limitations in definition (17). Firstly, the importance of the kth point to the supposed context is decided by a value fk. In fact, it is not enough to reflect a variety of different evaluations of many people to this relation. In the other words, one can assume that the importance is only 0.3 while other affirms that it should be 0.6. Due to this fact, the use of a value fkis not enough. Secondly, the old approach excludes the roles of other data points to the context. It is a misleading assumption since all characteristics always have relationships either directly or indirectly with the others. From these limitations, we extend the use of context by introducing a new term: “the interval context variable”. An interval context is defined as f=[f1,f2] where each fi(i=1,2) is stated through the map in Eq. (17). For the most important points, the value of f is high, e.g. [0.6,0.8]. Similarly, the value of f in case of less important points is low, e.g. [0,0.15]. This interval reflects the “fuzziness” of the context. In the other words, we have just performed a “fuzzy” step for the considered context. It helps us overcome the shortcomings of the single context variable and is suitable for CFGWC2, which works on IT2FS. Details of applying the interval context variable for CFGWC2 will be presented in the Section “The CFGWC2 algorithm”.We have had a general background of choosing initial centers by PSO in Section “Using PSO for the determination of initial centers” and the basic definition of the interval context in Section “The interval context”. Now, we use both of them accompanied with the parallel computing mechanism in the main activity of the CFGWC2 algorithm. Let us see the mechanism of CFGWC2 illustrated by Fig. 1below.According to Fig. 1, the parallel computing mechanism of CFGWC2 requires three machines whose first one (Machine 1) is responsible for generating initial centers for the remaining machines. Nevertheless, the centers values of Machine 2 and Machine 3 are different since the stopping conditions of PSO are not identical. After (MaxStep_PSO/2) iteration steps, the first center V(0) is outputted and transferred to Machine 2, and the second center is sent to Machine 3 after (MaxStep_PSO) iterations. This guarantees different results in Machine 2 and Machine 3, and is suitable for the determination of the upper and lower centers and membership degrees of the clustering algorithms on IT2FS, i.e. U(1), V(1) (Machine 2) and U(2), V(2) (Machine 3) in Fig. 1.In Machine 2 and Machine 3, we send the initial centers V(0) to a type-2 fuzzy clustering procedure accompanied with the interval context variable so-called Context-FGWC2 to get the crisp center V(1) (Machine 2) and V(2) (Machine 3). If the difference between the initial and crisp centers is smaller than a threshold (Eps) or the maximal number of iterations (MaxStep) is reached then we stop the Context-FGWC2 procedure and take the crisp center and membership degree, i.e. U(1), V(1) (Machine 2) and U(2), V(2) (Machine 3) as the final results. Otherwise, we assign V(0)=V(1) in Machine 2 and V(0)=V(2) in Machine 3 and start a new iteration in Context-FGWC2 until the stopping conditions hold.Once the upper and lower centers and membership degrees are calculated, we use a defuzzification method so-called the Partition Coefficient and Exponential Separation (PCAES) [40] validity index to obtain the final center and membership degree as below.(20)V(*)=V(1)ifPCAES(V(1))≥PCAES(V(2))V(2)otherwiseThis index measures the potential, whether the identified cluster has an ability to be a good cluster or not. It was compared with other indexes such as Partition Entropy (PE), Partition Coefficient (PC), Fuzzy Hypervolume (FHV), Xie & Beni, Pal & Bezdek, Modification PC (MPC), Zahid et al., and showed the impressive results, even in a noisy environment. The definition of PCAES is given below.(21)PCAES(C)=∑j=1CPCAES[j]where(22)PCAES[j]=∑k=1Nukj2uM−exp−mini≠j{Vj−Vi2}βT,(23)uM=min1≤i≤C∑k=1Nuki2(24)βT=∑l=1CVl−V¯2CV¯=(V¯1,V¯2,..,.V¯r)whereV¯i(i=1,r¯) is calculated as,(25)V¯i=∑l=1CVliC.PCAES[j] is used to measure the compactness and separation for cluster j (j=1,C¯). They are summed up to calculate PCAES(C)∈(−C, C). The large PCAES(C) value means that each of these C clusters is compact and separated from other clusters. It is a criterion to choose the suitable clustering's output. Depending on which center is opted, the related membership degree is used as final membership U(*).Now, we describe the Context-FGWC2 procedure. Remembering in Section “The interval context” that an interval context was defined as f=[f1,f2] so that we could apply fi(i=1,2) in each machine.Specifically, f1 (f2) was used in the Context-FGWC2 procedure of Machine 2 (3). Because of using different context values and initial centers in those machines, the upper and lower centers and membership degrees totally reflect the basic principle of IT2FS. The basic idea of the Context-FGWC2 procedure in Machine 2 is using an interval of primary membership consisting of the lower and upper ones calculated from the initial center and updating the interval by geo-characteristics and context value f1. The pseudo-code of Context-FGWC2 is shown in Table 2.In Step 4 of the Context-FGWC2, the intervals of primary membership consisting of the upper and lower memberships are calculated by Eqs. (26)–(29). Notice that in (26)–(27), the sum of membership degrees in all clusters is equal to f1kwhere f1kis a context value of the kth point in the pattern set. Analogously, the values of the upper and lower memberships are depended by this context value as shown in (28)–(29).(26)U(x)_=Ukj_∈(0,1)|k=1,N¯;j=1,C¯;∑j=1CUkj_=f1k(27)U(x)¯=Ukj¯∈(0,1)|k=1,N¯;j=1,C¯;∑j=1CUkj¯=f1k(28)Ukj_=f1k∑i=1CXk−Vj(0)Xk−Vi(0)2/m1−1,iff1k∑i=1CXk−Vj(0)Xk−Vi(0)≥1/Cf1k∑i=1CXk−Vj(0)Xk−Vi(0)2/m2−1,otherwise(29)Ukj¯=f1k∑i=1CXk−Vj(0)Xk−Vi(0)2/m1−1,iff1k∑i=1CXk−Vj(0)Xk−Vi(0)<1/Cf1k∑i=1CXk−Vj(0)Xk−Vi(0)2/m2−1,otherwiseAfter we have the interval of primary membership, the maximum (minimum) center VR(VL) and the related membership matrix U(1) (U(2)) are calculated by the same steps from Step 6 to 17. Specifically, in Step 8 index k0 in the range [1,N−1] satisfying Eq. (30) will be selected as a pivot to calculate U(1)(l) in Eq. (31).(30)Xk0l≤∑j=1Cvjl(A)C≤X(k0+1)l(31)Ukj(1)(l)=Ukj_ifk≤k0Ukj¯otherwise,(j=1,C¯,k=1,N¯)Using the average operator of fuzzifier, center V(1) is calculated below.(32)Vji(1)=∑k=1N(Ukj(1)(l))m1+m2/2Xki∑k=1N(Ukj(1)(l))[m1+m2/2],(j=1,C¯,i=1,r¯)Next, in Step 10 we check whether V(1)=V(A) or not. If this condition holds, we conclude that the maximum center VR=V(1) and the related membership matrix U(1) is found in Eq. (33).(33)U(1)=∑l=1rU(1)(l)r.Otherwise, we make another loop with the next feature l in the pattern set. By the similar process, in Step 18 we can compute the minimum center VLand the related membership matrix U(2) where Eqs. (31) and (33) are replaced with (34) and (35), respectively.(34)Ukj(2)(l)=Ukj¯ifk≤k0Ukj_otherwise,(j=1,C¯,k=1,N¯)(35)U(2)=∑l=1rU(2)(l)r(36)U(C)=U(1)+U(2)2From these related membership matrices, Step 19 obtains the membership degree of traditional fuzzy sets (a.k.a. type-1) through Eq. (36). This process is called the type-reduction and used to calculate the population of each cluster. Step 20 calculates the population of each cluster by this rule:(37)IfUkj(C)>Uki(C)andi≠jthenXkis assigned to clusterj,(k=1,N¯;i=1,C¯)Based on the population, Step 21 determines the geographical weights of all areas by Eq. (3), and the modification of membership degree following by geo-characteristics is performed through Eqs. (2), (3) and (38)–(40).(38)UG(x)=G(U(C)(x))=Ukj_G,Ukj¯G,(j=1,C¯,k=1,N¯)(39)Ukj_G=α×Ukj(2)+β×1A×∑i=1Cwji×Uki(2)(40)Ukj¯G=α×Ukj(1)+β×1A×∑i=1Cwji×Uki(1),(i,j=1,C¯,i≠j,k=1,N¯).Notice that parameter A in Eqs. (39) and (40) is a factor to scale the “sum” term and is calculated across all clusters, ensuring that the sum of the memberships for a given area k for all clusters is equal to the context value f1k(k=1,N¯). Step 22 performs the type-reduction for the modified membership degree and calculates new center V(2) by Eqs. (41) and (42), respectively.(41)UkjGT=Ukj¯G+Ukj_G2,(j=1,C¯,k=1,N¯),(42)Vji(2)=∑k=1N(UkjGT)[m1+m2/2]Xki∑k=1N(UkjGT)[m1+m2/2],(j=1,C¯,i=1,r¯)Now, we have modified membership degree UGand crisp center V(2). Since we work on IT2FS, V(2) should be an interval containing the minimum and maximum centers VL, VR. This work is done through Step 23 and 24. In order to verify whether the outputted centers is the solution or not, Step 25 performs the defuzzification for the interval center as in Eq. (43) and get crisp one V(3). This center is used to check the stopping condition described in Step 26.(43)V(3)=VLifVL−V(0)≤VR−V(0)VRotherwiseIn order to avoid unstoppable iteration, we limit the maximal number of iteration steps to MaxStep. If the number of iteration steps exceeds this threshold, the Context-FGWC2 procedure will stop immediately. Once the stopping condition holds, we receive the type-2 membership degree UGand the interval center [VL,VR]. The crisp center V(3) and the distribution of pattern set after clustering can be extracted from them. (UG,V(3)) are the output of Context-FGWC2, and the crisp center V(3) is denoted in Fig. 1 as V(1) (Machine 2) and V(2) (Machine 3).The works of Context-FGWC2 in Machine 3 is analogous to those in Machine 2 except the maximal number of iteration steps in Machine 3 is equal to half of that in Machine 2 (∼MaxStep/2). The reason for this alteration lies in the synchronization process. Specifically, the results in Machine 2 and 3 are transferred to Machine 1 after completion so that if a machine takes too much time to generate the outputs, it will cause large delayed time of the overall system. Because the initial center of Machine 3 is somehow better than that of Machine 2, the convergence may be faster and is not affected by the number of iteration steps. In practical, the number of machines can be reduced, for instance the works of the Machine 1 can be assigned to one of two left machines. Because it takes much time to transfer data between machines, it is better if we can decrease the waiting time. If so, the number of transferred steps between machines is reduced by half and the overall processing time is reduced remarkably.The advantages of CFGWC2 are fourth-fold: Firstly, it is capable to handle the bad initialization and immature convergence by the PSO procedure; secondly, the clustering results focus on the users’ purposes by the interval context; thirdly, the computing speed of CFGWC2 is ameliorated through the interval context and the parallel computing mechanism; fourthly, the most important advantage of CFGWC2 is the high clustering quality in comparison with some relevant methods since this algorithm was deployed on IT2FS, which is more general and able to handle the existing limitations of the traditional fuzzy sets. The disadvantage of CFGWC2 could be the computational costs and its complex activities. Nevertheless, by employing some additional techniques we hope that the disadvantages could be ameliorated, and CFGWC2 achieves good clustering results.

@&#CONCLUSIONS@&#
In this paper, we concentrated on improving the clustering quality of the state-of-the-art clustering algorithm so-called FGWC for the GDA problem. A novel interval type-2 fuzzy clustering algorithm namely CFGWC2 deployed in an extension of the traditional fuzzy sets namely Interval Type-2 Fuzzy Sets was presented. It integrated some additional techniques to speed up the whole algorithm such as the interval context variable, Particle Swarm Optimization and the parallel computing. The experimental results by various case studies on two benchmark datasets showed that CFGWC2 obtained better clustering quality than other relevant algorithms. The experiments also suggested us which values of parameters should be chosen for the best quality of the proposed algorithm. Further works will examine CFGWC2 for handling very large datasets, partly classified and time-series datasets. Additionally, some applications of the proposed method in real-life situations will be considered.