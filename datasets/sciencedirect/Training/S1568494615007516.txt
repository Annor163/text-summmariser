@&#MAIN-TITLE@&#
Colonial competitive differential evolution: An experimental study for optimal economic load dispatch

@&#HIGHLIGHTS@&#
A new DE algorithm based on socio-political evolution for ELD problem.A review and comparative study of proposed methods for ELD problem.CCDE algorithms were successfully implemented for ELD problem.

@&#KEYPHRASES@&#
Differential evolution (DE),Colonial competitive DE (CCDE),Benchmark functions,Economic load dispatch,

@&#ABSTRACT@&#
Differential evolution (DE) algorithm is a population-based algorithm designed for global optimization of the optimization problems. This paper proposes a different DE algorithm based on mathematical modeling of socio-political evolution which is called Colonial Competitive Differential Evolution (CCDE). The two typical CCDE algorithms are benchmarked on three well-known test functions, and the results are verified by a comparative study with two original DE algorithms which include DE/best/1 and DE/rand/2. Also, the effectiveness of CCDE algorithms is tested on Economic Load Dispatch (ELD) problem including 10, 15, 40, and 140-unit test systems. In this study, the constraints and operational limitations, such as valve-point loading, transmission losses, ramp rate limits, and prohibited operating zones are considered. The comparative results show that the CCDE algorithms have good performance and are reliable tools in solving ELD problem.

@&#INTRODUCTION@&#
Optimization can be defined as an effective mathematical tool for finding the best strategy and problem-solving among several possible methods under certain circumstances. In other words, dependent on real physical circumstances of the problem, a mathematical expression is optimized when the values of its variables are determined so that the value of expression becomes maximum or minimum. Optimization has high importance in many branches of science, including economics, physics, chemistry and engineering. It needs an optimized and economical design for a product, process or optimized placement of resources in industry and society or many other instances in, which optimization techniques lead to better decision making. Growing consumption of electrical energy has led power engineers to provide electrical energy with the least possible cost. Economic Load Dispatch (ELD) problem that considers the units constraints is a very important optimization problem in energy management and power systems operation where optimal generation for each power system unit is determined to minimize total fuel costs. It is subject to equality constraints on power balance and inequality constraints on power outputs. The ELD problems are non-convex and non-smooth problems with many nonlinear characteristics of the generator, which is very hard and complicated to find an optimal solution [1–3]. These optimization techniques include the interior point method [4], Homogeneous Interior-Point (HIP) method [5,6], the base point and participation factor, Newton–Raphson (NR) method, Lambda Iteration (LI), and the Gradient Method (GM) [7–9]. Some other traditional mathematical optimization methods include Lagrangian Relaxation (LR) [10], Hopfield Neural Network (HNN) [11], Dynamic Programming (DP) [12], Non-Linear Programming (NLP) [13], Linear Programming (LP) [6], and Quadratic Programming (QP) [14,15]. Classic and mathematical programming methods are heavily dependent on and sensitive to the selection of initial conditions and thus convergence to a local optimal point or even divergence are possible. Linear programming methods are robust and fast but their calculation accuracy declines when approximating non-convex non-flat fuel cost curve to a piecewise linear cost. DP programming method is able to solve both convex and non-convex fuel cost curve but its main drawback is high computational time when dimensions of the problem increases. On the other hand, non-linear programming methods suffer from convergence problems [16].In the last few years, various evolutionary algorithms and heuristic techniques have been applied to solve ELD optimization problem, such as evolutionary algorithms [17], Tabu Search (TS) [18], Genetic Algorithms (GAs) [19–21], the Particle Swarm Optimization (PSO) [22–28], Chaotic PSO (CPSO) [29], and Evolutionary Programming (EP) [30]. Also, the Self-Organizing Hierarchical PSO with Time-Varying Acceleration Coefficients (SOHPSO_TVAC) [31], Real Coded GA (RCGA) [32], Evolutionary Strategy Optimization (ESO) [33,34], Biogeography-Based Optimization (BBO) algorithm [35], mathematical programming [36], an Auction-based Algorithm (AA) [37], combination of Biogeography-Based Optimization (BBO) and DE (DE/BBO) [38], a Artificial Immune System (AIS) [39], Hybrid Fuzzy PSO and Nelder-Mead (FAPSO-NM) [40], Chaotic Differential Evolution And Sequential QP (CDE-SQP) [41], the different versions of krill herd algorithm (KHA) [42], Improved Coordinated Aggregation-based PSO (ICA-PSO) [43], the θ-PSO method [44], Fuzzy Adaptive Chaotic Ant Swarm Optimization (FCASO) [45], Improved PSO (IPSO) [46], the Distributed PSO and TS Algorithm (DSPSO-TSA) [47], Self-Adaptive Differential Harmony Search (SADHS) and Chaotic SADHS (CSADHS) algorithms [48], Multi-Objective Directed Bee Colony (MODBC) [49], a new hybrid Modified Bacterial Foraging-Simplified Swarm Optimization (MBF-SSO) [50], Gravitational Search Algorithm (GSA) [51], the hybrid PSO and Sequential Quadratic Programming (PSO-SQP) [52], Artificial Bee Colony (ABC) [53], Incremental ABC with Local Search (IABC_LS) algorithm [54], Continuous Quick Group Search Optimizer (CQGSO) algorithm [55], Adaptive Real Coded Genetic Algorithm (ARCGA) [56], Fuzzy Adaptive PSO (FAPSO) [57], Opposition-Based HS Algorithm (OHSA) [58], Hybrid DE (HDE) [59,60], a New PSO (NPSO) [61], etc. have been used to solve different non-convex ELD problems. These methods are shown to be robust and effective tools that can be used to eliminate most of the difficulties of classical ones.The DE algorithm is a random evolutionary optimization algorithm similar to the GA although it differs in new population generation and mutation operators; the DE, invented as a technical report by Price and Storn [62,63]. Moreover, this algorithm is known as one of the most suitable and most widely used evolutionary algorithms in optimization problems in different aspects due to its strong and reliable searching ability, simple structure and high convergence profile. Various methodologies on the classical DE algorithm have been proposed and applied to solve different optimization problems in the literature, such as DE [64], Adaptive Chaotic DE (ACDE) [65], Modified Teaching–Learning Algorithm (MTLA) [66] for Short-term Hydrothermal Generation Scheduling (SHGS) and reserve constrained dynamic ELD. The HDE algorithms [59,60], Chaotic DE (CDE) methods [67], the classical DE method [68–70], the Hybrid Hierarchical Evolution (HHE) algorithm [71], a Variable Scaling HDE (VSHDE) algorithm to solve the large-scale problems [72], Modified DE (MDE) [73], a Multi-Agent based DE (MADE) approach [74], Multi-Objective DE (MODE) algorithms [75,76], an Adaptive Hybrid DE (AHDE) [77], a combination of GA with the DE and SQP [78], an improved DE Differential Evolution with Fuzzy Selection (DEFS) [79], (VSHDE) [48], a new hybrid approach connecting Interior Point Method (IPM) and DE [80], (DE/BBO) [38] for solving various types of ELD problems. Furthermore, the following methods can be mentioned: DE algorithms for Optimal Power Flow (OPF) [83–85], probabilistic multi objective optimal reactive power dispatch [86], optimization of machining parameters [87] and multi-pass turning operations [88].The CCDE algorithm is based on five mechanisms: multi-group, mutation, crossover, selection operators and finally Colonial Competition (CC) between these mechanisms. The main differences between this algorithm and classical DE algorithm which are introduced in this article are as follows: Each group has a numerical value called strength of group, which is dependent on the answer set of the group. Obviously, dependence on best solution of the group is considerably higher than other members; therefore there is a colonial competition between these groups, in which the group with least fitting function value in a repetition loses its worst solutions to other groups according to their strength.The two proposed CCDE algorithms are benchmarked and tested on three recognized test functions, and the results are confirmed by means of using a comparative study with two original DE algorithms which comprise DE/best/1 and DE/rand/2. Furthermore, the efficiency of the CCDE algorithms is verified on ELD problem comprising 10, 15, 40, and 140-unit test systems.The main strategies for solving ELD problem as a nonlinear, non-smooth and non-convex constrained optimization problem are to minimize possible value of the fuel and operating total costs of a power system over an appropriate period.Generally, the optimization objective function of classical ELD problem model and the input–output characteristics of thermal generating units can be mathematically formulated by a single quadratic function [19] as follows,(1)Ft=min∑g=1NgFg(Pg)=min∑g=1NgagPg2+bgPg+cgSubject to:-Active power generation-demand balance constraint:The active power output total of thermal generating units of system must be equal to the sum of the total load demand PDof network and total transmission loss PLof transmission network, which is an equality constraint. The active power balance constraint; that is, losses is given by (2)[16,18,20]:(2)∑g=1NgPg=PD+PLwhere the transmission network line real losses PLcan be calculated using power loss coefficients B as given by (3)[23]:(3)PL=∑g=1Ng∑h=1NgPgBghPh+∑g=1NgB0g+B00Generation capacity limits:The thermal generating units of the output generator in terms of maximum and minimum active power capacity limits of each thermal generating unit limits will be given by (4):(4)Pg,min≤Pg≤Pg,maxRamp-rate limits:The actual operating range of total sum of the online thermal generating units of power output should be in an acceptable and proper range and the effective real power operating limits of ramp-rates are given in Eq. (5) as generation increases and by (6) as generation decreases:(5)Pg−Pg0≤URg(6)Pg0−Pg≤DRgwherePg0is the previous generation output of the gth generator, URgand DRgare the up-ramp and down-ramp limits of the gth generator, respectively.In order to consider the online thermal generating output limits and ramp-rate limits constraints at the same time, (4)–(6) can be rewritten as an inequality constraint in (7)[26]:(7)maxPg,min,Pg0−DRg≤PgPg≤minPg,max,Pg0+URgIn power systems, the ELD problem is a non-smooth/non-convex problem since the thermal generating units with multi-valve stream turbines have valve-point loading (VPL) effects as a complementary component of ELD problem. The ELDVPL model of cost of thermal generating units with valve point loading effects has been proposed in reference [19]. It characterized in the form of a quadratic function plus the absolute value of a sinusoidal term corresponding to the VPL. The cost curve of power generators with VPL are shown in Fig. 1. The objective function of ELDVPL problem can be formulated as it can be seen in (8)[26,27]:(8)cost=∑g=1NgFg(Pg)=∑g=1NgagPg2+bgPg+cg+eg×sin(fg×(Pg,min−Pg))In ELDMF problem, the thermal generating units’ operation conditions are further practically considered since thermal generating unit is practically supplied with multiple fuels (MF) sources. Therefore, the fuel total cost curves need to operate on the lower contour of the intersecting curves, reflecting the effects of fuel sources type changes such as oil, natural gas and coal [14]. Therefore, the fuel cost function of out power of each network generating unit should be presented with several piecewise quadratic functions reflecting the effect of fuel sources type changes. In Fig. 2, the fuel cost curve of power generators considering multi-fuel is shown. The ELDMF problem of unit gth is represented in [14,26] and according to (9):(9)Fg(Pg)=ag1Pg2+bg1Pg+cg1,fuel1,Pg,min≤Pg≤Pg1ai2Pg2+bg2Pg+cg2,fuel2,Pg1≤Pg≤Pg2...agkPg2+bgkPg+cgk,fuelk,Pgk−1≤Pg≤Pg,maxIn this process, the fuel cost function of ELDVPL problem considering MF sources (ELDVPLMF problem) for generating unit gth is given by (10)[16]:(10)Fg(Pg)=ag1Pg2+bg1Pg+cg1+eg1×sin(fg1×(Pg1,min−Pg)),fuel1,Pg,min≤Pg≤Pg1ag2Pg2+bg2Pg+cg2+eg2×sin(fg2×(Pg2,min−Pg)),fuel2,Pg1≤Pg≤Pg2…agkPg2+bgkPg+cgk+egk×sin(fgk×(Pgk,min−Pg)),fuelk,Pgk−1≤Pg≤Pg,maxIn the input–output power curve of thermal generating units that results from vibration in its shaft bearing by opening or closing the steam valve, prohibited operating zones (POZ) may have existed. This undue vibration in its shaft bearing might cause instability in certain ranges of thermal generating units power output and in the generating unit has discontinuous input–output characteristics [23]. The POZ constraints can be described as (11):(11)Pg∈Pg,min≤Pg≤Pg1lPgz−1u≤Pg≤Pgzl;z=2,…,ng;∀g∈ΩPgngu≤Pg≤Pg,maxEq. (11) indicates that if gth generator and ngare the number of POZ of the gth generating unit, they will have (ng+1) feasible disjoint operating regions, which will form a non-convex set. The cost curve of power generators with POZ is shown in Fig. 3.In this paper, the proposed algorithms are used to solve ELD problems using 10, 15, 40 and 140 unit test systems.DE algorithm was invented by Price and Storn [62]. The algorithm outperforms other well-known evolutionary algorithms (EAs) and is inspired by the natural evolution of species such as other evolutionary algorithms. The flow chart of the basic DE is shown in Fig. 4. The DE is based on parallel random population, which begins with an initial population. Applying certain operators, such as mutation and cross over, the algorithm forms a new population based on the previous one. In the next phase, which is called selection phase, a new population is compared with the previous one in terms of the competence value, which is determined by target function. Finally, after appropriate selection, the cycle continues in order to reach desired results or designated repetition times. DE Algorithm of the formidable population-based optimizer (PO) has attracted the research community for minimizing non-differentiable, nonlinear, continuous space functions, which have been widely applied in many practical, scientific, and engineering, fields. They have been proposed in different types and several variations of the basic DE algorithm in the literature. The experimental results and effects of proposed methods and research of the DE algorithm can be found with a detailed description in [89–96].The original DE (the “DE/rand/1” strategy is a classic DE strategy) algorithm can be summarized in following phases.DE algorithm, in which the goal is to find an optimized answer according to control variables of the problem, forms an initial random population by utilizing relation (18) with NP number of population and D dimensions likexIteri=xIter,1i,xIter,2i,…,xIter,Di(xIteritarget vector) in a range between xmin=[xmin,1, xmin,2, …, xmin,D] and xmax=[xmax,1, xmax,2, …, xmax,D].The “i” and “Iter” variables in above expression are defined as Iter=0, 1, 2, …, Itermaxand i=1, 2, …, NP where the Itermaxis the maximum allowed times of algorithm repetition. In relation (12), NP is the number of produced population with D dimensions:(12)x0,ji=randj(0,1)×(xj,max−xj,min)+xj,minIn the above relation, randj(0, 1) is a function that generates random numbers between 0 and 1 for jth (j=1, 2, 3, …, D) dimension of the variable.Mutation operators aim to generate a new population to prevent the algorithm from getting stuck in local optimal point and early convergence [90–93]. For every available row in the initial population, the mutation operator chooses random vectors calledxIterr(likexIterr1,xIterr2,xIterr3,xIterr4,xIterr5) from initial population matrix and creates a new vectorvIterifor Iterth repetition of algorithm and ith member of the population according to the utilized mutation strategy, which forms a new population. It is necessary that randomly selectedxIterrvectors are not similar [82].The outcome vector of mutation operator (vIteri) is formed from one of the following compositions [123]:“DE/rand/1”:(13)vIteri=xIterr1+FxIterr2−xIterr3“DE/best/1”:(14)vIteri=xbest+FxIterr1−xIterr2“DE/current-to-best/1”:(15)vIteri=xIteri+Fxbest−xIteri+FxIterr1−xIterr2“DE/rand/2”:(16)vIteri=xIterr1+FxIterr2−xIterr3+FxIterr4−xIterr5“DE/best/2”:(17)vIteri=xbest+FxIterr1−xIterr2+FxIterr3−xIterr4“DE/rand-to-best/1”:(18)vIteri=xIterr1+Fxbest−xIterr1+FxIterr2−xIterr3“DE/rand-to-best/2”:(19)vIteri=xIterr1+Fxbest−xIterr1+FxIterr2−xIterr3+FxIterr4−xIterr5“DE/current-to-rand/1”:(20)vIteri=xIteri+rand(0,1)∗xIteri−xIterr1+F∗rand(0,1)∗xIterr2−xIterr3where F is a constant of mutation operator, which is a positive real parameter and its value is randomly selected between 0 and 2 andxIterr1−xIterr2,xIterr2−xIterr3andxIterr4−xIterr5are a different vector that mutates the base vector. xbestis the best individual vector with the best fitness value in the current population at iteration Iter.Using crossover operator is a powerful strategy to increase diversification of the population. In this section, entries of the generated vector by mutation operators(vIteri)is compared with the initial population vector(xIteri)according to the following relation and the resultant vector (the trial vectoruIteri) is sent to the comparison and selection phase.(21)uIter,ji=vIter,ji,if(randi,j(0,1)≤CR)xIter,ji,otherwisewhere randi,j(0, 1) is a uniformly distributed random number and crossover rate CR is a user-specified constant confined in the [0, 1] range.In this article, another crossover operator is used, in which the entries of generated mutation operators(vIteri)are compared with the best population vector in Iterth repetition (xbest) using the following relation and the resultant vector (the trial vectoruIteri) which is sent to the comparison and selection phase.(22)uIter,ji=vIter,ji,if(randi,j(0,1)≤CR)xbest,j,otherwiseTwo crossover operators are introduced. The first crossover operator is called CR/current while the latter is called CR/best.In the last phase, theuIterivector is compared with previous population generated in phase onexIteriaccording to competence values calculated for both vectors by the target function. Therefore, the best solution is selected with regard to the goal of the problem. It uses the following relation and the selected solution itself is considered as the initial target vector in the next repetition(xIter+1i).(23)xIter+1i=uIteri,if(f(uIteri)≤f(xIteri))xIteri,otherwise.One of the most widely known evolutionary algorithms is the genetic algorithm, which was first introduced by Holland (1962) and has made many optimization applications in various fields. However, it is clear that evolution based on colonial competition between several groups (ICA) [97,98] and SOM+HBMK method [99] are completely faster than the genetic evolution. The main difference between these algorithms is that adding the ability of data exchanged between the members of population to the available algorithms to improve the convergence rate and ability to escape local optimal point in order to find more optimized final answer.In this article, a DE algorithm as groups has been used by different strategies and then a colonial competition was simulated between these groups. A result of a real problem illustrates high performance of this algorithm relative to other basic differential evolutionary algorithms. A general notation for the proposed CCDE algorithms is CCDE/x/y/z, where x index the base vector to be mutated, the y index denotes the crossover scheme, and z index is the number of difference vectors used for all algorithms such as colonial competitive scheme of original DE/rand/1 with best crossover operator (CR/best) which is called CCDE/rand/best/1.In order to operate the algorithm, NPb numbers of the best member of xb initial population are selected as the heads of the groups, which are also NPb groups. The remaining of initial population NPw (NPw=NP−NPb), which is called “weaker population” xw, forms the members of the above groups and each of them are accrued to one of the groups. For example, in the first group of algorithm with 10 initial populations as can be seen in Fig. 5, the xb is the best member of initial population of group first.In order to divide initial population between the groups, a certain number of population, which is proportional to the value of target function of the group head (strength of group head PB), is given to the group. Therefore, the first step is to calculate the normalized value of target function for each head of the groups:(24)F(xbm)=maxk{f(xbk)}−f(xbm)where f(xbm) is the value of target function for mth head of group,maxk{f(xbk)}(k=1, 2, …, NPb) is the maximum target function value between all heads of the groups, and F(xbm) represents the normalized value of the target function (cost function) for mth head of group. The relative normalized strength of mth head of group is calculated as follows:(25)PBbm=F(xbm)∑k=1NPbF(xbk)Therefore, the initial population of mth group (NPwm) of the initial population (NPw) is calculated as follows:(26)NPwm=round{PBbm∗(NPw)}where the round is a function that outputs the nearest integer to a given decimal number. Having these initial conditions of all groups, the algorithm is functioned. The evolutionary process continues in a cycle so that it can satisfy a cessation condition, such as the maximum number of repetitions. Similar to the original algorithm, the cycle includes mutation, cross over and selection operators. Then, algorithm continues the optimization by adding the colonial competition stages and eliminating the weakest group.Mutation operators for CCDE algorithm are similar to DE version with just one difference that the population of each group (xw) forms a new population with its best member xb if needed and mutation operators only apply to weak member's xw of group as follows:“CCDE/rand/1”:(27)vwIteri=xwIterr1+FxwIterr2−xwIterr3“CCDE/best/1”:(28)vwIteri=xbIterm+FxwIterr1−xwIterr2“CCDE/current-to-best/1”:(29)vwIteri=xwIteri+FxbIterm−xwIteri+FxwIterr1−xwIterr2“CCDE/rand/2”:(30)vwIteri=xwIterr1+FxwIterr2−xwIterr3+FxwIterr4−xwIterr5“CCDE/best/2”:(31)vwIteri=xbIterm+FxwIterr1−xwIterr2+FxwIterr3−xwIterr4“CCDE/rand-to-best/1”:(32)vwIteri=xwIterr1+FxbIterm−xwIterr1+FxwIterr2−xwIterr3“CCDE/rand-to-best/2”:(33)vwIteri=xwIterr1+FxbIterm−xwIterr1+FxwIterr2−xwIterr3+FxwIterr4−xwIterr5“CCDE/current-to-rand/1”:(34)vwIteri=xwIteri+rand(0,1)∗xwIteri−xwIterr1+F∗rand(0,1)∗FxwIterr2−xwIterr3Similar to the original algorithm, entries of the generated vector through mutation operators(vwIteri)are compared to the initial population vector(xwIteri)using the following relation and the resultant vector (the trial vectoruwIteri) which is sent to the comparison and selection section:-“CR/current”:(35)uwIter,ji=vwIter,ji,if(randi,j(0,1)≤CR/current);xwIter,ji,otherwise.“CR/best”:(36)uwIter,ji=vwIter,ji,if(randi,j(0,1)≤CR/best);xbIter,jm,otherwise.The resulted vectoruwIteriis compared with the previous vector of the previous section(xwIteri)in terms of the competence value (strength) and the best vector of the two is selected as the new solution(xwIter+1i), which is calculated as follows:(37)xwIter+1i=uwIteri,iff(uwIteri)≤f(xwIteri);xwIteri,otherwise.In colonial competition process, each group, which fails to increase its total strength (TP) relative to other groups, gradually loses its members or weak population (xw) and therefore, the possibility of elimination of the group also increases gradually. Stronger groups seize these weak members, which are confiscated from the weakest group and increase their total strength. The total strength of mth group (TPm) is calculated as follows, which is equal to the strength of the group head (xbm) plus a percentage (α) of total strength of other members of the group∑i=1NPwmxwiwhere α is a positive value usually considered between 0 and 1 and near to 0.First, the value of target function for all weak members is calculated and then the total strength of other members of the group and finally total normalized strength of each group are calculated:(38)F(xwi)=maxk{f(xwk)}−f(xwi)The strength of ith member of population:(39)PBwi=F(xwi)∑k=1NPwF(xwk)The total strength of mth group:(40)TPm=PBbm+α∗mean∑k=1NPwmPBwkwhere PBwiis the strength of ith member of population, f(xwi) represents the value of target function for ith member of the weak population,maxk{f(xwk)}(k=1, 2, …, NPw) is the maximum or minimum value of target function between all members of the weak population and F(xwi) is the normalized value of target function (or cost function) of ith member of the weak population. By having total strength of each group, the confiscation probability of the weakest member of the weakest group is calculated by each group:(41)Pbm=TPm∑k=1NPbTPkwhere Pbmis the probability of confiscation of the weakest member of the weakest group by mth group. Calculating the values of probability, Pb vector is generated by the above values in order to randomly divide the weakest members of the mentioned group between groups but with a probability dependent to the confiscation probability of each group as follows:(42)Pb=[Pb1,Pb2,…,Pbm]where Pb probability vector has the size of 1×NPb and is composed of confiscation values for every group. The group, which has the highest probability value of Pb, seizes the weak member and increases the possibility to improve strength of the seized weak member. The general scheme of the search colonial competitive for CCDE algorithm can be seen in Fig. 6. This phase of algorithm ends by seizing the weak member through the strongest group.In the process of colonial competition between groups, weak groups gradually lose their weak members until only head of the group remains and all of the weak members are lost. At this moment, the group is dissolved and the only member of it is randomly given to other group. The proposed algorithm continues optimization process in order to reach a designated repetition threshold or satisfy a specific convergence condition. The flow chart for the CCDE/rand/best/1 method is given in Fig. 7, and also the pseudo code for the CCDE algorithm with CCDE/rand/1 strategy is given in Algorithm 1.Algorithm 1The CCDE algorithm with CCDE/rand/1 strategy and CR/current crossover operator.1: to set values of the control parameters of CCDE/rand/1: mutation scaling factor F, current crossover rate CR/current, iterations maximum number Itermax, and the initial population size NP and NPb individuals from user. Setting the iterations number Iter=0 for individuals;2: to generate the initial random population NP (i=1, 2, …, NP);3: to evaluate the fitness of each population individual;4: to rate initial groups NPb with NPb of strongest initial population;5: To divide the initial weak population (NPw=NP−NPb). NPwmof the initial weak population is randomly chosen and given to the mth group;6: while The itill maximum no of iterations Itermaxdo7: to set the iterations number Iter=Iter+1;8: fork=1 to NPbdo9: fori=1 to NPwmdo10: to choose the three uniform randomly r1≠r2≠r3≠i;11: forj=1 to D do12:vwIteri=xwIterr1+FxwIterr2−xwIterr3;13: end for14: forj=1 to D do15:uwIter,ji=vwIter,ji,if(randi,j(0,1)≤CR/current);xwIter,ji,otherwise.;16: end for17: forj=1 to D do18:xwIter+1i=uwIteri,iff(uwIteri)≤f(xwIteri)xwIteri,otherwise.;19: iff(uwIteri)<f(xbIterm)20:xbIterm=uwIteriandf(xbIterm)=f(uwIteri);21: end if22: end for23: end for24: end for25: to evaluate the total power TP of each group TPm(m=1: NPb);26: to remove the weakest population of the weakest group and give the strongest group;27: to eliminate the population group mth that has no weak population (NPwm=0) and give the strongest group;28: end whileIn this paper, using an ensemble of different mutation strategies in CCDE algorithm, we propose another algorithm which is called CCEDE. This algorithm is also compared with other proposed algorithms based on their optimization performances for ELD problems. Ensemble learning models are formed by a collection of different operator's strategies or control parameters that have been proven to be very effective in an online manner including, a multi-strategy ensemble BBO (MsEBBO) for ELD problems [100], the proposed ensemble of mutation strategies and parameters in DE (EPSDE) algorithm [101], an ensemble of Discrete DE (eDDE) algorithms where each parameter is set and crossover operator is assigned to one of the parallel populations [102], an ensemble of different neighborhood sizes (NSs) with online self-adaptation to the original multi-objective EA based on decomposition (MOEA/D) [103], and an ensemble of niching algorithm (ENA), which is realized using four different parallel populations [104]. The experimental and simulation results obtained from proposed ensemble learning models of the above literature show that the algorithms with ensemble learning method have the best performance compared with results obtained by to the original algorithms.Flow chart of scheme CCDE with different mutation strategies, CCEDE approach is shown in Fig. 8. In this method, each group produces new generations of population by its own special and different mutation strategy. According to the experience gathered by simulations, CR/best is selected as crossover operator for all groups; the selected case is just CR/current crossover operator for the first group; the group with mutation strategy DE/best/1 algorithm. Each group, which becomes weak with its special mutation strategy, gradually loses its members so that it is removed and members of the weaker mutation can produce new generation with a stronger mutation.In this section of study, three benchmark functions for experiments were optimized, aimed at deeply understanding the influence of the two original DE variants (DE/best/current/1 and DE/rand/current/2) and assessing the effectiveness of the scheme colonial competitive and CR/best operator using proposed equivalent algorithms (CCDE/best/best/1 and CCDE/rand/best/2). The three benchmark functions [92–95] are listed as follows:(1)Sphere unimodal function,f1=∑j=1Dxj2with xjϵ(−100, 100) and f(x)=0.Rosenbrock's unimodal function,f2=∑j=1D−1100(xj2−xj+1)2+(xj−1)2with xjϵ(−30, 30) and f(x)=0.Rastrigin's multimodal function,f4=∑j=1Dxj2−10cos(2πxj)+10with xjϵ(−5.12, 5.12) and f(x)=0.Sets used parameters in the paper for all optimization algorithms based in the DE literature [92–95] are listed in Table 1; the parameters best used in the simulation of experimental study, and DE algorithms used in the experiments are run with the same number of times, equal to 30 run. The dimensional (D) sizes of three benchmark functions are set to 30 and 100 in this study, respectively. The best results obtained of the average value of the best (Mean) and their standard deviations (Std. Dev.) using two DE variants in 30 runs are provided in Tables 2 and 3, respectively. Overall, as observed in Tables 2 and 3, the simulation experimental results show that the scheme colonial competitive and CR/best operator can obtain more good results on three well-known optimization functions. Also, the performance graphs of the DE algorithms variants on all of the benchmark functions are illustrated in Fig. 9. This figure shows that the scheme colonial competitive and CR/best operator achieves better results than other algorithms on the majority of test functions as well.In this study, the following procedure is used to employ proposed algorithms for ELD problems:Step 1: to set the parameters F, CR/best, CR/current, NP, NPb, Itermax, α, and call out the needed information for testing the system units, such as ag, bg, cg, eg, fg,Pg0, Pg,min, Pg,max, DRg, URg, (g=1: Ng) with real losses PL, load demand total PD, power loss coefficients matrix B, and setting the first iteration number Iter=0. Set these parametersF=randgi(0,1), CR=CR/best=CR/current=0.5, NPb=8 and α=0.1 in the paper for all optimization algorithms used in the DE literature.Step 2: to produce the initial population matrix [x0] of algorithm with following equation:(43)PgL=maxPg,min,Pg0−DRg,PgU=minPg,max,Pg0+URg,PgL≤Pg≤PgU,(44)x0,jiNP×Ng=PgL+randi,j(0,1)×(PgU−PgL)NP×Ng=P0,11,P0,21,…,P0,g1,…,P0,Ng1…P0,1NP,P0,2NP,…,P0,gNP,…,P0,NgNP.Step 3: to calculate ELD problem of the objective function F(Pg) by imposing the constrained ELD problems, power generation-demand balance (2) and the power limit constraint (4) for every available answer in the initial population of algorithm. The flowchart of constraint-handling procedure of ELD problem is shown in Algorithm 2.Algorithm 2The constraint-handling procedure of ELD problem for initial population.1: fori=1 to NPdo2: to product index array of ith initial population randomly(i.e. 10-unit, normal index=[(1) (2) (3) (4) (5) (6) (7) (8) (9) (10)], production index=[4 2 8 1 0 3 1 6 5 7 9]);3: forg=1 to Ngdo4: to set I=index (g) (i.e. index (1)=4);5: to calculate function PLby (3);5: to calculate functionP0,Iiby:P0,Ii=PD+PL−∑g=1g≠INgP0,gi;{** The power limit constraint **}6: ifP0,Iiout of its range (P0,Ii<PILorP0,Ii>PIU)7: Adjust the valueP0,Iiits range (i.e.PgL≤Pg≤PgU);8: end if{** The POZ constraint (whenP0,Iiin one of its POZ (i.e. ngth)) **}9: to calculate functionPIboundiusing:PIboundi=Pgzl+Pgngu2; z=2, …, ng; ∀g∈Ω;10: ifP0,Iibigger ofPIboundi(PIboundi<P0,Ii)11: to adjust the valueP0,Iiwith valuePgnguP0,Ii=Pgngu;12: else ifP0,Ii≤PIboundi13: to adjust the valueP0,Iiwith valuePgzl(P0,Ii=Pgzl);14: end if15: end for16: end forStep 4: to select the groups of NPb strongest of initial population, such as the groups’ leader and distribute population of initial weak population among the groups with regard to the calculated normalized value of objective function using equations (24)–(26).Step 5: to produce new weak population of groups using mutation, crossover and selection operators.Step 6: to calculate of ELD problem of objective function F(Pg) in order to produce and select new weak population of all groups.Step 7: to calculate the normalized value of total power for groups.Step 8: Colonial competitive between groups, removing the weakest group (a group without weak population) and repeat 5th to 7th steps to the end of maximum number of iterations.The CCDE algorithms have been applied for ELD problems using various thermal units by input data given in the previous literature. Four ELD problems with non-convex objective functions are chosen in this paper considering different effects of the constraints, various test systems for ELD problems. The algorithms have been implemented in MATLAB 7.6 with various initial population sizes and maximum iteration numbers for efficiency algorithms to solve the ELD problems.Computation efficiency of the algorithms compares both crossover methods (crossover best and crossover current) and uses two population sizes and two maximum iterations to solve ELDVPLMF, ELDPOZ, ELDVPL, and ELDVPLPOZ problems. During this simulation study, 50 test runs were carried out for solving ELD problems through the algorithms. The proposed algorithms are compared with each other and other algorithms in robustness and solution quality by indexes the fuel cost minimum (Min. Cost), the fuel cost maximum (Max. Cost), the fuel cost mean (Mean Cost) and the cost standard deviations (Std. Dev.), and also reported results best in recent literature. Different ELD problems can be summarized as follows.This problem uses two various population size/maximum iterations (NP/Itermax); 60/150, and 35/200 via a 10-unit test system, that examined the effect of VPL and MF with power demand PD2700MW. The data for this generating unit is given by [16].The performance proposed algorithms for ELDVPLMF problem is shown in Table 4. As seen in Table 4, the best fuel cost (Min. Cost) for two various NP/Itermaxwere 623.8364 $/h for 60/150, and 623.8288 $/h for 35/200. The results were repetitively obtained by CCDE/rand/best/2 and CCEDE methods, the best result was 623.8288 $/h using the proposed CCEDE method. It can be seen that the best crossover (CR/best) gained better results for the current crossover (CR/current) in more algorithms and the proposed CCEDE algorithm also performed better than other optimization algorithms.The best solutions of generation output of each system unit for best minimum fuel cost using proposed CCEDE algorithms and those reported in the literature have been shown in Table 5. Comparison of simulation results using proposed algorithms and previous reported results for 10-unit test system are shown in Table 6. The best previous reported results is 623.8290 $/h using proposed ED-DE [81] method. Table 6 shows that the proposed CCEDE algorithm is superior to all the other methods in terms of more comparison aspects.To solve the ELDPOZ problem using 15-unit test system with total power demand PD2630MW, the considered effects of POZ and real power losses PL. The data for this generating unit is given in [105]. Table 7summarizes the simulation results for the ELDPOZ problem of the Min. Cost, Max. Cost, Mean Cost, and Std. Dev. The results are reported for all proposed algorithms with two various sizes of NP/Itermax, 60/150 and 35/200 using 15-unit test system. As shown in Table 7, the best Min. Cost, the Max. Cost, the Mean Cost, and the Std. Dev., for the two various sizes of population and iterations were 32,543.2885 $/h using CCDE/current-to-best/best/1 method, 32,543.2893 $/h using CCEDE method, 32,543.2892 $/h using CCDE/rand/best/1 method, and 0.0008 using CCDE/rand-to-best/best/2 method. All results were found using NP/Itermax=35/200 for all algorithms; the best Min. Cost for the proposed CCEDE method was found to be 32,543.2887 $/h using NP/Itermax=35/200. In this case, as the first case, the best crossover gained better results of the current crossover in more algorithms. Just in the DE/best/1 method, the results were better with current crossover (DE/best/current/1).The best solutions for the 15-unit test system from proposed DE algorithms and previous reported best results are provided in Table 8. Comparison of the fuel cost minimum, the fuel cost maximum, the fuel cost mean, and standard deviation, of DE algorithms are summarized in Table 9and these results are compared with the results of CSO [114], HBMO [105], CIHBMO [105], KHA-IV [42], TL-QCP [36], NAPSO [32], and DE [69] reported in the literature. According to Tables 8 and 9, it can be observed that the proposed CCDE algorithms always provide the same solution in more simulations, which shows the reliability of the proposed algorithms, and are capable of producing higher quality solutions than the other proposed algorithms.In case 3 of simulation ELD problem, the proposed methods have been applied to the ELDVPL problem using 40-unit generating test system that explored the effect of VPL with power demand PD10,500MW. The data for this generating unit is given in [106]. Table 10summarizes the optimization results using the proposed algorithms for two various sizes of NP/Itermax, 80/800, and 35/2000. Among the all results, the best results were repetitively obtained for the best Min. Cost 121,412.5374 $/h with sizes 35/2000 using CCDE/current-to-best/best/1, the best Max. Cost, Mean Cost and Std. Dev., 121, 413.6302 $/h, 121, 412.8507 $/h, and 0.0785, with sizes 80/800 using the proposed CCEDE method. The proposed methods can provide statistical results in a good range for ELD problem.The comparisons between best solutions obtained by different algorithms are shown in Table 11. It is found that the CCDE/current-to-best/best/1 algorithm provides the lowest minimum fuel cost among all the other algorithms without violating any system operating constraints. The computational efficiency results of the fuel cost among the 30 runs of solutions satisfying the system constraints obtained by the proposed algorithms for 40-unit test system are compared to those from other previous reported results such as CQGSO [55], CBPSO-RVM [106], RCGA [32], BF [113], FAPSO-NM [40], BBO [35], CSADHS [48], KHA-IV [42], CTLBO [120], SMPSO [125], MABC/D/Cat [128], ABCTend [129], IA_EDP [131], IHSWM [111], SOH_PSO [27], CIHBMO [105], CSOMA [108], IPSO-TVAC [122], θ-PSO [130], FA [119], aBBOmDE [115], DE/BBO [38], MDE [73], DEPSO [107], DEC-SQP [41], CDEMD [123], and DE [121], as shown in Table 12. It is clearly visible that the proposed CCDE algorithms outperform all previous reported algorithms in different terms of achieving the fuel cost for this test system.It is a complete and real ELD problem because it considers all the units constraints and problem limits using of 140-unit large-scale test system that investigated the effect of VPL and POZ with power demand PD49,342MW. The data for this generating unit is given in [26].Table 13summarizes statistical results of the proposed method for the fifth case. Table 13 shows the best simulation results of ELDVPLPOZ problem that is found by using the proposed CCDE/best/best/1 and CCEDE methods for all sizes of population and iterations (200/2000 and 100/4000). The best solution and the best Min. Cost of all sizes are 1,657,962.7 $/h using CCEDE method for 100/4000. Also, the best solutions were obtained by the CCDE/best/best/1 and CCEDE methods that were found to be better than the result obtained for other more statistical results.Table 14presents the solution vector Pg(g=1, 2, …, Ng) corresponding to the optimal solutions for 140-unit test system by CCEDE, CQGSO [55] and HHE [71]. Also, the best results obtained by CCEDE for 30 different independent trials are compared with other algorithms and are summarized in Table 15. The results show that the CCEDE algorithm is better than other algorithm for a large-scale system.As it can be seen in Tables 4–15, amongst the all methods, CCDE/best/best/1 and CCEDE methods performed the best in several solutions. Table 16shows the evaluation function values %ΔMin. Cost (45) and %ΔSD (46) of both uses of crossover operation. It performs amongst the all methods with the best crossover operation generated in good ranges compared to the results obtained for the current crossover operation. The best crossover operation method was successfully implemented except the original DE/best/1 method. As shown in Table 16, the CCDE methods with the best crossover and random mutation operations generated %ΔMin. Cost and %ΔSD were the best (bigger) solutions, hence the best crossover operation performance was observed in random mutation operations that had the most and best mutation operations.(45)%ΔMin. Cost=Min. Cost(current crossover)−Min. Cost(best crossover)Min. Cost(current crossover)×100(46)%ΔSD=Std. Dev.(current crossover)−Std. Dev.(best crossover)Std. Dev.(current crossover)×100Table 17shows the comparison between operating cost within Best Min. Cost through ranking methods using CCDE methods for different test systems. Table 17 reveals that the proposed CCEDE, CCDE/best/best/1 and CCDE/current-to-best/best/1 methods have the higher probability of attaining quality solution. Tables 13–15 and 17 shows the CCDE/best/best/1 and CCEDE methods are the most robust method in the collection with changes in size of NP/Itermax, especially for real and large-scale 140-unit system. It can be seen that more proposed CCEDE methods with the increased size of Itermaxin a lower size of NP produced the better optimal solution, especially for real large-scale systems. The best simulation result was obtained from the proposed methods.Figs. 10–12show the convergence characteristics of the best solution of fuel cost for small-scale 15-unit and large-scale 140-unit test systems with each three various sizes of NP/Itermaxusing the proposed algorithms, respectively. It can be seen that the convergence had a good performance in DE algorithms with the best crossover (CR/best) and had better convergence characteristics than those of DE algorithms with current crossover (CR/current). It can be seen that DE/best/best/1, DE/rand/best/2, CCDE/best/best/1, CCEDE and CCDE/rand-to-best/best/1 algorithms converges faster than the other DE algorithms, and convergence characteristics of CCDE/current-to-rand/current/1 algorithm apparently were worse than the other algorithms especially for large-scale 140-unit system. DE/best/best/1 algorithm quickly sticks in local optima and heavily suffers from convergence to a local optimal point. However, due to the utilization of different mutation and cross over strategies in the searching process, CCEDE algorithm has suitable convergence rate and constant drop in finding the ultimate optimal solution under different conditions. Different size of the system, number of repetitions and different populations show favorable results both in convergence and ultimate optimization solution.The CCDE/best/best/1 algorithm used for large-scale 140-unit system has a better convergence profile in comparison with smaller 15-unit system with regard to the used NP/Itermaxvalues and has the best convergence for 4000/100 ratio among all algorithms. In general, the proposed CCDE algorithm has more persistent changes for optimization and suffers less from problems in convergence to local optimal points compared to the original DE algorithm.This paper presents novel colonial competitive DE (CCDE) methods and a colonial competitive ensemble of CCDE methods. The effectiveness and robustness of the CCDE methods were tested on four ELD problems using four small/medium/large-sized power systems, including the systems with 10, 15, 40, and 140 generating units, and statistical results were compared with the reported results in literature. The simulation results clearly show the convergence behavior, computational efficiency, and robustness of the proposed algorithms in solving the ELD problems; the proposed CCDE/best/best/1, CCDE/current-to-best/best/1 and CCEDE methods have better performance in solving the ELD problems than other proposed CCDE methods. As the simulation statistical results show, the proposed algorithms are compared with the recently reported results of other heuristic optimization techniques in literature. The proposed CCDE methods outperform the other methods and are able to reach the solutions that were not possible using the other techniques. It is found that more CCDE with the best crossover operator provide the lowest minimum of total cost among all the heuristic optimization techniques and confirm that more CCDE are capable of yielding a suitable balance between exploitation and exploration with a better performance in terms of efficiency and robustness. Simulation results clearly indicate that selecting various suitable DE methods stated in the studies and forming them into competitive groups, it is possible to achieve a strong algorithm for optimization functions. These facts show grouping different algorithms in recent studies and then define a special function in order to organize colonial competition between these groups’ that leads to an optimized, stronger and more robust algorithm, which can be one of our future works. One of the other prospects of the study is to use new DE methods and then compare them to the results of this paper. Thus, the proposed algorithms can be utilized for different problems in power systems, engineering, and industrial problems.

@&#CONCLUSIONS@&#
