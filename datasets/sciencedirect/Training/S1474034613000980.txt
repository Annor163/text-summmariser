@&#MAIN-TITLE@&#
Comparison of genetic algorithm to particle swarm for constrained simulation-based optimization of a geothermal power plant

@&#HIGHLIGHTS@&#
Genetic algorithm compared to particle swarm for optimization of a geothermal power plant.PSO achieves better specific work output across a range of algorithm control parameters.PSO converges to optimum solution with lower computation cost.

@&#KEYPHRASES@&#
Genetic algorithm,Particle swarm optimization,Simulation-based optimization,Energy system optimization,Geothermal power plant,

@&#ABSTRACT@&#
The performance of a genetic algorithm is compared with that of particle swarm optimization for the constrained, non-linear, simulation-based optimization of a double flash geothermal power plant. Particle swarm optimization converges to better (higher) objective function values. The genetic algorithm is shown to converge more quickly and more tightly, resulting in a loss of solution diversity. Particle swarm optimization obtains solutions within 0.1% and 0.5% of the best known optimum in significantly fewer objective function evaluations than the genetic algorithm.

@&#INTRODUCTION@&#
Approximately 32 TW of geothermal power are transferred from the interior of the Earth into the Earth’s crust, arising from the heat created in the Earth’s early gravitational collapse as well as radioactive decay within the Earth’s interior [1]. As of 2010, approximately 11 GW of installed geothermal electrical generation capacity is installed worldwide, with approximately 2.5 GW being installed in the United States. Recent studies indicate that through exploitation of existing geothermal resources and feasible development of available resources, there exists an additional 518 GW of geothermal electric resources in the western U.S. [2]. This is nearly half of the total installed electric generation capacity currently in the United States. As the United States and the world continue to develop geothermal power to meet ever-growing electrical power demand, engineers and policy makers will require data on the feasibility and optimum design of geothermal power plants across a spectrum of geothermal resource conditions and climates. As such, there exists a need for scientifically sound design guidance of this type. As a first step in determining optimum plant design across the spectrum of geothermal resources and climates, effective techniques for optimizing geothermal power plants must be investigated.In this paper, a genetic algorithm (GA) is compared to a particle swarm optimization (PSO) method for the constrained, non-linear, simulation-based optimization of a double flash geothermal power plant. This common geothermal power plant design serves as an effective baseline model for the comparison of optimization algorithms. The optimization algorithms are coded in MATLAB, while the evaluation of the objective function and constraint violation depends on a thermodynamic simulation performed in the software package Engineering Equation Solver. Previous literature on the optimization of double flash geothermal power plants provides significant insight into the relationships between the objective function and the decision variables, but is limited in two significant ways. First, computationally intensive grid-search methods are used, which only allows investigation of a limited solution space [3]. Second, there are vital real-world constraints present in every double flash geothermal plant, described in Section 2.3, that are either ignored or accounted for in an insufficient manner [3,4]. In this work, genetic algorithms and particle swarm optimization are used to allow thorough investigation of the solution space while incorporating these real-world constraints in a rigorous manner. At a more general level, van der Lee et al. describe the use of both Quasi-Newton and “Derivative Free” optimization methods on five generic Rankine cycle power plants [5], while Koch et al. present the use of a genetic algorithm to optimize both the process parameters and the system superstructure of a combined cycle power plant [6]. Both of these studies indicate that sophisticated optimization algorithms hold promise for the simulation-based design of thermal power plants, but neither includes constraints that depend on the simulation results. Elbeltagi et al. compare five separate population-based heuristic algorithms across three non-simulation-based benchmark optimization problems and show that particle swarm optimization performs best with respect to finding feasible solutions as well as the quality of those solutions [7]. Finally, Bornatico et al. describe the use of particle swarm optimization for the constrained simulation-based optimization of a solar thermal energy storage system [8]. Additionally, Bornatico et al. compare the optimum solution achieved by particle swarm optimization to that achieved by a genetic algorithm and show that the optimum solutions are similar. While the design of a solar thermal energy storage system is fundamentally different than that of a thermal power plant, the work of Bornatico et al. provides useful insight into the use of particle swarm optimization and genetic algorithms for constrained simulation-based optimization.As such, this work contributes to the technical literature as follows. Specifically, it improves upon previous work in the design of double flash geothermal power plants by including a comprehensive search space and accounting for real-world constraints. In a broader sense, it expands upon previous work in simulation-based optimization by including non-linear constraints that are intrinsic to the simulation results. Finally, it provides a rigorous comparison of particle swarm optimization to genetic algorithms for a prototypical constrained, non-linear, simulation-based optimization problem.A schematic of a double flash geothermal power plant is shown in Fig. 1. Geothermal brine exits the production well (1) as a saturated liquid above atmospheric pressure. After passing through a throttle valve, the brine (2) enters a separator where saturated vapor (4) is sent to a high pressure turbine while the saturated liquid (3) undergoes a second throttling process before entering the flash vessel (6). The lower pressure saturated vapor (8) exits the flash vessel to combine with the exhaust of the high pressure turbine (5) before entering a low pressure turbine (9). The mechanical work of both turbines is used to generate electrical power via a generator. The turbine exhaust (10) is condensed in a condenser (11), while the saturated liquid exiting the separator (7) is reinjected into the geothermal reservoir via an injection well.There are two independent variables that can be varied in order to maximize the performance of the plant. These are the temperatures at which the separator,Tsep, and flash vessel,Tflash, operate. In the case of this analysis, these two temperatures describe state 2 and state 6:(1)T2=Tsep,and(2)T6=Tflash.In the analysis of geothermal power plants, the most common and universally applicable performance metric isβ, the specific work output of the power plant, with typical units of J/kg [3,4]. This metric describes the amount of energy extracted as electrical power from each kilogram of geothermal brine entering the plant. As the aim is to maximize specific work output, the optimizations carried out in this work are formulated as maximization problems. Neglecting losses in the electrical generator (which has typical efficiency>98% [9]), specific work output is calculated as(3)β=Ẇtotalṁ1,where total power output,Ẇtotal, is the sum of the power output from the low pressure turbine and the high pressure turbine(4)Ẇtotal=Ẇlpt+Ẇhpt.The calculation of specific work output and the appurtenant thermodynamic analysis are described in detail in Appendix A. Simulation of the system thermodynamics requires the calculation of intrinsic thermodynamic properties such as entropy and enthalpy from the non-linear correlations provided by Haar et al. in the NBS/NRC Steam Tables [10]. These calculations are completed in the software package Engineering Equation Solver [11], as it produces accurate results across a wide range of system states and is capable of interfacing directly with MATLAB. As seen in Appendix A, specific work output is a non-linear objective function that is calculated through detailed simulation of the system thermodynamics.There are several constraints that must be met to ensure effective plant operation. The first of these is the upper limit on silica saturation index (SSI), the details of which are described in Appendix B:(5)SSI≤1.2.The value of silica saturation index (SSI) depends on both decision variables, and is calculated through the iterative solution of polynomial and exponential functions, yielding a non-linear constraint. Additionally, there is a lower limit on the quality of steam as it exits each turbine section, which prevents excessive damage to the turbine blades [4,12]:(6)x5≥0.85,and(7)x10≥0.85.These constraints are also non-linear, as the values ofx5andx10depend on both decision variables and are calculated as part of the thermodynamic simulation carried out in Engineering Equation Solver. Finally, a linear constraint places a lower limit onTflashto allow for unpumped reinjection of the saturated liquid entering the injection well [4]:(8)TFlash≥102°C.Heuristic optimization techniques have been developed for optimization problems in which problem size or complexity prevent the use of analytical or exhaustive optimization approaches. Like many simulation-based optimization problems, the design of a double flash geothermal power plant meets these qualifications. Heuristic methods are based on finding the best possible solution by using knowledge of the search space, information gained in the optimization process, and sound judgment. While the strict classification of algorithms is difficult, several prototypical algorithms are typically classified as heuristics. These include tabu search, simulated annealing, genetic algorithms (GA), evolutionary programming, evolution strategies, and particle swarm optimization (PSO). Of these, both tabu search and simulated annealing are designed for use in combinatorial optimization problems, with tabu search acting as a local search strategy [13], and simulated annealing focusing on global optimization [14]. Genetic algorithms are among the most widely adapted heuristics, and have been widely used in the optimization of thermal power systems [6,15–17]. Evolutionary programming shares many similarities with genetic algorithms, but little research exists showing their application to thermal systems [18]. Evolution strategies are also similar to genetic algorithms and have been used in thermal system design [19]. A rapidly growing field in heuristic optimization is that of swarm intelligence, with particle swarm optimization showing great promise in the field of thermal power systems design [8,17]. As such, genetic algorithms (without the added complexities of evolutionary programming and evolution strategies) and particle swarm optimization are chosen as the best candidates for comparison in this work.A genetic algorithm (GA) is coded as a new implementation in MATLAB following the formulation of Deb [20]. MATLAB is used as it is widely available and allows for rapid and effective code development as well as a simple interface with Engineering Equation Solver. This genetic algorithm utilizes a tournament selection process for efficient constraint handling as well as simulated binary crossover and parameter-based mutation operators. As the goal of this work is to compare basic implementations of each algorithm, this algorithm does not include any other techniques such as “niching” for improving solution quality. A pseudo-code description of the genetic algorithm used in this work follows:Lett=0be the iteration counter;Lettmaxbe the maximum number of iterations;Letnxbe the number of decision variables;Letnsbe the population size;Setns=Kp·nx, whereKpis a constant;Create a randomnx-dimensional population,P(1), to consist ofnsindividuals;fort=1:tmaxEvaluate the objective function,f(xi(t)), and constraint violation,C(xi(t)), of each individualxi(t);Select the mating pool,M(t), through tournament selection;Create offspring,P(t+1), using simulated binary crossover and parameter-based mutation onM(t);Advance to the next iteration,t=t+1;endThe details of tournament selection, simulated binary crossover, and parameter-based mutation are described by Deb [20–22]. The pertinent algorithm control parameters recommended by Deb and used in this work areηc=1, which determines the magnitude of crossover,psbx=0.5is the probability of crossover, andηm,initial=100determines the initial magnitude of mutation. A value ofKp=15is used to set the population size.A particle swarm optimization (PSO) algorithm, as originally described by Kennedy [23], is also coded as a new implementation in MATLAB, using the formulation and nomenclature presented by Bornatico [8]. This particle swarm optimization algorithm is described in pseudo-code as:Lett=0be the iteration counter;Lettmaxbe the maximum number of iterations;Letnxbe the number of decision variables;Letnsbe the population size;Setns=Kp·nx, whereKpis a constant;Create a randomnx-dimensional set of particle positions,P(1), to consist ofnsparticles;Create a randomizednx-dimensional set of particle velocities,V(1), to consist ofnsvelocities;fort=1:tmaxEvaluate the objective function,f(xi(t)), and constraint violation,C(xi(t)), of each individualxi(t);Combinef(xi(t))andC(xi(t))to create total objective functionF(xi(t));Calculate new particle velocities,Vi(t+1);Calculate new particle positions,Pi(t+1);Advance to the next generation,t=t+1;endTotal objective function,F(xi(t)), is calculated by subtracting the magnitude of any constraint violation from the lowest known feasible objective function value. In this way, it is insured that all infeasible solutions have lower objective function values than that of the lowest known feasible solution. Particle velocities are calculated as(9)Vi(t+1)=ϕ(t)·Vi(t)+α1·(γ1·(Pi,best-Pi(t)))+α2·(γ2·(G-Pi(t))),whereγ1andγ2are random numbers between 0 and 1.Pi,bestis the best position of particle i so far, and G is the best position of any particle in the population so far. Particle positions are then calculated as(10)Pi(t+1)=Pi(t)+Vi(t+1).The control parameters used in the particle swarm optimization of this work are the “acceleration constants”α1=1andα2=1, chosen to set the relative value of the individual’s knowledge as compared to the entire population’s knowledge. The “inertia constant”ϕ(t)decreases linearly with iteration number fromϕinitial=1toϕfinal=0, allowing the particles to effectively search a smaller area as the algorithm converges by reducing the impact of a particle’s previous velocity. Again, a value ofKp=15is used to set the population size.

@&#CONCLUSIONS@&#
Comparison is made between a genetic algorithm and a particle swarm optimization method for the optimization of a double flash geothermal power plant. The genetic algorithm and particle swarm optimization methods are implemented in MATLAB in their basic form and used to perform 30 identical constrained, non-linear, simulation-based optimization runs. Both algorithms are capable of finding feasible, near-optimum solutions. The particle swarm optimization consistently converges to better (higher) optimum objective function values, as proven by a single-tailed paired t-test. This is a result of the genetic algorithm converging more quickly with respect to iterations and more tightly with respect to the decision variable space, resulting in a premature loss of solution diversity. Computational runtime for both algorithms is equal, as it is dominated by the time required for each objective function evaluation, and each optimization run requires the same number of objective function evaluations. However, the particle swarm optimization obtains solutions within 0.1% and 0.5% of the best known optimum in significantly fewer objective function evaluations than the genetic algorithm. This quality could be exploited in a situation where computational runtime becomes a limiting factor. Sensitivity analysis shows that varying algorithm control parameters can improve or harm algorithm performance, but the worst-case PSO implementation still achieves higher optimum objective function values than the best-case GA implementation. These results indicate that particle swarm optimization has value as a design and decision-making tool for engineers of geothermal power plants as well as engineers of other constrained simulation-based designs.This work shows the ability of particle swarm optimization and genetic algorithms to include a comprehensive search space and account for real-world constraints in the design of double flash geothermal power plants. Additionally, it expands upon previous work in simulation-based optimization by including non-linear constraints that are intrinsic to the simulation results. Finally, it provides a rigorous comparison of particle swarm optimization to genetic algorithms for a prototypical constrained, non-linear, simulation-based optimization problem.