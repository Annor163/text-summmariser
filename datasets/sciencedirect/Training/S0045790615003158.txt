@&#MAIN-TITLE@&#
A virtualization approach to develop middleware for ubiquitous high performance computing

@&#HIGHLIGHTS@&#
Uware is a virtualization-based approach to effectively improve the UHPC application design.Uware is an alternative approach to minimize the overhead and to develop a middleware.The approach relies on contention management and zero copy buffer mechanism to from isolation model.

@&#KEYPHRASES@&#
Middleware,Ubiquitous high performance computing,Virtualization,Concurrency control,

@&#ABSTRACT@&#
In ubiquitous high-performance computing (UHPC), performing concurrent services is an important task of middleware. Because a major development effort is not easily achieved, isolating a virtual machine (VM) may be a helpful solution but will likely suffer from additional overhead costs. This challenge can also be resolved by reusing the device driver. However, these solutions are difficult to implement without the VM technique. In this study, we present an alternative approach to minimizing overhead and develop a middleware called userspace virtualized middleware (Uware). Instead of bypassing the VM, the proposed approach depends on userspace transparency and contention management to shift the VM concept into middleware. We introduce two strategies to enhance the system adaptively: comprehensive restructuring by simplifying the VM memory mechanism and implementing zero-copy buffers to reuse devices. The result demonstrates that Uware is feasible and could be applied in a broad variety of UHPC.

@&#INTRODUCTION@&#
Ubiquitous high-performance computing (UHPC) is an I/O-intensive application that contains various activities to support intelligent services. Currently, various services and devices are required to perform service consolidation; this causes an integration issue for data communication [1]. This issue becomes a challenge to ease platform integration with various heterogeneous devices. Many studies have been proposed to solve this challenge because they always result in their own weaknesses. For example, middleware can provide central control on data distribution services. These elastic middleware methods have been shown to improve throughput, including component-based, content-aware, and qos-aware software [2]. Though they are effective at dispatching services, they regularly need to be re-written to resolve conflicts and are dependent on operating system (OS) services. A customized OS [3] could provide an adaptive environment, though customized benefits typically have a large implementation overhead. Two major implications of this challenge must be solved. First, full reuse of a driver is difficult to achieve. In addition, undocumented or, in the worst-case scenario, incorrectly documented OS behavior makes driver reuse with a fully emulated execution environment questionable. The second implication of the large fraction of driver code in a mature OS is the extent of driver crashing events. Conversely, this challenge could be addressed by using a virtual machine (VM), which can improve concurrency and allow high-performance computing. However, if middleware closely couples an application and its virtualization, a dominant factor to decrease performance is I/O activity [4]. This factor occurs and may be over-provisioned in both memory and computation resources. Although high-speed interconnects, such as InfiniBand, bring high-performance I/O into the realm of virtualization, more adaptive infrastructures are still needed to support UHPC; thus, the observed experimental results in a wide spectrum of current studies have proposed to improve performance. For example, Spear et al. [5], used a comprehensive strategy for contention management to provide fairness and good throughput in transactional memory. Liao et al. [6], proposed a new server I/O architecture using extended on-chip direct memory access (DMA) descriptors. As reported in these studies, we discuss several intuitive solutions and find that the following issues are required for UHPC:1.Resource modeling and dispatching to single services. A user may require one service to minimize execution duration while satisfying certain constraints in terms of reputation. Concurrently, another user may give more importance to a job than another previous request. An isolation-oriented approach is thus required.Portable and lightweight service execution in a dynamic environment. By exploiting the intelligence found in modern hardware, the aforementioned approach can significantly improve I/O performance. However, maintaining the performance between the OS and UHPC will be critical. Therefore, thin-layer virtualization yields an opportunity to achieve lightweight and portable solutions.Therefore, if middleware has strong isolation, which is similar to VM, and removes memory mapping overhead, middleware may be feasible to support UHPC. The observed experimental results show that memory protection produces unnecessary overhead in I/O operations. Instead of depending on a VM, we leave all of the drivers and services in their original and fully compatible execution environment per the original OS. To support two issues with UHPC, we propose a pragmatic approach to fully reuse and provide strong isolation of legacy device drivers. In the first method, we design a new memory mapping mechanism in the userspace to achieve userspace transparency. This mechanism is motivated using VM bypassing and direct I/O and will significantly simplify the protection mechanism. We then shift the VM concept into middleware to achieve strong isolation. These two strategies also reduce overhead. The proposed strategies are now presented to resolve the overhead of massive context switching and data copy. The first strategy uses contention management, which uses an I/O ring for its basic construction; the second strategy is a zero-copy I/O architecture. Ultimately, VM concept shifting is performed by the proposed approach and is optimized by two strategies to build a userspace glue prototype called userspace virtualized middleware (Uware). We can nearly guarantee that the self-adaptive properties of the system are preserved and that incompatibilities are limited to the performance overhead introduced by VM multiplexing. Compared with previous studies, the proposed system has the following advantages. First, it does not require hardware support and thus reduces costs. Second, unlike VM and OS bypass approaches, the proposed system is relatively simple because it uses buffering control and then performs path optimization to adapt with respect to different OSs. Third, the proposed guest I/O path uses hardware to achieve isolation from its special architecture. The remainder of this paper is organized as follows. Section 2 discusses the related work. We describe the motivation of Uware and introduce their challenge in Section 3. Section 4 presents the proposed virtualization approach. Section 5 presents the strategies proposed to enhance system adaptively. We then describe certain implementation details in Section 6 and discuss related issues in Section 7. The experimental environment and results are shown in Section 8. Finally, we conclude this study in Section 9.

@&#CONCLUSIONS@&#
