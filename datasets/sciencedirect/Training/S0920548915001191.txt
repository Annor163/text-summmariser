@&#MAIN-TITLE@&#
A reference model for the timing analysis of heterogeneous automotive networks

@&#HIGHLIGHTS@&#
We present a reference model for scheduling analysis of heterogeneous FlexRay/CAN networks.The proposed reference model can be used to analyze temporal characteristics of systems and their local components.The use of the proposed reference model is illustrated with a complete example.

@&#KEYPHRASES@&#
FlexRay,Automotive,Real-time,

@&#ABSTRACT@&#
Graphical abstract

@&#INTRODUCTION@&#
Typically, a modern vehicle embedded system is sub-divided into functional domains, each one having its own characteristics and constraints. Two of these domains are specifically related to the vehicle real-time control: the power train, which is related to engine and transmission control, and the chassis, which is related to the suspension control, steering and brakes. Safety issues are fundamental in these domains. In systems currently being used in vehicles, these functions are distributed across multiple electronic control units (ECUs) that are connected by a data communication network. Within this context, networks and communication protocols are of utmost importance since they support the integration of distributed functions, reducing the cost and complexity of cabling and providing means for the implementation of advanced fault tolerance techniques.The Controller Area Network (CAN) has been a de facto standard for communication in automotive applications. More recently, new protocols for automotive applications were developed [37]. The FlexRay Communication System [10] was designed for communications in vehicular domains with high requirements for determinism, synchronization and bandwidth such as chassis and powertrain [37,7,22].Although CAN has low data rate and frame payload when compared to FlexRay, it has low cost and meets the requirements of several vehicular applications. Even more, there is a whole class of existing CAN systems for vehicular applications with low performance requirements that can be reused even in modern high-end vehicles. Examples of such potentially reusable systems are sensors and actuators manufactured by Bosch GmbH, such as their ABS M4 Kit or their HP Injection Power Stage [5]. FlexRay, on the other hand, is designed for use in backbones and/or in applications with high requirements of bandwidth, determinism and synchronization. Therefore, the coexistence of FlexRay and CAN protocols in the same vehicle is expected, with several advantages such as costs reduction and reuse of legacy components [25].If ECUs connected to a network segment exchange information with ECUs connected to a network segment running a different protocol, it is necessary for a network gateway to manage such exchange [16]. Literature addressing vehicular networks presents several methods for the timing analysis of ECUs (including gateways) and CAN and FlexRay networks. To the best of our knowledge, there is not a reference model for the holistic time analysis of heterogeneous FlexRay/CAN systems. Although vehicular standards such as AUTOSAR [3] define architectures for complete vehicular systems, they don't address the issues related to the timing analysis.Therefore, the objective of this work is to propose a reference model for timing and schedulability analysis of heterogeneous FlexRay/CAN networks interconnected by gateways. The proposed reference model uses the concept of standardized components and the concept of a flow from a sender task to a receiver task used in techniques for deadline partition. It can be used to compute not only end-to-end response times, but also to analyze local components, such as response times of messages in a specific network segment. Even more, when combined with techniques such as deadline partitioning [15], the proposed reference model can be used in the design of an automotive system in such a way that the design of a subnetwork can be done with a certain degree of independence from the overall system.Although there are many papers describing methods for the timing analysis of the different elements of an automotive network, such as, CAN and FlexRay buses, in an automotive network all the elements must work together, and the timing requirements are end-to-end, and not associated with specific components of the embedded electronic solutions. In a real scenario, there may not be global clock synchronization among all components, and then the timing analysis must consider the interplay among the components. To the best of our knowledge, this is the first paper putting together the several aspects of a heterogeneous automotive network and providing a general framework for its timing analysis, combining previously published specific analysis.The remaining of this document is divided as follows. Sections 2, 3 and 4 present, respectively, the basic concepts of FlexRay, CAN and automotive gateways. Section 5 presents the proposed reference model, Section 6 presents relevant techniques for time analysis, Section 7 presents an example illustrating the use of the proposed reference model and, finally, Section 8 presents the conclusions and final remarks of this work. In Appendix A we include a list of symbols, parameters and variables defined or used through this paper.FlexRay is a communication protocol for automotive systems with high communication requirements for determinism, synchronization, bandwidth and reliability in automotive systems, such as those related to X-by-Wire. FlexRay provides static and dynamic methods for the transmission of messages, incorporating the advantages of well-known synchronous and asynchronous protocols. Among other features, it provides fault-tolerant clock synchronization, collision-free medium access, two communication channels with transmission rates up to 10Mbit/s per channel and a data payload up to 254bytes per frame [10].In FlexRay, the media access control (MAC) is ruled by a communication cycle with a predetermined size FCbus. A FlexRay cycle (FC) runs periodically from the beginning to the shutdown of the network. The cycle number is controlled by the variable vCycleCounter that is incremented by one at the beginning of each communication cycle. vCycleCounter ranges from 0 up to 63, and when the maximum value is reached vCycleCounter is reset to zero in the next communication cycle instead of being incremented. According to [22,18] the fixed size of a FlexRay cycle imposes a restriction upon the periods of message streams in a FlexRay system: FCbusmust be equal or less than the value of the minimum period among the streams of the system plus the size of one static slot (Eq. (1), whereTminFRis the minimum period among the periods of FlexRay message streams and gdStaticSlot is the size of a static slot), or a FlexRay message may miss its deadline.(1)FCbus≤PminFR+gdStaticSlotEach FlexRay cycle is structured as a sequence of four segments: a Static Segment (ST), a Dynamic Segment (DN) and two control segments, the Symbol Window (SW) and the Network Idle Time (NIT) (Fig. 1).The ST is based on the Time Division Multiple Access (TDMA) technique. It has size STbusand is composed of a number gNumberOfStaticSlots of static slots that are incrementally counted at each communication cycle. Each static slot is composed of the same number of macroticks whose value is set by gdStaticSlot. In a FlexRay cluster, gNumberOfStaticSlots and gdStaticSlot are global values that must be defined during the design phase. Arbitration in the ST is performed by assigning one or more frame identifiers (FrameIDs) to each network node. When the FrameID assigned to a specific node matches the static slot counter, that node is allowed to transmit. The ST supports a deterministic communication environment, since it is exactly defined when each frame will be transmitted in a given channel [37].The length Ch,jSTin seconds of a FlexRay static frame mh,jwith lmh,jSTdata bytes, including frame overheads, is given by:(2)Ch,jST=88bit+lmh,jST⋅10bitτbitFRwhere τbitFRis the time required to transmit one bit.The FlexRay Dynamic Segment is also divided into dynamic slots, and the identifiers of the dynamic slots (FrameIDs) are allocated to the network nodes. The DN MAC is based on the Flexible TDMA (FTDMA) [22]: the segment is divided into gdNumberOfMinislots minislots (MS) that have equal size gdMinislot, and frames are transmitted within dynamic slots. Dynamic slots can have variable sizes and are superimposed on the minislots. We will abbreviate gdNumberOfMinislots as gdNofMS.Each node has a parameter pLatestTx. According to the FlexRay specification, pLatestTx is defined for each node and represents the latest transmission instant at which the node can transmit in the DS. The value for pLatestTx is given by pLatestTx=gdNofMS−aMinislotPerDNamicFrame+1, where aMinislotPerDNamicFrame is the number of MS needed for the longest message of the node [27].When a node is allowed to transmit in a certain dynamic slot one of the following situations may occur: I) If there is no data to transmit and zMinislot haven't reached the end of DN, the dynamic slot has the size of only one MS; II) If there is a frame to be transmitted, and zMinislot has not reached pLatestTx of the node, the dynamic slot uses a number of MS large enough to accommodate the transmission; or III) If there is a frame to be transmitted, zMinislot hasn't reached gdNofMS, but zMinislot has reached pLatestTx, the dynamic slot uses only one MS.The length Ch,jDNof a dynamic frame mh,jwith lmh,jDNdata bytes, including frame overheads, is given by:(3)Ch,jDN=lmh,jDN⋅16bit+lmh,jDN⋅4bit+OFτbitFRwhere lmh,jDN⋅16bit is the signal data in multiples of two byte words, lmh,jDN⋅4bit+OFis the framing overhead and τbitFRis the transmission time of a single bit in the FlexRay bus [10].Since a FlexRay DN frame is superimposed over the minislots of the dynamic segment, its size is usually represented as integer multiples of MS [24]. Therefore, the length CmDN(MS) in integers of MS is given by:(4)Ch,jDNMS=Ch,jDNTMSwhere TMSis the length in seconds of a minislot.FlexRay allows the use of slot multiplexing, which means that a FrameID can be associated with multiple message streams from a same node, provided that the association occurs only at specific FlexRay cycles [26,36,14]. The AUTOSAR Specification [3] restricts cycle repetition to be values that are a power of 2 with the exponent ranging from 0 to 6, with that assignments that repeat every 1, 2, 4,…, 64 FCs can be defined [26].More information about FlexRay and its segments can be found in [10,22,24].The Controller Area Network (CAN) is a digital serial communication bus defined by the CAN Specification Version 2.0 [4] and ISO Standard 11898 [13]. It has transmission rates up to 1MB/s and frames with payload up to 64 bits (8 bytes).CAN employs a fixed priority non-destructive media access control scheme based on Carrier Sense Multiple Access/Non-Destructive Bit-Wise Arbitration. In this scheme, each network node contains message streams, and each message stream is associated with a CAN network identifier. In this work, we will refer the CAN identifier as CANID. During execution time, all network nodes wait until the bus is free to start transmission. If two or more nodes start transmitting at the same instant, a node can determine if it is transmitting the higher priority message (based on the CANID) or if it must stop transmission and wait for the next free moment through the monitoring of each transmitted data bit. In CAN, lower identifiers have the highest priorities.To guarantee a satisfactory level of synchronization between network nodes, CAN uses a technique called bit stuffing. In this technique, whenever five bits with the same value are transmitted, the sender node inserts an additional bit with the complimentary value. These complimentary bits are removed by the receiver node, but they must be considered when calculating a frame worst-case transmission time [9].The maximum transmission time Ch,jCANin seconds of a CAN frame mh,jcontaining lmh,jCANdata bytes and 11 bits identifier (standard CAN frame) is given by Eq. (5) where τbitCANis the transmission time of a single bit. Similarly, the maximum transmission time of a CAN frame in the extended format (i.e., 29 bits identifier) is given by Eq. (6).(5)Ch,jCAN=55+10lmh,jCANτbitCAN(6)Ch,jCAN=80+10lmh,jCANτbitCANAdditional and detailed informations about CAN can be found in [4] and [13].Gateway is a generic expression used to designate a device for network interconnection that operates in the network layer or above [6].According to [20], automotive gateways can be implemented at software or at hardware level. Software gateways have the advantage of making easy the standardization of components, as with the standards AUTOSAR [3] and OSEK/VDX [8].Restrictions imposed by standards can lead to high processing and/or memory requirements. Therefore, literature presents proposals of solutions for gateways based mainly on hardware components. These solutions take advantage of modern microprocessors for automotive applications, such as the microprocessors of Freescale's Qorivva MPC55xx family [11]. Proposals for hardware-based FlexRay/CAN gateways are presented in [31,29,28,30,20,25,1]. Of these works, only [25] (and complementary [1]) deals with the timing analysis of messages, being the message streams scheduling the main focus of the proposal.The objective of this work is to propose a reference model to be used in the temporal analysis of vehicular systems composed of heterogeneous networks where messages are exchange through a gateway.A heterogeneous intra-vehicular network can be composed of several components such as ECUs, tasks, message streams, network segments and gateways. Inspired by the concept of standardized components, our model is composed of standard components which have temporal characteristics such as period, execution/transmission time and deadline. Each component that composes our proposed reference model, with the related representation and formal definitions, will be presented in this section.In this work we consider a system model where each component has its own scheduler and implements its own scheduling strategy. We consider that there is no global synchronization among different network nodes or communication controllers resulting in an asynchronous system model.We consider a network topology composed of n network nodes and gateways. The related set of nodes and gateways is:(7)ℕ=N1,N2,…Nn.Network nodes are connected through a FlexRay or a CAN network segment. If a node of one network segment exchange informations with a node in a different network segment, such data exchange is performed by a network gateway. An example of the considered network topology is presented in Fig. 2.Each network node Nh, where h=1,2,…,n, is composed of a central processing unit (CPU) and a communication controller (CC). The CPU and the CC are interconnected by a controller–host interface (CHI). The CC runs independently of the CPU and implements the related network segment communication services. FlexRay CCs follow the FlexRay specification as described in [10], and CAN CCs follow the specification in [4].Each ECU runs one or more tasks. A task can be responsible, for instance, for the control of an actuator, for the reading of a sensor or for the calculation of control laws. A task Γh,iis characterized by the tuple (Ch,i,Ph,i,Di,j), where:•h=1,2,…,n denotes the node number;i denotes the number of the task;Ch,iis the task execution time;Th,iis the task minimum interarrival time;Dh,iis the task relative deadline.The utilization Uhof a node Nhis given by:(8)Uh=∑∀Γh,i∈NhCh,i/Th,i.Each task will run an infinite sequence of instances or jobs. The k-th job generated by a task Γh,iis represented by γh,ik. It is considered that a job inherits the characteristics of its related task.If a task sends data to another network node, it will be associated with a unique message stream. Message streams will be formalized in Section 5.4. Fig. 3presents examples of FlexRay and CAN network nodes.Network nodes can exchange data with nodes in different network segments through a network gateway. A gateway receives a message from a message stream of a node in the source network segment, extracts its payload, assembles a new frame with necessary headers and trailers of the destination network and send it through the output CC. The gateway architecture assumed in this work is depicted in Fig. 4.We are considering a gateway composed of one FlexRay CC, one CAN CC and a CPU. The gateway CPU contains two main tasks: one to deal with messages coming from a FlexRay segment and destined to a CAN network segment, and one to deal with messages coming from a CAN segment and destined to a FlexRay network segment. Gateway tasks follow the definitions for node tasks presented in Section 5.2. It is considered that gateway tasks are preemptive.Each gateway must be associated with at least one FlexRay ST FrameIDs and at least one CAN CANID.We consider that the association between sources and destinations (for instance, the association between an input CANID and an output FlexRay DN FrameID) is predefined.In this work we consider a distributed system that communicates by message exchanges. Such message exchanges are modeled by a set of s message streams. The message streams set is:(9)S=S1S2…Ss.A message stream can transmit its data in the static segment of a FlexRay network, or in the dynamic segment of a FlexRay network, or in a CAN network. For the sake of understanding, we will denote the set of message streams transmitting in a FlexRay network as(10)SFR=S1FRS2FR…SsFRFRand the set of message streams transmitting in a CAN network as(11)SCAN=S1CANS2CAN…SsCANCAN.Consequently,(12)S=SFR∪SCAN.Each message streamSh,j∈Scan be characterized as a tuple (Ch,j,Ph,j,Dh,j) where:•h=1,2,…,n denotes a network node or a gateway;j denotes the number of the message stream;Ch,jis the maximum amount of time required to transmit a generated message. It is assumed that Ch,jincludes both the payload and the required headers and tails and it is calculated, according to its network segment, using Eq. (2), (3), (5) or (6).Th,jis the message minimum interarrival time. As synchronous messages are periodically generated messages, Th,jis constant and equal to the generation period.Dh,jis the relative deadline of a generated message. We assume that Th,j=Dh,j.Each message stream will generate an infinite sequence of instances or messages. The l-th message generated by a stream Sh,jis represented by mh,jl. It is considered that a message inherits the characteristics of its related message stream.In this work we are interested in systems where ECUs connected to network segments with different protocols exchange informations, such as in the case when data from a sensor connected to a CAN segment is used by an ECU in a FlexRay segment. Therefore, following the notation in [21] and [36], we will represent the path between a source task and a destination task as a directed graph where a task is represented as a vertex and a message stream that manages the exchange between a source and a destination task is represented as an edge. An example of such graph is presented in Fig. 5. It must be noted that it may exist additional tasks and message streams between a source and a destination task.Each of those graphs may be represented as a set φc(where c is the flow index), whose elements are ordered according to their position in the path. Therefore, φcrepresents the path or flow between a sender and a destination task of the system.For instance, a flow varphicrepresenting the graph of the example given in Fig. 5 is defined as:(13)φc=Γ1,1S2,1CANΓ2,1S2,1FRΓ3,1.In a given flow φc,Tφcis its set of tasks, andSφcis its set of message streams. Finally, we defineΦφcas being the number of elements in the path φc, i.e., the sum of elements inTφcand the elements inSφc. We also assume that φcis composed of at least two tasks and one message stream. Each flow φcis associated with end-to-end deadline Dc. The calculation of the end-to-end worst-case response time (wcrt) of a flow will be discussed in Section 6.5.We consider that a connection between a task and a message stream or another task in a same node has no cost, being the cost considered part of the sender task computation time.In this section we will present an example that illustrates how a system can be mapped to a set of flows.Unfortunately it is difficult to obtain an example based on real systems due to commercial and industrial property restrictions. Therefore, this example is based on the examples for FlexRay and CAN networks included in Vector CANoe and CANalyzer softwares [35].The example system is illustrated in Fig. 6. This system contains a set of nodes whose tasks are listed in Table 1. It also contains two different network buses, one using CAN and another using FlexRay. The interconnection between those buses is made using a network gateway that contains a task whose function is to receive a message from the CAN bus, extract the payload from this message, pack that payload in a FlexRay frame and send that frame to the FlexRay bus.Tasks of a node may interact with tasks of another node. The relationship between tasks allocated to different network nodes, and the corresponding message stream that handles the message exchange between those tasks are listed in Table 2. Note that when the sender task is allocated to a node connected to a different network bus than the destination task, Table 2 presents the path through the network gateway.Using the relationship presented in Table 2, the corresponding flows are constructed following the explanation given in Section 5.5. The resulting flows are illustrated in Figs. 7 through 17.The response time analysis plays a key role in our reference model. In this section we will summarize relevant techniques for the time analysis of each component that composes the reference model.Traditional approaches for coordinating the transmission of messages on the FlexRay static segment usually consider slot multiplexing. Message streams have periods that are multiple of the FlexRay cycle and message generation is synchronized with the FC. FlexRay static segment is based on Time Division Multiple Access (TDMA) and FlexRay segments and static slots have fixed size. Therefore, the computing of a static message worst-case transmission time is straightforward, since we know exactly when each static slot begins [26,36]. For instance, if a FlexRay static message stream Sh,jFRhas length Ch,jFR, its worst-case transmission time Rh,jwill be given by:(14)Rh,j=Ch,jFR.A different approach to coordinate the transmission of static messages is proposed in [18]. In that work, it is proposed the use of a RT-middleware at each network node to coordinate message transmission. The RT-Middleware uses a rate monotonic coordination to define, during run-time, which message generated by the message streams of a certain node will be transmitted in the static slots allocated to that node. At predefined instants at each FC (called freezing instants), the RT-Middleware selects a message from its queues and sends it to the FlexRay CC, which in turn sends the message to the bus during a static slot of the node. The response time analysis of a message stream follows the reasoning proposed in [2] to evaluate FPS systems. The set of proposed equations will be briefly described below.First of all, the proposal in [18] considers that i) messages and static slots lengths are unitary, ii) there is one freezing instant per allocated static slot and iii) the time interval between a freezing instant and the related static slot is also unitary. The worst-case response time Rh,jlfor the transmission of a message mh,jlis then given by the sum of the following terms:•The time interval between the freezing instant and the beginning of the static slot (freezing interval) which is unitary;The interference Θh,jωdue to higher priority messages and FlexRay segments in which transmissions from the node are not allowed;One static slot for the transmission of message mh,jlitself (which is also unitary);The interference Θh,jωdue to higher priority messages is iteratively calculated using Eqs. (16) and (17).(16)Θh,j1=2+∑u∈hphj1(17)Θh,jω=1+Θh,jω−1FCbus×FCbus−Hh+∑u∈hphjΘh,jω−1Pu1,ω>1where hp(h,j) is the set of messages with priority higher than the message under analysis and Hhis the number of static slots allocated to node h. The iteration is interrupted when Θh,jω=Θh,jω−1, or when Θh,jω>Dh,jl(case where mh,jlwill miss its deadline).While the time analysis of FlexRay ST is similar to TDMA, to compute the worst-case response time (wcrt) of sporadic messages exchanged through DN is a combinatorial problem [22]. This combinatorial problem is caused manly by the fixed sizes of FlexRay cycle and segments, by the rule of the unused MS and by the restriction imposed by pLatestTx. The problem becomes even more complex when considering slot multiplexing.According to [22], the worst-case transmission time Rh,jlfor the transmission of a dynamic message mh,jlis given by:(18)Rh,jl=σh,j+Ch,jl+wh,jwhere σh,jis the longest delay suffered during one bus cycle if the message is generated by its stream after its dynamic slot has passed, Ch,jlis the message communication time and wh,jis the worst case delay caused by ST frames and higher priority DN messages.According to [22], the DN arbitration scheme makes the definition of wh,ja combinatorial problem. Due to this combinatorial problem, most proposals to compute it usually rely on some optimization technique, such as Integer Linear Programming (ILP). Examples of such proposals can be found in [27] and [32].One of the first works on the response timing analysis of the Controller Area Network was presented by Tindell et al. [33]. In that work, the authors show that the wcrt of CAN messages could be calculated, allowing projects with high levels of network utilization [9]. Posteriorly, in [9] Davis et al. show that the original set of equations presented in [33] could lead to optimistic results in some cases, and a new set of equations was proposed. The new method uses the set of equations for non-preemptive fixed priority scheduling based on [12] and the concept of busy period presented in [19]. The relevant equations of the method proposed in [9] are summarized in the following.According to [9], the wcrt Rh,jlof a message mh,jlgenerated by a CAN message stream Sh,jis composed by three elements: maximum release jitter Jh,j, transmission time Ch,jand a delay wh,j(Eq. (19)).(19)Rh,j=Jh,j+Ch,j+wh,jThe delay wh,jis composed of two elements: a blocking time Bh,jdue to messages with priority lower than mh,jl(set lp(h,j)) and an interference due to messages with priority higher than mh,jl(set hp(h,j)). Bh,jis given by Eq. (20) where lp(h,j) is the set containing messages with priority lower than mh,jl.If more than one message is generated by mh,jlduring a busy period, it is necessary to calculate the wcrt of each message in order to determine the higher wcrt among them. First, it is necessary to calculate the size th,jof mh,jlbusy period using Eq. (21). Eq. (21) starts with th,j0=Ch,jland ends when th,jz+1=th,jz. The number Qh,jof messages generated by mh,jlduring a busy period is given by Eq. (22).(20)Bh,j=maxv∈lphjCv(21)th,jz+1=Bh,j+∑∀u∈hphjth,jz+Jh,jTuCu(22)Qh,j=th,j+Jh,jPh,jThe worst case transmission time of a message q in mh,jlbusy period is given by Eqs. (23) and (24), starting with wh,j0(q)=Bh,j+qCh,jand ending when wh,jz+1(q)=wh,jz(q) or when Jh,j+wh,jz+1(q)−qPh,j+Ch,j>Dh,j(case in which the message misses its deadline). For values of q>0, an efficient initial value is given by wh,j0(q)=wh,j(q−1)+Ch,j. The wcrt of mh,jlis the larger among all wcrt of messages in Qh,j(Eq. (25)).(23)Rh,jq=Jh,j+wh,jq−qPh,j+Ch,j(24)wh,jz+1q=Bh,j+qCh,j+∑∀u∈hphjwh,jz+Jh,j+τbitCANTkCh,j(25)Rh,j=maxq=0..Qh,j−1Rh,jqOne proposed method of scheduling tasks in a hard real time system is through a Fixed Priority Scheduler (FPS), such as the Rate Monotonic (RM) scheduler. In the RM scheme, the static priority of a task is obtained from the period of that task: for any two tasks L and M, TL>TM⇒priority(L)<priority(M) [2] (being TLand TMthe periods of tasks L and M, respectively).According to [2], the worst-case response time Rh,iof a task Γh,iin a FPS system can be computed using the following equation:(26)Rh,i=Ch,i+Ih,iwhere Ih,iis the interference caused by tasks with priority higher than Γh,i(set hp(h,i)), given by:(27)Ih,i=∑∀u∈hphiRh,iPuCu.When combining Eqs. (26) and (27), the result is Eq. (28), which can be solved iteratively starting with Rh,i0=1 and terminating when Rh,iz+1=Rh,izor when Rh,iz+1>Dh,i(when Γh,imisses its deadline).(28)Rh,iz+1=Ch,i+∑∀u∈hphiRh,izPuCuIn this work we consider an asynchronous system model: each component has its own local clock and local scheduler, and implements its own scheduling strategy. But individual scheduling strategies at each system component of a distributed system, without a global synchronization scheme, may result in unpredictable waiting delays in a system component that uses as input the output of another component [17].[17] introduces the concept of asynchronous waiting delay to model the effect of those waiting delays in the end-to-end response time of a given flow. According to that work, the worst-case scenario for a task or message stream a in a flow φcoccurs when the resulting output of a task or message a−1 arrives at a immediately after the generation of a job or message by a. In this case, the output of a−1 will be considered by a only after the minimum interarrival time Taof a, resulting in asynchronous waiting delay Acgiven by:(29)Aa=Ta.Then, the end-to-end worst-case response time Ecof a flow φcis given by the sum of the response time of the source task or message stream, plus the wcrt Raof each element a in φc, plus the asynchronous waiting delay Acof each element a in φc:(30)Ec=Rsource+∑∀a∈φcAa+RaFor instance, consider a flow φc={Γ1,1,S1,1CAN,Γ2,1}. The end-to-end worst-case response time of φcwill be given by:(31)Ec=R1,1+R1,1CAN+A1,1CAN+R2,1+A2,1.It must be noted that some of literature's methods to compute worst-case response times of tasks or streams already consider the impact of asynchronous waiting delays, while other methods do not. For instance, Eq. (18), used to compute worst-case transmission times of streams allocated to FlexRay DN, already consider the case when a message is generated immediately after its associated slot has passed. In the other hand, Eq. (14), used to computed worst-case transmission times of streams allocated in FlexRay ST does not consider the effect of asynchronous waiting delays. Therefore, Eq. (30) depends on a careful analysis of the equations related to response-time analysis of each flow element.In order to validate the end-to-end wcrt Ecof a flow φc, calculated using Eq. (31), we implemented a simulator, written with the Language C. The simulator receives as input the system set of flows and their respective elements. It returns the observed wcrt of each flow and, optionally, a time line containing relevant information regarding a specific simulation. The simulations showed the importance of considering the asynchronous waiting delays in the analytical model, since they might have an important impact in the worst-case end-to-end response time.In this work we are interested in vehicular systems where a ECU connected to network segment that employs a specific communication protocol, say, CAN, exchanges information with other ECUs which can be connected to another segment with a different communication protocol such as FlexRay. A problem related to the design of such systems is to satisfy end-to-end real-time constraints as, for instance, a flow end-to-end deadline. According to [21], two basic approaches exist to deal with an end-to-end deadline. The first is to verify if worst-case response times of all elements in the flow is less than or equal to the flow deadline, an approach that has several drawbacks [15].The second approach consists in assigning local deadlines to each node and message stream in the flow path in such a way that the deadline of a flow φcis composed by the sum of each local deadline (Eq. (32)). The benefit of this approach is that a change in a subnetwork configuration does not affect the system as a whole as long as the local deadlines are still met [21], and it can be of practical interest when designing heterogeneous vehicular networks. Each subnetwork can be designed independently of the overall system, and a change in an existing subsystem (for instance, a new set of sensors and ECUs in a CAN segment) may not imply the modification of the system as a whole.(32)Dc=∑d∈TφcDd+∑e∈SφcDeThere are several proposals of methods for deadline partitioning in real-time distributed systems, e.g., [15,23] and [21]. We cannot survey all existing methods here. Instead, we will summarize relevant deadline partitioning methods and exemplify how they can be used in the context of this work.In [15], the author proposes four strategies to the end-to-end deadline assignment. In the first one, Ultimate Deadline (UD), there is no deadline partition at all: the deadline of each subtask in a path is set to be equal to the end-to-end deadline. In the second, Effective Deadline (ED), the deadline of each subtask in a path is set to be equal to the end-to-end deadline minus a time reservation corresponding to the expected execution time of later stage subtasks and streams.A common problem of strategies like UD and ED is that all the remaining slack is allocated to the current LAN segment or active subtask, leaving little slack for subsequent LAN segments or subtasks and, as result, messages from low priority streams may have a low probability of meeting their end-to-end deadline [15]. Therefore, related papers propose strategies in which the global deadline is divided into minimum acceptable sub-deadlines for each LAN segment (or subtask), usually considering the system load or network segments bandwidth. Examples of partitioning strategies can be found in [23] and [21].In this section, we will exemplify the use of the proposed reference model with a small system composed of FlexRay and CAN networks interconnected through a gateway.Let's consider the system illustrated in Fig. 18. System parameters are given in Table 3. The system message stream set is given in Table 4, and the task set is given in Table 5.To simplify our example, we consider that FlexRay messages are transmitted in static segment slots and that each static slot is associated with a unique message stream.In the example we consider a flow φ1 illustrated in Fig. 19.Flow φ1 is defined by:(33)φ1=Γ2,1S2,1CANΓgw,2Sgw,1FRΓ5,2Γ5,3S5,1FRΓ6,1Flow φ1 has T1=D1=200ms, and we want to define a local deadline for each element in the flow path. To achieve this goal, we will use a deadline partitioning scheme based on the utilization-based partition method proposed in [23]. Although the utilization-based partition method is focused on ATM networks, it can be adapted to deal with the system model assumed in this paper, i.e., vehicular distributed systems using hybrid FlexRay/CAN networks interconnected by a gateway. The adaptation consists in considering the utilization of each element in a flow, instead of only each LAN segment.In this deadline partitioning scheme used in this Section, the local deadline Daof an element a in a flow φcis given by Eq. (34), where Udis given by Eq. (35),Uφcis the sum of the utilization of each elements in the flow (Eq. (36)),ΦφcTrepresents the number of tasks in φcandΦφcTrepresents the number of message streams in φc. The reasoning of this scheme is that the portion of the flow end-to-end deadline attributed to an element of the flow depends on whether the element is a task or a message stream.(34)Da=Ud÷Uφc÷ΦφcT×DcifaisataskUd÷Uφc÷ΦφcS×Dcifaisamessagestream(35)Ud=∑∀e∈Tφ1CePeifaisatask∑∀e∈Sφ1CePeifaisamessagestream(36)Uφc=∑∀a∈φcCaPaThe utilization of each element a in φ1, their relative deadlines calculated using Eq. (34) and their wcrt calculated with equations presented in Section 6 are summarized in Table 6.As can be observed in Table 6, the local deadline for each element in φ1 is met.Finally, the end-to-end wcrt of flow φ1 is calculated using Eq. (30). Since none of the equations used to calculate the wcrt of the elements of φ1 do consider the effect of asynchronous delays, Eq. (30) became:(37)E1=RΓ2,1+TS2,1CAN+TΓgw,2+TΓgw,2+TSgw,1FR+TSgw,1FR+RΓ5,2+TΓ5,2+RΓ5,3+TΓ5,3+RS5,1FR+TS5,1FR+RΓ6,1+TΓ6,1E1=152.4386ms.As can be observed, the deadline of φ1 is also respected (Ec=152.4386ms<Tc=200ms).The results presented in Table 6 were obtained from the equations of the analytical model. But, in order to validate the analytical model, we also implemented a simulator, using the language C. The simulator was designed as a classical event-driven simulator, with an event queue. At each simulation step, the simulated clock is advanced to the instant of the next event and that event is processed. As part of this processing, new future events may be inserted in the event queue. The simulation considers only those aspects related to the scheduling of processors, CAN and FlexRay buses, such as the instant of arrival, execution or transmission. The simulation returns the response time observed for each stream. Since the worst-case response time requires a combination of many factors, and also the analytical models are pessimistic in some cases, the worst-case response time is seldom observed in the simulation. The simulator is available for download, together with the specific example presented in this Section, at http://www.romulosilvadeoliveira.eng.br/arquivos/csi/simulator.zip.Regarding the example described in this section, the worst simulated response time observed for stream φ1 was 17.0444ms. This value is well below the worst-case response time obtained through the analytical model. That is because Eq. (30) from [17] considers an extreme case that has a very low probability of actually happening. Certainly there is room for improvement in this aspect, but the proposal of new methods for the schedulability analysis is beyond the scope of this paper.

@&#CONCLUSIONS@&#
The automotive industry is currently one of the largest economic sectors in the world, producing every year tens of millions of vehicles and contributing significantly to the revenue of many countries. The growth in complexity of electronic architectures, together with the timing requirements related to sensors and actuators, favors the adoption of a distributed implementation. Within this context, networks and communication protocols are of utmost importance since they support the integration of distributed functions, reducing the cost and complexity of cabling and providing means for the implementation of advanced fault tolerance techniques.Although CAN has low data rate and frame payload when compared to FlexRay, it has low cost and meets the requirements of several vehicular applications. The coexistence of both FlexRay and CAN protocols in the same vehicle, exchanging informations through gateways, is expected. This coexistence has several advantages, such as cost reduction and reuse of legacy components.Literature addressing vehicular networks presents several methods for the timing analysis of ECUs (including gateways) and CAN and FlexRay networks. But to the best of our knowledge, there isn't a reference model for the holistic time analysis of heterogeneous FlexRay/CAN systems. Although vehicular standards such as AUTOSAR [3] define architectures for complete vehicular systems, they don't address timing analysis.We proposed a reference model for timing and schedulability analysis of heterogeneous FlexRay/CAN networks interconnected by gateways. The proposed reference model is inspired on the idea of standardized components and in concepts introduced by [15] for deadline partitioning techniques. It can be used to compute not only end-to-end response times, but also to analyze local components, such as response times of messages in a specific network segment. When combined with techniques such as deadline partitioning, the proposed reference model can be used in the design of an automotive system in such a way that the design of a subnetwork can be done with certain degree of independence from the overall system.In this paper, we focused on protocols FlexRay and CAN, and we considered only fixed-priority scheduling. However, the proposed reference model can be extended through the design of new standardized components. These new standardized components may be based on those already presented in this paper. In order to determine the worst-case response time of a new configuration, proper schedulability analysis must be provided for those new components. An example of a new component would be, for instance, a segment of TTEthernet [34].Although there are many papers describing methods for the timing analysis of the different elements of an automotive network, such as, CAN and FlexRay buses, in an automotive network all the elements must work together, and the timing requirements are end-to-end, and not associated with specific components of the embedded electronic solutions. In a real scenario, there may not be global clock synchronization among all components, and then the timing analysis must consider the interplay among the components. To the best of our knowledge, this is the first paper putting together the several aspects of a heterogeneous automotive network and providing a general framework for its timing analysis, combining previously published specific analysis.The use of the proposed reference model has been illustrated through its use with a complete example. We present this complete example as a proof of concept since it shows that the proposed reference model fulfills its goal.