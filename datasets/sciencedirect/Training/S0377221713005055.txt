@&#MAIN-TITLE@&#
An exact algorithm to minimize mean squared deviation of job completion times about a common due date

@&#HIGHLIGHTS@&#
We present a pseudo-polynomial algorithm for the n-job 1 machine scheduling problem.Mean Squared Deviation of job completion times is considered as the objective.The ideas of Dynamic Programming and Branch and Bound are combined.Breadth first search is adopted in B&B method.Problems up to 1000 jobs size can be solved by this algorithm.

@&#KEYPHRASES@&#
Scheduling,Mean squared deviation,Branch and bound,Dynamic programming,

@&#ABSTRACT@&#
We consider a deterministic n-job, single machine scheduling problem with the objective of minimizing the Mean Squared Deviation (MSD) of job completion times about a common due date (d). The MSD measure is non-regular and its value can decrease when one or more completion times increases. MSD problem is connected with the Completion Time Variance (CTV) problem and has been proved to be NP-hard. This problem finds application in situations where uniformity of service is important. We present an exact algorithm of pseudo-polynomial complexity, using ideas from branch and bound and dynamic programming. We propose a dominance rule and also develop a lower bound on MSD. The dominance rule and lower bound are effectively combined and used in the development of the proposed algorithm. The search space is explored using the breadth first branching strategy. The asymptotic space complexity of the algorithm is O(nd). Irrespective of the version of the problem – tightly constrained, constrained or unconstrained – the proposed algorithm provides optimal solutions for problem instances up to 1000 jobs size under different due date settings.

@&#INTRODUCTION@&#
Non-regular performance measures in scheduling research have gained considerable importance in recent times. A regular measure is a function of job completion times which is to be minimized and its value can increase only when at least one of the completion times increases. Some of these include mean tardiness, number of tardy jobs, and mean flow time. They do not impose any penalties for jobs completing early and do consider only the tardiness penalties. Earliness costs are relevant where uniformity in service is needed and non-regular performance measures consider both earliness and tardiness penalties. The value of a non-regular performance measure can decrease when one or more completion times increases. They are consistent with just-in-time philosophy. Completion Time Variance (CTV) and Mean Squared Deviation (MSD) are two important non-regular performance measures. Optimization of CTV and MSD ensures the jobs completion as close as possible to each other and to the common due date respectively.Kanet (1981a) introduced the problem of minimizing Mean Absolute Deviation (MAD) of job completion times about a common due date (d) and presented an algorithm to determine an optimal schedule under a restrictive assumption on the due date. Sundararaghavan and Ahmed (1984) extend Kanet’s work to identical parallel machines and proposed an algorithm which can provide all optimal schedules. Bagchi, Sullivan, and Chang (1986) addressed the MAD problem over a large range of due dates. Later several researchers like Hall (1986), Emmons (1987), and Szwarc (1989) worked on the MAD problem. However the MAD objective penalizes both earliness and tardiness costs linearly. As larger deviations of job completion times from the due date are undesirable, MSD is found to be an appropriate measure. The MSD measure penalizes larger deviations at a higher rate.Bagchi, Sullivan, and Chang (1987) introduced the problem of scheduling n jobs on a single machine to minimize the Mean Squared Deviation (MSD) of job completion times about a common due date. When the due date does not constrain the attainment of the minimum MSD value, the problem is said to be unconstrained. Bagchi et al. (1987) showed that the unconstrained MSD problem is equivalent to the CTV problem. The CTV problem has been extensively studied in literature. If Cidenote the completion of job i in a sequence, the Completion Time Variance (CTV) can be defined as,(1)CTV=1n∑i=1n(Ci-C¯)2whereC¯=1n∑i=1nCiis the mean completion time.The non-preemptive single machine scheduling problem to minimize the completion time variance was first addressed by Merten and Muller (1972). They showed that the variance of job completion times remains the same, when the order of the last (n−1) jobs in a sequence is reversed. Schrage (1975) proved that the longest job should be the first in an optimal sequence; and stated that in an optimal sequence the second longest job should be the second and the third longest job should be the last. This conjecture was later proved by Hall and Kubiak (1991). Eilon and Chowdhury (1977) proved that the variance minimizing schedule must be V-shaped. A schedule is V-shaped when all jobs preceding the shortest job are in descending order of processing times and all jobs succeeding the shortest job are in ascending order of processing times. Many researchers investigated the CTV problem using this V-shaped property of an optimal schedule. Kanet (1981b) showed the equivalence between total squared differences in completion times (TSDC) and CTV, and proposed a heuristic procedure to solve the CTV problem. Kubiak (1993) proved that the CTV minimization problem is NP-hard. De et al. (1992) developed a pseudo-polynomial algorithm to solve this problem and obtained optimal solutions up to 100 job size. Viswanathkumar and Srinivasan (2003) proposed a branch and bound algorithm to solve the problem. Srirangacharyulu and Srinivasan (2010) proposed some heuristics for CTV minimization in single machine and multimachine (identical parallel machines) systems. They also presented an analysis of the worst case performance of their heuristic for the single machine problem.The problem of scheduling jobs to minimize the MSD on a single machine is more complicated than the CTV problem. The MSD plot against different values of d, for a given schedule, has the minimum MSD at a value of d which is equal to the mean completion time of that schedule. This minimum may be referred to as the local minimum. Thus each schedule has its own MSD profile plotted against the due date and has its minimum at a specific value of d. If a schedule is assumed to start at time zero, an n job scheduling problem has n! possible schedules and hence the same number of local minima. The best among all these may be referred to as the global minimum. The local minimum of a schedule (sequence) corresponds to its mean completion time, and the mean completion time of any schedule, that starts at time zero, may not coincide with the given due date. Hence it is apparent that the schedule that starts at time zero and gives the minimum value of MSD at this given due date is the optimum. However, this is not true. An optimum may be obtained by delaying the start time of a schedule. This is referred to as the translation of a schedule. This point has been addressed in De et al. (1989). Among all the schedules that have their mean completion times less than the given due date d, delaying the schedule that has the best local minimum such that its mean completion time coincides with the given due date may lead to an optimal schedule.Define d∗∗ such that, when d⩽d∗∗, no schedule exists with its mean completion time less than d, and hence an optimum cannot be obtained by the translation of a schedule. The schedule (sequence) that gives the minimum MSD is the optimal schedule. If d⩽d∗∗ then the problem is said to be tightly constrained. Define d∗ such that, when d⩾d∗ a global minimum can be obtained. If d⩾d∗ then the problem is said to be unconstrained. The unconstrained MSD problem is equivalent to the CTV problem. If d⩾d∗, an optimum can be obtained by the translation of a schedule that gives the global minimum such that it’s mean completion time is equal to the due date. For any due date between d∗∗ and d∗, an optimum may be obtained by the translation of a schedule. If d∗∗<d<d∗ then the problem is said to be constrained. The given common due date may fall into one of these three regions and accordingly a problem instance may be tightly constrained, constrained or unconstrained. De, Ghosh, and Wells (1989) proposed bounds on d∗∗ and d∗ that represent the minimum value of the due date at which a local minimum and the global minimum can be attained respectively.Bagchi et al. (1987) proposed a branching procedure to solve the MSD problem using several dominance properties and this procedure was found to be inadequate for solving large problems (n⩾20). De et al. (1989) showed that the branching procedure of Bagchi et al. (1987) does not guarantee optimal solution when the problem is constrained. They showed that an optimal solution may be obtained by the translation of a schedule (delaying the start of the schedule) in the constrained region. They proved that the schedule that minimizes MSD is V-about-d. A schedule is said to be V-about-d, when all jobs completing on or before the due date are in descending order of processing times and all jobs starting on or after the due date are in ascending order of processing times.De et al. (1990) proposed a branch and bound algorithm using a recursive approach to solve all the versions of the MSD problem and reported results up to 40 jobs. Weng and Ventura (1996) presented a pseudo-polynomial dynamic programming (DP) algorithm to solve the tightly constrained version of the MSD problem and reported results up to 100 jobs. They showed that for certain instances of the MSD problem the constrained version does not exist at all. Mondal (2002) proposed a unified pseudo-polynomial DP algorithm (hereafter referred to as SMDP), which can solve all the three versions of the problem. They obtained optimal solutions up to 600 jobs for tightly constrained instances generated by setting d=MS/3 where MS is the sum of processing times of all the n jobs, and up to 80 jobs for general instances.The unconstrained MSD problem can be solved as if it is a CTV problem. When the MSD problem is constrained or tightly constrained, it cannot be solved as a CTV problem and a different approach is needed to solve the problem. Thus the problem version depends on the value of due date given and there is no efficient method available to determine apriori the values of d∗∗ and d∗ so that the problem version can be identified. In this paper we propose a solution methodology based on dynamic programming and branch and bound concepts to solve all the versions of the MSD problem.The MSD problem is described as follows: A set N={1,2,…,n} of independent jobs are to be scheduled on a single machine in order to minimize the mean squared deviation of job completion times about a common due date d. The jobs are simultaneously available for processing at time zero. The processing times of jobs are known and deterministic. Job preemption is not allowed. The machine is continuously available. The job processing times and the due date are assumed to be integers.Let λ represents an arbitrary sequence of jobs and Λ represents the set of all sequences. A sequence is a permutation of the first n integers. Let pibe the processing time of job i and p[i] be the processing time of job in position i in a sequence. Without loss of generality, assume that the jobs are numbered such that p1⩾p2⩾⋯⩾pn. Let τ be the start time of the first job of any arbitrary sequence λ, and τ∗ be the start time of the first job of an optimal sequence λ∗.Property 1Property I in Baker and Scudder, 1990An optimal schedule cannot have inserted idle time between jobs.Due to Property 1, the job sequence along with the start time of the first job in the sequence describes the schedule. Let (λ,τ) represents any arbitrary schedule and (λ∗,τ∗) represents an optimal schedule. Let Ci(λ,τ) be the completion time of job i under schedule (λ,τ), and C[i](λ,τ) be the completion time of job in position i under schedule (λ,τ). The mean completion timeC¯(λ,τ)of the schedule (λ,τ) is given by(2)C¯(λ,τ)=1n∑i=1nCi(λ,τ)Given any schedule, MSD is the minimum when the due date is equal to the mean completion time.Due to Property 2, the unconstrained MSD problem becomes equivalent to the CTV problem.An optimal schedule that minimizes MSD is V-about-d.An optimal schedule that minimizes MSD is V-shaped.Any optimal schedule for a tightly constrained MSD problem should start at time zero.An optimal schedule, when obtained by translation, can have its start time as an integral multiple of (1/n).

@&#CONCLUSIONS@&#
The problem of scheduling n jobs on a single machine with mean squared deviation minimization has been considered in this paper. Given a partial schedule, a lower bound on MSD has been developed. A dominance condition as a result of the DP recursions has been presented. Irrespective of the version of the problem, an exact algorithm of pseudo-polynomial complexity has been presented based on the ideas of branch and bound and dynamic programming. Optimal solutions are obtained for problem instances of up to 1000 jobs size. This algorithm provides a best example of the breadth first strategy implementation in branch and bound algorithms. As the mean completion time corresponding to the global minimum for CTV problem is upper bounded by12(MS+p1), the BBDP algorithm can be used to solve the CTV problem by settingd=12(MS+p1)and starting the obtained schedule earlier by τ∗. If d∗∗ can be found for a given set of job processing times and due date, then the BBDP algorithm can be implemented by setting T={1/n, 2/n,…, (d−d∗∗)}. One can work on the MSD problem considering identical parallel machines which could be a reasonable extension.Consider a 15 job problem with processing times given as:Job, i123456789101112131415Processing time, pi85797775726867635044212015114Consider a partial schedule (σH,τ): {(85,75,…,72,77,79),20} as shown in Fig. 3with two jobs fixed in the front and three jobs fixed in the back of the sequence such that σH=(85,75,…,72,77,79) and τ=20. Since, ζ={1,2,12,13,14,15}, the set of completion times {C[i](σH,τ): i∈ζ} can be obtained. The completion times of jobs in positions 1, 2, 12, 13, 14, 15 in the partial schedule (σH,τ) can be computed as 105, 180, 543, 615, 692, 771 respectively, and are shown in Fig. 3. Since the number of completion times known on both sides of the sequence is not equal, jobs with processing times 68 (6th longest job) and 67 (7th longest job) are temporarily fixed on the front in LPT order, their completion times being 248 and 315 respectively. Let d=419 and is greater than the completion time of all jobs that are temporarily fixed.We have here k=2andq=3;ψ1={1,2,3,4,5}andψ2={6,7,8,9,10,11,12,13,14,15}MS=∑i=1npi=751and(MS+τ)=771ψ3={i1,i2,…,ik′}={i1,i2}={6,7}→due toResult1.ζ1={1,2,3,4,12,13,14,15}.Completion times of jobs in positions in ζ1 can be computed as:C[1](γ,τ)=105;C[2](γ,τ)=180;C[3](γ,τ)=248;C[4](γ,τ)=315;C[12](γ,τ)=543;C[13](γ,τ)=615;C[14](γ,τ)=692;andC[15](γ,τ)=771.Now,1n∑j∈ζ1(C[j](γ,τ)-d)2=115[(105-419)2+(180-419)2+(248-419)2+(315-419)2+(543-419)2+(615-419)2+(692-419)2+(771-419)2]=29763.69∴L1=29763.69Given a partial schedule S: (A,…,B) of the k longest jobs, where A and B are LPT and SPT subsequences, letCA=∑j∈ApjandRB=MS-∑j∈Bpj.1.Set T≡{1,…,n}, A≡B≡∅,CA=0, and RB=MS.Do until T≡∅:Remove the first job (say job j) from T.If d−CA⩽RB−d,then insert j in front of B and let RB=RB−pj,else insert j at the back of A and let CA=CA+pj.Deliver S: (A,B) as the heuristic schedule.