@&#MAIN-TITLE@&#
A hybrid ant-tabu algorithm for solving a multistate flow network reliability maximization problem

@&#HIGHLIGHTS@&#
A hybrid ant-tabu algorithm to maximize network reliability for a multistate flow network.Compare the proposed algorithm with several soft computing algorithms.The proposed algorithm has better computational efficiency for the networks with more than six MPs or 10 arcs.

@&#KEYPHRASES@&#
Hybrid ant-tabu,Multistate flow network,Network reliability maximization,Component assignment,Recursive Sum of Disjoint Products,

@&#ABSTRACT@&#
Network reliability optimization for multistate flow networks (MFN) is an important issue for many system supervisors. Network reliability maximization for an MFN by determining the optimal component assignment, where a set of multistate components are ready to be assigned to the network, is a common problem. Previous research solved this problem by developing and applying genetic algorithm. Ant colony optimization (ACO) finds a good solution quickly by utilizing the experience of the proceeding ant but sometimes falls into local optimum. Tabu search (TS) adopts a tabu list to avoid searching in the same direction, and thus it explores other possible solutions. This strategy enlarges the search space. Therefore, we propose a hybrid ant-tabu (HAT) algorithm integrating the advantages of ACO and TS to solve this problem, where network reliability is evaluated in terms of minimal paths (MPs) and Recursive Sum of Disjoint Products. Experimental (RSDP) results show that the proposed HAT has better computational efficiency than several soft computing algorithms for networks with more than six MPs or 10 arcs.

@&#INTRODUCTION@&#
A real-life system, such as a manufacturing system, an electric power system, a computer system, or a logistics system, can be modeled as a multistate flow network (MFN) composed of both sets of arcs and nodes to evaluate network reliability [1–5]. For example, in a computer network, a transmission line is denoted by an arc and is composed of several physical lines (such as twisted pairs, fiber cables, or coaxial cables). Each physical line has two states: operating at full capacity or failed. That is, any transmission line has several capacities following a probability distribution. Network reliability is defined as the probability that d units of demand are successfully transmitted from a source node to a sink node, and is an important indicator for many systems. Such a probability can be evaluated in terms of minimal paths (MPs) [2–4]. An MP is a set of arcs connecting the source and sink nodes, whose proper subsets no longer connect the source and sink nodes.From a quality management perspective, network reliability optimization is a critical issue for many system supervisors. Different network reliability optimization problems, such as multi-commodity allocation [6–9], flow assignment [10], and transportation assignment [11], have been studied over the past few years. The studies [6–9] focused on how to allocate the various commodities at multiple source nodes to maximize reliability. Liu et al. [10] determined the optimal flow assignment with maximal reliability and minimal total cost. Xu et al. [11] designed a transportation assignment model for an MFN based on the reliability of transportation time. The study [11] constructed a transportation assignment model with stochastic chance-constraint programming, and then developed a hybrid intelligent algorithm that integrates a genetic algorithm (GA), stochastic simulation, and neural network.Recently, Lin and Yeh [4] addressed the MFN reliability maximization problem by finding the optimal component assignment, and proposed a GA-based approach to solve it. In this formulation, a component assignment means any component can be assigned to at most one arc and each arc must own exactly one component. However, it has never been definitively demonstrated that their GA exhibits superior computational efficiency to other popular soft computing algorithms, such as particle swarm optimization (PSO), ant colony optimization (ACO), simulated annealing (SA), and tabu search (TS). Additionally, GA can fall into local optimum easily or converge prematurely due to the randomness of initial solutions and the evolution process. ACO and TS are well-known soft computing algorithms and have been applied to various problems, e.g., combinatorial optimization [12], shortest path [13], scheduling [14,15], and dynamic routing [16]. ACO proposed by Dorigo et al. [17] adopts a greedy heuristic technique to produce a good initial solution and determines a good search direction depending on the experience of the proceeding ant. Such a strategy often helps ACO find a good solution quickly but sometimes it causes ACO to fall into local optimum. TS proposed by Glover [18] uses a tabu list to avoid searching in the same direction, and thus it explores other possible solutions. This strategy enlarges the search space.Therefore, TS is a suitable method to prevent the ACO from falling into local optimum. This paper proposes a hybrid ant-tabu (HAT) algorithm that integrates the advantages of ACO and TS to solve the MFN reliability maximization problem. In the algorithm, network reliability associated with a specified assignment is evaluated in terms of MP and Recursive Sum of Disjoint Products (RSDP) as proposed by Zuo et al. [19]. The remainder of this paper is organized as follows. Section 2 formulates the MFN reliability maximization problem. Section 3 introduces the MFN model and Reliability Evaluation Algorithm (REA). Section 4 discusses the development of HAT for the addressed problem. Numerical experiments of several networks including four benchmark networks and two practical computer networks are performed to compare HAT, PSO, ACO, SA, TS, and GA. Conclusions are finally drawn in Section 6.(N, A) denotes a network having a single source O and a single sink D where N is a set of nodes and A={ai|1≤i≤n} is a set of n arcs. We assume all m MPs in (N, A) are given and denoted by mp1, mp2, …, mpm. Let Γ={ηj|1≤j≤s} be a set of components, each component ηjhas multiple capacities, 0=hj(1)<hj(2)<…<hj(ej) where hj(l) is the lth capacity of ηjfor l=1, 2, …, ejand hj(ej) is the maximal capacity of ηj. Y=(y1, y2, …, yn) denotes a component assignment, and component ηjis assigned to arc aiif yi=j. Then, (N, A) associated with a specified component assignment Y is an MFN. Both capacity and flow vectors, respectively denoted by X=(x1, x2, …, xn) and F=(f1, f2, …, fm), are utilized to describe an MFN, where xiis a current capacity of arc aIand fvis the amount of flow through mpv.To solve the MFN reliability maximization problem, several assumptions must be addressed as follows.I.The capacities of different components are statistically independent.Flow in a network must satisfy the flow-conservation law [20].Associated with an assignment Y, the maximal capacity vector of (N, A) is denoted byMY=(My1,My2,…,Myn), whereMyi=hj(ej)if component ηjis assigned to arc ai. A capacity vector X is not deterministic since xiis a random variable for i=1, 2, …, n. Furthermore, any capacity vector must satisfy X≤MY. That is, the current capacity xishould not exceed the maximal capacityMyifor i=1, 2, …, n. For the convenience, let ΩYbe the set of the capacity vectors satisfying X≤MY.Associated with an assignment Y, network reliability is defined as the probability that the maximal flow of (N, A) under X is not less d and represented as Rd(Y)=Pr{X|V(X)≥d, X∈ΩY}, where V(X) means the maximal flow of (N, A) under X. For the convenience, let XY={X |V(X)≥d, X∈ΩY} (i.e. the set of X satisfying demand d associated with Y). Thus, Rd(Y)=Pr{X | X∈XY}.Fig. 1illustrates the addressed problem. For example, a network (N, A) includes four arcs (i.e. n=4) and five components are ready to be assigned. Since each arc must own exactly one component and each component can be assigned to at most one arc, there are 120 feasible assignments. The objective is to determine the optimal assignment from them such that Rd(Y) is maximized. The programming formulation is given by(1)MaximizeRd(Y)=Pr{X|X∈XY},Subject to(2)yi=jηj∈Γfori=1,2,…,n,and,(3)yi≠yjfori≠j.Constraints (2) and (3) describe that each arc aimust contain exactly one component ηj∈Γ, and each component is assigned at most one arc. The optimal component assignment with maximal network reliability is obtained by maximizing objective function (1).Any F is feasible under MYif and only if(4)∑v:ai∈mpvfv≤Myii=1,2,…,n,where∑v:ai∈mpvfvis the total flow traveling through ai. Constraint (4) means the total flow through aishould not exceed the maximal capacity of aiassociated with Y. For the convenience, letFMYbe the set of F satisfying constraint (4). Similarly, let FXbe the set of F satisfying the following constraint. That is, the total flow through aishould not exceed the current capacity xi.(5)∑v:ai∈mpvfv≤xii=1,2,…,n.The maximum flow of (N, A) under X is thus defined asV(X)=max∑v=1mfv|F∈FX.For instance, a computer network with four arcs and two MPs (mp1={a1, a2} and mp2={a3, a4}) is shown in Fig. 2. We assign the components η2, η6, η10, and η13 from the set Γ to arcs a1, a2, a3, and a4, respectively, i.e. Y=(2, 6, 10, 13). For the current capacity vector X=(1, 2, 2, 3), all feasible F under X must satisfy f1≤x1=1, f1≤x2=2, f2≤x3=2, f2≤x4=3 according to constraint (5), and thus they are (0, 0), (1, 0), (0, 1), (0, 2), (1, 1) and (1, 2). The maximal flow of (N, A) is V(X)=max{0+0, 1+0, 0+1, 0+2, 1+1, 1+2}=3.Although Rd(Y)=Pr{X | X∈XY}, it is not an efficient way to enumerate all X∈XY, and then summing up their probabilities [2,3]. Instead, we evaluate Rd(Y) in terms of the called “d-MP” which is defined as follows:Definition 1A d-MP is a minimal capacity vector X in XYsuch that any capacity vector Z∉XYwith Z<X.We assume that the total b d-MP are be X1, X2, …, Xb. That is, XYis represented as the union set{∪i=1b{X≥Xi|X∈ΩY}}and then we conclude(6)Rd(Y)=Pr{X|X∈XY}=Pr{∪i=1b{X≥Xi|X∈ΩY}}.Such a probability can be calculated by inclusion–exclusion principle [3], state-space decomposition [1,2], or Recursive Sum of Disjoint Products (RSDP) [19]. Calculating this probability using inclusion–exclusion principle is easy to be out of memory when there are tons of d-MP. Moreover, Zuo et al. [19] proved that RSDP is more efficient than state-space decomposition, especially for larger networks. Therefore, this study adopts RSDP to calculateRd(Y)=Pr{∪i=1b{X≥Xi|X∈ΩY}}.AnyF∈FMYexactly meets demand d if and only if it satisfies the following constraint:(7)∑v=1mfv=d,where constraint (7) says that the amount of flow from O to D exactly satisfies demand d. LetFY,d={F|F∈FMYsatisfiesconstraint(7)}. If X is a d-MP, then there exists a feasible F∈FY,dwith X such that(8)xi=hyi(l),where l∈{1, 2, …,eyi} with<hyi(l−1)<∑v:ai∈mpvfv≤hyi(l)fori=1,2,…n.Any X transformed from F∈FY,dvia Eq. (8) definitely satisfies V(X)≥d and is regarded as a d-MP candidate. Hence, each d-MP candidate must be checked whether it is a d-MP or not. Suppose X1, X2, …, Xware all d-MP candidates, the following comparison algorithm finds out d-MP from these d-MP candidates.Comparison algorithm//Identify which d-MP candidates are d-MPStep 1.I=∅ (I is the stack that stores the index of non-d-MP X. Initially, I is empty)Step 2.For i=1 to w and i∉IStep 3.For j=i+1 to w, and j∉IStep 4.If Xj<Xi, then Xiis not a d-MP, I=I∪{i}, and go to step 7Else if Xj≥Xi, then Xjis not a d-MP, I=I∪{j}Step 5.Next jStep 6.Xiis a d-MPStep 7.Next iAll d-MP generated from the above algorithm are utilized to calculateRd(Y)=Pr{∪i=1b{X≥Xi|X∈ΩY}}.According to the MFN model, REA is developed to evaluate network reliability for a specified component assignment as follows:Algorithm REA//Network reliability evaluationStep 1.Find all F satisfying the following constraints,(9)∑v:ai∈mpvfv≤Myii=1,2,…,n,and(10)∑v=1mfv=d.If no feasible F exists, Rd(Y)=0 and then evaluate the next component assignment.Step 2.Transform each feasible F into X via the following equation,(11)xi=hyi(l)where l∈{1, 2, …,eyi} withhyi(l−1)<∑v:ai∈mpvfv≤hyi(l)fori=1,2,…,n.Step 3.Apply comparison algorithm to identify which X from Step 2 are d-MPStep 4.CalculateRd(Y)=Pr{∪i=1b{X≥Xi|X∈ΩY}}through RSDPThis section develops the HAT algorithm for solving the addressed problem. In HAT, we apply ACO to search for the optimal component assignment (i.e. solution). In order to prevent ACO from falling into local optimum or converging prematurely, TS is employed to enlarge the search space. The following figure illustrates the HAT process. The inputs consist of the component capacity data, the number of arcs (n), the number of MPs (m), and d units of demand. Several parameters, including the number of ants (denoted by γ), terminal time (denoted by Ttime), evaporation rate (denoted by ρ), determinative coefficient (denoted by q0), initial pheromone (denoted by τ0), weighting parameters (denoted by α and β), tabu tenure (denoted by σ), size of candidate list (denoted by CL), and number of iterations (denoted by tmax), must be determined before executing HAT. γ controls the number of found solutions at each iteration. Several studies [21–24] determined γ in the interval [10,30], but there is no rule to determine it. Ttime is the HAT terminal constraint, in which TS is executed for at most tmax iterations. The other parameters are introduced in the following subsections.The functions of ACO and TS are described in the following subsections, respectively (Fig. 3).Let Ф be a set of unassigned components and gpbe an ant for p=1, 2, …, γ.Ypt=(yp1t,yp2t,…,ypnt)denotes a component assignment which the ant gpfinds, andypitdenotes the index of the component which the ant gpassign to arc aiin the tth iteration. If component ηjis assigned to arc ai, thenypit=j. The proposed algorithm starts with several ants. The construction step focuses on creating a set of solutions. A solution found by an ant represents a specified component assignment. For example (see Fig. 4), a network has five arcs and 10 components are available to be assigned. Initially, Ф=Γ. The ant g1 randomly assigns a component, e.g., η3, to arc a1, and then removes η3 from Ф. It chooses one component from Ф, and then assigns it to the next arc a2 according to the state transition rule. Then, update Ф. The rest may be deduced by analogy until each arc owns exactly one component. Thus, the solution ant g1 finds in the first iteration isY11=(3,10,2,4,8).Let τ and θ be the pheromone matrix and the greedy matrix, respectively. The state transition rule is carried out as follows. When an ant has assigned the component ηλto the arc ai−1, the component ηuis assigned to aiaccording to the following rule.If q1≤q0,ypit=u, where u is the index of the component such that τ(λ,μ)α×θ(λ,μ)βis the maximal value in {τ(λ,μ)α×θ(λ,μ)β| ημ∈Ф}Elseypit=u, where u is decided by roulette wheel selectionq1∈[0,1] is a random number. The determinative coefficient q0 (0≤q0≤1) determines the relative importance of exploitation (i.e. q1≤q0) versus exploration (i.e. q1>q0) and is set to be ≥0.5 in the studies [12,17,22,25,26]. τ(λ,μ) denotes an element in τ, and signifies the current pheromone trail of assigning ημto ai. Initially, each τ(λ,μ) has the same value. θ(λ,μ) denotes an element in θ, and signifies the maximal capacity of ημ. Component ημis decided by roulette wheel selection if q1>q0, in which the probability of assigning ημto aiis given in Eq. (12).(12)πp(λ,μ)=[τ(λ,μ)]α⋅θ[(λ,μ)]β∑ημ∈Φ[τ(λ,μ)]α⋅θ[(λ,μ)]β,where πp(λ,μ) is the probability that gpassigns ημto ai. The weighting parameters α and β control the relative importance of pheromone trail versus visibility, respectively. Dorigo et al. [17] suggested β≥α>0, such as (α=1, β=2), to avoid stagnation.Local pheromone update is performed according to the following equation.(13)τ(λ,μ)=(1−ρ)×τ(λ,μ)+ρτ0,where the initial pheromone τ0 is a very small constant value with 0<τ0<1 [27]. The evaporation rate ρ (0<ρ≤1) is a pheromone decay parameter, and ρ is usually set to be no more than 0.5 [12,17,21,22,25–27].Global pheromone update is performed according to the following equation.(14)τ(λ,μ)=(1−ρ)×τ(λ,μ)+ρΔτ(λ,μ),where Δτ(λ,μ) is network reliability of the current optimal assignment.TS adopts a “move” technique to explore the neighbor solutions of the current solution, where a move is the process of searching for a neighbor solution. This study utilizes a swap move [28] to search for a neighbor solution. That is, we randomly select two points in the current solution and then exchange both points to create a neighbor solution (see Fig. 5).Candidate list defines the set of available moves from the current solution, and the next best solution is determined through the set. The size of candidate list is commonly determined in the interval [10, 200] [29–32]. To prevent TS from falling into local optimum, several recent moves are forbidden for a specified number of iterations. Such a number is called tabu tenure (σ). A high σ may let TS obtain a good move may difficultly. Oppositely, a low σ may let TS obtain the solution which is the same with a former solution [33]. Several studies [33–35] considered tabu tenure in the interval [10, 250]. These recent moves are recorded in the tabu list. However, if a move in the tabu list results in a better solution than the current best one, it is permitted. This is called aspiration criterion. The current best solution will be regarded as an initial solution in the next iteration. TS is terminated until the terminal constraint is satisfied.Several benchmark networks and two practical computer networks are utilized to demonstrate the HAT performance in maximizing network reliability by comparing it with several soft computing algorithms. For each network, a set of components (i.e. transmission lines) are ready to be assigned. Each transmission line combines with several OC-36 (Optical Carrier 36) or OC-18 (Optical Carrier 18) lines. Each OC-36 (resp. OC-18) line owns both capacities of approximate 2 (resp. 1) Gbps (giga bits per second) if it operates and 0Gbps if it fails. For example, a transmission line combining two OC-36 lines has three capacities, 0Gbps, 2Gbps, and 4Gbps, and follows a binomial distribution. Additionally, GA, PSO, ACO, TS, SA, and HAT are programmed with the MATLAB programming language and executed on a personal computer with Core 2 Quad CPU 2.4G and 2G RAM. In our experiments, the terminal constraint is set as a period of execution time for each algorithm.In this section, four benchmark networks (No. I–IV, refer to Fig. 6) are cited from Lin and Yeh [4]. The number of arcs and the number of MPs in each network are presented in Table 1. Table 2lists the capacity data of 100 components. Given that d=6Gb (giga bits) at D for each network, each algorithm is performed for 10 times to obtain an average maximal network reliability. The terminal constraint is set as 1200s (i.e. Ttime=1200s) in all experiments. The HAT parameters are set as γ=10, ρ=0.1, q0=0.9, τ0=0.0001, α=1, β=2, σ=100, CL=200, and tmax=300. The experimental results are shown in Table 3. GA yields higher network reliability for networks I, II and III than the other algorithms, but, HAT outperforms the other algorithms for network IV. Moreover, HAT obtains better network reliability than ACO and TS.Subsequently, we explore the influence of network topology on using the soft computing algorithms. We let the four benchmark networks’ arcs double (resp. triple) without changing their numbers of MPs by inserting one node (resp. two nodes) on each arc (refer to Fig. 7). Our object is how the computational efficiency is affected by the number of arcs. Each algorithm is performed for 10 times under d=6Gb and Ttime=3600s to observe the average maximal network reliability. The experimental results (refer to Tables 4 and 5) display the proposed algorithm finds better network reliability than the other algorithms for the networks in Fig. 7. According to Tables 3–5, we discover that GA obtains better network reliability, when the networks have less than or equal to 10 arcs, except for Network IV. For another, when fixing the number of MPs and changing the number of arcs, we discover that the average maximal network reliability decreases as the number of arcs increases. Moreover, the average CPU time increases non-linearly as the number of arcs increases. The following paragraph further discusses how the number of MPs affects HAT and GA.We design five networks (see Fig. 8) based Network III. Network III and networks XIII–XVII have the same number of arcs but the various numbers of MPs. To be worthy of attention, the network topologies are diverse due to the various MPs. For each network, HAT and GA are executed for 10 times to obtain the average maximal network reliability under d=6Gb and Ttime=1000s. The experimental results are shown in Table 6. Again, HAT obtains better network reliability when the number of MPs exceeds six. According to the experimental results, HAT has the best computational efficiency in network reliability maximization for the networks with more than six MPs or 10 arcs. On the other hand, when fixing the number of arcs and changing the number of MPs, the average maximal network reliability increases as the number of MPs increases.This section adopts two real computer networks, OCT [36] and TANET. Both networks are illustrated in Figs. 9 and 10, respectively, where TANET is a backbone network connecting all educational and academic organizations in Taiwan. We focus on the data transmission between NTU and NSYSU. There are nine (resp. six) MPs in OCT (resp. TANET). Given that d=6Gb and Ttime=3600s, each algorithm is executed for 10 times to obtain the largest and average maximal network reliabilities. The experimental results of both networks are concluded in Tables 7 and 8, respectively. Although HAT and GA achieve the same largest maximal network reliability for OCT as well as TANET, HAT has greater average maximal network reliability than the other algorithms. Figs. 11 and 12illustrate that HAT outperforms ACO and TS for both OCT and TANET. To be worthy of attention, HAT has more efficiency in the solution improvement than it without TS. Additionally, HAT converges approximately from the 1800th second. ACO and TS converge more slowly than HAT. In other words, although TS converges slowly, it can help ACO outleap the local optimum more easily. That is, HAT has the opportunity to search for the better solutions.Fig. 13illustrates the statistical analysis of the above experiments by using Box Plot. The population-based algorithms including GA, ACO, and PSO show the stable results in most of the cases. That is, the obtained maximal reliabilities from the population-based algorithms present a higher degree of centralization than the non-population-based algorithms including TS and SA. Similarly, the proposed HAT also displays the advantage. The population-based algorithms also outperform the non-population-based algorithms, in which GA and ACO outperform PSO, and TS outperforms SA as a whole. Additionally, GA and ACO outperform each other for some experiments. However, the proposed HAT obtains higher network reliability than the other algorithms, especially for the larger networks.Generally speaking, soft computing algorithms running for more time or iterations can obtain a better solution. However, the real influence on their computational performance is how to set the other parameters, such as the number of ants (γ), evaporation rate (ρ), determinative coefficient (q0), weighting parameters (α and β), tabu tenure (σ) and size of candidate list (CL) of HAT. Therefore, many studies [21–35] focused on exploring the parameter setting with the fixed time or iterations.Given that τ0=0.0001, Ttime=3h and tmax=300, this section discusses the various parameter settings by using the TANET with d=9Gb. The default parameters are γ=10, ρ=0.1, q0=0.9, α=1, β=2, σ=100, and CL=200. We consider three settings for each parameter. That is, γ∈{10, 20, 30}, ρ∈{0.1, 0.5, 0.9}, q0∈{0.1, 0.5, 0.9}, (α, β)∈{(0.5, 0.5), (1, 2), (2, 5)}, σ∈{10, 100, 250} and CL∈{10, 50, 200}. In addition, HAT is executed for 10 times to obtain the average maximal network reliability for each parameter setting. While one of the parameters changes, the others are set as default values. Table 9and Fig. 14illustrate the experimental results. HAT has better performance on the average maximal network reliability under the default parameter setting. However, we observe network reliability is not reduced nor increased as γ, (α, β), σ, or CL changes (see Fig. 14). For both ρ and q0, the computational results conform with the suggestions from the previous studies [12,17,21,22,25–27].This section adopts OCT and TANET to compare the proposed HAT with two hybrid algorithms of TS and ACO which are developed based on Katagiri et al. [37] and Ibri et al. [38], respectively. Katagiri et al. [37] adopted TS to find a great solution and then ACO to increase the diversity of the solution to expand the exploration area. This procedure is terminated until the current computational time is greater than or equal to the time threshold. The algorithm proposed by Ibri et al. [38] is similar to the proposed HAT but it used a master–slave technique in the TS procedure to speed up the algorithm. In the TS with the master–slave technique, each solution from ACO shares the search information with each other.For the convenience, the hybrid algorithm based on Katagiri et al. [37] (resp. Ibri et al. [38]) is named HAT-K (resp. HAT-I). Given d=6Gb and Ttime=3600, each algorithm is executed for 10 times to obtain the largest and average maximal network reliabilities. The experimental results of both networks are concluded in Table 10. HAT has better computational efficiency than HAT-K. HAT-I narrowly outperforms HAT. That is, the master–slave technique strengthens the computational efficiency. Fig. 15presents that the maximal network reliabilities from HAT-I and HAT appear a higher degree of centralization than HAT-K.

@&#CONCLUSIONS@&#
Several researchers have recently applied a GA-based approach to solve the MFN reliability maximization problem. However, this approach may easily be trapped in local optimality or premature convergence. Therefore, in our study, we developed a hybrid ACO and TS algorithm to solve this problem. TS mainly enlarges the search space to prevent the ACO from being trapped in local optimality. Several experiments on the benchmark and practical networks demonstrated the proposed HAT yields higher network reliability than GA, PSO, ACO, TS, and SA. According to our experimental results, the population-based algorithms including GA, ACO, and PSO yield higher network reliability than the non-population-based algorithms including TS and SA, out of which GA outperformed the other algorithms for most of the experiments. However, our proposed HAT has higher computational efficiency than all other algorithms, especially for networks with more than six MPs or 10 arcs. We also compared several hybrid variations of TS and ACO. The experimental results show that using the master–slave technique, the HAT has higher computational efficiency than without it.Although our study focused on computer networks, future research may be extended to applications in electric power networks, manufacturing networks, and logistics networks.