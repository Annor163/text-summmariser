@&#MAIN-TITLE@&#
A modified ant colony system for finding the expected shortest path in networks with variable arc lengths and probabilistic nodes

@&#HIGHLIGHTS@&#
The problem of finding the expected shortest path in stochastic networks has numerous applications.A new local heuristic is formulated for the proposed algorithm to consider the probabilistic nodes.The arc lengths are randomly generated based on the arc length distribution functions.

@&#KEYPHRASES@&#
Ant colony system (ACS),Stochastic networks,Expected shortest path,Probabilistic nodes,Random arc lengths,

@&#ABSTRACT@&#
The problem of finding the expected shortest path in stochastic networks, where the presence of each node is probabilistic and the arc lengths are random variables, have numerous applications, especially in communication networks. The problem being NP-hard we use an ant colony system (ACS) to propose a metaheuristic algorithm for finding the expected shortest path. A new local heuristic is formulated for the proposed algorithm to consider the probabilistic nodes. The arc lengths are randomly generated based on the arc length distribution functions. Examples are worked out to illustrate the applicability of the proposed approach.

@&#INTRODUCTION@&#
Ant Colony Optimization (ACO) is a metaheuristic approach for solving hard combinatorial optimization problems. The first ACO algorithm, ant system (AS), was proposed by Colorni et al. [9] for solving the traveling salesman problem (TSP). The ACO algorithm is an inspiration of ants’ behavior. Ants have the ability to find the shortest path between their nest and a food source. They place a chemical substance called pheromone on the paths they traverse between their nest and the food source. When deciding a path to follow, they tend to choose the ones with strong pheromone intensities. Progressively, shorter paths will accumulate more pheromone than longer ones; therefore, shorter paths are more likely to be chosen in future iterations.The ACO's success in solving the TSP has expanded its application to some other types of combinatorial optimization problems, such as quadratic assignment [15,20], vehicle routing [4–6,21], production scheduling [16,24–26,28], graph coloring [8], telecommunication network [10,22], facility layout [2] and cell assignment [23].Here, we consider solving a particular version of the shortest path (SP) problem, in which the presence of all nodes except the source and the sink nodes are assumed to be probabilistic and the arc lengths are random variables, by proposing a modification of the ant colony system (ACS) proposed by Dorigo et al. [12]. Since the nodes are probabilistic, it is necessary to use additional local heuristics to guide the ants.In the standard SP problem, the number of nodes and the lengths of arcs are known with certainty. The deterministic version of this problem is easily solved. Several efficient algorithms have been developed by Bellman [3], Dijkstra [11], Dreyfus [13] and Gutjahr [17]. However, due to occasional failures encountered in certain applications, opportunities for maintenance or other reasons, various types of uncertainties are frequently present in practice. For example, the lengths of the arcs may represent transportation times or costs rather than the geographical distances and since times or costs fluctuate with the traffic or weather conditions, then deterministic arc lengths would not be a practical consideration [1,14,18,19]. In some cases, in addition to the length of the arcs, the number of nodes is nondeterministic; e.g., computing the shortest path from the source node to the sink node in communication networks, when the intermediate nodes are frequently subjected to failures and travel times (or speeds) are random variables [27]. Our focus here is on a network in which the presence of all nodes except source and sink nodes is probabilistic and the arc lengths are random variables.The remainder of our work is organized as follows: In Section 2, the problem of finding the expected shortest path in stochastic network with probabilistic nodes is described in detail. In Section 3, we present the fundamental concept and structure of AS and ACS. In Section 4, we propose the specific features of the ACS algorithm and in Section 5, and the proposed algorithm is illustrated by working out several examples. We conclude in Section 6.A stochastic network with probabilistic nodes is described as a network G=(N, A), where nodes N are stations capable of receiving and transmitting messages, and arcs A are one-way communication links connecting pairs of nodes. It is assumed that each node in N, except for the source node and the sink node, is probabilistic, meaning that each intermediate node i is present in the network with the probability piand is absent from the network with probability 1−pi, and the arc lengths may have various probability distribution functions including normal, uniform or exponential, with the assumption that the arc length variables are independent. We denote a path P in G by a node sequence [i1,…,in], where i1 is the initial node and inis the terminating node.As an example, consider the network of Fig. 1. It is assumed that nodes 1 and 5 are source and sink nodes, respectively, and their probabilities of presence in the network are one, while every intermediate node may be absent from the network with a known probability. The probabilities for the presence of intermediate nodes in the network are:p2=12,p3=23,p4=34,and, the arc lengths of nodes (i,j), xij, are stochastic variables having normal distributions. For this problem, we are to determine the shortest path between node 1 (source node) and node 5 (sink node).The problem can be formulated as a multi-objective stochastic shortest path problem shown below:(1)maxz1=∏i∈Npiyiminz2=∑i∈N∑j∈NElij.xijs.t.∑i∈N∑j∈Nxij−∑j∈N∑i∈Nxji=1ifi=sM−M.yiifi≠s,t−1ifi=txij,yi∈{0,1},∀i,j∈N,where xijis a binary variable which is equal to 1 if arc (i,j) exists in the path and 0 otherwise, yiis also a binary variable which is equal to 1 if node i exists in the path and 0 otherwise, M is a large number, s is the source node, t is the sink node and Elijshows the expected length of arc (i,j). In this model, the first and second objective functions show the presence probability and expected length of a path from the source node to the sink node, respectively. This means that we are looking for a path with shortest expected length and largest presence probability.To solve the problem by the Lingo 8.0 solver, we first design a stochastic simulation to estimate Elij, the expected length of arc (i,j), as follows:step 1: TLij=0.step 2: for k=1 till K doGenerate lij(k), the length of arc (i,j), based on its distribution function.TLij=TLij+lij(k).step 3: Elij=TLij/K.Secondly, we develop a single objective model by constructing an objective function Z, using Z1 and Z2.maxZ=10000z1z2=10000∏i∈Npiyi∑i∈N∑j∈NElij.xijIn this section, in order to explain the ant colony algorithm, we consider the TSP algorithm given by Chenga et al. [7].Given a graph G=(N,A), where N is the set of nodes and A is the set of arcs, the objective of the TSP is to find the minimum length Hamiltonian circle in G.The AS algorithm defines the amount of pheromone deposited on each arc (i,j),∀(i,j)∈A, as:(2)τ(i,j)(t)=(1−ρ)τ(i,j)(t−1)+Δτ(i,j)(t),whereτ(i,j)(t)is the amount of pheromone on arc (i,j) at time t, ρ, with 0<ρ<1, is the evaporation rate, andΔτ(i,j)(t)is the increase in the pheromone amount on arc (i,j) between time (t−1) and time t. Note thatΔτ(i,j)(t)represents the accumulation of pheromone deposited by all the ants which have traveled along the arc in the time period; that is,(3)Δτ(i,j)(t)=∑kΔτijk(t),whereΔτijk(t)is the amount of pheromone laid down by the kth ant on arc (i,j) between time (t−1) and time t. The value ofΔτijk(t)after a complete tour is given by:(4)Δτijk(t)=QLkif(i,j)∈Tk0otherwise,where Tkdenotes the tour completed by the kth ant, Lkis the tour length and Q is a constant.The transition probability governing the choice of the next node to visit, that is node j, by an ant in node i at time t is defined to be:(5)Pij(t)=τijηijα∑z∈Niτizηizα,j∈Ni,whereNi⊆Nis the set of all nodes in the neighborhood of node i which the ant has not yet visited,ηijis a visibility term, defined as the inverse of the distance between node i and node j (i.e.,ηij=1/dij), and α is a user-defined parameter which controls the relative importance of pheromone concentration versus visibility when evaluating the next node in the tour.ACS is an extension of the original AS algorithm, designed to improve the efficiency of AS in solving the TSP. ACS differs from AS in three major ways (see [18]): (i) the state transition rule is modified to provide the ability to achieve a balance between exploring new arcs and exploiting accumulated knowledge about the problem, (ii) the local pheromone updating rule is applied whenever ants construct a tour, and (iii) a global pheromone updating rule is applied only to arcs belonging to the best tour.The ACS state transition rule is composed of two separate strategies, namely exploitation and exploration. The exploitation strategy is a deterministic rule which always chooses the arc with the maximum value of pheromone intensity and visibility (Eq. (6) given below). Conversely, the exploration strategy is a stochastic rule with the form shown by Eq. (5). When determining which node to visit next, i.e., node j, the choice of strategy is made in accordance with the following prespecified random distribution:(6)j=argmaxz∈Niτiz(t)(ηiz)αifq≤q0Sotherwise,where q0(0≤q0≤1) is an input to the algorithm which shows the choice probability of the exploitation strategy and q is a randomly generated number uniformly distributed in the interval [0,1], so that if its value is less than q0, the exploitation strategy is chosen and otherwise the exploration strategy is chosen. S is the transition probability rule in the exploration strategy defined by Eq. (5).Two updating rules of pheromone, local pheromone updating and global pheromone updating, will be explained for the main problem in the next section.Because of the success of the ACO algorithms in the single objective case, many researchers have been engaged to employ ACO algorithm for solving multi-objective problems. They designed various kinds of algorithms by modifying the procedures of both the AS and ACS. Investigating the literature, the multi-objective ACO algorithms can be classified in 3 classes:•Algorithms that employ several colonies, one for each objective.Algorithms that employ several pheromone trail matrices, one for each objective.Algorithms that employ several heuristic information, one for each objective.Our proposed ACO algorithm here will fall in the third class, being a modified ant colony system algorithm for solving the multi-objective problem. The notable difference is the presence of a type of heuristic parameter in the multiple objectives ant colony algorithm to solve the shortest path problem. This section introduces the main characteristics of our algorithm. A flowchart of the algorithm is given in Section 5 to clarify the steps of the algorithm.To generate a solution, a path from the source node to the sink node, each ant is placed in the source node and then the ant chooses the next node. This trend continues until the ant reaches the sink node.As discussed, having been placed in the source node, the ant must choose a node among all the neighboring nodes one at a time to reach the sink node. In the algorithm developed here, two local heuristics are formulated to direct the ants toward appropriate nodes, nodes which satisfy the two objectives defined in the model (1), that is, (i) to maximize the presence probability of the traveled path, and (ii) to minimize the expected length of the traveled path. The heuristics for these two objectives are denoted as pjand gij, respectively, where, pjis the presence probability of node j, which is a network information, andgij=1/Elij, with Elijbeing the expected length of arc (i,j) estimated by an stochastic simulation method. The rationale behind these heuristics is that the ant should visit those nodes whose presence probabilities are larger with arc lengths related to those nodes being smaller. The two heuristics are incorporated in the current algorithm by modifying the state transition rule in the original ACS algorithm. Consequently, Eqs. (5) and (6) will change to Eqs. (7) and (8), respectively:(7)P(i,j)=τ(i,j)αp(j)γg(i,j)β∑z∈Niτ(i,z)αp(z)γg(i,z)βj∈Ni0otherwise,(8)j=argmaxz∈Niτ(i,z)αp(z)γg(i,z)βifq≤q0Sotherwise,where i shows the node in which the ant is located (current node), j is the next node, Niis the set of all nodes in the neighborhood of node i, α, β and γ are relative importance of arc pheromone, expected arc length and node presence probability, respectively. In our strategy (S), based on formula (6), for every node j, a number in the range from zero to one under P(i,j) is assigned, where,∑j∈JP(i,j)=1. For selecting the next node, it has been performed that all P(i,j) sequenced in an axis, then, a random number ranging from zero to one will be generated. The position which this number is placed, the related j of it is the next selected node. As an example, assume that for j=1, 2, 3,P(i,1)=0.2,P(i,2)=0.5,P(i,3)=0.3,respectively, as shown in Fig. 2:And, if the random number generated is 0.65, then the related j selected is equal to 2.As described, in the ACS algorithm the available pheromone on the network arcs is updated in two ways: local pheromone updating rule and global pheromone updating rule.After the kth ant completes a path from the source node to the sink node, the pheromones on the arcs traveled by ant are updated by:(9)τ(i,j)(t)=(1−ω)τ(i,j)(t−1)+Δτ(i,j)(t),∀(i,j)∈Pk,whereτ(i,j)(t−1)andτ(i,j)(t)are the values of pheromones corresponding to arc (i,j) in the periods (t) and (t−1), respectively, ω is the pheromone evaporation parameter, Pkis the traveled path by the kth ant andΔτ(i,j)(t)is computed by:(10)Δτ(i,j)(t)=(Lk)−1if(i,j)∈Pk0otherwise,where Lkis the length of the traveled path by the kth ant.To speed up convergence of the algorithm, in the global pheromone updating rule, at the end of each iteration, where all ants complete their paths, more pheromone will be appropriated to the path with minimum length according to:(11)τ(i,j)(t)=τ(i,j)(t−1)+Δτ(i,j)(t),∀(i,j)∈P*,where P*is the shortest traveled path in the iteration andΔτ(i,j)(t)is defined to be:(12)Δτ(i,j)(t)=QL*if(i,j)∈P*0otherwise,where Q is a constant and L*is the length of the shortest path.Generally, stopping rules can be defined in different ways, such as exceeding a given number of iterations, surpassing a given CPU time limit, or not having much improvement on the solution after a number of iterations. We should point out that in our algorithm, in every iteration the number of times each path is traveled by ants is recorded and the path with maximum frequency is decided to be a “marked” path for that iteration, and this information is used for a stopping decision. Our ACS procedure stops when the marked path does not change in a specified number of iterations and frequency of the last marked path equals the total number of ants in the iteration or when the maximum number of iterations is reached. Then, the path through which all the ants have reached the target node in the last iteration is chosen as the shortest path.We can now give our ACS Algorithm.Algorithm: Ant Colony System (ACS) Algorithm for Shortest Path.(1)Set the value of the algorithm parameters including antnum, maxiteration, inittrail,q0,α,β,γ,ωand QEstimate the expected length for all arcs using a stochastic simulation method.Set the initial value of pheromone τ(i,j), for all(i.j)∈A.For k=1,…, antnum do(4.1)Consider the sink node as the current node (i).Determine the next node j using Eqs. (7) and (8).If j is not the sink node then Let i=j and go to (4.2).Compute the length of traveled path by the kth ant (Pk).Update the pheromone on the traveled path by the kth ant using the local updating rule.Find the shortest traveled path (P*) among paths P1, …, Pantnum.Update the pheromone on the shortest traveled path (P*) using the global updating rule.Determine the path with most frequency as the marked path.If the stopping criterion is not satisfied then go to (4).Identify the marked path as the expected shortest path.Fig. 3presents a flowchart for the steps involved in the proposed algorithm.Here, we describe the computational experiments we have made in order to evaluate the effectiveness of the proposed ACS algorithm. The platform of our experiments is a personal computer with a Pentium-IV 1.86GHz CPU and 512MB RAM on a 32-bit operating system.The parameters of the proposed ACS algorithm are defined as follows:antnum:The number of ants in each iteration of the algorithm.maxiteration:The maximum number of iterations allowed.inittrail:The initial value of the pheromone on the arcs.q0:The probability of choosing exploitation strategy in determining the next node.α:The relative importance of the pheromone.β:The relative importance of the arc length.γ:The relative importance of the presence probability of node.ω:Pheromone evaporation rate.Q:A constant used in Eq. (12) to update the pheromone globally.To set the parameters, we consider a transportation network with directed arcs as shown in Fig. 4.In this network, nodes 1 and 6 are the source and sink nodes, respectively, and the presence probabilities of the intermediate nodes are shown in the figure. To decide upon appropriate parameter values, we conducted a set of experiments using the following problem instances.Instance 1The length of each arc is a normal random variable with mean of 20 and standard deviation of 5.The lengths of arcs (1,3), (4,5) and (5,6) are normal random variables with mean of 30 and standard deviation of 5 and the remaining arcs are normal random variables with mean of 20 and standard deviation of 5.The lengths of arcs (1,3), (4,5) and (5,6) are normally distributed with mean of 22 and standard deviation of 5 and the other arc lengths are normally distributed with mean of 20 and standard deviation of 5.To determine an appropriate set of parameter values, we applied the ACS algorithm to the different instances with different parameter values and compared with the global optimum solutions obtained from the LINGO 8.0 solver. An appropriate combination of parameter values was specified as those values associated with the best experimental solution. The final parameter settings were determined to be: antnum=20, maxiteration=500, inittrail=1, q0=0.9, α=1, β=γ=[0.6–1], ω=0.1 and Q=2. Table 1summarizes the comparison results and includes parameter values used to solve the instance problems using the algorithms. Fig. 5shows convergence graphs of our proposed ACS algorithm.To show the effectiveness of the proposed algorithm for larger network problems, three examples were generated randomly and for each problem, three different instances were considered. The number of nodes and their presence probabilities are fixed but distribution functions of the arc lengths vary. The results obtained by our algorithm were compared with the ones obtained by the Lingo 8.0 solver, as we discuss below.Example 1The first example is a transportation network with 10 nodes and 16 arcs, as shown in Fig. 6. The presence probabilities of nodes are shown in Table 2.The arc lengths are random variables and distribution functions of the arc lengths for three different instances are shown in Tables 3–5, respectively, in whichN(μ,σ2)stands for normal distribution, U(a,b) stands for uniform distribution,EXP(β)stands for exponential distribution andT(a,b,m)stands for triangular distribution. Distribution functions are shown in bold.Table 6shows the comparison of the results obtained by our ACS algorithm and the Lingo 8.0 solver for the network of Fig. 6 in three different instances.The convergence graph for the first instance is presented in Fig. 7.Example 2The second example is a transportation network with 23 nodes and 40 arcs, as shown in Fig. 8. The presence probabilities of nodes are shown in Table 7.Similar to the previous problem, instances have been considered with the same corresponding distributions. The distribution functions of the arc lengths for the first instance are shown in Table 8. For brevity, here we have not shown the tables corresponding to the other two distributions.Table 9shows the comparison of the results obtained by our ACS algorithm and the Lingo 8.0 solver for the network of Fig. 8 in three different instances.The convergence graph for the first instance is presented in Fig. 9.Example 3The third example is a transportation network with 40 nodes and 64 arcs, as shown in Fig. 10. Similar to the two previous problems, this problem has also been considered in three instances. Due to the large numbers of nodes, arcs, presence probabilities of nodes and distribution functions of arc lengths are not presented. Table 10shows the comparison of the results obtained by our ACS algorithm and the Lingo 8.0 solver for the network of Fig. 10. The convergence graph is presented in Fig. 11.As shown in Tables 1, 6, 9 and 10, the proposed algorithm compared with traditional algorithm is much faster.For a single sample of data, the Kolmogorov–Smirnov test is used to test whether or not the sample of data is consistent with a specified distribution function. When there are two samples of data, it is used to test whether or not these two samples may reasonably be assumed to come from the same distribution.The Kolmogorov–Smirnov test does not require the assumption that the population is normally distributed. The hypotheses are given below.H0Sample is normally distributed.Sample is not normally distributed.According to the Kolmogorov–Smirnov test, as shown in Table 11, the P-value is smaller than 0.05, and thus the data is not expected to follow a normal distribution and the assumption of normality of observations is not accepted.Analysis of variance allows us to compare several groups of observations, all of which are independent but possibly with a different mean for each group. A test of great importance is whether or not all the means are equal. Nonparametric tests are sometimes called distribution-free tests because they are based on fewer assumptions (e.g., they do not assume that the outcome is approximately normally distributed).The Wilcoxon Mann–Whitney Test is a powerful nonparametric test for comparing two populations. It is used to test the null hypothesis that two populations have identical distribution functions against the alternative hypothesis that the two distribution functions differ only with respect to location (median), if at all:H0: μ1=μ2.H1: μ1≠μ2.The Wilcoxon Mann–Whitney test does not require the assumption that the differences between the two samples are normally distributed.In many applications, the Wilcoxon Mann–Whitney test is used in place of the two-sample t-test when the normality assumption is questionable.This test can also be applied when the observations in a sample of data are ranks, that is, ordinal data rather than direct measurements.According to Table 12, the P-value being much smaller than 0.01, Mann–Whitney test shows a significant difference between the responses obtained from the two algorithms.

@&#CONCLUSIONS@&#
