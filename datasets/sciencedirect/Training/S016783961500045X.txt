@&#MAIN-TITLE@&#
Identification and “reverse engineering” of Pythagorean-hodograph curves

@&#HIGHLIGHTS@&#
Methods to identify whether or not given control points define a Pythagorean-hodograph (PH) curve are formulated.The methods are based on the satisfaction of control-point constraints or saturation of quadrature arc-length estimates, and apply equally to planar and spatial PH curves.For identified PH curves, algorithms to reconstruct the complex or quaternion pre-image polynomials are developed.The proposed methods allow existing CAD systems to fully exploit the advantageous properties of PH curves within the context of prevailing CAD geometry representations.

@&#KEYPHRASES@&#
Bézier control points,Pythagorean-hodograph curves,Arc length,Parametric speed,Numerical quadrature,Reverse engineering,

@&#ABSTRACT@&#
Methods are developed to identify whether or not a given polynomial curve, specified by Bézier control points, is a Pythagorean-hodograph (PH) curve — and, if so, to reconstruct the internal algebraic structure that allows one to exploit the advantageous properties of PH curves. Two approaches to identification of PH curves are proposed. The first is based on the satisfaction of a system of algebraic constraints by the control-polygon legs, and the second uses the fact that numerical quadrature rules that are exact for polynomials of a certain maximum degree generate arc length estimates for PH curves exhibiting a sharp saturation as the number of sample points is increased. These methods are equally applicable to planar and spatial PH curves, and are fully elaborated for cubic and quintic PH curves. The reverse engineering problem involves computing the complex or quaternion coefficients of the pre-image polynomials generating planar or spatial Pythagorean hodographs, respectively, from prescribed Bézier control points. In the planar case, a simple closed-form solution is possible, but for spatial PH curves the reverse engineering problem is much more involved.

@&#INTRODUCTION@&#
The phrase “reverse engineering” typically refers to the recovery of lost design specifications for an artifact, from its physical realization. Since this endeavor inevitably incurs some loss of fidelity to the original design intent, it is always preferable to invoke original plans or CAD models when possible. There are, nevertheless, circumstances in which this is impractical, and one must appeal to a reverse engineering process to reconstruct — as faithfully as possible — the original underlying design intent of a given physical artifact.Most modern CAD systems rely on the Bézier/B-spline representation to specify “free-form” curves and surfaces. Although this provides considerable design flexibility, and compatibility with commonly-used “simple” shapes, it necessitates the use of approximations for many basic geometrical functions, such as computation of arc lengths, offset curves, and certain rational frames on space curves. The Pythagorean-hodograph (PH) curves circumvent these problems by incorporating a special algebraic structure (Farouki, 2008), while remaining fully compatible with the standard Bézier/B-spline representation. However, to exploit the advantageous features of PH curves, their “internal structure” variables (which are not directly available from their Bézier/B-spline forms) must be known. Specifically, planar and spatial Pythagorean hodographs are constructed by quadratic mappings of complex and quaternion polynomials, respectively, and the coefficients of these pre-image polynomials are required for the exact determination of various PH curve properties.Many methods for the construction of planar and spatial PH curves are available (Farouki et al., 2008, 2001; Farouki and Neff, 1995; Habib and Sakai, 2007; Huard et al., 2014; Jaklic et al., 2012; Jüttler and Mäurer, 1999; Jüttler, 2001; Klar and Valasek, 2011; Monterde and Ongay, 2012; Walton and Meek, 1998, 2002). The goal of this study is to facilitate their importation into commercial CAD systems through existing CAD data formats, by developing algorithms that (i) identify whether or not specified Bézier/B-spline data define a PH curve; and (ii) if so, reconstruct its “internal structure” variables. Since the polynomial PH curves are a proper subset of all polynomial curves, a randomly-chosen polynomial curve has a negligible probability of being a PH curve: the proposed methods make sense only if one has a priori reason to suspect that given data define a PH curve. Moreover, for use in “real” applications, the identification and reconstruction of PH curves must be formulated in floating-point arithmetic, and can thus be solved only within a given tolerance (which in practice can be very small). For purely academic investigations, one may consider only curves defined by rational coefficients, and invoke symbolic computation methods.The algorithms described herein may be categorized as identification and reconstruction schemes, the latter being invoked only when the former yields an affirmative outcome. The focus will be on the polynomial PH curves, since rational PH curves lack some features of polynomial PH curves required in these methods. Also, for brevity, the input for the algorithms is assumed to be Bézier control points for a single segment, which may be readily extracted (Farouki et al., 2014) from the B-spline representation of a multi-segment spline.The remainder of this paper is organized as follows. After a brief review of some basic properties of PH curves in Section 2, two different schemes for determining whether or not a given set of Bézier control points specify a PH curve are described in Section 3 — the method appropriate to a particular application context may be selected on the basis of computational efficiency and any desired additional information concerning an identified PH curve. The identification algorithms do not distinguish between planar and spatial PH curves, but the “reverse engineering” algorithms described in Section 4 require individual treatment of these two cases. Specifically, the hodographs for planar and spatial PH curves are generated from complex-number and quaternion “pre-image” polynomials, respectively, whose coefficients must be determined. Finally, Section 5 summarizes the key results obtained herein, and concludes with some comments on their practical use.A degree-n polynomial curver(t),t∈[0,1]specified in terms of its Bézier control pointsp0,…,pnas(1)r(t)=∑k=0npkbkn(t),bkn(t)=(nk)(1−t)n−ktk,is a Pythagorean-hodograph (PH) curve if and only if its derivative satisfies(2)|r′(t)|2=σ2(t)for some polynomialσ(t)of degreen−1. We consider here only PH curves of odd degree, since even degree curves may exhibit singular points, satisfyingσ(t)=0for real values of t. The non-negative function(3)σ(t)=|r′(t)|=dsdt,defining the rate of change of arc length s with respect to the parameter t, is called the parametric speed of the curver(t). Thus, the distinctive property of a PH curve is that its parametric speed is a polynomial in t.For planar PH curves, the satisfaction of (2) is typically achieved through a complex-variable model (Farouki, 1994), in which plane coordinates(x,y)are regarded as the real and imaginary parts of a complex variablez=x+iy. Then a sufficient-and-necessary condition for satisfaction of (2) is that the derivative should be of the form(4)r′(t)=w2(t)for some complex polynomialw(t)=u(t)+iv(t), and the parametric speed isσ(t)=|w(t)|2. For spatial PH curves, on the other hand, a quaternion model is employed (Choi et al., 2002; Farouki et al., 2002) with the derivative expressed in the form(5)r′(t)=A(t)iA⁎(t),in terms of a quaternion polynomial11Calligraphic characters such asAdenote quaternions, which are regarded as consisting of a scalar part a and vector part a, so thatA=(a,a)anda=scal(A),a=vect(A).A(t)=u(t)+v(t)i+p(t)j+q(t)kand its conjugateA⁎(t)=u(t)−v(t)i−p(t)j−q(t)k. The parametric speed of the PH curve defined by (5) isσ(t)=|A(t)|2=u2(t)+v2(t)+p2(t)+q2(t). Ifw(t)andA(t)in expressions (4) and (5) are of degree m, their integration yields planar and spatial PH curves of degreen=2m+1. Complete details on these formulations, and the properties of PH curves, may be found in Farouki (2008).In the present context, we assume that a Bézier curve of the form (1) is given (i.e., its control pointsp0,…,pnare specified) and we wish to ascertain whether this curve results from an integration of (4) or (5) — and, if so, to reconstruct the complex polynomialw(t)or quaternion polynomialA(t)that generatesr′(t). Since the derivative ofr(t)can be expressed (Farin, 1997) as(6)r′(t)=∑k=0n−1dkbkn−1(t),dk=n(pk+1−pk),we have(7)|r′(t)|2=∑k=02(n−1)akbk2(n−1)(t),where, using the arithmetic procedures for Bernstein-form polynomials (Farouki and Rajan, 1988), we define(8)ak=∑j=max⁡(0,k−n+1)min⁡(n−1,k)(n−1j)(n−1k−j)(2n−2k)dj⋅dk−j.In the context of exact symbolic computation, given a polynomial curver(t)with rational coefficients, the factorization of|r′(t)|2into a perfect square can be used to determine whether it has a Pythagorean hodograph. For regular curves with|r′(t)|≠0for all real t, such a factorization is equivalent to the property that the roots of the polynomial|r′(t)|2occur as complex-conjugate root pairs of even multiplicity. However, methods to compute multiple roots are typically slow to converge and sensitive to rounding errors. Experiments with numerical root-finding algorithms indicate that attempting to compute the root structure of|r′(t)|2is not a viable identification scheme, compared to the methods proposed below, in terms of efficiency and robustness.The emphasis here is on practical methods, amenable to fast and reliable identification of PH curves in floating-point arithmetic, based on the Bézier control pointsp0,…,pnin (1) as input. Two methods are described below, that require only arithmetic operations on the control points and have been found to yield reliable identifications of PH quintics with a relative precision of10−15to10−14in standard double-precision arithmetic. The first is based on evaluating certain expressions in the control polygon legs, and the second exploits the fact that numerical quadrature arc-length estimates of increasing order exhibit a sharp saturation when expression (1) defines a PH curve.If the control points in (1) specify a PH curve, the expression defined by (7) and (8) must coincide with the perfect square of some polynomial(9)σ(t)=∑k=0n−1σkbkn−1(t)of degreen−1. Thenσ2(t)is a polynomial of degree2(n−1), whose Bernstein coefficients are given by expression (8), but withdj⋅dk−jreplaced byσjσk−j. Hence, satisfaction of the PH condition (2) is equivalent to the existence of real valuesσ0,…,σn−1such thatd0,…,dn−1satisfy the system of equations defined fork=0,…,2n−2by(10)∑j=max⁡(0,k−n+1)min⁡(n−1,k)(n−1j)(n−1k−j)(2n−2k)(dj⋅dk−j−σjσk−j)=0.We assumer(t)has a proper parameterization, i.e.,σ(t)>0fort∈[0,1]— this means, in particular, thatσ(0)=σ0>0andσ(1)=σn−1>0.The coefficientsdkof the derivativer′(t)differ from the control-polygon legsΔpk=pk+1−pkonly by the factor n, so for brevity we often simply refer tod0,…,dn−1as the control-polygon legs. The conditions ond0,…,dn−1identifying PH curves derived below are homogeneous, and remain valid if we substituteΔp0,…,Δpn−1. By eliminating the n indeterminate quantitiesσ0,…,σn−1from the system (10) of2n−1equations, one obtains a system ofn−1constraints on the control-polygon legsd0,…,dn−1of a degree-n Bézier curver(t), whose satisfaction identifies it as a PH curve. Note that, whereas planar and spatial PH curve constructions employ distinct algebraic models, this identification scheme for PH curves is independent of the dimension ofr(t). We now consider the reduction of the system (10) in the context of PH cubics and quintics, settingdk=|dk|for brevity.Proposition 1A planar or spatial cubic Bézier curve with control polygon legsd0,d1,d2has a Pythagorean hodograph if and only if it satisfies(11)d0d1⋅d2=d2d0⋅d1,(12)2(d0⋅d1)(d1⋅d2)=d0d2(d0⋅d2−d0d2+2d12).ProofFor a cubic curve, the conditions (10) become(13)d02=σ02,d0⋅d1=σ0σ1,d0⋅d2+2d12=σ0σ2+2σ12,d1⋅d2=σ1σ2,d22=σ22.By eliminatingσ0,σ1,σ2from these five equations, the condition for a cubic to be a PH curve is reducible to two scalar constraints on the control-polygon legsd0,d1,d2. Sinceσ0,σ2>0for a regular curve, we must haveσ0=d0≠0andσ2=d2≠0from the first and last of Eqs. (13). We also assume thatd1≠0, since settingd1=0in (13) givesd0⋅d2=d0d2, sod0,d1,d2are linearly dependent and the curve degenerates to a straight line. Withσ0=d0andσ2=d2, the second and fourth equations giveσ1=d0⋅d1/d0=d1⋅d2/d2, and these expressions are consistent if and only if (11) holds. Substituting forσ0,σ1,σ2into the third equation then gives condition (12).  □The conditions of Proposition 1 are consistent with the characterizations for planar and spatial PH cubics, in terms of their Bézier control polygons, derived in Farouki and Sakkalis (1990, 1994). For the planar case, it was shown in Farouki and Sakkalis (1990) that a cubic is a PH curve if and only if the lengthsd0,d1,d2of the control-polygon legs and the anglesθ1,θ2at the interior vertices (see Fig. 1) satisfy(14)d1=d0d2andθ1=θ2.Now by the definition of the anglesθ1,θ2we haved0⋅d1=−d0d1cos⁡θ1andd1⋅d2=−d1d2cos⁡θ2. Substituting into (11) then implies thatcos⁡θ2=cos⁡θ1and hencesin⁡θ2=±sin⁡θ1, so we have eitherθ2=θ1orθ2=2π−θ1. Since (the extensions of)d0andd2make an interior angle (see Fig. 1) ofθ1+θ2−π, we obtaind0⋅d2=−d0d2cos⁡(θ1+θ2−π)=d0d2cos⁡(θ1+θ2)=d0d2(cos⁡θ1cos⁡θ2−sin⁡θ1sin⁡θ2).Substituting ford0⋅d1,d1⋅d2,d0⋅d2into (12) and simplifying then gives2d12(cos⁡θ1cos⁡θ2−1)=d0d2(cos⁡θ1cos⁡θ2−sin⁡θ1sin⁡θ2−1).Now ifθ2=θ1, this reduces tod12=d0d2, so the conditions (14) are satisfied. On the other hand, whenθ2=2π−θ1it reduces to2d12sin2⁡θ1=0, implying that (i)d1=0, or (ii)θ1,θ2are integer multiples of π. As noted above, case (i) identifies degeneration to a straight line, and this is clearly also true for case (ii). Hence, for a proper PH cubic, the conditions (13) are satisfied.For the spatial case, it was shown in Farouki and Sakkalis (1994) that a twisted cubic is a PH curve if and only ifd0andd2lie on a right-circular cone of some half-angle ϑ aboutd1as axis, with azimuthal separation φ on this cone given by(15)cos⁡φ=1−2d12d0d2.In other words, in a coordinate system in whichd1is parallel to the positive z direction andd0is parallel to the(z,x)plane, we must have(16)d0=d0(sin⁡ϑ,0,cos⁡ϑ),d1=d1(0,0,1),d2=d2(sin⁡ϑcos⁡φ,sin⁡ϑsin⁡φ,cos⁡ϑ).Now writingd0⋅d1=d0d1cos⁡θ01andd1⋅d2=d1d2cos⁡θ12, the condition (11) implies thatcos⁡θ01=cos⁡θ12(=cos⁡ϑ, say) for non-zerod0,d1,d2. This means thatd0,d2lie on a cone of half-angle ϑ withd1as axis. If φ is their azimuthal separation on this cone, substituting from (16) into (12) gives2d0d12d2cos2⁡ϑ=d0d2[d0d2(sin2⁡ϑcos⁡φ+cos2⁡ϑ)−d0d2+2d12],and upon simplification this becomesd0d2sin2⁡ϑcos⁡φ=d0d2sin2⁡ϑ−2d12sin2⁡ϑ.Noting thatd1andd2are non-zero, and assuming thatsin⁡ϑ≠0(since this identifies the degenerate case in which the control-polygon legs are collinear), this implies that the condition (15) is satisfied.Proposition 2A planar or spatial quintic Bézier curve with control polygon legsd0,d1,d2,d3,d4has a Pythagorean hodograph if and only if it satisfies(17)3d02d42(d4d0−d0d4)⋅d2=4d03|d3×d4|2−4d43|d0×d1|2,(18)d04(d4d0−d0d4)⋅d3+6d02d4(d0×d1)⋅(d0×d2)=8d4d0⋅d1|d0×d1|2,(19)d44(d0d4−d4d0)⋅d1+6d42d0(d2×d4)⋅(d3×d4)=8d0d3⋅d4|d3×d4|2,(20)d03d43(d0⋅d4−d0d4+18d22)+16d02d42[d0d4d1⋅d3−(d0⋅d1)(d3⋅d4)]=2[3d02d0⋅d2+4|d0×d1|2][3d42d2⋅d4+4|d3×d4|2].ProofFor a quintic curve, the conditions (10) become(21)d02=σ02,d0⋅d1=σ0σ1,3d0⋅d2+4d12=3σ0σ2+4σ12,d0⋅d3+6d1⋅d2=σ0σ3+6σ1σ2,d0⋅d4+16d1⋅d3+18d22=σ0σ4+16σ1σ3+18σ22,d1⋅d4+6d2⋅d3=σ1σ4+6σ2σ3,3d2⋅d4+4d32=3σ2σ4+4σ32,d3⋅d4=σ3σ4,d42=σ42.Sinceσ0,σ4>0for a regular curve, we haveσ0=d0≠0andσ4=d4≠0from the first and ninth equations, and from the second and eighth we obtainσ1=d0⋅d1/d0andσ3=d3⋅d4/d4. Using|a×b|2=|a|2|b|2−(a⋅b)2, the third and seventh equations then giveσ2=d0⋅d2d0+43|d0×d1|2d03=d2⋅d4d4+43|d3×d4|2d43.Consistency of these expressions is equivalent to condition (17). Substituting forσ0,σ1,σ2,σ3,σ4into the fourth and sixth equations, and using the relation(a×b)⋅(c×d)=(a⋅c)(b⋅d)−(a⋅d)(b⋅c), we obtain (18) and (19), while the fifth equation gives (20).  □We emphasize again that the conditions (17)–(20) apply to both planar and spatial PH quintics. No simple and intuitive constraints on the geometry of the control polygon, analogous to those mentioned above for cubics, are available to guide the construction of PH quintics. Some partial results were given in Farouki (1994), but their geometrical meaning is rather opaque — as is the case with the constraints in Eqs. (17)–(20). Instead, PH quintics are usually specified as interpolants to first-order Hermite data.Remark 1In testing the conditions (11)–(12) and (17)–(20), it is advisable to first normalize the vectorsdiby dividing each with their mean magnitude. This gives scale-free conditions in which both sides of (11)–(12) and (17)–(20) are of order unity, allowing direct comparison with the machine unit for the floating-point number system in use: for double-precision binary arithmetic with 53-bit mantissa and rounding, this isη=2−53≈1.11×10−16.Example 1Consider the planar PH quintic constructed as the interpolant (Farouki and Neff, 1995) to first-order Hermite data specified by the initial and final control point pairsp0=(1.0,1.0),p1=(2.5,−0.5)andp4=(2.5,4.5),p5=(4.0,3.0). To full precision, the interior two control points (computed by the interpolation algorithm) are found to bep2=(3.6408217899592117,2.2476669682249213),p3=(1.3591782100407905,1.7523330317750787).This curve is shown in Fig. 2, together with the variation of its parametric speedσ(t). The differences between the right- and left-hand sides of Eqs. (17)–(20), computed in double precision arithmetic, are as follows22Note that the normalization proposed in Remark 1 is always used.5×10−16,4×10−16,4×10−16,18×10−16.These are within two orders of magnitude of the machine unit η. Thus, a robust PH curve identification is obtained by choosing a relative tolerance ϵ for the satisfaction of (17)–(20) that is 102–103 larger than η. To illustrate the ability of the method to reject “ordinary” quintic curves, an instance of the latter is defined by leavingp0,p1andp4,p5unchanged, and perturbing the inner control points top2=(3.6,2.2),p3=(1.4,1.8). The perturbed curve is barely distinguishable from Fig. 2, but it is no longer a PH curve. In this case, the residuals obtained from Eqs. (17)–(20) are2.4×10−15,−9.1×10−2,−9.1×10−2,−9.2×10−1.We observe that Eq. (17) continues to yield a small residual. This is a consequence of the symmetry33This symmetry also explains the equality of the residuals for Eqs. (18) and (19).of the curve. Specifically,d0=d4,|d3×d4|=|d0×d1|, andd4d0−d0d4=0, and hence both sides of (17) vanish. However, Eqs. (18)–(20) have residuals much larger than η (commensurate with the perturbations ofp2,p3) so the data are inconsistent with a PH curve.Example 2To verify the reliability of the method in extreme cases, it was tested on the curve shown in Fig. 3, a PH quintic with a severe curvature variation. This curve is specified by the initial and final control point pairsp0=(4.0,4.0),p1=(10.0,9.0)andp4=(6.0,11.0),p5=(11.0,5.0)with the middle pair determined by the Hermite interpolation algorithm asp2=(5.2662184461825108,9.1034234921021326),p3=(9.2741575847607258,7.5795795100404524).To emphasize the severity of the parametric speed variation, it is shown in Fig. 3 as a function of fractional arc length along the curve, rather than the parameter t. In this case, the differences between the right- and left-hand sides of Eqs. (17)–(20) are27×10−16,18×10−16,5×10−16,0×10−16.Again, a robust PH curve identification is indicated by the fact that all these values are within two orders of magnitude of the machine unit.In principle, the methods described above for PH cubics and quintics can be extended to higher-order PH curves — although the system of constraints, specified by eliminating theσ0,…,σn−1variables from (10), obviously grows correspondingly in number and degree. Since quintic PH curves are generally recognized to have sufficient shape flexibility for most applications, we do not pursue the extension to higher-order PH curves here.A quadrature rule estimates the integral of a functionf(t)over an intervalt∈[a,b]as a weighted sumw1f(t1)+⋯+wmf(tm)of m function values, sampled at nodest1,…,tm∈[a,b]. When the nodes and weights are suitably chosen, the estimate is exact (modulo round-off error) iff(t)is a polynomial of a certain maximum degree, dependent on m. A quadrature rule has precision n if it yields exact integrals for polynomials of degree ≤n, but not >n.The cumulative arc lengths(t)of a parametric curve is the integral of the parametric speed (3). For a general polynomial curve of degreen≥3this integral has no closed-form reduction, but for a degree-n PH curve with the polynomial parametric speed (9) it is also a polynomial of degree n, namelys(t)=∑k=1nskbkn(t),sk=1n∑j=0k−1σj,k=1,…,n.In particular, the total arc length for the parameter interval[0,1]is(22)S=s(1)=σ0+σ1+⋯+σn−1n.The exactitude of a quadrature rule for sufficiently high m, whenf(t)is a polynomial, may be exploited to identify PH curves — ifr(t)is a degree-n PH curve,σ(t)is a polynomial of degreen−1, and there will be no change (modulo round-off error) in the quadrature estimates of S with increasing m once it exceeds a certain threshold value. However, ifr(t)is not a PH curve, the quadrature values will exhibit steady convergence with increasing m, but no “saturation” as with a PH curve. This approach is illustrated using two well-known quadratures, the Gauss–Legendre and Newton–Cotes rules (Kythe and Schäferkotter, 2005).The exactitude of a quadrature rule for sufficiently high m, whenf(t)is a polynomial, may be exploited to identify PH curves — ifr(t)is a degree-n PH curve,σ(t)is a polynomial of degreen−1, and there will be no change (modulo round-off error) in the quadrature estimates of S with increasing m once it exceeds a certain threshold value. On the other hand, ifr(t)is not a PH curve, the computed S values will exhibit steady but slow convergence with increasing m — there is no “saturation” of these values, as with a PH curve. This approach is illustrated below in the context of two well-known quadratures, the Gauss–Legendre and Newton–Cotes rules (Kythe and Schäferkotter, 2005).An important consideration is the numerical stability of the quadrature rule. The parametric speedσ(t)is always a non-negative function. In Gauss–Legendre quadrature, the weights are all positive, so S is estimated as a sum of non-negative terms, and no amplification of floating-point error through the cancellation of leading digits can occur. For Newton–Cotes quadrature, on the other hand, negative weights arise form≥9in the closed case, andm≥3in the open case. To preclude numerical instability, the closed rule is used only for curves of degree ≤7, and the open rule is avoided altogether.The nodes and weights for Gauss–Legendre quadrature are usually specified (Kythe and Schäferkotter, 2005) for the intervalt∈[−1,+1]. The nodest1,…,tmare the roots of the degree-m Legendre polynomial, defined by the Rodrigues formulaPm(t)=12mm!dmdtm(t2−1)m,and the corresponding weightsw1,…,wmare given bywk=2(1−tk2)[Pm′(tk)]2,k=1,…,m.The nodes and weights form≤5admit closed-form expressions, as listed44Note that, in the casem=5, the weight corresponding to the nodex3=0is incorrectly quoted as 64/225 in Kythe and Schäferkotter (2005).in Table 1. For larger m, they must be determined numerically — values form=6,…,10, 12, and 16 are tabulated to 15 decimal places in Kythe and Schäferkotter (2005). The quadrature error may be formulated (Kythe and Schäferkotter, 2005) asem=22m+1(m!)4(2m+1)[(2m)!]3f(2m)(ξ),−1<ξ<+1.Sincef(2m)(t)≡0for any polynomial of degreed≤2m−1, the quadrature is exact for a polynomial integrandf(t)of degree n wheneverm≥⌈12(n+1)⌉. In the present context, we adapt the Gauss–Legendre quadrature rule to the domain[0,1]by the change of variablest→12(t+1), to obtain(23)S=∫01σ(t)dt≈12∑k=1mwkσ(12(tk+1)),with parametric speed values sampled at the points12(1+tk)fork=1,…,musing successive m values, saturation of S being observed whenm≥⌈12n⌉. With a quintic curve, for example, the quadrature arc length values S should remain essentially unchanged form≥3, if it is a PH curve. Note that this method is again independent of whetherr(t)is a planar or spatial curve.Example 3Consider the quintic PH curve constructed in Example 1, shown together with the variation of its parametric speed in Fig. 2. To compare the performance of Gauss–Legendre quadrature in computing the arc length of this curve with that for an “ordinary” quintic, we again define the latter by moving the inner control points top2=(3.6,2.2),p3=(1.4,1.8). For both curves, the parametric speed values required in the numerical quadrature are computed fromσ(t)=x′2(t)+y′2(t). Table 2compares arc lengths for the two curves, computed in double-precision arithmetic by Gauss–Legendre quadrature withm=1,…,5. For the PH quintic, the quadrature values agree with the exact arc length55For the PH curve, the exact value is given by (22), but no exact value is possible for the “ordinary” Bézier curve.to a relative accuracy of∼10−15form≥3. For the “ordinary” quintic, however, the quadrature values have an accuracy of only∼10−3atm=5, although it is “very close” to the PH quintic.LetS1,S2,…be arc lengths of a polynomial curve, computed in floating-point arithmetic by Gauss–Legendre quadrature withm=1,2,…To identify a PH curve by agreement of these values for allm≥l, it is necessary to choose a suitable convergence tolerance ϵ, such that|Sm−Sl||Sl|≤ϵform>l.Clearly, ϵ should be larger than the machine unit η for double-precision arithmetic. Since the nodes and weights (see Table 1) are irrational numbers, and evaluating the sum (23) incurs some floating-point error, it is advisable to choose ϵ a few orders of magnitude larger than η, but at a level of accuracy that numerical quadrature cannot achieve for integration of non-polynomial functions. In practice, the value66More precise estimates of the (worst case) relative errors incurred in computing S by numerical quadrature can be obtained by the method of running error analysis (Peters and Wilkinson, 1971).ϵ=10−14appears to work well.If the numerical quadrature is restricted to instances withm≤5, so as to use only the nodes and weights with closed-form expressions (see Table 1), the maximum degree of PH curves that can be identified using this approach isn=7, since two consecutive arc lengths that agree in value are required. The nodes and weights listed numerically to 15 decimal places in Kythe and Schäferkotter (2005), up tom=10, can be employed if higher-order PH curves are of interest.Example 4As seen in Fig. 3, the curve of Example 2 exhibits a severe parametric speed variation, providing a stringent test of the method. Table 3lists arc lengths computed in double-precision arithmetic by Gauss–Legendre quadrature. Convergence to an accuracy of∼10−15is again seen form≥3.Example 5A useful side-benefit of the quadrature identification procedure is that it signals, when a PH curve is detected, whether its true degree is less than the nominal degree indicated by its Bézier control-point representation. As is well known (Farin, 1997), a Bézier curve of true degree n always has a non-trivial representation in the Bernstein basis of any degree >n. Consider the quintic Bézier curve specified by the control pointsp0=(0,0),p1=(0,25),p2=(110,710),p3=(415,910),p4=(715,1),p5=(23,1).Applying the Gauss–Legendre quadrature yields the arc-length values shown in Table 3. For a PH quintic, these values should agree form≥3, but in the present case they actually agree form≥2. This indicates that the curve is actually a degree-elevated PH cubic, rather than a true PH quintic. Fig. 4illustrates this curve, together with its Bézier control polygons of degree 5 and 3, the latter being defined by the control pointsp0=(0,0),p1=(0,23),p2=(13,1),p3=(23,1).The parametric speed has the quadratic Bernstein coefficients(σ0,σ1,σ2)=(2,1,1)and hence the exact arc length isS=(2+1+1)/3=4/3.The (closed) Newton–Cotes quadrature rule is based on Lagrange polynomials (Kythe and Schäferkotter, 2005) with the uniform nodestk=(k−1)/(m−1),k=1,…,mont∈[0,1], and involves only positive weights whenm≤8— see Table 4. The remainder term (Kythe and Schäferkotter, 2005) is proportional tof(p)(ξ)for someξ∈[0,1], wherep=2⌊12(m+1)⌋. Hence, to obtain the exact arc length of a degree-n PH curve, m must satisfy2⌊12(m+1)⌋≥nsinceσ(t)is of degreen−1. Thus, for a PH quintic, the arc length values saturate form≥5nodes with Newton–Cotes quadrature (as compared tom≥3for Gauss–Legendre quadrature) — this is borne out by the values obtained for the curves in Examples 1 and 2, listed in Table 5.Comparing the Newton–Cotes and Gauss–Legendre rules, the former has the advantage of rational nodes and weights for all m, while the latter incurs irrational nodes and weights with closed-form expressions only ifm≤5. On the other hand, Gauss–Legendre quadrature permits PH curve identification with fewer nodes. Since consecutive identical arc length values are required, the minimum number of nodes to identify a PH quintic ism=4with Gauss–Legendre quadrature, butm=6with Newton–Cotes quadrature.Remark 2Although much simpler than the control-polygon constraints, the arc length quadrature method should be regarded as providing a tentative PH curve identification. Since it employs discrete sampling of the parametric speed, it may be possible for non-PH curves to exhibit successive coincident quadrature arc length values (although in practice this is highly improbable). To validate the identification, one should ensure the existence of consistent solutions to the over-determined systems of equations that characterize the reverse-engineering problem, as described below.Once the curve (1) specified by its Bézier control points has been identified as a PH curve, through the procedures described above, it will be necessary to “reverse engineer” it, in order to fully exploit its advantageous computational properties. This amounts to a determination of the coefficients of the complex polynomialw(t)in (4) for a planar PH curve, or the quaternion polynomialA(t)in (5) for a spatial PH curve. Since the identification schemes do not distinguish these two cases, the first step is to ascertain which applies. This is accomplished by forming the components ofd0,…,dn−1into a3×narray: the curve is planar or spatial if it is of rank 2 or 3, respectively. In the former case, the control points are transformed so as to lie in the(x,y)plane.For an identified planar PH curve, the reverse engineering problem consists of determining the complex pre-image polynomial that generates its hodograph through (4). Ifw(t)is of degree m, and specified in Bernstein form asw(t)=∑k=0mwkbkm(t),the complex coefficientsw0,…,wmare to be determined fromp0,…,pn. To achieve this, the control points are regarded as complex valuespk=xk+iyk, the quantities in (6) beingdk=n[(xk+1−xk)+i(yk+1−yk)].Equating (4) with (6) then gives a system of2m+1equations for them+1complex unknownsw0,…,wm. Specifically, for PH cubics, we obtainw02=d0,w0w1=d1,w12=d2,while for PH quintics the equations arew02=d0,w0w1=d1,2w12+w0w2=3d2,w1w2=d3,w22=d4.Although there are more equations than unknowns, the fact thatd0,…,dn−1are known to define a PH curve ensures that the equations are consistent, and it suffices to consider only the first (or last)m+1equations to determinew0,…,wm. From the first two equations in the case of PH cubics, we obtainw0=d0,w1=d1d0,while the first three equations for PH quintics yield(24)w0=d0,w1=d1d0,w2=1d0[3d2−2d12d0],whered0≠0for a regular curve. In general,d0admits two complex values, and the same value must be used in these expressions — the value chosen is immaterial, since they differ only in sign, and the complex polynomialw(t)is squared in (4). Alternatively, one may usew1=d2,w0=d1d2,for PH cubics (whered2≠0for a regular curve), and(25)w2=d4,w1=d3d4,w2=1d4[3d2−2d32d4]for PH quintics (whered4≠0for a regular curve). The equivalence of these alternative forms arises from the fact thatd0,…,dn−1are not independent for a PH curve. For PH cubics, their dependence can be compactly expressed (Farouki, 1994) by the complex constraint77This can be viewed as an alternative to conditions (11)–(12) — in the case of planar PH cubics — facilitated by use of the complex representation.d12=d0d2. For PH quintics, the situation is more complicated (Farouki, 1994), since a number of special cases must be accommodated.Example 6Consider the planar PH quintic of Example 1 shown in Fig. 2. For this curve, we obtain (to full precision) the coefficientsw0=3.0088703625944260−1.2463149116090630i,w1=0.0038308962625464+4.5675312287005045i,w2=3.0088703625944269−1.2463149116090637i,from the expressions (24) based ond0,d1,d2andw0=3.0088703625944211−1.2463149116090662i,w1=0.0038308962625461+4.5675312287005028i,w2=3.0088703625944255−1.2463149116090635i,from the expressions (25) based ond2,d3,d4. These two sets of values agree to at least 14 decimal places, consistent with the tolerance arising from the determination of its Bézier control points as a PH quintic interpolant to first-order Hermite data (the fact thatw0andw2are essentially identical reflects the symmetry of the curve). Analogous results were observed for the asymmetric PH quintic of Example 2, illustrated in Fig. 3.The methods described above, for planar PH cubics and quintics, can be extended in a relatively straightforward manner to higher-order PH curves.The reverse engineering of a spatial PH curve entails a determination of the quaternion polynomialA(t)in (5), given the curve control points. Namely, ifA(t)is specified in Bernstein form as(26)A(t)=∑k=0mAkbkm(t),the coefficientsA0,…,Ammust be computed. Equating (5) and (6) gives a system of2m+1vector equations for them+1quaternionsA0,…,Am. As in the planar case, there are more equations than unknowns, but the fact thatd0,…,dn−1are known to define a PH curve ensures the consistency of these equations. Moreover, for spatial PH curves, the quaternion polynomial (26) that generates a particular hodographr′(t)through expression (5) is not unique (Farouki et al., 2002). Namely, ifA(t)generatesr′(t), then for any ϕ the polynomials(27)A˜(t)=A(t)exp⁡(ϕi),whereexp⁡(ϕi)=(cos⁡ϕ,sin⁡ϕi), also generatesr′(t). This indeterminacy is required for rotation invariance of the form (5), i.e.,r′(t)must be expressible in the form (5), for a suitableA(t), in a coordinate system of any orientation (Farouki et al., 2002). We focus below on reverse engineering of spatial PH cubics and quintics.Equating (5) with (6) in the case of spatial PH cubics (m=1) yields the system of three vector equations(28)A0iA0⁎=d0,vect(A0iA1⁎)=d1,A1iA1⁎=d2,for the two quaternion coefficientsA0,A1. Settingd0=|d0|,d2=|d2|(whered0,d2≠0for a regular curve) andδ0=d0/d0,δ2=d2/d2the first and third equations in (28) can be used (Farouki et al., 2008) to expressA0andA1in the form(29)A0=d0n0exp⁡(ϕ0i)andA1=d2n1exp⁡(ϕ1i),whereϕ0,ϕ1are free parameters, andn0=δ0+i|δ0+i|andn1=δ2+i|δ2+i|are the unit bisectors ofδ0,δ2with i (for brevity, we discount the degenerate cases whereδ0=−iorδ2=−i, which require separate treatment).Substituting from (29) into the second of Eqs. (28) and settingΔϕ=ϕ1−ϕ0then gives the vector conditiond0d2(ucos⁡Δϕ+vsin⁡Δϕ)=d1,where(30)u=(i⋅n1)n0+(i⋅n0)n1−(n0⋅n1)i,v=n1×n0.The value of Δϕ must be chosen so as to ensure satisfaction of this condition. For generic data withi⋅(n0×n1)≠0, which is equivalent toi⋅(δ0×δ2)≠0, the dot product of this equation withn0,n1,igives the scalar conditions(31)(i⋅n1)cos⁡Δϕ=n0⋅d1d0d2,(i⋅n0)cos⁡Δϕ=n1⋅d1d0d2,(32)[2(i⋅n0)(i⋅n1)−n0⋅n1]cos⁡Δϕ−i⋅(n0×n1)sin⁡Δϕ=i⋅d1d0d2.Ifδ0≠−iandδ2≠−i, we havei⋅n0≠0andi⋅n1≠0, so either of the two equations (31) can be used to determinecos⁡Δϕ(the equivalence of these equations can be seen from the “canonical form” (16) of a spatial PH cubic). In general,cos⁡Δϕdetermines two valuesΔϕ∈[0,2π)and the appropriate value must be determined by checking the satisfaction of (32). Once Δϕ has been computed,ϕ0can be freely specified, and then withϕ1=ϕ0+Δϕthe desired quaternion coefficients are determined from (29).Example 7Consider the spatial PH cubic defined (Farouki and Sakkalis, 1994) by the control pointsp0=(0,0,0),p1=(23,0,2),p2=(23,0,8),p3=(−3,9,14).One can verify that this curve has the polynomial parametric speedσ(t)=10t2−2t+4. To full precision, the quaternion coefficients computed by the above method (choosingϕ0=0) areA0=0.0000000000000000+3.3460652149512313i+0.0000000000000000j+0.8965754721680534k,A1=2.8977774788672042+1.3448632082520799i−0.7764571353075622j+5.0190978224268470k.When the control pointsp1,p2,p3are recomputed from these coefficients, through the expressionsp1=p0+13A0iA0,p2=p1+13vect(A0iA1),p3=p2+13A1iA1,their errors relative to the originally-specified points are found to be6×10−16,35×10−16,46×10−16.Furthermore, it is verified from the implementation that the relative accuracy ofp1,p2,p3is insensitive to the choice ofϕ0.Given the Bézier control pointsp0,…,p5of a spatial PH quintic, the reverse engineering problem consists of determining the three quaternion coefficientsA0,A1,A2from the five vector equations(33)A0iA0⁎=d0,vect(A0iA1⁎)=d1,2A1iA1⁎+vect(A0iA2⁎)=3d2,vect(A1iA2⁎)=d3,A2iA2⁎=d4,withdi=5(pi+1−pi)fori=0,…,4. Settingdi=|di|(whered0,d4≠0for a regular curve) andδ0=d0/d0,δ4=d4/d4, we consider again only the generic casei⋅(δ0×δ4)≠0. Then the first and fifth equations in (33) yield(34)A0=d0n0exp⁡(ϕ0i)andA2=d4n1exp⁡(ϕ2i),whereϕ0,ϕ2are free parameters, andn0=δ0+i|δ0+i|andn1=δ4+i|δ4+i|are the unit bisectors ofδ0,δ4with i. Substituting from (34) into the second of Eqs. (33), one can deduce the expression88An analogous expression can also be obtained from the fourth of Eqs. (33).(35)A1=−(ζ,d1)n0exp⁡(ϕ0i)id0,where ζ is a free real parameter. Forming the productA1iA1⁎from (35), and noting that2(i⋅n0)n0−i=δ0, after some simplification we obtain(36)A1iA1⁎=ζ2δ0−2ζd1δ0×δ1+2d12(δ0⋅δ1)δ1−d12δ0d0.Also, using the expressions (34) gives(37)vect(A0iA2⁎)=d0d4(ucos⁡Δϕ+vsin⁡Δϕ),whereΔϕ=ϕ2−ϕ0, andu,vare as defined in (30).Substituting (36) and (37) into the third of Eqs. (33) then yields the vector condition(38)2ζ2δ0−4ζd1δ0×δ1+d0(ucos⁡Δϕ+vsin⁡Δϕ)=3d0d2+2d12δ0−4d12(δ0⋅δ1)δ1.This defines an over-determined system of three scalar conditions on the two parameters ζ and Δϕ, but the system is consistent if the given data define a spatial PH quintic. Now the cross product of the vectors (30) simplifies tou×v=12d0d4(δ4−δ0),and is non-zero under the stated assumptioni⋅(δ0×δ4)≠0. The variable Δϕ can thus be eliminated from (38) by taking its dot product withu×vto obtain a quadratic equation(39)aζ2+bζ+c=0,in ζ with the coefficientsa=2(δ0⋅δ4−1),b=−4d1(δ0×δ1)⋅δ4, andc=(δ0−δ4)⋅(3d0d2+2d12δ0−4d12(δ0⋅δ1)δ1). The discriminant of (39) must satisfyb2−4ac≥0— this is a (non-obvious) consequence of the fact thatd0,…,d4define a PH quintic. For each root ζ of (39), corresponding values for Δϕ must be computed. This is achieved by taking the dot product of Eq. (38) with i, thereby reducing it to(40)cos⁡(Δϕ−ψ)=r(ζ)p2+q2,where we setp=d0i⋅u,q=d0i⋅v,r(ζ)=i⋅[3d0d2+2d12δ0−4d12(δ0⋅δ1)δ1−2ζ2δ0+4ζd1δ0×δ1],and ψ is uniquely determined by(41)cos⁡ψ=pp2+q2,sin⁡ψ=qp2+q2.If a root ζ is such that the condition(42)|r(ζ)|≤p2+q2is not satisfied, it must be rejected. If ζ is such that (42) is satisfied, Eq. (40) identifies, in general, two corresponding valuesΔϕ∈[0,2π].Up to four distinct solutions(ζ,Δϕ)are determined in this manner. For each solution, with (say)ϕ0freely chosen andϕ2=ϕ0+Δϕ, corresponding quaternions coefficientsA0,A1,A2may be computed by means of (34)–(35). In general, only one set of coefficients generates (within a given tolerance) the prescribed vectorsd0,…,d4using (33), and the others must be discarded. The coefficients are unique only modulo a common factorexp⁡(ϕi)for any ϕ, reflecting the free choice ofϕ0(orϕ2) — as noted in expression (27). OnceA0,A1,A2have been determined, the control points can be computed from them (and a given initial pointp0) through the expressions(43)p1=p0+15A0iA0⁎,p2=p1+110(A0iA1⁎+A1iA0⁎),p3=p2+130(A0iA2⁎+4A1iA1⁎+A2iA0⁎),p4=p3+110(A1iA2⁎+A2iA1⁎),p5=p4+15A2iA2⁎.Example 8Consider the quintic space curve (see Fig. 5) specified by the Bézier control pointsp0=(0,0,0),p1=(0,−25,0),p2=(35,−15,25),p3=(415,815,115),p4=(23,1115,115),p5=(23,1115,−13).By the methods of Section 3 it is identified as a PH curve, with parametric speed isσ(t)=2(19t4−40t3+27t2−6t+1). Equation (39) has the rootsζ=0and 6, and sincep=2andq=−2in (41), we haveψ=−14π. Forζ=6condition (42) is violated, so this root must be discarded, but withζ=0we haver(ζ)/p2+q2=1/2, andΔϕ−ψ=14πor74π. Hence,Δϕ=0or32π. Choosingϕ0=0andϕ2=Δϕ, and computingA0,A1,A2from (34) and (35), the former choice yields agreement with the vectorsdi=5(pi+1−pi)computed from (33), but the latter does not. Hence,ζ=0andϕ0=ϕ2=0identify the correct solution (anyϕ0value can be chosen, provided thatϕ2=ϕ0). WhenA0,A1,A2are computed from (34) and (35) in this manner, using double precision arithmetic, they are found to agree with the coefficientsA0=i−j,A1=1+i+2j+k,A2=i−k, from which the curve control points were initially generated using (43), to an accuracy of∼10−15. The relative errors inp1,…,p5(computed using the reverse-engineered coefficients) are found to be0×10−16,2×10−16,13×10−16,33×10−16,31×10−16.Example 9The preceding example was constructed so as to have a simple known pre-image polynomial. As a more general example, we consider the spatial PH quintic interpolant (see Fig. 5) to the first-order Hermite datar(0)=(0,0,0),r′(0)=(2,−1,−1)andr(1)=(1,1,1),r′(1)=(0,2,3)usingϕ0=ϕ2=0in the interpolation algorithm (Farouki et al., 2008). For this curve,p0=r(0),p1=r(0)+15r′(0)andp4=r(1)−15r′(1),p5=r(1), while to full precision the two interior control points obtained from the algorithm arep2=(0.7746664443097209,−0.0209484017535140,−0.1326892881613731),p3=(0.9601287216055423,0.2353431635591809,0.0635268956967925).Whenp1,…,p5are recomputed from the reverse-engineered coefficientsA0,A1,A2using expressions (43), their errors relative to the original control points are found to be2×10−16,1×10−16,25×10−16,33×10−16,23×10−16,so the reverse-engineering is also very accurate in this more general context.Remark 3In various contexts, the roots of the parametric speedσ(t)are required, e.g., in computing the absolute rotation index (Farouki and Neff, 1995), elastic bending energy (Farouki, 1996), and rotation-minimizing frames (Farouki, 2002), which require partial-fraction decompositions of rational integrands withσ(t)as denominator. The roots can be computed after completing the reverse-engineering process, by settingσ(t)=|w(t)|2or|A(t)|2for planar or spatial PH curves, respectively.Two simple methods have been presented to identify whether or not a given polynomial curve, specified by its Bézier control points, has a Pythagorean hodograph. The first method checks a system of constraints on the control-polygon legs, enumerated explicitly for the case of cubics and quintics. The second method computes arc length estimates through numerical quadrature rules with polynomial precision on successively augmented node sets.Both methods apply equally to planar and spatial PH curves. Computed examples indicate that they can both distinguish PH curves from “ordinary” polynomial curves to an accuracy of∼10−14or better using double precision arithmetic. The first method employs only the curve control points, but the second method also requires storage of the quadrature nodes and weights. However, the quadrature method is perhaps preferable in terms of efficiency and straightforward extensibility to PH curves of degree 7 or higher.The proposed methods provide a practical means of importing PH curves into existing CAD systems without modification of prevailing representation schemes. Once the control points have been identified as defining a PH curve, the reverse engineering procedures allow very accurate reconstruction of the complex or quaternion pre-image polynomials (for planar and spatial curves, respectively) in double-precision arithmetic, so the advantageous properties of PH curves can be fully exploited. These include closed-form solutions for arc lengths, offset curves, and elastic bending energy (Farouki, 1996; Farouki and Sakkalis, 1990); real-time CNC interpolators for constant or variable feedrates along curved paths (Farouki et al., 1998; Farouki and Shah, 1996); a diverse family of sweep operations yielding rational surfaces (Farouki and Nittler, 2015); and rational rotation-minimizing frames along space curves (Farouki, 2010; Farouki et al., 2012).

@&#CONCLUSIONS@&#
