@&#MAIN-TITLE@&#
Structure-aligned guidance estimation in surface parameterization using eigenfunction-based cross field

@&#HIGHLIGHTS@&#
We present an eigenfunction-based method for surface parameterization.The generated parametric lines are aligned with mutliscale structural features.A new anisotropic parameterization scheme is presented.

@&#KEYPHRASES@&#
Surface parameterization,Eigenfunctions,Multi-scale features,Anisotropic parameterization,Cross field,

@&#ABSTRACT@&#
In this paper, we present a structure-aligned approach for surface parameterization using eigenfunctions from the Laplace–Beltrami operator. Several methods are designed to combine multiple eigenfunctions using isocontours or characteristic values of the eigenfunctions. The combined gradient information of eigenfunctions is then used as a guidance for the cross field construction. Finally, a global parameterization is computed on the surface, with an anisotropy enabled by adapting the cross field to non-uniform parametric line spacings. By combining the gradient information from different eigenfunctions, the generated parametric lines are automatically aligned with the structural features at various scales, and they are insensitive to local detailed features on the surface when low-mode eigenfunctions are used.

@&#INTRODUCTION@&#
Surface parameterization is of great importance for many applications, such as quadrilateral meshing [1], texture mapping and synthesis [2,3]. An important issue for surface parameterization is how to align parametric lines with the feature directions. Some simplification techniques [4–6] were developed to generate very coarse domain meshes with a good user control. Although feature alignment was achieved in a certain degree [4], it is difficult to control the simplification process to preserve surface features. Using the harmonic field [7,8], features can be captured, but feature alignment is limited due to the difficulty in generating the field and placing singularities. In recent years, methods based on the cross field have been introduced [7,9–12]. Generally, the captured features in the cross field are represented by the principal curvatures, which are sensitive to the local detailed features and may fail in capturing structural features of an object at desired scales.Eigenfunctions of the Laplace–Beltrami operator (LBO) are well-known for their property of capturing the shape behavior and structural feature of an object [13–16]. Eigenfunctions with respect to different eigenvalues reflect structural features at different scales, which has been utilized in surface segmentation and reconstruction [14,17]. The eigenfunctions vary along the object surface and are invariant to different poses, which makes them ideal for describing the structural feature of the object. A variety of applications have been introduced taking the advantages of eigenfunctions, such as pose-invariant Reeb graph [16], shape matching [13] or registration [18], and the Shape-DNA [15]. Another important application of eigenfunctions is surface quadrangulation or parameterization [19]. For example, the Morse-Smale complexes [20–22] were built by connecting the saddle and extrema of eigenfunctions, dividing the surface into several coarse quadrilateral patches. Despite of these developments, feature alignment is still a challenging problem in surface parameterization.In this paper, we introduce a novel method to define a guidance for cross field generation using eigenfunctions, and generate a structure-aligned parameterization for the input triangle mesh. A guidance is first constructed using the gradient of multiple eigenfunctions of the LBO to capture the structural feature at various scales. Then a smooth cross field is built following the guidance, based on which a surface parameterization is computed. The main contributions of our work include:1.A novel structure-aligned approach is developed for surface parameterization using eigenfunctions, which is insensitive to local detailed surface features.Multiscale structural features are captured using the gradient of multiple eigenfunctions as a guidance for cross field generation.A new algorithm is introduced to enable anisotropy in the parameterization by adapting the cross field to non-uniform parametric line spacings.The remainder of the paper is organized as follows. Section 2 describes eigenfunctions. Section 3 explains how to define the guidance for cross field construction using the gradient of multiple eigenfunctions. Section 4 discusses cross field construction and surface parameterization. Section 5 shows some results. Finally, Section 6 draws conclusions and points out future work.Given aG2smooth surface S, the eigenproblem of LBO is to find the eigenvaluesλand their corresponding eigenfunctions f defined on it, such that(1)-ΔSf=λf,whereΔSis the LBO defined on surface S. Since-ΔSis a self-adjoint and semi-positive definite operator, the eigenvalues of-ΔSare real and nonnegative. Eigenfunctions of the LBO provide a set of convenient basis to describe the shape behavior or structural feature of an object. Let M be a triangulation of surfaceS,{x}i=1nbe the vertex set of M. A class of discretization scheme [23–25] for the LBO can be represented as(2)ΔSf(xi)≈∑j∈N(i)wijf(xj),wij∈R,whereN(i)contains the 1-ring neighborhood ofxi, andwijare the weights defined in different discretizations of the LBO. The eigenproblem becomes(3)-∑j∈N(i)wijf(xj)=λf(xi),or in matrix form,(4)-WF=λF,whereF=f(x1),…,f(xn)Tand W is the coefficient matrix defined bywij. Eq. (4) yields n modes, each corresponds to an eigenvalue and eigenfunction. LetλkandFk(k=0,1,…,n-1)be thektheigenvalue and the corresponding eigenfunction, we have(5)0=λ0⩽λ1⩽λ2⩽⋯⩽λn-1.λ0=0represents a rigid-body mode, its eigenfunctionF0is a constant-scalar field.Various methods have been developed for the discretization of LBO. In this paper, we use the cotangent scheme [13,26–29]. This discretization provides a symmetric matrix, which makes all the resulting eigenvalues and eigenfunctions real. However, the cotangent scheme was proved to be not convergent for irregular nodes, and it cannot deal with non-uniform meshes well [25]. There are some research conducted on convergent discretization of the LBO. For example, a k-nearest neighbor of a vertex was considered using a truncated heat kernel [30]. In [25], the Laplace matrix was constructed based on a quadratic fitting and its convergence rate was proved to be linear [31]. This discretization provides a non-symmetric matrix, resulting in complex eigenvalues and eigenfunctions. In this paper we use the cotangent scheme LBO to obtain real eigenfunctions.Different eigenfunctions reflect surface features at different scales [14]. Compared with the high-mode eigenfunctions used in [20–22], the low-mode eigenfunctions are less sensitive to the detailed surface features and capture the major structure of the object. In this paper, we will use multiple low-mode eigenfunctions to design a direction guidance and then build a cross field, from which we can obtain a structure-aligned surface parameterization.The gradient of the eigenfunctions can be used to represent structural features. For example in the Hand model in Fig. 1, the gradient of the first and second eigenfunctions (black arrows) reflects the slim cylindrical structure of the fingers. However, a single eigenfunction may only reflect features in certain regions well. For example in (b), the gradient of Mode 1 eigenfunction follows the middle finger and the thumb very well, but not the little finger because the gradient magnitude is very small on it. Similarly in (c), the gradient of Mode 2 eigenfunction follows the index, third and little fingers well but not the thumb. From Fig. 1, we can observe that each eigenfunction plays a dominant role in certain regions, where the gradient of this eigenfunction reflects the structural features at a certain scale. We call such region a feature region of that eigenfunction. By combining the gradient in the feature regions from multiple eigenfunctions, we can build a structure-aligned guidance for the cross field construction. For example, we can define the middle finger and the thumb as the feature region of Mode 1 and the index, third and little finger as the feature region of Mode 2. Then the slim cylindrical structure of all five fingers can be captured using these two modes.Then, the next problem is how to represent the feature region for each eigenfunction. Here, we design two different ways to represent the feature regions: isocontours and characteristic values.Isocontours of eigenfunction f can locate important structural features, and they are often used for shape identification and segmentation [13,14]. For each eigenfunction, we first generate several representative isocontours, and then form the feature bands using the intersecting triangles to represent the feature region of that mode. For example in Fig. 2(a), the isocontours from Mode 1 (green curves) and Mode 2 (blue curves) are generated. The green and blue bands in Fig. 2(b) represent the feature bands of the two eigenfunctions. The guidance for the cross field is defined as the gradient directions on triangles in the feature band, which we call the guidance directions. These triangles are called the guidance triangles. The guidance direction in each feature band follows the gradient of the eigenfunctions (black arrows).To combine different modes using isocontours, we need to provide isovalues. One common choice is zero-isovalue because the corresponding isocontour represents the static region of a standing wave on the surface [13]. The gradient at the zero-isocontour of some eigenfunctions may have a very small magnitude, and thus a large numerical error may happen in the gradient calculation. The region with the extreme value is not a good choice either due to the same reason. For example in Fig. 3, the gradient magnitude is very small in Region A (the black zero-isocontour) and Region B (the red1For interpretation of color in Figs. 3, 7, 10, 15 and 17, the reader is referred to the web version of this article.1area with the maximum eigenfunction value), and the gradient directions vary intensively due to the large numerical error. The gradient usually follows the structure well for an isocontour with an isovalue away from the extreme and zero eigenfunction values, such as the orange area (Region C) surrounding the white curve. To choose proper isovalues automatically, we define(6)αl=fmin+r(fmax-fmin),and(7)αu=fmax-r(fmax-fmin),wherer∈(0,0.5)is the parameter adjusting the location of the isocontours to define a good direction guidance, andfminandfmaxare the minimal and maximal eigenfunction values. Here we chooser=0.125.Generally if the guidance directions are very different in the adjacent triangles, the smoothness of the cross field will be affected. This may happen when the adjacent guidance triangles are from feature bands of different eigenfunctions. For example in Fig. 4, the blue and red isocontours on the wrist intersect with each other, defining very different guidance directions for the triangles around the intersection. In this paper, we define the guidance directions in adjacent triangles as non-consistent if these triangles are from feature bands of different eigenfunctions. Such a non-consistent situation can be avoided by adjusting the r value in Eqs. (6) and (7) to separate isocontours from different modes.Given certain modes, although the isocontours can be adjusted easily by modifying the isovalues, it is difficult to avoid non-consistent situations automatically. To resolve this problem, we need to leave enough space between guidance triangles in different feature bands. In the following, we will talk about another method to represent the feature region, which can automatically separate guidance triangles in different feature bands.Instead of using isocontours, another way to represent the feature region is to divide the surface into patches, and each patch represents a feature region. Here, we define a positive characteristic valueCi,kfor each triangleTiof thekthmode. For a set of mode indicesK, triangleTiis assigned to thekthmode if(8)k=arg maxj∈KCi,j.A feature patch is formed by the triangles assigned to the same mode.In this paper, we use the gradient magnitude of the eigenfunctions as the characteristic value. An eigenfunction usually has a large gradient magnitude at certain regions with special structural features. For example in Fig. 5, Modes 3 and 4 of the Cow model have a large gradient magnitude on the rear and front legs, while almost zero gradient everywhere else. Therefore, we define the characteristic value asCi,j=‖∇Fi,j‖, where∇Fi,j=14Ai2{Fi,j(xa)γ(xa,xb,xc)+γ(xa,xc,xb)+Fi,j(xb)γ(xb,xc,xa)+γ(xb,xa,xc)+Fi,j(xc)γ(xc,xa,xb)+γ(xc,xb,xa)},Aidenotes the area ofTiandγ(xa,xb,xc)=〈xa-xb,xb-xc〉(xc-xa)∈R3.Fig. 6(a) shows the obtained feature patches from Modes 1–2 using the characteristic value. In each feature patch, the Dijkstra distance d from the center of each triangle to the patch boundary is computed, which is shown in Fig. 6(b). Suppose the maximum distance in Patch k isDk, we choose triangles with distance0.45Dk<d<0.55Dkas the guidance triangles (red triangles inside each feature patch, they form a feature band). The guidance directions are the gradient of thektheigenfunctions (black arrows). In this method, triangles with a small gradient magnitude (⩽10-6) are ignored to avoid large numerical error in the gradient directions, see the grey regions in Fig. 6(a).Discussion 3.1Compared with the feature bands defined by the isocontours, feature bands caused by different modes are separated using the characteristic value and thus non-consistent guidance directions are avoided automatically. For example in Fig. 7(a), when the first six modes are used, non-consistent directions happen on the wrist due to the intersecting isocontours and feature bands (green and magenta bands) from Modes 1 and 4. However in Fig. 7(b), there is no intersecting feature band because each feature band lies inside a feature patch and is also away from the patch boundary. Another difference is that the feature bands from the characteristic value also depend on the normalization of eigenfunctions. In this paper, all the eigenfunctions are normalized such that∑i=1nf(xi)2=1. A different normalization may improve the parameterization results, and this can be an interesting problem for the future work.Using the guidance created from eigenfunctions, in this section we build a cross field via a smoothing process, and generate a surface parameterization following the mixed integer method [9]. Similar to [10,32], we also enable a tradeoff control between the guidance alignment and the field smoothness. Differently, we further introduce a new algorithm to adapt the cross field to non-uniform parametric line spacings, enabling an anisotropy in the parameterization.LetTgbe the set of guidance triangles, andTfbe the set of free triangles on the surface. A smooth cross field is constructed based on the guidance directions. The guidance direction and the cross field in triangleTican be represented as(θi,ei)and(γi,ei), whereθiandγiare defined as a module ofπ/2, andeiis the reference edge in triangleTi. Similar to [10], our smoothness energy of the cross field on M is defined as(9)Γs=∑eij∈Eθi+κij+π2pij-θj2+λ¯∑Ti∈Tg(θi-γi)2,whereeijis the edge shared by triangleTiandTj,Eis the set of all the edges in the mesh,κijis the angle between the reference edges of triangleTiandTj, andpijis the integer valued period jump of the cross field acrosseij. A parameterλ¯is used to control the tradeoff between the alignment to the guidance directions and the field smoothness. The smooth cross field is obtained by minimizing the energy function. We solve the minimization problem using the mixed-integer solver introduced in [33].Fig. 8(a) shows the built cross field using the guidance defined in Fig. 6(b). Red dots are the singularities of the field. The surface is cut into a disk-like planar region and all the singularities should be on the boundary of the planar region [9], see Fig. 8(b). In the disk-like planar region, the parametric coordinates(u,v)can be taken as two scalar fields, and two directionsuiandviin each triangleTiare defined as the gradient of these two scalar fields, see blue and red arrows in Region A (singular) and Region B (regular) in Fig. 8(a).uiis chosen as one of the four directions of the cross field in triangleTi, which is forced to be consistent with the neighboring triangles.viis defined by rotatinguibyπ/2following the clockwise direction.The parametric coordinates(ui,vi)of Vertexxiare computed by minimizing an orientation energy [9](10)Γo=∑Ti∈MAi·∥h∇Tui-ui∥2+∥h∇Tvi-vi∥2,where h is a parameter controlling the spacing of the parametric coordinates,Aiis the area of triangleTi, and∇Tuiand∇Tviare two gradients. Integer constraints are set on the parametric coordinates for the other vertices on the planar region boundary to ensure that the integer-value parametric lines meet at the boundary. In this way, a quadrangulation of the surface can be generated directly from the parametric lines. For example in Fig. 8(c), the blue and red lines represent the integer-value parametric lines of u and v, respectively.Discussion 4.1As the cross field follows the guidance directions defined by eigenfunctions, the resulting parametric lines align with structural features automatically. As shown in Figs. 2(b), 6(b) and 7(a, b), the guidance directions are defined using the isocontours and the characteristic values. They all yield parametric lines aligned with the five fingers, see Figs. 2(d), 7(c, d) and 8(c). Compared with Fig. 7(b) and (a) contains non-consistent guidance directions generated using the isocontours. Generally, consistent guidance directions yield good feature-aligned parameterization, see Fig. 7(d), while non-consistent guidance may introduce distortions. On the wrist of the hand in Fig. 7(c), there is a foldover in the parametric lines, where the resulting∇Tuiand∇Tviare very different withuiandvi. This can be improved by assigning larger weights for the triangles in this region when minimizing the orientation energy [9].Reducing the distortion is an important issue for surface parameterization. In previous literature [34,35], the distortion was reduced by evolving a pre-defined metric on the surface. Differently, we reduce the distortion mainly by using the characteristic value to avoid non-consistent guidance directions and also modifyingλ¯in Eq. (9) to balance the tradeoff between guidance alignment and field smoothness. A smallλ¯value can relax the constraint and thus the distortion is reduced, although the feature alignment may be sacrificed at certain extent. Fig. 9shows the parameterization results corresponding to differentλ¯values. When a smallλ¯is chosen, the parametric lines fail in aligning with the index finger, but the distortions in the wrist region are avoided (Fig. 9(a)). Asλ¯becomes larger, the parametric lines align with the index finger better but distortions happen in the wrist region as shown in Figs. 9(b) and 7(c) (λ¯→∞).While the alignment of the parametric lines are determined by the cross field, the spacing of them depends on the parameter h in Eq. (10). A smaller h value results in denser parametric lines which correspond to the integer value of the parametric coordinates u and v. Using a constant h, we obtain uniform parametric lines. While using a non-uniform h from a sizing field [36], the local spacing of the parametric lines can be controlled to achieve adaptive and anisotropic parameterization at certain extent. But the parametric lines with different spacings may not be compatible with each other. In this paper we introduce a new method to modify the original cross field and make it adapt to the variation of the parametric line spacings.First, we define a region that must follow the original direction as the invariant region, and regions between invariant regions as the transition region. In each iteration, the cross field in the transition regions is modified according to the difference between the resulting∇Tuiandui, or∇Tviandvi. Given that the four directions of the cross field are perpendicular or parallel with each other, the modification of the cross field can be represented by the modification in one of its directions. If∣∇Tui·ui∣‖∇Tui‖<∣∇Tvi·vi∣‖∇Tvi‖,(11)ui=ui+rc∇Tui‖∇Tui‖-ui,else(12)vi=vi+rc∇Tvi‖∇Tvi‖-vi,whererc∈(0,1)is a pre-defined parameter and here we chooserc=0.2.Generally, a large gradient magnitude indicates an intensive varying of the field, so the resulting mesh should be dense along that gradient direction. Therefore, we set the anisotropy where‖∇TFia‖>0.5∗max‖∇TFa‖(the region pointed by the red arrow in Fig. 10(a)). Here,∇TFiais the gradient ofFain triangleTi. The h values inu,vdirections are defined as(13)hu,i=∣ui·∇TFia∣‖∇TFia‖ra+1-∣ui·∇TFia∣‖∇TFia‖h0,hv,i=∣vi·∇TFia∣‖∇TFia‖ra+1-∣vi·∇TFia∣‖∇TFia‖h0,whererais a parameter controlling the ratio of line spacing inu,vdirections, andh0defines the base size. We choosera=0.2in this paper. Fig. 10 shows an example of anisotropic parameterization. (a) shows the input fieldFa(Mode 1 eigenfunction). Using the original cross field in (c), the parameterization fails because the line spacing varies intensively, see (e). To adapt the cross field, a transition region is defined where0.45∗max‖∇TFa‖<‖∇TFia‖<0.5∗max‖∇TFa‖, as shown in (b). After adapting the cross field, a valid parameterization is obtained withrc=0.1and 40 iterations, as shown in (d) and (f). In the invariant region, the parametric lines keep aligned to the input field, while in the transition region the alignment is sacrificed and more singularities are introduced. As a result in the region pointed by the red arrow in (a), the red parametric lines (perpendicular with the gradient direction) are much denser than the blue ones.Discussion 4.3In our anisotropic parameterization scheme, we define a novel transition region on the surface and adapt the cross field in this region to connect parametric lines with different line spacings smoothly. Although extra singularities may be yielded in the transition region, the orthogonality of the cross field is preserved during the entire adaptation process and theu,vparametric lines are automatically aligned to two perpendicular directions, resulting in quadrilateral elements with good quality. While the previous anisotropic parameterization methods [7,37] seldom consider the quality of the output quadrilateral elements. For example in [7], the orthogonality was sacrificed to achieve the anisotropy, resulting in extremely small angles in the mesh.

@&#CONCLUSIONS@&#
In this paper, we have introduced a novel approach to define guidance directions for cross field-based surface parameterization. Two methods are designed to combine the gradient information from different eigenfunctions. Based on the guidance from multiple eigenfunctions, a cross field is built with a tradeoff between the guidance alignment and the field smoothness. As a result, the parametric lines are aligned with the structural features at multiple scales, also enabling an anisotropy by adapting the cross field to non-uniform parametric line spacings. In the future, we intend to continue working on anisotropic parameterization and also extend our structure-aligned surface parameterization to T-spline surface modeling.