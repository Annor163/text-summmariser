@&#MAIN-TITLE@&#
Algebraic graph statics

@&#HIGHLIGHTS@&#
General, non-procedural approach to graphical analysis of two-dimensional structures.Equilibrium equations derived from reciprocal relation between form and force graphs.States of stress of structural systems from analysis of equivalent unloaded networks.Construction of planar straight-line drawings of planar form graphs.Computational back-end for interactive graphic statics software.

@&#KEYPHRASES@&#
Algebraic graphical analysis,Interactive graphic statics,Graph theory,Reciprocal figures,Matrix analysis of structures,

@&#ABSTRACT@&#
This paper presents a general, non-procedural, algebraic approach to graphical analysis of structures. Using graph theoretical properties of reciprocal graphs, the geometrical relation between the form and force diagrams used in graphic statics is written algebraically. These formulations have been found to be equivalent to the equilibrium equations used in matrix analysis of planar, self-stressed structural systems. The significance and uses of this general approach are demonstrated through several examples and it is shown that it provides a robust back-end for a real-time, interactive and flexible computational implementation of traditional graphic statics.

@&#INTRODUCTION@&#
Graphic statics is a well-known method for analysis and design of two-dimensional structures based on Cremona’s extensions of Maxwell’s theory of reciprocal figures  [1,2]. In graphic statics, the relation between form and forces of a structural system is contained in the reciprocal relation between two diagrams. A form diagram describes the geometrical configuration of the (axial) internal and external forces of a two-dimensional structural system, and a force diagram represents their equilibrium. The combination of these two diagrams allows for an intuitive evaluation of structural behaviour, performance and efficiency at a glance. The graphical nature of the method furthermore allows for a visual verification of both the evaluation process and results  [3,4], making it more transparent than arithmetic or numerical methods.Recent developments have demonstrated how the principles of graphic statics can be combined with modern computer technologies to create interactive drawings that provide real-time, visual feedback about the relation between form and forces in response to manipulations of the drawing by the user [5–7]. It has been demonstrated that such interactive implementations are not only extremely useful for educational purposes, but also for advanced research  [8]. In addition, several graphic statics tools have also been developed as plug-ins for CAD environments (e.g.  [9,10]).Despite its strengths, computerised (interactive) graphic statics still has some drawbacks. The process of constructing drawings can easily become tedious and time-consuming and demands a profound familiarity with the specific geometric constructions involved (e.g.  [4,11]). Furthermore, since the drawings produced by the CAD tools and interactive implementations are generated in a procedural manner according to the corresponding graphic statics “recipe”, they tend to be designed for specific types of structures. Modifications to the initial setup of the drawing (e.g. the number and/or connectivity of structural elements, order of the loads, …) thus require a complete redraw of the entire construction. Although the process of making a graphic statics construction is important for teaching and learning, as it helps to get familiarised with the specific geometric and structural relationships between different elements of such construction, it is clear that it is inconvenient for research or practical purposes.To fully explore the benefits of computerised graphic statics, a general, non-procedural approach is needed, which allows drawings to be created without specific knowledge of the geometric construction procedures involved.This paper presents a robust back-end for a graphics statics application. It allows the user to start from a connected two-dimensional line drawing. The graph of this line drawing is automatically constructed and analysed to assess the feasibility of the input as a structural system or set of forces in equilibrium. If possible, a reciprocal force diagram is constructed, based on user-defined loading or self-stress conditions. The two diagrams can then be manipulated interactively without breaking their topological and geometrical relationship. As such, the user can explore different states of equilibrium by explicit, geometric modifications of the connected diagrams, or redistribution of forces within given constraints.The remainder of this paper is organised as follows.In Section  2, we bring together concepts and techniques from graph theory and matrix analysis of structures and present them in a unified framework for algebraic graphical analysis built around the reciprocal relation between the form and force diagrams of graphic statics.In Section  3, we discuss a general scheme for a computational implementation of the presented approach that can be used as back-end of a real-time, interactive graphic statics application. Different steps of the implementation are illustrated using a Fink truss, which is a statically determinate structure that cannot be calculated directly with traditional graphic statics, because it contains crossing edges. Relevant algorithms are provided as code snippets.In Section  4, the use of this framework for non-procedural graphic statics is demonstrated through four examples: a three-hinged trussed frame, an externally statically indeterminate three-bar truss, a geometrically constrained thrust line, defining its funicular loading, and a pre-stressed net. Finally, we briefly discuss the relevance of the presented approach for three-dimensional equilibrium methods, such as Thrust Network Analysis [12].In this section, we describe the theoretical framework for the graph-based, algebraic approach to graphic statics presented in this paper. First, we briefly revisit traditional graphic statics, and describe the graph interpretation of form and force diagrams. Next, we formulate the reciprocal constraints between these diagrams algebraically, and derive from them the typical equilibrium equations of a (self-stressed) structural system. We furthermore show how the geometry of the force graph can be readily derived from the solution of the equilibrium equations and the topological information of the form graph. Finally, we discuss the solution strategies for different types of structural systems based on Singular Value Decomposition (SVD) of the equilibrium matrix of their form graph, and describe the interpretation of the obtained results in the context of graphic statics.Fig. 1depicts a typical graphic statics drawing consisting of two diagrams that together describe the static equilibrium of a bar-node structure and a set of applied loads and reaction forces. The two diagrams are reciprocal: they consist of an equal number of lines, so that the corresponding lines in the two diagrams are parallel (or perpendicular, or at any constant angle), and corresponding lines which converge to a point in one diagram form a closed polygon in the other  [2].The diagram to the left is the form diagram and the one to the right the force diagram. Bow’s notation is used to label spaces in the form diagram and their corresponding nodes in the force diagram  [13].A closed polygon in the force diagram represents the static equilibrium of the corresponding point in the form diagram, with the magnitude of force in the converging lines at that point equal (or proportional) to the length of the sides of the closed polygon. The form diagram thus contains the actual configuration of the bars, nodes, support forces and applied loads in space. The force diagram describes global equilibrium and the equilibrium of forces in the bars at each of the nodes. Note that it is common practice in graphic statics drawings to represent external forces in the form diagram by unit vectors, indicating only the direction and point of application of these forces. As with the internal forces in the structure, their magnitude is proportional to the length of the corresponding line segments in the force diagram.The form and force diagrams can be interpreted as directed graphs for which (directed) incidence or connectivity matrices can be constructed describing the topological relation between branches and nodes (Fig. 2). We define the graph of the form diagram as the form graphG, and the one of the force diagram as its reciprocal force graphG∗. The force graph is the topological dual of the form graph with the added requirement that corresponding edges are parallel. The elements ofGandG∗are vertices, edges and faces. Elements of the force graph are superscripted with an asterix (∗).Due to the presence of external forces in the form diagram, the form graph contains leaf vertices. These are vertices of degree one since they have only one connected edge, which corresponds to an external force. In Section  2.5, we will see that it is a requirement of the presented approach that the leaf vertices and their edges can be drawn on the outside of the graph, in the outer or external space. The leaf vertices will therefore be referred to as outer or external vertices; the others as inner or internal. Note that this requirement simply means that all external forces should be applied to nodes on the boundary of a structure. In Fig. 2, for example, vertices 1, 2, 4 and 6 are external vertices. They are, respectively, connected to edges 0, 1, 2 and 3 representing the external forces in the form diagram depicted in Fig. 1.For a form graphGwithenumber of edges andvnumber of vertices, the entries of thejth column of the[v×e]connectivity matrixCare:(1)Cij={+1if vertexiis the head of edgej−1if vertexiis the tail of edgej0otherwise .Note that these edge directions may be chosen arbitrarily, but some convention can be imposed for clarity. Here, for example, all edges point from vertices with lower index to vertices with higher index.The[v∗×e]incidence matrixC∗represents the topology of the reciprocal force graphG∗. The reciprocal graph hasv∗vertices, equal to the number of faces of the form graph, and the same number of edgeseas the form graph. The row vectors ofC∗can be constructed from the form graph by cycling its faces in a counter-clockwise direction [14]. The entries of theithrow ofC∗, corresponding to theithface ofG, are:(2)Cij∗={+1if edgejis traversed in the samedirection as its orientation−1if in the opposite direction0otherwise .Having constructedCandC∗, the coordinate difference vectorsu,v,u∗andv∗of the form and force edges can be written as(3a)u=Ctx,v=Cty(3b)u∗=C∗tx∗,v∗=C∗ty∗withx,yandx∗,y∗thexandycoordinate vectors ofGandG∗, respectively. The reciprocal constraints, as described in Section  2.1, can be formulated in terms of the coordinate difference vectors (3a) and (3b).The first set of constraints, requiring that lines intersecting at a node in the form diagram correspond to a closed polygon in the force diagram, can be imposed by expressing that the sum of coordinate difference vectors of edges of the force graph connected to the same vertex in the form graph should be zero [12]:(4){Ciu∗=0Civ∗=0withCicomposed of the rows ofCcorresponding to the inner vertices ofG.The second set of constraints, requiring parallelity between corresponding edges in the form and force graphs, can be imposed by writing the coordinate difference vectorsu∗andv∗of the force graph as a function of the corresponding vectorsuandvof the form graph:(5){u∗=Quv∗=Qv,withQthe diagonal matrix of the vectorqof length ratios between corresponding edges inG∗andG. The elements ofqare, in fact, the well-known force densities, first introduced by Schek  [15]. Note that after imposing (4),GandG∗are dual graphs. By furthermore imposing (5), they become reciprocal.Combining the two sets of reciprocal constraint equations, (4) and (5), and usingQu=UqandQv=Vq, withUandVthe diagonal matrices of the coordinate difference vectorsuandv, one finds that(6){CiUq=0CiVq=0or, equivalently(7)Aq=0withAthe[2vi×e]equilibrium matrix ofG:(8)Note that since all external forces are included in the form graph, the right-hand side of (7) is a null vector. In the presented approach, the equilibrium of a structural system is thus investigated using the states of self-stress of an equivalent unloaded network.The numberkof independent states of self-stress of the network, corresponds to the dimension of the nullspace ofA[16]. The dimension of the nullspace can be calculated by SVD ofA[17] and is thus equal to the number of edges of which the force densities can be chosen freely to explore different states of equilibrium of the represented structural system. We will call these the free or independent edges. The structural interpretation of the states of self-stress depends on the type of assembly or structural system represented by the form graph, as we will see in Section  2.6.It can be seen from Eqs. (3b) and (5) that the coordinate vectorsx∗andy∗are related to the force densities in the following way:(9)C∗tx∗=QuC∗ty∗=Qv.This system of equations cannot be solved directly, since the incidence matrix of the force graph,C∗, is not square. Instead, the geometry of the force graph can be determined by solving the equivalent system(10)L∗x∗=C∗QuL∗y∗=C∗Qv,L∗=C∗C∗twithL∗the Laplacian matrix of the force graph. This system has an exact solution which can be calculated efficiently [18], sinceL∗is square and positive, semi-definite   [16].Note that the vertex coordinates of the force graph are unique up to a translation. Therefore, in order to obtain one specific solution, we solve the system of equations with the location of one point chosen. In graphic statics, this is equivalent to choosing the first point of the load line somewhere on the drawing canvas to start the construction of the force diagram.The approach presented in this paper is based on the interpretation of the form and force diagrams of graphic statics as dual graphs, with the added constraint that corresponding edges should be parallel (or at any constant angle), as explained in Section  2.2. It is essential that these graphs can be constructed automatically and uniquely if the approach is to be used as back-end for an interactive graphic statics application.A (form) graph has a dual if and only if it is planar   [19]. Therefore, the presented approach only applies to structural systems that have a form diagram with a planar graph. A graph is planar if it can be drawn in the plane without crossing edges  [20]. Furthermore, it should be possible to construct a straight-line drawing of the form graph that divides the plane into bounded and unbounded polygonal spaces with disjoint interiors  [21], i.e. spaces without overlaps. A straight-line drawing is a drawing in which all vertices are connected with straight lines. According to  [22], any planar graph has a planar straight-line drawing.As an example, consider the two form graphs in Fig. 3. Fig. 3(a) is the planar straight-line drawing of a valid form graph. There are no crossing edges and none of the spaces overlap. All edges corresponding to external forces are on the outside of the drawing. Fig. 3(b) is the drawing of an invalid form graph. The drawing is crossing-free, but it inevitably has overlapping spaces due to the presence of the leaf edge at the central vertex. This edge corresponds to an external force applied to a node of the structure that is not on the boundary.From a planar straight-line drawing without overlapping spaces, the dual of a valid form graph can be constructed uniquely and efficiently using a “wall following” maze solving algorithm. A wall follower identifies the clockwise cycles of the drawing by traversing the graph and always taking the rightmost (or leftmost for counter-clockwise cycles) edge out of a vertex. All cycles are identified once all edges have been traversed in both directions. These cycles can then be inspected as discussed in Section  2.2 to determine the topology of the dual.The presented approach can be used to investigate the possible states of equilibrium of different types of structural systems, with different degrees of static and kinematic (in)determinacy. The static and kinematic (in)determinacy of a structural system can be evaluated using the extended Maxwell rule   [23]:(11)k−m=b−2n+r,withkthe number of independent states of self-stress,mthe number of inextensible mechanisms,bthe number of bars,nthe number of nodes, andrthe number of kinematic restraints at the supports. Applied to a form graph, since all external forces (loads and support forces) are included in the graph, Eq. (11) simplifies to(12)k−m=e−2vi,withethe number of edges andvithe number of internal vertices. The values ofkandmcan be calculated by SVD of the equilibrium matrixA[17] and determine how the equilibrium problem should be solved and interpreted.Rigid, statically determinate and (externally) indeterminate systems have a form graph withm=0andk>0. In a determinate system, the number of independent edgeskis equal to the number of applied loads. A form graph representative of a determinate system is depicted in Fig. 4(a). The number of independent edges in an indeterminate system is greater than the number of applied loads, as seen in Fig. 4(b).Funicular systems havem=0andk=1, regardless of the number of applied loads. These systems are stable in a specific geometry for only one specific equilibrium of internal and external forces (Fig. 4(c)). Therefore, there can be only one degree of freedom or independent edge. Any of the edges in the graph of a funicular system may be identified as the free edge.Finally, if the form graph represents an unloaded, two-dimensional, self-stressed network, thek>0independent states of self-stress of the graph represent the actual states of self-stress of the structural system. Generally these systems have a form graph withm=0. However, in axisymmetric configurations, such as the one depicted in Fig. 4(d), the form graphs of these networks can havem>0. For example, the network represented by the form graph in Fig. 4(d) hasm=1. Indeed, the rotation of the vertices forming the square cycle around the central node is an inextensible deformation of the network  [24].Note that ifk=0, no states of self-stress exist for the form graph. Therefore, regardless of the value ofm, the graph does not represent a stable structural system. This is the case if, for example, the form graph represents an equilibrium system in an infeasible configuration.The free or independent edges cannot always be selected arbitrarily and it is not always obvious which combinations of edges are allowed. In those cases, a possible set can be identified by transformingAinto Reduced Row Echelon Form (RREF) using Gauss–Jordan Elimination (GJE). The non-pivot columns of RREF(A) correspond to the free variables in the vector of force densitiesqand thus to a possible set of free or independent edges  [24].Having identified the independent edges, either by manual selection or using GJE, (7) can be rewritten as(13)Adqd=−Aidqid,withAdandAidcontaining the columns ofAcorresponding to the dependent and independent edges respectively, andqdandqidcontaining the force densities of those edges.Ifm=0, the[2vi×(e−k)]matrixAdis square and non-singular and thus invertible, such that (13) can be rewritten as(14)qd=−Ad−1Aidqid.The full set of force densitiesqcan then be obtained directly as a function of the chosenqid.Ifm>0,Adis not square. In this case, the remaining force densitiesqdcan be calculated by solving the following equivalent linear system(15)AdtAdqd=−AdtAidqid.The interpretation of the force in a member as either tension or compression depends on the conventions that were used for deriving the incidence matrixC∗(Section  2.2).For a typical graphic statics interpretation, meaning that the equilibrium of the nodes is inspected by cycling around those nodes in clockwise direction [4], the dual incidence matrix should be created by cycling through the primal faces in a counter-clockwise direction. By assigning+1to edges that have the same orientation as the cycling direction (this is the convention used in Section  2.2), edges with positive force density values will represent primal edges in tension; and edges with negative force densities represent primal edges in compression. Whether an edge is in compression or tension can thus simply be determined from the sign of the calculated force density. Consequently, when visually inspectingGandG∗, a primal edge having a corresponding dual edge with the same orientation will be in tension; and a primal edge with a corresponding dual edge with opposite orientation will be in compression. This is a direct result of the parametric equations (5) and can be seen in Fig. 5.So far, we have described the required computational steps of a method for constructing the reciprocal force graph of a given form graph. This method can be used to investigate the possible (if any) states of stress/equilibrium of a structural system in a specific configuration and thus provides the basis for the back-end of a tool for graphic statics-based analysis of structures. As described in  [8], graphic statics can also be used for sophisticated force-driven design explorations. Typically, the goal in these explorations is to find an equilibrium configuration for a structure based on a set of constraints; for example, the location of the supports, the spatial configuration of the loads, size of the forces in specific elements…The problem then becomes a constrained optimisation problem that is not simply the reverse problem of the one solved in this paper. Therefore, it will not be discussed here.In this section, we discuss a general scheme for an implementation of the presented approach that can be used as the back end of an interactive application for algebraic graphical analysis of structures. Relevant code snippets are provided using the scripting language Python  [25].An overview of the implementation is depicted in Fig. 6. Different steps of the algorithm are illustrated using a Fink truss. This type of truss is a statically determinate structure that cannot be calculated directly with graphic statics, because its form diagram contains crossing elements.However, we will demonstrate how the system can be solved with the presented method by generating a planar straight-line drawing of the form graph without overlapping spaces.The algorithm takes as input a set of connected lines representing a form diagram describing the spatial/geometrical configuration of all internal and external forces of a structural system. The only requirement for this drawing to be valid input is that all edges are properly connected.The directed connectivity graph of this set of lines can be easily constructed by identifying all unique vertices among the start and end points of the lines, and assigning an ordered pair of vertices (an edge) to each line. The form graph of a Fink truss with six external forces (three loads and three reaction forces) is depicted in Fig. 7.As discussed, the presented approach can only be applied to structural systems with planar form graphs. Furthermore, a planar straight-line drawing of the form graph with non-overlapping spaces is needed to construct the dual graph using a wall follower. This part of the algorithm therefore consists of the following steps:1.Check if the current drawing of the form graph has crossing edges. If there are no crossing edges, skip the next step.If the graph is planar, generate a planar straight-line drawing. Otherwise, stop.Check if none of the leaf vertices is connected to an inner vertex of the graph. In other words, verify that all external forces are applied to boundary nodes of the structure.A simple algorithm for verifying if the current representation of the form graph has crossing edges is included in Listing 1. The algorithm checks for each pair of edges if they intersect and returns true if a pair is found that does. Edges with a common vertex are omitted from the test. Two edgesABandCDintersect if the trianglesABCandABD, as well as the trianglesCDAandCDB, have opposite cycling directions. This indicates thatCandDlie on opposite sides of a line formed byAandB, and thatAandBlie on opposite sides of a line formed byCandD, which can only be the case if the edges intersect. The cycle direction of three pointsA,BandCis determined by comparing the ratios of thexandycoordinate differences ofBandCwith respect toA.The graph of the Fink truss depicted in Fig. 7 obviously has crossing edges, which is confirmed by the algorithm. Therefore, planarity should be checked.Several linear-time algorithms for planarity testing exist, e.g. [26–28]. The test used in this paper is an implementation of the classic algorithm by Hopcroft and Tarjan  [26]. As expected, a test of the Fink graph confirms it is planar. This means a planar straight-line embedding exists.As with planarity testing, several algorithms for generating planar, straight-line drawings exist, e.g. [22,29,30]. However, as (most of) these classic algorithms are merely concerned with establishing the existence of a planar (straight-line) drawing, for example to prove that a graph is planar, they often produce drawings that are not very useful in practice  [31]. As an example, Fig. 8depicts an embedding of the Fink graph generated with an implementation of Schnyder’s realizer method   [30], available through Sage   [32].Force-directed methods, on the other hand, produce layouts of graphs by positioning vertices as a result of a simulation of motion caused by repelling and attracting forces assigned to the vertices and the edges. Although these algorithms do not base their layouts on the topological information of a graph, they tend to produce crossing-free layouts for planar graphs  [33]. Furthermore, because of the repelling forces between the nodes, leaf vertices tend to end up in the outside face. Since the graphs of form diagrams of relevant structural problems are relatively small and limited in complexity, force-directed algorithms can thus be used as a fast and reliable method for generating planar straight-line drawings of planar graphs by simply generating one layout after the other until one without crossing edges is obtained.Fig. 9is a drawing generated with an iterative implementation (Listing 1) of the Fruchterman–Reingold algorithm  [34] available through NetworkX, a Python package for working with graphs  [35], in combination with the crossing-edge check discussed above.Finally, we verify if none of the edges representing an external force is connected to an inner vertex of the graph. To do so, we simply remove all leaves from the graph, identify the vertices of the boundary cycle, and verify that all leaves were connected to the graph at one of these vertices.Note that the leaf vertices have no influence on the outcome of the crossing edges test nor of the planarity test. In fact, planarity testing is performed on each biconnected component separately and would thus skip the leaf vertices anyway. Furthermore, generating a crossing-free drawing with the algorithm provided in Listing 1 is more robust and faster without the leaf vertices as well. Therefore, the leaf vertices could also be removed before any of the other steps, and re-added afterwards.In any case, at this point, if everything checks out, the connectivity matrixC∗of the dual of the (generated) planar straight-line drawing can be determined using a wall follower, as discussed in Section  2.5. The planar straight-line drawing and its dual are depicted in Fig. 9. The dual is drawn with dotted lines and its vertices placed at the centroids of the corresponding faces of the original graph.The equilibrium matrixAof the form graph of the Fink truss example has2vi=16rows andm=19columns. By SVD of the equilibrium matrix, using the implementation provided by the linear algebra module of Scipy   [36], we obtainm=0andk=3. Note that the vector of singular valuessreturned by this implementation contains all values greater than machine precision. Therefore, the actual number of relevant singular values still needs to be determined by comparison to an appropriate tolerance. The tolerance used in this paper is10−3of the highest singular value:tol=s[0]×10−3[17].Sincekis equal to the number of applied loads, the system is statically determinate. This means there is no need for identifying the independent edges; the force densities of any three edges of the graph can be chosen freely to obtain a state of equilibrium of the system. An obvious option, however, is to choose the force densities of the edges corresponding to the applied loads, which are edges 0, 1 and 2.After selecting a set of independent edges, partitioning bothAandqaccordingly, and choosing values for the threeqid, the remaining 16qdcan be calculated directly since the matrixAdis square and non-singular. With the force densities of edges 0, 1 and 2 chosen as −2, we obtain the following result:(16)q=[−2,−2,−2,−3,0,−3,−1.2,−2.8,−2.8,−1.2,1.2,1.2,1.2,1.2,1.6,1.6,−2.4,−3.2,−2.4].As discussed in Section  2.7, negative force densities correspond to forces directed towards the nodes and thus to edges in compression. In the case of our Fink truss example, this also means that the applied loads are acting in the downward direction. The force density in edge 4 isq4=0. There is thus no horizontal reaction force at the left support, since, indeed, there is only vertical loading. Edges 3 and 5 correspond to the vertical reaction forces at the left and right supports.The final step is the construction of the force graph. Having determined the connectivity of the force graph in Section  3.2, thexandycoordinates of the vertices can be calculated from the obtained force densities using Eqs. (10).The reciprocal form and force graphs of the Fink truss example are depicted in Fig. 10. The forces in the edges of the form graph are visualised using thickness, indicating the (proportional) size of forces, and colour, indicating tension or compression (red for tension and blue for compression). This convention has been used in all subsequent figures.Once the reciprocal relation between the form and force graph has been established and the graphs have been created in a scriptable drawing environment such as Rhino (or the browser), several types of user interaction are possible.First of all, users can simply change the values of the force densities and/or the selection of independent edges to investigate different force distributions (Fig. 11).The user can also change the geometry of the form graph to explore different configurations of the truss and different load and support conditions (Fig. 12). Note that for some structures, changing the geometry requires re-calculation and possibly re-identification of the independent edges (see Section  4.4). Here, however, this is not the case, since the structural system is rigid and statically determinate.Finally, the data structures containing the topological information about the form and force graphs simplify visualisation of the reciprocal relation between the elements of the two graphs, for example by reducing the identification of corresponding vertices and faces and the connected edges to a simple topological operation (Fig. 13).

@&#CONCLUSIONS@&#
This paper presented a general, non-procedural approach to graphical analysis of two-dimensional structures.In Section  2.2, we discussed the interpretation of the form and force diagrams of graphic statics as reciprocal graphs. We described how an algebraic formulation of the reciprocal relation between these two graphs results in the equilibrium equations of an unloaded network that is equivalent to the structural system represented by the form graph (Section  2.3). We furthermore showed how the possible states of equilibrium of this structural system can be controlled using the force densities of the system’s free or independent edges, which can be identified by rank analysis using singular value decomposition and Gauss–Jordan elimination of the equilibrium matrix of the unloaded network (Section  2.6).In Section  3.2, we discussed how the topology of the force graph can be derived from a planar straight-line drawing of the form graph using a wall following maze solving algorithm. We furthermore described an algorithm for generating planar straight-line drawings of (planar) form graphs based on the repetitive application of a force-driven layout method in combination with a crossing-edges check.A computational setup allowing the presented approach to be used as back-end for a graphic statics application in an interactive CAD environment was described in Section  3.Through a series of examples (Section  4), we showed how an implementation of the computational setup can be used to investigate the equilibrium of different types of structural systems, including a fink truss, a three-hinged arch, an indeterminate structure, funicular systems and self-stressed networks.Finally, the relation to advanced form-finding and analysis techniques for three-dimensional equilibrium structures were briefly discussed.