@&#MAIN-TITLE@&#
A simple and efficient real-coded genetic algorithm for constrained optimization

@&#HIGHLIGHTS@&#
A novel and efficient RCGA for constrained optimization has been proposed.The proposed RCGA integrates three effective and novel evolutionary operators named RS, DBX and DRM.The proposed RCGA is proven to have a small complexity index and outperform many state-of-the-art algorithms.The proposed RCGA has been successfully applied to optimize the GaAs film-growth performance of an MOCVD process.

@&#KEYPHRASES@&#
Evolutionary algorithms,Real-coded genetic algorithm,Crossover operator,Constrained optimization,Penalty functions,

@&#ABSTRACT@&#
This paper presents a simple and efficient real-coded genetic algorithm (RCGA) for constrained real-parameter optimization. Different from some conventional RCGAs that operate evolutionary operators in a series framework, the proposed RCGA implements three specially designed evolutionary operators, named the ranking selection (RS), direction-based crossover (DBX), and the dynamic random mutation (DRM), to mimic a specific evolutionary process that has a parallel-structured inner loop. A variety of benchmark constrained optimization problems (COPs) are used to evaluate the effectiveness and the applicability of the proposed RCGA. Besides, some existing state-of-the-art optimization algorithms in the same category of the proposed algorithm are considered and utilized as a rigorous base of performance evaluation. Extensive comparison results reveal that the proposed RCGA is superior to most of the comparison algorithms in providing a much faster convergence speed as well as a better solution accuracy, especially for problems subject to stringent equality constraints. Finally, as a specific application, the proposed RCGA is applied to optimize the GaAs film growth of a horizontal metal-organic chemical vapor deposition reactor. Simulation studies have confirmed the superior performance of the proposed RCGA in solving COPs.

@&#INTRODUCTION@&#
Owing to the powerful capability of solving real-world optimization problems, the real-coded genetic algorithm (RCGA) is one of the most effective and commonly used evolutionary algorithm (EA), and many successful applications using RCGAs in diversified fields have been reported recently [1–5]. By mimicking the biological world of natural selection and survival of the fittest, the RCGAs are essentially a kind of population-based stochastic search schemes that implement the selection, crossover, and mutation operators in a series framework. To further improve the solution efficiency of RCGAs, many achievements and remarkable efforts have been completed and reported in the past few decades. According to mechanisms and techniques used, the previous developments and attempts made for RCGAs can be classified into the following categories: (1) the determination of an optimal population size [6–9]; (2) the initialization of population [10–12]; (3) the automatic adjustment of operator parameters [13–15]; (4) the control of population diversity [16–19]; (5) the improvement of existing crossover operators [20–22]; (5) the development of new crossover schemes [23–32]; (6) the investigation of novel evolutionary strategies [33–35]; and (7) the hybrid use of evolutionary operators [36–39]. The above summary shows that much emphasis has been placed to improve the crossover operations. A reason for this is that the crossover operators provide a featured ability to generate new candidate solutions by recombining parent's genes. More recently, Chuang et al. [40] completed a full survey on the techniques used to advance crossover operators [23–26,28–32,34] and based on the survey they found that the line segment connection and distribution analysis of parents are the two most commonly used schemes to develop new crossover operators. They also pointed out that the crossover operators developed based on these two techniques may encounter difficulties when faced with stringent optimization problems. More precisely, these crossover operations might not effectively generate potential offspring in some ambiguous regions as the size of population is relatively small compared to the whole searching space or the distribution of the initial population is not uniformly distributed over the entire admissible domain [25]. Besides, the designed crossover operators could hardly locate the global optimum once the true solution lies close to or on the boundaries of the feasible search space [27].To overcome these difficulties, this paper develops an RCGA that implements a specially designed direction-based crossover operator (DBX) to guide the crossover along a potential direction that is able to significantly improve the fitness, even though the COP is subject to the above-mentioned stringent conditions. By making use of the relative fitness information derived from the objective function and the current status about the constraint violations, the DBX crossover operator essentially explores 2n−1 possible searching directions to generate better offspring, where n is the number of genes. Besides, unlike conventional crossover operators that use a fixed value or a random number to control the step size of a crossover, the DBX adaptively adjust the crossover's step-size by using the fitness distance calculated from the chosen paired-parents and the maximum fitness difference measured in the current population. In addition, the proposed RCGA distinctively constitutes a coordinator in the parallel inner-loop to organize the operation of the DBX and DRM [41] in order to provide a higher possibility of locating the true global optimum under stringent search conditions. Furthermore, a parameter selection guideline for the proposed RCGA is provided and the comprehensive studies are performed to investigate the effectiveness of each operator in the algorithm structure. The effectiveness and applicability of the proposed RCGA in solving COPs are demonstrated through a variety of benchmark COPs, followed by the comparisons with some existing state-of-the-art EAs on the CEC2006 testbed. The related statistical data, such as the success rate, performance index, performance rankings and the complexity index of the proposed RCGA, are reported. The remainder of this paper is organized as follows. In Section 2, the COPs under study are described and a static constraint-handling technique to work with the proposed RCGA is introduced. Subsequently, the algorithm structure and the operator functions specially developed for the RCGA are characterized and analyzed. In Section 3, the effectiveness of these evolution operators implemented in the proposed RCGA is systematically investigated and demonstrated. Thereafter, Section 4 performs comparative studies on a variety of COPs, where the benchmark testbed, experimental setup, and the comparison algorithms are presented and discussed. As a specific application study, in Section 5, the proposed RCGA is applied to determine an optimal set of operating condition for a horizontal metal-organic chemical vapor deposition (MOCVD) reactor to maximize its film-growth performance. Finally, in Section 6, concluding remarks are given for the proposed RCGA in solving COPs.The COP considered in this paper is formulated as follows:(1)minimizef(x),x=[x1,x2,…,xn]∈Ssubjecttogp(x)≤0,p=1,2,…,Phq(x)=0,q=1,2,…,Qwhere f(x) is the objective function to be minimized, gp(x)≤0 denotes the pth inequality constraint, hq(x)=0 represents the qth equality constraint, x is the vector of the n-dimensional decision variables, and S is the admissible search space restricted to the parametric constraint bounds as follows:(2)xj,min≤xj≤xj,max,j=1,2,…,nwhere xj,min and xj,max stand for the lower and upper bounds of xj, respectively. The feasible region F⊆S formed by gp(x)≤0 and hq(x)=0 is expressed as(3)F=x∈S|gp(x)≤0,p=1,2,…,P;hq(x)=0,q=1,2,…,QLet x* be the optimal solution for the COP, then we have ∀x∈F⊆S:f(x*)≤f(x). Besides, the inequality constraint is called the active constraint if gp(x*)=0. In this concept, all the equality constraints hq(x)=0, q=1, 2, …, Q, are active at x*. To evaluate the satisfaction of the constraints and to judge the objective function value simultaneously, this paper applies a static penalty function (SPF) to work with the proposed RCGA, which is given by [42](4)f˜(x)=f(x)+CI∑p=1Pgp+(x)+CE∑q=1Qhq+(x)2where CIand CEare the user-specified penalty factors, and the indication functionsgp+(x)andhq+(x), which are used to account for the violations of the inequality and equality constraint, are, respectively, defined by(5)gp+(x)=max{gp(x),0},p=1,2,…,P(6)hq+(x)=max{|hq(x)|−ξ,0},q=1,2,…,QIn the above equations, the max-operator {} returns zero as the solution x belongs to F; otherwise, a positive value will be produced to penalize the infeasible solution. Note that, to significantly amplify the penalty function for infeasible solutions, the penalty factors CIand CEare normally set to positive constants that are large enough. Besides, in Eq. (6), the parameter ξ is used to ease the difficulty of dealing with equality constraints. Usually, a small positive value of ξ is required to meet the required accuracy level of equality constraints, and its suitable value needs to be carefully chosen because it dramatically controls the allowable room on which an evolutionary algorithm can work properly [42,43]. In addition, because there are no fixed penalty factors that are suitable for every COP, one usually needs to conclude from numerical experiments a proper set of penalty factors for a specific application [42–45]. It should be mentioned here that, although this paper applies the SPF, Eq. (4), as the performance (fitness) index to work with the proposed RCGA, other types of constraint-handling techniques [43–50] can also be used in the same framework.Fig. 1schematically depicts the configuration of the proposed RCGA for solving the COP in Eq. (1), where three specially designed evolutionary operators, named RS, DBX, and DRM, are integrated as a whole to mimic a specific evolutionary process. Before presenting these novel evolutionary operators and the algorithm structure, the underlying design concept and notations are briefly introduced as follows. Let θ=[x1, x2, …, xn] be a solution termed as chromosome in the sense of the RCGA. Each xj, wherej∈n¯andn¯={1,2,…,n},in the chromosome is called a gene and represented as a real number. The admissible parameter space for θ is defined as follows:(7)S={θ∈ℜn|x1,min≤x1≤x1,max,x2,min≤x2≤x2,max,⋯,xn,min≤xn≤xn,max}.Note that an initial population with N chromosomes in S is randomly created to start the RCGA. In what follows, the operational procedure and operators associated with the proposed RCGA will be introduced and investigated.Instead of using the conventional roulette wheel and tournament selections [51,52], the proposed RCGA applies an alternative method called ranking selection (RS) [40,41] for chromosome selection. Using RS, the chromosomes in the population are firstly sorted according to their individual fitness valuef˜(θ). After the sorting (ranking) process is completed, the amounts of pr×N chromosomes that have relatively worse fitness are discarded, while at the same time reproducing the same amount of chromosomes whose fitness are top ranked. Note that the parameter pris a user-defined proportional parameter with its value being chosen from the interval (0, 0.5]. Since the RS discards and reproduces the same number of chromosomes, the total number of chromosomes in the population is kept constant during evolution and the average fitness can thus be substantially improved. Besides, because the RS is directly operated based on the fitness rankings, it is very simple and fast to compute, and at the same time it is able to preserve those top and potential chromosomes for the subsequent evolution. Fig. 2visually demonstrates the function of the RS operated on a chromosome population with a proportional parameter of pr=0.3.Different from the conventional crossover operators, the proposed DBX directly makes use of the fitness ranking information sorted by the RS to derive potential offspring. Let the sorted chromosomes in the population be denoted as Θ={θ1, θ2, …, θN}, which satisfies the relation ofθ1≻_θ2≻_…≻_θN. The notationA≻_Bmeans that the fitness of chromosome A is better or equal to that of chromosome B. Without loss of generality, let the population number N be even and M=N/2. Then, according to Θ, these N chromosomes are divided into the following two groups:Group A (the leading group):ΘA={θ1,θ2,…,θN/2}≡θ1A,θ2A,…,θMAand Group B (the group with lower rankings):ΘB=θN/2+1,θN/2+2,…,θN≡θ1B,θ2B,…,θMB.Note that the set ΘAis the leading group (Group A) of which the chromosomeθiAhas a relatively better fitness than that of the chromosomeθiBin Group B. In other words, the set ΘBis the group formed by those worse chromosomes. By picking up chromosomes from these two groups consecutively, M pairs of designated parentsθiA,θiB,i=1,2,…,M, are formed to receive the subsequent DBX crossover operation. This specific way of pairing is quite different from the conventional method of random pairing, and thus it substantially contributes a significant genetic difference between parents to produce potential offspring sinceθiA≻_θiB. Let ribe a random number chosen from the range of 0 and 1; if ri>λ, representing the crossover probability is greater than the specified probability threshold λ, the DBX operation is then performed on the ith pair of parentsθiA,θiBto generate offspring chromosomes by using the following recombination rule:(8)θiA*←θiA+Sc,iD→iθιB∗←θiB+Sc,iDi,i=1,2,…,Mwhere(9)sc,i=f˜θiA−f˜θiBmaxf˜(Θ)−minf˜(Θ)is the parameter used to control the step-size of the crossover, andD→i=[Di,1,Di,2,…,Di,n]is the crossover direction generated by(10)Di,j=0,ifrj<0.5θi,jA−θi,jB,ifrj≥0.5for i=1, 2, …, M and j=1, 2, …, n. Unlike the conventional crossover operators that use a fixed value or a random number for step-size control, the DBX adaptively adjusts the value of sc,i(0≤sc,i≤1) by using Eq. (9), which is a ratio calculated from the fitness distance between the chosen paired-parents and the maximum fitness difference measured in the current population. Since the information of each paired gene is utilized to generate crossover directions, the DBX provides a greater ability to enhance the effectiveness of gene recombination. More precisely, according to Eq. (10), the jth paired genes will produce a vector component forD→if a random number rjis greater or equal to 0.5, otherwise no crossover direction could be made from the selected genes. To avoid a null vector, the DBX randomly picks a non-zero crossover direction (i.e.,Di,j=θi,jA−θi,jB≠0) to execute the crossover operation if rj<0.5, ∀j∈{1, 2, …, n}. This effort prevents from generating a null crossover direction and enforces the DBX operator to explore 2n−1 possible searching directions; as a result, a great chance to produce better offspring chromosomes can be assured. Fig. 3schematically demonstrates the DBX operation for a given paired parents working in a two-dimensional search space. From this figure, it can be clearly observed that in the 2D system the DBX produces three (22−1=3) potential crossover directions for each of the following three cases related to the current position of the paired parents: (i) both the parents are in the infeasible region; (ii) one parent is in the feasible region and the other one in the infeasible region; (iii) both the parents are in the infeasible region. The schematic diagram depicted in case (i) clearly shows that the DBX operator effectively guides both chromosomes in the infeasible region to move toward the feasible region. As shown in case (ii), the DBX drives the chromosome that is in the infeasible region to move into the feasible region, whereas the chromosome already exists in the feasible region is directed by the DBX to improve their finesses. In case (iii), the DBX explores around both chromosomes to create directions for guiding them to move toward the optimum. Besides, it should be noted that, because the initial population is quite diverse in the search space, the DBX operator produces a significant move along the direction vectorD→at the very beginning evolutionary stage. Once the chromosome population has been gradually congregating into a small region after some successful generations, the DBX turns out to provide insignificant crossover variations since the direction vector created is with a small value in magnitude. To divert this situation so as to maintain population diversity, a coordinator is implemented in the parallel-structured inner loop to replace the DBX with the DRM when the step size scbecomes zero. In other words, this replacement occurs as the paired parents’ chromosomes have the same properties, i.e.,θiA=θiBand/orf˜θiA=f˜θiB.On the other hand, to meet the specified lower and upper bounds, the genes are adjusted by fixing their values on the individual bounds once they are guided to move across the boundary of S. This effort substantially increases the possibility to locate the optimal solution that lies on the boundary of the feasible search domain.To maintain the species diversity and to avoid being trapped by a local optimum [53,54], this paper implements a dynamic random mutation (DRM) with the following rule:(11)θiA*←θiA+smΦ0(θU−θL)θiB*←θiB+smΦ0(θU−θL)where Φ0 is a random perturbation vector in the n-dimensional cube [−ϕ0+ϕ0]nof which ϕ0 is a user-specified number chosen from the range of 0 and 1. In Eq. (11), the mutation step size smis dynamically adjusted by using the following update rule:(12)sm=1−kkmax2where kmax is the specified maximum generation number. Fig. 4schematically depicts the adjustable mutation region generated by the DRM with respect to the generation number. From this figure, it can be shown that the admissible mutation range decreases as the number of generation increases. The idea of using a dynamic mutation is conveyed from the methodology of simulated annealing [55,56] that describes a process starting from a rather scattered condition whose temperature is relatively high and then gradually approaching to a stable steady-state in accordance with the temperature decreasing. In essence, the function of smin the DRM mutation acts like the system temperature of a stabilizing thermodynamics process [41]. From Eq. (12), it is obvious that the DRM operator produces a large mutation size when the evolutionary process just starts. This therefore permits a greater chance of population variations at the very beginning evolutionary stage; as a result of a greater variety, the searching process proceeds with a higher probability to escape from a local optimum. As the population gradually converges to an optimum after some successful generations, a smaller feasible mutation region produced by the DRM operator can then enhance the precision of the solution obtained. Notice that the DRM is operated if ri≤λ or the paired parents have the same properties. Like the function provided in the DRM operation, those genes mutated outside S will also be individually fixed at their extreme value to meet the constraint bounds.Since the population size is kept constant, the survivor selection of both parent and offspring population is an important way to preserve the current best found solution for use in the subsequent generation. To do so, the proposed RCGA implements the generational replacement with elitism strategy, by which the offspring chromosome is individually compared with its parent chromosome (i.e.,f˜θiA*is compared withf˜θiA, andf˜θiB*withf˜θiB), and the chromosome superior in fitness is retained as the survivor.Fig. 5shows the pseudo-code of the proposed RCGA that essentially consists of the following four major operation steps: (1) the ranking selection, (2) direction-based crossover operation, (3) dynamic random mutation, and (4) the replacement operation. The novelties and advantages of the proposed RCGA are summarized as follows. First, the proposed RCGA uses fitness ranking information to divide the population into two groups and then systematically pairs the chromosomes according to the ranking sequence. This effort of consecutive pairing is quite different from the conventional RCGAs that randomly select a pair of parents for crossover. Second, the proposed pairing rule enables the DBX to produce effective crossover directions based on each of the high potential solutions in the leading group. Thus, by the DBX the effectiveness of the crossover can be greatly enhanced since it is able to create 2n−1 searching directions for exploring potential solutions, better than that with line segment connection and distribution analysis. Third, the proposed RCGA distinctly constitutes a specific coordinator in the parallel-structured inner loop to organize the operations of the DBX and DRM.The purposes of this section are two-folds. The first goal is to investigate the role of each operator in the proposed RCGA. The second is to explore the effectiveness of the proposed RCGA by performing comparison studies with some existing RCGAs.In the first part of numerical experiments, the following COP, which is a modified sphere function, is considered:(13)minimizef(x)=(x1−2)2+(x2−1)2subjecttog1(x):x1+x2−2≤0g2(x):x12−x2+2≤0−5≤x1,x2≤5The optimal solution of this COP is located at x*=(0, 2) with f(x*)=5. Since its feasible region occupies approximately 0.25% of the total search space and both inequality constraints are active at the optimal solution, the COP can cause difficulties in locating the global optimal solution [41]. To systematically investigate the effectiveness of each evolutionary operator used in the proposed RCGA, four designated tests were given as follows. InTest-1, only the DBX operator is applied in the proposed RCGA, whereas the functions of the RS and DRM are both disabled.Test-2merely applied the DRM operator in the RCGA to evaluate its effectiveness; that is, both the functions of the RS and DBX are inactivated;Test-3activates both the DBX and DRM in the RCGA, while at the same time disables the function of the RS;Test-4normally operates RS, DBX, and DRM in the proposed RCGA. In this series of tests, a population of N=20 were randomly initialized to distribute uniformly in the admissible search space. Besides, the penalty factor for both inequality constraints was set as CI=102, and the proposed RCGA were performed using kmax=25 and kmax=50 to distinguish their effects. Furthermore, each test run was executed 100 times to gather the statistic data for performance evaluation. In this paper, the commonly used mean-absolute-error (MAE) value defined by(14)MAE=1100∑R=1100|f(xR)−f(x*)|is adopted as the performance index, where xRis the best solution obtained from the Rth run. The best, median, and worst solutions of 100 optimized objective function values for each designated test were recorded in order to provide a fair base of performance comparison. Table 1lists the obtained results of these four designated tests under the simulation condition mentioned above. The comparison of the obtained results ofTest-1andTest-2show that the convergence speed of DBX operator is apparently much faster than that of the DRM operator as individual operator was applied in the proposed RCGA. The population progress of one of such runs inTest-1is depicted in Fig. 6. From this figure, it is observed that the initially created chromosomes are uniformly distributed in the admissible space, but all locate in the infeasible region. This is because that the feasible space only occupies a very small amount, say 0.25%, of the admissible region and the population size is rather small compared to the whole search space. It is also observed that after 5 generations the DBX operator had driven most of the chromosome solutions to move toward the feasible region; after 10 generations, few solutions had slid into the feasible region already. Finally, after 30 generations, all solutions are already very close to the global optimum that is exactly located on the intersection of these two active constraints. This graphic illustration clearly demonstrates that the DBX is very effective to direct the generation of the offspring along a right direction that substantially improves the fitness. From the comparison ofTest-3with bothTest-1andTest-2, it is clear that the combined use of the DBX and DRM can accelerate the convergence speed. As the RS was added into the proposed RCGA to work with the DBX and DRM as a whole, i.e., theTest-4, the MAE value is further reduced. Notice that a very small proportional parameter, say pr=0.05, was set inTest-4, which simply enables the RS to eliminate the worst chromosome from the population and reproduce only the best chromosome at each generation. Even so, the RS can profoundly assist the DBX and DRM to boost up the convergence speed. This significant improvement can be explained by the underlying principle of the RS, which duplicates those better chromosomes in the leading group ΘAand that enables the DBX to produce potential searching directions around the current top chromosomes. The advantage can also be visually examined from convergence properties depicted in Fig. 7, showing that the integration of RS, DBX, and DRM as a whole can substantially improve the efficiency of the proposed RCGA algorithm.This subsection serves to further evaluate the effectiveness and applicability of the proposed RCGA using a new set of four well-motivated COPs, which are described in Appendix A. Table 2summarizes the experimental setup for the proposed RCGA as well as the four comparative RCGAs, which is, respectively, named as RCGA-1, RCGA-2, RCGA-3, and the RCGA-4. Note that the RCGA-1 and RCGA-2 directly follow the proposed RCGA's framework as shown in Fig. 1, but replace DBX with the SBX (simulated binary crossover) and BLX (blend crossover), respectively. Recall that the SBX is a parent-centric crossover operator developed based on distribution analysis, and BLX is a mean-centric crossover operator using the technique of line-segment connection. In essence, RCGA-1 and RCGA-2 are designed as the control groups in order to compare the effectiveness of the proposed DBX with the existing SBX and BLX, respectively. On the other hand, RCGA-3 and RCGA-4, which are both directly adopted from the public code packages [57], are conventional RCGAs that operate the functions of crossover and mutation in a series configuration. To make a fair base of performance comparison, the following configurations were carried out for these comparative algorithms: (1) the initial population is randomly created in the search space with a size of N=100; (2) the crossover probability (pc) and the mutation probability (pm) are set to be 0.9 and 0.1, respectively; this setting is equivalent to a probability threshold of λ=0.1 used in the proposed RCGA; (3) each algorithm applies same generation numbers as well as the number of function evaluations in each test problem; (4) the SPF technique with CI=106 and CE=107 are utilized for constraint-handling; (5) each algorithm executes 100 runs to gather the statistic performance data for each of the test problems. To investigate the effects of constraint handling techniques on the search performance, in addition to the SPF, the tournament penalty approach (TS) [42] is also implemented in both the RCGA-3 and RCGA-4 to handle the constraints. Note that the TS method does not need any penalty factors in its penalty function because of using a feasibility-based rule for constraint handling. Furthermore, the conventional RCGAs, RCGA-3 and RCGA-4, are implemented using the default parameter values suggested by the code package of Sastry [57]. Under the above-mentioned simulation conditions, the comparative results were gathered and that will be illustrated and discussed in the following subsections.The effects of the penalty factors on algorithm performance are examined first. The performance evaluation was carried out on a special two-dimensional constrained problem (CF-1) [43]. As shown in Fig. 8, the feasible domain of CF-1 shapes a narrow and crescent region that merely occupies 0.7% of the admissible search space. Note that the global optimum solution is located at x*=(2.2468258, 2.3818634) with f(x*)=13.5908416. In addition to the display of the feasible region of CF-1, Fig. 8 also demonstrates the population distribution obtained by the proposed RCGA against generations. It can be shown from this figure that the created initial populations, which are marked with the symbol of open circles, are uniformly distributed in the search space. After 5 generations, all solutions (marked with a cross) quickly moved toward the narrow and crescent shaped feasible region, and after 30 generations all solutions, which are marked with filled box, had converged exactly at the optimum solution. Again, this fast convergence is attributable to the effectiveness of the DBX, which directs the crossover to move along the potential direction that effectively approaches the optimum. Table 3lists the obtained experiment results, where δ is the percentage error of the optimum solution defined asδ=|f(x)−f(x*)|/f(x*). From this table, it is clearly observed that, no matter which constraint-handling technique (SPF or TS) is used, the comparative algorithms suffer from the difficulty of locating a solution within 0.1% of the true optimum. Besides, the performance of the conventional RCGAs using SPF was found to be very sensitive to the penalty factors. In contrast, the proposed RCGA is able to perfectly locate the optimum solution at each run as the penalty factor values were set greater than 103. The superior performance of the proposed RCGA can be explained by the use of the DBX operator in association with an adaptive crossover step-size control. Since the proposed algorithm is much insensitive to the penalty-factor values used, the burden to select the values of the penalty factors can be alleviated. Besides, the SPF was found to be less helpful to assist the conventional RCGAs, as shown in RCGA-3 and RCGA-4. Therefore, in the following simulation studies, only the TS constraint-handling method is implemented in RCGA-3 and RCGA-4 to circumvent the load of penalty-factor selection on each test problem. However, since the control groups, RCGA-1 and RCGA-2, directly follow the algorithm structure of the proposed RCGA, the SPF is still implemented in these two algorithms with penalty factors being set at the same values equal to those used in the proposed RCGA.The investigation of the effects of ξ on the solution quality was performed using CF-2 [58], which has 3 equality constraints. The reported optimum for CF-2 is x*=(−33, 11, 27, −5, 11)/43 and f(x*)=176/43. On the first test run, a relative large value of ξ (say 0.1) was set in order to make a considerably large room for all the algorithms to work on. In other words, this large value of ξ relaxes the satisfaction level of the equality constraints for the RCGAs. From the simulation results listed in Table 4, it is very interesting to observe that the best solutions obtained from all comparative algorithms except the RCGA-4 are much smaller than the true optimum. Especially, the proposed RCGA found a better solution than the previously reported one, which is x*=(−27.80000, 10.70000, 33.29999, 1.00000, 15.00000)/43 and f(x*)=134.75000/43 in all 100 runs. However, the chance of obtaining this ever best solution is due to the over relaxation of the equality constraints with using a relatively large accuracy level of ξ=0.1. When a smaller ξ, for example 1×10−3, was used for a better solution accuracy, all comparative methods failed to find a solution that satisfies the specified percentage error. The RCGA-4 is still the worst, which is even unable to find any feasible solution within 1000 generations. In contrast, the proposed RCGA performs satisfactorily to find a solution adjacent to the true optimum. Using the accuracy level of ξ=10−3, the best solution obtained by the proposed RCGA is x*=(−32.94800, 10.99700, 27.06300, −4.94000, 11.04000)/43 and f(x*)=175.56027/43, which is merely about 0.25% away from the true optimal solution. To increase the solution precision, the algorithms were performed on this test example with a considerably small value of ξ=1×10−6. The obtained results are listed in Table 4 for comparison. As shown in this table, it is observed that those comparative methods again suffer from the stringent condition of using this relatively small parameter value so that most of them, except RCGA-1, failed to locate a solution that satisfies the desired accuracy level of the equality constraints. In contrast, the proposed RCGA still works effectively to find a solution within 0.1% error of true optimum in each of the 100 runs. The best solution obtained is now improved to x*=(−32.99996, 11.00000, 27.00009, −4.99996, 11.00004)/43 and f(x)*=175.99956/43, which is apparently very close to the true optimum.For further evaluation, the proposed RCGA was applied to solve the more complex test problem CF-3 [58], which has 2 inequality constraints and 3 nonlinear equality constraints. The optimum this test problem was reported to be x*=(776.159021, 925.195139, 0.051108, −0.428810) and f(x*)=5174.412675. To demonstrate its ability of handling nonlinear equality constraints, the proposed RCGA was implemented using a very small value of ξ, say 1×10−12. The experiment results are listed in Table 5, where the results obtained by these comparative methods are also shown for comparison. The simulation results indicate that the proposed RCGA is able to achieve a solution in 92 out of the 100 runs under the rigorous performance setting with δ<0.1%, though the nonlinear equality constraints are extremely severe to be satisfied. In contrast, the comparative algorithms suffer from these stringent equality constraints; they totally failed to locate a feasible solution, even though the maximum generation number was enlarged to 4000.The proposed RCGA was further applied to solve a heat-exchanger design problem (CF-4) [59], which has eight decision variables and involves several highly nonlinear constraints. As reported by many researchers [43,59], the CF-4 is hard to be solved effectively by using conventional evolutionary algorithms. This is because that all the six inequality constraints are active at the optimum, and the feasible region occupies merely 0.001% of the search space due to the extremely nonlinear properties of the constraints. As shown in Table 6, the stringent condition caused the comparative methods all fail to find a solution that is close enough to the optimum, even though a large generation number, say kmax=4000, was used. Although the method RCGA-2 presented a relative better search performance among the comparison algorithms, it can only find a solution within 1% deviation from the optimum solution in 8 out of the 100 runs. In regard to RCGA-1 and RCGA-3, they, respectively, can only locate solutions which are deviated from optimum solution by less than 10% deviation in 24 and 1 out of the 100 runs. The method RCGA-4 is still the worst; only one time out of the total 100 test runs the RCGA-4 is able to locate a solution that is within 50% deviation from the optimum, and the best objective function value obtained is even about 43.13% larger than that of the true one. In contrast, the proposed RCGA performs very well; it can locate a feasible solution within 0.1% deviation from the optimum in all test runs for this difficult COP. The best solution found by the proposed RCGA has the objective function value of 7049.2480206, which is very close to the true optimum, f(x)*=7049.2480205. Besides, it is worth mentioning that, though the feasible region of this problem is extremely small and all inequality constraints are active at the optimum solution, the proposed RCGA still presents a stable and robust convergence performance to find a feasible solution near to the true optimum in every test run. This corroborates again that the proposed RCGA, which applies the DBX operator to drive the solutions to move toward the feasible region, can effectively achieve a feasible solution that satisfies the required level of solution accuracy.The above experiments have shown that the RS plays an important role to assist the DBX to produce potential search directions, and the DRM significantly helps to improve the solution accuracy and maintain the population diversity. Besides, from the comparison studies, it is confirmed that the integration of RS, DBX, and DRM as a whole makes the proposed RCGA a very effective evolutionary algorithm to solve COPs. It is also revealed that the proposed RCGA is less sensitive to the penalty factors of the SPF, compared to all the comparative methods. Furthermore, the proposed RCGA is found to be very effective and robust in solving COPs with stringent equality constraints even though a very small value of ξ is used. In addition, extensive simulation results reveal clearly that the proposed RCGA significantly outperforms the comparative conventional RCGA methods, especially for the COPs with complex equality constraints.This section aims to compare the performance of the proposed RCGA with that of modern and state-of-the-art optimization algorithms. The comparisons will be performed on the well-known CEC2006 testbed [60], which contains 24 COPs and is commonly used for benchmark study to testify the capability of a newly developed algorithm. In Table 7, we briefly summarize the properties of these benchmark problems, where n is the number of decision variables, ρ=|F|/|S| is the estimated size ratio between the feasible region and the search space, a is the number of the constraints that are active at the optimum, and the notations, LI, NI, LE, and NE, are, respectively, the numbers of linear inequality constraints, nonlinear inequality constraints, linear equality constraints, and the nonlinear equality constraints. Note that the benchmark problems G20 and G22 were excluded from Table 7 since both problems have been proven to exist no feasible solution in the search space [60]. Due to the limited page space, in Table 7 (the performance comparison table) only 4 significant digits of the ρ value after the decimal point are displayed and thus the notation 0.0000% does not mean that there is no feasible region for the corresponding benchmark COPs. Interested readers may refer to Liang et al. [60] for a more detailed description and information about these benchmark problems of the CEC2006 testbed.As a fair basis of evaluations, the statistic performance data were gathered by executing each test set 25 runs. The maximum number of function evaluations (MaxFEs) is set to 5×105 for all the benchmark problems, and the allowed tolerance for equality constraint is assigned as ξ=10−4. In each test run, the number of function evaluations (FEs) needed to find a solution x that satisfies all the conditions listed below:(15)(f(x)−f(x*))≤10−4gp(x)≤0,p=1,2,...,P|hq(x)|−ξ≤0,q=1,2,...,Qwas recorded for performance comparisons. In addition, the performance measures used in the benchmarking studies are the feasible rate (FR), the success rate (SR), and success performance (SP), which are defined as follows [60]:(16)FR=#offeasiblerunstotalruns(17)SR=#ofsuccessfulrunstotalrunsand(18)SP=RTs¯×totalruns#RTIn the above, the expression “feasible run” means a test run during which at least one feasible solution is found within MaxFES, and “successful run” represents a test run during which the algorithm can find a solution that satisfies the conditions defined in Eq. (15). Besides,RTs¯is the average FEs for successful runs and #RT is the number of successful runs. The above three quantities are separately calculated for each problem. Note that the SP is a composite indicator to reflect the convergence speed of an algorithm. Furthermore, the algorithm complexity of the proposed RCGA is determined by calculating the index(T2−T1)/T1[60], where the numbers T1 and T2 are, respectively, defined byT1=∑i=124t1i/24andT2=∑i=124t2i/24of which t1iis the computation time for 10,000 FEs of problem i, and t2iis the computation time required for the proposed RCGA with 10,000 FEs of problem i. By definition, it is clear that an easy-to-operate algorithm will result in a small complexity index (T2−T1)/T1 since the average computing time T2 would be close to T1.Based on the above numerical experiences, a general guideline for the selection of the algorithm parameters is now given as follows. To make the RS operator just eliminate a small amount of worst solutions and at the same time reproduce the same amount of better solutions, the use of a small proportional parameter is suggested. For instance, one can set pr=1/N to simply eliminate the worst chromosome and reproduce only the best one. Since the RS can assist DBX to generate crossover directions, a small proportional parameter used can prevent the DBX from merely generating those crossover directions around the current few top solutions. Since the crossover is the key operator in the algorithm to produce better solutions, a small probability threshold, for example λ=0.1, can be assigned to ensure that most paired parents can go through the DBX operation. The parameter ϕ0 is used to control the range of feasible mutation region so that the chromosome can have a great chance to jump out of a local optimum. Thus, to ensure at least half of the search space of each gene can be covered by the DRM operation, the value of ϕ0=0.5 is suggested. Besides, since the penalty factors of the SPF are found to be insensitive to the performance of the proposed RCGA, one can arbitrarily assign the penalty factors to be some reasonably large values, for example CI=106 and CE=107, to account for the violation of the constraints. Note that the setting of CE>CIindicates the proposed RCGA will preferentially direct the solutions to move along the directions that are closer to the equality constraints than the inequality constraints. In general, the selection of the population size N depends not only on the problem's dimension and constraints’ properties, but also relates to the search mechanisms and the constraint-handling technique used. The selection of the population size in an evolutionary algorithm usually represents a tradeoff between the possibility of locating the global optimum and the required computation time. In solving these benchmark COPs, a population size of N=100 is used for all the comparative algorithms. In summary, the algorithm parameters of the proposed RCGA can be assigned as follows: N=100, pr=1/N, λ=0.1, ϕ0=0.5, CI=106 and CE=107. Note that this set of RCGA parameters will be applied to each of the benchmark problems, and the initial population is uniformly randomized within the search space in each test run. The PC (personal computer) configuration for this study is listed in Appendix B. In addition, as a rigorous basis of performance comparison, the proposed RCGA will compare with the following state-of-the-art algorithms: DE [61], DMS-PSO [62], ɛ-DE [47], GDE [63], jDE-2 [64], MDE [65], MPDE [66], PCX [67], PESO+ [68] and SaDE [69]. Note that these comparative algorithms were chosen based on the following reasons and criteria: (1) these algorithms were just recently developed and most of them belong to EAs, like the proposed RCGA does; (2) these algorithms had been performed in the same benchmark testbed and their statistical performance in solving COPs had been reported in the literature. More precisely, according to the functions and mechanisms used, these comparative algorithms can be classified into the following categories: (i) evolution strategy: PCX; (ii) swarm intelligence: DMS-PSO and PESO+; and (iii) differential evolution: DE, ɛ-DE, GDE, jDE-2, MDE, MPDE and SaDE.

@&#CONCLUSIONS@&#
This paper has proposed a simple and efficient RCGA for solving COPs. The proposed RCGA simply applies an SPF for constraint handling and integrates three specially designed evolutionary operators, named the RS, DBX, and DRM, as a whole to mimic a specific evolutionary process. The basic functions of each operator have been clearly demonstrated and studied through a series of designate tests. Extensive simulation results reveal that the performance of the proposed RCGA is less sensitive to penalty factors as compared to that of other optimization schemes using SPF. As a rigorous base of performance evaluations, the CEC2006 testbed, which contains 22 different types of benchmark COPs, has been applied to systematically evaluate the performance of the proposed RCGA. The performance of the proposed RCGA has been compared with that of several state-of-the-art optimization algorithms. Extensive comparison studies have revealed that the proposed RCGA globally ranks three among the comparison algorithms. Moreover, from the calculated algorithm complexity indices, it is confirmed that the proposed RCGA is an easy-to-operate optimization scheme. Finally, as a specific application to maximize the GaAs film growth performance of a commercial MOCVD reactor, the proposed RCGA was embedded in a DDOS to search for an optimal set of operating condition. The obtained optimal operating condition has been verified to possess a better film growth performance than that of the nominal operating condition. Due to its superior performance, novel evolutionary operators, and significant algorithm structure, the proposed RCGA is assured to be an effective and promising scheme in solving COPs.