@&#MAIN-TITLE@&#
E-NAUTILUS: A decision support system for complex multiobjective optimization problems based on the NAUTILUS method

@&#HIGHLIGHTS@&#
We propose a three-stage interactive method E-NAUTILUS for computationally expensive multiobjective optimization problems.Improvement in all objectives on each iteration enables free search and avoids anchoring.A set of pre-calculated Pareto optimal solutions enables a solution process without waiting times.No new optimization problem is solved when the decision maker interacts with the method.E-NAUTILUS provides decision support for users of EMO methods.

@&#KEYPHRASES@&#
Multiple objective programming,Interactive methods,Multiple criteria optimization,Computational cost,Trading-off,

@&#ABSTRACT@&#
Interactive multiobjective optimization methods cannot necessarily be easily used when (industrial) multiobjective optimization problems are involved. There are at least two important factors to be considered with any interactive method: computationally expensive functions and aspects of human behavior. In this paper, we propose a method based on the existing NAUTILUS method and call it the Enhanced NAUTILUS (E-NAUTILUS) method. This method borrows the motivation of NAUTILUS along with the human aspects related to avoiding trading-off and anchoring bias and extends its applicability for computationally expensive multiobjective optimization problems. In the E-NAUTILUS method, a set of Pareto optimal solutions is calculated in a pre-processing stage before the decision maker is involved. When the decision maker interacts with the solution process in the interactive decision making stage, no new optimization problem is solved, thus, avoiding the waiting time for the decision maker to obtain new solutions according to her/his preferences. In this stage, starting from the worst possible objective function values, the decision maker is shown a set of points in the objective space, from which (s)he chooses one as the preferable point. At successive iterations, (s)he always sees points which improve all the objective values achieved by the previously chosen point. In this way, the decision maker remains focused on the solution process, as there is no loss in any objective function value between successive iterations. The last post-processing stage ensures the Pareto optimality of the final solution. A real-life engineering problem is used to demonstrate how E-NAUTILUS works in practice.

@&#INTRODUCTION@&#
Optimization problems, e.g., in industry, often involve multiple conflicting objectives and such problems are typically referred to as multiobjective optimization problems. Such problems are usually complex as they deal with nonlinear objective and constraint functions, different types of variables and may involve the use of computationally expensive black-boxes simulators which imitate some physical processes. Moreover, multiobjective optimization problems do not have a single optimal solution but, instead, several (usually infinitely many) optimal solutions, called Pareto optimal solutions, with different trade-offs among the objectives. Because of this, there is a need for an expert, referred to as the decision maker (DM), who can provide her/his preference information when needed and who ultimately chooses one solution among several others based on her/his preferences. In the literature, there exists a plethora of methods to handle multiobjective optimization problems and among them interactive methods are commonly used (Miettinen, 1999; Miettinen, Ruiz, & Wierzbicki, 2008). In interactive methods, the DM is actively involved during the iterative solution process. Here, the preference information of the DM is accounted to generate a set of solutions which are subsequently presented to her/him. Next (s)he investigates and chooses one or more solutions as the preferred solution(s). This process continues for several iterations until the DM is satisfied with the solution found and regards it as the most preferred Pareto optimal solution.Interactive methods are bound by aspects of human behavior, such as the fact that losses loom larger than gains and the susceptibility of a DM to an anchoring bias, as mentioned by Kahneman and Tversky (1979). According to them, in an anchoring bias, the DM defines an adaptation level based on her/his past and present context of experience and subsequently her/his response is in relation to her/his adaptation level. On the other hand, moving from one Pareto optimal solution to another requires sacrifice(s) in some objective function(s), which may hinder the DM from finding desirable solutions. Both these aspects would mean that the starting solution(s) will have a profound impact on the final solution chosen by the DM. Though these aspects of human behavior are critical in understanding the behavior of a DM, very few interactive methods consider them. In a recently proposed interactive method suggested in Miettinen, Eskelinen, Ruiz, and Luque (2010), the NAUTILUS method, special emphasis is devoted to the different aspects of human behavior laid down by Kahneman and Tversky. In NAUTILUS, the DM starts from the worst possible objective function values derived from the set of Pareto optimal solutions and progressively moves towards her/his preferred Pareto optimal solution, by improving every objective function at the current iteration as compared to the previous one. In this way, one can make sure that the DM does not have to trade off at any iteration and, in fact, (s)he gains on each of the objectives.However, the NAUTILUS method involves a large computational cost. At every iteration of NAUTILUS, a new single objective optimization problem has to be solved unless the DM does not provide any new preference information. In addition, a number of single objective optimization problems equal to the number of objectives has to be solved in order to find the bounds of the reachable objective function values at any iteration, which are provided to the DM. For complex multiobjective optimization problems involving computationally expensive objective and constraint functions, solving multiple single objective optimization problems at every iteration is not practical as the DM typically has to wait for a considerable time period dictated by the time taken to evaluate the objective and constraint functions between iterations. In this paper, we address this discrepancy in the NAUTILUS method with several enhancements and we call the result as the Enhanced-NAUTILUS (E-NAUTILUS) method.In a nutshell, the E-NAUTILUS method applies the three-stage solution process ideology proposed in Steponavice, Ruuska, and Miettinen (2014) and consists of the following three stages: pre-processing, interactive decision making and post-processing stages. In order to reduce the computing time during the interactive decision making stage, a well-spread set of Pareto optimal solutions is pre-computed using e.g. any a posteriori type method (Miettinen, 1999) or evolutionary multiobjective optimization algorithms (Coello, Lamont, & Veldhuizen, 2007; Deb, 2001). Evolutionary multiobjective optimization algorithms are nature inspired population based algorithms, where a set of random solutions is considered to start with and which evolves over several generations to finally obtain a set of solutions as close as possible to the set of Pareto optimal solutions. It must be noted that, since Pareto optimal solutions cannot be guaranteed when using evolutionary multiobjective optimization algorithms, additional efforts must be devoted to ensure the optimality of the solutions, see e.g. Sindhya, Miettinen, and Deb (2013). If a well-spread set of solutions cannot be obtained e.g. because of a need for an exponentially large number of solutions to represent a high-dimensional objective space, approximation techniques such as the PAINT method (Hartikainen, Miettinen, & Wiecek, 2012), the interactive hybrid approach (Klamroth & Miettinen, 2008) etc. can be used to generate new solutions.In the interactive decision making stage, the original computationally expensive problem is not solved but the calculation is based on the data generated in the pre-processing stage. The DM is iteratively shown a set of intermediate points at a certain distance from the nadir point (defined in Section 2) in the objective space, from which (s)he selects one point. This set of intermediate points represents the different ways of approaching the Pareto optimal front from the previous point selected, i.e., different ways of improving the current objective function values. At every iteration, these intermediate points are closer to the set of Pareto optimal solutions and farther from the nadir point than the ones obtained in the previous iteration. This interactive stage is terminated when the DM chooses one solution among the solutions calculated in the pre-processing stage. Initially, the DM specifies the number of intermediate points (s)he wishes to investigate at every iteration and the number of iterations (s)he would like to pursue before her/his preferred Pareto optimal solution is reached. Based on the number of iterations specified, step lengths are calculated to reach the set of Pareto optimal solutions and, at each iteration, a step is taken assuring that the solutions generated are closer to the set of Pareto optimal solutions. In addition, the DM never loses sight of the set of Pareto optimal solutions since, at every iteration, (s)he is provided information about the reachable part of the Pareto optimal set from every intermediate point. It must be noted that the intermediate points only guide the DM towards her/his preferred Pareto optimal solution, but these points are not Pareto optimal, and they may not even be feasible. Finally, the Pareto optimality of the preferred solution chosen by the DM is ensured in the post-processing stage. As mentioned earlier, the Pareto optimality of the solutions generated in the pre-processing stage cannot necessarily be guaranteed and, thus, the last stage is needed.One can regard the E-NAUTILUS method as an interactive decision support system for the DM to find the most preferred solution among the ones generated by any a posteriori method. It supports the DM as only a small amount of solutions is considered at a time and it progressively gives her/him an idea of what can and cannot be achieved in the problem, without the necessity of evaluating the objective functions of the problem again and again. State-of-the-art of hybrid evolutionary multiobjective optimization algorithms have been surveyed in Purshouse, Deb, Mansor, Mostaghim, and Wang (2014). As stated in Purshouse et al. (2014), there are several a posteriori algorithms which incorporate preferences of the DM once an approximation of the Pareto optimal front is found. However, none of them is similar to E-NAUTILUS.Next, in Section 2, we present the background concepts which lay a foundation to the rest of the article. In this section, we also present a brief description of the NAUTILUS method, which is the backbone of the E-NAUTILUS method. In Section 3, we give a detailed description of the E-NAUTILUS method and, in Section 4, we demonstrate the E-NAUTILUS method using a real-life three-objective optimization problem associated with the efficiency improvement of the auxiliary services of thermal power plants. Finally, we conclude and give future research directions in Section 5.We consider multiobjective optimization problems of the form(1)minimize{f1(x),f2(x),⋯,fk(x)}subjecttox∈S,with k ≥ 2 conflicting objective functionsfi:S→R. The decision vectorsx = (x1, x2,…, xn)Tbelong to the feasible setS⊂Rn. For every x ∈ S, we denote the vector of objective function values byf(x)= (f1(x), f2(x),…, fk(x))T, which is called an objective vector in the objective spaceRk. Usually, because of the conflict degree among the objectives, it is not possible to find a solution where all the objectives can reach their individual optimum, so we are interested in so-called Pareto optimal solutions, at which no objective function value can be improved without impairing, at least, one of the others. Givenz1,z2∈Rk,we say that z1dominatesz2 ifzi1≤zi2for all i = 1, 2,…, k andzj1<zj2for at least one index j. If z1 and z2 do not dominate each other, we say that z1 and z2 are (mutually) nondominated. Then, we say that a decision vector x* ∈ S is Pareto optimal if there does not exist another x ∈ S such that f(x) dominates f(x*). The corresponding objective vectorf(x*)is called a Pareto optimal objective vector. Usually, problem (1) has many Pareto optimal solutions. The set formed by all Pareto optimal solutions is called the Pareto optimal set, denoted by E, and its image in the objective space is referred to as the Pareto optimal front, denoted by f(E). In this paper, we refer to objective vectors which map with decision vectors as solutions, and to vectors in the objective space which do not necessarily correspond to any decision vector as points. Besides, in this paper, for a pointz∈Rk,we say that a solution x ∈ S, is reachable fromz if f(x) dominates z, that is, if fi(x) ≤ zifor every i = 1,…, k.When solving problem(s), the DM decides which Pareto optimal solution satisfies best her/his preferences. This solution is commonly known as the most preferred solution and is defined as the final solution of the problem. We will denote it as zpref. There are different ways of expressing preferences (Luque, Ruiz, & Miettinen, 2011; Miettinen, 1999; Ruiz, Luque, & Miettinen, 2012), such as weighting the objective functions, expressing local trade-offs for the objectives, performing pairwise comparisons, selecting one solution among a set of solutions or giving a reference point formed by desirable objective functions values, among others. One of the ways is to provide to the DM a set of solutions and to let her/him choose the one (s)he likes most. In E-NAUTILUS, the DM expresses her/his preferences in this way.The ranges of the objective function values in the Pareto optimal front are defined by the ideal and the nadir points (also known as the ideal and nadir objective vectors), which represent the best and the worst values that each objective function can achieve in the Pareto optimal set, respectively. The ideal point,z☆=(z1☆,⋯,zk☆)T,contains the lowest objective function values and is obtained byzi☆=minx∈Sfi(x)=minx∈Efi(x)for all i = 1,…, k. The nadir point,znad=(z1nad,⋯,zknad)T,is formed by the highest objective function values and can be defined aszinad=maxx∈Efi(x)for all i = 1,…, k. In practice, the nadir point is usually difficult to calculate as the set E is unknown and we need to approximate it (see Miettinen, 1999 and references therein). A pay-off table (Benayoun, de Montgolfier, Tergny, & Laritchev, 1971) has often been used to find an approximation of the nadir point, but lately more reliable approaches for its estimation have been suggested (see, e.g., Deb & Miettinen, 2010; Deb, Miettinen, & Chaudhuri, 2010). Alternatively, the DM can also be asked for the worst possible objective function values and such values can be used as the components of the nadir point.As previously mentioned, E-NAUTILUS is based on the NAUTILUS method proposed by Miettinen et al. (2010). NAUTILUS is an interactive method and was specially designed for avoiding the undesired anchoring effects that many interactive methods suffer from. In many of them, the necessity of an impairment in at least one objective function to find a new solution may hinder the decision making task and this may imply that the DM focusses on a subset of Pareto optimal solutions too prematurely. As suggested in Kahneman and Tversky (1979); Korhonen and Wallenius (1997), past experiences affect people’s hopes and expectations, and DMs do not always react in the same way to gains and losses. These properties may make the selection of a satisfactory solution difficult or even endanger finding the most preferred solution. Because of that, NAUTILUS starts the search for the most preferred solution from the worst objective function values, that is, from the nadir point. From it, the search is oriented in such a way that the DM will progressively focus on the part of the Pareto optimal front (s)he likes most. In fact, the DM can reach any Pareto optimal solution with the NAUTILUS method without the necessity to sacrifice, i.e., trade off. Although only the last solution will be Pareto optimal, the DM is always shown a solution which dominates the solution given at the previous iteration, which means that (s)he gains an improvement in all the objectives at every iteration. This should encourage her/him to continue iterating, given that better objective function values are obtained progressively, without a need of trading off. However, as the solution process approaches the most preferred solution, the area of the Pareto optimal front that can still be reached without trading off shrinks. This implies that there will be other regions of the Pareto optimal front that will not be reachable unless a step backwards is taken.Fig. 1gives a graphical idea of the iterative solution process in NAUTILUS for a biobjective optimization problem. At the beginning, the DM indicates how many iterations (s)he would like to take until finding her/his most preferred solution. However, the number of iterations can be changed during the solution process if (s)he desires to slow down or speed up the progress. We refer to the solution generated at each iteration i as an iteration point, which is denoted by ziin Fig. 1 (for i = 0, 1, 2). The first iteration point is the nadir point. At each iteration, the DM expresses her/his preferences about desired local improvements of the current objective function values following the scheme proposed in Luque, Miettinen, Eskelinen, and Ruiz (2009). This information is employed to calculate a vector of preferential weights, which is subsequently used in an achievement scalarizing function (Wierzbicki, 1980) to find a Pareto optimal solution. From the practical point of view, these preferential weights define the search direction for the next iteration point. Actually, the next iteration point is a point lying in the segment which joins the current iteration point and the objective vector (labeled as fifor i = 1, 2 in Fig. 1) of the Pareto optimal front obtained when optimizing the achievement scalarizing function. The length of the step taken towards the Pareto optimal front is adjusted according to the number of iterations left. Additional information is also given to the DM about the ranges of the values that each objective function can reach without trading off from the next iteration point (i.e., information about the subset of Pareto optimal solutions which are reachable from the next iteration point). These ranges are given at each iteration by the current iteration point and the point zi + 1, loin Fig. 1. A measure of the proximity to the Pareto optimal front is also shown. With this information, the DM decides either to continue the search from the next iteration point in the current or in a new direction, or to take a step backwards and redirect the search from the current iteration point if the information given is not satisfactory, by expressing new preference information. Subsequently, a new iteration is performed and this process continues until completing the number of iterations the DM wishes to take.The E-NAUTILUS method consists of three stages: pre-processing, interactive decision making and post-processing stages, as shown in the flowchart in Fig. 2. In the pre-processing stage, a set of nondominated solutions P approximating the whole Pareto optimal front is initially generated using e.g. an evolutionary multiobjective optimization algorithm or any other a posteriori method, and estimates of the nadir and the ideal points are calculated using P. Special effort should be devoted to ensuring that the solutions in P are not only (mutually) nondominated but also as close as possible to the Pareto optimal front. As the name suggests, the DM is involved in the interactive decision making stage, where (s)he interactively and iteratively improves all objective function values to find the most preferred solution available. Finally, in the post-processing stage, an achievement scalarizing function is optimized over the feasible set, using the solution selected by the DM as the reference point, in order to find (if possible) a more accurate Pareto optimal solution. In practice, this means projecting the solution chosen onto the Pareto optimal front in the direction determined in the achievement scalarizing function (Miettinen, 1999; Wierzbicki, 1980). The DM is not involved in the post-processing stage.The interactive decision making stage is the main part of the E-NAUTILUS method. Here we briefly introduce this stage and a more detailed description is provided hereafter. In this stage, the DM interacts in the solution process by analyzing a small set of points in the objective space and selecting one among them at each iteration. Before starting the interactive solution process, the ideal and the nadir points are presented to the DM in order to let her/him know the ranges of the values that each objective function can reach. Then, the DM is asked to set the number of iterations NIto be carried out and the number of points NSto investigate at each iteration. The interactive decision making stage of E-NAUTILUS starts from the nadir point, from which NIsteps (or iterations) are taken towards P. At each iteration h, a set of NSmutually nondominated points, termed as intermediate points, are generated and shown to the DM. These NSmutually nondominated points always dominate the point chosen by the DM at the previous iteration. In order to help the DM decide which point (s)he prefers most at each iteration, information about the closeness to Ph(a subset of nondominated solutions in P reachable at iteration h) and the objective function bounds of the reachable solutions in Ph(for each of the NSpoints) are also provided. At each iteration, the DM selects her/his most preferred point, referred to as zh, from the NSpoints shown and a new iteration is performed. This iterative procedure is repeated by providing new sets of NSwell-spread mutually nondominated points to the DM until NIiterations are completed. At each iteration, except in the last one, the set Phis updated by removing those solutions which cannot be reached from zh. In this stage, we can assure that the point chosen by the DM at any iteration will always dominate the points (s)he has selected at the previous iterations. Thus, at each iteration, an improvement is always obtained in each objective function. This is expected to encourage the DM to continue iterating. In this way, the DM progressively moves towards a subset of the set of nondominated solutions P generated in the pre-processing stage, starting from the nadir point, and only at the last iteration, (s)he considers a subset of nondominated solutions from P and chooses one of them as her/his most preferred solution.After completing the interactive decision making stage, the post-processing stage is used to ensure the Pareto optimality of the final solution. We can guarantee having a Pareto optimal solution at the end of E-NAUTILUS by projecting the last solution selected in the interactive decision making stage, zh, on the Pareto optimal front. For that, we can minimize the achievement scalarizing function proposed in Wierzbicki (1980) using zhas a reference point, by any suitable mathematical optimization technique. But, given that this stage means to solve a single-objective optimization problem with the original (computationally expensive) functions, it can be skipped if it is regarded to be too time-consuming. Finally, the objective function values and the decision variable values of the projected or the selected solution are provided to the DM.Although E-NAUTILUS has the same underlying philosophy as the NAUTILUS method, there are several differences, which make it specifically suitable for computationally complex multiobjective optimization problems, such as:1.A possibility to provide more than one point in the objective space at every iteration to the DM to consider. Although it has been stated in Janis and Mann (1977) that ”trade-off conflict is a major source of decisional stress”, we believe that different types of DMs exist and a method must provide the possibility for a DM to choose the number of points (s)he wishes to investigate based on her/his cognitive ability. Thus, unlike the NAUTILUS method, where the DM is shown just one point at each iteration, a set of mutually nondominated points representing different trade-offs is provided to the DM at each iteration.No optimization problem is solved in the second stage, that is, when the DM is involved, using the original multiobjective optimization problem, which can be computationally expensive. Instead, a set of solutions representing the Pareto optimal front is pre-calculated in the pre-processing stage, before the DM is involved in the solution process. This prevents the DM from waiting at each iteration when solving complex multiobjective optimization problems where the generation of Pareto optimal solutions would otherwise take time.Preference information asked from the DM in E-NAUTILUS is simple, i.e., the DM is asked to choose a point among a set of points. In the NAUTILUS method, the DM has to provide information about desired local improvements in the objective function values, which may be cognitively challenging in some cases.In what follows, we describe in detail the interactive decision making stage of E-NAUTILUS, which is the core of the method. Algorithm 1contains the main steps of this stage. One should note that this stage of E-NAUTILUS operates in the objective space. Let us denote by h the current iteration number, iththe number of iterations left at each iteration (including iteration h), zhthe selected point by the DM at the iteration h, referred to as the iteration point, and Phthe subset of nondominated solutions of P which can be reached at iteration h from the previous iteration point zh −1 (without impairing any of the objective function values).As said before, the ideal and the nadir points are first shown to the DM in order to let her/him know the ranges of the objective functions. As the reachable solutions always belong to P, the ideal and the nadir points are approximated using the best and the worst objective function values represented in P, respectively. Next, the DM sets values for NI(number of iterations) and NS(number of points). Initially, we set the nadir pointznadasz0and the interaction with the DM starts at h = 1. At this moment, the number of iterations left is it1 = NIand P1 = P, which means that from the nadir point all the nondominated solutions in P can be reached.At each iteration h, the set of NSintermediate points is generated. For this, first, the NSmost representative solutions of Phare found and then NSpoints are calculated which lie on the line segments that join each representative solution and the previous iteration point zh −1. For the selection of the NSmost representative solutions, we need to divide Phinto NSsubsets and find a representative solution of each one. This can be done by any suitable methodology, such as clustering, which can be used to reduce the number of solutions in a set, maintaining the main characteristics of the trade-offs among them. After dividing Phinto NSclusters using, e.g., the average linkage method (Morse, 1980), we can select the centroids of the clusters as the representative solutions. For i = 1,…, NS, let us denote these representative solutions byz¯h,i.Subsequently, we calculate and show the DM the following intermediate points:(2)zh,i=ith−1ithzh−1+1ithz¯h,i,foreveryi=1,…,NS,and (s)he has to select one of them as the next iteration point zh. As can be seen, the step-length taken towards the Pareto optimal front represented by P is calculated according to ith, the number of iterations left. Since ithdepends on the total number of iterations to be taken, the higher the number of the iterations to carry out, the smaller the step-length is and the slower the convergence to P is.If ith= 1 (i.e., we are at the last iteration), we havezh,i=z¯h,ifrom (2) and, thus, the points shown to the DM at the last iteration are solutions belonging to Ph⊂P. This means that the pointzNIchosen by the DM at the last iteration is a nondominated solution in P. If ith> 1 (i.e., we are not at the last iteration), it must be noted that the points zh, imay not be feasible solutions of the original problem. This must not be regarded as a drawback, given that the main purpose of E-NAUTILUS is to progressively improve the objective functions at each iteration until the DM reaches a satisfactory nondominated solution in P, without trading off. Thus, a possibly infeasible solution is dominated by a feasible one in P. To be more specific, the following properties hold:Theorem 1At any iteration h, for any r1, r2 ∈ {1…, NS}, pointszh,r1andzh,r2do not dominate each other.See Appendix A.□1.At any iteration h with ith≠ 1, the objective vectorzh, iis an achievable11We say that a point inRkis achievable if its components can be simultaneously achieved or improved by a feasible solution.point dominated byz¯h,i, for any i = 1,…, NS.At any iteration h, zhdominateszh −1.See Appendix A.□Theorem 2 is an extension of Theorem 1 in Miettinen et al. (2010). According to claim 1 of Theorem 2, when ith≠ 1, we can assure that, although the points presented to the DM at each iteration are not Pareto optimal and may be even infeasible, there always exist feasible solutions which dominate them. Furthermore, Theorem 1 means that the NSpoints shown at each iteration will not dominate each other, whatever the shape of the Pareto optimal front is. Additionally, claim 2 of Theorem 2 ensures that each iteration point dominates all the previous ones, and this means that the DM will always obtain an improvement in each objective function at each iteration taken.If ith> 1, from each point zh, i, the range of reachable values that each objective function can take will shrink as new iterations are carried out. This implies that there will be a region of Phthat will be discarded at the following iterations. Because of that, the DM should be aware of what kind of solutions can and cannot be reached from each zh, ibefore selecting the next iteration point. Thereby, we also give the DM lower bounds of the reachable values from each zh, i, and a measurement of its closeness to P. Note that the upper bounds of the reachable values are given by the points zh, ithemselves. On the one hand, for every i = 1,…, NS, the lower bounds of the reachable values from zh, iare calculated following the same idea as in NAUTILUS. We consider the following ε-constraint problems for r = 1,…, k:(3)(Prh,i){minimizefr(x)subjecttofj(x)≤zjh,i,j=1,⋯,k,j≠r,x∈Ph.As can be seen, instead of solving these problems over the whole feasible set, we just minimize them over Ph. In this way, the computation cost of solving each problem (Prh,i) at each iteration h (a total of k x NSproblems) is significantly small, given that we just need to find the solution in Ph(a finite set) with the lowest function value for each one of them. Next, the lower bound objective vector for the point zh, i, denoted by fh, i, lo=(f1h,i,lo,⋯,fkh,i,lo)for every i = 1,…, NS, is defined using the optimal values of the problems (Prh,i). That is, for each r = 1,…, k, the lower boundfrh,i,lofor the objective fris the optimal objective function value of problem (Prh,i).On the other hand, we measure the closeness of each zh, ito Phas follows:(4)dh,i=∥zh,i−znad∥∥z¯h,i−znad∥×100foreveryi=1,⋯,NS,where ‖ · ‖ is the L2-norm. As in the NAUTILUS method, the greater dh, i, the closer the point zh, iis to Ph. This information is useful to let the DM have an idea of how fast the approach to Phwould be from each of the points shown.With all this information, the DM analyses each zh, i, together with the lower bounds of the reachable objective function values in fh, i, loand the measurement of closeness dh, i. (S)he must decide which point satisfies her/his preferences best and this point will be set as the next iteration point zh. The process described is repeated until NIiterations have been carried out.As said, at each iteration, once the DM has selected the next iteration point zh, there is a part of Phthat cannot be reached at the next iteration. Because of that, the set Ph + 1 to be used at the next iteration will be formed by the solutions z ∈ Phwhose objective value zjverify thatfjh,l,lo≤zj≤zjhfor all j = 1,…, k. In other words, Ph + 1 will be formed by the nondominated solutions in P which approximate the reachable part of P from zh.Fig. 3gives an idea of the first and second iterations of the interactive decision making stage of E-NAUTILUS in a biobjective optimization problem. In this example, the DM wishes to perform three iterations (NI= 3) and investigate six points at each iteration (NS= 6). At the first iteration, we start from z0 = znad and P1 = P. This set is divided into six clusters and one representative of each cluster is selected. The six points shown to the DM are the ones encircled in the figure on the left. They have been obtained by dividing the line segments joining the representative solutions and z0 into three parts. Next, assuming that the DM has selected the point labeled z1, the process described is repeated and the second iteration is performed, as shown in the figure on the right. It can be observed that from z1, the subset of Phthat can be reached has shrunk (shown by a dashed box) and there are some solutions in Phthat have been discarded. Since one iteration has already been completed, at the second iteration, the segments joining the representative solutions and z1 are divided into two parts, so that the step-length is adjusted correspondingly.The E-NAUTILUS method allows several flexibilities in the solution process, which have not been indicated in Algorithm 1, for simplicity. These flexibilities are the following:1.In the interactive decision making stage of E-NAUTILUS, the number of points to be seen can be altered at any moment if the DM desires so. On the other hand, if the DM is not satisfied with any of the points shown at an iteration, (s)he can take a step backwards in order to re-select the iteration point. In that case, we update the number of remaining iterations ith= ith+ 1 and continue the process from the iteration point selected.The DM is able to speed up or slow down the search process at any time by expressing a new value for the remaining number of iterations ith.At any iteration h, the intermediate points shown to the DM represent the set of solutions that can be reached from zh. However, the extreme solutions of the reachable region Phmay not be represented by these points. This can be observed in Fig. 3. We refer to the solutions which independently minimize each objective function over Phas extreme solutions of Ph. In practice, showing intermediate points associated to the extreme solutions at each iteration could be useful for the DM. They would allow her/him to gain information about the minimum value that each objective function could take from the current iteration point, and also about the price to be paid in the rest of the objectives in order to reach this minimum value. Because of that, intermediate points associated to the extreme solutions are stored in an archive set at each iteration. But, in order to avoid overwhelming the DM with too much information, these intermediate points are shown to the DM just in case (s)he explicitly asks for revising them at some iteration.In Step 3 of Algorithm 1, during the selection of the most representative solutions in Ph, it may happen that the number of solutions in Phis less than NS. This may be the case, for example, when the number of solutions in P is not big enough and the DM is at the last iterations, when the proximity to P is high. In this situation, there are at least two options: (a) the DM can be shown the set of intermediate points that can be obtained with the solutions currently available in Ph, and in this case the DM must be told that the required number of points is not available, or (b) additional solutions can be generated within the reachable part Phin order to get NSintermediate points as the DM wishes to see. For option (b), we propose to use a Pareto fill module in order to generate more nondominated solutions in the reachable part. This Pareto fill module is an auxiliary module and must be considered as an add-on to E-NAUTILUS. Hence, the module is not included in Algorithm 1.In Fig. 4, we enumerate the three steps involved in the Pareto fill module. In the first step, an interpolation method like PAINT (Hartikainen et al., 2012) is used to create an approximation of the Pareto optimal front based on the solutions in P. In the second step, κ uniformly distributed points are generated on a k-simplex (Das & Dennis, 1998) whose vertices (uk) are the bounds of the reachable part Phwithin which additional solutions are needed. The PAINT approximation is used in the third step to create a computationally inexpensive surrogate of the original problem (1). This surrogate problem is scalarized using the achievement scalarizing function proposed in Wierzbicki (1980). Next, the scalarized problem is solved several times by choosing one of the points generated on the k-simplex as a reference point at a time. The resulting solutions will lie on the PAINT approximation and they constitute a new set Ph, from which the Step 3 of Algorithm 1 can continue. Note, however, that the feasibility of the new solutions generated with the Pareto fill module cannot be guaranteed and, thus, the post-processing stage is strongly recommended in this case, since it finally guarantees the Pareto optimality of the final solution chosen by the DM. But if the projection in the post-processing stage is considered to be too time consuming, another option to guarantee at least the feasibility of the final solution is to find the solution in P which has the minimum Euclidean distance from the point zhfinally chosen by the DM.In this section, we illustrate the performance of E-NAUTILUS in the real-life multiobjective optimization problem presented in Ruiz, Cabello, Platero, and Blázquez (2015), which is associated to the efficiency improvement of the auxiliary services of thermal power plants. This problem deals with finding the most convenient improvement strategies that can be carried out in the auxiliary services in order to maximize the energy saving achieved (denoted by f1, in megawatt hour), minimize the economic investment required (denoted by f2, in million €) and maximize the Internal Rate of Return (IRR) of the investment (denoted by f3, in percent). The improvement strategies considered are: (a) the replacement of the current electric motors by more efficient ones, (b) the installation of variable speed drives, and (c) compensation for reactive power. There are binary decision variables indicating whether the strategies (a) and (b) are implemented or not in the elements involved, as well as continuous decision variables containing the amount of reactive power to be compensated for in strategy (c) on each component of the auxiliary services. The case study considered is based on the auxiliary services of a 1,100 megawatt power plant, and the resulting multiobjective optimization problem has 13 continuous decision variables and 20 binary decision variables.In this problem, objectives functions f1 and f3 must be maximized while f2 must be minimized. In order to follow the notation of the paper, the original problem has been transformed into a minimization problem, where the objectives to be minimized are −f1, f2 and −f3. However, in real practical problems, the objective values should be presented to the DM in the correct form (maximization/minimization) in order to ease the understanding of the values.It should be said that we initially asked the DM for the importance he gave to each objective function. He indicated that his most important objective was the investment cost (f2), given that he had to adjust to a budget of 2 million €, approximately. After that objective, the energy saving objective function (f1) was the second most important objective for him and, finally, the IRR objective (f3). The DM also said that, with E-NAUTILUS, he expected to find a solution with a satisfactory trade-off among the investment and the energy saving objectives. Note that this information is not needed by E-NAUTILUS, but it is very useful to have an initial understanding of the preferences and expectations of the DM.In what follows, we describe the solution process using E-NAUTILUS. First, in the pre-processing stage, we started by finding a set of nondominated solutions P which approximates the Pareto optimal front of the problem. The objective functions are discontinuous and nonconvex, even some of them are modeled using a black-box simulator due to the complex engineering formulas behind the model. Because of that, and the presence of binary and continuous variables, the Pareto optimal front was approximated using the evolutionary multiobjective optimization algorithms NSGA-II (Deb, Pratap, Agarwal, & Meyarivan, 2002) and MOEA/D (Zhang & Li, 2007) (further details about the parameter setting used are available upon request). Since this is a real multiobjective optimization problem whose Pareto optimal front is unknown, we ran these two algorithms with a high population size (2000 individuals) and a large number of generations (650 generations) in order to be able to rely on the results obtained. The set P was formed by the nondominated solutions of the final populations of both algorithms. As a result, P had a total of 2218 solutions. The ideal and the nadir point were approximated from P to get z⋆ = (−47526.37, 0.05, −100.00) and znad = (−408.49, 9.28, −22.13). From an overall perspective, after analyzing the solutions obtained, we concluded that the highest values of the IRR, which were near 100 percent, were reached by solutions where the energy savings and the investment costs were not very high in comparison to the rest of the solutions. In contrast, solutions with higher energy savings and costs had lower IRR values, although these IRR values were still economically very profitable taking into account that the lowest IRR value attained was 22.13 percent.Regarding the interactive decision making stage, two experiments are described hereafter. The first experiment carried out is described in Subsection 4.1 and shows the solution process followed when P was formed by the 2218 solutions available. Although, in this example, we had a dense set of solutions approximating the Pareto optimal front, this may not be a common situation, specially in computationally complex multiobjective optimization problems. In these cases, the number of solutions in P may be much lower in order to save in computation cost. In these situations, the Pareto fill module described in Section 3 may be internally needed during the solution process of E-NAUTILUS to generate extra solutions within the reachable part Ph, at some iteration h. In order to illustrate this, we have carried out a second experiment, described in Subsection 4.2, in which the size of P was reduced by selecting the 100 most representative solutions available as the set P.As previously indicated, in this experiment the set P consisted of 2118 nondominated solutions. After showing the ideal and the nadir points to the DM, he decided to take five iterations and wanted to see six points at each iteration, i.e., NI= 5 and NS= 6. Table B.1 of Appendix B contains the information shown to the DM along the whole solution process. The first column of this table shows the iteration number h and the second one the intermediate points given to the DM at each iteration. The ‘Bounds’ column contains three subcolumns with the lower objective function bounds for each intermediate point (that is, the components of the vector fh, i, lo) and the last column ‘Closeness’ indicates the value of dh, ifor each point. In what follows, we describe the iterative process followed by the DM.Iteration 1Based on the information provided, the DM observed that, from all the intermediate points of iteration 1, the lowest values that could be reached for the three objectives (their lower bounds) were still very close to their ideal values. Since he initially gave more importance to the investment cost than to the other two objectives, he decided to select the point with the lowest value for f2 and chose the point z1, 3. He noticed that this point had the worst value for f1, but he did not mind having such a value since he was satisfied with the lowest bound that could be achieved for f1 from z1, 3. Then, we set z1 = z1, 3.At this iteration, apart from analyzing the information given for f2, the DM also paid special attention to the energy saving in f1. He realized that the values that could be achieved by f2 from all the intermediate points were lower than 2 million €, so he thought it would be worthy to improve f1 rather than the f2 value. From the intermediate points obtained, he preferred z2, 2 because the lower bounds that could be reached for both objectives, f1 and f2, at this point were satisfactory enough. Then, we set z2 = z2, 2.Given that the lower bounds that f2 could achieve from any of the intermediate points were very similar, and f3 could also reach the same lower bound from all of them, the DM mainly concentrated on f1 in order to select the most profitable point. According to that, he looked for the point with the best energy saving value and from which the best values for f1 could be obtained. Then, he selected z3, 3 as the next iteration point z3.It can be seen that, at this iteration, the values for f2 at all the intermediate points were greatly reduced in comparison to those of the previous iteration, and, at the same time, the DM could still find solutions which did not require to spend more than 2 million €. He found points z4, 4, z4, 5 and z4, 6 interesting because, from all of them, the investment could be reduced down to 1.87 million €, and the IRR could be up to 61.47 percent. From these points, he initially selected the point z4, 6 since it was the point with the best value for f1 and from which the best lower bound for f1 could be reached. However, at the next iteration, he was not satisfied with any of the intermediate points obtained because only one of them needed an investment below 2 million €. Given that he would have chosen the final solution at that iteration (since it would have been the last one), he decided to take a step backwards. Then, among the three points he liked most at the fourth iteration, he looked for the point with the second best value for f1. Finally, he selected z4, 4 as the iteration point z4 in order to see if it was possible to obtain better results.At the last iteration, we obtained solutions requiring to invest both more or less than 2 million €. Solutions z5, 3 and z5, 5 did not need more than 2 million €, but the DM also analyzed the trade-offs among f1 and f2 in the solutions with an investment higher than 2 million €. Finally, the DM was more interested in the solution z5, 4 than in z5, 3 and z5, 5. Although this solution required an investment over the initial budget, it saved more energy than z5, 3 and z5, 5 and the DM considered that the sacrifice to be paid in the investment for obtaining a better value for f1 was worthy enough. Besides, among the solutions requiring more than 2 million €, z5, 4 was the solution with the best IRR value (f3), which also encouraged him to select this solution as the final one. Then, we set zpref = z5 = z5, 4.In this experiment, the post-processing stage was not carried out since the computational effort required was regarded too high. Although we cannot assure that the solution zpref is Pareto optimal, it belongs to P, which has been obtained by combining over 2000 individuals obtained by NSGA-II and MOEA/D, respectively, after 650 generations and by selecting the nondominated solutions among them.A possible way to ease the interaction with the DM in E-NAUTILUS is to use a value path as the one showed in Fig. 5for graphically visualizing the solution process. In this value path, we illustrate the first and the second iterations of Experiment 1. It can be seen that the DM can easily compare the objective values reached by all intermediate points at each iteration before selecting her/his most preferred point. Besides, at the second iteration, we illustrate the objective values which can be reached from the first iteration point z1 by highlighting with thick lines the part of each bar which corresponds to the reachable range for each objective function. The DM can also have an idea of how close the objective values at the current iteration point are from their ideal values. Overall, what makes using this value path specially suitable for illustrating the E-NAUTILUS method is that the DM can graphically visualize the improvement of each objective along the whole solution process and the progression from the nadir point towards the final solution in P.Here, the set P consisted of the 100 most representative solutions of the 2118 solutions initially generated. In this case, the ideal and the nadir points approximated from this set P were z⋆ = (−47, 504.84, 0.05, −99.02) and znad = (−413.47, 9.27, −22.16). Once the DM was shown the ideal and the nadir points, he indicated that he desired to see five solutions at each iteration and that he wanted to take five iterations, so we set NS= 5 and NI= 5. All the information provided to the DM in this second experiment can be seen in Table B.2 in Appendix B.Iteration 1Initially, the reachable values for f3 and its lower bounds were very low in all the intermediate points obtained so, at this iteration, the DM gave more importance to f1 and f2. He decided to choose the point z1, 3 given that it reached the second best value for f1 and the investment needed at this point (f2) was slightly lower than that of the point with the lowest value for f1. Besides, from z1, 3, f1 could reach very good values near its ideal value, and the reachable values for f2 did not exceed the maximum amount of money he was willing to invest. Then, we set z1 = z1, 3.As f1 and f3 could still reach acceptable values for the DM in all the intermediate points found at this iteration, the DM was more interested in directing the search towards solutions which require the lowest investments (f2). The point with the lowest f2 value was z2, 1, and it must be noted that similar lower bounds for f2 and f3 were obtained by the points z2, 1 and z2, 3. However, the reachable value for f1 from z2, 1 was the lowest one. According to that, the DM realized that more profitable solutions might be found from z2, 1 than from z2, 3, so he selected it and we set z2 = z2, 1.From the information shown at iteration 3, the DM observed that the f2 values were significantly reduced at all the intermediate points when compared to z2 and he liked this improvement a lot. From them, he selected as the next iteration point z3 the point z3, 1, since this was the point from which the best f2 and f3 values could be obtained, and, at the same time, he thought that the reachable values for f1 were still very good. Thus, we set z3 = z3, 1.At the fourth iteration, the DM put more attention on the first objective than in the other two because he was satisfied with the values obtained for f2 and f3 in all the intermediate points. He observed that a significant improvement in f1 was obtained by all the points. The point he liked most was z4, 5 because this point was the one with the second best value for f1, and the DM realized that, from it, he could reach the lowest value for f1 and the second lowest value for f2. Then, we set z4 = z4, 5. After that, the DM noticed that the closeness to P was almost 80 percent and only one iteration remained (ith= 1), which meant that he would choose his last preferred solution at the next iteration. But he wished to explore the reachable part of P from z4 more carefully, so he decided to slow down the search and to take two iterations more (internally, we updated ith= 3).From the intermediate points shown, the point the DM liked most was z5, 2 and we set z5 = z5, 2. There were several points with the same lower bound for f2, but the DM was most interested in this point because it achieved the best value for the energy saving (f1) among all of them and, at the same time, the values that could still be reached for f1 from it were among the best ones. Regarding f3, the DM was satisfied with the values achieved and lower bounds obtained for this objective by all the intermediate points, so he did not concentrate on that objective too much. At this iteration, the DM was 84.47 percent close to the set P and he was quite satisfied with the lower bound values that the objective functions could reach from z5. Then, he decided to increase the number of points to be obtained at the next two iterations to have more information about the solutions that could be reached from z5. He desired to see ten points, so we updated NS= 10.Since only one iteration remained, he concentrated on revising the lower objective function bounds that could be obtained from each one of the 10 intermediate points obtained. Analyzing the lower bounds obtained for f1, he could distinguish two kinds of intermediate points. On the one hand, there was a first group of intermediate points from which f1 could reach values around -26000.00 (points z6, 1, z6, 3, z6, 4, z6, 5, z6, 8 and z6, 10). On the other hand, the second group was formed by the intermediate points z6, 2, z6, 6, z6, 7 and z6, 9, from which better lower bounds for f1 were obtained (around -32000.00) in comparison to the points in the first group. However, the points in the second group had obtained lower bounds for f2 which were worse than those of the points in the first group and, regarding f3, better values could be reached from the points in the second group than from the points in the first one. As a result, from the intermediate points in the first group, the DM could reach a final solution which saved less energy, required less money but reached a worse IRR value than the solution that could reach from the intermediate points in the second group. Based on this, and given that his initial budget was around 2 million €, the DM decided to select a point in the first group, although higher energy savings could be obtained from the points in the other group at the expense of a higher investment. Then, among the points in the first group, he selected z6, 6 because it was the point from which the best energy savings (f1) could be reached (z6 = z6, 6).It should me mentioned that, at this iteration, the Pareto fill module described in Section 3 was internally needed. The iteration point z6 was very close to the set P (at 94.34 percent of the total distance) and, internally, there were not enough solutions in the subset P7 to find the 10 representative solutions required to calculate the 10 intermediate points. This module generates a set of extra solutions within the reachable region P7 and, since this is the last iteration, the intermediate points generated were nondominated solutions belonging to this set. Based on the previous experiment, and although none of the points obtained required an investment below 2 million €, the DM did not want to go backwards since he was satisfied with the trade-offs among f1 and f2. He finally selected the point z7, 3 as his most preferred solution. It had the lowest value for f2 and, at the same time, it reached the best value for f3, which meant that this was the most profitable solution. Consequently, we set zpref = z7 = z7, 3.In this experiment, given that the Pareto fill module was needed at the last iteration, the post-processing stage is strongly recommended in order to assure the Pareto optimality of zpref. In our case, the post-processing stage was carried out by selecting the closest solution of the set P considered in this experiment to zpref with respect to the Euclidean distance, which was the solution (−25368.00, 2.1438, −58.58).In Figs. 6and 7, the star indicates the nadir point of the problem, the dark encircled points represent the solutions in P which approximate the Pareto optimal front and the triangles are the iteration points selected by the DM at different iterations of E-NAUTILUS, in Experiments 1 and 2, respectively. Since in Experiment 2 (Fig. 7) the solution zpref and the final solution are different, we have represented the final solution with a large (yellow) circle. The figure clearly shows that the DM made consistent progress by choosing a solution better than the previous solution and finally obtained a solution in the same region than in Experiment 1. Additionally, using the Pareto fill module in Experiment 2 did not drastically change the final solution preferable to the DM as compared to Experiment 1.

@&#CONCLUSIONS@&#
In this paper, we have proposed enhancements to the interactive method NAUTILUS and called it the E-NAUTILUS method. In principle, E-NAUTILUS is aimed at avoiding the undesired anchoring effects which may take place in interactive solution processes. It progressively proceeds to the most preferred Pareto optimal solution from the nadir point, taking one step closer to the Pareto optimal set at each iteration, and effectively handles computationally expensive multiobjective optimization problems. What is important is that the DM does not face the computational cost during the solution process, even if the problem is computationally expensive.E-NAUTILUS is divided into three stages. In the first stage, called the pre-processing stage, a set of well-spread nondominated solutions approximating the entire Pareto optimal front is generated. Additionally, if a well-spread set of solutions cannot be generated, approximation techniques such as the PAINT method can be used to generate more solutions without solving the original problem. The next stage, called the interactive decision making stage, constitutes the core of E-NAUTILUS and is the stage where the DM interacts with the solution process. The DM progressively proceeds from the nadir point towards the most preferred solution in the set of nondominated solutions generated in the previous stage. At every iteration, the DM is given a set of intermediate points, from which (s)he must select the next iteration point. It is guaranteed that all the intermediate points shown at each iteration to the DM are mutually nondominated, as well as that all of them dominate the previous iteration point chosen by the DM. In this way, the DM always obtains an improvement in all objective functions at every iteration, thereby keeping her/him always motivated and focused. The DM is also provided with additional information regarding the kind of solutions that may be reachable from each iteration point before making a decision. At the last iteration, it is assured that the DM selects one solution which belongs to the set of nondominated solutions which were initially generated. However, given that this set just constitutes an approximation of the Pareto optimal front, it is not assured that the last solution selected by the DM is Pareto optimal. Because of this, we need the last stage, called the post-processing stage, in which an achievement scalarizing function is formulated and solved to project the final solution to be Pareto optimal.In addition, some flexibilities for the interactive decision making stage of E-NAUTILUS have been proposed, such as changing the number of solutions to be seen or the number of iterations left at any time, and the possibility of going backwards at any iteration. We have also suggested an add-on module to be used in case the number of solutions that can still be reached is not big enough to show the DM the number of intermediate points (s)he desires to see. In this case, this module generates additional nondominated solutions in the reachable part by means of an interpolation method.We have illustrated the E-NAUTILUS method using a real-life multiobjective optimization problem concerning the improvement strategies of the auxiliary services of thermal power plants. Here the DM progressively improved the values of the objective functions at each iteration according to his preference information and he finally reached a final solution which responded to his initial expectations. For the sake of demonstration a second experiment was performed using a reduced set of nondominated solutions in the pre-processing stage. In the second experiment, an approximation of nondominated solutions using the PAINT method was activated at the last iteration due to an insufficient number of solutions available. However, the preferred solution that was chosen by the DM was not very different from the one in Experiment 1. Thus, the additional flexibility added to the E-NAUTILUS is justified.Future research directions include a further study of graphical illustrations that enable showing the DM the information in an understandable and intuitive way, and the development of a user-friendly interface to interact with the DM. The role of a user-friendly interface is essential so that DMs can make the most of the properties of E-NAUTILUS.