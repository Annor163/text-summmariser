@&#MAIN-TITLE@&#
Solving molecular flexible docking problems with metaheuristics: A comparative study

@&#HIGHLIGHTS@&#
Four algorithms (two GAs, PSO, and DE) are used to solve molecular docking problems.A set of 83 docking instances is generated based on real existing molecules.A thorough experimentation with statistical assessment of results is performed.Relevant solutions are analyzed from the point of view of their biological meaning.

@&#KEYPHRASES@&#
Molecular docking,Optimization,Metaheuristics,Experimental comparison,

@&#ABSTRACT@&#
The main objective of the molecular docking problem is to find a conformation between a small molecule (ligand) and a receptor molecule with minimum binding energy. The quality of the docking score depends on two factors: the scoring function and the search method being used to find the lowest binding energy solution. In this context, AutoDock 4.2 is a popular C++ software package in the bioinformatics community providing both elements, including two genetic algorithms, one of them endowed with a local search strategy. This paper principally focuses on the search techniques for solving the docking problem. In using the AutoDock 4.2 scoring function, the approach in this study is twofold. On the one hand, a number of four metaheuristic techniques are analyzed within an extensive set of docking problems, looking for the best technique according to the quality of the binding energy solutions. These techniques are thoroughly evaluated and also compared with popular well-known docking algorithms in AutoDock 4.2. The metaheuristics selected are: generational and a steady-state Genetic Algorithm, Differential Evolution, and Particle Swarm Optimization. On the other hand, a C++ version of the jMetal optimization framework has been integrated inside AutoDock 4.2, so that all the algorithms included in jMetal are readily available to solve docking problems. The experiments reveal that Differential Evolution obtains the best overall results, even outperforming other existing algorithms specifically designed for molecular docking.Molecular docking tools are used to predict the conformation and relative orientation of two or more molecular constituents. Pioneered in the early 1980s, these computational approaches have made an important contribution to the location and characterization of binding sites in macromolecules, as well as in the discovery, design and comparison of new drugs to find new compounds with high affinity to the targeted proteins [1].The objective of docking is to obtain a model of interaction between a ligand and a macromolecule, characterized by a minimum binding energy. This model is based on known ligand and macromolecule 3D structures. In the past, this requirement was a problem due to the lack of 3D crystal structures. However, with the development of techniques such as high-throughput protein purification, the X-ray crystallography and nuclear magnetic resonance (NMR) spectroscopy, the number of structures stored in the Protein Data Bank database (PDB) [2] has increased. This database currently contains 100,547 entries for 3D structures obtained by X-ray crystallography (over 80%), NMR (about 16 %) and theoretical modeling (2%). Most of these PDB structures have an important function in the metabolic and biosignaling pathways and can be considered as drug targets in docking analysis. In addition, the advances in human genome sequencing have provided a basis for the detection of 3D protein structures related to the regulation and the expression of genes. In this context, these 3D structures offer a high diversity of biologically active macromolecules which are used to generate drug interaction models for the discovery of new targets.In the computational development of docking software, researchers in this field have traditionally focused on two of the components which determine the quality of the docking software: the scoring function and the optimization algorithm. The scoring function enables the evaluation of conformations between ligand and protein, to detect those conformations with the minimum binding energy. Moreover, the conformational model used in docking software tools allows the rotation around torsional degrees of freedom of the flexible ligand and side chains of receptor in order to create more realistic docking simulations [3]. So, given a scoring function, the goal is to use an optimization algorithm to find the best docking solutions which are those complexes with the minimum binding energy. In this paper, we focus on metaheuristics [4], a broad family of non-exact optimization techniques, including Evolutionary Algorithms (EAs), Particle Swarm Optimization (PSO) [5], Ant Colony Optimization (ACO) [6], Simulated Annealing (SA), Tabu Search (TS), and many others. Genetic Algorithms (GAs), a subfamily of EAs, are the most well-known and used metaheuristics.A popular tool for molecular docking is AutoDock [7], a C++ software package which in its 4.2 release provides a SA and two GAs algorithms, one of which, referred to as the Lamarckian GA, incorporates a local search [8]. These techniques involve specific operators using problem information, which leads them to outstanding results for rigid and flexible molecular confirmations. The main motivation in this study is to analyze the performance of a set of general-purpose metaheuristics (in their canonical design) to determine whether any of them can lead to better scoring values compared to the techniques already provided by AutoDock. In particular, we focus on two variants of standard GA (generational and steady-state), a PSO algorithm, and a Differential Evolution (DE) solver [9]. To achieve this goal, instead of trying to incorporate the new algorithms into the source code of AutoDock, the approach has been, to use a software framework oriented to solving optimization problems with metaheuristics. Specifically, the framework used is jMetal [10], a Java-based object-oriented software library aimed at multi-objective optimization but it also incorporates a number of single-objective algorithms. As AutoDock and jMetal are written in different programming languages, to obtain an efficient implementation we have opted to develop a C++ version of jMetal. The result is a software package that integrates both tools [11], in such a way that the algorithms available in jMetal can be used to optimize the binding energy function of AutoDock 4.2. Consequently, AutoDock users also benefit because they have the choice of using different optimization techniques beyond the ones already incorporated inside the software, and researchers in metaheuristics can use a real world problem, like molecular docking in their work.For the algorithmic evaluation and comparison, a thorough experimentation is performed in this study, where algorithms are subjected to a benchmark of molecules with different properties of flexibility, size and resolution. As mentioned, the flexibility in macromolecule and ligands is considered a more realistic docking problem and also a challenge given the more complexity of the problem, therefore, we have chosen to focus here on solving this problem. The ligands are of different sizes from small to large including cyclic urea ligands.The main contributions of this work can be summarized as follows:•Four metaheuristics (two GAs, PSO, and DE) are used to solve molecular docking problems and their behavior analyzed in terms of performance. In addition, these algorithms are also compared with two well-known metaheuristics included in AutoDock 4.2 (GA and LGA).A set of 83 docking instances is generated based on real existing molecules, then constituting an extensive benchmark for assessing algorithms. From this set, 75 PDB structures (instances) are used for performance assessment involving flexibility in HIV-protease macromolecules and ligands, whereas a subset of 11 molecular instances are used for the parameter setting (three instances are used in both subsets), revealing new configurations for fine-tuning algorithms in the context of flexible molecular docking. The benchmark is online available and adapted to be reproduced using compatible software.11http://khaos.uma.es/AutodockjMetal/instances.jsp.Along this paper, all necessary information is provided to make this study replicable according to standard guidelines [12].A thorough experimentation with statistical assessment of results is performed to compare algorithms. An additional analysis in terms of convergence behavior is also provided.A series of relevant solutions are analyzed from the point of view of their biological meaning, so as to offer insightful results for experts in the domain of application of molecular modeling and design.The remainder of this paper is organized as follows. Section 2 includes a review of the state of the art concerning other approaches to the problem being tackled here. Section 3 presents the molecular docking problem, with solution encoding and fitness energy function formulation. In Section 4, the metaheuristics evaluated in this study are described. Section 5 includes the description of the strategy followed, based on the jMetal+AutoDock integration. Section 6 reports the experimental setup, with parameter settings and problem instances. Results, comparisons, and analysis are presented in Section 7. Section 8 concludes the paper and presents an overview of future work.

@&#INTRODUCTION@&#


@&#CONCLUSIONS@&#
The main objective of this work has been to carry out a comparative study using metaheuristics from the jMetal framework and AutoDock 4.2. The selected algorithms were two GAs, a PSO, and a DE, provided by jMetal. To achieve this goal, we have used the C++ version of jMetal that has been integrated with AutoDock, resulting in a software tool which allows the metaheuristics included in jMetal to be used easily.An extensive set of PDB structures has been selected to compare the search methods involving flexibility in HIV-protease macromolecules and ligands, as this result in a more realistic and complex problem. Ligands in all instances present a size range from small to large, including cyclic urea.The main conclusions to be drawn are listed as follows:•In general, the DE (jMetal) optimizer shows the best performance results, even with statistical confidence in comparison with the other evaluated metaheuristics. DE also outperforms well-known algorithms techniques in the state of the art, LGA and GA (AutoDock), even though they have operators designed specifically for the problem domain.DE converges later, although to high quality solutions. This behavior of DE implies a balanced trade-off between exploration-exploitation when dealing with different molecular docking instances.In the case of gGA, it demonstrates a fast convergence behavior also with successful solutions. Specifically, for the 1HWR molecule (and similar for 1BV7), gGA stagnates close to 250,000 evaluations, although showing similar results to DE. This result suggests that generational GA of jMetal could be also a good choice when looking for fast, but good enough solutions.jMetal-AutoDock is shown to be a useful tool for three kinds of researchers: first, those interested in efficient docking search methods that can be applied in the drug screening domain; second, metaheuristic designers that can use protein docking as a real-world case study and third, those biological researchers that are focused on the problem of macromolecule flexibility such as Abreu Rui et al. that improve the docking scores through a study of selective flexibility of the side-chain residues of VEGFR-2 tyrosine kinase receptor [61].A number of future lines of research emerge from this paper. The jMetal was originally designed to deal with multi-objective optimization problems and incorporates many metaheuristics, so the next natural step is to carry out a study by using a multi-objective formulations of the docking problem. Furthermore, bearing in mind that DE does not apply any knowledge of the problem being solved, an open research line deserving of study is whether its search capabilities can be improved by using a local search and any problem knowledge. This could also be applicable to PSO, ssGA and gGA. Finally, AutoDock Vina is considered as a new generation of docking techniques, so future work could involve integrating the jMetal framework inside it.