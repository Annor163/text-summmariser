@&#MAIN-TITLE@&#
Robust feedforward and recurrent neural network based dynamic weighted combination models for software reliability prediction

@&#HIGHLIGHTS@&#
We propose robust feedforward and recurrent neural network based dynamic weighted combination models.We combine four software reliability growth models by dynamically evaluated weights.We propose genetic algorithm based learning algorithm to train the proposed ANNs.Experimental results demonstrate that proposed models have fairly accurate predictability.PRNNDWCM has best software reliability prediction capability.

@&#KEYPHRASES@&#
Software reliability growth model,Dynamic weighted combination model,Artificial neural network,Genetic algorithm,Reliability prediction,

@&#ABSTRACT@&#
Traditional parametric software reliability growth models (SRGMs) are based on some assumptions or distributions and none such single model can produce accurate prediction results in all circumstances. Non-parametric models like the artificial neural network (ANN) based models can predict software reliability based on only fault history data without any assumptions. In this paper, initially we propose a robust feedforward neural network (FFNN) based dynamic weighted combination model (PFFNNDWCM) for software reliability prediction. Four well-known traditional SRGMs are combined based on the dynamically evaluated weights determined by the learning algorithm of the proposed FFNN. Based on this proposed FFNN architecture, we also propose a robust recurrent neural network (RNN) based dynamic weighted combination model (PRNNDWCM) to predict the software reliability more justifiably. A real-coded genetic algorithm (GA) is proposed to train the ANNs. Predictability of the proposed models are compared with the existing ANN based software reliability models through three real software failure data sets. We also compare the performances of the proposed models with the models that can be developed by combining three or two of the four SRGMs. Comparative studies demonstrate that the PFFNNDWCM and PRNNDWCM present fairly accurate fitting and predictive capability than the other existing ANN based models. Numerical and graphical explanations show that PRNNDWCM is promising for software reliability prediction since its fitting and prediction error is much less relative to the PFFNNDWCM.

@&#INTRODUCTION@&#
Computer plays an essential role in our modern civilization. Computer systems are managed by software and hence software should be reliable and fault free. Perfect measurement of software reliability has become one of the most important tasks for development of good quality software. According to ANSI definition, software reliability is defined as the probability of failure-free software operation for a specified period of time in a specified environment [1,4]. Software reliability is the most important quality metric. One can estimate the duration of software testing period by measuring software reliability. Software reliability prediction plays a vital role in today's rapidly growing complex software development process. In the last three decades, many SRGMs have been proposed in the literature to predict the relationship between software failure and time. The software reliability models can be divides into parametric and non-parametric model. In parametric models, the model parameters are estimated based on the assumptions about the behavior of the software faults, failure processes and development environments. The most well-known parametric models are the nonhomogeneous Poisson process (NHPP) based SRGMs [9–18]. However, it has been shown that none single model can produce accurate prediction results in all circumstances [19]. On the other hand, non-parametric model like the ANN based model comprise the flexibility to predict software reliability based on only fault history data without any assumptions of the parametric model. It has been exposed that ANN based non-parametric models can produce better predictive quality than the parametric models [6–8,24]. Different types of FFNNs and RNNs have been applied to predict cumulative number of detected faults where the software execution time is used as the input to the network. Several approaches have been developed to combine various existing software reliability models to produce a dynamic weighted combination model whose prediction accuracy is much better than the component models [7,20,21].In this paper, firstly we propose a robust FFNN based dynamic weighted combination model for software reliability prediction. The PFFNNDWCM is constructed by combining the traditional SRGMs. The SRGMs are merged based on the dynamically evaluated weights determined by the training algorithm of the FFNN. In this study, we select four well-known traditional parametric SRGMs to develop the PFFNNDWCM. Based on this proposed FFNN architecture, we also propose a robust RNN based dynamic weighted combination model for more accurate prediction of software reliability. We construct the proposed FFNN and RNN by using different activation functions for hidden layer neurons of the ANNs. Cumulative software execution time is the input and the predicted cumulative number of software failures is the output of the proposed networks. We propose the RNN modeling approach to learn the temporal patterns of the failure data dynamically which has a significant impact on network prediction performance. We propose a real-coded GA based learning algorithm to train the proposed ANNs using the software failure data sets by globally optimizing the weights and parameters of the ANNs. We compare the performances of the proposed models with the existing ANN based dynamic weighted combination model [7] and ANN ensemble model [8] in the software reliability literature. The proposed models are also compared with the models that can be derived by using three or two of the selected four models. We explain the fitting and predictability of the different models through three real software failure data sets.The rest of the paper has been organized in the following way: Section 2 introduces some related works about the application of ANNs in software reliability prediction. Section 3 presents the proposed FFNN and RNN based modeling approach for the development of the dynamic weighted combination models for software reliability prediction. In Section 4, we propose GA based learning algorithm to train the proposed FFNN and RNN. Section 5 describes the nature of the software failure data sets used in the experiments. Section 6 describes the model comparison criteria which are used to compare the prediction performance of the different models. Section 7 shows the experimental results based on the three real software failure data sets and some conclusions are drawn in Section 8.This section describes some related works where ANNs [2] have been applied in software reliability modeling and prediction. Karunanithi et al. [6,22] first proposed ANNs to predict the software reliability by using the execution time and the cumulative number of detected faults as the input and the desired output of the network, respectively. Sitte [23] compared the predictive capability of two different software reliability prediction methods: neural networks and recalibration for parametric models. Khoshgoftaar and Szabo [25] applied ANN to predict the number of faults in programs during testing. Cai et al. [26] proposed the back-propagation algorithm based ANN for software reliability prediction and used the recent 50 inter-failure times as input to predict the next failure time. Ho et al. [27] proposed a modified RNN for modeling and prediction of software failures. Tian and Noore [28,29] proposed an evolutionary ANN modeling approach to predict the software cumulative failure time based on multiple-delayed-input single-output architecture. Su and Huang [7] proposed an ANN based dynamic weighted combination model for software reliability prediction. Hu et al. [30] applied RNNs to model fault detection and fault correction processes together. Kiran and Ravi [31] proposed a non-linear ensemble-based approach for software reliability prediction. Kapur et al. [32] applied ANN methods to build SRGMs considering faults of different complexity. Zheng [8] used the ensemble of ANNs to predict software reliability. Kapur et al. [33] presented a new dimension to build an ensemble of different ANN for complex software architectures to improve the estimation accuracy. Li et al. [20] proposed adaboosting-based approaches for combining the parametric SRGMs to significantly improve the estimating and forecasting accuracy. Wu et al. [21] proposed a dynamically-weighted software reliability combination model to improve the predictive quality. Mohanty et al. [34] proposed novel recurrent architectures for genetic programming and group method of data handling to predict software reliability.We know that none single SRGM can be trusted to produce accurate prediction results in all circumstances. Here, we propose FFNN and RNN-based dynamic weighted combination models which combine the traditional SRGMs to form a dynamic weighted combination of software reliability models.We consider four well-known traditional statistical SRGMs namely, Goel–Okumoto model [9], Yamada delayed s-shaped model [16], inflection s-shaped model [14] and logistic growth curve model to develop the dynamic weighted combination models which can combine the SRGMs based on the dynamically assigned weights determined by the training of the proposed ANNs.The mean value function of the selected four SRGMs are given in Table 1.PFFNNDWCM is constructed as shown in Fig. 1to develop the dynamic weighted combination model by combining the selected four SRGMs. The proposed FFNN has one hidden layer with single neuron in each of the input and output layers. The hidden layer consists of four neurons representing the four SRGMs to be combined.The cumulative software execution time (ti) is the input of the FFNN and output of the FFNN is the predicted cumulative number of software failures (yi′), where i is the cumulative software execution time sequence index. We use 1−e−x, 1−(1+x)e−x, (1−e−x)/(1+a1e−x) and 1/(1+b1e−x) as the activation functions for the four hidden layer neurons of the proposed FFNN. Here, the activation functions used for hidden layer neurons are developed according to the mean value function of the selected SRGMs. Linear activation function f(x)=x is used in the output layer neuron of the ANN. Hence, the output of the FFNN can be evaluated as follows:(1)yi′=w5(1−e−w1ti)+w6(1−(1+w2ti)e−w2ti)+w7(1−e−w3ti)1+a1e−w3ti+w81+b1e−w4tiwherewj(>0), j=1, 2, …, 8, are the weights of the FFNN and their values are determined by the training algorithm. Here, a1 and b1 (a1, b1>0) are activation function parameters whose values are also evaluated through the learning of the proposed FFNN.In this PFFNNDWCM, we merge different traditional exponential and s-shaped SRGMs based on the proposed FFNN approach and the weights of each model are determined dynamically by training the FFNN according to the characteristics of the selected failure data sets.RNN is a feedback ANN in which the current output/state is a function of the previous output/state and the current input. RNN includes the dynamic temporal property internally, which have great impact on network prediction performance. RNN has the advantage in feedbacking the data generated by the network to be used in future iterations and the feedback path enables the network to learn temporal patterns/sequences dynamically.We consider that the cumulative number of failures at time tiis a function of the cumulative number of failures at time ti−1 and the current execution time ti, i.e.yi′′=f(yi−1′′,ti). We need to forecastyi′′by use ofyi−1′′. We construct the PRNNDWCM which has the feedback path from the output layer to the hidden layer via the recurrent neuron denoted by R as shown in Fig. 2.Similar to the FFNN modeling, the cumulative software execution time (ti) is the input of the RNN and the predicted cumulative number of software failures (yi′′) is the output of the RNN. We apply the activation functions 1−e−x, 1−(1+x)e−x, (1−e−x)/(1+a2e−x) and 1/(1+b2e−x) in the four hidden layer neurons and linear activation function in the output layer neuron of the RNN. The RNN has feedback path from the output of the network to the input of the output layer neuron by which it can recognize the cumulative number of failures in execution time ti−1. The feedback path allows the network to employ the previous output of the network in the current state of the network. Here,w9′is the feedback weight determined by the training algorithm. The output of the RNN is given as follows:(2)yi′′=w5′(1−e−w1′ti)+w6′(1−(1+w2′ti)e−w2′ti)+w7′(1−e−w3′ti)1+a2e−w3′ti+w8′1+b2e−w4′ti+w9′yi−1′′wherewj′>0,for j=1, 2, …, 9 and a2, b2>0.The values of all the weights and parameters of the RNN are determined by the learning algorithm and the four SRGMs are combined based on these dynamically evaluated weights in accordance with the failure data used to train the RNN. This PRNNDWCM has the capability of incorporating the cumulative number of failures in previous state/execution time, which immensely control the predictive power of this model.The PFFNNDWCM and PRNNDWCM of software reliability modeling are trained by a proposed real-coded GA [3] which is a robust evolutionary optimization search technique modeled from natural genetics to find global optimal solution.We apply real-coded GA to encode the weights and parameters of the proposed FFNN and RNN as chromosomes. The chromosomal encoding of the weights and parameters of the FFNN and RNN are given by[w1w2w3w4w5w6w7w8a1b1]and[w1′w2′w3′w4′w5′w6′w7′w8′w9′a2b2], respectively. The hidden layer activation function parameters of the proposed FFNN and RNN are also combined with the weights of the ANNs in the chromosomal representation to be evaluated by the proposed GA. Each weight and parameter of the ANNs is represented by a gene of the chromosomes.Here, the fitness function of the proposed GA is the network error function which is to be minimized. We use normalized root mean square error (NRMSE) generated by the ANN as the error function as follows:(3)NRMSE=∑i=1n(mi−yi)2∑i=1nyi2where n is the number of data points used to train the ANN, yiis the actual value and miis the predicted value generated by the ANNs for the ith data point in the software failure data set. The values of NRMSE are minimized by the proposed GA during learning of the each network.Tournament selection process is used for selection of the parent chromosomes from the population to be involved in reproduction processes such as crossover, mutation. After selection, arithmetic crossover and uniform mutation operations are performed on the selected parent chromosomes to reproduce more fit individuals/chromosomes, i.e. offsprings with higher fitness value. More better solution can be achieved as the generation number of the GA increases. The GA will be stopped when the desired stopping criteria has been satisfied.Because of the stochastic nature of GA, 100 trials have been performed for 1000 generations as the maximum number of generations in each trial and the best solution from among the 100 trials is considered as the final optimal solution.GA implementation for training of FFNN and RNN for software reliability prediction:The proposed real-coded GA to train the PFFNNDWCM and PRNNDWCM is described below:Step 1: Initialize the parameters of the GA as follows:population_size=40, crossover_rate=0.9, mutation_rate=0.01 and max_gen=1000, where max_gen represents the maximum number of generations.Step 2: Set gn=1, where gn denotes the current generation number.Step 3: Encode the weights and parameters of the ANN into chromosome.Step 4: Generate the initial population by initializing the chromosomes for the population.Step 5: Evaluate the fitness value of each chromosome in the population by considering the fitness function (3).Step 6: Select parent chromosomes from the population by tournament selection process of size 3.Step 7: Apply arithmetic crossover and uniform mutation operations on the selected parent chromosomes with the crossover_rate and mutation_rate, respectively, to produce offsprings with higher fitness value.Step 8: If the termination criteria is satisfied, go to step 11.Step 9: Increase gn by unity.Step 10: Go to step 5.Step 11: Evaluate the fitness value of each offspring in the population.Step 12: Return the chromosome with best fitness value (which is the optimal setting of the weights and parameters for the ANN).Step 13: Stop.Software failure may occur during the testing process due to the hidden faults in the software. The software failure data are normally arranged in pairs {ti, yi} where yiis the cumulative number of failures in the software execution time tiand i is the cumulative software execution time sequence index. The objective of software reliability prediction is to accurately predict the number of failures in the future execution time based on the historical software failure data. In this experiment, three real software failure data sets DS1, DS2 and DS3 are used to check the performance and validity of the PFFNNDWCM and PRNNDWCM. The description of the data sets are given below.•Data Set-1(DS1): This data set was reported by Musa [5] based on the 136 failures observed from a real-time command and control system with 21,700 assembly instructions.Data Set-2(DS2): This data set was collected (Musa et al. [5]) from a military application with 61,900 instructions and 38 failures.Data Set-3(DS3): This data set by Lyu [1] was collected from a single-user workstation with 397 failures.The cumulative software execution time (ti) and the cumulative number of failures (yi) of each data set are normalized in the range of [0, 1] before feeding to the ANNs.Some meaningful performance comparison criteria are needed to compare the fitting and predictive powers of the different ANN based software reliability models under consideration. In this experiment, we adopt the variable-term prediction and end-point prediction approaches.The fitting performance of an ANN based software reliability model demonstrates how much fit the model to the software failure data. To evaluate the fitting performance, first the ANN is trained using a part of the failure data (training data). The trained ANN is then used to estimate the same failure data which was used to train the ANN. The estimated failure number miat the execution time tiis compared with the actual failure number yifrom the data set. The fitting performance of an ANN based model is measured in terms of the relative error (RE) and average error (AE) as follows:(4)REi=mi−yiyi×100(5)AE=1n∑i=1nREiwhere n is the number of data points used to train the ANN and to be estimated.In this approach, only part of the failure data is used to train the ANN. Then, the trained ANN is used to predict the rest of the failure data. The predicted failure number miat the execution time tiis compared with the actual failure number yifrom the data set. The variable-term predictability of a model is measured in terms of the relative error (RE) and average error (AE) as follows:(6)AE=1p∑i=1pREiwhere p is the number of data points to be predicted.The end-point prediction is determined by assuming that x failures have been observed at the end of the testing time txand using the available failure data upto time te(te≤tx) to predict the number of failures at the time tx. We apply different sizes of training patterns to train the ANN. In the trained ANN, we employ the end of the testing time txas input to predict the number of failures at the time tx. The predicted value is compared with the actual value x. Predictive validity can be checked by RE for different values of te[4].The performances of the PFFNNDWCM and PRNNDWCM are compared with the ANN based dynamic weighted combinational model (DWCM) [7] and the neural network ensembles model (NNEM) [8] in the software reliability literature. We also compare the fitting performance and predictability of the proposed models with the software reliability models that can be developed by combining three or two of the selected four SRGMs. The number of possible combinations isC34+C24=10. Here, for performance analysis, we only choose the following five combinations from the 10 combinations:GYI,YIL,GY,YI,ILThere are FFNN and RNN based models possible for each of the above combinations. We represent FFNN and RNN based such models as FFNNM and RNNM, respectively. All of these models are trained by the proposed GA.DWCM has one hidden layer with three neurons. NNEM contains 19 component ANNs with median combination rule and each ANN is a three-layer single-input single-output FFNN with five hidden neurons. There is no activation function parameter for the hidden layer neurons of the DWCM and NNEM.Table 2demonstrates the fitting performance of the different models under comparison in terms of AE for different normalized execution time (NET) values of DS1.From Table 2, we observe that PFFNNDWCM has smallest AE value only at NET 0.8. So PFFNNDWCM has best fitting power in only that execution time. It means that PFFNNDWCM do not provide good fitting performance in DS1. Again, PRNNDWCM provides relatively better fitting performance than PFFNNDWCM as PRNNDWCM has lowest AE values for NETs 0.2, 0.6, 0.9 and 1.0. Hence, PRNNDWCM provides best fitting capability at the NETs 0.2, 0.6, 0.9 and 1.0. We can also see that DWCM has best fitting power in the NETs 0.1, 0.3, 0.4, 0.5 and 0.7. The fitting power of the PFFNNDWCM improves when the execution time increases from 0.1 to 0.8. Fitting capability of the PRNNDWCM increases with the growth of execution time from 0.4. It is very clear from Table 2 that the software reliability models that are developed by combining three of the four SRGMs, i.e. RNNMGYI, FFNNMGYI, RNNMYIL and FFNNMYIL have better fitting performance than the models that are developed by combining two of the four SRGMs, i.e. RNNMGY, FFNNMGY, RNNMYI, FFNNMYI, RNNMIL and FFNNMIL. Hence, higher fitting performance is achieved by increasing the number of models to be combined. It is also noted that the fitting power of the RNN based model is always better than the FFNN based model for each of the combinations under consideration. The fitting performance of the PRNNDWCM and PFFNNDWCM are always much better than the RNNMGYI, FFNNMGYI, RNNMYIL, FFNNMYIL, RNNMGY, FFNNMGY, RNNMYI, FFNNMYI, RNNMIL and FFNNMIL for all NET values.Table 3shows the variable-term prediction in terms of AE and Table 4shows the end-point prediction in terms of RE for different NET values that varies from 0.1 to 0.9.Table 3 demonstrates that the proposed models have better predictability than the DWCM and NNEM. PFFNNDWCM has the smallest AE value at the NET 0.5. So PFFNNDWCM has the best predictive power at the NET 0.5. The AE values of the PRNNDWCM are smallest among the AE values of the models under comparison except at NET 0.5. Hence, it is obviously noted that PRNNDWCM has the overall better predictive capability than the PFFNNDWCM which proves the outstanding ability of the RNN in software reliability prediction. The predictive powers of the proposed models are improved with the growth of execution time from 0.3. From Table 3, it is also clear that the predictive capability of the RNNMGYI, FFNNMGYI, RNNMYIL and FFNNMYIL are better than the RNNMGY, FFNNMGY, RNNMYI, FFNNMYI, RNNMIL and FFNNMIL. So higher predictability can be achieved by increasing the number of models to be combined. It is obvious that for all of the combinations under consideration, the RNN based model has always better predictive power than the FFNN based model. For all NETs, the PRNNDWCM and PFFNNDWCM demonstrate enhanced predictive accuracy than the models that can be developed by combining three or two of the four SRGMs.From Table 4, we observe that the proposed models have much better end-point prediction capability than the DWCM and NNEM. PFFNNDWCM has the best end-point predictive power at the NET 0.2. PRNNDWCM has the overall better end-point prediction ability than the PFFNNDWCM as the RE values of the PRNNDWCM are smallest among the RE values of the other models under consideration except at NET 0.2. The end-point predictive powers of the proposed models are increased with the growth of execution time. Table 4 also proves that the proposed RNN has the best software reliability prediction capability than the FFNN. It is clearly visible that the models that are developed by combining three of the four models have better end-point predictive capability than the models that are developed by combining two of the four models. Hence, higher end-point predictability can be achieved by increasing the number of component models to be combined. It is also clear that the RNN based model has better end-point predictive power than the FFNN based model for all of the combinations under consideration. It is obvious that for all NETs, the PRNNDWCM and PFFNNDWCM have better end-point predictive capability than the RNNMGYI, FFNNMGYI, RNNMYIL, FFNNMYIL, RNNMGY, FFNNMGY, RNNMYI, FFNNMYI, RNNMIL and FFNNMIL.Fig. 3shows the prediction curve of the PRNNDWCM which has the best predictive capability among the models under consideration for DS1.From Fig. 3, we find that the PRNNDWCM has the excellent prediction ability compared to the observed values from the data set DS1.The relative prediction error (RPE) curves of the different models under comparison are shown in Fig. 4. Here, we only compare the proposed models with the DWCM and NNEM as we have already seen from Tables 2–4 that the performances of the PRNNDWCM and PFFNNDWCM are always much better than the models that can be constructed by combining three or two of the selected four SRGMs.From Fig. 4, we see that the proposed models have smaller RPEs than the DWCM and NNEM. It is also noted that the PRNNDWCM has much lesser RPE than the other models which again establishes the excellent software reliability predictive power of the proposed RNN.Now the PRNNDWCM and PFFNNDWCM are only compared with the DWCM and NNEM as it is obvious from the experimental results for DS1 that the proposed models have always superior fitting and predictive accuracy (for all NET values) than the software reliability models that can be developed by combining three or two of the selected four SRGMs.Table 5shows the fitting performance of the different software reliability models under comparison in terms of AE for different NET values of DS2.From Table 5, we can observe that the proposed models have better fitting capacity than the DWCM and NNEM in DS2. Again, all AE values of the PRNNDWCM are smallest among the AE values of the different models under consideration. Hence, PRNNDWCM has the best fitting power in DS2. The fitting capability of PFFNNDWCM are improved with the growth of execution time from 0.4.Table 6shows the variable-term prediction in terms of AE and Table 7shows the end-point prediction in terms of RE for different NET values of DS2.Table 6 demonstrates that the proposed models have better predictive power than the DWCM and NNEM. The PRNNDWCM has the best software reliability prediction ability because of its minimum AE values compared to the other software reliability models. Hence, it is also proved for DS2 that the proposed RNN has the best software reliability predictive power than the FFNN. The predictive power of the PFFNNDWCM is increased as the execution time is raised from 0.5. PRNNDWCM shows increasing prediction capability from the NET 0.7.From Table 7, we observe that the proposed models have much better end-point predictive power than the DWCM and NNEM. PFFNNDWCM has the best end-point prediction capability at the NET 0.1. The RE values of the PRNNDWCM are smallest among the RE values of the models under comparison except at NET 0.1. Hence, it is easily seen that the PRNNDWCM has the overall best end-point predictive performance than the other models.Fig. 5shows the prediction curve of the PRNNDWCM for DS2.From Fig. 5, we find that the PRNNDWCM has excellent prediction capability compared to the observed values from the data set DS2.The RPE curves of the different models under consideration are shown in Fig. 6.From Fig. 6, we see that the proposed models have smaller RPEs than the DWCM and NNEM. The PRNNDWCM has the smallest RPE than the other models which again establishes that the proposed RNN has the best software reliability prediction capability than the FFNN.Table 8shows the fitting performance of the various software reliability models under comparison in terms of AE for different NET values of DS3.From Table 8, we observe that the proposed models have better fitting accuracy than the DWCM and NNEM in DS3. All AE values of the PRNNDWCM are smallest among the AE values of the different models under consideration. Hence, the PRNNDWCM has the best fitting power in DS3 also. The fitting power of the PFFNNDWCM are improved with the growth of execution time from 0.7. PRNNDWCM shows increasing fitting accuracy with the growth of NET from 0.5.Table 9shows the variable-term predictability in terms of AE and Table 10shows the end-point prediction of software reliability in terms of RE for different NET values of DS3.Table 9 demonstrates that the proposed models have better software reliability prediction capability than the DWCM and NNEM. PFFNNDWCM has the smallest AE values in the NETs 0.3, 0.6 and 0.7. So PFFNNDWCM has the best predictive power at the NETs 0.3, 0.6 and 0.7 of DS3. The PRNNDWCM has the best predictive power at the NETs 0.1, 0.2, 0.4, 0.5, 0.8 and 0.9 because of its lowest AE values in that execution times. We can find that the PRNNDWCM has the overall better predictive capability than the PFFNNDWCM. The predictive power of the PFFNNDWCM is improved with the growth of NET from 0.4. PRNNDWCM shows increasing prediction accuracy with the rising execution time.From Table 10, we observe that the proposed models have much better end-point prediction capability than the DWCM and NNEM. PFFNNDWCM has the best end-point predictive power at the NETs 0.4 and 0.8. PRNNDWCM has the overall better end-point prediction ability than the PFFNNDWCM as the RE values of the PRNNDWCM are smallest among the RE values of the models under consideration except at NETs 0.4 and 0.8. The end-point predictive power of the PFFNNDWCM is increased with the growth of execution time.Fig. 7shows the prediction curve of the PRNNDWCM which has the best software reliability prediction capability among the models under consideration for DS3.From Fig. 7, we conclude that the PRNNDWCM has the outstanding prediction ability compared to the observed failure data from DS3.The RPE curves of the different models under comparison are shown in Fig. 8.From Fig. 8, we conclude that the proposed models have lower RPEs than the DWCM and NNEM. We also conclude that the PRNNDWCM has much lower RPE than the other models which conforms the fact that the proposed RNN can be a better software reliability predictor than the FFNN.

@&#CONCLUSIONS@&#
