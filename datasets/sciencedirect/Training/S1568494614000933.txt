@&#MAIN-TITLE@&#
Application of cellular automata and type-2 fuzzy logic to dynamic vehicle path planning

@&#HIGHLIGHTS@&#
To fulfill the real-time turnaround time requirement of path planning, this research proposes a novel dynamic optimal path planning method.The concept of the cellular automata is used to collect the real-time road conditions and derives the appropriate paths for users.A type-2 fuzzy logic inference system is employed for path analysis for each cell established in the cellular automata algorithm.The proposed work makes use of the hierarchical structure and the concept of the cellular automata to reduce the computational complexity.

@&#KEYPHRASES@&#
Optimal path planning,A* Search algorithm,Fuzzy logic,Cellular automata,

@&#ABSTRACT@&#
Nowadays, most road navigation systems’ planning of optimal routes is conducted by the On Board Unit (OBU). If drivers want to obtain information about the real-time road conditions, a Traffic Message Channel (TMC) module is also needed. However, this module can only provide the current road conditions, as opposed to actually planning appropriate routes for users. In this work, the concept of cellular automata is used to collect real-time road conditions and derive the appropriate paths for users. Notably, type-2 fuzzy logic is adopted for path analysis for each cell established in the cellular automata algorithm. Besides establishing the optimal routes, our model is expected to be able to automatically meet the personal demands of all drivers, achieve load balancing between all road sections to avoid the problem of traffic jams, and allow drivers to enjoy better driving experiences. A series of simulations were conducted to compare the proposed approach with the well-known A* Search algorithm and the latest state-of-the-art path planning algorithm found in the literature. The experimental results demonstrate that the proposed approach is scalable in terms of the turnaround times for individual users. The practicality and feasibility of applying the proposed approach in the real-time environment is thus justified.

@&#INTRODUCTION@&#
In the past, when people were bound for unfamiliar locations, they first had to find the destination and identify their current location on a map, and then searched for a suitable path to take. Recently, with rapid advances in the development of web-based geographical information systems (WebGIS), numerous free geographical information services are accessible on the Internet, such as Google Maps, TomTom, PaPaGo, etc. These GISs provide useful information such as satellite imagery, vector mesh routing and address positioning. Accordingly, users can acquire a wealth of information by merely clicking the mouse. However, although On Board Units (OBU) currently found in vehicles claim to provide “real-time” navigation functionality, a traditional Traffic Message Channel (TMC) is still utilized to acquire the road information via data fusion techniques, and traditional static path planning strategies still lack the precision and reliability to fully meet users’ real-time requirements.Vehicular navigation systems can be classified as either static navigation or dynamic navigation based on the type of information used in the algorithms. Static navigation plans routes with preloaded graphic information and topology, while dynamic navigation changes routes dynamically to fit traffic conditions and network topology. Hence, dynamic navigation needs to rely on an information exchange center to collect traffic data, and it can be observed that dynamic navigation is more tolerable to the variations of traffic flows.The architecture of a navigation system can be designed for either autonomous navigation or centralized navigation [1]. The greatest difference between the two is whether or not there is a service center responsible for implementing path planning for all cars. In autonomous navigation, a planner in a vehicle carries out path planning based on data stored in the vehicle or data received from the information center. In centralized navigation, the service center receives applications from vehicles, conducts path planning, and then sends the results back to applicants. It has been found that road utilization is higher and the cost for vehicle equipment is lower in centralized navigation. Thus, it can be expected that this kind of navigation architecture will be widely deployed in the future, although this will come at the cost of increasing the traffic load on wireless communications.Researchers have devised various algorithms to deal with path planning problems in the past. These can be classified into four kinds of shortest path problems, including Single-Pair Shortest-Path (SPSP), Single-Source Shortest-Paths (SSSP), All-Pairs Shortest-Paths (APSP), and Single-Destination Shortest-Paths (SDSP). In terms of solutions for the above-mentioned four kinds of problems, the Bi-directed method [2] can solve a SPSP problem; Dijkstra [3] proposed the shortest path algorithm to solve a SSSP problem; and Floyd [4] and Warshall [5] solved APSP and SDSP problems, respectively.There are a lot of solutions dealing with shortest path problems between two single nodes in the literature. Among them, A* algorithm [6] is one of the most effective ones. By this algorithm, the optimal path is obtained by computing the minimum path length from every node to the destination. As for multiple shortest path algorithms, it was reported that the kth shortest path algorithm developed in 1984 by Martins et al. [7] is 20 times faster than the traditional Dreyfus’ algorithm in searching the 20th shortest path while the number of nodes reaches 1000.Ding et al. [8] presented a real-time infrastructure-free route guidance algorithm called Vehicle-to-Vehicle Real-time Routing (V2R2). Although using the V2R2 algorithm can reduce the cost of the establishment and maintenance of infrastructure, it suffers from a lack of scalability. Besides, load balancing cannot be achieved by this algorithm because it attempts to avoid the disconnection problem by ignoring the routes with no traffic load. Recently, Li et al. [9] combined the hierarchy traits of road networks with the path planning algorithms known as the Graph Voronoi Diagram [10] and HSR-Based Route Planning [11]. This hierarchical Voronoi graph-based route planning algorithm [9] utilizes the characteristics of the road network hierarchy to reduce the searching time and the expanded node number of routes searched. However, as mentioned in [12], if a car accident occurs along the route generated by the shortest path algorithm, this planned path cannot be used at all. A road network database was adopted in [12] to store all paths that had been computed in the past. When a car accident occurs, the situation will be immediately updated in the road network database, and case-based reasoning is used to locate the path in the database by examining if the origin and the destination are the same as the data stored in the database. However, this method still needs to take into consideration the road status at different times or different locations, or else it cannot meet the requirements of path planning for every source/destination combination.With the increasing demand for real-time information, dynamic path planning has become an essential research issue. For instance, Kanoh et al. [12] presented a solution which utilizes a genetic algorithm (GA) to solve dynamic path planning problems. Anwar [13] claimed that the shortest routes computed by existing algorithms in the literature are not optimal. Traffic accidents in real life often cause planned minimum-length paths to become useless. Therefore, Structured Query Language (SQL) was utilized in [14] to record the real-time road traffic information when traffic accidents occur. Simultaneously, case-based reasoning was used to record the previous planned data in the database. When the same path planning problem presents itself, it can be processed faster, without computation, again. However, actual traffic conditions still need be considered to assess whether the previously planned path can still meet the requirements of users, taking into account other factors. Moreover, a knowledge-based approach is adopted to reduce searching coverage. Features of road networks, such as railway crossings or bridges, are classified based on a hierarchy, and the resulting links are searched sequentially. Thus, a network can be segmented into several sub-networks and then Dijkstra's [3] shortest path algorithm is run in the sub-networks to decrease the number of computations. Furthermore, Huang et al. [15] attempted to improve the lifelong planning A* algorithm (LPA*) to solve path planning problems in a dynamic environment. With this method, linear distances from insert vertex to goal vertex and start vertex to goal vertex are considered. Minimum Bounded Rectangle (MBR) was utilized to eliminate unnecessary nodes in order to save searching space. Meanwhile, the planned shortest paths were recorded and the portions of related paths were computed when their path weights changed. However, computing time for both Dijkstra's algorithm and the A* algorithm drastically increase with graph scale and variation of a dynamic graph.Cellular automata are made up of cells like points in the lattice, and follow a simple rule [16]. They include large numbers of simple identical components with local interactions. Cellular automata can not only perform complex computations with a high degree of efficiency and robustness, but can also be addressed as massive collections of simple objects interacting locally with each other [17]. Each cell can assume a state from a finite set, changing its state simultaneously in discrete time steps according to a local transition rule. The new state of each cell depends on its previous state, as well the state of its adjacent cells [18]. Cellular automata have been used to develop a wide variety of complex systems in the real world, owing to their simple mathematical constructs and distinguishing features. For example, a method for spatial electric load forecasting using a reduced set of data was presented in [19]. The method used a cellular automata model for the spatiotemporal allocation of new loads in the service zone. The approach was tested in a real system in a mid-size city, showing good performance. Cheng et al. [20] proposed a cellular automata-based approach for clustering the interests of car drivers, increasing the lifetime of interest groups, and increasing the throughput in vehicle-to-vehicle environments. Simulation results revealed the strengths of the proposed cellular automata clustering algorithm in terms of increased group lifetime and throughput for vehicular networks. Tonguz et al. [21] introduced a new cellular automata approach to construct an urban traffic mobility model. Based on the developed model, characteristics of global traffic patterns in urban areas were studied. Their experimental results showed that different control mechanisms used at intersections, such as cycle duration, green split, and coordination of traffic lights have a significant effect on inter-vehicle spacing distribution and traffic dynamics.To tackle the above-mentioned problems of traditional static path planning, this research proposes a novel dynamic optimal path planning method. The concept of cellular automata is used to collect the real-time road conditions and derive the appropriate paths for users. A local server is established in each region, and hierarchical servers are employed to plan routes. The real-time road information is first collected via servers. The information is analyzed, and a suitable route is then generated for drivers. Meanwhile, current users’ driving paths in the same region are also considered in the decision making process to prevent too many most vehicles from moving on the same route.Type-2 fuzzy logic is adopted for path analysis for each cell established in the cellular automata algorithm. The concept of a type-2 fuzzy set was introduced by Zadeh as an extension of an ordinary fuzzy set [24,25]. In an ordinary fuzzy set, the membership value for each fuzzy membership function is a crisp number in the interval [0,1]; whereas the membership value for each element of a type-2 fuzzy set is also a fuzzy set in the interval [0,1]. Recently, type-2 fuzzy logic has been successfully applied to many fields in various areas of science and technology [30–32]. In [30], the type-2 fuzzy logic based impulse detector, an image processing operator, is utilized to guide impulse noise removal filters to dramatically improve their filtering performance and output images. Karnik and Mendel demonstrated how a type-2 fuzzy logic system can be used to obtain better predictions than those obtained with a type-1 fuzzy logic system [31]. John et al. used type-2 fuzzy sets to assist in the pre-processing of data for classification of sports injuries in the lower leg [32]. In addition, type-2 fuzzy logic combined with bio-inspired methods has emerged in the form of powerful optimization algorithms for solving complex problems. For example, Castillo et al. [33] presented the application of genetic algorithms, particle swarm optimization and ant colony optimization that aid in the design of optimal type-2 fuzzy controllers. Hidalgo et al. [34] proposed the use of the genetic algorithm (GA) to optimize the type-2 fuzzy inference systems that change the level of uncertainty of the membership functions to reach the optimal solution in the end, and Castillo et al. [35] offered a new design methodology of type-2 fuzzy models combined with the GA to automate the design process and further improve the results by carefully exploiting the search space. In another study, an age-structured population growth model, based on a fuzzy cellular structure, was proposed by Leal-Ramírez et al. [36]. It was not only able to estimate the percentage of occupation of the cellular space, but could also observe the occupation patterns. A type-2 fuzzy logic system [22] differs from the ordinary fuzzy set mainly in the insertion of the process of type reduction right before defuzzification in the ordinary fuzzy logic system. The type-2 fuzzy logic system was adopted in [22] to deal with the uncertainties encountered in a real-time volatile environment. The experimental results revealed that the type-2 fuzzy logic system can significantly outperform the type-1 fuzzy logic system in a volatile environment, although the type reduction stage incurred some computation overhead. Fortunately, the extra computation overhead is tolerated in a real-time environment, in large part due to the high-speed computation ability of modern computers. A series of experiments were performed in the present study in order to evaluate the performance of the proposed work. The experimental results demonstrate the feasibility and practicality of our proposed work.The remainder of this paper is organized as follows. Section 2 presents the architecture of the proposed algorithm. The performance evaluations are given in Section 3. Finally, our conclusion is contained in Section 4.The road map is first divided into different sized regions according to the road density, traffic flow, and where the area falls under the hierarchical framework, as shown in Fig. 1. Each region is managed by a regional server, whereas an upper-level regional server at a higher hierarchical level is responsible for a region with a larger scope, which is composed of several nearby regions. When a driver requests that a path be planned, the upper-level regional server will determine which regional servers should be included in this planned route. We also use a path region analyzer module, embedded with type-2 fuzzy logic, to calculate the parameters of each road condition, including average speed, the current position, and the number of vehicles on the road. We solve the path planning problem by comparing an adjustable criterion for road conditions recorded in a traffic condition database to select some appropriate paths and mark them according to their suitability level. Thus, the optimal route can be derived by applying the concept of cellular automata recursively until the source and the destination are connected. Notably, the number of hierarchical levels for the upper-level regional servers will vary with the length of the route. A greater number of higher-leveled hierarchical servers might be needed to handle the nearby macro-regions with higher traffic densities.Fig. 2shows the architecture of the proposed work, which is constructed of the OBUs, regional servers, and upper-level regional servers. Drivers located within a specific region can issue path planning requests to their governing regional server through the OBU. If the destination of a path planning request is out of the reach of the governing regional server, a route request will be sent to an upper-level regional server at a higher hierarchical level for further processing. Accordingly, each regional or upper-level regional server accepts the requests from not only the users in the area that it governs, but also from the upper-level regional servers at upper levels if a route request within the local area that the regional or upper-level regional server governs arrives.The traffic information collection module located at the OBU is responsible for informing its governing regional server of the current location and velocity of vehicles, and a dynamic navigation module regularly checks the traffic status and prompts users to change the path based on the update of the traffic status. Each regional server periodically evaluates the traffic status, including the number of vehicles and the average velocity of the vehicles on each road, and updates the latest status of all road segments in the real-time road status database, which is established at each region. The regional path planning algorithm is used to draw up the best route based on the local traffic information that the regional server maintains at the time it receives the route request from within the local region that the server governs.The flow diagram of our proposed dynamic vehicle path planning algorithm is shown in Fig. 3. Our approach manages several hierarchical servers to accomplish large-scale path planning. The path region analyzer on the server side is responsible for analyzing the route requested by users, and determining if the sever that it resides in is located at the highest hierarchical level. If the path region analyzer is at the highest level, it will collect the path planning results received from the regional servers it governs and determine the final path for the vehicle. Otherwise, it will forward the collected data to its upper level server, called an upper-level regional server, to ask for route planning. All upper-level regional path planning servers receive the paths returned from its governing regional or upper-level regional servers, and also carry out the optimal path planning. If it is the highest level server doing this, it will provide the result of the path planning to the requesting OBU. Otherwise, the request will go to a higher level server for further processing. It should be noted that each regional or upper-level regional server uses the concept of cellular automata to draw up the optimal path planning of its own. Through the division and cooperation of each regional or upper-level regional server, a nested path planning by cellular automata is accomplished.During real-time navigation, the OBU will monitor the road status of the adjacent road section. When the road status of the planned path becomes worse, or if the road status of some other path turns out to be better, the OBU will ask the regional server to re-plan each local path for the adjacent road sections. If the new path is superior to the current one, the OBU will prompt the driver to substitute the new route for the original path.The database of the real-time path planning in the regional server is used to do the dynamic optimal path planning. At the beginning of the path planning, we have already considered the actual road status along the planned path, and avoided the jammed sections. In addition, our scheme also responds to changes in a timely manner according to actual road status, and suggests the driver change the current route in the case of substitution of another better path for the original one. Comparing with traditional static path planning, our method can significantly assist drivers in making informed and efficient path planning.Notably, when users require a wide range of path planning, the traditional algorithm based on the graph theory needs to make computations for every separate section on the route. Thus, the computational complexity will increase dramatically if the coverage area of the routed path is larger. The proposed approach instead makes use of a hierarchical structure and the concept of cellular automata, so that the computational complexity can be reduced when compared with the traditional method. Moreover, in the case of multiple users, the traditional method needs to make different calculations for each user, whereas the hierarchical structure in the proposed approach can keep the previous computation results for the usage of subsequent users, and thus significantly lowers the computation complexity.In the proposed approach, the OBU includes the traffic information collection module, the dynamic navigation module, and the user interface. The traffic information collection module mainly records vehicular position and velocity, and uploads the collected data to the regional server. During the navigation, the dynamic navigation module will regularly look up the current traffic status from the regional server and prompt users to change the route according to the latest planned path. While the proposed system is operating, an OBU will regularly request the traffic information from the regional server it resides in and communicate with other vehicles. The OBU needs to transfer the information into the regional server it resides in, and saves the current traffic information in the real-time path database. Additionally, the user interface shows the result in the form of dynamic navigation and path planning.A regional server or upper level server consists of a dynamic traffic information database and a cellular automata-based regional path planning module. The dynamic traffic information database stores the current traffic information and provides it to the cellular automata-based regional path planning module that finds the optimal path.Regional servers receive the parameters from the OBUs, including average speed, current position, and the number of vehicles on the roads. As shown in Table 1, these data are stored in a real-time traffic information database to evaluate which traffic condition level these road sections should be assigned to. There are different speed limitations for the different categories of the pathways. Thus, even two cars with the same speed may be categorized into different traffic conditions depending on the type of pathway that the vehicle resides at. The system will update the latest traffic conditions of every road section and establish new dynamic map information in the form of records of road traffic condition descriptions, as shown in Table 2. Take Fig. 4as an example, where we can see that different traffic levels in the same region are marked with different colors, and the driver can easily query all traffic information immediately.The concept of the cellular automata [23] is adopted in this work to give the synchronized reports of road conditions by using regional servers distributed all over the areas, and then determine the best route based on a hierarchical framework. Each road segment forms a basic cell, and some adjacent connected cells can also be seen as upper-level cells. For example, each road segment under the regional server is a cell, and the selected road segments in the same region can form a long connected path that can also be seen as a cell in the form of an upper-level server. The operations of a cell are shown in Fig. 5. There are four kinds of statuses for a cell, including “not selected”, “selected”, “selected & connected with the source”, and “selected & connected with the destination”. All of the cells are initially marked as “not selected”. Our algorithm checks whether the traffic condition of a specific cell is better than some preset criterion. The cell is marked as “selected” if the traffic condition is satisfactory. When a “selected” cell is connected to the source, its status will be “selected & connected with the source”. In the same way, the cell will be “selected & connected with the destination” if this cell is connected to the destination. Each “selected” cell will check if the status of its neighboring cell is marked “selected & connected with the source/destination”. If its neighboring cell is connected to the source or the destination, its status will be changed to be the same as its neighboring cell. The stopping criteria are that a cell has both the status of “selected & connected with the source” and “selected & connected with the destination”. Consequently, the planned path is finished, and the regional server will provide the result to the upper-level regional server, and then the driver will receive the best planned path from the OBU. Notably, the traffic condition is repeatedly forwarded to the upper-level regional servers at different hierarchical levels, if necessary. Meanwhile, the threshold that determines if the road segment should be marked as “selected” can be dynamically adjusted if the path between the source and the destination cannot be established owing to poor traffic conditions.Fig. 6illustrates the architecture of a type-2 fuzzy logic inference system, which consists of five components, including fuzzifier, rule control, inference engine, type reducer, and defuzzifier. Notably, a type-2 fuzzy logic system [26] differs from the ordinary fuzzy set mainly in the insertion of the process of type reduction right before defuzzification in the ordinary fuzzy logic system. The basic functions of the components employed in the type-2 fuzzy logic inference system are described as follows.The function of the fuzzifier is to transform the set of crisp values which are taken as the input data of a fuzzy logic system into a set of fuzzy values. The Gaussian primary membership functions can be expressed by:(1)μA˜(x)=exp−12x−mσ2,m∈[m1,m2]where m is the mean and σ represents standard deviation.Fig. 7illustrates a type-2 fuzzy set which utilizes a Gaussian primary membership function. Notably, the embedded fuzzy sets of a type-2 fuzzy set are ordinary fuzzy sets, and the footprint of uncertainty (FOU) can be used to achieve blurring of the membership grade for each element of a type-2 fuzzy set so that the linguistic value for each membership function is not restricted to a crisp value. A type-2 fuzzy set is completely characterized by its 2-D FOU that is bound by a lower membership function (LMF) and an upper membership function (UMF) expressed by the following two equations, respectively,(2)μ_A˜(x)=N(m2,σ;x),x≤m1+m22N(m1,σ;x),x>m1+m22,(3)μ¯A˜(x)=N(m1,σ;x),x<m11,m1≤x≤m2N(m2,σ;x),x>m2,where N(m, σ;x)=exp[(−1/2)(x−m/σ)2].Let us assume that the input data of a type-2 fuzzy system is x1∈X1, x2∈X2,… and xp∈Xp, and fuzzy output sets is y∈Y. The rule of a type-2 fuzzy system is denoted as follows:Ri: IF x1 isF˜1iand x2 isF˜2i… and xpisF˜pithen y isG˜iwhereF˜ji=[μ_A˜(x),μ¯A˜(x)]denotes the jth antecedent of rule i andG˜iindicates the consequent of rule i.The inference engine is the key component of a fuzzy logic inference system. As shown in Fig. 8, the inference engine calculates a firing level, which is the weight of each fired rule, based on the input and the antecedents of the rules, and then applies these firing levels to the consequent fuzzy sets. In a type-2 fuzzy logic system, each fuzzy rule has its own firing strengths, and membership function values with different input parameters in a fuzzy rule proceed to t-norm operation to obtain firing strengths for the consequents. In general, minimum and product operators are two most commonly used t-norm operations for a fuzzy logic inference system. As illustrated in Fig. 8, upper and lower firing levels for the consequent,G˜i, can be expressed by:(4)f_i(x′)=min{μ_F˜1(x1),μ_F˜2(x2),μ_F˜3(x3)},(5)f¯i(x′)=min{μ¯F˜1(x1),μ¯F˜2(x2),μ¯F˜3(x3)},whereμ_F˜i(xi)is the lower membership function value when x=xi,μ¯F˜i(xi)is the upper membership function value when x=xi. Notably, a minimum operator is adopted in this work.In a type-2 fuzzy logic inference system, the output set corresponding to each rule is a type-2 set as well. The center-of-sets type-reduction method [27] is employed to reduce a type-2 fuzzy set to a type-1 fuzzy set [yl, yr] in order to achieve computational efficiency. The two end points, yland yr, that determine the interval set as shown above, correspond to the centroid of the type-2 interval consequent setG˜iof the ith rule. It can be shown [28] that the computation of yland yris expressed by:(6)[yl,yr]=yl_+min{∑i=1Mfi_yli/∑i=1Mfi_,∑i=1Mfi¯yli/∑i=1Mfi¯}2,yr¯+max{∑i=1Mfi¯yri/∑i=1Mfi¯,∑i=1Mfi_yri/∑i=1Mfi_}2,(7)yl_=min∑i=1Mfi_yli∑i=1Mfi_,∑i=1Mfi¯yli∑i=1Mfi¯−∑i=1M(fi¯−fi_)∑i=1Mfi¯∑i=1Mfi_×∑i=1Mfi_(yli−yl1)∑i=1Mfi¯(ylM−yli)∑i=1Mfi_(yli−yl1)+∑i=1Mfi¯(ylM−yli),(8)yr¯(x)=max∑i=1Mfi¯yri∑i=1Mfi¯,∑i=1Mfi_yri∑i=1Mfi_+∑i=1M(fi¯−fi_)∑i=1Mfi¯∑i=1Mfi_×∑i=1Mfi¯(yri−yr1)∑i=1Mfi_(yrM−yri)∑i=1Mfi¯(yri−yr1)+∑i=1Mfi_(yrM−yri)wherefi_andfi¯are firing levels as given in Eqs. (4) and (5), i=1, …,M, M is the number of fired rules, andyliandyridenote the end points of the centroids of the consequent of the ith rule. Notably,yliandyrican be derived by using the KM algorithms [29].A type-reduced set is defuzzified to get a crisp output from the type-2 fuzzy logic inference system. The defuzzified value is the average of type-reduction set as follows:(9)y(x)=yl+yr2.There are 27 inference rules generated in the Mamdani fuzzy inference system. The non-fuzzy output of the Mamdani fuzzy inference system can then be obtained by computing the centroid of area for the aggregated output membership function.This section presents an illustrative example aimed at providing a better understanding of how our proposed scheme works, and, ultimately, how it can be used. Recall that a hierarchical structure that includes a number of regions is illustrated in Fig. 1. The selected example that corresponds to one of the regions in Fig. 1 is shown in Fig. 9. Initially, each road segment is marked “not selected” as shown in Fig. 9(A), and the preset threshold for the traffic condition is set to zero. Then, the regional server where the driver resides sends the collected data, including average speed, current location, and total number of vehicles on the road, to the path region analyzer module to evaluate the road condition level. The regional server will compare the road conditions with the threshold, and the paths which are less than or equal to the threshold are marked “selected” as the paths indicated black in Fig. 9(B).Next, we check if the neighboring road segments are connected with the source or the destination. For example, if its neighboring cell is marked “selected & connected with the destination”, its status will be changed from “selected” to “selected & connected with the destination”, making it the same as its neighboring cell. Otherwise, the threshold for the traffic condition is increased, and more road segments that have acceptable road conditions will be selected and marked with gray instead, as shown in Fig. 9(C). We repeat the operation of checking the status of the neighboring road segments and increase the value of the threshold if necessary until the optimal path planning is found as shown in Fig. 9(D) and (E).Finally, we check if the paths between the source and the destination are connected or not. For example, when the status of a road segment is “selected & connected with the source” and its neighboring cell is “selected & connected with the destination”, it implies that some selected road segments are connected from the source to the destination, and vice versa. The path marked as black dashed line in Fig. 9(F) shows the result of the optimal path planning in our example. Notably, there are two optimal candidate paths as illustrated in Fig. 9 (F). Because both road conditions are similar, we take the shortest one in order to save computation time.

@&#CONCLUSIONS@&#
In this work, a cellular automata-based path planning algorithm was proposed to improve path planning efficiency. According to our experimental findings, the proposed approach, which deploys regional and macro regional servers, can plan optimal routes in an effective way. With the help of its cellular automata algorithm, our scheme can effectively lower the computation complexity, and accelerate the turnaround time required to fulfill the demands of real-time path planning. The experimental results show the effectiveness and practicability of our proposed approach, even under conditions of an increasing number of users, a wide range of road sections, and long path length planning. Although the proposed approach entails extra hardware costs for the deployment of regional servers, this expenditure is worthwhile because real-time turnaround time for path planning requests is crucial.