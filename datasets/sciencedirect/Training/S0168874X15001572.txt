@&#MAIN-TITLE@&#
A globally conforming method for solving flow in discrete fracture networks using the Virtual Element Method

@&#HIGHLIGHTS@&#
The Virtual Element method allows for meshes made up by arbitrary polygonal elements.Guaranteed local and global conformity with no alteration of the geometry of the DFN.Unconstrained fracture-independent meshing.Application of domain decomposition preconditioners.

@&#KEYPHRASES@&#
VEM,Fracture flows,Darcy flows,Discrete Fracture Networks,

@&#ABSTRACT@&#
A new approach for numerically solving flow in Discrete Fracture Networks (DFN) is developed in this work by means of the Virtual Element Method (VEM). Taking advantage of the features of the VEM, we obtain global conformity of all fracture meshes while preserving a fracture-independent meshing process. This new approach is based on a generalization of globally conforming Finite Elements for polygonal meshes that avoids complications arising from the meshing process. The approach is robust enough to treat many DFNs with a large number of fractures with arbitrary positions and orientations, as shown by the simulations. Higher order Virtual Element spaces are also included in the implementation with the corresponding convergence results and accuracy aspects.

@&#INTRODUCTION@&#
The present work deals with a new approach based on the Virtual Element Method (VEM) for the simulation of the flow in Discrete Fracture Networks (DFNs). DFN models are one of the possible approaches for simulating subsurface flows and they consist of a set of planar polygons in 3D space resembling the fractures in the underground. Each fracture is modelled individually, as opposed to continuum models with equivalent porosity, and, for geological formations with a sparse fracture network that mainly affects the flow path, this approach is recommended [1,2]. DFNs are used in a wide range of applications such as pollutant percolation, gas recovery, aquifers and reservoir analysis [3,4].Stationary flow in a DFN is modelled using Darcy׳s law and introducing a transmissivity tensor for each fracture that depends on its aperture and its resistance to flow. The surrounding rock matrix is considered impervious. The goal is to obtain the hydraulic head distribution in the system, which is the sum of the pressure head and the elevation. Fluid can only flow through fractures and across intersections between fractures, also called traces, but no tangential flow is considered along traces. The hydraulic head is a continuous function, but with discontinuous derivatives across the traces, which act as sources/sinks of flow. More complex models for the flow in the fractures can be found in the literature [5]. Since little is known about the subsurface fractures, stochastic models are used in order to determine distributions of aperture, hydrological properties, size, orientation, density, and aspect ratio of the fractures.Geometrical complexity is the greatest challenge when dealing with DFN-based simulations. Since the fracture generation has a random component, many complex situations arise that render the meshing process very complicated and sometimes impossible, e.g. very small angles, very close and almost parallel traces, high disparity of traces lengths, etc. In order to use traditional finite elements, fracture grids have to match in all the intersections between fractures, since these are discontinuity interfaces for the first order derivatives of the solution. All the aforementioned geometrical configurations complicate the meshing process and are the biggest obstacle in the discretization of the problem because it becomes very computationally demanding to obtain a good mesh from such a badly predisposed geometry. Furthermore, the meshing procedure depends on the whole DFN and is not independent for each fracture. When a large DFN is considered that can have thousands of fractures, mesh conformity requirements can lead to a very high number of elements that are far more than those demanded by the required level of accuracy. In [6], a BEM (Boundary Element Method) was applied that aims to minimize core memory usage by defining and storing only a relation between nodal fluxes and hydraulic head on traces for each fracture. The problem of obtaining a good globally conforming mesh is the subject of ongoing research. In [7], an adaptive mesh refinement method is described that aims for a high resolving mesh. Previous works [8,9] suggest a simplification of the geometry to ease meshing. Monodimensional pipes joining fractures, instead of traces, have been put forward as an alternative in [10,11]. In [12], a mixed formulation and a mesh modifying procedure were used to solve DFNs and reducing the number of elements for each fracture. Another mixed formulation was used in [13], where local corrections of traces are applied in order to obtain a globally conforming mesh. The mortar method was used to impose conditions between fractures with non-matching grids to obtain a mixed hybrid formulation in [14], with a subsequent generalization in [15] that includes trace intersections within a fracture. A novel approach was proposed in [16–19] in which the problem was reformulated as a PDE-constrained optimization. The minimization of a properly defined functional is adopted to enforce hydraulic head continuity and flux conservation at fracture intersections. Traditional finite elements (FEM) as well as extended finite elements (XFEM) were implemented to solve the problem.In this work, we aim to provide an easy, natural way for generating conforming meshes for complex DFN problems using the VEM. The proposed approach is a generalization of traditional conforming finite elements, keeping the method as simple and streamlined as possible. Some of the ideas presented here were present in a previous work by the authors [20], that introduced Virtual Elements (VEM) to DFNs. In [20] the VEM is used on locally conforming meshes and an optimization approach is adopted to handle the non-conformity of the global mesh. Here both local and global conformity are enforced, and classical approaches, borrowed from the domain decomposition methods, can be used to solve the problem. We make absolutely no assumptions on the meshing procedure, which is done independently for each fracture and without any consideration of the position of the traces. Traces are not modified in any way, and using some of the features of the VEM, local and global conformity for the mesh is obtained by means of splitting the original elements of the meshes independently generated on each fracture into polygons of an arbitrary number of vertices.Using Lagrange multipliers we obtain a hybrid system that can be solved with different methods, including FETI algorithms for domain decomposition.Section 2 provides the formulation of the DFN problem in the present context, whereas a brief summary of the VEM is reported in Section 3, and in Section 4 the proposed method is described in detail. Numerical results are presented in Section 5, where some convergence results are given and the applicability of the method to DFNs is discussed.Let us consider a set of open convex planar polygonal fracturesFi⊂R3withi=1,…,N, with boundary∂F. Our DFN isΩ=⋃iFi, with boundary∂Ω. Even though the fractures are planar, their orientations in space are arbitrary, such that Ω is a 3D set. The setΓD⊂∂Ωis where Dirichlet boundary conditions are imposed, and we assumeΓD≠∅, whereasΓN=∂Ω⧹ΓD, is the portion of the boundary with Neumann boundary conditions. Dirichlet and Neumann boundary conditions are prescribed by the functionshD∈H1/2(ΓD)andgN∈H−1/2(ΓN)on the Dirichlet and Neumann part of the boundary, respectively. We further setΓiD=ΓD∩∂Fi,ΓiN=ΓN∩∂Fi, andhiD=h|ΓiDDandgiN=g|ΓiNN. The setTcollects all the traces, i.e. the intersections between fractures, and each traceT∈Tis given by the intersection of exactly two fractures,T=F¯i∩F¯j, such that there is a one to one relationship between a trace T and a couple of fracture indexes{i,j}=I(T). We will also denote byTithe set of traces belonging to fracture Fi.Subsurface flow is governed by the gradient of the hydraulic headH=P+ζ, whereP=p/(ϱg)is the pressure head, p is the fluid pressure, g is the gravitational acceleration constant, ϱ is the fluid density and ζ is the elevation.We define the following functional spaces:Vi=H01(Fi)={v∈H1(Fi):v|ΓiD=0},ViD=HD1Fi={v∈H1(Fi):v|ΓiD=hiD},andV={v:v|Fi∈Vi,∀i=1,…,N,γT(v|Fi)=γT(v|Fj),∀T∈Ti,{i,j}=I(T)},where γTis the trace operator onto T. It is then possible to formulate the DFN problem, given by the Darcy׳s law in its weak form on the fractures with additional constraints of continuity of the hydraulic head across the traces: fori=1,…,N, findHi∈ViDsuch that∀v∈V∑i=1N∫FiKi∇Hi∇v|FidFi=∑i=1N(∫Fifiv|FidFi+〈giN,v|ΓNi〉H−12(ΓNi),H12(ΓNi)),γT(Hi)=γT(Hj),∀T∈T,{i,j}=I(T)whereKiis the fracture transmissivity tensor, that we assume is constant on each fracture. The second equation represents the continuity of the hydraulic head across traces. On each fracture of the DFN the following bilinear formai:Vi×Vi↦Ris defined as(2.1)ai(Hi,v|Fi)=∫FiKi∇Hi∇v|FidFi.This section provides a quick overview of the VEM, recalling the main features useful in the present context. We refer the reader to the original paper [21] for a proper introduction and to [22] for a guide on implementation. Further developments can be found in [23–26]. The VEM has also been applied to problems in elasticity [27], plate bending [28], the Stokes problem [29] and has sparked interest in other applications as well.Borrowing ideas from the Mimetic Finite Difference method [30,31], the VEM can be regarded as a generalization of regular finite elements to meshes made up by polygonal elements of any number of edges. The discrete functional space on each element has, in general, not only polynomial functions but also other functions that are only known at a certain set of degrees of freedom. Given a bilinear form to be approximated with the VEM, our goal is to build a discrete bilinear form that coincides with the exact one when at least one of the arguments is a polynomial. For the other cases, a rough approximation that scales in a desired way is enough to obtain the desired convergence qualities of the method.Given a domainF⊂R2, a mesh τhon F, made of polygons{E}with mesh parameter h (i.e. the square root of the maximum element area), and the space of the polynomials of maximum order k,Pk, let us define the local spaceVk,hEfor a given polynomial degree k asVk,hE={vh∈H1(E):vh|∂E∈C0(∂E),vh|e∈Pk(e)∀e⊂∂E,Δvh∈Pk−2(E)}where∂Eis the border of E, and e an edge.From the above definition it is clear that the spacePk(E)is a subset ofVk,hE. We define the following degrees of freedom for each element E:•The value of vhat the vertices of E;The value of vhatk−1internal points on each edge of E;The moments1|E|∫Evhmαfor|α|≤k−2,Let us now consider the restriction of the bilinear form (2.1) to a mesh element E,aiE(·,·). We aim at building a discrete bilinear formai,hE:Vk,hE×Vk,hE↦Rhaving the previously stated polynomial consistency, i.e. the discrete bilinear form has to coincide with the exact one when at least one of the arguments is a polynomial of maximum degree k. To this end let us consider the projector operator of order k on E:ΠE,k∇:Vk,hE⟶Pk(E)such thatΠE,k∇qk=qkforallqk∈Pk(E),defined by the equations∫E∇qk·∇vh=∫E∇qk·∇ΠE,k∇vhforallqk∈Pk(E),∫EΠE,k∇vh=∫Evh.The projectionΠE,k∇vhcan be uniquely defined starting from the degrees of freedom of vhusing integration by parts [22] and represents an orthogonality condition in the H1 inner product. The first equation defines the projection up to a constant, which is defined by the second equation. Other options for the second equation exist [26]. For order k=1, it can be taken as1Nv∑i=1NvΠE,k∇vh(Vi)=1Nv∑i=1Nvvh(Vi)whereViare the vertices of the element and Nvits number.Remark 1In the case of a more complex equation than the Laplacian (or even the Laplacian with non-constant coefficients), other projectors have to be considered [26].Let us now take any symmetric, positive definite bilinear formSi,hE:Vk,hE×Vk,hE↦R, such that there exist c0 and c1 positive constants, independent of the element E and its diameter, that verifyc0aE(vh,vh)≤Si,hE(vh,vh)≤c1aE(vh,vh)∀vh∈Vk,hEwithΠE,k∇vh=0.This implies thatSi,hEscales likeaiE(vh,vh), and then the local discrete bilinear formai,hEis set asai,hE(uh,vh)=aiE(ΠE,k∇uh,ΠE,k∇vh)+Si,hE(uh−ΠE,k∇uh,vh−ΠE,k∇vh)∀uh,vh∈Vk,hE.The first terms ensures the consistency and the second one the stability of the form. Finally, the complete discrete bilinear form becomesai,h(uh,vh)=∑E∈τhai,hE(uh,vh)∀uh,vh∈Vk,h.A possible choice for the bilinear formSi,hEis the usual Euclidean product inR#Vk,hE×#Vk,hEbetween two vectors whose components are the values of the functions at the degrees of freedom. A stiffness matrix Kiis associated to the discrete bilinear formai,h, defined as(Ki)pq=ai,h(ϕq,ϕp)forp,q=1,…,#Vk,h.In general it is not true that the VEM stiffness matrix approximates the exact stiffness matrix as if it were computed numerically.For the right hand side with load term f, it is enough for optimal convergence [22] to consider(f,vh)=∑E∈τh∫EfΠE,k−10vhfororderk=1,2,(f,vh)=∑E∈τh∫EfΠE,k−20vhfororderk≥3,whereΠE,k0is the full L2 projection on the polynomials of degree k.Mesh generation is done independently for each fracture regardless of traces and their positions. The process of mesh generation consists of three steps: the first task is the generation of a baseline triangulation of each fracture, not necessarily conforming to trace disposition, and independent on each fracture; the second step is the generation of a fracture-local conforming mesh, splitting the triangles of the baseline mesh into polygons conforming to the traces; finally on each fracture Fi, nodes are added on the tracesT∈Ticorresponding to the nodes of the intersecting fracture Fjwith{i,j}=I(T),∀T∈Ti, thus gaining global conformity. The three steps are depicted in Fig. 1, and, the second and third steps are further described in full details in the next paragraphs.Local conformity is obtained as in the previous work [20]. Every time a trace intersects an edge of the triangulation, a new node is created there. Nodes are also created at trace tips. If a trace tip is inside a triangular element, we extend the geometrical segment coinciding with the trace up to the nearest edge of the triangulation, thereby creating a new edge and a new node. The trace is not modified, being now a subset of the extended segment. By doing this, we split the original elements of the triangulation into new convex “sub-elements”, which are elements of the mesh in their own right. The end result is a mesh of polygonal elements for which all traces are covered by element edges, see Fig. 1a and b, where element colouring indicates the number of edges. A careful inspection of those subfigures reveals all of the situations described above.Remark 2An optional mesh modification has been implemented that rearranges some of the nodes of the baseline triangulation before the splitting process, so as to make them coincide with nearby traces, trace tips and trace intersections. This leads to better shaped elements and fewer DOFs for the final mesh and it is not computationally demanding.After obtaining the locally conforming mesh the subsequent step is to ensure that all the nodes on the traces are included in the meshes of both fractures that share the trace. These nodes are the ones shared by more than one fracture. This is the most important feature of the method we are proposing and takes full advantage of VEM versatility. Given a trace T shared by fractures Fiand Fj, we defineUTFias the set of all nodes on the trace T in fracture Fiand analogouslyUTFjfor Fj. The procedure used to obtain the global conforming mesh guarantees that both trace tips are included and that the discretization includes all nodes on the traces and covers it precisely. The complete trace discretization is thenUT=UTFi∪UTFj. What remains now is to simply add the set of nodesUT⧹UTFion the corresponding elements of fracture Fiand analogously for fracture Fj. This can be done since the VEM allows for elements of arbitrary number of edges and 180° angles between them. The final globally conforming mesh is shown in Fig. 1c and is identical to the previous mesh except for the new added nodes on the traces and a change in element colouring that is an indication of the increment in the number of edges and DOFs.For every fracture Fi, withi=1,…,N, we callndofithe number of DOFs of fracture Fiand we assemble the stiffness matrixKi∈Rndofi×ndofifollowing the procedure described in Section 3. Then we construct the column vectorsfi∈Rndofias the vector of load values (including terms arising from non-homogeneous boundary conditions) and hias the vector of nodal values of the discrete solution. We note that the matrix Kiis singular for fractures with pure Neumann boundary conditions. For the complete DFN we haveK=(K10⋯00K2⋯⋮⋮⋮⋱⋮0⋯⋯KN),f=(f1⋮⋮fN)andh=(h1⋮⋮hN).In order to obtain the saddle point linear system for the complete DFN we have to impose matching conditions for the nodes on the traces that guarantee the continuity condition of the hydraulic head. We do that by means of Lagrange multipliers λt, fort=1,…,ndoft. They are introduced for each node on the traces in a non-redundant way (see [32]) which means that in the case of two intersecting traces, i.e. three fractures sharing a single point in space (as in the example of Section 5.1.2), only two multipliers are added. To each indext=1,…,ndoftcorresponds a node on a trace T that is shared by fractures Fiand Fj, and we denote by dofi(t) the corresponding global DOF for node t on Fiand analogously by dofj(t) the DOF on Fj. We defineNh=∑i=1Nndofi, and the row vectorLt∈RNhas(4.1)Lt=(dofidofj0⋯010⋯0−10⋯0).Finally, we setL∈Rndoft×Nhas the matrix:L=(L1⋮⋮Lndoft).The final linear system is(4.2)[KLTL0][hλ]=[f0].This saddle point problem has a unique solution as it can be easily proven resorting to classical results of quadratic programming [33].When the dimensions of the system (4.2) are large, the use of an iterative method and of a preconditioner is advised. We briefly recall the one-level FETI method for domain decomposition as described in [34] here implemented. In this method the primal variables are determined in terms of the Lagrange multipliers. More precisely, we define a block diagonal matrix R asR=(R10⋯00R2⋯⋮⋮⋮⋱⋮0⋯⋯RN)where each sub-matrix Ri, fori=1,…,Nis such that its columns form a basis of the kernel of Ki,ker(Ki), so thatker(K)=range(R). In the case of the Laplacian operator, Ricorresponds to constant solutions for the subdomains with pure Neumann boundary conditions. Subdomains with Dirichlet boundary conditions have a unique solution and therefore have no contribution for R. It can be shown thath=K⁎(f−LTλ)+RαwhereK⁎is the pseudoinverse of K and the vector α depends on λ but not on the primal variables h. This means that if we solve a system for λ, this completely determines the solution. In order to solve this system for λ, a choice of several preconditioners is possible.We give a brief outline of the procedure to obtain the Dirichlet preconditioner for the one-level FETI, denoted M−1. Let us defineKtas the sum of transmissivity values of the fractures that share the node associated with the degree of freedom t. We first multiply the coefficient(L)t,dofi(t)byKi/Ktand the coefficient(L)t,dofj(t)byKj/Kt. This takes into account the relative weight of the transmissivity coefficient of each fracture with respect to the sum of the transmissivity coefficients of the fractures associated with that node. We collect then the new coefficients in a matrix LD. Then, for each fracture we denote by τ the set of fracture DOFs corresponding to nodes placed on the traces, and by ζ the set of the remaining DOFs and we can rearrange matrices Kito obtainK˜i=[Ki(ζζ)Ki(τζ)TKi(τζ)Ki(ττ)].The local Schur complement Siis defined asSi=Ki(ττ)−Ki(τζ)(Ki(ζζ))−1Ki(τζ)T.If we call S the block diagonal Schur complement matrix of the whole system, the Dirichlet preconditioner for the one-level FETI isM−1=LDSLDT.This is called Dirichlet preconditioner as a consequence of the fact that for each application of the preconditioner a local Dirichlet problem has to be solved. The lumped preconditioner is defined similarly asM−1=LDK(ττ)LDT,whereK(ττ)is the block diagonal matrix made up by the localKi(ττ). We note that in order to define inner products for the Preconditioned Conjugate Gradient (PCG) FETI algorithm, a symmetric, positive definite matrix Q is used [34]. In our experiments we have consideredQ=M−1.In this section we present some numerical results, beginning with convergence results for benchmark problems and VEM spaces of various orders. We also compare the results obtained with this approach to the results of a validated XFEM based method on a medium size DFN [18,19]. We conclude showing some examples of numerical instabilities arising mainly with the higher order VEM approximation spaces for certain particularly adverse geometrical configurations. All of the results were obtained using a constant transmissivity tensorK=1for all fractures.The error norms used for the convergence curves are the usualL2andH1norms. The error is computed by taking the projection of the discrete solution on the space of polynomials, since the values of the discrete solution are only known at the DOFs and are not explicitly known inside the elements (see [26]):ErrL22=∑E∈Tδ∥H−ΠE,k∇hE∥L2(E)2,ErrH12=∑E∈Tδ∥H−ΠE,k∇hE∥H1(E)2whereΠE,k∇is the projection operator of order k as defined in Section 3, H is the exact solution and hEis the discrete solution restricted to element E.The flux incoming in a fracture through the traces is computed as the jump of the conormal derivative of the discrete solution across the traces. For every trace we fix a tangential orientation and a normal unit vector obtained by clockwise rotating by 90° the tangent vector of the trace in the fracture plane. For every mesh edgee⊂T, i.e. an edge included in trace T, we consider a unique normal vectorne,iin Fiwith an orientation given by the normal vector fixed for the trace, and we define the flux incoming in the fracture Fithrough the edge e, namedue,i, as follows:uleft,e,i=∇ΠEl,k∇hE,i·ne,i,uright,e,i=−∇ΠEr,k∇hE,i·ne,i,ue,i=uleft,e,i+uright,e,i,where Eland Erare the elements to the left and to the right of the trace that share the edge e, respectively.The flux entering in the fracture Fithrough trace T is then obtained by repeating this procedure over all the mesh edges in Fibelonging to T:uT,i=∑e⊂Tue,i.TheL2error of the flux on the trace is then:ErrUL22=∥UT,i−uT,i∥L2(T)2,whereUT,iis the exact incoming flux in Fithrough trace T.This first problem has been considered before in the context of the XFEM (eXtended finite elements) [17] and of the VEM [20] as a single-fracture problem. Nevertheless, it remains interesting for the fact that it includes a trace tip inside the domain and the exact solution is known. In this work the problem is considered as a 2-fracture DFN, as shown in Fig. 2and the error calculations and convergence curves are shown for the first fracture, F1.Let us define the domains F1 and F2 asF1={(x,y,z)∈R3:−1≤x≤1,−1≤y≤1,z=0},F2={(x,y,z)∈R3:−1≤x≤0,−1≤z≤1,y=0},with a single traceT={(x,y)∈R3:y=0,z=0and−1≤x≤0}ending in the interior of F1 (Fig. 2).Exact solutions for F1 and F2 are given byH1ex(x,y)andH2ex(x,y):H1ex(x,y,z)=−cos(12arctan2(x,y))(x2−1)(y2−1)(x2+y2)H2ex(x,y,z)=−cos(12arctan2(x,y))(z2−1)(x2−1)(z2+x2)wherearctan2(x,y)is the arc-tangent function with 2 arguments, that returns the appropriate quadrant of the computed angle.The problem is then−ΔH=−ΔH1exonF1⧹T,H=0on∂F1,−ΔH=−ΔH2exonF2⧹T,H=(z2−z4)cos(π/4)on∂F2DH=0on∂F2⧹∂F2D.where∂F2D={(x,y,z)∈R3:x=0,y=0,−1≤z≤1}is the boundary of F2 with non-homogeneous Dirichlet boundary conditions.Convergence curves for the VEM of orders from 1 to 4 are shown in Fig. 3. The expected rates of convergence are obtained for orders 1 and 2, whereas a slower rate of convergence for orders 3 and 4 was obtained as a consequence of the insufficient regularity of the exact solution in the sense of Sobolev spaces.Numerical solutions for the hydraulic head H1 with the VEM of orders 1 and 2 are shown in Fig. 4(a) and (b). In Fig. 4(c) and (d), we present a comparison between the exact solution and the approximate solution of the flux incoming in F1, as well as its left and right components. Note how the approximation of the trace flux U is piecewise constant for order 1 VEM and piecewise linear for order 2 VEM, and the approximation of the exact flux (dashed line) with the VEM of second order is greatly improved.This problem shows the performance of the proposed approach in presence of trace intersections. The considered system consists of 3 fractures and 3 traces as shown in Fig. 5:F1={(x,y,z)∈R3:−1≤x≤1,−1≤y≤1,z=0},F2={(x,y,z)∈R3:−1≤y≤1,−1≤z≤1,x=0},F3={(x,y,z)∈R3:−1≤z≤1,−1≤x≤1,y=0},T1={(x,y,z)∈R3:−1≤x≤1,y=0,z=0},T2={(x,y,z)∈R3:−1≤y≤1,z=0,x=0},T3={(x,y,z)∈R3:−1≤z≤1,x=0,y=0}.Note that all of the three traces intersect in a single pointP=(0,0,0)in space (as it is always the case for the intersection of 3 planar fractures).Exact solutions are known for all fractures:H1ex(x,y)=|x|(1+x)(1−x)y(1+y)(1−y),H2ex(y,z)=y(1+y)(1−y)|z|(1+z)(1−z),H3ex(z,x)=z(1+z)(1−z)x(1+x)(1−x).Note that Hex1 and Hex2 are not C1 in the whole fracture, but, for each of the 4 subdomains defined by the traces in each fracture, they are polynomials of degree 6.The problem is then−ΔH=6|x|y(x2+y2−2)onF1⧹T1,−ΔH=6|y|z(y2+z2−2)onF2⧹T2,−ΔH=6zx(z2+y2−2)onF3⧹T3,H=0on∂F1∪∂F2∪∂F3.Convergence curves for the VEM of orders from 1 to 4 are shown in Fig. 6and solutions for order 1 and 2 are reported in Fig. 7. In contrast with benchmark problem 1, the expected convergence speed is achieved for all orders, since now the exact solution hasC∞regularity on each of the subdomains defined by the traces and the mesh for the numerical solution is conforming to the traces. This is a sufficient condition for optimal convergence rates, [35,36]. The error in the discrete solution for VEM of order 6 is∥H−h∥L22=3.53e−19,∥∂x(H−h)∥L22=5.09e−18and∥∂y(H−h)∥L22=5.85e−18, being then of the same order of the round-off error in double precision. This confirms that the discrete solution coincides numerically with the exact solution.Let us consider the DFN shown in Fig. 8consisting of 27 fractures. A sink fracture F1 and a source fracture F2 are defined, both having a non-homogeneous Dirichlet boundary conditions on one edge of their boundary and homogeneous Neumann boundary conditions on the remaining edges. All other fractures have homogeneous Neumann boundary conditions and are therefore insulated on their boundaries. In the absence of an exact solution, the difference Δ between the flux entering the system from F2 (the source fracture), “So”, and the flux leaving it from F1 (sink fracture), “Si”, is considered for assessing the quality of the obtained numerical approximation.It should be noted that the methodology presented in this work does not guarantee nor aims to have local mass conservation in each fracture, since this is not explicitly imposed on any fracture. This means that the global mass conservation is well described, but the “local” flux balances (i.e., on each individual fracture) can be somewhat less accurate. On the other hand, these fracture flux balances are expected to improve with finer meshes as the method is converging to the solution. On the whole, the method can be seen as basically solving the DFN problem in one very complex 3D domain in space, that may however still be thought as a set of bidimensional domains.Table 1shows the net flux in the source and sink fractures, Si and So, respectively, as well as the difference Δ for mesh parameters (area of the largest element of the mesh) ranging from 5 to 150 and orders of the VEM space from 1 to 4. Only orders 1 and 2 are considered on the two finer meshes.After extensive numerical experiments a trend emerged in the results; for order 1, convergence can be quite slow in the flux variable on these coarse meshes and displays oscillations, this can be attributed to the fact that the approximation of the flux is only piecewise constant and the projection of the VEM space functions for each element is onto a polynomial space of degree one, regardless of the number of edges of the element. Moving to higher order discretization spaces, the approximation of the flux improves. A marked improvement is obtained with second order VEM with respect to the first order, probably due to the piecewise linear structure of U. Further increasing the VEM order has a less noticeable effect, with practically no gain in moving to a third or fourth order approximation. In addition, higher order discretizations might suffer from numerical instabilities due to very badly shaped elements. This is for example the case for the fourth order approximation on the mesh size 15, where instabilities cause a degenerate discrete solution as shown by the parameter Δ reported in Table 1. Further details on possible cause of instabilities are discussed later in Section 5.4.Remark 3When tackling a new DFN, a good practice would be to run it the first time with a coarse mesh and first order elements. The values of h and of u already provide a reliable indication of the order of magnitude of the correct solution, and using the flux values on each fracture one can establish a rule for selecting the fractures for which a mesh refinement is advisable. Fractures with less important contribution to the total flux through the DFN do not require a finer mesh. Afterwards, a new simulation can be launched with second order elements and the new adapted mesh.We now consider a DFN consisting of 120 fractures, as shown in Fig. 9. Dirichlet boundary conditions are imposed on a source and sink fracture whereas all other fractures have homogeneous Neumann boundary conditions. In Fig. 10we plot the solution for the sink fracture and for a selected fracture with insulated boundaries. As a comparison, results are shown for both the VEM approach of order 2 depicted in the present work and for the XFEM based optimization approach described in [18], starting from the same baseline mesh. A very good agreement between the solutions can be appreciated in the figure. Good agreement was also obtained for VEM of orders 1 and 3.In Table 2, we report the behaviour of 2 preconditioning techniques. Different mesh parameters and VEM of orders 1 and 2 are considered. The table displays the number of iterations required by the conjugate gradient (CG) routine compared to the performances of the preconditioned algorithm with the Lumped and Dirichlet preconditioners. For the non-preconditioned CG algorithm, a rapid increase in the iteration number with mesh refinement can be appreciated for both orders 1 and 2. As expected, the increase in iterations with a preconditioner is much smaller, with the Dirichlet preconditioner performing better than the Lumped preconditioner.The notable improvement renders almost imperative the use of a preconditioner, since the reduction in iteration number far outweighs the extra computational cost that arises from the computation of the preconditioner. Cases marked with NC stand for no convergence after 1 million iterations.In this subsection we describe some situations arisen in the simulations that have proven to be difficult to handle numerically. The monomial basis for the space of polynomials is notoriously bad conditioned, and the situation worsens with increasing orders. We believe that this is the cause of the issues we are presenting in this section, and they appear in elements with unsuitable shapes. Some of these issues can be prevented if a mesh modifying procedure as mentioned in Remark 2 is used.A first example is related to the DFN with 120 fractures, where a fracture has two traces that are almost parallel and very close to each other, as in Fig. 11. This inevitably leads to elements with a bad aspect ratio, since any attempt to obtain an adequate mesh would require a very large number of small elements to fill the space between the two traces. The solution is stable up to VEM of order 3, while when using a fourth order approximation the obtained solution drastically changes (see Fig. 12), and even falls below zero, which is not compatible with the imposed boundary conditions, necessarily leading to a solution bounded between 0 and 100. As a reference, one particularly problematic mesh element has an almost rectangular shape and an area of 0.58, with a length of 10.26 in one direction and 0.058 in the other (a 177 ratio). This is a degenerate octagon and for order 4 it has 38 DOFs (Fig. 11). We remark that this particular configuration can be successfully dealt with VEM of orders from 1 to 3, and problems only appear with order 4 and higher.A second documented problematic configuration, occurred on the DFN 27 problem, concerns badly shaped elements due not to the geometry of the DFN but to an unfortunate starting mesh, and is such that it may not be present with either a finer or a coarser mesh. This situation could be prevented applying the mesh smoothing process described in Remark 2. The situation is depicted in Fig. 13, where we can see that the edge of an element is very close to a trace and has originated elements much more stretched in one direction than in the other. Furthermore, a very small element was generated next to the stretched element. The solution for VEM of order 5 becomes numerically unstable in this case, as shown by Fig. 14. We remark that the major source of instability in this case is again the elongated element and not the neighboring small element.Finally, we present the last case that is part of a medium size DFN with 130 fractures, shown in Fig. 15, that includes parallel traces very close to each other, large disparity between trace lengths, highly heterogeneous element areas, element angles of less than 1 degree and complex trace intersections among other complications. More precisely, we have for the whole DFN that: minimum angle=0.41°, maximum trace length≈45, minimum trace length≈0.01and largest number of traces in a fracture=24. An adequate globally conforming triangular mesh for this system would be quite difficult to obtain, if not impossible. With our approach, meshing can be done as usual (Fig. 16) although it may lead to elements with undesirable shapes. It can be seen that irregularities in the solution were present only starting from VEM of order 4 approximations, again at a very elongated element between two traces meeting at a very small angle (Fig. 17). The solution shows an uneven and rough behaviour that is further propagated to other fractures that have traces in common, and was not present in the solution obtained with the VEM of order 3.

@&#CONCLUSIONS@&#
In this work we have presented a novel method that constitutes a natural generalization of conforming Finite Elements for Discrete Fracture Network flow simulations. Local and global conformity is obtained using some of the features of the Virtual Element Method, and most importantly, global conformity is achieved without any constraints in the initial meshing process, that is performed independently for each fracture, nor any modification of DFN geometry. Convergence curves were presented as well as results for DFNs of small and medium scale, and the method has been shown to be robust enough to handle complex geometrical situations that arise in randomly generated DFNs.After extensive numerical experiments, the following patterns were noticed: in general, all methods give a good approximation for the hydraulic head H, and due to how the problem was implemented, continuity of H for the whole DFN is guaranteed. Even with VEM of order 1 the solutions are reliable for this variable, and this is due to the fact that we are using the primal formulation of the problem and the local conformity of the mesh allows for a more accurate representation of the jump of the derivative of H along the traces. In the case of the flux exchanged at the traces, U, the situation is different; only starting with a somewhat fine mesh can acceptable results be obtained for order 1. Order 2 on the other hand shows a marked improvement that can be attributed to the larger number of DOF but also to the improved approximation of the gradient of H and consequently of U. We remark that U is not obtained directly, but deriving the projection onto a polynomial space of the computed primal variable H.Concerning the use of discretizations with increasing polynomial accuracy, for this application, we discourage going beyond order 2 based on the obtained results. Higher orders are not only less stable numerically on strongly distorted meshes, but also much more computationally expensive, and the improvement in accuracy is often not considerable. In fact, the exact solution of a DFN does not have in general high regularity and a cubic approximation of H and a quadratic approximation for U might be excessive. As we have seen however, whenever regularity is guaranteed, convergence for higher orders is as good as expected.Simple FETI algorithms for domain decomposition were successfully implemented and show promise for possible parallelization of the resulting linear system. They prove to be nearly indispensable if a large system is to be solved due to the achievable reduction in the number of iterations required to solve the system.Finally, much of the work done here in obtaining the globally conforming meshes as well as the idea for imposing matching conditions between corresponding degrees of freedom can be readily applied with few alterations to an implementation of a mixed formulation of the original problem using mixed Virtual Elements and will the subject of future work.