@&#MAIN-TITLE@&#
On the performances of the flower pollination algorithm – Qualitative and quantitative analyses

@&#HIGHLIGHTS@&#
The Flower Pollination Algorithm is qualitatively and statistically analysed.Previous publications of the FPA are qualitatively analysed.CEC 2013 and some of CEC 2011 benchmarks are used for statistical analysis.The basic FPA has been found to offer less than average performances.The best of the proposed variants has given average performances.

@&#KEYPHRASES@&#
Flower pollination algorithm,Continuous optimisation,Real-world benchmarks,Statistical analysis,Opposition-based learning,Modified equation,

@&#ABSTRACT@&#
The flower pollination algorithm (FPA) is a recently proposed metaheuristic inspired by the natural phenomenon of flower pollination. Since its invention, this star-rising metaheuristic has gained a big interest in the community of metaheuristic optimisation. So, many works based on the FPA have already been proposed. However, these works have not given any deep analysis of the performances of the basic algorithm, neither of the variants already proposed. This makes it difficult to decide on the applicability of this new metaheuristic in real-world applications. This paper qualitatively and quantitatively analyses this metaheuristic. The qualitative analysis studies the basic variant of the FPA and some extensions of it. For quantitative analysis, the FPA is statistically examined through using it to solve the CEC 2013 benchmarks for real-parameter continuous optimisation, then by applying it on some of the CEC 2011 benchmarks for real-world optimisation problems. In addition, some extensions of the FPA, based on opposition-based learning and the modification of the movement equation in the global-pollination operator, are presented and also analysed in this paper. On the whole, the basic FPA has been found to offer less than average performances when compared to state-of-the-art algorithms, and the best of the proposed extensions has reached average results.

@&#INTRODUCTION@&#
One of the very active areas of research in Artificial Intelligence nowadays is the field of metaheuristics. The latter can be defined as general-purpose solvers for optimisation problems. The use of metaheuristics is prevalent in modern applications of computational intelligence because of their broad flexibility, their intuitive structures and their applicability, even in the case of problem instances in which classical optimisation techniques fail [1]. In order to implement some intelligence, many metaheuristics reproduce natural and social behaviours in order to find solutions for optimisation problems.In the last two decades, many new metaheuristics have been proposed and applied in many fields for optimisation tasks. Among the powerful metaheuristics that gained special attention of researchers, we cite the Genetic Algorithm (GA) [2], Differential Evolution (DE) [3–5], the Particle Swarm Optimisation (PSO) algorithm [6–8], Ant Colonies (ACO) [9–11], and the recently proposed set of metaheuristics: the FireFly Algorithm (FFA) [12,13], the Bat Algorithm (BA) [14], the Cuckoo Search (CS) [15,16] algorithm and the Eagle Algorithm [17]. Recently, Yang [18] proposed a novel metaheuristic which has been compared to the PSO and the GA, and been claimed to offer better performances than both of them; it is the Flower Pollination Algorithm (FPA).The performances of any metaheuristic essentially depend on the establishment of a good balance between two forces: exploitation and exploration, also called intensification and diversification, respectively. In simple words, exploitation helps in getting profit from the already found good solutions, whereas exploration is the ability of the approach to reach the unexplored zones of the search space. In [19], Črepinšek et al. introduce some mechanisms seen in the literature to ensure the good balance between exploration and exploitation in metaheuristics. They also presented some measures of similarity/diversity of individuals in the population. On the whole, they conclude that no formal analysis of such a balance is yet available. They mention in many places of the paper that more research is needed to specify which part of an evolutionary algorithm is responsible for the exploitation task and which one is dedicated for exploration. Hence, the only means of analysing the ability of an algorithm to achieve a good balance between exploration and exploitation is by conducting rigorous, statistical, experiments.In this line of thought, this paper gives a detailed analysis of the recently proposed flower pollination algorithm, which is gaining increasing interest in the community of metaheuristic research, in both a qualitative and quantitative manners. First, the basic variants and some extensions of the FPA are qualitatively analysed by focusing on the benchmarks the authors used in their papers and the way they validated their results, in addition to how they set the basic FPA parameters. Second, An experimental analysis is conducted, in which different choices of the FPA basic parameter setting are done and statistically analysed. The CEC 2013 testbed [20] composed of 28 functions is used in this step. The same benchmarks are used to compare the FPA to state-of-the-art algorithms. Third, some real-world reference benchmarks [21] taken from CEC 2011 real-world benchmarks are exploited for analysing the FPA algorithm and comparing it to other state-of-the-art metaheuristics. Finally, new extensions of the FPA algorithm are proposed and analysed using both artificial and real-world benchmarks. The key ideas of the present contribution are summarised in Fig. 1.Consequently, the remainder of this paper is organised as follows. In Section 2, the basic version of the flower pollination algorithm, proposed by Yang [18] in 2012, is presented. Qualitative analysis of FPA previous works is provided in Section 3, while the statistical experimental analysis is provided in Section 4. In the same section, the real-world benchmarks are used for testing the FPA and some extensions of it we propose in this paper. Finally, Section 5 concludes the paper.The flower pollination algorithm is a new metaheuristic inspired by the biological process of flower pollination. More specifically, the algorithm simulates the notions of flower consistency and the pollinator behaviour found in nature. Before moving to presenting the flower algorithm, we start by giving a brief description of the adjacent biological phenomenon [18,22–25].Flower pollination is typically accomplished by the transfer of pollen which is basically associated by insects and animals. Pollination can take two major forms: abiotic and biotic. About 90% of flowering plants belong to biotic pollination, that is, pollen is transferred by a pollinator such as insects and animals. About 10% of pollination takes abiotic form which does not require any pollinator.Some pollinators exclusively visit one species of flower, this is called flower constancy. The latter permits the reproduction of the same flower species. This is also advantageous for the pollinators, since they will be sure of the availability of nectar supply with a limited memory and minimum cost of learning.As far as the availability of pollinators is concerned; there are two types of pollination: self-pollination and cross-pollination. In the case of the latter, pollen is gotten from a flower of a different plant; while in self-pollination, the fertilisation of one flower comes from the pollen of the same flower. Self-pollination is very useful when no reliable pollinator is available, whereas cross-pollination, also called global pollination, would permit the pollen to travel for long distances, thanks to the Lévy flight [26] behaviour of pollinators [18].In [18], Yang emulates the biological pollination process using the four following idealising rules.1.Biotic and cross-pollination are considered as global pollination processes with pollen-carrying pollinators performing Lévy flights.Abiotic and self-pollination are considered as local pollination.Flower constancy can be considered as that: the reproduction probability is proportional to the similarity of two flowers involved.The choice between local pollination and global pollination is controlled by a switch probability p∈[0, 1]. Due to the physical proximity and other factors such as wind, local pollination can have a significant fraction p in the overall pollination activities.For simplifying the task of implementing these rules Yang considers that each plant has only one flower, and each flower produces only one pollen gamete. Thus, there is no need to distinguish between a pollen gamete, a flower, a plant or a solution to a problem. This simplicity means a solution xiis equivalent to a flower and/or a pollen gamete.On the basis of this formulation, and through exploiting the notions of local and global pollination, Yang proposes to use the formula of Eq. (1) below to implement Rule 1 and flower constancy (Rule 3), and to use Eq. (2) to implement local pollination and flower constancy, Rules 2 and 3 respectively.(1)xit+1=xit+L·(xit−g*)(2)xit+1=xit+ϵ·(xjt−xkt)In Eq. (1),xitis the pollen i or solution vector xiat iteration t, g* is the current best solution andxit+1is a candidate solution for iteration t+1. The parameter L is the strength of pollination, basically a step size. Since pollinators, insects and birds, can move for long distances with various distance steps, Lévy flight is used. The latter consists of drawing L>0 from a Lévy distribution according to Eq. (3) below.(3)L∼λΓ(λ)sin(πλ/2)π·1s1+λ(s≫s0>0)In the equation, Γ(λ) is the standard gamma function. This Lévy distribution is valid for large steps s>0. s is drawn using Eq. (4) below, where U and V are two random numbers obeying a Gaussian distribution with the specificities shown in the same equation, U∼N(0, σ2) means that the samples are drawn from a Gaussian normal distribution with a zero mean and a variance of σ2. The variance is calculated by Eq. (5)[23].(4)s=U|V|1/λ;U∼N(0,σ2),V∼N(0,1)(5)σ2=Γ(1+λ)λΓ[(1+λ)/2]·sin(πλ/2)2(λ−1)/21/λIn Eq. (2), of local pollination,xitis the pollen i or solution vector xiat iteration t,xit+1is a candidate solution for iteration t+1,xjtandxktare pollen gametes gotten from different flowers of the same plant species, which is equivalent to the random choice of two solutions from the population. ϵ is drawn from a uniform distribution in [0, 1] used to implement a random walk [18,23].As stated in Rule 4 above, switching between local and global pollination is controlled by a probability p. Yang in his work, and many other authors, claim that the best value has been found to be equal to 0.8 for most applications [18,22–24]. In next sections, this value will be statistically investigated.The flower pollination metaheuristic is summarised in Algorithm 1.Algorithm 1The flower pollination algorithm1: Objective Function f(x), x=(x1, …, xd)T2: Initialise a population of nf flowers in random positions3: Find the best solution g* in the initial population4: Define the switch probability p∈[0, 1]5: t=06: whilet<Max_Generation do7:   fori=1:nf (all nf flowers in the population) do8:     ifrand<pthen9:       Draw a d-dimensional step vector L which obeys a Lévy distribution10:       Do global pollination viaxit+1=xit+L·(xit−g*)11:     else12:       Draw ϵ from a uniform distribution in [0,1]13:       Randomly chose xjand xkfrom the population14:       Do local pollination viaxit+1=xit+ϵ·(xjt−xkt)15:     end if16:     Evaluate the newly generated solutionxit+117:     If the newly generated solution is better, replacexitbyxit+118:   end for19;   Update the current best solution g*20:   t=t+121: end whileSince 2012, more than twenty works based on the flower pollination algorithm have been proposed for solving optimisation tasks. We categorise them into 4 classes: (1) The works proposed by Yang and his co-authors [18,22–25], (2) the works just applying the FPA for solving optimisation problems [27–30], (3) FPA extensions [31–35] and (4) the works analysing the FPA performances [36–38]. These contributions are analysed with greater detail in the next section.In this section, we give some details of the works based on the flower pollination algorithm and analyse them according to three main criteria:1.the benchmarks the authors used in their papers,the way they validated their results (whether any statistical analysis was given or not), andhow the basic FPA parameters were set or tuned.Hence, each work in the four classes of FPA-based previous works is analysed with regard to these points in the following sub-sections.In this section, we analyse the publications about the FPA produced by Xin-She Yang and his co-authors. To the best of our knowledge, there are five works (publications) in this class [18,22–25]. We examine them in the following paragraphs.Publication 1[18]: The first work on the FPA was published by Yang [18] in 2012 in a conference paper. In that paper, Yang describes the biological inspiration of the algorithm, formulates its equations and behaviour and uses it to solve some continuous optimisation problems. He also compares it to the GA [2] and PSO optmisers [6].Although the originality of the biological inspiration in that work, it is necessary here to analyse it with regard to the three criteria mentioned above – Yang himself states in the same paper that “any new optimisation [algorithm] should be extensively validated” [18].•Benchmarks: In order to validate his algorithm, Yang [18] uses ten benchmark functions. The latter are well known test functions in the field, even used in dozens of research papers, but they do not give a reliable view of the metaheuristic under investigation. First, they are relatively simple functions; some of them are multimodal functions, yet this set of functions do not contain other features that are likely to occur in many real-world problems, such as: ruggedness, noise in fitness, ill-conditioning, non-separability and interdependence (rotation). This has been offered since 2005 in the CEC benchmarks [39] which have become the cornerstone in almost every new metaheuristic evaluation. Another detail to be noted here is that the range of optimised variables of the test functions in this first publication is small in some cases ([−5,5], [−5.12,5.12], [−10,10]) and unspecified in others (see Function 1 in [18]). In addition, the dimensions treated in some functions are limited to D=2. This does not really show the scalability of the proposed algorithm (see Table 1 in [18]).The author also tests his approach by using it to solve the pressure vessels design optimisation problem. Again, the dimension of the problem is very small: four variables, which prevents from judging the scalability of the approach.Comparisons and statistics: To validate his algorithm, Yang [18] opted for comparing it to the classical genetic algorithm and the standard PSO. The author claims in his conclusion that the “simulation results have shown that […] the proposed flower pollination algorithm is very efficient and can outperform both [the] genetic algorithm and [the] particle swarm optimization”, but this claim suffers from the following shortcomings.–First, the algorithms used for comparison purposes, GA and PSO, are not of the state-of-the-art algorithms. The very basic variants are used by the author, while many more powerful variants of these two algorithms and other metaheuristics had existed in the literature before 2012 (the date of publication of this first work on the FPA).Second, the author does not provide any statistical analysis, which prevents us from judging the superiority of the FPA to be significant [40–42].Parameter setting: In the same publication [18], Yang states that for setting the main parameter of the FPA, one can use p=0.5 as an initial value and then does a parametric study to find the most appropriate parameter range. He adds that from his simulations, he “found that p=0.8 works better for most applications”. In fact, this statement raises two main issues:–First, no parametric study was included in the paper in question, neither in an appendix. It is a fact that at least empirical experimentations are needed before setting this parameter to 0.8.The second problem with this value adopted by the author, and even used in almost all other works on the FPA, is that the code provided by the author (available at Mathworks Exchange web site) uses a parameter value p=0.8, but with using a ‘>’ instead of ‘<’ in the test clause controlling the switch between local and global pollination. This means that the paper [18] and the corresponding code use opposite tests. So, one should wonder if this value is really the best, claimed to be efficient for most applications. As will be seen from the experimental analysis in next sections, we found that p=0.2 is better for most benchmarks.Publication 2[22]: In this publication, Yang et al. [22] extend the FPA proposed in [18] to deal with multi-objective optimisation. The theoretical part of this publication largely resembles that of the first publication [18], this is also the case for almost all other works on the FPA. The problem here is not in the similarity itself, but in the choices made by the authors because the same issues with regard to parameter tuning remain unsolved. For instance, the scaling factor γ is missing from the global pollination equation in the pseudo-code of the FPA, even if the authors mention it in the text.Now, we analyse this publication with respect to the three criteria we opted for.•Benchmarks: The benchmark problems used by the authors are also simple, while we find that the CEC benchmarks represent more hard functions to optimise.Comparisons and statistics: Again, no statistical analysis of results is provided. In addition, the comparisons made between the proposed Mult-Objective FPA (MOFPA) and the other algorithms may be unfair, since the authors use achieving maximum number of iterations (500) as a stop condition. It is well known that different algorithms may have different amounts of consumption of objective function evaluations per iteration, see [43] for more details concerning this issue.Parameter setting: The parameters used by the authors in this publication are set the same as in [18] without any advanced analysis of possible values. Even if one accepts that those parameters are good for single-objective optimisation, it is difficult to claim that they are also good for multi-objective problems.Publication 3[23]: This publication is an extension of [22] in which we find that the authors included first a section on single-objective test functions in the validation part. The same issues we discussed above, with regard to benchmark functions and parameter setting, are still present in this third publication. The authors also state that different values of the parameters have been studied, but no detailed numerical analysis is present in the paper.In addition, no statistical analysis, for both single and multi-objective problems, was presented. Besides, the parameters of all the algorithms used for comparison purposes are not given. So, the numerical comparisons are questionable with regard to the number of objective-function evaluations.It is worth to mention that the authors claim in the conclusion that the FPA and the multi-objective FPA are very efficient and outperform many other algorithms. However, this could not be a valid conclusion when taking into consideration the shortcomings we just raised. Besides, they claim that the FPA has only one key parameter, but it is clear that the scaling parameter γ and the Lévy parameter λ make them three parameters on the whole.Publication 4[24]: In [24], Yang presents a brief review of the FPA as a section in a book chapter. He just presents its principle, and so no qualitative analysis is needed for this publication.Publication 5[25]: Recently, Rodrigues et al. [25] proposed a binary version of the flower pollination algorithm. This new variant was used to accomplish the feature selection task. The same issues we raised before, regarding the used benchmarks and the missing of statistical validation, are also present in this work. However, some objectivity is present in this work where the authors conclude that all compared techniques gave similar results. It is also worth to mention that the algorithms to which the authors compared their binary FPA are not so powerful algorithms. Hence, the FPA is judged, as far as we know, for the first time to offer average results; even without comparing it to recent powerful metaheuristics.In addition to the works of Yang and his co-authors, many works have adopted the flower pollination algorithm considering it as a state-of-the-art metaheuristic and used it to solve some real-world problems. We cite for instance: [27–30]. In the following paragraphs, these works are analysed with more details, always according to our three analysis criteria.Publication 6[27]: In this work, Mulya Pambudy et al. [27] used the flower pollination algorithm for optimal control in a multi-machine system with generalised unified power flow controller. The authors in this publication adopted the value p=0.8 of the switch parameter proposed by Yang, and reported in the work of Abdel-Raouf et al. [31], which we analyse in Section 3.3, claiming that these are the best parameter values. The Lévy-related parameters are not mentioned.In addition, no comparison to other metaheuristics is reported. The authors just conclude that the FPA can be exploited to tune the control parameters in their system, but they do not provide a deep analysis of their results, only a comparison to the basic system, not using metaheuristics, is given.Publication 7[28]: This publication uses the FPA in the field of wireless sensor networks. Cluster formation in these networks is devised using the FPA as optimiser. The switch parameter is also set to p=0.8, and the Lévy-related λ parameter is set to 1.5. These are the same values in the founding work, which have not been thoroughly analysed, as seen above. No comparisons of the FPA to other metaheuristics are reported in this work, neither statistical analyses.Publication 8[29]: The selection of university academic credits using the FPA is treated as a multi-objective optimisation problem in this publication. This publication has two dark points with regard to its technical content:1.The theoretical description of the FPA is put the same as in [18] without any modification, which resulted in using the choices of Yang [18], but with claiming that they are the authors’ own choices; they say: “To start with, we can use a naive value of p=0.5 as an initial value. A preliminary parametric [tuning] showed that p=0.8 might work better for most applications”. This is really misleading, one would think that this has been found to be the most appropriate value for the university academic credit problem, which is not the case.Another issue with this publication is the fact that the authors state in the introduction that their work “aims to describe the implementation of the algorithm using [the] cuckoo search algorithm in order to model the behaviour of students from these minorities’ school groups … '; while the paper is supposed to use the FPA. It seems that the authors extracted this paragraph from a previous work on cuckoo search for the same task. This issue also appears in the caption of Fig. 3 of the same paper.Hence, the credibility of this work is lost and any conclusions made by the authors about the FPA performances are illegitimate.Publication 9[30]: In this publication, Prathiba et al. [30] used the flower pollination algorithm to solve economic load dispatch problems (ELDP). The same problem of absence of parameter tuning remains, the authors used the same value p=0.8 for switching between local and global pollination, and the Lévy-related parameters λ and γ are not discussed. The parameters used for the comparison algorithms, IEP and SADE-ALM, are missing; and statistical comparisons, even the mean and standard deviation), are not given. So, the conclusions made by the authors, that the FPA is comparable to the IEP and SADE-ALM, has no solid basis.In addition to the basic version of the FPA algorithm, some extensions have been proposed. Here is an analysis of five of them.Publication 10[31]: In this publication, Abdel-Raouf et al. [31] propose the hybridisation of the FPA with the harmony search algorithm [44]. They use the resulting hybrid to solve Sudoku Puzzles. Again, the theoretical description of the FPA is integrally copied from [18], also the choice of the value of parameter p. In addition, the references cited by the authors do not even contain the work of Yang [18], they cite an irrelevant work instead: a Sudoku solving previous work.The validation part of this work is superficial. It does not provide any numerical results, it just gives three examples of application of the algorithm on three puzzles, even if the authors claim that their algorithm is superior to other algorithms. Hence, any conclusions drawn by the authors would lack credibility.Publication 11[32]: This work proposes a chaotic-based variant of the FPA [32]. This extension was used to solve large integer programming problems.The same issue of the choice of the value of parameter p occurs, the same section is integrally gotten from [18]. The authors did not mention how the Lévy-related parameters are set. The authors compare the FPA variant they devise to the basic harmony search algorithm and one of its variants, but the parameters of these algorithms and the criteria of comparison (total number of function evaluations) are missing.Publication 12[33]: Abdel-Raouf et al. [33] extend in this work the basic FPA by including chaotic search. They apply this algorithm to the definite integral problem. The same problem related to the value of the parameter p is present. In addition, the founding works of Yang [18,22–25], from which the theoretical description of the FPA is extracted, are missing in the bibliography, another reference is provided for the whole part which is copied from [18].Publication 13[34]: The FPA is hybridised, in this work, with differential evolution [34]. The resulting hybrid is validated by applying it on some benchmark functions. The work proposed in this publication lacks deep numerical analysis. It also uses simple benchmark functions.Another drawback of this FPA extension is its use of extra parameters,wmaxandwmin, used to calculate dynamic weights. Moreover, the authors use different values of parameters for different functions. They state that: the value of cr=0.2 is found to be the best for the Griewank function, while cr=0.9 is the best for other functions. An algorithm parameter, if set manually, has to get a fixed value, besides that 0.2 and 0.9 are quite distant values for a crossover probability. Statistical analysis of numerical results is also missing from this publication. The mean and standard deviation are not recommended in the case of metaheuristic comparisons, see [40–42].Publication 14[35]: In [35], Wang et al. propose a new improvement pattern in the FPA. Instead of updating every variable in a given solution, the authors improve the dimensions of solutions sequentially. Unfortunately, this dimension-by-dimension technique is not well explained, which prevents a valid theoretical analysis.As far as validation is concerned, the authors also use relatively simple functions, compared to CEC benchmarks which became the reference test-bed, as seen above. Also, the range of variables is very limited in some functions, for instance [−1.28,1.28] in Function 5. Besides, the number of iterations should depend on the dimension rather than the function in question. The authors do not explain how these parameters are set.Moreover, when comparing the proposed FPA variant to other algorithms, the authors do not consider the potential differences between algorithms with regard to the number of objective function evaluations consumed each iteration, a simple example is that of the ABC that has at least double objective function evaluation per iteration, in addition to some scout-bee-related evaluation [45]. The authors seem to use the maximum number of generations as a stop criterion. Furthermore, no statistical analysis is provided. All these shortcomings make any conclusion about the performances of this algorithm questionable.In this category of works claiming to have analysed the FPA algorithm, we find three main works [36,38,37]. Here are some details about them.Publication 15[36]: In this publication, the authors say that a study of the FPA and its applications is presented, but no thorough theoretical or experimental study is actually presented, in addition to some issues related to the quality of the presented material. Here are some details:-The same switch parameter value p=0.8 is used as in [18], so the same remarks we mentioned in Section 3.1 apply, concerning the investigation needed for the best value of p.The claimed study only reports basic experiments extracted from previous work of Yang et al., namely [23]. Which means that no rigorous numerical study is offered.As far as the review of other FPA applications is concerned, the authors [36] just cite and blindly report that all these previous works prove the superiority of the FPA compared to other state-of-the-art approaches. This is not the case, as we concluded from this theoretical analysis and will be seen in experimental statistical analysis in the coming sections.The authors of this publication conclude that their study “indicates that [the] flower pollination algorithm is simple, flexible and exponentially better to solve optimization problems”. As seen, no scientific method is used in this work and so this kind of conclusions is scientifically invalid.Publication 16[37]: A comparison between the FPA and the bat algorithm [14] is conducted in [37]. The authors use ten benchmark functions to compare these two algorithms. Their comparison miss the following points:-The benchmark functions are relatively simple and some of them are defined on a limited range of variables, which makes it difficult to show the real performances of the compared algorithms.The tuning of the three FPA parameters: p, γ and λ is missing, and the setting of the bat algorithm parameters is not justified, maybe other parameters of the BA would offer better results than the FPA.The bat algorithm, even with its recent variants, does not represent a state-of-the-art metaheuristic, see CEC 2013 and CEC 2014 competitions winning algorithms for more details.The authors do not use any statistical tests of significance; the superiority of the mean and standard deviation is not enough, see: [40–42].Publication 17[38]: In this publication, the authors study the FPA for continuous optimisation by using some of the CEC 2013 [20] benchmark functions [38]. We analyse this study here:-The choice of parameters has not been thoroughly studied. The authors state they used the same parameter values as in the originating FPA works. However, in Table 2 of their paper they show that different values of the parameter p are chosen for different functions, this makes it difficult to draw any valid conclusions. Also, different population sizes are used for different functions, this again makes the analysis less reliable.What is more is that the authors use only 6 out of 28 benchmarks and only one limited problem dimension D=10 in their experiments.Using some functions and not the others would be misleading, the test-bed is devised to provide different characteristics of objective function landscape through different functions, so using only about the fourth of these functions does not offer good conclusions about the superiority of the algorithm being evaluated. Also, it is obvious that the chosen dimensionality of the problems does not allow judging the scalability of the algorithm. In simple words; maybe the PSO, to which the authors compare the FPA, would be better in high dimensions and for other functions.In addition, no statistical tests of significance of results is provided; even the mean or the standard deviation over the 30 trials are missing, the authors of [38] used the minimum offered best over all runs to compare the FPA to the PSO.Furthermore, the authors compare the FPA to the standard PSO, which is not really of the state-of-the-art algorithms.This section presents some experimental analysis of the FPA algorithm and some extensions we propose here. This analysis is accomplished by adopting two statistical tests of significance of values: the Wilcoxon rank-sum statistics [46] and the Holm-Bonferroni statistical ranking procedure [47]. As benchmark functions, we opted for using the CEC 2013 [20] test-bed. All source codes of the basic FPA and the five variants proposed in this paper are available from: https://drive.google.com/file/d/0B5sMFzPxo0ncVDEzb20yN0tiTDQ/view?usp=sharing. In the following subsection, the validation tools are detailed.In order to carry out our experimental study, we chose a recent and complete set of benchmark functions known in the field of real-parameter single objective optimisation; the CEC 2013 benchmarks [20]. The benchmark set consists of 28 functions: 5 unimodal functions, 15 basic multimodal functions and 8 composition functions.The CEC 2013 testbed expands its CEC 2005 [39] counterpart by adding new test functions, introducing oscillation and symmetric breaking transformations and modifying the formula of composition functions. In fact, these functions span a diverse set of problem features, including multimodality, ruggedness, noise in fitness, ill-conditioning, non-separability and interdependence (rotation).The whole set of 28 functions is tested with three dimensions D=10, D=30 and D=50; as recommended by the designers of the test suite. According to [20], these functions exhibit several characteristics of problems with different levels of difficulty. It is this multitude of levels of difficulty which makes this set of functions a reference test suite. Further details about these functions can be found in [20].Hence, in all the following experiments on the FPA algorithm and on our extensions, all 28 functions with three dimensions are tested, the obtained results are analysed with the statistical tests we present below.In [46], the authors give a very clear explanation about choosing the appropriate statistical test for comparing metaheuristics. According to the authors, the Wilcoxon rank-sum test offers the possibility to compare metaheuristics when the latter produce results with no normal distribution. In addition, this test permits the mutual comparison of algorithms.In the tables presented in the following sections, the ‘+’ means that the reference algorithm performed better than the algorithm in question, the ‘−’ means that it performed worse, and the ‘=’ symbol means that both algorithms performed equally. In all the tests, we consider a confidence level of 0.95 (α=0.05). In addition, in all tables, for all functions, the best average error from the optimum and it corresponding standard deviation are put in bold.The Holm-Bonferroni statistical ranking procedure [47,48] is also used to compare the basic FPA and the proposed variants against some state-of-the-art approaches. This procedure is used in the same way as described in [46]. This statistics is based on the notion of average ranking; so only the mean values of best errors to the optimum over 51 runs are needed to accomplish the statistical comparison.In this section, we analyse the performances of the basic flower pollination algorithm [18] with regard to three values of the switch parameter p, p=0.2, p=0.5 and p=0.8, for the three dimensions of benchmarks: D=10, D=30 and D=50. Tables 1–3show the obtained results over 51 runs. The reference algorithm for statistical comparison is that using a parameter value p=0.2.As seen from the tables, the value p=0.2 offered largely better results than the values p=0.5 and p=0.8. In fact, the value 0.2 performed better than when using p=0.5 in 66 cases out of 84, and was worse in only 6 cases, and both values (0.2 and 0.5) gave similar performances in 10 cases.Similarly, the value 0.2 performed better than when using p=0.8 in 65 cases out of 84, and was worse in only one case, and both values (0.2 and 0.8) gave similar performances in 18 cases. Thus the value 0.2 is far better than other values, which proves that the value 0.8 used in the literature needs to be reviewed. In the following comparisons, we opt for using the switch parameter value p=0.2, since it gave better results.The basic version of the flower pollination algorithm [18] is confronted, in this section, to some recent state-of-the-art algorithms. Two basic comparisons are offered here. In the first one, the FPA is compared to five state-of-the-art variants of differential evolution. In the second, we compare it to a recent variant of the CMA-ES algorithm: the CMA-ES-RIS [49].It is worth to mention that a fair comparison between all algorithms is assured through executing all algorithms for the same number of objective function evaluations: 10, 000×D, as recommended in [20]. To ensure that, we took into account that the FPA spends nf objective function evaluations in the initialisation step, see Line 1 of Algorithm 1. For this reason, the structure of the algorithm is changed by replacing the For loop by a While loop, with a stop condition being the maximum number of objective function evaluations.Tables 4–6summarise the results obtained from comparing the FPA to recent state-of-the-art algorithms on the CEC 2013 benchmarks for the three dimensions D=10, D=30 and D=50, respectively. It is clear from the three tables that the FPA has been outperformed by all five DE variants.To clearly see the statistical comparison, Table 7summarises the results of the Wilcoxon-based statistical comparison of the FPA to all the five DE variants. It shows the number of cases where the FPA was better, worse than or performed equally to the other DE variants in terms of Wilcoxon rank-sum statistics. As seen from the table, the FPA gave worse results in 70 cases out of 84, 64 out of 84, 62 out of 84, 65 out of 84 and 69 out of 84, compared to the SinDE [50], the SMADE [51], the DEcfbLS [52], the b6e6rl [53] and the TLBSade [54] algorithms, respectively.The Covariance Matrix Adaptation Evolution Strategy (CMA-ES) is one of the most powerful metaheuristics that emerged the last decade. This approach is known for its unique ability of being invariant to landscape transformations, scaling modulation and linear transformation of the search space [55–57]. Many efficient variants of the CMA-ES have recently appeared and proven their efficiency in solving continuous optimisation problems; the restart CMA evolution strategy (CMA-ES-RIS) [49] is one of these variants. So, it is a fact that a new metaheuristic like the FPA should be compared to this algorithm.Tables 8–10compare the flower pollination algorithm to the CMA-ES-RIS in terms of average and standard deviation of error from the optimum and the Wilcoxon rank-sum statistical test. As seen from the tables, the CMA-ES-RIS algorithm largely outperformed the FPA. The former gave better results in 64 cases out of 84 and the two algorithms performed equally in 10 cases out of 84. The FPA was better, on the other hand, in 10 cases out of 84.Again, statistically speaking, comparisons to the CMA-ES-RIS proved that the previous works claim that the FPA offers very powerful results is invalid. On the contrary, the FPA came at the last position when compared to six state-of-the-art algorithms using the Wilcoxon rank-sum statistics.In this section, some of the CEC 2011 benchmark tests for real-world applications [21,58] are used to confirm or infirm the claimed superiority of the FPA, when compared to state-of-the-art algorithms. As benchmarks, four problems from the CEC 2011 test-bed of real-world problems are used. The problems in question are Problems: 1, 7, 12 and 13. The first problem aims at estimating the parameters for frequency-modulated (FM) sound waves. In the second, an application to spread spectrum radar poly-phase code design is used. The third problem is the so-called “Messenger” spacecraft trajectory optimisation problem. Finally, the fourth problem is the “Cassini 2” spacecraft trajectory optimisation problem.The FPA algorithm is compared here to eight state-of-the-art algorithms for the same four real-world problems [58]. Table 11summarises this comparison, where the algorithms under comparison are: JADE [59], SPS-JADE [58], RBDE [60], SPS-RBDE [58], SaDE [61], SPS-SaDE [58], SHADE [62], SPS-SHADE [58] and the FPA.To well investigate these numerical results, we conduct a Holm Bonferroni-based statistical analysis. Before this, the Friedman test is done to check whether all algorithms have similar performances, the null hypothesis is set to: “All algorithms have similar performances”. Fig. 2summarises the numerical statistics of the Friedman test; it is clearly seen that all nine algorithms have identical performances. Table 12gives the Holm Bonferroni statistical results of multiple comparisons of the algorithms in question, with taking as reference algorithm the SPS-JADE [58] (having best average rank).The Holm-Bonferroni procedure is used with the same parameters used in [46]. The null hypothesis is: ‘the reference algorithm (SPS-JADE) has the same performance as the jth algorithm’, where j is the algorithm in question (JADE, FPA, SPS-JADE, etc.). In the tables, the ranks, zjvalues, pjvalues, and corresponding σ/NA−j values for all eight algorithms being compared to the reference algorithm are provided. The rank of the reference algorithm is shown in parenthesis in the table caption. Also, it is indicated whether the null hypothesis is rejected or not.As well seen from Table 12, all other compared algorithms but the FPA could offer similar performances, on the whole, as the SPS-JADE algorithm (the best ranked one). It is also clear that the FPA has given the worst performances amongst all nine algorithms. In addition, the null hypothesis was only rejected in the case of the FPA, which prevents it from being as powerful as the SPS-JADE algorithm.From these results, we conclude that the FPA is less powerful than the state-of-the-art algorithms for real-world problems.When confronting Friedman test results to those offered by Holm-Bonferroni test, one can ask the question: ‘Is it normal that Friedman test shows no differences between the nine algorithms while the Holm-Bonferroni test shows that the FPA algorithm is different from the reference algorithm?’.Getting back to statistics references, we found that the Friedman test conclusion may be:–either it finds some differences between treatments, and so a post-hoc statistical tests would better show such differences;or that there is no enough evidence that the treatments (algorithms) have different effects (performances), mainly due to the choice of significance level value or to the sample size.Hence, even if the Friedman test does not show any difference between algorithms, it may be a statistical type II error [63]: accepting the null hypothesis that is actually false. So, one could conduct a further statistical analysis to analyse the potential difference between algorithms. In fact, an important factor to be considered in such a case is the sample size. For hypothesis testing, the best way for reducing the rate of false positives and false negatives is increasing the sample size; unfortunately, this has not been possible in the case of real-world benchmarks (4 in our experiments).In this section, some extensions of the FPA are proposed and analysed with the same benchmarks and statistics used above. These extensions are based on the following basic ideas:–First, the Opposition Based Learning (OBL) [64] notion is exploited to propose a first variant of the FPA, called the Opposition-based FPA (OFPA).Next, the Generalised OBL (GOBL) [65], a recent version of the OBL, is used to create the Generalised Opposition-based FPA (GOFPA).The third proposed variant, called the Modified FPA (MFPA), is based on changing the terms contributing in the global-pollination equation.By hybridising the basic and generalised OBL with equation modification, the fourth and fifth variants are devised, they are called Modified Opposition-based FPA (MOFPA) and Modified Generalised Opposition-based FPA (MGOFPA), respectively.Opposition-based learning (OBL) is a search technique that was first proposed by Tizhoosh in 2005. Let x∈[a, b] be a real number, then its oppositex˘is defined as follows [64,66].(6)x˘=a+b−xSimilarly, the above definition can be extended to higher dimensions as follows. Let P=(x1, x2, …, xD) be a D-dimensional vector where xi∈[ai, bi] and i=1, 2, …, D. The opposite point of P is defined byP˘=(x˘1,x˘2,…,x˘D), where:(7)x˘i=ai+bi−xiThe key idea of opposition based learning (Fig. 3) is to consider evaluating a solution and its opposite at the same time. This is accomplished according to the following scheme. Let f(x) be the fitness function. So, for a solution Pi, the opposite solutionP˘iis generated and evaluated. Iff(P˘i)>f(Pi)then Piis replaced byP˘i; otherwise, the solution Piis kept [64,66].Since its invention, opposition-based learning has been successfully used with some powerful metaheuristics creating more powerful variants of them. We cite for instance its use with differential evolution [66–68], artificial neural networks [69], particle swarm optimisation [70–73], bio-geography optimisation [74], ant colonies [75] and simulated annealing [76]. These hybridisations and others are well detailed in [67].In [65], the authors proposed a new version of the OBL, called the Generalised OBL (GOBL). The key idea in the GOBL is the shift of candidates in the current search space into a new search space. The principle is as follows [65,77].Let x be a solution in the current search space S, x∈[a, b]. The new solution x* in the transformed space S* is defined by:(8)x*=Δ−xwhere Δ is a computable value and x*∈[Δ−b, Δ−a]. It is obvious that the differences between the current search space S and the transformed search space S* are the centres of search spaces; the size of search range (indicates the size of intervals) of S and S* are b−a, and the centre of current search space moves from (a+b)/2 to (2Δ−a−b)/2 after using GOBL [77].In a similar way, this definition has been extended to D-dimensional search space as in Eq. (9) below, where j=1, 2, …, D.(9)xj*=Δ−xjLet D=k·(a+b), where k is a real number. The GOBL model is then defined by:(10)x*=k·(a+b)−xAccording to its inventors [65], a random value of k in the range [0, 1] is recommended. The authors also recommend that an elite selection mechanism be adopted; in addition to correcting solutions: the generalised OBL does not guarantee that the created solution be in the parameter allowed intervals [65,77].In this section, we detail our proposed variants, then we analyse them to see if they improve the overall performances of the FPA. The proposed variants have been implemented as follows:-First, we inject the opposition based learning, in both its conventional and generalised forms, into the FPA algorithm to define the OFPA and GOFPA.Second, we change the basic composing terms of global-pollination equation in the algorithm, and so we create the MFPA (For Modified FPA). The equation used in local pollination is kept as it is.Third, we hybridise the OBL then the GOBL with equation modification to create the MOFPA and MGOFPA.The key idea of the first and second variants of the FPA proposed here, the OFPA and the GOFPA, is including the concept of opposition based learning and its generalised version as a step in the basic FPA, respectively. This step is included just after calculating the new candidate solutions and the greedy selection operation. Thus, the proposed OFPA/GOFPA can be described as shown in the pseudo-code of Algorithm 2 below.Algorithm 2Opposition-based FPA and generalised opposition-based FPA1: Objective Function f(x), x=(x1, …, xd)T2: Initialise a population of nf flowers in random positions3: Find the best solution g* in the initial population4: Define the switch probability p∈[0, 1]5: Define the OBL probability prob−OBL∈[0, 1]6: N_obj_Ev=nf7: whileN_obj_Ev<MaxObjEvalsdo8:   fori=1:nf (all nf flowers in the population) do9:     ifrand<pthen10:       Draw a d-dimensional step vector L which obeys a Lévy distribution11:       Do global pollination viaxit+1=xit+L·(xit−g*)12:     else13:       Draw ϵ from a uniform distribution in [0,1]14:       Randomly chose xjand xkfrom the population15:       Do local pollination viaxit+1=xit+ϵ·(xjt−xkt)16:     end if17:     Evaluate the newly generated solutionxit+118:     If the newly generated solution is better, replacexitbyxit+119:   end for20:   N_obj_Ev=N_obj_Ev+nf21:   ifN_obj_Ev>MaxObjEvalsthen22:     Break;23:   end if24:   ifrand<prob−OBLthen25:     Generate the opposite populationPopt*of the current population Popt26:     Apply an elite selection of nf individuals fromPopt∪Popt*27:     N_obj_Ev=N_obj_Ev+nf28:   end if29:   ifN_obj_Ev>MaxObjEvalsthen30:     Break;31:   end if32:   Update the current best solution g*33: end whileAs seen from the algorithm, the main behaviour of the conventional FPA is preserved in the proposed OFPA/GOFPA. What is new is the added part from Line 24 to Line 28, in addition to Lines 21–23 and 29–31, assuring the fair comparison of the OBL-based variants to the other ones. Of course the behaviour of OFPA and GOFPA variants is the same; they only differ in the type of OBL to be applied.Consequently, in every generation, a randomly generated number rand in the interval [0, 1] is compared to the probability of applying the OBL/GOBL prob−OBL. If the former is greater, the opposite population Pop* is generated (Line 25). Then, an elite selection takes place to chose the nf best solutions fromPopt∪Popt*(Line 26) to constitute the population of the next generation, where nf is the population size.It is worth mentioning that this increases the algorithmic complexity in terms of the number of objective function evaluations. As a result, in all comparisons that will be presented in the numerical analysis in the coming paragraphs, the FPA and the proposed OBL-based variants (OFPA, GOFPA, MOFPA and MGOFPA) will be formulated using the loop: ‘WHILE maximum number of function evaluations is not reached DO’, of course with adding the instruction incrementing the counter of function evaluations by nf whenever the OBL is applied (Line 27). Since the OBL operation, if applied, generates nf new solutions, adding the test blocks form Lines 21–23 and lines 29–31 will assure that no extra objective function evaluations are done by the algorithm. It is also to be noted that N_obj_Ev is always a multiple of nf. So, no extra objective function evaluations are consumed. In addition, when comparing the FPA variants to state-of-the-art algorithms, we set the population size nf to be equal to the problem dimension D, other formulations using consecutive calls of the 'break’ operation are also possible.Using this, we will guarantee a fair comparison between all algorithms, and even between the proposed OBL-based variants and other state-of-the-art approaches, against which the proposed algorithms are compared.The third variant we propose in this paper is a modified FPA in which the basic global-pollination equation, Eq. (1), is changed through changing its composing terms. This modification has been proposed after having analysed both local and global pollination equations. In fact, we first observed, from empirical results, an oscillating behaviour of the conventional FPA: some times it stagnates in not so promising local optima; other times, especially if the parameter p controlling the switch between local and global pollination is large, the problem of slow convergence is met.Technically speaking, in the equation of global pollination, Eq. (1), we see that two forces are being applied at the same time on population individuals supposed to be globally pollinated; the Lévy operator is likely to offer exploration, while the use of the best solution found so far would allow exploitation [19]. In fact, the issue is not that the equation contains both processes, but that the same termL·(xit−g*)is using them by multiplying each to the other. This means that while the Lévy flight explores the search space, the best-solution guided difference prevents it from doing so. Thus, both forces brakes each the other.In this perspective, we propose substituting the global pollination equation with Eq. (11) below, where j and k are two randomly chosen integers mutually different and different from the index i of the current individual, and L is the Lévy walk step.(11)xit+1=xit+L·(xjt−xkt)Another motivation that led us to change the equation is that the best so far found individual is always a member of the current population, even with many copies with generations; since a greedy selection is adopted between the candidate solutions gotten from pollination and the current ones. Thus, it is likely that this global best is chosen in either equations to perturb other solutions, thanks to the uniformly distributed random choice of indices.Consequently, the process of the FPA described in Algorithm 1 remains the same with the only difference of using Equation (11) instead of Equation (1) in the phase of global pollination.In the fourth and fifth variants of the FPA proposed here, we hybridise the equation modification and Opposition-based FPA variants to create the MOFPA on one hand and hybridise the equation modification and the generalised OFPA to create the MGOFPA on the other hand.In this section, the basic FPA [18] and the five variants proposed in this paper are statistically compared. Tables 13–15show the obtained results over 51 independent runs for the three dimensions under consideration. Table 16summarises the statistical Wilcoxon rank-sum based comparison of results.As well seen from the tables, especially Table 16, using the OBL does not improve the performances of the basic FPA, on the contrary it gives degraded results: the OFPA performed equally to the basic FPA in 61 cases (functions) out of 84, the latter algorithm was even better in 20 cases out of 84. On the other hand, the OFPA gave better results in only 3 cases out of 84. The same observation could be seen for the case of the GOFPA, the latter even gave more degraded results, where we find that the basic FPA gave better results in 39 functions out of 84 and performed as equally as the proposed GOFPA in 43 functions out of 84. From this, we could conclude that the inclusion of the OBL into the FPA caused the degradation of performances. In the coming paragraphs, we give some possible reasons of this degradation of results.On the contrary, the modification of the global pollination equation of the FPA equation gave very good results. Applying this modification alone, in the MFPA, gave better results in 47 cases (functions) out of 84, and both algorithms performed equally in 33 cases out of 84; while the basic FPA gave better results than the MFPA in only 4 cases out of 84. On the other hand, applying both the modification of the global search equation and the OBL relatively reduced these performances (offered by the MFPA), but still gave better results than the basic FPA. The MOFPA gave better results in 21 cases (functions) out of 84 and worse results in 10 cases out of 84; in the majority of cases both algorithms performed equally.Finally, the MGOFPA variant, applying the enhanced version of the OBL (GOBL) and the modification of the search equation gave really good results. The MGOFPA performed better than the FPA in 71 cases (functions) out of 84 and as equally as the basic FPA in 9 cases out of 84. The FPA was better in only 4 cases out of 84.A possible justification of the decrease of performances of the FPA when the standard OBL is used can be the fact that the OBL accelerates the speed of convergence of the metaheuristic. Adding to this the exploitive characteristic of the basic global pollination equation, which uses the best solution to guide the search; this would cause the premature convergence of the algorithm. In addition, the OBL brakes the explorative behaviour of the modified search equation, which caused the slight degradation of performances of the MOFPA when compared to the MFPA.Moreover, the high performances offered by the MGOFPA, the MOFPA and the MFPA, compared to the basic FPA, prove the view that the basic equation causes the over-acceleration of the algorithm.On the other hand, the generalised OBL gave some improvement to the MFPA. This can lead to concluding that even if the OBL and GOBL have the same key idea, evaluating complementary solutions in parallel; they provide remarkable different levels of performances. This could open new perspectives of research about the OBL variants. This observation makes us specify that only the basic version of the OBL deteriorates the performances of the FPA, but not necessarily all of its versions.In this section, the Holm-Bonferroni statistical ranking procedure [47,48] is used to compare the basic FPA and the best of the five variants of it proposed in this paper, the MGOFPA, to the state-of-the-art approaches on both artificial [20] and real-world [39] benchmarks (for the case of MGOFPA).For artificial test functions, CEC 2013 [20], the FPA and MGOFPA are compared to the Sinusoidal Differential Evolution algorithm [50], the self-adaptive differential evolution with pBX crossover (MDE-pBX) [78], the CMA-ES algorithm [79,80], the restart CMA evolution strategy with increasing population size (G-CMA-ES) [81] and against two recent variants of the PSO: the comprehensive learning particle swarm optimiser (CLPSO) [82] and the cooperatively coevolving particle swarms optimiser (CCPSO2) [83].First, the Friedman test is conducted with the null hypothesis that all algorithms have similar performances. Figs. 4 and 5present the Friedman statistical comparisons of the just-mentioned state-of-the-art algorithms and the FPA and MGOFPA algorithms, respectively. As seen from the statistical test, the 14 compared algorithms have non-identical performances; this makes the Holm Bonferroni test more significant. It is worth to mention that the code implementing the Friedman test, used here, is that offered by Giuseppe Cardillo and available at the Mathwoks web site: http://www.mathworks.com/matlabcentral/fileexchange/25882-myfriedman.On the whole, two numerical Holm Bonferroni-based statistical comparisons are given below. The SinDE algorithm, having the best average ranking, is used as reference algorithm in both cases. Tables 17 and 18compare the state-of-the-art algorithms to the FPA and the MGOFPA algorithms, respectively.As well seen from Table 17, the FPA came in the 12th position out of 14, which again proves that it has less than average performances when compared to state-of-the-art algorithms. As far as the MGOFPA is concerned, Table 18 shows that this variant is competitive to the state-of-the-art algorithms, it came in 6th position among 14 algorithms.Hence, from these results, we can say that the FPA algorithm has limited performances when compared to state-of-the-art algorithms, while the MGOFPA could compete to them. The latter algorithm boosted the performances of the basic version, but still some enhancements are needed.In the same way seen for basic FPA, we compare here the MGOFPA variant to the state-of-the-art algorithms on the same set of real-world benchmarks [39]. Before conducting the Holm-Bonferroni statistics, the Friedman test is accomplished. As seen from Fig. 6, there is not enough evidence of the existence of difference between the nine algorithms.Table 19summarises this comparison, with taking as reference the SinDE [50] algorithm. It is clear that the MGOFPA does not offer any superiority when compared to powerful algorithms; in fact, the same remarks seen in Section 4.4 about the FPA apply for the MGOFPA.

@&#CONCLUSIONS@&#
