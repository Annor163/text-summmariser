@&#MAIN-TITLE@&#
A novel bionic algorithm inspired by plant root foraging behaviors

@&#HIGHLIGHTS@&#
A new bionic algorithm is proposed based on the incentive mechanism of plant root branching, regrowing and tropisms.A new plant root foraging strategy simulates the plant root tropism mechanism and sets up the dynamics mechanism of root growing rapidly towards the global optima.The auxin concentration is set up to determine how to select new growing points and branching number of roots.The mainroot regrowing and the lateral-roots regrowing operators can make appropriate balances between exploration and exploitation.

@&#KEYPHRASES@&#
Artificial root foraging optimizer,Bionic optimization,Root growth,Benchmark test,

@&#ABSTRACT@&#
In this contribution, a novel bionic algorithm inspired by plant root foraging behaviors, namely artificial root foraging optimization (ARFO) algorithm, is designed and developed. The incentive mechanism of ARFO is to mimic the adaptation and randomness of plant root foraging behaviors, e.g., branching, regrowing and tropisms. A mathematical architecture is firstly designed to model the plant root foraging pattern. Under this architecture, the effects of the tropism and the self-adaptive growth behaviors are investigated. Afterward, the arithmetic realization of ARFO derived from this framework is presented in detail. In order to demonstrate the optimization performance, the proposed ARFO is benchmarked against several state-of-the-art reference algorithms on a suit of CEC 2013 and CEC 2014 functions. Computational results show a high performance of the proposed ARFO for searching a global optimum on several benchmarks, which indicates that ARFO has potential to deal with complex optimization problems.

@&#INTRODUCTION@&#
In recent years, great development of bionic optimization algorithms based on forging behaviors has been achieved [1–4]. Foraging is a significant inherent feature of behaviors that touches virtually all aspects of ecological species, involving optimal decision-making strategies for locating, handling, and ingesting food effectively in a given environment [1,2]. As the optimal foraging theory emphasizes [5], the main purpose of the optimal decisions-making by the foraging individual or group is to maximize the foraging currency measured by the energy obtained per unit time spent foraging. Intuitively, the optimal foraging principles have demonstrated their niche in the field of bio-inspired optimization theory, which provides a close relationship between evolutionary forces in optimal foraging and distributed optimization models design [3]. For instances, artificial bee colony algorithm (ABC) [4], ant colony optimization (ACO) [6,7], and particle swarm optimization (PSO) [8] are essentially inspired from natural foraging strategies of bee, ants and birds flocking, respectively. It is worthy noted that these flexible and robust computation paradigms mainly depend on the motile foraging behaviors unique to species of social animals.Obviously, as another important biological species, plants attract little attention in the bio-inspired optimization domain due to their specific foraging-style. In comparison to animal foraging, plant forage for environmental nutrients by means of iterative growth and constant branch, instead of taking spontaneous and independent motile actions. Furthermore, shaping spatial configuration of root system to explore heterogeneously distributed resources is essential for survival of plant species. Plant roots have evolved flexible adaptation to complex environments that they can sense environmental stimuli and use this information to adjust growth direction and lateral branching.Plant roots demonstrate considerable morphological plasticity in response to environmental heterogeneity, including lateral branching, root biomass and tropism-based growth [9]. These developmental operations are mainly regulated by transport and signaling of plant hormone called auxin [10,11]. Consequently, plant root can appropriately avoid obstacles and explore nutrient-rich patches by adjusting its spatial configuration such as elongate length and root biomass per unit soil volume [11]. This iterative propagation progress highlights that roots have significant ability of searching for the most profitable position with natural growth strategies. Intuitively, such evolutionary principles can be modeled deliberately for develop new heuristic optimization paradigms.However, comparing to the huge in-depth studies of other classical animal-based bionic algorithms and their wide applications (e.g., school timetabling, medical data mining) [12–15], the development and design of effective plant-based evolutionary paradigms is still a challenging issue. Fortunately, there are some existing computation models to simulate behavioral features of plant or plant roots [16–20]. For instances, the first descriptive 3-dimensional root system model is proposed with consideration of the morphogenesis of the maize roots [16]. A dynamic root system growth model based on L-systems, specially focusing on soil–root interactions, is proposed in [17]. The inherent connection of root architecture and nutrient acquisition efficiency is deliberately investigated [18], and it claims that the structure and dynamics of root system is so complex and flexible that the simulation modeling of root system development essentially needs to take account of the biophysical interactions between root tips and soil environment. As a result, the complexity of the root growth behaviors via environmental stimuli requires an explicitly accurate and systemic description not only of pure growth simulation (e.g., L-system) of each subsystem, but also of their mutual interaction and influence [19,20].In this contribution, by combining the self-adaptive growth behaviors with the optimal foraging, a novel optimization model for global numerical optimization, namely ARFO algorithm, is developed and designed. The proposed ARFO model incorporates the branching, regrowing, mortality and tropism mechanisms of the root system. In the proposed algorithm emulating the distributed optimization process represented by the activity of plant root growth, several efficient ways to search for space optimization problems is proposed. The local search and global search using root branching and elongation (tropism) both controlled by auxin concentration during the foraging process are implemented. The random growth of lateral roots and dead root elimination mechanisms are also developed to keep the diversity and efficiency of the algorithm. Intuitively, the novelties and characteristics of ARFO are summarized below.(1)A new foraging strategy. The root foraging model provides an open framework to utilize research in plant foraging behavioral ecology to tackle complex problems, and it simulates the plant root tropism mechanism, and sets up the dynamics mechanism of root growing rapidly toward the global optima.A new information regulation mechanism. The design of auxin-regulated mechanism resolves significant issues that how to select new root tips and branching number of roots. Particularly, the concept of nutrient concentration is essentially established, which ensures that even if the fitness of objective function is not best, the higher fitness gradient of the objective function also generates higher auxin concentration.The exploring/exploiting strategy. The regrowing operator of mainroot employs a large elongate-length unit to explore the previously unscanned regions in the search space as fast as possible. The lateral-roots implement the regrowing operator with a small elongation-length unit to perform fine-tuning exploitation of the global optimum.The rest of the paper is organized as follows: in Section 2, the root foraging model and the implementation details of ARFO algorithm will be given. The simulation of the intrinsic foraging behaviors is implemented in Section 3. Numerical examples and comparisons with well-known algorithms are presented in Section 5 to verify the efficiency of the ARFO algorithm. Finally, some concluding remarks are provided in Section 5.Plant roots exhibit substantial plasticity in growth in relation to environmental heterogeneity, often preferentially placing their foraging organs in nutrient-rich areas [21–25]. The concept of root foraging behavior was proposed by McNickle and Cahill based on the MVT theory [9,26]. They found that the root foraging was accomplished by the root morphological responses, which were related with the selective allocation of root biomass per unit time to the nitrogen-rich patch. As a widely used simulation approach, the L-system and its variants are just used for the morphologic representation for plant root behaviors [27–29]. And the key issue for optimization applications, namely how to select new root tips to grow and ensure the roots toward the optimal position, is still not resolved.Indeed, plant roots from different species have ability of sensing multiple environmental nutrition gradients and exert different responses by adjusting their growth direction to promote exploration of nutrition rich areas. This directional growth response is called tropism, mainly including gravitropism and gravitropism [30]. Gravitropism enables plant roots to grow along a specific vector relative to gravity [31], while hydrotropism makes the direction of plant root growth toward the rich-nutrition region [32]. This tropism-based growth is controlled by a kind of essential plant hormone called auxin, which is employed to conduct each root's self-adaptive behavior. This auxin also influences the spatial configuration of the roots system [33].In order to idealize the plant root foraging behaviors, some criteria are listed below.(1)Criterion-1: Auxin regulation. Auxin plays a major role in adaptive directional growth and information exchange of each root. Specially, the spatial structure of roots is mainly regulated by the auxin–cytokinin cross-talk. And we define the auxin concentration to reflect this effect, which is not static, but dynamically reallocated after new roots germinate and grow.Criterion-2: Root growth operations. The regrowing operation is a progress that roots elongate with a certain angle. The branching operation is the major progress for multiplying the number of roots, where new roots originate from the branching of the parent root tip by a certain elongate-unit in new direction. Root tips represent the activated root tips and have the ability of generating new root tips.Criterion-3: Classification of the root system. The whole plant root system is divided into three categories according to the auxin concentration values, namely mainroots, lateral-roots and dead-roots. Each mainroot tip implements both regrowing and branching, and its branching number is determined by its auxin concentration. The lateral-roots can only implement the regrowing operator.Criterion-4: Root tropisms. The root in response to various tropisms evolves toward the most nutrient rich position. Under the influence of hydrotropism, the growing direction of the root tips is adjusted toward the optimal individual position. At the same time, the gravitropism makes roots grow in an angle that is limited to a certain range.In the root foraging model, from the view of numerical optimization, the solution of the specific objective problem is defined as a D-dimensional vector (d1, d2, …, dD) where D is the number of vector dimension, di, ∀∈{1, 2, …, D} refers to the ith dimension of the solution.The auxin concentration Fiis employed to determine the selection of the root tips and the number of branching, its sum are constant (considered as 1) in the roots system. The Fican be calculated as following.(1)fi=fiti−fworstfbest−fworst(2)Nutritioni=Nutritioni−NutritionworstNutritionbest−Nutritionworst(3)Fi=fi∑j=1Nfi∗ξ+Nutritioni∑j=1NNutritioni(1−ξ),ξ∈(0,1),where i is the index of the root tip, N is the total number of the points, fi(t) is the normalized fitness value of the point i, fit(.) is the fitness value of the point i, fworstand fbestare the maximum and minimum of the current points, respectively. Nutritioniis the current nutrient concentration of individual i. ξ is a uniform random quantity varying from 0 to 1.In addition to the relative position of each point (objective function value), the Fiis also determined by the gradient of function fitness. We define the dynamics of the nutrient concentration as follows:(4)Nutritioni(t+1)=Nutritioni(t)+1iffi(t+1)>fi(t)Nutritioni(t)−1iffi(t+1)<fi(t)where i is the index of the root tip, t is the growth time and it belongs to the discrete time scale, Nutritioni(t) is the nutrient concentration of individual i at t time, fi(t) is the normalized fitness value of the point i at t time.Instead of only considering the fitness factor, the auxin concentration incorporates the two factors of fitness and nutrient concentration, which enriches the available environmental information for ARFO. This helps to decrease the accidents of being trapped into the local optima.According to Criterion-2, at each iteration, the root group can be classified into three groups: mainroots, lateral-roots, and dead-roots. The roots located in the most promising area with the highest auxin concentration value, are chosen as mainroots. It then implements the regrowing operator and the branching operator to explore and exploit the whole space.As a D-dimensional solution, Xi(t)=(Xi1(t), Xi2(t), …, XiD(t)) donates the position of the specific root i at the t time, where D is the number of vector dimension, i is the index of root, t is the discrete growth time, and Xij(t), ∀j∈{1, 2, …, D} refers to the jth dimension of the solution Xi(t).Step 1. In each cycle in the roots growth process, all root tips are sorted by Fivalue as defined by Eq. (3). The root tip with higher Fivalue has higher probability to be selected as the mainroot. Define that S is the size of mainroots group to be selected, N is the total number of the roots, Cr is the selection probability, and we can get the following equation:(5)S=N*CrStep 2. Considering the influence of hydrotropism, half mainroots search toward the optimal position of the individuals. Define thatXih(t)is the position of the mainroot i at the t time, R3 is a uniform random coefficient varying from 0 to 1, Xbestis the global best position of the whole root group. Accordingly, the new positionXih(t+1)of the mainroot i with hydrotropism at t+1 time, can be given below.(6)Xih(t+1)=Xih(t)+R3(Xbest−Xih(t))Step 3. Considering the influence of gravitropism, the rest of mainroots grow along their original directions. Define thatXig(t)is the position of the mainroot i with gravitropism at the t time. Accordingly, the new positionXig(t+1)of the mainroot i with gravitropism at the t+1 time, can be given as follows:(7)Xig(t+1)=Xig(t)+R4*Growmax*Di(φi)),ifXig(t)>Xig(t−1)where Growmaxis the maximum of elongate-length (i.e. objective function boundary range), R4 is a normally distributed random number with mean 0 and standard deviation 1, Di(φ)∈RDis a D-dimensional growth direction of the mainroot i with gravitropism; φi=(φi1φi2, …, φi(D−1))∈RD−1 is a D−1-dimensional growth angle.Accordingly, the aforementioned growth direction (φi(t)) of the mainroot i with gravitropism at the t time can be defined as:(8)φi(t+1)=φi(t)+R5*αmax,0<αmax<π,where R5∈RD−1 is a uniformly distributed random sequence in the range (0,1), αmax is the maximum of growing angle, which is limited to π.From Eq. (6), it is visibly observed that the mainroots can rapidly approach a near-optimal solution and stay for some growth cycles in several domains containing local optima. From Eq. (7), we can see that it can escape from these local optima to explore other domains perhaps containing the global optimum, but it is not able to stop there.In the root foraging model, the branching operator can be viewed as the local search strategy to exploit around the optimal area. And it enables the mainroots to produce new roots by a small elongate-length unit, forming a certain density distribution slowly in the promising region's immediate vicinity. This branching operator can be described as the following processes.Step 1. The auxin concentration (Fi) of the mainroot i is compared with the threshold value BranchG (satisfied 0<BranchG<1) to determine whether it performs branching operator, as:(9)branchingifFi>BranchGnobranchingotherelseStep 2. Determine the branching number according to the auxin distribution. In principle, the position with higher Fivalue is more conducive to roots branching. The branching number wiis calculated as:(10)wi=Fi*r*(Smax−Smin)+SminifFi>BranchG0else,where Smaxand Sminare the maximum and minimum of the new root tips, respectively, r is uniform random distribution coefficient, Fiis the auxin concentration of the mainroot i, as defined in Eq. (3).Step 3. Evaluate the new branching points. The growth direction of the initial mainroot is viewed as zero degree, the searching angle space is divided into Smaxsubzones and the angle of the new root tip is randomly falling within one of Smaxsubzones. Thus, the new position of a new branching root at the t+1 time can be yielded as follows:(11)Xib(t+1)=Xib(t)+R1*Di(φi)whereXib(t)is the position of the branching root i at the t time, R1 is a normal random varying from 0 to 1 and represents the elongate-length unit, φi=(φi1, φi2, …, φi(D−1)) donates the growth angle; the growth direction Di(φi)=(di1, di2, …, diD) can be calculated from φivia a Polar to Cartesian coordinates transformation [34], as follows:(12)di1=∏k=1D−1cos(φik)(13)dij=sin(φi(j−1))∏k=1D−1cos(φik)(14)diD=sin(φiD−1),The growth angle φi(t+1) at the t+1 time can be calculated as follows:(15)φi(t+1)=φi(t)+R2(αinit+K*βmax/Smax)where φi(t) is the growth angle of the branching root at the t time, R2∈RD−1 is a uniformly distributed random sequence in the range (0,1); αinit is the original growth angle value of the initial mainroot and can be regarded as zero degree, K is the random parameter for selecting the subzone, Smaxis subzones number, and βmax is the maximum growing turning angle. Similar to Eq. (8), the growing angle space βmax is limited to π.Due to that the lateral-roots group with lower auxin concentration stays in the initial growth phase, its elongation step is relatively small, and the influence of the hydrotropism can be ignored. The lateral-roots with the smaller elongation step are exploiting a local optimal domain, which is closer to its original point.Thus, the new position of the lateral-root i at the t+1 time, namelyXil(t+1), can be yielded as follows:(16)Xil(t+1)=Xil(t)+R6*Growmax*Di(φi)(17)φi(t+1)=φi(t)+R7αmax,whereXil(t)is the position of the lateral-root i at the t time, R6 is a random number with mean 0 and standard deviation 1, Growmaxis the maximum of elongate-length, R7∈RD−1 is a uniformly distributed random sequence in the range (0,1), Di(φi)∈RDis a D-dimensional growth direction of the lateral-root i, φi(t) is the growth angle of the branching root at the t time, similar to φi(t+1).In the proposed root foraging model, if the auxin concentration Fiis below the threshold Nmority, the root i will be removed from the population, and the current population size decrease by 1. Through the dead-roots elimination and the branching operators, the population size will vary across the searching process [35].We implement an instantiation algorithm of the proposed root foraging model, namely artificial root foraging optimizer, called ARFO, for numerical function optimization. The flowchart and pseudo-code of the ARFO is presented in Fig. 1and Table 1, respectively.As shown in Fig. 1, the principle of the proposed ARFO mainly depends on three sequential steps, namely the mainroot phase, the lateral-root phase and the dead-root phase. As mentioned above, the regrowing operator in the mainroot phase employs a large elongate-length unit to explore the previously unscanned regions in the search space while the regrowing operator in the lateral-root phase and the branching operator employ a small elongate-length unit and a random angle to perform fine-tuning exploitation of the global optimum. Additionally, the dead-root operator can be used to avoid “root number explosion”, namely the number of roots in some specific area may increase explosively. The detailed pseudo-code of ARFO is listed in Table 1.In order to further analyze the foraging behaviors of the proposed ARFO algorithm, we use our model to try to find the location with the best fitness. The soil environment with gradient nutrient concentration is constructed by some well-known unimodal and multimodal benchmark functions, such as Sphere, Rosenbrock and Rastrigin [4,6]. To facilitate analyzing, the root population of ARFO is initialized by one root, and the parameters setting are listed in Table 4 of next section.In the first simulation, we demonstrate the self-adaptive foraging behavior of roots in the ARFO model. Fig. 2(a) illustrates one initial root branching process (green line) and elongating trajectory (red line) in the 2-dimensional Rosenbrock, which starts at point (−2.5, −2.5). It can be clearly observed that the proposed foraging strategy permits the mainroot grows toward the optimal position (0,0), and generates corresponding density of lateral-roots. For the complex multimodal problem namely 2-dimensional multimodal Rastrigin, from Fig. 2(b) we can observe that ARFO strikes a balance between the exploration and the exploitation of the search space during the roots growth cycle by branching and regrowing operators. At the beginning, the single mainroot tip from [−3,−4] starts exploring with the large elongate-length unit and adaptive growth direction. Whenever it encounters an environmental improvement, the mainroot start branching to search intensively in this promising region, in which the newly generated lateral-roots grow by a small elongate-length unit near the optimum in order to pursue the more and more precise solutions. Furthermore, whenever the good solutions lying in this region have been found by this root, the mainroot moves away from this region and starts exploring the other regions until another better region discovered. Finally, we can observe that the mainroot finds the global optimum of the Rastrigin function. From the simulation results, we can draw a conclusion that ARFO can self-adaptively and quickly find the optimum of objective function because ARFO balances the exploration and exploitation in the optimization progress by incorporating the various operators.The similar foraging pattern can be noticed in Fig. 2(c) and (d), which plotted the root foraging trajectories on 3-dimensional Rosenbrock and Rastrigin, respectively.To investigate the influence of various tropisms, we take a simulation considering the gravitropism and hydrotropism, where the 2-dimensional sphere is used as soil environment. Fig. 3shows the trajectories of the roots population of three different test strategies, where the green lines and red lines represent lateral-roots and mainroots, respectively.From Fig. 3(a), we can see that under gravitropism action, the mainroot (red line) is growing by a certain angle inertia to search slowly for places with a better nutrient concentration, as shown by those curvy trajectories on the contour plot. Whereas, Fig. 3(b) shows that hydrotropism makes roots grow toward the optimal position of current individuals, which is prone to get stuck onto a local optimum. From Fig. 3(c), we can observe that the mainroot can quickly explore several domains containing local optima because it grows toward to the direction of the current best point and stay for some growth cycles under the action of hydrotropism. Hence, a conclusion can be drawn that the gravitropism can make mainroots escape from these local optima to enter the domain with the global optimum.In the second simulation, the population evolution of the ARFO was simulated on 2-dimensional Rosenbrock. Specially, Fig. 4shows the positions of the root on certain elongation steps, where each red circle represents a root tip. The evolution process runs 15,000 steps. Initially, we see that the single root is distributed randomly over the nutrient map defined by the 2-dimensional Rosenbrock. From the second phase (FEs=100) to fourth phase (FEs=5000), the root grows toward the long and narrow valley of the Rosenbrock and the new roots are generated around the good positions, resulting in the increase of the population size. In the fifth phase (FEs=8000), the lateral-roots initialized in this valley found by mainroots exploit the global optimum along the global optimum. It is reminded that, after reaching a peak in the fourth phase, the population continues to decline by the dead-roots eliminating operator. Finally, in the last phase (Fes=10,000), the roots population pursue the valleys, including the global optimum.The performance of ARFO is benchmarked against 28 CEC-2013 benchmarks [36], which comprise five unimodal functions (f1–f5), 15 multimodal functions (f6–f20), and eight composition functions (f21–f28), totalling 28 diverse and difficult minimization problems. The composition functions were specifically designed for this competition, and comprise the sum of three or five unimodal and/or multimodal functions, leading to very challenging properties: multimodal, non-separable, asymmetrical and with different properties around different local optima. The dimensions, initialization ranges, global optimum of each function (f1–f28) are listed in Table 2. Additionally, to highlight the performance comparisons of involved algorithms on high-dimensional functions, a set of 50 dimensional CEC 2014 benchmarks (f29–f44) are selected in Table 3[37].Table 2 gives the global optimal solution x* (column 5) and the global optimal value f(x*) (column 6). Moreover, “Accept” (column 7) is defined for each CEC 2013 benchmark. If a solution found by an algorithm falls between the acceptable value and the theoretical global optimum f(x*) (column 5), the run is judged to be successful. Similarly, In Table 3, x* (column 5) donates the global optimal solution and f(x*) (column 6) represents the global optimal value.Nine algorithms are employed for comparing the performance of ARFO. The first one includes the popular latest PSO algorithm, namely the SPSO-2011 algorithm [38], and it has been comprehensively test and analyzed on all the CEC 2013 benchmarks. Specially, the experimental results of SPSO-2011 on the CEC 2013 benchmarks in the literature can be compared with the ARFO. The second one comprises four improved variants of well-known bionic algorithm. That is, CPSO [39], SamACO [40], BABC [41], and MDE_Pbx [42]. The third one consists of four classical evolutionary algorithms, namely ABC [4], ACO [7], PSO [8] and CMA-ES [43].The reference algorithms are summarized as follows:•The latest standard particle swarm optimization algorithm (SPSO-2011) [38].Cooperative particle swarm optimization algorithm (CPSO) [39].Variable sampling ant colony optimization algorithm (SamACO) [40].The best-so-far artificial bee colony algorithm (BABC) [41].Modified DE with p-best crossover (MDE_pBX) [42].Standard particle swarm optimization (PSO) [8].Artificial bee colony algorithm (ABC) [4].Ant colony optimizer (ACO) [7].Covariance matrix adaptation evolution strategy (CMA-ES) [43].All involved algorithms are coded by Matlab 10.0 and run on i5-2450M, 2.5GHz under the Windows 7 OS. The number of function evaluations (FEs) is used as a measure criterion and all algorithms are terminated after 100,000 FEs. The experiments are run 30 times respectively for each algorithm on each benchmark.All the control parameters for the involved algorithms are set to be default of their original literatures:•Parameter settings of SPSO-2011: As defined in [38], random initialization of particle positions and velocities is used; random topology with K=3 informants; acceleration coefficients c1 and c2 equal to 0.5+ln(2); particle velocity constrained to the range [−Xmax,Xmax]; and a constant inertia weight equal to ω=1/(2*ln(2)).Parameter settings of CPSO: It is a cooperative PSO version and its parameter settings are as defined in [39]: the acceleration factors c1 and c2 are both 1.49, a decaying inertia weight ω starting at 0.9 and ending at 0.4 and the split factor k is equal to the dimensions.Parameter settings of SamACO: SamACO is an effective ACO variant that adopts a novel sampling method to discretize the continuous space. As recommended in [40], the parameters of SamACO can be listed as follows: Tmin=T0=0.1, Tmax=1.0, θ=1, ψ=1, n=30, m=20, ϑ=20, ρ=0.5, α=0.3, q0=0.1 and ur=0.7.Parameter settings of MDE_Pbx: The weight factor F varies randomly between 0.8 and 1 in the specific way as described in [42] and other traditional parameters are same to the default settings of [42].Parameter settings of PSO: This PSO is the standard one (i.e., the global version with inertia weight). The parameters are given by the default setting of [8,44]: c1=c2=2.0, ω starts at 0.9 and ends at 0.4.Parameter settings of BABC and ABC: BABC adopts a modified search equation for the onlooker bees [41]. The limit parameter of both BABC and ABC is set to be SN×D, where D is the dimension of the problem and SN is the number of employed bees, which is half of the population size [4,41].Parameter settings of ACO: This ACO version is specially developed for continuous optimization [7] and the traditional parameters of ACO can be set the same as recommended in [7].Parameter settings of CMA-ES: CMA-ES is a successful evolutionary strategy (ES) variant using the covariance matrix of the mutation distribution guided by the useful information about search steps [43]. As defined in [43], μ=12, cσ=0.1, dσ=20, cc=0.12 and ccov=0.08.The parameter setting of the ARFO algorithm uses our empirical values summarized in Table 4. Note that in Table 4, the term – the simulation setting is selected for the simulation of root foraging behaviors in ARFO model (i.e., Section 3), and the term – the optimization setting is chosen for the performance comparisons on the benchmarks (i.e., Section 4.2).In this experiment, the ARFO is tested against the CEC 2013 and CEC 2014 functions. The statistical results over 30 independent runs, in terms of the best, worst, mean and standard deviation, have been given in Tables 5 and 6. Ref. [38] has reported all the statistical results of SPSO-2011 on the scalable CEC 2013 functions, which are also listed in Tables 5 and 6. Table 7shows the experimental results of ARFO on the scalable CEC 2014 benchmarks.Firstly, we compare the ARFO's performance with the best performance achieved in the CEC 2013 and CEC 2014 functions. In Tables 5–7, f(x*) is the best performance of each involved benchmark. Table 5 shows that ARFO obtains satisfactory results on most of the 10-dimesional unimodal and multimodal benchmarks. For instances, ARFO can find the global minimum (f(x*)) on functions f1, f2, f3, f4, f5, f6, f10, f16 and f20. On most of the composition functions, the best value obtained by ARFO seem worse than f(x*). However, the ARFO succeeds in finding f(x*) on two complex composition functions f21 and f23. From Table 6, it can be observed that on the 50-dimensional benchmarks f1, f5, f9, f10, f16, f19, and f20, the maximum, mean and minimum values obtained by ARFO are all equal or very close to f(x*). At the same time, the lowest standard deviation values are achieved for 50-dimensional benchmarks f1, f2, f3, f5, f6, f8, f10, f14, f17, f18, f19, f20, f22, f23 and f24, more benchmarks than the 10-dimensional cases. We can clearly see that while as dimensionality increases, the proposed ARFO algorithm exhibits its persistence and yields similar performances. Table 7 shows that ARFO succeeds in finding, at least once, the true optimum (f(x*)) on functions f29, f30, f31 and f32 on both 10-dimesional and 50-dimensional cases. But on other functions, it cannot obtain the true optima, being easily trapped into the local optimal region.Then, ARFO is straightforwardly compared with the existing results of SPSO-2011 on the CEC 2013 functions. The SPSO-2011 is regarded as a major improvement over previous PSO paradigms [38]. As shown in [38], for the 10-dimensional cases, SPSO-2011 obtains excellent performances on the unimodal f1, f3, and f5, the multimodal f6 and none of the composition functions. On most of multimodal and all the composition functions, SPSO-2011 easily falls into local optima far from the true optimums. Accordingly, similar experimental results of SPSO-2011 are achieved on the 50-dimensional cases.From Table 5, ARFO can obtain excellent performance on most of the 10-dimesional unimodal and multimodal cases. On the unimodal functions f1, f2 and the multimodal function f4, ARFO can consistently find the global optima within every run while SPSO-2011 cannot do this. On the composition functions f21, f23, f24, f25 and f27, ARFO is shown to offer superior performance. From Table 6, ARFO seems a little better than the compared algorithm on most of the 50-dimensional cases. For instances, ARFO does best on functions f6, f8–f11, and f15–f19 (i.e., 10 out of 15 functions) for the multimodal cases. On the unimodal functions (f1–f5), ARFO also yields similar performance to SPSO-2011. When solving some complex composition functions f21, f22 and f24, ARFO does not get accurate optimal results and is deeply trapped in local optima only in a few runs. However, Table 6 shows ARFO exhibits similar performance even a little better than the compared algorithm on the composition functions f21, f23, f24, f26, and f27, and especially improves the results on the functions f23 and f27.Tables 8 and 9show the mean and standard deviation values obtained by ARFO, BABC, CPSO, MDE_pBX and SamACO on the 10-dimensional and 50-dimensional CEC2013 functions, respectively. This experiment employs the same parameter settings in Section 4.1. Fig. 5presents the average convergence rates in term of mean error values of each algorithm on each 50-dimensional CEC 2013 benchmark. Table 10shows the experimental results obtained by each algorithm on 50-dimensional CEC 2014 functions. Furthermore, the Wilcoxon's test is made based on the mean error values of 30 independent runs for showing whether ARFO is significantly better or worse than the compared algorithms [45]. Here the significance level has been fixed to 0.05, the symbol ‘+’ means that ARFO statistically significantly outperformed the compared algorithm, ‘=’ indicates that the compared algorithm and ARFO have equal or similar performance and ‘−’ shows that the compared algorithm performs statistically significantly better than ARFO.Table 8 shows that ARFO performs more powerful than SamACO, CPSO and MDE_pBX on most 10-dimensional test functions. More specifically, MDE_pBX cannot outperform ARFO on any test function except f11 and f28. SamACO surpasses ARFO only on f13, f14, f18 and f21. The CPSO algorithm obtains the best solutions on f11, f17 and f18 and performs relatively better than ARFO on f9, f11, f14, f20 and f25. It should be reminded that BABC also performs powerfully on most of the test functions, and gives better results than ARFO on f11, f14, f15, f21 and f26. However, the results of ARFO on f1, f2 and f3 are several orders of magnitude beyond that of the compared algorithms.When the dimension increases to 50 as shown in Table 9, it can be claimed that ARFO can obtain satisfactory solutions in more test functions than the compared algorithms. For examples, ARFO obtains the best mean values on 18 functions of all the 28 benchmarks (i.e., f1, f2, f3, f5, f6, f7, f8, f9, f10, f11, f12, f15, f16, f18, f23, f24, f25, and f27). The similar comparative results among all involved algorithms are obtained on the 50-dimensional CEC 2014 cases as shown in Table 10. It can be observed that both ARFO and BABC obtain satisfactory performance and ARFO seems a little better on f30, f33, f34, f35, f36, f37 and f39. From Fig. 5, it can be observed that ARFO has somewhat faster convergence speed than the compared algorithms on most 50-dimensional functions (i.e., f1, f2, f3, f6, f7, f10, f11, f15, f16, f18, f19, f23, f24, f25 and f27). This achieved improvement of ARFO is due to the dynamical exploration and exploitation balance ability of the introduced main and lateral root foraging strategies. Additionally, the population-varying characteristic derived from the operations of branching and dead-root elimination in ARFO also reduces the unnecessary redundant computation load, which is mainly caused by lack of knowledge regarding the relationship between population size and complexity of the optimization problem.In order to verify this, extended experimental results are listed in Table 11, where P_FEs are the average FEs needed to reach the threshold expressed as acceptable solutions specified in Table 2. RT is the average running time on each function. In addition, successful rate (SR%) of the 30 independent runs for each function are also compared. Note that the P_FEs are measured only for the successful runs. It can be observed from the table that ARFO performs the best among the five algorithms. ARFO not only has higher successful percentages than the other compared algorithms but also uses a relatively small number of FEs to achieve solutions within the predefined accuracy levels. For example, when solving f2, f6, f7, f10, f15, and f25 ARFO can get solutions within accuracy levels in all runs. However, BABC, CABC, MDE_pBX and SamACO can only achieve solutions within the accuracy level successfully in some runs. This indeed illustrates the advantage of the proposed algorithm on computation efficiency and convergence rate.The means and stand deviations of the 30 run times of five involved algorithms on some selected 50-dimensional CEC2013 test functions (i.e., the unimodal functions f1, f2, multimodal functions f8, f10, f17–f20, and composition functions f21–f25) and fifteen 50-dimensional CEC 2014 (i.e. f29–f43) are listed in Table 12where the best results among those algorithms are shown in bold. Additionally, it is beneficial to use statistical tools to compare the problem-solving success of one algorithm with that of another. The simple statistical parameters that can be derived from the results of an algorithm solving a specific numerical problem K times under different initial conditions, such as the mean solution (mean) – only provide information about the algorithm's behavior in solving that particular problem. Here, the unpaired Student's t-test is utilized while the mean solution obtained is used as the result of 30 runs for its problem-based comparison of the algorithms [41], and the statistical significance value can be set as a=0.05. The null hypothesis H0 for this test is: ‘There is no difference between the median of the solutions achieved by algorithm A and the median of the solutions obtained by algorithm B for same benchmark problem’, i.e. median (A)=median (B). To determine whether the alternative hypothesis was valid, the associated p-value provided by the Student's t-test is examined. The statistical results are listed in Table 13.From Table 12, the proposed ARFO achieves significantly better results than ABC, PSO and ACO on most test cases such as f1, f17–f19, f21–f25 and f35–f42. Generally, ARFO performs more powerful than other algorithms on most CEC 2013 benchmarks. It is worthy noted that, on f1, f2, f21, f22, f29 and f32 CMA-ES achieves significantly powerful performance, even a little better than ARFO. Although the composition functions from CEC 2013 test suite become more difficult to be tackled than the unimodal and multimodal functions, ARFO still can outperform the compared algorithms on these test cases, which reveals that ARFO has potential to tackle complex problems.Table 13 reports the statistical results (i.e. ARFO against others) produced by Student's t-test from the average solution (mean) of 30 runs on 15 CEC 2014 benchmarks. From Table 13, it can be observed that, in most cases, the p-value is less than 0.05 (5% significance level), H is true. These results show that the null hypothesis H0 is rejected and ARFO demonstrates a statistically superior performance in the problem-based statistical comparison tests at the 95% significance level (a=0.05).Algorithm complexity analysis is presented briefly as following. Assuming that the computation cost of regrowing operator of one individual in the ARFO is Cost_r, the cost of the branching operator is Cost_b, N is the population size, M is the number of new branching, then, the total computation cost of ARFO at its peak of population size is N*M*Cost_r+M*Cost_b. It should be noted that the computational complexity of ARFO will grow with the dimensionality of problem increasing. In other words, the computational complexity of each step – N is not a constant, but depends on dimensionality. Hence, due to the fact that the population of ARFO is varying dynamically, it is very difficult to give an elaborate time analysis for ARFO. Through directly evaluate the algorithmic time response on different objective functions, the average computing time in 30 sample runs of all algorithms is given in Fig. 6. From Fig. 6, it can be observed that ARFO cannot obtain satisfactory results in terms of computing time on f1 and f5. However, when facing up more complex problems (f15, f21 and f25), ARFO take less computing time than other involved algorithms. This is due to the fact that by the term nutrient concentration criterion as described by Eq. (4) and dead-roots elimination operation, the population size of the ARFO can dynamically adaptive to the complexity of the objective functions, which can reduce the computational complexity of the optimization process.

@&#CONCLUSIONS@&#
This paper proposes a novel bionic algorithm called artificial root foraging optimizer (ARFO). The ARFO is based on the principles of the plant root foraging behaviors such as tropism, growth behaviors, and it sets up the dynamics mechanism of root growth rapidly toward the global optima. A new growth control mechanism based on the auxin concentration is designed to determine the new root tips and the branching number. Then, we introduced three operators (i.e. mainroot and lateral-root regrowing operators and mainroot branching operator) to perform the exploring and exploiting tasks.To illustrate the specific way of root foraging, the proposed ARFO model is simulated on several artificial soil environments, and then we briefly discuss that the inherent characteristics of root growth, namely the self-adaptive foraging behavior, the root tropic growth, and auxin controlled population evolution. Then, to prove the effectiveness and robustness of the proposed algorithm, the ARFO has been compared with the SPSO-2011, BABC, CPSO, MDE_pBX, SamACO, ABC, CMA_ES, PSO and ACO algorithms on a suit of scalable CEC 2013 and CEC 2014 benchmarks. The experimental results highlight the improvement of the proposed ARFO algorithm. Based on this comprehensive analysis of ARFP performance, there may be benefits over existing optimization methods, and we believe ARFO has a great potential of being applied to a variety of complex real-world problems. Indeed, there is ongoing research that is studying this now.