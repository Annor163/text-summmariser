@&#MAIN-TITLE@&#
An elitist self-adaptive step-size search for structural design optimization

@&#HIGHLIGHTS@&#
An elitist self-adaptive step-size search (ESASS) algorithm is proposed for optimum design of truss structures subject to stress and displacement constraints.The computational efficiency of the technique is accelerated through avoiding unnecessary analyses throughout the optimization process using the so-called upper bound strategy (UBS).The formulation of algorithm is enhanced for tackling structural design optimization problems.The ESASS algorithm is capable of locating reasonable solutions to optimum sizing problems of truss structures with considerably less computational effort.

@&#KEYPHRASES@&#
Metaheuristic techniques,Self-adaptive step-size search,Sizing optimization,Structural design optimization,Truss structures,Upper bound strategy,

@&#ABSTRACT@&#
This paper presents a method for optimal sizing of truss structures based on a refined self-adaptive step-size search (SASS) algorithm. An elitist self-adaptive step-size search (ESASS) algorithm is proposed wherein two approaches are considered for improving (i) convergence accuracy, and (ii) computational efficiency. In the first approach an additional randomness is incorporated into the sampling step of the technique to preserve exploration capability of the algorithm during the optimization. Furthermore, an adaptive sampling scheme is introduced to enhance quality of the final solutions. In the second approach computational efficiency of the technique is accelerated through avoiding unnecessary analyses throughout the optimization process using the so-called upper bound strategy (UBS). The numerical results indicate the efficiency of the proposed ESASS algorithm.

@&#INTRODUCTION@&#
The optimization has long been recognized as an inseparable component of structural design. Especially in case of common structural systems such as truss structures, for which a reasonable final design may yield a significant cost reduction, locating the optimum solution through efficient approaches becomes crucial. Basically in the literature, design optimization of truss structures is considered in three different categories; namely sizing, shape, and topology optimization. In sizing optimization the cross sectional areas of truss members are treated as design variables. The optimum configuration of the structure is sought through shape (or geometry) optimization, whereas topology optimization deals with the presence or absence of the structural members and nodes. Amongst the three aforementioned categories of structural design optimization, sizing optimization, which is covered in the present study, is the most frequent approach in design optimization of truss structures.Basically, the efficiency of a structural design optimization process primarily depends on the technique used for the optimization task. Generally, the widely known classes of traditional structural optimization techniques are mathematical programming [1] and optimality criteria [2,3] methods. Some shortcomings of these techniques, namely their gradient based formulations as well as inefficiency in handling discrete design variables, have engendered an increasing tendency toward non-traditional stochastic search algorithms or the so-called metaheuristics. The metaheuristic algorithms, such as genetic algorithms (GAs) [4], particle swarm optimization (PSO) [5], and ant colony optimization (ACO) [6,7], are typically nature inspired methods, which borrow their working principles from natural phenomena [8]. Different from traditional optimization approaches, metaheuristic algorithms do not accomplish a gradient based search and are capable of handling both discrete and continuous design variables [9–11]. Furthermore, the stochastic nature of metaheuristic algorithms makes it more likely to find good and acceptable solutions – even if not the globally optimum solution – for complicated optimization problems. Owing to their robust and reliable search features, they can efficiently be utilized for tackling practical design optimization problems. Nowadays, there are numerous variants of metaheuristics available in the literature [12–15]. The state-of-the-art reviews of these algorithms as well as their applications in structural optimization problems are outlined in Refs. [16,17].In spite of many advantageous characteristics of the metaheuristics, the slow rate of convergence toward the optimum and the need for a high number of structural analyses are conceived as the downside of the search features of these techniques in structural optimization applications. It is known that response computations of designs sampled during a search process usually occupies 85–95% workload of a metaheuristic technique [18], and thus large number of structural analyses substantially increases the total computing time. One solution to this is to reduce the total computational time by taking advantage of high performance computing methods, such as parallel or distributed computing techniques. The basic idea in this approach is to distribute the total workload of the algorithm amongst multiprocessors of a single computer or within a cluster of computers connected to each other via local area network. In Hasançebi et al. [18], a maximum speedup ratio between 12.2 and 16.8 was achieved for three design optimization instances solved using a cluster computing system consisting of 32 processors. Another approach, which is more straightforward and easier to apply, is to develop efficient strategies to be used in conjunction with metaheuristic algorithms for diminishing the number of structural analyses required in the optimization process. Recently, an upper bound strategy (UBS) is proposed in Kazemzadeh Azad et al. [19], where unnecessary structural analyses are avoided during the course of optimization through a simple and efficient mechanism. The key issue in the UBS is to identify those candidate solutions which have no chance to improve the search during the iterations of the optimum design process. After identifying those non-improving solutions, they are directly excluded from the structural analysis stage, resulting in a significant saving in computational effort.The self-adaptive step-size search (SASS) algorithm is a recently proposed optimization technique based on a self-adaptive hill-climbing strategy [20]. In addition to its ability for tackling practical optimization instances, the facts that it has a simple algorithmic structure and need relatively a small number of parameters for implementation are amongst the advantageous features of this algorithm. In Nolle [21] the SASS algorithm is successfully employed to find the optimum profiles for a simulated rolling mill. Nolle [22] also applied this algorithm to automated Langmuir probe tuning problem and reported numerical results indicating the favorable application of the technique. Later, Nolle and Bland [23] demonstrated the promising performance of the SASS algorithm in automatic optimal design of standard engineering design problems. Despite successful practical applications of the SASS algorithm available in the literature [21–23], the only specific application of the algorithm in design optimization of truss structures is limited to an optimum design of a 25-bar truss structure [23].In the present study the use and efficiency of the SASS algorithm are investigated in the context of structural optimization; sizing optimization of truss structures in particular. It is found that a standard SASS algorithm is sometimes unable to produce acceptable solutions to structural sizing optimization problems. To this end, here a refinement of the algorithm is achieved for the problems of interest and the resulting enhancement of the algorithm is referred to as elitist self-adaptive step-size search (ESASS) algorithm. The ESASS algorithm exhibits some superiority with respect to its standard variant in terms of both convergence accuracy and computational efficiency. An improved convergence accuracy of the algorithm is firstly provided by incorporating an additional randomness into the sampling step, which in effect helps maintain exploration capability of the technique throughout the optimization process. Secondly, an adaptive sampling scheme is introduced to enhance quality of the final solutions attained by the ESASS algorithm, in which generation of new candidate solutions is also favored in the neighborhood of the current best solution. On the other side, the computational efficiency of the ESASS algorithm is accelerated by avoiding unnecessary analyses during the course of optimization based on a recently developed method called upper bound strategy (UBS). The numerical efficiency of the proposed algorithm is examined using various benchmark instances of truss structures, namely a 17-bar truss, a 45-bar truss bridge, a 120-bar truss dome, and a 200-bar truss structure. The comparison of numerical results with those of other metaheuristic algorithms indicates that the ESASS algorithm is capable of locating promising designs with considerably less computational cost. Generally, the main outcomes of this study can be outlined as follows:•Developing a new truss optimization technique named ESASS.Improving convergence accuracy of the ESASS in truss optimization.Improving computational efficiency of the ESASS in truss optimization.Demonstrating the promising performance of the ESASS using benchmark examples.The remaining sections of the paper are organized as follows. Section 2 provides the mathematical formulation of the considered truss optimization problem. In Section 3, the computational steps involved in the SASS algorithm are briefly overviewed. In Section 4, the enhancements in the proposed ESASS algorithm are described extensively. The performance of the ESASS algorithm is investigated in Section 5. Finally, a brief conclusion of the study is provided in Section 6.The sizing optimization of truss structures can be stated as follows [24]:Find(1)X={v1,v2,…,vD},vmin,n≤vn≤vmax,nn=1,2,…,Dto minimize(2)f(X)=W(X)+ϕ(X)In Eq. (1), X is a candidate design,vmin,nandvmax,nare the lower and upper bounds of the nth design variablevn, and D is the total number of design variables. In Eq. (2),f(X)is the objective function (penalized weight of the structure),W(X)is the net weight of the structure, which is simply calculated by multiplying the volume of a structure by the density of constructional material, andϕ(X)is the penalty function employed for handling the constraints. The following design optimization constraints are implicitly considered in the above-mentioned penalty function.(3)gi(X)=σiσai−1≤0i=1,2,…,NM(4)dj(X)=δjδaj−1≤0j=1,2,…,NDIn Eqs. (3) and (4),gi(X)anddj(X)are the stress and displacement constraints respectively,σiandσaiare the computed axial stress in the ith member and its allowable value, respectively,δjandδajare the computed displacement in the direction of the jth degree of freedom and its allowable value, respectively, NM is the total number of truss members and ND is the total number of active degrees of freedom.In order to satisfy the feasibility criteria in the optimization process, an appropriate technique should be adopted. In this regard, penalty functions are popular tools frequently employed for handling design constraints. In this study, the following penalty function proposed by Rajeev and Krishnamoorthy [25] is utilized:(5)ϕ(X)=W(X)⋅K⋅C(6)C=∑i=1NMgi(X)+∑j=1NDdj(X)where K is a penalty constant used to adjust the intensity of penalization and C is the total amount of constraint violation for each candidate design.The present section covers the optimum design procedure based on the SASS algorithm [23]. The algorithm has a relatively simple outline, which consists of the following steps:Step 1. Initial population: Form an initial population by spreading m solution candidates over the design space. Each solution candidateXiis referred to as a particlePi(i=1,…,m)in the SASS algorithm and is considered as a vector of n design variables, i.e.Pi=(vi1,vi2,…,vin).Step 2. Evaluation of the initial population: Calculate the objective function (penalized weight value) of each feasible particle through Eq. (2) and each infeasible particle through Eq. (5). The fitness value of each particle is computed by either inverting its objective function value, or subtracting it from a constant number chosen large enough to yield always a positive value for all particles.Step 3. Selecting a particle for improvement: Select a particle for improvement in an optimization cycle. In this process each particlePi(i=1,…,m)is selected once according to its sequence number in the population, and the improvement of this particle is performed as discussed in the following steps.Step 4. Defining a maximum step size vector (Smaxi): For each particlePiselected in the previous step, choose two different particlesPkandPlrandomly from the population to define the neighborhood of the particlePibased on a maximum step size vectorSmaxi,(7)Smaxi=(Smaxi1,Smaxi2,…,Smaxin)(8)Smaxij=|vkj−vlj|forj=1,2,…,nwhere, each component ofSmaxiis equal to the absolute value of the difference between the corresponding design variables in the particlesPkandPl.Step 5. Sampling: Sample a new particleP′iin the neighborhood of the selected particlePibased onSmaxiusing Eqs. (9) and (10),(9)v′ij=vij+stepij(10)stepij∈[−Smaxij,Smaxij]forj=1,2,…,nwherevijandv′ijare the jth design variable in the particlesPiandP′irespectively, andstepijis any number randomly chosen between the range[−Smaxij,Smaxij]using a uniform distribution.Step 6. Evaluation of the sampled particle: Calculate the fitness value of the newly sampled particleP′iin accordance with Eq. (2) or Eq. (5).Step 7. Updating: Compare the sampled particleP′iwith the original particlePibased on their fitness values. Iff(P′i)<f(Pi)thenPiis updated and replaced byP′i, otherwisePiis retained.Step 8. Termination: Go to Step 3 until a stopping criterion is satisfied, which can be imposed as a maximum number of iterations or no improvement of the best design over a certain number of iterations. It is worth mentioning that one cycle in SASS is composed of m iterations.In this study a refinement of the SASS algorithm is achieved for sizing optimization of steel truss systems. The resulting enhancement of the technique is referred to as elitist self-adaptive step-size search (ESASS) algorithm. The proposed algorithm exhibits some superiority with respect to its standard variant in terms of both convergence accuracy and computational efficiency. In the following the enhancements in the ESASS algorithm are discussed with respect to both aspects of the search process.In the SASS algorithm typically the components of step size vectorSmaxiare large in the initial cycles due to a random generation of the initial population, and they tend to decrease adaptively with the convergence of the population as the search goes on. This self-adaptive nature of the algorithm is intended to provide a suitable search mechanism by sampling new particles in a restricted, yet more favorable region of the design space in the following cycles. However, when the performance of the algorithm is investigated through numerical examples, it is observed that theSmaxivalues tend to become very small or even zero after a certain number of cycles, resulting in negligible or sometimes no changes in the generated particles. It follows that exploration ability of the algorithm vanishes in time, leading to degenerated or sometimes totally disabled search process by the SASS algorithm. As a remedy to this problem, Eq. (9) is somewhat modified in the proposed ESASS algorithm. An additional term (randij) based on a standard normal distribution,N(0,1), with a mean of zero and standard deviation of 1, is used in each iteration with a probability ofRpas follows:(11)v′ij=vij+stepij+randij(12)randij=N(0,1)ifuij<Rp0ifuij>Rpwhereuijis a uniform random number selected between 0 and 1. The rationale behind Eqs. (11) and (12) is to facilitate stochastic changes in the generation of new particles to keep alive the exploration capability of the algorithm especially when theSmaxivalues are decreased to unnecessarily low values. However, not all components of the particle are subjected to stochastic change, instead this is controlled by the probabilityRp. In addition, the use of a normally distributed random number in this formulation ensures that the small perturbations occur more often than the large ones.On the other hand, some metaheuristic algorithms based on elitist strategies have been found to be very efficient in locating optimum or near-optimum solutions while tackling complicated design optimization problems [26–28]. For instance, two enhanced metaheuristic algorithms [27,28] that are specifically developed by the authors for handling sizing optimization problems work fundamentally on the basis of an elitist strategy where the new candidate solutions are generated in the vicinity of the current best design. An attempt is made here to implement an elitist strategy in the ESASS algorithm where the sampling of new particles (Step 5) is encouraged in the neighborhood of the best-so-far particle in accordance with Eq. (13)(13)v′ij=vijbest+stepij+randijwherevijbestrefers to the jth component of the best particlePbestfound so far in the optimization process.It should be noted that Eqs. (11) and (13) offer two competitive formulations to be used in place of Eq. (9) for sampling new particles in searching the design space. Apparently, a more explorative search is provided with Eq. (11), whereas Eq. (13) motivates a more exploitative search by benefitting from previously visited best solution. To combine these two useful search features in an efficient manner, an adaptive sampling scheme with the following pseudo-code is developed in the ESASS algorithm:if (ui≤Rs) then-Pselected=PiSample new particleP′iusing Eq. (11)else-Pselected=PbestSample new particleP′iusing Eq. (13)In the proposed adaptive sampling scheme a new particleP′iis generated by applying either one of these two sampling equations (Eqs. (11) and (13)) probabilistically. Here the sampling probability parameterRs∈[0,1]controls the sampling scheme to be implemented when generating a new particle. For each particle, a uniform random numberuiis generated anew between 0 and 1, and at times whenui≤Rs, the new particle is sampled using Eq. (11), otherwise it is generated using Eq. (13). It follows that the probability of sampling a new particle with Eqs. (11) and (13) isRsand1−Rs, respectively. TheRsparameter is initially set to 0.5 to give an equal chance to either sampling scheme in the beginning. However, when iteration of a cycle is completed (i.e. when m number of particles are sampled and evaluated in a cycle)Rsis updated adaptively using Eq. (14), and this way the search is biased toward the sampling scheme that exhibits a better performance at the previous iteration.In Eq. (14),RstandRst+1represent the sampling probability parameters at cycles t and t+1, respectively. Accordingly, if the best designPbestis improved by a particle sampled using Eq. (11) at the previous iteration,Rsis increased by 0.01; otherwise ifPbestis improved by a particle sampled using Eq. (13), thenRsis lowered by 0.01. No update ofRsis carried out ifPbestis not improved at the previous iteration.The necessity for a large number of structural analyses involved in the optimization task can be deemed as a major shortcoming for almost all metaheuristic algorithms in structural design optimization applications. To this end, the computational efficiency of the ESASS algorithm is accelerated here by using the recently developed upper bound strategy (UBS) method [19]. In the UBS, unnecessary structural analyses are avoided during the course of optimization through a simple, yet, efficient mechanism. The key issue in the UBS is to identify those candidate solutions which have no chance to improve the search during the optimum design process. After identifying those non-improving solutions, they are directly excluded from the structural analysis stage, diminishing the computational effort.In this approach, basically the penalized weight of a current solution is considered as an upper bound limit for the net weight of a newly generated solution. Accordingly, a new solution with a net weight greater than this limit is excluded from the structural analysis stage. This strategy is used in the ESASS algorithm as follows. Here, after a new particleP′iis sampled in Step 5 in the vicinity of a selected particlePiorPbest, first the net weight ofP′i, i.e.W(P′i), is calculated only; not the penalized weight. This computation is straightforward and can be done with a trivial computational effort. IfP′ihas a net weight smaller than or equal to the penalized weight of the selected particlef(Pselected), the structural analysis of the new particle is processed and its penalized weight is computed. In the opposite case, i.e.W(P′i)>f(Pselected), however, the upper bound rule is activated andP′iis automatically excluded from the structural analysis phase required for response computations in Step 6, since such a candidate is unlikely to improve the selected design.It should be noted that in cases where the amount of penalty and net weight of structures (see Eq. (2)) are in the same scale, the use of UBS is not efficient. Because usually net weight of a newly generated candidate solution is not expected to be greater than the penalized weight of a highly infeasible solution found so far in the course of optimization. However, this happens mostly in the initial iterations of the optimization process where infeasibility of candidate designs is relatively high. In the subsequent iterations, once better solutions having low constraint violations are located, the UBS becomes much more efficient.It is worth mentioning that the UBS is originally proposed as a strategy to be used in conjunction with all metaheuristic techniques that employ aμ+λselection scheme [29] in their algorithmic models. However, in the present study it is demonstrated that the UBS can be efficiently used in conjunction with other selection schemes such as the one involved in the ESASS algorithm as well. The main question here is the efficiency of the ESASS algorithm in tackling the design optimization problems of truss structures. This is answered in the following section through benchmark design optimization instances of truss structures.In the present section the performance of the proposed ESASS algorithm is investigated through four benchmark examples of truss optimization; namely a 17-bar truss, a 45-bar truss bridge, a 120-bar truss dome, and a 200-bar truss structure. Since the third example is studied in two different cases, totally five different test cases are involved in the present study. The population size in the ESASS algorithm is set to 50 and the value of parameterRpin Eq. (12) is set to 0.1. The value of penalty constant, K, for all the investigated examples is set to 1 as proposed in Ref. [30]. Due to the stochastic nature of the technique, each design example is independently solved five times using the ESASS algorithm and the best feasible solution obtained is adopted for the sake of comparison. Here, the maximum number of cycles is considered as the termination condition, which is set to 250 for the first and third examples; and 350 for the second and fourth examples.The 17-bar truss structure, shown in Fig. 1, is chosen as the first sizing optimization example. As depicted in Fig. 1, a single vertical load of 100 kips (444.82kN) is applied at node 9. Here, the cross sectional areas of elements are considered as 17 sizing design variables, for which the minimum allowable value of each variable is 0.1in.2 (0.6452cm2). The density of the utilized material is 0.268lb/in.3 (7418.214kg/m3) and the modulus of elasticity is 30,000ksi (206,842.8MPa). The members are subjected to the stress limits of ±50ksi (344.738MPa) and displacement of all nodes in both horizontal and vertical directions is limited to ±2.0in. (5.08cm).The optimization history showing the variation of the best penalized weight during the cycles of the EASS algorithm is depicted in Fig. 2. In Table 1the feasible best (optimum) design located by the ESASS algorithm is compared with the available results in the literature based on an adaptive real-coded genetic algorithm (ARCGA) [31], an artificial bee colony algorithm (ABC) [32], and a modified artificial bee colony algorithm (MABC) [32]. According to these results, the ESASS algorithm locates an optimum design weight of 2581.93lb, which is lighter than the design weights obtained by the other techniques. However, the number of structural analyses performed using the ESASS algorithm is only 5941, which is significantly less than those of the ARCGA (i.e. 10,000), ABC (i.e. 20,000), and MABC (i.e. 20,000) algorithms.It should be noted that, a total of 12,500 structural analyses required by the ESASS algorithm in 250 cycles (when UBS is not employed) is reduced to 5941 analyses as a result of integrating the UBS with the ESASS algorithm. Fig. 3shows the amount of saving in structural analyses at each cycle of the ESASS algorithm. The markers on the graph show the number of structural analyses saved out of a total number of 50 analyses in each cycle. For example a saving of 30 in one cycle of the ESASS algorithm means that only 20 particles are analyzed and the remaining 30 particles are excluded from the structural analysis stage due to their violation of the upper bound limit.For the second example, sizing optimization of the 45-bar truss bridge shown in Fig. 4is carried out, which has been formerly studied in Hadidi et al. [32] using ABC and MABC algorithms. Here, nine vertical loads of 10 kips (44.48kN) are applied at nodes 3, 5, 7, 9, 11, 13, 15, 17 and 19. The stress limit is 30ksi (206.843MPa) in both tension and compression for all the members of the structure. The displacements of all nodes in both lateral and vertical directions are limited to ±2.0 in (5.08cm). The material density is 0.283lb/in.3 (7833.41kg/m3) and the modulus of elasticity is 30,000ksi (206,842.8MPa). For design purpose, the members of the structure are linked into 23 groups (sizing design variables) taking into account the symmetry of the structure. The lower bound of all sizing variables is 0.1in.2 (0.6452cm2).The optimization history showing the variation of the best penalized weight during the cycles of the EASS algorithm is depicted in Fig. 5. In Table 2the feasible best (optimum) design located by the ESASS algorithm is compared with the available results in the literature. According to these results, the ESASS algorithm locates an optimum design weight of 7967.98lb, which is lighter than the minimum weight obtained by the MABC algorithm. However, the number of structural analyses performed using the ESASS algorithm is only 9349, which is significantly less than 40,000 analyses carried out by the ABC and MABC algorithms. It should be noted that, a total of 17,500 structural analyses required by the ESASS algorithm in 350 cycles (when UBS is not employed) is reduced to 9349 analyses as a result of integrating the UBS with the ESASS algorithm. Fig. 6shows the amount of saving in structural analyses at each cycle of the ESASS algorithm.Design optimization of the 120-bar truss dome shown in Fig. 7is performed in Soh and Yang [33] using both shape and sizing design variables. In this study, only the sizing optimization of the structure is carried out. The dome is subjected to vertical loading at all unsupported nodes. The loads are taken as −13.49kips (−60kN) at node 1, −6.744 kips (−30kN) at nodes 2–14, and −2.248kips (−10kN) at the rest of the nodes. The minimum allowable cross sectional area of each member is limited to 0.775in.2 (5cm2). For design purpose the allowable tensile stress is taken as 0.6Fyand the compressive stress constraintσibof the ith member is computed as follows [34]:(15)σib=1−λi22CcFy/53+3λi8Cc−λi38Cc3forλi<Cc12π2E23λi2forλi≥CcwhereFyis the yield stress of steel, E is the modulus of elasticity,λiis the slenderness ratio (λi=kLi/ri), k is the effective length factor,Liis the length of the ith member,riis the radius of gyration, andCc=2π2E/Fy. Here, the material density is 0.288lb/in.3 (7971.81kg/m3), Fy=58ksi (400MPa), E=30,450ksi (210,000MPa). In this example, two different displacement constraints are considered in two separate test cases: case-1: no displacement constraints are imposed; and case-2: the displacements of all nodes in directions x, y, and z directions are limited to ±0.1969 in (±0.5cm).The optimization histories showing the variation of the best penalized weight during the cycles of the EASS algorithm in both test cases are depicted in Fig. 8(a) and (b). The optimum designs attained using the ESASS algorithm are given in Tables 2 and 3in comparison to the available results in the literature, such as ABC [32], MABC [32] and firefly algorithm (FA) [35]. It is seen from Tables 3 and 4that, the ESASS algorithm produces design weights of 19,706.62lb and 19,901.42lb for the dome in the test cases 1 and 2, respectively, which are the same as minimum weights located by the MABC algorithm. However, the number of structural analyses performed using the ESASS algorithm are only 8989 and 8890 for the cases 1 and 2, respectively, which are significantly less than those of the FA (i.e. 15,000), ABC (i.e. 20,000), and MABC (i.e. 20,000) algorithms.Sizing optimization of the 200-bar truss structure shown in Fig. 9is considered as the last example. The density of the material is 0.283lb/in.3 (7833.41kg/m3) and the modulus of elasticity is 30,000ksi (206,842.8MPa). The members are only subjected to the stress constraints with limits of ±10ksi (68.948MPa). Here, the structure is subjected to three independent loading conditions:(1)1.0kip acting in the positive x direction at nodes 1, 6, 15, 20, 29, 34, 43, 48, 57, 62, 71,10kips acting in the negative y direction at nodes 1, 2, 3, 4, 5, 6, 8, 10, 12, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26,…,71, 72, 73, 74, and 75,Conditions 1 and 2 acting together.Since the members of the truss are linked into 29 groups, there are totally 29 sizing design variables. This design optimization problem is formerly solved by GA in Ref. [36] using discrete design variables taken from the list S=[0.1, 0.347, 0.44, 0.539, 0.954, 1.081, 1.174, 1.333, 1.488, 1.764, 2.142, 2.697, 2.8, 3.131, 3.565, 3.813, 4.805, 5.952, 6.572, 7.192, 8.525, 9.3, 10.85, 13.33, 14.29, 17.17, 19.18, 23.68, 28.08, 33.7] (in.2). For the sake of conformity, the same list of discrete sections is employed in this study for sizing the truss members.Discrete sizing of the 200-bar truss structure is performed using the ESASS algorithm and the optimum design found is presented in Table 5. For comparison purpose this example is also solved in this study using the aforementioned ARCGA and MABC algorithms and the corresponding optimization results are tabulated in Table 5. It is seen from Table 5 that, the ESASS gives a design weight of 28,075.488lb which is lighter than the design weights obtained by the other techniques. Furthermore, the number of structural analyses performed using the ESASS algorithm is only 11,156, which is significantly less than those of the GA (i.e. 51,360), ARCGA (i.e. 25,000), and MABC (i.e. 40,000) algorithms. The optimization history showing the variation of the best penalized weight during the cycles of the EASS algorithm is depicted in Fig. 10.In the present study, an elitist self-adaptive step-size search (ESASS) algorithm is developed as an enhancement and adaptation of the SASS technique for optimum design of truss structures. As compared to SASS, the proposed ESASS algorithm offers enhanced search characteristics in terms of both convergence accuracy and computational efficiency.Firstly, an improved convergence accuracy of the algorithm is provided by incorporating an additional randomness into the sampling step, which provides stochastic changes in the generation of new particles to preserve the exploration capability especially when maximum step sizes are reduced to unnecessarily low values. The use of a normally distributed random number in this formulation ensures that the small perturbations occur more often than the large ones. Secondly, an adaptive sampling scheme is introduced, where in addition to using existing particles in the population, generation of new particles are motivated in the neighborhood of the current best solution thorough an adaptive procedure. In this procedure, a new particle is generated by applying either one of the two sampling schemes under equal probability in the beginning. However, when iteration of a cycle is completed, the sampling probability parameter is updated adaptively to bias the search scheme toward the one that exhibits a better performance at the previous iteration.On the other hand, the computational efficiency of the ESASS algorithm is accelerated with the UBS by avoiding unnecessary analyses during the course of optimization. For performance evaluation, efficiency of the ESASS algorithm is tested in optimum design of different benchmark examples of truss structures; namely a 17-bar truss, a 45-bar truss bridge, a 120-bar truss dome, and a 200-bar truss structure. In comparison to some contemporary representatives of metaheuristics the ESASS algorithm locates the best solution for the first, second, and fourth examples, and obtains the same minimum weight designs attained by the MABC algorithm for the third example.Furthermore, as a result of integrating the UBS with the ESASS algorithm the total number of required structural analyses is reduced; more specifically 52% for 17-bar truss example, 47% for 45-bar truss bridge example, 28–29% for 120-bar truss dome example, and 36% for 200-bar truss example. Further research can be carried out to investigate the efficiency of the ESASS algorithm in the other categories of structural optimization such as shape and topology optimization.

@&#CONCLUSIONS@&#
