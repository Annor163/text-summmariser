@&#MAIN-TITLE@&#
Differential evolution and underwater glider path planning applied to the short-term opportunistic sampling of dynamic mesoscale ocean structures

@&#HIGHLIGHTS@&#
Differential evolution algorithm is applied to underwater glider path planning.Underwater glider kinematic simulation with daily and hourly sea currents prediction.Experimental set with trajectories avoiding islands and spatially changing scenarios.Suggested jDE/best/1/bin outperforms compared optimization algorithms and ranks top.A real case glider vessel mission is commanded using the proposed approach.

@&#KEYPHRASES@&#
Differential evolution,Underwater robotics,Autonomous underwater vehicle,Glider path planning,Mesoscale ocean eddies,

@&#ABSTRACT@&#
This paper presents an approach where differential evolution is applied to underwater glider path planning. The objective of a glider is to reach a target location and gather research data along its path by propelling itself underwater and returning periodically to the surface. The main hypothesis of this work is that gliders operational capabilities will benefit from improved path planning, especially when dealing with opportunistic short-term missions focused on the sampling of dynamic structures. To model a glider trajectory, we evolve a global underwater glider path based on the local kinematic simulation of an underwater glider, considering the daily and hourly sea currents predictions. The global path is represented by control points where the glider is expected to resurface for communication with a satellite and to receive further navigation instructions. Some well known differential evolution instance algorithms are then assessed and compared on 12 test scenarios using the proposed approach. Finally, a real case glider vessel mission was commanded using this approach.

@&#INTRODUCTION@&#
In this paper we present a new approach for underwater glider path planning (UGPP) [1,2] using differential evolution (DE) [3]. An underwater glider is an autonomous underwater vehicle (AUV), a nautical robotic vessel, operating on and below sea surface. The underwater glider propels itself by producing small changes in its buoyancy and transforming the resultant vertical motion to horizontal displacement by means of the interaction between the vehicle control surfaces and the water column. A part of underwater glider operations occurs also on the sea surface when periodic satellite or wireless communication with the control center takes place. With the proposed approach, the UGPP trajectory for navigating a real-world vessel is evolved using DE within real-time mission planning limitations. The UGPP trajectory optimization is even more interesting when the current field is not homogeneous and bearings are non-trivial. Therefore the hypothesis of this work is that gliders operational capabilities will benefit from path planning, especially when dealing with opportunistic short-term missions focused on dynamic structures.This work is specifically concerned with the sampling of highly dynamic ocean structures. When a glider is performing a long-term extended range mission in the open sea, the piloting can apply reactive control strategies with minor penalties. This corresponds to a traditional human in the loop control based in a trial and error command scheme. Nevertheless, there is a growing interest in extending the operational capacities of the gliders to deal also with short term opportunistic applications. During a long mission, for example, dynamic structures can appear in the vicinity of the glider offering windows of opportunity for collecting valuable scientific data. Some representative examples of this structures include eddies, fronts, plumes or algae blooms. However, in these scenarios, a reactive control scheme is no longer valid due to the typically short duration and relatively rapid spatial evolution of the structures of interest. In order to maximize the possibilities of success, the glider behaviour needs to be anticipated according to as precise as possible forecasts of the environment conditions. Under this perspective, it is interesting to have at hand automatic path planning tools able to generate a feasible trajectory for the vehicle in a reasonably short period of time. The glider mission planning needs to be completed in a few hours, minutes in some critical applications, in order to prepare the mission files to be downloaded for the next underwater segment.Until now, researchers have addressed the UGPP problem mostly using classical mathematical programming methods, simulated annealing, and genetic algorithms [4,5]. Now we address the UGPP problem by DE and show, that (1) DE is suitable for UGPP optimization and (2) suggest especially good performing DE variants for UGPP. The differential evolution is a family of algorithms which exhibits many existing variants and specific recommendations on its mechanisms and parameters fine-tuning. Therefore we seek to utilize some of its most widely used instance variants, so as to make first insight into which DE variants are most suitable for UGPP, especially when compared on typical scenarios of dynamic mesoscale ocean structures where short-term opportunistic sampling most benefits to the broader UGPP mission planning. This very insight and the two DE assessment perspectives are the main contributions of this paper.For a certain DE algorithm, the jDE algorithm [6], which is mostly reported to perform best when using a randomly chosen population vector during mutation (known as ‘rand’ DE mutation [3]), we also show that on a small number of function evaluations like UGPP, we can confirm on 12 test UGPP scenarios that when the best population vector within mutation is used (known as ‘best’ DE mutation [3]), the jDE algorithm performs better than when using its most widely used ‘rand’ mutation. Considering the UGPP model utilized, this observation is another contribution of this paper to UGPP advances.In the next section, the related work on differential evolution and other optimization techniques and the background of the glider path planning is presented. In Section 3, the proposed approach for glider path planning using differential evolution is described. In Section 4, experimental results together with a real-world mission case are reported. Section 5 concludes with final remarks and suggestions for future work.In this section, the differential evolution is presented. Then, underwater glider path planning is discussed and possible benefits of using differential evolution with it.Differential evolution (DE) was introduced by Storn and Price [3] with a floating-point encoding evolutionary algorithm [7] for global optimization over continuous spaces. Its main performance advantages over other evolutionary algorithms [6,8–10] lie in floating-point encoding and a good combination of evolutionary operators, the mutation step size adaptation, and elitist selection. The DE has a main evolution loop in which a population of vectors is computed for each generation of the evolution loop. During one generation g, for each vector xi, ∀i∈{1, 2, …, NP} in the current population, DE employs evolutionary operators, namely mutation, crossover, and selection, to produce a trial vector (offspring) and to select one of the vectors with the best fitness value. NP denotes population size and g∈{1, 2, …, G}, the current generation number.Mutation creates a mutant vector vi,g+1 for each corresponding population vector. Among many proposed, one of the most popular DE mutation strategies [11,3] are the ‘rand/1’:vi,g+1=xr1,g+F(xr2,g−xr3,g)and the ‘best/1’:vi,g+1=xbest,g+F(xr1,g−xr2,g),where the indexes r1, r2, and r3 represent the random and mutually different integers generated within the range {1, 2, …, NP} and also different from index i. The xbest,gdenotes the currently best vector. F is an amplification factor of the difference vector within the range [0, 2], but usually less than 1. The first term in the mutation operators defined above is a base vector. Following, the difference of two chosen vectors denotes a difference vector which after multiplication with F, is known as amplified difference vector. The simple DE mutation ‘rand/1’ is by far most widely used [12], however, a form of ‘best/1’ mutation has also been signified beneficial, especially in more restrictive evaluation scenarios [13–15].After mutation the mutant vector vi,g+1 is taken into recombination process with the target vector xi,gto create a trial vector ui,g+1={ui,1,g+1, ui,2,g+1, …, ui,D,g+1}. The binary crossover operates as follows:ui,j,g+1=vi,j,g+1ifrand(0,1)≤CRorj=jrandxi,j,gotherwise,where j∈{1, 2, …, D} denotes the jth search parameter of D-dimensional search space, rand(0, 1)∈[0, 1] denotes a uniformly distributed random number, and jranddenotes a uniform randomly chosen index of the search parameter, which is always exchanged to prevent cloning of target vectors. CR denotes the crossover rate [16]. Finally, the selection operator propagates the fittest individual [17] in the new generation (for minimization problem):xi,g+1=ui,g+1iff(ui,g+1)<f(xi,g)xi,gotherwise.DE was proposed by Storn and Price [3] and since then, it has been modified and extended several times with new versions proposed [11,18–26,12] and performance of different DE variant instance algorithms are widely studied and compared to other evolutionary algorithms, also on various competitions at major scientific conferences, where DE won several evolutionary algorithm competitions [27–29,10]. Recent DE algorithms are also introduced by Wang et al. [30–32], Gong et al. [33], Islam et al. [34], Ghosh et al. [35], Jia et al. [36], Piotrowski [37], and Cheng et al. [38]. DE is also introduced for multi-objective optimization [39,40]. In a DE survey by Neri and Tirronen [26], it is concluded compared to the other algorithms, that jDE algorithm [6] is superior in terms of robustness and versatility over diverse benchmark set. The jDE algorithm derivatives have also won 2009 WCCI Dynamic and Uncertain Environments competition [29] and performed well on other competitions, i.e. Large Scale Global Optimization in 2008 and 2010 [41,42], Real-World Industry Challenges in 2011 [43], and the most recent Real Parameter Single Objective Optimization in 2013 [15], where more than half of entry algorithms are based on DE. Therefore, we choose to apply a DE in this paper for an optimizer and also try utilizing a slightly modified jDE algorithm.Successful DE applications are also published in several major journals. Joshi and Sanderson [13] present DE for minimal representation multisensor fusion. Chang and Chang [44] use DE to reduce harmonic voltage distortion in electrical distribution systems. Varadarajan et al. [45] consider DE for reactive power dispatch. Bošković et al.use history mechanism modified DE to parametrize computer chess engine evaluation function metrices [14]. Maulik et al. [46] apply DE for pixel classification. DE is also applied to remote sensing image sub-pixel mapping [47], image thresholding [48], and parallel problem solving [49,50]. Zamuda et al. [51,52] use DE for reconstruction of procedural tree models within EcoMod ecosystem rendering framework [53]. Alatas et al.present mining numeric association rules in optimization of multi-objective problems [54]. Tirronen et al. applies DE to paper production defects detection [55]. Tušar et al. use their DEMO optimizer to parametrize an electric motor design [40]. Salvatore et al. [56] utilize DE to optimize an algorithm for sensorless induction motor control. DE has also been applied in the robotics and autonomous systems class of applied soft computing. Joshi et al. [13] use DE to fuse multi-sensor data in building intelligent robotic systems. Robot motion planning and navigation is also addressed by DE by Aydin and Temeltas [57] and Chakraborty et al. [58]. Recently Neri and Mininno [59] apply DE to Cartesian robot control by introducing memetic operators and compact representation.An ocean glider is an autonomous vehicle that propels itself changing its buoyancy. The resultant vertical velocity is transformed into an effective horizontal displacement by means of the active modification of the pitch angle and the effect of the control surfaces. The glider motion pattern is constituted by a series of “v” descending/ascending profiles between two target maximum and minimum depths, after which the vehicle returns to surface to transmit data and update its target way-points.Ocean gliders constitute an important advance in the highly demanding ocean monitoring scenario. Their efficiency, endurance, and increasing robustness make these vehicles an ideal observing platform for many long-term oceanographic applications [60]. Nevertheless, they have proved to be useful as well in the opportunistic short-term characterization of dynamic structures. Among these, mesoscale eddies are of particular interest due to the relevance they have in many oceanographic processes [61]. The characterization of pollution and harmful algal bloom episodes have been also included as part of recent glider missions. Having the potential of fully autonomous operation, usual control scheme of ocean gliders does not exploit these capacities too much and relies mainly in a human-in-the-loop approach.Path planning plays a main role in glider navigation [62] as a consequence of the special motion characteristics these vehicles present. Indeed, ocean current velocities are comparable to or even exceed low speed of a glider, typically around 1km/h (0.28m/s). In such situations a feasible path must be prescribed to make the glider reach the desired destination. This can be accomplished by analyzing the evolution of the ocean currents predicted by a numerical model. The problem is not trivial, as the planner must take into account a 4D, spatio-temporally varying field over which to optimize. Also, since increasing the number of function evaluations (FES) degrades the optimization execution time and jeopardizes mission planning time (limiting the optimization time to minutes), it is inevitable to put a restriction on FES, e.g. limit to roughly 2000 FES which may compute in a few minutes.Different solutions to the glider path planning problem can be found in the literature. Inanc et al. [63] propose a method that applies Nonlinear Trajectory Generation (NTG) on a Lagrangian Coherent Structures (LCS) model to generate near-optimal routes for gliders on dynamic environments. Alvarez et al. [4] use genetic algorithms (GA) to produce suitable paths in presence of strong currents while trying to minimize energy consumption. Other authors have put the focus on the coordination of glider fleets to define optimal sampling strategies [64]. A multi-objective GA was also applied to autonomous underwater vehicles for sewage outfall plume dispersion observations [65], which considered two objectives, i.e. the maximum number of water samples besides total travel distance minimization.In the particular case of eddies, the complexity of the path planning scenario is aggravated by the high spatio-temporal variability of these structures and their specific sampling requirements [66]. Garau et al. [67] use an A* search algorithm to find optimal paths over a set of eddies with variable scale and dynamics. Smith et al. [68] propose an iterative optimization method based on the Regional Ocean Modeling System (ROMS) predictions to generate optimal tracking and sampling trajectories for evolving ocean processes. Their scheme includes near real-time data assimilation and has been tested both in simulation and real field experiments. The current state-of-the-art for glider path planning uses optimization based on a Nelder–Mead algorithm [69] (the fmisearch Matlab implementation [70]) or genetic algorithms (GA) [61]. Our aim is therefore to assess a possible application of a more recent meta-heuristics to UGPP, like the DE.By combining differential evolution and the underwater glider path planning simulator, we evolve a three-dimensional path on and under sea to find the best-fit trajectory, depending on the sea currents and underwater glider vessel dynamics. The fitness computation of an evolved trajectory inside the DE is based on glider dynamics simulation. A better fitness (i.e. takes smaller values) is obtained for trajectories ending closer towards the target point. From the glider modeling point of view, there are some complex kinematic [71] or even dynamic [72,73] models that take the different lift, buoyancy, and drag forces into account. However, they are not suitable for long-range glider navigation simulations given the high computational cost that would overrun on time restrictions. Instead, a simple kinematic point model is applied integrating the glider velocity vector with the currents vectors.In the following sections, parts of the proposed optimization procedure are described, i.e. the evolved parameters and their genotype encoding, genotype-phenotype mapping, and phenotype fitness evaluation.The glider path is iteratively evolved by minimizing its fitness evaluation. The parameters within a DE population vector x={x1, x2, …, xD} to be evolved during optimization are used to compute the bearings to be sequentially commanded to the glider at each surfacing.11A glider control system tries to make the actual heading angle the glider has equal to the orientation of the next way-point (bearing angle) commanded to the glider.The first component of the vector encodes the initial bearing, the rest encode the bearing increments.Starting normally from the last known glider position p0, the initial reference bearing angle b0∈[0°, 360°] is computed as the orientation of the desired target point ptarget:b0=bearing(p0,ptarget),where bearing() is the bearing angle computation between a glider point and a target point. The new absolute bearings b={b1, b2, …bD} are computed incrementally from the xj, j∈{1, 2, …, D}, values: b1=b0+x1, b2=b1+x2,…, bj=bj−1+xj. The dimensionality of the problem D is therefore the same as the number of bearings commanded, which equals the total number of glider surfacing. The DE parameters are encoded as floating-point scalar values packed into an individual vector of bearing increments, where ∀x1, x2, …, xD∈[−100, 100]. Extreme +180° and −180° increment values are not desirable, as they introduce ambiguities in the fitness function evaluation.Using the encoding described, we can obtain sample glider paths, as seen in Fig. 1. The example trajectories drawn are from south towards north along Gran Canaria island, obtained during our preliminary comparisons between optimization by GA (yellow, current state-of-the-art [61]) and a DE (magenta). While the target point is towards north, the DE performs visibly better.After obtaining bearings representation from a DE vector to be evaluated, the bearings are input to the glider kinematic simulator together with the dynamic currents scenario to form a trajectory. A glider point model for the kinematic simulation can be defined from the following differential equations for a sample point in position (x, y, z) at time t:x′=u+Ugcos(θ)cos(ϕ),y′=v+Ugcos(θ)sin(ϕ),andz′=w+Ugsin(θ),where x′, y′, and z′ denote differences prediction for the three-dimensional position of the glider after time t, Ug is the glider nominal surge speed, u, v, and w are the ocean current velocity components at point (x, y, z) at time t, and θ and ϕ are the pitch and heading angles, respectively. The vertical velocity component of the sea current is normally not considered as its modulus is relatively small, in fact, many ocean models do not provide this variable as output. The glider kinematic simulator integrates this velocities to compute the three-dimensional glider path taking into account the pre-defined surfacing times and maximum and minimum depths of the yo profiles.22With “yo” profile, after yo-yo, we refer to the characteristic saw tooth profile with inflections at pre-defined maximum and minimum depths.The sea current map is provided from MyOcean IBI service.33http://myodata.puertos.es/The MyOcean IBI includes a high resolution Regional Ocean Modelling System. It provides outputs for different oceanic variables in various formats in 19°W 5°E 26°N 56°N area coverage at 1/36° resolution. In the context of this work we make use of the current maps, a 3 day forecasting horizon, that include hourly two-dimensional (longitude, latitude) surface currents and daily means three-dimensional (longitude, latitude, depth) currents. For detailed short-term fine-grain simulation, both maps are combined into a three-dimensional hourly pre-processed map that is later interpolated at given position/time coordinates. For long-term simulation, and in order to reduce the computational cost, daily three-dimensional maps with nearest neighbour interpolation can be applied.After mapping the genotype x into its phenotype b as described in previous section, the process for computing the fitness function is as follows:1.Obtain last glider known position (p0).Predict next surfacing position p1:p1=simulate_stint(p0,b1,map),where p1 denotes the predicted surfacing position, b1 the bearing selected, and map represents the ocean currents predictions provided by the forecast model, and simulate_stint is the procedure that simulates the glider underwater path according to the formulas described in the previous section. Then a short surface drift simulation is applied to take into account the drifting affecting the glider position p1 while the data_send and command_receive satellite communications are performed:p1′=simulate_drift(p1,map).The resulting pointp1′is then taken as the initial point for the next local simulation and the new bearing b2 is applied. The cycle repeats until the last element of the bearings set bj, ∀j∈{1, 2, .., D}, is reached.A trial, e.g. ui,g+1, is transformed into a full glider path {pj} by concatenating a series of individual glider kinematic simulations described in the previous step.Obtain fitness value as the remaining geometrical distance from the last trajectory point pDand the target point:f(x)=||pD−ptarget||Before the distance computation, for speedup purposes the longitude and latitude differences are approximated by conversion to metric distances to avoid the use of sin and cos functions. Considering the mission ranges we are evaluating in our work, the conversion error is negligible. Algorithm 3.1 outlines an example DE instance combined with UGPP, featuring the slightly modified jDE algorithm [6] as an instance to portray a combination of UGPP with DE. The mutation strategy used with the original jDE algorithm is ‘best/1’, and the jDE algorithm is reported performing best with ‘rand/1’ strategy [74–76], while the ‘best/1’ strategy is only used in some population-structured combination [14], possibly with other strategies [15].Algorithm 3.1Differential evolution for underwater glider path planning.procedure jDE_UGPP(x*)Require: p0 (current glider location), map (MyOcean IBI), ptarget (mission target point), MAX_FES (maximum number of FES allocated), NP (DE population size), Fl, Fu, τ1, and τ2 (jDE constants)Ensure: x – list of instructions on how to navigate glideruniform randomly generate DE initial populationxi,0, ∀i∈{1..NP};for DE generation loop g (while FES <MAX_FES)dofor DE iteration loop i (for all individuals xi,gof a population) doDE individual xi,gcomputation (adaptation, mutation, crossover):Fi,g+1=Fl+rand1×Fuifrand2<τ1,Fi,gotherwise;CRi,g+1=rand3ifrand4<τ2,CRi,gotherwise;vi,g+1=xr1,g+Fi,g+1(xr2,g−xr3,g);ui,j,g+1=vi,j,g+1ifrand(0,1)≤CRi,g+1orj=jrandxi,j,gotherwise,∀j∈{1,…,D};DE fitness evaluation (UGPP simulation):b0=bearing(p0, ptarget);b1=b0+ui,1,g+1;p1=simulate_stint(p0, b1, map);forj={2, 3, …, D}:bj=bj−1+ui,j,g;pj−1′=simulate_drift(pj−1,map);{pj}={pj−1}∪simulate_stint(pj−1′,bj,map);end forf(ui,g)=||pD−ptarget||;DE selection:xi,g+1=ui,g+1iff(ui,g+1)<f(xi,g)xi,gotherwise;end forend forreturn the best individual obtained among xi,G;

@&#CONCLUSIONS@&#
We presented an approach to underwater glider path planning where differential evolution optimizes a short-term sea trajectory. This approach is especially interesting with opportunistic sampling of dynamic mesoscale ocean structures, such as eddies, which offer short-term opportunities for underwater glider path optimization.We prepare an experimental set of underwater glider path planning test scenarios, including trajectories that need to avoid the islands and spatially changing scenarios. On a unifying test bed and same conditions, we continue to suggest which existing algorithms are more suitable for UGPP. The algorithms are ranked and we also propose a combination of a jDE/best/1/bin algorithm which outperforms all other algorithms.Using our DE approach, we also commanded a few bearings during a real case UGPP mission to portray a real case of how gliders operational capabilities benefit from improved path planning, especially when dealing with opportunistic short-term missions focused on dynamic structures.As prospects for future research we see further improvement of the optimization approach, including multi-modal and multi-objective approaches. A multi-objective approach, using multiple criteria functions, could be an interesting challenge for DE and although it is difficult to define more than one objective function for the current problem (try to move as close as possible to a distant way-point), in the higher complexity of the eddy scenario multi-objective optimization seems more likely, but criteria still need to be defined.