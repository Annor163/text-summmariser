@&#MAIN-TITLE@&#
Understanding security failures of two-factor authentication schemes for real-time applications in hierarchical wireless sensor networks

@&#HIGHLIGHTS@&#
We show various security flaws in two password authentication schemes for HWSN.We put forward three general principles to explicate repeated security failures.Public-key techniques are indispensible to achieve truly two-factor security.We take the first step toward investigating into the rationales of design choices.

@&#KEYPHRASES@&#
Password authentication,Hierarchical wireless sensor networks,User anonymity,Smart card,Non-tamper resistant,

@&#ABSTRACT@&#
Understanding security failures of cryptographic protocols is the key to both patching existing protocols and designing future schemes. In this work, we investigate two recent proposals in the area of smart-card-based password authentication for security-critical real-time data access applications in hierarchical wireless sensor networks (HWSN). Firstly, we analyze an efficient and DoS-resistant user authentication scheme introduced by Fan et al. in 2011. This protocol is the first attempt to address the problems of user authentication in HWSN and only involves lightweight cryptographic primitives, such as one-way hash function and XOR operations, and thus it is claimed to be suitable for the resource-constrained HWSN environments. However, it actually has several security loopholes being overlooked, and we show it is vulnerable to user anonymity violation attack, smart card security breach attack, sensor node capture attack and privileged insider attack, as well as its other practical pitfalls. Then, A.K. Das et al.’s protocol is scrutinized, and we point out that it cannot achieve the claimed security goals: (1) It is prone to smart card security breach attack; (2) it fails to withstand privileged insider attack; and (3) it suffers from the defect of server master key disclosure. Our cryptanalysis results discourage any practical use of these two schemes and reveal some subtleties and challenges in designing this type of schemes. Furthermore, using the above two foremost schemes as case studies, we take a first step towards investigating the underlying rationale of the identified security failures, putting forward three basic principles which we believe will be valuable to protocol designers for advancing more robust two-factor authentication schemes for HWSN in the future.

@&#INTRODUCTION@&#
With the rapid development of micro-electromechanical systems and wireless network technologies, wireless sensor networks (WSNs) have drawn increasing interest from both academic and industrial areas due to its easy deployment, ubiquitous nature and wide range of applications. Generally speaking, there are two architectures available for WSNs: the distributed flat architecture and the hierarchical architecture. Most large-scale WSNs prefer to follow the latter, for it is more energy-efficient and has more operational advantages than its flat counterpart [1]. In hierarchical wireless sensor networks (HWSN), there is a hierarchy among the nodes based on their capabilities: base station, cluster heads and sensor nodes. The HWSN is divided into a number of clusters to enhance its flexibility and to save energy consumption. Each cluster is administered by a cluster head. Sensor nodes communicate with each other in the same cluster and finally communicate with the cluster head via one-hop or multi-hop transmission(s). The base station is typically a gateway to another network, a powerful data processing and storage center, or also an access point for human interface. In this study, we focus mainly on HWSN, and more details about HWSN can be found in [2,3].In many security-critical applications, such as real-time traffic control, industrial process control, healthcare monitoring and military surveillance, external users are generally interested in accessing real-time information from sensor nodes. To facilitate the external users to access the real-time data directly from the desired sensor nodes inside HWSN without involving the base station or gateway node as and when demanded (as illustrated in Fig.1), it is of utter importance to protect the users and systems’ security and privacy from malicious adversaries because of the broadcast nature of wireless communications. Accordingly, user authentication becomes an essential security mechanism for the external user to be first authorized to the base station (or the gateway node) as well as the sensor nodes before granting his/her access to the real-time data. However, given the stringent constraints on memory capacity, computation capability, bandwidth and energy consumption of sensor nodes, it still remains quite a challenging problem to design an efficient and secure remote user authentication scheme for real-time data access directly from the desired sensor nodes inside HWSN.To address the above issues, in 2011, Fan et al. [4] proposed the first smart-card-based password authentication scheme for HWSN. This proposal involves only lightweight operations, such as one-way hash function and exclusive-OR operations, which is well-suited to the large-scale resource-limited sensor networks. The authors claimed that their scheme is free from various related cryptographic attacks, such as smart card security breach attack, offline password guessing attack, replay attack and impersonation attack. Although their scheme is efficient and has been equipped with a formal security proof, we find it actually cannot achieve the claimed security goals: (1) it cannot preserve user anonymity and (2) it is vulnerable to smart card security breach attack. The authors also overlook dimensions on which their scheme fares poorly, such as the feature of local password change, resistance to node capture attack and insider-attack.More recently, A.K. Das et al. [5] proposed a novel user authentication scheme based on traditional password and smart card to provide user access to real-time data by authorizing her directly at node level for HWSN. As with Fan et al.’s scheme [4], this protocol also only involves hash and XOR operations, with no additional symmetric encryption or asymmetric computations, and thus it is very efficient. This scheme also possesses many attractive features, such as dynamic node addition, local password change and session key establishment. Therefore, it exhibits great potential for practical applications. The authors claimed that their scheme provides better security as compared with the other related works, such as mutual authentication between the user and the cluster heads, resistance to privileged-insider attack, denial-of-service attack, node capture attack and smart card security breach attack. However, in this study, we demonstrate that it still cannot achieve the claimed security goals: (1) It is vulnerable to smart card security breach attack; (2) it fails to withstand privileged-insider attack; and (3) it suffers from the problem of server master key disclosure.There have been a number of papers [6–13] dealing with security vulnerabilities in smart-card-based password authentication (i.e., two-factor authentication [14]) schemes for WSNs. In these studies, the authors only focus on presenting attacks on target protocols and proposing ‘enhanced schemes’, nevertheless, little (to the best of our knowledge, actually no) attention is paid to the underlying rationales of the identified security failures, and to the design principles of a sound proposal. Unsurprisingly, the same mistakes are repeated over and over again. For example, many schemes using non-tamper resistant smart cards attempt to only employ symmetric cryptographic operations, such as hash functions, symmetric encryption and XOR operations, to achieve some advanced security goals like user anonymity. And the scheme proposed by He et al. [8] in 2010 falls into this category. In 2011, Kumar and Lee found this scheme actually cannot preserve user anonymity. Being fully aware of this vulnerability in He et al.’s scheme, the authors of [5,15–17] still endeavor to construct schemes that can preserve user anonymity while not employing public-key techniques. Unfortunately, as we will point out later, such attempts are to beat the air. To improve this situation, in this work, through the security analysis of the above two schemes and based on our past cryptanalysis experience, we put forward three suggestions that are crucial for designing more robust two-factor authentication schemes for WSNs, in the hope that no similar structural mistakes are made in the future.The remainder of this paper is organized as follows: in Section 2, we review Fan et al.’s scheme. Section 3 describes the weaknesses of Fan et al.’s scheme. A.K. Das et al.’s scheme is reviewed in Section 4 and the corresponding cryptanalysis is given in Section 5. Section 6 discusses the lessons learned from the cryptanalysis and the conclusion is drawn in Section 7.For a self-contained discussion, we briefly review the first efficient and denial-of-service (DoS)-resistant user authentication scheme for HWSN proposed by Fan et al. [4] in 2011. Fan et al.’s protocol involves four participants, namely, the user(Ui), the base station (BS), the master node(MNj)(i.e., the cluster head) and the sensor node (SN). Note that, the base station BS is only responsible for the registration and is not involved in the authentication process ofUi,MNjand SN. There are three phases in Fan et al.’s protocol: registration, login and authentication. For ease of presentation, we employ some intuitive notations listed in Table 1and will follow the notations in Fan et al.’s scheme as closely as possible.Before the running of this phase, it is supposed that each master node, sayMNj, has already been deployed in the designated area and shares the secret numberYjwith the base station, say BS; meanwhile, each sensor node in a cell shares the secret parameterSkwith the master node. Suppose a new userUiwants to register with the BS for accessing services, the following operations will be performed:(1)The userUichooses the identityIDiand the passwordPWi.Ui⇒BS:{IDi,PWi}.After receiving the registration request, the base station BS selects a random large numberRiand computesRIDi=h(Ri‖IDBS)⊕IDi⊕IDBS, whereIDBSrepresents the identity of BS. Then BS calculatesAi=h(X)⊕h2(IDi‖PWi)andVi=h3(IDi‖PWi).BS generates a data table including userUi’s warrantNij(e.g., the network user’s permissions, the period of validity, and the master node’s identity) for the relative master nodes and the value ofBij=h(Nij‖Yj)⊕h(IDi‖PWi). Note thatUimay not need to access all the cells in HWSN, and the warrant table aims to restrict users as to which cell they can login.BS stores{RIDi,Ri}corresponding toIDiin its database.GWN⇒Ui: A smart card containing security parametersh(·),RIDi,Vi,Ai, and the data table of warrants{Nij,Bij}.When userUiwants to acquire real-time data directly from the sensor nodes, the following operations will be performed:(1)Uiinserts her smart card into a card reader and inputs her identityIDi∗and passwordPWi∗.The smart card computesVi∗=h3IDi∗‖PWi∗and verifies whether the computedVi∗equals the storedVi. If the verification fails, it indicates thatUiis not a legal card holder and the smart card rejects.Uichooses which master node to login, and the smart card reads corresponding values of the selected master node:NijandBij. Then, it computesTKi=h((Bij⊕h(IDi‖PWi))‖T)=h(h(Nij‖Yj)‖T)andSIDi=RIDi⊕h((Ai⊕h2(IDi‖PWi))‖T)=RIDi⊕h(h(X)‖T), where T is the current timestamp on user side.The smart card computesC1=SIDi⊕TKiandC2=h(TKi‖SIDi‖Nij‖T).Ui→MNj:{Nij,C1,C2,T}.The smart card erasesIDi,PWi,SIDi,h(Nij‖Yj),h(IDi‖PWi), andh2(IDi‖PWi)from its memory, but records its last login timestamp T.This phase aims to achieve the goal of mutual authentication amongUi,MNjand SN. Meanwhile, a session key is established betweenUiand SN.(1)Upon receiving the login request{Nij,C1,C2,T},MNjfirst checks the validity of T, and then computesTKi∗=hhNij∗‖Yj‖T,SIDi∗=C1⊕TKi∗andC2∗=h(TKi∗‖SIDi∗‖Nij‖T), whereYjis the pre-shared key betweenMNjand BS. Furthermore,MNjchecksC2∗=?C2. If the equality holds,MNjaccepts the login request. Otherwise, the master nodeMNjsimply rejects.MNjstores{SIDi,T}for the subsequent operations. Note thatMNjcan reportUi’s abnormal behaviors to BS; meanwhile, BS can collect usage information aboutUiin eachMNjfor pricing. If BS receives a message{SIDi,T}sent byMNj, it can calculateRIDi∗=SIDi⊕h(h(X)‖T)and reveal the real identity ofUiby computingIDi=RID⊕IDBS⊕h(Ri‖IDBS).MNjcomputes the temporary authentication keyTKMj=h(h(Nij‖Yj)‖SIDi‖TMN)forUi, whereTMNis the current timestamp, and selects a random number K to generate the session keyKey=h(Sk‖K). Afterwards,MNjcomputesD1=Key⊕TKMj,D2=h(Key‖TKMj‖TMN)andD3=h(K‖TMN‖Sk).MNj→Ui:{D1,D2,TMN}.MNj→SN:{K,TMN,D3}.Upon receiving the message{K,TMN,D3}from its master node, SN computesD3∗=h(K‖TMN‖Sk)and checksD3∗=?D3, whereSkis shared between MN and its sensor nodes (including the sensor node SN). If the check holds, SN computes the session keyKey=h(Sk‖K).Upon receiving the response fromMNj, the smart card checks the validity ofTMN. Then, the smart card requiresUito re-enter her identity and password for verification. If it is correct, the smart card will recalculateh(Nij‖Yj)andSIDias in Step 3 of the login phase. As the last login timestamp T has been cached,h(Nij‖Yj)andSIDican be easily computed. Finally, the smart card calculatesTKMj∗=h(h(Nij‖Yj)‖SIDi‖TMN)andKey∗=D1⊕TKMj∗. IfD2∗(=h(Key∗‖TKMj∗‖TMN))is equal to the receivedD2,Uiaccepts the session key Key to secure its ensuing data communications.Note that, Fan et al.’s scheme can only deal with remote user authentication of the application-layer, other security provisions in the same or below layers, such as resistance to physical-layer jamming, sybil attack and bogus-message injection, are out of reach, and thus additional security mechanisms (e.g., [18]) should be adopted for the secure operation of the whole system. Besides, appropriate MAC, clustering and routing schemes (e.g., [19–21]) should also be in place. Another subtlety that needs special attention is that the nodes (i.e., cluster heads and sensor nodes) shall be relatively stationary after deployment, otherwise the roaming authentication (like [22]) will be involved once a sensor has moved from its one cluster to another cluster, which is too computationally and communicationally expensive for sensor nodes.The above first two implications should also be observed in any of this kind of schemes [5,8,10,12,13], while the last implication does not exist in schemes (e.g., [5]) that can accommodate dynamism of the nodes.From Fan et al.’s scheme as well as the scheme examined in Section 4 (i.e., A.K. Das et al.’s scheme [5]), we can see that: (1) this kind of schemes are three-party cryptographic protocols and (2) the cluster heads perform much more cryptographic operations (e.g, hash and encryption/decryption) than the normal sensor nodes in the login and authentication process. As these cryptographic operations are computationally intensive, they are undesirable (or even unaffordable) for common sensor nodes which are typically low-powered, computation-constrained. Consequently, this kind of user authentication schemes generally need to exploit the heterogeneities of HWSN, i.e. computational heterogeneity and energy heterogeneity, may also link heterogeneity. This in turn well explains why most works in this area (including ours) mainly focus on HWSN but not general WSNs.There are four assumptions about the adversary’s capabilities explicitly made in Fan et al.’s scheme [4]:(i)The sensitive data stored in the sensor nodes as well as cluster heads can be revealed once they are captured by an adversaryA.The secret data stored in the smart card can be extracted once a legitimate user’s smart card is somehow obtained (e.g. picked up or stolen) byA.Ahas total control over the communication channel among the userUi, the base station BS, the cluster headCHjand the sensor nodes. In other words, the attacker can intercept, block, delete, insert or alter any messages exchanged in the channel.The user-memorable identities and passwords are weak, i.e., of low entropy.It is worth noting that the above four assumptions, which are also made in the latest works for HWSN [6–9,11,15,17,23–25], are indeed reasonable: (1) Assumption i is realistic for wireless sensor networks are often deployed in hostile environments, and both the cluster heads and common sensor nodes, which are usually not equipped with tamper-resistant hardware due to cost constraints, can be physically captured by the adversary; (2) Assumption ii is practical when taking the state-of-the-art side-channel attacks [26–29], software attacks (launched on software-supported card, e.g., Java Card) [30] and reverse engineering techniques [31] into consideration, and also it has been widely accepted as a more prudent and desirable manner in designing two-factor authentication schemes since 2004 (see the dividing line in Fig.1 of [32]): put aside any special security features that could be provided by a smart-card, and simply assume that once the smart-card is in the possession of an adversary, all the sensitive parameters stored in it are known to the adversary; (3) Assumption iii is consistent with the common Dolev-Yao adversary model [33] for distributed computing; and (4) Assumption iv reveals the reality that users are allowed to choose their passwords at will during the registration phase (and the password change phase), usually the users tend to choose passwords that are related to their personal life for convenience [34,35], such as phone numbers, meaningful dates or license plate numbers, and thus these human-memorable passwords are likely to be “weak passwords” [36]. In addition, even if password-composition policies are in place to increase password strength, their effectiveness is greatly hampered by circumvention strategies employed by the users [37,38], or by inconsistent and even contradictory requirements across systems and web sites [39,40]. User’s identity, chosen in the way with the password, is often confined to a predefined format and kept static in its entire life-cycle, and thus it is as weak as (probably weaker [41] than) user’s password.In the following discussions of the security pitfalls of Fan et al.’s scheme, based on the above four assumptions, we assume that an adversaryAcan extract the secret parameters{h(·),RIDi,Vi,Ai}stored in the legitimate user’s smart card, and could also intercept or block the exchanged messages{Nij,C1,C2,T,D1,D2,TMN,K,D3}during the login and authentication processes. Although Fan et al.’s scheme has many attractive properties, such as provision of mutual authentication between the external user, master node (i.e., gateway node) and sensor node, high efficiency and key agreement, it fails to achieve the claimed security goals of resistance to user anonymity violation attack and smart card security breach attack, and it is susceptible to node capture attack and privileged-insider attack. What’s more, it has other practical pitfalls.A protocol with user anonymity protects an individual’s sensitive personal information, such as preferences, lifestyles, shopping patterns, and social circle, from being acquired by an adversary through analyzing the login information, the services or the resources being accessed [42,43]. Moreover, in wireless environments, the leakage of user-specific information may facilitate an unauthorized entity to track the user’s current location and login history [44]. Hence, user anonymity is a highly desirable feature of user authentication schemes for HWSN.To preserve user anonymity, a feasible approach is to employ the “dynamic ID technique” [45]: a user’s real identity is concealed in the session-variant pseudonym identities. The authentication schemes adopting this technique are the so-called “dynamic-ID” schemes [46,47], and Fan et al.’s scheme falls into this category. Let us see how a dishonest master nodeMNmcolluding with a malicious privileged userUmmanage to breach the anonymity of any legitimate user, sayUi. Note that the collusion of insiders is a rather practical threat in WSNs, especially when WSNs are deployed in hostile environments [48–50].Umhaving her own smart card can gather informationAmfrom her own smart card, then she can computeh(X)=Am⊕h2(IDm‖PWm)because the malicious userUmknows her own identityIDmand passwordPWmcorresponding to her smart card. With the correct value ofh(X),UmandMNmcan collude to successfully learn some sensitive user-specific information about the legitimate userUithrough the following steps:Step 1.Upon receivingUi’s login message{Nim,C1,C2,T},MNmcomputesTKi=h(h(Nim‖Ym)‖T), whereYmis shared betweenMNmand BS.MNmComputesSIDi=C1⊕TKi.MNmComputesRIDi=SIDi⊕h(h(X)‖T), whereh(X)is obtained through colluding with the malicious privileged userUm.It should be noted that,RIDiis kept the same for all the login requests of userUiand is specific to userUi. Accordingly, this valueRIDican be seen as userUi’s identification, and the attackerMNmcan, therefore, use this information to identify and track the userUi’s login requests. Our attack well serves to demonstrate the feasibility of user anonymity (un-traceability) violation attack on Fan et al.’s scheme, thereby contradicting the claim “nobody except BS can trace the userUi” that is made in [4].Let us consider the following scenarios. In case a legitimate userUi’s smart card is stolen by the adversaryA, and the stored secret parametersh(·)andVican be extracted. Note that this assumption is reasonable as described in Assumption ii and it is also explicitly made in Fan et al.’s scheme. As a concrete example, in 2008 Nohl and Evans [31] succeeded in conducting a reverse engineering attack on a MIFARE Classic chip (MIFARE) by revealing its proprietary cryptographic algorithms and subsequently breaking the entire system. With the extractedVi,Acan successfully guess the password ofUias follows:Step 1.Randomly choose a pair (IDi∗,PWi∗) fromDid×Dpw, whereDiddenotes the identity space andDpwdenotes the password space.ComputesVi∗=h3(IDi∗‖PWi∗).Verifies the correctness ofPWi∗by checking if the computedVi∗equals the extractedVi.Repeats the above steps until the correct value of (IDi∗,PWi∗) pair is found.Note that, in most password-based authentication schemes, for the sake of user-friendliness, a user is often allowed to select her own identity ID at will (often confined to a predefined format) during the registration phase; the user usually tends to choose an identity which is easily remembered for her convenience. Consequently, these easy-to-remember identities are of low entropy and thus can also be offline enumerated by an adversaryAwithin polynomial time in the same way with the passwords. Hence, in practice, it is reasonable and realistic to assume thatAcan offline enumerated all the(ID,PW)pairs in the Cartesian productDid∗Dpwwithin polynomial time, where|Did|and|Dpw|denote the number of identities inDidand the number of passwords inDpw, respectively.The running time of the above attack procedure isO(|Did|∗|Dpw|∗3TH), whereTHis the running time for Hash operation. Since both password and identity are human-memorable short strings but not high-entropy keys, in other words, they are often chosen from two corresponding dictionaries of small size. Recently empirical study of large revealed passwords sets also confirmed that,|Did|and|Dpw|are very limited in practice, e.g.|Did|⩽|Dpw|⩽106[35,36]. In conclusion, the above attack can be completed in polynomial time, demonstrating the invalidity of the claim “Through clever design, our proposed scheme can prevent smart card breaches”. For a better grasp of the effectiveness of our attack, we further acquire the experimental timings (see Table 2) of the related cryptographic operations by using the publicly-available rational arithmetic C/C++, cryptographic library MIRACL [51]. Each kind of cryptographic operation has been performed one thousand times and the corresponding value is taken an average over them.One may argue that, if the scheme falls due to the bad behaviors of the user (e.g., choosing a “weak password”), it is the user’s fault and not the proposed scheme. However, it’s a general principle that an admired and practical cryptographic protocol should follow the users’ habits and rely its security on as less strong assumptions as possible, but not simply assume that the protocol will function well only if the user never behaves badly. And particularly, in the password-based protocol setting, what one must ensure is that the protocol can prevent an adversary from attempting to determine the correct password even if it is drawn from a relatively small dictionary (a known space of possibilities) [52]. In this light, our smart card security breach attack is meaningful and constitutes a real challenge to two-factor authentication schemes for HWSN.In WWW 2007, researchers [34] from Microsoft Research conducted a large scale study on password reuse habits. Their statistical data was obtained from more than half a million users over a period of three months, and it is reported that the average user maintains about 6.5 passwords and 25 accounts that require passwords, which means each password is shared across 3.9 different sites. This work and some subsequent ones [53,54] well cohere with the common practice that, the users tend to use the same passwords (or slight variations) to access several servers for their convenience. In such situations, if a privileged-insider of BS, e.g., the administrator, has learned the user’s password, she may manage to impersonate the victim user to access other application systems. Therefore, the resistance to privileged-insider attack is an admired security feature for authentication schemes in WSNs [5,9,17].In Fan et al.’s scheme,Uisimply submits the plain-text password to BS in the registration phase. Now, ifUiuses thisPWito access other systems for her convenience, the malicious insider can impersonateUito login by abusing the legitimate user’s password and thus gets access to other systems. Therefore, Fan et al.’s scheme is susceptible to privileged-insider attack. Though it may be possible that all the privileged insiders of BS are trusted parities andUinever uses the same password to access other servers, the implementers and users of the scheme shall be well aware of such a potential risk.The resistance against node capture attack is a basic security requirement for authentication schemes in WSNs [5,17]. In [4], Fan et al. explicitly stated that, “the sensor nodes can be easily captured by the intruder, since WSNs are deployed in a hostile environment.” In the light of this statement, however, we find Fan et al.’s scheme fails to achieve this security requirement. Once a sensor node has been captured byA, the node capture attack can be launched as follows:Step 1.Extracts the security parameterSkfrom the captured node’s memory, which is practical as stated in Assumption i.Intercepts the messageK∗,TMN∗,D3∗thatMNjsends to any other non-captured sensor nodes in the same cell.Computes the session keyKey=h(Sk‖K∗), whereSkis shared among all the sensor nodes and its master node.The above attack demonstrates that, once a sensor node inside a cell is captured, the communications that are conducted by other non-captured sensor nodes in the same cell are endangered, which is obviously undesirable.In Fan et al.’s scheme, there is no password change procedure provided. That is to say, the users cannot change their passwords regularly, which is not a recommended practice, for the fixed password is definitely more vulnerable than a periodically changed one.What’s more, the scheme is not scalable, as there is no method provided for adding new nodes in the existing network. If some sensor nodes or master nodes (i.e., cluster heads) are captured by an attacker, or some nodes expire as a result of the dissipation of energy, it is often required to add some new nodes in order to replace those ineffective nodes.In this section, we briefly review the dynamic password-based user authentication scheme for HWSN proposed by A.K. Das et al. [5] in 2012. This protocol only involves three participants, i.e., the user (Ui), the base station (BS) and the cluster head(CHj). It should be noted that the base station BS is not only responsible for the registration but also involved in the authentication process ofUiandCHj. There are seven phases in this scheme: pre-deployment, post-deployment, registration, login, authentication, password change and dynamic node addition. In the following, we employ the notations listed in Table 1 and some additional notations illustrated in Table 3, and will follow the original notations in [5] as closely as possible. As we shall see, the descriptions of the scheme are rather tedious, but we manage to go through the jungle of the protocol specifications and to identify two serious security flaws.The setup server (i.e., the base station) performs offline the following steps before the deployment of the sensor nodes and cluster heads in a target field:(1)The setup server assigns a unique identifier, sayIDCHj, to each cluster headCHj. For each deployed regular sensor nodeSi, the setup server also assigns a unique identifier, sayIDSi.The setup server then selects randomly a unique master key, sayMKCHj, for each cluster headCHj. Note that the master key is shared between the cluster headCHjand the base station only. Similarly, the setup server also assigns a unique randomly generated master key, sayMKSifor each deployed regular sensor nodeSi, which will be shared with the base station only.Finally, the setup server loads the following information into the memory of each cluster headCHjits own identifierIDCHjand its own master keyMKCHj. Each deployed regular sensor nodeSiin the clusterCjis loaded with its own identifierIDSiand its own master keyMKSi.As the concern is user authentication, it is simply assumed that the deployed nodes in a cluster can establish secret keys using some existing efficient and secure key establishment techniques. After key establishment, sensor nodes can securely communicate with other neighboring sensor nodes and their cluster head in the cluster, and cluster heads can also securely communicate with other neighboring cluster heads and finally to the base station.This phase involves two participants: the userUiand the base station BS. WhenUiwants to resister with BS, the following operations will be performed:(1)The userUiselects a random number y, the identifierIDiand the passwordPWi.Uithen computesRPWi=h(y‖PWi).Ui⇒BS:{IDi,RPWi}.1As we will show later in Section 5.1, there is a design flaw here, actually, the random number y should be sent along withIDiandRPWi.1BS computesfi=h(IDi‖Xs),x=h(RPWi‖XA),ri=h(y‖x), andei=fi⊕x=h(IDi‖Xs)⊕h(RPWi‖XA).BS then selects all m deployed cluster heads in the network, denoted byCH1,CH2,…,CHm, which have been deployed during the initial deployment phase, and computes the m key-plus-id combinations{(Kj,IDCHj)|1⩽j⩽m}, whereKj=EMKCHj(IDi‖IDCHj‖Xs).For dynamic cluster head addition phase, assume that anotherm′cluster heads, denoted byCHm+1,CHm+2,…,CHm+m′, will be deployed later after the initial deployment in the network to replace some compromised cluster heads. For this purpose, the BS computes anotherm′key-plus-id combinations{(Km+j,IDCHm+j)|1⩽j⩽m′}, whereKm+j=EMKCHm+j(IDi‖IDCHm+j‖Xs). Note thatIDCHm+jis the unique identifier generated by the BS for the cluster headCHm+jto be deployed during the dynamic node addition phase, andMKCHm+jisCHm+j’s unique master key and is only shared with the BS.Finally, BS generates a non-tamper-proof smart card with the following parameters{IDi,y,XA,ri,ei,h(·),[(Kj,IDCHj)|1⩽j⩽m+m′]}.The value ofm+m′is chosen according to the memory capacity of the smart card and more discussions can be found in the original paper [5].The original specification of the above Step 6 in [5] states that “Finally, the BS generates a tamper-proof smart card with the following parameters…”. However, when evaluating the security of their protocol, A.K. Das et al. explicitly assumed that the smart card can be breached and secret data stored in its memory can be revealed. On the other hand, it is more desirable to base a scheme on a non-tamper-proof smart card in practice, for fully tamper-proof smart cards are costly and even may be unattainable. Hence, we deduce that a typo has occurred here.If the userUiwants to access real-time data from the HWSN, the userUineeds to perform the following steps:(1)Uiinserts her smart card into the card reader, and keys her passwordPWi.The smart card then computesRPWi′=h(y‖PWi),x′=h(RPWi′‖XA)andri′=h(y‖x′), and then verifies whetherri′equals the storedri. If this equality holds, it implies thatUihas entered her password correctly; otherwise, the smart card rejects. Then, the smart card computesNi=h(x′‖T1), whereT1is the timestamp on the user sideThe userUiselects a cluster head, sayCHj, from which the real-time data can be accessed inside WSN. The smart card selects the encrypted master key corresponding toCHj, i.e.Kj, from its memory and computesEij=Ekj(IDi‖IDCHj‖Ni‖ei‖T1).Ui→BS:{IDi,IDCHj,Eij}.After receiving the login request message fromUi,BSperforms the following operations:(1)The base station BS computesKj′=EMKCHj(IDi‖IDCHj‖Xs), and obtains(IDi‖IDCHj‖Ni‖ei‖T1)by decryptingEijusingMKCHj, whereMKCHjis shared between BS andCHj.BS checks if the retrievedIDiis equal to the receivedIDiand also if retrievedIDCHjis equal to receivedIDCHj. If the verification holds, BS further checks if|T1-T1∗|<ΔT1, whereT1∗is the current timestamp of BS andΔT1is the expected time interval for the transmission delay. IfT1is valid, BS further computesX=h(IDi‖Xs),Y=ei⊕X, andZ=h(Y‖T1). IfZ=Ni, then BS considersUias a valid user and acceptsUi’s login request. Otherwise, the session is terminated.BS computesu=h(Y‖T2)andEsj=EMKCHj(IDi‖IDCHj‖u‖T1‖T2‖X‖ei), whereT2is the current timestamp on BS side.BS→CHj:{IDi,IDCHj,Esj}.Upon receiving the request from BS, the cluster headCHjobtains(IDi‖IDCHj‖u‖T1‖T2‖X‖ei)by decryptingEsjusing its own master keyMKCHj.CHjthen checks the validity ofIDi,IDCHjandT2. If any check fails, the session is terminated.CHjcomputesv=ei⊕X=h(RPWi‖XA)andw=h(v‖T2)=h(h(RPWi‖XA‖T2)), and checks whether w equals the retrieved u. If the equality holds,Uiis authenticated byCHj. Otherwise, the session is terminated.CHjcomputes the session key, which is shared withUi, asSK=h(IDi‖IDCHj‖ei‖T1).CHj→BS:{ack}.BS→Ui:{ack}.On receiving the acknowledgment fromCHj,UicomputesSK=h(IDi‖IDCHj‖ei‖T1).From now on,UiandCHjcan use the established session key SK for securing future data communications.In this phase, the userUican change her password locally without the interaction with the base station BS.(1)Uiinputs her smart card into the card reader, and provides her identifierIDi, old passwordPWioldas well as the new passwordPWinew.The smart card first computesRPWi∗=hy‖PWiold,M1=hRPWi∗‖XAandM2=h(y‖M1), and then compares the computedM2with the storedri. If they do not equal, this means that the userUihas entered her old passwordPWioldincorrectly and hence, the password change phase terminates immediately.The smart card computesM3=ei⊕M1=h(IDi‖Xs),M4=h(y‖PWinew),ri′=h(y‖M4),M5=h(M4‖XA)andei′=M3⊕M5=h(IDi‖Xs)⊕h(h(y‖PWinew)‖XA), and replacesriandeiwithri′andei′, respectively.Since the dynamic node addition phase has little relevance with our discussions, it is omitted here.Due to its efficiency and provision of various admired features such as dynamic node addition and local password change, A.K. Das et al.’s scheme exhibits great application prospects, and yet it has some security flaws being overlooked as with Fan et al.’s scheme. The four assumptions listed in Section 3 are also explicitly made in A.K. Das et al.’s paper when they analyze the security of their scheme, and thus our following cryptanalysis is also based on these four assumptions. Accordingly, we assume that an adversary can extract the secret parameters{IDi,y,XA,ri,ei,h(·),[(Kj,IDCHj)|1⩽j⩽m+m′]}stored in the legitimate user’s smart card, and could also intercept or block the exchanged messages{IDi,IDCHj,Eij,Esj}during the login and authentication processes. A.K. Das et al. argued that their scheme can be free from privileged-insider attack and smart card security breach attack, however, the following attacks evidently invalidate their claims.In many scenarios, the user tends to use a common password to access several systems for his convenience [34,54]. If the user registers to the BS with password in plain-text or in some other forms that could be easily derived by an insider of BS, the malicious insider can impersonate the legitimate user to login by abusing the legitimate user’s password and thus get access to other systems [55,56]. Let’s see how A.K. Das et al.’s scheme is susceptible to this threat.First of all, we have to point out that there is a design flaw in the registration phase. In Step 2 of the registration phase,Uionly sends{IDi,RPWi}to BS, whereas BS needs to computeri=h(y‖x)in Step 3 of the registration phase. As y is randomly chosen byUi, how can BS obtain the value of y to computeri? Clearly, the parameter y should be sent along with{IDi,RPWi}to BS in Step 2 of the registration phase.Unfortunately, if y is sent along with{IDi,RPWi}in Step 2 of the registration phase, the privileged-insider attack can be performed byAas follows:Step 1.Guesses the value ofPWito bePWi∗from a dictionary spaceDpw.ComputesRPWi∗=h(y‖PWi∗).Verifies the correctness ofPWi∗by checking if the computedRPWi∗is equal to the receivedRPWi.Repeats the above steps until the correct value ofPWiis found.Let|Dpw|denote the number of passwords in the password spaceDpw. The running time of the above attack procedure isO(|Dpw|∗TH), whereTHis the running time for Hash operation. Since passwords are human-memorable short strings but not high-entropy keys, in other words, they are often drawn from a dictionary with small size, e.g.|Dpw|=106[35,36]. As|Dpw|is very limited in practice, the above attack can be completed in polynomial time. As a result, the scheme is vulnerable to privileged-insider attack.Suppose a legitimate userUi’s smart card is somehow obtained byA, and all the secret parameters{IDi,y,XA,ri,ei,h(·),[(Kj,IDCHj)|1⩽j⩽m+m′]}that are stored in the card can be extracted. In this case, A.K. Das et al.’s scheme is completely insecure.Firstly, let us show thatUi’s passwordPWican be offline guessed as follows:Step 1.Guesses the value ofPWito bePWi∗from a dictionary spaceDpw.ComputesRPWi∗=h(y‖PWi∗)andri∗=h(y‖h(RPWi∗‖XA)), where y andxAis extracted fromUi’s smart card.Verifies the correctness ofPWi∗by checking if the computedri∗is equal to the revealedri.Repeats the above steps until the correct value ofPWiis found.Let|Dpw|denote the number of passwords in the password spaceDpw. The running time of the above attack procedure isO(|Dpw|∗3TH), whereTHis the running time for Hash operation. According to Assumption iv, the user-chosen passwords tend to be weak passwords, in other words, they are often chosen from a dictionary of small size, e.g.|Dpw|=106[35,36]. As|Dpw|is very limited in practice, the above attack can be completed in polynomial time. As a result, the scheme is vulnerable to offline password guessing attack.Secondly, let us show that any ofUi’s previous session keys, saySKm, which is established duringUi’s mth authentication process, can be computed byAas follows:Step 1.DecryptsEijmusingKjto obtaineiandT1m, whereEijmis intercepted fromUi’s mth authentication process andKjis revealed fromUi’s smart card.ComputesSKm=h(IDi‖IDCHj‖ei‖T1m), whereIDiandIDCHjis intercepted fromUi’s mth authentication process.OnceSKmis obtained, the whole mth session will be exposed. In general, it is evident that all the previous sessions participated byUican be compromised.The above analysis reveals that, once the secret data in the card is extracted,Ui’s password and all the previous session keys established byUican be obtained byA. In other words, our analysis demonstrates the feasibility of smart card security breach attack on A.K. Das et al.’s scheme under their non-tamper resistance assumption of the smart card, thereby contradicting the claim made in [5].AsXsis the master secret key of the base station BS, what will happen ifXsis revealed to other parties than BS? Obviously, the security of the entire system will collapse. In the following, we show that a malicious (but legitimate) user can successfully obtainXsby just compromise only one cluster head. Assume that a malicious userUmhas compromised a cluster headCHj.Umcan recoverXsas follows:Step 1.Extracts the master keyMKCHjstored onCHj.ExtractsKj=EMKCHj(IDi‖IDCHj‖Xs)fromUm’s own smart card.RecoversIDi‖IDCHj‖Xsby decryptingKjusingMKCHj.The above attack illustrates that, under the Assumptions i and ii (see Section 3), BS’s master secret keyXscan be easily disclosed, then there is no security left at all. This is really a serious threat, considering the practicality of the Assumptions i and ii. Fortunately, we find this issue can be well addressed by modifying howKjis computed. One can see that, instead of settingKj=EMKCHj(IDi‖IDCHj‖Xs), if we letKj=EMKCHj(h(IDi‖IDCHj‖Xs))and other parts of the protocol remain unchanged, the presented attack can be thwarted, while all the other security provisions of the original protocol will be unaffected.Since smart-card-based password authentication can provide strong two-factor authentication [14], it is well-suited to security-critical applications in WSNs. A number of this type of schemes have been proposed, and some quite recent ones include [4,6,7,15–17,23,24,57,58]. However, according to [6,8,9,11] and our cryptanalysis results [25], most of these proposals have been found prone to various practical attacks. Previous research has shown that, it is really not an easy task to design a practical authentication scheme for WSNs, for the protocol designers are faced with the difficult task of reconciling efficiency, security and functionality requirements [4,59], and often must make design decisions that are seemingly well motivated but may have unintended consequences.Generally, there are three major issues challenging the design. Firstly, efficiency needs to be taken into account. Sensor nodes and user-held mobile devices (e.g., Laptops, mobile phones, PDAs and smart cards) are typically resource-constrained in terms of storage capacity and processing power. As a result, an authentication scheme should be computationally efficient. Secondly, security and privacy are serious concerns for the authentication service. Owing to the hostile environments where WSNs are usually deployed, nodes can be physically captured by an attacker. What’s worse, the participants in the scheme communicate with each other using wireless technologies, such as 802.15.4 and 802.11g, while wireless networking’s broadcast nature makes the transmitted messages readily available to anyone. In particular to HWSN, collusion attacks pose a serious threat to security, because cluster heads (or master nodes) and external users are not trusted parties and they could collude to commit malicious actions. Thirdly, a practical scheme shall support various basic functionalities, such as mutual authentication, key agreement and local user password change. Besides these basic properties, an admired scheme may be expected to provide more advanced features like dynamic node addition, insider resistance and user anonymity.Understanding security failures of cryptographic protocols is vital for designing more robust schemes, for lessons learned from the past often pave the way for the future. There have been a number of papers [6–9,11,12,60,61] dealing with security flaws in two-factor authentication schemes for WSNs, but until now, to the best of our knowledge, little attention has been paid to the underlying rationale of the identified security failures. Consequently, quite similar (sometimes even the same) mistakes are repeated time and time again, resulting in the unpleasant but unending “break-fix-break-fix” cycle (see Fig.2). For example, the scheme proposed by M.L. Das [58] in 2009 was found vulnerable to privileged insider attack by Khan and Alghathbar [7] in 2010. Unfortunately, precisely the same defect still exists in its several improved versions [7,17,24,57], while the authors of [7,17,24,57] are clearly aware of this vulnerability in M.L. Das’s scheme. For another example, Kumar et al. [61] pointed out that Yoo et al.’s scheme [23] cannot preserve user anonymity and developed an enhanced version. However, Kumar et al.’s scheme uses the same cryptographic primitives (i.e., symmetric encryption and Hash) with Yoo et al.’s scheme. As we will show later, both these two schemes are intrinsically unable to preserver user anonymity due to the same reason.As far as we know, the work in [25] is the only one that presents a principle for designing more robust two-factor authentication schemes for WSNs: the public-key techniques are indispensable to resist smart card security breach attack (offline password guessing attack) if the smart cards are assumed to be non-tamper resistant. To further ameliorate the above situation, through the security analysis of Fan et al.’s and A.K. Das’s schemes and based upon our past cryptanalysis experience (some of our recent results include [25,32,47,62,63]), we put forward three suggestions that are helpful to construct more practical two-factor schemes for WSNs in the following.First of all, there are some comments needed to be made about the notion of user anonymity in remote user authentication schemes. Briefly speaking, user anonymity includes a basic property called “initiator anonymity” and an advanced property called “sender untraceability” [62]. The former means that the adversary cannot determine the real identity of the initiator (i.e., the user), while the latter says that the adversary should be not only infeasible to acquire any knowledge of the real identity of the user but also cannot determine whether two conversations originate from the same (unknown) user.We have analyzed more than one hundred recently proposed smart-card-based password authentication schemes: more than ninety schemes for general applications (including both the single-server architecture like [32,47,62,64] and the multi-server architecture like [65]), more than thirty schemes for WSNs (e.g., [25]) and more than twenty schemes for mobile wireless networks (e.g., [22]). And we find these schemes (no matter for general purpose like [66–68] or for WSNs like [5,8,13,15–17,24,60,61,69]), which do not employ public-key techniques but claim to preserve user anonymity, definitely vulnerable to user anonymity violation attack under the non-tamper resistance assumption of the smart cards. Accordingly, we come to the conjecture that, schemes based only on symmetric cryptographic primitives (e.g., hash functions, XOR operations, symmetric encryption) are intrinsically unable to preserve user anonymity.As we have observed, there are two factors that may contribute to this failure. Firstly, for the sake of user-friendliness, a user is usually allowed to select her own identity ID at will (sometimes confined to a predefined format) during the registration phase; the user tends to choose an identity which is easily remembered for her convenience. In other words, user identities are human-memorable and as weak as passwords. Now, it is not difficult to see: there is a possibility that user’s identity can also be offline guessed byAusing the same method as guessing user’s password. And this potential has been confirmed by our user anonymity violation attack [25] on Xue et al.’s dynamic ID-based scheme. Secondly, the threats from malicious collusion often cause the scheme to fail to achieve the property of “sender untraceability” [65,70]. A malicious external user having her own smart card can gather and compute some critical parameters, e.g.H(x)in Section 3.1. Then, if the dishonest authentication server colludes with this malicious user (e.g.,MNmcolludes withUmin Section 3.1 andSkcolludes withUmin Section 5.2 of [65]), some information specific to the victim user that logins to the dishonest server may be computed. In this way, “sender untraceability” is breached.In [25], the authors managed to prove that, under the non-tamper resistance assumption of the smart cards, all the smart-card-based password authentication schemes for WSNs that only employ symmetric cryptographic primitives are vulnerable to offline password guessing attack (smart card security breach attack) with a probability ofP≠NP. And now the countermeasure is obvious: resorting to public-key techniques like [43,64,71,72], in which ECC or RSA public key technique is employed, while the studies in [73–76] have well established the feasibility and acceptability of performing a few public-key operations (e.g., scalar multiplication, Tate pairing and RSA encryption) on resource-constrained sensor nodes and smart cards. If the heterogeneities (e.g., computational heterogeneity and energy heterogeneity) of HWSN and the computational imbalance of public-key operations (e.g, RSA encryption is typically more lightweight than RSA encryption [77]) are further exploited, it is promising to see that secure, efficient and privacy-preserving two-factor schemes can be built by use of the existing public-key techniques. In addition, there might be some relationships between this proved assertion and the above conjecture, however, we promote the proof of our conjecture as one open problem.In practice, it is a widely recommended security policy for security-critical applications that a user should update her password regularly. To provide better user-friendliness, many schemes support the feature of user local password update [78], which means the users can update their passwords locally without the hassle of interacting with the authentication server (i.e., the base station in [5] or the master node in [4]). To provide secure password update, a verification of the old password should be performed before the new password update occurs. Accordingly, to support securely local password update, there should be a password-related verifier stored in the smart card. This just well explains why the parameterri=h(y‖h(h(y‖PWi)‖XA))is stored in the smart card in A.K. Das et al.’s scheme [5].It is important to notice that, A.K. Das et al.’s scheme stores password-related verifiers{ri,y,XA}in a form that is plaintext-equivalent to the password, and an adversaryAcan just exploitrito confirm whether her guessed password is correct or not. This well explicates the reason for the success of the smart card security breach attack introduced in Section 5.2. Now, it is trivial to see that, all these newly proposed schemes [5,24,60,61,67,68,79–81] that store a password-related verifier similar toriin the smart card to serve as the comparing target when updating the old password are definitely vulnerable to offline password guessing attack, once the smart card security is breached.As far as we know, under the non-tamper resistance assumption of the smart cards, until now there has been no two-factor authentication scheme for WSNs that can support securely local password change while be free from offline password guessing attack. In [63,82], the authors observed that there is an avoidable trade-off between the security requirement of resistance to smart security breach attack and the usability goal of local password change. Fortunately, they further introduced a notion of “fuzzy verifier”, which can well balance the aforementioned security requirement and usability goal.To gain more insights into this issue, we take Fan et al.’s scheme [4] as another example. Suppose a password verifier is also stored inUi’s smart card (actually, there already exists such a verifier in Fan et al.’s original scheme, i.e.,Vi=h3(IDi‖PWi)). Now, wheneverUiwants to update her password, she first keysIDiand the original passwordPWi, the smart card then validates the correctness ofPWiby checkingVi=?h3(IDi‖PWi). If the check fails, the password change request is denied. Unfortunately, now it is not difficult to see that, onceViis revealed byA, an smart card security breach attack (as demonstrated in Section 3.2) will be successfully launched by exhaustively checking whetherVi=?h3(IDi∗‖PWi∗), whereIDi∗andPWi∗are the guessed identity and password. Now if we adopt the “fuzzy verifier” technique and compute the parameterVi=h(h(h(IDi)‖h(PWi))modn), where n is a medium number (e.g.,n=210), one can be assured that there exists|Did|∗|Dpw|n≈230candidates of(ID,PW)pair to frustrateAwhen|Did|=|Dpw|=106[36,35] andn=210, where|Did|and|Dpw|denote the size of the identity space and password space, respectively. Even with the victim user’s identityIDilearnt,Awill still be prevented from determining the exactly correct passwordPWi, because there exists|Dpw|n≈210password candidates. To further eliminate the specious passwords from the remaining password candidates, there is no other way than launching an online password guessing attack by interacting with the authentication server, which can be effectively thwarted by non-cryptographic techniques [83], e.g., by blocking the victim’s account for a period of time after a few consecutive failed attempts [84,85]. In this manner, we frustrateA’s attempt to obtain the correct password. We refer the readers to [82] for more details.At the mean time, a new question arises: what will happen if a user happens to submit a wrong(IDi∼,PWi∼)pair in the password change process such thath(h(h(IDi∼)‖h(PWi∼))modn)=Vi, whilePWi∼≠PWi? Actually, this will rarely occur in reality for two reasons. For simplicity, we assumen=210. First, it is not difficult to determine that the probability of this kind of misfortune is less than11000whenever a user updates her password, under the assumption that the outputs of hash functionh(·)can be treated as random integers with fixed length. Here the integer n serves as the usability-security tradeoff factor, and the treatment of hash functions as random functions has been a widely accepted method in modern cryptography research, called the random oracle model, first introduced by Bellare and Rogaway in [86]. Second, in practice, both for usability and security, a user’s password should only be changed regularly but not frequently, e.g. every ninety days [87], which means such a misfortune will only happen every 256=210*14years. It should be noted that, even if such a misfortune has occurred, the user can restore the function of the card by re-registering with BS.In the registration phase of M.L. Das’s scheme [58], the user just submits her plain-text password to the registration server (i.e., the gateway node), and therefore this scheme is obviously vulnerable to privileged insider attack. Be aware of this defect, Khan and Alghathbar [7] adopt another strategy: the user does not present her plain-text passwordPWibut its hashed valueh(PWi)to the registration server (i.e., the gateway node). And some subsequent schemes, e.g. [17,24,72], also adopt similar approaches. One can easily see that, on receivingh(PWi), a malicious insider of the registration server can launch a similar attack to the one introduced in Section 5.1 to offline guess the correct passwordPWiwithout much difficulty.However, if some “salts” are added to the submitted password-verifier in the registration phase, this threat can be thwarted thoroughly. The following is a recommended practice: in the registration phase, besides the identityIDiand the passwordPWi,Uichooses a large random number r (serving as the “salts”) and computesRPW=h(PWi⊕r), and then sends RPW instead ofPWiorh(PWi)to the registration server. Upon receiving the smart card,Uikeys r into the smart card, and she does not need to memorize r. This approach has been employed in several two-factor authentication schemes [43,61,82].

@&#CONCLUSIONS@&#
