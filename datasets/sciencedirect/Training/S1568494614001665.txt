@&#MAIN-TITLE@&#
Practical computing with interactive fuzzy variables

@&#HIGHLIGHTS@&#
A general-purpose Fuzzy Calculator is developed to propagate epistemic uncertainty through a function or model.Interactivity between fuzzy variables is accounted for by using t-norms or a possibilistic clustering algorithm.Results illustrate that the Fuzzy Calculator is an efficient tool to propagate epistemic uncertainty regarding non-interactive as well as interactive fuzzy input variables.

@&#KEYPHRASES@&#
Fuzzy Calculator,Alpha-cuts,Interactivity,Triangular norm,Possibilistic clustering,

@&#ABSTRACT@&#
The importance of epistemic uncertainty in engineering is being recognized more and more. In this work, epistemic uncertainty is captured through the use of fuzzy variables, i.e. variables that are described in terms of possibility distributions. Taking into account epistemic uncertainty implies that one should also be able to propagate such uncertainty through increasingly complex models. In earlier work, we have developed a general tool, called Fuzzy Calculator, to propagate epistemic uncertainty regarding non-interactive fuzzy input variables. In reality, however, the fuzzy input variables of a model are often interactive. Taking into account this interactivity reduces the uncertainty on the fuzzy output variable and should therefore always be aimed for. However, the full determination of the joint possibility distribution of the fuzzy input variables is not an easy task. In literature, it is often claimed that triangular norms can be used to model interactivity between fuzzy variables. Making use of a generalization of Nguyen's alpha-cut approach, we have developed a general-purpose Fuzzy Calculator that is able to take into account interactivity modelled by a triangular norm. However, the absence of a general strategy to select an appropriate triangular norm often results in the use of other strategies to model interactivity in practice. Therefore, we have also applied our Fuzzy Calculator to a case study where the interactivity between the fuzzy input variables is identified through possibilistic clustering. The results illustrate that this Fuzzy Calculator is an efficient tool to propagate epistemic uncertainty regarding non-interactive as well as interactive fuzzy input variables.

@&#INTRODUCTION@&#
Zimmerman [54] describes uncertainty as “the lack of necessary information to quantitatively and qualitatively … describe, prescribe or predict deterministically and numerically a system, its behaviour or other characteristics”. Taking into account uncertainty in mathematical modelling is a subject of great interest to many engineering applications (see among others [3,27,31,48,49]). Uncertainty can be categorized into two groups, namely aleatoric and epistemic uncertainty [1,21,30]. Aleatoric or stochastic uncertainty results from the natural randomness in certain processes. It describes an inherent variability that is present in the variables of interest and that cannot be reduced by enhancing the available knowledge. This kind of uncertainty can be described by probability theory. Epistemic or systematic uncertainty stems from incomplete knowledge about the variables or parameters of interest. This type of uncertainty is related to the state of knowledge: while the variables have a unique value in reality, this value is not known exactly, either due to experimental limitations or due to approximations in the model. Even the most complex model of a real system necessarily involves a series of assumptions and approximations, which are required to compensate for our incomplete understanding of the real world and the complexity of its description. Consequently, the variables in such an approximate model do not always directly correspond to real physical variables and their value is therefore uncertain. In this paper, we restrict our attention to epistemic uncertainty. Fuzzy set theory has been developed to incorporate epistemic uncertainty into mathematical models [52]. Variables subject to this type of uncertainty are represented as fuzzy variables. If these variables act as the inputs to a model, the uncertainty should be propagated through the model using Zadeh's extension principle [53], which extends functions of real numbers to functions with fuzzy quantities as arguments.However, the application of the extension principle to compute with fuzzy quantities is a complex matter. Nguyen [40] developed a more practical approach based on alpha-cuts, which is applicable to continuous functions and upper semi-continuous fuzzy quantities with compact support, describing non-interactive fuzzy input variables. This approach transforms the problem into an optimization problem. By optimizing the function on a number of alpha-cuts, it is possible to construct the possibility distribution of the fuzzy quantity describing the output variable. In the literature, several methods based on this transformation are available for (locally) monotone functions [13,14,17,22,38,43,45] where the function reaches its extreme values in some of the vertices of the hyperrectangle generated by the alpha-cuts of the possibility distributions of the non-interactive fuzzy input variables. For non-monotone functions, Scheerlinck et al. [44] developed a Fuzzy Calculator, which applies Particle Swarm Optimization (PSO) to optimize the function over the entire hyperrectangle. It is thus a general tool to determine the possibility distribution of the fuzzy output variable when propagating non-interactive fuzzy input variables through a function or model. However, in many applications the fuzzy input variables of a function or model are interactive, for example when they are associated with the same physical process or property. By taking the interactivity into account, which corresponds to additional knowledge about the joint state of the variables, the uncertainty on the output variable can be reduced. However, it is often complex and practically infeasible to know and describe the exact interactivity pattern for a set of fuzzy variables. De Cooman [11] illustrated that triangular norms can be used to describe interactivity between fuzzy variables. However, there is still a lot of research needed in this area and at this moment there is no general strategy to determine which triangular norm should be used. Therefore, other methods can be applied to describe the interactivity between the fuzzy variables, for example by applying a possibilistic clustering algorithm to joint measurements of the relevant variables [51]. Note that interactivity is not used here to simply refer to the re-occurrence of certain variables in non-linear functions or models, as is the case in for instance Gladysz and Kasperski [26]. The propagation of uncertainty through such non-linear functions can already be done using the Fuzzy Calculator developed in Scheerlinck et al. [44]. To the authors’ knowledge, no general approach exists in the literature to propagate uncertainty in the presence of true interactivity between non-identical fuzzy input variables of the model.Fullér and Keresztfalvi [23] generalized Nguyen's theorem for interactive fuzzy input variables. Based on this generalization, the current paper presents a modified Fuzzy Calculator that allows to take interactivity into account. It is therefore referred to as the ‘generalized Fuzzy Calculator’. Firstly, the generalized Fuzzy Calculator is applied to the same test functions as described in Scheerlinck et al. [44]. Some basic triangular norms will be used to describe the interactivity between the fuzzy input variables of these test functions. In this way, we can evaluate the performance of the generalized Fuzzy Calculator.Next, the generalized Fuzzy Calculator is applied to a case study in which we want to determine the possibility distribution of the output of a physically-based surface backscattering model. Such models are developed to describe the relation between the backscatter coefficients of microwaves, obtained in radar data, the roughness parameters of the surface, the surface soil moisture content, vegetation characteristics, the frequency polarization and incidence angle. The surface soil moisture content is an important property in the understanding and modelling of meteorology, hydrology and agriculture [12,46]. Soil moisture is responsible for the partitioning of precipitation in surface runoff and infiltration, as well as the partitioning of the incoming radiation in latent and sensible heat fluxes [19,29]. Therefore, monitoring soil moisture is of high importance. However, as field measurements of soil moisture are not feasible for large areas, there is a need for alternative methods to retrieve information about the moisture content of the soil's surface. A solution to this problem is provided by the relation that exists between the backscatter coefficients of microwaves, vegetation, the roughness parameters of the surface and the surface soil moisture. However, in order to be useful for hydrological applications, the backscatter coefficient needs to be converted into the corresponding soil moisture content. Therefore, we can rely on physically-based surface scattering models. In particular, this case study focuses on the Integral Equation Model (IEM) [24,25] that is applicable for bare soils (i.e. no significant vegetation is present). By inverting this model, we can determine the soil moisture content based on the roughness parameters and the backscatter coefficient. Since the roughness parameters offer only an approximate and statistical description of the true structure of the surface, they are difficult to measure directly and should thus be described as interactive fuzzy variables [6,9,37,42,50,51]. In order to determine the interactivity between the two roughness parameters, we follow the approach in Vernieuwe et al. [51] and apply a possibilistic clustering algorithm. In this work, the extension principle was also used in order to propagate the uncertain roughness parameters through the inverted IEM. However, in contrast to the Fuzzy Calculator, only the boundary of the search space, corresponding to the interactive roughness parameters, was searched through. In the present paper uncertainty captured through the use of interactive fuzzy variables will be propagated through the model using the generalized Fuzzy Calculator; the resulting output is then compared to the results in Vernieuwe et al. [51].This paper is set out as follows. Section 2 describes the difference between non-interactive and interactive fuzzy variables. Section 3 recapitulates the extension principle generalized for interactive fuzzy variables. Section 4 describes the modifications to the Fuzzy Calculator. Section 5 discusses the results of the generalized Fuzzy Calculator applied to some test functions. Section 6 introduces the case study to which the generalized Fuzzy Calculator is applied. Finally, Section 7 contains our conclusions.When studying the propagation of epistemic uncertainty through a model with n fuzzy input variables Xi(i=1, …, n), it is not always valid to assume that these variables are not interactive. In general, interactivity between the variables is present and a full description requires detailed knowledge of the joint possibility distributionπX1,…,Xn. Non-interactivity corresponds to the special case whereπX1,…,Xn(x1,…,xn)=min(πX1(x1),…,πXn(xn)), withπXi(i=1, …, n) the marginal possibility distributions of the fuzzy input variables. In a non-fuzzy setting where the possibility distributionsπXirepresent (crisp) sets Ai(i.e.πXi(xi)=1if xi∈Ai,πXi(xi)=0elsewhere), non-interactivity means that none of the combinations (x1, …, xn)∈A1×⋯×Anis deemed impossible.In case of interactivity, the joint possibility distribution is a complex object to describe or determine. One convenient way to simplify the description is by modelling the joint possibility distribution asπX1,…,Xn(x1,…,xn)=T(πX1(x1),…,πXn(xn)), where the function T replaces the minimum operator of the non-interactive case and transforms the individual possibility degreesπX1(x1)toπXn(xn)into an appropriate joint possibility degree. Such functions T are called triangular norms. The purpose of triangular norms (shortly t-norms) is to generalize the intersection of classical sets to fuzzy sets or the Boolean conjunction of classical logic to fuzzy logic. A t-norm is a binary operation T on the unit interval [0, 1], i.e. a function T:[0, 1]2→[0, 1] with the following properties for all a, b, c∈[0, 1] [34,35]:(1)(T1)T(a,b)=T(b,a)(commutativity)(T2)T(a,T(b,c))=T(T(a,b),c)(associativity)(T3)T(a,b)≤T(a,c)wheneverb≤c(monotonicity)(T4)T(a,1)=a(boundarycondition)The four basic t-norms TM, TP, TLand TDare given by(2)TM(a,b)=min(a,b),(minimum)(3)TP(a,b)=a·b,(product)(4)TL(a,b)=max(a+b−1,0),(Łukasiewiczt−norm)(5)TD(a,b)=0,if(a,b)∈[0,1[2,min(a,b),otherwise.(drasticproduct)For more information about t-norms, we refer to Klement et al. [34]. Note that there exist other possibilities for constructing the joint possibility distribution of interactive fuzzy variables. One particular example consists of applying a possibilistic clustering algorithm to joint measurements of the relevant variables [51] and will be applied in the case study (Section 6).Consider a functionf:ℝn→ℝ. Given the joint possibility distributionπX1,…,Xnof n fuzzy input variables, Zadeh's extension principle defines the possibility distribution πYof the fuzzy output variable Y=f(X1, …, Xn) as follows:(6)πY(y)=supf(x1,…,xn)=yπX1,…,Xn(x1,…,xn).We restrict ourselves to interactivity modelled by t-norms. We can thus replaceπX1,…,Xn(x1,…,xn)byT(πX1(x1),…,πXn(xn)), where both the t-norm T describing the interactivity and the marginal possibility distributionsπXi(i=1, …, n) are assumed to be given. The above formulation of the extension principle is infeasible for practical implementations, as there is no efficient way to evaluate the supremum over all (x1, …, xn) for which f(x1, …, xn)=y.In case of non-interactivity and the use of fuzzy intervals as marginal possibility distributions, i.e. fuzzy quantities that are upper semi-continuous (all alpha-cuts (see Eq. (7)) are closed), convex and normal with a compact support (supp(πX)¯={x∈ℝ∣πX(x)>0}¯is bounded), a practical implementation of the extension principle was developed in Scheerlinck et al. [44] based on the alpha-cut approach of Nguyen [40]. The alpha-cut(πX)α,α∈]0,1], of a possibility distribution is the crisp set of elementsx∈ℝthat have a possibility degree of at least α:(7)(πX)α={x∈ℝ∣πX(x)≥α}.The possibility distribution of the fuzzy output variable Y is constructed by determining the alpha-cuts of πYfor a number of values of α as follows:(8)(πY)α=f((πX1,…,Xn)α)(9)={f(x1,…,xn)∣(x1,…,xn)∈(πX1)α×…×(πXn)α}.Because of the restriction to fuzzy intervals, we can then calculate(πY)αas(10)(πY)α=[y_α,y¯α],withy_α(resp.y¯α) the minimal (resp. maximal) value of the function f on the hyperrectangle(11)(πX1)α×⋯×(πXn)α=[x_1,α,x¯1,α]×⋯×[x_n,α,x¯n,α].In case of interactivity and the use of fuzzy intervals as marginal possibility distributions where the interactivity can be modelled by a right-continuous t-norm T, Fullér and Keresztfalvi [23] generalized Nguyen's theorem for a continuous function f as follows:(12)(πY)α=f((πX1,…,Xn)α)(13)={f(x1,…,xn)∣(x1,…,xn)∈(πX1,…,Xn)α},with(14)(πX1,…,Xn)α=⋃T(ξ1,…,ξn)≥αf((πX1)ξ1,…,(πXn)ξn)⊆(πX1)α×⋯×(πXn)α,where we have to take the union over (ξ1, …, ξn)∈]0, 1]nsuch that T(ξ1, …, ξn)≥α. Since T(ξ1, …, ξn)≤TM(ξ1, …, ξn), it holds that such (ξ1, …, ξn) obviously belong to the hypercube [α, 1]n.(πX1,…,Xn)αis a closed, simply connected set, i.e. a set for which any closed curve within the set can be continuously contracted to a point without leaving the set. Therefore, as in the case of non-interactive fuzzy variables Xi, for a continuous function f, the alpha-cuts of the possibility distribution πYof the fuzzy output variable Y are closed intervals. The possibility distribution πYcan thus be constructed by determiningy_αiandy¯αi, for m+1 alpha-cuts, with α0<α1<…<αm, as presented in Eqs. (10) and (11), with the additional constraintT(πX1(x1),…,πXn(xn))≥α. In this way, the identification of the fuzzy output of a continuous function of interactive fuzzy variables described by fuzzy intervals can, just as in the case of non-interactive fuzzy variables, be transformed into a number of (constrained) optimization problems, which now have one additional nonlinear constraint. Because of this constraint, the search space where the function f has to be optimized is no longer hyperrectangular. The search spaces for the optimization problems in two dimensions corresponding to different alpha-cuts are presented in Fig. 1for the basic t-norms.Solving the constrained optimization problem is the most general strategy for dealing with interactivity modelled by t-norms. Next to this general approach, we could try to devise a taylor-made algorithm for some particular t-norm T, in such a way that it is useful for all isomorphic t-norms as well. Unfortunately, no other t-norm T is isomorphic to the minimum TM[34], for which the optimization problem becomes most simple due to the hyperrectangular search spaces, which can be easily handled by optimization algorithms as boundary constraints.For non-continuous t-norms, the search space is generally not closed and not convex. For t-norms that yield a non-closed search space, the above described methodology cannot be used. Still, for non-continuous t-norms that yield a closed yet non-convex search space, such as the drastic product TD, the above described methodology can be applied, however, standard optimization algorithms might run into problems. For the particular case of the drastic product TD, the search space for any alpha-cut can furthermore be divided into two (overlapping) hyperrectangles and the optimization problem can be solved in both hyperrectangles separately.Scheerlinck et al. [44] developed a Fuzzy Calculator to determine the possibility distribution of the output of a continuous function of non-interactive fuzzy variables described by possibility distributions. This Fuzzy Calculator is based on the transformation of the problem into an optimization problem as discussed in Section 3. Different optimization algorithms were compared, namely Sequential Quadratic Programming (SQP, [4,41]), Simplex-Simulated Annealing (SIMPSA, [7]), Particle Swarm Optimization (PSO, [8,18,32,33]) and Particle Swarm Optimization in combination with Gradient Descent based on Sequential Quadratic Programming (PSO_GD). Since it is impossible thaty_αj−1>y_αjory¯αj−1<y¯αjwhen αj−1>αj, inconsistencies can occur when the optimization algorithm does not find the correct optima. In order to correct for these errors, two approaches were followed. In the first approach the optimum of the incorrect alpha-cut is being reset to the optimum of the wider alpha-cut. In the second approach, which is more computationally demanding, the optimum is recalculated. To determine the ideal number of alpha-cuts two different approaches were followed, either working with a fixed number of alpha-cuts or starting with 3 alpha-cuts and gradually increasing this number according to a criterion based on linear interpolation. A non-parallel as well as a parallel Fuzzy Calculator were developed and compared. In the parallel Fuzzy Calculator the function is simultaneously optimized on the different alpha-cuts. As the optimization algorithms PSO and PSO_GD led to the best results in case of the non-parallel Fuzzy Calculator, the parallel Fuzzy Calculator was restricted to these algorithms.Let us first sketch the PSO algorithm, which is a population-based metaheuristic optimization algorithm. The basic PSO algorithm starts with the initialization of a swarm of N particles with randomly chosen position and velocity. The position of each particle represents a candidate solution of the optimization problem. In an n-dimensional search space the position and velocity of the ith particle, with i=1, …, N, are denoted by n-dimensional vectors xi=(xi1, xi2, …, xin) andvi=(vi1,vi2,…,vin), respectively. In a next step, the objective function f is evaluated for each particle i and this value is assigned as a fitness value fito the particle. For each particle i a vector pi=(pi1, pi2, …, pin) is defined that points to the best position that particle i has reached up to this point in the iteration cycle; it is also called the personal optimum of this particle. In other words, it is the position with the best fitness value thus far in the particle's trajectory. In the neighbourhood of particle i, the particle that reached the best fitness function value thus far will be identified and labelled g. This fitness corresponds to the function value at the position given by the vector pg[18,8]. At each iteration (from step k to step k+1) the position and velocity of each particle are updated through the following equations:(15)vi(k+1)=vi(k)+c1·r1(k)·pi(k)−xi(k)+c2·r2(k)·pgi(k)−xi(k),(16)xi(k+1)=xi(k)+vi(k+1),with vi(k) the velocity in the previous iteration k,c1·r1(k)·pi(k)−xi(k)the cognitive velocity andc2·r2(k)·pgi(k)−xi(k)the social velocity. The positive constants c1 and c2 are the so-called cognitive and social parameters. The factors r1(k), r2(k) are random numbers between 0 and 1, and are regenerated in each iteration. PSO_GD follows the same methodology as PSO with the exception that Sequential Quadratic Programming is performed in several steps of the PSO algorithm [44].Provided with the philosophy of the PSO algorithm, we can now reinterpret the parallel Fuzzy Calculator as different PSO swarms optimizing the function f on different alpha-cuts simultaneously. It turns out that it is beneficial to extend this philosophy by also allowing the different swarms to communicate about the candidate optima. Scheerlinck et al. [44] compared different communication frequencies, namely no communication and communication at every 2, 5 or 10 iterations. The results indicated that the parallel Fuzzy Calculator with an increasing number of alpha-cuts, with recalculation of the optima in case incorrect optima are found (second correction approach), using PSO_GD with a population size of 20 particles as optimization algorithm and with communication at every 5 iterations led to the best results. Therefore, the generalized Fuzzy Calculator here developed is mainly based on this specific configuration of the Fuzzy Calculator.As mentioned in Section 3, when the fuzzy input variables are interactive and this interactivity can be modelled by a t-norm, we can still practically implement the extension principle through the adapted alpha-cut approach of Nguyen. The alpha-cuts of the possibility distribution of the fuzzy output variable can then be determined by calculatingy¯αandy_αfor the corresponding alpha-cut, which is modelled through the additional constraintT(πX1(x1),…,πXn(xn))≥α. In case a possibilistic clustering algorithm is employed to model the interactivity, the equations of the contour lines of the cluster are used to express an additional inequality constraint. Therefore, the Fuzzy Calculator can be directly applied to the case of interactive fuzzy input variables. However, the optimization algorithm PSO_GD used to find the minimumy_αand maximumy¯αof the alpha-cuts requires some modifications in order to deal with the additional constraint.The basic PSO algorithm is modified in the following manner. Firstly, an initial population of particles is randomly chosen in the hyperrectangular search space (the search space in case of non-interactive fuzzy variables). For each of these particles i it is checked whetherT(πX1(xi,1),…,πXn(xi,n))≥α; if this is not the case the particle is reinitialized. Secondly, the GD part of the PSO_GD algorithm is performed. Thirdly, the velocities and positions of the particles are updated. If, after the position update, the particle is located outside the search space of the current alpha-cut the position update is cancelled. In order to move this particle to the boundary where the value of the t-norm becomes smaller than the α-value of the current alpha-cut, we have implemented a simple bisection method [5]. This method calculates how far the particle can move in the direction of velocity v without violating the constraints and positions of the particle at the boundary. Fourthly, the personal best position of each particle and global best position of the total population are updated. At every 5 iterations, communication takes place with the other swarms that search for different alpha-cuts at the same time. Again, the global best position is only changed if a better position located in the current search space is discovered. On the particle with the new global position, GD is performed. These steps are repeated until convergence takes place. We used the same convergence criterion as Scheerlinck et al. [44], which requires that half of the population has the same position (with tolerance level 10−6). After convergence, GD, taking into account the nonlinear constraint, is performed on the global best position of the swarm. It is important to note that in case of non-continuous t-norms, e.g. the drastic product, GD can no longer be used. In that case, only PSO is applied.In this section, we will apply the generalized Fuzzy Calculator to some test functions in case of interactivity modelled by one of the four basic t-norms. We used the same test functions as in Scheerlinck et al. [44], namely a two-dimensional test function with multiple minima and maxima on [0, 4]2 (test function a), the alpine function in 2 dimensions on [1, 5]2 (test function b), on [−5, 0]2 (test function c), on [−5, 0]×[10, 15] (test function d) and on [−5, 5]×[25,30] (test function e), the alpine function in 3 dimensions on [−5, 0]3 (test function f), the alpine function in 4 dimensions on [−5, 0]4 (test function g) and the alpine function in 5 dimensions on [−5, 0]5 (test function h). The results presented in Table 1are obtained by taking the mean of 50 repetitions. As in Scheerlinck et al. [44], we used the mean area under the possibility distribution of the fuzzy output in order to compare the results. This area can be calculated as follows(17)SπY=α0(y¯α0−y_α0)+∑i=1m(αi−αi−1)(y¯αi−y_αi).The first alpha-cut(πY)α0is chosen at a small value α0>0. In the limit α0→0, the first term does not contribute since(y¯α0−y_α0)should remain finite according to the assumption of compact support. In the case of an increasing number of alpha-cuts, it is possible that less optimizations are necessary in order to obtain a good approximation of the left side of the possibility distribution (constructed by the minimay_α) than for the right side of the possibility distribution (constructed by the maximay_α) or vice versa. It can thus occur that for a certain alpha-cut merely one optimum for one side of the possibility distribution is calculated, whereas no corresponding optimum for the other side of the possibility distribution is calculated. For the calculation of the area under the possibility distribution, we then work with the corresponding optimum of the nearest alpha-cut(πY)α′with α′>α. This is illustrated in Fig. 2.Table 1 presents the mean areas under the possibility distributions of the different test functions in case of interactive fuzzy input variables modelled by the four basic t-norms. As mentioned in Section 3, in case of the drastic product, the search space for any alpha-cut can be divided into a number of (depending on the dimensionality of the problem) (overlapping) hyperrectangles and the optimization problem can be solved in these hyperrectangles separately. The results of the optima of the different hyperrectangles are then compared and the minimum and maximum values are selected as the optima of the current alpha-cut. Results obtained with this approach are denoted as D2 and are compared with the standard approach D1 whereTD(πX1(x1),…,πXn(xn))≥αis used as additional constraint. As illustrated in Fig. 1, the search space corresponding to interactivity modelled by the drastic product is smaller than and contained in the search space corresponding to the other t-norms for the same value of α. Indeed, the drastic product corresponds to the smallest possible search region of all possible t-norms. On the other hand, the minimum t-norm corresponding to the absence of interactivity results in the largest search space of all possible t-norms. For the four basic t-norms under investigation, it holds that:(18)(πX1,…,XnD)α⊆(πX1,…,XnL)α⊆(πX1,…,XnP)α⊆(πX1,…,XnM)α,where the superscripts D, L, P and M refer to the joint possibility distributions obtained after applying the corresponding t-norms to the marginal possibility distributions. These differences in search space imply a similar order for the areas S under the possibility distributions of the outputs of the different test functions:(19)SD≤SL≤SP≤SM,with SDthe area under the possibility distribution in case of interactivity modelled by the drastic product, SLthe area under the possibility distribution in case of interactivity modelled by the Łukasiewicz t-norm, etc.Table 1 shows that the relation in Eq. (19) is satisfied for all test functions, with the exception of test function e. For this test function, the area under the possibility distribution obtained with the drastic product is larger than the area obtained with the Łukasiewicz t-norm, and the area obtained with the product t-norm is larger than the one obtained with the minimum t-norm. This implies that in case of interactivity modelled by the Łukasiewicz and the minimum t-norm, the Fuzzy Calculator was not able to localize the global optima for certain alpha-cuts. The results obtained with the different implementations of the drastic product indicate that, in general, D2 results in slightly larger areas under the possibility distributions. However, this difference is negligible.Table 1 also shows the mean numbers of function evaluations to construct the possibility distributions. The number of function evaluations is, for most of the test functions, of the same order of magnitude for the different t-norms. Hence, our generalized Fuzzy Calculator has approximately the same efficiency as the standard Fuzzy Calculator for non-interactive fuzzy variables. Nevertheless, the difference in implementation of the interactivity modelled by the drastic product (D1 versus D2) has an influence on the number of function evaluations for all test functions. In case of the implementation D2, fewer runs of the optimization algorithm are needed. Generally, considerably more evaluations are needed in the case of the D1 implementation. This is due to the strongly non-convex search space, which may lead to non-convergence or inability to find the correct optimum, resulting in a larger number of iterations and thus of function evaluations. Fig. 3illustrates the possible difficulties associated with a non-convex search space. The particle x is located in one branch of the search space, while the personal best position is located in the middle of the search space and the global best position is located in another arm of the search space. This results in a movement of the particle as indicated by the black arrow with open arrow point. The particle tries to move outside the search space, which is not possible and will therefore be positioned on the boundary. When the global and personal best position are not replaced, the particle will remain on this boundary. If this takes place for a number of particles, the particles will take a long time to converge. This could explain the higher number of function evaluations for test functions a, b, c, d, f, g and h.Table 2presents the mean number of optimizations needed to construct the left and the right side of the possibility distributions of the outputs for the different test functions when interactivity of the fuzzy input variables is modelled by the four basic t-norms. More or less the same number of optimizations is needed to construct the possibility distributions when interactivity is modelled by the Łukasiewicz, product and minimum t-norms. For interactivity modelled by the drastic product, for some test functions the results diverge, especially for implementation D1. This is of course also related to the non-convexity of the search space. If the global optimum is not correctly determined, many additional alpha-cuts are required to satisfy the linearity criterion. This also contributed to the strongly increased number of function evaluations for the D1 implementation.In this section, the generalized Fuzzy Calculator is used to compute the fuzzy output of a physically-based surface scattering model, namely the inverse IEM [24,25]. In synthetic aperture radar (SAR) remote sensing, the IEM is generally used to relate the backscatter coefficient of the incident microwave pulse on a rough bare soil surface with the dielectric constant, which depends on the soil moisture content [28,39], the soil's roughness, the incidence angle of the wave and the microwave properties (frequency and polarization). Surface roughness is a prerequisite to obtain reflected signals towards the sensor, yet, it hampers the retrieval of soil moisture values from backscatter coefficients, as this requires an accurate description of the surface roughness. The soil roughness is generally described by three parameters. The root mean square height (rms height s), which is the standard deviation of the surface height w.r.t. a reference surface, the correlation length (ℓ), which defines the minimal horizontal distance between two points that can be considered to be statistically independent of one another, and the autocorrelation function, for which it has been shown that the exponental correlation function is a good approximation for agricultural fields [6,47]. When the backscatter coefficient, and the roughness parameters, are available, the surface soil moisture can be calculated by inverting the model. While backscatter coefficients can be obtained from radar images, the determination of surface roughness is more complex. The measuring of surface roughness is rather difficult and strongly depends on the profile length [6,9,37,42,50,51] or the type of measuring device used [20,50,51]. To incorporate this uncertainty in surface roughness, a fuzzy description of the roughness parameters using possibility distributions was introduced by Verhoest et al. [48] and improved by Vernieuwe et al. [51].We use the possibility distributions for the roughness parameters, which act as fuzzy input variables to the inverse IEM, as they were obtained by Vernieuwe et al. [51]. The latter study focused on a certain roughness type resulting from a ‘rotary tillage’ and furthermore assumed that the IEM is a locally monotone function of rms height and correlation length, which implies that the minimum and maximum values of soil moisture content for a given alpha-cut result from roughness parameters located on the boundary of the alpha-cut of the joint possibility distribution. In the present paper, we abandon this assumption and also take into account the interior of the joint possibility distribution in order to construct the possibility distribution of soil moisture content.

@&#CONCLUSIONS@&#
