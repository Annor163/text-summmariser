@&#MAIN-TITLE@&#
A branch-price-and-cut algorithm for multi-mode resource leveling

@&#HIGHLIGHTS@&#
We present a new model and algorithm for a RCPSP with availability constraints.We propose a non-trivial, non-obvious Dantzig–Wolfe reformulation.We translate standard precedence inequalities into our new formulation.Our model gives significantly tighter lower boundsWe increase the size of instances that can be solved to optimality to 50 jobs.

@&#KEYPHRASES@&#
Project scheduling,Resource leveling,Dantzig–Wolfe decomposition,Integer programming,Branch-price-and-cut,

@&#ABSTRACT@&#
We propose a new mixed integer programming formulation and solution algorithm for a multi-mode resource-constrained project scheduling problem with availability constraints (calendars) and the objective to minimize the resource availability cost. Our model exploits the problem structure and has an exponential number of variables, which necessitates a column generation approach. The linear programming relaxation is strengthened by adding valid inequalities that need to be carefully separated in order to show the desired effect. Integer optimal solutions are obtained by an exact state-of-the-art branch-price-and-cut algorithm.Classical time-indexed mixed integer programming formulations for similar problems quite often fail already on instances with only 30 jobs, depending on the network complexity and the total freedom of arranging jobs. A reason is the typically very weak linear programming relaxation. Our model can be interpreted as a non-trivial Dantzig–Wolfe reformulation of a time-indexed formulation. In particular, for larger instances our reformulation gives significantly tighter dual bounds, enabling us to optimally solve instances with 50 multi-mode jobs. This outperforms the classical formulation by far.

@&#INTRODUCTION@&#
We consider a complex project scheduling problem that is motivated by an industrial application from chemical engineering. It was recently introduced in Megow, Möhring, and Schulz (2011) as turnaround scheduling: For the inspection and renewal of parts in chemical plants, these are shut down and disassembled, work is done, and plants are finally rebuilt. This induces a partial ordering of jobs to be done. Jobs are multi-mode, that is, they can be sped-up to a certain extent by investing in more workers. The time horizon and the number of workers hired for each job determine production downtime and working cost. We thus face a time-cost tradeoff, and a solution approach to turnaround scheduling is to binary search over the time horizon. For a fixed time horizon—which is assumed throughout this paper—the problem turns into a resource leveling problem, i.e., we need to decide how many workers are hired—this number is then fixed for the entire time horizon.Workers, or more generally renewable resources, are of different specialization or type. Each resource type is associated with availability periods that can be thought of as working shifts. We assume that each job needs (possibly several units of) exactly one resource type for the following reason. The processing time of a job decreases with an increased resource usage. A model with multiple resource types per job must encode how the processing time of a job is shortened depending on which resource types are increased. Planners would need to encode all possible combinations of resource assignments to a job, and even worse, estimate the resulting processing times, possibly respecting synergy or interference between resources. It is unrealistic to assume valid data about this in a practical setting on one hand, and hardly doable, if at all, with standard software like MS Project™ on the other hand. Reliable data are difficult to obtain even for one resource type (the actual work increases with increased resource usage due to, e.g., communication overhead). Nonetheless, the need of multiple resources was studied by other authors, e.g.,  Santos and Tereso (2011) and can be modeled via generalized precedence constraints. These blend easily with our approach, if absolutely needed.We want to level the resources, i.e., we minimize the maximum capacity requirement of each resource type, at a minimum total resource cost. Balancing the resource usage, i.e., to flatten the variability of the resource usage over time, is not an issue at our higher-level planning stage.From a methodological point of view, when it comes to optimally solving larger instances of such scheduling problems, mixed integer programming (MIP) has not fared very well. This is mainly due to the weak dual bounds obtained from linear programming (LP) relaxations of classical models. We therefore propose a model which can be interpreted as a non-trivial Dantzig–Wolfe reformulation of a time-indexed formulation and thus provides much stronger bounds. Variables represent entire sub-schedules, thus are exponential in number, and necessitate a dynamic generation of variables to solve the LP relaxation. Yet, the relation to classical models via Dantzig–Wolfe reformulation enables us to exploit the literature on valid inequalities for scheduling problems, and we demonstrate how to use them to strengthen the formulation. Constraint programming (CP) is usually considered a promising approach for solving scheduling problems, due its expressiveness of logical constraints, and we hybridize some CP elements in our otherwise MIP based approach.We propose a new model for a multi-mode project scheduling problem with availability constraints (working shifts) and the objective to minimize the resource availability cost. Our model is generic in the way resource calendars are respected. For its solution we design a full-fledged branch-price-and-cut algorithm. This does not only produce very strong dual bounds, as did a few previous studies in project scheduling before, but it is also able to provide optimal primal solutions. With this it is the first approach in this area of complex project scheduling that “works on both ends.” Our model builds on a non-trivial Dantzig–Wolfe reformulation of a classical time-indexed model, and we exploit the relationship between these two in designing branching rules and deriving cutting planes. We finally conduct an experimental study which shows how the methodological state-of-the-art in branch-and-price should be instantiated in a complex scheduling context. Our implementation is able to optimally solve instances with 50 multi-mode jobs, thus outperforming a state-of-the-art MIP solver by far that is only able to solve 25 percent of the instances we solve.We assume familiarity with resource-constrained project scheduling (RCPSP) in general; for a recent survey refer to Hartmann and Briskorn (2010). We are given a setJof non-preemptable jobs and a setRof renewable resources. Precedence constraints are given as an acyclic digraphG=(J,E)with (i, j) ∈ E if and only if job i has to be completed before job j starts. Each job j may be run in exactly one out of a discrete setMjof modes. Processing job j in modem∈Mjtakes pjmtime units and requires rjmkunits of resourcek∈R. Each job needs exactly one resource for execution, so we write rjmif the resource is clear from the context.All jobs have to be completed before the end of the time horizon T. Each resourcek∈Rhas a setIk:={[a1,b1],…,[aik,bik]}of ikavailability periods, also called shifts, wherea1<b1<⋯<aik<bik. A job requiring resource k can only be executed during a time intervalI∈Ik. Fig. 1 schematically presents a schedule with two resources and three availability periods each that are indicated by the bold lines. Jobs are represented by boxes, the length of which represents processing time and the height corresponds to resource usage (for simplicity all identical in this example). The arrows indicate precedence constraints. We use a parameter δktwhich is one if resource k is available at time t, i.e., t ∈ I for someI∈Ik,and zero otherwise. Each resourcek∈Ris associated with a per unit cost ck. For each resource k, the available capacity, which is a variable, is denoted by Rk.To represent a solution, we denote by S = (S1, …, Sn) the vector of start times of jobs, and by M = (m1, …, mn) the vector of modes in which jobs are executed. For a given schedule (S, M), denote byA(S,M,t):={j∈J:Sj≤t<Sj+pjmj}the set of jobs active at time t. The amountrk(S,M,t):=∑j∈A(S,M,t)rjmjkof resource k used at time t must never exceed the provided capacity Rk. Thus, we obtain resource constraints with calendars:rk(S,M,t)≤Rk·δkt,∀k∈R,∀t. In addition to this resource feasibility a feasible schedule must obey precedence feasibility, i.e.,Si+pimi≤Sjfor all (i, j) ∈ E.To conclude, we study a multi-mode project scheduling with m renewable resources of unbounded capacity with precedence constraints and working shifts and the objective to minimize the total resource availability cost, i.e., minimizing∑k∈Rck·Rk.

@&#CONCLUSIONS@&#
