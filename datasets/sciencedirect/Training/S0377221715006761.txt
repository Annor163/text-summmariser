@&#MAIN-TITLE@&#
DEA cross-efficiency evaluation based on Pareto improvement

@&#HIGHLIGHTS@&#
We propose a cross-efficiency evaluation approach based on Pareto improvement.Our approach generates Pareto-optimal cross efficiencies for the DMUs.Our approach has good power of improving the cross-efficiencies of the DMUs.The cross-efficiency of each DMU will be equal to its self-evaluated efficiency.The cross-efficiencies of all DMUs can be generated by only a common set of weights.

@&#KEYPHRASES@&#
Data envelopment analysis (DEA),Cross-efficiency evaluation,Pareto improvement,Pareto-optimal cross efficiencies,

@&#ABSTRACT@&#
Cross-efficiency evaluation, as an extension tool of data envelopment analysis (DEA), has been widely applied in evaluating and ranking decision making units (DMUs). Unfortunately, the cross-efficiency scores generated may not be Pareto optimal, which has reduced the effectiveness of this method. To solve this problem, we propose a cross-efficiency evaluation approach based on Pareto improvement, which contains two models (Pareto optimality estimation model and cross-efficiency Pareto improvement model) and an algorithm. The Pareto optimality estimation model is used to estimate whether the given set of cross-efficiency scores are Pareto-optimal solutions. If these cross-efficiency scores are not Pareto optimal, the Pareto improvement model is then used to make cross-efficiency Pareto improvement for all the DMUs. In contrast to other cross-efficiency approaches, our approach always obtains a set of Pareto-optimal cross efficiencies under the predetermined weight selection principles for these DMUs. In addition, if the proposed algorithm terminates at its step 3, the evaluation results generated by our approach unify self-evaluation, peer-evaluation, and common-weight-evaluation in DEA cross-efficiency evaluation. Specifically, the self-evaluated efficiency and the peer-evaluated efficiency converge to the same common-weight-evaluated efficiency when the algorithm stops. This will make the evaluation results more likely to be accepted by all the DMUs.

@&#INTRODUCTION@&#
Data envelopment analysis (DEA), originally proposed by Charnes, Cooper, and Rhodes (1978), is a non-parametric programming method for evaluating the efficiency of a group of homogenous decision making units (DMUs) with multiple inputs and multiple outputs (Cook, Harrison, Imanirad, Rouse, & Zhu, 2013; Cook, Liang, Zha, & Zhu, 2009; Imanirad, Cook, Aviles-Sacoto, & Zhu, 2015; Thanassoulis, Kortelainen, Johnes, & Johnes, 2011; Yang, Li, Chen, & Liang, 2014). The main idea of DEA is to generate a set of optimal weights for each DMU in a set of DMUs to maximize the ratio of its sum of weighted outputs to its sum of weighted inputs while keeping all the DMU ratios at most 1. This maximum ratio is defined as the efficiency of the DMU under evaluation (Wang & Chin, 2010; Ghasemi, Ignatius, & Emrouznejad, 2014). For its effectiveness in identifying the best-practice frontier and ranking the DMUs, DEA has been widely applied in benchmarking and efficiency evaluation of schools (Charnes, Cooper, Lewin, & Seiford, 1994), hospitals (Mitropoulos, Talias, & Mitropoulos, 2014), bank branches (Wang, Huang, Wu, & Liu, 2014; Paradi, Rouatt, & Zhu, 2011), and so on. However, the traditional self-evaluated DEA models with total weight flexibility may evaluate many DMUs as DEA efficient and cannot make any further distinction among these efficient DMUs. Therefore, one of the main shortfalls of the traditional DEA model (CCR or BCC model) is its inability to discriminate among DMUs that are all deemed efficient (Wang & Chin, 2010).To improve the power of DEA in discriminating the efficient DMUs, Sexton, Silkman, and Hogan (1986) incorporated the concept of peer evaluation into DEA, and proposed the cross-efficiency evaluation method. In cross-efficiency evaluation, each DMU gets a self-evaluated efficiency obtained by its own most favorable weights and n−1 peer-evaluated efficiencies obtained using the other DMUs' most favorable weights. Then, all these efficiencies are aggregated into a final efficiency for the DMU under evaluation. There are at least three principal advantages of the cross-efficiency evaluation. Firstly, it almost always ranks the DMUs in a unique order (Doyle & Green, 1995). Secondly, it eliminates unrealistic weight schemes without incorporating weight restrictions (Anderson, Hollingsworth, & Inman, 2002). Finally, it effectively distinguishes good and poor performers among the DMUs (Boussofiane, Dyson, & Thanassoulis, 1991). Due to these advantages, cross-efficiency evaluation has been extensively applied in performance evaluation of nursing homes (Sexton et al., 1986), preference ranking and project selection (Green, Doyle, & Cook, 1996), selection of flexible manufacturing systems (Shang & Sueyoshi, 1995), judging suitable computer numerical control machines (Sun, 2002), determining the efficient operators and measuring the labor assignment in cellular manufacturing systems (Ertay & Ruman, 2005), performance ranking of countries in the Olympic Games (Wu, Liang, & Chen, 2009), supplier selection in public procurement (Macro, Fabio, Nicola, & Roberto, 2012), portfolio selection in the Korean stock market (Lim, Oh, & Zhu, 2014), energy efficiency evaluation for airlines (Cui & Li, 2015), and so on.In spite of its advantages and wide applications, there are still some shortcomings in DEA cross-efficiency evaluation. For example, the non-uniqueness of the DEA optimal weights may reduce the usefulness of cross-efficiency evaluation (Sexton et al., 1986). Specifically, the optimal weights generated from the traditional models (CCR or BCC model) are generally not unique. Thus, the cross-efficiency scores for the DMUs are somewhat arbitrarily generated (Despotis, 2002). To solve this problem, Sexton et al. (1986) suggested incorporating secondary goals into cross-efficiency evaluation. Based on this idea, many secondary goal models have been proposed. For example, Jahanshahloo, Hosseinzadeh Lofti, Yafari, and Maddahi (2011) used selecting symmetric weights as a secondary goal in cross-efficiency evaluation. Wu, Sun, Zha, and Liang (2011) and Contreras (2012) proposed weights selecting models in which the secondary goal is to optimize the ranking position of the DMU under evaluation. Lim (2012) proposed models using the minimization (or maximization) of the best (or worst) cross efficiencies of peer DMUs as the secondary goal. Maddahi, Jahanshahloo, Hosseinzadeh Lofti, and Ebrahimnejad (2014) suggested optimizing proportional weights as a secondary goal in DEA cross-efficiency evaluation. Among the secondary goal models, the most commonly used are the benevolent and aggressive models proposed by Doyle and Green (1994). The main idea of the benevolent (aggressive) model is to select for each DMU a set of optimal weights that makes the other DMUs' cross efficiencies as large (small) as possible while keeping its own efficiency at its predetermined optimal level (CCR efficiency). Liang, Wu, Cook, and Zhu (2008a) extended the model of Doyle and Green (1994) by introducing various secondary objective functions. Each new secondary objective function represents an efficiency evaluation criterion and can be applied in different practical case scenarios. Similar idea can be seen in Wang and Chin (2010). They also proposed alternative secondary goal models, but they replaced the target efficiency of each DMU from the ideal point 1 to CCR efficiency. Apart from using secondary goal models for addressing the non-uniqueness problem in cross-efficiency evaluation, there still exist a few other methods. For example, Cook and Zhu (2014) proposed using a units-invariant multiplicative DEA model to calculate the cross-efficiency scores. Their model can directly generate each DMU's maximum and unique cross-efficiency scores, which eliminates the need for identifying each DMU's unique set of optimal weights.Another main drawback of cross-efficiency evaluation is that the generated average cross-efficiency scores for the DMUs are not Pareto optimal (Wu et al., 2011), which means it may be difficult to get all the DMUs to accept these cross-efficiency evaluation results. To overcome this drawback, some scholars have eliminated the average assumption for determining the ultimate cross-efficiency scores by using a common weights evaluation method. For example, Wu, Liang, and Yang (2009) considered the DMUs as players in a cooperative game, in which the characteristic function values of coalitions are defined to compute the Shapley value of each DMU, and the common weights associated with the imputation of the Shapley values are used to determine the ultimate cross-efficiencies scores. Liang, Wu, Cook, and Zhu (2008b) introduced another method to make the evaluation results more acceptable by the DMUs. They proposed a game cross-efficiency model and a corresponding algorithm which can generate optimal game cross-efficiency scores that constitute a Nash equilibrium point for the DMUs. Liang et al.'s method has a good ability to improve the cross-efficiency scores of the DMUs, and the Nash equilibrium property of the optimal game cross-efficiency scores means that no DMU can unilaterally change its weights selection strategy to improve its cross-efficiency scores. However, the optimal cross-efficiency scores generated from Liang et al. 's method may not constitute a Pareto-optimal solution because higher cross-efficiency scores can be generated for the DMUs in their evaluation mechanism if more suitable weights are selected for each DMU to evaluate the DMUs.In this paper, we propose a DEA cross-efficiency evaluation approach based on Pareto improvement. In all cases, the proposed method generates Pareto-optimal cross efficiencies for the DMUs. Additionally, in some cases, our method generates cross efficiencies that not only are Pareto optimal, but also unify peer-evaluation, self-evaluation and common-weight-evaluation in DEA cross-efficiency evaluation. The rest of this paper is summarized as follows. Section 2 gives a brief introduction to the CCR model and the traditional cross-efficiency evaluation method. Section 3 shows the proposed Pareto optimality estimation model and the cross-efficiency Pareto improvement model. Section 4 presents an algorithm which can be used to generate Pareto-optimal cross efficiencies for the DMUs. The proposed approach is applied for project selection and efficiency evaluation of nursing homes in Section 5. Finally, conclusions and further research directions are given in Section 6.Assume that there are n DMUs to be evaluated, and each DMUj(j=1,2, … , n) has m input(s) and s output(s) which are denoted as vectorsXj=(x1j,x2j,…,xmj)T∈ℜ+mandYj=(y1j,y2j,…,xsj)T∈ℜ+s, respectively. The original DEA model (CCR model) proposed by Charnes et al. (1978) is shown in its linear programming format as follows.(1)MaxEdd=μdTYds.t.ωdTXd=1ωdTXj−μdTYj≥0(j=1,2,…,n)ωd≥0μd≥0In model (1),ωd=(ω1d,ω2d,…,ωmd)T∈ℜ+mandμd=(μ1d,μ2d,…,μnd)T∈ℜ+sare weight vectors corresponding to the input and output respectively and “0” is a zero vector. By solving model (1), we can obtain the optimal solution{ωd′T, μd′T}for DMUd(d=1,2,…,n). Then, the cross efficiency of DMUjrelated to DMUdcan be calculated as in (2).(2)Edj=μd′TYjωd′TXjThe cross-efficiency score of DMUjis then defined as the average ofEdj(d=1,2,…,n)as in (3). This score is used as a new efficiency measure for DMUj.(3)Ej=1n∑d=1nEdjNote that the optimal weights obtained from model (1) may not be unique for each DMUd. To solve this problem, Doyle and Green (1994) proposed using the benevolent and aggressive models which are shown as models (4) and (5), respectively(4)Max∑r=1sμrd(∑j=1,j≠dnyrj)s.t.∑i=1mωid(∑j=1,j≠dnxij)=1μdTYd−Edd×ωdTXd=0μdTYj−ωdTXj≤0(j=1,2,…,n)μd≥0ωd≥0and(5)Min∑r=1sμrd(∑j=1,j≠dnyrj)s.t.∑i=1mωid(∑j=1,j≠dnxij)=1μdTYd−Edd×ωdTXd=0μdTYj−ωdTXj≤0(j=1,2,…,n)μd≥0ωd≥0In models (4) and (5), Eddis the CCR efficiency of DMUdobtained from model (1). As can be seen from these models, the benevolent model (4) aims to maximize the other DMUs' cross efficiencies while the aggressive model (5) tries to minimize the other DMUs' cross efficiencies. Both the models give priority to keeping the efficiency of the DMU under evaluation at its predetermined optimal level (CCR efficiency).Although the alternative secondary goal models can reduce the number of possible optimal weights solutions (i.e. more likely give a unique solution), in the general case the results are not Pareto optimal which may not be acceptable by all DMUs. In this section, to obtain Pareto-optimal cross efficiencies, we propose a Pareto optimality estimation model to estimate whether the given cross-efficiency scores for the DMUs have the potential to be improved. Then, a cross-efficiency Pareto improvement model is proposed to bring the cross-efficiency scores for the DMUs closer to Pareto optimality.When making improvement to the cross-efficiency scores for the DMUs, the DMUs need to select n new sets of weights to reevaluate the DMUs for better cross-efficiency scores. The improvement of the cross-efficiency scores requires consideration of all the DMUs because CCR optimality says that no DMU can improve its efficiency by itself and in general all DMUs must be considered if the goal is Pareto optimality. Here, we state the following two basic principles, both of which are implicitly required by the Pareto optimality in this paper, as an aid for explaining our method.Principle 1. Given a set of cross-efficiency scores for the DMUs, when a new set of weights is selected for a DMU to improve the cross-efficiency scores of DMUs, the new set must guarantee that the DMU's new self-evaluated efficiency is no smaller than its previously given cross-efficiency score.Principle 2. Given a set of cross-efficiency scores for the DMUs, when a new set of weights is selected for a DMU to improve the cross-efficiency scores of DMUs, the new set must guarantee that the other DMUs' cross efficiencies calculated with the new set are no smaller than their previously given cross-efficiency scores.These two principles are required for all the DMUs because they all have the intention to maintain lower bounds for their cross efficiencies. Sometimes CCR efficiency may even be required by the DMUs. Similar principles have also appeared in the models of Liang et al. (2008b), Wang and Chin (2010), and Du, Cook, Liang, and Zhu (2014). To better illustrate our method, we give the following Definition 1.Definition 1Given a set of cross-efficiency scores for the DMUs, if it is impossible to make any DMU's cross-efficiency score better off without making at least one DMU's cross-efficiency score worse off under the basic principles proposed above, we define this set of cross-efficiency scores as Pareto-optimal cross efficiencies for the DMUs.Based on Pareto optimality theory, the DMUs may consider whether n new sets of weights can be selected which can improve their cross-efficiency scores without making any of the DMUs' cross-efficiency scores worse off. To see whether a given set of cross-efficiency scores for the DMUs are Pareto-optimal cross efficiencies, we propose the following Pareto optimality estimation model (6). As will be seen later, a non-zero result of the model tells us that the cross-efficiencies are Pareto-optimal and a result of zero is reasonable (but not conclusive) evidence that they are not.(6)MinZds.t.ωdTXd=1μdTYd≥θdωdTXj−μdTYj≥0(j=1,2,…,n)θj×ωdTXj−μdTYj−sjd=0(j≠d,j=1,2,…,n)sjd≤Zd(j≠d,j=1,2,…,n)ωd≥0μd≥0sjdfree(j≠d,j=1,2,…,n)Zd≥0In model (6),{θ1,=θ,…,θn}is the given set of cross-efficiency scores to be evaluated. In the algorithm to be developed in the next section, θd(d = 1,2,..,n) initially take values given by the average original cross efficiency of DMUd(d = 1,2,..,n). In this model, when DMUdselects the weights, it keeps its own efficiency no less than its given cross-efficiency score and, subject to that priority, it then strives to make the other DMUs' cross efficiencies be no smaller than their given cross-efficiency scores.In the context of Pareto optimality estimation model (6), the following theorems can be proven.Theorem 1Assume that{ωd*T,μd*T,sjd*,Zd*,∀j}is an optimal solution to model (6) corresponding to DMUd. IfZd*=0, then solving model (6) for any DMUk(k = 1,2, … , n), we haveZk*=0, whereZk*is the optimal objective value of model (6).ProofLetωk=ωd*/(ωd*TXk),μk=μd*/(ωd*TXk),sjk=sjd*/(ωd*TXk)(j=1,2,…,n), andZk=Zd*It is easy to verify that{ωkT,μkT,sjk(j=1,2,…,n),Zk}is a feasible solution to model (6) when solving the model for any given DMUk. So, we getZk*≤Zk=Zd*=0. Because it is known thatZk*≥0, we must haveZk*=0. □Theorem 2IfZd*=0, the DMUs have the potential to improve their cross-efficiency scores without reducing the cross-efficiency scores of any of the DMUs.ProofThe consequence of Theorem 1 is that ifZd*=0, we haveZk*=0,∀k. So, from the fifth constraint group of model (6), we can getsjk*≤0, ∀k, j. From the fourth constraint group of model (6), we know that for any j, ifsjd*≤0, we haveθj≤μd*TYj/(ωd*TXj)(d=1,2,…,n). Consequently, we haveθj≤1n∑d=1nμd*TYj/(ωd*TXj)Δ̲̲θj′(j=1,2,…,n). Therefore, the DMUs have the potential to improve their cross-efficiency scores to accomplish Pareto improvement without reducing the cross-efficiency score of any DMU. □It can be seen from Theorems 1 and 2 that model (6) can be used to estimate whether a given set of cross-efficiency scores are Pareto-optimal cross efficiencies for the DMUs. IfZd*>0, then the given set of cross-efficiency scores for DMUs cannot be improved while maintaining the cross-efficiency scores of the other DMUs to be no smaller their given levels under the predetermined two principles, and therefore those are Pareto-optimal cross efficiencies for the DMUs. IfZd*=0, then the DMUs have the potential to improve their cross-efficiency scores by Pareto improvement, so these cross-efficiency scores may not be Pareto-optimal cross efficiencies for the DMUs and they need to be further checked.By using the Pareto optimality estimation model (6), we can determine whether the DMUs have the potential to make their own cross-efficiency scores better off without making any DMU's cross-efficiency score worse off. To make Pareto improvement for the cross-efficiency scores which are not Pareto-optimal cross efficiencies for the DMUs, we propose the following cross-efficiency Pareto improvement model (7).(7)MaxμdTYds.t.ωdTXd=1ωdTXj−μdTYj≥0(j=1,2,…,n)θj×ωdTXj−μdTYj≤0(j=1,2,…,n)ωd≥0μd≥0From the calculated results of model (6), ifZj*=0,∀j, we know that model (7) always has feasible solutions. Further, when cross-efficiency improvement is made for DMUd, it is intended to maximize the efficiency of DMUdwhile keeping all DMUs' cross efficiencies no worse than their present cross-efficiency scores.By solving model (7), each DMU will get a new set of optimal input and output weights. These weights are used to do both self-evaluation and peer-evaluation. By averaging the self-evaluated and peer-evaluated efficiency scores for each DMUd, we can obtain the corresponding Pareto-improved cross efficiency for the DMU as defined in (8).Definition 2Let{ωd*T,μd*T}be an optimal solution of model (7) with respect to DMUd°For each DMUj,(8)θj=1n∑d=1nμd*TYjωd*TXjis defined as its Pareto-improved cross efficiency.In this section, we propose an iterative procedure to get the Pareto-optimal cross efficiencies for the DMUs. The basic idea of the algorithm is to start with solving the traditional CCR model (1) to get the original cross-efficiency scores for the DMUs. Then, we solve model (6) for DMUdto see whether the DMUs have the potential to make Pareto improvements in their cross-efficiency scores. If the DMUs have the potential to improve their cross-efficiency scores, we solve model (7) to get Pareto-improved cross efficiency for each DMU by (8). After this, the Pareto-improved cross efficiencies will be evaluated by model (6), and this process is repeated as many times as needed. When the change in Pareto-improved cross efficiency converges to within ɛ in a iteration for each DMUd, or the Pareto-improved cross efficiencies are revealed to be Pareto-optimal by model (6), the algorithm terminates, and we get the Pareto-optimal cross efficiencies for the DMUs. The details are shown as follows.Step 1.Solve model (1) and obtain a set of cross-efficiency scores defined by (3) for the DMUs. Let t = 1 andθj*=θj1=Ej(j = 1,2, … , n).Let the given cross-efficiency scores beθj=θjt(j = 1,2, … , n) for model (6) and model (7). Solve model (6), if the optimal solution haveZd*>0for ∀d, then stop. IfZd*=0for ∀d, solve model (7) to select a new set of optimal weights for all the DMUs, then letθj*=θjt+1=1n∑d=1nμd*TYjωd*TXj(j = 1,2, … , n) where{ωd*T,μd*T}are the optimal weights obtained by solving model (7).If|θjt−θjt+1|≥ɛfor some j, let t = t + 1 and go Step 2. If|θjt−θjt+1|<ɛfor all j, then stop.We claim that when the proposed algorithm stops, the obtainedθj*is the Pareto-optimal cross efficiency for DMUjas defined in Definition 1. Concerning this proposed algorithm, we present the following Theorems 3–7.Theorem 3For any j = 1,2, … , n, we have that theθjtare non-decreasing for t = 1,2. … , and we haveEj≤θjt≤Ejjwhere Ejand Ejjare the original cross-efficiency score and the CCR efficiency score for DMUj, respectively.ProofLet{ωd*T,μd*T}be an optimal solution to model (7) when DMUdis being improved. From the constraints in model (7), for each DMUj, we haveθjt=θj≤μd*TYj/(ωd*TXj),∀d. It is easy to see that{ωd*T/(ωd*TXj),μd*T/(ωd*TXj)}is a feasible solution to model (1) when evaluating a DMUj, so, for any d = 1,2, … , n, we have[μd*T/(ωd*TXj)]Yj/{[ωd*T/(ωd*TXj)]Xj}=μd*TYj/(ωd*TXj)≤Ejj. From this, we can obtainθjt≤μd*TYj/(ωd*TXj)≤Ejj,∀d. Thus, we get thatθjt≤θjt+1=1n∑d=1n[μd*TYj/(ωd*TXj)]≤Ejj, so for all j = 1,2, … , n, theθJtare non-decreasing for t = 1,2, … and satisfyEj=θj1≤θjt≤Ejj. □Theorem 4For any j = 1,2, … , n,θjtare increasing for t = 1,2,.., if theθjtare not Pareto-optimal cross efficiencies.ProofIfθjtare not Pareto-optimal cross efficiencies, then according to Definition 1, we must haveθjt=θj<μdTYj/(ωdTXj),∃dwhere{ωdT,μdT}is a feasible solution corresponding to DMUdwhen it is being improved using model (7). Then it is easy to see that{ωdT/(ωdTXj),μdT/(ωdTXj)}is also a feasible solution of model (7) when DMUjis being improved. This means we have[μdT/(ωdTXj)]Yj/{[ωdT/(ωdTXj)]Xj}=μdTYj/ωdTXj≤μj*TYj/(ωj*TXj)where{ωj*T,μj*T}is the optimal solution of model (7) when DMUjis being improved. We already haveθjt=θj<μdTYj/ωdTXj, therefore we getθjt<μj*TYj/(ωj*TXj). Note also that we already haveθjt=θj≤μd*TYj/(ωd*TXj)(∀d,d≠j)where{ωd*T,μd*T}is the optimal solution corresponding to DMUdwhen it is being improved using model (7), so we getθjt<θjt+1=1n[∑d=1,d≠jnμd*TYj/(ωd*TXj)+μj*TYj/(ωj*TXj)]. Therefore, for any j = 1,2, … , n, theθjtare increasing for t = 1,2, … , ifθjtare not Pareto-optimal cross efficiencies. □Theorem 5For any d = 1,2, … , n, the self-evaluated efficienciesEddtare non-increasing for t = 1,2, … , whereEddtis defined asEddt=(μdt*)TYdwhereμdt*are the optimal output weights obtained by model (7) for DMUdin the tth iteration of the algorithm. We also haveθdt≤Eddt≤Edd.ProofLet{(ωdt*)T,(μdt*)T}be an optimal solution to model (7) when DMUdis being improved in the tth iteration of the algorithm. As was identified in Theorem 3,θjt≤θjt+1, which means that for any DMUdbeing improved, the feasible region of model (7) in iteration (t + 1) is a subset of the feasible region of model (7) in iteration t. So,{(ωdt+1*)T,(μdt+1*)T}is a feasible solution of model (7) corresponding to DMUdin the tth iteration of the algorithm. It is easy to see that for any t,{(ωdt*)T,(μdt*)T}is also a feasible solution to model (1). Thus, we haveEddt+1=(μdt+1*)TYd≤Eddt=(μdt*)TYd≤Edd. Also, it is easy to figure out that for any t and k, we have(μkt*)TYd/[(ωkt*)TXd]≤(μdt*)TYdfrom which we haveθdt≤θdt+1=1n∑k=1n(μkt*)TYd/[(ωkt*)TXd]≤1n∑k=1n(μdt*)TYd=Eddt. Therefore, based on the above inferences, we haveθdt≤Eddt+1≤Eddt≤Edd□Theorem 6If the algorithm terminates at Step 3 in the tth iteration of the algorithm, for any d = 1,2, … , n, the Pareto-improved cross efficiency and the self-evaluated efficiency of DMUdconverge to the same value, i.e.θdt=Eddt=θd*.Let{ωd*T,μd*T}be an optimal solution to model (7) for DMUdin iteration t of the algorithm. If the algorithm converges in this iteration, i.e.θdt=θdt+1=θd*, then we can show thatθdt=μd*TYd=Eddt. This can be proved by reduction to absurdity. Ifθdt<μd*TYdin model (7), then by adding byθdt≤μk*TYd/(ωk*TXd)(k≠d,k=1,2,…,n), we can haveθdt<θdt+1=1n{μk*TYd+∑k≠d,k=1n[μk*TYd/(ωk*TXd)]}. This is contrary toθdt=θdt+1. Therefore, we haveθdt=μd*TYd=Eddt. □Theorem 7The final generated Pareto-improved cross efficiencies for the DMUs constitute a Pareto-optimal solution.ProofThe algorithm terminates at either Step 2 or Step 3. If the algorithm stops at Step 2, no new n sets of weights can be selected by the algorithm to improve any of the DMUs' cross-efficiency scores without making at least one of the DMUs’ cross-efficiency scores worse off. Thus by definition of Pareto-optimality, the final generated Pareto-improved cross efficiencies are Pareto optimal. If the algorithm converges at Step 3, we haveθdt=θdt+1. But if the final generated Pareto-improved cross efficiencies are not Pareto optimal, we know from Theorem 2 thatθdt<θdt+1. This is contrary to the convergence condition thatθdt=θdt+1. Therefore, the final generated Pareto-improved cross efficiencies for the DMUs constitute a Pareto-optimal solution. □Theorem 3 shows that the Pareto-improved efficiencyθjtfor each DMUjis non-decreasing and bounded between its original cross-efficiency score Ejand CCR efficiency Ejjduring the process. Theorem 4 shows that the Pareto-improved efficiencyθjtfor each DMUjis increasing before it reaches the Pareto-optimal cross efficiency. These theorems ensure that the algorithm will terminate within a finite number of steps and that the cross-efficiency scores of the DMUs are improved as the algorithm proceeds. Theorem 5 shows that the self-evaluated efficiencies of the DMUs are non-increasing during the process. The self-evaluated efficiencies of the DMUs are not smaller than their peer-evaluated efficiencies (Pareto-improved cross efficiencies) in each iteration of the algorithm. Theorem 6 points out that the self-evaluated efficiency and the peer-evaluated efficiency of each DMU will converge to the same efficiency score if the algorithm stops at Step 3 (and Theorem 7 implies that this score is also the DMU's Pareto-optimal cross-efficiency score). We can view the convergence of the algorithm as a kind of tradeoff, in which the self-evaluated efficiency of each DMU is reduced to improve its peer-evaluated efficiency. This kind of tradeoff stops when the self-evaluated efficiency and peer-evaluated efficiency converge to the same value.Theorem 7 shows that the final generated cross-efficiency scores for the DMUs constitute a Pareto-optimal solution. Therefore, the proposed algorithm produces for the DMUs a set of Pareto-optimal cross efficiencies in DEA cross-efficiency evaluation. Furthermore, the cross-efficiency scores for the DMUs cannot be further improved if the other DMUs' cross-efficiency scores must be guaranteed to be at or above the present levels. Additionally, if the algorithm stops at its Step 3, the self-evaluated efficiency and peer-evaluated efficiency of each DMU will converge to the same Pareto-optimal cross efficiency. This is of interest because the Pareto optimality of the results and its unification with self-evaluation and peer-evaluation for the DMUs will make the evaluation results more acceptable to the DMUs, i.e. the DMUs have more reason to believe in the fairness of the evaluation.In this part, we illustrate that common weights appear for the DMUs if the proposed algorithm terminates at Step 3. Firstly, we propose the following Theorem 8 and Corollary 1.Theorem 8If the algorithm terminates at Step 3 in the tth iteration of the algorithm, the cross efficiencies of a DMU generated from the other DMUs are all equal to its Pareto-optimal cross efficiency, i.e. for any d = 1,2, … , n, k = 1,2, … , n, we haveθd*=θdt=Ekdt=μk*TYd/ωk*TXd, where{ωk*T,μk*T}are the optimal weights generated from model (7) for DMUkin tth iteration of the algorithm.ProofThis can be proved using reduction to absurdity. If the algorithm converges at tth iteration, for any d, we haveθdt=θdt+1=θd*. For any k, we haveθdt≤μk*TYd/(ωk*TXd)in model (7). Ifθdt<μk*TYd/(ωk*TXd)for any k and for a DMUd, then, for this DMUdwe haveθdt<θdt+1=1n∑k=1n[μk*TYd/(ωk*TXd)]. This is contrary toθdt=θdt+1, so we haveθd*=θdt=Ekdt=μk*TYd/(ωk*TXd)for any d, k. □From the proof of Theorem 8, the common optimal weight result follows easily.Corollary 1If the algorithm terminates at Step 3 of the algorithm, there must exist a set of common weights {ωT, μT}, which can attain the goal thatθj*=μTYj/ωTXj(≤1)for all j, whereθj*is Pareto-optimal cross efficiency of DMUj.Theorem 8 and Corollary 1 show that all the DMUs generate the same cross efficiencies for the DMUs if the algorithm stops at Step 3. The optimal weights of every DMU can be seen as a set of common weights which can generate Pareto-optimal cross efficiencies for the DMUs. But it should be noted here that the DMUs use different constraints (ωdTXd=1) to avoid trivial solutions in model (7). This may lead to the situation that the set of optimal weights selected by model (7) for each DMU is a multiple of the set of common weights, i.e.{ωd*T,μd*T}=α{ωT,μT}(α>0)where α is a multiplier and {ωT, μT}is the set of common weights. Fortunately, this does not affect the common-weight property of the optimal weights because the optimal weights in DEA reflect only the relative importance a DMU attaches to its corresponding input(s) and output(s) when evaluating efficiency (Charness & Cooper, 1962). Therefore, we can give the common weights of the DMUs by standardizing the optimal weights of any DMUdby the following equations.(9)ωT=ωd*T∑i=1mωid*+∑r=1sμrd*(10)μT=Tμd*T∑i=1mωid*+∑r=1sμrd*To illustrate the Pareto-optimal cross-efficiency evaluation models and the proposed algorithm, we use a small numerical example from Liang et al. (2008b) involving five DMUs. Each DMU has three inputs and two outputs, which are shown in Table 1.We evaluate the DMUs by CCR model (1), traditional cross-efficiency model (3), benevolent model (4), aggressive model (5), and the proposed algorithm. The results of the evaluations are listed in Table 2. Additionally, we standardize the optimal weights of all the DMUs by (9) and (10) when the algorithm terminates, with the results reported in Table 3.From the results, the cross-efficiency scores for the DMUs generated from models (3), (4), and (5) are not Pareto optimal, for they can be further improved. To proceed, we use the proposed model to improve the cross-efficiency scores of all DMUs, and Fig. 1 shows the process of efficiency improvement.As can be seen from Fig. 1, the proposed algorithm obtains the Pareto-optimal cross efficiencies for all DMUs after 8 iterations. Take DMU1 as an example, its Pareto-improved cross efficiency increases and its self-evaluated efficiency decreases during the process. At the end of the algorithm, the cross-efficiency is equivalent to its self-evaluated efficiency (0.5715) which is defined as the Pareto-optimal cross efficiency for DMU1. Additionally, a common set of weights is obtained for the Pareto-optimal cross efficiencies of the DMUs when the algorithm terminates.In this section, we illustrate our method by applying it to R&D project selection and efficiency evaluation of nursing homes.37 R&D projects involving one input and five outputs are used, which are documented in Table 4 (example from Oral, Kettani, & Lang, 1991). It should be noted here that the DMUs are competitive with each other because they all want to get the funding to support their projects (Liang et al., 2008b), so we need to get a set of cross-efficiency scores that each DMU can admit is true and therefore accept.X1: BudgetsY1: Indirect economic contributionY2: Direct economic contributionY3: Technical contributionY4: Social contributionY5: Scientific contributionThe input budgets are in monetary units. The outputs are adjusted average scores obtained using Delphi Method. More details of the input and outputs can be seen in Oral et al. (1991).Table 5shows the evaluation results of the proposed algorithm and the alternative traditional models. As can be seen from the results, each DMU's cross-efficiency score generated from model (3) is larger than that from model (5) and smaller than that from model (4). This agrees with the arbitrary, benevolent, and aggressive characteristics of the traditional models. Additionally, compared with the results of the traditional models, the proposed algorithm generates higher cross-efficiency scores for the DMUs. This is because of the Pareto optimality of the cross-efficiency scores, for they cannot be further improved without reducing some DMU's cross-efficiency score. Also, when the algorithm stops, we get a common set of weights for Pareto-optimal cross-efficiencies for the DMUs, which are listed in Table 6.The R&D project selection results using the Pareto-optimal cross efficiencies are shown in Table 7. We also give the results generated by the method of Green et al. (1996) and Oral et al. (1991). Based on the project selection rule in Green et al. (1996), the projects are chosen by decreasing values of the cross-efficiency scores of the DMUs subject to the requirement that the sum budget of the projects cannot exceed 1000. As can be seen from the results, our method selects the same 17 projects as Green et al. 's. The sum budget for this selection is 982.9. Compared to the results selected by Oral et al. 's method, our method selects project 32 (Pareto-optimal cross efficiency, 0.6020) and project 12 (0.5282) while their method selects project 5 (0.4581) instead. Therefore, within the residual budget, our method can achieve the goal of project selection with projects that have slightly higher cross-efficiency scores than the traditional method proposed by Oral et al. (1991). Furthermore, the sum budget of our method is higher than Oral et al. 's method and one more project is given the chance to take part in the project program. This indicates that more chances are provided and more resources are used for the candidates in our selected program. Additionally, our approach finally evaluates the DMUs with a common set of weights. This will make the evaluation results and the R&D project selection results more likely to be accepted by all the DMUs.As listed in Table 8, each nursing home has two inputs (X1 and X2) and two outputs (Y1 and Y2) (example from Sexton et al., 1986).StHr (X1): staff hours per day, including nurses, physicians, etc.Supp (X2): supplies per day, measured in thousands of dollars.MCPD (Y1): total Medicare-plus Medicaid-reimbursed patient days.PPPD (Y2): total privately paid patient days.Table 9shows the evaluation results of the six nursing homes. Accompanied with it, we show the common weights for the Pareto-optimal cross efficiencies of the DMUs in Table 10. As can be seen from the results, the proposed algorithm has improved the cross-efficiency scores generated from model (3) and finally generated larger cross-efficiency scores (in fact, Pareto-optimal cross efficiencies) for all the DMUs. Furthermore, apart from DMUC, all the other DMUs' Pareto-optimal cross efficiencies are larger than those generated from the benevolent model (4). This shows that the efficiency-improving power of the benevolent model (4) is weaker than the proposed algorithm. Additionally, the DMUs finally use a common set of weights to make efficiency evaluation in our algorithm, which makes the evaluation results more acceptable to all the DMUs.

@&#CONCLUSIONS@&#
Because of its good ability in evaluation and ranking of DMUs, DEA cross-efficiency evaluation has been widely applied in a variety of areas. However, a problem occurs with this evaluation methodology because not all the DMUs may accept these cross-efficiency scores as their efficiency measure scores; they may refuse to admit the scores' validity because the traditional cross-efficiency scores generally do not constitute Pareto-optimal solutions. To solve this problem, firstly, we proposed a Pareto optimality estimation model to estimate whether a given set of cross-efficiency scores are Pareto-optimal solutions under the predetermined weight selection principles. Secondly, we introduced a cross-efficiency Pareto improvement model to do Pareto improvement of the cross-efficiency scores of the DMUs. Finally, based on these two models, an algorithm was proposed to generate cross efficiencies which were proved to be Pareto optimal for the DMUs and cannot be further improved.Our method brings at least four advantages to cross-efficiency evaluation. Firstly, because of the Pareto optimality of the generated cross efficiencies, they will be more acceptable to all the DMUs. Secondly, the numerical example shows that the proposed algorithm has good power to improve the cross-efficiency scores of the DMUs. Thirdly, if the proposed algorithm stops at Step 3, the proposed approach will generate the DMUs with Pareto-optimal cross efficiencies that unify self-evaluation, peer-evaluation, and common-weight evaluation. To be specific, the self-evaluated efficiency and peer-evaluated efficiency for each DMU converge to the same common-weight evaluated efficiency which is the Pareto-optimal cross efficiency for the DMU. Finally, if the algorithm terminates at its Step 3, then a common set of weights can be determined which generates Pareto-optimal cross efficiencies, which will give even more reason for all the DMUs to accept the evaluation results.We suggest two further research directions to build upon our result. Firstly, the Pareto-optimal cross efficiencies are generated by the algorithm while maintaining the two introduced basic principles. We believe that better cross efficiencies might be found without the constraints of these principles. Secondly, the unification (under certain conditions) of self-evaluation, peer-evaluation, and common-weight-evaluation seen in this paper provides a new research path for cross-efficiency evaluation.