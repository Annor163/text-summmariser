@&#MAIN-TITLE@&#
Scheduling to minimize the maximum total completion time per machine

@&#HIGHLIGHTS@&#
We study the problem of minimizing the maximum total completion time per machine.The problem is strongly NP-hard if the number of machines is a part of input.We show new lower and upper bounds on the worst-case ratio of SPT.We present another algorithm which has a worst-case ratio of no more than 2.

@&#KEYPHRASES@&#
Scheduling,Parallel machine,Worst-case ratio,

@&#ABSTRACT@&#
In this paper, we study the problem of minimizing the maximum total completion time per machine on m parallel and identical machines. We prove that the problem is strongly NP-hard if m is a part of the input. When m is a given number, a pseudo-polynomial time dynamic programming is proposed. We also show that the worst-case ratio of SPT is at most 2.608 and at least 2.5366 when m is sufficiently large. We further present another algorithm which has a worst-case ratio of 2.

@&#INTRODUCTION@&#
Minimizing the total (weighted) completion time is one of the most commonly studied criteria in scheduling theory (Smith, 1956; Kawaguchi, and Kyan, 1986). It is well known that the problem of minimizing the total completion time on parallel and identical machines can be solved optimally by the Shortest Processing Time first (SPT for short) algorithm (Conway et al., 1967). Here SPT first sorts all jobs in the order of nondecreasing processing times, then assigns the first unprocessed job in the sequence to the machine which can complete it as early as possible.However, in the schedule produced by SPT, the total completion time of the jobs assigned to each machine may vary quite widely. To keep the total completion time per machine as equal as possible, it is convenient to consider the objective of minimizing the maximum total completion time per machine. Suppose a manager of a company wants to assign some late orders to several parallel subsidiaries. Since the orders are delayed, a penalty should be paid for each order, which is proportional to its completion time. The manager wants to be fair such that the total penalty that each subsidiary needs to be paid is as equal as possible. The situation can be viewed as a scheduling problem, in which orders are modeled as jobs and subsidiaries are modeled as machines. Taking the above objective into consideration, the manager may be provided with constructive assistance and receive much less complaints from subsidiaries.The problem can be stated formally as follows. We are given a sequence of n independent jobs J1, J2, … , Jn, which need to be non-preemptively processed on m parallel and identical machines M1, M2, … , Mm. The size (processing time) of Jjis pj, j = 1, … , n. Without loss of generality, we assume p1 ≤ p2 ≤ ⋅⋅⋅ ≤ pn. Given a schedule σA, letCjAbe the completion time of Jjin σA, j = 1, … , n. The total completion time of the jobs scheduled on Miis denotedTCiA,i = 1, … , m. ThenTCA=maxi=1,…,mTCiAis the objective value of σA. By extending the three-field notation, the problem can be denoted as Pm||(∑Cj)max, while the corresponding problem with the objective of minimizing the total completion time is denoted by Pm||∑Cjas usual. The problem of finding such a schedule among optimal schedules of Pm||∑Cjthat the maximum total completion time per machine is minimized is denoted Pm||Lex(∑Cj, (∑Cj)max). We will use σ* and σ** to denote the optimal schedules of Pm||(∑Cj)max and Pm||Lex(∑Cj, (∑Cj)max), respectively.The problem Pm||(∑Cj)max was first proposed by Angel et al. (2008). They proved that to find schedule σ* or σ** is NP-hard. They also proved that the worst-case ratio of SPT for Pm||(∑Cj)max lies in the interval[2−2m2+m,3−3m+1m2]. In this paper, we show that the problem is strongly NP-hard if m is a part of the input. When m is a given number, a pseudo-polynomial time dynamic programming algorithm is proposed, which will directly lead to a Fully Polynomial Time Approximation Scheme (FPTAS). We also show that the worst-case ratio of SPT is at most 2.608 and at least 2.5366 when m is sufficiently large. The lower and upper bounds of the worst-case ratio of SPT when m is a fixed number are also improved. We further present another algorithm Reverse SPT (RSPT for short) which is also optimal for Pm||∑Cjand has a worst-case ratio of 2 for Pm||(∑Cj)max.Comparing with the FPTAS, the advantage of SPT and RSPT is that both are optimal algorithms for Pm||∑Cj. Thus corresponding results have some similarity with hierarchical optimization, an approach widely used for multicriteria scheduling (Hoogeveen, 2005; T’kindt, and Billaut, 2006; Perez-Gonzalez, and Framinan, 2014). Inspired by our work, Wan et al (2014) considered the problem of Pm||Lex(∑Cj, (∑Cj)max), and proved that the worst-case ratios of SPT and RSPT are at most116and32,respectively. The difference on the worst-case ratios of the same algorithm indicates that σ* and σ** usually are not identical.There are fruitful results in the field of multicriteria scheduling problems on parallel machines. Most researches are concerned with two objectives of minimizing the makespan and minimizing the total completion time (Leung, and Young, 1989; Lin et al, 2013; Lee et al, 2014), which are regarded to be egalitarian and utilitarian objectives, respectively (Myerson, 1981). In fact, the objective of minimizing the maximum total completion time per machine shares the above two characteristic features, which makes our results new and interesting. Another line of research about multicriteria scheduling is the so-called multi-agent scheduling (Baker and Smith, 2003; Agnetis et al., 2004; Leung et al, 2010; Mor, and Mosheiov, 2011; Nong et al, 2011). It arises in situations where multiple agents (customers), each having a different objective, compete for a common processing resource. However, for our problem, jobs belong to the same agent and contribute to the single objective.The rest of the paper is organized as follows. In Section 2, we present complexity result and dynamic programming. The analyses of SPT and RSPT are given in Sections 3 and 4, respectively. Finally some conclusions are made in Section 5.In Angel et al. (2008), it is proved that finding a schedule among all schedules or among optimal schedules of Pm||∑Cjsuch that the maximum total completion time per machine is minimized is NP-hard. However, if m is a part of the input, to find a schedule minimizing the maximum total completion time per machine is strongly NP-hard. The following helpful lemma can be proved by a job interchange argument.Lemma 2.1There always exists an optimal schedule of Pm||(∑Cj)maxin which all machines process the jobs in non-decreasing order of the size without idle time.P||(∑Cj)maxis strongly NP-hard.The theorem will be proved by reduction from the numerical three-dimensional matching problem, which is known to be strongly NP-complete (Garey, and Johnson (1978)).Numerical three-dimensional matching problem: Given three multisets of integers U = {u1, … , um}, V = {v1, … , vm}, W = {w1, … , wm} and an integer B such that∑i=1m(ui+vi+wi)=mB,do there exist two permutations ϕ and φ of {1, …, m} such that ui+ vϕ(i) + wφ(i) = B for i = 1, … , m?Let IMbe an instance of numerical three-dimensional matching. Construct an instance with m machines and 3m jobs. Each job belongs to one of three types, U-job, V-job, or W-job. Corresponding to each element uiof U, there is a U-jobJUiwith sizeui3. Corresponding to each element viof V, there is a V-jobJViwith sizevi2+B. Corresponding to each element wiof W, there is a W-jobJWiwith size wi+ 2B. We will show that IMhas “yes” answer if and only if there is a feasible schedule such that the maximum total completion time per machine is no more than 5B.If IMhas “yes” answer, then there exist two permutations ϕ and φ of {1, …, m} such that ui+ vϕ(i) + wφ(i) = B for i = 1, … , m. LetJUi,JVϕ(i),JWφ(i)be the three jobs successively scheduled on Mi, i = 1, … , m. The total completion time of Mi, i = 1, … , m, is3ui3+2(vϕ(i)2+B)+(wφ(i)+2B)=5B.On the other hand, suppose there exist feasible schedules such that the maximum total completion time per machine is no more than 5B. By Lemma 2.1, we can focus on the one, denoted by σY, that jobs are sequenced in non-decreasing order of the sizes on each machine. Clearly,TCiY≤5B,i = 1, … , m. We show the structure of σYstep by step. Firstly, there is exactly one W-job on each machine. Otherwise, there exists machine Miwhich processes at least two W-jobs. ThusTCiY≥2·2B+2B=6B>5B,a contradiction. Let the W-job scheduled on MibeJWφ(i),i = 1, … , m, thus φ is a permutation of {1, …, m}. Secondly, there is at most one V-job on each machine. Otherwise, there exists machine Miwhich processes at least two V-jobs. ThusTCiY≥3·B+2·B+2B=7B>5B,also a contradiction. Let the V-job scheduled on MibeJVϕ(i),i = 1, … , m, thus ϕ is also a permutation of {1, …, m}. Finally, letUibe the set of U-jobs which are scheduled on Mi, i = 1, … , m. We claim that|Ui|=1for any i. In fact, ifUi={JUi},thenTCiY=3ui3+2(vϕ(i)2+B)+(wφ(i)+2B)=ui+vϕ(i)+wφ(i)+4B.If|Ui|≥2,thenTCiY>3∑JUi∈Uiui3+2(vϕ(i)2+B)+(wφ(i)+2B)=∑JUi∈Uiui+vϕ(i)+wφ(i)+4B.Hence, if there exists i, such that|Ui|≥2,then∑i=1mTCiY>∑i=1m(∑JUi∈Uiui+vϕ(i)+wφ(i)+4B)=4mB+∑i=1m(ui+vi+wi)=5mB≥mTCY,which is a contradiction. Therefore,|Ui|=1for any i and we assume thatUi={JUi}. Moreover, since∑i=1mTCiY=5mB≥mTCY=mmaxi=1,…,mTCiY,TCiY=5Bfor any i. Thus, we find two permutations ϕ and φ of {1, …, m} such that ui+ vϕ(i) + wφ(i) = B for any i = 1, … , m, which implies that IMhas “yes” answer.□The result of Theorem 2.1 excludes the possibility that the P||(∑Cj)max admits a FPTAS. However, if m is a fixed number, we can develop a pseudo-polynomial time dynamic programming algorithm DP. In other words, the problem is NP-hard in the ordinary sense.Denote by [c1, … , cm, t1, … , tm] the state vector of a partial schedule without idle time, where ciand tiare the current completion time and current total completion time of Mi, respectively, i = 1, … , m. Let the initial state space be F0 = {[0, … , 0, 0, … , 0]}. Let Fjbe the set of state vectors for schedules of the first j jobs, j = 1, 2, … , n. Then the state space Fjcan be recursively generated from Fj − 1 as follows.For any schedule of the first j − 1 jobs, which corresponds to a state vector [c1, … , cm, t1, … , tm] of Fj − 1, Jjcan be assigned to any one of the m machines. By Lemma 2.1, we can assume that Jjis the current last job on the machine where it is assigned. Specifically, if Jjis scheduled on Mi, then the resulting schedule of the first j jobs corresponds to a state vector[c1(i),…,cm(i),t1(i),…,tm(i)]of Fj, wherecl(i)={ci+pj,l=i,cl,l≠i,tl(i)={ti+ci+pj,l=i,tl,l≠i.Therefore, for each state vector [c1, … , cm, t1, … , tm] of Fj − 1, m state vectors of Fjwill be produced, i.e.,Fj={[c1(i),…,cm(i),t1(i),…,tm(i)],i=1,…,m|[c1,…,cm,t1,…,tm]∈Fj−1},j=1,…,n.The optimal objective value ismin{max{t1,…,tm}|[c1,…,cm,t1,…,tm]∈Fn}.However, vectors generated by different vectors of Fj − 1 maybe identical, and we only need to retain one of them in Fj. The number of different vectors in Fj, j = 0, … , n, can be bounded as follows. Since for any [c1, … , cm, t1, … , tm] ∈ Fj,ci≤∑j=1npjandti≤n∑j=1npjfor any i = 1, … , m, then|Fj|≤(∑j=1npj)m·(n∑j=1npj)m. Hence, the overall complexity of the dynamic programming isO(m(nm+1)(∑j=1npj)2m),which is pseudo-polynomial.Wan et al (2014) presented a FPTAS for the problem Pm||Lex(∑Cj, (∑Cj)max) by using the typical rounding technique, which can be dated back to Sahni (1976). By replacing the dynamic programming algorithm with algorithm DP given above, a FPTAS for the problem Pm||(∑Cj)max can be obtained in the same way. Unfortunately, the schedules produced by DP and the FPTAS are no longer optimal schedules of Pm||∑Cj.Note that the objective value of any schedule without idle time will not change if some dummy jobs of size 0 are added. Therefore, we assume in the rest of the paper that n = mk, where k is an integer. In this section, we will give tighter bounds on the worst-case performance of SPT, where SPT schedules J( j − 1)m + i, j = 1, … , k, to Mi, i = 1, … , m. Before that, we present some lower bounds on the optimal objective value of Pm||(∑Cj)max.Let σSbe the schedule produced by SPT. Clearly,(1)C(j−1)m+iS=∑l=1jp(l−1)m+i,j=1,…,k,i=1,…,m.Since SPT is the optimal algorithm for Pm||∑Cj,∑j=1nCjS≤∑j=1nCj*. Hence,(2)TC*=maxi=1,…,mTCi*≥1m∑i=1mTCi*=1m∑j=1nCj*≥1m∑j=1nCjS.Clearly,(3)TC*≥pn.Note that (2) and (3) have already been given in Angel et al. (2008). To prove a tighter bound of SPT, we first present some new lower bounds on TC* below.For any l, 1 ≤ l ≤ k − 1, at least l + 1 jobs among the largest lm + 1 jobs J(k − l)m, J(k − l)m + 1, … , Jkmwill be scheduled on the same machine in σ*. Thus we have(4)TC*≥∑j=1l+1jp(k−l)m+l+1−j≥p(k−l)m∑j=1l+1j=(l+1)(l+2)2p(k−l)m,l=1,…,k−1.By the definition of SPT,C1S≤C2S≤⋯≤CnS. ThusTCiS=∑j=0k−1Cjm+iS≥∑j=1k−1CjmSfor any i = 1, …, m − 1, andTCmS=∑j=1k−1CjmS+CkmS. Combining them with (2), we have(5)TC*≥1m∑j=1nCjS=1m(∑i=1m−1TCiS+TCmS)≥1m((m−1)∑j=1k−1CjmS+∑j=1k−1CjmS+CkmS)=∑j=1k−1CjmS+1mCkmS.Thus, for any l, 1 ≤ l ≤ k − 1,(6)TC*≥∑j=k−lk−1CjmS+1mCkmS=∑j=k−lk−1(∑s=1k−l−1psm+∑s=k−ljpsm)+1m(∑s=1k−l−1psm+∑s=k−lkpsm)=(l+1m)∑s=1k−l−1psm+∑s=k−lk−1∑j=sk−1psm+1m∑s=k−lkpsm=(l+1m)∑s=1k−l−1psm+∑s=k−lk(k−s+1m)psm.Using the above lower bounds on TC*, we are ready to prove new upper bounds on the worst-case ratio of SPT.Theorem 3.1The worst-case ratio of SPT for Pm||(∑Cj)maxis at mostβm={16m−76m+3m=2,3,4,47m−2318m+65≤m≤48,313m−163120m+30m≥49.By (6) and (4),(7)(l+1m)CkmS=(l+1m)∑s=1kpsm=(l+1m)(∑s=1k−l−1psm+∑s=k−lkpsm)=(l+1m)∑s=1k−l−1psm+∑s=k−lk(k−s+1m)psm+∑s=k−lk(s−k+l)psm≤TC*+∑s=k−l+1k2(s−k+l)(k−s+2)(k−s+1)TC*=(1+∑j=1l2(l−j+1)j(j+1))TC*Combining above inequality with (5), we haveTCS=TCmS=∑j=1k−1CjmS+CkmS=∑j=1k−1CjmS+1mCkmS+m−1mCkmS≤TC*+m−1ml+1m(1+∑j=1l2(l−j+1)j(j+1))TC*=(1+m−1lm+1(1+∑j=1l2(l−j+1)j(j+1)))TC*=(1+m−1lm+1(1+2(l+1)∑j=1l1j(j+1)−∑j=1l2j+1))TC*=(1+m−1lm+1(1+2l−∑j=1l2j+1))TC*.Letβml=1+m−1lm+1(1+2l−∑j=1l2j+1).Clearly, the worst-case ratio of SPT is at mostβm=minl=1,…,k−1βml. To give the exact value of βm, a more detailed calculation is needed. Note thatβml−βml+1=m−1lm+1(1+2l−∑j=1l2j+1)−m−1(l+1)m+1(1+2(l+1)−∑j=1l+12j+1)=(m−1lm+1−m−1(l+1)m+1)(1+2l−∑j=1l2j+1)−m−1(l+1)m+1(2−2l+2)=m(m−1)(lm+1)((l+1)m+1)(2l+1−∑j=1l2j+1)−m−1(l+1)m+12l+2l+2=m−1(lm+1)((l+1)m+1)(m(2l+1−∑j=1l2j+1)−(ml+1)2l+2l+2)=m−1(lm+1)((l+1)m+1)(m(3l+2l+2−∑j=1l2j+1)−2l+2l+2(3l+2l+2−∑j=1l2j+1)).Letγl=3l+2l+2−∑j=1l2j+1,thenγl−γl+1=3l+2l+2−∑j=1l2j+1−(3l+5l+3−∑j=1l+12j+1)=3l+2l+2−3l+5l+3+2l+2=2(l+1)(l+2)(l+3)>0andγ4=−730<0. Therefore,βml−βml+1=m−1(lm+1)((l+1)m+1)(γlm−2l+2l+2)<0for any l ≥ 4. Moreover, it can be calculated directly thatβm3≤βm4whenm≤85115−(22+23+24)=48,βm2≤βm3whenm≤6484−(22+23)=92,andβm1≤βm2whenm≤4353−22=2. The theorem is thus proved.□By Theorem 3.1 and the instance given in Angel et al. (2008), we know that the tight worst-case ratio of SPT is53when m = 2. To show the lower bound of the worst-case ratio of SPT when m ≥ 3, we present a more sophisticated instance.Let a1 = 1,a2=13,(8)a2i+1=1(2i+1)2(1−∑l=1ila2l),i≥1and(9)a2i=2i(3i−1)(1−∑l=1i−1la2l),i≥2.By the definitions of a2iand a2i + 1, we have(10)a2i+2=2(i+1)(3i+2)(1−∑l=1ila2l)=2(i+1)(3i+2)(1−∑l=1i−1la2l−ia2i)=2(i+1)(3i+2)(i(3i−1)2a2i−ia2i)=i(3i−3)(i+1)(3i+2)a2i<a2i,i≥2,and(11)a2i+1=1(2i+1)2(1−∑l=1i−1la2l−ia2i)=1(2i+1)2(i(3i−1)2a2i−ia2i)=3i(i−1)2(2i+1)2a2i<a2i,i≥2.By (8)–(11) and algebraic calculation, we havea3=227,a4=215,a5=2125andam={415t∏l=3t3l−63l−1m=2t,t≥3,2(t−1)5(2t+1)2∏l=3t3l−63l−1m=2t+1,t≥3.Defineα2t=1+∑l=1t(l+1)a2l,t≥2andα2t+1=1+∑l=1t(l+1)a2l+(t+2)a2t+1,t≥1.That is,α3=179,α4=3115,α5=799375and(12)αm={3115+415∑l=3tl+1l∏s=3l3s−63s−1m=2t,t≥3,3115+415∑l=3tl+1l∏s=3l3s−63s−1+2(t−1)(t+2)5(2t+1)2∏l=3t3l−63l−1m=2t+1,t≥3.Below we will present instances to show that the worst-case ratio of SPT is at least αm.For m = 2t, where t ≥ 2 is an integer, consider an instance with one job of size a1, m jobs of size a2l, 1 ≤ l ≤ t, and m − 1 jobs of size 0. By (10), a1 > a2 > a4 > ⋅⋅⋅ > a2t. Hence, in σS, jobs of size a2lare assigned to m machines separately, 1 ≤ l ≤ t, and the largest job of size a1 is assigned to Mm. Thus(13)TCS=TCmS=∑l=1t(l+1)a2l+a1=α2t.On the other hand, consider the schedule σAthat M1 processes the job of size a1, M2 processes two jobs of size a2, and for any i, 2 ≤ i ≤ t, both M2i − 1 and M2iprocess i jobs of size a2iand one job of size a2l, 1 ≤ l ≤ i − 1. The jobs of size 0 can be assigned to any machine. All jobs have been assigned (refer Fig. 1). Clearly,TC1A=1,TC2A=2·13+13=1,and by (9),TC2i−1A=TC2iA=∑l=1i−1la2l+∑l=i2i−1la2i=∑l=1i−1la2l+i(3i−1)2a2i=1,i=2,…,t.Hence, TCA= 1. Combining it with (13), we know that the worst-case ratio of SPT is at least αmwhen m is an even number.For m = 2t + 1, where t ≥ 1 is an integer, consider an instance slightly modified from the above one with one job of size a1, m jobs of size a2l, 1 ≤ l ≤ t, m jobs of size a2t + 1 and m − 1 jobs of size 0. By (10) and (11), a1 > a2 > a4 > ⋅⋅⋅ > a2t> a2t + 1. Hence, in σS, jobs of size a2l, 1 ≤ l ≤ t, a2t + 1 are assigned to m machines separately, and the largest job of size a1 is assigned to Mm. Thus(14)TCS=TCmS=(t+2)a2t+1+∑l=1t(l+1)a2l+a1=α2t+1.On the other hand, consider the following schedule σA. M1 processes the job of size a1, and M2 processes two jobs of size a2. For any i, 3 ≤ i ≤ t, both M2i − 1 and M2iprocess i jobs of size a2iand one job of size a2l, 1 ≤ l ≤ i − 1. Finally, M2t + 1 processes one job of size a2l, 1 ≤ l ≤ t and all 2t + 1 jobs of size a2t + 1 (refer Fig. 1). Similar to the above case, TCi= 1 for any 1 ≤ i ≤ 2t. Moreover, by (8),TC2i+1A=∑l=1tla2l+∑l=t+13t+1la2t+1=∑l=1tla2l+(2l+1)2a2t+1=1.Hence, we have TCA= 1. Combining it with (14), we know that the worst-case ratio of SPT is at least αmwhen m is an odd number.However, we can neither write αmas a simpler function of m nor obtain its asymptotic value when m tends to infinity. Numerical calculations show thatlimm→∞αm≈2.5366and βm− αm≤ 0.1068 for any m ≥ 3. Some values of αmand βmare shown in Table 1.Though the performance of SPT is worse than that of RSPT, the schedule obtained by SPT has some nice properties which makes it irreplaceable in some situations. For example, for the scheduling game where the cost of a job is defined as its completion time, Immorlica et al (2009) proved that the set of Nash Equilibria for the coordination mechanism of shortest first policy is precisely the set of schedules that can be generated by SPT. Hence, the price of anarchy of the scheduling game with any social objective equals to the worst-case ratio of SPT for the scheduling problem with the same objective. Therefore, to obtain the tight bound of SPT is of both theoretical interest and practical importance.Note that the worst-case ratio of SPT approaches 2.608 when m tends to infinity. In this section, we will present an improved algorithm with a smaller worst-case ratio of 2. Not only RSPT improves the worst-case performance of SPT, but also it does not increase the total completion time of all the jobs. From the latter point of view, it beats the FPTAS which can be obtained through the discussion given in Section 2.LetJj={J(k−j)m+1,J(k−j)m+2,…,J(k−j)m+m},j = 1, …, k. SPT assigns jobs ofJjto m different machines. However, the main flaw of SPT is that it always assigns the largest job ofJjto Mm. Thus the total completion time of Mmmay be very large. In our new algorithm, we still assign jobs ofJjto m different machines, which guarantees that it is still an optimal algorithm for Pm||∑Cj. To balance the total completion time per machine, it assigns jobs in non-increasing order of the sizes, and the current unassigned job with the largest size is assigned to the machine with the smallest current total completion time. Of course, jobs assigned to the same machine are re-sequenced in the order of non-decreasing sizes after all the jobs have been assigned.Algorithm. Reverse SPT (RSPT for short)1.Initialize TCi= 0,Ji=∅,i = 1, …, m. Let j = 1.Let π be a permutation of (1, 2, …, m) such that TCπ(1) ≥ ⋅⋅⋅ ≥ TCπ(m). LetJπ(i)=Jπ(i)∪{J(k−j)m+i}and TCπ(i) = TCπ(i) + jp(k − j)m + i, i = 1, …, m.If j < k, j = j + 1 and return Step 2. Otherwise, assign jobs ofJito Miin non-decreasing order of the sizes, i = 1, …, m.The worst-case ratio of RSPT for Pm||(∑Cj)maxis at most 2, the bound is asymptotically tight.Let the schedule produced by RSPT be σR. Denote by Ji, jthe job ofJjwhich is assigned to Miby RSPT and pi, jthe size of job Ji, j, i = 1, …, m, j = 1, …, k. By the definition ofJj,we have pi, k≤ pi, k − 1 ≤ ⋅⋅⋅ ≤ pi, 1, i = 1, … , m. Clearly,Ji=∪j=1kJi,jandTCiR=∑j=1kCi,jR=∑j=1kjpi,j,i = 1, … , m. As we stated before, though σRis not identical with σS, it remains an optimal schedule for Pm||∑Cj. More precisely, by (1),(15)∑j=1nCjR=∑i=1m∑j=1kCi,jR=∑i=1m∑j=1kjpi,j=∑j=1kj∑i=1mpi,j=∑j=1kj∑i=1mp(k−j)m+i=∑i=1m∑j=1kjp(k−j)m+i=∑i=1m∑j=1k∑l=1jp(l−1)m+i=∑j=1nCjS.Suppose thatTCR=TCuR=maxi=1,…,mTCiRandTCvR=mini=1,…,mTCiR. By (2) and (15),(16)TC*≥1m∑j=1nCjS=1m∑j=1nCjR=1m∑i=1mTCiR≥TCvR.LetTCi,j=∑l=1jlpi,l,i = 1, … , m, j = 1, … , k. Clearly,TCu,k=TCuR≥TCvR=TCv,k. By the definition of the algorithm, for any l, 1 ≤ l ≤ k − 1, pu, l + 1 ≤ pv, l + 1 if TCu, l≥ TCv, l.If TCu, l≥ TCv, lfor all l, 1 ≤ l ≤ k, then pu, l≤ pv, lfor any l, 2 ≤ l ≤ k. By (3) and (16),TCR=TCuR=pu,1+∑j=2kjpu,j≤2max{pu,1,TCvR}≤2TC*.Otherwise, let t be the largest integer such that TCu, t< TCv, t. Thus t < k and pu, l≤ pv, lfor any t + 2 ≤ l ≤ k. We first prove that(17)TC*≥(t+1)pu,t+1.The case of t = 1 can be proved by (4) and pu, 2 ≤ p(k − 1)m≤ p(k − 1)m + 1 for any u. For the case of t ≥ 2, we haveTC*≥TCv,k=∑j=1kjpv,j≥(t−1)pv,t−1+tpv,t≥(t+1)pu,t+1.By (15) and (17), we haveTCR=TCuR=∑j=1kjpu,j=TCu,t+(t+1)pu,t+1+∑j=t+2kjpu,j≤TCv,t+TC*+∑j=t+2kjpv,j≤TCvR+TC*≤2TC*.The following instance shows that the worst-case ratio of RSPT is at least2mm+1. There are m2 − 1 small jobs of size 1 and a large job of size(m+1)(m+2)2. In the optimal schedule, the large job is scheduled on a machine separately. The small jobs are scheduled on the remaining m − 1 machines evenly. The total completion time of each machine is(m+1)(m+2)2. In σR, there is a machine which processes the large job and m − 1 small jobs. Thus,TCR≥m·1+(m−1)·1+⋯+2·1+(m+1)(m+2)2=m2+2m.Hence,TCRTC*≥m2+2m(m+1)(m+2)2=2mm+1. The theorem is thus proved.□Note that for the above instance, the schedule produced by RSPT is the unique optimal schedule of Pm||∑Cj(except for renumbering of jobs). It implies that the maximum total completion time per machine of σ**, the best one among all optimal schedules of Pm||∑Cj, can be twice as large as that of σ*. Therefore, for the problem Pm||(∑Cj)max, the worst-case ratio of any algorithm which always find an optimal schedule of Pm||∑Cjcannot be smaller than 2. In other words, they cannot do better than RSPT in the worst-case point of view.

@&#CONCLUSIONS@&#
In this paper, we studied the problem of minimizing the maximum total completion time per machine on m parallel and identical machines. Unlike the problem with the objective to minimize the total completion time, the problem is strongly NP-hard when m is a part of the input and NP-hard in the ordinary sense when m is a given number. We improved the worst-case analysis results of the classical SPT. The worst-case ratio of SPT is at most 2.608 and at least 2.5366 when m is sufficiently large. Tight bound of53is obtained for m = 2 and the gap between the upper and lower bounds is less than 0.1068 for any m ≥ 3. We further designed another algorithm RSPT with a better worst-case ratio of 2, and the bound is asymptotically tight. Another feature of RSPT is that the schedule produced by RSPT is also the optimal schedule for the problem with the objective of minimizing the total completion time.There are many interesting problems which deserve further study. Firstly, from the results of this paper, no FPTAS exists for the problem when m is a part of the input. Does it admit a PTAS or is it APX-hard? Secondly, what is the exact worst-case ratio of SPT and how can we prove it? It seems that the tight bound might not be a simple function of m, and the question is far from trivial. Finally, for the problem Pm||Lex(∑Cj, (∑Cj)max), it is still unknown whether or not there exist algorithms better than RSPT or even approximation schemes.