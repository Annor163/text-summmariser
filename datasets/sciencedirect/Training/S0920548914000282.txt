@&#MAIN-TITLE@&#
Towards the integration of the agent-oriented modeling diversity with a powertype-based language

@&#HIGHLIGHTS@&#
A language for integrating the agent-oriented modeling languages (AOMLs) diversityMetamodel with concept subtypes that cover peculiarities of existing AOMLsTool support for editing models of this language, called Inter-methodology AOMLExisting AOSE tools can be adapted to export models in this language, as IDK tool.Comparison with common existing AOMLs in nine problem domains and mapping to FAML

@&#KEYPHRASES@&#
Agent-oriented software engineering,Agent-oriented modeling,Metamodel,Model-driven development,Multi-agent system,

@&#ABSTRACT@&#
Multi-agent Systems (MASs) are one of the main fields of distributed systems. MASs are based on autonomous entities that cooperate obtaining emergent behaviors, and can be useful for integrating open systems. However, the great diversity of agent-oriented modeling languages (AOMLs) hinders the understanding and interchange of MAS models. Most MAS concepts are shared among the AOMLs. However, these concepts have certain peculiarities in each AOML, such as the expected behavior and concrete syntax. This paper presents a metamodeling solution for the integration of the AOML diversity that uses the powertype pattern. In this pattern, the clabjects represent concept subtypes and are instantiated in models. MAS designers can change the clabject properties to indicate the peculiarities of each concept subtype, depending on the particular needs. Each designer can understand models of other experts by consulting the peculiarities of concepts in models. This solution is the Inter-methodology AOML, which is supported with a graphical modeling tool. This tool is created with a model-driven development approach. This work presents this AOML as a first step of a potential standardization process in the modeling of MASs. In addition, the Ingenias Development Kit tool, an existing agent-oriented software engineering tool, is adapted to export models to the presented AOML. The proposed Inter-methodology AOML is quantitatively compared with other AOMLs in nine different problem domains, and this comparison shows that the proposed Inter-methodology AOML can determine a higher proportion of concepts in these domains than other AOMLs. The presented AOML is also evaluated and validated with its mapping to FAML.

@&#INTRODUCTION@&#
Distributed systems are becoming widespread in open environments in the daily life of many citizens. MASs can implement these systems by means of autonomous entities. In fact, the Agent-oriented Software Engineering (AOSE) field provides techniques for developing MASs with the principles of software engineering. However, the large diversity of AOSE methodologies and AOMLs is one of the main obstacles for the integration of the MAS community. Bernon et al. [5] provide an overview of the existing AOSE methodologies. In addition, Henderson-Sellers and Giorgini [27] present a book in which each of the most relevant AOSE methodologies is introduced in a separate chapter. Then, this book includes a comparison of ten AOSE methodologies, and presents a comprehensive methodology that uses method engineering and the OPEN metamodel. In this line of research, Bergenti et al. [4] also present a book with some chapters describing some of the most relevant AOSE methodologies. This book also includes other chapters with other proposals on how to develop agents as software components following software engineering principles. Furthermore, there are several comparison and evaluation frameworks [49,52] to assist the MAS designers in selecting the appropriate AOSE methodology. However, this great diversity makes the comprehension and interchange of the MAS models difficult. Each AOSE methodology can use one of several Modeling Languages (MLs), which can be either AOMLs or general-purpose MLs. Each AOSE methodology proposes a way of constructing MASs, while each AOML is only a language for expressing mainly models of the MAS specifications or the structural and behavioral designs of MASs. The AOMLs that are used by different AOSE methodologies usually have similarities but are not the same. The goal of the Agent Unified Modeling Language (AUML) [2] was to provide an AOML that was based solidly on the Unified Modeling Language (UML). In addition, UML 2.0 [3], the Systems Modeling Language (SysML) [16] and the UML Profile and Metamodel for Services (UPMS) [23] are general-purpose languages that can represent MASs. Moreover, the Foundation for Intelligent Physical Agents (FIPA) Modeling Technical Committee has proposed several ways of unifying AOMLs, such as a metamodel for agents, roles and groups [39]. However, most of the MAS experts still use one specific AOML because each AOML has some peculiarities, which are useful for the corresponding AOSE methodology. Furthermore, most of the support tools for AOSE methodologies just save the model designs for one of several AOMLs. Thus, the model interchange among MAS experts of different AOMLs is a challenging issue.The goal of the present work is to provide a first step towards a standardization process in AOSE. In particular, this work is aimed at facilitating the comprehension and interchange of MAS model designs among the MAS experts of different AOMLs. This paper presents a metamodel that defines a generic AOML that includes the existing AOMLs. This generic language is based on the following facts: firstly, most of the concepts are shared among AOMLs, but the same concept may have different peculiarities in each AOML; secondly, the generic language allows users to define subtypes of the concepts. In this manner, users can define appropriate subtypes depending on the AOML each user is used to. In this paper, the presented generic language is denoted as Inter-methodology AOML and it is defined with the metamodel called Inter-methodology MAS metamodel. The definition of the presented metamodel uses the powertype pattern[22]. The goal of this AOMLis to express models for most AOSE methodologies.Coupled with the Inter-methodology AOML, this work recommends AOSE tools to be adapted to export the MAS specifications expressed with the mentioned AOML. In this line of research, the Ingenias Development Kit (IDK) [21] has been adapted to the current approach in a new version. IDK is the tool support for the Ingenias AOML and it is one of the most popular tools in the MAS community. In addition, a graphical editor is presented for the mentioned Inter-methodology AOML. The presented editor is created with a Model-driven Development (MDD) [45] approach, by means of the Graphical Modeling Framework (GMF) [46]. In this approach, the editor is automatically generated from the Inter-methodology MAS metamodel and other configuration models.Furthermore, the presented Inter-methodology AOML is evaluated and compared with the common AOMLs in nine problem domains, and this comparison quantitatively shows that the proposed Inter-methodology AOML covers a higher proportion of concepts than other common AOMLs in these domains. In addition, the Inter-methodology AOML is mapped to FAML [6] for being further evaluated and validated.The bases of this work were previously introduced in [18]. However, the current work now determines the concepts and relationships of the Inter-methodology AOML and its metamodel, including its types and subtypes. In addition, the current work now provides tool support for using this AOML and editing its models. Moreover, the proposed Inter-methodology AOML is now quantitatively compared showing its improvement over the existing alternatives, and is now also mapped against FAML. Furthermore, the discussions about related works are extended to better show the differences with other similar approaches.The remainder of the paper is organized as follows. The next section describes the great diversity of AOSE methodologies and AOMLs. Then, Section 3 describes a metamodeling solution for the integration of the mentioned diversity. This solution is based on the Inter-methodology AOML, determined with a powertype-based metamodel. Section 4 presents the Inter-methodology AOML, with its corresponding ontology and tool support. Section 5 includes certain comparisons and a mapping for evaluating this work, and Section 6 discusses the related work. Finally, Section 7 mentions the conclusions and future work.There is a great diversity of AOSE methodologies and AOMLs. Two review-style papers of Henderson-Sellers [25,26] present this diversity of AOMLs, specifically focusing on the different diagram types and recommending a suite of diagram types for developing MASs. Some of the AOSE methodologies are Australian Artificial Intelligence Institute Belief Desire Intention (AAII/BDI), Tropos, Vowels, MAS-CommonKADS, Ingenias, Massive, Gaia, Multi-agent Systems Engineering (MaSE), Aalaadin, Adelfe, Agile Passi and Passi.Each of these methodologies uses one of several AOMLs. In addition, AUML and the MAS Modeling Language (MAS-ML) are AOMLs. Furthermore, the Taming Agents and Objects (TAO) [47] framework provides an AOML that also fits in the object-oriented paradigm, providing a common basis for developing agent-oriented and object-oriented applications.Most of the concepts are shared among the AOMLs. Some examples of shared concepts are agents, roles, goals and interactions. Thus, the abstract syntax is not the same but quite similar among these languages. However, the concrete syntax is quite different in each AOML. For example, Fig. 1shows different notations for the agent concept for several AOMLs.The diversity does not only imply the concrete syntax differences but also some differences about the peculiarities of concepts. For instance, the Goal concept is commonly shared among AOMLs. The Goals are pursued by the agents. However, there are several kinds of Goals in the AOMLs. For instance, a Service Goal is never destroyed. Other kinds of Goals are destroyed when they are satisfied. Each AOML uses a different Goal kind. Therefore, for understanding the design model, a MAS expert must know, firstly, which AOML was used to define the model design and, secondly, which kind of Goal is used by that particular AOML. For other MAS concepts, there are similar differences about their peculiarities.The aforementioned diversity is a problem as one can observe in the following reasoning. MAS designers usually choose an AOML for designing each MAS, and consequently its model design is usually defined with only one AOML. Sometimes, MAS experts cannot understand the design models just because they do not know a particular AOML. A possible solution could be to force the MAS designers to express the design models with several AOMLs. However, the cost of this solution would be high because the MAS Computer-aided Software Engineering (CASE) tools are as varied as the AOMLs. The model interchange among these tools is not supported. Thus, the designer should manually define the same design model with different AOMLs and tools.For the integration of AOMLs, this paper proposes the Inter-methodology MAS metamodel. In this line of research, the FAML metamodel also follows the same purpose and was previously presented in [6]. The goal of the current metamodel is that its instances can represent MAS specifications for all AOMLs. In this sense, the current proposal can be considered a supermetamodel [54], as supermetamodels are aimed at representing a common language between different variations of a language. The supermetamodels have been previously used for the integration of several languages, as for example for several variations of i* [8].The presented solution has several steps. Firstly, a metamodel is defined with all the common MAS concepts. Then, all these concepts are partitioned with the powertype pattern. It is worth mentioning that Henderson-Sellers et al. [28] previously proposed that the powertype pattern can be useful for defining a unified AOML, using the agent definition as an example, and they mentioned this as a future work. Secondly, the Inter-methodology MAS metamodel is integrated with the existing MAS CASE tools. Currently, only the integration with the IDK tool is performed. Finally, a graphical editor tool is created based on the Inter-methodology MAS metamodel.This section is structured as follows. Firstly, Section 3.1 briefly introduces the powertype pattern. Then, Section 3.2 presents the solution, which is a powertype-based metamodel for the integration of AOMLs. Section 3.3 mentions the advantages of the presented solution. Finally, Section 3.4 indicates how the mentioned metamodel can be integrated with the existing MAS CASE tools.The powertype pattern [22] is a metamodeling structure for defining types and subtypes in a coherent way according to the different modeling layers. It includes the two following metamodeling elements:•A meta-element that describes the class facet and is denoted as the partitioned type.A meta-element that describes its object facet and is denoted as the powertype. It represents a subtype (a.k.a. kind) of a partitioned type. The recommended notation indicates that the name must have a meaningful suffix, such as “kind”.The instances of the powertype represent concept kinds. Each concept kind is simultaneously an instance of the powertype and a subtype of the partitioned type. These concept kinds are also usually called clabjects, and these were firstly used by Atkinson [1]. These clabjects can have instances for representing systems, reaching the real world modeling layer, also called M0 or enactment layer.The advantage of using powertype pattern over metamodel extensions is that a unique metamodel can be used for all AOMLs, and the peculiarities of concepts of each AOML can be indicated at the modeling level if necessary, without interfering with the metamodel.This paper proposes to define a metamodel that provides a mechanism to define several kinds of the shared concepts. In this manner, the MAS designer can establish the peculiarities of a used concept to let the other MAS designers know these peculiarities. With the presented solution, the understandability of concepts among different AOMLs improves. In order to define these kinds of shared concepts, the powertype pattern is used. Since the concrete syntax is different among the AOMLs, this paper proposes to also include the concrete syntax (visual notation) as attribute of the concept kinds.For example, Fig. 2shows the presented solution for the Goal concept. In this case, the Goal concept is partitioned because there are several kinds of goals in AOSE methodologies. For instance, the Service Goal is a kind of goal that is never destroyed or satisfied. This kind of goal is used by the Ingenias methodology, but there are other kinds of goals in other AOSE methodologies. In particular, Henderson-Sellers et al. [29] perform an analysis of the different uses of the goal concept in different AOSE methodologies from an etymological and metamodeling perspective. In addition, Khallouf and Winikoff [34] refine the use of goals and their relations with other concepts in the Prometheus methodology, pursuing a more effective goal-oriented design.MAS designers are recommended to indicate the Goal Kind when defining a goal. In this case, Goal is the partitioned type and Goal Kind is the powertype. The Service Goal is a clabject. The Service Goal is simultaneously instance of Goal Kind and subtype of Goal. In this example, the EvaluateDoc entity is a service goal. This goal pursues to evaluate the relevance of a document. This goal is taken from the Delphi MAS presented in [19]. In this MAS, several expert agents evaluate a document through answering rounds of questionnaires. These questionnaires usually include information of the feedback of the previous round. These agents usually reach a consensus determining whether a document is relevant in a specific domain. The EvaluateDoc goal is an instance of the Service Goal clabject, and pursues the evaluation of the relevance of documents in a certain domain.Several peculiarities of the MAS concept kinds can be defined with attributes of the powertype. Examples of these peculiarities are the behavior peculiarities and the concrete syntax. The concept kinds also include a description attribute, for describing peculiarities that need a further description than the one established with other attributes.Some behavior peculiarities can be determined with the powertype. For instance, Luck and d'Inverno [36] present the self-generation of goals based on some assessment conditions within the agents. In fact, they propose a kind of goals that can be either generated or removed by agents according to certain assessment conditions. This kind of goals is defined as LuckDInvernoAssessGoal within the proposed approach. This goal kind contains an attribute called conditionOfSatisfaction, whose value is “on SatisfyDestroy condition”. This value means that an agent destroys one of its goals when its corresponding SatisfyDestroy condition occurs. On the contrary, the conditionOfSatisfaction attribute of the Service Goal kind has the “Never” value in order to clearly distinguish the two kinds of goals. In addition, the agent mental states contain several facts. These facts are created and removed in several manners depending on the AOSE methodologies. All the peculiarities of creation and deletion of these facts are specified with several MentalStateFact kinds.The concrete syntax of the powertypes can be defined with the notationPath attribute. This attribute indicates the path of an image file with the visual notation of each concept kind, which can reinforce the label that indicates its type, for designers that are used to a particular notation. For example, Ingenias uses a circle to denote the agent goals, while other AOMLs use other visual notations for goals. The advantage is that other MAS designers can understand the model design even if they do not know the concrete syntax of the corresponding AOML. The other designers just have to look the powertype definitions to understand the design model.The first advantage of the current approach is that MAS designers that use different AOMLs can interchange their models and understand these only by applying and knowing the presented metamodel, without having to learn all the diversity of existing AOMLs.Moreover, MAS designers do not have the obligation of using only concept kinds of one existing AOML. The MAS designers can use the most appropriate concept kinds from several AOMLs for a particular MAS model. In this case, although all the elements of the model may not be modeled by only a tool for a specific AOML, the model can be more detailed and appropriate for a specific problem domain.With the presented solution, each MAS expert can continue designing the MAS models with the preferred notation. No MAS expert is forced to use a particular notation. Even, new notations can be created. For example, a MAS expert may need a new kind of an existing MAS concept. To denote this new kind, the expert can assign a new notation to it.In the current approach, MAS designers do not need to learn all the AOMLs. Instead, they only need to know the proposed Inter-methodology AOML, including the meaning of the attributes for indicating the peculiarities. In this manner, a designer can understand MAS models that are expressed with the Inter-methodology AOML, regardless of its origin (i.e. AOML).The presented solution covers the integration of the Inter-methodology MAS metamodel with MAS CASE tools. This paper proposes the integration with existing CASE tools, and the creation of a new generic CASE tool for the presented Inter-methodology MAS metamodel.The existing MAS tools are proposed to be adapted to export MAS specifications for the Inter-methodology AOML. In this manner, the existing CASE tools can export MAS specifications understandable for all MAS designers even if the designers do not know the particular AOML. The adapted CASE tools should export all the used concept kinds in the MAS specification models. This set of concept kinds remains constant for a particular AOML and does not need to be defined by users, saving their valuable time and effort. On the other hand, with the adaptation of the existing CASE tools, the user can only use concept kinds of one AOML for a MAS.Moreover, a generic CASE tool (described in Section 1) has been created for defining MAS specifications with the presented Inter-methodology MAS metamodel. This generic MAS CASE tool provides a mechanism to benefit from the most appropriate concept kinds of different AOMLs for a particular MAS.The ECore metamodeling language is used to define the presented Inter-methodology MAS metamodel (see Section 1) for the following technical reasons. The ECore language is supported by the Eclipse Modeling Framework (EMF) [7]. In addition, GMF can generate automatically a graphical editor from an ECore metamodel. Moreover, EMF includes some Java libraries for saving models from programming code. Thus, the adaptation of the existing MAS CASE tools can be facilitated. For instance, the adaptation of IDK is achieved by means of the presented metamodel defined with ECore. In summary, the ECore language is used to define the presented Inter-methodology MAS metamodel in order to facilitate the integration of the metamodel with MAS CASE tools.This section presents the Inter-methodology AOML, defined with the Inter-methodology MAS metamodel, and its tool support. Within this section, Subsection 1 determines the structure and the basis of the representation of the Inter-methodology MAS metamodel with the ECore language, and describes the generated editor tool for the Inter-methodology AOML. Then, Subsection 2 presents the underlining ontology of types and subtypes of both concepts and relationships.The Inter-methodology MAS metamodel (see Fig. 3(a)) contains, among others, the Root, the Powertypes and the PartitionedTypes packages. The PartitionedTypes package contains all the MAS concepts. All these concepts extend the PartitionedType class. The PowerTypes package contains all the powertypes for the MAS concepts. Each partitioned type is connected with the corresponding powertype by means of meta-references called Partition. For instance, the Goal class (see Fig. 3(a)) has a meta-reference pointing to the GoalKind powertype. The “Kind” suffix is used to denote the powertypes, according to the recommendations of the powertype literature. Finally, the Root class is the container of the clabjects (subtypes of the partitioned types and instances of powertypes) and the objects for a particular MAS specification.MAS designers are allowed to define both the concept kinds (also called clabjects) and the concept instances. In the case of an adapted CASE tool, the clabjects, such as Service Goal kind, are created by default by the CASE tool itself. Otherwise, MAS designers should define the convenient concept kinds.An example of an instance model is presented in Fig. 3(b). In this example, some of the defined concept kinds are FrameFact, ServiceGoal and TaskAssociatedToAnInteraction, which are respectively a Mental State Fact kind, a Goal kind and a Task kind. The mental state fact (i.e. belief), the goal, and the task are some of the common concepts in AOSE methodologies [31]. Some of the properties of the ServiceGoal are shown at the first Properties tab of Fig. 3(b). Its description is “Never Satisfied or Destroyed”. The model design contains the necessary elements for the particular MAS. Specifically, the MAS example is the Delphi MAS and is taken from the document relevance domain. For example, a goal called EvaluateDoc is used. Its properties are indicated at the bottom Properties tab of Fig. 3(b). The EvaluateDoc goal is an instance of the ServiceGoal clabject. However, some adaptation is necessary for using the EMF layers. EMF only supports the metamodel and model layers. Thus, both the instances and the clabjects are included in the model layer, although they are conceptually in different meta-data layers. In this adaptation, the instanceOf relationship between clabjects and instances is represented with a reference, called Partition. This reference has the same name as the meta-reference between the powertype and the partitioned type because the Partition reference is an instance of the Partition meta-reference. The powertype pattern is not changed conceptually, but it is represented in a different manner to make it possible to use some frameworks such as EMF and GMF.An excerpt of the presented metamodel is also shown with UML notation in Fig. 4in a similar way than the definition of the Meta-object Facility (MOF) model, so that more designers can understand the presented approach. In this figure, one can observe three powertype patterns respectively for the Task, MentalStateFact and Goal concepts. Each of these patterns is composed with a partitioned type (e.g. Goal) and its powertype (e.g. Goal Kind). In addition, an example of instantiation is also presented for the Goal powertype pattern, including a subtype of goal (i.e. ServiceGoal) and a specific goal (i.e. EvaluateDoc) of a MAS.This work includes a generic graphical editor tool for the creation and edition of the models expressed with the mentioned Inter-methodology AOML. The tool is created with a MDD approach, from the aforementioned metamodel with the ECore language. Certain additional models were defined for indicating details of the tool specification, and a graphical editor tool was automatically generated by means of GMF.Fig. 5shows this editor tool for the Inter-methodology AOML, in which the objects and the clabjects are created graphically, as one can observe in its top area. The properties of the elements can be viewed or modified in the properties tab, in its bottom area.The concrete syntax, defined in the clabjects, can be copied in a certain GMF model. In this manner, the tool can be generated again to incorporate the mentioned concrete syntax. In the future, this mechanism can be computerized. In this way, users can simultaneously define both the MAS specification models and the desired concrete syntax for editing these models.The mechanism for obtaining the ontology was composed of several steps. Firstly, the concepts and relationships were extracted from twelve common AOMLs: AAII/BDI, Tropos, Vowels, MAS-CommonKADS, Ingenias, Massive, Gaia, MaSE, Aalaadin, Adelfe, Agile Passi and Passi. Each concept and each relationship were extracted preserving their semantic by means of their definitions. Then, the most similar concepts were gathered in groups, as well as the most similar relationships were gathered in groups. For each group of very similar concepts, a concept (type) was included in the presented metamodel, with a semantic definition that was common to all the concepts of the group. Then, for each original concept of the group, a subtype concept was created with the same semantic definition that was extracted from the original AOML. This semantic was also expressed with some attributes that distinguish certain aspects of each subtype for a given type. The same process was followed for obtaining the types and subtypes of relationships of the presented metamodel. Finally, the metamodel was refined and evaluated, by comparing this metamodel with six agent-oriented metamodels in nine problem domains, and by performing a mapping of concepts against FAML, as the latter described in Section 5.According to the powertype-based solution, the Inter-methodology MAS metamodel contains types (represented with partitioned types) and subtypes (represented with clabjects). Table 1presents the ontology of types and subtypes of MAS concepts. This table indicates the types of MAS concepts, and classifies existing MAS modeling concepts as subtypes of these types. This table also mentions the meaning of each concept with a brief definition.In addition, Table 2presents the relationships between MAS concepts in the presented metamodel. For each relationship, the table indicates its source and target concepts, a brief definition, and its relationship subtypes.The peculiarities of each subtype are omitted for the sake of brevity. However, these peculiarities of each MAS concept within the context of each particular AOML are indicated in the works that are previously cited for introducing the existing AOMLs.The presented ontology of MAS concepts is inspired by the work of Beydoun et al. [6], which analyzes different AOSE metamodels, and proposes the FAML metamodel as a first step for standardization in agent-oriented modeling. Our approach proposes that the similar concepts are instances of the same powertype pattern; but, at the same time, each concept conserves its peculiarities.

@&#CONCLUSIONS@&#
In summary, this paper presents a powertype-based metamodeling solution to overcome the AOML diversity problem. This solution defines the concepts shared among the existing AOMLs but, at the same time, it includes the semantic peculiarities for each existing AOML. This work provides the Inter-methodology MAS metamodel, which can be particularized for each AOML. The proposed Inter-methodology AOML is quantitatively compared with the common AOMLs in nine problem domains, and the results advocate that the proposal of this work improves the existing AOMLs. This work also provides a mapping from the Inter-methodology AOML to FAML as a validation step. A graphical modeling tool is created for the presented AOML with a MDD approach. Furthermore, the presented representation of the powertype pattern with EMF can be used by other metamodeling practitioners.For future work, the Inter-methodology AOML is planned to be promoted in the MAS community, so it can become an emerging standard for interchanging MAS models. For this purpose, the existing AOSE tools are planned to be adapted to export models expressed with the Inter-methodology AOML. As an initial step, the IDK tool is already adapted. In addition, the underlying ontology of the Inter-methodology MAS metamodel can be enhanced including more types and subtypes, for allowing designers to define MASs in more problem domains without missing concepts. Moreover, the presented editor tool for the Inter-methodology AOML can be improved by incorporating the possibility of automatically modifying visual appearance of concepts according to the concrete syntax defined by users. The editor tool can also include several templates for changing the visual appearance of concepts according to the user preferences. Furthermore, a framework is planned to be implemented for generating executable MASs from Inter-methodology AOML models with a MDD approach. In this way, this framework and the presented editor tool can be assembled to provide a development kit for modeling and constructing MASs with the Inter-methodology AOML. In addition, although the presented Inter-methodology MAS metamodel can be considered a supermetamodel for its integration purpose, the current approach still lacks of the common formalism of the supermetamodel works. The current approach will include this formalism in order to guarantee and show that it fits in the theoretical background of supermetamodels.Moreover, the Inter-methodology AOML is planned to be presented to the students of the Advanced Distributed Systems subject of the Software Architecture master's degree in the Madrid Open University. These students will learn this language and design MAS models for problems such as the ones presented in Section 2. The students will also learn other common AOMLs and use these for modeling the same MASs. Then, the students will be surveyed to determine whether they have learned and mastered the presented Inter-methodology AOML with a reasonable effort, and whether they find it effective and suitable for working on problems. They will also be surveyed with the same questions about other common AOMLs. The learning and modeling times will be measured for each student and each AOML with all the MAS models. All the results will be analyzed and compared to assess the presented approach.