@&#MAIN-TITLE@&#
Application-Specific Modified Particle Swarm Optimization for energy resource scheduling considering vehicle-to-grid

@&#HIGHLIGHTS@&#
Vehicle-to-grid integration in a distribution network.Energy resources scheduling considering vehicle-to-grid.Day-ahead resources scheduling by a virtual power player.Distributed energy resources in a smart grid environment including V2G.Specific Particle Swarm Optimization for the envisaged V2G scheduling problem.

@&#KEYPHRASES@&#
Application specific algorithm,Hard combinatorial scheduling,Particle Swarm Optimization,Vehicle-to-grid scheduling,

@&#ABSTRACT@&#
This paper presents a modified Particle Swarm Optimization (PSO) methodology to solve the problem of energy resources management with high penetration of distributed generation and Electric Vehicles (EVs) with gridable capability (V2G). The objective of the day-ahead scheduling problem in this work is to minimize operation costs, namely energy costs, regarding the management of these resources in the smart grid context. The modifications applied to the PSO aimed to improve its adequacy to solve the mentioned problem.The proposed Application Specific Modified Particle Swarm Optimization (ASMPSO) includes an intelligent mechanism to adjust velocity limits during the search process, as well as self-parameterization of PSO parameters making it more user-independent. It presents better robustness and convergence characteristics compared with the tested PSO variants as well as better constraint handling. This enables its use for addressing real world large-scale problems in much shorter times than the deterministic methods, providing system operators with adequate decision support and achieving efficient resource scheduling, even when a significant number of alternative scenarios should be considered.The paper includes two realistic case studies with different penetration of gridable vehicles (1000 and 2000). The proposed methodology is about 2600 times faster than Mixed-Integer Non-Linear Programming (MINLP) reference technique, reducing the time required from 25h to 36s for the scenario with 2000 vehicles, with about one percent of difference in the objective function cost value.

@&#INTRODUCTION@&#
Power systems are one of the most complex systems built by man. It is a field in which several optimization goals must be pursued but it is plagued with pervasive nonlinearities and uncertainties, and that it is also limited by various operational constraints. Therefore, these optimization problems are far from trivial and include optimal power flow, voltage and frequency control and power generator scheduling, among others.The optimization problems, in which both the objective functions and the constraints often contain nonlinearities and binary variables, have conventionally been addressed by various techniques which include Non-Linear Programming (NLP) and Mixed-Integer Non-Linear Programming (MINLP) [1]. This and other deterministic optimization techniques have difficulties in dealing with uncertain variables and they require increasing computational resources to deal with real-world problems [2,3].In future scenarios of intensive EVs penetration, the typical electric load diagram can be significantly changed. On the other hand, power systems can use Electric Vehicles (EVs) to discharge to the grid when the vehicles are parked. This adds further complexity to the planning and operation of power systems. The energy resource scheduling problem is a MINLP problem when including binary variables and network constraints. If the problem does not consider network constraints it can be addressed by a quadratic or a linear programming model. However, to have a suitable solution in a real-world application, the network constraints must be considered. Therefore, new scheduling methods are required to ensure low operation costs while guaranteeing the supply of load demand.The objective of the day-ahead scheduling problem in this work is to minimize operation costs, namely energy costs, regarding the management of these resources in the smart grid context including EVs. The basic idea of the problem is to schedule the energy generation considering all the available resources, such as Distributed Generation (DG) (photovoltaic panels, wind turbines, EVs) to match load demand in each hour for the successive day in future electricity grids, also known as smart grid.In fact, large complex problems such as the ones in future power systems, characterized by an intensive use of Distributed Energy Resources (DER), are hard to be addressed with deterministic approaches due to the time constraints related with operation tasks.Therefore, some alternative techniques, coming from Artificial Intelligence (AI) quarters, like Genetic Algorithms (GA) and Particle Swarm Optimization (PSO) have been used to address this purpose. GA techniques are based on an algorithm that draws inspiration from the field of evolutionary biology, offering operators for crossover, mutation and selection of the best solutions. For certain optimization problems though, the overhead resulting from the application of these operators make this technique less efficient than other simpler algorithms, like PSO [4,5].The main advantage of PSO is its simplicity, while being capable of delivering accurate results in a consistent manner. It is fast and also very flexible, being applicable to a wide range of problems, with limited computational requirements. The PSO concept began as a simulation of simple social systems like flocks of birds or schools of fish [6,7]. A PSO system starts with an initial population of random individuals, representing solutions to a problem, to which are assigned random velocities. These entities, called particles, evolve throughout the problem space, searching for the optimal solution for the specific problem. At each step of this iterative process, every particle is evaluated against a fitness function to determine the one that offers the best solution so far. Each particle keeps also keeps track of its own best. Therefore, every particle flies through the problem space chasing two beacons: the global best and its own best. Usually its velocity is clamped to avoid overshooting. The modifications undertaken to the PSO aimed to improve its adequacy to solve the mentioned problem and are discussed later on.In this paper, the applicability of the modified PSO to a large-scale non-linear combinatorial Distributed Energy Resources (DER) scheduling problem including Vehicle-to-Grid (V2G) resources is described. A specific design has resulted in a modified PSO version to solve the envisaged problem. The proposed method is named as Application Specific Modified Particle Swarm Optimization (ASMPSO) which is also a contribution of the work.The paper includes a case study concerning a 33-bus distribution network with 66 DG plants and 218 consumers. Scenarios up to 2000 V2G are simulated and the performance of the proposed approach is analyzed, compared and discussed. To test the effectiveness of the proposed ASMPSO, it is compared with MINLP, PSO [8], New Particle Swarm Optimization (NPSO) [9] and Evolutionary Particle Swarm Optimization [10].The paper is organized as follows: Section 2 describes the problem presented and the mathematical formulation model. Section 3 presents the ASMPSO approach and implementation to the given problem. A case study is presented in Section 4 and conclusions are provided in Section 5.The energy resources management [11,12] methodology is described in this section, in terms of problem description including the state of the art and mathematical formulation. This methodology is used to support Virtual Power Players (VPP) to obtain an adequate management [13] of the available resources, including V2G in the smart grid context [14].The energy resource scheduling problem is getting more attention, as the use of DER is intensified and massive V2G use is envisaged [15–18]. Previous works were developed by the authors regarding scheduling considering V2G [2,3,17–19]. In [3] a PSO approach is presented for the DER scheduling problem using V2G resources. A case study using 500 vehicles is addressed. The results of the case study show that PSO is about 148 times faster than MINLP. Authors in [2] propose a SA approach to solve the DER scheduling problem with V2G resources using a single objective function (generation costs). The methodology is compared with the MINLP. The case study results show a difference of 3% in the objective function with 1000 V2G when compared to MINLP. Both works from [2,3] lack the inclusion of a power flow model in the metaheuristics methodology approach. Instead, a validation of the solution after optimization is made. A hybrid approach using power flow could result in better solution quality and avoid network solution validation after optimization. Besides that, the vehicles are aggregated in groups of 10 to reduce variables quantity, whereas in [17] the cars are divided into groups of 100, reducing even more the variables quantity but not producing individual solutions for each EV and using only a deterministic approach. An improved model using individual V2G contracts should be further investigated in a real-world like scenario. In [18,19], the authors present a unit commitment model including V2G and using PSO to reduce energy costs and CO2 emissions in smart grids. In these works no comparisons are made with other methodologies, namely mathematical models for solution quality reference.Apart from EVs, power systems will have to deal with other types of DERs at the distribution network level, such as Distributed Generation (DG), storage systems, and demand response. DER management can be executed by Virtual Power Player (VPPs) or by distribution network operators [11,20]. All the mentioned resources have to be considered in the energy scheduling problem, consequently considering their characteristics and requirements [21].When including V2G resources in the optimization scheduling it is necessary to take into account the available resource information, namely accurate information of EVs. This information must be detailed including the geographical area where vehicles are parked during each considered period, as well as the minimum battery energy requirement defined by the users to allow their daily trips. This information enables to determine EVs minimum battery charge required for each period in order to guarantee the aimed range [22]. Depending on the network size, the optimization can turn naturally into a large combinatorial problem due to the huge number of network elements and to the diversity of energy resources with different specifications and requirements. This fact makes this optimization problem suitable for the use of Artificial Intelligence (AI) based techniques, namely metaheuristics such as PSO.In terms of problem description, the VPP has contracts for managing the resources installed in the grid, including load demand. The load demand can be satisfied by the distributed generation resource, by the discharge of Electric Vehicles, and by external suppliers (namely retailers, the electricity pool, and other VPPs). The use of V2G discharge, and the respective charge, considers V2G users’ profiles and requirements. The network influence is included in this methodology, through AC power flow calculation, voltage limits and line thermal limits.The energy resource scheduling problem is a Mixed-Integer Non-Linear Programming (MINLP) problem. The objective function aggregates all the involved costs with the energy resources. The VPP goal is to minimize the objective function value or, in other words, the total cost. The authors considered an energy resource model with: distributed generation, energy acquisition to external suppliers, the V2G to discharge or charge, the non-supplied energy, excess generated energy [3]. All the involved resources have linear cost functions.In order to achieve a good scheduling of the available energy resources, it is necessary to consider a multi-period optimization; the presented formulation is generic for a specified time period (from period t=1 to t=T) [2,11]. This mathematical formulation has been implemented in General Algebraic Modeling System (GAMS) [23], which is a high-level modeling system for mathematical programming and optimization, in order to be compared with the proposed Application Specific Modified Particle Swarm Optimization (ASMPSO). The model includes an AC power flow algorithm that allows network constraints to be considered, leading to a Mixed-Integer Non-Linear Programming (MINLP) problem. GAMS DIscrete and Continuous OPtimizer (DICOPT) has been used to solve the envisaged MINLP problem. DICOPT allows obtaining the solution for the Non-Linear Programming (NLP) problems and the Mixed-Integer Programming (MIP) problems using the adequate solvers existing inside GAMS. Typically, the NLP problem is solved using the CONtinuous global OPTimizer (CONOPT) solver and the MIP problem is solved using the simplex algorithm and IBM ILOG CPLEX Optimizer solver.(1)minf=∑t=1T∑DG=1NDGPDG(DG,t)×cDG(DG,t)+∑S=1NSPSupplier(S,t)×cSupplier(S,t)+∑V=1NVPDisharge(V,t)×cDisharge(V,t)−∑V=1NVPCharge(V,t)×cCharge(V,t)+∑L=1NLPNSD(L,t)×cNSD(L,t)+∑DG=1NDGPEAP(DG,t)×cEAP(DG,t)×Δtwhere Δt, period t duration (e.g. 15min (0.25), 30min (0.50), 1h (1), etc.); cCharge(V,t), charge price of vehicle V in period t (m.u.); cDG(DG,t), generation price of DG unit in period t (m.u.); cEAP(DG,t), excess available power price of DG unit in period t (m.u.); cNSD(L,t), non-supplied demand price of load L in period t (m.u.); cSupplier(S,t), energy price of external supplier S in period t (m.u.); cDischarge(V,t), discharge price of vehicle V in period t (m.u.); cTripRed(V,t), trip reduce contracted price with vehicle V in period t (m.u.); ETripRed(V,t), demand response energy reduce of vehicle trip V in period t (Wh); NDG, total number of distributed generators; NL, total number of loads; NS, total number of external suppliers; NV, total number of vehicles V; PCharge(V,t), power charge of vehicle V in period t (W); PDG(DG,t), active power generation of distributed generation unit DG in period t (W); PDischarge(V,t), power discharge of vehicle V in period t (W); PEAP(DG,t), excess available power by DG unit in period t (W); PNSD(L,t), non-supplied demand for load L in period t (W); PSupplier(S,t), active power flow in the branch connecting to external supplier S in period t (W); T, total number of periods.The objective function considers Δt to allow different period t duration. For instance, for a 30min period t duration, the value of Δt should be 0.5 if the costs function are specified in an hour basis.To improve the solution feasibility the mathematical model includes variables concerning the excess available power PEAP(DG,t) and non-supplied demand PNSD(L,t). PEAP(DG,t) is important because the network operator can establish contracts with uninterruptible generation, for instance, with producers based on renewable energy. In extreme cases, when the load is lower than the uninterruptible generation, the value of PEAP(DG,t) is different from zero. PNSD(L,t) is positive when the generation is not enough to satisfy load demand even using demand response.The minimization of this objective function is subject to the following constraints:•The network active (3) and reactive (4) power balance with power loss in each period t;Bus voltage magnitude and angle limits. Each network bus has voltage limits that have to be maintained;Line thermal limits. Each network line has a maximum admissible power flow;Maximum DG limit in each period t. Each DG unit has power generation limits. A binary variable is necessary to schedule the DG units. A value of 1 means that the DG unit is connected.Upstream supplier maximum limit in each period t;Vehicle technical limits in each period t;Vehicle charge and discharge are not simultaneous. Two binary variables are needed for each vehicle;Battery balance for each vehicle. The energy consumption for period t travel has to be considered jointly with the energy remaining from the previous period and the charge/discharge in the period;Discharge limit for each vehicle considering the battery discharge rate. When connected to the grid the vehicle cannot discharge to the grid more than the admissible rate;Charge limit for each vehicle considering the battery charge rate. When connected to the grid the vehicle cannot charge the battery more than the admissible safety rate;Vehicle battery discharge limit considering the battery balance. The vehicle cannot discharge more than the available energy in the battery;Vehicle battery charge limit considering the battery capacity and previous charge status. The vehicle cannot charge more than the battery limit capacity;Each vehicle has a battery capacity limit;Minimum stored energy to be guaranteed at the end of period t. This can be seen as a reserve energy (fixed by the EVs users) that can be used for an unexpected travel in each period;The above formulation has been implemented in GAMS in order to be compared with the proposed Application Specific Modified Particle Swarm Optimization (ASMPSO).In this section the modifications introduced to the early versions of Particle Swarm Optimization (PSO) [7,24] are presented, detailed and discussed. A robust power flow model from [25,26] is included in the metaheuristics to check the feasibility of the solutions during swarm search process. Authors’ modifications to PSO have the goal of improving robustness, convergence time and solution quality and, at the same time, requiring less tinkering of parameters by the user.The PSO concept began as a simulation of simple social systems like flocks of birds or schools of fish [6]. A PSO system starts with an initial population of random individuals, representing solutions of a problem, to which are assigned random velocities. Nevertheless, the traditional PSO algorithm is not immune to limitations that stem mainly from the fact that it depends on several user-defined and problem-dependent parameters [10,27]. In fact, the weights of the movement equation are tuned by the system implementer to fit into the specific problem. For instance, the inertia weight value carries a strong influence on the evolution of the particle, determining to a certain point whether it will fall into a local optimum, converge to a global maximum or simply overshoot. It is therefore common to apply to this component a function that decreases as it converges to the global solution, but even the decreasing rate of this function must be carefully defined. This method is [10] also complemented with the clamping of the particle's velocity to maximum and minimum allowed values [28]. The setting of these values is another externally defined operation, which is critical to obtain accurate results: if the velocity is too high the particle risks passing beyond a good solution, but if it is too low it is probable that it will get stuck into a local optimum.The acknowledgment of this and other limitations led to the proposal of variants to the traditional PSO algorithm. One possible path to the improvement has been the hybridization of PSO with evolutionary algorithms [8,29,30]. A good example of this the technique is proposed in [31]. EPSO [10] can be seen as a self-adaptive evolutionary algorithm where the recombination is replaced by an operation called particle movement. It does not rely on the external definition of weights and other PSO crucial parameters.In [9] the authors proposed a modification to the velocity equation in order to include a particle's bad experience component besides the global best memory introduced early [7,24]. The bad experience component helps remembering the previously visited worst positions. The method is called New Particle Swarm Optimization (NPSO). The authors claim superiority over conventional PSO in terms of convergence and robustness properties. The execution time is slightly worst when compared with the classic PSO due to the additional computation requirements to process the bad experience component.Another interesting approach is Gaussian PSO (GPSO) that has its acceleration factors replaced by random numbers using Gaussian distributions, discarding the weight factor and avoiding the fixed external definition of the other weights [32].This paper presents a specific adaptation of the standard PSO technique, somewhat inspired by the above referred PSO variants, to solve the energy resource scheduling considering V2G. The proposed PSO may be considered as a hybrid algorithm, but being a hybrid it leans more heavily to the PSO than to the GA side. From the GA-PSO hybrids it takes the use of mutation in the definition of the inertial weight but discards the recombination and selection steps. This mutation is governed by a Gaussian distribution [32]. As already mentioned, the bounds limiting this velocity are keys to ensure the convergence of the process. These boundary values are problem-specific. Some work has been done by other authors [33] showing that PSO performance can be improved by the dynamic modification of the velocity's upper limit. Therefore, the proposed PSO incorporates the management of the upper and lower bounds of the particles’ velocities already. This intelligent mechanism was already applied successfully by the authors of the current paper but in a simpler scheduling problem and not considering EVs [34]. The proposed method changes the velocity limits during the search process according to an intelligent mechanism detailed in the next sections, indirectly skewing some of the variables toward the desired outcomes.The contributions of the paper lie in the modifications of the PSO to address the problem of the day-ahead energy resource scheduling with Vehicle-to-Grid (V2G) in smart grids. The present version of the meta-heuristic includes a power flow inside PSO model to verify network constraints violations while the previous version did not.The use of metaheuristics to solve the scheduling of distributed energy resources is of high value to network systems operators. The introduction of V2G resources in the optimization problem represents new demands in terms of computational power requirements. Considering a future scenario [3] of a distribution network with 66 DG units and 2000 V2G contracts, the day-ahead optimization problem size would correspond to about 100,000 problem variables in a schedule for 24 periods intervals, just by considering DG and V2G resources and excluding network variables. 96,000 of the 100,000 variables are from V2G resources alone. The total number of variables results from 66 DG×24 periods×3 (active and reactive power and DG units binary variables)+2000 V2G×24 periods×2 (discharge and charge active power). When including network constraints and more resources such as demand response, this value can easily reach 500,000 variables without even increasing the number of V2G resources.Taking into account that this type of scheduling problem will increase with every new V2G contract with the owner of an electric vehicle, it is important to develop specific optimization packages and evolve the present optimization tools to handle hard combinatorial and large scale problems more effectively and efficiently.In this section the modifications made to the PSO are presented.The parameterization of PSO is an important aspect of its implementation success to a given problem [35,36]. However, optimal parameterization depends on the specific problem and it is not a trivial task. For this reason, we opted to implement a dynamic parameterization for ASMPSO. The initial stopping criterion is defined to be at least 50 iterations. Nevertheless, if during the last 5 iterations (of 50) the best fitness is still improving, then ASMPSO adds 1 iteration to the initial fixed 50. This occurs until there is no improvement in the fitness function. The number of swarm particles is 10 [37]. When applied to the present scheduling problem the number of particles and the stop criterion proved to be adequate.In this paper a PSO's particle means a solution comprising several variables, i.e. each particle contains the problem variables. The variables controlled by the swarm are the generators active and reactive power variables and the V2G charge/discharge variables. In ASMPSO's implementation the variables for charge and discharge of V2G are the same, where a positive value means that the vehicle is charging and a negative value means that it is discharging. This way the binary variables for charge and discharge (11) are not required in the metaheuristics used, reducing correspondingly the computational execution time. Minimum and maximum positions of variables are set to the lower and upper bound of each problem variable, therefore the maximum and minimum limits of variables are always guaranteed in the swarm.One of the most important parameters in PSO is the maximum and minimum velocities of particles. It is important to note that if these values are too high, then the particles may move erratically, going beyond a good solution. On the other hand, if they are too small, then the particle's movement is limited and the solution compromised [8,33]. In ASMPSO the initial maximum and minimum velocity limits are calculated in the beginning of the program according to a specific algorithm. The algorithm that calculates maximum and minimum velocities is described below.The maximum velocities for generators active power variables are calculated according to (19):(19)Veli,tmax=1c(i,t)∀t∈{1,…,T};∀i∈{1,…,NDG+NS}whereVeli,tmax, maximum velocity of particle's variable i for period t; c(i,t), price for generator i in period t.The minimum velocities for generators active power variables are calculated according to (20):(20)Veli,tmin=c(i,t)∀t∈{1,…,T};∀i∈{1,…,NDG+NS}whereVeli,tmin, minimum velocity of particle's variable i for period t.The values of maximum and minimum velocities described above are normalized between the lower bound and the upper bound of the generation active power limits.The maximum velocities for generators reactive power variables are set to the upper limits of reactive power. The minimum velocities are the same as maximum velocities, however in the opposite direction.The maximum velocities for V2G charge active power variables are calculated according to (21):(21)Veli,tmax=VechicleNeedsV×1∑L=1NLLoad(L,t)∀t∈{1,…,T};∀i∈{NDG+NS+1,…,NV};∀V{1,…,NV};∀L{1,…,NL}where VechicleNeedsV, vehicle total trips energy consumption obtained by vehicle profile for vehicle V.The maximum velocities of V2G charge variables are normalized between the lower bound and upper bound of V2G charge rate limit.The minimum velocities for V2G discharge active power variables are calculated according to (22):(22)Veli,tmin=1cDischarge(V,t)∀t∈{1,…,T};∀i∈{NDG+NS+1,…,NV};∀V{1,…,NV}where V2GDiscpriceV,t, price of discharge of vehicle V in period t.The minimum velocity of V2G discharge variables is normalized between the lower bound and upper bound of V2G discharge rate limit.With the above algorithm there is no need for specifying maximum and minimum values empirically and manually. The above problem-specific algorithm is suited for problems with similar mathematical formulation as presented in Section 2. The maximum velocities and minimum velocities are generally related to the price of resources because of the objective function of this problem being directly influenced by the resources’ cost.The original PSO relies on fixed velocity limits. These limits are not changed along with the swarm search process (PSO iterations) [7,38].Research work performed by Fan and Shi [7,33] has shown that an appropriate dynamical change of maximum velocities can improve the performance of the PSO algorithm. In the present implementation of ASMPSO maximum and minimum values of velocity limits can change dynamically according to the specific mechanism formerly theorized [34]. This mechanism was adapted to the present problem of V2G scheduling and is applied in two moments: evaluation and pre-movement phase. In the evaluation phase, after power flow evaluation, the mechanism will check for constraint violations, namely:•Bus voltage lower limit violations (4–5).Bus voltage upper limit violations (4–5).Line thermal limits (6).The algorithm of the proposed methodology will mark the variables that help to mitigate the possible violations in constraints (4–5). If a violation is verified in the voltage lower limit, the mechanism will mark the DG reactive power variables and V2G resources variables in order to increase the reactive power and the discharges. In case of voltage upper limit violation, the DG reactive power variables are marked in order to decrease their value and the EVs in the vicinity are recommended to charge. The buses that present violations and the buses that preceding these ones are the buses selected to get the appropriated V2G and DG resources. This will help reducing the violations detected as it will control the nearby load and the reactive power will improve voltage levels.Fig. 1presents the selection of buses according to the type of violation. This figure helps understanding the mechanism described above.Line thermal violations (6) can be fixed in two ways: reducing V2G charge or increasing generation in the downstream lines. The mechanism marks V2G variables in order to attempt to reduce the charging and the DG generators to increase the production. More information about voltage drop in radial distribution networks can be found in [39].The variables that were marked up in the previous evaluation are identified before the movement phase. The velocity limits of the marked variables are changed according to the type of mark. For instance, when DG reactive power variables are marked, then in the pre-movement phase the maximum velocity limits of these variables are increased by 20%. When the DG reactive power variables are marked to decrease, in the pre-movement phase the minimum velocity limits of these variables are decreased by 20%.The proposed mechanism leads to a faster convergence, a solution without violations and an improvement of the solution fitness. The mechanism works as follows to improve solution cost:•Increase V2G charges when V2G charge price is lower than mean generation cost.Increase V2G discharges when V2G discharge price is lower than mean generation cost.It is very clear through the formulation (1–18), presented in Section 2, namely the objective function (1), why the above aspects improve the solution cost.The presented mechanism can be extended using other functions like marked codes to reset some variables to zero or to establish the upper/lower limits as needed. In the present case study only increase/decrease functions on the velocity limits were used. This mechanism allows an intelligent adjustment of the initial velocity limits. The initial swarm population in ASMPSO is randomly generated between the upper and the lower bounds of variables, except the V2G variables that are initialized with zeros. Then ASMPSO checks whether to charge or discharge vehicles as needed or advantageous.A power flow algorithm is used to validate the load system balance (3) and the power losses are compensated by the energy suppliers or DG generators. The constraints of vehicle battery balance (16–18) are checked before fitness evaluation. If the values from swarm solutions are not according to the constraint limits (battery limits and charging/discharging limits) the solution is corrected directly to match constraints. This is called a direct repair method. A direct repair method can be used instead of indirect repair method such as penalty factors providing an efficient way of correcting solutions before evaluating the fitness function [40].The present ASMPSO implementation uses mutation of the strategic parameters (wk): inertia, memory, cooperation introduced in [10]. They have considered the replicating of the particles in order to increase the probability of finding more solutions enhancing the search space. However, due to the added computation time it was not used in ASMPSO. Mutation of the strategic parameters is applied directly to the original swarm rather than the replicated swarm as in [10]. At the beginning of the process, the values of these weights are randomly generated between 0 and 1. After that, the particle's weights are changed in each iteration using a Gaussian mutation distribution according to (23):(23)wk∗=wk+δN(0,1)wherewk∗, new mutated weights of particle k;wk, weights of particle k; δ, learning parameter with a range between 0 and 1.A high value of δ adds more importance to mutation. In every iteration step this value is randomly changed. N(0, 1) is a random number following a normal distribution with mean equal to 0 and variance equal to 1. Once again, the strategic parameters are limited to values between 0 and 1 in this stage.During the development phase authors have experimented using in ASMPSO approach a decreasing value for the inertia weight as it is implemented in NPSO instead of using a Gaussian mutation. The last one presents slightly better results. However, the main reason of the faster convergence of the proposed method is the mechanism of setting up the particles velocities in an intelligent manner which greatly influences the convergence.Equation (24) allows the calculation of the new particle's velocity that depends on the particle's present velocity, best past experience (memory) and the group's experience (cooperation).(24)vk,j∗=wk(inertia)∗vk,j+wk(memory)∗(bk−xk,j)+wk(coop)∗(bG−xk,j)where bk, best past experience of particle k; bG, best global experience of all the particles;vk,j, velocity of variable j of particle k;vk,j∗, new calculated velocity of variable j of particle k; xk,j, position of variable j of particle k;wk(inertia)∗, inertia weight component of particle k;wk(memory)∗, memory weight component of particle k;wk(coop)∗, cooperation weight component of particle k.The new positions (xk,j∗) for each particle are then calculated according to the movement equation (25).(25)xk,j∗=xk,j+vk,j∗wherexk,j*, new calculated position of j variable the i particle.After applying the movement equation to each particle, the fitness of new positions is evaluated and the best solution of the swarm group (bG) is stored.This section presents the case studies tested on a 33-bus distribution network (Fig. 2) adapted from [2,41] to a 2040 scenario with intensive use of distributed resources. The analyzed scenarios include up to 2000 V2G. The distribution network serves 218 consumers with total peak consumption around 4.2MW. It includes 66 DG units (33 photovoltaic, 8 fuel cells, 4 wind farm, 2 small hydro, 1 waste to energy, 3 biomass units, and 15 cogeneration units).To test the effectiveness of the proposed Application Specific Modified Particle Swarm Optimization (ASMPSO) methodology, it has been compared with Particle Swarm Optimization (PSO), New Particle Swarm Optimization (NPSO) and Mixed-Integer Nonlinear Programming (MINLP).ASMPSO, PSO, and NPSO methodologies have been implemented in MATLAB R2010a 64 bits software. MINLP has been developed in General Algebraic Modeling System (GAMS). All the case studies in this paper have been tested on a machine with two Intel® Xeon® W3520 2.67GHz processors, each one with 2 cores, 3GB of random-access-memory and Windows 7 Professional 64 bits operating system. Both MATLAB R2010a and GAMS only used one core for the results presented in this work in order to enable a fair comparison.The objective of this subsection is to establish the number of V2G in the 33-bus distribution network. The number of V2G will depend on the type and amount of consumers that are connected to the network. The consumers were divided into 6 groups, domestic consumers (DM), small commerce (SC), medium commerce (MC), large commerce (LC), medium industrial (MI) and large industrial (LI) [42]. Table 1shows the number of V2G considered in this case study. The columns and rows contain the consumer type and bus number respectively. For each bus it is indicated the number of consumers for each type and the total number of consumers. Table 1 presents the forecasted amount of vehicles in 2040 for each consumer type and the forecasted V2G penetration. With this information it was determined the resulting number of V2G in each consumer type and the total number of V2G.The case study is divided into two scenarios: scenario 1 with 1000 V2G and scenario 2 with 2000 V2G. The first scenario considered 1000 V2G, and the second scenario has been simulated with 2000 V2G. Scenario 2 assumes that a large number of customers of MC and LC sites have their cars parked in the malls’ parking lots. Scenario 2 considers more vehicles in the MC and LC consumers, because in this scenario the parked vehicles are from vehicles of workers and the customers. The driving patterns for both scenarios are presented in Table 2. These driving patterns were based on profiles reported by the U. S. Department of Transportation (DoT) in [43].Fig. 3shows the number of vehicles that travel the same distance over 24 periods for scenario 2. Fig. 4illustrates the number of vehicles that are in movement over time for scenario 2. V2G trips are more concentrated between 8h and 9h and 16h and 18h.Table 3depicts the PSO parameters selected for the ASMPSO, traditional PSO, EPSO and NPSO variants. The traditional PSO parameters have been chosen according to reference [7] whereas the NPSO parameters were based on [9] and EPSO on [10].The charge and discharge prices have a constant value of 0.07€/kWh and 0.115€/kWh respectively. The case study considers 8 different vehicle types, for which the technical information has been obtained from reference [44]. The proposed model considers two types of charge rates, which are the quick and slow rate. The quick and slow rates depend on the point where the vehicle is connected to the network. If the V2G is connected in a house (slow charge rate) the charging rate will be lower than in a parking lot (quick charge rate with a 3 phase system). The maximum discharge rate for vehicle-to-grid flow energy is assumed to be equal to slow rate power in order to avoid premature battery wear.A scenario without any vehicles has been simulated in order to be compared with the two scenarios considering V2G in the network, both in terms of the objective function value and execution time. The objective function for the network without vehicles corresponds to a total cost of 6115.6€ and 6116.8€, for MINLP and ASMPSO respectively. The execution time has been 115s and 20s, for MINLP and ASMPSO respectively.Table 4presents the total cost results obtained with the five methodologies. In what concerns PSO variants, ASMPSO methodology achieved the objective function value closest to the MINLP's results. MINLP achieved the best objective function value (6200.70€), but with a much higher execution time of 24,889s (approximately 7h). ASMPSO's execution time is slightly higher when compared with the other PSO approaches (PSO and NPSO), but it is the variant with the lowest objective function value.Figs. 5–7present the results of MINLP and ASMPSO methodologies for the best objective function value (see Table 4). Fig. 5a shows the resulting energy resource scheduling over 24 periods. From Fig. 5 it is possible to verify the amount of power for each DG technology. The MINLP approach allocated the V2G discharge in the peak periods (20h and 21h), due to the fact that in these periods the V2G discharge has a lower cost than the other available resources. In terms of optimal resource scheduling, this fact helps decreasing the cost (objective function), while supplying the same load demand.Fig. 6a illustrates the load diagram and the total V2G charge. The solid line represents the resulting load diagram considering the demand, V2G charge and the load reduction effect achieved through the use of V2G discharge.The load consumption decreases when the V2G discharges are used in the peak periods (20:00 and 21:00). Considering the logic of minimizing the cost of the energy resource scheduling, the V2G charges are allocated in the off-peak periods (from 1:00 to 6:00), because the resource costs are lower than in the other periods. It is also necessary to guarantee the vehicle user's trip distance requirement, and the MINLP makes an intensive use of V2G charge in the off-peak periods. Fig. 7a depicts the total V2G charge and discharge results obtained with the MINLP approach.The dispatch for the DG and energy supplier is shown in Fig. 5b for ASMPSO methodology. From Fig. 5b it is possible to verify the amount of power for each DG technology. Fig. 6b depicts the load diagram and the total V2G charge. ASMPSO makes less use of V2G charge in off-peak periods. When we compare Fig. 6a and b, it is possible to see that MINLP scheduled the V2G charges in the off-peak periods, whereas the ASMPSO solution spreads the energy to charge vehicles in other periods. V2G charges peak load is lower than in the MINLP solution. In the ASMPSO solution, the peak load consumption increased to a consumption value of 4.5MW, which is still an acceptable value to operate the network (without violating any network constraints). Fig. 7b shows the total V2G charge and discharge results over 24 periods. In this case, only V2G charge occurs, and the vehicles have not been used as generators for the energy resource scheduling. The peak power of V2G charge happens in periods 6 and 10.Table 5presents the total cost results obtained with the four methodologies. Considering PSO variants, ASMPSO methodology achieved the closest objective function value to the MINLP's results. The MINLP achieved the best objective function value (6309.60€), but with a higher execution time of 91,018s (approximately 25h). The ASMPSO methodology obtains a good solution with a much lower execution time.ASMPSO proved to be a good methodology to be applied in a real-time operation tool, to supply energy resource management in smart grids.Analyzing MINLP's execution time, these operator tests are not possible to execute for the next day. The ASMPSO proposed methodology can be used on these terms, because this methodology presents a competitive time and good solutions. Using the ASMPSO approach in operation scenario it is possible to test different numbers of V2G connected to the network.The MINLP executed the scheduling approximately in 7 and 25h for scenario 1 with 1000 V2G and scenario 2 with 2000 V2G respectively.Scenario 2 with 2000 V2G requires a smarter scheduling process than scenario 1, due to the amount of V2G and requires more energy to charge the vehicles. In this scenario the total distance traveled by the 2000 EV is 63,306km (see Table 2). Figs. 8a, 9a and 10a) show the results of the MINLP approach. The dispatched resources in this scenario can be seen in Fig. 8a. The MINLP scheduled more vehicles to discharge when compared with the scheduling in Fig. 5a. V2G discharge is more used in the peak periods, because it has a lower cost than the other dispatchable resources. The MINLP makes an intensive use of V2G as load in off-peak periods as can be seen in Fig. 9a, i.e. V2G charge helps the energy resource scheduling to achieve a good operation point. Using V2G discharge, the load diagram peak is significantly reduced and an efficient resources schedule is obtained. Fig. 10a depicts the total V2G charge and discharge results obtained with the MINLP approach.Figs. 8b, 9b and 10b show the results of ASMPSO methodology for the best objective function value (see Table 5). The dispatch determined by ASMPSO can be seen in Fig. 8b. The ASMPSO proposed methodology scheduled V2G discharge for the peak periods (10:00, 20:00 and 21:00). The ASMPSO spreads the V2G charges along the day, as can be seen in Fig. 9b whereas MINLP makes a more intensive use of V2G as load in off-peak periods as can be seen in Fig. 9a. Fig. 10b depicts the total V2G charge and discharge results obtained with the ASMPSO approach.Fig. 11depicts the convergence results for 100 trials for ASMPSO; PSO, NPSO and EPSO. Each line represents the average value of the objective function over 100 trials during 50 iterations. ASMPSO approach presents an impressive fast convergence, starting from the first iteration as the initial solution (consider iteration 0) is immediately signalized to set up particles velocities, thus directing the solution to a better position and objective function (iteration 1). Also due to the fact that the used initial solution scheme mentioned in Section 3 helps the ASMPSO to be faster using the intelligent mechanism to control variables. After that, the process rapidly sits in a satisfactory place until the stopping criteria. The Gaussian mutation to the equation weights adds more diversity in the swarm search process. Furthermore, the mechanism of setting up the particles velocities in an intelligent manner, present in ASMPSO, greatly influences the convergence. ASMPSO presents the best convergence properties starting from iteration 1.The convergence test (Fig. 11) took place using the same platform and the same machine mentioned previously in the beginning of the case study. The average execution time per iteration can be estimated dividing the average execution time (see Tables 4 and 5) by the number of total iterations used in the robustness test (50 iterations). The convergence stagnation test provides the average iteration where the fitness stops to improve. ASMPSO clearly requires less iterations to converge. For scenario 1 considering that the method converges if there are five successive iterations without improvement in the objective function, AMPSO requires 30 iterations to converge. PSO, NPSO, and EPSO require 50, 50, and 48 iterations to converge, respectively. Using this stopping criterion, the mean execution times are 16, 25, 25 and 55s, respectively for AMPSO, PSO, NPSO, and EPSO. In light of these statements, ASMPSO clearly presents the lowest computational cost.Table 6shows the execution time for MINLP and ASMPSO approach for several simulations with different numbers of V2G on the same distribution network. Analyzing the performance of both methodologies, ASMPSO is less sensitive than MINLP when the number of V2G increases in this scheduling problem. The ASMPSO's execution time is kept approximately constant whereas the MINLP's execution time rapidly increases with the number of V2G. The binary variables are required to control whether the vehicles are charging or discharging. Binary variables increase have a heavy impact on the execution time of the solver as it was verified by the case studies when an increase from 48,000 binary variables (1000 EVs scenario 1) to 96,000 (2000 EVs scenario 2) resulted in an increase of 7h to about 25h in execution time which means more than folded (see Tables 4 and 5). This fact makes the problem harder to solve by including the EVs and its associated constraints in the problem.

@&#CONCLUSIONS@&#
