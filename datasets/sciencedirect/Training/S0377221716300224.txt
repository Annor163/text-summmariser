@&#MAIN-TITLE@&#
The two-machine flowshop total completion time problem: Branch-and-bound algorithms based on network-flow formulation

@&#HIGHLIGHTS@&#
We study the two-machine flowshop problem with sequence-independent setup times to minimize total completion time.Strong Lagrangian bounds are proposed based on large scale network flow formulations.To cope with their size, filtering procedures are developed.Numerical experiments assess the efficiency of branch-and-bound algorithms.

@&#KEYPHRASES@&#
Scheduling,Flowshop,Branch-and-bound,Lagrangian relaxation,

@&#ABSTRACT@&#
We consider the flowshop problem on two machines with sequence-independent setup times to minimize total completion time. Large scale network flow formulations of the problem are suggested together with strong Lagrangian bounds based on these formulations. To cope with their size, filtering procedures are developed. To solve the problem to optimality, we embed the Lagrangian bounds into two branch-and-bound algorithms. The best algorithm is able to solve all 100-job instances of our testbed with setup times and all 140-job instances without setup times, thus significantly outperforming the best algorithms in the literature.

@&#INTRODUCTION@&#
We consider the problem of scheduling a set of jobsJ={1,⋯,n}in a two-machine flowshop with the objective of minimizing the sum of completion times of jobs. The jobs are available at time zero and they should be processed first on machine 1, and then on machine 2. Each machine can process at most one job at a time. Letpjmdenote the processing time of job j on machine m, wherem=1,2. All processing times are integer. Preemption of the processing of the jobs in not allowed on either machine. LetCjmdenote the completion time of job j on machine m. According to the scheduling classification, the problem is denoted by F2||∑Cj. It is known to be NP-hard in the strong sense (Garey, Johnson, & Sethi, 1976). It has been shown by Conway, Maxwell, and Miller (1967) that there exists at least one optimal solution where both machines have the same sequence of jobs. Thus, we may restrict the search to permutation schedules only.In addition to this classic two-machine flowshop problem, we also consider its extension in which every job should be set up on each machine before being processed. Letsjmdenote the setup time of job j on machine m. Setup of a job on machine 2 and processing of the same job on machine 1 can be performed in parallel. Note that setup times do not depend on the job processed just before job j, i.e. the setup times are sequence independent. This generalisation of the problem has been treated previously by Gharbi, Ladhari, Msakni, and Serairi (2013). It can be denoted as F2|STsi|∑Cjin the scheduling classification. The set of permutation schedules remains dominant for this generalization as indicated in Allahverdi, Gupta, and Aldowaisan (1999).

@&#CONCLUSIONS@&#
In this paper, we proposed improved branch-and-bound algorithms for the flowshop problem on two machines with minimum flow time criterion, as well as for its extension with sequence-independent setup times. Our algorithms are based on large-scale network flow formulations of the problem. At the root node, a subgradient procedure is used to compute a very strong Lagrangian dual bound. To reduce the size of the network and improve the dual bound, a filtering technique (combined with the use of a tentative upper bound) and dominance rules are exploited (including a memory based dominance rule). Lagrange multipliers are not updated beyond the root node, which allows us to speed-up the calculation of the lower bound at non-root nodes of the search tree.Our best algorithm is able to solve all tested 140-job instances witout setup times and 100-job instances with setup times coming from the literature or generated in the same way as in the literature. This is a significant improvement over the best known algorithm dedicated to the special case without setup times, which cannot solve instances with more than 60 jobs with small processing times and with more than 45 jobs with large processing times, as well as for the case with setup times for which the best published method cannot solve instances with more than 35 jobs.Future research directions include the use of the Successive Sublimation Dynamic Programming (Ibaraki & Nakamura, 1994; Tanaka et al., 2009) algorithm to find an optimal feasible solution instead of branch-and-bound algorithms. It would also be interesting to investigate the possibility of applying similar approaches to more general problems (for example with general total cost functions or more machines) using adapted network representations of the problems.