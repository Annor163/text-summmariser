@&#MAIN-TITLE@&#
A parallel implementation of seeker optimization algorithm for designing circular and concentric circular antenna arrays

@&#HIGHLIGHTS@&#
We propose a parallel version of seeker optimization algorithm (SOA) for designing circular and concentric circular antenna arrays with the low sidelobe levels at a fixed beamwidth (BW).We locate the subpopulations of SOA are physically in different computers named as the slaves to improve the algorithm performance.We realize the parallelization with MPICH2 and employ 40 PCs (slaves) and 1 laptop (master) for the simulations.From maximum sidelobe levels and BW points of view, the performances of the patterns obtained by parallel SOA are very good under the constraint of physical size of antenna and dynamic range ratio.

@&#KEYPHRASES@&#
Antenna array synthesis,Circular antenna arrays,Concentric circular antenna arrays,Evolutionary algorithms,Parallel computing,Message passing interface,

@&#ABSTRACT@&#
In this paper, a parallel version of seeker optimization algorithm (SOA) is proposed for designing circular and concentric circular antenna arrays with the low sidelobe levels at a fixed beamwidth. The SOA is a relatively new evolutionary optimization algorithm based on the concept of simulating the act of humans’ intelligent search with their memory, experience, and uncertainty reasoning. In this work, The SOA has been parallelized by benefiting from its dividable population form. The numerical results show that the design of circular and concentric circular antenna arrays using the parallel SOA provides good sidelobe levels with a fixed beamwidth. The quality of results obtained by the parallel SOA is checked by comparing with those of several evolutionary algorithms in the literature.

@&#INTRODUCTION@&#
Antenna arrays are widely used in modern communication and radar systems. Linear antenna arrays cannot provide flexible solutions in terms of steering capabilities. This limitation can be eliminated by using planar arrays which have the beam steering ability in two planes. Circular and concentric circular arrays are common choice when beam scanning is required in azimuth through 360° without mechanical rotation. These arrays are used in many fields including satellite communication, radar, sonar, and navigation systems [1,2].Antennas with the low sidelobe levels at a fixed main beamwidth are required in many communication systems. One of the major advantages of antenna arrays is that synthesis of low-sidelobe and narrow-beam patterns can be achieved by controlling their element excitations and positions. The classical optimization techniques used for antenna arrays synthesis are likely to be stuck in local minima if the initial guesses are not reasonably close to the final solutions. In order to overcome the disadvantages of classical optimization techniques, several evolutionary methods [3–15], varying in accuracy and computational effort, have been proposed and used to synthesize antenna arrays.In this paper, we propose a parallel seeker optimization algorithm (SOA) for designing non-uniform circular and equally spaced concentric circular antenna arrays with the low sidelobe levels at fixed beamwidths. The SOA originally proposed in Ref. [16] is a relatively new evolutionary computation technique based on the concept of simulating the act of human intelligent searching. In Refs. [16–25], SOA was compared with biogeography-based optimization (BBO) and different and hybrid versions of particle swarm optimization (PSO), genetic algorithm (GA), differential evolution (DE), ant colony optimization (ACO), simulated annealing (SA), tabu search (TS) and bacterial foraging (BF) for the benchmark functions and particular engineering problems. In Refs. [17,18], the SOA has been applied to optimal reactive power dispatch on standard IEEE 57- and 118-bus power systems, and compared with several optimization algorithms including GA, PSO, and DE. It is clear from the results obtained in Refs. [17,18] that the proposed approach is superior to the other listed algorithms and can be efficiently used for optimal reactive power dispatch. An SOA-based digital filter design method has been presented in Ref. [19], and the benefits of SOA for designing digital IIR filters have been studied. It was illustrated in Ref. [19] that SOA has better, or at least equivalent, global search ability and convergence speed than GA, four version of PSOs, and three version of DEs for most of the chosen and widely used problems. In Ref. [20], the performance of SOA was studied with a challenging set of benchmark problems for function optimization. The comparisons of SOA, DE, and three modified PSOs show that SOA has better global search ability and faster convergence speed for the most chosen benchmark problems [20]. A hybrid method combining SOA and sequential quadratic programming (SQP) for solving dynamic economic dispatch (DED) problem with valve-point effects including generator ramp-rate limits has been proposed in Ref. [21]. It was shown that the proposed hybrid SOA-SQP method is giving higher quality solutions than the reported methods for DED problem with valve-point effects [21]. The application of the SOA to tuning the structures and parameters of artificial neural networks (ANNs) was presented in Ref. [22] as a new evolutionary method of ANN training. The results in Ref. [22] showed that SOA can simultaneously tune the structures, the weight values and the parameter of regularization performance function. Moreover, it was shown that SOA is better than, or at least comparable to, DE and two PSO algorithms. It was also illustrated that the ANNs with link switches trained by SOA not only have much less number of links but also have better or equivalent learning capabilities than ones by back propagation algorithms [22]. SOA was applied to optimal modeling of the proton exchange membrane fuel cell (PEMFC) by using a fuel cell test system in Ref. [23]. The simulation results showed that SOA has better performance than other famous versions of PSO and DE algorithms [23]. SOA was used in Ref. [24] for the solution of the constrained economic load dispatch problems in different power systems considering various non-linear characteristics of generators. The results of SOA were compared with those of BBO, different and hybrid versions of PSO, DE, GA, ACO, BF with Nelder–Mead algorithm, improved fast evolutionary programming, and Hopfield model. The comparison results showed that the SOA has the ability to converge to a better quality near-optimal solution and possesses better convergence characteristics and robustness than the other algorithms [24]. In our previous work [25], we used basic SOA for null steering of linear antenna arrays by controlling the position-only, phase-only, and amplitude-only. Several numerical examples of Chebyshev pattern with the single, multiple, and broad nulls imposed at the directions of interference were given to illustrate the performance and flexibility of the proposed algorithm. For a comparison, the nulling patterns obtained by SA and TS algorithms were also given. From the null depth level and the maximum side lobe level points of view, the performances of the patterns obtained by SOA are mostly better than those of SA and TS. Furthermore, the results of SOA were statistically compared with those of SA and TS algorithms. The statistical results of simulations showed that SOA is superior to the other compared algorithms [25]. In this paper, the parallel SOA is used for designing circular and concentric circular antenna arrays with the low sidelobe levels at a fixed beamwidth.Parallel computing is a form of computation in which many calculations are carried out simultaneously [26]. Computation problems, which can be divided into smaller parts are able to be efficiently solved in the parallel computing systems. Since evolutionary algorithms, like other bioinspired algorithms, need high computation power, they have come closer to parallel computing systems during the last years [27]. Several evolutionary algorithms were parallelized with the help of their intrinsically parallel and distributed nature [28]. Parallelized evolutionary algorithms did not escape the attention of antenna design researchers as well as other scientists. In Ref. [29], a parallel GA was used for design dual-band patch antenna intended for wireless communication applications. The optimal patch geometry that exhibits good agreement with calculations was found with the help of the robustness of GA and the speed of cluster supercomputing [29]. A parallel PSO/finite-difference time-domain (FDTD) was proposed in Ref. [30] for designing multiband and wide-band patch antennas. It was showed that the parallel PSO/FDTD optimizer is able to achieve the optimum design for specified antenna performance in an effective manner. In Ref. [31], the structural parameters of the three-dimensional fishbone antenna were optimized in an automated design, making use of the GA in conjunction with numerical electromagnetic codes and cluster parallel computation. The optimization process was targeted to achieve a high endfire gain and good impedance match. By considering the simulation results, a prototype was fabricated and tested. The measured radiation pattern and the return loss of the antenna were compared with the computational results, and a good agreement was observed [31]. A parallel GA optimization tool was developed for the synthesis of arbitrarily shaped beam coverage using planar 2D phased-array antennas in Ref. [32]. A benchmark 10×10 (100) element array was employed, and various results of optimized coverage patterns were shown herein to illustrate the effectiveness and validity of the technique using complex, amplitude-only, and phase-only optimization of the array weights [32].The SOA used in this work has been parallelized by using MPICH2 [33] which is a highly portable implementation of the message passing interface (MPI) standard. The MPI is a library of message-passing routines and it has a dominant position in the parallel computing [28]. The parallel SOA proposed in this paper has a kind of master–slave model. The master is a single computer and manages all communication among the slave computers. The iterative optimization process based on SOA structure is performed in the computers acting in the role of slaves. The master computer collects the best values from the slaves and distributes the best of them to the slaves in the same connection. The parallel SOA uses the non-blocking communication technique of MPI in order to allow the slaves to allocate more time to their optimization task.The remaining sections of this paper are organized as follows: Section 2 briefly explains the formulation of the problem. Section 3 describes the details of parallel SOA algorithm. The numerical results are presented in Section 4 and the conclusion is made in Section 5.Let us assume that a circular antenna array of N antenna elements non-uniformly spaced on a circle of radius r in the x–y plane, as shown in Fig. 1. If the elements in the circular antenna array are chosen to be isotropic sources, the pattern of this array can be described by its array factor which is given by(1)AF1(ϕ)=∑n=1NInej(krcos(ϕ−ϕn)+βn),with(2)kr=2πrλ=∑i=1Ndiand(3)ϕn=2πkr∑i=1ndi,where Inand βnare the excitation amplitude and phase of the nth element, respectively. The arc separation between element i and element i−1 is represented by diin terms of wavelength. In this case, d1 is the arc distance between the first and the last elements. ϕnrepresents the angular position of the nth element in x–y plane. In order to place the main beam in the direction of ϕ0, the excitation phase of the nth element is chosen to be(4)βn=−krcos(ϕ0−ϕn).Then, the array factor of the circular array can be rewritten as following form,(5)AF1(ϕ)=∑n=1NInej(kr[cos(ϕ−ϕn)−cos(ϕ0−ϕn)]).In this paper, the amplitude and position values of array elements are optimally determined by the parallel SOA. For all non-uniform circular antenna array examples, ϕ0 is selected as 0, to direct the peak of the main beam in the x direction [1].Consider a concentric circular antenna array which consists of several elements settle in multiple concentric circular rings that have different radius as shown in Fig. 2. There are M concentric circular rings in x–y plane and the mth ring has a radius rmand number of elements is Nmwhere m=1, 2,…, M. if the array elements are equally spaced within the ring, the azimuth angle from the x-axis for mnth element is given by(6)ϕmn=2πnNm,n=1,2,3,…,NmTherefore, the array factor of concentric circular antenna array can be written as following equation,(7)AF2(ϕ)=∑m=1M∑n=1NImnej(krm[cos(ϕ−ϕmn)−cos(ϕ0−ϕmn)]).where Imnis the excitation amplitude of the nth element in the mth ring [15]. In this paper, the parallel SOA is used for obtaining optimal amplitude values of array elements. In order to direct the peak of the main beam in the x direction, ϕ0 is set to 0 for all concentric circular antenna array examples.In antenna array synthesis problems, there are many parameters that can be used to evaluate the cost function such as the maximum sidelobe level (MSLL), 3dB beamwidth (BW), dynamic range ratio (DRR=|Imax/Imin|), physical size, gain and radiation pattern. Here, we are interested in designing antenna arrays with the low MSLL at a fixed BW. The low values of the array circumference and DRR are important for some practical considerations, so that they are also considered in this paper. Therefore, the following cost function is used,(8)F=aSLL*fSLL+aBW*fBW+aC*fC+aDRR*fDRR,where aSLL, aBW, aCand aDRR are the weight coefficients used for improving algorithm accuracy, and fSLL, fBW, fCand fDRR are the functions used for suppressing the SLL, fixing 3dB BW, reducing circumference and improving DRR, respectively. The function fSLL can be described as follows,(9)fSLL=∫−πϕnull1σSLL(ϕ)dϕ+∫ϕnull2πσSLL(ϕ)dϕ,where ϕnull1 and ϕnull2 are the two angles at the first nulls on each side of the main beam. σSLL(ϕ) is the function used for determining the values which exceed the desired maximum SLL (SLLd) in the side lobe region and it can be formulated as follows,(10)σSLL(ϕ)=ψo(ϕ)−SLLd,ψo(ϕ)>SLLd0,elsewhere,where ψo(ϕ) is the array factor in dB and it is given by(11)ψo(ϕ)=20log(AFo(ϕ)normalized).The function fBW can be given by(12)fBW=BWo−fbwmax,BWo>fbwmax0,elsewhere,where BWo and fbwmax are the BW value obtained by the parallel SOA and the desired maximum BW, respectively. The function fCused for reducing circumference size can be written as,(13)fC=∑i=1Ndi−fcmax,∑i=1Ndi>fcmax0,elsewhere,where fcmax is the desired maximum circumference size of antenna array. The function fDRR can be given by(14)fDRR=ImaxImin−fdrrmax,ImaxImin>fdrrmax0,elsewhere,where Imax and Imin are the maximum and minimum amplitude values of the antenna array elements obtained by the parallel SOA, respectively. fdrrmax is the desired maximum DRR value. By this way, the cost function has been designed to control over the MSLL, BW, circumference size and DRR values. The weight coefficients aSLL, aBW, aCand aDRR in the cost function are determined by using a simple test algorithm represented in below with a C-style pseudo code.bool flag=true;int a_sll=1, a_bw=1, a_c=1, a_drr=1;While(flag){flag=false;Apply_SOA_Algorithm();if(Obtained_MSLL>Desired_MSLL) {flag=true; a_sll++;}if(Obtained_BW>Desired_BW) {flag=true; a_bw++;}if(Obtained_Circumference>Desired_Circumference) {flag=true; a_c++;}if(Obtained_DRR>Desired_DRR) {flag=true; a_drr++;}}printf(“Weights:”);printf(“[a_sll=%d, a_bw=%d, a_c=%d, a_drr=%d]”, a_sll, a_bw, a_c, a_drr);The test algorithm initializes the weight values in the beginning of algorithm. During the loop, the weight values are increased for the each exceeded values of the MSLL, BW, circumference size and DRR. When the obtained values are in the given restrictions, the flag value is sustained as “false” and the program exits from the loop. These recent values of a_sll, a_bw, a_c and a_drr variables can be used as weight values for the optimization problem.Like other evolutionary algorithms, SOA has a set of potential solutions named as search population [16–20]. “Seekers” are the individuals of these populations. The population is randomly divided into K subpopulations in order to define a neighborhood for each seeker. In the parallel SOA, the subpopulations are physically located in different computers named as the slaves. The subpopulation system ensures that SOA has a kind of social characteristic for sharing of information. Every subpopulation has the same size and all seekers in the same populations constitute a neighborhood.In SOA, a search direction γbc(t) and a step length αbc(t) are computed separately for each seeker b on each dimension c for each time step t, where αbc(t)≥0 and γbc(t)∈{−1,0,1}. γbc(t)=1 means the bth seeker goes toward the positive direction of the coordinate axis on the dimension c, γbc(t)=−1 means the seeker goes toward the negative direction, and γbc(t)=0 means the seeker stays at the current position. For each seeker b (1≤b≤s, s is the population size), the position update on each dimension c (1≤c≤D) is given as follows,(15)xbc(t+1)=xbc(t)+αbc(t)γbc(t)xbc(t) is the position of the bth seeker in the cth dimension at time step t. In this paper, the coordinates of seekers,x→b(t), represent the position and amplitude values of the non-uniform circular antenna array elements for the synthesis examples. In the equally spaced concentric circular antenna array examples,x→b(t)stand for the amplitude values of the antenna array elements.According to the human rational judgment, the actual search direction of the bth seeker,γ→b(t), is based on a compromise among egotistic, altruistic and pro-activeness behaviors. On the other hand, the step lengthα→b(t)of the bth seeker is determined with the help of a fuzzy reasoning method in SOA. Detailed theoretical explanations and calculations of theγ→b(t)andα→b(t)can be found in Refs. [16–20].SOA substantially has a greedy search mechanism that consists of the search direction and step length calculations. This special search mechanism is inclined to converge quickly an optimal solution. This is an advantage when the seekers (population members) are near to a global optimal solution. But, if the seekers are far away to the global optimal solution in the search space, it is strongly liable to occur a premature convergence problem. In order to eliminate this issue, the main population is divided into logical subpopulations in SOA. In this way, the seekers in the different subpopulations can explore the search space more effectively. Owing to the exploration capacity, the seekers can find the regions close to the global optimal solution. The search activity balanced between the exploitation and exploration provides a powerful optimization ability to SOA.SOA is originally designed for working sequentially on a single computer (processor). But its dividable population characteristic provides facility to implement a parallel version of SOA. The evolutionary optimization algorithms can mostly find better solutions if the population size is increased, since a larger population size allows searching a larger portion of the solution space throughout the optimization process. However, the larger population size also means the bigger amount of total computation time. At this point, the parallel SOA offers a solution by locating each subpopulation on a different processor.The parallel SOA has one master computer which manages the communication among many slave computers that perform their optimization tasks iteratively, as illustrated in Fig. 3. The non-blocking communication technique of MPI is used for information exchange among the slaves with the help of the master. Since subpopulations use their own information for searching activities, they may converge to a local optimum solution. At this point, the communication among subpopulations plays lead role to prevent this kind of premature convergences. The original SOA uses an information sharing method which the worst seekers and the best seekers are combined in the dimensional level by a binomial crossover operator for each subpopulation. Furthermore, this intense communication is repeated at the each iteration. This exchange process among the subpopulations effectively boosts the diversity of population. However, the parallel SOA proposed in this paper keeps its subpopulations in different computers and information sharing is performed over a network. In terms of total computation time, an intense communication cannot be used because it retards the optimization processes run on the slaves, even though non-blocking communication technique is used.In the parallel SOA, information sharing task among subpopulations is performed by the master computer. The master computer starts its job at the same time with the slaves. When the slaves begin optimization process, the master determines the first slave and begins waiting for Δt second. This is a respite for the slaves to perform their optimization process freely without dealing with the communication. When time is up the master makes a connection with the first slave and demands its local best seeker positions. Since it is the first value achieved by the master, the local best seeker of the first slave becomes the global best seeker of the master when it is received to the master. After attaining the first value, the master selects the other slaves one by one until the last slave in accord with a scanning list that contains all slaves’ node numbers. By this way, the master collects all local best seeker position values and sets the best of them as the global best seeker. The master starts again the waiting for Δt second after scanning all slaves. The waiting is repeated after all scanning process.On the side of slaves, the optimization process is carried on regularly. All slaves have same population size and maximum iteration number. Each slave uses their own system clock and MPI rank number to generate random number seed. Additionally, the slaves constantly check for a new message from the master. For the slaves, a new message means a new global best seeker positions coming from the master, and then it sends immediately its own local best seeker positions to the master. Actually, the source of this values transported by the master is the other slaves. A slave which gets a new message containing the global best seeker decides whether to include the new values into its population or to ignore by using the following operator:(16)x→random=x→gmbestx→randomifRs≤0.7elsewhere Rsis a uniformly random real number generated by the slave within [0,1],x→randomis denoted as randomly selected seeker position in the population of the slave, andx→gmbestis the global best position sent from the master.When a slave completes its optimization process, it begins waiting for the last connection with the master. A slave sends two kind of information to the master in the last connection. The first is the last best local seeker and the second is the information of the termination of slave's optimization task. After receiving the termination information from a slave, the master removes the slave from the scanning list and it will not try to make connection with this slave anymore. In the course of time, all slaves reach the end of their iterations and inform the master about their status. The master checks the number of slaves with the help of a slave counter and it finishes the parallel SOA optimization process when all slaves complete their optimization task. The master displays the last global best seeker position as the final solution. A flowchart of the parallel SOA utilized in this paper is shown in Fig. 4. Additionally, an animation video that summarizes the parallelization of SOA is presented in Video 1, supplementary data.In this paper, we consider two series of examples for testing the ability of proposed parallel SOA. The first series is to examine the performance of parallel SOA for designing non-uniform circular antenna arrays with 8, 10, and 12 elements. In the second series of examples, the parallel SOA is employed to optimize the element amplitude values of an equally spaced concentric circular antenna array having three rings (N1=4, N2=6 and N3=8 elements). For all examples, the parallel SOA is used for achieving the patterns of the antenna arrays with the low side lobe levels for a specific BW value.The parallel computing system used in this work has one master computer and 40 slave computers for the simulation tests. The master computer is a laptop with configuration of Intel Pentium Core 2 Duo 1.6GHz CPU and 2048MB RAM. The slaves are desktop computers connected to each other with a local area network in a computer laboratory. Each slave computer has Intel Pentium Core 2 Quad 2.66GHz CPU and 2048MB RAM. The control parameters of parallel SOA are set after a series of parameter tuning experiments. The subpopulation number K is determined as 40 and each subpopulation has 60 seekers. The waiting time Δt is set to 500ms for the master. The coordinates of seekers,x→b(t), represent the position and amplitude values of the non-uniform circular antenna array elements for the synthesis examples. In the equally spaced concentric circular antenna array examples,x→b(t)stand for the amplitude values of the antenna array elements. All simulation codes are programmed by using C++ programming language and tested in Windows environment. The MPI implementation used in this paper is MPICH2 Version 1.4.1p1, which is very portable to the other platforms. MPI_ISend and MPI_IRecv functions in the MPI library are used for non-blocking communication between the master and slave computers.A radiation pattern is the spatial distribution of a quantity that characterizes the electromagnetic field generated by an antenna system. In this pattern, the radiation lobe which contains the direction of maximum radiation is named as main beam. The side lobes are the radiation lobes in any direction other than that of the main beam [34]. For the most antenna array applications, high side lobes are considered as the wasted radiation energy in undesired directions. Additionally, they have a potential to cause an interference with other unwanted signals. For these reasons, it is important to reduce the side lobe levels for the antenna array designers. On the other hand, the beamwidth of the main beam tends to widen in case of suppression of side lobe levels. Thus, the main aim of our array design examples in this paper is to reduce MSLLs while the BW of the main beam is fixed to a determined value. Two additional criteria are also considered in our simulations: DRR values and the physical sizes of the antenna arrays. DRR is the ratio of the maximum to minimum amplitude values of the array elements. The lower DRR value is the better for the antenna array applications. The smaller size of antenna array is preferred since the physical sizes of antennas matter for the practical considerations. Consequently, DRR and the circumference values of the circular arrays are also tried to reduce in the simulations presented in this paper.The main purpose of the first six examples is to obtain optimal amplitude and position values of non-uniform circular antenna arrays with the low sidelobe level and fixed narrow main beamwidth. But for the first three examples, the circumference size of circular array and DRR are also considered when obtaining element position and amplitude values of the circular array, respectively. Because the smaller values of the circumference size and DRR are preferred for some practical considerations. Additionally, the patterns obtained with the parallel SOA by using array factor in Eq. (11) are compared with those of GA [9] and PSO [10]. In the fourth, fifth and sixth examples, the amplitude and position values of non-uniform circular antenna arrays with the low sidelobe levels and fixed narrow beamwidth are optimally determined by the parallel SOA without circumference size and DRR restrictions. The results achieved by the parallel SOA for these examples are also compared with those of SA [12] and BBO [13].In the first example, consider the case of a circular antenna array with 8 isotropic elements. The maximum iteration number is chosen as 500 for all process in the slaves. Fig. 5shows the pattern obtained by the parallel SOA as compared to GA [9] and PSO [10]. Table 1shows the comparative results which involve the BW, MSLL, circular array circumference, and DRR values. From Fig. 5 and Table 1, it can be seen that MSLL and BW values are better than those of GA and PSO. All side lobes of the pattern obtained by the parallel SOA are at a level less than −11.11dB. It is also clear that the size of the circular array achieved by the parallel SOA is better than those of GA and PSO. It can also be seen that DRR value obtained by the parallel SOA is smaller (better) than those of GA and PSO.For the first example, the optimization process is completed by the parallel SOA in 43s. In order to compare the parallel SOA and original SOA, both versions of the algorithm were run 30 times for the first example. Fig. 6shows the average results of the convergence curves obtaining by the original SOA and the parallel SOA in 43s. According to Fig. 6, the parallel SOA has two main advantages over the original SOA. The first is that the parallel SOA can converge to the optimal solution faster than the original SOA. The original SOA clearly falls behind the parallel SOA at each iteration step. The second advantage is that the final cost function value achieved by the parallel SOA is better (lower) than that of the original SOA in the same time duration.The antenna element number is selected as 10 in the second example. The resultant patterns obtained by using the parallel SOA, GA [9] and PSO [10] are shown in Fig. 7. It is clear from Fig. 7 and Table 1 that MSLL and BW values are better than those of GA and PSO. All side lobes of the pattern obtained by the parallel SOA are at a level less than −12.50dB. While DRR value obtained with SOA is better than those of GA and PSO, the circumference obtained with the parallel SOA is slightly larger than that of GA and PSO.In the third example, the antenna element number is chosen as 12. The resultant patterns obtained by using parallel SOA, GA [9] and PSO [10] are shown in Fig. 8. It is apparent from Fig. 8 and Table 1 that the results obtained by SOA are better than those of GA and PSO, in terms of BW, MSLL, circumference, and DRR. All sidelobes of the pattern obtained by SOA are at a level less than −14.11dB. The element position and amplitude values determined by the parallel SOA for the patterns given in Figs. 5, 7 and 8 are tabulated in Table 2.After the first three examples, it can be said that when the number of antenna array elements is increased, it can be easier to achieve not only the lower sidelobe level but also the narrower beamwidth for a circular antenna array. Similarly, the solution space can be expanded by removing the circumference and DRR restrictions, therefore the expanded solution space allows achieving lower sidelobes and narrower beamwidths. In this context, the fourth, fifth and sixth examples are examined again as the same optimization problems in the first, second and third examples without the circumference and DRR restrictions, respectively. The radiation patterns obtained by the parallel SOA in the fourth, fifth and sixth examples are illustrated in Figs. 9–11, respectively. These figures also contain the radiation patterns obtained by SA [12] and BBO [13]. The works in Refs. [12,13] similarly did not consider the circumference and DRR restrictions. The BW and MSLL values achieved by the parallel SOA, SA [12] and BBO [13] are tabulated in Table 3. It was stated in Ref. [13] that the maximum improvement using BBO is 42.2% in terms of SLL reduction and is 50% in terms of the beamwidth as compared to GA [9] for N=10 elements. It can be seen in Figs. 9–11 and Table 3, the results obtained with parallel SOA are clearly better than those of BBO [13] as well as GA [9], PSO [10] and SA [12]. As expected, the overall performances of the fourth, fifth and sixth examples are better those of the first three examples, because the larger solution alternatives gives the larger degrees of freedom for the solution space. The element position and amplitude values determined by the parallel SOA for the patterns given in Figs. 9–11 are tabulated in Table 4.In the last three examples in our paper, the element amplitudes of the equally spaced concentric circular antenna array with N1=4, N2=6 and N3=8 elements, in the same way as in Ref. [15], are optimized with the parallel SOA for achieving a radiation pattern with the low sidelobe levels and narrow beamwidths. The inter-element spacings are 0.55λ, 0.606λ and 0.75λ for the innermost, middle and outermost rings, respectively. The sidelobe levels and beamwidths obtained with binary coded GA (BGA), real coded GA (RGA) and canonical PSO (CPSO) in Ref. [15] are taken as the reference point for the last three examples in this paper. The parallel SOA is used to attain better sidelobe level and beamwidth values than the results achieved by BGA, RGA and CPSO in Ref. [15]. Especially, obtaining lower sidelobe levels is the main goal while the BW values are about the same as those of BGA, RGA and CPSO in Ref. [15]. The patterns of parallel SOA are compared with those of BGA, RGA, and CPSO in Ref. [15] in Figs. 12–14. Table 5tabulates the MSLL, BW and DRR values of radiation pattern obtained by SOA used in this paper and those of BGA, RGA and CPSO in Ref. [15]. From Figs. 12–14 and Table 5, it is clear that the results obtained by the parallel SOA are better than those of BGA, RGA and CPSO in Ref. [15] in terms of the low sidelobe level, the narrow beamwidth and DRR values. The element amplitude values determined by the parallel SOA for the patterns given in Figs. 12–14 are listed in Table 6.The results depicted in Figs. 5, 7–14 show that the parallel SOA proposed in this paper can accurately obtain the desired patterns of the non-uniform circular and equally spaced concentric circular antenna arrays for the low values of sidelobe level and the fixed value of main beamwidth. From MSLL and BW points of view, the performances of the patterns are very good. The size of circular antenna array and DRR values are also good enough for the non-uniform circular antenna arrays. For the equally spaced concentric antenna array examples, DRR values achieved by using the parallel SOA are better than those of BGA, RGA and CPSO in Ref. [15]. It can be concluded that the parallel SOA can be used for antenna array design problems as a good alternative to other techniques.

@&#CONCLUSIONS@&#
