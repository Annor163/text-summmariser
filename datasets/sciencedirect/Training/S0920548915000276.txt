@&#MAIN-TITLE@&#
ASE: A comprehensive pattern-driven security methodology for distributed systems

@&#HIGHLIGHTS@&#
Incorporating security features when designing distributed systems is a challenge.We propose ASE, a unique pattern-driven security methodology for this purpose.We describe ASE in detail, emphasizing the analysis and design life-cycle phases.We illustrate and evaluate ASE by designing a realistic distributed software system.

@&#KEYPHRASES@&#
Secure software engineering,Security methodologies,Distributed systems security,Security patterns,Security solution frames,

@&#ABSTRACT@&#
Incorporating security features is one of the most important and challenging tasks in designing distributed systems. Over the last decade, researchers and practitioners have come to recognize that the incorporation of security features should proceed by means of a structured, systematic approach, combining principles from both software and security engineering. Such systematic approaches, particularly those implying some sort of process aligned with the development life-cycle, are termed security methodologies. There are a number of security methodologies in the literature, of which the most flexible and, according to a recent survey, most satisfactory from an industry-adoption viewpoint are methodologies that encapsulate their security solutions in some fashion, especially via the use of security patterns. While the literature does present several mature pattern-driven security methodologies with either a general or a highly specific system applicability, there are currently no (pattern-driven) security methodologies specifically designed for general distributed systems. Going further, there are also currently no methodologies with mixed specific applicability, e.g. for both general and peer-to-peer distributed systems. In this paper we aim to fill these gaps by presenting a comprehensive pattern-driven security methodology – arrived at by applying a previously devised approach to engineering security methodologies – specifically designed for general distributed systems, which is also capable of taking into account the specifics of peer-to-peer systems as needed. Our methodology takes the principle of encapsulation several steps further, by employing patterns not only for the incorporation of security features (via security solution frames), but also for the modeling of threats, and even as part of its process. We illustrate and evaluate the presented methodology in detail via a realistic example – the development of a distributed system for file sharing and collaborative editing. In both the presentation of the methodology and example our focus is on the early life-cycle phases (analysis and design).

@&#INTRODUCTION@&#
Incorporating security features is one of the most important and also one of the most challenging tasks in designing distributed systems [1,2]. Over the last decade, researchers and practitioners have come to recognize that the incorporation of security features should proceed by means of a structured, systematic approach, combining principles from both software and security engineering [3–7]. Such systematic approaches, particularly those implying some sort of process aligned with the software development life-cycle, are termed security methodologies[8]. There are a number of security methodologies in the literature, of which the most flexible and most satisfactory from an industry-adoption viewpoint are methodologies that encapsulate their security solutions in some fashion (see [8]), especially via the use of security patterns[9,10]. While the literature presents over a dozen such pattern-driven security methodologies, both young and mature [8,11] – possessing a range of valuable and beneficial features – with respect to system applicability, these methodologies are uncomfortably positioned at two extremes of a spectrum: either they are highly specific, or highly generic. This makes such methodologies inadequate for project situations requiring the development of general distributed systems, since the methodologies will either lack provisions for the specific security concerns of general distributed systems or different types of distributed systems (too generic) [5]; or they will be incompatible with the features of the target system (too specific) [11] – whether because of the processes involved (e.g. PWSSec [12]); or because of the conceptual artifacts used (e.g. the methodology of Delessy and Fernandez [13]).At present, there are no pattern-driven security methodologies specifically designed for general distributed systems – i.e. positioned somewhere in the middle of the specificity–generality spectrum referred to above (we are considering here exclusively methodologies using security patterns, not patterns interpreted as architectures or components as in the work of [14]). Going further, there are also currently no methodologies in the literature with mixed specific applicability [11] – for example, for both general and peer-to-peer distributed systems; or for general and web-based applications.In this paper we aim to fill the latter gaps, by presenting a comprehensive pattern-driven security methodology specifically designed for general distributed systems, named ASE, which is also capable of taking into account the specifics of peer-to-peer systems as needed. ASE emphasizes the early life-cycle phases (analysis and design) – since this is where all security countermeasures are planned [2], as well as where, according to Jaquith [15], approximately half of all major security flaws can be prevented (cf. [16]); and takes the principle of solution encapsulation several steps further, by employing patterns not only for the incorporation of specific security attributes (via security solution frames), but also for the modeling of threats, and even as part of its process. Through its distributed-systems-specific set of conceptual artifacts and its comprehensive process, ASE is capable of addressing all or most of the core distributed systems security concerns, providing developers with detailed guidance on how and where to introduce relevant security features into a system's architecture during development.Besides being a self-contained security methodology, ASE is also an example of a re-engineered methodology, arrived at by applying the approach to engineering security methodologies presented in [17] in its tailoring capacity – with the methodology of Fernandez et al. [18] as a base methodology. From the latter standpoint, if a security methodology is considered a solution to the problem of introducing security into software systematically, and the aforementioned engineering approach is seen as a meta-solution capable of generating solutions, then ASE can be seen an example of just one particular solution, with its own set of beneficial features.The rest of this paper is structured as follows. In Section 2 we provide some brief background on security methodologies as well as an overview of the construction of ASE. We describe ASE in depth in Sections 3 and 4, focusing on the activities relevant to the early life-cycle phases (especially design). In Section 5 we illustrate and evaluate ASE in detail via a realistic example, namely, the development of a distributed system for file sharing and collaborative editing. In Section 6 we consider related work; and finally, in Section 7 we conclude and discuss future directions.

@&#CONCLUSIONS@&#
