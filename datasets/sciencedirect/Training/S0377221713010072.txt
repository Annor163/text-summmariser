@&#MAIN-TITLE@&#
A constructive aisle design model for unit-load warehouses with multiple pickup and deposit points

@&#HIGHLIGHTS@&#
A constructive warehouse design model and an encoding system are developed.New inspirational aisle designs are proposed for unit-load warehouses.The improved two cross aisle designs offer 5–12% improvement over traditional designs.Traditional aisle designs seem to be a good layout when P&D points are highly dispersed.

@&#KEYPHRASES@&#
Facilities planning and design,Aisle design,Warehouse design,Single-command operation,Layout,Randomized storage,

@&#ABSTRACT@&#
We develop a network-based warehouse model of individual pallet locations and their interactions with appropriate cross aisles in order to evaluate the expected travel distance of a given design. The model is constructive in that it uses Particle Swarm Optimization to determine the best angles of cross aisles and picking aisles for multiple, pre-determined pickup and deposit (P&D) points in a unit-load warehouse. Our results suggest that alternative designs offer reduced expected travel distance, but at the expense of increased storage space. The opportunity for benefit also seems to decline as P&D points increase in number and dispersion.

@&#INTRODUCTION@&#
In global logistics systems, warehousing plays a critical role in ensuring high levels of customer service and overall supply chain performance. Among warehouses in a supply chain network, unit-load receiving and shipping, in which one item or pallet is carried at a time, often makes up a considerable portion of warehouse operations, especially in 3rd-party distribution centers. Among operations costs in a warehouse, labor cost is significant because workers in distribution centers spend their time traveling to store or retrieve items (sometimes traveling empty). Also, because 3rd-party distribution centers pay their forklift drivers for work-hours and bill their customers for two movements (receiving and shipping), reducing travel time and increasing the number of handles per hour are two cornerstones of running a warehouse efficiently and profitably (Bartholdi & Hackman, 2011).In traditional unit-load warehouses, forklift drivers travel among aisles, where cross aisles are arranged at right angles to parallel picking aisles, to reach a storage location (see Fig. 1). Because of rectilinear travel paths in traditional warehouses, inserting an orthogonal cross aisle offers no advantage for single-command travel distance to and from a pickup and deposit (P&D) point at the bottom or top of the warehouse (Roodbergen & de Koster, 2001). However, if there is more than one P&D location, and at least one of them is placed on the right or left side of the warehouse, a cross aisle is needed to facilitate travel (see Fig. 1b and c). Additionally, it is not uncommon that warehouses in industry have multiple entry points to access the storage area. For example, one side of the warehouse might have receiving docks and the other shipping docks. Or, receiving and shipping docks might be on each side of the warehouse.Gue, Ivanovic̀, and Meller (2012) applied the idea of non-traditional designs to unit-load warehouses with multiple P&D points on one side. They inserted two angled cross aisles that form “modified Flying-V” and “Inverted-V” designs (Fig. 2). When P&D points are located at the front of each picking aisle, which is essentially a worst-case scenario, the modified Flying-V design can reduce travel by approximately 3–6%. The Inverted-V offers less than 2% in savings compared to reasonably-sized, equivalent traditional warehouses. Additionally, the authors suggested that if P&D points are concentrated toward the center of the bottom of the warehouse, the benefit of the Flying-V is greater.Although Gue et al. (2012) considered multiple P&D points for non-traditional aisles, they considered only designs with picking aisles vertical and parallel to each other. By inserting a number of cross aisles, Gue and Meller (2009) and Öztürkoğlu, Gue, and Meller (2012) showed that the expected travel distance between a centrally located P&D point and a storage location can be reduced by as much as 20%, depending on the size of the warehouse. Öztürkoğlu et al. (2012) showed that allowing picking aisles and cross aisles to take any angle provides additional reduction in expected travel distances. In this paper, we take these ideas further to propose new aisle designs for unit-load storage spaces that have multiple access locations. Additionally, whereas Gue et al. (2012) focused on multiple P&D points on only one side of the warehouse, we consider multiple P&D points distributed on one side and on different sides of the warehouse. To produce these designs, we develop a network-based model of the warehouse, which can be encoded as a simple set of real numbers. Our models embed and manipulate this encoding to search a wide range of aisle configurations.In the next section, we review relevant literature in non-traditional warehouse designs and multiple P&D points in warehouses. In Section 3, we discuss underlying assumptions of a general warehouse network model, which we present in Section 4. Then in Section 5, we discuss our implementation of Particle Swarm Optimization. In Section 6, we introduce new warehouse designs for some specific cases differentiated by the locations of P&D points. In the final section, we summarize our findings.The first mention of non-orthogonal aisle designs came from Moder and Thornton (1965); Francis (1967a); Francis (1967b); Berry (1968) and White (1972). White (1972) investigated “Euclidean efficiencies” by inserting radial aisles into a continuous warehouse space. Gue and Meller (2009) proposed two non-traditional designs, the Flying-V and the Fishbone. Pohl, Meller, and Gue (2009a) showed that the optimal placement of a “middle” orthogonal cross aisle in traditional designs is slightly beyond the middle for dual-command operations. Pohl, Meller, and Gue (2009b) studied the Fishbone design for dual-command operations (also called task interleaving). They showed that the Fishbone design offers a reduction in expected travel distance compared to several common traditional designs. They also offered a modified Fishbone design for dual-command operations. Pohl, Meller, and Gue (2011) analyzed three traditional designs, as well as Fishbone and Flying-V designs, under turnover-based storage policies and both single- and dual-command operations. Randhawa, McDowell, and Wang (1991) evaluated the performance of a unit-load AS/RS with respect to throughput and waiting time for two different configurations of dual-dock layouts. Yano, Bozer, and Kamoun (1998) discussed decentralized receiving in a manufacturing assembly facility. They developed an optimization-based procedure to determine some variables including multiple access points to the building so as to minimize the cost. Eisenstein (2008) considered dual depots in a discrete line order picking system to minimize required walking distance.We assume a randomized storage policy as Öztürkoğlu et al. (2012) and Gue and Meller (2009) did, because of its simplicity and popularity in industry, and due to higher utilization of storage locations (Petersen, 1999). With this policy, pallets are stored in the closest-available location, as opposed to reserved locations in a dedicated storage policy. The probability of picking or storing any pallet in the warehouse is the same. For ease of representation, storage locations have a square-shaped footprint, and one pallet length is the adopted measure of distance.We assume that picking aisles within regions determined by cross aisles are parallel to each other. Picking aisles and cross aisles can take on any angle. Contrary to the model of White (1972), we take into account aisle width and its effect on travel distances. Each picking and cross aisle is assumed to be wide enough for a two-way travel and have a width of 3 pallet locations. We assume standard, single-deep pallet rack, although our model could easily be modified for double-deep rack or deeper lane storage. The model allows for no more than two angled cross aisles because the relative benefit of inserting a new cross aisle on expected travel distance decreases due to increasing space requirement for equal storage capacity. Cross aisles are not allowed to intersect, but they can originate from the same point. This limitation is serious, but is also necessary for computational reasons. As we show in Section 5, the number of cases to consider for non-intersecting cross aisles is already large.In a warehouse, P&D points could be places that have palletizing or shrink-wrap machines for packing and shipping, or pick lists for workers. All travel is from the P&D points to any location in the warehouse (i.e., there are no zones). Because we study on designs for different locations of multiple P&D points that can be seen in industry, we assume that there are no storage racks along the sides of the warehouse to allow for P&D points along the periphery of the warehouse. We call these available spaces on the periphery of the warehouse “side cross aisles” so that they can facilitate travel between locations. One or some of these available spaces on the periphery might be sometimes needed by building safety codes, especially related to the several fire codes (Health & Safety Executive, 2007; Command, 2012). In unit-load warehouses, the most common put-away and retrieval operations are single- and dual-command operations (Roodbergen & Vis, 2009). Only one unit-load is carried at a time in single-command operation. In dual-command operation, a worker moves a pallet for put-away operation first, then move to another location for retrieving a pallet from another location before come back to the P&D point. In most unit-load warehouses, single-command travel is very common because two of the three dual command operation is single-command (from and back to the P&D point) and replenishment operations are mainly done by single command operation. Therefore, we assume a single-command operation, comprised of travel to a random storage location and back to the P&D point. In the best case, the returning P&D point is selected as the closest point to the visited storage location. However, this requires an efficient warehouse management system to manage assigning workers and storage locations to the appropriate P&D points. Additionally, every warehouse has different policies for use of P&D points. Therefore, in our study, we assume that each P&D point is selected randomly with equal probability, even though our model, which we discussed in Section 5, is capable of handling different flow rates from each P&D point. Because aisles are assumed to be wide enough to allow passing and two-way travel, and workers travel to only one location during their trip, we assume that the possibility of congestion within aisles can be ignored.The warehouse network model consists of four main modules, which comprise the fundamental classes of a software tool used to generate a warehouse layout and its network, to evaluate the cost of the design, and to search for the parameters that minimize a given cost function.In this module the warehouse as an entity is defined by the width (W) and depth (D) of the space, the width of the cross and picking aisles (a), the location of P&D points, the number of cross aisles, and the angles of cross and picking aisles in a suitable coordinate system. P&D points are placed along the side cross aisles. A sample design is presented in Fig. 3.We use the warehouse representation to construct a graph representing the whole warehouse as a network (Fig. 3). The nodes of the network include all of the potential P&D points, all intersections of the aisles, and an access node for each of the storage locations. P&D points are placed on the center lines of the side cross aisles. The network is constructed with non-negative edge lengths representing the distances between connected nodes. An access node for a storage location is placed on the center line of the appropriate picking aisle to provide access to the center of the corresponding storage locations. The edge length for two connected neighbor access nodes, representing storage locations in the same rack, is one pallet (unit) length. Two access nodes on opposite racks, representing opposite storage locations, are connected, and the edge length is zero because they are actually served from the same coordinate.In this module we calculate the distance between a P&D point and all storage locations by computing the shortest paths with Dijkstra’s algorithm. Dijkstra’s algorithm searches the graph with non-negative edge path costs to find the path from the source node (P&D) to the target node (storage location) with the lowest cost (distance). The worst case running time for the algorithm on a graph with n nodes and m edges isO(n2)(Golden, 1976).The expected travel distance to pick an item in a warehouse with k P&D points and n total storage locations isE[C]=∑i=1k∑j=1ndijpin=1kn∑i=1k∑j=1ndij,wheredijis the shortest distance between the ith P&D point and thejth storage location, andpiis the probability of choosing the ith P&D point. In our model,pi=1/kbecause we assume each P&D point is used with the same probability.Proposition 1E[C] is the same as two-way expected travel distance if the returning P&D point is selected randomly with equal probability.Let I be a set of k P&D points.piis the probability of choosing the ith P&D point as a source node.p(r∣i)is the probability of choosing the returning P&D point r when the source ith P&D point is known. The expected travel distance to pick an item in this system isE[RC]=∑i=1k∑r=1k∑j=1n1ndij+drj2pip(r∣i),wherepi=1/kandp(r∣i)=1/k, because the returning P&D point might be the same as the source node. Hence, we can writeE[RC]=12nkk∑j=1n∑i=1k∑r=1kdij+drj=12nk2∑j=1n∑i=1kkdij+∑r=1kdrj=12nk2∑j=1n∑i=1kkdij+∑i=1kdij,where∑i=1kdij=∑r=1kdrjdue to the same probability of visiting P&D points. Finally,E[RC]=12nk2∑j=1nk∑i=1kdij+∑i=1k∑i=1kdij=12nk2∑j=1nk∑i=1kdij+k∑i=1kdij=2k2nk2∑i=1k∑j=1ndij=1kn∑i=1k∑j=1ndij,which is equal to E[C]. □Therefore, in our model we only calculate one-way expected travel distance to pick an item from each P&D point.We use a Particle Swarm Optimization algorithm to minimize the objective function. We discuss details in the next section.Because the start and end points of cross aisles can be on any side of the warehouse, there are 12 two cross aisle cases, as we discuss below (see Section 5.1). Considering possible angles of picking aisles in each region results in hundreds of cases. Even though each case can be solved separately, the problem becomes intractable when different start and end points of cross aisles and different locations of P&D points are considered. Additionally, because simply evaluating the cost of a design requires solving multiple one-to-many shortest path problems from multiple P&D points, we cannot derive a closed-form distance expression as an objective function to be minimized. Therefore, we choose a meta-heuristic solution procedure to search for the optimal values of variables that minimize the expected travel distance. Specifically, we use an implementation of Particle Swarm Optimization (PSO).PSO, which was first introduced to optimize continuous nonlinear functions by Kennedy and Eberhart (1995), is one of the latest swarm intelligence methods inspired by nature. Its development was based on observations of social interaction and communication of flocks of birds and schools of fish. In PSO, each member is called a particle, and each particle searches the multi-dimensional function space with a specific velocity. Two aspects of this initial metaphor, individual learning as a cognitive factor and learning from a social group as a social factor, refer to local and global search, respectively (Dang, Guibadj, & Moukrim, 2013). By individual learning, each particle can memorize its best previous position, called personal best. By learning from a social group, particles share all the information about their personal best points that they have received so far with their neighbor particles. The most common neighborhood topologies used in PSO implementations are Star and Ring Toplogies (Yapicioglu, Smith, & Dozier, 2007). While evey particle is connected to all other particles in the population in Star Topology (global neighborhood), the neighborhood size is limited in a Ring Topology, usually a size of three particles. Particles then move toward their own personal best, and the best particle, called global best, which is the best among all particles in the neighborhood. By using personal and global bests, each particle adjusts the direction and the magnitude of its velocity for movement in the space.As with other meta-heuristics, PSO is designed to find a unique, possibly optimum solution. Advantages of a basic PSO algorithm include its simple structure, ease of implementation, speed in solving nonlinear, non-differentiable multi-model problems, and robustness (Tasgetiren, Liang, Sevkli, & Gencyilmaz, 2007). Additionally, its ability to handle continuous variables is another advantage for our problem.We follow three steps to formulate the problem and to search the solution space quickly. The first step is an encoding, which in our case is a simple vector of real numbers representing a warehouse with a number of angled cross aisles and angled picking aisles, as well as a number of P&D locations. There is a one-to-one mapping between a given encoding and a design, which ensures that a manipulated encoding can be translated back into a warehouse design. The elements of the encoding are:•A linear cross aisle is represented with start (S) and end (E) points of its center line, which define its angle in a given suitable coordinate system. A set of cross aisles can be represented as a list of such pairs.Picking aisles in any resulting region can be represented by their angle0⩽α⩽π(measured in radians).To simplify the encoding, start and end points of a cross aisle are represented by real numbers in a single-dimensional coordinate system (Fig. 4). The origin is at the upper-left corner and is defined as 0 and 4 in order to make a closed loop for the perimeter of a rectangular warehouse. Lower-left, lower-right and upper-right corners are defined as 1, 2 and 3, respectively. When evaluating the cost of a design, we convert the encoding of the cross aisle to a point (x,y) in the coordinate system. Additionally, P&D points are fixed at their given positions in the coordinate system, which are along the side cross aisles that build the perimeter of the warehouse rectangle.To narrow the search space, some inappropriate cases, such as having the start and end points of a cross aisle on the same side of the warehouse, and duplication (switching the start and end) are forbidden. For the one cross aisle model, there are 6 cases representing the possible orientations of the cross aisle (Fig. 4). Because cases 3, 4 and 6 are symmetric cases of case 1, we consider only cases 1, 2 and 5 as subproblems. In these subproblems,S∈[0,1)andE∈(1,2],S∈[0,1)andE∈[2,3],S∈[1,2]andE∈[3,4], respectively.For a warehouse with two non-intersecting cross aisles, there are 34 cases, which can be reduced to 12 due to symmetry (see Fig. 5). We divide these 12 main cases into 3 subproblems as described in Fig. 6to narrow the search space and to control the movement of the cross aisles. In the two cross aisle model,S1andE1are the start and end points of the center line of the first cross aisle, as well asS2andE2of the second cross aisle. Because we assume non-intersecting cross aisles, upper and lower limits for start and end points of cross aisles conform to the values in Table 1.Because the model assumes at most two non-intersecting cross aisles, there are at most three regions (Fig. 7). AnglesαR,αLandαC(if present) represent the angles of picking aisles in the right, left and central regions. For an example, the encoding for a two cross aisle model is{αL,αC,αR,S1,E1,S2,E2}.The second step is evaluation, in which we evaluate the performance of a design represented by a specific encoding (a vector of design parameters) on expected travel distance of a pick or stow. For this, we use the graph-based network model of the warehouse discussed in the previous section.The third step is to search encodings to find the lowest possible expected travel distanceE[C]for each subproblem in the one and two cross aisle models. For this task, we use the PSO algorithm. Finally, we select the aisle design that has the lowestE[C]among solutions of the subproblems with respect to the one and two cross aisle models.In the simple PSO algorithm, each particle represents a solution that moves toward its previous best position and the global best position found in the population so far. After initializing the parameters and generating the initial population randomly, the algorithm evaluates each particle by the fitness function. After evaluation, each particle is updated with its position, velocity and fitness value. If there is an improvement in its fitness value, it updates its personal best. The best particle in the population is used to update the global best. Next, the velocity of the particle is updated by using its previous velocity, personal best, and the global best to move the particle to a potentially better place in the search space. By doing these steps repeatedly, the algorithm searches the space until it is terminated by a stopping criterion.The structure of the PSO algorithm is basically the same as the modified PSO by Shi et al. (1988a), Shi and Eberhart (1998b). The basic elements of our algorithm are particles, population, particle velocity, personal best, global best, inertia weights, coefficients and maximum velocity.Population and Subproblem: F is the set of s subproblems,F={I1,I2,…,Is}.Isis also the set of r particles at iterationt,Ist={X1st,X2st,…,Xrst}.Particles:Xistdenotes the ith particle in thesth subproblem at iteration t. It is represented by d dimensions:Xist={xis1t,xis2t,…,xisdt}, wherexisdtis the position or the value of thedth dimension of theith particle in thesth subproblem. Dimensions can be thought of as model variables or parameters.Velocity of particles:Vistis the set of d velocities of particle i in thesth subproblem at iterationt,Vist={vis1t,vis2t,…,visdt}. Each dimension of each particle moves in the search space with a distancevisdtat each iteration.Personal best:Pisis the best previous position, which gives the best fitness value of theith particle in thesth subproblem, andPis={pis1,pis2,…,pisd}wherepisdis the best value of dimension d of theith particle in thesth subproblem so far.Global best:Gs={gs1,gs2,…,gsd}is the best particle among all the particles in thesth subproblem, wheregsdis the best value of dimension d inGs.Inertia weights: Shi et al. (1988a), Shi and Eberhart (1998b) introduced an inertia weight to the algorithm. It is denoted as w and is used to balance global and local searches. It can be a positive constant or a function of time or iteration. A larger w favors the global search, while a smaller w favors the local.Coefficients and maximum velocity: Coefficientsc1andc2are the weights for the “cognitive” and “social” parts of the velocity update equation given in (1). To control the explosion of velocities and to provide stability, there are two other mechanisms: maximum velocityVmaxand a constriction coefficient (K). For the quality of the search, Shi et al. (1988a) showed the effect ofVmaxthat determines the maximum change one particle can undergo in its positional coordinates during an iteration. Clerc and Kennedy (2002) showed that the following value of K provides rapid convergence:K=22-ϕ-ϕ2-4ϕ,ϕ=c1+c2>4.Also,r1andr2are uniformly distributed random numbers [0,1] that influence the movement toward personal or global best. Particles are updated based on the equations:(1)visdt=Kwt-1visdt-1+c1r1pisd-xisdt-1+c2r2gsd-xisdt-1,(2)xisdt=visdt+xisdt-1.

@&#CONCLUSIONS@&#
The main contribution of our work is to show that unit-load warehouses with multiple, highly dispersed P&D points can benefit from alternative aisle designs. For example, in a warehouse with two P&D points at the bottom (representing, say, two stretch-wrap machines), a two cross aisle solution offers 9–12% benefit over a traditional design. For two P&D points on adjacent sides, a new design offers 5–6% benefit. The design problems we have considered in this paper are nominal rather than actual, and are intended to give insight into the potential benefit of non-traditional aisle designs for unit-load warehouses having multiple points of entry and exit.The results also suggest that the potential benefit of alternative aisle designs depends highly on the number and locations of P&D points. It appears that the greater the number and dispersion of P&D points, the less the opportunity for benefit, which is consistent with the intuition that cross aisles are most effective when they facilitate travel to a “hot spot” of worker activity, such as a stretch-wrap machine or small group of dock doors (Gue et al., 2012). Said another way, adding a cross aisle to facilitate flow to one P&D point almost always disturbs flow to another. The challenge is to add aisles reflecting this tradeoff.A second contribution is a constructive warehouse design model that could be used by the research and practicing communities to solve their respective problems. The ability to accommodate a highly dispersed collection of P&D points makes the model more general than existing constructive design models (Gue & Meller, 2009; Öztürkoğlu et al., 2012). Although we have focused exclusively on minimizing expected travel distance to a set of equally-important P&D points, the model could be modified to accommodate other objectives.It is important to note that, with the possible exception of Design D1, none of the designs produced by the model were predicted by the authors’ intuition, and some were pleasantly surprising (A2, B2, and C2, in particular). That the model would produce designs beyond the user’s imagination is strong justification for its utility.Finally, embedded in the design model is a simple encoding for one- and two-cross aisle warehouses consisting of a simple set of real numbers. This seemingly small contribution was actually an important solution to a previously perplexing design problem—how to represent the physical aisle structure of a warehouse in a way that can be easily manipulated to generate candidate designs. Our use of the encoding to design unit-load warehouses is, we hope, just the first of a collection of papers in warehouse design by the research community.