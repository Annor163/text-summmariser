@&#MAIN-TITLE@&#
Improving the robustness in railway station areas

@&#HIGHLIGHTS@&#
Minimizing the real travel time is introduced as a practical robustness measure.Optimizing the train routing, all potential headway conflicts are considered.An interaction between routing and timetabling is essential in large stations.Different scenarios can be optimized, analyzed and compared with our model.

@&#KEYPHRASES@&#
Transportation,Robustness,Railway timetabling,Train routing,Bottleneck scheduling,Mixed integer linear programming,

@&#ABSTRACT@&#
In order to improve the robustness of a railway system in station areas, this paper introduces an iterative approach to successively optimize the train routing through station areas and to enhance this solution by applying some changes to the timetable in a tabu search environment. We present our vision on robustness and describe how this vision can be used in practice. By introducing the spread of the trains in the objective function for the route choice and timetabling module, we improve the robustness of a railway system. Using a discrete event simulation model, the performance of our algorithms is evaluated based on a case study for the Brussels’ area. The computational results indicate an average improvement in robustness of 6.2% together with a decrease in delay propagation of about 25%. Furthermore, the effect of some measures like changing the train offer to further increase the robustness is evaluated and compared.

@&#INTRODUCTION@&#
Providing a good passenger service is an important task of a railway operator and an infrastructure manager. One of their main concerns is to bring all passengers from their origin to their destination in a travel time as close as possible to the published travel time. Although the prescribed schedule is conflict-free, there are always unavoidable disturbances that cause conflicts; definitely around large cities or, more generally, in the neighborhood of railway bottlenecks. In this paper, the timetable planning for and the train routing through bottlenecks is considered. In general, the assignment of routes through railway station areas happens after the timetable is created. This timetable is constructed based on a macroscopic model, while the routing of a train towards a platform is planned using a microscopic model considering all tracks and switches in the station area. Accounting for robustness while designing an appropriate routing is only considered in a small number of publications. Nevertheless, the impact of a robust routing solution is large as is indicated in Caimi, Burkolter, and Herrmann (2005) and Kroon and Maroti (2008). The results in this paper confirm this statement. Next to that, we show that applying our methodology outperforms the approach of Caimi et al. (2005) for the case study of Brussels.In this paper, the focus lies on the planning phase in which the schedule is to be improved. No real-time conflict resolution actions are considered. Starting from a given timetable, the question we want to address is: How can we improve the robustness around large railway stations? In order to answer this question, an objective function that maximizes the time span between any two trains is defined and the way trains are routed to the platforms is optimized in the scope of this objective. In a next step, small modifications to the timetable to further increase some time spans are considered. The results in this paper indicate that exploring the interaction between the routing and scheduling of trains in the surroundings of a bottleneck area, is promising for achieving an improved robustness. Increasing time spans is a commonly applied approach to make timetables more robust (Caimi et al., 2005; Kroon, Huisman, & Maroti, 2008). However, large time spans do not necessarily imply robustness. We define robustness as a broader concept, as is explained in the discussion about robustness below. Nevertheless, it is clear that increasing a time span between two trains helps to avoid conflicts between these trains, which is beneficial for the robustness of a system.The performance of our algorithm is tested on the compact and highly used network of the Brussels’ area, the heart of the Belgian railway system. It has three major stations: South (19 through platforms), Central (6 platforms), and North (12 platforms) which are lined up on a 6-track line, see Fig. 1for a microscopic overview of the infrastructure. Next to the tracks towards the Central station and a shunt yard, each of the outer stations has four in- and outbound orientations. Trains coming from all over the country run through Brussels and dwell at all three stations forming a crisscross of lines with many merging and intersecting actions in the switch zones between the stations as a consequence. In total there are 84 trains per hour during rush hour making the capacity utilization nearly saturated. Passenger flows, as computed in Sels, Dewilde, Cattrysse, and Vansteenwegen (2011) or counted in 2009 (Stynen, 2010), indicate that the Central station is the busiest station in Belgium with an average of more than 70,000 passengers each day. The South and North station are ranked as, respectively, second and fourth most busiest stations of the country. Although it is the busiest station, capacity limitations force the planned dwell time in the Central station to be limited to one minute which is nearly always insufficient in practice. This results in dwell delays of at least half a minute on average.Because of the high probability of delays and their large impact on the rest of the network, a robust planning for the Brussels’ area is essential. In this paper, we present some methods to improve the robustness in Brussels, or more generally, in a complex and highly used station area. Therefore, we make the assumption that changes to the local planning do not harm the feasibility on the less occupied network outside the considered area or at other stations.To improve the robustness of the railway system in Brussels even more, we suggest some measures like changing the stopping pattern, a reduction of the number of trains that runs through Brussels, or the creation of extra platforms for the Central station. Using our approach, the impact of these measures on robustness and the amount of knock-on delay can be estimated. The presented work is conducted in cooperation with the Belgian railway infrastructure manager Infrabel.Throughout this paper, we define the station area as the set of stations that lie within this area, together with their platforms and the tracks and switches connecting the incoming lines with the different platforms and the outgoing lines. An overview of the station area of Brussels is given in Fig. 1. The dashed line indicates what we call a route through the station area. Next to the notion of a station area, we also define the minimal time span, or just time span, between two trains as the smallest delay that causes these trains to conflict in the station area. Trains ride from one block section to another block section and occupy these block sections for a certain (blocking) time. The interval during which a block section is idle between the passage of two trains is what we call a time span. The minimal time span between two trains is then the minimum of all these time spans over all common sections. We say that a routing solution or a train schedule is feasible or conflict-free if all the minimal time spans between all pairs of trains are nonnegative.As mentioned above, two aspects of the planning within a station area are considered in this paper. The train routing problem is about finding a route for each train through the considered network, in our case a station area. In what we call the timetabling problem, we keep the routing solution but allow variations in arrival and departure times.At last, the difference between the planned travel time and the (average) (total) real travel time is clarified. As the name states, the planned travel time is the duration a certain trip takes according to the planned timetable, so under ideal circumstances. In reality, when this trip is made, there can be a disturbance or conflict that extends the travel time. The (total) real travel time is defined as the total duration needed to make the trip under these disturbed circumstances, so from the moment of planned departure until the effective arrival at the destination. Note that we start counting from the planned departure time as we assume that passengers arrive at their station of departure before that moment. Since the real travel time differs each time a trip is made, we use the average real travel time instead but drop the term average.The structure of this paper is as follows. In the next section, an overview of the related literature is given and the differences between our method and other approaches are discussed. Section 3 is about our vision on robustness. In Section 4, our algorithm and the simulation module are presented and in Section 5, we provide the computational results. The paper ends with the conclusions and thoughts for further research.In general, the whole railway planning process consists of several steps (Huisman, Kroon, Lentink, & Vromans, 2005; Lusby, Larsen, Ehrgott, & Ryan, 2011). One of these is the timetabling step in which a timetable is created based on a macroscopic representation of the infrastructure, so partially neglecting capacity limitations at stations. In a next step, called the train routing or platforming problem, the track layout at microscopic level is considered and planners try to find conflict-free routes through station areas. An extensive overview of the train routing problem at station level can be found in the survey paper of Lusby, Larsen, Ehrgott, et al. (2011). A classification of related contributions is given based on the level of planning (strategic, tactical and operational) and on the solution approach. Our paper, as well as the related papers of Caimi, Chudak, Fuchsberger, Laumanns, and Zenklusen (2011) and Lusby, Larsen, Ryan, and Ehrgott (2011), belongs to the class of tactical level planning for which we use a conflict graph. Our approach distinguishes itself from the train platforming problem (TPP) (Caprara, Kroon, Monaci, Peeters, & Toth, 2007) since for solving the train routing problem, we assume a rigid platform allocation. The situation in which multiple stations are lined up is studied in Carey and Crawford (2007). In that paper, an algorithm to come up with a conflict-free schedule for a series of stations is presented, but no robustness related topics or routing actions as we do are tackled. The radial structure of the British network motivates the approach of scheduling corridors largely separated. Conflicts between the network components are to be solved by iterations or adjusting the schedules. As the structure of the Belgian network is more or less radial with Brussels as midpoint, a similar approach is used in this paper.Some of the main contributors concerning the train routing problem on a tactical level are Zwaneveld et al. In Zwaneveld et al. (1996) and Zwaneveld, Kroon, and van Hoesel (2001), the routing method that is used within DONS, the planning tool used for the Dutch railway system, is presented. First, all possible routes connecting the inbound track with a platform and the outbound track are computed. Then, a preprocessing phase is executed to reduce the number of candidate routes for each train. Finally, the remaining train routing problem is modeled as an independent set problem. The objective is to find a conflict-free combination of routes such that each train gets exactly one route assigned. This approach is enhanced with some robustness features, using aggregated routes, by Kroon and Maroti (2008).The work of Caimi et al. (2005, 2011) and Caimi, Burkolter, Herrmann, Chudak, and Laumanns (2009) has similarities with the Dutch approach. In Caimi et al. (2009), a time index to enable small changes to the timetable is inserted in the model. This increases the complexity of the model which is then solved with a fixed point iteration heuristic (Caimi et al., 2005). The output consists of a routing for each train and a (modified) timetable. In Caimi et al. (2011), the independent set approach is replaced by a resource tree to enable computing feasible routings, eventually for slightly modified timetables, in a few seconds.A difference between our approach and the work of Zwaneveld et al. (1996, 2001) is that we have included a robustness-oriented objective function in our model. Also in Caimi et al. (2005), an objective function to improve the robustness is used. Although the idea of their approach, maximizing the size of the minimal disturbance that causes knock-on delays, is similar to ours, we show at the end of Section 4.2 that only considering the smallest time spans as they do, is not sufficient for obtaining a robust solution for our case study. That is why we include all minimal time spans in the form of a weighted sum ranging over all time spans. As a consequence, a mathematical model can be used to efficiently compute the optimal routing solution. When only the smallest minimal time slots are considered in the objective function, Caimi et al. found that using a mathematical model becomes too time consuming. Therefore, a fixed point iteration heuristic is used to come up with a routing solution in which the smallest time slots are increased considerably in comparison to the initial solution (Caimi et al., 2005).In Zwaneveld et al. (1996, 2001), as well as in Caimi et al. (2009, 2011), small timetable modifications are allowed to obtain a feasible train routing. We use a different approach of alternating between routing and timetabling, both aiming to increase the robustness.As is indicated by Cacchiani and Toth in their survey on robust train timetabling (Cacchiani & Toth, 2012), there is a large set of papers about timetable robustness in which each author captures the notion of robustness in their own way (Kroon et al., 2008; Liebchen, Lubbecke, Möhring, & Stiller, 2009; Liebchen, Schachtebeck, Schöbel, Stiller, & Prigge, 2010; Schöbel & Kratz, 2009). Undoubtedly, providing a timetable with a certain amount of supplements and buffers to avoid or absorb delays and to avoid knock-on delays, respectively, helps to improve the robustness (Kroon et al., 2008), but there is a limit to the amount added; once a timetable becomes too slow, it will not be practical anymore. Improving the scheduling of transfers whilst limiting or minimizing the planned (passenger) travel time is also essential to obtain a robust timetable (Schöbel & Kratz, 2009; Vansteenwegen & Van Oudheusden, 2006, 2007). However, it has little to no use to improve a transfer that is not chosen by any passenger. Thinking about the passengers’ perspective, robustness should be about minimal delays, good transfers, short planned travel times, shortly said, anything that can improve the passengers’ service (Liebchen et al., 2010; Sels, Dewilde, Cattrysse, et al., 2011).Considering passengers’ service, or passengers’ satisfaction as they call it, is also done in Shafia, Aghaee, Sadjadi, and Jamili (2012). But unlike we do, they consider robustness as opposed to the passengers’ satisfaction because of the longer travel times the first implies (Shafia et al., 2012). The proposed approach computes the required buffer times to achieve the desired level of robustness, based on the stochastic behavior of disturbances with respect to the possibility of delay propagation.The concept of recoverable robustness (Liebchen et al., 2009) and recover to optimality (Goerigk & Schöbel, 2010) considers restoring feasibility in case of disruptions. They aim at minimizing the planned travel time plus a weighted delay cost (recoverable robustness) or at minimizing the necessary changes to restore feasibility (recover to optimality). Liebchen et al. (2009) include the planned travel time and possible delays in the objective function, but the delay cost is purely based on the worst case values.Some techniques to obtain a robust timetable based on a nominal timetable are compared in Fischetti, Salvagnin, and Zanette (2009). One of these techniques is the principle of Light Robustness (Fischetti & Monaci, 2009). The authors call their approach robustness training. The idea is to allow a worsening in the objective function value of the nominal timetable and to use this freedom to improve the robustness. This way, a solution somewhere between a robust optimization solution and a timetable resulting from stochastic programming is obtained.In Salido, Barber, and Ingolotti (2012), four methods to improve the timetable robustness are presented: these four are adding time supplements, decreasing capacity consumption by adding buffer times to the headways, avoiding heterogeneity and decreasing the average speed. All of these incur a certain price of robustness in the sense that a higher level of robustness goes hand in hand with a larger travel time. The robustness is measured using the total delay but no assessment between the increase in planned travel time (the price of robustness) and the gain in real travel time of having less delays is made. Although the effectiveness of these methods in reducing the total delay is undoubtable, none of these methods are applicable in our case study due to a hard requirement of scheduling a given train set on an infrastructure with fixed capacity. We show that by modifying the schedule and the routing of some of the trains in a better way, the performance can be improved in the considered area without increasing the planned travel time.The work of Vansteenwegen and Van Oudheusden (2006, 2007) is about investigating optimal transfer planning for passengers while taking robustness into account. By planning a running time supplement on the feeder train’s trip towards the transfer station, it is shown that the overall passenger travel time can be decreased. Based on the findings presented in Dewilde, Sels, Cattrysse, and Vansteenwegen (2011), Sels, Dewilde, Vansteenwegen, and Cattrysse (2011) came up with an integer programming model to compute a robust railway timetable for periodic trains in only a few hours. The way to deduce the passenger flows is presented in Sels, Dewilde, Cattrysse, et al. (2011).Even if a timetable is robust, disturbances still can cause conflicts which need to be solved in real-time. This real-time rescheduling belongs to the operational level of planning and is gaining more and more attention. As we focus in this paper on the tactical level planning, we restrict ourselves to a short overview discussing the most related trends in operational planning. Results concerning delay management with a rolling horizon on a single track network can be found in Meng and Zhou (2011) and the references contained therein. Extending the network to lines between stations (Corman, D’Ariano, Pacciarelli, & Pranzo, 2010; D’Ariano, Pacciarelli, & Pranzo, 2008) or considering real-time rescheduling or rerouting in railway bottlenecks (Corman, Goverde, & D’Ariano, 2009; D’Ariano, Corman, Pacciarelli, & Pranzo, 2008; D’Ariano, Pacciarelli, & Pranzo, 2007; Mazzarello & Ottaviani, 2007) has also been the subject of several studies.A robustness definition has to be practical in the sense that railway companies are willing to use it. This means that striving for robustness should not make the timetable too slow, and a robustness definition has to be practical to work with such that the robustness can be assessed and compared. Thus, besides a definition of robustness, an appropriate way to measure and compare timetable robustness is needed (Salido et al., 2012). As dividing delay in primary delay and knock-on delay is still a very difficult exercise, it is hard to use anything related to this to measure robustness. Also the percentage of maintained transfers has shortcomings as this does not account for the delays arising due to, for example, synchronization actions.An interesting method to evaluate robustness is described in Goverde (2007). Using the theory of max-plus algebra, delay propagation computations can be done easily. Next to that, the stability (existence of timetable slack), realizability and recoverability (resilience) can be evaluated. The robustness of a schedule is measured using the amount of propagated delay. Although this technique has led to the development of a simulation package called PETER, the absence of the ability to incorporate stochastic influences in the model forms a restriction for the use of this approach.In Takeuchi, Tomii, and Hirai (2007), Monte Carlo simulation is used to estimate the robustness of a schedule. To evaluate the robustness, the authors measure the sensitivity to delays of the passenger disutility which is influenced by the travel time, congestion rate, number of transfers, and the waiting time. The used approach is tested by comparing the robustness of two schedules: a reference and an (ad hoc) improved one. Just like Liebchen et al. (2010) and Takeuchi et al. (2007) with passengers’ service, we share the same vision on robustness and apply a similar technique to measure it as is explained in the next section.The definition we have presented in Dewilde et al. (2011), also in joint cooperation with the Belgian railway infrastructure manager Infrabel, removes the discrepancy between the existing definitions: the inclusion of timetable slack is assessed by considering its marginal effect, passenger streams are used as weights such that, e.g., important transfers can be detected, and the total passengers’ travel time including delays, transfer times and necessary waiting is being used to measure the quality of the passengers’ service. A good quality of this passengers’ service, even under disturbed circumstances, is what robustness is about (Snelders, Immers, & Wilmink, 2004). That is why we, together with Infrabel, define railway robustness as follows: A railway system that is robust minimizes the total weighted real travel time of the passengers, in case of frequently occurring, small disturbances.Since the total real travel time of a passenger, as defined in Section 1, is easily measured, we have a constructive definition for robustness. Weights are added to represent the passengers’ perception of wasted travel time. Wasted travel time can be seen as anything that prolongs the journey time unnecessarily: delays (weight 3), supplements that result in extra unnecessary dwell time (weight 2) and transfers. For transfers this goes in the form of waiting on the platform until the connecting train arrives and is weighted by a factor 2. The size of the weights originates from extensive studies about the value of (waiting) time in public transportation (Mackie, Jara-Díaz, & Fowkes, 2001; Wardman, 2004).The total weighted real travel time for all passengers is computed using the weights as described above. In Section 5.2, we compare different measures with different nominal travel times, e.g., due to changes in the stopping pattern. For the fairness of comparison, we normalize the total weighted real travel time by subtracting the nominal travel time of all passengers from it and dividing this result by the same nominal travel time. This ratio gives a measure for the weighted travel time extension (WTTE). The weighted travel time extension equalsWTTE=total weighted real travel time-nominal travel timenominal travel time.To evaluate the robustness of system X, it is hard to know when the maximum level of robustness is achieved. Hence in this paper, robustness related results are presented in comparison to a reference situation(REF)such that the gain in robustness can be computed. Therefore the following formula is used:(1)1+WTTEREF-WTTEXWTTEREF.If (1) results in a value of, e.g., 1.10 or 110%, this means that railway system X is 10% more robust than the reference system according to our definition of robustness.Note that the visions on robustness as formulated in Kroon et al. (2008), Liebchen et al. (2009, 2010), and Schöbel and Kratz (2009) are all captured in our definition.In this section, the route choice module to solve the train routing problem, the timetabling module, and the simulation module to evaluate the performance at a railway bottleneck are introduced. Since both the timetabling module and the route choice module affect the minimal time span between two trains, defined as the minimal delay that causes these trains to conflict, an iterative procedure is used to combine both modules. Starting from an initial timetable, the route choice module is solved and based on its results the timetabling algorithm is run. This procedure is repeated as long as improvements are obtained.The objective function of the route choice module and the timetabling module is similar to the objective function from Caimi et al. (2005). In their paper, the authors try to maximize the weighted sum of the four smallest minimal time spans between any two trains, while in this paper, we sum over all minimal time spans. Unlike the weights in the objective function of Caimi et al. (2005), our weights are non-linear and provide a natural assessment of the costs and benefits of altering some time spans. In the next section, we compare both approaches and show that ours is more appropriate for the Brussels’ area.In the following, we use the term trainroute to indicate the combination of a train (t) and its route through the station area (rt), e.g.,(t,rt)is a trainroute. The minimal time span between two trains depends on both aspects of a trainroute: the train and its route. LetB(t,rt),(t′,rt′)(from Buffer time) be the minimal time span between trains t andt′with their routesrtandrt′, respectively, and let the weight corresponding to a time span be(2)W(t,rt),(t′,rt′)=15ifB(t,rt),(t′,rt′)=0(conflicting),1/B(t,rt),(t′,rt′)ifB(t,rt),(t′,rt′)<Bmaxminutes,0otherwise,withBmaxa model parameter denoting the shortest duration of a time span that is considered insensitive to conflicts. The weight corresponding to a conflict is set equal to 15 because we use a time discretization of 0.1minutes causingW(t,rt),(t′,rt′)to be smaller than 15 ifB(t,rt),(t′,rt′)>0. W is used as weight (cost) in our spreading objective function:(3)min∑W(t,rt),t′,rt′.In this way, a smaller time separation corresponds to a higher cost and the marginal effect of increasing a time span is decreasing. Another advantage is that, when increasing a time span, the objective function weighs up the increased and decreased time spans in a natural way.Our objective function is similar to the SSHR measure (sum of the shortest headway reciprocals) that is introduced in Vromans, Dekker, and Kroon (2006). In that paper, the impact of heterogeneity on the reliability of a railway system is investigated. Using the sum of the reciprocals, one is able to account for speed differences since these lead to different time spans at the beginning and end of a common section. Where the applicability of the SSHR measure is restricted to track sections between stations, we also consider the stations itself and use (3) as the objective function instead of a reliability measure only as is done in Vromans et al. (2006).Function (3) is used as the objective function in the route choice module as well as in the timetabling phase. It is important to notice that, although we use (3) to improve the robustness, this is not how the robustness itself is measured (see Section 3).The train routing problem (Lusby, Larsen, Ehrgott, et al., 2011) is about finding a path for each train through the considered network, in our case a station area. More precisely, given a set T of trains and the set R of all possible routes through a station, a solution of the train routing problem is an allocation of exactly one router∈Rto each traint∈Tin a conflict-free way. In this step, we assume that the arrival and departure time of each train are unchangeable and throughout the entire algorithm we keep the assigned platforms fixed. Often, the train routing problem is solved only for feasibility (Caimi et al., 2009; Zwaneveld et al., 2001), leaving several opportunities unconsidered. In this paper, feasibility is not enough since robustness is our goal. Including robustness in the objective function would result in a complicated model since delay propagation computations are required to evaluate the robustness as is explained in Section 3. That is why the spreading of trains is used here to indirectly improve the robustness. The impact on the robustness is measured afterwards using the simulation model from Section 4.4. To solve the train routing problem, our route choice module consists of three steps.Step 1: In the first step, the set R of all possible routes is determined. With a route, we mean a sequence of (platform-)tracks from one end of the station area to the other end. An example of a route is highlighted in Fig. 1. Each route connects the three stations and alternative routes (between the same platforms) exist. Comparing the routes connecting the same entry or exit point with the same platform, some routes can already be pruned. This is explained as follows. Denote withNrthe set of switches along router∈R. IfNr⊂Nr′with r andr′two routes between the same in-/outbound track and a platform, then router′can be removed from R since replacingr′by r in any solution of the train routing problem will result in a better routing; all the switches on route r are also part of router′which might have some extra switches, causing the minimal time span between a train following r and any other train to be at least as large as when router′would be followed. Notice that it is assumed that no overtaking of trains takes place in a station area.Step 2: The second step of the route choice module starts with assigning to each train all possible, remaining routes connecting that train’s inbound or outbound track with its platform. Name this setRt(t∈T). Now eachr∈Rtconnects that train’s platform in the North station with the platform in the South station and passes along the assigned platform of the Central station. Regarding the infrastructure of the Brussels’ area (Fig. 1), it can be seen that in generalRtconsists of multiple routes.When the setRtfor eacht∈Tis created, a preprocessing phase follows to reduce the number of candidate routes per train. Where in the previous step, routes could only be pruned based on their set of switches, now timetable information can be used to computeB(t,r),(t′,r′), with trainroutes(t,r)∈T×Rtand(t′,r′)∈T×Rt′. When trainroute(t,r)conflicts with trainroute(t′,r′), the minimal time span between these two, is set to 0. For all routes of traint∈T, sayr,r′∈Rt, holds thatB(t,r),(t,r′)=0since each train can only have one assigned route. In Zwaneveld et al. (2001), some dominance rules are used to prune candidate trainroutes based on their set of conflicting trainroutes. If for a certain trainroute(t,r), the set of its conflicting trainroutes contains that of another route for the same train, say(t,r′), then according to Zwaneveld et al. (2001),(t,r)is dominated by(t,r′)and can be pruned. Unlike in Zwaneveld et al. (2001), we are not satisfied with feasibility, i.e., the ability to assign a route to each train in a conflict-free way, thus some modifications to the dominance rules are needed. A trainroute(t,r)can only be dominated by another trainroute for the same train, say(t,r′), if the minimal time span with each other trainroute is at least as large using(t,r′)as when(t,r)is used. Therefore, define the setK(t,r)as follows:(4)K(t,r)=(t′,r′)∈T×Rt′:B(t,r),(t′,r′)=0,∀(t¯,r¯)∈T×Rt¯:B(t,r),(t¯,r¯)⩽B(t′,r′),(t¯,r¯).Thus all(t′,r′)∈K(t,r)conflict with(t,r)and the minimal time span between(t′,r′)and any other trainroute is at least as large as the minimal time span between(t,r)and that other trainroute. In the following lemma, it is shown that trainroute(t,r)can be pruned, i.e., removed fromT×Rt, wheneverK(t,r)is not empty.Lemma 1IfK(t,r)≠∅for a trainroute(t,r)∈T×Rt, then(t,r)is dominated by each element ofK(t,r)or(t,r)can never be part of a feasible routing solution.Take an arbitrary(t′,r′)∈K(t,r). Ift=t′such thatr,r′∈Rt, then from (4), it follows that if(t,r′)conflicts with a(t¯,r¯)∈T×Rt¯, then(t,r)also conflicts with that trainroute. Moreover, the weights in the spreading objective function (2) for any feasible solution using(t,r)will never be smaller than when using router′instead of r for train t. This means that(t,r)is dominated by(t,r′)since the latter always gives at least as good solutions. Ift≠t′then for allr¯∈Rt′holds thatB(t,r),(t′,r¯)⩽B(t′,r′),(t′,r¯)=0. This means that(t,r)conflicts with all possible routes for traint′, thus(t,r)can never be part of a feasible solution. □An example will illustrate this lemma. Lett1andt2be two trains,r1,r1′∈Rt1andr2,r2′∈Rt2. The minimal time span between any two of these trainroutes and the sets K are given in Table 1. From this table, we see that the minimal time span between(t1,r1)and(t1,r1′)is 0 since both are trainroutes of the same train, and thatB(t1,r1),(t2,r2′)=3. For each of the trainroutes, the set K can be computed using (4). AsK(t1,r1)andK(t2,r2)are nonempty, these trainroutes are dominated and can be removed from the set of trainroutes. If(t1,r1)is pruned first, then the corresponding row and column in Table 1 must be removed causingK(t2,r2′)to become nonempty. As a consequence(t2,r2)and(t2,r2′)dominate each other. In this case, only one of the two is pruned causing the other to become non-dominated.This example shows that a set of trainroutes has no unique maximal subset of non-dominated trainroutes. Analogous to the discussion in Zwaneveld et al. (2001), it can be shown that the cardinality of a maximal subset of non-dominated trainroutes is independent of the dominance order. One can also show that the dominance rule is transitive and that pruning a dominated trainroute does not affect the dominance of another distinct trainroute.During test runs, an average of 85% of all the trainroutes were pruned using this lemma. In total, the pruning in step 1 and the dominance rule of this lemma, reduced the number of trainroutes with 95%. As a result, only 141 trainroutes remained for an instance with 84 trains.Step 3: The last step of the route choice module is to solve the train routing problem on the set of non-dominated trainroutes. Therefore, define for all trainroutes(t,r)∈T×Rtx(t,r)=1ifrouterisselectedfortraint,0otherwise.We also define the continuous variabley(t,r),(t′,r′), bounded by 0 and 1, as the variable that is 1 if bothx(t,r)andx(t′,r′)=1. Now, the train routing problem can be solved with a linear mathematical model.(5)Minimize∑t∈T∑t′∈T∑r∈Rt∑r′∈Rt′W(t,r),(t′,r′)·y(t,r),(t′,r′)(6)Subject toy(t,r),(t′,r′)-x(t,r)-x(t′,r′)⩾-1∀(t,r)∈T×Rt,(t′,r′)∈T×Rt′,(7)∑r∈Rtx(t,r)=1∀t∈T,(8)x(t,r)+∑r′∈Rt′:B(t,r),(t′,r′)=0x(t′,r′)⩽1∀(t,r)∈T×Rt,t′∈T⧹{t},(9)0⩽y(t,r),(t′,r′)⩽1∀(t,r)∈T×Rt,(t′,r′)∈T×Rt′,(10)x(t,r)∈{0,1}∀(t,r)∈T×Rt.The spreading objective function (5) uses the weights from (2) and minimizes the sum of all the weights. Due to the decreasing impact of larger time spans, priority is given to avoiding small time spans. Constraint set (6) gives a lower bound on the continuous decision variable y and keeps the model linear. Since the objective is to minimize a nonnegative cost times the variable y, there is an incentive to sety(t,r),(t′,r′)=0. When bothx(t,r)andx(t′,r′)equal 1, constraint set (6) forcesy(t,r),(t′,r′)to be larger than or equal to 1. In (7) we make sure that all trains get exactly one route assigned. For each conflicting couple of trainroutes a clique constraint of the formx(t,r)+x(t′,r′)≤1should be inserted. In our model, these clique inequalities are replaced by the stronger clique inequalities (8) which all are generated a priori. We refer to Zwaneveld et al. (1996) for more details about this constraint. Finally, (9) and (10) give the bounds on the variables.Running this model on the set of 141 non-dominated trainroutes (i.e. combinations of a train and a candidate route for that particular train) for the test case of step 2 resulted in about 20,000 decision variables and more than 31,000 constraints. Note that the solver is able to prune many variables and constraints right away because of the scarcity of the conflict matrix. As a result, solving this model required only 5 seconds on a DELL Optiplex 760 with Intel(R) Core(TM) 2 Duo 3.00gigahertz, 4.00gigabytes RAM, 64-bit operating system running Cplex 12.4. Note that without the preprocessing phase, the solution for this instance cannot be found within one hour.The mathematical model (5)–(10) can be adapted to cope with the objective of Caimi et al. (2005) to maximize the four smallest minimal time spans. Using the same assumption as before, no timetable changes are allowed and the whole set of minimal time spans can be computed in advance, the adapted model can be solved for our case study using Cplex. Although the preprocessing rules from step 1 and step 2 still apply and building the model does not require significantly more computational effort, the computation time the solver needs to find the optimal solution increases considerably from 5seconds to more than 1400seconds. The largest portion of this is spent on finding an initial solution or due to an (extra) internal preprocessing step of Cplex.Due to the nearly saturated infrastructure and the fact that the cost of a time span in our objective function is inversely proportional to its size, no improvement in the size of the smallest minimal time spans could be obtained using the objective of Caimi et al. (2005) instead of (3). Furthermore, our objective function tries to increase all time spans, thus also the time spans between one of the trains that forms the smallest minimal time span and any other train. As a consequence, the propagation of delay will, in general, be smaller for our solution than for the solution of Caimi et al. This allows us to conclude that our objective function (3) outperforms the one of Caimi et al. (2005) for the case study of Brussels.The outcome of the mathematical model (5)–(10) gives us the optimal routing for the current timetable. For a modified timetable, however, this routing can become suboptimal. That is why, in our methodology, the route choice module alternates with the timetabling module.In this step, we want to improve the timetable using the same objective function as in the route choice module. The same time discretization of 0.1minutes is used. Since using a mathematical model to solve the timetabling problem requires the inclusion of all the minimal time span computations, which would result in a large and complex model, we chose a heuristic to improve the timetable. As a consequence, no optimal timetable for a certain routing solution is known. The timetable from the previous iteration is used as start solution in a tabu search heuristic (Gendreau, 2003) that, one by one, tries to increase the smallest minimal time span by shifting some trains in time. If this is not possible or would result in an increase in objective function value (3), the second smallest minimal time span is considered. Notice that the arrival and departure times for all trains are bounded by a time window. During our computations, we required that all trains had their planned arrival and departure between 7 and 8AM. This choice is motivated by the fact that the considered timetable is periodic with a period of one hour. A smaller time window can be implied for each train individually. For example, the time window for an international high speed train can be chosen such that no timetable deviations are allowed for this train.Algorithm 1Outline of the tabu search algorithm of the timetabling modulewhile number of consecutive globally non-improving moves⩽itermaxdo1. Build up the restricted candidate list usingϑ2. Perform a full neighborhood search of the shift neighborhood3. if improving move found do update tabu list and make the moveelseϑ←ϑ+εstepifϑ>Bmaxdo perform a smallest ascent move andϑ←0Our algorithm has one neighborhood operator: shifting one or more trains in time. During test runs, the need for a better guiding of the heuristic became clear as frequently the algorithm got stuck due to cycling. That is why we opted for a tabu search heuristic. An outline of the tabu search algorithm is given in Algorithm 1. The idea is as follows. As long as the maximum number of consecutive globally non-improving moves (itermax) is not reached the algorithm executes the following steps. First it constructs a restricted candidate list (RCL) which is a list of train pairs whose minimal time spanBt,t′lies within the interval that is bounded from below by the overall minimal time span plusϑand hasεstepas width, withεstepa model parameter.RCL=(t,t′)∈T×T:Bt,t′∈mint̃,t¯Bt̃,t¯+ϑ,mint̃,t¯Bt̃,t¯+ϑ+εstep.Notice that since each train has a unique route in the timetabling module, we can simplify the notation of the time spans by dropping the routing indices. In the following, we assume t precedest′when denoting(t,t′).In the second step, a shift move is considered for each RCL-candidate and the best found move is selected as candidate move. A shift move consists of the shift of one or more trains in time withδt=-δmax,-δmax+1,…,-1orδt′=1,2,…,δmax. Since we assume that t precedest′, a shift move increasesBt,t′. If the shift(t,δt)(analogous for(t′,δt′)or any other train that gets shifted) would incur a conflict with another train, saytˆ, or makeBtˆ,t<Bt,t′,tˆalso gets shifted withδt. Notice that we only allow one of the two trains (t ort′) to be shifted and that shifts that are tabu are not considered except when they are globally improving (aspiration).In step 3, the result from the shift operator is evaluated. If the best found move was improving and not tabu (or tabu but globally improving), the move is made,ϑis set back to 0, and the tabu lists are updated. This means that, for all shifted trains, a reverse shift becomes forbidden for a fixed number of iterations equal to tabutime. If the best found move was not improving, the variableϑis increased withεstepwhich affects the RCL in the next iteration. Ifϑ>Bmax, withBmaxthe smallest size for a time span to be considered insensitive to conflicts, no improvements will be found by increasingϑand a smallest ascent move is made. This means that the solution which is the best found, non-tabu solution over the last iterations, is selected as next solution to continue the algorithm.To determine the optimal values of the parameters, a large set of experiments are conducted in which the value of the parameters could vary and based on the objective function value (primary concern) and the computation time (secondary importance) the following values are selected.Bmax=15minutes, meaning that two trains that have a minimal time span of 15 minutes or larger are considered to be insensitive to propagate delay to one another. The width of the RCL-interval (εstep) is set to 0.5minutes and the tabutime=10 iterations. The maximum shift size(δmax)equals 5 minutes and the parameter determining the stop criterion(itermax)gets 200.Note that we do not explicitly consider changes in train ordering and that a single shift move does not allow them. Due to the iterative procedure of the route choice module and the timetabling module, however, order changes can be possible as a result of multiple consecutive changes in routing and timetable. Nevertheless, we assume that this does not lead to problems on the outside of the considered area. The same holds for any change in event times. The structure of the underlying timetable will be similar to the reference timetable that serves as input for our algorithm. The reference timetable was used for many years in practice and was improved step by step over the years. As a consequence, we assume that no change in event times will cause large problems outside the considered area.Since the shift operator is created in such a way that a timetable shift to increase the time spanBt,t′will never cause other time spans to become smaller thanBt,t′, no conflicts can arise by applying timetable shifts. This means that the routing solution of iteration i remains feasible throughout the whole tabu search. This allows us to use the objective function value obtained by the timetabling module as an upper bound for solving the train routing problem in iterationi+1. If a (local) optimum is reached for both the route choice module and the timetabling, computations are stopped. For all test cases, a local optimum was reached in less than five iterations. Once this happened, we consider the planning of trains in the station area to be optimized and the new system can be evaluated in detail by the simulation model, described in the next section.To assess the robustness of the new train system in the station area, a discrete event simulation model is developed. Our simulation model utilizes detailed infrastructure data and real-time rescheduling or rerouting is not considered. The results are computed based on 10,000 simulation runs. Next to the average knock-on delay and the percentage of delayed trains, the robustness value of the system is computed.Delays are allocated to some of the trains to represent an initial disturbance. Together with the route choice solution, the timetabling solution and the infrastructure details, this serves as input for the simulation module. Two types of delays are considered: delays upon arrival at the border of the considered area and dwell delays at any of the three stations. We denote the input delay with a four-tuple representing the delay upon arrival, the dwell delay at the South, Central and North station, respectively. Each of these delays is drawn from the exponential distribution with the – for that train – measured real average delay(D‾)as parameter or is equal to a predetermined value. The former we denote with E from exponential, the latter withP(size)from predetermined. In both cases, the number of delayed trains is added as index. Let n be the number of trains, thenEn/2,0,Pn/2(0.5),0means that half of the trains gets a delay upon arrival which is drawn from the exponential distribution and half of the trains gets a dwell delay at the Central station which is equal to 0.5minutes for all these trains.If two trains request the same infrastructure simultaneously, priority rules based on the real practice are applied to resolve this. According to these rules, priority is given to trains based on their commercial type, e.g., international trains are handled before local trains. If applicable, we restrict the number of trains within the bottleneck area by prioritizing trains that are about to leave the system compared to trains that want to enter the bottleneck area and are waiting in a – so called – buffer or compensation zone. Based on the observation that a delayed train can be overtaken by another train outside the considered area, e.g., at a previous station, we allow deviations for the planned arrival sequence at the border of the system.In Schaafsma and Bartholomeus (2007), it is argued that no connections are scheduled in the bottleneck area of Schiphol in the Netherlands. Doing so, synchronization actions that slow down the traffic through the bottleneck are avoided. In Brussels, there is a high frequency of trains in each direction such that the extra waiting time caused by a missed transfer remains limited. As a consequence, no transfers are scheduled and no transfer data for the Brussels’ area is recorded. For our case study, we use the same principle and do not consider connections in the timetabling and the simulation module. It should be noted, however, that a list of guaranteed transfers could easily be taken into account in the timetabling module. If one of the two trains involved in a transfer is considered for a shift that would make this transfer infeasible, the other train involved in the transfer should also be shifted.

@&#CONCLUSIONS@&#
