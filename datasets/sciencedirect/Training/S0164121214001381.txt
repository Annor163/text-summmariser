@&#MAIN-TITLE@&#
A component-based process with separation of concerns for the development of embedded real-time software systems

@&#HIGHLIGHTS@&#
We propose a component-based approach for embedded real-time software systems.The approach meets requirements from the space, railway and telecom domains.The approach enforces separation of concerns throughout the development process.The approach supports model-based analysis and code generation.The approach was assessed in four case studies in two parallel research projects.

@&#KEYPHRASES@&#
Embedded real-time systems,Component model,Non-functional properties,Separation of concerns,

@&#ABSTRACT@&#
Numerous component models have been proposed in the literature, a testimony of a subject domain rich with technical and scientific challenges, and considerable potential. Unfortunately however, the reported level of adoption has been comparatively low. Where successes were had, they were largely facilitated by the manifest endorsement, where not the mandate, by relevant stakeholders, either internal to the industrial adopter or with authority over the application domain. The work presented in this paper stems from a comprehensive initiative taken by the European Space Agency (ESA) and its industrial suppliers. This initiative also enjoyed significant synergy with interests shown for similar goals by the telecommunications and railways domain, thanks to the interaction between two parallel project frameworks. The ESA effort aimed at favouring the adoption of a software reference architecture across its software supply chain. The center of that strategy revolves around a component model and the software development process that builds on it. This paper presents the rationale, the design and implementation choices made in their conception, as well as the feedback obtained from a number of industrial case studies that assessed them.

@&#INTRODUCTION@&#
Non-functional concerns such as time and space predictability, dependability, safety, and more recently security, have an increasingly large incidence on system development in high-integrity application domains such as avionics and space, railways, telecom and, prospectively, automotive. Several of those needs are addressed by software.This trait places stringent requirements at process and product level, corresponded by onerous verification and validation (V&V) needs. Industry therefore seeks ways to contain the cost of development while strengthening the guarantees on the result.Among the various solutions proposed to that end, the adoption of Model-Driven Engineering (MDE) Schmidt (2006) has fared rather well by measure of interest and success. Evidence collected in domain-specific initiatives (cf. e.g., (Bordin and Vardanega, 2007; Panunzio and Vardanega, 2007; Bordin et al., 2008)) shows that the higher level of abstraction in the design process facilitated by MDE allows addressing non-functional concerns earlier in the development, thereby enabling proactive analysis, maturation and consolidation of the software design. Moreover, the automation capabilities of the MDE infrastructure may ease the generation of lower-level design artifacts and enable the automated generation of source code products of certain quality.In the space arena specifically, experience gained in the ASSERT11ASSERT: Automated proof-based System and Software Engineering for Real-Time systems. FP6 IST-004033 02/2004-01/2008 http://www.assert-project.netproject persuaded the European Space Agency (ESA) and its main system and software suppliers that for the adoption of MDE methods to produce tangible benefits, a software reference architecture common to all development stakeholders should be established first.ISO/IEC/(IEEE) (2007) defines an architecture as composed of: (a) the fundamental organization of a system embodied in its components; (b) their relationships to each other, and to the environment; and (c) the principles guiding its design and evolution. On that basis, Panunzio and Vardanega (2013) regards the concept of software reference architecture as proceeding from: (i) a component model, to design the software as a composition of individually verifiable and reusable software units; (ii) a computational model, to relate the design entities of the component model, their non-functional needs for concurrency, time and space, to a framework of analysis techniques which assures that the architectural description is statically analysable in the dimensions of interest by construction; (iii) a programming model, to ensure that the implementation of the design entities obeys the semantics, the assumptions and the constraints of the computational model; (iv) a conforming execution platform, which actively preserves at run time the system and software properties asserted by static analysis and it is able to notify and react to possible violations of them.ESA and their industrial partners decided to explore how well that concept could serve as a basis for their MDE-adoption initiative, and saw their effort complemented by the parallel launch of the CHESS project.22CHESS: “Composition with Guarantees for High-integrity Embedded Software Components Assembly”, ARTEMIS JU grant no. 216682, 02/2009-04/2012, http://www.chess-project.org/Those two efforts successfully collaborated in the definition of a component-oriented design process for the model-driven development of high-integrity software for space, telecom and railway systems.That joint initiative proved the component model (initially captured in Panunzio and Vardanega (2010)) to be an essential facilitator to the industrial adoption of the proposed approach. It also showed the need for the component model definition and implementation to be enriched with support for: (1) specification and model-based analysis of non-functional requirements; (2) separation between functional and non-functional concerns, achieved by the enactment of design views (specializing the definitions of ISO 42010 (ISO/IEC/(IEEE), 2007)) and careful allocation of concerns to software entities; (3) selective inclusion of domain-specific concerns, whether functional or non-functional, to address special industrial needs.Several component models have been proposed in the past, with varied interests – from pure research to specific applications – and equally varied success. The one that has emerged from the cited initiative has prominence from the large collaborative effort that promoted it, merit from extensive evaluation from the perspective of diverse industrial domains, and benefit from a wealth of use experience. Those assets make it an interesting case to consider, not so much for originality per se, but rather for its being able to capture crucial priorities of industrial developments of high-integrity systems.This paper recalls the founding principles and motivations of the proposed component model (Section 2), presents its essential traits, illustrates the development process that is centered on it (Section 3), and reports on the four industrial case studies (Section 4) that were carried out on two distinct implementations of it. Section 5 draws some conclusions and outlines future work.

@&#CONCLUSIONS@&#
In this paper we presented a novel component model developed in the context of an investigation of the European Space Agency that aims at the definition of a software reference architecture for the on-board software of future ESA mission and in the parallel multi-domain project CHESS.The component model was designed to support separation of concerns, in particular between functional and non-functional concerns. Separation of concerns is achieved with careful allocation of distinct concerns to the software entities of the approach: components, containers and connectors. Our components are void of any non-functional concern such as – in the dimension of concurrency – tasking, synchronization, timing. This ensures that they can be directly reused in different contexts under different non-functional requirements.In our approach, component types and implementations only address functional concerns. Non-functional attributes are later superimposed on component instances. No premature non-functional choice is in fact forced on the component design. Furthermore, all the non-functional decisions are postponed to the appropriate design stage and no component description or implementation requires any modification in case non-functional attributes are changed.After non-functional attributes have been set, a call chain may span across components but it is guaranteed to be finite (it is represented as a tree with a leaf at every first occurrence of a deferred operation, i.e., with sporadic or bursty activation pattern, which is executed by its own thread of execution) and acyclic (Cancila et al., 2010).Finally, it is worth of notice that in our approach, software suppliers solely address functional concerns (i.e., the implementation of the sequential/algorithmic code), under a defined budget envelope negotiated with the software architect. The specification of any non-functional concern (how the software shall be executed) stays the responsibility of the software architect; and the implementation of non-functional concerns stays the responsibility of the design environment (through automated code generation).We also support model-based analysis of non-functional concerns to help the designer evaluate the design in early phases of development. The results of the analysis are directly presented as attributes of the entities of the user model.The two implementations of the proposed component model that we developed attest the methodological goodness of the approach withstanding the use of different specification languages and technologies.We are currently extending the component model described herein to support hierarchical components. Hierarchical decomposition will be used mainly to master the design complexity and contain the cluttering of entities in the design space: a problem common to all MDE approaches. Hierarchical composition will be used to aggregate reused components (fetched from a component repository). We are also carefully revisiting the design stages when hierarchical components are used, so that they fit our design process and do not break the separation of concerns principle.