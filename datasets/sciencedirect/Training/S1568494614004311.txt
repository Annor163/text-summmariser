@&#MAIN-TITLE@&#
Of daemons and men: A file system approach towards intrusion detection

@&#HIGHLIGHTS@&#
A new feature space for modelling users’ behaviour as observed from the file system.Decision engine can be based on both simple (GMM) and complex (SVM) classifiers.High detection rates and low corresponding false positive rates.Real world web servers used for training and evaluating the system.Malicious data set was built based on the findings of our honeynet.

@&#KEYPHRASES@&#
Intrusion detection systems,Information security,Machine learning,Data mining,File system,Anomaly detection,

@&#ABSTRACT@&#
We present FI2DS a file system, host based anomaly detection system that monitors Basic Security Module (BSM) audit records and determines whether a web server has been compromised by comparing monitored activity generated from the web server to a normal usage profile. Additionally, we propose a set of features extracted from file system specific BSM audit records, as well as an IDS that identifies attacks based on a decision engine that employs one-class classification using a moving window on incoming data. We have used two different machine learning algorithms, Support Vector Machines (SVMs) and Gaussian Mixture Models (GMMs) and our evaluation is performed on real-world datasets collected from three web servers and a honeynet. Results are very promising, since FI2DS detection rates range between 91% and 95.9% with corresponding false positive rates ranging between 8.1×10−2% and 9.3×10−4%. Comparison of FI2DS to another state-of-the-art filesystem-based IDS, FWRAP, indicates higher effectiveness of the proposed IDS in all three datasets. Within the context of this paper FI2DS is evaluated for the web daemon user; nevertheless, it can be directly extended to model any daemon-user for both intrusion detection and postmortem analysis.

@&#INTRODUCTION@&#
In contemporary computer and communication networks almost everybody uses the Internet backbone to exchange personal or sensitive information in a daily basis. Through cellphones, laptops, net-pads and smart sensors people exchange data on top of various types of applications like email services, web transactions, social networks, file transfers, etc. In tandem with this extreme growth of information exchange via the Internet, cyber-threats evolve to exploit the expanding attack surface. In order to protect end-users, specialized software and hardware solutions have been deployed (firewalls, antiviruses, spam detectors, Intrusion Detection Systems, sandboxes, etc). It is common knowledge, though, that none of these solutions alone is enough to offer absolute protection; usually a combination of them is essential for providing an adequate level of cyber-protection.Intrusion detection systems (IDS), known as the “computer world's burglar alarm”, are based on the idea of identifying attacks when or after they occur, and fire an alarm or take some action – Intrusion Response Systems (IRS) – according to their configuration. Different types of IDS have been proposed during the last two and a half decades. Network IDS (NIDS) [3,10,13,28,36] monitor network activity, while host-based IDS (HIDS) monitor data generated within a host, including command histories [15], system calls [2,6], function calls [26] and file system data [34]. Hybrid IDS [16,40] monitor both network and host activity. Misuse IDS [8,14] are trained with malicious data to identify attacks, while anomaly-based IDS [6,7] raise an alarm whenever monitored activity diverges from a normal usage profile. It is not uncommon to use distributed architectures of different IDS types in order to enhance the security perimeter of large computer networks.We have built a system that is able to distinguish the man from the daemon on a running server. In the following paragraphs we describe how such a system can be used to allow intrusion identification of compromised daemons.As most experienced system administrators know, no matter how well configured, hardened and up-to-date a running system offering network services is, it still has a chance of being compromised (it only takes a clumsy PHP developer to create an easily exploitable vulnerability even on the most protected web server). On a server system the attack surface consists mainly of the public services it offers (HTTP, FTP, SSH, etc.) and furthermore, attackers exploiting a vulnerability on a service are usually rewarded with a remote shell running with the privileges of the exploited daemon-user. Once this type of access is granted, attackers are allowed to run arbitrary commands as this daemon user. Hence, one way to identify when a daemon has been compromised is to monitor the daemon process for abnormal behaviour.We formulate our objective as a machine learning problem and try to identify novel features that are informative enough for various HIDS anomaly detection algorithms. Within the context of this work we argue that this distinction of daemon-human behaviour can be accomplished, since daemons usually behave in a very specific and repetitive way, serving web pages from certain paths or delivering mails to pre-configured mailboxes. Attackers, on the other hand, after compromising the vulnerable daemon usually perform actions like searching the system or network for further vulnerabilities, inspecting the system to identify its architecture and OS version, cleaning log files from their trails, downloading additional utilities to gain more privileges, defacing a web-page and generally performing actions that deviate from the way a daemon usually behaves. We argue that this divergence is reflected on the overall behaviour of the daemon and therefore an IDS should be able to identify the few diverging actions of an attacker against the daemon's normal usage profile.So, in this paper we present FI2DS, a multiprocessing, python-based, file system IDS, that is able to identify attacks by reading BSM audit records both on-line and off-line (from /dev/auditpipe and BSM binary files, respectively), generating feature vectors from monitoring file system activity and, ultimately, by employing alternative machine learning techniques on the generated feature vectors. FI2DS utilizes file system data because: (a) the file system stores most attackers’ traces on all OS's, and (b) this storage is permanent (contrary to the system's memory, or CPU registers, for example). The best and easiest source for monitoring file system activity on our FreeBSD11http://www.freebsd.org.servers that have been used for our experiments, was FreeBSD's Audit System that generates BSM records.22http://www.freebsd.org/doc/en/books/handbook/audit.html.Except from FreeBSD, BSM is also available for Solaris and Mac OS X, hence our proposed IDS can run on those systems as well. Furthermore, MS Windows Advanced Auditing and Linux audit are mechanisms that generate audit records analogous to BSM, so FI2DS can be ported to support those OS's too. It is important to stress at this point that FI2DS can be used in parallel with other types of IDS (HIDS, NIDS etc.) that are capable of identifying attacks not reflected on the file system. FI2DS practically adds an additional level of awareness regarding the usage of the file system from the running daemons.In the context of this paper FI2DS reads audit records generated from the httpd daemon user (www), builds a normal usage profile and then monitors incoming activity for divergence through a moving window mechanism. We have employed both one-class Support Vector Machines and Gaussian Mixture Models (see Section 4) for novelty detection and have carried out experiments on datasets originating from three real-world web servers. The malicious activity dataset is inferred from commands gathered from a honeynet we have deployed just for this purpose. Our experimental results indicate that FI2DS achieves high detections rates with low corresponding false positive rates and when compared to FWRAP [34], FI2DS outperforms it.

@&#CONCLUSIONS@&#
