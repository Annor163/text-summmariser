@&#MAIN-TITLE@&#
Mathematical programming time-based decomposition algorithm for discrete event simulation

@&#HIGHLIGHTS@&#
We propose a procedure for simulation with mathematical programming.The method decomposes a mathematical model into smaller submodels easier to solve.The decomposed submodels refer to subsets of consecutive simulated entities.The simulation time with the proposed method is linear in the number of entities.The method has been validated on a large set of different cases.

@&#KEYPHRASES@&#
Simulation,Mathematical programming,Decomposition,

@&#ABSTRACT@&#
Mathematical programming has been proposed in the literature as an alternative technique to simulating a special class of Discrete Event Systems. There are several benefits to using mathematical programs for simulation, such as the possibility of performing sensitivity analysis and the ease of better integrating the simulation and optimisation. However, applications are limited by the usually long computational times. This paper proposes a time-based decomposition algorithm that splits the mathematical programming model into a number of submodels that can be solved sequentially to make the mathematical programming approach viable for long running simulations. The number of required submodels is the solution of an optimisation problem that minimises the expected time for solving all of the submodels. In this way, the solution time becomes a linear function of the number of simulated entities.

@&#INTRODUCTION@&#
Mathematical programming has been proposed by Schruben (2000) as an alternative technique to simulating Discrete Event Systems (DESs). Schruben represents the behaviour of a G/G/1 system with a Linear Programming (LP) model that has, as its objective function, the sum of the start and completion times for all of the customers that enter the System. As constraints, the model has the set of temporal inequalities that model the precedence between two consecutive customers. The starting and finishing times are the decision variables of the problem. A simplified version (with finishing times as the only decision variables) of the original Schruben’s model for a G/G/1 system is as follows:(1)min∑i=1Nyi(2)s.t.yi⩾ai+ti∀i(3)yi+1-yi⩾ti+1i=1,…,N-1where N is the number of customers that visit the system. The arrival time aiand service time tiof each customer i (with i=1,…, N) are parameters of the model. Their values can be known from a given data set or can be randomly generated from probability distributions. The solution of this problem provides the values for the decision variables yithat are the completion times of each customer. Once the problem has been solved, from the values of the decision and slack variables, it is possible to construct the simulated sample path and to calculate the system performance measures. To accomplish this goal, LP models for representing tandem queuing systems and scheduling problems (Chan and Schruben, 2003, 2008) and pull control systems (Alfieri and Matta, 2012) have been proposed in the literature.The major drawback of mathematical programming models for simulation is the computational burden that is encountered in some cases. Some complex DESs, in fact, require integer variables to be easily modelled, but this requirement can result in unacceptable solution times because the model becomes a Mixed Integer Linear Program (MILP). In addition, a very large computational effort is necessary for long runs because of the relationship between the number of decision variables and the number of simulated entities. In this case, even if the model is an LP model, the time (i.e., the computational time to solve the mathematical programming model) is a non–linear function (exponential in the worst case) of the number of customers that are simulated in the system. For example, as N in the G/G/1 system increases, the number of variables yiand the number of constraints in the inequalities (2) and (3) also increase. Hence, the mathematical programming approach appears to be applicable only for small instances. How to address long runs when mathematical programming is adopted for simulation is the topic of the current work.This paper proposes an algorithm that allows extending the use of mathematical programming to long runs. We show its application by using two well-known systems, G/G/1 and tandem queues. We want to highlight that our aim is not to simulate such systems quickly; instead, our aim is to propose a way to speed up a completely different method of simulation, i.e., mathematical programming-based simulation. As is clear from the computational experiments, our approach is still slower with respect to standard simulation, but such a difference in terms of the computational time is compensated by several advantages (Chan and Schruben, 2008; Matta, 2008). Among these advantages, the most relevant are (1) the possibility of easily performing sensitivity analysis to evaluate the effect of parameter changes (instead of using gradient estimation, as in a standard simulation) and (2) the ease of integrating simulation and optimisation into a unique framework (thus allowing a faster convergence to a near-optimal solution).The algorithm is a time-based decomposition that splits the mathematical programming (simulation) model into a number of submodels that are solved sequentially. To accomplish this goal, the key point is to create subsets of entities and solve a single model for each subset, thus exploiting the typical super-additivity of computational time functions. Specifically, the algorithm uses the solution of the first submodel to initialise the second submodel, and so forth, until the last submodel is solved. The number of submodels is the solution of an optimisation problem that minimises the expected time to solve all of the submodels. The main result is that the solution time is linearised, i.e., the time is a linear function of the number of simulated entities. Special time instants (such as regeneration points) can be used to decompose the overall model into submodels, thus further enhancing the efficiency of the approach.The structure of this paper is as follows. The problem that we study and the developed solution method are reported in Sections 2 and 3, respectively. Sections 4 and 5 contain the application of the method to specific systems. Section 7 concludes the paper.Given a DES for which we want to study the performance using a simulation approach, different mathematical programming models can be formulated to represent its dynamic behaviour (Chan and Schruben, 2008). Consider an LP or MILP model that simulates the evolution of N entities in a DES. The entities can represent parts in a manufacturing system, failures in a maintenance systems, etc. The objective function of the model is the sum of the starting and finishing events that occur in the system, regardless of the type of the event. These time occurrences are the decision variables of the optimisation problem. Decision variables are constrained to a set of inequalities that describe the systems behaviour. The mathematical programming model can be written in the following standard form:(4)minf(x)s.t.g(x)=0where g is a vector of functions that describes the system constraints. Functions in g depend on the decision variables x and on the duration of the activities in the system. The durations are assumed to be known in advance (Schruben, 2000).Each constraint in the model is associated with at least one entity in the simulated system. Thus, it is possible to cluster inequalities using the entities as grouping factors. The first group of constraints (g1) refers to entity one, the second (g2) to entity two, and so on. Using this grouping concept, we can rewrite the mathematical programming model as follows:(5)minf(x)s.t.g1(x)=0…gN(x)=0where giis the vector of the functions that represent the inequalities that are related to the ith entity. Depending on the system, there can be coupling constraints, i.e., there can be constraints that contain different entities, especially when finite capacity conditions are present. In this case, giis the vector of the functions that are mainly (but not only) related to the ith entity. In the G/G/1 model that is presented in Section 1, the vector of functions giis represented by Eqs. (2) and (3). The number of constraints increases as the number of simulated entities increases. The number of entities also affects the number of decision variables. Therefore, the complexity of the model is closely related to the length of the simulation.As a consequence, as the system becomes more complex, the solution time increases due to the increase in the number of decision variables and constraints. We can thus say that, for long runs, using mathematical programming is not a viable approach for simulation because of the unaffordable computational time.However, it is possible to notice that the model based on clustered inequalities has an interesting form. Indeed, the problem can be divided into several subproblems, each of which represents a portion of the original complete model; each subproblem is not related to a subsystem of the underlying DES but instead involves a specific time window. This property can be exploited to develop solution methods that are based on decomposition in submodels. The main benefit of this approach, as described in the following sections, is that solving the submodels is usually less time consuming than solving the whole mathematical programming model and does not lose accuracy in the results.

@&#CONCLUSIONS@&#
In this paper, we considered mathematical programming models for simulating DESs. A time-based decomposition algorithm was proposed to overcome one of the major drawbacks of using mathematical programming to simulate, i.e., the non-linear increase in the computational time as the length of the simulation increases.The developed algorithm first estimates the best number of submodels into which the complete model should be partitioned and then solves the submodels sequentially, devising, from the solution of each submodel, the initial conditions necessary to solve the next submodel.Partitioning the complete model into a number of submodels exploits the typical super–additivity of computational time functions and makes the mathematical programming approach usable for long-run simulations.The algorithm has been tested on the G/G/1 queue system. Numerical results confirm that partitioning an LP model allows us to execute long runs in a computational time that is a linear function of the number of entities. This important result can extend the use of mathematical programming applied to the simulation of DESs. We also applied our algorithm to a tandem queueing system, and the results showed that, additionally in this case, the reduction in the solution time can be substantial.When compared with a standard simulation, the mathematical programming approach still has a longer computational time. However, having a linearised solution time will allow the use of mathematical programming in a simulation–optimisation context in which different models that address simulation or optimisation or both must be used in a unique framework. Note that, in the simulation–optimisation context, standard simulation models are a black–box that differs from optimisation models in the mathematics that they use and in the software environments in which they are coded. Having a unique framework is undoubtedly an advantage for both practitioners and developers.Finally, the concept of decomposition is valid for LP and MILP problems. However, the specific systems for which the proposed algorithm can be fully exploited must still be clearly defined. A fixed sequence of entities is a pre-requisite, but additional features can be requested. All of these issues can be subjects for future research.