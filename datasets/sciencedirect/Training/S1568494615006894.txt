@&#MAIN-TITLE@&#
Joint operations algorithm for large-scale global optimization

@&#HIGHLIGHTS@&#
We propose a novel meta-heuristic algorithm called joint operations algorithm.Joint operations algorithm contains offensive, defensive and regroup operations.We compare JOA with six algorithms on 20 functions and four real-life problems.The experimental results show that JOA has the best overall performance.

@&#KEYPHRASES@&#
Joint operations algorithm,Meta-heuristic algorithms,Evolutionary algorithms,Swarm-based algorithms,Large-scale global optimization,

@&#ABSTRACT@&#
Large-scale global optimization (LSGO) is a very important but thorny task in optimization domain, which widely exists in management and engineering problems. In order to strengthen the effectiveness of meta-heuristic algorithms when handling LSGO problems, we propose a novel meta-heuristic algorithm, which is inspired by the joint operations strategy of multiple military units and called joint operations algorithm (JOA). The overall framework of the proposed algorithm involves three main operations: offensive, defensive and regroup operations. In JOA, offensive operations and defensive operations are used to balance the exploration ability and exploitation ability, and regroup operations is applied to alleviate the problem of premature convergence. To evaluate the performance of the proposed algorithm, we compare JOA with six excellent meta-heuristic algorithms on twenty LSGO benchmark functions of IEEE CEC 2010 special session and four real-life problems. The experimental results show that JOA performs steadily, and it has the best overall performance among the seven compared algorithms.

@&#INTRODUCTION@&#
Many real-life management and engineering problems are very complicated, due to the existence of lots of decision variables and different constraints. Traditional techniques are often failed to solve such problems, especially the high-dimensional with many local optima. As a result, many meta-heuristic algorithms have been proposed to tackle those complex optimization problems.Generally speaking, the existing meta-heuristic algorithms can be divided into two main categories: evolutionary algorithms and swarm-based algorithms. Evolutionary algorithms are generally inspired from biological evolution and apply an iterative progress to solve optimization problems. The most well-known paradigms of evolutionary algorithms contain genetic algorithm (GA) [1], differential evolution (DE) [2,3] and estimation of distribution algorithms (EDA) [4]. Over the past years, many researchers enhanced the mentioned evolutionary algorithms through various variants. Some of the recent enhancements are reported in [5–8]. Biogeography-based optimization algorithm (BBO) [9], based on the biology-interactions among living creatures in a habitat, is a new member of evolutionary algorithms. Swarm-based algorithms generally simulate the collective behavior of animals, such as birds, ants and bees. Particle swarm optimization (PSO) [10,11], ant colony optimization (ACO) [12] and artificial bee colony optimization (ABC) [13,14] are the most famous paradigms of the swarm-based algorithms which work on the foraging behavior of animals. These algorithms have been improved a lot and many variants of them have been introduced, e.g. DNSPSO [15], D-PSO-C [16], ACO-FA [17] and MCBA [18]. In addition, some novel swarm-based algorithms have been presented in recent literature, e.g. free search (FS) [19,20], which is based on the sense and mobility of animals; fish school search (FSS) [21,22], which is inspired by the collective emerging behaviors of fish schools. Recently, some new swarm-based algorithms based on human behavior instead of the collective behavior of animals are proposed, e.g. social-based algorithm (SBA) [23], which combines genetic algorithm and socio-political process based imperialist competitive algorithm [24]; group counseling optimizer (GCO) [25], which emulates the behavior of human beings in life problems solving through counseling within a group; teaching-learning-based optimization (TLBO) [26], which is based on the effect of the influence of a teacher on the output of learners in a class; exchange market algorithm (EMA) [27], which is inspired by the procedure of trading the shares on stock market.The above-mentioned meta-heuristic algorithms and their variants have been used extensively to solve many practical optimization problems, such as power system [28], dynamic scheduling [29], engineering optimization [30], machining parameters optimization [31,32], optical design [33–35], turning operations optimization [36–38], and so on. However, due to the difficulties of high dimensionality, multimodality, differentiability, strong epitasis, and ill-conditioning, which are associated with the practical optimization problems, it is still a challenging task to find out the global optimal solutions. Therefore, designing more effective algorithms is still a highly concerned direction in the current optimization domain.It is well-known that the efficiency of meta-heuristic algorithms relies on two important strategies in the search process: global exploration and local exploitation [39]. Unfortunately, global exploration and local exploitation often contradict with each other, and this conflict becomes especially incisive when handling large-scale global optimization (LSGO) problems. In this case, meta-heuristic algorithms need another important strategy who exists a great impact on the performance of meta-heuristic algorithms, which is an effective re-organization strategy applied to tackle the dilemma when the algorithms are trapped in a local optimum solution. In summary, a successful meta-heuristic algorithm relies on a suitable tradeoff between exploration and exploitation, and an excellent re-organization strategy.Based on the comprehensive consideration of the three mentioned strategies in meta-heuristic algorithms, we propose a novel algorithm to handle LSGO problems, which is called joint operations algorithm (JOA), and it works on the philosophy of the joint operations strategy [40,41] of multiple military units. The whole procedure of JOA mainly contains three important operations: offensive operations, defensive operations and regroup operations, which exactly correspond to exploration ability, exploitation ability and re-organization strategy in meta-heuristic algorithms, respectively. In order to evaluate the effectiveness and scalability of JOA, we adopt 20 well-known LSGO benchmark functions of the IEEE CEC 2010 special session (which are also used in IEEE CEC 2012) and four low-dimensional real-life problems to provide a comprehensive comparison among JOA and six excellent meta-heuristic algorithms. The experimental results not only show that our proposed algorithm obtains the best overall performance in the view of solution quality and convergence speed, but also show that JOA performs more steadily than its competitors when handling different problems. In addition, we analyze the function of each operations (offensive, defensive and regroup) and the robustness of control parameters, the results exhibit that each operations has important influence on the performance of JOA and its parameters are robustness.The remainder of this paper is organized as follows. Section 2 discusses the analogy between joint operations and meta-heuristic algorithms. Section 3 provides the detailed explanation of JOA. Section 4 describes the experimental setup. Section 5 presents experimental results and analysis. Section 6 gives the conclusions and suggestions for further work.In military science, in order to win the war, the troops often mobilizes multiple military units to participate in the war [42,43]. Joint operations is a familiar strategy adopted by the troops to accomplish a common target, which can reduce the duplication of effort and improve the chance of winning. Normally, there is a commander in the troops who instructs the joint operations, and every military unit has an officer who leads the soldiers within the military unit. The commander often assigns different military missions to the officers according to the current combat intelligence, and the soldiers belonged to specific military units will follow the order of their own officer to fulfil the given mission. For a single military unit, the most common military missions received from the commander are offensive operations and defensive operations, the former is the military operations to fulfil some specific missions through occupying a new region, while the latter is the tactic to defeat the attack from the enemy through building strong fortifications in the occupied region. For the commander, except for issuing the combat commands to the officers, there is another important duty, which is in charge of recovering the combat capability of the troops after failed offensive operations and defensive operations via regrouping the troops, next starting a new round of military operations.For most meta-heuristic algorithms, to have a high performance, an essential key is a suitable tradeoff between exploration and exploitation. Exploration represents the global search ability of meta-heuristic algorithms, which is used to reduce the chance of falling into a local optima through exploring new regions in the search space. Meanwhile, exploitation exhibits the local exploit ability of algorithms, which is applied to orient the search towards the global optima in a founded region. Generally speaking, an effective tradeoff between exploration and exploitation is enough for solving some simple optimization problems. However, when handling the LSGO problems, especially the problems that have many local optima, only depend on the abilities of exploration and exploitation is not enough, owing to that it is easy to arise the problem of premature convergence. Under these circumstances, the algorithms need an excellent re-organization strategy to help the trapped individuals escape from local optima.Reflecting on the nature and procedural viewpoint of joint operations, we can infer that there are many interesting aspects of analogy between joint operations and meta-heuristic algorithms. Obviously, the offensive operations, defensive operations and regroup operations in joint operations have the similar roles with the exploration ability, exploitation ability and re-organization strategy in meta-heuristic algorithms, respectively. These various aspects of resemblance, between the joint operations process and the meta-heuristic optimization process, pave the way for a novel meta-heuristic algorithm taken joint operations as the metaphor, which is named joint operations algorithm. We will give a detailed explanation for the proposed algorithm in the next section.In this section, we firstly provide the characteristic of the problems under investigation, secondly explain the specific operations of JOA in detail, thirdly summarize its overall framework, and then point out the salient features that distinguish JOA from the other meta-heuristic algorithms.Here, we mainly concentrate on the computational procedures of JOA and its characteristics from the optimization viewpoint. The optimization problems under investigation are a single-objective, unconstrained, continuous minimization problems. Without loss of generality, the optimization problems considered in this paper can be stated as follows:(1)minimizef(x)=f(x1,x2,…,xD)subjecttoxd∈[Ld,Rd],d=1,2,…,D.There is an objective function f(x), wherex=(x1, x2, …, xD) is a vector of D components, in which each individual component xdhas its own prespecified interval of values, respectively. Each interval is considered as the search range of xdand expressed as [Ld, Rd], where Ldand Rd, respectively denote xd's initial lower bound and upper bound.Like other meta-heuristic algorithms, the first step of JOA is to initialize the position of every soldier in the troops, next divide them into K military units where each military unit contains M soldiers. The position of the mth soldier in the kth military unit can be expressed asxmk=(xm,1k,xm,2k,…,xm,Dk), where m=1, 2, …, M, k=1, 2, …, K. The value of the dth componentxm,dkof soldierxmkis generated by the following formula,(2)xm,dk=Ld+rand[0,1]×(Rd−Ld),where rand[0, 1] is a random number generated from a uniform distribution within the range of [0, 1], and it has the same meaning in the following paragraphs. Subsequently, find out all the corresponding officers in every military unit and pick the commander from the officers according to the fitness values of soldiers. We denote the positions of officers and commander by vectorsxkO=(xk,1O,xk,2O,…,xk,DO),k=1,2,…,KandxC=(x1C,x2C,…,xDC), respectively.Offensive operations are one of decisive forms for winning the war. Typically, the commander assigns different offensive missions to the officers based on the current combat intelligence, next the officers lead their soldiers to accomplish their own missions. In order to simultaneously reflect the roles of commander, officers and soldiers, we ask that the commander is used to guide the offensive direction of each military unit, while the offensive distance of every soldier is determined by other two factors: the updated lower bound and upper bound (reflected the role of officers or the current combat intelligence) and a random number (described the individual differences among different soldiers).It is necessary to declare that the commander is one of the officers, which implies that there is a military unit who is affiliated with the commander. Therefore, the soldiers within this military unit generally receive the mission directly from the commander, and update their positions one by one according to the following formula,(3)xm,dk=xm,dk+rand[0,1]×(Rdk−xm,dk),ifxdC>xm,dk,xm,dk+rand[0,1]×(Ldk−xm,dk),otherwise.From the above formula (3), it is easy to see that the offensive direction of the dth component of the mth soldier relies on the difference between its current positionxm,dkand the dth component positionxdCof the commander, which means that if the commander stands on the right side of the soldier, moving to the right side is the soldier's appropriate choice, otherwise moving to the left side is the better choice for the soldier. This is easy to understand that the soldiers should keep the security of the commander. Furthermore, the current lower boundLk=(L1k,L2k,…,LDk)and upper boundRk=(R1k,R2k,…,RDk)of the kth military unit reflect its current combat intelligence, which is determined by the position of the corresponding officer and a dynamic parameter. In more details, they are computed as follow,(4)Ldk=xk,dO+Pt×(Ld−xk,dO),Rdk=xk,dO+Pt×(Rd−xk,dO),where t (t=1, 2, …, T) marks the current generation and T represents the maximum allowable generation. Ptis a dynamic periodic parameter, whose value in the tth generation can be obtained via the following formula,(5)Pt=|cos(t×F×π)|.In formula (5), |·| means the absolute value, and F is a user-specified constant, which denotes the frequency of the cosine function. It should be noted that Ptperiodically adjusts the scope of search space, which can dynamically alter the power of exploration and exploitation abilities. Generally speaking, this periodic adjustment is a good choice for balancing exploration and exploitation.For the soldiers that are not within the military unit directly under the commander, their new positions can be computed via the following formula,(6)xm,dk=xm,dk+rand[0,1]×(Rdk−xm,dk),ifxdC>xm,dO,xm,dk+rand[0,1]×(Ldk−xm,dk),otherwise.The only difference between the formulas (3) and (6) is the guide rule of each soldier's offensive direction. Owing to the fact that the commander only assigns the offensive mission to the officer, every soldier who is affiliated with the officer will follow the officer's lead. Thence, every soldier's offensive direction within the same military unit is determined by the positions of the corresponding officer and the commander. The corresponding lower boundLdk, upper boundRdkand dynamic periodic parameter Ptare identical with the military unit which is affiliated with the commander, and their values are obtained via the formulas (4) and (5), respectively. It should be noted that the direction selection rule in formula (6) will create an overall movement trend for all the soldiers within the same military unit. This overall movement skill has potential advantage in breaking new region in the search space, which means that the exploration ability maybe more powerful. Additionally, the usage of bound information (LkandRk) also provides better exploration ability than that the soldiers only move to the officer, owing to that the bound information increases the selection range of offensive distance.In addition, we adopt the idea of continuous generation model [44] to provide the JOA a better performance. Continuous generation means that a soldier immediately replaces the officer or the commander when the new position of the soldier is better than the corresponding officer or the commander. Usually, it is thought that the continuous generation model is better than the discrete model (when one soldier is better than the officer or the commander, but replaces them in the next generation), because the continuous generation can use the latest information, which has a potential advantage to enhance the efficiency of algorithm.For each military unit, the soldiers will try to build the strongest fortifications in their occupied region to prevent the enemy's attack. Actually, in order to achieve the best defensive effects and guarantee the officer's security, the soldiers must search for the optimal defensive position around the officer. Based on the aforementioned considerations, the candidate defensive positionumk=(um,1k,um,2k,…,um,Dk)of the mth soldier in the kth military unit can be obtained via the following formula,(7)um,dk=xm,dO+Pt×Gaussian0,(xm,dO−xm,dk)2,if(d=drandorrand[0,1]≤Pt),xm,dk,otherwise,whereGaussian0,(xm,dO−xm,dk)2is a random number sampled from the Gaussian distribution with mean 0 and standard deviation|xm,dO−xm,dk|, the value of dynamic periodic parameter Ptis also obtained via the formula (5), and drandis an integer randomly generated from the set {1, 2, …, D} which is used to ensure that at least one dimension is changed for a given soldier.Gaussian0,(xm,dO−xm,dk)2can ensure that the new dth position of the mth soldier in the kth military unit almost falls into a smaller range aroundxm,dOwhen meeting the condition (d=drandor rand[0, 1]≤Pt). It should be point out that for the soldiers, the periodic parameter Ptcan dynamically adjust their modified ratio of dimension and the scale of search range, which can regulate the exploration ability and exploitation ability of soldiers.The new position of each soldier in the next generation depends on the fitness of his current positionxmkand the generated candidate defensive positionumk. The selection formula can be described as follow,(8)xmk=umk,iff(umk)<f(xmk),xmk,otherwise.The selection formula (8) implies that the defensive operations should pay more attention to the exploitation work. Note that we also adopt the continuous generation model in the defensive operations.For the convenience of description, we don’t distinguish the soldier and his position anymore. The same usages are also applied to the officers and the commander. In our JOA, successful offensive operations and defensive operations mean that the troops can find a better soldier than the current officers or the commander. Otherwise, we call that the troops has lost its combat capability, and it is possible to drive the troops to revitalize once again by regroup operations. The triggering condition of regroup operations has an important effect on the performance of JOA, owning to that if the triggering condition is too easy to reach (e.g. the commander has no improvement in just one generation), the regroup operations will run frequently, which will weaken the exploitation ability, in contrast, if it is too hard to meet the triggering condition (e.g. there is no better soldier produced in many generations), it will only run a few times of the regroup operations, which will reduce the chance of escaping from local optima. To regulate and control the run times of regroup operations, the triggering condition in this study takes that none of the officers has been improved in one generation.We adopt a simple random permutation technique to realize the regroup operations. When meeting the triggering condition of regroup operations, execute the random permutation for the original sequence of all the soldiers and divide the soldiers into different military units according to the new rearranged sequence number. Followed by regroup operations, JOA will find out the new officer in each new military unit. It is observed that regroup operations is able to replace the original officers, meanwhile both the offensive operations and defensive operations have intimate connections with the officers, thus regroup operations has an important effect on the performance of JOA. However, since the regroup operations don’t need to evaluate the fitness values of soldiers, the regroup operations costs very few run time.We have provided a detailed description of offensive operations and defensive operations in Sections 3.3 and 3.4. Now, we provide the selection rule of evaluating offensive operations or defensive operations for a given military unit in the current generation, which can be described as follows,(9)Evaluatingoffensiveoperations,ifrand[0,1]<F,Evaluatingdefensiveoperations,otherwise,where F is a user-specified constant mentioned in the formula (5). Note that for any given military unit, its military operations choice (offensive operations or defensive operations) needs rejudge via the selection formula (9), which means that different military unit may evaluate different military operations in the same generation. Formula (9) also implies the weight allocation between offensive operations and defensive operations. Generally speaking, from the optimization viewpoint, to obtain high precision solution, the execution frequency of defensive operations should higher than offensive operations. Now we summarize the overall procedure of JOA in Algorithm 1.Algorithm 1The overall procedure of JOA1:Set the values of parameters M, K, Fand T;2:Initialize M×K soldiers with random positions via the formula (2);3:Divide the soldiers into K military units, and find out the officer in each military unit and the commander;4:for (t=1;t<=T;t++), do5:Compute the value of periodic parameter Ptin the t-th generation via the formula (5);6:for (k=1;k<=K;k++), do7:if the k-th military unit selects offensive operations based on the formula (9)then8:// Execute offensive operations:9:for (m=1;m<=M;m++), do10:Compute the current lower boundLkand upper boundRkvia the formula (4);11:iff(xkO)==f(xC), then12:Update the position of the m-th soldier via the formula (3);13:Update the positions of the officer and commander if the new soldier is better than them;14:else15:Update the position of the m-th soldier via the formula (6);16:Update the positions of the officer and commander if the new soldier is better than them;17:end if;18:end for19:else20:// Execute defensive operations:21:for (m=1;m<=M;m++), do22:Generate the candidate positionumkof the m-th soldier via the formula (7);23:Update the position of the m-th soldierxmkvia the selection formula (8);24:Update the positions of the officer and commander if the new soldier is better than them;25:end for26:end if;27:end for28:if no one officer obtains improvement in the current generation, then29:// Execute regroup operations:30:Generate a new sequence of the current M×K soldiers via random permutation;31:Divide the soldiers into K new military units, and find out the officer within each new military unit;32:end if;33:end for34:Output the position of the commander as the global optimal solution.Although JOA is a novel meta-heuristic algorithm, it has many common aspects with other meta-heuristic algorithms. For example, they all adopt the population-based stochastic search strategy and use the information of current members to update their self or generate the new members. Moreover, from the multi-swarm viewpoint, JOA has the similar framework and regroup operations with some meta-heuristic algorithms, such as biogeography-based optimization [9], dynamic multi-swarm particle swarm optimizer with a cooperative learning strategy [16], island model genetic algorithm [45], clan particle swarm optimization [46] and its variant with a dynamic migration mechanism [47], multiswarm cooperative multistage perturbation guiding particle swarm optimizer [48]. However, JOA has different specific regroup operations and distinguishing relationships among the operations from the aforementioned multi-swarm meta-heuristic algorithms.Here, we point out four main characteristic features of JOA which is different from other meta-heuristic algorithms. First of all, inspired by the resemblances between joint operations strategy and meta-heuristic algorithms, we take the joint operations strategy in military domain as a metaphor of meta-heuristic algorithms and introduce a novel meta-heuristic algorithms named JOA, which brings some interesting operations into meta-heuristic algorithms, such as offensive operations, defensive operations and regroup operations. Secondly, a novel dynamic adjustment strategy realized by a periodic parameter Pt(obtained via the formula (5)) is used to coordinate the abilities of exploitation and exploration in both offensive operations and defensive operations, which may have potential advantages in balancing the exploitation and exploration. Thirdly, offensive operations simultaneously applies dynamic bound information (LkandRk, which is produced via the formula (4)) and the overall movement trend caused by the direction selection rule in the formula (6) to enhance the exploration ability, which is a new try. At last, although Gaussian distribution has been widely used in meta-heuristic algorithms [49,50], as far as we know, the concrete form of Gaussian strategy (reflected in the formula (7)) used to produce the candidate positions of the soldiers in defensive operations is novel, which has not been proposed in the existing algorithm literature.The salient features of JOA mentioned above show that JOA clearly differs from the existing meta-heuristic algorithms. These differences between JOA and other meta-heuristic algorithms may become its competitive advantage. We believe that JOA will become one of the most appropriate algorithms when handling some types of optimization problems.In this section, we will introduce the test functions, real-life problems, and the compared algorithms used in the comparative experiments.In order to evaluate the performance of JOA, we apply a set of 20 well-known benchmark functions and four widely used real-life problems to do a comparative experiment. The 20 benchmark functions were proposed in the IEEE CEC 2010 [51] and also used in IEEE CEC 2012 special sessions on LSGO problems, and they can be classified into five groups: separable functions (f1–f3), single-group N-nonseparable functions (f4–f8),D2N-groups N-nonseparable functions (f9–f13),DN-groups N-nonseparable functions (f14–f18) and nonseparable functions (f19–f20). The mentioned D is the dimension of the functions and N is the number of variables in each nonseparable subcomponent. In this comparative experiment, D and N are set to 1000 and 50, respectively.The first real-world problem (rf1) is an application of parameter estimation for frequency-modulated sound waves, and the second real-world problem (rf2) is an application to spread spectrum radar poly-phase code design, which are the problems no. 1 and no. 7 in IEEE CEC 2011 [52], respectively. The third one (rf3) is an application to solve systems of linear equations [53]. The fourth one (rf4) is an application of parameter optimization for polynomial fitting problem [54].In the comparative experiments, JOA is compared with six other recently proposed meta-heuristic algorithms, which contain two variants of differential evolution (dynamic group-based differential evolution (GDE) [7] and sinusoidal differential evolution (SinDE) [8]), two variants of particle swarm optimizer (particle swarm optimizer with a diversity enhancing mechanism and neighborhood search strategies (DNSPSO) [15] and dynamic multi-swarm particle swarm optimizer with a cooperative learning strategy (D-PSO-C) [16]), and two novel algorithms (free search (FS) [20] and social-based algorithm (SBA) [23]). Note that particle swarm optimizer and differential evolution are the most successful paradigms of evolutionary algorithms and swarm-based algorithms, respectively. Furthermore, all of SBA, D-PSO-C and GDE adopt the multi-swarm strategy, and D-PSO-C applies a similar regroup operations with JOA. Therefore, the selected compared algorithms have enough ability to prove the effectiveness of JOA.The parameter configurations of the above-mentioned compared algorithms keep the same with the corresponding literature. There are three user-specified control parameters in our JOA, such as the frequency of the cosine function (F), the number of military units (K) and the number of soldiers in each military unit (M). The values of parameters will keep no change for all the used test functions, F is set to 0.006, and the population size of JOA is equal to 50, which is divided into 5 military units and each military unit contains 10 soldiers. In addition, all the compared algorithms are tested 50 independent runs for every function and the mean results are used in the comparison, and the maximum number of function evaluations is set to 5000×D in each run for each test function and problem, hence the maximum allowable generation T equals to 100×D in our JOA.

@&#CONCLUSIONS@&#
Due to the diverse applications, it is important to propose more effective and robust algorithms for large-scale global optimization (LSGO) problems. In this paper, we have proposed a novel meta-heuristic algorithm, which takes the joint operations strategy in military domain as the metaphor and is called joint operations algorithms (JOA). In JOA, we apply offensive operations and defensive operations to balance the exploration ability and exploitation ability, and use regroup operations to reduce the chance of falling into local optima. To verify the effectiveness and robustness of JOA when handling LSGO problems, we adopt the IEEE CEC 2010 benchmark functions and four real-life problems to compare JOA with six excellent meta-heuristic algorithms. The experimental results show that the proposed JOA significantly outperforms other compared algorithms. Furthermore, JOA achieves higher solution accuracy and stronger algorithm reliability. In conclusion, JOA obtains the best overall performance among the compared algorithms and it will become a very promising algorithm.Future works may focus on three aspects. Firstly, the proposed JOA can be improved to handle constraint optimization and multimodal optimization problems. Secondly, it would be interesting to test whether JOA can handle the multiobjective and dynamic optimization problems, effectively. Thirdly, the JOA will also be applied to some real-life optimization problems.