@&#MAIN-TITLE@&#
Multi-agent based approach for single machine scheduling with sequence-dependent setup times and machine maintenance

@&#HIGHLIGHTS@&#
A multi-agent based optimization approach is proposed for single machine scheduling problem.Machine scheduling is performed under regular and irregular maintenance activities.Single machine is scheduled when the job arrivals are dynamic.A scheduling model for real-time manufacturing environments is proposed.Distributed optimization is used for single machine scheduling.

@&#KEYPHRASES@&#
Multi-agent based optimization,Single machine scheduling,Sequence-dependent setup,Machine maintenance,

@&#ABSTRACT@&#
Scheduling of single machine in manufacturing systems is especially complex when the order arrivals are dynamic. The complexity of the problem increases by considering the sequence-dependent setup times and machine maintenance in dynamic manufacturing environment. Computational experiments in literature showed that even solving the static single machine scheduling problem without considering regular maintenance activities is NP-hard. Multi-agent systems, a branch of artificial intelligence provide a new alternative way for solving dynamic and complex problems. In this paper a collaborative multi-agent based optimization method is proposed for single machine scheduling problem with sequence-dependent setup times and maintenance constraints. The problem is solved under the condition of both regular and irregular maintenance activities. The solutions of multi-agent based approach are compared with some static single machine scheduling problem sets which are available in the literature. The method is also tested under real-time manufacturing environment where computational time plays a critical role during decision making process.

@&#INTRODUCTION@&#
Scheduling problems are often found in various businesses and industrial application areas [1]. Real world scheduling problems sometimes differ from the ones for which there exist many algorithms to solve. However, real world scheduling problems are generally much more complex than the ones being solved in theory. Job scheduling problem is one of the instances. It belongs to the well-known combinatorial optimization problem domain. In practice, coordination of the jobs and machines under complex business environment is a challenge. Some of the sources of difficulties could be given as; machine non-availability, unexpected event occurrence, sequence-dependent setup times and unpredictable order arrivals[2–8].Machine non-availability: It is generally assumed that machines are available at all times. However, in practice machines are not continuously available. There are many reasons why machines may not be in operation. Some of the reasons are based on a deterministic process, others on a random process. The most commonly encountered type of machine non-availability is preventive maintenance activities. As a complex system with multiple components usually deteriorates with age, preventive maintenance is often performed to keep the system functioning in a good state to prolong its effective age [3]. Preventive maintenance tasks are performed when the machines are idle and it represents one of the deterministic sources for machine non-availability [4]. In some manufacturing environments, there may be a need for maintenance before the maintenance program is reached due to aging factors of jobs. This problem type is similar to capacitated vehicle routing problem where the vehicles must return to depot after loading/unloading of their loads. In such conditions both programmed maintenance and un-programmed maintenance activities must be considered simultaneously. Whenever total aging level of the machines reaches to a point, then the machines require maintenance. In this paper it is called maximum aging capacity of the machines. Each job consumes the aging capacity of the machine according to its processing characteristic. Maintenance activity is performed when maximum aging capacity or the programmed maintenance is reached.Unexpected event occurrence: In most real-world manufacturing environments, scheduling is an ongoing reactive process where the presence of a variety of unexpected disruptions is usually inevitable. Unexpected disruptions continually force reconsideration and revision of pre-established schedules [5]. Order cancelations and machine breakdowns are two commonly encountered sources of unexpected events in machine scheduling. The complexity of the problem increases by considering the revision and reconsideration of any pre-established machine schedule.Sequence-dependent setup times: In manufacturing environments setup of the machines while changing from a job to another has also a considerable effect on completion time. The complexity of the problem increases by considering the sequence-dependent setup time [7].Unpredictable order arrivals: Some of the orders may arrive to manufacturing system while the system is operating [8]. The complexity of the problem increases by considering dynamic arrival of the orders to the manufacturing environment.Real manufacturing environments could face with all these aforementioned factors and some others such as uncertainty of job processing time which are not in the scope of this paper. The problem of single machine scheduling with maintenance is proved to be NP-hard even though the sequence-dependent setup times and other factors are not considered [9].Multi-agent systems, a branch in artificial intelligence, provide a new way for solving distributed, dynamic and hard problems. In artificial intelligence an agent is defined as anything that can be viewed as perceiving its environment through sensors and acting upon that environment through actuators [10]. This capability makes multi-agent software entities a good candidate to handle the distributed, dynamic and complex problems. In this paper, a multi-agent based approach where each block between maintenance activities and jobs are designed as autonomous agents is proposed. The proposed approach enables scheduling single machine when arrivals of jobs are dynamic without a need of re-modeling and re-solving the problem centrally. Distributed and autonomous mechanism of blocks and jobs could be thought as the contribution of this paper where it enables a dynamic and real-time scheduling. The approach uses the flexibility of decentralized control systems with its distributed block and job agents. A mixed-integer linear model is solved by the agent types defined in this approach. Therefore the agents in this present approach support their decision with optimization method. The agents consider their integral part of local optimization problem. In this paper, the main goal is to find fast, adaptive and effective solution to dynamic single machine scheduling problems. The proposed approach uses operations research (OR) and multi-agent system methods to cope with the dynamic nature of machine scheduling problem.The paper is organized as follows: in Section 2, state of the art about this domain is given. Section 3 introduces multi-agent systems, Section 4 shows the problem definition, Section 5 presents the proposed approach, Section 6 shows some computational experiments for the proposed approach and Section 7 summarizes the paper.Single machine scheduling problem has attracted the attention of many researchers. There is a wide variety of research area in single machine scheduling problem which spans from job due dates consideration to past-sequence-dependent delivery times of the jobs where the adverse effects of waiting are incorporated into a post-processing operation by introducing the concept of past-sequence-dependent (p-s-d) delivery time [11,12]. However, there are rare studies for single machine scheduling problem which consider machine maintenance. There is not a study which considers single machine scheduling problem together with regular and irregular maintenance activities. In many of the previous studies researchers generally considered single maintenance activity throughout the entire manufacturing process. The proposed algorithms face difficulties for the long term scheduling due to their central structure.Chen [13] dealt with the problem of scheduling non-resumable jobs on a single machine with flexible and multiple maintenance activities. If a job cannot be completed before the unavailable period, then it must be restarted rather than continued, a case called non-resumable. The resumable case is that where a job can continue after the machine becomes available again. There are also some studies which consider scheduling problems with at most one maintenance period [14–16]. Low et al. [17] considered the availability constraint of job deterioration. Mosheiov and Sarig's research [18] on the problem of scheduling concentrates on a maintenance activity in a single machine with the objective of minimizing the total weighted completion time. There are some studies for machine scheduling which consider the maintenance cost as well [19]. In their paper, Sarker et al. [2] proposed a hybrid evolutionary algorithm for job scheduling under machine maintenance. They proposed a reactive scheduling algorithm under expected and unexpected machine unavailability. They considered unexpected machine unavailability in their paper. However, they used a central searching algorithm where re-schedule is done centrally.Multi-agent based systems are rarely employed for manufacturing environments and machine scheduling domain. One of the rare studies in this domain is presented by Khelifati and Benbouzid-Sitayeb [20]. They proposed a distributed approach which is using multi-agent paradigm for scheduling independent jobs and maintenance operations in the flow-shop sequencing problem. Qin and Li [21] used ILOG and multi-agent based framework for job-shop scheduling system. Duan et al. [22] proposed a negotiation-based optimization method for scheduling of a manufacturing system. There are two main agent types in their paper which are manufacturers and suppliers. In their paper, Erol et al. [23] proposed machine scheduling together with the automated guided vehicles (AGVs) in a flexible manufacturing environment. In their paper, Lou et al. [24] presented a multi-agent-based proactive-reactive scheduling for job shop scheduling problem. Hercog [25] proposed a better manufacturing process organization using multi-agent systems. Polyakovskiy and M’Hallah [26] proposed a heuristic which is based on multi-agent system to solve weighted earliness tardiness parallel machine problem. Henchiri and Ennigrou [27] proposed a multi-agent model based on hybridization of tabu search method and particle swarm optimization in order to solve flexible job shop scheduling problem (FJSP). Wang and Chen [28] designed a multi-agent scheduling mechanism based on an iterative combinatorial auction to deal with parallel machine scheduling with controllable processing times. Grimme et al. [29] presented an agent-based approach to multi-criteria machine scheduling problem. Savino et al. [30] proposed an agent system for a multiple-objective flow-shop scheduling problem in a production context characterized by diversified, high-volume production mix.Chen and Wang [1] suggested a collaboration framework of an agent-based intelligence system that can handle the problem-solving of distributed project in real situations. Their paper is one of the most relevant papers in the literature. In their paper, they used a two-stage decision-making process applied to dynamic scheduling in the system through the fuzzy decision-making. They used multi-agent system paradigm for dynamic multi-contract project scheduling where there exist several independent, specialized and distributed subcontractors during project management process. The model that they offered is similar to the proposed approach given in this present paper; both of the papers consider solving dynamic scheduling problem by using multi-agent systems. However, in their study there is more than one party (general contractor, subcontractors and their subcontractors) in the model. The system is used to control and resolve the difficulties for project participants in distributed projects, especially focusing on the dynamic solving of the scheduling problem. Fuzzy decision-making and the compensatory negotiation processes are used by the agent types. The methodology of Chen and Wang [1] and of this present paper can maintain a high degree of openness and flexibility due to their programming structure. Both studies use Java programming language and its standards as agent programming language. However, in this present paper, the reasoning of job assignment is designed for single-machine within a manufacturing environment. There are some logical parties which collaboratively try to find a dynamic schedule for single machine scheduling problem with sequence-dependent setup times and machine maintenance activities while the system is operating.Nowadays, agent systems are used to resolve scheduling problems in some work environments. Agent systems can be used as online scheduling methods [31]. An agent is a type of software that can autonomously perform routine tasks with a degree of intelligence [32]. Agents are also considered as social, because they cooperate with humans or other agent types in order to achieve their tasks. Additionally, agents are reactive, because they perceive their environment and respond in a timely fashion to changes that occur in the environment. When an agent is instantiated, it will wait until it is given a goal to achieve or experiences an event that it must respond to [33].When many agents operate as a collaborator or competitors, it is called multi-agent systems (MAS). MAS are a collection of organized, intelligent and autonomous software agents that work together or compete to find answers to problems that are complex for a single software agent to solve [23]. There are so many different application areas of MAS from supply chain management to human spatial behavior modeling, unmanned vehicle control systems and cloud systems [34–36].MAS can also be used as online scheduling methods [37]. Machine scheduling domain seems very suitable for agent research when all the definitions and characteristics of agent and/or multi-agent based systems are considered. Machine scheduling domain could be considered as decentralized, distributed and dynamic. MAS have become increasingly popular among decentralized control systems since these systems are designed to operate under distributed and autonomous business conditions [38]. MAS could be considered for controlling job orders in a dynamic, volatile and distributed manufacturing environment. It could be stated that MAS can help to solve dynamic single machine scheduling decisions when regular and irregular maintenance activities are considered. The reasons for why multi-agent based systems are suitable for machine scheduling domain could be listed as:•The domain is inherently distributedHuman-experience (intelligence) is used for planning operationsHigh amount of environmental factors exist (worker unavailability, machine failure, rush jobs, job cancelation, due date changes, etc.)Need for a cooperation among the partiesOrganizational units like planners, machines, jobs, blocks, etc., may be represented as agents. After representing them as an agent type the capabilities of agent systems could be used to make scheduling units to compete, cooperate and find optimal (or near optimal) solutions in a dynamic way.In this research domain there is an undefined set of jobs arriving to a single machine manufacturing environment. Before a job is processed on a machine a setup time is required. Setup time depends on the previously processed job on the machine. Additionally, regular and irregular maintenance activities are required for the machine. Whenever total aging of the machine reaches to a defined level then machine requires maintenance. In this paper it is called maximum aging capacity of the machine and notated by W. Periodic maintenance is executed for every T time units. Block term is used to represent time interval between two consecutive maintenance activities whether regular or irregular. Fig. 1shows the problem structure.Fig. 2shows an example of a block schedule. The schedule is obtained separately for each block available in the system whether its length is T or smaller than T. The notation Lmis used for the variable-size block length, where Lm≤T. Time slots between jobs show the setup times between any consecutive jobs. It is also possible that there may be idle slots before a maintenance activity.The characteristics of the problem are as follows:•There are indefinite number of jobs arriving to the manufacturing environmentEach job j has an associated processing time pjEach job j has an associated setup time based on its predecessorThe jobs cannot be interruptedTime periods between maintenance activities (Lm) are variable in their lengthThe number of blocks used in the schedule is unknownThe notations used in this research are as follows:Jj=job number j.pj=processing time of job j.sij=setup (preparation) time that depends on the job i processed just before job j.si0=preparation time before maintenance.s0j=preparation time after maintenance.wi=aging weight of job i.W=maximum aging capacity of a machine before maintenance.T=time interval between two consecutive regular maintenance activities.An oriented graph is used to define the problem. Let G=(V,A) be an oriented graph, V={0,1,…,n}s are the set of nodes and A is the related set of arcs. cij≥0 is the associated weight of arc(i,j). cijis defined as sum of the time required to prepare the machine and to process the job just after job i. Then cij=sij+pj. Fig. 3tries to show the meaning of parameter W which holds the maximum aging capacity of a machine before a maintenance activity.The objective could be given as; to assign dynamically arriving jobs to the blocks between regular and/or irregular maintenance activities in such a way that the last job on hand finishes as soon as possible that is, minimizing Cmax.Agent architectures are the fundamental mechanisms underlying the autonomous components that support effective behavior in real-world, dynamic and open environments. Agent architectures can be divided into four main groups: logic based, reactive, belief-desire-intention (BDI) and layered architectures[39]. In this research BDI architecture is used to model the proposed problem because there are many effective available technologies for this architecture such as JACK™. The JACK™ Agent Language is an Agent Oriented programming language and is used for implementing agent oriented software systems. It also has its own modeling interface which runs under BDI architecture. Following the BDI model, JACK™ intelligent agents are autonomous software components that have explicit goals to achieve and events to handle. BDI agents are programmed with a set of plans in order to achieve these desires. Each plan describes how to achieve a goal under varying circumstances. Set to work, the agent pursues its given goals (desires), adopting the appropriate plans (intentions) according to its current set of data (beliefs) about the state of the world. This combination of desires and beliefs initiating context-sensitive intended behavior is a part of what characterizes a BDI agent [40].The proposed approach consists entirely of BDI agent types and BDI agent types are implemented on JACK™. Each agent type surrogates real-life components of machine scheduling. Blocks between maintenance activities, jobs, job dispatchers and resource managers are represented as BDI agent types in the proposed approach. Unexpected events are represented as event types. Top-most view of the proposed multi-agent based approach is given in Fig. 4and agent type definitions are given in Table 1.After introducing the agent types, their conceptual designs and implementation on JACK™ are illustrated in this section of the paper. Fig. 5depicts the flow diagram of the proposed approach.Whenever a new job is received from the manufacturing system a new job agent is dynamically created by the job dispatcher agent. Its function is to create job agents and release them to system to interact with machine block agents. The information about job which is dynamically arriving to manufacturing system is packaged and sent to the job agent after creating it. Fig. 6shows job dispatcher agent design view on JACK™ agent development environment. Fig. 7shows plan editor of JACK™ for CreateJobAgentPlan of job dispatcher agent.Job dispatcher agent provides a list of machine block agents to job agents. It has a list of machine block agents on its beliefset and provides a list to the newly created job agents. Job agents negotiate with machine block agents according to list provided by the job dispatcher agent.Resource manager agent controls the creation of machine block agents. When job agents are rejected by all of the machine block agents then a new machine block agent is created by resource manager agent.Thegoalof the machine block agent is to respond to call for proposals (cfp) of job agents with a minimum completion time. Machine block agent can make its own reasoning while making the job assignment decision. Machine block agent sends its decision about assignment to the related job agent. Fig. 8shows the interaction protocol between machine block agent and job agent types.When a job agent j enters to the system it has to bid to machine block agents for a call for proposal (cfp). As presented in Fig. 8, the job agent entering to system calls for a proposal to the machine block agents which are provided as a list by job dispatcher agent. If there are m numbers of machine block agents in the list provided then job agent calls for proposal to these m blocks within the system. n denotes the number of machine block entities which are responding to the call for proposal. i is the number of rejection, a is the number of machine block agents which accepted the cfp. k is the rejection number and l is the number of acceptance of job agents a-base case.After the acceptance of a job agent by a machine block agent, schedule of the respective block is re-built. The proposed approach is designed for dynamic and open systems where job cancelations may occur. The proposed system supports re-scheduling of the blocks and job change mechanism. Therefore machine schedule is temporary till the end of processing of all jobs on machine.The negotiation protocol is implemented on JACK™. Fig. 9shows the implementation of interaction protocol between job and machine block agents.Job agents use instructions given below to start negotiation of an assignment. The assignRequestET event type carries the data about the job agent to the machine block agent. Job agent uses the following instruction to make a cfp to machine block agent.postEvent(assignRequestET.request(mb[i],j));vectorList.add(mb[i]); numberOfSent++;In this instruction, mb[i] parameter holds the address data of the machine block agent. Machine block agent evaluates the proposal of job agent after it is called for proposal with assignRequestET event. Reasoning mechanism of machine block agent is given in Fig. 10. Machine block agent runs four different plans simultaneously. It selects one of the plans based on its reasoning.Fig. 10 shows four different plans of machine block agent. The plans are; Optimize, ApplyMetaHeuristics, ApplyRandomSearch and InsertToEndOfTheBlock.The Plan class in JACK™ describes a sequence of actions that an agent can take when an event occurs. Whenever an agent is posted an event, it tries to find a plan to handle the event. Plans describe, in explicit detail, exactly what an agent should do when a given event occurs. Equipped with a set of plans, an agent has a set of skills and procedural knowledge that it can draw upon as required. When the event that a plan addresses occurs, the agent can execute this plan to handle it. Each plan is capable of handling a single event. The event is identified by the plan's #handles event declaration [40].Multi-agent approach gives reasoning capability to the entities defined in the system. Machine block agent could change its computation method while it is processing a call for proposal. Fig. 11shows possible states of a machine block agent. Machine block agent could be in states of; waiting for call for proposals, computing a previously accepted job agent request, interrupted with a newly arriving job agent cfp or applyNewPlan. While in any state, machine block agent could shift to another state. The states are called threads in computer programming. Fig. 11 is showing the shifting mechanism between the threads of execution. As an example, let's assume machine block agent is in computing state then machine block agent could select optimize, applyMetaHeuristics, applyRandomSearch or insertToEndOfTheBlock plans. If optimize plan is selected then machine block agent starts applying this plan. During optimize plan is running, a new job agent request might interrupt machine block agent. In this case, machine block agent could change its plan from optimize to applyMetaHeuristics because of computation time consideration. This mechanism is contributing machine block agent to shift from optimize plan to applyMetaHeuristics plan without losing any computational time. JACK™ is providing plan editor to define shifting conditions from one plan to another (see Fig. 10).Machine block agent makes its reasoning based on relevant(), context(), body() and fail() methods. Machine block agent posts the following message to itself to run the optimize plan as following:@post(optET.OPTIMIZE(ev.data));Machine block agent makes its reasoning with context() method to make the decision of optimization. If the context() method approves the relevance of the method then body() method ask optET event instance to find the optimum completion time for machine block agent by using a pre-packaged mathematical solver.Machine block agent holds the jobs data which are previously accepted. Fig. 12represents list of previously accepted job agents by machine block agent.Each machine block agent holds the data about jobs in a 4-tuple data structure which are job processing time (p), job set-up time (s), aging factor of job agent (w) and effect of job agent to block entity (e).Machine block agent makes its own reasoning to decide whether to choose Optimize, ApplyMetaHeuristic, ApplyRandomSearch and InsertToEndOfTheBlock. These plans are decided by the parameters given before the program run. If the number of job agents in the schedule of machine block agent exceeds parameter τ then ApplyMetaHeuristic plan is applied. If number of job agents in schedule of machine block agent exceeds the parameter ψ then ApplyRandomSearch plan is applied with a computation time parameter γ, if previously accepted job agents are fixed with their schedule then InsertToEndOfTheBlock plan is used by the machine block agent. This plan is executed when machine block agent is requested to fix the job schedules (if required in real-time execution of the program).Whatever the plan selected machine block agent calculates the effect of job agent (ej) which is calling for proposal. The following equation is used to calculate the effect of a job agent which is calling for proposal to a particular machine block agent.(1)eib=Cmaxib−Cmaxbwhere eibis the effect of job agent i to machine block agent b. Cmaxibis the completion time of machine block agent b after accepting job agent i. Cmaxbis completion time of machine block agent b before accepting job agent i.If it is not feasible for machine block agent to accept the job agent calling for proposal, Eq. (1) is not run by machine block agent and refusal message is sent to relational job agent (see Fig. 8).Machine block agent tries to find its minimum Cmax value. It solves the problem with aggregated jobs in its list upon running its optimization plan. Machine block agent uses the following notation and formulation in order to find the optimum sequence of jobs [41]:xij=1,if arc(i,j)is used in the machine block agent0,otherwiseui=auxiliary variable to schedule all the jobs in machine block agent listThen, the mathematical model of machine block agent is;minz=∑in∑jncijxij(Constraint 1)∑i=1nxij=1(forj=1,2,…,n)(Constraint 2)∑j=1nxij=1(fori=1,2,…,n)(Constraint 3)ui−uj+nxij≤n−1(fori≠j;i=2,3,…n;j=2,3,…,n)(Constraint 4)∑in∑jncijxij≤T(fori=1,2,…,n;j=1,2,…,n)(Constraint 5)∑in∑jnwixij≤W(fori=1,2,…,n;j=1,2,…,n)(Constraint 6)Allxij=0or1,Allui≥0cijand wiare the coefficients in the model. (Constraint 1) and (Constraint 2) impose the assignment of each job agent in the machine block agent list. (Constraint 3) eliminates the sub-tours in the model. (Constraint 4) enables scheduling to finish within the time duration of T and (Constraint 5) enables the total weights of the jobs not to exceed aging capacity of machine block agent.Machine block agent solves the mathematical model given above and if possible it finds the optimum sequence of jobs on its own schedule.Machine block agent type could use optionally many different computational algorithms in order to insert more job agents to its schedule. The proposed multi-agent based approach is capable to articulate any algorithm to its plans. The most advantageous part of multi-agent based systems is their capability of extensibility. Any alternative algorithm could be used (plugged) without making a serious change in the system. This makes the approach extensible and open for improvement. Due to its effectiveness in scheduling and easiness to implementation, simulated annealing algorithm is preferred in this research as an algorithm to find schedule for each machine block agent when optimize plan is failed.Ever since its introduction, based on the joint efforts by Kirkpatrick et al. [42], simulated annealing (SA) algorithm has produced good results for large combinatorial optimization problems. SA algorithm is very successful algorithm particularly in scheduling problems [43]. It can be viewed as an analog of an algorithm used in statistical physics for computer simulation of the annealing of a solid to the state with minimum energy [44]. It has the capability of jumping out of the local optima for global optimization. This capability is achieved by accepting neighboring solutions which are worse than the current solution with a probability. The acceptance probability is determined by a control parameter (Temperature) which decreases during the SA procedure [45]. Starting from an initial solution, simulated annealing generates a new solution Snew in the neighborhood of the original solution S. Then, the change of objective function value, Δ=f(Snew)−f(S) is calculated. For a minimization problem, if Δ<0, the transition to the new solution is accepted. If Δ>0, then the transition to the new solution is accepted with a probability, usually denoted by the function, exp(−Δ/T), where T is a control parameter called temperature. SA algorithm generally starts from a high temperature and then temperature is gradually lowered. At each temperature, a search is carried out for a certain number of iterations, called the epoch length. When termination condition is satisfied, the algorithm terminates [43].Each machine block agent uses SA algorithm when the optimization plan is failed. In SA algorithm, the choice of neighborhood can greatly influence the success of the algorithm. In this work, neighbor solutions are generated by a swapping procedure that is defined as follows:Step 1:Select a job agent position randomly.Determine a second position randomly from machine block agent schedule and swap the job agents in these positions.Swapping procedure is represented in Fig. 13.SA algorithm generally starts from a high temperature and then the temperature is gradually lowered. The initial temperature should be high in order to accept the generated solutions randomly (by getting closer to acceptance probability of 1). Estimation for the initial and final value of the temperature can be made by using the following equations [45]:(2)Tin=(fmin−fmax)lnPc(3)Tf=(fmin−fmax)lnPfwhere fmin and fmax are the lower and higher bounds for a given machine block agent schedule, Pcis the initial probability of acceptance and Pfis the final probability of acceptance.Temperature is reduced by a constant α which is calculated with the following equation of Bennage and Dhingra [46];(4)α=lnPclnPf1/elmax−1where elmax is the number of temperature reduction cycles (max number of iterations). When the number elmax is reached then the algorithm terminates. The final temperature could be calculated with Eq. (5). If final temperature is different from the one found in Eq. (3) then modifications could be done for elmax[45](5)Tf=Tinαelmax.Job agent is an agent type that stands for the dynamically arriving jobs. Job agents are created by the job dispatcher agent after they are accepted by system. Job agents send cfp to machine block agents then wait till receiving all the responses from machine block agents which are previously called for a proposal. It aggregates all the responses and then finds the machine block agent which proposes the minimum effect value. It sends message of acceptance to one which proposes with minimum effect value and refuses proposal of the others (see Fig. 8). After doing that, job agent waits until receiving the message of completion from its predecessor job agent. Job agents are sent a message from resource manager agent when there is a machine breakdown. Job agents wait accordingly in the case of machine failure. When the machine starts its operation after reparation, resource manager agent sends the message of operation to job agent.After being accepted by a machine block agent, job agents sleep for a time period during their execution lifecycle. They start negotiation with machine block agents after their sleep period. Sleep time for job agents are represented with μ. Job agent thread execution cycle could be seen in Fig. 14.While waiting to its turn on a machine an order cancelation event might occur (see Fig. 4). When an order is canceled by a customer then the job dispatcher agent sends message of cancelation to canceled job agent. Canceled job agent runs its cancelation plan and sends machine block agent to update its schedule after its removal.When a job agent is canceled, respective machine block agent is alerted about the effect values of the other job agents in its schedule. Let M is the set of available machine block agents in the system and S is set of job agents in the machine block agent m schedule then M={m1,m2,…,mn} and S={j1,j2,…,jt} where n is number of available machine blocks and t is number of job agents in machine block agent m.Let jcbe the canceled job agent in machine block agent m, then job agents in set S\jcare updated with a new ejvalue and they re-negotiate with machine block agents in set M\m in order to find a better machine block agent. Job agents start negotiation with machine block agents autonomously.This capability of the proposed multi-agent based approach helps manufacturing system to react without doing an entire re-scheduling. In dynamic case whenever an order cancelation event occurs then the content of the relational machine block agent is updated. Machine block agent runs its plans (optimize, applyMetaHeuristics, applyRandomSearch or insertToEndOfTheBlock) to update ejvalues.Fig. 15shows how job agents re-negotiate with machine block agents when RemoveFromSchedule plan is executed. As a result of re-negotiation it is possible to change job agents among machine block agents. It results in a self-emerging scheduling where there is no need for central scheduling for all blocks and jobs. Fig. 16shows an example change process between machine block agents after a series of job agent–machine block agent negotiations. There are two different machine block agent schedules in Fig. 16. Job agents j3 and j4 moved from machine block agent 1 to machine block agent 2 after re-negotiation.Some benchmark tests are run in order to evaluate the contribution of the proposed approach to single machine scheduling with both regular and irregular maintenance activities under dynamic and static circumstances. In general, optimal solutions can only be computed if a problem is treated as a closed scheduling problem. However, most of the real-industrial problems could be handled with a dynamic model. Proposed agent based optimization approach could be used for both static and dynamic cases. In the case of static scheduling problem the proposed approach does not challenge the full expressiveness of a dynamic system. The performance of the approach for static problems could be dominated by other central static algorithms. The biggest opportunity of the proposed system is its ability to response newly arriving job requests quickly. When any job request is received by the agent based system it is directly fit to a proper block agent. This advantage could be called “living system” that the real manufacturing environments need.Computational experiment section is divided into two main parts: in the first part, the proposed multi-agent based approach is tested with some static problem sets. In this part, two types of experiments are conducted. First type of experiments considers machine scheduling without aging capacity. The results of Angel-Bello et al. [6] could therefore be compared with it. In the second type of the experiment, the machine utilization weights of the jobs are also considered during the scheduling of the job entities on blocks. In the second part of the computational experiment section, the system is tested under dynamic manufacturing environment. In this part full expressiveness of the dynamic system is used to show the capabilities of the proposed approach.In the first type of experiments, the machine scheduling is done without considering the aging capacity of the machine. W parameter in the mathematical model and simulated annealing algorithm is given a big number in order to ignore the aging capacity. Only periodic maintenance activities are considered.Previous study of Angel-Bello et al. [6] is very helpful to show benchmarks for the proposed approach. The model proposed in their paper was about scheduling machines with periodic maintenance and sequence-dependent setup times. In their paper, Angel-Bello et al. [6] use asymmetrical vehicle routing problem (AVRP) set to test their heuristic approach. Test sets could be obtained from the link [47]. The first element in these problem sets is considered as the maintenance activity and loads are considered as a job which will be processed on a single machine. The distances between load pickup points are considered as cijfor the test runs in terms of seconds.In all the experiments, machine block agents use Gurobi 5.5 Solver Package to find optimum schedules and simulated annealing as a meta-heuristic in their plans.The T values which define the block length are determined by using a dmparameter. dmis the maximum of the values of cijin the problem set. Angel-Bello et al. [6] determined T values where T≥2dm. For different tightness levels T took values: 2.25dm, 2.5dm, 3dm, 4dm.To illustrate the performance of the proposed approach an example solution could be given. In this example, simulated annealing parameters are obtained as following; Pcand Pfare assumed as 0.99 and 10−15, respectively. Value of (fmin−fmax) is assumed as −4000. elmax is determined as 5000. Tinand Tfare found as 397,996 and 115.81, respectively, by using Eqs. (2) and (3). α is calculated as 0.998 (using Eq. (4)). The algorithm could be run for 5000 times. Sleep time for the job agents are all drawn independently from uniform distributions with mean μ and ranges [0,2μ]. ApplyRandomSearch plan of job agents are all drawn independently from uniform distributions with mean γ and ranges [0,2γ]. τ, ψ, μ and γ are given 15, 30, 0.3s and 0.1s, respectively. Job agents are released to the system randomly during the run time.The proposed approach finds its best for A034-2.25dmwith a Cmax=1340 in 2.517s where T=747 as given in the following sequence.Block 1: 0-16-15-14-12-13-9-32-7-4-6-5-30-26-27-28-29-25-1-33-2-3-0Block 2: 0-24-23-22-20-21-31-18-19-17-11-8-10.In its worst run the proposed approach finds the following sequence with a Cmax=1532 in 2.152s where T=747.Block 1: 0-25-24-23-27-28-29-26-22-20-21-18-17-11-8-9-12-13-0Block 2: 0-1-19-31-10-32-7-4-6-5-30-33-2-3-0Block 3: 0-16-15-14-0Table 2shows the results of the proposed approach with comparison to the studies of Angel-Bello et al. [6].Because the proposed approach uses the optimization technique on different machine block agent plans simultaneously, time to find a schedule takes so much time in some of the problem sets (such as A034-4dm).Fig. 17shows the proposed approach Cmax solutions and benchmarks. As it can be seen obviously, the proposed approach follow the path of benchmark solutions where central heuristic is used to solve the problem.The proposed approach finds the scheduling results for tighter blocks faster. The results show that the proposed approach is successful for the manufacturing systems where maintenance activities are required frequently.The AVRP set without considering aging capacities is a relaxed set of problem for the proposed approach because each machine block agent is able to check the aging capacity (W) while checking the T constraint.As stated previously, the proposed appoach is able to check aging capacity usage of jobs arriving to manufacturing system. Problem set in Section 6.1 is also used in this part of the study. In addition to processing time, aging capacities are also considered by using the load capacities of the same AVRP set. The maintenance activity is selected as the first node in the problem sets A034, A039, and A045. The weight given for the fist nodes are used as last node weight during testing. Fig. 18shows the Cmax values for different machine block size groups. As block sizes increase Cmax values decrease proportionally.For example the proposed approach finds the best Cmax as 3140 for A034-2.25dmproblem set with T=747 and W=350 (α=0.998; Tin=397,996; Tf=115.86; elmax=5000; τ=4; ψ=10, μ=1s and γ=0.1s). The schedule of the solution is given in Table 3.As it can be seen from Table 3, the number of machine block agents used for processing job agents is increased dramatically due to aging capacity consideration. Table 4shows machine scheduling results for different capacity levels and for different parameter sets. Capacity levels are determined by the rate of T. Table 5shows related T and W values for different dmvalues. The ratio between T values for different dmvalues is used to generate W values for capacitated case.Table 4 shows scheduling solutions of the proposed approach for four different parameter sets. One is determined as the base case (α=0.998; Tin=397,996; Tf=115.86; elmax=5000; τ=4; ψ=10; μ=1s; γ=0.1) and three other cases are determined to show the capability of the proposed approach.When base case and other cases are compared (case 1, case 2 and case 3) the effect of parameter set on solution quality and time could be figured out. Objective function and computational time values for base case and case 1 are given in Table 4. Parameter τ value is different in these two parameter sets. Parameter τ is affecting optimization plan of machine block agent. Solution quality and time to find solution increase proportionally when threshold value of optimization is increased. Parameter μ is different inbase caseandcase 2. The parameter μ is affecting the behaviors of the job agents in the proposed approach. When the μ value is increased the solution quality and time to find solution are decreased proportionally. α and elmax parameters which are used in SA algorithm are different inbase caseandcase 3. When α and elmax are decreased the solution quality decreased proportionally.Fig. 19shows objective function values for the base case and other cases. Fig. 20shows the computation times for the cases. Although there are improvements in the Cmax values forcase 1as given in Fig. 19, computational time increases dramatically.In this part of the study full expressiveness of the dynamic system is used to show the dynamic scheduling capability of the proposed approach. A graphical user interface (GUI) given in Fig. 21is developed for the proposed multi-agent based dynamic approach. A new job arrival could be scheduled in real time by using this interface.Initially, the jobs in problem set A034-3dmare released to system randomly. Parameter set α=0.998; Tin=397,996; Tf=115.86; elmax=5000; τ=4; ψ=10; μ=1s; γ=0.1s is used for finding the initial solution. The jobs in this problem set are scheduled by the proposed approach. The schedule of jobs between maintenance activities is given in Table 6. Machine starts to process job 13 in the first block after finishing initial scheduling. After obtaining the initial schedule, a new job is released to the system by using the “New job arrival” menu of GUI in real time. When a new job enters to system, GUI asks to enter sijvalues for newly arriving job. The user of the program could also provide cijin advance. Table 7shows cijvalues for newly arriving job which are generated randomly for this experiment.When new job agent enters to system it negotiates with available machine block agents. It autonomously finds a block to suit after negotiation. Therefore there is no need to re-schedule all the jobs in the system. Table 8shows the schedule after the assignment of 34th job agent to manufacturing system. The schedule of the machine block agents are updated, this is because job agent–machine agent interactions. Assignment of 34th job agent to system took only 130ms. As it can be seen in both Tables 6 and 8, job 13 is the first job to be processed in machine block 1. If a job agent starts to be processed then it autonomously prevents negotiations (see Fig. 14). Therefore, the schedule of job 13 does not change during execution time.In addition to creating new job agents, a job could be canceled by a system user while the system is operating. Job 15 is assumed to be canceled by the system user. When job 15 is canceled then machine block schedules are re-arranged accordingly. Table 9shows the machine schedule after job 15 is canceled. As given in Table 9, block 1 continues to process job 13 as the first operation.Single machine scheduling problem with sequence-dependent setup times and availability constraints is considered in this paper. A multi-agent based optimization approach is proposed to handle such kind of problem in a dynamic manufacturing system where single machine is scheduled. The proposed approach has the capability to solve the problem with regular and irregular maintenance activities and aging capacity consideration. Jobs and machine blocks are designed as autonomous agents which make their own decisions. Each machine block agent considers its self-optimality and negotiates with the job agents, respectively. Job agents try to minimize the effect values to contribute to general scheduling performance.The proposed approach has the ability of both solving machine scheduling problem under static and dynamic cases. In the case of static scheduling problem, proposed approach does not challenge with the full expressiveness of the dynamic system. The performance of proposed approach for static problems could be dominated by other central static algorithms. The advantages of the proposed system are its ability to response newly arriving job requests and handling unexpected events in a very short time. When any job request is received by the system, it directly fit to a proper time block. The proposed approach could be adapted to the real-time manufacturing environments with its distributed and self-reactive mechanism. The approach proposed has negotiation mechanism that reduces computational load of central optimization without guaranteeing the optimality.The job priorities and job due date attributes could be articulated to proposed approach as a future work. Some of the newly coming jobs might be given high priorities and can be finished due a specific time according to manufacturing company policies.

@&#CONCLUSIONS@&#
