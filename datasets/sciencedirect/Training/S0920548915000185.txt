@&#MAIN-TITLE@&#


@&#HIGHLIGHTS@&#
The first cryptanalytic results on full-round Crypton as an AES candidateUsing a technique called non-isomorphic biclique cryptanalysis for this purposeIntroducing independent bicliques up to 5 rounds of Crypton

@&#KEYPHRASES@&#
Block ciphers,Crypton,Biclique cryptanalysis,Asymmetric key partitioning,Non-isomorphic bicliques,

@&#ABSTRACT@&#
The block cipher Crypton is a 128-bit block cipher was proposed by Lim as a candidate for the Advanced Encryption Standard (AES) competition. So far, a variety of cryptanalytic methods have been used to mount attacks on reduced-round versions of Crypton. Biclique attack is one of the most recent cryptanalytic techniques which brings new tools from the area of hash functions to the area of block cipher cryptanalysis. In this paper, using non-isomorphic biclique cryptanalysis, we propose a method to construct independent bicliques, up to five rounds, for cryptanalysis of full-round Crypton.

@&#INTRODUCTION@&#
Block ciphers are elementary components in the design of many cryptographic protocols. Indeed, block ciphers are widely used in advanced authentication protocols like extensible and password authentication protocols [1,2]; key management [3]; as well as the building blocks of the other symmetric primitives like hash functions [4] and cryptographic PRNGs [5].The block cipher Crypton is a 128-bit block cipher which was proposed by Lim [6]. Crypton's structure allows a high degree of parallelisms which results in highly efficiency and flexibility in both software and hardware implementations. This block cipher uses a user key of up to 256bits to generate round keys. Because of some weaknesses in the key schedule of Crypton, a revised version of this block cipher, identified by Crypton V1.0, was introduced in FSE'99 [7]. In this paper we focus on this revised version of Crypton. The lightweight block cipher mCrypton has been also developed with the same structure as Crypton V1.0 [8]. Minimizing both of the cost and power consumption makes it appropriate for using in low-cost resource-constrained devices like RFID tags [9].In Asiacrypt'99, an impossible differential attack was proposed on 5 rounds of Crypton [10]. Also, in FSE'99 a square attack was proposed on 6 rounds of it [11]. Then, a stochastic attack was presented on 8 rounds of Crypton in FSE 2000 [12]. An impossible differential attack on 6 rounds of Crypton V1.0 was introduced in ICISC'01 [13]. Later, this result was improved to an impossible differential attack on 7 rounds of Crypton V1.0 with data complexity of 2121 chosen plaintexts and time complexity of 2116.2 7-round encryptions, which is the best known single key attack on this block cipher [14]. Also, there is a related-key impossible differential attack on 9 rounds which requires 2105 chosen plaintexts and 2243.8 9-round encryptions [15].This paper, using a technique, called non-isomorphic biclique cryptanalysis, introduces two single key attacks on full-round Crypton V1.0. The first attack, using 4-round bicliques, requires only 244 chosen plaintexts and about 2254 full-round encryptions. For the second attack, which uses 5-round bicliques, data complexity increases to 232×(232−28.2)3 (close to the entire codebook) while its time complexity decreases to about 2253.46 full-round encryptions. Obviously, these attacks can be also mounted on reduced-round versions of Crypton cipher. The following Table 1summarizes cryptanalytic results on Crypton V1.0, including the results of this paper.Biclique attack is one of the recent cryptanalytic techniques which brings new tools from the area of hash functions to the area of block cipher cryptanalysis [16,17]. This technique was the first cryptanalysis method which is able to break full-round AES in a single key mode [17]. For a brief description of the biclique cryptanalysis method, assume block cipher E which is composed of three sub-ciphers as EK(P)=fK∘gK∘hK(P). Also the intermediate value hK(P) is denoted by S. Suppose h connects 2dplaintexts Pi, 0≤i<2d, to 2dintermediate states Sj, 0≤j≤2d, with 22dkeys K[i,j]. Now, set of Pis, Sjs and K[i,j]s is called a biclique of dimension d if the relation Sj=hK[i,j](Pi) is established for all pairs (i,j), 0≤i<2d, 0≤j<2d. For performing a biclique attack on the block cipher E, at the first step, the whole of target key space is partitioned into 2k−2dgroups each of 22dkeys. Some matching nibbles are fixed in the output of sub-cipher g and then for each key group, according to the definition of a biclique, the biclique attack is performed based on the three major steps, including biclique construction, pre-computations (if it is needed) and matching check with re-computations. However, the most important issue is how we can make a biclique of dimension d which meets all of those 22drelationships, simultaneously. Bogdanov et al. proposes an approach to find a biclique of dimension d from independent related-key differentials [17]. For this purpose, assume that we have two related-keys, ∆-differential and ∇-differential, which share no active S-boxes. Now, if Δ-differential maps an input difference Δito the output difference 0 under key difference ΔiK, and ∇-differential maps the input difference 0 to an output difference ∇junder key difference ∇jK, then an input difference Δimaps to an output difference ∇junder key difference ΔiK⊕∇jKfor each i and j.Since its introduction, the biclique attack has been applied to many block ciphers such as SQUARE [18], KASUMI [19], Piccolo [20], ARIA-256 [21], HIGHT [22], TWINE [23,24], LBlock [24], Present and LED [25]. After that, the block cipher IDEA was analyzed using the narrow-biclique technique as an extension of biclique attack [26]. This technique extended the independent-biclique framework to allow for lower data complexity requirements by using available degrees of freedom for limiting the diffusion in spite of high dimension.Non-isomorphic biclique cryptanalysis is also an extension of the independent biclique attack, which uses an asymmetric (non-uniform) key partitioning to construct longer bicliques [27]. Actually, the non-isomorphic biclique attack, gives more degrees of freedom in selecting two sets of key differences ΔKand ∇K. So, according to the key schedule and the diffusion layer properties of a block cipher, we can choose these key difference sets in a way which leads to the longer bicliques (as well as less data complexity).An asymmetric key partitioning is done according to these difference sets. As a result, we obtain isomorphic groups of bicliques, each of them called a biclique group, while each biclique group consists of several non-isomorphic bicliques (bicliques with different dimensions). Indeed, non-isomorphic biclique cryptanalysis offers a multi-level partitioning, in this case including two levels of partitioning. In the first level, the whole of key space is partitioned between the biclique groups uniformly and in the second level, according to the asymmetric key partitioning, the key space belongs to each biclique group is partitioned non-uniformly.The paper is organized as follows: Section 2 provides a brief description of Crypton and its key schedule. Two non-isomorphic biclique attacks on full-round Crypton, one based on 4-round bicliques and the other based on 5-round bicliques, are introduced in Section 3. Finally, the paper is concluded in Section 4.Crypton is a 128-bit block cipher which supports key sizes up to 256bits. Crypton processes 128-bit data block, consisting of sixteen bytes. Each data block is represented as a double indexed or an equivalent single indexed matrix as follows:A=a3a2a1a0a7a6a5a4a11a10a9a8a15a14a13a12≈a0,3a0,2a0,1a0,0a1,3a1,2a1,1a1,0a2,3a2,2a2,1a2,0a3,3a3,2a3,1a3,0.According to the above representation, the first column of matrix A is the rightmost column. Crypton has a 12-round Substitution–Permutation structure, where each round consists of four transformations as follows:–Non-linear Substitution γo(γe): a byte-wise non-linear substitution which is applied to odd (even) rounds.Bit Permutation πo(πe): a linear transformation which is applied to odd (even) rounds. Assume B=πo(A). Then for each byte of B we havebi,j=⊕k=03(ak,j•m(i+j+k) mod 4), where ‘•’ denotes the logical operation AND. Also, m0=0xfc, m1=0xf3, m2=0xcf and m3=0x3f are 8-bit constants. For the even rounds, B=πe(A), we havebi,j=⊕k=03ak,j•mi+j+k+2mod4. These transformations are applied to each column of data block independently. So, we can easily define column-wise transformations πo,iand πe,ifor each column i. In column i, 0≤i≤3, for a 4-byte input a=(a0,a1,a2,a3)tand its corresponding output b=(b0,b1,b2,b3)t=πo,i(a), we have bj=⊕k=03(ak•m(i+j+k)mod4). Also, for the even rounds we have bj=⊕k=03(ak•m(i+j+k+2)mod4). Both of these transformations are involutions and have a differential branch number of 4.Column-To-Row Transposition τ: according to the above indexed matrix A, moves the byte in the position (i,j) to the position (j,i).Key Addition σ: for a round key Kr=(Kr[0],Kr[1],Kr[2],Kr[3]), it is a simple bit-wise XOR operation. Kr[i], i=0,1,2,3, is the round key value in row i.According to the above transformation, r-th round of Crypton, 1≤r≤12, is applied to the input intermediate value X byσKr∘τ∘πo∘γoXfor odd rounds r=1,3,…,11 andσKr∘τ∘πe∘γeXfor even rounds r=2,4,…,12. An initial Key Addition,σK0, and a final transformation, τ∘πe∘τ, are also performed before the first round and after the last round, respectively. In r-th round of Crypton, the intermediate values after the application of transformations γ, π, τ and σ are denoted by xrγ, xrπ, xrτand xrσ, respectively. Also, the input and the output of r-th round are indicated by xrIand xrO, respectively.In the latest version 1.0 of Crypton, first, the 256-bit user key K=k31⋯k1k0 was split to four 32-bit registers U[i]=k8i+6k8i+4k8i+2k8i, 0≤i<4 and four 32-bit registers V[i]=k8i+7k8i+5k8i+3k8i+1, 0≤i<4. Then using a 1-round encryption of U and V under an all-zero round-key, the new corresponding 128-bit registers U′ and V′ are produced, respectively. Then these registers are mixed up to initialize eight 32-bit internal registers E as E[i]=U′[i]⊕T1 and E[i+4]=V′[i]⊕T0, 0≤i<4, whereT0=⊕j=03U′jandT1=⊕j=03V′j. The values of these internal registers determine the round keys Kr[i], 0≤r≤12. For this purpose, for the even round-keys r=2,4,…,12 we update the internal registers E[0], E[1], E[2] and E[3] as follows (initial value of these registers are used for r=0):E3,E2,E1,E0←E0≪b6,E3≪b6,E2≪16,E1≪24.For odd round keys r=3,5,…,11, in a same way, we update the internal registers E[4], E[5], E[6] and E[7] as follows (initial value of these registers are used for r=1):E7,E6,E5,E4←E6≪16,E5≪8,E4≪b2,E7≪b2where X≪n indicates the left rotation of X by n-bit positions and X≪bnindicates the left rotation of each byte of X by n-bit positions. Now, according to the updated registers, the round key values are determined as follows:–for even rounds r=0,2,…,12: Kr[i]=E[i]⊕Ce[r]⊕MCi, 0≤i<4for odd rounds r=1,2,…,11: Kr[i]=E[i+4]⊕Ce[r]⊕MCi, 0≤i<4,According to the key schedule of Crypton, each round key difference ΔKr, 0≤r≤12, is dependent only on the difference value of register E. Table 2shows the round key differences for each round of the cipher. Now, we define two sets of key differences ΔKand ∇K, which are defined based on the difference value of register E. The first set includes 4×255+1=1021 distinct 256-bit differences as follows:ΔiK0≤i≤1020:ΔEk=0,k=0,1,3,4,5,6,7ΔE2=ai,πe,1−1ai≪16=0000or000tor00t0or0t00ort000,t≠0.As it can be seen, in each of these differences, the difference values of all ΔE[z], 0≤z≤7, except ΔE[2] are zero. The difference ΔE[2] is chosen such that ΔE[2]≪16 has at most one active byte after the application of πein column 1. For the sake of simplicity we assume a0=0 for Δ0K(note that π(0)=0). The second set includes 256 distinct 256-bit differences as follows:∇jK0≤j≤255:ΔEk=0,k=0,1,2,3,4,6,7ΔE5=aj,aj,01…7=dec2binj,aj,89…31=0where, dec2bin(j) corresponds to the 8-bit binary representation of decimal value j. As it can be seen, except 8 bits of ΔE[5] indexed by 0,1,…,7 which take all of their 256 possible values, the other bits of ∇Kare always zero.Depending on which of the four bytes are active (non-zero) in the output of πe,1−1, there are four 4-round ∆-differential trails in the initial rounds of Crypton. Fig. 1shows 4-round ∆-differential and ∇-differential trails based on key difference sets ΔK, for those ais which πe,1−1(ai≪16)=[t,0,0,0], and ∇K, respectively. As it can be seen, these two differential trails share no active S-boxes. Hence, 4-round bicliques can be constructed according to ΔKand ∇K. It can be easily checked that another three ∆-differential trails (for those ais which πe,1−1(ai≪16)=[0,t,0,0] or [0,0,t,0] or [0,0,0,t]), also share no active S-boxes with the ∇-differential trail. As can be seen in Fig. 1, the ∆-differential has four active bytes in column 0 of Δx1γ. Thus, considering 1020 non-zero differences of ΔK0, there are at most 1020×24×8≈242 possible non-zero plaintext differences. For the other three ∆-differential trails, we have the same number of active bytes, but in the different columns of Δx1γ. Consequently there are at most 244 possible non-zero plaintext differences.In the non-isomorphic biclique cryptanalysis of Crypton, according to the defined sets of key differences ΔKand ∇K, we use an asymmetric key partitioning technique. The concept of this technique is based on a minimal space generator. Assume the space S corresponds to a set of all 2mbinary vectors of length m, and D is a given subset of S. For such a space S we define the minimal space generator GDas a minimal subset of S, which for each element Si∈S, 0≤i<2m, there is an element GkD∈GD, 0≤k<|GD| and an element dj∈D, 0≤j<|D| such that Si=GkD⊕dj. The minimality of GDemphasizes that by removing any element of it, the remaining part of GDis not a space generator anymore. A minimal space generator is obtained by recalling the algorithm in Appendix A. Also, this algorithm provides two collections of sets {A}Dand {B}Dcorresponding to a partitioning of the space S. Actually, the algorithm assigns a distinct part of space S to each GkD∈GD, 0≤k<|GD|. For each element GkD∈GD, 0≤k<|GD|, these assigned unique elements of S are stored in {A}kD, and their corresponding elements of D are stored in {B}kD(for each element {A}k,zD∈{A}kDwe have a corresponding element {B}k,zD∈D which {A}k,zD=GkD⊕{B}k,zD). Thus, as it is expected, we have∪k=0|GD|−1AkD=SandAk1D∩Ak2D=∅, ∀k1≠k2, 0≤k1,k2<|GD|.For each biclique group, the key space S, we want to partition it asymmetrically, corresponds to 240 possible values of 32+8=40 bits with index [64,…,95,160,…,167] of register E (union of active bits of ΔKand ∇K). Also, two key difference sets ΔKand ∇Kshare no active bits. Thus, to do the partitioning, first we obtain a minimal space generatorGDΔand its corresponding partitioning setBDΔ, by recalling the algorithm in Appendix A with the parameters DΔ=Δi,[64,…,95]K, 0≤i<1021 (values of active bits of ΔK) and m=32. However, according to the key difference set ∇K, its minimal space generatorGD∇is trivial (no need to recall the algorithm) and consists of only one 8-bit zero vector (G0D∇); consequently, its correspondingB0D∇takes all 256 possible values.Now, by combining these two minimal space generators and partitioning sets, a minimal space generator GDand partitioning sets {BΔ}Dand {B∇}Dare obtained for S. The obtained GDincludesGD=GDΔ×GD∇=GDΔ40-bit elements. For each 0≤k≤|GD|, we set Gk,[0,1,…,31]DtoGkDΔand Gk,[32,…,39]Dis set to zero (corresponds toG0D∇). Also, we set {BΔ}k,[0,…,31]DtoBkDΔ, and {BΔ}k,[32,…,39]Dis always zero. Similarly, {B∇}k,[32,…,39]Dcontains all of the 256 possible values (corresponds toB0D∇) and {B∇}k,[0,1,…,31]Dis zero. Obviously, we have∑k=0GDBΔkD=∑k=0GDΔBkDΔ=232. Also, |{B∇}kD|=28, 0≤k≤|GD|.As a result there areGD=GDΔbicliques in each of 2256−40=2216biclique groups. GkD, 0≤k<|GD|, corresponds to the base key of k-th biclique in a biclique group. Also, {BΔ}kDand {B∇}kDare the key difference sets for k-th biclique of that biclique group. For the sake of simplicity in the description of the attack procedure, each GkDand also the elements of each {BΔ}kDand {B∇}kDare expanded to a 256-bit version by zero-padding. For this purpose, we keep their original values in 40bits number [64,…,95,160,…,167] and the other 216bits are set to zero. Also, for the estimation of the attacks complexity, any S-box operation is considered as a single memory access. Thus, a full-round encryption of Crypton is equivalent to 12×16=192 memory accesses.In the following attack procedure, matching bytes are assumed to be bytes 3 and 7 of x7σ. For a new biclique group we set 40bits [64,…,95,160,…,167] of register E to zero and a new value is set for the other 216bits. Then for this biclique group, the attack procedure continues as follows in three major steps:–Biclique construction: there are |GD| bicliques in a biclique group. For k-th biclique in the biclique group we need a 4-round encryption of P0=0 to obtain intermediate value S0 (x4τ) under the base key K[0,0]=E⊕GkD(base computation). Then, according to Fig. 1, we need the re-computations of 5 S-boxes to determine each Pi, 1≤i<|{BΔ}kD|, by the decryption of S0 under key K[i,0]=K[0,0]⊕{BΔ}k,iD, and we need the re-computations of 21 S-boxes to determine each Sj, 1≤j<|{B∇}kD|, by the encryption of P0=0 under key K[0,j]=K[0,0]⊕{B∇}k,jD. As it is expected, for k-th biclique, each Pimaps to each Sjunder key K[i,j]=K[0,0]⊕{BΔ}k,iD⊕{B∇}k,jD. The complexity of this step is equivalent to412×GD+21192×∑k=0GDB∇kD−1+5192×∑k=0GDBΔkD−1=5192×232+GD×412+21192×28−21+5192full-round encryptions for a biclique group.Pre-computations: for k-th biclique in this biclique group, according to Fig. 2, it is needed to pre-compute and store the values of 28 S-boxes by the decryption of each Ci(corresponding to plaintext Pi) under key K[i,0]. Also, we must pre-compute and store the values of 12 S-boxes by the encryption of each Sjunder key K[0,j]. The complexity of this step is equivalent to28192×∑k=0GDBΔkD+12192×∑k=0GDB∇kD=28192×232+12192×GD×28full-round encryptions for a biclique group.Re-computations: as a result of asymmetric key partitioning of the non-overlapping key difference sets, for k-th biclique in the biclique group and for each pair (i,j), 0≤i<|{BΔ}kD|, 1≤j<|{B∇}kD|, then {BΔ}k,iD⊕{B∇}k,jcorresponds to one and only one of the 240 keys which must be checked in this biclique group. Thus, as it is indicated in Fig. 2, for each of 240 pairs (i,j) it is necessary to re-compute the values of 25 S-boxes to determine the value of matching byte x7,[3]σby the decryption of Ciunder key K[i,0]⊕{B∇}k,jD=K[i,j]. Also we must re-compute the values of 24 S-boxes to determine the value of matching byte x7,[3]σby the encryption of Sjunder key K[0,j]⊕{BΔ}k,iD=K[i,j]. Then, if these two obtained values of this matching byte are equal (with probability 2−8) then we have to re-compute additional 5 S-boxes to check the equality of another matching byte x7,[7]σ. If both of these bytes satisfy the equality (with probability 2−16) then K[i,j] is a candidate for the correct value of K[i,j] and it must be checked by a trial encryption. Otherwise, K[i,j] is certainly incorrect. For the biclique group, the complexity of this step includes1192×49+5×2−8×240=238.03full-round encryptions for the re-computations, and 2−16×240=224 full-round encryptions for the trial encryptions.As it can be seen, the total time complexity of the proposed attack is equivalent to238.03+224+232×33192+GD×412+28×33−26192≈238.03+GDΔ×25.46full-round encryptions for each biclique group. On the other hand, as it is indicated in [27], if GDis a minimal space generator of a space S with dimension m, which is obtained based on a difference set D, then 2m+2/|D| is an upper bound for the cardinality of the obtained minimal space generator. Hence, 2m+2/|ΔK|=232+2/1021≈224 is an upper bound for the cardinality of the obtainedGDΔ. Thus, the time complexity of the proposed attack for each biclique group is at most equivalent to 238.03+229.5≈238.03 full-round encryptions. Consequently, the overall time complexity of the proposed attack is about 2216×238.03≈2254 full-round encryptions. As it was mentioned before, there are at most 244 possible non-zero plaintext differences in the input of 4-round bicliques. Thus, according to the fixed initial plaintext value P0=0, the data complexity of the proposed attack is also 244 chosen plaintexts.The length of bicliques can be expanded to 5-rounds using the following key differences sets:ΔiK0≤i≤255:ΔEk=0,k=0,1,2,3,4,5,7ΔE6=ai,πo,3−1ai≪16=0000ort000,t≠0∇jK0≤j≤255:ΔEk=0,k=0,1,2,3,4,6,7ΔE5=aj,aj,01…7=dec2binj,aj,89…31=0.Fig. 3shows that 5-round ∇-differential and ∆-differential trails based on ∇Kand ΔK, share no active S-boxes, so 5-round bicliques can be constructed based on them.According to the ∆-differential trail in Fig. 3, it seems that any plaintext difference can be occurred in the input of differential trail. However, it can be proved that there are plaintext differences that are impossible to occur in that position. For this purpose, first we must consider this fact that for each non-zero difference in the input of a S-box of Crypton, there are only 27−1=127 possible differences in its output. As can be seen in Fig. 3, there are only 255 possible non-zero differences in columns 0, 1 and 3 of Δx1π. Also, π-transformation is linear, thus after the application of π−1 we have the same number of possible differences in the same columns of Δx1γ. Hence, for each of 255 possible non-zero values in one of these three columns of Δx1γ, after the application of γ−1 there are at most 1274 possible differences in the same columns of Δx1σ. So, a difference in each columns 0, 1 and 3 of Δx1σis impossible with probability1−1274232255≈2−23.8. Hence, the number of possible differences in each of these three columns of Δx1σare about 232−232×2−23.8=232−28.2, and consequently the number of possible differences in Δx1σare about 232×(232−28.2)3 which is slightly less than the entire of codebook. We have the same number of possible plaintext differences, because round-key ΔK0 is zero. Same as the previous attack, the number of possible plaintext differences reveals the data complexity of the attack.The attack proposed in the previous section can be easily extended to use these 5-round bicliques with a similar procedure. Assuming two matching bytes x7,[11,15]σ, it is easy to check that for each pair (i,j) we need the re-computations of 33 S-boxes to check the equality for matching byte x7,[11]σ. If the equality is satisfied for the first matching byte, then we need the re-computations of additional 4 S-boxes to check the equality for matching byte x7,[15]σ. Thus the complexity of re-computations, as the dominant part of time complexity (same as the previous attack), is about1192×33+2−8×4×240=237.46full-round encryptions for each biclique group. Consequently, the overall time complexity of the attack is about 2216×237.46=2253.46 full-round encryptions.

@&#CONCLUSIONS@&#
