@&#MAIN-TITLE@&#
An improved star test for implicit polynomial objects

@&#HIGHLIGHTS@&#
A homogeneous star test method for implicit polynomial objects.A linear programming optimization method to improve the efficiency of star test.Comparison of the naive star test and the homogeneous star test using different arithmetic.

@&#KEYPHRASES@&#
Geometric modeling,Implicit objects,Star-shaped,Star test,

@&#ABSTRACT@&#
For a given point set, a particular point is called a star if it can see all the boundary points of the set. The star test determines whether a candidate point is a star for a given set. It is a key component of some topology computing algorithms such as Connected components via Interval Analysis (CIA), Homotopy type via Interval Analysis (HIA), etc. Those algorithms decompose the input object using axis-aligned boxes, so that each box is either not intersecting or intersecting with the object and in this later case its center is a star point of the intersection. Graphs or simplicial complexes describing the topology of the objects can be obtained by connecting these star points following different rules. The star test is performed for simple primitive geometric objects, because complex objects can be constructed using Constructive Solid Geometry (CSG), and the star property is preserved via union and intersection. In this paper, we improve the method to perform the test for implicit objects. For a primitive set defined by an implicit polynomial equation, the polynomial is made homogeneous with the introduction of an auxiliary variable, thus the degree of the star condition is reduced. A linear programming optimization is introduced to further improve the performance. Several examples are given to show the experimental results of our method.

@&#INTRODUCTION@&#
Computing the topology of geometric objects is a fundamental problem in computer aided design (CAD), computer graphics (CG), and robotics. It plays an important role in a lot of geometric computations, such as recognition, feature extraction, simplification, motion planning, etc. Also topological information of objects has a significant impact on classification, indexation, shape description in solid modeling and shape matching.Several research efforts have been conducted to compute the topology of geometric objects. The Cylindrical Algebraic Decomposition (CADec), due to Collins and its variants  [1–5] decompose a semi-algebraic set into cells and compute its topological properties. CADec is the first method for computing the topology of a semi-algebraic set. This decomposition theoretically solves the piano mover’s problem, i.e.  the motion planning problem. Unfortunately, CADec and its variants rely on Computer Algebra tools with at least exponential cost. Thus roboticians typically prefer probably-approximately-correct (PAC) methods, like the probabilistic roadmap  [6] to solve the motion planning problem. PAC methods are fast but only approximate.Computing the topology and arrangement of planar algebraic curves has been subject to several studies  [7–9], the output of the proposed methods is a graph homotopic to the input algebraic curve. However, these methods cannot process solid geometric objects.To preserve the topology in surface extraction, a star-shaped criterion for geometric objects was presented in  [10]. A star is a point which can see all the boundary points of a point set, and the kernel of the set consists of all star points. The star test can be reduced to testing whether the kernel is empty or not, and the kernel of polyhedral primitives can be computed using linear programming. Therefore, the authors suggested to perform a dense tessellation of the original primitive as a pre-processing step. Then an approximate kernel is computed using linear programming. At last, a point in the kernel is selected as the best candidate to perform the star test. However, the method depends on the approximation incurred in tessellation.Recently, Delanoue et al.  [11,12] proposed two exact algorithms, Connected components via Interval Analysis (CIA) and Homotopy type via Interval Analysis (HIA), resorting to interval analysis. Contrarily to CADec, their methods CIA and HIA are practicable: they only use interval computations and the classical recursive space subdivision  [13]. Two other nice features of their methods is that they consider each geometric primitive independently, and they apply also to non polynomial functions (likecos,sin,exp,log, etc.). Thus, CIA and HIA can compute topological properties for Constructive Solid Geometry (CSG) shapes easily. In counterpart, for CIA and HIA, the sets, i.e.  the free space for motion planning, must be fat (see  Appendix for the definition); in practice the free space is fat, but if by mistake it is not then the methods detect it. A more serious limitation of CIA and HIA (relatively to CADec) is that they do not take into account objects defined by projections, like extrusions or parametric patches:P:(u,v,w)∈[0,1]3→(x,y,z)=P(u,v,w)∈R3often met in CAD  [14].CIA and HIA are important for CAD because they compute and certify topologic properties of input geometric sets and objects. The need for certification (of geometric, or topological, properties of geometric programs) is currently increasing, e.g.  Narkawicz et al. in NASA recently certified the correctness of a geometric software for the detection and avoidance of collisions between airplanes  [15]. In the future, all critical geometric objects and algorithms should be certified with some proof assistant, like Coq or PVS.We now mention three other potential applications of the star test in CAD. First, variational modeling: the idea is to specify mechanical parts or clearances with geometric constraints (incidences, tangencies, distances, angles), which a solver numerically solves. Unfortunately, topologic constraints like connectedness are not expressible into mathematical equations or inequalities. The solution is to resort to the generate-and-test paradigm of Artificial Intelligence: the solver generates all solutions, connected or not, and then CIA discards non-connected clearances.Second, CIA and HIA can also apply to the space of feasible configurations or free motions of some given mechanisms, for example composed of articulated bars: is it possible for this flexible mechanism to move continuously from one feasible configuration to another? More generally, HIA can compute homotopy independent cycles, or homotopy independent paths between two given positions in a configuration space.Third and last, CIA and HIA may help to study the consistence of toleranced Breps. In a nuttshell, each cell (vertex, curve, surface patch) of a toleranced BRep  [16] is attached a tolerance, or thickness. Tolerances were introduced to robustly compute Boolean operations between solids: tolerances fill cracks and can solve inaccuracy issues. Shapiro  [16] suggested that Leray’s nerve theorem may provide a set of local conditions (like contractibility or collapsibility, some of them computable with the star test), which are necessary or sufficient to guarantee that a given toleranced BRep is consistent, for instance that it indeed separates an inside from an outside.In this paper, we improve the method to perform the star test for geometric objects defined by implicit polynomial equations. We propose several computable and sufficient conditions to prove that a set is empty, to prove that a set is non empty, to prove that a point is a star, to prove that it is not. For implicit polynomial objects, we reduce the degree of the star condition, and compare the proposed method with the method in  [11,12]. Furthermore, we implement the test using interval arithmetic  [17,18] and Bernstein based methods, we then compare their performances.The rest of the paper is organized as follows: in Section  2, we recall some basic concepts and properties of interval solvers and Bernstein based methods. Then our methods of the star test for implicit objects are introduced in Sections  3 and 4. Experimental results are shown and discussed in Section  5. We conclude the paper in Section  6.Here we recall some fundamental concepts and propositions  [11,12].Definition 1A pointsis a star for a subsetXof an Euclidean space ifXcontains all the line segments connecting any of its points ands.Given a geometric setS, the test whether a candidate pointsis a star point ofSis usually called star test.Definition 2Ifsis a star for subsetXof an Euclidean space, one says thatXis star-shaped ors-star-shaped.Proposition 1LetXandYbe twos-star-shaped sets, thenX∩YandX∪Yare alsos-star-shaped.For the proof, we refer readers to the reference  [11]. After Proposition 1, the star property is preserved via union and intersection. Thus, it is sufficient for HIA and CIA to consider independently each geometric primitive in the CSG tree. It is a big advantage of these methods that they do not need to compute intersections between geometric primitives, i.e. they avoid the (difficult) boundary evaluation problem   [19–21].Star test is a key component of some topology computing algorithms such as CIA, HIA, etc. To show the application of the star test, we recall the definition of the HIA algorithm briefly. LetIbe a finite set of integers,∪i∈ISi=Sis called a finite cover ofS,Siare interior disjoint sets. The HIA algorithm computes a finite coverSi,i∈Iof the studied setSsuch that∀J⊂I,∩j∈JSjis either empty or contractible. It is contractible if it contains a star. The algorithm starts with a given initial boxB,Si=Bi∩S, whereBiwill be sub-boxes ofB. If a boxBsuch thatB∩S≠0̸is not a member of such finite cover, it is subdivided at the center, with a random perturbation, and along the longest edge. The procedure is recursively performed until a cover satisfying the previous condition is found. LetSbe addimensional object, then the studied boxes have dimensiond,d−1,…,0. It may happen that one of the subdivided boxes is smaller than some given thresholdεand the expected cover is still not reached, then the whole procedure has to be re-run. Usually it is the case when some subdividing (hyper)plane is tangent or almost tangent to the given object. It is claimed that the cover can be found for most fat objects with probability 1  [11,12]. The CIA algorithm is quite similar to the HIA algorithm, more details can be found in  [11,12].Fig. 1illustrates the rule to connect star points of the HIA algorithm in a box: letSbe the object, andBbe the studied box. PointEis a star forS∩B. PointAis a star for the intersection ofSand the upper edge ofB. PointBis a star for the intersection ofSand the left edge ofB. PointDis a star for the intersection ofSand the bottom edge ofB. The intersection ofSand the right edge is empty. Finally,A(andC) are trivial stars forA∩S(andC∩S). The simplicial complex homotopic toS∩Bis also shown, see Fig. 1 right. The maximal simplices are trianglesABE,BCE,CDE. Other simplices of dimension 1 (AB,BE,EA, etc.) and dimension 0 (A,B,C,D,E) are deduced by inclusion. By definition of a simplicial complex, either two simplices intersect on another simplex of the complex, or they are disjoint.In Fig. 2, we give a further example of the HIA algorithm. The given objectSis a CSG object, where a small disk is subtracted from a big disk. For eachi∈I={0,…,5},Ciis the center of the boxBi, and it is a star point ofSi=Bi∩S. Further,∀J⊂I,∩j∈J{Bj∩S}is also star-shaped, the star points are shown. By connecting those star points, a simplicial complex which is homotopic toSis obtained. More details, examples and applications can be found in Delanoue’s Ph.D. thesis  [22].For CIA  [11], the rule is simpler: a graph is built instead of a simplicial complex. The vertices of the graph are star points, and the edges connect all neighboring star points. The output graph indicates the connected components of the given objects. Delanoue et al.  [22] use CIA for solving the motion planning problem in Robotics: CIA quickly provides an exact solution, while the probabilistic roadmap is only approximate.When the CIA and the HIA algorithms  [11,12] consider a too small boxBto test if its center is a star forB∩S, the algorithms may fail because eitherSis not fat, or¬Sis not fat, where¬Sdenotes the complement set ofS, see  Appendix.In this section, we introduce some solvers and arithmetic methods which will be used afterwards.Interval arithmetic  [17,18] is a method developed for computing bounds on rounding errors and computing enclosures for the image of a box by some mathematical function, and thus developing numerical methods that yield reliable results. The method is also used to reliably solve systems of equations. Variants of interval methods for plotting algebraic curves were compared and discussed  [13].Interval arithmetic and interval analysis make fully reliable computations possible, there are some limitations however. First, the “wrapping effect” arises. Interval arithmetic losses the dependence between variables. For example, considerf(x)=x(1−x), and the intervalX=[0,1]. Naive interval arithmetic finds thatf(X)=[0,1]. This is correct but over-estimates the exact interval which is[0,1/4]. Various methods or optimizations (e.g.  resorting to the centered form, exploiting monotonicity) mitigate this phenomenon.There is a second more fundamental limitation, actually a non computability fact. Interval arithmetic cannot compare two numbers represented with overlapping intervals. Thus interval arithmetic is not sufficient for algorithms of Computational Geometry which need to know the sign, i.e.  negative, positive, zero of geometric predicates (turn left/right/aligned, inCircle/outCircle/onCircle). It is also not sufficient for geometric representations and methods based on boundaries of objects, which occurs when shapes are represented based on their boundary in the Boundary Representation (BRep) model. In this case, algorithms have to decide whether a given point is inside, on, or outside, which is the same inherently intractable, undecidable comparison problem  [23].Consider the problem of finding a root forf(x)=0in a given boxB, wheref:Rn→Rm. If0∉f(B), then there are no roots off(x)=0inB. Otherwise,0∈f(B), the boxBis reduced with box consistency techniques  [24], or some contraction operators (Krawczyk–Moore operator, Hansen–Sengupta operator, etc.)  [25–27]. For example, given an equationz=x+y, the simplest box consistency technique which propagates intervals iterates the computations ofz←z∩(x+y),x←x∩(z−y),y←y∩(z−x).The secant method is a variant of the classical Newton method, where the Jacobian is not updated at each step. For solving a given equationf(x)=0,f:Rd→Rd, the secant method computes the fixed-point ofS(x)=x−(f′(x0))−1f(x), wherex0is the center ofB. The interval community proposed several adaptations to interval analysis for the secant method. Krawczyk–Moore operator computesB≔S(B)∩Biteratively, whereS(B)is evaluated with the centered formS(x∈B)=S(x0+(x−x0))∈S(x0)+S′(B)(x−x0). There are theorems to guarantee existence and uniqueness of a root of the system in a box  [28].A box which cannot be significantly reduced likely contains more than one root, and it is subdivided. The procedure is stopped when it is proved that the box contains only one regular root (for instance‖S′(B)‖<1orS(B)is strictly included inB, thus the secant map is contractant, and the center ofBcan be used as an initial value for classical Newton–Raphson method), or when the size ofBis smaller than a given threshold, then the box should be put in a list of residual boxes for which we cannot conclude.LetBin(t)=(ni)(1−t)n−iti,i=0,…,nbe Bernstein polynomials. Any degreenBézier curvef(t)can be expressed asf(t)=∑i=0nBin(t)bi,0≤t≤1,wherebi∈Rd,i=0,…,nare Bernstein coefficients.Fortin the interval[0,1], all Bernstein polynomialsBin(t)are non-negative. Moreover, their sum equals one for eachtinR, because1=1n=(t+(1−t))n=∑i=0n(ni)(1−t)n−iti=∑i=0nBin(t).Sof(t)is a linear convex combination of thebi. When eachbilies inR,f([0,1])⊆[minbi,maxbi]. When eachbilies inRd,f([0,1])is covered by the convex hull of{bi}i=0n. This is usually called the convex hull property. If the parameter domain is nott∉[0,1], butt∈[t0,t1], then a re-parametrizations=(t−t0)/(t1−t0)is applied and the de Casteljau algorithm can be used for computing Bernstein coefficients off(s). The de Casteljau algorithm is typically used to split the interval[0,1]into two intervals[0,1/2]and[1/2,1]in Bernstein solvers.Multivariate Bernstein bases are obtained with tensor product. For instance, for bivariate polynomial inuandv, with degreeminuandninv, the Bernstein polynomials areBi,jm,n(u,v)=Bim(u)Bjn(v),i=0,…,m;j=0,…,n,and any bivariate polynomial with bidegree not greater than(m,n)can be expressed in Bernstein form. The convex hull property also holds for multivariate cases.Bernstein based methods (methods exploiting properties of the Bernstein polynomials, e.g.  convex hull property, variation diminishing property, de Casteljau subdivision algorithm, etc.) have widespread applications in numerical computation, such as curve/surface approximation and interpolation  [29], root finding  [30], geometric constraint systems solving  [31,32], etc. It is well-known that the de Casteljau algorithm converges much faster than other iterative algorithms. However, the transformation matrix between high-degree canonical power basis and Bernstein basis is ill-conditioned  [33]. Moreover, computing the smallest and the greatest Bernstein coefficients is NP-hard in high dimension, even for multi-linear case. Bernstein polytopes  [34] are proposed to evaluate or solve high dimensional multi-variate systems.Given a boxB⊂Rd, letSbe an object defined byf(x)≤0, wheref:Rd→R. The star test is trivial for the caseB∩S=0̸, andB∩Sis star-shaped whenB⊆S. The test whetherB∩S=0̸is called emptiness test. We introduce a naive method to perform the emptiness test in this section, which is used to facilitate the star test.For implicit objects, the emptiness test is often decidable using interval arithmetic and subdivision, because we know thatf(B)<0impliesB⊂S, soBis covered byS, andB∩Sis star-shaped; orf(B)>0impliesB∩S=0̸; otherwise,0∈f(B), further study is needed to get a guaranteed result, which is discussed in Section  4.Notably, for the last case, whetherB∩S=0̸can be further studied by evaluatingfon vertices ofB. That is,B∩S≠0̸if there is a vertexvofBsuch thatf(v)<0, this has been used in some surface extraction methods, such as marching cubes algorithm  [35]. Also, in the star test, we need to know whetherB∩∂S=0̸or not. If there are verticesv1,v2ofB, such thatf(v1)≤0≤f(v2), then it is proved thatB∩∂S≠0̸. Otherwise, we are unlucky and nothing can be guaranteed because of the lack of accuracy. This kind of boxes most probably is close to the boundary of the object.As most of the geometric sets are not star-shaped, the test is usually performed for a given set restricted in a studied box  [11,12]. Complex objects can be defined using CSG, and the star property is preserved via Boolean operation. All primitive objects in a CSG tree can be tested independently, which simplifies the algorithm, see Proposition 1. Therefore, in this section, we only focus on the star test for simple primitive objects restricted in a studied boxB, and only for the case whenBprobably contains boundary points of the given object, i.e.0∈f(B).Geometric primitive objects defined by implicit polynomial equations have been extensively used in CAD and CG. For the star test, Delanoue et al.  [11,12] used interval arithmetic to test whether the star condition holds or not. For polynomial functionsf, the efficiency of their algorithm is usually sensitive to the degree of the polynomial equation.In this section, we recall the naive star test method initially presented in  [11,12].Proposition 2Letfbe aC1function fromRdtoR,B⊂Rdbe a convex set, typically an axis aligned box, andS={x∣f(x)≤0}. If there existss∈B∩Ssuch that the contradicting setCis empty:(1)C≔{x∈B∣f(x)=0,∇f(x)⋅(x−s)≤0}=0̸,thenB∩Siss-star-shaped.Letg(x)=∇f(x)⋅(x−s). The star test can be performed using interval arithmetic  [11,12] and subdivision. We assume thatslies inS, i.e.f(s)<0, thensis a star point forB∩Swhen(2)g(B)=∇f(B)⋅(B−s)>0⇒C=0̸.However, the above condition may not hold for some star points ofB∩S, because the initial (before subdivision) boxBprobably contains roots for bothf(x)=0(the boundary of the objectS) andg(x)=0(g(s)=0), though no common root exists. Moreover, the interval arithmetic may over-estimate the result. In these cases, the initial boxBis subdivided inB1,B2,…,B2d, thenC=C1∪C2∪⋯∪C2d, whereCiis the contradicting set of the test in the boxBi. When0∉f(Bi), i.e.  eitherBi∩S=0̸orBi⊂S, thus the contradicting setCiis empty. Remark thatsmay not belong toBiwhenBis subdivided.If allCiin sub-tests are empty, thensis a star point, see Fig. 3for an example. It may happen that the size of one subdivided boxBisatisfying0∈f(Bi)is smaller than a given thresholdε. In this case,scannot be guaranteed to be a star point because of the lack of accuracy.In Fig. 4(a), we show the subdivision of the star test using interval arithmetic for a unit disk defined byf(x,y)=x2+y2−1≤0, the candidate star point is the center of the disk, i.e.s=(0,0), and the initial studied box isB=([−1,1],[−1,1]). The initial boxBcovers the disk, and contains the candidate star points, thus it needs to be subdivided. At last, there is no such sub-box that contains both the candidate star pointsand boundary points of the object simultaneously.With Bernstein based methods, a range off(B)andg(B)is given by theminand themaxof the Bernstein coefficients. Therefore, for the problem of the star test, the condition (1) can be tested using Bernstein based methods. For example, we can write the polynomialg(x),x∈Bin Bernstein form, then it is guaranteed to be positive if all the Bernstein coefficients are positive. Usually, it is more efficient than using the method of interval arithmetic due to the efficiency and stability of the de Casteljau algorithm and the fact that Bernstein based methods provide tighter ranges for polynomials. For the example of Fig. 4(a), it is not, because the interval arithmetic is optimal when each variable occurs once in the expression of functions.We propose a method to improve the efficiency of the star test for implicit objects. LetSbe defined byS={x∈Rd∣f(x)≤0}, wheref(x)is a total degreenpolynomial, given a points=(s1,…,sd), then the expression in the star condition∇f(x)⋅(x−s)is also a total degreenpolynomial. For each monomial off(x)with total degreemless thann, it is elevated to degreenvia the product with a monomialhn−m, wherehis a new auxiliary variable (hfor homogeneous variable). Therefore, we get a degreenhomogeneous polynomialF(x,h), such thatF(x,1)=f(x). Then the star condition (1) fors∈Sbecomes{(x,h)∈(B,[1,1])∣F(x,h)=0,∇F(x,h)⋅((x,h)−(s,h))≤0}=0̸.AsF(x,h)is a homogeneous polynomial, we have(3)∇F(x,h)⋅(x,h)=nF(x,h)after Euler’s theorem. Thus, the star condition becomes(4){x∈B∣F(x,1)=0,−∇F(x,1)⋅(s,1)≤0}=0̸.LetG(x)=−∇F(x,1)⋅(s,1). The degree ofG(x)is reduced ton−1. Thus, no matter whether the interval arithmetic method or a Bernstein based method is used, less subdivisions are needed for the homogeneous star test compared to the naive star test of Eq. (2).For the example shown in Fig. 4(a), the new variableh=1is introduced to makef(x,y)a homogeneous polynomial, that isF(x,y,h)=x2+y2−h2. The gradient ofF(x,y,h)is∇F(x,y,h)=(2x,2y,−2h). Sinceh=1, we haveG(B)=−∇F(B,1)⋅(s,1)=2, which shows that∀x∈Bthe star condition holds trivially, and strictly no subdivision is needed, see Fig. 4(b). In comparison, when the naive star condition (2) is used, the given box has to be subdivided to prove that the center of the box is a star, as shown in Fig. 4(a). In this example, whether the interval arithmetic method or the Bernstein based methods is used, we have the same result for both the naive star test and the homogeneous star test because each variable occurs once. That is, there is no dependency, thus no dependency loss and naive interval arithmetic gives exact bounds.Notably, for a conic such as a disk, the equationG(x)=0defines the polar line (or plane) ofsrelatively to the conic, see Fig. 5. We try to further explain the reason of improvement of the homogeneous star test with the following example.In subfigures 6(a) and (b), the objectSis the complement set of a unit disk, and the studied box isB=([−1.6,−0.9],[−0.35,0.35]). In subfigures 6(c) and (d), the objectSis the unit disk, and the box isB=([0.25,1.25],[−0.5,0.5]). In both examples, the center of the boxsis a star ofB∩S. With the naive star condition (2), we need subdivisions and we subdivide the studied box along the longest edge at each step if the contradicting setCcannot be guaranteed to be an empty set. The subdivisions are shown in subfigures 6(a) and (c). With the homogeneous star condition, we use the same subdividing strategy but we do not need any subdivision because the polar line of the candidate star point relatively to the disk does not pass through the studied box, see subfigures 6(b) and (d). Both interval arithmetic and Bernstein based methods result in the same subdivisions here.The homogeneous star test also needs subdivision when the polar line of the candidate star point passes through the studied box, however it needs fewer subdivisions than the naive star test (2), see Fig. 7.So far, we did not yet discuss the efficiency of the star test whensis not a star. Of course, it is important to detect as soon as possible thatsis not a star. This is discussed later in Section  4.4.This section presents another optimization of the star test. Actually, the star test is the problem of finding a point in the contradicting set, i.e.  to findxin a given boxB, such thatf(x)=0andg(x)≤0(orG(x)≤0for the homogeneous star test). An optimization method has been proposed in  [31] to solve this problem, we recall the method and detail it for the 2D case in the remainder of this section.First,f(x,y)andg(x,y)are expressed with the same Bernstein control net, i.e.fi,jandgi,j,i=0,…,m,j=0,…,n. We then searchk∈Rsuch thath(x,y)=kf(x,y)+g(x,y)>0,11Thishis independent of the homogeneous variable in Section  4.2.i.e.  for all control points,hi,j=kfi,j+gi,jare strictly positive. Thus, if we find such ak,f(x,y)=0impliesg(x,y)>0, and we have proved that the system(5){f(x,y)=0,g(x,y)≤0has no solution, the contradicting setCis empty, so the candidate point is a star. Otherwise, the boxBis subdivided, and for each sub-box we perform the star test of the candidate star pointswith linear programming optimization. When the size of a sub-box is smaller than a given thresholdε, in this case we cannot get a guaranteed result because of the lack of accuracy.To solve forkis just a linear programming problem with only one unknownk, so it is easy to solve: start with an interval(−∞,+∞)fork, and clip it with linear inequalities. For alli, for allj,kfi,j+gi,j>0(take≥ε=10−3to simplify). According to the sign offi,j, we clip for theminor themaxof the current interval fork. It is similar to ray casting a convex polyhedron. Eventually, we obtain an interval fork, maybe it is empty.In 3D, we still have only one equationf(x)=0and only one inequalityg(x)≤0orG(x)≤0, so we still have one unknownk. The sole difference is that we have control netfi,j,kandgi,j,k.This improvement is independent of the homogenization optimization. For the examples in Fig. 6, with linear programming optimization, no subdivision is needed for both the naive star test and the homogeneous star test. For the example in Fig. 7, only one subdivision is needed for both the naive star test and the homogeneous star test if this linear programming optimization method is used.Furthermore, with this linear programming optimization, the homogeneous star test turns out to be mathematically equivalent to the naive star test. We prove it for the 2D case. From  (3), we haveg(x)=nf(x)+G(x), wherenis the degree off(x). Thus,kf(x)+g(x)=(k+n)f(x)+G(x). For the 2D case, iff(x),g(x), andG(x)are expressed with the same Bernstein control net, i.e.fi,j,gi,j, andGi,j, we then getkfi,j+gi,j=(k+n)fi,j+Gi,j, i.e.Gi,j=gi,j−n. Therefore, ifkfulfilskfi,j+gi,j>0, thenK=k+nfulfilsKfi,j+Gi,j>0and the two methods (naive, and homogeneous) are equivalent with linear programming optimization.Notably, the linear programming optimization method can be extended to other geometric bases (such as Bspline, NURBS, etc.), which possess convex hull property and subdivision algorithms like de Casteljau algorithm.In the star test ofs∈B∩Sfor a given objectSand a studied boxB, suppose that we find a sub-boxBi⊂Bsuch thatg(Bi)<0and a vertexvofBiis insideS, i.e.f(v)<0, then the contradicting setCcontains at least the vertexv, sosis not a star ofB∩S. It helps to terminate the procedure of subdivision as soon as possible whensis not a star point. For the linear programming optimization, when there is noksatisfying the condition (5),sis not a star if for one subdivided boxBi, we havemax{f0,0,fm,0,f0,n,fm,n}≥0,min{f0,0,fm,0,f0,n,fm,n}≤0, (thusBi∩∂S≠0̸) andmax{gi,j}≤0(thusCi≠0̸). Experimental results are shown in Section  5.So far, we have presented computable sufficient conditions for a candidate points∈B∩Sto be or not to be a star point ofB∩S. The star test is performed when the boxBis not full and not empty. When the star condition cannot be guaranteed or contradicted, the boxBis subdivided and the star test ofsis recursively performed for each sub-box.However, it may happen in some rare cases that these sufficient conditions are never satisfied during the subdivision, usually when the boundary ofSis tangent or almost tangent to the boundary ofB. It also occurs with the original methods by Delanoue et al. In these cases, we have to stop the procedure to avoid endless subdivision, and the algorithm fails. The conservative choice is to consider thatsis not a star forB∩S. ThusBis subdivided and star points are searched in sub-boxes ofB.In this section, we summarize the procedure of the star test of a candidate pointsfor a given objectSin a studied boxB. The star test is actually an emptiness test of the contradicting setCin the boxB. The detail is shown in Algorithm 1.

@&#CONCLUSIONS@&#
