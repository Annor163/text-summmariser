@&#MAIN-TITLE@&#
The static bicycle relocation problem with demand intervals

@&#HIGHLIGHTS@&#
A variant of the One-Commodity Pickup and Delivery Traveling Salesman Problem is studied.The supply/demand of a vertex is represented by an interval rather than a single value.An integer programming formulation and a branch-and-cut algorithm are developed.Valid inequalities have been adapted from 1-PDTSP and Covering Tour Problem.The algorithm is capable of solving instances with up to 50 customers within two hours of CPU time.

@&#KEYPHRASES@&#
Traveling salesman,Pickup and delivery,Branch-and-cut,

@&#ABSTRACT@&#
This study introduces the Static Bicycle Relocation Problem with Demand Intervals (SBRP-DI), a variant of the One Commodity Pickup and Delivery Traveling Salesman Problem (1-PDTSP). In the SBRP-DI, the stations are required to have an inventory of bicycles lying between given lower and upper bounds and initially have an inventory which does not necessarily lie between these bounds. The problem consists of redistributing the bicycles among the stations, using a single capacitated vehicle, so that the bounding constraints are satisfied and the repositioning cost is minimized. The real-world application of this problem arises in rebalancing operations for shared bicycle systems. The repositioning subproblem associated with a fixed route is shown to be a minimum cost network problem, even in the presence of handling costs. An integer programming formulation for the SBRP-DI are presented, together with valid inequalities adapted from constraints derived in the context of other routing problems and a Benders decomposition scheme. Computational results for instances adapted from the 1-PDTSP are provided for two branch-and-cut algorithms, the first one for the full formulation, and the second one with the Benders decomposition.

@&#INTRODUCTION@&#
The Static Bicycle Relocation Problem with Demand Intervals (SBRP-DI) is defined on a complete directed graphG=(V,A), whereV={0,…,n}is the set of vertices and A is the set of arcs. Vertex 0 is called the depot while the remaining vertices are called stations. Associated with each vertexi∈V, are three parameters(li,bi,ui)corresponding respectively to the lower bound, the current supply, and the upper bound of the feasible amount of a commodity at the vertex. With each arc(i,j)∈Ais associated a travel costtij, and the cost associated with the handling of a bicycle is denoted as h. A vehicle of capacity Q leaves the depot, performs a tour visiting each vertex at most once to perform a pickup or a delivery, and returns to the depot. At the end of the tour, the resulting inventory at every vertex i must lie within the interval[li,ui]. The objective is to minimize the total travel and handling cost.The SBRP-DI is a variant of the One-Commodity Pickup and Delivery Traveling Salesman Problem (1-PDTSP) studied by Hernández-Pérez and Salazar-González (2004, 2007), in which a single capacitated vehicle visits customers to pick up and deliver the same commodity. In addition to the demand intervals, there are a number of features of the SBRP-DI that differentiate it from the 1-PDTSP. Firstly, the tour may not visit all vertices. Secondly, the commodity cannot flow through the depot. Lastly, a handling cost h is added to the routing cost per every commodity unit handled. The demand intervals introduce a degree of flexibility associated with transshipment vertices, i.e. verticesi∈Vfor whichli⩽bi⩽ui. A transshipment vertex may or may not be visited, which may help decrease the cost of routing by supplying or demanding commodities as required. Notably, the Swapping Problem (SP) introduced by Anily and Hassin (1992) also involves pickups and deliveries with transshipment vertices and multiple commodities. Branch-and-cut algorithms for the SP were developed by Bordenave, Gendreau, and Laporte (2009, 2012) and Erdoğan, Cordeau, and Laporte (2010). Bordenave, Gendreau, and Laporte (2010) have also developed construction and improvement heuristics for the SP.Real-world applications of the SBRP-DI arise in shared bicycle systems, which have attracted the attention of several groups of researchers in recent years. These have been studied from several perspectives: evaluating the mobility patterns of users, determining the number and location of stations, maximizing user satisfaction, and minimizing the cost of relocating the bicycles. The study by Raviv, Tzur, and Forma (2013) categorizes the bicycle relocation problems as static and dynamic, which occur when the system activity level is low and high, respectively. The authors study the Static Repositioning Problem (SRP), in which the objective is to minimize a convex nonlinear function representing user dissatisfaction, and present four integer programming formulations for the SRP, together with computational results.Research on shared vehicle systems is becoming increasingly widespread. Static Stations Balancing Problem is studied in Benchimol et al. (2011), and a 9.5-approximation algorithm is provided for this problem. Another closely related problem is that of Chemla, Meunier, and Wolfler Calvo (2013), where a bicycle station can be visited more than once for a pickup or a delivery. The authors provide a branch-and-cut algorithm as well as a tabu search algorithm for this problem. A variable neighborhood search algorithm for balancing bicycle sharing systems is designed in Rainer-Harbach, Papazek, Hu, and Raidl (2013). An interesting study by Schuijbroek, Hampshire, and van Hoeve (2013) employs queuing analysis to determine service level requirements at each bike sharing station, and to solve the resulting vehicle routing problem. A recent study (Nair & Miller-Hooks, 2014) analyzes the equilibrium network design problem of shared-vehicle systems and presents a bi-level, mixed-integer program.Most of the problems cited above are based on a single demand or supply value for every customer, which restricts the vehicle to picking or delivering a preset number of commodities. The SBRP-DI is therefore more general, and empirically more difficult, because these values must lie within an interval. It is a special case of the models presented in Raviv et al. (2013) since these authors use a convex user dissatisfaction function which can be set to zero inside the interval and to infinity outside it. Let us define the deficit of station i asdi=max{li-bi,0}and its excess asei=max{bi-ui,0}. Transforming an instance of the SBRP-DI into one of the 1-PDTSP by setting the demand (supply) of a station to be equal to its deficit (excess) may yield an infeasible instance since the sum of the demands may not be equal to the sum of supplies.In this study, we provide two exact algorithms for the SBRP-DI. To gain a better insight into the SBRP-DI, we first study the subproblem of computing pickup and delivery quantities when the vehicle route is fixed. We show that this subproblem is a minimum cost network flow problem (MCNFP), whether the handling costh=0or not. We also present a model for the general problem consisting of simultaneously determining the vehicle route as well as the pickup and delivery quantities. We develop a standard branch-and-cut algorithm as well as a Benders decomposition based branch-and-cut algorithm, and we present computational results for both cases.The remainder of this paper is organized as follows. In Section 2, we study the subproblem corresponding to a fixed route, without and with handling cost. In Section 3 we present an integer linear programming formulation for the SBRP-DI based on our findings in Section 2, as well as valid inequalities we have adapted from the routing literature. A Benders decomposition scheme for the integer linear programming formulation is provided in Section 4, together with a unified branch-and-cut algorithm capable of handling both algorithms. This is followed by computational results in Section 5, and by conclusions in Section 6.We first focus on the subproblem of determining the pickup and delivery amounts when the vehicle route is fixed. For the sake of simplicity, we assume that the vertices are numbered in the order they are visited. The two cases for whichh=0andh⩾0will be treated separately.The fixed route subproblem without handling cost is called the SBRP-DIF and is defined on an auxiliary graphG^=(V^,A^). Denote the set of vertices byV^=V^1∪V^2, withV^1=VandV^2={n+1}. The supply of vertexi∈V^1isbˆi=bi, andbˆn+1=-∑i∈Vbi. Denote the set of arcs byA^=A^1∪A^2, whereA^1andA^2are constructed as follows. For every vertexi∈V^1⧹{0,n}, insert an arc(i,i+1)intoA^1, with cost 0, lower bound 0 and upper bound Q. These arcs represent the number of units transported to the next vertex. We also insert two arcs(0,1)and(n,0)intoA^1, with cost 0, lower bound 0 and upper boundsmin{b0,Q}and Q, respectively. These arcs represent number of units leaving and entering the depot. The flow on the arc(0,1)is also bounded above by the supply at the depot, in order to avoid commodities from flowing through the depot. For every vertexi∈V^1, insert an arc(i,n+1)intoA^2, with cost 0, lower boundliand upper boundui. This arc represents the final amount of the commodity left at vertex i. Define the set of arcs leaving vertex i asδ+(i), and the set of arcs entering vertex i asδ-(i). Letzijdenote the commodity flow on arc(i,j). We writez(S)to denote the sum of the z variables in arc set S, i.e.z(S)=∑(i,j)∈Szij. We then have to solve(1)(SBRP-DIF)z(δ+(i))-z(δ-(i))=bˆi(i∈V^)(2)li⩽zij⩽ui((i,j)∈A^2)(3)0⩽z01⩽min{b0,Q}(4)0⩽zij⩽Q((i,j)∈A^1⧹{(0,1)}).Fig. 1depicts an instance of the SBRP-DIF. Using an enhanced capacity scaling algorithm, together with the fact that the number of arcs isO(n), the problem stated above can be solved inO(n2logn2)time (Ahuja, Magnanti, & Orlin, 1993).The fixed route subproblem with handling cost is called the SBRP-DIHF and is defined on an auxiliary graphG‾=(V‾,A‾). Denote the set of vertices byV‾=V‾1∪V‾2∪V‾3, withV‾1=VandV‾3={2n+2}. We constructV‾2by including a vertex for every vertexi∈V, where the copy of vertex i inV‾2isn+1+i. Set the supply of vertexi∈V‾1asb¯i=biand the demand of vertexn+1+i∈V‾2asb¯n+1+i=-bi. Letb¯2n+2=0. Denote the set of arcsA‾=A‾1∪A‾2∪A‾3, whereA‾1,A‾2, andA‾3are constructed as follows. For verticesi∈V‾1⧹{0,n}, insert an arc(i,i+1)intoA‾1, with cost 0, lower bound 0 and upper bound Q. These arcs represent the number of units transported to the next vertex. We also insert two arcs(0,1)and(n,0)intoA‾1, with cost h, lower bound 0 and upper boundmin{b0,Q}and Q, respectively. These arcs represent the commodity amounts carried out of and into the depot, respectively, and also account for the handling cost at the depot. Note that the flow on the arc(0,1)is also bounded above by the supply at the depot in order to avoid commodities from flowing through the depot. For every vertex inV‾1, insert an arc(i,n+1+i)intoA‾2, with cost 0, lower boundliand upper boundui. These arcs represent the amount of commodity units left at vertex i after the visit of the vehicle. For every vertex inV2⧹{n+1}, insert two arcs(n+1+i,2n+2)and(2n+2,n+1+i)intoA‾3, with cost h, lower bound 0 and upper bound Q. For vertexn+1, also insert two arcs(n+1,2n+2)and(2n+2,n+1)intoA‾3, with cost 0, lower bound 0 and upper bound Q. These arcs represent the number of units unloaded and loaded at vertex i, respectively. Note that the handling cost at the depot has been modeled in a different way from that of the other vertices, since handling occurs twice at the depot, once in the beginning and once in the end of the tour. Let us defineA‾3′=A‾3∪{(0,1),(n,0)}as the set of arcs with a positive cost, for the sake of simplicity. The resulting formulation for this subproblem is then(5)(SBRP-DIFH)minimize∑(i,j)∈A‾3′hzij(6)subject toz(δ+(i))-z(δ-(i))=b¯i(i∈V‾)(7)li⩽zij⩽ui((i,j)∈A‾2)(8)0⩽z01⩽min{b0,Q}(9)0⩽zij⩽Q((i,j)∈A‾⧹A‾2∪{(0,1)}).Fig. 2depicts an instance of the SBRP-DIHF. As in the case of SBRP-DIHF, this problem can be solved inO(n2logn2)time (Ahuja et al., 1993).We now construct an integer programming formulation for SBRP-DI based on the minimum cost network flow formulation for the SBRP-DIHF presented in Section 2. Although it is possible to construct two different models, based on both network flow formulations, we opt to use the SBRP-DIHF model of Section 2.2 since it can handle both cases. To improve the lower bounds yielded by the relaxation of the formulation, we first strengthen the capacity constraints (17) using the implications of integrality. We next adapt the clique cluster inequalities for the 1-PDTSP (Hernández-Pérez & Salazar-González, 2007) to the SBRP-DIH. Finally, we adapt the arc-vertex inequalities, the strong connectivity constraints, and the strong 2-matching inequalities from the Covering Tour Problem (CTP) (Gendreau, Laporte, & Semet, 1997), the similarity of which enables us to adapt its valid inequalities. The proofs of validity of these constraints are identical for both problems.Before presenting the formulation, we redefineA‾1asA‾1={(i,j):i,j∈V,i≠j}. With this new definition, the circuits on which the pickup and delivery decisions were considered in Section 2 become cliques, and we can incorporate routing decisions to the model. Also define the vehicle requirement of a subsetS⊂Vasr(S)=max∑i∈S(bi-ui)/Q,∑i∈S(li-bi)/Q. Denote the mandatory vertices asT‾=i∈V‾1:i=0ordi>0orei>0. Letxijbe equal to 1 is the vehicle travels from vertex i to j, and 0 otherwise. We writex(S)to denote the sum of the x variables in arc set S, i.e.x(S)=∑(i,j)∈Sxij. Finally, letyibe equal to 1 if vertex i is visited, and 0 otherwise. The formulation is(10)(SBRP-DIH)minimize∑(i,j)∈A‾1tijxij+∑(i,j)∈A‾3′hzij(11)subject tox(δ+(i))=yi(i∈V‾1)(12)x(δ-(i))=yi(i∈V‾1)(13)x(δ+(S))⩾r(S)(S⊂V‾1)(14)x(δ-(S))⩾r(S)(S⊂V‾1)(15)z(δ+(i))-z(δ-(i))=b¯i(i∈V‾)(16)z0j⩽min{b0,Q}xij((0,j)∈A‾1)(17)zij⩽Qxij((i,j)∈A‾1:i≠0)(18)li⩽zij⩽ui((i,j)∈A‾2)(19)zij⩽Qyi((i,j)∈A‾3)(20)xij=0or1((i,j)∈A‾)(21)yi=0or1(i∈V‾1⧹T‾)(22)yi=1(i∈T‾)(23)zij⩾0((i,j)∈A‾).Equalities (11) set the outflow of a vertex to 1 if it is visited, and to 0 otherwise. Similarly, Equalities (12) set the inflow of a vertex to 1 if it is visited, and to 0 otherwise. Inequalities (13) and (14) are the connectivity constraints which define the minimum outdegree and indegree of a subset of vertices as a function of the capacity requirements. Equalities (15) enforce the flow conservation conditions. Constraints (16) and (17) are capacity constraints, which restrict the flow of commodities on an arc to the capacity of the vehicle. Constraints (18) ensure that the demand interval requirements are met. Constraints (19) forbid loading and unloading operations at a vertex if it is not visited. Constraints (20) and (21) are integrality constraints. Constraints (22) force the depot, the vertices with positive deficits, and the vertices with positive excesses to be visited. Finally, constraints (23) are non-negativity constraints.We now strengthen the capacity constraints (16) and (17) by using coefficients which imply that a vehicle leaving a vertex should have sufficient capacity to pick up the excess of the vertex if it has an excess, or to deliver the deficit of the vertex if it has a deficit. Letαijdenote the upper bound onzij:αij=Q(i,j≠0andbi⩾liandbj⩽uj)Q+bi-li(i,j≠0andbi<liandbj⩽uj)Q+uj-bj(i,j≠0andbi⩾liandbj>uj)min{Q+bi-li,Q+uj-bj}(i,j≠0andbi<liandbj>uj)min{b0,Q}(i=0andbj⩽uj)min{b0,Q+uj-bj}(i=0andbj>uj)min{u0,Q}(j=0).With this definition ofαij, we can unify and strengthen (16) and (17) as(24)zij⩽αijxij((i,j)∈A‾1).Clique cluster inequalities are an adaptation of the rank inequalities for the Stable Set Problem. Hernández-Pérez and Salazar-González (2007) have adapted the clique inequalities to the 1-PDTSP by considering subsets of verticesW1,…,Wmsatisfying the following conditions: (1) all subsets intersect at a single vertexv:(Wk∩Wl={v},1⩽k<l⩽m); (2) the capacity requirement of any subset does not exceed the vehicle capacity(r(Wk)⩽1,1⩽k⩽m); (3) the capacity requirement of the union of any two subsets exceeds the vehicle capacity(r(Wk∪Wl)⩾2,1⩽k<l⩽m). By construction of the customer subsets, only customers in one subsetWkcan be visited consecutively, implyingx(δ+(Wk))=1. The remaining subsetsWlmust satisfyx(δ+(Wl))⩾2. Summing up the inequality and the following inequalities we obtain(25)∑k=1mx(δ+(Wk))⩾2m-1.We emphasize that the transshipment vertices are an exception, since they do not exist in 1-PDTSP, and their existence may result inr(Wk)=0orr(Wk⧹{v}=0. To handle this exception, we modify the second condition as follows: (2) the capacity requirement of any customer subset is exactly one, even when the intersection vertex is deleted(r(Wk)=1andr(Wk⧹{v})=1,1⩽k⩽m).Proposition 1The inequalities(26)xij⩽yi((i,j)∈A‾1)and(27)xij⩽yj((i,j)∈A‾1)are valid for SBRP-DIH.Proposition 2The following inequalities are valid for SBRP-DIH:(28)∑i∈S,j∈V‾1⧹Sxij⩾1(S⊂V‾1:2⩽|S|⩽|V‾1|-2,T‾⧹S≠∅,S∩T‾≠∅).We refer the reader to the study byGendreau et al. (1997)for a proof ofProposition 2.Proposition 3The following inequalities are valid for SBRP-DIH:(29)∑i,j∈H:i≠jxij+∑(i,j)∈A′(xij+xji)⩽∑i∈Hyi+12(|A′|-1),for allH⊂V‾1andA′⊂A‾1satisfying(i)|{i,j}∩H|=1((i,j)∈A′),{i,j}∩{k,l}=∅((i,j)≠(k,l)∈A′),|A′|⩾3and odd.We refer the reader to the study byGendreau et al. (1997)for a proof ofProposition 3. To identify the violated strong 2-matching constraints, we use the heuristic ofPadberg and Rinaldi (1990).In this section we present the details of a Benders decomposition scheme, and a unified branch-and-cut algorithm to solve the full formulations as well as the master problem of the Benders decomposition.The formulation SBRP-DIH includes a MCNFP as a subproblem, which allows us to apply Benders decomposition. To this end, we remove the flow variableszijalong with the associated constraints, and we add an auxiliary variable to construct the master problem.(30)(MP)minimize∑(i,j)∈A‾1tijxij+w(31)subject tox(δ+(i))=yi(i∈V‾1)(32)x(δ-(i))=yi(i∈V‾1)(33)x(δ+(S))⩾r(S)(S⊂V‾1)(34)x(δ-(S))⩾r(S)(S⊂V‾1)(35)xij=0or1((i,j)∈A‾)(36)yi=0or1(i∈V‾1⧹T‾)(37)yi=1(i∈T‾)(38)w⩾0.The slave problem is constructed by fixing thexijandyivariables to an optimal solution of the MP. For the sake of simplicity, letc¯ij=hif(i,j)∈A‾3′, and 0 otherwise. The resulting slave problem is given below:(39)(SP)minimize∑(i,j)∈A‾c¯ijzij(40)subject toz(δ+(i))-z(δ-(i))=b¯i(i∈V‾),(41)zij⩽αijxij∗((i,j)∈A‾1),(42)zij⩾li((i,j)∈A‾2)(43)zij⩽ui((i,j)∈A‾2)(44)zij⩽Qyi∗((i,j)∈A‾3)(45)zij⩾0((i,j)∈A‾).The next step is to construct the dual of the slave problem whose solution will yield valid inequalities. Let us associate the dual variable setsv1,…,v5with constraints sets (40)–(44) of the SP. The dual slave problem is then(46)(DSP)maximize∑i∈V‾b¯ivi1+∑(i,j)∈A‾1αijxij∗vij2+∑(i,j)∈A‾2livij3+uivij4+∑(i,j)∈A‾3Qyi∗vij5(47)subject tovi1-vj1+vij2⩽c¯ij((i,j)∈A‾1)(48)vi1-vj1+vij3+vij4⩽c¯ij((i,j)∈A‾2)(49)vi1-vj1+vij5⩽c¯ij((i,j)∈A‾3)(50)v1unrestricted,v2,v4,v5⩽0,v3⩾0.If the optimal solution value of the DSP is strictly greater than that of the auxiliary variablew∗, we add an optimality cut of the following form to the MP, using the optimal solutionv∗of the DSP:(51)w⩾∑i∈V‾b¯ivi1∗+∑(i,j)∈A‾1αijxijvij2∗+∑(i,j)∈A‾2livij3∗+uivij4∗+∑(i,j)∈A‾3Qyivij5∗.Note that these inequalities are required only whenh>0. If the DSP is unbounded, we add a feasibility cut of the following form to the MP, using the unbounded rayv∗:(52)∑i∈V‾b¯ivi1∗+∑(i,j)∈A‾1αijvij2∗xij+∑(i,j)∈A‾2livij3∗+uivij4∗+∑(i,j)∈A‾3Qvij5∗yi⩽0.The feasibility cuts can also be upgraded to yield the rounded Benders inequalities:(53)∑(i,j)∈A‾1⌊αijvij2∗⌋xij+∑(i,j)∈A‾3⌊Qvij5∗⌋yi⩽⌊-∑i∈V‾b¯ivi1∗-∑(i,j)∈A‾2(livij3∗-uivij4∗)⌋.Our unified branch-and-cut algorithm, capable of handling both SBRP-DIH and MP, can be summarized as follows.Step 1 (Root node).Construct a subproblem consisting of the initial formulation and insert this subproblem in a list.If the list is empty, stop. Else select and remove a subproblem from the list.Solve the subproblem. If the objective function value is less than the best lower bound, go to Step 2.Identify violated members of the arc-vertex constraints, strong connectivity constraints, strong 2-matching constraints, clique cluster inequalities, and add them to the subproblem. For MP, also solve DSP and identify violated feasibility cuts and optimality cuts. If at least one constraint is generated, go to Step 3.If the solution is integer, update the best known solution, and go to Step 2.Construct two subproblems by branching on a binary fractional variable. Add the subproblems to the list and go to Step 2.To separate the connectivity constraints (13), (14), and the clique cluster inequalities (25), we have used the separation algorithms described in Hernández-Pérez and Salazar-González (2007). To identify the violated strong 2-matching inequalities, we have used the heuristic of Padberg and Rinaldi (1990).We have implemented the branch-and-cut algorithm using C++ and the Callable Library of CPLEX 12.1 on the IRIDIS 3 computing cluster having Intel Nehalem nodes with two 4-core processors and 22gigabytes of RAM. We have adapted a subset of the 1-PDTSP instances provided by Hernández-Pérez and Salazar-González (2007), which are available at http://hhperez.webs.ull.es/PDsite/. Note that these instances associate a negative quantity with a vertex to denote a demand, and a positive quantity to denote a supply. We have assumed all our vertices to have an identical lower bound p, and an identical upper bound q. Given the set of supply and demand valuesbi′, we have setp=-mini∈Vbi′, and used the following rule to determine the current supply of vertex i:bi=bi′+qbi′>0p+bi′bi′<0⌊(p+q)/2⌋bi′=0.This choice of p ensures thatbi⩾0,di=-bi′ifbi′<0, andei=bi′ifbi′>0, for alli∈V. Consequently, our parameter for experimentation becomes q, which is constrained to be at least equal to p. We have experimented withq-p∈{1,2,3,4,5},h=0andh⩾0. As h grows, the SBRP-DIH instances behave increasingly similar toq-p=0, since extra handling is discouraged. We have observed that the CPU time requirement is almost identical for relatively small values of h andh=0, and we only report results forh=0. We have adapted 240 instances, which yielded 1200 instances when combined with the range ofq-p. Table 1provides results for|V|=30. Tables 2 and 3present the results for|V|=40and|V|=50, respectively. The column “Name” refers to ten instances that share it, e.g. row n30q10 corresponds to average results on 10 instances. The detailed results are available upon request from the first author.We first present computational results corresponding to the branch-and-cut algorithm used in the solution of SBRP-DIH. When|V|=30, all instances are solved optimally within six minutes. Table 1 shows that the problem becomes easier asq-pincreases. This is due to the fact that vertices with a deficit can absorb more units, vertices with an excess can supply more, and transshipment vertices have a larger degree of freedom in both directions. Table 1 also shows that solution quality also improves whenq-pbecomes larger. This is reflected by the column “gain” which reports the decrease in the objective function with respect to the base case “q-p=0”. When|V|=40, all instances are also solved optimally within 12minutes. Tables 2 and 3 report the average CPU times in seconds to solve instances withq-p=0andq-p=10for|V|=30and|V|=40, respectively. These tables demonstrate the behavior of the algorithm when the instance at hand is closest to the 1-PDTSP (q-p=0), and when it is closest to the TSP (q-p=10). When|V|=50, it is not always possible to solve the problem optimally within two hours of computing time, and our algorithm successfully solves 367 out of 400 instances. The hardest instances are those with low vehicle capacities, and the maximum observed optimality gap is 6.39%. In Table 4, we report the average gaps with respect to the best known lower bound generated by the branch-and-cut algorithm. It can be observed that the average gaps are less than 1% over all instances, and the average computing times are below 40minutes.The results obtained by solving MP improve upon those of SBRP-DIH in general. CPU times for|V|=30presented in Table 4 show the superiority of MP over SBRP-DIH. The only exception is a single instance forq-p=5, for which CPLEX struggled to find the integer optimal solution for about 40minutes. The same behavior is observed for|V|=40, where MP is solved 4.5 times faster than SBRP-DIH on average. Similar to the analysis of SBRP-DIH, Tables 5 and 6report the average CPU times in seconds to solve instances withq-p=0andq-p=10for|V|=30and|V|=40, respectively. These tables demonstrate the behavior of the algorithm when the instance at hand is closest to the 1-PDTSP (q-p=0), and when it is closest to the TSP (q-p=10). The computational reach of both formulations seems to be|V|=50, with MP being solved 1.5 times faster than SBRP-DIH on average, and 14 more instances being successfully solved to optimality within two hours of CPU time. Table 7provides computational results for|V|=50. Note that in spite of a better performance in terms of CPU time, MP struggles to find good initial solutions for larger instances with relatively low values ofq-p, resulting in higher gaps as observed for|V|=50andq-p=2.

@&#CONCLUSIONS@&#
We have introduced, modeled, and solved the SBRP-DI, a variant of the 1-PDTSP encountered in the repositioning of bicycles in public sharing systems. We have first studied the subproblem arising when the vehicle route is fixed, and we have showed it to be a MCNFP, whether the handling cost is zero or not. Based on the network flow formulation, we have developed an integer programming formulation. We have imported valid inequalities from the routing literature, and we have developed a branch-and-cut algorithm as well as a Benders decomposition scheme. We have described a unified branch-and-cut algorithm capable of handling both the full model and the master problem of the Benders decomposition. We have also presented computational results for instances adapted from 1-PDTSP. SBRP-DI is observed to be easier than 1-PDTSP, due to the flexibility provided by the demand intervals. The branch-and-cut algorithm is capable of solving instances with up to 50 vertices by either formulation. However, the Benders based formulation and algorithm yield much shorter computation times and can solve more instances.