@&#MAIN-TITLE@&#
Strategic robust supply chain design based on the Pareto-optimal tradeoff between efficiency and risk

@&#HIGHLIGHTS@&#
Strategic robust supply chain design considering both the efficiency and the risk.All Pareto-optimal robust supply chain configurations are found.Any configuration has a risk versus reward curve between maximum reward and minimum risk performance.An efficient algorithm based on the branch-and-reduce algorithm with specialized cuts.Proof that the risk versus reward curve has an increasing slope.

@&#KEYPHRASES@&#
Facilities planning and design,Supply chain network design,Stochastic programming,Branch and reduce algorithm,

@&#ABSTRACT@&#
The strategic design of a robust supply chain has to determine the configuration of the supply chain so that its performance remains of a consistently high quality for all possible future conditions. The current modeling techniques often only consider either the efficiency or the risk of the supply chain. Instead, we define the strategic robust supply chain design as the set of all Pareto-optimal configurations considering simultaneously the efficiency and the risk, where the risk is measured by the standard deviation of the efficiency. We model the problem as the Mean–Standard Deviation Robust Design Problem (MSD-RDP). Since the standard deviation has a square root expression, which makes standard maximization algorithms based on mixed-integer linear programming non-applicable, we show the equivalency to the Mean–Variance Robust Design Problem (MV-RDP). The MV-RDP yields an infinite number of mixed-integer programming problems with quadratic objective (MIQO) when considering all possible tradeoff weights. In order to identify all Pareto-optimal configurations efficiently, we extend the branch-and-reduce algorithm by applying optimality cuts and upper bounds to eliminate parts of the infeasible region and the non-Pareto-optimal region. We show that all Pareto-optimal configurations can be found within a prescribed optimality tolerance with a finite number of iterations of solving the MIQO. Numerical experience for a metallurgical case is reported.

@&#INTRODUCTION@&#
For any corporation involved in delivering goods to their customers and operating in a competitive environment, the design of an efficient supply chain is of critical importance. A supply chain is defined as a set of three or more entities (organizations or individuals) directly involved in the upstream and downstream flows of products, services, finances, and/or information from a source to a customer (Mentzer et al., 2001). A supply chain encompasses the acquisition of raw material from suppliers, the transformation of materials into intermediate and finished products, the storage of materials or products, and the distribution of the finished products to customers.The planning decisions with respect to a supply chain range from short-term decisions, such as vehicle dispatching and routing, to long-term decisions such as the definition of the corporate mission. Depending on their permanence, the decisions are typically divided into strategic, tactical, and operational planning. The goal of the strategic planning is to determine the configuration of the supply chain so that its long-term performance over the planning horizon is maximized. Given the permanence of the configuration decisions, the future conditions during the planning horizon cannot be known with certainty. Configuring a supply chain that will perform efficiently in a variety of unknown future environments belongs to the class of decision problems known as strategic planning under uncertainty. The supply chain configuration itself is called a robust design. The uncertainty of the future is usually modeled using scenarios (Peterson, Graeme, & Stephen, 2003). In the strategic design of supply chains there may be many thousands of parameters whose value is not known with certainty at the decision time. Even if the probability distributions of the individual parameters were known, constructing a joint probability distribution function for the scenarios in function of the parameters is not possible. In the following approach we model the uncertainty of the future by means of scenarios whose probabilities are assumed to be known. Scenarios may be grouped in classes or sets, such as best-guess, best case, and worst case scenarios, or represent high-impact, low-probability events. A robust (supply chain) design is the configuration that will perform efficiently for all these scenarios.Multiple definitions of robust design exist in the literature. In the area of strategic planning under uncertainty, related notions such as agility, adaptability, responsiveness, resilience, and flexibility also have been used. A recent survey of strategic supply chain planning and robust design is given in Klibi, Martel, and Guitouni (2010). One distinction they make with respect to robust design is between model, algorithm, and solution robustness. A design is defined as “model robust” if this design is “almost” feasible when the input data varies (Aghezzaf, 2005; Leung & Wu, 2004; Mulvey, Vanderbei, & Zenios, 1995; Yu & Li, 2000). A design is called “algorithm robust” if the algorithm performance is not affected by the presence of noise in the data. Sorensen (2004) developed an approximation of the number of evaluations in local search algorithms that is needed to find a candidate solution and considered the increased number of evaluations required by the presence of noise in the data. A design is called solution robust if the solution values remain “close” to each other when the input data changes (Aghezzaf, 2005; Leung & Wu, 2004; Mulvey et al., 1995; Yu & Li, 2000). Solution robustness is the focus of this research. Solution configuration robustness requires that the same (robust) supply chain configuration is used in the different scenarios and measures the variability of the objective function value (profit) over the different scenarios.A second distinction in the robust design area is the modeling technique. One of the modeling techniques commonly used is stochastic programming. In stochastic programming models the uncertainty is assumed to be known and often modeled as a set of scenarios with known probabilities. The strategic supply chain design often uses a two-stage model, where the first stage decides the supply chain configuration and the second stage treats material flows and inventories as recourse variables after the uncertainty has been resolved. The objective is to maximize the expected value of the profit of all scenarios, i.e., the goal is to find an average or “median” type of solution. Ahmed and Sahinidis (2003) solve a stochastic capacity expansion problem with a given set of scenarios. Santoso, Ahmed, Goetschalckx, and Shapiro (2005) propose the use of a random sampling strategy, the sample average approximation scheme, to solve large-scale stochastic supply chain design problems. These approaches focus on the solution configuration and its expected efficiency and do not explicitly consider the robustness of the solution value, which may vary widely between the different scenarios.A second modeling technique used for robust design is the fuzzy or possibilistic linear programming approach. When some parameters cannot be estimated deterministically, fuzzy logic can be a tool to model the uncertainty. Kabak and Ülengin (2011) propose a possibilistic linear programming model to optimize the strategic planning decisions where the uncertainty of the demand forecasts, yield rates, cost and capacities are modeled as fuzzy parameters. Pishvaee and Torabi (2010) propose a multi-objective possibilistic programming model for the closed-loop supply chain network design under uncertainty. Two objectives, the minimization of the total cost and the total tardiness, are considered in their work. Pishvaee, Razmi, and Torabi (2012) consider social responsibility in the supply chain network design problem and propose a robust possibilistic programming to optimize the configuration of supply chain network with respect to both social and economic aspects.A third modeling technique used for robust design is the robust optimization approach. This approach assumes that the probabilities of the scenarios are not available and the objective is to either minimize the maximum cost or to maximize the minimum profit over all possible scenarios (Atamtürk & Zhang, 2007). If a particularly bad scenario is possible, even though it has a very low probability of occurrence, then this scenario may determine the supply chain configuration. The goal of this approach is to find a “center” type of solution.A fourth approach assumes that the probabilities of scenarios are known and considers the tradeoff between expected value, solution robustness, and other measures such as environmental factors (Amin & Zhang, 2013; Tang, Zhang, & Xu, 2013; Wang, Lai, & Shi, 2011), flow time or lost sale (Liu & Papageorgiou, 2013). The solution robustness is evaluated either based on its variance (Markowitz, 1991; Mulvey et al., 1995) or absolute deviation (Leung & Wu, 2004; Yu & Li, 2000). These models consider the portfolio selection in which the decision variables are continuous. Recently, different measurements of the solution robustness are proposed for the strategic supply chain design problems including the variance (Azaron, Brown, Tarim, & Modarres, 2008; Azaron, Furmans, & Modarres, 2008; Azaron et al., 2010; You, Wassick, & Grossmann, 2009), the financial risk (Azaron, Brown et al., 2008; Azaron, Furmans et al., 2008; Guillén, Mele, Bagajewics, Espuña, & Puigjaner, 2005; You et al., 2009), the variance index (You et al., 2009), and the downside risk (Azaron, Brown et al., 2008; Azaron, Furmans et al., 2008; Azaron et al., 2010; You et al., 2009). Several solution techniques, which improve the solution time of identifying a robust supply chain design for a given tradeoff weight between the efficiency and the solution robustness, are developed. However, identifying all Pareto-optimal configurations efficiently is still a challenging problem since there are an infinite number of possible tradeoff weights between the efficiency and the solution robustness.In the following we consider solution configuration robustness. In other words, the supply chain configuration has to be chosen before any scenario is realized and the solution robustness is defined as the variability of the solution value between the scenarios. Specifically, the objective is to find all Pareto-optimal configurations with respect to the expected value and standard deviation of the scenario profits. The use of the standard deviation of the scenario profits instead of the variance allows a more intuitive interpretation and comparison between configurations and a direct relationship between the coefficient of variation of the solution value and the objective function. The coefficient of variation is dimensionless which allows for the specification of a dimensionless allowable tolerance gap and also avoids dependencies on the currency units of the profit or cost.If all Pareto-optimal configurations can be identified, we can plot these configurations in a risk analysis graph with the expected value on the horizontal axis and the standard deviation on the vertical axis so decision makers can choose the configuration based on their preferences. Fig. 1shows a motivational example of a mean–standard deviation risk analysis graph for a tutorial supply chain network design problem. Three Pareto-optimal configurations exist in this example. Compared to other existing approaches, the stochastic programming approach will find the configuration with maximum expected profit value and maximum standard deviation, which is generated by the configuration (“010011”). If the decision maker is risk-seeking, this configuration will be selected. The robust optimization approach using the max–min profit objective will select the configuration with minimum standard deviation which is the configuration (“110110”). If the decision maker is extremely risk-averse then this configuration will be selected. Neither approach will identify the configuration (“011011”) even though it is also Pareto-optimal. In this research, we will develop an efficient methodology to identify all Pareto-optimal configurations and to compute the range of the coefficient of variation for which each of them is dominant. A particular configuration may be dominant for a large fraction of the range of the coefficient of variation, but it may be different from the configurations found by stochastic optimization and robust optimization. The final selection of the supply chain configuration to be implemented can then be based on the risk tradeoff of the decision maker and on other considerations not included in the model. But, no a priori specification of the tradeoff ratio or weight is required.We organize this paper as follows. In Section 2, we define the mathematical formulation of the robust strategic supply chain model. In Section 3, we prove the equivalency of the mean–standard deviation solution to the mean–variance solution for this problem. In Section 4, we derive an optimality cut and an upper bound to the problem to eliminate efficiently sections of the feasible region. In Section 5, we develop the complete optimization algorithm and in Section 6 we report the numerical experience for a metallurgical case. Finally, in Section 7, we identify several conclusions and directions for future research.In this section, we define the mathematical formulations for the robust design problem. In Section 2.1, we define the notations and decision variables. In Section 2.2, we give the formulation of the Mean–Standard Deviation Robust Design Problem (MSD-RDP).Sets and indicesSset of supplier facilitiesCset of customer facilitiesWset of warehouse facilitiesDCset of distribution centersFset of manufacturing factoriesTset of transformation facilities and T=W∪DC∪FNset of all facilities and N=S∪C∪TAset of channels and A={(i,j)|i,j∊N}SCset of scenariosKset of productsParameterscopensithe cost for establishing facility i, i.e., its initial investment cost under scenario spsthe probability of scenario s with∑sps=1κthe penalty of the standard deviationctranssijkthe unit transportation cost for product k from location i to location j under scenario scapslkthe capacity for product k of facility l under scenario sdemslkthe forecast demand for the product k of customer l under scenario ssupslkthe supplier capacity for product k of supplier l under scenario ssrsckthe unit sales revenue for product k sold to customer c under scenario sVariablesyibinary variable equal to 1 if facility i is established and equal to 0 otherwise.Yvector of facility status variableszsYthe recourse profit for configuration Y and scenario sexpYthe expected value of the profit of configuration Y over all scenariosstdYthe standard deviation of the profit of configuration Y over all scenariosxsijkthe flow variable for the product k from location i to location j under scenario sNote that model can easily be expanded to handle multiple periods and tactical inventory, which correspond to seasons in the planning horizon. Examples of supply chain planning models with multiple periods can be found in Goetschalckx (2011) and Stadtler, Fleischmann, Grunow, Meyr, and Surie (2011).The strategic robust supply chain problem considering standard deviation as the risk measurement is modeled as the Mean–Standard Deviation Robust Design Problem. Usually, the strategic model has as goal the determination of a robust supply chain configuration that makes the most desirable tradeoff between the long term efficiency and the variability performance of the configuration. In order to evaluate the future performance of the configuration, the tactical decisions for every scenario are also made during the design stage. We assume that the supply chain configuration remains unchanged for all the scenarios and that the tactical decisions, previously determined during the design stage, will be executed in the future after the uncertainty has been resolved. The desired tradeoff between the efficiency, modeled as the expected value of the profit, and the variability, modeled by the standard deviation of the profit, is encapsulated in the dispersion penalty factor κ.The Mean–Standard Deviation Robust Design Problem for a given κ (MSD-RDP(κ)) can then be written as follows:(1)MaxexpY-κ×stdY(2)s.t.expY=∑sps×zsY(3)stdY=∑sps×(expY-zsY)2(4)zsY=∑c∈C∑ksrsck∑(i,c)∈Axsick-∑(i,j)∈Actranssijk×xsijk-∑i∈Tcopensi×yi∀Y,∀s∈SC(5)∑(i,l)∈Axsilk-∑(l,j)∈Axsljk=0∀k∈K,∀l∈T,∀s∈SC(6)∑(i,l)∈Axsilk⩽capslk×yl∀k∈K,∀l∈T,∀s∈SC(7)∑(l,i)∈Axslik⩽supslk∀k∈K,∀l∈S,∀s∈SC(8)∑(i,l)∈Axsilk⩽demslk∀k∈K,∀l∈C,∀s∈SC(9)Y={y1,…,yi,…,yT}yi∈{0,1}∀i∈TThe objective function (1) consists of maximizing the total utility function which is a weighted sum of the expected value and the standard deviation, where the weight of the standard deviation is an input parameter. Constraint (2) defines the expected profit value of the configuration. Constraint (3) defines the standard deviation of the configuration in function of the scenario profits. Constraint (4) computes the profit of each scenario and configuration which is the total revenue minus the investment cost and the flow cost. Constraint (5) enforces the conservation of flow constraint that ensures that the input quantity for each product is equal to the output quantity in each transformation facility. Constraint (6) assures that material will not be transported to a transformation facility if this facility is closed and that the material quantity does not exceed the given capacity. Constraint (7) enforces that a supplier does not provide more of a product than its capacity for that product. Constraint (8) ensures that the quantity of the finished product delivered to the customer does not exceed the demand at this customer. Constraint (9) shows that a configuration is the combination of the decisions to establish the transformation facilities. Note that all domain-specific knowledge corresponds to the tactical decisions and the constraints (4)–(8).The MSD-RDP(κ) is a non-linear mixed-integer programming problem and solving the MSD-RDP for all possible κ is at best time-consuming for realistic problem instances. We will derive the necessary properties for solving this model efficiently in the next section.The equivalent problem to the MSD-RDP but with the mean–variance objective function is called the Mean–Variance Robust Design Problem (MV-RDP) withλas the dispersion penalty factor. We choose the mean–variance objective function, which has only square functions, to avoid the complications of the square root function. The square root function and the square function are both convex functions of the scenario profits (Rothschild & Stiglitz, 1970) so the properties of the convex optimization hold for both the MSD-RDP and the MV-RDP, i.e., a local maximum is also the global maximum (Boyd & Vandenberghe, 2004). We will establish the equivalence between the Pareto-optimal configurations for the mean–variance model and the mean–standard deviation model in Theorem 1.Theorem 1The Pareto-optimal configurations for the mean–standard deviation model are the Pareto-optimal configurations for the mean–variance model and vice versa.For any non-Pareto-optimal point (x,y2) in the mean–variance risk graph, there must exist at least one point (a,b2) dominating the point (x,y2) which has the following property:a⩾x,b2⩽y2and(a,b2)≠(x,y2).□By applying Theorem 1, the mean–variance model can be used as the intermediate model and its solution can be transformed into the solution of the mean–standard deviation model. We will solve the mean–variance models in the following section. The properties derived so far are applied to find the Pareto-optimal configuration for a single given value ofλ. We will derive the necessary properties to find all Pareto-optimal configurations in the next section.This section derives the properties used to efficiently identify all the Pareto-optimal configurations for the MV-RDP. There are an infinite number of possibleλvalues for the MV-RDP(λ). Finding all the Pareto-optimal configurations by solving an infinite number of MV-RDP(λ) with the differentλvalues is not computationally feasible. We derive two properties, namely the optimality cut property and upper bound property, in this section. In Section 4.1, we develop the optimality cut property which eliminates a part of the infeasible region. The upper bound property computes the upper bound for any point of the efficiency curve and is developed in Section 4.2.We use the optimality cut property to eliminate part of the infeasible region. Consider a risk analysis graph with the expected value on the x-axis and the variance on the y-axis and denote the solution of the MV-RDP(λ) withλvalue as the point with coordinates(expλ,varλ)which is the pair of the expected value and the variance values, respectively.Optimality cut property. For a givenλin the MV-RDP(λ), there is no feasible configuration in the regionr:{r=(x,y):λ×(y-varλ)<x-expλ}ProofIf there exists a solution (u,v) in r, i.e.,λ×(v-varλ)<u-expλ, it will contradict the optimality of the(expλ,varλ)solution since after rearrangement of the termsexpλ-λvarλ<u-λvholds.□By applying this property for different values ofλ, we can eliminate multiple sections of the infeasible region. Each of the cuts is represented by a line in the mean–variance risk analysis graph.We will develop an upper bound for all Pareto-optimal configurations. By the definition of the Pareto-optimality, the Pareto-optimal configuration must be also the minimum variance solution for a given expected value. Then, for a given configuration Y and expected value x, its minimum variance solution must be equal to or larger than the Pareto-optimal configuration. Denote fY(x) as the function mapping from the expected value to the minimum variance value for a given configuration Y. The upper bound property is defined as follows:Upper bound property. Assume the minimum variance function of the configuration Y is known and given by (x,fY(x)). Any solution (u,v) where u⩽x,v⩾fY(x),(u,v)≠(x,fY(x)), cannot be a Pareto-optimal solution to the MV-RDP.ProofStraightforward from the definition.□The upper bound property assumes that the minimum variance function of a configuration is known. We derive this function based on the following properties. For a given configuration Y and scenario s, denote the maximum profit of configuration Y under scenario s aszsY∗and the probability of scenario s as ps. Assume without loss of generality that all zsYandzsY∗are positive. If any of them is not positive, the zsYandzsY∗can be defined as the positive profit differential to an arbitrary negative profit (loss) value. After all calculations have been performed, the origin of the risk graph can then be shifted back to the point (0,0). ThezsY∗can be solved for in polynomial computation time because the tactical sub-model is a network flow model. We renumber the scenarios so that thezsY∗have increasing values, i.e.,z1Y∗⩽z2Y∗⩽⋯⩽zsY∗. The minimum variance function fY(x) can then be derived as follows:Efficiency curve property. For any given expected value x in the range0⩽x⩽∑s=1|SC|pszsY∗, there exists an integer h such thatif0⩽x<z1Y∗=∑s=1h+1pszsY∗+1-∑s=1h+1psz(h+1)Y∗withh=0,otherwiseif∑s=1hpszsY∗+1-∑s=1hpszhY∗⩽x<∑s=1h+1pszsY∗+1-∑s=1h+1psz(h+1)Y∗then1⩽h⩽|SC|-1.Furthermore, the minimum variance for a given configuration Y and a given expected value x is given by:ifh=0thenfY(x)=0if1⩽h⩽|SC|-1thenfY(x)=∑s=1hps1-∑s=1hpsx2+-2∑s=1hpszsY∗1-∑s=1hpsx+∑s=1hpszsY∗2+∑s=1hpszsY∗21-∑s=1hps.ProofSee Appendix A.□The efficiency curve property implies that the tactical model for a given configuration Y will never perform better than any region below than the curve. Furthermore, the minimum variance function fY(x) is a piecewise quadratic function which is also denoted as the efficiency curve of the configuration Y. Based on this property, the number of the break points of the curve is determined as follows.Break point count property. The number of break points for the efficiency curve of one configuration must be less than the number of scenarios.ProofThe efficiency curve property implies that different h values determine different quadratic functions and intervals. Since h is a nonnegative integer which is less than or equal to the number of the scenarios, the number of break points in the efficiency curve of one configuration will be less than the number of scenarios.□Fig. 2shows the efficiency curve of the configuration with the maximum expected profit, which would be found by the stochastic programming, for an example case. The MV-RDP is solved withλ=0and the maximum profits of each scenario are used to derive its efficiency curve, which is then plotted in the mean–standard deviation risk analysis graph. There are three scenarios in this example so there are at most three intervals and two break points in the curve. The breakpoints are located at 8.20 million and 8.92 million on the expected value axis. This curve is an upper bound for all Pareto-optimal configurations, i.e., There is no Pareto-optimal configuration in the arear:{r=(u,v):u⩽x,v⩾fY(x),(u,v)≠(x,fY(x)}.The properties derived in the previous section for the MV-RDP(λ) assume a given value of the dispersion penalty factorλ. However, the robust design problem requires the identification of all the Pareto-optimal configurations and the determination of the values ofλfor which each configuration is dominant. We will extend the branch-and-reduce algorithm by Ryoo and Sahinidis (1996) to solve the robust design problem efficiently. In Section 5.1, we introduce the branch-and-reduce algorithm. In Section 5.2, we describe the extensions to the standard branch-and-reduce algorithm for the robust supply chain design problem. Finally, we show the Pseudo code of the complete algorithm in Section 5.3.The branch-and-reduce algorithm by Ryoo and Sahinidis (1996) and Sahinidis (2003) solves an optimization problem by dividing it into multiple sub-problems, each defined over a different feasible interval, and then solving the sub-problems independently. The intervals are non-overlapping and span the complete feasible region. The active set consists of the intervals of the sub-problems that still need to be solved. The selection rule chooses which sub-problem is taken from the active set in order to be solved. If the selected sub-problem can be solved within a prescribed accuracy, then it is removed from the active set, otherwise its interval is split by the branching rule into multiple new sub intervals and the corresponding problems are added to the active set. The branch-and-reduce algorithm is a variation of the branch-and-bound algorithm with the addition of the management of the feasible sub intervals. Further details can be found in Ryoo and Sahinidis (1996).We extend and specialize the standard branch-and-reduce algorithm for the solution of the robust supply chain design problem based on the optimality cut property, the upper bound property, the efficiency curve property, and the break point count property that have been derived above.The extended branch-and-reduce algorithm has the following advantages. First, if the algorithm is stopped prematurely it will still have found one or more Pareto-optimal solutions. Since solving the MV-RDP may be time-consuming, this advantage becomes more important for large-scale real-world problem instances. Second, the user can specify the selection rules to focus first on the supply chain configurations with higher expected value configurations, i.e., the selection rule can select first intervals with the smallest value ofλ.We will give the one review of the algorithm in Section 5.2.1. We specify the branching rules in Section 5.2.1, and the bounding rules in Section 5.2.2.We divide the MV-RDP into the multiple intervals based on the expected value of the scenario profits. In the initial step, the interval [0, maximum expected value] is the only element in the active set. In each step, we select one interval in the active sub-problem set, determine the corresponding value ofλfor the upper bound of the interval and solve the MV-RDP(λ). If no new Pareto-optimal configuration in this selected interval is found, then this interval is removed. This is denoted as the bounding process. If we find a new Pareto-optimal configuration in this interval, then we apply the branching rules to derive the intervals for the new configuration which are then stored in the active set of sub-problems.The equations of the segments of the quadratic efficiency curve for this configuration can be derived by the curve property using the maximum profits of each scenario. These intervals are stored in the active set.When the algorithm creates the intervals of the new configuration, the active set may contain overlapping intervals generated by other configurations, e.g., the active set may contain the interval [0,100] corresponding to the configuration 1 and the interval of the new configuration 2 is [10,50]. In this case, the intersection and the relative position of the two quadratic efficiency curves have to be computed for the intersection of their intervals, i.e. [10,50]. Since both curves are quadratic functions, there are at most two intersection points. Three possible cases may exist. (1) One configuration dominates the other configuration in the intersection interval, i.e., one configuration has a less than or equal variance in this interval. The dominated configuration for the intersection interval is removed from the active set. (2) If there is a single intersection point between the two efficiency curves of these two configurations, the two new non-overlapping intervals will be added. Denote the overlap interval as [xstart,xend] and the intersection point as xins. Two intervals ([xstart,xins] and [xins,xend]) with their corresponding dominating configurations are stored in the active set. (3) If two intersection points exists, the three corresponding sub intervals of the intersection interval are derived and stored to the active set with the corresponding dominating configuration.The optimal solution of the MV-RDP(λ) is equivalent to a linear optimality cut in the mean–variance graph that guarantees that no better solution, i.e. supply chain configuration, exists below the optimality cut. The bounding rules remove a selected interval from the active set by sequentially determining new values forλand checking that there is no new optimal configuration in this interval. The Pareto-efficiency curve for that optimal configuration is a piecewise quadratic curve. No optimal solution to the MV-RDP can be located above this curve. These two curves are shown in Fig. 3. In general, there will be a gap between these two curves. The algorithm will limit this gap by using a limit on the difference between the coefficients of variation (CV) for the corresponding points on the two curves with the same expected value. The use of the CV allows for a dimensionless definition of the gap.Since solving the MV-RDP(λ) is computationally expensive, the number of different values of theλparameter that are investigated should be minimized. For a given interval, the determination of the sequence of values of theλparameter that are investigated will be shown next. Denote the current selected interval as [x1,x3] and the maximum allowable gap for the coefficient of variation (CV) as ɛ. First, we consider the case of CV(x1)⩾ɛ. The coordinates in the mean–variance graph of the points on the efficiency curve and the optimality cut for a given value of the expected value x1 arex1,ax12+bx1+candx1,y12, respectively. Fig. 3 shows an example of the curve and cut. Assume further that a new optimal solution in the interval exists and that it has the unknown coordinatesx2,ax22+bx2+cand an unknown value ofλ. The following calculations determine the maximum value for x2 so that the CV gap at x1 is less than or equal to ɛ.For the two points on the (linear) optimality cutx2-λax22+bx2+c=x1-λy12holds, hence y1 can be computed withy1=(x1-x2)λ+ax22+bx2+c. The limit on the difference in the ΔCV at x1 is then given byax12+bx1+cx1-y1x1=ax12+bx1+c-(x1-x2)λ+ax22+bx2+cx1⩽εAt the optimal solution point the optimality cut has the same gradient as the efficiency curve, hence1λ=2ax2+borλ=12ax2+b. Thusax12+bx1+c-(2ax2+b)(x1-x2)+(ax22+bx2+c)x1⩽εax22-2ax1x2+ax12+ε2x12-2εx1ax12+bx1+c⩽0This is a quadratic expression in function of the single unknown x2. It has at most two roots. At most one of the roots is larger than x1 and falls within the interval [x1,x3] that is currently being examined.(10)x2=x1+2εx1ax12+bx1+c-ε2x12aUsing again the equality for the slope at the optimal point,λ=12ax2+b, the newλis given by the following expression.(11)λ=12ax1+2a2εx1ax12+bx1+c-ε2x12+bThe computation ofλassures that the gap will be smaller than ɛ in the interval [x1,x2]. If a new configuration is found by solving the MV-RDP(λ) then new intervals are added according to the branching rules. If no new configuration is found thenλand x2 are computed iteratively by assigning x1 the previously computed value of x2 until the new value of x2⩾x3.The formula (10) is valid when CV(x1)⩾ɛ. However, if CV(x1)<ɛ, x2 may be infeasible or equal to x1. In this case, x2 can be derived by solving the equation, CV(x2)=ɛ, i.e.,(12)ax22+bx2+cx2=ε,which assures that the gap will not be greater than ɛ between x1 and x2.Non-decreasing CV function property. CV(x) is a non-decreasing function for x⩾0.iProofSee Appendix B.□The CV function can be interpreted as a relative risk curve for a single configuration, i.e. the risk divided by the expected value x. The expected value x is also denoted as the reward of the configuration. Since CV(x) is a non-decreasing function of x, this implies that achieving a higher reward also means an equal or higher relative risk and that the risk grows as least as fast as the reward, e.g. doubling the reward will at least double the risk.Finite number of Optimality Cuts Property. For any positive value of ɛ, the number of MV-RDP(λ) which has to be solved in order completely eliminate the current interval [x1,x3] from the active set of intervals is finite.ProofSee Appendix C.□We denote the set of the active sub-problems as I, and the set of the Pareto-optimal configurations as R. Let the optimal solution configuration for a particular value ofλobtained by solving MV-RDP(λ) be denoted asY(λ). The proposed branch-and-reduce algorithm is described as follows:Initial step:1.I=∅;2.Solve MV-RDP (λ=0), the maximum expected value problem;3.Identify S sub-intervals by using the efficiency curve property and store them in I;While I≠∅1.{2.Remove an interval [xs,xt] with configuration Yintervalfrom I;3.Findλusing (11) and x2 using (10);4.new_configuration=false;5.while(x2<xt)6.{7.SolveY(λ)←MV-RDP(λ);8.if(Y(λ)=Yinterval)9.{10.if (CV(x2)⩾ɛ)11.Updateλusing (11) and x2 using (10);12.else13.Updateλand x2 using (12);14.}15.else16.{17.new_configuration=true;18.Identify S sub-intervals by using the Curve property and store them in I;19.Update the intersection intervals;20.Store the intervals ofY(λ)in I;21.break;22.}23.}24.if (new_configuration=false)25.R=R∪Yinterval;26.}We solve a metallurgical case using the proposed algorithm. The metallurgical case is based on the supply chain design project of a company which is a leading supplier of specialty additives to be used in the production of steel in foundries that are located all over the world. Further information on this company can be found in Ulstein, Christiansen, Grønhaug, Magnussen, and Solomon (2006). However, it should be noted that the data used in this case is different of the data described in Ulstein et al. (2006). The supply chain consists of two echelons including suppliers, factories, warehouses and customers. Nine possible locations for additional facilities were identified. The supply chain topology with all possible factories and transportation channels shown is presented in Fig. 4. Google map™ is used as the presentation tool.The original data set contained only deterministic data, i.e., only the expected values of the parameters were known. To create the stochastic instance of the problem, we use two cases with different probability distributions and parameters. In each case, we generated 30–300 independent scenarios. The results of two cases are shown in Sections 6.1 and 6.2, respectively.The branch-and-reduce algorithm was implemented in C# and uses CPLEX 12.5 as a callable library for solving the mix-integer and quadratic programming MV-RDP sub-problems. The algorithm was executed on a computer with an Intel® Core™ i5 CPU 1.70gigahertz PC processor and was running under Windows 7.The results of the first data set are shown in Table 1. We generated 30, 60, 90, 120, 150, 180, and 300 individual scenarios using the same log-normal distributions. The gap is set as 0.1%. We collected the computation time, the number of the Pareto-optimal configurations, the total number of the intervals, the maximum expected value, and the maximum standard deviation. Increasing the number of scenarios will require more computation time. For 90 or more scenarios, the values of the expected value and the standard deviation no longer change in function of the number of scenarios.We also analyze the impact of the gap values. The result is shown in Table 2. We use 90 scenarios and collected the computation time, the total number of intervals, the maximum cardinality of the active set, the number of the solved sub-problems, i.e., the number of MV-RDP with differentλthat has been solved, and the number of the Pareto-optimal configurations found. Changing the value of the maximum allowable gap has a significant impact on the algorithm execution time since it increases the number of the sub-problems to be solved. The sub-problems are MIQO (mixed-integer quadratic objective) problems and a typical sub-problem for this case contains 26,000 rows, 37,000 columns and 65,000 non-zero variables.The efficiency curves of the Pareto-optimal configurations are shown in Figs. 5 and 6for a gap equal to 0.1%. There are only two Pareto-optimal configurations. Fig. 5 shows the efficiency curves of these two configurations and Fig. 6 shows the dominant Pareto-optimal efficiency curve. If the company were to prefer a higher expected profit then the configuration that opens two factories (encoded as “000010010”) provides the higher expected value. Otherwise, the configuration that opens one factory (encoded as “000010000”) has a smaller standard deviation. At the crossover point between dominant configurations, a 4.7% reduction in expected profit (57.25 versus 54.58 million) yields a 92.2% reduction in standard deviation of the profit (1.66 versus 0.13million) compared to operating the supply chain to achieve the maximum expected profit value.In the second dataset, we generate the customer demand using the log-normal distribution but its expected value is uniformly distributed. The running time of the proposed algorithm for the 1% allowable optimality tolerance is 117seconds and it increases to 4910seconds for the 0.01% allowable optimality tolerance. The result of the data set is shown in Fig. 7. Three Pareto-optimal configurations (encoded as “000010010”, “000010000”, and “010010011”) are identified. The configuration (“010010011”) may be selected by a risk-seeking decision maker and the configuration (“000010010”) may be chosen by an extremely risk-averse decision maker. The other configuration (“000010000”) is dominant for a large fraction of the range of the coefficient of variation.The result in Fig. 7 also shows that simple intuition-based capacity expansion rules are not always valid. Intuitively, expanding the capacity in a supply chain for a given demand distribution will tend to reduce the profit of the company due to the additional investment cost. But the expanded configuration will tend to reduce the volatility of the profit and the impact of uncertainty and thus the risk of the supply chain since additional capacity is available to respond to changes in the environment. As shown in Fig 7, the configuration with only the fifth facility established, the configuration (“000010000”), dominates the middle section of the curve and the coefficient of variation. The intuition proves valid if the configuration is expanded to include the eighth facility, which is configuration (“000010010”). The expansion decreases both the expected profit and the expected risk. On the other hand, if the configuration is expanded by adding three more facilities to facility five, configuration (“010010011”), the expected profit and the expected risk are both increased. In this case, the decrease in transportation costs offsets the increase in capital investment cost and the expected profit increases. This further illustrates the importance of using a modeling based approach to determine the configuration with the best efficiency to risk tradeoff, since no simple business rule or heuristic can capture the tradeoffs of all the various cost components. On the other hand, the identification of all Pareto-optimal configurations allows the decision maker to incorporate other considerations that are not included in the model. Plotting the Pareto-optimal configurations in the risk graph may also show that only a very small number of dominant configurations exist and that one configuration is dominant over a wide range of risk preferences. More information on the case can be found in Goetschalckx, Huang, and Mital (2013).

@&#CONCLUSIONS@&#
In this research, we define the robust supply chain design as the set of all Pareto-optimal configurations considering the tradeoff between the standard deviation and the expected value of the profits of all future scenarios. The current modeling techniques such as stochastic programming or robust optimization only consider one of the two performance components but not all of the possible tradeoff weights. As a consequence, the solutions of these approaches are the extreme solutions, namely the configuration with the highest expected value or with the lowest standard deviation, respectively. They are also the configurations with the higher standard deviation and lower expected value, respectively. Consequently, the most profitably configuration (by its expected value) is also the most risky (by its standard deviation). In several cases studied in Santoso et al. (2005), the dominant configurations were located on an L-shaped (hockey stick) dominant efficiency curve, where a few percent reductions in expected value yielded a twenty to thirty percent reduction in the standard deviation. Although several optimization techniques for multi-objective supply chain design are proposed for a known and given tradeoff weight, an efficient approach to identify all Pareto-optimal configurations is still lacking. Instead of considering only two extreme solutions or given a certain tradeoff weight, our definition finds all Pareto-optimal configurations and one of Pareto-optimal configurations different from the extreme configurations may be preferred. However, no a priori value of the (tradeoff) dispersion penalty factor is required.Identifying all Pareto-optimal configurations may be time-consuming. We extend the branch and reduce algorithm for the MV-RDP. The algorithm is a primal algorithm which will provide a primal feasible solution if it is stopped prematurely. The algorithm also identifies the ranges of the dispersion penalty for which a supply chain configuration is dominant.One direction for future research is the extension of the MSD-RDP to the two-stage strategic supply chain planning process. The MSD-RDP is an integrated model that includes the tactical model in order to provide the profits for the various scenarios. In the strategic design process the configuration of the supply chain is determined in the first phase by upper management and the profit values are determined by middle management after the uncertainty has been resolved. This is fundamentally a two stage planning process in which the alignment of the strategic and tactical objectives has to be modeled. A second direction for future research is the improvement of the solution algorithm for the MV-RDP, which is a quadratic-objective mixed integer programming formulation. Especially for real world supply chain design problems with a large number of scenarios the MV-RDP formulation becomes very large. The use of accelerated primal decomposition methods such as Benders decomposition may provide a promising or even the only method for solving these problem instances. A third possible direction for research is the investigation and documentation of the shape of the dominant curve since it may yield business insights on what factors cause a sharp L-shape of the dominant efficiency curve. A fourth possible direction for future research is to consider coherent measures as solution robustness measures.Finally, it should be observed that the above methodology is applicable to the robust design of any system provided the system has a finite number of discrete configurations and continuous and concave recourse tactical models.We will prove the efficiency curve property in three steps. First, we show that for a given expected value and configuration, the solution zsYfor the minimum variance objective and a scenario must be equal to either its maximal valuezsY∗or a constant value. Second, we prove the property that for any pair of scenarios (i,j), ifziY∗⩽zjY∗, then ziY⩽zjY. Finally, we apply these properties to derive the expression for the efficiency curve.The model with the minimum variance objective for a given expected value x and configuration Y can be stated as follows.(13)Min∑sps·zsY2s.t.∑sps·zsY=x(14)zsY⩽zsY∗∀szsY⩾0∀sIn association with the multiplier vYfor constraint (13) and usfor constraint (14), the Karush–Kuhn–Tucker (K–K–T) optimality conditions are written as follows.(15)2ps·zsY+us+vYps=0∀szsY⩽zsY∗∀s∑sps·zsY=xus⩾0∀s(16)us(zsY-zsY∗)=0∀sTo solve the problem, we define two sets, U and V. Denote U as a set of scenarios for which multiplier usis nonzero, and V as the set of the scenarios for which zsYis equal tozsY∗. By constraint (16), U∪V=SC.Since usis zero for any scenario in V, zsYcan be derived by constraint (15) as follows.2ps·zsY+vYps=0∀s∈V(17)zsY=-vY2∀s∈VThe multiplier vYcan be derived from constraint (13).∑s∈Ups·zsY+∑s∈Vps·zsY=xvY=2∑s∈Ups·zsY∗-x∑s∈VpsOrdering property. If i∊U andzjY∗⩽ziY∗, then j∊U.ProofSince i∊U,us=2ps-vY2-ziY∗>0-vY2>ziY∗⩾zjY∗⩾zjY.If j∊V, this contradicts constraint (17). As a result, j∊U.□Based on the ordering property and constraint (17), we can derive(18)zsY=minzsY∗,-vY2.In the following section, we order all scenarios based on their maximal profit,zsY∗so we can apply the ordering property.Efficiency curve property. For any given expected value x in the range0⩽x⩽∑s=1|SC|pszsY∗, there exists an integer h such thatif0⩽x<z1Y∗=∑s=1h+1pszsY∗+1-∑s=1h+1psz(h+1)Y∗withh=0,otherwiseif∑s=1hpszsY∗+1-∑s=1hpszhY∗⩽x<∑s=1h+1pszsY∗+1-∑s=1h+1psz(h+1)Y∗then1⩽h⩽|SC|-1.Furthermore, the minimum variance for a given configuration Y and a given expected value x is given by:ifh=0thenfY(x)=0if1⩽h⩽|SC|-1thenfY(x)=∑s=1hps1-∑s=1hpsx2+-2∑s=1hpszsY∗1-∑s=1hpsx+∑s=1hpszsY∗2+(∑s=1hpszsY∗)21-∑s=1hpsProofDefine the sequence g(Y) withgh(Y)=0h=0gh(Y)=∑s=1hpszsY∗+1-∑s=1hpszhY∗for1⩽h⩽|SC|-1gSC(Y)=∑s=1|SC|pszsY∗+1-∑s=1|SC|psz(SC)Y∗=∑s=1|SC|pszsY∗The sequence g(Y) is monotonically non-decreasing and spans all possible values of x, hence an integer value of 0⩽h⩽|SC|−1 always exists. The value of h is determined by the expected value x and two cases exists.□If0⩽x<z1Y∗=∑s=1h+1pszsY∗+(1-∑s=1h+1ps)z(h+1)Y∗with h=0.x=∑sps·minzsY∗,-vY2=∑sps·-vY2=-vY2. For all s,zsY=minzsY∗,-vY2=-vY2hence fy(x)=0.Otherwise if∑s=1hpszsY∗+1-∑s=1hpszhY∗⩽x<∑s=1h+1pszsY∗+1-∑s=1h+1psz(h+1)Y∗then 1⩽h⩽|SC|-1. For anyzhY∗⩽-vY2<z(h+1)Y∗x=∑sps·min{zsY∗,vY}=∑s=1hpszsY∗+∑s=h+1|SC|ps·-vY2andvY=2∑s=1hpszsY∗-x1-∑s=1hps.The minimum variance corresponds to the solutionzsY=minzsY∗,-vY2and is computed as follows.fY(x)=∑s=1|SC|pszsY-∑jpjzjY2=∑s=1hpszsY-∑jpjzjY2+∑s=h+1|SC|pszsY-∑jpjzjY2=x2∑s=1hps1-∑s=1hps-2x∑s=1hpszsY∗1-∑s=1hps+∑s=1hpszsy∗2+∑s=1hpszsY∗21-∑s=1hpsNon-decreasing CV function property. CV(x) is a non-decreasing function for x⩾0.ProofBy the efficiency curve property,CV(x)=fY(x)x=ax2+bx+cx, we can derive the following properties:(19)a=∑s=1hps1-∑s=1hps⩾0soa⩾0.□By the efficiency curve property, we can get as follows:(21)x⩾∑s=1hpszsY∗+1-∑s=1hpszhY∗⩾∑i=1hpi∑s=1hpszsY∗+1-∑i=1hpi∑s=1hpszsY∗∑i=1hpi=-b2aSince CV(x)⩾0, the square root in the numerator of its expression must have two real roots and its discriminant must be non-negative(22)b2-4ac⩾0.(23)dCV(x)dx=dax2+bx+cxdx=-bx-2c2x2ax2+bx+cBy applying (20) and (21),-bx-2c2x2ax2+bx+c⩾b22a-2c2x2ax2+bx+cBy applying properties (19) and (22),b2-4ac4ax2ax2+bx+c⩾0.SincedCV(x)dx⩾0, CV(x) is a non-decreasing function.Non-decreasing next step size property. The difference between x2 and x1 is a non-decreasing function when x1 increases.ProofSince(24)CV(x1)⩾ε,ax12+bx1+cx1⩾ε.By the non-decreasing CV function property,(25)2ax1+b⩾0.□By applying (24) and (25),(26)d(x2-x1)dx1⩾εx1(2ax1+b)ax12+bx1+c2a2εx1ax12+bx1+c-ε2x12⩾0Finite number of optimality cuts Property: For any positive value of ɛ, the number of MV-RDP(λ) which has to be solved in order completely eliminate the current interval [x1,x3] from the active set of intervals is finite.ProofThere are two possible cases depending on if CV(x1)⩾ɛ or not. If CV(x1)⩾ɛ, then x2 is derived by using (10). Since the difference between x2 and x1 is a non-decreasing function (see the non-decreasing next step size property) and CV(x2)⩾ɛ must hold, the number of sub problems MV-RDP(λ) that has to be solved must be equal to or less than(27)a(x3-x1)2εx1ax12+bx1+c-ε2x12.□If CV(x1)<ɛ, x2 is derived by solving (12). By the non-decreasing CV function property, x2 must be greater than x1. Since CV(x2)⩾ɛ, we can apply (27) by replacing the lower bound of the interval with x2. The number of sub problems MV-RDP(λ) that has to be solved must be equal to or less than⌈a(x3-x2)2εx2ax22+bx2+c-ε2x22⌉+1.