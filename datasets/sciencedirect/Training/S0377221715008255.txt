@&#MAIN-TITLE@&#
An iterated multi-stage selection hyper-heuristic

@&#HIGHLIGHTS@&#
We introduce a new general “multi-stage” hyper-heuristic framework.The framework enables the use of multiple hyper-heuristics at different stages.We propose a multi-stage hyper-heuristic based on the designed framework.The approach outperformed the state-of-the-art approach from CHeSC2011.The overall performance outperformed performance of each constituent hyper-heuristic.

@&#KEYPHRASES@&#
Heuristics,Combinatorial optimisation,Hyper-heuristic,Meta-heuristic,Hybrid approach,

@&#ABSTRACT@&#
There is a growing interest towards the design of reusable general purpose search methods that are applicable to different problems instead of tailored solutions to a single particular problem. Hyper-heuristics have emerged as such high level methods that explore the space formed by a set of heuristics (move operators) or heuristic components for solving computationally hard problems. A selection hyper-heuristic mixes and controls a predefined set of low level heuristics with the goal of improving an initially generated solution by choosing and applying an appropriate heuristic to a solution in hand and deciding whether to accept or reject the new solution at each step under an iterative framework. Designing an adaptive control mechanism for the heuristic selection and combining it with a suitable acceptance method is a major challenge, because both components can influence the overall performance of a selection hyper-heuristic. In this study, we describe a novel iterated multi-stage hyper-heuristic approach which cycles through two interacting hyper-heuristics and operates based on the principle that not all low level heuristics for a problem domain would be useful at any point of the search process. The empirical results on a hyper-heuristic benchmark indicate the success of the proposed selection hyper-heuristic across six problem domains beating the state-of-the-art approach.

@&#INTRODUCTION@&#
Most of the current decision support systems tend to use expert knowledge at their core, and are often custom tailored to a specific application domain. As a result, they cannot be reused for solving a problem from another domain. On the other hand, there has been some significant scientific progress in developing automated general purpose systems that can learn, adapt and improve their behaviour on the fly while solving a given problem. Hyper-heuristics are such methodologies which perform search over the space formed by a set of low level heuristics (move operators) which operate on solutions (Burke et al., 2013). An aim in hyper-heuristic research is to increase the level of generality of solution methodologies by selecting and/or generating heuristics automatically during the search process (Burke et al., 2010b). One of the key features of a hyper-heuristic is that there is a logical separation between the problem domain and the high level hyper-heuristic methodology that operates at the top level. This study focuses on selection hyper-heuristics which combine heuristic selection and move acceptance methods as their components under a single point iterative search framework which processes a single complete solution at each step (Burke et al., 2003; Burke, Kendall, Misir, & Özcan, 2012; Özcan, Bilgin, & Korkmaz, 2008). A selection hyper-heuristic chooses a heuristic from a predefined set of low level heuristics and applies it to a candidate solution. The new solution is then considered and a decision is made whether it will be accepted or not. If accepted, the new solution replaces the current solution and the search continues iteratively. There is a growing number of hyper-heuristics (Burke et al., 2013; Chakhlevitch & Cowling, 2008) and they have been successfully applied to different hard computational problems, including examination timetabling (Pillay & Banzhaf, 2009; Rahman et al., 2014), course timetabling (Burke, McCollum, Meisels, Petrovic, & Qu, 2007; Soria-Alcaraz et al., 2014), response time variability (García-Villoria, Salhi, Corominas, & Pastor, 2011) and water distribution problems (Kheiri, Keedwell, Gibson, & Savic, 2015).It has been observed that a selection hyper-heuristic performs differently at different stages of the search process (Asta, Karapetyan, Kheiri, Özcan, & Parkes, 2013a; Kheiri, Özcan, & Parkes, in press). Moreover, there is a strong empirical evidence indicating that the choice of heuristic selection and move acceptance combination influences the overall performance of a hyper-heuristic (Bilgin, Özcan, & Korkmaz, 2007; Özcan et al., 2008). Lehre and Özcan (2013) conducted a theoretical study using a selection hyper-heuristic on a benchmark function showing that an improved run-time complexity can be obtained by mixing simple move acceptance criteria rather than using each move acceptance method on its own. In that study, random choice is used as a heuristic selection and the algorithmic framework could be viewed as a multi-stage framework in which two hyper-heuristics with different move acceptance is employed. This situation points out the potential of a modified single point-based search framework for selection hyper-heuristics enabling multi-stage operation of multiple hyper-heuristics. The design of multi-stage selection hyper-heuristics then would require another hyper-heuristic level for managing those multiple hyper-heuristics. One of the frameworks proposed in (Özcan, Bilgin, & Korkmaz, 2006) that handles mutational and hill climbing heuristics separately by invoking a mutational heuristic first followed by a hill climber, actually performs a multi-stage search. The higher level in this framework employs two prefixed hyper-heuristics in which each hyper-heuristic controls diversification (exploration of the search space) managing mutational heuristics and intensification (exploitation the accumulated search experience) managing hill climbing heuristics only. In another study, Özcan and Burke (2009) conceptualised a multilevel search framework for selection hyper-heuristics with three levels. The proposed method combines multiple hyper-heuristics, each performing search over a set of low level heuristics. Considering the recursive nature of the hyper-heuristic definition of ‘heuristics to choose heuristics’ by Cowling, Kendall, and Soubeiga (2001), multiple hyper-heuristics managing low level hyper-heuristics is also possible requiring another level and so on, causing a hierarchical growth in the hyper-heuristic levels like a tree. The usefulness of such a structure is still under debate. An initial attempt to flatten the hierarchical growth in the hyper-heuristic levels was made by Özcan, Misir, and Kheiri (2013), assuming a particular situation in which there are multiple move acceptance methods for use. Instead of employing each move acceptance method individually or utilising them all in a multi-stage manner, the authors proposed an approach merging all move acceptance methods into a single method via a group decision making strategy.To the best of our knowledge, the effectiveness of a general multilevel search framework which combines multiple selection hyper-heuristics based on the ideas in Özcan and Burke (2009) has not been investigated further. This work describes an iterated multilevel search framework which allows the use of multiple interacting hyper-heuristics cyclically during the search process. Given that one of the selection hyper-heuristics would be employed at each stage during the search process, we will refer to the overall approach as multi-stage (selection) hyper-heuristic. The additional level on top of the multiple selection hyper-heuristics will be referred to as multi-stage level. The proposed multi-stage hyper-heuristic framework is general, reusable and useful in relieving the difficulty of choosing a hyper-heuristic method for solving a problem, by automating the process of selecting a hyper-heuristic at different point of the search process.There are already some software tools supporting the rapid development of (meta-)hyper-heuristics, such as HyFlex (Hyper-heuristics Flexible framework) (Ochoa et al., 2012a) and Hyperion (Swan, Özcan, & Kendall, 2011). The Java implementation of the HyFlex interface was used in a cross-domain heuristic search challenge, referred to as CHeSC 2011. The results form this competition and six HyFlex problem domain implementations became a benchmark in selection hyper-heuristic studies (see Section 4 for more details). The winning state-of-the-art approach of CHeSC 2011 is an elaborate but complicated algorithm which makes use of machine learning techniques (Misir, Verbeeck, De Causmaecker, & Vanden Berghe, 2011). In this study, a novel iterated multi-stage selection hyper-heuristic based on the proposed framework is designed, implemented and analysed. The empirical results using the CHeSC 2011 benchmark across six problem domains indicate the success of our hyper-heuristic beating the state-of-the-art approach.The sections are organised as follows. Section 2 covers some selection hyper-heuristics relevant to this study and introduces the concept of multi-stage selection hyper-heuristics summarising some recent studies. Section 3 describes the components of the proposed multi-stage selection hyper-heuristic framework. An overview of HyFlex and CHeSC 2011 is provided in Section 4. Section 5 presents the empirical results. Finally, Section 6 concludes the study.

@&#CONCLUSIONS@&#
