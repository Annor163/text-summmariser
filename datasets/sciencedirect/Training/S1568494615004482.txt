@&#MAIN-TITLE@&#
Adaptive firefly algorithm with chaos for mechanical design optimization problems

@&#HIGHLIGHTS@&#
Proposing an extension of firefly algorithm.Employment of picewise chaos, for an further enhanced diversity.Making use of a simple but effective constraint handling method.Making use of an improved local search procedure.

@&#KEYPHRASES@&#
Firefly algorithm,Chaotic maps,Design optimization,Non-linear programming,

@&#ABSTRACT@&#
Firefly algorithm (FA) is a newer member of bio-inspired meta-heuristics, which was originally proposed to find solutions to continuous optimization problems. Popularity of FA has increased recently due to its effectiveness in handling various optimization problems. To enhance the performance of the FA even further, an adaptive FA is proposed in this paper to solve mechanical design optimization problems, and the adaptivity is focused on the search mechanism and adaptive parameter settings. Moreover, chaotic maps are also embedded into AFA for performance improvement. It is shown through experimental tests that some of the best known results are improved by the proposed algorithm.

@&#INTRODUCTION@&#
It is a commonly known fact that most of the real life problems cannot be solved optimally due to some binding limitations of the classical optimization techniques [1–5]. This circumstance is related to the inherent search procedures of those techniques. In other words, most of them are generally proposed as problem dependent solution approaches where problem specific constraints, objective function (linear, non-linear, etc.) and variables (integer, binary, continuous, etc.) exist. Additionally efficiencies and effectiveness of those classical techniques are heavily interrelated to structure of the solution space (convex, non-convex, etc.), number of the variables and constraints [4]. For instance, except for some extensions with Gomory cuts, etc., well known Simplex Algorithm can be used to solve problems with linear objective and constraint functions and continuous variables; geometric programming can be used to solve non-linear models with a polynomial objective function. To sum up, it is difficult to generalize a classical solution approach for all types of optimization problems. In addition, most of the real life problems including design optimization problems inherently involve different types of variables, constraints and objective functions simultaneously. Considering all these drawbacks, it can be concluded that classical optimization algorithms are usually not appropriate or easy to use as an effective approach. In order to overcome some of those well-known deficiencies of the classical optimization procedures, meta-heuristic optimization techniques mainly originated from artificial intelligence research were developed by researchers. One of the most remarkable features of these algorithms is that they are problem and model independent and most of them are efficient and flexible [3,4].Firefly algorithm (FA) [6,7], which is a new member of this family, is currently an active focus of research, where several modifications and improvements were recorded within the past few years. In this paper, further improvements based on the work of Baykasoglu [5] and Baykasoğlu and Ozsoydan [8] is proposed. This new approach is referred to as adaptive FA (AFA) because it uses adaptive move mechanisms as well as self-adaptive parameters. The tests were carried out on well-known non-linear constrained mechanical design optimization problems. The related chronologically sorted literature is provided in the following.In 1972, Siddall [9], introduced some of the currently on agenda mechanical design optimization problems and attempted to solve them using several analytical approaches. After a decade, in 1982, Belegundu [10] reported a theoretical background of the engineering design optimization problems with recent developments in mathematical programming and modern approaches. Special features of these problems were revealed in that study. For design optimization problems, Arora [11] published a book describing the basic concepts and techniques with examples. Meta-heuristic algorithms for engineering design problems were introduced by Hart [12] where the effects of local search procedures integrated with parallel Genetic Algorithms (GA) were examined. The proposed local search procedures were allowed to perform as adaptive methods. The aim here was to prevent time consuming unnecessary local search moves. In the same year Kannan and Kramer [13] proposed an analytical method combining some other analytical methods for solving design optimization problems. Coello [14,15] introduced the notion of using adaptive penalty factors of the fitness function of a GA which can further be generalized to any meta-heuristic algorithm. This approach can be considered as an improvement for the conventional constrained handling methods.In 2001, Coello and Mezura-Montes [16] introduced a constraint handling method inspired from a multi objective optimization procedure, and their approach was tested on two different non-linear constrained optimization problems. A swarm based approach, sharing information among individuals was proposed by Ray and Saini [17]. Distinctly from traditional methods, in their technique, a Pareto ranking scheme was used for constrained handling. In some studies [18,19] behavioral concept of society and civilization was implemented in a population based algorithm where all individuals inherit intelligence either using intra or intersociety information exchange procedures. Another constraint handling method for engineering optimization problems was proposed in [20] where infeasibility is attempted to be overcome through selection operator of GAs. Mezura-Montes et al. [21] developed a self-adaptive evolutionary strategy avoiding the use of traditional penalizing method. Thus, the authors conclude that their approach maintains diversity and achieves competitive results at low computational cost. A feasibility preserving Particle Swarm Optimization (PSO) was proposed by Hu et al. [22].A similar study to [18,19] using acceptance function is reported in [23]. He et al. [24] introduced a straightforward constraint handling method referred to as fly-back method,where any individual is returned to its previous position when it violates problem domain boundaries. Thus, swarm is allowed to perform only in the feasible region. Their method is implemented within a PSO mechanism. Parsopoulos and Vrahatis [25] proposed a unified PSO method with commonly used penalty functions. By making use of simple penalty function, [26] allowed infeasible solutions to take place during the search process. In 2007, a technical report [27], focusing on the improvements for PSO on engineering optimization and several related problems, was published. Two other similar PSO approaches with different constraint handling techniques were proposed in [28,29] in the same year. Differently from the previous studies, an improved and a hybrid version of harmony search algorithm [30,31] was firstly applied to design optimization problems.Cagnina et al. [32] proposed a PSO with a simple constraint handling technique, where the main stream of the algorithm is guided to choose feasible solution vector during conventional PSO procedures. Although it can be considered as a straightforward technique, the authors stressed the effectiveness of their approach. Maruta et al. [33] proposed a modification of PSO, which can handle inequality constraints. Their approach is simple but effective and it is applicable for a broad class of non-convex problems directly. Tomassetti [34] proposed a modification PSO for mechanical design problems. In this approach, some random individuals are inserted to the swarm for the same purpose with tuning procedure of inertia coefficient in the velocity vector. The aim here is to keep optimization procedure from trapping in local optima. Kim et al. [35] implemented a PSO with high precision. The authors also introduced a novel and effective constraint handling method, which can be generalized to many other constrained optimization problems.Gandomi et al. [36] presented a FA using levy distribution. Commonly used penalizing method was also used in that study. Akay and Karaboga [37] implemented an Artificial Bee Colony algorithm with a simple constraint handling procedure where algorithm is biased to choose feasible solutions rather than infeasible ones or a low-cost infeasible solution to an expensive infeasible solution. In the same year, Baykasoglu [5] proposed a simple but effective approach with chaos embedded Great Deluge Algorithm for design optimization problems.In some recent studies, global optimization techniques along with several bio-inspired swarm based algorithms were presented in [36–44]. The effectiveness of those approaches was shown by the reported results. Thus, the popularity of bio-inspired algorithms has increased among the researchers.The main research concern in this paper is to analyze the performance of AFA on constrained design optimization problems, which are generally formulated as complex non-linear programming models. The proposed algorithm has a high intensification capability via both adaptive parameters, and adaptive movements of the fireflies in the swarm using a specialized procedure. Thus, AFA performs lesser calculations with precisely tuned parameters. As a result, it achieves better results in shorter period in comparison with its base version (FA). It is also aimed to analyze whether it is possible to improve the performance of AFA by incorporating chaotic maps. For that purpose, three chaotic maps and a combination of them and random number generator are utilized.Although the idea of integrating chaotic maps with meta-heuristics is not new in those previous studies, generally unconstraint problems were considered. Nevertheless, some of the recent studies [45–47] are related to the scope of the current work. In addition, the use of chaotic maps in FA here notably differs from those previous studies. To the best of our knowledge, the current work presents the first reported study with the mentioned features.The effectiveness of AFA was demonstrated in a previous study of Baykasoğlu and Ozsoydan [8] on dynamic optimization problems. According to the experimental study of the current work, some of the best known results published in the literature are improved. In other benchmarking problems, AFA obtains either the best or very competitive results. Furthermore, it was shown that the effectiveness of AFA could further be improved by embedding chaotic maps.The remainder of this paper is organized as follows: in Section 2, AFA and its implementation details with some novelties are presented. In Section 3, details about chaotic maps and their applications are given. Sections 4 and 5 presents experimental studies and conclusion, respectively.FA is a population based method which simulates the flashing and communication behavior of fireflies [6,7]. The brightness of a firefly means how good the objective of a solution is. Brighter firefly attracts other fireflies. As the distance between fireflies increases, the attractiveness decreases exponentially because of the light absorption of medium. A comprehensive survey of this recent algorithm is presented in the studies of Fister et al. [48,49], Yang and He [50] and Baykasoğlu and Ozsoydan [8].FA has three assumptions [6,7]:i.All fireflies are unisexual and every firefly attracts/gets attracted to every other firefly.The attractiveness of a firefly is directly proportional to the brightness of the firefly. (The brightness decreases as the distance increases.)They move randomly if they do not find a more attractive firefly in adjacent regions.The distance between two fireflies (i and j) can simply be evaluated as the Euclidean distance as stated below in Eq. (1), where D is the dimension, xikis the kth dimension of the ith firefly.(1)rij=∑k=1D(xik−xjk)2The attractiveness of a firefly decreases exponentially as the distance increases. The attractiveness of a firefly at a distance γris formulated as given in Eq. (2), where γ is the light absorption coefficient, m is a number modifying the distance metric and β(0) is the attractiveness at zero distance usually accepted as unity [6,7,36,50].(2)β(r)=β(0)e−γrmm≥1Finally, movement of a firefly, i is attracted to another more attractive (brighter) firefly j, is determined by Eq. (3), where α∈[0, 1] is a user supplied scaling factor of randomness and ψ∈[0, 1] is a random number.(3)xik=xik+β(0)e−γr2(xjk−xik)+α(ψ−0.5)A pseudo code for FA is given below in Fig. 1.As it can be seen from Fig. 1, FA performs a full pair-wise comparison which can be considerably time consuming. Additionally, it is widely reported in the literature that γ is assumed to be equal to unity; however, as the distance between fireflies increases,β(0)e−γr2term quickly approaches to zero which might cause fireflies getting trapped in their positions throughout evaluations. In order to prevent this circumstance, γ can be set to very small values, however, obtaining the appropriate level of γ is not an easy task. Considering these two drawbacks, an improved version of FA, which is particularly effective on combinatorial dynamic optimization problems, is presented by Baykasoğlu and Ozsoydan [8].Details of this new technique are given in the following.A parameter ς which tunes itself via Eq. (4), is incorporated in AFA.(4)ς=mod((gen−1),genMAX)genMAX(5)ξ=(ranki)−ςSynchronized with ς, another parameter ξ represents the probability of a firefly to be moved or not. It is evaluated as in Eq. (5) where rankiis the rank of ith firefly. Diversely from FA, with the use of parameter ξ, the movement of a firefly not only depends on the brightness of more attractive fireflies but also depends on a check that a random number τ∈[0,1] must satisfy the threshold value of ξ as illustrated in pseudo codes of AFA as depicted in Fig. 2.A test in Baykasoğlu and Ozsoydan [8] on average of 30 runs shows that, approximately %26 of the move procedure of FA is discarded in AFA where the aim is to find similar results with FA using lesser calculations. According to the results, although complexity of FA is not reduced, an improvement for the required CPU time is obtained due to lesser calculations performed in AFA. Furthermore, in regard to the statistically verified results, the remarkable finding in that study was not only CPU improvement but also AFA achieved far better results than of those FA found.Moreover, the exponential move function is replaced with a simpler move function as shown in Eq. (6).(6)xik=xik+β(0)1Ω+r(xjk−xik)+α(ψ−0.5)where Ω is very small number like 0.000001 in order to prevent division by zero.In the current work, this approach is further improved to provide a higher intensification capability to the proposed approach without loss of divergence capability. Therefore, as given in Eq. (7), the constant β(0) coefficient is replaced withvk, wherevkrepresents the velocity of the kth dimension of a solution vector. It can be considered as a step size of the corresponding design variable.(7)xik=xik+vk1Ω+r(xjk−xik)+α(ψ−0.5)There are several step sizing functions in the literature, however, there is not an agreed method [5]. The function presented in Baykasoğlu [5] is utilized in the present work. In this technique, the initial step sizes are selected considerably large numbers at the beginning of the search process and they are decremented through generations via Eq. (8). Because, as the search progresses and population converges to promising regions of search space, a more intensive search as well as slower movements of fireflies is more useful.(8)vk=vk−e(−mod((gen/(gen+1)),1))*φ*vkIn Eq. (8), gen and φ are the generation counter and scaling parameter, respectively. In this study φ is fixed to 0.001 for all tests.Finally, two local search procedures are employed in both FA and AFA. Random fly is expected to overcome local optima traps whereas incumbent local search attempts to improve the best solution found so far. The details of these local search procedures are presented in the following.In random fly local search procedure, the neighboring regions of the leading part of firefly swarm are searched intensively. Several trial tests showed that approximately 10% of the population represents the leading high quality solution vectors. Therefore, this procedure is applied to only the best 10% of the population with a probability of 0.45. Thus, time-consuming unnecessary process is prevented. If an improvement is detected, necessary updates are performed. A pseudo code for random fly is depicted in Fig. 2.This search is only applied to the best solution found until the current generation. However, in order to prevent early convergence and premature swarm, this procedure is postponed until some criteria are met. Therefore, whole search is allowed to evolve without incumbent local search procedure throughout 10% of the maximum number of generations. In what follows, this technique is employed with a probability of 0.35 at each generation. If any improvement is detected, necessary updates are performed. A pseudo code for incumbent local search is also depicted in Fig. 2.It should be noted that both local search procedures are performed in a greedy manner. In other words, only improved solutions are accepted.There are four basic types of decision variables in a typical optimization problem, namely binary, discrete, integer and continuous. The test problems which are considered in the present work contain only integer and continuous design variables. Therefore, only the neighborhood functions for them are presented here.Based on the types of design variables, a neighborhood solution vector is generated from the current solution vector by making use of neighborhood functions. Two functions as introduced in Baykasoğlu [5] are employed here for integer (Eq. (9)) and continuous (Eq. (10)) type variables.(9)xik*=xik+integer[(π()−0.5)×υk](10)xik*=xik+[(π()−0.5)×υk]where xikis the value of the kth design variable of ith firefly prior to the neighborhood move,xik*is the value of the kth design variable of ith firefly after the neighborhood move and π() is corresponding chaotic or random number generator that generates chaotic or random numbers conditionally in the range [0,1].Introduced by Lorenz in 1963 [51], chaos has found numerous practical applications in many scientific fields. Mingjun and Huanwen [52] define chaos as an irregular motion, seemingly unpredictable random behavior exhibited by a deterministic nonlinear system under deterministic conditions. In other words, a nonlinear system can be considered as chaotic if it represents sensitive dependence on the initial conditions and has an infinite number of different periodic responses. Furthermore, for a chaotic system, slight differences in the initial setup might yield to great differences in the final output.Chaotic maps are usually used for modeling chaos. A chaotic map is a dynamical discrete-time continuous value function, which defines the relationship between the current and following state of a chaotic system. One-dimensional chaotic maps are frequently employed in practical applications. These maps can be formally formulated as in Eq. (11).(11)xn+1=β(xn)where xn+1 and xnare consecutive chaotic numbers and β is the forward transformation mapping function.Some recent reviews for the applications of chaotic systems in artificial intelligence are reported in [53–57]. Additionally, Baykasoğlu [8] presented a successful classification of related research papers where chaotic maps are used.There are several chaotic number generators used in the literature. However, three chaotic maps (logistic, sinusoidal and tent) were found relatively successful for mechanical design optimization problems by Baykasoğlu [8]. These maps are also employed in the present study. Moreover, a probabilistic combination of those chaotic maps, referred to as piecewise chaos in the current work is also implemented. According to piecewise chaos, when a chaotic number is required, a random number r∈(0, 1) is drawn first and following conditions are checked. If r<0.33, next chaotic number is generated using logistic chaotic map. If r≥0.33 and r<0.66, then sinusoidal chaotic map is used. Otherwise, tent map chaotic map is called for the next chaotic number.An important point worth stressing in piecewise chaos is that each chaotic map keeps their individual input chaotic numbers (predecessor chaotic numbers) separately and uses them to generate the following chaotic numbers (successor number) when needed thorough generations. Additionally each of the chaotic maps is initialized using different random seeds.Introduced by Robert May in 1976 [58], logistic map is often cited as an example of how complex behavior can arise from a very simple nonlinear dynamical equation. Logistic map is a polynomial function which generates chaotic sequences in (0,1). This map can also be considered as one of the most frequently used in chaotic number generator. This map is formally defined by the following equation:(12)xn+1=φxn(1−xn)0<φ≤4,xn∈(0,1)Another chaotic map used in this study is Sinusodial map introduced by Peitgen et al. [59]. This map is formally defined by the following equation:(13)xn+1=sin(πxn)xn∈(0,1)Sinusodial map generates chaotic sequences in (0,1).Introduced by Ott [60], tent chaotic map is very similar to the logistic map, which displays specific chaotic effects. Tent map generates chaotic sequences in (0,1). This map is formally defined by the following equation:(14)xn+1=xn0.7xn<0.7103xn(1−xn)otherwisexn∈(0,1)All of the design optimization problems considered in the present work were formulated as constrained non-linear mathematical programming models in the literature. Therefore, a method for constraint handling is required.A constrained design optimization problem can be defined by using a linear or nonlinear objective function f(x), which needs to be optimized w.r.t. the design variables x and subject to linear and/or non-linear equality/inequality constraints which are given as g(x)=0 and h(x)≤0, respectively. Based on these preliminary definitions the constrained design optimization problems can be formally defined as follows (Eqs. (15)–(17)):(15)minf(x),x∈D⊆ℝnps.t.(16)gl(x)=0,gl:ℝnp→ℝ,l=1,2,3,…,me(17)hl(x)≤0,hl:ℝnp→ℝ,l=1,2,3,…,miwhere D denotes the search space. It should also be noted that the equality constraint (16) can be changed to inequality constraints and thus the design optimization problem is made up inequality constraints only.As mentioned in Baykasoğlu [8], there exist several commonly used techniques including penalizing, rejecting and repairing to overcome the infeasibility circumstances. However, most of them require additional efforts. In the present study, a recent and effective approach which was introduced by Kim et al. [35] is employed. Their approach resembles the penalty function approach but it does not require any penalty terms to fix.In order to be able to find feasible solutions for the constrained non-linear design optimization problem as formally defined by Eqs. (15)–(17), the function (Eq. (18)) proposed by Kim et al. [35] is used. Using this function, non-linear constrained optimization problem is reduced to an unconstrained optimization problem.(18)minx∈DL(x)=hˆ(x)=hmax(x),ifhmax(x)>0fˆ(x)=atan[f(x)]−π2,otherwisewherehmax(x)=maxhl(x)[h1(x),h2(x),h3(x),…,hmi(x)]and atan[·] denotes the inverse tangent. It is important to note thatfˆ(x)<0for any x, and thusfˆ(x)<hˆ(x)is guaranteed.Also note that, the remarkable advantage of this approach is that no extra problem-dependent parameters such as penalty factors or Lagrange multipliers are required.This section is devoted to the experimental setup, selected benchmarking problems and computational results.The proposed algorithm AFA and its base version FA is applied to the four well-known non-linear constrained mechanical design optimization problems. The algorithms are coded in MATLAB and all tests were performed on a PC with 3.4GHz processor and 4GB RAM. For fair comparisons with the literature, number of objective function evaluations is determined as 50,000 which can be assumed as an average value for function evaluations considering the published work in the literature. However, it is worth stressing that all good solutions of the present study were obtained in approximately 3000 evaluations. Finally, 20 replications were performed for all test problems.All other input parameters of algorithms are summarized in Table 1.Introduced by Belegundu [10] for the first time, the first test problem deals with the optimal design of the tension/compression coil spring. A pictorial example for compression coil spring is depicted in Fig. 3[11]. Three continuous design variables exist in the current problem. They can be specified as:(19)x=(x1,x2,x3)T≔(N,D,d)Twhere N is the number of spring coils, D is the winding diameter, and d is the wire diameter. The objective here is to minimize the weight of the spring subject to the minimum deflection, shear stress, surge frequency, and limits on the outside diameter. The problem is scientifically formulated as a constrained nonlinear mathematical programming problem in the literature as given by the equation set (20)[11,35].(20)minf(x)=(x1+2)x2x32Subject to;h1(x)≔1−x1x2371785x34≤0h2(x)≔4x22−x2x312566(x2x33−x34)+15108x32−1≤0h3(x)≔1−140.45x3x1x22≤0h4(x)≔x2+x31.5−1≤0The search space is defined as:D≔{x∈ℝ3:(2.0,0.25,0.05)T≤x≤(15.0,1.3,2.0)T}The results of FA and AFA with different chaotic maps as well as results using random number generators and other existing algorithms are presented in Tables 2 and 3, respectively.As it can be seen from Table 2, the best solution is found by FA with tent chaotic number generator. This solution is better than most of the published results and it is negligible worse than the best solutions reported in the literature so far.Additionally, comparing the best results achieved by both FA and AFA, one can see that for each of the chaotic number and random number generators, AFA obviously outperforms FA except for the tent chaotic number generator. Surprisingly FA performs slightly better than AFA on this generator.In Table 3, one can see the comparison of AFA to other published work in the literature. As it can be seen from this table, the results of AFA is better than most of the published results. According to the findings represented in Table 3, AFA can be considered as a competitive solution approach for the rest of the results, for which AFA was not able to outperform the others.In the second test problem which is introduced for the first time by Kannan and Kramer [13], the design of a cylindrical vessel, which is capped at both ends by hemispherical heads as shown in Fig. 4is attempted to be optimized. The purpose of optimizing design here is to minimize the total cost, including the material, forming, and welding costs [21,25,35]. There are four design variables: Ts(thickness of the shell), Th(thickness of the head), R (inner radius), and L (length of the cylindrical section of the vessel, not including the head). The first two design variables are integer multiples of 0.0625, which are the available thicknesses of the rolled steel plates; other two design variables are continuous. Those design variables can be formalized as:(21)x=(x1,x2,x3,x4)T≔(Ts,Th,R,L)TThe problem is formulated as a constrained nonlinear mathematical programming problem in the literature as given by the equation set (22).(22)minf(x)=0.6224x1x3x4+1.7781x2x32+3.1661x12x4+19.84x12x3Subject to;h1(x)≔0.0193x3−x1≤0h2(x)≔0.00954x3−x2≤0h3(x)≔1296000−πx32x4−43πx33≤0h4(x)≔x4−240≤0The search space is defined as:D≔{x∈ℝ4:(0,0,10,10)T≤x≤(99,99,200,200)T}The results of the algorithms AFA and FA and with different chaotic maps including random number generator and other existing algorithms are presented in Tables 4 and 5, respectively.As it can be seen from Table 4, the best solution for pressure vessel problem is obtained by AFA using piecewise chaotic map generator. Considering the average, standard deviance and the worst objective values of FA and AFA, one can see that AFA apparently outperforms FA again. The solution reported in the literature for pressure vessel design optimization problem is also improved by AFA with piecewise chaotic number generator.Table 5 presents the comparison of AFA to the works published in the literature. To the best of our knowledge, the best solution found for pressure vessel design problem is improved by AFA with piecewise chaotic number generator.Rao [61], introduced the optimization of welded beam where the aim is to find the minimum cost design of the structural welded beam as it is shown in Fig. 5with constraints on weld stress, buckling load, beam deflection and beam bending stress. In this problem, there exist four continuous design variables: h (weld thickness), l (weld length), t (bar thickness), and b (bar breadth). The mentioned design variables can be formalized as:(23)x=(x1,x2,x3,x4)T≔(h,l,t,b)TThe design purpose is to minimize the structural cost of the beam, and the main cost factors of such a welded beam, which includes: set-up labor cost, welding labor cost, and material cost. The design optimization problem of welded beam is formulated as a constrained nonlinear mathematical programming problem in the literature [18,25] as given by the equation set (24):(24)minf(x)=1.10471x12x2+0.04811x3x4(14+x2)Subject to;h1(x)≔τ(x)−τmax≤0h2(x)≔σ(x)−σmax≤0h3(x)≔x1−x4≤0h4(x)≔0.125−x1≤0h5(x)≔δ(x)−δmax≤0h6(x)≔P−Pc(x)≤0h7(x)≔0.10471x12+0.04811x3x4(14+x2)−5≤0whereτ(x)=(τ′)2+2τ′τ″x22R+(τ″)2,τ′=P2x1x2,τ″=MRJ,M=PL+x22,R=x224+x1+x322,J=22x1x2x2212+x1+x322,σ(x)=6PLx32x4,δx=4PL3Ex33x4,Pcx=4.013Ex32x46/36L21−x32LE4GThe search space is defined as:D≔{x∈ℝ4:(0.1,0.1,0.1,0.1)T≤x≤(2,10,10,2)T}P=6000Ib,L=14in.,E=30×106psi,G=12×106psi,τmax=13,600psi,σmax=30,000psi,δmax=0.25in.The results obtained from AFA and FA with different chaotic maps and other existing algorithms are presented in Tables 6 and 7, respectively.As it can be seen from Table 6, each of the solutions found by chaotic number generators of AFA are competitive with the results published in the literature so far. However, random number and piecewise chaotic number generators embedded in AFA outperform the rest of the solutions obtained in the current work.As reported in Table 7, the best solutions found in this study are same as the best-known solutions reported in the literature. However, we should mention here that reliability (average solution quality, standard deviation) of AFA with random and piecewise maps are much better than the reported solutions except references [5,35], which provide the same results.Introduced by Siddall [9], the final test problem deals with the minimum weight design of a speed reducer subject to constraints on bending stress of the gear teeth, surface stress, transverse deflections of the shafts and stresses in the shafts. A pictorial illustration of a speed reducer and its design variables is depicted in Fig. 6. As can be seen from the figure, there are seven design parameters of the speed reducer problem, which are the face width (b), module of teeth (m), number of teeth in the pinion (z), length of the first shaft between bearings (l1), length of the second shaft between bearings (l2) and the diameter of the first shaft (d1) and second shaft (d2). Except the third one, which is an integer variable, all of the design variables are continuous. The mentioned design variables can be formalized as:(25)x=(x1, x2, x3, x4, x5, x6, x7)T≔(b, m, z, l1, l2, d1, d2)TThe problem is formulated as a constrained nonlinear mathematical programming problem in the literature [61,62] as given by the equation set (26):(26)minf(x)=0.7854x1x22(3.3333x32+14.9334x3−43.0934)−1.508x1(x62+x72)+7.4777(x63+x73)+0.7854(x4x62+x5x72)Subject to;h1(x)≔27x1x22x3−1≤0h2(x)≔397.5x1x22x32−1≤0h3(x)≔1.93x43x2x3x64−1≤0h4(x)≔1.93x53x2x3x74−1≤0h5(x)≔[(745x4/x2x3)2+16.9×106]1/2110x63−1≤0h6(x)≔[(745x4/x2x3)2+157.5×106]1/285x73−1≤0h7(x)≔x2x340−1≤0h8(x)≔5x2x1−1≤0h9(x)≔x112x2−1≤0h10(x)≔1.5x6+1.9x4−1≤0h11(x)≔1.1x7+1.9x5−1≤0The search space is defined as:D≔{x∈ℝ7:(2.6,0.7,17,7.3,7.8,2.9,5.0)T≤x≤(3.6,0.8,28,8.3,8.3,3.9,5.5)T}The results obtained from AFA and FA with different chaotic maps and other existing algorithms are presented in Tables 8 and 9, respectively.As it can be seen from Table 8 that AFA with random number generator finds the best solution of the current work which can be considered as competitive with results published in the literature. Although this solution is outperformed by some of the reported results as presented in Table 9, reliability (average solution quality, standard deviation) of AFA with random number generator is much better than the reported solutions except references [26,27,32,41] which provide proximate results.Considering the results obtained from the test problems, it is difficult to say exactly which algorithm performs the best. Additionally each algorithm is extended with different chaotic maps. However, we can say that chaotic maps have a positive impact on the performance of AFA. In order to compare and rank the performance of algorithms the following procedure is followed.The performance comparison is considered as a ranking in multiple tournaments. In this technique, a commonly known simple averaging approach is used. First, algorithms with chaotic maps are sorted for each problem based on their performance, afterwards their average rank value and final rankings based on these values are determined. The results are depicted in Table 10.According to the results presented in Table 10, we can fairly conclude that, AFA outperforms FA considering the average ranks for the best solutions. Additionally AFA with piecewise chaotic map, where features of other chaotic maps are randomly used, is found as the most successful algorithm for this performance measure. Finally, we can say that AFA with piecewise, random, tent and sinusoidal maps are located in the top three approaches where tent and sinusoidal maps have the same ranks.Considering the average ranks for the average solutions, AFA with random number generator is found as the leading algorithm. According to this performance measure, AFA with random, sinusoidal and piecewise maps are located in top three approaches.Finally we can conclude that in comparison with FA, AFA has a greater capability for both “obtaining the best solutions” and for “maintaining reliability in the derived results” on mechanical design optimization problems. Moreover, results demonstrate that embedding chaotic maps into AFA can further improve the performance of the algorithm.

@&#CONCLUSIONS@&#
