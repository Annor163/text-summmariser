@&#MAIN-TITLE@&#
Precise trajectory optimization for articulated wheeled vehicles in cluttered environments

@&#HIGHLIGHTS@&#
An articulated vehicle trajectory optimizer is proposed.Constraint violations between every two adjacent collocation points are considered.A simple but accurate collision avoidance judgment is utilized.Large-scale constraints are incorporated into the optimization objective.Various optimization objectives can be handled by our trajectory optimizer uniformly.

@&#KEYPHRASES@&#
Articulated vehicle,Trajectory planning,Mesh generation,Collision avoidance,Large-scale optimization,Computational guidance and control,

@&#ABSTRACT@&#
Trajectory planning refers to planning a time-dependent path connecting the initial and final configurations with some special constraints simultaneously considered. It is a critical aspect in autonomously driving an articulated vehicle. In this paper, trajectory planning is formulated as a dynamic optimization problem that contains kinematic differential equations, mechanical/environmental constraints, boundary conditions and an optimization objective. The prevailing numerical methods for solving the formulated dynamic optimization problem commonly disregard the constraint satisfactions between every two adjacent discretized mesh points, thus resulting in failure when the planned motions are actually implemented. As a remedy for this limitation, the concept of minute mesh grid is proposed, which improves the constraint satisfactions between adjacent rough mesh points. On the basis of accurate penalty functions, large-scale constraints are successfully incorporated into the optimization criterion, thus transforming the dynamic optimization problem into a static one with simple bounds on the decision variables. Simulation results verify that our proposed methodology can provide accurate results and can deal with various optimization objectives uniformly.

@&#INTRODUCTION@&#
An articulated vehicle is a vehicle with a permanent or semi-permanent pivoting joint in its structure [1]. In a broad sense, any vehicle towing a trailer can be considered as articulated. Compared with a rigid-body vehicle in the same length, an articulated vehicle turns with a significantly smaller turning radius [2]. Also, articulation aids the vehicle in keeping contact with the rough terrain. Both merits have motivated the application of articulated vehicles, including buses, trams, trains, trucks and robotic floor cleaner [3]. This current study focuses on the trajectory generation issue of articulated wheeled vehicles.Trajectory generation involves planning a time-dependent path connecting the initial and desired final configurations with simultaneous consideration of some predefined requirements [4,5]. Viale et al. [6] proposed a practical multi-step trajectory planner that calculates geometric paths first and then generates smooth trajectories. Although calculating the preliminary geometric paths (consisting of line segments and circular arcs) is automated and fast, the overall method is ineffective in handling intricate scenarios directly and precisely, particularly schemes with time-dependent constraints and irregularly placed obstacles. Other geometric-based methods or first-path-then-trajectory methods (e.g., [7–11]) also suffer from this limitation. Wang and Cartmell [12] adopted a function-fitting approach to calculate time-dependent profiles directly. Unfortunately, collision avoidance was not considered in their study. Zare et al. [13] developed a fuzzy-based method, wherein three separate fuzzy controllers are used for forward maneuvers, destination approaching and collision avoidance. However, the kinematic model and environment are not precisely described in their works. More importantly, fuzzy-based methods are generally adopted to determine feasible rather than optimal or optimized trajectories.In addition to the aforementioned trajectory planners, previous studies incorporate part of trajectory generation with trajectory tracking. For example, a path is planned first and then trajectory tracking is directly done. Trajectory tracking involves closed-loop execution. Thus control theories are utilized. In literature, backward motions are particularly treated because of control instability [14–17]. A well-known issue associated with backward motion is jackknifing [18]. Theoretically, given that the entire articulated system is physically linked, the velocity vector components along the links should be consistent. Fig. 1(a) shows an example with such consistency, whereas Fig. 1(b) shows an example with jackknifing owing to the inconsistency. When jackknifing occurs, the link will be damaged or the trailer will sideslip. To avoid jackknifing, a small-angle constraint was proposed, which requires that the error between the orientation angles of every two adjacent parts of the vehicle should be small [2,19–21]. However, jackknifing still occurs when the small-angle constraint is satisfied, as depicted in Fig. 1(b). David and Manivannan [3] summarized that sharp turning, backward movement and fast speed are the three inducing factors that contribute to jackknifing. However, this conclusion is merely based on experiences: jackknifing may occur during forward movements (see Fig. 1(c)).In summary, the aforementioned studies commonly introduce four drawbacks: (i) time-dependent constraints are not directly handled in the path-planning-first methods; (ii) irregularly placed obstacles in the environment are not precisely described; (iii) only feasible rather than optimized/optimal solutions are generated; (iv) challenges (e.g., reverse instability and jackknifing avoidance) that can be tackled in the open-loop trajectory planning phase are partly transferred to the closed-loop control phase.In the present study, the original trajectory planning scheme is formulated as a dynamic optimization problem with precisely described kinematics and constraints. Our formulation contains only objective principles rather than human experiences (such as fuzzy logic) [22]. In solving the formulated dynamic optimization problem, we propose a numerical solver that consists of a precise discretization model and a global optimizer. The obtained solutions are strictly feasible.The remainder of this paper is structured as follows. Section 2 concerns the formulation of a dynamic optimization problem. Then our proposed dynamic optimization solver is introduced in Section 3, followed by Section 4, where simulation results and discussions are presented. Finally, conclusions are drawn in Section 5.This section focuses on strictly describing the original trajectory generation problem as a dynamic optimization problem, which contains the kinematic principles, mechanical restrictions, collision-avoidance constraints and an optimization objective.This work considers an articulated wheeled vehicle as one car-like front-steering tractor towing(n−1)trailers [23]. Based on the no side slip fundamental assumption, the kinematics of the concerned tractor is described by(1){dx1(t)dt=v(t)·cosθ1(t)dy1(t)dt=v(t)·sinθ1(t)dθ1(t)dt=v(t)·tanϕ(t)L1,t∈[0,tf],where t refers to time, tfindicates the unknown terminal moment of the entire movement, (x1, y1) denotes the mid-point of rear wheel axis (point P1 in Fig. 2), θ1 refers to the orientation angle, v refers to the linear velocity of point P1 and ϕ refers to the steering angle of front wheels. Moreover, as illustrated in Fig. 2, L1 denotes the wheelbase length, N1 denotes the front overhang length, M1 denotes the rear overhang length and 2B1 denotes the tractor width.Following this, the kinematics of the trailers can be presented as(2){xn=x1−∑j=2n(Lj·cos(θj)),(n≥2)yn=y1−∑j=2n(Lj·sin(θj)),(n≥2)dθ2(t)dt=v(t)·sin(θ1(t)−θ2(t))L2dθn(t)dt=v(t)·sin(θn−1(t)−θn(t))Ln·(∏i=1n−2cos(θi(t)−θi+1(t))),(n≥3)t∈[0,tf],where θidenotes the orientation angle of the(i−1)thtrailer, (xi, yi) locates the corresponding hooking point Pi, 2Bidenotes width of the(i−1)thtrailer, Nidenotes the corresponding front overhang length, Midenotes the rear overhang length and Lidenotes the Euclidean distance between two adjacent hook points (i ≥ 2).In the preceding equations, when v(t) and ϕ(t) (as well as tf) are specified, the remaining variables (i.e., xi(t), yi(t), and θi(t)) can be determined one after another through integral. Therefore, v(t) and ϕ(t) are chosen as control variables and the remains are regarded as state variables.This subsection focuses on the constraints that should be imposed during the entire maneuver process.First, we have(3){|v(t)|≤vmax|ϕ(t)|≤Φmax,t∈[0,tf].The reasons for imposing boundaries on v(t) and ϕ(t) are evident: (i) the linear velocity of the vehicle is expected to be not too fast and (ii) the steering angle of the tractor is mechanically limited. Second, those two control variables should be continuous. Third, for such a multi-body vehicle, different parts should not collide with each other. Assuming that the tractor and trailers are rectangular, how to strictly formulate this collision-free condition is introduced next.Basically, let us investigate the judgment whether two rectangles collide. All of the possibilities that one rectangle collides with another can be divided into two branches: (i) at least one corner point of a rectangle is located within the other rectangle and (ii) no such corner point locates inside the other rectangular region [22]. Since the second possibility fully originates from the first one, if none of the four corner points of one rectangle collide into the other, both rectangles will never collide. For example, the requirement that the tractor should not collide with trailer 1 is identical to a combination of (i) four corner points of the tractor remain outside trailer 1 and (ii) four corner points of trailer 1 remain outside the tractor. When there is 1 tractor towing(n−1)trailers, every two out of all the n rectangular bodies should not collide. Here, a question that would arise is: how to judge whether a specified point locates inside a given rectangular region or not? The following judgment indicates that a specified point Q locates in the rectangular region ABCD if and only if [24]:(4)(0<AQ→·AB→<AB→·AB→)∩(0<AQ→·AD→<AD→·AD→).Through this, collision-avoidance constraints could be efficiently formulated no matter if the rectangles are placed regularly or not. A theoretical proof of this judgment is provided in Appendix A. Geometrically, the corner points A1B1C1D1 of the tractor locate at(5){A1=(A1x,A1y)=(x1+(L1+N1)·cosθ1−B1·sinθ1,y1+(L1+N1)·sinθ1+B1·cosθ1)B1=(B1x,B1y)=(x1+(L1+N1)·cosθ1+B1·sinθ1,y1+(L1+N1)·sinθ1−B1·cosθ1)C1=(C1x,C1y)=(x1−M1·cosθ1+B1·sinθ1,y1−M1·sinθ1−B1·cosθ1)D1=(D1x,D1y)=(x1−M1·cosθ1−B1·sinθ1,y1−M1·sinθ1+B1·cosθ1),while the corner points AiBiCiDiof the(i−1)thtractor locate at(6){Ai=(Aix,Aiy)=(xi+Ni·cosθi−Bi·sinθi,yi+Ni·sinθi+Bi·cosθi)Bi=(Bix,Biy)=(xi+Ni·cosθi+Bi·sinθi,yi+Ni·sinθi−Bi·cosθi)Ci=(Cix,Ciy)=(xi−Mi·cosθi+Bi·sinθi,yi−Mi·sinθi−Bi·cosθi)Di=(Dix,Diy)=(xi−Mi·cosθi−Bi·sinθi,yi−Mi·sinθi+Bi·cosθi),(n≥2).This subsection concerns the exterior constraints. First, conditions at the initial and terminal moments should be satisfied. The initial configuration is completely known. The terminal conditions can vary from mission to mission. In this work, we require that (i) the vehicle ends with a full stop, i.e.,v(tf)=0and (ii) the entire articulated vehicle should terminally locate within a box region. Due to the convex set properties, the inside-box terminal condition is equivalent to the constraints that all the corner points of the tractor and trailers should not locate outside [25]. Second, the tractor-trailer system should not collide with the obstacles in the environment. In this current study, merely rectangular obstacles are considered, which can make the entire workspace cluttered if placed irregularly. Based on Eq. (4), the collision-avoidance conditions can be formulated similar to what has been presented in the preceding subsection.There are three types of optimization criteria considered in this study: (i) minimum traveling time tf, (ii) minimum traveling distance of point P1 and (iii) minimum maneuver times of the tractor.All these mentioned in this section form a dynamic optimization problem, which is well beyond the existing solvers to provide analytical solutions.A novel numerical approach is proposed to solve the formulated dynamic optimization problem. The numerical approach includes two stages: discretization and optimization. In the former, all the continuous-time state and control profiles in time are discretized into finite periods. Through this, the original infinite-dimensional problem is transformed into a finite-dimensional nonlinear programming (NLP) problem, which is solved in the latter stage.This subsection describes the dynamic optimization problem as an NLP problem. The unknowns include control variables (i.e., v(t) and ϕ(t)), state variables (xi(t), yi(t), θi(t), Aix(t), Bix(t), etc.) and tf.First, the time domain [0, tf] is equally divided into Nfp intervals{[ti−1,ti]|i=1,2,…,Nfp}, wheretNfp=tf,t0=0and the length of each interval istfNfp. Thereafter,(K+1)interpolation points are chosen in each interval to form a Lagrange polynomial. The piecewise polynomials on all the intervals form an estimation of the ground truth of a control profile [26,27]. Specifically, one can set(K+1)interpolation points{zi0,zi1,…,ziK}to describe v(t) in the ith interval[ti−1,ti]via the following Lagrange polynomial:(7)v(ti−1+(ti−ti−1)·τ)=∑j=0K(zij·∏k=0,≠jK(τ−τk)(τj−τk)),where τ ∈ [0, 1],τ0=0and 0 < τi≤ 1(j=1,2,…,K). Each τirefers to Gauss point, which can be calculated offline when K is given. Thus, as many as(K+1)·Nfpinterpolation points (together with a temporarily fixed tf) lead to a complete profile v(t), t ∈ [0, tf]. The control profiles should be physically continuous. Thus the following requirement is needed:∑j=0K(z(i−1)j·∏k=0,≠jK(1−τk)(τj−τk))=∑j=0K(zij·∏k=0,≠jK(0−τk)(τj−τk)),i=2…,Nfp,which simply indicates that(8)ziK=z(i+1)0,i=1,2,…,Nfp−1.Thus, as many as(K·Nfp+1)independent interpolation points (as well as a temporarily fixed tf) are needed to determine a continuous-time control profile on [0, tf] (see Fig. 3(a)).When both v(t) and ϕ(t) are described by the aforementioned finite number of interpolation points, the remaining state variables can be calculated through integral. To hasten the process of running the entire algorithm, we consider numerical integral. First, the obtained control profiles (which are expressed as the aforementioned piecewise continuous Lagrange polynomials) are equally discretized on as many as Nsp ≫ K · Nfp minute constant-value intervals. In other words, v(t) is identically described as{v0,v1,…,vNsp−1}wherev((i−1)+τNsp·tf)=vi=v(i−1Nsp·tf),τ∈[0,1],i=1,2,…,Nsp(see Fig. 3(b)). The state profiles can then be determined via the differential method [28]. For example, when{v0,v1,…,vNsp−1}and{θ10,θ11,…,θ1Nsp−1}are available, the differential equationdθ2(t)dt=v(t)·sin(θ1(t)−θ2(t))L2is expressed in the following equation to recursively compute{θ20,θ21,…,θ2Nsp−1}:(9)θ20=θ2(0),θ2i=tfNSP·(vi−1·(sin(θ1i−1−θ2i−1))L2+θ2i−1),i=2,3,…,NSP.With all the continuous-time constraints considered at those Nsp moments, the original dynamic optimization problem can be converted into a large-scale NLP problem.In previous studies regarding profile discretization, satisfactions of constraints between two adjacent interpolation points are almost never settled. This limitation can cause serious problems [29]. Fig. 4 shows two instances. The first one involves the violations of bounded constraints on some subintervals although the constraints are satisfied at all the interpolation points. The second instance depicts a “successful” collision-avoidance maneuver that will definitely fail in continuous-time driving [30]. A mesh adjustment procedure is proposed to overcome the first limitation related to the control profiles whereas accurate penalty based on minute discretization addresses the second limitation.As stated in Section 3.1, a control profile is roughly described as piecewise Lagrange polynomials and is precisely discretized into minute structures thereafter. Before the aforementioned numerical integral procedure, a mesh adjustment procedure should be conducted to avoid bounded constraint violations. For example, in dealing with |v(t)| ≤ vmax, every element in the precisely discretized set{v0,v1,…,vNsp−1}is checked for bounded constraint violation. If vi>vmax, then viis set to vmax. This adjustment procedure fundamentally guarantees the feasibility of entire maneuver.In addition to the bounded constraints imposed on the control profiles, complicated constraints of the state profiles (e.g., the collision-avoidance conditions) that can not be simply addressed by this adjustment still exist. Satisfactions of these complicated constraints are ensured through accurate penalty.Violations of two types of constraints are penalized: (i) collision avoidance and (ii) terminal condition achievement. In handling the collision-avoidance constraints, we check every precisely discretized moment and accumulate the violation amount in ψcollision. The violation amount is taken as an important index that guides the optimizer in seeking for improvements. Let us consider the penalty calculation at some specific moment. Given that only one corner point A collides into the rectangular obstacle PAPBPCPD, we can safely infer the following:0<PAA→·PAPB→<PAPB→·PAPB→0<PAA→·PAPD→<PAPD→·PAPD→,which can be obtained on the basis of Eq. (4). The penalty amount is determined asmin((PAPB→·PAPB→−PAA→·PAPB→),PAA→·PAPB→,×(PAPD→·PAPD→−PAA→·PAPD→),PAA→·PAPD→),which implies that we expect the minimum effort for point A to be outside PAPBPCPD. Violations of the terminal conditions ψterminal should be calculated similarly.To clearly determine the feasible solutions from infeasible ones, we define the gross penalty as(10)ψ={0,ifψterminal+ψcollision=0Valuelarge+ψterminal+ψcollision,ifψterminal+ψcollision>0,and incorporate it into the optimization objective. If no violation of these two fundamental restrictions occurs, ψ should be equal to 0; otherwise, ψ is larger than the positive constant Valuelarge, which is set sufficiently large to guarantee that the fitness of any feasible solution is smaller than any infeasible solution.Through this, we transform a complicated NLP problem into an optimization problem with simple bounded constraints of the decision variables.The rough interpolation points as well as tfare chosen as decision variables, because they determine the control profiles directly. Later, when the state variables are obtained through integral, constraint violations are examined, evaluated and then incorporated in the concerned optimization criterion through accurate penalty.We consider adopting metaheuristics to solve the transformed optimization problem because of their global optimization capabilities [31–35]. In this current study, Stochastic Fractal Search (SFS) algorithm is taken as the optimization solver [36]. Without losing focus, detailed principle of SFS algorithm is not included in this paper.Before ending this section, the overall framework of our proposed dynamic optimization solver is illustrated in Fig. 5.Simulations were conducted in a Matlab R2015a environment and executed on a 6-core Intel Xeon CPU with 64 GB RAM running at 6 × 3.06 GHz under Mac OS X 10.9 Mavericks. Critical parametric settings are listed in Table 1. As a decision variable, tfwas bounded to 15s ≤ tf≤ 40 s.We designed 10 rectangular obstacles in the environment, all of which were irregularly placed (details can be found in Appendix B). The articulated vehicle started fromx1(0)=−40,y1(0)=10andθ1(0)=θ2(0)=θ3(0)=0. In addition, it was set thatv(0)=0andϕ(0)=0. Finally, the vehicle should stop within a 6 m × 1.5 m box region centered at (0, 0). Comparative optimization results based on three distinct objectives are shown in Figs. 6–8and Table 2.Viewing the optimized trajectories, one may first notice that the spacial constraints (e.g., collision-avoidance and terminal inside-box condition) are completely satisfied (see Fig. 9). Besides that, the optimized profiles do not exceed the limits between two adjacent interpolation points. As a brief summary, the drawbacks shown in Fig. 4 are improved by our proposal.Viewing Table 2, one may notice that the optimization result based on the minimum maneuver times criterion is not as good as the results based on the other two criteria. This is intuitively reasonable because minimum maneuver times is not a sensitive index that reflects the subtle distinction between two solutions. For example, given that a trajectory with 5 maneuvers is largely distinct from one with 6 maneuvers (i.e., both solutions are not close to each other in the solution space), this optimization criterion cannot provide any guidance on the way to the fewer maneuvers, rendering it difficult to find a 5 maneuver solution from a currently available 6 maneuver solution. Conversely, traveling time and tractor path length are sensitive to the subtle differences in the trajectories. Optimization result based on min-time criterion is not as good as the result based on min-length criterion. The following fact may account for this phenomenon. In addition to being the minimization objective, tfis also a decision variable. Only successful optimization in that dimensional alone can yield the evolution. However, this usually would fail because all the state/control profiles are changed when tfis different, during which the entire trajectory turns to infeasible with ease. In contrast with the min-time criterion, optimization based on min-length criterion is easier, because every subtle change on every decision variable alone may contribute to the evolution.The aforementioned analyses are also reflected in the obtained trajectories. In Fig. 8(a), we notice that the vehicle wastes addition efforts even when it has been fully within the box region. This is because those “addition efforts” are completely not reflected in the optimization criterion. In contrast, the vehicle stops the moment it is inside the box region based on the min-length criterion (see Fig. 9(c)).With respect to the terminal inside-box condition, the terminal configuration of the vehicle is not a dispatched point. When the inside-box condition is satisfied, the tractor-trailer vehicle needs not to be parallel to the box barriers. Although practical, this type of terminal condition has seldom been considered in the previous studies.Before the end of this section, let us focus on the jackknifing issue. In our formulation, since the aforementioned small-angle constraints (i.e., both|θ1−θ2|and|θ2−θ3|should be small) do not exist, the angle errors can be large (see Fig. 10), which verifies that the small-angle constraint is not a necessary condition for the occurrence of jackknifing. In fact, jackknifing, as a special issue of articulated vehicle driving, is not particularly considered in our problem description. This is because (i) jackknifing is not a “disaster”: even when the articulated vehicle is stuck in jackknifing, it can recover; (ii) the dynamic optimization problem solvers can automatically evaluate and then discard those low-quality solutions that involve jackknifing.

@&#CONCLUSIONS@&#
We have investigated the trajectory optimization problems for articulated vehicles via a precise discretization model and a metaheuristic optimizer. By integrating the numerous constraints into the optimization criterion, our proposal accurately conducts trajectory optimization with a relatively small number of decision variables.Our future work will employ the proposed trajectory optimizer in conditions associated with the following: (i) additional trailers; (ii) additional complicated mechanical constraints, such as bounds on jerk and acceleration; (iii) irregular shaped obstacle in the environment. More importantly, further study is needed to address the following few challenges. First, the obtained trajectories are optimized rather than the optimal trajectories. Incorporating the optimality conditions in the optimization procedure could help obtain optimal trajectories. Second, the constraint violation penalty functions could be significantly improved by making the penalty weights adaptive.