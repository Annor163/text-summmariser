@&#MAIN-TITLE@&#
Approximating Promethee II’s net flow scores by piecewise linear value functions

@&#HIGHLIGHTS@&#
We extend the classical, discrete formulation of the Promethee II outranking method to the continuous case.We use this continuous formulation to define a piecewise linear approx- imation (PLA) function.The rankings produced by Promethee II and our PLA-model are compared on various randomly generated problem instances.Promethee II rankings are satisfyingly approximated by an average weighting model even for instances as small as 10 actions.

@&#KEYPHRASES@&#
Multiple criteria analysis,Outranking methods,Value functions,Linear time complexity approximation,

@&#ABSTRACT@&#
Promethee II is a prominent method for multi-criteria decision aid (MCDA) that builds a complete ranking on a set of potential actions by assigning each of them a so-called net flow score. However, to calculate these scores, each pair of actions has to be compared, causing the computational load to increase quadratically with the number of actions, eventually leading to prohibitive execution times for large decision problems. For some problems, however, a trade-off between the ranking’s accuracy and the required evaluation time may be acceptable. Therefore, we propose a piecewise linear model that approximates Promethee II’s net flow scores and reduces the computational complexity (with respect to the number of actions) from quadratic to linear at the cost of some wrongly ranked actions. Simulations on artificial problem instances allow us to quantify this time/quality trade-off and to provide probabilistic bounds on the problem size above which our model satisfyingly approximates Promethee II’s rankings. They show, for instance, that for decision problems of 10,000 actions evaluated on 7 criteria, the Pearson correlation coefficient between the original scores and our approximation is of at least 0.97. When put in balance with computation times that are more than 7000 times faster than for the Promethee II model, the proposed approximation model represents an interesting alternative for large problem instances.

@&#INTRODUCTION@&#
Methods for multi-criteria decision aid (MCDA) are grossly divided into three main families (Roy, 2005; Siskos, Wäscher, & Winkels, 1984): multi-attribute utility theory (MAUT) related methods, outranking-based methods, and interactive methods. Members of the first family can usually be formalised as an aggregation of unicriterion utility or value functions that provide a (binary) weak preference relation, resulting in a complete and transitive ranking over a set of potential actions (Dyer, 2005, chap. 7).Outranking methods, on the other hand, are based on the pairwise comparison of actions. A sub-set of these methods – of which electre (Figueira, Mousseau, & Roy, 2005) and Promethee II (Brans, 2005, chap. 5) are among the most prominent ones – also provide a complete and transitive ranking. However, despite the many applications reported in the literature (Behzadian, Kazemzadeh, Albadvi, & Aghdasi, 2010; Figueira et al., 2005), do outranking methods suffer from a certain lack of scalability. This issue arises particularly in situations where large data sets must be handled fast, e.g., for geographical information analysis (Marinoni, 2006) or preference querying (Pivert & Smits, 2012). It is due to the time complexity in O(n2) that comes from the pairwise action comparisons of n actions that are required to compute the outranking scores. The computation time thus increases, possibly reaching the limit of evaluation time that a decision maker, depending on her application, may consider as acceptable. For instance, the evaluation time granted for an on-line recommender system that progressively helps a user choose her next holiday destination will be very different from the time accepted in a strategic decision process about an organisation’s far reaching investment options. But then, what would be the maximum size of a decision problem that could be handled by a given outranking method and for a given decision problem? Although answering this question would, of course, be of great interest to the practitioner, this is not possible in a general way because of the many subjective and problem specific factors that intervene (time required to compute an evaluation, quality of implementation, time granted for the overall evaluation, etc.).Based on these considerations, we have chosen to address the above mentioned limitations of outranking methods from another point of view (Eppe & De Smet, 2012a), focusing our attention on the Promethee II model (Section 2). It is a widely used method (Behzadian et al., 2010) that is appealing for its simplicity, because the meaning of its parameters is easily understandable by the practitioner, and because of the existence of user friendly software that implement it (Hayez, De Smet, & Bonney, 2010). For a given set, Promethee II computes a score for each action, named the net flow score; the actions are then ranked from the highest (best) score down to the lowest. As will be shown, the overall score of each action can be formulated as a weighted sum of unicriterion scores. Our observations suggest that, for sufficiently large problem instances, these unicriterion action scores behave as MAUT-like value functions (see Fig. 1). As the computation of such value functions generally has a linear complexity O(n) with respect to the problem size, our aim is to investigate the possibility of approximating an action’s unicriterion Promethee II score by such a function and therewith to reduce the computation time, in particular for larger decision problems that involve several hundreds or thousands of alternatives.To illustrate our motivations, let us consider the “on-line holiday selection recommender system” again. Suppose a user wants to plan her next holidays on-line, considering several aspects: destinations, different departure and return dates; transportation types (plane, train, bus, car); accommodation types (hotel, youth hostel, bed & breakfast, camping); etc. The combinatorial nature of the problem makes the number of possible configurations rapidly increase, yielding a large set of alternatives that have to be ranked, considering several criteria (such as cost, environmental impact, and time spent on site). In order to provide the user with a reactive interface, the computation time of the ranking, at the beginning of the user session or each time some preference parameters are changed, should be kept as low as possible. If, in addition, we also consider the costs of the server infrastructure that would be necessary to deal with concurrent user requests, the requirement for minimised computational costs would be even stronger. Hence, provided the ranking obtained with an approximated method is “sufficiently close” (a notion that we will have to define properly) to the one we would have obtained with the original model, this would probably be an acceptable and even desirable trade-off.Practically, the model we present (Section 3) is based on a continuous extension of the classical, discrete Promethee II method. Although purely theoretical, this approach provides us with some interesting insights that will lead us to propose two models to approximate Promethee II’s action scores by MAUT-like value functions. The model only depends on each action’s own evaluations, rather than on pairwise comparisons. We have extensively tested both models through an experimental study (Section 4) that aims at validating our approach, as well as providing an estimation of the minimal score correlation that could be reached by each approximation model. Although they do not directly answer our initial question about a general “Promethee II applicability limit”, the promising results, presented for different problem sizes (Section 5), do provide quantitative information about: (1) how the scores may be approximated when the problem size becomes computationally too expensive; (2) what qualitative trade-off has to be taken into account when speeding up the evaluation process through a quadratic to linear complexity reduction; and (3) what run time reduction can be expected when using the approximation model.To conclude this introduction, we would like to stress that the potentially polemical statement, that Promethee II’s outranking method could be approximated by MAUT-like value functions even for relatively small decision problems, should not be taken by the reader as a judgement of value, leading to prefer one method over the other. Indeed, selecting the most adapted method to tackle a given decision problem remains a complex topic (Guitouni & Martel, 1998) that we do not address here.We start by providing a brief description of the Promethee II outranking method. For a more detailed introduction the interested reader may refer to Brans (2005, chap. 5).Let A={a1,…,an} be a set of n actions. Each action ai, with i∈I={1,…,n}, is characterised by means of m evaluations fh(ai), ∀h∈H={1,…,m}. In order for Promethee II to be applicable, the evaluation differences must be meaningful. All evaluations must therefore be defined on an interval scale. To compare any pair of actions (ai,aj)∈A2, a so-called preference function Phis introduced for each criterion h. It expresses the preference degree, on that criterion, of the first action over the second. In this paper, we consider the widely used “V-shaped with indifference” preference function,1The preference function is usually represented as a function of actions, Ph(ai,aj), rather than of their respective evaluations, Ph(fh(ai),fh(aj)). Although formally equivalent, the second form is notationally more cumbersome. We have nevertheless chosen to represent it in that way, as it is more consistent with the subsequent developments.1that uses indifference and preference thresholds, respectively denoted by qhand ph(Fig. 2):Phfh(ai),fh(aj)=0,ifΔfh(ai,aj)⩽qhΔfh(ai,aj)-qhph-qh,ifqh<Δfh(ai,aj)⩽ph1,ifph<Δfh(ai,aj)where Δfh(ai,aj)=fh(ai)−fh(aj). The pairwise action comparisons are aggregated for each action and provide the unicriterion net flow score ϕh(ai) on criterion h:(1)ϕh(ai)=1n-1∑j∈IΔPhfh(ai),fh(aj),where we defineΔPhfh(ai),fh(aj)=Phfh(ai),fh(aj)-Phfh(aj),fh(ai). Finally, the unicriterion scores are aggregated over all criteria through a weighted sum to yield that action’s net flow score:(2)ϕ(ai)=∑h∈Hwhϕh(ai),where w={w1,…,wm} is a vector of the criteria’s relative importance, with wh⩾0, ∀h∈H, and∑h∈Hwh=1.Without loss of generality, we will consider a maximisation problem and assume that evaluations lie in the interval fh(ai)∈[0,1], ∀(i,h)∈I×H.Our goal, in this paper, is to determine an approximation of an action’s net flow score that acts like a value function, only depending on its evaluations fh(ai), ∀h∈H, as well as on the preference parameters. It should not depend on any pairwise action comparison. With this aim in mind, and given the mathematical form of (2), we first focus on the unicriterion terms of the weighted sum. Indeed, if we manage to determine a satisfying approximation of each unicriterion score, the global approximation would immediately be determined by (2), boiling down to a simple weighted sum. As handling the discrete unicriterion net flow scores given by (1) is not easy and as we want to consider large action sets, we are quite naturally inclined to try to get a grip on our problem by extending the formulation above to the case of an infinite set of actions.The extension of Promethee II to an infinite set of actions has already been proposed as the Promethee IV method (Brans, Vincke, & Mareschal, 1986), but, to the best of our knowledge, was never further developed nor applied. Recently, a continuous extension of Promethee II has also been mentioned in the context of combinatorial multi-objective optimisation problems (where the number of considered solutions is high), but not actually used (De Smet, Mareschal, & Verly, 2009). Exploring the possible meanings of an infinite action set lays beyond the scope of this work; we will only consider it as a mathematical mean that could provide us some insight into the asymptotic behaviour of unicriterion net flow scores.Practically, and despite a minor abuse of notation, we choose to replace the action index i with a real valued index x∈[0,1] to make the difference with the discrete case notationally clearer. Integrating the simplifying hypothesis that the actions are uniformly distributed over the evaluation range [0,1], the unicriterion net flow scoreϕh∞(ax)for the continuous case can be written as follows:(3)ϕh∞ax=∫01ΔPhfh(ax),fh(aξ)dξOur aim is to build an approximation ψh(y) of the unicriterion net flow score that should yield, for a finite set of actions,ϕh(ai)≈ψhfh(ai): ∀(i,h)∈I×H. Therefore, we reformulate the continuous unicriterion net flow score as a function of an evaluation y, rather than of an action. Eq. (3) thus becomes, ∀y∈[0,1]:(4)ψhy=∫01ΔPhy,ζdζIntroducing the following help variables:yq-=max{0;y-qh}yp-=max{0;y-ph}yq+=min{1;y+qh}yp+=min{1;y+ph}the integration range of (4) can be “sliced” into five segments, denoted by,…,(Fig. 3).Once integrated, we obtain the following formulation:(5)The unicriterion net flow ψh(y) is composed of three terms:,, and, of linearly increasing values, separated by two intervals:and, with quadratic terms. The extent and contribution of each of them to the unicriterion net flow depends on both thresholds qhand ph, and also on the evaluation y. In the general case, five different ranges can again be distinguished in ψh’s domain (Fig. 4 and Table 1):–. Some characteristics of ψh(y)’s formulation are worth noting:•Inside segmentsand, the slope is constant:dψhdy=1;Inside segmentthe slope is constant too:dψhdy=2;The extreme values of the function are: ψh(0)=λh−1 and ψh(1)=1−λh, where we defineλh=12(qh+ph). Thus, the value range of the function is 2(1−λh);There is a central symmetry with respect to the coordinate(12,0).Note that this general interpretation yields for the case whereph<12. For higher values of ph, the shape changes slightly, but can be determined analytically in a similar way. Due to its mathematical formulation, we rename the model as the piecewise polynomial approximation (PPA) model, and denote so in the following:ψhPPA(y).Depending on the values of qhand ph, some ranges may be reduced to an empty range. For instance, if qh=ph, there are no quadratic terms andψhPPA(y)reduces to a piecewise linear function. This form is particularly appealing for its simplicity and, as a further simplification, we approximate (5) by a piecewise linear functionψhPLA(y)composed of three segments and defined by the single threshold-related parameterλh=12(qh+ph)that has already been introduced above:(6)ψhPLA(y)=y+λh-1ify<λh2y-1ifλh⩽y<1-λhy-λhify>1-λhThis particular piecewise linear approximation (PLA) model is built in order to have the same four functional features as those previously noted for ψh(y). As an additional feature, the linear segments of our PLA model intersect at symmetric coordinates (λh,2λh−1) and (1−λh,1−2λh).Let us stress again that, in this formulation, we only use one single “threshold” parameter, λh, that is the mean value of qhand ph. This remarkable property questions (at least for bigger problem instances) the usefulness of requiring two parameters to determine a preference function. It also suggests that the effects of indifference and preference parameters on an action’s score do compensate in some way. This could shed a new light on the difficulty of eliciting these parameters (Eppe, De Smet, & Stützle, 2011): experiments that would only try to elicit the relative weight and parameter λhfor each criterion could be run to verify this conjecture.Finally, having defined value functions that approximate, for each criterion, the unicriterion net flow score of an action, we aggregate them through a weighted sum, just like for the original method. Returning to the finite set of actions A, we obtain an approximation of each action’s net flow score, that only depends on that same action’s evaluations:(7)ϕPLA(ai)=∑h=1mwhψhPLAfh(ai).Appendix A provides a numerical example of how the approximated net flow scores are computed in practice.We are now going to verify how the scores computed with our approximation models PPA and PLA compare with the classical Promethee II method.From an artificial continuous formulation, we have deduced a piecewise linear approximation (PLA) that we hope to be applicable to finite action sets. Therefore, we put our model to the test, comparing the scores it generates with the reference net flow scores produced by the Promethee II method. Beyond the mere validation of our model, our main aim is to provide an empirical bound on the instance size, above which Promethee II’s net flow scores are reasonably well approximated by our ex ante parametrized PLA-function.The experimental approach proposed in this paper consists (Algorithm 1) in generating a random instance of n actions over m criteria, as well as preference parameters (weights and thresholds) for each criterion. Therefrom, the net flow scores for the generated set of actions are computed following respectively Promethee II’s original model (P2) and our piecewise linear model (PLA).Algorithm 1Standard experimental process that outputs a result vector ρ of Ntrials runsInput: n, m, Ntrialsfori=1…NtrialsdoA=randEvals(n,m)(w,q,p)=randPrefParams(m)ϕ=computeP2Scores(A,w,q,p)ψPLA=computePLAScores(A,w,q,p)ρi=computePearsonCorrelation(ϕ,ψPLA)The scores provided by each approach are then compared to1.validate the approach by showing that for reasonably sized instances, our PLA-model satisfyingly approximates Promethee II’s net flow scores;produce a table that provides an experimental numerical bound for the instance size, as from which the approximation quality reaches a required level.To make things more concrete, we now provide some practical details about the experimental setup:Quality measure Although Promethee II produces a ranking of actions, we focus on the approximation quality of the net flow scores, that are cardinal values. Therefore, we choose to use the standard Pearson correlation ρ (Walpole, Myers, Myers, & Ye, 2012) that is used to measure the strength of linear dependence between two variables.Randomly generated instances We generate instances of n actions, evaluated on m criteria. For each generated instance, one type of distribution (Fig. 5) is randomly associated to each criterion.2The attribution of a distribution function is independent and equiprobable for each criterion. Hence, the same distribution may be related to several criteria of the same instance.2The evaluations on each criterion are then randomly generated for all actions following the corresponding, assigned distribution. By doing so, we aim at producing results that are not (too strongly) biased by the features of one specific distribution. Note that the continuous model expressed by (3) assumes a uniform distribution. We will have to verify that mixed distributions do not affect the approximation’s quality too much.Regression models as reference approximations We have chosen two ex post regression models: a third order polynomial regression model (P3R) and a linear one (LiR), that will serve as benchmarks against which we will compare the quality of our ex ante models. Indeed, these comparisons will allow us to make a distinction between the validity of the chosen models (piecewise polynomial or piecewise linear) and the validity of the approximations of the action scores (which depend on the parameters of the models). On the one hand, if the ex post regression models yield good results, this would tend to validate the chosen models. If, on the other hand, the results of the approximation models PLA and/or PPA come close to the regression models, this would show that the parameter values chosen for these models are good.Before delving into the empirical exploration of our model, we start this section by providing a first analysis of the statement (Section 3) that P2-scores may be characterised with only one threshold-like parameter λhper criterion, although the original model uses two parameters. We then proceed with several qualitative and quantitative investigations to validate the PLA-model. Finally, we provide the results that we initially aimed for and that contribute to answering our question: “As from what instance size is it possible to satisfyingly approximate an action’s net flow score by our piecewise linear model?”The piecewise linear approximation proposed in Section 3 only depends on one parameter,λh=12(qh+ph). As already noted, this could suggest some sort of compensating effect between indifference and preference thresholds qhand phin the Promethee II preference model. To verify this, we observe, on the classical P2 formulation, how the ranking of an action set A changes when the threshold values are altered (the weights remaining unchanged). Practically, we compute the net flow scores when setting the threshold values qh=ph=λhand consider them as the reference that has to be compared with net flow scores induced by other pairs of threshold values (q′h,p′h). We quantify this comparison by means of the standard Pearson’s correlation coefficient ρ. In particular, we present iso-ρ’s that result for the case where the reference parameter value is λh=0.25 (Fig. 6). At each run: (1) a random set of actions is generated as described in Section 4, as well as a random weight vector and (2) the correlation ρ between scores that are respectively induced by the reference and the “variable” threshold parameters (p′h∈[0,0.5] and q′h∈[0,p′h]) is computed. We finally compute the 5% quantile of the correlation ρ’s distribution for a series of 100 runs, i.e., an approximation of the minimum concordance ratio reached with a probability of 95%.The results (Fig. 6) show, for all tested instance sizes, a symmetry with respect to the bisecting line qh+ph=2λh. This tends to confirm the compensating role of qhand ph: the influence of their average value λhon Promethee II’s ranking is higher than their individual values. As the instance size increases, the isolines become more and more parallel to this bisecting line, thereby confirming our impression. On the other hand, however, the similarity of induced rankings with the reference ranking Rλdecreases when the threshold pair tends to (qh,ph)→(0,0.5). It is obviously the highest, i.e., τk=1, for qh=ph=λ. The latter observation is particularly visible on smaller instances. The underlying reasons for this decrease should be investigated in a future work.In the sequel of this section we provide a selection of experimental results that highlight the observations made on a larger set of configurations (Table 2). Results corresponding to configurations that are not explicitly presented here show very similar behaviour and confirm our observations.As a first validation, we visually compare both plots of Fig. 7. It shows that, although the experimental results displayed in (b) are based on a relatively small instance of n=20 randomly generated evaluations (with a uniform distribution D1), these results are close to the “theoretical” continuous results (a). This suggests that general features deduced from the theoretical model could also satisfyingly yield for practical instances. In a further step, we will investigate how the differences between the model and the practical results can be quantified.As a further validation of our approximation models, we compare their quality, measured by the standard Pearson correlation coefficient ρ, with two other models: (1) ex post linear regression of P2-scores (LiR) and (2) ex post third degree polynomial regression of P2-scores (P3R). The comparison (Fig. 8) shows that:1.The ex postP3R approximation model significantly outperforms all other models (Appendix B). However, on an absolute basis, the ex ante models still give good results, yielding Pearson correlation coefficients higher than 0.97.Both PPA and PLA models give very comparable results (Appendix B). Since PLA has a simpler formulation, we will mainly report results with respect to this model in the following.The use of “mixed-distribution” (MX) random problem instances, i.e., instances where the distribution for each criterion is uniform randomly selected from D1,…,D5, provides worse results than “single-distribution” random instance (Fig. 9). This suggests that results for such MX distribution instances could be taken as a “pessimistic” point of view and used as a lower bound for most problem instances. A more detailed investigation of the distribution’s influence on the results could be the topic of further investigations.Fig. 10shows, for different instance sizes, the complement to 1 of the cumulated density function (CDF) of ρ, for a series of 1000 runs. Concretely, the plots give the approximated probability of reaching at least a given similarity, measured by the standard Pearson correlation ρ, shown on the abscissa axis. In the following, we will often refer to this ratio as a measure of quality: the higher ρ, the better the approximation of Promethee II’s net flow scores by our piecewise linear model. Several observations can be done on the basis of the plots on Fig. 10:1.As could be expected, a higher number of actions increases the approximation’s quality.The quality curve converges to an “extreme curve” (approximated by the plots for n=10,000), which indicates that there exists an upper bound for the approximation quality. In other words, whatever the instance size, it will not, in general, be possible for our PLA-model to produce the same scores, and consequently to obtain the same ranking as Promethee II.Taking the opposite point of view, the results also show that a satisfying approximation (depending on a chosen quality level) can be reached, even for relatively small instance sizes that are frequently encountered in actual MCDA problems. Example: For instances of n=100 actions and m=7 criteria, a correlation of ρ=0.95 can be reached with a probability of almost 99%. More numerical results are presented in Table 3.Fig. 11shows the same results from another, complementary perspective. For a given probability P that measures some sort of required accuracy level of the approximation quality, the plots represent the minimum quality ρ that is reached as a function of the number n of actions.The question that naturally arises when using an approximation model, is to locate, if possible, regions where its performance is relatively better or worse. For our concern, we search for the actions that are not ranked appropriately with respect to the original P2-ranking. The lower plot of Fig. 12represents the distribution of wrongly ranked actions with respect to the original rank. The result can be quantitatively explained by the shape of the plot that represents the average net flow score (over 1000 runs) for each rank position (Fig. 12, upper plot). The results show that the approximation should be even more satisfying than the standard Pearson correlation indicates, since the actions ranked among the first or the last few are often considered with more attention. We could think of an additional metric that takes this into consideration, by taking rank concordance of well and badly ranked actions more into consideration as the middle-ranked ones. This could, for instance be done by adapting the generalised Kendall’s rank correlation τ (Kumar & Vassilvitskii, 2010) to our needs.The theoretical time complexity for computing Promethee II’s net flow scores is O(mn2). In the introduction, we have motivated our “value function” model to approximate the net flow scores by the quadratically increasing computation time. In this section, we report run times for the ex ante piecewise linear (PLA) and polynomial (PPA) approximations; we compare them with the time required to compute the Promethee II scores (P2). The models have been implemented in the Octave mathematical programming language and tests have been run on a single 2.9gigahertz Intel Core i7 processor. As the results depend on the implementation, the aim of the reported figures is to compare the approximation models with Promethee II, as well as to provide a rough indication about the time required for computations. We observe that (Table 4) durations are of the same magnitude only for the smallest instances (n=10). For increasingly large instances, the computational cost for P2 increases quadratically: for instance, to compute the net flows for an instance of size (n=10,000, m=7), P2 takes on average about half a minute, i.e., more than 7000 times longer than the PLA model. For this particular instance size, the corresponding minimal average standard Pearson correlation is ρ=0.97 (taken from the results that have been used to produce Table 3), or, to put it in other words: the PLA model will generate the ranking that we would have obtained with Promethee II with a correlation ρ⩾0.97, but 7000 times faster.

@&#CONCLUSIONS@&#
