@&#MAIN-TITLE@&#
Decision support for unrelated parallel machine scheduling with discrete controllable processing times

@&#HIGHLIGHTS@&#
A scheduling problem involving discrete controllable processing times is considered.The objectives are to minimize some scheduling criteria.We develop polynomial time algorithms for the considered problems.We further consider the NP-hard problem of the makespan case.An integer programming and a heuristic are presented to solve the NP-hard problem.

@&#KEYPHRASES@&#
Scheduling,Unrelated parallel-machine,Discrete controllable processing times,

@&#ABSTRACT@&#
In a manufacturing or service system, the actual processing time of a job can be controlled by the amount of an indivisible resource allocated, such as workers or auxiliary facilities. In this paper, we consider unrelated parallel-machine scheduling problems with discrete controllable processing times. The processing time of a job is discretely controllable by the allocation of indivisible resources. The planner must make decisions on whether or how to allocate resources to jobs during the scheduling horizon to optimize the performance measures. The objective is to minimize the total cost including the cost measured by a standard criterion and the total processing cost. We first consider three scheduling criterions: the total completion time, the total machine load, and the total earliness and tardiness penalties. If the number of machines and the number of possible processing times are fixed, we develop polynomial time algorithms for the considered problems. We then consider the minimization problem of the makespan cost plus the total processing cost and present an integer programming method and a heuristic method to solve the studied problem.For the majority of traditional scheduling problems in the literature, the processing times of jobs are assumed to be fixed externally and known in advance over the scheduling horizon. In many realistic systems, however, the job processing times may be variable due to deterioration and/or learning phenomena [27]. Machine scheduling problems with deteriorating jobs and/or learning effects have been paid more attention in recent years; they include [2,12,16,17,19,21,22,29,38,39,42], among others. On the other hand, the job processing times may also be controllable dependent on some additional resources, such as additional energy, fuel, catalysts, budget, or worker, to the job operations. In this situation, both the cost associated with the job schedule and the cost of the resource allocated should be taken into consideration. Therefore, job scheduling and resource allocation should be coordinated carefully and optimized jointly in order to achieve an overall cost-effective schedule [5].There are two models of scheduling with resource allocations considered in the literature, namely the continuous model and the discrete model [32]. In the continuous resource allocation model, the actual processing time of a job can be controlled by the amount of a divisible resource allocated (e.g., electricity and fuel) and hence can vary continuously in a specific interval. For example, in a manufacturing system the processing time of a job is dependent on the machine running speed which can be controlled to be any number in the interval corresponding to the allocation of the amount of electricity. Van Wassenhove and Baker [33] and Vickson [34,35] were among the pioneers who brought the concept of continuous resource allocation into the field of scheduling. Up to now, a multitude of scheduling problems involving continuous resource allocations has been extensively studied from a variety of perspectives. Nowicki and Zdrzalka [23] studied a two-machine flow shop scheduling problem with controllable job processing times to minimize the total processing cost plus the maximum completion time cost. Panwalkar and Rajagopalan [26] considered the common due-date assignment and single-machine scheduling problem in which the objective function is the sum of penalties based on earliness, tardiness and processing time compressions. Alidaee and Ahmadian [1] extended the problem studied by Panwalkar and Rajagopalan [26] to the parallel-machine scheduling case. Cheng et al. [4] investigated unrelated parallel-machine scheduling problems where the job processing times can be compressed by a convex function. Comprehensive surveys on this line of scheduling research with continuous resource allocations can be found in Nowicki and Zdrzalka [24], Chudzik et al. [7], and Shabtay and Steiner [32]. Moreover, some recent papers introduced new models or approaches to scheduling problems with continuous resource allocations. Li et al. [20] investigated a scheduling problem with controllable processing times to minimize the makespan on an identical parallel-machine setting. The critical machine and non-critical machine were considered. They first proposed some theoretical results. And then a simulated annealing algorithm was developed to obtain the near-optimal solutions. Rudek and Rudek [30] considered scheduling problems with the aging effect and additional resource allocation. The following minimization criteria were analyzed: the makespan, the maximum lateness under given resource constraints and the total resource consumption under given constraints on the maximum completion time and the maximum lateness. Rudek and Rudek [31] further studied flowshop scheduling problems with the aging effect and additional resource allocation. The objective was to minimize the makespan. Yin et al. [40] considered single-machine due-window assignment and scheduling with a common flow allowance and controllable processing times. Oron [25] studied single-machine scheduling problems with general linear deterioration and convex resource functions. Yin et al. [41] considered the problem of single-machine batch delivery scheduling with an assignable common due-date and controllable processing times. Yang et al. [36] considered unrelated parallel-machine scheduling with simultaneous considerations of controllable processing times and rate-modifying activities.In the discrete resource allocation model, the allocated resource is indivisible (e.g., manpower or auxiliary facilities) and hence the actual processing time of a job can only have finitely many possible lengths. For example, in a manufacturing system the processing time of a job is dependent on the allocation of the number of workers, the job processing time can only have finitely many possibilities. Machine scheduling problems with discrete resource allocations have received relatively little attention in the literature. Daniels and Mazzola [10] probably were the first researchers to introduce the discrete resource allocation of processing time in scheduling. They investigated a flowshop scheduling problem where the job processing times are discretely controllable through the allocation of a limited amount of resource. The goal was to minimize the makespan. They gave an optimal algorithm and a heuristic algorithm for solving the problem. Daniels et al. [8,9] studied parallel-machine flexible resource scheduling problems where the processing time of each job is a function of the amount of allocated resource. Both studies were to schedule the jobs on each machine and simultaneously determine the allocation of resource to jobs such that the makespan is minimized. They introduced heuristic algorithms for solving the problems under consideration. Chen et al. [6] considered the discrete resource allocation model in which the job processing times are discretely controllable. They studied a class of single-machine scheduling problems with the objective of minimizing the sum of the total processing cost and the cost measured by a standard criterion. They showed that most scheduling problems with job processing times controlled by resource allocations are NP-hard. Chen [5] explored parallel-machine scheduling problems involving both job processing and resource allocation. The continuous model and the discrete model of resource allocations were examined, respectively. The objective was to minimize the total cost including the cost of a performance measure and the cost of allocated resource. He examined two performance measures of the total weighted completion time and the weighted number of tardy jobs, respectively. He first gave a set partitioning type formulation for the problems and then proposed branch-and-bound algorithms for finding the optimal solutions of the problems. Recently, Grigoriev et al. [15] considered unrelated parallel-machine scheduling problems where the processing time of any job is dependent on the usage of a discrete renewable resource. The objective was to minimize the makespan. They used linear programming techniques to allocate resources to jobs and to assign jobs to machines. Grigoriev and Uetz [14] considered a scheduling problem where n jobs need to be processed on a set of m machines and the processing time of any job is dependent on the usage of a discrete renewable resource. The goal was to find a resource allocation and a corresponding feasible schedule to minimize the makespan. They used a mathematical programming formulation that constitutes a relaxation of the problem. For research results on scheduling with discrete resource allocations, the reader may also refer to the recent survey by Shabtay and Steiner [32].In this paper, we consider scheduling problems with discrete resource allocations on an unrelated parallel-machine setting where the job processing times are discretely controllable. The planner must make decisions on whether or how to allocate resources to jobs during the scheduling horizon to optimize the performance measures. The objective is to minimize the sum of the total processing cost and the cost measured by a standard criterion. We examine four scheduling criterions: the total completion time, the total machine load, the sum of earliness and tardiness penalties, and the makespan. The motivation for this study stems from an assembly process, a service system, or a project. The production rate (completion time) may improve (reduce) due to the additional of workers, auxiliary facilities, or budgets. As a result, the actual processing time of a job can be controlled by the amount of workers, auxiliary facilities, or budgets.The remainder of this paper is organized as follows. We formulate the problem under study in Section 2. If the number of machines and the number of possible processing times are fixed, we develop polynomial time algorithms for solving the sum of the total processing cost and the total completion time, the total machine load, and the sum of earliness and tardiness penalties minimization problems in Sections 3–5, respectively. In Section 6, we investigate the minimization problem of the makespan cost plus the total processing cost. We conclude the paper and suggest some topics for future research in the last section.To facilitate the problem formulation, we introduce the following notations, which are used throughout the paper. Additional notations will be introduced when needed.mthe number of machines;the machine i, i=1, 2, …, m;the number of jobs;the number of jobs assigned to machine Mi, i=1, 2, …, m (n=∑i=1mni);the hth possible processing time of job Jjon machine Mi, i=1, 2, …, m, j=1, 2, …, n and h=1, 2, …, k (k≥1 and given);the processing cost associated with each possible processing time aijh;the actual processing time of job Jjon machine Mi, i=1, 2, …, m and j=1, 2, …, n;Iijh(pij)=1 if pij=aijhand Iijh(pij)=0 otherwise, i=1, 2, …, m, j=1, 2, …, n and h=1, 2, …, k;the completion time of job Jjon machine Mi, i=1, 2, …, m and j=1, 2, ..., n;the total completion time;the makespan of machine Mi, i=1, 2, …, m;the total machine load;the makespan of all the machines (Cmax=maxi=1,…,m{Cmaxi});TPC=∑i=1m∑j=1n∑h=1kcijhIijh(pij), the total processing cost in a given schedule;the position of a common due-date for the jobs processed on machine Mi, i=1, 2, …, m;a common due-date for the jobs processed on machine Mi, i=1, 2, …, m;a common due-date for all the jobs;the earliness of job Jjon machine Mi, i=1, 2, …, m and j=1, 2, …, n, i.e., Eij=max{0, di−Cij};the tardiness of job Jjon machine Mi, i=1, 2, ..., m and j=1, 2, ..., n, i.e., Tij=max{0, Cij−di};unit cost earliness;unit cost tardiness;the set of jobs assigned to Mi, i=1, 2, …, m;the set of all feasible schedules;the set of the common due-dates for the machines.The problem under study can be formally described as follows: We are given a set of independent jobs J={J1, J2, …, Jn} to be processed on m (m<n) unrelated parallel machines (Mi, i=1, 2, …, m). All the jobs are simultaneously available at time zero. A machine can handle only one job at a time, and job preemption is not allowed. It is allowed to delay the start time of the first job on a machine, while idle time between consecutive jobs is not allowed on any machine. Each job Jjon machine Mihas k (k≥1 and given) possible processing times: aij1,aij2,…,aijkwith aij1>aij2>⋯>aijk, for i=1, 2, …, m and j=1, 2, …, n, where aij1 is called the normal processing time and aijkthe minimum possible processing time of job Jjon machine Mi. A processing cost cijhis associated with each possible processing time aijh, for i=1, 2, …, m, j=1, 2, …, n, and h=1, 2, …, k. We assume that 0≤cij1<cij2<⋯<cijk. This assumption is reasonable because more resources are added in the system, higher costs are needed to achieve a shorter processing time. Let pijbe the actual processing time of job Jjon machine Mi. Then pijmust be one of the possible processing times associated with job Jjon machine Mi, i.e., pij∈{aij1, aij2, …, aijk}. A processing cost cijhis incurred if the actual processing time of job Jjon machine Miis aijh.In this paper we aim to find the optimal resource allocations and the optimal schedule to minimize the following objective functions, respectively:(i)The problem of the total completion time cost plus the total processing cost.The problem of the total machine load cost plus the total processing cost.The problem of the total earliness and tardiness costs plus the total processing cost.The problem of the makespan cost plus the total processing cost.Using the three-field notation introduced by Graham et al. [13], the problems under consideration can be represented as follows, respectively: Rm/dm/∑Cij+TPC,Rm/dm/∑Cmaxi+TPC, Rm/di=d, dm/∑(αEij+βTij)+TPC, and Rm/dm/Cmax+TPC, where dm in the second field denotes the discrete model of resource allocation and di=d represents that all the jobs have a common due-date.In this section we consider the Rm/dm/∑Cij+TPC problem. We show that the Rm/dm/∑Cij+TPC problem can be solved in O(mkn2+mn3) time.Theorem 1The Rm/dm/∑Cij+TPC problem can be optimally solved in O(mkn2+mn3) time.If job Jjis scheduled in the position r on machine Mi, then the contribution made by job Jjto the objective function is(1)fijr(pij)=(ni−r+1)pij+∑h=1kcijhIijh(pij)where the first term is the contribution to the total completion time and the second term is that to the total processing cost. To minimize fijr(pij), one should set the actual processing time of job Jjon machine Mito be aijh(thereby the processing cost cijh) for some 1≤h≤k such thatfijr(pij)=vijr, where(2)vijr=min{fijr(pij)|pij∈{aij1,aij2,…,aijk}}=minl∈{1,2,…,k}{(ni−r+1)aijl+cijl}In addition, we may assume that each machine has n positions, and each position contains at most one job. Note that if job Jjis processed on machine Miand there are s−1 jobs following job Jjon this machine Mi(i.e., job Jjis scheduled as the sth to last job on machine Mi) then job Jjcontributes minl∈{1,2,...,k}{saijl+cijl} to the objective function (see Fig. 1). We define yijs=1 if job Jjis scheduled in the sth position to the last job processed on machine Miand yijs=0 otherwise. Then, the Rm/dm/∑Cij+TPC problem can be expressed as follows:(3)Minimize∑i=1m∑j=1n∑s=1nuijsyijs(4)subjectto∑i=1m∑s=1nyijs=1,j=1,2,…,n(5)∑j=1nyijs≤1,i=1,2,…,m,s=1,2,…,n(6)∑j=1nyij1≥∑j=1nyij2≥⋯≥∑j=1nyijn,i=1,2,…,m(7)yijs∈{0,1},i=1,2,…,m,j=1,2,…,n,s=1,2,…,nwhere(8)uijs=minl∈{1,2,…,k}{saijl+cijl},i=1,2,…,m,j=1,2,…,nands=1,2,…,nConstraint (4) ensures that each job is scheduled exactly once. Constraint (5) ensures that each position on each machine is taken by at most one job. Constraint (6) ensures that on every machine the unassigned positions must precede all the assigned positions, so that yijs=1 if and only if job Jjis indeed in the sth position to the last job on machine Mi. From (8) and uijr=minl∈{1,2,…,k}{raijl+cijl}≤minl∈{1,2,…,k}{raijl+cijl}+minl∈{1,2,…,k}{aijl}≤minl∈{1,2,…,k}{(r+1)aijl+cijl}=uij(r+1), r=1, 2, …, n−1, we obtain that(9)uij1=minl∈{1,2,…,k}{aijl+cijl}≤uij2=minl∈{1,2,…,k}{2aijl+cijl}≤⋯≤uijn=minl∈{1,2,…,k}{naijl+cijl}As a result, we can drop constraint (6) from the model without affecting the optimal solution of the problem. Hence, the Rm/dm/∑Cij+TPC problem can be re-formulated as the following assignment problem (P1), which can be solved in O(mn3) time [3].(P1)Minimize∑i=1m∑j=1n∑s=1nuijsyijssubjectto∑i=1m∑s=1nyijs=1,j=1,2,…,n∑j=1nyijs≤1,i=1,2,…,m,s=1,2,…,nyijs∈0,1,i=1,2,…,m,j=1,2,…,n,s=1,2,…,nand the time complexity of calculation of uijsis O(mkn2). This completes the proof of Theorem 1.□From the above analysis, we propose the following algorithm to solve the Rm/dm/∑Cij+TPC problem.Algorithm 1Step 1. Calculate uijsby using (8), for i=1, 2, …, m, j=1, 2, …, n, and s=1, 2, …, n.Step 2. Solve the assignment problem (P1) to determine the optimal job sequence and the corresponding value of the objective.Step 3.Determine the actual processing times and the corresponding processing costs.Obviously, the time complexity of Step 1 is O(mkn2) and Step 2 is O(mn3) time; Step 3 can be performed in linear time. Thus, the overall computational complexity of the Rm/dm/∑Cij+TPC problem is O(mkn2+mn3).The following example illustrates applying Algorithm 1 to find the optimal solution of a five-job instance.Example 1There are five jobs to be processed on two unrelated parallel machines. The set of job parameters is presented in Table 1.First, we calculate uijsby using (8), for i=1, 2, j=1, 2, …, 5, and s=1, 2, …, 5. We then solve the assignment problem (P1) using LINGO version 11.0 on a personal computer with a 3.40GHz Intel Core™ i7-2600 CPU and 8GB RAM under Windows 7. The optimal job sequences on machines M1 and M2 are M1=(J1, J2, J5) and M2=(J4, J3), respectively. The optimal objective value is 113. The actual processing times of jobs are p11=a113=5, p12=a123=6, p15=a152=12, p24=a243=11, and p23=a231=14, respectively, and the corresponding processing costs are c113=6, c123=7, c152=8, c243=11, and c231=6, respectively.The total machine load is the sum of the makespan on each machine. It is a relevant performance measure for a scheduling problem with controllable processing times. In this section we show that theRm/dm/∑Cmaxi+TPCproblem can be solved in O(mkn) time.Theorem 2TheRm/dm/∑Cmaxi+TPCproblem can be optimally solved in O(mkn) time.If job Jjis scheduled in the position r on machine Mi, then the contribution made by job Jjto the objective function is(10)wij(pij)=pij+∑h=1kcijhIijh(pij),where the first term is the contribution to the total machine load and the second term is that to the total processing cost. Clearly, the value ofwij(pij)is independent of the scheduled position of job Jjon machine Mi. Thus, to minimizewij(pij), we should set the actual processing time of job Jjto beai*jh*(thereby the processing costci*jh*) where i* and h* are the indices such thatai∗jh∗+ci∗jh∗=min{aijh+cijh|i=1,2,…,m,h=1,2,…,k}(see Fig. 2). Therefore, theRm/dm/∑Cmaxi+TPCproblem can be solved in O(mkn) time by assigning job Jjin an arbitrary order onMi∗and the h*th possible processing time. This completes the proof of Theorem 2.□Algorithm 2 provides a method to obtain the optimal solution for theRm/dm/∑Cmaxi+TPCproblem.Algorithm 2Step 1. Set the actual processing time of job Jjto beai*jh*(thereby the processing costci*jh*) such thatai∗jh∗+ci∗jh∗=min{aijh+cijh|i=1,2,…,m,h=1,2,…,k}.Step 2. Assign job Jjin an arbitrary order onMi∗.Step 3.Determine the corresponding value of the objective.Since the time complexity of Step 1 is O(mkn), the computational complexity of Algorithm 2 is O(mkn).Example 2 illustrates applying Algorithm 2 to find the optimal solution of a five-job instance.Example 2There are five jobs to be processed on two unrelated parallel machines. The same data in Example 1 is used.Table 2shows aijh+cijhfor all the jobs. The optimal solutionai∗jh∗+ci∗jh∗is marked by underline in Table 2. We see that jobs J1, J2 and J5 are assigned to be processed on machine M1 in an arbitrary order and jobs J3 and J4 are assigned to be processed on machine M2 in an arbitrary order. The optimal objective value is 87. The actual processing times of jobs are p11=a112=6, p12=a123=6, p15=a152=12, p24=a243=11, and p23=a231=14, respectively, and the corresponding processing costs are c112=4, c123=7, c152=8, c231=6, and c243=11, respectively.□In this section we show that the Rm/di=d, dm/∑(αEij+βTij)+TPC problem can also be formulated as an assignment problem, in a way similar to that in Section 3 of the paper. We denote the subscript [ij] as a job scheduled in the jth position on machine Mi. We assume that all the jobs have a common due-date d. For the special case when there is only one machine (i.e., m=1), the following lemmas hold (here, we ignore the index of the machine for the single-machine case).Lemma 1Brucker [3]In an optimal schedule S, there exists no idle time between consecutive jobs on the machine.For any specified schedule S, an optimal common due-date d coincides with the completion time of some job.For any specified schedule S, there exists an optimal common due-date equal to C[z], wherez=nβ/α+β, andxdenotes the smallest integer greater than or equal to x.In what follows, we show that for any specified schedule, if the start time of the schedule is delay (i.e., the schedule does not start at time zero), the value of the objective function remains the same. Recall that we allow the start time of the first job to be delay on a machine.Lemma 4Yang et al. [37]For any specified schedule S, if the start time of the schedule S is delay, the value of the objective function remains the same.We now focus our attention on the unrelated parallel-machine. First, we show that for any specified schedule an optimal common due-date d coincides with the completion time of some job on each of the machines.Lemma 5Lee et al. [18]For any specified schedule S, an optimal common due-date d coincides with the completion time of some job on each of the machines.In the following, we show that the Rm/di=d, dm/∑(αEij+βTij)+TPC problem can be solved in O(mkn2+mn3) time.Theorem 3The Rm/di=d, dm/∑(αEij+βTij)+TPC problem can be optimally solved in O(mkn2+mn3) time.By Lemma 3, we know that there exists an optimal schedule for the problem under consideration in which at mostz=nβ/α+βjobs on a machine are early or on time and n-z jobs on that machine are tardy. Therefore, we may assume that each machine has n positions, and each position contains at most one job with the jobs at leftmost z positions being all early or on time and the jobs at the rightmost n–z positions being all tardy. Thus, if job Jjis scheduled in the position r on machine Mi, then the contribution made by job Jjto the objective function is(11)fijr(pij)=(r−1)αpij+∑h=1kcijhIijh(pij),ifr≤z(n−r+1)βpij+∑h=1kcijhIijh(pij),ifr>zSimilarly, to minimize fijr(pij), one should set the actual processing time of job Jjon machine Mito be aijh(thereby the processing cost cijh) for some 1≤h≤k such thatfijr(pij)=vijr(see Fig. 3), where(12)vijr=minl∈{1,2,…,k}{(r−1)αaijl+cijl},ifr≤zminl∈{1,2,…,k}{(n−r+1)βaijl+cijl},ifr>zWe define xijr=1 if job Jjis scheduled in the rth position on machine Miand xijr=0 otherwise. Then the Rm/di=d, dm/∑(αEij+βTij)+TPC problem can be formulated as follows:(13)Minimize∑i=1m∑j=1n∑r=1nvijrxijr(14)subjectto∑i=1m∑r=1nxijr=1,j=1,2,…,n(15)∑j=1nxijr≤1,i=1,2,…,m,r=1,2,…,n(16)∑j=1nxij1≥∑j=1nxij2≥⋯≥∑j=1nxijz,i=1,2,…,m(17)∑j=1nxij(z+1)≤∑j=1nxij(z+2)≤⋯≤∑j=1nxijn,i=1,2,…,m(18)xijr∈{0,1},i=1,2,…,m,j=1,2,…,n,r=1,2,…,nConstraint (14) ensures that each job is scheduled exactly once. Constraint (15) ensures that each position on each machine is taken by at most one job. Constraints (16) and (17) ensure that on every machine the unassigned positions must precede all the assigned positions before the common due-date and the assigned positions must precede all the unassigned positions after the common due-date, respectively, so that xijr=1 if and only if job Jjis indeed scheduled in the rth position on machine Mi. In addition, we observe that(19)vij1=minl∈{1,2,…,k}{cijl}≤vij2=minl∈{1,2,…,k}{αaijl+cijl}≤⋯≤vijz=minl∈{1,2,…,k}{(z−1)αaijl+cijl}and(20)vij(z+1)=minl∈{1,2,…,k}{(n−z)βaijl+cijl}≥vij(z+2)=minl∈{1,2,…,k}{(n−z−1)βaijl+cijl}≥⋯≥vijn=minl∈{1,2,…,k}{βaijl+cijl}So, we can drop constraints (16) and (17) from the model without affecting the optimal solution of the problem. Thus, the Rm/di=d, dm/∑(αEij+βTij)+TPC problem can be re-formulated as the following assignment problem and, therefore, can be solved in O(mn3) time.(P2)Minimize∑i=1m∑j=1n∑r=1nvijrxijrsubjectto∑i=1m∑r=1nxijr=1,j=1,2,…,n∑j=1nxijr≤1,i=1,2,…,m,r=1,2,…,nxijr∈{0,1},i=1,2,…,m,j=1,2,…,n,r=1,2,…,nand the time complexity of calculation of vijris O(mkn2). This completes the proof of Theorem 3.□We provide an algorithm for the Rm/di=d, dm/∑(αEij+βTij)+TPC problem as follows:Algorithm 3Step 1. Calculatez=nβ/α+β.Step 2. Calculate vijrby using (12), for i=1, 2, …, m, j=1, 2, …, n, and r=1, 2, …, n.Step 3. Solve the assignment problem (P2). Then, obtain the optimal schedule and the corresponding value of the objective.Step 4.Determine the actual processing times and the corresponding processing costs.Step 5. Obtain the numbers of jobs processed on each machine.Step 6. Determine the optimal common due-date d=maxi=1,2,…,m{di}, wheredi=C[izi]andzi=niβ/α+β.Clearly, the time complexity of Step 2 is O(mkn2) and Step 3 is O(mn3) time; Steps 1, 4 and 6 can be performed in linear time. Thus, the overall computational complexity of Algorithm 3 is O(mkn2+mn3).We solve the following example to illustrate the working of Algorithm 3.Example 3There are five jobs to be processed on two unrelated parallel machines. The same data in Example 1 is used. The unit earliness and tardiness penalties are α=4 and β=5, respectively.First, we know thatz=nβ/α+β=5×5/4+5=3. We calculate vijrby using (12), for i=1, 2, j=1, 2, …, 5, and r=1, 2, …, 5. We then solve the assignment problem (P2) using LINGO software. The optimal solution for the example consists of the following: (i) The optimal job sequences on machines M1 and M2 are M1=(J5, J2, J1) and M2=(J4, J3), respectively; (ii) the optimal objective value is 123; (iii) the actual processing times of jobs are p15=a151=18, p12=a123=6, p11=a113=5, p24=a241=21, and p23=a233=9, respectively, and the corresponding processing costs are c151=6, c123=7, c113=6, c241=4, and c233=15, respectively; (iv) the numbers of jobs processed on machines M1 and M2 are n1=3 and n2=2, respectively; (v) the common due-date of all jobs is d=34; (vi) The start times to procem1ss the first job on machines M1 and M2 are 10 and 0, respectively.The Rm/dm/Cmax+TPC problem is known to be NP-hard, since the minimization of the makespan (without resource allocations) on a parallel-machine setting is known to be such [11]. In this section, we present an integer programming method and a heuristic method to solve the addressed problem.First, an immediate lower bound is(21)L1=1m∑j=1nmini,h{aijh}+∑j=1nmini,h{cijh}Since each job must be arranged, an obvious lower bound can be obtained by(22)L2=maxjmini,h{aijh}+∑j=1nmini,h{cijh}So, a valid lower bound on the addressed problem is L=max(L1, L2).Next, we use the integer programming technique to solve the considered problem. Let zijh=1 if job Jjis scheduled on machine Miin the hth possible processing time and zijh=0 otherwise. Then the Rm/dm/Cmax+TPC problem can be written as the following integer program:(23)MinimizeCmax+∑i=1m∑j=1n∑h=1kcijhzijh(24)subjectto∑j=1n∑h=1kaijhzijh≤Cmax,i=1,2,…,m(25)∑i=1m∑h=1kzijh=1,j=1,2,…,n(26)zijh∈{0,1},i=1,2,…,m,j=1,2,…,n,h=1,2,…,kFurthermore, we propose a heuristic algorithm to solve the problem. Potts [28] proposed a linear programming heuristic for the makespan minimization scheduling problem (without resource allocations) on an unrelated-parallel setting. Following Potts [28], we present a linear programming heuristic to solve the Rm/dm/Cmax+TPC problem.Algorithm 4Step 1. Remove constraint (26) and replace by zijh≥0 such that the integer programming problem relaxes to be the linear programming problem.Step 2. Solve the linear programming problem to obtain partial schedules for these jobs with zijh=1 and fractional jobs where 0<zijh<1.Step 3. Arrange these fractional jobs using an enumerative method.Step 4. The heuristic solution is the one with the minimum total cost.We compare the results obtained by using the integer programming method and Algorithm 4 by the following example. We solve the corresponding problem using the commercial software package LINGO version 11.0 on a personal computer.Example 4There are 10 jobs to be processed on three unrelated parallel machines. The set of job parameters is presented in Table 3.We first use the integer programming method to solve the example. The running time for solving the integer programming problem is less than one second (note that the running time is the total time used to generate and solve the model by LINGO). The optimal solution for the example consists of the following: (i) The jobs processed on machines M1, M2, and M3 areS1=J1,J2,J6,J7,J10,S2=J3,J4,J9, andS3=J5,J8, respectively; (ii) the actual processing times of jobs are p11=a112=6, p12=a121=11, p16=a162=19, p17=a171=13, p1,10=a1,10,1=7, p23=a231=14, p24=a241=21, p29=a291=20, p35=a351=25, and p38=a381=28, respectively, and the corresponding processing costs are c112=4, c121=3, c162=7, c171=3, c1,10,1=1 c231=6, c241=4, c291=5, c351=4, and c381=5, respectively; (iii) Cmax=56 and the optimal objective value is 98.Then we apply Algorithm 4 to solve the example. First, we solve the linear programming problem and obtain that partial schedules on machines M1, M2, and M3 areS1=J1,J2,J6,J10,S2=J3,J4, andS3=J5,J8, respectively, and jobs J7 and J9 are fractional jobs. The actual processing times of jobs in partial schedules are p11=a111=9, p12=a121=11, p16=a161=25, p1,10=a1,10,1=7, p23=a231=14, p24=a241=21, p35=a351=25, and p38=a381=25, respectively, and the corresponding processing costs are c111=2, c121=3, c161=4, c1,10,1=1 s, c241=4, c351=4, and c381=5, respectively. Next, we arrange these fractional jobs (i.e., J7 and J9) using the enumerative method. Table 4shows all the possible schedules of jobs J7 and J9 and the total cost for the addressed problem. From Table 4, we see that jobs J7 should be processed on machine M1 and J9 should be processed on machine M2 such that the total cost is minimized. The actual processing times of jobs J7 and J9 are p17=a173=8 and p29=a291=20, respectively, and the corresponding processing costs are c173=7 and c291=5, respectively. As a result, we obtain that Cmax=60 and the minimum total cost is 101.

@&#INTRODUCTION@&#


@&#CONCLUSIONS@&#
In this paper we investigated scheduling problems with discrete resource allocations on an unrelated parallel-machine setting where the job processing times are discretely controllable. The objective was to minimize the sum of the total processing cost and the cost measured by a standard criterion. The following criterions were analyzed: the total completion time, the total machine load, and the sum of earliness and tardiness penalties. If the number of machines and the number of possible processing times are fixed, we proposed polynomial time algorithms for these problems. We further considered the minimization problem of the makespan cost plus the total processing cost and introduced an integer programming technique and a heuristic method to solve the problem. The results can be extended to the continuous model of scheduling with resource allocations. Future research may investigate the similar problem to other shop environments, or optimizing other performance measures.