@&#MAIN-TITLE@&#
Medical high-resolution image sharing and electronic whiteboard system: A pure-web-based system for accessing and discussing lossless original images in telemedicine

@&#HIGHLIGHTS@&#
Designed methods for medical HRIs rapid accessing, presentation, and discussion on pure web browsers.Improved a tile-pyramid to adapt to the reading habits of users for HRIs accessing.Built a format conversion engine (FCE) to make DICOM browsing compatibility and response efficiency.Designed a XML behavior relationship to store and share users’ behavior to keep online discussion.Created a HRIs sharing and electronic whiteboard system in a diversified network environment.

@&#KEYPHRASES@&#
Low bandwidth network,High-resolution images,Image transmission,Tile-pyramid model,Pure web page,Electronic whiteboard communication,

@&#ABSTRACT@&#
There are various medical image sharing and electronic whiteboard systems available for diagnosis and discussion purposes. However, most of these systems ask clients to install special software tools or web plug-ins to support whiteboard discussion, special medical image format, and customized decoding algorithm of data transmission of HRIs (high-resolution images). This limits the accessibility of the software running on different devices and operating systems. In this paper, we propose a solution based on pure web pages for medical HRIs lossless sharing and e-whiteboard discussion, and have set up a medical HRI sharing and e-whiteboard system, which has four-layered design: (1) HRIs access layer: we improved an tile-pyramid model named unbalanced ratio pyramid structure (URPS), to rapidly share lossless HRIs and to adapt to the reading habits of users; (2) format conversion layer: we designed a format conversion engine (FCE) on server side to real time convert and cache DICOM tiles which clients requesting with window-level parameters, to make browsers compatible and keep response efficiency to server-client; (3) business logic layer: we built a XML behavior relationship storage structure to store and share users’ behavior, to keep real time co-browsing and discussion between clients; (4) web-user-interface layer: AJAX technology and Raphael toolkit were used to combine HTML and JavaScript to build client RIA (rich Internet application), to meet clients’ desktop-like interaction on any pure webpage. This system can be used to quickly browse lossless HRIs, and support discussing and co-browsing smoothly on any web browser in a diversified network environment. The proposal methods can provide a way to share HRIs safely, and may be used in the field of regional health, telemedicine and remote education at a low cost.

@&#INTRODUCTION@&#
Modern medical imaging technology can provide high-resolution images (HRIs) that contain detailed anatomical structure and help doctors to diagnose in clinical practice. HRIs, including radiological photos, clinical images, etc., are important data sources for diagnosis, consultation, and case discussion [1–4]. In the Internet age, doctors wish to conveniently access images and have discussions with other doctors via e-whiteboard communication [5,6]. Additionally, patients wish to access to their radiological examination reports from anywhere for online consultation. These requirements give rise to two technical problems: how to rapidly access lossless medical HRIs in a diversified network environment and in different client devices without installing special software, and how to realize convenient and effective communication online among different client devices.For rapidly accessing medical HRIs, including DICOM (Digital Imaging and Communications in Medicine) [7], clinicians always try to archive high-quality medical images [8,9], however, there is much limited bandwidth in some remote areas of developing countries and an interface bottleneck in some areas of different countries [10] where HRIs sharing and discussion are most required. Therefore, lossless and rapid sharing of the HRIs is becoming more important. Currently, the main solutions include: (1) Upgrading the existing Internet network platform to meet the regional PACS (Picture Archiving and Communication Systems). This way has high costs, especially in remote and poor areas. (2) Reducing the image resolution and quality while satisfying the needs of the clinical diagnosis, e.g., using image processing technology to compress lossy images [11]. This way may get a risk of losing important information [12,13], or catch a complex process that client needs to be customized for special decoding and reconstruction software. (3) Using new network interactive technologies to change the whole transmission into on-demand transmission [13–18]. For example, [13–16] used JPEG2000, which has been included in DICOM supplement [22] and has very good network transmission characteristics, including Region of Interest (ROI), progressivity and scalability. But JPEG2000 has not been directly supported by web browsers and desktop image browsers in the mainstream market. Users must customize decoding and reconstruction programs on the client side. The problems are as follows: first, the client's software products must be independently developed to adapt to different operating systems (OS) and hardware characteristics, which increases the cost of software development, hardware purchasing and deployment. And the limitation of client terminals and OS does not serve the purpose of case discussion at anytime and anywhere. Second, without customized software on the client side, progressivity would be unable to play a role. Some solutions deploy the image processing work on the web server [18], which can timely decode and reconstruct what clients request and convert into general image formats that client browsers can accept without installation. But repeatability of transmission may occur, e.g. while zooming or panning an image, and the required data would be entirely transmitted as a new image but not as a progressive superposition. On the other hand, because ROI real-time processing, progressive transmission, decoding and reconstruction all need to take up a certain amount of computing resource, if all of the computing focus is on the server side, a large-scale application to the server load maybe a problem [19]. Here, Shen et al. [17] adopted tile-based transmission to solve redundant transmissions for each fixed scaling resolution, and Lien et al. [18] further reduced the complexity of computing by pre-storing tiles according to a basic tile-pyramid without using JPEG2000. Since a household display device with limited size and colors cannot display all the information while focusing on the image details, our study is built on the basis of solution 3, using the idea of tile-based on-demand transmission, to keep lossless large image transmission. However, [17,18] only supported a 4× ratio zooming which was limited by basic tile-pyramid model, which is also the ideal scaling factor of JPEG2000 [20,21]. While 4× ratio zooming does not affect users reading extreme HRIs such as satellite images and microscope images [18,23,24], in practice it may be not convenient to read medical HRIs with such resolutions as 3004×2480. In our study, we should redesign a novel tile-pyramid model named unbalanced ratio pyramid structure (URPS) to adapt to the reading habits of doctors for medical HRIs. Furthermore, to insure client devices compatible, we need to emphasize on “No Installation” on client side, since both JPEG2000 and DICOM cannot be directly presented in web browser, a format conversion engine (FCE) should be built on the server side to manage conversion process and history caches.On the other hand, for online communication among different client devices, there are many electronic whiteboard systems available for multi-site conferences in telemedicine, such as image co-browsing and synchronous annotation between remote clients, it is important to be clear, effective and intuitive [25–27]. Fromme et al. designed an electronic whiteboard system [25], like what in most hospitals do, but it was restricted to its local-area network because of the data size of HRIs sharing and the structure of P2P (Peer to Peer), and needed independent IP addresses for clients, that may be an issue in countries with limited IPv4 resources [10]. Lim et al. [26] and Zhang et al. [27] respectively designed a web-based interactive medical image processing, yet they need to install a Java Applet or other plug-ins. With a diversity of Internet terminals, such as the IPad, android machines and PCs, a platform with good versatility and which does not require installation is more valuable [28,29].In this study, we expect to design a set of methods for medical HRIs rapid accessing, presentation, and online communication in pure web environment. For HRIs rapid accessing, we plan to improve tile-pyramid model to adapt to the reading habits of doctors for medical images; for presentation, we plan to build a format conversion engine (FCE) to solve the problems of DICOM tiles browsing compatibility and response efficiency to server-client; for online communication, we plan to design an accurate and clear XML structure to store and share users’ behavior. Finally, we hope to set up a medical high-resolution image sharing and electronic whiteboard system that can share medical HRIs and support e-whiteboard discussion in a low bandwidth network.The basic tile-pyramid's core concept is to split an original image into multi-resolution hierarchical layers by 4× ratio zooming and each layer is cut into small tiled images using a module (tile) of fixed size; the tiled images are stored as a pyramid structure (Fig. 1) on server side. The client needs to download only the required tiles according to the actual screen size in each layer.We changed the zoom ratio between two adjacent layers to an unbalanced ratio scale instead of a 4× ratio zooming, and construct a new pyramid named as UPRS (Fig. 1). The steps of “URPS building” are as follows (schematic diagram is shown in Fig. 2):Step 1 Calculate how many layers are needed in the pyramid, the number of layers is named as n, determined according to formula (1) and Table 1; and then obtain the serial number of each layer, named as LayerIndex or Li(Li=1, 2, ...n); simultaneously, obtain the layer factor, named as LayerFactor(LayerFactor=n, n−1, ...1) and can be determined according to formula (2).(1)n=max(w,h)∈table1(2)LayerFactor(Li)=n−Li+1Here, w and h denote the width and height of the original image, respectively.Step 2 Set the size of standard module (tile), named as staTileSize=[stW, stH]T, stW and stH denote the width and height of the standard module, such as 64×64, 128×128, etc., the default is 128×128.Step 3 Calculate the segmentation module size of the LayerIndexth layer, described as segModSize(Li)=[smW(Li), smH(Li)]T, smW(Li) and smH(Li) denote the width and height of the segmentation module in the LayerIndexth layer, determined according to formula (3).(3)segModSize(Li)=smW(Li)smH(Li)=staTileSize⋅LayerFactor(Li)=stW⋅LayerFactor(Li)stH⋅LayerFactor(Li)Step 4 Cut the original image into segmentation images using the segmentation module (segModSize(Li)) from the same LayerIndexthLayer.Step 5 Shrink segmentation images to a standard module (tile) size; then store as tiled images, return to step 3 for processing the (LayerIndex+1)th layer until layer dividing is complete.While all layers dividing is complete, generated tiles would be stored in hard disk as files, simultaneously, the number of layers, the number of tiled images and zoom ratio in each layer would be calculated and saved as an INI attachment in the same directory.The number of tiled images, the zoom ratio and final storage resolution in each layer of URPS can be accurately calculated. Here, a factor used to calculate actual zoom rate of each layer, described as ZoomFactor(Li)=[zfW(Li), zfH(Li)]T, zfW(Li) and zfH(Li) denote the zoom factor on x-axis and y-axis respectively; the number of tiled images of the LayerIndexth layer is named as tileCount(Li); the final storage resolution of the each layer is described as destPicSize(Li)=[dpW(Li), dpH(Li)]T; zoomRatio(Li) is the total ratio scale for zooming, The above variables could be respectively calculated according to formulas (4)–(7)(4)ZoomFactor(Li)=zfW(Li)zfH(Li)=w/smW(Li)h/smH(Li)(5)tilesCount(Li)=ceiling(zfW(Li))×ceiling(zfH(Li))(6)destPicSize(Li)=dpW(Li)dpH(Li)=ceiling(zfW(Li))×stWceiling(zfH(Li))×stH(7)zoomRatio(Li)=zrW(Li)×zrH(Li)where ceiling(zfW(Li)) and ceiling(zfH(Li)) denote the number of tiles of x-axis and y-axis, respectively; ceiling is a function to take the maximum integer from a floating point number; zrW(Li)=zfW(Li)/zfW(n) and zrH(Li)=zfH(Li)/zfH(n) denote the ratio scale of x-axis and y-axis, respectively.For convenience of understanding, we used a resolution of 768×512 as an example. Formulas (1)–(7) was as follows (quantitative results are shown in Table 2, the corresponding schematic diagram is shown in Fig. 2):If maximum side-length was 768, n was 4 according to Formula (1) and Table 1, the original image can be constructed from layer 1 to layer 4. Here, the standard module (tile) size was set as 128×128.For layer 1(1st layer, LayerIndex=1), the Layer factor was 4 according to Formula (2), the Segmentation module size of layer 1 was 512×512 according to Formula (3), and the zoom factor of x-axis and y-axis was 1.50 and 1.00, respectively, according to Formula (4). Because Segmentation module size can be used to divide the original image into segmentation images (SIs) and shrink the SIs into tiled images (standard module size), hence, the Number of tiles of the 1st layer was 2×1 according to Formula (5), the Size of the 1st layer full image was obtained as 256×128 according to Formula (6). The total zoom ratio was 6.25% of the original image according to Formula (7), and zoom ratio of x-axis and y-axis was both 25.00%.The layers from layer 2 to layer 4, could also be obtained with the above rule.If the length of side of a picture were over 2000 pixels, URPS had obvious advantages to adapt to the reading habits of doctors for medical HRIs. For example, a 3004×2480 resolution picture can be constructed from the 1st to 6th layers (quantitative results are shown in Table 3, the URPS results are shown in Fig. 1b).URPS would be pre-generated from an original image and stored the tiles and INI attachment in the form of files on the hard disk of server.Because of the limitation of the client display resolution, for each zoom layer, the client asks the server for only the necessary tiled images. In Fig. 3, client side (b) could display the range of red solid box (a). The number of tiles needed in client, is described as tX×tY, which are the horizontal and vertical tiles in the view area and can be determined according to formulas (8) and (9).(8)tX=ceiling(screenWidth/stW)(9)tY=ceiling(screenHeight/stH)where ceiling is a function to take the maximum integer from a floating point number, [screenWidth, screenHeight]Tis the size of view area, [stW, stH]Tis the size of a standard tile. In Fig. 3, tX=3, tY=2.The HTML script that was the foundation of all Internet browsers is considered to be the tile display carrier. If the screen can display only 3×2 tiles, the HTML script would dynamically generate a table with cells of 3×2 as follows:<table><tr><td><img src=”20140306005/2/0_3.png”</td><td><img src=”20140306005/2/0_4.png”</td><td><img src=”20140306005/2/0_5.png”</td></tr><tr><td><img src=”20140306005/2/1_3.png”</td><td><img src=”20140306005/2/1_4.png”</td><td><img src=”20140306005/2/1_5.png”</td></tr></table>Here, value “20140306005/2” is storage path of an URPS data set, named 20140306005 now accessing for layer 2. <td> is a table cell, <tr> is a table row, tiled images are displayed by embedding the <img> into <td> (the compatibility of DICOM tiles will be mentioned in Section 2.2). Each <img> tag is given a tile storage address index, s(i, j), i∈[m1, m2], j∈[n1, n2], where (m1, n1) is the starting position of required tiles and the ending position is (m2, n2), m2=m1+tX, n2=n1+tY.In Fig. 3, the range (m1, n1)−(m2, n2) of red solid box is (1,0)–(2,2), s(1,0)=“1_0.png”.While moving around in the view area, we just need to obtain two points, using a computer mouse or touch a screen, to change the position range (m1, n1)−(m2, n2) to recreate <table> script. The tile address index s(i,j) will be used to update the download link of each <img> tag.In Fig. 3, the original view area was (0, 2)-(1, 4); if the view area was slided from P1 to P2, we calculated that the new view area changed from the blue solid box to the blue dashed box and then automatically adjusted the four corner points from the blue dashed box into the range of near tiles, eventually normalizing the view area into the red solid box (1,0)–(2,2), and the download address of each <img> was updated by s(i,j), i∈[1, 2], j∈[0, 2], to regenerate the <table> tag. Hence, the client view area would update automatically.The HTTP protocol can cache the repeated download address in the local client, the <table> container after regeneration would only download the URL addresses of new tiled images, and could reduce redundant transmission. While image zooming, we can find the similar corresponding operation of tiles in the unbalanced ratio pyramid.The format of tiled images of URPS should be consistent with the format of the original image. For example, the format of original image is PNG (Portable Network Graphic Format) with 24 bit-depth, the format of all tiled images is also 24 bit-depth PNG to keep the quality. Also, the information of each DICOM tiled images, including window center, window width and bit depth, etc., must be consistent with the original DICOM to ensure data accuracy. There, the approach of management and transmission of DICOM tiles is similar with what we do in Section 2.1.However, DICOM tiled images cannot be directly presented in web browsers. There, we establish a separate process on the server side, named as Format Conversion Engine (FCE), to monitor the client's request of DICOM tiles. There are two tasks for FCE:FCE must real time listen to the users’ request (detailed in Section 2.3) and dynamically convert DICOM tiles into PNG tiles with lossless compression or JPEG tiles depending on users’ orders, including window-level rescale, which can ensure that the pure web page accurately displays the user-required information via color range of household display device.We originally adopted WADO (web accessing to DICOM persistent objects) [30] to generate bitmap images based on the HTTP protocol. However, the method of HTTP post was not suitable for the simultaneous conversion of the batch of DICOM tiles, and also be difficult to integrate into our own standalone listening process seamlessly. Therefore, we ultimately self developed the software based on window-leveling technique [31].For a great many of DICOM tiles processed at the same time, response time of the FCE processing may be critical. In our design, FCE can cache the history tiled data, which has been converted with information of window-level rescale, to avoid redundant operations. For example, a tiled image stored with a name of “12_35.dcm”, if someone has visited the tile with the window center as 2048 and window width as 4096, the FCE would retrieve whether the file “12_35W2048H4096.png” exists in the same storage path, if not retrieved, FCE would convert the original tile and cache it as “12_35W2048H4096.png” for permanent preservation (Fig. 4). As a platform for information sharing and discussing among multi-terminals, this approach will be of great more efficiency.The operation behaviors of clients include browsing and annotation. In our system, we use XML (Extensive Markup Language) [32] to record the operations information on the server side and to synchronously coordinate between the clients. As shown in Fig. 5, XML as a bridge of communication including: (1) each operation behavior from clients could generate a XML document on client side to submit to the server, and ask server to add it in XML database or trigger FCE processing; (2) clients retrieve whether new XML document at a fixed frequency from the XML database on server side (default is 300ms), and download if new data were retrieved; (3) analyze the new XML document, if annotation recorded in XML, the clients would redraw the visual labeling on pure web page with the help of Raphael toolkit [33] according to XML extracting, if view area change recorded in XML, the clients would download the new tiles and rearrange tiles (table generation) on webpage.The designed XML storage structure for operation information contains 11 XML elements:Service aisle (labeled as Aisle),Behavior type (Type),Behavior from (From),Annotation position (Pos),Color,Font,Fillcolor,Layer Index (layer),Tiles range (tilesRange),Window center/window width (windowLevel) andOccurred time. The elementService aisle is used to distinguish discussion group. The elementBehavior type includes “line”, “rect”, “oval”, “ellipse”, “words”, “tileschange” and etc.; the former five events require clients to draw vector graphics on a <DIV> tag, which are covered on the view area following the requirements of element–, “tileschange” expresses an behavior of sliding view area or zooming. Moreover, the elementTiles range requires clients to update the required tiled images following the requirements of element, and the elementwindowLevel only server DICOM tiles.For example, a client has moved the view area for browsing and labeled an elliptical box on the view area, there would be two steps of operation and generate two XML documents to submit to server. The behaviors and corresponding XML documents are shown in Fig. 6.In Fig. 6b, element Annotation postion(Pos) corresponding to iii records coordinate range of annotation in original image coordinate system, described as (oriX0, oriY0)−(oriX1, oriY1), in which (oriX0, oriY0) is starting position, (oriX1, oriY1) is ending position, client side would dynamically transform the coordinate position into (curX0, curY0)−(curX1, curY1) to adapt to each layer coordinate system according to Formula (10) while redrawing. As well, making annotation on LayerIndexth layer will get coordinate range (curX0, curY0)−(curX1, curY1) in LayerIndexth coordinate system, could be calculated to get (oriX0, oriY0)−(oriX1, oriY1) in original image coordinate system and recorded in XML document according to Formula (10)(10)curX0curX1curY0curY1=oriX0⋅zrW(Li)oriX1⋅zrW(Li)oriY0⋅zrH(Li)oriY1⋅zrH(Li)where zrW(Li) and zrH(Li) denote the zoom ratio of x-axis and y-axis, respectively, could be obtained from INI attachment (detailed in Section 2.1.1), and be saved to the text controls of webpage while first webpage loading.All participant clients can download above XML documents and restore what shown in Fig. 6a for e-whiteboard discussion.The architecture of system has four layers (Fig. 7): (1) HRIs access layer: an original image is preprocessed and stored as a number of tiles on the server following URPS (Section 2.1); (2) format conversion layer: a FCE is built to convert and cache the necessary DICOM tiles for clients downloading (Section 2.2); (3) business logic layer: the interactive behaviors between clients all use XML structured documents to store and transmit (Section 2.3); (4) web-user-interface layer: a desktop-like interaction interface for users to support co-browsing and discussion on pure web pages. The layering principle in the architecture allows the developers to change or modify each layer without changing the other parts of the software.Web-user-interface should directly face client users via pure web pages, here, a widely accepted technique of HTML & JavaScript could meet the purpose. For example, a behavior of user in webpage should be locally transformed into a XML document by JavaScript to submit to the server; and any clients could regularly retrieve the XML that could be analyzed in webpage by JavaScript DOM object to guide to download and display tiled images, and to guide the vector graphics expression of annotation. Furthermore, we should ensure the wide support of the client browser as a client RIA (rich Internet application), including: flicker-free page updates and rich visual drawing. For flicker-free page updates, AJAX (Asynchronous JavaScript and XML) [34] could dynamically transfer updated content between the browser and server without reloading the entire page, this can be efficiently used to transmit the XML document, download and display the new on-demand tiles on client side. We selected the AJAX Extensions 1.0 components that match the NET framework to page updates and set the timer control of AJAX to retrieve the latest XML document at a fixed frequency of 300ms. For rich visual drawing, we chose the HTML-JavaScript-based Raphael toolkit because it uses the VML (Vector Markup Language) [35] and SVG (Scalable Vector Graphics) [36] W3C (World Wide Web Consortium) [37] Recommendation as a base for creating graphics. This means every graphical object is also a DOM object that will make drawing vector art compatible cross-browser and easy [33].This system has been tested in 2 departments of 2 hospitals in China for the purpose of typical radiological photos and clinical images sharing and discussion remotely, and tested in 1 medical school for the purpose of online learning. It requires that the user access the system with username and password. Each user could upload typical large images and specify who can access.The browse/server architecture of this system makes it easily accessible via web browser on different devices, such as personal computer (PC), laptop computer, mobile, etc. For devices with different resolution, the system should allow user to set the size of view area to ask necessary tiles, and support accurate visual presentation from user's operation behavior. For devices with different operation system, web browser should be widely compatible without plug-ins.We have test the availability and compatibility on four different devices according to the steps of sliding view area, zooming and annotation. There should be co-browsing and synchronous annotation between 4 devices while all were accessing one image at a time.

@&#CONCLUSIONS@&#
