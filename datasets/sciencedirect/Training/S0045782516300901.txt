@&#MAIN-TITLE@&#
Dual form of discontinuous deformation analysis

@&#HIGHLIGHTS@&#
The dual form of discontinuous deformation analysis, abbreviated as DDA-d, with the contact forces as the basic variables, is established.DDA-d does not need the virtual springs, the stiffness of which has strong influence on the computational results.An iterative algorithm for the finite-dimensional quasi-variational inequality in DDA-d, called the compatibility iteration, is designed.DDA-d is more accurate and robust than the classic discontinuous deformation analysis, and comparable in efficiency with DDA.

@&#KEYPHRASES@&#
Discontinuous deformation analysis,Contact problems,Finite-dimensional variational inequalities,Open–close iteration,Projection–contraction algorithm,

@&#ABSTRACT@&#
Discontinuous deformation analysis (DDA) is a numerical method for analyzing dynamic behaviors of an assemblage of distinct blocks, with the block displacements as the basic variables. The contact conditions are approximately satisfied by the open–close iteration, which needs to fix or remove repeatedly the virtual springs between blocks in contact. The results from DDA are strongly dependent upon stiffness of these virtual springs. Excessively hard or soft springs all incur numerical problems. This is believed to be the biggest obstacle to more extensive application of DDA. To avoid the introduction of virtual springs, huge efforts have been made with little progress related to low efficiency in solution. In this study, the contact forces, instead of the block displacements, are taken as the basic variables. Stemming from the equations of momentum conservation of each block, the block displacements can be expressed in terms of the contact forces acting on the block. From the contact conditions a finite-dimensional quasi-variational inequality is derived with the contact forces as the independent variables. On the basis of the projection–contraction algorithm for the standard finite-dimensional variational inequalities, an iteration algorithm, called the compatibility iteration, is designed for the quasi-variational inequality. The main processes can be highly parallelized with no need to assemble the global stiffness matrix. A number of numerical tests, including those very challenging, suggest that the proposed procedure has reached practical level in accuracy, robustness and efficiency, and the goal to abandon completely virtual springs has been reached.6-dimensional generalized force vector, in Eq. (4)6×2nimatrix formed by all the local frames at blockΩi, Eq. (8)6×2matrix of thejth contact local frame at blockΩi, Eq. (9)cohesion at thekthcontact, Eq. (33)incremental displacement vector of blockΩi, Eq. (1)time interval of a time step, Eq. (10)Young’s modulus, in all the examples6×6stiffness matrix of blockΩi, Eq. (7)tolerance of contact force vectorpin the compatibility iterationxdirection normal strain of blockΩi, Eq. (7)ydirection normal strain of blockΩi, Eq. (1)6×2niflexibility matrix, Eq. (15)6-dimensional flexibility vector, Eq. (16)vector-valued gap function, in Eq. (38)acceleration of gravity, in all the examplesa part of normal gap of the contact-pair formed by an edge ofΩiand a vertex ofΩj, in Eq. (24)a part of tangential slide of the contact-pair formed by an edge ofΩiand a vertex ofΩj, in Eq. (31)normal gap of thekthcontact, Eq. (18)tangential slide of thekthcontact, Eq. (27)shear strain component of blockΩi, Eq. (1)6×6equivalent stiffness matrix of blockΩi, Eq. (12)allowable maximum displacement within a time step, in all the exampledensity of block, Eq. (6)6×6mass matrix of blockΩi, Eq. (6)friction coefficient at thekthcontact, Eq. (33)the number of contact-pairs within a time step, in Section  4unit normal vector of local frame[n,τ]of a contact-pair2ni- and2nj- and dimensional vectors in calculating normal gapgknof thekthcontact-pair, in Eq. (23)the number of contact-pairs at blockΩi, Eq. (5)Poisson’s ratio, in all the examplesregion occupied by theith blockcontact force vector, Eq. (35)normal contact force of thekthcontact, Eq. (25)tangential contact force of thekthcontact, Eq. (32)6-dimensional equivalent block force vector of blockΩi, Eq. (13)rotation angle of blockΩiaround point(x0,y0), Eq. (1)2×6shape function matrix of blockΩi, Eq. (3)unit normal vector of local frame[n,τ]of a contact-pair2ni- and2nj- and dimensional vectors in calculating tangential slidegkτof thekthcontact-pair, in Eq. (30)shear strength corresponding to normal contact forcepkn, in Eq. (33)velocity vector of blockΩiat the end of a time step, Eq. (17)velocity vector of blockΩiat the beginning of a time step, Eq. (17)coordinates of an arbitrary point in blockΩi, Eq. (2)coordinates of a reference point in blockΩi, Eq. (1)constraint for the contact forces, in Eq. (36)

@&#INTRODUCTION@&#
Discontinuous Deformation Analysis (DDA, [1]) is a numerical method for rock engineers to study dynamical behaviors of an assemblage of distinct blocks, which takes block displacements as the basic variables.DDA has been widely used in rock engineering, such as tunnel engineering  [2,3], slope engineering  [4], stability analysis of ancient masonry structures  [5], evaluation of seismic site response  [6], and the shape optimization of bucket elevators  [7], to name just a few.Lin et al. introduced artificial joints and sub-blocks into big blocks to simulate fracture in the blocks  [8]. As a matter of fact, the simulation of rock fracture can be implemented in more sophisticated manners, such as meshless methods  [9–13].To obtain a more accurate stress distribution, a higher order displacement mode was used to replace the first order displacement mode in the original DDA  [14]; and for the same purpose the finite element mesh was also adopted to partition DDA blocks  [15]. The continuous/discontinuous deformation analysis (CDDA) by Cai et al.  [16] can also be classified in this category, where the block displacements are approximated with higher degree polynomials. The nodal-based DDA by Bao and Zhao introduced the finite element mesh and the fracturing scheme into DDA to enhance accuracy in stress distribution and to simulate block fracturing  [17]. Coupling with fluid was studied in  [18] and  [19].The three-dimensional DDA has been paid considerable attention  [3,20–23]. The biggest obstacle to thwart 3D DDA is the detection of contacts. Recently, Shi published his new contact theory  [24], which is expected to facilitate significantly the contact treatment.In DDA, the contact state between blocks is determined by repeatedly fixing and removing normal and tangential springs between blocks in contact. This process is referred to as the open–close iteration, which allows for penetration between blocks in contact. The stiffness of contact springs affects the results exceedingly. To avoid the contact springs or to mitigate the dependency on stiffness of contact springs, the augmented Lagrange multiplier method  [8] and the Lagrange multiplier method  [25] were tested. But the open–close iteration is still needed to reach the correct contact state, which is not always convergent. Furthermore, the Lagrange multiplier method would break down due to rank deficiency of the Jacobian matrix, which might be caused by redundant contact-pairs or too many inactive constraints activated.To avoid the contact springs, more advanced tools have been applied and more sophisticated models have been built, including the complementarity theory  [26–28], and variational inequality theory  [29]. All these formulations took the contact forces as well as the block displacements as the independent variables, nearly doubling the number of basic variables of DDA. All these formulations were reduced to the solution of a system of non-smooth equations, which involves inversing the Jacobian matrix. Since the DDA code might generate some redundant contact-pairs, which leads to rank deficiency of the Jacobi matrix, the steepest descent procedure had to be invoked in such a case. Whenever this happened, the solution would become very inefficient, as was pointed out in  [28].In this study, only the contact forces are taken as the basic variables, which is why the proposed procedure is called the dual form of DDA, denoted by DDA-d, and hence the number of the basic variables in DDA-d is far less than those in  [26–29]. Since in DDA-d the block displacements can be expressed in terms of the contact forces, and accordingly can be obtained accurately once the contact forces are solved.From the perspective of calculus of variations, the classic DDA, taking block displacements as the basic variables, is actually the primal form. The contact forces in DDA are approximated by multiplying the relative displacements between blocks in contact by stiffness of the virtual springs.This study is organized as follows.In Section  2, from the equations of momentum conservation of a block, we derive the displacements of the block in terms of the contact forces acting on it. To each contact-pair, Section  3 firstly establishes the relationship between the contact force and the relative movement; then the two variational inequalities are built to represent the normal and tangential contact conditions, respectively. In Section  4, by collecting the variational inequalities of all the contact-pairs, a finite-dimensional quasi-variational inequality is derived, with the contact forces as the independent variables and the constraint set dependent on the solution. Section  5 describes the solution process of a time step, in which the main sub-processes can be highly parallelized, with no need to assemble the global stiffness matrix. In Section  6, firstly the solution of the quasi-variational inequality posed in Section  4, called the compatibility iteration, is analyzed; and then two functions that are repeatedly invoked in the compatibility iteration are expounded. In Section  7, some typical examples are used to test the proposed procedure in comparison with DDA. Section  8 concludes this study. Some details related to the solution algorithms are put in three appendices to avoid unnecessary distractions.In this section, to a typical blockΩithe relationship between its displacement and the contact force acting on it will be derived.For simplicity, the displacement mode in this study is the same as the classic DDA, reading(1)di=(u0iv0i,r0i,εxi,εyi,γxyi)T,where all the components ofdiare increments;u0iandv0irepresent the translational displacements ofΩiin the horizontal and vertical direction, respectively;r0iis the rotation angle ofΩiaround a reference point(x0,y0)inΩi;εxi,εyi,γxyirepresent the small deformation based average strain components ofΩi.Under the assumption of small deformation and small rotation, the incremental displacement vectorui(x,y)at point(x,y)inΩican be expressed as(2)ui(x,y)=Tidi,in terms ofdi, with the2×6shape function matrix(3)Ti(x,y)=(10−(y−y0)(x−x0)0(y−y0)/201(x−x0)0(y−y0)(x−x0)/2).In DDA, all types of contact are actually reduced to the contact between a vertexVof blockΩsand an edgeEof another blockΩm, as shown in Fig. 1. Here, a vertex is actually a convex angle. The vertexVand the edgeEcompose a contact-pair, denoted byE–V.V′is the projection ofVonto the edgeE. In the contact-pairE–V, a local frame[n,τ]is fixed, wherenis the unit vector normal to edgeEand pointing to the inside ofΩm;τis the unit anticlockwise tangential vector ofΩm. The forces on the edgeEexerted by vertexVof blockΩsare referred to as the contact forces, including the normal forcepnnand the tangential forcepττ.Clearly, blockΩimight be acted by the contact force(pmnnm,pmττm)on some edge, and by the contact force(−psnns,−psττs)at some vertex, where[ns,τs]is the local frame of the contact-pair containing the vertex. Fig. 2illustrates such a case.From the weak form of momentum conservation of a blockΩi, we have its discrete form as(4)Mid̈i+Eidi−Cipi=bi.Here,biis the 6-dimensional generalized force vector dual to the generalized displacement vectordi, calculated as in  [1].piis the contact force vector consisting of the2nicontact force components from thenicontact-pairs onΩi, written as(5)pi=(p1n,p1τ,…,pnin,pniτ)T.Miis the6×6mass matrix,(6)Mi=ρ̄∫ΩiTiTTidΩ;Eiis the 6×6 stiffness matrix,(7)Ei=(03×303×303×3SiD3×3),withSi=area ofΩiandD=3×3elastic matrix;Ciin Eq. (4) is the6×2nimatrix defined as(8)Ci=[Ci1,Ci2,…,Cij,…,Cini],where eachCijis the6×2matrix associated with thejth contact-pairEj–VjofΩi, reading(9)Cij(xj,yj)=sjTiT(xj,yj)[nj,τj],for the contact-pair indexj=1,…,ni. Here,[nj,τj]is the local frame of thejthcontact-pair.(xj,yj)is the coordinate of the contact point ofEj−Vj. If edgeEjbelongs toΩi, the contact point is the projectionVj′ofVjonEjandsjequals 1; if vertexVjbelongs toΩi, the contact point is vertexVjandsjequals−1.The derivation of Eq. (4) is based on the assumption thatΩiis elastic, with details in  [27]. More sophisticated constitutive laws for blocks, such as  [30], should be implemented without essential difficulties. In this study, however, contact nonlinearity is our major concern.The time integration is still conducted as in the original DDA, namely,(10)d̈i=2Δ2di−2Δv0i,whereΔis the time length of this time step;v0iis the velocity vector ofΩiat the beginning of this time step.Substituting Eq. (10) into Eq. (4), we have(11)Kidi−Cipi=qi.Here,Kiis the6×6equivalent block stiffness matrix, defined as(12)Ki=2Δ2Mi+Ei;qiis the 6-dimensional equivalent block force vector, defined as(13)qi=2ΔMiv0i+bi.SinceKiis invertible  [28], by premultiplying Eq. (11) withKi−1, we can expressdias,(14)di=Fipi+fi,in terms of the contact force vectorpiofΩi, whereFiis the6×2niflexibility matrix(15)Fi=Ki−1Ci,andfiis the 6-dimensional vector, called the flexibility vector,(16)fi=Ki−1qi.BothFiandfikeep invariant within this time step.Having obtained the displacement vectordiofΩi, we have the velocity vectorviofΩiat the end of this time step, namely(17)vi=v0i+Δd̈i,viwill be deemed the initial velocity vectorv0iat the next time step.At the beginning of each time step, all the contact-pairs are first detected, which can be conducted by the conventional DDA code. In this section, we will derive the contact conditions that a contact-pair must follow at the end of a time step.In the following deduction, we will take thekthcontact-pairEk–Vkas an instance, with edgeEkbelonging to blockΩiand vertexVkto blockΩj, and[nkτk]as the local frame, as shown in Fig. 3.At the end of a time step, the normal gapgknof contact-pairEk–Vkis the projection of the vectorVkVk′⃗ontonk, namely,(18)gkn=nkT(xi−xj),xiandxjare the respective position vectors ofVk′andVkat the end of this time step, reading(19)xi=xi0+Ti(xi0,yi0)di,(20)xj=xj0+Tj(xj0,yj0)dj,withxi0the position vector ofVk′at the start of this time step and,xj0the position vector ofVkat the start of this time step.By expressingdiin Eq. (19) anddjin Eq. (20) in terms ofpiandpjrespectively, and then substituting them back to Eq. (18), we have the normal gap(21)gkn=pijn+gijn,in terms of independent variablespi(the contact force vector ofΩi) andpj(the contact force vector ofΩj), with(22)pijn=nkiTpi−nkjTpj,(23)nkiT=nkTTiFi,nkjT=nkTTjFj,(24)gijn=nkT(xi0−xj0+Tifi−Tjfj).Here,nkiandnkjare2ni- and2nj-dimensional vectors, respectively;FiandFjare the flexibility matrices,fiandfjare the flexibility vectors ofΩiandΩj, with definitions in Eqs. (15) and (16), respectively.The constraints of neither overlapping nor tensile give rise to the complementarity condition(25)gkn≥0,pkn≥0,andgknpkn=0.The complementarity condition is equivalent to the variational inequality, denoted by VI-n(k): findpkn≥0, such that(26)(qkn−pkn)gkn≥0,∀qkn≥0.Here,gknis deemed the function ofpiandpjwith the definition in Eq. (21).As an aside, the complementarity theory and algorithm have been extensively applied to the solution of engineering problems. For example, Areias et al. [30] derived a nonlinearity complementarity problem from the extrinsic plastic cohesive law combined with the discrete version of equilibrium form.At the end of this time step, the tangential slidegkτof contact-pairEk–Vkis defined as the movement ofVk′relative toVkalong edgeEk, namely,(27)gkτ=τkT(xi−xj).Substitution of Eqs. (19) and (20) into (27) yields the expression ofgkτas(28)gkτ=pijτ+gijτ,in terms of the contact force vectorpiofΩiand the contact force vectorpjofΩj, with(29)pijτ=τkiTpi−τkjTpj,(30)τkiT=τTTiFi,τkjT=τTTjFj,(31)gijτ=τT(Tifi−Tjfj).Here,τkiandτkjare2ni- and2nj-dimensional vectors, respectively.The Coulomb friction law followed in this study leads to the following condition(32)gkτ{≥0,ifpkτ=−τ(pkn)=0,if|pkτ|<τ(pkn)≤0,ifpkτ=τ(pkn).That is to say,gkτandpkτhave the relationship as in Fig. 4. Here, the tangential slidegkτis deemed the function ofpiandpj, defined in Eq. (28), andτ(pkn)is the shear strength corresponding to the normal forcepkn, reading(33)τ(pkn)=ck+μkpkn,withμk=frictionfactor,ck=innercohesion.Again, the relationship (32) is equivalent to the quasi-variational inequality, denoted by QVI-τ(k): find|pkτ|≤τ(pkn)such that(34)(qkτ−pkτ)gkτ≥0,∀|qkτ|≤τ(pkn).Here, the prefix “Q” of VI is due to the fact that the constraint interval[−τ(pkn),τ(pkn)]depends on the normal contact forcepknto be determined.Suppose there areNcontact-pairs in the current time step, and hence2Ncontact force components are to be determined, denoted by the contact force vectorp∈R2NpT=(p1n,p1τ;⋯;pNn,pNτ),withpknandpkτthe respective components of the normal and tangential contact force components of thekthcontact-pair. Hereafter, we use semicolons to separate the normal and tangential contact force components of distinct contact-pairs.From the deduction of Section  3, thekthcontact-pair has two independent variablespknandpkτ, and contributes two inequalities: VI-n(k)and QVI-τ(k). The number of variational inequalities equals the number of contact force components, which makes the system determinant. By letting subscriptktraverse all theseNcontact-pairs, we have the variational formulation of DDA as follows.Find the contact force vectorp∈X(p)⊂R2N, such that(35)(q−p)TG(p)≥0,for anyq∈X(p). This problem will be denoted byQVI(X,G)subsequently.Here, the constraintX(p)is a closed set inR2N, which is dependent on solutionp, with the definition as(36)X(p)=X1(p1n)×X2(p2n)×⋯×XN(pNn),whereXi(pin)⊂R2is the constraint set of the contact forcespinandpiτin theith contact-pair, which is dependent on the normal contact forcepinof theith contact-pair, defined by(37)Xi(pin)={(qn,qτ)|qn≥0,|qτ|≤τ(pin)}=[0,∞)×[−τ(pin),τ(pin)],fori=1,…,N, withτ(pin)defined in Eq. (33).The function-valued functionG:R2N→R2N, called the gap function, is defined as(38)G(p)=[g1n(p),g1τ(p);⋯;gNn(p),gNτ(p)]T,in whichgin(p)is the normal gap of theith contact-pair defined by Eq. (21), andgiτ(p)is the tangential slide of theith contact-pair defined by Eq. (28).To this point, we have derived the dual form of DDA with the contact forces as the basic variables, DDA-d. From the perspective of variational calculus, the original DDA is the primal form since it takes the block displacements as the independent variables.The number of basic variables of DDA-d is2N, while the number of basic invariables in DDA is6M, withMbeing the number of the blocks. In general, no rules can tell which one of2Nand6Mis larger. It appears that2N≈6M, in most applications. Anyway, the number of basic variables in DDA-d is far less than that in  [26–29].Most of the solution process of DDA-d coincides with DDA. But DDA-d does not assemble the global stiffness matrix. The open–close iteration in DDA is replaced by the solution ofQVI(X,G)to be expounded in the next solution, which will be referred to as the compatibility iteration. Once the compatibility iteration is finished, both the momentum conservation of the block system and the contact conditions are satisfied.Here is the solution process to a time step of DDA-d.① Collect all the contact-pairs by the contact detection.② Calculate and save the6×2niflexibility matrixFiby Eq. (15) and the 6-dimensional flexibility vectorfiby Eq. (16) of all the blocks.③ Calculate and save the four vectors:nki,nkjby Eq. (23), andτki,τkjby Eq. (30), and the two numbers:gijnby Eq. (24) andgijτby Eq. (31), of all the contact-pairs.④ Carry out the compatibility iteration to solve for the contact vectorp.⑤ Calculate and save the 6-dimensional displacement vectordiof all the blocks by Eq. (14).⑥ Update the configuration of all the blocks according to the scheme in  [31].Each of the main processes, namely steps ②–⑥, can be highly parallelized. For example, in step ③, the computation of the four vectorsnki,nkjby Eq. (23), andτki,τkjby Eq. (30), associated with thekthcontact-pair, can be conducted independently from other contact-pairs. The major computation of DDA-d lies in the compatibility iteration, namely step ④, which is just the content of the next section.In step ⑥, the reason why the configuration of the blocks is updated according to the scheme in  [31] is that the direct accumulation of the displacement vectordihas been observed the false volume expansion, which can be easily overcome by fixing a local frame onto each block that moves with the block and accumulating the block displacements in the local frame. More details can be found in  [31].The compatibility iteration is for the solution ofQVI(X,G)posed in Section  3. QVI is an extension of VI, and also a very active field. But no mature algorithm is available forQVI(X,G). Even in the magnum opus  [32], no algorithm for QVI is expounded. In order to solveQVI(X,G), an iterative algorithm is designed based on the standard projection–contraction algorithm for the standard VI.InQVI(X,G), setX(p), defined in Eq. (36), is a rectangle inR2N. The even-dimensional constraints ofX(p), namely the constraints on the tangential contact force components, vary with the solution vectorp, leading to huge difficulties in finding the projector ofX(p).Ifpis given, thenX(p)is determined by Eq. (36). Here,pis an approximation to the solution. In this case, the projectionq̄of any vectorq,q=(q1n,q1τ;⋯;qNn,qNτ)T∈R2N,ontoX(p), is given by(39)q̄T=(q̄1n,q̄1τ;⋯;q̄in,q̄iτ;⋯;q̄Nn,q̄Nτ).Here,q̄inis the projection ofqinonto interval[0,∞), namely,q̄in=max(0,qin);q̄iτis the projection ofqiτonto the closed intervalτi=[−τ(p̄in),τ(p̄in)], withp̄in=max(0,pin),andpinbeing the(2i−1)thcomponent of vectorp; andτ(p̄in)=ci+μip̄in.The one-dimensional projection onto a closed interval is referred to Appendix A.Now we give two procedures that are repeatedly invoked during the compatibility iteration, the calculation of gap functionG(p)and the projection of vectorqontoX(p), denoted byq̄=Π(q;p). The algorithm forQVI(X,G), see Appendix B, is based on the projection–contraction method.The algorithm has the contact force vectorpand the Boolean argument, bswitch, as input, and the vector-valued gap functionGp=G(p)as output, with the definition asGp=(g1n,g1τ;⋯;gkn,gkτ;⋯gNn,gNτ)T,with the componentsgknandgkτbeing given in Eqs. (21) and (28), respectively. The Boolean argument, bswitch, is used to indicate whether or not switching to another contact-pair to those singular contact-pairs, which will be explained after the algorithm.After exiting from the algorithm, the contact force vectorpdoes not change, but some singular contact-pairs might change.By a singular contact-pairE–V, we mean the vertexVis very close to one end of the edgeE, and the end ofEis also a vertex (a convex angle), leading to a vertex–vertex contact. Every vertex–vertex contact has two possible contact-pairs, but only one is active at a moment. At the start of a time step, usually we do not know which contact-pair in a vertex–vertex contact should be taken. During the compatibility iteration, therefore the active contact-pair might switch between the two possible contact-pairs of the vertex–vertex contact so that the correct contact is guaranteed by the end of this time step. Appendix C elucidates upon how to switch to another contact-pair in a vertex–vertex contact.Suppose that vectorpis an approximation to the solution, and vectorp̃is another approximation updated fromp. During the compatibility iteration, it is necessary to calculate the gap function difference,dG=G(p)−G(p̃). In order to be physically meaningful, any two vectors,aandb, in the expression ofa−b, must be defined in the same coordinate system, suggesting that the calculation ofG(p̃)should be in the same local frames of the contact-pairs asG(p). Therefore, whenever calculating the difference of gap functions ofG(p)andG(p̃), this algorithm should be invoked in this way,dG=G(p,true)−G(p̃,false).With the2N-dimensional vectorqand the approximate solutionpas input, defined byqT=(q1n,q1τ;⋯;qkn,qkτ;⋯;qNn,qNτ),pT=(p1n,p1τ;⋯;pkn,pkτ;⋯;pNn,pNτ),this algorithm calculates the projectionq̄of vectorqontoX=X(p), which is the constraint set associated with vectorp. The output includes the2N-dimensional projectionq̄ofqontoX(p), defined asq̄T=(q̄1n,q̄1τ;⋯;q̄kn,q̄kτ;⋯;q̄Nn,q̄Nτ).Neitherqnorpis changed after this algorithm.The projection of theNcontact-pairs in the above algorithm can be shared by many different processors in that the projection of(pin,piτ)of theith contact-pair has no relation to the projection of(pjn,pjτ)of thejth contact-pair, suggesting the above loop can be split in a parallelization way.To demonstrate the proposed procedure, in this section we will select some typical examples including those designed by the inventor.Shown in Fig. 5are two blocks on a rectangular block, the left block horizontally slides with no friction to the right at a constant speed, and will be in collision with the left block at rest. All blocks have the same material parameters: densityρ̄=2.8×103kg/m3, Young’s modulusE=2.0×104MPa, and Poisson’s ratioυ=0.25. The four vertices of the bottom block are fixed with springs of stiffness2.0×108MN/m, acceleration of gravityg=9.8m/s2. The computational control parameters include the allowable maximum displacement ratioρ=0.1, time step lengthΔ=0.05s, 160 time steps, and stop errorε=1.0×10−10.Before collision, speed of the left block isv=5.0×10−1m/s. After collision, the left block and the right block both slide to the right, their speeds are1.7301×10−5m/s,4.9998×10−1m/s, respectively. Compared with the theoretical values,0m/sand5.0×10−1m/s, the error is very small.Fig. 6displays the variation in momentum of the two blocks before and after collision.Shown in Fig. 7is a standard benchmark to validate precision of DDA, where a small block is sliding down a ramp with a slope angle of30∘. The block and the ramp have the same material parameters: densityρ̄=2.75×103kg/m3, Young’s modulusE=2.0×104MPa, and Poisson’s ratioυ=0.25. The friction angle between the block and the ramp is 20°. The three vertices of the ramp are fixed with springs of stiffness2.0×108MN/m. Acceleration of gravityg=9.8m/s2.The computational control parameters include the allowable maximum displacement ratioρ=0.1, time step lengthΔ=0.01s, and 300 time steps. The stop error of the compatibility iteration is set such that DDA and DDA-d yield almost equal penetration between the two blocks.The following observations can be made from Fig. 8. When the allowable penetration is set not very strict, DDA has an acceptable displacement precision, as shown in Fig. 8(a). If the penetration is set stringent, as shown in Fig. 8(b), DDA has a worse precision and becomes instable. Instead, DDA-d behaves excellently in both cases, with much higher precision than DDA.Some researchers believe that only in the case of numerous blocks does DDA yield multiple solutions. However, Bao and Zhao gave a counter-example  [33]. Shown in Fig. 9is a four-block system on a fixed table with gravity neglected, and all the blocks keep still at the beginning till the force with a ratio of 4:3 is exerted.All the blocks have the same material properties: mass densityρ̄=2300kg/m3, Young’s modulusE=10GPa, friction angle between blocksϕ=15°and cohesionc=0. The computational control parameters include: the allowable maximum displacement ratioρ=0.05, time step lengthΔ=0.01s, stop errorε=1.0×10−10, and 20 time steps. The DDA normal contact spring stiffness is4×105MN/m, the point forceFT=(−4×107,−3×107)KN is applied on block A. The dynamic factor is set zero for the static analysis.Shown in Fig. 10are the solutions by DDA and DDA-d. Bao and Zhao  [33] believed that the solution by DDA was incorrect with the argument as follows.SinceFx/Fy=4/3, i.e,|Fx|>|Fy|, the deformation along the horizontal direction is larger than that along the vertical direction. Therefore, the vertex of block A should move horizontally along the top edge of block C, rather than vertically along the side edge. In order to reach such a state, Bao and Zhao  [33] suggested that a temporary spring be fixed between the two vertices of blocks A and C.The authors think that both solutions illustrated in Fig. 10 are acceptable, although DDA-d gave a more likely solution as shown in Fig. 10(b).To be frank, the author’s team have made huge efforts to remove completely contact springs, which led to complementarity based algorithms  [26–28] and variational inequalities based algorithm  [29]. Albeit a little progress, all these algorithms become extremely inefficient if there are a large number of vertex–vertex contacts.Now the inefficiency has been improved essentially, which will be illustrated by the inventor designed example of a missile penetrating an underground infrastructure, where, as shown in Fig. 11, there are 1689 blocks, and up to 11000 contact-pairs. Most of contacts are vertex–vertex contact, so the problem is extremely singular.For the missile, densityρ̄m=0.5, Young’s modulusE=4×105, and Poisson’s ratioυ=0.25. For other blocks, densityρ̄b=0.3, with the same Young’s modulus and Poisson’s ratio as the missile. All the joints are set no cohesion and no friction. The acceleration speedg=8.0.Now let the missile vertically penetrate the block pile at an initial speed of 274. The allowable maximum displacement ratioρ=0.003, the toleranceε=10−4, a very stringent error control, 280 time steps are conducted and time length is automatically selected.Shown in Fig. 12are the configurations at time steps 100, 200, and 280, respectively.A PC running this example has the configuration as follows: 4G RAM and 3.4 GHz Intel Core i7 CPU. It took 8.2 min for DDA-d to conduct this example, a tolerable time consumption. DDA’s time consumption on this example is 4.3 min.Considering DDA-d is easy to be highly parallelized, the authors are quite confident that the solution efficiency will be enhanced considerably by means of the GPU technique or the parallelization in future.

@&#CONCLUSIONS@&#
With the contact forces as the basic variables, the dual form of DDA, DDA-d, can accurately satisfy the contact condition as well as the momentum conservation, while DDA only approximately satisfies the contact condition because it has to allow for penetration between blocks in contact. The proposed algorithm has reached a practical level in accuracy, robustness and efficiency, and finally accomplished the dream to avoid completely virtual contact springs.DDA-d is highly superior to DDA in precision and numerical stability, and its solution efficiency is comparable with DDA. Considering the fact that the algorithms for DDA-d can be highly parallelized, however, DDA-d will exceed DDA in the solution efficiency if it is parallelized in future. Since much time has to be spent in testing stiffness of contact springs whenever DDA is used to analyze geotechnical problems, the total time of DDA-d in solving an engineering problem might be less than DDA.Since DDA-d does not assemble the global stiffness matrix, it can solve a larger number of blocks than DDA.However, we have to admit that the above advantages of DDA-d over DDA are based on the assumption of linear displacement mode of blocks, where the dimension of stiffness matrices of all the blocks is only 6, and the inversion of these stiffness matrices needs very few computations. If all the blocks are discretized with meshes to enhance their deformation accuracy, the dimensions of stiffness matrices of these blocks will become much higher, and accordingly the inversion of them will become a huge task. In that case, a highly efficient solver for linear equations is vital to maintain the solution efficiency, which will be our next effort.