@&#MAIN-TITLE@&#
Scheduling: Agreement graph vs resource constraints

@&#HIGHLIGHTS@&#
The complexity of SWA is closed for m=2 and at most two values of processing times.Resource-constrained scheduling is sNP-hard for m=2 andpi∈{a,2a+b}with b≠0 andb≠-a.Resource-constrained scheduling: two machines,pi∈{a,2a}is polynomial.Another polynomial case for resource-constrained scheduling is presented.Resource-constrained scheduling: two machines,pi∈{1,2},ri∈{0,r}is strongly NP-hard.

@&#KEYPHRASES@&#
Scheduling,Complexity theory,Identical machines,Agreement graph,Resource constraints,

@&#ABSTRACT@&#
We investigate two scheduling problems. The first is scheduling with agreements (SWA) that consists in scheduling a set of jobs non-preemptively on identical machines in a minimum time, subject to constraints that only some specific jobs can be scheduled concurrently. These constraints are represented by an agreement graph. We extend the NP-hardness of SWA with three distinct values of processing times to only two values and this definitely closes the complexity status of SWA on two machines with two fixed processing times. The second problem is the so-called resource-constrained scheduling. We prove that SWA is polynomially equivalent to a special case of the resource-constrained scheduling and deduce new complexity results of the latter.

@&#INTRODUCTION@&#
In this paper, two scheduling problems are addressed. The first is scheduling with agreements (Bendraouche & Boudhar, 2012), SWA in short, whose input consists of a setV={J1,J2,…,Jn}of n jobs where each jobJi(i=1,…,n)has a processing timepiand a release dateri. These jobs must be scheduled on a set of m identical machines. We assume that there is a graphG=(V,E)over the jobs, called the agreement graph. Each edge in E models a pair of agreeing jobs that can be scheduled concurrently on different machines. The agreement constraints are such that only agreeing jobs can be scheduled concurrently. A schedule is an assignment of jobs to the machines which specifies for each job the time interval and the machine on which this job is to be processed. A feasible schedule is a non-preemptive one which respects the agreement constraints. The aim is to find a feasible schedule that minimizes the makespan. Motivations and applications of this problem can be found in Bendraouche and Boudhar (2012), Baker and Coffman (1996), Halldorsson et al. (2003), Bodlaender and Jansen (1995), Gardi (2009) and Even, Halldorson, Kaplan, and Ron (2009).To be in concordance with the scheduling notation, the SWA problem is also denotedP|AgreeG=(V,E),…|Cmax.The second problem is (discrete) resource-constrained scheduling defined by a setJ={J1,…,Jn}of n jobs, having processing timesp1,…,pnand release datesr1,…,rnrespectively. All jobs must be scheduled non-preemptively on m identical machines. Besides the machines, we suppose there are s types of additional renewable resourcesR1,R2,…,Rs, which are available inu1,u2,…,usunits respectively. Each job requires for its processing specific amounts of resources. Thus, each jobJi(i=1,…,n)is characterized by (1) the resource requirement vectorR(Ji)=[R1(Ji),…,Rs(Ji)]where0⩽Rk(Ji)⩽uk(k=1,…,s)represents the number of units of resourceRkrequired for the processing of the jobJi, and (2) the processing timepiand its release dateri. Moreover, we assume that all required resources are granted to a job before its processing begins and they are returned by the job after its completion. In the literature this problem is denoted byP|resλδρ|Cmaxwhereresλδρdescribes the additional resources as introduced in Blazewicz, Lenstra, and Rinnooy Kan (1983). The entryλ∈{·,s}indicates the number of different resources,δ∈{·,o}specifies the resources availabilities andρ∈{·,r}indicates the resource requirements. Ifλ=s,δ=o,ρ=rthis means that the number of resources is bounded by s, the resource availabilities is bounded by o and the resource requirements is bounded by r respectively. If an entry equals “·”, the corresponding amount is specified by the input.Another related problem worth to be cited is the so-called multiprocessor jobs scheduling with model “fix”. In this problem n jobs are to be processed on m dedicated processorsM1,M2,…,Mm. Each jobJirequires during its processing time periodpia subsetμi⊆{M1,M2,…,Mm}of processors simultaneously. Following the notation of Blazewicz, Ecker, Pesch, Schmidt, and Weglarz (2001), this problem is denotedP|fixj|Cmax. This multiprocessor jobs scheduling can be seen as a special case of SWA problem with agreement graphG=(V,E)such that V is the set formed by the n jobs and that(Ji,Jj)∈E⇔μi∩μj=ϕ. Furthermore, the number of machines in the SWA problem must be sufficiently large e.g. min{m,n}.The remainder of this paper is organized as follows. Section 2 describes the literature review. Section 3, presents new complexity results for the SWA problem in the case of two machines with at most two distinct values of processing times. In Section 4, the polynomial equivalence between SWA and resource-constrained problem is proved from which new complexity results of the latter are derived. Concluding remarks constitute Section 5.

@&#CONCLUSIONS@&#
