@&#MAIN-TITLE@&#
Optimal ship navigation with safety distance and realistic turn constraints

@&#HIGHLIGHTS@&#
We consider the optimal ship navigation problem in the presence of obstacles.We explicitly account for safety distance and realistic ship turn radius constraints.We present a graph theoretic solution on an appropriately weighted directed graph.Our methodology is illustrated on a merchant ship ice navigation example.

@&#KEYPHRASES@&#
Graph theory,Shortest path,Ship navigation,Turn-radius constraint,A,∗ algorithm,

@&#ABSTRACT@&#
We consider the optimal ship navigation problem wherein the goal is to find the shortest path between two given coordinates in the presence of obstacles subject to safety distance and turn-radius constraints. These obstacles can be debris, rock formations, small islands, ice blocks, other ships, or even an entire coastline. We present a graph-theoretic solution on an appropriately-weighted directed graph representation of the navigation area obtained via 8-adjacency integer lattice discretization and utilization of the A∗ algorithm. We explicitly account for the following three conditions as part of the turn-radius constraints: (1) the ship’s left and right turn radii are different, (2) ship’s speed reduces while turning, and (3) the ship needs to navigate a certain minimum number of lattice edges along a straight line before making any turns. The last constraint ensures that the navigation area can be discretized at any desired resolution. Once the optimal (discrete) path is determined, we smoothen it to emulate the actual navigation of the ship. We illustrate our methodology on an ice navigation example involving a 100,000 DWT merchant ship and present a proof-of-concept by simulating the ship’s path in a full-mission ship handling simulator.

@&#INTRODUCTION@&#
Seaborne shipping is a major form of transportation that accounts for about 90% of world’s trade. As of 2011, there are more than 100,000 seagoing commercial ships in the world transporting over 8000 million tons of cargo each year (UN, 2011). As the world’s population grows and countries increase their participation in international commerce, seaborne shipping continues to expand as a low cost, acceptable risk, and environment friendly form of transportation. In this study, we consider a ship navigation problem wherein the objective is find the (time-wise) shortest path from a given starting point s to a termination point t in the presence of obstacles subject to (i) safety distance and (ii) turn-radius constraints. We define an obstacle as any region in any shape or size that the ship needs to avoid in its s−t voyage. These obstacles can be debris, rock formations, small islands, ice blocks, other ships, or even an entire coastline. We assume that the obstacles are static, i.e., they do not move or change shape during the ship’s navigation, and we do not take into consideration environmental effects such as winds, waves, or sea currents. Our methodology involves directed 8-adjacency integer lattice discretization of the navigation area and utilization of the A∗ algorithm on the resulting graph.A novel aspect of our research is that we account for the following three real-world ship navigation phenomena as part of the turn-radius constraints: (1) the ship’s port (left) and starboard (right) turn radii are different, (2) ship’s speed reduces while turning, and (3) the ship needs to navigate a certain minimum number of lattice edges along a straight line before altering course. The third constraint ensures that the navigation area can be discretized at any resolution needed. These three constraints together will be referred to as the ship-turn constraints. In addition, we fully parameterize turn-radius and safety distance constraints in the following sense: (i) different (left and right) turn-radii and turn-speed can be specified based on the particular characteristics of the ship, and (ii) safety distances can be defined at the obstacle level based on the nature of the obstacle. Implementation of our methodology requires non-trivial modifications to the underlying graph in order to preserve optimality. These modifications include making certain number of copies of each vertex, defining an appropriate neighborhood structure, and assigning edge lengths accordingly. Once the optimal (discrete) path is determined, we smoothen it to emulate the actual (continuous) navigation of the ship. We illustrate our methodology on an ice navigation example in a full-mission ship handling simulator with a 100,000 DWT full-load-condition tanker ship and present a proof-of-concept by simulating the ship’s actual path. Here, DWT stands for deadweight tonnes, which is a measure of how much the tanker can carry safely including cargo, fuel, fresh water, and passengers (Gillmer, 1975).There exists a vast amount of literature on deterministic shortest paths and ship navigation—both in continuous and discrete settings. For the most part, continuous-space studies on ship navigation involve complex differential equations and/or calculus of variation with curvature constraints. These types of approaches typically do not scale well in the presence of a large number of arbitrarily-shaped obstacles and ship-turn constraints. Existing discrete-space studies, on the other hand, impose overly simplistic turn constraints while ignoring safety distance requirements. To our knowledge, ours is the first study in the literature that accounts for safety distance and the ship-turn constraints as described above in a graph-theoretical framework that also allows for full parametrization of these constraints.The rest of this manuscript is organized as follows: Section 2 provides an overview of previous work on ship navigation (both in continuous and discrete settings) and reviews existing studies on turn constraints. Section 3 formally defines the optimal ship navigation problem. Section 4 presents our navigation methodology in detail including the lattice discretization, modeling of the safety distance and turn constraints, and smoothing of the optimal path. Section 5 demonstrates our approach on an ice navigation example and Section 6 provides the output of a full-mission ship handling simulator. Summary, conclusions, and directions for future research are presented in Section 7. Lastly, Appendix A provides a brief overview of the A∗ and Dijkstra’s algorithms.In many real-world applications, a challenging yet critical task is to find shortest paths for wheeled vehicles, aircrafts, and ships in different terrains subject to various operational constraints. Hence, path planning problems and deterministic shortest paths in general have been studied extensively; particularly within the fields of transportation science, operations research, artificial intelligence, and robotics. Arguably, the most commonly used shortest path methods in the literature are the Dijkstra’s Algorithm (Dijkstra, 1959) and the A∗ Algorithm (Hart et al., 1968, 1972).Dubins’ car (Dubins, 1957) is an example of a forward-moving wheeled vehicle with a maximum turn angle. (Note that this turn angle is with respect to the vehicle’s present direction and that a maximum turn angle constraint can be converted to an equivalent minimum turn-radius constraint.) Path planning problems for Dubins’ car were primarily studied within the context of non-holonomic path planning (Bicchi et al., 1996). These types of problems are typically modeled as partial differential equation systems in continuous space and solved by numerical methods. This solution approach, however, is not effective in general due to the difficulty in incorporation of real-world physical constraints (Takei et al., 2010). The rapidly-exploring random tree (RRT) method of LaValle (1998) is an effective continuous-space algorithm for Dubins’ car that can handle a wide range of environmental constraints. However, the path obtained by the RRT method is not necessarily optimal as it is based on generation of random way-points over the course of navigation (Yang and Sukkarieh, 2008). To our knowledge, there are currently no available non-holonomic models that can be utilized for application of the RRT method for ship navigation. In addition, incorporating asymmetric left and right turn constraints as well as decreased speeds during turns into RRT seem to be rather difficult.Ship navigation in the presence of obstacles is inherently a continuous-space problem. However, incorporation of realistic operational constraints in a continuous setting is a challenging task. Therefore, previous researches on this topic primarily focused on discretization of the navigation area in various ways. A major advantage of a discretization approach is that it allows for utilization of well-established and extremely rich machinery of graph theory and network flows. For instance, the work of Fagerholt et al. (2000) on ship navigation utilizes a visibility graph discretization where the graph is constructed only partially during the solution process for improved efficiency. The study by Lee et al. (2002), on the other hand, uses pre-specified way points for discretization and employs a modified depth-first search algorithm. Neither of these studies consider any turn or safety distance constraints.Regarding turn constraints for ships, their incorporation in a continuous setting requires nonlinear maneuvering equations (Fang et al., 2005; Bhattacharyya and Haddara, 2006; Bakolas and Tsiotras, 2011) and is difficult in general (Hilten and Wolkenfelt, 2000). In graph-theoretical settings, generic maximum turn angle constraints in the literature seem to be limited to symmetric one-edge ahead turn constraints. However, such a limitation implies that resolution of the navigation area is essentially dictated by the turn-radius, which in turn, eliminates any possibility of working with a finer resolution for improved accuracy. These one-edge ahead turn constraints were modeled in various ways such as (1) vertex replication (Caldwell, 1961; Boroujerdi and Uhlmann, 1998; Clossey et al., 2001; Soler et al., 2007; Albiach et al., 2008), (2) modification of the Dijkstra’s Algorithm (Solka et al., 1995; Gutierrez and Medaglia, 2008), and (3) transformation of the original graph (Villeneuve and Desaulniers, 2005; Royset et al., 2009; Perugia et al., 2011; Geisberger et al., 2011; Mico and Soler, 2011; Pugliese and Guerriero, 2012). A comparison of the vertex replication method and modified Dijkstra’s Algorithm for road networks can be found in Vanhove and Fack (2012). Our methodology is based on the vertex replication technique where we split each vertex into copies labeled by the direction the ship is coming from as well as the distance traveled. Thus, immediate navigation history is incorporated into the present location, which in turn enables enforcement of the ship-turn constraints as defined in Section 1.A research area closely related to ours is mission planning for routing of military aircraft and unmanned aerial vehicles (Zabarankin et al., 2002; Bartlett et al., 2005). Some of these studies also consider minimum turn radius constraints (Szczerba et al., 2000; Royset et al., 2009; Zabarankin et al., 2006; Edison and Shima, 2011). Such mission planning studies, however, are not readily adaptable to ship navigation problems due to the fact that ships differ considerably from aircrafts and aerial vehicles with respect to their technological and operational constraints. In particular, aerial mission planning research often takes into account limited fuel storage constraints, which fundamentally changes the structure of the underlying problem and makes it computationally intractable (Royset et al., 2009). On the other hand, such fuel capacity constraints do not typically exist in ship navigation.In this section, we formally define the optimal ship navigation problem in the presence of obstacles, or the OSN problem in short. Without loss of generality, we assume that the navigation area is rectangular. In addition, we only consider polygon-shaped obstacles. This should not be seen as a limitation since a polygon approximation can be used to represent any geometric shape at any level of accuracy (Wu and Leou, 1993). We also assume that these polygons are non-self-intersecting as self-intersecting polygons can easily be transformed into non-self-intersecting ones without changing the geometric shape of the obstacle that the polygon represents. Nonetheless, we allow for non-convex and overlapping polygons. The terms polygon and obstacle shall be used synonymously in the rest of this work. The notation in Table 1characterizes our ship navigation model. In the model, one mile refers to one nautical mile, which corresponds to 1.151 (land) miles or 1.852kilometer. Ship’s speed is expressed in knots, with one knot representing a speed of one nautical mile per hour.For any obstacle p∈P, its buffer zone Bpis defined as the region whose boundary is comprised of points that are dpmeters away from the closest point on the obstacle’s boundary. In our model, we require that the ship does not enter the buffer zone of any obstacle, which we call the safety distance constraint. The ship’s left and right turning diameters are defined as ℓ×cland ℓ×crrespectively where ℓis the ship’s length between perpendiculars (LBPs) in meters. LBP refers to the length of the ship along the water line from the forward-surface of the stem to the after-surface of the sternpost. This method for specifying a ship’s turn radius is typical in seaborne navigation (American Bureau of Shipping, 2006). The ship’s turning angle at any point (with respect to its present direction) is constrained to be upper bounded by that of the curvature of the circle with respective left and right turn diameters.The Optimal Ship Navigation (OSN) Problem is then defined as follows: Given a set of obstacles P inside the navigation area A, a starting point s and a destination point t, find the time-wise shortest s−t path for a ship with straight (non-turn) speed k, turn speed k′, LBP ℓ, left-turn coefficient cl, and right-turn coefficient crsubject to safety distance and ship-turn constraints. Note that due to reduced turning speeds, time-wise shortest paths are likely to be different than Euclidean-distance shortest paths.

@&#CONCLUSIONS@&#
