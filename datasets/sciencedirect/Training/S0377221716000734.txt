@&#MAIN-TITLE@&#
Optimal allocation of emergency medical resources in a mass casualty incident: Patient prioritization by column generation

@&#HIGHLIGHTS@&#
We formulate a patient prioritization problem in mass casualty incidents (MCI).We take a column generation approach and develop a branch-and-price algorithm.Our algorithm produces solutions of acceptable quality quickly, important for MCI.Our formulation offers flexibility to incorporate diverse factors of real-world MCI.

@&#KEYPHRASES@&#
OR in disaster relief,Mass casualty incident,Triage,Emergency medical service,Column generation,

@&#ABSTRACT@&#
Mass casualty incidents create a surge in demand for emergency medical services, and this can often overwhelm the emergency response capacity. Thus, it is critically important to ration the emergency medical resources based on prioritization to maximize the lifesaving capacity. In a traditional triage scenario, the priority for receiving care is solely determined by a patient’s criticality at the time of assessment. Recent studies show that a resource-constrained triage is more effective in providing the greatest good to the maximum number of patients. We model this problem as an ambulance routing problem, and determine the order and destination hospitals for patient evacuation. This is formulated as a set partitioning problem, and we apply a column generation approach to efficiently handle a large number of feasible ambulance schedules. We show that the proposed algorithm with a column generation approach solves the problem to near optimality within a short computation time, and the solutions derived by the algorithm outperform fixed-priority resource allocations.

@&#INTRODUCTION@&#
A mass casualty incident (MCI) is one that involves a large number of injuries or deaths. The surge in demand for emergency medical services (EMS) following an MCI often means that the available resources are below what is necessary. This relative shortage of EMS resource is recognized as a central aspect of an MCI. For example, the World Health Organization (WHO) defines an MCI as “an incident which generates more patients at one time than locally available resources can manage using routine procedures” (WHO, 2007). In Korea, by considering the typical level of local EMS resources, an emergency incident involving six or more casualties is considered an MCI (Park, 2010).In Korea, EMS response data clearly shows that the surge in demand for EMS resources following an MCI negatively affects access to EMS. Park (2010) studied MCIs in Korea, and showed that the number of ambulances dispatched to incident sites was fewer than needed in 78% of MCIs. They also found that the response time and patient evacuation time exceeded the standard target in 77.5% and 63.9% of MCIs, respectively. Furthermore, Song et al. (2012) reported that when there is an EMS request that is unrelated but close to an MCI in time and space, the response time to those requests increases, indicating that the strain on EMS resources caused by an MCI is not confined to the incident itself. All these facts suggest that major efforts are needed to improve the quality of EMS responses to MCIs.One way to achieve the improvement is to effectively allocate available resources, e.g., ambulances, to best serve demands. Because MCIs inherently imply the shortage of resources, its allocation is a crucial decision making problem in emergency logistics in MCIs. In this paper, we study a resource-constrained triage, where the priority of patients to deploy the limited EMS resources is determined so that the response efforts lead to the greatest good to the maximum number of patients. In emergency medicine, triage is the process of assessing clinical severity of victims in an MCI (Sacco et al., 2005), and it is an essential part in determining treatment and transport priority for the victims in the MCI. While much research has been conducted for the relief resource allocation in MCIs (e.g., Caunhye, Nie, and Pokharel (2012); Manopiniwes and Irohara (2014)), transportation of casualty, in particular conjunction with triage has received relatively less attention.Traditional triage practice bases the prioritization on the severity of the victims’ injuries. A victim with injuries of higher severity and urgency first receives the attention and care of the EMS resources. Two of the most widely adopted triage methods are START (Simple Triage And Rapid Treatment) and SALT (Sort – Assess – Lifesaving Interventions – Treatment/Transport). In these triage methods, first responders evaluate the medical condition of victims based on a few quick tests, e.g., is the victim able to walk, breathe, or obey commands? According to the severity of their injuries, victims are classified into immediate, delayed, minor, and expectant/deceased, which are often color-coded as red, yellow, green, and black. The triage category is then used as a guideline for prioritizing the decision to deploy EMS resources. For example, ambulances transport patients in the highest severity group (i.e., immediate), followed by the delayed group, and so on.Note that, while the purpose of triage is to determine the priority for deploying limited resources, the traditional triage practice does not explicitly take into account the availability of resources. It has been recognized that this simplistic way of using the triage categories for transport priority decisions does not necessarily lead to the greatest good to the maximum number of victims (Benson, Koenig, & Schultz, 1996; Frykberg, 2005; Garner, Lee, Harrison, & Schultz, 2001; Jenkins & McCarthy, 2008; Sacco et al., 2005). First, the START and SALT methods are patient classification algorithms based on the severity of injuries, and are not actually resource allocation algorithms. As such, they do not consider the resource limitations or the scale of an MCI in determining priorities for allocating resources. Especially in cases where the available resources are in a dire shortage to serve all victims, more lives may be saved by deploying resources to patients with a higher chance of survival, as opposed to a higher severity. These patients are not necessarily in the immediate category. Second, traditional triage does not consider the temporal aspect of MCI responses. Some victims may experience conditions that require a timely response for survival (e.g., hemorrhage, asphyxia). For these conditions, it is recognized that the victim’s chance of survival deteriorates until they receive definitive care. The victim may not survive if the delay in care provision is excessively long. Thus, the medical condition of a victim who was placed in the immediate category at the initial triage may deteriorate over time such that, if re-evaluated, she would be classified as expectant. An implication of this temporal factor is that fixed-priority resource allocation is unlikely to deliver the best outcome, and the priority should be dynamically determined considering the expected change in the victims’ chance of survival. This is particularly relevant when the survival probability for victims in different categories drops with a differing pattern; for example, see Fig. 1.To overcome the potential shortcomings of the priority assignment in the traditional triage process, several recent studies have investigated a resource-constrained prioritization for emergency response to MCIs. To the best of our knowledge, the first attempt to analytically model resource-constrained patient prioritization was made by Sacco et al. (2005), who demonstrated the necessity and possibility of applying numerical and analytical approaches to a triage process. They proposed an integer programming model to optimally determine the patient transportation priority. A key notion introduced in their work was the survival probability function, which represents the deterioration in a patient’s chance of survival as a function of elapsed time. They estimated this function from a retrospective analysis of data from trauma patients.The work of Sacco et al. (2005) has been followed by several other studies. These studies can be classified into two streams (Mills, Argon, & Ziya, 2013). The first approach defines the prioritization as an ambulance scheduling problem, which is often formulated as a linear/integer program (Dean & Nair, 2014; Mizumoto, Sun, Yasumoto, & Ito, 2011; Sacco et al., 2005). These studies rely on the assumption that information needed to solve the mathematical program is available at MCI scenes, and the outcome is a real-time prioritization solution in the form of an ambulance schedule.The second stream of work identifies general rules and principles that can be applied to patient prioritization in MCIs (Argon, Ziya, & Righter, 2008; Jacobson, Argon, & Ziya, 2012; Li & Glazebrook, 2010; Mills et al., 2013). Many of these studies use stochastic scheduling to model the emergency services in MCIs (Argon et al., 2008; Jacobson et al., 2012; Li & Glazebrook, 2010). They aim to develop tactical insights for resource allocation by characterizing the structure of optimal policies for the stochastic scheduling problem. A deterministic approach has been applied for the same purpose. Mills et al. (2013) developed a fluid model describing the deterioration of a victim’s survival probability over time. Based on this model, they derived simple and effective prioritization policies.The method reported here belongs to the first stream of work, in that we model the patient prioritization as an ambulance scheduling problem. We derive the transportation priorities for the victims in an MCI by explicitly taking into account the details of ambulance operations. The novelties of our work are twofold. First, our model offers flexibility to consider various factors in the realistic decision-making environment in an MCI situation. For example, our model and solution technique allows us to easily incorporate multiple locations of MCI patients, hospital’s location, capacity and care level. Some extensions of our basic formulation are presented in Section 5 to illustrate the modeling flexibility. Second, in terms of the solution approach, our algorithm is based on a column generation formulation; hence we can in principle obtain optimal solutions for ambulance routing schedules unlike heuristic methods. Since computation time is of interest in the context of MCI response, we employ approximation schemes in the implementation of the proposed algorithm so that near optimal solutions are obtained fast.The remainder of this paper is structured as follows. In Section 2, we describe the problem of patient transport decisions in MCI and present an integer program formulation. Then, Section 3 presents the decomposition of the original integer program, and reformulates it as a set partitioning problem with a column generation approach. A solution method for this sub-problem is discussed, and the overall branch-and-price algorithm is presented. In Section 4, experimental results demonstrating the quality of the solutions are presented, followed by a detailed discussion in Section 5. Finally, we conclude this paper with a summary and some further remarks in Section 6.We consider a decision problem in the immediate aftermath of an MCI. The order in which victims are transported and their destination hospital, must be determined. We assume the following to be true at the moment of the prioritization decision (T=0):•All victims from the MCI have been identified, rescued, triaged according to the START classification, and prepared for loading onto ambulances;Victims in the expectant/deceased and minor categories are not transported until there are no more patients in the immediate and delayed categories;nAambulances are available to respond to the MCI, and all of the available ambulances are of identical type;The ambulances are present at the MCI scene, ready to start transporting the victims;An ambulance transports one patient at a time;There are nHhospitals in the region to admit the victims;The hospitals are identical in care capability, differing only in their size (i.e., number of victims they can admit); andThe survival probability for victims is a decreasing function of time: fI(t) for the immediate category, and fD(t) for the delayed category. These functions are known a priori.The first statement specifies that, for T > 0, there will be no new victims joining the queue for ambulance transport. This assumption is necessary for analytic problem formulation. It is a rather strong assumption and may not be true in a real MCI situation, where victims are rescued as a continuous stream. In such cases, patient priority decision needs to be re-computed as new victims are identified and rescued.11Although it is possible to re-solve and update a schedule whenever a new victim is identified, a better approach would be to model as a decision problem rather than a scheduling problem.The second assumption is justified by the fact that “priority decisions during emergency response mainly concern two (immediate and delayed) groups of patients” (Mills et al., 2013). Next, for the sake of simplicity in the mathematical model, we assume that no additional ambulances are dispatched to the MCI after T > 0. In Section 5, we show how this assumption can be relaxed to reflect the situation in which ambulances arrive at the scene at different times. For the hospitals, we assume all nHhospitals in the region can admit and provide appropriate quality care to both immediate and delayed patients. That is, a patient’s outcome does not depend on which of the nHhospitals she is sent to. In reality, however, hospitals have differing medical capabilities, e.g., Level-I, -II, and -III trauma centers, and sending a patient to the right hospital is important both in terms of the individual patient’s outcome and the overall effective use of hospital resources. Note that although equal capabilities are assumed for all hospitals, they each have a different capacity for treating the victims.The relaxation of the above assumptions is discussed in Section 5. Such relaxation renders the model more realistic to MCI situations. Our model is solved by a column generation procedure, and in the solution framework, the above assumptions can be relaxed by modifying the structure of the sub-problem without major modification in the model. This is a strong advantage of the proposed algorithm.The last statement deserves particular attention. We assume that patients in each triage category (i.e., immediate and delayed) follow a survival probability profile given by a known function of time, i.e., fI(t) and fD(t); see, e.g., Fig. 1. In emergency medicine and triage care, it is generally accepted that the timely provision of definitive care is crucial for the survival of a critically injured patient. Some research work has taken this notion further to establish the corollary that the chance of survival of a critically injured patient decreases as a function of the elapsed time from the injury until the provision of definitive care (Sacco et al., 2005; 2007; VictimBase, 2012). In Sacco et al. (2005; 2007), survival probability functions for injury victims were estimated for a given initial “RPM” (Respiration, Pulse, and Motor response) score, where a victim’s RPM score gradually decreases if no intervention is provided. In VictimBase (2012), which is a tool to create virtual victim data for research and training for MCI, the modelers define the transition of the patients’ condition as a function of time. For some specific medical conditions, e.g., hemorrhage shock, the concept of a gradual decrease in survival probability is appropriate, and the quantitative characterization of the survival probability function may be feasible with supporting evidence. Clearly, for many other conditions, including complex injuries, it is extremely difficult to estimate such a survival probability function, let alone its temporal profile. As the subject of estimating the survival probability is beyond the scope of this paper, and with due caution, we justify our use of fI(t) and fD(t) by the prior research that has used similar assumptions (Dean & Nair, 2014; Jacobson et al., 2012; Mills et al., 2013; Sacco et al., 2005; 2007).With the above assumptions, our problem is more formally described as follows. AtT=0,there are nIvictims in the immediate category, which we denote by the set ΩI. We let ΩDdenote the set of nDvictims in the delayed category. Note that for the formulation we assume two dummy jobs denoted by 0 and T. The set of ambulances and hospitals are denoted by sets K and H, respectively. Each hospital, indexed by h ∈ H, has a capacity limit, ch, and is located away from the MCI scene by τhtime unit. We assume that wIresources (e.g., doctor-hr) are required to treat a patient in the immediate category, and wDare required for a delayed patient. In an emergency department, it is generally true that treating critical patients consumes more resources (staff in particular) than treating a less-critical patient. Thus, it is appropriate to assume wI≥ wD. Therefore, our problem is to construct a set of victim transport schedules for nAambulances. Here, a schedule refers to a sequence of transport tasks, and a transport task is defined by a pair (p, h), where p ∈ {I, D} indicates the type of a patient. Fig. 2(a) graphically represents the example in whichnI=3,nD=1,nA=1,andnH=3. Fig. 2(b) shows the victim transport schedule for the ambulance.We model the ambulance scheduling problem described above by a mixed integer program (MIP). Our formulation is structurally similar to the parallel machine scheduling problem, but differs in that our problem involves a second decision layer (destination hospital) that affects the job processing time. The parallel machine scheduling problem refers to a problem of determining job-machine allocation and job sequencing in a system where identical machines are available and one job is processed by one of the machines. The decision variables of the problem are:•xijkh, which equals to 1 if ambulance k transports victim j to hospital h immediately after transporting victim i, and 0 otherwise;yih, which is 1 if victim i is sent to hospital h and 0 otherwise; andti∈R+,which represents the time of arrival for victim i at her destination hospital.xijkhindicates the consecutive pair of victims transported by an ambulance and the destination hospital. It completely specifies an ambulance schedule, andyihand tiare determined accordingly. yihindicates whether victim i is sent to hospital h.The objective of this model is to maximize the number of expected survivals from an MCI. Recall that the probability of survival for victim i (of class p) who arrives at a hospital at time tiis given by fp(ti). We can write the objective function as:(1)max∑i∈ΩIfI(ti)+∑i∈ΩDfD(ti).As mentioned in Section 2, we follow the common notion that fp(t) is monotone non-increasing in t. Thus, the objective function (1) seeks to minimize each tisuch that the entire sum is maximized. Note that both fIand fDare nonlinear in general. The objective function (1) is maximized subject to the following set of constraints:(2)∑k∈K∑h∈H∑i∈Ω∪{0},i≠jxijkh≤1∀k∈K(3)∑h∈H∑j∈Ω∪{T}x0jkh=1∀k∈K(4)∑h∈H∑i∈Ω∪{0}xiTkh=1∀k∈K(5)∑h∈H∑j∈Ω∪{T}xijkh−∑h∈H∑j∈Ω∪{0}xjikh=0∀i∈Ω,k∈K(6)∑k∈K∑i∈Ω∪{0},i≠jxijkh=yjh∀j∈Ω,h∈H(7)ti+τh+∑l∈Hyilτl−tj≤M(1−xijkh)∀i,j∈Ω,k∈K,h∈H(8)∑i∈ΩIwIyih+∑i∈ΩDwDyih≤ch∀h∈H(9)M′(1−∑l∈Hyil)≤ti∀i∈Ω(10)xijkh∈{0,1}∀i,j∈Ω,k∈K,h∈H(11)yih∈{0,1}∀i∈Ω,h∈H(12)ti∈R+∀i∈Ω∪{0,T}(13)y0h=0∀h∈HΩ is set of all patients, i.e., ΩI∪ ΩD, then constraint (2) ensures that each victim is transported at most once. Note it is allowed to not transport a victim if desirable. With dummy jobs, 0 and T, constraints (3) and (4) define the first and last transport task for each ambulance, respectively. Constraint (5) ensures the continuity of a patient transport sequence assigned to ambulance k. Constraint (6) requires that, if victim j is sent to hospital h, the task must be accordingly specified in the ambulance’s schedule. This constraint relatesxijkhtoyjh. Constraint (7) defines the hospital arrival time tjfor each victim, and M is a sufficiently large number. Constraint (8) ensures the total workload of hospital h is within its capacity limit. Constraint (9) assigns an arbitrarily large value M′ (M′ < M) to the hospital arrival time for those victims who are not transported at all. This is necessary when the amount of resources required by all victims exceeds the total resource capacity available in the local hospitals, i.e.,wInI+wDnD≥∑h∈Hch. In this case, some of the victims will not be admitted to a hospital, and in the objective function, their survival probability is computed to be zero by assigning them a large ti.Because we assume that all ambulances are identical, we do not need to distinguish between different ambulances. Thus, we can drop the ambulance index k from xijkhto simplify the formulation of (1)–(13) as follows:(14)(P)max∑i∈ΩIfI(ti)+∑i∈ΩDfD(ti)(15)s.t.(8),(9),(11)−(13)∑h∈H∑i∈Ω∪{0},i≠jxijh≤1∀j∈Ω(16)∑h∈H∑j∈Ω∪{T}x0jh=nA(17)∑h∈H∑i∈Ω∪{0}xiTh=nA(18)∑h∈H∑j∈Ω∪{T}xijh−∑h∈H∑j∈Ω∪{0}xjih=0∀i∈Ω(19)∑i∈Ω∪{0},i≠jxijh=yjh∀j∈Ω,h∈H(20)ti+τh+∑l∈Hyilτl−tj≤M(1−xijh)∀i,j∈Ω,h∈H(21)xijh∈{0,1}∀i,j∈Ω,h∈HAs noted earlier, (P) is a parallel machine scheduling problem, and it is well known that this class of problems is NP-hard (van den Akker, Hoogeveen, & van de Velde, 1999; Chen & Powell, 1999). Moreover, Mills et al. (2013) suggests the survival probability function f(t) be modeled by nonlinear functions such as log-logistic and log-normal. Using nonlinear functions in the objective function further increases the computational challenge of solving (P). As a computational exercise, we solved the simplified, linear version (PL) by replacing the original objective function with the total completion time (min∑i ∈ Ωti), and examined the size of problem instances that we can solve in a reasonable time. As expected, solving (PL) turned out to be quite problematic. For example, a problem instance ofn=20,nA=10,nH=4was not tractable for a commercial solver (CPLEX™v12).To overcome these difficulties, we re-formulate (P) as a set-partitioning problem. This set-partitioning problem is then solved by a column generation approach. Chen and Powell (1999) demonstrated effectiveness of a column generation approach for solving parallel machine problems. In the following section, we provide a detailed discussion on the reformulation of (P) and the solution method. We first give an overview of how our problem is modeled in the column generation framework. Then, in Section 3.1, we present the set-partitioning formulation. In Section 3.2, we present a sub-problem for column generation, which is formulated as a longest path problem with resource constraints. A branch-and-price algorithm, which guarantees the integrality and optimality of the solution, is discussed in Section 3.3. Some implementation issues for column generation are presented in Section 3.4.We reformulate the original problem (P) to decompose it into a master and sub-problem, and solve them in the column generation framework. The master problem is formulated as a set-partitioning problem, where we choose up to nAfeasible schedules to assign to each ambulance. Clearly, if the master problem contains all feasible schedules, we can obtain the optimal solution to (P). In general, however, the number of feasible schedules is prohibitively large. The column generation approach resolves this problem by solving a restricted master problem with a much smaller subset of feasible schedules. Then, the partial schedule set is iteratively updated until all partial schedules needed to construct the optimal solution are included in the restricted master problem. It is the sub-problem that determines whether the restricted master problem contains all necessary partial schedules. In the sub-problem, we find a schedule that maximizes the reduced cost for the current restricted master problem. If the maximum reduced cost is non-negative, the partial schedule is added to the feasible schedule set. The partial schedule set in the restricted master problem is updated, and we solve the updated restricted master problem. Then, the sub-problem is solved again with the updated dual variables to determine whether a new partial schedule should be added to the restricted master problem. This process is repeated until the maximum reduced cost found in the sub-problem is negative, which indicates that no more partial schedules need to be added. The effectiveness of the column generation approach is heavily dependent on how efficiently we can solve this sub-problem (Chen & Powell, 1999). Therefore, it is imperative to develop an efficient algorithm for the sub-problem by incorporating problem-specific properties of the target problem.Let Ψ denote the set of all feasible schedules for an ambulance, indexed by s. Recall that a schedule is a sequence of transport tasks, and a single transport task of taking a patient in class p to hospital h is denoted by a pair (p, h). For each schedule s ∈ Ψ, we associate three parameters gs, aps, bhsthat can be computed for a given s. Let gsdenote the expected number of survivals by schedule s. This is the sum of survival probabilities of all victims covered in schedule s. Because schedule s completely defines tifor all victims i that it covers, gscan be calculated given fI(t) and fD(t). Let apsbe the number of class-p victims covered by schedule s. For example,aIs=4(aDs=8)means that an ambulance operating on schedule s will transport four immediate-class (eight delayed-class) patients. For each hospital h and s, let bhsdenote the resources spent by hospital h to treat all victims assigned to it in schedule s. Using the above example (aIs=4,aDs=8), if all victims are sent to hospital h, thenbhs=4wI+8wD. Finally, we define binary decision variables λssuch thatλs=1if schedule s ∈ Ψ is selected, and 0 otherwise.We formulate our master problem as the following set-partitioning problem,22With the hospital capacity limitations, it is possible that some patients are not assigned to any schedule. In a strict sense, this type of problem is referred to as a set-packing problem.where we select at most nAfeasible schedules from Ψ to assign to the available nAambulances:(22)(Pmaster)max∑s∈Ψgsλs(23)s.t.∑s∈Ψapsλs≤np∀p∈{I,D}(24)∑s∈Ψbhsλs≤ch∀h∈H(25)∑s∈Ψλs≤nA(26)λs∈{0,1,…,nA}∀s∈ΨThe objective function (22) corresponds to the original objective function (14) in (P), and seeks to maximize the expected number of survivals by the selected set of schedules. Constraint (23) is related to constraint (15), and requires the number of class-p victims covered by all schedules to be no greater than the total number of victims in that class. Constraint (24) limits the number of victims sent to a hospital according to its capacity ch, which is analogous to constraint (8) in (P). Constraint (25) guarantees that we choose no more than nAschedules, so that each ambulance is assigned at most one schedule. Finally, constraint (26) imposes an integrality condition for the decision variables λs.(LPmaster), an LP relaxation of the master problem, is then solved by a column generation procedure. Because |Ψ| can be extremely large, we start with a subset of partial schedulesΨ˜,and then successively add columns by solving a column generation sub-problem.The restricted master problem (LPmaster) is a maximization problem. For such problems, a new candidate schedule with a non-negative reduced cost improves the objective function when added to (LPmaster). Thus, the goal of our sub-problem is to find a partial schedule s′ that has a non-negative reduced cost, i.e.,rs′≥0.Given (LPmaster) with the current partial schedule setΨ˜,the reduced cost of a candidate partial schedule s′ is a function of the dual variables of the master problem. Specifically, the reduced cost of schedule s′ is written as follows:(27)rs′=gs′−∑p∈{I,D}aps′·πp−∑h∈Hbhs′·ρh−σ,where πpand ρhare dual variables of (LPmaster) for constraints (23) and (24), respectively. σ is a dual variable corresponding to constraint (25). Variablesgs′,aps′,andbhs′are computed for a candidate schedule s′.This problem can be formulated as a longest path problem with resource constraints. In a longest path problem with resource constraints, visiting a node requires a certain amount of resources, and the total amount of available resources is limited. The objective of the problem is to find the path of maximum reward from an origin node voto a destination node vfwhile consuming no more than the available amount of resources.For our problem, we seek the path of maximum reward (i.e., maximum reduced cost) across a network in which each node represents the transport of a victim in class p to hospital h. Fig. 3shows an example of a network with two hospitals, H1 and H2. When node (p, h) is visited, wpresources of hospital h are consumed, and the number of remaining victims in class p decreases by one. We consider both victims and hospital resources to be the resources of the longest path problem. Then, the resource constraints that a path must satisfy for our problem are that: (1) hospital resources used by any schedule s should be no more than chfor each hospital h ∈ H, and (2) the number of victims in class I and D covered in schedule s should be no more than nIand nD, respectively.Note that, in our problem, more than one victim from each class can be transported to each hospital. For example, three class-I patients can be sent to hospital H1. This is represented in the network as multiple revisits to a single node. A path on a network that includes such multiple revisits is referred to as a non-elementary path. For a resource-constrained, non-elementary shortest-path problem, a pseudo-polynomial algorithm has been developed by Desrosiers, Dumas, Solomon, and Soumis (1995), and we modify this algorithm for our problem.Consider a sub-path κ from the origin node voto node vi. LetWidenote a vector that indicates the resources consumed while traversing the path κ.Wiconsists of two parts: the total number of patients in each class(xip),and the treatment resources used by the patients at each hospital(δih). That is,Wi={xiI,xiD;δi1,…,δinH}.The resource constraints are violated at nodevi=(p,h)if either: (1) all patients in class p have been transported by path (xip>np), or (2) the treatment resources at hospital h have been exhausted (δih>ch).We also let Ridenote the accumulated reward earned by traversing path κ. In this problem, reward Riis defined as the reduced cost of path κ. Recall that the reduced cost is computed by (27). For nodevi=(p,h),letvi−1=(p−,h−)denote a node that has been visited immediately before arriving at i. Note that an arc fromvi−1to virepresents a task of transporting a class-p patient to hospital h. Then, Riis obtained recursively by adding the incremental reduced cost for the current patient transport (i.e., arcvi−1to vi) to the cumulative reduced cost at the immediately preceding nodevi−1. That is,(28)Ri=Ri−1+ΔRi−1,iΔRi−1,i=fp(Ti)−πp−wp·ρhTi=Ti−1+τh−+τh.fpis the survivability function for class-p patients, which is a function of patient arrival times at the destination hospital. Tiis the arrival time of the class-p patient at hospital h. Tican be considered as the arrival time at node vi, and is obtained by adding the transport time for the current transport task to the arrival time at nodevi−1. The current transport task time is the travel time fromh−to the MCI scene and to hospital h. πpand ρhare the dual variables for constraints (23) and (24), respectively.Our algorithm, which is based on that of Desrosiers et al. (1995), searches all feasible paths in a network to find the longest path from voto vf. During the search, the consumed resources and reduced cost of all nodes on all sub-paths are recorded. This information is stored as a label for each path κ at each node i(Wiκ,Riκ). To reduce the number of labels tracked by the algorithm, the following dominance relation is applied to the labels (Desrosiers et al., 1995):Definition 1IfWiκ≤Wiκ′for all resources andRiκ≥Riκ′,label(Wiκ,Riκ)is said to dominate(Wiκ′,Riκ′).A label(Wiκ,Riκ)of node viis said to be efficient when no other label at node vidominates it.The above dominance relation allows us to consider only the efficient labels at each node in constructing the optimal path. This is because, when a sub-path to a node has a dominated label, it cannot be part of the longest path of the network. Let us consider the sub-paths κ and κ′ from voto vi, and assume that, at vi, a label(Wiκ,Riκ)dominates(Wiκ′,Riκ′). Suppose there exists a sub-path ν from vito vfsuch that a full pathκ′+νis feasible (i.e.,κ′+νsatisfies the resource constraints). Then,κ+νis also feasible, because κ consumes less resources than κ′. Since Riκis no less thanRiκ′,pathκ+νhas a greater reward than pathκ′+ν. Hence, κ′ cannot be a sub-path of the longest path.A label-setting method with first-in–first-out (FIFO) node selection is shown in Algorithm 1. The algorithm explores all nodes in the network to repeatedly update the list of efficient labels. When no more updates are feasible, the algorithm terminates and returnsEvfas its output. In the algorithm, functionF((Wi*,Ri*),j)returns label (Wj, Rj) given that the immediately preceding node isvi*.Wjis obtained by adding toWi*the additional resources consumed by the arc fromvi*to vj. Rjobtained by (28). Note that when node j is the final node vf, additional resource consumption is zero, and the incremental reduced costΔRi*,fis−σ. Finally, function EFF(Θi) returns the efficient labels from a set of node labels Θi. We define Ejto be a current set of efficient labels for node vj, and then EFF(Ej∪ (Wj, Rj)) removes any label in Ejthat is dominated by (Wj, Rj).Solutions to (LPmaster), λs, obtained by the column generation approach in Sections 3.1 and 3.2 are not necessarily integer solutions. To ensure the integrality condition for λs, a branch-and-bound algorithm is implemented. A branch-and-bound with column generation approach is referred to as a branch-and-price algorithm (Barnhart, Johnson, Nemhauser, Savelsbergh, & Vance, 1998; Vanderbeck & Wolsey, 1996). For our problem, we follow the algorithm proposed by Vanderbeck (2000); Vanderbeck and Wolsey (1996).In our branch-and-bound scheme, we use a depth-first search for node selection. That is, when the current node in the enumeration tree is active, we select one of the two child nodes to explore next. When the current node is pruned, we visit the other child node or return to the parent level. Pruning is determined by comparing the solution to (LPmaster, u), the master problem at current node u, with the current incumbent solution. If it is smaller than the current incumbent solution, the node is pruned; otherwise, it remains active and its child is explored next. For the initial incumbent solution at the root node, we compute an integer solution by solving (Pmaster) with a partial schedule setΨ˜obtained from (LPmaster, o).For the branching variables, we follow Vanderbeck and Wolsey (1996), as described below. Note that a schedule s is completely characterized33To be precise,WvfsandRvfstogether uniquely define a schedule s.by a resource vectorWvfs={xvfI,xvfD;δvf1,…,δvfnH}s. For node u of an enumeration tree, we can define a set of partial schedules Θ for some threshold vectorqu={x̲I,x̲D;δ̲1,…,δ̲nH}u:(29)Θqu={s|Wvfs(·)≥qu(·),s∈Ψ}.Now, lets˜denote a schedule selected as a fraction in (LPmaster, u) of node u, i.e.,λs˜is a positive non-integer. When there is at least one suchs˜in the solutions to (LPmaster, u), we can always chooseqjsuch that∑s∈Θqjλs=αj∉N(Vanderbeck, 2000; Vanderbeck & Wolsey, 1996). Then, branching is performed to create child nodes by adding the branching constraints for the set of partial scheduless∈Θqj:(30)∑s∈Θqjλs≥⌈αj⌉;∑s∈Θqjλs≤⌊αj⌋.In general, adding branching constraints changes the structure of the algorithm for the sub-problem to make it difficult to solve. In our problem, as branching constraints are added, (27) changes to incorporate the dual variables of the added constraints:(31)rs′=gs′−∑p∈{I,D}aps′·πp−∑h∈Hbhs′·ρh−σ−∑j∈Φ1s′∈Θqjβj,where Φ in the last summation term refers to the set of branching constraints at the current node, and βjis their corresponding dual variable. The indicator function in the summation term allows including dual variables only when s′ belongs to the partial schedule set that the branching constraint applies to. It turns out that we can still use Algorithm 1, with a slight modification, to account for the branching constraints.We modify Algorithm 1 to determine whether the longest path found belongs toΘqj. Recall that a label in Algorithm 1 is defined asWiκ={xiI,xiD;δi1,…,δinH}κ,and always increases as the search progresses (i.e., it can only consume more resources as more transport tasks are carried out). OnceWiκexceeds the threshold vectorqj, the final path that contains the sub-path κ also exceedsqj, and hence belongs to Φ as per (29). The modified algorithm evaluates the resource vector in an updated label againstqj, and, if the resource vector is greater thanqj, computesRiκusing (31).

@&#CONCLUSIONS@&#
