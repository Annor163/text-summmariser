@&#MAIN-TITLE@&#
Analysing the effects of solution space connectivity with an effective metaheuristic for the course timetabling problem

@&#HIGHLIGHTS@&#
We give a mathematical treatment of the NP-hard post enrolment-based course timetabling problem.We present a powerful two-stage metaheuristic-based algorithm to approximately solve it.We focus particularly on the issue of solution space connectivity.

@&#KEYPHRASES@&#
University timetabling,Metaheuristics,Solution space connectivity,

@&#ABSTRACT@&#
This paper provides a mathematical treatment of the NP-hard post enrolment-based course timetabling problem and presents a powerful two-stage metaheuristic-based algorithm to approximately solve it. We focus particularly on the issue of solution space connectivity and demonstrate that when this is increased via specialised neighbourhood operators, the quality of solutions achieved is generally enhanced. Across a well-known suite of benchmark problem instances, our proposed algorithm is shown to produce results that are superior to all other methods appearing in the literature; however, we also make note of those instances where our algorithm struggles in comparison to others and offer evidence as to why.

@&#INTRODUCTION@&#
Timetables are organisational structures that can be found in many areas of human activity including sports (Kendall, Knust, Ribeiro, & Urrutia, 2010), entertainment (Eliashberg et al., 2009), transport (Caprara, Fischetti, & Toth, 2002), industry (Blöchliger, 2004), and education (Lewis, 2008). In the context of higher education institutions, a timetable can be thought of as an assignment of events (such as lectures, tutorials, or exams) to a finite number of rooms and timeslots in accordance with a set of constraints, some of which will be mandatory, and others that may be optional (Corne, Ross, & Fang, 1995). According to McCollum et al. (2010), the problem of constructing such timetables can be divided into two categories: exam timetabling problems and course timetabling problems. It is also suggested that course timetabling problems can be further divided into two sub-categories: “post enrolment-based course timetabling”, where the constraints of the problem are specified by student enrolment data, and “curriculum-based course timetabling”, where constraints are based on curricula specified by the university. Müller and Rudova (2012) have also shown that these sub-categories are closely related, demonstrating how instances of the latter can be transformed into those of the former in many cases.The field of university timetabling has seen many solution approaches proposed over the past few decades, including methods based on constructive heuristics, mathematical programming, branch and bound, and metaheuristics (see Carter and Laporte, 1996; Carter and Laporte, 1998; Lewis, 2008; Schaerf, 1999 for surveys of these). A near universal constraint in problems considered in the literature is the “event-conflict” constraint, which specifies that certain pairs of events cannot be assigned to the same timeslot (e.g. there may be some students who need to attend both events). The presence of this constraint allows parallels to be drawn between timetabling and the well-known NP-hard problem of graph colouring, and it is certainly the case that heuristics derived from graph colouring are often used in timetabling algorithms (Burke & Newall, 1999; Carter, Laporte, & Lee, 1996; Thompson & Dowsland, 1998).1Timetabling problems can be transformed into graph colouring problems by considering the events as the vertices, the timeslots as the colours, with edges being added between any pair of events deemed to be conflicting.1Beyond this constraint however, timetabling problem formulations have also tended to vary quite widely in the literature because each institution usually has their own specific needs and protocols (hence constraints) that need adhering to. While making the problem area very rich, one noted drawback has been the lack of opportunity for accurate comparison of algorithms over the years (Lewis, 2008).In the past decade, this situation has been mitigated to a certain extent due to the organisation of a series of timetabling competitions and the release of publicly available problem instances (http://www.idsia.ch/Files/ttcomp2002; http://www.cs.qub.ac.uk/itc2007/; http://www.utwente.nl/ctit/hstt/itc2011/welcome/). In 2007, for example, the Second International Timetabling Competition (ITC2007) was organised by a group of timetabling researchers from different European Universities, which considered the three types of timetabling problems mentioned above: exam timetabling, post enrolment-based course timetabling, and curriculum-based timetabling. The competition operated by releasing problem instances into the public domain, with entrants then designing algorithms to try and solve these. Entrants’ algorithms were then compared under strict time limits according to specific evaluation criteria. Further details can be found in McCollum et al. (2010) and on the competition website (http://www.cs.qub.ac.uk/itc2007/).In this paper we give a mathematical description of the post enrolment-based course timetabling problem used for ITC2007. This particular formulation models the real-world situation where students are given a choice of lectures that they wish to attend, with the timetable then being constructed according to these choices. We present a two-stage algorithm for this problem, focussing particularly on issues surrounding solution space connectivity. We show that when this is increased via specialised neighbourhood operators combined with sensible design decisions, state of the art performance across a range of problem instances can be achieved. In Section 3, we present a review of the most noteworthy and/or recent high-performance algorithms for this problem, before going on to describe our method and its operators in Sections 4 and 5. The final results of our algorithm are given in Section 6, with a discussion and conclusions then being presented in Section 7.As mentioned, the post enrolment-based course timetabling problem was introduced for use in the Second International Timetabling Competition, run in 2007 (http://www.cs.qub.ac.uk/itc2007/; Lewis, Paechter, & McCollum, 2007). The problem involves seven “hard” constraints (described below) whose satisfaction is mandatory, and three “soft” constraints, whose satisfaction is desirable, but not essential. The problem involves assigning a set of events to 45 timeslots (5days, with 9 timeslots per day) according to these constraints.The hard constraints for the problem are as follows. First, for each event there is a set of students who are enrolled to attend; thus events should be assigned to timeslots such that no student is required to attend more than one event in any one timeslot. Next, each event also requires a set of room features (e.g. a certain number of seats, specialist teaching equipment, etc.), which will only be provided by certain rooms; thus each event needs to be assigned to a suitable room that exhibits the room features that it requires. The double booking of rooms is also disallowed. Hard constraints are also imposed stating that some events cannot be taught in certain timeslots. Finally, precedence constraints – stating that some events need to be scheduled before or after others – are also stipulated.More formally, a problem instance comprises a set of eventse={e1,…,en}, a set of timeslotst={t1,…,t|t|}(where|t|=45), a set of studentss={s1,…,sm}, a set of roomsr={r1,…,r|r|}, and a set of room featuresf={f1,…,f|f|}. Each roomri∈ris also allocated a capacityc(ri)reflecting the number of seats it contains. The relationships between these sets are defined by five matrices:•An attends matrixPm×n(1), wherePi,j(1)=1if studentsiis due to attend eventej;0otherwise.A room features matrixP|r|×|f|(2), wherePi,j(2)=1if roomrihas featurefj;0otherwise.An event features matrixPn×|f|(3), wherePi,j(3)=1if eventeirequires featurefj;0otherwise.An event availability matrixPn×|t|(4), wherePi,j(4)=1if eventeican be assigned to timeslottj;0otherwise.A precedence matrixPn×n(5), wherePi,j(5)=1if eventeishould be scheduled to an earlier timeslot than eventej;Pi,j(5)=-1if eventeishould be scheduled to a later timeslot than eventej; and 0 otherwise.For the precedence matrix above, two conditions are necessary for the relationships to be consistent: (a)Pi,j(5)=1⇔Pj,i(5)=-1, and (b)Pi,j(5)=0⇔Pj,i(5)=0. We can also observe the transitivity of this relationship:(1)∃ei,ej,ek∈ePi,j(5)=1∧Pj,k(5)=1⇒Pi,k(5)=1As noted by Lewis (2012), in some of the competition problem instances this transitivity is not fully expressed; however, observing it enables further 1’s and-1’s to be added toP(5)during preprocessing, allowing the relationships to be more explicitly stated.Given the above five matrices, in our approach two further matrices are calculated, which allow fast detection of hard constraint violations during execution of the algorithm (Kostuch, 2005; Cambazard, Hebrard, O’Sullivan, & Papadopoulos, 2012).•A room suitability matrixRn×|r|, where:(2)Ri,j=1if∑k=1mPk,i(1)⩽c(rj)∧∄fk∈f|Pi,k(3)=1∧Pj,k(2)=00otherwise.A conflicts matrixCn×n, where:(3)Ci,j=1if∃sk∈s|Pk,i(1)=1∧Pk,j(1)=1∨∃rk∈r|Ri,k=1∧Rj,k=1∧∑k=1|r|Ri,k=1∧∑k=1|r|Rj,k=1∨Pi,j(5)≠0∨∄tk∈t|Pi,k(4)=1∧Pj,k(4)=10otherwise.The matrixRspecifies the rooms that are suitable for each event (i.e. rooms that are large enough for all attending students and that have all the required features).C, meanwhile, is a symmetrical matrix (Ci,j=Cj,i) that specifies pairs of events that should not be assigned to the same timeslot (i.e. those that conflict). According to (3) this will be the case if two eventseiandejshare a common student, require the same individual room, are subject to a precedence relation, or have mutually exclusive subsets of timeslots for which they are available.Having defined the input to this problem, a solution is represented by an ordered set of setsS=S1,…,S|t|subject to the satisfaction of the following hard constraints.(4)⋃i=1|t|Si⊆e(5)Si∩Sj=∅(1⩽i≠j⩽|t|)(6)∀ej,ek∈Si,Cj,k=0(1⩽i⩽|t|)(7)∀ej∈Si,Pj,i(4)=1(1⩽i⩽|t|)(8)∀ej∈Si,ek∈Sl<i,Pj,k(5)≠1(1⩽i⩽|t|)(9)∀ej∈Si,ek∈Sl>i,Pj,k(5)≠-1(1⩽i⩽|t|)(10)Si∈M(1⩽i⩽|t|)Constraints (4) and (5) state thatSshould partition the event set e (or a subset of e) into an ordered set of sets, labeledS1,…,S|t|. Each setSi∈Scontains the events that are assigned to timeslottiin the timetable. Constraint (6) stipulates that no pair of conflicting events should be assigned to the same setSi∈S, while Constraint (7) states that each event should be assigned to a setSi∈Swhose corresponding timeslottiis deemed available according to matrixP(4). Constraints (8) and (9) impose the precedence requirements of the problem.Finally, Constraint (10) is concerned with ensuring that the events assigned to a setSi∈Scan each be assigned to a suitable room from the room set r. To achieve this it is necessary to solve a maximum bipartite matching problem (Rossi-Doria et al., 2002). Specifically, letG=(Si,r,E)be a bipartite graph with vertex setsSiand r, and an edge set defined:E={{ej∈Si,rk∈r}|Rj,k=1}. Given G, the setSiis a member ofMif and only if there exists a maximum bipartite matching of G of size2|Si|, in which case the room constraints for this timeslot will have been met. In practice, such matching problems can be solved via various polynomially bounded algorithms such as the augmenting path, Hungarian, or auction algorithms (Bertsekas, 1992).In the competition’s interpretation of this problem a solutionSis considered valid if and only if all Constraints (4)–(10) are satisfied. The quality of a valid solution is then gauged by a Distance To Feasibility (DTF) measure, calculated as the sum of the sizes of all events not contained in the solution:(11)DTF=∑ei∈S′∑j=1mPi,j(1)whereS′=e⧹(⋃i=1|t|Si). If the solutionSis valid and has a DTF of zero (implying⋃i=1|t|Si=eandS′=∅) then it is considered feasible since all of the events have been feasibly timetabled. The set of feasible solutions is thus a subset of the set of valid solutions.As mentioned, in addition to finding a solution that obeys the hard constraints, three soft constraints are also considered in this problem.SC1Students should not be required to attend an event in the last timeslot of each day (i.e. timeslots 9, 18, 27, 36, or 45).Students should not have to attend events in three or more successive timeslots occurring in the same day.Students should not be required to attend just one event in a day.Note that each of these soft constraints is slightly different in nature: violations of SC1 can be checked with no knowledge of the rest of the timetable; violations of SC2 can be checked when constructing a timetable; and violations of SC3 can only be checked when all events have been assigned to the timetable. The extent to which these constraints are violated is measured by a Soft Constraints Cost (SCC), which can be calculated using two further matrices:Xm×|t|, which tells us the timeslots for which each student is attending an event, andYm×5, which specifies whether or not a student is required to attend just one event in each of the five days.(12)Xi,j=1if∃ek∈Sj|Pi,k(1)=10otherwise.(13)Yi,j=1if∑k=19Xi,9(j-1)+k=10otherwise.Using these matrices, the SCC is calculated as follows:(14)SCC=∑i=1m∑j=15Xi,9j+∑k=17∏l=02Xi,9(j-1)+k+l+Yi,j.Here the three terms summed in the outer parentheses of Eq. (14) define the number of violations of SC1, SC2, and SC3 (respectively) for each student on each day of the timetable.From the above descriptions, we can prove that the task of finding a feasible solution to the post enrolment-based course timetabling problem is NP-hard. LetCn×nbe our symmetric conflicts matrix as defined above, filled arbitrarily. In addition, let the following conditions hold:(15)|r|⩾n(16)Ri,j=1∀ei∈e,rj∈r(17)Pi,j(4)=1∀ei∈e,tj∈t(18)Pi,j(5)=0∀ei,ej∈eHere, there is an excess number of rooms which are suitable for all events (15) and (16), there are no event availability constraints (17), and no precedence constraints (18). In this special case we are therefore only concerned with satisfying Constraints (4)–(6) while minimising the DTF, making the problem equivalent to the NP-hard partial graph k-colouring problem (Blöchliger & Zufferey, 2008) (wherek=|t|). Thus the post enrolment-based course timetabling problem generalises an existing NP-hard problem.From a different perspective, Cambazard et al. (2012) have also shown that, in the absence of all hard constraints (6)–(10) and soft constraints SC1 and SC2, the problem of satisfying SC3 (i.e. minimising the number of occurrences of students sitting a single event in a day) is equivalent to the NP-hard set covering problem.

@&#CONCLUSIONS@&#
