@&#MAIN-TITLE@&#
Mathematical formulations for a 1-full-truckload pickup-and-delivery problem

@&#HIGHLIGHTS@&#
A pickup and delivery TSP model in intermodal container transportation.An integer nonlinear programming model.A generalized Benders decomposition method.A linearization by the classical Benders approach.

@&#KEYPHRASES@&#
Pickup and delivery problem,Asymmetric traveling salesman problem,Classical Benders decomposition,Generalized Benders decomposition,

@&#ABSTRACT@&#
We address a generalization of the asymmetric Traveling Salesman Problem where routes have to be constructed to satisfy customer requests, which either involve the pickup or delivery of a single commodity. A vehicle is to be routed such that the demand and the supply of the customers is satisfied under the objective to minimize the total distance traveled. The commodities which are collected from the pickup customers can be used to accommodate the demand of the delivery customers. In this paper, we present three mathematical formulations for this problem class and apply branch-and-cut algorithms to optimally solve the model formulations. For two of the models we derive Benders cuts based on the classical and the generalized Benders decomposition. Finally, we analyze the different mathematical formulations and associated solution approaches on well-known data sets from the literature.

@&#INTRODUCTION@&#
The problem studied in this paper is a generalization of the asymmetric Traveling Salesman Problem (TSP) in which the set of customers is divided into pickup and delivery customers and where the former supplies and the latter demands one unit of a single commodity. A vehicle is to be routed such that the supply and the demand of the customers is satisfied while minimizing the total distance traveled. We refer to this routing problem as one-commodity Full-Truckload Pickup-and-Delivery Problem (1-FTPDP). The term full-truckload implies unit capacity and unit supply/demand of the vehicle and the customers, respectively (Parragh et al., 2008b). The 1-FTPDP belongs to the class of many-to-many Pickup and Delivery Problems (PDP) where each unit of a pickup customer can be used to accommodate the demand of any delivery customer (Berbeglia et al., 2007). Besides the exchange of commodities between customers, the depot has the capacity to fulfill the customers’ supply and demand. For the sake of simplicity, we assume that the depot has a sufficient number of commodity available and enough space for commodity storage. Note that this is a general assumption in the literature (refer, e.g., to Hernández-Pérez and Salazar-González, 2004a; Martinovic et al., 2008).A real-life application of the 1-FTPDP arises, for example, in the pre- and end-haulage of intermodal container transportation. Intermodal container transportation denotes the movement of containers by two or more transportation modes (rail, maritime, and road) in a single transport chain, where the change of modes is performed at bi- and tri-modal terminals (Macharis and Bontekoning, 2004). The route of intermodal transport is namely subdivided into the pre-, main-, and end-haulage, denoting the route segments from customer to terminal, terminal to terminal, and terminal to customer, respectively. The main-haulage generally implies the longest traveling distance and is typically carried out by rail or maritime, whereas the pre- and end-haulage are handled by trucks to enable door-to-door transports. The transportation assignments that arise in the pre- and end-haulage are the movements of fully-loaded containers from customers to terminals and vice versa. In addition, empty containers are considered as transportation resources and are provided by the carrier for freight transportation. The carrier’s objective is to sequence the fully-loaded container transportations such that the total traveling cost is minimized. Furthermore, it is part of the optimization to decide where to deliver the empty containers released at the receiver customers and where to pickup the empty containers for the shipper customers. This outlined routing problem can be modeled as a 1-FTPDP, where each receiver customer is regarded as (empty container) pickup customer and each shipper customer as (empty container) delivery customer. For further details on the real-life application, we refer the reader to Zhang et al. (2010) and Nossack and Pesch (2013).The literature on PDPs is quite extensive. Savelsbergh and Sol (1995),Berbeglia et al. (2007),Parragh et al. (2008a), Parragh et al. (2008b), Pillac et al. (2013), and Lahyani et al. (2015) provide detailed surveys of the recent literature, as well as classification schemes. We follow Berbeglia et al. (2007) by differentiating between many-to-many, one-to-many-to-one, and one-to-one PDPs. The most frequently encountered PDPs are the ones with a one-to-one structure, where each commodity has a defined pickup and delivery location. Problems of this type arise, for example, in courier and door-to-door transportation (refer, e.g., to Cordeau and Laporte, 2003). In problems with a one-to-many-to-one relationship, commodities are initially located at the depots and are delivered to the delivery customers, whereas the commodities that are picked up at the pickup customers are destined to the depots. Real-world applications arise, for example, in the delivery of beverages and the collection of empty bottles (refer, e.g., to Gendreau et al., 1999). The 1-FTPDP belongs to the class of PDPs with a many-to-many dependency where the supply of any pickup customer can be accommodated by any other delivery customer.The literature on PDPs with a many-to-many relationship is rather limited and mainly focuses on the single vehicle case. This problem is denoted in the literature as Pickup-and-Delivery Traveling Salesman Problem (PDTSP). If the PDTSP is restricted explicitly to a single commodity, it is referred to as 1-PDTSP. Chalasani and Motwani (1999) address a special case of the 1-PDTSP by considering unit supply/demand of the customers and finite vehicle capacity. The authors call this problem Q-delivery TSP (Q denotes the vehicle capacity). They propose a 9.5-approximation algorithm forQ∈R+and a 2-approximation algorithm for Q = 1 and Q = ∞. Anily and Bramel (1999) present a (7 − 3/Q)-approximation algorithm for the same problem withQ∈R+and refer to it as Capacitated Traveling Salesman Problem with Pickups and Deliveries. Hernández-Pérez and Salazar-González (2004a) develop a branch-and-cut algorithm using Benders decomposition to optimally solve instances of the 1-PDTSP. The authors consider real-valued supply/demand and finite vehicle capacity. Wang and Lim (2006) propose polynomial time algorithms for the same problem with unit supply/demand on a path and a tree graph topology. Hernández-Pérez and Salazar-González (2004b) suggest two heuristics for the 1-PDTSP with real-valued supply/demand and finite vehicle capacity. One heuristic is based on a nearest neighbor and a 2-opt/3-opt approach and the other applies the branch-and-cut algorithm presented in Hernández-Pérez and Salazar-González (2004a) on restricted feasible sets. Moreover, Martinovic et al. (2008) solve instances of the 1-PDTSP by an iterative modified simulated annealing algorithm, Hernández-Pérez et al. (2009) by a hybrid GRASP/VND heuristic, Zhao et al. (2009) by a genetic algorithm, and Hosny and Mumford (2010) by a VNS/SA approach. The PDTSP with multiple commodities, unit supply/demand, and unit vehicle capacity has been addressed by Anily and Hassin (1992). The authors propose a 2.5-approximation algorithm for this so-called swapping problem. Furthermore, Anily et al. (1999) address the swapping problem on a line and propose an exact, polynomial time algorithm.The considered 1-FTPDP is NP-hard. To verify its computational complexity, we refer the reader to Anily and Hassin (1992). They prove the NP-hardness of the swapping problem by showing that even the simplest problem (namely the 1-FTPDP) is NP-hard.The key contribution of our work is to present various mathematical formulations for the 1-FTPDP and to analyze their performances in a computational study. The nature of the 1-FTPDP points to decomposition methods in which the problem is partitioned into a routing and an assignment problem. We propose two so-called integrated formulations that are suited for decomposition and which capture the routing and the assignment structure of the 1-FTPDP. We apply the classical and the generalized Benders decomposition (Benders, 1962; Geoffrion, 1972) to these integrated formulations and study their computational performances. Furthermore, we compare the results to a classical asymmetric TSP formulation.The remainder of the paper is organized as follows. A detailed description of the various mathematical formulations are given in Section 2. Branch-and-cut solution algorithms for the different mathematical models are described in Section 3. In Section 4, we summarize the results of our computational study which we conducted on several instances to assess the computational performance of the algorithms. Finally, we conclude our research in Section 5.In the following, we will present different model formulations for the 1-FTPDP. The following notation is used throughout the paper. Let 0 denote the depot, CP= {1, …, n1} the set of pickup customers, and CD= {n1 + 1, …, n2} the set of delivery customers. Based on the property that the depot is assumed to provide and receive a sufficient amount of a given commodity, the depot may either be considered as pickup or as delivery customer. Hence, to ensure the supply/demand of the customers, we add an appropriate number of depot duplicates to the set of pickup/delivery customers.The 1-FTPDP can simply be solved as a classical asymmetric TSP (refer, e.g., to Dantzig et al., 1954). The according model formulation is thereby defined on a digraph G′ = (V′, A′), where V′ represents the vertex set and A′ the set of directed edges. V′ consists of the depot 0, the set of pickup customers CP, and the set of delivery customers CD. Directed edges (i, j) ∈ A′ are defined between any pair of vertices i, j ∈ V′ with i ≠ j and symbolize vehicle movements. The traveling distance between any two locations (i, j) ∈ A′ is denoted by the edge weightc(i,j)∈R+. Note that the traveling distance between two locations may be different, i.e. c(i, j) ≠ c(j, i), and edges that correspond to infeasible vehicle movements have edge weight ∞ and are referred to as infeasible edges. For instance, edges (i, j) ∈ A′ among pickup customers, i.e., i, j ∈ CP, i ≠ j, and among delivery customers, i.e., i, j ∈ CD, i ≠ j, are infeasible. We incorporate binary decision variablesyij′∈{0,1}for each directed edge (i, j) ∈ A′ to denote whether(yij′=1)or not(yij′=0)edge (i, j) is traversed by the vehicle. The TSP formulation is further denoted by PTSP and is given by the following model. Moreover, lety′:=(yij′|i,j∈V′,i≠j).(2.1)min∑(i,j)∈A′c(i,j)·yij′(2.2)s.t.∑j∈V′j≠iyji′=1∀i∈V′(2.3)∑j∈V′j≠iyij′=1∀i∈V′(2.4)∑i,j∈Sj≠iyij′≤|S|−1∀S⊂V′(2.5)yij′∈{0,1}∀i,j∈V′,i≠jObjective function (2.1) minimizes the total traveling distance. Constraints (2.2) and (2.3) ensure that each pickup customer and each delivery customer, as well as the depot is entered and left exactly once. Constraints (2.4) are the classical subtour elimination constraints that impose route connectivity. Finally, constraints (2.5) define the domains of the decision variables.Furthermore, the 1-FTPDP can be considered as an integrated problem that simultaneously solves a routing and an assignment problem. It is part of the assignment problem to fulfill the demand and the supply of the customers by determining where to deliver the commodities that are collected from the pickup customers and where to pick up the commodities that are required by the delivery customers. The routing problem evaluates in which order the pickup customers are visited by taking into account the decisions of the assignment problem.The integrated models are defined over a mixed graph G = (V, E, A) where V represents the vertex set, E the set of undirected edges, and A the set of directed edges. V consists of the depot 0 and the set of pickup CPand delivery customers CD. Directed edges symbolize vehicle movements and correspond to the routing problem, whereas undirected edges denote assignments and relate to the assignment problem. To easily differentiate between directed and undirected edges, a directed edge is denoted by (i, j) and an undirected edge by [i, j] for vertices i ∈ V and j ∈ V. Directed edges (i, j) ∈ A are solely defined for the depot and the pickup customers, i.e., i ∈ {0}∪CP, j ∈ {0}∪CP, i ≠ j, and undirected edges [i, j] ∈ E simply for the pickup and delivery customers, i.e. i ∈ CP, j ∈ CD. The edge weight incorporates the traveling distancec(i,j)∈R+that is required to get from vertex i ∈ V to vertex j ∈ V with i ≠ j.In the following, we will explain in more detail how the 1-FTPDP may be partitioned into a routing and an assignment problem.Routing problem: Each delivery customer demands one unit of a given commodity by a pickup customer. Analogously, each pickup customer supplies one unit of a given commodity to a delivery customer. Thus, a vehicle route starts at the depot, alternates between pickup and delivery customers, and returns to the depot. Because of this alternating structure, it is possible to solely define the routing problem in terms of the depot and the pickup customers. The allocation of the delivery customers to the pickup customers is left to the assignment problem. A route is said to be feasible, if each pickup customer is visited exactly once and if the standard TSP constraints—assignment and subtour elimination constraints (refer, e.g., to Cook, 2012)—are satisfied.Assignment problem: The assignment problem allocates the delivery customers to the pickup customers by determining where to deliver the commodities that are released by the pickup customers and where to pick up the commodities for the delivery customers. A solution to the assignment problem is feasible, if each pickup and delivery customer is assigned exactly once.We combine the solutions of the routing and of the assignment problem to a solution of the 1-FTPDP by simply inserting the delivery customers into the solution of the routing problem right after the assigned pickup customers.Example: An example with four pickup and three delivery customers is depicted in Fig. 1(a). A vehicle is initially located at depot 0. We add a depot duplicate to the set of delivery customers to accommodate the supply of the pickup customers. In Fig. 1(b), we present a feasible solution to the routing, as well as to the assignment problem. A solution to the routing problem is, e.g., given by (0, 1, 3, 2, 4, 0) and a solution to the assignment problem, e.g., by (1, 6), (2, 8), (3, 5), and (4, 7). The solutions presented in Fig. 1(b) have to be translated into a solution of the 1-FTPDP: The vehicle starts at depot 0 and visits pickup customer 1. The commodity that is picked up at pickup customer 1 is used to accommodate the demand of delivery customer 6. Hence, the vehicle continues to delivery customer 6. Next, pickup customer 3 is visited and the available commodity is picked up and delivered to delivery customer 5. From customer 5, we continue to pickup customer 2, to delivery customer (depot) 8, to pickup customer 4, to delivery customer 7, and end at depot 0. A feasible 1-FTPDP solution is therefore given by (0, 1, 6, 3, 5, 2, 8, 4, 7, 0) and is presented in Fig. 1(c). Observe that some edges that are illustrated in Fig. 1(c) are not part of the edge set A (e.g., directed edge between 7 and 0) and are simply used to visualize the solution of the 1-FTPDP.We will base both integrated 1-FTPDP formulations on the asymmetric TSP model (Dantzig et al., 1954). We thus associate a binary decision variable yij∈ {0, 1} with each directed edge (i, j) ∈ A to indicate whether (yij= 1) or not (yij= 0) edge (i, j) is traversed by the vehicle. For the assignment problem, we include for each edge [i, j] ∈ E a binary decision variable xij∈ {0, 1} to denote whether (xij= 1) or not (xij= 0) pickup customer i ∈ CPis assigned to delivery customer j ∈ CD. The problem can be formulated as the following integer nonlinear programming model, denoted by PNL, with routing variables y ≔ (yij|i ∈ {0}∪CP, j ∈ {0}∪CP, i ≠ j) and assignment variables x ≔ (xij|i ∈ CP, j ∈ CD).(2.6)min∑j∈CPc(0,j)·y0j+∑i∈CP∑j∈CD∑k∈{0}∪CPk≠i(c(i,j)+c(j,k))·yik·xij(2.7)s.t.∑j∈{0}∪CPj≠iyji=1∀i∈{0}∪CP(2.8)∑j∈{0}∪CPj≠iyij=1∀i∈{0}∪CP(2.9)∑i,j∈Sj≠iyij≤|S|−1∀S⊆CP(2.10)∑j∈CDxij=1∀i∈CP(2.11)∑i∈CPxij=1∀j∈CD(2.12)xij∈{0,1}∀i∈CP,j∈CD(2.13)yij∈{0,1}∀i,j∈{0}∪CP,i≠jObjective function (2.6) minimizes the total traveling distance of the vehicle obtained by summing over the traveling distance between the depot and the pickup customers (term 1) and between the depot and the pickup and delivery customers (term 2). Constraints (2.7) and (2.8) ensure that each pickup customer and the depot are entered and left exactly once, respectively. Route connectivity is imposed by the classical subtour elimination constraints (2.9). Constraints (2.10) and (2.11) ensure that each pickup and each delivery customer is assigned exactly once. Finally, constraints (2.12) and (2.13) define the domains of the decision variables x and y.So far the objective function (2.6) of the model formulation PNLis nonlinear. To linearize PNL, we introduce variables zijk∈ {0, 1} which denote whether (zijk= 1) or not (zijk= 0) pickup customer i ∈ CPis followed by delivery customer j ∈ CDand pickup customer or depot k ∈ CP∪{0}. The linearization of PNLis denoted by PLand is given below with variables z ≔ (zijk|i ∈ CP, j ∈ CD, k ∈ CP∪{0}, i ≠ k).(2.14)min∑j∈CPc(0,j)·y0j+∑i∈CP∑j∈CD∑k∈{0}∪CPk≠i(c(i,j)+c(j,k))·zijk(2.15)s.t.Equations(2.7)--(2.9)(2.16)∑j∈CDzijk=yik∀i∈CP,k∈{0}∪CP,i≠k(2.17)∑i∈CP∑k∈{0}∪CPk≠izijk=1∀j∈CD(2.18)zijk∈{0,1}∀i∈CP,j∈CD,k∈{0}∪CP,i≠k(2.19)yij∈{0,1}∀i,j∈{0}∪CP,i≠jIn the following, we introduce solution approaches that we apply to the different model formulations. Due to the fact that each of the models incorporates numerous subtour elimination constraints, we base all of our solution approaches on branch-and-cut algorithms. Branch-and-cut, in short, integrates ideas of cutting plane methods into the branch-and-bound algorithm by adding valid inequalities (also called cuts) throughout the branch-and-bound tree. The inequalities are thereby identified by so-called separation procedures. For a general overview of the branch-and-cut solution methodology, we refer the reader, e.g., to Hoffman and Padberg (1985).Instead of dealing with all the subtour elimination constraint (2.4) of PTSP simultaneously, we solve a restricted version of PTSP by considering a subset of the constraint (2.4). The resulting solution is then used to set up a separation problem which either proves global optimality of the solution to the full problem PTSP or identifies a violated constraint and adds it to the restricted model formulation. This is a well-known procedure for solving the TSP and is outlined in more detail subsequently.We start off with an empty set of subtour elimination constraints, solve the restricted version of PTSP, and obtain an optimal solution y′. We use the following separation procedure to separate the subtour elimination constraints: We construct a supporting digraphG^=(V^,A^)whereV^=V′andA^={(i,j)∈A′|yij′=1}and detect the connected components ofG^. IfG^is disconnected, subtour elimination constraints are violated. In that case, all connected components are detected, the corresponding subtour elimination constraints are formulated, are added to the restricted version of PTSP, and PTSP is resolved. IfG^is connected, an optimal solution to the full model PTSP has been obtained.Various different cutting planes and separation procedures have been presented in the literature for the asymmetric TSP (e.g., CAT and COMB inequalities). We, however, restrict ourself to the subtour elimination constraints and refer the reader, e.g., to Applegate et al. (2006),Cook (2012), and Gutin and Punnen (2002) for further notes on the TSP.If the routing variables y of the model formulations PNLand PLare fixed, the remaining assignment problems are efficiently solvable. This property points to a Benders decomposition approach for generating additional Benders cuts for the integrated formulations. In the following, we apply the classical and the generalized Benders decomposition to the model formulations PLand PNL, respectively, and obtain equivalent formulations MPNLand MPLwith fewer variables but with a large number of constraints. These formulations are solved by branch-and-cut algorithms. In the following, we will explain how Benders decomposition can be applied to the integrated models.The classical Benders decomposition was originally proposed by Benders (1962) for linear programming problems where Benders cuts are derived based on linear programming duality theory. Classical Benders decomposition has been applied successfully to a variety of problems, including aircraft routing (Desaulniers et al., 1997; Mercier, 2008; Mercier et al., 2005; Richardson, 1976), locomotive and car assignment (Cordeau et al., 2000; 2001), and vehicle routing (Bektas, 2012; Fisher and Jaikumar, 1981; Hernández-Pérez and Salazar-González, 2004a; Sexton and Bodin, 1985a; 1985b).Geoffrion (1972) extended Benders decomposition to a broader class of problems in which the model formulation is not restricted to be linear and the constraints are generated by employing nonlinear convex duality theory. The so-called generalized Benders decomposition has been applied, among others, to a vehicle routing and inventory allocation problem (Federgruen and Zipkin, 1984), a distribution system planning problem (Benchakroun et al., 1991), and a capacity expansion planning problem (Bloom, 1983). We will describe in the subsequent sections how the classical and the generalized Benders decomposition can be applied to PLand PNL, respectively.The classical Benders decomposition was proposed for problems of the form(3.1)minx,ycTx+h(y)s.t.Ax+H(y)=0,x∈X⊆Rp,y∈Y⊆Rqwhere A is a matrix and c a vector of appropriate size, and h(y) and H(y) are convex functions in y. The basic idea behind Benders decomposition is to partition problem (3.1) into two problems, a master problem (linear, nonlinear, or discrete in y) and a subproblem (linear in x).We obtain the master problem by reformulating model PLinto an equivalent model with fewer variables but with a large number of constraints. Let Y denote the set of feasible solutions to the routing problem, defined by constraints (2.15) and (2.19). For any vectory¯∈Y,model formulation PLreduces to the hereafter defined subproblem which we further refer to as the primal subproblem.(3.2)min∑i∈CP∑j∈CD∑k∈{0}∪CPk≠i(c(i,j)+c(j,k))·zijk(3.3)s.t.∑j∈CDzijk=y¯ik∀i∈CP,k∈{0}∪CP,i≠k(3.4)∑i∈CP∑k∈{0}∪CPk≠izijk=1∀j∈CD(3.5)zijk∈{0,1}∀i∈CP,j∈CD,k∈{0}∪CP,i≠kRecall that the primal subproblem is required to be a linear programming problem: Problem (3.2)–(3.5) can be considered as a classical transportation problem for which the constraint matrix, defined by constraints (3.3) and (3.4), is known to be totally unimodular (refer, e.g., to Schrijver, 2003). Given that the right-hand-sides of constraints (3.3) and (3.4) are integer, we can solve the primal subproblem efficiently by solving its LP-relaxation.Moreover, since the primal subproblem is bounded for any value ofy¯∈Y,we can determine the objective function value by solving its dual. Let us introduce dual variablesα= (αik|i ∈ CP, k ∈ {0}∪CP, i ≠ k) andβ= (βi|i ∈ CD) associated with the constraints (3.3) and (3.4), respectively. The dual of (3.2)–(3.5) results in the following dual subproblem.(3.6)min∑i∈CP∑k∈{0}∪CPk≠iαik·y¯ik+∑j∈CDβj(3.7)s.t.αik+βj≤c(i,j)+c(j,k)∀i∈CP,j∈CD,k∈{0}∪CP,i≠k(3.8)αik∈R∀i∈CP,k∈{0}∪CP,i≠k(3.9)βj∈R∀j∈CDNow, let F denote the dual feasible region defined by (3.7)–(3.9). Observe that F is independent of the routing variables y. Thus, any conclusion that we draw for F remains unaffected by the choice ofy¯∈Y.Properties of F:•Since the traveling distances are assumed to be non-negative, the zero vector lies in F, i.e., F is a non-empty set.Since F is non-empty, we can follow by the weak duality theorem of linear programming that the primal subproblem is either infeasible or feasible and bounded (refer to, e.g., Bertsimas and Tsitsiklis, 1997).Since F is non-empty and contains at least one extreme point, the resolution theorem of linear programming states, that F can be represented as a convex combination of the extreme points plus a nonnegative linear combination of the extreme rays (refer to, e.g., Bertsimas and Tsitsiklis, 1997).By applying this resolution theorem to the dual feasible region F, we can determine the optimal value of the primal and the dual subproblem for any given value ofy¯∈Yby an auxiliary linear programming problem, which is defined in terms of the extreme rays and extreme points of F. Since the primal subproblem is feasible for anyy¯∈Y,the corresponding dual subproblem is bounded, i.e., the set of extreme rays is empty. Hence, the auxiliary problem is solely defined in terms of the extreme points which we further denote by FP. The auxiliary problem is then given as follows.(3.10)minq(3.11)s.t.∑i∈CP∑k∈{0}∪CPk≠iαik·y¯ik+∑j∈CDβj≤q∀(α,β)∈FP(3.12)q∈RObserve that problem (3.10)–(3.12) contains only a single decision variable q and an enormous number of constraints. Constraints (3.11) are known as Benders optimality cut, is defined over the set of extreme points, and ensures that q takes the optimal value of the primal and the dual subproblem, if an optimal solution exists. We can use this auxiliary problem to formulate an equivalent model of PLby simply replacing the primal subproblem by problem formulation (3.10)–(3.12). This reformulation is presented next and is further referred to as master problem/model MPL.(3.13)min∑j∈CPc(0,j)·y0j+q(3.14)s.t.Equations(2.7)--(2.9)(3.15)∑i∈CP∑k∈{0}∪CPk≠iαik·yik+∑j∈CDβj≤q∀(α,β)∈FP(3.16)yij∈{0,1}∀i,j∈{0}∪CP,i≠j(3.17)πi∈R∀i∈CPInstead of dealing with all the Benders and subtour elimination constraints of MPLsimultaneously, we solve in our branch-and-cut method a restricted master problem to optimality by considering only a subset of the Benders optimality cuts and subtour elimination constraints. According to the TSP solution approach, we use the procedure described in Section 3.1 to separate the subtour elimination constraints. For the Benders optimality cuts, we initially start off with an empty set of Benders optimality constraints, i.e., FP= ∅. We solve the restricted version of MPLand obtain an optimal solution (y*, q*) with value w. Thereafter we solve the dual subproblem for y* and let(α*,β*)denote a dual optimal solution with optimal value u. If q* = u, the solution (y*, q*) is also an optimal solution to the full problem MPL. Otherwise, we generate a new Benders optimality constraint by settingFP:=FP∪{(α*,β*)}and resolve the restricted version of MPL.Geoffrion (1972) generalized Benders decomposition to a broader class of optimization problems by employing nonlinear convex duality theory for the generation of Benders optimality cuts. Benders decomposition was extended by Geoffrion (1972) to problems of the form(3.18)minx,yf(x,y)+h(y)s.t.G(x,y)=0,x∈X⊆Rp,y∈Y⊆Rqwhere f(x, y) is a convex function in x, h(y) a convex function in y, and G(x, y) a vector of scalar functions linear in x. In contrast to the classical Benders decomposition, f(x, y) and G(x, y) do not require to be convex in x and y jointly.Following Hoang (1982), we base our notation on that of Geoffrion (1972) in order to apply the generalized Benders decomposition theory to our problem PNL. Letf(x,y):=∑i∈CP∑j∈CD∑k∈{0}∪CPk≠i(c(i,j)+c(j,k))·yik·xij,h(y):=∑j∈CPc(0,j)·y0j,G(x,y):=(g1(x,y)g2(x,y)):=((∑j∈CDxij−1|i∈CP)(∑i∈CPxij−1|j∈CD)),X:={x|0≤xij≤1,i∈CP,j∈CD},andY:={y|Equations(2.7)--(2.9);yij∈{0,1},i,j∈{0}∪CP,i≠j;πi∈R,i∈CP}.The key idea of the generalized Benders decomposition approach is to partition problem (3.18) by projecting it onto the y-space. In the words of Geoffrion (1972), the projection of (3.18) onto y is given by(3.19)minyh(y)+v(y)s.t.y∈Y∩Wwhere(3.20)v(y)=minxf(x,y)s.t.G(x,y)=0,x∈Xand(3.21)W={y|G(x,y)=0forfixedx∈X}.The set W contains those values of y for which problem (3.20) is feasible. The optimization problem in (3.20) is further referred to as primal subproblem and is stated below in detail for our problem setting.(3.22)min∑i∈CP∑j∈CD∑k∈{0}∪CPk≠i(c(i,j)+c(j,k))·y¯ik·xij(3.23)s.t.∑j∈CDxij=1∀i∈CP(3.24)∑i∈CPxij=1∀j∈CD(3.25)xij∈{0,1}∀i∈CP,j∈CDObserve that problem (3.22)–(3.25) is equivalent to the classical assignment problem for a fixed value ofAPTARABOLDy¯∈Y. The corresponding constraint matrix, defined by constraints (3.23) and (3.24), is known to be totally unimodular (refer, e.g., to Burkard et al., 2009) which legitimates the relaxation of the integrality conditions on x. Moreover, the primal subproblem is feasible for any value ofAPTARABOLDy¯∈Yand we can conclude that W ≔ Y. Since X is a nonempty convex set andv(y¯)is finite for any fixed value ofy¯∈Y,we can solve the primal subproblem by solving its dual. The dual subproblem is written as(3.26)v(y¯)=max(α,β)[minx∈Xf(x,y¯)−(α,β)TG(x,y¯)],∀y¯∈Ywhereα=(αi∈R|i∈CP)andβ=(βi∈R|i∈CD)are the Lagrange multipliers associated with the equality constraints g1(x, y) and g2(x, y), respectively. Refer, e.g., to Bertsekas (1999) for detailed notes on nonlinear duality theory. We can reformulate problem (3.19) by replacing the primal subproblem (3.20) by its dual (3.26) and obtain(3.27)miny∈Yh(y)+max(α,β)[minx∈Xf(x,y)−(α,β)TG(x,y)].Finally, by introducing the auxiliary variable q to problem (3.27), we can state the master problem for PNL. The master model formulation, denoted by MNL, is given by the following optimization problem.(3.28)min∑j∈CPc(0,j)·y0j+q(3.29)s.t.Equations(2.7)--(2.9)(3.30)minx∈X{∑i∈CP∑j∈CD∑k∈{0}∪CPk≠ic(i,j)·yik·xij+∑i∈CP∑j∈CD∑k∈{0}∪CPk≠ic(j,k)·yik·xij−∑i∈CPαi·(∑j∈CDxij−1)−∑j∈CDβj·(∑i∈CPxij−1)∑k∈{0}∪CPk≠i}≤q∀(α,β)(3.31)yij∈{0,1}∀i,j∈{0}∪CP,i≠j(3.32)πi∈R∀i∈CP(3.33)q∈RIn analogy to the master model ML, formulation MNLemploys an enormous number of constraints. Constraints (3.30) are referred to as Benders optimality cuts and are expressed in terms of optimization problems, for which a closed-form solution is derived next.A crucial part of the generalized Benders decomposition is the evaluation ofL*(y,α,β). For a given optimal Lagrange multiplier vector(αt,βt),a closed-form solution of the Benders optimality cutL*(y,αt,βt)can be constructed as follows. First, the expression ofL*(y,αt,βt)is simplified by restricting the minimization to the terms that are dependent on x.L*(y,αt,βt):=∑i∈CPαit+∑j∈CDβjt+minx∈X{∑i∈CP∑j∈CD∑k∈{0}∪CPk≠i(c(i,j)+c(j,k))·yik·xij−∑i∈CPαit·∑j∈CDxij−∑j∈CDβjt·∑i∈CPxij∑k∈{0}∪CPk≠i}An optimal solution x* of the minimization term is determined by the following observation:xij*={0,c(i,j)+∑k∈{0}∪CPk≠ic(j,k)·yik−αit−βjt≥01,c(i,j)+∑k∈{0}∪CPk≠ic(j,k)·yik−αit−βjt<0∀i∈CP,j∈CDGiven that constraints (3.29) enforce exactly one yikequal to 1, we can simplify the expression ofL*(y,αt,βt,γt)by introducing parametersγijktas followsγijkt={0,c(i,j)+c(j,k)−αit−βjt≥0c(i,j)+c(j,k)−αit−βjt,c(i,j)+c(j,k)−αit−βjt<0∀i∈CP,j∈CD,k∈{0}∪CP,i≠kand rewriteL*(y,αt,βt):=∑i∈CPαit+∑j∈CDβjt+∑i∈CP∑j∈CD∑k∈{0}∪CPk≠iyik·γijkt.According to the previous models, we solve MNLby a branch-and-cut algorithm by considering only a subset of the Benders optimality cuts and subtour elimination constraints. We again use the procedure described in Section 3.1 to separate the subtour elimination constraints. The Benders optimality cuts are separated according to the approach explained in Section 3.2.1.We tested the straightforward application of the classical and the generalized Benders decomposition to the model formulations. Due to their moderate computational performance, we apply some refinements that improve the quality of the Benders cuts.Here, the master problems, MLand MNL, deal with only a small fraction of the objective function. We try to move as much as possible of the objective into the master problems by providing an estimate of the costc˜(i,k)incurred when a pickup customer i ∈ CPis followed by a pickup customer or depot k ∈ CP∪{0}. We can easily determine a lower bound by settingc˜(i,k)=minj∈CD(c(i,j)+c(j,k))∀i∈CP,k∈{0}∪CP,i≠k.Hence, the objective functions of both master problems, MLand MNL, reformulate to∑j∈CPc(0,j)·y0j+∑i∈CP∑k∈{0}∪CPk≠ic˜(i,k)·yik+q.Obviously, as one moves some costs from the separation problem into the master problem, the cost definition in the separation problem needs to be adjusted to avoid double-counting. The objective function of the primal separation problem (3.2)–(3.5) is changed to∑i∈CP∑j∈CD∑k∈{0}∪CPk≠i(c(i,j)+c(j,k)−c˜(i,k))·zijk.The objective function of the primal separation problem (3.22)–(3.25) is reformulated analogously. In addition, the Benders optimality cuts have to be adapted in accordance to Sections 3.2.1 and 3.2.2 and to the redefined objectives.We base our computational study on the benchmark instances of Christofides et al. (1979) and Solomon (1987) to analyze the algorithmic performance of the different model formulations and the associated branch-and-cut methods. All algorithms have been implemented in Java under Windows 7 and were run on an Intel Pentium Core 2 Duo, 2.2 GHz PC, with 4 GB system memory. We use ILOG CPLEX 12.5 Concert technology with standard settings as branch-and-cut solver for the TSP model PTSP and for the integrated models MPLand MPNL. Note that subtour elimination constraints and Benders optimality cuts are only generated if an integer solution has been detected in the course of CPLEX’s branch-and-cut procedure.Our data set is based on eight instances derived from the literature, five instances from Christofides et al. (1979) and three instances from Solomon (1987). The benchmark set of Christofides et al. (1979) was originally proposed for the Vehicle Routing Problem (VRP) and consists of 14 instances. Each of these instances contains between 50 and 199 customers and the customer locations are either generated randomly (instances 1–10) or cluster-based (instances 11–14). Notice that we exclude instances 4–10 and 13–14 from our computational study. In our context, they are equivalent to instances 1–3 and 11–12 and either extend the customer set or impose additional route length constraints which we do not consider in the 1-FTPDP. Hence, we restrict our study to instances 1, 2, 3, 11, 12 and further refer to them as C1, C2, C3, C11, C12, respectively. Solomon’s benchmark set was initially generated for the Vehicle Routing Problem with Time Windows (VRPTW) and consists of three instance sets (R, C, and RC) where each set is again subdivided into two subsets (R = (R1, R2), C = (C1, C2), RC = (RC1, RC2)). Each instance contains 100 customers and the customer locations are either generated randomly (R), cluster-based (C), or both randomly and cluster-based (RC). Note that all instances in the instance set R (C, or RC) use the same customer locations and solely differ in the time windows. Due to these redundancies, we solely consider a single instance from each instance set R, C, and RC. We will further refer to these instances as SR, SC, and SRC, respectively.We adjust the eight instances (C1, C2, C3, C11, C12, SR, SC, SRC) for the 1-FTPDP in the following way: First, we discard the customer demands and the time windows. Thereafter, we randomly decide whether a customer is regarded as pickup or delivery customer. The traveling distance between any two locations is then determined by the Euclidean distance plus a service time and is rounded to the nearest integer value. The service time is thereby randomly drawn from the interval [1, 5] for each pickup-delivery/depot connection and drawn from the interval [5, 10] for each delivery-pickup/depot connection. For each of the eight instances, we randomly derive 20 new instances in the same manner and end up with 8 × 20 = 160 instances.We compare the algorithmic performance of the different model formulations and associated branch-and-cut algorithms in terms of the number of generated subtour elimination constraints and Benders optimality cuts, as well as the required CPU time. The results are listed below in Table 1. For each instance set, we indicate the underlying data set (“Data”), the number of pickup (“#PC”) and delivery customers (“#DC”), as well as the objective function value (“Obj.”) averaged over all respective instances. For each algorithm and each set of instances, we list the average CPU (“CPU”) time (in seconds), the average number of generated Benders optimality cuts (“#BC”), and the average number of generated subtour elimination constraints (“#SC”). We indicate by table entry “-”, if a set of instances has not been solved to optimality in the time frame of one hour. Recall that we apply the classical and the generalized Benders decomposition approach according to the description in Sections 3.2.1 and 3.2.2 and the algorithmic refinements presented in Section 3.2.3. Further note that we obtain the values of the dual variables for the Benders optimality cuts by solving the primal subproblems.It can be seen from the data in Table 1 that the classical Benders decomposition outperforms the generalized Benders approach in terms of the CPU time and the number of generated Benders optimality cuts and the number of subtour elimination constraints. Unfortunately, the generalized approach does not solve all instance sets in the defined time frame. It is known from the literature, e.g., refer to Geoffrion and Graves (1974) and Magnanti and Wong (1981), that the model formulation has a remarkable impact on the quality of the Benders cuts. The linearization of PNLleads to higher qualified Benders optimality cuts. Furthermore, the generalized Benders formulations has more difficulties solving cluster-based instances than randomized instances.The TSP formulation outperforms both Benders decomposition on all instance sets. It requires by far the lowest number of subtour elimination constraints and the shortest CPU times. Compared to both integrated formulations, the TSP formulation is capable of solving much larger problem instances to optimality. This holds for clustered, as well as for randomized instances. Summing up, the results show that the TSP formulation shows the best performance in terms of the number of generated subtour elimination constraints and the computational times.

@&#CONCLUSIONS@&#
