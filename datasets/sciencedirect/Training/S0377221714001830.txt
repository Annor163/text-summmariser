@&#MAIN-TITLE@&#
Strategic and operational decisions in restaurant revenue management

@&#HIGHLIGHTS@&#
We address strategic and operational revenue management issues in a restaurant.Innovative mathematical models to take decision at the strategic level are defined.A dynamic model and a linear approximation for the operational problem are developed.Booking limits and bid prices policies are proposed to accept/deny a request.The implemented policies lead to higher revenues than traditional strategies.

@&#KEYPHRASES@&#
Restaurant revenue management,Dynamic programming,Strategic and operational planning,

@&#ABSTRACT@&#
The paper addresses restaurant revenue management from both a strategic and an operational point of view. Strategic decisions in restaurants are mainly related to defining the most profitable combination of tables that will constitute the restaurant. We propose new formulations of the so-called “Tables Mix Problem” by taking into account several features of the real setting. We compare the proposed models in a computational study showing that restaurants, with the capacity of managing tables as renewable resources and of combining different-sized tables, can improve expected revenue performances. Operational decisions are mainly concerned with the more profitable assignment of tables to customers. Indeed, the “Parties Mix Problem” consists of deciding on accepting or denying a booking request from different groups of customers, with the aim of maximizing the total expected revenue. A dynamic formulation of the “Parties Mix Problem” is presented together with a linear programming approximation, whose solutions can be used to define capacity control policies based on booking limits and bid prices. Computational results compare the proposed policies and show that they lead to higher revenues than the traditional strategies used to support decision makers.

@&#INTRODUCTION@&#
Revenue management researchers have traditionally focused their attention on the airline, hotel and car rental industries. It is well known that revenue management is particularly suitable to industries that have a relatively fixed capacity, perishable products, a cost structure characterized by large fixed costs and a variable and segmented demand. In the last few decades, the application of revenue management techniques has also been extended to other industries, we cite for example restaurants, cargo, hospitals, cruise lines and golf. A quite recent review of revenue management features, techniques and sector of application can be found in Chiang, Chen, and Xu (2007).In Kimes (2003) the use of the most appropriate revenue management techniques, in relation to the characteristics of some non-conventional industries, among them restaurants, are discussed. Restaurant revenue management is a quite recent discipline. Indeed, the first work dates back to 1998 (Kimes, Chase, Choi, Lee, & Ngonzi, 1998), where the applicability of revenue management techniques to restaurants is discussed. Successively, in Kimes (1999) the RevPASH (revenue per available seat-hour) is introduced as a good indicator of revenue performances and basis on which to establish strategies for improving restaurant revenue. The importance of defining and using appropriate revenue management programs to improve restaurant performances is discussed and applied to a real case in Kimes (2004). A recent discussion of restaurant revenue management issues from 1998 to 2010 with some insights on future research is presented in Thompson (2010).From a mathematical programming point of view, revenue management research is mainly focused on defining pricing and capacity control strategies. In dynamic pricing problems demand is managed by controlling prices. Different prices are dynamically set, for the same product, in order to face the uncertainty in demand. In particular, pricing problems arise when it is convenient to make price adjustments with the aim to maximize the total expected revenue. In restaurant industries, customers do not easily accept different prices for the same product (i.e. meal). Some attempts to set different prices based on restaurant characteristics, such as table locations, are presented in Kimes and Wirtz (2002). However, the use of price-based strategies are not widespread in restaurants.The definition of dynamic pricing control policies is, however, out of the scope of this paper, whose main focus is in properly managing restaurant capacity. The problem concerns how to assign a set of products “optimally”, sharing finite resources (tables), to different unknown customers demands (groups). Decisions have to take into account that assigning a given product to a group will produce an immediate reward that could be greater later (if the product is assigned to a larger group) or even zero if there is no demand for the considered product.Capacity control revenue management has been widely studied; two recent papers applying network revenue management policies to non-conventional industries are Guerriero, Miglionico, and Olivito (2012) and Guerriero, Miglionico, and Benigno (2012), where revenue-based policies are discussed for the assignment of a set of reusable resources (vehicles) to tasks (customer demands) that occur over time.In the present paper, we define revenue-based approaches that can help restaurant decision makers in taking both strategic and operational decisions. Strategic decisions in a restaurant are mainly related to individuate the “optimal” number and the dimension of the tables that will constitute the restaurant. The so-called “table mix problem” is well known in the scientific literature. In Kimes and Thompson (2005) some basic table mix formulations are described. The problem is to decide the number of tables of each size that will be in the restaurant, while considering space constraints, party dimensions, and average meal duration. The proposed models are solved with two different simulated annealing heuristics. A simulation model to evaluate different table mixes is also presented and tested on real data. The importance of managing properly the meals duration (i.e. the possibility of having a fast restaurant turnover) is discussed in Thompson (2009). A study on the effect of combinability is presented in Thompson (2002), where authors discuss whether and in what circumstances it is more profitable to hold smaller tables, in combination, for seating larger parties, than dedicated tables. The authors found that combinability is convenient for small restaurant working with small party sizes. In fact, in the other cases there is a loss of productivity due to the tables that are held out of service until adjacent tables become available. In Thompson (2003) questions related to the best configuration of a certain number of combinable tables are presented; the paper analyzes which tables should be combined with each other to obtain the most profitable configuration. In Kimes and Thompson (2004) the best table mix for a 230-seat restaurant is evaluated by using simulation based on real data. We address the table mix problem in the first part of the present paper and we add important features to the models introduced in Kimes and Thompson (2005). Indeed we consider the possibility of having different restaurant layouts while deciding the best table mix. Moreover, we take into account combinability issues to satisfy the parties demand.The second part of the paper is mainly concerned with operational decision making and is aimed at defining new reservation and seating policies for restaurants, based on the traditional network revenue management capacity control strategies. In particular, revenue-based policies are defined to decide on accepting or denying a booking request from a given size party. From an operational point of view, in Bertsimas and Shioda (2003) an integer programming, a stochastic programming and an approximate dynamic programming models are presented. The formulations are the basis for defining revenue management control policies for making “seating” decision in the case of restaurants, which do not accept reservations. In the same paper, two more reservation-booking models, static and dynamic, are presented and solved to define revenue management policies. Unlike in Bertsimas and Shioda (2003), we propose a model that is suited for restaurants that accept reservation, moreover, we explicitly deny the service to customers without having the necessity of managing a queue. Nevertheless, we can manage walk-in customers by overlapping the booking (i.e. the time periods where customers can make reservations) and meal horizon (i.e. the time periods where customers can have a meal). Furthermore, we defined a policy that offers the possibility of proposing to customers a later dining time. Finally, we consider the possibility of assigning a party of a given size to tables of either the same dimension or greater. In investigating the restaurant revenue management problem from both a strategic and operational point of view, we analyze some of the issues discussed in Thompson (2010), where the main open research themes on restaurant revenue management are presented. In Section 2, we present different formulations of the table mix problem at a growing level of detail. The operational problem is addressed in Section 3, where we give both a dynamic formulation and a linear programming approximation of the parties mix problem. In addition, we propose revenue management control policies based on the solution of the linear programming formulation (see Section 3.2). In Section 4, all the proposed policies are tested in a computational study. Finally, in Section 5 we highlight the conclusions of the work undertaken and in Appendix A we describe a procedure useful for a better understanding of the paper.Strategic decisions in restaurants are typically related either to the opening of a new restaurant or to the renovation of an existing one. The main decisions to be made are related to the choice of the “best” combination of different-sized tables, which will constitute the restaurant. The related problem is known as the Table Mix Problem (TMP, for short). The “best” table mix is influenced by several factors such as: the expected number of each size party that will be potential customers; the expected meal duration of each party; the dimensions and the layout of the restaurant, which limit the number and the type of tables that can be used, and the possibility of combining tables of different dimensions.In all the defined models, we assume that unrelated parties cannot share tables.A basic formulation of the problem, TMP_1, can be stated by introducing the following parameters:•parties setP={p:p=1,…,P‾}withP‾the number of different party sizes;tables setI={i:i=1,…,I‾}withI‾the number of different table sizes;groups (parties) dimension setG={gp:p=1,…,P‾};gpindicates the number of people of party p;tables size setQ={qi:i=1,…,I‾};qiindicates the number of seats of table i;Rpthe revenue obtainable from a party sizedgp∈G;sithe space (in square meters) filled up by a table sizedqi∈Q;TD the total area (in square meters) of the restaurant room;ADpthe average number of parties sizedgp∈G.The decision variables areyipthe number of parties sizedgp∈G, assigned to tables sizedqi∈Q. Notice thatyipcan be also defined as the number of tables sizedqi∈Q, used to satisfy parties sizedgp∈G.The objective function, representing the revenue obtainable from the actual combination of tables, is:(1)max∑p∈PRp∑qi⩾gpyip.The constraints are given by:(2)∑i∈I∑p∈Pgp⩽qiyipsi⩽TD;(3)∑qi⩾gpyip⩽ADp∀p∈P;(4)yip⩾0,integer,∀i∈I,∀p∈P.Constraint (2) states that the total area filled up by all of the tables cannot exceed the total area of the restaurant. We consider each table to be rectangular. The dimension of each rectangle (representing a table of a given capacity) is increased to take into account also the required distances between adjacent tables. Constraints (3) impose that the demand of a party withgppeople can be satisfied either with tables that have a number of seats equal to or greater thangp. Finally, constraints (4) are the integrality constraints for the decision variables.It is easy to understand that different shapes of the restaurant-room can lead to a different table-mix. In what follows, we give a new formulation of the problem, called TMP_2, where we introduce some constraints related to the specific shape of the restaurant. In particular, we partition the restaurant room in portions and assign tables to portions rather than to the entire room. The introduction of portions gives the possibility of comparing different layouts, choosing the “best”, and also to re-shape rooms that are irregular appropriately.The parameters we use for defining TMP_2 are:•space portions setS={s:s=1,…,smax}, the number of portions into which the restaurant room is divided;Lsthe length of thesth portion of space,s∈S;Hsthe height of thesth portion of space,s∈S;lithe length of a table sizedqi∈Q;hithe height of a table sizedqi∈Q.The decision variables are:•xisthe number of tables sizedqi∈Qassigned to the space portions∈S;zis=1if for somei,xis>0;zis=0otherwise;yipwith the same meaning as in the model TMP_1.The objective function, representing the revenue of the actual combination of tables, is:(5)max∑i∈I∑p∈PRpyip.Constraints are given by:(6)∑i∈Ilixis⩽Ls,∀s=1,…,S;(7)hizis⩽Hs,∀i∈I,∀s=1,…,S;(8)∑qi⩾gpyip⩽ADp,∀p∈P;(9)∑gp⩽qiyip=∑s=1Sxis,∀i∈I;(10)xis⩽Mzis,∀i∈I,∀s=1,…,S;(11)zis⩽xis,∀i∈I,∀s=1,…,S;(12)yip⩾0,integer,∀i∈I,∀p∈P;(13)xis⩾0,integer,∀i∈I,∀s=1,…,S;(14)zisbinary∀i∈I,∀s=1,…,S.Constraints (6) and (7), which we call “shape constraints”, impose that the tables selected fit well into the room portions. Constraints (8) guarantee that the demand of parties sizedgpis satisfied with tables that have a number of seats equal to or greater thangp. Constraints (9)–(11) define logical links between the variables. Finally, conditions (12)–(14) define the domain of the variables.Another issue that strongly influences decisions related to the restaurant tables mix is the expected meal duration of each group. Indeed, the number of tables of a certain dimension is also determined by the turnover of groups that will be placed on those tables. In fact, it could be possible to gain a greater revenue from small tables, with a faster turnover, than from larger tables, usually with a greater “unit value”, but that are occupied for longer.In formulating TMP_3, we consider tables as renewable resources in a given planning horizon. The number of tables available, at a certain time, is determined by the average meal duration. In fact, the tables capacity att¯is the sum of the tables that are actually free att¯and the tables that will become available att¯(i.e. the tables filled from a group beforet¯and that, considering the average meal duration of the group, will be again available att¯).To state the TMP_3 we introduce the following parameters:•t¯=1,…,T‾are the periods of the “meal horizon”, i.e. the time periods where customers can eat;Dpthe average meal duration of parties sizedgp∈G;ADpt¯the average number of parties sizedgp∈Gthat ask eating att¯;and variables:•yipt¯the number of tables sizedqi∈Qassigned to parties sizedgp∈Gthat start dining at timet¯=1,…,T‾;xit¯the number of tables sizedqi∈Qnecessary at timet¯;The total revenue obtainable from the actual combination of tables is:(15)max∑t¯=1T‾∑i∈I∑p∈Pgp⩽qiRpyipt¯.Constraints are given by:(16)∑i∈Ixit¯si⩽TD∀t¯=1,…,T‾;(17)∑qi⩾gpyipt¯⩽ADpt¯∀p∈P,∀t¯=1,…,T‾;(18)∑t̃=1t¯∑gp⩽qiyipt̃⩽xit¯+∑p∈Pgp⩽qi∑τ=1t¯-Dpyipτ∀i∈I,∀t¯=1,…,T‾;(19)xit¯⩾0,integer,∀i∈I,∀t¯=1,…,T‾;(20)yipt¯⩾0,integer,∀i∈I,∀p∈P,∀t¯=1,…T‾.Constraints (16) guarantee that, at eacht¯, the total dimension of the scheduled tables is not greater than the total available area, whereas conditions (17) impose that at timet¯the demand of a sizegpparty is satisfied with tables with a number of seats equal to or greater thangp. Constraints (18) ensure that the number of tables sizedqi, assignable to groups of dimension equal to or greater thanqiand that ask to eat at timet¯, does not exceed the tables availability att¯. The tables, sizedqi, which can be used att¯are given by the sum of the tables currently available and of the tables that, considering the average meal duration of the eating groups, will become again available att¯. Constraints (19) and (20) define the domain of the variables.The TMP_3 formulation can be also extended to take into account the “shape constraints”. The related formulation, denoted asTMP_4, is the following:(21)max∑t¯=1T‾∑i∈I∑p∈Pgp⩽qiRpyipt¯;(22)∑i∈Ilixist¯⩽Ls,∀s∈S,∀t¯=1,…,T‾;(23)hizis⩽Hs,∀i∈I,∀s=1,…,S;(24)∑qi⩾gpyipt¯⩽ADpt¯,∀p∈P,∀t¯=1,…,T‾;(25)∑t̃=1t¯∑gp⩽qiyipt̃⩽∑s=1Sxist¯+∑p∈Pgp⩽qi∑τ=1t¯-Dpyipτ,∀i∈I,∀t¯=1,…,T‾;(26)zis⩽xist¯,∀i∈I,∀s∈S,∀t¯=1,…,T‾;(27)xist¯⩾0,integer,∀i∈I,∀s∈S,∀t¯=1,…,T‾;(28)xist¯⩽Mzis∀i∈I,∀s∈S,∀t¯=1,…,T‾;(29)zisbinary∀i∈I,∀s=1,…,S;(30)yipt¯⩾0,integer,∀i∈I,∀p∈P,∀t¯=1,…T‾.Now we consider the possibility of combining tables, so that party demands can be satisfied with tables with a number of seats equal to the party dimension or with a combination of tables each of them smaller than the number of people in the party.In this paper, combinability is considered from both a strategic and an operational perspective. Strategically, restaurant managers have to decide on table sizes taking into account that tables could be combined, when necessary. In addition, table combinability is considered a key issue in restaurant operational management.When considering combinability, we assume that the demand of a party sizedgp∈Gcan be satisfied with either a single table of dimension greater or equal togpor with a combination of tables, each of them smaller thangp; i.e. the demand of a party sizedgp∈Gcan be satisfied with different “products”. In our setting a “product” can indicate both a single table or all the combinations that can be used to satisfy the demand of parties sizedgp. Therefore a product is a combination of resources (single tables or their combination) that can be sold at a price according to the dimension of the demanding parties.To give a mathematical representation of the products, we introduce the product matrixA=[A1|A2|…|Ap|…|AP‾]. Each sub-matrixAp∈Rm×np,p=1,…,P‾refers to groups sizedgp. An elementaijpofApis the number of tables sizedqi∈Qthat constitute productj,j=n(p-1)+1,…,npand that can be used to satisfy the demand of groups with dimensiongp. Thus a columnAjp, withp=1,…,P‾,j=n(p-1)+1,…,np,n0=0, of A represents thejth product that can be used to satisfy the demand of groups sizedgp.To get an idea about the structure of matrix A, it is useful to consider Fig. 1where we have 4 different sizes for parties and 3 different sizes for tables. In particular we have groups of2,4,6or 8 people and tables with4,6and 8 seats, i.e.:P={1,2,3,4},I={1,2,3},G={2,4,6,8}andQ={4,6,8}.The first three columns of the matrix in Fig. 1 are the three products that can be used to satisfy the requests from a group sized 1 (made up of 2 people); in particular the first product is a size 1 (4 seats) table, the second product is a size 2 (6 seats) table and the third product is a size 3 (8 seats) table. Columns4,5and 6 are the three products that can be used to satisfy a request from groups sized 2 (made up of 4 people). The further three columns are the products that can be used to satisfy size 3 (6 people) parties: the first product is made up of two tables with size 1 (4 seats), the second and the third products are respectively made up of one table with 6 seats and one table with 8 seats. Finally, the last four columns of matrix A refers to size 4 parties made up of 8 people, whose demand can be satisfied by a product formed by two size 1 (4 seats) tables; or a product formed by two size 2 (6 seats) tables; or a product made up of one size 1 (4 seats) table and one size 2 (6 seats) table; or a product made up of one size 3 (8 seats) tables. The main operations executed by the procedure used to construct matrix A are described in Appendix A.In order to present the mathematical formulation of the TMP, when the combinability of the tables is considered, we need to introduce the following variables:•ypjis the number of productsj,j=np-1+1,…,npwithn0=0, used to satisfy groups sizedgp∈P.The extensions of the mathematical models TMP_1, TMP_2, TMP_3 and TMP_4 to the combinability case are reported in what follows.Problem TMP_1C assumes the following form:(31)max∑p=1P‾∑j=n(p-1)+1npRpypj;(32)∑i∈Ixisi⩽TD;(33)∑j=n(p-1)+1n(p)ypj⩽ADp,∀p∈P;(34)∑p=1P‾∑j=n(p-1)+1n(p)aijpypj⩽xi,∀i∈I;(35)ypj⩾0,integer,∀i∈I,∀p∈P;(36)xi⩾0,integer,∀i∈I.Constraints (34) state that the number of tables sizeqiused in all the products must be less than or equal to the number of tables sizeqithat will be in the restaurant.Problem TMP_2C, the extension of TMP_2 to the case of combinability, can be formulated by considering the same objective function of TMP_1C (31). Constraints (6), (7), (10), (11), (13), (14), (33) and (35) are still valid, whereas constraints (9) need to be redefined as follows:(37)∑p=1P‾∑j=n(p-1)+1npaijpypj=∑s=1Sxis,∀i∈I.The extensions of TPM_3 and TPM_4 to the case of combinability are presented in what follows.Problem TMP_3C is:(38)max∑t¯=1T‾∑p=1P‾∑j=n(p-1)+1npRpypt¯j;(39)∑i∈Ixit¯si⩽TD,∀t¯=1,…,T‾;(40)∑j=n(p-1)+1n(p)ypt¯j⩽ADpt¯,∀p∈P,∀t¯=1,…,T‾;(41)∑t̃=1t¯∑p=1P‾∑j=n(p-1)+1n(p)aijpypt̃j⩽xit¯+∑p=1P‾∑j=n(p-1)+1n(p)∑τ=1t¯-Dpaijpypτj,∀i∈I,∀t¯=1,…,T;¯(42)ypt¯j⩾0,integer,∀i∈I,∀p∈P,∀t¯=1,…T‾;(43)xit¯⩾0,integer,∀i∈I,∀t¯=1,…T‾;where•ypt¯jis the number of productsj,j=np-1+1,…,npwithn0=0, used to satisfy groups sizedgp∈Pat timet¯=1,…,T‾.For problem TMP_4C the objective function (38) and constraints (6), (7), (10), (11), (13), (14), (40), and (42) are still valid, whereas constraints (41) can to be stated as follows:(44)∑t̃=1t¯∑p=1P‾∑j=n(p-1)+1npaijpypt̃j⩽∑s=1Sxist¯+∑p=1P‾∑j=n(p-1)+1np∑τ=1t¯-Dpaijpyipτ,∀i∈I,∀t¯=1,…,T‾.Once the TMP is solved, i.e. the number of tables of dimensionqi∈Qis decided, it is necessary to assign tables to customers in the most profitable way. Indeed, every day, restaurant managers deal with the problem of accepting or denying booking requests coming from groups of customers. In the sequel, we assume that the restaurant has the possibility of combining tables of different dimensions and we refer to the related problem as “The Parties Mix Problem” (PMP, for short). In particular, we assign to customers tables or their combination only if they are immediately available; the possibility of held out-service tables until other tables become available is not taken into account.We first present a dynamic programming formulation for the PMP problem. In each time periodt=1,…,Tof the “booking horizon” restaurant managers have to decide on accepting or denying booking requests from a group sizedgpasking to have a lunch/dinner at timet¯,t¯=1,…T‾, with the goal of maximizing the total revenue. In the sequel we will refer to1,…,T‾as the “meal horizon”, that is, the time periods where customers can eat. The state of the system is described by a matrixX=[X1|X2|…|XT¯], whose generic columnXt¯=(x1t¯,…,xI‾t¯)⊤,t¯=1,…T‾represents the capacity of the restaurant att¯, that is, the number of tables sizedqi,∀i∈I, available at timet¯.Time is discrete, there are T booking periods indexed by t, which runs forward; consequently,t=1is the first possible booking time.It is assumed that, in each time-period t, at most one request for eating can arrive. Letλtpt¯denote the probability that at time t one booking request from a group sizedgpis made. It holds thatλt0+∑t¯=1T∑p=1P‾λtpt¯=1, whereλt0=1represents the probability that no booking requests arrive at time t.We, further, assume that the meal durations are random and we indicate withqτpthe probability that the meal duration of a group sizedgpwill beτ,τ=1,…,τ¯time units.Let us introduce boolean variablesutjt¯p, withutjt¯p=1if and only if a request, with lunch (dinner) time att¯, from a group sizedgp, is satisfied at time t with product j.LetRpbe the revenue obtained by satisfying a request of a group sizedgp.The problem can be formulated as a dynamic program by lettingVt(X)be the maximum expected revenue obtainable in periodst,t+1,…,Tgiven that, at time t, the capacity of the system is X.The Bellman equation forVt(X)is reported in what follows:(45)Vt(X)=∑p=1P‾λtpmaxutjp∈{0,1}j∈{n(p-1)+1,…np}[rputjp+Vt+1(X̃)]+λt0Vt+1(X)with boundary conditionsVt(0)=0,∀t;Vt(X)=-∞ifxjt¯<0for somej,t¯;∀t;VT+1(X)=0,ifxjt¯⩾0∀j,t¯;VT+1(X)=-∞ifxjt¯<0for somej,t¯;where•X̃t̃=(Xt̃-Ajput¯jp),∀t̃=t¯,…,T‾. This term updates capacity when a product j booking request, from a group sizedgp, which starts lunch att¯, is accepted.X̃l̃=Xl̃+Ajput¯jp,∀l̃=t¯+∑τ=1τ¯τqτp,…,T‾. This term updates capacity when a group sizedgp, which started eating att¯, releases product j.X̃w=Xw,∀w≠t̃,l̃. This term updates capacity on the rest of the meal horizon when a request for product j from a group sizedgpis accepted.It is worth noting that the update of X, at time t, happens when a group sizedgprequires a meal with starting time att¯. In this case, we need to change the state of the system by considering that, if the request is accepted using product j, we need to update capacity taking into account that all the tables in product j will not be available from timet¯(start dining) until the end of the meal horizon (unless the product returns to being available in the future). Indeed we adjust the capacity by considering that the tables used in product j will be again available starting from a time, given by the sum of the first dining time and the average meal duration∑τ=1τ¯τqτp, and until the end of the meal horizon. On the rest of the meal horizon the capacity remains unchanged.The proposed dynamic programming (DP) model is unlikely to be solved optimally due to the curse of dimensionality. For this reason, in the next section, we propose a linear programming approximation of the DP which is an extension of well-known approximations for the DP of traditional network capacity management. In particular, we are interested in approximations by deterministic linear programming (DLP) (de Boer, Freling, & Piersma, 2002; Williamson, 1992). Solving the Bellman equation, by approximating the functionVt(X), falls in the general class of approximate dynamic programming (ADP) methods (Bertsekas & Tsitsiklis, 1998), in which an approximate value to the exact value function is used in the Bellman equation. The main differences among various ADP methods comes from the specific approximating mathematical programming problem that is built and solved to calculate the value function. It is evident that the type of approximation used influences the complexity of the function evaluation. Our DLP approximation is a simpler alternative to other approximations (like those presented in Topaloglu & Powell (2006) for the dynamic resource allocation problem) and offers the possibility of constructing revenue management policies, based on easy to solve deterministic optimization problems, which perform well in comparison to optimal policies.In the LPMP, we replace stochastic quantities by their mean values and assume that capacity and demand are continuous.Remembering the definition of matrix A at the end of Section 2, we define the following parameters:•d the random cumulative future demand at time t, andd¯its mean. In particulardpt¯is the aggregate number of requests from a group sizedgpasking for a meal with starting timet¯,rpthe expected revenue from a group sizedgp,xit¯the number of tables of dimensionqi∈Iavailable at timet¯,Dpthe average meal duration of a group sizedgp.yjpt¯the number of products of typej=1,…,nP¯used to satisfy the requests of groups sizedgpstarting their meal at timet¯.The total revenue obtainable, at time t, when the restaurant capacity is x can be obtained by solving the following optimization problem:(46)RLPMP(x,t)=max∑t¯=tT∑p=1P‾∑j=n(p-1)+1nprpyjpt¯;(47)∑p=1P‾∑j=n(p-1)+1np∑t̃=1t¯aijpyjpt̃⩽xit¯+∑p=1P‾∑j=n(p-1)+1np∑t̃=1t¯-Dpaijpyjpt̃,∀i,t¯=t,…,T;(48)∑j=n(p-1)+1npyjpt¯⩽d¯pt¯,∀p,t¯=1,…,T;(49)yjpt¯⩾0andinteger,∀j,p,t¯=t,…,T.Constraints (48) state that the demand of a group sizedgpcan be satisfied with all the products that are compatible with the group dimension. Constraints (47) control the availability of a table of dimensionqiat timet¯.It is well known (Talluri & Van Ryzin, 2004, pp. 87–95) that by solving the LPMP model we can use either the primal variables to construct a partitioned booking limit control directly or the dual variables to define a bid price control. In the partitioned booking limit control, a fixed amount of capacity of each resource is allocated to every product that is offered. The demand for each product has access only to its allocated capacity and no other product may use this capacity. In contrast, a bid price control policy sets a threshold price or bid price for each resource in the network. Roughly speaking, this bid-price is an estimate of the marginal cost of consuming the next incremental unit of the resource capacity. When a booking request for a product arrives, the revenue of the request is compared to the sum of the bid prices of all the resources required by the product. If the revenue exceeds the sum of the bid prices, the request is accepted provided that all the resources associated with the requested product are still available; if not, the request is rejected. In the context of the LPMP, optimal solutionsyj∗pt¯give partitioned booking limits while bid prices are formed from optimal dual variables of constraint (47). As specified at the end of Section 3, LPLP is an approximation of the dynamic problem that ignores the uncertainty in demand and meals durations. The introduction of simpler models of the original one that are also computationally tractable has been extensively used in defining policies for the capacity control under the revenue management setting. Indeed in Gallego and van Ryzin (1994, 1997) and Talluri and van Ryzin (1998) it is discussed as certain simple policies do, in fact, perform well in comparison to optimal policies. Moreover, in Cooper (2002) some asymptotic results, under the assumption that mean demand and remaining capacities are both “large”, are discussed. In particular is proved the convergence of the expected revenue generated from the partitioned booking-limit policy based on the optimal primal solution of the deterministic linear programming to the optimal expected revenue of the dynamic model one.At a certain point of the planning horizon, decisions about accepting or denying a meal request have to be made.The model is driven by the following event: at time t, a booking request, from a group sizedgpthat ask for a meal with starting time time att¯, arrives at the restaurant.When this event happens modelRLPMP(x,t)is solved and its solution is used to take a decision.From a primal viewpoint, the strategy to be adopted is a partitioned booking limits policy,BLPMP, which assumes the following form.BLPMPSchemeSolveRLPMP(x,t). Letyj¯∗pt¯denote its optimal solution.ifyj¯∗pt¯>0for somej¯=n(p-1)+1,…,npand there is enough capacity (xit̃>aij¯p∀i:aij¯p≠0and∀t̃=t¯,…,T) thenaccept the request;setyj¯∗pt¯=yj¯∗pt¯-1;update appropriately capacity:xit̃=xit̃-aij¯p,∀i:aij¯p≠0and∀t̃=t¯,…T;calculate the revenue obtained from accepting the request;elsedeny the request.end ifNow we introduce a new policy called Later Accommodation for Party Mix Problem (LAPMP). The model is still driven by the arrival of a request at time t from a group sizedgpasking to have a meal at timet¯, but in theLAPMPcase, the decision maker has the possibility of suggesting a later starting timetnewfor the meal. It is worth nothing that the customers can either accept to have a later meal and, in this case, the restaurant capacity is properly updated or they can reject this possibility and leave the restaurant.LAPMPSchemeSolveRLPMP(x,t). Letyj¯∗pt¯denote its optimal solution.ifyj¯∗pt¯>0for somej¯=n(p-1)+1,…,npand there is enough capacity thenaccept the request;setyj¯∗pt¯=yj¯∗pt¯-1;update appropriately capacity i.e.xit̃=xit̃-aij¯p,∀i:aij¯p≠0and∀t̃=t¯,…T;calculate the revenue obtained from accepting the request;elseifyj̃∗ptnew>0for somej̃=n(p-1)+1,…,npandtnew>t¯andtnew⩽Tthenif the group sizedgpaccept to wait for(tnew-t¯)and there is enough capacity thenaccept the request with later accommodation;setyj̃∗ptnew=yj̃∗ptnew-1;update appropriately capacity i.e.xitˆ=xitˆ-aij̃p,∀i:aij̃p≠0and∀tˆ=tnew,…T;calculate the revenue obtained from accepting the request;end ifend ifend ifFrom a dual viewpoint, we solve the linear relaxation of the problemRLPMP(x,t)and use the dual variables associated with constraints (47). We will indicate withBPPMPthe Bid Price Policy associated with the linear relaxation of the PMP problem.Let us indicate withπt¯=π1t¯,…,πmt¯t¯=t,…,Tthe vectors of dual variables associated with constraints (47).A possible strategy to accept or deny a request from a group sizedgp, asking to have a meal at timet¯, that arrives at time t to the restaurant is outlined in the following.BPPMPScheme.Solve the linear relaxation ofRLPMP(x,t)to obtain the dual variablesπt¯,t¯=t,…,T,i=1,…,I‾.ifrp⩾Aj¯pπt¯for somej¯=n(p-1)+1,…,npandxit̃>0∀t̃=t¯,…,Tthenaccept the request;update appropriately capacity;calculate the revenue obtained from accepting the request;elsedeny the request.end ifIt is worth noting that the update of the capacity is the same as in the previous case.We also implemented an Average Bid Price PolicyABPPMP. In this case the average bid price value on the time interval[t¯,T], defined asπaverage=Aj¯p(πt¯+πt¯+1+…+πt¯+Dp){min[(t¯+Dp),T]-t¯}, is considered and the revenuerpcompared with it.In this section, we report the numerical results obtained by testing both the models proposed in Section 2 and the policies defined in Section 3.2.All the numerical experiments were carried out in AIMMS 3.7, with Cplex 10.1 as solver, on a Pentium Intel(R) Core(TM) i7 CPU Q720 1.60gigahertz 4gigabytes of RAM PC, under Windows 7 operating system.The restaurants features, we considered, reported in Table 1, refers to restaurant with capacity of 50, 100, and 200 seats. The dimension of the rooms, in square meters, are calculated by considering that Italian rules recommend1.2square meters for each seats.Length and height for each type of tables are reported in Table 2. Tables dimensions follow Italian rules and are comprehensive of the required distances between tables.Table 2 also contains the group characteristics, in particular the number of people constituting each group, the value of the revenue and the expected meal duration, expressed in time units (quarter-hours in our experiments), associated with each group. It is worth nothing that in our setting we can consider, without loss of generality, the number of people constituting each group as an even number.Table 3contains information related to formulations TMP_2, TMP_4, TMP_2C and TMP_4C. We considered the restaurants room as rectangular and divided into three stripes, whose dimensions are given in Table 3.To test the models presented in Section 2, theADpparameter, i.e. the average number of a party sizedgp,p∈P, was calculated considering both the cases in which the expected number of customers is equal to the number of seats (low demand setting) and the case in which the expected number of customers is increased by80%with respect to the number of seats (high demand setting). We also considered three different demand scenarios, reported in Table 4, the first refers to arrivals that are mainly from groups of small-sized, the second refers to a balanced number of arrivals from all the groups while in the last scenario arrivals are mainly from groups of 8 and 10 people. The meal horizon is taken asT=9periods of time. Each period of time can be considered as a quarter-hour, so that, as peculiar for the Italian lifestyle, lunches can start at 12 and terminate at 02:00p.m. Moreover, always considering Italian lifestyle, theADptparameters, i.e. the average number of parties sizedgp,p∈Pat time t, was calculated by imposing that65%of customers ask for a meal between the third and the seventh period of time,20%of customers ask for a meal between the eighth and the ninth periods of time and the remaining15%at the first and the second periods of time. In this way we considered a variable rate of customers in the meal horizon. We indicate the test problem for TMP with TPsij, where the indexi,i=1,2,3, indicates the type of restaurant (see Table 1), the indexj,j=1,2,3, indicates the demand scenario (see Table 4) and s refers to strategic level. For instance, the test problemTPs23is related to the case of a restaurant with 100 seats and an area of 120 square meters while the values of demand are generated by considering the second scenario.In Tables 5 and 6, the average revenue values, obtained by solving all the strategic models presented in Section 2, are reported.Results in Tables 5 and 6 underline that the average revenue obtainable from TMP_3 and TMP_4 models is always greater than the average revenue from TMP_1 and TMP_2; as a matter of fact, managing the tables as reusable resources, in a given planning horizon, gives the possibility to the restaurant to get a greater revenue. The results also show that the revenue values from TMP_2 and TMP_4 models are lower or equal than the revenue of TMP_1 and TMP_3 suggesting that aspects related to the specific room shapes should be also considered when dimensioning restaurants.The effects of combining tables are summarized in Tables 7 and 8. The average revenue in the case of combinability is always greater than the revenue without the possibility of combining tables, confirming that combinability is always an important issue to consider in the table mix composition.We tested the performances ofBLPMP,LAPMP,BPPMP, andABPPMPpolicies, defined in Section 3.2, and compared the results with the performances of a simple first-come first-served policy (FCFSP) and of a hindsight policy (HSP) with the perfect knowledge of the realized demand.Two different strategies in accepting reservations were considered: theno-overlapand theoverlapsettings. While in the former, the booking and the meal horizons do not overlap, in the case of overlap the two horizons are coincident. Theoverlapsetting gives us the possibility of managing walk-in customers. The underlying assumption is that walk-in customers are treated no differently from customers who call in for a reservation, except that the request eating time of a walk-in customer is equal to the “reservation” time period. Indeed, while in theno-overlapsetting, the model is driven by the arrival to the restaurant, at time t, of a booking request from a group sizedgpasking to have a meal at timet¯, in theoverlapcase the model is driven by the arrival at the restaurant, at time t, of a request from a group sizedgpasking to have a meal at the same instant of time t. The process requires solving theRLPMP(x,t)model at each time of the planning horizon, that requires a very limited computational effort.TheADpparameter was determined, by considering the cases of average load factorsrhopof 0.9 and 1.7, from the formularhop=ADp×DpCp; whereDpis the duration of the meal for a sizegpgroup whileCpis the maximum number of products available for a group sizedgp, given that the restaurant is made up ofxitables sizedqi. For the values ofxi, we considered the two different scenarios presented in Table 9, the first referring to restaurants that hold mainly small tables whereas the second to restaurants with a balanced mix of tables of different dimensions.TheADptparameters was calculated, as for the TMP, by imposing that65%of customers ask for a meal between the third and the seventh period of time,20%of customers ask for a meal between the eighth and the ninth periods of time and the remaining15%at the first and the second periods of time.We used the notation TP followed by two indexes to indicate the different sets of test problems. The first index indicates the capacity of the restaurant, while the second refers to the demand scenario (i.e. TP11 indicates the test problem related to a restaurant of 50 seats, when the first demand scenario is considered, while TP32 indicates the test problem related to a restaurant of 200 seats, when the second type of demand scenario is considered). Moreover “O” and “NO”, refers respectively to the overlap and the no-overlap cases. For the no-overlap case, the policies are tested by considering a booking horizon of 7 periods and a meal horizon of 9 periods; whereas in the overlap case the horizon is of 9 periods. We measure the performances of policies over 500 simulated booking processes for each test problem.In each simulation run, the dinner requests are randomly generated by applying a two phases procedure. In the first phase, for each group of a given dimension, and each meal time, the number of dinner requests is randomly generated according to a normal distribution, with a given expected demand and a given coefficient of variation. The expected demand is set equal to theADptparameters whereas the coefficient of variation is chosen randomly from the interval[0,1].In the second phase, for each request, booking arrival times are randomly generated according to a uniform distribution.The requests generated by the procedure outlined above are then processed. In particular, when no-overlap is considered, at each time instantt¯in the booking horizon, a request, for which the booking arrival time is less than or equal to the considered booking instant, is chosen and the accept or deny decision is made based on one of the proposed policies. The tables availability is then updated and another booking request is processed. We move to the next booking time period when there are no more requests, arrived beforet¯, which need to be evaluated. In our experiments, we solve the models, used to define the policies, a number of times equal to the length of the booking horizon.In the overlap case, the requests are processed by considering the accept or deny decision at each time instant t in the meal horizon. The computational effort required by all the policies is very limited (only few seconds); for this reason, we do not present any analysis on the execution times.It is worth noting that when a customer makes a reservation, his/her request is either accepted or not and in the last case the customer will exit the system. Moreover, once a customer makes the reservation, it is assumed that he/she will show up and the table he/she booked is always available when he/she arrives. The same assumptions are made for the (FCFSP).In addition to the revenue values achieved by the proposed policies on each scenario, the following performance measures have been also considered:•seat occupancy (SO), defined as the ratio between the size of a group and the number of seats of the product used to satisfy the related request. This index can be used to evaluate table utilization. It is worth observing that the higher the seat occupancy, the higher the overall revenue;percentage of the customers served;percentage of customers with the original meal request time accepted. It is worth observing that this measure can be applied only toLAPMP.Tables 10 and 11contain, for each policy and each test problem, the average revenue value and its95%confidence interval in the no-overlap case. The computational results obtained in the overlap case are reported in Tables 12 and 13. In the last row ATP, the average revenue obtained by each policy on all the considered test problems is given.The results for no-overlap case show thatLAPMPand theABPPMPoutperformBLPMPandBPPMP. The average revenue forBPPMPis worse than the one achieved by all the other policies forLF=1.7while, in the case of aLF=0.9, the worst performance is obtained byBLPMP.In the overlap case,BLPMPhas an average revenue greater than the one achieved byABPPMPfor both the load factors, whereasLAPMPbehaves the best.To give an explanation of the observed behavior, it is useful to consider the results reported in Table 14, where, for each policy, the average percentage of the requests accepted, on all the considered test problems, is reported.Indeed, in almost all the policies, the higher the percentage of the requests accepted, the higher the revenue achieved. The only exception is observed in the overlap case withLF=1.7(see Table 14), for which the percentage of requests accepted byABPPMPis slightly higher than the those served byBLPMP, but, as shown in Table 13, the revenue achieved follows an opposite trend. In particular, the average revenue obtained byABPPMPis equal to8678.00, whereas, on average, a revenue of8886.66is gained by applyingBLPMP. This specific behavior can be justified by observing that the average percentage of requests of groups sized4,8and 10 accepted byBLPMPin greater than those served byABPPMP: the aforementioned groups are those for which we obtained the highest revenue per unit of time.The results of Table 14 underline that the proposed policies guarantee an acceptable level of service, in particular, in a low-demand settings, more than50%of the incoming requests are accepted, whereas when anLF=1.7is considered, the percentage of customers served is about of34%, as expected in high load factor settings.In order to evaluate the proposed policies from the table utilization point of view, in Tables 15 and 16, we report the average seat occupancy for each policy and for each group. The issue is related to the choice of the appropriate product to satisfy the request of a given group. Indeed, if the request of a group sizedgpis satisfied with a product (a combination of tables) with s seats ands<gp, the revenue associated with the remainings-gpseats is lost. Thus, it is important to decide when to save tables for larger parties even when smaller parties are requesting to have a meal. The computational results reported in Tables 15 and 16 underline that the proposed policies allow a good table utilization to be achieved. In particular, high seat occupancies are achieved and the size (i.e., number of seats) of the product used to satisfy the demand of a given group closely matches the group size.It is worth observing that, since a party sized two can be seated at a table sized four or larger, an average occupancy degree of about0.44can be considered satisfactory, meaning that in the majority of cases the tables with four seats are selected, thus the risk of revenue lost is reduced.The values of average revenues underFCFSPandHSPare reported in Tables 17 and 18.For each control policy we defined the average percentage error (APE) and the average percentage gain (APG), as follows:(50)APE=RHSP-RiRHSP×100,i=BLPMP,LAPMP,BPPMP,ABPPMP;(51)APG=Ri-RFCFSPRFCFSP×100,i=BLPMP,LAPMP,BPPMP,ABPPMP.Tables 19–22contain the APE and APG values for the no-overlap and overlap cases.Tables 19 and 20 show that in the no-overlap case, for both the values of load factor,LAPMPperforms on average better than all the other policies.In particular,LAPMPpresents an error of1.25%for a load factor of1.7and an error of2.23%forLF=0.9while, at the same time, it gives a gain of36.45%and42.28%forLF=0.9andLF=1.7.It is worth nothing that the negative values of APE in Table 19 are due to the fact that the APE compares the revenue obtained by applyingLAPMP, that offers the possibility of a later starting time for the meal, with the revenue obtained from the solution of the LPMP model with a perfect knowledge of the demand realized.BLPMP, withLF=0.9behaves the worst, showing an error of27.92%and a gain of only0.66%. It is worth noting that the negative values of APG in Table 20 are due to the fact that revenue values forRLPMPby applyingFCFSPare greater than the revenue values forRLPMPby applyingBLPMP, confirming that revenue management policies are really effective when demand is high with respect to the capacity. Indeed, for a load factor of1.7all revenue management policies perform better than the First-Come First-Served; moreoverBLPMP, performs better thanBPPMP, but worse than the other policies.ABPPMPis the policy with the greatest gain and the lowest error afterLABLP. In particular, the best performance ofABPPMPis achieved withLF=1.7, with an average error of9.70%and an average gain of30.07%.In the case of overlap,LAPMPshows the best performance (see Tables 21 and 22). It must be remembered that theLAPMPconsiders the possibility for each party of waiting for a meal and of being served after a certain period of time, therefore the results obtained were predictable.From Tables 21 and 22, it is evident thatBPPMPhas the worst performance, with an error of25.82%and a gain of2.25%forLF=0.9, and with an error of27.85%and a gain of3.33%forLF=1.7.In the overlap case,BLPMPperforms better thanABPPMPfor both the load factor values.By comparing the results for the no-overlap and for the overlap cases, we can affirm that the values of APE and APG are comparable for all policies except forBLPMPthat presents a lower error of about64%and an higher gain of about97%than in the case of overlap.LAPMP, in Table 23, we report the average percentage number of customers with the original meal request time accepted. The results collected in Table 23 underline that, for the non-overlap case, on average about60%of the incoming groups can have a meal at the time they wish, whereas when the overlap scenario is considered this percentage reduces to55.42%and47.64%for anLF=0.9andLF=1.7, respectively.

@&#CONCLUSIONS@&#
In this paper we studied some relevant strategic and operational problems arising in restaurant revenue management. From a strategic point of view, we introduced new formulations for the table mix problem by considering several aspects of the real setting. In particular, the expected meal duration, the room shape and the tables combinability were addressed in developing the new mathematical models.From the operational point of view, we defined several revenue-based booking control policies both in the cases of overlap and no-overlap between decision periods. The booking control policies are based on the solution to a deterministic model, which we defined starting from a dynamic model, unlikely to be solved due to the curse of dimensionality.The performances of the different booking control policies are evaluated in a simulated study. The results show that all the booking control policies, on average, perform better than the simple First-Come First-Served policy and than the policy obtained in the case of perfect knowledge of the demand realized.In what follows we show a procedure to construct the product matrix A as defined in Section 2.Let•i=1,…,I: the types of tables;si: the number of seats of table i;p=1,…,P‾: the number of parties;gp: the number of people of party p;aijp: a generic element of matrix A.The objective is to determine the columns of matrix A which indicate thejth product that can be used to satisfy the demand of a group sizedn(p).FORp=1,…,PDOSETj=1;FORi=1,…,IDO1. SETl=gpsi;2. SETaijp=l;afjp=0,f≠i,f∈I;3. SETj=j+1.WHILEl>0DOSETl=l-1;FORf=i+1,…,IDO1. SETl1=gp-si×lsf;2. SETaijp=l;afjp=l1;akjp=0,k≠f,k∈I;3. SETj=j+1.END FOREND WHILEEND FOREND FORApplying the procedure described above, we obtain a matrixA1∈RI×Col(A1). In order to eliminate the duplicated columns the following steps are needed.FORp=1,…,PDOFORj,u=1,…,Col(A1)ANDu>jDOSET dupl=true;FORi=1,…,IDOIFaijp≠aiupTHENdupl=false.END IFEND FORIF dupl=true THENDELETE column u.END IFEND FOREND FORSince the obtained matrixA∈RI×Col(A)contains dominated columns, i.e. columns (products) that utilize more tables that the necessary, the following steps can be applied to determine the feasible columns.FORp=1,…,PDOFORj,u=1,…,Col(A)DOSET less=0 AND equal=0;FORi=1,…,IDOIFaijp<aiupTHENless=less+1.END IFIFaijp=aiupTHENequal=equal+1.END IFEND FORIF less=1 AND equal=I-1 THENDELETE column u.END IFEND FOREND FOR