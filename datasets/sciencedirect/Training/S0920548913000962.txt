@&#MAIN-TITLE@&#
MDA-based visual modeling approach for resources link relationships using UML profile

@&#HIGHLIGHTS@&#
MDA-based visual modeling approach for resources link relationshipsThe XLinkUML profile is developed to extend UML for XLink modeling.XSLT-based approach to automatically generating the XLink documents

@&#KEYPHRASES@&#
UML profile,MDA,XLink,Software engineering,Cloud computing,

@&#ABSTRACT@&#
Current XML editors do not provide conceptual modeling for XLink. This leads to inefficient development processes, and a low potential for reuse. To address these shortcomings, this study presents a Model Driven Architecture (MDA) approach with the UML profile to build XLink applications for various domains. This investigation demonstrates how users can use the UML profile to provide a conceptual and visual modeling for XLink applications, and automatically generate different XLink-based documents for various domains. The proposed methodology enables Web-based system developers to generate relationships between resources, and to improve software quality by adopting software engineering techniques in XML development.

@&#INTRODUCTION@&#
The masses of resources available on the World-Wide Web mean that enabling effective use of resources is a challenging task. The web is largely unstructured, with pages authored by many people on a diverse range of topics, making simple browsing too time consuming to be practical. The XML Link Language (XLink) [1], which is a W3C [2] standard for describing the relationships among Web resources, is a useful solution to this problem. XLink provides an extendable linking model to enhance the structure and quality of content in the WWW, thus raising the value of linking information. Additionally, XLink technology can help find useful cloud resources to facilitate to build new cloud-based applications. Cloud computing [3,4] is an emerging paradigm where computing resources are offered over the Internet. There are two types of problems of using cloud computing resources. Cloud resources providers are difficult to publish their services to cloud users. On the other hand, cloud users cannot easily find useful cloud resources.The main limitation of XLink is that it is an XML-based development, and thus focuses on syntax and format rather than semantics and knowledge. Therefore, XLink has the advantage of metadata association, but it lacks computer-interpretability to support knowledge representation for intelligent applications. In our previous research [5], we proposed an OWL-based language, called OWL-L, which is based on XLink to define a set of classes and properties, specific to the description of Web resources links. OWL-L is first approach to address the limitation using ontology technologies to modeling the structure of XLink. The main purpose of OWL-L is to make Web resources links computer-interpretable. Two aspects of OWL-L, link profile and link model are described. The link profile provides the information required for an agent to discover a link, while the link model provides information that enables an agent to exploit a link.Considering XLink from a software engineering point of view, a visualized approach for XLink modeling is crucial. Current XML editors do not provide conceptual modeling for XLink. This shortcoming leads to inefficient development processes and a low potential for reuse. This study proposes the usage of software engineering techniques, particularly the Unified Modeling Language (UML) [6,7], which is the most accepted software engineering standard to model XLink. However, UML has few elements for modeling and representing concrete concepts of specifics domains, such as XLink modeling.The Object Management Group (OMG) [8], which is the leading organization for object-oriented programming, defined the UML as a standard graphical language for expressing system development models. Additionally, the OMG has proposed a Model Driven Architecture (MDA) [9,10] for analysis, design and implementation of software systems. The MDA specifies three viewpoints on a software system, namely a Computation Independent Model (CIM), a Platform Independent Model (PIM) and a Platform Specific Model (PSM). The CIM focuses on the environment and the requirements of the system; but is not concerned about any structural or processing details of the system. A PIM is a model with no information specific to the platform or the technology that is adopted to realize it. A PSM combines the specifications in the PIM with the details to realize it on a specific platform.This study adopts an MDA-based approach to solve above issues in XLink modeling. Firstly, XLink framework is formally defined as a CIM to capture the concepts and properties of XLink. The formal definitions of XLink framework is denoted by XLink-CIM. A UML profile that is a PIM based on XLink-CIM is then designed to enable visual modeling for resources link relationships. Additionally, an XSLT-based style sheet is implemented to transform PIM models prepared within the defined UML profile into a PSM. Finally, different XLink-based documents are automatically created in XML format for various XLink application domains.The OMG defines two mechanisms for extending UML: UML profile [11] and metamodel extension [12]. The UML profile approach contains a pre-defined set of stereotypes, tagged values, constraints, and notation icons that collectively specialize and tailor the existing UML. The main construct in the profile is the stereotype that is purely an extension mechanism. The metamodel extension approach is defined through the Meta-Object Facility (MOF) [13] specification which involves the process of defining a new metamodel. The study develops a UML profile, called XLinkUML profile, based on the MDA-based approach to modeling XLink.This study visually model XLink to fulfill the XLinkUML profile and automatic generation of the XLink schema documents. It makes three contributions. (1) This study proposes an MDA-based approach to facilitate the application of software engineering techniques for modeling resources link relationships. (2) The XLinkUML profile is developed from the metamodel to extend UML for XLink modeling. (3) We implement a prototype system with XSLT-based approach to automatically generating the XLink-based documents from the UML modeling tools. The main benefit of adapting the XSLT-based approach is in its extensibility. Each XSLT style sheet represents a specific domain application of XLink. When a new XLink application is developed, our system only needs to add a XSLT style sheet. Currently, our system supports two different application domain, including XLink schema and OWL-L ontology.This paper is organized as follows. The next section briefly reviews some existing UML extension by the UML profile approach. Section 3 describes an MDA-based approach for XLink modeling. Section 4 presents the XLink framework. Section 5 describes the proposed XLinkUML profile. In Section 6, the study provides a concrete example to illustrate how XLinkUML profile can be adopted to extend UML for XLink modeling. In Section 7 presents the prototype system for automatically generating the XLink-based documents from a UML representation of the visual model. Finally, summary and concluding remarks are included.

@&#CONCLUSIONS@&#
XLink is adopted extensively in Web-based application systems to describe explicitly the link relationships among Web resources. A systematic development methodology for XLink modeling is essential when adopting XLink in software engineering. However, current XML editors, do not provide conceptual or visual modeling for XLink applications. The study proposes an MDA-based approach to facilitate the use of software engineering techniques to model resource link relationships. First, the XLink framework in the formal definitions is denoted by XLink-CIM. Then, an XLinkUML profile based on the XLink-CIM is then designed to construct and visualize resource link relationships in the UML modeling tools. Additionally, the U2XLink Transcoder is developed to transform PIM models that are prepared within the defined XLinkUML profile to Platform Specific Models (PSM). Finally, XLink schema and OWL-L ontology documents are generated in XML format. This approach allows XLink models to be built using a standard modeling language based on software engineering technologies.The XLinkUML profile is implemented by the StarUML, which facilitates the visual implementation of profiles using diagrams similar to those adopted in common UML editors. Further research will be to extend the XLinkUML profile with ontologies to support additional intelligence in the modeled XLink applications by deducing new adaptation rules. OWL [49,50] seems to be the most appropriate language to further study, because it currently is the main language for representing ontologies in the Semantic Web. [51,52].