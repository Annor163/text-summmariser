@&#MAIN-TITLE@&#
A domain-independent statistical methodology for dialog management in spoken dialog systems

@&#HIGHLIGHTS@&#
Dialog systems (DS) allow intuitive interaction through natural language.Dialog managers are usually implemented ad hoc and difficult to adapt to new domains.A statistical methodology is proposed to reduce the effort required to develop and adapt dialog managers.User simulation is also proposed to facilitate the acquisition of the required dialog corpus.A complete implementation of our proposal for different dialog systems and its evaluation are also detailed.

@&#KEYPHRASES@&#
Spoken dialog systems,Dialog management,Statistical methodologies,User modeling,Dialog simulation,Systems evaluation,

@&#ABSTRACT@&#
This paper proposes a domain-independent statistical methodology to develop dialog managers for spoken dialog systems. Our methodology employs a data-driven classification procedure to generate abstract representations of system turns taking into account the previous history of the dialog. A statistical framework is also introduced for the development and evaluation of dialog systems created using the methodology, which is based on a dialog simulation technique. The benefits and flexibility of the proposed methodology have been validated by developing statistical dialog managers for four spoken dialog systems of different complexity, designed for different languages (English, Italian, and Spanish) and application domains (from transactional to problem-solving tasks). The evaluation results show that the proposed methodology allows rapid development of new dialog managers as well as to explore new dialog strategies, which permit developing new enhanced versions of already existing systems.

@&#INTRODUCTION@&#
Spoken dialog systems are computer programs that receive as input speech and generate as output synthesized speech, engaging the user in a dialog that aims to be similar to that between humans (Pieraccini, 2012; Heinroth and Minker, 2012; López-Cózar and Araki, 2005; McTear, 2004; Gibbon et al., 2000). Thus, these interfaces make technologies more usable, as they ease interaction (Hempel, 2008), allow integration in different environments (Heinroth and Minker, 2012; Minker et al., 2004), and make technologies more accessible, especially for disabled people (Vipperla et al., 2012; Beskow et al., 2009).Usually, SDSs carry out five main tasks: Automatic Speech Recognition (ASR), Spoken Language Understanding (SLU), Dialog Management (DM), Natural Language Generation (NLG), and Text-To-Speech Synthesis (TTS). These tasks are typically implemented in different modules of the system's architecture.The goal of speech recognition is to obtain the sequence of words uttered by a speaker (Tsilfidis et al., 2013; O’Shaughnessy, 2008; López-Cózar and Callejas, 2008). It is a very complex task, as there can be a great deal of variation in the input the recognizer must analyze, for example, in terms of the linguistics of the utterance, inter and intra speaker variation, the interaction context and the transmission channel. Once the speech recognizer has provided an output, the system must understand what the user said. The goal of spoken language understanding is to obtain the semantics from the recognized sentence. This process generally requires morphological, lexical, syntactical, semantic, discourse and pragmatical knowledge (Wu et al., 2010; López-Cózar et al., 2010; Minker, 1999).The dialog manager decides the next action of the system (Traum and Larsson, 2003; Williams and Young, 2007; Griol et al., 2008), interpreting the incoming semantic representation of the user input in the context of the dialog. In addition, it resolves ellipsis and anaphora, evaluates the relevance and completeness of user requests, identifies and recovers from recognition and understanding errors, retrieves information from data repositories, and decides about the next system's response. Natural language generation is the process of obtaining sentences in natural language from the non-linguistic, internal representation of information handled by the dialog system (Lemon, 2011; López et al., 2011). Finally, the TTS module transforms the generated sentences into synthesized speech (Dutoit, 1996).In order to enable rapid deployment of these systems, markup languages such as VoiceXML11http://www.w3.org/TR/voicexml20/.have been widely adopted as they reduce the time and effort required for system implementation. However, system development with this approach involves a very costly engineering cycle (Rojas-Barahona and Giorgino, 2009). As an attempt to reduce this cost and carry out rapid system prototyping, statistical approaches are gaining increasing interest. These approaches enable automatic learning of dialog strategies, thus avoiding the time-consuming process that hand-crafted dialog design involves. Statistical models can be trained from real dialogs, modeling the variability in user behaviors. Although the construction and parameterization of these models depend on expert knowledge about the task to be carried out by the dialog system, the final objective is to develop systems that are more robust for real-world conditions, and that are easier to adapt to different users and tasks (Schatzmann et al., 2006).In this paper we present a statistical approach for the development of dialog managers, which is mainly based on the modelization of the sequences of the system and user dialog acts and the introduction of a partition in the space of all the possible sequences of dialog acts. Unlike other statistical approaches, our approach has the advantage of taking into account the data supplied by the user throughout the dialog, which makes the estimation of the statistical model tractable, without causing scalability problems. Our proposal is suitable to develop dialog managers regardless of the application domain and the interaction language. Moreover, it can be incrementally optimized to tackle complex tasks, as will be shown in the experiments.After this introduction, the remainder of the paper is organized as follows. Section 2 describes existing approaches for the development of dialog managers, paying special attention to statistical approaches. Section 3 describes the proposed methodology for dialog management and the dialog generation technique employed to simulate dialogs. Section 4 describes the process and practical dialog systems used for evaluating our proposal. Section 5 presents the results of the evaluation of the dialog management methodology for the different systems using the proposed set of evaluation measures. Section 6 presents the conclusions and suggests some future work guidelines.

@&#CONCLUSIONS@&#
In this paper, we have presented a corpus-based methodology for the development of statistical dialog managers and the optimization of dialog strategies. The methodology is based on the estimation of a statistical model from the sequences of system and user dialog acts obtained from a set of training data. The selection of the following system answer is based on a classification process that takes into account the history of the dialog. We have defined a codification of this information to facilitate the correct operation of the classification function. This representation allows the system to automatically generate a specialized answer that takes the current situation of the dialog into account.As the dialog model is learned from a corpus of training samples, the performance of the dialog manager depends on the quality and size of the corpus used to learn the model. We have presented a technique for automatically acquiring a dialog corpus in which the simulated dialogs are automatically generated in the labeling format defined for the task. Therefore, the effort necessary to manually acquire and label this high number of dialogs, and learn a dialog manager is considerably reduced. In addition, error detection and correction techniques have also been developed. These techniques, which are based on the use of confidence scores and the definition of different kinds of confirmations, allow to distinguish error-prone situations and to make the necessary corrections to satisfactorily complete the task.Task-dependent information is isolated from the model so the methodology can be applied to develop dialog managers for any application domain. This is done by defining a dialog register (DR) that takes into account whether the user has provided a given piece of information related to the task and also the confidence scores that the recognition and understanding modules have assigned to this piece of information. This allows not only to cope with the situations observed the training corpus, but also to manage unseen situations by selecting the most convenient system action.We have applied the proposed methodology to develop a dialog manager for a number of different tasks, using resources already available for existing dialog systems (DI@L-log, UAH, LUNA, and EDECAN). We have evaluated the performance of the proposed technique applying it for the implementation of dialog managers for these systems. Firstly, we have carried out a comparative evaluation focused on the quality of the answers generated by the initial (baseline) and the proposed statistical dialog managers working in each system. To do this, a set of statistical measures has been defined to measure the evolution of the dialog strategy, overall quality of the dialogs in terms of high-level dialog measures, and the proportion of different user and system dialog acts.The experiments show that the number of coherent responses provided by the statistical dialog managers increases with respect the baselines, while the number of responses that lead to dialog failure decreases. Thus, although their implementation required less effort, they outperformed the baselines. The greatest differences were observed for the LUNA and EDECAN systems, whereas the improvement for simpler systems (DI@L-log and UAH) was smaller.These results have been corroborated by means of objective and subjective evaluation with real users. The results obtained for the UAH, LUNA and EDECAN systems show that the proposed methodology can be used not only to develop new dialog managers, but also to explore new dialog strategies, as they allowed a higher variability in the generated dialogs. This indicates that the method was useful to find new valid paths to achieve the objectives, which permits developing enhanced versions of the already existing systems. Hence, the advantage of the methodology is clear, because implementing new dialog managers or testing existing ones using a non-statistical approach would require a considerable effort and time, which sometimes is not affordable.With regard to the high-level dialog features, for the four experimental systems the improved dialog strategies led to a reduction in the average number of dialog turns and in the number of system actions required to attain the dialog goals for the different tasks. This improvement was achieved because our methodology enabled better selection of system actions. Regarding the dialog style and cooperativeness, the most important conclusion is the higher proportion of goal-directed actions with regard to grounding actions achieved with the new dialog strategies.In the case of the LUNA system we have extended the evaluation to assess the performance of the statistical dialog manager by learning the dialog models from dialogs collected by means of different methodologies (real users and WOZ technique). The results show that the dialog manager developed for this system using our methodology can be adapted to human–human dialogs and human–machine dialogs. In addition, the results indicate that the dialog manager created using human–machine dialogs can also infer the structure of task-related aspects that are present in human–human dialogs.The dialog managers created using the proposed technique achieved higher success rates, reduced the average number of dialog turns and improved the confirmation and error correction rates for the different tasks. Also, users reported higher satisfaction and found easier to obtain information using the enhanced systems. For simple tasks as the ones described for the DI@L-log and UAH systems, the advantages introduced by our method are less relevant; as it is possible to cost-efficiently handcraft very efficient rule-based managers, as described in the previous work for these systems. For more complex tasks, as the ones described for LUNA and EDECAN, for which the initial dialog manager had not been developed or a considerable effort had been invested in its development, our approach substantially helps the development process and allows the automatic generation of robust dialog models that efficiently covers the possible dialog situations for each task.For future work, we plan to extend the evaluation presented in this paper by carrying out a study of the relationships between the subjective opinions and the values of the different statistical measures defined in this work. Also, very interesting proposals in areas related to dialog management could be employed along with our contribution to potentially improve the DR and the AM module (Acomb et al., 2007; Pieraccini et al., 2009). For instance, different approaches to SLU are described that allow overcoming the difficulties derived from vague or imprecise user inputs. Also, we could consider to include in the DR information regarding the user, such as their profile, emotional state and current position. We could include in the AM module additional information concerning the specific task the system has been designed for, for example, the time it would take for a general user to complete a troubleshooting step. Another interesting topic for future work is to replicate the evaluation of the dialog manager considering the impact that each of the parameters of the automatic dialog generation technique has in each of the results, or even determine the number of simulated dialogs required for the dialog manager to achieve a certain performance. Finally, we also want to evaluate our systems with wider populations using crowdsourcing approaches, as discussed in Suendermann and Pieraccini (2013).