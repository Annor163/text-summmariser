@&#MAIN-TITLE@&#
A comparative study of Multi-Objective Ant Colony Optimization algorithms for the Time and Space Assembly Line Balancing Problem

@&#HIGHLIGHTS@&#
Assembly line balancing (ALB) is a classical and complex industrial problem.Time and space assembly line balancing (TSALBP) is a realistic model for ALB.We consider a TSALBP variant based on multiobjective optimization of time and space.Different MOACO proposals are designed to solve the problem and to be compared.Experimentation shows best proposals and way of using heuristic information for the problem.

@&#KEYPHRASES@&#
Ant Colony Optimization,Multi-Objective Optimization,Time and Space Assembly Line Balancing Problem,Automotive industry,

@&#ABSTRACT@&#
Assembly lines for mass manufacturing incrementally build production items by performing tasks on them while flowing between workstations. The configuration of an assembly line consists of assigning tasks to different workstations in order to optimize its operation subject to certain constraints such as the precedence relationships between the tasks. The operation of an assembly line can be optimized by minimizing two conflicting objectives, namely the number of workstations and the physical area these require. This configuration problem is an instance of the TSALBP, which is commonly found in the automotive industry. It is a hard combinatorial optimization problem to which finding the optimum solution might be infeasible or even impossible, but finding a good solution is still of great value to managers configuring the line. We adapt eight different Multi-Objective Ant Colony Optimization (MOACO) algorithms and compare their performance on ten well-known problem instances to solve such a complex problem. Experiments under different modalities show that the commonly used heuristic functions deteriorate the performance of the algorithms in time-limited scenarios due to the added computational cost. Moreover, even neglecting such a cost, the algorithms achieve a better performance without such heuristic functions. The algorithms are ranked according to three multi-objective indicators and the differences between the top-4 are further reviewed using statistical significance tests. Additionally, these four best performing MOACO algorithms are favourably compared with the Infeasibility Driven Evolutionary Algorithm (IDEA) designed specifically for industrial optimization problems.

@&#INTRODUCTION@&#
Assembly lines consist of workstations where products are built after a number of tasks are performed. These tasks are distributed between the workstations according to time and space requirements as well as the respective order of precedence between the tasks. Thus, products are built incrementally by flowing from workstation to workstation. These flow-oriented production systems are commonly found in the mass-production industry. However, its configuration is a very complex combinatorial optimization problem known as the Assembly Line Balancing Problem (ALBP) [1].The first family of problems to model such a configuration was the Simple Assembly Line Balancing Problem (SALBP) [2,1], which is a general class of bin-packing problems with additional precedence constraints. In this family, the tasks must be distributed between the workstations with the objective of minimizing the inefficiency of the line (or its total downtime) subject to the constraints imposed on the tasks and workstations. However, the configurations modeled in this family are too general and limit the representation of cases such as those in the automotive industry where space constraints must also be considered.The Time and Space Assembly Line Balancing Problem (TSALBP) is an extension of SALBP that incorporates the constraints of time and space into the model [3]. Thus, TSALBP provides a more accurate representation of real-world problems where three optimization objectives are to be minimized: the number of workstations, the physical area these occupy, and the time required to finish their respective tasks. From this family, different problems can be derived according to the combination of these objectives.One such problems is the TSALBP-m/A11Originally, this TSALBP variant is referred as TSALBP-1/3 [3]. This new notation is introduced in this work for a better understanding.in which the objectives to minimize are the number of workstations and their required physical area according to a known fixed cycle time [4–6]. Thus, instead of three objectives, TSALBP-m/A is a bi-objective optimization problem with an additional constraint of time. The number of workstations and their required physical area are conflicting objectives because the space requirements of the workstations are determined by the tasks assigned therein. Thus, assigning all tasks between a few workstations will increase the space requirements, whereas assigning them between many workstations will reduce them. The complexity of this problem makes it practically impossible in most cases to perform an exhaustive search to find the optimum solution. Thus, most of these problems are preferably approached with metaheuristics in order to find good solutions within a reasonable amount of time.Ant Colony Optimization (ACO) is a metaheuristic that models optimization problems as graphs which artificial ants explore to build potential solutions to the problem at hand [7]. Once each ant has built a candidate solution, they lay pheromone trails over the search space to encourage others to further explore the surroundings of the best solutions found. The multi-objective nature of the TSALBP has encouraged the use of multi-objective ACO (MOACO) algorithms to tackle these problems [8,9] as well different formulations of the ALBP [10,11].The overall goal of this article is to provide a comparative study of state-of-the-art MOACO algorithms and adapt them to tackle the TSALBP-m/A. Specifically, we will adapt, evaluate, compare and rank the performance of eight different MOACO algorithms on ten well-known TSALBP-m/A instances using several multi-objective performance indicators. Particularly, we are interested in investigating the underlying reasons for such a detriment in performance when utilizing the heuristic information in our framework. In addition, the performance of the MOACO algorithms will be compared with the multi-objective Infeasibility Driven Evolutionary Algorithm (IDEA) which is explicitly designed for industrial constrained optimization problems [12].An important component of MOACO algorithms is the use of heuristic information to improve the quality of the solutions found. If the heuristic information provides additional insights about the problem at hand, it can only be expected that algorithms using such information will provide much better solutions than algorithms ignoring it. However, a previous work [4] has shown that significantly better results are obtained in the TSALBP-m/A when such information is not utilized.The remainder of this article is structured as follows. Section 2 presents a background on TSALBP, ACO, adapting general MOACO algorithms to the TSALBP-m/A, and some multi-objective performance indicators. Section 3 describes the operation and specific adaptation of each of the MOACO algorithms considered to the TSALBP-m/A. Section 4 describes the experimental design for our research goals. Section 5 presents the results and our respective discussions. Finally, Section 6 presents the conclusions and suggestions for future research on this topic.

@&#CONCLUSIONS@&#
The configuration of an assembly line is a hard combinatorial optimization problem to which finding the optimum solution might be infeasible or even impossible. However, finding good solutions is still of great value to managers configuring the line. To this end, we have adapted eight MOACO algorithms to solve the TSALBP-m/A by optimizing their operation with respect to the number of workstations and the maximum physical area these require, and compared their performance on ten well-known problem instances. The comparison was performed in terms of the quality of results found by two variants of the algorithms. One in which ants utilize the commonly used heuristic functions within their transition rules, and another in which such functions are just excluded. We refer to these as the heuristic and non-heuristic variants, respectively.The non-heuristic variants always outperformed the heuristic ones in a time-limited setup where both had the same computational resources and time to perform as many iterations as possible (ExperimentA). However, such an outcome defeats the purpose of utilizing the heuristic functions because these are supposed to aid the optimization process towards finding better solutions and not otherwise. The underlying reason for such a performance was partly because the heuristic variants required more computational time to iterate, and hence they were only able to perform about half the number of iterations that the non-heuristic variants did. Notwithstanding, we prepared an additional experiment in which the variants of all the algorithms performed the same number of iterations regardless of the computational time required (ExperimentB). The quality of the results obtained with the heuristic variant was certainly improved under this experiment, but it was still worse than the quality obtained with the non-heuristic variant. Therefore, we conclude that incorporating the heuristic functions into the MOACO algorithms deteriorate their performance in TSALBP-m/A time-limited scenarios, and even neglecting such a cost, they provide no additional value to the algorithms in consideration.The best-performing algorithms were the non-heuristic variants of Bi-Criterion Optimization with Multiple Colonies and Updates by either Origin or Region (bic-1 and bic-2), followed by the non-heuristic ones of Competing Ant Colonies (comp) and Multi-Objective Ant-Q (moaq). Despite that the heuristic variants of bic-1 and bic-2 appeared in the top-4 under ExperimentB, their results were not significantly different from those obtained with their non-heuristic counterparts. The worst-performing MOACO algorithms are the heuristic and non-heuristic variants of paco, moaq, macs, and bic-0.Additionally, the MOACO algorithms were compared against IDEA, an evolutionary algorithm specifically design for industrial constrained optimization problems. However, the results from IDEA were significantly worse than the worst-performing MOACO algorithm. The main disadvantage of IDEA is that it has a computational cost higher than any of the MOACO algorithms. Such a cost is mainly due to having a third objective artificially created while also maintaining and evolving a population of infeasible solutions throughout the search.Future research on this topic may consider addressing the following goals: (i) optimize the computational requirements for the heuristic functions and quantify the improvements in terms of the quality of results, (ii) experiment with different coding schemes for the TSALBP based on the bin-packing proposal of [29], and (iii) design and evaluate different heuristic functions to the TSALBP-m/A having in mind the computational cost involved.