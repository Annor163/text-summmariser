@&#MAIN-TITLE@&#
AOMD approach for context-adaptable and conflict-free Web services composition

@&#HIGHLIGHTS@&#
We provide aspect-oriented constructs for context-adaptable Web services composition.We afford aspect-oriented constructs that can assure conflict-free composition.We present new model that allows high level specification of AOP–BPEL aspects.We formally verify consistency, accuracy, conflicts and deadlocks in the composition.We provide a plugin integrated in Eclipse BPEL environment.

@&#KEYPHRASES@&#
Web services composition,BPEL,Aspect-Oriented Programming,Aspect-oriented modelling,Adaptability,Formal verification,

@&#ABSTRACT@&#
BPEL or Business Process Execution Language is so far the most important standard language for effective composition of Web services. However, like most available process orchestration engines, BPEL does not provide automated support for reacting according to many changes that are likely to arise in any Web services composition, like downtime services, modifications in the business logic or even new policies to govern the composition. Also low-level specification of these new changes, which would be integrated at runtime in the BPEL process, will be far from being used conveniently. Moreover, the complexity of interaction in composite Web services and the diversity of rules and policies can lead to critical behavioral conflicts. We propose in this paper AOMD, a novel aspect-oriented and model driven approach that defines new grammar to address both adaptability and behavioral conflicts problems, and offers extension for WS-BPEL meta-model for high level specification of aspects. Further, we formally verify our proposition and we present real life case study, examples and experimental results that demonstrate the feasibility and effectiveness of our work.

@&#INTRODUCTION@&#
Web services composition is emerging as a universal technology for integrating distributed and heterogeneous services over the internet in order to consolidate business applications across organizational boundaries [1]. BPEL or Business Process Execution Language [2] is so far the most important standard language for effective composition of Web services. Nonetheless, today’s business environments are challenged by the need for continuous adaptation of business processes in order to meet with many changes that are likely to arise in any Web services composition after deployment, such as downtime services, modifications in the business logic or even new policies to govern the composition. Existing Web service-based process composition approaches such as BPEL need to be redeployed in order to be adapted. Process re-deployment generates downtime for systems since all services should stop until the modification process is done and even lead to possible loss of information about on-going transactions. The only changes possible at runtime are the bindings to partner links, yet not only they must be predefined at deployment-time but also cannot accommodate with all these types of changes. This problem has triggered active research efforts and achievements [3–8] that leverage Aspect-Oriented Programming (AOP) to address this limitation. In AOP, new behaviors, rules and security policies can be defined independently as aspects [9], then weaved based on one of the weaving technologies such as AspectJ [10], and dynamically activated in the Web services composition at runtime.Nevertheless, these approaches suffer from several limitations. First, [3,4,6,7] do not provide effective constructs to define context-aware aspects that can make the process adaptable with the state changes of predefined variables in the composition. Following these approaches, developers need to access the BPEL code and pass over the list of predefined messages to be aware of the existing variables, in order to formulate conditions of context-aware aspects. Such requirement entails some restrictions on the main purpose of using AOP, which is the separation of cross-cutting concerns, and limits the usefulness of that paradigm. Second, due to the complexity of interaction between composed Web services and diversity of rules and policies, conflicts are more likely to arise, a problem that [3,4,6,7] did not address. For instance, assuming that “Encryption” and “Logging” aspects are to be added after invoking particular Web service in the BPEL process; as defined in [11], the conflict problem arises in case the logging aspect is executed before the encryption aspect, where critical data will then be logged without being encrypted, leading to security flaw and rule violation in the system. Third, the specification of aspects in [3,4,6–8] is done at lower level making it way far to be used conveniently and friendly. Finally, other than performance analysis, none of these approaches has verified their proposition to make sure that all the specified aspects have been weaved correctly in the process as intended, the process is still operating correctly and remains flaw, conflict and deadlock free after the weaving.We propose in this paper AOMD, a novel aspect-oriented and model driven approach that defines new grammar to address both adaptability and behavioral conflicts problems, and offers extension for WS-BPEL meta-model for high level specification of aspects. Further, we formally verify our proposition after weaving the aspects in the BPEL process. The verification can be done also at previous stage i.e., at the proposed model level, however this is out of the scope of this paper and we leave it for future work. We also present real life case study, examples and experimental results. All these along with the verification demonstrate the feasibility and effectiveness of our work.This work offers the following contributions:1.New Aspect-Oriented grammar to reach highly context-adaptable and conflict-free Web services composition: we first extend the Aspect-Oriented language, that we proposed previously [3], with new grammar in order to reach high adaptability by offering the ability to define context-aware aspects that allows the process to react dynamically with the state changes of predefined variables in the composition without the need to manually explore the original process code. Not only that, the new grammar is also able to solve the behavioral conflict that arises between different aspects applied at the same point in the business process of the Web services composition. The new grammar defines an order between them to ensure conflict-free composition (Section 3.1).New aspect-oriented model to allow high level specification of aspects (i.e., behaviors, business rules and security policies) to be hardened in the BPEL process of the Web services composition: The model has not been presented previously. In our previous work [3], the specification of the aspects, that will be weaved in the BPEL process of Web services composition had to be done at lower level, making it way far to be used conveniently and friendly (Section 3.2).Formal verification of the proposed approach: To the best of our knowledge, none of the relevant approaches that we present in the literature review leveraging AOP to BPEL has verified that all the specified aspects have been weaved correctly in the process as intended, the process is still operating correctly and remains flaw, conflict and deadlock free after the weaving (Sections 5 and 6.3).Prototype of the proposed approach: We integrated it in a well-known and widely used commercial BPEL development environment, Eclipse. Please note that the prototype of the framework has passed through a complete process of testing and reviews by Eclipse BPEL project leader and members before getting accepted as part of their commercially used tool. To download and get additional information about the developed framework, please visit the following two links: http://www.azzammourad.org/#projects and http://www.eclipse.org/bpel/team.php. You can refer to Section 4 for more details (Section 4).The rest of the paper is organized as follows. Section 2 is dedicated to discuss some related works. Section 3 is devoted for the proposed approach. Section 4 illustrates the framework design and implementation. Section 5 describes the verification objectives as well as the verification mechanism. Section 6 presents a full case study including experimental results. Finally, Section 7 concludes the paper and draws some future research directions.

@&#CONCLUSIONS@&#
