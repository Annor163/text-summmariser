@&#MAIN-TITLE@&#
Efficient analysis of the MMAP[K]/PH[K]/1 priority queue

@&#HIGHLIGHTS@&#
Provides a unique approach to the analysis of the MMAP[K]/PH[K]/1 priority queue.Both the preemptive resume and the non-preemptive service policies are covered.Properties of the sojourn time and the number of jobs in the system are obtained.Numerically efficient procedure that can handle a large number of phases.At least an order of magnitude faster than alternative methods.

@&#KEYPHRASES@&#
Queueing,Preemptive resume priority queue,Non-preemptive priority queue,Matrix-analytic methods,

@&#ABSTRACT@&#
In this paper we consider the MMAP/PH/1 priority queue, both the case of preemptive resume and the case of non-preemptive service. The main idea of the presented analysis procedure is that the sojourn time of the low priority jobs in the preemptive case (and the waiting time distribution in the non-preemptive case) can be represented by the duration of the busy period of a special Markovian fluid model. By making use of the recent results on the busy period analysis of Markovian fluid models it is possible to calculate several queueing performance measures in an efficient way including the sojourn time distribution (both in the time domain and in the Laplace transform domain), the moments of the sojourn time, the generating function of the queue length, the queue length moments and the queue length probabilities.

@&#INTRODUCTION@&#
Priority queues belong to the most essential multi-class queueing systems that allow different job classes to receive differentiated levels of service. They play an important role in several fields like telecommunication (Demoor, Walraevens, Fiems, De Vuyst, & Bruneel, 2009), manufacturing systems (Shalev-Oren, Seidmann, & Schweitzer, 1985) or, more recently, in health care (de Souza, Morabito, Chiyoshi, & Iannoni, 2015; Hagen, Jopling, Buchman, & Lee, 2013).Priority queues are extensively studied since the middle of the last century (Miller, 1960), starting with the most basic variant with Poisson arrival process and exponentially distributed service times. However, in the practice there are cases when the Poisson assumption is not reasonable. In the last two decades most research activity on priority queues has considered more general arrival processes like the Markovian arrival process (MAP) or the marked Markovian arrival process (MMAP).In Takine (1994) the MAP/G/1 preemptive priority queue is analyzed based on the workload process, and the Laplace–Stieltjes transform (LST) of the sojourn time distribution of the jobs is derived. The non-preemptive case is investigated in Takine (1996, 1999), where the LST of the sojourn time, the moments of the sojourn time, the generating function (GF) of the queue length, the queue length moments and the queue length probabilities are provided. Subramanian and Srikant (2000) study the tail probabilities of the low priority waiting times and queue lengths in the MAP/G/1 non-preemptive priority queue.After this overview one may think that not too much has left to be done in the field of MAP driven priority queues. However, all the aforementioned results assume a general distribution for the service time, which makes the solution complex and often difficult to implement in a proper way (in the numerical sense). To address this issue the generally distributed service times can be replaced by phase-type distributed ones in the hope of the simpler and numerically more tractable solution.In Alfa, Liu, and He (2003) the (discrete–time) MAP/PH/1 priority queue is considered by representing the state space with a quasi birth–death process (QBD) and exploiting the special structure of the related fundamental matrices. While this approach is elegant and seems promising, there are some computational bottlenecks (as pointed out in Horváth, 2012). There have been efforts to make it more efficient (see Horváth, Horváth, & Telek, 2009; Horváth, 2012), but apart from the queue length moments all performance measures can be computed only in case of a very limited number of phases.The solution approach presented in this paper is based on the analysis of the workload process, like in Takine (1994). The main difference is, however, that in case of PH distributed service times it is possible to analyze the workload process and the performance measures through some appropriately defined Markovian fluid models. Taking advantage of the matrix-analytic solution technique available for Markovian fluid models we managed to derive several sojourn time and queue length related quantities in an efficient and numerically stable way, both with preemptive resume and non-preemptive service. The computationally most intensive steps of the procedure are the solutions of non-symmetric algebraic Riccati equations and Sylvester equations, for which various mature implementations exist, allowing to compute the performance measures in a reasonable time even if the number of phases is relatively large.The rest of the paper is organized as follows. Section 2 introduces the queue considered in the paper. Section 3 covers Markovian fluid flows (especially their busy period), as our solution relies on them. For two job classes, the preemptive priority queue is analyzed in Section 4, and the non-preemptive case is considered in Section 5. The extension to arbitrary many job classes is provided in the appendix. Some numerical examples are presented in Section 6. Finally, Section 7 concludes the paper.In the MMAP[K]/PH[K]/1 queue K types (classes) of jobs are distinguished. The arrival process of the jobs is described by a marked Markovian arrival process, and the service times are phase-type (PH) distributed. There is a single server, which always picks the job having the highest priority for service. If the ongoing service cannot be interrupted when a higher priority job arrives, the service is called to be non-preemptive. In the preemptive resume case (also referred to as the preemptive case for simplicity), however, the service of jobs can be interrupted, and resumed later when all higher priority jobs leave the system.To introduce the analysis approach, the two-class case (K=2) is considered throughout the paper, and the extension to the general case (K > 2) is provided in the appendix.The MMAP characterizing the arrivals (He & Neuts, 1998) has a background process, that is a continuous time Markov chain (CTMC){J(t),t>0}withNAstates and generator matrix D (which is assumed to be irreducible). Some of the transitions of the background process are accompanied by the arrival of high (low) priority jobs with the corresponding transition rates given by matrix DH (DL), respectively. The rates of the internal transitions (that do not generate arrivals) are in matrix D0, thus we have thatD=D0+DL+DH.The mean arrival rate of high priority jobs is denoted by λH, and it is calculated byλH=θDH1with vector θ being the steady state distribution of the MMAP phase process, which is the unique solution ofθD=0,θ1=1(1denotes the column vector of ones). The mean arrival rate of low priority jobs is calculated similarly, it isλL=θDL1.The random variable representing the service times of the low priority jobs SLis PH distributed (Latouche & Ramaswami, 1999) with NLphases, characterized by σL, SL and sL. Row vector σLis the initial vector, matrix SL is the transient generator and column vector sLholds the transition rates to the absorbing state, thussL=−SL1. The probability density function (pdf)fSL(t),its Laplace transformfSL*(s)and the momentsE(SLk)are(1)fSL(t)=σLeSLtsL,fSL*(s)=σL(sI−SL)−1sL,E(SLk)=kσL(−SL)−k1,and the mean service rate isμL=1/E(SL). The PH distribution corresponding to the high priority service times and its properties are defined similarly, by using subscript H instead of L.The load of the queue isρ=λH/μH+λL/μL. Throughout in this paper ρ < 1 is assumed.Markov fluid models (also known as Markovian fluid flows) are characterized by a two-dimensional Markov process{X(t),Z(t),t>0},whereX(t)represents the fluid level andZ(t)is the underlying CTMC with state spaceSof size|S|=Nand generator matrix Q that modulates the rate at which fluid is accumulated in the fluid buffer.The rate at which the level of the buffer changes in state i of the background process is denoted by ri. The diagonal matrix R is composed by fluid ratesri,i=1,⋯,N. Formally, the behavior of the fluid buffer is as follows,(2)ddtX(t)={rZ(t),ifX(t)>0,max{0,rZ(t)},ifX(t)=0.Let us denote the row vector of the stationary distribution of the fluid level for x > 0 byπ(x)={πi(x),i∈S}withπi(x)=limt→∞limΔ→0(1/Δ)P(X(t)∈(x,x+Δ),Z(t)=i),and the row vector of the stationary probabilities of empty buffer byp={pi,i∈S}withpi=limt→∞P(Z(t)=i,X(t)=0).In the recent decades it has been recognized that the matrix-analytic approach basing the efficient analysis of QBDs can be applied to fluid models as well, making it possible to solve fluid models with a large number of states (up to several thousand) in a numerically stable way (see Ramaswami, 1999; Soares & Latouche, 2002). Fluid models where|ri|=1,∀i∈Sare referred to as canonical fluid models, and are especially simple to analyze. Here we summarize the main steps of the analysis of canonical fluid models. We assume that the state space is partitioned according to the associated fluid rates to two setsS+={i∈S,ri=1}andS−={i∈S,ri=−1}(N+=|S+|,N−=|S−|) as(3)Q=[Q++Q+−Q−+Q−−],R=[I−I].The analysis is based on two fundamental matrices, matrixΨand K (see Ramaswami, 1999). MatrixΨhas a simple probabilistic interpretation, entry(Ψ)i,j,i∈S+,j∈S−is the probability that the background process is in state j when the fluid level returns to 0 given that it was in state i when the busy period (a non-empty period of the fluid queue) was initiated. MatrixΨis the solution to the nonsymmetric algebraic Riccati equation (NARE)(4)ΨQ−+Ψ+ΨQ−−+Q++Ψ+Q+−=0.Matrix K has an important role as well. Entry i, j of matrix eKxis the expected number of crossings of fluid level x in phasej∈S+starting from level 0 and phasei∈S+,before returning to level 0. If the mean fluid rate is negative, all eigenvalues of matrix K have negative real parts (thus it is full rank and invertible) and can be expressed fromΨas(5)K=Q+++ΨQ−+.Based on these matrices the stationary fluid level density vector and the stationary probability vector of the idle buffer can be computed by the following theorem.Theorem 1If the drift of the queue is negative, vector π(x) is given by(6)π(x)=[π+(x)π−(x)]=p−Q−+eKx[IΨ],x≥0,and the probability mass vector p equals to(7)p=[0p−],wherep−is the solution to the set of linear equations(8)p−(Q−−+Q−+Ψ)=0,(9)p−Q−+(−K)−1[IΨ]1+p−1=1.The theorem is based on Soares and Latouche (2002), especially in Theorem 2.2.□In this section we briefly summarize the most essential results of Ahn and Ramaswami (2005) and Ramaswami, Woolford, and Stanford (2008) on the busy period analysis of fluid models.As mentioned above,Ψis the phase transition probability matrix between the beginning and the end of the busy period. If the duration of the busy period is also of interest, we can introduce matrixΨ(t), the time dependent counterpart ofΨ. Entry(Ψ(t))i,j,i∈S+,j∈S−,t>0is the joint probability that the duration of the busy period is less than t and the underlying Markov chain is in state j when the fluid level returns to 0 given that it was in state i when the busy period was initiated.According to Theorem 1 of Ramaswami et al. (2008), the LST ofΨ(t), denoted byΨ*(s) satisfies the nonsymmetric algebraic Riccati equation(10)Ψ*(s)Q−+Ψ*(s)+Ψ*(s)Q−−+Q++Ψ*(s)+Q+−=2sΨ*(s).Let the random variableBdenote the length of the busy period of a canonical fluid queue characterized by matrix Q given that the state probability vector of the background CTMC isκ={κi,i=1,⋯,N+}when the busy period starts.Theorem 2The LST of the busy periodfB*(s)=E(e−sB)is given by(11)fB*(s)=κΨ*(s)1.The theorem follows from the probabilistic interpretation ofΨ(t).□The kth moment of the busy period is given by(12)E(Bk)=κ(−1)kΨ(k)1,whereΨ(0)=Ψand matricesΨ(k), k > 0 are defined recursively as(13)(Q+++ΨQ−+)Ψ(k)+Ψ(k)(Q−−+Q−+Ψ)=2kΨ(k−1)−∑i=1k−1(ki)Ψ(i)Q−+Ψ(k−i).Eq. (13) follows from routine derivations withΨ(k)=dkdskΨ*(s)|s=0.□Since Eq. (10) is a NARE and Eq. (13) is a Sylvester equation, the LST of the busy period and the moments can be obtained in a numerically efficient way. The distribution function in time domain,FB(t)=P(B<t)=κΨ(t)1is, however, more involved to calculate. One can rely on a generic numerical Laplace transform inversion procedure, but according to our experience they are not always reliable up to the machine precision, and need complex arithmetic. Instead, a simple and elegant procedure called Erlangization is available (Ramaswami et al., 2008), according to which the order-n approximationFB(n)(t)is(14)FB(n)(t)=∫0∞fE(n,n/t)(u)·FB(u)du,wherefE(n,n/t)(u)is the density of an order-n Erlang distribution with rate parameterν=n/tand we have thatFB(n)(t)→FB(t)as n → ∞.FB(n)(t)is basically the probability that the busy period is shorter than an Erlang(n, ν) variable.Specifically for the busy period analysisFB(n)(t)can be obtained according to the next theorem.Theorem 4(Ramaswami et al., 2008, Theorem 4) The order-n approximation of the busy period distribution is(15)FB(n)(t)=κ∑k=0n−1Ψkν1,where matricesΨkνare defined recursively as(16)(Q+++Ψ0νQ−+−νI)Ψkν+Ψkν(Q−−+Q−+Ψ0ν−νI)=−2νΨk−1ν−∑i=1k−1ΨiνQ−+Ψk−iν,for k > 0, andΨ0νis the solution to the NARE(17)Ψ0νQ−+Ψ0ν+Ψ0ν(Q−−−νI)+(Q++−νI)Ψ0ν+Q+−=0.For the detailed proof of the theorem, see Ramaswami et al. (2008). The idea is to construct a special fluid model which counts the number of Exp(ν) events during the busy period. MatrixΨkνis the probability that k such events occur before the end of busy period (with the usual phase-transition probabilities being the entries of the matrix). If the number of Exp(ν) events is less than n, then the busy period is shorter than an Erlang(n, ν) variable, providing Eq. (14).Our approach is based on the analysis of the workload process, just like (Takine, 1994) in the context of MAP/G/1 preemptive priority queues. However, by exploiting the technical simplicity of the PH distributed service times we are able to arrive to a more intuitive, simpler to implement and numerically more beneficial solution.For the analysis of the sojourn time we first need to derive the distribution of the workload a low priority arrival finds in the system.The workload process{V(t),t>0}is the amount of work in the system at time t, thus the time needed to process all the jobs in the queue if the arrival process is frozen.V(t)decreases by a slope of one between the arrival epochs, and jumps up at arrival epochs according to the service time requirement of the arrival; thus,V(t)is skip-free to the left. An example to the workload process is depicted in Fig. 1. As we have two job classes, there are two kinds of jumps in the figure, the dotted one corresponds to the high, the dashed one to the low priority jobs.To completely characterize the situation an arriving low priority job finds in the system, the stationary solution of{V(t),J(t)},thus the joint distribution of the workload and the MMAP phase needs to be derived.In our case the inter-arrival times are given by a MMAP and the size of the jumps is PH distributed, which makes it possible to apply the method of Dzial, Breuer, Soares, Latouche, and Remiche (2005) to transformV(t),which is skip-free to the left, toV′(t),which is skip-free to both directions. More precisely, the continuous process with jumps{V(t),J(t)}is transformed to{V′(t),Z(t)}from which the stationary distribution of{V(t),J(t)}at low priority arrivals is computed.The transformation to the skip-free process is performed as follows. Let{V′(t),Z(t)}be a canonical Markovian fluid model whereZ(t)is the underlying CTMC with generator matrix Q given by(18)Q++=[I⊗SLI⊗SH],Q+−=[I⊗sLI⊗sH],Q−+=[DL⊗σLDH⊗σH],Q−−=D0.This fluid model behaves like{V(t),J(t)}between arrivals, when it stays in the negative statesS−. Whenever an arrival occurs, however, it switches to one of the positive state groups (depending on the class of the entering job), and accumulates the workload increment with a slope of 1. Thus, the jumps are eliminated and replaced by progressive workload accumulations. (A similar technique has been used in Houdt (2012) for the analysis of a multi-type queue with impatient customers.) The transformed process obtained from Fig. 1 is depicted in Fig. 2.Observe that the joint stationary density of the workload and the MMAP phase at low priority arrivals are the same in the original and in the transformed process. The stationary solution π(x) of the transformed process (that is a canonical fluid model) is given by Theorem 1, from which, by embedding at just after low priority arrivals we get a matrix-exponential solution(19)π^(x)=1c^π(x)[I⊗sL00]=1c^p−Q−+eKx[IΨ][I⊗sL00]=1c^p−Q−+︸β^eKx[I⊗sL0]︸B^=β^eKxB^,where the normalization constant isc^=p−Q−+(−K)−1B^1. Note that from the three blocks in the last matrix term the upper two belong toS+and the lower belongs toS−.Due to technical reasons (which will be discussed later) the representation given by Eq. (19) will not be appropriate in the forthcoming derivations, because in generalK1+B^1≠0. The following theorem provides the representation transformation that ensures the proper row-sums.Theorem 5The joint density of the workload and the phase probability of the MMAP just after low priority arrivalsπ^(x)can be obtained by(20)π^(x)=β^′eK′xB^′,withβ^′=β^·diag〈Δ〉,K′=diag〈Δ〉−1·K·diag〈Δ〉andB^′=diag〈Δ〉−1·B^,whereΔ=(−K)−1B^1. Furthermore, we have that(21)K′1+B^′1=0.The fact that Eq. (20) equals to Eq. (19) can be proven by(22)π^(x)=β^′eK′xB^′=β^·diag〈Δ〉·ediag〈Δ〉−1·K·diag〈Δ〉xdiag〈Δ〉−1·B^=β^·diag〈Δ〉·diag〈Δ〉−1·eKx·diag〈Δ〉diag〈Δ〉−1·B^=β^eKxB^.To prove that Eq. (21) holds we have(23)K′1+B^′1=diag〈Δ〉−1(K(−K)−1B^1+B^1)=0.□For the sojourn time analysis of low priority jobs we introduce the remaining sojourn time process{T(t),t≥0}. Att=0,T(t)is the workload seen by a low priority job when it arrives. For t > 0,T(t)decreases by a slope of one till a high priority arrival occurs, whenT(t)has a jump with size given by a high priority service time. WhenT(t)reaches zero, it remains zero and the corresponding low priority job leaves the system (see Fig. 3). Hence, the sojourn time of low priority jobs TLis(24)TL=inf{t>0:T(t)=0}.Just like the workload processV(t),the remaining sojourn time processT(t)is skip-free to the left and has upward jumps. As we did with the workload process, we transformT(t)to a process which is easier to handle numerically, and derive the properties ofT(t)from the transformed process.This transformation is based on Dzial et al. (2005) again. Let us introduce a canonical fluid model{T˜(t),Z˜(t)}where the generatorQ˜of the underlying CTMC is(25)Q˜++=[K′I⊗SH],Q˜+−=[B^′I⊗sH],Q˜−+=[0DH⊗σH],Q˜−−=D0+DL,furthermore, let the distribution ofZ˜(t)att=0be(26)κ˜={P(Z˜+(0)=i)}=[β^′0].This fluid model has three state groups: there are two state groups inS+,andS−is the third one.The role of the first state group is the accumulation of the initial workload, experienced by a low priority job when it enters the system. Observe that the sojourn time density of the first state group, when started fromκ˜,is exactlyπ^(x),which is the density of the initial workload. The second group of states is activated when an arrival occurs, and the corresponding workload increment is accumulated. The third group of states, the negative ones represent the periods when the server is processing the low priority workload and is decreasing the remaining sojourn time of the tagged low priority job.Note that due to Theorem 5 the usual property of Markovian generatorsQ˜1=0holds. The correctness of the solution with the non-Markovian components K′ andB^′is ensured by Buchholz and Telek (2012).The main idea in this section is that, by construction, the relation between the duration of the busy periodB˜of the fluid model characterized by(κ˜,Q˜)and the sojourn time of low priority jobs TLis(27)TL=B˜/2.This relation is clearly visible when looking at Figs. 3 and 4.Finally, the following corollary expresses the properties of the sojourn time with the properties of the busy period (detailed in Section 3.2).Corollary 1The distribution of TL in time domain, in LST domain, and its moments can be expressed by(28)FTL(t)=P(TL<t)=FB˜(2t),(29)fTL*(s)=E(e−sTL)=fB˜*(s/2),(30)E(TLk)=E(B˜k)/2k.First we derive the distribution of the number of low priority jobs at low priority departure epochs (the corresponding random variable is denoted by XL), then the one at a random point in time (denoted by YL).When a low priority job leaves the system, the number of jobs behind it equals to the number of low priority arrivals during its sojourn in the system. To analyze this quantity, let us go back to the remaining sojourn time introduced in Section 4.2, and modify the background process of the related fluid model such that it counts the number of low priority arrivals. Instead ofQ˜we getQ˜′defined by(31)Q˜′=[F0F1F0F1F0⋱⋱],where matrices F0and F1are(32)F0=[Q˜++Q˜+−Q˜−+D0],F1=[000DL].With this generator, matrixΨ˜′of the corresponding canonical Markovian fluid model has an upper block-Toeplitz structure like(33)Ψ˜′=[Ψ˜0Ψ˜1Ψ˜2⋯Ψ˜0Ψ˜1⋯Ψ˜0⋯⋱],where the entry(Ψ˜i)k,ℓis the probability that i low priority arrivals occur during the sojourn time of a low priority job and the phase of the MMAP is ℓ at the departure given that the phase was k when it entered the system.The reason of the upper block-Toeplitz structure is that the number of low-priority arrivals during the sojourn time can only increase, and that the MMAP generating the arrivals is independent of the queue length.Theorem 6MatrixΨ˜0is the solution to the NARE(34)Ψ˜0Q˜−+Ψ˜0+Ψ˜0D0+Q˜++Ψ˜0+Q˜+−=0,and for i > 0 matricesΨ˜ican be obtained recursively by solving the Sylvester equation(35)(Q˜+++Ψ˜0Q˜−+)Ψ˜i+Ψ˜i(D0+Q˜−+Ψ˜0)=−Ψ˜i−1DL−∑j=1i−1Ψ˜jQ˜−+Ψ˜i−j.Let us partition matrixQ˜′according to the positive and negative states. We get(36)Q˜′′=[Q˜′′++Q˜′′+−Q˜′′−+Q˜′′−−]=[Q˜++Q˜+−Q˜++Q˜+−⋱⋱Q˜−+D0DLQ˜−+D0DL⋱⋱].Substituting Eqs. (36) and (33) into the NARE Eq. (4) provides the theorem after some algebraic manipulation.□The probabilities for the number of low priority jobs at low priority departuresxiL=P(XL=i)are obtained fromΨ˜iby taking into consideration the initial probability vector of the busy periodκ˜. For later use, we also introduce row vectorx̲iL={P(XL=i,J=j),j=1,⋯,NA},the joint probability of the number of jobs and the phase of the MMAP at departures (obviously,xiL=x̲iL1).Corollary 2For the distribution of the number of low priority jobs at low priority departures we have(37)x̲iL=κ˜Ψ˜i.The significance of Eq. (37) lies in the fact that the consecutive queue length probabilities can be obtained by consecutive solutions of Sylvester equations calculatingΨ˜i. The prior procedures of the related literature are far more expensive computationally.Corollary 3The generating function (GF) of the distribution of the number of jobs at departuresXL(z)=∑i=0∞zix̲iLcan be obtained by(38)XL(z)=κ˜Ψ˜(z),where matrixΨ˜(z)satisfies the NARE(39)Ψ˜(z)Q˜−+Ψ˜(z)+Ψ˜(z)(D0+zDL)+Q˜++Ψ˜(z)+Q˜+−=0.Multiplying Eq. (35) by zi, summing it from 1 to infinity, then adding Eq. (34) provides Eq. (39).□Finally, the factorial moments of XLcan be calculated by taking the derivatives of the generating function, hence(40)E(XLk)=∑i=0∞ikxiL=dkdzkXL(z)|z=11,yielding a recursion introduced by the next corollary.Corollary 4For the kth factorial moment of XL we have(41)E(XLk)̲=κ˜Ψ˜(k),E(XLk)=E(XLk)̲1,whereΨ˜(k)=dkdzkΨ˜(z)|z=1. MatrixΨ˜(0)=Ψ˜and for k > 0 matricesΨ˜(k)are obtained recursively by solving the following Sylvester equations(42)(Q˜+++Ψ˜(0)Q˜−+)Ψ˜(k)+Ψ˜(k)(Q˜−−+Q˜−+Ψ˜(0))=−kΨ˜(k−1)DL−∑i=1k−1(ki)Ψ˜(i)Q˜−+Ψ˜(k−i).In the rest of the section we calculate various properties of the number of low priority jobs at random point in time denoted by YL. Our contribution in this subsection ends here, since the relations between XLand YLare extensively studied in Takine (1996), which we adopt in this paper, and provide them for the sake of completeness.Let us introduce row vectory̲iL={P(YL=i,J=j),j=1,⋯,NA}.Theorem 7(Takine, 1996, Theorem 4.6) The generating function ofy̲iL,denoted byYL(z)=∑i=0∞ziy̲iLis related to XL(z) as(43)YL(z)(D0+DH+zDL)=λL(z−1)XL(z).(Takine, 1996, Corollary 3.11) Vectorsy̲iL,i≥0are recursively obtained by(44)y̲0L=λLx̲0L(−D0−DH)−1,y̲iL=(y̲i−1LDL+λLx̲iL−λLx̲i−1L)(−D0−DH)−1,i>0.(Takine, 1996, Corollary 3.10) The factorial moments of the number of low priority jobs at random point in time are obtained recursively as(45)E(YLk)=E(XLk)+k(E(XLk−1)̲−E(YLk−1)̲DL/λL)(1θ−D)−1DL1,E(YLk)̲=E(YLk)θ+k(E(YLk−1)̲DL−λLE(XLk−1)̲)(1θ−D)−1,for k > 0, andE(YL0)̲=θ.In case of the preemptive resume service policy the high priority class can be analyzed in separation, as a single-class MAP/PH/1 queue with arrival process given by matrices(D0+DL,DH)and service time distribution given by (σH, SH). The number of jobs in the system is matrix-exponentially distributed, and can be derived from the solution of a QBD (see Section 4.4.1 in He, 2014). The sojourn time of the jobs in a MAP/PH/1 queue is matrix exponentially distributed, as proven in He (2012) based on the analysis of the age process.The two-class analysis procedure developed here can be used to solve models with more than two classes as well. When analyzing the ith class, all lower priority classes can be neglected, only the higher priority classes need to be taken into account. The details are provided in Appendix A.The presented approach can be generalized to handle correlated service times as well, thus when the service process is a MAP. In this case the state space of the Markov chains corresponding to the fluid models have to be extended such that the phase of the service MAP is preserved in the negative states.In the non-preemptive case the service of a low priority job cannot be interrupted. It turns out, that the analysis approach developed in Section 4 can still be used with a small difference. Instead of analyzing the sojourn time and the number of jobs in the system, in the non-preemptive case we will focus on the waiting time (which can be interrupted by a high priority arrival any time) and the number of waiting jobs in the system. The non-interruptible service time and the number of arrivals during it will be added afterward to obtain the sojourn time and the number of jobs in the system.When a low priority job enters the system, its waiting time equals to the workload of the system just before its arrival (thus without its own service time) plus the service times of all high priority jobs arrived during waiting in the queue. To find out the workload just before the arrival in the example of Fig. 1 this means that we need the distribution ofV(t)just before the jumps, instead of just after the jumps.This distribution can be obtained by applying the same transformation procedure which results in a canonical Markovian fluid model with stationary fluid density π(x) and probability mass at level zero p. Embedding right before low priority arrivals we get the density(46)πˇ(x)=1cˇπ(x)[00DL]=1cˇp−Q−+eKx[IΨ][00DL]=1cˇp−Q−+︸βˇeKxΨDL︸Bˇ=βˇeKxBˇ.Note that the workload just before the arrival can be exactly zero as well, with probability mass(47)pˇ=1cˇp−DL.The normalization constant iscˇ=p−DL1+p−Q−+(−K)−1Bˇ1.Similar to Theorem 5, it is again possible to similarity transform the representationβˇ,KandBˇtoβˇ′,K′andBˇ′such thatK′1+Bˇ′1=0holds.As mentioned before, first the waiting time (denoted by WL) is characterized, then the service time is added afterward to get the sojourn time.As done in Section 4.2, it is possible to introduce the remaining waiting time processW(t)and construct a canonical fluid model{W¯(t),Z¯(t)}whose busy periodB¯is closely related to the waiting time. The blocks of the generator of this fluid model are(48)Q¯++=[K′I⊗SH],Q¯+−=[Bˇ′I⊗sH],(49)Q¯−+=[0DH⊗σH],Q¯−−=D0+DL,and the distribution ofZ¯(t)att=0(that defines the initial distribution of the busy period) is(50)κ¯={P(Z¯+(0)=i)}=[βˇ′0].Note that everything is the same as in Section 4.2, except the parameters of the initial workload distribution. Hence, it is not surprising thatWL=B¯/2.Corollary 7The distribution of WL in time domain, in LST domain, and its moments can be expressed by(51)FWL(t)=FB¯(2t),fWL*(s)=fB¯*(s/2),E(WLk)=E(B¯k)/2k.AsTL=WL+SLholds, it is straight forward to obtain the LST of the distribution of TLand its moments.Corollary 8The LST of the distribution of TL is given by(52)fTL*(s)=fWL*(s)fSL*(s).Taking the derivatives offTL*(s)with respect to s and tending s → 0 yields the moments of the sojourn time.Corollary 9The moments of the sojourn time TL are given by(53)E(TLk)=∑i=0k(ki)E(WLi)E(SLk−i).The distribution function of the sojourn time is more involved to obtain. One could directly express it as a continuous time convolution ofFWL(t)andfSL(t),but it would involve an integral which can be evaluated only numerically. Remind that bothFTL(t)in the preemptive resume case andFWL(t)in the non-preemptive case are derived from the distribution of the busy period of an appropriate fluid model, which is computed in terms of Erlangization (see Section 3.2), meaning that an order-n approximation is applied where increasing n improves the accuracy. For the preemptive resume case we had that the order-n approximation isFTL,preemp.(n)(t)=P(B˜/2<Erlang(n,nt))=P(B˜<Erlang(n,n2t))=κ˜∑k=0n−1Ψ˜kν1,withν=n/(2t)andκ˜Ψ˜kν1holding the probabilities that k Exp(ν) events occur during the busy period.In the non-preemptive case, however, busy periodB¯corresponds to the waiting time only. Thus, we have that the sojourn time distribution isFTL(n)(t)=P(B¯/2+SL<Erlang(n,nt)).Theorem 8The order-n approximation of the distribution function of TL is(54)FTL(n)(t)=κ¯∑k=0n−1Ψ¯kν1dn−k+pˇ1dn,whereν=n/(2t),matricesΨ¯kνare defined byTheorem 4with usingQ¯instead ofQ, and probabilities dn are given by(55)dn=1−σL(I−SL/(2ν))−n1.We have thatFTL(n)(t)=P(B¯/2+SL<Erlang(n,nt))=P(B¯+2SL<Erlang(n,ν))=κ¯∑k=0n−1Ψ¯kν1·P(2SL<Erlang(n−k,ν))︸dn−k+pˇ1·P(2SL<Erlang(n,ν))︸dn,where the second term corresponds to the case whenWL=0. The dℓ probabilities can be derived asdn=P(2SL<Erlang(n,ν))=P(SL<Erlang(n,2ν))=1−∫u=0∞(2νu)n−1(n−1)!2νe−2νuσLeSLu1du=1−(−ν)n−1(n−1)!2νσL∫u=0∞dn−1dνn−1e−2νueSLu1du=1−(−ν)n−1(n−1)!2νσLdn−1dνn−1(2νI−SL)−11=1−(2ν)nσL(2νI−SL)−n1,that equals to Eq. (55).□As in the preemptive resume case, first the number of low priority jobs at low priority departures is analyzed, from which the results corresponding to a random point in time are derived.To obtain the number of low priority jobs at low priority departures (XL) a tagged low priority job is picked, and the number of low priority arrivals is counted during its stay in the system. This quantity consists of two components: the number of arrivals during the waiting time, and the number of additional arrivals during the service time.The number of arrivals during the waiting time can be derived from the fluid model representing the remaining waiting time process introduced in Section 5.2. We follow the exactly same recipe as in Section 4.3 with the preemptive case, thus we modify the background process of the fluid modelQ¯such that it counts the number of arrivals during the busy period and getQ¯′. The blocks of the correspondingΨ¯′matrix,Ψ¯kare holding the probabilities that k arrivals occurred during the busy period (that is, during the waiting time) given the initial phase of the MMAP. These matrices can be calculated as Theorem 6 does in the preemptive resume case, the only difference is that matrixQ¯needs to be used instead of matrixQ˜.As for the second component, let us introduce matrices Ai, i ≥ 0 whose (k, ℓ)th entry is the probability that the MMAP generates i low priority arrivals during a low priority service time starting from phase k and the MMAP phase at the end of service is ℓ. Matrices Aiare matrix-geometric(56)Ai=α·Aia,i≥0,where(57)α=I⊗σL,(58)A=(−(D0+DH)⊕SL)−1(DL⊗I),(59)a=(−(D0+DH)⊕SL)−1(I⊗sL).Theorem 9The joint probability of the number of low priority jobs in the system and the phase of the MMAP at low priority departure instants is(60)x̲iL=hi·a+pˇAi,where matrixh0=κ¯Ψ¯0and hi, i > 0 is defined recursively as(61)hi=hi−1·A+κ¯Ψ¯iα.Let us sum the number of arrivals during the waiting time and during the service time by convolution, yielding(62)x̲iL=∑k=0iκ¯Ψ¯kAi−k+pˇAi=∑k=0iκ¯Ψ¯kαAi−k︸hia+pˇAi.The recursion for hican be shown by(63)hi=∑k=0iκ¯Ψ¯kαAi−k=∑k=0i−1κ¯Ψ¯kαAi−1−k︸hi−1·A+κ¯Ψ¯iα.□By introducing the generating functionsΨ¯(z)=∑i=0∞ziΨ¯iandA(z)=∑i=0∞ziAi,the generating functionXL(z)=∑i=0∞zix̲iLis easy to obtain from Eqs. (62) and (56).Corollary 10XL(z) is expressed by(64)XL(z)=κ¯Ψ¯(z)A(z)+pˇA(z),where matrixA(z)=∑i=0∞ziAihas the following closed form formula(65)A(z)=α(I−zA)−1a.Based on Eq. (40) the factorial moments at departures are calculated by routine derivations of Eq. (64).Corollary 11For the kth factorial moment of the number of low priority jobs at low priority departures we have(66)E(XLk)̲=∑i=0k(ki)κ¯Ψ¯(i)A(k−i)+pˇA(k),where matricesΨ¯(i)=didziΨ¯(z)|z=1are obtained similar toEq. (42)and matricesA(i)=didziA(z)|z=1have the following closed form:(67)A(i)=i!α(I−A)−i−1Aia.Having characterized the number of low priority jobs at low priority departure epochs, the properties of the number of low priority jobs at a random point in time are given by Theorem 7 and Corollaries 5 and 6.In the non-preemptive case the high priority class cannot be analyzed in separation, since a high priority job cannot be served immediately when a low priority job is in the server.We use the workload process of the high priority class denoted by{VH(t),t>0}to derive the performance measures.11Contrary to Sections 4.1 and 5.1, where the workload process of the entire system is discussed, the workload process considered here applies only to the high priority class.The trajectory ofVH(t)contains intervals where the slope is zero corresponding to the periods when the server serves low priority jobs. As before,VH(t)is transformed to a fluid model (see Fig. 5for an example).The blocks of the generator matrix of this fluid model are defined byQ++H=[I⊗I⊗SHI⊗SH],Q+−H=[0I⊗sH],Q+0H=[I⊗I⊗sH0],Q−+H=[0DH⊗σH],Q−−H=D0+DL,Q−0H=0,Q0+H=[DH⊗I⊗σH0],Q0−H=I⊗sL,Q00H=(D0+DL)⊕SL.Four state groups can be identified in the generator. The two state groups ofS+both correspond to the workload accumulation due to a new high priority arrival. The difference is that in the first state group the server works on a low priority job, thus the phase of its service needs to be maintained during the workload accumulation. In the negative statesS−the server is working on a high, in the zero statesS0the server is working on a low priority job.The probability of the phases when the workload process leaves level zero, denoted by vector κH, is not easy to obtain. Regarding this vector we are relying on the results of Takine (1996), which we re-formulate and simplify at several points due to the PH distributed service times.Let us investigate the system at the departures that leave the high priority queue empty, and introduce two probability vectors, ϕ and ϕ0 associated with this embedded process. The ith entry of ϕ0 is the probability that the whole system is empty at the embedded instant and the phase of the MMAP is i. Entry i of vector ϕ is the probability that the embedded process is in state i in the product space of the MMAP phase and the phase of the low priority service time.Theorem 10Vector ϕ0is given by(68)ϕ0=(1−ρ)p−(−D0)λLp−1+(1−ρ)p−DH1,wherep−is the probability mass vector of the fluid queue representing the workload process of the whole system (seeSections 4.1and5.1).Vector ϕ is the unique solution to the linear system(69)ϕ=(ϕ−ϕ0)(I⊗σL)(−(D0+DL)⊕SL)−1[DH⊗I⊗σH0]ΨH+(ϕ−ϕ0)(I⊗σL)(−(D0+DL)⊕SL)−1(I⊗sL)+ϕ0(−D0)−1(DL⊗σL)(−(D0+DL)⊕SL)−1[DH⊗I⊗σH0]ΨH+ϕ0(−D0)−1(DL⊗σL)(−(D0+DL)⊕SL)−1(I⊗sL)+ϕ0(−D0)−1[0DH⊗σH]ΨH,(70)ϕ1=1,whereΨHis the solution of the NARE(71)ΨHQ−+HΨH+ΨHQ−−H+(Q++H+Q+0H(−Q00H)−1Q0+H)ΨH+Q+−H+Q+0H(−Q00H)−1Q0−H=0.Eq. (68) follows from Takine (1996), Theorem 3.1 and Takine (1996), Lemma 3.2.Eq. (69) has five terms. The first one corresponds to the case when there are low priority jobs in the system when the last high priority job leaves. The server starts to serve a low priority job. The PH of the service process and the MMAP evolve together, and the MMAP generates a high priority arrival before the current service is completed, and initiates the workload process (see Fig. 5). The next departure leaving the high priority class empty occurs when the workload of the high priority class returns to level zero, with the corresponding phase transitions given byΨH(which satisfies the usual NARE after censoring out the zero states). According to the second term the low priority service is completed before the MMAP generates a high priority job, providing the phase of the next embedded point. In the third and fourth term the last high priority job leaves the system empty, and the next arriving job is a low priority one, while in the last term the next arriving job is a high priority one.□Let us introduce vectorsqLHandq0Has the stationary phase probabilities that the server is working on a low priority job and that the system is idle when there are no high priority jobs in the system, respectively. These probability vectors can be obtained from ϕ and ϕ0 by taking into account the mean amount of time spent in various phases in the system, yielding(72)qLH=1cH(ϕ−ϕ0+ϕ0(−D0)−1DL)(I⊗σL)(−(D0+DL)⊕SL)−1,q0H=1cHϕ0(−D0)−1,where cHis a normalization constant. From these vectors the initial phase distribution vector for the high priority workload process denoted by κHis given by(73)κH=qLH[DH⊗I⊗σH0]+q0H[0DH⊗σH]=qLHQ0+H+q0HQ−+H.Finally, the next two theorems provide the performance measures for the high priority jobs.Theorem 11The probability density function of the sojourn time of high priority jobsfTH(t)is matrix-exponential(74)fTH(t)=ζeZtv,with parameters(75)ζ=[κH0]/c,Z=[KH[1⊗I⊗sH0]0SL],v=[01⊗sHsL],whereKH=Q++H+Q+0H(−Q00H)−1Q0+H+ΨHQ−+Hand c is the normalization constant.The density of the workload at high priority arrival including the service time requirement the job brought to the system isκHeKHxQ+0Hif the server works on a low priority job and it isκHeKHxQ+−Hotherwise (see the points marked by circles in Fig. 5). In the latter case the sojourn time of the entering job is x. In the former case, however, the remaining service time of the low priority job has to be taken into account as well. The phase of the low priority service is also encoded in the background process, hence we have(76)fTH(t)=(κH∫x=0∞eKHxQ+0H(1⊗I)eSL(t−x)sLdt+κHeKHxQ+−H1)/c.The convolution of the two matrix exponentials with parameters KHand SL can be represented by a single matrix exponential with parameter Z according to Loan (1978). The second term can be expressed using ζeZtas well, by adding transitions from the first matrix block to the absorbing state with ratesQ+−H1=[01⊗sH]. Putting together the two terms provides the theorem.□The LST of the distribution function and the moments of TH are given by(77)fTH*(s)=ζ(sI−Z)−1v,E(THk)=k!ζ(−Z)−k−1v.For the analysis of the number of high priority jobs in the system we introduce a quasi birth–death process (QBD, Latouche and Ramaswami, 1999), where the matrices corresponding to level backward, local and level forward transitions (denoted byA−,A0andA+,respectively) areA0=[(D0+DL)⊕SLI⊗sLσH(D0+DL)⊕SH],A−=[I⊗sHσH],A+=[DH⊗IDH⊗I].In the first group of states the server is working on a low, in the second one it is working on a high priority job. It is possible to move from the first state group to second one (see matrix A0), but not the way around at levels > 0.The entries of vectory̲iHare the probabilities that there are i high priority jobs in the system and the background process is in different phases. It is well known that QBDs have a matrix geometric distribution.Theorem 12Vectorsy̲iHhave the following matrix geometric form:(78)y̲iH=y̲0HRi,where matrixRis the minimal non-negative solution to the matrix-quadratic equation(79)A++RA0+R2A−=0,and the probability of level 0 isy0H=[qLHq0H]/c′. The normalization constant isc′=[qLHq0H](I−R)−11.By definition in Eq. (72), vectorsqLHandq0Hare the stationary phase probability vectors given that there are no high priority jobs in the system. The matrix-geometric stationary distribution is a standard property of QBDs (see Latouche & Ramaswami, 1999).□The generating function of the number of high priority jobsYH(z)=∑i=0∞ziy̲iH1and the factorial momentsE(YHk)are given by(80)YH(z)=y0H(I−zR)−11,E(YHk)=k!y0HRk(I−R)−k−11.The presented approach can be generalized to arbitrary many job classes as well. The details are given in Appendix B.We implemented the presented analysis methods in MATLAB.22Our implementation can be downloaded from http://www.hit.bme.hu/~ghorvath/software.The implementation computes all performance measures considered in the paper by both preemptive resume and non-preemptive service, and for any number of job classes.In our implementation the NARE problems are solved by the ADDA procedure (Wang, Wang, & Li, 2012). We note that one of the two linear terms in the NAREs in this paper are block diagonal, which can be exploited by a novel technique to improve the computation speed further (Meini, 2013), but we did not use this possibility. The Sylvester equations are solved by the lyap function of MATLAB, which is based on the Hessenberg–Schur algorithm (Golub, Nash, & Loan, 1979).In this section we compare our procedure with three prior methods: the method of Alfa et al. (2003) (transformed to continuous time), its improved version published in Horváth et al. (2009), and the procedure of Horváth (2012). Note that the latter two procedures are far less general than Alfa et al. (2003) or the proposed one. They can handle only preemptive resume service, they do not analyze the sojourn time at all, and Horváth (2012) is only able to provide the moments of the number of jobs.Since all involved procedures are exact, only the scalability is investigated, that is, the analysis time as the function of the number of phases.For this purpose let us define the MMAP matrices asD0(K)=[•Kνγ•(K−1)ν⋱⋱⋱(K−1)γ•νKγ•],DL(K)=[0rL/K2rL/K⋱rL],and matrixDH(K)is defined similarly. The diagonal entries denoted by • are determined uniquely such that the row sums ofD0(K)+DL(K)+DH(K)are zeroes.The service times are characterized by order-2 PH distributions with parametersσH=[0.166670.83333],σL=[0.588240.41176],SH=[−0.666670.666670−4],SL=[−3.29413.29410−5.6],having service ratesμL=2.8andμH=2. The utilization depends on K, it varies between 0.6 and 0.75.Fig. 6depicts the analysis time required to obtain the first 10 moments of the number of low priority jobs in the system in the preemptive case as the function of K. (This is the only performance measure that is supported by all the procedures.) It is clearly visible that the presented method is at least an order of magnitude faster than the prior ones, and is able to solve systems with a large number of phases. No numerical problems were encountered even with the largest model. Additionally, as opposed to Horváth et al. (2009) and Horváth (2012), the presented procedure can provide sojourn time related performance measures, and is able to handle the case of non-preemptive service as well.Another simple numerical example can be found in the online supplementary material.

@&#CONCLUSIONS@&#
