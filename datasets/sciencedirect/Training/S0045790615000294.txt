@&#MAIN-TITLE@&#
A metamodel and taxonomy to facilitate context-aware service adaptation

@&#HIGHLIGHTS@&#
A context metamodel to classify different types of contexts has been provided.MoDAS was improved through an XML document that facilitates context code-generation.MoDAS provides model-driven trustworthy and well-structured code.The aspect-oriented implementation facilitates system evolution and maintenance.

@&#KEYPHRASES@&#
Metamodel,Context-awareness,Web services,Model-driven development,

@&#ABSTRACT@&#
Increasingly, companies are adopting service-oriented architectures to respond to rapid changes in the market. Even though there are excellent tools and frameworks for service-oriented architecture adoption and service development, the latest adaptation to context has not been properly dealt with yet. Current approaches are mostly focused on solving context-aware issues for web applications only, focusing mainly on client-side adaptation, and there is a clear lack of context taxonomies which facilitate context-aware applications. In our previous work we proposed Model-Driven Adaptable Services (MoDAS): a methodology and tool for the development of context-aware services. In this paper, we propose two key improvements on MoDAS: firstly, leveraging the proposal’s abstraction level, facilitating the use of a larger collection of contexts through the definition of an extensible context taxonomy by means of a metamodel; secondly, providing additional opportunities for code generation.

@&#INTRODUCTION@&#
Web services provide us with loosely coupled, platform-independent communication among distributed systems. This is thanks to their use of standard protocols for interface description (Web Service Description Language, WSDL) and message exchange (Simple Object Access Protocol, SOAP), among others. In this regard, web services have succeeded in the software community, providing software units that are reusable in heterogeneous software systems, and therefore easier maintenance and evolution of the above mentioned systems. In this scope, modern enterprises are increasingly adopting Service-Oriented Architecture (SOA) to respond to rapid changes in the market. Even though there are excellent tools and frameworks for SOA adoption and service development, the latest adaptation to context has not been properly dealt with so far, as explained in the following paragraphs. In this field, context can be defined as any information that can be used to characterize the situation of an entity [1,2]. According to Dey’s definition “A system is context-aware if it uses context to provide relevant information and/or services to the user, where relevancy depends on the user’s task” [1,2], where they also explain that many researchers define context-aware applications as “applications that dynamically change or adapt their behaviour based on the context of the application and the user”. To simplify, we define context-awareness in one sentence: the ability of a system to dynamically adapt its response depending on the context. In this regard, context-aware computing has hugely increased in popularity and is in great demand, especially by mobile users. The large number of devices and their continuous use clearly illustrate the importance of access, not only to desktop services but also to mobile ones. It is important to mention that, even though context-awareness seems to be strongly associated with mobile applications, many users are starting to demand desktop context-aware applications. In addition, some users have the same applications installed on their mobile phone and on their computer (linked through their private account), and they may use the application on their desktop computer more comfortably, when they have the chance. Thus, both markets—desktop and mobile applications—are relevant when talking about context-awareness.In any case, for mobile and desktop users, this is an emerging field for software development in which many members of the industry and scientific community are starting to provide software pieces and proposals. However, we are going to highlight three relevant issues with the existing proposals in SOA; first and second were already dealt with in our previous proposals, as will be later explained; in this paper, we will particularly focus on the third one. Firstly, these approaches focus mostly on solving context-aware issues for rich-client web applications only, such as [3], leaving a gap, as previously mentioned, for web service adaptation to context. Secondly, most solutions focus on adaptation on the client-side [4]. This means further computation and resources are used, and larger bandwidths are required, which could be a hindrance for some mobile users. It might be the case that the mobile device does not have enough resources for context-adaptation or that we are simply slowing down the process by doing it on the client, rather than the server side, where resources are expected to be much higher in any case. Thirdly, there is a clear lack of context taxonomies or classifications which might help to deal with context definition in order to facilitate their subsequent system adaptation [5]. Regarding the first issue, web services can be invoked from any type of application, not only web-based ones, and are popular for their use rom both desktop and mobile applications. This is why we have provided a solution centred not only around web applications but also on web service-based applications in general. Concerning the second issue, in our previous work we focused on making the adaptation on the service side, freeing the client from this computation load, sometimes significantly reducing the bandwidth consumed and, last but not least, improving user experience and satisfaction with the services used. Finally, with regards to the third issue, the main aim of this paper will be to solve the third mentioned issue: facilitating context classification for subsequent adaptation and including it in MoDAS methodology.Ntanos et al. highlight the still pending challenge of developing a taxonomy for the representation of context types in the scope of context-aware computing [6]. As previously mentioned, in this paper we focus on providing this taxonomy through metamodelling techniques and integrating their definition and implementation into our already developed methodology and tool for model-driven development of context-aware web services. In the past, we used model-driven development and aspect-oriented techniques in order to adapt web service response to mobile devices [7], and for additional context types [8]. Not only did we provide a methodology for developing context-aware services, but also a tool which facilitates the methodology application in conjunction with other widely used existing tools for UML (Unified Modelling Language)-based software modelling and Java-based web service development.iThe plugin and help documents are available for public download at https://neptuno.uca.es/redmine/attachments/download/318/MoDAS.zip and https://neptuno.uca.es/redmine/attachments/download/323/MoDAS_guides.zip, respectively.iCurrently, MoDAS (Model-Driven Adaptable Services) methodology [8] has been extended in this paper with two main purposes; the first purpose is to provide a taxonomy for contexts and define a metamodel in order to facilitate context-modelling, according to this taxonomy; secondly, to leverage the proposal abstraction level, enabling the user to utilize a larger collection of contexts in their applications. As a result, we have also improved code generation for context adaptation, providing different opportunities for code generation.In order to assess the proposal, two different methods have been used, namely observational and descriptive evaluation, according to Hevner’s seminal work on information systems research [9]. The observational evaluation has been developed through the implementation and observation of the case study; the descriptive evaluation through the scenario implemented in the case study, and the comparison of the proposal with related work. In our previous evaluation of MoDAS we followed an analytical evaluation of the generated code, the code-generation process and performance of the aspect-oriented implementation. The results can be found at [8] and it would be redundant to repeat the experiments in this paper.The remainder of the paper is organized as follows: Section 2 gives background information on the technologies approached in this paper, as well as on MoDAS first version; Section 3 provides related work and state-of-the-art research on the scope of the presented approach; Section 4 explains how MoDAS methodology has been improved; Section 5 explains the proposed context metamodel; Section 6 explains further details regarding the metamodel adoption in the methodology; Section 7 illustrates the proposal with a case study; discussion is included in Section 8, and conclusions are presented in Section 9.

@&#CONCLUSIONS@&#
In this paper, we have presented a key improvement for MoDAS methodology for Model-Driven Adaptable Services. MoDAS allows us to define our context-aware services from initial system models and, through a set of automated transformations, easily obtain skeleton code for services and most code for their context-adaptation.We have defined and provided a context metamodel, which allows us to classify different types of context, according to their requirements for code implementation. Based on the metamodel, we have improved our methodology to allow the developer to configure additional information about context definition at a higher level of abstraction. Such improvements facilitate context code generation, so that a larger number of context definitions can be used in the target systems. The mechanism to customize context definitions has also been improved, facilitating further opportunities for code generation and flexibility.The model-driven approach largely facilitates software development tasks, as well as enabling the generation of trustworthy and well-structured code. In addition, the aspect-oriented implementation of context-aware source code decouples the main system implementation from context-related issues, thus simplifying system evolution and maintenance by easily plugging in new contexts as required by the system.Future works include to improve MoDAS by adding dynamic aspects at runtime. We also plan to extend MoDAS with services that can be dynamically invoked depending on context events.