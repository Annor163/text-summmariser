@&#MAIN-TITLE@&#
Position tracking of a 3-PSP parallel robot using dynamic growing interval type-2 fuzzy neural control

@&#HIGHLIGHTS@&#
A novel dynamic growing mechanism is proposed in the structure learning phase of the interval type-2 fuzzy neural controller.The proposed controller combines the merits of type-2 fuzzy systems in handling high levels of uncertainty and dynamic growing mechanism to reduce the computational burden.The proposed controller is applied to the 3-PSP parallel robot.The simulation and experimental results prove the superiority of the proposed controller namely in lower number of rules and higher precision.

@&#KEYPHRASES@&#
Dynamic growing,Fuzzy logic control,Fuzzy neural networks,Type-2 fuzzy sets,Parallel robot control,

@&#ABSTRACT@&#
Parallel robots have complicated structures as well as complex dynamic and kinematic equations, rendering model-based control approaches as ineffective due to their high computational cost and low accuracy. Here, we propose a model-free dynamic-growing control architecture for parallel robots that combines the merits of self-organizing systems with those of interval type-2 fuzzy neural systems. The proposed approach is then applied experimentally to position control of a 3-PSP (Prismatic–Spherical–Prismatic) parallel robot. The proposed rule-base construction is different from most conventional self-organizing approaches by omitting the node pruning process while adding nodes more conservatively. This helps preserve valuable historical rules for when they are needed. The use of interval type-2 fuzzy logic structure also better enables coping with uncertainties in parameters, dynamics of the robot model and uncertainties in rule space. Finally, the adaptation structure allows learning and further adapts the rule base to changing environment. Multiple simulation and experimental studies confirm that the proposed approach leads to fewer rules, lower computational cost and higher accuracy when compared with two competing type-1 and type-2 fuzzy neural controllers.

@&#INTRODUCTION@&#
Robotic manipulators have nowadays become an indispensable part of many industrial processes such as in manufacturing, military, and medicine [1–3]. Traditional robot manipulators have serial structures. In this type of robots, joints are attached to each other in a sequential order and do not have any closed loop kinematics in their structure. This leads to simpler kinematics and dynamics but also an increase in manipulator's weight with lower precision, lower repeatability, as well as lower rigidity and higher vibration levels [4]. In recent years, parallel robots have become popular due to their superiority to serial robots in terms of higher accuracy, rigidity, repeatability, speed as well as lower inertia and vibrations. However, parallel robots have a more complex structure, dynamics and kinematics due to their kinematic chain with passive as well as active joints. Hence, their analysis and controller design is more challenging [5].In recent years, various model-based and model-free controllers have been designed for parallel robots [6–10]. Model-based mechanisms are often criticized for being computationally intensive while also making unrealistic simplifications. In [6], a more realistic model-based controller is proposed for a 2 DOF parallel robot that included the mechatronic dynamic model of the robot including the servomechanism. However, several simplifying assumptions are still made such as ideal rotation gates, no energy dissipation by friction and negligible inertial moments of distal and passive input links. In [9], a model-based control architecture based on type-2 fuzzy logic is introduced to deal with the underlying uncertainty in structure and parameters of 3-PSP parallel robot. However, it also requires dynamical model of the robot during its computationally intensive training.In contrast, model-free controllers [11] aim to avoid the computationally expensive and unrealistic assumptions that often occur in model-based approaches. This is particularly applicable for industrial real-time systems that operate in unstructured environments and are hampered by uncertainties/noise in sensory measurements and environment as well as nonlinearities in actuators. Fuzzy neural structures are among the most popular model-free approaches and have been vastly used in different fields of engineering such as control, identification, and prediction [12–15]. These controllers benefit from the merits of neural networks in learning the plant nonlinear dynamics and fuzzy systems in handling uncertainties [16]. However, learning in such fuzzy neural networks (FNNs) is often restricted to parameter adaptation.In order to find an improved structure for the network, self-organizing FNNs (SOFNNs) were introduced [17,18]. Learning in SOFNNs consists of two phases: structure learning and parameter learning. Structure learning itself is divided into two segments: node adding and node pruning. In node adding, a new rule is generated, whereas in node pruning the obsolete rules are removed. Then, in parameter learning phase, all rules including the newly generated ones are tuned.But making structural changes, and in particular node pruning, can lead to loss of valuable expertise. It can also lead to abrupt changes in the network's output, which can be highly undesirable for real-time control systems. Different techniques are recently proposed that give up node pruning in favor of generating rules more conservatively. These techniques are applied in various domains such as modeling brain-eye signals [19], pathology diagnosis of the vertebral column by fuzzy classifiers for [20], and cellular manufacturing systems [21]. In contrast to the above, the dynamic growing fuzzy neural controller (DGFNC), as promoted in this paper, focuses on the appropriate heuristics for the particulars of real time control[22]. The DGFNC is a new self-organizing fuzzy controller which was first introduced by the authors in 2012 [22]. However, the work in [19] is based on type-1 fuzzy inference engine and lacks a mechanism to manage high uncertainties in the process control's knowledge. Hence, the number of rules can increase in such processes if operating under sufficiently high uncertainty levels [23].Tye-2 fuzzy systems are introduced by Zadeh [24], aiming “to model and minimize the effect of high uncertainties.” In contrast to type-1 fuzzy logic in which the membership grades are crisp numbers, the membership grades in type-2 fuzzy systems are no longer crisp numbers but rather they are themselves type-1 fuzzy values. This property enables type-2 fuzzy systems to cope with higher levels of uncertainty. Hence, in recent years, there is a great attention to the application of type-2 fuzzy systems in different industrial processes [25,26]. Due to high levels of uncertainty in the structure and parameters of the parallel robots, one dominant industrial application of type-2 fuzzy systems is to control parallel manipulators.From the above, we can conclude that there could be a synergism in combining self-organizing approach to control design with type-2 fuzzy handling of uncertain systems. The proposed dynamic growing interval type-2 fuzzy neural controller in this paper aims to benefit from this synergism to control a special 3-PSP parallel robot. This controller is the extension of Type-1 DGFNC which was proposed by the authors in [27]. It should be mentioned that an early stage of this work has been reported in [28]. The proposed controller benefits from both the advantages of self-organizing and type-2 fuzzy systems. The structure and advantages of the proposed controller are fully discussed in Section 4.The rest of the paper is organized as follows. Section 2 introduces the structure of 3-PSP parallel robot. Section 3 discusses the uncertainties and complexities in 3-PSP parallel robot. Section 4 introduces the structure of the proposed DGIT2FNC. Learning in this structure is divided to two phases: Structure Learning and Parameter Learning. In structure learning phase, dynamic growing mechanism is used to generate rules more precisely; while in parameter learning phase, gradient-descent algorithm is used to adjust parameters of generated rules. Then, in Section 5 the proposed controller is applied to 3-PSP parallel robot and the advantages of the proposed controller are verified by simulation results. In Section 6, the experimental results of applying the proposed controller are investigated and compared with simulation results. Finally, conclusions are drawn in Section 7.The 3-PSP robot is a 3 degree of freedom parallel robot. Fig. 1depicts the structure of 3-PSP manipulator. As is shown, it is made up of two major parts; a moving platform (star shaped) and a fixed base, which are connected to each other by 3 Prismatic–Spherical–Prismatic (PSP) legs. The structure of this robot is designed so that it is completely symmetrical. In the moving platform, there are 3 PSP legs which are connected to each other so that a star shaped structure with 120̊ angle between each two legs is achieved. In each leg, there is an active prismatic (P) joint and a passive spherical (S) joint attached to a passive prismatic (P) joint. The first prismatic joint is actuated in each leg by connecting a motor to ball screw. Since the manipulator is not to rotate about z-axis, the prismatic actuators are welded to the fixed base. Fixed base is designed in the form of equilateral triangle that creates a symmetrical shape for the robot and makes the equations symmetrical and simple as much as possible. For defining the position and the orientation of the frame, it is needed to extend or descend each actuated prismatic joint. {T} is attached to the center of the star shaped platform by means of a fixed coordination frame and {B} is attached to the fixed base.The three degrees of freedom of the manipulator are produced by: Changing z-height of point P (end-effector) and also changing the orientation of the moving star about x and y axes of frame {B} [28].Now consider dynamic equation of the robot as below:(1)τ=M(Θ)Θ¨+V(Θ,(Θ¨))+G(Θ)θwhere Θ is vector of actual motor angles, τ is vector of actuators’ torque, M(Θ) is the mass matrix,V(Θ,Θ˙)is vector of centrifugal and Coriolis terms and G(Θ) is vector of gravity [29]. The full calculations to obtain M, V and G for the 3-PSP parallel robot are discussed in [30,31].The aim is to design a controller to tune the torque τ so that the end-effector of robot moves toward the desired trajectory with highest possible accuracy. Fig. 2is the control block diagram of the 3-PSP parallel robot. As is shown, the error is fed to the controller. This error is calculated as below:(2)E=Θdesired−Θactualwhere Θdesiredand Θactualare desired and actual motor angles.The output of the controller is the appropriate value for torque τ which will be fed to the manipulator block. The manipulator block contains direct dynamic equations of 3-PSP parallel robot. The output of this block is vector of linear coordinates [q1q2q3] related to the ball screws. The relationship between linear coordinates and the actual motor angles is as below:(3)θi=100πqi,i=1,2,3In this paper, dynamic growing interval type-2 fuzzy neural controller is proposed to control the 3-PSP robot. The proposed controller is able to deal with uncertainties and complexities of 3-PSP parallel robot more efficiently than other controllers. Some of the uncertainties and complexities associated with 3-PSP parallel robot are discussed in the following.3-PSP is an industrial powerful robot with several considerable benefits such as high accuracy, ability of working in high speed, low inertia and low vibration. However, there are some complexities and uncertainties which make us to use intelligent and model-free controllers instead of conventional model-based ones. Some of these complexities and uncertainties are listed below:1)The structure, kinematics and dynamics of 3-PSP parallel robot are complicated. Therefore, designing a model-based controller is very difficult and the designed controller is not able to control the manipulator with high accuracy [29].3-PSP is an industrial robot. Due to uncertainties like nonlinear characteristics of actuators, uncertainties in environmental conditions, electrical devices and sensor measurements which are inevitable in industrial systems, it is often hard to design an accurate model-based controller.In structure of 3-PSP parallel robot, it is assumed that ball screws are exactly parallel to each other and there is no vibration between the robot joints. However, practically the ball screws are not exactly parallel.Due to the fact that modeling the friction is very hard, the friction has been ignored in dynamic and kinematic equations of robot. However, in real condition, this friction causes vibrations during the joint movements. This leads to making all the model-based controllers impractical except those with high robustness.It is necessary to design an efficient and fast controller for the robot in order to reject high levels of disturbances which are exerted to the robot. Most of the efficient model-based controllers fail to reject disturbances fast.In 3-PSP parallel robot, the control time of each loop should be adjusted to 1ms and it must not exceed this pre-specified time. The dominant part of this time is devoted to studying the sensors and initialization of drives. Therefore, most of the efficient controllers such as torque controller – which has a larger control time –fail to appropriately control the 3-PSP manipulator.Generally speaking, due to small control time, the environmental and structural uncertainties and complex dynamics and kinematics in 3-PSP parallel robot, most of the model-based or behavioral-based controllers become impractical. Consequently, a robust adaptive controller with optimal computational cost is needed to control such a complex manipulator. In this case, model-free controllers such as fuzzy neural ones seem to be a good choice for controlling 3-PSP manipulator. The proposed DGIT2FNC is model-free and benefits from the advantages of type-2 fuzzy and self-organizing systems. In the following, the structure and benefits of the proposed controller are fully discussed.In this section, the proposed controller is investigated. This controller combines the merits of self-organizing and type-2 fuzzy systems. Type-2 fuzzy systems are capable of coping with high levels of uncertainty which are inevitable in industrial real-time systems. In type-2 fuzzy systems, the uncertainty not only exists in the information or data, but also in defining of the rules. To model the uncertainties in rules, type-2 fuzzy sets are used. Type-2 fuzzy sets are described either with uncertain mean and fixed standard deviation (STD) or with uncertain STD and fixed mean. Consequently, type-2 fuzzy systems are capable of coping with the uncertainties in rule space, uncertainties of defining the optimal rules and uncertainties generated by the lack of pre-given parameters knowledge in self-organizing structure [27]. As a result, the precision and capability of approximating and modeling of the system increases in type-2 fuzzy systems in comparison to their type-1 counterparts.Naturally, this leads to reduction in number of generated rules. However, type-2 fuzzy systems suffer from high computational cost. To decrease this computational cost, interval type-2 fuzzy logic is used in the proposed controller.Besides, the proposed controller benefits from a novel dynamic growing mechanism which can notably reduce the computational cost. This efficient mechanism is used in structure learning phase of the DGIT2FNC. In the following, the structure and the learning process of the proposed DGIT2FNC are fully discussed.The structure of the DGIT2FNC is shown in Fig. 4. In this six-layer structure, the antecedent part of each rule has interval type-2 membership functions with uncertain mean and fixed standard deviation (STD) as shown in Fig. 3. The consequent part is a linear combination of the inputs and is in the form of Takagi–Sugeno–Kang (TSK). The ith rule to the network is as follows:(3)Rulei:IFx1isA˜1iand…andxnisA˜ni,THENyiis∑j=1nwijxj+bi,where n is number of the inputs to the network and m is number of rules.The layers of DGIT2FNC are introduced in detail as below.(1) Layer1-Input Layer: Layer1 gets the incoming input vector and passes it directly to the next layer.(2) Layer2-Fuzzification Layer: In this layer, each input is fuzzified by a type-2 membership function. Hence, the output of each node of this layer is expressed as(4)μA˜ij(xj)=[μ_A˜ij(xj),μ¯A˜ij(xj)]where i denotes number of rule and j denotes number of input to the DGIT2FNC.(3) Layer3-Rule Layer: In this layer, minimum t-norm is used to calculate minimum firing strength of the rules.(5)f_i=min1≤j≤nμ_A˜ij(xj)(6)f¯i=min1≤j≤nμ¯A˜ij(xj)(4) Layer4—Consequent Layer: In layer 4, the outputs yiof the linear functions in the consequent part of the rules are calculated.(7)yi=∑j=1nwijxj+bi(5 and 6) Layer5 and 6—Output Processing Layers: These layers perform type reduction and defuzzification. For avoiding high computational cost, instead of iterative Karnik–Mendel algorithm, the method which is introduced in [36] is used to calculate the output of the network.(8)yO=p∑i=1mf_iyi∑i=1mf_i+q∑i=1mf¯iyi∑i=1mf¯iwhere yOis the crisp output. P and q are design factors and are applied to adjust the proportion of the lower and upper firing strengths in the output. Initially, they are set as 0.5 in the new rule. Then, in parameter learning phase they will be adjusted to their proper values.The learning process in DGIT2FNC is made up of two parts: structure learning and parameter learning. Initially there are no rules in the DGIT2FNC. The rules are generated in structure learning phase and for a better precision, initial parameters of the new rule are adjusted in parameter learning phase which happens concurrently with structure learning. In the following, the self-organizing process in DGIT2FNC is fully discussed. In this process, fuzzy clustering based on firing strength criteria is used for generating new rules and in parameter learning phase, gradient decent algorithm is used to adjust the initial parameters of the newly generated rule.Generally, structure learning is consisted of two parts: node adding and node pruning [25]. In node adding phase, if the existed rules can’t cover the input space appropriately, a new rule will be generated. In node pruning phase, when the error is reduced, the obsolete rules will be pruned. Although node pruning mechanism balances the quantity of rule nodes, it may make the learning mechanism too time-consuming. The reason is that in self organizing procedure, each node should be trained so that the error reduces gradually. After error reduction, these rules will rarely fire and will nearly become in vain. In this case, the rule pruning mechanism will prune these rules. After pruning, with a little disturbance, a new rule must be generated and trained again. To address this problem, a dynamic growing mechanism is proposed. The proposed mechanism, gives up the pruning algorithm and instead, it does the adding of rules more conservatively.This mechanism benefits from fuzzy clustering for generating new rules based on rule firing strength criteria [12,37]. In fuzzy clustering, each cluster represents a fuzzy rule and the degree to which each input data belongs to a cluster, represents the firing strength.In type-2 fuzzy systems, firing strength is an interval in the form of [f_i,f¯i] for ith rule. Thus, for performing firing strength criteria, the center of each interval should be computed as [37]:(9)fci=12(f_i+f¯i)For each new incoming input vectorx→=x1,…,xn, the rule number for which the input data has the most degree of membership should be computed as [37]:(10)I=argmax1≤i≤m(t)fci(x⇀)where m(t) is the number of existing rules at time t.Subsequently, the firing strength of Ith rule,fcI(x⇀), for the current input data should be calculated.In dynamic growing mechanism, in order to generate rules more conservatively, the condition for generating a new rule is introduced as follows [27,28].Node adding in DGIT2FNC is designed as a function of Rcurr(current number of rules), Err(Error) and Γmax(maximum output of antecedent parts of rules).(11)R=f(Rcurr,Err,Γmax)A new rule will be generated only if Cadd>Cth; where Cthis a real constant in the interval [0,1] and is computed as:(12)Cadd=CR*Ce*CΓCRdepends on the number of current rules and is computed as:(13)CR=1−RRmaxThis means that as the number of rules increases, generating new rules become less likely. If R reaches Rmax, CRbecomes zero, and no more rules can be added.Cedepends on the error. As the error grows, number of rules must increase.(14)Ce=ErrEthFinally, CΓdepends on the maximum output of the antecedent part of the rules (Γmax). Here, ΓmaxisfcI(x⇀). If Γmaxis smaller than a threshold, current rules do not cover all of the input space thus new rules are needed.(15)CΓ=1ifΓmax<Γth0ifΓmax≥Γthwhere Rmax, Ethand Γthare pre-given constants.After a new rule is produced, generating a new fuzzy set should be decided. This is done by calculating the mean value of jth membership interval as(16)μA˜ijc=12(μ_A˜ij(xj)+μ¯A˜ij(xj))Then, for each newly generated rule, compute(17)Ij=max1≤i≤kj(t)μA˜ijcwhere kj(t) is the number of fuzzy sets in input variable j. Consequently, ifμA˜ijI>ρ, where ρ∈[0,1] is a pre-given threshold, thenA˜iIjis used as the antecedent part of new rule in input variable j. Otherwise, a new fuzzy set is generated andkj(t+1)=kj(t)+1.The initial uncertain mean mij, standard deviation σijand consequent parameter wijfor the ith rule and jth input are defined as:(18)mijε[xj−0.1,xj+0.1](19)σij=0.8(20)wij=0.45Then, these initial values are adjusted in parameter learning phase which happens concurrently with structure learning. Fig. 5shows the flowchart of the proposed structure learning.In parameter learning phase, gradient decent method is used for adjusting initial parameters of antecedent and consequent parts of the new generated rule [26,32,33,38].The aim is to minimize the cost function(21)E=12yid−yOi2whereyidis the ith desired output and yOiis the ith actual output.The parameters to be adjusted are the lower and upper means m1ijand m2ij, standard deviation σij, consequent parameters wijand bijand design parameters p and q. These parameters are updated by the gradient decent algorithm as introduced in [34].As mentioned above, p and q are initially set to 0.5 in structure learning phase. The updating formulas for p and q are(22)p(t+1)=p(t)−γ∂E∂p(23)q(t+1)=q(t)−γ∂E∂qwhere(24)∂E∂p=(yO−yd)∑i=1mf_iyi∑i=1mf_(25)∂E∂q=(yO−yd)∑i=1mf¯iyi∑i=1mf¯iIn Eqs. (22) and (23)γ is the learning rate. Traditionally, a fixed proper learning rate is defined by trial-and-error. The convergence rate of the gradient descent algorithm depends on the value of learning rate. As γ increases, oscillation in the proximity of the solution increases. On the other hand, small values of learning rate lead to slower convergence speed of the gradient descent algorithm [35]. The convergence of the system can be guaranteed by defining a proper value for γ. The full convergence analysis of the system is presented in the Appendix using the Lyapunov stability theorem.The updating formulas for consequent parameters wijand bijare(26)wij(t+1)=wij(t)−γ∂E∂wij(27)bij(t+1)=bij(t)−γ∂E∂bijwhere(28)∂E∂wij=∂E∂yO∂yO∂yi∂yi∂wij(29)∂E∂bi=∂E∂yO∂yO∂yi∂yi∂biThe updating formulas for antecedent parameters m1ij, m2ijand σijare(30)m1ij(t+1)=m1ij(t)−γ∂E∂m1ij(31)m2ij(t+1)=m2ij(t)−γ∂E∂m2ij(32)σij(t+1)=σijt)−γ∂E∂σijwhere(33)∂E∂m1ij=∑i=1m∂E∂yo∂yo∂f_i∂f_i∂μ_i∂μ_ij∂m1ij+∂yo∂f¯i∂f¯i∂μ¯i∂μ¯ij∂m1ij(34)∂E∂m2ij=∑i=1m∂E∂yo∂yo∂f_i∂f_i∂μ_ij∂μ_ij∂m2ij+∂yo∂f¯i∂f¯i∂μ¯ij∂μ¯ij∂m2ij(35)∂E∂σij=∑i=1m∂E∂yo∂yo∂f_i∂f_i∂μ_i∂μ_ij∂σij+∂yo∂f¯i∂f¯i∂μ¯i∂μ¯ij∂σijIn this section, the proposed controller is applied to the 3-PSP parallel robot to track a specified trajectory. For this purpose, the dynamic model of 3-PSP parallel robot was simulated and control was done in MATLAB SIMULINK environment on a computer powered by Intel core2duo 2.26 GHZ CPU. Table 1shows the performance specification of 3-PSP parallel robot.In this study, two different trajectories are investigated: Helix and Saddle. The aim is that the end effector moves so that the actual trajectory tracks the desired trajectory with minimum error. For this purpose, the DGIT2FNC is applied to the control loop of 3-PSP parallel robot to control the torque value which is fed to the robot as its input. Fig. 6depicts the closed loop block diagram of DGIT2FNC.Initially, there are no rules in the DGIT2FNC. Besides, the pre-given parameters are initialized as Eth=0.01, Cth=0.1, w=0.45, σ=0.8, h=0.7m, Rmax=20, tmax=0.9ms, Γth=0.5, γ=0.1. Ethis the threshold for maximum error, Cthis the threshold for generating a new rule, Rmaxis maximum number of rules, tmaxis maximum allowed duration of each loop, Γthis the threshold for determining Γmax, γ is the learning rate, w is defined as the consequent weights of all TSK rules, σ is the standard deviation of the antecedent part in each rule and h is the length of tool in the manipulator.At first, assume that the end-effector (tool) of the manipulator is to move toward a Helix trajectory as the desired trajectory given to the robot. Simulation is performed for 1s and the results for trajectory and joint angle tracking are obtained. To test the efficiency of the proposed controller, the results for the DGIT2FNC are compared with a TSK interval type-2 fuzzy neural controller (TSK IT2FNC) [36] and dynamic growing type-1 fuzzy neural controller (DGT1FNC) [27,28].It should be noted that all of the simulation results for these three controllers are obtained by using the same pre-information such as learning rate, the execution time and node adding threshold values. Fig. 7a depicts the desired and actual tool trajectories for three controllers. Besides, to compare the efficiency of the controllers, the errors between the desired and actual motor angles of the manipulator for three controllers are compared in Fig. 7b.Fig. 8a shows the actual and desired motor angles for three motors of parallel robot. The motor angle is calculated as (3).For better comparison, an area between 198 and 260ms is zoomed in Fig. 8b. As it can be seen, the proposed controller has tracked the desired trajectory with the best precision. Moreover, for better comparison of the performance of three controllers see Table 2. As can be seen, the RMSE value of three motor angles and number of rules for the proposed controller are considerably less than the other two controllers. It can be inferred that by applying the dynamic growing mechanism in the learning process of the proposed controller, the rules are generated more conservatively; and the generated rules are more accurate and can more precisely control the robot end-effector to track the desired Helix trajectory.As another example, the proposed controller is applied to follow a saddle trajectory. Simulation is done for 8500ms using DGT1FNC, TSKIT2FNC and the proposed DGIT2FNC. The initial values for the parameters are set as the initial values used for the Helix trajectory. Figs. 9 and 10show the simulation results. Table 3depicts a better comparison of these three controllers. It can be seen that the proposed controller has less number of rules and better precision than the other two controllers. Besides, as is shown in Tables 2 and 3, according to the desired trajectory, the number of rules in each motor controller increases independently. This is because of the fact that three independent controllers are used to control three branches of the robot. The number of needed rules to control each motor depends on the specified desired trajectory. Hence, for saddle trajectory, the number of needed rules in motor1 and 2 are limited to only one rule. From all the simulation results, it can be inferred that the TSKIT2FNC and DGIT2FNC can handle uncertainties with better precision and need less number of rules than their type-1 counterpart. However, the number of rules and MSE for the proposed DGIT2FNC are less than TSKIT2FNC. The reason is that in the proposed controller dynamic growing mechanism generates rules more conservatively. This has led to reduction in number of rules and better precision.In this part, the efficiency of the proposed controller is verified in the presence of white noise. For this purpose, the results of helix trajectory are investigated. As the first step, the white noise with SNR=30dB is applied to control block of the 3-PSP parallel robot as in Fig. 11. As it can be seen in this figure, in order to test the robustness of the proposed controller in the presence of noise, white noise is added to the output of the robot. Therefore, the output of robot is changed to(36)qˆ(k)=q(k)+n(k)where is n(k) a uniformly distributed random Gaussian white noise over [−1, +1].The simulation is done for once and the trajectory generation and motor angle errors are shown in Fig. 12a and b, respectively. Moreover, since white noise is random, the simulation is done five times and the MSE values for three motors and the average value of the MSEs are shown in Table 4. On average, the MSEs of three motors for the proposed DGIT2FNC are less than the MSEs for DGT1FNC and TSKIT2FNC. Therefore, the proposed controller can handle the noise more efficiently.For further comparison, the efficiency of these three controllers in the presence of different levels of measurement noise is summarized in Table 5. In this table, different levels of noise in the interval [30] are applied to the robot. Then, the control is done and the average MSE for each motor angle is calculated. It can be seen that the proposed DGIT2FNC has better performance in the presence of noise than its type-2 and type-1 counterparts. Besides, it can be seen that as noise level increases, the power of the proposed controller to handle high levels of uncertainty becomes more prominent. Therefore, the proposed controller has much better performance when considerable amount of noise is presented in the control process.

@&#CONCLUSIONS@&#
