@&#MAIN-TITLE@&#
Mathematical formulations and exact algorithm for the multitrip cumulative capacitated single-vehicle routing problem

@&#HIGHLIGHTS@&#
A hard single-vehicle routing problem raised by disaster logistics is studied.The problem is formulated by two mixed integer linear models.An exact method based on a resource-constrained shortest path formulation is developed.Dominance rules and lower and upper bounds are added to speed up the algorithm.The exact method outperforms a commercial ILP solver on small instances.Instances with up to 40 demand points can be solved to optimality.

@&#KEYPHRASES@&#
Multitrip cumulative capacitated Single-vehicle routing problem,Disaster logistics,Resource constrained shortest path problem,

@&#ABSTRACT@&#
This paper addresses the multitrip Cumulative Capacitated Single-Vehicle Routing Problem (mt-CCSVRP). In this problem inspired by disaster logistics, a single vehicle can perform successive trips to serve a set of affected sites and minimize an emergency criterion, the sum of arrival times. Two mixed integer linear programs, a flow-based model and a set partitioning model, are proposed for small instances with 20 sites. An exact algorithm for larger cases transforms the mt-CCSVRP into a resource-constrained shortest path problem where each node corresponds to one trip and the sites to visit become resources. The resulting problem can be solved via an adaptation of Bellman–Ford algorithm to a directed acyclic graph with resource constraints and a cumulative objective function. Seven dominance rules, two upper bounds and five lower bounds speed up the procedure. Computational results on instances derived from classical benchmark problems for the capacitated VRP indicate that the exact algorithm outperforms a commercial MIP solver on small instances and can solve cases with 40 sites to optimality.

@&#INTRODUCTION@&#
A trend in the last decade is to apply operations research to facilitate logistic operations in humanitarian disasters. Several models have been proposed to cope with mitigation, preparedness, response and recovery operations, see for instance the surveys of Altay and Green III (2006) and Galindo and Batta (2013). An important issue after a disaster is to determine the transportation routes for first aids, supplies, rescue personnel or equipment from supply points to a set of destination sites, geographically scattered over the disaster region. In this context, the arrival time of relief supplies at the affected communities clearly impacts the survival rate and the suffering of victims. Hence, the total length or duration of the routes used in vehicle routing for industrial logistics must be replaced by more pertinent service-based objective functions in humanitarian logistics (Campbell, Vandenbussche, & Hermann, 2008).The aim of this paper is to solve exactly, via a reformulation as a shortest path problem, a version of the Capacitated Vehicle Routing Problem (CVRP) inspired by the response phase of relief operations. A single vehicle with limited capacity and range is allowed to perform multiple trips and the classical objective function (total travel time or distance) becomes the sum of arrival times at affected sites. We call this problem the multitrip Cumulative Capacitated Single-Vehicle Routing Problem (mt-CCSVRP).The paper is structured as follows. Section 2 reviews related problems. In Section 3 the problem is formally defined and two mixed integer linear models are proposed. Section 4 describes the procedure to transform the mt-CCSVRP into a resource-constrained shortest path problem in an directed acyclic graph. An ad-hoc shortest path algorithm is developed in Section 5. Computational results are presented in Section 6 for the two models and the exact method. Concluding remarks close the paper in Section 7.After a disaster, the deliveries to affected sites must take the urgency of the situation into account. Campbell et al. (2008) suggest that using service-based objective functions may better reflect the different priorities and strategic goals found in delivering humanitarian aid. The minimization of the average arrival time is more pertinent to address the emergency of humanitarian logistic operations than classical objective functions, such as the minimization of the total distance traveled. We use in this paper an equivalent objective, the sum of arrival times.The sum of arrival times has been already used in some routing problems. For instance, the Minimum Latency Problem is a variation of the Traveling Salesman Problem (TSP), which consists in finding a tour starting at a depot and visiting each other node only once, in such a way that the total latency is minimized (Archer & Williamson, 2003; Blum, Chalasani, Coppersmith, Pulleyblank, Raghavan, & Sudan, 1994). The latency of a node is defined as the total distance or travel time to reach it. This problem is also known as the Delivery Man Problem (Fischetti, Laporte, & Martello, 1993) or the Traveling Repairman problem (TRP) (Jothi & Raghavachari, 2007; Tsitsiklis, 1992) because of its possible application to maintenance.The Multiple Traveling Repairman Problem or k-TRP is a generalization of the minimum latency problem where k tours must be determined (Jothi & Raghavachari, 2007). In the Time-Dependent TSP (TDTSP), the traversal cost of an arc depends on its position in the tour (Gouveia & Voss, 1995; Lucena, 1990; Picard & Queyranne, 1978). When the objective of the TDTSP is to minimize the sum of distances traveled from the depot to each node, the problem is known as the TSP with cumulative cost or Cumulative TSP (CTSP) (Bianco, Mingozzi, & Ricciardelli, 1993).The Cumulative Capacitated Vehicle Routing Problem (CCVRP), described by Ngueveu, Prins, and Calvo (2010), is a variant of the classical CVRP where the objective function becomes the sum of arrival times at demand nodes. The CCVRP can also be considered as the generalization of the minimum latency problem to several vehicles. These authors provide a mathematical model, several lower bounds and two memetic algorithms. Solutions are compared using classical CVRP instances from Christofides, Mingozzi, and Toth (1979), replacing the total length of the routes by the sum of arrival times, and on TRP instances from Salehipour, Sörensen, Goos, and Bräysy (2008).The results confirm that the optimal solutions can be quite different in the CCVRP and the classical CVRP, as already observed by Campbell et al. (2008). In Euclidean versions for instance, CVRP solutions with edge crossings are suboptimal, while the elimination of these crossings often brings no improvement for the cumulative objective. More recently, Ribeiro and Laporte (2012) presented an Adaptive Large Neighborhood Search (ALNS) for the CCVRP which is compared with the memetic algorithms from Ngueveu et al. (2010), while Ke and Feng (2013) proposed a two-phase metaheuristic which improves some best known solutions from Ngueveu et al. (2010) and Ribeiro and Laporte (2012). Lysgaard and Wøhlk (2014) developed a branch and cut and price algorithm, able to solve CCVRP instances up to 69 required sites.A comparison between the minimization of cost, maximal arrival time and average arrival time for the TSP and CVRP is given by Campbell et al. (2008). Their paper presents lower bounds, an insertion heuristic and a local search procedure. The minimization of maximal arrival time is also addressed by Applegate, Cook, Dash, and Rohe (2002) via a branch-and-cut algorithm, while Hemel, van Erk, and Jenniskens (1996) solve a practical problem aiming at minimizing the maximal tour length, using the average arrival time to break ties. Dell, Batta, and Karwan (1996) add a multi-period horizon and equity constraints.A common assumption is that each vehicle makes a single trip, which is not realistic in disaster logistics where helicopters, for instance, can perform multiple sorties. The multitrip extension of the classical CVRP is known as the multitrip Vehicle Routing Problem (mt-VRP) and was first studied by Fleischmann (1990). Rivera, Afsar, and Prins (2015) introduce the cumulative version, called multitrip Cumulative Capacitated Vehicle Routing Problem (mt-CCVRP). They develop a flow-based model, a Multi-Start Iterated Local Search (MS-ILS) and a dominance rule for the order of routes in a multitrip. The model and the MS-ILS are evaluated on the mt-CCVRP and its particular case, the CCVRP. Rivera, Afsar, and Prins (2014) present a Multi-Start Evolutionary Local Search (MS-ELS) for the mt-CCVRP, which alternates between giant tours covering all the nodes and mt-CCVRP solutions (using a splitting procedure) and calls a variable neighborhood descent for improvement. The metaheuristic is compared with the MS-ILS of Rivera et al. (2015).Few authors have investigated multitrip single-vehicle routing problems. Azi, Gendreau, and Potvin (2007) study a multi-trip single-vehicle routing problem with time windows (mt-SVRPTW) by enumerating all feasible trips. As it is not always possible to cover all customers, they maximize the number of visited customers and then minimize the total length. The problem is formulated as an Elementary Resource-Constrained Shortest Path Problem (ERCSPP) on an auxiliary graph and solved using a label correcting algorithm inspired by the one proposed by Feillet, Dejax, Gendreau, and Gueguen (2004).Angel-Bello, Martínez-Salazar, and Alvarez (2013) seem to be the only authors who studied the mt-CCSVRP. They propose two mixed integer linear models for a version with a maximum number of trips. Evaluated on randomly generated instances, the best model can consistently solve instances up to 25 customers but the number of trips in the solution is limited to 2 or 3.Our method is inspired by Azi et al. (2007) but the problems are quite different. Azi et al. consider time windows, their auxiliary graph contains circuits, and they try to visit a maximum number of sites while minimizing the total distance. In our case, there are no time windows, all sites must be visited, and the goal is to minimize the sum of arrival times at the sites. These features induce specific dominance rules and lower and upper bounds. In particular, we prove an important dominance rule which leads to an acyclic auxiliary graph.The mt-CCSVRP uses the sum of arrival times at sites as objective function, like in the cumulative CVRP, but involves a single vehicle which can perform more than one trip. This flexibility is necessary when the total demand exceeds the capacity of the vehicle and/or the range of the vehicle is limited. In the context of humanitarian logistics, the mt-CCSVRP models the distribution of relief supplies to a set of sites affected by a disaster, using for instance one helicopter which can do multiple sorties. After the disaster, the victims are waiting for rescue and multiple crews can be coordinated to use the vehicle full time. Nevertheless, the limited range of the vehicle imposes an upper bound on the flight time of each trip.The problem can be defined on an complete undirected graphG=(V,E). The node-setV={0,…,n}includes one depot-node 0 and a subsetV′=V∖{0}of n locations affected by a disaster, called sites because customers is here inappropriate. The set E is composed of edges (i, j) with travel times wijsatisfying the triangle inequality, also called flight times. A single vehicle of capacity Q and range Lmax(in terms of flight time) is based at the depot. Each site i ∈ V′ has a demand qiand a service time σi. It is assumed without loss of generality that∑i∈V′qi≥Qand qi≤ Q, ∀ i ∈ V′.The objective is to identify a sequence of trips(1,2,…,v),called multitrip, such that each site is visited exactly once and the sum of arrival times is minimized (in the last trip, the return to the depot is not counted). A trip k is a cycle, starting and ending at the depot, whose total load Wkfits vehicle capacity Q and total flight time Lkdoes not exceed the range Lmax. Each trip k has also a setup time (loading time) μkbefore leaving the depot, computed as the sum of service times over all sites served by the trip, weighted by a given coefficient β. The loading times and service times do not affect vehicle range but delay the arrivals at sites.In our version, the number of trips v is a decision variable. Contrary to the mt-CVRP, the cumulative objective is sensitive to the trip ordering: Theorem 2 in Section 4 defines the optimal ordering for a given set of trips. Fig. 1shows a small instance withn=5,Q=20,allqi=10,allσi=0,and a three-trip feasible solution. Dashed arcs correspond to transitions between two successive trips, called replenishment arcs. The arrival time is given for each site. The cost of this solution isZ=∑i∈V′ti=190.In the following, two mixed integer linear programs are developed. The first one is a flow-based model whose variables have no trip index. The second one is based on a set partitioning model where columns correspond to the possible routes and each site must be covered by exactly one route.The flow model derives from the one presented by Rivera, Afsar, and Prins (2013) for the mt-CCVRP, based on replenishment arcs (Boland, Clarke, & Nemhauser, 2000; Mak & Boland, 2000) and arc coefficients (Ngueveu et al., 2010). Replenishment arcs are used to replace the trips of a multitrip by a single trip: if a trip with last site i is followed by a trip with first site j, arcs (i, 0) and (0, j) can be replaced by one replenishment arc (i, j), see Fig. 1. The coefficient of an arc expresses the number of times its cost is counted in the objective function. Although we have here one vehicle only, the existing model must be modified to handle vehicle range, loading times and service times.Eq. (1) defines the cost (sum of arrival times at sites) Ckfor a tripk=(0,1,2,…,Nk,0)visiting Nksites and starting at time 0: σidenotes the service time at node i (σ0=0) whileμk=β∑i=1Nkσiis the loading time. This equation can be extended to be applied to multitrips.(1)Ck=Nk·μk+Nk·(σ0+w01)+(Nk−1)·(σ1+w12)+…+(σNk−1+wNk−1,Nk)=Nk·μk+∑i=0Nk−1(Nk−i)·(σi+wi,i+1)In the model, the coefficient Nkwhich multiplies μkin the first term of Eq. (1) is expressed by variables φij, while coefficients(Nk−i)are described by variables yij. Variables Fijdefine the flow on each arc (i, j), i.e., the load of the vehicle traversing this arc. The binary variables xijare equal to 1 if and only if arc (i, j) is traversed. Due to the special nature of replenishment arcs, similar but separate variablesxij′andyij′are used for these arcs. Finally, the variables tiare used to respect vehicle range: they represent the cumulated flight time to arrive at site i since the last departure from the depot (without loading and service times), not the arrival time.The resulting MILP is defined by Eqs. (2)–(33). The objective function (2) represents the sum of arrival times to affected sites, extending Eq. (1) to multitrips and using the variables defined above.(2)minZ=∑i∈V∑j∈V((σi+wij)·yij+β·σj·φij)+∑i∈V′∑j∈V′(σi+wi0+w0j)·yij′(3)∑j∈V′x0j=1(4)∑i∈V′(xij+xij′)+x0j=1,∀j∈V′(5)∑i∈V′(xji+xji′)≤1,∀j∈V′(6)∑j∈VFji−∑j∈V′Fij=qi,∀i∈V′(7)Fij≤Q·xij,∀i∈V′,j∈V′(8)F0j≤Q·(x0j+∑i∈V′xij′),∀j∈V′(9)∑j∈V′(yji+yji′−yij−yij′)+y0i=1,∀i∈V′(10)y0j=n·x0j,∀j∈V′(11)yij≤(n−1)·xij,∀i∈V′,j∈V′(12)yij′≤(n−1)·xij′,∀i∈V′,j∈V′(13)yij≥xij,∀i∈V,j∈V′(14)yij′≥xij′,∀i∈V′,j∈V′(15)yij≥2·xij−xj0,∀i∈V,j∈V′(16)yij′≥2·xij′−xj0,∀i∈V′,j∈V′(17)∑i∈V∑j∈V′xij+∑i∈V′∑j∈V′xij′=n,(18)∑i∈V∑j∈V′yij+∑i∈V′∑j∈V′yij′=n·(n+1)2,(19)φ0j=n·x0j,∀j∈V′(20)φij≥yij′,∀i∈V′,j∈V′(21)φij≥yij,∀i∈V′,j∈V′(22)φij≥∑u∈Vφui−n·(1−xij),∀i∈V′,j∈V′(23)φij≤n·(xij+xij′),∀i∈V′,j∈V′(24)tj≥w0j,∀j∈V′(25)tj≥ti+wij−Lmax·(1−xij),∀i∈V′,j∈V′(26)ti+wi0≤Lmax,∀i∈V′(27)xij∈{0,1},∀i∈V,j∈V′,i≠j(28)xij′∈{0,1},∀i∈V′,j∈V′,i≠j(29)yij≥0,∀i∈V,j∈V′,i≠j(30)yij′≥0,∀i∈V′,j∈V′,i≠j(31)Fij≥0,∀i∈V,j∈V′,i≠j(32)φij≥0,∀i∈V,j∈V′,i≠j(33)ti≥w0i,∀i∈V′Constraint (3) means that only one vehicle is used. Eqs. (4) and (5) indicate that exactly one arc is traversed to arrive at each site j and leave it. The last arc of the multitrip is ignored since it has no impact on the objective. Constraints (6)–(8) concern flow variables: Eq. (6) ensure that each demand is satisfied while Eqs. (7) and (8) guarantee that vehicle capacity is respected.Constraints (9)–(12) concern arc coefficients. Constraints (9) imply that the coefficients of successive arcs decrease along a trip. Eqs. (10)–(12) limit the maximum arc coefficient. Constraints (13)–(18) are simple valid inequalities which are useful to reduce running time when the model is solved by a commercial solver. The coefficients used for loading times, the variables φij, are constrained by Eqs. (19) –(23). The range constraint is implemented via Eqs. (24) –(26), using variables ti.Finally, constraints (27)–(33) define the seven groups of variables. The model has been tested on small instances and computational results are reported in Section 6.3.The mt-CCSVRP can also be solved as a set partitioning problem, based on a directed acyclic graph (DAG)G′=(K,H). K denotes the set of all feasible and non-dominated trips. It is built using a pre-computation procedure detailed in Section 4. For each trip k ∈ K, we know its cost Ck, its duration Dk, the number of visited sites Nkand binary indicatorsrki=1if site i is visited by the trip. The arc-set H contains arc (k, k′) if trip k can be followed by k′ in a multitrip. Theorem 3 in Section 4 proves that the cost of a multitrip is minimized if its trips are ordered in non-decreasing order of mean duration Dk/Nk. Hence, H can be restricted to the arcs (k, k′) such thatDk/Nk<Dk′/Nk′and G′ is acyclic. Our set partitioning formulation selects a subset of trips covering each site exactly once and defines their ordering using additional variables. The more efficient approach of Section 5 computes in G′ a least-cost path visiting each site exactly once.This model takes advantage of Eq. (34) to compute the cost of a multitrip, based on the cost, duration and number of sites of each trip. The sum of arrival times Zpfor a multitripp=(1,2,…,v)composed of v successive trips can be computed as:(34)Zp=C1+D1·(N2+⋯+Nv)+C2+D2·(N3+⋯+Nv)+⋯+Cv−1+Dv−1·Nv+Cv=∑k=1v(Ck+Dk·∑k′=k+1vNk′)Two types of binary variables are used. The variable χkis equal to 1 if trip k is selected in the solution. Variablesγkk′define the relative order of the trips in the multitrip:γkk′=1if trip k is performed before trip k′. The set partitioning formulation for the mt-CCSVRP is given by Eqs. (35)–(41). The objective function (35) which represents the sum of arrival times is derived from Eq. (34), by adding the decision variables.(35)minZ=∑k∈K(Ck·χk+∑k′|(k,k′)∈H(Dk·Nk′·γkk′))(36)∑k∈Krki·χk=1,∀i∈V′(37)γkk′≤χk,∀(k,k′)∈H(38)γkk′≤χk′,∀(k,k′)∈H(39)γkk′≥χk+χk′−1,∀(k,k′)∈H(40)χk∈{0,1},∀k∈K(41)γkk′∈{0,1},∀(k,k′)∈HConstraints (36) imply that each site is visited by exactly one trip. Constraints (37)–(39) control the order of the trips. Eq. (37) (resp. (38)) inhibits the ordering variableγkk′when trip k (resp. k′) is not used in the solution, i.e., whenχk=0(resp.χk′=0). Eqs. (39) impose an order between trips k and k′ when both belong to the solution.Note that arc (k, k′) exists in H if and only if the mean duration of trip k is lower than the mean duration of trip k′, thanks to Theorem 3 proved in the sequel. If (k, k′) and (k′, k′′) exist in H, by transitivity (k′′, k) cannot exist and we do not need to defineγk′′k. Therefore no cycle is possible in a solution.Finally, Eqs. (40) and (41) define the variables. In Section 6.3 this model is tested and compared with the flow model and the exact method of Section 5 on small instances.This section describes how to transform the mt-CCSVRP into a resource-constrained shortest path problem. Roughly speaking, we build a directed acyclic graph (DAG)G′=(K,H),called auxiliary network, where each node in K (called trip-node to distinguish them from the nodes of the real network G) represents one trip, H contains one arc (k, k′) if trip k can be followed by k′ in a multitrip, and the sites become consumable resources. The pre-computation of feasible trips looks very heavy but many trips can be discarded in practice, using two dominance rules stated in Theorems 1 and 2. The process is also sensitive to the vehicle range Lmax, as shown in the tests of Section 6.One arc links two trip-nodes k and k′ if they have no common site and if a crucial dominance property stated in Theorem 3 holds. It is this dominance rule which leads to an acyclic graph. A feasible solution is a path, called complete path, whose trip-nodes cover all sites.Each trip k is defined by a cost Ck, a duration Dk, a set of sites Sk,Nk=|Sk|,a total load Wk, a last site visited θkand a total flight time Lk. Recall that the latter differs from the trip duration Dkwhich includes service and setup times:Dk=Lk+∑i∈Sk(1+β)·σi.K is initialized with one direct trip per site. Then, each trip k is extended by adding one site i at the end, provided i is not already visited (i ∉ Sk) and capacity and range are satisfied (Wk+qi≤QandLk+wθk,i+wi,0−wθk,0≤Lmax). The number of trips with the same sites is strongly reduced using Theorem 1 and Theorem 2.Theorem 1Let k and k′ be two trips with sum of arrival times Ck andCk′,durations Dk andDk′,and visiting the same subset of sites (Sk=Sk′). Trip k dominates trip k′ ifCk≤Ck′andDk≤Dk′.Let p′ be the best complete path in G′ containing k′. Its cost (sum of arrival times at sites) can be computed as (recall Eq. (34)):Zp′=∑v=1|p′|(Cv+Dv·∑v′=v+1|p′|Nv′)Now, suppose that trip k′ is replaced by trip k in path p′, giving path p. The difference between ZpandZp′can be computed as:Zp′−Zp=Ck′−Ck+(Dk′−Dk)·∑v′=k′+1|p′|Nv′Since we assumed thatCk≤Ck′andDk≤Dk′,we can conclude thatZp′≥Zp,which means that trip k′ is dominated by trip k.□Let two trips k and k′ with the same sites (Sk=Sk′) and the same last site (θk=θk′). IfCk≤Ck′andDk≤Dk′,then any trip obtained by adding a sequencev of sites at the end of trip k dominates the trip obtained by adding the same sequence at the end of k′.Let u and u′ denote trips k and k′ without the depot at the end and ⊕ the concatenation operator. If a sequence of sitesv=(v1,v2,…,v|v|)is added to k and k′ after the last site θk, the sums of arrival times for the resulting trips (u⊕v⊕0) and (u′⊕v⊕0) are:Zu⊕v⊕0=Ck+∑i=1|v|(Dk−wθk,0+wθk,v1+∑j=1i−1(σvj−1+wvj−1,vj))=Ck+|v|·(Dk−wθk,0+wθk,v1)+Cvand:Zu′⊕v⊕0=Ck′+∑i=1|v|(Dk′−wθk′,0+wθk′,v1+∑j=1i−1(σvj−1+wvj−1,vj))=Ck′+|v|·(Dk′−wθk′,0+wθk′,v1)+CvwhereCv=∑i=1|v|(∑j=1i−1(σvj−1+wvj−1,vj))is the cost of sequence v.The difference betweenZu′⊕v⊕0and Zu⊕v⊕0 has the following expression:Zu′⊕v⊕0−Zu⊕v⊕0=Ck′−Ck+|v|·(Dk′−Dk)SinceCk≤Ck′andDk≤Dk′,we can conclude thatZu′⊕v⊕0≥Zu⊕v⊕0. This proves that the trip obtained by adding any sequence of sites v at the end of trip k dominates the trip built by adding the same sequence at the end of trip k.□The two theorems concern two trips k and k′ with the same sites. IfCk≤Ck′andDk≤Dk′then Theorem 1 holds and, if k and k′ share the same last site, Theorem 2 too. If Theorem 2 holds fork=(1,2,3)andk′=(2,1,3)(for instance), k⊕v will dominate k′⊕v for any sequence v of sites, e.g., (1, 2, 3, 4, 5) will dominate (2, 1, 3, 4, 5). Hence, k′ can be deleted immediately. However, if k and k′ satisfy Theorem 1 but have distinct last sites, e.g. (1, 2, 3) and (3, 1, 2), k dominates k′ but this is not necessarily the case for extensions like (1, 2, 3, 4) and (3, 1, 2, 4). So, Theorem 1 is applied only at the end, once all possible extensions of each trip have been generated.Note that after the precomputation of K, it is no longer necessary to verify capacity and range constraints. The same trip generation procedure is also used in the set partitioning model described in Section 3.2.H contains one arc (k, k′) if trip-node k can be followed by trip-node k′ in a complete path, e.g., if trip k can be followed by trip k′ in a multitrip. A first condition is that k and k′ visit distinct sites, i.e.,Sk∩Sk′=⌀. In a metaheuristic for the mt-CCVRP, Rivera et al. (2013) proved the dominance rule of Theorem 3, where the mean duration Mkof a trip k is defined as its total duration divided by its number of sites, i.e.,Mk=Dk/Nk.Theorem 3The cost of a multitrip is minimized by ordering its trips in non-decreasing order of mean trip duration (Rivera et al., 2013).According to this theorem, H can be limited to the arcs (k, k′) such thatSk∩Sk′=⌀andMk<Mk′,giving a directed acyclic graph. IfMk=Mk′either (k, k′) or (k′, k) can be selected, provided no cycle is created. Moreover, by ordering the set K of trip-nodes in non-decreasing order of mean duration, we obtain a topological sort of G′ which simplifies the shortest path algorithm. Theorem 3 can be also applied to reduce solution space in the set partitioning model of Section 3.2, by adding the constraints:(42)(Mk′−Mk)·γkk′≥0,∀k∈K,k′∈KDuring the construction of G′, some values are precomputed to ease calculations in the shortest path algorithm: the maximum number of sites per tripNmax=max{Nk∣k∈K}and, in the original graph, the minimum cost of the arcs incident to the depotwmin0=min{w0j∣j∈V′},the minimum service timeσmin=min{σi∣i∈V′},and the minimum cost of the arcs between two siteswmin=min{wij∣i,j∈V′}.Fig. 2 shows the auxiliary network for the instance of Fig. 1. Each square represents a trip-node k with its visited sites, under the cost Ckfor a departure at time 0 and above the duration Dk. The solution (multitrip) of the first figure corresponds to the path in boldface. Its cost can be computed asZ=(27+30+14)+29·(2+1)+32·1=190,following Eq. (34).Like in Feillet et al. (2004) and Azi et al. (2007), we use an extension of Bellman–Ford algorithm with multiple labels per node to solve our resource-constrained shortest path problem. In our version, depicted in Algorithm 1, all paths are implicitly elementary since the graph is directed and acyclic: each partial path undergoes a single extension towards its feasible successors.The algorithm numbers the trip-nodes from 1 to |K| in topological order. It defines for each trip-node k ∈ K a set Ωkof non-dominated partial paths ending at this trip-node and updates the best solution p* when it is improved. This solution is initialized in line 1 by the best result of two heuristics, called in the procedure Initial_solution described in the sequel.Each path p is identified by a labelRp=(Cp,Dp,Sp,Np). For the sake of simplicity, we use the same notation as for the trips, but with a path index p instead of a trip index k: Cpis the total cost of the path (sum of arrival times), Dpits duration, Spthe set of sites visited andNp=|Sp|=∑k∈pNk.In most shortest path problems on DAGs compare, feasible paths go from the first node (without predecessors) to the last (without successors). Here, other nodes may lack successors or predecessors (see Fig. 2) and a complete path may begin and end at any node. So, for each trip-node k, the algorithm initializes Ωkwith the partial path reduced to trip k, with a labelRk=(Ck,Dk,Sk,Nk)(lines 2–4). Then, it inspects each trip k in topological order (line 5) and each partial path p ∈ Ωk(line 6) and tries to extend it by adding one trip k′ at the end. The candidates correspond to the arcs (k, k′) ∈ H. The existence of (k, k′) ensures by construction that trips k and k′ have no common sites but some sites of k′ can be visited by earlier trips on the path: this case is avoided by checking thatSp∩Sk′=⌀. The set of feasible successors for path p, Θp, is computed in line 7 via the procedure Successors, which can be accelerated using the conditionNp+Nk′≤n.For each successor k′ ∈ Θp, a tentative labelRp⊕k′can be computed for the new path p ⊕ k′, using the system of equations (43). Silva, Subramanian, Vidal, and Ochi (2012) defined similar equations to concatenate sequences of customers in a local search for the Cumulative TSP. We adapted them to concatenate one trip-node k′ at the end of a path p.(43)Cp⊕k′=Cp+Dp·Nk′+Ck′Dp⊕k′=Dp+Dk′Sp⊕k′=Sp∪Sk′Np⊕k′=Np+Nk′A lower boundLBp⊕k′is used for the cost of the best complete path which extends p⊕k′. It is computed as the maximum of five bounds presented in the next subsection. The new partial path is discarded if this bound is not smaller than the best costZp*. Otherwise, if p ⊕ k′ is complete and outperforms the current best solution (line 9), p* is updated (line 10).Most shortest path algorithms on DAGs compare paths with the same extremities and apply dominance tests only toΩk′when one arc (k, k′) is added to a partial path ending at node k. A singularity of our problem is that dominated or dominating paths may exist in setsΩk+1,Ωk+2,…,Ω|K|. For instance, our simplest dominance rule presented in the next subsection states that path p dominates p′ ifCp≤Cp′,Dp≤Dp′andSp′⊆Sp. Consider a partial path p ending at trip-node k, withSp={2,3,4},and the three next nodes such thatSk+1={2,3,7},Sk+2=Sk′={7,8}andSk+3={3,8}. In that case, asSk+1andSk+3are both included inSp⊕k′={2,3,4,7,8},dominated labels may exist inΩk+1andΩk+3,not only inΩk′.This is why the while loop lines 13–16 browses each trip-node u after k, even if the new partial path is complete, to eliminate the existing paths which are dominated. This loop stops when all trip-nodes have been inspected or as soon as an existing path dominates the new one. If the latter is not dominated (line 17), it is added toΩk′.Given a partial path p, we describe now five lower bounds for the cost of the best complete path which prolongs p.Lower Bound 1Consider a partial path p and the best complete pathp⊕p¯that extends it. According to Eq. (34), the cost of the complete path isCp⊕p¯=Cp+Dp·Np¯+Cp¯. Asp¯is unknown andCp¯>0,we can setCp¯to 0 and, sinceNp¯=n−Np,get a first lower boundLBp1=Cp+Dp·(n−Np)for the cost ofp⊕p¯. This simple bound can be computed in O(1).LBp1can be improved by serving the remaining sites in a single trip k. Eq. (1) defined the cost of a tripk=(0,1,2,…,Nk,0)asCk=Nk·β∑i=1Nkσi+∑i=0Nk−1(Nk−i)·(σi+wi,i+1). Using the minima defined at the end of Section 4, we can set the cost of the first arc w01 towmin0,the cost of each arc linking two siteswi,i+1to wmin, and each service time σito σmin. After simplification, we get a second lower boundLBp2=LBp1+(wmin0+β·σmin·(n−Np))·(n−Np)+12·(wmin+σmin)·(n−Np)·(n−Np−1). This bound dominatesLBp1and, as wmin,wmin0and σminare precomputed, it is also computable in constant time.The previous bound can be refined by using Nmaxto compute the minimum number of remaining trips m and a lower bound for their cost and duration. First, we havem=⌈(n−Np)/Nmax⌉.Then, lower bounds for the cost and the duration of the firstm−1trips, which visit at most Nmaxsites, can be written respectivelyLBc=(wmin0+β·σmin·Nmax)·Nmax+12·(wmin+σmin)·Nmax·(Nmax−1)andLBd=2·wmin0+wmin·(Nmax−1)+(1+β)·σmin·Nmax.As the last trip visits then−Np−Nmax·(m−1)remaining sites, its cost can be lower bounded asLBclast=(wmin0+β·σmin·(n−Np−Nmax·(m−1))·(n−Np−Nmax·(m−1))+12·(wmin+σmin)·(n−Np−Nmax·(m−1))·(n−Np−Nmax·(m−1)−1).Finally, the lower bound can be computed asLBp3=LBp1+(m−1)·(LBc+LBd·(n−Np−Nmax·(m−1)))+12·LBd·Nmax·(m−1)·(m−2)+LBclast. It dominatesLBp1andLBp2and can be computed in O(1) too.This lower bound approximates the arrival times to the remaining sites. Consider a list πpcontaining these sites i in non-decreasing order of distance to the depot w0i. The arrival time at the ith site in πpis approximated asci′=(i·β+i−1)·σmin+w0,πp(i)·ρi−1+di,where πp(i) is the ith site in πp,di=(wπp(i−1),0+w0,πp(i))·ρi−1+di−1,d0=Dp,πp(0)=0,ρ0=0,and ρia binary indicator equal to 1 if i is multiple of Nmax. Finally, the lower bound is computed asLBp4=Cp+∑i=1n−Npci′.Note thatci′is always smaller than the real arrival time at the ith remaining site, because a)w0,πp(i)≤∑j=1iwπp′(j−1),πp′(j)for any orderπp′,and b) diis a lower bound of the duration of trips before that site.In this modification ofLBp4,the arrival time at the ith site in πpis approximated byci′′=(i·β+i−1)·σmin+(i−τi)·wmin+di′,wheredi′=(wπp(i−1),0+w0,πp(i))·ρi−1+di−1′,d0′=Dp+w0,πp(1),andτi=τi−1+ρicounts the estimated number of trips until the ith site (τ0=1). The binary indicator ρiis equal to 1 if, given the last position j such thatρj=1,we havewπp(j),0+(j−i)·wmin+w0,πp(i)>Lmaxor(i−j+1)modNmax=0. Compared withLBp4,w0,πp(i)in c′ is replaced by∑j=1iwmin=i·wmin,which is smaller than∑j=1iwπp′(j−1),πp′(j)for any orderπp′. The bound is finally computed asLBp5=Cp+∑i=1n−Npci′′.The two last lower bounds can be computed in O(n). The following strategy is applied in line 8 of Algorithm 1. As the boundsLBp⊕k1andLBp⊕k2are dominated byLBp⊕k3,they are not used.LBp⊕k3is first computed, in O(1). IfLBp⊕k3≥Zp*,the new partial path p ⊕ k can be discarded. Otherwise,LBp⊕k4andLBp⊕k5are computed in O(n) and the best one is compared withZp*.Section 4 describes two dominance rules to eliminate trip-nodes when building the auxiliary network. We now introduce four other rules to discard partial paths in the shortest path algorithm. The first one (Theorem 4) extends Theorem 1 to compare two partial paths p and p′ instead of two trips k and k′. It simply says that p dominates p′ if it is not more costly, it does not last longer, and all sites visited by p′ are also visited by p.Theorem 4A partial path p dominates a partial path p′ ifCp≤Cp′,Dp≤Dp′,andSp′⊆Sp.Let p and p′ be two partial paths with labelsRp=(Cp,Dp,Sp,Np)andRp′=(Cp′,Dp′,Sp′,Np′). Letp⊕p¯andp′⊕p¯′denote the best complete paths extending p and p′,Cp¯andCp¯′the costs ofp¯andp¯′,andNp¯=n−NpandNp¯′=n−Np′the number of sites that they visit. From Eq. (34), the costs of the two complete paths are:Zp⊕p¯=Cp+Cp¯+Dp·(n−Np)andZp′⊕p¯′=Cp′+Cp¯′+Dp′·(n−Np′)We prove now thatZp⊕p¯≤Zp′⊕p¯′by showing that each term in the first cost does not exceed the corresponding term in the second one. From the hypotheses, we know thatCp≤Cp′andDp≤Dp′. Moreover, asSp′⊆Sp,we have alsoNp′=|Sp′|≤Np=Sp⇔n−Np≤n−Np′. Finally, asSp¯⊆Sp¯′and travel times satisfy the triangle inequality, we haveCp¯≤Cp¯′.□The remaining rules are deduced from Theorem 4 by computing lower bounds for the costs of the two complete paths.Theorem 5A partial path p dominates a partial path p′ ifSp′⊆SpandCp+Dp·(n−Np′)≤Cp′+Dp′·(n−Np′).Consider again two partial paths p and p′ and the best complete pathsp⊕p¯andp′⊕p¯′which extend them. According to the hypotheses:Cp+Dp·(n−Np′)≤Cp′+Dp′·(n−Np′)In the previous proof we saw thatn−Np≤n−Np′,which implies:Cp+Dp·(n−Np)≤Cp′+Dp′·(n−Np′)We also noticed thatCp¯≤Cp¯′,so we can write:Cp+Dp·(n−Np)+Cp¯≤Cp′+Dp′·(n−Np′)+Cp¯′As the two sides of this inequality correspond toZp⊕p¯andZp′⊕p¯′according to Eq. (34), we can conclude that path p dominates path p′.□Theorem 6 below can be deduced from the proof of Theorem 5. It has the same statement, except thatNp′is replaced by Npin the left-hand side of the inequality. This theorem dominates the two previous ones.Theorem 6A partial path p dominates a partial path p′ ifSp′⊆SpandCp+Dp·(n−Np)≤Cp′+Dp′·(n−Np′).The last dominance rule, specified by Theorem 7, improves and generalizes the previous ones by including a lower bound on the cost to visit the sites visited by path p but not by path p′, i.e., the sites inSp∖Sp′.Theorem 7A partial path p dominates a partial path p′ ifSp′⊆SpandCp+Dp·(n−Np)≤Cp′+Dp′·(n−Np′)+wmin·(Np−Np′)·(n−Np)+12·wmin·(Np−Np′)·(Np−Np′+1).Like for Theorem 4,p⊕p¯andp′⊕p¯′are the best complete paths that extend p and p′, with their costs defined by Eq. (34):Zp⊕p¯=Cp+Cp¯+Dp·(n−Np)andZp′⊕p¯′=Cp′+Cp¯′+Dp′·(n−Np′)AsNp′≤Np,pathp¯′has to visitNp−Np′more sites thanp¯and:Cp¯′≥Cp¯+12·wmin·(Np−Np′)·(Np−Np′+1)+wmin·(Np−Np′)·(n−Np)where12·wmin·(Np−Np′)·(Np−Np′+1)is a lower bound for the cost of visiting theNp−Np′additional sites, andwmin·(Np−Np′)·(n−Np)is a lower bound for the sum of arrival time shifts at the last(n−Np)sites ofp¯′,due to the travel times to the firstNp′−Npsites visited by this path.According to the hypotheses:Cp+Dp·(n−Np)≤Cp′+Dp′·(n−Np′)+wmin·(Np−Np′)·(n−Np)+12·wmin·(Np−Np′)·(Np−Np′+1)If we addCp¯to both sides, we get the following inequality:Cp+Dp·(n−Np)+Cp¯≤Cp′+Dp′·(n−Np′)+Cp¯+wmin·(Np−Np′)·(n−Np)+12·wmin·(Np−Np′)·(Np−Np′+1)As shown before, the second line is not greater thanCp¯′. So:Cp+Dp·(n−Np)+Cp¯≤Cp′+Cp¯′+Dp′·(n−Np′)which means thatZp⊕p¯≤Zp′⊕p¯′and p dominates p′.□Note that whenwmin=0,Theorem 7 reduces to Theorem 6 and, whenSp=Sp′,Theorems 5, 6 and 7 give the same result. Since the last dominance rule dominates the others, it is the only one actually used in Algorithm 1.Two constructive heuristics are executed at the beginning of the algorithm. The best solution obtained is used to initialize p*.First heuristic. Starting with an empty path p, the first heuristic sweeps the trip-nodes in topological order (non-decreasing mean duration) and adds the incumbent trip-node k at the end of p if its sites are not already visited by the path(Sp∩Sk=⌀). The heuristic ends when path p is complete (all sites are covered).Second heuristic. According to the system of equations (43) and the first lower bound, the expressionCp+Ck+Dp·Nk+(Dk+Dp)·(n−Nk−Np)gives a lower bound for the cost of a shortest path beginning with the path p⊕k. Starting again from an empty path, the second heuristic adds at each iteration the feasible trip-node k with the smallest lower bound value.Computational experiments have been conducted to evaluate and compare the performances of the two mathematical models and the shortest path approach. The instances used are presented in Section 6.1. Section 6.2 appraises the impact of the dominance rules of Theorem 1 and Theorem 2 on the auxiliary network generation phase. In Section 6.3, the two mathematical problems are solved using a MIP solver (CPLEX) and compared with the shortest path algorithm on instances withn=20sites. The exact approach is tested on larger instances with up ton=40in Section 6.4.The shortest path algorithm is coded in Microsoft Visual Studio C++ 2010 Professional while the mathematical models are solved using IBM ILOG CPLEX Optimization Studio version 12.5. The computer used is an Intel Core i5 PC at 2.50 GigaHertz with 4 GigaBytes of RAM and Windows 7 Professional.The 14 classical CVRP instances from Christofides et al. (1979) (CMT instances) were taken as a basis. These benchmark problems with 50–199 customers include 7 instances with service times (instances 6 to 10, plus 13 and 14). We selected instances 6 to 10 with 50, 75, 100, 150 and 199 customers to derive 138 mt-CCSVRP instances, partitioned in four groups containingn=20,25,30or 40 sites, respectively. To build the set for one value of n, we take each CMT instance, assume a single vehicle, consider different values for Lmax, keep only the depot and a subset of n sites.The values for Lmaxare multiples of 10, between a minimum feasible value (which depends on the CMT instance) and 120. The nodes selected are the depot and the n first sites i which can be reached by the vehicle, i.e., the ones satisfying 2 · w0i≤ Lmax. The coordinates of these sites, their demands and service times, and the vehicle capacity are the same as in the original CMT file. The traveling time wijon each edge (i, j) is equal to the Euclidean distance, computed as a double-precision real number.Finally, the loading time for each trip k in the auxiliary network is computed asμk=β·∑i∈kσi,where σiis the service time at site i andβ=0.2.Instances 13 and 14 (100 and 120 customers) have been discarded. Contrary to the other CMT instances, their clustered nodes induce a huge number of trips. For example, instance 13 withLmax=70and a selection ofn=20sites has already more than 20 millions feasible trips and the auxiliary network requires more than 24 hours to be generated.As explained in Section 4, Theorem 2 is used to delete dominated trips as soon as they are generated, thus avoiding useless attempts to extend them, while Theorem 1 is used at the end, once all extensions have been done. We tried two strategies to evaluate the impact of these rules. Strategy 1 involves Theorem 1 only, while Strategy 2 applies both theorems. The two strategies end by sorting the set K of non-dominated trips in non-decreasing order of mean trip duration, following Theorem 3, and building the arc-set H. Experiments were conducted on 20 instances withn=20sites and four Lmaxvalues: the minimum feasible multiple of 10, plus 70, 100 and 120.Table 1 summarizes the results. The two first columns indicate the original CMT instance and the vehicle range Lmax. Column |K| reports the number of non-dominated trips obtained at the end. This number, identical for both strategies, is the number of trip-nodes in the auxiliary graph G′ for the shortest path algorithm. Column Nmaxmentions the maximum number of sites per trip, to see the impact of parameter Lmaxand have an idea of the size of the solution space. The last four columns provide for each strategy the number of generated trips (columns |Kg|) and the total time in seconds to build the auxiliary graph (columns Timeg).The table shows that Strategy 1 (Theorem 1 alone) leads to a strong reduction between the |Kg| trips generated and the final |K| non-dominated trips. This reduction ranges from 57% (for CMT06) to 95% (for CMT09), with an average of 77%. Clearly, this reduction gets stronger as Lmaxincreases but, in parallel, the running time, the number of generated trips and the number of non-dominated trips grow very quickly. The maximum number of sites per trip (Nmax) is roughly proportional to Lmax.The application of Theorem 2 in the second strategy brings additional savings. Compared with Strategy 1, the number of generated trips |Kg| is reduced by up to 64% (for CMT09) and by 27% on average. A decrease in running time of up to 81% (CMT09 again) and 74% on average can also be observed: the extra time spent in applying Theorem 2 is compensated by a much smaller number of trip extensions.Among the instances derived from CMT08, the number of non-dominated trip-nodes |K| is larger forLmax=40than forLmax=70. This result is not abnormal since the n sites i extracted, which are the first to satisfy 2 · w0i≤ Lmax, are not necessarily the same for different Lmaxvalues.Table 2comparesthe two mathematical models and the shortest path algorithm, reusing the 20 instances withn=20of the previous subsection. The three first columns recall the CMT instance of origin, the range Lmaxand the number of non-dominated trip-nodes |K|. For the exact method are reported the optimal solution valueZp*and the total running time in seconds (including network construction via Strategy 2). For each model are given the time in seconds to find an optimal solution (limited to two hours), the percentage gap between the best integer solution found and the best lower bound reported by CPLEX (Gapc) and the percentage gap between the best integer solution found and the optimal solution. Null gaps are highlighted in boldface while dashes indicate memory overflows in CPLEX.The results show that the shortest path approach is much more efficient than a direct resolution of the two mixed integer linear programs: it solves all instances to optimality in 69 seconds on average and in 441 seconds (7.4 minutes) in the worst case. Nevertheless, the number of trip-nodes in the auxiliary network and the total running time grow quickly with Lmax. A comparison with the previous table reveals than the fraction of time devoted to the auxiliary network construction increases in parallel, reaching 92.3% for the last instance (309.06 seconds out of 334.80).Although the instances considered are small (20 sites), the flow-based model retrieves only nine of the optima found by the shortest path algorithm and CPLEX has no proof of optimality since its branch-and-cut is always interrupted after two hours. The CPLEX gaps (column Gapc) varies between 1% and 10% but is not sensitive to the parameter Lmax.CPLEX behaves differently on the set partitioning formulation, due to its large number of colums: |K| binary variables are used to select the trips, plus O(|K|2) to enforce the dominance relation for the order of these trips in the multitrip. 5 instances with at most 209 trip-nodes are solved to optimality. The time limit is reached and poor integer solutions are returned for 5 other instances with up to 636 trip-nodes. The 10 remaining instances from 3 321 trip-nodes onwards raise an “out of memory” error.Contrary to the other instances, on the data files derived from CMT08, the set partitioning formulation obtains an optimal solution whenLmax=70but not forLmax=40. These results can be explained by the number of non-dominated trip-nodes, which is larger in the instance withLmax=40.The previous subsections have shown that the shortest path approach is fast enough forn=20(one minute on average) to envisage solving larger instances. Tables 3, 4 and 5 respectively gather our results for 25, 30 and 40 sites. Most column headers have been already defined. The number of trips generated |Kg| and the final number of non-dominated trips |K| come again from Strategy 2. We distinguish now between the time to generate the auxiliary network (Timeg) and the time to determine the shortest path (Times), and provide the percentage gap between the initial solution and the optimum (Gap0). Concerning vehicle range Lmax, all multiples of 10 between the minimum feasible value and 120 are considered for n ∈ {25, 30}. Forn=40,Lmaxhas been limited to 100 otherwise the network is too large.The results in Tables 3, 4 and 5 confirm the impact of the dominance rule of Theorem 1. If |Kg| and |K| are compared, the number of trip-nodes in the auxiliary network is reduced by 59–82% for instances with 25 sites, 60–85% forn=30,and 66–82% forn=40. These percentage are not significantly affected by the number of sites but tend to increase with Lmax. For most instances, a greater value of |Kg| or |K| implies a greater value of the maximum number of sites per trip Nmax, but the latter can stagnate because of capacity constraints, see for example instance CMT07 in Table 4.The two heuristics used at the beginning yield very good solutions on average, since Gap0 varies between 0% and 12.7%, with an average value of 4.31%. Nevertheless, a better initial solution does not always imply a faster resolution. Consider in Table 5 instance CMT07 withLmax=90and CMT08 withLmax=100. They have comparable networks (149, 248 and 152, 764 non-dominated trips). However, the first one which has a better initial gap (2.49% vs. 5.27%) takes longer to be solved (3 258 seconds vs. 2 662 seconds).The time to generate the auxiliary network and compute the shortest path increases quickly with n and Lmax. For instances with the largest Lmaxvalues, constructing the network can be more time-consuming than determinating the min-cost path, like for CMT10 withLmax=120in Table 4. Figs. 3 and 4illustrate respectively the number of non-dominated trip-nodes (|K|) and the total running time (Timeg+ Times) for the different values considered for n and Lmax. Each point is averaged over all instances with the same values of n and Lmax. The left part of each figure uses a linear scale for the Y-axis while the right part is logarithmic. In the logarithmic plots, the curves are almost linear when Lmaxis large enough, indicating an exponential growth.

@&#CONCLUSIONS@&#
This paper has presented a new version of the mt-CCVRP, in which only one vehicle is available and the range of the vehicle represents a very restrictive constraint. This combinatorial optimization problem constitutes a good way to model the delivery of relief supplies after a disaster, since the objective function takes into account the urgency of the situation.Two mathematical models have been compared with an exact approach based on a reformulation of the problem as a resource-constrained shortest path problem. While a commercial MIP software solves only a minority of instances for 20 sites, the exact method can tackle instances with up to 40 sites, thanks to good initial solutions, dominance rules and lower bounds which accelerate the solution procedure. Like many dynamic programming approaches, our method reaches its limits when the state-graph is too big, which happens in our case for large values of the vehicle range (Lmax).Among possible future research directions, the exact approach could be used in a column generation scheme for the mt-CCVRP. Cumulative versions of other node-routing problems, such as the Generalized VRP or the Selective VRP, are worth studying to model different distribution policies in humanitarian logistics. Similar objectives like the sum of weighted arrival times are also interesting to reflect site priorities.