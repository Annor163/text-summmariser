@&#MAIN-TITLE@&#
Three-dimensional planar model estimation using multi-constraint knowledge based on k-means and RANSAC

@&#HIGHLIGHTS@&#
A novel method for planar model reconstruction from three dimensional point cloud.It allows the accurate reconstruction of planar objects using prior knowledge.It evaluates the clusters of each face and estimates the planes by using constraints.k-means estimates the clusters and a tree search refine them by using constraints.It extends RANSAC introducing a step to evaluate if the inliers comply constraints.

@&#KEYPHRASES@&#
Computer vision,Model extraction,RANSAC multi-plane,Three-dimensional planes,

@&#ABSTRACT@&#
Plane model extraction from three-dimensional point clouds is a necessary step in many different applications such as planar object reconstruction, indoor mapping and indoor localization. Different RANdom SAmple Consensus (RANSAC)-based methods have been proposed for this purpose in recent years. In this study, we propose a novel method-based on RANSAC called Multiplane Model Estimation, which can estimate multiple plane models simultaneously from a noisy point cloud using the knowledge extracted from a scene (or an object) in order to reconstruct it accurately. This method comprises two steps: first, it clusters the data into planar faces that preserve some constraints defined by knowledge related to the object (e.g., the angles between faces); and second, the models of the planes are estimated based on these data using a novel multi-constraint RANSAC. We performed experiments in the clustering and RANSAC stages, which showed that the proposed method performed better than state-of-the-art methods.

@&#INTRODUCTION@&#
Many different applications of three-dimensional (3D) computer vision (such as scene registration and reconstruction, localization and mapping) use large volumes of data to extract a model. In particular, plane estimation is a common problem in various applications, including planar object reconstruction, mapping using planar surfaces to localize a robot in an environment and minimizing the effects of noisy data. Recently, new low-cost RGB-D sensors have been developed to provide colour and depth information simultaneously (e.g., Microsoft Kinect, PrimeSense Carmine and Asus Xtion). In general, these sensors estimate the depth using structured light techniques, specifically a speckle pattern in the infrared spectrum. At present, these sensors are being used in various research projects [1] because of their affordability, and they have also opened up new areas of study and application. However, the data obtained from these sensors tend to be noisy, thereby resulting in errors in the results achieved by these processes in many cases. Thus, techniques need to be developed to minimize the effects of noise.One of the most popular methods for estimating a model from a set of 3D data is the RANdom SAmple Consensus (RANSAC). This method or paradigm was proposed by Fischler and Bolles in [2] for fitting a model to experimental data by selecting a random subset of input values, estimating a model from these values and then evaluating the quality of the model based on the overall dataset. This process is applied iteratively until convergence, or for a predefined number of iterations. Finally, the best model is selected (i.e., that with best fit to the overall point set).One of the most important advantages of RANSAC is that it is not constrained to a specific dimensionality. For example, it has been used in various situations such as two-dimensional (2D) line fitting [3,4] for smart cars to estimate the directions of road markings and to guide the car between them. Another common use is for removing outliers during image matching. Raguram et al. [5] reviewed the use of RANSAC variants for matching outlier removal in 2D features. RANSAC was also applied to 3D registration by Su et al. [6] and Henry et al. [7]. Furthermore, Hassner et al. [8] employed RANSAC to align 3D data with 2D images. Zhou et al. [9] used RANSAC to obtain camera parameters by removing outliers during the calibration process.However, the RANSAC algorithm has a random step that affects repeatability. Thus, Hast et al. [10] proposed a variation of RANSAC by introducing a recalculation hypothesis step where only the inliers of the previous step are used, thereby allowing the method to find the optimal set even with a high percentage of outliers.The use of RANSAC has been studied widely for plane model fitting. Tarsha-Kurdi et al. [11] compared the use of the Hough transform and RANSAC for 3D roof plane estimation. Kim et al. [12] used RANSAC for plane detection during stereo matching in scene reconstruction. Mufti et al. [13] focused on finding planes (walls and the ground plane) in moving scenarios during autonomous navigation, where they used spatio-temporal information to evaluate the consensus set and to estimate the probability of a point belonging to a specific plane.In many cases, multiple planes have to be estimated in a scene. Gallup et al. [14] extracted planar and non-planar regions using iterative RANSAC, where they selected a random set of points, estimated a plane using RANSAC, obtained the data that fit this plane and then repeated the process with the remaining data until the remaining points could not be used to find a plane. Zuliani et al. [15] presented multiRANSAC as a modification of the traditional RANSAC for multiple models, where the data that fitted the models were estimated using disjoint consensus sets. Schnabel et al. [16] proposed the use of multiple primitives in order to find the maximum number of inliers that fit different primitives (planes, spheres, cylinders, cones and tori) in an iterative manner. Sinha et al. [17] estimated planes used vanishing points and 3D line segments estimated from several views of a scene. RANSAC was applied to the remaining points that had not been assigned previously to any model. Isack and Boykov [18] proposed a method called PEARL that combines model sampling with the iterative re-estimation of inliers and model parameters. This method does not employ a predefined number of models because it uses traditional RANSAC for their initialization.Three previous studies are highly related to the method proposed in the present study: [19–21]. These approaches pre-cluster the data in order to find better planes, instead of simply selecting random data and trying to find the best match for a planar model. The first method is a CC-RANSAC variant for fitting multiple surfaces, which employs pre-clustered data to allow the RANSAC algorithm to obtain better results. This method assumes ground plane situations with steps, curbs or ramps. In these situations, the traditional method would fail to obtain a single plane if it crosses two or more patches. In order to avoid this problem, the CC-RANSAC variant method pre-clusters the data using the connected 8-neighbours components. The second and third methods, i.e., [20,21], improve the previous method by adding vector normal information to allow the estimation of each cluster in the clustering and patch-joining steps. In our proposed method, we also add scene knowledge to improve the results, where we add constraints in the clustering stage as well as during RANSAC model fitting. This improves the results greatly when the signal-to-noise ratio is low, whereas other methods fail to cluster correctly and thus the RANSAC stage also fails.Other techniques have been proposed for model fitting, e.g., Mercer Kernel statistical learning techniques were used to estimate model fitting by Chin et al. [22], while Zhou et al. [23] used particle swarm optimization for multiple model fitting.After considering the state-of-the art methods for model estimation from a point cloud, it clear that a challenging problem still remains when high accuracy is required, mainly with noisy data, including that captured using RGB-D sensors. In this study, we propose a method for estimating the planes that best fit the model of a planar object, which we call multiplane model estimation (MME). The inputs comprise a 3D set of points and a group of constraints, an initial clustering (a point cloud clustering, PCC) is performed using a new variant of k-means based on the knowledge extracted from the model. Next, a variant of RANSAC with multiple constraints (MC-RANSAC) is applied to estimate the best planes that fit each cluster and that preserve the object model.The remainder of this paper is organized as follows. In Section 2, we explain the method, where Section 2.1 describes PCC clustering and Section 2.2 presents the MC-RANSAC approach. In Section 3, we present the results of experimental evaluations of the PCC (Section 3.1) and MC-RANSAC (Section 3.2) methods. Finally, we give our conclusions, including descriptions of the main advantages of the proposed method and the most interesting results obtained.In this section, we explain the proposed MME method in detail. Using 3D spatial data as the inputs, the MME method employs a group of constraints to estimate the planes that best fit the 3D point clouds. This method is divided into two main steps: PCC based on the k-means algorithm and a search tree (see Section 2.1); and a proposed variant of the RANSAC method called MC-RANSAC (see Section 2.2), which estimates the models from clustered points. Fig. 1shows a diagram of the MME, with the PCC and MC-RANSAC steps. The hyphened arrows represent real points transferred between steps and the thick arrows are constraints in the model. The algorithm has two inputs: a point cloud and the model constraints. It is important to stress that the model shown in the figure is actually represented in the method by the angles between each pair of planes (e.g., Table 1). The point cloud is clustered using traditional k-means based on point and normal vector information, where the clusters are evaluated using the model constraints. The points classified as correct clusters are sent to MC-RANSAC to finally estimate the planes again using the model constraints.Finally, it is important to note that the MME method is suitable for N-dimensions because k-means and RANSAC can work in N-dimensions. In this study, we focus on 3D planes in depth, but the general method is explained in Section 2.2.In this subsection, we explain the PCC step of the MME method. A short summary is provided in Fig. 2, which shows that PCC employs a raw 3D point cloud and a table of constraints on the model (e.g., Table 1) as inputs.The full algorithm is summarized briefly in Algorithm 1.Algorithm 1General PCC algorithm. First, k-means estimates the clusters based on the points and normals. Next, the planes with similar orientations are joined. The clusters that obtain the best solutions corresponding to the constraints are calculated using a tree search technique.1: input: {Point cloud; model constraints}2: output: {Point cloud clusters that meet the constraints}3: ClustersAux = k-means(points,normals,numClusters);4: for each cluster idC1 and idC2 in ClustersAuxdo5:   if ClustersAux(idC1)≈ClustersAux(idC2) then6: ClustersAux(idC1) = ClustersAux(idC2);7:   end if8: end for9: Calculate angle correspondence matrices A and B;10: for each plane in B do11:   Estimate similar planes in A using Eq. 112: end for13: while possible solutions remain do14:   read current candidate for the level;15:   if new node meets the constraints then16: go to next level;17:if is the last level then18:   PossibleSolutions.add(branch);19:end if20:   else21: go back to the previous level and change the candidate;22:   end if23: end whileThe method estimates the clusters that best fit the model in three main steps. First, a k-means algorithm estimates the clusters based on the 3D points and normal vectors. Second, similar planes (e.g., similar angles, distances and colours) are merged, where we used the plane orientation in the present study. Finally, a tree search technique finds the best cluster. The best solution is used as the input for the next step (as explained in Section 2.2).For each point in the point cloud, the normal vector is estimated using its neighbourhood. The size of the neighbourhood affects the homogeneity of the orientation of the normals in a plane. The normals will be smooth for a large neighbourhood (i.e., all of the normals in a plane will point in the same direction), but the edges of the objects will also be smoothed, and thus they are less descriptive. By contrast, if the neighbourhood is small, the normals will be affected greatly by noise and they will be less uniform for a single plane surface. In the present study, we selected experimental values to obtain a smoothed result that retained sharp edges (i.e., the number of neighbours was seven or 11 points).We normalize the 3D points and normals within the range [−1,1] to equalize the weights in both cases in the proposed method. Next, we apply the well-known k-means algorithm to obtain an initial clustering that considers the spatial location and orientation. This method needs a predefined number of clusters; thus, at least the maximum number of planes visible from a single point of view should be used by k-means, although we suggest the use of a higher number in order to manage noise. For example, if we are looking for a cube, the maximum number of planes from a single view will be three (top or bottom and two sides), and thus we use 3+⌈3*perc⌉, where this percentage, perc, 0.4, was estimated experimentally in our study.After we obtain the initial clusters, it is necessary to merge and/or reject some of them. The number of clusters initialized is higher than the maximum number of planes, so it might appear that there are various clusters where there should only be one plane, or the planes may be incorrect due to noise. To merge the clusters, we evaluate the similarity of the orientations of the normals of the clusters, which corresponds to the average of all the normals that belong to each cluster. The clusters are joined if the angle is below a threshold. Centroids are not used in this step because they can produce incorrect solutions. For example, if two small clusters are close to an edge on both sides, they are very close each other, but they do not have to be joined.The next step is the most critical feature of this part of the algorithm. After merging, we might still have incorrect clusters, which must be rejected using the model provided by the table of constraints. Thus, we propose the use of model constraints and a tree search technique to determine which of the clusters best represents the model planes. First, we explain the model constraints. The model is defined by the relationship between the planes related to the object, e.g., distances, sizes or colours. In this study, we propose the use of the angles among the planes to describe the model of an object, where two angle correspondence matrices are used to represent the angles between each pair of planes: the first corresponds to the model constraints (Anxn, Table 1, where n is the maximum number of planes visible in a single view of the model) and the other represents the angles between the previously estimated clusters (Bmxm, Table 2, where m is the number of clusters). We refer to these as the Model A and Object B. Matrix A must contain the constraints for the maximum number of possible visible planes, which makes the algorithm invariant to position and scale.In order to evaluate the clusters that describe the planes and those that should be rejected, different situations can be handled by evaluating the correspondences between A and B, as follows.•A and B are not necessarily aligned because PAiin A does not correspond to PBiin B.A and B could have a different number of planes because A has the maximum visible planes whereas B may be a view with fewer planes. For example, a cube would have A with n=3 but if the current view is from the front, B could be m=2 for the front and top sides.B could have incorrect planes due to noise effects.To consider all of these situations, we need to identify the best group of clusters in B that fits A using a tree search technique. The tree of solutions (Fig. 3) is obtained with n levels, where each belongs to a plane in the model. The nodes at every level correspond to every possible value in B. The number of branches generated by this tree is nm, so it is necessary to use reduction techniques. Thus, we propose to evaluate the most similar planes from B to A, which involves finding the clustered planes that are most similar to those in the model based on comparisons of their angles, where we apply Eq. (1) to each plane in B for this purpose:(1)Similar(PBx)=max(∑y=1Ncount(PBx≈PAy))where count(PBx≈PAy) is the number of values (angles) in PAythat differ by less than a threshold PBx. For example, using Table 3, we may assume a threshold of 5 (which means that any difference in the angles that exceeds this value will not be considered), and thus the plane PB1 will have two similar values with PA1, one with PA2, and two with PA3. Next, we keep the maximum values, so PB1 could be related to PA1 or PA3, as found in the model. Using this formula, we obtain a table of possible correspondences between A and B, which maximize the likelihood of Object and Model, thereby reducing the solution space. Table 4shows the results obtained for the example in Table 3.Table 3 shows the Model and Object angle correspondence matrices, which demonstrates that there are more planes in the Object, PB1..4 than PA1..3. Using Eq. (1), the search space is reduced to obtain Table 4. Finally, the best results that maximize the number of correct planes in B will be PB1 and PB2, which correspond to PA1 and PA2, respectively. In a correct combination, Model and Object are similar in terms of their constraint angles. Thus, the angle difference between the selected plane in B and the corresponding plane in A is equal to or below a threshold (in this case, that used in Eq. (1)).After this reduction of the search space, it is not always possible to obtain the response within a reasonable time. Thus, we evaluate the branch while the nodes are being inserted into the tree by using a backtracking algorithm to detect incoherent values at an early stage. This evaluation is performed by comparing the angles of the new node with all the predecessors in the tree. If the values in Object (B matrix) are similar to those in the Model matrix, the new node is accepted and inserted. When all of the levels are filled, the branch is selected as a possible candidate among a good set of planes. Not all of the planes in B correspond to the planes in A, so it is necessary to add an empty value to the decision tree (Fig. 3), which allows the algorithm to handle incorrect and missing planes. Finally, if more than one solution is obtained, the solution where more points are added to all clusters in the branch is returned. For the example shown in Fig. 3, (PB1∪PB2∪Ø), (PB1∪Ø∪PB4), and (PB1∪Ø∪Ø) are possible solutions. If we assume that cluster PB1 has 100 points, cluster PB2 has 200 points and cluster PB4 has 100 points, then the result will be (PB1∪PB2∪Ø) because the total number of points added to the cluster for that branch will be 300.In this subsection, we present the proposed MC-RANSAC method for estimating the planes that best fit the input data using prior knowledge related to the object model. This method is based on the original RANSAC paradigm and it also employs the idea proposed in [19] of pre-clustering the input data. In the previous section, we proposed a method for this purpose, but any clustering method can be used because MC-RANSAC is independent of the pre-clustering process. Three main steps are considered (see Fig. 4), including the two main steps in the general RANSAC method: estimating the model using a random subset of data and evaluating the inliers for the remaining data. In our method, there are several input data groups, i.e., one for each cluster, so one subset is calculated for each group of data and the evaluation of inliers is also applied to each group. Furthermore, a middle step is introduced where the constraints are evaluated. We assume that the union of all planes yields a globally correct figure, i.e., there are no incorrect groups. Therefore, if all of the constraints are not satisfied, the whole method returns an error status. This may mean that is not possible to obtain this model using these data or that the pre-clustering results are incorrect.In this study, the method is evaluated using 3D planes where the input data comprise 3D points and the groups are the previously calculated clusters (see Section 2.1). The incorrect groups are rejected in the PCC step, so we do not have to handle incorrect planes in MC-RANSAC.The MC-RANSAC input comprises a set of clustered data and the model constraints that correspond to the clusters. For the example shown in Tables 3 and 4, we only use PA1 and PA2 columns and rows in the matrices. The first step involves selecting a subset of data from each group, where the mathematical model of each individual subset is estimated. In the specific case of 3D planes, least squares estimation can be employed to extract the models.After estimating the models, we propose to introduce a step where the constraints are evaluated. These constraints are the angles in the model matrix that correspond to the input clusters because we need to find the planes that fit the original model. The constraint between each pair of planar models (not to be confused with the model of constraints) is evaluated. If the angles describe the constraints, we compare the angle between each pair of planes with the corresponding model angle. If one does not agree, this group of planes is rejected and the algorithm starts again. It is not always possible to achieve a perfect fit for the constraints, so a threshold for the allowed deviation from the perfect fit is introduced, which determines the accuracy of the results.The final step of the MC-RANSAC is the evaluation of inliers. The planar models are extracted from a subset of points, so the remainder are evaluated as inliers, where an iterative method is applied. For each group, every point that is not used in the initial subset is incorporated into the inlier subset. The model for this new subset is then calculated and the constraints are tested again. If the model does not comply with the restrictions, the point is removed as an outlier. It should be noted that this step is the most time-consuming part of the algorithm because it has to be applied to all of the data in all of the groups. Thus, in order to reduce the temporal complexity, our proposed method only evaluates the minimum number of data per group that are considered sufficient to ensure the quality of the model.The overall process is iterated several times to change the initial random subsets and to obtain the final models that fit more of the input data while preserving the constraints.In some cases, as shown in the experimental evaluations later in this study, the PCC clustering process might successfully satisfy the constraints in the previous step, but the points do not actually belong to correct planes. In Section 3.1, Fig. 9 shows an example of this situation. Therefore, MC-RANSAC must detect any errors and feed back into the MME general method to evaluate whether recalculation of the clusters is necessary.The full algorithm is summarized briefly in Algorithm 2.Algorithm 2General MC-RANSAC algorithm. First, the plane model is calculated for each subset. Next, the constraints defined by the corresponding matrices determine whether the plane models describe the actual model if they are all satisfied. The inliers and outliers in each group are checked by adding each point to the accepted set and recalculating the plane. All of the constraints are tested using this new plane and a point is accepting as an inlier if they are all satisfied.1: input: {Data_in:Cluster1..l; Model constraints corresponding to the Cluster1..l}2: output: {Model_out:Cluster1..l}3: for i:= each group in Data_in do4:   InitialSubset(i):= random(Data_in(i));5:   ModelInitial(i):= estimate the model for InitialSubset(i);6: end for7: Evaluate the constraints(ModelInitial(i=1..l), Model constraints);8: if Constraints OK then9:   for i:= each group in Data_in do10:for j:= each data in Data_in(i) do11:   InitialSubset(i).add(Data_in(i)(j));12:   ModelInitial(i):= estimate the model for InitialSubset(i);13:   Evaluate the constraints(ModelInitial(i), Model Constraints);14:if NOT Constraints OK then15:InitialSubset(i).remove(Data_in(i)(j));16:end if17:end for18:   end for19: end ifThe experiments used to validate the proposed method comprised three different parts. First, we conducted various experiments in order to evaluate the behaviour of PCC with different levels of noise and different objects. Second, we also evaluated MC-RANSAC with different levels of noise and objects. Finally, we performed a combined analysis of PCC and MC-RANSAC to demonstrate the overall benefits of the MME method.The proposed method was evaluated using synthetic and real data, i.e., a cube, a pyramid and a double pyramid joined at the tips (Table 5). The synthetic data were obtained by simulating a Microsoft Kinect sensor with Blensor [24]. This tool allowed us to create different objects, which were represented by planes, and we could move the camera to obtain different points of view. Some white Gaussian noise with different levels of dispersion was added to the synthetic data to evaluate the ability of the algorithms to handle noise. This noise was parameterized with the mean and the standard deviation according to a Gaussian probability distribution, where the mean indicated the location affected by noise and the standard deviation indicated the dispersion of the noise. The mean value μ was zero in all of the tests and the standard deviation σ had values of 1×10−5, 4×10−5 and 6×10−5. The Gaussian noise was applied to the depth information to simulate noise in the RGB-D sensors because the depth information is affected more significantly by incorrect values. The models represented the maximum number of faces that could be seen from a single viewpoint, as explained in Section 2.1. To evaluate all possibilities, this experiment included eight points of view for each object.Microsoft Kinect was used to evaluate the algorithms with real data, where the objects were similar to those simulated with Blensor. A turntable was used to obtain different views (see Fig. 5). The set-up also included a computer to perform experiments, where the system comprised Windows 7, an Intel i5 processor and 8GB of RAM. The code was implemented in Matlab vR2013b.Table 5 shows the angle correspondence matrices (constraints) for the three objects.First, we evaluated the PCC method (Section 2.1). This part of the system employs the k-means method to cluster the points initially using information related to the 3D points and normal vectors. Initially, k-means needs the number of clusters, so for each object, we estimated the maximum number of faces visible in a view and we added 40% of this number, e.g., for the cube, the maximum number of visible faces was three, so the number of clusters: nClust=3+⌈0.4*3⌉=5. This facilitated the handling of noisy data. Moreover, in Eq. (1), count(PBx≈PAy) used a threshold with a value of 20, which was estimated experimentally as the best using our dataset (synthetic and real data).Fig. 6shows the results obtained using this part of the algorithm for synthetic objects with different levels of Gaussian noise. The noise was applied to the depth values, so the planes perpendicular to the viewpoint were affected more significantly by the noise. Fig. 7shows the results obtained for the data acquired from the Microsoft Kinect sensor. The third object, i.e., the double pyramid joined at their tips, lacked planes compared with the synthetic data because of the method employed by the sensor to obtain depth information. These sensors use a speckle pattern [25] to calculate the depth information. Thus, for surfaces that are parallel to the camera, it is difficult to obtain a good disparity and distance values. The proposed algorithm does not require continuity in data and it can obtain the corresponding clusters. Visually, the results obtained by PCC can be used to estimate the data that best fit with the model we want to estimate.We performed several tests to quantitatively evaluate the effects of noise on the PCC method. For each object in the synthetic and real data, the algorithm was run five times for each view (i.e., eight views from different angles) and noise level: five times four levels of noise, as well as with no noise for each of the eight viewpoints. Table 6shows the average number of points for each object in the points columns. The maximum number of faces visible for each object is shown in the faces columns. The first row is the average number of points for synthetic data and the second row shows the number of real data acquired by the Kinect sensor. The objects are the cube in the first main column, the pyramid in the second, and the double pyramid in the third.The average ratios for selected data (inliers) relative to the initial data from the raw point cloud are presented in Table 7. The first four rows correspond to the synthetic data. In general, the ratio tended to decrease as the noise increased. In the final row with the results for the real data, there is a high ratio of inliers, which is a very important consideration in the next step (see Section 2.2), i.e., more model estimates are possible when more data have been clustered.In order to assess the performance of the clustering method in more detail, we determined the average number of points per face for each object in the eight views. We had the ground truth clustering results (i.e., those obtained by the method with no noisy data), so we compared each of the points to evaluate whether they had been clustered correctly. The results of this experiment are shown in Tables 8–10, for the cube, pyramid and double pyramid, respectively.Different conclusions can be reached based on Tables 8–10. It was more difficult to obtain a result when more clusters had to be fitted. For example, the pyramid figure required a maximum of two planes, so the k number of clusters could be three or four, depending on the percentage that we want to add (in this case, 40%). However, the double pyramid had five planes and adding this percentage required seven clusters with k-means. Thus, there was a lower probability of each point being placed in the correct cluster for the second shape. The constraints used to improve the classification only consider the angles between the planes and not their positions. Therefore, when the model had several clusters and noisy data, the possibility of finding an incorrect plane that satisfied a constraint in the model increased. This was particularly notable when the number of plane models exceeded those viewed from the camera (i.e., when two sides of the cube were acquired, although the cube model had three faces (see Fig. 9).In terms of the processing time (Table 11), the performance of the algorithm varied with respect to noise. In general, the time increased in proportion to the amount of noise, but the time was highly dependent on the number of points. If we compare the results in this table with Table 6, which involved more input data, the processing time was higher. For example, the synthetic cube had 3227 points and the time was in the order of 0.3s, whereas the pyramid had 1761 points and the corresponding time was lower, i.e., approximately 0.1s. Another interesting conclusion that can be obtained from this data is that using similar data, the time tended to be greater when more planes had to be estimated. The real pyramid had 2872 points and the synthetic double pyramid had 2286, but the time was greater for the latter due to the number of planes in the model. These two main conclusions applied to the time required for the double pyramid with the Kinect data (last column and last row of Table 11), where the number of points was the highest at 8033, and so was the number of planes, i.e., five. Therefore, this example required the longest processing time in this experiment.In this experiment, we assumed that the angles obtained by the method were due to the constrained step. The clusters returned by the method had to satisfy the constraints. However, when a large amount of noise was present, the clusters could be calculated incorrectly. To calculate the orientation of each cluster, we used the mean value of all the normals that belonged to the cluster. The normals associated with each point in the cluster were calculated using a neighbourhood, and thus the normals varied greatly if the noise level was high, even for close neighbours, as shown in Fig. 8. This figure shows the normals estimated in an ideal situation (left top) and the associated point cloud (middle top), as well as with a large amount of noise (left down) with the associated point cloud (middle down). The final two images show details of the normals in both situations.For a specific amount of noise, the proposed clustering method for point clouds obtained an appropriate result. However, with a higher level of noise, special situations could occur such as those where the clusters satisfied the constraints of the model but they were actually incorrect. This situation is illustrated in Fig. 9. The left image shows the clustering results with three groups, where they are represented by pink dots oriented vertically. The other two clusters (blue “x” and green squares) belong to the same face but their normals are 88° apart (image on the right). Thus, given the constraints on the cube model (Table 5) where all the angles must be 90°, this shape satisfies the requirements. In the right image, it is possible to see the cluster centroids and normals. Hence, this cluster satisfies the constraints in the same manner as the right group, although their points actually fail to form the three faces of a cube.In the second set of experiments, we tested the MC-RANSAC method (Section 2.2). In order to obtain reliable evaluations of the results, the clustered faces used in this section were those extracted without noise, i.e., the ground truth from the previous section. As in the PCC experiments, we used eight views for each object and different levels of noise were added.The first experiment without noise allowed us to demonstrate the performance of the method. Fig. 10shows two of the eight views for each object in different positions. The coloured faces show the points used by MC-RANSAC to obtain the model. The asterisks represent the centroids of planes and the vectors are the normals.It is possible to evaluate the MC-RANSAC results visually. Furthermore, Table 12shows quantitative values, which illustrate the correct results obtained by the MC-RANSAC method. For each object in the table, there are three columns: γ is the mean difference between the angles of the estimated planes and the angles in the model (e.g., the cube has three planes, so in Fig. 10, with 90-88–91° between the faces, γ = ||90−90||+||90−88||+||90−91||/3=(0+2+1)/3=1), ρ is the standard deviation of γ and Planes is the number of planes detected by the method for each view. The first eight rows show the values for each of the eight views. The final row shows the mean values for the angle means and standard deviations.These values demonstrate the excellent performance of the method. Next, the effects of different levels of Gaussian noise were evaluated based on comparisons with the ground truth clustering results. In order to compare our method, we performed experiments using the proposed MC-RANSAC method, clustered RANSAC and the original version. Clustered RANSAC is based on CC-RANSAC [19], but the clusters obtained by the ground truth are used to compare the results. Traditional RANSAC estimates planes iteratively until no points are left. In many cases, this method returns incoherent planes due to its dependence on the initial random seed and the threshold used for detecting inliers. Therefore, the results presented in this subsection correspond only to MC-RANSAC and clustered RANSAC because in most cases, the number of planes obtained by the traditional RANSAC was not similar to that expected and their orientations were dissimilar.In this experiment, we applied each algorithm five times with different levels of noise and various views. The results represent the mean values of all views based on five iterations. Table 13shows the mean values of the angles between the plane orientations and the model, which were extracted by MC-RANSAC and clustered RANSAC for each noise level (each pair of rows shows the MC-RANSAC error and clustered RANSAC error, respectively). The table shows that better results were obtained by the proposed method in terms of both the mean and standard deviation. Figs. 11 and 12show the means and the standard deviations from the tables, where the improvement obtained using MC-RANSAC compared with clustered RANSAC is obvious. These figures show that the error increased slightly with the proposed method, which is represented by the blue line with diamonds, compared with clustered RANSAC (represented by the red line with squares), for which the error increased greatly with the noise. The accuracy of the proposed method decreased slightly whereas the accuracy of clustered RANSAC decreased greatly. The standard deviation is represented by the error bar for each point, which shows that the stability of the proposed MC-RANSAC was higher than that of clustered RANSAC, thereby demonstrating that more reliable and repeatable results were produced by MC-RANSAC.The results of these experiments demonstrate how well the plane orientations satisfied the model constraints. However, for the same sample of points, many different combinations of planes could satisfy the constraints (as shown in Fig. 13, where three pair of planes satisfy the 90° constraint on the points in the cube).Therefore, we performed further experiments to evaluate how well the planes agreed with the ground truth plane, i.e., instead of considering the constraints, we addressed the difference in the angle between a plane orientation estimated by MC-RANSAC and by the clustered RANSAC versus the same plane in the ground truth.Table 14shows the mean values and the standard deviations of the angles between the planes and the corresponding angles in the ground truth for MC-RANSAC and clustered RANSAC. This table shows that clustered RANSAC obtained slightly better results when the number of planes was low (pyramid) and the noise level was also low because MC-RANSAC is more focused on providing a good fit to the constraints instead of only fitting the points. However, when the noise level was higher or the number of planes increased, the performance of MC-RANSAC was better (represented by the mean γ) and more stable (represented by the standard deviation ρ). Figs. 14 and 15show the information contained in the table in a graphical and intuitive manner. The red squares represent the mean error for each noise level with clustered RANSAC and the blue diamonds correspond to the results using MC-RANSAC. The standard deviation is plotted for each error value with error bars. In all cases, MC-RANSAC was more accurate as the noise increased.The results presented in the tables and figures above demonstrate the superior performance of MC-RANSAC compared with state-of-the-art methods in terms of the accuracy when estimating the planes for various sets of points simultaneously. This improvement is very important for systems where the alignment of the planes must be highly precise, or in fine registration systems where accuracy is a key requirement.The overall system based on PCC (Section 2.1) and MC-RANSAC (Section 2.2) can be used to estimate the best planes that satisfy a set of points, while preserving a group of constraints. PCC clusters each set of points and MC-RANSAC estimates the planar models.The combination of both methods obtains the planar model, but it also helps to address other issues in various situations, particularly the detection of false positives during the PCC step. If we obtain an incorrect group of clusters due to an error in the PCC, as shown in Fig. 9, then clustered RANSAC will produce the wrong planes, whereas the constraints will not be satisfied in MC-RANSAC during the checking step. This helps to determine whether the set of clustered points can form the expected model.Another interesting advantage of the proposed MME method is that it can reduce the effects of incorrect camera calibration in some applications. Fig. 16shows the effects of incorrect camera calibration. These views correspond to the two sides of a cube from different viewpoints (they are aligned to facilitate visualization of the problem), where it is easy to see that the angle is not 90°. This problem was caused by the incorrect calibration of the camera, which could be minimized using the proposed method because the constraints require that the results are within a specific range.

@&#CONCLUSIONS@&#
In this study, we proposed a novel method for planar model reconstruction from 3D point clouds. The MME method facilitates the accurate reconstruction of planar objects using prior knowledge related to the model. The MME method employs PCC and MC-RANSAC. First, the points that belong to each face of the object are evaluated, before estimating the planes that best fit the points and the constraints of the model. The PCC method uses a k-means algorithm to estimate the clusters and a tree search technique to refine the solutions while considering the prior constraints. The MC-RANSAC extends traditional RANSAC by considering pre-clustered input data as well as introducing a novel step that evaluates whether the inliers comply with the prior constraints.We evaluated the proposed method for different objects (cube, pyramid and double pyramid) and different noise levels. The point clouds of the objects were obtained using a Microsoft Kinect sensor and a Blensor camera simulator. The PCC method obtained accurate clustering results, even with high noise levels and a complex planar object (i.e., the double pyramid). We compared the performance of MC-RANSAC with the state-of-the-art clustering version of RANSAC, where the results showed that the proposed method performed better in most of the experiments. The constraint fitting experiments obtained better results in all cases. In the plane orientation experiments, the proposed method outperformed clustered RANSAC as the amount of noise or the number of planes in the model increased.The main weakness of the MME is the processing time required for the PCC step, which is very interesting and future research should include an analysis based on a parallel design of the method. Moreover, experiments with different sets of constraints could be studied in future research, such as using coloured faces in the clustering step to improve the plane estimation. In our future research, we also aim to evaluate the effect of the proposed method in registering markers reconstructed using MME and mapping based on knowledge related to the main planes in a scene (e.g., the walls and floor).