@&#MAIN-TITLE@&#
Parallel-machine scheduling with maintenance: Praising the assignment problem

@&#HIGHLIGHTS@&#
We consider a scheduling model with maintenance activities on unrelated parallel machines.The processing times are subject to a general positional-dependent effect.We present a general approach to solve this model using the assignment problems under several performance criteria.

@&#KEYPHRASES@&#
Parallel machines,Position-dependent processing,Time-dependent maintenance,Assignment problem,

@&#ABSTRACT@&#
We consider a general model for scheduling jobs on unrelated parallel-machines with maintenance interventions. The processing times are deteriorating with their position in the production sequence and the goal of the maintenance is to help to restore good processing conditions. The maintenance duration is depending on the time elapsed since the last maintenance intervention.Several performance criteria and different maintenance systems have been proposed in the literature, leading basically to assignment problems as the underlying model. We shall inverse the approach and start first to set up the matrix for the assignment problems, which catches all the information for the production-maintenance system. This can be done for very general processing times and maintenance durations.The solutions to the assignment problems are determined first. They define the order in which the jobs are to be processed on the various machines and only then the vital informations about the schedule are retrieved, like completion and maintenance times. It will be shown that these matrices are easily obtained, and this approach does not necessitate any complex calculations.

@&#INTRODUCTION@&#
We consider production systems with position-dependent processing times, where the processing of a job depends on its position in the schedule. Such deterioration effects in scheduling problems were introduced in Mosheiov (2001a, 2001b) and since then considered in Chang, Chen, and Mani (2009), Ji and Cheng (2009), Lai and Lee (2010), Rudek (2012), Rustogi and Strusevich (2012a), and Wang (2007).To counteract the effect of deteriorating, the machines may need maintenance for improving their production efficiency. Usually, the machines return to their initial ideal processing conditions after a maintenance activity. In the literature, it is often assumed that the maintenance duration is constant. Kubzin and Strusevich (2005) introduced a new model in which the length of the maintenance period depends on its starting time. This model has received increasing attention, see for example Kubzin and Strusevich (2006), Rustogi and Strusevich (2012a) and Hsu, Ji, Guo, and Yang (2013).Hsu, Cheng, and Yang (2011) studied the minimization of the total completion time TC with a fixed maintenance duration. They introduced a polynomial time algorithm whenever the number of machines is fixed. More recently Yang, Hsu, and Yang (2014) proposed a more efficient solution algorithm for this problem. The minimization of the total machine load TML, the total absolute differences in completion times TADC and the total absolute differences in waiting times TADW has been studied in several papers, see Cheng, Hsu, and Yang (2011), Wang, Wang, and Liu (2011), Wang and Wei (2011) and Hsu et al. (2013). All these problems can be solved optimally in polynomial time, and the standard solution approach uses a series of linear assignment problems.In this paper, we focus on unrelated parallel machine scheduling problems with simultaneous processing deterioration effects and maintenance activities on each machine. In many previous studies specific analytic functions are defined for the processing times. We shall instead assume arbitrary real-valued functions that just catch the deterioration effect. Then we emphasize the structure of the matrix for the assignment problems and the fact that their solutions define a permutation and is a sum-minimization. The matrices are containing implicitly all informations about the production-maintenance system and can be obtained without developing complicated formulas. The models from the literature are special cases of our general setting.In Section 2 we first consider unrelated parallel-machine systems without maintenance interventions. In Section 3 we rely on the novel concept of weighted maintenance activity from Finke, Gara-Ali, Espinouse, Jost, and Moncel (2013) and extend the results from Gara-Ali, Espinouse, and Finke (2014) where a single maintenance takes place on each machine. It will be shown that the corresponding matrices for the assignment problems are easily set up and the procedure is applicable to general processing times, to general weighted maintenance and to various performance criteria proposed in the literature. In this general setting, one obtains the same algorithmic complexities. For the case of the minimization of the total machine load TML, the complexity is improved in Section 3.3. Several extensions of the problem are given in Section 3.4.There are n jobs to be scheduled on m unrelated parallel machines Rm, where m is the number of machines. The processing time for job j (j=1,…,n) when scheduled in rank r (r=1,…,n) on machine l (l=1,…,m) is given by p(l, j, r). In Table 1 we list some positional processing times of learning and deteriorating effects from the literature.The functions for a given machine l from the literature include for instance the following: pjra(see Biskup, 1999; Mosheiov, 2001b, 2005) andpjσr−1(see Gordon, Potts, Strusevich, & Whitehead, 2008). Other functions mentioned are:pj+bjr(see Bachman & Janiak, 2004; Hsu et al., 2013; Yang & Yang, 2010b),pjraj(see Mosheiov & Sidney, 2003; Yang & Yang, 2010a, 2010b; Zhao & Tang, 2010),pjσjr−1(see Yang & Yang, 2013). In Rustogi and Strusevich (2012a), Rustogi and Strusevich (2012b) a more general form is given: pjg(r) and pjgj(r). These processing times are deteriorating if a, aj, bj> 0, σ, σj> 1 and g(r), gj(r) are nondecreasing functions in r, whereas we have a learning effect if a, aj, bj< 0, 0 < σ, σj< 1 and g(r), gj(r) are nonincreasing.In this article, we do not assume any particular analytical form, but rather require that in the given production system one can evaluate in constant time the processing times.Let us first concentrate on the classical linear assignment problem, which will be the main underlying model. We have an n × n table of cost values {cij}, and we want to solve the following linear programAP:min∑i=1n∑j=1ncijxijs.t.∑j=1nxij=1,∑i=1nxij=1,xij∈{0,1}The solution variablesxij=1assign to each row i exactly one columnj=π(i),which minimizes in the set of all possible permutations of the columns the sum∑i=1nciπ(i)The assignment problemAPcan be solved in O(n3) time (Dinic & Kronrod, 1969).Let us assume for our parallel-machine scheduling problem that the load (in number of jobs) is specified for the different machines, i.e., there are nljobs assigned to machine l, where nl(l=1,…,m) are non-negative integers satisfyingn1+n2+⋯+nm=n. We can now adapt the assignment problem to this triple-index case. Suppose an arbitrary function f(l, j, r) is given, no particular analytical form is required. We set up an n × n table of values {f(l, j, r)}, where the n rows correspond to the jobs and where the first n1 columns with entries f(1, j, r) (j=1,…,n) (r=1,…,n1) correspond to machine 1, the next n2 columns with entries f(2, j, r) correspond to machine 2, and so on to the last nmcolumns with entries f(m, j, r) for machine m. We get an n × n matrix Maas a sequence of n × nlsubmatrices Ml:(1)Ma=(M1,M2,…,Mm)Following the usual notation in scheduling theory, we write a permutation π, where π(j) denotes the column (rank in the sequence) selected for job j, in the formj=[r]. Then one can interpret the assignment problemAPin this case as follows.Observation 1Let a function f(l, j, r) be given. Consider the assignment problem based on the n × n matrixMa={f(l,j,r)}in (1). Any feasible solution selects for each row and each column exactly one entry, i.e., each job j is assigned to exactly one machine l in some rankr=[j](r=1,…,nl) and all machines l are filled by exactly one jobj=[r]in each rank r (r=1,…,nl). Let Jlbe the set of the nljobs selected for machine l. Then the optimal solution of this assignment problem minimizes in the set of all assignmentsj=[r]orr=[j]the sums(2)γ=∑l=1m∑j∈Jlf(l,j,[j])or,equivalently,γ=∑l=1m∑r=1nlf(l,[r],r)and can be obtained in O(n3) time (Dinic & Kronrod, 1969).Now consider given matrix elements f(l, j, r), which are expressed in terms of the actual processing times p(l, j, r) for a given production system. A solution of the assignment problem, based on the matrix {f(l, j, r)}, defines a column permutationr=[j]with jobs j ∈ Jlassigned to machine l, or the inverse permutationj=[r]for the jobs in rank r on machine l (r=1,…,nl). Let γlbe the performance criteria for the individual machines l, where we assume that γlis of the formγl=∑r=1nlf(l,[r],r). Then from Eq. (2) we can determine the optimal solution, using a single assignment problemAPbased on matrix Ma, for the criterion γ given as(3)γ=∑l=1mγlWe call such a criterion γ that is just the sum of the criteria γlfor the individual machines l, machine-decomposable.Let p(l, j, r) denote the given processing times. The criteria in the literature are in fact machine-decomposable. They are usually defined, for a given assignment, in terms of the completion times, denoted byC[r]lfor the completion time of jobj=[r]located in rank r of the sequence on machine l. Here is a list of the most popular objective functions and the corresponding entries f(l, j, r) to be used for the assignment problem in terms of the generic processing times p(l, j, r):(1)Total machine loadTML=∑l=1mCmaxl;f(l,j,r)=p(l,j,r).Total completion timeTC=∑l=1mTCl=∑l=1m∑r=1nlC[r]l;f(l,j,r)=(nl−r+1)p(l,j,r).Total waiting timeTW=∑l=1mTWl=∑l=1m∑r=1nlW[r]lwhereW[r]l=C[r]l−p(l,[r],r);f(l,j,r)=(nl−r)p(l,j,r).Total absolute difference in completion timesTADC=∑l=1mTADCl=∑l=1m∑s>r|C[r]l−C[s]l|;f(l,j,r)=(r−1)(nl−r+1)p(l,j,r).Total absolute difference in waiting timesTADW=∑l=1mTADWl=∑l=1m∑s>r|W[r]l−W[s]l|;f(l,j,r)=r(nl−r)p(l,j,r).There aren=5jobs to be scheduled onm=2machines. We assignn1=2jobs to machinel=1andn2=3to machinel=2. The criteria are TML and TC. The data are as followsFor machinel=1:p(1,j,r)=1,3,3,3,5forj=1,2andr=1,…,5p(1,3,r)=3,4,4,4,5andp(1,j,r)=2,2,5,5,5forj=4,5For machinel=2:p(2,j,r)=2,3,4,4,5forj=1,2,3andr=1,…,5p(2,j,r)=1,5,5,5,5forj=4,5(1)Machine load TMLWe have the following 5 × 5 matrixMa=(M1,M2):Ma=(1323413234342342215522155)The optimal permutation of the assignment problem isπ=(π(1),…,π(5))=(1,4,5,3,2),where π(j) denotes the position (column) of job (row) j in the permutation; the optimal value isV=1+3+4+1+2=11.The schedule is as follows:Machine 1: (job 1; rank 1; length 1—job 5; 2; 2).Cmax1=1+2=3.Machine 2: (job 4; rank 1; length 1—job 2; 2; 3—job 3; 3; 4).Cmax2=1+3+4=8.AlsoTML=Cmax1+Cmax2=3+8=11. The corresponding Gantt chart is shown in Fig. 1.Sum of completion times TC.In this case we have the following matrix Ma:Ma=(236642366464664423105423105)An optimal permutation is given byπ=(π(1),…,π(5))=(5,1,4,2,3)with valueV=4+2+6+2+3=17,and we obtain the optimal schedule:Machine 1: (job 2; rank 1; length 1—job 4; 2; 2).TC1=1+3=4.Machine 2: (job 5; rank 1; length 1—job 3; 2; 3—job 1; 3; 4).TC2=1+4+8=13.ThusTC=TC1+TC2=17.The corresponding Gantt chart is shown in Fig. 2.So far, we have a fixed allocation of nljobs on machine l(n1+n2+⋯+nm=n). The corresponding unrelated parallel-machine scheduling problem, denoted Rm|p(l, j, r), nl|γ if the number m of machines is a constant or R|p(l, j, r), nl|γ for variable m (i.e., m is part of the input), for any criterion γ ∈ {TML, TC, TW, TADC, TADW} can be solved as an n × n assignment problem in O(n3) time.The total number of partitionings into non-negative integers nl(l=1,…,m) summing up to n is given by the binomial coefficientC(n+m−1,m−1),see Mott, Kandel, and Baker (1986). We can assume that there are fewer machines than there are jobs (m ≤ n). Thus we get the order of magnitudeC(n+m−1,m−1)≤(n+m−1)m−1(m−1)!≤(2n)m−1(m−1)!≤O(nm−1).The last inequality follows since2m−1(m−1)!≤2for all m ≥ 1. HenceO(nm−1)assignment problems have to be solved to get the optimal solution to the scheduling problem R|p(l, j, r)|γ and the overall complexity isO(nm+2).Theorem 1The unrelated parallel-machine scheduling problemsR|p(l,j,r)|γwithγ∈{TML,TC,TW,TADC,TADW}can be solved inO(nm+2)time, where n is the number of jobs and m is the number of machines.In particular one obtains a polynomial running time inO(nm+2)for the problemsRm|p(l,j,r)|γwithγ∈{TML,TC,TW,TADC,TADW}.Notice that no particular analytical form of the processing times p(l, j, r) is required and no monotonicity properties (deterioration or learning) are imposed.In Mosheiov and Sidney (2003) the uniform parallel-machine problem of the special formQm|p(j,r)=pjraj|TCis solved with complexityO((2n)m+3m!),which reduces toO(nm+3),see also Mosheiov (2001a).Remark 1Theorem 1 is formulated for the most common criteria γ, but applies in fact to many other cases. One only requires to have matrix entries f(l, j, r) in terms of processing times p(l, j, r) and an objective function γ in terms of f(l, j, r) that is machine decomposable. For instance one may take linear combinations of our five standard criteria. One may also vary the criteria γland take different criteria for the machines l.The simplest criterion is TML where the complexity can be improved substantially, if we assume that the positional processing times p(l, j, r) are deteriorating with the rank on each machine, i.e.,(4)p(l,j,1)≤p(l,j,2)≤…≤p(l,j,n)foralllandj.A direct solution approach is to model the problem as assignment problem of size (mn) × (mn). Here the first n rows belong to the given jobs with processing times p(l, j, r), where job i is candidate to be placed in any of the n positions on any of the m machines. The remaining(m−1)nrows are fictitious jobs with processing times equal to zero. Now consider an optimal solution of this assignment problem and drop all fictitious jobs. Notice that fictitious jobs are the last jobs on each machine (or can be shifted to these positions if there are real jobs of zero length). We get the complexity O(m3n3).Another possibility is to use the so-called rectangular assignment problemRAPwith n ≤ q:min∑i=1n∑j=1qcijxijs.t.∑j=1nxij=1,∑i=1qxij≤1,xij∈{0,1}Here the solution variablesxij=1assign to each row i exactly one column j, but only n of the q columns are selected and the remainingq−ncolumns are empty.As pointed out in Finke et al. (2013), there are two different algorithms to solve rectangular assignment problems. The approach from Burkard, Dell’Amico, and Martello (2009) has complexity O(qn2) and the second method from Dinic (1976) and Milo et al. (2013) has complexityO(n3+nq),which is more efficient.We use a rectangular assignment problemRAPof size n × (mn), consisting only of the real jobs, to solve problem R|p(l, j, r)|TML. We get the complexityO(n3+n(mn))orO(n3+mn2). In this model each job (row) is assigned to exactly one position (column) and in each of the mn columns at most one job is located. Again, the jobs are selected in adjacent ranks in an optimal solution, starting with rankr=1,on each machine because of the deteriorating property of processing times (4) that we have imposed, or the jobs can be shifted to such positions without losing the optimality since the entries satisfyp(l,j,r+1)−p(l,j,r)≥0.Hence we get the following result.Theorem 2The unrelated parallel-machine scheduling problemR|p(l,j,r)|TMLcan be solved inO(n3+mn2)time.Therefore, problem R|p(l, j, r)|TML is solvable in polynomial time. The complexity reduces to O(n3) if m is constant, see also Mosheiov (2012).In an environment with positional processing times and maintenance it is assumed that the processing times p(l, j, r) are deteriorating with the rank on each machine (4).Maintenance periods are inserted from time to time to return to good processing conditions.We follow Finke et al. (2013) and define a very general maintenance systemM,where the duration of maintenance periods is weighted by factors w(l, j, r). Also these factors are nondecreasing with the ranks for all jobs and machines, i.e.,(5)w(l,j,1)≤w(l,j,2)≤…≤w(l,j,n)foralllandjThe idea is the following. We combine the jobs processed between maintenance periodsi−1and i (called the set Griof jobs in group i; Gr1 combines the jobs since the start time 0 to the first maintenance period) with the subsequent maintenance period i. Whenever job j is processed in rank r on machine l within Grithe subsequent maintenance period i requires the time w(l, j, r)p(l, j, r) to restore the initial processing condition for job j, in addition to some constant timeβilfor period i. Then the duration of maintenance period i for a given sequence on machine l is equal to(6)MTil=∑j∈Griw(l,j,[j])p(l,j,[j])+βilwherer=[j]is the rank of job j on machine l. The systemMcontains all classical maintenance systems by settingw(l,j,r)=αi(group and time dependent maintenance, Rustogi & Strusevich, 2012b),w(l,j,r)=α(time dependent maintenance, Kubzin & Strusevich, 2005) andw(l,j,r)=0(constant maintenance times, Yang, Cheng, Yang, & Hsu, 2012).So far we have an n × n matrix Mawritten in the formMa=(M1,M2,…,Mm)in (1), where the n × nlsubmatrix Mlis corresponding to machine l (l=1,…,mandn1+n2+⋯+nm=n). Suppose that a total of k maintenance interventions are planned on the machines and let us allocate klmaintenance periods to machine l (k1+k2+⋯+km=k).We single out a particular machine l with its matrix Mland write this matrix as a sequence of matrices belonging to the groups of jobsGrilon l between maintenance periodsi−1and i (Gr1lare the jobs from the start time 0 to the first maintenance). Let the numbersuilof jobs in these groups be given (u1l+u2l+⋯+ukll+ukl+1l=nl). Here we imagine that at the beginning the machine is well maintained. The first maintenance occurs afteru1ljobs have been processed, the second maintenance period follows after the nextu2ljobs, and so on until the last period klafteru1l+u2l+⋯+uklljobs have been processed (there is no maintenance at the end of the schedule on machine l).Hence one has submatricesMilof sizen×uilbelonging to groupsGrilon machine l:(7)Ml=(M1l,M2l,…,Mkl+1l)Let us define the groupsGrilof sizeuilaccording to their ranks r on machine l (and hence for a given sequence with the corresponding jobs [r]):(8)r∈Grilif∑t=0i−1utl+1≤r≤∑t=0iutlwherei=1,…,kl+1(settingu0l=0).Now all submatrices are set up in terms of their sizes. The complete n × n matrix Mais defined if we determine the entries of all matricesMil.We know already that one regains after a maintenance period the ideal processing conditions (given by the lower-rank processing times). Hence the processing times are(9)p(l,j,s)forr∈Grilwiths=r−∑t=0i−1utlAs imposed the rank s runs from 1 touilwith increasingr∈Gril.Let a weighted maintenance systemMkwith k maintenance interventions be given, where klmaintenance periods are performed on l. Let ulbe the vector of group lengths for the klmaintenance periods on machine l (u1l+u2l+⋯+ukll+ukl+1l=nl). Denote the maintenance weights by w(l, j, r) and the constant times inGrilbyβil. If γ is the given criterion, we call the corresponding unrelated parallel machine scheduling problem with k maintenance periods(10)R|p(l,j,r),M,(nl,kl,ul)|γWe use the attributes Rm andMkinstead of R andMif m and k are constants. Let us go now through the different criteria γ ∈ {TML, TC, TW, TADC, TADW} and define the corresponding submatricesMil.(Criterion TML)This is the simplest criterion and later a more efficient solution method is given. We can easily incorporate the maintenance times by augmenting the processing times p(l, j, s) of job j by the maintenance time for this job w(l, j, s)p(l, j, s), required in the following maintenance period. Thus the entries of matricesMilare independent of the ranksr∈Griland are as follows (remember that there is no maintenance at the end of the schedule)Mil={(1+w(l,j,s))p(l,j,s)},j=1,…,nands=1,…,uilandi=1,…,klMkl+1l={p(l,j,s)},j=1,…,nands=1,…,ukl+1l(Criterion TC)This criterion and also the other criteria are given in terms of job completion times. We know that all completion times of jobs on machine l, following the first maintenance period, should be augmented by the duration of the first maintenance, then completion times of jobs after the second maintenance should in addition also be augmented by the duration of the second maintenance, and so on. Therefore one gets for each groupGrilthe multiplicity factor for the terms w(l, j, s)p(l, j, s) to be added to the matrix entries:(11)λil=∑t=i+1kl+1utlfori=1,…,klandλkl+1l=0Hence the matricesMilhave the elements(12){(nl−r+1+λilw(l,j,s))p(l,j,s)},j=1,…,nands=1,…,uilwherer∈Grilandr=s+∑t=0i−1utl(Criterion TW)The coefficients in (11) apply also to this case and we getMilwith elements(13){(nl−r+λilw(l,j,s))p(l,j,s)},j=1,…,nands=1,…,uil(Criterion TADC)The multiplicity factorsλilfor this case are obtained as follows. The absolute difference in completion times will augment by the first maintenance time if a job inGr1lis combined with a job in groupsGr2l,Gr3l,….In addition, the difference augments also by the second maintenance time if combined with jobs inGr3l,Gr4l,…,and so on. Similarly, one gets the augmentation if a job inGrilis combined with jobs in groupsGri+1l,Gri+2l,….Altogether we obtain the factors(14)λil=(∑t=1iutl)(∑t=i+1kl+1utl)fori=1,…,kl,andλkl+1l=0and the matricesMiltake the form(15){((r−1)(nl−r+1)+λilw(l,j,s))p(l,j,s)},j=1,…,nands=1,…,uil(Criterion TADW)We have the same factorsλilfrom (14). Thus we obtain the matrices(16){(r(nl−r)+λilw(l,j,s))p(l,j,s)},j=1,…,nands=1,…,uilWe may also define for the criterion TML multiplicity factorsλil=1fori=1,…,klandλkl+1l=0and all matricesMilhave the form{(1+λilw(l,j,s))p(l,j,s)}Observe that Mais easily set up. No particular computations are required and no explicit expressions for completion times are necessary.Theorem 3The unrelated parallel-machine scheduling problemsR|p(l,j,r),M,(nl,kl,ul)|γwithγ∈{TML,TC,TW,TADC,TADW}can be solved as n × n assignment problems byAlgorithm 1in O(n3) time.By adding the termsλilw(l,j,s)p(l,j,s)to the matrix entries we make sure that, whenever this entry is selected in the solution, the maintenance time required for the corresponding part is included. This is done with the correct multipliersλilto get the same total sum in (2) as for the scheduling problem (apart from the maintenance constant∑l=1m∑i=1klλilβil).□There aren=10jobs to be scheduled onm=2machines withk=3maintenance periods. We assignn1=4jobs to machinel=1andn2=6to machinel=2. We assume to havek1=1maintenance on machine 1 andk2=2on machine 2. The group sizes areu11=u21=2andu12=u22=u32=2.The criterion is TC. The data are as follows: For all jobs j:p(1,j,r)=1,2,3,3,3,3,3,3,3,3andp(2,j,r)=2,3,4,4,4,4,4,4,4,4.The maintenance weights arew(1,j,r)=0.2for all j and r;w(2,j,r)=0.1for all r andj=1,2,3,4,5,6;w(2,j,r)=0.3for all r andj=7,8,9,10. The constant maintenance times areβ11=1,β12=2andβ22=3.Consider the job order 1, 2, 3, 4 on machine 1 and the order 5, 6, 7, 8, 9, 10 on machine 2. Then the corresponding solution is the sum of the diagonal elements of the assignment matrix Ma:V=4.4+6.8+2+2+12.8+16.2+9.2+10.8+4+3=71.2. The constant term of the maintenance is∑l=1m∑i=1klλilβil=16,whereλ11=2,λ12=4andλ22=2,see (11). The schedule is as follows:Machine 1: (job 1; length 1—job 2; 2–1.6 unit maintenance—job 3; 1—job 4; 2). Completion timesTC1=∑r=1n1C[r]1=1+3+5.6+7.6=17.2Machine 2: (job 5; length 2—job 6; 3–2.5 unit maintenance—job 7; 2—job 8; 3–4.5 unit maintenance—job 9; 2—job 10; 3). Completion timesTC2=∑r=1n2C[r]2=2+5+9.5+12.5+19+22=70.The corresponding Gantt chart is shown in Fig. 3. HenceTC=∑l=1mTCl=∑l=1m∑r=1nlC[r]l=87.2=V+∑l=1m∑i=1klλilβilTo find the overall optimal solution for problemsR|p(l,j,r),M|γwould require solutions to a huge number of assignment problems. There are first of allO(nm−1)combinations to allocate n jobs to the m machines (n1+n2+⋯+nm=n).Then one has to split the k maintenance interventions for the m machines (k1+k2+…+km=k). Again, we may assume that k ≤ n. However, the number of maintenance periods k is in general not related to the number m of machines. Thus we get the order of magnitude for the number of splittingsC(k+m−1,m−1)≤(k+m−1)m−1(m−1)!≤[2max{k,m}]m−1(m−1)!≤O([max{k,m}]m−1).Finally, there areO(nlkl)possible ways on machine l to set up the lengths of groupsGril,i.e., counting the number of vectors ul(u1l+u2l+⋯+ukl+1l=nl). This results inΠl=1mO(nlkl)≤O(n∑l=1mkl)=O(nk)combinations for all m machines.Then there are altogetherO([max{k,m}]m−1nm+k−1)assignment problems that should be solved.Theorem 4The unrelated parallel-machine scheduling problems with maintenanceR|p(l,j,r),M|γwithγ∈{TML,TC,TW,TADC,TADW}can be solved inO([max{k,m}]m−1nm+k+2)time, where n, m and k are the numbers of jobs, machines and maintenances, respectively.If both m and k are constant, i.e., for problemRm|p(l,j,r),Mk|γ,one gets the polynomial complexityO(nm+k+2).There is the following special case. We assume that there arek=mmaintenance periods, exactly one maintenance on each machine. Then we get the complexityO(n2m+2). This result was obtained in Gara-Ali et al. (2014) for all five criteria γ and in Hsu et al. (2013) in a restricted form. There the processing functions are given asp(l,j,r)=p(l,j)ra(l,j). Only the criteria TML and TC are considered and the maintenance system isw(l,j,r)=αandβil=β.Remark 2One can also extend Theorem 4 to more general functions γ, as in Remark 1. The multiplicity factors λγare known for each of the standard criteria γ. Hence it is easy to set up matrix Mafor linear combinations of the five standard criteria, and one may eventually vary the criterion for the different machines.The complexity for the criterion TML can again be improved by using the rectangular assignment problem. We eliminate the numbers nland the vector uland extend each groupGrilto all n potential positions for the n jobs.It remain theO([max{k,m}]m−1)partitionings into all possible klmaintenance periods on machine l (k1+k2+⋯+km=k). One obtains submatricesMilfor groupGrilin (7) of size n × n for all i with elementsMil={(1+w(l,j,s))p(l,j,s)},j=1,…,nands=1,…,nandi=1,…,klMkl+1l={p(l,j,s)},j=1,…,nands=1,…,nThe new matrix Mahas the sizen×(n∑l=1m(kl+1))orn×n(k+m). Now let the rectangular assignment algorithm for the matrix Mafill optimally the positions. We do not know in advance how many jobs will be assigned to groupGril. But the jobs are selected in adjacent ranks, starting with rankr=1because of the deteriorating property of processing times (4) and weights (5) that we have imposed, or the jobs can be shifted to such positions without losing the optimality. In fact for the entries ofMkl+1lwe havep(l,j,s+1)−p(l,j,s)≥0.In all otherMilwe get(1+w(l,j,s+1))p(l,j,s+1)−(1+w(l,j,s))p(l,j,s)≥0.According to Dinic (1976) and Milo et al. (2013), the complexity isO(n3+n2(k+m))for each of theO([max{k,m}]m−1)rectangular assignment problems that are to be solved.The solutions to the rectangular assignment problemsRAPare to be translated into feasible schedules. The processing times p(l, j, r) and weights w(l, j, r) are machine dependent, but the maintenance constantsβilare also group dependent. The formalism of rectangular assignment problems can only keep track of the variable part of the maintenance. Now let k be given with klmaintenance periods on machine l. If all klgroupsGrilare non-empty, the total maintenance constant on machine l is given by∑i=1klβil. If there are empty groupsGril,we drop them (saving the timeβil)and shift all non-empty groups to the left, which maintains the optimality of the correspondingRAP. This means that we get a schedule of equal or even better quality for a smaller number of maintenance periods than kl.Therefore, for a given k, we solve allRAPinO([max{k,m}]m−1(n3+n2(k+m)))time and retain the best schedule, where we omit all solutions that contain empty groups.We have assumed that k, m ≤ n; k runs from 1 to n. We have for each k the complexity boundO(nm+2). Thus we obtain the following result.Theorem 5Consider an unrelated parallel-machine scheduling problemR|p(l,j,r),M|TMLwhere we want to find the best number k of maintenance interventions. This problem can be solved by a series of rectangular assignment problems inO(nm+3)time.A simple subcase concerns the pure variable maintenance, where allβil=0. One can attribute all k maintenance periods to each of the m machines. Then a maintenance period has length 0 if it follows directly some other maintenance. The actual number of maintenance periods on machine l can always be augmented to k by adding zero-length maintenance periods. Hence we have to solve for each k a single rectangular assignment problem of size n × (mkn) inO(n3+n2mk)using Dinic (1976) and Milo et al. (2013). The number k of non-zero maintenance periods can be limited to k ≤ n. Therefore, we setk=nand solve a single rectangular assignment problem in O(mn3). Then we drop all zero-length maintenance periods and obtain the optimal number of non-zero maintenance interventions.Corollary 1Consider an unrelated parallel-machine scheduling problem with pure variable maintenanceR|p(l,j,r),M,βil=0|TMLwhere we want to find the best number k of maintenance interventions. This problem can be modeled as a single rectangular assignment problem and solved in O(mn3) time.We have assumed deteriorating processing times (4) and weights (5). These properties were formally only used in Sections 2.2 and 3.3. Since in all other cases the size of the submatrices are imposed, the assignment algorithm will fill all positions optimally, independent of conditions on deterioration. Therefore, one may delete conditions (4) and (5). For instance, the processing times may first improve in the lower ranks and only later on deteriorate.Finally we give a last extension of the production-maintenance system. Without any complication, one can vary for each groupGrilprocessing times and weights to p(i)(l, j, r) and w(i)(l, j, r). In fact, it was nowhere imposed to have the same functions in each group i. This generalizes the idea in Rustogi and Strusevich (2012a), Rustogi and Strusevich (2012b) of group dependent deterioration (the maintenance is not fully returning the system to the initial ideal processing conditions). However our setting is more general since no particular correlation of p(i)(l, j, r) and w(i)(l, j, r) between different groups is imposed. One may just have another processing-maintenance environment, for instance different maintenance crews and different production operators. Hence Theorem 4 remains valid for this extension. The same polynomial complexityO(nm+k+2),m and k constant, is given in Rustogi and Strusevich (2012a) for the criterion TC.Solving large numbers of assignment problems is the worst situation where one just enumerates all possible combinations. In practice, one has an interest to limit this number by imposing some regularity, for instance one may have only a certain restricted number of jobs before the next maintenance should take place.However, the complexity O(n3) of solving a full assignment problem can be replaced with the complexity O(n log n) of sorting if processing times are decomposable, i.e., they are of the formp(l,j,r)=pjg(l,r),and weights satisfyw(l,j,r)=w(l,r),compare with Rustogi and Strusevich (2012a), see also Gara-Ali et al. (2014).We want to point out again the ease at which the n × n matrices Mafor the assignment problems are set up. As demonstrated, this is valid for a large variety of performance criteria and very general maintenance systems.

@&#CONCLUSIONS@&#
