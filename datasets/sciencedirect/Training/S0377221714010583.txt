@&#MAIN-TITLE@&#
Dynamic portfolio optimization with transaction costs and state-dependent drift

@&#HIGHLIGHTS@&#
Present a method for portfolio under state-dependent drift and transaction costs.Obtain optimal strategies for 40-year horizons with O(N2.5) time-complexity.Less risk-averse investors and naive investors incur the most losses in utility.Less trading generally leads to half of the total loss from transaction cost.Learning generally reduces losses due to the uncertain drift and transaction costs.

@&#KEYPHRASES@&#
Dynamic programming,Numerical methods,State-dependent drift,Transaction costs,Markov Chain approximation,

@&#ABSTRACT@&#
The problem of dynamic portfolio choice with transaction costs is often addressed by constructing a Markov Chain approximation of the continuous time price processes. Using this approximation, we present an efficient numerical method to determine optimal portfolio strategies under time- and state-dependent drift and proportional transaction costs. This scenario arises when investors have behavioral biases or the actual drift is unknown and needs to be estimated. Our numerical method solves dynamic optimal portfolio problems with an exponential utility function for time-horizons of up to 40 years. It is applied to measure the value of information and the loss from transaction costs using the indifference principle.

@&#INTRODUCTION@&#
Numerical methods for dynamic portfolio optimization under proportional transaction costs typically assume that the drift of the risky asset is constant. However, a state-dependent drift enters the optimization problem in many scenarios. For instance, if the drift is unobservable, it can be estimated with the Kalman–Bucy filter. This leads to an optimization problem where the drift depends on the currently observed stock price (e.g. Björk, Davis, and Landén, 2010). The drift is also state-dependent when contrarian investors optimize portfolios under the assumption that prices are mean-reverting; for instance when an investor is a victim of the Gambler’s fallacy, see, e.g., Shefrin (2008). Similarly, investors who aim at following market trends will include a state-dependent drift in optimization.In these cases an investor’s optimal trading strategy strongly depends on the forecasting function used to predict asset prices. This poses a numerically demanding problem. Our paper proposes an efficient numerical method to solve finite-horizon portfolio optimization problems with transaction costs and state-dependent drift. The method has time-complexity of O(N2.5), where N is the number of time steps in the discrete approximation of the investment interval. In contrast, a discrete-time dynamic programming algorithm (see (8) in Section 3) that directly solves the problem has time-complexity O(N5). Our method allows us, for instance, to study 40-year investment horizons with time steps of 4-day length on a basic laptop computer.There are several numerical methods for solving the optimization problem with a constant drift under transaction costs. Davis, Panas, and Zariphopoulou (1993) proposes a backward recursive method which has seen a number of improvements in the past 20 years. For instance, Monoyios (2004) provides an approximation to the optimal decision in the final period which allows searching over a smaller range of stock holdings. Zakamouline (2005) proposes bounds on stock holdings. Another method is to solve the Hamilton–Jacobi–Bellman (HJB) equations of optimization problems by finite differences (e.g. Herzog, Kunisch, and Sass, 2013) or to use a genetic programming algorithm to derive approximations of trading strategies (Lensberg and Schenk-Hoppé, 2013). These algorithms work well for short time-horizons, typically less than 1 year, and when the number of periods is small. By proposing a method that works for non-constant drift and long time-horizons, our paper fills this gap in the literature.The main challenges arising from a state-dependent drift are that the search for the optimal strategy has to be carried out for all nodes of a binomial tree, and that the state-dependent strategy results in a larger range of stock holdings. This increases the likelihood of over- and underflow arising for the exponential utility function as pointed out by Clewlow and Hodges (1997). For a constant drift, in contrast, the optimal strategy is independent of stock prices at time t. One only needs to search for the optimal strategy at a node at time t, see Monoyios (2004, p. 902).To overcome the challenges, we develop a fast numerical method to approximate the optimal solution well. The approach combines four aspects: (a) reducing dimensionality, (b) scaling the objective function, (c) carrying out local searches for optimal trading decisions, and (d) non-equidistant discretization of the state space.We apply the numerical method to a study of the true costs of market frictions using the indifference principle. The analysis reaps the full benefit of the approach because measuring these costs requires taking averages over many realizations of the drift. For each realization, one has to calculate trading strategies and carry out Monte Carlo simulations. In general, a state-dependent drift is observed to make the strategy more variable than a constant drift. This, in turn, entails more aggressive trading.The indifference principle yields the following results.First, the value of information is measured by comparing realized utilities of different types of investors. We find that information is most valuable to the least risk-averse investor. It also turns out that cautious trend-followers do almost as well as investors who estimate the drift from observations.Second, the utility loss due to transaction costs is measured as the maximum amount of money an investor is willing to pay up front to avoid transaction costs. The loss is observed to be about twice as large as the direct expense incurred. Transaction costs are most detrimental to naive investors (who do not revise their initial estimates of the drift) when investing over a medium or long time horizon. It implies that in the long run naive investors are the most active traders and usually hold wrong beliefs. At short time-horizons, transaction costs strongly affect the learning investor as his estimate of the drift varies drastically in the short run.Third, we examine the impact of the investment time horizon. The main finding is that, although uncertainty about the true drift cannot be removed completely, learning about the drift reduces the loss in utility due to the uncertain drift by 33 percent in 1 year and by 80 percent in 10 years compared to a naive investor. Learning also reduces the loss in utility caused by transaction costs by 50 percent over a 10-year time-horizon.Section 2 presents the model. The numerical method is explained in Section 3 and applied in Section 4 to quantify the economic costs under various assumptions on the state-dependent drift. Section 5 concludes.We consider an investor who maximizes utility from wealth by trading in a risk-free bond with a constant interest rate r, and a risky stock. The randomness of the stock price is modelled on a probability space(Ω,F,P)which supports a one-dimensional Brownian motion (W(t)) and an independent random variable m whose role will be explained later. The investor assumes that the dynamics of the stock price S(t) is given by(1)dS(t)=μ(t,S(t))S(t)dt+σS(t)dW(t),S(0)=S0with a constant volatility σ > 0. The function μ(t, S) is a time- and state-dependent drift of the stock price.We consider a situation in which the true dynamics of the stock price is unknown: The actual drift is a random variable m which is determined at the initial time and fixed over the horizon (recall that it is independent of the Brownian motion (W(t))). Hence the true price dynamics is(2)dS(t)=mS(t)dt+σS(t)dW(t).The drift m is not observed by investors with an exception of an informed investor (a benchmark) who additionally knows the drift m. If the structure of the price dynamics is known, one can use observed stock prices to estimate m. Assume throughout the paper that m is normally distributed with mean μ0 and variance γ0 > 0:m∼N(μ0,γ0).Then the Kalman–Bucy filter gives that the best estimate of m given an observation of the stock price trajectory up to time t is(3)μL(t,S(t))=γ0σ2σ2+γ0t(μ0γ0+t2+1σ2log(S(t)/S0)).This estimate takes the form μ(t, S(t)), and hence entails a dynamics as defined in (1).Investors who are not aware of the characteristics of the random variable m and/or the dynamics (2) make suboptimal decisions. We consider two types of such investors. The first one is a naive investor who assumes that the dynamics is given by (2) with m = μ0, i.e., μ(t, S(t)) = μ0 in (1). The second type of investor suffers from a behavioral bias and estimates the drift as:(4)μa(t,S(t))=μ0+aarctan((μ0−σ2/2)t−log(S(t)/S0)).The second item of (4) characterizes the investor’s adjustment to his initial estimate μ0. The arctangent function is a symmetric about the origin and increasing function taking values within ( − π/2, π/2) on the domain ( − ∞, +∞), see, e.g. Luderer, Nollau, and Vetters (2010, p. 55). The adjustment vanishes when the logarithmic return R(t) ≔ log (S(t)/S0) equals (μ0 − σ2/2) t which was the expected valueE[R(t)]if the drift of the stock price was a known constant μ0. In this case, it is known that, see, e.g. Øksendal (2003, p. 64)R(t):=log(S(t)/S0)=(μ0−σ2/2)t+σW(t).We refer to the parameter ‘a’ as the investor’s sentiment. It measures the investor’s confidence in his initial estimate μ0. If the parameter a is positive then the investor believes that the price will revert to the predicted mean: A higher than predicted return is forecast to lead to a drift smaller than μ0. The investor’s decision is contrarian. It can be interpreted as the result of overconfidence about the ability to predict the stock price dynamics. If the parameter a is negative, the investor will revise the initial estimate upwards if the returns are higher than predicted (resp. downwards if returns are lower than μ0). The investor is a trend follower; he places more trust in the market’s view about stock price dynamics than in his own view.Definition 2.1Informed investors observe the realization of the random drift m at the initial time.Learning investors use (3) to estimate the realization of the random drift m.Naive investors assume that the drift is constant m = μ0.Biased investors use (4) as their estimate of the drift.Trading in the stock incurs proportional transaction costs with the rate λ ∈ [0, 1). Purchasing y shares costs y(1 + λ)S(t) at time t while selling y shares brings in y(1 − λ)S(t). It is customary (e.g. Davis et al., 1993) to describe an investor’s trading strategy with two non-decreasing right-continuous processes L(t) and M(t) representing, respectively, the cumulative number of shares bought and sold over [0, t]. The dynamics of portfolio positions (x(t), y(t)), where x(t) is the value of bonds held and y(t) is the number of shares, isdx(t)=rx(t)dt−(1+λ)S(t)dL(t)+(1−λ)S(t)dM(t),dy(t)=dL(t)−dM(t).Given an initial position (x0, y0), the investor maximizes the expected utility of the terminal wealth by following a trading strategy (L(t), M(t)):max(L,M)E{U(x(T)+y(T)S(T))}.We impose two standard assumptions: there are no liquidation costs of the portfolio at the terminal time T and the investor has a utility function with a constant absolute risk aversion (CARA) coefficient α:(5)U(w)=−exp(−αw).In the cases of an informed investor or a naive investor, this utility maximization problem is classical. For learning investors one can show that it is optimal to estimate the true drift using (3) and to solve the optimization problem under the stock price dynamics given by (1) withμ(t,S(t))=μL(t,S(t)).11The justification is based on the separation principle (Fleming and Rishel, 1975, Theorem 11.2) and a Kalman–Bucy filter (Øksendal, 2003, chp. 6). The original optimization problem is equivalent to the one with the drift replaced by its filtering estimate (3).Biased investors’ optimization problem mimics behavioral decision making.Stochastic differential equations with drift of the form (3) or (4) do not satisfy the standard conditions for existence and uniqueness of solution. We therefore provide a result that establishes existence of a unique solution.Lemma 2.2Assume thatμ:[0,T]×(0,∞)→Ris a continuous function that satisfies a logarithmic growth condition|μ(u,S)|≤M(1+|log(S)|),S>0,u∈[0,T],and a logarithmic Lipschitz condition|μ(u,S1)−μ(u,S2)|≤M|log(S1)−log(S2)|,S1,S2>0,u∈[0,T]for some constant M > 0. Then there is a unique strong solution to the stochastic differential equation (1) for every initial condition S > 0.Øksendal (2003, Theorem 5.2.1) implies that under the assumptions of the lemma there is a unique strong solution to the stochastic differential equation(6)dZ(u)=(μ(u,eZ(u))−σ22)du+σdW(u),Z(t)=0.By Itô’s formula the process S(u) = S(t)eZ(u) − Z(t), u ≥ t, satisfies (1), i.e., it is a strong solution to this equation. To prove uniqueness, assume that there is another strong solution to (1), denoted byS¯(u),u ≥ t, withS¯(t)=S(t)andS¯(u)≠S(u)for u > t. DefineZ¯(u)=log(S¯(u)/S¯(t)). Again, by Itô’s formulaZ¯(u)satisfies (6) and is different from Z(u). This contradicts the uniqueness of the solution to (6).□Let us verify that the drifts of the forms (3) and (4) satisfy assumptions of the above lemma. We have|μL(u,S1)−μL(u,S2)|≤γ0σ2|log(S1)−log(S2)|,and|μL(u,S)|≤supt≥0|μL(t,S)|≤supt≥0{γ0σ2σ2+γ0t(μ0γ0+t2+1σ2|log(S0)|)}+supt≥0{γ0σ2σ2+γ0t1σ2log(S)}≤γ0σ2|log(S0)|+σ22+μ0+γ0σ2|log(S)|.For a biased investor, we obtain|μa(u,S)|≤μ0+|a|π2,and|μa(u,S1)−μa(u,S2)|≤|a|supx∈(−∞,∞)|arctan′(x)||log(S1)−log(S2)|≤|a||log(S1)−log(S2)|.Denote by V(t, s, x, y) the value function corresponding to the utility optimization problem. This is the highest expected utility achievable by an investor whose portfolio at time t consisting of x value of bond and y shares of the stock priced at S(t) = s:V(t,s,x,y)=sup(L(u),M(u))u≥tE{U(x(T)+y(T)S(T))∣(S(t),x(t),y(t))=(s,x,y)}.In the simplest case when the drift functionμ(t,s)≡μ¯(a constant), the value function is characterized as a unique viscosity solution of an HJB equation Davis et al. (1993):22This result requires a restriction of the set of available trading strategies (L(t), M(t)): the liquidation value at any time must be greater than or equal to a fixed constant.(7)max{Vt+rxVx+μ¯sVs+σ22s2Vss;Vy−(1+λ)sVx;−Vy+(1−λ)sVx}=0with the terminal condition V(T, s, x, y) = U(x + ys) (subscripts in (7) denote partial derivatives). Solving this equation is usually carried out using numerical approximation. For general drift functions, an HJB representation is not known. We therefore take a different route to study optimal investment when the drift function is time- and state-dependent. In this paper, approximations are designed for the stochastic control problem itself.We apply Bellman’s dynamic programming principle to solve the control problem with state-dependent drift. The stock price model is discretized in time and space, and the programming works recursively backwards in time.Let time be discretized in steps of length Δt with Δt = T/N where N is the number of time steps. At each time-point the investor has to choose whether to trade and, if yes, how many units of stock to trade. The bond holdings are determined by the self-financing condition. The expected utility derived from each possible trading choice is determined by the value function. To select the trading decision that maximizes expected utility, the investor solves the maximization problem:(8)V(t,s,x,y)=max{E(V(t+Δt,S(t+Δt),erΔtx,y)|S(t)=s)︸benefitfromnottrading,Δy=0,maxΔy>0E(V(t+Δt,S(t+Δt),erΔt(x−Δy×s(1+λ)),y+Δy)|S(t)=s)︸benefitfrombuyingΔy>0shares,maxΔy>0E(V(t+Δt,S(t+Δt),erΔt(x+Δy×s(1−λ)),y−Δy)|S(t)=s)︸benefitfromsellingΔy>0shares}where the maximization is over the type of trade and the corresponding volume to be traded.One might conjecture that the spatial discretization of the stock price process is complicated when its drift is state-dependent. However, one can use a standard binomial tree approximation of Cox, Ross, and Rubinstein (1979) and define adjusted probabilities for the up- and down-movement of the discretized stock price. This Markov Chain approximation is provided in, e.g., Kushner and Dupuis (1992) and Zakamouline (2005). The benefit of this representation is that the stock-price model retains the property of being a recombining tree. Specifically, we use the following binomial model. Define the coefficientsu=1/d=eσΔt,and set the processS(t+Δt)={uS(t)withprobabilityp(t,S(t))=[eμ(t,S(t))Δt−d]/[u−d],dS(t)withprobability1−p(t,S(t)).A natural discretization of the state space of money and stock holdings is given by the set Mx× MywithMx={xj:xj=x̲+jδx≤x¯,j∈N}andMy={yk:yk=y̲+kδy≤y¯,k∈N}with givenx,x¯,y, andy¯,where δx (resp. δy) is the grid spacing in the dimension of money (resp. stock holdings).A direct algorithm for determining the value function and the optimal trading strategy proceeds as follows.Define the value function at the terminal time as the realized utility. Set V(T, s, xj, yk) ≔ U(xj+ yks) for all values s of the discretized stock prices in period T and all portfolio holdings (xj, yk) ∈ Mx× My.For t = T − Δt, …, 0For all values of the discretized stock price s = S(t) at time tFor all values (xj, yk) ∈ Mx× MyGiven the functions V(t + Δt, …), find the highest value in(8)obtained over all values Δy  such that  yk+ Δy ∈ My33V(t + Δt, …) is approximated via a linear interpolation because exp (rΔt)[xj∓Δys(1 ± λ)] is typically not an element of Mx..Denote the maximum value V(t, s, xj, yk).End ForEnd ForEnd ForThe computational complexity of the direct method is of the order O(N2 × Mx× My× My) or O(N5).44We let Mxand Mylinearly depend on time steps N to ensure that the grid sizes δx and δy approach 0 when Δt is close to 0 with increasing N, see, e.g. Zakamouline (2005).The factor N2 arises because the algorithm loops through all points on the stock price lattice, the factor Mx× Myis due to the loop through the grid of portfolio holdings, and the final factor Mycomes from the Δy-search. This is slow; doubling the number of steps in all dimensions increases computation time by a factor of 32.The range of Mx× Myis usually large in order to include optimal solutions for all possible states (t, S(t)) on the lattice. The above direct numerical method uses a standard equidistant grid and searches for optimal solutions in the whole set.As a benchmark, suppose the direct algorithm is implemented in a high-level language such as Matlab on a typical laptop computer. Pricing an option on a binomial lattice with T = 1 year and time steps of 1 day takes 5–10 milliseconds, while on the lattice doing optimization over a grid of Mx× My= 100 × 100, i.e.O(Mx×My2)= O(106), takes about 2 hours. This is not a computationally feasible approach since reasonable outputs require high-resolution grids and thousands of simulations of a random drift.Five measures are employed to reduce running time of simulations:When measuring utility by the negative exponential function (5), the value function V can be written in the form(9)V(t,s,x,y)=H(t,s,y)exp(−αxexp(r(T−t))),where H(t, s, y) is defined by H(t, s, y) ≔ V(t, s, 0, y), see, e.g., Davis et al. (1993) or Monoyios (2004). This representation allows reducing the dimension of the optimization problem by one. However, this measure carries a potential cost. Suppose an investor’s money and stock holdings are large (in absolute terms) but offsetting in terms of value. Then the exponent of the exponential utility function implied by H(t, s, y) will include the product of a very large stock holding and a large stock price. This can cause numerical over- or underflow errors in the computer program, which are dealt with by our following function H(t, s, y) scale, along with local search and non-equidistant discretization that speeds up the program.To mitigate over- and underflow issues, the value function H(t, s, y) is scaled:G(t,s,y):=V(t,s,−ys,y)=H(t,s,y)exp(αysexp(r(T−t))).Function G satisfies a discrete time dynamic programming equation similar to (8) with the terminal condition G(T, s, y) = −1.The solution to H(t, s, y) is known to have a particular structure. The space of stock holdings is split into three regions: buy, no-trade and sell. If the stock position is either in the buy or sell region, a trade is initiated that leads to a stock position on the closest boundary of the no-trade region. If the stock position is inside or on the boundary of the no-trade region, the investor does not change his stock position.In the case of a constant drift (Monoyios, 2004, p. 902) the upper boundary (above which one sells) and the lower boundary (below which one buys) of the no-trade region at a given time t can be both defined by market values of stock positions. It is therefore sufficient to determine the optimal trade in all time-t nodes with a node (t, S) to find the two boundaries.With a state-dependent drift, this observation no longer holds true: If the forecast of the drift is revised depending on the current stock price, then the no-trade region will depend on this information. One therefore has to determine a no-trade region in each node (t, S). This is computationally costly. A numerically efficient approach, which we implement, is to determine the boundaries of the no-trade region through searching over a local range of y. One can also use a binary search algorithm as in Zakamouline (2005) to improve computational speed further. The local range denoted by [φb(t, S), φs(t, S)] is determined by an appropriate extension of the boundaries at the successive nodes.55Denoting the buy (resp. sell) boundary by yb(resp. ys) we identify the endpoints byφb(t,S)=min{yb(t+Δt,dS(t)),yb(t+Δt,uS(t))}−C1,φs(t,S)=max{ys(t+Δt,dS(t)),ys(t+Δt,uS(t))}+C2,where C1 and C2 are two positive constants selected to ensure the local range is large enough. We check whether the no-trade boundaries obtained numerically hit the endpoints of the local range. If they do, larger values of C1 and C2 are chosen and the corresponding computation is repeated.The structure of optimal trading strategies suggests that it is not efficient to have an equidistant discretization of the y-space. The set of discretization points should be denser close to the boundaries of the no-trade region. We therefore use a symmetric, non-equidistant discretization.The set is centered at Merton’s closed-form solution for the case of a constant drift and no transaction costs, which is denoted by φM(t, S). The value of drift μ is given by investors (possibly an actual value or an estimate). The non-equidistant grid has larger step-sizes away from the center φM(t, S). For a given (t, S)-node and the local range [φb(t, S), φs(t, S)], we first define the radius(10)Φ(t,S):=max{φM(t,S)−φb(t,S),φs(t,S)−φM(t,S)},whereφM(t,S)=μ−rer(T−t)ασ2Sis the Merton solution. Then we define the set of discretization points as:(11)y(t,S,k)=φM(t,S)+Φ(t,S)(My2)ϖ(k−My2)|k−My2|ϖ−1.The coefficient ϖ > 1 controls the level of dispersion.66If ϖ = 1, the grid degenerates to the equidistant discretization. But when ϖ is large, the points are too concentrated around the center.Numerical experiments (see Wang, 2010, Sect. 3.6.4 for details) show that an appropriate choice of the coefficient ϖ is 1.6.Implementation in a low-level language, e.g., C + +, reduces computation time by a factor of approximately 10.We use the following values of parameters as a base case for our numerical results: the actual drift drawn from the normal distribution with mean μ0 = 0.15 and variance γ0 = 0.04, volatility σ = 0.25, proportional transaction cost rate λ = 0.01, initial stock price S0 = 15, risk aversion α = 0.1, interest rate r = 0.03, time-horizon T = 1 year, and discretization parameters Δt = 0.01, My= 3500 and ϖ = 1.6.Fig. 1demonstrates the joint effect of transaction costs and state-dependent drift. It shows one realization of the optimal trading strategy over a 40-year time-horizon. The effect is substantial as evidenced by the high variability of the boundaries of the no-trade region. The volatility of these boundaries reflects changes in the learning investor’s estimate of the drift. For instance, both boundaries move downwards around year 25–30 in response to a pronounced fall in the stock price. They move upwards again around year 32 when the stock price recovers. With a known, constant drift, these boundaries (when measured in terms of the amount of wealth invested in stocks) are hyperbola-like curves that are independent of the stock price.Verification of our method is carried out by comparing numerical results with those reported in Monoyios (2004). The comparison is for the simple case of a known, constant drift which is considered in the latter paper. Table 1reports the two boundaries of the no-trade region at the initial time for different transaction costs. We calculate results with our method under both equidistant and non-equidistant discretization. In all three scenarios and for different transaction costs the calculated boundaries coincide up to 3–4 significant digits.The non-equidistant discretization requires fewer points on the y-grid than the equidistant discretization, which substantially shortens the run-time of the program. Our approach works efficiently because we take state-dependent non-equidistant discretization on a small local range of y-values. In fact, the discretization equation (11) produces a great number of dense points with the precision up to 0.0001 around the area centered at the Merton solution where the no-trade region is most probably located. The discretization points are gradually becoming sparser towards the two end-points of the local range of y-values.77See Wang (2010, Figs. 3.5 and 3.6) for an example of the frequency histogram and the diagram of varying precision of y-values.As a result, it suffices to set My= 3500 to achieve results similar to those obtained by the standard equidistant discretization that requires 0.27–2.38 million grid points, depending on the full range of y-values, see the last row in Table 1.We also compare the performance of non-equidistant and equidistant discretizations in the case of the state-dependent driftμL(t,S(t)). Fig. 2shows that the most stable results are obtained under the non-equidistant discretization. The precision of the approximation increases gradually as the number of time steps increases. Equidistant discretizations exhibit a more volatile behavior.We finally consider the relationship between computation time and numerical accuracy. Fig. 3shows the log–log scale plot88A log–log plot uses logarithmic scales on both the horizontal and vertical axes.for the absolute error|Vi−V^|of the value function V(t = 0, s = 15, x = 0, y = 0) and computation time for the non-equidistant discretization with local search in the case of the state-dependent driftμL(t,S(t)). Specifically, the quantities Viare the results using non-equidistant discretization and N = 20 + i × 20, i = 0, 1, …, 9, in Fig. 2. The benchmarkV^= − 0.9018 is obtained by using non-equidistant discretization and N = 420 in Fig. 2. We assumeV^is a reliable approximation of the true value of V(0, 15, 0, 0). Then the difference|Vi−V^|between Viand the “true” valueV^is the error of numerical algorithm. An increase in N reduces the error at the cost of longer computation time, as shown in Fig. 3.To estimate the order of time-complexity, we first assume the relationship|V−V^|=aτ−b,where τ is computation time and we call b the convergence order. We estimate b (and log a) by performing an ordinary least squares regression oflog(|V−V^|)on log (τ).All observations in Fig. 3 are close to a straight line with slope − 0.4 (taking logarithms of both variables). This means that to halve the numerical error, computing time is increased by a factor of 2(1/0.4) ≈ 5.7. Note that this is only marginally slower than for standard option pricing calculations in a binomial model (where computing needs to be quadrupled for the error to be halved) and much faster than for the direct method (8), where a simple halving of all step sizes increases computation time by a factor of 32. In Appendix A, we investigate the convergence order for different random sets of values of parameters.99We are grateful to an anonymous reviewer for suggesting this analysis.This confirms the robustness of the results reported in Fig. 3.

@&#CONCLUSIONS@&#
