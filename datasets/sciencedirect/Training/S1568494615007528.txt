@&#MAIN-TITLE@&#
Multi-objective adaptive large neighborhood search for distributed reentrant permutation flow shop scheduling

@&#HIGHLIGHTS@&#
We build a novel model of the developed distributing scheduling by supplementing the reentrant characteristic into the model of distributed reentrant permutation flow shop scheduling (DRPFS).We determine the number of factory needs to use, factory assignment and sequence of job assigned to the factory.A novel multi-objective adaptive large neighborhood search (MOALNS) algorithm is developed.The various destroy and repair operators are presented.

@&#KEYPHRASES@&#
Multi-objective optimization,Distributed scheduling,Reentrant permutation flow shop,Adaptive large neighborhood search,

@&#ABSTRACT@&#
Factory management plays an important role in improving the productivity and quality of service in the production process. In particular, the distributed permutation flow shop scheduling problem with multiple factories is considered a priority factor in the factory automation. This study proposes a novel model of the developed distributed scheduling by supplementing the reentrant characteristic into the model of distributed reentrant permutation flow shop (DRPFS) scheduling. This problem is described as a given set of jobs with a number of reentrant layers is processed in the factories, which compromises a set of machines, with the same properties. The aim of the study is to determine the number of factory needs to be used, jobs assignment to certain factory and sequence of job assigned to the factory in order to simultaneously satisfy three objectives of minimizing makespan, total cost and average tardiness. To do this, a novel multi-objective adaptive large neighborhood search (MOALNS) algorithm is developed for finding the near optimal solutions based on the Pareto front. Various destroy and repair operators are presented to balance between intensification and diversification of searching process. The numerical examples of computational experiments are carried out to validate the proposed model. The analytical results on the performance of proposed algorithm are checked and compared with the existing methods to validate the effectiveness and robustness of the proposed potential algorithm in handling the DRPFS problem.

@&#INTRODUCTION@&#
In certain manufacturing industries, it has been observed that the classical assumption of flow shop scheduling, stating that each job visits each machine exactly once, is occasionally violated [1]. The prime example can be noticed in the high-tech industries, i.e. semiconductor wafer fabrication in which the operation processes of the jobs are performed by re-visiting some workstations. The scheduling problem of this nature of processing is categorized as a distinct flow shop with reentrant line configuration, called reentrant flow shop scheduling (RFS). Other applications of RFS can be found in TFT-LCD manufacturing [2] and maintenance process that offers repair, modification and upgrading services [3]. A significance of RFS is the processing layers l. Each layer begins from the first workstation and completes on the last workstation. It means that once a job finished a layer of a set of operations, it will repeat its process to next layer starting on the first workstation until all operations are completed.The RFS scheduling has been an active research area and attracted a considerable attention since the past decade due to the development and improvement of high-tech industry. The complexity of RFS cannot be circumvented since it involves more operations than the classical flow shop. Moreover, the cyclic operations where the jobs with higher layers may overlap other jobs in the same workstation are essential to be considered. As a result, these complexities have triggered the development on the efficient scheduling approaches to improve the system performance. Gupta and Sivakumar [4] surveyed the scheduling techniques in semiconductor manufacturing and providing the global view on reentrant scheduling problems. Another form of RFS is reentrant permutation flow shop (RPFS) where at each level no passing is permitted, that is, not only the machine sequence the same for all jobs, but also the job sequence is the same for each machine.Despite the enormous literature of the RFS, most studies – if not all – base their research on the assumption that the process only involves a single production line. Some studies explored the problem on hybrid RFS where the production stages have more than one machines available to process the jobs [5–7]. Nevertheless, hybrid RFS is based on the single production line. Nowadays, single factory firms are less common, with multi-plant companies and supply chains taking a more important role in practice [8]. Several literatures mentioned that multiple production lines with more than one production center, named as distributed manufacturing system, enables companies to achieve higher product quality, lower production costs and lower management risks [9]. However, existing studies focused more on the economic field and distributed finite capacity scheduling is seldom tackled. Since the decision on allocation of job j∈n to the factory p∈P must be considered alongside the job sequencing, scheduling in distributed systems is more complicated than in the conventional ones [10]. This study presents the scheduling model considering the combination of both reentrant and distributed characteristics in permutation flow shop scheduling problem, called distributed reentrant permutation flow shop scheduling (DRPFS). Contradict with the concept adopted by Naderi and Ruiz [10,11] that demonstrated the rule of no factory must be left empty with no jobs assigned (given n>P), we allow the factory to be unutilized, thus consenting the exploration of all possibilities.Multi-objective functions are used in this study for the reason that the conflicts and trade-offs among objectives naturally exist in real life scheduling problems [12]. A solution can have higher value in one objective but lower in others. Thus, the solutions should balance the benefits from many objectives so that it is easier for selecting the suitable solutions accurately. We use minimization of maximum completion time/makespan (Cmax), average tardiness(T¯)and total production cost (TUC) to represent the three groups of objectives for scheduling problems outlined by Mokotoff [13]. The challenging tasks of DPRFS are the simultaneous generation of production sequence of the n jobs on the M machines, allocation of the jobs into the P factories, and determination of a number of factories used so that the given criteria are optimized.The general RFS scheduling problems with a multiple number of jobs are categorized as NP-hard problems [14–17]. Consequently, DPRFS possessing similar properties but is extended to more complex levels is evidently considered as NP-hard and difficult to obtain the optimal solutions for even small instance size. Therefore, development of an effective multi-objective optimization heuristic for this problem is strongly encouraged. Due to the complexity of DPRFS problems, our aim is to develop multi-objective adaptive large neighborhood search (MOALNS) for obtaining the optimum schedule. To our knowledge, the adaptive large neighborhood search (ALNS) is a relatively new heuristic method proposed by Røpke and Pisinger [18]. Unlike most heuristics techniques, ALNS is a large neighborhood improvement heuristic operating on top of a construction heuristic, utilizing local search methods choosing between different neighborhoods for improvement [19].Since the DPRFS involves a number of criteria to be optimized, the ALNS is extended to consider the multi-objective. The significance of this development is that the multi-objective nature gives no single dominant individual since the objectives are conflicting each other. In scalar objective optimization, there naturally exists a complete order to differentiate all feasible solutions, i.e., for any two feasible solutions x and y, either f(x)≤f(y) or f(y)≤f(x). However, in multi-objective optimization, the Pareto dominance, ≺, only defines a partial order in the objective space, and not all the feasible solutions can be compared to each other [20]. Therefore, considering the properties of multi-objective is essential in exploring the large neighborhoods to obtain Pareto optimal sets, allowing a decision maker to select a suitable compromise solution with respect to the space of the feasible solutions.The remainder of this paper is organized as follows. Section 2 describes the related studies. The DRPFS scheduling problem is mentioned in Section 3. The MOALNS is developed in Section 4, followed by computational experiments in Section 5. Finally, Conclusion is presented in Section 6.Although first coined by Graves et al. [21], the RFS problems have only been studied extensively in the 2000s due to the expansion of semiconductor industries [3]. The typical problems of RFS bear the similar concept with classical flow shop, in which the jobs visit certain machines along the production line. However, in RFS scheduling, the jobs are processed by the machines more than once. It implies that every job in RFS must be processed on machine in the order of m1, m2, …, mM, …, and m1, m2, …, mM, creating loops in the processing sequence. Characterized by expensive equipment and the reentrant flows, the RFS problems require more approaches than that of classical flow shop scheduling. The nature of reentrant flows which allows the repeated process of the same job in the same machine often causes conflict among jobs when the jobs with higher layers overlap other jobs at the same workstations. Later operations to be done on a particular job by some machine may interfere with earlier operations to be done at the same machine on a job that started later. Pan and Chen [15] noted that even two machine case of RFS can be categorized as a NP-hard problem.In respect of this complexity, a number of studies have been carried out in this area concerning on two substantial characteristics, the reentrant problems covered and the proposed optimization methods to obtain the optimum solutions. Danping and Lee [22] provided the comprehensive analysis and classification of the previous studies based on these two characteristics. Their study classified the reentrant shop scheduling problems into two main categories, the job shop based and flow shop based, where the latter becomes the main concern in this study. Furthermore, when no passing is allowed, since the processing order of the jobs on the machines is the same for every machine, the problem evolves into the permutation problem as considered in literatures [23–25].In the real time reentrant manufacturing problems, the reduction of cost and increase of productivity with consideration of the delivery time are the main purposes of the optimization studies. In translating these corporate goals into the research framework, several measurements have been constantly used as appropriate objective functions. Mokotoff [13] classified the objectives for scheduling problems into three main groups: (i) Objectives based on the completion time (makespan Cmax, flow time F, etc.), (ii) Objectives based on due date (lateness L, tardiness T, etc.) and (iii) Objectives based on inventory and utilization costs. Sun et al. [26] indicated that previous studies related to flow shop problems are mostly focused on single-criterion scheduling where makespan is primarily used as the sole objective. Makespan is equivalent to maximization of productivity due to the fact that it is strongly correlated with the throughput rate [27]. The study by Chen et al. [24] aimed to minimize makespan using the proposed hybrid version of tabu search. Choi and Kim [28] focused on minimizing the makespan in RFS, and several heuristic methods were suggested and tested to solve problems with various sizes. Yang et al. [29] concerned on minimizing the makespan for a two-machine multi-family scheduling problem with reentrant production flows. The RFS was formulated based on a bridge construction problem. Sangsawang et al. [30] solved problem of the two-stage reentrant flexible flow shop with blocking constraint to find the optimal sequences with minimization of makespan using genetic algorithm (GA) and particle swarm optimization (PSO).When the delivery time becomes sensitive issue that must be fulfilled, the due date based objectives provide more suitable approach. The work of Demirkol and Uzsoy [31] was focused on minimizing the maximum lateness using a decomposition method. Jeong and Kim [32] considered the sequence-dependent setup time with the total tardiness as objective function. Kang et al. [33] proposed the total weighted tardiness as an alternative measurement of tardiness, and the revised apparent tardiness cost with setup (RATCS) method was proposed to solve a scheduling problem involving both sequence-dependent setup time and due date. Kaihara et al. [34] focused on minimizing the overall tardiness and built a model to produce a schedule which accommodates proper proactive maintenance. In a recent study by Huang et al. [16], earliness was also considered as the optimization parameter in addition to tardiness, since earliness is directly related to inventory cost.Recent RFS problems indicated that single optimization criterion is inadequate to represent real-world scenarios since scheduling problems in the manufacturing industry typically involve multiple conflicting objectives [26]. Hence, multi-objective scheduling models have been developed over the years to address the above problem. Dugardin et al. [6] proposed a multi-objective model which minimizes the mean cycle time and maximizes the utilization rate of a bottleneck facility. Choi et al. [5] developed a model which minimizes the makespan taking into account the maximum allowable due date in the form of constraint sets. However, these objective functions were not optimized simultaneously since the makespan was the main priority as long as the due date constraint was satisfied. Previous studies on multi-objective models are centered toward solving a combination of objective functions and the common ones are minimizing the makespan and tardiness [7,35]. The makespan and tardiness are critical criteria in the manufacturing industry. Thus, the optimization of these parameters will maximize productivity of the production line and fulfil customer demands.In the aforementioned investigation, the studies on flow shop scheduling particularly on RFS problems are bounded on an assumption that the production process takes places in a single plant or production line. In addition, with the development of the business concept, coproduction between companies is more and more common nowadays [36]. As a consequence, the distributed manufacturing systems and distributed scheduling receive more concern on the recent development. The practice of distributed scheduling in permutation flow shop problem (DPFSP) was pioneered by Naderi and Ruiz [10] with minimizing makespan among all the factories set as the objective. Consecutively, this research area was addressed in the recent studies. Gao et al. [37] enhanced tabu search strategy to minimize makespan in DPFSP. Modified iterated greedy algorithm was offered by Lin et al. [38] for the same problem. Other methods proposed to tackle the DPFSP include discrete electromagnetism-like mechanism [39], an effective estimation of distribution algorithm [40] and scatter search algorithm [11]. Hatami et al. [41] considered a new scenario which is a combination of DPFSP and the assembly flow shop scheduling problem. The problem consists of two phase: production and assembly. The production phase mimics the environment of DPFSP and the assembly phase follows the conventional problem with single assembly factory. Notwithstanding the growing number of research in this subject, the studies are still limited to the simple DPFSP concept.Both RFS and distributed scheduling are NP-Hard problems. Thus, the effectiveness of the methods plays a critical role in solving the problem. Danping and Lee [22] classified the optimization methods into three classes, exact methods, heuristics and metaheuristics. The application of exact methods found in referenced work ranges from branch and bound [23,42] to Petri Nets [43]. Heuristics techniques including the dispatching rule, constructive and improvement heuristics have been applied in [5,44]. Metaheuristics have evolved to be the main tools applied in solving the RFS and distributed scheduling problems since the solution of moderately sized problems upward have been so far beyond the capability of exact methods. Xu et al. [45] adopted memetic algorithm in reentrant permutation flow shop problem with minimizing makespan as the objective. An iterated Pareto greedy (IPG) algorithm was proposed by Ying et al. [46] to solve a reentrant hybrid flow shop scheduling problem with the bi-objective of minimizing makespan and total tardiness. An improved hybrid GA with auto-tuning parameters was proposed by Chamnanlor et al. [47] for solving RFS problem with consideration of the time windows constraint. In distributed scheduling case, some literatures also applied metaheuristics as the potential tool, i.e. hybrid tabu sample-sort simulated annealing [48] and bounded-search iterated greedy algorithm [49].Large neighborhood search (LNS) mechanism is a promising tool due to its capability to search in larger and richer solution space [50]. LNS and its derivation, including adaptive LNS have been widely used in the optimization problems, especially in routing problems. Hemmelmayr et al. [51] applied ALNS for the two-echelon vehicle routing problem and the location routing problem in the context of city logistics. Qu and Bard [52] combined ALNS with greedy randomized adaptive search procedure for pick-up and delivery problems with transhipment. ALNS was also used by Demir et al. [53] for pollution-routing problem with the aim to minimize a function comprising fuel, emission and driver costs. Azi et al. [54] developed several destroy and construct operators in ALNS for a vehicle routing problem with multiple routes. Sinclair et al. [55] upgraded the LNS methodology developed by Bisaillon et al. [56] for investigating an integrated aircraft and passenger recovery problem. The modification took places in the construction, repair and improvement phase of the algorithm. Schmid et al. [57] developed a hybrid version by combining LNS with linear programming (LP). The model was proposed for the bus rapid transit route design problem where the design of routes is solved using LNS and the passenger flows and frequencies are determined by LP.Although ALNS have been proved to yield potential results in vehicle routing problems, the applications in scheduling and production planning have not been widely explored yet. The hybrid heuristics was proposed by Muller et al. [19] by integrating mixed integer programming solver into ALNS platform. The heuristics framework was applied to the multi-item capacitated lot sizing problem with setup times. Barrena et al. [58] developed ALNS for passenger train timetabling problem with dynamic demand. The proposed approach was aimed to generate optimum timetable with reduction of waiting time as the objective. Nevertheless, the improvement on ALNS is still potential to expand, especially the ones targeting the multi-objective optimizations.The complexity of DPRFS creates a tightly constrained problem which needs a metaheuristic with ability in exploring large neighborhood. Combined by multi-objective characteristics, this study introduces the multi-objective adaptive large neighborhood approach for addressing the problems. There is not any published work addressing the multi-objective adaptive large neighborhood search. The closest work is carried out by Schauss and Hartert [59] who developed the multi-objective large neighborhood search (MO-LNS). However, the proposed method omitted the adaptive feature. Moreover, we differ the concept of multi-objective framework by applying the non-dominated solutions not only as restarting point but also as the base of insertion operators. In term of the problem concerned, despite the innumerable literature in RFS problem, there are still few studies considering the distributed scheduling problems. In addition, the previous studies were limited to each respective area. To the best of our knowledge, no research has been done in the area of reentrant permutation flow shop scheduling with distributed feature. This study is addressing both problems simultaneously, considering the integral structure of the combination of reentrant permutation flow shop and distributed scheduling problems.Distributed manufacturing is increasingly common in practice, especially in large enterprises competing in a globalized market [11]. Although the concept of distributed manufacturing has broad economic impact on the production, studies concerning the distributed scheduling problems are scant and still in the early stage [38]. This research exclusively concerns on the distributed manufacturing applied in the reentrant flow shop framework. Since RFS is widely applied in high-tech industries which gain significant economic impact in the modern days, the idea of distributed reentrant permutation flow shop is a promising field to be developed.Unlike the traditional flow shop problems that only concern the scheduling or sequencing of jobs, the multi plant characteristics of DRPFS add new dimensions to be considered: determination of the number of factories to be used and the allocation of jobs to factories. Obviously, all problems are closely related and must be solved simultaneously to obtain optimal solutions. In addition, the reentrant properties magnify the complexity. As a result, the DRPFS is a highly complicated problem.The concerned DRPFS problem involves P factories (factories set is noted by p, p={p1, p2, …, pP}) which contains a set of M machines, m={m1, m2, …, mM} with exactly the same properties and configurations between each factory. There are n jobs, j={j1, j2, …, jn} to be executed by this system. The jobs consist of uniform operation sequence o={o1, o2, …, oO} to be performed one after another and require a certain amount of processing time ρ. A particular time is needed to set up the machine before processing jobs, denoted by setup time φ. Once a job jihas been assigned to a certain factory pi, the process must be completed using the machines in factory piand cannot be transferred to another factory. The indices and notations used in this study are expressed as follows.jindex of job j∈[1,2, …, n]index of machine m∈[1,2, …, M]index of layer l∈[1,2, …, L]index of factory p∈[1,2, …, P]index of operation o∈[1,2, …, O]processing time of job j on machine m at layer lsetup time of job j on machine m at layer ldue date of job jthe starting time of operation o of job j on machine m at layer l in factory pthe completion time of operation o of job j on machine m at layer l in factory pthe transport time between machine m−1 and mbinary variable, 1 if operation o of job j at layer l is assigned on machine m at time t, and 0 otherwise.binary variable, 1 if job j is processed by factory p, 0 otherwiseBesides the classical flow shop assumptions, a number of additional properties are adopted to conform the reentrant characteristics. The jobs visit the machines more than once in which the number of reentrant is indicated as number of layer l. After completing one layer, the jobs will go back to the first machine and go through all machines again, thus completing the second layer and so on. The processing times of a job in a machine at different layers are not identical since it belongs to different operation. Fig. 1illustrates an example of reentrant configuration in distributed flow shop problem with M=3 and P=2. Buffer with infinite capacity is assumed to be placed at each machine to store the product when the machine is still processing another job. The factories are self-sufficient and independent of each other.There are three objective functions used for the optimization process: minimization of makespan Cmax, average tardinessT¯, and total production cost TUC. Although in general permutation flow shop it has been denoted that minimizing makespan and flow time are sufficiently to minimize production cost [60], the multi-factories characteristic in DRPFS requires different approach in minimizing total production cost. While plant start-up cost is usually omitted in general flow shop, this cost holds influential factor in the decision making process whether it is more profitable to operate other factories rather than maximizing the utilization of current plants.Objective functions:(1)MinCmax=maxj,m,l,p(Cjmlp)(2)TUC=∑p=1P(UCp+OCp+SCp)(3)T¯=1n∑j=1nmax{maxm,l,p(Cjmlp)−tdj,0}The objective functions including the maximum completion time, total production cost and average tardiness are described in Eqs. (1), (2) and (3), respectively. Cjmlpis the integer value of the completion time of job j on machine m at layer l in factory p. The TUC consists of three constituents, the cost of plant's utilization loss UC, overhead cost OC and start-up cost SC. The components of total production cost are determined in Eqs. (4), (5) and (6), respectively.(4)UC=∑p=1P∑j=1n∑l=1L∑m=1Mr1⋅Γp⋅(ρjml+φjml)⋅βjp(5)OC=∑p=1Pr2⋅maxj,m,l(Cjml)(6)SC=∑p=1Pscr⋅Γp⋅M⋅NThe cost of plant's utilization loss UC is a cost occurred due to unbalanced assignment of jobs between factories. The high UC indicates that the jobs are not well distributed, thus resulting in high utilization in particular factories and low in others. However, the cost belong to unused factories is exempted. In this study, the number of assigned jobs to each factory and the production times are used as input data for calculating the cost of plant's utilization loss with r1 as the ratio of UC.The factories’ overhead cost OC serves as variable manufacturing overhead cost which occurs when the factory is in the production process. OC is calculated based on the maximum completion times of each factory with multiplier factor r2 as the ratio of maximum completion times to overhead cost. It is noticed that overhead cost excludes the cost to start the plant which is referred as start-up cost. The factories’ start-up cost SC is defined as a fixed cost that occurs when a plant is started processing the jobs. It is impacted by the number of the machines used and the decision variable Γpwhich indicates whether the factory is used for the production process or not. The rate of start-up cost, symbolized by scr, directs to the ratio of start-up cost SC. The total fitness is the sum of each objective function with equal proportion.The objective functions are subject to the following constraints:(7)αojmlt∈{0,1}∀o,j,m,l,t(8)βjp∈{0,1}∀j∀p∈P(9)∑p=1Pβjp=1,∀j(10)∑j=1n∑l=1L∑o=1Oαojmlt≤1,∀m,t(11)∑m=1M∑l=1L∑o=1Oαojmlt≤1,∀j,t(12)Stojmlp≥0,∀o,j,m,l,p(13)Cojmlp=Stojmlp+ρjml+φjml,∀o,j,m,l,p(14)Cojmlp≥0,∀o,j,m,l,p(15)Cojmlp≤Sto(j+1)mlp,∀m,l,p(16)Stojmlp≥C(o−1)jmlp+τm,∀j,m,l,pEq. (7) formulates the domain of variable αojmltwhich expresses whether machine m executes operation o of job j at layer l at time t. Eq. (8) formulates the decision variable βjpdenoting whether factory p is assigned to process job j. Eq. (9) ensures that any job must be exactly assigned to one factory and prevents the job to be transferred to other factories once it has been located. Eq. (10) states that each machine can only process one job at time t. Similarly, Eq. (11) denotes that each job j can only be processed on one machine at time t.Eq. (12) implies that each operation begins after time zero. Eq. (13) determines the completion time of operation o of job j which is equal to the sum of the starting time St, processing time ρ and setup time φ. Eq. (14) guarantees that completion time of operation o of job j on machine m and layer l in factory p must be non-zero. Eq. (15) assures that job j+1 can only be processed by machine m in factory p after the predecessor job j has been completed. Eq. (16) ensures that the starting time of operation o of job j must not be earlier than the sum of completion time of the predecessor operation C(o−1) of the same job and the transport time.The problem also takes several assumptions under consideration: (i) there is no overtaking between jobs in the same factory. The same sequence of job is maintained throughout all machines, thus limiting the solution space ton+P−1P−1n!. (ii) No preemption is allowed. The processing of operation o of job j on machine m in factory p cannot be interrupted until it has completed. (iii) The machines are always available, no breakdown or maintenance is considered. (iv) All jobs are independent and ready to be processed at time zero.The large neighborhood search has emerged as an effective method to solve complicated neighborhoods in tightly constrained problems, as searching small neighborhood may lead the algorithm to be struck in the local optima. In this type of problems, searching in larger neighborhood increases the chance of finding better solutions [61]. As the algorithm evolves, Røpke and Pisinger [18] defined several destroy and repair methods to form an adaptive large neighborhood search. One of the most important benefits of ALNS is the balancing between intensification and diversification of searching process. In addition, the ALNS offers a dynamic selection of destroy and repair methods based on their performance history.ALNS has been proved for its effectiveness in solving the complex problems. In this study, further improvement in ALNS framework is developed to obtain the multi-objective optimal solutions. The trade-off between objectives prevents a single-unique best solution, instead it creates a set of solutions with optimal compromises of each objective. Thus, the proposed multi-objective ALNS attempts to explore the neighborhood spaces through the modification of non-dominated solutions. The detailed structure of the algorithm is discussed further in the below Section.The use of LNS in multi-objective combinatorial optimization problem was pioneered by Schaus and Hartert [59] which emphasizing the search process based on non-dominated solutions. In our algorithm, we combine the concept of multi-objective with adaptive adjustment to obtain the best solution x*. A set of destruction and reconstruction methods are used to modify the solutions and the pair of destroy and repair method is adaptively selected based on the historical performance. The main process of multi-objective ALNS algorithm is depicted as follows.The algorithm of proposed MOALNS.1:initialize feasible solution x2:set x*←x3:insert x to A4:initialize weights5:while the stopping criteria is not reached do6:select a destroy n−and repair n+heuristics based on the adaptive weightswn−andwn+7:apply (n−, n+) to yield x′8:if (x′ is better than x*) then9:set x*←x′10:end if11:if (x′ is non-dominated solution) then12:insert x′ to A13:end if14:if (x′ meets the acceptance criteria) then15:set x″←x′16:end if17:randomly select x from (A, x″)18:updatewn−andwn+19:end while20:return x*The algorithm begins with initial solution which is stochastically generated. As iteration proceed, the heuristic tries to improve the current solution x by exploring the neighborhood space. The neighborhood structure is divided into two categories, destroy neighborhood N−and repair neighborhood N+. In the first section, a destroy neighborhood n−∈N−chosen using adaptive mechanism removes a particular element of the current solution x and forms the partial solution x−. Hereinafter, a repair neighborhood n+∈N+performs the improvement by inserting new elements into the destroyed part of partial solution x−, thus creating a new solutions x′. To preserve the non-dominated solutions generated, a non-dominated archive A is created to store the Pareto set. The non-dominated solutions in the archive x∈A are used as the basis for the repairing neighborhood n+to generate new solutions.The problem structure in the DRPFS scheduling consists of two tiers, determining the operation sequence of jobs and assigning the job to the factory. Therefore, the solutions also represent the two variables. The first section is the selection of the factory for each job. It should be noted that there is a probability for a factory p to be not chosen at all to process the job since it is subject to the objective function. The second section figures the production sequence of the jobs which is a permutation in respect of the factory used to process the jobs.Fig. 2presents an example of solution in the DRPFS scheduling problem. There are ten jobs j1, j2, …, j10 to be processed in four factories. The factories allocation process resulted in assigning j3, j5, and j10 to factory p1; j1 and j6 to factory p2; j2 and j7 to factory p3;j4, j8, and j9 to factory p4. The next step is determining the input sequence of jobs based on its factory. The sequence number of jobs that belong to the same factory is always unique, thus prohibiting redundancy.As the scheduling problem concerned in this study is multi-objective in its nature, there is no single best solution which dominates in all objectives. Instead, it offers various solutions with optimal compromises between each objective called Pareto-optimal solutions. Pareto-optimal solution x∈X is a solution that there is no x′∈X which dominates x. The Pareto dominance is defined when a decision vector a (a∈X) dominates a decision vector b (b∈X) (denoted a≺b) if and only if the following conditions are met [12]:(17)∀i∈1,2,...,k:fi(a)≤fi(b)(18)∃j∈1,2,...,k:fj(a)<fj(b)where k is the number of objectives f to be minimized. The Pareto optimal solutions are put together into Pareto set in archive A. As the iteration processes continue, the solutions in archive may be updated with more suitable solution, thus altering the landscape of Pareto set. Another important concept in the multi-objective optimization is Pareto front which is defined as the projection of Pareto-optimal solutions in the objectives space. As stated in the previous Section, this study considers three competing objectives to be minimized. Therefore, the solution spread in DRPFS scheduling problem is projected into 3D landscape as illustrated by Fig. 3.Destroy neighborhoods form the backbone of new solutions evocation. An important issue in the process of ruining solutions is the balancing between diversification and intensification. In ALNS, both characteristics are accommodated by using various methods of destroy neighborhoods as explained below. The destroyed element can be the sequence only, assigned factories only, or both sequence and assigned factories.To diversify the search process, one simply randomly selects the parts of solution that will be destroyed. Due to its ability in diversifying the search neighborhood, random destroy is extremely helpful to escape from the local optima.This type of destroy is performed by removing the elements that belong to the factory which has the highest idleness. The idea is to reassign that elements to other factories and then deactivate the plant. As the number of factory used for production reduced, the related cost such as start-up cost can be decreased.This type of destroy is the opposite of factories’ idleness based destroy where it seeks to remove the elements that belong to the factory that has the highest load. By randomly destroying the elements and reassigning them to other factories, the production load can be leveled. The target of this action is reducing the global makespan and factory overhead cost.The critical parts of the solutions, measured by makespan Cmax, are removed from the solutions with hope it will be scheduled better in the repair process. Makespan based destroy is an intensification method with the aim at improving the solutions gradually.This operator is targeting the specific parts that has the worst tardinessmaxj∈n(Tj). It may happen because the jobs have high completion time or tight due dates. In the latter condition, tardiness based destroy can give privilege and priority to the tight scheduled jobs to be processed earlier than the others.This operator is intended to free the variable that has the longest waiting time in the buffers. The total delay djof job j can be defined as the total durations between the job entering the buffer and the job starting to be processed as formulated below.(19)dj=∑o=1O(St(o+1)j−Coj−τ),∀jAlthough not considered as an objective in this study, the cost related to work in process in inventory can be reduced. Another goal of delay based destroy is to relieve the load of the buffers.In destroying process, a parameter Q controls the size of the solution part that will be destroyed. As an approach, we use the linear decrease method proposed by Muller et al. [19] as formulated in Eq. (20).(20)Q=Qstart−(Qstart−Qend)⋅(Iu/Iv),∀u∈1,2,...,vThe decrease begin at Qstart=0.5 and ends at Qend=0.1. The current iteration is represented by Iuwith maximum iteration Iv. The linear decrease allows the algorithm to exploit large neighborhoods in earlier iterations with high Qstart. As the temperature cooling and the algorithm approaching the end of iterations, the Q value reduce, thus preventing radical changes and focusing on improving solutions in the neighborhood where the near-optimal solutions are probably placed.The repair operators N+perform the insertion to the elements of the solutions that have been removed by destroy operators. There are two aims of the repairing process, the discovery of new non-dominated solutions that may contribute to diversify the archive, and the improvement of existing solutions. To achieve these objectives, we propose a set of repair operators with different characteristics. The non-dominated solutions stored in archive play important role as the basis of insertion process. Considering the complexity of DRPFS, the use of exact algorithms is avoided since it is time consuming. The procedure of each method is described as follows.The non-dominated solutions are used for the insertion process with the procedures described as follows.(i)Makespan minimizationThe recombination is performed based on the non-dominated solution in the archive x∈A with the lower completion time compared to current solution. Once a member of archive A selected, its element is injected to fill the destroyed part of current solution x. As redundancy might happen, the rest parts of the solution with redundant value are adjusted. The adjustment is done by substituting the redundant section with unassigned order if the repair process results on the same factories, or placing to the last sequence and rearranging the sequence of the other factories if the repair process results on different factories. This method also aims to reduce the tardiness since high completion times also likely contribute to high tardiness.Total cost minimizationThe idea behind this approach is to lower the total cost of the current solution. The filler for the destroyed element is taken from the non-dominated solutions with the lower total cost compared to the current solutionTUCx′with decision variable:(21)Kx=1if   TUCx≤TUCx′0if   TUCx>TUCx′where Kxis binary variable which has value 1 if solutions x∈A is chosen as candidate for recombination and 0 otherwise.Random selectionIn order to allow diversification on the selection process, the third recombination is carried out by randomizing the non-dominated solution. The probability of the non-dominated solution δxto be selected as the substitute is set equal without considering the total objective functions obtained by the archive member. Given an archive member xa∈A, we perform the archive based recombination in the following manner.archive based recombination.1:input solution to be modified xm←x and Q2:select a random archive based insertion processNA−3:if (NA−is makespan minimization) then4:set the selected archive member δx←xa, xa∈A with min Cmax5:end if6:if (NA−is total cost minimization) then7:set δx←xa, xa∈A with min TUC8:end if9:if (NA−is random selection) then10:randomly select δxfrom archive A11:end if12:for i:=1 to ndo13:generate random number r from U(0,1)14:if (r is less than Q) then15:set xm(i)←δx(i)16:end if17:end for18:set x←xmThe procedure of this type of repair method is simply substituting the destroyed part with the element from the elite solution. The elite solution is the candidate that has the lowest value of total objective function as denoted by min [f1(x)+f2(x)+⋯+fk(x)], where k is the number of objectives.Local search acts as a refinement approach exploits the capability of climbing upward from a local optimum. While other operators often explore wide search spaces, this method is devoted to explore the solutions in the near neighborhoods. The termination criterion of local search is limited based on the number of destroyed elements D to avoid longer iteration time. The stochastic local search is implemented as follows.stochastic local search.1:input solution to be modified xm←x2:select random positions with probability to be chosen Q3:set xm*←xm4:for i:=1 to Ddo5:generate new value of xm(i) and obtain a new solution xm′6:store xm′ into a set of temporary solution S7:xm←xm′8:if (xm′ is better than xm*) then9:set xm*←xm′10:end if11:set xm←xm′12:end for13:set x←xm*To ensure proper diversification, the random repair is used to avoid stagnating search processes where the other repair methods keep performing the same modifications to a solution. It is extremely significant when the archive has only few members to be exploited.One that differs the ALNS with the standard LNS is the multiple destroy and repair methods chosen using adaptive mechanism [18]. The selection of the neighborhoods using roulette wheel principle is influenced by their previous outcomes. Each method is assigned a weight (indicated bywn−for destroy neighborhoods andwn+for repair neighborhoods) that guides the frequency of method n to be selected. Let assume we have h− of destroy methods and h+ of repair methods. The probability of destroy method k− is calculated in Eq. (22).(22)ϕk−=wk−∑n=1h−wn−,∀k∈N−The same formulation is used to determine the probability of repair method k+ to be selected. At the beginning, the weights are set equal. As the iteration process continues, the weights are updated and adjusted dynamically based on the recorded performance. The weights at the given iteration ι are computed as follows:(23)wnι=λ⋅wnι−1+(1−λ)(σnι−1+ϑnι−1),∀n∈N−where the decay parameter λ that controls the sensitivity of the weights to change has a value between 0 and 1. The higher the value, the weights become more reluctant to change according to the historical records. Otherwise, the lower value of λ indicates that the new weights are highly driven by the historical performance. In this research, fixed decay parameter λ=0.7 has been extracted from Aksen et al. [50].σnι−1is the score of method n at the previous iteration ι−1. The value of σ depends on the methods’ performance in the previous iteration which can be formulated below.(24)σ=maxω1Ifthenewsolutionisthenewglobalbestsolutionω2Ifthenewsolutionisbetterthanthepreviousoneω3Ifthenewsolutionisworsethantheprevious,butacceptedaccordingtothemetropoliscriterionω4Ifthenewsolutionisrejectedω1, ω2, ω3, and ω4 are the parameters with value ω1>ω2>ω3>ω4≥0 which mean that higher value of σ will correspond to the escalation of the weight w.In addition, we consider the similarity index ϑ of the new solution to the current solution. The diversity of the solutions generated is a key factor to broaden the searching process so that the algorithm can reach the distant neighborhoods relative to the current solution. Three dimensional Euclidian distance illustrated in Fig. 4is used as an approach to determine the similarity index. The 3D Euclidian distance is calculated as follows:(25)di(x,x′)=(f1(x)−f1(x′))2+(f2(x)−f2(x′))2+(f3(x)−f3(x′))2wheredi(x,x′)is the Euclidian distance between new solution x′ and current solution x. The distance is used as the factor to determine the similarity index ϑ which can be formulated in Eq. (26).(26)ϑ=maxε1If di(x,x′)>ϖ⋅∑e=1Efe(x)ε2If0<di(x,x′)≤ϖ⋅∑e=1Efe(x)ε3If di(x,x′)=0e∈(1, 2, …, E) is the index of objectives. ɛ1, ɛ2, and ɛ3 are the parameters with value ɛ1>ɛ2>ɛ3≥0 which guide the updates of the similarity index ϑ. ϖ is the ratio of distance to total objective functions. As summary, the calculation of new weights is affected by the ability of the methods both in terms of improving the fitness and diversifying the solution.The iteration process starts with a particular initial temperature Ψ1 obtained from a trial run in the experiment. Over the process, the temperature is lowered using a cooling rate c. An approach called a cooling schedule is used to determine an appropriate temperature at each iteration as described below:(27)Ψι=c⋅Ψι−1where c∈[0,1] is the cooling rate parameter. The cooling rate has a trade-off effect, where the low cooling rate will consume longer time since it will slow down the alteration process. On the other hands, a higher cooling rate will lead to the possibility of being trapped in local minima, although it can reduce the processing time significantly.The acceptance and rejection of new solutions are based on the Metropolis criterion which is frequently used in simulated annealing. Metropolis acceptance criterion models how a thermodynamic system moves from the current solution x to a candidate solution x′ in which the energy content is being minimized. The new solution x′ is accepted as the current solution based on the acceptance probability Ξ as formulated in Eq. (28).(28)Ξ=e−(f(x′)−f(x))/ψιiff(x′)−f(x)>01iff(x′)−f(x)≤0f(x′) is the energy level of the new solution. Ψιis the temperature parameter at iteration ι. The high temperature at the beginning of the process allows the new candidate to be accepted with high probability even if it worse that current solution. Otherwise, when the temperature is reaching lower value, the system can reach equilibrium (steady state) and diminish the acceptance probability of worse new solutions.The non-dominated solutions from archive A is used as substitute when the generated solution is rejected based on the Metropolis criterion. We use a roulette wheel analogue with fitness proportion as selection method. Thus, the solutions with high fitness have higher possibility to be selected as the current solution. The process of iteration will continue until the termination criterion is fulfilled which is when it reaches the final temperature Ψend. Table 1presents the value of parameters. The values of parameters are set uniform for LNS, ALNS, and MOALNS.

@&#CONCLUSIONS@&#
