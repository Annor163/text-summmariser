@&#MAIN-TITLE@&#
VGPM: Using business process modeling for videogame modeling and code generation in multiple platforms

@&#HIGHLIGHTS@&#
Apply BPM and its features to the modeling of the game loop of a videogameWork in collaboration with a videogame design toolUse the process models generated by the domain experts to generate a videogameReduce the cost of developing a videogame

@&#KEYPHRASES@&#
Business process modeling,Modeling tools,Code generation,Videogames,

@&#ABSTRACT@&#
Lately, the use of mobile applications in Smartphones has grown considerably. One of the most popular types of applications is videogames. As classic videogame development is a costly process several editors and tools to make this process quicker and easier have appeared. Although these editors allow the definition of various aspects of the videogame they do not include, in general, capabilities for modeling the logic of the game loop. In this research we propose VGPM, a specific notation based in the BPMN approach to define several important characteristics of the game logic, trying to reduce the cost of traditional videogame development.

@&#INTRODUCTION@&#
The requirements engineering phase of a software project is the first task of the software development process. As it states the needs and constraints of the program that is going to be created, it is a very important part of the development cycle. However, the ambiguous nature of the natural language and the ignorance of the problem's domain shown by the computer experts make this task error prone [1]. As the cost of the errors that appear during this initial phase of the software development process is really high, the Object Management Group (OMG) contributed to the creation of the Business Process Management Initiative (BPMI), which promoted the use of graphical notations that lie between the problem's domain and technical knowledge.During the last few years several languages or notations for business process modeling have been defined. The most widely known is BPMN [13,37], which is the standard notation proposed by the OMG and has currently more than 70 implementations. Despite the initial objectives [2], the standardization process that BPMN is involved in makes the notation grow in size and complexity to the point where non-technical computer experts may need to undergo training programs to use the notation correctly [8]. Due to this circumstance several simplifications of the standard notation have been appearing, like jPDL, UML Activity Diagrams [4] and SBPMN [6,14] for example. These simplifications try to reduce the difficulties shown by the experts when using BPMN and, thus, reduce the number of errors found in the process models. Despite these technical difficulties, business process modeling notations like the ones mentioned have been used to model different types of systems, like public administration processes [10] and automotive industry related processes [9]. However, the main area of focus for this type of systems is the generation applications to give support for these processes.Some works included in previous numbers of this same journal address the adaptation of a notation to increase its efficiency in given domains or scenarios; for example, [13] states how BPMN can be adapted in order to reduce its complexity and make it more efficient for modeling simple business processes. This journal also contains investigations regarding another type of approach when dealing with this type of notations: the creation of specific languages or methods for given domains. Despite the fact that the techniques and principles included in these types of works like the PoEML [38] and XSDyM [39] proposals are interesting and can be exported to similar investigation efforts, journal audiences can find the domains where they focus as unattractive.During these last few years there has been a great increase in popularity of a sector inside information technology: videogames. This popularity has grown to the point where the videogame industry has managed to create more benefits than other very popular industries like music and cinema. This situation has been favored by two circumstances: the introduction of videogame playing in modern mobile devices like smartphones and tablets and the appearance of videogame design tools intended for videogame players and designer to create games.When talking about videogames, the requirements specification of the game can be found in the business logic behind the game loop. The game loop is a representation of each of the actions that need to be done per cycle of execution during the game. For example, a simple game loop could be: move the character, simulate the artificial intelligence and refresh the interface. These three actions represent how the videogame works and they need to be executed a fixed number of times per second, as the animation of the images representing the videogame's elements must be done repeatedly. Despite the existence of the mentioned tools, videogame creation remains difficult for non-technical designers, as some programming knowledge is needed to define the business logic behind the game loop.With this current scenario, our main goal is to enable the definition of the videogame's game loop using the bases of the BPMN standard. We will define a language that contains a set of specific elements based on BPMN principles. These set of elements allows users to model game loops with high level of personalization and without the need for programming skills. The users will use the proposal to define their own game loop logic using a graphical editor for modeling it and the editor will automatically generate a specific model that contains the game loop process, a model which will meet the BPMN standard. This graphical editor will include only those elements defined in the proposal, instead of all BPMN generic elements. The users can use in their design a set of defined elements, elements that can be combined in concrete ways applying some restrictions and evaluations. The generated models are fully compatible with tools based on BPMN standards.BPMN is used in many situations to provide a working environment that allows non-technical domain experts to define and model the logic of a business process. BPMN is a generic language contrived to model many different types of process. BPMN models use generic elements like Event, Activity, Gateway, etc., which are not linked to any concrete business area like, for example, e-commerce, e learning, etc. Users must use these generic BPMN elements in the best way, trying to adapt them to their own business areas. But it is not possible for the BPMN editor to apply the specific rules that a concrete business area has; for example, the BPMN editor cannot “understand” that Activity B depends on other Activity C, or that there cannot be more than two instances of the Activity E in the same process.Designing a language based on the BPMN bases and centered in a concrete business area we will achieve to reduce the level of complexity of model designing. The user will use a closed set of elements closely related with the business domain to create the models, elements that can only be used in a specific way depending on the restrictions and validations that form the business domain. In this way the design of a model is closer to the real domain of the problem than to the BPMN bases.The design of such a proposal requires a meticulous analysis of the business model, defining all the significant elements and relations that can allow users to design a BPMN model that fully meets the requirements of the business domain. Another key issue is how to represent the concrete business domain with BPMN bases, as it is necessary to obtain the adequate level of expressiveness and power. Besides, tools that allow users to design these models in an easy way must be defined and built. These tools must generate BPMN models that ensure interoperability with BPMN technologies and tools. Using the resulting models it is possible to develop a set of rules and a transformation engine that would be able to transform each element of the model in a source code fragment. In this way a user without programing-skills but with strong domain knowledge will be able to design and generate a functional software artifact.We have explored different approaches for creating specific languages based on the adaptation of BPMN to concrete business logic. Our previous work included the designing of a simple BPMN language that can be used to design product catalog applications for mobile devices. In this way the language allowed non-technical users to develop a model using a specific platform composed by a graphical editor and a transformation engine. The model developed by the user in the graphical editor represents the functionality of the product catalog. Also we defined a set of transformation rules that can transform the elements of the generated model in functional source code, specifically Android applications.In this evolution we propose a much more ambitious challenge that consists in the definition of a language that can be used to define the game loop logic of videogames. A graphical editor and a transformation engine, able to generate functional source code, will support the language. The game loop is an important and complex part of videogames, as its logic can affect all of the game and the personalization of this element can be become a powerful tool to game developers. Enabling the configuration and personalization of the game loop logic in a graphical way is an ambitious task, so much that currently none of the commercial videogame editors support this feature. Our approach consist in the design of a specific language based on BPMN that would enable users to model the game loop logic and include these tools as a part of the GADE4ALL game editor [18], a videogame design tool that is currently under development at our research group. This tool is capable of generating natively coded videogames for the following platforms: iOS, Android and HTML5. We must clearly state that the GADE4ALL tool is designed to edit the contents (graphics, scenario, etc.) of videogames but like other game editors currently does not allow managing or editing the game loop logic.The rest of this paper will be divided into the following sections. Section 2 will introduce the user to the actual videogame market, including statistics measuring the growth this industry has experienced in the last few years and a videogame family definition. Once the background has been introduced, Section 3 will showcase the possibilities BPM brings, in our opinion, to the modeling of videogames inside the different families previously defined. This third section will also present to the reader the complete videogame generation process, explaining in detail some of the phases. Section 4 will be focused on the evaluation of the tools presented and the code they generate. Section 5 will be dedicated to the conclusions obtained during our work and, lastly, Section 6 will present the future work we intend to complete for the improvement of the tools and the videogames.

@&#CONCLUSIONS@&#
In this paper we present a novel proposal that allows users to model the game loop logic of the game: a specific language based on BPMN standards. The proposed language was designed using our own methodology that was refined by our research group with new iterations and use cases. We used this methodology to obtain information from the domain experts and detect that are the base elements and fundaments of the game loop and how these elements can be related between them. With the obtained info we were able to design an editor that is based on BPMN but which allows to model generic processes to define game loops logic. The elements of the language that can be handled in the editor are specific elements adapted to the current business area; these elements include restrictions and specific configuration properties. The specific language and the editor is the selected way to allow users without technical knowledge model easily a process that defines the logic of the game loop.The definition process of the game loop logic is based on the combination of a set of elements that we have defined in the editor. The set of elements is the result of the first step of our research and these elements enable the definition of: logic decisions, game events, game activities and management data. The expressiveness and possibilities of the proposed language are significant and cover the majority of the most typical requirements in the game loop logic definition, but the language is not as powerful as other programming languages used in the videogame development industry like C++ or Java. The use of a concrete set of elements with well-defined combinations establishes some limitations in the definition of the game logic in comparison with these programming languages. Simultaneously, the use of these set of elements and rules allow non-programming users to define the game loop logic in an easy way and with a good level of expression and customization.We integrated the proposal in the GADE4ALL editor to increase notably the functionality of this editor and the range of videogames that it can define and generate; making an evolution of the generic language BPMN directed towards game loop processes. We have designed a language that can be used to define, in a powerful way, the game logic using a set of specific modeling elements. As we demonstrated, the proposal was used to define in a graphical way some game loops processes that were transformed into fully functional games.Several cases have shown in the past months that a quick response to the political, social or sporting events taking place around the world in the form of a videogame could mean a great sell success. This situation can be directly linked with the rapid app generation that can be achieved with our proposal. At the moment we offer code templates for five different types or families of games. These videogame families, in combination with the GADE4ALL editor and BPLevel Modeler, result in the creation of simple videogames in a short amount of time by a videogame expert with no programming experience. Thus, our approach is capable of reducing the complexity that non-technical domain experts experience when they design and create a videogame and also of improving the efficiency rates of traditional videogame development.