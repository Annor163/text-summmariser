@&#MAIN-TITLE@&#
Surface point location by walking algorithm for haptic visualization of triangulated 3D models

@&#HIGHLIGHTS@&#
We have designed an algorithm for collision detection in haptic visualization.It detects a triangle close to the haptic probe in its collision trajectory.It can be also used for other searching on the surface of triangulated 3D models.It can be successfully used for large models which are even changing in time.No searching data structures are needed, however, the algorithm works fast enough.

@&#KEYPHRASES@&#
Triangle lookup,Searching algorithm,Walking algorithm,Triangulated surface model,Haptic visualization,Collision detection,

@&#ABSTRACT@&#
Haptic devices are nowadays gaining popularity because of their increasing availability. These special input/output devices provide, unlike mouse or keyboard, a native 3D manipulation, especially a more precise control and a force interaction. With more accurate description of the model, haptics can achieve more realistic force feedback. Therefore, triangulated surface models are often used for an authentic interpretation of 3D models. A common task in haptic visualization using triangulated surface models is to find a triangle which is in the collision trajectory of the haptic probe. Since the render rate of the haptic visualization is relatively high (usually about 1kHz), the task becomes highly non-trivial for complex mesh models, especially for the meshes which are changing over time. The paper presents a fast and novel location algorithm able to find the triangle which is close to the haptic probe and in the direction of the probe motion vector. The algorithm has negligible additional memory requirements, since it does not need additional searching data structures and uses only the information usually available for triangulated models. Therefore, the algorithm could handle even triangular meshes changing over time. Results show that the proposed algorithm is fast enough to be used in haptic visualization of complex-shaped models with hundreds of thousands of triangles.

@&#INTRODUCTION@&#
In this paper we focus on the collision detection problem of the haptic device with the surface of 3D model which is defined by a triangular mesh. The goal is to find a triangle (if such a triangle exists) which is in the collision trajectory of the haptic probe to provide appropriate feedback to the user.Haptic visualization is a tactile feedback method which provides a sense of touch to the user via a haptic device by applying forces, vibrations, or motions while visual perception is usually mediated by a display device. See an example of the haptic device Phantom Omni® used in our experiments in Fig. 1. The haptic visualization finds applications in a variety of areas including haptic surgery simulations [1–3], industry design-based manufacturing [4], or the virtual reality for blind computer users [5]. The majority of the haptic rendering techniques [6,7] require to detect collision (and intersection) of a haptic cursor with the visualized model. However, unlike graphics visualization where a sufficient render rate is about 25Hz, the render rate required by the haptics is about 1000Hz to provide an authentic feedback (as it is mentioned by Colgate and Brown [8] a human skin is sensitive to force change of a frequency higher than 500Hz). Therefore, collisions need to be detected and computed as fast as possible.Since a higher precision of model representation results in a more realistic perception, many haptic applications [2,6,9,10] use triangulated surface meshes for the representation of models. Existing approaches for the triangulated surface meshes usually deal with static scenes or local changes of the model, where the location methods with search data structures (especially a spatial subdivision techniques) provide adequate results [9]. As mentioned in [10], most of the existing algorithms address collision detection and intersection computation for small models which consist of a few thousands of polygons or they use some kind of down-sampled finite element model [2].However, in the haptic visualization and interaction used for geometric modeling the model and its topology is often changing, which results in updates of the search data structures. These updates may not be trivial and if the changes in the triangular mesh are frequent, updates of data structures may significantly affect the performance. Moreover, search data structures consume additional memory.Therefore, the goal is to develop an algorithm which does not utilize additional search data structures and still achieves the performance necessary for the application in the haptic visualization. When the haptic probe is moving on the surface of the model, the render rate required by the haptics is about 1000Hz, thus the longest detection/location should take less than 1ms. When the haptic probe is moving in a free space, the collisions may be detected in a lower rate, since a low delay of the first touch feedback is not noticeable. The frame rate about 100Hz is sufficient, thus the longest detection/location should take less than 10ms.The problem is more precisely defined as follows. For a given positionqof the haptic probe and its motion vectorm(the current direction of movement of the haptic probe), the goal is to find and return such a triangle from the given surface triangular mesh, which is intersected by the lineλ=[q,m]in the distance fromqlower than or equal to a defined maximal allowable distancedistmax. Moreover,mshould direct towards the front face of the found target triangle. If such a triangle does not exist, null should be returned. Note thatdistmaxshould be small enough to ensure unique result. We suppose that the model does not contain errors or holes, all the triangles have uniform orientation and have information about their neighbors.The proposed solution ranks among walking algorithms, which are popular especially for point location in planar triangular meshes or in tetrahedral meshes. The name of walking algorithms describes their principle: generally, the search goes from a triangle to its neighbor in the direction of the given query point, until the target triangle (which contains the query point) is found. In our case, the walking algorithm is searching in the direction of a triangle, which is intersected by the line defined by the position of the haptic probe and the haptic motion vector (see Fig. 2). Since the next triangle is chosen with respect to local tests, the utilization of a walking algorithm for a point location on the triangulated surface model is not simple and, to the best of our knowledge, no complex walking algorithm for point location on a triangulated surface model has been published.The proposed algorithm has negligible additional memory requirements since it does not need additional data structures. It only needs the information about neighboring triangles, which is usually required for other purposes as well. Therefore, the algorithm can handle even triangular meshes which are changing over time. Although the algorithm was developed especially for haptic visualization, it is not limited to the haptic collision detection only. It can be used for all point location problems, where the input contains both: a point close to the surface of the triangulated 3D model and a vector directing towards the model. For example, for a parametric description of the model, we can get a point on the surface as well as a vector directing towards the model (it may be the opposite surface normal at this point).Results show that the proposed algorithm can handle queries on rather complex-shaped models with hundreds of thousands of triangles in a good time and thus it can be successfully used in haptic visualization. The algorithm is suitable also for models changing in time. Although it is not a primary task of the algorithm, it can also handle queries when the model is composed of multiple components. Moreover, the algorithm is easily and effectively parallelizable which can significantly speed up the search process.The paper is organized as follows. ‘State of the art’ provides an overview in the task of a collision detection regarding to haptic visualization. ‘Proposed method’ describes the proposed walking algorithms for collision detection in haptic visualization. ‘Experimental results’ presents our experiments performed on well-known triangulated surface models and ‘Conclusion’ concludes the paper.Collision detection and contact determination problems has been extensively studied in [9,11–17].The simplest algorithms for collision detection are based on using bounding volumes and spatial, hierarchical decomposition techniques. For such a decomposition, e.g., k–d trees and octrees [11], cone trees, sphere trees [12,13], R-trees and their variants, trees based on S-bounds [15], and oriented bounding boxes [9] are used. Other spatial representations are based on BSP’s [16] and its extensions to multi-space partitions [17].As it is mentioned, e.g., in [2], it is very difficult to handle interactive rendering framerates for complex models due to a computation of collision detection. Sela et al. [2] propose a haptic surgical simulator where the finite element method (FEM) is used for offline preprocessing of physical properties around the cut. Then the discontinuous free-form deformation (DFFM) is created. Note that only DFFM is used during a real-time cutting stage since a fast solution is needed. A surface model of a skin or flash is represented as a polygonal surface. To handle collision queries of a haptic cursor in a sufficient rate, authors use a preprocessed uniform voxel grid around the model.Gregory et al. [10] present a hybrid collision detection framework for haptic interaction which uses a hierarchical representation of uniform grids and trees of oriented bounding boxes. Their framework utilizes the frame-to-frame coherence of a haptic probe. However, like other techniques using search data structures, modification for surface triangular meshes which are changing in time is complicated and continuous updating of data structures provides a significant decrease of the speed.The approach proposed in this paper is based on the walking principle which is usually used for point location in planar triangular meshes or in tetrahedral meshes. The surveys of walking algorithms are presented in [18,19]. [20,21] used a walking algorithm in spherical re-meshing problem for point location on the surface of a triangulated sphere. Some algorithms (e.g. [22]) utilize the walking algorithms for point location on the surface triangular meshes in the local context (following the prior utilization of a search data structure, such as the octree). However, as far as we know, complex walking algorithms have not been applied to the problem of point location or collision detection on the surface triangular meshes.There are several walking algorithms solving point location problem, and according to the style how they determine the way of the walk they can be divided into three groups: visibility, straight and orthogonal walks. Visibility walks [18,23–25] use local “visibility” tests to determine the way of their walk. These tests look for such an edge of a triangle that defines a line separating the query point and the third vertex of the triangle. The walk then moves across this edge to the neighborhood triangle. Straight walk algorithms [18,26,27] use not only the local comparisons to determine the way of the walk, but also use a line connecting one point of the starting triangle with the query point and traverse triangles crossed by this line. Orthogonal walks [18,21] first navigate along one coordinate axis and then along the other.A clever selection of the starting triangle for walking may radically improve the speed of the algorithm, since it reduces the number of visited triangles during the walk. If any additional information about the data is known, it can be used in the selection, e.g., the target triangle from the last location query can be used as a starting triangle for the next query, if there is a coherency between queries. Without any knowledge of the data, the initial triangle can be chosen randomly. A better, yet still fast and simple alternative without any additional memory use was proposed in [28], where the initial triangle is selected as the nearest triangle from a set A of randomly chosen triangles from the scanned triangular mesh T. The total number of randomly selected triangles is significantly lower than the total number of triangles in T (‖A‖≪‖T‖). For planar Delaunay triangulation of random points, an analysis of the ideal size of such a random subset has been proposed by [29], leading to the size ofO(n3).

@&#CONCLUSIONS@&#
