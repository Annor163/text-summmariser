@&#MAIN-TITLE@&#
Optimal control for stochastic linear quadratic singular neuro Takagi–Sugeno fuzzy system with singular cost using genetic programming

@&#HIGHLIGHTS@&#
Takagi-Sugeno fuzzy model.Neuro-fuzzy system.Nontraditional genetic programming approach.Optimal control for Stochastic linear singular Takagi–Sugeno fuzzy singular system.

@&#KEYPHRASES@&#
49 K 45,68 N 19,92 D 10,93 B 52,94 D 05,03 E 72,93 E 20,Differential algebraic equation,Genetic programming,Matrix Riccati differential equation,Runge–Kutta method,Optimal control and Stochastic linear quadratic singular neuro Takagi–Sugeno fuzzy system,

@&#ABSTRACT@&#
In this paper, optimal control for stochastic linear quadratic singular neuro Takagi–Sugeno (T-S) fuzzy system with singular cost is obtained using genetic programming(GP). To obtain the optimal control, the solution of matrix Riccati differential equation (MRDE) is computed by solving differential algebraic equation (DAE) using a novel and nontraditional GP approach. The obtained solution in this method is equivalent or very close to the exact solution of the problem. Accuracy of the solution computed by GP approach to the problem is qualitatively better. The solution of this novel method is compared with the traditional Runge–Kutta (RK) method. A numerical example is presented to illustrate the proposed method.

@&#INTRODUCTION@&#
A fuzzy system consists of linguistic IF-THEN rules that have fuzzy antecedent and consequent parts. It is a static nonlinear mapping from the input space to the output space. The inputs and outputs are crisp real numbers and not fuzzy sets. The fuzzification block converts the crisp inputs to fuzzy sets and then the inference mechanism uses the fuzzy rules to produce fuzzy conclusions or fuzzy aggregations and finally the defuzzification block converts these fuzzy conclusions into crisp outputs. The fuzzy system with singleton fuzzifier, product inference engine, center average defuzzifier and Gaussian membership functions is called a standard fuzzy system [1].Two main advantages of fuzzy systems for the control and modeling applications are (i) fuzzy systems are useful for uncertain or approximate reasoning, especially for the system with a mathematical model that is difficult to derive and (ii) fuzzy logic allows decision making with the estimated values under incomplete or uncertain information [2].Neural networks or simply neural nets are computing systems, which can be trained to learn a complex relationship between two or many variables or data sets. Having the structures similar to their biological counterparts, neural networks (NNs) are representational and computational models. NNs are processing information in a parallel distributed fashion composed of interconnecting simple processing nodes [3]. Neural net techniques have been successfully applied in various fields such as function approximation, signal processing and adaptive (or) learning control for nonlinear systems. Using neural networks, a variety of off line learning control algorithms have been developed for nonlinear systems [4,5].Neuro fuzzy systems are a combination of two popular soft computing techniques: neural networks and fuzzy systems. Also NNs have the capability to learn from examples, yet the learned knowledge can not be represented explicitly. On the other hand, knowledge in fuzzy systems is represented via explicit fuzzy if then rules, yet fuzzy systems have no learning capability. Neuro fuzzy system is a hybrid approach in which a fuzzy system is trained using techniques similar to those applied to neural networks. One of the first neuro fuzzy systems was the adaptive network-based fuzzy inference system (ANFIS) [6]. ANFIS represents a Takagi–Sugeno fuzzy system as a multilayer feedforward network which can be trained via backpropagation algorithm. Neural networks and fuzzy systems can be combined to join its advantages and to cure its individual illness. Neural networks introduce its computational characteristics of learning in the fuzzy systems and receive from them the interpretation and clarity of systems representation. Thus, the disadvantages of the fuzzy systems are compensated by the capacities of the neural networks. Hayashi et al. [7] showed that a feedforward neural network could approximate any fuzzy rule based system and any feedforward neural network may be approximated by a rule based fuzzy inference system [8]. Fusion of artificial neural networks and fuzzy inference systems have attracted the growing interest of researchers in various scientific and engineering areas due to the growing need of adaptive intelligent systems to solve the real world problems [9–11].Genetic programming is an evolutionary algorithm that attempts to evolve solution to the given problem by using concepts taken from naturally occurring evolving process. The technique is based on the evolution of a large number of candidate solutions through genetic operations such as reproduction, crossover and mutation. It is based upon the genetic algorithm(GA) [12], which exploits the process of natural selection based on a fitness measure to breed a population of trial solutions that improve over time. While GA usually operates on (coded) strings of numbers, GP uses the principles and ideas from biological evolution to guide the computer to acquire desired solution. The search space is too large to attempt a brute force search, the method must be utilized to reduce the number of examined solutions. In this search, initially the population looks a bit like a cloud of randomly selected points, but that generation after generation it moves in the search space following a well defined trajectory. The generation is achieved with the help of grammatical evolution, because grammatical evolution can produce programmes in an arbitrary language. The genetic operations are faster and also because it is more convenient to symbolically differentiate mathematical expression. The code production is performed using a mapping process governed by grammar expressed in Backus Naur Form (BNF) [13]. In analogy to nature, the potential solution is an individual in some collection or population of potential solutions. The individuals who are stronger, meaning higher ranked according to fitness function, will be used to determine the next collection of potential solution. A new generation will be arisen by employing analogs of reproduction, crossover and mutation.This means that GP has advantages over other algorithms as it can perform optimization at a structural level. This enabled Koza [14] to demonstrate the application of GP algorithm to a number of problem domains, including regression, control and classification. Research in this area has grown rapidly and encompassed a wide range of problems. GP techniques have been successfully applied in various engineering fields like signal processing [15], electrical circuit design [16], scheduling [17], process controller evolution [18] and modelling of both steady-state and dynamic processes [19].In this paper, optimal control of a stochastic linear quadratic singular neuro T-S fuzzy system is obtained using genetic programming. The linear T-S fuzzy system is the most popular fuzzy model due to its intrinsic analysis: the linear matrix inequality(LMI)-based fuzzy controller is to minimize the upper bound of the performance index; structure oriented and switching fuzzy controllers are developed for more complicated systems [20]; the optimal fuzzy control technique is used to minimize the performance index from local-concept or global-concept approaches [21,22].Stochastic linear quadratic regulator (LQR) problems have been studied by many researchers [23,24]. Chen et al. [25] have shown that the stochastic LQR problem is well posed if there are solutions to the Riccati equation and then an optimal feedback control can be obtained. For LQR problems, it is natural to study an associated Riccati equation. However, the existence and uniqueness of the solution of the Riccati equation in general, seem to be very difficult problems due to the presence of the complicated nonlinear term. Zhu and Li [26] used the iterative method for solving stochastic Riccati equations for stochastic LQR problems. There are several numerical methods to solve conventional Riccati equation. As a result of the nonlinear process, essential error accumulations may occur. Recently the conventional Riccati equation has been analyzed using neural network approach and genetic programming approach see [27–34] to minimize the error. A variety of numerical algorithms [35] have been developed for solving the algebraic Riccati equation.Singular systems contain a mixture of algebraic and differential equations. In that sense, the algebraic equations represent the constraints to the solution of the differential part. These systems are also known as degenerate, differential algebraic, descriptor or semi state and generalized state space systems. The complex nature of singular system causes many difficulties in the analytical and numerical treatment of such systems, particularly when there is a need for their control. The system arises naturally as a linear approximation of system models or linear system models in many applications such as electrical networks, aircraft dynamics, neutral delay systems, chemical, thermal and diffusion processes, large scale systems, robotics, biology, etc., see [36,37]. As the theory of optimal control of linear systems with quadratic performance criteria is well developed, the results are most complete and close to use in many practical designing problems. The theory of the quadratic cost control problem has been treated as a more interesting problem. The optimal feedback with minimum cost control has been characterized by the solution of a Riccati equation. Da Prato and Ichikawa [38] showed that the optimal feedback control and the minimum cost are characterized by the solution of a Riccati equation. Solving the Matrix Riccati differential equation (MRDE) is the central issue in optimal control theory.Although parallel algorithms can compute the solutions faster than sequential algorithms, there have been no report on genetic programming solutions for MRDE [34]. This paper focuses upon the implementation of genetic programming approach for solving MRDE in order to get the optimal solution.This paper is organized as follows. In Section 2, the statement of the problem is given. In Section 3 and 4, solution of the MRDE is presented. In Section 5, numerical example is discussed to illustrate the proposed method. The final conclusion section demonstrates the efficiency of the method.In this section, a class of adaptive networks is proposed. The proposed architecture is referred to as ANFIS. For simplicity, the fuzzy inference system has two inputs x1 and x2 and one output z=f(x1, x2). Suppose that the rule base contains two fuzzy if-then rules of Takagi and Sugeno's type [39]:Rule1:Ifx1isA1andx2isB1,thenf1=p1x1+q1x2+r1,Rule2:Ifx1isA2andx2isB2,thenf2=p2x1+q2x2+r2.Then the architecture of type-3 fuzzy reasoning ANFIS with 2 rules is shown in Fig. 1and the architecture type-3 fuzzy reasoning ANFIS with 9 rules is shown in Fig. 2. The node functions in the same layer are of the same function family as described below:Layer 1. Every node i in this layer is a square node with a node functionOi1=μAi(x),where x is the input to node i and Aiis the linguistic label (small, large, etc.) associated with this node function. In other words,Oi1is the membership function of Aiand it specifies the degree to which the given x satisfies the quantifier Ai. Usually we chooseμAi(x)to be bell shaped with maximum equal to 1 and minimum equal to 0, such as the generalized bell functionμAi(x)=11+[(x−ci/ai)2]bi,or the Gaussian functionμAi(x)=11+x−ciai2bi,where {ai, bi, ci} or {ai, ci} in the latter case is the parameter set. As the values of these parameters change, the bell shaped functions vary accordingly, thus exhibiting various forms of membership functions on linguistic label Ai. In fact, any continuous and piecewise differentiable functions such as the commonly used trapezoidal or triangular shaped membership functions are also qualified candidates for node functions in this layer. Parameters in this layer are referred to as premise parameters.Layer 2. Every node in this layer is a circle node labeled Π which multiplies the incoming signals and sends the product out. For instance,wi=μAi(x1)×μBi(x2),i=1,2.Each node output represents the firing strength of a rule.Layer 3. Every node in this layer is a circle node labeled N. The ith node calculates the ratio of the ith rule's firing strength to the sum of all rules’ firing strengths:wi¯=wiw1+w2,i=1,2.For convenience, outputs of this layer will be called normalized firing strengths.Layer 4. Every node in this layer is a square node with a node functionOi4=wi¯fi=wi¯(pix1+qix2+ri),wherewi¯is the output of layer 3 and {pi, qi, ri} is the parameter set. Parameters in this layer will be referred to as consequent parameters.Layer 5. The single node in this layer is a circle node labeled ∑ that computes the overall output as the summation of all incoming signals i.e.,Oi5=overalloutput=∑iwi¯fi=∑iwifi∑iwi.Thus an adaptive network is constructed equivalent to a type-3 fuzzy inference systemHence the input variables xjare fuzzified as fuzzy variables whose corresponding term sets Tjihave Gaussian membership function with mean mjiand the standard deviation σji, the corresponding output for the neural network [40] isSx(t)=[Aix(t)+Biu(t)]dt+Diu(t)dW(t),i=1,…,r.In other words, the proposed neuro fuzzy network is in fact a neural-based linear T-S fuzzy modelling structure. Using neural learning technique, this structure will proceed the structure and parameter learning concurrently and generate the following linear T-S fuzzy system:Ri: If xjis Tji(mji, σji), i = 1,…,r and j = 1,…,n, thenSx(t)=[Aix(t)+Biu(t)]dt+Diu(t)dW(t),x(0)=x0,where Ridenotes the ith rule of the fuzzy model, mjiand σjiare the mean and standard deviation of the Gaussian membership function, x(t)∈Rnis a generalized state space vector, u(t)∈Rmis a control variable and it takes value in some Euclidean space, W(t) is a Brownian motion andAi∈ℝn×n,Bi∈ℝn×mandDi∈ℝn×mare known as coefficient matrices, x0 is given initial state vector, tfis the final time and m≤n and Sx(t) denotes Fidx(t) for the continuous case.Neuro fuzzy optimal control system. Consider the stochastic linear dynamical singular T-S fuzzy system [40] that can be expressed in the form:Ri:IfxjisTji(mji,σji),i=1,…,randj=1,…,n,then(1)Fidx(t)=[Aix(t)+Biu(t)]dt+Diu(t)dW(t),x(0)=x0,t∈[0,tf].In order to minimize both the state and control signals of the feedback control system, a quadratic performance index is usually minimized:J=E12xT(tf)FiTSFix(tf)+12∫0tf[xT(t)Qx(t)+uT(t)Ru(t)]dt,where the superscript T denotes the transpose operator,S∈ℝn×nandQ∈ℝn×nare symmetric and positive definite (or semidefinite) weighing matrices for x(t),R∈ℝm×mis a singular weighing matrix for u(t). It will be assumed that |sFi−Ai|≠0 for some s. This assumption guarantees that any input u(t) will generate one and only one state trajectory x(t).If all state variables are measurable, then a linear state feedback control lawu(t)=−(R+DiTKi(t)Di)−1BiTλ(t)can be obtained to the system described by Eq. (1), whereλ(t)=Ki(t)Fix(t),Ki(t)∈ℝn×nis a symmetric matrix and the solution of MRDE.The relative MRDE for the stochastic linear singular system (1) is(2)FiTK˙i(t)Fi+FiTKi(t)Ai+AiTKi(t)Fi+Q−FiTKi(t)Bi(R+DiTKi(t)Di)−1BiTKi(t)Fi=0with terminal condition(TC)Ki(tf)=FiTSFiand(R+DiTKi(t)Di)>0.After substituting the appropriate matrices in the above equation, it becomes a DAE of index one. Therefore solving MRDE is equivalent to solving the DAE of index one.Consider the DAE of (2) for each rule of the fuzzy model(3)k˙ij(t)=ϕij(kij(t)),kij(tf)=Aij(i,j=1,2,….,n−1)k1n(t)=ψ(kij(t)),k1n(tf)=A1n,where kijand k1nare the elements of the matrix Ki(t).Numerical integration is one of the oldest and most fascinating topics in numerical analysis. It is the process of producing a numerical value for the integration of a function over a set. Numerical integration is usually utilized when analytic techniques fail. Even if the indefinite integral of the function is available in a closed form, it may involve some special functions, which cannot be computed easily. In such cases, we can use numerical integration. RK algorithms have always been considered as the best tool for the numerical integration of ordinary differential equations (ODEs). The DAE can be changed in to a system of nonlinear differential equation by differentiating the algebraic equation one time since the DAE is of index one type. The system (3) contains n2 first order ODEs with n2 variables. In particular n=2, the system will contain four equations. Since the matrix K(t) is symmetric and the system is singular, k12=k21 and k22 is free (let k22 = 0). Finally the system will have two equation in two variables. Hence, RK method is explained for a system of two first order ODEs with two variables.k11(i+1)=k11(i)+16(k1+2k2+2k3+k4)k12(i+1)=k12(i)+16(l1+2l2+2l3+l4),wherek1=h*ϕ11k11,k12l1=h*ϕ12k11,k12k2=h*ϕ11k11+k12,k12+l12l2=h*ϕ12k11+k12,k12+l12k3=h*ϕ11k11+k22,k12+l22l3=h*ϕ12k11+k22,k12+l22k4=h*ϕ11k11+k3,k12+l3l4=h*ϕ12k11+k3,k12+l3.In the similar way, the original system (3) can be solved for n2 first order ODEs.In this approach, GP is used to obtain a set of expressions. If the required number expressions satisfy the fitness function, it will be the optimal solution of MRDE. The scheme of computing optimal solution is illustrated in Fig. 3.The first step is to initialize the population. An initial population of the desired size is generated randomly. The length of each chromosome is to be set according to the nature of the problem. Each program or individual in the population is generally represented as a parse tree composed of function and data/terminals appropriate to the problem domain.Grammatical evolution is an evolutionary algorithm that can produce code in any programming language. The algorithm begins from the start symbol of the grammar and gradually creates the program string, by replacing non terminal symbol with right hand of the selected production rule, first read an element from the chromosome (with value V) and compute Rule =V mod NR, where NR is the number of rules for the specific non terminal symbol which is shown in Table 1.The symbol S in the grammar denotes the start symbol of the grammar. For example, suppose we have the chromosome x={7, 2, 10, 4, 4, 2, 11, 16, 30, 5}. The method of producing a valid expression is shown in Table 2. The rule =V mod NR is applied in each row of Table 2. In first line V=7, NR=7 (Number of elements in <exp> group in Table 1). The next line <exp><op><exp> is obtained from Table 1 for the result zero of the first line. Similarly the remaining rows of the Table 2 can be found. The function which corresponds to the chromosome is exp(x)+log(exp(y)), (for details see [41,42].Fitness function. The aim of the fitness function is to provide a basis for competition among available solutions and to obtain the optimal solution. Hence, the fitness function for MRDE is defined as(4)Er=(k1n(tm)−ψ(kij(tm)))2+∑i,j=1n−1(k˙ij(tm)−ϕij(kij(tm)))2,(m=0,1,2,…,tf),where m represents the equidistance points in the relevant range [0, tf].The genetic operators such as reproduction, crossover and mutation are explained below:Reproduction. Reproduction is an operator that makes more copies of better strings in a new population. Reproduction is usually the first operator applied on a populaton. Reproduction selects good strings in a population and forms a mating pool. The commonly used reproduction operator is the proportionate reproduction operator where a string is selected for the mating pool with a probability proportional to its fitness. Thus, the i-th string in the population is selected with a probability proportional to its fitness Fi. Since the population size is usually kept fixed in a simple GA, the sum of the probability of each string being selected for the mating pools must be one. Therefore, the probability for selecting the i-th string isPi=FiΣi=1nFi,where n is the population size.In Table 3, fitness values of five individuals are given. Since the third individual has higher fitness value than any other, it is expected that the third individual will be chosen for reproduction. It is important to note that no new strings are formed in the reproduction phase. Koza [14] allowed 10% of the population to reproduce.Crossover. A crossover operator is used to recombine two strings to get a better string. In crossover operation, recombination process creates different individuals in the successive generations by combining material from two individuals of the previous generation. In the crossover operator, new strings are created by exchanging information among strings of the mating pool. The crossover is applied every generation in order to create new chromosome from the old ones, that will replace the worst individuals in the population. There are many types of crossover operator in which we use single point crossover technique. In that operation, for each couple of new chromosomes, two parents are selected, we cut these parent-chromosomes at a randomly chosen point and exchange the right-hand-side sub-chromosomes, as shown in Fig. 4. A random number is generated for each chromosome. If the random number is less than the crossover probability, then the chromosome is chosen for crossover operation. After crossover operations, the new child chromosomes replaced the old parent chromosomes.Mutation. Mutation adds new information in a random way to the genetic search process and ultimately helps to avoid getting trapped at local optima. It is an operator that introduces diversity in the population whenever the population tends to become homogeneous due to repeated use of reproduction and crossover operators. Mutation may cause the chromosomes of individuals to be different from those of their parent individuals. In the mutation process, for every element in a chromosome a random number in the range [0, 1] is chosen. If the number is less than or equal to the mutation rate the corresponding element is changed randomly, otherwise it remains intact.In each generation, a set of expressions are generated by the chromosomes. If an expression minimizes the fitness function Er(4) to zero or very close to zero and satisfies the initial condition, the process may be stopped; otherwise, the GP approach must be continued.The algorithm has the following stepsstep 1.Initialize random population.Create valid function using grammar.Evaluate fitness value of the chromosome.If Fitness tends to zero, stop the procedure. Otherwise proceed to next step.Generate new population using Genetic operations, Go to step 2.Example 1Consider the optimal control problem:MinimizeJ=E12xT(tf)FiTSFix(tf)+12∫0tf[xT(t)Qx(t)+uT(t)Ru(t)]dtsubject to the stochastic linear quadratic singular neuro T-S fuzzy system Ri: If x1 is T1i(m1i, σ1i), i = 1,2, thenFidx(t)=[Aix(t)+Biu(t)]dt+Diu(t)dW(t),x(0)=x0,t∈[0,tf],whereS=2000,Fi=1000,A1=−120−4,A2=−220−4,Bi=01,R=0,Q=1000,Di=10.The numerical implementation could be adapted by taking tf=2 for solving the related MRDE of the above stochastic linear singular fuzzy system with the matrix A1. The appropriate matrices are substituted in Eq. (2), the MRDE is transformed into DAE in k11 and k12. In this problem, the value of k22 of the symmetric matrix K1(t) is free and let k22=0. Then the optimal control of the system can be found out by the solution of MRDE.To solve the MRDE, each chromosome is split uniformly in 36 parts and population size is 100. In the computation process, the parameters are taken as 0.01 for replication rate, 0.9 for the crossover probability and 0.05 for the mutation rate.After 350 generations, the following expressions satisfy the fitness function and the value of the fitness function tends to 0. The expressions also satisfy the terminal conditions. Hence the solution of the DAE/MRDE is obtained and it is given below:Expressions:k11=187e(7/4(2−t))−47,k12=27e(7/4(2−t))−27.The numerical solutions of MRDE are calculated and displayed in Table 4using the GP. Since this problem is having an explicit solution, the GP solution is equivalent to exact solution of the DAE. GP solution curves are shown in Figs. 5 and 6. In Fig. 5, the values of t are noted in the X-axis and the values of k11 are placed in the Y-axis. Similarly in Fig. 6, the values of t and k12 are in X-axis and Y-axis respectively. The parse trees for the solutions are given in Figs. 7 and 8.Similarly the solution of the above system with the matrix A2 can be found out using genetic programming.Example 2Consider the optimal control problem:MinimizeJ=E12xT(tf)FiTSFix(tf)+12∫0tf[xT(t)Qx(t)+uT(t)Ru(t)]dtsubject to the stochastic linear quadratic singular T-S fuzzy system Ri: If x1 is T1i(m1i, σ1i), i = 1,2, thenFidx(t)=[Aix(t)+Biu(t)]dt+Diu(t)dW(t),x(0)=x0,t∈[0,tf],whereS=200000000,Fi=100000000,A1=−1110−2100−3,A2=−2110−3100−4,Bi=001,R=0,Q=100000000,Di=100.The numerical implementation could be adapted by taking tf=2 for solving the related MRDE of the above stochastic linear singular fuzzy system with the matrix A1. The appropriate matrices are substituted in Eq. (2), the MRDE is transformed into DAE in k11, k12 and k13. In this problem, the value of k22, k32, k23 and k33 of the symmetric matrix K1(t) are free and let k22=0, k32=0, k23=0 and k33=0. Then the optimal control of the system can be found out by the solution of MRDE.To solve the MRDE, each chromosome is split uniformly in 36 parts and Population size is 100. In the computation process, the parameters are taken as 0.01 for replication rate, 0.9 for the crossover probability and 0.05 for the mutation rate.After 500 generations, the following expressions satisfy the fitness function and the value of the fitness function tends to 0. The expressions also satisfy the terminal conditions. Hence the solution of the DAE/MRDE is obtained and it is given below:Expressions:k11=149e(9/4(t−2))−49,k12=29e(9/4(t−2))−29The numerical solutions of MRDE are calculated and displayed in the Table 5using the GP. Since this problem is having an explicit solution, the GP solution is equivalent to exact solution of the DAE. GP solution curves are shown in Figs. 9 and 10. In Fig. 9, the values of t are noted in the X-axis and the values of k11 are placed in the Y-axis. Similarly in Fig. 10, the values of t and k12 and k13 are in X-axis and Y-axis respectively. The parse trees for the solutions are given in Figs. 11 and 12.Similarly the solution of the above system with the matrix A2 can be found out using genetic programming.

@&#CONCLUSIONS@&#
