@&#MAIN-TITLE@&#
A heuristic solution for model checking graph transformation systems

@&#HIGHLIGHTS@&#
In software system development, modeling per-se without analysis capabilities is not enough.One of the best analysis solutions is model checking.The problem is that when state space is too large, model checking cannot be used.We suggest using genetic algorithm to avoid searching the entire state space.The experimental results of the approach are promising.

@&#KEYPHRASES@&#
State space explosion,Model checking,Graph transformation systems,Genetic algorithm,

@&#ABSTRACT@&#
One of the commonly used techniques to verify software and hardware systems which have been specified through graph transformation system (GTS), especially safety critical ones, is model checking. However, the model checking of large and complex systems suffers from the state space explosion problem. Since genetic algorithm (GA) is a heuristic technique which can be used to search the state space intelligently instead of using exhaustive methods, in this paper, we propose a heuristic approach based on GA to find error states, such as deadlocks, in systems specified through GTS with extra large state space. To do so, in each step of space exploration our algorithm determines which state and path should be explored. The proposed approach is implemented in GROOVE, a tool for model checking graph transformation systems. The experimental results show that our approach outperforms significantly in comparison with existing techniques in discovering error states of models with large state space.

@&#INTRODUCTION@&#
Correctness is one of the most desirable properties for any software system. A great part of each developing approach is devoted to assess the correctness of the system; however, faults and errors are common. The sooner errors are found the better results can be achieved [1]. Hence, model-based verification techniques should be used before implementation to decrease the cost and the risk and also to increase the quality of the product. To do so, it is necessary to use an accurate approach to specify models, and thus, using formal methods for this purpose can be one of the best solutions.Graphs and diagrams provide a very useful, direct, and intuitive means to describe software systems [2]. Graph transformation systems (GTS) [2,3] provide the formal foundations to convert graphs and diagrams into formal specifications. Even though GTS has not been very popular for years, it is able to capture the systems behavior naturally and succinctly. However, modeling per-se is not enough. Proper verification solutions are mandatory to convince people of the actual benefits provided by modeling. Different approaches already exist to verify GTS through model checking [4–6]. All these approaches only deal with a priori bounded transition systems because of the nature of model checking techniques in general. However, in many cases, the transition system tends to be too large. Thus, the state space explosion problem occurs. In this case the usual verification approaches like [4–11] cannot be useful.Although there exists different approaches, like symbolic verification [12,13], partial order reduction [14,15], symmetry checking methods [16–19] and scenario-driven model checking [1] for the systems specified through GTS, almost all of these methods use exhaustive search on the state space and thus suffer from the state explosion problem. For the cases in which the usual approaches cannot be employed due to the size of the state space, using heuristic approaches like GA can be a proper solution.Genetic algorithms are usually used for optimization problems but in this work, we propose a method using GA to find errors such as deadlocks in systems specified through GTS. Since it is not possible to search all the states, our approach chooses a subset of them to be explored using GA. We implement the proposed approach through GROOVE [20,21], a toolset to generate state space for GTS specification. In this paper, we concentrate more on searching deadlocks which are a sort of safety properties.The rest of the paper is organized as follows. In Related works Section, we review some of the already proposed solutions for dealing with state space explosion. In Background Section, we briefly introduce the required background. Proposed method Section presents our proposed approach to exploration of the state space using GA. Our algorithm implementation is described in Implementation Section. In Evaluation Section, we employ the proposed method for several known problems and consequently we discuss the results of our experiments. Finally, we conclude the paper and highlight the future works in Conclusion and future works Section.

@&#CONCLUSIONS@&#
