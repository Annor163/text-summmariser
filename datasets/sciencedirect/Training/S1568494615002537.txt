@&#MAIN-TITLE@&#
Efficient DE-based symbiotic cultural algorithm for neuro-fuzzy system design

@&#HIGHLIGHTS@&#
These should been changed into A differential-evolution-based symbiotic cultural algorithm to neuro-fuzzy systems.Using symbiotic evolution to decompose a fuzzy system into multiple subpopulations.Randomly selects fuzzy rules from subpopulations that combine to be evaluated.Using various mutation strategies of DE as five knowledge sources in belief space.The knowledge sources influence the population space to guide the feasible search space.

@&#KEYPHRASES@&#
Differential evolution,Symbiotic evolution,Cultural algorithm,Neuro-fuzzy systems,Nonlinear control system,

@&#ABSTRACT@&#
This study proposes a differential-evolution-based symbiotic cultural algorithm (DESCA) for the implementation of neuro-fuzzy systems (NFS) to solve nonlinear control system problems. DESCA adopts symbiotic evolution to decompose a fuzzy system into multiple fuzzy rules as multiple subpopulations. In addition, DESCA randomly selects fuzzy rules from different subpopulations that combine into a complete solution whose performance is be evaluated. Moreover, DESCA uses various mutation strategies of differential evolution as five knowledge sources in the belief space. These knowledge sources influence the population space in the cultural algorithm and can be used as models to guide the feasible search space. Finally, the proposed algorithm is applied to various simulations. The results demonstrate the effectiveness of this approach.

@&#INTRODUCTION@&#
Neuro-fuzzy system (NFS) was proposed in 1990 [1–4] and is widely used to solve problems in various fields. Neuro-fuzzy systems introduce not only the computational power of neural networks into fuzzy systems but also the human-like thinking and reasoning of fuzzy systems into neural networks. The Takagi–Sugeno–Kang-type (TSK-type) neuro-fuzzy system is well known in the field of neuro-fuzzy systems. The consequential parts of a TSK-type neuro-fuzzy system are a linear polynomial of input variables and a network output that is a local approximation of the target output. However, the consequential parts of a traditional TSK-type neuro-fuzzy system do not have the necessary mapping ability to treat high-dimensional nonlinear problems. In this study, a specific NFS based on our previous research is used [5]. The consequential part of NFS adopts the functional link neural network [6], which can effectively solve the problems of TSK-type neuro-fuzzy systems.Many researchers use evolutionary algorithms to adjust the parameters of the neuro-fuzzy systems [7–9], such as the differential evolution (DE) [10–14] and cultural algorithm (CA) [15–18]. Both these algorithms are good choices as they have excellent search abilities, and converge faster than any other traditional optimization approach. However, there are problems of falling into a local optima and prematurely converging in these algorithms. The notion of symbiotic evolution [19,20] represents a fitness value sharing mechanism. Symbiotic evolution differentiates a set of solutions into several partial solutions that can be characterized as specializations. A single partial solution cannot represent a complete solution to the problem. In other words, the composition of a complete solution must also include other specializations. The specialization behavior ensures population diversity, which prevents the population from prematurely converging to a local optimum.This study presents a differential-evolution-based symbiotic cultural algorithm (DESCA) for the NFS model. The proposed DESCA uses symbiotic evolution, in which one individual represents a single fuzzy rule and several individuals of different subpopulations are randomly selected to combine into a fuzzy system to evaluate its performance. In addition, DESCA implements five knowledge sources in the belief space of the CA through five mutation strategies of DE.The remainder of this paper is organized into four sections. Section 2 describes the structure of the NFS model. Section 3 describes the process of the proposed DESCA approach. Section 4 presents the simulation results for nonlinear control problems, and the conclusions are presented in Section 5.This section describes the specific NFS [5] based on our previous research and uses a nonlinear combination of input variables. Each fuzzy rule corresponds to a functional link neural network (FLNN) [6], comprising of a functional expansion of input variables. The NFS model realizes a fuzzy if-then rule in the following form:(1)Rule-j:IFx1isA1jandx2isA2j…andxiisAij…andxNisANjTHENyˆj=∑k=1Mwkjϕk=w1jϕ1+w2jϕ2+⋯+wMjϕMwhere xiis the input variable,yˆjis the output variable, Rule-j is the jth rule, Aijis the linguistic term of the precondition component with a Gaussian membership function, N is the number of input variables, wkjis the link weight of the local output, ϕkis the trigonometric basis function of the input variables, and M is the number of basis functions.The structure of the NFS model is shown in Fig. 1, in which linguistic layer by a Gaussian-type membership function,μAij(xˆi), is defined by(2)μAij(xˆi)=exp−[xˆi−mij]2σij2,where mijand σijare the mean and variance of the Gaussian membership function, respectively, of the jth term of the ith input variable xi.The collection of fuzzy sets Aj={A1j, …, ANj} pertaining to the precondition part of Rulejforms a fuzzy region that can be regarded as a multi-dimensional fuzzy set whose membership function is determined by(3)μAj(xˆ)=∏i=1NμAij(xˆi).Nodes in consequent layer only receive the signal, which are the output from the rule layer and a functional link neural network. Finally, the output node integrates all of the actions recommended by the rule layer and the consequent layer and acts as a defuzzifier with,(4)yˆ=∑j=1RμAj(xˆ)yˆj'∑j=1RμAj(xˆ)=∑j=1RμAj(xˆ)∑k=1Mwkjϕk∑j=1RμAj(xˆ),where R is the number of fuzzy rules,yˆis the output of the SONFS model, wkjis the corresponding link weight of functional link neural network, and ϕkis the functional expansion of input variables [6]. The functional expansion uses a trigonometric polynomial basis function, given byxˆ1sin(πxˆ1)cos(πxˆ1)xˆ2sin(πxˆ2)cos(πxˆ2)for two-dimensional input variables. Therefore, M is the number of basis functions, M=3×N, where N is the number of input variables.This section describes the proposed DESCA to adjust the parameters of the NFS model. DESCA adopts symbiotic evolution—an individual is used to represent a partial solution (single fuzzy rule). DESCA randomly selects several individuals to form the complete solution (fuzzy system) whose performance has to be evaluated. Moreover, DESCA adopts five different mutation strategies of DE to implement the five knowledge sources in the belief space of CA, and uses these knowledge sources to guide each individual to find the optimum. These five knowledge sources contain normative knowledge (ranges of acceptable behaviors), situational knowledge (memories of successful solutions), domain knowledge (relationships and interactions of domain objects), topographic knowledge (spatial patterns of behavior), and historical knowledge (temporal patterns of behavior) [17]. DESCA consists of four major phases: the initialization phase, the evaluation phase, the reproduction phase, and the belief space adjustment phase. First, the initialization phase creates subpopulation and belief space. Second, the evaluation phase uses the fitness function to evaluate the performance of each individual. Third, the reproduction phase generates new individuals and selects survivors to be held in reserve for the next phase. Finally, the belief space adjustment phase uses the acceptance function to determine the number of individuals accepted into the belief space. The proposed DESCA defines a maximum number of generations as the termination condition. The algorithmic description of DESCA is summarized in Table 1.(1)Coding stepThe first step consists of coding a fuzzy rule into an individual. The coding of the parameters into an individual is shown in Fig. 2, where the elements of the individual, mijand σij, are the mean and variance of the ith input variable and the jth rule of the Gaussian membership function, respectively, andwkjrepresents the corresponding link weight of the consequent part that is connected to the jth rule node. In this study, the parameters are real numbers representing the elements of an individual.(2)Subpopulation space initializationIn this step, each elementxi,j,kgmust be randomly created in the range [0,1], where i=1, 2, …, PS represents the ith individual for each generation g; j=1, 2, …, D represents the jth dimension; and k=1, 2, …, R represents the kth subpopulation. In addition, PS denotes the subpopulation size, D denotes the number of parameters of a fuzzy rule, and R represents the number of fuzzy rules.(3)Belief space initializationThe belief space is a library of information in which an individual of a population space can store their experiences and from where the information can be fed back to other individuals for indirect learning. The initial belief space is created as an empty set.The difference between symbiotic evolution and traditional evolutionary algorithms is that an individual of a subpopulation in the symbiotic evolution algorithm is only a partial solution. In the subpopulation, each individual is a target for a partial solution (fuzzy rule) that can be combined with other partial solutions currently in the population to arrive at a successful complete solution (fuzzy system). Fig. 3shows the structure of a subpopulation in the symbiotic evolution algorithm.To evaluate the performance of a fuzzy system, the fitness function is defined as follows:(5)f(x)=11+1/Nt∑s=1Nt(ys−y¯s)2,where ysis the model output of the sth data,y¯sis the desired output of the sth data, and Ntis the number of training data.In this study, the fitness value of an individual (fuzzy rule) is computed as the sum of the fitness values of all feasible combinations of that rule with all other randomly selected rules and then dividing this sum by the total number of combinations. The calculation steps of the fitness value are as follows.Step 1Randomly select R individuals (fuzzy rules) from each subpopulation of size PS to compose a complete fuzzy system.Using Eq. (5), evaluate the performance of each fuzzy system, which is composed by symbiotic evolution.Divide the fitness value of the fuzzy system by R and assign it to the randomly selected individuals that were used to compose the fuzzy system in Step 1.Accumulate the divided fitness values of each individual calculated in Step 3.Repeat the earlier steps until each individual in each subpopulation has been selected, and choose the best performing fuzzy system.Divide the accumulated fitness value of each subpopulation by the number of times it has been selected.There are five types of knowledge sources in the belief space to influence the generated individual. In this study, the knowledge source selection is determined by the roulette-wheel selection mechanism. According to the individual's performance for each generated knowledge source, the size of the area under the roulette-wheel is adjusted. For every generation, each individual in the population is influenced by one of the knowledge sources based on the roulette-wheel area. Each of the five knowledge sources initially occupies 20% of the roulette-wheel area.The performance of the knowledge source is obtained by calculating the average fitness value of all individuals generated using each knowledge source. The average fitness value of individuals generated by a particular knowledge source is determined as follows:(6)avrℓ=∑i=1mf(xi)m,where m represents the number of generated individuals for the ℓth knowledge source and f(xi) is the fitness value of the ith individual.Next, assign the roulette-wheel area based on the average performance of each knowledge source as follows:(7)pℓ=avrℓ∑i=15avri,where pℓ is the percentage of the roulette-wheel area for the ℓth knowledge source.The proposed DESCA uses five mutation strategies of DE to attain the five knowledge sources of the belief space to influence a population space.(a)Normative knowledgeNormative knowledge is represented as a set of intervals, which is a promise range for good or acceptable solutions. In this study, the differential mutation strategy DE/rand/1 (i.e., the base vector is randomly chosen and a single scaled vector difference is added to it) is used to implement the normative knowledge. The following equation represents the influence of the normative knowledge:(8)vi,j,kg=xr0,j,kg+F⋅xr1,j,kg−xr2,j,kg,ifxr0,j,kg<ljxr0,j,kg−F⋅xr1,j,kg−xr2,j,kg,ifxr0,j,kg>ujxr0,j,kg+F⋅(xr1,j,kg−xr2,j,kg),otherwise,where the scaling factor F∈(0, 1] is a control parameter for scaling the difference vector. Furthermore,xr0,j,kg,xr1,j,kgandxr2,j,kgare randomly selected individuals in the kth subpopulation, and r0≠r1≠r2≠i. Finally, lj and ujare the lower and upper bounds of the jth dimension in the belief space, respectively.(b)Situational knowledgeThe best individual of the evolutionary search process is used as a model for situational knowledge to guide the other individuals in the population space. The differential mutation strategy DE/best/1, which selects the best-so-far vector (best) as the base vector and adds a single scaled vector difference to it, is employed in this study. The information of the best individual of each evolutionary generation must be stored in the situational knowledge. The function is described as follows:(9)vi,j,kg=xbest,j,kg+F⋅(xr1,j,kg−xr2,j,kg),wherexbest,j,kgis the best individual of the gth generation in the belief space of the kth subpopulation,xr1,j,kgandxr2,j,kgare randomly selected individuals, andxbest,j,kg≠xr1,j,kg≠xr2,j,kg≠xi,j,kg.(c)Domain knowledgeDomain knowledge was originally designed to predict the search direction. If the gradient and slope information in the search process can be effectively obtained, then the fitness increase can be predicted. Therefore, the domain knowledge uses a trigonometric mutation strategy [14] as a local search operator, and the mutation strategy is performed according to the following formulation:(10)vi,j,kg=xr0,j,kg+xr1,j,kg+xr2,j,kg3+(P1−P0)⋅(xr0,j,kg−xr1,j,kg)+(P2−P1)⋅(xr1,j,kg−xr2,j,kg)+(P0−P2)⋅(xr2,j,kg−xr0,j,kg),whereP0=f(xr0,j,kg)/P′,P1=f(xr1,j,kg)/P′,P2=f(xr2,j,kg)/P′,P′=f(xr0,j,kg)+f(xr1,j,kg)+f(xr2,j,kg)and f(·) represent the fitness function values of the individuals.(d)Topographical knowledgeIn the process of evolution, topographical knowledge creates an environment for mapping the fitness landscape to effectively manage the memory in a high-dimensional space. This study uses a tree structure to implement the topographical knowledge. The root of the tree structure can only have two children that represent two differential mutation strategies,xi,bestg−xi,jgandxi,r1g−xi,r2g. The idea of the influence function is represented by the differential mutation strategy DE/current-to-best/1. This function is described as follows:(11)vi,j,kg=xi,j,kg+F⋅xbest,j,kg−xi,j,kg+F⋅xr1,j,kg−xr2,j,kg,ifxi,j,kg<ljxi,j,kg−F⋅xbest,j,kg−xi,j,kg−F⋅xr1,j,kg−xr2,j,kg,ifxi,j,kg>ujxi,j,kg+F⋅(xbest,j,kg−xi,j,kg)+F⋅(xr1,j,kg−xr2,j,kg),otherwise,wherexi,j,kgis the current individual andxbest,j,kgis the best individual in the belief space of the kth subpopulation.(e)Historical knowledgeHistorical knowledge temporally stores a list of the past best individuals to facilitate the backtracking or retracing of actions. In the later stages of evolution, the diversity of the population space will slowly reduce. If this happens, the best individual will be used as a paragon leading to premature convergence. To account for a fast search without early convergence, a new mutation strategy using the wth best individual in history, called DE/current-to-w past best, is proposed. The formula is described as follows:(12)vi,j,kg=xi,j,kg+F⋅xbest,j,kw−xi,j,kg+F⋅xr1,j,kg−xr2,j,kg,ifxi,j,kg<ljxi,j,kg−F⋅xbest,j,kw−xi,j,kg−F⋅xr1,j,kg−xr2,j,kg,ifxi,j,kg>ujxi,j,kg+F⋅(xbest,j,kw−xi,j,kg)+F⋅(xr1,j,kg−xr2,j,kg),otherwise,wherexbest,j,kwis randomly chosen as one of the wth best individuals in the belief space.The point-to-point recombination operator, called crossover operator, is used to increase the potential diversity of the population. The elementsui,j,kgof the trial vector are inherited byxi,j,kgandvi,j,kg, which is conditional on the crossover probability (CR∈[0, 1]) as follows:(13)ui,j,kg=vi,j,kg,ifRand(j)≤CRxi,j,kg,ifRand(j)>CR,where Rand(j)∈[0, 1] is the jth random number generator.The proposed DESCA applies selection pressure to choose the current and trial individuals that can survive to the next generation. The selection is based on the fitness values betweenxi,j,kgandui,j,kgas shown below:(14)xi,j,kg+1=ui,j,kg,iff(ui,j,kg)≥f(xi,j,kg)xi,j,kg,otherwise,where f(·) represents the fitness function value of the individual.The exemplary individuals of the population space are put into the belief space by the acceptance function. The number of accepted exemplary individuals reduces as the number of generations increases, as follows:(15)Naccepted=n%⋅PS+n%g⋅PS,where n% is a parameter that is set by the user and must specify the top-performing 20% [18], PS is the population size, and g represents the gth generation.Nonlinear control system problems are used to evaluate the performance of the proposed DESCA. The proposed DESCA approach is adopted to design controllers in two simulations: control of backing up a truck [21] and control of a ball and beam [22]. Furthermore, the performance of the proposed DESCA approach is compared with the performance of various DE mutation strategies including DE/rand/1, DE/best/1, and DE/current-to-best/1. DESCA has three parameters: a scale factor of the difference vector F, a crossover rate control parameter CR, and a population size PS. In general, the larger PS, the more robust will be the search, with increased computational cost. However, a large CR leads to large perturbations and a slow convergence speed. On the other hand, a low CR will lead to rapid loss of diversity. Additionally, if F is small, it will lead to extensive exploitation, and thus a much higher likelihood of non-convergence. On the other hand, a large value of F will lead to over-exploration and a significantly reduced convergence speed. Usually, the PS is 5–10 times the number of the dimensionality of the problem. The choice of CR is initially recommended to be [0.8, 1], and the range for F is always [0.5, 1] in [10]. Table 2presents the initial parameters of the two simulations. In this study, the number of rules and the maximum number of generations depend on the complexity of the problem. Therefore, the number of rules and the maximum number of generations are carefully examined in extensive experiments, and set as nine rules and 2000 generations.Backing a truck into a loading dock is difficult. It is a nonlinear control problem for which no traditional control method exists [21]. Fig. 4shows the simulated truck loading and unloading. The truck's position is determined by three state variables ϕ, x, and y, where ϕ is the angle between the truck and the horizontal, (x, y) is the coordinate that presents the center position of rear of the truck in the plane. Positive values of θ indicate clockwise rotations of the steering wheel, and negative values indicate counterclockwise rotations. The truck is placed at some initial position and is backed up while being steered by the controller. The target of this problem is to use only backward motions of the truck, and make it arrive in the desired loading dock (xdesired, ydesired) at a right angle (ϕdesired=90°). The truck moves backward as the steering wheel moves through a fixed distance (df) in each step. The loading region is limited to the plane [0, 100]×[0, 100].The input and output variables of DESCA method must be specified. The controller has two inputs: truck angle f and cross position x. When the clearance between the truck and the loading dock is assumed to be sufficient, the y coordinate is not considered as an input variable. The output of the controller is the steering angle θ. The ranges of the variables x, ϕ and θ are as follows:(16)0≤x≤100(17)−90∘≤ϕ≤270∘(18)−30∘≤θ≤30∘.The equations of backward motion of the truck are shown as follows:(19)x(k+1)=x(k)+dfcosθ(k)+cosϕ(k)y(k+1)=y(k)+dfcosθ(k)+sinϕ(k)ϕ(k+1)=tan−1lsinϕ(k)+dfcosϕ(k)+sinθ(k)lcosϕ(k)−dfsinϕ(k)+sinθ(k)where l is the length of the truck. Eq. (19) yields the next state from the present state.A 30 runs simulation is conducted, in which the average root mean square error (RMS) error of DESCA is approximately 2.5298. The learning curve of DESCA is compared with the other methods as shown in Fig. 5. Fig. 6(a)–(d) plots the trajectories of the moving truck controlled by DESCA, starting at initial positions (x, y, ϕ)=(a) (40, 20, −30°), (b) (10, 20, 150°), (c) (70, 20, −30°), and (d) (80, 20, 150°), after the training process has been terminated. Table 3presents the best RMS error and the average RMS error used to evaluate the performance of the method. According to these results, the proposed DESCA method outperforms various existing methods.Fig. 7presents the ball and beam system [22]. The beam is made to rotate in the vertical plane by applying a torque at the center of rotation, and the ball is free to roll along the beam. The ball must remain in contact with the beam. The ball and beam system can be written in state-space form as(20)x˙1x˙2x˙3x˙4=x2B(x1x42−Gsinx3)x40+0001u,y=x1,wherex=x1,x2,x3,x4T≡r,r˙,θ,θ˙Tis the state of the system, and y=x1≡r is the output of the system. The control u is the angular acceleration(θ¨), and the parameters B=0.7143 and G=9.81 are set in this system. The purpose of the control is to determine u(x) such that the closed-loop system output y would converge to zero under different initial conditions. According to the input/output-linearization algorithm [22], the control law u(x) is determined as follows: For state x, computev(x)=−α3ϕ4(x)−α2ϕ3(x)−α1ϕ2(x)−α0ϕ1(x), where ϕ1(x)=x1, ϕ2(x)=x2, ϕ3(x)=−BGsinx3, ϕ4(x)=−BGx4cosx3, and αiare chosen so that s4+α3s3+α2s2+α1s+α0 is a Hurwitz polynomial. Compute α(x)=−BGcosx3 andb(x)=BGx42sinx3, thenux=[v(x)−b(x)]/a(x).In this simulation, the differential equations are solved using the second/third-order Runge–Kutta method. The NFS model is trained to approximate the aforementioned conventional controller of a ball-and-beam system.u(x)=[v(x)−b(x)]/a(x)is adopted to generate the input/output training pairs, where x is obtained by randomly sampling 200 points in the region U=[−5, 5]×[−3, 3]×[−1, 1]×[−2, 2]. The controller after learning is tested under the following four initial conditions: x(0)=[2.4, −0.1, 0.6, 0.1]T, [1.6, 0.05, −0.5, −0.05]T, [−1.6, −0.05, 0.5, 0.05]T, and [−2.4, 0.1,−0.6,−0.1]T. After thirty experiments, the learning curves of the average performance of DESCA and the other methods are plotted in Fig. 8. The controller after learning is tested under the following four initial conditions: x(0)=[2.4, −0.1, 0.6, 0.1]T, [1.6, 0.05, −0.5, −0.05]T, [−1.6, −0.05, 0.5, 0.05]T, and [−2.4, 0.1, −0.6, −0.1]T. Fig. 9plots the output responses of the closed-loop ball and beam system controlled by DESCA. These responses approximate those of the original controller under the four initial conditions. Fig. 10also shows the behavior of the four states of the ball-and-beam system, starting from the initial condition [−2.4, 0.1, −0.6, −0.1]T. In this figure, the four states of the system gradually decay to zero. These results show the excellent control capability of the trained DESCA method. Table 4presents the simulation results. These results prove that the proposed DESCA is better than the other methods.This study proposed DESCA for NFS. The proposed DESCA approach uses symbiotic evolution, which is an evolution mechanism of the fuzzy rule itself in each subpopulation. DESCA uses five mutation strategies of DE to implement the five knowledge sources of the belief space in order to influence a population space. The proposed DESCA has several advantages: (1) it uses symbiotic evolution to achieve increased diversity and a faster nonpremature convergence, (2) it uses five different knowledge sources in the reproduction phase to increase the global search capability, and (3) it has a better performance and faster convergence rate than the other methods as shown in Section 4.Although DESCA can perform better than the other methods, two advanced topics on the proposed DESCA should be addressed in future research. First, in addition to the simulations done in this study, the proposed DESCA will be used to solve many practical problems, including control of magnetic levitation systems and control of the inverted pendulum system in our laboratory. Second, there are three control parameters that influence the performance of DESCA. These parameters should be automatically selected using an effective method in the future.

@&#CONCLUSIONS@&#
