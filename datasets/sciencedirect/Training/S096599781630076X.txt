@&#MAIN-TITLE@&#
Investigating the impact of developer productivity, task interdependence type and communication overhead in a multi-objective optimization approach for software project planning

@&#HIGHLIGHTS@&#
Proposed approach adopts MOGAs to minimize software project cost and duration.Solutions representing resource allocations and task schedules are evolved.Objective functions consider productivity of developers and task interdependence.The performance and scalability of four MOGAs were compared using several datasets.MOCell, NSGA-II and SPEA2 outperform PAES in the majority of project instances.

@&#KEYPHRASES@&#
Productivity-based software project planning,Task scheduling,Human resource allocation,Multi-objective optimization,Task interdependence,Communication overhead,

@&#ABSTRACT@&#
One of the most important activities in software project planning involves scheduling tasks and assigning them to developers. Project managers must decide who will do what and when in a software project, with the aim of minimizing both its duration and cost. However, project managers often struggle to efficiently allocate developers and schedule tasks in a way that balances these conflicting goals. Furthermore, the different criteria used to select developers could lead to inaccurate estimation of the duration and cost of tasks, resulting in budget overruns, delays, or reduced software quality. This paper proposes an approach that makes use of multi-objective optimization to handle the simultaneous minimization of project cost and duration, taking into account several productivity-related attributes for better estimation of task duration and cost. In particular, we focus on dealing with the non-interchangeable nature of human resources and the different ways in which teams carry out work by considering the relationship between the type of task interdependence and the productivity rate of developers, as well as the communication overhead incurred among developers. The approach is applied to four well-known optimization algorithms, whose performance and scalability are compared using generated software project instances. Additionally, several real-world case studies are explored to help discuss the implications of such approach in the software development industry. The results and observations show positive indications that using a productivity-based multi-objective optimization approach has the potential to provide software project managers with more accurate developer allocation and task scheduling solutions in a more efficient manner.

@&#INTRODUCTION@&#
The success of a software project relies on delivering end-products on time, within budget and with all the required features and functionality. These goals can be realized only if the necessary planning, organizing, staffing, directing and control activities are carried out correctly by project managers. Furthermore, considering the ever-increasing size and complexity of modern-day software products, development companies face escalating pressure of having to provide software products sooner and cheaper than their competitors in order to remain viable. Therefore, a primary concern for software project managers is to make sure the right developers are selected while effectively balancing the duration and cost of a project, in order to prevent unnecessary cost and schedule overruns in subsequent stages of development and any overall reduction to the level of quality of the end-products. Consequently, it is important for software project managers to have support during resource allocation and scheduling activities through tools that will help them successfully select and arrange the most suitable (teams of) developers to guarantee the success of the software project, whilst satisfying both time and budgetary criteria simultaneously.Human resource allocation and task scheduling in software development projects is a naturally complex and computationally-intensive process since multiple objectives need to be satisfied. For this reason, the problem is classed as a special case of the resource-constrained project scheduling problem (RCPSP), and therefore is considered to be an NP-hard problem, meaning that there is no algorithm known to be able to solve it in polynomial time [1,2]. Project managers often struggle to use a manual approach because there are many different combinations to be examined. Thus, an exhaustive search to find the best solution will often prove inadequate and impractical, especially if they have a limited amount of time at their disposal. As a result, the majority of works view the problem as an operational research problem, where proposed solutions make use of techniques that carry out combinatorial optimization of various software criteria, such as cost, duration, or number of defects. Examples include mathematical modelling methods and computational intelligence techniques, where specialized algorithms are employed to locate optimal or near-optimal feasible solutions as a means of providing better and faster support to decision-makers. Several of these approaches emphasize that the allocation of developers and scheduling of tasks needs to take into account certain attributes of the available workforce, such as the capabilities and experience of developers in certain skills, as well as their cost.There are, however, several other attributes that should also be addressed, the influence of which could allow project managers in the software industry to make more accurate staffing decisions and estimates during their planning activities earlier on in the project. Specifically, the proposed approach uniquely investigates the inclusion of productivity-related attributes concerning:•the productivity rate of developers.the way in which productivity rates are combined within teams based on the type of work carried out (known as task interdependence type).the communication overhead that is incurred when developers work together and collaborate.Including these attributes during planning activities is important, especially in cases where tasks are allowed to be undertaken by several developers whose efforts need to be combined to produce a task's output. Consequently, these attributes reflect on both the duration and cost of a software project, as well as the quality of the end-product.The paper contributes to the existing research area in two ways. First, it adapts the RCPSP of human resource allocation and task scheduling in software development projects so as to include these overlooked productivity-related attributes. Second, it presents a novel attempt to solve the problem of minimizing the duration and cost of a software development project in its initial stage with the use of a multi-objective optimization incorporating the productivity-related attributes. In order to help achieve this, several objective and constraint functions are proposed to guide the generation of feasible and optimal solutions. Also, we attempt to include hard, realistic assumptions and constraints concerning the availability and suitability of developers that would normally affect the planning decisions of software project managers. The inclusion of these assumptions adds significantly to the complexity of the adapted RCPSP problem we attempt to solve, which makes it that much harder for the optimization process to find feasible and optimal solutions. We therefore employ several different variations of multi-objective genetic algorithms (MOGAs) to carry out the optimization and pose our first research question:R1.	How do different MOGAs perform in terms of generating (near-)optimal solutions with respect to our proposed approach to resource allocation and task scheduling?Given the fact that as current technology capabilities are constantly improved, software systems progressively become larger. It is also important for our approach to be applicable for varying sizes of projects undertaken by varying sizes of development companies. Consequently, we examine the issue of scalability by setting our second research question:R2.	How do different MOGAs behave in terms of scalability as the number of tasks and developers increases in our proposed approach to resource allocation and task scheduling?Furthermore, it is equally important to investigate the implications of the productivity-based attributes in practical software development settings. For this, several real-world projects were investigated. The ultimate goal is to provide an approach that accurately reflects both the manner with which these activities are carried out, and also the factors that may influence decisions taken by software project managers in an automated, efficient and less time-consuming way.The remainder of the paper is structured as follows: Section 2 provides an overview of recent related attempts that also use optimization techniques to solve the problem of human resource allocation and task scheduling in software projects. Section 3 gives a formal description of our proposed adaption of the RCPSP, which considers task type interdependence, developer productivity and communication overhead. Section 4 presents the multi-objective optimization process adopted to solve the problem. Section 5 explains the experiments carried out to evaluate the proposed approach with regards to the research questions. Section 6 presents the results obtained and the quality indicators employed to help compare the MOGA variations. Section 7 discusses several observations made in real-world projects concerning the applicability of our approach. Section 8 examines potential threats to validity and how certain limitations were addressed. Lastly, Section 9 presents a synopsis with concluding remarks and possible future directions.

@&#CONCLUSIONS@&#
This paper addressed the problem of human resource allocation and task scheduling for software development, which is one of the most challenging planning activities faced by project managers as they attempt to minimize the cost and duration of the project. We adapted the traditional RCPSP to include productivity-related attributes, focusing on the fact that developers possessing different rates of productivity carry out tasks at different speeds. We have also established that the nature of the work required to be carried out can influence how the individual contributions of developers are aggregated in terms of productivity. In addition, we also factored in the increase in the duration of a task due to communication overhead incurred while developers work together. Up until now, very few works have explored how these factors can be taken into consideration in software resource allocation and task scheduling. A multi-objective genetic algorithm approach is then applied to simultaneously minimize the duration and cost of a software project. A set of feasible and near-optimal solutions of developer allocations and task schedules were generated by evolving a population of candidate individuals with selection, recombination and mutation genetic operators. The fitness of each individual in the population was evaluated using two objective functions that assess how much time and money it will take the developer(s) assigned to complete each task based on their rate of productivity, the type of task interdependence and communication overhead. Additionally, in order to evaluate the validity of each individual, we applied two constraint functions that assess the degree to which each task has a developer assigned to carry it out and the degree to which the precedence relationships between tasks are satisfied. The benefit of using multi-objective optimization in our approach is that it is able to offer software project managers alternative near-optimal solutions rather than just one. If the criterion of a project manager is to allocate resources and schedule tasks so that the project finishes as soon as possible no matter the cost, then the choice would be made using solutions yielding a shorter make-span. Alternatively, if a project manager's goal is to allocate resources and schedule tasks so that the project costs as little as possible no matter its duration, then the selection would be based on solutions yielding lower cost. Otherwise, a project manager would look to choose a solution that balances the two criteria.Several experiments were carried out to evaluate the performance and applicability of our approach. Sixteen synthetic software project instances of varying size and available developers were constructed and used to compare four algorithms of multi-objective genetic algorithms, namely MOCell, NSGA-II, PAES, and SPEA2. The comparison was performed using the hypervolume quality indicator, which was calculated using median values that were generated over 100 runs of each algorithm for each project instance. From the results obtained, it was clear that MOCell, NSGA-II and SPEA2 were the most dominant of the four algorithms, managing to outperform PAES in the majority of project instances. This suggests that for our approach, these algorithms are more capable of providing developer allocations and task schedules that are closer to the optimal, as well as more diverse. Additionally, thirty-six project instances were used to compare the scalability of the algorithms. Each algorithm was again executed 100 times with each project instance. By averaging the hypervolume values across both the various task sizes and available developer sizes, the results indicated that PAES was able to scale better than the rest, despite producing solutions with lower quality.We also used data from a real-world project, the results of which provided encouraging signs on the applicability of our approach. The optimization managed to find solutions that were cheaper and with shorter make-spans compared to the initial resource allocation and task scheduling constructed by the supervising software project manager, and that these solutions were in fact more in line with the actual project cost and duration than the project manager's initial estimate. Finally, we also observed that student teams possessing varying levels of skills and competencies worked at different speeds depending on the type of task being carried out, hence enhancing our belief that task interdependence affects the way developers combine their efforts and rates of productivity, which ultimately translates into increases or decreases in task duration and cost.There are several potential topics that can be addressed in order to improve and enhance our current approach. First, a better representation of the productivity rates of developers may help provide more accurate estimations of the time and cost of a task. Since the topic of productivity is multifaceted and complicated, a thorough investigation is required to ensure that its usage generates solutions that are as realistic as possible. Also, there is a need to explore the rates of completion of software development tasks at different levels of productivity and to examine whether a saturation point exists where a task cannot be completed in a shorter duration regardless of how highly productive a developer is. Second, apart from communication overhead there are additional factors, such as organizational, human and process factors [25], which can be incorporated within our approach to adjust the increase or decrease of the duration of a task. A recent trend in software team staffing involves the integration of the personality types of developers [54,55]. For example, personality types have been used to allocate developers to tasks and roles that are best suited to their individual traits as it has been found to affect team productivity [56]. Also, personality types have been examined in relation to issues such as job satisfaction, performance, team cohesion and social conflict [57]. All these aspects could necessitate the adjustment of the duration and subsequent cost of a task to more realistic values. A comprehensive investigation, therefore, is required in order to accurately measure and integrate these factors during resource allocation, with a suitable mechanism for project managers to prioritize their criteria. Third, our approach currently assumes that developers are available to work solely and fully on one project. Realistically, however, this is not the case as developers may be assigned to work on other projects concurrently. To improve our approach we plan to incorporate degrees of resource dedication and availability, as well as resource levelling constraints. Another intended improvement involves handling the release of developers working on divisible tasks so that they are made available again once their contribution to such a task is over rather than have them be committed for its full duration. Last, other genetic algorithm variations, as well as alternative optimization techniques can be considered, such as swarm intelligence, in order to determine whether such methods are able to provide more diverse and even nearer-to-optimal resource allocation and task schedules.