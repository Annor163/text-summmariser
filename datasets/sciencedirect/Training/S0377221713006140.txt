@&#MAIN-TITLE@&#
Approximation algorithms for constructing some required structures in digraphs

@&#HIGHLIGHTS@&#
We consider a new problem of constructing some required structures in digraphs.The objective is to minimize the number of pieces of a specific material with length L.Up to now, it is the first time to consider this new model.We design four (asymptotic) approximation algorithms to construct the two structures.We propose two conjectures for these required structures in digraphs.

@&#KEYPHRASES@&#
Combinatorial optimization,Digraph,Structure construction,Inapproximability,(Asymptotic) approximation algorithms,

@&#ABSTRACT@&#
We consider a new problem of constructing some required structures in digraphs, where all arcs installed in such required structures are supposed to be cut from some pieces of a specific material of length L. Formally, we consider the model: a digraph D=(V, A; w), a structure S and a specific material of length L, where w: A→R+, we are asked to construct a subdigraph D′ from D, having the structure S, such that each arc in D′ is constructed by a part of a piece or/and some whole pieces of such a specific material, the objective is to minimize the number of pieces of such a specific material to construct all arcs in D′.For the two required structures: (1) a directed path from a node s to a node t and (2) a strongly connected spanning subdigraph, we design four approximation algorithms with constant performance ratios to solve the both problems, respectively.The shortest path problem and the minimum-cost strongly connected spanning subdigraph problem are two well-known combinatorial optimization problems in digraphs (also referred to networks), they have played important roles with many applications in some domains, such as information dissemination networks, electronic power transportation networks, fiber optic networks, Quality of Service (QoS) routing in high-speed networks, and there are many polynomial-time algorithms or approximation algorithms to solve these two problems and other related NP-hard combinatorial optimization problems (Papadimitriou & Steiglitz, 1998; Schrijver, 2003).Related to the shortest path problem, Hassin (1992) studied the constrained shortest path problem (CSP, for short) as follows. Let D=(V, A; c; d) be a digraph with n nodes, m arcs, and two fixed nodes s and t. Each arc (vi, vj)∈A has an associated positive integral cost cijand a positive integral dissemination delay dij. For any path Ps,tfrom s to t in D (simply, s–t path Ps,t), the cost c(Ps,t) and dissemination delay d(Ps,t) of Ps,tare defined as the sums of the costs and dissemination delays of all arcs on Ps,t, respectively. The CSP problem is asked to find a minimum-cost s–t path Ps,tin D such that dissemination delay d(Ps,t) along this path does not exceed a given bound d∗, i.e., the value c(Ps,t) is minimized among all paths Qs,tfrom s to t, satisfying the constraint d(Qs,t)⩽d∗.Although there are many polynomial-time algorithms to solve the shortest path problem (Papadimitriou & Steiglitz, 1998; Schrijver, 2003), the CSP problem is one NP-hard problem in Garey and Johnson (1979), and there are some approximation algorithms to solve the CSP problem, including some fully polynomial-time approximation schemes (FPTAS, for short) for its special versions (Ergun, Sinha, & Zhang, 2002; Hassin, 1992; Warburton, 1987).The CSP problem concerns two weight functions on the arc-sets in digraphs, but there are no relationships between such two different weight functions. For the version where there is a potential relationship between these two weight functions on the arc-sets in digraphs, Li, Li, and Lichen (2012) considered the subdivision-constrained routing requests problem (SCRR, for short), which is at least as hard as the set cover problem in Garey and Johnson (1979) even if all requests have the same source, then the authors designed a dynamic programming algorithm to find a path from a node s to other node t with total length no more than the given positive constant d∗ such that the number of the nodes uniformly inserted on such a path is minimized. A similar problem is the directed Steiner network problem (DSN, for short) studied by Chekuri, Even, Gupta, and Segev (2011), and they recently designed anO(k1/2+∊)-approximation algorithm to solve the DSN problem, where k is the number of distinct source-sink requests in any instance of the DSN problem.Another interesting problem studied by Lin and Xue (1999) and then by Chen et al. (2000) is the Steiner tree problem with minimum number of Steiner points (STP-MSP, for short), which is to find a Steiner tree interconnecting all k terminals with the minimum number of Steiner points such that each edge in the Steiner tree constructed has its Euclidean length no more than the given positive constant l, where k terminals are first placed in the Euclidean plane. The STP-MSP problem has an important application in wavelength-division multiplexing (WDM) optical network design. After Lin and Xue (1999) designed an 4-approximation algorithm to solve the STP-MSP problem, Chen et al. (2000) presented an 3-approximation algorithm to solve the STP-MSP problem and a polynomial-time approximation scheme (PTAS) for some special versions.In the real-world, certain specific material used to construct all edges in such a Steiner tree is sold only in length constraint, i.e., each piece of such a specific material has a finite length L (l⩽L). When we assume that the price of each piece of a specific material of length L is a constant, we should consider the minimum cost (equivalently, the minimum number) of pieces of such a specific material to construct all edges in a Steiner tree, rather than the minimum of the sum of lengths of all edges in a Steiner tree.Moreover, when we want to construct some required structures in digraphs, as well as a Steiner tree structure in the Euclidean plane, we should consider the general version where the lengths of some arcs in such structures may be greater than the length L. Now, we can use two steps to execute this construction process: (1) if an arc (u, v) in such a structure has length w(u, v) less than L, we must use a part, having length w(u, v), of a piece of such a specific material to construct the arc (u, v); (2) if an arc (u, v) in such a structure has length w(u, v) greater or equal to L, we first use I(u, v) whole pieces of such a material of length L and then a part, having length w(u, v)−I(u, v)·L, of such a specific material together to construct the arc (u, v), whereI(u,v)=w(u,v)L-1. By using this construction process, for each arc (u, v) in such a structure, we only permit this arc (u, v) to have a part with length less than L and then other I(u, v) whole pieces of such a specific material (if needing), and we may not consider any cost to patch all parts together to construct the arc (u, v) in this text. Thus, it is naturally asked how many pieces of such a specific material of length L can be used necessarily to construct all arcs in such a required structure? i.e., what is the minimum number of pieces of such a specific material of length L used in the construction process?Motivated by the preceding combinatorial optimization problems, especially by the STP-MSP problem, the SCRR problem and the DSN problem, we study a new problem of constructing some required structures in digraphs, that is formally defined as follows: a digraph D=(V, A; w), a structureSand a specific material of length L, where a length function w: A→R+, we are asked to construct a subdigraph D′ from D, having the structureS, such that each arc in D′ is constructed by a part of a piece or/and some whole pieces of such a specific material of length L, the objective is to minimize the number of pieces of such a specific material to construct all arcs in D′.For different structuresS, we may design some approximation algorithms to construct different subdigraphs D′ from D, where the construction process for arcs in each required structure is described in the preceding paragraph. To the best of our knowledge, it is the first time to consider this new model, and there are no approximation algorithms for this general problem and no polynomial-time algorithms to solve its special versions. This new model would have many applications in some domains.In this paper, we consider the following two structures required as subdigraphs. (1) When a structureSis as a directed path from a node s to another node t, we denote this problem as the constructing directed path problem (CDP, for short); (2) When a structureSis a strongly connected spanning subdigraph, we denote this problem as the constructing strongly connected spanning subdigraph problem (CSCSS, for short). The objective is to minimize the number of pieces of such a specific material of length L to construct all arcs in the structure, defined as (1) or (2), respectively.Since these two problems raise from the real-world, it needs some new strategy and methods to solve them. For these two structures from the special digraphs, such as either a simple directed path on n+1 nodes or a simple directed cycle on n nodes, where each arc in such a simple special digraph has its length weight w(e)⩽L, each of the CDP problem and the CSCSS problem becomes the bin-packing problem in Garey and Johnson (1979), which imply that these two problems cannot be approximated within performance ratio32-εfor any ε>0, unlessP=NP, by the inapproximability of the bin-packing problem (Vazirani, 2001). Thus, we will design some approximation algorithms to solve them, respectively.In this paper, we obtain the two main results: (1) We design an 2-approximation algorithm and an asymptotic74-approximation algorithm to solve the CDP problem; (2) For any ε>0, there is no approximation algorithm within performance ratio 2–ε for the CSCSS problem, unlessP=NP, and then we present an 4-approximation algorithm and an asymptotic72-approximation algorithm to solve the CSCSS problem.In order to clearly describe our algorithms designed in Section 3 to solve these two problems, we need some notations and terminology similar to the bin-packing problem in Coffman, Garey, and Johnson (1996), Garey and Johnson (1979), and Simchi-Levi (1994). For convenience, we may treat each piece of such a specific material of length L as a “bin” with capacity L, and when we consider an arc (u, v) in a digraph D, we may treat this arc (u, v) as an “item” of size w(u, v), and we denoteI(u,v)=w(u,v)L-1and w′(u, v)=w(u, v)−I(u, v)·L. As the preceding construction process in Section 1, for each arc (u, v) having length weight w(e), we may first use I(u, v) whole pieces of such a material of length L and then “tailor” a part with length w′(u, v) from a piece of such a specific material, implying that we use I(u, v) whole pieces and a part with length w′(u, v) from a piece of such a specific material together to construct the arc (u, v) in the structure, we may treat this process as “either this arc (u, v) with weight w(u, v) or the item of size w(u, v) is ‘packed’ into some bin(s) with capacity L”, i.e., we may “pack” the item of size w(u, v) into some bin(s) with capacity L. Moreover, we also denote two notations, by D=(V, A; w; L; s, t) and D=(V, A; w; L), to represent an instance of the CDP problem and the CSCSS problem, respectively. The other notations and terminology not defined can be found in Ergun et al. (2002), Papadimitriou and Steiglitz (1998), Schrijver (2003), and Warburton (1987).In Section 3, we shall present some strategy and methods to design four (asymptotic) approximations algorithms with constant performance ratios to solve these two problems, respectively; and we provide our conclusions and future work in the last section.The strategy to solve these two problems are roughly in the following steps: (1) if needing, modify the original weights of all arcs in digraphs as some new weights; (2) use some efficient algorithms to construct the structures required, depending on the new weights; (3) finally “pack” these arcs of the structures into some bins with capacity L, corresponding to the original weights in digraphs.The strategy and approximations algorithms in detail for these two problems are stated in the following subsections, respectively.For convenience, to avoid lengthy formulations of our main theorems in the sequel, we first present some notations. For any digraph D=(V, A; w) as an instance of the our problem indicated in the formulations of main theorems, we denote OUT as the number of necessary pieces of such a specific material to construct all arcs in the structure produced by our algorithm designed, OPT as the minimum number of necessary pieces of such a specific material to construct all arcs in the structure required, n and m as the numbers of the nodes and the arcs of the instance D, respectively.In this subsection, we study the constructing directed path problem (CDP). Since the CDP problem cannot be approximated within performance ratio32-εfor any ε>0, unlessP=NP, we design an 2-approximation algorithm and an asymptotic74-approximation algorithm to solve it.Our strategy to design a first approximation algorithm is in the following steps: (1) depending on the original weight function w(·), find a shortest s–t directed path Ps,t, where its arc-setA(Ps,t)={ei1,ei2,…,eik}; (2) use the First-Fit algorithm (FF, for short) in Coffman et al. (1996) for the bin-packing problem to pack the itemsw′(ei1),w′(ei2), …,w′(eik)of the arcs of Ps,tinto some bins with capacity L. The approximation algorithm for the CDP problem is described as follows.Algorithm 3.1CDP-1Input: a digraph D=(V, A; w; L; s, t);Output: a s–t directed path Ps,tand the number of bins used with capacity L.BeginStep 1Corresponding to the function w: A→R+, use the Dijkstra algorithm (Dijkstra, 1959) to compute a shortest s–t directed path Ps,t, where its arc-setA(Ps,t)={ei1,ei2,…,eik}.Step 2For each arceirin Ps,t, pack the item of sizeI(eir)·LintoI(eir)bins with capacity L, whereI(eir)=w(eir)L-1for r=1, 2, …, k. And letb1=∑r=1kI(eir)denote the number of bins used at this step.Step 3Use the FF algorithm (Coffman et al., 1996) to pack the items of sizesw′(ei1),w′(ei2),…,w′(eik)into some bins with capacity L, wherew′(eir)=w(eir)-I(eir)·Lfor r=1, 2, …, k. And denote b2 as the number of bins used at this step.Step 4Output the s–t directed path Ps,tat the step 1 and the numbers of bins used at the steps 2–3, i.e., OUT=b1+b2.End of Algorithm CDP-1TheAlgorithm 3.1(CDP-1) is an 2-approximation algorithm to solve the CDP problem, its running time isO(n2), and the bound of performance ratio in theAlgorithm 3.1is asymptotically tight.Suppose that Ps,tis a s–t directed path produced by the Algorithm 3.1 with the output value OUT=b1+b2, and thatPs,t∗is an optimal s–t directed path to the instance D=(V, A; w; L; s, t) for the CDP problem with the optimal value OPT, where minimum is taken among all s–t directed paths in D. We obtain the factwPs,t∗⩽L·OPT. And we shall prove the result OUT⩽2·OPT in the following steps.Since the Algorithm 3.1 uses the Dijkstra algorithm (Dijkstra, 1959) to produce a shortest s–t directed path Ps,t, corresponding to the function w(·), then we obtain the factw(Ps,t)⩽wPs,t∗.For each arceirin the shortest s–t directed path Ps,t, we first useI(eir)whole pieces of such a specific material with length L and leave a part with lengthw′(eir), implying that we use at leastb1=∑r=1kI(eir)whole pieces in total by now. When we pack the items {w′(e)∣e∈A(Ps,t)} of the all arcs in the s–t directed path Ps,tinto the b2 bins with capacity L at the step 3, there is at most one bin having the total sizes at mostL2, otherwise the number b2 of bins used may be reduced, and we finally obtain the fact∑e∈Ps,tw′(e)L>b2-12. Thus, we have the factOUT-12=b12+b2-12<∑e∈Ps,tI(e)·LL+∑e∈Ps,tw′(e)L=w(Ps,t)L⩽wPs,t∗L⩽OPTimplying OUT⩽2·OPT by the integral property.The running time of the Algorithm 3.1 comes from the following analysis: (1) the Dijkstra algorithm (Dijkstra, 1959) implies that the step 1 needs running timeO(n2)to compute a shortest s–t directed path Ps,t, corresponding to the weight function w: A→R+; (2) the step 2 needs at most running timeO(n)to pack all items of sizesI(eir)·Linto b1 bins, r=1, 2, …, k; (3) the FF algorithm (Coffman et al., 1996) needs at most running timeO(nlogn)to pack k items w′(e) of all arcs in the s–t directed path Ps,tinto b2 bins with capacity L. Hence, the whole algorithm needs its running timeO(n2).The asymptotic tightness of the bound of performance ratio in the Algorithm 3.1 comes from the following instance: the digraph D=(V, A; w; s, t), where the node set V={s, v1, v2, …, vk−1, u1, u2, …, u2k−2, t} and the arc-set A={(s, v1), (s, u1), (vk−1, t), (u2k−2, t)}∪{(vi, vi+1)∣i=1, 2, …, k−2}∪{(ui, ui+1)∣i=1, 2, …, 2k−3}, the weight function w: A→R+ satisfies the conditions: for any positive integers k and L, where0<ε<L4k-2, each arc e in the first s–t directed path P1=sv1v2⋯vk−1t has the weight w(e)=L and each arc e in the second s–t directed path P2=su1u2⋯u2k−2t has the weightw(e)=L2+ε. Then Algorithm 3.1 produces the shortest s–t directed path P2=su1u2⋯u2k−2t with output value OUT=2k−1, but the optimal solution for the CDP problem is the first s–t directed path P1=sv1v2⋯vk−1t with the optimal value OPT=k, implyingOUTOPT=2k-1k=2-1k→2(ifk→∞)This shows that the bound of performance ratio in the Algorithm 3.1 is asymptotically tight.This establishes the conclusion of the theorem.□In the remainder of this subsection, we present a new approximation algorithm to solve the CDP problem, which would be asymptotically better than the algorithm CDP-1.Similar as in the algorithm CDP-1, for each arc e=(u, v) in D, we denoteI(e)=w(e)L-1and w′(e)=w(e)−I(e)·L, and we refer w′(e) as the relative weight of the arc e=(u, v). For convenience, if an arc e=(u, v) in D satisfiesw′(u,v)>L2, we denote θ(e)=1 and refer this arc e=(u, v) as a relative large item, simply as a large item, otherwise we denote θ(e)=0 and refer it as a relative small item, simply as a small item. The strategy to our new approximation algorithm is executed in the following steps: (1) for each arc e=(u, v) in D, we redefine a new weight according to its original weight; (2) we use an optimal algorithm to construct a shortest s–t directed path Ps,t, corresponding to the new weight function; (3) sort the relative weights of arcs in the s–t directed path Ps,tin decreasing order of sizes, and then pack these items with the original sizes into some bins with capacity L.Before we describe our new approximation algorithm to solve the CDP problem, we use an32-approximation algorithm to solve the bin-packing problem, which is called the First-Fit-Decreasing algorithm (FFD, for short) in Simchi-Levi (1994), and the conclusion that we shall need in the following text is stated as the important lemma.Lemma 3.1Let n items a1, a2, …, anto have their sizes s(a1), s(a2), …, s(an), respectively, where0<s(ai)⩽L2. If we execute the FFD algorithm(Simchi-Levi, 1994)to pack these n items into some bins with capacity L, then the total sizes of items packed into each bin used in the FFD algorithm is greater than2L3, except the last bin used.When the FFD algorithm (Simchi-Levi, 1994) is executed, it first sorts these n items in decreasing order, for convenience, we denote them to satisfy the properties: s(a1)⩾s(a2)⩾⋯⩾s(an); when the FFD algorithm finishes, it produces m bins used, without loss of generality, we may assume that these m bins are B1, B2, …, Bm, and the total size of items packed into the bin Biis denoted as f(Bi), i=1, 2, …, m.Consider the bin Bi(i=1, 2, …, m−1), we may assume that the items packed in the bin Biis in the orderaj1, …,ajki, by the FFD algorithm, we haves(aj1)⩾⋯⩾s(ajki). By using the steps in the FFD algorithm, since the itemajkiis the last one which is packed into the bin Biand the bin Biis not the last one used, the items after the itemajkicannot be packed into the bin Bi, otherwise the bin Bi+1 is never used.Now, we suppose that∑t=1kis(ajt)⩽2L3for some integer i∈{1, 2, …, m−1}, by the fact0<s(ajt)⩽L2, there are at least two items packed into the bin Bi, implying ki⩾2 and2L3⩾∑t=1kis(ajt)⩾ki·s(ajki)⩾2·s(ajki), then we obtains(ajki)⩽L3. Again, all items after the itemajkicannot be packed into the bin Bi, we can obtains(ajki+1)+∑t=1kis(ajt)>L, implyings(ajki+1)>L-∑t=1kis(ajt)⩾L-2L3=L3. Thus we obtain the facts(ajki)⩽L3<s(ajki+1), which contradicts the facts(ajki)⩾s(ajki+1)in the algorithm FFD. Hence we obtain the result:f(Bi)=∑t=1kis(ajt)>2L3for each i=1, 2, …, m−1.This completes the proof of the conclusion.□Now, we design a new approximation algorithm to solve the CDP problem, which is indicated as the algorithm CDP-2.Algorithm 3.2CDP-2BeginStep 1For each arc e in digraph D, denote new weightw″(e)=w(e)+L6·θ(e);Step 2Corresponding to the new weight function w″(·) in D=(V, A; w″), use the Dijkstra algorithm (Dijkstra, 1959) to compute a shortest s–t directed path Ps,t, where Ps,thas its arc-setA(Ps,t)={ei1,ei2,…,eik}.Step 3For each arceirin Ps,t, pack the item of sizeI(eir)·LintoI(eir)bins with capacity L, whereI(eir)=w(eir)L-1for r=1, 2, …, k. And letb1=∑r=1kI(eir)denote the number of bins used at this step.Step 4Use the FFD algorithm (Simchi-Levi, 1994) to pack the k items of sizesw′(ei1),w′(ei2), …,w′(eik)of Ps,tinto some bins with capacity L, wherew′(eir)=w(eir)-I(eir)·Lfor r=1, 2, …, k. And denote b2 as the number of bins used at this step.Step 5Output the directed path Ps,tat the step 2 and the two numbers of bins used at the steps 3–4, i.e., OUT=b1+b2.End of Algorithm CDP-2Using the Algorithm 3.2, we obtain another interesting result for the CDP problem.Theorem 3.2TheAlgorithm 3.2(CDP-2) is an asymptotic74-approximation algorithm to solve the CDP problem, i.e.,OUT⩽74·OPT+14, its running time isO(n2), and the bound of performance ratio in theAlgorithm 3.2is tight.Suppose that Ps,tis a s–t directed path produced by the Algorithm 3.2 with the output value OUT=b1+b2, corresponding to the new weight functionw″(·),Ps,t∗is an optimal s–t directed path to the instance D=(V, A; w; L; s, t) for the CDP problem with the optimal value OPT among all s–t directed paths from s to t in digraph D, respectively. Then we obtain the facts∑e∈Ps,t∗w″(e)⩾∑e∈Ps,tw″(e),OPT⩾∑e∈Ps,t∗w(e)LandOPT⩾∑e∈Ps,t∗θ(e)Thus, we have∑e∈Ps,tw″(e)⩽∑e∈Ps,t∗w″(e)=∑e∈Ps,t∗w(e)+∑e∈Ps,t∗L6·θ(e)⩽L·OPT+L6·OPT=7L6·OPTNow, denotej0=∑e∈Ps,tθ(e). For convenience, we may assume that the b2 bins obtained at the step 4 are denoted in the order B1, B2, …,Bb2, and f(Bi) represents the total size of items packed into Bi, i=1, 2, …, b2. Moreover, each of the first j0 bins, say B1, B2, …,Bj0, contains exactly a large item and some small items (if possible), and each of the last b2−j0 bins, sayBj0+1,Bj0+2, …,Bb2, contains some small items but no large item.We may distinguish the following two cases.Case 1:j0=∑e∈Ps,tθ(e)⩾1, i.e., there is at least one arc e=(u, v) in Ps,tto have its relative weight w′(u, v) greater thanL2.In this case, by the steps in the Algorithm 3.2, we get the facts:f(B1)+f(Bb2)>L,f(Bi)>L2for each i=2, 3, …, j0, and each of the b2−j0−1 bins, sayingBj0+1,Bj0+2, …,Bb2-1, only contains some small items but no large item. For the last version, by Lemma 3.1, we obtainf(Bi)>2L3for each i=j0+1, j0+2, …, b2−1. Then, we obtain the following important fact∑e∈Ps,tw(e)=∑e∈Ps,tI(e)·L+∑e∈Ps,tw′(e)=b1·L+∑i=1b2f(Bi)>b1·L+L+L2(j0-1)+2L3(b2-1-j0)⩾2L3·(b1+b2)-L6j0-L6and by the fact∑e∈Ps,tw″(e)=∑e∈Ps,tw(e)+L6∑e∈Ps,tθ(e)>2L3·(b1+b2)-L6j0-L6+L6j0=2L3·(b1+b2)-L6we can obtain the fact7L6·OPT⩾∑e∈Ps,t∗w″(e)⩾∑e∈Ps,tw″(e)>2L3·(b1+b2)-L6=2L3·OUT-L6implying 7·OPT>4·OUT−1. Thus, we obtain the fact 7·OPT⩾4·OUT by the integral property, which leads the following factOUT⩽74·OPT<74·OPT+14Case 1:j0=∑e∈Ps,tθ(e)=0, i.e., there is no arc in Ps,tto have its relative weight greater thanL2In this case, by the steps in the Algorithm 3.2, we get the facts:f(B1)+f(Bb2)>L, and each of the b2−2 bins, saying B2, B3, …,Bb2-1, only contains some small items but no large item. For the latter version, by Lemma 3.1, we havef(Bi)>2L3for each i=2, 3, …, b2−1. Then, we obtain the following important fact∑e∈Ps,tw(e)=∑e∈Ps,tI(e)·L+∑e∈Ps,tw′(e)=b1·L+∑i=1b2f(Bi)>b1·L+L+2L3(b2-2)⩾2(b1+b2)-13·Lthus we can obtain the fact7L6·OPT⩾∑e∈Ps,t∗w″(e)⩾∑e∈Ps,tw″(e)=∑e∈Ps,tw(e)+0>2(b1+b2)-13·L=2OUT-13·Limplying 7·OPT>4·OUT−2. Thus, we obtain the fact 7·OPT⩾4·OUT−1 by the integral property, which leads the following factOUT⩽74·OPT+14Combining the analyses in the preceding two cases, we obtain the factOUT⩽74·OPT+14The running time of the Algorithm 3.2 comes from the following analysis: (1) the step 1 needs running timeO(m)to define the new weight function w″(·); (2) the Dijkstra algorithm (Dijkstra, 1959) implies that the step 2 needs running timeO(n2)to compute a shortest s–t directed path Ps,t, corresponding to the new weight function w″: A→R+; (3) the step 3 needs at most running timeO(n)to pack all items of sizesI(eir)·Linto b1 bins, r=1, 2, …, k; (4) the step 4 needs at most running timeO(n2)to pack k items of relative weights of all arcs in Ps,tinto b2 bins with capacity L. Thus, the whole algorithm needs its running timeO(n2).The tightness of the bound of performance ratio in the Algorithm 3.2 comes from the instance: the digraph D=(V, A; w; L; s, t), where the node-set V={s, v1, v2, …, v4k, u1, u2, …, u14k+2, t} and the arc-set A={(s, v1), (s, u1), (v4k, t), (u14k+2, t)}∪{(vi, vi+1)∣i=1, 2, …, 4k−1}∪{(ui, ui+1)∣i=1, 2, …, 14k+1}, the weight function w: A→R+ satisfies the conditions: for any positive integers k and L, where0<ε<L6(14k+3), each arc e in the first s–t directed path P1=sv1v2⋯v4kt has the weight w(e)=L and each arc e in the second s–t directed path P2=su1u2⋯u14k+2t has the weightw(e)=L3+ε. And corresponding to the function w″(·), the Algorithm 3.2 produces a shortest s–t directed path P2=su1u2⋯u14k+2t with output valueOUT=14k+32=7k+2, but the optimal solution to the instance D=(V, A; w; L; s, t) for the CDP problem is the first s–t directed path P1=sv1v2⋯v4kt with the optimal value OPT=4k+1, implyingOUT=74·OPT+14which shows that the bound of performance ratio in the Algorithm 3.2 is tight.This establishes the conclusion of the theorem.□We may propose the following conjecture for the constructing directed path problem.Conjecture 3.1The constructing directed path problem (CDP) would admit an (asymptotic)32-approximation algorithm.In this subsection, we study the constructing strongly connected spanning subdigraph problem (CSCSS) which is defined in Section 1. It is easy to see that the CSCSS problem is a generalization of the bin-packing problem, then it cannot be approximated within performance ratio32-εfor any ε>0, unlessP=NP, by the inapproximability of the bin-packing problem in Vazirani (2001).Moreover, we can obtain a following stronger conclusion indicated as Theorem 3.3, and then we present an 4-approximation algorithm and an asymptotic72-approximation algorithm to solve the CSCSS problem.Theorem 3.3For any ε>0, there is no approximation algorithm within performance ratio 2–ε for the CSCSS problem, unlessP=NP.Suppose that there were such an approximation algorithmAwithin performance ratio 2–ε for the CSCSS problem, i.e., for any instance D=(V, A; w; L) of the CSCSS problem, the algorithmAwould produce a feasible solution with value OUT to satisfy the inequality OUT⩽(2–ε)OPT, where OPT is the optimal value, then we would show in polynomial time how to use the algorithmAto solve the minimum-cost strongly connected spanning subdigraph problem (MCSCSS, for short), but the MCSCSS problem is one well-known NP-hard problem in Garey and Johnson (1979), a contradiction.For an instanceIof the MCSCSS problem in the recognition version (Papadimitriou & Steiglitz, 1998): a strongly connected digraph D=(V, A; w) and a constant L′, where w: A→R+, we are asked to find a strongly connected spanning subgraph D′=(V, A′) from the digraph D to satisfy the fact∑e∈A′w(e)⩽L′.We construct a reduction τ from the instanceIof the MCSCSS problem to an instanceτ(I)of the CSCSS problem: a digraph D=(V, A; w; L) as the same structure as the digraph D and a specific material with length L=L′, we are asked how to construct a strongly connected spanning subdigraph D′=(V, A′) from D, the objective is to minimize the number of pieces of such a specific material with length L used necessarily to construct all arcs in D′.Now, we can prove the claim: the instanceIof the MCSCSS problem has an answer ‘yes’, i.e., the digraph D has a strongly connected spanning subgraph D′=(V, A′) to satisfy the fact∑e∈A′w(e)⩽L′, if and only if the instanceτ(I)of the CSCSS problem has the output value OUT=1.In fact, if the instanceIof the MCSCSS problem has a feasible solution D′=(V, A′) with value w(A′)⩽L′, then the optimal value OPT of the instanceτ(I)for the CSCSS problem satisfies OPT=1 (here L=L′), we obtain OUT⩽(2–ε)OPT⩽2–ε by our assumption, implying OUT=1 (because the OUT is integral in this matter).Conversely, if the instanceτ(I)of the CSCSS problem has an output value OUT=1, we obtain OPT⩽OUT=1, implying OPT=1, equivalently, the digraph D has a strongly connected spanning subgraph D′=(V, A′) to satisfy the fact∑e∈A′w(e)⩽L′(here L′=L), i.e., the instanceIof the MCSCSS problem has an answer ‘yes’. This establishes the conclusion of the claim.By using the preceding claim, when the output OUT to the instanceτ(I)of the CSCSS problem satisfies OUT=1, then the MCSCSS problem has an answer ‘yes’, and otherwise the MCSCSS problem has an answer ‘no’, thus the algorithmAsolves the MCSCSS problem in polynomial time, but the MCSCSS problem is one well-known NP-hard problem in Garey and Johnson (1979), a contradiction, unlessP=NP.This establishes the conclusion of the theorem.□By the fact that Frederickson and Jaja (1981) designed an 2-approximation algorithm (referred as the SCA algorithm, for short) for the strong connectivity augmentation problem, the strategy to solve the CSCSS problem is simply executed as follows: (1) Use the SCA algorithm (Frederickson and Jaja, 1981) to compute a strongly connected spanning subdigraph D′ from D, having total weight as less as possible; (2) use the FF algorithm (Coffman et al., 1996) to pack the items of all arcs in D′ into some bins with capacity L. The approximation algorithm for the CSCSS problem is described as follows.Algorithm 3.3CSCSS-1BeginStep 1Use the SCA algorithm (Frederickson and Jaja, 1981) to construct a strongly connected spanning subdigraph D′=(V, A′), for convenience, we may assumeA′={ei1,ei2,…,eik};Step 2For each arceirin D′, pack the item of sizeI(eir)·LintoI(eir)bins with capacity L, whereI(eir)=w(eir)L-1for r=1, 2, …, k. And letb1=∑r=1kI(eir)denote the number of bins used at this step.Step 3Use the FF algorithm (Coffman et al., 1996) to pack the items of sizesw′(ei1),w′(ei2), …,w′(eik)into some bins with capacity L, wherew′(eik)=w(eik)-I(eik)·Lfor r=1, 2, …, k. And denote b2 as the number of bins used at this step;Step 4Output the subdigraph D′=(V, A′) at the step 1 and the number of bins used at the steps 2–3, i.e., OUT=b1+b2.End of Algorithm CSCSS-1Using the Algorithm 3.3, we obtain the first result for the CSCSS problem.Theorem 3.4TheAlgorithm 3.3(CSCSS-1) is an 4-approximation algorithm to solve the CSCSS problem, and it running time isO(n2).For the digraph D=(V, A; w) as an instance, suppose that D′=(V, A′) is a strongly connected spanning subdigraph produced by the Algorithm 3.3 with the output value OUT=b1+b2, and that D∗=(V, A∗) is an optimally strongly connected spanning subdigraph to the instance D for the CSCSS problem with the optimal value OPT, which is minimized among all strongly connected spanning subdigraphs of D. We obtain w(A∗)⩽L·OPT. We shall prove the fact OUT⩽4·OPT.By the fact that the algorithm SCA (Frederickson and Jaja, 1981) solve the minimum-cost strongly connected spanning subgraph problem (MCSCSS, for short) which is a special version of the SCA problem, it is easy to see that the subdigraph D′=(V, A′) is strongly connected and we obtain w(A′)⩽2·w(A∗∗)⩽2·w(A∗)⩽2·L·OPT, where D∗∗=(V, A∗∗) is an optimal solution and D∗=(V, A∗) is also a feasible solution to the instance D=(V, A; w) for the MCSCSS problem, respectively.When we pack the items {w′(e)∣e∈A′} of all arcs in D′=(V, E′) into the b2 bins with capacity L at the step 3, then there is at most one bin used to have the total sizes at mostL2, otherwise the number b2 of the bins used at the step 3 may be reduced, and we obtain the factw′(A′)L>b2-12. Thus, we obtain the factOUT-12=b12+b2-12<∑e∈A′I(e)·LL+w′(A′)L=w(A′)L⩽2·OPTimplying OUT<4·OPT+1. Hence, we obtain the fact OUT⩽4·OPT by the integral property.The running time of the Algorithm 3.3 comes from the following analysis: (1) by the result due to Frederickson and Jaja (1981), the step 1 needs running timeO(n2)to construct the strongly connected spanning subdigraph D′=(V, A′) from D; (2) the step 2 needs at most running timeO(n)to pack all items of sizesI(eir)·Linto b1 bins, r=1, 2, …, k; (3) the step 3 needs at most running timeO(nlogn)to pack k items of sizesw′(ei1),w′(ei2), …,w′(eik)of arcs in D′=(V, E′) into b2 bins with capacity L. Hence, the whole algorithm needs its running timeO(n2)as stated in the theorem.This establishes the conclusion of the theorem.□We present two comments as follows: (1) Melkonian and Tardos (2005) designed an 3-approximation algorithm to solve the directed network design problem, which is a generalization of the MCSCSS problem as same as the strong connectivity augmentation problem in Frederickson and Jaja (1981), Melkonian and Tardos (2005) presented a worst-case example in the same paper to show that their primal–dual output is only 2−2/n times more expensive than the optimum, they also proposed a conjecture that 2−2/n is the real performance ratio, their computational results indeed support this conjecture, and they finally presented another example to show that the branchings algorithm delivers a solution to have exactly twice more expensive than the optimum; (2) we have indeed found an32-approximation algorithm due to Vetta (2001) to solve the special case of the MCSCSS problem, where all arcs have the same weight in the instance, and if the Vetta’s algorithm can be extended to solve the MCSCSS problem in general version, our approximation algorithm CSCSS-1 for the CSCSS problem would admit performance ratio 3, where the proof is the same as that in Theorem 3.3.In the reminder of this subsection, we design a new approximation algorithm to solve the CSCSS problem in the following algorithmic structure form, which is asymptotically better than the Algorithm 3.3.The strategy to our new approximation algorithm is executed as follow: (1) for each arc e in D, redefine a new weight w″(e) according to its relative weight w′(e); (2) depending on the new weight function w″(·), compute a strongly connected spanning subdigraph D′ from D with total weight as less as possible; (3) use the FFD algorithm (Simchi-Levi, 1994) to pack the items of w′(e) of all arcs of D′ into some bins with capacity L. The approximation algorithm for the CSCSS problem is described as follows.Algorithm 3.4CSCSS-2BeginStep 1For each arc e in the digraph D, denote new weightw″(e)=w(e)+L6·θ(e).Step 2Corresponding to the new function w″(·) in D=(V, A; w″), use the SCA algorithm (Frederickson and Jaja, 1981) to construct a strongly connected spanning subdigraph D′=(V, A′), for convenience, we may assumeA′={ei1,ei2,…,eik}.Step 3For each arceirin Ps,t, pack the item of sizeI(eir)·LintoI(eir)bins with capacity L, whereI(eir)=w(eir)L-1for r=1, 2, …, k. And letb1=∑r=1kI(eir)denote the number of bins used at this step.Step 4Use the FFD algorithm (Simchi-Levi, 1994) to pack these k items of sizesw′(ei1),w′(ei2), …,w′(eik)of all arcs in D′ into some bins with capacity L, wherew′(eir)=w(eir)-I(eir)·Lfor r=1, 2, …, k. And we denote b2 as the number of bins used at this step.Step 5Output the strongly connected spanning subdigraph D′=(V, A′) at the step 2 and the two numbers of bins used at the steps 3–4, i.e., OUT=b1+b2.End of Algorithm CSCSS-2TheAlgorithm 3.4(CSCSS-2) is an asymptotic72-approximation algorithm to solve the CSCSS problem, i.e.,OUT<72·OPT+12, and it running time isO(n2).For a digraph D=(V, A; w) as in instance of the CSCSS problem, suppose that D′=(V, A′) is a a strongly connected spanning subdigraph produced by the Algorithm 3.4 with the output value OUT=b1+b2, corresponding to the new weight function w″(·), and D∗=(V, A∗) is a strongly connected spanning subdigraph with the optimal value OPT∗ to the instance D for the CSCSS problem with the optimal value OPT, respectively. We shall prove the factOUT<72·OPT+12.By using the similar arguments in the proof of Theorem 3.4, we obtain the facts: w″(A′)⩽2·w″(A∗), w(A∗)⩽OPT·L and∑e∈A∗θ(e)⩽OPT. Then, we have∑e∈A′w″(e)⩽2·∑e∈A∗w″(e)=2∑e∈A∗w(e)+∑e∈A∗L6·θ(e)⩽7L3·OPTDenotej0=∑e∈A′θ(e). And we may assume that the b2 bins are referred as in the order B1, B2, …,Bb2, and f(Bi) is the total size of items packed into Bi, i=1, 2, …, b2. Moreover, each of the first j0 bins, say B1, B2, …,Bj0, contains exactly a large item and some small items (if possible), and each of the last b2−j0 bins, sayBj0+1,Bj0+2, …,Bb2, contains some small items but no large item. We may distinguish the following two cases.Case 1:j0=∑e∈A′θ(e)⩾1In this case, by the steps in the Algorithm 3.4 and using the similar arguments in Case 1 of the proof of Theorem 3.2, we obtain∑e∈A′w(e)=∑e∈A′I(e)·L+∑e∈A′w′(e)⩾2L3·(b1+b2)-L6j0-L6Then we get∑e∈A′w″(e)=∑e∈A′w(e)+L6∑e∈A′θ(e)>2L3·(b1+b2)-L6Finally, we obtain7L3·OPT⩾∑e∈A′w″(e)>2L3·OUT-L6implyingOUT<72·OPT+14<72·OPT+12Case 2:j0=∑e∈A′θ(e)=0In this case, by the steps in the Algorithm 3.4 and using the similar arguments in Case 2 of the proof of Theorem 3.2, we have∑e∈A′w(e)=∑e∈A′I(e)·L+∑e∈A′w′(e)>2(b1+b2)-13·LThus, we obtain7L3·OPT⩾∑e∈A′w″(e)=∑e∈A′w(e)>2OUT-13·LimplyingOUT<72·OPT+12Combining the analyses in the preceding two cases, we obtainOUT<72·OPT+12As the similar arguments to the proof of Theorem 5.6, it is easy to see that the running time of the Algorithm 3.4 isO(n2).This establishes the conclusion of the theorem.□We present a comment as follows: if we can design a better α-approximation algorithm to solve the MCSCSS problem, then our Algorithm 3.4 (CSCSS-2) would be an asymptotic7α4-approximation algorithm for the CSCSS problem, satisfyingOUT<7α4·OPT+12.At the end of this section, similar to Conjecture 3.1, we may propose the following conjecture for the CSCSS problem.Conjecture 3.2The CSCSS problem would admit an (asymptotic)3α2-approximation algorithm to solve it, where α is the performance ratio of an approximation algorithm for the MCSCSS problem.In this paper, by considering the constructing directed path problem (CDP) and the constructing strongly connected spanning subdigraph problem (CSCSS), we obtain the two main results: (1) We design an 2-approximation algorithm and an asymptotic74-approximation algorithm to solve the CDP problem; (2) For any ε>0, we prove that there is no approximation algorithm within performance ratio 2–ε for the CSCSS problem, unlessP=NP, and then we present an 4-approximation algorithm and an asymptotic72-approximation algorithm to solve the CSCSS problem.For further research, we shall study other optimization problems where some structures are different from the two preceding structures. The most challenging study is to design an (asymptotic)3α2-approximation algorithm to solve the CSCSS problem.

@&#INTRODUCTION@&#


@&#CONCLUSIONS@&#
