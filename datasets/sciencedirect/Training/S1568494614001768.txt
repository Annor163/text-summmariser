@&#MAIN-TITLE@&#
A new automated design and optimization method of CMOS logic circuits based on Modified Imperialistic Competitive Algorithm

@&#HIGHLIGHTS@&#
We used ICA as a new algorithm and modified assimilation policy of ICA to be compatible for logic circuit designing and optimization.Logic circuits were optimized in case of area and propagation delay.We show significant improvement (44%) in performance factor (area×propagation delay).By this creative method, efficient logic circuits can be designed which save space on digital chips and make them as fast as possible.

@&#KEYPHRASES@&#
Evolutionary hardware,Combinational logic circuit,Imperialist Competitive Algorithm,

@&#ABSTRACT@&#
This paper proposes a novel evolutionary approach based on modified Imperialist Competitive Algorithm for combinational logic circuits designing and optimization. The Imperialist Competitive Algorithm operates on real values and is not applicable to logic circuits optimization problems. So a modified version of ICA is proposed to overcome this shortcoming. Modification of the algorithm depends on random cell replacement between Imperialist and its colonies as assimilation policy. Also a multi-objective evaluation mechanism in the form of a weighted cost function is introduced to obtain optimized circuits in case of circuit area and propagation delay. To evaluate the effectiveness of this method some general benchmark circuits are used in which the circuits with fewer logic cells (minimized space) and lower propagation delay are obtained. The simulation results of our proposed method are compared with some conventional and heuristic methods. Simulation results show that our proposed method significantly improves the performance factor which represents both circuit area and propagation delay.

@&#INTRODUCTION@&#
Combinational logic circuits are hardware networks that their outputs are only determined by the logical function of their current input state, logic “0” or logic “1” at any given instant in time. Combinational logic circuits are made up from basic logic gates that are connected together to produce more complicated switching circuits. These logic gates are the building blocks of combinational logic circuits. Truth table provides a concise list that shows the output values in tabular form for each possible combination of input variables.Combination logic circuits have been used in various functional units such as arithmetic and logic functions, data transmission and code converters. In recent years, most of the logic circuits have been implemented on silicon chips as integrated circuits, so it is important to have compact circuits on them. On the other hand, many circuits implemented on digital chips, especially central processing unit (CPU) of computers consisting full adder, multiplier, comparator, multiplexer, etc. are combinational logic circuits. Since these processors should have a high operating speed, the logic circuits forming them should be as fast as possible with lower propagation delay.In this paper we try to find efficient and creative circuits that match a given truth table with less complexity. The obtained circuits are expected to be optimized both in terms of space and propagation delay. By reducing the number of logic gates and using gates with lower number of transistors, a compact circuit is obtained. Also to have efficient circuits, we should search for those ones which produce the output in a short response time. The response time of a circuit depends on the number and the complexity of the gates forming the longest path.Designing logic circuit requires knowledge of a large collection of domain-specific rules. therefore, the process of implementing a logic circuit involves transforming the original specification into a form, suitable for the target technology, optimizing the representation with respect to a number of user defined objectives and constraints (i.e. timing, fan-in/out, power, etc.), and finally carrying out technology mapping onto the target technology [1].Among conventional methods, many design approaches, such as Boolean algebra, Karnaugh map [2], and Quine-McCluskey [3] have been widely used in solving digital circuit optimization problem. The algebraic method applies some known algebraic theorems to minimize logic functions. Designer ability has an important role in this method. The Karnaugh map [2] is a matrix based representation of logical functions and allows minimization of up to 5-input functions.McCluskey procedure [3] is a tabular method and it is able to minimize functions of any number of inputs. Logic functions are minimized as sum of product in Both Karnaugh map and McCluskey procedure. These two methods offer circuits with the shortest response time, but not at all the smallest size. McCluskey procedure requires an execution time that grows exponentially with the number of input signals. Furthermore, Karnaugh map and McCluskey procedure use only AND, OR and NOT gates and ignores all the rest of the gates.Evolutionary hardware (EHW) is an automated design method of circuits based on artificial evolution of natural phenomena. EHW uses evolutionary algorithms (EA) to auto configure and optimize circuits [4,5]. By exploring a large search space, EHW may find solutions for a task which is unsolvable or difficult to solve.The process of evolutionary circuit design is fundamentally different from the traditional design process, because it is not based on designer knowledge and experience, but on the evolutionary process. The evolutionary circuit design has fewer constraints than the design based on the designer knowledge and experience. The designers are not only limited by the technology in which the circuit will be produced, but also by their own habits (routines), imagination and creative thinking.Many different evolutionary methods for the design of digital circuits have been created until now. Coello [6–8] introduced NGA (Genetic Algorithm with N-cardinality representation) and MGA (Multi-objective Genetic Algorithm) to evolve logic circuits at the gate level and Slowik [9,10] presented MLCEA method (Multi Layer Chromosome Evolutionary Algorithm) to optimize logic circuits with respect to transistor count. Shuguang Zhao [11] used genetic algorithm, Zhaohui Gan [12] presented improved gene expression-based clonal selection algorithm (IGE-CSA), Srivastava [13] used genetic algorithm and Xia, Xuewen [14] introduced a method based on genetic algorithm with variable-length cellular automata (CA). In [15], Nedjah presented a methodology based on genetic programming to design and optimization logic circuits and Dipayan Bahdra [16] introduced LNN method (logical neural network) which evolved logic circuits by the combination of neural network and genetic algorithm.Atashpaz-Gargari and Lucas [17] proposed a new algorithm which was inspired from the social and political behavior of human societies and it is Imperialist Competitive Algorithm (ICA). This algorithm has been applied in different fields of science and engineering [19–21] as an optimization tool and comparisons between the results of ICA and other evolutionary algorithms clearly show the ability of this new algorithm, regarding to convergence time and optimized solution.In [18] we proposed a new method based on Imperialist Competitive Algorithm (ICA) to design and optimize logic circuits. In [18], we just tried to minimize circuits according to the number of logic gates and circuit area.Here, we are following two goals: first we modified Imperialist Competitive Algorithm to be suitable for designing logic circuit structures and second achieving optimized circuits regarding to the area and propagation delay to have compact and fast digital modules. This paper improves the methodology used in [18].The rest of this paper is organized as follows. In Section 2, original version of ICA algorithm will be introduced. Section 3 describes how to encode the circuit structure and the usage of ICA as a new approach for the automatic design of an optimized circuit. Section 4 shows experiments and compares them with works which have been proposed before. Finally, Section 5 concludes the paper.Imperialist Competitive Algorithm (ICA) [17] is a new evolutionary algorithm in the Evolutionary Computation field based on the human's socio-political evolution. Like other evolutionary algorithms, it starts with an initial random population which is called countries. Some of the best countries in the population selected to be the imperialists and the rest form the colonies of these imperialists. In an N dimensional optimization problem, a country is a 1×n array (Eq. (1)).(1)Country=[p1,p2,...,pn]The cost of a country is found by evaluating the cost function f at the variables (p1,p2,...,pn). Then(2)ci=f(countryi)=f(p1,p2,...,pn)The algorithm starts with N initial countries and the Nimpbest of them (countries with minimum cost) chosen as the imperialists. The remaining countries are colonies that each belong to an empire. The initial colonies belong to the imperialists according to their powers. To distribute the colonies among imperialists proportionally, the normalized cost of an imperialist is defined as Eq. (3).(3)Cn=max(ci)−cnwhere cnis the cost of nth imperialist and cnis its normalized cost. Each imperialist that has more cost value, will have less normalized cost value. Having the normalized cost, the power of each imperialist is calculated from Eq. (4) and based on that the colonies distributed among the imperialist countries.(4)pn=cn∑i=1NimpcnOn the other hand, the normalized power of an imperialist is assessed by its colonies. Then, the initial number of colonies of an empire will beNCn=rand{pn×Ncol}where NCnis initial number of colonies of nth empire and Ncolis the number of all colonies.To distribute the colonies among imperialist, NCnof the colonies is selected randomly and assigned to their imperialist. The imperialist countries absorb the colonies toward themselves using the assimilation policy. The assimilation policy shown in Fig. 1makes the main core of this algorithm and causes the countries move toward to their minimum optima. The imperialists absorb these colonies toward themselves with respect to their power that described in Eq. (4).The total power of each imperialist is determined by the power of its both parts, the empire power plus percents of its average colonies power.(5)T⋅Cn=Cost(imperialistn)+ξmean{Cost(colonies   of   impiren)}where T·Cnis the total cost of the nth empire andξis a positive number which is considered to be less than one.In the assimilation policy, the colony moves toward the imperialist by x unit. The direction of movement is the vector from colony to imperialist, as shown in Fig. 1, the distance between the imperialist and colony shown by d and x is a random variable with uniform distribution. Whereβis greater than 1 and is near to 2 (x∼U(0,β×d)).In ICA algorithm, to search different points around the imperialist, a random amount of deviation is added to the direction of colony movement toward the imperialist. In Fig. 1, this deflection angle is shown as θ, which is chosen randomly and with a uniform distribution (θ∼U(−γ,γ)).While moving toward the imperialist countries, a colony may reach to a better position, so the colony's position changes according to the position of the imperialist. In each running cycle, we select some of the weakest colonies and replace them with new ones, randomly. The replacement rate is named as the revolution rate. In ICA, revolution causes a country to suddenly change its socio-political characteristics. That is, instead of being assimilated by an imperialist, the colony randomly changes its position in the socio-political axis. The revolution increases the exploration of the algorithm and prevents the early convergence of countries to local minimums.In this algorithm, the imperialistic competition has an important role. During the imperialistic competition, the weak empires will lose their power and their colonies (Fig. 2). To model this competition, firstly we calculate the probability of possessing all the colonies by each empire considering the total cost of empire.(6)NTCn=max{TCi}−TCnwhere TCnis the total cost of nth empire and NTCnis the normalized total cost of nth empire. Having the normalized total cost, the possession probability of each empire is calculated from Eq. (7).(7)Ppn=NTCn∑i=1NimpNTCiAfter a while all the empires, except the most powerful one will collapse and all the colonies will be under the control of this unique empire.

@&#CONCLUSIONS@&#
