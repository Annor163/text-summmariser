@&#MAIN-TITLE@&#
An improved heuristic for parallel machine scheduling with rejection

@&#HIGHLIGHTS@&#
Parallel machine scheduling with rejection.New optimal properties and different solution techniques.A near linear-time heuristic with better worst-case bound.

@&#KEYPHRASES@&#
Scheduling,Rejection,Heuristic,Worst-case bound,

@&#ABSTRACT@&#
In this paper we study a classical parallel machine scheduling model with m machines and n jobs, where each job is either accepted and then processed by one of the machines, or rejected and then a rejection penalty is paid. The objective is to minimize the completion time of the last accepted job plus the total penalty of all rejected jobs. The scheduling problem is known to be NP-hard in the strong sense. We find some new optimal properties and develop an O(nlog n + n/ε) heuristic to solve the problem with a worst-case bound of 1.5 + ε, where ε > 0 can be any small given constant. This improves upon the worst-case bound2−1mof the heuristic presented by Bartal et al. (Bartal, Y., Leonardi, S., Marchetti-Spaccamela, A., Sgall, J., & Stougie, L. (2000). Multiprocessor scheduling with rejection. SIAM Journal on Discrete Mathematics, 13, 64–78) in the scheduling literature.

@&#INTRODUCTION@&#
Machine scheduling with rejection (also named “order acceptance and scheduling”) has attracted considerable attention from scheduling researchers as well as production managers who practice it in the past a few decades. One important application of scheduling with rejection arises in make-to-order production systems with limited production capacity or tight delivery requirements, where order rejection and scheduling decisions have to be made simultaneously (Cesaret et al., 2012). In practice, due to production capacity constraints and short delivery due dates, a typical manufacturer may have to reject some orders which have long processing times but contribute relatively small profits. Another important application of scheduling with rejection occurs in scheduling when outsourcing is an alternative option (Shabtay et al., 2013). Scheduling with rejection combines outsourcing and production scheduling decisions together.Machine scheduling with rejection (MSR) has been studied extensively in the scheduling literature. Most of the MSR models are considered in the single-machine environment (e.g., Zhang et al., 2009; Lu et al., 2009; Talla Nobibon and Leus, 2011; Oguz et al., 2010; Lee and Sung, 2008; Slotnick and Morton, 1996; Slotnick and Morton, 2007; Zhong et al., 2014, among others), or study on-line scheduling (e.g., Bartal et al., 2000; Seiden, 2001; Hoogeveen et al., 2003; Epstein et al., 2002, among others). MSR models with industrial applications are studied by Cheng and Sun (2009),Guerrero and Kern (1988),Cesaret et al. (2012), and Rom and Slotnick (2009), among others. Excellent literature review articles on MSR are provided by Slotnick (2011) and Shabtay et al. (2013) recently.In this paper, we study a basic off-line parallel-machine MSR model. Bartal et al. (2000) are the first to introduce parallel machine scheduling models with rejection, where each job is either accepted and then processed by one of the machines, or rejected and then a rejection penalty is paid. The objective function is to minimize the makespan of all accepted jobs (i.e., the completion time of the last accepted job) plus the total rejection penalty of all rejected jobs. They study both the on-line model and the off-line model. For the on-line model, they present an on-line algorithm with the best-possible competitive ratio of 2.618. For the off-line model, they develop an O(nlog n) heuristic with a worst-case bound of2−1m(here n is the number of jobs, while m is the number of machines), and present a fully polynomial-time approximation scheme (FPTAS) for the case when m is fixed, and a polynomial-time approximation scheme (PTAS) for the case when m is arbitrary. The running time complexity of their FPTAS is O((n/ε)m), while the running time complexity of their PTAS isO((n3/ϵ)9/ϵ2),where ε > 0 can be any small given constant. Note that such a PTAS has a running time complexity of O(n27) when ε = 1. Thus, it is interesting to develop efficient heuristics with a better performance ratio to solve the off-line model, especially for the general case when m is arbitrary. Surprisingly, in terms of developing fast heuristics, the worst-case bound of2−1mfor the general off-line model in Bartal et al. (2000) is the best known result in the scheduling literature (see the very recent review papers Slotnick (2011); Shabtay et al. (2013)). In this paper, we study the off-line model in Bartal et al. (2000) for the general case when m is arbitrary, and present an O(nlog n + n/ε) heuristic with a worst-case bound of 1.5 + ε.The scheduling problem we study can be described formally as follows: We are given a set of m identical parallel machines M = {M1, M2, …, Mm} and a set of n > m jobs J = {J1, J2, …, Jn}. Associated with each job Jjis a processing time pj> 0 and a rejection penalty wj> 0. Job Jjis either rejected and then a rejection penalty wjis paid, or accepted and then processed by one of the m machines. Job preemption is not allowed during job processing, and each machine is available for processing jobs at time zero. Each machine can process at most one job at a time. Denote A⊆J as the set of jobs to be accepted, and R = J∖A as the set of jobs to be rejected. Denote Cjas the completion time of job Jjon a machine if Jj∈ A. The objective is to determine A and a feasible schedule for the jobs in A on the m machines, so as to minimize objective functionZ=maxJj∈A{Cj}+∑Jj∈Rwj,i.e., the makespan of all accepted jobs plus the total rejection penalty of all rejected jobs. We denote P|rej|Cmax + ∑wjas the scheduling problem.Note that the classical parallel machine scheduling problem P||Cmax is a special case of problem P|rej|Cmax + ∑wjwhen wj= +∞ for j = 1, 2, …, n. Problem P||Cmax is known to be NP-hard in the strong sense (Garey and Johnson, 1979). Therefore, P|rej|Cmax + ∑wjis also NP-hard in the strong sense. It is also well-known that problem P||Cmax can be solved by some simple heuristics with constant worst-case bounds. For examples, the list schedule has a worst-case bound of2−1m,and the longest-processing-time-first (LPT) rule has a worst-case bound of43−13m(see Pinedo, 2012 for more details and more heuristics). However, when job rejection is allowed, it becomes much more complicated to design efficient heuristics with low running time complexity and good worst-case bounds. In this paper we focus on developing an efficient heuristic to solve problem P|rej|Cmax + ∑wjwith near-linear time complexity.We will present a heuristicHto solve problem P|rej|Cmax + ∑wjin this section. HeuristicHis shown to have a worst-case bound of 1.5 + ε and running time complexity of O(nlog n + n/ε).Denote σ* as the optimal solution, A* as the set of all accepted jobs in σ*, R* = J∖A* as the set of all rejected jobs in σ*,Cmax*as the completion time of the last accepted jobs in A* (i.e., the makespan of all accepted jobs) in σ*, andZ*=Cmax*+∑Jj∈R*wjas the objective function value of σ*. Let H0 be the O(nlog n) heuristic presented by Bartal et al. (2000), and let Z0 be the value of the solution generated by H0. In our heuristicH,we first apply H0 to generate solution value Z0. By Theorem 5.1 on page 73 in Bartal et al. (2000), we have(1)Z*≤Z0≤(2−1m)Z*.According to Bartal et al. (2000), we also have the following property.Lemma 1IfCmax*≤12Z*,then Z0 ≤ 1.5Z*.By the proof of Theorem 5.1 on page 73 in Bartal et al. (2000), we haveZ0≤Z*+(1−1m)Cmax*.Thus, ifCmax*≤12Z*,thenZ0≤Z*+(1−1m)·Cmax*≤Z*+(1−1m)·12·Z*≤1.5Z*.□By Lemma 1, to make sure heuristicHhaving a worst-case bound of 1.5 + ε, we only need to consider the situation when(2)Cmax*>12Z*>14Z0.In the remaining of this section, we only consider the situation when inequality (2) is satisfied.Let ε be any small constant such that1ϵis a positive integer, and letϵ′=ϵ3. Fort=0,1,…,1ϵ′,we defineC^t=t·(ϵ′·Z0).Clearly, by (1) and (2), there exists some integerκ∈{1,2,…,1ϵ′}such that(3)C^κ−1=(κ−1)·(ϵ′·Z0)<Cmax*≤κ·(ϵ′·Z0)=C^κ.By (1) and (3),C^κis an upper bound ofCmax*such that(4)Cmax*≤C^κ=(κ−1)·ϵ′·Z0+ϵ′·Z0<Cmax*+ϵ′·(2Z*)=Cmax*+23·ϵ·Z*.Note that the exact value of κ is unknown. In heuristicHwe need to consider all of the1ϵ′valuesC^1,C^2,…,C^1ϵ′.We now introduce the major idea flow of heuristicH. InHwe need to determine the1ϵ′valuesC^1,C^2,…,C^1ϵ′. ProvidedC^t(t=1,2,…,1ϵ′), we will determine valueZ˜t,whereZ˜tis an upper bound of the objective function value of some feasible solution that can be constructed based on the value ofC^t. As what we will show it later, each valueZ˜tcan be determined in O(n) time, and the value ofZ˜κis bounded by (1.5 + ε)Z* (remember thatC^κis an upper bound ofCmax*satisfying (4), but we do not know the exact value of κ, although it exists). We then find out the indexξ∈{1,2,…,1ϵ′}such thatZ˜ξ=min{Z˜t∣t=1,2,…,1ϵ′}.We haveZ˜ξ≤Z˜κ≤(1.5+ϵ)Z*.Finally, provided ξ andC^ξ,a feasible solution with a solution value no more thanZ˜ξis generated byH. Thus, the generated solution value byHis bounded byZ˜ξ≤(1.5+ϵ)Z*. Here we would like to point out that it is unnecessary to know what is the exact value of κ as long as we are able to determineZ˜1,Z˜2,…,Z˜1ϵ′and the value of ξ.It is challenging inHto determine valueZ˜tfor eacht=1,2,…,1ϵ′in O(n) time. The major idea of how to determineZ˜tis as follows. Provided the value ofC^t,we will find out a job setAt′⊆Jsuch that all jobs inAt′can be scheduled on the m machines with a makespan no more than1.5C^t(the total processing time of jobs inAt′is approximately equal tom·C^t). To reduce total rejection penalty, we give priority to those jobs with a high value of wj/pjor wjwhen selecting jobs toAt′. The value ofZ˜tis given to beZ˜t=1.5C^t+∑Jj∈J∖At′wj.Clearly, provided job setAt′,there exists some feasible solutionσ^tin which all jobs inAt′are accepted while all jobs inJ∖At′are rejected, and the corresponding solution value ofσ^tis no more thanZ˜t. As what we will show it later, whenC^t=C^κ,the generated job setAκ′satisfies∑Jj∈J∖Aκ′wj≤1.5∑Jj∈R*wj.This indicates that there exists a feasible solutionσ^κin which all jobs inAκ′are accepted and scheduled on the machines with a makespan bounded by1.5C^κ(all jobs inJ∖Aκ′are rejected inσ^κ), and the corresponding solution value ofσ^κis bounded byZ˜κ=1.5C^κ+∑Jj∈J∖Aκ′wj≤32·(Cmax*+23·ϵ·Z*)+1.5∑Jj∈R*wj=(1.5+ϵ)Z*.Note that in the computation ofZ˜t,it is unnecessary to determine solutionσ^t. Instead, after all of the valuesZ˜1,Z˜2,…,Z˜1ϵ′have been computed, we find out the value of ξ and only determine solutionσ^ξand its value. To determine solutionσ^ξ,we schedule the jobs inAξ′onto the machines by the longest-processing-time-first (LPT) rule, and reject all of the jobs inJ∖Aξ′.The biggest challenge in the design of heuristicHis how to generate the desired job setAt′fort=1,2,…,1ϵ′. We will introduce how to determineAt′in the next subsection.In this subsection we show how to determine job setAt′fort=1,2,…,1ϵ′. To constructAt′,we first partition the jobs in J into subsets according to their job processing times. Provided the value ofC^t,job set J is partitioned into the following five subsets:L0t={Jj∈J∣pj>C^t},and for ϑ = 1, 2, 3, 4,Lϑt={Jj∈J∣4−ϑ4C^t<pj≤5−ϑ4C^t}.Clearly,L0t,L1t,…,L4tare a partition of J. For ease of presentation, we also defineL5t=L2t∪L3t∪L4t={Jj∈J∣pj≤34C^t}andL6t=L3t∪L4t={Jj∈J∣pj≤12C^t}.We let the jobs inL1tin an order with non-increasing values of wj, and let the jobs inLϑtin an order with non-increasing values of wj/pjfor ϑ = 2, 3, …, 6. DefineLϑt(0)=∅andnϑ,t=|Lϑt|for ϑ = 0, 1, …, 6. For ϑ = 0, 1, …, 6 and ρ = 1, 2, …, nϑ, t, we denoteLϑt(ρ)as the set of the first ρ jobs in the job sequence ofLϑt. For ρ = 1, 2, …, n5, t, we letμt(ρ)=|L5t(ρ)∩L2t|be the number of jobs inL5t(ρ)having a processing time greater than12C^t.For any subset G⊆J, we defineP(G)=∑Jj∈GpjandW(G)=∑Jj∈Gwj.For λ = 0, 1, …, m andt=1,2,…,1ϵ′,we also defineΔλ,t=(m−34λ)C^t.We now show some important properties on the relationship between optimal solution σ* and those job sets whenC^t=C^κ,whereC^κis the upper bound ofCmax*satisfying (4). Letλ*=|A*∩L1κ|be the number of jobs accepted inL1κin optimal solution σ*. Letmκ′=min{m,|L1κ|}. Note that in σ*, each machine is assigned at most one job with a processing time greater than12Cmax*,and the total processing time of jobs accepted and assigned to each machine is bounded byCmax*≤C^κ. We have the following properties on optimal solution σ*.Lemma 2In optimal solution σ*, we have0≤λ*≤mκ′,i.e., the number of jobs accepted inL1κis bounded bymκ′;|A*∩L2κ|≤m−λ*,i.e., the number of jobs accepted inL2κis bounded by m − λ*;P(A*)≤mC^κ,i.e., the total processing time of jobs in A* is bounded bymC^κ;P(A*∩L5κ)≤Δλ*,κ,i.e., the total processing time of jobs inA*∩L5κis bounded byΔλ*,κ; andP(A*∩L5κ)=P(A*∩L4κ)≤14mC^tif λ* = m.The proof for (i), (ii), (iii) and (iv) is obvious and thus omitted. We only provide the proof for (v). Here (v) is for the special case whenmκ′=mand λ* = m. In this special case, exactly m jobs inL1κ={Jj∈J∣pj>34C^κ}are accepted in σ*. Note thatCκ≥Cmax*. Thus, except for the m large jobs with a processing time greater than34C^κ,A* does not include any job having a processing time greater than14C^κ(otherwiseCmax*>34C^κ+14C^κ=C^κ,which is a contradiction). In other words,P(A*∩L5κ)=P(A*∩L4κ). It is clear thatP(A*∩L4κ)≤14mC^t.□We now introduce how to construct job setAt′based on Lemma 2. The major idea is as follows. No job inL0twill be assigned toAt′. We will select a subset of jobs fromJ∖L0t=L1t∪L5tto constructAt′. To make sure that all jobs inAt′can be scheduled on the m machines with a makespan no more than1.5C^t,we limit the number of jobs selected fromL1t∪L2tto be no greater than m, and the total processing time of the jobs selected fromL1t∪L5tis approximately equal tomC^t. In order to reduce total rejection penalty, we give priority to those jobs with a high value of wj/pjor wjwhen selecting jobs. We provide the details on constructingAt′in the following.To constructAt′,we first letAλt=L1t(λ)forλ=0,1,…,mt′,wheremt′=min{m,|L1t|}. In other words, we assign the λ jobs with the largest wjvalues inL1ttoAλt. When such λ jobs each of which has a processing time greater than34C^thave been assigned toAλt,the remaining space for accepting the jobs fromL5tis approximately equal toΔλ,t=(m−34λ)C^t. We denoteA¯λtas the set of jobs that will be selected fromL5tand added intoAλt. Note that we will letAt′=Aλttfor someλt∈{0,1,…,mt′}as the output of the construction ofAt′(the appropriate value of λtwill be determined later). We now focus on how to constructA¯λtforλ=0,1,…,mt′.In the construction ofA¯λt,we make sure that the following inequalities are satisfied:(5)|A¯λt∩L2t|≤m−λ(i.e., at most m − λ jobs inL2t={Jj∈J∣12C^t<pj≤34C^t}are assigned toA¯λt), and(6)P(A¯λt∩L5t)≤Δλ,t+12C^t=(m−34λ+12)C^t(i.e., the total processing time of jobs selected fromL5ttoA¯λtis bounded by(m−34λ+12)C^t). For the special case whenmt′=mand λ = m (i.e., when exactly m jobs inL1tare accepted), we letA¯λt=L4t={Jj∈J∣pj≤14C^t}ifP(L4t)≤14mC^t; otherwise, we find some integerυt∈{1,2,…,n4,t}such thatP(L4t(υt−1))<14mC^t≤P(L4t(υt)),and letA¯λt=L4t(υt). We focus on the case when λ < m in the following.DenoteΠλtas the procedure of constructingA¯λtwhen λ < m.Πλtare described as follows:IfP(L5t)≤Δλ,t,then go to Step 2; otherwise, go to Step 3.Ifn2,t=|L2t|>m−λ,then letA¯λt=L2t(m−λ)∪L5t; otherwise letA¯λt=L5t; stop.Find some integer αλ, t∈ {1, 2, …, n5, t} such thatP(L5t(αλ,t−1))<Δλ,t≤P(L5t(αλ,t)). If μt(αλ, t) ≤ m − λ, then go to Step 4; otherwise, go to Step 5.IfP(L5t(αλ,t))≤Δλ,t+12C^t,then letA¯λt=L5t(αλ,t); otherwise, letA¯λt=L5t(αλ,t−1); stop.IfP(L2t(m−λ))+P(L6t)≤Δλ,t,then letA¯λt=L2t(m−λ)∪L6tand stop; otherwise, go to Step 6.Find some integer βλ, t∈ {1, 2, …, n6, t} such thatP(L6t(βλ,t−1))<Δλ,t−P(L2t(m−λ))≤P(L6t(βλ,t)),and letA¯λt=L2t(m−λ)∪L6t(βλ,t).We provide a small instance to illustrate how procedureΠλtis executed. The small instance is as follows: m = 3, n = 10, job processing times (p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) = (12, 9, 9, 8, 7, 6, 3, 3, 2, 2), rejection penalty wj= 3 for j = 1, 2, …, 8 and w9 = w10 = 0.6. Assume thatC^t=10,λ = 2, and we would like to determineA¯2t. It is easy to determine:Δλ,t=(m−34λ)C^t=(3−32)×10=15,L0t={J1},L1t={J4,J2,J3},L2t={J6,J5},L3t={J7,J8},L4t={J9,J10},L5t={J7,J8,J6,J5,J9,J10},andL6t={J7,J8,J9,J10}. Thus,P(L5t)=23,P(L6t)=10,L2t(m−λ)=L2t(1)={J6}andP(L2t(m−λ))=6. According toL5t,we have (μt(1), μt(2), μt(3), μt(4), μt(5), μt(6)) = (0, 0, 1, 2, 2, 2). We now applyΠ2tto determineA¯2t. In Step 1,P(L5t)=23>15=Δλ,t,we go to Step 3. In Step 3, it is easy to find that αλ, t= 4 sinceP(L5t(3))=12<15=Δλ,t≤19=P(L5t(4)). Note that μt(4) = 2 > 2 − 1 = m − λ, we thus go to Step 5. In Step 5,P(L2t(m−λ))+P(L6t)=6+10>15=Δλ,t,we thus go to Step 6. In Step 6, it is easy to find that βλ, t= 4 sinceP(L6t(3))=8<9=Δλ,t−P(L2t(m−λ))≤10=P(L6t(4)),we thus letA¯2t=L2t(m−λ)∪L6t(4)=L2t(1)∪L6t(4)={J6,J7,J8,J9,J10}. Clearly,|A¯2t∩L2t|=|{J6}|=1≤m−λ,andP(A¯2t∩L5t)=P({J6,J7,J8,J9,J10})=16≤20=Δλ,t+12C^t,i.e., job setA¯2tsatisfies inequalities (5) and (6).We have the following property onA¯λtfor anyt=1,2,…,1ϵ′andλ=0,1,…,mt′(the proof is provided in Appendix A).Lemma 3Job setA¯λtsatisfies inequalities (5) and (6).Consider job setAλt=L1t(λ)∪A¯λt. Lemma 3 shows that the number of jobs inAλthaving a processing time greater than12C^tis no more than m, and that the total processing time of all of the jobs inAλtis approximately equal tomC^t. The following lemma shows that all jobs inAλtcan be scheduled on the m machines with a makespan bounded by1.5C^tby the LPT rule. In LPT, we assign the m largest jobs inAλtto the m machines at time zero. After that, whenever a machine is freed, the longest job among those not yet processed inAλtis put on the machine. The proof of the lemma is also provided in Appendix A.Lemma 4All jobs inAλtcan be scheduled on the machines with a makespan no greater than1.5C^tby the LPT rule.LetRλt=J∖Aλtforλ=0,1,…,mt′. Consider the total rejection penalty of jobs inRλ*κ,whereλ*=|{Jj∈A*∣pj>34C^κ}|is the number of jobs accepted inL1κin optimal solution σ*. We have the following important property on the value ofW(Rλ*κ)=∑Jj∈Rλ*κwj. The proof of this lemma is complex and we provide it in Appendix A.Lemma 5W(Rλ*κ)≤1.5W(R*).Fort=1,2,…,1ϵ′,we let(7)λt=argminλ=0,1,…,mt′{W(Rλt)}.We letAt′=L1t(λt)∪A¯λttas the output of the construction ofAt′(t=1,2,…,1ϵ′). As a result, the value ofZ˜tis defined to be(8)Z˜t=1.5C^t+W(Rλtt).By Lemma 5 and (7), we have(9)W(Rλκκ)=minλ=0,1,…,mκ′{W(Rλκ)}≤W(Rλ*κ)≤1.5W(R*).As a result,(10)Z˜κ=1.5C^κ+W(Rλκκ)≤1.5(Cmax*+23ϵZ*)+1.5W(R*)=(1.5+ϵ)Z*.In summary of this subsection, we have shown how to constructAt′,the set of jobs to be accepted whenC^tis in consideration. In the next subsection we will show how to compute eachZ˜tvalue in O(n) time. The computation ofZ˜tis strongly related to the construction ofAt′.In this subsection we show how to compute eachZ˜tvalue in O(n) time. For ease of presentation, we first assume that all of the values ofW(Lϑt(ρ)),P(Lϑt(ρ)),and μt(ρ) have been predetermined for any ϑ = 0, 1, …, 6 and ρ = 1, 2, …, nϑ, t(we will introduce how to predetermine those values later).To determineZ˜t,we need to find out the value of λt. To determine λt, by (7), we need to determine all of the valuesW(R0t),W(R1t),…,W(Rmt′t). Note that forλ=0,1,…,mt′,we have(11)W(Rλt)=W(J∖Aλt)=W(J)−W(L1t(λ)∪A¯λt)=W(J)−W(L1t(λ))−W(A¯λt).Provided the values of W(J) andW(L1t(λ)),to computeW(Rλt),we only need to computeW(A¯λt). For the special case whenmt′=mand λ = m, we letW(A¯mt)=W(L4t)ifP(L4t)≤14mC^t; otherwiseW(A¯mt)=W(L4t(υt)). If necessary, the value ofυtcan be determined in O(log n) time by binary search based on the values ofP(L4t(1)),P(L4t(2)),…,P(L4t(n4,t)). Thus, the value ofW(A¯λt)can be determined in O(log n) time for this special case.We focus on the case when λ < m, where procedureΠλtis applied to determineA¯λt. Note that according to different scenarios inΠλt,A¯λtmay be equal toL5t,L2t(m−λ)∪L6t,L5t(αλ,t),L5t(αλ,t−1),orL2t(m−λ)∪L6t(βλ,t). Therefore,W(A¯λt)may be equal toW(L4t),W(L2t(m−λ))+W(L3t),W(L5t(αλ,t)),W(L5t(αλ,t−1)),orW(L2t(m−λ))+W(L6t(βλ,t)),depending onA¯λtequal to which job set. Provided the value ofW(Lϑt(ρ))for any ϑ = 1, 2, …, 6 and ρ = 1, 2, …, nϑ, t, the value ofW(A¯λt)is computed in constant time once the fact thatA¯λtis equal to which job set is known. To checkA¯λtis equal to which job set, we need to compute the value of Δλ, tand execute procedureΠλt. ProvidedC^t,each Δλ, tis computed in constant time. For anyλ=0,1,…,mt′,we define αλ, t= +∞ if Step 3 of procedureΠλtdoes not happen, and define βλ, t= +∞ if Step 6 of procedureΠλtdoes not happen. It is easy to see that the running time complexity ofΠλtis O(1) if the values of αλ, tand βλ, tare provided. It is clear that each αλ, tand βλ, tcan be determined individually in O(log n) time by binary search. However, we have the following property on how to determine all of the values in{αλ,t,βλ,t|λ=0,1,…,mt′}in linear time.Lemma 6All of the values in{αλ,t,βλ,t∣λ=0,1,…,mt′}can be determined in O(n) time for anyt=1,2,…,1ϵ′.The proof of Lemma 6 is provided in Appendix A. By Lemma 6, we first determine all of the values in{αλ,t,βλ,t|λ=0,1,…,mt′}in O(n) time. For anyλ=0,1,…,mt′,provided αλ, tand βλ, t, the complexity of procedureΠλtis O(1), and we execute procedureΠλtso as to find out the fact thatA¯λtis equal to which job set. The fact is known andA¯λtis determined once procedureΠλtis executed, and then the value ofW(Rλt)is computed in constant time. Note that it is unnecessary to construct job setA¯λtduring the computation ofW(Rλt)for anyλ=0,1,…,mt′. Thus, provided all of the values in{αλ,t,βλ,t|λ=0,1,…,mt′},all of the valuesW(R0t),W(R1t)),…,W(Rmt′t))are computed in O(m) time, and the space complexity in the computation of thosemt′+1values is only O(m). WhenW(R0t),W(R1t)),…,W(Rmt′t))are computed, the desired value of λtis determined in O(m) time. Provided λt, the value ofZ˜t=1.5C^t+W(Rλtt)is computed in constant time. In summary, the value ofZ˜tcan be computed in O(n) time if those values ofW(Lϑt(ρ)),P(Lϑt(ρ))and μt(ρ) are given.Finally, we show how to predetermine those values ofW(Lϑt(ρ)),P(Lϑt(ρ))and μt(ρ). To determine those values, we need to determine job setLϑtfor ϑ = 0, 1, …, 6. To determine those job sets, we predetermine three useful job sequences of J in advance. The first job sequence, denoted by Q1, is the order with nonincreasing processing times. The second job sequence, denoted by Q2, is the order with nonincreasing values of wj/pj. The third job sequence, denoted by Q3, is the order with nonincreasing values of wj. We predetermine such three job sequences in O(nlog n) time in advance (thus, we can assume that such three job sequences are given in the computation of anyZ˜t). Provided job sequence Q1, job setsL0t,L1t,…,L6tare determined in O(n) time. Provided job sequence Q3, the desired job sequence ofL1tcan be determined in O(n) time by the following method: We first copy the sequence of Q3 and check the jobs in the sequence one by one from the first to the last, delete a job whenever the job is not inL1t(or equivalently, the processing time of the job is not within interval(34C^t,C^t]), and then the sequence of the remaining jobs is the desired job sequence forL1t. Provided job sequence Q2, the desired job sequence ofLϑt(2 ≤ ϑ ≤ 6) can be determined in O(n) time by a similar method: We first copy the sequence of Q2 and check the jobs in the sequence one by one from the first to the last, delete a job whenever the job is not inLϑtand then the sequence of the remaining jobs is the desired job sequence forLϑt. Thus, provided Q1, Q2 and Q3, job setLϑt(1 ≤ ϑ ≤ 6) and its job sequence is determined in linear time. Then, based on the job sequence ofLϑt,all of the values in {P(Lϑ(ρ)), W(Lϑ(ρ))|ϑ = 1, 2, 3, 4; ρ = 1, 2, …, nϑ} can be determined incrementally in O(n) time. Note thatμt(ρ)=|{Jj∈L5t(ρ)∣pj>0.5C^t}|. Based on the job sequence ofL5t,all of the values of μt(1), μt(2), …, μt(n5, t) also can be determined incrementally in O(n) time.In summary of this subsection, we have the following result.Lemma 7If job sequences Q1, Q2, Q3 and the value ofC^tare given, then each value ofZ˜t(1≤t≤1ϵ′) can be determined in O(n) time, and the corresponding space complexity in the computation ofZ˜tis O(n).In this subsection we show that heuristicHhas a worst-case bound of 1.5 + ε and a running time complexity of O(nlog n + n/ε).In heuristicH,we first predetermine job sequences Q1, Q2, Q3 and upper bound Z0, where Z0 is the objective function value of the solution generated by the O(nlog n) heuristic presented by Bartal et al. (2000). Provided Z0, we compute the1ϵ′valuesC^1,C^2,…,C^1ϵ′. Provided Q1, Q2, Q3 andC^t,by Lemma 7, we compute the value ofZ˜tin O(n) time (1≤t≤1ϵ′). Note that the value of λtis also determined in the computation ofZ˜t. We compute the values ofZ˜1,Z˜2,…,Z˜1ϵ′one by one and in this order. To reduce space complexity, onceZ˜tis computed, except for storing the values ofZ˜tand λt, we delete all of the other data such asLϑt,P(Lϑt(ρ)),W(Lϑt(ρ))and μt(ρ) ifZ˜tis not the minimum amongZ˜1,Z˜2,…,Z˜t. After the value ofZ˜1ϵ′is computed, we can find out index ξ such thatZ˜ξ=min{Z˜t∣t=1,2,…,1ϵ′}. Note that we do not delete the data generated in the computation ofZ˜ξ(such asLϑξ,P(Lϑξ(ρ))and μξ(ρ)) sinceZ˜ξis the minimum. Provided ξ, λξand the corresponding data, we apply procedureΠλξξto determine job setA¯λξξ,and letAξ′=A¯λξξ∪L1ξ(λξ). Finally, we generate the following solutionσ^ξin which all jobs inJ∖Aξ′are rejected, while all jobs inAξ′are scheduled on the m machines by the LPT rule. The running time complexity of LPT is O(nlog n). Here solutionσ^ξand its solution value is the final output of heuristicH. Note that we haveZ˜κ≤(1.5+ϵ)Z*for someκ∈{1,2,…,1ϵ′}(by (10)). This indicates that solution value ofσ^ξis bounded byZ˜ξ≤Z˜κ≤(1.5+ϵ)Z*.To summarize the presentation of our heuristic and the corresponding analysis in this section, we have the following main theorem.Theorem 1HeuristicHis a (1.5 + ε)-approximation to problem P|rej|Cmax+ ∑wjwith the time complexity of O(nlog n + n/ε) and the space complexity of O(n).Consider the extension P|ai, rej|Cmax+ ∑wj, where each machine Miis available to processing time only after some given point of time ai≥ 0, i = 1, 2, …, m. It is not difficult to modify heuristicHslightly to solve P|ai, rej|Cmax+ ∑wj, so that the corresponding worst-case bound remains 1.5 + ε.

@&#CONCLUSIONS@&#
