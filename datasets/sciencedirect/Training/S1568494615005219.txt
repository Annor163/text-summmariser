@&#MAIN-TITLE@&#
Hybridized ant colony algorithm for the Multi Compartment Vehicle Routing Problem

@&#HIGHLIGHTS@&#
Hybridized ant colony algorithm has been proposed to solve the Multi Compartment Vehicle Routing Problem.Numerical experiments were performed to evaluate the performance of the algorithm.The numerical results showed that the average total length improvement of the proposed HAC over the existing ACS is 5.1%. In addition, the proposed HAC maintains its high performance in large problems on contrary of the existing ACS.The numerical result for the effect of hybridizing the ant colony algorithm with local search schemes has been presented.Illustration of the benefit of using two-compartment vehicles instead of single-compartment vehicles has been presented.

@&#KEYPHRASES@&#
Ant colony,Metaheuristic,Multi Compartment,Vehicle Routing Problem,

@&#ABSTRACT@&#
Multi Compartment Vehicle Routing Problem is an extension of the classical Capacitated Vehicle Routing Problem where different products are transported together in one vehicle with multiple compartments. Products are stored in different compartments because they cannot be mixed together due to differences in their individual characteristics. The problem is encountered in many industries such as delivery of food and grocery, garbage collection, marine vessels, etc. We propose a hybridized algorithm which combines local search with an existent ant colony algorithm to solve the problem. Computational experiments are performed on new generated benchmark problem instances. An existing ant colony algorithm and the proposed hybridized ant colony algorithm are compared. It was found that the proposed ant colony algorithm gives better results as compared to the existing ant colony algorithm.

@&#INTRODUCTION@&#
The Vehicle Routing Problem (VRP) is the class of problems in which the demands of customers are fulfilled with the products originating from depot and transported using a fleet of vehicles in such a way that the total traveling cost of all vehicles is minimized. The VRP was first considered as a generalized form of the famous Traveling Salesman Problem (TSP) formulated by Dantzig and Ramser [1]. They tried to find shortest route to deliver fuel using gasoline delivery trucks from central depot to gas stations. The most basic form of the problem is called Capacitated Vehicle Routing Problem (CVRP). In the CVRP, a fleet of identical vehicles (initially settled in the depot) with constant capacity Q serves a number of customers, each has a constant known demand to be delivered or picked up. Each vehicle visits a group of the customers only once, such that the total demand of the customers assigned to any route does not exceed the capacity of the vehicle. The objective is to minimize the total distance traveled by all the vehicles. For recent research work in the area of the VRP and its variants see [2–6].The Multi Compartment Vehicle Routing Problem (MCVRP) deals with satisfying the demand of customers with different products. The demand of each customer for each product is constant and known in advance. The products should be stored in different compartments of the same vehicle while being transported together. Vehicles are partitioned into a constant number of compartments with certain capacities. Customers are assigned to routes so that the total demand of customers assigned to any route for certain product does not exceed the capacity of the reserved compartment for this product. The objective is to minimize the total transportation cost.There are many industries in which different products are handled separately using multi compartment vehicles. Compartment splitting is essential when products cannot be mixed while transported together as they have different individual characteristics. For example, in waste collection applications it was found that the total recycling cost can be reduced if the sorting process is eliminated. This can be achieved by classifying the disposal bins in the collection site. However, this requires transporting the sorted waste to recycling facilities into different compartments. Nowadays, in most cities, the municipal cooperation provides separate garbage bins to individual household for garbage collection.Another application of the MCVRP is the delivery of food and grocery where refrigerated and non-refrigerated grocery items are stored in two different compartments in the same vehicle. Chajakis and Guignard [7] presented two integer programming models for two different layout vehicles and presented Lagrangean Relaxations for the first model. They addressed the decisions involved in assigning customers to routes only and stated that sequencing of customers within trips can be solved by any traveling salesman algorithm. They stated that the customers’ orders should be fulfilled completely by one vehicle.Another application of the MCVRP is delivering different types of fuels using a fleet of vehicles or marine vessels with different capacity tanks. To solve this problem, Avella et al. [8] used set portioning to formulate a branch and bound algorithm. El Fallahi et al. [9] found an application in which animal foods are supplied to the farms separately. They proposed two algorithms to solve the problem: memetic algorithm and a Tabu Search algorithm.Muyldermans and Pang [10] investigated the benefits of co-collection of sorted waste from different locations to central location by multi compartment vehicles over separate collection by regular vehicles. They introduced a new local search procedure based on 2-opt, cross, exchange, and relocate moves to solve the problem and compared their results with El Fallahi et al. [9]. It was assumed in [8–10] that the demand of each customer for certain items cannot be splitted. However, they assumed that more than one vehicle can visit the customer to fulfill demands of different items. Reed et al. [11] proposed an Ant Colony System (ACS) with 2-opt local search improvement to solve the basic CVRP in recycling waste collection network. They extended their algorithm to solve the MCVRP in which the customers are visited only once by one vehicle. Our work is inspired from Reed et al. [11] algorithm extension for the MCVRP. We address the problem of garbage collection from certain locations where the garbage should be picked up and stored in different compartments on the same vehicle. We use a fleet of identical vehicles; each one of them visits a group of locations such that each customer is visited by only one vehicle and only once. The problem is to decide which customers are assigned together in one trip as well as the order of visiting them with the objective of minimizing the total traveling distance.The ant colony (AC) algorithm is inspired by the behavior of ant colony in the search of food. They mark their trails by laying a substance called pheromone. The amount of laid pheromone on the path inspires other ants to know whether this path is promising or not. This observation inspired Dorigo et al. [12] to design a metaheuristic technique to solve combinatorial optimization problems. They presented the first AC in which agents called ants simulate the behavior of the real ants. The ants communicate with each other by the pheromone laid by the ants while traveling from one place to another. Higher amount of pheromone in a path increases the probability of ants to follow that path. Dorigo et al. [12] used the TSP to apply their algorithm and compare it with other approaches. Due to simplicity of the general procedures of the algorithm, it was applied in many different problems.AC has been used in solving the VRP and its variants since Bullnheimer et al. [13] designed their AC trying to solve the basic VRP. Although they could not improve the best known solutions, their algorithm produced good results and showed competiveness with other metaheuristics. Montemanni et al. [14] used AC to solve the dynamic VRP. They introduced new benchmark problems and tested their algorithm which showed good results. Bin et al. [15] presented an improved AC by offering new pheromone updating strategy called ant-weight and by introducing mutation operator. Other than computation times, their algorithm was effective compared to other metaheuristics.Gajpal and Abad [16] presented an AC to solve the VRP with simultaneous delivery and pickup. Balseiro et al. [17] tried to enhance the AC algorithm by hybridizing it with an insertion algorithm to solve a time dependent the VRP with time window constraints. De la Cruz et al. [18] proposed a sequential algorithm with AC and Tabu Search to solve the VRP with time window constrains in which heterogeneous vehicles deliver multiple products. All these papers presented new best known solution for the benchmark problems. This shows the effectiveness of ant colony algorithm in solving the VRP and its variants. One of the recent metaheuristic approaches is the Chemical Reaction Optimization. This approach has been successively used to solve many hard problems [19,20]. In future work, this approach can be tested to solve the MCVRP.The aim of this paper is to improve the existing ant colony algorithm to solve the MCVRP. We improved the existing ant colony algorithm by hybridizing it with local search schemes. This paper also contributes on developing a mathematical formulation of the problem. In addition, new benchmark problem instances have been introduced. These benchmark problems can be used for comparing the results of new solution approaches in the future research work. We also illustrate the benefit of using the two-compartment vehicles instead of single-compartment vehicles.The paper is organized as follows: in Section 2 main assumptions are identified, the problem is described, and a new formulation is derived. Section 3 describes the proposed hybridized ant colony algorithm (HAC) and the local search procedures. Extensive computational experiments are presented in Section 4. We also compare the proposed algorithm's performance with the existing ant colony algorithm. Section 5 concludes the paper.A list of notations related to the problem definition is presented below:NSet of customersKSet of vehiclespSet of compartments and productsqipQuantity of product p to be picked up from customer iQpVehicle capacity reserved for product pLThe maximum length of any routeCijThe distance of traversing arc (ij)QipkThe total carried quantity of product p by vehicle k after leaving vertex iWe provide a mathematical formulation for the problem to make the paper comprehensive. The mathematical formulation for the MCVRP considered in this paper is not available in the literature. However, a mathematical formulation for a variant of MCVRP is available in [9]. In the variant of MCVRP, the customer is allowed to get served more than once. Our formulation is based on pickup of materials from customer locations. Let G=(V, A) be an undirected graph with a set of vertices V={0, 1, …, n}, where 0 represents the depot node, and N={1, 2, …, n} are the customers served by a set of identical vehicles K (initially located in the depot). Vehicles are divided into a number of compartments p equals to the number of products handled in the network. Each customer i has a known quantity qipto be picked up of each product p and each customer is visited exactly once by only one vehicle. Each vehicle visits a group of customers, such that the total load of this group of customers for a certain type of products does not exceed the vehicle capacity of the compartment reserved for this product Qp. The maximum length of each route cannot exceed L. Let Cijbe the distance of traversing arc (ij). LetXijkbe a binary variable equals to 1 if and only if vehicle k visits customer j just after customer i. LetQipkdenote the total carried quantity of product p by vehicle k after leaving vertex i. Then, the MCVRP can be formulated as follows:Minimize(1)Z=∑k∈K∑i∈V∑j∈VCijXijkSubject to:(2)∑k∈K∑j∈NXijk=1∀i∈N(3)∑k∈K∑i∈NXijk=1∀j∈N(4)∑i∈NX0ik=∑j∈NXj0k=1∀k∈K(5)qip≤Qipk≤Qp∀i∈N,k∈K,p∈P(6)Qipk−Qjpk+QpXijk≤Qp−qjp∀i∈V,k∈K,p∈P(7)∑i∈V∑j∈VCijXijk≤L∀k∈K(8)Xijk∈{0,1}∀i∈V,j∈V,i≠j,k∈KEq. (1) is the objective function representing the total cost of all traversed arcs by all vehicles. Eqs. (2) and (3) impose that exactly one arc enters and leaves each vertex associated with a customer respectively. They together ensure that only one vehicle visits a customer and only once. Eq. (4) ensures that each vehicle k starts its route from depot 0 and ends it at depot 0. Eqs. (5) and (6) are necessary for sub-tour elimination; they impose the capacity requirement and connectivity requirement between two customers. WhenXijk=0, Eq. (6) is not binding sinceQipk≤Qpandqjp≤Qjpk. WhenXijk=1Eqs. (5) and (6) impose thatQipk−Qjpk≤−qjpwhich eliminates sub-tour construction. In addition, Eq. (5) ensures that the total carried quantity after visiting vertex i does not exceed the vehicle capacity for this product. Thus, Eq. (5) ensures capacity violation constraint. Eq. (7) represents the route length constraint. Eq. (8) describes variablesXijkwhich equal to 1 if and only if vehicle k visits customer j just after customer i.A list of notations related to the proposed HAC is presented below:τijTrail intensity on arc (ij)mNumber of antsμijThe inverse of the distance of arc (ij)ɛijThe attractive value of arc (ij)NiThe list of all feasible customers that has not been visited by the antLbestThe length of the best solution found so farρThe trail persistenceTabusThe Tabu list for first visited customer by all ants.TabuiThe Tabu list for the customers visited by ant iThe AC algorithm is used for finding near optimal solutions for NP-hard problems. The algorithm is based upon the behavior of real ants for finding shortest path when they travel from their nest to the food source. In the AC algorithm, artificial ants are used to construct a solution. These simple agents called ants travel from one customer location to another customer location to construct proposed routes (solutions of the VRP). Each ant performs four basic activities during route building process: (1) It chooses next customer based on a probability function of two attraction measures; the distance from current location to the proposed customer and the trail intensity on this arc; (2) It keeps a history of the visited customers during current route (tabu list); (3) It updates the remaining capacity in the vehicle; and (4) It updates trail intensities on the visited arcs. Then local search procedures are applied to enhance the solutions quality. Finally, the tabu lists are deleted and a new iteration starts. The HAC algorithm is described below and followed by detailed description in next subsections.Step 1: Create initial solution to initialize the trail intensities.Step 2: Repeat the following until termination condition is reached:•Construct routes for m number of ants.Perform local search scheme to improve the solution produced by each ant.Update best solution found.Update trail intensities for all arcs using best solution.Step 3: Terminate the algorithm and report the best solution.The flow diagram for generating an initial solution is shown in Fig. 1. The flow diagram for the proposed HAC is shown in Fig. 2.We need to initialize trail intensities at the beginning of the algorithm. The initial trail intensities do not affect the proceeding of the algorithm because the same amounts are deposited to all edges at the beginning. However, we need a solution to initialize trail intensities. Therefore, initial solution is generated. The initial solution is generated randomly by starting the route from the depot. Customers are added randomly to a vehicle route as long as the vehicle capacity is sufficient to pick up the customers load. Otherwise, the vehicle returns to the depot before visiting the next customer. Dorigo et al. [12] set the value of the initial pheromone to a small positive constant. Most of the literature of AC used initial solutions to initialize trail intensities. Reed et al. [11] used τ°=1/nLneig, where Lneigis the length of the nearest neighbor tour and n is the number of customers. We calculated the initial pheromone based on the expression τij=1/L(∀i, j∈N), where L is the total length of a randomly generated tour.We use m ants to construct ant solutions (see parameters setting in Section 4 for setting the value of m). Each ant generates a complete tour (a complete solution of MCVRP). Each ant starts its route from the depot and continues by selecting first customer randomly (each ant starts the route from different customer). The first customer is chosen randomly to diversify the solution. Each ant then travels from customer to another based on two attraction measures representing the probability function. The first measure is the trail intensity τijwhich contains information on how frequently arc ij has been used in previous iterations. The second measure μijis the inverse of arc distance which represents the move desirability. The attractive value is calculated as follows:(9)εij=(τij)α(μij)βThe probability of picking customer j as the next customer is:(10)Pij=εij∑l∈Niεilifj∈Ni0otherwisewhere Niis the list of all feasible customers that have not been visited by the current vehicle and can be visited without exceeding the vehicle capacity or passing the maximum length of the trip. However, before each ant decides to choose the next customer according to Eq. (10), a random variable q uniformly distributed over [0,1] is assessed. If q>q° the next customer is chosen according to Eq. (10), otherwise choose the customer which has the maximum attractive value among feasible customers, where q° is a constant value. Each ant continues adding customers to its route until there is no more feasible customers (Niis empty). Then the ant proceeds to the depot to start another trip. If the first customer in the trip is chosen according to Eq. (10), the first customer on the route would be one of the neighbors of the depot only. This can limit the diversity of the search.After creating all routes, three local search procedures; 2-opt, customer insertion, and customer exchange are performed to enhance the solution quality. The local search schemes are implemented sequentially on each route without violating the capacity constraints. The following are the descriptions of the schemes.This scheme was proposed by Lin [21] to solve the TSP. Each trip is considered a TSP, so it can be modified to reduce the distance traveled without exceeding the capacity. A 2-opt local search can be described as follows: The trip is broken at two places forming three sections. The customers’ sequence of the middle section is inverted. The trip is reconstructed by connecting the three sections and the total length of the new trip is calculated. All the possible 2-opt moves are investigated by trying all combinations of two places and the move with maximum improvement is chosen. The process continues till no further improvement is possible. It is considered one of the powerful local search schemes for the TSP. However, its implementation in the VRP is limited since customers are not allowed to move between different routes. Thus, we considered two other local search schemes where customers are moved between two routes.The drawback of 2-opt heuristic is that it does not move customers between routes. On the contrary of the 2-opt scheme, customer insertion allows the movement of customers between different trips. There are two types of insertions; insertion in the same trip, and insertion in different trips. Customer i is first removed from position a in trip Tp, then inserted in another position b in Tq. We consider the insertion possibility for customer i in the same trip Tpas well in another trip Tq. If the customer is inserted in the original trip Tp, the capacity constraint will be conserved. Thus, we only need to check the possible insertion at different places in the same trip Tp. If insertion is considered in different trip Tq, the capacity of the vehicle is first checked before checking insertion of customer i in trip Tq. If the vehicle capacity permits insertion, maximum route length constraint should be tested for every position. The insertion of customer i will be tried in all positions of all trips. The improvement is calculated by subtracting the increase in length of the enlarged trip due to customer insertion from the reduction in length of the original trip. All customers should be tested as candidates for insertion in all positions. Customer which may yield highest improvement is selected for possible insertion. The current solution is modified by inserting the chosen customer at the place where its insertion yields highest improvement. Once a modified/improved tour is obtained, the whole process is repeated with modified/improved tour to make a second modified tour. If second modification is not possible, then the search process is stopped. Otherwise, search process is continued till search process stops improving solutions.Customer exchange can be done within the same trip or between different trips. Customer i first removed from its position in trip Tpto be swapped with customer j in tour Tq. If both customers are in the same trip, then the capacity constraint is not violated. However, if two customers are from different trips, both trips new vehicle loads are checked. In addition, both trip lengths should be checked for maximum length constrains to make sure that the move is feasible. All feasible trades are evaluated and the one with maximum improvement is chosen. The whole swapping process continues on improved tour till no further improvement is possible.After local search is performed, all trail intensities are updated by the best solution found so far. The purpose of the local search schemes is to improve the solutions generated by ants. Therefore, the best solution is updated only after applying local search schemes. Hence, the best solution is then used to update the trail intensities. Pheromone or trail intensities evaporate with time on all arcs. At the same time, ants leave pheromone on the visited arcs. These two actions are performed after local search improvements in each iteration. Updating trail intensities is described in two steps: lowering of pheromone on all arcs and pheromone increase on the arcs reported in the best route only. According to Dorigo et al. [12], ρ is defined as trail persistence 0≤ρ<1. The term (1−ρ) is interpreted as trail evaporation. Eq. (11) updates the trail intensities by adding 1/Lbestto the remaining amount of trail intensity after its evaporation.(11)τabnew=ρ×τabold+1/Lbestifarcab∈bestrouteρ×τaboldotherwisewhere Lbestis the total length of the best solution in each iteration. See parameters setting in Section 4 for setting the value of ρ. The first part of Eq. (11) represents the remaining amount of trail intensities after evaporation. Therefore, the existing trail intensities are multiplied by the term ρ. In the second part of Eq. (11), trail intensities of the arcs included in the best solution are increased by amount 1/Lbest.In this section, we present the setting of parameters, explain how the data was generated from the benchmark problems, present the numerical results, and compare the results of the proposed HAC algorithm with the best reported results of the existing ACS proposed by Reed et al. [11].The number of the used ants m controls the solution quality, but it also affects the computational time. We found that after 20 ants, the computational time increases excessively without any observed solution improvements. Dorigo et al. [12] found that setting (α=1 and β=2) gives very good solutions. Setting (ρ=0.9) gave a good chance to update the pheromone with the new experience of ants on the account of the existing experiences. In addition, we set (qο=0.9) as recommended by Reed et al. [11]. We used 100 iterations to test the performance of the HAC against 2000 iterations for the ACS. We used 100 iterations for two reasons: (1) to keep the solution time comparable with the existing algorithm; (2) improvement is very minimum after 100 iterations.The new benchmark problems for the MCVRP are generated from the VRP benchmark problems of Christofides [22]. We used the method described by Reed et al. [11] to generate the data set. Christofides [22] has 14 problem data sets named as vrnpc1 to vrnpc14. Each one of the original problems was used to generate two different problems referred to as a and b. For example, problem vrnpc1 was used to generate vrnpc1a and vrnpc1b. The used procedure to generate the two data sets is described in the following steps:Step 1: The vehicles were splitted into two compartments using capacity ratio 1:3. This means that if the capacity of the vehicle in the original data set is Q, then the capacity of the two compartments in the new data sets is 0.25Q and 0.75Q.Step 2: The customers were divided into two regions according to their coordinates: region 1 and region 2. Customers are assigned to their regions as follows: Let Xmax and Ymax be the maximum x-coordinate and the maximum y-coordinate among all customers coordinates respectively. Region 1 contains the customers with x and y coordinates greater than 0 and less than Xmax/2 and Ymax/2 respectively. Region 2 contains all other customers, i.e. whose x and y coordinates greater than Xmax/2 and Ymax/2 respectively.Step 3: The customers located in region 1 require a product pickup quantity of the ratio 1:2. If the pickup quantity in the original data set is q, then the pickup quantity of product 1 and product 2 in the new data sets are 0.33q and 0.67q. In region 1, both problem sets a and b has the same ratio 1:2 for pickup quantity of product 1 and product 2.Step 4: Customers from region 2 require a product pickup quantity of the ratio 1:3 in problems vrnpcXa and ratio 1:4 in problems vrnpcXb. If the pickup quantity in the original data set is q, then the pickup quantity of product 1 and product 2 in the new data sets are 0.25q and 0.75q in problems a, and 0.2q and 0.8q in problems b.In this way we generated 28 problem instances from the 14 problem set of Christofides [22]. The results of the existing ACS are not available for these 28 new generated problem instances. Therefore, we coded the existing ACS to get its solutions for these problem instances.The proposed HAC algorithm and the existing ACS were coded in C and the new generated 28 problems were solved. The HAC was run for 100 iterations only to maintain the considerably low computational time. The ACS was run for 2000 iterations as recommended by Reed et al. [11]. The results were obtained using a server that operates four 2.1GHz processors with 16-core each and a total of 256GB of RAM. The results are presented in Table 1. The percentage improvement in total length is calculated according to Eq. (12) by dividing the difference in average total length calculated by both algorithms by the total length calculated by ACS.(12)Improvement%=ACS−HACACS×100The results reported in Table 1 show that the average total length of ACS is 1109.2 unit length and the average computational time is 204.5s, the average total length of HAC is 1048.4 unit length and the average computational time is 128.5seconds. The average total length improvement of the proposed HAC over the existing ACS is 5.1%. These results already exhibit that the proposed algorithm produces better quality solution in less computational time compared to the existing algorithm for all solved problems except one problem (vrpnc12a). This validates the dominance of the proposed algorithm over the existing algorithm. The difference between the total length calculated by HAC and ACS is very tight in problems vrnpc11 to vrnpc14. This is because the customers are clustered in these problems and thus the problems can be solved easily. A trend can be remarked in the total length improvement percentage with the number of customers. It increases from about 3% in small problems to more than 8% in larger problems. This trend indicates that the performance of the proposed HAC over the existing ACS increases with the increase in problem size. It can be concluded that HAC maintains its high performance in large problems where the number of customers is more than 100. Note that the ACS algorithm used 2000 iterations while the proposed HAC used 100 iterations. The HAC used less number of iterations but produced better solutions because of the hybridization of ant colony algorithm with local search procedures. The effect of using different hybridization schemes is further analyzed and described in the next section.In this section, we present the effect of hybridizing the ant colony algorithm with the local search schemes. In order to observe the effect of local search schemes on HAC algorithm, we solved the MCVRP under two settings. In the first setting, the HAC algorithm described in Section 3 is used without adding any local search schemes to solve the problem. In the second setting, the HAC is combined with local search schemes under three criteria. Under the first criteria, only 2-opt local search scheme is combined with HAC. Under the second criteria, 2-opt and swapping local search schemes are used. Finally, under the third criteria, 2-opt, swapping and insertion local search schemes are all combined with HAC. We changed the number of iterations for each criterion to maintain approximately the same computational time. We evaluated the performance of the algorithm after applying each local search scheme. The results are shown in Table 2. Fig. 3 represents the effect of hybridization on the solution quality. It can be noticed that hybridizing the ant colony algorithm with local search schemes enhanced the solution quality. When ant colony is hybridized, improvement percentage in the average total distance is calculated from the average total length obtained by AC algorithm when no local search scheme is applied (Fig. 3).It is clear from Table 2 and Fig. 3 that ant colony algorithm needs better local search schemes for better performance. When 2-opt local search is combined with AC, the solution quality is improved by 11.31%. However, 2-opt local search is not sufficient to improve the solution quality. Note that 2-opt local search is applied only on a single trip and thus its performance is good for the TSP but its performance for the VRP is limited. When ant colony is combined with 2-opt and swapping local search schemes, the solution quality improves from 11.31% to 12.66%. The results indicate that swapping enhances the solution quality because it moves customers between two routes. Finally, when insertion local search is combined with 2-opt and swapping, the solution improves from 12.66% to 17.11%. This result shows that insertion local search is very effective local search scheme in improving the solution quality.In this section, we illustrate the benefit of using multi-compartment vehicles instead of single compartment vehicles in garbage collection. In order to calculate this benefit, we solved the generated problem instances in two settings. In the first setting, two-compartment vehicles are used to collect the demand of all customers. In the second setting, only one compartment vehicles are used to collect the demand of all customers. The total vehicle capacity is kept same under both settings. Suppose the vehicle capacity of the compartments for two products are Q1 and Q2 under first setting. Then, the vehicle capacity under second setting is set to Q=Q1+Q2.Since the products have different characteristics, they cannot be transported within the same vehicle in the second setting. Therefore, a customer is visited twice to collect product 1 and product 2 at different trips. In this case the problem is decomposed into two sub-problems. The first sub problem consists of solving the VRP for collection of product 1 and the second sub problem consists of solving VRP for collection of product 2. The sum of traveling cost for these two sub problems represents the solution for second setting. The results of 14 problem instances under two settings are presented in Table 3. The results reported under first setting (i.e., two compartments) are the same results reported in Table 1. The results reported under second setting (i.e., single compartment) are the combined tour length obtained after solving two sub problems using the proposed HAC.It can be noticed that the total cost (total length) increases significantly when single compartment vehicles are used. In this case, a customer is visited twice to collect two different products. Visiting a customer twice increases the total traveling cost. Although the travel cost per trip decreases because of the increase of vehicle capacity which allows vehicles to serve more customers per trip. The results reported in Table 3 show that the average total tour length increases by 70% when single compartment vehicles are used to serve the customers. The high percentage increase of tour length clearly exhibits the benefit of dividing the vehicles in different compartments instead of using the same vehicles with single compartment.

@&#CONCLUSIONS@&#
