@&#MAIN-TITLE@&#
A meta-heuristic to minimize makespan for parallel batch machines with arbitrary job sizes

@&#HIGHLIGHTS@&#
We consider makespan minimization of a set of jobs on parallel batch machines.A MMAS-based heuristic is proposed to batch the jobs.The batches are then scheduled by the Multi-Fit algorithm on the machines.Experimental results show that our algorithm outperforms other algorithms.

@&#KEYPHRASES@&#
Meta-heuristic,Parallel batch machines,Max–min ant system,NP-hard,

@&#ABSTRACT@&#
We consider the problem of scheduling a set of n jobs with arbitrary job sizes on a set of m identical and parallel batch machines so as to minimize the makespan. Motivated by the computational complexity of the problem, we propose a meta-heuristic based on the max–min ant system method. Computational experiments are performed with randomly generated test data. The results show that our algorithm outperforms several of the previously studied algorithms.

@&#INTRODUCTION@&#
With the popularity of intelligent electronics in daily life, the semiconductor industry has become one of the fastest growing and most competitive industries in the world. To enhance the competitiveness, the semiconductor manufacturers try their best to improve the efficiency of the manufacturing processes. Besides the production control methods based on dispatching rules, scheduling is crucial for the competitiveness of semiconductor manufacturing. The manufacturing of integrated circuits is a key business in electronics industry, where batch processing is a common procedure. The process of batching contributes to avoiding setups and facilitates the handling of materials. A batch is defined as a group of jobs that have to be processed jointly (Brucker et al., 1998). A batch scheduling problem consists of grouping the jobs on each machine into batches and scheduling these batches either in serial (named s-batching) or in parallel (named p-batching). Moreover, p-batching is more important than s-batching in semiconductor manufacturing (Mönch, Fowler, Dauzere-Peres, Mason, & Rose, 2011).Batching problems can be found mainly in the oxidation/deposition/diffusion area of wafer fabs as well as the burn-in operation in the final testing (Xu, Chen, & Li, 2013). Batch processing facilities are generally bottlenecks in the manufacturing systems because of their high utilization and the lengthy processing time of the operations. The burn-in oven in the final testing stage of semiconductor manufacturing is an example of batch machines, where the integrated circuits are tested for defects by subjecting them to thermal stress for an extended period of time. Since the capacity of the burn-in oven is limited and the processing time of the burn-in operations are generally much longer than those of the other testing operations, the burn-in operation becomes a bottleneck in the final testing operation. Thus, effective scheduling of the burn-in operations is of great concern to the manufacturing performance and productivity. Besides, p-batch scheduling is commonly encountered in many other modern manufacturing industries such as the chemical, food and mineral processing, pharmaceutical and metalworking industries as well as with wafer and environmental stress screening chamber fabrication (Xu et al., 2013).The problem under study in this paper is the p-batch scheduling on parallel and identical batch-processing-machines (BPMs). Each machine has a fixed capacity C. A set of jobs with non-identical job sizes have to be grouped into batches, where the total size of all the jobs in a batch cannot exceed C. The jobs have non-identical processing times. The processing time of a batch is given by the longest processing time of all the jobs contained in the batch (Mathirajan & Sivakumar, 2006). The batches are scheduled on the machines so as to minimize the makespan; i.e., the time taken to finish all the batches. Once a batch is being processed, it cannot be interrupted and no job can be added into the batch. A small makespan implies a high utilization of the machines (Kashan, Karimi, & Jenabi, 2008). Improving the utilization of a bottleneck station is beneficial to elevate the throughput rate of the system.The problem can be solved by dealing with two independent subproblems; i.e., grouping the jobs into batches and scheduling the batches on the parallel BPMs. Since minimizing the makespan for a set of equal-processing-time jobs on a single BPM is equvalent to the one-dimensional bin-packing problem which is known to be strongly NP-hard (Garey & Johnson, 1979), we propose a meta-heuristic to group the jobs into batches. Then we apply the Multifit (MF) heuristic (Coffman, Garey, & Johnson, 1978) to schedule the batches on the machines.The rest of the paper is organized as follows. In Section 2, we review related work on BPM scheduling problems as well as the max–min ant system (MMAS) algorithm. Section 3 defines the problem under study. The proposed algorithm and its implementation is described in Section 4. With elaborative experimental designs, the effectiveness of our algorithm is compared with several previously studied heuristics in Section 5. Finally, we draw some concluding remarks in Section 6.

@&#CONCLUSIONS@&#
In this paper, we consider the batch scheduling on identical and parallel machines with non-identical job sizes to minimize the makespan. We present a novel ACO-based meta-heuristic algorithm, called ASM, to solve this problem. Based on the equivalence between minimizing the wasted space and minimizing the makespan, a candidate set strategy is introduced to decrease the search space and improve the search performance efficiency. A local optimization strategy based on recessive processing time is incorporated in the algorithm to further enhance the solution quality. Then the Multifit method is applied to schedule the batches on the machines. Experimental results show that the proposed algorithm is capable of finding higher quality solutions than all the other heuristics. Moreover, the running time is comparable to that of the HGH.Future work will focus on applying the proposed algorithm to the scheduling on parallel and identical batch machines with release dates, incompatible families, setup time or other constraints. Scheduling on parallel machines with different capacities is also an interesting problem. Other optimization objectives such as maximum lateness and mean weighted flow time are unexplored.