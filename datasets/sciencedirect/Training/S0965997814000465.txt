@&#MAIN-TITLE@&#
Bézier versus Lagrange polynomials-based finite element analysis of 2-D potential problems

@&#HIGHLIGHTS@&#
We show that the usual Lagrangian type finite elements are equivalent with Bézierian type ones.Both formulations are applied to the solution of elliptic, hyperbolic and parabolic problems.For both macro-elements we present in house MATLAB software.Extension to linear elastic analysis is straightforward.Extension to 3D problems is also straightforward.

@&#KEYPHRASES@&#
Bézier,Lagrange polynomial,Galerkin–Ritz,Macroelements,CAD/CAE integration,MATLAB®,

@&#ABSTRACT@&#
In this paper two types of tensor product finite macro-elements are contrasted, the former being the well known Lagrange type and the latter the Bézier (Bernstein) type elements. Although they have a different mathematical origin and seemingly are irrelevant, they both are based on complete polynomials thus sharing the same functional space, i.e. the classes{xn}and{yn}. Therefore, from the theoretical point of view it is anticipated that they should lead to numerically identical results in both static and dynamic analysis. For both types of elements details are provided concerning the main computer programming steps, while selective parts of a typical MATLAB® code are presented. Numerical application includes static (Laplace, Poisson), eigenvalue (acoustics) and transient (heat conduction) problems of rectangular, circular and elliptic shapes, which were treated as a single macroelement. In agreement to the theory, in all six examples the results obtained using Bézier and Lagrange polynomials were found to be identical and of exceptional accuracy.

@&#INTRODUCTION@&#
During the last 45years, the CAD technology has passed through five main stations, the last being the NURBS representation of surfaces and volumes [1,2]. The first three stations are determined by the names of their founders, which are Coons [3], Gordon [4], and Bézier [5], whereas the fourth is called B-splines [6,7]. For a detailed handbook the reader is referred to Farin et al. [8].The strong relationship between CAD and CAE was early understood in 1973 by Gordon and Hall [9] and can be also found as a comment in the classical textbook of Zienkiewicz in 1977 [10, pp. 181–182] (“… quite independently the exercises of devising various practical methods of generating curved surfaces for purposes of engineering design led to the establishment of similar definitions by Coons, and indeed today the subjects of surface definitions activity…”). In the decade of 1980s some researchers started dealing with the development of large finite elements based on Coons–Gordon interpolation; for a detailed review the reader is referred to [11–13] and papers therein. Also, the use of B-splines and the most recent NURBS in engineering analysis are reviewed in the textbooks of Höllig [14] and Cottrell et al. [15], respectively. In the particular case of isogeometric elements, useful software aspects have recently appeared [16,17].Despite the abovementioned progress, there are still some unclear points, from both the theoretical and the programming point of view. For example, it is well known that tensor product Lagrange type finite elements have been extensively used and can be found in all textbooks such as those by Zienkiewicz [10] and Bathe [18]. Nevertheless, it is not perhaps widely known that the aforementioned tensor product based on Lagrange polynomials is a special case in which the Gordon–Coons interpolation degenerates [12, pp. 327–328]. Except of the aforementioned relationship of CAD/CAE character, there is a second one as follows. It is well known that Bézier surfaces are based on tensor products of Bernstein polynomials of the formBi,n(x)=n!i!(n-i)!xi(1-x)n-i. Obviously, each basis function is a polynomial of n-degree. It differs from the Lagrange polynomial in the sense that the first does not possess the property of cardinalityBi,n(xj)≠δijand does not include the nodal values but nodeless coefficients.Recently it has been shown that in 1-D problems the Lagrange and Bézier polynomials, as well as the popular p-method [19] lead to the same eigenvalues [20,21], and it is only a matter of basis change [18].In this context, this paper continues the investigation in 2-D quadrilaterals in both static and time dependent problems. The study reduces to the Galerkin–Ritz formulation.Let us consider a mapping from the real domainΩ=(ABCD)to the standard reference squareΩst=(A′B′C′D′)=[0,1]×[0,1]inR2. The axis origin is chosen at the corner A (rsp.A′), whereas the normalized axesξandηlie on the sidesA′B′andA′D′, respectively. Without loss of generality, the sides (AB,CD) [and(A′B′,C′D′)] as well as (B′C′,D′A′)[and (BC,DA)] are uniformly divided intonξandnηsegments, respectively (Fig. 1).In case of Lagrange polynomials, the abovementioned segments lead to (nξ+1)nodal points alongA′B′orC′D′, as well as(nη+1)ones alongB′C′orD′A′. Therefore, the univariate functionu(ξ,0)along the sideA′B′can be interpolated through a Lagrange polynomial ofnξ-th degree inξ, whereas the functionu(0,η)along the sideD′A′through another Lagrange polynomial ofnη-th degree inη.Considering that the variable x represents either ofξandη, it is reminded that the form of the j-th Lagrange polynomial passing through the nodal pointsx0…xn, is as follows:(1)Lj,n(x)=(x-x0)…(x-xj-1)(x-xj+1)…(x-xn)(xj-x0)…(xj-xj-1)(xj-xj+1)…(xj-xn).From Eq. (1) it becomes evident that:(2)Lj,n(xi)=δij≡1,i=j,0,i≠j,and(3)∑j=0nLj,n(xi)=1.In case of Bézier polynomials there are no internal breakpoints but only the so-called control points, which are produced by the knot vector:(4)V=x0,…,x0︸p+1,xn,…,xn︸p+1={v0,v1,…,v2p+1},with p denoting the polynomial degree (p=nξorp=nη). It is well known that the2(p+1)elements in the vectorVgive(p+1)control points [2]. In other words, in case of Bézier (Bernstein polynomial) representation, the number of coefficients is identical with those involved in a Taylor series i.e. a full polynomial of degree p. The basis functions,Bi,n(x), are the classical Bernstein polynomials of the nth degree that are defined as(5)Bi,n(x)=nixi(1-x)n-i=n!i!(n-i)!xi(1-x)n-i.The Bernstein basis does not fulfil Eq. (2) while it possesses the partition the unity property:(6)∑j=0nBj,n(x)=1.For a straight side (e.g. AB in the real domainΩ)the control points belong to it while for a curved side they do not, except of the first(P0)and last(Pn)ones. In other words, the end segments of polygonP0P1…Pn-1Pn(called “generator”) are tangent to the curved side AB at end nodesP0andPn. Details can be found elsewhere [2,8].Moreover, it is widely known, for example [2], that the ith B-spline function of p-degree, denoted byNi,p(x), is defined as(7)Ni,0(x)=1,ifvi⩽x<vi+1,0,otherwise,(8)Ni,p(x)=x-vivi+p-viNi,p-1(x)+vi+p+1-xvi+p+1-vi+1Ni+1,p-1(x).For the particular case of the knot vector given by Eq. (4) wherep=n, considering the well known binomial expansion(x+a)n=∑k=0nnkxn-kak, it is easy to prove that the recursive formula described by Eq. (8) coincides with Eq. (5), that is:(9)Ni,p(x)≡Bi,n(x),p=n.In other words, the time-consuming and amenable to truncation errors exponential expression given by Eq. (5) can be effectively computed by Eq. (8). Similarly, the first derivative ofBi,n(x)can be effectively calculated by the recursion [2, p.59]:(10)Ni,p′(x)=pvi+p-viNi,p-1(x)-pvi+p+1-vi+1Ni+1,p-1(x).Based on the abovementionednξandnηsegments, the computational mesh consists ofq=(1+nξ)×(1+nη)nodal points. Each of these nodal points (designated by ‘I’) lies at the intersection of the linesξ=ξiandη=ηi, and is associated with one global shape function given by:(11)ϕI,Lagrange(ξ,η)=Li,n(ξ)·Lj,m(η),I=1,…,q≡(1+nξ)×(1+nη),i=1,…,(1+nξ);j=1,…,(1+nη),where the indexes in Lagrange polynomials aren≡nξandm≡nη.Defining the knot vector along each side of a quadrilateral ABCD, the basis functionsBi,n(ξ)andBj,m(η)(withn=nξandm=nη) are determined. Then, the aforementioned one-dimensional control points produceq=(1+nξ)×(1+nη)control points. Each of the aforementioned control points is associated with one global shape function given by:(12)ϕI,Bezier(ξ,η)=Bi,n(ξ)·Bj,m(η),I=1,…,q≡(1+nξ)×(1+nη),i=1,…,(1+nξ);j=1,…,(1+nη).Lagrangian type elements (as well as their generalized Gordon–Coons version) are based on the following series expansion(ϕj=ϕj,Lagrange):(13)x(ξ)=∑j=1qϕj(ξ)·xj(ξ),U(ξ)=∑j=1qϕj(ξ)·Uj(ξ),which characterizes all well-known conventional “isoparametric” elements.In contrast, tensor products of Bézier polynomials are based on the following series expansion(ϕj=ϕj,Bezier):(14)x(ξ)=∑j=1qϕj(ξ)·xj(ξ),U(ξ)=∑j=1qϕj(ξ)·aj(ξ),whereajare generalized coefficients and not the nodal values at the control points. Only at the very ends of the boundary the extreme control points (P0andPn) coincide with the corresponding ends of polygon curves (generator).Potential problems can be categorized into three types: elliptic (Poisson-Laplace), hyperbolic (wave propagation) and parabolic (thermal). Concerning the wave propagation, for the sake of briefness, results will be presented for only the corresponding eigenvalue problem.I.Poisson equation(15)∇2u=f(x,y)inΩ.Wave propagation equation(16)1c2∂2u∂t2-∇2u=0inΩ,where c is the wave velocity, andTransient heat conduction equation(17)∂u∂t-α∇2u=0inΩ,withα=k/ρcpdenoting the diffusivity, where k is the coefficient of conductivity,ρis the mass density andcpis the isobaric specific heat.In general, we seek an approximate solution to (15)–(17) which is a linear combination of the bivariate global shape or basis functions{ϕi(x,y)}, i=1, 2, …, q:(18)ũ(x,y;t)=∑j=1qαj(t)·ϕj(x,y).Based on the global shape functionsϕjin Eq. (18), which are utilized for the entire domain, the well-known Galerkin–Ritz method can be applied. In the general form of Eq. (18), the variablesαjfor the Poisson equation, and theαj(t)for the wave propagation or transient thermal ones, denote either the nodal valuesuj(cf. Eq. (13)) or the generalized coefficients (cf. Eq. (14)).Applying the Galerkin method to Eqs. (15)–(17), for the free vibration problem one obtains the well known matrix formulation [10,14]:(19)[K]{a}={f},(20)[M]{a¨(t)}+[K]{a(t)}={f(t)},where[M]and[K]are the mass and stiffness matrices, respectively, which are given by:(21)mij=1c2∫ΩϕiϕjdΩ,kij=∫Ω∇ϕi∇ϕjdΩand(22)fi=∮Γϕi∂u∂ndΓ,Γ=boundary ofΩare the elements of the force vector.Again, with respect to Eqs. (19) and (20), in case of Lagrange polynomials the vector{a}corresponds to the nodal values u, whereas in case of Bézier polynomials it refers to the nodeless coefficients a, the latter corresponding one-by-one to the control points.B-splines implementation in Eqs. (19) and (20) is not a novel task as it has been previously applied by the author [11–13] in the older (Schoenberg’s [6]) formulation, whereas its contemporary (deBoor [7]) general formulation has been presented in a textbook ([14] and papers therein). Therefore, Bézier interpolation, which is a particular case of B-splines(p=n), follows the same procedure.The boundary ABCD consists ofnb=2(nξ+nη)nodal points, whereas the interior of the structure ofnint=q-nb≡(nξ-1)×(nη-1)internal ones. As happens with the conventional finite elements, the q nodal points are associated to potential values u. According to the boundary conditions, the aforementionednb≡n1+n2boundary nodes are divided in two categories:(1)Dirichlet boundary conditions (at a boundary portionΓ1), are related ton1⩽nbnodal points. These conditions are easily implemented by eliminating (i.e. omitting) both then1rows and columns which correspond to then1restrained nodal valuesu1.Neumann boundary conditions (at a boundary portionΓ2), are related ton2⩽nbnodal points. The rows and columns which correspond to then2unrestrained nodal valuesu2, are preserved. Obviously, in the particular case in which the entire boundary is under Neumann boundary conditions (usually called free–free problem), no matrix elimination is performed (no rows or columns in the matrices are omitted).In general, theq≡(1+nξ)×(1+nη)control points are distributed as follows. There arenc,b=2(nξ+nη)control points related to the boundary ABCD; rarely they lie of the contour ABCD (only when an entire side such as AB is a straight line segment), whereas in curvilinear sides they are found in either the exterior or the interior of the domainΩ, in accordance to the boundary curvature. Moreover, the restnint=q-nc,b≡(nξ-1)×(nη-1)control points, which are called “inner” control points, may be within or may fall out of the domainΩ. As previously, this paper deals with two types of boundary conditions:1)Dirichlet boundary conditions (at a boundary portion,Γ1)are related ton1⩽nc,bcontrol points. These are easily implemented eliminating both then1rows and columns which correspond to then1restrained coefficientsa1. It is noted that if an entire side such as AB is characterized by a pure Dirichlet condition such asu=0, it immediately implies that all relevant coefficients vanish(a=0); otherwise, if the prescribed variable along the aforementioned AB is a variable functionuAB=u¯(x,y), the second of Eq. (14) has to be collocated at all control points along AB (or an equal number of arbitrary points along it) and then the resulting linear system be solved to determine the corresponding coefficientsaAB’s.Neumann boundary conditions (at a boundary portion,Γ2)are related ton2⩽nc,bcontrol points. The aforementioned control points, which are near (but not always along) the boundaryΓ2, is treated equally with thenc,inunrestrained internal ones. In more details, the corresponding rows and columns are preserved. Obviously, in the particular case of a free–free problem (the entire boundary under Neumann boundary conditions:∂u/∂n→=0, wheren→is the outward normal unit vector), no matrix elimination is performed (none of rows or columns is omitted).A MATLAB® code was developed on a usual PC Pentium IV. Nevertheless, in order to attract those readers skilled in FORTRAN, the FORTRAN programming style as much as possible has been basically followed. Briefly, the basis functionsNi,pand their derivatives were created using the “spcol” function, which exists in the Spline Toolkit.The general steps followed are as follows:Step 1: The boundary nodal points are arranged along the real contour. The basic data concerning the discretization are the variablesnξ(nelex)andnξ(neley). The number of boundary nodes isnbou=2(nelex+neley), while the total number of nodes isnel=(nelex+1)(neley+1).Step 2: Based on the boundary nodes of Step 1, the internal nodes are generated. This step can be done using, for example, Coons interpolation or another mapping technique. The coordinates of all nodal points are stored in the matrix ‘xl’ of dimensions2×ntot; the first row corresponds to the abscissas(x), whereas the second to the ordinates(y).Step 3: Calculate and store the values of Lagrange polynomials and their first (local) derivatives inξandηat the Gauss points. If the nodal pointsx0,…,xnare stored in the vector X (of sizeN=n+1), at every intermediate position Xvalue the Lagrange polynomialLi,n(x)associated to the i-th node and its first derivativeLi,n′(x), can be derived calling the following function used in this study:Step 4: Computation of matrices.First, estimate the quadrature scheme:Second, at each Gauss point, first the Jacobian (xsj) is calculated and then the global derivatives (shp) based on the coordinates of the nodal points produced in Steps 1 and 2.Step 5: Row elimination. In elliptic and parabolic problems: formation of right-hand-side (RHS)Step 6A: Solution of equations systemAlternatively:Step 6B: Eigenvalues extraction.Step 6C: Transient heat conduction. In general, it is possible to apply the trapezoidal rule and derive the general matrix formulation that includes all four, i.e. (i) the forward difference, (ii) Crank–Nicolson, (iii) Galerkin, and (iv) backward difference schemes. For details the reader is referred to [12]. However, since the transient phenomenon is described by a first order differential equation (thus no doubling in the number of equations is required) the MATLAB® ode45 function could be alternatively applied (but in this paper it was not done).Step 1A: Boundary discretization using nodal points.Step 1B: Determination of control points near to the boundary by inversion.Step 2: Based on the control points of Step 1B, generate the internal control points. This can be done using, for example, Coons interpolation or another mapping.Step 3: Calculate and store the univariate B-splines and their first (local) derivatives inξandηat the Gauss points. The function used is as follows:Step 4: Computation of matrices.The elementmijof the mass matrix is an integral of product of two univariate basis functions, one ofpξ-th and the other ofpη-th degree. This can be easily implemented as follows:At each Gauss point, the Jacobian is calculated and then the global derivatives based on the nodal coordinates of Steps 1 and 2. This step is similar with Step 4 for Lagrange polynomials; the only difference is thatBasis1xandDbasis1x(similarlyBasis1yandDbasis1y) are those found in Step 3.Step 5: Row elimination and formation of right-hand-side (RHS). A Dirichlet problem for the entire boundary leads to mass and stiffness matrices of ordernint=4nxny(internal control points only), whereas a Neumann problem leads to matrices of orderneq=4(nx+1)×(ny+1).Step 6A: Solve the equations system and determine the coefficients{a}.Alternatively:Step 6B: Eigenvalues extraction.Step 7: In elliptic and parabolic problems: Based on the coefficients of Step 6A, calculate the potential values at the nodal points.The theory is now elucidated by six examples taken from literature, in which the exact analytical solution is known. The quality of the numerical solution is evaluated in terms of either (i) the relative error at a specific node, which was calculated as follows:(23)er=(ũ-uexact)uexact×100%,or (ii) a relative error in theL2norm,Lu, for the entire domain, which is given by:(24)Lu=∫Ω(ũ-uexact)2dΩ∫Ω(uexact)2dΩ×100%,Example 1Rectangular domainIt refers to a fully two-dimensional problem with a “steep” temperature distribution, concerning a rectangular plate of dimensionsL×b=6×12, with-L/2⩽x⩽L/2,0⩽y⩽b. Dirichlet boundary conditions hold for the entire boundary as follows:T=Tmcos(πx/6)withTm=100at top(y=b), whereasT=0elsewhere. Because of the symmetry around the y-axis, only the right part is here discretized(0⩽x⩽L/2,0⩽y⩽b)and Neumann condition(∂T/∂x=0)is considered along the vertical sidex=0. The mesh is uniform (nx,nysubdivisions) and, as shown in Table 1, for both formulations the numerical solution perfectly converges to the exact one, which is given by the formula(25)T(x,y)=Tm·[sinh(πy/L)/sinh(πb/L)].The second problem refers to the potential problem (Eq. (15)) again with a “steep” temperature distribution, but it now concerns a curvilinear domain, which is the cross section of a thick cylinder (of infinite length) of internal and external radiiRi=1andRe=32, respectively. Due to the radial symmetric nature of the problem, only an annular circular sector of 45 degrees of the cross section is discretized (see also [12]). The exact solution is dependent on the radius r only as follows:(26)T(r)=Ti+[(Te-Ti)/ln(Re/Ri)]·ln(r/Ri)whereTi=1000,Te=0are the temperatures of the internal and external surface of the cylinder. Table 2shows the results for both Lagrange polynomial and Bézier formulation. It is noted that, fornx⩾20subdivisions the code diverges in both formulations.The third problem has two characteristic features: (i) it is fully two-dimensional and (ii) it refers to a curvilinear domain. It concerns the motion of a uniform incompressible viscous fluid in steady-state unidirectional flow (in the z direction) for an elliptic pipe of semiaxesa=2andb=1, which degenerates to the problem∇2u=-2inΩ, with boundary conditionsu=0onΓ. It is noted that the same partial differential equation appears in the case of pure torsion in an elliptic cross-section, where u denotes the Airy’s function. The exact solution isu(x,y)=0.8(1-x2/4-y2). In order to preserve the uniform character of the mesh used in the previous examples, a special algorithm was developed to divide the boundary in segments of equal length. Therefore, it is obvious that the polynomials used in two successive sides (e.g. AB and BC) are of identical degree, i.e.nx=ny. The convergence for increasing polynomial degree is shown in Table 3, whereas the mesh (fornx=ny=10) is shown in Fig. 2a.Let us consider a rectangular acoustical cavity of dimensions(a=2.5m,b=1.1m)with sound velocityc=1m/s. Two types of boundary conditions are considered: (a) Neumann (free-free) and (b) Dirichlet boundary conditions, for which the exact analytical eigenvalues are given by:(27)Free-free:ωmn2=π2c2m2a2+n2b2,m,n=0,1,2,…,(28)Dirichlet:ωmn2=π2c2m2a2+n2b2,m,n=1,2,…,In all cases a uniform mesh of(nx×ny)subdivisions of breakpoints along x- and y-directions, respectively, has been used. For both Neumann and Dirichlet boundary conditions, the obtained results are shown in Table 4. It is noted that in both formulations the solutions are identical.A circular cavity of radius(a=1)under Neumann (free-free) or Dirichlet conditions is considered. For the purposes of this study, a unit reference sound velocity,c=1m/s, is considered. The theoretical eigenvalues are given by the formula:(29)Free-free(Neumann):Jm′(ka)=0,m=0,1,2,…,(30)Dirichlet:Jm(ka)=0,m=0,1,2,…,whereJm′(ka)is the first derivative of the Bessel functionJm(ka)of the first kind and order m andk=ω/cthe wavenumber. This problem has been previously solved for free-free boundary conditions [22].Now the discretization consists of 16, 24, 32 and 40 uniform segments for the Neumann, as well as 20, 28, 36 and 44 uniform segments for the Dirichlet problem. Table 5shows excellent results for both types of boundary conditions, whereas the mesh (fornx=ny=8) is shown in Fig. 2b.This is a fully two-dimensional example that deals with a parabolic problem, previously solved by Bruch and Zyvoloski [23]. It refers to a rectangular plate subject to the following boundary and initial conditionsu(0,y,t)=u(x,0,t)=u(Lx,y,t)=u(x,Ly,t)=0andu(x,y,0)=30,whereLxandLyare the lengths of the solution domain in the x and y directions, respectively. The analytical solution of this problem is(31)u(x,y,t)=∑n=1∞∑j=1∞AnjsinnπxLxsinjπyLyexp-kn2π2Lx2+j2π2Ly2t,whereAnj=4(30)njπ2[(-1)n-1][(-1)j-1].This problem is solved in the entire domain0⩽x⩽Lx=3.0m,0⩽y⩽Ly=3.0m, with coefficient of conductivityk=1.25Btu/ (h moF), mesh discretization per directionΔx=Δy=0.3m(nξ=nη=10subdivisions per side), and final timet=1.2h. Three different time stepsΔt=0.1h,Δt=0.05handΔt=0.01hare used. Following [12], the Crank-Nicolson method is applied. Table 6summarizes the errors of the calculated maximum temperature at the centre of the domain, which was found to coincide with the overallL2error norm,Lu(Eq. (24)), up to the third decimal point, att=1.2h.

@&#CONCLUSIONS@&#
It was found that Lagrangian and Bézierian type finite elements are equivalent one another. In the standard unit square they share the same functional space of monomials, i.e. the classes{ξn}and{ηn}. Despite the fact that Lagrangian elements are based on nodal points (distributed along the boundary and the interior) whereas Bézierian elements are based on control points that are quite different and generally do not coincide with the aforementioned nodal points (neither for the boundary nor for the interior), the obtained numerical results were found to be identical. The theory was successfully tested on six examples as follows. Three examples governed by Laplace and Poisson equation, two examples for the eigenvalue extraction concerning rectangular and circular acoustic cavities, as well as one example for a transient heat conduction problem. It is anticipated that the extension from acoustics to elastodynamics and other types of partial differential operators as well as to three-dimensional problems using either Galerkin/Ritz or collocation procedures will lead to the same conclusion.