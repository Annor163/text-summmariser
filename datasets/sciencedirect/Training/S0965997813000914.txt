@&#MAIN-TITLE@&#
A computer algebra system for analysis and control of nonlinear time-delay systems

@&#HIGHLIGHTS@&#
SAC is a toolbox developed for analysis and control of nonlinear time-delay systems.This GNU/GPL software can be used to work with systems without delays.It includes routines, based on the differential-algebraic and geometric approaches.These powerful approaches involve lengthy and cumbersome computations.An algorithm of a new powerful geometric tool, the extended Lie bracket, is included.

@&#KEYPHRASES@&#
Nonlinear time-delay systems,Differential-algebraic approach,Extended lie bracket,Computer-aided control systems design,Symbolic Analysis and Control software,Algorithms,

@&#ABSTRACT@&#
An open-source computer algebra system toolbox devoted to the analysis and synthesis for a wide class of nonlinear time-delay systems is introduced. This contribution provides a practical way to carry out all the computations used to characterize several properties of the systems under consideration, which involve elements in a non-commutative ring of polynomials, and an extended version of the Lie brackets. The package usage will be illustrated with some examples.

@&#INTRODUCTION@&#
There are several reasons which motivate the continuous interest and development in the time-delay systems field research. Time delays naturally appear in many physical systems (see e.g. [1]). However, standard control techniques generally cannot be applied because they generally lead to non-causal solutions [2–4]. This lack of mathematical tools is even greater in the nonlinear case, where the Lie derivative and Lie brackets, which are basic operations for the so-called geometric approach are not valid for this class of systems due to its infinite-dimensional nature. An algebraic approach, valid for nonlinear time-delay systems (NLTDS), developed in [5,6] has proved to be effective in tackling several problems of analysis [6–11], and synthesis [12,13]. The geometric tools have also been generalized with the introduction of an extended Lie bracket in [14]. However, the computations associated to both, the geometric and algebraic approaches, are difficult to use in practice, especially as the order of the system and the quantity of associated variables increase.Nowadays there are few symbolic packages specialized in nonlinear systems. Amongst them, NOLIACPA, based on Maple®, was developed for continuous-time systems [15]. NLControl is a software project addressing continuous and discrete nonlinear control systems based on Mathematica®, and made available online via the webMathematica software. It was reported in [16,17]. For delay-differential algebraic equations OreModules [18], a Maple® implementation, deals with modules over Ore algebras computationally. An toolbox [19], and a numerical bifurcation analysis package [20], were developed in Matlab®. CoCoA [21], and Macaulay [22], are software systems that have been used to deal with linear time-delay systems.Despite all these contributions, a general-purpose software toolbox for time-delay systems was still missing in the literature.SAC is a library written in Maxima, an open-source Computer Algebra System (CAS), devoted to the analysis and control of a wide class of nonlinear time-delay systems described by(1)Σ:ẋ(t)=f(x(t-i),u(t-i),i∈S_)y(t)=h(x(t-i),i∈S_)The statex(t)∈Rn, the control inputu(t)∈Rm, and the outputy(t)∈Rp. The entries of f(⋅) and h(⋅) are meromorphic functions of their arguments. S_ is a finite set of constant time delays, such that(2)f(x(t-i),i∈S_):=f(x(t),x(t-1),…,x(t-s));S_:={0,1,…,s}andh(·)defined in a similar vein.The effectiveness showed by the so-called algebraic approach in tackling analysis issues like accessibility [23], observability [6,7], triangular equivalence [8], identifiability [9] and to solve control problems like input–output feedback linearization [24], disturbance decoupling [25] and trajectory tracking [12]. Also the recent introduction of the extended Lie brackets in [14] and, through its application, the advances to answer some basic problems related to integrability [14], feedback linear equivalence [26], observability [27] and new results on accessibility [28], are other motivation for studying this particular class of systems.However, a drawback of both approaches is the difficulty of the involved computations to be carried out by hand, due to the use of a very particular non-commutative ring of polynomials, and to the distributions, in the case of the algebraic and geometric approach, respectively, hence the necessity of a software development [29].The main contribution of this paper is the presentation of SAC, a free open-source and general-purpose toolbox, which implements most of the basic computations involved in the delay-differential algebraic approach [30], the geometric tools developed recently in [14], and the combination of both approaches to determine important structural properties of nonlinear systems with or without delays. SAC is freely available at [31].The paper structure is as follows. First, some definitions and notations of the differential-algebraic approach are recalled in Section 2. The software development process is detailed in Section 3, followed by some examples that give an overview of the current toolbox capabilities in Section 4. Section 5 discusses some techniques to improve the performance, and it ends with a discussion in Section 6.LetKdenote the field of meromorphic functions of a finite number of symbols in{x(t-i),u(t-i),…,u(k)(t-i),i∈S_,k∈N}Define d as the standard differential operator that maps elements fromKtoE. That is,d:K→E=span{dξ,ξ∈K}, which is the vector space spanned by the symbols{dx(t-i),du(t-i),…,du(k)(t-i),i∈S_,k∈N}overKNow, define the shift operatorδ:ε→εas:δa(t)df(t)=a(t-1)δdf(t)=a(t-1)df(t-1),a(·),f(·)∈KFor notation simplicity, we will writeδidxinstead ofdx(t-i).LetK(δ)be the (left) ring of polynomials inδwith coefficients onK.DefineMas an increasing sequence of leftK(δ)-modules byM=span{dξ,ξ∈K}.The concept of closure of a submodule, introduced in [29], is generalized to submodules overK(δ]in [30], where it is shown that any decreasing sequence of closed submodules of a finitely generated module overK(δ]stabilizes. This is a very important property with various applications.EveryK(δ]element may be written asα(δ]=α0+α1δ+⋯+αrαδrα,αi∈Kwhererαis the polynomial degree ofα(δ].The addition is defined as usual.α(δ]+β(δ]=∑i=0max{rα,rβ}(αi+βi)δiHowever, the multiplication is non-commutative:α(δ]β(δ]=∑i=0rα∑j=0rβαiδKi(βj)δi+jWhenever possible, system (1) is represented in affine form(3)Σ:ẋ(t)=f(x(t-i),i∈S_)+∑j=0Sgj(x(t-i),i∈S_)u(t-j)y(t)=h(x(t-i),i∈S_)and under differential form:(4)Σ:dẋ=f̃(δ]dx+g(δ]dudy=h̃(δ]dxThe operations that have been implemented in the proposed toolbox will now be recalled. For anya(δ],b(δ]∈K(δ],b(δ]≠0,there exist:•Non-zero polynomialsc(δ],d(δ]∈K(δ]s.t.a(δ]=c(δ]b(δ]+r(δ]withdeg.r(δ]<deg.b(δ](Left Euclidian division).Non-zero polynomialsα(δ],β(δ]s.t.α(δ]a(δ]+β(δ]b(δ]=0(Left Ore condition).Non-zero polynomialsα(δ],β(δ]s.t.α(δ]a(δ]+β(δ]b(δ]=1, ifa(δ],b(δ]are relatively primes (Left Bezout coefficients).Non-zero polynomialsα(δ],β(δ]s.t.α(δ]a(δ]+β(δ]b(δ]=f(δ],wheref(δ]∈K(δ]is the greatest common divisor (gcd) ifa(δ],b(δ]are not relatively primes.An invertible matrixT(δ]s.t.T(δ]a(δ]b(δ]=gcd(a(δ],b(δ])0.For any matrixA(δ]∈Kmxn(δ], there exist:•At least one unimodular matrixP(δ]s.t.P(δ]A(δ]=A¯(δ]0, withA¯(δ]full row-rank.If∃ν≠0|ν·M=0,thenP(δ]A(δ]Q(δ]=I0(Particular case of the Smith form).The routine which computes the formal rank ofA(δ].Regarding differential one-forms, we defined:•The differential operatord:K→E.The wedge product∧:E×E→E(2).The relative degreer(ω)ofω∈X, withX=spanK(δ]{dx}, defined byFor the set of submodules ofMthere exist:•The filtration of a decreasing sequence of submodulesM⊃H0⊃H1⊃…⊃Hk⊃…⊃H∞defined byH0:=spanK(δ]{dx,du},Hj:=spanK(δ]{ω∈Hj-1|ω̇∈Hj-1}, to study the accessibility of the system. This sequenceHjwas shown to stabilize toH∞[23].The subspaceX∩Y:=spanK(δ]{dx}∩spanK(δ]{dy,dẏ,…}which is isomorphic to the smallest observable space and useful in solving the disturbance decoupling problem.The filtration of a decreasing sequence of submodulesLetΔ=spanK(δ]{r1(δ],…,rj(δ]}be the right module spanned overK(δ]byr1(δ],…,rj(δ]∈Kn(δ]. For two elements ofΔr1(δ]=∑j=0sr1j(x(t-i),u(t-i),i∈S_)δj, andr2(δ]=∑j=0sr2j(x(t-i),u(t-i),i∈S_)δj, there exist:•The extended Lie bracket defined in [14] asThese basic routines can then be combined to form more elaborated programs.This section states some aspects of the key stages in the software development.An important task in creating a software is extracting the general requirements and to clarify the scope of the development. SAC requirements are grouped in the following categories.The input information for software performance are the mathematical equations, which represent the behavior of each control system. There are three forms in which the state equations can be defined within SAC: affine (3), general (1) and differential form (4). In all of them the state, input, and output variables must be defined.The software Maxima was chosen to develop SAC because it complies with the following characteristics:•It is a Computer Algebra System (CAS) program, so it can manipulate mathematical expressions in symbolic form.Open source software license (GNU General Public License). SAC is for non-profit uses. It is our interest to improve the software and a GNU GPL can motivate the collaboration of the user’s community. More important, this allows any person to use it without requiring a license of any particular commercial software.Multi-platform. This allows the use of the software in the major operating systems (Windows, MacOS, and Linux).Modular structure. The functionality of a program must be separated into independent, interchangeable modules, such that each contains everything necessary to execute only one aspect of the desired functionality.Good memory management, to hold a large number of mathematical expressions.Compatibility. It refers to the need of a CAS language to be compatible with previous and future versions of itself.Easy to handle. The software operation must be similar to other specialized packages in the control area.The services that the system must provide are:•Basic input/output operations: save and load the state equations of a control system.The system must be capable to handle several systems in the same session. This characteristic is required to solve some control problems, for example the observer synthesis can be seen like the union of two independent systems.The considered main control issues in this software version include:–accessibility,observability,equivalence with the triangular form,linearization by additive output injections,linear equivalence by means of a change of coordinates.The previous requirements were used to define the subset of characteristics that most expected SAC users would have in common.Typical SAC end-user studies or works with nonlinear control systems with or without delay. The minimal technical expertise required to a SAC end-user are:•Knowledge on nonlinear control theory of systems, with or without delays.Basic computation skills.Knowledge of the syntax of the software Maxima.There exist several CAS, the most popular are Mathematica, Maple, muPAD, REDUCE, YACAS and Maxima. However, based on the software requirements, the CAS Maxima has been selected to develop SAC mainly because it is a mature open-source software. This characteristic allows more people to install a local copy to work with. We also took into account:•It is multi-platform, available for Linux, Windows, and MacOS.It is written in common Lisp language and includes a complete programming language with algorithmic language-like syntax but Lisp-like semantics. It allows to write routines in Lisp, which can be called from Maxima.It is an active project, with constant updates.There are different GUI’s available for Maxima. Some of them are xmaxima, wxmaxima and Texmacs. They have different characteristics. It is important to clarify that Texmacs is an independent software, which can be used as a graphic user interface for different programs, including Maxima.One drawback of this choice is that neither Lisp nor the Maxima native language are very popular amongst the control community. However, the basic required skills can be quickly learned. Users can visit the documentation center [32], where detailed information, manuals, and tutorials of Maxima and Xmaxima, are available in several languages.SAC has a modular architecture, it has been developed combining the bottom-up design, and the modular software approach. The system is composed of independent modules which serve for specific purposes, and communicate to each other. Fig. 1shows the different components of SAC in a pyramidal form. The modules which appear in the basis of the pyramid are the basic components of SAC. They do not have dependence of other SAC routines, that is, they are written just with Maxima or Lisp commands. The components which appear on the second level depend of one or more modules of the basis and the connections are increased level by level in the pyramid. For example, the isaccessible module, at the top of the pyramid, depends on the hk module in the fifth level, and hk depends of routines in the fourth one.This allows using Maxima as a highly-specialized scientific calculator, and as a programming language. For example, starting from very simple commands, like the delay operator and the non-commutative product, we implemented the left Euclidian division. Then, this algorithm is used to compute the Ore polynomials, which is part of the routine to obtain the Smith form of a matrix. Any given procedure can be called at any point because it is a language command itself.Some benefits of this structure are:•The code is fragmented in small routines, and each of them performs a very specific task. This allows using them as building blocks to create more complex routines.An easier way to keep track of the program flow.A software that is easy to maintain, and easy to improve.The following step is to program the code for the project. This process will be described in the following subsection.

@&#CONCLUSIONS@&#
