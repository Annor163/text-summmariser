@&#MAIN-TITLE@&#
A multi-server queueing model with server consultations

@&#HIGHLIGHTS@&#
Introduction of server consultations in a queueing system.Queues with interruptions but not a special case of any in the literature.Arose out of a personal experience of this author.Use of a versatile arrival process for the arrivals of customers.Bring out qualitative nature of the model under study.

@&#KEYPHRASES@&#
Markovian arrival process,Preemptive priority,Interruptions,Consultations,Algorithmic probability,

@&#ABSTRACT@&#
We consider a multi-server queueing model in which the arrivals occur according to a Markovian arrival process. One of the servers, henceforth referred to as the main server, offers consultation to fellow servers (referred to as regular servers) apart from serving the customers. A regular server may request a consultation only when serving a customer and is offered consultation on a first-come-first-served basis by the main server. The main server gives a preemptive priority to regular servers (for consulting) over customers. Thus, the main server can undergo interruptions during his/her servicing the customers. Under the assumptions of exponential services and consultations, the model is analyzed in steady-state using the well-known matrix-analytic methods. Illustrative numerical examples to bring out the qualitative nature of the model under study are presented.The stochastic model considered in this paper was motivated by a personal experience of this author. Recently, I visited a local branch office of the Secretary of State of Michigan for some paperwork. I was one of fifteen or so customers to enter into the office (after waiting for it to open) at 9am. After waiting for a few minutes, I was attended by a personnel. During the time I was in “service”, the personnel was interrupted by her fellow colleagues for items like (a) clarification on some paperwork, (b) needing a change (for a twenty/fifty/hundred dollar bill), and (c) computer related questions. Only this personnel was interrupted and hence my service. None of the customers attended by other personnel were interrupted in the sense that their service requirements were the ones that made their respective servers to consult my server. One can think of this consulting activity as part of the services. After about four such interruptions my service was completed. Queues with interruptions have been studied extensively in the literature and we refer the reader to the recently published review article on this topic (Krishnamoorthy, Pramod, & Chakravarthy, 2012). The interruption process modeled in the literature can be broadly grouped into three categories: (a) here an independent process (mostly Poisson process) generates the interruptions and affects the busy servers and or the system; (b) here two or more priority customers arrive to the system and the services are of preemptive priority nature leading to service interruptions; and (c) in this case an independent process (again mostly Poisson process) generates the interruptions that affect the customer who is in the service facility (consisting of a single server) (Jacob, Chakravarthy, & Krishnamoorthy, 2012). Thus, the interruptions occur independent of the number of busy servers/customers in service. Thus, to our knowledge, the interruptions generated by the servers have not been addressed in the literature. Further, to this author’s knowledge this model cannot be made as a special case of any of the published models with interruptions. The model studied here can be applied in many other areas in real-life applications similar to the one outlined here. For example, in call centers it is common to see a supervisor or manager being approached by call center attendants to seek help in matters such as billing adjustments, and addressing grievances. Supervisors may also choose to take the customers’ calls. In fast food restaurants, banks, and grocery stores, the manager may be approached by the tellers for assistance.In this paper, we assume that the customers arrive according to a Markovian arrival process (MAP) with parameter matrices D0 and D1 of order m. The MAP is a rich class of point processes that includes many well-known processes such as Poisson, phase type (PH) renewal processes, and Markov-modulated Poisson process. The matrix D0 governs the transitions corresponding to no arrival and D1 governs those corresponding to an arrival. By assuming D0 to be a nonsingular matrix, the interarrival times will be finite with probability one and the arrival process does not terminate. Hence, we see that D0 is a stable matrix. The generator Q∗ is then given by Q∗=D0+D1. It can be shown that MAP is equivalent to Neuts’ versatile Markovian point process. One of the most significant features of the MAP is the underlying Markovian structure and fits ideally in the context of matrix-analytic solutions to stochastic models. Matrix-analytic methods were first introduced and studied by Neuts (1981). The point process described by the MAP is a special class of semi-Markov processes with kernel given by∫0xeD0tdtD1=[I-eD0x](-D0)-1D1,x⩾0.For more details on MAP processes and their usefulness in stochastic modelling, we refer to (Lucantoni, 1991; Neuts, 1989; Neuts, 1992), and for a review and recent work on MAP we refer the reader to (Artalejo, Gomez-Corral, & He, 2010; Chakravarthy, 2001, 2010).The system has c servers offering services to the customers. Of these c servers there is one server, henceforth referred to as the main server, who offers consulting work to fellow servers, henceforth referred to as regular servers, in addition to providing services to the customers. An arriving customer finding at least one idle server will get into service immediately; otherwise joins the queue of infinite capacity. We assume that, whenever the main server is idle along with at least one regular server, the arriving customer will always be served by the main server. It is easy to modify this assumption to include various other options. Note that this modification will affect only the boundary states of the Markov chain describing the system under study.The service times of the customers attended by any of the regular servers are exponentially distributed with parameter μ1 and those of the main server are exponential with parameter μ2. Whenever a service is initiated by a regular server, a clock of exponential duration with parameter θ is started. Whenever this clock, which is independent of the service time, expires before the service is completed, a consultation is needed for the server. Otherwise, the service will be completed without any consultation and the clock will have no bearing and will be restarted at the epoch of the next service. Note that if there are i, 1⩽i⩽c−1, regular servers busy, then the rate at which a consulting work will be required is iθ. The server requiring consulting work will be attended by the main server as follows. If, at the time of such a request, the main server is idle or busy serving a customer the consulting request will be attended immediately. In the latter case, the main server (and hence that customer’s service) is said to be interrupted. However, if the main server is busy offering consulting work to other regular server(s), the server needing the consulting work will be queued up. Thus, a regular server may request a consultation only when serving a customer and is offered consultation on a first-come-first-served basis by the main server. Note that at any given time there can be a maximum of c−1 servers needing consulting work. The interrupted customer’s service will be resumed by the main server only after all consulting work is finished. We assume that the main server’s consulting time of a regular server is exponentially distributed with parameter ξ.In this paper, the services of the customers whose servers need consulting work during their services are not considered as interrupted ones. We assume that such consultations are part of their services. Thus, only the main server’s customers face possible service interruptions before leaving the system.The inter-arrival times of the customers, the service times of the customers, consulting clocks and the consulting times are all assumed to be independent of each other.For use in sequel, lete(r),ej(r) and Irdenote, respectively, the (column) vector of dimension r consisting of 1’s, column vector of dimension r with 1 in the jth position and 0 elsewhere, and an identity matrix of dimension r. When there is no need to emphasize the dimension of these vectors we will suppress the suffix. Thus,ewill denote a column vector of 1’s of appropriate dimension. The notation “′” will stand for the transpose of a matrix and the symbol ⊗ denotes the Kronecker product of matrices. Thus, if A is a matrix of order m×n and if B is a matrix of order p×q, then A⊗B will denote a matrix of order mp×nq whose (i,j)th block matrix is given by aijB. For more details on Kronecker products, we refer the reader to Marcus and Minc (1964). Finally, Δ(a) denotes the diagonal matrix whose diagonal elements are given by the components of the vectora.Letζdenote the stationary probability vector of the Markov processes with generator Q∗. That is,ζis the unique (positive) probability vectors satisfying(1)ζQ∗=0,ζe=1.Thus, in this paper we consider a multi-server queueing model in which the main server not only offers services to the customers but also provides consulting work to regular servers. The service times, the request (for consulting) times, and the consulting times are exponentially distributed. The rest of the paper is organized as follows. In Section 2 the steady-state analysis of the system is presented and some illustrative numerical results are given in Section 3. Concluding remarks including some future work are given in Section 4.In this section we will analyze the model in steady state. Let N1(t), N2(t), J1(t), and J2(t) denote, respectively, the number of customers in the system, the number of servers in consulting mode, the status of the main server (idle – when not serving or consulting; busy consulting with no interruption; busy consulting with interruption; busy serving a customer), and the phase of the MAP arrival process at time t. Even though there are four possible states for the status of the main server we can limit the number of combinations by properly grouping the states as shown below. The process {(N1(t),N2(t),J1(t),J2(t)): t⩾0} is a continuous-time Markov chain with state space given byΩ=(*,k):1⩽k⩽m⋃(i,j,0,k):1⩽i⩽c-1,0⩽j⩽i,1⩽k⩽m⋃{(i,j,1,k):2⩽i⩽c-1,1⩽j⩽i-1,1⩽k⩽m}⋃(i,k):1⩽i⩽c-1,1⩽k⩽m⋃(i,j,0,k):i⩾c,0⩽j⩽c-1,1⩽k⩽m⋃(i,j,1,k):i⩾c,1⩽j⩽c-1,1⩽k⩽m.A brief description of the state space along with defining the levels of the states are given below to better understand the generator of the Markov process.•The set, *, of states {(∗,k): 1⩽k⩽m} denotes that the system is in idle state and the phase of the MAP is in k.The leveli∗, 1⩽i∗⩽c−1, consisting of the states {(i,k): 1⩽k⩽m} corresponds to the case where the main server along with i−1 regular servers are busy serving customers, and the phase of the MAP is in k.The levelĩ̲,1⩽ĩ⩽c-1, consisting of the states {(i,j,0,k): 1⩽i⩽c−1,0⩽j⩽i,1⩽k⩽m} corresponds to the case where there are i customers in the system with j servers in consulting mode (the other i−j servers are busy serving) and the phase of the MAP is in k. Note that the main server can either be idle (when j=0) or offering consulting work (when j>0).The leveli̲ˆ,2⩽iˆ⩽c-1, consisting of the states {(i,j,1,k): 2⩽i⩽c−1,1⩽j⩽i−1,1⩽k⩽m} corresponds to the case in which there are i customers in the system with j servers in consulting mode (and i−1−j servers busy serving customers and the main server has been interrupted), and the phase of the MAP is in k.The set of the states {(i,j,0,k): i⩾c,0⩽j⩽c−1,1⩽k⩽m} corresponds to the case where the system has i customers with the main server either busy serving the customers along with other c−1 servers or the main server is busy giving consulting to one of j regular servers while c−1−j regular servers are busy serving the customers, and the phase of the MAP is in k. Note that in this set of states, there is no interrupted customer waiting. This is possible due to the fact that an idle main server can initiate a consulting work with less than c customers present at that time and during the consulting work additional customers arrive to increase this number to be greater than or equal to c.The set of the states {(i,j,1,k): i⩾c,1⩽j⩽c−1,1⩽k⩽m} corresponds to the case where the system has i customers with the main server busy offering consulting work to one of the j waiting servers while c−1−j servers are busy serving the customers, and the phase of the MAP is in k. Note that in this set of states, there is an interrupted customer waiting.By leveli, i⩾c, we denote the set of the states {(i,j,0,k): 0⩽j⩽c−1,1⩽k⩽m}⋃{(i,j,1,k): 1⩽j⩽c−1,1⩽k⩽m}.The infinitesimal generator of the Markov chain governing the system is given by(2)Q=B1B0B2A1A0A2A1A0A2A1A0⋱⋱⋱,where the coefficient matrices appearing in (2) are given by(3)B1=D0e1′(c-1)⊗D100μ2e1(c-1)⊗IB1(1)H∼H^μ1e1(0.5(c2+c-2))⊗IF∼B2(1)00F^0B3(1),(4)B0=00B1(0)0B2(0)00B3(0),B2=0B1(2)B2(2)0000B3(2),(5)A0=I⊗D1,A1=A11A12A21A22,A2=Δ(μ2+(c-1)μ1,d)⊗I00Δ(d)⊗I,with(6)H∼=(H∼1,…,H∼c-2,0),H^=(H^1,…,H^c-2)(7)F∼=F∼1⋮F∼c-20,F^=F^1⋮F^c-2,(8)B1(1)=I⊗(D0-μ2I)-(μ1+θ)(Δ(0,1,…,c-2)⊗I)+0D1μ1I0D12μ1I0D1⋱⋱(c-3)μ1I0D1(c-2)μ1I0,(9)B2(1)=B∼1I∼1E2B∼2I∼2⋱⋱⋱Ec-2B∼c-2I∼c-2Ec-1B∼c-1,B3(1)=B^1I^1E1B^2I^2⋱⋱Ec-4B^c-3I^c-3Ec-3B^c-2,The other undefined quantities appearing in (4)–(7) and (9) are now defined as follows.(10)B∼i=I⊗D0-(μ1+θ)(Δ(i,i-1,…,0)⊗I)+0iθIξI-ξI(i-1)θI⋱⋱⋱ξI-ξIθIξI-ξI,1⩽i⩽c-2(11)I∼r=0000Ir0⊗D1,1⩽r⩽c-2,Er=μ1rr-1⋱10⊗I,1⩽r⩽c-1,(12)B^1=D0-ξI,(13)B^i=I⊗D0-(μ1+θ)(Δ(i-1,…,0)⊗I)+-ξI(i-1)θIξI-ξI(i-2)θI⋱⋱⋱ξI-ξIθIξI-ξI,2⩽i⩽c-2,(14)I^r=Ir0⊗D1,1⩽r⩽c-3,(15)H∼r=μ2(e1′(r+1)⊗er+1(c-1)⊗I),H^r=rθ(e1′(r)⊗er+1(c-1)⊗I),1⩽r⩽c-2,(16)F∼r=er+1′(c-1)⊗e1(r+1)⊗D1,F^r=ξ(er+1′(c-1)⊗e1(r)⊗I),1⩽r⩽c-2,and(17)d=((c-2)μ1,(c-3)μ1,…,μ1,0).The matrices A11 and A22 are of the form:(18)A11=*ξI*(c-2)θIξI*(c-3)θI⋱⋱ξI*θIξI*,A22=*(c-2)θIξI*(c-3)θI⋱⋱ξI*θIξI*,where the diagonal entries of A11 marked with * are(D0-[μ2+(c-1)(μ1+θ)]I,D0-[ξ+(c-2)(μ1+θ)]I,…,D0-[ξ+μ1+θ]I,D0-ξI)and the diagonal entries of A22 marked with * are(D0-[ξ+(c-2)(μ1+θ)]I,…,D0-[ξ+μ1+θ]I,D0-ξI).Finally, the matrices A12 and A21 have only one non-zero (block), respectively, given by (c−1)θI and ξI. This entry occurs in the first row and first column block for both matrices.Before we proceed further with the steady-state analysis we will briefly describe the construction of the generator, Q, of the Markov process under study. First, note that the matrices B0, B1, and B2 are of dimension, respectively, c2m×(2c−1)m, c2m×c2m, and (2c−1)m×c2m; the matrices A0, A1, and A2 are square matrices of dimension (2c−1)m.•The matrix B0 governs transitions from boundary states (the number of customers in the system is less than c) to non-boundary states (the number of customers in the system becomes c). Since there are four sets of states in the boundary states and two sets of states for non-boundary states, B0 is partitioned into eight blocks.The matrix B1 governs transitions of the Markov process within the boundary states. Thus, this matrix is partitioned into four (block) rows and four (block) columns.The matrix B2, consisting of two (block) rows and four (block) columns, governs transitions from non-boundary states (the number of customers in the system is c) the boundary states.The matrices A0, A1, and A2, all of which have two (block) rows and two (block) columns, govern transitions away from the boundary states such that (a) A0 governs transitions corresponding to a new arrival and possible changes in the phase of the arrival process; (b) A1 governs transitions corresponding to no new arrival or no departures but possible changes in the number needing consulting services as well as the phase of the arrival process; and (c) A2 governs transitions corresponding to a departure of a customer.Denote byδthe steady-state probability vector of the (reducible) generator A=A0+A1+A2. That is,δsatisfies(19)δA=0,δe=1.The following theorem gives the stability condition for the queueing model under study.Theorem 1The queueing model under study is stable if and only if the following condition holds good(20)λ<μ2+(c-1)μ1,θ=0,μ1ξθ+μ2-μ1ξθ∑i=0c-1θξi(c-1)!(c-1-i)!-1,θ>0.Recall from Neuts (1981) that the necessary and sufficient condition for the queueing model under study to be stable is thatδA0e<δA2e. Partitioningδ=(δ1,…,δ2c−1) and noting the special structure of A2, it is easy to see that the stability condition does not depend on the phase of the MAP. This is as is to be expected. Now, defining, πi=δe, 1⩽i⩽2c−1, the equationsδA(I⊗e)=0 andδe=1 reduce to(21)-(c-1)θπ1+ξπ2+ξπc+1=0,-[ξ+(c-2)θ]π2+ξπ3=0,(c-j+1)θπj-1-[ξ+(c-j)θ]πj+ξπj+1=0,3⩽j⩽c-1,θπc-1-ξπc=0,(c-1)θπ1-[ξ+(c-2)θ]πc+1+ξπc+2=0,(c-j)θπc+j-1-[ξ+(c-1-j)θ]πc+j+ξπc+j+1=0,2⩽j⩽c-2,θπc-2-ξπ2c-1=0,subject to the normalizing condition(22)∑i=02c-1πi=1.By adding the second, third (over j from 3 to c−1) and the fourth equations in (21), it is easy to verify that(23)πi=0,2⩽i⩽c.Thus, the equations in (21) with the help of (23), can be solved as(24)πc+i=(c-1)!(c-1-i)!θξiπ1,1⩽i⩽c-1,and π1 is obtained using the normalizing condition as(25)π1=∑i=0c-1θξi(c-1)!(c-1-i)!-1.Note that when θ=0 the vectorπ=(π1,…,π2c−1)=(1,0,…,0) and the stability condition for this case is λ<μ2+(c−1)μ1 which is as is to be expected since the model under study reduces to the classical (heterogeneous) multi-server queue. In the case when θ>0, it is easy to verify from the special structure of A2 thatδA2e=[μ2+(c-1)μ1]π1+μ1∑i=1c-2(c-1-i)πc+i=μ2π1+μ1(1-π1)ξθ,from which the stated result follows.In the sequel we will use the following notation:(26)ρ=λ∑i=0c-1θξi(c-1)!(c-1-i)!μ2+μ1∑i=0c-2θξi(c-1)!(c-2-i)!,ρˆ=λμ2+(c-1)μ1.Note thatρˆand ρ are, respectively, the traffic intensities for the classical MAP/M/c queueing model and for the current model. When θ=0, we haveρ=ρˆ. Also, whenξ→∞,ρ→ρˆ.□Letx, partitioned asx=(x∗,u,v,w,xc,xc+1,…), denote the steady-state probability vector of Q. That is,xsatisfiesxQ=0,xe=1. For use in sequel, we further partition,u,v, andwinto vectors of dimension m as follows.u=(u1,…,uc-1),v=(v1,…,vc-1)withvi=(vi0,…,vii),1⩽i⩽c-1,w=(w1,…,wc-2)withwi=(wi1,…,wii),1⩽i⩽c-2.Note that the kth component ofx∗ gives the steady-state probability that the system is in idle state and the phase of the MAP is in k; the kth component ofui, 1⩽i⩽c−1, gives the steady-state probability that the main server along with i−1 servers are busy serving the customers with the phase of MAP in k, 1⩽k⩽m; the kth component ofvij, 0⩽j⩽i, 1⩽i⩽c−1, gives the steady-state probability that there are i customers in the system with the main server either idle (when j=0) or busy offering consulting with j, 0<j⩽i, servers in consulting area and the phase of MAP is in k, 1⩽k⩽m; the kth component ofwij, 1⩽j⩽i, 1⩽i⩽c−2, gives the steady-state probability that there are (i+1) customers in the system with the main server (after being interrupted) busy offering consulting with j, 1⩽j⩽i, servers in consulting area and the phase of MAP is in k, 1⩽k⩽m. Finally, the vectorxipartitioned asxi=xi(0),…,xi(2c-1), for i⩾c, is such that the kth component ofxi(j),0⩽j⩽c-1, gives the steady-state probability that the system has i customers with the main server either busy serving the customers along with other c−1 servers or the main server is busy giving consulting to one of j regular servers while c−1−j regular servers are busy serving the customers, and the phase of the MAP is in k; and the kth component ofxi(c+j),1⩽j⩽c-1, gives the steady-state probability that the system has i customers with the main server busy offering consulting work to one of the j waiting servers while c−1−j servers are busy serving the customers, and the phase of the MAP is in k.Denoting byx(b)=(x∗,u,v,w), under the stability condition given in (20), the steady-state probability vectorxis obtained (see, e.g. Neuts, 1981) as follows(27)x(b)B1+xcB2=0x(b)B0+xc[A1+RA2]=0,xc+i=xcRi,i⩾0,subject to the normalizing condition(28)x(b)e+xc(I-R)-1e=1.and the matrix R is the minimal nonnegative solution to the matrix quadratic equation:(29)R2A2+RA1+A0=0.First note that the matrix R is of dimension (2c−1)m and the coefficient matrices have special structure. In the case when either m or c is of reasonable size, one can use the more efficient logarithmic reduction algorithm (Latouche & Ramaswami, 1993) or the cyclic reduction algorithm (Bini & Meini, 1995) for computing R directly. In the case when either m or c is large, even though R does not possess any special structure in general, one can exploit the special structure of the coefficient matrices appearing in (29) and employ (block) Gauss–Seidel iterative procedure (Stewart, 1994). Secondly, the sparsity of the coefficient matrices, B0, B1, and B2 are fully exploited in solving the equations in (29). The details are omitted.In computing the steady-state probability vector it is very important to have a number of accuracy checks. The following easily verifiable lemmas are first step in building a number of internal accuracy checks.Lemma 1We have(30)x∗+∑i=1c-1ui+∑i=1c-1∑j=0ivij+∑i=1c-2∑j=1iwij+xc(I-R)-1(e⊗I)=ζ,whereζis as given in(1).For use in sequel we defineg=xc(I−R)−1(I⊗e). The following lemma shows that the output rate should be equal to the input rate in steady-state.We have(31)μ2g1+∑i=1c-1uie+μ1∑i=1c-1(i-1)uie+(c-i)gi+∑j=0i(i-j)vije+μ1∑i=1c-2(c-1-i)gc+i+∑j=1i(i-j)wije=λ,Note:(1)On noting thatg1+∑i=1c-1uieand∑i=1c-1[(i-1)uie+(c-i)gi+∑j=0i(i-j)vije]+∑i=1c-2[(c-1-i)gc+i+∑j=1i(i-j)wije]are, respectively, the probability that the main server is busy serving customers and the mean number of regular servers busy, it is clear fromLemma 2that the mean number of busy servers, μNBS, is given in terms of the probability,PbusyMSthat the main server is busy, and the mean, μNRB, number of regular servers busy as follows.(32)(μ2-μ1)PbusyMS+μ1μNBS=λ.When all servers are homogeneous (i.e. when μ2=μ1) Eq.(32)reduces to the classical resultμNBS=λμ1. Note that in this case, the mean number of busy servers does not depend on θ or ξ.In this section we will list some key performance measures useful in bringing out the qualitative behavior of the queueing model under study. These are in addition to the ones that are already listed earlier.1.The system idle probability: The probability, Pidle, that the system is idle is given byPidle=x∗e.The probability that the main server is idle: The probability,Pidle(MS), that the main server is idle is given byPidle(MS)=x∗e+∑i=1c-1vi0e.The probability that the main server is busy serving customers: The probability,Pbusy(MS), that the main server is busy serving the customers given byPbusy(MS)=g1+∑i=1c-1uie.The probability that the main server is in consulting mode without being interrupted: The probability,Pcon(MS), that the main server is busy with consulting work without having his/her own customer waiting for service is given byPcon(MS)=∑i=1c-1gi+1+∑j=1ivije.The probability that the main server is in consulting mode by being interrupted: The probability,Pint(MS), that the main server is busy with consulting work by having his/her own customer waiting for service is given byPint(MS)=∑i=1c-2∑j=1iwije+∑i=c+12c-1gi.The mean number of busy servers in the system: The mean number, μNBS, of busy servers in the system is computed asμNBS=∑i=1c-1iuie+∑j=0i-1(i-j)vije+∑i=2c-2∑j=1i-1(i-j)wije+cg1+∑i=2c-1(c-i)gi+∑i=1c-2(c-1-i)gc+i.The mean number of servers consulting: The mean number, μNCS, of servers in consulting mode is given byμNCS=∑j=1c-2jgj+1+gc+j+∑i=jc-1vije+∑i=jc-2wije+(c-1)[vc-1,c-1e+gc+g2c-1].The mean number of idle servers in the system: The mean number, μNIS, of idle servers in the system is given byμNIS=cx∗e+∑j=1c-1juc-je+vc-j,0e+∑k=1c-1-j(vc-1-j,ke+wc-1-j,ke).Note thatμNBS+μNCS+μNIS+Pcon(MS)+Pint(MS)=cand can be used as an another accuracy check. Since the mean number of servers in consulting mode does not include the busy main server, we need to add the two probabilities with respect to the main server to account for all the servers in the system.The mean number of customers in the system: The mean number, μNS, of customers in the system is computed asμNS=(c-1)xc(I-R)-1e+xc(I-R)-2e+∑i=1c-1i(uie+vie)+∑i=1c-2(i+1)wie.In this section we will discuss four examples that qualitatively describe the model under study. The correctness and the accuracy of the code are verified by a number of accuracy checks as indicated earlier. For example, one can use the results of Lemmas 1 and 2 to verify the correctness of the numerical results. Also we obtained the numerical solution for the Poisson arrivals in its simple form. Next, we implemented the general algorithm, but using the following MAP representation: Let D0 be an irreducible, stable matrix with eigenvalue of maximum real part −κ<0. Letςdenote the corresponding left eigenvector, normalized byςe=1. Taking D1=−D0eς, the MAP representation reduces to the Poisson arrival process with intensity rate κ (see Neuts, 1995). The general algorithm does not utilize this fact in any manner, but the numerical results agreed very much. Finally, our model approaches the classical MAP/M/c queue in which the main server is serving at a (possibly) different rate whenever θ→0 or ξ→∞, and so this fact can be used as another accuracy check.For the arrival process, we consider the following five sets of values for D0 and D1.1.Erlang (ERLA):D0=-550000-550000-550000-550000-5,D1=0000000000000000000050000Exponential (EXPA):D0=(-1),D1=(1)Hyperexponential (HEXA):D0=-1.9000-0.19,D1=1.7100.1900.1710.019MAPwith negative correlation (MNCA):D0=-1.002221.0022200-1.00222000-225.75,D1=0000.0100200.9922223.492502.2575MAPwith positive correlation (MPCA):D0=-1.002221.0022200-1.00222000-225.75,D1=0000.992200.010022.25750223.4925All these five MAP processes are normalized so as to have an arrival rate of 1. However, these are qualitatively different in that they have different variance and correlation structure. The first three arrival processes, namely ERLA, EXPA, and HEXA, correspond to renewal processes and so the correlation is 0. The arrival process labelled MNCA has correlated arrivals with correlation between two successive inter-arrival times given by −0.4889 and the arrival process corresponding to the one labelled MPCA has a positive correlation with value 0.4889. The ratio of the standard deviations of the inter-arrival times of these five arrival processes with respect to ERLA are, respectively, 1, 2.236068, 5.019353, 3.151781, and 3.151781.Before we proceed further without loss of generality we take μ2=a μ1, 0<a<∞ and ξ=bθ, 0<b<∞. For the numerical examples, we will assume that μ2⩾μ1 and ξ⩾θ mainly because the main server should be more knowledgeable to do consulting as well as serving the customers and hence should serve at a faster rate. Even though this restriction is not needed for the model under study as long as the stability condition is satisfied. Thus we restrict our attention to 1⩽a<∞ and 1⩽b<∞ for the remainder of the paper.Example 1In this example, we look at the effect of the parameters a, b and c on the traffic intensity ρ by fixing λ=μ1=1.0, and θ=0.1. First note that the nature of the MAP used for the arrival process has no impact (see Lemma 1). In Figs. 1 and 2we display, respectively, the graphs ρ as functions of a and b for selected values of c, and as functions of b and c for selected values of a. Looking at these graphs, we note that•As b increases (fixing all other parameters), ρ decreases. The rate of decrease increases as c increases.As a increases (when all other parameters are fixed) we notice that ρ also decreases as c increases. However, the rate of decrease in the value of ρ becomes small as for large values of c. When c is large, ρ appears to not vary too much (if not stays constant) as a is increased.As c increases (when all other parameters are fixed), ρ approaches a constant value that appears to not depend on a. In fact the limiting value can be shown to beλbμ1.For a given a there appears be a cut-off point (see Fig. 2) for b, say b1, such that for b⩽b1, ρ appears to increase to the limiting value ofλbμ1as c increases and for b>b1, ρ appears to decrease to the limiting value as c increases.In this example, we look at the effects of the arrival process, the parameters a, b, and c on some selected key system performance measures by fixing λ=μ1=1.0 and θ=0.1. The graphs of the measures,Pidle,Pidle(MS),Pbusy(MS),Pcon(MS),Pint(MS),ln(μNS),μNCS, and μNISare plotted for various cases in Figs. 3–5. Some key observations are summarized below.•With respect to the measure, Pidle, for a up to a certain point (depending on the type of arrival process) we notice (see Fig. 3) a non-decreasing trend as a function of c; however, for a beyond that point we notice a non-increasing trend. In both cases we notice this measure approaches a constant as c increases. This constant value depends not only the type of MAP but also on the value of a. While non-decreasing trend is easy to see and explain since an increase in the resources will result in an increase in the system idle probability, the non-increasing trend can probably be explained as follows. For large a (that is, when μ2 is much larger than μ1) and when c is relatively small, the main server will finish services at a faster rate leading the system to become idle more often (recall that an arriving customer always picks the main server for service whenever the main server is idle along with any other idle servers). However, when c is increased the consulting rate also increases leading to less system idleness (up to a certain level before tapering off to a constant one).Looking at the measures dealing with the main server, we notice that the measure–Pidle(MS)behaves similar to the measure Pidle. This is to be expected. Comparing the three renewal arrivals, we notice that this measure appears to increase with increasing variance in the inter-arrival times when μ1 and μ2 are close to each other, and this measure appears to decrease with increasing variance in the inter-arrival times when μ2 is much larger than μ1. With regards to correlated arrivals we notice that the measure appears to be close to each other especially when c becomes large.Pbusy(MS), in all cases as is to be expected, is a non-increasing function of c (fixing all other parameters) and approaches a constant as c increases. This constant value depends on the type of MAP arrivals.Pcon(MS), appears to increase as c increases in all cases. However, the rate of increase is small (or almost zero) for large c. It is interesting to see that the MNCA appears to have the largest value, and MPCA appears to have the smallest value for this measure for all combinations.Pint(MS), appears to increase initially and then decrease as c increases. This is true for all arrival processes. Further, this depends on the value of a. For MPCA (the graph is not displayed here) we noticed this phenomenon when a is increased to 2.5.Now we look at the mean number of customers in the system, μNS. Due to high values of this measure for MPCA, we look at ln(μNS). While for μ2 close to μ1 we notice the expected pattern of this measure decreasing as c increases and approaching a constant value (depending, of course, on the arrival process); however when μ2 is larger than μ1 we see an interesting pattern (see Fig. 5). Initially, this measure appears to increase and then decrease as c is increased and then approaches a constant value. Among the three MAPs, ERLA, EXPA, and HEXA, we notice that the higher the variability in the inter-arrival times the larger the value of this measure is; among the correlated arrivals, we notice that MPCA produces a higher value.Among the three MAPs, ERLA, EXPA, and HEXA, we notice that the higher the variability in the inter-arrival times the larger the value of the measure μNCS; however, comparing this measure for MPCA and MNCA arrivals we see that for c up to a certain point, the measure appears to be larger for MNCA and then the measure appears to be larger for MPCA. Further, this measure approaches a constant value (as c increases) rather quickly for MNCA while it takes really a large c for MPCA arrivals.As is to be expected, the measure μNISincreases as c increases in all cases. Also, comparing the three renewal arrivals, the higher the variability in the inter-arrival times, the lower the value of this measure is; however, comparing this measure for MPCA and MNCA arrivals we see that for c up to a certain point, the measure appears to be larger for MPCA and then the measure appears to be larger for MNCA.In our next example, we investigate the effect of the consulting activity by the main server on some key system performance measures. In order to do this, we look at the classical multi-server (heterogeneous) queue and compare it to our model. Towards this end we will insert (CQ) in superscript of the measure when it is for the classical queue. For example, byPidle(CQ)will denote the probability that the system is idle when dealing with the classical MAP/M/c queue in which the main server is serving at a (possibly) different rate as compared to the other servers.In this example, we investigate the effect of the consulting activity introduced in the classical MAP/M/c in which the main server is serving at a different rate. Towards this end, we look at the ratios of various measures by fixing λ=μ1=1.0, θ=0.1 and vary a, b, c, and the arrival process. The graphs of the measures,PidlePidle(CQ),Pbusy(MS)Pbusy(MS-CQ),Pidle(MS)Pidle(MS-CQ),μNISμNIS(CQ),μNSμNS(CQ),lnμNSμNBS, andlnμNS(CQ)μNBS(CQ)are plotted for various cases in Figs. 6–8. From these figures we register the following key observations.•When the main server is serving at a rate that is slightly larger than that of the regular servers the system idle probability for the current model (as compared to the corresponding classical queue) is much smaller in all cases. This is to be expected due to the consulting required by the regular servers.The ratios:PidlePidle(CQ),Pbusy(MS)Pbusy(MS-CQ), andPidle(MS)Pidle(MS-CQ), all seem to approach a constant value (which depends on the MAP as well as other parameters) as c increases. Further the constant value is strictly less than 1 (as it should be) indicating that the consulting activity does indeed affect the system significantly even though the rate of consulting needs which is 0.1 is much smaller than the service rate which is 1.In the case when a=1.1, we note that the mean number of idle servers for the current model is smaller than that of the classical queue, and as c increases the ratio for this measure appears to be close to 1. For the case a=2.0 we see the ratio appears to decrease initially and then increases as c increases. Again the ratios are less than 1 for all combinations indicating the significant effect of the consulting activity.With respect to the ratio,lnμNS(CQ)μNBS(CQ), we see an interesting trend. In the case of all MAPs except MPCA, we see the ratio appears to increase and then decreases to a constant value as c increases. In the case of MPCA arrivals we notice that this ratio increases as c increases and approaches a constant value. In all cases, the ratio is greater than 1 indicating the significance of the consulting requirement.Now we focus on the ratio of the number of customers in the system to the number of busy servers. In the context of the classical multi-server queue it is known that as the number of servers increases, this ratio will approach 1 since the mean waiting time in the queue will approach 0 resulting in the mean number of customers in the system to be the same as the mean number of busy servers. Looking at Fig. 8(b), we see this fact show up (note that this figure has ln (ratio) and hence the limiting value is ln (1)=0). While it requires only a reasonably small number of servers for all but MPCA arrivals to achieve this constant value, for MPCA it requires more than 30 servers. However, when we look at this ratio for the current model under study we see an interesting trend. The ratio,lnμNSμNBS, appears to approach a positive constant (as opposed to zero seen in the corresponding classical multi-server queue) for all combinations considered.We know that for the classical multi-server queue as c is increased, the traffic intensity and the ratiolnμNSμNBSapproach 0. However, for the current model under study, we noticed that the traffic intensity (see Example 1) and the ratio (see Example 3) approach positive values. In view of this, increasing the number of servers to, say, reduce the traffic intensity to any desired level may not always be possible. Thus, we will look at the minimum rate, ξ∗, such that for any ξ⩾ξ∗ the current model will yield measures that are very close to that of the corresponding classical multi-server queue. Since we are fixing θ finding ξ∗ is equivalent to finding b∗ (when all other parameters are fixed) such that b⩾b∗ the two models will be close. By close we mean the following. SinceμNS(CQ)⩽μNS, we want the ratioμNS(CQ)μNS⩾0.999, for b⩾b∗. By doing so, we also noticed that all other system measures are very close to the corresponding classical multi-server queue. Thus, in the final example, we study the behavior of b∗ under different scenarios.In this example, we first fix λ=μ1=1.0 and θ=0.1. To study the behavior of b∗ as a function of a, c, and the arrival process, we display the graph of b∗ in Fig. 9. Next we fix λ=1.0, θ=0.1 and μ2=1.5 μ1 and study the behavior of b∗ as a function of μ1, c, and the arrival process. The graph for this case is given in Fig. 10. Looking at these graphs (and other examples for which graphs are not displayed here due to space restriction) we observe the following.•We first look at b∗(a,c). The behavior of this measure for various arrival processes is now examined.–In the case of ERLA arrivals, there appears to be a cut-off point for a, say, a∗ such that for a⩽a∗, b∗(a,c) is decreasing initially and then increases as c increases. The point where this change (decrease to increase) depends on the value of a. For a>a∗, it appears that b∗(a,c) is increasing as c increases.In the case of EXPA, HEXA, and MNCA, we notice that there is a cut-off point, say, a∗, such that b∗(a,c) is non-increasing as c increases. For a>a∗ it appears that b∗(a,c) is non-decreasing as c increases. In both cases there appears to be limiting value (depending on the value of a and the type of arrival process).In the case of MPCA we notice a totally different pattern. For any fixed value of a, we notice that b∗(a,c) is non-decreasing as c increases. It appears that there is a cut-off point for c, say, c∗ such that for c⩽c∗, b∗(a,c) is non-increasing as a increases. For c>c∗, b∗(a,c) is non-decreasing as a increases.Now we look at the behavior of b∗(μ1,c) for various arrival processes.–For all except MPCA we notice that b∗(μ1,c) is decreasing as μ1 increases (by fixing c). The same phenomenon occurs when c is increased (fixing μ1). However, for MPCA arrivals, we notice that there appears to be a cut-off value for c, say c∗, such that for c⩽c∗, b∗(μ1,c) is decreasing as μ1 increases, and for c>c∗, b∗(μ1,c) decreases initially and then increases as μ1 is increased.In this paper we considered a multi-server queueing model in which the main server not only offers services to the customers but also provides consulting work to fellow (regular) servers. Under the assumption of exponential service, exponential requests (for consulting), and exponential consulting times, the steady-state analysis of the model was presented. Some illustrative numerical examples bringing out the qualitative nature of the model were discussed. There are many interesting problems/variations of the current model that are worth studying in the future. These include (a) deriving the steady-state waiting time distribution of a customer (at an arrival epoch) attended by (i) one of the regular servers or by (ii) the main server. Note that these distributions depend on the future arrivals due to consulting work (if the service is offered by a regular) or due to interruptions (if the service is offered by the main server); (b) introduction of a probability, say p, such that an arriving customer finding the main server as well as at least one regular server idle will be attended by the main server with probability p, 0⩽p⩽1, and with probability 1−p the service will be offered by one of the free regular servers; (c) relaxing the exponential assumption with phase type distribution in one or more cases. For example, one can start with relaxing the exponential assumption for the consulting work with phase type distribution; (d) the study of the effective service times by regular and main servers. By effective service time we mean the duration a customer has to spend in the service facility (not including the time, if any, spent in the queue) until leaving the system; and (e) having more than one main server to offer consulting work, and finding the optimum number of main servers (given various costs).

@&#INTRODUCTION@&#


@&#CONCLUSIONS@&#
