@&#MAIN-TITLE@&#
Maximizing Nash product social welfare in allocating indivisible goods

@&#HIGHLIGHTS@&#
HighlightsIndivisible goods are allocated to agents.The goal is to maximize Nash product social welfare w.r.t. classical scores.Complexity results are given for approval, Borda, and lexicographic scores.

@&#KEYPHRASES@&#
Fair division,Social welfare,Nash product,Computational complexity,Scoring rules,

@&#ABSTRACT@&#
We consider the problem of allocating indivisible goods to agents who have preferences over the goods. In such a setting, a central task is to maximize social welfare. In this paper, we assume the preferences to be additive and measure social welfare by means of the Nash product. We focus on the computational complexity involved in maximizing Nash product social welfare when scores inherent in classical voting procedures such as approval or Borda voting are used to associate utilities with the agents’ preferences. In particular, we show that the maximum Nash product social welfare can be computed efficiently when approval scores are used, while for Borda and lexicographic scores the corresponding decision problem becomesNP-complete.

@&#INTRODUCTION@&#
The allocation of goods (items, resources) to agents who have preferences over these goods (multiagent resource allocation) is a fundamental problem of economics, and, in particular, social choice theory. This problem has been tackled in various scenarios (see, e.g., Chevaleyre et al., 2006 for a survey), where, e.g., we distinguish between divisible and indivisible goods, and centralized and decentralized approaches. Here, we consider the case of m indivisible and nonshareable goods to be distributed among agents who report their preferences to a central authority. Typically, individual utilities of (bundles of) items are associated with the preferences over the items. In this work, this is done via numerical scores used in voting rules. Now, a major task is to find an allocation which maximizes the social welfare achieved. Different notions of social welfare have been introduced, the most important being utilitarian, egalitarian, and Nash product social welfare (cf. Brandt, Conitzer, & Endriss, 2013).Utilitarian social welfare of an allocation is given by the sum of the agents’ utilities resulting from the allocation. A more fine-grained approach is egalitarian social welfare, where the lowest of the agents’ individual utilities in a given allocation is considered. In a certain sense, the Nash product social welfare links these two approaches: by measuring the product of the agents’ utilities in an allocation, maximizing the Nash product social welfare targets at a “balanced” allocation (see also Nguyen, Nguyen, Roos, & Rothe, 2014).The Nash product as a measure for social welfare satisfies several desirable properties (see Moulin, 2003 for an explicit treatment). For example, it satisfies the basic fairness criterion that it increases when inequality among two agents is reduced (given the respective change is mean-preserving; see also Ramezani & Endriss, 2010). Clearly, the Nash product also satisfies the monotonicity property that an increase of an agent’s utility yields an increase in the Nash product. In addition, it is independent of both common utility scale and individual utility scale: the social welfare ordering, i.e., the ordering of the allocations according to their Nash product, remains unchanged both if (i) all agents rescale their utilities with the same factor, and (ii) each agent rescales her utility using a different factor.A central question in maximizing social welfare is the computational complexity involved. We assume that the agents have additive preferences, i.e., for each agent, the utility of a set of goods is the sum of the utilities of the single goods it contains.Clearly, maximizing utilitarian social welfare is an easy task – simply allocate each item to an agent who it yields the highest utility for (see also Brandt et al., 2013). In contrast, it is known that maximizing egalitarian social welfare and Nash product social welfare areNP-complete for additive utilities and general scoring functions (Roos & Rothe, 2010). Recently, Baumeister et al. (2013) have shown that maximizing egalitarian social welfare remainsNP-complete for a number of prototypical scoring functions from voting theory: quasi-indifference, Borda, and lexicographic scoring. On the positive side, it is known that the maximum egalitarian social welfare can be computed in polynomial time for approval scores (Golovin, 2005). To the best of our knowledge, the computational complexity of maximizing Nash product social welfare under scoring functions such as approval, Borda, or lexicographic scoring has not been considered yet. In this paper, we investigate the computational complexity involved in maximizing Nash product social welfare under these classical scoring functions.Related work and our contribution. In the Santa Claus problem (Bansal & Sviridenko, 2006), the goal is to maximize egalitarian social welfare when indivisible items have to be allocated among agents. There, the agents associate an arbitrary numerical value with each item, i.e., the input is numerical, and the utility of an agent is the sum of the values of the items assigned to her. In contrast, as done in our work, in the setting presented in Brams, Edelman, and Fishburn (2003) the agents’ preferences are expressed ordinally. Brams et al. (2003) introduce the notion of a Borda-optimal allocation, which is defined as an allocation maximizing egalitarian social welfare where an agent’s utility is the sum of the Borda scores of the items the agent receives. We translate this concept to maximizing Nash product social welfare, and expand the perspective from Borda scores to approval (and, in particular, k-approval) and lexicographic scores. Informally speaking, in k-approval scoring a distinction between “good” (approved) and “bad” (disapproved) items is made: the top k items in the ranking of an agent receive a score of 1, while the remaining items get score 0. In Borda scoring, an agent’s most preferred item gets a score of m, her second-ranked item a score ofm−1,and so on; her least preferred item has a score of 1. In lexicographic scoring, the position of the item in the ranking is even more crucial: any item r yields a higher score than the total of all items ranked below r. Our goal is to analyze the computational complexity involved in maximizing Nash product social welfare with respect to these types of scores. In the context of maximizing social welfare in multiagent resource allocation, complexity results have been achieved with respect to different types of utility representation: the bundle form, k-additive form, or straight-line programs. For the bundle form representation,NP-completeness results for utilitarian (Chevaleyre, Endriss, Estivie, & Maudet, 2008), egalitarian (Roos & Rothe, 2010), and Nash product social welfare (Ramezani & Endriss, 2010; Roos & Rothe, 2010) are known. For straight-line programs, Dunne, Wooldridge, and Laurence (2005) show that maximizing utilitarian social welfare isNP-complete, while Nguyen et al. (2014) show that maximizing social welfare isNP-complete both for the egalitarian and Nash product approach. Both maximizing egalitarian social welfare and maximizing Nash product social welfare turn out to beNP-complete for 1-additive, i.e., additive utilities already (Lipton, Markakis, Mossel, & Saberi, 2004; Roos & Rothe, 2010). In these works, however, reductions from Partition are given, which do not imply theNP-completeness for any of the scoring functions considered in our work. Given additive utilities, Baumeister et al. (2013), besides many other results, have proven that maximizing egalitarian social welfare isNP-complete for Borda, lexicographic, and quasi-indifference scoring.In this paper, we show that maximizing Nash product social welfare isNP-complete for Borda and lexicographic scores, whereas it is polynomially solvable for approval scores. The computational complexity involved when quasi-indifference scores are used is still open.LetR={r1,r2,…,rm}be a set of m indivisible resources (items) and letA={a1,…,an}be a set of n agents. An allocation is a mapping that assigns to each agent a subset of resources such that each resource is handed to exactly one agent. Formally, an allocation P is a mapping P: A → 2Rwith⋃a∈AP(a)=RandP(ai)∩P(aj)=∅wheneveri≠j.Now, in our model, we start with ordinal inputs, i.e., the agents rank resources, and map these ranks to numerical scores then. Note that we do not claim that these numerical scores are equivalent or at least close to the agents’ actual utilities. However, starting with numerical inputs instead would have several drawbacks (see also Baumeister et al., 2013); e.g., often it is easier for agents to rank items instead of associating numerical values with each single item, especially in contexts where money is not a key factor. Next, as also pointed out in Baumeister et al. (2013), the use of numerical inputs has the severe disadvantage that it insinuates comparability of interpersonal preferences. Finally, note that our approach is very common in voting theory, as in fact it resembles the way that positional scoring rules proceed.11Obviously, with the clear difference that we are finally interested in allocations instead of winners of elections.In particular, we assume that agents have preferences over the single resources. The preferences are expressed by means of strict orders≻aiover R, which are summarized by the n-tupleπ=(≻a1,≻a2,…,≻an)called profile. We denote byrankai(r)the rank of resource r in the ranking of agent ai.We adopt scores used in voting procedures to evaluate these preferences by means of utility functionsua:R→Q,a ∈ A. We assume that the utility functions are additive, i.e., for any subset R′⊆R we haveua(R′)=∑r∈R′ua(R′). For the sake of readability, we may write ua(P) instead of ua(P(a)).Given a profile π, we consider the following types of scores (where r ∈ R):•k-approval scores: For each agent a ∈ A,ua(r)={1ifranka(r)≤k0otherwiseBorda scores: For each agent a ∈ A,ua(r)=m+1−ranka(r).Lexicographic scores: For each agent a ∈ A,ua(r)=2m−ranka(r).Given k-approval scores, for each a ∈ A, uapartitions the set R into a setSa:={r∈R:ua(r)=1}(the set of resources agent a approves of) and a setSac:={r∈R:ua(r)=0}(the set of resources agent a disapproves of). Conversely, specifying the set Sa(of size k) for each agent a uniquely determines the corresponding k-approval scores. More generally (and slightly abusing notation), given a set S(a)⊆R for each a ∈ A, approval scores are given byua(r)=1for r ∈ S(a) andua(r)=0for r ∈ R∖S(a).Given an allocation P, the Nash product social welfare for P is given byswN(P)=∏1≤i≤nuai(P).In this paper, we consider the problem of maximizing the Nash product social welfare with respect to the above scores, i.e., utility functions. The corresponding decision problems are defined as follows.Definition 2.1(Nash Product Social Welfare Maximization-Approval)GIVEN:Quadruple (R, A, S, k): R is a set of resources, A a set of agents, a collectionS={Sa1,Sa2,…,San}of subsetsSai⊆R,andk∈N.Is there an allocation P such that swN(P) ≥ k, whereuai(r)=1ifr∈Saianduai(r)=0otherwise?Analogously, we defineNash Product Social Welfare Maximization-Borda.Definition 2.2(Nash Product Social Welfare Maximization-Borda)GIVEN:Quadruple (R, A, π, k): R is a set of resources, A a set of agents, π is a profile, andk∈N.Is there an allocation P such that swN(P) ≥ k for Borda scores?It is straightforward to define Nash Product Social Welfare Maximization-Lexicographic for lexicographic scores. In what follows, we use the shortcut NPSW for Nash Product Social Welfare Maximization.First, we show that NPSW is inPfor approval scores. This is done by a transformation to the polynomially solvable Min Cost Flow problem (cf. Ahuja, Magnanti, & Orlin, 1993). In particular, it follows that in the case of approval scores, an actual allocation that maximizes Nash product social welfare can be found in polynomial time.We begin with some basic definitions and two known properties of a min cost flow (i.e., an optimal solution of the Min Cost Flow problem).Definition 3.1In an instanceM=(G,c,ℓ,p,b)of Min Cost Flow, we are given a directed graphG=(V,E). With each edge e ∈ E, two rational numbers are associated: a cost c(e) and an upper bound p(e) on the capacity of e. For each v ∈ V, we are given the rational-valued vertex demand b(v). The Min Cost Flow problem can be stated as follows:min∑(u,v)∈Ec(u,v)f(u,v)(1)s.t.∑v:(u,v)∈Ef(u,v)−∑v:(v,u)∈Ef(u,v)=b(u)forallu∈V0≤f(u,v)≤p(u,v)forall(u,v)∈EA functionf:E→Qis called flow, if f satisfies the conditions stated in (1). The cost of a flow f is defined byc(f)=∑(u,v)∈Ec(u,v)f(u,v).In an instanceM=(G,c,ℓ,p,b)of Min Cost Flow, the capacity constraints on the edges are written by means of [0, p(e)]. The cost of a directed cycle defined as the sum of the costs of the edges in the cycle.InM,we associate a residual network Gfwith a flow f. Gfis constructed from G as follows. Each edge (i, j) ∈ E is replaced by the edges (i, j) and (j, i). In Gf, the arc (i, j) has cost c(i, j) and residual capacity[0,p(i,j)−f(i,j)]; the arc (j, i) has costc(j,i)=−c(i,j)and residual capacity [0, f(i, j)]. Finally, Gfconsists of edges with positive residual capacity only.Theorem 3.1Negative cycle optimality condition; cf. Ahuja et al., 1993A flow f is an optimal solution of Min Cost Flow, if and only if Gf does not contain a negative cost directed cycle.If all arc capacities and all node demands are integer, then there is an integer min cost flow.NPSW-Approval is inP.LetI=(R,A,π,k)be an instance of NPSW-Approval. We assume that each item is approved of by at least one agent (otherwise, items which are not approved by any agent are removed in a preprocessing step). We argue thatIcan be decided by solving an instanceMof Min Cost Flow.Mis defined as follows. In the graphG=(V,E),certain vertices are identified with items/agents of the same label. In particular,V={s,t}∪A∪R∪{ti,j|i∈A,j∈R}. The vertex demands areb(s)=m,b(t)=−mandb(v)=0for each v ∈ V∖{s, t}. In order to construct the edge set E,•For each r ∈ R we introduce edge (s, r) with capacity [0, 1] and zero cost.For each ai∈ A and for each r ∈ R withuai(r)=1we introduce the edge (r, ai) with capacity [0, 1] and zero cost.For each ai∈ A and 1 ≤ j ≤ m, we introduce•the edge (ai, ti, j) with capacity [0, 1] and costc(ai,ti,j)=njthe edge (ti, j, t) with capacity [0, 1] and zero cost.By the integrality property, there is an integer min cost flow f inM. That is, for each e ∈ E, f either does not send flow along e or f sends exactly 1 unit of flow along e. Clearly, due to the choice of the vertex demands and the edge capacities [0, 1] of the edges (s, r), for each r ∈ R there is exactly one unit of flow sent through vertex r. Due to the capacities of the edges (r, a) this means that for each r ∈ R, there is exactly one a ∈ A such that f sends (one unit of) flow along (r, a). Thus, the mapping Pf: A → R defined by r ∈ Pf(a) ifff(r,a)=1is an allocation inI. On the other hand, it is not hard to see that an allocation P induces an integer flow f PinMby•Sending one unit of flow along (s, r) for each r ∈ RFor each ai∈ A and for each r ∈ R, sending one unit of flow along (r, ai) iff r ∈ P(ai)Sending one unit of flow along (ai, ti, h) and (ti, h, t) for each1≤h≤uai(P)The proof proceeds in three steps.Step 1: Let f be an integer flow in instanceM,where fidenotes the amount of flow sent through vertex ai. We show that the following holds: f is a min cost flow if and only if the two properties1.For each ai∈ A, f sends flow along the arcs (ai, ti, h), for all 1 ≤ h ≤ fi, andThere is no sequence(ai1,rj1,ai2,rj2,…,rjℓ−1,aiℓ)withfi1−fiℓ≥2,such that for all1≤h≤ℓ−1we have (i)(rjh,aih+1)∈Eand (ii) f sends flow along the arc(rjh,aih)are satisfied. Note that the second property reflects the idea that a more “balanced” and thus cheaper flow cannot be immediately derived from f.In particular, we show that the above conditions are equivalent to the negative cycle optimality condition. First, note that due to the fact that for each edge (s, rj) demand and upper bound equal to 1, the residual capacity of the edge is 0. That is, the edge is not contained in the residual network H. Thus, H does not contain any edge emanating from s. Hence, s cannot be part of any cycle in R.Step 1a: Assume that one of the two conditions above is not satisfied. Case I considers the case that the first condition is violated. Case II considers the situation that the first condition holds, but the second is violated.Case I: For some ai∈ A, there is an 1 ≤ h ≤ fisuch that f does not send flow along the edges (ai, ti, h). Then, f must send along an edge (ai, ti, ℓ) for some ℓ > fi. But then it is easy to see that in the residual network H the cycleγ=(t,ti,ℓ,ai,ti,h,t)is a cycle of costc(γ)=−nℓ+nh<0due to ℓ > h.Case II: For all ai∈ A, f sends one unit of flow along the edges (ai, ti, h), 1 ≤ h ≤ fi. Assume there is a pair (ai, aj) withfi−fj≥2such that (i) (r, aj) ∈ E and (ii) f sends flow along the arc (r, ai). Then, in the residual network H the cycleγ′=(t,ti,fi,ai,r,aj,tj,fj+1,t)has negative cost:c(γ′)=−nfi+nfj+1<0,becausefi−fj≥2by assumption.Hence, if one of the two conditions is violated, there is a negative cost cycle.Step 1b: On the other hand, assume H contains a negative cost cycle γ. We show that this implies that at least one of the two conditions is violated. Clearly, s cannot be contained in γ. In addition, γ cannot be made up of vertex t and vertices ti, jonly, since each edge (ti, j, t) is of zero cost.Assume γ does not contain a vertex rj, 1 ≤ j ≤ m. Then, for some i, x, y,γ=(t,ti,x,ai,ti,y,t)holds. Note thatc(γ)=−c(ti,x,ai)+c(ai,ti,y)=−nx+ny. Thus, c(γ) < 0 implies(2)x>yAssume that f sends flow along (ai, ti, h) for all 1 ≤ h ≤ fi. Then the residual network H must contain (i) the edges (ti, h, ai) for 1 ≤ h ≤ fias only edges with head ai. Thus, x ≤ fifollows. In addition, since f is integer and in the original network G the upper bound of the capacity of each of the edges (ai, ti, h) equals 1, it follows that f sends exactly one unit of flow along each of the arcs (ai, ti, h), for 1 ≤ h ≤ fi. Hence, H cannot contain any of these edges. Thus, y > fimust hold. Putting things together, we get x ≤ fi< y, in contradiction with (2). Hence, the first condition is violated.Thus, γ contains a vertex r ∈ R. Assume the first condition is not violated (otherwise there is nothing to show). Then, there is a sequence(ai1,rj1,ai2,rj2,…,rjℓ−1,aiℓ)such thatγ=(t,ti1,x,ai1,rj1,ai2,rj2,…,rjℓ−1,aiℓ,tiℓ,y,t)for some ℓ ≥ 2 and some x, y, withi1≠iℓ.Since by assumption the first condition is satisfied,x≤fi1andy≥fiℓ+1hold.c(γ)=−c(ti1,x,ai1)+c(aiℓ,tiℓ,y)=−nx+ny≥−nx+nfiℓ+1. Now, c(γ) < 0 implies−nx+nfiℓ+1<0,i.e.,x>fiℓ+1. Hence,fi1≥x>fiℓ+1holds. Thus,fi1≥fiℓ+2holds, since all flow values are integer. That is, the second condition is violated.As a consequence, the negative cycle condition is in fact equivalent to the two above stated conditions.Step 2: Let P′ be an allocation that maximizes Nash product social welfare. Throughout this proof, let g be the integer flow induced by allocation P′. We show that g is a min cost flow.For each ai∈ A, g sendsgi=uai(P′)units of flow through vertex aiand one unit of flow through each of the arcs (ai, ti, h) for 1 ≤ h ≤ gi. Assume there is a pair (ai, aj) withgi−gj≥2such that (i) (r, aj) ∈ E and (ii) g sends flow along the arc (r, ai). Then, both ai, ajapprove of item r. Consider the assignment P′′ defined byP′′(a)=P(a)for a ∈ A∖{ai, aj},P′′(ai)=P′(ai)∖{r}andP′′(aj)=P′(aj)∪{r}. Then,∏ai∈Auai(P′′)∏ai∈Auai(P′)=(uai(P′)−1)(uaj(P′)+1)uai(P′)(uaj(P′)=uai(P′)uaj(P′)+uai(P′)−uaj(P′)−1uai(P′)(uaj(P′)>1where the last inequality follows fromuai(P′)−uaj(P′)−1=gi−gj−1≥1. This contradicts with the fact that P′ maximizes Nash social welfare. With Step 1, if follows that g is a min cost flow.Step 3: Let f be an integer min cost flow. We show that∏ai∈Afi=∏ai∈Agiholds. W.l.o.g., we assume f1 ≥ f2 ≥ ⋅⋅⋅ ≥ fn. Clearly, there is a permutation π: A → A such that gπ(1) ≥ gπ(2) ≥ ⋅⋅⋅ ≥ gπ(n) holds. We show thatfi=gπ(i)for each 1 ≤ i ≤ n.Assume the opposite, i.e., there is an index k ≥ 1 such thatfi=gπ(i)for i < k andfk≠gπ(k). If fk> gπ(k), then(3)c(f)−c(g)=∑i=1n(∑h=1f(i)nh−∑h′=1gπ(i)nh′)=(n+n2+⋯+nfk)−(n+n2+⋯+ngπ(k))+∑i=k+1n(∑h=1finh−∑h′=1gπ(i)nh′)=ngπ(k)+1+ngπ(k)+2⋯+nfk+∑i=k+1n(∑h=1finh−∑h′=1gπ(i)nh′)Note that for any fixedh∈N,∑i=1hnh=nh+1−1n−1−1holds. Thus,(4)∑i=k+1n∑h′=1gπ(i)nh′≤(n−k)∑h′=1gπ(k)nh′<(n−k)ngπ(k)+1n−1≤ngπ(k)+1With (4) and fk> gπ(k), we get∑i=k+1n(∑h=1finh−∑h′=1gπ(i)nh′)>−∑i=k+1n∑h′=1gπ(i)nh′>−ngπ(k)+1≥−nfkTogether with (3) we getc(f)−c(g)>0,in contradiction with the fact that f is a min cost flow.Analogously, fk< gπ(k) leads to a contradiction with the fact that g is an integer min cost flow (because ofc(f)=c(g)). Thus,fi=gπ(i)holds for all 1 ≤ i ≤ k. Hence,∏ai∈Afi=∏ai∈Agifollows.Since g is an integer flow of minimum total cost (Step 2), from Step 3∏ai∈Afi=∏ai∈Agifollows for any integer min cost flow f. Hence, in order to maximize the Nash product social welfare, it is sufficient to find an integer min cost flow in instanceM. This can be done in polynomial time (see, e.g., Ahuja et al., 1993).□Theorem 3.4NPSW-Lexicographic isNP-complete.We provide a reduction from theNP-complete problem Cubic Monotone 1-in-3 Sat (cf. Moore & Robson, 2001). An instanceI=(X,C)of that problem consists of a set of variables X and a set C of clauses over X, such that each clause is made up of exactly three variables of X and each variable occurs in exactly three clauses. In Cubic Monotone 1-in-3 Sat we ask if there is a truth assignment for X such that exactly one variable is true in each clause of C.Note that there are no negated literals contained in any clause of C. In addition, observe that|X|=|C|holds. Further note that ϕ can be a satisfying truth assignment in instanceIonly if it the number of variables set true under ϕ is exactly|X|3. Thus, |X| is a multiple of 3.Given an instanceI=(X,C)of Cubic Monotone 1-in-3 Sat we construct an instanceL=(R,A,π,k)of NPSW-Lexicographic as follows. Abusing notation, within this paper we will identify (the set of) variables and clauses respectively with (sets of) items and agents respectively. Letn=|X|=|C|,andℓ=12n.R consists ofℓ+6n+n3items:•The itemsd1,d2,…,dℓThe item setsX={x1,x2,…,xn},andY={x1,1,x1,2,x1,3,x2,1,x2,2,x2,3,…,xn,1,xn,2,xn,3}The item setsB={b1,1,b1,2,b2,1,b2,2,…,bn,1,bn,2}andH={h1,h2,…,hn3}Over the sets B, H, X resp. Y we define the rankings τB, τH, τX, and τYas follows:•τX=x1≻x2≻⋯≻xn,τH=h1≻h2≻⋯≻hn3,τB=b1,1≻b1,2≻b2,1≻⋯≻bn,2,andτY=x1,1≻x1,2≻x1,3≻x2,1≻⋯≻xn,3Let S ∈ {B, H, X, Y}. For any subset Z of S, by τZwe denote the ranking τSrestricted to the subset Z. Within this proof, we represent the clauseCi=(xi1,k1∨xi2,k2∨xi3,k3),where kj∈ {1, 2, 3} denotes the kj-th occurrence of variablexijin C, by the setCi={xi1,k1∨xi2,k2∨xi3,k3}.A consists ofℓ+5nagents:•For each 1 ≤ i ≤ ℓ, the ranking of agent Diis given byd1≻d2≻⋯≻dℓ≻τB≻τY≻τX≻τHFor 1 ≤ i ≤ n, the ranking of agent Hiis given byτH≻xi≻d1≻d2≻⋯≻d5n−1≻τB≻τY≻τX∖{xi}≻d5n≻⋯≻dℓFor 1 ≤ i ≤ n, the ranking of agent Xiis given byxi≻d1≻⋯≻dn≻xi,1≻xi,2≻xi,3≻dn+1≻⋯≻d5n−6≻≻τB≻τY∖{xi,1,xi,2,xi,3}≻τX∖{xi}≻d5n−5≻⋯≻dℓFor 1 ≤ i ≤ n, the rankings of the agents αi, βi, γiare as follows. Letταi=xi1,k1≻d2n+5≻d2n+6≻⋯≻d3n+4≻xi2,k2≻d3n+5≻d3n+6≻⋯≻d4n+4≻xi3,k3τβi=xi2,k2≻d2n+5≻d2n+6≻⋯≻d3n+4≻xi3,k3≻d3n+5≻d3n+6≻⋯≻d4n+4≻xi1,k1ταi=xi3,k3≻d2n+5≻d2n+6≻⋯≻d3n+4≻xi1,k1≻d3n+5≻d3n+6≻⋯≻d4n+4≻xi2,k2The ranking of αiis given byd1≻⋯≻dn+4≻bi,1≻bi,2≻dn+5≻⋯d2n+4≻ταi≻d4n+5≻⋯≻d5n−1≻τB∖{bi,1,bi,2}≻τY∖Ci≻τX≻τH≻d5n≻⋯≻dℓThe ranking of βi(resp. γi) results fromπαiby replacingταiwithτβi(resp.τγi).LetM:=|R|−1,andκ=[2M−(n+1)+2M−(n+2)+2M−(n+3)]2n3·[2M−(n+4)·2M−(n+5)·2M−(3n+6)]n3Setk=(∏i=0ℓ−12M−i)·2n3·2∑i=0n3−1(M−i)·2(M−n3)2n3·κIn instanceLwe ask if there is an allocation P with swN(P) ≥ k.We begin with two simple lemmata.Lemma 3.5Let P be an allocation. Let Q result from P by handing an item p ∈ P(a2) to agent a1such that the following properties are satisfied:•∃q ∈ P(a2) such that a2ranks q higher than pa1ranks p higher than the highest-ranked item of P(a1)Then, ∏a ∈ Aua(P) < ∏a ∈ Aua(Q).Letua2(p)=2sandua1(p)=2tfor somes,t∈N. Clearly, the stated properties imply(5)ua2(P)>2s+1andua1(P)<2tWith (5), we can conclude thatua1(Q)·ua2(Q)=[ua1(P)+2t)]·[ua2(P)−2s]=ua1(P)·ua2(P)+2tua2(P)−2sua1(P)−2s+t>ua1(P)·ua2(P)+2t+s+1−2s2t−2s+t=ua1(P)·ua2(P)holds. Therefore, ∏a ∈ Aua(P) < ∏a ∈ Aua(Q).□Let P be an allocation. Let Q result from P by handing an item p ∈ P(a2) to agent a1and q ∈ P(a1) to agent a2such that for somej∈Nthe following properties are satisfied:•a2ranks q at most j positions lower than pa1ranks p at least(j+1)positions higher than the highest-ranked item of P(a1)Then, ∏a ∈ Aua(P) < ∏a ∈ Aua(Q).Let λ denote the rank of the highest-ranked item of P(a1) in the ranking of a1. Then,(6)2λ≤ua1(P)<2λ+1holds. Let μ denote the rank of item p in the ranking of a2;2μ≤ua2(P)holds. Comparing the Nash product social welfare achieved by the allocations, it is enough to considerua1(Q)·ua2(Q)−ua1(P)·ua2(P)since for the remaining the agents the utilities of P and P′ coincide. Now,ua1(Q)·ua2(Q)−ua1(P)·ua2(P)≥(ua1(P)+2λ+(j+1)−2λ)(ua2(P)+2μ−j−2μ)−ua1(P)·ua2(P)=ua1(P)(2μ−j−2μ)+(2λ+(j+1)−2λ)ua2(P)+2λ+μ+1−2λ+(j+1)+μ−2λ+μ−j+2λ+μ=[ua1(P)2μ−j−2λ+μ−j]+[2λ+μ+1−2μua1(P)]+[(2λ+(j+1)−2λ)ua2(P)−2λ+(j+1)+μ+2λ+μ]>[(2λ+(j+1)−2λ)ua2(P)−2λ+(j+1)+μ+2λ+μ]where the last inequality follows from (6). Sinceua2(P)≥2μ,we hence getua1(Q)·ua2(Q)−ua1(P)·ua2(P)>[(2λ+(j+1)−2λ)2μ−2λ+(j+1)+μ+2λ+μ]=0As a consequence, ∏a ∈ Aua(P) < ∏a ∈ Aua(Q).□Iis a “yes”-instance of Cubic Monotone 1-in-3 Sat if and only ifLis a “yes”-instance of NPSW-Lexicographic.“Only-if”-part: Let ϕ be a truth assignment that sets true exactly one variable in each clause. Abusing notation, we identify ϕ with the set of variables set true under ϕ. Recall that|ϕ|=n3. We define the allocation P as follows.•P(Di)=difor each 1 ≤ i ≤ ℓ. Thus, the total product of the utilities of these agents is∏i=0ℓ−12M−i.For each xi∈ ϕ, letP(Xi)=xi,–for the q-th clause Cjthat contains xi, q ∈ {1, 2, 3}, assign xi, qto the one among αj, βj, γjthat ranks xi, qhighest (i.e., directly belowd2n+4,in position3n+7); for the two remaining agents among αj, βj, γj, allocate bi, 1 to one and bi, 2 to the other agent.allocate exactly one of{h1,…,hn3}to agent Hi.Hence, the total product of the utilities of these agents is(2M)n3·(2M−(3n+6)·2M−(n+4)·2M−(n+5))n3·(2M·2M−1⋯2M−n3+1)For each xi∉ϕ, letP(Hi)=xiandP(Xi)={xi,1,xi,2,xi,3}. The total product of the utilities of these agents is(2M)2n3·(2M−(n+1)+2M−(n+2)+2M−(n+3))2n3Thus,∏a∈Aua(P)=k,implying thatLis a “yes”-instance.“If”-part: Let P be an allocation with ∏a ∈ Aua(P) ≥ k. This implies that the maximum Nash product social welfare achieved exceeds the threshold k. W.l.o.g. we assume that P is an allocation of maximum Nash product social welfare. We show that P must satisfy several properties:1.di is allocated to Di for each 1 ≤ i ≤ n: Assume there is an agent Disuch thatP(Di)∩{d1,…,dℓ}=∅. Let r ∈ P(Di) denote the item which Diranks highest among the items in P(Di). We distinguish the following cases.(a)There is a Djwho gets allocated at least two elements of{d1,…,dℓ}. Let dmin  be the lowest ranked of these items in the ranking of Dj. Consider the allocation P′ which results from P by handing dmin  to Di. With Lemma 3.5, ∏a ∈ Aua(P) < ∏a ∈ Aua(P′) holds which contradicts with the choice of P.There is an agenta≠Djwho gets allocated at least one of{d1,…,dℓ}. Take an arbitrary such d ∈ P(a). Consider the allocation P′′ which results from P by handing r to a and d to Di. If a ranks r above d, trivially ua(P′′) > ua(P) anduDi(P′′)>uDi(P)follow, since Diby construction ranks d above r.Assume a ranks r below d. We can observe that in the ranking of Di, r is among the last(6n+n3)positions. For any other agent, r is ranked higher by construction. Thus, a ranks r higher than Didoes; also by construction, Diranks d at least as high as a does. Hence, the number μ of items between d and r in the ranking of Diexceeds the number of items between d and r in the ranking of a by at least one item. In other words, Lemma 3.6 can be applied, again leading to a contradiction with the choice of P.As a consequence, each agent Digets at least (and thus exactly) one item of{d1,…dℓ}. Since the rankings of the agents Di, 1 ≤ i ≤ ℓ, coincide, w.l.o.g. we assume that diis allocated to Di.hi is allocated to one of{H1,…,Hn},for each1≤i≤n3. Assume hiis allocated to an agenta∉{H1,…,Hn}. Then, take an arbitraryHj∈{H1,…,Hn}who is not allocated any item of{h1,…,hn3}. Obviously, such an agent Hjexists. It is easy to see that for the allocationP¯which results from P by handing hito Hj, and, in turn, any item of P(Hj) to a satisfiesuHj(P¯)>uHj(P)andua(P¯)>ua(P),i.e.,∏a∈Aua(P)<∏a∈Aua(P¯).xi is allocated to one of {Hi, Xi}, for each 1 ≤ i ≤ n. Assume xiis assigned to an agent a∉{Hi, Xi}. Consider the allocationP˜which results from P by handing xito Xi, and, in turn, the item r′ of P(Xi) which Xiranks highest to agent a. Recall thatr′∉{d1,…,dℓ,h1,…hn3}. Ifr′∉{xi+1,…,xn},then obviouslyuXi(P˜)>uXi(P)andua(P˜)>ua(P)hold, i.e.,∏a∈Aua(P)<∏a∈Aua(P˜). Letr′∈{xi+1,…,xn}. Then, Xiranks ximore than 3n positions above r′. Note that any agent a∉{Hi, Xi} ranks r′ at most(n−1)positions below xi. Thus, the conditions stated in Lemma 3.6 are satisfied, and again we get a contradiction with the choice of P.Hj is allocated exactly one of{h1,…,hn3}∪{xj},for each 1 ≤ j ≤ n. Note that with Step 3 this means thatHjis allocated exactly one of{h1,…,hn3}∪{x1,…,xn}.This step is split in three parts:(a)Hj is allocated at most one of{h1,…,hn3},for each 1 ≤ j ≤ n. Assume there is an agent Hjwho is allocated at least two items of{h1,…,hn3}. Let hgbe the lower-ranked of the two items in the ranking of Hj. For the allocationP^which results from P by handing hgto an agentHj′who P does not allocate an item of{h1,…,hn3}to, we get with Lemma 3.5that∏a∈Aua(P)<∏a∈Aua(P^)holds.If Hj is allocated one of{h1,…,hn3}, then Hj is not allocated xj. Leth∈{h1,…,hn3}be allocated to Hj. Assume the opposite. Consider the allocation Q which results from P by handing xjto Xj. Again, with Lemma 3.5uHj(Q)·uXi(Q)>uHj(P)·uXi(P)follows.If Hj is allocated none of{h1,…,hn3},then Hj is allocated xj. Assume the opposite. Since by assumption ∏a ∈ Aua(P) > 0, P must allocate an item r to agent Hj. Again, let r be the item highest-ranked by Hjthat Hjreceives under P.From Steps 1–3, we can conclude thatr∈{b1,1,…,bn,2}∪{x1,1,…,xn,3}holds. Consider the allocation Q′ which results from P by handing xjto Hj, and, in turn, item r to Xj. By construction, Xiranks r more thann3positions higher than Hjdoes. On the other hand, Hjranks xjexactlyn3positions lower than Xidoes. Therefore, the number μ of items between xjand r in the ranking of Hjexceeds the number of items between xjand r in the ranking of Xiby at least one item. As a consequence, Lemma 3.6yields a contradiction with the choice of P.Two of {αi, βi, γi} are allocated exactly one of {bi, 1, bi, 2}, for each 1 ≤ i ≤ n.This step is proven in two parts.(a)bi, 1(resp. bi, 2) is allocated to αi, βi or γi , for each 1 ≤ i ≤ n. Assume bi, 1 is not allocated to one of these agents. Clearly, at most one of αi, βi, γiis allocated bi, 2. W.l.o.g. assume bi, 2 is not allocated to αi. By Step (1), this implies that αiranks bi, 1 more than 2n positions higher than the highest-ranked among the items in P(αi). Take an arbitrary p ∈ P(αi). Note that with Steps 1–3,p∉{d1,…,dℓ,x1,…,xn,h1,…,hn3}∪{bi,2}follows. Consider the allocation Q which results from P by handing p to the agent a with bi, 1 ∈ P(a) and, in turn, bi, 1 to agent αi. By construction (in particular, by the itemsdn+5,…,d2n+4in the ranking of αi), it follows that the conditions of Lemma 3.6 are satisfied. Thus ∏a ∈ Aua(P) < ∏a ∈ Aua(Q) holds, in contradiction with the choice of P.bi, 1and bi, 2are not allocated to the same agent, for each 1 ≤ i ≤ n. Assume the opposite. Then, analogously to above, by the use of Lemma 3.6 we can find an allocation with a higher Nash product social welfare than P.For each 1 ≤ i ≤ n and a ∈ {αi, βi, γi}, the following holds: If bi, 1or bi, 2is allocated to a, then a is allocated no further item.It remains to show that no item of Y is allocated to a. We provide a proof for agent αiand bi, 2 ∈ P(αi) (the other cases follow analogously). Assume at least one of Y is allocated to αi. Let xg, jbe allocated to αi. Consider the allocation Q′ which results from P by handing xg, jto agent Xg. Letuαi(xg,j)=2ɛfor someɛ∈N. Note thatuXg(xg,j)≥2ɛ+2nand(7)uαi(P)≥2M−(n+4)+2ɛhold. We getuXg(Q′)·uαi(Q′)−uXg(P)·uαi(P)≥(uXg(P)+2ɛ+2n)·(uαi(P)−2ɛ)−uXg(P)·uαi(P)≥[uXg(P)·uαi(P)−2ɛuXg(P)+2ɛ+2n2M−(n+4)]−uXg(P)·uαi(P)>−2ɛ+M+1+2ɛ+M+n−4>0where the third line follows from (7), the fourth fromuXg(P)<2M+1,and the last from n > 5.For each 1 ≤ i ≤ n and a ∈ {αi, βi, γi}, the following holds: If a is allocated an item of{xi1,k1,xi2,k2,xi3,k3},then a is allocated exactly one item.This follows analogously to Step 6.None of the items inY is allocated to an agenta∈{D1,…,Dℓ,H1,…,Hn}. Assume the opposite. Take an arbitrary item xg, j∈ P(a)∩Y. Note thatua(xg,j)=2ɛanduXg(xg,j)≥2ɛ+3nfor someɛ<M−ℓ. Thus,(8)ua(P)≥2ɛ+2M−n3Consider the allocation Q′′ which results from P by handing xg, jto agent Xg. With (8),uXg(Q′′)·ua(Q′′)−uXg(P)·ua(P)≥(uXg(P)+2ɛ+3n)·(ua(P)−2ɛ)−uXg(P)·ua(P)>uXg(P)·ua(P)−2ɛuXg(P)+2ɛ+3n2M−n3−uXg(P)·ua(P)>−2ɛ+M+1+2ɛ+M+2n>0and thus a contradiction with the choice of P is implied.If at most 2n items of Y are contained in⋃a∈{X1,…,Xn}P(a),then(10)∏a∈{X1,…,Xn}ua(P)≤(2M)n3·(2M−(n+1)+2M−(n+2)+2M−(n+3))2n3holds; equality in (10) is achieved if and only if for all 1 ≤ i ≤ n, all the items{xi,1,xi,2,xi3}are allocated to the agent Xi satisfying xi∉P(Xi).Now, assume for some i, there is an a ∈ {αi, βi, γi} which is allocated none of{bi,1,bi,2}∪{xi1,k1,xi2,k2,xi3,k3}. With Step 1,ua(P)<2M−7nfollows. With Steps 6 and 7, we get(11)∏a∈{αi,βi,γi|1≤i≤n}ua(P)<(2M−7n·2M−(n+4)·2M−(n+5))·(2M−(3n+6)·2M−(n+4)·2M−(n+5))n−1Combining (9), (10), (11), ∏a ∈ A< k follows.Thus, for each i and a ∈ {αi, βi, γi}, a is allocated at least – by Steps 6 and 7, that means exactly – one of{bi,1,bi,2}∪{xi1,k1,xi2,k2,xi3,k3}. With Step 5, we can conclude that exactly one agent of {αi, βi, γi} is allocated exactly one of{xi1,k1,xi2,k2,xi3,k3},obviously yielding an utility of2M−(3n+6). Hence, we get(12)∏a∈{αi,βi,γi|1≤i≤n}ua(P)=(2M−(3n+6)·2M−(n+4)·2M−(n+5))nWith (9) and (12), the above observation implies that•For each clause Ci, exactly one of{xi1,k1,xi2,k2,xi3,k3}is allocated to one of {αi, βi, γi} (i.e., one of the variablesxi1,xi2,xi3is set “true”), andEither all or none of {xi, 1, xi, 2, xi, 3} are allocated to some agents of the setC={αj,βj,γj|1≤i,j≤n},i.e., either{xi,1,xi,2,xi,3}⊂(⋃a∈CP(a))or{xi,1,xi,2,xi,3}∩(⋃a∈CP(a))=∅holds.Therewith, the truth assignment ϕ which sets xi“true” if and only if xi∈ P(Xi) (i.e., xi, 1, xi, 2, xi, 3 are allocated to some agent {αj, βj, γj}, 1 ≤ j ≤ n), is a feasible truth assignment that sets “true” exactly one variable of each clause. Hence,Iis a “yes”-instance of Cubic Monotone 1-in-3 Sat.□Next, we show that maximizing Nash Product Social Welfare remainsNP-complete in the case of Borda scores.22Note that in classical voting theory, the Borda scores range from 0 tom−1(see, e.g., Brams & Fishburn, 2002, Chap. 4). We point out that ourNP-completeness result also holds for this classical version of Borda scores.Theorem 3.7NPSW-Borda isNP-complete.The proof proceeds again by a reduction from Cubic Monotone 1-in-3 Sat. Given an instanceI=(X˜,C˜)of Cubic Monotone 1-in-3 Sat we construct an instanceB=(R,A,π,k)of NPSW-Borda as follows. Letn=|X˜|=|C˜|,andℓ=10n10.R consists ofℓ+5n+n3items:•The item setD={d1,d2,…,dℓ}The item setH={h1,h2,…,hn3}The item setE={e1,e2,…,en}The item setsX={x1,x2,…,xn}andY={x1,1,x1,2,x1,3,x2,1,x2,2,x2,3,…,xn,1,xn,2,xn,3}A consists ofℓ+3nagents:•The agent setL={L1,L2,…,Lℓ}The agent setH={H1,H2,…,Hn}The agent setX={X1,X2,…,Xn}The agent setC={C1,C2,…,Cn}The ranking of the agents is given in Table 1, where a d in a column denotes that the next available item diis used (where the items are placed in the increasing order of their index). Note that in any case where we use this abbreviation the index of the item itself is irrelevant, since, as we will show, in an allocation of maximum Nash product social welfare all items diare allocated to agents from L. Again, we represent the clauses of instanceIin the formCi=(xi1,k1∨xi2,k2∨xi3,k3),where kj∈ {1, 2, 3} denotes the kj-th occurrence of variablexijin C, by the setCi={xi1,k1∨xi2,k2∨xi3,k3}. Thus, the items ci, 1, ci, 2 and ci, 3 of agent Cithus correspond to thexi1,k1,xi2,k2,xi3,k3(and in this way to the three variables of the clause Ciof instanceI). In particular, the items ci, 1, ci, 2 and ci, 3 of an agent Ciare elements of Y. In Table 1, we havec1,1=x1,1,c1,2=x2,1,c1,3=xn,3andc2,1=x1,2. The main features of the construction of the NPSW-Borda instanceBcan be briefly described as follows: agents Hirank all hjand the item xivery high when compared to agents from L. The agents Xirank item xiin a very high position and also the items xi, jin a high position when compared to agents from L. Finally agents Cirank item eihigh when compared to agents from L and also the three items xk, lcorresponding to variables in clause Ci(and represented by the three ci, j).Let a be an agent, l an item and S a set of items. Recall that now ua(l) denotes the Borda score of item l in the ranking of a. Again, let P be an allocation.Iis a “yes”-instance of Cubic Monotone 1-in-3 Sat if and only ifBis a “yes”-instance of NPSW-Borda, wherek*=Ml·(∏i=0n3−1(M−i))·(M−n3)2n3·(M−n3)n3·(12(M−n3−2))2n3·(54(M−9n10−2))n“⇐”We will first show that in any “yes” instanceB,there is an allocation of Nash product social welfare at least k* which satisfies:1.Ligets item di, for each 1 ≤ i ≤ ℓ.Cigets ei, for each 1 ≤ i ≤ n.Each hiis given to some Hj, and eachHj∈Hgets at most one hi.If Hjdoes not get an item of H, then it gets xj.If Hjgets an item of H, then Xjgets xj.All items from Y are allocated to agents fromX∪C.Li gets item di, for each 1 ≤ i ≤ ℓ.Note that all agents Lirank all items l ∈ (H∪E∪X) in the same way. Assume that one agent Ljdid not get an item of the set D. Let a be the agent such that dj∈ P(a). We can re-write the utility achieved by agent a asua(P)=ua(dj)+ua(Ra),where33In the following, we frequently use the notation Rain order to sum up the “rest” of items allocated to an agent a, i.e., a set of items distinguished from some dedicated items allocated to a. In what follows, it should be clear from the context which item set Rarefers to.Ra≔ (P(a)∖dj). Hence, a and Ljtogether contribute to the Nash product social welfare:ua(P)·uLj(P)=ua(hj)·uLj(I)+ua(Ra)·uLj(I)However, if we handle djover to Ljand all items I of Ljto a we get a total contribution of the two agents of:(ua(I)+ua(Ra))·M=ua(I)·M+ua(Ra)·MNote thatua(I)≥uLj(I),since a does not rank any item l ∈ {H∪E∪X} lower than Lj. In addition,uLj(I)<(5n+n3)2<Mby construction. Hence this exchange does not diminish the total contribution of a and Ljto the objective value and hence there exists an assignment such that any agent Lihas one djallocated. By the pigeonhole principle this means that each agent Ljgets exactly one di. Since Ljranks djon top position, in an allocation that maximizes Nash product social welfare clearly Ljgets item dj, 1 ≤ j ≤ ℓ.□Ci gets ei, 1 ≤ i ≤ n. Assume the opposite, i.e., there is an agent Cisuch that ei∉P(Ci).Case 1. Assume that ei∈ P(Lj): the total contribution of Ljto the Nash product achieved by P can be bounded by:uLj(P)=uLj(ei)+uLj(dj)+uLj(RLj)<M+n3In this respect,RLjdenotes the set of items allocated to Ljunder P with the exception of eiand dj. Here, n3 is a very rough bound for the sum over the profits of all items with weight smaller or equal to5n+n3. Let imindenote the item of smallest Borda score allocated to Ci. The contribution of Cican be bounded as follows:uCi(P)=uCi(imin)+uCi(RCi)<3·(M−9n10)4+n3The bound comes from taking the three items ci, jand all the items of profit at most5n+n3.Exchanging iminwith ei, however, yields a contribution of Ciand Ljto the Nash product of at least:M·(M−9n10)It remains to show thatuCi(P)·uLj(P)≤M·(M−9n10)holds:uCi(P)·uLj(P)<(3·(M−9n10)4+n3)·(M+n3)=34(M−9n10)(M+n3)+n3(M+n3)<M·(M−9n10)where the last inequality follows from the fact that14(M−9n10)M=14n10·10n10>34n10·n3+n3(n10+n3)is satisfied.Case 2. Assume that ei∈ P(Hj):uHj(P)=uHj(ei)+uHj(RHj)≤n+uHj(RHj)uCi(P)=uCi(imin)+uCi(RCi)Case 2.1 IfRHjcontains an item of Borda score larger than n, we handle eiover to Ciand get a new product contribution of Hjand Ciof at least:uHj(RHj)·(uCi(imin)+uCi(RCi)+(M−9n10))Note thatuHj(RHj)·(M−9n10)>n·(3·M−9n104+n3)≥n·(uCi(imin)+uCi(RCi))holds; i.e., handling eito Ciyields a higher Nash product.Case 2.2 IfRHjcontains items of Borda score at most n only, then exchange eiwith imax, where imaxdenotes the item of P(Ci) with highest Borda score. IfuHj(imax)<uHj(ei),thenimax∈{e2,…,en}. Thus,uHj(P)·uCi(P)<n4,while the exchange leads to a contribution of at least(M−9n10). IfuHj(imax)≥uHj(ei),then we haveuHj(P)·uCi(P)≤(uHj(RHj)+uHj(ei))·(uCi(RCi)+uCi(P)(imax))≤(uHj(RHj)+uHj(imax))·(uCi(RCi)+uCi(P)(ei))because ofuCi(P)(imax)≤uCi(P)(ei).Case 3. Assume that ei∈ P(Xj). IfuCi(imax)>n,then exchange eiwith imax. Note thatuXj(imax)>uXj(ei)anduCi(imax)<uCi(ei)hold, which clearly implies that the new contribution exceedsuXj(P)·uCi(P).Thus, we can assumeuCi(imax)≤n,i.e., imax∈ E. IfRXj≠∅,handle eiover to Ciwhich yields a new contribution of at leastuXj(RXj)·(M−9n10). Clearly,uXj(P)·uCi(P)≤(uXj(RXj)+uXj(ei))·n2≤uXj(RXj)·(M−9n10)IfRXj=∅,we handle eiover to Ciand imaxover to Xjand get a new contribution of at leastM−9n10. Obviously, this exceeds the former contribution, sinceuXj(P)·uCi(P)≤uXj(ei)·n2<n3<(M−9n10)Case 4.ei∈ P(Cj), for somei≠j. Due to Cases 1–3, we can assume that eiis allocated to one of the agents of C. Assume imax∉E. Note thatuCi(ei)>uCi(imax)anduCj(ei)<uCj(imax)hold. Thus, if we exchange eiwith imaxof Ciwe get:uCj(P)·uCi(P)=(uCj(ei)+uCj(RCj))·(uCi(imax)+uCi(RCi))<(uCj(imax)+uCj(RCj))·(uCi(ei)+uCi(RCi))If imax∈ E, we getuCj(P)·uCi(P)≤(uCj(ei)+uCj(RCj))·n2≤uCj(RCj)·(M−9n10)In the caseRCj≠∅,this proves that the new contribution is higher. IfRCj=∅we apply the same argument as in Case 3.□Each hi is given to some Hk and eachHk∈Hgets at most one hi.First, we show that each hiis given to an agent ofH. Assume the opposite, i.e., hiis given to an agenta∈(L∪X∪C). Let Hkbe an agent without any item from H (obviously, such an agent must exist). Handle the item imax∈ P(Hk) with the highest Borda score to a, and in turn handle hito Hk. Note thatuHk(imax)<uHk(hi)and ua(imax) > ua(hi), since imax∉(D∪E) by 1 and 2. Therefore, this exchange yields an allocation with a higher Nash product social welfare. Thus, hiis allocated to an agent ofH.Second, we show that eachH∈Hgets at most one hi. Assume there exists an agentHk∈Hwith at least two items from H, say hiand hj. By the pigeonhole principle, thus at least one Hlhas no item from H. If xl∉P(Hl), we haveuHl(P)<n3.Handle hjover to Hl. Thus,uHk(P)·uHl(P)<(n3+1)M·n3<(M−n3)2<uHk(hi)uHl(hj)implying that there is an allocation with a higher Nash product social welfare.If xl∈ P(Hl), we get(13)uXl(P)<12(M−n3)+n3Handing xlto Xland hjto Hl, we get a new contribution of Hk, Hland Xlto the Nash product of at least(14)((M−n3+1)+uHk(RHk))·((M−n3+1)+uHl(RHl))·((M−n3)+uXl(RXl))However, we have(15)uHk(P)·uHl(P)·uXl(P)≤(2·M+uHk(RHk))·((M−n3)+uHl(RHl))·(uXl(RXl))In order to show that the new contribution, i.e., the term in (14), exceeds the contribution under P, it is sufficient to show that (14) exceeds the right-hand term of (15). Clearly, to prove this it is enough to show that((M−n3+1)+uHk(RHk))·((M−n3)+uXl(RXl))>(2·M+uHk(RHk))·uXl(RXl)holds:((M−n3+1)+uHk(RHk))·((M−n3)+uXl(RXl))>(2M+uHk(RHk))·uXl(RXl)⇔(M−n3+1)·(M−n3)+(M−n3)uHk(RHk)>uXl(RXl)·[2M−(M−n3+1)]⇔(M−n3+1)·(M−n3)+(M−n3)uHk(RHk)>uXl(RXl)·[M+n3−1]WithuXl(RXl)<12(M−n3)+n3(stated in (13)), the last inequality follows from(M−n3+1)·(M−n3)>(12(M−n3)+n3)·[M+n3−1]⇔(M−n3)[(M−n3+1)−12(M+n3−1)]>n3[M+n3−1]⇔(M−n3)·(12M−n2+32)>n3[M+n3−1]where the last inequality is clearly satisfied by the choice of M.□If Hj does not get an item of H, then it gets xj.Assume that Hjdoes not get an item of H. In addition, assume xj∉P(Hj). Let a be the agent xjis allocated to under P. Recall thatuHj(P)≤n3holds.Case 1.a ∈ (L∪C). It is easy to verify that handling over xjto Hjimproves the total Nash product.Case 2.a=Hk∈H: If xjis allocated to some Hkand xkor some hiis also allocated to Hk, it is again easy to check that handling xjover to Hjimproves the total contribution. If Hkdoes neither have xknor any hi, thenuHk(P)≤n3holds. Hence handling xjover to Hjand any item from Hjto Hkimproves the total profit by reaching a value of at least(M−n3).Case 3.a∈X:Case 3.1. If a ≠ Xj, thenua(P)≤(5n+n3)+ua(Ra)holds. If Ra≠ ∅ we handle xjover to Hjand clearly augment the total Nash product. IfRa=∅the total contribution of a andHj<n3·(5n+n3),hence handling xjover to Hjand any other item from Hjto a improves the contribution as well.Case 3.2. Ifa=Xjwe have:(16)ua(P)·uHj(P)≤((M−n3)+ua(Ra))·n3Handling xjover to Hjgives a contribution of at least:(17)ua(Ra)·(M−n3)If Racontains at least one of the three items xj, l, then (17) is larger than the right hand side of (16), i.e., the contribution of a and Hjto the Nash product after handling xjover to is higher than before.If Radoes not contain one of these items we exchange all the items of a with all the items of Hjand get a contribution that is at least as high as before (the contribution becomes strictly higher if any xj, lwas allocated to Hj).□If Hj gets an item of H, then Xj gets xj.Assume that Hjgets some hi, but Xjdoes not get xj. Let a be the agent with xj∈ P(a). Note that(18)uXj(P)<12(M−n3)+n3holds.Case 1.a ∈ (L∪C). In this case, handling over xjto Xjclearly improves the Nash product social welfare.Case 2.a∈H. Ifa∈H∖Hj,then with (18) is it not hard to check that handling over xjto Xjimproves the Nash product social welfare:ua(P)·uXj(P)≤(M+(5n+n3)+ua(Ra))·uXj(P)<((M−n3)+ua(Ra))·((M−n3)+uXj(P))Ifa=Hjhandling xjover also improves the Nash product – this is proven by showing that(19)uHj(P)·uXj(P)<(M−n3+1)+ua(Ra))·((M−n3)+uXj(P))holds. Clearly,uHj(P)·uXj(P)<(2M+ua(Ra))·uXj(P)holds. However,(2M+ua(Ra))·uXj(P)<((M−n3+1)+ua(Ra))·((M−n3)+uXj(P))⇔2M·uXj(P)<(M−n3+1)[(M−n3)+uXj(P)]+ua(Ra)·(M−n3)⇔uXj(P)(M+n3−1)<(M−n3+1)(M−n3)+ua(Ra)·(M−n3)With (19), the last inequality follows, sinceuXj(P)(M+n3−1)<[12(M−n3)+n3](M+n3−1)<12(M2−n29)+n3M+n3<50n20+n13<100n20−203n11<(M−n3+1)(M−n3)Case 3.a∈X∖Xj. IfuXj(P)≤n3,then a hands xjto Xj, and Xjin turn hands an arbitrary item to a. This augments the Nash product, sinceua(P)·uXj(P)≤((5n+n3)+ua(Ra))·uXj(P)≤(ua(Ra)+1)·((M−n3)+uXj(P))IfuXj(P)>n3,P allocates at least one of {xj, 1, xj, 2, xj, 3} to Xj. In this case, we handle them over to a in exchange for xj.If|{xj,1,xj,2,xj,3}∩P(Xj)|=1,we getua(P)·uXj(P)<((5n+n3)+ua(Ra))·(16(M−n3)+n3)≤(n+n3+1)+ua(Ra)·(M−n3)If|{xj,1,xj,2,xj,3}∩P(Xj)|=2,we getua(P)·uXj(P)<((5n+n3)+ua(Ra))·(26(M−n3)+n3)≤(2·(n+n3+1))+ua(Ra)·(M−n3)If|{xj,1,xj,2,xj,3}∩P(Xj)|=3,we getua(P)·uXj(P)<((5n+n3)+ua(Ra))·(12(M−n3)+n3)≤(3·(n+n3+1))+ua(Ra)·(M−n3)Thus, also in the caseuXj(P)>n3,exchanging items yields an allocation with a higher Nash product.□All items from Y are allocated to agents fromX∪C.Assume that some xi, jis allocated to an agent a fromH∪L. We handle xi, jover to Xiand get:ua(P)·uXi(P)≤((4n+n3)+ua(Ra))·uXi(P)≤ua(Ra)·(uXi(P)+16(M−n3−2))The inequality holds sinceua(P)≥(M−n3)anduXi(P)≤86(M−n3)+n3.□“⇐”Recall thatBis a “yes”-instance of NPSW-Borda, with an allocation P such that the Nash product social welfare for P is greater or equal to:k*=Mℓ·(∏i=0n3−1(M−i))·(M−n3)2n3·(M−n3)n3·(12(M−n3−2))2n3·(54(M−9n10−2))nIn addition, we can assume that P satisfies the properties 1–6 and is an allocation of maximum Nash product. We will show that the corresponding instance of Cubic Monotone 1-in-3 Sat a “yes”-instance. Due to the six properties, we already know the exact contribution of agents from L andH. Hence, we know that in order to reach a total profit of k the agents fromXand C have to contribute to the Nash product a factor of at least(M−n3)n3·(12(M−n3−2))2n3·(54(M−9n10−2))nNow, we show that we can assume that P satisfies the following additional properties:7.Each item xi, lis assigned to an agent a withua(xi,l)>5n+n3.If Xigets xi, then Xidoes not get an item of {xi, 1, xi, 2, xi, 3}.If Xidoes not get xi, then Xigets all three items of {xi, 1, xi, 2, xi, 3}.Each item xi, lis allocated to an agent a withua(xi,l)>4n+n3. Assume the opposite, i.e., for some indices j, l, xj, lis allocated to an agent a withua(xj,l)≤4n+n3.Case 1. Assume that an agent Xigets such an item xj, lwithuXi(xj,l)≤4n+n3.If P(Xi) contains another item of Borda score at least16(M−n3−2),we handle xj, lover to Xj:uXj(P)·uXi(P)≤uXj(RXj)·(uXi(RXi)+(4n+n3))≤(uXj(RXj)+16(M−n3−2))·uXi(RXi)Otherwise,uXi(P)<n3and P(Xi) contains items xj, lwith j ≠ i only. Let a be the agent with xi, l∈ P(a). If a ∈ C, handling xi, lover to Xiand xj, lover to Xjyields a higher Nash product:uXj(P)·uXi(P)·ua(P)<uXj(RXj)·n3·(ua(Ra)+14(M−9n10))≤(uXj(RXj)+16(M−n3−2))·16(M−n3−2)·ua(Ra)Thus, with 6 we can assume that xi, lis allocated to an agent ofXk∈X. By construction,uXk(xi,l)≤4n+n3. Exchanging xi, lwith xj, l, we get a higher Nash product social welfare allocation:uXk(P)·uXi(P)<(uXk(RXk)+(4n+n3))·n3<(uXk(RXk)+1)·16(M−n3−2)Case 2. Assume that an agent Ck∈ C gets assigned such an item xj, lwithuCk(xj,l)≤4n+n3. We handle xj, lover to an arbitrary agent a ∈ C withua(xj,l)≥14(M−9n10−2)(note that by construction such an agent exists). In this way, we get a higher Nash product becauseuCk(P)·ua(P)≤(uCk(RCk)+(4n+n3+1))·ua(Ra)<uCk(RCk)·(ua(Ra)+14(M−9n10−2))□If Xi gets xi, then Xi does not get an item of {xi, 1, xi, 2, xi, 3}. Assume that Xigets both xiand an item xi, lfor some l ∈ {1, 2, 3}. We handle xi, lto an agent a ∈ C withua(xj,l)≥14(M−9n10−2),which again implies that an allocation with a higher Nash product exists, since we will argue that the following inequality holds:(20)ua(P)·uXi(P)≤ua(Ra)·(16(M−n3)+uXi(RXi))≤(14(M−9n10−2)+ua(Ra))·uXi(RXi)Note that (20) holds ifua(Ra)·16(M−n3)≤14(M−9n10−2)·uXi(RXi). The latter inequality, however, is clearly satisfied sinceuXi(RXi)≥(M−n3)andua(Ra)<32(M−9n10−2)hold.□If Xi does not get xi, then Xi gets all three items of {xi, 1, xi, 2, xi, 3}.Assume that Xidoes not get xi. In addition, assume that Xidoes not have all items of {xi, 1, xi, 2, xi, 3}. With 6 and 7, it follows that there is an agent Ck∈ C who has at least one such item xi, l. Again from 7 we can conclude thatuCk(xi,l)≥14(M−9n10)−2holds. We handle it over to Xiand have to distinguish a few cases:Case 1.Xihas none of the items {xi, 1, xi, 2, xi, 3}. It follows that Xihas no items at all, and thus∏a∈Aua(P)=0holds, in contradiction with ∏a ∈ Aua(P) ≥ k*.Case 2.Xihas one of the items xi, jand Ckhas only its item from E and xi, l:uCk(P)·uXi(P)≤54(M−9n10)·16(M−n3)≤(M−9n10)·26(M−n3−3)Case 3.Xihas one of the items xi, jand Ckhas its item from E, xi, land exactly one item c ∈ {ck, 1, ck, 2, ck, 3},c≠xi,l:uCk(P)·uXi(P)≤64(M−9n10)·16(M−n3)≤54(M−9n10)·26(M−n3−32)Case 4.Xihas one of the items xi, jand Ckhas its item from E, xi, land exactly two of the items {ck, 1, ck, 2, ck, 3}∖{xi, l}:uCk(P)·uXi(P)≤74(M−9n10)·16(M−n3)≤64(M−9n10)·26(M−n3−3)Case 5.Xihas two of the items xi, jand Ckhas only its item from E and xi, l:uCk(P)·uXi(P)≤54(M−9n10)·26(M−n3)≤(M−9n10)·12(M−n3−3)Case 6.Xihas two of the items xi, jand Ckhas its item from E, xi, land exactly one item of {ck, 1, ck, 2, ck, 3}∖{xi, l}:uCk(P)·uXi(P)≤64(M−9n10)·26(M−n3)≤54(M−9n10)·12(M−n3−3)Case 7.Xihas two of the items xi, jand Ckhas its item from E, xi, land exactly two items of {ck, 1, ck, 2, ck, 3}∖{xi, l}:uCk(P)·uXi(P)≤74(M−9n10)·26(M−n3)≤64(M−9n10)·12(M−n3−3)□But now we also know the exact contribution of the agent setXto the Nash product. By the pigeonhole principle, we know that exactly n of the items of Y are still available for agents from C. The agents of C have to contribute a factor of at least(54(M−9n10−2))nin order to enable that ∏a ∈ Aua(P) ≥ k* holds. But this means that every agent Ci∈ C has to get exactly one of the items {ci, 1, ci, 2, ci, 3}, since otherwise the required profit cannot be contributed.“⇒” This direction is straightforward.□

@&#CONCLUSIONS@&#
