@&#MAIN-TITLE@&#
Programming with event loops and control loops – From actors to agents

@&#HIGHLIGHTS@&#
The event loop architecture has a strong impact on actor programming.Main weaknesses concern asynchronous spaghetti and fragmentation.Control loops adopted in agent programming can be framed as an extension.It leads to a more procedural structure of programs yet preserving reactivity.It allows us to improve modularity, encapsulation and abstraction.

@&#KEYPHRASES@&#
Event loops,Control loops,Concurrent programming,Actors,Agents,Agent-oriented programming,

@&#ABSTRACT@&#
Event loops are a main control architecture to implement actors. In this paper we first analyse the impact that this choice has on the design of actor-based concurrent programs. Then, we discuss control loops as the main architecture adopted to implement agents, and we frame them as an extension of event loops effective to improve the programming of autonomous components that need to integrate both reactive and proactive behaviors, in a modular way.

@&#INTRODUCTION@&#
Event loops are a control architecture pervasively adopted to govern the behavior of applications, in particular in those context where reactivity is an important aspect. Modern examples include Rich Internet Applications, based on HTM5 and JavaScript, and mobile applications, based on e.g., the Android platform. In this architecture, the control flow of an application is logically organized as an infinite loop waiting for events on an event queue. As soon as one event is available, it is fetched and a corresponding event handler is executed, if available. When the event handler execution is terminated, the control flow goes back waiting for the next event.In the case of actors[4,5,27], the event loop architecture is brought down to the computational model of the basic first-class abstractions adopted to design the active part of programs, so that a system or application is organized in terms of a possibly large number of active entities whose execution is loop-based. This has a deep impact on programming. In the literature, the properties of the computational model of actors based on event loops have been already largely discussed (e.g., in [42]). What is missing instead is an analysis and discussion about the impact on the programming principles and discipline used to design computational entities encapsulating control and featuring degrees of reactivity and proactivity. This need is particularly relevant as soon as we consider the programming of complex actors, whose behavior could be articulated. In that case, clear principles and mechanisms are important to foster well-known properties such as modularity, encapsulation, extensibility, abstraction. Accordingly, a first contribution of this work is an analysis of this aspect, providing a first formalization of the behavior of actors based on event loops and considering programming examples based on reference technologies (Section 3).Furthermore, to overcome the problems of event loops, we introduce and discuss control loops, typically adopted to define the execution cycle of agents in agent-oriented programming languages [56,11]. Besides agent-oriented programming, control loops have been adopted in different contexts in computer science. A main example is Autonomic Computing [38], where coarse-grained control loops – referred as MAPE (Monitor, Analyze, Plan, Execute) – are used to define the behavior of autonomic entities. More generally, control loops are used to define the execution cycle of computing systems – being them full applications or individual components – that must be autonomous, from a control point of view, and, at the same time, must be capable to react to changes in their surrounding environment, and act accordingly, given some design objective. In this paper then we develop an analysis and discussion of the value of control loops from a programming point of view, when adopted as control architecture to define the behavior of the first-class abstractions in concurrent programming (Section 4).

@&#CONCLUSIONS@&#
