@&#MAIN-TITLE@&#
Analytical evaluation of a time- and energy-efficient security protocol for IP-enabled sensors

@&#HIGHLIGHTS@&#
There is a lack of end-to-end security mechanisms tailored to IP-enabled sensors.Ladon is proposed as end-to-end authentication and authorization protocol.We evaluate the time and energy cost of executing Ladon on the protected sensors.Ladon is proved to be a suitable security protocol for resource-deprived devices.

@&#KEYPHRASES@&#


@&#ABSTRACT@&#
With the development of the 6LoWPAN standard, sensors can be natively integrated into the IP world, becoming tiny information providers that are directly addressable by any Internet-connected party. To protect the information gathered by sensors from any potential attacker on the Internet, it is essential to have trustworthy real-time information about the legitimacy of every attempt to interact with a sensor. Our approach to address this issue is Ladon, a new security protocol specifically tailored to the characteristics of low capacity devices. In this paper, we study the performance of Ladon, showing that it successfully meets the requirements of the targeted environments. To that end, we evaluate the delay and energy consumption of the execution of Ladon. The obtained results show that the cost of Ladon is bounded, even in situations of high packet loss rates (20–80%) and comparable to that of other protocols that implement fewer security features.

@&#INTRODUCTION@&#
Currently, the native integration of severely resource-deprived devices, such as sensors, in the IP world is already a reality. A key enabler of such environments is the 6LoWPAN approach [1], which aims to define how IP-based communications can be efficiently carried over IEEE 802.15.4 links. The fact that sensors become globally addressable in the Internet opens the door to the development and deployment of countless new applications, such as remote monitoring of patients [2] implanted with health sensors, in which any IP entity can establish an end-to-end communication with a sensor.One of the most important hurdles to the widespread implementation of sensor-based applications is the protection of the information they manage. This issue entails the necessity of implementing security mechanisms that provide authentication and authorization of remote peers, as well as the necessity of ensuring the integrity and confidentiality of the transmitted information. This is complicated by the fact that typical sensors present severe constraints regarding processing power, storage and energy.With the goal of providing resource-deprived devices with a suitable security protocol, we have developed Ladon [3], a novel security protocol that implements end-to-end authentication, authorization and key establishment functionalities at the application level. Taking into account the severe limitations of the environments for which Ladon has been designed, it is essential to prove its suitability. In this paper, we seek to carry out this proof with a detailed study regarding the impact of the execution of the Ladon protocol, based on an analytical model. Specifically, we evaluate two crucial performance parameters: the delay introduced by Ladon in establishing a secure connection and the energy consumed by the protected sensor as a result of implementing the security protocol. The obtained results show that the overhead introduced by the protocol is suitable for the targeted environments.The rest of the paper is organized as follows. Section 2 provides a review on related work, while Section 3 provides information on preliminary concepts. Then, in Section 4 we describe the Ladon protocol and in Section 5, we present its performance evaluation. Finally, in Section 6, we highlight the most remarkable conclusions of our work.The implementation of security mechanisms in sensor environments is a very active research area. Among the proposed approaches, there are initiatives aimed at the efficient implementation of cryptographic operations [4–7] and approaches focused on the efficient distribution of cryptographic keys [8–10]. Due to the severe limitations of the targeted environments, the developed protocols are each aimed at solving a specific issue. Therefore, they are very tightly linked to the characteristics of sensor networks and are not extensible to scenarios where access requests are originated outside such networks.Regarding traditional security mechanisms, public key infrastructures are unsuitable for sensors, mainly due to the high resource consumption that they entail. With respect to mechanisms that solely make use of symmetric key cryptography, the Kerberos [11] protocol presents an interesting approach, mainly due to its centralized user account management. However, Kerberos does not address all of the security requirements presented by IP-enabled sensors, basically due to two reasons. First, Kerberos requires time synchronization, which implies the necessity of additional communication to periodically query time servers and which can render the protocol vulnerable to some security attacks. Second, Kerberos lacks authorization functionalities, which are essential in the considered scenarios.For all of these reasons, the Ladon protocol [3] has been developed, based on the Kerberos architecture but tailored to the specific characteristics of resource-deprived devices. To the best of our knowledge, Ladon is the first protocol specifically designed to protect the data collected by sensors from illegitimate access originated by any entity connected to the Internet.Because Ladon is a protocol based on Kerberos, it is worth reminding some of the basic terminology and features of Kerberos. Each client or service is referred to as a principal in Kerberos, and each principal owns a secret key shared with the Kerberos Key Distribution Centre (KDC). The operation of Kerberos is based on the use of tickets, a capability distributed by the KDC that contains a proof of the identity of the principal that requested it.Therefore, each client that wants to authenticate to a server needs a ticket issued by the Kerberos KDC for that service. To that aim, the client first authenticates against the Kerberos Authentication Server (AS) and obtains a long-term ticket known as a Ticket Granting Ticket (TGT). This ticket allows the client to securely communicate with the Kerberos Ticket Granting Server (TGS), which is in charge of issuing the actual Service Tickets. To avoid replay attacks, Kerberos includes timestamps in tickets and messages, requiring permanent clock synchronization among the interacting entities.Ladon requires including two new information stores in the KDC: an Active Connections Information Base, to assess the freshness of tickets and messages, and an Authorization Information Base, to store authorization policies. Table 1provides a concise comparison between Kerberos and Ladon.This section provides a brief review of Ladon. Fig. 1depicts the protocol operation and Table 2details the contents of the exchanged messages. As shown in Fig. 1, Ladon entails three different phases: the authentication phase, the authorization phase and the service access phase, which are briefly described next. Readers desiring a more detailed description of Ladon are referred to [3], where a security validation of the protocol is also included.The main goal of Ladon is to provide end-to-end authentication and authorization. However, several requirements specific to the characteristics of the targeted environments must also be addressed: energy efficiency, to maximize battery life; independence of clock synchronization, to avoid periodically querying time servers; support for multi-level access policies, to allow the enforcement of different access levels; resistance to message losses, to face protocol message losses; and centralized management of users and permissions, to allow the creation and enforcement of dynamic access policies without having to load them individually in each protected sensor.In the authentication phase, the client principal obtains a TGT that allows him to prove his identity to the Ladon TGS in order to obtain as many Service Tickets as he may need during the validity period of the TGT. To that aim, the client sends a LDN_AS_REQ message specifying his own identity (IDC), and the Authentication Server responds with a LDN_AS_REP message conveying a new TGT and a new nonce value (NonceC,TGS), which is also stored in the Active Connections Information Base along with the client’s identity. Associated with this entry, a lifetime is established with initial value Lifetime1. After this lifetime expires, the entry is deleted, and thus the ticket containing the deleted nonce value is no longer valid. In this way, the possibility of old tickets being used as valid credentials is avoided.In the authorization phase, the client principal asks the TGS for a Service Ticket by means of a LDN_TGS_REQ message including the TGT obtained from the LDN_AS_REP message (TicketTGS). However, the TGT by itself is insufficient to authenticate a client, since TGTs can be resent. Therefore, an authenticator is used to prevent invalid replay of tickets.After validating the received LDN_TGS_REQ message, the TGS verifies if the requesting client principal is authorized to access the desired service by querying the Authorization Information Base. This point constitutes an important difference with respect to Kerberos, where Service Tickets are provided to all authenticated principals. Next, the TGS sends a LDN_AP_IND message to the targeted service principal running on a sensor, specifying all of the information it will need afterwards to validate the LDN_AP_REQ request message. The service principal stores this information for a time Lifetime2, and if the expected request from the client principal is not received before this time elapses, the service principal deletes the corresponding information in order to avoid overflowing the small storage capacity of the sensor.An important aspect of Ladon is how LDN_AP_IND messages are authenticated. To this end, a mechanism based on one-way key functions is used. Each time the TGS sends a LDN_AP_IND message to a given service principal (S), it embeds a new value of a previously generated one-way key chain. The service principal, owning a value of the key chainKS,TGSi-1, cannot calculate the next valueKS,TGSi, due to the characteristics of one-way functions. However, it can authenticate the received LDN_AP_IND message by checking thatFKS,TGSi=KS,TGSi-1. To provide each service principal with the first value of the key chain, the LDN_AP_IND_REQ/_REP exchange is used.Lastly, the TGS responds to the client with a LDN_TGS_REP message including the requested Service Ticket (TicketS).In the service access phase, the client principal requests access to the data provided by the sensor through a LDN_AP_REQ message. This message includes the previously obtained Service Ticket, which identifies the client as an authenticated and authorized party. The service principal validates the LDN_AP_REQ message using the information provided by the TGS in the LDN_AP_IND message. After a positive validation, the service principal responds to the client with a LDN_AP_REP message either accepting the key proposed in the request message (subkey) or proposing a new one. This key can be used afterwards to derive further encryption and integrity keys.As wireless links are prone to packet losses, it is essential to implement efficient recovery mechanisms. For the exchanges started by the LDN_AS_REQ, LDN_TGS_REQ, LDN_AP_REQ and LDN_AP_IND_REQ request messages, the designed recovery mechanisms consist in retransmitting the given request if the expected response does not arrive within a predefined time frame.However, this mechanism is not valid for LDN_AP_IND messages, because they lack an associated response. The mechanism used in this case relies on the properties of one-way functions and is more efficient than any procedure involving message retransmissions. The service principal successively applies the one-way function to the receivedKS,TGSjvalue, and if any of the obtained results coincide with its stored value, the server accepts the message and stores the receivedKS,TGSjvalue. However, if after the maximum number of attempts to compute the one-way function, the service principal is still unable to validate the receivedKS,TGSjvalue, a more expensive mechanism must be used, consisting of the LDN_AP_IND_REQ/_REP exchange.In this section, we detail the performance evaluation of our protocol, demonstrating its applicability to the targeted sensor devices. To this end, we evaluate the delay introduced by the protocol for the establishment of a secure connection and the energy consumed by the sensor during this process.For our study, we consider a beacon-enabled cluster-tree structure of the IEEE 802.15.4 network. In the envisioned topology, there is a PAN coordinator with three sub-coordinators, and each sub-coordinator has three child coordinators. Each cluster consists of 6 sensor devices with a service principal running in each sensor. Therefore, a total of 54 service principals exist in the network, with a 3-hop depth from the PAN coordinator to any of the service principals. Fig. 2represents a single branch of the considered IEEE 802.15.4 network. The other two identical branches have been omitted.For the sake of simplicity, we omit the authentication phase, because it is only performed once during the validity lifetime of the TGT and does not involve any resource-deprived device. Additionally, for the computation of end-to-end transmission delays only the delays introduced by the IEEE 802.15.4 network have been considered, as the delay introduced by the Internet connection is commonly orders of magnitude smaller.Fig. 3shows the different time intervals that affect the establishment of a secure connection. As can be seen in the figure, each message entails a generation time (SXi), a transmission time (tni), a queue waiting time in the destination entity (WXi) and a processing time (SXi). Therefore, the delay to establish a secure session can be represented in the following way:(1)DSS=(R1+1)(E[WC1]+SC1+tn1+E[WTGS1]+STGS1+STGS2+WTGS2+STGS3+tn3+E[WC2]+SC2)+(R2+1)(SC3+tn4+E[WS2]+SS2+SS3+tn5+E[WC3]+SC4)+1L+L-1LPLQ(R3+1)(SS4+tn6+E[WTGS3]+STGS4+STGS5+tn7+E[WS3]+SS5)where E[WX] denotes the expectation of the WXqueue waiting time, PLrepresents the packet loss probability in the IEEE 802.15.4 network, L denotes the length of the one-way key chain and Q denotes the maximum number of attempts to successively execute the one-way function. Additionally, R1, R2 and R3 represent the expected number of LDN_TGS_REQ, LDN_AP_REQ and LDN_AP_IND_REQ retransmission attempts, respectively. These values are calculated in the Appendix. From Eq. (A.1), we conclude that R1≃0. That is, LDN_TGS_REQ messages are not retransmitted.In the considered context, it is reasonable to assume that all of the messages received by the client principal spend the same average time waiting to be served (E[WC]). The same happens in the service principal (E[WS]). However, in the case of the TGS, WTGS2 takes a fixed value different from E[WTGS1] and E[WTGS3], because WTGS2 is a fixed guard interval used to ensure that the LDN_AP_REQ message does not arrive at the service principal until the corresponding LDN_AP_IND has been received and processed.Therefore, to calculate WTGS2, we consider the worst case scenario, in which the LDN_AP_IND message arrives at the service principal after the last allowed retransmission attempt (K) and cannot be implicitly authenticated after Q executions of the one-way function, and the LDN_AP_IND_REQ is retransmitted for the maximum allowed attempts (M).(2)WTGS2⩾tn2+E[WS]+K(E[WTGS]+STGS2+tn2+E[WS])+SS1|Qattempts+(M+1)(E[WS]+SS4+tn6+E[WTGS]+STGS4+STGS5+tn7+E[WS]+SS5)-E[WS]-STGS3-tn3-E[WC]-SC2-SC3-tn4-E[WS]To calculate the service times corresponding to the processing or generation of messages, we consider constant rates for the execution of cryptographic operations in each entity. We therefore calculate the SXiparameters of Eq. (1) as:(3)SXi=|CRYP(Message)|TCRYPXwhere ∣CRYP(Message)∣ denotes the length of the fields to be cryptographically processed and TCRYPXdenotes the cryptographic operations execution rate of entity X. Table 3summarises the lengths of Ladon protocol messages, along with the number of bytes that are subject to cryptographic operations in each entity. These figures have been computed assuming 16-byte cryptographic keys, 8-byte nonces and 2-byte identity fields.To compute the transmission times (tnivalues in Eq. (1)), we consider the delays introduced by the three wireless hops of the IEEE 802.15.4 network, including a backoff time (DBOT) and a data transmission time (DTx):(4)tni=∑l=13DBOTl+DTxlTo calculate the backoff time, we follow the model proposed in [12]. We first calculate the probability (q) that a transmission of a given type of Ladon message is detected by Clear Channel Assessment (CCA) during the Contention Access Period (CAP) as a function of the message length, the CAP length (tCAP) and the data rate of the wireless link (R). We then calculate the average amount of data transmitted during CAP (d) for each coordinator. As an example, Eqs. (5) and (6) represent the q and d values corresponding to the LDN_AP_IND messages routed by the PAN coordinator (C0):(5)qAP_IND=|LDN_AP_IND|tCAPR(6)dAP_INDC0=λ0NSNCE[LDN_AP_IND]tCAPHere ∣LDN_AP_IND∣ denotes the length of the LDN_AP_IND message and E[LDN_AP_IND] as calculated in Eq. (A.2). Additionally, NCand NSrepresent the number of clients and servers in the network, respectively, and λ0 denotes the average rate at which each client generates access requests to each server. Therefore, the probability of detecting a clear channel by CCA (pc) is independently calculated for each coordinator:(7)pcC0=(1-qAP_IND)dAP_INDC0(1-h)×(1-qAP_IND_REQ)dAP_IND_REQC0(1-h)×(1-qAP_IND_REP)dAP_IND_REPC0(1-h)×(1-qAP_REQ)dAP_REQC0(1-h)×(1-qAP_REP)dAP_REPC0(1-h)where h represents the probability that two randomly deployed nodes in the coverage range of a given coordinator have a hidden node relationship.If the CCA is unsuccessful, the backoff algorithm is repeated up to a maximum of b attempts. The probability of a successful CCA (s) and the average number of backoff attempts (r) are calculated in the following way:(8)sC0=∑a=1bpcC01-pcC0(a-1)(9)rC0=(1-sC0)b+∑a=1bapcC01-pcC0(a-1)Then, the total backoff time in each coordinator is calculated as follows:(10)tBOTC0=32rC0(tIR+tCCA)+∑a=0rC0-1tBO(min(macMinBE+a,aMaxBE))where tIRis the idle to receive transition time, tCCAis the CCA analysis time and tBO(BE) is given by Eq. (11), where tBOPis the backoff length.(11)tBO(BE)=2BE-12tBOPLastly, the actual transmission time of each message is calculated considering a constant transmission rate for the IEEE 802.15.4 wireless link (R).We model the three entities (client and service principals and TGS) as M/G/1 queues, because they process variable length messages and thus the service times can be represented with a general distribution. As before, we consider NCclients generating requests according to a Poisson distribution with mean rate λ0 to the each of the NSservers in the network. The mean arrival rates of jobs (λ) to each entity are expressed as:(12)λC=3NSλ0+(R2+1)NSλ0(13)λTGS=NSNCλ02+(L-1)L+1L(R4+1)+1L(1-PL)(R3+1)+(L-1)LPLQ(1-PL)(R3+1)(14)λS=NCλ0(L-1)L+1L(R4+1)(1-PL)+(1-PL)(R2+1)+1L+(L-1)LPLQ[(R3+1)+1]Similarly, for each entity we calculate the average service time(X‾)as follows:(15)XC‾=SC1+SC2+SC3+SC4(R2+1)3+(R2+1)(16)XTGS‾=STGS1+STGS2L-1L+1L(R4+1)+STGS32+L-1L+1L(R4+1)+1L+L-1LPLQ(1-PL)(R3+1)+STGS41L+L-1LPLQ(1-PL)(R3+1)2+L-1L+1L(R4+1)+1L+L-1LPLQ(1-PL)(R3+1)(17)XS‾=E[SS1]L-1L+1L(R4+1)(1-PL)+(SS2+SS3)(1-PL)(R2+1)L-1L+1L(R4+1)+(R2+1)(1-PL)+1L+L-1LPLQ[(R3+1)+1]+SS41L+L-1LPLQ(R3+1)+SS51L+L-1LPLQL-1L+1L(R4+1)+(R2+1)(1-PL)+1L+L-1LPLQ[(R3+1)+1]Lastly, the average waiting time in queue for each entity (X) is the following:(18)E[WX]=λXXX2‾2(1-ρX)whereρX=λXXX‾denotes the server utilization.To evaluate the energy consumed by a sensor to establish a secure connection, we take into account the energy consumed by transmission and reception of bits over the air, as well as by the execution of cryptographic operations. Fig. 4represents the Ladon message exchanges, indicating the operations that imply energy consumption in the protected sensor. Therefore, the total amount of energy consumed for establishing a secure session is the following:(19)εSS=L-1L+1LE[LDN_AP_IND](1-PL)RS1+L-1L+1LE[LDN_AP_IND](1-PL)SS1+E[Hash]+1L+L-1LPLQ[E[LDN_AP_IND_REQ](SS4+TS2)+RS3+SS5]+E[LDN_AP_REQ](1-PL)(RS2+SS2+SS3+TS1)(20)E[Hash]=L-1L1-PLQ(1-PLQ)-QPLQ(1-PL)(1-PL)H+1L+L-1LPLQQHbeing H the energy consumed by one execution of the one-way function.To calculate the average energy consumed due to the transmission and reception of bits, we take into account the length of Ladon messages as gathered in Table 3, a constant transmission rate (R) and independent instantaneous power consumptions for the reception (PRX) and transmission (PTX) operations. In the case of the transmission operations, we also consider the energy consumed during the backoff process, which is calculated as in [12].Similarly, to calculate the energy consumed during cryptographic processing, we assume constant bit rates and consider constant instantaneous power consumption (PC) during the execution of such operations.

@&#CONCLUSIONS@&#
We have presented the security needs that must be addressed before sensors can be securely integrated into the IP world. As a suitable alternative to address these needs, we propose Ladon, a protocol based on Kerberos but specifically tailored to the requirements of sensor environments. We have evaluated the time and energy overhead introduced by Ladon when establishing a secure connection. The obtained results demonstrate that the protocol is well tailored to the requirements of the targeted resource-deprived environments in real network situations, i.e., in situations where the packet losses in the network are frequent.We lastly have compared the performance of Ladon with that of protocols that implement even more limited characteristics (they lack authorization mechanisms), such as Kerberos and a protocol based on SPINS. Although Ladon introduces a longer delay than the other two protocols, the difference is negligible for the application context considered for our protocol. Regarding energy consumption, the obtained results show that it is comparable for the three evaluated protocols, and in cases of high packet loss probability, the amount of energy consumed by Ladon is lower than the energy consumed by the protocol based on SPINS. This fact proves that Ladon deals more efficiently with packet losses in the network.In conclusion, we have demonstrated that Ladon is a time- and energy-efficient solution and is thus feasible for addressing security in targeted resource-deprived environments.Fig. Adepicts the state transition models of the participating entities, where PLdenotes the packet loss probability in the IEEE 802.15.4 network, Y, W, V, K and M denote the maximum allowed number of retransmissions for LDN_AS_REQ, LDN_TGS_REQ, LDN_AP_REQ, LDN_AP_IND and LDN_AP_IND_REQ messages, respectively, and L represents the length of the one-way key chain. We next calculate the average number of transmission attempts of each request message assuming that each occurrence of loss of a given type of message is random and mutually independent.(A.1)E[LDN_TGS_REQ]=R1+1=∑k=1W+1kP(I=k)=∑k=1Wk1-[1-(1-PL)2]K+1L[1-(1-PL)2]K+1Lk-1+(W+1)1-∑k=1W1-[1-(1-PL)2]K+1L[1-(1-PL)2]K+1Lk-1(A.2)E[LDN_AP_IND]=∑k=1K+1kP(I=k)=∑k=1Kk(1-PL)2[1-(1-PL)2]k-1+(K+1)1-∑k=1K(1-PL)2[1-(1-PL)2]k-1(A.3)E[LDN_AP_IND_REQ]=R3+1=∑k=1M+1kP(I=k)=∑k=1Mk(1-PL)2[1-(1-PL)2]k-1+(M+1)1-∑k=1M(1-PL)2[1-(1-PL)2]k-1(A.4)E[LDN_AP_REQ]=R2+1=∑k=1V+1kP(I=k)=(1-PL)3R∑k=1Vk[1-(1-PL)3R]k-1+(V+1)1-(1-PL)3R∑k=1V[1-(1-PL)3R]k-1being,R=1-[1-(1-PL)2]M+11L+(L-1)LPLQ