@&#MAIN-TITLE@&#
A combinatorial optimization algorithm for multiple cloud service composition

@&#HIGHLIGHTS@&#
The COM2 algorithm efficiently considers multiple clouds while composing services.The proposed algorithm successfully competes with previous algorithms.Low examined service number is achieved without impacting the combined cloud number.

@&#KEYPHRASES@&#
Combinational optimization,Web services,Service composition,Cloud computing,Multiple clouds,Cross-clouds,

@&#ABSTRACT@&#
Service composition is an evolving approach that increases the number of applications of cloud computing by reusing existing services. However, the available methods focus on generating composite services from a single cloud, which limits the benefits that are derived from other clouds. This paper proposes a novel COMbinatorial optimization algorithm for cloud service COMposition (COM2) that can efficiently utilize multiple clouds. The proposed algorithm ensures that the cloud with the maximum number of services will always be selected before other clouds, which increases the possibility of fulfilling service requests with minimal overhead. The experimental results demonstrate that the COM2 successfully competes with previous multiple cloud service composition algorithms by examining a small number of services—which directly relates to execution time—without compromising the number of combined clouds.

@&#INTRODUCTION@&#
Cloud computing is an elastic service provisioning model that enables on-demand network access to a shared pool of computing resources. The popularity of cloud computing has increased in recent years. Currently, cloud computing provides a single set of physical resources for providing multiple information technology (IT) services to a large user base with varying needs [1]. Cloud services are offered as self-contained components that provide IT solutions for consumer requirements via the Internet [2]; they are typically delivered by a Web service interface. Although cloud services are used interchangeably with Web services, these services differ primarily with respect to their service level agreement (SLA) identification, quality of service (QoS) and service discovery [3].In many cases, a user’s needs require multiple cloud services to be provided, which is the main driver for the concept of service composition. This concept focuses on the creation of a new value-added cloud service that incorporates previously existing cloud services [4].The service composition problem is an NP-hard optimization problem [5,6]. Thus far, several service composition approaches have emerged to provide guidance for this problem by combining services to create higher-level business processes at a reduced time and cost with increased efficiency [7]. For instance, an optimal service composition algorithm was introduced based on the QoS of the candidate cloud services [8]. An additional criterion that accounts for the relationships among the different cloud services was added, which improves the quality of the composite services [9]. EFlow was presented [10] as a platform for service composition. The general idea behind this method is that software agents can be utilized by Web services to perform automatic Web service discovery, execution and composition. A semantic Web technique was proposed [11] to generate composite services from a high-level declarative description. This strategy uses the syntactic and semantic properties of the services to determine whether two services are composable. More than ten service composition methods have been reviewed and analyzed in [6]; however, a common assumption among these techniques was that all the services that are required for the composition are contained within a single cloud. This approach is simply unrealistic; many business processes require services from different providers and thus from multiple clouds [12].Multiple cloud service composition is an emerging topic that has attracted much recent attention. Multiple clouds, multi-clouds and cloud federations are newly coined terms in cloud computing that have begun to attract attention. These synonymous terms refer to cloud services that are utilized through several cloud providers [13,14]. There are four approaches to implementing multiple clouds.•Horizontal multiple clouds. In this approach, multiple providers create a federated cloud by cooperating on an agreed upon price scheme.Inter-clouds. In this approach, clouds are organized into groups based on common criteria, such as addressing, naming, identity, trust and time domains [15].Cross-clouds. In this approach, multiple cloud providers create a federation in which they offer/consume resources through a series of steps, service discovery, match making and authentication [16].Sky computing. In this approach, multiple cloud providers offer multiple services, such as resources, applications and platforms. This architecture enables new value-added services through the composition of existing services with dynamic support to real-time demands. The key feature of sky computing is the transparency of a multiple-cloud environment. Specifically, this architecture provides an image of a single cloud with a seemingly infinite pool of accessible resources [17].Thus, leading cloud service providers, such as Microsoft, have begun to develop architectures and investigate the challenges associated with multiple cloud services [12]. In an attempt to overcome these challenges, an agent-based approach to composing services in multi-cloud environments has been proposed [18]. Although empirical results have shown that this work might successfully compose services to satisfy service requirements in multiple-cloud environments, the multiagent distributed solutions are always associated with processing and communication overhead costs that limit their benefits [19]. In contrast to this distributed approach, three multiple-cloud service composition algorithms with a centralized control were proposed [2]. The first algorithm, which is referred to as the All Clouds Combination Algorithm, considers all clouds as inputs for the composition and enumerates all possible solutions. This method locates a service composition sequence in an execution time that is relatively short; however, it does not minimize the number of clouds in the final service composition sequence. The second algorithm, which is referred to as the Base Cloud Combination Algorithm, recursively enumerates all cloud combination possibilities until a composition solution is identified in a cloud combination. This method generates an optimal cloud combination with a small number of clouds; however, it requires substantial execution time. The third algorithm, which is referred to as the Smart Cloud Combination Algorithm, is designed to find a near-optimal cloud combination based on an approximation algorithm. This method identifies a sub-optimal cloud combination after searching for a service composition sequence at a reduced cost while utilizing a cloud-reduced set. This algorithm provides a near-optimal cloud combination but remains time consuming.Based on the above survey, there are always tradeoffs between the execution time and the number of clouds in the last service composition sequence when multiple clouds are considered. In this case, the service composition obstacle is considered to be a combinatorial optimization problem of finding a suitable combination with a short execution time and with a minimal number of clouds. Minimizing the number of clouds is critical because services that are distributed in different clouds substantially increase communication costs and financial charges [2]. This paper proposes a novel COMbinatorial optimization algorithm for cloud service COMposition (COM2) that can efficiently compose services with small numbers of examined services and combined clouds. The proposed algorithm ensures that the cloud with the maximum number of services will be selected before clouds with fewer services are selected, which increases the possibility of fulfilling service requests with minimal overhead costs. When evaluating the COM2 using an experimental framework based on the default Web service test set provided in the OWL-S XPlan package [20], the results showed that the COM2 challenges the available multiple cloud service composition algorithms by achieving a superior tradeoff between the number of combined clouds and the number of examined services.The remainder of this paper is organized as follows: Section 2 illustrates the system design, giving an example of how it works, while Section 3 describes the implementation and evaluation processes. The experimental results and discussion are presented in Sections 4 and 5, respectively. The paper is concluded in Section 6 by highlighting future research directions.Most research has focused on service composition in a single cloud and limits the benefits received from other clouds that might have more suitable services [12]. This paper utilizes combinatorial optimization concepts to develop a novel method for service composition that employs multiple clouds, has a short execution time and requires a minimal number of clouds.To solve the cloud service composition problem, a framework was developed and is illustrated in Fig. 1. This framework has four main components.•A multiple-cloud environment (MCE) is a set of clouds for which MCE={C1, C2,…,Cc}. Each cloud contains a set of service files—F={F1, F2,…,Ff}—and each service file contains a set of services—S={S1, S2,…,Ss}. This structure is similar to the structure described in [2,20].The user interface accepts a user’s request and displays the service composition sequence.The cloud combiner selects the appropriate cloud set (the set that has the most suitable services to fulfill the user’s requests) and generates a cloud combination list based on the set.The service composer receives the resulting cloud combination list from the cloud combiner and determines which services in each cloud set can best fulfill the user’s request. Based on the selection, the service composer produces the service composition sequence.The user sends a request through the interface to the cloud combiner, which selects the appropriate cloud combination from the MCE based on the algorithm’s suggestion and returns it to the composer, as detailed below. The composer determines if the service sequence matches the user’s request, generates the final composition sequence and sends it to the user. The complete COM2 algorithm is illustrated in Algorithm 1.After the initializations shown in lines 5–7, the algorithm accepts the user’s request for a composite service in line 8 and generates a suggestion by selecting the first cloud that contains the largest number of services, as shown by line 9. For simplicity, we assumed that the clouds are sorted in descending order based on the number of service files. This sorting helps to rapidly identify the cloud with the greater number of service files. However, clouds rarely appear in such a sorted manner in real-life applications. Subsequently, the algorithm determines if any of the cloud files listed first can fulfill the user’s request, as demonstrated by lines 16–18. If no cloud files are identified, the next cloud is checked until an appropriate cloud is obtained; otherwise, the algorithm will terminate when the last cloud is reached, as shown in lines 19–24. Once an appropriate cloud is located, it is added to Combiner List B, and its service files are added to Composer List P, as demonstrated by lines 14–15. If the user request is not satisfied, the next cloud that contains new services and that can fulfill the user’s request is selected. To ensure that the selected cloud contains services that are not previously included in the Composer List, the algorithm subtracts the content of the Composer List from the new services in the selected cloud (Cn∩R), as shown in lines 10–11. If new services are unavailable, the selected cloud is disregarded in line 12, and the next cloud on the list is considered. The entire process is repeated until the user’s request is fulfilled; the Combiner List is subsequently sent to the composer.To facilitate a better understanding of the COM2, suppose that an MCE contains four clouds: MCE1={C1, C2, C3, C4}. The cloud service files and the number of services in each file are illustrated in Tables 1 and 2, respectively. If the user’s requested service is R={F1, F2, F4}, then the algorithm will begin by determining the number of files for each cloud. Because the cloud with the highest number of files is C4, the algorithm will confirm whether any of its files can be used to fulfill the user’s request. Because (C4∩R)={F1, F2}, C4 will be added to the Combiner List (to generate B={C4}) and to the Composer List (P={F1, F2}). Because the Composer List still does not equal R, the cloud that contains the largest number of files after excluding C4 from MCE1 will be selected, i.e., C1. Because ((C1∩R)−P)=Ø, C1 will be ignored. C2 and C3 both contain the same number of files after excluding C1 and C4 from MCE1; as a result, either cloud can randomly be selected. Suppose that we select C2. In this case, (C2∩R)−P={F4}. Therefore, C2 will be added to the Combiner List B={C4, C2}, and F4 will be added to the Composer List P={F1, F2, F4} (which equals R). The algorithm will then terminate after generating the Composition Sequence and sending it to the user. In this example, the number of services that were examined by the composer before generating the Composition Sequence |N| represents the total number of services in C1, C2 and C3:|N|=(|F1|+|F2|+|F3|+|F5|)+(|F1|+|F2|+|F3|)+(|F4|+|F5|)=2+3+8+3+2+3+8+3+3=35service.

@&#CONCLUSIONS@&#
The objective of this paper was to develop an algorithm that could efficiently consider multiple clouds and perform service composition with a short execution time and minimal numbers of clouds, thereby reducing communication costs and financial charges. The proposed algorithm, COM2, ensures that the cloud with the maximum number of services will always be selected before other clouds, which increases the possibility of fulfilling service requests with minimal overhead.The results of our study suggest that the COM2 algorithm retains a low number of combined clouds without compromising the number of examined services, which significantly affects execution time. This result arises from the fact that the possibility of finding all the services in one cloud is higher when the number of services in that particular cloud is high.In future work, we intend to further investigate how COM2 performs in real-life scenarios and when QoS performance measures are considered. We also plan to utilize an ontology to improve the proposed algorithm; using an ontology has the potential to significantly improve the COM2, particularly when QoS measures are considered.