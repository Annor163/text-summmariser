@&#MAIN-TITLE@&#
A speed and departure time optimization algorithm for the pollution-routing problem

@&#HIGHLIGHTS@&#
We present a speed and departure time optimization algorithm.A proof of optimality for the proposed speed and departure time optimization algorithm is provided.Computational experiments on the pollution-routing problem are performed.The impact on distance, fuel consumption, and labor costs are investigated.

@&#KEYPHRASES@&#
Routing,Speed optimization,Departure optimization,Green logistics,

@&#ABSTRACT@&#
We propose a new speed and departure time optimization algorithm for the pollution-routing problem (PRP), which runs in quadratic time and returns an optimal schedule. This algorithm is embedded into an iterated local search-based metaheuristic to achieve a combined speed, scheduling and routing optimization. The start of the working day is set as a decision variable for individual routes, thus enabling a better assignment of human resources to required demands. Some routes that were evaluated as unprofitable can now appear as viable candidates later in the day, leading to a larger search space and further opportunities of distance optimization via better service consolidation. Extensive computational experiments on available PRP benchmark instances demonstrate the good performance of the algorithm. The flexible departure times from the depot contribute to reduce the operational costs by 8.36% on the considered instances.

@&#INTRODUCTION@&#
The pollution-routing problem (PRP) is a variant of the vehicle routing problem with environmental considerations, introduced in Bektaş and Laporte (2011), and aiming to minimize operational and environmental costs subject to vehicle capacity and hard time-window constraints. The costs are based on driver wages and fuel consumption, evaluated as a non-linear function of the distance traveled, vehicle load, and vehicle speed. Some recent articles have proposed heuristics for the PRP: an adaptive large neighborhood search in Demir, Bektaş and Laporte (2012), and an ILS with a set-partitioning matheuristic in Kramer, Subramanian, Vidal and Cabral (2015). Other contributions (Bektaş & Laporte, 2011; Franceschetti, Honhon, Van Woensel, Bektaş & Laporte, 2013; Dabia, Demir & Van Woensel, 2014) focused on mathematical formulations and integer programming algorithms based on branch-and-price.Vehicle-speed decisions play an important role in the PRP, since they do not only affect the total cost, but also the travel times between the locations, with a large impact on time-window feasibility. For this reason, most algorithms for the PRP perform – at regular times during the search – an optimization of vehicle speeds for the current routes. The resulting speed optimization subproblem (SOP), seeks to find the most cost-efficient arc speeds on a given route while respecting arrival-time constraints at each customer.Some algorithms for the SOP have been recently proposed (Demir et al., 2012; Kramer et al., 2015; Norstad, Fagerholt & Laporte, 2011; Hvattum, Norstad, Fagerholt & Laporte, 2013). These algorithms run in quadratic time, consider identical cost/speed functions for each arc, and assume that the departure time is fixed. Now, considering that the start of the working day (the departure time from the depot) is a decision variable leads to different optimality conditions and speed decisions. This may open the way to significant cost reductions, but also increases resolution complexity. Fewer articles have addressed this aspect. In Dabia et al. (2014), the departure time from the first customer is optimized by means of a golden section search, within a pricing algorithm. Franceschetti et al. (2013) model and solve the PRP with time-dependent travel times, a generalization of the problem considered in this paper. The resulting speed optimization algorithm is, however, more complex due to the presence of three time intervals with different speed/cost functions, involving 24 rules for speed choices. The solution is also not guaranteed to be optimal. Finally, Vidal, Jaillet and Maculan (2014) showed that the optimal SOP solution with deadlines and arc-dependent speed/cost functions can be achieved by solving a hierarchy of resource allocation problems.This article contributes to the resolution of difficult vehicle routing variants with speed and departure time optimization. We consider the case where driver wages are computed from the departure time, hence allowing to better assign human resources to needed deliveries. Note that a fixed departure time can still be obtained by reducing the departure time window to a point. Some routes that were evaluated as unprofitable with a fixed departure time policy can now appear as viable candidates, leading to a larger search space and further opportunities of routing optimization via better service clustering.We introduce a simple quadratic time algorithm for the speed and departure time optimization (Section 3). Moreover, we demonstrate the optimality of this algorithm (Section 4). The speed optimization algorithm is embedded into a vehicle routing matheuristic to produce high-quality routing plans. We conduct computational experiments on the classic PRP instances to evaluate the performance of the method, and assess the impact of departure time optimization on cost and pollution emissions (Section 5). The results highlight very significant routing cost reduction, of 8.36% on average. The CPU time of the new metaheuristic remains comparable to current state-of-the-art methods despite the fact that it deals with a more general problem.The PRP with flexible departure times can be defined as follows. LetG=(V,A)be a complete and directed graph with a setV={0,1,2,…,n}of vertices and a setA={(i,j):i,j∈V,i≠j}of arcs. Vertex 0 represents the depot while the remaining vertices are customers. A set of m vehicles with capacity Q is available to service the customers. Each customer i has a non-negative demand qi, a time window [ai, bi] during which service must start, and a service time τi. By convention,q0=τ0=0for the depot. Each arc(i,j)∈Arepresents a travel possibility from node i to j for a distance dij, which can be traveled with any speed vijin the interval [vmin, vmax]. The PRP aims at determining a speed matrix (v)ijfor the arcs and a set of feasible routes R to serve all customers while minimizing environmental and operational costs.Letσ=(σ1,σ2,…,σ|σ|)be a route,fσiσi+1be the vehicle load on arc(σi,σi+1)andtσibe the arrival time at customer σi. The environmental cost is proportional to fuel consumption, computed as in Eq. (1) where w1, w2, w3, w4 are parameters based on fuel properties, vehicle and network characteristics. The labor costs are proportional to route duration, computed as the difference between departure and arrival timetσ|σ|−tσ1. Definingωfcas the fuel cost per liter andωdcas the driving cost per second, the objective of the PRP is given in Eq. (2):(1)Fσiσi+1f(vσiσi+1)=dσiσi+1(w1vσiσi+1+w2+w3fσiσi+1+w4vσiσi+12)(2)Zprp(R,v)=∑σ∈R(ωfc∑i=1|σ|−1Fσiσi+1f(vσiσi+1)+ωfd(tσ|σ|−tσ1)).This section deals with the optimization of speeds and departure times for a fixed route σ. To simplify the exposition, we will omit σ in the notations, and thus assume that customers are indexed by their order of appearance in the route.The fuel consumption per distance unitFi,i+1f(vi,i+1)is a convex function. The speed valuevf*that minimizes fuel costs is given in Eq. (3). Similarly, for any arc(i,i+1),assuming that there is no waiting time in the route after i, the speed valuevf*dthat minimizes fuel plus driver costs is expressed in Eq. (4):(3)dFi,i+1fdvi,i+1(vf*)=0⇔vf*=(w12w4)1/3(4)vf*d=(ωdcωfc+w12w4)1/3.For a fixed route, the speed and departure time optimization problem consists of finding the departure time from the depot and the optimal speeds for each arc while respecting customers’ time windows. To solve this problem, we propose an optimal recursive algorithm that extends those presented in Demir et al. (2012); Hvattum et al. (2013) and Kramer et al. (2015). It solves in quadratic time a special case of the time-dependent SOP of Franceschetti et al. (2013).The algorithm relies on a general divide-and-conquer strategy, which iteratively solves a relaxed SOP obtained by ignoring time windows at intermediate destinations. If the resulting solution satisfies all constraints, then it is returned. Otherwise the customer p with maximum time-window violation is identified and its arrival time is set to its closest feasible value. Fixing this decision variable creates two sub-problems which are recursively solved (Algorithm 1, lines 20–21). The novelty of this algorithm is the way it manages departure or arrival-time fixing within subproblems to converge towards optimal departure and speed decisions.For a route with nσnodes (including the departure and return to the depot), Algorithm 1 is applied by setting the start s to 1 and the end e to nσ. The departure time is first set to the earliest possible valuet1=a1(Algorithm 1, line 6). This decision will be revised later on. The arrival times at each customers are then derived as follows. The arrival time at the last customer when traveling at speedvf*dis determined and, in case of violation, updated to its closest time-window bound (Algorithm 1, line 8). This leads to a reference speedvrefon the route (Algorithm 1, line 11) which is used to compute the arrival time at each customer as well as the maximum time-window violation (Algorithm 1, lines 12–17).In case of violation, two subproblems are recursively solved. Any subproblem starting at the depot is now solved without fixing the departure time. Indeed, the arrival time to the last customer of this sub-problem is already fixed, such that it is possible to evaluate the reference speed “backwards”, deriving the best departure time at the depot (Algorithm 1, line 10), and the customer arrival times. The other sub-problems are similarly solved. The recursion is repeated until all constraints are satisfied. Finally, when arrival times are known for all customers, the associated speeds are revised in such a way that any speed belowvf*is replaced byvf*and a waiting time (Algorithm 1, lines 22–24).Fig. 1 shows an execution example of the presented algorithm in a route involving seven nodes. The horizontal lines represent the customers and the brackets their corresponding time windows. Bullet points indicate the arrival times. The best departure and arrival times of this example are depicted in Fig. 1.f.At each iteration, for a range of indices(s,…,e),the algorithm generates a solution with uniform speed starting from the earliest feasible time as(lines 6 and 10 of Algorithm 1). The symmetric case (Line 8, where the arrival time is fixed) reduces to a fixed starting time with a change of variable. Then, the algorithm evaluates the largest infeasibility, either earliness or tardiness, when using the speedvrefon the route. If no infeasibility is found, then the schedule is optimal. Otherwise, there exists one service time tK,K∈{s+1,…,e−1},with maximum constraint violation. This service time is fixed to its closest bound:tK=aKin case of earliness, ortK=bKin case of tardiness. Proving that at least one optimal solution exists, with this fixed variable, at each iteration would lead to the optimality of the algorithm. We will prove Theorem 1.Theorem 1(A)If the selected variable K corresponds to a late service, then there exists no optimal solution of the subproblemt*such thattK*<bK.If the selected variable K corresponds to an early service, then there exists no optimal solution of the subproblemt*such thattK*>aK.The speed optimization subproblem is reformulated in Eqs. (5)–(7). The functionc(x)=ωfc(w1x+w4/x2)+ωdcxis convex and smooth. Other constant members of the objective have been eliminated.(5)mints,…,te∑i=s+1edi−1,ic^(ti−ti−1di−1,i)(6)s.t.ai≤ti≤bis≤i≤e(7)withc^(x)={∞forx∈[0,1vmax[c(x)forx∈[1vmax,1vf*[c(1vf*)+ωdc(x−1vf*)forx∈[1vf*,∞[.Functionc^(·)returns the best per-mile cost, including possible waiting decisions. This function is also convex and smooth, and attains its minimum forx=1/vf*d. The necessary and sufficient Karush–Kuhn–Tucker (KKT) optimality conditions of this problem can be stated as follows. Associate the Lagrangian multipliers(μs*,…,μe*)to the constraints ai≤ ti, and(λs*,…,λe*)to the constraints ti≤ bi. A solution t*of Eqs. (5)–(6) is optimal if and only if there exists (μ*,λ*) such that(8){ai≤ti≤bii∈{s,…,e}−c^′(ts+1−tsds,s+1)+λs−μs=0c^′(ti−ti−1di−1,i)−c^′(ti+1−tidi,i+1)+λi−μi=0i∈{s+1,…,e−1}c^′(te−te−1de−1,e)+λe−μe=0λi(ti−bi)=0;λi≥0i∈{s,…,e}μi(ti−ai)=0;μi≥0i∈{s,…,e}.These optimality conditions can be reformulated as in Eqs. (9)–(11):(9)fori=s,{eitherts∈[as,bs]andts+1−tsds,s+1=1vf*d,orts=asandts+1−tsds,s+1≤1vf*d,orts=bsandts+1−tsds,s+1≥1vf*d;(10)foreachi∈{s+1,…,e−1},{eitherti∈[ai,bi]andti−ti−1di−1,i=ti+1−tidi,i+1,orti=aiandti−ti−1di−1,i≥ti+1−tidi,i+1,orti=biandti−ti−1di−1,i≤ti+1−tidi,i+1;(11)fori=e,{eitherte∈[ae,be]andte−te−1de−1,e=1vf*d,orte=aeandte−te−1de−1,e≥1vf*d,orte=beandte−te−1de−1,e≤1vf*d.Now, suppose that the algorithm found a maximum tardiness for the index K, and that there exists an optimal solution t*such thattK*<bK. We will show by contradiction that such a solution cannot be optimal.Let the index I be defined asI=max{{i|i<Kandti*=bi}∪{s}},that is, the largest index i smaller than K such thatti*=bi,or s if no such index exists. As such, eithertI*=bIor{I=sandts*<bs}.Similarly, let the index J be defined asJ=min{{j|j>Kandtj*=bi}∪{e}}. As such, eithertJ*=bJor{J=eandtJ*<bJ}.From the definition of I and J,ti*<bifori∈{I+1,…,J−1},and thus, from the optimality conditions of Eq. (10), we obtain(12)ti*−ti−1*di−1,i≥ti+1*−ti*di,i+1fori∈{I+1,…,J−1}.Now, recall that K is the maximum tardiness obtained from a solution with constant speedvref,such thatvref≥vf*d,starting from as. Hence,(13)as+∑i=sK−1di,i+1vref−bK≥as+∑i=sI−1di,i+1vref−bI⇒∑i=IK−1di,i+1vref≥bK−bI(14)as+∑i=sK−1di,i+1vref−bK≥as+∑i=sJ−1di,i+1vref−bJ⇒∑i=KJ−1di,i+1vref≤bJ−bK.•IftI*=bI,thenbK−bI>tK*−tI*. Eq. (13) leads to:(15)∑i=IK−1di,i+1vref≥bK−bI>tK*−tI*,withtK*−tI*=∑i=IK−1(ti+1*−ti*)=∑i=IK−1di,i+1×ti+1*−ti*di,i+1⇒∑i=IK−1di,i+1vref>∑i=IK−1di,i+1×ti+1*−ti*di,i+1⇒∃i∈{I,…,K−1}suchthat1vref>ti+1*−ti*di,i+1.Else{I=sandts*<bs}. We have:(16)tK*−ts*<bK−as≤∑i=sK−1di,i+1vref,andsimilarly⇒∃i∈{I,…,K−1}suchthat1vref>ti+1*−ti*di,i+1.IftJ*=bJ,thenbJ−bK<tJ*−tK*. Eq. (14) leads to:(17)∑j=KJ−1dj,j+1vref≤bJ−bK<tJ*−tK*,withtJ*−tK*=∑j=KJ−1(tj+1*−tj*)=∑j=KJ−1dj,j+1×tj+1*−tj*dj,j+1⇒∑j=KJ−1dj,j+1vref<∑j=KJ−1dj,j+1×tj+1*−tj*dj,j+1⇒∃j∈{K,⋯,J−1}suchthat1vref<tj+1*−tj*dj,j+1.Else{J=eandte*<be*},then the condition of Eq. (11) states that1vf*d≤te*−te−1*de−1,e. Sincevf*d≤vref,this leads to the same statement as Eq. (17).Overall, Eqs. (15–17) lead to:(18)∃(i,j)|i<K≤j,suchthatti+1*−ti*di,i+1<1vref≤tj+1*−tj*dj,j+1.This is a direct contradiction of Eq. (12). Our original assumption, that there exists an optimal solution withtK*<bKis impossible, hence completing the proof of statement A). The proof of case B) is analogous.□The proposed algorithm was integrated into the ILS-SP-SOA matheuristic of Kramer et al. (2015), which makesuse of an adaptive speed matrix during the search to keep track of speed decisions. The speed and departure time optimization algorithm is executed on each route associated to a local optimum of ILS. These routes are also stored in a pool and used to generate new solutions by means of integer programming over a set partitioning (SP) formulation.We tested the method on the instances of Demir et al. (2012) and Kramer et al. (2015), containing between 10 and 200 customers. The coefficients of the objective function were set to the same values as Kramer et al. (2015). The algorithm was implemented in C++ and executed on an Intel i7 3.40 GHz processor with 16 GB of RAM, using CPLEX 12.4.Table 1 reports the results of these experiments. Ten independent runs were done for each instance, and each line corresponds to averaged results on a set of 20 instances. All detailed results are available at http://w1.cirrelt.ca/∼vidalt/en/VRP-resources.html. The new solutions are compared to the previous best known solutions (BKS) from Kramer et al. (2015), which did not consider departure-time delays. The rightmost part of the table also reports the effects of departure time optimization, in percentage, on labor costs, fuel and distance (comparing our best solution to the BKS).In light of these results, allowing delayed departures times can lead to significant reductions of operational costs (−8.36percent on average). Instances with tighter time-windows (sets B and C) tend to be more prone for solution quality improvement based on delays at the depot, as illustrated in Fig. 2 for individual instances.The main cost improvements originate, as expected, from reduced labor costs (−15.72percent). Moreover, we also notice a quasi-systematic decrease of driven distance (−0.49percent). Delayed departure time optimization indeed leads to a larger set of good-quality candidate routes, increasing the size of the search space, resulting in further opportunities of distance minimization.The impact on pollution emissions depends on the tightness of the time constraints. For all benchmark sets of type A, with large time windows, a reduction can be observed (−0.48percent) as a consequence of the improvement in total distance. For most benchmark sets of type B and C, with tight time windows, we observe a moderate but consistent increase of fuel consumption (1.18 percent). This is an indirect consequence of the optimality conditions of the SOP. Indeed, when confronted with an active time-window constraint of the type ai≤ t, early in the route, the speed optimization algorithm with fixed departure time creates a waiting time followed by a travel at speedvf*(minimal emissions since the labor costs are constant). This is illustrated on the left of Fig. 3.In contrast, the speed and departure time optimization algorithm will delay the departure, using the speedvf*d(minimal emissions + labor costs, such thatvf*d≥vf*) to arrive exactly on time to the first active constraint, as illustrated on the right part of Fig. 3. This effect is particularly visible on instances with more induced waiting times and opportunities of labor cost reductions.

@&#CONCLUSIONS@&#
A new speed and departure time optimization algorithm for the PRP has been presented. This algorithm is conceptually simple, runs in quadratic time, and is guaranteed to produce an optimal solution. It was implemented and integrated in the matheuristic of Kramer et al. (2015), where departure time and speed optimizations occur for each local minimum of the iterated local search. Our experimental results with this heuristic showed that delayed departure times from the depot can lead to very significant savings: up to 8.36 percent operational costs for the considered benchmark sets.Overall, integrated scheduling, speed control, and routing optimization can help to reduce costs and environmental fingerprints in a variety of other industrial domains. The proposed methodology has contributed to address some open challenges related to combined speed and schedule optimization. Further research can now be focused on generalizing these methods to broader application classes. In particular, arc-dependent cost/speed functions are very relevant for ship operations in the presence of variable weather and sea conditions. However, no efficient algorithm is known for this setting.