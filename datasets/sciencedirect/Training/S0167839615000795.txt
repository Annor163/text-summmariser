@&#MAIN-TITLE@&#
Watertight conversion of trimmed CAD surfaces to Clough–Tocher splines

@&#HIGHLIGHTS@&#
Watertight conversion of boundary representations to Clough–Tocher splines.Comparative study of the most prominent Clough–Tocher constructions and some novel variants.Comparison based on visual fairness, invariance to affine reparameterisations, polynomial precision and approximation error.

@&#KEYPHRASES@&#
Clough–Tocher spline,CAD model,Boundary representation,Watertight conversion,

@&#ABSTRACT@&#
The boundary representations (B-reps) that are used to represent shape in Computer-Aided Design systems create unavoidable gaps at the face boundaries of a model. Although these inconsistencies can be kept below the scale that is important for visualisation and manufacture, they cause problems for many downstream tasks, making it difficult to use CAD models directly for simulation or advanced geometric analysis, for example. Motivated by this need for watertight models, we address the problem of converting B-rep models to a collection of cubicC1Clough–Tocher splines. These splines allow a watertight join between B-rep faces, provide a homogeneous representation of shape, and also support local adaptivity.We perform a comparative study of the most prominent Clough–Tocher constructions and include some novel variants. Our criteria include visual fairness, invariance to affine reparameterisations, polynomial precision and approximation error. The constructions are tested on both synthetic data and CAD models that have been triangulated. Our results show that no construction is optimal in every scenario, with surface quality depending heavily on the triangulation and parameterisation that are used.

@&#INTRODUCTION@&#
The common representation of shape available to all Computer-Aided Design systems, and therefore the standard form for exchanging CAD models between systems, is a B-rep (boundary representation); (Stroud, 2006). In this paradigm, a connected wireframe of edges and vertices describes the global topology and sharp features of a model. Faces are bounded by a collection of edges and have their internal geometry provided by a smooth 2-manifold surface: usually one of the natural quadrics or a non-uniform rational B-spline (NURBS) surface (Piegl and Tiller, 1997) for more general freeform shapes. The embedding surface typically extends beyond the bounding edges and the portion that is meaningful is therefore a “trimmed” region of the whole. This representation of shape has been successful in realising the broad range of applications that CAD systems support today, for example in visualisation and manufacturing.However, when we are interested in the region of space bounded (or excluded) by a shape, for example when performing an engineering simulation (Cottrell et al., 2009; Jaxon and Qian, 2014) or computing a medial axis transform (Bucklow, 2014), our task is often made difficult by the deficiencies of such a B-rep. For example, the intersection curve of two NURBS surfaces is not, in general, a NURBS curve, leading to unavoidable gaps in trimmed NURBS models (Skytt and Vuong, 2013). Although the gaps can be made arbitrarily small, the result is still a discontinuous representation of shape. This is a significant barrier for the direct use of CAD models in most types of engineering simulation, which require at least continuity of position. Additionally, it is often desirable in downstream applications (such as slicing for 3D printing) that all surfaces use the same representation, continuity, and degree. This simplifies interrogation considerably, and allows for algorithms that use data-level parallelism (e.g. on a GPU) to improve performance.There is therefore a need to convert B-reps, and particularly the trimmed surfaces that they comprise, into a form that removes the gaps between adjacent faces and allows for a homogeneous representation of shape. This paper investigates the performance of cubicC1Clough–Tocher splines for this purpose. These splines give a way of smoothly interpolating surface samples with gradients and can therefore•remove gaps between B-rep faces (giving surfaces that areC1within a B-rep face orC0when stitched together);provide a simple, homogeneous representation of freeform shapes;allow for local adaptivity.CubicC1Clough–Tocher splines are described in the next section. Various constructions of this type are summarised in Section 3, including previously unexplored variants. Section 4 addresses the problem of generating input data from trimmed NURBS surfaces that are then sampled and interpolated by a Clough–Tocher spline. Our experiments and a comparison of various constructions are given in Section 5. The paper concludes in Section 6 with a short summary and suggestions for future research.We start by introducing our notation and some basic concepts including Bézier triangles, the cubicC1Clough–Tocher spline space and its reduced variant. More details can be found in the papers by Farin (1986), Lai and Schumaker (2001), Alfeld and Schumaker (2002), and Speleers (2010).A point P in a triangleT(U0,U1,U2)with verticesU0,U1,U2is uniquely given by its barycentric coordinatesτ=(τ0,τ1,τ2)as the convex combination(1)P=∑i=02τiUi;τ0+τ1+τ2=1,τi≥0.We assume thatTis non-degenerate. Then the barycentric coordinates can be determined using ratios of signed triangle areas as(2)τi=A(Ui+1,Ui+2,P)A(U0,U1,U2)with the index i treated modulo 3.Any polynomial p of total degree at most d defined onTcan be expressed in the Berstein–Bézier form(3)p(τ)=∑|i|=dPiBid(τ),where(4)Bid(τ)=d!i!j!k!τ1iτ2jτ3kwithi=(i,j,k),|i|=i+j+k, andi,j,k≥0. These polynomials span the linear space denoted byΠd. In the cubic case, the Bézier ordinatesPi, associated with the barycentric coordinatesi/3, are shown in Fig. 1, left.Moving from the above functional setting to the parametric one, a Bézier patch is given by(5)p(τ)=∑|i|=dPiBid(τ)with control pointsPi∈R3forming a triangular control net.With the notation in Fig. 1, right,C1continuity conditions betweenTandT¯are, on top of trivialC0conditions, given by(6)T13=τ0T10+τ1V1+τ2T12,Q¯=τ0T01+τ1T10+τ2Q,T03=τ0V0+τ1T01+τ2T02,where(τ0,τ1,τ2)are the barycentric coordinates ofU3with respect toT(U0,U1,U2), i.e.,U3=τ0U0+τ1U1+τ2U2; see Farin (1985, 1986). In other words, the three quadrilaterals(V1,T12,T10,T13),(T10,Q,T01,Q¯), and(T01,T02,V0,T03)(light-shaded in Fig. 1, right) have to be planar and all of the same affine shape as(U1,U2,U0,U3).Similarly, conditions forC2continuity read(7)τ0Q+τ1T12+τ2T21=τ¯0T13+τ¯1Q¯+τ¯2T31,τ0T02+τ1Q+τ2T20=τ¯0Q¯+τ¯1T03+τ¯2T30,where(τ¯0,τ¯1,τ¯2)are the barycentric coordinates ofU2with respect toT¯(U1,U0,U3), i.e.,U2=τ¯0U1+τ¯1U0+τ¯2U3. The triangles involved are dark-shaded in Fig. 1, right. In the context of cubic splines, theseC2conditions cannot be, in general, satisfied, as the cubic construction does not provide enough degrees of freedom. Nevertheless, these conditions can be used to minimiseC2discontinuities between neighbouring triangles, as we shall see in Section 3.3.Let ▵ be a conforming triangulation of a domainΩ⊂R2with one or more polygonal boundary loops and letnv,ne, andntbe the number of vertices, edges, and triangles of ▵, respectively. Additionally, letEdenote the set of edges in ▵ and let the verticesUiof ▵ have Cartesian coordinates (also called parameter values) given by(ui,vi).In the Clough–Tocher construction, each of the triangles in ▵, which we call macro-triangles, is partitioned into three micro-triangles (Clough and Tocher, 1965); see Fig. 2. For each triangleT∈▵, a split point Z is chosen and connected to the three vertices ofTby new edges, giving rise to the Clough–Tocher refinement of ▵, denoted by▵⋆.The cubicC1spline space defined on▵⋆is called the Clough–Tocher spline space(8)S31(▵⋆)={s∈C1(Ω):s|T⋆∈Π3,T⋆∈▵⋆}.Its dimension is equal to3nv+ne. Note that the dimension of the spaceS31(▵)over a general triangulation ▵ is still an open question, so the extra freedom granted by a Clough–Tocher refinement is useful to constructC1cubic splines in practice. We will call the restrictions|Tthe macro-patch overT.The three degrees of freedom corresponding to each vertex in ▵ are typically fixed by assigning the position and gradient at each vertexUi,i=1,…,nv. That is, in the parametric setting,(9)s(Ui)=fiand∇s(Ui)=∇fi=(fiu,fiv),sampled at the vertices of ▵ from a parametric surface f defined over Ω. This leaves a degree of freedom left for each edge in ▵. This degree of freedom can be used to force the directional derivative of the spline s along an edge ε to be linear, instead of the general quadratic. More precisely, the reduced Clough–Tocher spline space is defined as (Speleers, 2010)(10)Sˆ31(▵⋆)={s∈S31(▵⋆):∂s∂vε|ε∈Π1,ε∈E},wherevεis a (unit) vector not parallel to ε. This reduced space has dimension equal to3nvand provides a unique solution to the interpolation problem of (9).A discussion on choosing the split point Z can be found in Schumaker and Speleers (2010). We consider three options for the split point Z: the usual barycentre ofT, the incentre ofT, and a previously unexplored option, the point inTthat is given by the barycentric coordinates of the incentre of the corresponding triangle in 3D given byfi. These three options will be referred to by Bary, Inc2, and Inc3, respectively. We discuss the consequences of these options in Section 5.An excellent survey of variousC1cubic Clough–Tocher spline constructions was conducted by Kashyap (1996). That survey also included a new construction and a discussion of iterative methods.We now briefly recall the most prominentC1cubic constructions and their novel variants, and, for convenience, provide formulas for computing all the necessary Bézier ordinates (control points).From the discussion ofC1continuity conditions (see Section 2.2 and Farin, 1985, 1986), one obtains the following three-step procedure for computing the control points of micro-triangles (see Fig. 2, right) from the input data (9), applied to eachT∈▵. The triple(τ0,τ1,τ2)provides the barycentric coordinates of the split point Z inT(U0,U1,U2).Step 1Set(11)V0=f0,T01=V0+13∇fi⋅(U1−U0)and similarly for the remaining control points along the edges ofT. Then compute(12)I01=τ0V0+τ1T01+τ2T02and similarly forI11andI21.Step 2ComputeC0,C1, andC2by one of the constructions detailed below.Step 3Set(13)I02=τ0I01+τ1C2+τ2C1and similarly forI12andI22. Finally, assign(14)S=τ0I02+τ1I12+τ2I22.The first step ensures interpolation of the input data. For given split points, the second step fixes the only degree of freedom in the construction, i.e., it computes the central control point of each micro-triangle. The construction is finalised in the third step, which computes all the remaining control points to assure globalC1continuity.We now move on to particular constructions and show how to perform Step 2 for each of them in turn. Although triangles with boundary edges require special treatment in most constructions mentioned below, we address boundaries later in Section 3.8.The original construction of Clough and Tocher (1965) fixes the extra degree of freedom per edge in ▵ by requiring that the normal derivative at each edge be linear. Thus, this construction yields splines from the reduced spaceSˆ31, see (10), by choosingvε⊥ε. We will refer to this construction asCTo, where the ‘o’ stands for ‘orthogonal’.A formula for computingC2based on a general directionvε, derived from the linear derivative requirement ofSˆ31, is given in Section 2.3 of Speleers (2010):(15)C2=λ0T01+λ1T10+12(I01+I11−λ0(V0+T10)−λ1(V1+T01))with(λ0,λ1,0)the barycentric coordinates of the projection of Z onto the edgeε=U0U1in the direction ofvε.In the special case ofvε⊥ε,λ0andλ1are computed by orthogonal projection as(16)λ1=(Z−U0)⋅(U1−U0)‖U1−U0‖andλ0=1−λ1.Clough and Tocher (1965) mention several variants of this construction and note that the original 3-split into micro-triangles was suggested by T.K. Hsieh.The advantage of this original construction is that it is completely local. More precisely, all control points for the three micro-patches per input triangleTare computed using only the input data at the vertices ofT. This makes it very simple to implement.On the other hand, the extra degree of freedom per edge is not used in an optimal way. Additionally, using the perpendicular means that the construction is not invariant with respect to affine reparameterisations, not even to non-uniform scaling of the parameter plane. While full invariance in the above sense may seem unnecessary, non-uniform rescaling of parameter space is a common operation in CAD kernels and it is therefore desirable to have this type of invariance. This is elaborated further in Section 5.1.The idea developed here was mentioned by Farin (1985) and later also by Schumaker and Speleers (2010) and Speleers (2010). Instead of using the perpendicular direction, i.e.,vε⊥ε, we setvεto be parallel to the line connecting Z andZ¯in the neighbouring triangleT¯.In this case,λ0andλ1in (15) need to be set to(17)λ1=(Z−U0)×(Z¯−Z)(U1−U0)×(Z¯−Z)andλ0=1−λ1,where × denotes the planar cross-product of two vectors. This formula is easily derived by intersecting the lineZZ¯with the edgeU0U1.This construction is invariant to affine reparameterisations, hence we denote it byCTi, where the ‘i’ stands for ‘invariant’. On the other hand, it requires the positions of split points from adjacent macro-triangles and thus it is a less local construction thanCTo.Farin (1985) describes a construction that has quadratic precision and minimises theC2discontinuity between micro-triangles along edges of macro-triangles. We abbreviate this construction byFa.First, set Q of the macro-patch corresponding toTto guarantee quadratic precision (see Fig. 1, right):(18)Q=T01+T10+T12+T21+T20+T024−V0+V1+V26.All the other control points of the macro-patch are computed from the input data at vertices ofTvia (11). The macro-patch is then subdivided into three micro-patches according to the split point Z, e.g. using the de-Casteljau algorithm (Böhm et al., 1984). This gives initial positions of all micro-triangle control points(19)I01=τ0V0+τ1T01+τ2T02,C2=τ0T01+τ1T10+τ2Q,I02=τ0I01+τ1C2+τ2C1,S=τ0I02+τ1I12+τ2I22,and similarly for the remaining points. Note that S is actually not needed in the construction because it is later replaced in Step 3.By formulating a constrained minimisation problem using (7), one obtains, e.g. by the standard Lagrange multipliers method,(20)C¯2=τ0(2τ1R1+2τ2R2+a12R3−2τ0(τ¯2R1+τ¯1R2)+a11R3a11+2τ0a12+τ02a22,C2=C¯2−R3τ0,where(21)R1=τ¯0I¯12+τ¯1I¯11−τ0I12−τ2I11,R2=τ¯0I¯02+τ¯2I¯01−τ0I02−τ1I01,R3=τ1T01+τ2T10,a11=2(τ12+τ22),a12=−2(τ1τ¯2+τ¯1τ2),a22=2(τ¯12+τ¯22).The barycentric coordinates involved in (20)–(21) are defined byZ¯=τ0Z+τ1U0+τ2U1andZ=τ¯0Z¯+τ¯1U1+τ¯2U0. Note that this procedure is done separately for each non-boundary edge using information from edge-adjacent triangles. The other control points,C0andC1, are computed similarly.The method of Foley and Opitz (1992) constructs a hybrid cubic patch with additional control points that allow for cross-boundary derivative control. Mann (1998) described how that construction can be modified to fit into the Clough–Tocher framework. We refer to this construction byFO.First, repeat the following procedure three times, once for each edge ofT: set Q in the macro-patch corresponding toTto guarantee cubic precision across the edgeU0U1:(22)Q=(T30−τ12V0−2τ1τ2T01−2τ0τ1T02−τ22T10−τ02T20+T31−τ12T01−2τ1τ2T10−2τ0τ2T12−τ22V1−τ02T21)/(2τ0(τ1+τ2)).Similarly to Farin's method (Section 3.3), the macro-patch is then subdivided into micro-patches via (19), but onlyC2is actually required. The other two applications result inC0andC1.As shown in Mann (1998), this construction has cubic precision in the sense that if the positions and gradients at the 6 vertices shown in Fig. 3, left, are sampled from a common cubic, the three micro-triangles corresponding toTdescribe patches of the same cubic. Additionally, it is, by construction, invariant to affine reparameterisations.Farin's method described in Section 3.3 minimises theC2discontinuity between micro-triangles along edges of macro-triangles. To achieve cubic precision, Farin's minimisation can be used to minimise theC2discontinuity of macro-patches, which are in turn used to obtainC0,C1, andC2. As in the case ofFO, this procedure is applied three times.First, fit a macro-patch overTthat minimises theC2discontinuity across the edge given byU0U1. This is done using the same equations (18)–(21) as in Farin's method, with the following modifications:(23)R1=τ¯0T¯21+τ¯1T¯12−τ0T21−τ2T12,R2=τ¯0T¯20+τ¯2T¯02−τ0T20−τ1T02,and the barycentric coordinates involved are defined byU3=τ0U2+τ1U0+τ2U1andU2=τ¯0U3+τ¯1U1+τ¯2U0. Note that they are not, in general, the same as the coordinates used in Farin's method in Section 3.3. Repeating this procedure for the other two edges ofTgives the remaining control points.This construction, which we denote byKa, first appeared in Kashyap (1996) and is based on the 18-point interpolant introduced there. It was later rediscovered in the presented form in Mann (1998, 1999). It has cubic precision in the same sense asFOof Section 3.4; see Fig. 3, left.All the methods discussed so far make use of the data (9) defined on vertices of ▵ only. However, if we want to convert a given surface into a Clough–Tocher spline, we can fix the extra degree of freedom per edge in ▵ by reading extra data off the given surface. Given the role of the control points computed in Step 2, it is natural to try to use them to fit the gradients at mid-points of edges in ▵. However, as only one degree of freedom is available per edge, the mid-edge gradient needs to be projected in a certain directionvεnot parallel to ε.There are two obvious options available. One is to setvε⊥ε, leading to a construction denoted byMGo. This was investigated e.g. in Schmidt et al. (2001), Bastian and Schmidt (2001). Similarly to the original Clough–Tocher construction, this ensures complete locality, but does not provide invariance to affine reparameterisations. The other option is to setvε=ZZ¯, cf. Section 3.2, leading to a constructionMGithat is invariant to affine reparameterisations.Turning back to (5) withd=3, the gradient of the patch at(U0+U1)/2is given by(24)∇p(12,12,0)=34A(U0,U1,U2)((v1−v2,u2−u1)P3,0,0+(2v1−v0−v2,u0−2u1+u2)P2,1,0+(v1+v2−2v0,2u0−u1−u2)P1,2,0+(v2−v0,u0−u2)P0,3,0+(v0−v1,u1−u0)(P2,0,1+2P1,1,1+P0,2,1))withA(U0,U1,U2)again equal to the area ofT. The central control pointP1,1,1is then easily computed from the linear equation(25)∇p(12,12,0)⋅vε=gε⋅vε,wheregεis the mid-edge gradient sampled from the input surface. This covers both options mentioned above.P1,1,1, computed three times, once for each edge ofT, yields the control pointsC0,C1, andC2in Step 2. Input data for cubic reproduction over a macro-triangle are shown in Fig. 3, right. A more general treatment of cross-boundary derivatives for triangular patches can be found in Foley et al. (1993).We now turn our attention to the iterative method described in Farin and Kashyap (1992) and Kashyap (1996), which is based on Farin's construction in Section 3.3. Although using Farin's method in Step 2 minimises theC2discontinuity between adjacent patches, Step 3 subsequently changes the positions of some of the control points involved in theC2conditions (7) to achieve globalC1continuity. Thus, Step 2 can be performed again, then Step 3, and so on.This gives an iterative process. It weakens the locality of the construction, but typically produces results of better visual quality; see Section 5. We note that this iterative procedure, one step of which is denoted byIM, can be applied to any of the Clough–Tocher variants described above.A second procedure, presented in Section 4.2.2 of Kashyap (1996), minimises theC2discontinuities within macro-patches. The result is a single cubic patch over each macro-triangle, but with onlyC0continuity between adjacent macro-patches. While it was suggested in Kashyap (1996) that this procedure can be used in combination with the former iterative method, we did not observe any significant improvement in any of our experiments based on this combination. The adjustment of control points when followed by a step ofIMis so small that one cannot observe any visual difference (not even using reflection lines or curvature plots). We thus do not include this second iterative procedure in our study in Section 5.So far, we have not considered triangles whose edges are boundary edges of Ω. Note that only triangles with at least one edge on the boundary of Ω are considered as boundary triangles.From the set of constructions detailed above, onlyCToandMGo, due to their complete locality per triangle, need no modification near boundaries. All the other constructions cannot be used over boundary triangles in the form they are defined.IfTis a boundary triangle then its neighbour across its boundary edge ε is not available. In that case, we first consider two options based on (15). One is to use (16), i.e., the perpendicular direction, to computeC2. The other is to use the edge midpoint (λ0=λ1=1/2), which does not preclude invariance to affine reparameterisations.If mid-edge gradients are known on boundary edges (i.e., not necessarily on all edges), one can use (25) with eithervε⊥εorvεin the direction given by Z, the split point ofT, and the boundary edge midpoint. Again, only the second choice may lead to invariance to affine reparameterisations.While it is likely that the degree of freedom per boundary edge can be put to a better use in some of the constructions, we do not investigate this any further.Before we can compare the above variants of the original Clough–Tocher construction, we need to generate suitable input data. We therefore turn to the problem of generating triangulations with the necessary gradient information from trimmed surfaces appearing in CAD models. While there are many suitable triangulation algorithms (Piegl and Richard, 1995; Piegl and Tiller, 1998; Kumar et al., 2001), the examples in this paper used the CADfix product (TranscenData, 2015) to import CAD models and generate the required data.CADfix performs the triangulation in the parameter space of each surface, using an incremental constrained Delaunay triangulation (CDT) algorithm similar to the approach described by Kallmann et al. (2004). For NURBS surfaces, the parameter space is naturally given by the rectangle inR2that is the tensor product of the spline domains in each parametric direction. For other surface types, a parameterisation is constructed that ensures that the edges bounding each face project to closed loops in parameter space. The input to the triangulation algorithm also includes a maximum permissible error between the surface and its meshed representation, and a flag that indicates whether there are constraints on the aspect ratio of the constructed triangles; see Fig. 4.Given this input, the triangulation algorithm starts by polygonising each boundary edge, beginning with a small number of samples and adaptively adding samples in any spans where the current representation exceeds the permissible error. The representation of each edge constructed in this stage is aC1cubic spline with derivatives that are also sampled from the edge. Each sample of a boundary loop corresponds to a parameter-space node inR2, and every pair of adjacent samples has a constrained segment added in the CDT algorithm. The output of this stage is therefore a triangulation of the face which satisfies the error bound on the edges but may be a very poor representation of the internal surface geometry. Note that this edge-first triangulation strategy guarantees that adjacent surfaces share the same boundary vertices and thus makes it possible to produce watertight models.The second stage of the algorithm iteratively refines the triangulation by examining the error at triangle centroids and triangle edge midpoints, until all triangles have an error that lies below the given bound. For all the examples in this paper, error was estimated with respect to theCToconstruction (with Bary), and the same triangulation and input data are fixed for any comparisons between constructions. Note that this error estimate, while being relatively cheap to compute, does not provide an upper bound. An upper bound on the error could be obtained, if needed, by using local convex hulls provided by the Bézier control nets of Clough–Tocher micro-patches; cf. (5).If required, the constraints on triangle aspect ratio are also satisfied in this second stage by inserting additional samples that are purely to split triangles with a high aspect ratio; see Fig. 4, right. Unfortunately, at the end of this process, there can still be a mismatch between theC1cubic splines constructed for each edge and the boundaries of the Clough–Tocher spline surface constructed for each face. An example is shown in Fig. 18. This is a necessary consequence of the geometry of the trimming curves, the image of which is generally not a cubic spline in the spline surface; generically, only straight edges in parameter space map to cubic curves on Clough–Tocher splines.We can repair this mismatch rather inelegantly, by simply moving the boundary control points constructed for the Clough–Tocher spline to the positions given by the edge cubic spline control points. Following the description given in Section 3, this involves a different value forT01andT10(for example) in calculating Step 1. This modification restoresC0continuity between adjacent Clough–Tocher splines, at the cost of introducing a jump in derivative at the edges of any triangle touching the boundary. In practice, we find that the modifications required by this correction are typically in-plane with the surface, so the spline is usually close to satisfyingG1continuity conditions even though it is no longerC1. This is shown in Fig. 18.We now compare and contrast the constructions introduced in Section 3. Our assessment criteria include invariance to affine reparameterisations, polynomial reproduction, visual quality (reflection lines, Gaussian and mean curvature), and approximation error.Table 1presents a quantitative comparison of the seven Clough–Tocher variants. The best ranked entries for each considered criterion (row) are shaded. None of the constructions performs best across all criteria and onlyFOandKaperform best in three out of four of them. Note, however, that different applications may put emphasis on different criteria.We now address each criterion in more detail.Polynomial reproductionReproduction of polynomials of a certain degree is an important property for nearly any spline construction. Higher polynomial reproduction leads to smaller approximation errors and faster convergence rates under refinement (Lai and Schumaker, 1998). Additionally, cubic precision, instead of quadratic, generally leads to fairer surfaces as we show in the examples below.InvarianceAs already mentioned above, shape invariance with respect to affine reparameterisations guarantees that a rescaling (or any other affine transform) of parameter space does not change the surface. More precisely, let A be a regular2×2matrix and T a translation vector. Then all verticesUiof ▵ are mapped toAUi+Tand all gradients∇fiare transformed toA¯∇fi, whereA¯is the inverse transpose of A (this follows from the chain rule). All positionsfiin 3D remain unchanged. Then, a splines(u)is invariant to affine reparameterisations ifs(U)=s¯(AU+T)for all values ofU∈Ω, wheres¯uses the transformed data. We investigate this property further in the example shown in Fig. 9. Clearly, using Inc2 as split points precludes this invariance. We thus include only Bary and Inc3 in Table 1.A related concept is that of affine covariance (often also called invariance) in 3D. When an affine transform is applied to the input data in 3D, the resulting spline is the same affine image of the one produced by the original input data. It follows from the definitions of the Clough–Tocher constructions that unless incentres from 3D are used, all variants are affinely covariant in the above sense. This property is not as important as the former invariance in our context; our focus is on converting existing models, not their affine images. And although the input NURBS models are affinely covariant in 3D, the triangulation algorithm used to generate our input data is not.LocalityComplete locality to one triangle simplifies implementation and boundary triangles do not require special treatment. On the other hand, constructions which make use of data from adjacent triangles lead to fairer surfaces, as we demonstrate in our examples below.OnlyCToandMGopossess complete locality. More precisely, the construction of the macro-patch overTis based on data attached toTonly.CTiandMGihave the same locality with respect to position and gradients in 3D, but require the split points of edge-adjacent triangles. Finally, all the other constructions need 3D data from adjacent triangles. The data required from edge-adjacent triangles are listed in Table 1.StorageNote that the 11 floats per vertex in Table 1 correspond to 3 floats for 3D position plus 6 for gradients plus 2 for parameter values.Storing 3 extra floats per edge can hardly be considered a serious disadvantage. However, if full gradients, not just their projections in a particular direction, are stored, 11/3 becomes 11/6. An interesting compromise, as already mentioned in Section 3.8, is to store only boundary mid-edge gradients (as opposed to all mid-edge gradients).Having explored theoretical aspects of Clough–Tocher spline variants, we now proceed to their visual assessment and error comparison on several examples, ranging from simple test cases to full trimmed NURBS models.The errors presented throughout the paper were, unless specified otherwise, computed as point to mesh distances over dense samples of both the input function (or model) and the Clough–Tocher approximation using the Computational Geometry Algorithms Library (CGAL, 2015). The errors are reported relative to the models' bounding box diagonals.Our first example is Farin's cubic function (Farin, 1985, Section 6)(26)c(x,y)=(x−0.3)3+x(y−0.3)2−0.1x,which we used to test polynomial precision of Clough–Tocher spline variants. The general setup is described in Fig. 5. Reflection lines, and Gaussian and mean curvature plots are shown in Fig. 6. The results are in accord with the expected respective quadratic and cubic precision shown in Table 1. While barycentres were used as split points in Fig. 6, we emphasise that the split point does not influence the precision of a particular construction. Additionally, running the iterative algorithmIMon the three constructions with only quadratic precision (first three columns) will force them to converge to the input cubic. ApplyingIMto any of the cubic precision constructions will not modify the reproduced cubic (which already minimisesC2discontinuities).Our second example is one of the Franke bivariate test functions (Franke, 1979):(27)f(x,y)=34e−14(9x−2)2−14(9y−2)2+34e−149(9x+1)2−110(9y+1)2+12e−14(9x−7)2−14(9y−3)2−15e−(9x−4)2−(9y−7)2.Maximum errors are summarised in Table 2, computed as function value differences. As all error plots over the whole spline look very similar across all constructions, we show only one of them, forKawith barycentres, in Fig. 7. Constructions that need special treatment over boundary triangles were modified by using edge perpendiculars as described in Section 3.8. Using edge midpoints gave nearly identical results.Shaded renderings and mean curvature plots on the whole domain, and reflection lines on a subpatch are shown in Fig. 8; all seven constructions are included. The split point has negligible influence on the resulting shape and thus results using Bary only are shown. The influence of split points is discussed further in Section 5.3. Gaussian curvature plots are not shown as they did not provide sufficient visual differences.Observe that while bothMGoandMGigive the smallest maximum errors (Table 2), they lead to visually poor results (Fig. 8). On the other hand, fairest shapes were achieved byFa,FO, andKa. These results can be further improved by applyingIMseveral times.As our next example, we consider a simple sine wave and data sampled from it using a sparse triangulation. As can be observed in Fig. 9, best results withCToare achieved when the 2D and 3D triangulation ‘agree’ as much as possible (i.e., when the parameterisation is close to isometric). The example shows that whileCTocan produce worse results than its invariant modificationCTiin some extreme situations, proper scaling in parameter space leads to better shapes using the original Clough–Tocher constructionCTo. We obtained similar results forMGowhen compared with its invariant counterpartMGi.One approach to quantifying fairness of Clough–Tocher splines is to consider the maximum magnitude of the differences of the right-hand and left-hand sides in (7), i.e., the maximum magnitude of thisC2discontinuity measure across edges between micro- and macro-patches. This measure is included in Fig. 9. Note how theC2discontinuity values closely correspond to the visual comparison using reflection lines and the significant improvement after affine reparameterisation.Our next test case is the sphere. We use the rational quartic Bézier triangle representation (Farin et al., 1987) of one of its octants and a tessellation of its equilateral parametric triangle into4lmacro-triangles, where l denotes the tessellation level. Convergence results for Gaussian and mean curvature, and approximation error are reported in Fig. 10for levelsl∈[1,…,5], i.e., over regular triangulations with 4 to 1024 triangles. The case withl=0, i.e., with only one macro-triangle, is not included, as a single triangle gives no information on the fairness between macro-patches.A visual comparison of Clough–Tocher approximations of an octant of the unit sphere forl=2, in terms of their fairness and approximation error, is shown in Fig. 11.FOproduced indistinguishable results from those generated byKa.KaGdenotes the variant ofKawhere mid-edge gradients (Section 3.8) are used at boundary edges (both projection options gave indistinguishable results); the improvement overKais significant along boundary edges and it compares favourably even toMGo, which relies on mid-edge gradients at all edges. We observed this behaviour across all tessellation levels; see Fig. 10. Note that the error plots (on logarithmic scale) exhibit the expected convergence rates, i.e., cubic forCTo,FO, andKa, which possess quadratic precision (in the case ofKa, this is due to boundary effects), and quartic forMGoandKaG, which have cubic precision over the entire triangulation.Fa, while superior toCTo, produced worse results thanFO,Ka, andKaG, both visually and error-wise, and is therefore not included. Only barycentres were considered in all constructions because other split points gave (nearly) the same results due to symmetry. For the same reason,CTiandMGiare not shown as they are indistinguishable from their included counterpartsCToandMGo, respectively.Our first CAD model example is the car front wing model shown in Fig. 12. We used only one of its trimmed NURBS patches in our tests. We consider two triangulations,▵Cand▵Q, both of which are shown in parameter space in Fig. 4. The corresponding spline approximations with reflection lines are shown in Fig. 13.While the triangulation▵Cmay seem inferior because it contains skinny triangles, it leads to superior results in terms of lateral artifacts when compared to▵Q. These artifacts are caused by the well-known ‘dinosaur back’ effect, which arises in nearly all spline approximations when control meshes are not aligned with features on a model (Farin et al., 2002; Augsdörfer et al., 2011). Additionally, once a triangulation has been fixed, the macro-edges of all macro-patches in 3D are uniquely determined and shared by all Clough–Tocher variants. On the other hand, skinny triangles may give rise to foldovers in the resulting spline; see Fig. 14, top row. However, in our tests it was possible to avoid foldovers by using Inc2 or Inc3. Additionally, Inc2 or Inc3 help to improve the quality of the results over Bary in macro-patches corresponding to skinny triangles (Fig. 14, bottom row).We gatheredC2discontinuity data of the constructions and also after several applications ofIM. The results are summarised in Fig. 15, including mean and maximalC2discontinuities. Observe that while the iterative procedureIMreducesC2discontinuities across macro-edges, it is not necessarily the case for micro-edges. Additionally, the maximalC2discontinuities across micro-edges are typically greater than those across macro-edges. Errors for all Clough–Tocher spline variants considered in this paper are reported in Table 3for▵Cand▵Q.As we have seen in Section 5.2, the split point position has little influence on the resulting shape when the triangulations are close to regular. On the other hand, as shown in Fig. 14, this influence is much higher for highly irregular meshes containing skinny triangles. We explore this in more detail in Fig. 16. The top row shows triangles in 2D and 3D which are of similar shape. All cases can be expected to lead to good splits of the macro-patch into micro-patches. In contrast, the bottom row shows two triangles that are of very different shapes. While the red split point for Inc2 is sensibly placed in 2D, its blue image in 3D lies too close to one of the macro-edges, giving rise to a skinny micro-patch and potential artifacts. Furthermore, Bary may give rise to poorly-shaped micro-patches caused by uneven distribution of angles between inner micro-patch edges at the image of the split point on the spline; see Fig. 14, top.In summary, Inc3 improves fairness of Clough–Tocher splines in some extreme cases, but Bary is generally the best (and also simplest) choice. Moreover, recall that Inc2 precludes invariance to affine reparameterisations (Section 5.1).Our second CAD model example is the toy car model shown in Fig. 17. The model is topologically closed but not watertight due to trimming. The triangle layout used for conversion to Clough–Tocher splines is visualised in Fig. 18, left. The middle image shows the result when each input NURBS patch is treated separately. This leads to gaps (as discussed in Section 4). These gaps can be avoided by repositioning some of the boundary vertices in Step 1, giving a watertight model (Fig. 18, right). Observe that the adjustment reduces the continuity of the spline in the immediate neighbourhood of the B-rep edges fromC1toC0, but the magnitude of the discontinuity remains relatively low. While not ideal, it is a considerable improvement over the version with gaps in Fig. 18, middle, and provides an analysis-ready model. The effect of the adjustment leading to watertight models composed of several Clough–Tocher splines is further evaluated in Fig. 19.

@&#CONCLUSIONS@&#
