@&#MAIN-TITLE@&#
A new formulation and Benders decomposition for the multi-period maximal covering facility location problem with server uncertainty

@&#HIGHLIGHTS@&#
We study the problem of allocating doctors to primary health centersWe model it as a multi-period facility location problem with server uncertaintyWe provide a new and stronger formulationWe present a Benders decomposition based solution methodOur proposed method solves large instances around 150–4000 times faster than CPLEX

@&#KEYPHRASES@&#
OR in health services,Location,Primary health centers,Benders decomposition,Uncertainty,

@&#ABSTRACT@&#
Facility location problems reported in the literature generally assume the problem parameter values (like cost, budget, etc.) to be known with complete certainty, even if they change over time (as in multi-period versions). However, in reality, there may be some uncertainty about the exact values of these parameters. Specifically, in the context of locating primary health centers (PHCs) in developing countries, there is generally a high level of uncertainty in the availability of servers (doctors) joining the facilities in different time periods. For transparency and efficient assignment of the doctors to PHCs, it is desirable to decide the facility opening sequence (assigning doctors to unmanned PHCs) at the start of the planning horizon. We present a new formulation for a multi-period maximal covering location problem with server uncertainty. We further demonstrate the superiority of our proposed formulation over the only other formulation reported in the literature. For instances of practical size, we provide a Benders decomposition based solution method, along with several refinements. For instances that the CPLEX MIP solver could solve within a time limit of 20 hours, our proposed solution method turns out to be of the order of 150–250 times faster for the problems with complete coverage, and around 1000 times faster for gradual coverage.A discrete facility location problem (FLP) is the problem of finding the optimal (defined with respect to certain objectives) subset within a given set of candidate facility locations. FLPs have been widely used/studied in the context of health care facilities (Ghaderi & Jabalameli, 2013; Pacheco & Casado, 2005; Rahman & Smith, 2000). Within health care, they have been studied in the context of hospitals (Baray & Cliquet, 2013); emergency medical services (Cho, Jang, Lee, & Turner, 2014; Jayaswal, 2014; Ramirez-Nafarrate, Lyon, Fowler, & Araz, 2015; Silva & Serra, 2008); and preventive health care (Verter & Lapierre, 2002; Zhang, Berman, & Verter, 2012). FLPs have also been studied in other contexts like schools (Antunes & Peeters, 2000; 2001); banks (Wang, Batta, & Rump, 2002); jails (Hernández et al., 2012); distribution centers (Balcik & Beamon, 2008; Geoffrion & Graves, 1974); and fire stations (Schilling, Revelle, Cohon, & Elzinga, 1980). These problems mostly assume user demand and facility/transportation cost as given and time independent. However, when the problem parameters like user demand or facility/transportation cost change over time, an optimal facility location decision in one period may become sub-optimal in future periods. In such a situation, the optimal facility location decision needs to be revised over time according to changes in the demand/cost. However, revisiting facility location decisions in future periods may involve relocating/closing facilities opened in earlier periods. Relocating/closing facilities is generally costly, and may even be prohibitive in many cases. So, when the problem parameters are expected to change over time, a better idea is to plan ahead for more than one period. This gives rise to a multi-period FLP (MFLP), with parameter values changing over multiple time periods (Nickel & Saldanha da Gama, 2015).Several variants of MFLP have been studied in the literature since its introduction by Ballou (1968). Melo, Nickel, and Saldanha da Gama (2006); Wesolowsky and Truscott (1975) present the problem with constraints on location and relocation of facilities. Dias, Captivo, and Clímaco (2008); 2006); Dias, Eugénia Captivo, and Clímaco (2007) consider MFLPs wherein facilities can be closed and reopened. Canel, Khumawala, Law, and Loh (2001); Saldanha da Gama and Captivo (1998); Melo et al. (2006); Wesolowsky and Truscott (1975) study the problems wherein closing of facility involves capital expenditure. Canel et al. (2001); Dias et al. (2007); Erlenkotter (1981); Melo et al. (2006); Shulman (1991); Thanh, Bostel, and Péton (2008), among others, have studied MFLPs wherein facility capacities change over time. MFLPs with budget restrictions have been studied by Antunes and Peeters (2000, 2001); Ghaderi and Jabalameli (2013); Melo et al. (2006); Wang, Batta, Bhadury, and M Rump (2003). Antunes and Peeters (2000, 2001); Melo et al. (2006) have studied MFLPs with both budget and capacity constraints. Interested readers are referred to a detailed survey of the literature on MFLPs by Arabani and Farahani (2012) and Nickel and Saldanha da Gama (2015).Classical versions of FLP/MFLP assume the problem parameter values (like demand, cost, budget, etc.) to be known with complete certainty, even if they change over time (as in MFLP). However, in reality, there may be some uncertainty about the exact values of these parameters. Albareda-Sambola, Fernández, and Saldanha da Gama (2011); Averbakh and Berman (1997, 2000); Berman and Wang (2011); Burkard and Dollani (2002); Chen and Lin (1998); Killmer, Anandalingam, and Malcolm (2001); Vairaktarakis and Kouvelis (1999) have accounted for the uncertainty in demand in FLP. Uncertainty in cost has been considered by Burkard and Dollani (2002); Chen and Lin (1998); Vairaktarakis and Kouvelis (1999). Hernández et al. (2012) study an MFLP with stochastic demands arising in the context of locating a given number of new jails in Chile, besides deciding when and where to expand the existing capacity. Nickel, Saldanha da Gama, and Ziegler (2012) consider an MFLP with service level and investment decisions, wherein the demand as well as the rate of return on investments are uncertain. Albareda-Sambola, Alonso-Ayuso, Escudero, Fernández, and Pizarro (2013) study an MFLP with uncertainty in demand, (facility opening and maintenance) costs and the minimum number of facilities to open in each time period. We refer the readers to Snyder (2006) and Correia and Saldanha da Gama (2015) for a detailed review of the literature on FLPs under uncertainty.Uncertainty may also arise with respect to the availability of servers/resources. This is generally true in the case of locating Primary Health Centers (PHCs), which are single doctor clinics meant to provide very basic health care in rural areas in developing countries. Due to acute shortage of doctors in rural areas, many of these PHCs remain temporarily inoperative. Moreover, there is a high degree of uncertainty regarding the number of doctors that will be available to join these PHCs in any given period. Such an uncertainty in the availability of servers/resources has not received much attention in the existing MFLP literature. Current, Ratick, and ReVelle (1998) consider a situation wherein the final number of facilities to be sited is uncertain. They use a minimax regret approach to find the initial set of facilities for a p-median FLP. However, their work does not consider decisions for multiple time periods. To the best of our knowledge, Vatsa and Ghosh (2014) is the only paper to have considered such an uncertainty in the context of an MFLP.In the current paper, we study an MFLP with uncertainty in the number of servers (doctors) available in each period of the planning horizon. Similar to Vatsa and Ghosh (2014), we consider the sequence of opening facilities over time as the decision variable, which makes this problem different from classical MFLPs. Through this paper, we make the following contributions to the scarce literature on MFLP with uncertainty in server availability:1.We present a formulation of the problem, which we show to be stronger than the only other formulation available in the literature.We present a Benders decomposition based exact solution method, and refinements thereof, to solve realistic problem instances.The remainder of the paper is organized as follows. Section 2 describes the problem in detail, followed by mathematical models and their comparison with the existing models in the literature. Section 3 presents a Benders decomposition based solution approach, followed by computational experiments in Section 4. The paper concludes with a summary and directions for future research in Section 5.The problem described in this section is motivated by the one faced by district administrations in providing primary health care facilities to the rural population in developing countries. The World Health Organization (WHO), through its Alma-Ata declaration (1978), expressed the need for a Primary Health Center (PHC) for every 30,000 population in the plain areas and for every 20,000 in tribal and hilly areas. However, achieving this target (set by the Alma-Ata declaration) has been a challenge in most of the developing countries, largely due to shortage of doctors and increasing population (Rohde et al., 2008; Walley et al., 2008). Consequently, there is generally a shortage of PHCs. In many cases, even if PHCs exist, many of them remain unmanned due to shortage of doctors. When doctors do become available over a period of time, the challenge facing the district administration is to find the best sequence of unmanned PHCs to assign the doctors to, so as to cover the maximum population over the entire planning horizon. For transparency in policy making and implementation, it is essential that this sequence of assigning doctors to unmanned PHCs be pre-decided at the start of the planning horizon. A PHC becomes operational once a doctor is assigned to it. To be consistent with the FLP/MFLP literature, we refer to a PHC with an assigned doctor as an “open facility” wherever required in the rest of the paper.To describe the problem setting, we assume a planning horizon consisting of discrete time periodst∈T={1,2,…,|T|}. Furthermore, we consider a district, which is divided into population zones (e.g., villages), each of which is represented as a nodei∈I={1,2,…,m}. Letj∈J={1,2,…,n}denote any PHC without an assigned doctor. Jbis the set of PHCs that are manned with doctors at the beginning of the planning horizon, i.e., att=0. In the rest of the paper, we use the term “candidate facility” to refer to a PHC without an assigned doctor att=0. Let δijbe the distance between population zone i and candidate facility j. Opening a facility at j (i.e., assigning a doctor to the PHC at j) covers the entire population at node i if j is within a given distance δ0 from node i, i.e., δij≤ δ0. We use a parameteraij=1if facility j is within the covering distance δ0 from demand node i, 0 otherwise. We use Nito denote the set of candidate facilities that can cover a demand node i, i.e.,Ni={j∈J:aij=1}. Let ditrepresent the population (demand) at node i in time period t. In general, there will be some amount of uncertainty about the future population. However, our limited study of the population growth rates in various districts of Gujarat, India, indicated a very high correlation between the population growth rates between two successive decades. Hence, we assume the population in any time period to be known with certainty since it can be estimated fairly accurately using the current population and the growth rate.If the exact number of doctors (henceforth called servers) that will become available to join PHCs in each period of the planning horizon were known with complete certainty, then the district administration would ideally like to assign them to those candidate facilities (i.e., unmanned PHCs) that maximize the total population covered over the planning horizon. This is a classical Multi-period Maximal Covering Location Problem (MMCLP), as introduced by Gunawardane (1982). However, the exact number of doctors that will become available to join PHCs in each period of the planning horizon is generally uncertain. We describe the uncertainty in the server availability using a parameter ptsto represent the number of new servers that become available at time t under scenario s ∈ S. We assume that once a newly available server is assigned to a facility (i.e., a facility is opened), it remains with the assigned facility throughout the planning horizon (in reality, doctors may leave in the middle of the planning horizon, which we leave as a direction for future research). In presence of such an uncertainty, one of the plausible objectives of the district administration would be to find the sequence of opening candidate facilities (assigning doctors to unmanned PHCs) that maximizes the expected coverage over all possible server availability (doctor joining) scenarios. However, this would require assigning probabilities to the different scenarios, which is a challenging exercise, particularly when the decision environment has multiple interdependent uncertain factors (Kouvelis & Yu, 1996). In absence of the knowledge of these probabilities, robust optimization is generally used. One plausible robust objective is to maximize the minimum coverage across all scenarios. This approach results in overly conservative decisions (Kouvelis & Yu, 1996; Snyder, 2006). In this paper, we use a minimax regret approach, which is a lesser conservative criterion. The regret from a proposed solution in any scenario s is defined as the difference between the maximum population that could have been covered (denoted byζs*) and the population actually covered in that scenario using the proposed solution. We refer to the resulting problem as the Multi-period Maximal Covering Location Problem under Server Uncertainty (MMCLPSU). We summarize below the notation used to define the problem:T: Set of time periods in the planning horizon, t ∈ TS: Set of all possible server availability scenarios, s ∈ Spts: Number of new servers that become available at time t under scenario sI: Set of demand nodes,i∈{1,2,…,m}dit: Demand of demand node i in time period tJ: Set of candidate facility locations,j∈{1,2,…,n}Jb: Set of initially open facilitiesδij: Distance between demand node i and candidate facility jδ0: Covering distance such that candidate facility j is said to cover node i if δij≤ δ0aij: 1 if facility j is within the covering distance δ0 from demand node i, 0 otherwiseNi: Set of candidate facilities that can cover a demand node i, i.e.,Ni={j∈J:aij=1}ζs*: Maximum demand that can be covered in scenario s over the complete planning horizonTo mathematically model the problem, we define the following decision variables:yjts: 1 if candidate facility j is open in time period t under scenario s, 0 otherwisexits: 1 if demand node i is covered in period t under scenario s, 0 otherwiserjl: 1 if facility j is lth(l∈{1,2,…,n})in the sequence of opening facilities, 0 otherwiseUsing these variables, the objective function of the MMCLPSU can be defined asminmaxs∈S{ζs*−∑i∈I∑t∈Tditxits}. With the above notation, the MMCLPSU, as presented by Vatsa and Ghosh (2014), can be mathematically stated as follows:[MMCLPSU-V&G:](1)Minθ(2)s.t.θ≥ζs*−∑i∈I∑t∈Tditxits∀s∈S(3)xits≤∑j∈Niyjts+∑j∈Jbaij∀i∈I,t∈T,s∈S(4)∑j∈Jyjts=∑t′≤tpt′s∀t∈T,s∈S(5)∑l∈{1,2,…,n}rjl=1∀j∈J(6)∑j∈Jrjl=1∀l∈{1,2,…,n}(7)∑l∈{1,2,…,n}lrjl≤∑t′≤tpt′s+n(1−yjts)∀j∈J,t∈T,s∈S(8)0≤xits≤1∀i∈I,t∈T,s∈S(9)θ≥0(10)yjts∈{0,1}∀j∈J,t∈T,s∈S(11)rjl∈{0,1}∀j∈J,l∈{1,2,…,n}(1) and (2) together help linearize the above described objective function (minmaxs∈S{ζs*−∑i∈I∑t∈Tditxits}).ζs*is the maximum coverage possible in a given scenario s ∈ S. Its value is obtained by solving (12)–(17), as given below, which is an MMCLP. Constraint set (3) ensures that any demand node is covered in any period and scenario only if at least one open facility exists within its covering distance. The number of open facilities in any period and scenario is specified by (4). Constraint sets (5) and (6) ensure that each facility is given a unique rank in the sequence. Constraint set (7) links the variables rjland yjtsbased on the condition that a facility at j will be open in period t and scenario s (yjts=1) only if the rank of the facility j is less than or equal to the total number of new servers that become available till period t in scenario s. Even though xitsare binary, Vatsa and Ghosh (2014) show that relaxing them as continuous variables leaves the solution to the MMCLPSU unchanged. Hence, constraint set (8) relaxes xitsas continuous variables. Constraints (9)-(11) are the non-negativity and binary constraints.[MMCLPs:](12)Maxζs=∑i∈I∑t∈Tditxits(13)s.t.xits≤∑j∈Niyjts+∑j∈Jbaij∀i∈I,t∈T(14)yjts≥yj(t−1)s∀j∈J,t∈T∖{1}(15)∑j∈Jyjts=∑t′≤tpt′s∀t∈T(16)0≤xits≤1∀i∈I,t∈T(17)yjts∈{0,1}∀j∈J,t∈TConstraint set (14) in MMCLPsensures that a facility once opened remains open throughout the planning horizon. Such a constraint is also required for the MMCLPSU, but it is already implied by the use of sequence variable rjl.For a problem with m demand nodes, n candidate facilities, and |T| time periods, the total number of scenarios |S| =(n+|T|n)=(n+|T|)!n!(|T|)!. For MMCLPSU-V&G, this results inn|T∥S|+n2binary (for yjts, rjl) and m|T||S| continuous (for xits) variables, and|S|+(m+n+1)|T∥S|+2nconstraints. For example,m=100,n=15,|T|=4results in|S|=3,876scenarios and 232, 785 binary and 1, 550, 400 continuous variables, and 1, 771, 362 constraints (excluding binary and lower/upper bound constraints). Although using scenario dominance conditions, Vatsa and Ghosh (2014) are able to reduce the problem size considerably, the problem is still difficult to solve, taking around 40 hours (using CPLEX MIP solver) in some instances. We, therefore, present an alternative formulation for the MMCLPSU, which results in fewer variables and constraints. We further show that our formulation is better than MMCLPSU-V&G.To introduceour formulation, we define a new set of decision variableszjk=1if candidate facility j is one among thek∈{0,1,…,n}candidate facilities that have been opened during the planning horizon, 0 otherwise. Clearly, the number of candidate facilities opened depends on the time period t of the planning horizon and the server availability scenario s, given by the relationk(t,s)=∑t′≤tpt′s. It is important to note that different combinations of t and s may result in the same number of open facilities (k). For ease of notation, we explicitly state the dependence of k on t and s as k(t, s) in the rest of the paper only when t or s takes a specific value. The variable zjkis related to the variable yjtsand rjlin MMCLPSU-V&G as follows:(18)zjk(t,s)=yjts∀j∈J,t∈T,s∈S(19)zjk−zj(k−1)=rjk∀j∈J,k∈{1,2,..,n}The variables zjk, by definition, should satisfy the following relations:(20)zjk≥zj(k−1)∀j∈J,k∈{1,2,…n}(21)∑j∈Jzjk=k∀k∈{0,1,2,…n}For example, consider a solution with the zjkvalues as given in Table 1. The sequence of opening the 5 facilities in this example is B–D–E–A–C. With a server availability scenario s, if 2 new servers become available by the end of time t, i.e.,∑t′≤tpt′s=2,then the two candidate facilities to be opened will be B and D, i.e.,zB2=zD2=1,whilezA2=zC2=zE2=0.With the above variable definition, the MMCLPSU can be mathematically restated as follows:[MMCLPSU:](22)(1),(2),(8),(9),(20),(21)xits≤∑j∈Nizjk(t,s)+∑j∈Jbaij∀i∈I,t∈T,s∈S(23)zjk∈{0,1}∀j∈J,k∈{0,1,2,…n}Constraint set (22) ensures that any demand node is covered in any period and scenario only if at least one open facility exists within its covering distance. This combines (3) and (18). Like MMCLPSU-V&G, we are relaxing xitsas continuous variables (in (8)) since doing so leaves the solution to the model unchanged. Table 2 provides a comparison of the resulting model size for MMCLPSU versus MMCLPSU-V&G. Takingm=100,n=15,|T|=4results in|S|=3,876scenarios and only 240 binary variables and 1, 554, 517 constraints (excluding binary and lower/upper bound constraints), as opposed to 232, 785 binary variables and 1, 771, 362 constraints in the case of MMCLPSU-V&G. The number of continuous variables remains the same. Moreover, constraint set (21) fixes zj0 to 0 and zjnto 1 ∀j ∈ J, further reducing the computational effort in MMCLPSU. We now show mathematically that MMCLPSU is better than MMCPLSU-V&G.Proposition 1PLP(MMCLPSU)⊂PLP(MMCLPSU−V&G),where PLP(·) is the polyhedron of the LP relaxation of (·).Given a feasible solution[z^,x^,θ^]to the LP relaxation of MMCLPSU, we can construct a variablerjk=z^jk−z^j(k−1)∀j∈J,k∈{1,2,..,n}. Now,∑jrjk=∑jz^jk−∑jz^j(k−1)=k−(k−1)=1[∵∑j∈Jz^jk=kusing(21)]∑k≥1rjk=∑k≥1z^jk−∑k≥1z^j(k−1)=z^jn−z^j0=1[∵z^jn=1andz^j0=0using(21)andLPrelaxationof(23)]Hence, rjksatisfies constraint sets (5) and (6) of MMCLPSU-V&G. Now, we substitute yjtswithz^jk,wherek=∑t′≤tpt′s,and check if[z^,x^,θ^]satisfies the other constraints of MMCLPSU-V&G. Constraints (7), i.e.,∑l∈{1,2,…,n}lrjl≤∑t′≤tpt′s+n(1−yjts)∀j∈J,t∈T,s∈S,will be satisfied by[z^,x^,θ^]if:(24)∑k≥1krjk−n(1−yjts)≤∑t′≤tpt′s∀j∈J,t∈T,s∈S(25)⇔∑k≥1k(z^jk−z^j(k−1))−n(1−z^jk)≤k∀j∈J,k∈{0,1,2,..,n}:k=∑t′≤tpt′s(26)⇔[z^j1−z^j0]+[2z^j2−2z^j1]+⋯+[nz^jn−nz^j(n−1)]+nz^jk≤k+n∀j,k(27)⇔nz^jn+nz^jk−z^j0−z^j1−z^j2−⋯−z^j(n−1)≤k+n∀j,k(28)⇔nz^jk−z^j1−z^j2−⋯−z^j(n−1)≤k∀j,k[∵z^jn=1,z^j0=0](29)⇔nz^jk−z^j1−z^j2−⋯−z^j(n−1)−z^jn≤k−1∀j,k[∵z^jn=1](30)⇔(z^jk−z^j1)+(z^jk−z^j2)+..+(z^jk−z^j(k−1))≤k−1+(z^j(k+1)−z^jk)+….+(z^jn−z^jk)∀j,kSincez^jk≥z^j(k−1)∀j,k≥1(using (20)), each of the terms within parenthesis in the last inequality lies between 0 and 1. Since there arek−1terms on the left-hand side (LHS) of inequality (30), LHS cannot be greater thank−1. The right-hand side (RHS) of (30) isk−1+ some non-negative terms. Hence, inequality (30) holds true. Consequently, the inequality∑llrjl≤∑t′≤tpt′s+n(1−yjts)∀j∈J,t∈T,s∈S,is satisfied by[z^,x^,θ^]. Furthermore, constraint set (3) of MMCLPSU-V&G is the same as (22) of MMCLPSU (replacing yjtswith zjk, wherek=∑t′≤tpt′s). Therefore,[z^,x^,θ^]is a feasible solution to the LP relaxation of MMCLPSU-V&G.It follows from (18) that different combinations of scenario s and time t in MMCLPSU that result in the same numberk=∑t′≤tpt′sof open facilities, will always have the same value for the variable yjts∀j ∈ J. However, this is not true for MMCLPSU-V&G. This implies that a solution that is feasible to the LP relaxation of MMCLPSU-V&G may not be feasible to the LP relaxation of MMCLPSU. We now prove that this is indeed true.Summing over j ∈ J the constraint set (7) in MMCLPSU-V&G, we get:(31)∑j∈Jyjts≤∑t′≤tpt′s+(n−1)/2∀t∈T,s∈SComparing (31) with constraint set (4) suggests that there must be at least one j for which constraint (7) will be non-binding. Now, consider a period t1 in scenario s1, and a period t2 in scenario s2 such that∑t′≤t1pt′s1=∑t′≤t2pt′s2=k. Let facility A be a facility under scenario s1 and period t1 for which constraint (7) is non-binding. Assume a feasible LP relaxation solution of MMCLPSU-V&G that is also feasible to the LP relaxation of MMCLPSU. This impliesyAt1s1=yAt2s2=z^Akfor that solution. Let us generate another solution by increasingyAt1s1by ϵ (since (7) is non-binding foryAt1s1), where ϵ is an infinitesimal positive number. This will violate constraint (4) of MMCLPSU-V&G. Nonetheless, if we simultaneously decreaseyBt1s1by the same amount ϵ, where B is any candidate facility other than A, then the solution remains feasible to MMCLPSU-V&G. However, this solution will not be feasible to MMCLPSU sinceyAt1s1+ϵ≠yAt2s2=z^Ak.Thus, any solution to the LP relaxation of MMCLPSU is also a solution to the LP relaxation of MMCLPSU-V&G. However, the converse is not true.□ZLP(MMCLPSU)=ZLP(MMCLPSU−V&G),where ZLP(·) is the LP relaxation based lower bound of (·).In Proposition 1, it is shown that the LP feasible region of MMCLPSU is a proper subset of the LP feasible region of MMCLPSU-V&G. We prove Proposition 2 by showing below that an optimal solution to the LP relaxation of MMCLPSU-V&G falls in the LP feasible region of MMCLPSU.Consider an optimal solution[r^*,y^*,x^*,θ^*]to the LP relaxation of MMCLPSU-V&G. Then, we have:(32)y^jts*≤min{1,(k+n−∑llr^jl*)/n}(from(7)and(10)(33)∑jy^jts*=k(from(4))wherek=∑t′≤tpt′s. At optimality, the objective of regret minimization ensures that variables yjtstake the maximum possible values. Hence, every combination of scenario s and time t such thatk=∑t′≤tpt′s,will have the same value ofy^jts*(say=z^jk) ∀j ∈ J. Clearly,z^jk≥z^j(k−1)(from (32) and (33)). Furthermore,∑jz^jk=∑jy^jts*=k(from (33)). All other constraints in MMCLPSU-V&G and MMCLPSU are similar. Consequently,[r^*,y^*,x^*,θ^*]is a feasible LP solution to MMCLPSU, and therefore, an optimal LP solution to MMCLPSU.□It follows from Proposition 1 that MMCLPSU is a better formulation compared to MMCLPSU-V&G even though both have the same LP relaxation based lower bound. This is highlighted using the example depicted in Fig. 1, which shows the LP feasible regions BC and OABC corresponding to two alternative formulations, let us say f1 and f2, respectively. Clearly, PLP(f1) ⊂ PLP(f2), and both f1 and f2 have the same LP bound at B. However, after branching at the root node in a branch-and-bound tree, the feasible region for f1 reduces to CG, while that for f2 reduces to OFGC and DAE. Clearly, f1 will never take more computational effort in getting to the IP optimal solution G.Table 3 presents a comparison of the computation times taken to obtain the optimal solution (using CPLEX MIP solver) from the two formulations for different instances. Clearly, MMCLPSU solves the problem significantly faster. For example, for instance 2 withn=15,m=100,and|T|=4,the computation time required by MMCLPSU-V&G is more than 11 times that required by MMCLPSU. For instance 3, MMCLPSU-V&G fails to solve the problem even after a CPU time limit of 20 hours, while MMCLPSU solves it in close to an hour. For larger problem sizes, MMCLPSU-V&G fails to find the optimal solution for any of the 5 instances within the 20 hour time limit. MMCLPSU, on the other hand, is able to solve all the 5 instances within the same time limit. However, the CPU time required to solve instances withn=15,m=200,|T|=4is significantly large even for MMCLPSU, the maximum being close to 8 hours. For larger instances, it will be difficult to solve MMCLPSU to optimality within a reasonable time limit. Therefore, we present in Section 3 a Benders decomposition based solution approach to speed up the solution process.In MMCLPSU, we assumed a particular facility j can either cover or not cover a demand node i depending on whether the node i lies within or outside the covering distance from j. Accordingly, we defined a parameteraij=1if facility j can cover demand node i, 0 otherwise. However, in most of the situations, the coverage does not change so abruptly. There is instead a range of distances, between a minimum and a maximum covering distance (δminand δmax), within which the coverage reduces gradually with distance. Such a gradual coverage is considered by Berman, Drezner, and Krass (2010); Berman, Krass, and Drezner (2003); Church and Roberts (1983); Karasakal and Karasakal (2004). However, none of them consider a multi-period planning horizon or server uncertainty. We now generalize MMCLPSU by allowing for gradual/partial coverage of a demand node if it lies between δminand δmaxfrom an open facility.For the complete coverage version of MMCLPSU, it was sufficient to know whether a demand node i was covered or not in a given time and scenario. Accordingly, we defined a variable xits. However, such a variable definition is not sufficient to model the gradual coverage since to determine the level of coverage of a node i, it is also important to know which specific facility covers it. Accordingly, we now define a variablexijts=1if the demand node i is covered (fully or partially) by facility at j in period t and scenario s, 0 otherwise. In this problem, the coverage function can take fractional values if the demand node i is within δminand δmaxfrom facility at j, i.e., aij∈ [0, 1]. Similarly, we redefine Nias the set of candidate facilities that are within the maximum covering distance δmaxfrom demand node i. We also defineNibas the set of facilities open at the beginning of the planning horizon that lie within δmaxof node i. The resulting problem, which we refer to as the Multi-period Maximal Covering Location Problem under Server Uncertainty with Partial coverage (MMCLPSU-P), can be formulated as follows:[MMCLPSU-P:](34)Minθ(35)s.t.θ≥ζs*−∑i∈I∑j∈Ni∪Nib∑t∈Taijditxijts∀s∈S(36)xijts≤zjk(t,s)∀i∈I,j∈Ni,∀t∈T,s∈S(37)∑j∈Ni∪Nibxijts≤1∀i∈I,t∈T,s∈S(38)zjk≥zj(k−1)∀j∈J,k∈{1,2,…n}(39)∑j∈Jzjk=k∀k∈{0,1,2,…n}(40)xijts≥0∀i∈I,j∈Ni∪Nib,t∈T,s∈S(41)θ≥0(42)zjk∈{0,1}∀j∈J,k∈{0,1,2,…n}(34) and (35) help linearize the objective of minimizing the maximum regret, similar to the MMCLPSU formulation above.ζs*is the maximum coverage possible in a given scenario s ∈ S. Its value is obtained by solving (43)–(49), as given below, which we call as the Multi-period Maximal Covering Location Problem with partial coverage (MMCLP-P). Constraint set (36) ensures that a demand node is covered by any facility that lies within δmaxfrom the demand node, only if the facility is open. Constraint set (37) ensures that a demand node is covered by at most one facility. Constraints (38) and (39) are the same as (20) and (21) respectively. xijts, which by definition is a binary variable, can be relaxed as a continuous variable (Vatsa & Ghosh, 2014). Since xijts≤ 1 is already implied by (37), continuous relaxation of binary xijtsis stated as (40). (41) and (42) are non-negativity and binary constraints. Clearly, MMCLPSU is a special case of MMCLPSU-P whenδmin=δmax.[MMCLP-Ps:](43)Maxζs=∑i∈I∑j∈J∑t∈Taijditxijts(44)s.t.xijts≤yjts∀i∈I,j∈Ni,∀t∈T(45)∑j∈Ni∪Nibxijts≤1∀i∈I,t∈T(46)yjts≥yj(t−1)s∀j∈J,t∈T∖{1}(47)∑j∈Jyjts=∑t′≤tpt′s∀t∈T(48)0≤xijts≤1∀i∈I,j∈Ni∪Nib,t∈T(49)yjts∈{0,1}∀j∈J,t∈TAll the constraints of MMCLP-Psare also implied in MMCLPSU-P. Here again, as in MMCLPs, constraint set (46) ensures that a facility once opened remains open throughout the planning horizon. Such a constraint is redundant in MMCLPSU-P, as it is already implied by the use of the sequence variable rjl.Like MMCLPSU for the complete coverage, MMCLPSU-P is also a better formulation compared to the formulation given by Vatsa and Ghosh (2014) for the problem with gradual coverage. This can be proven along similar lines as done for MMCLPSU, and hence we skip the details. We now present the Benders decomposition based solution method for the complete and gradual coverage versions of the problem.Benders decomposition is a partition based solution technique, which has been applied to solve mixed integer programming problems (Benders, 1962). It has been successfully applied to (multicommodity) network design (Geoffrion & Graves, 1974), facility location (Wentges, 1996), and hub location (de Camargo, de Miranda, & Ferreira, 2011; de Camargo, de Miranda Jr, & Luna, 2009; Contreras, Cordeau, & Laporte, 2011). Costa (2005) provides a detailed review of the application of Benders decomposition to fixed-charge network design problems.In Benders decomposition method, the original problem is partitioned into a master problem and a sub-problem. The master problem and the sub-problem are solved iteratively by utilizing the solution of one in the other. The master problem contains a set of the complicating (integer) variables and their associated constraints. The sub-problem is obtained by temporarily fixing the integer variables in the original problem using the solution of the master problem. At each iteration, a relaxed master problem is solved to obtain a lower bound. The sub-problem solution generates a Benders cut, which is added back to the master problem. The master problem is completely defined when all possible Benders cuts are added to the problem. However, in practice this is unnecessary, and at each iteration a relaxed master problem is solved, where only a subset of all possible Benders cuts is added to the master problem. For a minimization problem, the relaxed master problem solution at any iteration provides a lower bound to the original problem, while the sub-problem solution generates an upper bound. The Benders algorithm converges to an optimal solution for the original mixed integer programming problem if such a solution exists.In Section 3.1, we describe how the Benders decomposition based solution method is applied to MMCLPSU. The Benders decomposition for MMCLPSU-P shares a lot of similarity with MMCLPSU. Hence, we relegate its description to Appendix A.As shown by Vatsa and Ghosh (2014), removal of the set Jbof pre-existing facilities, if any, along with the demand nodes that they cover does not affect the optimal objective function value of MMCLPSU. We use this result to eliminate set Jbfrom further consideration in MMCLPSU. By fixing the binary variables zjkasz¯jkwe obtain the following primal sub-problem:[MMCLPSU-PSP:](50)Minθ(51)s.t.θ+∑i∈I∑t∈Tditxits≥ζs*∀s∈S(52)xits≤∑j∈Niz¯jk(t,s)∀i∈I,t∈T,s∈S(53)xits≤1∀i∈I,t∈T,s∈S(54)θ,xits≥0∀i∈I,t∈T,s∈SLet αs, βitsand ρitsbe the dual variables associated with the constraint set (51), (52) and (53), respectively. The dual of this problem can be formulated as follows:[MMCLPSU-DSP:](55)Max∑s∈Sζs*αs−∑i∈I∑t∈T∑s∈Sρits−∑i∈I∑t∈T∑s∈S(βits∑j∈Niz¯jk(t,s))(56)s.t.ditαs−βits−ρits≤0∀i∈I,t∈T,s∈S(57)∑s∈Sαs≤1(58)αs,βits,ρits≥0∀i∈I,t∈T,s∈SLet H denote the set of all extreme points of MMCLPSU-DSP. For each extreme point h ∈ H, we denote the corresponding values of the dual variables asαsh,βitsh,ρitsh,and the corresponding values of the primal variables asxitsh,θh. The Benders cut generated by the extreme point h to be included in the master problem is given by:(59)η≥∑s∈Sζs*αsh−∑i∈I∑t∈T∑s∈Sρitsh−∑i∈I∑t∈T∑s∈S(βitsh∑j∈Nizjk(t,s))Since the master problem deals with zjkvariables, rearranging the last term of (59) gives the following alternative representation of the Benders cuts:(60)η≥∑s∈Sζs*αsh−∑i∈I∑t∈T∑s∈Sρitsh−∑j∈J∑t∈T∑s∈S(∑i∈Njβitsh)zjk(t,s)where Njis the set of demand nodes that can be covered by any candidate facility j, i.e.,Nj={i∈I:aij=1}. The master problem can be stated as follows:[MMCLPSU-MP:](61)Minη(62)s.t.zjk≥zj(k−1)∀j∈J,k≥1(63)∑j∈Jzjk=k∀k∈{0,1,…,n}(64)η≥∑s∈Sζs*αsh−∑i∈I∑t∈T∑s∈Sρitsh−∑j∈J∑t∈T∑s∈S(∑i∈Njβitsh)zjk(t,s)∀h∈H(65)zjk∈{0,1},η≥0∀j∈J,k∈{0,..,n}Proposition 3The primal sub-problem MMCLPSU-PSP is always feasible and bounded for any feasible solutionz¯jkto MMCLPSU-MP.A feasible solution to the master problem at any iteration provides a facility opening sequence, indicated by the values ofz¯jk. Such a sequence obtained from the master problem also conveys the set of open facilities, and hence the coverage of each demand node (defined by the value of the variable xits), in each time period t and scenario s. Hence, a feasible solution to the master problem always produces a feasible solution to the corresponding sub-problem. This feasible solution can be used to calculate the overall coverage and the regret in each scenario s. Using the regret value in each scenario, the objective function value of the sub-problem, which is the maximum regret across all scenarios, can be obtained. Since the regret in any scenario, and hence the maximum among them, is finite, the optimal solution to the sub-problem is always bounded.□We now present an algorithm to efficiently solve MMCLPSU-DSP since it needs to be solved iteratively in the Benders decomposition framework.Proposition 4For a given solutionz¯jkto MMCLPSU-MP,Algorithm 1gives an optimal solution to MMCLPSU-DSP.First, we prove that Algorithm 1 gives a feasible solution to MMCLPSU-DSP. Clearly, steps 1 and 2 give an optimal solution to MMCLPSU-PSP. The solution to MMCLPSU-DSP is obtained in steps 3 to 6 using the complementary slackness conditions between MMCLPSU-PSP and MMCLPSU-DSP. Applying the complementary slackness condition to (51) gives:(θ+∑i∈I∑t∈Tditxits−ζs*)αs=0∀s∈S. This, together with (57), gives as feasible solutionαξ=1,whereξ=argmaxs∈S(ζs*−∑i∈I∑t∈Tditxits)andαs=0∀s∈S∖{ξ}in step 3. Furthermore, the complementary slackness condition on constraint set (53) in step 4 givesρits=0whenxits=0∀i∈I,t∈T,s∈S. βitsis obtained in step 4 using the values of αsand ρitsin (56) and exploiting the fact that (56) is binding at optimality. On the other hand, when xits≠ 0, step 5 gives feasible values for βitsand ρitsusing (56). The intuition behind this step comes from the interpretation of the dual variables.We now show that this solution is optimal. From steps 3, 4 and 5,αs=0,βits=0,ρits=0∀s∈S∖{ξ}. Hence, with the solution found in Algorithm 1, the objective function of MMCLPSU-DSP, given by (55), can be expressed as:(66)ζξ*−∑i∈I∑t∈Tρitξ−∑i∈I∑t∈T(βitξ∑j∈Niz¯jk(t,ξ))It can be seen from steps 4 and 5 that βitξindicates the demand that is not covered, while ρitξindicates the demand that is covered at demand node i in period t and scenario ξ. Consequently, the first two terms in (66) together give the regret in scenario ξ, which from step 2 is equal to θ. Hence, (66) can be restated as:(67)θ−∑i∈I∑t∈T(βitξ∑j∈Niz¯jk(t,ξ))Moreover, from step 4, it is evident that βitξtakes a non-zero value only ifxitξ=0⇒∑j∈Niz¯jk=0(from step 1). Consequently, the second term in (67) is equal to zero. Hence, the objective function value of MMCLPSU-DSP is equal to θ, which is also the objective function value of MMCLPSU-PSP. Since this dual solution is feasible, it must be optimal.□The Benders cut(64)can be expressed as:(68)η≥θh−∑j∈J∑t∈T(∑i∈Njβitξhh)zjk(t,ξh)∀h∈Hwhere ξh isargmaxs∈S(ζs*−∑i∈I∑t∈Tditxits)associated with the extreme point h.This follows directly from substituting the values of the dual variables in (67), using zjkas a variable, and rearranging the terms.□Let s1and s2be any two scenarios in step 2 of Algorithm1such thatθ=ζs1*−∑i∈I∑t∈Tditxits1=ζs2*−∑i∈I∑t∈Tditxits2and∑t′≤tpt′s1≤∑t′≤tpt′s2∀t∈T,then the Benders cut provided by ξ ← s2is at least as strong as that provided by ξ ← s1.Clearly, from step 1, we know that MMCLPSU-PSP has a unique optimal solution for a given solutionz¯jkto MMCLPSU-MP. Let that solution to MMCLPSU-PSP bex¯its,θ¯. However, MMCLPSU-DSP may have multiple optimal solutions corresponding to this primal optimal solution (depending on the choice of ξ in step 2 of Algorithm 1). Let two such optimal solutions be associated with the extreme points h1 and h2 of MMCLPSU-DSP. Letαsh1,βitsh1,ρitsh1andαsh2,βitsh2,ρitsh2be the optimal solutions to MMCLPSU-DSP at the extreme points h1 and h2. Furthermore, let ξ ← s1 at the extreme point h1 and ξ ← s2 at the extreme point h2 (in step 2 of Algorithm 1) such thatθh1=ζs1*−∑i∈I∑t∈Tditxits1h1=ζs2*−∑i∈I∑t∈Tditxits2h2=θh2=θ. Then, the Benders cutη≥θh2−∑j∈J∑t∈T(∑i∈Njβitξh2h2)zjk(t,ξh2)is at least as strong as the Benders cutη≥θh1−∑j∈J∑t∈T(∑i∈Njβitξh1h1)zjk(t,ξh1)if:(69)θh1−∑i∈I∑t∈T(βits1h1∑j∈Nizjk(t,s1))≤θh2−∑i∈I∑t∈T(βits2h2∑j∈Nizjk(t,s2))Since,θh1=θh2,the above condition reduces to:(70)∑i∈I∑t∈T(βits1h1∑j∈Nizjk(t,s1))≥∑i∈I∑t∈T(βits2h2∑j∈Nizjk(t,s2))We now prove that (70) is indeed true. For this, let∑t′≤tpt′s1=ktand∑t′≤tpt′s2=kt′∀t∈T. It is given thatkt≤kt′∀t∈T. Also, (from (62)), we getzj(k−1)≤zjk∀j∈J,k∈{1,2,…,n}. Hence, any feasible solution to MMCLPSU-MP should satisfy:z¯jkt≤z¯jkt′∀j∈J,t∈T. Therefore, step 1 of Algorithm 1 gives the following relation:xits1≤xits2∀i∈I,t∈T. This, together with steps 4 and 5 of Algorithm 1, gives:βits1h1≥βits2h2∀i∈I,t∈T. This proves that (70) is true, which proves the proposition.□Benders decomposition described above is the classical textbook version. In the classical implementation of Benders decomposition, the master problem is solved to optimality at each iteration, which becomes increasingly difficult with each successive iteration. The modern version of Benders decomposition, therefore, uses an incumbent solution in the branch-and-bound search tree to be passed to the sub-problem for Benders cut generation. This is facilitated by the flexibility provided by commercial solvers (like CPLEX) to the users to intervene in the branch-and-bound tree search process (using callbacks in CPLEX). In this framework, the master problem is solved to optimality only once. Moreover, the generated Benders cuts are added to the master problem as lazy constraints. Bai and Rubin (2009); Botton, Fortz, Gouveia, and Poss (2013); Fortz and Poss (2009) have found this implementation to be more efficient than the classical version of Benders decomposition. Figure 2presents a flowchart of this implementation of the Benders decomposition algorithm.In this section, we describe the data generation scheme used for our computational experiments, followed by a discussion of the computational results.We use the following scheme to generate the data used in our computational study. The number of demand nodes m ∈ {200, 300, 400, 500}. X and Y coordinates of all the demand nodes are generated as X ∼ U[0, 100] and Y ∼ U[0, 100]. The number of candidate facilities n ∈ {10, 15, 20}. These candidate facilities are randomly selected as a subset of the m demand nodes. This gives us 12 (=4 × 3) combinations for both the MMCLPSU and MMCLPSU-P models. In all our experiments, the set Jbof open facilities at the start of the planning horizon is assumed to be empty. Distance δijbetween demand node i and candidate facility location j is taken as the Euclidean distance(Xi−Xj)2+(Yi−Yj)2. Covering distance in MMCLPSU is fixed asδ0=20forn=10,15andδ0=15forn=20. Maximum and minimum covering distances in MMCLPSU-P are fixed asδmax=30andδmin=20forn=10,15,whileδmax=25andδmin=15forn=20. Coverage is assumed to decrease linearly between δminand δmax, implying the following coverage function:aij={1ifδij≤δmin,1−δij−δminδmax−δmin=δmax−δijδmax−δminifδmin<δij≤δmax,0ifδij>δmax.The first period demand at any demand node i is generated as di1 ∼ U[50, 1500]. Demand at node i in successive periods of the planning horizon varies asdit=di(t−1)(1+gi),where giis the demand growth rate at node i, generated asgi∼U[−0.04,0.10]. Please note that our data generation scheme allows for positive as well as negative growth rates. This is based on our observation that some of the villages in the Dangs district of Gujarat, India, exhibit negative growth rates.Length of the planning horizon (|T|) in all experiments is assumed to be 5 periods. We assume that by the end of the planning horizon (i.e., in periodt=5), servers are available for all the candidate facilities under any scenario. With this assumption, all facility opening sequences give the same demand coverage in the last period. Hence, the last periodt=5can be excluded from the model since it does not make any contribution to the regret. Clearly, any problem with |T| periods with such an assumption is equivalent to a corresponding problem with|T|−1periods without this assumption. Thus, for a problem with 5 periods and n candidate facilities, finding the total number of possible scenarios under this assumption is equivalent to the classic problem of arranging n identical balls in 5 different cells, given by(n+4n)=(n+4)!n!4!Feller (see 1968, pp. 38). We use Algorithm 2 to enumerate all possible scenarios of availability of n servers for|T|=5.Computational study is done on the data generated using the scheme described above. All the experiments are run on a personal computer with Intel Core i5 (3.30 GHz) processor; 4GB RAM; and windows 64-bit operating system. Solution algorithms are coded in C++ (Visual Studio 2010), and IBM ILOG CPLEX 12.4 is used as the MIP solver. In all our experiments, the maximal coverageζs*for each scenario s ∈ S is obtained by solving MMCLPsfor complete coverage and MMCLP-Psfor gradual coverage using the CPLEX MIP solver. The total CPU time taken to obtainζs*across all scenarios is less than 200 and 4000 seconds for the complete and gradual coverage, respectively, even for the largest problem instance that we solve. These times are much smaller than the CPU times taken by the CPLEX MIP solver to solve MMCLPSU and MMCLPSU-P, respectively. Hence, we do not include these times in the total CPU times reported in all our experiments.It is clear from Table 2 that the problem size (number of variables and constraints) increases with the number of scenarios considered. Hence, in all our experiments, we use scenario dominance rules given by Vatsa and Ghosh (2014) to reduce the size of the problem. For this, we represent any server availability scenario s as (b1, b2, .., bt, .., b|T|) where btis the number of new servers that become available in period t ∈ T. A facility opening sequence Π is represented asΠ=(π1,π2,…,πn),where πiis the ithfacility in the facility opening sequence. Furthermore,d¯t,πi∪πi+1∪…∪πjis the total demand covered by the set of facilities{πi,πi+1,…,πj}in period t.Rule 1:Scenarios in which all n servers become available in the same period will have zero regret for any facility opening sequence. Hence, the regret associated with these scenarios can never be greater than the regret associated with any other scenario.Rule 2:Consider a scenarios1=(0,..,bt,..,b|T|)that has no new server available in the first period, and the first new server available in period t. Compare s1 with another scenarios2=(1,..,bt−1,..,b|T|). For any facility openingsequence Π, the regret associated with s1 can never be greater than that associated with s2 if:(71)d¯1,π1+d¯2,π1+..+d¯(t−1),π1≤ζs2*−ζs1*Rule 3:Consider a scenarios1=(b1,..,bt,..,0)that has no new server available in the last period, and the nthnew server available in period t. Compare s1 with another scenarios2=(b1,..,bt−1,..,1). For any facility opening sequence Π, the regret associated with s1 can never be greater than that associated with s2 if:(72)(d¯(|T|−1),J−d¯(|T|−1),J∖πn)+(d¯(|T|−2),J−d¯(|T|−2),J∖πn)+⋯+(d¯t,J−d¯t,J∖πn)≥ζs1*−ζs2*Rule 4:Consider a scenarios1=(1,..,bt,..,b|T|)that has 1 new server available in the first period, and the second new server available in period t. Compare s1 with another scenarios2=(2,..,bt−1,..,b|T|). For any facility opening sequence Π, the regret associated with s1 can never be greater than that associated with s2 if:(73)(d¯1,π1∪π2−d¯1,π1)+(d¯2,π1∪π2−d¯2,π1)+⋯+(d¯(t−1),π1∪π2−d¯(t−1),π1)≤ζs2*−ζs1*Rule 5:Consider a scenarios1=(b1,..,bt,..,1)that has 1 new server available in the last period, and the(n−1)thnew server available in period t. Compare s1 with another scenarios2=(b1,..,bt−1,..,2). For any facility opening sequence Π, the regret associated with s1 can never be greater than that associated with s2 if:(74)(d¯(|T|−1),J∖πn−d¯(|T|−1),J∖{πn,πn−1})+(d¯(|T|−2),J∖πn−d¯(|T|−2),J∖{πn,πn−1})+⋯+(d¯t,J∖πn−d¯t,J∖{πn,πn−1})≥ζs1*−ζs2*Rule 6:Consider a scenarios1=(2,..,bt,..,b|T|)that has 2 new servers available in the first period, and the third new server available in period t. Compare s1 with another scenarios2=(3,..,bt−1,..,b|T|). For any facility opening sequence Π, the regret associated with s1 can never be greater than that associated with s2 if:(75)(d¯1,π1∪π2∪π3−d¯1,π1∪π2)+(d¯2,π1∪π2∪π3−d¯2,π1∪π2)+⋯.+(d¯(t−1),π1∪π2∪π3−d¯(t−1),π1∪π2)≤ζs2*−ζs1*Rule 7:Consider a scenarios1=(b1,..,bt,..,2)that has 2 new servers available in the last period, and the(n−2)thnew server available in period t. Compare s1 with another scenarios2=(b1,..,bt−1,..,3). For any facility opening sequence Π, the regret associated with s1 can never be greater than that associated with s2 if:(76)(d¯(|T|−1),J∖{πn,πn−1}−d¯(|T|−1),J∖{πn,πn−1,πn−2})+(d¯(|T|−2),J∖{πn,πn−1}−d¯(|T|−2),J∖{πn,πn−1,πn−2})+⋯+(d¯t,J∖{πn,πn−1}−d¯t,J∖{πn,πn−1,πn−2})≥ζs1*−ζs2*The above dominance rules resulted in the elimination of 50–65 percent of the total 3876 possible scenarios for problem instances withn=15,|T|=5andm=100. We use S0 ⊂ S to denote the remaining set of non-dominated scenarios, and replace S by S0 in all our experiments with MMCLPSU and MMCLPSU-P.We conduct our computational experiments with 10 instances for each of the 12 problem sizes described in Section 4.1. For MMCLPSU, Table 4 reports the objective function value (Obj), time taken by the CPLEX MIP solver (CPLEX CPU(s)), time and number of cuts required by the classic and callback versions of the Benders decomposition method (BD-Classic and BD-Callback). Clearly, BD-Classic and BD-Callback outperform the CPLEX MIP solver. For example, the computation time taken by the CPLEX MIP solver for the problem size of n=15, m=300 is on average more than 150 times the time taken by BD-Classic, and more than 250 times that taken by BD-Callback. Furthermore, the CPLEX solver could not solve MMCLSPU instances beyond the problem size n = 15, m = 300 within the time limit of 20 hours. Benders-Classic, on the other hand, could solve most of the problem instances till n = 20, m = 400 within the same time limit, while Benders-Callback solved instances of the size n = 20, m = 500 in close to 2 hours on average. At the same time, we notice that the number of cuts, and hence the CPU time, required by BD-Classic and BD-Callback increases with the problem size. However, the increase in CPU time is more drastic for BD-Classic since it solves a new master problem to optimality at each iteration, whereas BD-Callback solves only one master problem to optimality. Subsequently, for MMCLPSU-P, we perform computational experiments only with the CPLEX MIP solver and BD-Callback.Table 5 provides a comparison between CPLEX MIP solver and BD-Callback for MMCLPSU-P. Like MMCLPSU, we notice that BD-Callback solves much larger instances of MMCLPSU-P compared to the CPLEX MIP solver within the time limit of 20 hours. For example, the CPLEX MIP solver could not solve 6 out of the 10 instances corresponding ton=10,m=300within the 20 hour limit, while BD-Callback could solve all the 10 instances corresponding to the largest size ofn=20,m=500in close to 1 hour on average. Furthermore, for the instances that the CPLEX MIP solver could solve within the time limit, BD-Callback is of the order of 1,000 times faster. Moreover, comparing the results in Table 4 and 5, we notice that the CPLEX MIP solver could not solve many instances corresponding ton=10,m=300for MMCLPSU-P, while it could solve much larger instances for MMCLPSU. This is expected since the size of the mathematical model for MMCLPSU-P is much larger than that for MMCLPSU (for example, MMCLSPU-P has variables xijtswhile MMCLPSU has xits). Interestingly, the same does not appear to hold true with respect to BD-Callback. On the contrary, BD-Callback solves MMCLPSU-P instances much faster, on average, compared to MMCLPSU. This is true because, as it can be seen from Tables 4 and 5, the average number of Benders cuts used by BD-Callback is smaller for MMCLPSU-P compared to MMCLPSU. This indicates that the Benders cuts in MMCLPSU-P carry more information compared to the cuts in MMCLPSU (since the two master problems, MMCLPSU-MP and MMCLPSU-P-MP, differ only in Benders cuts). This can be explained by comparing the Benders cuts in the two models, which suggests that forδmin=δ0,as used in our experiments, the additional (partial) coverage allowed between δminand δmaxin the case of MMCLPSU-P may result in more information with each Benders cut (consequently fewer cuts). In order to check this assertion, we conducted additional experiments with 20 instances for different values of the covering distance (δ0) in MMCLPSU. We depict the resulting average number of cuts used for each value of δ0 in Fig. 3, which confirms our assertion.Figs. 4and 5show how the number of instances (out of 20) with 0 maximum regret as the objective function value, and the average objective function value vary with δ0. As obvious from Fig. 4, with a sufficiently high δ0, most of the instances result in 0 as the objective function value. This is expected since with a very high δ0, all the facility opening sequences provide the same coverage under any given scenario. Hence, the regret associated with an optimal sequence will be zero. Furthermore, as can be seen from Fig. 5, the average objective function value first increases and then decreases with an increase in δ0. This is due to the fact that with very small δ0, the total demand that can be covered is small in magnitude, and hence the regret is also of similar magnitude. As δ0 increases, it becomes possible to cover more demand nodes by judiciously selecting candidate facilities to open. Consequently, when the optimal facility opening sequence has a regret, it is generally of a higher magnitude. Furthermore, a very high δ0 results in too many instances with low or zero objective function value, as observed in Fig. 4. Consequently, the average objective function value decreases with very high values of δ0. This observation provides an interesting insight. The covering distance represents the connectivity of the nodes. A larger covering distance indicates demand nodes are well connected with candidate facilities. The above observation implies that with a good level of connectivity, even the most unfavorable scenario will not have a high regret.

@&#INTRODUCTION@&#


@&#CONCLUSIONS@&#
