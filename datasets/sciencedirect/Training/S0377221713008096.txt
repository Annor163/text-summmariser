@&#MAIN-TITLE@&#
An arc-exchange decomposition method for multistage dynamic networks with random arc capacities

@&#HIGHLIGHTS@&#
Deal with the multistage dynamic stochastic networks with random arc capacities.Provide a new approximating method.Can handle the large-scale problem instances with fairly good solution quality.Provide a tight upper bound of the multistage stochastic dynamic networks.

@&#KEYPHRASES@&#
Stochastic programming,Dynamic programming,Transportation,Approximate dynamic programming,Decomposition method,Multistage networks with random arc capacities,

@&#ABSTRACT@&#
Multistage dynamic networks with random arc capacities (MDNRAC) have been successfully used for modeling various resource allocation problems in the transportation area. However, solving these problems is generally computationally intensive, and there is still a need to develop more efficient solution approaches. In this paper, we propose a new heuristic approach that solves the MDNRAC problem by decomposing the network at each stage into a series of subproblems with tree structures. Each subproblem can be solved efficiently. The main advantage is that this approach provides an efficient computational device to handle the large-scale problem instances with fairly good solution quality. We show that the objective value obtained from this decomposition approach is an upper bound for that of the MDNRAC problem. Numerical results demonstrate that our proposed approach works very well.

@&#INTRODUCTION@&#
Multistage dynamic networks with random arc capacities (MDNRAC) have been successfully used for modeling various problems such as dynamic vehicle allocation (Cheung & Powell, 1996; Godfrey & Powell, 2002; Simão et al., 2010), empty container relocation (Cheung & Chen, 1998), resource planning problems (Song & Huang, 2008), drayage problem (Cheung, Shi, Powell, & Simão, 2008), and energy resource allocation (Powell et al., 2012). In these problems, a node represents a location at a particular period, an arc represents a transportation request from a location to another location starting at a particular period, and the arc capacity represents the random amount of the transportation request. The MDNRAC model belongs to the general class of multistage stochastic programming problems with recourse (Birge & Louveaux, 1997). Numerous techniques have been developed for general stochastic programming since it was first introduced by Dantzig (1955), such as Monte Carlo sampling (Kenyon & Morton, 2003; Verweij, Ahmed, Kleywegt, Nemhauser, & Shapiro, 2003), scenario aggregation (Kouwenberg, 2001), L-shaped decomposition (Van Slyke & Wets, 1969; Birge & Louveaux, 1988; Laporte, Louveaux, & Hamme, 2002), stochastic decomposition (Berkelaar, Gromichom, Kouwenberg, & Zhang, 2005; Higle & Sen, 1991; Higle, Lowe, & Odio, 1994), and sublinear approximation (Birge & Wets, 1986, 1989). However, MDNRAC involves a large number of random variables, which makes these general methods computationally very expensive or even intractable. The most promising solution approaches, therefore, are to use decompositions, some form of Lagrangian relaxation and separability (Birge & Louveaux, 1997, p. 233). For MDNRAC, two solution approaches have been proposed. The first is proposed by Glockner and Nemhauser (2000), who using the scenario aggregation idea (Kouwenberg, 2001) as a solution framework, consider a scenario formulation of the problem and provide a decomposition scheme, called compath decomposition. The idea is derived from the path decomposition for network flows. Another approach is to approximate the expected cost function in each stage of the MDNRAC, from the last stage to the second stage of the MDNRAC. Under this approach, Frantzeskakis and Powell (1990) develop a successive linear approximation procedure while Cheung and Powell (1996) develop a successive convex approximation method (SCAM). In SCAM, a network is decomposed into a number of overlapping trees with random arc capacities, known as the tree recourse problems (TREEREC). For each TREEREC, the expected cost can be obtained efficiently as a parametric function of the supply of the root node of the TREEREC by using Powell and Cheung (1994a)’s method. The SCAM relaxes the capacity constraints by way of penalty cost.As stochastic programs are very difficult to solve to optimality, active research has also been conducted to develop bounds for the objective function value. One approach is to approximate the probability distributions of the random variables by simpler distributions. The Jensen’s lower bound is obtained when for each random variable, the whole probability mass was put to its expected value, and then solve the resulting (deterministic) problem. The Edmundson–Madansky (EM) upper bound (Madansky, 1959) is obtained by allocating the probability mass to the two extreme values of each random variable. The approach can be generalized to the class of moment problems that can be used to obtain various lower and upper bounds that satisfy certain conditions on the moment information of the original random variable (see, for example, Ediringhe & Ziemba, 1994; Prekopa, 1999). In general, the Jensen bound is quite loose (Ediringhe & Ziemba, 1992) while the EM bound requires exponentially large effort (in terms of the number of random variables) to compute. By exploiting the structure of the network, Donohue and Birge (1996) develop a method to substantially reduce the computational efforts required by the EM bound. Another approach to obtain bounds is by approximating the recourse function by separable, piece-wise linear functions (Birge & Wallace, 1988; Birge & Wets, 1989). For networks with random arc capacities, Wallace (1987) develops a piecewise linear upper bound by first identifying cycles in the network and then perturbating the flows on the cycles. Powell and Frantzeskakis (1994) describe various restricted recourse strategies to obtain bounds. Cheung and Powell (1996) obtain a lower bound by using a set of separable, convex functions that bound the recourse function from below.The key feature of a MDNRAC model is that when decisions are made at the beginning of a stage, the arc capacities in this particular stage are assumed to be known or observed while the arc capacities in all later stages are unknown. This scenario then repeats when decisions are made at the next stage and so on. The objective is to minimize the total expected cost, which is the summation of the deterministic stage-one cost and the expected future cost (cost-to-go) over the whole planning horizon. As mentioned in the literature review, solving the MDNRAC model is generally computationally intensive, and there is a need to develop more efficient solution approaches. In this paper, we propose a new heuristic method to tackle the model. The essence of our approach is to approximate the expected cost-to-go at each stage using a series of separable piecewise-linear convex functions. This allows us to decompose the network at each stage into a set of subproblems with tree structures, wherein each subproblem can be solved efficiently by applying the TREEREC algorithm (Powell & Cheung, 1994a).The remainder of this paper is organized as follows. Section 2 provides the formulations of the problem and describes the successive approximation solution strategy. In Section 3, we derive several properties that are used to estimate the impact on expected flow and cost due to the changes in the tree structure. In Section 4, we illustrate our new decomposition method and derive the new upper bound. Section 5 presents the results of the numerical experiments. Finally, we offer our concluding remarks and potential extension of future research in Section 6.Consider a T-stage stochastic network with random arc capacities, which can be used to model dynamic resource allocation problem (Cheung & Powell, 1996). In this problem, the objective of the decision at each stage is to minimize the total of the cost in the current stage and the expected costs in later stages. Before giving the mathematical decision model, we first define some notations. Since a stage is defined as a point in time where decisions are made, hereafter, we may use “time t” or “stage t” alternatively. DefineNtset of nodes at time t, t=1,2,…,T+1;Atset of arcs originating at time t, t=1,2,…,T;uij1(deterministic) capacity of arc (i, j) starting at time 1;ξijt(random) capacity of arc (i, j) starting at time t, t=2,3,…,T;cijtper unit cost of arc (i, j) starting at time t, t=1,2,…,T;xijtflow on arc (i, j) starting at time t, t=1,2,…,T;si1initial supply to the node i,i∈N1;sitinternal supply to node i,i∈Nt, resulting from the decision made at time t−1, t=2,3,…,T+1.At stage 1, the decision is made to minimize the summation of the cost at the first stage and the expected cost in the later stages, which can be formulated as follows:(1)Q1(s1)=min∑(i,j)∈A1cij1·xij1+Eξ2Q2(s2,ξ2)(2)subjectto:∑{j:(i,j)∈A1}xij1=si1,i∈N1(3)∑{i:(i,j)∈A1}xij1=sj2,j∈N2(4)0⩽xij1⩽uij1,(i,j)∈A1where for a given supplystand a particular realizationξ̃t,Qt(st,ξ̃t)is the value of a minimization problem which is defined recursively as follows:(5)Qt(st,ξ̃t)=min∑(i,j)∈Atcijt·xijt+Eξt+1Qt+1(st+1,ξt+1)(6)subjectto:∑{j:(i,j)∈At}xijt=sit,i∈Nt(7)∑{i:(i,j)∈At}xijt=sjt+1,j∈Nt+1(8)0⩽xijt⩽ξ̃ijt,(i,j)∈Atfor t=2,3,…,T and QT+1(·, ·)=0.Here QT+1(·, ·) represents the tail effect of the resource (vehicles) at the time beyond the planning horizon. As mentioned in King and Wallace (2012, p. 55), it is necessary to approximate this tail effect in order to model a problem covering infinitely long time by a model with finite stages. However, it is not our scope to further discuss the issue of how to evaluate the tail effect QT+1(·, ·). For simplicity, we assume that QT+1(·, ·)=0, which means that the value of the resource at a time beyond the planning horizon is not considered. It is worthwhile to point out that our method can still work even if this value is not equal to zero but some deterministic estimated value or a convex function of the supplysT+1.As mentioned earlier, the MDNRAC model defined in Eqs. (1)–(8) involves a large number of random variables, which makes the problem very difficult to solve exactly. A promising approach is to use decomposition and some kind of separability. In this paper, we follow the successive approximation approach developed in Frantzeskakis and Powell (1990) and in Cheung and Powell (1996), which approximates the recourse values with a set of separate functions. Fig. 1illustrates the framework of this approach. In particular, the last stage problem (stage T) is solved exactly and the separable expected recourse function for resource at each location are obtained. These functions are piecewise linear and convex, and hence can be expressed as a sets of arcs with deterministic capacities. A modified stage T−1 problem is obtained by replacing the last stage with these arcs. After that, the modified stage T−1 problem is approximated by a set of convex, piecewise linear functions, which in terms are represented by deterministic arcs and are added to the stage T−2 problem. The process is repeated until the stage 1 problem is reached, which is a deterministic network flow problem that can be solved efficiently. The key steps are summarized in Fig. 2.In Step 1, the expected recourse functionQ¯T(sT)≜EξTQT(sT,ξT)of stage T problem QT(sT,ξT) is separable insiTand thus can be written as(9)Q¯T(sT)=EξTQT-1(sT,ξT)(10)=∑i∈NTEξiTQiT(siT,ξiT)(11)≜∑i∈NTQ¯iT(siT)Each component of Problem (11), known as the nodal recourse (see Powell & Frantzeskakis, 1994), has the form of a single level tree with random arc capacities. It can be computed exactly as a function ofsiTby utilizing the fact that for any given realization of the random arc capacities, the greedy algorithm can produce the optimal solution (Wallace, 1986). The function,Q¯iT(siT), is shown to be convex, piecewise linear with integer breakpoints and after certain value ofsiT, say smax the slope of the function becomes constant. This function can be represented by a set of smax+1 parallel deterministic arcs as follows. Letqi,kTbe the slope ofQ¯iT(siT)in the segment betweensiT=k-1and atsiT=k. Then, the cost coefficient of the kthparallel arc isqi,kTfor k=1,…,smax. The capacities of the first smax arcs are 1 and the capacities of the last arcs are infinity.Letyi,kTbe the flow on these parallel arcs. The stage T−1 problem can be written as(12)Q¯T-1(sT-1)≜EξT-1min∑(i,j)∈AT-1cijT-1·xijT-1+∑j∈NT∑k=1smaxqj,kT·yj,kTsubject to constraints (6)–(8) for t=T−1 and∑k=1smaxyj,kT=sjT,j∈NT.Unlike the stage T problem, this modified stage T−1 problem is not separable. The scheme of this solution strategy is to approximate it by a separable, piecewise linear, convex functionQ^T-1(sT-1)=∑iQ^iT-1(siT-1)so that the process could be repeated until the first stage, which becomes a pure deterministic network flow problem.The key challenge in this solution strategy is how to obtain the approximationQ^t(st)=∑iQ^itsitfor t=T−1, T−2,…,2. One way is to replace the set ofqj,ktby a single valueq¯jtfor each node j (see the successive linear approximation method of Frantzeskakis & Powell (1990)). This is equivalent to approximating the convex functionQ^itsitby a linear function. As shown in Fig. 3a, the modified stage t problem becomes a one-level deterministic capacitated transportation with the cost coefficients of the arcs modified ascijt+q¯jt. This problem, again, is separable by locations. Thus, we can apply the same steps of solving last stage problem here. Another way is to use the network recourse decomposition (NRD) of Powell and Cheung (1994b). The deterministic arcs in the second level of the modified stage t problem are duplicated such that the problem can be decomposed into a set of overlapped tree. Each tree is a special tree recourse problem that can be solved by the TREEREC algorithm of Powell and Cheung (1994a). Penalties are added to the arcs for which total expected flow exceeds its mean capacity. Then, the TREEREC algorithm is applied on the trees with modified arc costs. This process is repeated for a pre-specified number of iterations. The idea of NRD is shown in Fig. 3b. This paper develops another decomposition approach such that the modified stage t network is decomposed into tree subproblems by restricting the arcs in the second level to certain trees. With this restriction, there is no duplicated arc among the trees (see Fig. 3c). Each tree recourse problem is solved by the TREEREC algorithm. Then, a set of arcs are identified and exchanged between the trees. The research issue is how to evaluate the cost impact of reallocating an arc from a tree to another tree. We call this method an arc-exchange decomposition method. Section 3 describes a method to estimate this cost impact quickly by utilizing some properties of the tree subproblems. Section 4 provides the steps of the method.We begin this section with the notation of the tree recourse problem and with a review of the key results of the TREEREC algorithm of Powell and Cheung (1994a). In Section 3.2, we derive a number of properties of the tree recourse problem about the changes of the expected flow when an arc is added to or removed from a tree. These properties are used to develop a method that estimate the changes quickly as described in Section 4.1. The results of the section are used in a key step of the arc-exchange decomposition described later.Consider a directed tree that has a root node, denoted by r, and two levels of nodes: the branch nodes that are adjacent to the root node, and the leaf nodes that are two arcs away from the root node. The arc capacities of the arcs from the root node to the branch nodes are random variables while the arc capacities from the branch nodes to the leaf nodes, except the last leaf, are 1. The last leaf node of a branch is assumed to have infinite capacity, representing the action of holding a vehicle to the next stage. LetNBthe set of branch nodes,NiLthe set of leaf nodes of the branch node i,i∈NB, andmi|NiL|, the number of leaf nodes of the branch node i.For a given branch node, assume that the outbound arcs are indexed according to the increasing arc costs. Let(i, i[j])the jth ranked arc out of node i according to increasing cost,AiLthe set of arcs between i and its leaf nodes ={(i,i[j]):i[j]∈NiL}, andξrithe random arc capacity on arc (r, i).We call the subgraph defined byNiL,AiLthe branch of node i. The notation is illustrated in Fig. 4. Assume that the paths in the tree are sorted in an ascending order according to their costs and call the nth ranked path as path n. To compute the expected total tree cost, the TREEREC algorithm considers the probability of assigning each unit of flow to the paths in the tree, thus we need the following path parameters and variables. DefineNp∑i∈NBmi, the number of paths in the tree;cnthe cost of path n;δijn1ifarc(i,j)isonpathn,0otherwise;ϕ(k, n)the probability that the kth unit of flow entering node r takes the path n;fn(s)the expected flow on path n when the supply to the root node is s;F(s)the expected tree cost when the supply to the root node is s.From the definitions, it is easy to see that(13)fn(s)=∑k=1sϕ(k,n)while the total expected cost for a given s is(14)F(s)=∑n=1Npcnfn(s)=∑n=1Np∑k=1scnϕ(k,n)The quantity ϕ(k,n) is known as the dispatch probabilities. The TREEREC algorithm uses two sets of auxiliary variables to compute these values. DefineZnthe total capacity of the first n paths;ξr,inthe maximum possible flow on arc (r, i) when the first n paths are used.The key steps of the TREEREC algorithm are summarized in Fig. 5.In Eq. (17), Znis the sum of independent random variables and thus its distribution can be computed through the convolution of discrete independent random variables. The rationale of Eq. (18) is that the kth unit of flow will use path n only if the total capacity of the first n−1 path is less than k while the total capacity of the first n path is at least k.In our arc-exchange decomposition method, one critical step is to find the expected cost change due to moving an arc from one tree to another tree. One way to do this is to re-apply the TREEREC algorithm to the modified tree. However, it is very computationally expensive. Thus, we would like to estimate the expected cost change based on the optimal solution of the tree recourse problem. This mimics the ease with which we can estimate the cost change due to the change of resource in linear programs via dual prices. LetΔF(s)the change of the expected total cost for a given supply s;Δfn(s)the change of the expected flow on path n for a given supply s.We know from Eq. (14) thatΔF(s)=∑n=1NpcnΔfn(s)To compute Δfn(s), without loss of generality, we fix a leaf arc that is to be added to or removed from the tree by denoting(iˆ,iˆ[jˆ])the arc to be added to or removed from the tree;nˆthe rank of path(r,iˆ,iˆ[jˆ]);uiˆ,iˆ[jˆ]the capacity of(iˆ,iˆ[jˆ]).Let n be any path in the tree and definefn+(s)the expected flow on path n when the supply is s anduiˆ,iˆ[jˆ]=1;fn-(s)the expected flow on path n when the supply is s anduiˆ,iˆ[jˆ]=0.Changinguiˆ,iˆ[jˆ]from 1 to 0 is equivalent to removing arc(iˆ,iˆ[jˆ])from the tree and the expected flow on path n will change fromfn+(s)tofn-(s). That is,Δfn(s)=fn-(s)-fn+(s). On the other hand, changinguiˆ,iˆ[jˆ]from 0 to 1 is equivalent to adding arc(iˆ,iˆ[jˆ])to the tree and the expected flow on path n will change fromfn-(s)tofn+(s). In this case,Δfn(s)=fn+(s)-fn-(s). The section following develops the properties on the relationship betweenfn+(s)andfn-(s). These properties are used to estimatefn-(s)based onfn+(s)for the case of removing an arc, and to estimatefn+(s)based onfn-(s)for the case of adding an arc. In particular, Property 1 considers the flow on path n withn<nˆ. Property 2 describes the flow changes on paths where the leaf arcs are in the same branch of arc(iˆ,iˆ[jˆ])while Property 3 describes those not in the branch of arc(iˆ,iˆ[jˆ]).Property 1fn+(s)=fn-(s)forn=1,2,…,nˆ-1.Since ϕ(k, n) only depends on the capacities of the first n paths according to Eq. (18), forn<nˆ, the expected flow on path n will not be affected by changing the capacity of arc(iˆ,iˆ[jˆ]). That is, Δfn(s)=0. Therefore, in the following properties, we only need to consider the path where the rank is larger thannˆ.Consider an arc(iˆ,iˆ[j′]),j′>jˆ, in the branch of nodeiˆ. Let n′ denote the rank of path(r,iˆ,iˆ[j′]). Fig. 6(a) shows the tree formed by the first n′−1 paths and Fig. 6(b) shows the tree formed by the first n′ paths. By comparing with these two trees, we can find that their structures are close except that the tree of the first n′ paths has one more arc in the branchiˆ. However, these two trees are equivalent if the capacity of arc(iˆ,iˆ[j′])in the second tree is 0 but the capacities of other leaf arcs are all 1. Therefore, the total expected flow on the first n′−1 paths whenuiˆ,iˆ[jˆ]=1is equal to the total expected flow on the first n′ paths whenuiˆ,iˆ[jˆ]=0. Consequently, we have the following property.Property 2Consider an arc(iˆ,iˆ[j′]),j′>jˆ, in the branch of nodeiˆ. Let n′ denote the rank of path(r,iˆ,iˆ[j′]). Then, we have(a)∑n=1n′-1fn+(s)=∑n=1n′fn-(s),fnˆ+(s)-fn′+(s)=∑n=nˆ+1n′Δfn(s),fn′-(s)=-∑n=nˆn′-1Δfn(s),fn′-(s)⩾fn′+(s+1), whereΔfn(s)=fn-(s)-fn+(s).See Appendix.□In Property 2, we only need to consider the casej′>jˆsince we know from Property 1 that the flow on path n′ remains the same ifj′<jˆ. Forj′>jˆ, we haven′>nˆ. Thus, if(iˆ,iˆ[jˆ])is removed, the flow on pathnˆwill be diverted to paths with higher cost. Property 2(a) indicates that the total flow on the first n′−1 paths before(iˆ,iˆ[jˆ])is removed is equal to the total flow on the first n′ paths after(iˆ,iˆ[jˆ])is removed. In Property 2(b), the left side is the difference between the flow on arc(iˆ,iˆ[jˆ])and(iˆ,iˆ[j′]). This difference is non-negative because having more flow in the leaf arc with a higher cost than the flow in the leaf arc with a lower cost when both arcs in the same branch is not optimal. Property 2(b) says that if arc(iˆ,iˆ[jˆ])is removed, this flow difference will be redistributed into paths with ranks betweennˆ+1and n′, including the path that does not involve arcs in branchiˆ. Property 2(c) describes the flow changes when arc(iˆ,iˆ[jˆ])is added to the tree. When a better path (pathnˆ) is present, the flow on the paths with higher costs will be redistributed to pathnˆ. Property 2(c) says that the total changes of the expected flow on paths with ranks betweennˆand n′−1 will be equal to expected flow on path n′. Finally, Property 2(d) relates the flow change on path n′ to the change of supply. It says that, for the case that arc(iˆ,iˆ[jˆ])is removed, the expected flow on path n′ will be increased to at leastfn′+(s+1). For the case that arc(iˆ,iˆ[jˆ])is added, the expected flow on path n′ will decrease, and the value will be at mostfn′-(s-1). This is not strange since arc(iˆ,iˆ[jˆ])has lower cost than arc(iˆ,iˆ[j′]),j′>jˆ. Whenever there is flow on arc(iˆ,iˆ[j′]), there must be one unit of flow on arc(iˆ,iˆ[jˆ]).The following property estimates the maximum changes of the expected flow on the paths that involve arc in branchi′,i′≠iˆ. In particular, Property 3(a) provides a bound of the change and (b) specifies a condition under which the expected flow will not change.Let arc(i′,i[j′]′)be in the branch of node i′,i′≠iˆand n′ denote the rank of path(r,i′,i[j′]′). Because ofProperty 2, assume thatn′>nˆ. We have(a)fn′-(s)⩽fn′+(s+1);ifjˆ+j′>s, thenfn′+(s)=fn′-(s).See Appendix.□Property 3 can be used in two ways to estimate the flow changes. When arc(iˆ,iˆ[jˆ])is removed from the tree, the expected flow on the paths with higher cost will increase or keep no change. Property 3(b) indicates the conditions under which the expected flow on a path will not change. If the expected flow on a path increases after arc(iˆ,iˆ[jˆ])has been removed, Property 3(a) shows that this expected flow will increase, at most, to the level of the expected flow with one more unit of supply at the root node. When arc(iˆ,iˆ[jˆ])is added to the tree, the expected flow on the paths with higher cost will decrease or keep no change. Property 3(b) indicates the conditions under which the expected flow on a path will not change. The expected flow on a path will decrease after arc(iˆ,iˆ[jˆ])has been added. Furthermore, Property 3(a) indicates that this expected flow will decrease, at most, to the level of the expected flow with one unit of supply less at the root node.As discussed earlier, our method involve exchanging arcs between trees based on the cost changes due to the arc exchanges. We describe two heuristics that can estimate the cost changes quickly in Section 4.1, the steps of the decomposition method in Section 4.2, and the upper bound produced by this method in Section 4.3.By using the properties outlined in Section 3.2, we can estimate the cost change whenuiˆ,iˆ[jˆ]is changed from 1 to 0 by the procedure Cost_Change_For_Arc_Removal anduiˆ,iˆ[jˆ]is changed from 0 to 1 by the procedure Cost_Change_For_Arc_Addition (see Figs. 7 and 8).For arc removal, we assume that a tree recourse problem is solved and the expected flow of the tree is given by the set offn+(s)for n=1,2,…,Np. Letf̃n-(s)be the estimation of the expected flow on path n after removing arc(iˆ,iˆ[jˆ]). By leveraging the properties in Section 3.2, we develop a procedure to obtainf̃n-(s)based on the values offn+(s).For arc addition, we assume that a tree recourse problem is solved and the expected flow of the tree is given by the set offn-(s)for n=1,2,…,Np. Letf̃n+(s)be the estimation of the expected flow on path n after adding arc(iˆ,iˆ[jˆ]). By leveraging the properties in Section 3.2, we develop a procedure to obtainf̃n+(s)based on the values offn-(s).We have conducted experiment to assess the accuracy and efficiency of these cost-change estimation procedure. The results are discussed in Section 5.In the framework of the algorithm described in Section 2, we first solve the stage T problem and get expected recourse functions. Then we deal with the modified stage T−1 problem, which is a two-level network problem with random arc capacities in the first level. We separate the network into a set of tree recourse problems by restricting each second-level arc to a specific tree. The approximation procedures described in Section 4.1 provide a fast estimation of cost change for adding or removing a leaf arc. With these procedures, we estimate the cost reduction of exchanging arcs within trees and select those that most reduce the cost to exchange. After exchanging some arcs, we again solve these separated tree recourse problems. Ideally, for any given supplysT−1, the total expected costs will decrease. The process is repeated until some stop criterion is met, such as when the number of iterations reaches a limit, or when the total change over some number of iterations is small. We summarize the algorithm in Fig. 9.RemarksIf in Step 3.3 of Fig. 9 we were to use exact cost change instead of estimated cost change, the workload would increase significantly, because each iteration requires solving the tree recourse problems many times.In this subsection, we show that the arc-exchange decomposition method provides an upper bound for multistage network recourse problem. For any given initial supplys1, letQ^1(s1)be the objective value obtained through the arc-exchange decomposition method at stage 1. We show that this value is an upper bound of the optimal value of problem defined in (1)–(8), denoted as Q1(s1).Property 4For any initial supplys1,Q1(s1)⩽Q^1(s1).DefineX1(s1){xij1:∑{j:(i,j)∈A1}xij1=si1,i∈N1;0⩽xij1⩽uij1,(i,j)∈A1}, feasible set at stage 1;Xt(st,ξ̃t){xijt:∑{j:(i,j)∈At}xijt=sit,i∈Nt;0⩽xijt⩽ξ̃ijt,(i,j)∈At}, feasible set at stage t, t=2,3,…,T;st+1(xt){sjt+1:∑{i:(i,j)∈At}xijt=sjt+1,j∈Nt+1}, resulting supply at time t+1 from the decision at time t;Q∼t+1(xt)the minimum recourse value at time t+1 by representingQ^t+1(·)as a set of arcs and assigning these arcs to the notes at time t without duplication.From the definition ofQ∼t+1(xt), we can see thatQ∼t+1(xt)⩾Q^t+1(st+1(xt))for any feasiblext. We show the property by backward induction. For the last stage, we can see that the approximation is exactly equal to the original problem, that is,QT(sT,ξ̃T)=Q^T(sT,ξ̃T)for anysT⩾0and any realizationξ̃T. Therefore,Q¯T(sT)≜EξTQT(sT,ξT)=EξTQ^T(sT,ξT)≜Q^T(sT).Suppose thatQ¯t(st)⩽Q^t(st). Then for the stage t−1 problem, we haveQ¯t-1(st-1)=Eξt-1Qt-1(st-1,ξt-1)=Eξt-1minxt-1∈Xt-1(st-1,ξt-1)ct-1·xt-1+Q¯t(st(xt-1))⩽Eξt-1minxt-1∈Xt-1(st-1,ξt-1)ct-1·xt-1+Q^t(st(xt-1))⩽Eξt-1minxt-1∈Xt-1(st-1,ξt-1)ct-1·xt-1+Q∼t(xt-1)=Eξt-1Q^t-1(st-1,ξt-1)=Q^t-1(st-1)Therefore, the claim is also true for t−1. □There are several goals in the numerical experiment. The first is to evaluate the effectiveness of the approximation procedures by measuring the accuracy for exchanging a pair of arcs. The second is to investigate the convergence behavior of the AED method, and the third is to evaluate the upper bound produced by the AED method. The fourth goal is to compare the solution quality of the AED with the NRD method, and with a deterministic method for the three-stage problem that models the drayage problem. Furthermore, we compare the AED method when it is applied for multistage network with the SCAM and with a deterministic method. All programs of this experiment are coded in Java language and executed on personal computer with 1GHz CPU and 128M RAM.

@&#CONCLUSIONS@&#
