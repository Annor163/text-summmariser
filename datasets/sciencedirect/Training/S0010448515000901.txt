@&#MAIN-TITLE@&#
Implementation and evaluation of automated tetrahedral–prismatic mesh generation software

@&#HIGHLIGHTS@&#
An open-source implementation for prismatic–tetrahedral mesh generation is presented.Global constrained optimization is employed to create prismatic layer envelope.We find that total mesh generation time is substantially reduced.Manual user intervention effort is smaller due to large degree of automation.Comparisons of RANS solutions demonstrate adequate mesh quality.

@&#KEYPHRASES@&#
Mesh generation,Design analysis automation,Aerospace engineering,Mesh optimization,Hybrid prismatic meshes,Semi-structured mesh untangling,

@&#ABSTRACT@&#
An open-source implementation of an efficient mesh generation procedure for hybrid prismatic–tetrahedral meshes intended for use in Reynolds-averaged Navier–Stokes solutions is presented. The method employed combines the established, and very fast, Delaunay-based tetrahedral mesh generator TetGen with a novel technique for the creation of a prismatic layer, where constrained global optimization of the envelope is employed. Once a well-shaped envelope is thus obtained, a semi-structured layer of pentahedral elements is extruded between wall and envelope surface. Satisfactory mesh quality is demonstrated by comparing solutions obtained using the new meshes with reference data computed on high-quality advancing-front grids. Mesh generation time is shown to be substantially smaller than with many other methods. Overall, the presented implementation is deemed a valuable tool for cases where many meshes need to be generated for routine analyses and turnaround time is critical.This is an extended version of the paper presented at the 23rd International Meshing Roundtable in London, October 2014.

@&#INTRODUCTION@&#
Aeronautical applications are frequently characterized by high Reynolds numbers and significant turbulence, where the overall flow field can be substantially affected by the development of a comparatively thin boundary layer close to the wall surface. Numerical solutions of the Reynolds-averaged Navier–Stokes equations (RANS) are often performed by means of well-established finite-volume methods. Even though such methods use turbulence models to circumvent the need for the resolution of very small scales, the required solution accuracy mandates that the computational mesh is capable of resolving the large velocity gradients present in turbulent boundary layers. An approach which is widely used for industrial applications with complex geometry combines an unstructured tetrahedral mesh in most of the fluid domain with a semi-structured layer of triangular prismatic elements adjacent to the wall surface. This prismatic layer need not necessarily match the extent of the physical boundary layer, as long as the number and interior spacing of prismatic elements is sufficient to resolve the solution.Even with this hybrid prismatic–tetrahedral approach, the creation of high-quality discretizations remains a challenging task [1–3] to this day. Even on modern computer hardware and with substantial engineering effort, the application of state-of-the-art mesh generation algorithms may still result in inadequate local mesh quality, which can severely affect the resolution of important flow features, e.g. in the wing–fuselage junction region [4]. To address such issues, mesh generation tools for hybrid unstructured grids often expose a considerable number of algorithm configuration parameters [5–7], many of which have a profound influence on the robustness of the process. The resulting flexibility allows the user to create sufficiently resolved hybrid meshes, although parameter selection often requires a considerable effort even for an experienced user.In numerous applications, expending this effort is fully justified in order to obtain high-quality solutions e.g. for the drag evaluation of a commercial aircraft. Nevertheless, there are also cases with very different requirements. Aerodynamic load calculations, for instance, must routinely be performed for very many different and often geometrically complex configurations.11e.g. control surface deflections, high-lift device extension, landing gear, air brake or spoiler deployment, external stores.It is the latter type of problem which the present approach attempts to address by means of mesh generation efficiency and a large degree of automation.Since an automatic mesh generation procedure cannot rely on user intervention for the resolution of mesh inconsistencies resulting from geometric complications, a robust strategy for the handling of surface geometry features encountered in realistic aircraft configurations must be implemented. One possible, innovative solution is to accept a hybrid mesh with known regions of low element quality, and to then augment the unstructured volume mesh with one or a number of structured overset blocks which can be manually adapted to better resolve critical geometric features  [8,4]. Obviously, this approach requires robust solver support for overset grids, which is not necessarily available in all state-of-the-art software for industrial use. Another approach to improve robustness is the transition to a combination of prismatic, tetrahedral and octree-based mesh generation procedures, which has been shown to allow a surprising flexibility in the presence of difficult geometric features  [9]. From the information available at this time, it is however not clear how the resulting mixed mesh topology and locally biased edge alignment will affect the solution accuracy for three-dimensional boundary layer flows. Previous investigations have shown that the accuracy of standard finite-volume schemes can be rather sensitive to this particular type of irregularities  [10,11].The approach presented here is based on a segregated prismatic/tetrahedral mesh generation procedure, and aims to achieve robustness by means of local geometric modifications. Criteria chosen and algorithmic modifications make use of similar principles as in earlier work  [12–14], but are adapted for the specific requirements of mesh generation for aircraft configurations. An existing set of open-source tools is exploited for mesh data structures, file format support, surface mesh generation and the creation of tetrahedral volume meshes.Surface mesh generation capabilities of the current tool-chain have been presented earlier  [15]; therefore, the present paper is focused on the procedures employed in the volume mesh generation step. Such a decomposition is possible as the algorithms do not currently exploit any coupling with the surface mesh generation stage and can therefore also be utilized to create a hybrid prismatic–tetrahedral mesh around an existing triangular surface created by any other software, provided that this surface mesh is of sufficient quality. Requirements for surface mesh quality are discussed in Section  3.3.In contrast to many other mesh generation procedures focusing on mesh quality, the aim of the present effort is to obtain the capability to robustly and with minimal user interference produce hybrid meshes suitable for engineering computations using vertex-centered finite-volume codes for the solution of the RANS equations. The authors acknowledge that there are a multitude of challenging flow problems which will still require the use of other mesh generation tools and algorithms in order to create an adequate computational mesh. The present method does not aim to substitute existing software for the manual creation of very high-quality meshes, where a-priori knowledge of the flow field can be successfully exploited to obtain the best possible discretization for a particular case.Nevertheless, it is anticipated that a fast and comparatively robust tool will allow for significant savings in time and effort where meshes for many different routine flow simulations must be generated. An example of such applications may be the automated creation of a series of meshes for a full aircraft model in a windtunnel, which often requires a separate mesh for each experimental setting in order to correctly capture wall effects and elastic model deformation. Another use case which could possibly benefit substantially is the application to military aircraft with multiple external stores, where potentially as many as hundreds of different geometric configurations need to be handled with manageable effort.Generally speaking, the purpose of creating a hybrid prismatic mesh is to substantially increase mesh resolution in boundary layers, where high Reynolds number flows exhibits large gradients in the wall-normal direction. It is, however, important to note that the extent of the prismatic mesh layer does not correspond directly to the size of the boundary layer; in fact, the outer limit of the prismatic layer will usually far exceed the boundary layer displacement thickness. This is an intentional feature of the present method which permits a smooth volumetric transition between the uppermost prismatic elements and adjacent tetrahedra. Therefore, only the lower part of the prismatic layer (near the wall) is actually intended to resolve the physical boundary layer, which must be taken into account when considering the number of layers and the wall-normal element size expansion ratio.

@&#CONCLUSIONS@&#
When comparing the mesh generation timings, an interesting observation can be made. For the common situation where a parallel CFD solver is run on a dedicated compute cluster of moderate size, the analyst may be evaluating post-processed results of a steady-flow simulation based on a sumo-generated mesh before an advancing front mesh has even been completed. This is a substantial advantage of the presented open-source method.Obviously, this does not mean that there is no need for high-quality advancing-front mesh generation tools. A substantial proportion of relevant geometries and flight conditions likely require more detailed control over mesh generation parameters than what is available in the present hybrid Delaunay implementation. However, for routine solutions where serial mesh generation time is a severe bottleneck, sumo or the underlying libraries can be used to accelerate the turnaround time considerably.While the present implementation can be used in an almost fully automated way, the level of robustness initially aimed for has not quite been achieved yet. A large variety of different geometric configurations have been successfully meshed; nevertheless, some users still report that the quality of the prismatic layer generated for some particular cases is insufficient for the flow solver in use. Such problems are sometimes related to a failure of the node classification stage for peculiar geometric conditions; another remaining difficulty is the presence of extremely low-quality triangles in the surface mesh.Future efforts will therefore be dedicated to improve existing surface mesh generation methods such as to avoid badly shaped triangles which presently may be created near intricate surface intersections and in situations such as near wing-tip trailing edges of wings with very thin airfoil sections. Furthermore, the generation of a C-type mesh topology for the prismatic layer near wing trailing edges will be attempted in order to improve the shape of control volumes and ameliorate wake resolution.