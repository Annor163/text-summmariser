@&#MAIN-TITLE@&#
Open source tools for measuring the Internal Quality of Java software products. A survey

@&#HIGHLIGHTS@&#
Automatic measure of metrics with suitable tools is very relevant in development.This paper presents a survey of open source software tools.These tools automate the collection of metrics, particularly for Java code.The paper is based on a Systematic Literature Review Process.

@&#KEYPHRASES@&#
Software product,Tools,Open source,Metrics,Internal Quality,Automation,Static analysis,Source code,Java,

@&#ABSTRACT@&#
Collecting metrics and indicators to assess objectively the different products resulting during the lifecycle of a software project is a research area that encompasses many different aspects, apart from being highly demanded by companies and software development teams.Focusing on software products, one of the most used methods by development teams for measuring Internal Quality is the static analysis of the source code. This paper works in this line and presents a study of the state-of-the-art open source software tools that automate the collection of these metrics, particularly for developments in Java. These tools have been compared according to certain criteria defined in this study.

@&#INTRODUCTION@&#
Metrics constitute a good way to understand, monitor, control, predict and test software development and maintenance projects. Establishing systems for measuring software product quality is a key issue within the software quality control, especially regarding the current trend towards outsourcing developments, which is often performed by external teams or external software factories. Moreover, a software product quality measurement system is efficient if it is highly automated and can be used on a frequent basis without excessive waste of time [1].The fact of having tools to automate both the acquisition and presentation of the values of metrics offers some important advantages [2] such as:•It allows obtaining values from the analyzed metrics doing the least possible effort. The hardest work will have to be done at the beginning and it will require the effort of setting the tool used to obtain the metrics.It reduces metric calculation errors, achieving greater accuracy in their values.It allows focusing on the analysis of measurement results rather than acquisition results.It defines minimum and maximum thresholds, beyond which the values for certain metrics are directly presented as a warning or error.In the area for measuring the Internal Quality of Software Products, some relevant standards (ISO and IEC) offer initial frameworks to support it. Thus, ISO/EC 13598 [3], which is composed of six parts, offers a suitable framework to value the quality of each kind of software product and defines requirements that have to be supported by measure methods and processes.Another important reference, ISO/IEC 9126[4], which is divided into four parts, defines some specific aspects in software products (part 1) as well as Internal and External metrics and metrics in use (parts 2, 3 and 4). This standard describes three different types of quality: Internal and External quality and quality in use.Currently, the subcommittee SC7 (Software Engineering and System) of the Technical Committee ISO/IEC JTC1 (Information Technology) is reviewing both standards to define a new one that may cover both ISO/IEC 9126 and ISO/IEC 14598. This new approach is called ISO/IEC 25000[5], frequently known as SQuaRE (Software Quality Requirements and Evaluation). It mainly focuses on providing guidelines on software product development by supporting right specification and evaluation of quality requirements. Thus, SQuaRE defines a set of criteria to specify quality requirements for software products as well as their metrics and evaluation. SQuaRe consists of five divisions and a set of extensions and technical reports. Thus, ISO/IEC 25000 substitutes ISO/IEC 9126—Part 1.This paper does not aim to present a global study on both quality in use and quality of the product (Internal and External). Thus, it will be restricted to the Internal Quality of the products and the remaining will be proposed as future work.According to [6], the static analysis of the code would be defined as a set of analysis techniques where the software studied is not executed (in contrast to the dynamic analysis), but analyzed. For this reason, this type of analysis will allow obtaining Internal Quality metrics, as it does not require a software in use to be measured.This paper focuses on Internal Quality metrics of a Software Product and software tools of static code analysis that automate measuring these metrics. Keeping in mind the variety of technologies in the present software, studying measurement tools for all of them would exceed a single paper. For this reason and due to its great popularity, this paper only focuses on source code or compiled programs of Java technology, thus covering a large part of the market products accounting for about 20% of software products. This fact is showed in the index TIOBE [7] of March 2011, in which Java stands as the most used language with a share of 19.711%. However, while this study focuses on Java technology, other technologies are proposed in Section 6 for future work.The comparative analysis of tools in this paper has been carried out by means of the proposed guide for Systematic Literature Review (SLR) included in [8]. This process consists in three main activities:1.Planning. In this phase, the survey is planned and delimited and a specific protocol to set it up must be defined. Both the aims of the survey and the environment and sources to identify the approach of study must be clearly and completely defined.Conducting the review. In this phase, after the initial constraints have already been specified, the subject of study must be identified and reviewed through different sources. Then, the set of relevant approaches to be analyzed is identified. SEG (Software Engineering Group) proposes to establish a common characterization criterion to define each approach before executing the comparative study. It enables to obtain a uniform definition for each approach that may facilitate such comparative study.Reporting the review. Finally, once the approaches have been assessed and the research situation has already been analyzed, the process concludes with a report on the results of the review. In fact, this paper represents the result of our review. Previous phases were executed before writing this paper, as referenced.Despite that the number of tools found in the revision is not as large as the number of paper that is frequently included in a SLR, which is helpful in case of thousands of papers that should be manually analyzed without an established methodology, it is considered to offer a well-defined and useful process to compare these tools.Thus, to present the results, this study is structured as follows: Section 2 introduces other related studies on static analysis tools for Java source code while Section 3 defines the scope of the study setting out the requirements that a tool has to meet to be included in it. To follow, Section 3.1 introduces a characterization scheme to standardize the information of each of the approaches found. This section involves the first and second phases of SEG (Software Engineering Group) [8]. Section 4 offers the state-of-the-art tool analysis, which draws the information indicated in the characterization scheme obtained in Section 3 for each tool. Section 5 compares the tools assessed according to the data obtained in Section 4, and discusses in detail how the tools cover one of the features present in that scheme (the Internal Quality model). Concluding the report is Section 6 by summarizing the study and comparison of tools, and pointing out several lines of research for future work.

@&#CONCLUSIONS@&#
This paper presents an overview of open source software tools that automate the collection of Internal Quality metrics of Software Products from the point of view of static analysis of Java source code. It begins by describing the procedure defined by SEG for guiding a study of this type [8]. It applies the terminology proposed by Brereton et al. [12] to specify the strategy used in this study.Sixteen tools are analyzed along the corresponding sections. Most of them automate the calculation of Internal Quality metrics (data acquisition), being code smells, complexity and code size the most common ones. Sonar and Squale are capable of gathering data for all categories of metrics, while the other tools are more specialized in a limited set of metrics. There are 3 complete tools (Xradar, Sonar and Squale), which perform the data acquisition, analysis and presentation. These tools are relatively new and are based on more mature tools for metric acquisition.As a further conclusion, it would be stated that Sonar (including its plugins) and Squale give support to a greater or lesser extent to ISO 9126, SIG and SQUALE Quality models, establishing a relationship between these models and the metrics they collect. Therefore, and to conclude, it may be pointed out that although there are many tools that automate the calculation of Internal Quality metrics of Software Product, very few have shown evidences of the relationship between metrics and Quality models.We consider that this paper offers a global review of the situation, focusing on the features (metrics) supported by each tool, without providing an empirical validation and comparison of the features exposed by each tool to assess their real quality. It constitutes the base to detect the most suitable tools, planning further studies of them and analyze them in detail in order to discover computing bugs or errors in the metrics provided. This paper has offered us the possibility of offering a first view and it is the begging for future detailed analysis. Thus, as a result of the study, several lines of research for future work have been identified in this paper:Static analysis of other technologiesThis study would focus on static analysis of Java source code, but it is applicable to other general purpose programming languages such as C, C ++ or the programming languages of .NET platform (C# and Visual Basic.NET), some database programming languages, such as PL/SQL, or even more specific contexts, such as web application development, a category where the quality of code developed for frameworks like Struts, JSF or ASP.NET should be studied.Static analysis of other productsThis line of research would study the automated measurement of Internal Quality in early stages, prior to code generation, such as analysis and design documentation. A case study would be the static analysis of UML diagrams that are generated in these phases.Supporting tools for Internal Quality modelsOne of the shortages identified in the analyzed open source tools deals with the little coverage given by Internal Quality models, so this line of research would try to find tools in other areas such as that of commercial tools or propose the design of tools that fulfill this need, if any tools providing sufficient coverage to these models are found.Dynamic analysis, External Quality and quality in useThe dynamic analysis is performed at later stages than the static analysis, since it requires running the software allowing measuring either External Quality, if performed in a test environment, or quality in use, if carried out in a production environment. For example, this research would analyze tools that measure characteristics associated with unit testing or resource consumption.Finally, another important idea resulted from this paper. We were considering the possibility of changing our characterization scheme in order to align it with the standard ISO 25000. Despite that this idea is not particularly oriented towards answering the research questions, it could be very interesting to define how each approach focuses on the standard and offers a suitable mechanism to evaluate the relevance of each tool in this line.