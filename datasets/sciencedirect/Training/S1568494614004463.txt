@&#MAIN-TITLE@&#
The effects of asymmetric neighborhood assignment in the MOEA/D algorithm

@&#HIGHLIGHTS@&#
The MOEA/D algorithm is one of the leading multiobjective evolutionary algorithms.The paper describes the effects that cause the MOEA/D algorithm to converge asymmetrically.This is undesirable, because a multiobjective optimizer should explore the solution space evenly.The paper gives some guidelines on how to avoid such asymmetries.

@&#KEYPHRASES@&#
Multiobjective optimization,Evolutionary algorithms,MOEA/D algorithm,Selective pressure,

@&#ABSTRACT@&#
The Multiobjective Evolutionary Algorithm Based on Decomposition (MOEA/D) is a very efficient multiobjective evolutionary algorithm introduced in recent years. This algorithm works by decomposing a multiobjective optimization problem to many scalar optimization problems and by assigning each specimen in the population to a specific subproblem. The MOEA/D algorithm transfers information between specimens assigned to the subproblems using a neighborhood relation.In this paper it is shown that parameter settings commonly used in the literature cause an asymmetric neighbor assignment which in turn affects the selective pressure and consequently causes the population to converge asymmetrically. The paper contains theoretical explanation of how this bias is caused as well as an experimental verification. The described effect is undesirable, because a multiobjective optimizer should not introduce asymmetries not present in the optimization problem. The paper gives some guidelines on how to avoid such artificial asymmetries.

@&#INTRODUCTION@&#
The Multiobjective Evolutionary Algorithm Based on Decomposition (MOEA/D) proposed in [18] is a multiobjective evolutionary algorithm competitive to other well-known multiobjective optimization evolutionary algorithms (MOEAs) such as NSGA-II [6] or SPEA-2 [21]. The MOEA/D was found to outperform other algorithms not only in the case of benchmark problems [18,11], but also in the case of combinatorial problems [15] and various applications to real-life problems [7,10,1,17].The class of multiobjective optimization problems (MOPs) can be formalized as follows:(1)minimizeF(x)=(f1(x),…,fm(x))subjecttox∈Ω,where: Ω – the decision space, m – the number of objectives.Solutions can be compared to each other using the Pareto domination relation formally defined as follows [14,3]. Given two points x1 and x2 in the decision space Ω for which:(2)F(x1)=(f1(x1),…,fm(x1))F(x2)=(f1(x2),…,fm(x2))we say that x1dominates x2 (x1≻x2) iff:(3)∀j∈{1,…,m}:fj(x1)≤fj(x2)∃j∈{1,…,m}:fj(x1)<fj(x2)A solution x is said to be nondominated (Pareto optimal) iff:(4)¬∃x′∈Ω:x′≻x.Usually, there is no single x0∈Ω which minimizes all fj, j∈{1, …, m} simultaneously, so it is not possible to simply choose one “the best” solution. Therefore, solving a multiobjective optimization problem usually means finding a Pareto set of nondominated solutions in the decision space Ω or a Pareto front of points in the objective space Rmthat correspond to solutions from the Pareto set. Some of the algorithms, for example the commonly-used NSGA-II algorithm, use the notion of Pareto domination directly to decide which specimens are promoted to the next generation and which are replaced.Conversely, the main idea employed in the MOEA/D algorithm is to decompose the multiobjective problem to a number of scalar subproblems. This task is done by assigning a weight vector λ=(λ1, …, λm), λj≥0 for all j∈{1, …, m},∑j=1mλj=1to each specimen in the population. The evaluation of a specimen is then performed using one of the aggregation approaches. Two the most commonly used aggregation approaches are the weighted sum approach and the Tchebycheff approach. In the weighted sum approach the following formulation of a scalar problem is used:(5)minimizegws(x|λ)=∑j=1mλjfj(x)subjecttox∈Ω,where: λ – the weight vector assigned to the specimen.The Tchebycheff approach uses a reference pointz*=(z1*,…,zm*)which is composed of the best attainable values along all the objectives:zj*=min{fj(x):x∈Ω}. In case the best possible values are not known in advance the MOEA/D algorithm offers a possibility of calculating the z* value after each generation as a minimum of objectives of all the solutions found so far. The formulation of a scalar problem in the Tchebycheff aggregation approach is as follows:(6)minimizegte(x|λ,z*)=max1≤j≤m{λj|fj(x)−zj*|}subjecttox∈Ω,where: λ – the weight vector assigned to the specimen, z* – the reference point.In the MOEA/D algorithm the following way of generating weight vectors is used. First, a parameter H (a step size used for generating weight vectors) is set to a predefined value. Then, all weight vectors (i.e. vectors satisfying∑j=1mλj=1) are generated, such that:(7)λj∈0H,1H,…,HH.Therefore, the total number of weight vectors (and so the population size) is:(8)N=CH+m−1m−1.For a bi-objective optimization problem (m=2) the weight vector generation procedure described above results in a set of vectors {λ(i)}, i∈{0, …, H}, where:(9)λ(i)=iH,H−iH.Obviously:(10)∀i∈{0,…,H}:λ(i)+λ(H−i)=[1,1].For example, if we set H=99 we get a population size N=100 with the weight vector set:(11){λ(0),…,λ(H)}={[0,1],[1/99,98/99],…,[1,0]}.Another important concept used in the MOEA/D algorithm is subproblem neighborhood. The neighborhood of each weight vector λ(i) (and therefore also the corresponding specimen) is defined as a set B(i) of T weight vectors that are closest to λ(i) with respect to the Euclidean distance calculated in the m-dimensional space of vector weights. The neighborhood B(i) is used in MOEA/D to select parents for a new specimen that, if it generates a better value of the aggregated objective function (for example gws(x|λ(i)) or gte(x|λ(i), z*)), may replace the old specimen assigned to the weight vector λ(i). Also, the newly found solution to the i-th subproblem may replace solutions corresponding to weight vectors from the B(i) if it improves the aggregated objective for these solutions. Note, that by definition each vector λ(i) belongs to its own neighborhood B(i). This is not just a side effect of using the Euclidean distance in the weight space to define the neighborhood, but it is also important for the working of the algorithm, because the current solution of a scalar subproblem is expected to significantly participate in the search for better solutions of this subproblem.The overview of concepts involved in the working of the MOEA/D algorithm in the case of minimization in a bi-objective problem is presented in Fig. 1.From the definition of neighborhood B(i) it is clear that when the neighborhood size T is set to an even number the neighborhood B(i) is not symmetrically spread around the weight vector λ(i) (cf. Fig. 1).In this paper the effects of asymmetric neighborhood assignment are studied. The interest in such effects is motivated by the fact that in a number of papers in which the MOEA/D algorithm is studied even values of the neighborhood size T are used which may cause a tendency for the algorithm to converge asymmetrically. Table 1presents values of the T parameter found in a number of papers in which the value of this parameter is specified. In the table bibliographic references are also given. In some papers, the value of the T parameter is not set directly, but instead it is defined as a fraction of the population size N. In [12] the parameters are set to T=0.1N, N=100 and in [9] the parameters are set to T=0.1N, N=200, 600 and 1000. Clearly, both parameter settings lead to even values of the parameter T. Unfortunately, many other papers do not mention the value of the T parameter.Weight vectors λ(i), i∈{1, …, N} determine the importance of objectives fj, j∈{1, …, m} in each of the scalar subproblems. The overall importance of the objectives can therefore be compared by calculating a vector which contains the average weights that the objectives have in all the neighborhoods defined for all the subproblems:(12)λ¯=1(H+1)T∑i=0H∑λ∈B(i)λ.For neighborhoods generated for a bi-objective optimization problem neighborhoods B(i) have the form of:(13)B(i)=λ(li),…,λ(hi),where:li=i−T−12,hi=i+T−12.Because weight vector indices must be from the set 0, …, H when li<0 we set B(i)={λ(0), …, λ(T−1)} and when hi>H we set B(i)={λ(H−T+1), …, λ(H)}. Considering the above we get:(14)Bi=λ0,...,λT−1fori≤T−12λi−T−12,...,λi+T−12otherwiseλ(H-T+1),...,λ(H)fori>H−T−12Next, we can write Eq. (14) separately for even and odd values of the neighborhood size T and substitute B(i) in Eq. (12).1° T=2k,k∈ℕ(15)Bi=λ0,...,λT−1fori≤k−1λ(i−k+1),...,λi+ki∈k,H−kλH−T+1,...,λHfori>H−kSubstituting B(i) from Eq. (15) in Eq. (12) we get the vector of average weights:(16)λ¯=1(H+1)T∑i=0H∑λ∈B(i)λ(17)=1(H+1)T∑i=0k−1∑λ∈B(i)λ+∑i=kH−k∑λ∈B(i)λ+∑i=H−k+1H∑λ∈B(i)λ(18)=1(H+1)T∑i=0k−1∑j=0T−1λ(j)+∑i=kH−k∑j=i−k+1i+kλ(j)+∑i=H−k+1H∑j=H−T+1Hλ(j)(19)=1(H+1)Tk∑j=0T−1λ(j)+∑i=kH−k∑j=i−k+1i+kλ(j)+k∑j=H−T+1Hλ(j)(20)=1(H+1)Tk∑j=0T−1λ(j)+∑i=kH−k∑j=i−k+1i+kλ(j)+k∑j=0T−1λ(H−j)(21)=1(H+1)Tk∑j=0T−1λ(j)+λ(H−j)+∑i=kH−k∑j=i−k+1i+kλ(j)Using Eq. (10) we get:(22)λ¯=k(H+1)1,1+1(H+1)T∑i=kH−k∑j=i−k+1i+kλ(j)(23)=k(H+1)1,1+1(H+1)T∑i=kH−k∑j=i−k+1i+kjH,H−jH(24)=12H(H+1)H2+2H−2k+1,H2+2k+1Since H≥T=2k (the neighborhood size is smaller than the size of population) so H−k≥k and therefore from Eq. (24) we get that the average weight that the first objective has in all the neighborhoods defined for all the subproblems is not smaller than the weight for the second one. The equality holds only when N−1=H=T=2k i.e. when the neighborhood size is almost equal to the size of the entire population, which is rarely, if ever, used. In all the other cases (i.e. T<H) the average weight that the first objective has is larger than the weight the second objective has. The difference between the average weights for both objectivesλ¯1−λ¯2equals:(25)λ¯1−λ¯2=H2+2H−2k+12H(H+1)−H2+2k+12H(H+1)(26)=H−2kH(H+1)Therefore, for a fixed value of the parameter T=2k the difference gets smaller with the increasing H.2° T=2k+1,k∈ℕ(27)B(i)={λ(0),…,λ(T−1)}fori≤k{λi−k,…,λi+ki∈k+1,H−k−1{λ(H−T+1),…,λ(H)}fori≥H−kSubstituting B(i) from Eq. (27) in Eq. (12) we get the vector of average weights:(28)λ¯=1(H+1)T∑i=0H∑λ∈B(i)λ(29)=1(H+1)T∑i=0k∑λ∈B(i)λ+∑i=k+1H−k−1∑λ∈B(i)λ+∑i=H−kH∑λ∈B(i)λ(30)=1(H+1)T∑i=0k∑j=0T−1λ(j)+∑i=k+1H−k−1∑j=i−ki+kλ(j)+∑i=H−kH∑j=H−T+1Hλ(j)(31)=1(H+1)T(k+1)∑j=0T−1λ(j)+∑i=k+1H−k−1∑j=i−ki+kλ(j)+(k+1)∑j=H−T+1Hλ(j)(32)=1(H+1)T(k+1)∑j=0T−1λ(j)+∑i=k+1H−k−1∑j=i−ki+kλ(j)+(k+1)∑j=0T−1λ(H−j)(33)=1(H+1)T(k+1)∑j=0T−1λ(j)+λ(H−j)+∑i=k+1H−k−1∑j=i−ki+kλ(j)Using Eq.(10) we get:(34)λ¯=k+1(H+1)1,1+1(H+1)T∑i=k+1H−k−1∑j=i−ki+kλ(j)(35)=k+1(H+1)1,1+1(H+1)T∑i=k+1H−k−1∑j=i−ki+kjH,H−jH(36)=k+1(H+1)1,1+H−2k−12(H+1)1,1(37)=H+12(H+1)1,1(38)=12,12From Eq. (38) we get that when the neighborhood size T is an odd number the average weights that both objectives have in all the neighborhoods defined for all the subproblems are the same. Therefore, we might expect that the first objective will be treated by the algorithm as more important than the second one when the neighborhood size T is even, but the objectives should be treated equally in the case when T is odd. However, it needs to be verified if the inequality in average weights significantly influences the symmetry of the final approximation of the Pareto front produced by the algorithm.In Section 2 it was shown that for even values of the neighborhood size T the average value of weights belonging to all neighborhoods is different for each of the two objectives. This effect is not present when the neighborhood size T is an odd number. This theoretical result is not enough to conclude that the asymmetry of neighborhood assignment influences the characteristics of the approximation of the Pareto front found by the algorithm. The final result depends not only on information transfer between specimens within neighborhoods, but also on the working of genetic operators (mutation and crossover) and also on possible tendencies introduced by the objective functions if the problem itself is not symmetric. This complexity makes it very hard to predict theoretically how the algorithm will behave when optimizing a given problem.In order to investigate the influence of neighborhood assignment on the symmetry of the approximation of the Pareto fronts found by the algorithms an experimental verification was performed. To remove any possible influence of the optimization problem itself as well as the influence of the initial population distribution the experimental setup was carefully prepared to avoid any asymmetries other than those in the neighborhood assignment.There are many benchmark problems used in the scientific community for investigating multiobjective optimization problems, for example the ZDT test problem set [20]. Unfortunately, such benchmark problems have asymmetries that would make it difficult to distinguish potential effects of the uneven selective pressure. Therefore, a dedicated test problem is proposed in this paper.A geometric representation of the test problem used in experiments is as follows. First, the dimensionality d of the search space is selected. The search space is a d-dimensional cube Ω=[0, 1]d. In this cube two points are located: one with all coordinates equal to 1/4 and the other one with all coordinates equal to 3/4:(39)A=14,…,14∈Rd(40)B=34,…,34∈RdFor a given point x0∈[0, 1]dthe two objectives are defined as distances to points A and B respectively. Clearly, the problem of minimizing both distances is a bi-objective problem with contradictory objectives. Formally, the problem can be stated as follows:(41)minimizeF(x)=(∥x−A∥,∥x−B∥)subjecttox∈[0,1]d,which is equal to:(42)minimizeF(x)=(f1(x),f2(x))subjecttox∈[0,1]d,where:(43)f1(x)=∑i=1d(xi−Ai)2(44)f2(x)=∑i=1d(xi−Bi)2Clearly, the Pareto set of this optimization problem is the line segment connecting the points A and B in the decision space [0, 1]d. The length of this segment isd/2. Therefore, the Pareto front is a line segment in the objective space R2 with the equation:(45)y=−x+d2,x∈0,d2.All of the points on this line segment are attainable, because positioning the solution anywhere on the AB line segment is allowed. The proposed test problem has several advantages presented below.•The Pareto front is symmetric with respect to the y=x line. This ensures that the objectives themselves do not introduce any preference for neither f1 nor for f2.The problem is invariant with respect to any reordering of dimensions of the decision space Ω. This ensures that no preference for any of the variables can cause an asymmetry in the final Pareto front.The transformation m:Rd→Rddefined as follows:(46)m(x)=x′s.t.∀i∈{1,…,d}:xi′=1−xican be used to transform any solution x0 with objective values [f1(x0), f2(x0)] to another solutionx0′=m(x0)with objective values[f1(x0′)=f2(x0),f2(x0′)=f1(x0)]. This property can be used to generate an initial population placed symmetrically with respect to y=x line in the objective space R2.In the experiments the Multiobjective Evolutionary Algorithm Based on Decomposition (MOEA/D) was used. The algorithm was implemented according to steps detailed in [18]. For genetic operators the Simulated Binary Crossover (SBX) [4] and the polynomial mutation operator [5] were chosen, because these operators are designed to deal with real-valued problems and are commonly used in the literature for this task.Test problem dimensionality was set to d=30. The parameters of the algorithm were set in the same way as in [18] for continuous MOPs with the exception of the neighborhood size T which was changed in order to determine its influence on the symmetry of the final approximation of the Pareto front. Values of the algorithm parameters are summarized in Table 2.Initial populations that were used for each run of the algorithm were built by first creating N/2 specimens with 30 coordinate values drawn from a uniform distribution on [0, 1]. Then, the other N/2 specimens were initialized by transforming the coordinates of the specimens in the first half of the population using the transform m(·) given as Eq. (46). Such initialization procedure ensures that the initial population is located symmetrically with respect to the y=x line in the objective space.The MOEA/D algorithm was run for Ngen=250 generations. The algorithm stores an archive EP which contains the best approximation of the Pareto front found so far. At the end of each generation the symmetry of the approximation of the Pareto front that was found up to that generation was measured. Coordinates of the specimens in the EP archive were transformed by a 45° clockwise rotation:(47)x′=x2+y2(48)y′=−x2+y2after which the Pareto front is oriented vertically with the center moved from[d/4,d/4]to[d/22,0]. The average y′ coordinate calculated over the EP set obtained at a generation g was used as a measure of location of the approximation of the Pareto front S(g) obtained in that generation. The higher the value of the S(g) measure the more is the approximation of the Pareto front offset towards the second objective.In the experiments 100 independent runs were performed for each neighborhood size T with the weights assigned according to the procedure described in Section 2. As described in Section 2, when T is even such weights assignment causes the average weight corresponding to the first objective in all the neighborhoods defined for all the subproblems to be larger than the average weight corresponding to the second objective. The same number of runs was done with weight vectors sorted in the reversed order which resulted in the second objective having larger average weight. Values of the location measure were recorded for weight vectors sorted in one direction as S(g), g∈{1, …, Ngen} and for weight vectors sorted in the opposite direction as S′(g), g∈{1, …, Ngen}.From 100 pairs of S(g) and S′(g) values independently collected for each generation the differences Δ(g)=S′(g)−S(g) were calculated. The average of Δ(g) values from independent runs for a given g indicates if the change in weight vectors ordering influences the location of the approximation of the Pareto front obtained in generation g or not. The interpretation of values of Δ(g) is as follows:Δ(g)>0   The ordering of weight vectors favors the first objectiveΔ(g)=0   The ordering of weight vectors does not favor any of the objectivesΔ(g)<0   The ordering of weight vectors favors the second objectiveTo verify if Δ(g) values are significantly different from 0 a Student's t-test [16] was performed for each generation for the null hypothesis that the mean value of Δ(g) is actually 0. If the p-value obtained from this test was not higher than 0.05 the Δ(g) for a given generation g was assumed to be significantly different from 0. The interpretation of such situation is that when weight vectors are sorted in one direction the approximation of the Pareto front is significantly offset compared to when the weight vectors were sorted in the opposite direction.

@&#CONCLUSIONS@&#
