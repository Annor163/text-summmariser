@&#MAIN-TITLE@&#
A convex version of multivariate adaptive regression splines

@&#HIGHLIGHTS@&#
Convex-MARS enables a convex approximation without degrading the quality of fit.Convex-MARS is appropriate for approximations in convex optimization problems.The threshold version of Convex-MARS provides stronger convexity and better accuracy.

@&#KEYPHRASES@&#
Regression splines,Convexity,

@&#ABSTRACT@&#
Multivariate adaptive regression splines (MARS) provide a flexible statistical modeling method that employs forward and backward search algorithms to identify the combination of basis functions that best fits the data and simultaneously conduct variable selection. In optimization, MARS has been used successfully to estimate the unknown functions in stochastic dynamic programming (SDP), stochastic programming, and a Markov decision process, and MARS could be potentially useful in many real world optimization problems where objective (or other) functions need to be estimated from data, such as in surrogate optimization. Many optimization methods depend on convexity, but a non-convex MARS approximation is inherently possible because interaction terms are products of univariate terms. In this paper a convex MARS modeling algorithm is described. In order to ensure MARS convexity, two major modifications are made: (1) coefficients are constrained, such that pairs of basis functions are guaranteed to jointly form convex functions and (2) the form of interaction terms is altered to eliminate the inherent non-convexity. Finally, MARS convexity can be achieved by the fact that the sum of convex functions is convex. Convex-MARS is applied to inventory forecasting SDP problems with four and nine dimensions and to an air quality ground-level ozone problem.

@&#INTRODUCTION@&#
Computer modeling is having a profound effect on scientific research. Many processes are so complex that physical experimentation is too time-consuming, too expensive or simply impossible. As a result, experiments have increasingly turned to mathematical models to simulate these complex systems. Advances in computational power have allowed both greater complexity and more extensive use of such models. The purpose of design and analysis of computer experiments (DACE,  Sacks et al., 1989; Kleijnen, 2008; Chen et al., 2006) is to provide methods for conducting computer experiments to build a metamodel that can be efficiently employed to improve the performance of a complex system. In DACE, the computer experiment replaces the physical experiment by organizing computer model runs and observing the model output of performance. A common DACE objective is to obtain a computationally-efficient response surface approximation (a.k.a., metamodel) of the output. This metamodel may then be used to study and potentially “optimize” the performance of the system. The effectiveness of an optimization method in using a metamodel to improve system performance depends on the convexity of the objective function (Luenberger, 2004). A non-convex metamodel requires a global optimization method, and in practice these typically cannot guarantee optimality. Consequently, if the true underlying performance objective function is known to be convex, it is highly desirable for the approximating metamodel to share this critical property.Multivariate adaptive regression splines (MARS,  Friedman, 1991) modeling has been applied in DACE-based approaches for some large-scale optimization problems, including continuous-state stochastic dynamic programming (SDP,  Chen, 1999; Chen et al., 1999; Tsai et al., 2004; Tsai and Chen, 2005; Cervellera et al., 2007; Yang et al., 2007, 2009), Markov decision processes (MDP,  Chen et al., 2003; Siddappa et al., 2007, 2008), and two-stage stochastic programming (SP,  Pilla et al., 2008, 2012; Shih et al., 2014). The DACE-based SDP and MDP approaches used an experimental design to discretize the continuous (or near-continuous) state space, and then used MARS to approximate the continuous value function over the state space. The MDP application studied an airline revenue management problem with the objective of more accurately estimating the fair market value of a seat over time. The two-stage SP problem studied an airline fleet assignment model that seeks an assignment of aircraft in the first stage, so that swapping of crew-compatible aircraft can be achieved in the second stage to maximize expected revenue. The DACE approach for SP was used to create a MARS approximation of the first-stage expected revenue objective function, so as to speed up the first-stage optimization. MARS has been successful in these applications not only because of the flexibility of its modeling, but also its parsimony. Parsimony is critical in achieving computational-tractability in large-scale complex problems. Shih et al. (2014) added a data mining variable selection phase that reduced the dimension of the airline fleet assignment model from about 1200 to 400 variables prior to executing DACE, so as to reduce the computational effort of DACE from 2.5 days to an estimated 0.5 days.Under the assumption that an optimization functionfis convex, it is desired that the response surface metamodelfˆthat estimatesfbe convex as well. For example, in the above-mentioned SDP, MDP, and SP problems, the underlying function is theoretically convex. Convexity is not a typical assumption of statistical modeling methods, and a specialized approach must be developed. There are several options for DACE metamodeling, including polynomial response surface models (Box and Draper, 1987), spatial correlation models, a.k.a., kriging (Sacks et al., 1989), MARS, regression trees (Breiman et al., 1984; Friedman, 2001), and artificial neural networks (Haykin, 1999). None of these guarantee convexity. Convex-MARS uses the modification of both the MARS basis functions and algorithms to build a sum of convex functions, therefore, the final approximation will be convex. The C code is available from this website: http://www.uta.edu/cosmos/software.php.Friedman (1991) introduced MARS as a statistical method for high-dimensional modeling with interactions. The MARS model is essentially a linear statistical model with a forward stepwise algorithm to select model terms followed by a backward procedure to prune the model terms. A univariate version (appropriate for additive relationships) was presented by Friedman and Silverman (1989). The MARS approximation bends to model curvature at “knot” locations, and one of the objectives of the forward stepwise algorithm is to simultaneously select variables and appropriate knots. After selection of the basis functions is completed, smoothness to achieve a certain degree of continuity may be applied. MARS is both flexible and easily implemented with the computational effort primarily dependent on the number of basis functions added to the model. The MARS approximation is a linear model:fˆM(x;β)=β0+∑m=1MβmBm(x),whereBm(x)initially is a basis function of the form described below in Eq. (1) that later can be smoothed,Mis the number of linearly independent basis functions, andβmis the unknown coefficient for themth basis function. In the forward stepwise algorithm, univariate basis functions are represented in the form of truncated linear functions,(1)b+(x;k)=[+(x−k)]+,b−(x;k)=[−(x−k)]+,where[q]+=max{0,q}andkis a univariate knot. The set of eligible knots are assigned separately for each input variable dimension and are chosen to coincide with input levels represented in the data. Interaction basis functions are created by multiplying an existing basis function with a truncated linear function involving a new variable. Both the existing “parent” basis function and the newly created interaction basis function are used in the MARS approximation. Thus, the form of themth basis function isBm(x)=∏l=1Lm[sl,m⋅(xv(l,m)−kl,m)]+,wherexv(l,m)is the input variable corresponding to thelth truncated linear function in themth basis function,kl,mis the knot value corresponding toxv(l,m), andsl,mis +1 or −1.Lmis the number of truncated linear functions multiplied in themth basis function. The search for new basis functions can be restricted to interactions of a maximum order (e.g.,Lm≤2permits up through two-factor interactions). Using a generalized cross-validation lack-of-fit criterion, basis functions are added in pairs, corresponding to the two forms in Eq. (1). The algorithm stops whenMmaxbasis functions have been selected, whereMmaxis user-specified. The original forward MARS algorithm is represented in Algorithm 1 (please refer to the Appendix), and the key to Convex-MARS is reconstruction of this forward algorithm.The MARS backward algorithm was intended to eliminate overfitting, but due to the extremely low error variability in most DACE applications, this can often be omitted to save computational effort. To compensate for the omission of the backward algorithm, Tsai and Chen (2005) modified the MARS forward algorithm to incorporate an automatic stopping rule (ASR) and seek more robust models with fewer high-order interaction terms. Instead of using the original MARS stopping rule that depends on a user-specifiedMmaxin the MARS forward stepwise algorithm, ASR stops automatically based on the improvement in the coefficient of determination or adjusted coefficient of determination. This enables an automated implementation of MARS model fitting within optimization routines (Tsai and Chen, 2005). The robust component aims to obtain a MARS approximation that is less sensitive to extreme points by selecting the lower-order terms over high-order ones given the contributions or fits are comparable. The actual implementation of Convex-MARS is based on Robust ASR-MARS, however, for clarity, the presented Convex-MARS forward algorithm will follow the structure of Algorithm 1.Friedman’s MARS provides a continuous first derivative everywhere by replacing the truncated linear basis functions with cubic functions after completing the forward and backward algorithms. To give MARS a continuous second derivative everywhere, quintic functions derived by Chen (1993) are used in place of Friedman’s cubic functions. First, define two side knotsk+andk−(in addition to the original center knotk). Then defineΔ=k+−k−,Δ1=k+−k, andΔ2=k−k−. The quintic functions can be written as:(2)Q(x|s=+1,k−,k,k+)={0,x≤k−α+(x−k−)3+β+(x−k−)4+γ+(x−k−)5,k−<x<k+x−k,x≥k+,where,α+=[6Δ1−4Δ2]Δ3,β+=[−8Δ1+7Δ2]Δ4,γ+=[3Δ1−3Δ2]Δ5,and(3)Q(x|s=−1,k−,k,k+)={k−x,x≤k−α−(x−k+)3+β−(x−k+)4+γ−(x−k+)5,k−<x<k+0,x≥k+,where,α−=[4Δ1−6Δ2]Δ3,β−=[7Δ1−8Δ2]Δ4,γ−=[3Δ1−3Δ2]Δ5.To guarantee MARS convexity, two major modifications are made: (1) coefficients are constrained, such that pairs of univariate basis functions are guaranteed to jointly form convex functions and (2) the form of interaction terms is altered to eliminate the inherent non-convexity. A preliminary version of Convex-MARS (Shih et al., 2006) essentially incorporated these modifications to guarantee convexity. However the flexibility of this version was limited, so the current paper presents an improved version. Convex-MARS requires the following algorithms: (i) Convex Interaction Transformation Algorithm (CIT), to create the convex forms of the interaction basis functions (Algorithm 2 in the Appendix), (ii) Forward Coefficient Restriction Algorithm (FCR), to incorporate convexity restrictions on the model coefficients while selecting basis functions (Algorithm 3 in the Appendix), and (iii) Backward Pruning and Refitting Algorithm (BPR), to check for non-convexities and eliminate them (Algorithm 4 in the Appendix). The BPR algorithm is needed because MARS basis functions are overlapping, hence, the addition of new basis functions can alter the existing coefficients. However, a well constructed Convex-MARS approximation should make minimal use of BPR.A univariate basis function is either unpaired or one of a pair added corresponding to the two forms in Eq. (1). An unpaired univariate basis function takes on only one of the forms in Eq. (1). In this case, it will only form a convex term in the MARS approximation if its coefficient is non-negative. In the case of a pair of univariate basis functions, the coefficients of a pair are considered together. For example, the top two plots in Fig. 1display two forms in Eq. (1) withk=0. The lower left plot in Fig. 1 shows the sum of a pair of univariate terms that yields a convex function while the lower right plot shows the sum of a pair that yields a concave function. The key is the sum of the coefficients for the pair. For the convex function, the two coefficients are 1.0 and −0.5, which sums to 0.5. However, for the concave function, the two coefficients are 1.0 and −1.5, which sums to −0.5. It can be seen that the critical value of the sum is zero, so a convex function can be guaranteed if that sum is non-negative.A non-convex MARS approximation is inherently possible because interaction terms are products of univariate terms. In this case, not only must the coefficient for the interaction basis function be constrained, but also a new convex form is needed to successfully construct Convex-MARS. In particular, original MARS utilizes a simple routine for smoothing each basis function to achieve continuous derivatives, and ideally the new convex interaction basis functions would utilize the same smoothing routine. Thus, the Convex-MARS interaction basis functions are constructed so that the smoothing in Section  2 can be applied. To achieve this, the variables involved in the interaction basis function are transformed via a rotation of their axes, and univariate truncated linear basis functions are formed along the rotated axes. Fig. 2illustrates two-way interaction terms for both original MARS and Convex-MARS. The non-convexity of the interaction terms of original MARS is clearly visible while our proposed modification eliminates this issue. Convexity for the purposes of optimization refers to a function that is either purely convex or purely concave, since a concave function can be made convex by multiplying by a negative scalar. If a function simultaneously has convex and concave structure as in Fig. 2(a), then this is considered to be a non-convex function, which is difficult to optimize. Finally, in addition to modifying the form of the interaction term, coefficients must be constrained in the same manner as univariate basis functions in the previous section. Details on the algorithms for Convex-MARS are given in Section  4.The following demonstrates that non-convexity might be present in an original MARS two-way interaction term. Observe that the profile of the 2-way interaction term from Fig. 2(a),b(x)=[+(x1+0.5)]+⋅[−(x2−0)]+, shows an upward curving form, like a convex form. However, it is visibly concave in some regions. To demonstrate this numerically, consider three points:xA=(1,−0.2),xB=(−0.2,−1), andxC=(0,0.7), wherexClies on a line betweenxAandxB. At these points, the interaction term takes on the valuesb(xA)=b(xB)=0.3andb(xC)=0.35. If we draw a chord fromb(xA)tob(xB), the value of any point on the chord will be a constant 0.3. Sinceb(xC)=0.35>0.3,b(x)is concave atxC.To solve the problem due to inherently non-convex interaction terms in the original MARS algorithm, the convex form of themth interaction basis function for Convex-MARS is proposed as follows:Bm(x)=[∑l=1Lm{sl,m⋅(xv(l,m)−kl,m)/(1−sl,mkl,m)}]+where the notation is the same as defined in Section  2. The convex form of interaction basis functions transforms the multiple variables in the interaction to a one-dimensional variable via a linear combination. Given the set of variablesxv(l,m)for an interaction term and corresponding knotskl,mand signssl,m, define:ω0(x)=∑l=1Lm−1{sl,m⋅(xv(l,m)−kl,m)/(1−sl,mkl,m)},ω1(x;sL,m)=sL,m⋅(xv(Lm,m)−kLm,m)/(1−sL,mkLm,m)whereω0(x)represents the components of an existing basis function (parent term),ω1(x)represents the split component on variablexv(Lm,m)that creates a new interaction term. SignsL,m(−1 or +1) determines two distinct one-dimensional variable directions:(4)z+(x)=ω0(x)+ω1(x;sL,m=+1);z−(x)=ω0(x)+ω1(x;sL,m=−1).To show thatz+orz−are linear combinations of the input variables, re-write:(5)ω0(x)=a0+∑l=1Lm−1alxv(l,m),where,(6)a0=∑l=1Lm−1kl,msl,m/(sl,mkl,m−1),al=sl,m/(1−sl,mkl,m),and(7)ω1(x;sL,m)=sL,mkLm,m/(sL,mkLm,m−1)+sL,m/(1−sL,mkLm,m)⋅xv(Lm,m).Givenz+orz−, we can now define pairs of univariate truncated linear functions, as in Eq. (1), with signϕeither +1 or −1 for each pair:(8)b+(z+;τ)=[+(z+−τ)]+,b−(z+;τ)=[−(z+−τ)]+or(9)b+(z−;τ)=[+(z−−τ)]+,b−(z−;τ)=[−(z−−τ)]+.Because the transformation defined in Eqs. (4)–(7) also transforms the multivariate knotktoτ=0in Eqs. (8)–(9), the two candidate pairs of interaction basis functions for Convex-MARS are as follows:(10)Bm(x;ϕm=+1)=[z+]+,Bm+1(x;ϕm=−1)=[−z+]+or(11)Bm(x;ϕm=+1)=[z−]+,Bm+1(x;ϕm=−1)=[−z−]+.To better understand the role ofϕm, consider the two-way interaction example shown in Fig. 3. Knots for the two input variablesx1andx2are 0.25 and −0.5, respectively, ands1,m=−1. The upper two contour plots sets2,m=1and demonstrate the pair of two-way interaction basis functions withϕm=+1, andϕm=−1. Similarly, the lower two contour plots sets2,m=−1and show the pair of two-way interaction basis functions withϕm=+1andϕm=−1.The convexity constraints on the coefficients were identified based on the truncated linear basis functions, but the final MARS approximation employs the smoothed quintic functions in Eqs. (2) and (3). In this section, a convexity proof is provided for the pairs of MARS univariate terms in quintic form. The proof of convexity of a pair of Convex-MARS interaction terms in quintic form is identical for both univariate basis functions and interactions using the transformed variablesz+orz−. The goal is to prove that the combined pair of univariate terms:(12)Q=β1Q(x|s=+1,k−,k,k+)+β2Q(x|s=−1,k−,k,k+)is a convex function on[k−,k+], whereβ1andβ2are coefficients of basis functions. As illustrated in Fig. 1, convexity is assured for the truncated linear functions ifβ1+β2≥0. Without loss of generality, we express this case asβ2=−β1+d, wheredis a non-negative constant,d≥0, and rewrite Eq. (12) as:(13)Q=β1Q(x|s=+1,k−,k,k+)−β1Q(x|s=−1,k−,k,k+)+dQ(x|s=−1,k−,k,k+).A twice differentiable function is convex if and only if its second derivative is≥0. To prove that Eq. (13) is a convex function on[k−,k+], we take the second derivative ofQwith respect tox, and then we have the following equation (please refer to the notation in Section  2):(14)Q″=β1(6[6Δ1−4Δ2][(x−k−)]Δ3+12[−8Δ1+7Δ2][(x−k−)2]Δ4+20[3Δ1−3Δ2][(x−k−)3]Δ5)−β1(6[4Δ1−6Δ2][(x−k+)]Δ3+12[7Δ1−8Δ2][(x−k+)2]Δ4+20[3Δ1−3Δ2][(x−k+)3]Δ5)+d(6[4Δ1−6Δ2][(x−k+)]Δ3+12[7Δ1−8Δ2][(x−k+)2]Δ4+20[3Δ1−3Δ2][(x−k+)3]Δ5).Non-convexities are produced in the cubic and quintic basis functions when the center knotkis not close enough to the midpoint betweenk−andk+(Chen, 1993). Specifically, to avoid such non-convexities, we must constrain(15)Δ1Δ≥25andΔ2Δ≥25.To simplify Eq. (14), we use the fact thatΔ2=Δ−Δ1:(16)Q″=12d((5Δ1−3Δ)(x−k+)Δ3+[15Δ1−8Δ][(x−k+)2]Δ4+[10Δ1−5Δ][(x−k+)3]Δ5),and from Eq. (15) we constrain(17)25≤Δ1Δ≤35.Without loss of generality,Δ=1is specified, and Eq. (16) is reduced to:Q″=60d(1−f){f[(Δ1−25)+f2(1−2Δ1)]},wheref=(x−k−)and(1−f)=(k+−x). Sinced≥0and0≤f≤1, provingQ″≥0requires showing:(18)(Δ1−25)+f(1−2Δ1)≥0.Under the constraint in (17), the left-hand side of (18) is minimized atf=1andΔ1=35, at which it is equal to zero. Hence, Eq. (18) holds, andQis convex on[k−,k+].In Convex-MARS, the forward stepwise procedure of original MARS is modified to check the coefficients of newly added basis functions according to the criteria described in Sections  3.1 and 3.2. This modified algorithm constrains the coefficients for the basis functions throughout the search process. Whenever there are basis functions being added to the current set of basis functions, either a paired or an unpaired basis function (univariate or interaction) is possible. In the first case, the sum of the two coefficients are constrained to be non-negative. In the latter case, the coefficient is restricted to be non-negative. In the preliminary version of Convex-MARS (Shih et al., 2006), the interaction basis functions were not added in pairs, limiting the flexibility of the Convex-MARS approximation.The forward coefficient restriction algorithm (FCR) is shown in Algorithm 3. FCR incorporates the convex interaction transformation (CIT) in Eqs. (4)–(7) that is shown in Algorithm 2. FCR conducts a more flexible search for candidate pairs of basis functions by considering both pairs in Eqs. (10)–(11) into the search loop for interaction terms.Since MARS basis functions are overlapping, the coefficients may change each time new basis functions are added into the model. The backward pruning and refitting algorithm (BPR, shown in Algorithm 4) re-checks the coefficients after running FCR, searches for convexity violations and removes them. Intuitively, if the true underlying function is convex, then basis functions that introduce potential non-convexity should not be needed. For a pair of basis functions that violate convexity, the basis function with the smaller coefficient will be dropped. However, if both coefficients are negative, this pair will be dropped completely. If any basis functions are dropped, then the coefficients must be refitted with the remaining basis functions. This process repeats until no more violations are found. It is then that the approximation can be guaranteed to be convex.The use of BPR is a necessary, but not ideal means of guaranteeing convexity. One practical approach to minimizing the need for BPR is to require stricter convexity in FCR. In computational studies of Convex-MARS, we have observed that pairs whose coefficients barely satisfy convexity are more likely to turn non-convex in later iterations. Hence, FCR was modified from Algorithm 3 to Algorithm 5 to employ a stricter threshold on convexity. In FCR with a stricter threshold (FCR-T), the candidate basis functions are the same as FCR. However, instead of only requiring non-negativity, a strictly positive threshold is specified.The challenge now lies in selecting a threshold value. If the threshold is set too high, then this can reduce flexibility since fewer candidate basis functions will satisfy the stricter convexity constraint. If the threshold is too low, then there will be little difference between FCR and FCR-T. In practice, if many basis functions are removed via BPR, then the threshold is too low.Determining an appropriate threshold is application-dependent. However, we have devised a formula based on coefficients of the univariate basis functions from fitting original MARS (with standardized variables). The reason why the univariate coefficients from original MARS are used is because the univariate basis functions are constructed the same way in Convex-MARS. Hence, the threshold parameter of Convex-MARS should be appropriately chosen for the values of the coefficients. We considered four ways to define the set of coefficients:•Case I: From an original MARS function, collect the coefficients from unpaired univariate basis functions and the sums of each pair of coefficients from paired univariate basis functions.Case II: From an original MARS function, collect the absolute value of the coefficients from unpaired univariate basis functions and the absolute sums of each pair of coefficients from paired univariate basis functions.Case III: From an additive original MARS function, collect the coefficients from unpaired basis functions and the sums of each pair of coefficients from paired basis functions.Case IV: From an additive original MARS function, collect the absolute value of the coefficients from unpaired basis functions and the absolute sums of each pair of coefficients from paired basis functions.The median and the coefficient of variation (CV=standard deviationaverage) are calculated for the set of coefficients. A formula for the threshold is as follows:τˆ=fraction⋅medianCV, where a guideline on the fraction is between 0.2 and 0.3. This threshold formula has been tested in the inventory forecasting application, and in an air quality application described in Section  5.The smoothing routine in Convex-MARS uses the quintic functions presented in Section  2. For the interaction terms, CIT transforms the multiple variables in the interaction term into a one-dimensional variablez+orz−. Since the transformed center knot is always zero for the interaction terms of Convex-MARS, the corresponding side knots can be set symmetrically atκand−κ, whereκcan be considered as a smoothing factor. The larger the smoothing factor is, the smoother the quintic function will be. Assuming standardized units, one recommendation forκis 0.5.In this section Convex-MARS is tested on four-dimensional and nine-dimensional inventory forecasting SDP problems studied by Chen (1999) and on an air quality ground-level ozone SDP problem studied by Yang et al. (2007, 2009). The goal of the inventory forecasting problem is to minimize inventory holding and backorder costs. The state of the system is represented by the inventory levels for the products and their demand forecasts. The goal of the ground-level ozone problem is to minimize emission controls, targeted by time and location, and maintain ozone below the US Environmental Protection Agency standard. Because of ozone pollutions strong daily trend, the state of this system consists of the history of emissions and ozone concentrations from the beginning of the day. In the SDP formulation, the day is broken into five relevant time periods: (0) 4:00 a.m.–7:00 a.m., (1) 7:00 a.m.–10:00 a.m., (2) 10:00 a.m.–1:00 p.m., (3) 1:00 p.m.–4:00 p.m., (4) 4:00 p.m.–7:00 p.m. Time period 0 is an initialization period and is not controlled by the SDP. The optimal value function, known to be theoretically convex for our case studies, specifies the minimum expected cost to operate the system, and is a function of the system state. The different versions of MARS are fit to data from the last time period of the SDP problems, which is the third period for the inventory forecasting problems and the fourth period for the ground-level ozone problem.To extend the performance tests of Convex-MARS, results are shown for the original SDP data and with random noise added. The random noise was generated following a normal distribution considering a coefficient of variation of 0.01, 0.05, and 0.10, by adjusting the standard deviation with their corresponding mean for both training and validation data sets. In terms of CPU time, all the tested MARS runs for the inventory forecasting problems required less than 5 s on a Quad 3.00-GHz 8 GB RAM Dell Precision Workstation.In this inventory forecasting SDP problem, there are two products, each with one demand forecast. MARS was fit to a data set of 125 points from the last period, using the same orthogonal array experimental design studied in Chen (1999). Table 1summarizes the parameter settings for original MARS, the preliminary version of Convex-MARS, Convex-MARS and Convex-MARS-T (Convex version of MARS with coefficient threshold constraint) when fitting the SDP data. A set of 100 randomly generated validation data points is used to compare the different models, and boxplots of the absolute errors, computed using the formula|y−fˆ|, are shown in Figs. 4–7, whereyis the actual cost of the system, andfˆis the MARS or Convex-MARS prediction. The results of the preliminary version of Convex-MARS are shown in Fig. 4 to demonstrate the superiority of the newer version.In this inventory forecasting SDP problem, there are three products, each with two demand forecasts (for next time period and the one after). MARS was fit to a data set of 1331 points from the last period, using the same orthogonal array experimental design studied in Chen (1999). Table 2summarizes the parameter settings for original MARS, Convex-MARS and Convex-MARS-T when fitting the SDP data. A set of 1000 randomly generated validation data points is used to compare the three different models, and boxplots of the absolute errors, computed using the formula|y−fˆ|, are shown in Figs. 8–11, whereyis the actual cost of the system, andfˆis the MARS/Convex-MARS approximations for the actual cost. The preliminary version of Convex-MARS was not considered in the boxplots because it did not show satisfactory results.Figs. 12 and 13show the median absolute error for original MARS, Convex-MARS and Convex-MARS-T for the different data sets for the four- and nine-dimensional cases, respectively. Considering both these figures and the prior boxplots, the results of Convex-MARS and Convex-MARS-T are comparable to the original MARS method. However, the results are better by restricting the selection of basis functions with a threshold greater than zero (Convex-MARS-T). For reference, for the four-dimensional case, the mean true cost of the 100 validation points was 137.47. In the nine-dimensional case, the mean true cost of the 1000 validation points was 376.33.Tables 3 and 4contain the details of the main effect terms of the original MARS function for the four- and nine-dimensional inventory forecasting problems, respectively. From the tables, it can be observed that there are positive and negativeβmcoefficients for unpaired basis functions and positive and negative sums ofβmcoefficients for paired basis functions. For example in Table 3, the unpaired basis functionm=11, has a positive coefficient, while the unpaired basis functionm=18has a negative coefficient. In a similar manner, basis functionsm=1andm=2are a pair for which the sum of their coefficients is positive, but basis functionsm=27andm=28are a pair for which the sum of the coefficients is negative. In theory, for an underlying additive convex function, an approximation consisting only of convex univariate pairs should be possible using original MARS. However, although original MARS can create a convex approximation, it may use a mix of convex and non-convex univariate pairs, as it is shown in the tables. This adds unnecessary complexity to the model. By contrast, Convex-MARS guarantees convexity by selecting only the convex terms. Consequently the number of terms for original MARS will likely be higher than Convex-MARS because Convex-MARS is more efficient in selecting the final basis functions.Convex-MARS-T is used to approximate the 19-dimensional SDP optimal value function from the last time period of the ground-level ozone problem. Fig. 14shows the values of the future value function of the last stage of the SDP of the variables cyM3p3 (maximum ozone level at Conyers during period 3) and skM3p3 (maximum ozone level at South DeKalb during period 3), the rest of the variables were fixed using their median value (Ariyajunya, 2012). Similarly, Fig. 15illustrates the future value function approximation using Convex-MARS-T. The approximation plot is comparable with the future value function.The threshold approach for Convex-MARS-T described in Section  4.3 was tested on our case studies. Tables 5 and 6show the results for the four- and nine-dimensional inventory forecasting problems. Table 7shows the results for the ground-level ozone problem. The thresholds that yielded good Convex-MARS-T results (i.e. minimum absolute error) are identified with asterisks (∗).The threshold cases that showed good outcomes in most of the tests were case I (using the coefficients from unpaired univariate basis functions and the sums of each pair of coefficients from paired univariate basis functions of an original MARS function) and case II (using the absolute value of the coefficients from unpaired univariate basis functions and the absolute sums of each pair of coefficients from paired univariate basis functions of an original MARS function).

@&#CONCLUSIONS@&#
The major contribution of this research is a version of MARS that guarantees convexity without degrading the quality of fit. Given the existing success of MARS in some complex, large-scale optimization problems, the convexity guarantee provides stronger motivation to employ Convex-MARS in problems with known convexity. Testing on inventory forecasting and air quality ground-level ozone SDP problems demonstrates a comparable fit to original MARS. While a significant structural modification for interaction basis functions was required to guarantee convexity, Convex-MARS maintains most of the structure of MARS, including a forward stepwise procedure that adds basis functions in pairs, the use of truncated linear functions, and a smoothing routine to enable continuous derivatives. While the Convex-MARS-T version provides superior results, setting an appropriate threshold is not a straightforward task. A threshold study for Convex-MARS-T was included to provide some guidance. Convexity must be assured to obtain the global optimum for the SDP case studies presented in this paper, and future work will incorporate Convex-MARS within an SDP numerical solution method.