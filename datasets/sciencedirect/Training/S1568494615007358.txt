@&#MAIN-TITLE@&#
Bee algorithms for parallel two-sided assembly line balancing problem with walking times

@&#HIGHLIGHTS@&#
The parallel two-sided ALB with walking times is addressed.A mathematical programming model is presented to describe the problem formally.Bees algorithm is utilized to solve parallel two-sided ALB.Artificial bee colony algorithm is utilized to solve parallel two-sided ALB.An extensive computational study has been performed.

@&#KEYPHRASES@&#
Parallel two-sided assembly line balancing problem,Walking times,Bees algorithm,Artificial bee colony algorithm,Mathematical programming model,

@&#ABSTRACT@&#
Production lines, designed in a serial manner, have attracted the attention of researchers for many years. Line efficiency, throughput time and workload balancing are the main concerns regarding assembly lines, due to the high volume production. Recently, specific assembly line configurations, such as two-sided and parallel lines, have been addressed by researchers within the operational levels of production. Parallel two-sided assembly lines, rather a new research area, allocate more flexible workers and reduce throughput time by incorporating the advantages of two-sided and parallel assembly lines. Since parallel two-sided assembly lines are utilized to produce large-scale products, such as automobiles, trucks, and buses in industry; they also require a significant worker movement between parallel lines because of the unavoidable walking distances between lines. In this respect, different from the existing literature, walking distances have been included in parallel two-sided assembly line balancing problem. The main purpose of this paper is to introduce parallel two-sided assembly line balancing problem with walking times and to propose the implementation of Bees Algorithm and Artificial Bee Colony algorithm due to the NP-hardness of the problem. An extensive computational study is also carried out and the comparative results are presented.

@&#INTRODUCTION@&#
The assembly line balancing problem (ALB) determines the allocation of tasks to an ordered sequence of stations such that each task is assigned to exactly one station, no precedence constraint is violated, and some selected performance measure is optimized. Comprehensive literature reviews on existing techniques for solving the ALB are presented by Ghosh and Gagnon [1], Erel and Sarin [2], Becker and Scholl [3] and Scholl and Becker [4].A special configuration called two-sided assembly lines are generally utilized in the assembly of large-sized products, such as automobiles, buses and trucks. In a two-sided assembly line, different assembly tasks are carried out on the same product in parallel at both left and right sides of the line. A two-sided line offers several advantages over a one-sided line. These include shorter line length, reduced throughput time, lowered cost of tools/fixtures and reduced material handling, workers’ movement, and set-up time [5]. The main difference between a two-sided and one-sided ALB is the restriction on the operation directions. Some of the assembly operations can be performed at one of the sides, while some can be performed at either side of the line. Moreover, for two-sided ALB, it is not enough to consider only precedence and cycle time constraints as in one-sided ALB. If two tasks with a close precedence relationship in between are assigned to mated stations, there may be idle time since one of them cannot start until the other one has been completed. Consequently, sequence-dependent finish time of tasks must be considered when balancing the line. A large number of exact algorithms and heuristics have been proposed to balance the well-known classical one-sided assembly lines. However, little attention has been paid to balancing the two-sided lines. The important factor of one-sided ALB is to determine which task will be processed at which station, whereas with two-sided ALB the important factor is not only to determine which task will be processed at which station but also to determine the sequence of tasks at stations. Consider two tasks i and j such that j is an immediate predecessor of i. Suppose that i is assigned to station k and j to the mated station of k. A worker at j cannot begin to work on task i unless task j is completed. Therefore, balancing the line needs to take into account the sequence-dependent finish time of tasks, unlike a one-sided assembly line [6]. The first study on two-sided ALB was performed by Bartholdi [5], in which the details of the problem are clarified. There are also mathematical programming models [7–11] presented in the literature, and exact solution approaches based on branch and bound algorithm [12,13]. Since the problem is NP-hard, the literature mainly focused on developing heuristic approaches such as genetic algorithm [6,8,14], group assignment procedure [15], enhanced priority-based heuristic [16], ant colony optimization algorithm [11,17], station-oriented enumerative assignment procedure [18], tabu search [19], simulated annealing [10], particle swarm optimization [20,21] and bee colony intelligence [22–24].On the other hand, utilizing more than one line producing similar products or different models of the same product at the same time is a common case in manufacturing plants. A possible way of increasing the efficiency of the production on such an assembly line is to use two or more assembly lines located in parallel to each other, in terms of resource minimization. A parallel line possesses some advantages over a one sided line, such as reduced idle time and operator requirements, increased efficiency, improved visibility and communication skills between operators [25]. The concept of parallel ALB is characterized by Gökçen et al. [26] where a mathematical model and heuristic approaches are presented. Following this study, Benzer et al. [27] and Scholl and Boysen [28] developed exact solution approaches, while Scholl and Boysen [28] and Kara et al. [29] proposed various mathematical programming models for solving parallel ALB. Since the problem belongs to the NP-hard class, there are also heuristic procedures in the literature such as tabu search [30,31], simulated annealing [32,33] and multiple-colony ant algorithm [34].Since ALB fall into an NP-hard class of combinatorial optimization problems [35], two-sided ALB and parallel ALB are also NP-hard [5,25]. In addition to the complexity of ALB, due to the restriction on the operation directions, the level of complexity of two-sided ALB is further increased. Similarly, parallel ALB is also NP-hard since the parallel lines must be balanced simultaneously.Balancing simultaneously two or more two-sided assembly lines where the lines are located in parallel to each other provides the advantages of both parallel assembly lines and two-sided assembly lines, and reduces the idle time of stations while increasing the efficiency of the lines [25]. Any station of a parallel two-sided assembly line can be utilized either on only one two-sided line or on two adjacent two-sided lines. The stations which are opened for both lines are called common stations, and the other stations are referred to as separate stations. For separate stations, operators must work at either the left side or right side of any parallel two-sided line, and for common stations, operators must work on both the right side and left side, which are close to each other of the two adjacent two-sided lines. Consequently, parallel two-sided assembly lines are mainly used to produce one or more similar product models that have similar production processes in a set of two-sided assembly lines constructed in parallel to each other [36].The first study on parallel two-sided ALB belongs to Özcan et al. [25], where a detailed description of the problem is presented and a tabu search algorithm is developed to solve the problem. Kucukkoc and Zhang [37] introduce the problem of simultaneous sequencing and balancing of mixed-model parallel two-sided assembly lines and propose an agent-based ant colony optimization algorithm. Kucukkoc and Zhang [36] present a mathematical model and develop an ant colony optimization algorithm to solve type-E parallel two-sided ALB aiming to minimize cycle time and number of workstations at the same time.Additionally, parallel two-sided assembly lines require a significant worker movement between parallel lines because of the unavoidable walking distances between lines producing large scale products. With this respect, the fundamental contribution of the current study is based on the incorporation of operator walking times into the parallel two-sided ALB, since there will be transitions between common stations of different lines and the walking times directly affect the task assignments of workstations and throughput times. In the present study, a mixed-integer nonlinear programming model has been developed to formally describe the parallel two-sided ALB with walking times. Due to the high complexity level of the problem and the promising results obtained in previous assembly line balancing studies based on bee behavior [22–24], BA and ABC are utilized to solve the parallel two-sided ALB with walking times.The remainder of this paper is structured as follows: Section 2 gives details of the parallel two-sided ALB and related assumptions. Section 3 presents the mathematical programming model which has been developed for parallel two-sided ALB with walking times. Section 4 overviews BA and ABC, and clarifies the implementation of these algorithms for solving the parallel two-sided ALB with walking times. Section 5 presents the computational results and comparisons and the paper concludes with Section 6.The parallel structure of the problem requires multi-skilled operators to perform several different tasks. In a parallel two-sided assembly line, an operator can work in a separate station or a common station. The operators who work in a common station must move between two lines to complete their tasks. Therefore the walking times of these operators cannot be negligible [38]. In this study, the transitions within the same station are ignored, therefore the transition time between different lines is assumed as constant for a specific problem. Under the assumption that processing time increment affects the distance between lines, as in Sirovetnukul and Chutima [38], the percentage of average processing time is taken into consideration in this study. The configuration of a parallel two-sided ALB with walking times is illustrated in Fig. 1. The right side of line 1 and the left side of line 2 constitute a common station where the operator first completes task d at the right side station of line 1; then completes tasks e and f at the left side station of line 2; and then returns to the right side station of line 1 to complete task g. The transitions between lines cause two walking times as shown in Fig. 1. On the other hand, the left side of line 1 and the right side of line 2 constitute two separate stations (Table 1).The following statements are assumed throughout the present paper.•There are at least two parallel two-sided assembly lines.Precedence diagrams of products are known.The time required to perform a task is deterministic and known.Each two-sided assembly line may have different cycle times.Only one product is produced on a two-sided assembly line.All operators are multi-skilled.Operators working on separate stations must be worked at either left or right side of any parallel two-sided line.Operators working on common stations must be worked both left and right side of two adjacent two-sided lines.A task cannot be split among two or more stations.Parallel tasks and parallel stations are not allowed.Moreover, each two-sided assembly line may have a different cycle time and it is difficult to control the cycle time constraint for common stations. In order to overcome this difficulty, LCM approach [26] is used to obtain a common cycle time as follows:•Find LCM of the cycle times.Obtain the D1 and D2 values by dividing LCM value to both cycle times.Constitute two precedence diagrams with different task times by multiplying the task times in each diagram with D1 and D2 values, separately.Select the LCM as cycle time.The mathematical programming model presented in this section is based on the model proposed by Tapkan et al. [39]. The mathematical model proposed by Tapkan et al. [39] is developed for single-model constrained two-sided assembly line balancing problem. The mathematical model is extended to solve parallel two-sided assembly line balancing problem with walking times. The objective function is designed to minimize the total walking times travelled over the parallel lines while minimizing the number of workstations and idle times within workstations. The index sets, parameters, integer and binary decision variables, constraints and objective function of the proposed mixed integer non-linear programming model are defined as follows:Index sets:h, p=index for lines {1, …, H}ih, jh=index for tasks of line h {1, …, Nh}k=index for workstations {1, …, K}b=index for left and right sides {1, …, B}Parameters:H=number of linesNh=number of tasks at line hB=number of sidestih=timerequiredtoperformtaskihct=cycle timeM=a big numberwt=walking time between linesSLh=set of tasks of line h that must be performed on left sideSRh=set of tasks of line h that must be performed on right sideSucihjh=setoftaskpairswherejhisasuccessoroftaskihh, h−, h+=index of current, previous and subsequent line (h≤H−1)Integer variables:dih=startingtimeoftaskihskbh=total workload of side b of workstation k of line hsn=number of workstations in useBinary variables:xihkbh=1,iftakihisassignedtosidebofworkstationkoflineh0,otherwiseykbh=1,ifsidebofworkstationkoflinehisforassembly0,otherwiseuihjh=1,iftakeihisassignedaftertakejh0,otherwiserihjh+kby=1,iftakeihisassignedaftertakejh+tosidebofworkstationkofliney0,otherwisevihjh+kby=1,iftaskjh+isassignedaftertaskihtosideworkstationkofliney0,otherwisefjh+kby=1,ifthereisataskofanotherlinethatisassignedaftertaskjh+tosidebofworkstationkofliney0,otherwisegjh+kby=1,ifthereisataskofanotherlinethatisassignedaftertaskjh+tosidebofworkstationkofliney0,otherwiseConstraints:All tasks must be assigned to a single station. In addition, a task should be assigned to any side of its corresponding line h, to the right side of the previous line h− or to the left side of the subsequent line h+. These restrictions are guaranteed by the following set of constraints.(1)∑K,Bxihkbh+∑Kxihk2h−+∑Kxihk1h+=1∀ihThe assignment of tasks that have restriction on side must also be assured. The set of constraints (2) assigns left side tasks to the left side of the line, which the current task belongs to, or to the right side of the previous line, while the set of constraints (3) forces the assignment of right side tasks to the right side of the corresponding line, or to the left side of the subsequent line.(2)∑Kxihk1h+=1∀ih∈SLh(3)∑Kxihk2h+∑Kxihk1h+=1∀ih∈SRhThe total time of tasks assigned to a station must not exceed the cycle time. Namely, the sum of starting and processing times of a task cannot exceed the cycle time.(4)xihkbpdih+tih≤ct∀ih,k,bandp∈{h−,h,h+}A task can only be processed when all of its predecessors are completed. Let task jhbe a successor of task ih. In order to verify precedence constraints, the starting time of task jhmust never be earlier than the starting time of task ihadded to the processing time of task ih. Moreover, the assignment of tasks to any side of any station of the belonging line h, previous line h− and subsequent line h+ must be taken into account.(5)∑K,Bxihkbpdih+(k−1)ct+tih−∑K,Bxjhkbpdjh+(k−1)ct≤0∀{ih,jh}∈Sucihjhandp∈{h−,h,h+}When there are no precedence relationships between tasks, it is still necessary to determine the scheduling of tasks within stations in order to prevent the overlapping of tasks. Considering tasks ihand jh, one of two situations can occur: either task ihis assigned before task jhor task ihis assigned after task jh. The first situation is modeled by the set of constraints (6) while the second is modeled by the set (7). For any line, the assignment of tasks of the belonging line h, previous line h− and subsequent line h+ must also be taken into account. If there is a task of another line that is assigned before or after jh, the walking time must be taken into account while determining the starting times of tasks of adjacent lines.(6)∑K,Bxihkbpdih+(k−1)ct+wt∗gjhkbp+tih−∑K,Bxjhkbpdjh+(k−1)ct≤Muihjh∀ih,jh∉Sucihjh,ih≠jhand∀ih,jh+and∀ih,jh−andp∈{h−,h,h+}(7)∑K,Bxjhkbpdjh+(k−1)ct+wt∗fjhkbp+tjh∑K,Bxihkbpdih+(k−1)ct≤Muihjh−∀ih,jh∉Sucihjh,ih≠jhand∀ih,jh+and∀ih,jh−andp∈{h−,h,h+}The total workload of any side of a station is computed by sum of the processing times of the tasks that it performs.(8)skbh=∑Nhxihkbhtih+∑Nh−xih−kbhtih−+∑Nh+xih+kbhtih+∀k,b,hThe set of constraints (9) and (10) ensures that tasks are assigned only to the opened side of stations.(9)∑Nhxihkbh+∑Nh+xih+kbh+∑Nh−xih−kbh≥ykbh∀k,b,h(10)∑Nhxihkbh+∑Nh+xih+kbh+∑Nh−xih−kbh≤Mykbh∀k,b,hIt must also be ensured that if there is a task of line h+ assigned to the right side of station k on line h, then the left side of station k of line h+ must not be opened. Similarly, if there is a task of line h− assigned to the left side of station k on line h, then the right side of station k on line h− must not be opened. The first situation is modeled by the set of constraints (11) while the second is modeled by the set (12).(11)∑Nh+xih+k2hyk1h+=0∀k,h(12)∑Nh−xih−k1hyk2h−=0∀k,hConstraint (13) computes the number of stations in use.(13)sn=∑K,B,HykbhThe set of constraints (14)–(16) determine the values of r and v variables that represent whether there is a transition between tasks of different lines on any side of any station of any line.(14)dih−djh+xihkbpxjh+kbp≤Mrihjh+kbp∀ih,jh+,k,bandp∈{h−,h,h+}(15)djh+−dihxihkbpxjh+kbp≤Mvjh+ihkbp∀ih,jh+,k,bandp∈{h−,h,h+}(16)rihjh+kbp+vjh+ihkbp=1∀ih,jh+,k,bandp∈{h−,h,h+}Similarly, the set of constraints (17) and (18) determine the values of f and g variables that enable the specification of the number of transitions.(17)∑Nhrihjh+kbp≤Mfjh+kbp∀jh+,k,bandp∈{h−,h,h+}(18)∑Nhvjh+ihkbp≤Mgjh+kbp∀jh+,k,bandp∈{h−,h,h+}Objective function:(19)min2∑K,B,H(ykbh(ct−skbh))2sn+∑K,B,Hykbh(ct−skbh)sn+wt∑Nh+,K,B,Pfjh+kbp+∑Nh+,K,B,Pgjh+kbpThe objective function of the proposed mathematical programming model is mainly consists of three different performance measures. The first two of them are constructed on minimizing the number of stations according to a certain cycle time. However, given two different solutions with the same number of stations, one may be better balanced than the other. Hence the first objective aims to find the best balance among the solutions which have the same number of stations, while the second minimizes the number of stations in the solution. In other words, the total idle time is same for different solutions having the same number of stations, for one-sided ALB. However, for two-sided case, when two tasks having close relationship in between are assigned to a mated station, since the subsequent task cannot start before the precedent task is finished, there will occur idle time within the corresponding mated station. For this reason, sequence of tasks at stations is an important factor for two-sided ALB. The first part of the objective function is used to overcome these idle times by getting more balanced solution within the solutions having same number of stations. Since the first objective is arbitrarily assumed to be more critical than the second, it is multiplied by two [40]. The third objective minimizes the transition between lines, represented by the walking time (wt) in the objective function. Since the walking times are determined as proportional to process times, the value of wt is taken as constant for a specific problem size. The effect of this objective may become dominant to other objectives depending on the increasing number of transitions. So, the objective function tries to keep the number of transitions at a reasonable level while minimizing the number of stations. The complete form of the proposed mathematical programming model is shown in Fig. 2.The mathematical programming model for parallel two-sided ALB is constructed for two or more parallel two-sided assembly lines. In this case, by using LCM approach [26], a common cycle time should be calculated. However, the proposed mathematical programming model could not be solved, even for the smallest sized benchmark problem consisting 9 tasks in each parallel two-sided line, in a reasonable amount of time. Therefore, a smaller instance has been generated in order to demonstrate the validity of the proposed model as illustrated in Fig. 3. Fig. 3 represents a parallel two-sided assembly line consisting two two-sided lines each comprising four tasks and each with a cycle time of 4min. The numbers in the circles of the precedence diagrams represent the task numbers for the corresponding line; the numbers above the circles represent the task times and task sides, respectively.The results of the mathematical model on the new dataset indicate that there are four separate stations and one common station. At the common station, the 1st task on the 2nd line is completed preemptively, then, before starting to the 3rd task on the 1st line, the operator walked through the first line for 1min. The objective function value of the corresponding configuration is 4.83, where the walking time is computed by 10% of the average total task times at all lines as follows2(4−2)2+(4−3)2+(4−2)2+(4−4)2+(4−3)24+(4−2)+(4−3)+(4−2)+(4−4)+(4−3)4+0.1×1.75A branch of nature inspired algorithms called swarm intelligence focused on insect behavior in order to develop effective meta-heuristics which can mimic insects’ problem solution abilities. Interaction between insects contributes to the collective intelligence of the social insect colonies. These communication systems between insects have been adapted to scientific problems for optimization. One of the examples of such interactive behavior is the waggle dance of bees during the food procurement. Using the waggle dance, successful foragers share the information about the direction and distance to patches of flowers and the amount of nectar within these flowers with their hive mates. This is a successful mechanism in which foragers can recruit other bees in their colony to productive locations to collect various resources. Observations and studies on honey bees’ behaviors resulted in a new generation of optimization algorithms. Two of these algorithms, BA and ABC, are used in this paper in order to solve parallel two-sided ALB, referred to as BA_p2sALB and ABC_p2sALB, respectively. In spite of the fact that both algorithms are developed for function optimization, there are several successful studies on solving discrete and combinatorial optimization problems as well [22–24,41,42].The BA, which has been developed by Pham et al. [43], is a population based search algorithm that mimics the food foraging behavior of swarms of honey bees. In its basic version, the algorithm performs a kind of neighborhood search combined with a random search, and can be used for both combinatorial optimization and function optimization. BA has been applied to several optimization problems by its initial developers, such as: training neural networks for pattern recognition [44,45], scheduling jobs for a production machine [46], data clustering [47], and multi-objective optimization [48]. The general structure of BA is presented in Fig. 4.The algorithm starts with scout bees being placed randomly in the search space. The fitness values of the sites visited by the scout bees are evaluated in step 2. In step 3, bees with the highest fitness values are chosen as selected bees and the sites they visit are chosen for the neighborhood search. Then, in step 4, the algorithm conducts searches in the neighborhood of the selected sites. Searches in the neighborhood of the best sites representing promising solutions are made more detailed by recruiting more bees to follow these selected bees than the other selected bees. However, in step 5, for each site only the bee with the highest fitness value will be selected to form the next bee population. In step 6, the remaining bees in the population are assigned randomly around the search space scouting for new potential solutions. These steps are repeated until a stopping criterion is met. At the end of iteration, the colony will have two components to form its new population, representatives from each selected site and other scout bees assigned to conduct random searches. The algorithm requires a number of parameters to be set, namely: the number of scout bees (S), the number of sites selected out of S visited sites (P), the number of best sites of P selected sites (e), the number of bees recruited for best e sites (nep), the number of bees recruited for the other P–e selected sites (nsp), the initial size of the sites (ngh) which includes site and its neighborhood, and the stopping criterion.The detailed pseudo code of BA_p2sALB is presented in Fig. 5.BA_p2sALB starts with parameter (S, P, e, nep, nsp, MaxIter) initialization and continues by generating S number of initial scout bee solutions by employing the heuristic rules. P number of good solutions within the set of generated solutions is determined as employed bees and e number of solutions is selected from the set P as the best solutions. nep number of onlooker bees are directed to these best solutions in order to carry out a more detailed neighborhood search. Fewer onlooker bees are directed to the remaining P–e solutions. One of the neighborhood mechanisms (random or swap) is applied to each onlooker bee with 50% probability for local search. The best onlooker bee is compared with the original employed bee and, if it is better, the employed bee is updated. In addition, employed bees are compared with the best solution, if it is better than the previous best solution, the best solution is updated. For a global search, S–P number of scout bee solution is generated by using heuristic rules. These steps are repeated until the stopping criteria (MaxIter) is satisfied. The details of the important sub-steps of BA_p2sALB are explained in the following sections.For solution coding, heuristic based representation is used where the solutions are represented in an indirect manner similar to the procedure applied by Baykasoglu [49] and Özbakır and Tapkan [23]. At heuristic based representation, each value of the solution string is represented by a heuristic rule. That is to say, the ith value of the solution string represents the heuristic rule that will be used to assign the ith task. The heuristic rules which are combined into the present bee algorithms are as follows:SPT: selects the task having minimum processing timeLPT: selects the task having maximum processing timeMiTNST: selects the task having minimum total number of followersMaTNST: selects the task having maximum total number of followersMiTTST: selects the task that has minimum total processing time of successorsMaTTST: selects the task that has maximum total processing time of successorsMaRPW: selects the task having the maximum ranked positional weight, where the ranked positional weight of a task is the sum of the processing time of the task and all its follower tasksMaARPW: selects the task having the maximum average ranked positional weight, where the average ranked positional weight of a task is the average of the sum of the processing time of the task and all its follower tasks.Fig. 6corresponds to the example illustrated in Fig. 3. The first element of the solution string indicates the selection rule of the task that will be assigned first, and the second element of the solution string indicates the selection rule of the task that will be assigned second, etc. According to the solution string, the first assignment will be realized with respect to heuristic rule 2 (LPT). Task 1 of line 1 and task 1 of line 2 are the assignable tasks since they have no precedent tasks. All the tasks in the assignable task list have the same priority with respect to LPT, thus task 1 of line 1 may be selected, arbitrarily. In the next step, since the next element of the solution string is 1, the second assignment will be realized according to SPT. The assignable tasks at this stage are tasks 2 and 3 of line 1 and task 1 of line 2. According to SPT, as tasks 2 and 3 of line 1 have the same priority, then task 2 of line 1 may be selected, arbitrarily. The third element of solution string indicates that the third assignment will utilize MaTNST. The next assignable task list will include task 3 of line 1 and task 1 of line 2. Therefore, according to the heuristic rule, the selected task will be task 1 of line 2. This procedure is repeated until all the tasks are assigned.If there are more than two parallel lines, assignable task list (ATL) is constructed by taking into account all tasks belong to products produced on each parallel two-sided lines. As explained above, heuristic rules within the solution string, determine the task to be assigned next. So according to the selected task and the side of this task, appropriate parallel two-sided lines are taken into consideration.–If the side of task is left, left side of h and right side of h−,else if the side of task is right, right side of h and left side of h+,else if the side of task is either, right side of h−, left and right side of h, left side of h+are considered.At the stage of constructing the solution string for parallel two-sided ALB, the heuristic rules are arranged randomly up to the length of the solution string which is calculated by adding the number of tasks of all lines. The stage of initial solution construction is demonstrated in Fig. 7. Initially, the ATL is constructed for the corresponding stations of all lines with the tasks whose assignment to that station does not cause the exceeding of cycle time and previous tasks are already assigned. If the details of the construction of the ATL are closely examined, it must be considered that a right type task of a line can be assigned to the right side of the corresponding line or to the left side of the next line; similarly a left type task of a line can be assigned to the left side of the corresponding line or to the right side of the previous line (the same procedure is valid for either type tasks). For example, for a right side task of the first line to be inserted into the ATL, it must be checked whether this task does not exceed the cycle time of right side of the first line or left side of the second line. On the other hand, if the ATL is empty, new stations are opened for all lines; otherwise a task is selected from the list by using the next heuristic rule at the solution string, assigned to the corresponding station and removed from the ATL. These steps are repeated until all tasks are assigned to a station.The fitness function which is defined by Eq. (19) is used in BA_p2sALB. It is aimed to use simple neighborhood structures in order to evaluate the real performance of the BA correctly. For this purpose, random and swap neighborhood structures are used alternately with 50% probabilities. Furthermore, random and swap neighborhoods are applied to the 10% of the total string length.Random neighborhood: This type of neighbor is obtained from the original solution by changing one heuristic rule of an element of the solution string. In detail, a point on the original solution string is determined and the heuristic rule of this point is changed arbitrarily.Swap neighborhood: This type of neighbor is obtained by interchanging two elements of the solution string. In other words, two points on the original solution string are determined and the heuristic rules are interchanged with each other.ABC, developed by Karaboga [50], is a population based algorithm inspired from the foraging behavior of honey bees and developed for solving multi-variable and multi-modal numerical functions. The main application areas of ABC arise on training neural networks [51], leaf-constrained minimum spanning tree problem [52], and scheduling [53]. In ABC, the position of a food source represents a possible solution to the optimization problem and the nectar amount of a food source corresponds to the quality (fitness) of the corresponding solution. An artificial bee colony consists of three groups of bees: employed, onlooker and scout bees. The first half of the colony consists of employed bees and the second half constitutes the onlookers. The number of employed bees is equal to the number of food sources around the hive, namely the number of solutions in the population. The detailed steps of ABC are presented in Fig. 8.At the initialization stage, a set of food sources is randomly selected by the bees and their nectar amounts are determined. At the first step of the cycle, these bees come into the hive and share the nectar information of the sources with the bees waiting on the dance area. After sharing their information with onlookers, each employed bee goes to the food source area she has visited by herself at the previous cycle, since that food source exists in her memory and then chooses a new food source by means of visual information in the neighborhood of the one in her memory and evaluates its nectar amount. However, an onlooker prefers a food source area depending on the nectar information distributed by the employed bees on the dance area. The probability of a food source to be chosen is calculated as follows:(20)pp=fit(σp)∑Pn=1fit(σn)As the nectar amount of a food source increases, the selection probability of that food source also increases. After arriving at the selected area, she chooses a new food source in the neighborhood of the one in the memory depending on visual information as in the case of employed bees. When the nectar of a food source is abandoned by the bees, a new food source is randomly determined by a scout bee and replaced with the abandoned one. In other words, if a solution representing a food source cannot be improved further through a predetermined number of trials (limit), then that food source is assumed to be abandoned. These steps are repeated through a predetermined number of cycles (MaxIter). It is clear from the above explanation that there are three control parameters in the basic ABC: the number of food sources which is equal to the number of employed or onlooker bees (P), the value of limit and the maximum iteration number (MaxIter). The detailed pseudo code of ABC_p2sALB is presented in Fig. 9.ABC_p2sALB starts with parameter initialization and continues by generating P number of initial employed bee solutions by heuristic rules. A number of onlooker bees proportional to the quality of the solution are assigned to the employed bee solutions. One of the neighborhood mechanisms (random or swap) is applied to each onlooker bee with 50% probability for local search. If an improved solution is attained, then the employed bee solution is updated. Employed bees are compared with the best solution, if it is better than the previous best solution, the best solution is updated. If an employed bee solution cannot be improved further through a predetermined number of cycles (limit) then a new scout bee solution is constructed by heuristic rules and replaced with the employed bee solution. These steps are repeated until the stopping criteria (MaxIter) is satisfied. The construction of the bee colony, fitness function and neighborhood structures of the ABC_p2sALB are similar to the ones defined for BA_p2sALB.The BA_p2sALB and ABC_p2sALB are coded in C# programming language and tested on benchmark problems on an Intel Core 2 Duo PC with 2.2GHz CPU and 2 GB RAM. The benchmark problems include small-sized (P9, P12, P16, P24) and large sized problems (P65, P148, P205) of two-sided ALB where the numbers represent the number of tasks in the corresponding data. The test problems of P9, P12 and P24 are taken from Kim et al. [6]; P16, P65 and P205 are taken from Lee et al. [15]; P148 is taken from Bartholdi [5] where it is then modified by Lee at al. [15]. For the computational study, the combination of these benchmark problems with various cycle time combinations for the same and different cycle times are used as in Özcan et al. [25].Four different parameter combinations are constructed for BA_p2sALB as {S, P, e, nep, nsp}: {100, 40, 20, 10, 4}, {75, 30, 15, 7, 3}, {50, 20, 10, 5, 2}, and {25, 10, 5, 3, 1}. After the evaluation of these parameter combinations, the third one which has the best performance is determined for the parameter setting of the algorithm. On the other hand, while determining the parameter values of ABC_p2sALB, it is ensured to have the same number of bees for both algorithms. In this respect, three different parameter combinations are constructed for ABC_p2sALB as {P, MaxIter}: {50, 1000}, {100, 500}, {200, 250} and the best performer is selected. The parameters of the BA_p2sALB and ABC_p2sALB are defined as presented in Table 2, respectively.The proposed algorithms are executed 10 times for each cycle time combination of an individual problem size. To the best of authors’ knowledge, the only study on single-model parallel two-sided ALB with the same objective was performed by Özcan et al. [25], where the number of stations obtained from tabu search algorithm is compared with the theoretical minimum number of stations. In this research, the obtained number of stations from the proposed algorithms is compared with the results of tabu search algorithm proposed by Özcan et al. [25], and the theoretical minimum number of stations. In Table 3, the minimum, average and maximum number of workstations and standard deviations are presented with average CPU seconds obtained by minimum number of stations for BA_p2.sALB and ABC_p2sALBÖzcan et al. [25] stated that tabu search algorithm were able to obtain theoretical minimum number of stations as 9 times within 32 data sets. In the present study, theoretical minimum number of stations is achieved as 17 times for both BA_p2sALB and ABC_p2sALB. Furthermore, BA_p2sALB and ABC_p2sALB obtained smaller number of stations according to Özcan et al. [25] for 16 times as bolded in Table 3 within a reasonable amount of time. Moreover, 9 of these better performances belong to large-sized problems as 148–148, 148–205 and 205–205. Since there is no data about CPU times recorded by Özcan et al. [25], the comparison on CPU times cannot be realized.Due to the space limitations, it is not possible to present the results of 10 executions of each algorithm for all datasets. However, Kolmogorov–Smirnov normality test proved that all execution results are normally distributed and hence the performance of BA_p2sALB and ABC_p2sALB are analyzed by paired t-test. The comparison of tabu search results and proposed algorithms are also realized by 1-sample t-test, since tabu search results present only a single value. The corresponding p values are presented in Table 4, where the significance level is assumed to be 0.05. If the obtained p value is smaller than or equal to the predetermined significance level, then there is a significant difference between compared values; on the contrary, if the obtained p value is greater than the significance level, then the difference between the compared values is not proven to be significant statistically. The entries denoted by (−) represent that t-test cannot be performed since all values in the column are identical and also the bolded values represent that there is a significant difference between compared values. The comparison of ABC_p2sALB and BA_p2sALB indicate that both of the algorithms yield same results for 14 datasets and for the remaining 18 datasets there is no significant difference in between. The comparison of ABC_p2sALB and tabu search indicate that for 14 datasets both of the algorithms yield same results, for 13 datasets ABC_p2sALB performs better than tabu search, for 3 datasets tabu search performs better than ABC_p2sALB and for the remaining 2 datasets there is no significant difference in between. The comparison of BA_p2sALB and tabu search indicate that for 13 datasets both of the algorithms yield same results, for 12 datasets BA_p2sALB performs better than tabu search, for 3 datasets tabu search performs better than ABC_p2sALB and for the remaining 4 datasets there is no significant difference in between. On the other hand, for the datasets that tabu search perform better, BA_p2sALB and ABC_p2sALB yield the same number of stations with the results of tabu search within 10 executions. However, since tabu search present only a single run result, t-test concludes that tabu search perform better than BA_p2sALB and ABC_p2sALB. Moreover the datasets that BA_p2sALB and ABC_p2sALB perform better than tabu search are almost all large-sized datasets.At the second stage of the computational study, the walking times are included in parallel two-sided ALB. Since there is a transition between common stations of different lines, in order to minimize the number of these transitions total walking time is incorporated into the fitness function. Similar to Sirovetnukul and Chutima [38], the effect of different walking times is analyzed by determining the walking times as a percentage of average processing time. In this manner, the walking time from one task to another task is computed by 10% and 50% of the average total task times at all lines. These results are demonstrated in Table 5where minimum, average and maximum number of workstations and standard deviations are presented with average CPU seconds obtained by minimum number of stations for BA_p2sALB and ABC_p2sALB.In Table 5, BA_p2sALB and ABC_p2sALB are compared by the inclusion of walking times. According to the number of stations, BA_p2sALB attained four times and ABC_p2sALB attained two times lower number of stations with respect to the other algorithm for 10% walking time. BA_p2sALB obtained one time and ABC_p2sALB attained four times lower number of stations with respect to the other algorithm for 50% walking time. The minimum number of stations obtained by each algorithm are also bolded at Table 5. Additionally, the CPU time requirement of ABC_p2sALB is lower than BA_p2sALB for 10% walking time, whereas it is higher than BA_2sALB for 50% walking time. Consequently, it cannot be concluded that any of the algorithm performs better than the other one. On the other hand, according to the p values presented in Table 4, for 16 datasets there is no difference between BA_p2sALB and ABC_p2sALB for both 10% and 50% walking times and for 16 datasets the proposed algorithms yield the same number of stations. The attained number of stations from the algorithms for with and without walking time is also presented in Table 6.Table 6 demonstrates that adding walking time increases the number of stations. The results also show that the greater the walking time, the larger the number of stations. According to the p values presented in Table 4, the comparison of without inclusion of walking time and with 10% walking time for BA_2sALB yield that for 15 datasets two versions attain the same number of stations, for 15 datasets there is no significant difference in between and for 2 datasets BA_2sALB without inclusion of walking time performs better than the inclusion of 10% walking time. The comparison of BA_2sALB with 10% and 50% walking time yield that for 13 datasets two versions of the algorithm attain the same number of stations, for 12 dataset there is no significant difference in between and for 7 datasets the inclusion of 10% walking time version of BA_2sALB perform better than the inclusion of 50% walking time. The comparison of without inclusion of walking time and with 10% walking time for ABC_2sALB yield that for 16 datasets two versions attain the same number of stations, for 14 datasets there is no significant difference in between and for 2 datasets ABC_2sALB without inclusion of walking time performs better than the inclusion of 10% walking time. The comparison of ABC_2sALB with 10% and 50% walking time yield that for 14 datasets two versions of the algorithm attain the same number of stations, for 12 dataset there is no significant difference in between and for 6 datasets the inclusion of 10% walking time version of ABC_2sALB perform better than the inclusion of 50% walking time. These results show that, considering walking times while assigning the tasks to common stations causes to generate more realistic and applicable solutions. Moreover, having included walking time in parallel two-sided ALB provides an advantage of decreasing the transition time between two lines as desired in real life situations. The detailed description of this advantage is illustrated in Fig. 10.For the case without walking time, the common station may require a number of transitions where with walking time case, the number of transitions decreases and therefore the effect of walking time on the processing throughput time of the product will also decrease.

@&#CONCLUSIONS@&#
Parallel two-sided assembly line balancing problem which combines the advantages of using parallel and two-sided lines is one of the hard problems in the assembly line balancing literature. Due to the NP-hardness of the problem, a mathematical programming model is proposed in order to formally describe the problem. Bee swarm based meta-heuristics namely Bees Algorithm and Artificial Bee Colony algorithm are proposed for solving the problem with aiming to present and analyze the performances of these recently developed swarm based algorithms to the literature. Definitely, a different heuristic algorithm can also be utilized for solving these types of problems. The results obtained from the computational study demonstrate that the proposed algorithms perform very well, since they are able to obtain better solutions than the best known solutions in the literature. The paper has also a main contribution to parallel two-sided assembly line balancing problem by explicitly taking into account walking times. Walking time cannot be ignored for larger sized assembly systems due to the long walking distances between production lines. Increasing walking times between common workstations of parallel assembly lines directly effects the task assignments of workstations and throughput times. Without taking walking times into consideration, an impractical balance of the assembly line can be generated. In this study, the effects of different rates of walking times on the number of workstations are also analyzed.After proving the strength of the proposed algorithms, it is planned to analyze the effects of different and more complex neighborhood structures on the quality of the solution. Besides, it is aimed to seek more effective meta-heuristic algorithms on parallel two-sided assembly line balancing problem. Furthermore, as in two-sided assembly line balancing problem, there are some constraints specific to parallel two-sided assembly line balancing problem such as zoning, positional and synchronous task constraints. These constraints are planned to be included in parallel two-sided assembly line balancing problem and to the solution procedure. Eventually, parallel two-sided assembly line balancing problem may also be extended by dealing with the worker assignment process.