@&#MAIN-TITLE@&#
Hypoglycaemia detection using fuzzy inference system with intelligent optimiser

@&#HIGHLIGHTS@&#
Hypoglycaemia (low blood glucose level) is a common and serious side effect of insulin therapy for patients with diabetes.In this paper, a fuzzy inference system (FIS) is developed to recognise hypoglycaemic episodes.The FIS captures the relationship between heart rate, electrocardiogram and hypoglycaemic episodes to perform classification.An intelligent optimiser is introduced to perform turning of the FIS.

@&#KEYPHRASES@&#
Differential evolution,Fuzzy inference system,Hypoglycaemia,Multi-objective optimisation,

@&#ABSTRACT@&#
Hypoglycaemia is a medical term for a body state with a low level of blood glucose. It is a common and serious side effect of insulin therapy in patients with diabetes. In this paper, we propose a system model to measure physiological parameters continuously to provide hypoglycaemia detection for Type 1 diabetes mellitus (TIDM) patients. The resulting model is a fuzzy inference system (FIS). The heart rate (HR), corrected QT interval of the electrocardiogram (ECG) signal (QTc), change of HR, and change of QTcare used as the input of the FIS to detect the hypoglycaemic episodes. An intelligent optimiser is designed to optimise the FIS parameters that govern the membership functions and the fuzzy rules. The intelligent optimiser has an implementation framework that incorporates two wavelet mutated differential evolution optimisers to enhance the training performance. A multi-objective optimisation approach is used to perform the training of the FIS in order to meet the medical standards on sensitivity and specificity. Experiments with real data of 16 children (569 data points) with TIDM are studied in this paper. The data are randomly separated into a training set with 5 patients (l99 data points), a validation set with 5 patients (177 data points) and a testing set with 5 patients (193 data points). Experiment results show that the proposed FIS tuned by the proposed intelligent optimiser can offer good performance of classification.

@&#INTRODUCTION@&#
In this paper, a fuzzy inference system (FIS) is developed to model the relationship between four physiological parameters and the episodes of hypoglycaemia. Hypoglycaemia is a medical term for a body state with a low level of blood glucose. It is a result of mismatch between the action of insulin, the ingestion of food and the energy expenditure. Hypoglycaemia is not common in non-diabetic persons, but can occur at any age [1]. It can be caused by excessive insulin produced in the body, inborn errors, medications and poisons, alcohol, hormone deficiencies, prolonged starvation, alterations of metabolism associated with infection, and organ failure [2]. Some study reported that diabetic patients, who have been treated with insulin, have high risk of developing hypoglycaemia. Most surveys reported that the tighter the glycaemia control, and the younger the patient, the greater frequency of both mild and severe hypoglycaemia would occur [3,4].Hypoglycaemia may be defined differently for different people in terms of blood glucose in different circumstances and for different purposes. Most of the healthy adults maintain a fasting glucose level at above 70mg/dL (3.9mmol/L), and develop symptoms of hypoglycaemia when the glucose level falls below 55mg/dL (3.3mmol/L) [2,5]. Several studies reported that hypoglycaemic episodes are defined as blood glucose levels being below 50mg/dL (2.8mmol/L), and the patients are advised to take necessary medical treatment immediately.The symptoms of hypoglycaemia are often unaware by the patients. Nocturnal hypoglycaemia is particularly dangerous because it may obscure autonomic counter-regulatory responses, so that any initially mild episodes may become severe. 50% of all severe episodes occur at night time. Deficient glucose counter-regulation can lead to severe hypoglycaemia even with the modest insulin elevations. Regulation of nocturnal hypoglycaemia is further complicated by the dawn phenomenon [7]. This is a consequence of nocturnal changes in insulin sensitivity secondary to growth hormone secretion: a decrease in insulin requirement approximately between midnight and 5am followed by an increase in requirement between 5am and 8am. Thus, hypoglycaemia is one of the complications of diabetes most feared by patients. As a result, constructing a model for the detection of hypoglycaemia with respect to some physiological parameters are very important for patients to perform real-time monitoring of their blood glucose level especially at night time [6,8,11,12]. In this paper, a fuzzy inference system is developed to model the relationship between four physiological signals and the episodes of hypoglycaemia. The physiological signals are the heart rate (HR), the change of HR with time (ΔHR), the corrected QT interval (QTc) of the electrocardiogram (ECG) signal, and the change of QTcwith time (ΔQTc). These four signals are used as the inputs for the classification.In this paper, a fuzzy inference system (FIS) is employed to perform the modelling of the hypoglycaemic episodes. Fuzzy inference is a process of making decisions by using fuzzy logic and fuzzy rules. The data for the hypoglycaemic detection are real-time body signals from patients. A lot of noise and error can be present during the measurement process. Fuzzy logic (FL) can be applied to obtain a good model for processing those body signals. Thanks to the linguistic rule base, any human knowledge can readily be absorbed into the FIS.Before the FIS works as a classifier for hypoglycaemia episodes for Type 1 diabetes mellitus patients, it has to be trained by some data set with known class labels. The training is a kind of supervised learning. The major objective is to determine the best parameter values for the FIS's rules and membership functions. The training can be realised as an optimisation process. Traditional optimisation methods like the least square algorithm and gradient descent methods have the potential problem of trapping in some local optima of the solution space. Hence, evolutionary optimisation algorithms are considered in this paper.Differential evolution (DE) has been well accepted as a powerful evolutionary computation algorithm for handling optimisation problems during the last decade. It is a population based stochastic optimisation algorithm that searches the solution space by using the weighted difference between two population vectors to determine a third vector [9,17,18]. Owing to the population-based strategy, DE is less possibly getting trapped in some locally optimal solution. In [22], an improved version of DE with double wavelet mutations (DWM-DE) is employed to the training process of the hypoglycaemia problem. The result shows that DWM-DE performs well in the training process. The details of the performance and comparison after using the wavelet mutation in DE were reported in [25]. However, the performance of DWM-DE still depends quite much on some control parameters’ values and the setting of the initial conditions. To reduce these limitations, a further improved intelligent optimiser is introduced, which is designed based on DWM-DE. In the intelligent optimiser, a fuzzy controller is employed to adjust the parameter values adaptively during the progress of searching. To reduce the dependence on the initial conditions of the optimisation algorithm, a parallel implementation framework involving two wavelet-mutated differential evolution (WM-DE) engines is proposed. Moreover, to reduce the number of control parameters as a compensation for the increase of complexity brought by the fuzzy controller, we use a single wavelet operation instead of two. The resulting system consists of two WM-DE engines running in parallel with different initial conditions to tackle the same optimisation problem. The fuzzy controller in the proposed intelligent optimiser captures the on-line population information from the two WM-DE engines. The information is analysed and compared by the Student T-test, which is a method to assess whether two groups of data are statistically different from each other in terms of the mean fitness values. The individual populations’ information and the result of the Student T-test act as the inputs of a fuzzy controller to determinate the next iteration (generation) values of the control parameters of the DE engines. The two DE engines in the intelligent optimiser act as a pairing system with additional searching information shared between them. The result is a closed-loop adaptive control system that supports the intelligent optimiser for better performance. Thanks to the changes brought by the intelligent optimiser, the solution reliability can be enhanced when the fuzzy controller tries to minimise the t-value. By applying the wavelet function in the DE's crossover, we can have the solution space to be more widely explored in the early stage of the search; and are more likely to obtain a fine-tuned global solution in the later stage of the search by setting a smaller searching space. The wavelet function's properties enable us to improve the performance of DE in terms of convergence speed, solution quality and solution reliability statistically [22].In this paper, sensitivity and specificity are used to measure the performance of the classification. The sensitivity measures the proportion of actual positives that are correctly identified; and the specificity measures the proportion of actual negatives that are correctly identified. As common clinical classification requirements, the sensitivity should be higher than 70% and the specificity should be higher than 50% in order to obtain a reliable classification. Based on these clinical requirements, we have two objectives to achieve in the training process. As a result, a multi-objective optimisation approach using the proposed intelligent optimiser should be employed to realise the training process. Besides, overtraining is another key problem that affects the classification performance when constructing the FIS model. Overtraining refers to the reduction of the generalisation ability that can occur as a system is trained. In this paper, a validation strategy is employed to reduce the risk of overtraining [20,21,23]. This strategy is embedded in the training operation and the formulation of the fitness functions in the proposed intelligent optimiser. The details will be given in Section 2.The organisation of this paper is as follows: in Section 2, the details of the development of the FIS and the proposed intelligent optimiser are presented. The experiment results of detecting nocturnal hypoglycaemic episodes in TIDM patients are discussed in Section 3. A conclusion is drawn in Section 4.To realise the detection of hypoglycaemic episodes for the type-1 diabetes mellitus (T1DM) cases, an FIS tuned by the proposed intelligent optimiser with two wavelet-mutated differential evolution (WM-DE) engines is employed. A block diagram of the FIS is shown in Fig. 1. It is a 4-input and 1-output learning and modelling system. The physiological inputs are the heart rate (HR), the corrected QT interval of the electrocardiogram signal (QTc), the change of heart rate (ΔHR), and the change of QTc(ΔQTc). The output is the binary state of hypoglycaemia (h), which takes the value of true (+1) or false (−1). The major role of the FIS is to model the relationship of HR, QTc, ΔHR and ΔQTcto h so as to perform classification.Two of the inputs of the FIS are obtained from the ECG signal. The ECG signal being investigated involves the parameters in the depolarisation and repolarisation stages of electrocardiography. An example ECG signal (with two cycles) is shown in Fig. 2. In this study, the concerned points are the Q points, R peak, T wave peak (Tp), and the T wave end (Te). The QT interval is between the Q point and the T wave peak. The QTcsignal is obtained by QT/RR, where RR is the interval between two consecutive R peaks. The heart rate is given by 60/RR.In the classifier, the physiological data (HR, QTc, ΔHR and ΔQTc) are represented as linguistic variables governed by membership functions that support fuzzy descriptions. The FIS contains four major parts: fuzzification, inference engine, fuzzy-rule base, and defuzzification.On doing fuzzification, the inputs are mapped to different membership functions by using fuzzy sets. Bell-shaped fuzzy membership functions are used and defined as follows:(1)fm(x(t),σm,cm)e(xcm)2/(2m2)where x(t) is the non-fuzzy input, m=1, 2,…,mf; mfdenotes the number of membership functions; σmand cmare the standard deviation and the mean value of the membership function respectively. Fig. 14 shows a set of bell-shaped fuzzy membership functions for an input variable. It contains three linguistic terms (M1, M2, and M3). The input range is between 0 and 1. In the FIS, all the inputs are mapped to the corresponding fuzzy membership functions. The membership functions for the four inputs are given by:(2)fHR,m(HR(t),σHR,m,cHR,m)=e−(HR(t)−cHR,m)2/(2(σHR,m)2)(3)fQTc,m(QTc(t),σQTc,m,cQTc,m)=e−(QTc(t)−cQTc,m)2/(2(σQTc,m)2)(4)fΔHR,m(ΔHR(t),σΔHR,m,cΔHR,m)=e−(ΔHR(t)−cΔHR,m)2/(2(σΔHR,m)2)(5)fΔQTc,m(ΔQTc(t),σΔQTc,m,cΔQTc,m)=e−(ΔQTc(t)−cΔQTc,m)2/(2(σΔQTc,m)2)In the inference engine of the FIS, the fuzzified inputs are processed with respect to a rule base, which generates the fuzzified output. The rule base contains a set of fuzzy if–then rules of the following format:Rule τ.IFHR(t)isfHR,m(HR(t), σHR,m, cHR,m)ANDQTc(t)isfQTc,m(QTc(t), σQTc,m, cQTc,m)ANDΔHR(t)isfΔHR,m(ΔHR(t), σΔHR,m, cΔHR,m)ANDΔQTc(t)isfΔQTc,m(ΔQTc(t), σΔQTc,m, cΔQTc,m),THENy(t)iswτDuring the inference process, we map the fuzzy set outputs of the rules to a crisp output by performing a process called defuzzification. In this thesis, the defuzzification is realised as:(8)y(t)∑τ=1nrOτwτ∑τ=1nrOτwherewτ∈[−1,1], τ=1, 2,…,nrare fuzzy singletons to be determined in the training process. If the output y(t) is positive, it means that hypoglycaemia is present. The actual output of the FIS is realised as:(9)h(t)=+1ify(t)≥0.−1otherwiseAs a result, the output value of the classifier is binary.To implement the optimisation process using differential evolution, a population in the solution space should be randomly generated. The population of solution vectors are then successively updated and swapped until the population converges to the optimum within the solution space. The pseudo code for the standard DE (SDE) process is shown in Fig. 3. In this paper, a wavelet-mutated DE (WM-DE) algorithm is employed in the intelligent optimiser. The pseudo code of WM-DE is shown in Fig. 4. The details of both SDE and WM-DE are given as follows.DE attempts to maintain a population of Npvectors for each generation of evolution, with each vector contains D elements. Let Px,gbe the population of the current generation g, and xi,gbe the ith vector in this population:(10)Px,g=(xi,g),i=0,1,…,Np−1;g=0,1,…,gmaxPi,g=(xj,i,g),j=0,1,…,D−1.where gmax is the maximum generation number. On doing optimisation, DE creates a mutated vector vi,gfor each target vector xi,gby using the mutation operation. The mutated vector is therefore realised by the following equation:(11)vi,g=xi,g+F⋅(xr1,g−xr2,g)where F is the scaling factor; r1 and r2 are two different integers, which are randomly generated from {0, 1,…,Np−1}. To complement the mutation search strategy and increase the diversity of the perturbed vectors, DE employs a method called uniform crossover for all the mutated vectors. The crossover operation is realised by the following equation:(12)ui,g=(uj,i,g)=(vj,i,g)if(randj(0,1))≤Crxj,i,gotherwisewhereCr∈[0,1]is called the crossover rate, which is a user-defined value that controls the fraction of parameters copied from the mutant. randj(0,1) generates a random value between 0 and 1 for the jth parameter. The algorithm also ensures uj,i,ggets at least one value as xj,i,g. Then the population is updated by comparing each trial vectorui,gto the corresponding target vector xi,g. If the fitness function value of the trial vector is smaller than that of the target vector, replace the target vector in the next generation; otherwise the target vector retains its place in the population for another generation. The selection operation is therefore realised by the following equation:(13)xi,g+1=ui,giff(ui,g)≤f(xi,g)xi,gotherwisewhere f(·) is the fitness function. Because of this selection operation, DE is expected to have high optimisation ability. When the condition to stop further evolution is satisfied; for example, a preset maximum number of iteration has been reached, the algorithm ends with the best solution as the final solution.In the DE crossover operation, we proposed a wavelet operation that varies the searching based on the wavelet function. As the wavelet function output is set to be inversely proportional to the number of iteration; when the searching population is approaching the optimal solution, the effect of the wavelet mutation decreases until the DE ends eventually. By adopting this method, the effort on searching and evaluating those local optima, which could be far away from the global optimum, in the later iteration is reduced. The total number of iteration to obtain the best solution should also decrease. Thanks to the property of the wavelet function, the solution reliability is enhanced in a statistical sense, i.e. the performance of this hybrid DE on converging to the optimal point is relatively stable despite the presence of many random factors during the evolution in DE.The proposed wavelet operation is based on the wavelet function. In Mathematics, certain seismic signals can be modelled by combining translations and dilations of an oscillatory function called a “wavelet”. A continuous-time function ψ(x) is called a “mother wavelet” or “wavelet” if it satisfies the following properties:Property 1(14)∫−∞+∞ψ(x)dx=0In other words, the total positive momentum of ψ(x) is equal to the total negative momentum of ψ(x).(15)∫−∞+∞|ψ(x)|2dx<∞which means most of the energy in ψ(x) is confined to a finite duration and bounded. The Morlet wavelet [16] is an example mother wavelet:(16)ψ(x)=e−x2/2cos(5x)The Morlet wavelet integrates to zero (Property 1). Over 99% of the total energy of the function is contained in the interval of −2.5<x<2.5 (Property 2). In order to control the magnitude of ψ(x), a function ψa(x) is defined as follows.(17)ψa(x)=1aψxawhere a is the dilation parameter. It follows that ψa(x) is an amplitude-scaled version of ψ(x). The amplitude of ψa(x) will be scaled down as the dilation parameter a increases. This property is used to do the mutation operation in order to enhance the searching performance.The crossover operation of (12) is done with respect to the elements of the trial vector in DE. In WM-DE, a wavelet mutation is embedded in the crossover operation. It is realised by adding a wavelet mutation following the original crossover operation. The crossover after the first mutation takes place according to (12). Letui,g=(u0,i,g,u1,i,g,…,uD−1,i,g)(where g is the current generation number and D is the number of elements in the vector) be the ith vector after crossover for the wavelet mutation. The value of the elementuj,i,gis inside the vector element's boundary[paraminj,paramaxj]. The mutated crossover vector is given byu¯i,g=(u¯0,i,g,u¯1,i,g,…,u¯D−1,i,g), and(18)u¯j,i,g=uj,i,g+σ×(paramaxj−uj,i,g)ifσ>0uj,i,g+σ×(uj,i,g−paraminj)ifσ≤0,σ=1ae−(φ/a)2/2cos5φa(19)a=e−ln(λ)×1−(t/T)ζwm+ln(λ)whereζwmis the shape parameter of the monotonic increasing function, λ is the upper limit of the value of parameter a. The Morlet wavelet in (16) is used as the mother wavelet. As a result, a larger value of|σ|at the early stage of evolution gives a larger searching space for the solution; when|σ|is small at the later stage of evolution, the algorithm gives a smaller searching space for fine-tuning. The details on determining the value of a are discussed in [25]. After the operations of the wavelet mutation, the population is updated by comparing each trial vectoru¯i,gto the corresponding target vector xi,gusing the method of standard DE as given by (13). A new population is generated and the same evolution process is repeated. Such an iterative process will be terminated when a defined number of iteration has been reached. Fig. 4 shows the pseudo code of WM-DE. The details of the performance and comparison after using wavelet mutation in DE were reported in [25].The proposed intelligent optimiser has an implementation framework that contains several elements. A block diagram of it is shown in Fig. 7. In addition, the pseudo code for its implementation is given in Fig. 9. The major elements in the intelligent optimiser are two WM-DE engines. On doing the optimisation, the two WM-DE engines run in parallel to tackle the same optimisation problem with two different initial populations. The initial populations are generated randomly at the beginning of the searching process. When the two WM-DE engines are operating, their individual populations at each generation (iteration) will be analysed by the population analyzers as shown in Fig. 7.In the population analyzer, the fitness value of each vector is calculated. Then, the mean and standard deviation of fitness values within the population of each WM-DE engine are found. The Student T-test algorithm analyses the difference between the two populations and generates a t-value. The t-value and the standard deviations obtained from the two populations are input to the internal fuzzy controller, which determines the F and Crvalues for the WM-DE engines for the next iteration (generation). As a result, a closed-loop adaptive intelligent optimiser is realised. At the end of the evolution, a comparator is employed to compare the results from the two WM-DE engines and adopt the best solution as the finally result of the intelligent optimiser. The detailed implementation of the intelligent optimiser is given as follows.The major objective of the population analyser is to capture the movement of the population. In each iteration, the populations of the two WM-DE engines update themselves within their individual searching domains. In principle, after a number of iteration, all the population within the same WM-DE engine should move to the same region where the global optimal point is located. As a result, by monitoring the mean and standard deviation of the fitness values of the vectors in the population, we could acquire information about the progress of searching of the WM-DE engine. Along the searching process, the standard deviation should be gradually decreasing until it reaches a very small value. In the proposed system, two WM-DE engines are employed to tackle the same objective function. We could assume that the means of the two WM-DE engines have similar values in the later stage. Both the mean and the standard deviation are thus used to analyse the progress of searching.The normalised mean fitness value of the current generation within a WM-DE engine is given by:(20)α=1Np∑iNpf(xi,g)where Npis the number of vectors in the current generation,⋅denotes the l2 norm, and xi,gis one of the vectors in the current generation. The normalised standard deviation of the fitness value of the current generation within a WM-DE engine is given by:(21)σg=1Np∑iNp(||f(xi,g)||−αg)2In the proposed intelligent optimiser, the Student T-test is employed to identify the population difference between the two WM-DE engines. The Student T-test is a useful method to perform Hypothesis Test (HT) in the field of statistical research. HT works by collecting data and measuring the difference between the particular sets of data to prove the null hypothesis, which determines an initial guess of some experimental result. If the initial guess of the result is correct, we label the null hypothesis as TRUE, otherwise as FALSE. The t-value generated by the Student T-test is a ratio between the means difference and standard deviations difference of the two sample groups:(22)tg=αg2¯−αg1(σg22/ξdegree)+(σg12/ξdegree)where tgis the t-value of the gth generation;αg1¯andαg2¯are the mean values from the first and second engines respectively;σg1andσg2are the standard deviations from the first and second engines respectively; and ξdegreeis the number of samples in the groups minus 2.The t-value can be zero, positive and negative. If the t-value is zero, it means that there is no difference between the two groups. To make the t-value meaningful, we need to consider the significance of the HT to assure the result is statistically meaningful. To understand the significance, we need to set an alpha level, which is generally considered as a risk level. In most of the scientific research, we set the alpha level at 0.05. The alpha level governs the probability that the means of the two tested groups have a statistically significant difference. The significance of t-value changes with the degree of freedom ξdegree. Given the alpha level, the degree of freedom ξdegree, and the t-value, we can determine whether the t-value is significant enough to prove the null hypothesis.In the proposed optimiser, the value of ξdegreeis determined by the following equation:(23)ξdegree=Np1+Np2−2where Np1 is the number of vectors in the population of the WM-DE engine 1 and Np2 is the number of vectors in the population of the WM-DE engine 2. When we are using the intelligent optimiser, we have a null hypothesis that there should not have any significant difference between the two WM-DE engines as they are solving the same problem. Along the searching operation, the t-value should be kept small and less than the significant level. However, in most of the cases during the evolution, the t-value could not be kept small because of the randomness in the searching process of WM-DE. Therefore, an internal fuzzy controller is employed in the proposed optimiser to control the searching process of WM-DE in order to reduce the chance that the two populations have significant differences.The fuzzy controller performs fuzzy inference, which is a process of making decisions by using fuzzy logic and fuzzy rules that involves membership functions and logical operations. The membership functions enable the description of the inputs and outputs in linguistic terms. The logical operations and fuzzy rules can be derived based on human knowledge.The Mamdani method is used to implement the fuzzy inference system to determine the WM-DE parameters. It uses linguistic control rules obtained from experienced human experts to realise making decision. The output variables are fuzzy sets. To map a fuzzy set to some crisp output value, defuzzification is performed, which is a process of generating quantifiable results from fuzzy sets and the corresponding membership functions. In the proposed intelligent optimiser, the method of centre of gravity (COG) is used to perform defuzzification.WM-DE is a population-based searching algorithm. The population along the generations will not be the same for different experiments of a given problem because the algorithm itself is stochastic. On analysing the population distribution in the searching process, the way of choosing the parameter values of the WM-DE engine is described as some heuristic rules. The fuzzy controller then determines the F and Crvalues for the next iteration. The fuzzy controller takes the t-value of the current generation and the standard deviations of the population fitness from the two WM-DE engines as inputs, and maps the information into the fuzzy membership functions. A closed-loop control system is formed in the proposed intelligent optimiser such that the parameter values of the two WM-DE engines can vary with the searching states.A fuzzy controller processes linguistic variables, and each variable normally consists of a set of linguistic terms. In the proposed intelligent optimiser, the linguistic terms are modelled by triangular-shaped membership functions, which can be written as:(24)fm(xm(t),am,bm,cm)=0,xm(t)≤amxm(t)−abm−amam≤xm(t)≤bmcm−xm(t)cm−bmbm≤xm(t)≤cm0,cm≤xm(t)where xm(t) is the input, m=1, 2,…,mf; mfdenotes the number of membership functions. Fig. 13 represents three triangular-shaped membership functions (of 3 fuzzy terms M1, M2 and M3) for an input variable. The input range is between zero and one. Every input and output of the fuzzy controller in the proposed intelligent optimiser has three linguistic terms that cover different values of input and output. The reason for choosing the triangular-shaped membership functions is that it is less computational demanding than many other types of membership functions. Only simple arithmetic operations are involved.In the proposed system, the membership functions for the three inputs are ftg,m(tg, atg,m, btg,m, ctg,m), fσg1,m(σg1, aσg1,m, bσg1,m, cσg1,m) and fσg2,m(σg2, aσg2,m, bσg2,m, cσg2,m). And the four outputs are fFg1,m(Fg1, aFg1,m, bFg1,m, cFg1,m), fFg2,m(Fg2, aFg2,m, bFg2,m, cFg2,m), fCrg1,m(Crg1, aCrg1,m, bCrg1,m, cCrg1,m) and fCrg2,m(Crg2, aCrg2,m, bCrg2,m, cCrg2,m). In the inference process, the fuzzified inputs are processed with respect to a rule base, which generates the fuzzified output. The rule base contains a set of fuzzy if-then rules of the following four formats, one for each output:Rule τ:IFtgisftg,m(tg, atg,m, btg,m, ctg,m)ANDσg1isfσg1,m(σg1, aσg1,m, bσg1,m, cσg1,m)THENFg1isfFg1,m(Fg1, aFg1,m, bFg1,m, cFg1,m)Rule τ:IFtgisftg,m(tg, atg,m, btg,m, ctg,m)ANDσg2isfσg2,m(σg2, aσg2,m, bσg2,m, cσg2,m)THENFg2isfFg2,m(Fg2, aFg2,m, bFg2,m, cFg2,m)Rule τ:IFtgisftg,m(tg, atg,m, btg,m, ctg,m)ANDσg1isfσg1,m(σg1, aσg1,m, bσg1,m, cσg1,m)THENCrg1isfCrg1,m(Crg1, aCrg1,m, bCrg1,m, cCrg1,m)Rule τ:IFtgisftg,m(tg, atg,m, btg,m, ctg,m)ANDσg2isfσg2,m(σg2, aσg2,m, bσg2,m, cσg2,m)THENCrg2isfCrg2,m(Crg2, aCrg2,m, bCrg2,m, cCrg2,m)After fuzzifying the input signals, aggregation is then realised to each rule to represent the output as a single fuzzy set. The aggregation output for each rule is defined as follows:(25)Oτ=min(IN1,τ,IN2,τ)where IN1,τand IN2,τare the two input membership function value of the fuzzy rule τ. The fuzzy output of each rule is realised as follows.(26)OUTτ=Oτ⋅OUTPUTτwhere OUTτis the output membership function of the corresponding rule and OUTPUTτis the defined output membership function.During the inference process, we map all the output membership functions from all rules to form the aggregated result for performing defuzzification. The process of defuzzification is used to determinate the numerical output of the fuzzy system. In the intelligent optimiser, the defuzzification is implemented by using the Centroid method, which uses the centroid point of the aggregated result as the numerical result. The Centroid defuzzification is given by,(27)y(t)=∫OUTall⋅ydy∫OUTalldywhere OUTallis the aggregated result of all the corresponding rules, and y(t) is the corresponding numerical output of the fuzzy system.In the proposed intelligent optimiser, the membership functions for the inputs and outputs of the internal fuzzy controller are shown in Figs. 10 and 11. The design of the membership functions is based on many experiments with the knowledge of the characteristics of DE. For the input of normalised standard deviation, the range is between 0 and 0.2. We consider the value smaller than 0.05 as LOW and the value larger than 0.15 as HIGH. For the input of t-value, the range is between 0 and 10. When the t-value is higher than 1.645 (with ξ=50), there is a significant difference between the two engines’ populations with a 95% confidence level. As a result, we consider the t-value smaller than 1.645 as LOW.For the outputs of F and Cr, they range between 0 and 0.9. In most of the application, DE works well with the values of F and Crbetween 0.3 and 0.5. We consider the value of F and Cras LOW if they are smaller than 0.1, and we consider the value of F and Cras HIGH if they are larger than 0.7.In the proposed intelligent optimiser, it consists of 36 rules. They areFor theFparameter:1.IF (σg1 is low)AND (tgis low)THEN (Fg1 is low)2.IF (σg1is medium)AND (tgis low)THEN (Fg1 is low)3.IF (σg1 is high)AND (tgis low)THEN (Fg1 is medium)4.IF (σg1 is low)AND (tgis medium)THEN (Fg1 is medium)5.IF (σg1 is medium)AND (tgis medium)THEN (Fg1 is medium)6.IF (σg1 is high)AND (tgis medium)THEN (Fg1 is high)7.IF (σg1 is low)AND (tgis high)THEN (Fg1 is medium)8.IF (σg1 is medium)AND (tgis high)THEN (Fg1 is medium)9.IF (σg1 is high)AND (tgis high)THEN (Fg1 is high)10.IF (σg2 is low)AND (tgis low)THEN (Fg2 is low)11.IF (σg2 is medium)AND (tgis low)THEN (Fg2 is low)12.IF (σg2 is high)AND (tgis low)THEN (Fg2 is medium)13.IF (σg2 is low)AND (tgis medium)THEN (Fg2 is medium)14.IF (σg2 is medium)AND (tgis medium)THEN (Fg2 is medium)15.IF (σg2 is high)AND (tgis medium)THEN (Fg2 is high)16.IF (σg2 is low)AND (tgis high)THEN (Fg2 is medium)17.IF (σg2 is medium)AND (tgis high)THEN (Fg2 is medium)18IF (σg2 is high)AND (tgis high)THEN (Fg2 is high)For theCrparameter:1.IF (σg1 is low)AND (tgis low)THEN (Crg1 is low)2.IF (σg1 is medium)AND (tgis low)THEN (Crg1 is low)3.IF (σg1 is high)AND (tgis low)THEN (Crg1 is medium)4.IF (σg1 is low)AND (tgis medium)THEN (Crg1 is medium)5.IF (σg1 is medium)AND (tgis medium)THEN (Crg1 is medium)6.IF (σg1 is high)AND (tgis medium)THEN (Crg1 is high)7.IF (σg1 is low)AND (tgis high)THEN (Crg1 is medium)8.IF (σg1 is medium)AND (tgis high)THEN (Crg1 is medium)9.IF (σg1 is high)AND (tgis high)THEN (Crg1 is high)10.IF (σg2 is low)AND (tgis low)THEN (Crg2 is low)11.IF (σg2 is medium)AND (tgis low)THEN (Crg2 is low)12.IF (σg2 is high)AND (tgis low)THEN (Crg2 is medium)13.IF (σg2 is low)AND (tgis medium)THEN (Crg2 is medium)14.IF (σg2 is medium)AND (tgis medium)THEN (Crg2 is medium)15.IF (σg2 is high)AND (tgis medium)THEN (Crg2 is high)16.IF (σg2 is low)AND (tgis high)THEN (Crg2 is medium)17.IF (σg2 is medium)AND (tgis high)THEN (Crg2 is medium)18IF (σg2 is high)AND (tgis high)THEN (Crg2 is high)With the null hypothesis that there should not have any significant difference between the two WM-DE engines as they are solving the same optimisation problem, the t-value should tend to be small along the searching. The rules for the F parameter are governed by two inputs: the population standard deviation of the fitness values and the t-value. The two inputs are encoded with three linguistic terms. As a result, nine rules can be formulated. Since two WM-DE engines in the intelligent optimiser are controlled by the fuzzy controller, and the control operation are based on the corresponding population standard deviation of fitness values of an engine, totally 18 rules for the F parameter can be formulated.Similarly, another 18 rules can be formulated for the Crparameter. The Crparameter affects DE on doing the crossover operation, which modifies the vector elements after the DE mutation operation. It can be considered as introducing some random disturbances to the DE operation. Similar to the F parameter setting, we would like to have the solution space to be more widely explored in the early stage of the search, and set a smaller searching space in the later stage of the search to make it more likely to reach a fine-tuned global solution. A large value of Crmeans the resulting vector has a bigger difference with the original position, which is preferred in the early stage of the searching process. It can enhance the chance for the population to move away from some local optima. In the later stage, we would like to have a small value of Crwhen the population concentrates in the global optimal area so that we can do a fine-tuning for the final solution. With the null hypothesis that there should not have any significant difference between the two WM-DE engines as they are solving the same objective function, the t-value should tend to be small along the searching.The block diagram of the internal fuzzy controller is shown in Fig. 8. This fuzzy controller has 3 inputs and 4 outputs, and generates outputs for every iteration step.In practice, we often have more than one objective to be optimised in a single problem. A multi-objective optimisation problem can be formulated as follows: optimise {f1(x), f2(x),…,fm(x)}, where fi(x); i=1,2,…,m, is a single objective function; m is the number of objective functions of the problem.Optimising several objectives simultaneously without considering the importance of each objective in the problem is called the Pareto-optimisation. Under the Pareto optimisation, if a new solution can improve at least one of the objectives without declining the other objectives, this solution will be considered as a better solution than the original one. If the new solution can improve at least one of the objectives, but decline the other objectives, this solution will be considered as a poor solution and will be discarded. The objective of the Pareto optimisation is to find a set of solutions that is not dominated by any one solution. This idea can be formulated into the selection operation of WM-DE as follows:(28)xi,g+1=u¯i,gif∀ifi(u¯i,g)≤fi(xi,g)xi,gotherwise.where fi(·) is the ith objective function. The pseudo code of the resulting multi-objective WM-DE is shown in Fig. 5. It ensures that WM-DE does not bias against any one of the objective functions in the problem.In this paper, the final output of the multi-objective WM-DE is a set of non-dominated solutions. The detail on selecting the final solution of the optimiser is discussed in the next section.In the proposed system, WM-DE is employed to optimise the fuzzy inference system (FIS) by finding out the best parameters for the fuzzy rules and membership functions. The job of the FIS is to classify the hypoglycaemic episodes accurately. To measure the performance of the biomedical classification, sensitivity and specificity are considered. The sensitivity measures the proportion of actual positives that are correctly identified, and the specificity measures the proportion of actual negatives that are correctly identified. The definitions of the sensitivity (ξ) and the specificity (η) are given as follows.(29)ξ=NTPNTP+NFN(30)η=NTNNTN+NFPwhere NTPis the number of true positives, which implies the sick people are correctly diagnosed as sick; NFNis the number of false negatives, which implies the sick people are wrongly diagnosed as healthy; NFPis the number of false positives which implies the healthy people are wrongly diagnosed as sick; and NTNis number of true negatives which implied healthy people are correctly diagnosed as healthy [14,15]. The values of sensitivity (ξ) and the specificity (η) are within 0–1. If the value of sensitivity is equal to 1, it means that the classification process is able to classify all the sick people correctly. If the value of specificity is equal to 1, it means that the classification process is able to classify all the healthy people correctly. The sensitivity and the specificity evaluate the performance of the system, which are important criteria for tuning the FIS.To perform the detection of hypoglycaemic episodes accurately, the proposed system should be able to obtain high values of sensitivity and specificity. The FIS learns the characteristic of the relationship between the system inputs and output through some known dataset. Traditionally, the dataset is divided into two sets, one is used for training the system and the other is used for testing the trained system. However, on using this approach, a phenomenon called overtraining may occur easily. Overtraining refers to the reduction of the generalisation ability that can occur as the system is trained. To overcome this problem, a validation strategy is proposed in this paper to reduce the risk of overtraining. Hence, a validation set is introduced such that the dataset is divided into three sets. While the training set is used to train the FIS, the validation set is used to validate the training result. Then, the testing set is used to test the trained system performance. The main objective of introducing the validation set is to balance the training effect on both the training set and the validation set. As a result, it can avoid the training result being obtained from over fitting with a single data set only.To train the system with the known dataset, a fitness function should be used to guide the training process and achieve good performance. A proper choice of the fitness function can help the training process achieve a good result. As the validation process is introduced, the number of fitness functions needed to be optimised is increased under the multi-objective approach. We consider four fitness functions for training the FIS.(31)f1=ξtargetifξtrain≥ξtargetξtrainotherwise(32)f2=ηtargetifηtrain≥ηtargetηtrainotherwise(33)f3=ξtargetifξval≥ξtargetξvalotherwise(34)f4=ηtargetifηval≥ηtargetηvalotherwisewhere ξtrainis the sensitivity of the training set; ξvalis the sensitivity of the validation set; ξtargetis the target value of sensitivity; ηtrainis the specificity of the training set; ηvalis the specificity of the validation set; ηtargetis the target value of specificity. The maximum value of each fitness function is equal to 1. These fitness functions are used to train both the training set and validation set for approaching the target values as much as possible. In the proposed system, the target values of the sensitivity and specificity (ξtargetand ηtarget) are not constant. They are dynamically updated by some conditions along the search process of the proposed intelligent optimiser as given by the pseudo code in Fig. 6. At the beginning of the optimisation, some initial values are assigned to the two target values, which are both set at 0.10 in this paper. If the sensitivity of both the training set (ξtrain) and validation set (ξvalid) meet the target value of sensitivity (ξtarget), ξtargetwill be increased by 0.01. The same method is also applied to the target value of specificity (ηtarget). The updating of ξtargetand ηtargetcontinue until the end of the training and validation process. The objective of this operation is to balance the training effect of both the training set and validation set. For instance, if currently ξtarget=0.65, ξtrain=0.68 and ξval=0.88; according to the training and validation process both f1 and f3 are kept at 0.65 and ξtargetfor the next iteration is changed to 0.66. We can see that although ξvalis much larger that ξtrain, the proposed intelligent optimiser takes it as the same. As a result, the training process will not bias against the training set or the validation set. The overtraining problem can be alleviated. A more reliable FIS could then be developed.After the training and validation process, the output of the intelligent optimiser is a group of non-dominated solutions. The solutions are evaluated with the training set and the validation set (the combined set). The solution with the smallest difference between the ξtargetand the ηtargetis selected as the final solution (the final output of the optimiser). The difference between the ξtargetand the ηtargetof the ith solution is determined as follows:(35)Diffi=|ξi−ξtarget|+|ηi−ηtarget|,i=0,1,…,2Np−1where ξiis the sensitivity of the combined set with the ith solution; ηiis the specificity of the combined set with the ith solution.Sixteen children with TIDM (14.6±1.5 years) volunteered to join a 10-h overnight hypoglycaemia study at the Princess Hospital for Children in Perth, Western Australia, Australia. Each patient was monitored overnight for the natural occurrence of nocturnal hypoglycaemia. Data were collected with approval from Woman's and Children's Health Service, Department of Heath, Government of Western Australia, and with informed consent.In this study, we measure the required physiological parameters, while the actual blood glucose levels (BGL) are collected as reference using the Yellow Spring Instruments. The signals used for the detection of hypoglycaemia are the HR, QTc, ΔHR and ΔQTc. The actual blood glucose profiles for 16 TIDM children are shown in Fig. 12. In this figure, all the data are taken at the same starting time and the duration of data taking for each patient is around 400–480min. The responses from 16 TIDM children show significant blood glucose changes during the hypoglycaemia phase against the non-hypoglycaemia phase. Normalisation is used to reduce the patient-to-patient variability and to enable group comparison. It is done by dividing the patient's heart rate and corrected QT interval by his/her corresponding values at time zero.In this paper, the meaning of hypoglycaemia is suggested as BGL<3.3mmol/l. The detection of hypoglycaemia episodes using these variables is based on a fuzzy inference system trained by the obtained clinical dataset. In effect, it estimates the presence of hypoglycaemia at a sampling period, based on the currently sampled data and the data sampled one period before. The sampling period is 5–10min and approximately 35–40 data points from each patient were used. The whole data set is divided into a training set, a validation set and a testing set; each with 5 patients randomly selected. With these 15 patients, the number of data points for training, validation, and testing are 199, 177, and 193 respectively. The whole dataset, which included both the hypoglycaemia data part and non-hypoglycaemia data part, is used to measure the classification performance in terms of sensitivity and specificity.For comparison and analysis purposes, 11 different approaches [10,13,19,22,24] are used to tackle the TIDM problem. They are:(i)The proposed FIS with four inputs (HR, QTc, ΔHR and ΔQTc) tuned by the proposed intelligent optimiser with the proposed training and validation method.An evolved fuzzy inference system with two inputs (HR and QTc) tuned by the proposed intelligent optimiser with the proposed training and validation method.The proposed FIS with four inputs (HR, QTc, ΔHR and ΔQTc) tuned by DWM-DE [22].An evolved fuzzy inference system with two inputs (HR and QTc) tuned by DWM-DE [22].A fuzzy inference system with four inputs (HR, QTc, ΔHR and ΔQTc) without validation (FIS-4-w/o-v) [19].A fuzzy inference system with two inputs (HR and QTc) without validation (FIS-2-w/o-v) [19].Neural network based rule discovery system with 4 inputs (HR, QTc, ΔHR and ΔQTc) (NN-RD) [24]A linear multiple regression with 4 inputs (HR, QTc, ΔHR and ΔQTc) (LR-4) [19].A linear multiple regression with 2 inputs (HR and QTc) (LR-2) [19].An evolved multiple regressions with two inputs (EMR2) [19].A feed-forward neural network (FFNN) [19].In (i) and (ii), the proposed intelligent optimiser is used to optimise the fuzzy rules and membership functions of the FIS. The settings of the parameters are given as follows.•Shape parameter of the wavelet mutation((ζwm):1).Parameter λ for the monotonic increasing function: 10,000.Initial population: it is generated uniformly at random.Maximum number of iteration: 5000Population size: 50×2For the two input FIS, three different numbers of membership functions (mf) have been used for testing. They are three, five, and eight. For the 4-input case, only three and five have been used. In the 2-input case with mf=3, 5 and 8, the numbers of rules are equal to 9, 25 and 64 respectively. In the 4-input case with mf=3 and 5, the numbers of rules are equal to 81 and 625 respectively.The averaged results out of 50 trials of the FIS with the proposed intelligent optimiser under different numbers of inputs and membership functions are shown in Table 1a. The sensitivity and specificity of the training dataset, validation dataset and testing dataset are reported in this table. The averaged results out of 50 trials of the FIS with WM-DE (optimiser without the two populations evolving in parallel and the fuzzy controller) under different numbers of inputs and membership functions are shown in Table 1b. The sensitivity and specificity of the training dataset, validation dataset and testing dataset are reported in this table. By comparing Tables 1a and 1b, we can see that by introducing the population analysis and the fuzzy controller, better performance can be achieved.The best results out of the 50 trials are given in Table 2. We can see that the FIS model trained with the proposed intelligent optimiser can offer more than 75% in sensitivity and 55% in specificity, which satisfy the common clinical classification requirements (sensitivity>70% and specificity>50%). With the number of inputs increased, more information could be offered to the FIS to perform better classification. Moreover, the classification performance of the FIS increases when the number of membership functions increases thanks to the greater degree of freedom of the FIS. Despite the above advantages, the numbers of parameters for tuning will also increase rapidly. It makes the training process to be more computationally demanding. The proposed intelligent optimiser is employed to handle the training process in order to improve the solution quality, solution reliability and the rate of convergence.

@&#CONCLUSIONS@&#
