@&#MAIN-TITLE@&#
A distributed data component for the Open Modeling Interface

@&#HIGHLIGHTS@&#
We created a software component for online data access for linked models.The work integrates the Open Modeling Interface with web services.Efficient design makes the component suitable for high-performance compute clusters.A case study demonstrates how it can be incorporated into a modeling study.

@&#KEYPHRASES@&#
OpenMI,Data management,Web services,Integrated modeling,

@&#ABSTRACT@&#
As the volume of collected data continues to increase in the environmental sciences, so too does the need for effective means for accessing those data. We have developed an Open Modeling Interface (OpenMI) data component that retrieves input data for model components from environmental information systems and delivers output data to those systems. The adoption of standards for both model component input–output interfaces and web services make it possible for the component to be reconfigured for use with different linked models and various online systems. The data component employs three techniques tailored to the unique design of the OpenMI that enable efficient operation: caching, prefetching, and buffering, making it capable of scaling to large numbers of simultaneous simulations executing on a computational grid. We present the design of the component, an evaluation of its performance, and a case study demonstrating how it can be incorporated into modeling studies.DataComponentGRoWE/Kansas State University234 Nichols Hall, Kansas State University, Manhattan, KS, 66502, 785-532-6350tombz@ksu.edu2013Architecture independentWindows/LinuxC#2 MBwww.github.com/CNH-Hyper-Extractive/data-componentFree

@&#INTRODUCTION@&#
The rate at which data are being captured, created, and stored, is continuing to accelerate in the environmental sciences. The potential impact of these data on scientific discovery can only be realized if these data can be effectively utilized. This presents new challenges for data management and has inspired a number of initiatives for environmental information systems and cyberinfrastructure to meet this need (Horsburgh et al., 2009; Demir and Krajewski, 2013; Pettit et al., 2013; Mason et al., 2014; DataONE). These systems provide capabilities for organizing, storing, manipulating, and accessing data. Access to data is provided by web portals or desktop applications that enable scientists to search, analyze, and visualize data, as well as through machine interfaces, such as web services, that enable software systems to access these data.This creates new opportunities for closer integration between simulation models and environmental information systems. Models can consume data directly from these systems and publish data to them. The often time-consuming tasks performed by a scientist to collect data from a myriad of sources, convert and transform the data, and assemble them into a set of model-specific input files (or databases), are no longer necessary. It is similarly no longer necessary to aggregate model output files, convert and transform them, and upload the final data sets.In grid environments, in which computational resources consist of large clusters of machines, such integration is equally compelling. The greater scale at which these tasks must be performed, along with the additional tasks of deploying model input files to the compute resources and collecting the output files, typically requires a combination of manual tasks and ad-hoc automation techniques such as scripting. The development and maintenance of such scripts for both processing the model-specific input and output files and for communicating with online services can involve a substantial effort. By enabling models to exchange data sets directly with environmental information systems the scientist is freed of these tasks. This also simplifies the complexity of the provisioning of models when executed an in automated fashion as part of workflow systems (Deelman et al., 2009) and service-oriented architectures (Nativi et al., 2013; Goodall et al., 2013).In the context of component-based modeling and simulation in which compositions of models (and models themselves) are assembled from software components with standard input–output interfaces, the opportunities for integration with cyberinfrastructure are even greater because the data access capabilities can be encapsulated into data components that can be composed with other components. It is advantageous to separate data access functionality from the implementations of the models because it allows for more efficient operation (e.g. avoiding duplicate data retrieval by different components) and minimizes the software complexity of the model components. Through the adoption of standards, in both model component input–output interfaces (see Jagers (2010) for a review) and web service application programming interfaces, general-purpose data components can facilitate the exchange of data between model components and environmental information systems. Such components complement other software tools that support data access to these systems (such as the desktop applications ONEDrive for DataONE and CUAHSI-HIS's HydroGet).We have developed a distributed data component that conforms to the Open Modeling Interface (OpenMI) (Gregersen et al., 2007), which both provides model components with input data retrieved from standards-based web services and delivers model output data to such services on each time step. By operating on a time step basis, the data component enables model components to consume dynamically-changing input data, such as measurement data from sensor networks, and to distribute output data in real-time. This also supports computational steering scenarios in which model output is monitored and inputs are manipulated as necessary as a simulation is being performed. The data component employs three techniques tailored to the unique design of the OpenMI that enable efficient operation: caching, buffering, and prefetching. This work unifies our previous efforts (Bulatewicz and Andresen, 2011, 2012) and includes improvements to the software design that achieve a significant increase in scalability. It also provides an integral part of an interdisciplinary modeling study in which we are integrating models of groundwater, economic decision making, and crop production to investigate the impact of policy on irrigated agricultural systems. The following sections position this work within the context of existing research and introduce the aspects of the OpenMI relevant to understanding the design and implementation of the data component. We then present the design of the data component in Section 2, an evaluation of its performance in Section 3, and a demonstration of how it may be incorporated into an integrated modeling study in Section 4.

@&#CONCLUSIONS@&#
We have presented the design of a general-purpose data component for the OpenMI, evaluated its performance, and demonstrated its application in a modeling study. The data component can mitigate data management challenges in modeling and simulation by serving as a bridge between model components and online services minimizing the reliance on data files and ad-hoc scripting. We adapted three techniques to the unique design of the OpenMI to enable efficient operation: caching, prefetching, and buffering, making it suitable for use on both desktop computers and high-performance compute clusters.The data component is added to a composition and linked to model components in same way that model components are linked to one another. The scientist configures, and re-configures the data component for the input and output exchange items necessary for any given set of model components based on the data available via web services. It relies on a data manager program that communicates with web services and manages a distributed data store shared across all the data managers executing on a compute cluster. The data retrieved from web services is cached in the data store and the data collected from model components is buffered in the data store before being delivered to web services.We evaluated the performance of the data component in terms of scalability and the effectiveness of caching and prefetching in minimizing the simulation runtime. The results are summarized in Table 1. The increase in simulation runtime incurred by the data component (as compared to using local data files) ranged from 0.14 s for 16 simulations to 3.78 s for 1000 simulations for each time step. The data transferred to and from the web service was 131 KB per time step for a value set of 1000 values.Caching can have a significant impact on the runtime of simulation in some cases and little or no impact in other cases. We demonstrated this via two configurations which resulted in a 1%–29% reduction in the average simulation runtime. This range only serves as an example of possible performance, as the actual impact is a direct result of the retrieval time and the number of times model components request identical data.Prefetching can also have a significant impact on the runtime of a simulation, but through different means than caching. Prefetching is only effective when the time step processing time of a model component is comparable to the retrieval time thus making it possible to overlap the model execution with the retrieval of data. We demonstrated this via two configurations in which the runtime was reduced by only 3% when there was no overlap and 43% when there was full overlap. In addition, prefetching is less effective when a data manager is under high utilization.Buffering always reduces the runtime of a simulation where the reduction is directly proportional to the web service response time. Although the impact of buffering on the simulation runtime cannot be measured empirically (because buffering is inherent in the design of the data manager) its impact can be estimated by adding the time spent sending the data on each time step. For the experimental configuration, in which the model components spend 2 s processing each time step, if the time spent sending data on each time step was 0.1 s then the reduction in runtime due to buffering would be 5% whereas if the time spent sending data was 1.0 s then the reduction would be 33%.Based on the results of the performance study, it can be expected that the simulation runtime will increase as the number of simulations is increased, and that buffering always results in improved runtimes while caching and prefetching may result in improvements depending upon the situation. Overall, the runtime overhead of the data component is primarily determined by the web service response time and to a lesser degree the time step processing time of the model components and the value set size (as the data transfer size and parsing time are influenced by it). As the web service response time increases, the runtime increase incurred by the data component becomes larger while at the same time the benefit of buffering and the potential benefit of caching and prefetching increase as well. In general, the percentage of the runtime that is due to the web service calls is equivalent to the reduction that would be achieved in cases in which caching and prefetching are effective.We therefore conclude that the design of the data component meets the three requirements identified in Section 2. Standards for web services make it possible for the component to be configured and reconfigured as necessary to meet the needs of different linked model configurations and different web services. The increase in simulation runtime incurred by the data component (as compared to using local data files) is reasonable and in some cases can be eliminated by caching and prefetching data. The overall performance of the data component is reasonable for large numbers of simultaneous simulations.As the importance of data availability, interoperability, and transparency continue to rise, so too does the need for software tools that facilitate these. General-purpose tools that intelligently and efficiently provision, collect, and deliver data will become an essential part of OpenMI linked models on desktop computers and compute clusters alike and this work provides a starting point for such tools.