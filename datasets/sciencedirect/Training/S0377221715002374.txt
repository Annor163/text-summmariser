@&#MAIN-TITLE@&#
A decompose-and-fix heuristic based on multi-commodity flow models for driver rostering with days-off pattern

@&#HIGHLIGHTS@&#
We address the driver rostering problem with days-off patterns and noncyclic duty assignment.Three MILP models are proposed and compared from a theoretical point of view.A new decompose-and-fix heuristic is proposed to solve the problem.Computational experiments showed the good performance of the heuristic.

@&#KEYPHRASES@&#
Transportation,Driver rostering,Multi-commodity flow,Decompose-and-fix heuristic,

@&#ABSTRACT@&#
Facing severe budgetary constraints, public transport companies are forced to efficiently manage staff, one of the most expensive resources.The driver rostering problem in a public transit company consists of defining rosters, that is, assigning daily crew duties to the company's drivers for a pre-defined time horizon, ensuring transport demand in a specific area, at low operating costs, while complying with legal restrictions and agreements between the company and the driver unions.The objective of this paper is the study of mathematical models and optimization techniques that lead to new computational tools able to solve the bus driver rostering problem with days-off patterns by producing solutions that increase efficiency and reduce operating costs, while improving or maintaining the service quality and balancing the drivers’ workload.Three mixed integer linear programming formulations are presented and compared from a theoretical point of view: an assignment/cover model, a multi-commodity flow model and a new multi-commodity flow/assignment model.Based on a hierarchy of the decisions made during the resolution of the problem, a new decompose-and-fix heuristic is developed by exploring the underlying structure of the multi-commodity flow models. The heuristic solves the sequence of sub-problems identified by the hierarchy, while fixing or bounding the value of some variables to incorporate previous decisions.Computational experiments were carried out with instances, derived from real world data and from benchmark data, characterized by a days-off pattern in use at two Portuguese public bus transport companies. Computational results confirm the good performance of the decompose-and-fix heuristic.

@&#INTRODUCTION@&#
Public urban transport companies face an increasing burden regarding operating costs, being expenditure on staff the bulk of these costs. Efficient management of human resources is needed, in particular, regarding staff engaged to the driving of buses. Therefore, companies require the enhancing of techniques for planning bus drivers’ work.The driver rostering problem in public transit companies aims at assigning daily crew duties to each driver defining a sequence of workdays and days-off which is the driver schedule to be in force during a rostering period of pre-determined length, the rostering horizon. A roster is the set of all driver schedules, together with the particular work shifts that drivers must work on. The rosters must comply with law, labor regulations and drivers’ union agreements, and also meet the demand for transport in specific urban areas. Such a problem is usually highly constrained and dependent on the particular contexts where it may arise.We can step back until at least the sixties of the last century to find Operational Research studies on bus drivers scheduling and rostering (e.g. Bennett & Potts, 1968). Since then, a variety of surveys may be found, either on edited volumes of conferences or on specific papers that present methods and/or models for dealing with problems in specific cases, as surveyed by Ernst, Jiang, Krishnamoorty, Owens, and Sier (2004a); Ernst, Jiang, Krishnamoorty, and Sier (2004b). More recent publications include the survey by Van den Bergh, Beliën, De Bruecker, Demeulemeester, and De Boeck (2013), a reference model for timetabling and rostering proposed by Causmaecker and Berghe (2012), as well as, other works on rostering in different transport contexts. Lusby, Dohn, Range, and Larsen (2012) propose a column generation based heuristic to roster ground staff with days-off pattern for an airline company and Nishi, Sugiyama, and Inuiguchi (2014) solve a railway rostering problem in a cyclic context by a Benders decomposition algorithm. Xie, Kliewer, and Suhl (2012) integrate the cyclic crew scheduling and driver rostering problems and propose a multiobjective network problem solved with standard software followed by a simulating annealing for improvement on one of the objectives. Other relevant study for crew rostering in a cyclic environment is Hartog, Huisman, Abbink, and Kroon (2009) where a planning process uses integer linear programming models to build train driver rosters. Nurmi, Kyngäs, and Post (2011) propose a model that separately schedules days-off and shifts within a non-cyclic environment. The problem is solved with a population-based local search heuristic that is applied in a Finish bus transit company. Other studies involving population based heuristics (evolutionary or scatter search) are presented in Respício, Moz, and Pato (2013) for non-cyclic bus driver rostering, Burke et al. (2010) and Maenhout and Vanhoucke (2010) for airline rostering and Dornberger, Frey, and Hanne (2008) for railway rostering.Multi-commodity multilayer network flow models have been widely used to describe rostering problems, e.g. Aronson (1986) and Aringhieri and Cordone (2004) for personnel rostering in general and Moz and Pato (2003) for nurses. As to the authors’ knowledge, the first formulation for bus driver rostering in a multilayer network is due to Carraresi and Gallo (1984). In transport contexts, several studies involving multi-commodity flow models were published, namely, the ones by Cappanera and Gallo (2004) for airline crew rostering and Xie and Suhl (2014) for cyclic and non-cyclic crew rostering problems in public bus transit.The authors studied the bus driver rostering as a sub-problem of the integrated vehicle-crew-roster problem. Firstly, in Mesquita et al. (2011), a roster problem with no pre-defined pattern was addressed in the last step of a sequential algorithm. Later on, in Mesquita, Moz, Paias, and Pato (2013), a roster problem where drivers work according to a pre-defined days-off pattern was studied as a sub-problem of a Benders decomposition approach. Although good quality results have been attained for the integrated vehicle-crew-roster problem with days-off pattern, the rostering part revealed to be too CPU time consuming which pointed to deeply research on the rostering problem on its own.In what follows, Section 2 presents the description of the bus driver rostering problem with days-off pattern (DRP). Section 3 is devoted to the theoretical complexity of the problem. In Section 4 three mixed integer linear programming formulations (MILP) are presented: an assignment/cover model, a multi-commodity flow model and a new multi-commodity flow/assignment model, the last two defined on multilayer networks. In Section 5 the linear relaxations of the models are studied with respect to the bounds they provide for the optimum value of DRP. Section 6 describes the new decompose-and-fix heuristic approach. Computational experience, carried out on a set of instances derived from real world and benchmark data, will be presented and commented in Section 7. Lastly, some conclusions will be drawn in Section 8.In most public urban transport companies, drivers are divided into small groups depending on several factors like seniority, employment relationship with the company, and urban area to cover. The rostering for each group may stand on different strategies.The problem here presented is devoted to the assignment of a set L of crew duties to a pool of |M| drivers who work according to a pre-defined days-off pattern without cyclic crew duty assignments, during a rostering horizon of |H| days.The set of crew duties of day h ∈ H is denoted by Lh, henceL=⋃h∈HLh. Rosters must comply with internal norms of the companies, Labor Law and unions’ agreements. These requirements are related to the minimum number of weekly days-off that drivers must get; the minimum number of consecutive days-off; the number of days-off that must match with weekend days; the maximum number of consecutive workdays; and the number of hours that drivers must rest between two consecutive workdays. In order to meet the requirement on the number of rest hours between consecutive crew duties, set L is partitioned, according to the starting time, in two sets of crew duties: the set of early duties and the set of late duties. A driver cannot be assigned to an early duty if he worked a late duty the day before. Moreover, companies usually do not assign drivers to different duty types on consecutive days, therefore the sequence early-late is also considered infeasible. Furthermore, crew duties are classified according to their spread into short, normal and long. Normal duties correspond to working days with a spread that forces the inclusion of a break time for lunch but does not include overtime. Short crew duties have a shorter spread than normal duties since they allow the possibility of not including lunch time. Long duties have a longer spread than normal duties thus including overtime. The combination of these two classifications, which classifies a crew duty according to both the starting time and spread, defines the type of each crew duty.The days-off pattern is defined by a set S of days-off schedules that may be represented by a 0-1 matrix (0 for a day-off, 1 for a workday), where each row corresponds to a weekday and each column to a feasible sequence of days-off and working periods, that is, a particular days-off schedule.The days-off schedules defined in a rostering matrix[ahs]h∈H,s∈S(ahs=1if day h is a workday in schedule s and 0, otherwise) already satisfy some of the rostering constraints of the problem. These constraints are those related to the days-off and those that bound the number of consecutive workdays.An example of such a 0-1 matrix is represented in Table 1for the case of a rostering horizon of 49 days and a pattern that gives the distribution of days-off in each schedule. This table displays seven days-off schedules each of which comprising seven consecutive weeks of the rostering horizon beginning on a Monday. This particular case corresponds to a cyclic days-off pattern as the structure of days-off is repeated regularly. Although cyclic, this pattern does not require that crew duties are assigned to drivers on a cyclic basis. Each schedule consists of a sequence of working and rest periods, containing 1 week with 1 day-off, 5 weeks with 2 consecutive days-off and 1 week with 3 consecutive days-off. Every period of 3 consecutive days-off includes Saturday and Sunday and if it also includes a Friday then it will be followed by 5 consecutive workdays.Although the example in Table 1 presents a cyclic days-off pattern, a rostering matrix[ahs]h∈H,s∈Smay also contain a non-cyclic days-off pattern. In fact, the referred matrix may contain any combination of 0-1 columns that define the set of feasible days-off schedules. A theoretical bound on the cardinal of S is given by 2|H|, however in practical situations the actual figure is significantly lower than 2|H|.Considering a fixed pool of drivers, one of the objectives is to identify the workforce needed to operate the regular service of vehicles so as to keep some drivers available for occasional service or to substitute those absent. This is accomplished by assigning rostering costs per driver (rm, ∀m).Given a group of drivers, the corresponding rostering matrix, and a set of anonymous crew duties, the DRP aims at defining a minimum cost roster for the rostering horizon, where each driver is assigned to at most one days-off schedule, each crew duty is covered by exactly one driver, while ensuring the minimum rest periods between consecutive crew duties. Moreover, for a roster to be well accepted by the drivers of the company, it should provide a balanced distribution of the short and the long crew duties among the drivers.The DRP is NP-hard. This may be proved by showing that there is a known NP-hard problem, the set covering problem with equal objective function coefficients, which is polynomially transformable to the DRP (Nemhauser & Wolsey, 1988). In the sequence, we will see that the DRP with cyclic days-off pattern is also NP-hard.Proposition 1The DRP is NP-hard.Let us consider instances of the rostering problem such that:-|M|=|S|maxh∈H|Lh|;rm= 1, ∀m ∈ M;there are only normal early crew duties, thus there are neither constraints preventing non feasible sequences of crew duties, nor the terms on roster balancing in the objective function, hence the objective function only concerns to minimization of costs.The problem defined as a result of the above particularizations (DRPart) aims at determining the minimum number of drivers to assign to schedules of S ensuring the covering of all crew duties. Given that the crew duties are all of the same type, one may assume without loss of generality that, on each day, crew duties can be arbitrarily assigned to drivers working according to a schedule that covers that day. Consequently, DRPart aims at determining the minimum number of schedules s ∈ S covering all crew duties, which corresponds to solve the generalized set covering problem with equal objective function coefficients:minimizeZGSC=∑s∈Sxs∑s∈Sahsxs≥|Lh|∀h∈Hxs≥0andinteger∀s∈Swhere xsrepresents the number of drivers assigned to schedule s. Note that the matrix[ahs]h∈H,s∈Sis any 0-1 matrix and |Lh| is any integer greater or equal to one, ∀ h ∈ H.As proved, the generalized set covering problem with equal objective function coefficients is polynomially transformable to the DRP. On the other hand, the generalized set covering problem with equal objective function coefficients has the set covering problem with equal objective function coefficients as a particular case, a well-known NP-hard problem (Garey & Johnson, 1979). Hence, any exact algorithm for DRP will solve the set covering problem with equal objective function coefficients which states the NP-hardness of DRP (Nemhauser & Wolsey, 1988).□Proposition 2The DRP with cyclic days-off pattern is NP-hard.In the case of cyclic days-off pattern, the columns of constraint matrix[ahs]h∈H,s∈Sare columns of a cyclic boolean matrix. The generalized set covering problem with equal objective function coefficients, and constraint matrix which columns are taken from a cyclic boolean matrix is the so-called cyclic scheduling problem. The cyclic scheduling problem was proved to be NP-hard by Bartholdi III (1981), hence the proposition holds.□This section presents three mathematical formulations for DRP. It begins by a brief presentation of an assignment/covering model that directly uses the rostering matrix. Afterwards, to take advantage from network characteristics of the rostering problem, two multi-commodity network flow formulations are developed.In all formulations, the objective function measures the quality of the solution in terms of driver costs, related to the drivers assigned to work and the respective salaries, as well as roster balancing.An assignment/covering model has been used in Mesquita et al. (2013) to describe the rostering sub-problem within the integrated vehicle-crew-roster problem. The corresponding assignment variables can be aggregated insofar as crew duties of equal type are considered as homogeneous within this study. The characterization of crew duties in Section 2 defines six crew duty types: early short (ET), early normal (EN), early long (EO), late short (AT), late normal (AN) and late long crew duties (AO), respectively, t = 1, 2, 3, 4, 5, 6.Therefore, the model includes covering variables wms= 1 if driver m is assigned to days-off schedule s or 0 otherwise; assignment variablesythm=1if driver m works a crew duty of type t on day h or 0 otherwise; and variables ηTand ηOto evenly distribute the short and long duties among the drivers. Concerning the parameters, the model includes: Cthequal to the number of crew duties of type t to be covered on day h; rm, the cost that penalizes the assignment of driver m to regular driving work, as described in Section 2. Moreover, parameters λTand λOare associated to variables ηTand ηO, respectively, with the aim of balancing the assignment of undesirable duties.The MILP assignment/covering model, AC, may be written as follows:(AC0)minimizeZAC=∑m∈M∑s∈Srmwms+λTηT+λOηOsubject to(AC1)∑s∈Swms≤1∀m∈M(AC2)∑m∈Mythm=Cth∀h∈H,t∈{1,…,6}(AC3)∑s∈Sahswms≥∑t=16ythm∀m∈M,h∈H(AC4)∑t=4,5,6ythm+∑t=1,2,3yt(h−1)m≤1∀m∈M,h∈H∖{1}(AC5)∑t=1,2,3ythm+∑t=4,5,6yt(h−1)m≤1∀m∈M,h∈H∖{1}(AC6)∑h∈H∑t=1,4ythm−ηT≤0∀m∈M(AC7)∑h∈H∑t=3,6ythm−ηO≤0∀m∈M(AC8)ythm∈{0,1}∀m∈M,h∈H,t∈{1,…,6}(AC9)wms∈{0,1}∀m∈M,s∈S(AC10)ηT,ηO≥0.Constraints (AC1) state that each driver is assigned to one days-off schedule or is available for other service in the company. Equalities (AC2) impose that all crew duties of each type, in a solution, must be assigned to drivers. Constraints (AC3), where parameterahs=1if h is a workday for schedule s, impose coherence between the assignment of a crew duty and the schedule assigned to each driver. Inequalities (AC5) forbid the sequence late-early duties to ensure that drivers rest a given minimum number of hours between consecutive duties. Furthermore, constraints (AC4) forbid the sequence early-late duties. Together, (AC4) and (AC5) impose a day-off period between changes of duty types. Inequalities (AC6) and (AC7) calculate, respectively, the maximum number of short and long duties assigned to a driver. Constraints (AC8), (AC9) and (AC10) define the domain of the variables. Constraints (AC6), (AC7), (AC8) and (AC10) along with the two last terms of the objective function ensure that variables ηTand ηOtake non-negative integer values in the optimal solution. The theoretical dimension of AC is O(|M|(|S|+|H|)) for variables and O(|M||H|) for constraints.In alternative to model AC one may consider two formulations, both based on a multilayer multi-commodity network.Each layer of nodes, except the first and the last, represents a day of the rostering horizon, a day-layer. The first and the last layer of nodes contain an artificial origin node and an artificial terminal node, respectively. Each day-layer is composed by at most seven nodes, one representing the day-off  ‘duty’  (DO), and the remaining corresponding to crew duty types occurring on that day.In accord with each pre-defined days-off schedule, there is an arc linking two day-layer nodes if the corresponding pair of crew duty types may be performed on consecutive days by some driver. There is also an arc from the origin to each node of day-layer 1 and from each node of the day-layer |H| to the terminal node. Furthermore, all nodes of a day-layer are linked to the day-off node of the next day-layer. A specific parameter is associated with each crew duty node, representing the number of crew duties of that type that must be assigned to drivers on that day. This parameter determines the amount of flow passing through that node and is equal to the capacity of the node. This parameter is not defined for day-off nodes.A days-off schedule s in this network, satisfying the respective pattern of days-off, corresponds to a sub-network, linking the origin to the terminal node. Fig. 1presents the first four day-layers for days-off schedule s2 and days-off schedule s4 described in Section 2.The vertex set of the day-layer nodes V = {1, …, n, n + 1, …, n + |H|}, contains the nodes 1 to n, each one corresponding to a crew duty type occurring on a day (n ≤ 6|H|) and the nodes n + 1 to n + |H| corresponding to the day-off ‘duties’. The setV0+={0}∪Vincludes the artificial origin node 0, andVH+=V∪{n+|H|+1}includes the artificial terminal node n + |H| + 1. The set of all nodes of the network is{0}∪V∪{n+|H|+1}=V0+∪VH+. Nodes inV0+are partitioned according to layers into subsets Vlhfor day-layer nodes (h ∈ H), considering Vl0 for the origin.The arc set is represented by A. Each arc (i, j) of the network corresponds to a sequence identified by the crew duty types and days associated to nodes i and j, respectively. The sub-network corresponding to schedule s has arc set represented by As, thereforeA=⋃s∈SAs.In the first multi-commodity flow model, MF, a commodity corresponds to a pair (m, s), thus associating driver m to schedule s.A feasible solution to the rostering problem is a |M×S|-commodity flow in this network from the origin to the terminal node that satisfies the conservation flow on the nodes for each commodity, that is, both for drivers and schedules, and the capacity of the nodes. All arcs starting at the origin node have associated costs to penalize the launching of a new driver on a schedule.Model MF involves binary variablesxijms=1if driver m is assigned to the sequence represented by arc (i, j) in schedule s, and equal to 0, otherwise (there are also variables –xojms,xi,n+|H|+1ms– for the flows from the origin 0 to the nodes of day-layer 1 and from the nodes of day-layer |H| to the terminal node n + |H| + 1); and continuous variables ηTand ηOrepresenting the maximum number of short and long duties, respectively, assigned to a driver in the rostering horizon, as defined for AC.The MILP multi-commodity flow model follows:(MF0)minimizeZMF=∑m∈M∑s∈S∑j:(0,j)∈Asrmx0jms+λTηT+λOηOsubject to(MF1)∑s∈S∑j:(0,j)∈Asx0jms≤1∀m∈M(MF2)∑m∈M∑s∈S∑i∈V0+:(i,j)∈Asxijms=Cj∀j∈{1,…,n}(MF3)∑i∈V0+:(i,j)∈Asxijms−∑i∈VH+:(j,i)∈Asxjims=0∀m∈M,s∈S,j∈V(MF4)∑s∈S∑j∈T∑i∈V0+:(i,j)∈Asxijms−ηT≤0∀m∈M(MF5)∑s∈S∑j∈O∑i∈V0+:(i,j)∈Asxijms−ηO≤0∀m∈M(MF6)xijms∈{0,1}∀m∈M,s∈S,(i,j)∈As(MF7)ηT,ηO≥0where T is the set of short crew duty types, O is the set of long crew duty types, along the rostering horizon, and Cjis the capacity of node j (the number of crew duties of the corresponding type to be performed by drivers of the company).Inequations (MF1) state that each driver is assigned to at most one schedule. Equations (MF2) ensure that the number of drivers assigned to a node is equal to the capacity of that node. Equations (MF3) are flow conservation constraints on nodes for drivers and schedules. Inequations (MF4)/(MF5) calculate the maximum number of short/long duties assigned to a driver. Constraints (MF6) and (MF7) define the domain of the variables. The theoretical dimension of MF is O(|M||S||H|) both for variables and constraints, since crew duties are aggregated by type.In alternative to model MF, one may consider another model with fewer commodities. For this new model, denoted by MFA, each commodity corresponds to a days-off schedule. Hence, there are only |S| commodities and the flow of commodity s in the network defines the number of drivers working on days-off schedule s.A feasible solution to the rostering problem is a |S|-commodity flow from the origin node 0 to the destination, node n + |H| + 1, that satisfies flow conservation for schedules on the nodes, and the capacity of each node. The flows of the |S| commodities are integer valued and each flow unit, from node 0 to node n + |H| + 1, is assigned to a specific driver. Consequently, two types of variables are needed, beyond the above defined ηT, ηO: flow variablefijsequal to the number of drivers that perform the sequence given by arc (i,j) in schedule s; assignment variablezims=1if driver m is assigned to node i in schedule s, and 0 otherwise, andz0ms=zn+|H|+1ms=1if driver m is assigned to work in schedule s, and 0 otherwise.The MILP multi-commodity flow/assignment model follows:(MFA0)minimizeZMFA=∑m∈M∑s∈Srmz0ms+λTηT+λOηOsubject to(MFA1)∑s∈S∑i∈V0+:(i,j)∈Asfijs=Cj∀j∈{1,…,n}(MFA2)∑i∈V0+:(i,j)∈Asfijs−∑i∈VH+:(j,i)∈Asfjis=0∀s∈S,j∈V(MFA3)∑i∈V0+:(i,j)∈Asfijs−∑mzjms=0∀s∈S,j∈VH+(MFA3′)∑j∈Vl1:(0,j)∈Asf0js−∑mz0ms=0∀s∈S(MFA4)zims−∑j∈VH+:(i,j)∈Aszjms≤0∀m∈M,s∈S,i∈V0+(MFA5)∑j∈Vlhzjms−∑j∈Vlh+1zjms=0∀m∈M,s∈S,h∈{0,1,…,|H|−1}(MFA6)∑s∈Sz0ms≤1∀m∈M(MFA7)∑s∈S∑j∈Tzjms−ηT≤0∀m∈M(MFA8)∑s∈S∑j∈Ozjms−ηO≤0∀m∈M(MFA9)fijs≥0andinteger∀s∈S,(i,j)∈As(MFA10)zims∈{0,1}∀m∈M,s∈S,∀i∈V0+∪VH+(MFA11)ηT,ηO≥0.For each node  j ∈ {1, …, n}, constraints (MFA1) state that the total inflow is equal to the number of drivers that must be assigned to the crew duty type represented by the node. (MFA2) are flow conservation constraints for the commodities. (MFA3) link variables f and z, ensuring that, for each node inVH+the inflow of commodity s is equal to the number of drivers assigned to that node and working according to schedule s. Constraints (MFA3′) link the same type of variables corresponding to node 0. Constraints (MFA4) state that, if a driver is assigned to node i in schedule s then he is also assigned to a successor of node i on the same schedule. Constraint set (MFA5) imposes that, for each schedule, a driver is assigned to the same number of nodes in each day-layer. That is, if he is assigned to schedule s at node 0 then he will be assigned to exactly one node, in schedule s, in each day-layer. It follows that, (MFA6) along with (MFA4) and (MFA5) guarantee that each driver is assigned to at most one schedule. Moreover, a driver working in the rostering horizon performs exactly one crew duty in each day-layer. Due to the minimization objective, a driver is assigned to a schedule if he covers at least one crew duty in the rostering horizon. Finally, inequalities (MFA7)/(MFA8) calculate the maximum number of short/long duties assigned to a driver and constraints (MFA9), (MFA10) and (MFA11) define the domain of the variables. As for MF, the theoretical dimension of MFA is O(|M||S||H|) both for variables and constraints.In this section the lower bounds obtained from the linear programming (LP) relaxation of models AC, MF and MFA –AC¯,MF¯andMFA¯– are compared from a theoretical point of view.Proposition 3The optimal value ofAC¯model,ZAC¯*, is less than or equal to the optimal value ofMF¯model,ZMF¯*, and, for some instances, it can be strictly lower.The relaxation of the integrality constraints (MF6), (AC8) and (AC9) follows:0≤xijms≤1∀m∈M,s∈S,(i,j)∈As(MF6¯)0≤ythm≤1∀m∈M,h∈H,t∈{1,…,6}(AC8¯)0≤wms≤1∀m∈M,s∈S(AC9¯)Given a feasible solution ofMF¯,x=(xijms), a feasible solution ofAC¯, (w, y) = (wms,ythm), can be determined with the same objective function value, as proved below.Let us define the solution ofAC¯from the solution ofMF¯:(5.1)wms=∑j:(0,j)∈Asx0jms∀m∈M,s∈S(5.2)ythm=∑s∈S∑j∈Vt∑i∈V0+:(i,j)∈Ahsxijms∀m∈M,h∈H,t∈{1,…,6}where Vtis the set of nodes of type t andAhsthe subset of Ascontaining the arcs incident to nodes of day-layer h,As=⋃h∈HAhs.Since x satisfies constraints (MF1), (MF3) and (MF6¯), then by (5.2) y satisfies (AC8¯).Since x satisfies constraints (MF1) and (MF6¯), then by (5.1) w satisfies (AC1) and (AC9¯).Since x satisfies constraints (MF2), then by (5.2) y satisfies (AC2).Since x satisfies constraints (MF3), then (w, y) satisfies (AC3), (AC4), (AC5) by the design of the network. In fact, (MF3) imposes the conservation flow on node j for each pair (m, s) and for all node j of V. Therefore, if driver m enters node j by schedule s, then he leaves node j by the same schedule. Since node j corresponds to a crew duty type on a day h this is equivalent to (AC3). Moreover, as there are only arcs linking pairs of nodes corresponding to crew duties which may be performed on consecutive days by the same driver, constraints (AC4) and (AC5) are also satisfied.As t =1 and t = 4 refers to short crew duty types, constraints (MF4) can be rewritten by separating the first term per days, thus obtaining the inequalities∑s∈S∑j∈V1∪V4∑h∈H∑i∈V0+:(i,j)∈Ahsxijms−ηT≤0(∀m∈M), which are equivalent to∑h∈H∑j∈V1∪V4∑s∈S∑i∈V0+:(i,j)∈Ahsxijms−ηT≤0(∀m∈M), and using (5.2) these inequalities may be expressed as∑h∈H∑t=1,4ythm−ηT≤0(∀m∈M), which is (AC6). By the same reasoning the correspondence between (MF5) and (AC7) may be established for t = 3 and t = 6, the long crew duty types. The above equivalences prove that if x satisfies (MF4) and (MF5) then (w, y) satisfies (AC6) and (AC7).Due to (5.1)ZMF¯(x)=∑m∈M∑s∈S∑j∈Vl1:(0,j)∈Asrmx0jms+λTηT+λOηO=∑m∈Mrm(∑s∈S∑j∈V1:(0,j)∈Asx0jms)+λTηT+λOηO=∑m∈M∑s∈Srmwms+λTηT+λOηO=ZAC¯(w,y). Therefore,ZAC¯*≤ZMF¯*.In addition, there is at least one feasible solution ofAC¯that does not correspond to a feasible solution ofMF¯. In fact, the optimal value of modelAC¯for some instances (see instances L1, L2, L6 and P1 in Section 7.2) is lower than the corresponding optimal value of modelMF¯.□Proposition 4ModelMF¯is equivalent to modelMFA¯, thereforeZMF¯*=ZMFA¯*.Let us introduceMFA¯, which is obtained by replacing in the definition of MFA constraints (MFA9) and (MFA10), respectively by:fijs≥0∀s∈S,(i,j)∈As(MFA9¯)0≤zims≤1∀m∈M,s∈S,i∈V0+∪VH+.MFA10¯Given(x,η)=(xijms,ηT,ηO), a feasible solution ofMF¯, we are going to prove that a feasible solution ofMFA¯exists,(z,f,η)=(zims,fijs,ηT,ηO), such thatZMF¯(x,η)=ZMFA¯(z,f,η). Naturally, this impliesZMFA¯*≤ZMF¯*.Let ηTand ηOtake the same values in (x, η) and in (z, f, η), and consider(5.3)zims=∑j∈VH+:(i,j)∈Asxijms∀m∈M,s∈S,i∈V0+;andzn+|H|+1ms=z0ms(5.4)fijs=∑mxijms∀s∈S,i∈V0+,j∈VH+.To prove that (z, f, η) is a feasible solution ofMFA¯we must prove that it satisfies constraints (MFA1) to (MFA8), (MFA9¯), (MFA10¯) and (MFA11).The proof respecting (MFA11) follows immediately, because the variables ηTand ηOtake the same values in both solutions and (MF7) holds for (x, η).By (5.4) and since the solution component x satisfies (MF2) then f satisfies (MFA1).Summing constraints (MF3) in m we obtain(5.5)∑i∈V0+:(i,j)∈As∑m∈Mxijms−∑i∈VH+:(j,i)∈As∑m∈Mxjims=0∀s∈S,j∈Vand considering (5.4) we obtain∑i∈V0+:(i,j)∈Asfijs−∑i∈VH+:(j,i)∈Asfjis=0(∀s∈S,j∈V), therefore constraints (MFA2) are satisfied by f.By (5.3) and (5.4) we have, respectively,∑mzjms=∑m∑i∈VH+:(j,i)∈Asxjims(∀s∈S,j∈V)and∑i∈V0+:(i,j)∈Asfijs=∑i∈V0+:(i,j)∈As∑mxijms(∀s∈S,j∈V). The two expressions in the right hand sides of the above equations are equal for each s and j, by (MF3). Therefore,∑i∈V0+:(i,j)∈Asfijs−∑mzjms=0(∀s∈S,j∈V), and it is proved that (z, f, η) satisfies (MFA3).By (5.3),∑mz0ms=∑m∑j∈Vl1:(0,j)∈Asx0jms(∀s∈S)holds. However,∑m∑j∈Vl1:(0,j)∈Asx0jms=∑j∈Vl1:(0,j)∈As∑mx0jms=∑j∈Vl1:(0,j)∈Asf0js(∀s∈S), being the last a valid equality by (5.4). It is proved that (z, f, η) satisfies (MFA3′).For eachm∈M,s∈S,i∈V0+and j: (i, j) ∈ As, the following inequality holdsxijms≤∑k∈V0+:(k,j)∈Asxkjms. Taking into account (MF3) and (5.3) the inequality may be rewritten asxijms≤zjms. Summing inj∈VH+:(i,j)∈Asthis inequality and applying (5.3) we obtain (MFA4).By aggregating constraints (MF3) for the duty types of each day and taking into account (5.3), one proves that z satisfies (MFA5).If x satisfies MF1, then z defined by (5.3) in the case of i= 0 satisfies (MFA6).Considering relations (5.3) and (5.5) one has∑s∈S∑j∈Tzjms−ηT=∑s∈S∑j∈T∑i∈VH+:(j,i)∈Asxjims−ηT=∑s∈S∑j∈T∑i∈V0+:(i,j)∈Asxijms−ηT. Since (x, η) satisfies (MF4) then∑s∈S∑j∈Tzjms−ηT≤0(∀m∈M)), that is, (z, f, η) satisfies (MFA7). A similar proof may be presented for (MFA8).By the definition of f in (5.4) and the fact that x satisfies (MF6¯), it follows immediately thatfijs≥0(∀s∈S,(i,j)∈As), that is, (MFA9¯) is satisfied by the incumbent solution.By (5.3) it immediately follows thatzims≥0(∀m∈M,s∈S,i∈V0+∪VH+). By (MFA6¯), already proved, we may infer thatz0ms≤1. By (MFA5), for h = 0,z0ms−∑i∈Vl1zims=0(∀m∈M,s∈S), that is, for all nodes i of day 1, one haszims≤1(∀m∈M,s∈S). But, also by (MFA5), the sum of work assignments of driver m in all the crew duty types in schedule s on a specific day is equal to the respective sum on the following day. Therefore the sum of each driver work assignments is always less than or equal to one on every day, from day 2 to the last day of the rostering horizon, thus proving thatzims≤1(∀m∈M,s∈S,i∈V0+), and aszn+|H|+1ms=z0ms, by (5.3) one haszn+|H|+1ms≤1. It is proved that (z, f, η) satisfies (MFA10¯).Now, we will see that the values given by (z, f, η) and (x, η) for the respective objective functions,ZMFA¯andZMF¯, are equal. By taking (5.3),ZMFA¯(z,f,η)=∑m∈M∑s∈Srmz0ms+λTηT+λOηO=∑m∈M∑s∈S∑j∈Vl1:(0,j)∈Asrmx0jms+λTηT+λOηO=ZMF¯(x,η).Conversely, given(z,f,η)=(zims,fijs,ηT,ηO), a feasible solution ofMFA¯, we prove that a feasible solution(x,η)=(xijms,ηT,ηO)ofMF¯exists such thatZMFA¯(z,f,η)=ZMF¯(x,η). This implies thatZMFA¯*≥ZMF*¯.First, let us build a vector x that satisfies constraints (MF1), (MF2), (MF3) and (MF6¯) ofMF¯by solving |M| independent feasibility flow problems, one for each schedule, in the network described below. For each driver m working on schedule s, we consider the sub-network induced by nodesi∈V0+∪VH+suchthatzims>0and the corresponding arcs from As. Node 0 will be the source and node n+|H| +1 the sink. Let us denote by Vmsthe set of all nodes and by Amsthe set of all arcs in the network thus defined. Consider variable vijthat represents the flow through arc (i, j) ∈ Ams, and the following feasibility flow problem with node capacities (FFms):(FF1ms)∑j:(i,j)∈Amsvij−∑j:(j,i)∈Amsvji={z0msi=00∀i∈Vms∖{0,n+|H|+1}−zn+|H|+1msi=n+|H|+1(FF2ms)∑j:(i,j)∈Amsvij=zims∀i∈Vms∖{0,n+|H|+1}(FF3ms)vij≥0∀(i,j)∈Ams.There is at least one feasible solution of  FFms. In fact, for each s and each m, Amsincludes the subset of arcs (i, j) corresponding tofijs>0in the feasible solution ofMFA¯. From a feasible solution of  FFms,  v*, a sub-vector xmsmay be built fromxijms=vij*,∀(i,j)∈Ams.From (FF1ms) and (FF2ms) one may directly relate xmswith zmsaccording to(5.6)∑j∈VH+:(i,j)∈Asxijms=zims∀m∈M,s∈S,i∈V0+.Fig. 2 illustrates the relations between variables x ofMF¯and variables z from a solution ofMFA¯with two drivers, m and m′, both assigned to schedule s on the first days of the horizon.Let us prove that the solution thus constructed is feasible forMF¯. Constraints (MFA6) and (5.6) imply (MF1).Considering (MFA1) and summing constraints (MFA3) in s, one obtains∑s∈S∑i∈V0+:(i,j)∈Asfijs=∑s∈S∑m∈Mzjms=Cj,∀j∈{1,…,n}. Again, by (5.6) one concludes that x satisfies (MF2).From (FF1ms) one may conclude that, for each s and each m, xmssatisfies (MF3).Variables ηTand ηOofMF¯are set equal to the same values as inMFA¯solution. By (5.6)∑s∈S∑j∈Tzjms−ηT=∑s∈S∑j∈T∑i∈VH+:(j,i)∈Asxjims−ηTand this last expression is equal to∑s∈S∑j∈T∑i∈V0+:(i,j)∈Asxijms−ηTsince (MF3) is valid for x. Then, by (MFA7) it is proved that (x, η) satisfies (MF4). Similarly, using (MFA8) we prove that (x, η) satisfies (MF5).By (5.6) and (MFA10¯) one concludes that x satisfies (MF6¯).Let us see that the values of the objective functions are equal for (z, f, η) and (x, η). By (5.6) for i = 0, one has∑j∈Vl1:(0,j)∈Asx0jms=z0ms. Hence,ZMF¯(x,η)=∑m∈M∑s∈S∑j∈Vl1:(0,j)∈Asrmx0jms+λTηT+λOηO=∑m∈M∑s∈Srmz0ms+λTηT+λOηO=ZMFA¯(z,f,η).□Propositions 3 and 4 point to a better performance of a MILP solver based on the multi-commodity flow models as compared with AC due to the non-inferior quality of the respective linear relaxation lower bound. The proof of Proposition 4 shows that, in general, the number of feasible solutions ofMFA¯is less than the number of feasible solutions ofMF¯. This suggests an eventual better performance of a MILP solver based on model MFA.All mathematical models proposed in this study involve a large number of integer variables and a significant dual degenerescence. Consequently, the use of a generic MILP solver will consume a great amount of computing resources often stopping out of memory without finding any feasible solution. Therefore, heuristic methods are developed by taking into account the structure of the mathematical models and the potentialities of the MILP solver. MILP-based heuristics have been developed for difficult ILP or MILP problems as seen in Wolsey (1998).As suggested in Mesquita et al. (2013), to solve model AC, at the root node of the branch-and-bound algorithm, we analyze the linear relaxation solution and fix to 1 the value of decision variables which are most likely to take value 1 in the rostering integer optimal solution. Branching is performed over y variables, while fixing to 1 the values of variables such thatythm≥0.85. This fix-and-branch-and-bound heuristic will be further denoted by F&BB.Preliminary computational results showed that, for MF and MFA models, the majority of the variables attained values less than 0.5 in the optimal solution of the respective linear relaxation. Thus, a procedure similar to the one adopted for AC is no longer appropriate, as one may see in Appendix A, where F&BB designed for MF and MFA, as well as the respective results obtained from a set of instances are presented. Alternatively, by exploring the underlying multi-commodity flow structure, we propose a decompose-and-fix heuristic (D&F). The basic idea of this heuristic is to identify in a mathematical formulation a set of sub-problems to be solved sequentially.In general, the definition of the sub-problems is based on a hierarchic ordering of the decisions that are involved in the resolution of the original problem. At each level of the hierarchy, the decisions are taken assuming that the previous levels’ decisions have already been made. Consequently, decisions of one level will constrain decisions of the subsequent levels, and there is no guarantee of attaining a feasible solution to each sub-problem. However, as we will show below, one may devise a suitable choice of sub-problems for DRP whose resolution leads to a feasible solution, if one exists. In DRP we can define the following hierarchy of decisions, each one related to a step of the decompose-and-fix heuristic:-determine a set of active days-off schedules;assign drivers to the active days-off schedules;assign crew duty types per day to drivers.D&F will be first explained in detail for the MFA model and summarized in Fig. 3. Concerning MFA, the set of integer variables may be, naturally, partitioned into three subsets:f=(fijs),z0=(z0ms)andz=(zims). Variables f, z0 and z determine, respectively, the set of active days-off schedules that will cover all crew duties, the assignment of each driver to a specific days-off schedule and the sequence of crew duty types each driver will perform during the rostering horizon. Each one of these subsets of variables induces a different combinatorial structure associated with specific constraints included in MFA, defining the sub-problems MFAF, MFAZ0 and MFAR. D&F heuristic is based on the sequential resolution of these sub-problems, while fixing or bounding the value of some variables to incorporate previous decisions. In Step 1, to obtain a set of active days-off schedules, constraints (MFA3) to (MFA8) are relaxed and one solves the multi-commodity network flow problem MFAF defined by:(MFAF0)minimizeZMFAF=∑s∈S∑j:(0,j)∈Asf0jssubject to(MFA1)∑s∈S∑i∈V0+:(i,j)∈Asfijs=Cj∀j∈{1,…,n}(MFA2)∑i∈V0+:(i,j)∈Asfijs−∑i∈VH+:(j,i)∈Asfjis=0∀s∈S,j∈V(MFA9)fijs≥0andinteger∀s∈S,(i,j)∈As.Let us denote byZMFAF*, the optimal value of MFAF. The following lemma shows thatZMFAF*is the minimum number of drivers required.Lemma 1Inequality∑s∈S∑m∈Mz0ms≥ZMFAF*is valid for MFA.The optimal solution of MFAF, f *, is an integer flow that covers all crew duties. In f* each unit of a commodity flowing from the origin to the destination determines the use of a days-off schedule by a driver. Although MFAF has no longer variables z, a feasible solution to MFA may be built from f * by assigning each unit of flow to a driver. Hence,ZMFAF*represents the minimum number of drivers required.□If|M|<ZMFAF*then MFA has no feasible solution. In this case the algorithm indicates to the company the number of drivers,ZMFAF*−|M|, that should be added in order to build a roster. From now on, we assume that the number of drivers, |M|, is enough to build rosters.Let S* denote the set of days-off schedules determined by the flow in f*. In Step 2, starting from the solution obtained in Step 1, an optimization problem, MFAZ0, is solved to assign drivers to days-off schedules from S* so as to minimize salary costs:(MFAZ00)minimizeZMFAZ0=∑m∈M∑s∈Srmz0mssubject to(MFA3′′)∑mz0ms=∑j∈Vl1:(0,j)∈Asf0js*∀s∈S*(MFA6)∑s∈Sz0ms≤1∀m∈M(MFA10′)z0ms∈{0,1}∀m∈M,s∈S.This problem is solved by a greedy procedure that sorts drivers’ salaries –  rm(m ∈ M) – in ascending order,rm(1),rm(2),…,rm(|M|). TheZMFAF*drivers with costsrm(1),rm(2),…,rm(ZMFAF*)are assigned to the days-off schedules determined in Step 1. Let us consider drivers m(1), …,m(ZMFAF*)and the days-off schedules of S*. The greedy procedure randomly assigns driver m(i) to a schedule of S*, for i= 1,…, zMFAF*, and attainsz0*, the optimal solution of MFAZ0. Variables equal to one in this solution define the set M* of drivers assigned to work. Drivers’ preferences for specific days-off schedules in S* may be taken into account in this step.Lemma 2The optimal value of MFAZ0 is lower or equal to the optimal value of MFA.A feasible solution to MFA can be built from the optimal solution of MFAZ0. In f* each unit of flow defines a path from node 0 to node n + |H| + 1 that covers exactly one node in each day layer. Since the flow satisfies the capacity constraints on each node, one can build a feasible solution to MFA by assigning, at each node, exactly one crew duty to each unit of flow. In addition the two variables ηT, ηOare set equal to the minimum value large enough to satisfy (MFA7) and (MFA8). Although feasible, this solution is unaware of workload balancing.Moreover, the objective function of MFA has two non-negative components, one representing salary costs and the other workload balancing. By solving MFAZ0 after MFAF, one can see that the optimal value of MFAZ0 is the minimum value for the first component of MFA objective function (salary costs component). Hence, one hasZMFAZ0*≤∑m∈M∑s∈Srmz0ms≤∑m∈M∑s∈Srmz0ms+λTηT+λOηO.□Let us denote by MFAR the problem obtained by fixing to 1 thez0msvariables of MFA with value 1 inz0*. In Step 3, model MFAR is solved to assign crew duties to the drivers. Similarly to the F&BB heuristic, after solvingMFAR¯, the variables such thatzims≥0.85are fixed to 1. Note that, the optimal solution ofMFAR¯, already incorporates information on how to distribute the daily crew duties among the drivers in a balanced way. Then, a branch-and-bound is executed, within a pre-defined time limit. To ensure roster balance, an additional set of drivers from M\M*, as well as additional days-off schedules from S\S* may be selected at Step 3.Lemma 3The decompose-and-fix algorithm leads to a feasible solution of MFA, if one exists.ConsideringZMFAF*≤|M|then a feasible solution to MFA exists. Fixing to 1 variables such thatzims≥0.85inMFAR¯leads to a feasible solution of MFA, since constraints (MFA4), (MFA5) and (MFA6) ensure that in each layer a driver is assigned to at most one node.□Concerning model MF, taking into account (5.4), Step 1 and Step 2 of the D&F heuristic are performed in a similar way as D&F for MFA. Concerning Step 3, a branch-and-bound algorithm is applied to the resulting restricted multi-commodity network flow model, MFR, within a pre-defined time limit. At the root node, variablesxijmssuch thatxijms≥0.85, in the optimal solution ofMFR¯, are fixed to one.An alternative decompose-and-fix heuristic, denoted by D&Fa, is described in Appendix. Although Step 1 is equal in D&F and D&Fa, some features of the D&F Step 3 are moved to Step 2 of D&Fa. In this heuristic, based on the optimal solution of the multi-commodity network flow sub-problem MFAF, variable fixing is only performed at Step 2 to assign drivers as well as crew duty types to schedules.The three different models were tested with instances derived from real world data and from benchmark data. More precisely, we have compared the LP relaxation solutions and also the feasible solutions obtained by the heuristics. All the algorithms were coded in C using the CPLEX Optimization Studio Academic Research 12.5 library and ran on an Intel® Core™ i7-2620M CPU 2.70 gigahertz RAM 8.00 gigahertz. The time limit for the branch-and-bound was set to 10,800 seconds.Although the main objective of this section is to address the specific situation that arises at two bus transit companies in Portugal it is also important to assess the effectiveness and robustness of the proposed models and heuristics under different conditions for benchmark data. The real instances were derived from urban bus services operating in the city of Lisboa, instances L1 to L10, and in the city of Porto, instances P1 to P6, and were designed to cover the service of buses with two types of demand for timetabled trips, one for Monday through Friday and the other for weekend days. As for benchmark data instances, we considered the set of 10 instances trips200Axx.txt, involving four depots and available at http://people.few.eur.nl/huisman/instances.html for the multiple-depot vehicle and crew scheduling problem. Each file tripsxxxAxx.txt gives the daily timetabled trips for Monday through Friday, being the weekend trips randomly selected, with probability 0.4, from the respective non-weekend daily trip set. For both real and benchmark data instances, the set of crew duties is obtained by solving an integrated vehicle and crew scheduling problem. For more details see Mesquita and Paias (2008) and Mesquita et al. (2013).For all instances tested the roster time horizon is 49 days and the days-off pattern adopted is the cyclic one described in Table 1 which is in use at the two Portuguese companies for a group of drivers.For each instance the set of crew duties L is partitioned in two sets of two different crew duty types: the set of early duties, those that start before 3:30 p.m. and the set of late duties that start after 3:30 p.m. The set of crew duties is also partitioned according to their maximum spread: short crew duties have a maximum spread of 5 hours and do not include a lunch break, normal duties have a spread that ranges from 5 to 9 hours and long duties, from 9 to 10.75 hours, thus including overtime. In Table 2, we characterize the test instances concerning the number of crew duties, the number of short, normal and long duties, as well as, the number of early and late duties.The rostering parameters used to balance the different components of the objective function were set to rm= 5,  λT= 0.5, λO= 1. Such choice of parameters is explained by the priority given by management to the goal of minimizing the number of drivers. Besides, minimizing the number of long duties is more relevant than minimizing the number of short duties due to overtime costs incurred by long duties. Note that, these instances are cyclic with respect to the days-off, have equal costs for all drivers and have more than one type of crew duties.In this section we compare, from a computational point of view, lower bounds given by LP relaxations and upper bounds obtained with the heuristics designed for the three mathematical models AC, MF and MFA.Tables 3–5report the bounds obtained and the corresponding CPU time. The first column gives the instance name and the second column defines the rows to display the results from each mathematical model. Columns 3 and 4 present, respectively, the optimal value of the LP relaxation of each model and the CPU time, in seconds, needed to obtain it. Columns 5 and 6 give the results of Step 1 of the decompose-and-fix algorithm. They show, respectively, the value of the optimal flow, which corresponds to the minimum number of drivers required to accomplish all daily crew duties (#drivers), and the CPU time, in seconds, spent in Step 1. Step 2 is related to the assignment of drivers to schedules. The time spent in this step is 0 seconds on average so it is not presented. Columns 7 and 8 display, respectively, the optimal value of the LP relaxation at the root node (v(sol)) and the CPU time spent to obtain it, in Step 3 of the decompose-and-fix algorithm. Columns 9–13 show the best feasible solution attained by the branch-and-bound: the value of the best feasible solution (UB), the number of drivers it includes (#drivers), the maximum number of short (deltaS) and long (deltaL) duties assigned to a driver and the CPU time consumed. The two last columns display the gap (gap = (UB − lb)/lb) and the total CPU time in seconds.For this test set, the lower bounds given by the LP relaxations of the three models are similar. The LP relaxation lower bound of MF or MFA (equal by Proposition 4) strictly outperforms the correspondent bound obtained from AC for four instances (L1, L2, L6 and P1). As to the CPU time to attain the lower bounds, on average, AC has the smallest value.Comparing the optimal values of the LP relaxation for the multi-commodity flow models (column 3) with v(sol) that corresponds to the LP relaxation of MFAR (column 7), we note that on average the absolute value of the difference between these bounds is 3.0 for L-instances, 4.5 for P-instances and 3.4 for H-instances, being the maximum difference 4.9 for L7, 5.3 for P2 and 5.7 for H4. To assess whether these differences are significant, we computed (v(sol) − lb)/lb and obtained, on average, 0.01, 0.02 and 0.01, respectively, for L-instances, P-instances and H-instances. Moreover, worst case values are 0.02, 0.04, 0.02 attained, respectively, by L2, P1, and H4. These small differences suggest that fixing some drivers to schedules, in Step 2, may not affect the quality of the upper bounds achieved in Step 3.The quality of the heuristic solutions may be evaluated by the gap in column 14. Although the gap values are very similar, analyzing the upper bounds we may conclude that for the L-instances, D&F for MF and for MFA attained better results than F&BB in 50 percent of the instances, and the same bound in the remaining 50 percent. For the P-instances the results obtained from the three models were similar, except for P5 and P6, where D&F for MFA gave the worst upper bound. In the case of the H-instances, F&BB performed worse for three instances (H2, H3 and H6) and for the remaining seven the results were similar to those of D&F.From the point of view of the companies it is important to analyze the number of drivers required and the type of duties assigned to each driver. For all instances, the number of available drivers, |M|, was enough to cover the demand. Except for one test instance (P5 in the case of MFA), the number of drivers given by the best solution of the heuristics is equal to the minimum number of drivers required. Concerning the long duties, D&F performed, on average, better than or equal to F&BB. For short duties D&F for MFA performed worse in only one instance (P6).Additionally, given the number of drivers assigned to work, trivial lower bounds can be computed respectively for the maximum number of short (long) duties assigned to a driver. A lower bound for the ηT(ηO) value may be calculated by dividing the total number of short (long) duties, presented in Table 2, by the number of drivers assigned to work and rounding up. Comparing ηT(ηO) values obtained by the D&F heuristic with the corresponding trivial lower bounds, one may conclude that the heuristic attained these lower bounds for all instances for the MF model and for all except one (P6) for the MFA model.As to the CPU time consumed by the branch-and-bound, F&BB attained the time limit for 21 out of the 26 instances tested, and the shortest time in three of the remaining five. D&F stopped in the time limit for one instance (P6). Moreover D&F for MFA spent the shortest time for 22 out of the 26 instances, while D&F for MF spent the shortest time for one out of the 26.The quality of LP relaxation bounds apparently does not influence the CPU time of the branch-and-bound neither the quality of the final feasible solutions obtained. In fact, for the reported four cases where the LP relaxation lower bound of MF or MFA strictly outperforms the correspondent bound obtained from AC, the final feasible solutions were the same except for one case. Additionally, for instance L8 the lower bounds given by LP relaxation of AC, MF and MFA are equal, as for the upper bounds, they are equal but the CPU time is much higher in the case of AC. In general, for these test instances, the lower and upper bounds obtained from AC, MF and MFA models are very similar. However, concerning CPU time, by exploiting the underlying network structure of MF and MFA, D&F highly outperformed F&BB. In particular, D&F for MFA showed the best performance, concerning the CPU time and the lower bounds, and a performance slightly worse than D&F for MF regarding upper bounds.

@&#CONCLUSIONS@&#
This paper proposes two multi-commodity flow models, MF and MFA, for the driver rostering problem with days-off patterns and without cyclic crew duty assignments. Theoretical properties of the problem and of the models have been studied. The underlying network structure of MF and MFA suggested a decompose-and-fix heuristic to solve the rostering problem. The basic idea of this heuristic is to identify in a mathematical formulation a set of sub-problems to be solved according to a hierarchic ordering of the decisions that are involved in the resolution of the original problem.A computational experiment was performed with instances built from data of bus transit companies and from benchmark data. The computational results showed the good performance of the heuristic, regarding both the quality of the upper bounds and the computing time needed to obtain them.The current research may provide a useful tool to help planning departments of bus transit companies when preparing rostering for drivers. Although the experiments were carried out considering the specific rules of the bus companies, the models are general and suitable for different practical situations and different cyclic or non-cyclic patterns of days-off schedules.Moreover, the decompose-and-fix approach can be included in an integrated crew-rostering or vehicle-crew-rostering system or else be adapted to solve rostering problems arising in operational contexts other than public transit companies.