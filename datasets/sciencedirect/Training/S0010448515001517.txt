@&#MAIN-TITLE@&#
A decade of progress on anisotropic mesh adaptation for computational fluid dynamics

@&#HIGHLIGHTS@&#
Steady and unsteady error estimates.Adaptive mesh adaptation techniques.Adjoint-based error estimates for Euler equations.Remaining potential challenges for mesh generation.

@&#KEYPHRASES@&#
Metric,Anisotropic mesh adaptation,Continuous mesh framework,Computational fluid dynamic,Inviscid flows,

@&#ABSTRACT@&#
In the context of scientific computing, the mesh is used as a discrete support for the considered numerical methods. As a consequence, the mesh greatly impacts the efficiency, the stability and the accuracy of numerical methods. The goal of anisotropic mesh adaptation is to generate a mesh which fits the application and the numerical scheme in order to achieve the best possible solution. It is thus an active field of research which is progressing continuously. This review article proposes a synthesis of the research activity of the INRIA Gamma3 team in the field of anisotropic mesh adaptation applied to inviscid flows in computational fluid dynamics since 2000. It shows the evolution of the theoretical and numerical results during this period. Finally, challenges for the next decade are discussed.

@&#INTRODUCTION@&#
In the field of computational fluid dynamics (CFD), being able to predict numerically all the features of complex flows around or inside complex geometries remains an unachieved goal. However, such an ability would bring opportunities in a better understanding of complex physical phenomena such as turbulence, vorticity, cavitation, etc. From a rational point of view, a lot of engineering, fundamental, and societal problems could then become completely tractable. Indeed, applications range from aerodynamics, aeroacoustics, bio-engineering, and structure design (dam, turbine, oil platform) to citizen safety with blast mitigations. Consequently, numerical simulation, which is now mature, has become an integral part of the design process in science and engineering. The below computational pipeline emphasizes the central role of meshing in scientific computing:CAD⟶MESH⟶SOLVER⟶VISUALIZATION/ANALYSIS  .A simple observation of this chart shows:no mesh=no simulation. This is why during the late 80’s and the 90’s a considerable amount of effort was devoted to automatic mesh generation. The state-of-the-art of all the meshing technologies is wide  [1], but at present, the main approaches for generality and ease of use in CFD are: multiblock grids  [2], adaptive Cartesian grids  [3] and unstructured mono-element meshes  [4–9]. This first issue is clear, but a second one is more malicious: a “bad” mesh implies a wrong or inaccurate solution. Let us develop this critical issue in scientific computing.Nowadays, numerical simulations tend to address ever increasing geometrical and physical complexities. The accuracy of geometric models keeps on increasing: if a 10 cm accuracy in the 80’s for a business jet was the standard, 1 mm for the geometry and 1 μm in the boundary layer is now commonplace  [10,11]. As shown in Fig. 1, the considered geometries become more and more complex with a lot of tiny details impacting the flows. For instance, for a military aircraft, all major components of the geometry are modeled such as the empennage, rails, missiles, wings with their leading edge expansions, engine inlet including boundary layer vents, pylons, etc. To illustrate this point, ONERA (the French aerospace lab) flow solver elsA historically used block structured hexahedral meshes, and has recently moved to hybrid meshes to be able to handle tiny details in complex geometries  [12]. The mesh must indeed be adapted to the geometry.The other major difficulty arises from the underlying non-linear equations governing the physics, for instance, the Navier–Stokes equations. When the difficulty of the meshing process is overcome, the great complexity of the physics often requires tailored meshes for which numerical results can be certified   [12,13]. Such meshes should guarantee the full potential of numerical schemes. However, non-automatic generation of application-fitted meshes leads to time-consuming human intervention. Besides, huge meshes are needed to rely on the numerical solution. In both cases, the CPU time required to run the simulation is prohibitive. Another problem is the certification of industrial simulations. It necessitates at least to perform convergence studies, which require computations on several meshes of different accuracies. Hence, certifying a computation becomes very expensive. Indeed, starting from a 3D mesh of average sizehhavingNvertices, a new mesh with8Nvertices is obtained when the mesh sizehis divided by a factor 2. The flow solver time step on this new mesh is also divided by 2 as it is proportional toh. Therefore, the CPU time to run the simulation on the new mesh is at least multiplied by 16. If, the mesh size is again divided by two, then the CPU time will be multiplied by a factor 256 as compared to the initial one. If the first simulation has run during 1 day, then it will take almost 9 months to get the result of the last one. High performance computing is a possible answer but, we cannot scale indefinitely. Complementary approaches are needed to reduce the complexity of numerical simulations. Mesh adaptation is certainly one of the most powerful tools for this.Why anisotropic mesh adaptation in CFD? The observation of flows patterns and the analyze of their characteristics provides a first answer to this question, see Fig. 2. In CFD, we notice that physical phenomena of interest (boundary layers, shock waves, contact discontinuities, wake, vortices, etc.) are generally concentrated in small regions of the computational domain. Therefore, uniform meshes are not optimal in terms of size. These phenomena are anisotropic by nature, hence uniform meshes are not optimal in terms of direction. Thus, it seems natural to take into account the physical phenomena properties inside the mesh in order to improve their representation.Mathematically speaking, mesh adaptation aims at generating the optimal mesh to control the accuracy of the numerical solution. Optimal signifies that the best possible accuracy is achieved for a given mesh size, or equivalently, a mesh of minimal size is generated to reach a given accuracy. Thus, it enables substantial gains in CPU time, memory requirement, and storage space. The visualization of the results is also facilitated. Furthermore, error estimates have the capability to detect physical phenomena and capture their behavior. Thus, meshes are automatically adapted in critical regions without any a priori knowledge of the problem.In this paper, we will show that mesh adaptation is about more than just improving CPU time. Mesh adaptation enhances flow solver numerical methods because meshes are well suited to the physics. It also enables that ability to certify the quality of the mesh used to compute the desired solution, providing more confidence in the numerical result.The idea of adapting a mesh is very old. A rather large number of papers have been published dealing with mesh adaptation for numerical simulations. In most of these works, the adaptation is isotropic and done by splitting elements based on predefined patterns. The most powerful idea of anisotropic mesh adaptation emerged later at the end of the 80’s thanks to substantial research on error estimates and mesh generation.In 1987, Peraire et al. proposed a first attempt in 2D by providing error measures involving directions  [14]. They pointed out the directional property of the interpolation error and the idea to generate elements with aspect ratios. They considered a local mapping procedure to generate elongated elements. They coupled this with an advancing front technique to generate slightly anisotropic meshes, i.e., a 1:5 ratio.Similar approaches have been considered by Löhner  [15], Selmin and Formaggia  [16]. The first attempts in 3D were proposed in the early 90’s by Löhner  [15] and Peraire et al.  [17], but numerical results were almost isotropic and the mesh anisotropy was not clearly visible. In 1994, Zienkiewicz and Wu  [18] gave a qualified status on the subject. Despite some great success with this new approach, they emphasized that: “Unfortunately the amount of elongation which can be used in a typical mesh generation by such mapping is small…”.Almost at the same time on the meshing side, Mavriplis proposed to generate stretched elements with a Delaunay approach in 2D in order to obtain high-aspect ratio triangles in boundary layers and wake regions required by aeronautic numerical simulations  [19]. In this work, the Delaunay triangulation is performed in a locally stretched space: the idea of the metric has almost emerged. The year after, George, Hecht, and Vallet  [20] introduced the use of metrics in a 2D Delaunay mesh generator to handle anisotropic adapted meshes. This idea generalized all the previous works. They exhibited that the absolute value of the Hessian is a metric. The edge lengths and element volumes inside the mesh generator were computed in the Riemannian metric space defined by the given metric field. They proposed to generate a unit uniform mesh in the Riemannian metric space, this mesh being adapted and anisotropic in the physical space.The fruitful idea of a metric was widely exploited for 2D anisotropic mesh adaptation in the 90’s and even more today. For instance, among many others, see the works of  [21–25]. In 1997, Baker gave a state-of-the-art  [26] and wrote: “Mesh generation in three dimensions is difficult enough task in the absence of mesh adaptation and it is only recently that satisfactory three-dimensional mesh generators have become available. […]. Mesh alteration in three dimensions is therefore a rather perilous procedure that should be under taken with care”. Indeed, 3D meshing is much more complicated as new pathologies occur. Moreover, the bare existence of such 3D meshes is not guaranteed. Doing 3D anisotropic mesh adaptation is even more complicated.Meshing blocking points have been partly solved by proposing a local remeshing approach to adapt the mesh. These approaches start from an existing mesh and modify the mesh to adapt. Therefore, there is no more existence problem. At the beginning of the 2000’s, the first results with truly 3D anisotropic mesh adaptation for applications were published  [27–33].In the meantime, new more accurate anisotropic error estimates had been proposed: a posteriori estimates  [34–36], a priori estimates  [37–40], and goal-oriented estimates for functional outputs  [41–44].Nowadays, this technology can be considered mature, and impressive results can be obtained. For instance in  [45], a mean anisotropic ratio of 400 and a mean anisotropic quotient of 50,000 are reported for adapted meshes containing more than 50 million tetrahedra.Thanks to its generality, mesh adaptation has been applied to various fields of investigation and also used with a large panel of numerical methods. In all cases, it has brought large improvements in terms of accuracy and CPU performances. Just to give some 3D examples, it has been applied successfully to the sonic boom simulation  [45], multi-fluid flows  [46,47], blast problems  [48], Stefan problems  [30], and metal forming processes  [49]. Numerical schemes and mesh adaptation have been coupled with Finite Volume  [45], Finite Element  [47], Stabilized Finite Element  [49], and Discontinuous Finite Element  [50] methods, to name a few.Nowadays, there are a lot of meshing softwares based on the metric concept. Let us cite Bamg   [51] and BL2D   [52] in 2D, Yams   [53] for discrete surface mesh adaptation and EPIC   [54], Feflo.a   [55], Forge3d   [4], Fun3d   [42], Gamanic3d   [56], MAdLib   [57], MeshAdap   [32], Mmg3d   [58], Mom3d   [27], Tango   [29], and Libadaptivity   [28] in 3D. It is worth mentioning that all these softwares have arisen from different mesh generation methods. The method in  [56,51] is based on a global constrained Delaunay kernel. In  [52], the Delaunay method and the frontal approaches are coupled. [53,55,57,58] are based on local mesh modifications, and [4] is based on the minimal volume principle.Many groups were able to obtain highly anisotropic adapted meshes of high quality for analytical functions. However, when the solutionubecomes a numerical solutionuhprovided by a flow solver, additional problems arise. We list below all the problems we identified for CFD at the beginning of 2000.Loss of anisotropy when turning to numerical solutions. To illustrate this issue, we consider the standard metric-based error estimate (see Relation (8)), which is a control of the interpolation error inL∞norm, for the accurate capturing of shock-waves inside a scramjet. This is done by considering a recovered Hessian of one variable of the flow field (Mach, pressure,…). The final result from  [22] is shown in Fig. 3. If the final adapted mesh seems perfectly anisotropic (left), a closer view around a shock reveals a complete loss of the anisotropy (right) for this non-regular solution. In fact, the prescribed minimal size is reached in almost every singularity, leading to an isotropic mesh refinement. This problem arises due to several causes:•anL∞norm error estimate has been used. Indeed, let us consider the Heaviside function with aδ>0step:u(x)=δifx>0andu(x)=0ifx≤0, on the segment[−1,1]. Given a uniform mesh of this domain with size parameterh, then we easily demonstrate that the interpolation error inLpnorm converges at orderO(h1p). Therefore, the spatial convergence order isO(h1p). Whenptends to infinity, the expected convergence order isO(1). In other words, theL∞norm will never converge in presence of discontinuities. The algorithm does not diverge due to the prescription of a minimal size. Thus, anL∞error estimate is not suitable for flows with discontinuities. Consequently,Lpstrategies become of main interest in the case of discontinuous solutionswe have no guarantee that the recovery techniques used to compute the Hessians provide a smooth metric field, even more for a non-regular flow field. Then, it becomes difficult for the adaptive mesher to work in this irregular metric space which diminishes the resulting anisotropy of the mesha non-oscillatory flow solver is required on anisotropic adapted meshes. If the numerical methods present oscillations in shocks (no TVD property), then variations are captured in the direction parallel to the shock wave, which leads to a drastic reduction of the mesh anisotropy. The solver stabilization must therefore be efficient on anisotropic meshes.Capturing all scales of the flow field. A second problem is that a control of the interpolation error inL∞does not capture the small-scale features of the flow. Several modifications of theL∞interpolation error estimate have been considered  [22,59,60] to overcome this issue (see Relation (9)). However, such local normalizations are only slightly more sensitive and the control of the interpolation error remains inL∞norm.Solution accuracy spoiled by interpolations. Solution interpolation is also a key stage in the context of mesh adaptation. Indeed, it links the mesh generation and the numerical flow solver allowing the simulation to be restarted from the previous state. This recurrent stage in adaptive simulations is crucial for time-dependent problems (at least for problems with advection) as the errors introduced by this procedure accumulate throughout the computations. The impact of such errors on the solution accuracy was pointed out with standard linear interpolation. Consequently, interpolation schemes taking into account the properties of the modeled flows need to be found.Adaptive meshers robustness. When a global strategy is employed, the problem of existence of the mesh has to be solved at each remeshing phase. If this procedure fails, then the whole adaptive loop stops, leaving the user without any solution. Knowing that this issue is even more complex when adapted anisotropic surface meshes are considered, different remeshing strategies have to be considered.Some conclusions. These issues illustrate that each step of the mesh adaptation loop must be up-to-date to avoid failure and to achieve the best efficiency. None of these stages can be neglected. If one stage of the adaptation loop fails then all adaptive processes collapse.This review paper is organized as follows. We first succinctly recall the metric-based mesh generation in Section  2, then Section  3 gives the theoretical framework of anisotropic mesh adaptation which is based on the continuous mesh concept. Section  4describes the application of anisotropic mesh adaptation to steady inviscid flow computations in Computational Fluid Dynamics (CFD), and Section  5, its extension to time-dependent problems. We conclude this article with some remaining challenges for the next decade in Section  6.The basics of metric-based mesh adaptation such as metric notion, Riemannian metric space, computation of geometric quantities in metric space, and operations on metrics can be found in  [61–63]. Here, we just give an overview of the metric-based mesh generation.To generate anisotropic meshes, one must be able to prescribe at each point of the domain privileged sizes and orientations for the elements. The use of Riemannian metric spaces is an elegant and efficient way to achieve this goal. The main idea of metric-based mesh adaptation, initially introduced in  [20], is to generate a unit mesh in a prescribed Riemannian metric space.A tetrahedronK, defined by its list of edges(ei)i=1..6, is unit with respect to a metric tensorMif the length of all its edges is unit in metricM:(1)∀i=1,…,6,ℓM(ei)=1withℓM(ei)=teiMei.If all edges ofKare of unit length, then its volume|K|MinMis constant equal to:(2)|K|M=212and|K|=212(det(M))−12,where|K|is its Euclidean volume.The notion of unit mesh is far more complicated than the notion of unit element as the existence of a mesh composed only of unit regular simplices with respect to a given Riemannian metric space is not guaranteed. Therefore, the notion of unit mesh has to be relaxed. A discrete meshHof a domainΩ⊂Rnis a unit mesh with respect to Riemannian metric spaceM=(M(x))x∈Ωif all its elements are quasi-unit. The definition of unity for an element is relaxed by taking into account technical constraints imposed by mesh generators. For instance, to avoid cycling while analyzing edges lengths in a local remesher, a tetrahedronKdefined by its list of edges(ei)i=1…6is said to be quasi-unit if,∀i,ℓM(ei)∈[12,2]and it has a unit volume.Using the previous notions, the problem of mesh generation can be considerably simplified. Indeed, whatever the kind of desired mesh (uniform, adapted isotropic, adapted anisotropic), the mesh generator will always generate a unit mesh in the prescribed Riemannian metric space  [20]. Consequently, the generated mesh is uniform and isotropic in the Riemannian metric space while it is adapted and anisotropic in the Euclidean space. This is illustrated in Fig. 4. This idea has turned out to be a huge breakthrough in the generation of anisotropic adapted meshes.The previous section has emphasized the role of metric tensors and Riemannian metric spaces as useful mathematical tools to prescribe sizes and directions to adaptive meshers. Additionally, these differential geometry notions are more than just a simple tool for mesh generation. In this section, we go further in this analysis and we demonstrate that there is a comprehensive duality between meshes and Riemannian metric spaces. More precisely, Riemannian metric spaces can be seen as continuous models representing meshes. The fundamental consequence is that all kind of mathematical analysis can be performed using such spaces for which powerful mathematical tools are available. Even mathematical problems which could not even be considered on discrete meshes can be addressed in this new framework. More details can be found in  [64,62,65,39].

@&#CONCLUSIONS@&#
