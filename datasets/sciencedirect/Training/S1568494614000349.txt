@&#MAIN-TITLE@&#
Swarm intelligence based approach for sinkhole attack detection in wireless sensor networks

@&#HIGHLIGHTS@&#
An Ant Colony Optimization Attack Detection algorithm is proposed to identify the sinkhole attacks.A voting method is proposed to identify the intruder.An ABXES algorithm is proposed to distribute the keys to the alerted nodes.The alerted nodes use the keys to sign the suspect list to agree on the intruder.It is shown that the proposed method scales well in comparison to LIDeA architecture for sinkhole attack detection.

@&#KEYPHRASES@&#
Artificial intelligence,Ant Colony Optimization,Boolean expression minimization,Message authentication,

@&#ABSTRACT@&#
Swarm intelligence, a nature inspired computing applies an algorithm situated within the context of agent based models that mimics the behavior of ants to detect sinkhole attacks in wireless sensor networks. An Ant Colony Optimization Attack Detection (ACO-AD) algorithm is proposed to identify the sinkhole attacks based on the nodeids defined in the ruleset. The nodes generating an alert on identifying a sinkhole attack are grouped together. A voting method is proposed to identify the intruder. An Ant Colony Optimization Boolean Expression Evolver Sign Generation (ABXES) algorithm is proposed to distribute the keys to the alerted nodes in the group for signing the suspect list to agree on the intruder. It is shown that the proposed method identifies the anomalous connections without generating false positives and minimizes the storage in the sensor nodes in comparison to LIDeA architecture for sinkhole attack detection. Experimental results demonstrating the Ant Colony Optimization approach of detecting a sinkhole attack are presented.

@&#INTRODUCTION@&#
A swarm intelligent system is essentially a simple agent based model consisting of a huge number of simple agents interacting with each other and some environment. The field of artificial life produced a number of models based on “swarms” of simple agent rules capable of producing a higher-level identity, such as the insect colonies behavior. Swarm intelligence [17] is an algorithm that models the collective behavior of social insects. Here, an autonomous agent is a subsystem that interacts with its environment, which probably consists of other agents, but acts relatively independently from all other agents. The autonomous agent does not follow commands from a leader, or some global plan [3]. Natural examples of Swarm Intelligence include ant colonies, bird flocking, animal herding, bacterial growth, and fish schooling. Ant system is a swarm intelligence algorithm to solve optimization problems. Artificial ants [11] have some characteristics which do not find counterparts with real ants. They live in a discrete world and the moves consist of transitions from discrete state to discrete states. They have an internal state. This private state contains the memory of the ant agent's past action. They deposit a particular amount of pheromone, which is a function of the quality of the solution found. An artificial ant's timing in pheromone deposition is problem dependent and often does not reflect real ant's behavior.Swarm intelligence based techniques can be used in a number of applications such as controlling unmanned vehicles, controlling nanorobots within the body for the purpose of killing cancer tumors [7], telecommunication networks, mobile media [12], and intrusion detection. This paper focuses the application of swarm intelligence algorithm (Ant Colony Optimization) to detect sinkhole attacks in a wireless sensor networks.A Wireless Sensor Network (WSN) is a network of cheap and simple processing devices (sensor nodes) that are equipped with environmental sensors for temperature, humidity, etc. and can communicate with each other using a wireless radio device. They are composed by a large amount of tiny sensing devices which are very limited in energy, computation, and communication capabilities. The need for administration and utilization of wireless sensor nodes arise because of the unattended operation of a large number of sensor nodes in many applications. Encryption and authentication mechanisms provide reasonable defense only for remote-class outsider attacks [6]. This is because an insider is allowed to participate in the network and have complete access to any messages routed through the network and is free to modify, suppress, or eavesdrop on the contents. To overcome this, intrusion detection techniques are used to detect third party break in attempts.Wireless sensor networks are vulnerable to sinkhole attacks as they have special communication pattern. All sensor nodes send packets to the base station. Sensor nodes in the same area are affected even if only one compromised node is providing a high quality route to the base station. A sinkhole attack is a severe attack that prevents the base station from obtaining complete and correct sensing data, thus forming a serious threat to higher layer applications. Sinkhole attack is difficult to detect because simply using user authentication and signed routing information cannot prevent compromised nodes from generating signed routing packet with wrong information. To launch a sinkhole attack, an adversary lures nearly all traffic from a particular area through a compromised node. The adversary usually attracts network traffic by advertising itself as having the shortest path to the base station and can then tamper packets originated from any nodes in the area.Da Silva et al. [2] and Onat and Miri [10] have proposed two similar Intrusion Detection Systems (IDS), where certain monitoring nodes in the network are functioning as watchdogs for their neighbors, looking for intruders. They listen to messages in their radio range and store in a buffer specific message fields that might be useful to an IDS running within a sensor node, but the working of the system is not explained. In these architectures, there is no collaboration among the monitor nodes. Ioannis et al. [5] has concluded from both papers that the buffer size is an important factor that greatly affects the rate of false alarms. Ngai et al. [9] has proposed an approach on the intrusion detection of sinkhole attacks. However, this approach involves the base station in the detection process, resulting in a high communication cost for the protocol. Dallas et al. [1] proposed a hop count method to detect sinkhole attacks. This technique assumed static network topology and hop-count distribution exhibit lognormal distribution. These assumptions might not hold in a real world sensor networks deployment, and the technique might not perform well.To overcome the drawbacks of these approaches Ioannis et al. [5] has proposed LIDeA architecture for detecting sinkhole attack in a wireless sensor network. In their model, all sensor nodes are loaded with an IDS agent and they dynamically become activated around the attacking node and collaborate in order to isolate it from the network. The drawback of LIDeA architecture is that they do not discuss on how to detect sinkhole attacks, although rule patterns are described for defending against sinkhole attacks. Also the number of keys to be stored by each alerted node depends on the number of alerted nodes in the group thereby leading to an increase in storage.Though the rule matching method used to detect sinkhole attack is not specified in LIDeA architecture, the classical approaches proposed in literature for detecting attacks based on rule match is studied and found to have some drawbacks. Salameh et al. [16] proposed a Neural Network (NN) based approach for detecting attacks based on the rules in the ruleset. The network is trained using a backpropogation learning rule to identify attacks. The drawback of the scheme by applying it to detect attack is that it generates false positives. Mukkamala et al. [8] proposed a Support Vector Machine (SVM) based approach for detecting attacks based on rules in the ruleset. The drawback of this method is that it generates false positives.In this paper, a swarm intelligence based (Ant Colony Optimization) intrusion detection for sinkhole attacks in wireless sensors is proposed. The first phase of the work discusses about generating alerts by the sensor nodes in the wireless sensor network on detecting sinkhole attacks by a rule matching method using an Ant Colony Optimization based approach. An Ant Colony Optimization based Attack Detection (ACO-AD) algorithm is proposed to generate alerts by the sensor nodes of the wireless sensor networks based on the nodeids and the link quality defined in the ruleset. The second phase of the work discusses about identifying the intruder using a voting analysis method. Each alerted node transmits the suspect list of nodeids to the neighboring alerted nodes to agree on the intruder. The suspect list sent by the alerted node is signed using a key. An Ant Colony Optimization approach of obtaining minimized Boolean expression is used to generate minimum number of keys for signing the suspect list. An Ant Colony Optimization Boolean Expression Evolver Sign Generation (ABXES) algorithm is proposed to distribute the keys to the alerted nodes to sign the suspect list. The alerted nodes on receiving the suspect list count the occurrence of each nodeid in the suspect list. The nodeid having the highest count is identified as the intruder.The advantage of the proposed method using Ant Colony Optimization for intrusion detection is that the sensor nodes generate alerts based on the nodeids in the ruleset without generating false positives. Also each alerted sensor node stores log n keys for verifying the authenticity of the suspect list using an ACO approach. Thus the storage in each alerted sensor node is minimized when compared to the one-way hash chain function approach used in Light Weight Intrusion Detection Architecture (LIDeA) approach to detect the intruder node. The number of searches using ACO-AD algorithm for matching the nodeid in the sender field of the packet with the nodeids in the ruleset is less when compared to the existing rule matching approaches.Section 2 describes Ant Colony Optimization. Section 3 describes intrusion detection model architecture. Section 4 details Ant Colony Optimization based rule matching for sinkhole attack detection. Section 5 explains the voting method for identifying the intruder node. Section 6 explains a case study for intruder detection. Section 7 discusses the experimental results. Section 8 shows the comparison between ACO based methods of intrusion detection of sinkhole attack with the existing methods. Section 9 discusses the conclusion.A colony of ants denoting a set of computational concurrent and asynchronous agents moves through states of the problem corresponding to partial solutions of the problem to solve. They move by applying a stochastic local decision policy based on two parameters, called trails and attractiveness. By moving, each ant incrementally constructs a solution to the problem. When an ant completes a solution, or during the construction phase of the solution, the ant evaluates the solution and modifies the trail value on the components used in its solution. This pheromone information will direct the search of the future ants. Furthermore, an ACO algorithm includes two more mechanisms such as trail evaporation and, optionally, daemon actions. Trail evaporation decreases all trail values over time, in order to avoid unlimited accumulation of trails over some component. Daemon actions can be used to implement centralized actions which cannot be performed by single ants, such as the invocation of a local optimization procedure, or the update of global information to be used to decide whether to bias the search process from a non-local perspective [15].To detect a sinkhole attack, each sensor node has IDS. There are several modules which determine the functioning of IDS. These include Local Packet monitoring module, Local detection engine, Cooperative detection engine and Local Response module. The Local Packet monitoring module gathers audit data by listening to its neighboring nodes.Based on the rules defined to detect a sinkhole attack, the local detection engine of each sensor node has a ruleset which has the nodeids of its neighboring sensor nodes along with the link quality of each node detected using the local packet monitoring system by listening to the neighboring nodes transmission. The ruleset does not have the nodeid of the sensor node in which the IDS is present [4]. Table 1shows the nodeids in the ruleset. The nodeids are sorted in ascending order.Whenever a route update packet arrives at the sensor node, the sensor nodeid of the route update packet is compared with the nodeids in the ruleset stored in the local detection engine. An Ant Colony Optimization based approach is used to match the sensor nodeid in the route update packet with that of the nodeids stored in the ruleset. If a match does not occur with either of the sensor nodeid or the link quality, a sinkhole attack is detected and an alert is generated. A mismatch with the senor node denotes that the packet is from an adversary. A mismatch with the link quality implies a node impersonating another node. The node generating an alert has the suspect list containing the nodeid of the incoming packet. The sensor nodes generating alerts form a group and the intruder is identified in a cooperative fashion. Fig. 1shows a model of the Intrusion detection system for identifying an intruder causing a sinkhole attack.The cooperative detection engine groups the alerted nodes together and the alerted nodes communicate with each other to exchange the suspect lists of nodeids to agree on the identity of the intruder. An ABXE algorithm [13] of obtaining minimized Boolean expression is employed to distribute keys to the alerted nodes in the group to sign the suspect list. This technique would allow only the nodes in the group to receive the key and the nodes outside the group will not receive the key and hence will not sign the suspect list. Finally, when each alerted node has collected and authenticated the suspect list from all the other alerted nodes of the region, it applies a count operator, which counts the number of times a nodeid appears in the suspect list. The nodeid with the majority of the votes is declared as intruder and is given to the local response module to remove the sensor node from the network.Each sensor node in the network listen to the packets received and an ant system is used to identify sinkhole attacks based on the nodeid in the ruleset. Fig. 2shows a model of the ant system. An Ant Colony Optimization Attack Detection (ACO-AD) algorithm is a novel approach for detecting sinkhole attacks based on the nodeids in the ruleset. The ants in the system work together to obtain an optimal solution. The pheromones on the paths traveled by the ants serve as a means of communication between other ants. The ant agent has a positive and a negative position, which is initially zero and the maximum number of nodeids+1. The values in the positive and negative positions indicate the range of position in the ruleset to be searched. The ant agent deposits pheromone by choosing a random number between the values stored in the positive and negative position. The pheromone deposition of the ant agent represents the position of the nodeid in the ruleset to be compared with the nodeid in the sender field of the route update packet. For instance, the ant agent with the pheromone deposition {2} represents that the nodeid at the second position in the ruleset has to be chosen for comparison. The pheromone deposition and tabu-list help this novel ant system (AS) to obtain a solution.To find whether the nodeid in the sender field of the route update packet matches with the nodeid in the ruleset, the energy value of each ant agent is computed. The ant agent computes the energy value by comparing the nodeid in the ruleset denoted by the pheromone deposition with that of the nodeid in the sender field of the route update packet. If the nodeid in the route update packet matches with the compared nodeid, the energy value is zero and the process is stopped.If the nodeid in the route update packet is less than that of the compared nodeid denoted by the pheromone deposition, the energy value is −1 and the value in the negative position is replaced by the number denoting the pheromone deposition and a match for the nodeid in the route update packet with that of the nodeids stored in the ruleset is found using a binary search between the values stored in the positive and negative position. If the nodeid in the incoming packet is greater than that of the compared nodeid denoted by the pheromone deposition, the energy value is +1 and the value in the positive position is replaced by the number denoting the pheromone deposition and a match for the nodeid in the route update packet with that of the nodeids stored in the ruleset is found using a binary search between the values stored in the positive and negative position. If a match does not occur between the nodeid in the sender field of the route update packet and the nodeids in the ruleset, a sinkhole attack is detected and the sensor node generates an alert. If a match occurs, then the corresponding link quality is verified. If there is a change in the link quality of the sensor node sending the route update packet, a sinkhole attack is detected. Figs. 3 and 4show the pseudocode of Binary search and ACO-AD algorithm, respectively.Let Aibe the ant agent and letS(Nij)be the nodeid chosen for comparison in the jth position in the rule set of the ith ant agent i=1, 2, …, no. of ant agents, j=1, 2, …, total no. of nodeids in the rule set. Let S (P) denote the nodeid in the sender field of the route update packet. Energy Value is calculated using Eq. (1).(1)Energy(Ai)=+1,S(P)>S(Nij)Energy(Ai)=0,S(P)=S(Nij)Energy(Ai)=−1,S(P)<S(Nij)The sensor nodes generating an alert on detecting a sinkhole attack are grouped together to agree upon the intruder node. Each sensor node generating an alert has a suspect list containing the nodeid. Each alerted node in the group communicates with each other. The alerted nodes in a group exchange their suspect lists so that they agree on the identity of the intruder. To ensure that the suspect lists of the honest nodes do not get spoofed by the intermediate faulty nodes, the alerted nodes sign the suspect list. To sign the suspect lists, a key management center generates and distributes group key and minimum number of auxiliary keys to the alerted nodes in the group. An ACO based approach of obtaining a minimized Boolean expression is employed to distribute minimum number of auxiliary keys to the alerted nodes in the group. The advantage of this approach is that only the alerted nodes in the group will receive the group key and will be able to sign the suspect list. Each alerted node sign the suspect list with the group key and transmits to the other alerted nodes in the group. The alerted nodes on receiving the suspect list verifies the authenticity of the suspect list by recovering the group key and count the number of times each nodeid occurs in the suspect list. The nodeid with a maximum number of count is identified as the intruder. The detailed explanation of representation of alerted nodes, obtaining a minimized Boolean expression and identifying an intruder are explained in the following sections.The alerted nodes are represented in the form of a binary tree and are identified by a node identifier. The alerted nodes belonging to a group are represented as {N1, N2, N3, …, NN1}, where N1=2n, N1 denotes the group size and n denotes the length of the binary string representing the node identifier (NID) of each alerted node in the group. The NID of each alerted node N is written in binary form, as an n-bit ID NID (N)=KnKn−1Kn−2, …, K1, where Kiis either 0 or 1. The Boolean membership function m() of the NID is used to determine the existence of an alerted node in the group. An alerted node with NID (KnKn−1Kn−2, …, K1) is in the group if N (KnKn−1Kn−2, …, K1)=1 and is not in the group if N (KnKn−1Kn−2, …, K1)=0.Each alerted node in the group has a group key SK and a set of auxiliary keys k1k2, …, kn, where kitakes the value kiif Ki=1 and ki|if Ki=0. The auxiliary key pair corresponds to a bit in the NID. The keys possessed by the alerted nodes in the group of size 4 are shown in Fig. 5. The alerted nodes in the group are represented by square leaf nodes in the tree. The shaded node denotes the absence of the alerted node in the group. The auxiliary keys are represented by round nodes in the tree. An alerted node N2 (NID 01) possesses the auxiliary keys k2′, k1, in addition to the group key. The alerted nodes in a group are represented in the form of a truth table and a minimized Boolean expression is obtained to find the minimum number of keys to encrypt the group key distributed to the alerted nodes in the group. Table 2shows the truth table representation of alerted nodes in the group. From Table 2, it is seen that the alerted nodes N1, N2 and N3 exist in the group.The alerted nodes in a group are represented in the form of a truth table. The node identifier (NID) of the alerted node is the input and the output with a value of 1 represents the presence of an alerted node in the group and a value of 0 represents the absence of an alerted node in the group. The ABXE algorithm [13] is employed to distribute keys to the alerted nodes in the group to sign the suspect list. Termed Ant Colony Optimization Boolean Expression Evolver Sign Generation (ABXES) algorithm, the novel technique serves to efficiently obtain a minimized Boolean expression, given the membership function of the alerted nodes in a group denoted by a truth table.According to this algorithm, a group of ant agents work together to obtain an optimal solution. Each ant agent moves to reach the solution by depositing pheromone. Each Boolean expression expressed as an ant agent consists of terms at respective position denoting the pheromone deposition combined using an OR operator. Fig. 6illustrates the ant agent representing the terms at each position for a two variable case. For instance, in a two variable case, the ant agent with a pheromone deposition {1, 4} denotes the terms at positions 1 and 4. Thus the terms K1 and K2∣ at the corresponding positions for a two variable case is combined using an OR operator. Thus the pheromone deposition {1, 4} denotes the Boolean expression K1+K2∣.The maximum number of terms in the ant agent depends on the maximum group size. The number of terms grows exponentially with the input size. It is shown that for a function of n variables, the maximum number of terms for the ant agent is3n−1. In general, the number of terms for an n-variable expression and therefore the number of positions for an ant agent is given as(2)nC1⋅21+nC2⋅22+⋯+nCn⋅2n(3)=∑i=1n(nCi)⋅2i(4)=3n−1wherenC1is the number of combination of n objects taken i at a time.The terms are computed and stored as a static table. The ant agent retrieves the terms for the pheromone deposition at each position and computes the energy value.To find the attractiveness of the ant agent toward the solution, the energy value of the ant agent is found. The pheromone deposition of the ant agent denoting a Boolean expression is evaluated to find its energy value. Each variable in the Boolean expression is replaced with its corresponding input value from the truth table denoting the alerted nodes and the expression is evaluated. The energy value of an ant agent is given by the number of bits in the output vector obtained by evaluating the Boolean expression matching with that of the bits in the truth table output vector. Let Aibe the ant agent where the truth table output vector and the ant agent's output vectors are given in Eqs. (5) and (6). Energy value is calculated using Eq. (7).(5)T=(t1,t2,t3,t4),ti=0or1(6)Output(Ai)=(oi(1),oi(2),oi(3),oi(4)),oi(j)=0or1(jth bit of the output vector of ith ant agent, j=1, 2, 3, 4)(7)Energy(Ai)=count(tj=oi(j))where count (wk=zk) is a function that counts the number of instances where wkand zkare equal. The pheromone deposition of an ant agent having the energy value equal to the maximum group size corresponds to the minimized Boolean expression.Each ant agent has a tabu-list denoting its memory to store the pheromone deposition and its energy value. If the energy value of the ant agent is not equal to the maximum group size, the solution is not obtained and the ant agent moves to the next trail. The pheromone deposition evaporates when the ant agent moves to the next trail and the ant agent updates its pheromone deposition by changing the terms. The ant agent compares the energy value of the current trail with that of the energy value of its previous trail and selects the pheromone deposition of the trail with a greater energy value so that some of the terms in the pheromone deposition can be used by the ant agent during the pheromone update. This would make the ant agent obtain the minimized Boolean expression at a less number of trails. When the energy value of the ant agent equals the maximum group size, the solution is reached and the pheromone deposition of the corresponding ant agent represents the minimized Boolean expression.The literals in the minimized Boolean expression obtained for a group of alerted nodes represent the minimum number of auxiliary keys to be distributed to the alerted nodes in the group. The group key is encrypted using the corresponding auxiliary keys of each alerted node and distributed to the alerted nodes in the group. Fig. 7illustrates the pseudocode of ABXES algorithm.Each alerted node in the group decrypts the group key using their auxiliary keys and stores in the memory. A message authentication code is generated using the group key and the message containing the nodeid in the suspect list. The alerted node signs the message using the group key and the message is transmitted to other alerted nodes in the group. The receiving alerted node takes the message authentication code and the received message and obtains the group key. The authenticity of the message containing the nodeid in the suspect list is verified by comparing with the group key stored in memory and counts the number of times each nodeid occurs. The nodeid with a maximum number of counts is identified as the intruder.The simulation is shown for a wireless sensor network having 4 sensor nodes. The local detection engine in each sensor node has the set of its neighboring nodeids in the ruleset. The nodeids and the link quality in the ruleset defined in the IDS of each sensor node are shown in Table 3.Consider a sensor node in the wireless sensor network with a nodeid 125010001004 transmits messages to the other sensor nodes in the network. Each of the sensor nodes listening to the transmissions of this sensor node invokes the attack detection model to detect a sinkhole attack. The nodeid in the sender field of the route update packet is compared for a match with the nodeid in the ruleset.Consider that the sensor node 1 receives the route update packet. An Ant Colony Optimization Attack Detection (ACO-AD) algorithm is used to detect the sinkhole attack by matching the nodeid in the sender field of the route update packet with the nodeid in the ruleset in the sensor node 1 denoted by the first three rows in Table 3. Each ant agent has a pheromone deposition denoting the position of the nodeid in the rule set to be compared with the sender field of the route update packet. An ant agent has a positive and a negative position to store the pheromone deposition of the ant agent with an energy value of +1 and −1, respectively. A zero position is used to store the pheromone deposition of the ant agent with an energy value 0. Initially the positive, negative and zero position will be 0, 4 and 0, respectively, since there are 3 sensor nodeids in the rule set.The ant agent in the group chooses a random number 2 between the values in the positive and negative position as the pheromone deposition and compares the nodeid in the ruleset at that position with the nodeid in the sender field of the incoming packet and computes the energy value. Since the nodeid 125010001004 in the sender field of the incoming packet is greater than the value of the nodeid in the ruleset at position 2, the energy value of the ant agent is +1 and the pheromone deposition of the ant agent 2 is stored in the positive position. The ant agent knows that the nodeid to be compared in the ruleset lies between positions 2 and 3 in the rule set. Table 4shows the ant agent searching for a match of the nodeid of the incoming packet with the nodeid in the ruleset. A binary search algorithm is used to find a match for the nodeid in the ruleset with that of the nodeid in the route update packet stored between positions 2 and 3. Since a match does not occur, the packet may be sent by an adversary and an alert is generated on detecting a sinkhole attack. Similarly three other sensor nodes generated an alert for a packet from the nodeid 125010001004.The alerted sensor nodes have a suspect list of nodeids and form a group to agree on the intruder node. The alerted nodes have to sign the suspect list and send it to the other alerted nodes in the group. These alerted nodes in the group are represented in the form of a binary tree. Consider the alerted nodes N1, N2, N3 and N4 in the group have the nodeid 125010001004 in the suspect list. The alerted nodes in a group are represented as a truth table. Table 5shows the truth table representation for the alerted nodes in the group. The problem is in two binary variables K2, K1 where the minimized Boolean expression is to be found using ABXES algorithm. The binary vector from 00 to 11 is taken as the input. The key distribution for the alerted nodes in the group is given in Fig. 8. The minimized Boolean expression for the truth table is obtained by using an ABXES algorithm.The ant agent moves to find the solution by depositing pheromone. The pheromone deposition denotes the Boolean expression. The energy value of the ant agent gives its attractiveness toward the solution. Table 6shows the trails in which each ant agent finds the minimized Boolean expression for several alerted nodes in a group. For instance, the first ant agent has the terms at positions 2 and 5. Thus the pheromone deposition of the ant agent 1 is K1′+K1K2′. Each variable in the formula is replaced with its corresponding value from the truth table and the expression is evaluated and the energy value is obtained. Thus the energy value of the first ant agent is 2. The pheromone deposition along with the energy value is stored in the tabu-list of the corresponding ant agent. Since the solution is not obtained, the pheromone deposition evaporates and the ant agent updates its pheromone deposition by choosing the term at positions 1 and 3 and the energy value is calculated. Since this energy value is greater than that of the previous trail, the tabu-list is updated with this value. The process is repeated until any one of the ant agent obtains an energy value equal to the maximum group size. The first ant agent has an energy value equal to the maximum group size in the 3rd trail and the solution is obtained. Hence the pheromone deposition of the ant agent at positions 3 and 4 represents the minimized Boolean expression K2+K2′.Fig. 9shows the ant agent obtaining the minimized Boolean expression for a maximum of 4 alerted nodes in the group.The literals in the product term of the minimized Boolean expression represents the auxiliary keys k2′ and k2. Thus the auxiliary keys are distributed to the alerted nodes in the group. A new group key SK(r+1) is encrypted using the auxiliary keys and sent in two different messages to the alerted nodes of the group. The messages having the encrypted group keys are represented as {SK(r+1)}k2′ and {SK(r+1)}k2, respectively. The first message can be decrypted by alerted nodes N1 and N2 which has the auxiliary key k2′ and the second message can be decrypted by alerted nodes N3 and N4 which has the auxiliary key k2 and is stored in its memory. The alerted nodes in the group sign the suspect list containing the nodeids and transmit to the other alerted nodes in the group. For example the alerted node N1 generates the message authentication code using the root key SK(r+1) and the message containing the nodeid. The receiving alerted node receives the message authentication code and the message and recovers the group key SK(r+1). Each alerted node on receiving the signed suspect list checks the authenticity of the suspect list using the group key in their memory and counts the number of times each nodeid occurs. The nodeid having the maximum count is identified as the intruder. In this case, the nodeid 125010001004 occurs in the suspect lists transmitted by 3 alerted nodes and each sensor node has a maximum count of 3 and identifies the sensor nodeid 125010001004 as the intruder.

@&#CONCLUSIONS@&#
