@&#MAIN-TITLE@&#
Combining the ant system algorithm and simulated annealing for 3D/2D fixed-outline floorplanning

@&#HIGHLIGHTS@&#
The ant system algorithm and simulated annealing were combined to solve 3D/2D fixed-outline floorplanning problem.In the AS phase, a floorplan construction method is proposed, in which the blocks are greedily packed into the chip area one by one.During block packing, a probability layer assignment strategy is proposed to determine the layer assignment of the unpacked blocks.We define the pheromone in AS using the packing order of block b, and the pheromone update rule also adapts to handle the 3D floorplanning problem.We combine the area of a block with the connection degree (CD) between blocks as the heuristic information.

@&#KEYPHRASES@&#
Ant system algorithm,3D IC,Floorplanning,Fixed-outline,

@&#ABSTRACT@&#
Three dimensional integrated circuits (3D ICs) can alleviate the problem of interconnection, a critical problem in the nanoscale era, and are also promising for heterogeneous integration. This paper proposes a two-phase method combining the ant system algorithm (AS) and simulated annealing (SA) to handle 3D IC floorplanning with fixed-outline constraints. In the first AS phase, the floorplans are constructed by sequentially packing the block one by one, and the AS is used to explore the appropriate packing order and device layer assignment for the blocks. When packing a block, a proper position including the coordinates and the appropriate layer in the partially constructed floorplan should be chosen from all possible positions. While packing the blocks, a probability layer assignment strategy is proposed to determine the device layer assignment of unpacked blocks. After the AS phase, the SA phase is used to perform further optimization. The proposed method can also be easily applied to 2D floorplanning problems. Compared with the state of the art 3D/2D fixed-outline floorplanner, the experimental results demonstrate the effectiveness of the proposed method.

@&#INTRODUCTION@&#
As device feature sizes continue to rapidly decrease, the interconnect delay is becoming a bottleneck limiting IC performance. 3D IC technology involves vertically stacking multiple dies connected by Through Silicon Vias (TSV), providing a promising way to alleviate the interconnect problem and achieve a significant reduction in chip area, wire-length and interconnect power [1]. Theory indicates that the average wire-length of a 3D IC varies according to the square root of the number of layers [2]. Moreover, 3D ICs also offer the potential for heterogeneous integration, which is essential for More than Moore (MtM) technology [3]. Fig. 1presents an example of 3D IC consisting of three silicon layers, with inter-layer connections made up of TSV while intra-layer connections consist of metal wires.Although 3D IC technology has many advantages, it is also associated with some critical challenges. Many factors affect the performance and reliability of the chip such as the total wire-length, TSV numbers, and power density. Although floorplanning for 2D IC design is a well-studied problem, the complexity of floorplanning is increased for 3D ICs.(a)Inter-layer and intra-layer block dependencies affect the chip's area efficiency and the wire-length. The layer assignment and intra-layer block floorplanning must be simultaneously solved during 3D floorplanning [4].The addition of a TSV number objective complicates the optimization, as trade-offs among area, wire-length, and TSV number are required.Fixed-outline floorplanning enables multilevel hierarchical design [5,36], which is necessary for designing large scale ICs . Fixed-outline floorplanning has been shown to be much more difficult than outline-free floorplanning [5]. Kahng [6] also noted that modern VLSI design is based on a fixed-die (fixed-outline) floorplan, rather than a variable-die floorplan.Current 3D IC floorplanning research can be divided into two categories. One category is the study of floorplan representations. To enable 3D floorplanning, some researchers have expressed 3D structures by an array of 2D representations, with each 2D representation containing a floorplan of one tier, such as multi-layer BSG [7] and P-SP [8]. With these representations, blocks can be moved inside each layer or swapped between different layers during iterative optimization. Other researchers extended existing 2D representations to real 3D structures. Yamazaki et al. [9] adopted the sequence triple; Cheng et al. [10] used the 3D slicing tree and Ma et al. [11] proposed 3D-CBL to encode the topologies of 3D structures. However, in these true 3D representations, the number of floorplan configurations is much larger and has a high degree of redundancy, which is not efficient. Another category is the floorplan algorithm study. Yan et al. [12] proposed a very fast fixed-outline floorplanning based on “deferred decision making”; the convex programming technique was also applied to fixed-outline floorplanning [13]. As 2D and 3D IC floorplanning design are NP-hard problems [14], most current floorplanning algorithms are based on metaheuristic algorithms such as Simulated Algorithm (SA) and Genetic Algorithm (GA). Cong et al. [15] presented a thermal-aware 3D floorplanning algorithm that used the SA with an integrated compact thermal model. Healy et al. [16] proposed a hybrid floorplanning approach combining linear programming and SA, which was shown to be effective in obtaining high quality solutions. Chen et al. [17] proposed a fixed-outline 3D IC floorplanning algorithm based on SA, which also proved that the configuration number of multi-layer floorplans was less than that of planar (2D) floorplans. Xiao et al. [18] presented a two-phase algorithm based on SA for 3D floorplanning with fixed-outline constraints. However, the TSV numbers were not considered in the objective function. Frantz et al. [19] and Cuesta et al. [20] used genetic algorithm to address the 3D IC floorplanning problem. However, most previous floorplanning approaches based on SA require tens of thousands of iterations to produce good quality solutions, and the number of iterations generally increases super-linearly with problem size [4]. SA is a single solution search algorithm that lacks population diversity, with the result that the algorithm can easily become trapped in a local optimum [21].The ant-based metaheuristic algorithm is a relatively new approach inspired by the detection method of ants. The first example of such an algorithm is the Ant System (AS), which was proposed using the Traveling Salesman Problem (TSP) [22] as an example application. In addition to obtaining good results, the AS played an important role in promoting further research on improved variants of this algorithm that obtained much better computational performance, as well as on applications to a large variety of different problems. These algorithms have been successfully implemented in a number of applications with good results such as quadratic assignment [23], scheduling [24], and VLSI floorplanning [25]. Ant-based optimization algorithms involve three phases, initialization, construction and the feedback process. The initialization phase contains the parameter settings such as the number of ants. Then, the artificial ants are guided by pheromone-based probability in constructing solutions. Eventually, the feedback phase makes the subsequent search more directed. Some ant-based metaheuristic algorithms have been applied in 2D/3D IC floorplanning. Hoo et al. [26] developed an improved ant system algorithm called VOAS and combined it with the corner list floorplan representation to optimize 2D IC floorplanning. These authors devised a greedy local search in VOAS to prevent the algorithm from becoming trapped into a local region. Hoo et al. [27] proposed a perturbation method called the Hierarchical-Congregated Ant System (H-CAS) for 2D IC floorplanning, which was shown to be effective in achieving good solutions in a short runtime. However, their approach only considers area optimization. Luo et al. [28] used the ant colony algorithm in 3D IC floorplanning. However, they did not consider the number of TSVs as an objective.We use the partitioned sequence pair (P-SP) extended from the well-studied 2D floorplan representation sequence pair [8] to represent 3D floorplans. This work makes the following contributions to the literature:(a)A two-phase algorithm is proposed to handle 3D IC floorplanning, which combines the ant system algorithm (AS) and simulated annealing (SA).In the AS phase, a floorplan construction method is proposed in which the blocks are sequentially packed into the chip area one by one. The best position in the partially constructed floorplan including the coordinates and the device layer is selected when packing each block. During block packing, a probability layer assignment strategy is proposed to determine the layer assignment of the unpacked blocks to evaluate the numbers of TSVs at each position. A P-SP, which can represent a whole floorplan, is constructed after all blocks are packed.As the sequence of packing blocks can significantly influence the quality of floorplans, we define the pheromone in the AS using the packing order of block b, and the pheromone update rule also adapts to handle the 3D IC floorplanning problem. Moreover, we combine the area of a block with the connection degree (CD) between blocks as the heuristic information. The experiments were carried out to demonstrate the effectiveness of the proposed method.In this work, we concentrate on the fixed-outline floorplanning for 2D/3D IC. The remainder of this paper is organized as follows. Section 2 defines the problem of 3D fixed-outline floorplanning and shows the floorplan representation used in our work. Section 3 presents an overview of the proposed two-phase algorithm and the objective function. In Section 4, the details of the ant system algorithm are described. The experimental results are provided in Section 5, and Section 6 presents the conclusions of the study.The fixed-outline floorplanning problem for 3D ICs can be formulated as follows.Let B={bi|1≤i≤n} be a set of rectangular blocks, where each block biin B has a specified width wiand height hi, and N={ni|1≤i≤m} be a set of nets, where each net niis a subset of blocks, describing the connections among blocks. Let t be the fixed number of device layers (in this paper, typically t=4). 3D IC floorplanning is an assignment of the triple (xi, yi, li), 1≤i≤n, 1≤li≤t, to block bi, where (xi, yi) represents the lower-left coordinates of bi, and lirepresents the layer in which biis located, to minimize the chip area, wire-length, and through silicon via (TSV) number (in the 3D case) [17] under the following constraints.(a)Two blocks within the same layer do not overlap.To prevent overlapping between blocks, for any two blocks bi and bj on the same layer, one of the following linear inequalities must hold while packing the blocks in the floorplan:(1)xi+wi≤xjifbiislefttobjxj+wj≤xiifbiisrighttobjyi+hi≤yjifbiisbelowbjyj+hj≤yiifbiisabovebjAll blocks are packed into the specified region (fixed outline).Assume that W0and H0are the desired width and height of the chip, respectively. Considering the total area A of all blocks, t layers, and a suitable whitespace fraction γ, we construct a fixed outline model with the aspect ratio λ≥1 [5] as follows:(2)W0=(1+γ)⋅At⋅λ,H0=(1+γ)⋅At/λTo ensure that all blocks are packed into the specified region, that is, the rectangular region defined by (0, 0) and (W0, H0), the inequalities for each block biare needed as follows:(3)xi≥0,yi≥0,xi+wi≤W0,yi+hi≤H0The wire-length is calculated by the half perimeter wire-length (HPWL) model. In the HPWL model, the wire-length is estimated by∑ni=1m(xnimax−xnimin)+(ynimax−ynimin)where m is the number of nets,xnimaxdenotes the maximum x coordinates of all the blocks involved in the net ni(xnimin,ynimax, andyniminhave similar meaning).Fig. 2shows the concept of the HPWL model, which contains two nets 1 and 2. Net 1 connects blocks m, n, k; while Net 2 connects blocks k, n, p. According to the block coordinates, we construct the corresponding bounding box of each net as shown by the dashed lines. The HPWL of the nets equals [(xn−xm)+(yn−ym)]+[(xp−xk)+(yp−yk)].If a net spans layer i to layer j, it requires |j−i| TSVs. As shown in Fig. 1, a net consists of three blocks i, j, k located in layers 1, 2, and 3, respectively. Two TSVs are required to implement the connection between block i and block k, as it must cross two device layers.A sequence pair (SP) is a pair of sequences of n elements representing a list of n blocks. The relationship between each pair of blocks is descibed as follows:(…bi…bj…,…bi…bj…)⇒biis to the left of bj(horizontal constraint)(…bj…bi…,…bi…bj…)⇒biis below bj(vertical constraint)Given an SP, the block packing can be computed by applying the well-known longest path algorithm for the vertex weighted directed acyclic graph [29]. Based on the SP constraint rule (3), a directed and vertex-weighted graph GH(V, E) (V: vertex set, E: edge set) called the horizontal-constraint graph is constructed as follows.(1)V: source s, sink t, and n vertices labeled with block names.E: (s, bi) and (bi, t) for each block bi, and (bi, bj) if biis to the left of bj(horizontal constraints).Vertex-weight: zero for s and t, width of block bifor the other vertices.Similarly, the vertical-constraint graph is constructed using vertical constraints and the height of each block.Neither of these graphs contains any directed cycle. We set the X-coordinate of block bito the longest path length from s to biin GH. The Y-coordinate of block biis set independently using GV.As an example, GHand GVare shown in Fig. 3for the SP (413652, 612435). The corresponding floorplan after the longest path length calculation is shown in Fig. 4.Each SP models a 2D floorplan structure. For n blocks, the configuration number is (nǃ2). The original paper [29] that proposed SP presented an O(n2) algorithm to transform an SP into a floorplan. Tang et al. [30] sped up the evaluation algorithm to O (nloglogn) by computing the weighted longest common subsequences.SP has been well studied, and it can be easily extended to express 3D IC floorplans, called partitioned sequence pairs (P-SPs) [8]. In short, one sequence pair can generate multiple partitioned sequence pairs, and each sub-sequence pair in the P-SP represents a floorplan of the corresponding layer. The difference is that the number of blocks in these sub-sequence pairs is variable. A P-SP is defined as follows:(P,M)=((p1p2…pn1)…(patpat+1…pn), (m1m2…mn1)…(matmat+1…mn)).The number of multi-layer floorplan configurations is less than that of 2D floorplans [17]. Fig. 5presents an example of P-SP.We propose a two-phase algorithm to optimize 3D IC floorplanning. Generally, although SA is a global optimization algorithm, it has local search characteristics, so SA performs well for local searches. As a swarm intelligence method, AS is effective in executing global searches to solve global optimization problems. In the proposed two-phase algorithm, we make full use of the advantages of the AS to generate globally optimal solutions in the first phase, which are then improved by the SA-based searching algorithm in the second phase. During the AS, we are primarily concerned with the TSV numbers under the fixed-outline constraints. The best solution of the AS-based phase is usually successful in satisfying the fixed-outline constraint with a lower number of TSVs. Then, we use the solution as the starting point of the SA phase to further optimize the wire-length and TSV numbers.The model used to calculate area cost, wire-length, and TSV numbers in the SA phase is the same as in the AS phase (Section 4). During the SA phase, we adopt a perturbation method [17] by removing a block in P-SP, and then choose a point in P-SP for the removed block based on the objective function. The experiment results show that in the SA phase, the TSV number and wire-length are further reduced. The flow chart of the proposed algorithm is shown in Fig. 6.In fixed-outline 3D floorplanning optimization, the cost of a floorplan is defined as follows:(4)Cf=α⋅Ac+β⋅Wire+ϕ⋅Viawhere α, β, ϕ are balance factors and α+β+ϕ=1. Because of the difference between the orders of magnitude of the three objectives, it is difficult to choose the balance factors, so we normalize the three objectives during the AS phase and adopt a method shown in [17] during the SA phase.Wire is calculated by the half perimeter wire-length model as shown in Fig. 2.Via is the sum of the TSV number for all nets. The TSV number of each net is determined by the method explained in Section 2.1.The AC is evaluated by formula (5)[31].(5)Ew+EH⋅λ+C1⋅max{Ew,EH⋅λ}+C2⋅max{W,H⋅λ}where W(H) is the maximum width (height) of all device layers of the current floorplan. Ew=max{W−W0,0}(EH=max{H−H0,0}) is the excessive width (height) of the floorplan, and C1and C2are constants (set to 3 and 1/16 in our experiment). Using this formula, we not only penalize greater excessive width and excessive height but also keep the AC item effective when combined with the wire-length and TSV number objectives.We use the P-SP to represent a population of solutions. The packing order of blocks has a significant influence on the final floorplan quality. The AS is used to explore the order of packing blocks. In our method, ant k chose block b at order n from the set of unpacked blocks based on the probability value calculated by formula (6).(6)P(b,n)k=τ(b,n)μ⋅η(b,n)v∑Jτ(b,n)μ⋅η(b,n)v0,else,b∈Jwhere τ(b,n) reflects the pheromone value of block b packed at order n, η(b,n) is the heuristic value, and J is the set of unpacked blocks. The parameters μ and ν are employed to control the relative importance of the pheromone τ(b,n) and η(b,n).According to Dorigo [22], the parameter μ is set by one and ν is set to be a constant ranging from two to five in our experiment. The repeated selection will increase the pheromone level of a particular block and results in the permutation of the first block to be limited. To avoid this, the first block is selected randomly to obtain more possible solutions, which may lead to better global optimal results.The heuristic value η(b,n) in our method is defined as follows:(7)η(b,n)=c⋅CDsMaxcd+d⋅AreaMaxareawhere CDs is the sum of connection degree of block b with other blocks that have already been packed and Maxcd is the maximum connection degree among all blocks. The connection degree between two blocks is defined by summing the weights of all the nets that connect the two blocks. Each net of size k is regarded as a k-clique and will receive a weight of k/2 [32]. If blocks with a large connection degree are packed together, the wire-length will be decreased to some extent. In addition, Area is the block b's area and Maxarea is the maximum area among all blocks. Area is divided by Maxarea in order to be consistent with the magnitude of first item. If we pack a block with a large area in the late stage of floorplanning, it easily damages the floorplan structure. We added the second item in the heuristic value to pack the large block in earlier stages. The parameters c and d represent weights. In the experiments, c and d are set to 0.7 and 0.3, respectively. According to the heuristic value η(b,n), the algorithm tends to choose a block with a larger area and a higher degree of connection with the blocks that have been selected (packed).The detailed AS phase algorithm is shown in Algorithm 1. The inputs are sets of blocks and connection relationships among blocks (the net). The algorithm searches for a multi-layer floorplan structure with smaller area, wire-length and TSV number under the constraints of the model.In the AS, a floorplan is constructed by sequentially packing blocks into the chip area one by one based on the probability value calculated by formula (6), and the best position in the partially constructed floorplan is selected when packing each block. To evaluate an insertion point for a block, we have to estimate the current chip dimensions, wire-length and TSV number after inserting the block into the insertion point.A block position in an SP of (P,M) indicates an insertion point represented by a tuple (p, m), where p is one position between two adjacent blocks in P, and m is one position between two adjacent blocks in M. p(m) may also be the position before the first block or after the last block in P(M). Therefore, there are (n+1) candidate positions for insertion in each sequence, and a total of (n+1)2 block positions to insert a block in a given SP. Therefore, given a partial P-SP for t layers and ni(>0) blocks already on layer i, there are a total of∑i=1t(ni+1)2positions available for the selected block. To construct the complete P-SP, we eventually evaluate (12+22+32+…+n2)=n·(n+1)·(2n+1)/6 positions in the worst case, with the result that the time complexity of enumerating block positions in partial P-SP is O(n3).A P-SP is constructed after all blocks are packed, which can represent a whole floorplan. Fig. 7shows the flow of floorplan construction. The following sub-sections show the method used to estimate the chip dimensions and TSV number when inserting the block into the insertion point.Algorithm 1Ant System phase algorithm.1: Initialize the parameters: the population size p, the iteration q and pheromone density2: Calculate the heuristic value by formula (7)3: Fori=1 to q do4:Forj=1 to p do//generate new solutions5:CallAlgorithm 2to preliminarily determine all block layers6:Randomly select the first block to pack7:while there are blocks that are not packed do8:Select a block b to be packed according to the probability value by formula (6)9:Forl=1 to tiernum10:Evaluate TSV number if the selected block b is packed on layer l11:end Forl12:Choose the proper layer l and update the layer of block b on l//Evaluate all positions on layer l13:Forx=0 to nldo//nlis the number of blocks on layer l, x represents the position in P sequence14:Fory=0 to nldo//y represents the position in M sequence15:Calculate the area and wire-length cost of each position (x, y)16:end Fory17:end Forx18:Select the best position (x, y, l) for the selected block b19:end while//(ant j construct a new floorplan solution)20: end Forj21: Calculate the function value of solutions in the new population by formula (4)22: Update the pheromone density of blocks based on the function value by formula (12)23: end ForiThis sub-section discusses how to evaluate the chip dimensions for each insertion point. We first compute the corresponding x-/xr-/y-/yr-distances (later defined in the subsection) of the insertion point. The new chip width (Wchip) and height (Hchip) is calculated by formula (8). These values are then used to calculate the area cost of the insertion point.(8)Wchip=x+xr+widthblockHchip=y+yr+heightblockGiven n blocks, bi, i=1–n, and their sequence P, the following notations are used in the rest of this section:Pi1≤i≤n, the ith block in PPi,ji≤j, the subsequence P from block P[i] to P[j]PR, reverse of sequence PPi,jRi≤j, reverse of P[i, j]LPb, position of block b in P, e.g., LP[P[i]]=it, the total number of layerslbk, the index of the first block of the layer k in the whole sequence P/Mnk, the number of blocks in layer kGiven a P-SP (P, M), inserting a block b into an insertion point (P[i], M[j]) means a new P-SP (P′, M′)=(P1…PibPi+1…Pn,M1…MjbMj+1…Mn).Let LCS(Pi,j,Mi,j) be the block-width-weighted longest common subsequence ofPi,jandMi,j, and lcs(Pi,j,Mi,j) be the weight sum of the blocks in LCS(Pi,j,Mi,j) [30].x(P[i],M[j])=lcs(P[lbk,i],Mlbk,j). Similarly, we havey(P[i],M[j])=lcs(P[i+1,lbk+nk−1]R,M[lbk,j])x(P[i],M[j])r=lcs(P[i+1,lbk+nk−1]R,M[j+1,lbk+nk−1]R)y(P[i],M[j])r=lcs(P[lbk,i],M[j+1,lbk+nk−1]R)We use an algorithm to compute the total x-distance of∑i=1t(ni+1)2insertion points in time in a linear relationship with the number of insertion points as shown in [17]. The inputs of the algorithm are the P-SP and block dimensions. The distance values are stored in the X vector, which is managed by a doubly linked list. The algorithm can accept a P-SP (PR, MR) to compute the xrdistance of all the insertion points in (P, M). Similarly, if elements are weighted by block height, the algorithm can accept the P-SPs (PR, M) and (P, MR) to compute the y-distance and yr-distance, respectively.Fig. 8illustrates the distance computation by a two-layer P-SP (P, M)=((cbae)(df), (ceab)(fd)), where blocks a, b, c, and e are on the first layer and blocks d and f are on the second layer. The x-distances of the insertion points are shown below each sub-figure depicting the related floorplan.To evaluate an insertion point for a block, we have to evaluate the TSV number after inserting the block into the insertion point. As some blocks are still not packed in the P-SP, we propose a probability layer assignment strategy based on the layer distribution of the blocks in the current population. We use the good half of solutions in the current population to generate the layer histogram matrix, and utilize the sampling algorithm to estimate the layer of blocks in next population based on the layer histogram matrix [33].Let the string of the kth individual in population P(t) at generation t representskt={πkt(0),πkt(1),⋯,πkt(n−1)}where{πkt(0),πkt(1),⋯,πkt(n−1)}is a permutation of (0, 1, ⋯, n−1) and n is the number of blocks. Then, a layer histogram matrix (LHM) of population P(t) consists of n×tiernum elements as follows:(9)ni,jt=∑k=1Nδi,j(skt)+εwhere N is the population size, i is the block index, j is the layer index, andδi,j(skt)is a delta function defined as(10)δi,j(skt)=1ifπkt(i)=j0otherwiseTheni,jtof LHM indicates the total number of blocks i at layer j in P(t). This function represents how the population of blocks is distributed across the different device layers. A ɛ is added to eachni,jtto control the pressure of sampling, with ɛ denoted as(11)ε=Nn⋅Bratiowhere Bratiois a positive constant ratio and set to 0.2 in this experiment.The flow of the probability layer assignment strategy is shown in Algorithm 2.Algorithm 2Block layer assignment.1: Use the good half of solutions in the current population t to generate the layer histogram matrix (LHM) for the layer assignment of the blocks//preliminarily determine all block layers2: Fori=1 to n do3:Forj=1 to tiernum4:Calculate the probability of block i on layer jni,jt/∑j=1tier_noni,jt5:end Forj6: The probability is employed in a Roulette wheel mechanism to sample the layer of block i7: end ForiWhile scanning the doubly linked lists, it is easy to compute the current chip width and chip height according to the four distances of insertion points to current chip boundaries. If a block b is inserted into an insertion point(Pi,Mj), the current chip width should be max(x(P[i],M[j])+x(P[i],M[j])r+b.width,W)and the current chip height should be max(y(P[i],M[j])+y(P[i],M[j])r+b.height,H). W and H are the width and height of the floorplan transferred from the current partial P-SP, and the calculation method is described in Section 4.1.1. Then, formula (5) can be used to calculate the area cost of the insertion points.x(P[i],M[j]),y(P[i],M[j])are the coordinates of the bottom-left corner of b. These coordinates will be used to estimate the wire-length of nets related to block b. The wire-length estimation model is the same as that in [31].All the insertion points on one device layer have the same TSV number, which is computed by summing the changed TSV number of all the nets connected to the block b.Accordingly, the costs of inserting block b into (P[i], M[j]) can be evaluated by the linear combination of the area costs, the wire-length and the change in the TSV number.As discussed in Section 4.1, the time complexity of enumerating block positions in partial P-SP is O(n3). In addition, we use an algorithm to compute the x-/xr-/y-/yr-distance of the total number of∑i=1t(ni+1)2insertion points over time in linear proportion with the number of insertion points as shown in [17]. Therefore, the amortized time complexity of calculating the distance is O(1). Consequently, the time complexity of the floorplan construction is O(n3).After all ants complete the floorplan construction, we evaluate solutions, record the corresponding orders of all blocks selected, and update the pheromone density according to the following equation:(12)τ(b,n)=(1−ρ).τ(b,n)+∑k=1mΔτ(b,n)where ρ is the evaporation rate such that 0<ρ<1 to avoid the unconstrained accretion of the pheromone, and Δτ(b, n) is the increased amount of pheromone laid on block b, which is selected by ant k as the nth packed block. It is defined as:(13)Δτ(b,n)=1Cf,ifantkselectbatordern0,elsewhere Cfis the cost of a floorplan constructed by ant k, as calculated by formula (4).

@&#CONCLUSIONS@&#
This paper proposes a two-phase algorithm to optimize 3D IC floorplanning. The experimental data show that the two-phase algorithm yields improved results in terms of area, wire-length, and the number of TSVs in 3D IC floorplanning compared with other flooplanning algorithms. In future work, we will take the thermal dissipation into account during floorplanning.