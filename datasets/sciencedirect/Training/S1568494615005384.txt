@&#MAIN-TITLE@&#
Sizing optimization of truss structures using flower pollination algorithm

@&#HIGHLIGHTS@&#
Truss sizing optimization with flower pollination algorithm.Good balance of global and local search.Iterative constraint handling strategy to accept or reject trial designs.Optimized designs are competitive with metaheuristic optimization literature.

@&#KEYPHRASES@&#
Flower pollination algorithm,Truss structures,Sizing optimization,Iterative constraint handling strategy,

@&#ABSTRACT@&#
The recently developed flower pollination algorithm is used to minimize the weight of truss structures, including sizing design variables. The new algorithm can efficiently combine local and global searches, inspired by cross-pollination and self-pollination of flowering plants, respectively. Furthermore, it implements an iterative constraint handling strategy where trial designs are accepted or rejected based on the allowed amount of constraint violation that is progressively reduced as the search process approaches the optimum. This strategy aims to obtain always feasible optimized designs. The new algorithm is tested using three classical sizing optimization problems of 2D and 3D truss structures. Optimization results show that the proposed method is competitive with other state-of-the-art metaheuristic algorithms presented in the literature.

@&#INTRODUCTION@&#
The main objectives in structural design are to ensure the safety of structures and find a design with the maximum gain. Generally speaking, safety measures are defined as design constraints, while objective functions depending on design variables are defined as the maximum gain. In recent years, nature-inspired metaheuristic algorithms have been commonly used in engineering optimization. These iterative algorithms are very effective to find precise optimum values of challenging engineering problems with multiple variables and constraints. In addition, metaheuristic algorithms allow to account for design limitations by combining optimization process with accurate engineering analysis. Metaheuristic algorithms can be grouped as either trajectory-based algorithms or population-based algorithms. Simulated Annealing (SA) method developed by Kirkpatrick et al. [1] is a trajectory-based algorithm, while Harmony Search (HS) [2], Genetic Algorithm (GA) [3], Cuckoo Search [4], Particle Swarm Optimization (PSO) [5], Ant Colony Optimization (ACO) [6] are all population-based algorithms.In addition, new metaheuristic algorithms are also being developed in order to improve the optimization capability and convergence behavior. For example, the Flower Pollination Algorithm (FPA) is a population-based metaheuristic method recently developed by Yang [7], which imitates the nature of flower pollination. In the development of the algorithm, the main characteristics of flower pollination were idealized into four rules. This study will apply FPA to solve sizing optimization problems of 3D and 2D truss structures.Truss structures have been optimized using several approaches. For example, Adeli and Kamal optimized space trusses with a dual simplex algorithm to find a local optimum of the approximate problem, while the original problem was iteratively solved [8]. Rajeev and Krishnamoorthy used discrete variables and GA with a penalty parameter depending on constraint violation [9]. Cao also employed GA for the optimum design of frame structures [10]. Erbatur et al. employed GA for the optimum design of planar and space truss structures with continuous and discrete variables [11]. Schutte and Groenwold used PSO for the sizing and layout optimization of truss structures [12]. Camp and Bichon employed ACO to minimize the total weight of the structure subject to stress and deflection constraints [13]. Lee and Geem optimally designed trusses under multiple loading conditions by using HS algorithm and continuous design variables [14]. Big bang–big crunch (BB–BC) algorithm developed by Erol and Eksin [15] was employed in the optimum design methodology of space trusses by Camp [16]. Li et al. developed a heuristic particle swarm optimizer based on the particle swarm optimizer with passive congregation and a HS scheme; this method was successfully applied to the optimum design of planar and spatial truss structures [17].In addition, Perez and Behdinan optimized truss structures with PSO [18]. Togan and Daloglu improved GA with an initial population strategy and self-adaptive member grouping [19]. Lamberti presented an efficient SA algorithm for sizing and layout optimization of truss structures [20]. A hybrid BB–BC/PSO algorithm, including Sub-Optimization Mechanism (SOM) was used for sizing optimization of space trusses [21]. Kaveh and Talatahari proposed a hybrid optimization method combining PSO, ACO and HS algorithm for truss structures with discrete and continuous variables [22,23]. Sonmez proposed an optimization methodology including the Artificial Bee Colony and Adaptive Penalty function approach (ABC–AP) in order to minimize the weight of truss structures [24]. Degertekin applied two different improved HS algorithms called the efficient HS algorithm and self-adaptive HS algorithm in order to optimize the size of truss structures [25]. Teaching Learning Based Optimization (TLBO) was applied to truss sizing optimization problems by Degertekin and Hayalioglu [26]. Also, Camp and Farshchin employed a modified TLBO for optimum design of truss [27]. Kaveh et al. developed hybrid particle swallow swarm optimization and the developed algorithm was tested with truss weight minimization problems [28].Furthermore, chaotic swarming of particles which is the combination of swarm intelligence and chaos theory was developed for optimization of truss structures [29]. Dede and Ayvaz developed a methodology for sizing and layout of trusses using TLBO [30]. Kaveh et al. also used an improved magnetic charged system search in order to solve truss optimization problems with continuous and discrete variables [31]. Colliding bodies optimization (CBO), developed by Kaveh and Mahdavi [32], reproduces the mechanisms of the collisions of moving bodies [33]: the algorithm has successfully been utilized in truss optimization. Kaveh and Ilchi Ghazaan later developed an enhanced colliding bodies optimization algorithm (ECBO) which stores some best solutions into the memory in order to optimize truss structures with continuous and discrete variables [34]. Another efficient algorithm for sizing and layout optimization of truss structures is ray optimization (RO) [35].In the present study, the newly developed metaheuristic Flower Pollination Algorithm (FPA) is applied to structural optimization problems of planar and space trusses. In order to reach the global optimum, an iterative or adaptive constraint handling strategy is included in the search engine. The efficiency of the proposed approach is demonstrated by solving three classical weight minimization problems including sizing variables. Optimization results indicate that FPA is very competitive with other metaheuristic algorithms and can always find efficient designs within the predefined constraint tolerance.Trusses are structural systems, consisting of N bars joined by nodes. The system is subject to the external forces applied at the joints. The aim of structural optimization of truss systems is to minimize the total weight of the structure.In the proposed methodology, the optimization process is encoded together with the structural analysis of the truss. The latter is carried out by using the stiffness method, and nodal displacements are calculated according to(1)Δ=K−1P.In Eq. (1), Δ, K and P are the nodal displacement vector, system stiffness matrix and external load vector, respectively. The system stiffness matrix is constructed by merging the element stiffness matrices in global coordinates and erasing row and columns which correspond to zero displacements according to the boundary conditions. The stiffness matrix of a bar element with three degrees of freedom at each node is given by(2)Ki=EAil2lmnl−l2−lm−nllmm2mn−lm−m2−mnnlmnn2−nl−mn−n2−l2−lm−nll2lmnl−lm−m2−mnlmm2mn−nl−mnn2nlmnn2where(3)l=LxiLi,m=LyiLiandn=LziLi.In Eqs. (2) and (3), the total length of the bars (Li) and the dimensions of the length in x, y and z coordinates (Lxi, Lyiand Lzi) are calculated using the coordinates of the nodes and bounds of the elements which are determined as the design constants. Also, the elasticity modulus (E) and density (γ) of the material of bars are defined as design constants. The areas of bars (Ai) (from i=1 to N) are the design variables (X) of the optimization problem. The aim of the optimization is to minimize the total structural weight. That is(4)minW=∑i=1NγLiAi,(Ai∈ℝ)for the design variables:(5)XT=A1,A2,…,ANwithin the ranges of(5′)AL≤Ai≤AUi=1,Nsubject to the stress (g1(X)≤0) and displacement (g2(X)≤0) constraints(6)g1(X):σL≤σi≤σUi=1,Nandg2(X):δL≤δj≤δUj=1,Nj.ALand AUare the lower and upper bounds of the solution ranges of the design variables. δLand δUare the displacement limits which are generally equal in absolute values, but with the opposite signs. The displacement of nodes (δj) from j=1 to Nj(for a system with j nodes) are the components of the displacement vector:(7)Δ=δ1δ2...δNj−1δNj(δ1,Nj∈ℝ).σLand σUare two different types of stress limits which are for compression (σLin − sign) and tension (σUin + sign). The stresses of a bar (σiG) in global coordinate is calculated by(8)σiG=KiΔiAi,i=1,Nwhere Δiis the vector of the nodal displacements of ith bar. Axial stress on a bar (σi) is calculated by multiplying global stresses by directional cosines.In the generation of the system stiffness matrix (K), different design variables are found in the same rows. The optimization problem is coupled since multiple design variables are found in the equilibrium equations found in each row. Without assuming these design variables, it is not possible to obtain nodal displacements according to Eq. (1) and stresses according to Eq. (8). These values may be taken as the limits of design constraints as defined by g1(X) and g2(X), but the optimum solution never corresponds to the situation where all nodal displacements and bar stresses are maximized. Also, when all displacements are at the limits, bar stresses may exceed the limit. The structures may be excited by different loads for different time spans. Because of the interaction of bars, the maximum stresses change when design variables are changed according to different loading cases. The number of design variables may be too large for big structural systems. All such reasons may prevent us to apply mathematical optimization methods for structural design problems. In this situation, metaheuristic methods using randomly generated design variables are good alternatives and they are suitable for solving such tasks. Thus, the coupled equilibrium equation can be solved. By conducting iterative analyses, optimum design variables can be found.The Flower Pollination Algorithm (FPA) developed by Yang [7] is a recent metaheuristic algorithm which imitates the flow pollination process of flowering plants. This algorithm was also applied to multi-objective optimization problems by Yang et al. [36]. In FPA, four different rules about the characteristic of the pollination process, pollination behavior and flower constancy are considered.First rule: Biotic pollination is the cross pollination process in which pollen is carried by a pollinator. The pollinators may be an insect or animal and about 90% of pollinations of flower plants belong to this type. This situation is a global pollination process and can be realized in the imitation of global search. Additionally, the movement of pollinators obeys Lévy flights.Second rule: Abiotic or self-pollination is the process done by the same plant or flower without pollinators. It is fertilization of one flower like peach flowers. The carrying process of pollen is generally done with the help of environmental factors such as wind and diffusion in the water. Since the pollen carrying distance is usually shorter than biotic pollination, this process is known as local pollination. In FPA, this process is the source of local search.Third rule: Pollinators can develop flower constancy which is the tendency of pollinators to specific flower species. Flower constancy is equivalent to a reproduction probability. This probability is proportional to the similarity of the involved flowers.Fourth rule: A switch probability; p∈[0, 1] is used to control the type of pollination (local or global).According to these rules, two different search techniques (local and global) can be used. By applying local search, the best solutions around existing ones are found. In addition to that, global pollination essentially prevents to be trapped at a local optimum solution.The methodology of truss optimization problem can be explained in the following three steps.First step: In this step, the design constant, ranges of design variables and limits of design constraints that are mentioned in the second section for the truss structure optimization problem are defined. Additionally, the algorithm constants such as the number of flowers (nf), switch probability (p) and maximum number of generations (gmax) are defined.Second step: Before the local and global search steps, design variables are randomly initialized according to the number of flowers and these variables are stored in a solution matrix (SM). Each column of this matrix is a solution set of design variables within the defined range. Each variable can be taken as a pollen vector of a flower. This means that we have an nf×N solution matrix:(9)SM=A1,1A1,2...A1,nfA2,1A2,2...A2,nf............An−1,1An−1,2...An−1,nfAn,1An,2...An,nfFor example in Aa,b, a and b represent the number ath bar (pollen) and bth random solution set (flower). After the design variables are defined, structural analyses are done and the objective function given in Eq. (4) is calculated together with the stress and displacement values in order to consider design constraints. The iterative constraint handling strategy described in Section 3.3 is applied in the proposed method.Third step: In this step, the solution matrix is iteratively updated according to the local and global search steps. The updating process for local and global search (pollination) are described in Sections 3.1 and 3.2, respectively. For each iteration, a random number between [0,1] is generated and if this random number is smaller than p, then the global search is carried out. Otherwise, local search is performed. During this search process, a new set of design variable values is generated and corresponding analyses are also carried out. The updating of the solution matrix is done according to constraint violation or the objective function. If the design constraints are violated for any set of variables, the updating process is handled by the constraint handling strategy. This strategy is explained in Section 3.3. If the newly generated solutions are better in terms of the objective function, the solution matrix is updated. This comparison is done for each set of variables. If the design constraints are violated for any set of variables, the updating process is handled by the constraint handling strategy. The iterative process in the third step is repeated until the iteration number reaches gmax.After these three steps, as they continue in an iterative manner, it is expected that the optimum solution with the minimum objective function value can be found. The flowchart of the method is given in Fig. 1.The first and third rules for flower pollination are used together in the global search process. In this process, the set of solution for fth flower in the next iteration(A1−N,ft+1)is found according to a set of variable of the previous iteration (A1−N,ft) and the current best set of variables (g*) with the smallest objective function value. Also, the modifications of the set of variables are done according to a Lévy distribution and the Lévy distribution of the fth flower (LD,f) is known as the strength of the pollination. The updating of the set of variables for fth flower is formulized as(10)A1−N,ft+1=A1−N,ft+LD,f(g*−A1−N,ft).The Lévy distribution (LD,f) with an exponent of 1.5 is approximated by(11)LD,f=12πε−1.5e−12εwhere LD,fis a random number between [0,1].In this type of pollination, the second rule of flower pollination is used together with the flower constancy (the third rule). The solution set of next iteration is updated according to the solutions of two flowers in the previous iteration. IfA1−N,mtandA1−N,ktare the set of variables for mth and kth flowers, respectively, then the solution can be modified by(12)A1−N,ft+1=A1−N,ft+ε(A1−N,mt−A1−N,kt).for the fth set of solution. ɛ is a random number between [0,1] in order to apply linear distribution in self-pollination. The mth and kth flowers are randomly chosen in the optimization process with no specific selection rule. Further research will analyze the effect of using elitist or other selection rules on convergence behavior.In order to reach a precise optimum solution, the region around values which may slightly violate the design constraints must also be scanned. In addition to that, the set of design variables must not violate any design constraint or limit. Therefore, a special violation handling strategy is used in the proposed method. The constraint handling strategy is an iterative stage. First, a certain amount of constraint violation is allowed and then the value of this violation is getting smaller. At the end of the optimization process, the value of constraint violation should be zero. The constraint handling process can be explained in two stages.Stage 1: Initially, a certain percentage of constraint violation (a%) is allowed and it is linearly decreased for each iteration until t1th iteration. In the updating process of variables, if the constraint violation is more than the allowed value, the set of variables with the minimum constraint violation is accepted. If the constraint violation is less than the allowed, the best solution with the best objective is updated. However, the new design may be closer to the constraint domain boundary and special cares have to be taken in order not to end up in the infeasible region in the next iterations.Stage 2: In order to prevent constraint violation in the search of an effective solution region, a slight violation percentage (b%) is allowed after t1th iteration until t2th iteration and the allowed violation is iteratively decreased. The comparison of design variables is done by the same procedure of the first stage. After the t2th iteration, constraint violation is prevented. Also, the violation of constraints can be linearly decreased to zero for t2th iteration.The proposed optimization algorithm was tested against three classical weight minimization problems of a spatial 25-bar truss, a spatial 72-bar truss and a planar 200-bar truss, respectively. Each structure must be designed against multiple loading conditions. The last test case was selected in order to show the efficiency of the present approach for fairly large structural systems. Optimization results were compared with results available in the literature. Internal parameters were set as follows: 30, 0.5, 10,000 (100,000 for the third problem), 0.5%, 0.01%, 1000 and 9000 (90,000 for the third problem) for nf, p, gmax, a, b, t1 and t2, respectively. The statistical results were obtained after 50 independent runs of the optimization process were carried out.The first test case concerns the spatial 25-bar truss structure shown in Fig. 2. Elements are categorized in eight groups (see Table 1); hence, this problem includes eight sizing variables. The elasticity modulus of the material is 10Msi and the density of the material is 0.1lb/in.3. The cross sectional areas of bars can vary between 0.01 and 3.4in.2. The structure must be designed for the two independent loading conditions listed in Table 2. The allowable displacement for each node in all coordinate directions is ±0.35in. Stress limits for compression and tension are given in Table 1 for all member groups. The optimized design of FPA weighs 545.159lb, which is nearly equal to the best result quoted in the literature (see Table 3).Table 4shows the trend of variation of the optimized weight for the spatial 25-bar truss when different combinations of population sizes and the maximum numbers of iterations are selected. It can be seen that increasing population has a positive effect after 1000th iteration. Using a small population size (e.g. 5 flowers) does not yield good results, especially for fewer iterations.Sensitivity of FPA to constraint tolerance parameters a and b and numbers of iterations t1 and t2 was also investigated. For that purpose, three combinations of these parameters were selected (see Table 5). While feasible designs could always be obtained by FPA, structural weights were pretty far from the optimum value quoted in Table 3. In the first case, the allowed constraint violation is smaller than the limit indicated in Section 4. Since constraint violation must be reduced to zero, lightweight feasible designs are eliminated from the search process. This behavior became more evident in the second case as no constraint violation is allowed after 1000th iteration. In the last case, reducing the number of iterations t1 and t2 also was ineffective as it led to miss designs with small constraint violations. In summary, the present FPA algorithm is very sensitive to constraint tolerance and number of iteration parameters which must be carefully selected in order to optimize convergence behavior.The second test problem is the spatial 72-bar truss structure shown in Fig. 3. The elasticity modulus and density of the material are the same as those in the first example. The maximum displacement of joints is ±0.25 in for all coordinate directions. The same stress limit in tension and compression is set for all elements, ±25ksi. Cross sectional areas of elements can vary between 0.1 and 3.0in.2. The structure must be designed for the two independent loads as listed in Table 6.The truss system is divided into 16 sizing variables. The corresponding group numbers for structural members are shown in Table 7, together with the optimization results of FPA and other state-of-the-art metaheuristic optimization algorithms. Overall, the present algorithm found the best design within the prescribed constraint tolerance.The last test problem regards the weight minimization of a fairly large planar truss structure including 200 elements and 77 nodes. The model of the structure is schematized in Fig. 4. The elasticity modulus and density of the material are taken as 30Msi and 0.283lb/in3, respectively. Only stress constraints are considered for this problem: the limit stress is the same in tension and compression for all members (±25ksi). Cross sectional areas of elements can vary between 0.1 and 20in.2. Member grouping leads to have 29 sizing variables (see Table 8). The structure is subject to three independent load cases:(i)+1kip load in X-direction at nodes 1, 6, 15, 20, 29, 34, 43, 48, 57, 62 and 71;−10kip load in Y-direction at nodes 1–6, 8, 10, 12, 14–20, 22, 24, 26, 28–34, 36, 38, 40, 42–48, 50, 52, 54, 56–62, 64, 66, 68, 70–75;combination of first and second loading conditions.Table 9shows that the present approach is very competitive in finding optimum designs. Furthermore, the average weight is very close to the best weight and a small standard deviation on optimized weight (lb) is observed.

@&#CONCLUSIONS@&#
In this study, a structural optimization approach based on the flower pollination algorithm has been formulated, and it has been tested using three classical weight minimization problems of 3D and 2D truss structures. The largest problem consists of 29 sizing variables. The proposed algorithm proved itself to be competitive with other state-of-the-art metaheuristic optimization methods.Similar to other metaheuristic algorithms, the flower pollination algorithm combines local and global optimization. However, FPA runs these processes in a fairly different way. In global search, the best sets of variables are used in the generation of new variables while the best sets of variables are generally considered in the local optimization part of the algorithm. The global optimization is sustained by using Lévy distribution. Since the best sets of variables are used, the convergence of the FPA to the optimum values is effective compared with the algorithms using a simply randomization process for global optimization. In local optimization, the values of two sets of design variables are used. These sets are randomly chosen and this procedure allows not to be entrapped in a local optimum.According to the sensitivity analysis carried out for the 25-bar truss structure, increasing population has a positive effect after 1000th iteration and FPA does not yield good results for small number of flowers, which is also true for many population-based algorithms because a small population does not provide sufficient diversity. Therefore, a moderate population size should be used. Additionally, the computational cost of the algorithm seems suitable. The number of structural analyses required in the optimization process are 1618, 422 and 2088, respectively, for examples 1–3, in order to find a feasible trial design only 1% heavier than the target optimum.The FPA algorithm developed in this study is also combined with an iterative constraint handling strategy with the purpose of finding optimum designs that do not violate any constraint. By scanning trial designs with a small amount of constraint violation, it may be possible to generate new feasible solutions as the iterations proceed. This makes the proposed approach well suited for finding optimum cross-sectional areas of structural members.Although the present results are encouraging, there is still room for improvement. Future studies must focus on the detailed parametric study so as to find the best parameter setting for the algorithms so that they can solve a wider range of structural optimization problems. In addition, even large-scale problems with more design variables and more complex constraints can be attempted. Furthermore, it would be also very useful to use a multiobjective approach to structural optimization in real-world applications.