@&#MAIN-TITLE@&#
Finite and infinite-horizon single vehicle routing problems with a predefined customer sequence and pickup and delivery

@&#HIGHLIGHTS@&#
We study a specific stochastic vehicle routing problem with deliveries and pickups.The customers are served according to a particular sequence.The decisions are made at the first visit to each customer.The optimal routing strategy can be found by a dynamic programming algorithm.The optimal strategy has a specific threshold structure when the time horizon is finite or infinite.

@&#KEYPHRASES@&#
Logistics,Dynamic programming,Routing with pick up and delivery,

@&#ABSTRACT@&#
We consider the problem of finding the optimal routing of a single vehicle that starts its route from a depot and picks up from and delivers K different products to N customers that are served according to a predefined customer sequence. The vehicle is allowed during its route to return to the depot to unload returned products and restock with new products. The items of all products are of the same size. For each customer the demands for the products that are delivered by the vehicle and the quantity of the products that is returned to the vehicle are discrete random variables with known joint distribution. Under a suitable cost structure, it is shown that the optimal policy that serves all customers has a specific threshold-type structure. We also study a corresponding infinite-time horizon problem in which the service of the customers is not completed when the last customer has been serviced but it continues indefinitely with the same customer order. For each customer, the joint distribution of the quantities that are delivered and the quantity that is picked up is the same at each cycle. The discounted-cost optimal policy and the average-cost optimal policy have the same structure as the optimal policy in the finite-horizon problem. Numerical results are given that illustrate the structural results.

@&#INTRODUCTION@&#
In the classical vehicle routing problem (VRP) the objective is to find the optimal routing of identical vehicles that start from a depot and deliver goods to a set of geographically dispersed customers. The capacitated vehicle routing problem (CVRP) is a VRP in which the capacity of the vehicles is finite. The quantity of the goods that each customer demands may be constant or a random variable. The CVPRs have drawn enormous interest from many researchers during the last 50years. It is a NP-hard problem and a great number of exact algorithms (e.g. branch-and-bound, branch-and-cut, branch-and-cut-and-price methods) and heuristics and metaheuristics (e.g. tabu search, simulated annealing, genetic algorithms, colony optimization) have been developed. The exact algorithms find the global minimum of the cost function, while the heuristics and metaheuristics produce good solutions but do not guarantee optimality. Metaheuristics usually give better solutions than heuristics, but require more computational time. Surveys of various relevant models and solutions can be found in Toth and Vigo (2002), Simchi-Levi et al. (2005), Liong et al. (2008). The capacitated vehicle routing problem with pickups and deliveries (CVRPPD) is an extension to the CVRP where the vehicles deliver goods to customers and pick some goods up at customer sites. In most articles dealing with the CVRPPD (see e.g. Toth and Vigo, 1997, 1999; Hernandez-Perez and Salazar-Gonzalez, 2004; Ropke and Pisinger, 2006) there is a distinction of the customers to delivery customers and pick-up customers. The delivery customers receive goods from the vehicles and the pick-up customers return goods to the vehicles. The goal is to find optimal routes for a fleet of vehicles to visit the pick-up and the drop-off locations. It can also be assumed (see e.g. Nagy and Salhi, 2005; Bianchessi and Righini, 2007; Gribkovskaia et al., 2007; Zachariadis et al., 2010) that all customers may simultaneously receive and give goods. For example, this situation arises when the vehicles deliver to stores a product (e.g. milk) that expires after a few days. In this case it is reasonable to assume that the vehicles simultaneously provide the customers with new (fresh) products and collect the old (expired) ones.In the present paper we introduce a simple CVRPPD. In this problem it is assumed that a single vehicle starts its route from a depot and picks up from and delivers K different products to N customers according to a predefined customer sequence 1→2→⋯→N. There is no distinction between delivery customers and pick-up customers since all customers may receive and may return products. The vehicle has a single compartment that may carry any quantity of product i∈{1,…,K} provided that its total capacity is not exceeded. It is assumed that the items of different products are of the same size. For example, if K=2 and the two products are wine and beer it is assumed that a bottle of wine has the same size as a bottle of beer. The total quantity of products that is collected by the vehicle from each customer and his demands for new products are discrete random variables with known joint probability distribution. The vehicle is allowed during its route to return to the depot to empty returned products and restock with new products. It seems reasonable that, when the vehicle returns to the depot for replenishment, it is not always preferable to load it to its full capacity, as there needs to be some space available in order to accommodate the returned products of the next customers. The total demand of each customer for all products is assumed to be less than or equal to the capacity of the vehicle. Furthermore, the total quantity of the items that each customer returns does not exceed the vehicle capacity. It is assumed that the travel costs among all points in the network (depot and customer sites) are known. The objective is to find the policy that minimizes the expected total cost for the service of all customers.Minis and Tatarakis (2011) introduced the above problem with K=1. They selected as decision epochs of the problem, the epochs at which the service of each customer has been completed and presented a dynamic programming formulation. They proved that, after the completion of the service of a customer, it is optimal for the vehicle to proceed to the next customer if its empty space exceeds a critical level that depends on the number of available items for delivery. This is a partial characterization of the optimal policy. Its proof is complicated and it seems impossible to be extended for K>1. They also obtained numerical results and analyzed the performance of the algorithm. In the present paper we choose as decision epochs of the problem, the epochs at which the vehicle visits for the first time each customer and has satisfied as much of the customer’s demands for new products as possible and has picked up as much of the returned products as possible. Note that it is possible at these decision epochs to have demands for new products that have not been satisfied if the quantities carried by the vehicle are not sufficient. It is also possible at these decision epochs to have old products that have not been picked up by the vehicle due to the lack of space. However, this choice of decision epochs enables us, for any value of K⩾1, to present for all possible cases suitable dynamic programming equations that have elegant and usable forms. These equations permit us not only to find numerically the optimal policy but to prove that it has a threshold-type structure, that is intuitively reasonable. Specifically, the set of all possible states (i.e. remaining quantities of the products in the vehicle and empty space of the vehicle) after the first visit to each customer consists of four disjoint subsets. If the state belongs to the first subset then the optimal decision is to proceed to the next customer. If the state belongs to the second subset then the optimal decision is to go to the depot for loading and then go to the next customer. If it belongs to the third subset then the optimal decision is to go to the depot to unload any returned products, to restock the owed quantity of the products, to load additional items, to return to the customer to satisfy the owed demands and/or to pick up remaining old products and then proceed to the next customer. If it belongs to the fourth subset then the optimal decision is to make two trips to the depot before going to the next customer. This characterization of the optimal policy is complete and permits us to design a special-purpose efficient dynamic programming algorithm for its determination.The problem that we described above can be considered as a generalization of the problem introduced by Yang et al. (2000) in which it is assumed that the vehicle delivers to the customers only one product, i.e. K=1, and it does not pick up any old products. Yang et al. developed a dynamic programming approach and proved that for each customer j∈{1,…,N−1} there exists a critical number sjsuch that the optimal decision, after servicing customer j, is to continue to customer j+1 if the remaining quantity in the vehicle is greater than or equal to sj, or to return to the depot for replenishment if it is less than sj. Tsirimpas et al. (2008) studied the problem with pick-up and delivery with K=1 when, for each customer, the quantity that is picked up and the demands for new products are not random variables but constant numbers. They also assumed that the vehicle visits each customer only once and they developed a suitable dynamic programming algorithm for the determination of the optimal policy. Note that Yang et al. (2000) and Tsirimpas et al. (2008) selected as decision epochs for the problems that they studied, the epochs at which the service of each customer has been completed. The problem of delivering K different products if the demands of the products are random variables was studied (i) by Tatarakis and Minis (2009) and Pandelis et al. (2012) when each product is stored in its dedicated compartment in the vehicle and (ii) by Tatarakis and Minis (2009) and Pandelis et al. (2013) when all products are stored together in the vehicle’s single compartment.In the present paper, we also study the corresponding infinite time-horizon problem if the service of the customers does not stop when the last customer has given the returned items and has received the new products but it continues indefinitely with the same customer order. It is assumed that, when the vehicle completes a tour, the demands of each customer for new products and the quantity of returned products are renewed for the next tour and follow the same joint distribution. Using well-known results of Markov decision processes we prove that the discounted-cost optimal policy and the average-cost optimal policy have the same threshold-type structure as the optimal policy in the initial finite-horizon problem.As mentioned by Minis and Tatarakis (2011), a practical application of the considered problem could be the so-called ex-van sales. In ex-van sales the driver of the vehicle acts as a salesman. He visits his customers (retail outlets, supermarkets, kiosks, stores, etc.) in an area typically according to a predefined sequence. The demands of each customer for new products (e.g. milk, bottles of beer or wine) and the quantity of returned products (e.g. expired milk, empty bottles of beer or wine) are not known in advance but they are revealed upon arrival at the customer’s site. If a customer’s demand for a new product exceeds the quantity that is loaded in the vehicle or if the quantity of returned products exceeds the empty space in the vehicle, the driver has to go to the depot to empty returned products and to restock with new ones. Another example could be the routing of a self propelled vehicle in a manufacturing shop that transfers discrete parts to workcenters in a predefined sequence (see Rembold et al., 1985). Note that in addition to the main pathway connecting the workcenters, there are spurs connecting each workcenter with the materials warehouse, allowing the return and the reloading of the vehicle. The required quantities for new discrete parts may be stochastic due to failures and they are revealed when the vehicle arrives at a workcenter. If the required quantities for new discrete parts exceed the quantities that are loaded in the vehicle or if the quantity of useless discrete parts exceeds the empty space in the vehicle, then the vehicle has to go to the materials warehouse to empty the useless discrete parts and to replenish with new ones.The rest of the paper is organized as follows. In the next section we present the finite-horizon pick-up and delivery problem, we define the decision epochs and we present the dynamic programming equations for the determination of the optimal policy. It is proved that the optimal policy has a specific threshold-type structure. The infinite-horizon problem is presented and analyzed in Section 3. It is proved that the discounted-cost optimal policy and the average-cost optimal policy have the same structure as the finite-horizon optimal policy. Numerical results illustrate the theoretical results of Sections 2 and 3. The conclusions of the paper are given in the last section.We consider a set of nodes V={0,1,…,N} with node 0 denoting the depot and the nodes 1,…,N corresponding to customers. The customers are serviced in the order 1,…,N by a vehicle of capacity Q. The vehicle carries K different kinds of products to satisfy customers’ demands. The same vehicle is also used to store products that are returned by the customers. We assume that the items of all products are of the same size. The vehicle starts its route with a load of all products that is less than or equal to Q and after servicing all customers it returns to the depot. The demand of customer j, j=1,2,…,N, for product i, i=1,2,…,K, is a discrete random variableξijand the total quantity of products returned by customer j is a discrete random variable ψj. The joint probability distribution ofξij,i=1,…,Kand ψjis assumed known. The actual demands for new products and the quantity of returned products of each customer become known upon the vehicle’s arrival at the customer’s site. We assume that the total demand for new products and the quantity of returned products of each customer cannot exceed the vehicle’s capacity, that is,maxj=1,2,…,N∑i=1Kξij⩽Qand maxj=1,2,…,Nψj⩽Q. When the vehicle visits customer j for the first time it satisfies as much demands as possible and picks up the largest possible quantity of returned products. If part of the demands is not satisfied and/or there is not enough space for all returned products, the vehicle goes to the depot, empties returned products, restocks, and returns to customer j. After satisfying the demand of the last customer and picking up all of his returned products, the vehicle returns to the depot. We denote by cj,j+1, j=1,2,…,N−1, the travel cost between customers j and j+1, and by cj0, j=1,2,…,N, the travel cost between customer j and the depot. These costs can be considered as the costs of the gasoline that the vehicle needs to cover the distances between customers or the distances between customers and the depot. We naturally assume that these distances satisfy the triangle inequality, i.e.cj,j+1⩽cj0+c0,j+1,j=1,…,N-1.The road network is depicted in Fig. 1.Let zi, i=1,2,…,K, be the load of product i carried by the vehicle after the first visit at a customer’s site, and r the empty space; negative values for ziand r denote the unsatisfied demand for product i and lack of empty space for returned products. Letz=∑i=1Kzi-, withzi-=min{0,zi}. When z=0 and r⩾0 (demand for products and empty space fully satisfied), the vehicle either proceeds directly to the next customer or goes to the depot, empties any returned products, restocks with loads θi, i=1,2,…,K, of products 1,2,…,K, where∑i=1Kθi⩽Q, and then visits the next customer. When z<0 and/or r<0, the vehicle goes to the depot, empties returned products, and restocks the owed quantity −z−=−min(0, z). Then it has the following choices: (i) it loads additional quantities θiof products 1,2,…,K, so that at least −r− empty space remains after delivering the owed quantity −z−, that is,∑i=1Kθi⩽Q+min(z-,r-), returns to the customer, satisfies demand and/or picks up remaining returned products, and then proceeds to the next customer and (ii) returns to the customer, satisfies demand and/or picks up remaining returned products, makes a second trip to the depot where it empties returned products, restocks with loads θiof products 1,2,…,K, where∑i=1Kθi⩽Q, and proceeds to the next customer. Our objective is to determine a vehicle routing strategy that minimizes the expected total cost during a visit cycle.We define vectorsz¯=[z1,z2,…,zK],ξ¯j=ξ1j,ξ2j,…,ξKj,θ¯=[θ1,θ2,…,θK], and denote byfj(z¯,r)the minimum expected cost when the load of product i carried by the vehicle after visiting customer j for the first time is equal to ziand the empty space is equal to r. Then, an optimal routing strategy can be determined by the following dynamic programming equations (see e.g. Eq. (6.5) in Bather’s (2000) book). For j=1,2,…,N−1 we have two cases.Case 1.If z1,z2,…,zK, r⩾0, then(1)fj(z¯,r)=min{Hj(z¯,r),Aj}.If∑i=1Kzi-+r-<0, then(2)fj(z¯,r)=2cj0+minH∼j∑i=1Kzi-,r-,Aj.For z1,z2,…,zK, r⩾0 we have(3)Hj(z¯,r)=cj,j+1+Efj+1z¯-ξ¯j+1,r+∑i=1Kminzi,ξij+1-ψj+1,for z−+r−<0 we have(4)H∼j(z,r)=cj,j+1+minθ¯:∑i=1Kθi⩽Q+min(z-,r-)Efj+1θ¯-ξ¯j+1,Q+r--∑i=1K(θi-min(θi,ξij+1))-ψj+1,and(5)Aj=cj0+cj+1,0+minθ¯:∑i=1Kθi⩽QEfj+1θ¯-ξ¯j+1,Q-∑i=1K(θi-min(θi,ξij+1))-ψj+1.In the boundary we have(6)fN(z¯,r)=cN0+2cN01∑i=1Kzi-+r-<0.Finally, the minimum total expected cost is(7)f0=c10+minθ¯:∑i=1Kθi⩽QEf1θ¯-ξ¯1,Q-∑i=1K(θi-min(θi,ξi1))-ψ1.In (3), (4), (5), (7) the expected values are taken with respect to the random vectorsξ¯j,j=1,…,N, and to the random variables ψj,j=1,…,N. The first term in the curly brackets in (1) corresponds to the action of proceeding to the next customer and the second term corresponds to the action of going to the depot for restocking before proceeding to the next customer. The first term in the curly brackets in (2) corresponds to the action of returning to the depot once for restocking before proceeding to the next customer and the second term corresponds to the action of returning to the depot twice for restocking before proceeding to the next customer.In the following lemma we prove monotonicity properties needed for the characterization of the structure of the optimal routing strategy.Lemma 1Hj(z¯,r)andH∼j(z,r)are non-increasing in each of their arguments.To prove the lemma, we will need to show thatfj(z¯,r)is also non-increasing in its arguments. The proof is by induction on j. First, the induction base is established byfN(z¯,r)being non-increasing (Eq. (6)). Then, assuming thatfj+1(z¯,r)is non-increasing, we will show thatHj(z¯,r),H∼j(z,r), andfj(z¯,r)are non-increasing.FunctionHj(z¯,r)is non-increasing by the induction hypothesis and Eq. (3). To show that functionH∼j(z,r)is non-increasing, consider z′⩽z and r′⩽r. Then we get from Eq. (4)(8)H∼j(z,r)-H∼j(z′,r′)=minθ¯:∑i=1Kθi⩽Q+min(z-,r-)Efj+1θ¯-ξ¯j+1,Q+r--∑i=1K(θi-min(θi,ξij+1))-ψj+1-minθ¯:∑i=1Kθi⩽Q+min(z′-,r′-)Efj+1θ¯-ξ¯j+1,Q+r′--∑i=1K(θi-min(θi,ξij+1))-ψj+1⩽minθ¯:∑i=1Kθi⩽Q+min(z′-,r′-)Efj+1θ¯-ξ¯j+1,Q+r--∑i=1K(θi-min(θi,ξij+1))-ψj+1-minθ¯:∑i=1Kθi⩽Q+min(z′-,r′-)Efj+1θ¯-ξ¯j+1,Q+r′--∑i=1K(θi-min(θi,ξij+1))-ψj+1⩽0,where the last inequality follows from the induction hypothesis.It remains to show thatfj(z¯,r)is non-increasing. First, we prove the monotonicity property with respect to zi, i=1,2,…,K. Because of symmetry it suffices to show the result with respect to one of the arguments, say zK. For∑i=1K-1zi-+r-<0the result follows directly from the monotonicity ofH∼j(z)and Eq. (2). Consider now z1,z2,…,zK−1, r⩾0, and letz¯(K-1)be the vector consisting of the first K−1 elements ofz¯. For0⩽zK′<zKandzK′<zK<0we getfj(z¯(K-1),zK,r)⩽fj(z¯(K-1),zK′,r)by the monotonicity ofHj(z¯)andH∼j(z)respectively (Eqs (1) and (2)). To complete the proof we still need to show thatfj(z¯(K-1),0,r)⩽fj(z¯(K-1),-1,r). From Eq. (1) and the triangle inequality we get(9)fj(z¯(K-1),0,r)⩽Aj=cj0+cj+1,0+minθ¯:∑i=1Kθi⩽QEfj+1θ¯-ξ¯j+1,Q-∑i=1K(θi-min(θi,ξij+1))-ψj+1⩽2cj0+cj,j+1+minθ¯:∑i=1Kθi⩽QEfj+1θ¯-ξ¯j+1,Q-∑i=1K(θi-min(θi,ξij+1))-ψj+1=Bj.From Eqs. (4) and (9) we get(10)Bj-2cj0-H∼j(-1,r)=minθ¯:∑i=1Kθi⩽QEfj+1θ¯-ξ¯j+1,Q-∑i=1K(θi-min(θi,ξij+1))-ψj+1-minθ¯:∑i=1Kθi⩽Q-1Efj+1θ¯-ξ¯j+1,Q-∑i=1K(θi-min(θi,ξij+1))-ψj+1⩽0.From Eq. (2) we havefj(z¯(K-1),-1,r)=2cj0+min{H∼j(-1,r),Aj},which combined with Eqs. (9) and (10) yieldsfj(z¯(K-1),0,r)⩽fj(z¯(K-1),-1,r). The monotonicity property with respect to r is proved similarly. The induction hypothesis is used directly throughout the state space except in the proof offj(z¯,0)⩽fj(z¯,-1), wherez¯is such that∑i=1Kzi-=0. This proof is carried out by the use of equations analogous to (9) (withfj(z¯,0)instead offj(z¯(K-1),0,r))and (10), which takes the formBj-2cj0-H∼j(0,-1)=minθ¯:∑i=1Kθi⩽QEfj+1θ¯-ξ¯j+1,Q-∑i=1K(θi-min(θi,ξij+1))-ψj+1-minθ¯:∑i=1Kθi⩽Q-1Efj+1θ¯-ξ¯j+1,Q-1-∑i=1K(θi-min(θi,ξij+1))-ψj+1⩽0,and is proved similarly to Eq. (8).□The following theorem characterizes the optimal vehicle routing strategy after it visits customer j∈{1,…,N−1} for the first time.Theorem 1(i)For each z1,z2,…,zK⩾0 there exists integer s1j(z1,z2,…,zK)⩾0 such that it is optimal for the vehicle to proceed to customer j+1 if and only if r⩾s1j(z1,z2,…,zK). Moreover, s1j(z1,z2,…,zK) is non-increasing in each of its arguments.There exists rj⩽0 such that it is optimal for the vehicle to make two trips to the depot when z1,z2,…,zK⩾0 and r<rj.There exists qj⩽0 such that it is optimal for the vehicle to make two trips to the depot when r⩾0 and∑i=1Kzi-<qj.For each r<0 there exists integer s2j(r)<0 such that it is optimal for the vehicle to make two trips to the depot if and only if∑i=1Kzi-⩽s2j(r). Moreover, s2j(r) is non-increasing.The existence of threshold s1j(z1,z2,…,zK) is a consequence ofHj(z¯,r)being non-increasing in its arguments. To see why this threshold function is non-increasing in its arguments, assume thatzK′<zKands1jz1,z2,…,zK′<s1j(z1,z2,…,zK). By the definition of the threshold function, forz1,z2,…,zK′andr=s1jz1,z2,…,zK′it is optimal for the vehicle to proceed to the next customer. BecauseHj(z¯,r)is non-increasing, for z1,z2,…,zKandr=s1jz1,z2,…,zK′it should still be optimal for the vehicle to proceed to the next customer. However, this is a contradiction because the specific value of r is below the threshold s1j(z1,z2,…,zK).Parts (ii)–(iv) follow fromH∼j(z,r)being non-increasing in its arguments.□In view of the above theorem, the optimal policy for K=1, i.e. the critical numbers s1j(z1)⩾0, 0⩽z1⩽Q, s2j(r)⩽0, −1⩽r⩽−Q, rj⩽0 and qj⩽0 for each customer j∈{1,…,N−1} can be found by the following special-purpose dynamic programming algorithm:Algorithm for the determination of the critical numbersrj, qj, s1j(z1), 0⩽z1⩽Qands2j(r), −1⩽r⩽−Qfor customerj=1,…,N−1Step 0.SetfN(z1,r)=cN0+2cN01z1-+r-<0,|z1|⩽Q, ∣r∣⩽Q, z1+r⩽Q, and j=N−1.Set r=−1.(Determination of critical number rj) IfH∼j(0,r)>Aj, do the following:1.Set rj=r+1.For (z1, r) such that 0⩽z1⩽Q, rj⩽r<0 setfj(z1,r)=2cj0+H∼j(0,r).For (z1, r) such that 0⩽z1⩽Q, −Q⩽r<rjset fj(z1, r)=2cj0+Aj.Go to Step 3.Otherwise, set r=r−1.If r=−Q−1, do the following:1.Set rj=−Q.For (z1, r) such that 0⩽z1⩽Q, −Q⩽r<0 setfj(z1,r)=2cj0+H∼j(0,r).Go to Step 3.Otherwise, go to Step 2.Set z1=−1.(Determination of critical number qj) IfH∼j(z1,0)>Aj, do the following:1.Set qj=z1+1.For (z1, r) such that qj⩽z1<0, 0⩽r⩽Q setfj(z1,r)=2cj0+H∼j(z1,0).For (z1, r) such that −Q⩽z1<qj, 0⩽r⩽Q set fj(z1, r)=2cj0+Aj.Go to Step 5.Otherwise, set z1=z1−1. If z1=−Q−1, do the following:1.Set qj=−Q.For (z1, r) such that −Q⩽z1<0, 0⩽r⩽Q setfj(z1,r)=2cj0+H∼j(z1,0).Go to Step 5.Otherwise, go to Step 4.Set z1=0.Set r=Q−z1.(Determination of critical number s1j(z1)) If Hj(z1, r)>Aj, do the following:1.Set s1j(z1)=r+1.For 0⩽r⩽s1j(z1)−1 set fj(z1, r)=Aj.For s1j(z1)⩽r⩽Q−z1 set fj(z1, r)=Hj(z1, r).Set z1=z1+1. If z1⩽Q, go to Step 6. Otherwise, go to Step 8.Otherwise, set r=r−1. If r=−1, do the following:1.Set s1j(z1)=0.For 0⩽r⩽Q−z set fj(z1, r)=Hj(z1, r).Set z1=z1+1. If z1⩽Q, go to Step 6. Otherwise, go to Step 8.Otherwise, go to Step 7.Set r=−1.Set z1=−1.(Determination of critical number s2j(r)) IfH∼j(z1,r)>Aj, do the following:1.Set s2j(r)=z1.For −Q⩽z1⩽s2j(r) set fj(z1, r)=2cj0+Aj.For s2j(r)+1⩽z1⩽−1 setfj(z1,r)=2cj0+H∼j(z1,r).Set r=r−1. If r⩾−Q, go to Step 9. Otherwise, go to Step 11.Otherwise, set z1=z1−1. If z1=−Q−1, do the following:1.Set s2j(r)=−Q−1.For −Q⩽z1⩽−1 setfj(z1,r)=2cj0+H∼j(z1,r).Set r=r−1. If r⩾−Q, go to Step 9. Otherwise, go to Step 11.Otherwise, go to Step 10.Set j=j−1. If j⩾1 go to Step 1. Otherwise, stop.As illustration we present the following example.Example 1Suppose that N=7, Q=10, K=1. We give below the symmetric matrix C=(cij), 0⩽i, j⩽7, whose non-zero elements are the travel costs cj,j+1 between customer j∈{1,…,6} and customer j+1 and the travel costs cj0 between customer j∈{1,…,7} and the depot. We observe that these costs satisfy the triangle inequality.C=0765437670500000650400005040300040030200300020507000050260000020.We assume that for each customer j∈{1,…,7} the demandξ1jfor new items of the product 1 and the quantity ψjof returned items are independent and follow the binomial distribution B(10, 0.4), i.e.Prξ1j=x=Pr(ψj=x)=10x0.4x0.610-x,x=0,…,10. In Table 1we present, for each customer j=1,…,6, the critical numbers s1j(z1), 0⩽z1⩽Q, s2j(r), −Q⩽r⩽−1, rj, qj.Note that Parts (i) and (iv) of Theorem 1 are confirmed numerically since for j∈{1,…,6}, s1j(z1), 0⩽z1⩽10, and s2j(r), −1⩽r⩽−10, are non-increasing in z1 and r, respectively. In Figs. 2 and 3below we present the optimal decision for each state (z1, r), ∣z1∣⩽10, ∣r∣⩽10, z1+r⩽10, after the first visit to the first and to the third customer. Specifically, the action of proceeding to the next customer is denoted by a dark blue dot, the action of returning to the depot once is denoted by a red square and the action of making two trips to the depot is denoted by a light blue rhomb.We implemented the algorithm by running the corresponding Matlab programs on a personal computer equipped with an Intel Core 2 Duo, 2.5GHz processor and 4GB of RAM. The computation time (38.81seconds) of the special purpose algorithm is considerably smaller than the computation time (58.39seconds) of the initial dynamic programming algorithm that is based on Eqs. (1)–(6). The minimum total expected costf0=c10+min0⩽θ⩽QEf1θ-ξ11,Q-θ+minθ,ξ11-ψ1is found to be approximately equal to 65.29. Both algorithms enable us to determine the optimal quantity of product 1 that is loaded in the vehicle when it returns to the depot for replenishment. For example, if after the first visit of the vehicle to the customer 1 the state is (z1, r)=(−5, 4), then the optimal decision is to return to the depot to empty the old items that it carries, load 5 items (owed quantity), return to customer 1 to deliver the owed quantity and then proceed to customer 2. If after the first visit to customer 1 the state is (z1, r)=(−5, −7), the optimal decision is to return to the depot, empty returned products, load 5 items (owed quantity), return to customer 1 in order to deliver the owed quantity and pick up 7 items (remaining returned items), make a second trip to the depot, empty 7 returned items, load 3 new items of the product and go to customer 2.We consider the problem that we studied in the previous section with the following modification: The service of the customers does not stop when the service of the last customer N has been completed but it continues indefinitely with the same customer order. This means that, after the service of customer N has been completed, the vehicle services again customer 1, customer 2, and so on. Let cN1 denote the travel cost from customer N to customer 1. The road network is depicted in Fig. 4.The demands of the customers for the products and the quantities of the returned products are renewed at successive tours of the vehicle. We assume that for each customer j∈{1,…,N} the distribution of the random vector(ξ1j,…,ξKj,ψj)that consists of the demands for products 1,…,K and the quantity that is given to the vehicle remains the same at each cycle. We suppose that, at each cycle, the vehicle visits each customer, satisfies as much demands as possible and picks up the largest possible quantity of returned products, and chooses one decision among some possible decisions that coincide with the possible decisions in the finite-horizon problem. If the customer’s demands for all products are satisfied and the whole quantity of returned products is picked up by the vehicle, there are two possible decisions: (i) to proceed directly to the next customer and (ii) to go to the depot to empty returned items and restock with new products (not necessarily to the full capacity of the vehicle) and then go to the next customer. If part of the customer’s demands is not satisfied and/or there is not enough empty space in the vehicle to pick up the whole quantity of the returned products, the possible options are: (i) to go to the depot to empty returned items, restock the owed quantity and load additional items of all products (so that there is some remaining empty space for the remaining returned products), return to the customer, deliver the owed quantity and/or pick up the remaining returned products, and then proceed to the next customer and (ii) to go to the depot to empty returned items, restock the owed quantity, return to the customer, deliver the owed quantity and/or pick up the remaining returned products, make a second trip to the depot, empty returned items, restock with new products and proceed to the next customer.It is assumed that the driver selects his decisions at equidistant time epochs τ=0,1,… (e.g. every 12hours). This means that if, for example, the vehicle visits the third customer and the decision is selected at 8 am then the next decision is selected at 8pm after the visit at fourth customer’s site. It is also assumed that the time interval between two consecutive decision epochs is greater than the required time for two trips of the vehicle if it follows any of the above decisions. Although we impose these assumptions in order to apply well-known results from the theory of Markov decision processes, there are situations in which these assumptions may hold, as the practical applications that we mentioned in Section 1. Specifically, in the first application (ex-van sales) suppose that the supply of the customers with new products and the collection of expired products does not stop when the service of the last customer has been completed but it continues with the same customer order for a long time horizon. It can be assumed that the driver selects his decisions at equidistant time epochs (e.g. every 12hours). In the second application (self propelled vehicle in a manufacturing shop) it can be assumed that the supply of the workcenters with new discrete parts and the collection of useless discrete parts from the workcenters do not stop when the service of the last workcenter has been completed but they are continued indefinitely at equidistant time epochs with the same order.The routing of the vehicle in the infinite-horizon setting is controlled by a policy π that is a rule for choosing decisions at time epochs τ=0,1,… The decision that is chosen by a policy at a decision epoch may depend on the history of the process or may be randomized in the sense that it is chosen by specific probabilities. An appealing class of policies is the class of stationary policies. A stationary policy chooses at each decision epoch a decision that depends only on the current state of the system. The optimization criteria in the infinite-horizon problem are the minimization of the expected total discounted cost and the minimization of the expected long-run average cost per unit time. The expected total discounted cost of a policy π is defined as the expected total cost during an infinite-time horizon if the costs are discounted at a rate α∈(0,1) per unit time given that policy π is employed. The expected long-run average cost per unit time of a policy π is defined as the limit as n→∞ of the expected cost incurred until the nth decision epoch divided by n, given that policy π is employed. Using well-known results of Markov decision processes (see Chapter 6 in Ross (1992)) we will see that, under any one of these criteria, the optimal policy is stationary and has the same structure as the optimal policy in the finite-horizon problem. The state space I of the system consists of all states(j,z¯,r), where j=1,…,N is the customer andz¯=(z1,…,zK)and r are the possible loads of products 1,…,K that remain in the vehicle and the empty space of the vehicle, respectively, after it has visited the jth customer and has satisfied as much demand as possible and picked up the largest possible quantity of returned products.LetVnα(j,z¯,r),(j,z¯,r)∈I,0<α<1, be the minimum n-step expected discounted cost if the initial state is(j,z¯,r)∈Iand α is the discount factor. This quantity satisfies the following dynamic programming equations for n=1,2,…If z1,…,zK, r⩾0, thenVnα(j,z¯,r)=mincj,j+1+αEVn-1αj+1,z¯-ξ¯j+1,r+∑i=1Kminzi,ξij+1-ψj+1,cj0+cj+1,0+αminθ¯:∑i=1Kθi⩽QEVn-1α(j+1,θ¯-ξ¯j+1,Q-∑i=1Kθi-minθi-minθi,ξij+1-ψj+1,and if z−+r−<0, thenVnα(j,z¯,r)=2cj0+mincj,j+1+αminθ¯:∑i=1Kθi⩽Q+min(z-,r-)EVn-1αj+1,θ¯-ξ¯j+1,Q+r--∑i=1Kθi-minθi,ξij+1-ψj+1,cj0+c0,j+1+αminθ¯:∑i=1Kθi⩽QEVn-1αj+1,θ¯-ξ¯j+1,Q-∑i=1Kθi-minθi,ξij+1-ψj+1.We also have thatV0α(j,z¯,r)=0,(j,z¯)∈I. In the above equations we assume that N+1 is equal to 1 since the next customer after customer N is the customer 1. It can be shown by induction on n thatVnα(j,z¯,r)is non-increasing in z1,…,zK, r in the same way as we proved thatfj(z¯,r)is non-increasing in its arguments in Lemma 1. LetVα(j,z¯,r),(j,z¯,r)∈I, denote the α-discounted total expected cost if the initial state is(j,z¯)∈I. This quantity is finite since the state space I is finite. It satisfies the following optimality equations:If z1,…,zK, r⩾0, thenVα(j,z¯,r)=mincj,j+1+αEVαj+1,z¯-ξ¯j+1,r+∑i=1Kmin(zi,ξij+1)-ψj+1,cj0+cj+1,0+αminθ¯:∑i=1Kθi⩽QEVα(j+1,θ¯-ξ¯j+1,Q-∑i=1K(θi-min(θi-min(θi,ξij+1))-ψj+1),and if z−+r−<0, thenVα(j,z¯,r)=2cj0+mincj,j+1+αminθ¯:∑i=1Kθi⩽Q+min(z-,r-)EVαj+1,θ¯-ξ¯j+1,Q+r--∑i=1K(θi-min(θi,ξij+1))-ψj+1,cj0+c0,j+1+αminθ¯:∑i=1Kθi⩽QEVα(j+1,θ¯-ξ¯j+1,Q-∑i=1K(θi-min(θi,ξij+1))-ψj+1).It is well known (see Corollary 6.6 in Ross (1992)) that, asn→∞,Vnα(j,z¯,r)→Vα(j,z¯,r). Hence, the first terms in the curly brackets in the above optimality equations are non-increasing in z1,…,zK, r and z, r, respectively. This implies that the α-discounted cost optimal policy has the threshold-type structure described in Theorem 1.We focus now on the minimization of the expected average cost. First we note that the state(1,0¯,0)∈Iis accessible from any other state under any stationary policy. From Corollary 6.20 in Ross (1992) it follows that there exist numbers g andh(j,z¯,r),(j,z¯,r)∈I, such thatIf z1,…,zK, r⩾0, thenh(j,z¯,r)=mincj,j+1-g+Eh(j+1,z¯-ξ¯j+1,r+∑i=1Kmin(zi,ξij+1)-ψj+1),cj0+cj+1,0-g+minθ¯:∑i=1Kθi⩽QEh(j+1,θ¯-ξ¯j+1,Q-∑i=1K(θi-minθi-minθi,ξij+1-ψj+1),and if z−+r−<0, thenh(j,z¯,r)=2cj0+mincj,j+1-g+minθ¯:∑i=1Kθi⩽Q+min(z-,r-)Ehj+1,θ¯-ξ¯j+1,Q+r--∑i=1K(θi-min(θi,ξij+1))-ψj+1,cj0+c0,j+1-g+minθ¯:∑i=1Kθi⩽QEhj+1,θ¯-ξ¯j+1,Q-∑i=1Kθi-minθi,ξij+1-ψj+1.The above equations are known as the average-cost optimality equations. The number g is the minimum average cost. It does not depend on the initial state of the system. There also exists a sequence αn→1 (see Theorem 6.18 in Ross (1992)) such thath(j,z¯,r)=limn→∞[Vαn(j,z¯,r)-Vαn(1,0¯,0)],(j,z¯,r)∈I.The monotonicity ofVαn(j,z¯,r)with respect to zi, i=1,…,K, and r implies thath(j,z¯,r)is non-increasing with respect to zi, i=1,…,K, and r. Therefore, the first terms in the curly brackets in the above average-cost optimality equations are non-increasing in z1,…,zK, r and z, r, respectively. Hence the average cost optimal policy has the same threshold-type structure as the finite-horizon optimal policy and the discounted-cost optimal policy.The average-cost optimal policy can be found numerically by the value-iteration algorithm, the policy-iteration algorithm and the linear programming formulation. We refer to Chapter 3 in Tijms (1994) for a detailed description of these algorithms. To implement these algorithms we must specify the one-step transition probabilities and the one-step expected costs. For simplicity we suppose that K=1, i.e. there is only product 1. Let a∈{0,1θ}, 0⩽θ⩽Q, be the action that is selected when the system at a decision epoch is at state (j, z1, r)∈I with z1, r⩾0. We assume that the action a=0 means that the vehicle goes directly to the next customer while the action a=1θmeans that is goes to the depot, empties any returned products, restocks with θ items of product 1 and then visits customer j+1. Leta∈2θ,3θ′,0⩽θ⩽Q+minz1-,r-,0⩽θ′⩽Q, is the action that is selected when the process at a decision epoch is at state (j, z1, r)∈I withz1-+r-<0. We assume that the action 2θmeans that the vehicle goes to the depot, empties returned products, restocks the owed quantity-z1-, loads additional product quantityθ∈0,…,Q+minz1-,r-, returns to customer j, satisfies demand and/or picks up remaining returned products, and proceeds to customer j+1. The action3θ′means that the vehicle goes to the depot, empties returned products, loads the owed product quantity-z1-, returns to customer j, satisfies demand and/or picks up remaining returned products, makes a second trip to the depot where it empties returned products, and restocks with θ′∈{0,…,Q} items of product 1 and then proceeds to customer j+1. Letp(j,z1,r)(j+1,z1′,r′)(a)be the probability that the state at the next decision epoch will be the statej+1,z1′,r′if the present state is (j, z1, r) and the action a∈0,1θ,2θ,3θ′is selected, and let C((j, z1, r), a) be the corresponding expected cost. We give these quantities below.If z1, r⩾0, ∣z1∣⩽Q, ∣r∣⩽Q, z1+r⩽Q thenp(j,z1,r)(j+1,z1′,r′)(0)=Prξ1j+1=z1-z1′,ψj+1=r+min(z1,z1-z1′)-r′,wherez1′=z1,z1-1,…,z1-Q,r′=r+z1,…,r-Q.If z1, r⩾0, ∣z1∣⩽Q, ∣r∣⩽Q,z1+r⩽Q,0⩽θ⩽Q thenp(j,z1,r)(j+1,z1′,r′)(1θ)=Prξ1j+1=θ-z1′,ψj+1=Q-θ+minθ,θ-z1′-r′,wherez1′=θ,θ-1,…,θ-Q,r′=Q,…,-θ.Ifz1-+r-<0,|z1|⩽Q,|r|⩽Q,0⩽θ⩽Q+minz1-,r-thenp(j,z1,r)(j+1,z1′,r′)(2θ)=Prξ1j+1=θ-z1′,ψj+1=Q-θ+r-+minθ,θ-z1′-r′,wherez1′=θ,θ-1,…,θ-Q,r′=Q+r-,…,-θ+r-.Ifz1-+r-<0,|z1|⩽Q,|r|⩽Q,0⩽θ′⩽Qthenp(j,z1,r)(j+1,z1′,r′)(3θ′)=Prξ1j+1=θ′-z1′,ψj+1=Q-θ′+min(θ′,θ′-z1′)-r′,wherez1′=θ′,θ′-1,…,θ′-Q,r′=Q,…,-θ′.If z1, r⩾0, ∣z1∣⩽Q, ∣r∣⩽Q, z1+r⩽Q thenC((j,z1,r),0)=cj,j+1,C((j,z1,r),1θ)=cj0+c0,j+1,0⩽θ⩽Q.Ifz1-+r-<0,|z1|⩽Q,|r|⩽Q,C((j,z1,r),2θ)=2cj0+cj,j+1,0⩽θ⩽Q+minz1-,r-,C(j,z1,r),3θ′=3cj0+c0,j+1,0⩽θ′⩽Q.As illustration we present the following example.Example 2Suppose that N=7, Q=8, K=1. We give below the symmetric matrix C=(cij), 0⩽i, j⩽7, whose non-zero elements are the travel costs cj, j+1 between customer j∈{1,…,7} and customer j+1 and the travel costs cj0 between customer j∈{1,…,7} and the depot. We observe that these costs satisfy the triangle inequality.C=02015211520192020015000031151501700002101701500015001501800200001801701900001702120310000210.We assume that for each customer j∈{1,…,7} the demandξ1jfor new items and the quantity ψjof returned items are independent and follow the uniform distribution in the set {0,1,…,8}, i.e.Prξ1j=x=Pr(ψj=x)=1/9,x=0,…,8. The standard value-iteration algorithm does not converge in this example. This is due to the periodicity (with period N) of all states of the system under any stationary policy. This problem can be circumvented by a perturbation of the one-step transition probabilities so that a transition from a state to itself with non-zero probability is allowed. Specifically, we take the following new one-step probabilitiesp̃(j,z1,r)(j+1,z1′,r′)(a)=τp(j,z1,r)(j+1,z1′,r′)(a),p̃(j,z1,r)(j,z1,r)(a)=1-τ,where τ is a constant such that 0<τ<1. A reasonable choice for the value of τ is 0.5. The perturbed model has the same average-cost optimal policy as the original model (see p. 209 in Tijms (1994)). We implemented the value iteration algorithm in the perturbed model and we chose ε=10−3 as the tolerance number in the stopping criterion of the algorithm. The algorithm converged to the optimal policy after 56 iterations. The required computation time was 12.18seconds. The average cost of the optimal policy was found to be 44.67. In Table 2we present, for each customer j=1,…,7, the critical numbers s1j(z1), 0⩽z1⩽8, s2j(r), −8⩽r⩽−1, rj, qjthat correspond to the average-cost optimal policy.From Table 2 we observe that Parts (i) and (iv) of Theorem 1 are confirmed numerically since for j∈{1,…,7}, s1j(z1), 0⩽z1⩽8, and s2j(r), −8⩽r⩽−1, are non-increasing in z1 and r, respectively. In Figs. 5 and 6we present the optimal decision for each state (z1, r), ∣z1∣⩽8, ∣r∣⩽8, z1+r⩽8, after the first visit to customer 6 and customer 7, respectively.The value iteration algorithm enables us to determine the optimal quantity of product 1 that is loaded in the vehicle when it returns to the depot. For example, at the state (j, z1, r)=(6,3,−8) the optimal decision is to go to the depot to unload, return to customer 6 in order to pick up the remaining 8 old items, make a second trip to the depot, unload the old items, restock with 7 new items and go to customer 7. If the state is (j, z1, r)=(7,−3,0), the optimal decision is to go to the depot, unload any returned items, restock with 5 new items, return to customer 7 to deliver the owed quantity (3 items) and proceed to customer 1.

@&#CONCLUSIONS@&#
In this paper we studied a simple capacitated vehicle routing problem with pick up and delivery. It was assumed that a single vehicle delivers to and collects K different products from N clients according to a particular order. There is no distinction between delivery and pick-up customers. Each customer demands a random quantity of new or fresh products and gives a random quantity of old or expired products. The actual values of these quantities are revealed only when the vehicle visits the client’s site. The items of all products are stored in the single compartment of the vehicle and are of the same size. For example, the vehicle delivers identical packages that contain new products and collect empty packages. Another example could be the supply of the stores of a particular area with many kinds of fresh milk according to a particular order. When the vehicle visits each store it pickups bottles with expired milk and delivers bottles with fresh milk. The vehicle may interrupt its route to return to the depot in order to empty the returned items, restock with new ones and then resume its route. The objective was to minimize the total expected cost for the service of all customers. We chose as decision epochs, the epochs at which the vehicle visits for the first time each client and has satisfied as much of his demands for new products as possible and has collected the largest possible quantity of the old products. This choice of the decision epochs together with the assumption that the customers are serviced according to a particular order enabled us for all possible states of the process to give suitable dynamic programming equations for the determination of the optimal policy. We showed that the optimal policy has a particular threshold-type structure. In view of this result, we developed a special-purpose dynamic programming algorithm that determines the optimal policy and is considerably faster than the initial dynamic programming algorithm.We also considered a corresponding infinite-horizon problem in which the service of the customers is not completed as soon as the last customer has been serviced, but it continues periodically with the same service order. For each customer the demands for new products and the quantity that is collected are renewed in each cycle and follow the same joint distribution. The decision epochs are again the epochs at which the vehicle arrives at a customer’s site for the first time and has delivered as much new products as possible and has collected as much old products as possible. It was assumed that the times between decision epochs are equal. Using standard techniques from Markov decision processes it was proved that the discounted-cost optimal policy and the average-cost optimal policy have the same threshold-type structure as the finite-horizon optimal policy.