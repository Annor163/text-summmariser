@&#MAIN-TITLE@&#
Implementation of end-user development success factors in mashup development environments

@&#HIGHLIGHTS@&#
Shows a mashup platform that lets end users make their own web applicationsProposes a new scale based on a set of objective factorsProposes a reference architecture built taking into account the factors of successThis architecture achieves more success among end users that current platformsIt is useful to know which decisions are relevant for achieving end-user satisfaction.

@&#KEYPHRASES@&#
End-user development,Mash up tool,Service front-ends,Service-oriented architectures,HCI success factors,

@&#ABSTRACT@&#
The Future Internet is expected to be composed of a mesh of interoperable web services accessed from all over the Web. This approach has been supported by many software providers who have provided a wide range of mash up tools for creating composite applications based on components prepared by the respective provider. These tools aim to achieve the end-user development (EUD) of rich internet applications (RIA); however, most, having failed to meet the needs of end users without programming knowledge, have been unsuccessful. Thus, many studies have investigated success factors in order to propose scales of success factor objectives and assess the adequacy of mashup tools for their purpose. After reviewing much of the available literature, this paper proposes a new success factor scale based on human factors, human-computer interaction (HCI) factors and the specialization-functionality relationship. It brings together all these factors, offering a general conception of EUD success factors. The proposed scale was applied in an empirical study on current EUD tools, which found that today's EUD tools have many shortcomings. In order to achieve an acceptable success rate among end users, we then designed a mashup tool architecture, called FAST-Wirecloud, which was built taking into account the proposed EUD success factor scale. The results of a new empirical study carried out using this tool have demonstrated that users are better able to successfully develop their composite applications and that FAST-Wirecloud has scored higher than all the other tools under study on all scales of measurement, and particularly on the scale proposed in this paper.

@&#INTRODUCTION@&#
Service-oriented architectures (SOA) have attracted a great deal of interest over the last few years. In fact, SOAs increase asset reuse, reduce integration expenses and improve business agility in responding to new demands [1]. Nonetheless, mainstream development and research into SOAs have until now focused mainly on middleware and scalability, service engineering and automating service composition, using business modeling process technologies. Little or no attention has been paid to service front-ends, which are a fundamental part of SOAs [2].As a result, SOAs remain on a technical layer hidden away from the service end user, called end-user programmer (EUP), a person who programs to achieve the result of a program primarily for personal rather than public use [35]. The evolution of web-based interfaces bears testimony to the progress made toward improving service usability. However, existing web-based service front-ends do not come anywhere near to meeting the EUPs' expectations [3]. Applications and EUP tools are still based on monolithic, inflexible, non-context-aware, non-customizable and unfriendly user interfaces [4]. Consequently, EUPs do not really benefit from the advantages promoted by service orientation in terms of modularity, flexibility and composition [5].The Web 2.0 social and technological movement highlighted the need to involve service-based consumer portals, web content and web applications in the development, adaptation and improvement of such applications. Accordingly, data mashups and interfaces, and mashup development environments, have come to prominence in recent years. Large companies have earmarked part of their investment for providing service front-ends for applications and data on which they base their business value. These front-ends are adapted to and adapted by the user in order to lower the barrier between the technology layer of a SOA-based application and the EUP [6]. This DIY (do-it-yourself) approach has the backing of large companies like Google (originally via iGoogle and then Chrome Web Store), Yahoo! (with Yahoo! Pipes and Yahoo! Dapper), Microsoft (with PopFly) or IBM (with SOA4People and QEDWiki) among others [7].Their aim is to get EUPs to appreciate the benefits of SOA by fostering composition, loose coupling and reuse on the front-end layer, and moving toward a user-centered service conception [8]. Thus the above web development tools aim to empower EUPs to create their own mashups of data and service interfaces, which are organized so as to cover their basic needs. The resulting expenditure of time and effort should be well below that of traditional compositional development, which is based on integrating and organizing back-end services and resources and requires advanced programming skills that an end user does not have.There is, however, an epistemological problem: although they target EUPs, resources and mashup tools are not enough to ensure that EUPs can develop their own solution to a particular problem, primarily because they have not been taught how to go about this. In most cases, EUPs do not perceive themselves as being able to translate requirements to a mashup that meets such requirements.This is less of a problem if the components of these mashups and the employed compositional techniques tie in with the end-user cognitive model [9]. This has been achieved with great success in the spreadsheet field, where end users can create a spreadsheet application by establishing data flows between cells and preconceived functions that they neither have to be acquainted with nor have to program. Our research is based on applying the success factors of this domain, commonly called end-user success factors, to the mashup field, to provide EUPs with a web development dataflow model between heterogeneous and dispersed service interfaces. To do this, we have to consider which actions, principles and objectives, and design decisions can be derived from replicable success factors in the spreadsheet domain and study their applicability to web composition tools targeting EUPs.In this paper we will review the most relevant publications and scientific results on end-user development (EUD) success factors, which we will then combine in an innovative architecture to study EUD success factors in the web domain. Thus, we will be able to study each web mashup tool and form a general idea of how successful it is likely to be among EUPs based on the studied factors. Additionally, we will demonstrate the usefulness of this study for guiding key design and architectural decisions in order to achieve EUP satisfaction, which is vital for improving future EUD solutions. For this purpose, we will present the architecture of a web mashup tool that we have developed and highlight how this architecture performs on the proposed scale for studying EUD success factors. The remainder of the paper is structured as follows. Section 2 presents the state of the art and related work on end-user development tools with respect to well-known and commonly accepted human and human–computer interaction (HCI) success factors and successful specialization/functionality trade-offs. The proposed scale for studying end-user development success factors is presented in Section 3. Section 4 shows a performance comparison of our proposal according to traditional measurement scale success factors. On the basis of the proposed measurement scale, Section 5 proposes a novel architecture for end user-centered service front-end development that is based on the proposed measurement scale. We have used this architecture to drive the development of an improved mashup tool that is presented in Section 6. Sections 5 and 6 both illustrate how this mashup tool architecture performs with respect to the reported EUD success factors and that it offers an appropriate specialization/functionality trade-off. Section 7 evaluates this mashup tool using the end-user development success factor scale. Section 8 discusses threats to validity. Finally, Section 9 outlines the conclusions.

@&#CONCLUSIONS@&#
More and more software vendors are embracing the SaaS (software as a service) philosophy and providing all their products, data and services as web services, which are accessible not only to businesses but also to all Internet users [26]. Thanks to this philosophy and the emergence of open data published by government agencies, many consumers and small businesses are able to create more and more complex applications organizing calls between services and calling and remixing various data sources. However, EUPs do not have access to these benefits and privileges.However, as the Web 2.0 philosophy showed a decade ago, EUPs have to be taken into account as “prosumers”, providers of applications and data that they previously could only consume. To achieve this milestone, it is not enough to provide users with user-centric development tools, such as mashup tools. There is statistical evidence that the current EUD web tools have little success among users without programming skills. Therefore, it is necessary to study the specific factors that have led other applications (e.g. spreadsheets) to ensure that millions of EUPs become programmers of applications that will solve everyday problems [27]. This article presents research on these factors, and existing measurement scales for their promotion. It also provides a new measurement scale based on existing research, which has proved to be better aligned with what happens when an EUP needs to successfully use a particular tool. As a result of this research, we report a reference architecture, which is based on the success of EUD factors and meets the needs of the EUPs who have tested and used its open source reference implementation, FAST-Wirecloud, as a guideline for improving the existing technology in this field.FAST-Wirecloud incorporates the three human factors that directly influence the actual end use of a software solution: perceived usefulness, perceived ease of use and computer enjoyment. As it targets specific situational needs that cannot be catered for by traditional “off-the-shelf” applications or by IT departments following a planned development process, FAST-Wirecloud is automatically perceived by its users as useful for increasing their job performance, as shown by the ratings of the items related to human success factors and the comments to open questions as part of the survey conducted at the end of the study. The open responses stated that the option of simply picking the necessary building blocks to visually compose the functional mashup to improve their job performance from an off-the-shelf catalog of resources, and the option of executing the mashup from the very beginning of its development to gather early feedback on how they were doing were an asset. They also generated immediate satisfaction and the desired ease of use perception among end users. Perceived ease of use is also promoted through the divide-and-conquer approach to the wiring process introduced by the behavior concept.With regard to the HCI success factors, the paper has illustrated how the proposed architecture and its reference implementation FAST-Wirecloud promotes the abstraction gradient, consistency, error-proneness, premature commitment, progressive evaluation, role expressiveness, viscosity, and visibility and juxtaposability factors.Finally, we argue that the proposed architecture and its reference implementation FAST-Wirecloud offer a rather good trade-off between the level of specialization and the functionality of the resulting solutions thanks to the fine-grained modularity offered by the components available in the shared resource catalog and the level of configurability for customization. This allows for their use in mashups that are very specialized for a given problem, while they can at the same time be easily exported and used in other application domains. In particular, more generic widgets can be built using operators, which can therefore be more application logic-agnostic (i.e. domain-independent). Additionally, the availability of separate sets of components for different application domains in the resource catalog, and the separation of concerns between widgets and operators (which take care of most application domain specificities) also helps to cater for domain specificity, i.e. customize the mashup tool for specific requirements that possibly emerging in specific domains.Regarding the future trends of this work, the key line of future research to be undertaken next is to study the web components within the tool catalogs and analyze which metrics they should meet to qualify as quality components, how quality can be assured and how to improve components so that they can be used by EUPs with every guarantee of success. This work will be the next logical step in this research field, considering that we have measured the different success factors to be met by an EUP tool.Finally, this study has not turned up any correlation between end users' previous experience in the use of software tools and the results for EUD tasks, a correlation that we suspected would exist. Most of the sample (94.4%) had no experience, and the few experienced users that took part were equally divided across the five work groups. On this ground, we were unable to study the impact of this characteristic in more depth. Therefore, another RQ that might be addressed in the future is to analyze the real impact of this type of previous experience on EUD user success. This study could be performed as part of the new qualitative and quantitative analyses on the FAST-Wirecloud tool and the success factors that have driven its development based on the data from hundreds of users that are now using this tool today.