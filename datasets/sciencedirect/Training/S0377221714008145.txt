@&#MAIN-TITLE@&#
A perturbation based variable neighborhood search heuristic for solving the Vehicle Routing Problem with Simultaneous Pickup and Delivery with Time Limit

@&#HIGHLIGHTS@&#
The Vehicle Routing Problem with Simultaneous Pickup and Delivery with Time Limit is presented and the literature is summarized.A mixed-integer linear programming formulation of the problem is proposed.Designed small sized test instances with time limit and no time limit are solved with the CPLEX solver.A perturbation based variable neighborhood search heuristic based on classic savings heuristic, variable neighborhood search, and perturbation mechanism is developed.A number of well-known benchmark problems with time limit and no time limit are solved and the solutions are compared.A perturbation based variable neighborhood search heuristic proposed new best and robust solutions for benchmark problem instances.

@&#KEYPHRASES@&#
Vehicle routing with simultaneous pickup and delivery,Meta-heuristics,Perturbation based neighborhood search,

@&#ABSTRACT@&#
The Vehicle Routing Problem with Simultaneous Pickup and Delivery with Time Limit (VRPSPDTL) is a variant of the basic Vehicle Routing Problem where the vehicles serve delivery as well as pick up operations of the clients under time limit restrictions. The VRPSPDTL determines a set of vehicle routes originating and terminating at a central depot such that the total travel distance is minimized. For this problem, we propose a mixed-integer mathematical optimization model and a perturbation based neighborhood search algorithm combined with the classic savings heuristic, variable neighborhood search and a perturbation mechanism. The numerical results show that the proposed method produces superior solutions for a number of well-known benchmark problems compared to those reported in the literature and reasonably good solutions for the remaining test problems.

@&#INTRODUCTION@&#
The Vehicle Routing Problem (VRP) is a combinatorial optimization problem seeking to service a set of clients from a central depot with a homogeneous fleet of capacitated vehicles. This problem aims to determine a set of vehicle routes originating and terminating at the central depot and visiting all clients such that the total travel distance is minimized. A variant of the VRP is the Vehicle Routing Problem with Backhauls (VRPB) where the vehicles dispatch goods (delivery) from the depot to linehaul clients and collect goods (pickup) from backhaul clients to the depot. The VRPB can be basically categorized into four classes (Parragh, Doerner, & Hartl, 2008):-VRP with Clustered Backhauls (VRPCB): the vehicles first dispatch delivery goods to linehaul clients, then collect pickup goods from backhaul clients.VRP Mixed linehauls and Backhauls (VRPMB): the vehicles serve delivery or pick up operations to linehaul or backhaul clients in any sequence.VRP with Divisible Delivery and Pickup (VRPDDP): clients demanding both delivery and pickup operations could be visited separately.VRP with Simultaneous Pickup and Delivery (VRPSPD): clients demanding both delivery and pickup operations have to be visited once.For extended variants of Pickup and Delivery Problems (PDP) see Berbeglia, Cordeau, Gribkovskaia, and Laporte (2007) and Parragh et al. (2008) and for Location Routing Problems (LRP) see Prodhon and Prins (2014). In the literature, the VRPSPD was first proposed by Min (1989). In the VRPSPD, the current load of the vehicle has to be checked at each client to ensure that the vehicle capacity is not violated. This problem can be classified according to the notation proposed by Berbeglia et al. (2007). They use the 3-tuple notation [Structure|Visits|Vehicles] to describe the characteristics of a PDP. In this notation, structure represents the number of origins and destinations of goods, visits represents information on the way pickup and delivery operations are performed at clients, and vehicles represents the number of vehicles employed. The VRPSPD investigated in this paper can be characterized as [1-M-1|PD|m] where 1-M-1 indicates one-to-many-to-one problems, i.e. goods are initially available at the depot and are transported to clients, and goods available at the clients are transported to the depot; PD means each client being visited exactly once for a combined pickup and a delivery operation; m denotes the availability of more than one vehicle (multi-vehicle problem).The VRPSPD can also be categorized into three classes as follows:-VRPSPD with Maximum Distance Length (MLVRPSPD): a maximum voyage distance constraint for returning to the central depot is imposed for each of the vehicles.VRPSPD with Time Windows (VRPSPDTW): the vehicles have to start their service at the clients' locations between a given earliest and latest time.VRPSPD with Time Limit (VRPSPDTL): the vehicles have to return to the central depot before a time deadline is reached.In this study, we consider the VRPSPDTL that additionally includes service times for the clients and a maximum total duration (travel+service time) restriction for the vehicles as an extension of the VRPSPD.Dethloff (2001) defined the VRPSPD as an NP-hard combinatorial optimization problem, meaning that practical large-scale problem instances are hard to solve by use of exact solution methodologies within acceptable computational times. In the VRPSPDTL the objective and constraints are the same as in the VRPSPD, except for the service time limit of vehicles for returning to the central depot. This makes the problem more complicated due to the difficulty in controlling the voyage duration of the vehicles in addition to the service time of the clients along the route. As a result, this problem can be described as NP-hard, as well. In the literature, the interest was therefore on the development of heuristic or meta-heuristic solution approaches.Since 1989, many heuristic and meta-heuristic solution approaches for solving VRPSPD benchmark problems have been proposed. See Goksal, Karaoglan, and Altiparmak (2013), Subramanian, Drummond, Bentes, Ochi, and Farias (2010), Zachariadis, Tarantilis, and Kiranoudis (2009) and Zachariadis and Kiranoudis (2011) for recent studies on the VRPSPD, Montané and Galvão (2006) and Zhang, Tian, Zhang, and Liu (2008) for the MLVRPSPD and Liu, Xie, Augusto, and Rodriguez (2013) and Mingyong and Erbao (2010) for the VRPSPDTW. Furthermore, some authors consider the VRPSPD as a special case of the VRPDDP where vehicles are allowed to visit clients separately for delivery and pick-ups (Nagy, Wassan, Speranza, & Archetti, 2014). Although, Salhi and Nagy (1999) defined benchmark problem instances for the VRPSPD with “time limit”, since then most of the studies disregarded this case. A possible reason could be the increased complexity of the problem. So far just a few studies considered benchmark problems under time limit restrictions. Some authors proposed heuristic and meta-heuristic implementations for the VRPSPD as well as VRPSPDTL. These studies are as follows: Cluster Insertion Heuristics (CIH) by Salhi and Nagy (1999), Insertion Based Heuristics (IBH) by Dethloff (2001), Alternating Heuristic Algorithms (ALT) by Nagy and Salhi (2005), Large Neighborhood Search (LNS) by Ropke and Pisinger (2006), Tabu Search (TS) by Montané and Galvão (2006), Reactive Tabu Search (RTS) by Wassan, Wassan, and Nagy (2008), Ant Colony System (ACS) by Gajpal and Abad (2009), Particle Swarm Optimization (PSO) by Ai and Kachitvichyanukul (2009), Savings Based Ant Algorithm (SBAA) by Catay (2010) and Nearest Sweep with Perturbation (NSP) by Jun and Kim (2012).Subramanian and Cabral (2008) presented the first investigation that deals with the pure VRPSPDTL considering the CMT 6-7-8-9-10-13-14 X&Y benchmark problems of Salhi and Nagy (1999). The authors proposed an Iterated Local Search (ILS) procedure in order to solve this problem.In this study, we propose a perturbation based neighborhood search (PVNS) approach for solving the VRPSPDTL. The remainder of this study is organized as follows. In Section 2, we present a model formulation for the problem at hand. Next, the solution procedure is developed in Section 3. Detailed numerical results are presented in Section 4. Finally, conclusions are drawn and suggestions for further research are given in Section 5.The problem considered in this study is designing the network of service vehicles, e.g. simultaneously dispatching/collecting cargo parcels from a central post station to/from regional post stations via trucks, simultaneously dispatching/collecting containers from a hub port to/from feeder ports via containerships, simultaneously dispatching/collecting passengers from a continental center airport to/from national airports via airplanes, etc. In this context, the VRPSPDTL can be stated as follows: A set of clients is located on a distribution network where clients require both delivery and pickup operations. Each client has to be served once for both operations with a given fleet of identical capacitated vehicles. Each vehicle leaves the central depot carrying the total amount of goods that it has to deliver and returns to the depot carrying the total amount of goods that it must pick-up. Each client also has a specified service time which is the loading and unloading operation time of the vehicle at the client. Therefore, the voyage time of a vehicle is the sum of total travel time of the route and total service time of the clients. In order to determine the vehicle schedules and the staffing balance, each vehicle has to finish its voyage before the maximum allowed duration is reached.A mixed-integer linear programming (MILP) formulation for the VRPSPDTL is proposed with the following notation by extending the VRPSPD formulation of Montané and Galvão (2006):Indicesi, j ∈ Nthe set of nodes (clients and depot (0))the set of vehiclesmaximum allowed voyage duration of vehiclesmaximum loading capacity of a vehicleaverage travel speed of a vehiclenumber of nodes, i.e., n = |N|distance between nodes i and jservice time at client idelivery goods demand of client ipick-up goods demand of client i1, if the arc (i,j) belongs to the route served by vehicle k; 0, otherwisepick-up goods transported on arc (i,j)delivery goods transported on arc (i,j)sub-cycle elimination variable used for client iThe model formulation is given as follows.(1)min∑k∈K∑i∈N∑i∈Ncijxijks.t.(2)∑i∈N∑k∈Kxijk=1∀j∈N/{0}(3)∑i∈Nxijk−∑i∈Nxjik=0∀j∈N,k∈K(4)∑j∈N/{0}x0jk≤1∀k∈K(5)∑i∈N/{0}xi0k≤1∀k∈K(6)∑i∈Nyji−∑i∈Nyij=pj∀j∈N/{0}(7)∑i∈Nzij−∑i∈Nzji=dj∀j∈N/{0}(8)yij+zij≤Q∑k∈Kxijk∀i,j∈N(9)∑i∈N∑j∈Ncijvxijk+∑i∈N/{0}∑j∈Nsixijk≤R∀k∈K(10)πi≥πj+1−n(1−∑k∈Kxijk)∀i,j∈N,i≠j(11)xijk∈{0,1},yij≥0,zij≥0,πi≥0∀i,j∈N,k∈KThe objective function (1) aims to minimize the total travelled distance. Constraints (2) ensure that each client is served by exactly one vehicle while Eq. (3) guarantees that the same vehicle arrives at and departs from each client. Constraints (4) and (5) ensure that at most K vehicles are used. Eqs. (6) and (7) satisfy the pick-up and delivery demand of the clients, respectively. Constraints (8) are the vehicle capacity constraints and constraints (9) represent the maximum voyage duration limit. Constraints (10) are introduced to eliminate illegal sub-cycles. Finally, constraints (11) define the variable domains. In short, these constraints ensure that each vehicle departs from the central depot with a load equivalent to the total delivery goods and each vehicle arrives at the central depot with a load equivalent to the total pick-up goods from clients on the route served by that vehicle.As mentioned in Sections 1 and 2, exact solution approaches for solving VRPSPDTL problems are not practical for large-scale instances. In this study, we therefore propose a heuristic approach based on a perturbation based neighborhood search (PVNS) algorithm. The structure of the heuristic is given in Fig. 1 in pseudo-code.The algorithm starts with a Savings Algorithm (SA) in order to obtain a fast and effective initial solution (see Section 3.1). A variable neighborhood search (VNS) algorithm is applied to improve the initial solution over several generations (see Section 3.2). The respective neighborhood structures are explained in Section 3.3. Finally, a perturbation mechanism (PM) is introduced to escape from local optima (see Section 3.4).The initial solution is constructed by use of the savings algorithm of Clarke and Wright (1964) considering route time limits and vehicle capacity. This well-known heuristic aims at merging sub-tours based on cost savings which can be achieved by combining two sub-tours into a composite tour to be served by the same vehicle. In literature, some enhancements of the classic Clarke and Wright savings algorithm have been suggested by adding new terms and parameterizing the savings formula. In this study, since the VRPSPDTL is a generalization of the VRP, we construct the initial solution according to the savings formula proposed by Altınel and Öncan (2005) for solving the VRP. The savings formula is given in Eq. (12) where ci0 is the distance from customer i to the depot, c0jthe distance from the depot to customer j, cijthe distance between customers i and j, diand djare the demand of customer i and j, respectively, andd¯is the average demand.(12)Sij=ci0+c0j−λcij+μ|c0i−cj0|+νdi+djd¯Here the first positive parameter λ aims to redesign the routes in order to find better solutions. The second positive parameter μ may exploit the asymmetry of information between customers i and j regarding their distances to the depot. The third positive parameter ν gives an assignment priority to customers with larger demands (Doyuran & Çatay, 2011). Since this savings function is designed for the VRP, we assume d'ias the maximum value of delivery (di) and pick-up (pi) of customer i (d'i= max(di, pi)) in the VRPSPDTL. Thus, by simultaneously considering route time limits and vehicle capacity in the savings methodology, the problem is converted from VRPSPDTL to the vehicle routing problem with time limit (VRPTL). Therefore, feasibility of the routes created by the savings methodology can easily be checked and ensured in each step by comparing the sum of the d'ivalues of the route and the total route duration. Note that a feasible solution to the VRPTL by using d'ialso provides a feasible solution to the VRPSPDTL.After an initial solution is constructed using the savings heuristics for the VRPTL, this solution is evaluated with an improvement algorithm according to the VRPSPDTL. For this purpose a general variable neighborhood search (VNS) approach proposed by Mladenović and Hansen (1997) and (2010) is used. VNS employs the idea of systematically changing the neighborhoods in order to improve the current solution and aims to further explore the solution space, which may not be explored by a simple local search technique (Hansen et al., 2010). Hemmelmayr, Doerner, and Hartl (2009), Kytöjoki, Nuortio, Bräysy, and Gendreau (2007), Polat, Günther, and Kulak (2014) and Stenger, Vigo, Enz, and Schwind (2013) showed the effectiveness of VNS for VRP applications.Shaking, local search and move or not operators are used in the implementation of the VNS. The shaking operator decides the search direction of the VNS from a set of neighborhoods. After a set of preliminary experiments, we observed that the probability of escaping from local optima increases when the shaking operator is integrated with local search rather than using a single shaking operator. Therefore, each solution obtained by the shaking operator is further evaluated with the local search operator in order to explore new promising neighborhoods of the current solution. In this study, we implemented the Variable Neighborhood Descent (VND) algorithm as the local search operator. If we exclude the randomness in VNS, then the VND is achieved. While this variant of VNS can be used in its original form individually, VND is also useful as a local search within a VNS. The VND algorithm aims to combine the set of neighborhoods (m-max) in a deterministic order expecting that using more than one neighborhood structure results in better solutions. At the end of the VND algorithm, if there is an improvement, then the shaking operations start from the first operation. Otherwise, shaking continues with the next operation. After reaching the maximum number of shaking operations (k-max), the search procedure continues with the first operation in the new iteration.In this study, a number of intra-route and inter-route structures are employed in a deterministic order for shaking and local search operators (Fig. 2). In our methodology, both VNS and VND use four intra-route [3-opt, swap, insertion, 2-opt] and four inter-route neighborhood structures [Exchange (m,n), Cross, Shift (0,1), Replace (1,1)]. When the algorithm is in the shaking step, it randomly selects two sub-tours, and then, if the next VNS operator is an inter-route operator, the operator is applied to these sub-tours randomly. On the other hand, if the next operator is an intra-route operator, the operator is applied to both sub tours randomly. In the VND step of the algorithm, these two sub tours taken from the shaking step are deterministically searched by all of the eight operators. At the end of the VND step, the best local result obtained from the VND is compared with the best global result.Contrary to the classical VRP, if supply intensive clients are in the first sequences and demand intensive clients are in the latter sequences, a route could be infeasible even if its departure and arrival loads are feasible in the VRPSPD. However, reversing the same route could result in a feasible solution. Therefore, load feasibility of incumbent routes is checked in two steps. In the first step, both departure and arrival loads of the vehicles are checked. If they are feasible, in the next step departure loads of vehicles for all clients on the route are also checked for both directions. In order to avoid redundant moves, only moves within violation acceptance limits are allowed to be considered in the shaking operator. The total route duration violation acceptance limit (α1) is used to allow clients to join another route for possible further improvements. Also the vehicle capacity violation acceptance limit (α2) is used as the maximum of all pick-up and delivery loads. The violation limit allows an infeasible solution to enter the VND step, meaning that an infeasible solution may result in a feasible and good candidate after applying local search structures. However, just one of the routes is allowed to use this violation acceptance limit and the travel duration of this route is penalized with a huge penalty cost in order to increase the improvement probability of routes. In the local search phase, only feasible moves are allowed, i.e. those which do not violate the vehicle capacity and the time limit. For instance, when an inter-route operator applied to two routes provides an infeasible but effective solution in the shaking step, an additional operator applied to one of these infeasible routes could, in combination with another feasible route from the network, create two feasible and effective routes in the local search step.In the calculation of the fitness value, we first check the total delivery (starting) and total pick up (returning) load. If any of these loads exceeds the capacity, the route is directly classified as an infeasible solution. On the other hand, if the total starting or retuning load falls below the violation limit but exceeds the capacity, then this route is penalized with a very high penalty value. If the total starting or retuning load falls below the capacity, then we further check the load of the vehicle at each client step-by-step on the route. If there is a violation of any client departure time, then the route is again penalized. Similarly, we also check arrival times for each client (including the depot). If there is no violation, the route becomes feasible and the fitness value is calculated as the total travel distance. On the other hand, after the shaking step, if an infeasible solution that enters the local search step is still infeasible after applying various local search operations, at the end of the local search step the best solution will not change since the temporary solution will not be able to get rid of its penalty value.The 3-opt, swap, insertion and the 2-opt are intra-route neighborhood structures defined according to an initial configuration. Fig. 2 illustrates the different neighborhood structures. The initial configuration used to explain these operations is shown in Fig. 2a.•The 3-opt operation, which was introduced by Lin (1965), tries all shifts of some sub-sequence to different positions in the same route. In this particular example, three edges are deleted and replaced by three other edges. In Fig. 2a the links [1,2] (connecting customers 1 and 2), [3,4] and [5,6] were deleted from route 1 and the links [1,4], [5,2] and [3,6] were inserted (Fig. 2b).Swap is a random permutation movement of two customers in the same route. In Fig. 2c the order of customers 2 and 5 in the route were swapped (Fig. 2c.)The insertion operation selects a customer randomly and inserts it at a random position in the same route. In the example of Fig. 2d customer 3 was selected and inserted at the 6th position of the route.The 2-opt heuristic looks for improvements by swapping pairs of links (Croes, 1958). In Fig. 2e links [1,2] and [4,5] were deleted and links [1,4] and [2,5] were inserted.Exchange (m,n), Cross, Shift (0,1) and Replace (1,1) represent inter-route improvement operations, i.e. they consider different routes within the network. An example of an initial configuration is given in Fig. 2f.•The exchange (m, n) structure is developed according to Osman (1993). In the example of Fig. 2g m sequential customers from one route (route 1) are transferred to another route (route 2) and in turn n sequential customers from route 2 are transferred to route 1. In this study, m is randomly selected between 1 and 5, and n is randomly selected equal to m or m − 1.Cross exchange is a basic crossover structure between routes. In this structure, the link [2,3] from route 1 and the link [7,8] from route 2 are removed. To complete the routes, links [2,8] and [7,3] are inserted (see Fig. 2h).Shift (0,1) is a random transposition movement of a customer from one route to another. In Fig. 2i customer 2 from route 1 is transferred to route 2.Replace (1,1) is a random permutation movement between two customers from different routes. In Fig. 2j customer 1 from route 1 is permutated with customer 7 from route 2.In all inter-route neighborhood structures, the route pairs are selected according to the roulette wheel technique in order to eliminate the number of infeasible exchange operations. In this selection, the center of gravity coordinates of each route are calculated. After one route is randomly selected, the distances between the center of this route and the center of other routes are determined. All distances between the selected route and the remaining routes are scaled by a 1/distance0.5 factor in order to give sufficient exchange opportunity to distant routes. Another route is selected among these routes according to the principles of the roulette wheel method.The temporary solution obtained via the shaking and local search operators is compared with the current solution in order to decide whether to move or not. In the proposed VNS and VND, the acceptance criterion of the temporary solution is only to accept a solution if there is an improvement. However, this procedure may cause the search to get stuck in a local optimum. Therefore, it is necessary to employ a strategy of accepting non-improving solutions. Perturbation is an effective strategy used to jump out of a local optimum and to search a new promising region. A commonly used perturbation strategy is to deconstruct the previous local optimum partially in a random way as in Subramanian et al. (2010). Another strategy is the destroy-and-repair based perturbation mechanism as in Jun and Kim (2012).The previously obtained local optimum solution combines global and local statistical information of good individual solutions. In this study, the current solution is, therefore, used to develop a perturbation method called perturbation mechanism (PM). This perturbation mechanism runs after a number of non-improving iterations counted starting from the last improving solution (see Fig. 3for details of the algorithm). In the PM, a set of perturbation structures [double replace, double cross, triple shift, triple replace, and triple cross] is randomly run whenever the perturbation is called. In addition to the perturbation move, a local optimization method with the previously defined four intra-route neighborhood structures is applied to improve the perturbed solution quality. The solution quality of the perturbed solution is significant, since a perturbation move that satisfies the vehicle capacity and total route duration limit is always accepted. Moreover, violating moves are accepted by the shaking operator. The developed perturbation structures for the PM are defined as follows.•Double Replace is a combination of two times sequential Replace (1,1) movements to the same routes which are selected by the roulette wheel method. A random client from route 1 is permutated with a random client from route 2; next, another random client from route 1 is permutated with a client from route 2. After intra-local search is applied to both route1 and route 2, the total vehicle duration and vehicle loading capacity are checked according to the acceptance limits.Double Cross applies the Cross exchange. Otherwise, it is similar to the Double Replace structure.Triple Shift is a newly developed fast and effective perturbation movement to jump out from local optima. A route (route 1) is randomly selected, and two another routes (routes 2 and 3) are selected by using the defined roulette wheel method. Next, similar to the Shift (0,1) movement, a random client from route 2 is transferred to route 1, and a client from route 1 is transferred to route 3. Similar to double structures, vehicle duration and capacity are checked according to the acceptance limit after intra-local search is applied to routes.Triple Replace is similar to Triple Shift by using the Replace (1,1) movement.Triple Cross is similar to Triple Shift by using the Cross exchange structure.As local optimization, a set of intra-neighborhood structures [3-opt, Swap, Insertion, 2-opt] are repeated z-max times in a deterministic order. If no acceptable solution is generated after z-max attempts in a perturbation structure, the algorithm then tries another perturbation structure.

@&#CONCLUSIONS@&#
In this study, we proposed a heuristic search method called perturbation based neighborhood search (PVNS) algorithm based on the savings algorithm, variable neighborhood search and the perturbation mechanism to solve the Vehicle Routing Problemwith simultaneous pick-up and delivery with time limit (VRPSPDTL). Eight local neighborhood search structures were used as shaking and local search operators of the PVNS algorithm. A Variable Neighborhood Descentprocedure was used to perform the local search. Five different perturbation structures were applied in order to escape from local optima. The numerical results show that the proposed PVNS algorithm generated efficient and high-quality solutions compared to the existing solution methods for the VRPSPDTL. For 19 out of the 28 benchmark instances with and without service time from Salhi and Nagy (1999), the PVNS algorithm was able to obtain new best solutions or reached to best known solutions. Furthermore, since the VRPSPDTL turns into the VRPSPD when the time limit is considered to be infinite, the VRPSPD instances of Salhi and Nagy (1999) are also solved by the proposed approach with competitive results compared to those provided in the literature. New additional VRPSPDTL benchmark instances are also introduced by extending the VRPSPD instances of Nagy et al. (2014) and solved by the proposed approach. Sensitivity analyses are carried out for determining the effect of time limit and vehicle capacity. The proposed PVNS algorithm is specifically designed to cover the total vehicle time limit, which is not included in the existing pure VRPSPD solution methods with its sub-procedures as part of the construction heuristic, the improvement algorithm and perturbation mechanism. As a future research direction, the proposed PVNS algorithm can be adapted to consider heterogeneous fleet conditions, divisible demands and the dynamic environment of the VRPSPDTL.