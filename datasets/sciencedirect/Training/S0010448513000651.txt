@&#MAIN-TITLE@&#
Curvature-guided adaptive

@&#HIGHLIGHTS@&#
We present an adaptiveT-spline fitting algorithm, with several new components.We propose a curvature-guided fitting strategy to effectively capture model features.We introduce a process for faithful re-parameterization.We present a process for re-placing the initial structure of the spline surface.

@&#KEYPHRASES@&#
Surface fitting,T,-splines,Curvature,Re-parameterization,Knot re-placement,

@&#ABSTRACT@&#
The problem of fitting spline surfaces to triangular mesh models is of importance in computer-aided design. Many fitting algorithms have been developed. This paper proposes several novel plug-and-play components or strategies: the use ofT-splines for fitting, a curvature-guided strategy, faithful re-parameterization and initial spline knot re-placement, which can be used to enhance fitting algorithms. We also present an adaptiveT-spline fitting algorithm integrating these components and strategies. Extensive experiments have been conducted to demonstrate these components. Our fitting algorithm can generate spline surfaces that well respect the geometrical features of input mesh models and have a more compact representation.

@&#INTRODUCTION@&#
Triangular meshes and splines are two popular representations for free-form surfaces. Triangular meshes are convenient for visualization and description of complicated shapes of arbitrary topology. With the development of laser scanners or other 3D data acquisition equipments  [1], triangular mesh models are easily obtained. Spline surfaces are widely used in the computer-aided design and manufacturing (CAD/CAM) industry and engineering computation as well. They are represented concisely by parametric equations and are good for the description of smooth shapes and shape analysis. In particular, non-uniform rationalB-splines (NURBS) have been an industry standard in CAD/CAM  [2]. For some applications, there is a need to convert a model in triangular mesh representation into splines. The conversion can be achieved by surface fitting or reconstruction. This paper investigates effective techniques for spline surface fitting.Extensive research has been done on surface fitting. Some interesting methods have been developed for reconstructingB-spline surfaces to fit a triangular mesh  [3–5]. These methods either initiate the fitting process with a control mesh that is sufficiently dense or refine the control mesh globally when the approximation error is large. Both of these strategies often result in an over-refined control mesh. In fact, the refinement of the control mesh is desired only in the areas where the fitting result is poor, but theB-spline surfaces do not have local refinement. An adaptive approach was proposed in  [6] that uses a collection ofB-spline patches on different layers, with the base layer of patches representing the overall shape and the overlay patches representing the local details. In the overlay patches, however, several rings of control points near the margin of the control mesh must be fixed with the corresponding control points in the lower level in order to maintain continuity. In the work of  [7], an approach based on patchwork surface construction was presented. The adaptivity of this method lies in that, when the resulting surface is not accurate enough, the selected faces are chosen to be split and re-approximated. One problem of the method in  [7] is that the total number of patches in the result surface could be very large and many unnecessary extraordinary points might be introduced even though the topology of the object is simple.Besides, geometrical features  [8–10] in free-form surfaces seem to be overlooked in many previous surface fitting approaches. In fact, surface features are important for shape description in that they reflect some identities of a model. Therefore, features should be appropriately reconstructed during surface fitting in order to achieve satisfactory result. A feature sensitive parameterization technique was introduced in  [11] to embed the feature information into the parameterization of the triangular mesh and distort the parameter domain so that larger parameter intervals are allocated to feature areas. While this technique could indirectly facilitate non-adaptiveB-spline surface fitting, its use becomes less apparent in adaptive fitting.The research effort reported in this paper initially was on fitting spline surfaces to triangular meshes of arbitrary topology as in [4,7,12]. However, we soon realized that even the surface fitting of a mesh with simple topology has many open questions, such as how to efficiently achieve adaptive fitting, how to generate good parameterization for fitting purpose, how to generate good initial knot placement for spline surface fitting, and how to automatically allocate more control points in those highly curved feature regions to better represent the features. The solutions to these problems also surely facilitate the surface fitting of arbitrarily topological models. Thus this paper focuses on fitting a spline surface to a triangular mesh that is topologically equivalent to a disc and presents several plug-and-play technical components and strategies, which can be easily integrated into many existing surface fitting algorithms for enhancement to produce visually smooth spline surfaces with concise control meshes and geometrical features well respected. The main contributions of the paper include:•We propose to useT-spline surfaces for adaptive surface fitting. Adaptive surface fitting refines fitting only in the required areas where the fitting results are not satisfactory. Thus adaptive fitting is attractive in handling complicated models with unevenly distributed details.T-splines are a new free-form surface technology that solve most of the limitations inherent in the NURBS representation  [13,14]. In particular,T-splines allow local refinement, making them a good candidate for adaptive fitting  [15,12]. WhileT-splines are more powerful thanB-splines, they also bring some technical challenges. For example,T-splines in a general setting are likely rational, which makes the computation (especially differentiation) complicated. While previousT-spline fitting methods  [12,16] directly useT-splines and thus output rational surfaces, we deliberately design our algorithm so that all theT-splines constructed in our algorithm are standard or semi-standard  [14], which guarantees that they are piecewise polynomial, thus simplifying the fitting process.We propose to use curvature to guide the fitting process so that the feature regions receive special attention. Features are characterized as the regions where there is a large variation in surface normal. While features were not paid enough attention to in many previous fitting algorithms, which often results in loss of features in the fitting results, we present a simple strategy that will automatically allocate more control points in the feature regions so that the features can be well represented in the fitting surface.We introduce a process called re-parameterization. This is inspired by Hoschek’s work for approximation  [17]. With re-parameterization using the current fitting result, the parameterization of the triangular mesh is improved towards an intrinsic one that is able to help optimize the fitting result as shown in  [17]. We present a method that guarantees the re-parameterization to be faithful.We present a process for re-placing the initial control grid structure of the spline surface. SinceT-spline surfaces have flexible knot structure, it is very difficult to provide a good initialT-spline knot (or structure) placement which is needed in the surface fitting procedure. Our proposed method heuristically constructs knot re-placement by taking the current fitting result and the characteristics of the input model into consideration and ensures that theT-splines defined over the generated knot structure are standard or semi-standard. As a result, we can obtain a reasonableT-spline structure, which helps generate a concise fitting result.The rest of the paper is organized as follows. First, we present an overview of our adaptive fitting algorithm in Section  2. Then, several technical components are explained in subsequent sections. In particular, Section  3 describes parameterization and re-parameterization; Section  4 discusses initialT-spline structure placement and re-placement; and Section  5 gives adaptive least-squaresT-spline fitting with curvature guidance. Next, Section  6 presents experimental results to demonstrate the effectiveness of our algorithm. Finally, the paper is concluded in Section  7.AT-spline surfaceS(u,v)is defined by  [13,14](1)S(u,v)=∑i=1nwiPiBi(u,v)∑i=1nwiBi(u,v)wherePi,wiandBi(u,v)are the control points, weights, andT-spline blending functions, respectively. As a major difference from the control points ofB-spline surfaces,PiinS(u,v)can be aT-junction, which means the terminal point of a partial row or column. The existence ofT-junction points makes theT-spline structure more flexible and allows local refinement.Our surface fitting problem can roughly be stated: given a triangular meshTinR3space with a vertex setD={d1,d2,…,dm}, which is topologically equivalent to a disc, we look for aT-spline surfaceS(u,v)such that the distances between the surface and each vertexdiare within a given error toleranceε:(2)dist(di,S(u,v))≤ε,i=1,2,…,m.Moreover, we also require that the resultingT-spline surface should have a concise representation and well respect the geometrical features of the original triangular mesh. Fig. 1shows an example of two different fitting results with the same error tolerance, where Fig. 1(a) is the input triangular mesh, Fig. 1(b) is a fitting result with salient geometrical features such as the eyes, the nose and the mouth being well respected, and Fig. 1(c) is the normal fitting result that does not preserve features very well.To solve the above problem, we propose aT-spline surface fitting algorithm that wraps the existing least-squares fitting solutions by another iteration in which the parameterization and the initialT-spline knot placement are updated. While this increases the computation cost, it will decrease the number of control points of the resultingT-spline surface and make theT-spline topology more concise. Meanwhile, we also propose to improve the conventional least-squares fitting by using curvature to guide the fitting process. By such means, geometrical features of the model will receive adequate attention and will be well represented in the resultingT-spline surface.The flowchart of our algorithm is given in Fig. 2. The algorithm consists of several components. Parameterization is to parameterize the input mesh. Re-parameterization is to improve the mesh parameterization. InitialT-spline structure placement is to arrange the initial topology ofT-splines. Re-placement is to improve the initial topology ofT-splines. Curvature-guidedT-spline fitting is to adaptively find the optimalT-spline surface. They can work in a plug-and-play way. In particular, the new components–faithful re-parameterization, knot structure re-placement, curvature-guided fitting and the appropriate use ofT-splines–can be incorporated into other existing fitting algorithms to enhance their performance.Below is how the algorithm works in general. Given an input triangular meshT, we first parameterizeTby assigning a pair of parameter values to each vertex ofT, and also set up an initialT-spline structure. Next, based on the parameterization and theT-spline initialization, a curvature-guidedT-spline fitting routine is used to find a candidate result surface in an adaptive way such that the distances betweendiand the obtainedT-spline surface are belowε. The stop criterion for the algorithm is based on the estimation of whether the current candidate could be further improved in the next iteration (more details are to be discussed in Section  6), and is checked each time a candidate result surface is found. If the criterion is met, the algorithm terminates and the current candidate result surface is regarded as the final output; Otherwise, the current parameterization is re-calculated and the initialT-spline knots are re-placed, using the current result surface as a reference. With the new parameterization and the knot placement, the surface fitting routine is carried out again to find the next candidateT-spline result.This section describes two processes related to parameter calculation: parameterization and re-parameterization.Parameterization is a process of finding a mappingψthat assigns each vertexdiof the meshTa pair of parameter valuesui(ui,vi)inR2space. The set of pointsu1,u2,…,umcollectively form a planar triangulationPthat maintains the same connectivity asT. Many parameterization algorithms have been developed. Refer to  [18,19] for a good survey. In this paper, we adopt a parameterization algorithm based on mean value coordinates  [20], which is simple and also effective.Once the parameterization for the mesh is obtained,dist(di,S(u,v))in Eq. (2) can be measured by the parametric distance‖S(ui,vi)−di‖. Other possible measurements for the point–surface distance can be found in  [21].As a linkage between meshes and spline surfaces, parameterization has a substantial impact on surface fitting. Without prior information on the underlying parametric representation of a mesh, there inevitably exist some deficiencies in initial parameterization results, especially for triangular meshes with complicated geometry.Re-parameterization is to improve the initial parameterization of a mesh. Here we present a re-parameterization process that makes use of the previously obtainedT-splines during the iterations of surface fitting. Our approach is called faithful re-parameterization, which improves the parameter values without introducing unwanted effects such as overlapping of triangles. It is achieved by two steps: calculating the initial updates and finding the corrections for global re-parameterization. Once the parameterization is updated, it can be used in the next iteration of surface fitting.SupposeS(u,v)is aT-spline surface that approximates the triangular meshT. For each vertexdiinT, an offset vector is defined as the directed edge fromdito the corresponding pointS(ui,vi)on theT-spline surface, whereui(ui,vi)is the associated parameter pair fordi. For conciseness, we denotedibyPand the pointS(ui,vi)byS. We examine whether the offset vectorPS⃗is orthogonal to theT-spline surface. If it is not the case, it suggests that there would exist another point with parameter(ui′,vi′)on theT-spline surface such that the vector fromPto this point is orthogonal to the surface. It can be seen that the approximation error atPcan further be reduced if we change the parameter ofPto(ui′,vi′). However, identifying such a point usually is a nonlinear problem. As a trade-off, we find an approximate correction termΔui(Δui,Δvi)for eachuiin a more efficient way, based on a similar technique that Hoschek  [17] used to re-parameterize curves.LetSuandSvdenote the partial derivatives of theT-spline surface atS.S′is a point on the tangent plane spanned bySuandSvsuch thatPS′⃗is orthogonal to the tangent plane. ThenPS′⃗equalskn, wheren=Su×Svis the normal vector of the plane andkis a scalar factor. From the triangle△PQS′shown in Fig. 3(a), we have the following equation:(3)(PS⃗+ΔuiSu)⋅(n×Sv)=0.Solving the equation givesΔui:(4)Δui=−(S(ui,vi)−di)⋅(n×Sv)Su⋅(n×Sv).Similarly, we have(5)Δvi=−(S(ui,vi)−di)⋅(n×Su)Sv⋅(n×Su).Ifdiis on the boundary of the mesh, one parameter should remain fixed and thus a special treatment is needed. Suppose a boundary vertexdihas parameterui(ui,vb)wherevbis fixed. We only need to correctui, which is to ensure that the point still remains on the boundary after correction. Refer to Fig. 3(b). We findΔuithat makesSS′⃗⊥PS′⃗, which leads to the following equation:(6)(PS⃗+ΔuiSu)⋅Su=0.Thus(7)Δui=−(S(ui,vb)−di)⋅SuSu⋅SuΔvi=0.Analogously, if a boundary vertexdihas a parameterui(ub,vi)whereubis fixed, the correction term can be expressed by:(8)Δui=0Δvi=−(S(ub,vi)−di)⋅SvSv⋅Sv.OnceΔuiis computed, we can then replace the parameteruiofdibyũi=ui+Δui.Note that if we update each parameter pointuiby applying the previously calculated correction termΔui, it likely happens that some edges in the new triangulationP̃intersect, which should be avoided in a good parameterization. For example, in Fig. 4(a) the local region of the parameterization containing verticesui,ujandukis shown, with three respective correction terms also marked in dashed lines. After applying these corrections to the vertices (see Fig. 4(b)), it can be seen that the new edgeẽjkintersects with two other edges. This implies that the parameterization is “over-corrected” and the original connectivity of the mesh is not faithfully preserved, which may cause unpredictable results in surface fitting.Therefore, a mechanism is required to add appropriate constraints to the correction terms in order to avoid self-intersections. We introduce a set of scalar factorsβi∈[0,1], and let the parameter correction for vertexdibe:(9)ũi=ui+βiΔui.Here, the correction termΔuiis adjusted to beβiΔuiand the purpose of which is to prevent over-corrections. Whenβi=0, no correction is made for vertexdiandũi=ui. Since the original parameterization is assumed to have no self-intersection, as long as allβiare small enough, the updated parameterization would always be faithful. On the other hand, we want the correction terms to keep their original magnitude as much as possible in order to maximize the effect of re-parameterization. Therefore, our goal is to find the largest possible values forβ1,β2,…,βmunder the condition that there is no self-intersection inP̃.Letgidenote an arbitrary triangle face inPwhose vertices areui1,ui2andui3. Letg̃ibe the corresponding face inP̃, with verticesũi1,ũi2andũi3. It can be seen that, the occurrence of self-intersection can be avoided if we make sure that for any faceg̃iinP̃, each vertex ing̃istays at the same side of its opposing edge as it does ingi. This condition is equivalent to the direction of the normal vectors ofgiandg̃ibeing the same, which we can be formulated as follows:(10)(ũi1ũi2×ũi1ũi3)⋅(ui1ui2×ui1ui3)>0whereuaub(orũaũb) is the directional edge fromuatoub(or fromũjtoũk). Substitutingũikof Eq. (9) into (10) gives:(11)((ui1ui2−βi1Δui1+βi2Δui2)×(ui1ui3−βi1Δui1+βi3Δui3))⋅(ui1ui2×ui1ui3)>0.The left side of (11) has only three unknownsβi1,βi2andβi3and we can represent it by a functionfi(βi1,βi2,βi3), which is typically a degree two polynomial inβi1,βi2andβi3. If we solve all the inequalitiesfi(βi1,βi2,βi3)>0together, we can get the values forβ1,β2,…,βm. However, it is too complicated to solve multi-variable quadratic inequalities. Thus we seek to simplify the problem somehow. Rather than using an independentβifor eachΔui, we use a globalβfor all the parameter correction terms. Thenfi(βi1,βi2,βi3)becomes a univariate quadratic functionfi(β):(12)fi(β)=aiβ2+biβ+ci>0,β∈[0,1].Now our task is simplified to solvingfi(β)>0for each triangle face and finding the largest possibleβthat satisfies all the inequalities within the valid domain ofβ, i.e.,β∈[0,1]. It can be guaranteed that no over-correction of parameters would ever occur if all the correction terms are scaled by such aβ. By a careful observation, it can be found thatfi(0)(i.e.ci) is always a positive number. Because whenβ=0, no parameter correction will actually be made and the normal vector for each triangle face will remain in its original direction.The solution to the quadratic inequality of (12) is determined by its coefficientsai,bi,ci. Let us first discuss the situation whereai=0. Ifbi≥0, then we will always havefi(β)>0, no matter what valueβtakes among[0,1]. On the other hand, ifbi<0, the allowed range forβwould be[0,min(−cibi,1)).Now we can assume thatai≠0, in which casefi(β)defines a parabola. To discuss the solution of (12), letΔ=bi2−4aici, andr1=−bi−Δ2ai,r2=−bi+Δ2aibe the two roots, providedΔ>0. The solution to (12) in general falls into the following cases:1.Δ<0:In such a case, the whole parabola would be above theβaxis (as shown in Fig. 5(a)), due to the fact thatfi(0)>0. Therefore, the solution to (12) is0≤β≤1.Δ=0:A possible situation is illustrated in Fig. 5(b), and the solution to (12) is0≤β<−bi2ai, if−bi2ai∈[0,1]; or0≤β≤1, if−bi2ai∉[0,1].Δ>0,r1∈[0,1],r2∈[0,1]:As illustrated in Fig. 5(c), the solution to (12) is0≤β<r1.Δ>0,r1∈[0,1],r2∉[0,1]: As illustrated in Fig. 5(d), the solution to (12) is0≤β<r1.Δ>0,r1∉[0,1],r2∈[0,1]:As illustrated in Fig. 5(e), the solution to (12) is0≤β<r2.Δ>0,r1∉[0,1],r2∉[0,1]:This case is illustrated by Fig. 5(f)–(h). It is obvious that in such a case, the solution to (12) is0≤β≤1.After solving the inequalities for each triangle face, the largest possible value forβcan be obtained by combining the solutions together. Then the parameters are updated usingũi=ui+βΔui. Withβbeing a constraint for the correction terms, now the parameters will not be over-corrected.This section describes two processes related to the initialT-spline structure: placement and re-placement.An initialT-spline structure is required to be set up for surface fitting to start with. Specifically, we have to specify the parameter domain, theT-mesh topology (i.e., knot structure), and the control point weights.The parameter domainΩ⊂R2of theT-spline surface to be reconstructed is set to be the domain that the triangular mesh is parameterized to, which is[0,1]×[0,1]. Since our fitting approach is in an adaptive fashion, we would like to begin with a relatively simpleT-mesh structure. For example, we can choose the initial surface to be a bicubicB-spline patch with a 4×4 control grid. The knot vectors along theUandVdirections are both set to be{−2μ,−μ,0,1,1+μ,1+2μ}, whereμis a non-negative number. In general, we would like to letμ=0to impose multiple knots on the boundary. In the parameter space, the lines corresponding to these knots (except for the first and the last one of each direction) form the pre-image of the control mesh of the surface. We denote this structure byM. Fig. 6shows this initial pre-image. In the figure, the domain of the surface is highlighted. The dashed lines are phantom edges that are needed for the surface definition.We also let all the control point weights be one. Denote byWthe set of all control point weights. ThenMandWdefine a class ofT-splines that have the same pre-imageMand the same weightsW. We denote this class bySM,W. For any surface in the classSM,W,∑i=1nwiBi(u,v)≡1. AT-spline surface that satisfies such a condition is known as a standard/semi-standardT-spline surface, which is actually a piecewise polynomial surface. An interesting property ofT-splines is that if we perform a local refinement on a standard/semi-standardT-spline surface, the result will still be a standard/semi-standardT-spline surface  [14].The initialT-spline structure setup described in the previous subsection is simple, but has a few drawbacks. First, the characteristics of the model are not taken into account in the initialT-spline knot placement. Second, the initial setup is too far away from the final one, which could affect the overall computation time. While the optimal initialT-spline structure is very difficult to find if not impossible, we here present a heuristic approach to construct a reasonable initialT-spline structure using the mesh as well as theT-spline surface obtained in the previous iteration as references. LetMbe the knot structure of the previously obtainedT-spline surface. We want to build a new initialT-spline structureM′based on the input triangular meshTandM. TheT-spline structure re-placement consists of two steps.First, a tensor product knot structureMtpis derived fromM. Each knot in theUandVknot vectors ofMis examined. For a knotuiin theUknot vector, find all the vertical edges inMthat are associated to it. The lengths of these vertical edges are accumulated and the sum is denoted bylui. Ifluiis larger than a certain threshold, say, 0.7, it is indicated that the impactuihas on the surface is likely global rather than local. It could be more effective for the representation to use a complete knot line instead of a couple of partial edges, which could help to reduce the number ofT-junctions and make the structure of theT-spline control grid simpler. Therefore, in the new tensor product knot structureMtp, a complete knot lineu=uiis included (see Fig. 7for an illustration). The knots in theVknot vector ofMare handled with the same strategy. In this way, a tensor product knot structureMtpcan be obtained. All the control point weights inMtpare set to one.Second, based onMtp, we continue to constructM′using the meshT. We pick a few vertices of the mesh that have the largest mean curvatures (the calculation of which will be described in Section  5.2). For each of these vertices, we find its closest point on the existing knot lines ofMtpby the parameter coordinates, and refineMtpby inserting a knot at the location of the closest point using theT-spline local refinement algorithm. TheT-spline local refinement algorithm also updates the control point weights accordingly. In this way, the constructedM′and the control point weights together are guaranteed to define a class of standard/semi-standardT-spline surfaces.Fig. 8(a) is an example showing the pre-image of a re-placed initialT-spline structure. The corresponding optimal surface is shown in Fig. 8(b).OurT-spline fitting process itself is an iterative least-squares procedure consisting of three sub-components, shown in the flowchart in Fig. 9. Given aT-spline knot structure, the optimalT-spline surface is computed using least-squares optimization. Then the quality of the obtained surface is checked, taking surface features into account. If the surface passes the quality checking, the obtainedT-spline surface is considered a qualified candidate. Otherwise, the currentT-spline structure is adaptively refined. The refinedT-spline structure is used in least-squares optimization again to find the next best surface. The details are elaborated next.The computation of the optimalT-spline surface from a given topology is done in a similar fashion described in  [15], except that the points we deal with here are 3D, rather than thez-values. Given aT-mesh knot structure (i.e., theT-spline pre-imageM) and a set of control point weightsW, a class ofT-spline surfacesSM,Wis defined.MandWare either set in initial structure placement or generated by later adaptive structure refinements. InSM,W, all theT-spline surfaces have the sameT-mesh topology and weights; only their geometry is different. Therefore, we seek the geometrically optimalT-spline surface inSM,W, which best fits the triangular mesh under criteria given in Eq. (2). Note that anyT-spline surface inSM,Wis standard/semi-standard due to our configurations in initialT-spline structure placement and the use ofT-spline local knot insertion inT-spline structure refinement (which will be discussed in Section  5.3). Therefore the optimal surface we intend to find is actually a piecewise polynomial surface, which can thus be written as(13)S(u,v)=∑i=1nwiPiBi(u,v).We are trying to find a surfaceS(u,v)in the classSM,Wthat minimizes the sum of the squared parametric distances between the vertices of the mesh and the surface. Moreover, to generate a visually fair surface, we often need to add a fairness functional termJfair(f)into the objective function  [22]. We choose the thin plate energy as the fairness term, which physically represents the bending energy stored in a thin sheet of metal that is being deformed to the shape of the surface. The smaller the value of the fairness term is, the smoother the surface shape would be. The optimization problem hence becomes minimizing the following objective function:(14)F(P1,P2,…,Pn)=∑j=1m‖S(uj,vj)−dj‖2+σJfair(S)whereσis a tradeoff constant that balances the approximation accuracy and fairness. A largerσwill lead to a smoother surface, while a smallerσwill give a more accurate approximation. The simple thin plate energyJfair(S)is formulated as:(15)Jfair(S)=∬Ω(Suu2(u,v)+2Suv2(u,v)+Svv2(u,v))dudv.Note that the objective function is quadratic in control points. To solve the optimization problem, we differentiate the objective function with respect to each control pointPgand let the partial derivative equal zero:∂F∂Pg=0. This leads to(16)∑i=1nwi(∑j=1mBi(uj,vj)Bg(uj,vj)+σmgi)Pi=∑j=1mdjBg(uj,vj)forg=1,…,n, wheremgiare coefficients contributed from the fairness functional.If we introduce ann×nmatrixA=(agi), twon×1vectorsB=(bg)andP=(Pg)with(17)agi=wi(∑j=1mBi(uj,vj)Bg(uj,vj)+σmgi)and(18)bg=∑j=1mdjBg(uj,vj),then the above linear equations can be written as(19)A⋅P=B.The solution of the linear system is the solution of the least-squares problem that minimizes (14), which gives the control points defining the optimalT-spline surface.Once the optimal surface is obtained, its quality needs to be checked. One way of quality checking is to test whether the parametric distance of each vertex of the triangular mesh to theT-spline surface is below the given toleranceε.It is observed that many free-form models contain geometrical features that reflect geometrical details on the models, and even if the obtained surface passes the quality check for an error tolerance, the features are still missing or not well respected, which implies that the tolerance may not be small enough for the features. This observation suggests that we should adapt the given error tolerance according to the feature distribution. We need to pay more attention to the feature areas because they are more difficult to achieve a good approximation than the non-feature areas. Thus for a feature area, a high fitting precision (i.e., a low error tolerance) should be adopted in order to generate faithful reconstruction.Curvatures describe the amount by which the shape deviates from a plane. In general, a surface region that contains geometrical features would have higher curvature values while the non-feature regions would have lower curvature values. At a point on a surface, an infinite number of curvatures in various directions can be defined. The mean curvaturehis the average of two principal curvatures at the point, and thus serves as a good measurement for features. For a triangular mesh, the discrete mean curvature at a vertexdican be computed using the information of its 1-ring neighborhood  [23,24]:(20)hi=‖14A∑j=1vali(cotαj+cotβj)(dj−di)‖whereAis the sum of the area of the triangle faces adjacent todi,αj,βjare the two angles opposite to the edge connectingdianddjas illustrated in Fig. 10, andvaliis the valence ofdi. Fig. 11(a) shows the color plot of mean curvatures of the Stegosaurus model, where the color red represents high curvature values and the color blue represents low curvature values. It can be seen that there is a good correspondence between high curvature regions and surface features.We let the mean curvatures calculated at each vertex serve as a guidance for the error tolerance and introduce the curvature-guided variant error toleranceεifor vertexdi:(21)εi=kiεwherekiis a curvature guidance factor determined by the discrete mean curvature at vertexdi:(22)ki=max(h̄max−h̄ih̄max−h̄min,η).Hereh̄i=log(hi+1)is the logarithm of the mean curvaturehi, the purpose of which is to concentrate the curvature values.h̄maxandh̄minare the maximum and minimum values among all theh̄i(i=1,2,…,m)which are used to normalize the mean curvature values to the interval of[0,1]. A small valueηis used as a threshold to filter the curvatures values that are too big. In this paper, we chooseη=0.05. In this manner, we would have smaller tolerances for the vertices in the high mean curvature areas.Now, instead of Eq. (2), we use‖S(ui,vi)−di‖≤εito determine whether a vertexdiis satisfactorily approximated. If all the vertices in the triangular mesh pass the quality test, theT-spline surface is considered acceptable. Otherwise, further treatment is required. Also, it is trivial that the values ofεido not change throughout the algorithm and therefore only need to be calculated once. Fig. 11(b) shows the result after an error checking process. In the figure, the red points represent the vertices that fail the test. It can be seen that most of these points are concentrated at the regions with features.If theT-mesh structure of the currentT-spline surface classSM,Wis not appropriate, even the best fit surface of the class might not well represent the shape of the input triangular mesh. Therefore, when the preset error tolerance is not met, the currentT-mesh structure needs to be improved by refinement.We refine theT-mesh at the regions where some points fail the error checking. These points are called the violating points and the regions containing the violating points are called the offending regions. Our strategy is to insert edges to split the offending regions.While there are different ways to split a region, we follow the principle that an offending region should, in general, be split in half in the direction where the region has a larger knot difference. Specifically, assume a region is a rectangular box whose lower-left corner has coordinates(umin,vmin)and whose upper-right corner has coordinates(umax,vmax). Ifumax−umin>vmax−vmin, then we split the region vertically atu=(umax+umin)/2. Ifumax−umin<vmax−vmin, then we split the region horizontally atv=(vmax+vmin)/2. In case both the knot differences are the same, then either direction could be chosen for splitting. Fig. 12provides some illustrations. The offending regions are highlighted in the figures. For the offending region in Fig. 12(a), we split it with a horizontal edge; analogously, for the one in Fig. 12(b), we split it with a vertical edge.The actual splitting of a region is accomplished by performing a local refinement in which the two endpoints of the edge used to split the region are inserted into theT-mesh using theT-spline local knot insertion algorithm. The knot insertion algorithm might introduce a few extra points into theT-mesh.After the refinement is completed, a newT-mesh structure and the corresponding set of weights are obtained and thus a new class ofT-spline surfaces can be defined. The new class ofT-spline surfaces has more degrees of freedom than the old one. It is worth pointing out that since the newT-mesh structure and weights are obtained by theT-spline local knot insertion algorithm, theT-spline surfaces in the new class are still standard or semi-standard. That is, they are piecewise polynomial surfaces. What remains to define aT-spline surface is the geometry of control points, which could be determined by another routine of least-squares optimization.

@&#CONCLUSIONS@&#
