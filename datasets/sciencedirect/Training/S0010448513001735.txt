@&#MAIN-TITLE@&#
How the Beast really moves: Cayley analysis of mechanism realization spaces using CayMos

@&#HIGHLIGHTS@&#
Bijective representation of connected components as curves in a minimal ambient dimension.Defining and finding the “distance” between two different connected components.Analysis and visualization of realization spaces for well-studied mechanisms.

@&#KEYPHRASES@&#
Underconstrained geometric constraint systems,1-degree-of-freedom linkages,Mechanisms,Configuration space,Realization space,Motion space,

@&#ABSTRACT@&#
For a common class of 2D mechanisms called 1-dof tree decomposable linkages, the following fundamental problems have remained open: (a) How to canonically represent (and visualize) the connected components in the Euclidean realization space. (b) How to efficiently find two realizations representing the shortest “distance” between two connected components. (c) How to classify and efficiently find all the connected components, and the path(s) of continuous motion between two realizations in the same connected component, with or without restricting the realization type (sometimes called orientation type).For a subclass of 1-dof tree-decomposable linkages that includes many commonly studied 1-dof linkages, we solve these problems by representing a connected component of the Euclidean realization space as a curve in a carefully chosen Cayley (non-edge distance) parameter space; and proving that the representation is bijective. We also show that the above set of Cayley parameters is canonical for all generic linkages with the same underlying graph, and can be found efficiently. We add an implementation of these theoretical and algorithmic results into the new software CayMos, and give (to the best of our knowledge) the first complete analysis, visualization and new observations about the realization spaces of many commonly studied 1-dof linkages such as the amusing and well-known Strandbeest, Cardioid, Limacon and other linkages.A key underlying barrier to understanding underconstrained geometric constraint systems is the classical problem of representing and efficiently finding the Euclidean realization spaces of 1-degree-of-freedom linkages, or mechanisms in 2D. A linkage(G,l̄), is a graphG=(V,E)with fixed length bars as edges, i.e.l̄:E→R. A 2D Euclidean realization or configurationG(p)of(G,l̄)is an assignment of pointsp:V→R2to the vertices ofGsatisfying the bar lengths inl̄, modulo Euclidean motions. If the linkage is flexible (i.e., the space of realizations of a linkage is infinite), but the addition of a single bar causes the linkage to become minimally rigid (i.e. only finitely many realizations), then the linkage is called a mechanism with 1-degree-of-freedom (1-dof). A well-known example is the 2D mechanism underlying the Strandbeest, shown in Fig. 1.Note: In the remainder of the paper, “linkage” refers to “2D linkage”.Even for rigid linkages, the number of realizations can be exponential in the number of vertices  [1]. Previous attempts in  [2,3] classified realizations according to realization types. A realization type uniquely determines a realization of a rigid linkage, by specifying a local orientation (chirality) for a set of points in the realization.For flexible linkages, a well-known early result  [4] shows that an arbitrary algebraic curve can be traced by the motion of a linkage joint. One outstanding example is the Peaucellier–Lipkin linkage, which transforms planar rotary motion into straight-line motion  [5]. Versions of the problem play an important role in Computer-Aided-Design (CAD), robotics and molecular geometry[6–8], but few results are known beyond individual or specific families of linkages  [9–13].In this paper, we restrict ourselves to the study of 1-dof tree-decomposable linkages. The underlying graphsGof such linkages are obtained by dropping an edge from minimally rigid and well-studied tree-decomposable graphs. A graphGis 1-dof tree-decomposable if there exists a non-edgef, called a base non-edge (there could be more than one), such thatGhas the following graph theoretical construction fromf(see for example Fig. 1(a)): at Construction Stepk, the graph constructed so far,Gk−1, is extended by adding two new maximal tree-decomposable subgraphs, or clustersCk1andCk2sharing a vertexvk. In addition,Ck1andCk2each has exactly one shared vertex,ukandwkrespectively, withGk−1. In the example Fig. 1(a), the dotted line(v0,v3)is the chosen base non-edge. In Construction Step 1, clustersC1={v0,v6,v8}andC2={v3,v6}are added. We denote this construction step byv6⊲(v0∈C1,v3∈C2), or simplyv6⊲(v0,v3). Verticesv0,v3are called the base pair of vertices at Step  1.Note: in this paper, we assume that the clusters are globally rigid, and we reduce clusters sharing only two vertices with the rest of the graph into edges.A realization type for a 1-dof tree-decomposable linkage specifies a local orientation in{+1,−1}for the triple(vk,uk,wk), for each construction stepvk⊲(uk,wk). For a given realization type, a 1-dof tree-decomposable linkage(G,l̄)has a simple ruler and compass realizationG(p)which parallels the graph theoretic construction. For example, for the linkage in Fig. 1(a), the ruler and compass realization step corresponding to Construction Step 1 has two possible local orientations, one is shown in the figure, and the other hasp(v6)located on the other side of(p(v0),p(v3)). When a realization type is not specified, determining the existence of a realization is however NP-hard  [6].For 1-dof tree-decomposable linkages, if the bar lengthsl̄are inQ, the coordinate values of a realization are solutions to a triangularized quadratic system with coefficients inQ(i.e. the endpoints belong to an extension field overQobtained by nested square-roots). Such values are called quadratically–radically solvable (QRS) values.There are numerous examples of algorithms and software dealing with 1-dof tree-decomposable linkages, such as Geometry Expressions, SAM, Phun, Sketchpad, Geogebra, D-cubed, the algorithm in  [14], etc. They have the following major functionalities: (i) designing 1-dof tree-decomposable linkages for tracing out specific curves, especially by building new mechanisms based on a library of existing ones; (ii) accepting user-specified parameters, ranges and realization types to generate continuous motion of the linkages.However, the following issues still exist.(a)How to canonically represent and visualize the connected components. Currently, the realization space is typically represented as separate curves in 2D that are traced by each vertex of the linkage. In fact, a realization actually corresponds to a tuple of points, one on each of these curves, i.e., the realization space is bijectively represented by a curve in the full ambient dimension of2|V|−3after factoring out rigid transformations, where|V|is the number of vertices in the linkage.How to generate all connected components and find the distance between connected components. Currently, for two realizations in different connected components, there is no method to find out how “close” they can get towards each other by continuous motion, using a meaningful definition of “distance” between connected components.How to efficiently determine whether two arbitrary input realizations are in the same connected component. Currently, in order to generate continuous motion, the user must specify a range of a parameter containing the parameter value at the given realization. Then either a single connected component is generated for a subset of the specified range, or multiple segments of the realization space, under only the given realization type, are generated within the specified range. We discuss this issue in more detail at the end of Section  1.2.In this paper, we settle these issues for a natural and commonly occurring subclass of 1-dof tree-decomposable linkages that have low Cayley complexity. The following subsection provides the required background.The recent papers  [12,13] introduced the use of Cayley configuration space to describe the realization space of a 1-dof, 2D linkage(G,l̄). A Cayley configuration space is obtained by taking an independent non-edgefwithG∪fbeing minimally rigid, and asking for all possible lengths thatfcan attain (i) over all the realizations of(G,l̄); (ii) over all realizations of(G,l̄)of a particular realization type. For (i) (resp. (ii)), each realizable length offis called a (resp. oriented) Cayley configuration, and the set of all such configurations is called the (resp. oriented) Cayley configuration space of the linkage(G,l̄)onf, parametrized by the length off. The Cayley configuration space is a set of disjoint closed intervals on the real line.An important complexity measure of the Cayley configuration space is its Cayley complexity, i.e. the algebraic descriptive complexity of the interval endpoints in the Cayley configuration space  [12]. Specifically, if the endpoints are QRS values, the corresponding linkage is said to have low Cayley complexity. We observe that many commonly studied mechanisms, including the Strandbeest, have low Cayley complexity.For a 1-dof tree-decomposable linkage(G,l̄), any base non-edgefcan be taken as the Cayley non-edge parameter to give a reasonable Cayley configuration space.In  [12], algorithms are given for obtaining an (oriented) Cayley configuration space for generic 1-dof tree-decomposable linkages. Here a generic linkage means that no bar length is zero, all bars have distinct lengths and at most one pair of adjacent bars can be collinear in any realization. A realization of a generic linkage automatically satisfies the usual notion of genericity in the rigidity literature. The paper  [12] also shows that for generic 1-dof tree-decomposable linkages with low Cayley complexity, the number of continuous motion paths between two realizations is at most two, and can be directly obtained from the oriented Cayley configuration spaces with complexity linear in a natural, discrete measure of the length of the path. In  [13], a recognition algorithm is given for 1-dof tree-decomposable linkages with low Cayley complexity, with time complexity linear in the number of construction steps of the underlying graph.While judiciously chosen Cayley parameters shed light on many aspects of 1-dof tree-decomposable linkages, one persistent problem has been that a non-oriented Cayley interval, being a union of multiple oriented Cayley intervals, could correspond to multiple connected components of the realization space, as in Fig. 5. The same example also shows that, although an oriented Cayley interval corresponds to a unique connected component, the mapping is not bijective, since that same connected component could contain more than one oriented interval. Fig. 2summarizes the different cases when determining existence of a continuous motion path between two realizations. There are two cases (2 and 3) where there may or may not exist a continuous motion path (a and b). Previous approaches mentioned in Section  1.1, except for  [14], generate continuous motion within a specified Cayley interval, or multiple segments of continuous motion, each corresponding to a different oriented Cayley interval with the same realization type. Thus they cannot consistently distinguish Case 2a from Case 2b, or Case 3a from Case 3b. The algorithms in  [14,12] can distinguish between these four types. However, the algorithm in  [14] deals with general tree-decomposable linkages and could have exponential time complexity, as opposed to linear complexity of  [12] for linkages of low Cayley complexity (see Theorem 4).In this paper, we address the following questions for 1-dof tree-decomposable linkages with low Cayley complexity:(a)How to canonically represent the connected components of the realization space as curves in an ambient space.Theorem 3 gives such a bijective representation by characterizing a canonical set of non-edges, and proving that adding those non-edges results in global rigidity. Consequently, we obtain an ambient dimension in which each connected component bijectively corresponds to a canonical Cayley curve.How to define the “distance” between two connected components of the realization space.Theorem 5(ii) defines the Cayley distance between two different connected components based on the bijective correspondence given in Contribution (a); using this measure we give an algorithm to find the two nearest realizations between these two components.Can we provide a complete case analysis and meaningful visualization of connected components and continuous motion paths of the realization space?Theorem 5(i) finds all the connected components of the realization space of a given linkage, in time linear in the number of oriented intervals in the given Cayley configuration space, adapting an algorithm from  [12].Using these results, in Section  3.3, we provide analysis and visualization for several well-studied mechanisms: Observation 1 shows the complete set of connected components for the Strandbeest, Observation 2 shows the nonstandard connected components for the Cardioid and Limacon, and Observation 3 shows examples of all the different cases in continuous motion generation.Our manuscript  [15] presents the architecture and functionalities of CayMos, a software implementation for the algorithms developed in  [12,13], as well as efficient algorithmic solutions for the problems given in Section  1.1.

@&#INTRODUCTION@&#


@&#CONCLUSIONS@&#
