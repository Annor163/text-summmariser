@&#MAIN-TITLE@&#
Practical solutions for a dock assignment problem with trailer transportation

@&#HIGHLIGHTS@&#
We study a distribution warehouse.Trailers need to be assigned to docks for loading or unloading.The purpose is to produce high-quality solutions to large (real-life) instances.We cast the practical setting into a hierarchical bi-objective scheduling problem.We implement four different methods and compare them via computational experiments.

@&#KEYPHRASES@&#
Dock assignment,Multicriteria scheduling,Branch and bound,Beam search,Tabu search,

@&#ABSTRACT@&#
We study a distribution warehouse in which trailers need to be assigned to docks for loading or unloading. A parking lot is used as a buffer zone and transportation between the parking lot and the docks is performed by auxiliary resources called terminal tractors. Each incoming trailer has a known arrival time and each outgoing trailer a desired departure time. The primary objective is to produce a docking schedule such that the weighted sum of the number of late outgoing trailers and the tardiness of these trailers is minimized; the secondary objective is to minimize the weighted completion time of all trailers, both incoming and outgoing. The purpose of this paper is to produce high-quality solutions to large instances that are comparable to a real-life case. This will oblige us to abandon the guarantee of always finding an optimal solution, and we will instead look into a number of sub-optimal procedures. We implement four different methods: a mathematical formulation that can be solved using an IP solver, a branch-and-bound algorithm, a beam search procedure and a tabu search method. Lagrangian relaxation is embedded in the algorithms for computing lower bounds. The different solution frameworks are compared via extensive computational experiments.

@&#INTRODUCTION@&#
We study a distribution warehouse with several docks, where incoming trailers are unloaded after they arrive and where outgoing trailers are loaded before they leave. Each dock can be occupied by at most one trailer at any moment in time. The site also contains a parking lot, which serves as a buffer area where trailers are temporarily parked. We distinguish between three types of trailers. First of all, we have the coupled trailers. These trailers arrive at the parking lot at a known arrival time (a release date) and are brought to the dock by the trucker, who waits until the load or unload activity is completed to take the trailer away. A desired latest departure time (a due date) is specified for each of these trailers to avoid having truckers wait for excessive time at the plant. A second type of trailers are the uncoupled incoming trailers that are to be unloaded. These trailers also have a known arrival time (a release date) but no restrictive due date. The third set of trailers are the uncoupled outgoing trailers to be loaded, which are available at the parking area from the outset. These trailers have a due date, since they need to be transported to clients after being loaded. Uncoupled trailers (both incoming and outgoing) are dropped off by a trucker at the parking lot and afterwards transferred to a dock by one of the terminal tractors, which are tractors designed for use in ports, terminals and heavy industry. After unloading or loading at the dock, the uncoupled trailer is moved back to the parking lot by a tractor, where it will be picked up by a trucker later on.The described dock assignment problem is modeled after a case encountered at Toyota Parts Center Europe (TPCE), a Toyota warehouse in Diest, Belgium. The stated assumptions closely adhere to this practical situation. The purpose of this paper is to produce a baseline schedule for the entire next day. Such a baseline provides a convenient check whether the available capacity is sufficient for the upcoming operations, and it serves as a clear guideline for prioritization of those operations. Our task was to develop an automated procedure for building this schedule, which was at the time of our contacts being built mainly by hand. During the execution of this baseline schedule, TPCE obviously receives updated information about the planned arrival time of trucks (for instance based on GPS-tracking information), and some trucks without tracking information will also inevitably arrive somewhat earlier or later than planned. Based on this new information that gradually becomes available, the baseline schedule is manually adjusted in real time.In an earlier paper (Berghman, Leus, & Spieksma, 2014), we have explored the possibility of finding optimal solutions by means of integer (linear) programming (IP). In that study, the due dates were treated as strict deadlines. After discussion with the management of the TPCE site, however, it turned out that these latest departure times were better modeled as due dates: the existence of a feasible schedule meeting all due dates is not guaranteed, but satisfying them is our primary objective. Minimization of the waiting times of the trailers is the secondary objective. We ambition to produce high-quality solutions to realistic instances. Our results in Section 4 will indicate that large instances cannot be solved to guaranteed optimality within reasonable running times, and we will therefore resort to the development of heuristic procedures. The contributions of this text are fourfold: (1) we cast the practical problem setting into a hierarchical bi-objective optimization problem; (2) we present an IP formulation for this problem; (3) we propose different heuristic algorithms; and (4) we investigate how Lagrangian relaxation can lead to lower bounds. Our computational experiments will show that the best solutions are obtained by a hybrid algorithm that combines recovery beam search and tabu search.On a practical note, we need to mention that in spite of the promising computational performance that we are able to report, a practical implementation of our algorithms at the Toyota site seems rather unlikely: our (very enthusiastic) direct contact person at TPCE has left the company, and the interest of the remaining team members responsible for logistics in applying scientific methods for planning, is very low. The recent economic crisis and additional company-related downturns have even further distracted the team’s interest. We are convinced, however, that the documented work will be useful to readers confronted with similar planning problems in a practical setting.The remainder of this article is structured as follows. Section 2 provides a brief literature survey on the related topics of dock scheduling, multicriteria scheduling and flexible flow-shop scheduling. In Section 3, some definitions and a formal problem statement are presented. An IP formulation will be proposed in Section 4. Section 5 explains how schedules will be represented in our solution procedures and Section 6 proposes simple heuristics to provide initial solutions. Subsequently, a branch-and-bound (B&B) algorithm, a beam search algorithm and a tabu search algorithm will be represented in Sections 7, 8 and 9, respectively. An overview of our computational results is given in Section 10 and we round off the article with a summary and some conclusions in Section 11.

@&#CONCLUSIONS@&#
In this paper, we have defined and solved a bi-objective dock assignment problem with trailer transportation, with a clear hierarchy between the two objectives. We have explored the limits of the instance sizes that can be solved to guaranteed optimality within acceptable running times by means of integer programming and branch and bound. It turns out that these limits are too low to be of any use in the practical case that was the prime motivation for undertaking this work, which can require the planning of up to 48 gates, 480 trailers and over 1000 operations. We have therefore also examined the performance of different heuristics for solving large instances, namely a truncated branch-and-bound algorithm, a standard and a recovery beam search algorithm, and a tabu search algorithm. We apply Lagrangian relaxation for computing lower bounds, which can also be transformed into upper bounds (candidate solutions) via a schedule generation scheme. With respect to beam search, a recovery phase via a pseudo-dominance rule and a limited neighborhood search improves the standard implementation. This improvement is not as substantial as reported in literature for other problems, however. We find that a hybrid implementation of tabu search with recovery beam search produces the best results, generating high-quality solutions to realistic instances within reasonable computation times.Overall, with the current size and complexity of the search space, we conclude that a strong randomization is better than a structured search of the solution space by means of, e.g., beam search alone, presumably because too much overhead runtime is incurred in steering the procedure in the latter case. The main problem with branch and bound and beam search resides in the computation time for the lower bounds. Different bounds have been implemented, but all are either computationally too expensive or not tight enough to be beneficial. As a result, the best-performing implementations explore more nodes by not computing any lower bounds. As a first consequence, nodes in the search tree cannot be pruned. Secondly, lower bounds are also not available to guide the choice of the next branching alternative. For this reason, a challenging but valuable direction for future research is the development of efficient lower bounds. These may be interesting even if they are not tight, as long as they represent rather well the quality of a node.We have proposed to use a baseline schedule as a general guideline for the operations, which is gradually adjusted to reflect more accurate information as it becomes available, and not as a strict prescriptive plan providing a minute-to-minute description of the timing of the activities throughout the day. There is a large body of scientific literature on scheduling under uncertainty that confirms that when uncertainty is not too pervasive, then developing an indicative static baseline schedule and updating it as time progresses, allows to achieve a better quality for the resulting schedule than when no such baseline schedule is used and tasks are simply handled on a first-come-first-served basis (see for instance Vieira, Herrmann, & Lin, 2003 or Herroelen & Leus, 2005). For future work, a thorough simulation exercise might be set up to verify whether adhering to such an iteratively updated baseline schedule is more valuable than the use of simple real-time dispatching rules also in this particular scheduling environment.