@&#MAIN-TITLE@&#
Improved cuckoo search algorithm for hybrid flow shop scheduling problems to minimize makespan

@&#HIGHLIGHTS@&#
We presented an improved cuckoo search algorithm for real-industrial hybrid flow shop scheduling problems.To the best of our knowledge this is the first attempt to apply the cuckoo search algorithm to a real-industrial scheduling problem.Computational experiments are conducted to validate the proposed algorithm.Computational results show that the improved cuckoo search algorithm outperforms with many other metaheuristics in the literature.

@&#KEYPHRASES@&#
Hybrid flow shop (HFS),Scheduling,NP-hard,Improved cuckoo search (ICS),Metaheuristics,

@&#ABSTRACT@&#
The multistage hybrid flow shop (HFS) scheduling problems are considered in this paper. Hybrid flowshop scheduling problems were proved to be NP-hard. A recently developed cuckoo search (CS) metaheuristic algorithm is presented in this paper to minimize the makespan for the HFS scheduling problems. A constructive heuristic called NEH heuristic is incorporated with the initial solutions to obtain the optimal or near optimal solutions rapidly in the improved cuckoo search (ICS) algorithm. The proposed algorithm is validated with the data from a leading furniture manufacturing company. Computational results show that the ICS algorithm outperforms many other metaheuristics.

@&#INTRODUCTION@&#
Scheduling is a process of allocating resources over time to perform a collection of required tasks [1]. It is a decision making process. Effective scheduling plays a vital role for the growth of any kind of industries. Different types of scheduling problems were addressed in the literature with different performance measures. Single machine scheduling, flow shop scheduling, parallel machine scheduling, job shop scheduling, HFS scheduling and project scheduling are some of the important types of scheduling environments. Among them HFS scheduling problems are considered in this paper. Minimization of makespan, total flow time, mean flow time, total earliness, total tardiness, weighted earliness and tardiness and number of tardy jobs are some of the important objective functions of scheduling problems. The objective of this paper is to minimize makespan. Many researchers concentrated on the HFS scheduling problems for the past several decades since it was proposed by Arthanari and Ramamurthy [2] due to their practical importance. Many industries like steel, ceramic, electronics, chemical and textile industries resemble the HFS environment. The HFS environment can be assumed to be the combination of flow shop and parallel machines. In the HFS environment, machines are arranged into several stages in series. Each stage has one or more identical machines in parallel. A job must pass through all stages. Moreover, the job must be processed by exactly one machine at every stage. The layout of a k stage hybrid flowshop scheduling is shown in Fig. 1where Mmkrepresents the machine in the mth parallel and kth stage [3].Researchers have proposed many different approaches to solve the HFS problems. Exact solution methods, heuristics and metaheuristics are the three important approaches addressed in the literature [4]. One of most important, exact solution methods used for the HFS problem is the branch & bound algorithm [5–8]. Portmann and Vignier [9] improved the performance of the branch & bound algorithm by hybridizing the genetic algorithm (GA). Neron et al. [10] solved the HFS scheduling problems using branch and bound algorithm. They applied energetic reasoning and global operations for enhancing the efficiency of branch and bound algorithm to minimize the makespan. The HFS scheduling problems were proved to be NP-hard by Gupta [11] and Hoogeveen et al. [12]. Hence, many heuristics and metaheuristics have been developed to search for optimal or near-optimal solutions for solving the HFS scheduling problems. Gupta and Tunc [13] proposed four heuristics to minimize makespan for two stage HFS scheduling problems with separable setup and removal times. Lee and Vairaktarakis [14] addressed heuristics to minimize makespan for solving the HFS problems. Hunsucker and Shah [15] evaluated the performance of different dispatching rules for a constrained HFS scheduling environment. Brah and Loo [16] developed a heuristic procedure to solve flow shop scheduling problems with multiple processors. Negenman [17] presented a local search method to solve HFS problems. Soewnadi and Elmaghraby [18] suggested several heuristics for the three-stage HFS with the multiple processors to minimize makespan. Oğuz et al. [19] also proposed some heuristics to solve multiprocessor task scheduling in a two-stage flow shop scheduling problems. He and Babayan [20] solved three stage flexible flow shop scheduling problems using an agent based approach. Kyparisis and Koulamas [21] developed some heuristics to minimize the makespan for the multistage flexible flow shop scheduling problem with uniform parallel machines in each stage.Recently, researchers have applied many metaheuristics to solve the HFS problems. Engin and Döyen [22] proposed an artificial immune system algorithm for solving the HFS problems to minimize the makespan. Zandieh et al. [23] also presented an immune algorithm approach for solving the HFS problems. They considered the sequence-dependent setup times. Ying [24] proposed a new hybrid immune algorithm and iterated greedy algorithm to minimize the makespan in the multistage HFS scheduling problems. Yang et al. [25] solved the flow shop scheduling with multiple processor problems by using a tabu search simulation optimization approach. They have considered a case study problem of a multilayer ceramic capacitor manufacturing company to minimize tardiness. Bożejko et al. [26] addressed a parallel tabu search algorithm to solve the HFS scheduling problems. Many researchers have applied different versions of genetic algorithm (GA) to solve the HFS problems [27–32]. Ying and Lin [33] developed an ant colony system heuristic for the multistage HFS problem with multiprocessor tasks to minimize the makespan. They tested the algorithm over the benchmark problems from the literature. Alaykýran et al. [34] also suggested an ant colony optimization algorithm for solving the HFS problems. Wang et al. [35] proposed a simulated annealing (SA) algorithm for the HFS scheduling problems to minimize the makespan. Tseng and Liao [36] presented particle swarm optimization (PSO) algorithm to solve the HFS problems. Recently, Liao et al. [4] developed a PSO hybridized with bottleneck heuristic to solve the HFS problems to minimize makespan. The different HFS environments, constraints and solution methodologies can be found in [37] and [38].In this paper, a new metaheuristic algorithm called cuckoo search (CS) algorithm is used to solve the HFS problems. Cuckoo search algorithm is one of the population based metaheuristic algorithms developed by Yang and Deb in 2009 [39]. Yang and Deb [40] solved various optimization problems using the cuckoo search algorithm. Yang and Deb [41] also proposed a multiobjective cuckoo search algorithm for design optimization problems. Gandomi et al. [42] solved the structural optimization problems using cuckoo search algorithm. Walton et al. [43] proposed a modified cuckoo search algorithm to solve the optimization problems. Layeb [44] addressed a novel quantum inspired cuckoo search for knapsack problems. Durgun and Yildiz [45] used the cuckoo search algorithm to solve design optimization problems for vehicle components. Yildiz [46] determined the optimal machining parameters for milling operations using the cuckoo search algorithm.From the current literature, one can easily understand that the cuckoo search algorithm is applied to solve different types of optimization problems. However, the application of cuckoo search algorithm to solve the scheduling problems is very limited. Marichelvam [47] proposed an improved hybrid cuckoo search algorithm for solving the permutation flow shop scheduling problems. Chandrasekaran and Simon [48] proposed a hybrid cuckoo search algorithm integrated with fuzzy system for solving multi-objective scheduling problems. Burnwal and Deb [49] solved the flexible manufacturing scheduling problem using the cuckoo search algorithm. They compared the results with GA and PSO. Hence in this paper, we apply the cuckoo search algorithm to solve the HFS problems. Similar to many metaheuristic algorithms, the initial solutions in the cuckoo search algorithm are also generated randomly. But in this paper a constructive heuristic called NEH heuristic developed by Nawaz et al. [50] is applied to generate one of the initial solutions to improve the solution quality. In addition, the parameters of the cuckoo search algorithm are tuned in this paper to increase the efficiency of the algorithm. Hence, in this paper, an improved cuckoo search (ICS) algorithm is presented to minimize makespan for the HFS scheduling problems.The paper is organized as follows: the problem definition is presented in Section 2. The CS and ICS algorithms are explained in Section 3. Computational results are presented in Section 4. Conclusions and future research opportunities will be discussed in Section 5.The HFS scheduling problems considered in this work consist of k stages in series. Each stage i (i=1,2,…,k) consists of m identical machines in parallel. A set of N jobs j (j=1,2,…,N) has to be processed on anyone of the machines available at each stage. The processing times of job j at various stages are P1j,P2j,…,Pkj, and it may be zero for some jobs as the jobs are not processed in some stages. Processing time is the time required to process a job in a stage. The objective is to minimize the makespan (Cmax). The makespan for a scheduling problem is defined as the completion time of the last job to leave the production system [1]. Makespan is used for measuring the system utilization.The makespan should be at least equal to the completion time of the last job at the last stage. Completion time is the moment at which the job is completed in a stage. Completion time of the job j at stage s is the sum of the starting time of job j at stage s and the processing time of job j at stage s. Processing of a job can be started in the first stage only if the job is ready. The ready time of the job j is the moment at which the job j is available for processing. Each job should be assigned to exactly one machine at each stage. Processing of a job can be started in a stage only when it has been completed at the previous stage. The makespan value should be positive. The formulation of mathematical model can be found in [51].In order to solve the HFS scheduling problem, the following assumptions are considered in this paper:1.The number of stages and the number of machines at each stage are known in advance.The numbers of jobs, their processing times are known in advance and are fixed.All the jobs and the machines are available at time zero.No pre-emption is allowed.The setup and transportation times of the jobs are independent of the sequence and are included in the processing times.Each machine can process only one job at a time.All the machines are available for the entire period of scheduling (no machine breakdown).The assumptions 1, 2, 3, 4 and 6 are common for most of the real cases. For instance, the first assumption is applicable for all industrial scheduling problems as the scheduler knows the number of stages and the number of machines at each stage in advance. However, the assumptions 5 and 7 might not be real. These assumptions were included to simplify the problem.Cuckoo search (CS) algorithm is a new nature-inspired metaheuristic algorithm developed by Yang and Deb. CS algorithm was inspired by the obligate brood parasitic behaviour of some cuckoo species in combination with the Lévy flight behaviour of some birds and fruit flies in nature. The breeding behaviour and the Lévy flights will be discussed in the following sections. The details may also be found in [39].Some of the cuckoo species lay their eggs in the nests of other host birds. The cuckoos often select the recently spawned nests instinctly. They may remove others eggs to increase the hatching probability of their own eggs. Some host birds can engage direct conflict with the intruding cuckoos. If a host bird discovers the eggs are not their owns, they will either throw these alien eggs away or simply abandon its nest and build a new nest elsewhere. Some cuckoos have evolved in such a way that female parasitic cuckoos are often very specialized in the mimicry in colour and pattern of the eggs of a few chosen host birds. This will reduce the probability of their eggs being abandoned. This also increases their reproductivity. Furthermore, the timing of egg-laying of some cuckoos is also amazing. The cuckoos often choose a nest where the host bird just laid its own eggs. In general, the cuckoo eggs hatch slightly earlier than their host eggs. Once the first cuckoo chick is hatched, the first instinct action it will take is to evict the host eggs by blindly propelling the eggs out of the nest. This will increase the cuckoo chick's share of food provided by its host bird. Moreover, a cuckoo chick can also mimic the call of host chicks to gain access to more feeding opportunity.In general, animals search for food in a random or quasi-random manner. The foraging path of any animal is effectively a random walk as the next move is based on the current location or state and the transition probability to the next location. The probability for choosing depends implicitly on a probability which can be modelled mathematically. The flight behaviour of many animals and insects has demonstrated the typical characteristics of Lévy flights [39]. Hence, such behaviour has been applied to optimization and optimal search, and preliminary results show its promising capability.Based on the brooding behaviour of cuckoos, we can now describe the basic steps of cuckoo search using the following three idealized rules/approximations:1.Each cuckoo lays one egg (solution) at a time, and dumps its egg in a randomly chosen nest. That is, an egg represents a solution. As there is one egg in one nest, then we can use the simplest case that an egg is equivalent to a nest and a solution.The best nests with high quality eggs/solutions will carry out to the next generation. Here is the best means the solution with the best (minimum) objective values (for minimization problems).The egg laid by a cuckoo can be discovered by the host bird with a probability Paand a nest will then be built. That is to say, a fraction Paof the n nests being replaced by new nests (with new random solutions at new locations).For minimization problems the quality or fitness function value may be the reciprocal of the objective function. Each egg in a nest represents a solution and the cuckoo egg represents a new solution. Therefore, there is no difference between an egg, a nest and solution. The pseudo code of the cuckoo search algorithm is presented in Fig. 2.When generating new solutions xa(t+1) for ath cuckoo a Lévy flight is performed using the following equation:(1)xat+1=xat+αs⊗H(pa−ε)⊗(xjt−xkt),wherexjtandxktare two different solutions selected randomly by random permutation, H(u) is a Heaviside function, ɛ is a random number drawn from a uniform distribution, and s is the step size. On the other hand, the global random walk is carried out by using Lévy flights(2)xit+1=xit+αL(s,λ),L(s,λ)=λΓ(λ)sin(πλ/2)π1s1+λ,(s≫s0>0).where gamma (lamda) is the Gamma function and lamda the random step length. Lévy flights essentially provide a random walk while their random steps are drawn from a Lévy distribution for large steps (1<λ≤3). Here the step size vector L is drawn from the power-law distribution as given in (2).The cuckoo search algorithm consists of three parameters Pa(probability of worse nests to be abandoned), α (step size), and λ (random step length). Among them the parameters Paand α are very important to obtain better solutions. In the literature these parameters of the cuckoo search algorithm are kept constant. But, in this paper the parameters Pa, α, and λ are not kept constant. The parameters of Paand α are determined by the design of experiments. The values used in our simulations are based on extensive parametric studies [39], and we will choose n=15–40, λ=1.5, and α=0.01*abs(Ub−Lb), where Ub and Lb are the upper bound and lower bound, respectively, of the problem of interest.Most metaheuristic algorithms use uniform and Gaussian randomization techniques. Here we have used Lévy flights. One of the reasons is that Lévy flights are more efficient than random walks based on Gaussian random steps. This is because the variance (representing the average squared distance) of the Lévy flights increases nonlinearly, faster than the linear relationship in Gaussian random walks. In fact, the mean and variance can approach infinite, and thus Lévy flights are more suitable for explorative large-scale search. Another reason to use Lévy flights is that the occasional larger steps drawn from a Levy distribution can enable the search algorithm to have the capability to escape from a local minimum, and thus increase the probability of finding the true global optimality [52,53].Similar to many metaheuristic algorithms the solutions are generated randomly in the cuckoo search algorithm. But, studies have reported that the performance of the metaheuristic algorithms might be improved by generating some of the initial solutions by using some constructive heuristics that incorporate the knowledge of specific type of problems of interest. Hence in this paper, we try to incorporate a constructive heuristic called as NEH heuristic into the standard cuckoo search algorithm so as to improve the solution quality for the HFS scheduling problems. The NEH heuristic was originally developed to minimize the makespan for n-job m-machine flowshop scheduling problems. The NEH heuristic consists of the following three steps:Step 1: The sum of processing times of all the jobs on all machines is calculated. Then the jobs are sorted in decreasing order of the sum. Let the sequence be j1, j2,…, jn.Step 2: The first two jobs j1 and j2 are taken and ordered them so that the makespan of the sequence given by the ordering of these two jobs is minimized.Step 3: The remaining jobs j3, j4,…, jnare inserted in each possible position in the sequence that results in the smallest makespan value.Ruiz and Maroto [54] proved that the NEH heuristic is the best constructive heuristic to minimize the makespan for the flow shop scheduling problems. Hence, it is planned to implement the NEH heuristic to solve the HFS scheduling problems. The sum of processing times for all the jobs in all stages is calculated. The jobs are arranged in the decreasing order of the sum. Then the steps 2 and 3 of the NEH heuristic are applied. The solution obtained by the NEH heuristic is used as an initial solution and the remaining solutions are generated randomly.As for any metaheuristic algorithm, if we can start with better solutions that are closer to the potential optimal solutions, we can save some computational time. Thus, it requires fewer function evaluations than those random initial solutions. This is, in fact, to incorporate one known design or knowledge of the problem of interest. A simple way is to use a two-stage procedure using two different methods; that is to run one method such as NEH heuristic to get some crude solutions which are better than initial, random solutions. Then, we use these solutions obtained by the first method as the new initialized solutions for cuckoo search, and consequently run CS to get the final better and/or optimal solutions. It can be expected that this two-stage method can produce better results than each individual method alone. In fact, from our simulations given later, this ICS can indeed obtain excellent results with superior efficiency.The proposed ICS algorithm for the HFS problem was coded in C++ and run on a Pentium 4 3.4GHz PC with 512MB memory.Now we consider a real-world application. The scheduling problem of a furniture manufacturing company is considered in this paper. The company is one of the leading manufacturers in this field in India. The company produces a variety of furniture products. Among them, the ten drawer horizontal media storage cabinets are considered in this research work. The ten drawer horizontal media storage cabinets consist of 20 different parts. Each part may be considered as a job. Hence, we consider 20 jobs in this problem. The parts are produced in batches. The batch size is 60. The production system consists of five different stages. The five stages are punching, bending, welding, power pressing and drilling. Each stage consists of the different number of identical parallel machines. The layout of the case study company is shown in Fig. 3.The processing time is the time required for a job to be processed in different stages. The processing time taken by each job is measured many times and the average time is taken in this work. The processing time (in seconds) of all 20 jobs in different stages are given in Table 1. The first job needs two operations namely punching and bending. The processing time for these two operations is 54 and 48s, respectively. The processing time is zero for other operations. The 16th job only needs the drilling operation. Hence, the processing time is zero for all other jobs.In the furniture company, neither a heuristic nor an algorithm is applied to obtain the sequence. Instead the sequence is obtained only by following the First In First Out (FIFO) sequence. Hence, the company sequence is 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20. The makespan for this sequence is 13640s. In order to minimize the makespan value the ICS algorithm is applied. By this ICS algorithm, a new sequence (15 8 5 18 19 9 12 20 4 6 7 3 16 13 14 17 2 11 10 1) is obtained and the makespan is minimized to 10700s. In order to compare the performance of the proposed ICS with other existing algorithms, we have solved the same problem using genetic algorithm (GA), simulated annealing (SA), ant colony optimization (ACO), particle swarm optimization (PSO), and the standard cuckoo search (CS) addressed in the literature. The results obtained by the ICS algorithm for the case study problem is compared with GA [29], SA [35], ACO [33], PSO [36], CS [49] algorithms and NEH heuristic [50]. We tested the algorithms with the similar parameters used in the respective literature papers and the same number of iterations. The parameters are presented in Appendix A. The results are presented in Table 2. From the results in the above table, it can be concluded that the ICS algorithm performs better than the GA, SA, ACO, PSO, CS algorithms and NEH heuristics. The ICS algorithm provides better results than the CS algorithm. This is due to the NEH constructive heuristics used to generate one of the initial solutions.Monte-Carlo simulations were conducted 20 times for the case study problem. The mean and standard deviation of the makespan were calculated. Moreover, the mean and standard deviation of the computational time were also calculated. The results are presented in Table 3. In order to evaluate the performance of the ICS algorithm, we adapted percentage deviation as a performance measure. The percentage deviation (PD) is calculated by using the following formula:(3)PD=CX−CICSCX×100where CX=makespan obtained by FIFO, GA, SA, ACO, PSO, CS algorithms and NEH.HeuristicsCICS=makespan obtained by ICS algorithm.The PD for the case study problem is presented in Table 4.The ICS algorithm improves the existing company result by 21.55%. That is the direct labour cost may be reduced by 21.55% by this ICS algorithm. In addition to this, the level of customer satisfaction is also improved. This would be useful for the further growth of the company.We conduct a set of experiments to evaluate the performance of the proposed ICS algorithm. The different factor levels for the design of experiments are given in Table 5. The job processing time is uniformly distributed over [1,50] seconds. The number of machines mkat kth stage is chosen randomly over [2,5]. The parameters Pa, α, and λ are also taken from the values presented in Table 5. In total, we have tested 15 problems with different parameters. Monte-Carlo simulations were conducted 20 times for the random problems also. The results obtained by the ICS algorithm are compared with GA, SA, ACO, PSO, CS algorithms and NEH heuristics. The best makespan comparison is presented in Table 6. The average makespan comparison is presented in Table 7. The standard deviation of makespan is presented in Table 8. The best, average and standard deviation of the computational time are presented in Tables 9–11respectively.From the results, it is observed that the proposed ICS algorithm provides optimal results with minimum computational time.

@&#CONCLUSIONS@&#
Scheduling problems under complex constraints are usually challenging to solve. In this paper, we have used an improved cuckoo search (ICS) algorithm to tackle such flow-job scheduling problems. In this ICS algorithm, a constructive heuristic called NEH heuristic is used for initialization so as to obtain the optimal or near optimal solutions rapidly. The algorithm has been tested with real-world application data from a furniture manufacturing company. Moreover, we have conducted the design of experiments with different parameters to evaluate the performance. Computational results and detailed comparison studies with GA, ACO, SA, and PSO show that the ICS algorithm outperforms many other metaheuristic algorithms and the NEH heuristic in the literature.Though the proposed algorithm has been tested with random problem instances, it would be interesting to see the result for benchmark problems for large-scale HFS scheduling problems. In the future, we will investigate other constructive heuristics to build the initial solutions. We will also apply this proposed algorithm to other HFS problems related with due-date-related performance measures. Further research should consider to extend to HFS problems where machines are not identical at each stage. We have made several assumptions in this paper. Some of these assumptions can be dropped and we can solve the problems using the ICS algorithm. That is the proposed algorithm could be applied to solve the HFS scheduling problems with setup and transportation times. We can consider the maintenance of machines too. This may be another possible scope.