@&#MAIN-TITLE@&#
SpiNNaker: Enhanced multicast routing

@&#HIGHLIGHTS@&#
We implemented 4 multicast routing algorithms for SpiNNaker.The two most complex algorithms allow for different implementation details.We explored the effects of these implementation details.The exploration allowed for more effective implementation of the algorithms.The enhanced implementations are better suited to be used in production.

@&#KEYPHRASES@&#
Multicast route generation,Massively-parallel processing,Triangular toroidal mesh,Neuromimetic architecture,Spiking neural network simulation,Low-power architecture,

@&#ABSTRACT@&#
The human brain is a complex biological neural network characterised by high degrees of connectivity among neurons. Any system designed to simulate large-scale spiking neuronal networks needs to support such connectivity and the associated communication traffic in the form of spike events. This paper investigates how best to generate multicast routes for SpiNNaker, a purpose-built, low-power, massively-parallel architecture. The discussed algorithms are an essential ingredient for the efficient operation of SpiNNaker since generating multicast routes is known to be an NP-complete problem. In fact, multicast communications have been extensively studied in the literature, but we found no existing algorithm adaptable to SpiNNaker. The proposed algorithms exploit the regularity of the two-dimensional triangular torus topology and the availability of selective multicast at hardware level. A comprehensive study of the parameters of the algorithms and their effectiveness is carried out in this paper considering different destination distributions ranging from worst-case to a real neural application. The results show that two novel proposed algorithms can reduce significantly the pressure exerted onto the interconnection infrastructure while remaining effective to be used in a production environment.

@&#INTRODUCTION@&#
The SpiNNaker neuromimetic architecture system is a biologically-inspired massively-parallel architecture based on a custom-made multicore System-on-Chip (SoC). SpiNNaker targets the simulation, in biological real-time, of very large-scale spiking neural networks, with more than 109 neurons. To put this number in context, it roughly represents 1% of the human brain, a small primate [22], ten mice [23] or one thousand bees [34].Spiking neural networks communicate by means of spike events which occur when a neuron is stimulated beyond a given threshold and discharges an electrical impulse. These spikes are communicated to all connected neurons, with typical fan-outs of the order of 103[14]. At a realistic biological firing rate of 10Hz, there could be more than 1010 neuron firings per second, which can replicate up to 1013 communication events per second in the largest SpiNNaker configuration. Thus, an essential problem inherent to the simulation of spiking neural networks is how to distribute large numbers of small packets very widely amongst up to the million processors featured by SpiNNaker in an efficient way and with minimal latency.Previous work demonstrated the benefits of using a pure multicast architecture, rather than a more conventional unicast or point-to-point one, for this kind of application through both analytical [38] and empirical [39] evaluations. However, constructing multicast routes from a source to a set of destinations is known to be an NP-complete problem [31]. For this reason, adequate routing algorithms are essential for SpiNNaker operation. We present and evaluate a collection of routing algorithms and compare them with each other. Our evaluation considers a range of traffic patterns: non-local traffic as a worst case, centroid-based clustered traffic as a general case with varying degrees of locality and real neural traffic from a thalamocortical column model. The baseline algorithms are based upon well-known, oblivious routing algorithms used in point-to-point communications. The other two novel algorithms present an intelligent behaviour as they use exploration to substantially reduce the number of network resources employed to perform the multicast communication. This paper performs exhaustive analysis of the latter two algorithms by investigating the different implementation decisions, how they influence their performance and what the involved tradeoffs are.The construction of large-scale versions of SpiNNaker is ongoing and is expected to culminate with the million-core system in the following months. Some prototypes and production systems have already been designed and fabricated. Back in 2010 a first batch of test chips (two cores and a fully functional router) were produced and successfully demonstrated running spiking neural nets. This was followed in 2011 by the production of small quantities of full-fledged SpiNNaker chips with 18 ARM cores and the development of small boards, able to house four SpiNNaker chips and to support inter-board communications. These boards, due to their low-power design, have been used as control devices for robotic systems [12], providing them with real-time stimulus–response behaviour [17].As shown in Fig. 1we have a reached most milestones in the path towards the full-fledged SpiNNaker: a 48-chip board has been designed and large numbers of them have been produced and can be interconnected to construct increasingly large machines. One board forms a 103-core machine, one rack frame with 24 boards forms the 104 one, a cabinet with five of these frames (120 boards) has just been put together and forms the 105 machine. The final expansion will be to put ten of these cabinets together to conform the full-fledged, million-core SpiNNaker machine. As we approach the largest configurations of the system, the route generation is becoming an increasingly important aspect of the machine’s operation, and so the proposed algorithms aim to meet this requirement.Aside from the hardware, an extensive collection of system software and application libraries is already offered to operate SpiNNaker and new features are developed and released frequently. Among all the software involved in SpiNNaker, is especially important the PyNN [13] frontend. This is a domain specific language devised to define spiking neural networks and which is widely used within the neuroscientist community. The PyNN/SpiNNaker combination exploits the flexibility of the SpiNNaker architecture and decouples neural applications from the actual hardware, allowing users to rapidly develop and simulate spiking neural networks without any knowledge of the intricacies of the underlying system. Thanks to this transparency for the end-user, the adoption of SpiNNaker as a simulation platform is rapidly growing within the cognitive computing community.

@&#CONCLUSIONS@&#
The main contribution of this paper is the description of four routing algorithms to construct multicast trees for mesh-like topologies, such as the one in SpiNNaker, and the evaluation of them against a comprehensive number of performance metrics related to the most sensitive resources of SpiNNaker’s communications infrastructure using a reasonable collection of traffic models. Our results show that generating multicast routes using DOR, one of the most frequently used algorithms for mesh-like topologies, and the first one that was implemented on SpiNNaker, is counterproductive because it demands the highest network resources both in terms of bandwidth and routing entries. Using DOR may be required to prevent deadlock in some systems, but as for SpiNNaker, it has its own deadlock-avoidance mechanism built-in into the router. Consequently it was substituted by LDFR, another oblivious routing algorithm which proved to be a well-rounded solution as the multicast routes can be generated very quickly while keeping resource requirements low and balanced.More sophisticated strategies, which look for routes in their surroundings, have also been considered. ESPR searches for connections using shortest paths; whereas NER searches in all the surroundings even if no shortest path is used. These two strategies can further reduce the network requirements but required some fine-tuning in order to make them competitive—especially in terms of generation time. First we found that sorting the destinations based on their distance to the source is desirable as it favours building a more effective multicast tree. We also found that restricting the connection points during the exploration phase may help reduce a little the number of routing table entries, but may end up resulting in inefficient parallel branches. Finally we investigated the effect that the exploration range may have in the NER algorithm and found that relatively short ranges (between 20 and 30) should be enough to generate efficient multicast routes without slowing down the generation process significantly. A comparison of the four algorithms suggests that NER seems to be the best candidate to be used for the largest configurations of SpiNNaker.In this paper these four mechanisms have been described and implemented in the context of the SpiNNaker topology, but they are general enough to be employed in other mesh-like topologies. For example we could adapt the presented algorithms to the 3D tori implemented in state-of-the-art massively parallel processors such as the IBM’s BlueGene or the Cray’s XT families. This adaptation is straightforward simply by using 3D torus routing functions while keeping the strategy formulations, as they can use the diagonal as the Z dimension of a 3D topology.