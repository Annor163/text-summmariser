@&#MAIN-TITLE@&#
Optimization-based decision support for scenario analysis in electronic sourcing markets with volume discounts

@&#HIGHLIGHTS@&#
We consider supplier selection problems in e-sourcing with volume discounts.We propose an optimization model which allows for effective scenario analysis.The model reduces the number of parameter settings to explore considerably.We provide experimental results using exact algorithms and heuristics.We find that meta-heuristics can be effectively used for these problems.

@&#KEYPHRASES@&#
Electronic market,Volume discount,Mixed integer programming,

@&#ABSTRACT@&#
E-Sourcing software has become an integral part of electronic commerce. Beyond the use of single-lot auction formats, there has been an emerging interest in using e-sourcing software for complex negotiations. Procurement markets typically exhibit scale economies leading to various types of volume discounts which are in wide-spread use in practice. The analysis of bids in such negotiations typically leads to computationally hard optimization problems. Scenario analysis describes a process, in which procurement managers compute different award allocations as a result of different allocation constraints and parameters that they put in place. This paper discusses an optimization model and computational methods which allow for effective scenario analysis with allocation problems in the presence of different types of discount policies and allocation constraints. The model reduces the number of parameter settings to explore considerably. The models are such that they can often not be solved exactly for realistic problem sizes in practically acceptable time frames. Therefore, we provide results of numerical experiments using exact algorithms and heuristics to solve the problem. We find that RINS and Variable Neighborhood Search can be effectively used in traditional branch-and-cut algorithms for this problem. Overall, new computational approaches allow procurement managers to evaluate offers even in markets with a complex set of volume discounts and multiple allocation constraints.

@&#INTRODUCTION@&#
Electronic auctions and requests for quotes play a central role in the sourcing operations of companies today (Limberakis 2012). Also, much research in electronic commerce has focused on the electronic sourcing markets (Amelinckx et al. 2008) and the design of procurement auction formats and bid evaluation algorithms (Sun and Sadeh 2009; Ray et al. 2011; Huang et al. 2011). Our paper contributes to this line of research, and is also motivated by the increasing popularity of mathematical optimization in e-sourcing practice (Limberakis 2012).Volume discounts are ubiquitous in such procurement negotiations and a result of economies of scale that a supplier experiences. For example, a supplier might charge a lower unit price, if a procurement manager buys more than thousand units of a commodity due to economies of scale on a finishing line. Overall, scale economies of this sort can arise from lower input costs to reductions in unit cost as the size of a facility and the usage levels of other inputs increase. Whereas economies of scale primarily refer to efficiencies associated with supply-side changes, such as increasing or decreasing the scale of production of a single product type, economies of scope refer to efficiencies primarily associated with demand-side changes, such as increasing or decreasing the scope of marketing and distribution of different types of products. Traditional auction formats as used in e-sourcing software, typically do not allow bidders to specify such volume discounts or consider them in the award allocation. Procurement managers often try to take volume discounts into account using spreadsheet programs. Unfortunately, the consideration of volume discounts leads to hard computational problems as we will see in the following and it is unlikely that a procurement manager would find cost minimal solutions using heuristics in a spreadsheet program.Combinatorial auctions allow for bids on packages of items and are one possibility to address volume discounts in the auction design. There are a growing number of publications on combinatorial auctions in the Information Systems literature (Ono et al. 2003; Bichler et al. 2011; Adomavicius et al. 2012; Scheffel et al. 2011; Hsieh and Lin 2012), and they seem to be a natural solution for markets with economies of scale. CAs can be seen as the most general type of market mechanism as they allow bidders to express general valuations including substitutes and complements. Combinatorial auctions can well be used for procurement decisions with multiple line items and large volumes of each. A multi-unit combinatorial auction allows for the specification of volume discounts for different quantities of an item with a bundle price. While the winner determination is straightforward to model, the elicitation of bidder preferences becomes a problem. For a single-unit combinatorial auction with n items, a bidder can submit 2npossible bids. In a multi-unit combinatorial auction, the number of possible bids grows super-exponentially with∑i=0n-1kn-ini, with k being the number of units for each item. For example, with 10 items and 6 allowable quantities for each of them the supplier could specify more than 270 million bids. Clearly, suppliers will only be able to specify a small proportion of bids, and the auctioneer will most likely not find the efficient, maybe not even a feasible allocation.Compact bid languages provide a remedy for such markets. Davenport and Kalagnanam (2000) were among the first authors to discuss volume discount bids. Their bidding language requires suppliers to specify continuous supply curves for each item, allowing them to express economies of scale. They apply discounts only to additional units above a threshold of a specific price interval. In contrast to these Incremental (Volume Discount) Bids, Goossens et al. (2007) proposed tiered bids, which we refer to as Total Quantity Bids. The latter are valid for the entire volume of goods purchased after a certain quantity threshold.Fig. 1provides an example of tiered bids, where a procurement manager has a demand of 3000units of one item only, and suppliers are restricted to 2000units. Supplier 1 charges a unit price of $3.50 for up to 2000units, while supplier 2 charges $4 for up to 1500, but only $2.50 per unit for the entire quantity, if the purchasing manager bought 1500–2000units. A greedy solution would be to purchase 2000units from supplier 3 and the remaining 1000 units from supplier 1, which would lead to 7500$. The optimal solution is to buy 1500units from supplier 2 and 1500units from supplier 3 resulting in a total cost of 1500*2$+1500*2.5$=6750$. Typically, there is not a single commodity only but dozens, and the procurement manager needs to consider allocation constraints on the number of winners or the allocation per winner. The problem of finding the cost-minimal solution can be shown to be NP-complete (Goossens et al. 2007).In addition to the above discount policies, suppliers often provide rebates for a certain overall volume, such as a 3% rebate if they sell items for more than a million. Such Lump Sum Rebates are a possibility to express economies of scope across multiple items. In most real-world procurement negotiations different suppliers use different discount policies including incremental volume, total quantity and lump sum rebates, and a procurement manager needs to take all of them into account in an award decision. Bichler et al. (2011) present an optimization formulation allowing for incremental and total quantity discounts, as well as lump sum rebates based on total spend or volume on different items. They formulate the allocation problem as a mixed integer program, and analyze the computational complexity and the empirical hardness of this problem. The formulation allows for a rich bidding language and a large number of discount policies that can be found in procurement practice. The approach has already been applied successfully in the field.Such problems would have been considered intractable only a few years ago for realistic problem sizes, but with recent advances in hardware technology and algorithmic developments in integer programming which allow for effective parallel implementations of advanced branch-and-cut solvers on multiple cores, there is hope to solve relevant problem sizes. However, with the use of such optimization approaches in practice new problems arise, which require new types of decision support for procurement managers.Typically, complex procurement decisions are not met with a single optimization. Procurement managers need to take multiple allocation constraints into account and the cost minimal solution across multiple line items needs to be found. Procurement managers analyze different scenarios in a sequence employing different types of allocation constraints. For example, they want to set lower and upper bounds for the number of suppliers or for the total spend awarded to a single supplier or a group of suppliers, and understand the impact of these constraints on total cost. This process has been referred to as scenario navigation or scenario analysis (Boutilier et al. 2004) and requires re-optimization of different versions of the problem with different constraints interactively in minutes. Such an interactive usage poses tight time constraints of a few minutes only on the solution time of each optimization run.One of the problems in scenario analysis is the large number of parameters to explore. Typically, the parameters of interest are the right hand sides of the allocation constraints, more specifically, bounds on the number of winners, the volume awarded per bidder or the demand of the buyer. Typically, procurement managers seek for even cheaper solutions, or they want to learn about parameters, which yield a total cost below a certain budget constraint. Due to the fact that dual variables cannot readily be interpreted in a mixed integer program, there is little guidance for procurement managers as to which constraints have the biggest impact on total cost or which combination of constraints they should relax in order to achieve their goals. Therefore, scenario analysis often leads to many optimization runs with many different combinations of right-hand side parameters. The problem has not received attention in the literature to our knowledge. However, in our field work, the lack of effective scenario analysis turned out to be an important criterion for the adoption of optimization approaches in e-sourcing.Our contribution is twofold: First, we introduce a formulation of the winner determination problem (SQSSA) that allows for effective scenario analysis. The formulation allows the specification of acceptable bounds on the right-hand side parameters of the winner determination problem and finds optimal allocations, which minimally violate these bounds. So, rather than having to solve many optimization problems with different parameter settings, the procurement manager uses optimization to find the best solution within acceptable bounds of the right hand sides. The model is in the spirit of literature on parametric integer programming (Bradley et al. 1977). It draws on the supplier quantity selection model (SQS) by Bichler et al. (2011), but reduces the effort for procurement managers to find appropriate scenarios significantly. A specific problem in the model is non-linear constraints due to the new right-hand side variables introduced in the model. We will show effective ways to handle such constraints using standard algorithms to solve integer programs.In our experimental evaluation of exact algorithms, we analyzed problems where bidders could individually specify up to 10 discount intervals, to account for the flexibility that suppliers sometimes demand in expressing their discount schedules. These problems are often such that they cannot be solved exactly any more in acceptable time frames for larger problem sizes beyond a few items and suppliers only. The number of discount intervals and the allocation constraints during the scenario analysis can make these problems so hard that only small instances with up to six items and suppliers can be solved exactly within 10min.Therefore, as a second contribution, we provide numerical experiments of heuristic approaches to solve larger problem sizes of up to 50 items and bidders. Previous work has mainly relied on standard solvers for mixed-integer programs. It turns out that RINS and Variable Neighborhood Search (VNS) can help to improve on exact algorithms in a number of instances.The managerial relevance of the results is twofold. First, we show that with appropriate optimization models and advanced computational methods procurement managers can set up sourcing markets, which allow them to compare the offerings of complex volume discount bids. Such markets provide flexibility to suppliers in expressing their economies of scale, and they allow buyers to select the cost-minimal solution. Second, the time and effort to analyze complex offerings with volume discounts using heuristics in spreadsheet programs is substantial. Adequate decision support tools for scenario analysis can not only improve the quality of the results, but also make the analysis much more effective and less time-consuming.We assume a sealed-bid auction mechanism and focus on the allocation problem after all bids have been collected. Typically bids are collected via e-sourcing software online. Then the scenario analysis is performed once or multiple times with different constraints. In what follows, we introduce a mixed integer program (MIP) based on SQS (Bichler et al. 2011), which allows for effective scenario analysis. A procurement manager would first solve the SQS with an initial set of constraints on the number of acceptable winners, the volume, or spend per winner. Standard branch-and-cut algorithms can be used to solve respective problems (Wolsey and Nemhauser 1999). This provides a baseline to compare against. Typically, procurement managers would then search for combinations of parameters, which lead to additional savings or meet certain budget constraints. Exploring these scenarios with different sets of parameters can be time consuming.The following MIP, referred to as supplier quantity selection for scenario analysis (SQSSA), is designed in the spirit of parametric linear programs and uses optimization to find solutions within pre-specified bounds in the right-hand sides of SQS. SQSSA adds the SQS objective function as a new budget constraint (12), and treats relevant right-hand side parameters of constraints (8), (9), and (11) on quantity or spend per bidder, or the number of winners, as variables. In other words, a procurement manager wants to understand, if some of the variables in the objective function can be set, such that the problem is feasible with a given budget limit in constraint (12). Of course, the upper bound variables can easily be replaced by the respective lower bound variables if desired.A description of all parameters and variables can be found in Appendix A.2. All constraints a numbered, whereas the characters d, m, l and k indicate a constraint for a discount, a markup, a lump sum discount, or a lump sum markup, resp. In constraints (8)–(10) we also use the abbreviations a, rc, rf, q and w to indicate whether the constraints are used for absolute, relative-cap, relative-floor, quantifying (i.e. only-if-winning) or a business rule to limit the number of winners.(1)min∑r∈ψQabsvru∑r∈ψSabstru∑r∈ψWLfrs.t.∑s∈Sxi,s⩾Wi∀i∈I(2)xi,s⩾Ei,s∀i∈I,∀s∈S(3d)∑i∈Idxi,sd-Ddcd⩾yd∀d∈D(3m)∑i∈Imxi,sm+Bcm-Dm⩽ym+B∀m∈M(4d)Bcd⩾yd∀d∈D(5d,l)∑n∈Ndjn-∑e∈Edce⩾(|Nd|+|Ed|)cd-|Ed|∀d∈D∪L(5m,k)|Nm|1∑n∈Nmjn∑e∈Emce⩽cm+1-|2Nm|1∀m∈M∪K(6d,l)∑i∈InPi,snxi,sn-∑d∈DnRdyd+∑m∈MnRmym⩾Snjn∀n∈N(6m,k)∑i∈InPi,snxi,sn-∑d∈DnRdyd+∑m∈MnRmym⩽Bjn+Sn∀n∈N(7d,l)∑i∈Inxi,sn⩾Qnjn∀n∈N(7m,k)∑i∈Inxi,sn-Qn⩽Bjn∀n∈N(8a)arvrl⩽∑i∈Ir∑s∈Srxi,s⩽vru∀r∈ψQabs(8rc)∑i∈Ir∑s∈Srxi,s-zr∑i∈Ir∑s∈Sxi,s⩽0∀r∈ψQrel,cap(8rf)∑i∈Ir∑s∈Srxi,s-zr∑i∈Ir∑s∈Sxi,s⩾0∀r∈ψQrel,floor(9a)artrl⩽∑i∈Ir∑s∈SrPi,sxi,s-∑d∈DrRdyi,d+∑m∈MrRmyi,m⩽tru∀r∈ψSabs(10q)∑i∈Ir∑s∈Srxi,s⩽Bar∀r∈ψQabs∪ψSabs(10w)∑i∈Irxi,s⩽Bar,s∀r∈ψWL(11)∑s∈Srar,s⩽fr∀r∈ψWL(12)∑i∈I∑s∈SPi,sxi,s-∑d∈DRdyd+∑m∈MRmym-∑l∈LRlcl+∑k∈KRkck<ΓConstraints (1)–(9) are taken from SQS. They ensure that the demand Wiis fulfilled (1) and the amount xi,sof each product i purchased from each supplier s does not exceed the maximum quantity Ei,sprovided by the suppliers (2). Constraints (3d) and (3m) determine the relevant volume ydor ymfor each discount or markup, whereas Ddand Dmrepresent the thresholds, and B is a sufficiently large number. For example, if no threshold is defined, i.e. Dd=0, then (3d) defines a total quantity discount withyd⩽xi,s. If Ddis set to a threshold for an incremental volume discount, the constraint becomesyd⩽xi,s-Ddif the discounts are valid (if cd=1).Typically, discounts are defined for single items, but they can also be defined for multiple itemsi∈Id. Constraints (4d) make sure that a discount is only provided (yd>0) if the respective binary variable for this discount, cd, equals one. For each discount or markup we introduce a binary decision variable cd, cm, clor ck, which is determined based on spend or quantity conditions. These binary indicators are defined in constraints (5d,l) and (5m,k) and describe whether a discount or markup is valid or not. A discount or lump sum rebate can only become valid if all preconditions are met(∑n∈Ndjn=|Nd|)whereas a markup has to be active when all preconditions are met. |Nd| and |Nm| describe the number of conditions, which need to be true for the respective binary variable to become true. Constraints (5) also allow specifying sets of rules Ed⊂D and Em⊂M, which cannot be active at the same time as the respective rule. |Ed| and |Em| describe the number of such exclusion rules.Constraint sets (6d,l), (6m,k), (7d,l) and (7m,k) model the individual conditions on spend or quantity that need to be fulfilled for a particular discount or markup rule. For example, constraints (7d,l) specify a minimum quantity for volume and lump sum discounts. If the purchased amount is larger than the required amount, i.e.xi,s⩾Qn, then jncan be set to 1. Similar, constraints (7m,k) are used. They force jnto become true, whenxi,s⩾Qn.Constraints (8)–(12) describe allocation rules which are typically being used in scenario analysis. Constraints (8) define absolute and relative (percentage) limits on the allocation of items to suppliers. For example, one could specify a maximum allocation of 1000units per item or a maximum of 30% of the items. Constraints (9) have the same purpose, but instead of limits on quantity they define limitations on spend. The variables ar in these constraints are used as binary indicators to allow “only-if-winning” rules. Instead of specifying fixed lower bounds, which would cause partially predefined allocations, these lower bounds are only valid, if the supplier is winning any amount of the item(s) in that rule. In constraints (10) the aforementioned indicator variables are defined. Additionally, constraints (10) introduce the variables ar,swhich count the number of winning suppliers and are then used in constraints (11) to limit them. The final constraint (12) models the individual spend constraint. Its right hand-side Γ is a budget constraint or the optimal value calculated during the first optimization of SQS.Table 1defines all decision variables of SQSSA, while all other parameters and sets are defined in Tables 4 and 5 which can be found in Appendix A.2.Bichler et al. (2011) have already shown that SQS is an NP-complete problem. If we assume fixed parameters for variables in the objective function of SQSSA, SQSSA is equivalent to a decision version of SQS and the question is, whether there is a feasible solution given a certain budget constraint. Typically, the variables in the objective function are not treated as parameters, which leads to non-linearities in the model formulation. In constrains (8) and (9) decision variables (arandvrlortrlas well as zrand xi,sresp.) are multiplied. Such non-linear constraints cannot be handled by standard algorithms to solve MIPs. We can formulate the problem such that we approximate the non-linear terms with piecewise linear functions. This introduces additional variables, but renders the MIP formulation linear. To eliminate the product of the two variables we transform the expression into a separable form, which in turn can be approximated using piecewise linear functions (Bisschop 2012, p. 85). A more detailed description of the approach can be found in Appendix A.3.SQS and SQSSA are hard computational problems, and we want to get an understanding of the empirical hardness of realistic problem instances using experiments. This is important for procurement managers to understand before any application. We solved instances of SQS and SQSSA but did not find significant differences in the solution time. The following experiments focus more on the requirements that we learned from procurement managers performing scenario analysis tasks. First, allocation constraints are obviously important for scenario analysis. These have not been taken into account in the experiments by Bichler et al. (2011). Second, suppliers often require more flexibility in expressing their economies of scale and we allowed for up to 10 discount tiers, while the experiments in Bichler et al. (2011) were limited to 5 discount tiers.Due to the iterative way, how scenario analysis with different allocation constraints is usually performed, we limit the time for a single run of the problem to 10min. The limit also allows for comparisons with the experiments in Bichler et al. (2011). We found that even for larger instances in our sample good solutions can be found within 10min, but the progress on the total cost beyond 10min is very slow for our problem sizes. An analysis with 5 and 10 more minutes to solve the problem had only little effect on the objective function values on average and the results overall in our experiments. Often, the exact solution could not be found at all or only after many hours. Simulations with instances of 32 items and suppliers and a time limit of 24h, crashed due to out-of-memory exceptions after 6–10h.In Fig. 2the objective function values of three different instances with 15 items and suppliers are plotted along a time axis in seconds. A vertical gray line marks the 10min time limit. After fast improvements at the beginning, the solver takes time exploring the large branch-and-bound tree without finding a better solution.Sometimes significant improvements could be found after hours, while in other cases the solver just took hours to prove optimality of a solution, which was close to one found after a few minutes. While such plots might suggest a symmetry problem (Margot 2010), symmetry detection showed little effect and the more likely reason is just the huge number of possible solutions one has to explore for proving optimality.The consideration of allocation constraints and the consideration of up to ten discount tiers per item often reduce the problem instances to be solved exactly to small ones with up to five items and five bidders within 10min. Note that such problem instances can still be relevant for many applications where negotiations are conducted with a few key supplier of a few raw material or electronic component only. For such procurement decisions it is often important for suppliers to describe their discount policy with sufficient accuracy, requiring a number of possible intervals.To analyze the impact of allocation constraints we imposed additional constraints putting limits on the number of winners or the overall spend per supplier. In particular we distinguish two treatments, which turned out difficult across a range of problems. In one treatment, we limit the number of winners to 3 (winner limit WL3). In another treatment we limit spend per supplier to maximally 25% of the total spend (M25S). Incremental volume discounts and total quantity discounts are considered. In addition, we also analyze the impact of stepwise fixed costs and compare settings with and without such costs and a purely decreasing unit cost function. Table 2provides an overview of the treatment factors.We will use the same unit cost functions as in Bichler et al. (2011). The generation of bids is based on a multi-product cost function. Such functions are used in Economics to estimate cost structures in the field (Baumol 1987). See Appendix A.1 for details on the cost function and the bid generation process. But instead of a fixed set of 5 intervals, we allow the suppliers to specify up to 10 individual intervals. This is motivated by the fact that it is often difficult in procurement practice to predefine the discount intervals for all bidders and bidders want to have flexibility in their discount policy.Taking all major parameters (cost curves, bidding languages and allocation constraints) we have nine treatment combinations. The simulations with exact methods took 14.5days. In addition, we performed ran experiments with meta-heuristics described below, took another three weeks of computation time on a single CPU. All experiments were conducted on an iMac with a 2.9GHz Intel Core i7 CPU (Quad Core) and 8GB RAM using the 64-bit operating system Mac OS X 10.6. We have used the latest version of Gurobi Optimizer (5.0). Some instances were solved with IBM’s ILOG CPLEX optimizers (version 12.2) yielding comparable results.The problems that could be solved to optimality with a branch-and-cut solver are relatively small. Therefore, we analyzed popular meta-heuristics to solve larger problems in our experiments. In particular, we will report on RINS and Variable Neighborhood Search.

@&#CONCLUSIONS@&#
