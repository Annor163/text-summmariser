@&#MAIN-TITLE@&#
Neuro-fuzzy techniques to optimize an FPGA embedded controller for robot navigation

@&#HIGHLIGHTS@&#
Neuro-fuzzy techniques are used to optimize an embedded controller for robot navigation.Only a small number of simplified ‘if-then’ rules (exploiting the connection in cascade of rule bases) are used.The rules comprise heuristic and fuzzy knowledge together with numerical data obtained from a geometric analysis of the problem.The control algorithm can be executed rapidly or with low power consumption by even systems based on fixed-point processors.This is illustrated with the design of a controller for the safe navigation of an autonomous car-like robot among possible obstacles.

@&#KEYPHRASES@&#
Neuro-fuzzy techniques,Embedded systems,FPGA implementation,Intelligent control,Robot navigation,

@&#ABSTRACT@&#
This paper describes how low-cost embedded controllers for robot navigation can be obtained by using a small number of if-then rules (exploiting the connection in cascade of rule bases) that apply Takagi–Sugeno fuzzy inference method and employ fuzzy sets represented by normalized triangular functions. The rules comprise heuristic and fuzzy knowledge together with numerical data obtained from a geometric analysis of the control problem that considers the kinematic and dynamic constraints of the robot. Numerical data allow tuning the fuzzy symbols used in the rules to optimize the controller performance. From the implementation point of view, very few computational and memory resources are required: standard logical, addition, and multiplication operations and a few data that can be represented by integer values. This is illustrated with the design of a controller for the safe navigation of an autonomous car-like robot among possible obstacles toward a goal configuration. Implementation results of an FPGA embedded system based on a general-purpose soft processor confirm that percentage reduction in clock cycles is drastic thanks to applying the proposed neuro-fuzzy techniques. Simulation and experimental results obtained with the robot confirm the efficiency of the controller designed. Design methodology has been supported by the CAD tools of the environment Xfuzzy 3 and by the Embedded System Tools from Xilinx.

@&#INTRODUCTION@&#
Fuzzy rule-based systems have been successfully used in many control applications thanks to their capability to deal with the heuristic knowledge of an expert that is expressed linguistically [1–4]. Linguistic if-then rules including imprecise and maybe ambiguous terms are translated rather easily into if-then rules including fuzzy sets. The capability of fuzzy systems to manage linguistic information facilitates not only the development of controllers but also their debugging and maintenance. Due to the great use of fuzzy systems in control engineering, different types of implementations for these systems have been proposed in the literature [5]. These approaches range from software implementations to hardware realizations by ASICs (Application Specific Integrated Circuits) or FPGAs (Field Programmable Gate Arrays).The development of complex systems for industrial control applications demands high speed, low power and area consumption, and low cost. The solution to satisfy these requirements is the implementation as embedded systems [6]. Implementation on ASICs satisfies these requirements, but due to the high initial engineering cost, ASICs are adequate when they are manufactured in high quantity. A good alternative is the implementation on FPGAs. An FPGA can be fully programmable to generate a specific hardware that matches the requirements of the user. The great advantages of these devices compared to ASICs are its flexibility, a shorter time-to-market and a lower cost if the number of fabricated devices is small. Modern FPGA families include a high number of specific resources and provide powerful and friendly CAD tools that allow the development of complex embedded systems [7–19]. FPGA manufacturers also allow the implementation of efficient 32-bit RISC processors, such as the MicroBlaze system from Xilinx and the Nios processor from Altera.The continuous evolution of programmable devices has increased the use of FPGAs as platforms for the development of fuzzy systems [12–19]. Some of these FPGA implementations of fuzzy controllers are used to control autonomous mobile robots [16–19]. Current research in robotics concerns with multi-robot heterogeneous scenarios to execute missions that require safe and reliable cooperation. This means that autonomous robots not only have to navigate safely in real time (low processing time), but also communicate with other robots and participate into collaborative tasks during maybe long time (low power consumption), this is carried out on hardware platforms of maybe limited resources (let us think, for example, in micro-robots or unmanned aerial vehicles with low payload) [20].This paper describes the use of neuro-fuzzy techniques to optimize the design of an embedded controller for the safe navigation of a car-like autonomous robot among possible obstacles toward a goal destination. The main objective of the proposed approach is to achieve efficient embedded implementations in terms of memory resources and operation speed. In order to reduce implementation costs, the controller contains several modules that, in turn, are composed of simple rule bases connected in cascade; the rules employ normalized triangular membership functions to represent the antecedents; and the inference mechanism employed is Takagi–Sugeno [21].Many authors exploit the numerical data obtained from trajectories provided by an expert to apply neural-like learning to fuzzy controllers [3,4]. However, these trajectories do not usually correspond to the shortest paths. In the proposal herein, numerical data employed correspond to paths of near minimum length obtained from a geometric analysis of the problem (which considers the nonholonomic constraints of the robot). The use of numerical data to design controllers that meet nonholonomic constraints has been also exploited in other works, such as [22–25]. In particular, numerical data associated to the shortest paths affordable for a car-like robot have been employed in [25] to solve a parking problem without obstacles. A similar approach is applied herein to a more complex problem. The data help in generating navigation paths of near minimum lengths when no obstacles are detected and, in presence of obstacles, minimum deviation from these paths. A novelty and advantage of the approach described herein is that automatic learning maintains the linguistic meaning of the fuzzy rules and optimizes the implementation into embedded systems. Interpretable if-then rules are very interesting to facilitate human–robot communication [26].The paper is organized as follows. Section2 describes the navigation problem of a car-like autonomous robot. Its subsections summarize the kinematic and dynamic considerations to obtain a controller that generates paths of near minimum length. Section3 describes how to use this controller as a reference to generate the numerical learning data to adjust the symbols of a fuzzy controller with the objective of obtaining a much more efficient implementation. The design methodology of the proposed neuro-fuzzy solution is aided by the description, identification, verification, and learning CAD tools of Xfuzzy 3 (an environment to design neuro-fuzzy controllers available at [27]). Section4 evaluates the behavior of the designed neuro-fuzzy controller with simulation and experimental results obtained with a car-like robot designed and built at the Escuela Superior de Ingenieros, University of Seville, Spain. Implementation results of both the reference and the neuro-fuzzy controllers into an embedded system based on MicroBlaze on a Virtex FPGA from Xilinx are compared and evaluated in Section4. The superiority of hierarchical Takagi–Sugeno fuzzy inference systems to other approximator systems, such as radial basis function (RBF) neural networks, is also illustrated in Section4. Finally, Section5 gives the conclusions.The configuration of a car-like robot can be given by the position of the back wheels axle midpoint with regards to a global coordinate system, (x, y); its orientation, ϕ; the curvature defined by the front wheels, γ; and its speed,v. The navigation problem consists of generating a collision-free trajectory from an initial configuration(x,y,ϕ,v,γ)to a goal one, which is (0, 0, 180°, 0, 0) in the global coordinate system that have been selected herein (Fig. 1). In the first stage of the controller design, a mathematical description of the collision-free navigation problem is performed to obtain a controller that generates paths of near minimum length. A direct implementation of this controller on an embedded system based on MicroBlaze is developed for its later comparison with the neuro-fuzzy solution.A basic task to be performed by an autonomous robot is to navigate safely among possible obstacles toward a goal destination. Navigation problems are usually solved in two steps. Firstly, a reference trajectory is provided by a path planner, and, secondly, a path-tracking controller tries to keep the robot as close as possible to the reference trajectory. A large number of methods for solving the path planning problem have been reported in the literature (such as roadmap, cell decomposition and potential field methods) [28]. Global path planners offer the advantage of generating reference paths that optimize particular criterion (e.g. minimum time, minimum energy, and shortest length), since they employ global information about the environment. Their main disadvantage is that they usually apply computationally costly algorithms and, hence, they cannot accommodate rapid changes in the environment. In the other side, reactive planners execute simple behaviors in direct response to sensory information. Since they deal with local instead of global information, reactive methods are widely used for implementing real-time navigation through partially unknown and dynamic environments.Another issue is that global path planners usually provide reference paths made up of directly connected straight lines that could not be easily followed by car-like robots, which always should connect straight lines by arcs of circle.The controller designed herein addresses a twofold objective: it is reactive to cope with dynamically changing environment in real time and acts as a path-tracking controller that keeps the robot as close as possible to a car-like feasible reference path.In the typical decomposition of a mobile robot control system into functional modules (sensors, perception, modeling, planning, task execution, motor control and actuators) [29], the module designed herein would be in charge of reactive obstacle avoidance and path-tracking tasks. It can be combined with a global path planner in charge of modeling and planning in order to optimize global criterion (taking into account the overall obstacles spatial configuration and characteristics of the whole space where the robot can move). A review of such hybrid architectures that combine global (deliberative) with local (reactive) modules can be seen in [30]. For example, a global fuzzy behavior control is proposed in [17] to integrate several local modules. However, this is out of the scope of this paper, which will focus on the design of the reactive obstacle avoidance and path-tracking module.No model about the environment is used nor constructed by the designed reactive controller but only the information provided by the robot sensors. In particular, the sensor considered is a 2-D laser placed at the robot front part. The laser performs a scan of up to 180 degrees of the space in the front of the robot and identifies the points of possible obstacles by their distance, h, and sweeping angle, φ (Fig. 1). Of course, the robot could drive backward in a safe way by making use of sensors placed at the robot back part that scan the space in the back of the robot. However, for the sake of clarity, the robot is considered herein to drive always forward or to stop.The coarse structure of the reactive controller is obtained from heuristic knowledge expressed linguistically, as follows:1.If there is an obstacle very close to the robot, the robot should stop to avoid collision.22If the robot would be provided with sensors in its rear, this would not be the final action and the robot would drive backward, as commented above.If there is an obstacle close to the robot, a maneuver to avoid it should be carried out, as follows33In case this local module is combined with a global controller, the turning sign of the maneuver defined by rules 2.a and 2.b could be determined by the global controller.:(a)If the obstacle is on the right (left) then turn to the left (right).If the obstacle is in front of the robot then:•Turn to the same side as in the previous control cycle (provided the obstacle was already detected).If this is the first time the obstacle is detected, apply the turning sign as no obstacle is detected.If the obstacles are far from the robot, there is no need to avoid them (by the moment) and the robot should navigate toward the goal configuration by the shortest path.Several symbolic concepts appear in these rules (depicted in italic fonts) that need specification. They might be defined by membership functions based on heuristics as well as trial and error approach. Doing that, the paths obtained will not be as good as they could be. Our proposal is to consider the dynamic and kinematic constraints of the robot so as to optimally define the symbolic concepts. In particular, the car-like nonholonomic constraints make that the movement direction must always be tangent to the trajectory and the turning radius is mechanically limited to a minimum value, which is equivalent to say that the robot curvature is upper bounded. In the absence of obstacles, the shortest paths for a car-like robot consist of a finite sequence of two elementary components: arcs of circle (with minimum turning radius) and straight line segments [31,32]. In an environment cluttered by obstacles, it is proven in [33] that shortest paths consist only of arcs of a circle of minimum turning radius, line segments, and pieces of boundaries. Hence, an obstacle will be very close if the radius of the arc of circle to avoid it should be smaller than the minimum. An obstacle will be close and should be avoided if it will be inside the area that will be swept by the robot when it travels along its path. In other case, the obstacle is far and the controller has to provide the shortest path made of a finite sequence of arcs of circle with minimum turning radius and straight line segments (as illustrated in Fig. 1). This is analyzed more in detail in the following.Let us consider a coordinate system (xr, yr) attached to the robot, whose origin is placed at the back wheels axle midpoint (Fig. 2). The coordinates on an obstacle referred to that system are the following:(1)xro=d+h·sinφyro=−h·cosφwhere d is the distance of the laser to the back wheel axle (1.65m in the robot considered in the experiments).Taking into account that the robot considered in our analysis has a width of 1m and the maximum speed considered is 1m/s, 2m at both sides of the robot should be free of obstacles for safety purposes. An obstacle will be very close and, hence, unavoidable, if it enters the forbidden area (shadowed area in Fig. 2). Let us consider an obstacle placed on the right of the robot (φ∈[0°, 90°]), as shown in Fig. 2. It will be very close if the robot cannot avoid it by turning to the left with an arc of circle with minimum turning radius (R=1/|γmax|), leaving 2m of free space:(2)xro2+yro−1|γmax|2<1|γmax|+22ifφ∈[0°,90°]Similarly, if the obstacle is placed on the left of the robot (φ∈[90°, 180°]), it will be very close if the robot cannot avoid it by turning to the right:(3)xro2+yro+1|γmax|2<1|γmax|+22ifφ∈[90°,180°]Grouping Eqs. (2) and (3), and substituting xroand yroby Eq. (1), the area of very close or unavoidable obstacles is defined by:(4)(d+h·|sinφ|)2+h·|cosφ|+1|γmax|2<1|γmax|+22Eq. (4) has been selected to describe very close obstacles, since it uses the variables h and φ provided directly by the laser. Hence, no processing of laser data is required.An obstacle will be close if it will be inside the safety area that will be swept by the robot when it travels along its path. Taking into account the current robot curvature, γ, a first condition for an obstacle to be close is to be less than 2m on the right or on the left along the arc of circle to be described by the robot (Fig. 3a), as follows:(5)1|γ|−22<xro2+yro+1|γ|2<1|γ|+22The safety area should also contain 2m ahead in the driving direction. Hence, let us consider a coordinate system (xR, yR) displaced 2m in the driving direction and rotated an angle of 2γ with respect to the coordinate system (xr, yr), as illustrated in Fig. 3b. The coordinates of an obstacle referred to this system are the following:(6)xRo=xro−sin2γγcos2γ−yro+1−cos2γγsin2γyRo=xro−sin2γγsin2γ+yro+1−cos2γγcos2γA second condition for an obstacle to be close and, hence, to be avoided is that it becomes a very close obstacle in the future (dark shadowed area in Fig. 3a). This condition is easier to be expressed in the coordinate system (xR, yR). Similarly to Eqs. (2) and (3), it will be very close if their position with regards to the displaced and rotated coordinate system verifies that:(7)xRo2+yRo+1|γmax|2<1|γmax|+22Finally, the third condition for a close obstacle is that, currently, it is not very close and, hence, it does not verify Eq. (4).The minimum magnitude of the curvature to avoid an obstacle identified as close is determined by the closest point of that obstacle (whose coordinates will be named hMand φMherein). Taking into account that a reference curvature is not adopted instantaneously by the robot but has a delay, a 4-m safety corridor has been considered for selecting the minimum value of the curvature. With such selection, the dynamic features of the robot considered in the experiments allow the 2-m width corridor free of obstacles. Hence, the minimum magnitude of the curvature (similarly to Eq. (4)) is given by:(8)(d+hM·|sinφM|)2+hM·|cosφM|+1|γ|2=1|γ|+42From the formula above, the value of |γ| can be obtained as:(9)|γ|=8−2hM·|cosφM|d2+hM2+2hM·d·|sinφM|−16The sign of the curvature when an obstacle is avoided is given by the second if-then rule explained in Section2.1 (the criterion adopted is that |γ|=γ, in the case of turning to the right, and |γ|=−γ, in the case of turning to the left).If there are no obstacles, the robot should navigate toward the goal (0, 0, 180°, 0, 0) by the shortest path. The shortest paths for a car-like vehicle consist of a finite sequence of two elementary components: arcs of circle (with minimum turning radius) and straight line segments, as was proved by Dubins [31]. Analyzing the shortest paths geometrically, it can be found that there is an angle, α, which defines the orientation of the straight segment which contains the (x, y) point of the current robot configuration and is tangent to the arc of circle that defines the end of the path (Fig. 4a). Depending on the difference between this angle and the current robot orientation, the robot will turn to right or left or will not turn. The value of the angle α depends on x and y as follows (as can be seen in Fig. 4b):(10)tanα=x−x′y−y′=x−(R−R·cosα)y−R·sinαwith(|x|−R)2+y2≥R2where R is the minimum turning radius.If the formula above is elaborated, the value of α can be obtained as follows:(11)α=sign(x)·arccosR(R−|x|)+yx2+y2−2R|x|x2+y2−2R|x|+R2The direct implementation of Eqs. (1) and (11) requires trigonometric functions (sin, cos and arccos), square root, and division. As discussed in Section4, such equations are computationally costly for FPGA embedded controllers (when carried out by MicroBlaze processor using software routines). One solution is to accelerate by hardware the computation of such functions. Another approach to alleviate this cost is to simplify the equations to compute the safety areas. The latter is the approach proposed in [34], which is a little conservative solution that constructs a polygonal over-approximation of such areas and checks the emptiness of the constructed convex polygon with any obstacle by solving a linear programming problem. The novel approach proposed herein is to employ neuro-fuzzy techniques to simplify the computation of all the equations not only of the safety areas, and, in the case of safety areas, not providing a coarse over-approximation but a finer approximation. This is analyzed more in detail in the following.The shadowed area in Fig. 5b illustrates those obstacle positions (h, φ) that satisfy the nonlinear constraint (4). The proposal herein is to describe those positions with fuzzy rules, that is, to design a fuzzy classifier with two inputs, h and φ, and one output that specifies if the obstacle is very close or not adjusted to the training data provided by (4). The simplest structure that has been found for this fuzzy classifier is the hierarchical structure shown in Fig. 5a. The fuzzy rule base, named Interpolation in the figure, is a zero-order Takagi–Sugeno system that interpolates, for each angle φ, the minimum value of h, hmin, that an obstacle should have to be considered as not very close. This rule base has been trained by the numerical data (φ, hmin) that verify (4) when condition smaller than is substituted by equal to. Levenberg–Marquardt algorithm (a second-order training algorithm that does not compute the Hessian matrix [35]) has been applied with the supervised learning tool of the Xfuzzy environment [36]. The rule base obtained contains 5 rules whose antecedents are: φ is quite right, right, in front of, left, and quite left; and whose consequents are, respectively: hminis 1.7m, 1.5m, 2.1m, 1.5m, and 1.7m, as shown in Fig. 5c. The upper part of Fig. 5c illustrates how the designed fuzzy classifier approximates the nonlinear area of very close obstacles by a polygonal area. The piecewise linear frontier in the upper part of the polygonal area is the output, hmin, provided by Interpolation rule base.Let us call hmaxthe maximum value of h that an obstacle can have to be considered as close. Depending on the angular position of the obstacle, φ, and the current curvature of the robot, γ, the value of hmaxcan be obtained from Eqs. (5) and (7) when condition smaller than is substituted by equal to. Fig. 6b illustrates the nonlinear relation between hmax, φ and γ. The proposal herein is to describe such relation with fuzzy rules and design a fuzzy classifier with three inputs (h, φ and γ) and one output, which specifies if the obstacle is close or not adjusted to the nonlinear constraints (5)–(7).The structure selected for this fuzzy classifier is the hierarchical scheme shown in Fig. 6a. This is very simple since it combines zero-order Takagi–Sugeno rule bases with only one input. Looking for a good trade-off between approximation and simplicity, 2 rules have been extracted for the rule base Rotation and 5 ones for the rule base Distance. These rule bases have been trained with the numerical data (φ, γ, hmax) illustrated in Fig. 6b, using the CAD tools of Xfuzzy. The capability of the learning tool of Xfuzzy to adjust hierarchical systems has been exploited in this case [36]. The rule base named Rotation provides an output which is a linear function of the input φ. The rule base named Distance provides a piecewise linear interpolation of hmax, depending on the difference between the current curvature of the robot and the output of the rule base Rotation, γ−Rotation(φ). Such difference can be understood as the angular position referred to the robot that the obstacle will have in the future. This is why the antecedents in the 5 rules of Distance rule base have been named as quite right, right, in front of, left, and quite left. Their corresponding consequents are: hmaxis 1.6m, 2m, 4m, 2m, and 1.6m, as shown in Fig. 7.Fig. 6c illustrates how the designed fuzzy classifier approximates the nonlinear relation between hmax, φ and γ with piecewise linear relations.The minimum magnitude of the curvature to avoid an obstacle is a nonlinear function, f, of the closest point of the obstacle (hMand φM), as stated in (9). Exploiting the symmetry of the problem, it can be considered that γ=f(φM, hM), when turning to right and γ=f(180−φM, hM), when turning to left. Fig. 8a shows the γ values (when turning to right) versus φMand hM. The proposal herein is to approximate such nonlinear relation with fuzzy rules, that is, to design a fuzzy approximator with two inputs, hMand φM, and one output that specifies the magnitude of the curvature. In this case, a non-hierarchical system has been selected because its complexity is somewhat lower (5 instead of the 9 rules extracted in the hierarchical system) achieving a better approximation. The procedure to obtain the non-hierarchical system follows the techniques described in [37]. Firstly, 5 membership functions have been selected as a good initial number to cover uniformly the universes of discourse of the hMand φMvariables, as shown in Fig. 8b. By using the numerical data (hM, φM, γ) shown in Fig. 8a and applying Wang-Mendel identification algorithm with the identification tool of Xfuzzy [37], 25 zero-order Takagi–Sugeno rules (illustrated as a matrix in Fig. 8b) have been obtained. Again the numerical data (hM, φM, γ) have been employed to apply supervised learning to adjust the membership functions in the antecedents and the singleton values in the consequents of these 25 fuzzy rules so as to reduce the approximation error. The result of such learning is illustrated in Fig. 8c. By using the simplification tool of Xfuzzy, two membership functions covering φMcan be merged, as shown in Fig. 8c, so that the 25 rules are reduced to 20. Finally, by applying the Fuzzy Tabular Simplification method available in the simplification tool of Xfuzzy [37], the 20 rules can be reduced to 5 rules, 4 of them describing when turning right at maximum and the other concluding no turning for the rest of situations. This is illustrated in Fig. 9a and b. The obtained zero-order Takagi–Sugeno system, which decides how much turning to right (once turning to right has been decided), forces the robot to turn more as more dangerous the obstacle is for the way the robot is going to take immediately. The closer the obstacle is, the more the robot will turn to right. The fuzzy rules express the following conditions to turn right at maximum (imagine the robot is going ahead or to its right):1.If obstacle is very near.If obstacle is near and it is not quite on the left.If obstacle is at medium distance and it is in front of or on the right.If obstacle is far and it is on the right.In other cases, the robot should keep straight ahead.Since these rules employ fuzzy concepts, the γ values provided by this system do not switch abruptly but they vary smoothly between maximum turning to right and zero, as shown in Fig. 9c.If no obstacles are detected, the robot will turn to right or left or will not turn depending on the difference between the current robot orientation and the angle α (defined in (11) as a nonlinear function of the robot position, x and y). The approach herein is to use a fuzzy system that approximates the value of the robot curvature, as described in [25]. A hierarchical structure with two rule bases connected in cascade, as shown in Fig. 10a, has been selected. The first rule base provides approximately the value of the angle α, depending on the input variables x and y. This module has been adjusted by using numerical data (x, y, α), obtained from (11) and from the following equation (which achieves continuity for the rest of positions):(12)α=sign(x)·arccos1−|x|Rif(|x|−R)2+y2≤R2Exploiting the symmetry of the problem, α(x, y)=−α(−x, y), the neuro-fuzzy system has been trained for positive values of x. The best system found in terms of approximation error and simplicity is a first-order Takagi–Sugeno system with 9 rules. These rules are shown in Table 1, where the fuzzy sets (zero, near, etc.) in the antecedents are represented by triangular membership functions similar to those in Figs. 5c and 7. Fig. 10b shows the values of α versus x and y according to (11) and (12), and Fig. 10c shows the approximation provided by the rule base Interpolation.The best option found for the second rule base Smoothing is a zero-order Takagi–Sugeno system with 2 rules, exploiting symmetry, γ(ϕ−α)=−γ(α−ϕ). These two rules are the following:1.If (ϕ−α) is small-positive then γ is 0.4m−1.If (ϕ−α) is large-positive then γ is 0.07m−1.

@&#CONCLUSIONS@&#
Neuro-fuzzy techniques have been proven very effective to optimize the design of an embedded controller for the free collision navigation of an autonomous car-like robot. The control algorithm can be executed rapidly or with low power consumption by even systems based on fixed-point processors because the rule bases employed contain a few number of rules, the number of antecedents is low, and Takagi–Sugeno inference is applied (with antecedents represented by normalized triangular functions). Despite its simplicity, the controller action is smooth and provides paths of near minimum length, as has been proven by simulation and experimental results. The methodology to design the neuro-fuzzy controller has been automated thanks to the CAD tools of the environment Xfuzzy 3, while the FPGA embedded system has been developed with the CAD tools from Xilinx.