@&#MAIN-TITLE@&#
An incremental-PID-controlled particle swarm optimization algorithm for EEG-data-based estimation of operator functional state

@&#HIGHLIGHTS@&#
Accurate estimation of operator functional state (OFS) is crucial to improve the safety of human–machine system.A simulated process control task was used to elicit different complexity levels of tasks which can induce different OFS.OFS was assessed by using EEG signals and fuzzy modeling paradigm.A newly developed IPID-PSO algorithm was proposed and verified.The IPID-PSO algorithm was used to identify the fuzzy model of OFS.

@&#KEYPHRASES@&#
Operator functional state,EEG signals,Particle swarm optimization,Incremental PID control,Benchmark mathematical function,

@&#ABSTRACT@&#
Operator functional state (OFS) is referred to as the ability of an operator to complete assigned tasks which may fluctuate over time. In the adaptive human–machine systems, it is required that the OFSs should be estimated in real-time in order to prevent the potential performance breakdown. To this end, an accurate OFS estimation model must be established. OFS can be reflected by operator's various physiological signals including EEG measures. In this paper, five subjects’ EEG signals were collected while working jointly with the AutoCAMS, a simulated software environment of human–machine cooperative control system. The fuzzy models are employed to estimate the OFS-related operator performance from three EEG-based input features. To derive the optimal fuzzy models, a new incremental-PID-controlled particle swarm optimization (IPID-PSO) algorithm is developed. The IPID-PSO algorithm is a combination of the standard PSO algorithm and the incremental PID control algorithm. The usefulness of the IPID-PSO algorithm is firstly validated by its application to eight benchmark function optimization problems. The superiority of IPID-PSO to the standard PSO algorithm is shown to be more significant especially for the optimization of multimodal functions with multiple local optima. Then, it is used to optimize the OFS model. The model parameters optimization accuracy and convergence rate of the IPID-PSO and standard PSO algorithm were compared when used for model-based OFS estimation. The IPID-PSO algorithm developed in this work has potential to be widely applied to other real-world optimization and model identification problems.

@&#INTRODUCTION@&#
Operator functional state (OFS) [1] is referred to as the ability of an operator to complete assigned tasks which may fluctuate over time. Since humans are better than machines at making decisions and supervising, operators are still largely distributed in many safety–critical human–machine (HM) systems, such as air traffic control [2], nuclear power plant [3], and manned space flight [4]. In such safety–critical HM systems, good OFSs are required to keep systems running safely and smoothly [5]. However, because human operators are not machines, they cannot always be in good state (affected by fatigue, anxiety, drowsiness and so on) [6,7]. In some adaptive HM systems, once a risky OFS is occurring, certain adjustments (such as lower down the operator's task load) would be taken immediately to prevent the potential system performance breakdown. In this manner, an accurate model which can well evaluate OFS becomes a necessity [8]. Methods such as the artificial neural network (ANN) [9], fuzzy system [10], support vector machine (SVM) [11] and so on have been employed to construct OFS models. Among them, the fuzzy system which has human-like transparent inference mechanism with tolerance of uncertainties, is highly appreciated in the OFS estimation [12].OFS has been demonstrated can be reflected by the operators’ physiological features [13,14], such as EEG [15] electrode power, ECG [16,17] features including heart rate, heart rate variability, EOG [18] including eye-blink interval, and others like blood pressure, breath activities and so on. In 2003, Wilson and Russell [8] used ANN to classify 7 subjects’ OFS in 3 tasks. The classifier adopted EEG features, ECG features and EOG features together as the model inputs and obtained 85%, 82% and 86% classification accuracy for the three tasks. GA-based fuzzy system was used to model the 11 operators’ OFS by Ting [19] in 2009. In Ting's research, the fuzzy OFS model's output can well fit the real sampled OFS data by using EEG and ECG features. In 2012, Wang et al. [20] used 3 EEG features and 1 ECG feature as the inputs of the OFS fuzzy model and got very good performance. The fuzzy system in their paper was the adaptive-network-based fuzzy inference system (ANFIS) which was optimized by differential evolutionary (DE) algorithm. In Yin's [1] paper in 2013, a recursive feature elimination technique based operator EEG features analysis method was executed for OFS feature extraction. The obtained EEG features were used as the inputs of an SVM classifier for OFS classification. Lin and Lin [21] employed a so-called self-organizing neural fuzzy inference network (SONFIN) to model the OFS which was quantified by the reaction time of drivers and very small root mean squared error (RMSE, 0.076) was derived. Recently, more and more concerns are focused on the using of fuzzy systems which can be derived by swarm intelligent algorithms such as the particle swarm optimization (PSO) algorithm.PSO algorithm has been well exploited since it was proposed in 1990s as its simplicity for realization and powerfulness for application [22]. Since then, a lot of PSO variants have been proposed during the past two decades [23–25]. Among them, the most promising research topics are trajectory analysis and parameter selection [26,27]. To get better solutions, on the one hand, the swarm is preferred as diverse as possible in order to finely cover the potential solution space as well as to prevent stagnations; on the other hand, the algorithm convergence speed is also highly concerned in order to find a good enough solution with an acceptable time consumption [28]. However, the two are usually controversial to each other. This is usually demonstrated by the parameter settings.In [29], Shi and Eberhart stated that a bigger inertial weight (represented by w) supplies a better global search while a smaller one leads a better local search. Thus they recommended that the inertial weight should be linearly decreased while the iteration is increased. Such suggestions have been widely accepted and frequently adopted. Nevertheless, in [30], with the opposite idea, the author believed the inertial weight should be linearly increased as to achieve a quick convergence. Differently, Kennedy and co-workers [31] introduced a constriction factor with which the convergence of PSO can be guaranteed. In [32], the cognitive and social coefficients, represented by c1 and c2, were both set to be 1.49445 and w was arranged in [0.4, 0.9]. Further, Ratnaweera [33] proposed that the two learning coefficients should also be linearly changed to balance the global and local search. More generally, a few researchers delivered advices both the cognitive and social coefficients can be set to 1.7 for simple and the inertial weight can be set to 0.715 [34]. Meanwhile, still in [33], the author even set the inertial weight to zero. Also, there are many researchers focusing their attentions on the theory analysis of the PSO inner mechanism by investigating the parameters [35,36].In most cases, these settings can perform quite well. Besides the tuning of PSO parameters, different learning strategies were also raised up and excellent performance had been gained [37–39].Recently, some new and interesting progresses have been delivered such as the improvements of PSO both on modification and application [40]. In [41], a very useful software tool developed by using Matlab called particle swarm optimization Universal Solver (PSOUS) was tested in many numerical and engineering test bench functions. As the first kind of tool in the optimization domain, the PSOUS provided a powerful mean to implement PSO. Maleh [42] applied the PSO algorithm in the distributed generation optimal placement with multi-objectives. High accuracy and fast calculation speed were both found characterized with the proposed algorithm. In [43], the authors proposed a hybridization of stochastic ranking and PSO (SRPSO). The SRPSO outperformed other 6 algorithms on all the 20 problems according to which a great superiority was demonstrated.Different from many existing PSO variants, this paper focuses on revisions of the search strategy integrated in PSO algorithm. After several transformations and approximations, the standard PSO velocity updating mechanism (equations) can be treated as an incremental PID controller. Thus a new search strategy is developed. By integrating the incremental PID controller search strategy into PSO algorithm, a new PSO variant called incremental-PID-controlled PSO or IPID-PSO is proposed. By doing so, the trajectory analysis of a PSO particle can be shifted to the analysis of a PID controller whose property is typically characterized by its step responses. Although in [44,45], the authors also believed the PSO algorithm was like a PID controller. However, they did not give the trajectory of the particle in their algorithm. Meanwhile, the authors did not give many modifications on the algorithm. In our research, the step response of the IPID-PSO is a regular oscillation decay curve which is controllable and stable according to the simulation of Matlab Simulink. In addition, to improve the performance degradation caused by the population premature phenomenon, a mutation operator is adopted in the proposed IPID-PSO. The mutation takes place both on each particle and their best memories ‘Pbest’. To validate the utility of IPID-PSO, firstly, 8 benchmark functions minimization problems are used to evaluate its performance. Then, it is used to identify the fuzzy rule base used for OFS estimation.The remaining of this paper is organized as follows. In Section 2, the OFS data collection experiments including the data pre-processing are described. In Section 3, the similarity of PSO and incremental PID controller is showed and details of the proposed IPID-PSO algorithm are explained and illustrated; then, the IPID-PSO algorithm is applied in 8 benchmark functions’ minimization to validate its usefulness. In Section 4, the validated IPID-PSO is employed to identify the rule base of the OFS estimation model with 3 EEG measures as input features. Section 5 includes the conclusions in which the whole paper is concluded and some future works are also delivered.The OFS data (including the operator EEG data and performance data) are collected when 5 subjects are carrying out the experiments [10]. The experiments are running in computers with the AutoCAMS simulation software which is developed in Technical University of Berlin, Germany. During the experiments, subjects are required to keep the simulated air atmosphere (CO2, O2, pressure and temperature) in normal range by completing several tasks together with the automation system. All the subjects are male graduate students in East China University of Science and Technology, Shanghai. Fig. 1shows one subject (the left person) and one experimenter (the right person) are carrying out the data collection experiment. Table 1shows the general information of all 5 subjects.Each subject has to take 2 experiments and each experiment contains 6 conditions. In different conditions, the operators are required to complete different numbers of task. In our experiments, the numbers of task required in 6 conditions are 1, 3, 4, 4, 3 and 1 separately. Each experiment lasts for 90min (15min for each condition). During the experiments, the operator's EEG data are collected with 500Hz sampling rate. There are 11 electrodes (F3, F4, Fz, C3, C4, Cz, P3, P4, Pz, O1 and O2) in the 10–20 international standard system. The raw EEG data are firstly processed by the independent component analysis (ICA) technique for eye-blink artifacts elimination. The ICA algorithm used in this paper is the FastICA [46] method. Then the data are filtered by a band-pass filter from 0.5Hz to 40Hz (two electrodes’ power spectrums are illustrated in Fig. 2). According to the existing researches, the θ band power of Fz electrode and the α band power of Pz electrode are selected as the two main input features. Meanwhile, the ratio of the two main inputs is treated as the third input feature called TLI1 (task load index 1) which has been used and mentioned in [8,10,19,20,47] as Eq. (1).(1)TLI1=PFzθPPzαThe OFS term is quantified by the time in range (TIR) index. In this paper, TIR is treated as the output of the OFS model. It is calculated as Eq. (2):(2)TIR=T′T×100%where T′ is the number of tasks which are controlled in the normal range and T is the total number of tasks. In this experiment, T equals to 4. In this paper, the input and output features are averaged every 1min. Fig. 3shows the 2 experiments’ I/O data of subject N. In Fig. 3, the 3 inputs are normalized into the interval [0, 1] and the output (TIR) is kept the same.The soul idea of the standard PSO algorithm comes from the swarming phenomena such as birds flocking and fish schooling. During the optimization process, a particle tracks its own best experience (Pbest) and the whole population's best memory (Gbest), updates its velocity, adjusts its position and finally reaches a position which is regarded as the best solution for the question. The velocity updating and position changing process are described as Eq. (3).(3)Vi,dt+1=w⋅Vi,dt+c1⋅r1⋅(Pbesti,dt−Xi,dt)+c2⋅r2⋅(Gbestdt−Xi,dt)Xi,dt+1=Xi,dt+Vi,dt+1In Eq. (3), w is called the ‘inertial weight’ whose product with the last time instant velocity is used as a momentum factor. The momentum factor is believed can balance the global search and local search. The two learning coefficients, c1 and c2, are called ‘cognitive coefficient’ and ‘social coefficient’. The two coefficients decide the search direction of a particle. In most cases, r1, r2 are two random numbers which are evenly distributed in [0, 1].Vi,dtrepresents the dth dimension velocity of the ith particle in the swam at time instant t.Xi,dtrepresents the dth dimension position of the ith particle in the swarm at time instant t.Pbesti,dtis the ith particle's best memory's dth dimension value at time instant t.Gbestdtis the whole population's best memory's dth dimension value at time instant t.In Eq. (3), let m1=c1r1 and m2=c2r2, then Eq. (3) is transferred to Eq. (4):(4)Vi,dt+1=w⋅Vi,dt+(m1+m2)⋅m1m1+m2Pbesti,dt+m2m1+m2Gbestdt−Xi,dtXi,dt+1=Xi,dt+Vi,dt+1Letei,dt=m1m1+m2Pbesti,dt+m2m1+m2Gbestdt−Xi,dt, then Eq. (5) is derived:(5)Vi,dt+1=w3⋅Vi,dt−2+w2(m1+m2)ei,dt−2+w(m1+m2)ei,dt−1+(m1+m2)ei,dtThe equation of a discrete PID controller [48] (single input and single output system) output is Eq. (6).(6)ut+1=KPet+KI∑k=1tek+KD(et−et−1)(7)Δut+1=ut+1−ut=KDet−2+(−KP−2KD)et−1+(KP+KI+KD)etIn Eqs. (6) and (7), etis the error between the object value and the control variable at time constant t. Eq. (7) is the output of the so-called incremental PID controller which is usually cascaded in front of an integrator component. Actually, Eqs. (6) and (7) are the same controller.Ifw3Vi,dt−2is small enough to be neglected, then Eqs. (5) and (7) will be the very same formula. Supposew3Vi,dt−2can be neglected and let Eq. (5) equals to Eq. (7), then Eq. (8) is derived:(8)KD=w2(m1+m2)KI=(1+w+w2)(m1+m2)KP=−(w+2w2)(m1+m2)The PSO algorithm and the incremental PID controller are bridged up by Eq. (8). To analyze the PSO particle trajectory property, it can be approximated by analyzing the PID controller. When mentioning to a PID controller, the most important case is its stability. In a closed-loop formed by the PID controller and a unit negative feedback, its transfer function is Eq. (9) where C(s) is the system output and R(s) is the input.(9)C(s)R(s)=KDs2+KPs+KIKDs2+(KP+1)s+KIAccording to the Routh–Hurwitz criterion [49], to make Eq. (9) stable, the three coefficients (KP, KIand KD) should satisfy (10):(10)KD>0,KP>−1,KI>0Use Eqs. (8) and (10) with the purpose of making sure the PID controller can be stable at any situation, and then Eq. (11) is derived.(11)−14−1214+2m1+m2<w<−14+1214+2m1+m2w≠0⇒−12<w<0Notice the transformations executed from Eq. (6) to Eq. (11) are under the supposing thatw3Vi,dt−2→0. To make this assumption standing,w3should be small enough. As a result, w is set to be −0.1 thusw3equals to −0.001. In this research, the two learning coefficients are combined to a new parameter p and let p=m1+m2=1.4. Then the new particle velocity updating and position changing equations (Eq. (3)) are transferred to Eq. (12).(12)Vi,dt+1=pw2ei,dt−2+pwei,dt−1+pei,dtXi,dt+1=Xi,dt+Vi,dt+1The Matlab Simulink module is used to directly show the trajectory of the PSO particle. Take a one-dimensional-particle as an example. The standard (Eq. (3)) and new velocity updating strategy (Eq. (12)) proposed in Section 3.1 can be illustrated from the following block charts by using the Matlab Simulink (Figs. 4 and 5). Notice in these simulations, each particle has only one exemplar.In Fig. 4, the target signal (step and random signal) represents the exemplar of the particle. The output of the integrator is the particle position. The negative feedback connection plays the role of error calculation. The ‘rand number’ block can generate random numbers evenly distributed in [0, 1]. In this block chart, c1+c2=2.9889, w=0.715. “Position clamping” module is used to keep the particle not out of the domain. The ‘Back hold’ block is used to save the current input value and give it out as an output at the next time-step. In this configuration, the sampling time of the ‘Random signal’ is 7 which means the signal is kept unchanged in 7 unit time-steps. Fig. 5 shows the simulation block chart of the new search strategy (the IPID search strategy).Fig. 6shows the step responses of the standard PSO search strategy and the IPID search strategy. In Fig. 6(a), the response curve is randomly distributed around the target. In Fig. 6(b), the response is a damped oscillation process. The response overshooting is 40% and the steady-state (±5% error) response time is 7 time instants. Thus to make the search process thorough, one searching target should be kept unchanged at least 7 time instants. Compare (c) and (d) in Fig. 6, the search process of IPID is more thorough and regular.The standard PSO algorithm and the incremental PID controller are quite similar. Meanwhile, the IPID search strategy is illustrated more thorough than the standard PSO search strategy. This naturally inspires us to incorporate the IPID to PSO algorithm. Thus a new kind of PSO variant is developed in this paper.To make the PSO algorithm with the IPID search strategy more powerful, several modifications are adopted. The IPID search strategy, together with the following changes, form the new PSO variant called the Incremental-PID-controlled PSO (IPID-PSO).In the IPID-PSO, each exemplar of one particle is kept unchanged for 7 iterations (the IPID settling response time). To derive as many as possible better solutions, after all dimensions have been updated in every iteration, the particle performance is calculated. If the current particle's performance is better than that of its Pbest or the Gbest, the better one will be saved. The saved particles will be used as the new Pbest or Gbest when the 7 iterations have been completed. This strategy is illustrated in Fig. 6(d).Although the IPID search strategy can track its target quickly and efficiently, the searching area is smaller than the standard PSO with random elements. When applied in multimodal problems, the particle is very likely to be trapped at the sub-optimal. To overcome the potential stagnation, a mutation operator is introduced.At the beginning of the IPID-PSO, an external population E is generated. During the optimization process, if a random number is smaller than the pre-defined mutation threshold, one dimension of the current particle will be replaced by the same dimension of a random individual selected from the external population E. The mutation does not take place only at the particles themselves, but also at their best memories (i.e. Pbest).Take each row of E as one particle, the external population E is generated as Table 1. D is the dimension of the problem, PopSize is the size of the population, MaxRange is the upper boundary and MinRange is the lower boundary of each dimension. The pseudo code of how to generate the external population is in Table 2.During the optimizing process, the mutation takes place when one particle has reached a new position and when all particles have arrived their new positions. After completing the E generation, it is used as a candidate base for every mutation operation. The mutation operator is executed as Table 3where rand represents a randomly generated number evenly distributed in (0, 1), and opp1 is a pre-defined constant.At the end of each iteration, with a pre-defined threshold opp1 and opp2, the similar mutation manipulation will be executed on one individual which is randomly selected from Pbest. In this paper, Gap=7 (the target refreshing gap), opp1=1/PopSize, opp2=1/Gap.To make the swarm as diverse as possible, inspired by [37], the exemplar of each particle is only the Pbest without the Gbest. At the same time, each particle's exemplar is selected from the Pbest set randomly every 7 iterations. Fig. 4 is the flow chart of the IPID-PSO algorithm.In Fig. 7, FE is the maximum number of the iteration. In this paper, all the problems are supposed to be minimization problems. According to Fig. 7, the procedures of IPID-PSO are explained as the following 7 steps:Step 1: Initialize the population X of the algorithm, set the starting particle velocity V, calculate the current errors e between X to the Pbest, save the best one particle as Gbest, set Gap=7. The mutation probabilities are opp1 and opp2. The index number for each particle is i (from 1 to PopSize) and the index for each dimension is d (from 1 to D). Let t=1, i=1 and d=1.Step 2: Start the algorithm. Calculate the new error between the current particle to its randomly selected exemplar Pbestr(i) withei,dt=Pbestr(i)−Xi,dt. r is a vector contains randomly sorted integers from 1 to PopSize. Then, update particle by using Eq. (12). If d<D, go Step 2 and let d=d+1; else, go Step 3.Step 3: Compare the particle's fitness to thePbest1itand Gbestt. Here Pbest1 is a temporary set to conserve the better particles in the 7 iterations. If its fitness is better than that ofPbest1it, then updatingPbest1it+1withXit+1; if its fitness is better than that of Gbestt, then updating Gbestt+1 withXit+1.Step 4: MutateXit+1as described in Table 3. If i<Popsize, go Step 2, and let d=1, i=i+1; else, go Step 5.Step 5: Mutate Pbestt+1 as described in Table 3.Step 6: If Gap=0, then regenerate the new learning target index vector r and let Gap=7, let Pbest=Pbest1; If Gap>0, then go Step 7.Step 7: If t<FE, then go step 2 and let i=1, d=1, Gap=Gap-1, t=t+1; else, the algorithm is ended and the Gbest is the finally derived result.To evaluate the utility of the newly proposed IPID-PSO algorithm, 8 benchmark functions are employed as the testing standard. Details of these 8 functions can be found in [50–52]. Eq. (13) to Eq. (20) are the descriptions of the 8 benchmark functions.(1)Sphere function(13)f1(x)=∑i=1Dxi2Rosenbrock's function(14)f2(x)=∑i=1D−1(100(xi2−xi+1)2+(xi−1)2)Ackley's function(15)f3(x)=−20exp−0.21D∑i=1Dxi2−exp1D∑i=1Dcos(2πxi)+20+eGriewanks's function(16)f4(x)=∑i=1Dxi24000−∏i=1Dcosxii+1Weierstrass function(17)f5(x)=∑i=1D∑k=0kmax[akcos(2πbk(xi+0.5))]−D∑k=0kmax[akcos(2πbk⋅0.5)]a=0.5,b=3,kmax=20Rastrigin's function(18)f6(x)=∑i=1D(xi2−10cos(2πxi)+10)Non-continuous Rastrigin's function(19)f7(x)=∑i=1D(yi2−10cos(2πyi)+10)yi=xixi<1/2round(2xi)2xi≥1/2Schwefel's function(20)f8=418.9829×D−∑i=1Dxi⋅sin(xi1/2)All the benchmark functions are 10 or 30 dimensional minimization problems. Table 4shows the search space, the global minimum results and the best solutions for each function.In this paper, the results derived by the IPID-PSO algorithm are compared with those obtained by other two PSO variants. The two variants are named PSO1 and PSO2. PSO1 and PSO2 are similar with IPID-PSO, the differences are that in PSO1 Gap=1 (the target is refreshed every iteration) and the velocity updating equation is Eq. (3) instead of Eq. (12). It can be seen that the PSO1 is the standard PSO. PSO2 is similar with PSO1 while Gap=7. Except these variations, the other settings of PSO1 and PSO2 are the same with IPID-PSO (see Table 5). FE equals to 30,000; PopSize is 30. In PSO1 and PSO2, c1 and c2 are both 1.49445; w is linearly decreased from 0.9 to 0.4. Each of the 3 algorithms (PSO1, PSO2 and IPID-PSO) is repeated for 50 runs.Among the 8 functions, f1 and f2 are uni-modal functions and f3 to f8 are multi-modal ones. For both the 10-D and 30-D functions, the IPID-PSO performance much better than the other two on f4 to f8. For 10-D functions, the IPID-PSO performs best in f4, f5, f6, f7 and f8. For 30-D functions, the IPID-PSO performs best in f4, f6, f7 and f8. This means the IPID-PSO can be used to solve the multi-modal problems which are very common in the real world and can obtain better results than the standard PSO algorithm.From Table 6, for the performance of three PSO variants, IPID-PSO is better than PSO2 and PSO2 is better than PSO1. From Table 7, for the performance of three PSO variants, IPID-PSO is better than PSO1, and PSO1 is better than PSO2. According to these results, the incremental PID controller search strategy proposed in this paper is very useful and is better than the standard PSO search strategy. However, the new IPID search strategy should be adopted together with the new target refreshing strategy and the mutation operator. From Figs. 8 and 9, the convergence curves show that not only the IPID-PSO can obtain better results, but also can it improve the convergence ability (faster convergence than PSO1 and PSO2).The OFS estimation model is a group of fuzzy rules with certain definations. One example of Mamdani type fuzzy rules used in OFS estimation is as follows:“IFFzθis A1, AndPzαis A2, AndTLI1is A3, THENTIRis B”The fuzzy rule base is pre-defined as follows:(1)There are 16 rules (M=16 in Eq. (21)) in the rule base and each rule has 3 antecedents and 1 consequent (3 inputs and 1 output).Each input or output feature has 3 linguistic labels which are represented by integer numbers 1, 2 and 3.Each linguistic label has two parameters (center c and width parameter σ).Each particle contains both the 16 fuzzy rules and all the Gaussian membership function parameters. Thus the length of each particle is 88 (16×4+2×3×4). One sample of particles used in the IPID-PSO algorithm is demonstrated in Fig. 10.When used for fuzzy OFS model identification, the RMSE (Eq. (23)) is used as the object function which should be minimized. In Eq. (23), yiis the real output andyˆiis the model output. N is the total number of data points.(23)RMSE=1N∑i=1N(yi−yˆi)2To validate the superiority of the IPID-PSO, the standard PSO algorithm (Eq. (3)) is also employed to identify the OFS model. Two thirds of the OFS dataset are randomly selected for training and the rest one third are used for testing. The particle population and coding are the same with IPID-PSO. The training and testing data are also the same. The swarm population size is 30 and the maximum iteration for each run is 300.From Fig. 11, the IPID-PSO algorithm not only converge faster than the standard PSO algorithm, but also can get better training and testing RMSEs for subject N. The fuzzy rules derived by the IPID-PSO are demonstrated in Table 8and the corresponding Gaussian membership functions for each input and output are illustrated in Fig. 12.In Table 8, the rule base is not perfect. Rules (3) and (4), rules (7) and (10) are the same rules separately. Rules (6) and (9), rules (13) and (14) are conflicting rules separately. This phenomenon can be eliminated by an attached checking mechanism. With this mechanism, either the same or conflicting rules will be saved only one.Both the standard PSO algorithm and the IPID-PSO algorithm used for OFS model identification are repeated for 30 runs. For each run, the training and testing data are randomly selected again and used for both PSO and IPID-PSO.In Table 9, all the training RMSEs of IPID-PSO for 5 subjects are better than that of the PSO algorithm. The training RMSE improvements obtained by IPID-PSO are 0.3% (M), 4.9% (N), 0.8% (R), 0.7% (S) and 1.3% (U). The testing RMSEs for 5 subjects (except subject S) of IPID-PSO are better than the PSO algorithm. The testing RMSE improvements obtained by IPID-PSO are 0.5% (M), 9.2% (N), 1.3% (R), −0.1% (S) and 0.2% (U) compared to the standard PSO algorithm. This demonstrates the IPID-PSO algorithm is useful in the OFS fuzzy modeling.When mentioned to RMSE, for subject N, the improvements are the most significant among the five. For other 4 subjects, the improvements are not so significant. However, the superiority to standard PSO algorithm is still can be seen in Table 9. Meanwhile, since the IPID-PSO search strategy can be analyzed by using the incremental PID controller idea, more potential advantages will be mined in our future research.Meanwhile, to well evaluate the performance of fuzzy models derived by standard PSO and IPID-PSO, in this paper, those points with TIR≤TIR* are treated as the “Risky State” (Positive Class) since they represent the risky states of operators. TIR* is a specified threshold value for each subject. The accurate risky states predictions are very important for system safety. It is because only a risky OFS is predicted the adaptive automation mechanism can be trigged to adjust the operator's task load to prevent the potential accidents. This is the key character of the adaptive automation system. At the same time, those points with TIR>TIR* are treated as the “Normal State” (Negative Class). Thus the derived fuzzy OFS model can function like a binary-class classifier for the OFS classification. The classification confusion matrix is described in Table 10[53].The “Positive Prediction value” [53] is represented withPPvaluedenoting the percentage that the “Risky States” are correctly predicted. Meanwhile, the total accuracy represented by “Acc” is defined as the correct prediction percentage of both risky and normal states. Then the 6 measures usually adopted to evaluate the performances of classifiers are calculated by:(24)TPrate=TPTP+FN,FPrate=FPTN+FP,FNrate=FNTP+FN,TNrate=TNTN+FP,PPvalue=TPTP+FP,Acc=TP+TNTP+FP+TN+FNwhere explanations of TP, FP and FN can be found in Table 10. For each subject, the 6 measures described in Eq. (24) are calculated and listed in Table 12by using standard PSO and the IPID-PSO according to Table 11.In Table 10, TP represents the number of points which are actually “Risky State” and are predicted as “Risky State” by OFS classifier. FP represents the number of points which are actually “Normal State” but are predicted as “Risky State”. FN represents the number of points which are actually “Risky State” but are predicted as “Normal State”. TN represents the number of points which are actually “Normal State” and are predicted as “Normal State”.For different subjects, they have different threshold values (TIR*) which are defined according to each subject's performance. In this paper, TIR* for 5 subjects are 90% (M), 90% (N), 95% (R), 90% (S) and 95% (U) separately. Then, according to Table 10, Table 11 demonstrates the testing confusion matrices by using standard PSO and IPID-PSO algorithm for 5 subjects.From Table 12, all the 6 measures of OFS fuzzy models derived by using IPID-PSO for 3 subjects (R, S, U) are better than those derived by using the standard PSO algorithm. For subject M and N, the FPrateand TNratederived by IPID-PSO are worse than those derived by standard PSO. However, the other 2 measures (TPrate,PPvalue) which are more concerned by us and are more related to the “Risky State” prediction together with the “Acc” derived by IPID-PSO are better than those derived by standard PSO algorithm. This means the fuzzy OFS models derived by IPID-PSO can provide more effective OFS classification than standard PSO algorithm since risky OFSs can be more effectively predicted. This is quite important for keeping the adaptive human-machine system running safely.Compare the standard PSO and the IPID-PSO algorithms, when mentioned to TPrate, IPID-PSO outperforms the standard PSO. The most significant enhancements are derived by subjects M, N and S, with 27.8%, 23.5% and 23.6% improvements by using IPID-PSO. For other 2 subjects, the improvements are 11.1% (R) and 7.2% (U). When mentioned toPPvalue, the improvements for 5 subjects are 13.3% (M), 2.3% (N), 14.5% (R), 13.3% (S) and 3.6% (U) compared to the results derived by standard PSO. Subjects M, N and S obtain the largest improvements again. Meanwhile, the “Acc” measures of 5 subjects also get large enhancement by using IPID-PSO algorithm instead of standard PSO. For all the 5 subjects, the improvements are 6.7% (M), 5.0% (N), 15.0% (R), 8.3% (S) and 5.0% (U). At the same time, the “Acc” measures derived by IPID-PSO are all over 70% which mean the classification is useful.However, it still can be seen in Table 12 that the TPrateof subject M is only 55.6% and thePPvalueof subjects M, R and S are also less than 60%. The reasons for this and the possible solutions may be as follows.Firstly, the accurate estimation and classification of OFS are quite difficult problems since the data may highly noise-contaminated and the relationships between physiological data and TIR are extremely nonlinear. Thus, more physiological inputs may be introduced in our future research to improve the classification results. Secondly, the purpose of the fuzzy OFS model in this paper is originally designed for regression which concerns RMSE indicator instead of classification accuracy. This may be one important reason for such results. Thus, our future work may introduce multi-objective oriented IPID-PSO algorithm on the OFS fuzzy model identification to balance the RMSE and the classification accuracy.By considering all the indicators used in this paper, the RMSE, together with the 6 measures calculated above further substantiated that the IPID-PSO algorithm can derive better performed OFS fuzzy models than the standard PSO algorithm. The OFS fuzzy models derived by IPID-PSO can well fit the real OFS data and well classify the risky OFSs and normal OFSs.

@&#CONCLUSIONS@&#
In this paper, the EEG measures are collected while 5 subjects are working with different tasks. The fuzzy system is employed to estimate the OFS by using the EEG features. A newly developed IPID-PSO algorithm which is a combination of the standard PSO algorithm and the incremental PID controller is proposed. After validated by 8 benchmark functions’ minimization problems, the IPID-PSO algorithm is used to identify the fuzzy system used for OFS estimation. Compared to the standard PSO algorithm, the IPID-PSO can obtain better results for the 5 subjects both on OFS estimation and classification. This means the IPID-PSO algorithm is very useful for the OFS fuzzy model identification. Our future work will focus on the continued improvement of the IPID-PSO algorithm. Meanwhile, more subjects will be involved in the OFS experiments and more data will be collected to derive more accurate OFS fuzzy models.