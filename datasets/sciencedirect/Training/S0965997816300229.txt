@&#MAIN-TITLE@&#
Fundamental concepts in the Cyclus nuclear fuel cycle simulation framework

@&#HIGHLIGHTS@&#
Nuclear fuel cycle modeling generality and robustness are improved by a modular, agent based modeling framework.Discrete material and facility tracking rather than fleet-based modeling improve nuclear fuel cycle simulation fidelity.A free, open source paradigm encourages technical experts to contribute software to the Cyclus modeling ecosystem.The flexibility of the Cyclus tool from the simulator user perspective is demonstrated with both open and closed fuel cycle examples.

@&#KEYPHRASES@&#
Nuclear fuel cycle,Simulation,Agent based modeling,Nuclear engineering,Object orientation,Systems analysis,

@&#ABSTRACT@&#
As nuclear power expands, technical, economic, political, and environmental analyses of nuclear fuel cycles by simulators increase in importance. To date, however, current tools are often fleet-based rather than discrete and restrictively licensed rather than open source. Each of these choices presents a challenge to modeling fidelity, generality, efficiency, robustness, and scientific transparency. The Cyclus nuclear fuel cycle simulator framework and its modeling ecosystem incorporate modern insights from simulation science and software architecture to solve these problems so that challenges in nuclear fuel cycle analysis can be better addressed. A summary of the Cyclus fuel cycle simulator framework and its modeling ecosystem are presented. Additionally, the implementation of each is discussed in the context of motivating challenges in nuclear fuel cycle simulation. Finally, the current capabilities of Cyclus are demonstrated for both open and closed fuel cycles.

@&#INTRODUCTION@&#
As nuclear power expands, technical, economic, political, and environmental analyses of nuclear fuel cycles by simulators increase in importance. The merits of advanced nuclear technologies and fuel cycles are shaped by myriad physical, nuclear, chemical, industrial, and political factors. Nuclear fuel cycle simulators must therefore couple complex models of nuclear process physics, facility deployment, and material routing.Indeed, the cardinal purpose of a dynamic nuclear fuel cycle simulator is to calculate the time- and facility-dependent mass flow through all or part the fuel cycle. Dynamic nuclear fuel cycle analysis more realistically supports a range of simulation goals than static analysis [1]. Historically, dynamic nuclear fuel cycle simulators have calculated fuel cycle mass balances and performance metrics derived from them using software ranging from spreadsheet-driven flow calculators to highly specialized system dynamics modeling platforms.To date, current tools are typically distributed under restrictive rather than open source licenses, having been developed in industrial contexts or using commercial software platforms. Additionally, having often been developed for customized applications, many possess inflexible architectures, never having been designed to enable new features or extensions. Finally, many model only fleet-level dynamics of facilities and materials rather than discrete resolution of those individual agents and objects. When the DOE-NE Fuel Cycles Technologies Systems Analysis Campaign developed requirements necessary in a next generation fuel cycle simulator, three main failure modes were associated with those software choices. First, they discourage targeted contribution and collaboration among experts. Next, they hobble efforts to directly compare modeling methodologies. Finally, they over-specialize, rendering most tools applicable to only a subset of desired simulation fidelities, scales, and applications. Those three constraints were identified as presenting significant challenges to modeling fidelity, generality, efficiency, robustness, and scientific transparency in the field of fuel cycle analysis [2].The Cyclus nuclear fuel cycle simulator framework and its modeling ecosystem, the suite of agents and other physics plug-in libraries compatible with it, incorporate modern insights from simulation science and software architecture to solve these problems. These modern methods simultaneously enable more efficient, accurate, robust, and validated analysis. This next-generation fuel cycle ’simulator is the result of design choices made to:•support access to the tool by fuel cycle analysts and other users,encourage developer extensions,enable plug-and-play comparison of modeling methodologies,and address a range of analysis types, levels of detail, and analyst sophistication.Cyclus is a dynamic, agent-based model, which employs a modular architecture, an open development process, discrete agents, discrete time, and arbitrarily detailed isotopic resolution of materials. Experience in the broader field of systems analysis indicates that agent-based modeling enables more flexible simulation control than system dynamics, without loss of generality [3]. Furthermore, openness allows cross-institutional collaboration, increases software robustness [4,5], improves the strength and quality of results through peer review [6–10], and cultivates an ecosystem of modeling options. This ecosystem is modular, being comprised of dynamically loadable, interchangeable, plug-in libraries of fuel cycle component process physics that vary in their scope, depth, and fidelity. This modularity allows users and developers to customize Cyclus to analyze the cases that are of interest to them rather than any custom application the simulator was originally developed to address. Additionally, that customizability allows users and developers to address those cases at the level of fidelity necessary for their application. The fundamental concepts of the Cyclus nuclear fuel cycle simulator capture these modern insights so that novel challenges in nuclear fuel cycle analysis can be better addressed.

@&#CONCLUSIONS@&#
The Cyclus nuclear fuel cycle framework presents a more generic and flexible alternative to existing fuel cycle simulators. Where previous nuclear fuel cycle simulators have had limited distribution, constrained simulation capabilities, and restricted customizability, Cyclus emphasizes an open strategy for access and development. This open strategy not only improves accessibility, but also enables transparency and community oversight. Furthermore, the object-oriented ABM simulation paradigm ensures more generic simulation capability. It allows Cyclus to address common analyses in a more flexible fashion and enables analyses that are impossible with system dynamics simulators.Similarly, the fidelity-agnostic, modular Cyclus architecture facilitates simulations at every level of detail. Simulations relying on arbitrarily complex isotopic compositions are possible in Cyclus, as are simulations not employing any physics at all. Physics is introduced through optional system-wide radioactive decay of materials and through the use of physics-enabled facility libraries. To support calculation of physical processes in nuclear facilities, the Cycamore library provides models employing basic physics for core fuel cycle facilities and extension libraries from the community support more detailed simulations. Indeed, agents of such varying fidelity can even exist in the same simulation. Researchers no longer need to reinvent the underlying simulator framework in order to model a simulation focused on the aspects of the fuel cycle relevant to their research.Furthermore, when the capabilities within Cyclus, Cycamore, and the rest of the ecosystem are insufficient, adding custom functionality is simplified by a modular, plug-in architecture. A clean, modern API simplifies customization and independent archetype development so that researchers can create models within their domain of expertise without modifying the core simulation kernel. Throughout the Cyclus infrastructure, architecture choices have sought to enable cross-institutional collaboration and sustainable, community-driven development. The ecosystem of capabilities, already growing, may someday reflect the full diversity of use cases in the nuclear fuel cycle simulation domain.