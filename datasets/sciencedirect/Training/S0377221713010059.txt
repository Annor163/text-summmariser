@&#MAIN-TITLE@&#
Many-to-many location-routing with inter-hub transport and multi-commodity pickup-and-delivery

@&#HIGHLIGHTS@&#
We introduce an extension of the many-to-many location-routing problem.We provide a test set and perform an extensive computational study.A mixed-integer linear model is developed.A fix-and-optimize heuristic and a genetic algorithm are developed.

@&#KEYPHRASES@&#
Location-routing,Inter-hub transport,Multi-commodity pickup-and-delivery,Mixed-integer linear programming,Fix-and-optimize,Genetic algorithm,

@&#ABSTRACT@&#
In this paper, we consider a variant of the many-to-many location-routing problem, where hub facilities have to be located and customers with either pickup or delivery demands have to be combined in vehicle routes. In addition, several commodities and inter-hub transport processes are taken into account. A practical application of the problem can be found in the timber-trade industry, where companies provide their services using hub-and-spoke networks. We present a mixed-integer linear model for the problem and use CPLEX 12.4 to solve small-scale instances. Furthermore, a multi-start procedure based on a fix-and-optimize scheme and a genetic algorithm are introduced that efficiently construct promising solutions for medium- and large-scale instances. A computational performance analysis shows that the presented methods are suitable for practical application.

@&#INTRODUCTION@&#
Trading, industrial, and commercial service companies, as well as logistic service providers operate in transport networks that connect supply and delivery points. Particularly, when a company is launched, or decides to expand its operations, the efficient design of a transport network is an important key factor for business success. In order to configure a network such that all transport needs may be satisfied at the lowest transportation costs, companies usually decide to route shipments through a hub-and-spoke system. Instead of driving with partially loaded vehicles from supply to delivery points, full vehicles are sent to central transhipment facilities (hubs), where shipments are sorted and consolidated for further transport. In particular, strategic network design decisions comprise the determination of the numbers and locations of hub facilities, as well as the allocation of supply and delivery points to one or more hubs in order to specify possible transportation paths between pairs of origins and destinations (location-allocation problem). Once facilities are located, routes have to be planned for vehicles moving within the network (vehicle routing problem).Location-allocation problems typically consider the positioning of facilities while taking into account serving customer locations on a straight-line trip between facility and customer. However, the assumption of direct transports rather than vehicle routes leads to less realistic transportation cost estimations. In order to compensate for that shortcoming, location-routing problems consist of determining the location of facilities and defining the routes for vehicles such that customer demands are satisfied, vehicle capacities are not exceeded, and the minimization of facility fixed and operating costs, as well as of routing costs is realized.Location-routing problems (LRPs) usually occur in practice when customer locations are known in advance and therefore stable vehicle routes can be constructed. For example, Or and Pierskalla (1979) presented a study focusing on regionalization of blood banking systems. Jacobsen and Madsen (1980) considered a newspaper printing and distribution system in Denmark. Nambiar, Gelders, and Van Wassenhove (1989) investigated the problem of locating central rubber processing factories to process smallholder’s rubber, collected daily from a number of stations in Malaysia. Kulcar (1996) considered a project dealing with waste collection management, and Wasner and Zäpfel (2004) developed an optimal network structure for an Austrian parcel delivery service.Various classification schemes have been presented for LRPs, where the differentiation is generally based on hierarchical levels, nature of demand or supply, number of facilities or vehicles, facility layers, and objectives (cf. e.g., Laporte, 1988; Min, Jayaraman, & Srivastava, 1998; Nagy & Salhi, 2007). In this paper, we consider a three layer network configuration consisting of supply and delivery points on the one hand and hub facilities to be located on the other hand. Supply and delivery points are situated at known locations and each point has a given demand that must be picked up or delivered (deterministic data). For hub facilities a set of potential locations is given. In order to meet the long-term characteristic of the location problem, we study one aggregate, representative planning period (static problem). To cope with the lack of reliable information on how conditions might change in future, as well as to allow decision-makers to explore the consequences of their decisions, appropriate scenarios are designed, where cost and demand variations are considered.In Section 2, we describe the underlying location-routing problem and a possible application area. Since the problem contains problem components known from the literature that have not been considered in combination before, related literature is presented. In Section 3, we introduce a mixed-integer linear model for the problem. In order to strengthen the according formulation, Section 4 describes valid inequalities that may be added within the optimization process. Sections 5 and 6 are devoted to a multi-start procedure and a genetic algorithm that efficiently construct near-optimal solutions. The results of extensive computational experiments, where instances with problem-specific structural characteristics are considered, are given in Section 7. Finally, conclusions are presented in Section 8.The location-routing problem under consideration is derived from a real-world application in the timber-trade industry. In order to exemplify the problem, a possible network configuration including routing decisions is depicted in Fig. 1using a layer diagram (cf. Laporte, 1988) with three layers. The layers are identified as supply points (layer 1), potential hubs (layer 2), and delivery points (layer 3), i.e., a many-to-many network structure is considered. Starting from an established hub (hereh1,h2, orh3), vehicles perform pickup and delivery routes visiting each supply and delivery point precisely once. Routes may be pure pickup, pure delivery, or “mixed”, where some pickup locations have to be visited before the first delivery location can be served. The consideration of mixed routes is of practical importance and saves costs if the products involve a lot of handling effort, pickup and delivery locations are close together, and pickup and delivery quantities can be aggregated to almost full truckloads. Section 7 contains computational results which show in detail the impact that allowing mixed routes has on the total network costs. Inter-hub routes, i.e., routes that go from one hub to another and back, are traversed in order to obtain synergy effects by consolidating products in full truckloads. Thereby, products with different origins and different destinations are transported together over the line-haul portion of the network.We distinguish between several products (commodities). Consequently, each supply as well as each delivery point is associated with a vector containing either surpluses or deficits of the different products (multi-commodity pickup-and-delivery problem; cf. e.g., Hernández-Pérez & Salazar-González, 2009; Rodríguez-Martín & Salazar-González, 2011).The many-to-many location-routing problem involves the following three interdependent subproblems:(1)How many hub facilities are required and where should they be located?Is it beneficial to combine supply and/or delivery points to form vehicle routes, where every route starts and ends at an assigned hub?Which inter-hub routes must be established?A practical application of the considered problem can be found in the timber-trade industry. A timber-trade company picks up wooden products (e.g., beams, pallets, door and window frames) from sawmills and wood-manufacturers (supply points), and serves a number of distributors or wood-processing businesses (delivery points). Supply points usually do not act as a full-range provider. Particularly, sawmills are specialized in processing different kinds of wood, e.g., spruce, maple, and pine, and wood-manufacturers are specialized in manufacturing wood for construction purposes, fences, or indoor equipment. The delivery points periodically require more or less the same mixture of products (e.g., ply wood, panels, and OSB-boards) for their production or retail activities. Hence, pickup and delivery locations and their product quantities can be assumed to be known in advance.Nowadays, an increasing number of companies in the wood sector works in a just-in-time environment, and tries to avoid extensive stock holding (cf. e.g., Klassen, 2000; Madzanai, 2012). Therefore, aggregating product amounts over time and then performing full truckloads from one origin to one destination is not required. Consequently, timber-trade companies aggregate products within the network and provide their pickup and delivery services using hub-and-spoke systems. Employing this network structure, economies of scale and scope can be realized by consolidating freight through one or more hubs.Since material handling at hub facilities is especially difficult for large-sized, heavy, and non-standardized wooden products, the number of intermediate hubs on a transportation path is typically limited to no more than two. Hence, inter-hub vehicles perform replenishment routes, where products are carried from one hub (e.g., hubh1in Fig. 1) to another hub (e.g., hubh2) and other products are transported fromh2toh1. However, routing all freight through a hub is not always the best option. If vehicles are fully loaded with all products required by one or a few adjacent destinations, direct transports between supply and delivery points can lead to cost efficiency. In practice, delivery points place recurrent orders in small quantities. High capacity utilizations may then be achieved by aggregating pickup and delivery activities. As several organizational aspects (e.g., driver-vehicle combinations, equipment assignments) have to be considered, routes start and end at an assigned hub location. Wooden products differ in size, quality, weight, or handling requirements, and therefore the consideration of one homogenous good is not acceptable. In order to take different product characteristics into account, we specify several product classes in accordance with their distinctive features. The determination of different commodities lasts to offer enough flexibility for a detailed planning on the operational level in which fixed pickup and delivery pairs have to be considered. For each commodity, the quantities of products are measured in abstract transport units which may, for example, be calculated from the dimensions of an individual product.To sum up, the problem under consideration typically occurs, when transport networks for companies who handle large, non-standardized products (e.g., timber, glass, or steal) have to be designed. The problem involves dealing with subproblems (1)–(3) and may be identified as an extension of the well-known location-routing problem. In addition, a many-to-many network structure with inter-hub transport and multi-commodity pickup-and-delivery is considered. Although the problem at hand is interesting for many practical applications, to the best of our knowledge, it has not been addressed in the literature before.There exist several contributions considering basic versions of the LRP. The structure of location-routing problems usually consists of manufacturing plants (primary facilities) and/or distribution centers (secondary facilities) and customers. In a two layer environment, the locations of primary facilities have to be determined (cf. e.g., Ahmadi Javid & Azad, 2010; Yu, Lin, Lee, & Ting, 2010; Baldacci, Mingozzi, & Wolfler Calvo, 2011). In a three layer environment there are additional options for location decisions. On the one hand, the location of secondary facilities (cf. e.g., Caballero, González, Guerrero, Molina, & Paralera, 2007; Ambrosino, Sciomachen, & Scutellà, 2009) or, on the other hand, the locations of primary and secondary facilities may be specified (cf. e.g., Contardo, Hemmelmayr, & Crainic, 2012). The different layers are connected by means of vehicle routes. The vehicles are usually based on a facility located at layer t and perform routes to layert+1. Problems deviated from this structure incorporate, for example, routes that skip layers (cf. e.g., Madsen, 1983; Ambrosino & Scutellà, 2005; Nguyen, Prins, & Prodhon, 2012) or routes that connect facilities on one layer. Both variants are incorporated in the problem under consideration, i.e., supply and delivery points may be connected and inter-hub links may be traversed. Some contributions are characterized by capacitated facilities and uncapacitated vehicles (see e.g., Albareda-Sambola, Dìaz, & Fernández, 2005; Jarboui, Derbel, Hanafi, & Mladenovic, 2013) and others consider uncapacitated facilities and capacitated vehicles (see e.g., Laporte, Norbert, & Taillefer, 1988; Tuzun & Burke, 1999). The case with capacities for both facilities and vehicles is referred to as capacitated location-routing problem and is studied by e.g., Prins, Prodhon, Soriano, and Wolfler Calvo (2007), Duhamel, Lacomme, Prins, and Prodhon, 2010, Escobar et al. (2013), and Ting and Chen (2013).Several exact algorithms have been developed to solve location-routing problems, but their applicability is limited to small- and medium-scale instances. Laporte et al. (1988) showed that LRPs can be formulated as constrained assignment problems by an appropriate graph transformation. The resulting assignment problems are then solved by a branch-and-bound procedure. Akca, Berger, and Ralphs (2009) described a branch-and-price algorithm based on a set-partitioning formulation. The pricing problem consists in finding elementary paths of minimum reduced cost under capacity constraints. Baldacci et al. (2011) presented an exact method considering a set-partitioning-like formulation of the LRP. Lower bounds are generated by specific procedures, based on dynamic programming and dual ascent methods. The lower bounds are used to decompose the underlying problem into a set of multi-depot vehicle routing problems in which each depot has its own capacity. Belenguer, Benavent, Prins, Prodhon, and Wolfler Calvo (2011) proposed a branch-and-cut algorithm that is based on a formulation using only binary variables. The formulation is strengthened by valid inequalities derived from the capacitated vehicle routing problem. Contardo, Cordeau, and Gendron (2013a) introduced a cut-and-column generation scheme, where the LRP is formulated as a set-partitioning problem and inequalities are introduced that strengthen the linear programming relaxation significantly. The problem is solved by column generation, where the subproblem is a capacitated shortest path problem.Besides exact algorithms, heuristic approaches have been developed to find near-optimal solutions for medium- and large-scale instances. Tuzun and Burke (1999) presented a two-phase approach that coordinates two tabu search methods, one seeking a good facility configuration and one a good routing pattern. Each time a move is performed to generate a new location configuration, the routing is started in order to update the vehicle routes. Wu, Low, and Bai (2002) divided the LRP into two subproblems, the location-allocation problem and the vehicle routing problem. Each subproblem is solved in a sequential and iterative manner by simulated annealing considering the tabu list concept in order to prevent cycling. In Albareda-Sambola et al. (2005) a tabu search procedure is introduced that consists of a series of intensification and diversification iterations. The diversification phase operates mainly at the location level and selects the open facilities. The intensification phase is composed of a local search method that is applied to the routing subproblem. Prins, Prodhon, and Wolfler Calvo (2006) considered a greedy randomized adaptive search procedure (GRASP) based on an extended version of the Savings-algorithm (cf. Clarke & Wright, 1964) and with a learning process on the choice of depots. Furthermore, Prins et al. (2006) developed a genetic algorithm enhanced by local search. In Prins et al. (2007) a two-phase cooperative approach is presented. The algorithm alternates between a depot location phase solved by Lagrangean relaxation and a routing phase solved by granular tabu search. Cooperation between the phases occurs by exchanging information on the most promising edges. Barreto, Ferreira, Paixão, and Santos (2007) proposed a sequential method of the type distribution-first, location-second. Duhamel et al. (2010) presented a metaheuristic which hybridizes GRASP and evolutionary local search. The key-feature of the algorithm is the alternation between giant tours without trip delimiters and complete location-routing solutions. Yu et al. (2010) considered a simulated annealing approach with a random neighborhood structure that features insertion, swap, and 2-opt moves. Prodhon (2011) developed a hybrid evolutionary algorithm for the periodic LRP that consists in integrating frequency constraints on visited customers over a given multi-period planning horizon. The solution method combines an evolutionary local search with a heuristic based on a randomized variant of the Savings-algorithm to create feasible solutions. Jarboui et al. (2013) used variable neighborhood search in order to solve LRPs. Five neighborhood structures are incorporated which are variants of insertion and swap operators over the location and routing decisions. Escobar, Linfati, and Toth (2013) introduced a hybrid algorithm consisting of a construction phase and an improvement phase. During the improvement phase, a modified granular tabu search heuristic is applied which uses five different neighborhoods, three diversification strategies, and a perturbation procedure. The perturbation procedure is deployed whenever the algorithm remains in a local optimum for a given number of iterations. Ting and Chen (2013) presented a multiple ant colony optimization algorithm. The method applies a hierarchical ant colony structure that is designed to tackle the different subproblems: location selection, customer-location assignment, and route construction. A coordination between ant colonies responsible for location selection and customer assignment is achieved through pheromone updating rules.The problem under consideration has similarities to the many-to-many location-routing problem (MMLRP), where hub facilities have to be located and customers with either a pickup or a delivery demand have to be combined in routes. Particularly, the MMLRP is a special case of the LRP proposed in this paper in which a group of supply points can serve a group of delivery points. Application areas of the MMLRP concentrate on the design of letter or parcel delivery systems. The MMLRP was introduced by Nagy and Salhi (1998), where it is assumed that each customer sends a different commodity to every other customer. The aim is to determine a network of hubs, as well as local pickup and delivery routes from hubs to origins and destinations, taking into account fixed and variable costs. The network includes direct links between all hubs, therefore the routing of products within the hub-network is implicitly determined by the hub locations. A mixed-integer linear programming formulation is presented. In order to solve the MMLRP, a hierarchical heuristic solution framework, based on the concept of “nested methods” is specified. Bruns, Klose, and Stähly (2000) studied a problem arising in the course of the reconstruction of the Swiss postal service system. In this system, parcels run directly from post offices to a region’s parcel processing center and, if necessary, they are forwarded to a processing center of destination. Then, the shipments are carried to delivery bases and finally shipped to customers by vehicles making multiple stops. The main problems were to determine the locations of delivery bases, their allocation to processing centers, and the allocation of customer areas to delivery bases. The authors reduced the problem to a simple plant location problem, where routing costs are subsumed into the assignment costs. Wasner and Zäpfel (2004) studied a problem posed by a parcel delivery service provider in Austria. Vehicles perform delivery and pickup routes, and both their depot locations and their routes need to be determined. Since the authors assume that delivery and pickup occur staggered (in opposite directions on a route, first delivery, then pickup) the routing problem is considered as a vehicle routing problem without precedence constraints. The product flows between depots usually run through a central hub, but the possibility of direct transports from depot to depot is included. A mixed-integer model is presented. Furthermore, the authors use a hierarchical solution approach with feedback mechanisms, where the depot locations are found by an add/drop/shift heuristic and vehicle routes are built heuristically.In order to define the proposed many-to-many location-routing problem in mathematical terms, we consider a directed graphG=(V,A). Vertex setV=I∪H∪Jconsists of nodes I representing supply points, nodes H representing potential hubs, and nodes J representing delivery points. We assume that setsI,J, and H are disjunctive; consequently, nodes associated with more tasks must be duplicated. The subgraphs consisting of supply points and hubs, as well as hubs and delivery points, are complete. To ensure that direct transports between supply and delivery points may be executed, G contains arcs〈i,j〉,i∈I,j∈J. Fig. 2shows the transport digraph for a problem instance with four supply pointsi1,…,i4, two potential hubsh1,h2, and four delivery pointsj1,…,j4. In order to simplify matters, the forward and backward arcs between pairs of nodes are given by edges.Each arc is associated with a weightcij⩾0that represents the transportation costs between nodes i and j,i,j∈V. If hub h is established, we consider fixed costsfh>0for facility planning, construction, and maintenance. Starting from an existing hub, a fleet of homogeneous vehicles, each with capacity C, performs routes in order to serve the supply and delivery points. Note that assuming homogenous vehicles is common practice, since detailed decisions on investments concerning heterogeneous vehicles (e.g., with truck-mounted hydraulic cranes) are made on the basis of an aggregated plan. Supply pointsi∈Ihave a surplusaip⩾0and delivery pointsj∈Ja deficitbjp⩾0of productsp∈P, where∑p∈Paip>0and∑p∈Pbjp>0must be satisfied, i.e., at least one product must be supplied or demanded. We assume that the total supply of product p is equal to the total demand of product p; albeit this assumption is not always fulfilled on the operational level, it can be justified due to our long-term perspective. Each vehiclek∈Khstarts its routes at the hub h it is assigned to and returns to the same hub. The set of all vehicles that could be used if all hubs are established, is denoted byK≔⋃h∈HKh.In order to consolidate products at hubs, pickups must precede deliveries. Only products that have arrived at a hub location can be sorted and consolidated for further transport processes. We therefore have to take into account that (pure) pickup routes, containing nodes of the first layer, are executed before inter-hub routes. Inter-hub routes connect nodes on the second layer and cater for the necessary material balance and for the efficient movement of products traveling over long distances. (Pure) delivery routes, through nodes of the third layer, have to be executed at the end. To ensure this chronology, we assume that each vehicle traverses at most three routesr1,r2,r3(in accordance to the three layers) starting and ending at hubh∈H;R≔{r1,r2,r3}.Table 1lists all possible types of vehicle routes (i,i′∈I,j,j′∈J,h,h′∈H). Inter-hub routes are assumed to be direct, while all other routes are multi-stop (indicated by dots). The first route might be an exclusive pickup route, or a pickup and delivery route; the second route will typically be an inter-hub route, and the third route might be an exclusive delivery route, or a pickup and delivery route. Furthermore, in all cases, some vehicles might be stationary at hub h. By considering one route for each network layer, we obtain 18 possible routings for each vehicle.In what follows, we present a mixed-integer linear program (MIP) for the many-to-many location-routing problem with inter-hub transport and multi-commodity pickup-and-delivery. Binary decision variablesyh≔1,if hubh∈His established0,otherwisexijkr≔1,ifcase 1:arc〈i,j〉is traversed by vehiclek∈Kon router∈{r1,r3};i∈I,j∈I∪J;i∈J,j∈J∪H;i∈H,j∈Icase 2:arc〈i,j〉is traversed by vehiclek∈Kon router1;i∈I,j∈Hcase 3:arc〈i,j〉is traversed by vehiclek∈Kon router2;i∈H,j∈Hcase 4:arc〈i,j〉is traversed by vehiclek∈Kon router3;i∈H,j∈J0,otherwiseare used to model location and routing decisions. Load variablesLipkr⩾0amount of productp∈Pin vehiclek∈Kbefore visiting nodei∈I∪Jon router∈{r1,r3}, and amount of productp∈Pin vehiclek∈Kbefore visiting hubi∈Hon router1Λhh′pk⩾0amount of productp∈Pthat has to be transported in vehiclek∈Kfrom hub h to hubh′on router2;h,h′∈H,h≠h′Ljpk⩾0amount of productp∈Pin vehiclek∈Kthat has to be delivered to nodej∈Jand to all other following nodes, and amount of productp∈Pin vehiclek∈Kthat has to be loaded at hubj∈Hψipk⩾0variable to linearize termxhikr3Lipkr3;i∈I∪J,h∈H,k∈Kh,p∈Pspecify the quantities in the vehicles.The objective function defines the criterion for selecting hub locations and vehicle routes, where we aim at minimizing depot fixed and operating costs, as well as transportation costs. In order to consider cost reductions obtained by consolidating products at hub facilities, we apply a scaling factor0<α<1to the network’s inter-hub links (cf. e.g., Ernst & Krishnamoorthy, 1998; Hamacher, Labbé, Nickel, & Sonneborn, 2000; Racunica & Wynter, 2005). Duly allowing for the route construction rules (cf. Table 1), the underlying objective function may be defined as follows:(1)Min.∑h∈Hfhyh+∑k∈K∑i∈I∑j∈Hcijxijkr1+∑i∈H∑j∈Jcijxijkr3+∑i∈H∑j∈Hi≠jαcijxijkr2+∑k∈K∑r∈R⧹{r2}∑i∈I∑j∈I∪Ji≠jcijxijkr+∑i∈J∑j∈J∪Hi≠jcijxijkr+∑i∈H∑j∈IcijxijkrRoutes must allow for certain assignment requirements. Constraints (2) and (3) ensure that each supply point and each delivery point will be visited precisely once by a given vehicle.(2)∑k∈K∑r∈R⧹{r2}∑m∈Im≠ixmikr+∑k∈Kh∑r∈R⧹{r2}∑h∈Hxhikr=1i∈I(3)∑k∈K∑r∈R⧹{r2}∑i∈I∪Ji≠jxijkr+∑k∈K∑h∈Hxhjkr3=1j∈JConsidering the number of vehicles present at each hub, inequalities (4) guarantee that an established hub can be left one time on each router1,r2,r3in order to transit to supply points, delivery points, or hub facilities.(4)∑i∈Vi≠hxhikr⩽yhh∈H,k∈Kh,r∈RConstraints (5)–(11) are flow conservation constraints applying at each node and for each vehicle.(5)∑h∈Hxhikr1+∑m∈Im≠ixmikr1-∑m∈Im≠iximkr1-∑h∈Hxihkr1-∑j∈Jxijkr1=0i∈I,k∈K(6)∑h∈Hxhikr3+∑m∈Im≠ixmikr3-∑m∈Im≠iximkr3-∑j∈Jxijkr3=0i∈I,k∈K(7)∑i∈Ixihkr1+∑j∈Jxjhkr1-∑i∈Ixhikr1=0h∈H,k∈Kh(8)xh′hkr2-xhh′kr2=0h,h′∈H,h≠h′,k∈Kh(9)∑i∈Ixihkr3+∑j∈Jxjhkr3-∑i∈Ixhikr3-∑j∈Jxhjkr3=0h∈H,k∈Kh(10)∑i∈Ixijkr1+∑n∈Jn≠jxnjkr1-∑h∈Hxjhkr1-∑n∈Jn≠jxjnkr1=0j∈J,k∈K(11)∑i∈Ixijkr3+∑h∈Hxhjkr3+∑n∈Jn≠jxnjkr3-∑h∈Hxjhkr3-∑n∈Jn≠jxjnkr3=0j∈J,k∈KConstraints (12) specify the product quantities on vehicles after leaving hub h on their first routes. Those quantities must be zero, since vehicles leave a hub empty, and normally return there loaded. Inequalities (13)–(17) indicate the quantities of products on vehicles after stopping at the first node, which is definitely a supply point, and the other nodes on the first routes, respectively. Finally, the loadings of vehicles before returning to hub h equal the product quantities that have to be unloaded and consolidated for subsequent transport.(12)Lipkr1⩽C1-xhikr1i∈I,h∈H,k∈Kh,p∈P(13)Lmpkr1⩽Lipkr1+aip+C1-ximkr1i,m∈I,i≠m,k∈K,p∈P(14)Lhpkr1⩽Lipkr1+aip+C1-xihkr1i∈I,h∈H,k∈Kh,p∈P(15)Ljpkr1⩽Lipkr1+aip+C1-xijkr1i∈I,j∈J,k∈K,p∈P(16)Ljpkr1⩽Lnpkr1-bnp+C1-xnjkr1j,n∈J,j≠n,k∈K,p∈P(17)Lhpkr1⩽Ljpkr1-bjp+C1-xjhkr1j∈J,h∈H,k∈Kh,p∈PLoadings on the first routes must be less than, or equal to, the capacity of the vehicles involved (cf. inequalities (18)). Constraints (19) ensure that the product quantities at a hub facility that has not been reached by a vehicle will be set to zero.(18)∑p∈PLipkr1⩽Ci∈V,k∈K(19)Lhpkr1⩽C∑i∈I∪Jxihkr1h∈H,k∈Kh,p∈PInequalities (20) and (21) consider the load restrictions on second routes. Thereby, constraints (20) restrict vehicles’ loadings to the quantities of products that are present at a hub with respect to the first routes of the vehicles. If an inter-hub link is traversed, constraints (21) ensure that inter-hub flows will not exceed the vehicles’ capacities.(20)∑k∈KhΛhh′pk⩽∑k∈KhLhpkr1+∑k∈Kh′Λh′hpkh,h′∈H,h≠h′,p∈P(21)∑p∈PΛhh′pk⩽Cxhh′kr2h,h′∈H,h≠h′,k∈KConstraints (22) and (23) set upper bounds on the quantities of products in each vehicle before visiting the first node on the third route. These upper bounds are determined by considering the entire inflow and outflow of all products in hub h.(22)Lipk′r3⩽∑k∈KhLhpkr1+∑k∈K∑h′∈Hh′≠hΛh′hpk-Λhh′pk+C1-xhik′r3i∈I,h∈H,k′∈Kh,p∈P(23)Ljpk′r3⩽∑k∈KhLhpkr1+∑k∈K∑h′∈Hh′≠hΛh′hpk-Λhh′pk+C1-xhjk′r3j∈J,h∈H,k′∈Kh,p∈PIn order to avoid vehicles delivering collectively larger quantities than available at hub h, constraints (24) restrict the total quantities of products at the first nodes to the quantities that were on hand at hub h following vehicles’ first and second routes.(24)∑k∈Kh∑i∈I∪Jψipk⩽∑k∈KhLhpkr1+∑k∈K∑h′∈Hh′≠hΛh′hpk-Λhh′pkh∈H,p∈PTo confine ourselves to linear constraints, auxiliary variablesψipkreplace the termsxhikr3Lipkr3in constraints (24). Furthermore, we have to introduce some additional restrictions in order to obtain accurate solutions. Inequalities (25)–(27) therefore indicate upper and lower bounds on the auxiliary variables, respectively.(25)ψipk⩽Cxhikr3i∈I∪J,h∈H,k∈Kh,p∈P(26)ψipk⩽Lipkr3i∈I∪J,k∈K,p∈P(27)ψipk⩾Lipkr3-C1-xhikr3i∈I∪J,h∈H,k∈Kh,p∈PConstraints (28)–(30) specify the quantities of products on vehicles after stopping at the first node, which will be either a supply point or a delivery point, and the other nodes on the third routes. The loadings must be less than, or equal to, the respective capacities of the vehicles (cf. inequalities (31)).(28)Lmpkr3⩽Lipkr3+aip+C1-ximkr3i,m∈I,i≠m,k∈K,p∈P(29)Ljpkr3⩽Lipkr3+aip+C1-xijkr3i∈I,j∈J,k∈K,p∈P(30)Ljpkr3⩽Lnpkr3-bnp+C1-xnjkr3j,n∈J,j≠n,k∈K,p∈P(31)∑p∈PLipkr3⩽Ci∈I∪J,k∈KWith constraints (32)–(34), we stipulate the quantities of products on vehicles upon leaving a hub facility on the third routes. Inequalities (35) ensure that the capacities of the vehicles involved will not be exceeded.(32)Ljpk⩾bjpj∈J,k∈K,p∈P(33)Lnpk⩾Ljpk+bnp-C1-xnjkr3j,n∈J,j≠n,k∈K,p∈P(34)Lhpk⩾Ljpk-C1-xhjkr3j∈J,h∈H,k∈Kh,p∈P(35)∑p∈PLjpk⩽Cj∈H∪J,k∈KConstraints (36) connect the loading variables that are necessary for formulating the loading restrictions for vehicles’ third routes. Constraints (37) are flow conservation constraints that dictate that the flow of product p entering a hub will equal the flow of product p leaving the hub.(36)Ljpk⩽Ljpkr3+C1-∑i∈Vxijkr3j∈J,k∈K,p∈P(37)∑k∈KhLhpk=∑k∈KhLhpkr1+∑k∈K∑h′∈Hh′≠hΛh′hpk-Λhh′pkh∈H,p∈PThe model formulation consists of four different parts that ensure that each supply/delivery point belongs to only one route (constraints (2) and (3)), there is no outgoing/ingoing flow from unselected hubs (constraints (4)), the flow conservation is satisfied on each route (constraints (5)–(10), (37)), and capacity constraints are not violated (constraints (12)–(36)). These parts are also integrated in models for LRPs (cf. e.g. Prins et al., 2007; Belenguer et al., 2011; Contardo, Cordeau, & Gendron, 2013b). However, the complexity of constraints in the proposed problem is higher, since pickup and delivery locations, three layers, inter-hub transports, multiple products, and direct transports between supply and delivery points have to be considered. In fact, if we do not consider mixed routes, only one commodity for every supply and delivery point, and commodities being all different, our problem reduces to the MMLRP (cf. Section 2 as well as Nagy & Salhi, 1998). The MMLRP itself can be seen as an extension of various other distribution, location, and vehicle routing problems (cf. Nagy & Salhi, 2007).The location-routing problem under consideration integrates inter-hub transport and multi-commodity pickup-and-delivery. Hence, the individual product flows entering and leaving a hub must be balanced. The following example illustrates the balanced transfer of products within a hub-and-spoke network. We assume that the underlying transport digraph consists of four supply pointsi1,…,i4, five delivery pointsj1,…,j5, and three potential hubsh1,h2,h3. Pickup and delivery quantities for productsp1,p2,p3are listed in Table 2. One vehicle is available at hubsh1,h2, and two vehicles are positioned at hubsh3,h4. The capacity of the vehicles is equal to 15 transport units. Fig. 3depicts a feasible solution to the problem. All arcs with positive flows are weighted; arcs without weight are equivalent to arcs without product flows. Vehiclek1traverses three routes:r1=(h1,i1,j1,j2,h1),r2=(h1,h3,h1), andr3=(h1,j3,h1), vehiclek2performs two routes:r1=(h2,i3,i2,h2), andr2=(h2,h3,h2), vehiclek3traverses two routes:r1=(h3,i4,h3),r3=(h3,j4,h3), and vehiclek4performs one route:r3=(h3,j5,h3).The model presented in Section 3 hardly offers special structural characteristics, which can be exploited in order to design exact solution algorithms. Therefore, as for generic binary models, only instances with a small number of nodes can be solved to optimality using standard optimization software. In order to improve the solver performance, pre-processing techniques can be used or additional constraints may be added. Under preliminary tests (cf. Section 7.2), we realized that the consideration of the following valid inequalities results in improved linear programming (LP) bounds and reductions in terms of computation time and solution gap. The constraints restrict the solution space and synchronize the decision variables.Inequalities (38) guarantee that two supply and/or delivery pointsi,jcan only be connected by a forward arc〈i,j〉or by a backward arc〈j,i〉. Constraints (39) ensure that an arc〈i,j〉,i,j∈I∪Jmay either be traversed on the first or on the third route. With inequalities (40)–(42) load and location decision variables are connected.(38)∑k∈K∑r∈R⧹{r2}xijkr+xjikr⩽1i,j∈I∪J,i≠j(39)xijkr1+xijk′r3⩽1i,j∈I∪J,i≠j,k,k′∈K(40)∑p∈PLhpr⩽Cyhh∈H,k∈Kh(41)∑p∈PLhpkr⩽Cyhh∈H,k∈Kh,r∈R⧹{r2}(42)Lipkr⩽Cyhi∈V,h∈H,k∈Kh,r∈R⧹{r2},p∈PIn addition to structural constraints that are valid for arbitrary problem instances, we further developed inequalities with respect to the individual input data of a specific instance. If the product amount available at supply pointi∈I′⊆Iis too large to be combined with any other supply point, i.e.,∑p∈Paip+amp>C,m∈I,m≠i, a vehicle traverses directly from a hub to i (cf. constraints (43)). If a delivery point cannot be merged with any other delivery point due to its demand, a vehicle that visits nodej∈J′⊆Jreturns directly to the depot (cf. constraints (44)).(43)∑h∈H∑k∈Khxhikr1+xhikr3=1i∈I′(44)∑h∈H∑k∈Khxjhkr1+xjhkr3=1j∈J′Moreover, let the largest sum of supply amounts that is smaller than, or equal to, capacity C be denoted withA‾≔maxQ⊆I{∑i∈Q∑p∈Paip∣∑i∈Q∑p∈Paip⩽C}. The largest sum of supply amounts per productp∈Pthat is smaller than, or equal to, capacity C may be determined byA‾p≔maxQ⊆I{∑i∈Qaip∣∑i∈Qaip⩽C}. When the demand of delivery point j is larger thanA‾orA‾pfor a productp∈P, j must be visited on router3of a vehicle, after consolidation activities are executed (cf. constraints (45)).(45)∑i∈Vi≠j∑k∈Kxijkr3=1j∈J,∑p∈Pbjp>A‾orbjp>A‾pfor somep∈PIn order to find exact solutions to the problem under consideration, the model presented in Section 3 can be formulated using algebraic modeling software (e.g., GAMS) and solved by standard solvers. Since already for small-scale instances running times are quite large, we developed a heuristic multi-start procedure based on a fix-and-optimize scheme. In each iteration of the procedure, a subset of binary decision variables is fixed to reduce the dimension of the branch-and-bound tree and to speed up solution times. The respective subset of decision variables is determined by considering important characteristics of feasible solutions (cf. Section 5.1). We only consider positive values for fixation, as fixing variables to 1 usually results in better lower bounds obtained by solving the LP-relaxation, whereas fixing to 0 has little or no impact. After fixing variables, the problem is solved in order to obtain a good feasible upper bound. The resulting fix-and-optimize procedure is terminated once a stopping criterion is satisfied (cf. Section 5.2).A feasible solution is generated by using a two-step construction algorithm. In the first step, an adapted version of the Savings-algorithm proposed by Clarke and Wright (1964) is applied, where location and routing decisions are placed simultaneously. The routing decisions refer to the first and the third layer of the underlying problem. In the second step, a multi-commodity fixed-charge network flow problem is solved in order to determine the number of required inter-hub routes on the second layer. The Savings-algorithm, in its original form, is developed to solve one-depot vehicle routing problems. Starting with a set of single-node routes (in a single-node route only one node is visited by a vehicle), the algorithm tries to feasibly combine two routes in order to gain transportation cost savings. Our modification of the Savings-algorithm constructs routes for a multi-depot problem with pickup-and-delivery services. Furthermore, the underlying three-layer network is taken into account. The algorithm starts with an infeasible solution that contains∣H∣single-node routes for each supply and each delivery point. The routes start and end at hubsh=1,…,∣H∣, respectively. Since it is not guaranteed that the vehicles assigned to hubh∈Hare able to execute all single-node routes(h,i,h),i∈I∪J, we introduce additional fictitious vehicles. Later on, all non-required fictitious vehicles will be eliminated. In order to enforce a consolidation of products in hubs, we only allow for building routes with either supply or delivery points. We identify each supply point with a demanddi≔∑p∈Paip,i∈I, and each delivery point with a demanddj≔∑p∈Pbjp,j∈J. When, for example, two pickup routes(h,…,i,h)and(h,i′,…,h)are merged into a combined route(h,…,i,i′,…,h), a transportation cost saving is generated, which is calculated according to(46)sijh≔cih+chj-ciji,j∈Iori,j∈J,h∈H.In the main part of the algorithm, possibly combinable routes associated with the highest cost savings are consecutively chosen and checked for their feasibility. A current combined route is feasible if the vehicle capacity is not exceeded and nodes i and j are first or last customers in two different routes starting and ending at hub h. A feasible combined route is integrated into the set of routes. Furthermore, the single-node routes that also contain nodes i and j are removed. The algorithm terminates if no more feasible cost savings can be realized. In a post-processing step, all remaining single-node routes are assigned to individual hub facilities and the other single-node routes are eliminated. For a problem instance with three supply points, three delivery points, and three potential hubs, the process of the algorithm, where savingssi1i2h1,sj1j2h2, andsj3j1h2are consecutively realized, is depicted in Fig. 4. The third supply pointi3is not integrated into a combined route and is therefore part of∣H∣=3single-node routes.We assume transportation costs increasing proportionally with the distance. Hence, condition (46) arranges that neighboring nodes i and j in combination with a hub facility far away, determines the largest savings. Fig. 5shows the computation of savings for two supply pointsi1,i2and two potential hubsh1,h2. Since savingsi1i2h2=25has currently the largest value, a combined route will be generated if the feasibility check is successful. However, the route that matches supply pointsi1,i2, and hubh1produces the lower transportation costs in the amount of 17 units (in contrast to 27 units for route(h1,i1,i2,h1)). Therefore, the goal of minimizing the network operating costs will not be reached. In order to avoid those difficulties, we use a mutation operator in our post-processing step, that re-assigns each generated route to a hub facility, where each hub is considered with probability1/∣H∣.Finally, a supply route r and a delivery router̃(all routes are interpreted as sets of nodes) can be merged if the condition∑i∈r∩Iaip=∑j∈r̃∩Jbjpis satisfied for allp∈P. Then, a so called “direct connection” between the last node of r and the first node ofr̃is introduced. The presented algorithm generates combined routes for the first and the third layer, but leaves the second layer out of consideration. In what follows, we identify the set of routes starting and ending at hubh∈Hat the end of the algorithm withRh. In order to determine inter-hub routes that correspond to the second layer, a multi-commodity fixed-charge network flow problem (MFCNFP) has to be solved.The proposed network flow problem is defined on a directed flow networkN=(VN,AN), where node setVNcontains all hub locationsh∈Hwith∣Rh∣>0. There are∣P∣commodities, and every nodeh∈VNhas a commodity vectorαh≔(αhp)p∈Pwithαhp≔∑i∈I∩Rhaip-∑j∈J∩Rhbjp. A positive (negative)αhp-value indicates that nodeh∈Vhas a supply (demand) of productp∈P. Furthermore, each arc〈h,h′〉∈ANis associated with its transportation costschh′, as well as with a lower and an upper arc capacitycap(0,∞). The flow of commodityp∈Palong arc〈h,h′〉is denoted byfhh′p⩾0and binary variablef̃hh′∈{0,1}is considered to indicate whether arc〈h,h′〉is used or not. Then, the MFCNFP has the following form:(47)Minimize∑〈i,j〉∈ANcijf̃ij(48)subject to∑j∈VNj≠ifijp-∑j∈VNj≠ifjip=αipi∈VN,p∈P(49)fijp⩽Mf̃ij〈i,j〉∈AN,αjp<0<αip,p∈PObjective function (47) determines the costs, where a fixed chargecijis incorporated if products flow along arc〈i,j〉. Constraints (48) guarantee that the supplies and demands are satisfied. Big-M inequalities (49) ensure that the total flow on arc〈i,j〉is equal to zero if the arc is absent;M≔maxi∈VN,p∈P{∣αip∣}. Considering flowsfijp∗,i,j∈H,p∈P, in an optimal solution, the number of inter-hub routes between nodes i and j may be specified bymax∑p∈Pfijp∗/C,∑p∈Pfjip∗/C.Fig. 6shows a feasible solution to a MFCNFP with three hubs. Vehicles with capacityC=15units perform one inter-hub route betweenh1andh2as well as betweenh1andh3, respectively. Additionally, the connection between nodesh2andh3requires two inter-hub routes.In case a solution can be executed with the given vehicle fleet, a feasible solution(x,y,L,Λ,L,ψ)to the location-routing problem with inter-hub transport and multi-commodity pickup-and-delivery is found. In order to generate a set of different solutions, we make use of an iterative method that considers savings in a randomized sequence, i.e., the initial savings-vector s is modified to vectors̃. In each iteration of the method, we create an autonomous solution, and store the best solution found. The procedure terminates once a stopping criterion is satisfied, e.g., after some prescribed computation timetα.The construction algorithm, described in Section 5.1, is not designed for considering all possible direct connections between supply and delivery points. An optimal solution may contain arcs〈i,j〉,i∈I,j∈J, that will never be identified during the post-processing phase of the Savings-algorithm. It may happen that a vehicle picks up products at several supply points within a first route, delivers some of them directly to delivery points and then returns to the hub partially loaded. Moreover, a vehicle can depart partially loaded at a hub on the third route, picks up some more products at supply points and delivers all of them to delivery points. The integration of direct connections usually reduces the number of vehicles needed for executing the first or the third routes and leads to better objective function values.The following procedure is based on a fix-and-optimize scheme, where in each iteration a subset of binary decision variables is set to one. We conducted a series of preliminary studies in order to identify characteristics of near-optimal solutions and to derive a reasonable set of selection rules for variable fixation. Particularly, binary routing variables that represent connections between supply points or between delivery points are beneficial candidates for a fixation, because they support the solver in constructing direct connections from the first to the third layer while maintaining balance constraints on the second layer. Given some feasible solution obtained by the proposed construction heuristic, we consider variablesxijkrfor possible fixation, where nodesi,j∈I, ori,j∈J, and vehiclek∈Khbelongs to hub h. Note that a particular hub h is specified by the construction algorithm and the router∈{r1,r3}is determined randomly. Additionally, binary decision variablesyh,h∈H, with∣Rh∣>0are candidates for fixing. Recall that a fixation of some variable x or y implies including additional constraintsx≔1ory≔1into the model (1)–(37). Since the maximum number of decision variables, that can potentially be fixed, is quite large, a selection procedure is included in order to give the solver some degree of freedom within the process of completing a solution. Under preliminary tests, we identified that the addition of up to five fixed decision variables performs best. In order to avoid that the same set of variables is considered more than once, we prohibit it in further iterations by using a tabu list. The fixed decision variables(x̃,ỹ)are used to calculate a lower boundLB♢. IfLB♢⩾UBholds, we can prune this fixation and continue with a new iteration. Otherwise, the fixation of variables(x̃,ỹ)is integrated into the model and transferred to a MIP-solver that tries to find an optimal solution or an upper boundUB♢within a time limit oftβ. In case thatUB♢is smaller than the former upper boundUB, we setUB≔UB♢. The fix-and-optimize procedure terminates when a global time limit oftγis reached. The corresponding algorithm is depicted below.Algorithm 1Fix-and-optimize procedure.1: Input: problem instanceP, time limitstα1,tα2,tβ,tγ, savings-vector s2:s̃←SavingsSequence(s)3:(x∗,y∗,L∗,Λ∗,L∗,ψ∗)←ConstructionAlgorithm(P,s̃,tα1)(* Generate feasible start solution *)4:UB≔objective function value of(x∗,y∗,L∗,Λ∗,L∗,ψ∗)5: while time limittγis not exceeded do6:s̃←SavingsSequence(s)7:(x′,y′,L′,Λ′,L′,ψ′)←ConstructionAlgorithm(P,s̃,tα2)8:(x̃,ỹ)←Selection(x′,y′)(* Fix subset of binary decision variables *)9:LB♢←LowerBound((x̃,ỹ),P)10: ifLB♢⩾UBthen11: Continue (* Prune *)12: else13:UB♢and (x♢,y♢,L♢,Λ♢,L♢,ψ♢)←SolveMIP((x̃,ỹ),P,tβ)14:ifUB♢<UBthen15:UB≔UB♢(* Update upper bound *)16:(x∗,y∗,L∗,Λ∗,L∗,ψ∗)≔(x♢,y♢,L♢,Λ♢,L♢,ψ♢)17: Add(x̃,ỹ)to tabu listUBand(x∗,y∗,L∗,Λ∗,L∗,ψ∗)Besides a fix-and-optimize scheme, another heuristic, namely a genetic algorithm, that gets along without the usage of a solver, have been developed. A genetic algorithm provides a stochastic optimization method that attempts to simulate Darwin’s theory on natural selection (cf. Holland, 1975; Michalewicz, 1996). The method iteratively applies certain operators to a population of solutions so that on average each new population (i.e., generation) tends to be better than the previous one, according to some predefined fitness criteria. A fitness function measures the fitness of all solutions (individuals) in a population and the algorithm seeks to maximize the fitness function. The termination criterion is usually specified as a fixed number of generations, or an execution time limit. At the end, the best solution found is returned. The choice of a genetic algorithm has been inspired by the recent promising results provided by Duhamel et al. (2010), Prodhon (2011), Derbel, Jarboui, Hanafi, and Chabchoub (2012).The (MM)LRP involves three decisions: location of hubs, assignment of customers to hubs, and construction of routes starting and ending at established hubs. In order to adapt techniques typically used in the literature (cf. e.g., Prins et al., 2007; Duhamel et al., 2010; Ting & Chen, 2013; Escobar et al., 2013), the different decisions have to be considered in an iterative manner. An individual in our genetic algorithm is represented by a vectorVthat contains the decision on hub constructions as well as a matrixMthat specifies on the one hand the decision on assignments of customers to hubs and on the other hand the routing decision (cf. Prins et al., 2006). Furthermore, an individual obtains a fitness function value that is equal to the reciprocal of the objective function value.VectorVcontains∣H∣binary numbers; value “1” (“0”) at positionρ⩽∣H∣means the establishment (non-establishment) of hubhρ, i.e.,yhρ≔1(yhρ≔0). MatrixMhas the dimensions2∣K∣×∣V∣, i.e., two rows are introduced for each vehicle; one for the first and one for the third route. A row contains integer numbers1,…,∣V∣that can be interpreted as priority values for the corresponding nodes. The priority value on positionϱ⩽∣V∣belongs to hubhϱifϱ⩽∣H∣, to supply pointiϱ-∣H∣if∣H∣<ϱ⩽∣H∣+∣I∣, and to delivery pointjϱ-∣H∣-∣I∣ifϱ>∣H∣+∣I∣is satisfied. A possible representation for a problem instance with two supply pointsi1,i2, three delivery pointsj1,j2,j3, and three potential hubsh1,h2,h3is given in Fig. 7. Only hubsh1andh2are established and we assume that vehiclek1is available ath1and vehiclesk2,k3are present ath2(C=35units).In order to determine the assignment of nodes to hubs as well as the vehicle routes, the priority lists inMmust be decoded. Thereby, the rows are considered successively by the following route generation procedure: Nodei∈Vthat corresponds to the element with the highest priority (smallest integer number) is incorporated in a “route string” if•i∈I∪J, node i is not part of another route, the route contains no hub node, the capacity of the respective vehicle is not exceeded, the vehicle starts empty/partially loaded and returns empty or it starts empty and returns empty/partially loaded, ori∈H, node i is the first hub in the route and i is established.After the route generation procedure, it may happen that some nodesi∈I∪Jare not integrated in routes. Then, the respective solution is infeasible and obtains a fitness function value of1/UB, whereUBcorresponds to an upper bound. For the remaining solutions, feasible node sequences have to be determined. Consider a specific solution and a route string in the solution: The last node (that is a hub) is inserted as the start node of the route. Afterwards, the route string is traversed twice. In the first run, the supply points and in the second run the delivery points are transferred consecutively in the route. The resulting route r can either be a first or a third route of a vehicle;r≔r1ifr∩J=∅orr∩I≠∅,r∩(I∪J)≠∅, and the vehicle starts empty and returns loaded (empty),r≔r3ifr∩I=∅orr∩J≠∅,r∩(I∪J)≠∅, and the vehicle starts loaded (empty) and returns empty. The individual remains feasible if each route (with at least one nodei∈I∪J) can be assigned to a vehicle that is present at the corresponding hub; otherwise the individual obtains a fitness function value of1/UB. Fig. 8shows the resulting route strings, where infeasible nodes are deleted, the node sequences, the route-vehicle assignment, and the complete solution of the problem. The inter-hub routes are determined by solving a MFCNFP (cf. Section 5.1).Evolution occurs as we go from a population at step k to the next population at stepk+1. Genetic operators of selection, crossover, and mutation are used to produce one generation from the next. We partition the population into two groups: an elite set of individuals and a non-elite set. The population at stepk+1is comprised of p individuals;0.1pbest individuals from step k (forming the elite set),0.2prandomly generated individuals called mutants, and0.7poffspring that are produced by mating two individuals (parents), selected at random, one from the elite set and another from the non-elite set. Two crossover operators are used, one for vectorVand one for matrixM. The crossover operator forVselects randomly a “cut point” and exchanges all the digits to the right of the cross site of one vector with those of the other. The crossover operator for matrixMallows two cut points to be randomly chosen. In order to create an offspring, the string between the two cut points in the first parent is first copied to the offspring. Then, the remaining positions are filled by considering the sequence of priority values in the second parent, starting after the second cut point (ordered crossover operator; cf. Prins, 2004). The above steps are repeated until a stopping criterion is satisfied.This section covers the results of an extensive computational study that was conducted in order to investigate the performance of the presented solution methods. We start by describing the composition and generation of problem instances used for testing the methods (cf. Section 7.1). In our performance analysis, we used CPLEX 12.4 and GAMS 23.8 to solve small-scale problem instances to optimality. Moreover, medium- and large-scale instances are solved by the fix-and-optimize procedure as well as the genetic algorithm (cf. Section 7.2).The computational runs were conducted on 1920 small-, 768 medium- and 192 large-scale instances that are randomly generated, duly allowing for control parameters in order to reproduce a wide range of practical needs. We mainly focused on outbound network configurations, as in the timber-trade industry the number of supply points is usually lower than the number of delivery points. Each instance contains supply/delivery points whose positions are randomly chosen based on geodata containing positions of sawmills and wood-manufacturers across central Europe. Furthermore, we distinguish between instances with regional clustered delivery points (type “RC”) and instances with delivery points randomly distributed (type “R”). This approach is similar to that for instances for vehicle routing problems with time windows generated by Solomon (1987). Table 3shows the different network configurations (described by∣I∣-∣H∣-∣J∣) and the related total number of nodes∣V∣.In addition to the network configurations, we considered eight scenarios, where the variable transportation costs c, the fixed costs f for establishing hubs, and the density D of delivery matrices(bjp)j∈J,p∈Pare varied. In doing so, we are able to cope with uncertainties in future developments (i.e., increased energy costs, changes in wages, or modified pickup and delivery quantities). The cost components are categorized as either small (s) or large (l), and the matrices may have a dense (d) or a non-dense (nd) setting. A demand matrix(bjp)j∈J,p∈Pis denoted dense if 75–100% of the matrix elements are larger than zero and is denoted non-dense if 50–75% of the matrix elements are larger than zero (i.e., the demand matrix in Table 2 is non-dense). Table 4depicts an overview of the different scenarios. For each combination of network structure and scenario, six instances were generated, i.e., the test set for each network structure contains 48 instances.The variable transportation costs, which are composed of costs for fuel, vehicle usage, driver wages, and toll, as well as the fixed hub-related costs, that consist, e.g., of depreciations, costs for wages, and energy, usually refer to different planning horizons (short-term and long-term level). In order to perform a comparative study of both planning horizons, the cost components must be determined for one representative planning period. Using one week as reference, we calculated transportation cost rates ofc(s)≔1.18€ and ofc(l)≔1.63€, based on representative data of our cooperation partner. For the fixed costs, we obtained the valuesf(s)≔2696€ andf(l)≔3135€. The setting of parameterα≔0.2is based on considerations about capacity utilizations for line-haul transports.To generate a demand matrix(bjp)j∈J,p∈Pfor some matrix(aip)i∈I,p∈P, the following restrictions must be considered.(50)∑i∈I∑p∈Paip=∑j∈J∑p∈Pbjp(51)∑i∈Iaip=∑j∈Jbjpp∈P(52)∑p∈Paip⩽Ci∈I(53)∑p∈Pbjp⩽Cj∈J(54)0⩽aip⩽a¯ipi∈I,p∈P(55)0⩽bjp⩽b¯jpj∈J,p∈PConstraints (50) ensure that the total supply quantities are equal to the total demand quantities. In a similar way, constraints (51) guarantee that the supply of a product is equal to its demand. With inequalities (52) and (53), we make sure that the offered and required quantities per node comply with the vehicle capacity. Constraints (54) and (55) restrict the supply and delivery quantities, where the upper boundsa¯ip,b¯jpare randomly chosen. In addition to the restrictions above, we ensure that the prescribed number of positive elements is reached according to the respective density.The following section will give an overview and a discussion on the results obtained for the location-routing problem under consideration. All tests are performed on an Intel i7-2760QM machine with 8GB RAM. The algorithms are implemented in C++ and compiled under MS Visual Studio 2010.We begin our analysis by considering the small-scale problem instances. Each instance is solved using model (1)–(37) plus the described valid inequalities (38)–(45). Since the problem under consideration isNP-hard (as an extension of the Steiner tree and the traveling salesman problem, cf. Lee, Lim, & Park, 1996; Lenstra & Rinnooy Kan, 1981), and therefore difficult to solve to optimality, we used a maximum computation time of one hour after which the best solution found is returned. Table 5shows the computational results. In column “#opt” the number of instances solved to optimality within the time limit is given. Column “tcpu” displays the average computation times (seconds) for all optimally solved instances, and column “gap” shows the average gap (%) between the best integer solution and the best lower bound found for all instances that reached the time limit. Finally, column “∣I∣/∣J∣” indicates the ratio (%) of supply to delivery points which we identified to be an important parameter for the difficulty of the underlying problem.The solver is able to find optimal solutions for test sets with 12 and 13 nodes. Furthermore, nearly all instances with 14 and 15 nodes are solved to optimality. Test sets with 16 and 17 nodes are difficult in comparison to the previous ones; for only 37% (27%) of those instances and a network configuration of type “R” (“RC”) an optimal solution could be found. Considering the average computation times and the number of optimal solutions found, instances of type “RC” are harder to solve than instances of type “R”. The difficulty of these instances results from placing the delivery points in clusters. Neighboring nodes positioned in clusters usually have short distances between each other. Therefore, several optimal or near-optimal solutions exist and the effort to reach an optimal solution is significantly higher. Additionally, an asymmetry in the number of supply and delivery points (i.e., a small∣I∣/∣J∣-ratio) generally results in larger run times.The results ordered by scenarios c-f-D are given in Table 6; note that each scenario includes 120 instances. Obviously, problem instances with a non-dense demand matrix (scenario nd) are easier to solve than instances with a dense demand matrix (scenario d), since less strict constraints are incorporated and the number of possible feasible routes is reduced. For transportation or fixed costs in scenarios containing component “s” or “l” at some arbitrary position, no explicit advantage can be determined.In order to analyze the effects of valid inequalities (cf. Section 4), each small-scale instance is solved using model (1)–(37) without considering inequalities (38)–(45). In comparison to the results with valid inequalities (cf. Table 5), the outcomes are significantly worse (cf. Table 7); only 1406 instances (instead of 1451 instances) are solved to proven optimality. Furthermore, the average computation times are increased by 31.1% for network configurations of type “R” and by 23.1% for configurations of type “RC”. The average solution gaps increased from 8.4% to 9.8% (configurations of type “R”) and from 9.6% to 10.1% (configurations of type “RC”).A main enhancement of the proposed many-to-many location-routing problem with inter-hub transports and multi-commodity pickup-and-delivery in comparison to MMLRPs known from the literature is the integration of “mixed routes” that contain a connection from a supply to a delivery point. Companies prefer the consideration of mixed routes, as significant cost savings can be reached. In order to show the dimension of these cost savings, we solved all instances with 12 to 15 nodes and#opt=48 (cf. Table 5) without the consideration of mixed routes, i.e., we add the conditionxijkr1=xijkr3≔0for alli∈I,j∈J,k∈Kto the model. Column “MMLRP=” (“MMLRP>”) in Table 8indicates the number of instances for which the objective function value of MMLRP is equal to (greater than) the objective function value of the proposed LRP. Column “δ>” displays the average upward deviations (%) for all instances considered in column MMLRP>; column “δ^” shows the maximum deviation (%) in the respective test set. Objective function values of the MMLRP are significantly higher in comparison to the values of our LRP. For both network configurations, the average upward deviations are about 12.0% which means that high cost savings can be achieved by mixed routes that are usually part of optimal solutions. Hence, besides the practical applicability, allowing for mixed routes is also justified from the numerical point of view.Considering the number of optimal solutions for configurations of types “R” and “RC” (cf. Table 5), for 18 test sets instances exist, where optimality could not be proven within the time limit. In order to improve these solutions, we solved the respective test sets with the fix-and-optimize heuristic (FH) parameterized withtα1≔10seconds,tα2≔1second,tβ≔60seconds,tγ≔600ortγ≔1200seconds. The results are given in Table 9. In column “FH=” the number of solutions with the same objective function values as generated by using the MIP-model is given. Column “FH<” shows the number of instances for which the heuristic value improves the one given by CPLEX, and column “FH>” presents the number of instances for which the heuristic value is worst. For all those instances a downward or an upward deviation is calculated. Columns “δ<” and “δ>” depict the average results (%).The fix-and-optimize heuristic offers the advantage of faster run times along with relative good results. In most cases, both methods are able to produce the same objective function values. Furthermore, the average downward deviation is comparatively larger than the average upward deviation, particularly for instances of type “R”. It should be noted that allowing larger run times (20minutes instead of 10minutes) can improve the performance of the heuristic, since a larger part of the solution space is searched. Particularly, the solutions found by solving the MIP-model are improved 56 times for network configurations “R” and 72 times for network configurations “RC”. The heuristic is therefore able to obtain results with a reasonable degree of accuracy. The results in Table 9 indicate that the number of nodes affects the solution quality of the fix-and-optimize heuristic. For 40.1% of the instances with 17 nodes, the best-known solution (i.e., the MIP-solution) could not be improved. This is mainly due to the fact that although a suitable fixation is provided, the solver is not always able to find a feasible solution withintβ. Furthermore, the time needed by CPLEX to build the model in memory cannot be neglected and reducestβconsiderably. We conducted additional experiments in order to analyze the effect of (a) fixing an increased amount of binary decision variables and (b) increasingtβ. Fixing more binary variables results in a significant reduction of solver solution times, but at the expense of decreased solution qualities. An increasedtβ-value only pays off up to a certain extent, since the underlying problem with fixations remains NP-hard and therefore difficult to solve to optimality. Hence, to tackle large-scale instances, the described genetic algorithm has to be used.First, we compare the results of our genetic algorithm (GA) to the results obtained by the MIP-solver. We consideredp=100individuals in a population and terminated the algorithm afterG^=40generations have been build. For small-scale instances, the average run times are between 0.47 (14 nodes) and 0.96seconds (17 nodes). In column “GA=” (“GA<”, “GA>”) the number of solutions with the same (a smaller, a larger) objective function values as generated by using the exact CPLEX-approach is given (cf. Table 10). Columns “δ<” and “δ>” indicate the corresponding average downward and upward deviations (%). In almost all cases, the genetic algorithm was able to reproduce the MIP-solution or to improve the best solution known so far. Only for six instances a slightly worse solution was generated. Since the solution quality is close to optimal, the GA with the proposed representation seems to be an appropriate metaheuristic for the problem under consideration.A comparison of the two heuristic algorithms (cf. Table 11) shows that the respective solution qualities are similar for small-scale instances. In column “FH=” (“FH<”, “FH>”) the number of fix-and-optimize solutions with the same (a smaller, a larger) objective function values as generated by the genetic algorithm is given. Columns “δ<” and “δ>” again depict the average downward and upward deviations (%). Regarding medium-scale instances with up to 44 nodes, the genetic algorithm (average run times are between 43.54 (19 nodes) and 395.46seconds (44 nodes),p=150,G^=50generations) consistently performs better than the fix-and-optimize heuristic (with a run time limit of 20minutes), the average upward deviations being larger than 13.5%. Note that the increase in GA run times is mainly evoked by solving a MFCNFP every time the fitness of an individual is evaluated.When dealing with stochastic optimization methods, like genetic algorithms, it is interesting to analyze the efficiency of the incorporated intensification and diversification mechanisms (i.e., in our case the number of elite and mutant individuals, or the used crossover operators), which hopefully let the algorithm converge to near-optimal solutions. Therefore, for medium- and large-scale instances we compared the GA with a pure random search. Within the pure random search, we randomly generated a number of(p+0.9pG^)individuals, that is the same number as generated by the GA. Columns “δ>” of Table 12show the respective upward deviations (%), which are on average 42.52% for medium-scale instances and 28.45% for large-scale instances of network type “R”, and on average 44.52% for medium-scale instances of network type “RC” (no large-scale instances of network type “RC” exist). Note that the GA in all cases found better solutions. Taking also into consideration the results for small-scale instances, these results indicate that the GA has a potential to efficiently solve practical instances ensuring convergence to promising solutions. The upward deviation decreases with the number of nodes, what accentuates the need of an appropriate adjustment of the GAs parameter settings, e.g., allowing for a larger population size.Finally, we briefly sketch how decision-makers can incorporate information about scenarios c-f-D into their location decisions in order to anticipate uncertainties in future costs and demands. Note that the provided scenario information can be used in two different ways. First, once hub facilities are established, the location-decision cannot be revised on a short-time-basis when faced with changes in input data. Then, a re-optimization of vehicle routes has to be performed. In order to estimate the (additional) costs, a decision matrix can be constructed, where the reasonable location decisions are confronted with all scenarios. Second, using this matrix within the location decision process helps estimating consequences of a particular hub location decision. In doing so, an appropriate decision rule that reflects the decision-makers risk attitude can be applied.Table 13shows a decision matrix for a non-clustered problem instance with network configuration 5-3-8. The matrix elements represent the (re-optimized) network operating costs of each location decision and scenario. Assuming that hubh1is established, the maximum additional costs that may occur are 4723€ per week (l-l-d versus s-s-nd). Furthermore, a risk-averse decision-maker may deduce that hubsh1andh2should be established according to the “Mini–Max–rule” (the largest cost for each scenario is given in bold type).

@&#CONCLUSIONS@&#
