@&#MAIN-TITLE@&#
Hexahedral mesh smoothing via local element regularization and global mesh optimization

@&#HIGHLIGHTS@&#
A novel local to global hexahedral mesh smoothing algorithm is proposed.An element size adjustment method is proposed to scale transformed ideal elements.The volumetric Laplacian operator is used to stitch the regularized elements.Geometric constraints of surface meshes are introduced to global optimization.

@&#KEYPHRASES@&#
Hexahedral mesh,Mesh quality,Mesh smoothing,Volumetric Laplacian,

@&#ABSTRACT@&#
Graphical abstract

@&#INTRODUCTION@&#
Hexahedral meshes are preferred to tetrahedral meshes in many finite element analysis applications, since hexahedral meshes offer several numerical advantages over tetrahedral meshes due to their tensor product nature  [1]. However, the automatic hexahedral mesh generation for a complicated three-dimensional solid remains far more challenging than the generation of tetrahedral meshes. Many hexahedral meshes are generated by the divide and conquer approach that decomposes the entire geometry into several simpler volumes  [2], which can be subsequently meshed by using mapping/sub-mapping  [3,4], sweeping  [5,6], and advancing front method  [7,8]. However, for solid models with complex geometries, hexahedral meshing frequently produces meshes of unsatisfactory quality. As accuracy and reliability of finite element analysis results depend on mesh quality, there is frequently a need to improve the quality of hexahedral meshes.Hexahedral mesh quality improvement involves two main approaches: node-smoothing method and topological modification method  [9,10]. The topological modification method is used for hexahedral meshes which have poor topological connections with neighboring meshes. In most cases, topological modifications of hexahedral meshes are far more complex than other types of meshes due to their specific adjacency structure. Therefore, we focus on node-smoothing method, which can improve mesh quality only based on node movements without altering mesh topology.Much work has been done on hexahedral mesh smoothing, and the related techniques can be classified by the general strategies they employ, including local smoothing and global smoothing. While local smoothing methods operate one vertex at a time to improve mesh quality in a neighborhood of that vertex, global smoothing methods aim to improve the overall mesh quality by solving a linear or non-linear system. Laplacian smoothing method is considered as the most well-known local smoothing method for mesh smoothing  [11]. In Laplacian smoothing, nodes are iteratively moved to the geometric center by weighting the contribution of each neighboring node in the averaging function. While Laplacian method is simple and easy to use, it may produce invalid elements and is not effective in models which have non-convex regions. In order to ensure the mesh quality improvement and to prevent the generation of invalid elements, a smart variant of Laplacian smoothing is proposed, where node moves only if the quality of the local mesh is improved  [12]. Freitag and Plassmann  [13] presented a local optimization method for mesh quality improvement which aims to maximize the sum of minimal angle of local influence mesh, and new node positions can be obtained by solving a non-linear system using an analogue of the steepest descent method. Instead of mesh quality, a node quality metric is chosen in  [14] and a combined gradient driven and simulated annealing technique is used to force each node to a better position. Zhang et al.  [15] proposed a feature preserving mesh quality improvement method, which moves each surface node in their tangent plane and relocates every inner node to the mass center of all its surrounding hexahedra to improve the aspect ratio. Vartziotis and Wipper  [16,17] proposed a geometric element transformation method (GETMe) for hexahedral mesh smoothing based on a dual element based regularizing transformation, in which low quality elements are sequentially transformed and new inner node positions are updated by averaging the transformed element nodes only if quality is improved. While local smoothing is simple and computationally efficient, it cannot guarantee the quality improvement of overall mesh.The most widely used global smoothing is global optimization-based method. In global optimization-based method, mesh quality improvement is performed by the minimization of a smoothed objective function, which is established based on different mesh quality metrics. The existing methods differ mainly in the quality metrics and minimization techniques used. In  [18], the condition number of Jacobian matrix is chosen to create global objective functions, and smoothing results can be obtained by conjugate gradient and line-search method. With the same objective function, Yilmaz and Kuzuoglu  [19] proposed a particle swarm approach based smoothing method to improve the overall mesh quality. Guerra  [20] presented a modified objective function of hexahedral meshes that depends on the shape matrix and a function used in tetrahedral mesh smoothing, and the global minimum with this modified objective function can be reached by Newton–Raphson method. While global optimization-based methods yield better results, they are computationally expensive and non-convergence occurs in some cases. In  [21], a physics-based smoothing method is used to improve the overall mesh quality, in which hexahedral meshes are deformed by resolving a linear system composed of global stiffness matrix. Physics-based smoothing method provides good results while it is only applicable to hexahedral meshes without poor quality. In addition, the space mapping technique is introduced to the improvement of the quality of tetrahedral and hexahedral meshes  [22].While hexahedral mesh smoothing methods considered only local smoothing or global smoothing, the smoothing operations often led to invalid quality improvements and non-convergence results. Additionally, most of hexahedral mesh smoothing methods did not take into account the effect of surface mesh quality on smoothing results, since the quality of surface meshes is one of the key factors that affect the improvement of the minimal element quality. In this paper, we proposed a local to global hexahedral mesh smoothing algorithm using the volumetric Laplacian. Instead of a local or global smoothing technique, our smoothing algorithm consists of geometric transformation based local regularization and global optimization using the volumetric Laplacian operator. The global optimization procedure is performed by the minimization of a quadric energy function, which is composed of volumetric Laplacian operator, transformed node displacements and geometric constraints of surface meshes.Contributions of this paper are summarized as follows:–An element size adjustment algorithm based on edge direction constraints and node position constraints is proposed to scale ideal elements produced by geometric transformation.The global volumetric Laplacian operator is used to stitch the regularized elements that can ensure the validity of smoothed hexahedral meshes.Geometric constraints of surface meshes are introduced to global optimization of hexahedral meshes that can highly improve the minimal quality of hexahedral meshes.Our hexahedral mesh smoothing algorithm is based on a local to global smoothing strategy, which consists of local hexahedron regularization and global optimization. Each individual hexahedral element is locally regularized by dual element based geometric transformation method. The geometric transformation has a strong regularizing effect, and meanwhile the size of the hexahedral element might also changes significantly. The size of the ideal element obtained by geometric transformation must be adjusted so that the regularized element keeps the size close to the initial one. In order to stitch the regularized elements together, we adopt the volumetric Laplacian operator in a global way and surface geometric constraints are also introduced to preserve the features of the original hexahedral meshes. The steps of our algorithm are described as follows:Step 1:Local regularization of hexahedral meshesFor each element of the input hexahedral meshes, performing the following steps:Step 1.1Transform the element to its corresponding ideal element by using dual element based geometric transformation method.Adjust the size of the transformed ideal element. Relocate the transformed ideal element nodes to minimize the distance to their corresponding nodes of the initial element without changing the edge direction of the ideal element.Global optimization of hexahedral meshesStep 2.1Compute the transformed displacement of each node in hexahedral meshes by averaging the temporary transformed displacements of each node.Extract the feature point constraints and normal constraints of the surface meshes in hexahedral meshes, and compute the normal of the normal constraints.Compute the displacements for all nodes by minimizing a quadric energy function, which is established by the global Laplacian operator, transformed node displacements and geometric constraints of the surface meshes.Termination controlStep3.1Compute the norm of the displacement vector calculated by step 2.3.Terminate if the norm of the displacement vector is below a given tolerance or maximal number of iterations reached. Otherwise go to step 1.In general, hexahedral meshes include hexahedral element, pentahedral element, and their combination. Hence, hexahedral and pentahedral elements are considered in our algorithm, and dual element based geometric transformation method is used to transform different types of elements to their ideal elements. Instead of the volume preserving method in GETMe, we proposed an element size adjustment method to scale the ideal element transformed by geometric transformation method.Given a hexahedral elementEjhex=(v1,j,…,v8,j)and a pentahedral elementEjpen=(v1,j,…,v6,j),vi,j∈R3is the nodes of the given elements, the node indices for different element types are described in Fig. 1. In order to illustrate the construction and transformation of dual element, we adopt the node matrices to represent all elements. The node index matrices of element faces can be defined as:Fhex=((1,2,3,4),(1,5,6,2),(2,6,7,3),(3,7,8,4),(4,8,5,1),(5,8,7,6))Fpen=((1,2,3),(1,4,5,2),(2,5,6,3),(3,6,4,1),(4,6,5)).The geometric transformation approach is based on the dual elements, which are generated by averaging the nodes of each face in different elements. The nodesOi,jof a dual element are calculated by:(1)Oi,j=1/|Fi|∑k=1|Fi|vF(i,k),ji=(1,…,|F|)whereF(i,k)is the element ofith row andkth column in node index matrix;|Fi|denotes the number of nodes in theith face and|F|is the number of element faces. For dual elements shown in Fig. 1, their node indices of element faces are given by:Ghex=((1,2,5),(1,3,2),(1,4,3),(1,5,4),(6,5,2),(6,2,3),(6,3,4),(6,4,5))Gpen=((1,2,4),(1,3,2),(1,4,3),(5,2,3),(5,3,4),(5,4,2)).The transformed element nodes can be generated by moving the base points along the normals of dual element faces, where the normalsni,jare oriented outward and can be defined as:(2)ni,j=(OG(i,2),j−OG(i,1),j)×(OG(i,3),j−OG(i,1),j)i=(1,…,|G|)where|G|denotes the number of dual element faces, which is equal to the number of element nodes. Suitable base points for regularizing transformation scheme are defined with different element types:(3){bi,j=1|Gi|∑k=1|Gi|OG(i,k),jifEj=Ehexbi,j(λ)=(1−λ)OG(i,1),j+1/2λ(OG(i,2),j+OG(i,3),j)ifEj=Epeni=(1,…,|G|)whereλis the weight of the midpoint of the edge opposite the triangular face apex, and it is deduced from the scaling factorμin  [17]. With a user defined scaling factorμ>0, the nodesvi,j′of the transformed elementEj′can be obtained by(4)vi,j′=bi,j+μ|ni,j|ni,ji=(1,…,|G|).The transformation for different types of elements is depicted in Fig. 2for the specific choiceμ=1. Here, the faces of dual elements are marked gray with blue edges, the base pointsbkare indicated by black markers, and the normalsnkby black arrows. The initial hexahedron is shown in Fig. 2(a) marked by red dotted lines, and its corresponding dual element in Fig. 2(a) is determined according to Eq. (1). Fig. 2(b) shows the transformed hexahedron marked by red dotted lines. Fig. 2(c) and (d) illustrate the transformation for a pentahedron. The red dotted lines in Fig. 2(c) shows the initial pentahedron, and the transformed pentahedron is shown in Fig. 2(d) by red dotted lines. As can be seen from Fig. 2, the transformation has a strong regularizing effect, which can transform a general hexahedral element to ideal element by consecutively applying the transformation three times. Since the transformation involves a scaling operation, the element size also changes significantly. Therefore, in order to keep the size of the initial element, we need to adjust the size of the transformed ideal element.Given an ideal elementEj′, our goal is to create another elementEj″with high quality which is as close as possible to the initial element. Thus, the size adjustment is formulated as a quadric optimization problem, where the minimized energy contains two terms, one is the edge direction constraints of the ideal element which keeps the high quality and the second is the node position constraints of the initial element which reserves the element size. First, we construct a direction preserving function for all edges, the node index matrices of element edges can be defined as:Ehex=((1,2),(2,3),(3,4),(4,1),(1,5),(2,6),(3,7),(4,8),(5,6),(6,7),(7,8),(8,5))Epen=((1,2),(2,3),(3,1),(1,4),(2,5),(3,6),(4,5),(5,6),(6,4)).For each edgeeE(k,1)E(k,2),j″=vE(k,2),j″−vE(k,1),j″of the elementEj″,k∈{1,…,|E|}, it is parallel to the edgeeE(k,1)E(k,2),j′=vE(k,2),j′−vE(k,1),j′of the ideal elementEj′, wherevi,j″=(xi,j″,yi,j″,zi,j″)∈R3is the nodes of the adjusted elementEj″. It can be formulized as:(5)(vE(k,2),j″−vE(k,1),j″)×eE(k,1)E(k,2),j′=0whereeE(k,1)E(k,2),j′=(ex,ey,ez)can be easily calculated from the ideal elementEj′. Eq. (5) can be written as:(6)[0ez−ey0−ezeyez0−ex−ez0exey−ex0−eyex0][xE(k,1),j″yE(k,1),j″zE(k,1),j″xE(k,2),j″yE(k,2),j″zE(k,2),j″]T=[000].Hence, the simultaneous equations of all edges can be obtained, which is equivalent to the matrix form:(7)KXE=0whereKis a3|E|×3|G|matrix;XE={x1,j″,y1,j″,z1,j″,…,x|G|,j″,y|G|,j″,z|G|,j″}Tis a3|G|×1column vector of the node positions of the elementEj″.In order to preserve the size of the initial element and keep the edge directions of the ideal element, the positions of all nodesvi,j″can be obtained by minimizing the following energy function:(8)minXE[θK2‖KXE‖2+∑i=1|G|‖vi,j″−vi,j‖2]whereθKis the weight of the edge direction constraints. The above function is quadric in every node and hence its partial derivatives are linear expressions. The unique minimum is found if all partial derivatives with respect to the node vanish, which results in a sparse linear system as the following:(9)AXE=(θKKS)XE=(0BS)=BwhereSis a3|G|-dimensional unit matrix used to constrain the position of element nodes;BSis a3|G|×1column vector representing the target positions given by the initial element. Eq. (9) can be solved through a linear least square system:(10)XE=(ATA)−1ATB.The construction of the regularized element for hexahedron is illustrated in Fig. 3. Fig. 3(a) shows the initial hexahedron, and its corresponding ideal hexahedron obtained by dual element based transformation withμ=2/3is plotted in Fig. 3(b) marked by red dotted lines. In Fig. 3(c)–(e), the final regularized hexahedrons indicated by black dotted lines are obtained by solving the sparse linear system in Eq. (9) withθK=1,θK=5andθK=10respectively. Fig. 4is a regularization example of pentahedron. In this example, the ideal pentahedron are constructed by Eq. (4) withμ=2/3marked by red dotted lines, shown in Fig. 4(b). The regularized elements are shown in Fig. 4(c)–(e) withθK=1,θK=5andθK=10respectively. In our experimentations, we found that the regularized elements are almost regular when we setθK≥5.Local regularization for all elements makes the hexahedral meshes disconnected, hence global optimization is used to stitch the disconnected hexahedral meshes, which is derived by solving a quadric energy function minimization problem. The energy function consists of three terms, including the volumetric Laplacian operator, transformed node displacements and geometric constraints of surface meshes. The volumetric Laplacian operator and geometric constraints of surface meshes represent the volumetric details and the surface details of hexahedral meshes. Transformed node displacements are used to maintain the regularity of all elements.LetM=(V,K)be the given hexahedral meshes we want to smooth, whereVis a set of nodesV={vi=(xi,yi,zi)∈R3|1≤i≤n}, andKis an abstract simplicial complex which contains all the node connectivity information. There are four types of elements inK, nodes{i}, edges{i,j}, faces{i,j,k}, and hexahedral elements{i,j,…,q}. The Laplacian coordinateδiat nodeviis defined as:(11)δi=LM(vi)=∑j∈N(i)ωij(vj−vi)whereN(i)is the index set of the neighboring nodes to nodevi,ωijis the weight of edge(i,j), andLMis the Laplacian operator of the given hexahedral meshes. The weightsωijshould be positive and several weighting schemes  [23–26] have been proposed by using uniform weightingωij=1/|N(i)|, edge length or other similar criteria. We use a more complicated weighting scheme proposed by Liao et al.  [27], which refers only to tetrahedral meshes. Hence we divide the hexahedral meshes into tetrahedral meshes without adding new nodes, i.e. a hexahedron is divided into five tetrahedrons, and a pentahedron is divided into three tetrahedrons. The weights for edge(i,j)in the divided tetrahedral meshes can be formulized as:(12)ωij=1/6∑k=1nlkcot(θk)wherelk=lpqis the length of opposite edge(p,q)to which edge(i,j)is against, andθk=θpqis the dihedral angle, as shown in Fig. 5.To avoid the generation of invalid elements and quality deterioration caused by uncoordinated displacements of individual nodes obtained by the average function in Section  4.2, we try to preserve the Laplacian coordinates during global optimization, which is equivalent to minimize the following energy function:(13)∑vi∈V‖LM(vi+Δvi)−δi‖2whereΔvi=(Δxi,Δyi,Δzi)∈R3is the node displacement ofvi, andδiis the Laplacian coordinate defined in Eq. (11) without rotation and isotropic scale. Note that the quadric energy function is defined for each component of the coordinatesx,yandz, whereas thex,yandzcoordinates are related with each other by a linear equation in geometric constraints described in Section  4.3. Thus the improvement conditions of all vertices in three coordinate components can be represented in matrix form:(14)‖LΔX‖2whereΔX={Δx1,Δy1,Δz1,…,Δxn,Δyn,Δzn}Tis a3n×1column vector of the node displacements, andLis a3n×3nmatrix with elements derived fromωij:(15)L(3i,3j)=L(3i+1,3j+1)=L(3i+2,3j+2){∑k∈N(i)ωik,ifi=j−ωij,ifj∈N(i)0,otherwise .LetE(i)⊆Mdenote the index set of all elements adjacent to nodevi. Local regularizations for elements inE(i)yield|E(i)|new temporary transformed element nodes for nodevi, where|E(i)|is the number of elements inE(i). For each nodevi, new target positionvi′=(xi′,yi′,zi′)is determined by a linear combination of the temporary transformed element nodes:(16)vi′=∑j∈E(i)αjvi,j″∑j∈E(i)αjwherevi,j″is the temporary node ofviin elementEj, andαjis the contribution of elementEj, which can be weighted by using its mesh quality:(17)αj=(1−J(Ej))whereJ(Ej)denotes the mesh quality of elementEjevaluated by the Scaled Jacobian metric proposed in  [28]. For a hexahedral elementEj=(v1,j,…,v8,j),vm,j=(x,y,z)∈R3ismth node in a hexahedron, here we use hexahedron to represent the unstructured mesh that consists of hexahedral and pentahedral elements. Thus, the three normalized edge vectors from themth node to three neighboring nodes are defined asemk=Nk−Nm(k=1,2,3). The Scaled Jacobian matrix at themth node isJm=[em1em2em3], and the value of Scaled Jacobian is the determinant of the matrixJm, as shown in Eq. (18).(18)ScaledJacobian(vmj)=det(Jm).The final Scaled Jacobian of the elementEjis the minimal value of the Scaled Jacobian at all nodes in hexahedron:J(Ej)=min(ScaledJacobian(vmj)),m=(1,…,8).In order to keep the regularity of all elements, we try to minimize the following energy function:(19)∑vi∈V‖vi+Δvi−vi′‖2which is equivalent to the matrix form:(20)‖TΔX−R‖2whereTis a3n×3nidentity matrix andRis a3n×1column vector of the transformed displacements of the initial nodevito the transformed nodevi′:R3i=xi′−xi,R3i+1=yi′−−yi,R3i+2=zi′−zi,i=(1,…,n).Surface meshes of hexahedral meshes represent the geometric features of the solid model, in order to keep the features of the given solid model during mesh smoothing, several feature nodes are first detected and all surface nodes are classified into two types of geometric constraints, i.e. feature point constraints and normal constraints. When a node is a normal constraint, it can only be moved in its tangent plane, while a feature point constraint node cannot be moved. Laplacian coordinates represent the local details of surface meshes  [29], hence feature points of the surface meshes can be determined quickly by Laplacian coordinates. In order to describe the local curvature features more accurately, we use an improved Laplacian coordinates based on mean value coordinates on tangent plane to detect the feature points  [30].LetMs=(Vs,Es,Fs)be the surface meshes of the given hexahedral meshesM, whereVs=(v1,…,vr)⊆Vis the index set of all surface nodes,Es⊆Kis the set of edges, andFs⊆Kis the set of surface element meshes. The adjacent node index set of nodeviare denoted byNs(i)={j∣(i,j)∈Es}, the number of adjacent nodes is called the degree of nodevi, and is denoted as|Ns(i)|. For each nodevj∈Ns(i), as shown in Fig. 6, the orientation distance to the tangent planeFiofvjcan be expressed as:(21)di,j=ni⋅vj+diwheredi=−ni⋅vi, andniis the unit normal vector of the tangent planeFi, which can be obtained by averaging the normal of elements adjacent tovi:(22)ni=1|Ns(i)|∑j=1|Ns(i)|njwherenjis the unit normal vector of the neighboring element ofvi.The improved Laplacian coordinateδsiat nodevi(1≤i≤r)is defined as follows:(23)δsi=ni⋅∑j=1|Ns(i)|λi,jdi,jwheredi,jis the orientation distance described in Eq. (21), andλi,jis the weight of edge(i,j), which is also known as mean value coordinates forviwith respect tovfj[31], wherevfjis the projection ofvion the tangent planeFi, as shown in Fig. 6.The length of Laplacian coordinateδsiis proportional to the mean curvature at nodevi, and the larger the length ofδsi, the greater is its mean curvature. Given a toleranceσ, if‖δsi‖>σ,viis a feature point constraint, and the displacement ofviis 0, i.e.Δvi=0; otherwise,viis a normal constraint which is constrained to lie on the tangent planeFi, and the displacement ofviis perpendicular to the normal of tangent plane, i.e.ni⋅Δvi=0. It can be formulized as:(24){Δxi=0Δyi=0if‖δsi‖>σΔzi=0ni⋅[Δxi,Δyi,Δzi]T=0if‖δsi‖≤σ.Thus the equations for all geometric constraints can be represented in matrix form:(25)CΔX=0whereCis ans×3nmatrix, ands=3×rd+rn, whererdis the number of feature point constraints andrnis the number of normal constraints. To preserve the geometric features of the given hexahedral meshes, we try to minimize the following energy function:(26)‖CΔX‖2.The displacements of all element nodes are obtained by minimizing the following sum of all energy terms:‖LΔX‖2+θT2‖TΔX−R‖2+θC2‖CΔX‖2whereθTandθCare the weights of node displacements and geometric constraints, which are used to balance these objectives. In general,θCis much larger thanθTto preserve the features of the given hexahedral meshes strictly.The above energy function is quadratic in every vertex, and the above energy minimization problem can be solved by a sparse linear system:(27)AKΔX=(LθTTθCC)ΔX=(0θTR0)=BK.The displacements of all nodes can be found by solving the sparse linear system:(28)ΔX=(AKTAK)−1AKTBK.In our local to global mesh smoothing algorithm, an iterative procedure is used to update the positions of all nodes. The iterative procedure is formulated as the following:(29){AKjΔXj=BKjXj+1=Xj+ΔXjwhereΔXjis node displacements ofjth iteration;XjandXj+1are the node positions ofjth and(j+1)th iterations; andBKjandAKjare known at the current iteration. During each iteration, all elements are regularized and the sparse linear system (27) can be obtained according to the node positions from the last iteration. The terminal condition for the iterative procedure is determined as:(30)‖ΔXj‖=13n∑i=13n(ΔXij)2≤εorj≥Nmaxwhereεis a given precision andNmaxis a given maximal number of iterations.

@&#CONCLUSIONS@&#
