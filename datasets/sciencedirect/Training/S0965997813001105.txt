@&#MAIN-TITLE@&#
Preserving isotropic element size functions in adaptivity, quadrilateral and hexahedral mesh generation

@&#HIGHLIGHTS@&#
We define a quantitative criterion to assess if an element meets a size function.We deduce a method to modify the initial size function using a non-linear equation.The new size function ensures that the elements preserve the prescribed size.Our method can reduce the number of iterations to converge an adaptive process.We show that quad and hex meshers better reproduce the initial size function.

@&#KEYPHRASES@&#
Mesh size function,Background mesh,Adaptive process,Quadrilateral mesh,Hexahedral mesh,Gradient-limiting,

@&#ABSTRACT@&#
It is well known that the variations of the element size have to be controlled in order to generate a high-quality mesh. However, it is not enough to limit the gradient of the size function to generate a mesh that correctly preserves the prescribed element size. To address this issue, in this work we define a criterion to assess when an element reproduces a size field. Then, using this criterion, we develop a novel technique to modify the initial size function by solving a non-linear equation. The new size function ensures that the elements will preserve the original size function. Moreover, an approximated method is developed to improve the computational cost of solving the non-linear equation. We use these techniques in two applications. First, we show that we can reduce the number of iterations to converge an adaptive process. Second, we show that quadrilateral and hexahedral meshing algorithms benefit from the new size function since it is not needed to perform a refining process to capture the initial size function.

@&#INTRODUCTION@&#
In many numerical analyses, such as adaptive calculations [1,2], it is of the major importance to generate a mesh that correctly preserves the prescribed element size. On the one hand, the final mesh has to capture areas where small element sizes are prescribed, since the element size is directly related to the accuracy of the final results. On the other hand, the final mesh has to correctly capture areas where large element sizes are imposed, in order to decrease the computational cost of the numerical simulation. That is, if the element size of the final mesh is too large it penalizes the accuracy of the solution, and if the element size of the final mesh is too small it penalizes the computational cost. Therefore, special effort has been focused on generating element size fields that facilitate the generation of the desired mesh [3–5].One of the most used techniques to define the element size consists in prescribing the values of a scalar function, the size function at the nodes of a background mesh. Then, these values are interpolated over the whole domain. For instance, this technique is used in adaptive simulations where starting with an initial mesh, a size function is determined at its nodes from the computed solution via an error estimate. Then, the original mesh is used as a background mesh to generate a new spatial discretization.Mesh generation techniques, like advancing front methods, benefit from size functions with good properties. Usually, it is required that the gradient of the size function is not large. However, we will see in this work that this property is not enough to generate a mesh that correctly preserves the size function. In addition, different mesh generation algorithms have different requirements on the size function. For instance, triangular and tetrahedral meshing algorithms [1,2,6] can easily follow the variations of prescribed size function, since they can be refined or de-refined where needed without generating low-quality elements. However, quadrilateral and hexahedral meshes [7,8] cannot be easily refined or de-refined. For this reason, quadrilateral meshing algorithms may miss small regions where a small element size is prescribed. If this is the case, the analysis may lead to inaccurate results.Current techniques, such as the gradient-limiting algorithms [9–12], modify a given size function by limiting its gradient. Thus, ratio of neighboring element sizes is bounded and it is easier for any mesh generator to provide a high-quality mesh with smooth variation of the element size. However, the final mesh may still not correctly reproduce the initial size function. For instance, if an element size is prescribed in a given area, this area has to be large enough to hold at least one element of that size. Thus, it is still necessary to develop some techniques that, given a prescribed element size field, modify it in such a way that a mesh generation algorithm can provide a discretization that verifies the initial size field.The main contribution of this work is to introduce the new concept of size-preserving size function. The main idea behind this concept is to compute a new size function by solving an implicit and non-linear equation such that: 1. it ensures that all the elements are smaller or equal to the prescribed element size; and 2. the maximum gradient of the new size function is limited. In addition, we propose an implementation to solve the implicit and non-linear equation that states a size-preserving size function. However, the generation of an exact size-preserving size function is expensive. To reduce the computational cost, we also propose to compute an approximated size-preserving size function. However, the approximated method does not ensure that the original function is preserved. In fact, we show that it can be interpreted in terms of the gradient-limiting technique presented in [12].The main advantages of size-preserving size functions is that the new size function allows that the final mesh contains the features and the small element sizes of the initial size function. This is of major importance in several applications. For instance, quadrilateral and hexahedral mesh generators benefit from this new size function since these types of meshes are more difficult to refine or coarsen. In addition, the new size function can reduce the number of iterations needed to converge an adaptive process, since we do not need additional iterations to properly reproduce the size field.The outline of this paper is the following. First, in Section 2, we survey previous work on modifications of size functions for mesh generation and adaption. In Section 3, using a one-dimensional example we motivate this work and introduce the basic definitions. In Section 4, we deduce the size-preserving method and analyze its properties. In Section 5, we detail how to generate a size-preserving size function. In Section 6, we present the simplified approach to reduce the computational cost of generating the new size function. Finally, several examples are presented to illustrate the capabilities of the presented techniques, see Section 7.

@&#CONCLUSIONS@&#
In this paper, we have presented two new methods for computing good element size functions. They modify the original size function, and allow any mesh generation algorithm to generate meshes that preserve the original size function. For this reason, they facilitate the generation of quadrilateral and hexahedral meshes, since it is not required to refine them to reproduce the initial size function. Moreover, these methods can potentially reduce the number of iterations of an adaptive process, since the prescribed size field is correctly reproduced in each iteration.The first method, called size-preserving size function, depends on two parameters. It computes the size-preserving size function by solving a non-linear equation. The proposed algorithm modifies the size function at each node of a background mesh ensuring that an element can be held in that area and, at the same time, limits the maximum gradient of the new size function. We have shown that to generate a mesh that preserves the original size function, it is recommended to use β⩽1 and α⩾β.In the second method, we simplify the size-preserving approach in order to obtain a new size function with faster computational times while obtaining similar properties. To this end, we decouple the calculation of the measure of local minima in the element size area of the maximum gradient allowed using two parameters. We have shown that to generate a mesh that preserves the original size function, it is recommended to use δ⩾1 and ε⩽1.The results obtained with the size-preserving method using a parameter α are of equivalent accuracy as the ones obtained with an approximated size-preserving size function using parameters δ=2α and ε=1/α. However, it is not guaranteed that the meshes generated using an approximated size-preserving method correctly preserve the initial size function. For this reason, in some cases it is better to use the size-preserving technique, although the computational requirements are higher. Note that the proposed algorithms to compute the size-preserving and the approximated size-preserving size functions can be directly applied to meshes of any dimension.Several aspects of the proposed method can be extended in the near future. For instance, we use an edge-based solver to compute the new size functions. Although more expensive from the computational point of view, it could be interesting to analyze the solutions provided by Hamilton–Jacobi solvers, since they are more accurate. In addition, the ideas presented in this work can be extended to anisotropic size fields. This implies to work with an anisotropic metric, and modify some aspects of the proposed algorithms.