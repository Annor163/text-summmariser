@&#MAIN-TITLE@&#
M-GREEN: An active queue management mechanism for multi-QoS classes

@&#HIGHLIGHTS@&#
We proposes a QoS AQM mechanism, M-GREEN, for multi-QoS classes.It extends the concept of “Random” in RED to “Global Random”.It extends the concept of “Early Detection” in RED to “Early Estimation”.It extends the “linear” concept of RED to an “exponential” one.

@&#KEYPHRASES@&#
Active queue management,Quality of service,Random Early Detection,Global Random Early Estimation for Nipping,

@&#ABSTRACT@&#
This paper proposes a QoS active queue management (AQM) mechanism for multi-QoS classes, named as M-GREEN (Global Random Early Estimation for Nipping), which includes the consideration of QoS parameters and provides service differentiation among different flows/classes. M-GREEN extends the concept of “Random” and “Early Detection” in RED to “Global Random” and “Early Estimation,” respectively. Furthermore, M-GREEN extends the “linear” concept of RED to an “exponential” one to enhance the efficiency of AQM. For performance evaluation, extensive numerical cases are employed to compare M-GREEN with some popular AQM schemes and to show the superior performance and characteristics of M-GREEN. Consequently, M-GREEN is a possible way to provide the future multimedia Internet with differential services for different traffic classes of diverse QoS requirements.

@&#INTRODUCTION@&#
Demand for multimedia services is the inevitable trend in the future. Hence, the Internet of the future will distribute multimedia traffic, which requires diverse quality of service (QoS). Consequently, multimedia distribution poses a challenge to the Internet. The QoS issues and standards about the Internet have been addressed in IntServ [1] and DiffServ [2]. A possible architecture suitable to the current Internet is depicted in Fig. 1 of [3], where the InterServ is applied to LAN (or intranet) and the DiffServ to WAN (or the Internet). Owing to the problem of scalability of IntServ, DiffServ is more suitable for the Internet, at least in the near future. The end-to-end QoS for providing QoS, except the original flow control, e.g. [4], the resource management is the main task [5]. Two control mechanisms are usually employed and studied, i.e., scheduling algorithms for multiple queues, e.g., [6,7], and active queue management (AQM) schemes for a common buffer discussed in this paper.In the past two decades, many researchers used AQM to improve the performance, e.g., Early Random Drop (ERD) [8,9], Random Early Detection (RED) [8,10] and its variants [11–15], REM [16,17], GREEN [18–20], BLUE [21], AVQ [22], CHOKeW [23] and so on. Control theory is also applied to the AQM, e.g. [3,24,25]. Owing to the popularity of RED, many scholars developed the variants of RED, e.g., [11] used average delay instead of average queue length, LRED [12] used loss ratio, SBAQM [13] used input and output rates, WRED [14] used two sets of parameters of RED, and ARED [15] automatically adapted the parameters of RED. Moreover, BLUE [21] used loss ratio and link utilization jointly; REM (Random Exponential Marking) [16] used rate and queue length jointly; REM (Random Early Marking) [17] based on the PI algorithm [25] and fed the queue occupancy into the PI algorithm to determinate the probability of marking an incoming packet as out, like WRED. Our work GREEN (General Random Early Estimation for Nipping) [19] first introduced the parameters of QoS into the AQM and extended the early detection of RED to early estimation. In this way, GREEN tried to satisfy the QoS requirements of users and to make the nipping decision earlier. Later, two algorithms with the same name GREEN are proposed. The GREEN (Generalized Random Early Evasion Network) [18] improved the fairness by way of estimating the dropping probability. The other GREEN [20] adjusted the rate of congestion notification by the estimated data arrival rate, which in fact is a special case of REM [16]. On the other hand, an AQM with another approach, named AVQ (adaptive virtual queue) [22], regulates the utilization instead of the queue lengths or the average queue lengths in the above AQMs. Furthermore, a novel algorithm named CHOKeW [23] was developed to make a dropping decision by statistics instead of a probability function, which is the general basis of most AQM algorithms. In CHOKeW, the number of packets in the queue is assumed to form an enough statistics. When a packet arrives at the queue, some packets (depending on a weight assigned to the flow of the arrival) are selected from the queue in sequence and the flow id of the arrival is compared with those of the packets selected. When the two ids are matched, both packets are dropped. In this way, CHOKeW can provide the service differentiation. The literatures of AQM are flourishing. We are not able to and do not intend to do a complete survey. Interested readers can refer to some survey papers, e.g., [26,27].The AQM mechanisms can be roughly classified along two dimensions: when the packet discard decisions are made and what information is used [26]. On the other hand, the authors think that the design issues can be widely considered in detail as follows:1.The network statuses for judging congestion;The events to trigger the AQM;The choice of packet (or connection) to be punished;The punishment of a violated packet, e.g., dropped or marked.For example, ERD and RED used (average) queue length as the judging criterion and used the event of (average) queue length greater than a certain threshold to trigger the AQM.This paper proposed the M-GREEN algorithm, which considered multiple QoS classes that are the key factors of the future Internet. According to the popular AQMs in the past and combining our points of view discussed above with the dimensions mentioned in [26], the design issues of an AQM can be divided into two major classes. One is the consideration of “Early or not” and the other is the consideration of “Random or not”. “Early or not” means that the suitable time to execute the selection of a violated packet should be either “before” or “just at” the time of buffer full. It actually integrates the design issues 1 and 2 mentioned above. “Random or not” means that a selected packet should be punished either “randomly” or “surely”. It integrates design issues 3 and 4 mentioned above. If “Early” is used, it cannot avoid using “Random”, because it is unreasonable to surely punish packets when the buffer resource is not yet exhaustive. Unfortunately, it is possible for RED, because the average queue length used in RED may be greater than the maximum threshold even when the buffer is not yet full. A large threshold can be assigned in RED to avoid this phenomenon, but how to assign a suitable value is not an easy task.Furthermore, although some cell-based AQMs, e.g., EPD (early packet discard) [28], may discard packets “early” and “surely”, they are different from the packet-based schemes in terms of “level”. EPD discards the entire packet surely, if any cell of the packet has been discarded such that the corresponding cells of the packet become useless, even though the buffer is not full (early). EPD operates at the “cell-level”, but the packet-based schemes operate at the “packet-level” and are not suitable for discarding a packet “early” and “surely”. Therefore, it is obvious that “Early” implies “Random” for a packet-based AQM. Similarly, “Random” implies “Early”, because, if the buffer is full, the new packet is dropped surely, and not randomly. Consequently, the combination of “Random” and “Early” is the main stream of AQM. It started from ERD and was enhanced in RED and GREEN.Therefore, M-GREEN adopted the main stream as that in GREEN [19] and modified the core of nipping probability in GREEN. Especially, M-GREEN provided differential services for different traffic classes with diverse QoS requirements to achieve the target that makes the future multimedia Internet come true.The rest of the paper is organized as follows. The proposed AQM M-GREEN is described in detail in Section 2. Section 3 evaluates the performance of M-GREEN and provides extensive numerical examples to illustrate the characteristics and the advantages of M-GREEN. Finally, some concluding remarks and future works are given in Section 4.The philosophy of GREEN [19] is applied to M-GREEN. Furthermore, M-GREEN modified some defects of GREEN, which include the utilization estimation and the entropy probability. Except that, M-GREEN provides the service differentiation by way of the QoS requirement of users and the nipping thresholds. M-GREEN uses Global Random and Early Estimation for Nipping packets just the same as GREEN [19]. GREEN extends the random feature to a global random that considers not only the network statuses but also the QoS requirements. Furthermore, GREEN extends Early Detection to Early Estimation, which uses the variations of network statuses to estimate the future statuses. Using estimation in AQM is first seen in our paper [19] and then in SBAQM [13]. By Early Estimation, GREEN can get the information of network statuses earlier than Early Detection and can speed up the decision-making. Other advantages and naming philosophy of GREEN can be referred to [19].The following will present the M-GREEN algorithm and show how Global Random and Early Estimation are employed in the algorithm. First the system model and notations are described. The system consists of a common buffer with size K and an output link with bandwidth capacity B. There are M QoS classes in the input traffic and the QoS class-i, i=1, …, M, is described by loss requirement l[i] and delay requirement d[i]. For IntServ, a class contains only one flow, and for DiffServ, a class generally contains more than one flow. The QoS requirements may be specified in the call setup phase for connection-oriented traffic or assigned by the user/ISP (Internet Service Provider) for connectionless traffic. Some details of these issues will be given in the next sub-section. In M-GREEN, the queue length q is compared with the nipping threshold Tn[i], like ERD, but unlike RED. When the queue length is beyond Tn[i], the arriving packet may be nipped according to the nipping probability Pn. The nipping probability function is the quintessence of M-GREEN and is developed from the properties of “Global Random” and “Early Estimation”. The subscript “n” of Tn[i] and Pnstands for “nipping”.The Global Random property of M-GREEN is exhibited at the components of nipping probability, which consists of not only network statuses (e.g. queue length and link utilization) but also QoS requirements (e.g. delay requirement and loss requirement). The former (network status) was commonly used in AQM, while the latter (QoS requirement) becomes more important in the future Internet. There are three network statuses used in M-GREEN: queue length q, network utilization u, and count of un-nipped packets after the last nip cp[19], where the subscript p stands for “packet.” Combined with the property of “Early Estimation,” the queue length and the utilization evolved to a probability Pecalled entropy probability, where “e” stands for “entropy”. The Peis similar to the initial probability pbin RED and derived later. In order to make the number of packets between two marked packets uniform, the marking probability is derived by taking the count of unmarked packets into account in [8]. This scheme will also be used in M-GREEN. Consequently, there is a term Pt(subscript “t” for “temporary”) that contributes to M-GREEN and is expressed by [8,19](1)Pt=Pe_pre/1−cpPe_prewhich is modified from pb/(1 — count pb) in RED. Note that Pe_preis a re-calculated entropy probability, which comes from the property of Early Estimation (described later). One more thing to clarify is that the philosophy of the expression of notations in this paper uses a subscript to denote different types of the same kind of parameter, e.g., Pnand Pe, and uses brackets to denote different QoS classes of traffic, e.g., d[i] and l[i].Naturally, to nip a packet or not should depend on QoS criteria. For example, a packet of real-time traffic with delay over its delay requirement should be nipped, because it is invalid even if it arrives at the destination. In this way, the buffer resource and even the bandwidth resource will not be wasted for those invalid packets, then the system goodput (the valid throughput seen by a higher layer) can be increased. Here, M-GREEN considered two QoS parameters: delay requirement and loss requirement [19]. For delay requirement, the queueing delay q/B of the arriving packet will be compared with the delay requirement of the class corresponding to the arriving packet. If the queueing delay q/B is greater than the delay requirement, it means that the delay requirement cannot be satisfied and the arriving packet is nipped. Similarly, for the loss requirement, a hypothetical loss ratio will be compared with the loss requirement. The loss ratio is obtained by a weighted moving average (e.g., [8]) and by assuming that the arriving packet is nipped. If the arriving packet belongs to class-i, then the hypothetical loss ratio for class-i, denoted by Rh[i], is expressed as(2)Rhi=wliL/L+cui+1−wliRliwhere wl[i] is the weight of class-i for obtaining the loss ratio, L is the length of the arriving packet, cu[i] is the count of accumulated amount (in length unit, e.g., byte, so subscript “u” for “unit”) of continuous un-nipped class-i packets, and Rl[i] is the loss ratio at the last drop of packet for class-i. The subscript h of Rh[i] stands for “hypothetical” and subscript l of wl[i] and Rl[i] stands for “loss.” If the loss requirement is greater than or equal to the hypothetical loss ratio, i.e., the loss requirement is still satisfied, then the arriving packet can be nipped if necessary. On the contrary, when the loss requirement cannot be satisfied, the arriving packet should not be nipped if possible. In LRED and BLUE, the loss parameters are also employed in their algorithms, but they are different from that in GREEN. In LRED, the loss ratio is estimated periodically by moving average and employed to calculate the dropping probability, which increases with the increase of loss ratio. In BLUE, the dropping probability increases when a packet drops due to buffer overflow. In M-GREEN, the hypothetical loss ratio is obtained by moving average when a packet arrives at and compared with loss requirement to participate in the nipping (dropping or marking) decision.Consequently, the nipping probability can be expressed as(3)Pn=maxUq/B−di,minmax(−1)Upt,Pt,1Uli−Rhiwhere U(x) is the unit step function defined as U(x)=0 if x<0 and U(x)=1 if x≥0. The two unit step functions are arranged to make the nipping probability equal to 1 when the delay requirement is not satisfied (q/B≥d[i]) or equal to 0 when the delay requirement is met (q/B<d[i]) and the loss requirement is not satisfied (Rh[i]>l[i]). If both requirements are satisfied, the nipping probability depends on the term Ptof Eq. (1), which however may be negative or greater than 1 for some large cp. The same thing did also happen in RED, i.e., pb/(1 — count pb) may be negative or greater than 1 for some large count. Therefore, M-GREEN assigns Ptto be 1 if Pt>1 or Pt<0, which results in the min–max function in Eq. (3).The Early Estimation property of M-GREEN is achieved by pre-calculating some parts of the nipping probability function. Those parts make up the entropy probability Pein Eq. (1), which represents the normalized entropy of a network. If a network is with larger entropy, the arriving packets should be nipped with a larger probability to lower the entropy. The entropy is in terms of the network statuses, including the buffer occupancy and the link utilization. For the purpose of Early Estimation, the entropy will be obtained by estimation. In the aspect of buffer occupancy, a queue length variation Δq is estimated by moving average with weight wqand expressed by(4)Δq←wqq−qpre+1−wqΔqwhere qpreis the queue length seen by the previous entering packet. The arrow represents the recursive relation between a new Δq and a previous Δq, like a common use of [8, (1)]. By using(5)s=max0,K−q+Δqto estimate the space left at the next packet entering time, a component 2−⌈sN/K⌉ contributes to Peto indicate that the nipping probability should be larger, if the (estimated) space left is smaller. The term N is called grid number and is employed to make the effect of exponent of 2 significant. Specifically, because 2−sis still too small for small s to efficiently nip packets and 2−⌈sN/K⌉ is generally larger than 2−s, 2−⌈sN/K⌉ is employed instead of 2−s. For example, when N=20, K=100,000 (bytes), and s=1000 (bytes), we have 2−⌈sN/K⌉=0.5 and 2−s≈0. The space left can only accommodate one packet more, but the nipping probability is still almost 0 if 2−sis employed. Furthermore, the increasing rate of this component is exponential, rather than linear as pbin RED [8]. Here the exponential function of 2 is used for two merits, which are faster increasing rate and easier implementation. When the queue length increases so as to cause buffer space critical, the increasing rate of an exponential function is faster than that of a linear function and can reduce the congestion faster. Furthermore, the exponent of 2 can be implemented easily by shift registers. A similar concept of exponential function is utilized in REM [16]. However, the marking probability of [16, (4)] is intentionally designed to make the end-to-end marking probability [16, (5)] elegant, which is different from the purpose of Eq. (5).In the aspect of link utilization, the entropy probability should be larger for larger link utilization in order to nip the arriving packet with larger probability. The link utilization can be found by(6)u=LT/BTwhere LTis the total length of departure packet in time window T=[A−T, A], and A is the time of an observation point that is the arrival time of an arriving packet. However, in this way, M-GREEN should trace the system state to know when the system is idle or busy and how long the periods are. It induces much complexity, so we develop a method to estimate u recursively when a packet enters into the buffer. The utilization is estimated during the time window T before the departure time, instead of arrival time, of the arriving packet. The estimations of u and LTare done by shifting (advancing) the time window T by the amount of an inter-departure time. In the case that the packet arrives during a busy period, the inter-departure time is the service time of the arriving packet L/B and the shift results in decrease in LTby the amount uB(L/B), so we have(7)LT←L+LT−uBL/B=LT+1−uL.On the other hand, when the packet arrives during an idle period, the shift time is equal to the inter-departure time A+L/B−I, where the start time of the idle period I is the departure time of the previous packet and A+L/B is the departure time of the arriving packet with arrival time A, so we have(8)LT←L+max0,LT−uBA+L/B−I=L+max0,LT−uAB+L−IB.Note that, if the idle period (A−I) is large, the estimated remaining packet length LT−uB(A+L/B−I) may be less than 0. A negative remaining packet length should be avoided, so the max operator is included in Eq. (8).According to the factors mentioned above, the entropy probability can be expressed by(9)Pe=2−sN/KuorPe_pre=2−sN/Ku.Note that this entropy probability is used for the next arriving packet, so the Pe_pre, rather than Pe, is used in Eq. (1). It is the true essence of “Early Estimation,” and it can speed up the decision-making. The core of Eq. (1), i.e., the Pe_pre, is ready when a new packet arrives at. The new Pe_pre, i.e., the Pe, is calculated in parallel when the arriving packet is entering the buffer, so it will not influence the decision-making at the current time.The overall M-GREEN algorithm is described in Fig. 1, where nipping a packet means dropping the packet for simplicity. The min–max function in Eq. (3) is implemented by an if-test and Eq. (3) is also implemented by logical comparisons, rather than by functions. Note that, because the loss ratio Rh[i] is hypothetical by assuming that the arriving packet is dropped, Rh[i] will not replace Rl[i] until a packet is really nipped. At the beginning, the initial values of system parameters (wl[i], K, Tn[i], T, B, wq, N) and QoS parameters (l[i], d[i]) are given and the initial values of system variables (cu[i], Rl[i], q, Pe_pre, cp, LT, u, I, q pre, Δq) are set to be 0.In M-GREEN, some system parameters should be configured beforehand. Fortunately, it is not a hard task. First, two weights for moving averages of loss ratios and queue length are needed. This task is the same as those in [8,14,15], where there are no theoretical suggestions and optimal values. However, the numerical results from [19] and from Case 2 in the next section reveal that M-GREEN is stable in a wide range of these two parameters. That is, the values of these parameters can be chosen easily. The second task is to choose the nipping thresholds. It is the parameter to make bandwidth differentiation (Case 6 in the next section). The role of nipping thresholds for different classes is to provide the differentiated service rather than the absolute service, so the setting philosophy is to provide the relative relation and it is easily done to get a good performance (see Case 6). The third task is to set the time window T for estimating utilization. Because it is impossible to use an infinite time window, a large enough T is used instead. Nowadays, the speed of backbone is with the order of Gbps or 108bytes per second, so a time window of 0.1s is large enough. Finally, with regard to the grid number N (Case 1 in the next section), it should be set to make the exponential function (Eq. (9)) work. If N is too large, the early nipping will not work. On the other hand, if it is too small, the early nipping probability will be larger. From our experience, set N to be 20 and to have the nipping probability between 2−20 and 1 is good enough.Moreover, to provide QoS, the distribution of QoS parameters is an important issue. In the Internet, the end-to-end service provision cannot be obtained just by a distributed QoS mechanism. It needs the cooperation of some kinds of centralized management mechanisms, e.g., call admission control (CAC) and signaling protocols like RSVP [29] or COPS [30]. Although the distribution of QoS parameters is still an open issue, this does not mitigate the importance of QoS AQM. This paper puts focus on the AQM mechanism in a distributed manner, so it will not provide the deep specification of how to get the end-to-end QoS. However, we still provide a possible and simple approach to distribute the end-to-end QoS parameters to the distributed AQM mechanism of every node.The distribution of QoS parameters depends on the CAC, the signaling protocol, and the routing protocol. To perform a successful distribution needs a complete study on these fields, which is beyond the scope of this paper, so this paper describes this issue from another point of view. We describe the possible approach from two dimensions: the transmission mode and the granularity. There are two transmission modes: the connection-oriented, e.g., TCP, and the connectionless, e.g., UDP, and there are two different granularities: per-flow and per-class. The distribution of QoS parameters for the connection-oriented mode can be done during the call setup phase and is easier than that for the connectionless mode. However, there are still two problems. One comes from the connectionless property of IP, which causes non-fixed paths, and the other is how to share “duties” (loss and delay) among the nodes along the routing path. The first problem may be solved by using a fixed-path routing, e.g., the source routing. It is just a possible solution. The perfect solution still needs further researches. The second problem, duty-sharing, can be done by an easy way to share the duty fairly among the nodes. This should be assisted by fixed-path routing; otherwise it will face another problem that the nodes along the path are not fixed. Another complicated solution involves the IP header. The QoS parameters are recorded in the IP header and are then checked and modified at each node. For example, the delay requirement can be put into the IP header and the AQM mechanism at each node will check whether the delay requirement is satisfied or not. If it is satisfied, the value is modified before the departure of the packet. For the connectionless transmission mode, the task to distribute the QoS parameters is not easy. Two ways can be used: One is, as described above, to put the parameters in the IP header; and the other is to pre-assign the duty-share to a node, then the node can provide some kind of treatment for some kind of traffic. However, they still cannot solve the problem of QoS distribution completely. The perfect solution still needs further study.From the other dimension — granularity, the per-flow-based is with meticulous granularity and the per-class-based is with coarse granularity. The more meticulous the granularity is, the easier the QoS distribution is. In the per-class-based, the end-to-end QoS requirements may be different for different flows in a same class. Consequently, the per-flow-based can distribute the QoS parameters of a flow exactly, but the per-class-based can only distribute the “common” QoS parameters of the flows in a class, e.g., the minimum, the maximum, or the average value of the QoS parameters of all the flows in a class. In our proposed AQM M-GREEN, a QoS class is relative to a flow for the flow-based and to a class for the class-based.Another implementation issue is the complexity. Here, M-GREEN is compared with the most popular and the easiest RED to show that the Early Estimation property makes M-GREEN compete with RED at the decision-making instant. When a packet arrives to trigger the decision-making, there are two main differences between the kernels of M-GREEN and RED. The first difference is that M-GREEN needs to calculate the hypothetical loss ratio Rh, while the average queue length is calculated in RED. In M-GREEN, the calculation of Rhneeds two additions, one subtraction, two multiplications, and one division. For RED, calculating the average queue length at least needs one logical comparison. If the queue is nonempty, it needs one addition, one subtraction, and two multiplications more. If the queue is empty, it needs two subtractions, one multiplication, a linear function and a power function more. The second difference is that M-GREEN needs to find the nipping probability Pn, while RED needs to find the marking probability pa. To find the nipping probability by Eqs. (3) and (1) in M-GREEN (refer to Fig. 1) needs one subtraction, one multiplication, one division, and four logical comparisons. To find the marking probability in RED [8, p. 401] needs three subtractions, two multiplications, and two divisions. Consequently, RED needs one more addition/subtraction and one more multiplications/divisions for nonempty queue than M-GREEN does; M-GREEN needs three more logical comparisons than RED does. However, RED additionally needs a linear function, a power function, and one more addition/subtraction for empty queue. In a word, M-GREEN that considers multiple QoS classes can compete with RED in terms of complexity. In addition to the computation complexity, the packet classification is needed for M-GREEN. It is easy for DiffServ by way of checking the DSCP (DiffServ code point). For IntServ, the only way is the check of the address–port pair, whose complexity is the same for all AQMs of IntServ.

@&#CONCLUSIONS@&#
