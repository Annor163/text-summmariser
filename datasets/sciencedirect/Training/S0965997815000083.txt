@&#MAIN-TITLE@&#
Two-dimensional colliding bodies algorithm for optimal design of truss structures

@&#HIGHLIGHTS@&#
A new version of the CBO algorithm is presented for optimization of truss structures.For improving the performance of the standard CBO, a memory is added to the CBO.This addition increases the exploitation ability and convergence rate of the algorithm.Comparative studies illustrate the superiority of the 2D-CBO algorithm.

@&#KEYPHRASES@&#
Two-dimensional colliding bodies optimization,Mathematical functions,Truss structures,Improved CBO,No parameter tuning,Continuous variables,

@&#ABSTRACT@&#
This paper focuses on the new version of a recently developed meta-heuristic algorithm, Colliding Bodies Optimization (CBO), and its utility for optimization of truss structures. The idea of the standard CBO is derived from one-dimensional collisions between bodies, which does not use the internal parameter and memory in its formulation. However, the exploitation phase of the CBO is weak due to not using a memory for saving the best-so-far solution in its formulation. Here, in the two dimensional version of CBO, denoted by 2D-CBO, a memory is added to the standard CBO formulation to improve the performance of the latter algorithm. This addition increases the exploitation ability and convergence rate of the CBO. Comparative studies illustrate the superiority of the 2D-CBO algorithm compared to those previously reported in the literature.

@&#INTRODUCTION@&#
Although the development of meta-heuristic algorithms within the framework of evolutionary algorithms (EAs) has been successful in the recent years, the development of more efficient algorithms for minimizing the construction cost and evaluation efforts is still a challenging subject in the field of optimization of engineering problems. The existing algorithms have often two phases: exploration of the search space and exploitation of the best solutions found. Apparently, one of the main problems in developing an efficient meta-heuristic algorithm is to keep a reasonable balance between the exploration and exploitation abilities [1–3].Some of the algorithms based on natural evolution phenomenon are developed in [4–8]. Colliding Bodies Optimization (CBO) belongs to a family of meta-heuristic algorithms which recently developed by the authors [9]. This algorithm can be considered as a multi-agent method, where each agent is a Colliding Body (CB). Each CB is considered as an object with a specified mass and velocity before the collision. After collision occurs, each CB moves to a new position according to the new velocity. Simple formulation and no internal parameter tuning are advantages of this algorithm. On other hand, the exploitation phase of this algorithm is weak due to not using a memory for saving the best-so-far solution in its formulation (i.e. the best position of agents from the previous iterations).The present study develops an algorithm based on two dimensional collision laws. In this algorithm, the saved memories, i.e. the agents with best values, is been added to CBO. In fact, the bodies move toward the best saved agents and therefore it increases the exploitation.The optimization problem can formally be stated as:(1)FindX=[x1,x2,x3,…,xn]to minimizeMer(X)=f(X)×fpenalty(X)subjected togk(X)⩽0,k=1,2,…,mxjmin⩽xj⩽xjmaxwhere X is the vector of design variables with n unknowns, gkis the kth constraint from m inequality constraints and Mer(X) is the merit function; f(X) is the objective function. Also, xjminand xjmaxare the lower and upper bounds of variable vector, respectively. fpenalty(X) is the penalty function which transforms the constrained optimization problem into an unconstrained one as follows:(2)fpenalty(X)=1+γp∑k=1mmax(0,gk(x))where γpis penalty multiplier. In this study the value of γpstarts from unity and linearly increases to 2 for all examples. The objective function for optimization problems of truss structure is expressed as:(3)f(X)=∑j=1nmρjljAjwhere ρjis the material density of member j; ljis the length of member j; Ajis the cross-sectional area of member j; and nm is the number of variables which is naturally affected by the element grouping scheme which in turn is chosen with respect to the symmetry and practical requirements.The present paper is organized as follows: In next section, two dimensional collision laws are briefly introduced. The new method is then presented, followed by a section consisting of the study of optimization of two mathematical constrained functions and three truss structural optimization problems. Conclusions are derived in the final section.Since our purpose in this paper is to achieve the known physical equations in formulation of an optimization algorithm, this section briefly describes the mathematical formulation of elastic collision law between two bodies in two-dimensional space. Consider the model of a collision, where one body with mass m1 and velocity V1 moves toward to second body with mass m2 which is at rest (Fig. 1). It should be noted that if the velocity direction of first body be coincident with the direction of center of bodies (α=π), then the collision is one-dimensional, otherwise it is two-dimensional.The velocity and direction of bodies are derived using the conversation laws of momentum and energy. When a two-dimensional collision occurs in a laboratory system, the total momentum of the system in each direction is conserved (Fig. 2). The directions of velocity of bodies after collision are expressed as:(4)tanϑ1=m2sinθm1+m2cosθ,ϑ2=π-θ2where ϑ1 and ϑ2 are the directions of the velocities of the first and second body after impact, respectively, m1 is the mass of the first object, m2 is the mass of the second object, and θ is the angle through which the direction of motion of the first object is turned [10] (Fig. 2). The magnitudes of the velocity of bodies can be expressed by the following equations:(5)V1′=m12+m22+2m1m2cos(θ)m1+m2V1,V2′=2m1m1+m2sinθ2V1whereV1′andV2′are the final velocities of the first and second object after collision, respectively [10].Inspired by the natural features of the standard CBO algorithm, we describe its new version in this section. In the following, the standard CBO is briefly introduced and the main new method is followed.The standard Colliding Bodies Optimization (CBO) is based on momentum and energy conservation law for 1-dimensional collision [9]. The momentum and energy conservation law provide the magnitude of the separation velocities of two colliding bodies after collision. According to this law, the velocities of two bodies after a one-dimensional collision can be obtained as:(6)v1′=(m1-εm2)v1+(m2+εm2)v2m1+m2(7)v2′=(m2-εm1)v2+(m1+εm1)v1m1+m2where v1 is the velocity of the first object before impact, v2 is the velocity of the second object before impact,v1′is the velocity of the first object after impact,v2′is the velocity of the second object after impact, m1 is the mass of the first object, m2 is the mass of the second object, ε is thecoefficient of restitution (COR) of two colliding bodies, defined as the ratio of relative velocity of separation to the relative velocity of approach [10].This algorithm contains a number of Colliding Body (CB), where each one is treated as an object with specified mass and velocity, colliding to others. After collision, each CB moves to a new position with new velocity compared to old velocities, masses and coefficient of restitution. CBO starts with a set of agents which are determined with random initialization of a population of individuals in the search space. Then, CBs are sorted in ascending order based on the value of the considered cost function (see Fig. 3a). The sorted CBs are divided equally into two groups. The first group is stationary and consists of good agents. This set of CBs is stationary and velocity of these bodies before collision is zero. The second group consists of moving agents which move toward the first group. Then the better and worse CBs, i.e. agents with upper fitness value of each group will be collided together to improve the positions of moving CBs and to push stationary CBs toward better positions (see Fig. 3b). The change of the body position represents the velocity of the CBs before collision as:(8)vi=0,i=1,…,nxi-n-xi,i=n+1,…,2nwhere νiandxiare the velocity and position vectors of the ith CB, respectively. 2n is the number of population size.After the collision, the velocity of bodies in each group is evaluated using momentum and energy conservation law (Equations (6), (7)) and the velocities before collision (Equation (8)). The velocity of CBs after the collision is:(9)vi′=(mi+n+εmi+n)vi+nmi+mi+n,i=1,…,n(mi-εmi-n)vimi+mi-n,i=n+1,…,2nwhere viandvi′are the velocities of the ith CB before and after the collision, respectively; miis the mass of the ith CB and is defined as:(10)mk=1fit(k)∑i=1n1fit(i)k=1,2,…,2nwhere fit(i) represents the objective function value of the ith agent. Obviously a CB with good values exerts a larger mass and fewer moves than the bad ones. Also, for maximizing the objective function, the term1fit(i)is replaced by fit(i). As mentioned before, ε is the coefficient of restitution (COR) and is defined as the ratio of the separation velocity of two agents after collision to approach velocity of two agents before collision. In this algorithm, this index was defined to control of the exploration and exploitation rates. For this purpose, the ε decreases linearly from unit value to zero:(11)ε=1-iteritermaxwhere iter is the actual iteration number and itermaxis the maximum number of iterations, and COR equal to unit and zero represent the global and local search, respectively. In this way a good balance between the global and local search is achieved as the iteration is increased.The new positions of CBs are evaluated using the generated velocities after the collision in position of stationary CBs:(12)xinew=xi+rand∘vi′,i=1,…,nxi-n+rand∘vi′,i=n+1,…,2nwherexinewandvi′are the new position and the velocity after the collision of the ith CB, respectively. Here rand is a random vector uniformly distributed in the range [−1,1] and the sign “∘” denotes an element-by-element multiplication.In this study, the laws of collision between two bodies in two dimensions, as mentioned in Section 2, are implemented leading to a new optimization search strategy. The main algorithm is based on standard CBO, where some changes being added. Here, two features are added to the formulation of the standard CBO: (i) the saving memories are added to increase the exploitation ability of standard CBO algorithm, (ii) the COR of standard CBO is ignored due to considering the elastic collision formulation.The proposed algorithm can now be described as follows:Step 1: Initial populations, consisting of 2n individuals and their associated velocities, are created by means of the randomly generated individuals.Step 2: The arrangement of the CBs and “mating process” is performed as shown in Fig. 3.Step 3: The moving CBs move toward the stationary CBs. Therefore, the velocity of CBs before collision is derived:Step 4: The magnitude of the body mass for each CB is defined as:Step 5: Compute the velocity direction of the stationary CBs after the collision such that it moves toward the best object position:Step 6: Then the angles θ between pairs of bodies is derived using Eqs. (4) and (15):Step 7: Compute the velocity of CBs after the collision using Eqs. (5) and (16):Step 8: The new positions of CBs are obtained using the generated velocities after the collision in the position of stationary CBs:Step 9: The optimization is repeated starting with Step 2 until a termination criterion, until the maximum number of iteration, is satisfied.This section discusses the computational examples used to investigate the performance of the proposed algorithm. To present a detailed comparison two mathematical function examples and three well-studied truss structures are utilized. These examples have been previously solved using a variety of other techniques, which is useful to show the validity and effectiveness of the proposed algorithm. In order to assess the effect of the initial population on the final result, 20 independent runs are carried out using the present algorithm and standard CBO with different initial populations. To show the effect of number of agents on the final results, for both algorithms two types of population sizes are considered in the first four examples. The algorithms are implemented in MATLAB and structures are analyzed using the direct stiffness method.Optimization of the constrained function expressed in Eq. (20) is considered as the first example. This problem has seven variables and four nonlinear inequality constraints. This problem is defined as:Find(19){x1,x2,x3,x4,x5,x6,x7}To minimize(20)f(x)=(x1-10)2+5(x2-12)2+x34+3(x4-11)2+10x56+7x62+x74-4x6x7-10x6-8x7Subjected to(21)g1(x)=127-2x12-3x24-x3-4x42-5x5⩾0,g2(x)=282-7x1-3x2-10x32-x4+x5⩾0,g3(x)=196-23x1-x22-6x62+8x7⩾0,g4(x)=-4x12-x22+3x1x2-2x32-5x6+11x7⩾0.The bounds on the design variables are:(22)-10⩽xi⩽10(i=1-7)This problem has been solved by Deb [11] using an efficient constraint handling method for the GA, and Lee and Geem [12] employed the harmony search (HS) algorithm.In this problem, population size (n) is set to 40 and 60 individuals. The maximum number of optimization iterations is also considered as 800. The obtained values and statistical results of this problem for each algorithm are given in Tables 1 and 2, respectively. It can be seen that the best solutions obtained by CBO and 2D-CBO are better than HS algorithm-based method with less fitness function evaluations. Although best and average result of 20 independent runs are more than those of Deb [11], however, the difference of fitness evaluations are significant. Therefore, the obtained statistical results using 2D-CBO are better than those of CBO algorithm. The best results obtained using 2D-CBO shows that this algorithm is less sensitive to the population size compared to the CBO. Fig. 4shows the convergence curves of the two algorithms, and it indicates high convergence rate for the 2D-CBO compared to the CBO algorithm.This is a 10-variable problem which challenges the algorithm ability to deal with the problem of optimization. This problem also has eight nonlinear inequality constraints. This problem is defined as:Find(23){x1,x2,x3,x4,x5,x6,x7,x8,x9,x10}To minimize(24)f(x)=x12+x22+x1x2-14x1-16x2+(x3-10)2+4(x4-5)2+(x5-3)2+2(x6-1)2+5x72+7(x8-11)2+2(x9-10)2+(x10-7)2+45Subjected to(25)g1(x)=105-4x1-5x2+3x7-9x8⩾0,g2(x)=-10x1+8x2+17x7-2x8⩾0,g3(x)=8x1-2x2-5x9+2x10+12⩾0,g4(x)=-3(x1-2)2-4(x2-3)2-2x32+7x4+120⩾0,g5(x)=-5x12-8x2-(x3-6)2+2x4+40⩾0,g6(x)=-x12-2(x2-2)2+2x1x2-14x5+6x6⩾0,g7(x)=-0.5(x1-8)2-2(x2-4)2-3x52+x6+30⩾0,g8(x)=3x1-6x2-12(x9-8)2+7x10⩾0.The bounds on the design variables are:(26)-10⩽xi⩽10(i=1-10)This problem has been solved by Deb [11] utilizing an efficient constraint handling method for the GA, and Lee and Geem [12] employed the harmony search algorithm.In this case, the population size (n) is set as 80 and 100 individuals. The maximum number of optimization iterations is also considered as 1000. Tables 3 and 4compare the optimized variables and the statistical results obtained by CBO and 2D-CBO with those obtained by other meta-heuristic algorithms documented in literature. According to these tables, the best results reported in the literature is 24.36679. While, the 2D-CBO found the best results as 24.33491 after 80,000 fitness evaluations, with the standard deviation and average being 0.369562 and 24.69515, respectively. Although, the average result of the 2D-CBO is more than that of Deb [11]. The best results obtained using 2D-CBO with less population size is better than those of the CBO. Fig. 5shows the convergence curves for the CBO and 2D-CBO algorithms.Fig. 6shows the schematic of the topology and element numbering of a special 72-bar truss. The elements are classified in 16 design groups according to Table 5. The material density is 0.1lb/in3 (2767.990kg/m3) and the modulus of elasticity is 10,000ksi (68,950MPa). The members are subjected to the stress limits of ±25ksi (±172.375MPa). The uppermost nodes are subjected to the displacement limits of ±0.25 in (±0.635cm) in both x and y directions. The minimum permitted cross-sectional area of each member is taken as 0.10in2 (0.6452cm2), and the maximum cross-sectional area of each member is 4.00in2 (25.81cm2). The loading conditions are considered as:1.Loads 5, 5 and −5kips in the x, y and z directions at node 17, respectively.A load −5kips in the z direction at nodes 17, 18, 19 and 20.In this example, the population size (n) is set as 20 and 30 individuals. The maximum number of optimization iterations is also set as 400. Table 5 shows the optimum design variables using 2D-CBO, which is compared to other results. The best result of the 2D-CBO approach is 379.6217, while it is 385.76, 380.24, 381.91, 379.85, 380.458, 379.77 and 379.6405 Ib for the GA [13], ACO [11], PSO [15], BB-BC [16], RO [17], ECBO [18] and CBO [19] algorithms, respectively. Also, the number of analysis of the 2D-CBO is 12,000, while it is 18,500, 19,621, 19,084, 18,000 and 12,000 for the ACO, BB-BC, RO, ECBO and CBO algorithms, respectively.Also, from Table 5 it is evident that the standard deviation of 20 independent runs for the 2D-CBO is less than the other optimization algorithms. Similar to the previous examples, the best results obtained using 2D-CBO with less population size is better than those of the CBO. Fig. 7describes the convergence rate of both CBO and 2D-CBO in terms of iterations for this example. It can be seen, the convergence rate of the 2D-CBO is higher than CBO.Fig. 8shows the schematic of a special 120-bar dome-like truss first optimized by Kaveh and Zolghadr [20]. Only sizing variables are considered to minimize the structural weight with frequency constraints. The 120 structural members of this spatial truss are categorized as 7 groups using symmetry. Non-structural masses are attached to all free nodes as follows: 3000kg at node one, 500kg at nodes 2–13 and 100kg at the remaining nodes. The material density is taken as 7971.810kg/m3 and the modulus of elasticity is 210,000MPa. The structural members of this truss are arranged into seven groups. Fig. 8 shows each element group by member numbers. The range of cross-sectional areas varies from 1 to 129.3cm2. For the frequency constraints, ω1⩾9Hz and ω2⩾11Hz are considered. In this example, population size (n) is set as 20 and 30 individuals.Table 6compares the results obtained by the present algorithm with the outcome of other researches. It can be seen from Table 6 that the best weight, mean weight and standard division of 2D-CBO are better than those of the CBO. The best results obtained using 2D-CBO is also less sensitive to the population size than CBO. The mean weight and standard division of CBO are also more than those of the obtained results using Democratic PSO [20]. Moreover the evolution processes of best fitness value obtained by both algorithms are shown in Fig. 9. It can be seen, the convergence rate of 2D-CBO is higher than that of the CBO.Fig. 10shows the schematic of a 200-bar planar truss as the final example. This truss has been investigated using the standard CSS and CSS-BB-BC algorithms by Kaveh and Zolghadr [21]. The material density and modulus of elasticity of members are 7860kg/m3 and 210,000MPa, respectively. Non-structural masses of m=100kg are attached to the upper nodes. A lower bound of 0.1cm2 is assumed for the cross-sectional areas. For the frequency constraints ω1⩾5Hz, ω2⩾10Hz and ω3⩾15Hz are considered. The elements are divided into 29 groups. For this example a number of 26 CBs are utilized. The maximum number of iterations also is considered as 400.Table 7provides the element groups and compares the results obtained by using the present algorithm and those of the other researches. According to Table 7, the result obtained by the 2D-CBO is lighter than those of other algorithms. Fig. 11shows the convergence diagram for the CBO and 2D-CBO algorithms.In this paper, a new optimization algorithm, named as 2D-CBO, is developed. The proposed algorithm is a method based on the reformation of the standard CBO algorithm. The CBO is recently developed meta-heuristic algorithm which mimics the laws of collision between objects which do not use a memory for saving the best-so-far solution in its formulation. In the 2D-CBO, bodies or agents move toward to the saved best particles and collide to them to promote the exploitation ability of the CBO.A comparative study of 2D-CBO algorithm on two constrained functions and three truss structures is presented. The results of applying examples clearly indicate that 2D-CBO is competitive and even outperforms most of the standard algorithm. The result obtained by the 2D-CBO is lighter than those of other algorithms with same population size on all examples. The comparison of the function evaluation shows that 2D-CBO requires less evaluation and population size than the standard CBO algorithm on some of the selected benchmark test problems. In all examples, the convergence rate of 2D-CBO also is higher than the CBO due to adding a memory in the formulation of the algorithm. It should be noted that the no internal parameter tuning is needed in the proposed algorithm.

@&#CONCLUSIONS@&#
