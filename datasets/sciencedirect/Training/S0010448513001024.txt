@&#MAIN-TITLE@&#
Improving assembly precedence constraint generation by utilizing motion planning and part interaction clusters

@&#HIGHLIGHTS@&#
Spatial clustering to automatically detect and manage assembly-level part interactions.Use of motion planning to assess motion feasibility.An algorithm to generate assembly precedence constraints.

@&#KEYPHRASES@&#
Assembly sequence planning,Motion planning,Part interaction clusters,

@&#ABSTRACT@&#
In this paper, we present a technique that combines motion planning and part interaction clusters to improve generation of assembly precedence constraints. In particular, this technique automatically finds, and clusters, parts that can mutually affect each other’s accessibility, and hence may impose assembly constraints. This enables the generation of accurate precedence constraints without needing to examine all possible assembly sequences. Given an assembly model, our technique generates potential disassembly layers: spatial clustering is used to generate part sets. Next, motion planning based on rapidly-exploring random trees (RRT) with multiple trees is used to evaluate the interaction between these part sets. Specifically, motion planning is used to determine which part sets can be removed from the assembly. These sets are added to the first disassembly layer and removed from the assembly. Part sets that can be removed from the simplified assembly are then added to the second layer. If the process gets stuck, parts in the parent set are regrouped, and the process continues until all disassembly layers are found. The resulting structure reveals precedence relationships among part sets, which can be used to generate feasible assembly sequences for each part set and the whole assembly. We present theoretical results related to the algorithms developed in the paper. Computational results from tests on a variety of assemblies are presented to illustrate our approach.

@&#INTRODUCTION@&#
Assembling a complex product requires careful planning [1–10]. Shapes and sizes of parts in the assembly impose restrictions on the order in which assembly operations can be performed. In order to generate a detailed assembly plan, we need to first understand precedence constraints among assembly operations and be able to generate feasible sequences that are consistent with precedence constraints.Intuitively, assembly precedence can be determined by analyzing accessibility  [2–5,11,12]. Notions of semi-infinite accessibility and infinitesimal-motion are well understood. Unfortunately, requirement of semi-infinite accessibility leads to elimination of feasible operations. On the other hand, feasibility of infinitesimal-motion alone does not guarantee that the assembly operation will be feasible. So these notions are not very useful in assembly sequence determination. However, representing accessibility in finite space is computationally challenging. So we instead would like to rely on motion planning to ensure that a proposed assembly operation is feasible.The goal of assembly sequence planning is to generate a sequence of operations to construct a product from its individual parts. The complexity of this problem is proportional to the number of parts in the assembly  [5,13]. However, a product may be composed of a hierarchical structure, in which parts that mutually affect each other’s accessibility belong to a common cluster that form a part set; in turn multiple part sets may mutually affect each other’s accessibility constraints in the next level of assembly. Parts in such sets can be separately assembled before the final assembly of the product. Hence, the main goal of sequencing the individual parts can be divided into several subgoals that will reduce the number of assembly operations involved in each subgoal. However, the information about the interaction between part sets is not known beforehand. Therefore, we introduce a methodology to automatically detect the part interaction clusters in a product so that the assembly sequencing problem can be applied to part sets at multiple levels of hierarchy.We start by grouping individual parts into spatial clusters based on the proximity between the parts. Each cluster identified in this way is treated as an individual part set. Now, we consider the whole assembly and use motion planning to determine which part sets can be removed from the assembly. These sets are added to the first part set removal layer and removed from the assembly. We again determine which part sets can be removed from the simplified assembly. These are then added to the second layer and removed from the assembly. If the process gets stuck, parts in the parent set are regrouped, and the process is continued until all parts have been removed from the assembly. This information is used to impose precedence constraints among the part sets. Finally, we generate feasible assembly sequences using the precedence constraints for each part set and the whole assembly.Recent advances in rapidly-exploring random trees (RRT) based motion planning  [14] enable efficient generation of motion plans in highly crowded scenes. However, parts in their final positions in the assembly have very limited amount of feasible motions. Hence, we need to ensure that moves being tried by the RRT-based motion planner are able to correctly assess motion feasibility. This requires us to create multiple trees to ensure that if a feasible path exists, then we can find it with a very high probability.Implementing a system based on the above ideas requires tuning a large number of parameters to ensure reasonable system performance on moderately complex assemblies. This paper describes our approach for combining RRT-based motion planning and part interaction cluster detection for generating improved precedence constraints, which in turn can be used to generate feasible assembly sequences.The input to the system is a 3D assembly comprising a set of parts that are described by their geometric models and relative positions. Our approach takes into account product characteristics such as component geometry, inter relationships between components, component material, and tolerances. We assume that the product is made of rigid parts and restrict ourselves to finding a feasible sequence of collision-free motions for each part (part set). We define each part (part set) as a free-flying object. Therefore, we do not consider grasping of the objects, the forces involved, or the stability of the part (part set) during motion. Additionally, we consider nonlinearity in the assembly operations: an assembly operation may involve more than two part sets at the same step. We assume only monotone assembly sequences: when an operation has assembled a part into a part set, that part may no longer be moved relative to that part set. Although restrictive in application, these assumptions are very common in assembly sequencing and can be applied to a majority of products.The approach of assembly-by-disassembly relies on constructing a disassembly sequence and then reversing the entire sequence to obtain a feasible assembly sequence. In general, the steps involved in the sequences are not necessarily symmetric, for instance, when considering flexible parts which may undergo deformation during assembly. However, under our assumptions, these two operations are indeed symmetrical.As mentioned earlier, the main challenges encountered in assembly sequence planning include sequence generation, combinatorial explosion, nonlinearity, and interaction between part sets. The main contributions of this paper that address these problems include the following:1.a spatial clustering based method to automatically detect the part interaction clusters in a product.a technique that uses a variation of RRT-based motion planning in order to assess motion feasibility.an algorithm to generate improved assembly precedence constraints by combining the part interaction cluster detection and the motion planning methods into an assembly-by-disassembly approach.

@&#CONCLUSIONS@&#
We presented a framework that combined motion planning techniques and part interaction cluster extraction to guide the generation of feasible assembly sequences for complex mechanical assemblies. These assembly sequences can be used to generate instructions for assembly operations performed by humans  [61]. We showed that our approach can be used to achieve complex organizational levels of an assembly in which assembly of part sets can be assigned to different stations and later, these part sets can be put together to form the final assembly. We also showed how our approach addresses the issue of nonlinearity in assemblies. The system generated the assembly precedence constraints directly from 3D assembly models as it used only information about geometric and physical constraints. In situations where part assembly involves a single translation and a single rotation, methods without using path planning are computationally more efficient than our approach. However, our approach performs better when applied to more complex assemblies that involve multiple translations and rotations. Our approach explores many different feasible assembly directions. Our approach checks for feasibility in a given assembly state. So it can handle situations where different directions become feasible based on the state of the assembly. For example, if the left direction is blocked in a given assembly state, and the right direction is checked for feasibility and selected (if appropriate).Our approach presented in the paper considered each part as a free-flying object. However, in a realistic scenario, as tools and human hand operations will be used during assembly, some of the precedence constraints generated by our approach may become infeasible. In order to address this issue, our approach must be augmented by incorporating motion planning for human-hand and tool models into the formulation. This will result in the generation of modified precedence constraints that cater to the spatial constraints imposed by the tools and the hands. Our technique was proposed for mechanical assemblies that are composed of finite numbers of non deformable parts. Hence, assemblies that contain flexible parts, where the flexible property of a part is exploited to fit it into the assembly, were out of the current scope of our current approach. In addition, an analysis beyond pure geometric reasoning is required for assemblies that contain parts requiring force for placement.