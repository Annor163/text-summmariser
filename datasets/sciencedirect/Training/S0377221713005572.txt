@&#MAIN-TITLE@&#
A post-optimization method for the routing and wavelength assignment problem applied to scheduled lightpath demands

@&#HIGHLIGHTS@&#
We study the routing and wavelength assignment problem for Scheduled Lightpath Demands (SLDs).We design a post-optimization to solve this problem.We provide an experimental study of this method.This method improves the solutions provided by a heuristic.

@&#KEYPHRASES@&#
Combinatorial optimization,WDM optical networks,Routing and Wavelength Assignment Problem (RWA),Scheduled Lightpath Demands (SLDs),Post-optimization,

@&#ABSTRACT@&#
We consider here a NP-hard problem related to the Routing and Wavelength Assignment (RWA) problem in optical networks, dealing with Scheduled Lightpath Demands (SLDs). An SLD is a connection demand between two nodes of the network, during a certain time. Given a set of SLDs, we want to assign a lightpath, i.e. a routing path and a wavelength, to each SLD, so that the total number of required wavelengths is minimized. The constraints are the following: a same wavelength must be assigned all along the edges of the routing path of any SLD; at any time, a given wavelength on a given edge of the network cannot be used to satisfy more than one SLD. To solve this problem, we design a post-optimization method improving the solutions provided by a heuristic. The experimental results show that this post-optimization method is quite efficient to reduce the number of necessary wavelengths.

@&#INTRODUCTION@&#
We consider a problem related to the Routing and Wavelength Assignment (RWA) problem in wavelength division multiplexing (WDM) optical networks; see e.g. Gagnaire, Kuri, and Koubaa (2009), Kuri, Puech, Gagnaire, Dotaro, and Douville (2003), Ramaswami and Sivarajan (2002) or Zheng and Mouftah (2004) for general references. Fibre-optic networking technology using WDM offers the potential of dividing the bandwidth of a fibre into several channels, each at a different optical wavelength, permitting to carry data in parallel. For a given network topology, represented by an undirected graphG, the RWA problem consists in establishing a set S of traffic demands, also called connection requests, in this network. Different versions of the RWA problem can be found in the literature, depending on the performance metrics and on the traffic assumptions; see for instance (Zang, Jue, & Mukherjee, 2000). Traffic demands may be of three types: static (permanent and known in advance), scheduled (requested for a given period of time and known in advance) and dynamic (unexpected). The typical objectives of RWA can be:–to minimize the required number of wavelengths under given connection requests,to minimize the blocking probability, i.e. the number of rejected traffic demands, under a given number of wavelengths and dynamic connection requests,to minimize the maximum number of wavelengths going through a single fibre, also called the lightpath congestion,to minimize the network load as defined by the fraction of the number of wavelengths used on the overall set of fibre links in the network.These problems or variants of them have been extensively studied in the last decades; see, among others, (Banerjee & Mukherjee, 1996; Belgacem & Puech, 2008; Chen & Banerjee, 1996; Choi, Golmie, Lapeyere, Mouveaux, & Su, 2000; Jaumard, Meyer, & Thiongane, 2006; Krishnaswamy & Sivarajan, 2001; Kumar & Kumar, 2002; Kuri, 2003; Kuri, Puech, Gagnaire, 2003; Kuri, Puech, Gagnaire, Dotaro et al., 2003; Lee, Kang, Lee, & Park, 2002; Margara & Simon, 2000; Noronha, Resende, & Ribeiro, 2008; Noronha & Ribeiro, 2006; Ramaswami & Sivarajan, 1995; Skorin-Kapov, 2006a, 2006b, 2007, 2008; Zang et al., 2000; Zheng & Mouftah, 2004).Many of these works consider static demands; the problem is then sometimes called the wavelength dimensioning problem, see for instance (Jaumard et al., 2006) where this problem is studied. In this paper, we deal with the case of a set S of Scheduled Lightpath Demands (SLDs). This is relevant because of the predictable and periodic nature of the traffic load in real transport networks, more intense during working hours, see Kuri, Puech, Gagnaire, Dotaro et al. (2003). This case is also much more difficult than the static one, because of the time constraints which do not exist for static demands.More precisely, an SLD s belonging to S can be represented by a quadruplet s=(x,y,α,β), where x and y are some vertices ofG(source and destination nodes of the connection request), and where α and β denote the set-up and tear-down dates of the demand. The routing of s=(x,y,α,β) consists in setting up a lightpath (P,w) between x and y, where P is a path, also called route, between x and y inGand w a wavelength (we do not address here the case where a traffic demand requires several lightpaths). In order to satisfy s, this lightpath must be reserved during all the span of [α,β].When wavelength converters exist, it is not necessary to use a same wavelength on all the links used by a lightpath. Unfortunately, this entails a lot of expense and hence changes the nature of the problem: the aim is then to determine the placement of these converters so that the overall network cost is minimized; see for instance (Chu, Li, & Chlamtac, 2002). When there are no wavelength converters in the network, as it will be assumed in this paper, the wavelength continuity constraint is imposed: the same wavelength must be used on all the links used by a lightpath. Moreover, at any given time, a wavelength can be used at most once on a given link; in other words, if two demands overlap in time, they can be assigned the same wavelength if and only if their routing paths are disjoint in edges. This constraint is often called the wavelength clash constraint.We address in this paper the problem consisting in minimizing the number W of wavelengths required to establish all the SLDs. This problem is NP-hard, even if we do not take the time-windows into account; see Chlamtac, Ganz, and Karmi (1992). A solution of this problem is defined by specifying, for each SLD, the lightpath chosen for supporting the connection, i.e. a route and a wavelength, so that there is no conflict between any two lightpaths (let us recall that two lightpaths are in conflict if they use the same wavelength, they have at least one edge in common and the corresponding demands overlap in time). Several approximate or exact methods have been proposed in the literature to deal with this NP-hard problem for static demands or for SLDs; see Gi Ahn, Lee, Chung, and Choo (2005), Jaumard et al. (2006), Kuri, Puech, Gagnaire, Dotaro et al. (2003), Lee et al. (2002), Margara and Simon (2000), Park, Yang, and Bang (2007), Saradhi and Gurusamy (2005), Skorin-Kapov (2006a, 2006b, 2007), Wauters and Demeester (1996) and Zang et al. (2000).The greedy method proposed by in Skorin-Kapov (2006b), which has been designed initially to deal with the case where SLDs may require several lightpaths simultaneously, gives very satisfying results in a very small amount of time and is, with this respect, among the most efficient heuristics. Its application to our problem, though we do not consider here the case where a traffic demand requires several lightpaths, will be used as a benchmark for measuring the performance of our approach. Indeed we propose in this paper a post-optimization method in order to improve the results given by other heuristics. The CPU time of the overall method will naturally increase, but it will remain acceptable to deal with SLDs: since the demands are known in advance, the allotted time to provide a solution is relatively large (unlike the case where demands are unexpected, and for which routings must be computed dynamically).The greedy algorithm derived from Skorin-Kapov (2006b) and the post-optimization method are presented in Section 2. In Section 3, we apply these methods on different types of instances and we analyse the obtained results. Finally we conclude in Section 4.We describe in this section the different heuristics that we apply to deal with RWA. Let us recall that the aim consists in minimizing the number W of wavelengths required to establish a given set S of demands. We first present in Section 2.1 the greedy algorithm derived from Skorin-Kapov (2006b); we propose in Section 2.3 a slight modification of this algorithm so that it can be repeated. The post-optimization method is described in Section 2.2.The greedy algorithm derived from Skorin-Kapov (2006b) consists in considering the wavelengths one by one, and in trying to route as many SLDs as possible with each wavelength. For each wavelength w, the SLDs are examined following some prescribed order ≺; we set s′≺s if s′ is examined before s.More precisely, let w be the current wavelength and s=(x,y,α,β) be the current SLD. We consider a graphH(s)obtained fromGby removing all the edges unavailable for the routing of s with w, i.e. edges that are contained in lightpaths corresponding to SLDs already routed with the wavelength w and which overlap s in time. According to this construction, any edge ofH(s)could be used to route the demand s with wavelength w without inducing any clash with previously established SLDs. Thus, if there exists at least one path between x and y inH(s), we attribute the shortest possible path Psto the SLD s as well as the wavelength w; otherwise s is put aside and will be dealt with latter using another wavelength. Then we move up to the next not yet established SLD with respect to the prescribed order.When all the SLDs have been examined, we move up to the wavelength w+1 and try to route the remaining SLDs. The algorithm stops as soon as all the SLDs have been established, and returns the current value of w.This algorithm is given in Fig. 1and will be referred to as G.The post-optimization method presented in this paper aims at improving the results provided by the greedy heuristic depicted above, though it can be applied to any heuristic permitting to solve the addressed problem or even to other variants of this problem. It consists in minimizing the overall values of the wavelengths of the established lightpaths in order to try to minimize the total number of wavelengths W.The principle of this method is the following: for any w∈{2,…,W}, we try to empty the set of SLDs routed with w, at least partially; this set will be called the layer w in the following. This is done by trying to assign a smaller wavelength (1,2,…,w−1) to the demands of the layer w, which leads us to rearrange the wavelengths assigned to the SLDs of these lower layers. During this operation, the layers of some SLDs may change but all of them must remain in [1,w−1].More precisely, let us assume that we want to move the demand s=(x,y,α,β) from its current layer w to a lower layer ℓ (ℓ∈[1,w−1]). It is very likely that some of the demands belonging to the layer ℓ prevent us from routing s with this wavelength. In other words, if we delete fromGall the edges used to establish the demands of this layer which overlap s in time, we may find no path joining x and y. So we consider a graphH(s), initially equal toG, and we examine one after the other the demands s′ of the layer ℓ which overlap s in time. For each such s′, we remove fromH(s)the edges of the pathPs′supporting the connection associated with s′ which are still inH(s). If there still exists a path inH(s)to set up s, we move up to the next demand s′ of the layer ℓ; otherwise s′ is removed from the layer ℓ and put aside in a set E, and we put back the removed edges ofPs′insideH(s); of course, if some edges ofPs′had been removed previously fromH(s)because of former clashing SLDs, they remain removed. Thus, once all demands of the layer ℓ have been examined, it becomes possible to route s using the wavelength ℓ since all the conflicting lightpaths have been (at least temporarily) removed.We must now deal with the demands of E: we try to place each of these demands in one of the layers 1,…,w−1, without modifying the routing of any other SLD. If a layer can be found for each demand of E, then we have finished with the demand s: s remains in the layer ℓ and the demands of E remain in their new layers, with a lightpath compatible with the ones of the other SLDs of this layer, and we move up to the following demand of the layer w. Otherwise we consider that the attempt to move s to the layer ℓ has failed: layer ℓ is restored as before the attempt to insert s inside, and we try to move s to the next layer ℓ+1. If all the layers from 1 to w−1 have been examined in vain, s remains inside its current layer w, and we move up to the following demand of the layer w.As all the demands of the current layer w are handled, the number of remaining demands on this layer may decrease, or the layer w may even become totally empty. In the later case, we shift the layers w+1, w+2,…,W to the layers w,w+1,…,W−1, and we have succeeded in saving one wavelength definitively: W becomes W−1.This method, summarized in Fig. 2, is referred to as the post-optimization algorithm. Let us notice that even if a rearrangement of the layers does not permit to decrease the number W of required wavelengths, it may happen that further applications of the algorithm succeed to do so, because the SLDs are not dispatched in the layers in the same manner from one application to another. In the experiments presented below, we chose to repeat the post-optimization algorithm until four consecutive runs do not decrease W. This choice is based on an experimental observation and arises from a compromise between CPU time and the quality of the computed solutions. The overall heuristic consisting of the greedy algorithm followed by the application of the post-optimization method will be denoted G+ in the rest of the paper.The introduction of the post-optimization method yields a significant increase in computation time. To evaluate the post-optimization method, we will compare the results provided by the greedy heuristic with or without this post-optimization method. In order to avoid any bias, it is desirable that both methods are given the same amount of CPU time to provide a solution. Thus we propose a slight modification of G in order to make it stochastic (G is deterministic otherwise); then we will be able to compare G+ with a multi-start procedure consisting in repeating G as many times as necessary to attain the same CPU time as the one required by G+.The principle is straightforward: we propose to consider, for each run of G, a random order for the examination of the SLDs. In Skorin-Kapov (2006b), the demands are ordered with respect to the decreasing numbers of connection requests, which is irrelevant in our context since all the SLDs are assumed to require the establishment of only one lightpath. We have performed some experiments to analyse the effect of the order of the SLDs on the performance of G. Whatever the considered order (increasing or decreasing order of the time window’s width, increasing or decreasing order of the length of a shortest path between the source–destination nodes), the obtained results are not significantly different. The best way to take benefit from the allotted CPU time seems then to generate a random order of the SLDs for each run of G. Of course, the solution returned by this repetition of G will be the best one computed over the different runs of G during this repetition. This repetition of G will be denoted RG.

@&#CONCLUSIONS@&#
