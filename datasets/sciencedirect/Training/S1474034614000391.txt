@&#MAIN-TITLE@&#
Processing of Topological BIM Queries using Boundary Representation Based Methods

@&#HIGHLIGHTS@&#
We discuss topological operators as part of a query language for Building Information Models.We present novel boundary representation based algorithms implementing these operators.We achieve efficient processing of spatial queries by combining the developed BRep methods with spatial indexing.The methods are designed for processing complex data sets with high element counts and detailed geometry.

@&#KEYPHRASES@&#
Building information modeling,3D spatial query language,Topology,Boundary representation,QL4BIM,

@&#ABSTRACT@&#
Building Information Models (BIM) are comprehensive digital representations of buildings, which provide a large set of information originating from the different disciplines involved in the design, construction and operation processes. Moreover, accessing the data needed for a specific downstream application scenario is a challenging task in large-scale BIM projects. Several researchers recently proposed using formal query languages for specifying the desired information in a concise, well-defined manner. One of the main limitations of the languages introduced so far, however, is the inadequate treatment of geometric information. This is a significant drawback, as buildings are inherently spatial objects and qualitative spatial relationships accordingly play an important role in the analysis and verification of building models. In addition, the filters needed in specific data exchange scenarios for selecting the information required can be built by spatial objects and their relations. The lack of spatial functionality in BIM query languages is filled by the Query Language for Building Information Models (QL4BIM) which provides metric, directional and topological operators for defining filter expressions with qualitative spatial semantics. This paper focuses on the topological operators provided by the language. In particular, it presents a new implementation method based on the boundary representation of the operands which outperforms the previously presented octree-based approaches. The paper discusses the developed algorithms in detail and presents extensive performance tests.

@&#INTRODUCTION@&#
Building Information Models are comprehensive digital representations of buildings. Their use for designing, engineering, constructing and operating buildings is increasingly being adopted by the AEC industry [1]. A BIM comprises not only the 3D shape of all building elements and the enclosed spaces, but also semantic information representing both the type of the elements and the relationships between them. Additionally, the model stores a wealth of non-geometric properties. By providing the appropriate data structures, a BIM serves as an interface and database for exchanging information across the disciplines involved throughout the design, construction and operation of the building. The use of BIM in the interdisciplinary design and engineering processes calls for well-defined points of information hand-over. The Information Delivery Manual (IDM) provides a framework for describing the processes and defining exchange requirements [2]. It precisely specifies the information needs of the receiving participant and/or application. The exchanged information has to satisfy high quality standards, as an efficient operation of downstream processes can only be achieved if the data basis is accurate.Coupled with 3D modeling, the semantic comprehensiveness of building models provides a clearer insight into the consequences of planning decisions than the 2D plan-based approach. Nevertheless, the specific conditions in the construction industry and the unique characteristics of each building can spoil the quality of the resulting model:1.Projects are developed during long periods of design and planning phases, often including significant changes to the building model(s).There are a large number of contributors involved in the ongoing detailing of a model.Each domain focuses on different parts of the model.These conditions, coupled with the complexity of the modeled environment, lead to a massive amount of data and a high risk of undetected errors. In large-scale projects in particular, the amount and complexity of information stored in a BIM renders the manual detection of spatial defects difficult and time-consuming. In addition, retrieving the data subset required for a specific exchange scenario is a far from trivial task. To overcome this hurdle, several researchers have proposed using formal query languages which make it possible to specify the desired information in a concise, well-defined manner. These approaches are presented in Section 2. One of the main limitations of the methods proposed so far, however, is the inadequate treatment of geometric information. None of the approaches support the use of qualitative spatial predicates for defining filter expressions, only allowing simple numeric comparisons between individual geometry coordinates. This is not suitable for expressing filters with higher spatial semantics.This has to be seen as a major deficiency, as spatial relations between building elements play a significant role in most of the design and engineering tasks of the AEC domain. To fill this technological gap, the authors have developed concepts and techniques for a spatial query language for Building Information Models [3–5]. The devised technology makes it possible to select specific building elements by applying qualitative spatial relationships within the respective filter expressions. These relationships form an intermediate level of abstraction between the technical view on building geometry using numerical coordinates, and the way humans reason about buildings and the relations between their components.Typical examples of queries concerned with spatial semantics are:–Get all walls within the first storey.Does room 107 contain any heating equipment?Get all objects within the distance of 10m from a certain point.Which columns touch slab No. 1?Are there any gas lines below the footing?Possible applications for a spatial query language for BIM range from verifying construction rules to extracting partial models that satisfy spatial conditions. Such a partial model resulting from a spatial query can be used to fulfill the exchange requirements specified in the IDM process map, for example.The proposed 3D spatial query language QL4BIM relies on a spatial algebra that is formally defined by means of the point-set theory and point-set topology [6]. The operators available for the spatial types are the most important part of the algebra.They consist of–metric operators, such as Distance, CloserThan, and FartherThan[4]directional operators, such as Above, Below and NorthOf[3] andtopological operators, such as Touch, Within and Contains[7].This paper focuses on the topological operators. In particular, it presents a novel implementation approach which is based on the direct use of the Boundary Representation (BRep) of the operands. As shown by the performed performance tests, this newly developed technique outperforms the octree-based approaches presented in [8].The paper is structured as follows: Section 2 discusses related work in the field of query languages for BIM as well as spatial data processing in the domain of Geographic Information Systems (GIS). In addition, the standardized data model Industry Foundation Classes and its handling of BRep data is discussed. Section 3 presents the formal definitions underlying the topological operators provided by QL4BIM. After revising the octree-based approach for implementing the topological operators in Section 4, the developed BRep-based approach is presented in Section 5. Section 6 discusses the application of the R-Tree indexing method for achieving further performance gains during topological filtering. The results of test runs concerning runtime and time complexity are presented in Section 7, while Section 8 discusses the Live LINQ query system, which includes the proposed topological filters. The paper is concluded by a summary and discussion.

@&#CONCLUSIONS@&#
