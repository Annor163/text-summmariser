@&#MAIN-TITLE@&#
Multiobjective optimization of MPLS-IP networks with a variable neighborhood genetic algorithm

@&#HIGHLIGHTS@&#
A multiobjective genetic algorithm is proposed for packet routing in MPLS IP networks.The proposed GA, called VN-MGA, employs operators that work on two different solution neighborhoods, resembling the VNS metaheuristics.The solutions delivered by VN-MGA are compared with the ones delivered by the exact solutions provided by an ILP solver, for medium-sized problem instances. The VN-MGA was found to be able to find most of the exact Pareto-optimal solutions, leaving a small gap in the other cases.The VN-MGA has been statistically compared with a pure VNS strategy, outperforming that algorithm.Since the ILP approach is not applicable to large problem instances, the VN-MGA can be considered a suitable alternative for those problems.

@&#KEYPHRASES@&#
Routing on IP networks,Variable Neighborhood Search,Multi-objective Genetic Algorithm,

@&#ABSTRACT@&#
This paper presents a Genetic Algorithm for the optimization of multiple indices of Quality of Service of Multi Protocol Label Switching (MPLS) IP networks. The proposed algorithm, the Variable Neighborhood Multiobjective Genetic Algorithm (VN-MGA), is a Genetic Algorithm based on the NSGA-II, with the particular feature that solutions are encoded defining two different kinds of neighborhoods. The first neighborhood is defined by considering as decision variables the edges that form the routes to be followed by each request, whilst the second part of solution is kept constant. The second neighborhood is defined by considering the request sequence as decision variable, with the first part kept constant. Comparisons are performed with: (i) a VNS algorithm that performs a switch between the same two neighborhoods that are used in VN-MGA; and (ii) the results obtained with an integer linear programming solver, running a scalarized version of the multiobjective problem. The results indicate that the proposed VN-MGA outperforms the pure VNS algorithm, and provides a good approximation of the exact Pareto fronts obtained with Integer Linear Programming (ILP) approach, at a much smaller computational cost. Besides potential benefits of the application of the proposed approach to the optimization of packet routing in MPLS networks, this work raises the theoretical issue of the systematic application of variable encodings, which allow variable neighborhood searches, as generic operators inside general evolutionary computation algorithms.

@&#INTRODUCTION@&#
The internet transmission of multimedia applications has become an achievable goal due to the emergence of new technologies. New applications such as videoconferences, Video on Demand (VoD) or Voice over IP (VoIP) brought the need of some guarantees of network characteristics regarding the quality of the data flow, such as minimum bandwidth or maximum delay [6]. However, in the conventional internet traffic, it is not possible to predict the path of packets, i.e, there is no guarantee of communication regularity. For this reason, some mechanisms were developed for Quality of Service (QoS) that allow differentiation of the transmitted flows and the definition of conditions, in order to reach a level of quality from the prioritization of different flows according to their characteristics and objectives [19]. Recently, several technologies have been proposed, based on the labeling of information on IP networks. They allow the processing of different packets according to specific policies aiming to achieve QoS requirements. The MPLS (Multi Protocol Label Switching) is an example of such a technology that makes possible the explicit routing of packets, favoring the provision of QoS according to the requirements of multimedia applications.Several studies were performed recently in order to develop an approach of Traffic Engineering for Routing with QoS. According to RFC-3272 (Request for Comments 3272), the Internet Traffic Engineering is defined as that aspect of Internet network engineering dealing with the issue of performance evaluation and performance optimization of operational IP networks [3]. Many of those studies deal with routing on IP networks and MPLS, using single-objective GAs [16,2] or deterministic methods, like Lagrangian Relaxation [9]. As the model in those studies is formulated with a single objective, the search can be biased to a specific goal, leading to solutions that are unsuitable under other objectives. For this reason, multi-objetive strategies received some attention recently. However, the use of multi-objective methods applied to the problem of routing on IP networks is not so extensive. The works [1,11,21] should be mentioned in such a context. This work employs the same objective functions employed by Santos [21], which proposes a dynamic evaluation for routing in MPLS using multi-objective techniques.The present study deals with the optimization of two or three merit functions which, according to Wang and Crowcroft [22], render the problem NP-complete. Thus, the techniques based on non-deterministic heuristics are likely to be the most suitable ones. The stochastic optimization techniques such as Genetic Algorithms (GAs) and Variable Neighborhood Search (VNS) are examples of heuristic search strategies that can be used.GAs [14] are search techniques that consider sets of candidate solutions (each solution is an individual, and the set is the population), which are varied according to two kinds of probabilistic rules: the mutations, which introduce perturbations into current solutions, producing new ones, and the crossover, which combines the information from previous solutions, producing new ones. Finally, the current population goes through a selection procedure, that probabilistically increases the frequency of the best solutions in a new population, reducing the frequency of the worst ones. In recent years, it has been recognized that a key factor that determines the performance of GAs is the encoding employed for the representation of the solutions in the population. This is attributed to the fact that different encodings induce different neighborhoods, which lead to different behaviors of the variation mechanisms of mutation and crossover [5].VNS techniques [17], on the other hand, usually evolve a single solution each time. This solution is subject to heuristic descent searches that find local minima in the attraction regions that are characterized by connected paths in a given neighborhood induced by an encoding. The heart of VNS techniques is the alternate usage of different encodings that induce different neighborhoods, which allows the algorithm to perform further descent steps after finding a local minimum in an encoding, by simply changing the encoding that is being used.This paper deals with the problem of packet routing in MPLS systems. In the specific context of this problem, a new Multiobjective Genetic Algorithm, the VN-MGA (Variable Neighborhood Multiobjective Genetic Algorithm) is developed. The optimized routing tries to minimize the network cost and the amount of rejection of simultaneous requests, as well as to perform a load balancing among routes. The proposed algorithm allows to deal with these conflicting QoS indicators, described as independent objective functions. Moreover, the set of solutions provides flexibility for the decision maker to select a goal according to the current state of the network.The proposed VN-MGA is based on the classical NSGA-II [8] and has, as a distinctive feature, its crossover and mutation operators inspired in the concept of variable neighborhood of the VNS techniques. Two different encodings are employed: a low-level encoding, which represents explicitly the routes that are followed by each request of service, and a high-level encoding, that encodes permutations of the set of requests of service, defining the order in which they will be included into the solution. The crossover and mutation operators, acting in these two levels, are able to explore and to exploit the decision variable space with enhanced efficiency, leading to solutions that dominate the ones that appear in algorithm versions using only one level. It should be noticed that the proposed operators are problem-specific. In problems of combinatorial nature, it has been established that algorithms employing specific crossover and mutation operators can be more efficient than general-purpose GAs [4].The proposed algorithm is also compared with: (i) a pure VNS algorithm which employs the same neighborhoods employed in the proposed VN-MGA along with a typical VNS neighborhood change mechanism; and (ii) an Integer Linear Programming (ILP) solver. Both algorithms, which are scalar in their original formulation, are adapted to the multiobjective problem using an Ïµ-constraint procedure [10]. The proposed VN-MGA reaches better solutions, when compared with the VNS, and requires a much smaller computational effort, compared with the ILP.A group of routing problems has been solved using hybrid approaches [20]. There are hybrid methods for the vehicle routing problem using Genetic Algorithms and Tabu Search [20] or combining VND (Variable Neighborhood Descent) and GRASP (Greedy Randomized Adaptive Search Procedure) [13] and also problems with other characteristics, such as pipeline petroleum distribution using GA and VNS [7]. However, those studies typically combine different algorithms in a literal way, performing steps from one algorithm and from the other one. The present authors have not identified any reference that performs an organic combination like the one proposed here. Some preliminary results of the present study have been presented in a conference [18].This paper is organized as follows: Section 2 describes the problem and its modeling. Section 3 presents a background about the VNS. Section 4 presents the proposed VN-MGA. Section 5 presents some results obtained with this approach and Section 6 concludes the paper.This study deals with the problem of choosing routes in a scenario of a corporate IP network with MPLS technology. The aims are to minimize the network cost, to respond to the usersâ requests ensuring the Quality of Service and to provide a load balancing between simultaneous streams. The network model is represented by the graph G=(V, A), whereV=1,2,â¦,vindexes the set of routers (nodes) in the MPLS domain andA=(i,j)|i,jâV,iâ jis the set of links, in which the link (i, j) connects node i to node j. The bandwidth of each link (i, j) is represented by Bij. Each user's request is represented by the triple (ok, dk, bk), where okâV and dkâV indicate, respectively, routers of source and destination of traffic and bkindicates the amount of bandwidth to be reserved for the request k. The set of requests is indexed byÎ=1,2,â¦,m.The objective functions and constraints are described by Eqs. (1) to (4), which are based on the work of Santos [21].(1)minF1=âkâÎâ(i,j)âAzijkF2=âkâÎ(1âak)F3=Î±s.t.(2)âjâV,jâ izijkââlâV,lâ izlik=Îik,âiâV,âkâÎ(3)âkâÎbkzijkâ¤Î±Bij,â(i,j)âA(4)âkâÎakâ¥Cwhere(5)zijkâ{0,1},â(i,j)âA,âkâÎis a variable which is equal to 1 when the link (i, j) is used to attend request k, and 0 otherwise,(6)akâ{0,1},âkâÎis a variable that becomes equal to 1 if request k is attended and 0 otherwise,Îik, given by(7)Îik=ak;ifi=ok;âak;ifi=dk;0;otherwiseindicates if the node i is the source, the destination, or none of these, for the request k, and(8)Î±â[0,1]is a variable which, being minimized under constraint (3) becomes equal to the maximum relative bandwidth occupation considering all links.The objective function F1 represents the number of links that are used in the paths of all the accepted requests. The fewer links are used the smaller is the delay for the data travel from origin to destination. F2 represents the number of rejections of requests. The amount of rejection of requests is related to the admission control of new connections, which determines whether a connection can be admitted or not, according to the network load condition and the amount of requested bandwidth. The minimum number of requests that must be responded is represented by C, shown in Eq. (4). In F3, Î± represents (in relative terms) the load of the most used link, with values varying from 0 to 1. Minimizing the amount of data traffic on the links means that the load is evenly distributed and consequently the network is balanced. The constraint (2) represents the classical flow conservation. According to constraint (3), the requested bandwidth (bk) for a link (i, j) must be less than or equal to the available bandwidth.The problem stated in Eq. (1) has several functions to be minimized, and therefore it is a multi-objective optimization problem. A multi-objective optimization problem is defined as:(9)minf(x),f(x)=(f1(x),f2(x),â¦,fâ(x))subjectto:xâXin whichxâXis the decision variable vector,Xis the decision variable domain,fâFis the objective vector, andFis the objective space. In other words,Fâf(X).Define the relation operators â¤ and â  for vectors as:f(a)â¤f(b)âfi(a)â¤fi(b),âi=1,2,â¦,landf(a)â f(b)ââiâ1,2,â¦,l:fi(a)â fi(b)in which a and b represent two different decision vectors. A point xâ² is said to be dominated by another point x if the following relation holds:f(x)â¤f(xâ²) â and â f(x)â f(xâ²)In this case, the notation xâºxâ² is employed. The goal of some multi-objective optimization methods is to obtain estimates of the Pareto-optimal set [10], which contains the set of non-dominated solutions of the multi-objective problem.In this way, the Pareto-optimal setPis defined as the set of non-dominated solutions:(10)P=x*|âx:xâºx*All solutions that are not dominated by any other decision vector of a given set are called non-dominated regarding this set. A Pareto-optimal solution is a non-dominated vectorxâX. The Pareto-optimal set of the multi-objective optimization problem is the set of all Pareto-optimal solutions. The image of this set in the objective space,f(P), is called the Pareto front.The Variable Neighborhood Search (VNS), proposed by Mladenovi and Hansen [17], is a simple heuristic method which has the purpose of performing a global optimization using sequences of local searches. The main idea is to have a repertoire of operators which implicitly define two or more structures of neighborhood, and to switch between them. The search starts with a feasible solution and searches iteratively for a new one in the immediate neighborhood defined by the current search operators. By switching the operators, it is possible to change the neighborhood, which allows to perform descent searches in a new neighborhood. This allows to escape from points which represent local minima in some neighborhood, using the descent paths of other neighborhoods.In literature, there are many variants of VNS which consider different sequences of neighborhoods, or different solution acceptance conditions. A basic version defines a set of neighborhoodsN=Nk,k=1,...,kmaxand an initial solution x that will be used in the local search with the neighborhoodN1. This procedure is repeated for many iterations. The acceptance condition will choose between the previous local optimum and the new one. If this is the best solution, then the neighborhood for the next iteration will be in the first position. Otherwise, the neighborhood will follow the sequence. The algorithm proposed by Hansen and Mladenovi [15] is described in Algorithm 1.Algorithm 1Basic VNS1:kâ12:whilekâ¤kmaxdo3:Shaking: Randomly generate a point xâ² inNk(x);4:Local search: Local search from xâ²; Denote xâ³ as a local optimum obtained;5:iff(xâ³)<f(x) then6:xâxâ³ and continue the search on this neighborhood;7:else8:kâk+19:end if10:end whileThe conventional VNS algorithms were developed for single-objective (scalar) optimization problems. This work proposes the integration of the VNS principle of switching between different neighborhoods within a multiobjective genetic algorithm. During the evolution process, genetic operators of crossover and mutation are developed for each neighborhood. In this way, the search in one neighborhood aids the search in the other one with alternated executions, exploring different search spaces.The proposed multiobjective optimization approach to the problem of routing in IP networks, with the specific features that are necessary to deal with QoS parameters, is depicted in this section. The proposed algorithm, the Variable Neighborhood Multi-objective Genetic Algorithm (VN-MGA), is endowed with a new way to perform a search, considering different neighborhoods. Initially, it can be described as an implementation of the NSGA-II. The innovation concerns on the way the genetic operators work, in a switching mode between two different neighborhoods (levels).The structure of an individual is described by an ordered set of m requests, along with its corresponding routes, as shown in Fig. 1.The concept of level refers to the neighborhoods considering two different subsets of decision variables, the low-level encoding, which represents explicitly the routes that are followed by each request of service, and the high-level encoding, that represents the permutations of the set of requests of service, defining the order in which they are included into the solution. The alternate employment of those encodings in the VN-MGA, as long as they induce different neighborhoods, becomes similar to the search principle of VNS.The Fig. 2presents a sketch of the main structure of VN-MGA. It can be seen in this figure that the idea is to perform a full genetic search in one of the levels (which means: a search considering the decision variables of that level) until a switch indicator is met, and to change to the other level, and so forth, until a global stopping criterion is reached. The switch indicator is defined here as the attainment of a fixed number of generations, NumGen, within that level.When the search focuses on the routes (Level 1), the request sequence becomes fixed and the sequences of graph edges for each pair source-destination compose the decision variable vector, in the search for the request paths. The individual, denoted by I1, I2, â¦, IN, is represented by a sequence of requests, which is kept fixed, and by a group of edges associated with each request, which constitute the decision variables within this level. Each request has a specific requirement of bandwidth according to its application (requested bandwidth). This means that the requested bandwidth must be less than or equal to the available one, when this request is examined. If the request cannot be met, i.e. the requested bandwidth is greater than the available one, then that request is rejected.When the search focuses on the request sequence (Level 2), the paths associated with each request are kept fixed, and the sequence of requests constitutes the decision variable. The decision variables in this case are represented by the ordered sets of requests, indicated by R1, R2, â¦, Rm, which define a priority order for request answering.Several former works consider the routing as the unique space of search â this is called here the single-level approach. The proposed algorithm (the two-level approach) implements the Level 1 and the Level 2 encodings, which allow the construction of routing solutions that are built according to different request sequences. Although, in the case of solutions that accomodate all requests, both approaches are able to find the same solutions, it should be noticed that the two-level approach is able to deal with partial solutions which may be rather useful in the construction of the final solution. This means that the two-level approach is likely to become more efficient in the search than the single-level approach. Of course, in the case of those problems in which some requests are not attended, the single-level approach is not applicable.The solution decoding procedure evaluates an individual according to the steps described in Algorithm 2. The evaluation of an individual starts with the request which is situated on the top of the request list, proceeding to the next one immediately bellow, and so forth. It should be noticed that if in any link the available bandwidth is not enough, then a local search is performed within the decoding procedure, which may modify the individual.Algorithm 2Solution Decoding1:forkâ1 to mdo2:if there is available bandwidth in all links of request kthen3:â¢ request k is marked as âattendedâ4:â¢ the available bandwidth in each link of the path is reduced by the amount bk5:else6:â¢ a maximum path search is conducted from the origin to the destination of the request, considering the value of the available bandwidth in each link as the corresponding edge length7:if the request can be attended in this new path then8:â¢ the path sequence is updated9:â¢ the request is marked as âattendedâ10:â¢ the available bandwidth in each link of the new path is reduced by the amount bk11:else12:â¢ the request is marked as ârejectedâ13:end if14:end if15:end forAfter the evaluation of an individual, the objective function values can be estimated for such an individual. The objective function F1 accumulates the number of nodes between the source and the destination of all attended requests; the objective function F2 accumulates the number of rejected requests; and the objective function F3 registers the percentual of occupation of the most loaded link in the network.The initial population of VN-MGA is composed of N individuals. The ordering of the requests in each individual of this initial population is chosen randomly. The initial paths are chosen such that: (i) 10% of the individuals are constructed with a minimum path algorithm, considering the number of links as the path length; (ii) 10% of the individuals are constructed with a minimum path algorithm, considering the percentual of bandwidth occupation of each link as the edge length; (iii) 10% of the individuals are constructed with a maximum path algorithm, considering the number of links as the path length; (iv) 70% of the individuals are created with a minimum path algorithm, considering random weights in the links.It should be noticed that the individuals created in steps (iii) and (iv) are relevant in order to provide a diversity of the solutions in the genetic pool of the initial population.Two different crossover operators are implemented, for the two levels. Level 1 crossover consists in the exchange of genetic material between individuals concerning the encoded routes. This crossover is implemented as described in Algorithm 3. Level 2 crossover performs combinations of individuals concerning the request sequence. This crossover operator, which is illustrated in Fig. 5, is presented in Algorithm 4. Both crossover operators deliver only one offspring.Algorithm 3Level 1 Crossover1:â¢ Two individuals Iiand Ijare selected randomly;2:ifIiâºIjthen3:OâIi4:else ifIjâºIithen5:OâIi6:else7:forkâ1 to mdo8:if the paths of request k in both individuals share some nodes then9:â¢ choose a common node ncrandomly;10:â¢ the path of request k in offspring solution O starts in node ok, using the path of individual Iiuntil node nc, and then proceeds with the path of individual Ikuntil node dk(see Fig. 3);11:else if there is a node ndwhich is reachable, in one step, from some node of the path of individual Ij, and which either belongs to the path of individual Ikor reaches this path in one step then12:â¢ the path of request k in offspring solution O starts in node ok, using the path of individual Iiplus one step outside this path, until node nd, and then proceeds with the path of individual Ijuntil node dk, eventualy employing one step outside this path (see Fig. 4);13:else14:â¢ the offspring solution O inherits the path of request k either from Iior from Ij, chosen randomly.15:end if16:end for17:end if18:return offspring OFigs. 3â5Algorithm 4Level 2 Crossover1:Two individuals are selected randomly;2:A request is chosen randomly;3:The two routes that are associated to that request in the different individuals are swapped, generating a new individual.The mutation operators are responsible for the insertion of new genetic characteristics in the population. As in the case of crossover operators, the mutation operators are also implemented in two levels. The Level 1 Mutation is presented in Algorithm 5, and the Level 2 Mutation is presented in Algorithm 6. In the Level 1 Mutation, a new section of the mutated route is created. This search is performed in forward and backward directions (from the first to the second cutoff point, and in the opposite direction, from the second to the first cutoff point), alternately, avoiding any bias in this search. Fig. 6illustrates this mutation process. Level 2 Mutation just performs a swap of the position of requests in the precedence list. This mutation operator is illustrated in Fig. 7.Algorithm 5Level 1 Mutation1:â¢ an individual is randomly chosen;2:forkâ1 to mdo3:â¢ p is chosen from a uniform distribution in the interval [0, 1];4:ifp<pmutthen5:â¢ Two cutoff points are randomly chosen in the path of request k;6:â¢ The Dijkstra algorithm looks for a new path considering random costs distributed on the links, joining the first cutoff point to the second one.7:end if8:end forAlgorithm 6Level 2 Mutation1:Choose an individual randomly;2:Randomly select two requests;3:Swap the position of those requests in the sequence.The basic structure of the Variable Neighborhood Multiobjective Genetic Algorithm (VN-MGA) proposed here is similar to the classical Non-dominated Sorting GA (NSGA-II), described in [8]. The following features of NSGA-II are used inside VN-MGA:1Non-dominated sorting: consists in sorting the solutions according to the non-dominance ranking. An individual belonging to rank 1 is not dominated by any solution, while an individual belonging to rank q is dominated by at least one individual that belongs to rank qâ1 and by no solution belonging to rank q or greater. This ensures that solutions belonging to lower dominance ranks are better than solutions situated at higher ranks.Crowding-distance: The crowding distance is used as a measure of occupation in the neighborhood of a solution in the objective space. This indicator is defined as the sum of the edge lengths of a hypercube with vertices situated on the â nearest solutions (in which â stands for the dimension of the objective space). The crowding distance is used as the comparison criterion between solutions situated in the same rank, providing an advantage to the solutions which have the nearest neighbors at larger distances. This helps to avoid situations where the obtained solution set is too concentrated in a small (crowded) region, leading the algorithm to produce more uniform samplings of the Pareto-optimal set.Binary tournament: consists in choosing two individuals randomly and comparing them according to a fitness function. The one with best fitness evaluation is selected. In such a comparison, the rank is used as the first criterion and, in the case of solutions with same rank, the crowding distance is used in order to determine the result of the tournament.Algorithm 7VN-MGA pseudocode.1:Generate an initial populationQwith N individuals;2:Evaluate the objective functions onQ;3:Assign the non-dominated sorting ranking to the individuals ofQ;4:Assign the crowding distances to the individuals ofQ;5:while not stop condition 0 do6:while not stop condition 1 do7:Using a binary tournament, considering the non-dominated sorting rankings and the crowding distances, select 0.75N individuals fromQ, forming populationC, and select other 0.75N individuals fromQ, forming populationM8:Perform Level 1 crossover on the individuals ofC, generating a subpopulationCÂ¯with a number of individuals equal to 0.75N;9:Perform Level 1 mutation on the individuals ofM, generating a subpopulationMÂ¯with a number of individuals equal to 0.75N;10:Evaluate the objective functions on the individuals ofCÂ¯andMÂ¯;11:Join the populationQwith subpopulationsCÂ¯andMÂ¯, forming populationQÂ¯=QâªCÂ¯âªMÂ¯;12:Assign the non-dominated sorting ranking to the individuals ofQÂ¯;13:Assign the crowding distances to the individuals ofQÂ¯;14:Select deterministically N individuals fromQÂ¯, considering the non-dominated sorting rankings and the crowding distances, forming populationQ;15:end while16:while not stop condition 2 do17:Using a binary tournament, considering the non-dominated sorting rankings and the crowding distances, select 0.75N individuals fromQ, forming populationC, and select other 0.75N individuals fromQ, forming populationM18:Perform Level 2 crossover on the individuals ofC, generating a subpopulationCÂ¯with a number of individuals equal to 0.75N;19:Perform Level 2 mutation on the individuals ofM, generating a subpopulationMÂ¯with a number of individuals equal to 0.75N;20:Evaluate the objective functions on the individuals ofCÂ¯andMÂ¯;21:Join the populationQwith subpopulationsCÂ¯andMÂ¯, forming populationQÂ¯=QâªCÂ¯âªMÂ¯;22:Assign the non-dominated sorting ranking to the individuals ofQÂ¯;23:Assign the crowding distances to the individuals ofQÂ¯;24:Select deterministically N individuals fromQÂ¯, considering the non-dominated sorting rankings and the crowding distances, forming populationQ;25:end while26:end while

@&#CONCLUSIONS@&#
This paper proposed an algorithm to optimize the multiple objectives that represent Quality of Service indices on IP networks. The proposed algorithm, VN-MGA, is a Genetic Algorithm based on the NSGA-II, with the particular feature that each solution has two different encodings, at Level 1 and Level 2. At Level 1, the solution is encoded considering as decision variables the edges that form the routes to be followed by each request. At Level 2, the solution is encoded with the routes considered as fixed, and the sequence of requests considered as the decision variable. The results suggest that local minima can be indeed avoided using this approach.The good behavior presented by the proposed VN-MGA, outperforming some algorithm versions that do not employ variable neighborhood algorithm, raises an interesting issue to be studied: should the evolutionary algorithms specialized in combinatorial optimization problems employ variable neighborhood operators as a standard methodology? The authors intend to investigate this issue in the near future.Concerning the MPLS problem, a challenging area of future work concerns a quantitative analysis, covering sensitivity and scalability. The sensitivity deals with fault tolerance in paths or routers and the re-routing capacity of the proposed method. Using new scenarios, it is possible to assess the scalability in order to quantify the gain that is expected with the application of the proposed algorithm. Within this perspective, it is also possible to suggest new models for telecommunication networks. In any case, the proposed approach delivers a reasonable diversity of solutions belonging to the Pareto front. So, it offers a larger range of options for the decision maker in different situations, such as in: (i) network congestion that occurs in rush hours, or (ii) using applications that require a small delay, or (iii) responding to concurrent requests that do not present stringent requirements of delay, but require large bandwidths, among others.