@&#MAIN-TITLE@&#
A fuzzy set-based approach to origin–destination matrix estimation in urban traffic networks with imprecise data

@&#HIGHLIGHTS@&#
A fuzzy set O–D estimation model based on imprecise generation and distribution data.Model solved using successive linear approximation.Efficient implicit enumeration of O–D routes by column generation.Numerical tests providing insights into performance characteristics.Favourable computational experience compared to previous approaches.

@&#KEYPHRASES@&#
Traffic,O–D matrix estimation,Successive linear approximation,Linear programming,Fuzzy sets,

@&#ABSTRACT@&#
An important issue in the management of urban traffic networks is the estimation of origin–destination (O–D) matrices whose entries represent the travel demands of network users. We discuss the challenges of O–D matrix estimation with incomplete, imprecise data. We propose a fuzzy set-based approach that utilises successive linear approximation. The fuzzy sets used have triangular membership functions that are easy to interpret and enable straightforward calibration of the parameters that weight the discrepancy between observed data and those predicted by the proposed approach. The method is potentially useful when prior O–D matrix entry estimates are unavailable or scarce, requiring trip generation information on origin departures and/or destination arrivals, leading to multiple modelling alternatives. The method may also be useful when there is no O–D matrix that can be user-optimally assigned to the network to reproduce observed link counts exactly. The method has been tested on some numerical examples from the literature and the results compare favourably with the results of earlier methods. It has also been successfully used to estimate O–D matrices for a practical urban traffic network in Brazil.

@&#INTRODUCTION@&#
As urban populations expand and city streets become increasingly congested, city planners need comprehensive urban development and transport policies to address social and demographic change. Effective policies must meet multiple objectives, strike a balance between different modes of transport, provide security, safety and high user service, promote economic development and reduce urban pollution. Longer-term solutions, such as upgrading public transit systems and introducing city-centre road tolls have been introduced in some large cities. However, shorter-term solutions, such as implementing high-performance traffic management programmes can be crucial to the success of city planning and the formulation of transportation policy. Reliable estimation of origin–destination (O–D) matrices is often an important first step in achieving the above objectives.For many decades various methodologies have been developed for estimating or adjusting O–D matrices. The high cost of conventional survey techniques for O–D matrix estimation has motivated the development of models that can estimate these demands from less expensive observed link counts (traffic volumes) on network streets. The estimation of O–D matrices and link counts are related to each other by the assignment of traffic to the various routes between each O–D pair.User-equilibrium traffic assignment models are commonly used nowadays to capture user route choice behaviour. Deterministic assignment models assume all users have perfect information about the generalised travel costs they will encounter and will select routes with the lowest perceived travel cost. Travel costs are known to vary across trips, both within and between days. Stochastic assignment models take these variations into account and feature randomly distributed variables that allow generalised travel costs to be modelled differentially and to vary in importance across the population of users. These models are useful for the analysis of practical traffic networks where it is difficult to observe and explain all the factors that motivate route choice. Consequently, only easily-observed surrogates of the explained factors, such as travel costs are usually included. Various assignment models and solution techniques have been discussed by Sheffi (1985). More recent summaries of contributions to date have been provided by Chen and Alfa (1991), Ying et al. (2007) and Xie and Waller (2012). User-equilibrium assignment is assumed throughout this article because it usually models user route choice reasonably accurately.We now discuss some of the more prominent user-equilibrium assignment-based O–D matrix estimation methods. Gur et al. (1980) developed an iterative technique that employs the Frank–Wolfe algorithm as a subroutine within their respected LINKOD system. More recently, bi-level mathematical programming models with equilibrium constraints have come into prominence. In these models the upper level is concerned with O–D matrix estimation based on link counts and other prior information. The lower level is concerned with user-equilibrium assignment based on the best current estimate of the matrix. One broad solution approach for bi-level models involves minimising at just one of the levels, typically with a search direction algorithm (Spiess et al., 1990; Florian and Chen, 1995; Codina and Barceló, 2004; Codina et al., 2006). Also, approximation methods have been frequently used to solve the traffic assignment problem at the lower level (Yang et al., 1992; Yang, 1995; Zhang et al., 1999; Codina et al., 2006). There are also column generation-based methods that iterate between user-equilibrium assignment and a matrix updating process (García-Ródenas and Verastegui-Rayo, 2008; García-Ródenas and Marín, 2009). The various main types of O–D matrix estimation methods have been surveyed by Viti (2008).Sherali et al. (2003) mentioned a non-linear O–D matrix estimation formulation and used a successive linear approximation method (see Palacios-Gomez et al., 1982) to compute a heuristic solution to the formulation. These authors have presented evidence that their method outperforms the maximum entropy approach of Van Zuylen and Willumsen (1980) as implemented by Bromage (1991).It is well-known in the practical management of large-scale urban traffic networks that link counts and travel demands cannot be measured comprehensively at all locations. Thus we assume that the input data includes incomplete prior estimates of link counts, O–D matrix entries, origin departures and destination arrivals. Also it is unlikely that these input data will be precise, with only average values of link counts and travel demands available. Consequently, it is desirable to develop O–D matrix estimation models and solution techniques that take this incompleteness and imprecision into account. Here we are concerned with simulating a given urban traffic network, rather than organising its daily operations. We therefore focus on networks that are static (studied for one time period only). We discuss the challenges of O–D matrix estimation with incomplete, imprecise input data where it is assumed that there is a non-linear relation between link flows and link travel costs. We approximate the resulting non-linear model by a sequence of linear models and propose an O–D matrix estimation method that is based on linear programming in a fuzzy decision environment. The method is also useful when there does not exist a “correct” O–D matrix that can be user-optimally assigned to the network to reproduce the observed link counts exactly.The basic elements of the theory of fuzzy sets were introduced by Zadeh (1965) and their application to linear programming in a fuzzy environment has been popularised by Zimmermann (1983) and Rommelfanger (1996), among others. We now discuss some of the research that has been reported in the literature on the application of fuzzy sets and fuzzy logic to O–D matrix estimation. Reddy and Chakroborty (1998) developed a fuzzy bi-level inference-based assignment method and applied a maximum entropy model in the upper level. Nanda and Kikuchi (1993) presented a two-stage method for when trip generation and trip attraction counts are approximate. In the first stage the existence of a consistent travel pattern is investigated. If a pattern is found to exist then back-propagation neural networks are used to identify an estimated O–D matrix in the second stage. Biletska et al. (2009) developed a dynamic two-stage method for short-time O–D matrix estimation at just a single signalised intersection for a traffic light cycle using fuzzy-timed high-level Petri nets. Since the data used to estimate the matrix are imprecise, the authors represent them as fuzzy numbers. Jassbi et al. (2011) have presented a three-phased fuzzy inference model to map social and demographic variables to O–D matrix entries. Fuzzy rule bases in the model rely upon transportation experts’ subjective patterns.Despite the potential of using fuzzy logic for O–D matrix estimation, there has been little attention given to the topic in the literature. Furthermore, as far as we are aware, the method presented in this paper is the first to use the combination of fuzzy linear programming (FLP) and successive linear approximation (SLA) for this challenge with incomplete and imprecise data.The contributions of the paper are:•A fuzzy set model of O–D matrix estimation based on incomplete and imprecise link count and travel demand input data.A demonstration that FLP can be used to estimate O–D matrices successfully with these data.A discussion of the efficient implicit enumeration of the required O–D routes by column generation.Favourable computational experience with an FLP-based method that provides insights into its performance characteristics in comparison with other SLA and bi-level approaches.The remainder of this article is organised as follows. In the next section we develop a general formulation of O–D matrix estimation. In Sections 3 and 4 we present a new O–D matrix estimation model that is based on SLA in a fuzzy decision environment. In Section 5 the method is illustrated by using it to solve some numerical examples from the literature and to estimate O–D matrices for a practical Brazilian urban traffic network. Computational experience is also discussed. A summary and some conclusions complete the article in Section 6.In order to develop and compare O–D matrix estimation methods, we adopt the notation introduced by Sherali et al. (2003). LetG=(N,A)be a given traffic network with node setNand link (arc) setA. The nodes inNmay represent either actual intersections of roads and streets or more general zones. The links inArepresent the roads and streets of interest. LetObe the set of possible origin (source) nodes andDbe the set of possible destination (sink) nodes, both inN. Usually the setsOandDhave many nodes in common. LetODbe the set of origin–destination pairs for all possible routes that could be reasonably used in any rational traffic assignment.ODprovides the rows and columns of the target O–D matrixTthat we wish to estimate. For all(i,j)∈OD, the i–j entry ofTisTij, the average number of users with origin node i and destination node j. LetQijbe a working estimate ofTij. If it is available,Qij′is a prior estimate ofTij.Qijis progressively updated fromQij′untilQijconverges to the final estimate ofTij.Suppose that prior travel demand estimates are given for some origin–destination pairs, denoted byOD′(⊆OD). We later deal with the case when few, or no such estimates are available. For each(i,j)∈OD′it is assumed thatQijcannot be defined as a precise value. Nevertheless, it can be triangulated byQij′and by non-negative deviationsqijLandqijU, all given constants. We use the standard notationqijL,Qij′,qijUto denote thatQijis triangulated in this way. For each(i,j)∈OD′it is desirable to find a final value ofQijas close as possible toQij′. Also,(2.1)0⩽Qij′-qijL⩽Qij⩽Qij′+qijU,∀(i,j)∈OD′.Property 1∀(i,j)∈OD′,Qijis triangulated asqijL,Qij′,qijU, whereQij′-qijL⩾0. The triangulation aboutQij′is symmetric if and only ifqijL=qijU.Qijis not constrained as in(2.1)whenever(i,j)∈OD⧹OD′(that is, when noQij′estimate is available).In modelling urban traffic networks we have often found it difficult to obtain reliable estimates of the origin–destination travel demandsQij. It is frequently easier to obtain reliable estimates of trip generation data, that is, the number of users that depart from various origins and/or the number of users that arrive at various destinations. Along with any reliable estimatesQij′that can be identified, any additional reliable origin departure and destination totals are also used in estimatingT. It will be seen that this leads to multiple modelling alternatives, which may bring about a desirable increase in flexibility. We now make these ideas more precise.Where they are available, let the variablesOiandDjdenote the number of departures from the ith origin and arrivals at the jth destinations ofN, respectively. As withQijearlier, these numbers are unlikely to be exact and thus are also average values that can be triangulated. Prior estimates of them are given asOi′andDj′, respectively. These estimates are bounded by non-negative deviationsoiLandoiU(djLanddjU), all given constants. That is, for certain originsi∈O′⊆O(destinationsj∈D′⊆D),OiandDjare triangulated asoiL,Oi′,oiUanddjL,Dj′,djU, respectively. It is desirable to find a final value ofOi(Dj)that is as close as possible toOi′Dj′, respectively. Also,(2.2)0⩽Oi′-oiL⩽Oi⩽Oi′+oiU,∀i∈O′,and(2.3)0⩽Dj′-djL⩽Dj⩽Dj′+djU,∀j∈D′.Analogous statements to Properties 1 and 2 can be made for (2.2) and (2.3).LetAVbe the subset ofAfor which prior link counts are available andAMbe the subset ofAfor which prior link counts are unavailable. ThusA=AV∪AM. Let fadenote the (non-negative) flow in link a, for all linksa∈A. Once again, the favalue corresponding to each link inAdoes not have a precise value, but an average value that will vary over the time horizon of any study. As before,fa,∀a∈AV, is triangulated by an observed link countfa′and by deviationssaLandsaU, that are all non-negative given constants. Each link countfa′is the estimated average value of fa. It is desirable to find a final value of fathat is as close as possible tofa′. Thus,(2.4)0⩽fa′-saL⩽fa⩽fa′+saU,∀a∈AV.Analogous statements to Property 1 can be made for (2.4). The fa(non-negative) values representing flow in the links ofAMare not triangulated nor constrained as in (2.4).We begin constructing models with the aim of estimating the matrixT. The following notation is defined for each origin–destination pair(i,j)∈OD. Let nijbe the number of distinct possible routes from origin node i to destination node j that are considered of potential use by users. Letpijk, a binary column vector, denote the kth route from origin i to destination j, where k=1, 2, …, nij. Herepijka=1ifpijkcontains link a and =0, otherwise. Letxijkbe the number of users ofpijk.The parameters just introduced are related to the variables that were defined earlier as follows:(2.5)Qij=∑k=1nijxijk,∀(i,j)∈OD,(2.6)Oi=∑j∈D∑k=1nijxijk,∀i∈O,(2.7)Dj=∑i∈O∑k=1nijxijk,∀j∈D,(2.8)fa=∑(i,j)∈OD∑k=1nij(pijk)a·xijk,∀a∈A.By substituting 2.5, 2.6, 2.7 and 2.8 into 2.1, 2.2, 2.3 and 2.4 respectively, we have the following constraints on thexijk’s:(2.9)0⩽Qij′-qijL⩽∑k=1nijxijk⩽Qij′+qijU,∀(i,j)∈OD′,(2.10)0⩽Oi′-oiL⩽∑j∈D∑k=1nijxijk⩽Oi′+oiU,∀i∈O′,(2.11)0⩽Dj′-djL⩽∑i∈O∑k=1nijxijk⩽Dj′+djU,∀j∈D′,(2.12)0⩽fa′-saL⩽∑(i,j)∈OD∑k=1nijpijka·xijk⩽fa′+saU,∀a∈AV,and(2.13)0⩽xijk,∀(i,j)∈ODandk=1,…,nij.To find the most appropriate assignmentX={xijk|(i,j)∈OD,k=1,…,nij}, we usually need additional information about how users choose their individual O–D routes. As is well known, users often choose their O–D routes according to their perceived cost of the various available routes. The cost of each route is assumed to be the sum of the traversal costs of its constituent links. Let the unit traversal cost of linka,∀a∈A, be denoted by ca(f), where all link flows are assembled as the vectorf. Methods for the estimation of the parameters of the function ca(f) have been provided by García-Ródenas and Verastegui-Rayo (2012).Recall that the links inAVhave flows reflecting prior observed link counts. No such information is available for the remaining links, belonging toAM(=A⧹AV). A common practice in this case is to assume that the flow in each of these links is initially zero and to use an iterative process of assignment to predict the flows in the links inAM. The flowsfin linksAVand inAM, as they are predicted, can be substituted in the functions ca(f) to predict link costs.We assume that the traffic pattern in G reflects a user-equilibrium assignment that is based on Wardrop’s First Principle (Wardrop, 1952). That is, the costs of all routes actually used are equal, and less than those that would be experienced by a single user on any unused route. Letcijkbe the unit traversal cost of the kth route from origin node i to destination node j for each user, under current conditions for the present time period. Then(2.14)cijk=∑a∈Apijka·ca(f),∀(i,j)∈OD,k=1,…,nij.Let the cost of the least cost routes belonging to the setPij={pijk|k=1,…,nij}be denoted by the non-negative numbercij∗. That iscij∗=mincijk|k=1,…,nij. Consider the costs of some of the other (greater-cost) routes belonging toPijthat may possibly be used. For the proposed method, the actual costs of these routes need not be known, only that they are greater thancij∗.We shall construct a model that aims to produce final values of thexijkvariables that are as close as possible to a user-equilibrium assignment. Once values for these variables have been identified, the estimates of the entries ofTcan be calculated using (2.5). As is well known, the user equilibrium assignment is unique in the space of the link flows for a problem with constraints 2.5, 2.8 and 2.13 if the objective function of total user cost is strictly convex (Steenbrink, 1974). However, in this article we assume that the parametersQij,Oi,Djand faare imprecise which, in general, means that solution uniqueness is lost.Here we demonstrate how each relevant average O–D route costcijkcan be approximated by a succession of constantsCijk, in order to produce an user-equilibrium assignment by SLA. We modify the O–D route costs in order to attempt to assign users to one of their least-cost O–D routes. If this can be achieved, according to Wardrop’s First Principle, the result will be a user-equilibrium assignment with respect to theCijk’s. LetKij=k|k=1,…,nij;cijk=cij∗. LetKij′={1,…,nij}⧹Kij. We modify thecijkvalues for each(i,j)∈OD, as follows:(2.15)Cijk=cij∗,∀k∈Kij,(2.16)Cijk=M·cij∗,∀k∈Kij′;where M is a suitably chosen positive real number. Sherali et al. (1994) provide guidance for setting the penalty parameter M and these authors used M=2 in their reported numerical experiments. We also used M=2 in the tests reported in Section 5 with satisfactory results. In the next section we discuss a conventional LP (linear programming) model of O–D matrix estimation.As stated in Property 1, the variablesQij,Oi,Djand faare imprecise and consequently are triangulated. This enables us to construct a model of O–D matrix estimation based on conventional LP, denoted by Model 0, given in Appendix A.The objective function in Model 0 involves the modified route costs defined in (2.15) and (2.16) in order to identify a user-equilibrium assignment subject to 2.9, (2.10)–(2.13). Incidentally, suppose that the original O–D route costs (not the previously defined modified costs) are used in Model 0. Then if it exists, Model 0 will identify a system-optimal assignment. A system-optimal assignment is useful in the attempt to establish lower bounds on the total user-equilibrium cost, exhaust gas emissions and other potentially useful statistics.Solution approaches for Model 0 accept that imprecision is equivalent to randomness. Here, randomness in concerned with the uncertainty of the membership of an exact set. That is, in the optimisation process it is equally likely, and equally acceptable, that any variable can be set to any value within its feasible interval. However, recall that it is desirable to identify values ofQij,Oi,Djand fathat are as close as possible to the prior specifications of travel demand and observed link counts, namely:Qij′,Oi′,Dj′andfa′, respectively. Because of this, we reject the uniform distribution approach (randomness) of conventional LP. Instead, we choose a fuzzy set approach to O–D matrix estimation and we create an LP model that has fuzzy variables as input data. Towards this end we first develop a fundamental fuzzy model of O–D matrix estimation.To indicate the imprecise nature of theQij,Oi,Djand favalues, we substitute fuzzy versions of them in the relationships (2.5)–(2.8), denoted by:Q∼ij,O∼i,D∼jandf̃a, respectively. Then the conventional LP Model 0 becomes the following fundamental fuzzy model of O–D matrix estimation:Model 1:(3.1)Minimisez̃(X)=∑(i,j)∈OD∑k=1nijCijk·xijk(3.2)subjectto∑k=1nijxijk=Q∼ij,∀(i,j)∈OD′,(3.3)∑j∈D∑k=1nijxijk=O∼i,∀i∈O′,(3.4)∑i∈O∑k=1nijxijk=D∼j,∀j∈D′,(3.5)∑(i,j)∈OD∑k=1nijpijka·xijk=f̃a,∀a∈AV,(3.6)xijk⩾0,∀(i,j)∈ODandk=1,…,nij.The objective function (3.1) involves the modified route costs in order to identify a user-equilibrium assignment that is subject to fuzzy constraints on the prior specifications of the travel demands and the observed link counts. It is proposed to solve Model 1 by FLP.A fuzzy set is a class of objects with a continuum of grades of membership. Such a set is characterised by a membership function that assigns each object in the class a grade of membership between zero and one (Zadeh, 1965, 1978). Bellman and Zadeh (1970) proposed optimising an objective function subject to constraints having input parameters represented as fuzzy numbers. It is standard procedure in applied fuzzy linear programming to create a symmetric fuzzy set model (SFSM) of (3.1)–(3.6) (see Zimmermann, 1983). That is, a model that creates membership functions for (3.1)–(3.5), and treats the objective (3.1) in the same way as the constraints (3.2)–(3.5).We seek to transform an SFSM into a crisp (deterministic) model by defining and using appropriate membership functions. Fuzzy goals and fuzzy constraints can be defined precisely as fuzzy sets in the space of alternatives. A fuzzy decision then, may be viewed as an intersection of the given goals and constraints. We now define membership functions for the solutions to the combination of the objective function (3.1) and the sets of constraints (3.2)–(3.5).The objective functionz̃(X)in (3.1) will vary as the variablesQij,Oi,Djand favary between their upper and lower limits, as specified in (2.9)–(2.13). As the variablesQij,Oi,Djand faare fuzzy numbers,z̃(X)is a fuzzy set. We are interested in constructing the membership functionμz(X)say, ofz̃(X). Suppose that zUand zLare the maximum and minimum possible values respectively, thatz̃(X)could possibly assume as a feasible assignment in the region specified by the constraints (2.9)–(2.13). It is assumed that zUand zLare both finite real numbers with zL⩽zU. AlthoughzL⩽z̃(X)⩽zUholds for all feasibleX, it is customary in FLP to defineμZ(X)for all conceivablez̃(X). As the system (3.1)–(3.5) is linear with solely non-negative parameters,μz(X)is thus defined as:(3.7)μz(X)=1,ifz̃(X)⩽zL,(zU-z̃(X))/(zU-zL),ifzL⩽z̃(X)⩽zU,0,otherwise.Naturally, ifzL=zU,z̃(X)degenerates to the crisp number zL. We can calculate zLand zUas the optimal solutions to Models 0 and 2 respectively, given in Appendix A. In the next sections we demonstrate how the system (3.1)–(3.6) can be tackled using FLP (see Zimmermann, 1996).∀(i,j)∈OD′, let(3.8)μij(X)=∑k=1nijxijk-Qij′-qijLqijLifQij′-qijL⩽∑k=1nijxijk⩽Qij′,Qij′+qijU-∑k=1nijxijkqijUifQij′⩽∑k=1nijxijk⩽Qij′+qijU,0,otherwise;∀i∈O′, let(3.9)μiO(X)=∑j∈D∑k=1nijxijk-Oi′-oiLoiL,ifOi′-oiL⩽∑j∈D∑k=1nijxijk⩽Oi′,Oi′+oiU-∑j∈D∑k=1nijxijkoiU,ifOi′⩽∑j∈D∑k=1nijxijk⩽Oi′+oiU,0,otherwise;∀j∈D′, let(3.10)μjD(X)=∑i∈O∑k=1nijxijk-Dj′-djLdjL,ifDj′-djL⩽∑i∈O∑k=1nijxijk⩽Dj′,Di′+djU-∑i∈O∑k=1nijxijkdjU,ifDj′⩽∑i∈O∑k=1nijxijk⩽Dj′+djU,0,otherwise;∀a∈AV,(3.11)μa(X)=∑(i,j)∈OD∑k=1nijpijka·xijk-fa′-saLsaL,iffa′-saL⩽∑(i,j)∈OD∑k=1nijpijka·xijk⩽fa′,fa′+saU-∑(i,j)∈OD∑k=1nijpijka·xijksaU,iffa′⩽∑(i,j)∈OD∑k=1nijpijka·xijk⩽fa′+saU,0,otherwise.As can be seen, (3.8)–(3.11) are triangular membership functions that are easy to interpret and enable straightforward calibration of the parameters that weight the discrepancy between observed data and those predicted by the proposed FLP approach to be described in the next section.We begin the application of FLP by aggregating the system (3.7)–(3.11) into an equivalent crisp LP model. Following Wu and Guu (2001), we achieve this by introducing a unique auxiliary variable for each membership function constraint. The aim of this is to identify simultaneously a user-equilibrium traffic assignment and to maximise the average of the satisfaction levels of all the membership function constraints.Let(3.12)λ=λz+MOD·∑(i,j)∈OD′λij+MO·∑i∈O′λiO+MD·∑j∈D′λjD+MA·∑a∈AVλaA,where the coefficientsMOD,MO,MDandMAare suitably chosen normalised non-negative real-valued weights. The relative weights chosen depend upon the relative importance to the user of finding an equilibrium solution, satisfying the link count constraints or the travel demand constraints. Sherali et al. (2003) have provided guidance for the selection of the weights.Model 3:(3.13)Maximiseλ,(3.14)subjecttoλz⩽μz(X),(3.15)λij⩽μij(X),∀(i,j)∈OD′,(3.16)λiO⩽μiO(X),∀i∈O′,(3.17)λiD⩽μiD(X),∀j∈D′,(3.18)λaA⩽μa(X),∀a∈AV,(3.19)0⩽xijk,∀(i,j)∈OD′,k=1,2,…,nij,(3.20)0⩽λij,λiO,λjD,λaA⩽1,∀(i,j)∈OD′,∀i∈O′,∀j∈D′,∀a∈AV.Substituting the relationships 3.7, (3.8)–(3.11) into 3.14, (3.15)–(3.18), we have the normalised weighted averaging crisp model:Model 4:(3.21)Maximiseλ=λz+MOD·∑(i,j)∈OD′λij+MO·∑i∈O′λiO+MD·∑j∈D′λjD+MA·∑a∈AVλaA,(3.22)subjectto∑(i,j)∈OD∑k=1nijCijk·xijk+(zU-zL)·λz⩽zU,(3.23)∑k=1nijxijk-qijL·λij⩾Qij′-qijL,∀(i,j)∈OD′,(3.24)∑k=1nijxijk+qijU·λij⩽Qij′+qijU,∀(i,j)∈OD′,(3.25)∑j∈D∑k=1nijxijk-oiL·λiO⩾Oi′-oiL,∀i∈O′,(3.26)∑j∈D∑k=1nijxijk+oiU·λiO⩽Oi′+oiU,∀i∈O′,(3.27)∑i∈O∑k=1nijxijk-djL·λjD⩾Dj′-djL,∀j∈D′,(3.28)∑i∈O∑k=1nijxijk+djU·λjD⩽Dj′+djU,∀j∈D′,(3.29)∑(i,j)∈OD∑k=1nijpijka·xijk-saL·λaA⩾fa′-saL,∀a∈AV,(3.30)∑(i,j)∈OD∑k=1nijpijka·xijk+saU·λaA⩽fa′+saU,∀a∈AV,(3.31)0⩽xijk,∀(i,j)∈OD′,k=1,2,…,nij,(3.32)0⩽λij,λiO,λjD,λaA⩽1,∀(i,j)∈OD′,∀i∈O′,∀j∈D′,∀a∈AV.The higher the value of λ is, the closerXwill be to an assignment that satisfies the constraints:(3.33)∑(i,j)∈OD∑k=1nijCijk·xijk=zL,(3.34)∑k=1nijxijk=Qij′,∀(i,j)∈OD′,(3.35)∑j∈D∑k=1nijxijk=Oi′,∀i∈O′,(3.36)∑i∈O∑k=1nijxijk=Dj′,∀j∈D′,(3.37)∑(i,j)∈OD∑k=1nijpijka·xijk=fa′,∀a∈AV.Once an assignmentXhas been identified, a corresponding estimate ofT, the O–D matrix, can be calculated using (2.5). When all the links of G have link counts available(AV=A), Model 4 is sufficient to make an O–D matrix estimation in one iteration, that is, just the LP of Model 4 has to be solved. In the next section we present the complete method, called FLIPSOD, that incorporates Model 4 within an SLA scheme to deal with all cases including whenAM≠∅. One obvious way of dealing with this situation is to employ a non-linear assignment process that calculates all relevant route costs as functions of the route flows. Sherali et al. (2003) have pointed out the significant pitfalls of attempting to use these outputted costs within an LP model of O–D matrix estimation. Instead, as mentioned earlier, those authors have reported an LP-based heuristic that aims to determine an assignment that produces an O–D matrix estimate. The proposed method is based upon Model 4 and the method of Sherali et al. (2003) is based on the model denoted by LP (TT) in Sherali et al. (1994). A comparison of the two models is now made:•Model 4 accommodates asymmetric link costs but LP (TT) accommodates only symmetric ones. This is a major difference between the two models.LP (TT) contains implicitly the relationshipca≡ca(fa),∀a∈AV, whereas Model 4 does not. The relationship is relaxed in Model 4 to enable more flexibility is striking a balance between satisfying (3.29) and (3.30) and attaining user equilibrium when both are not compatible.Model 4 has a maximisation objective and LP (TT) one of minimisation. This comes about because Model 4 is an FLP in which weighted sums of membership function-related variables are maximised so as to produce solution variables that are as close as is feasibly possible to the given observations. This is handled in a different way in LP (TT), which is a conventional LP where weighted sums of artificial variables are minimised with the same aim. Comments on the use of FLP, as opposed to conventional LP, have been made in Section 2.5.In Model 4Z(X), the total user cost is represented by an unweighted membership function-related variable λz, whereas in LP (TT) it is also unweighted but is expressed explicitly. In both models,Z(X)is included in the objective function to attain user-equilibrium through the use of (2.15) and (2.16). The relative importance of this, compared to being close to the given observations, can be reflected in both models by the selection of the weights of the other objective function variables. In this sense there is no difference between the two models.A constraint forZ(X)is included only in Model 4. This represents a key difference between symmetric FLP and conventional LP models.A drawback of Model 4 is that upper and lower bounds onZ(X)have to be calculated. When the model is embedded in an iterative procedure, these bounds have to be, in theory, recalculated at each step. But the required bounds do not have to be very sharp and the same bounds can usually be used for a number of iterations. Indeed, a bound has to be recalculated only when its constraint becomes binding. It is our experience that this seldom occurs in practice. Furthermore, the recalculation usually involves only minor sensitivity analysis of relatively few objective function coefficients. By using solution information from the previous revised simplex iteration, this requirement is usually not computationally burdensome.A drawback of LP (TT) is that two artificial variables are introduced into each constraint whereas in Model 4, only one new variable (a λ) is necessary. However some of the artificial variables can be used as an initial basis for LP (TT) when the revised simplex method is used whereas the λ’s cannot be used as an initial basis for Model 4.A further difficulty with Model 4 is that the given estimates are required to be triangulated. That is, along with each central estimate required by LP (TT), Model 4 requires upper and lower limits as well. Yet, as for the bounds onZ(X)mentioned above, it is not necessary that these ranges be particularly exact.Model 4 features constraints on trip generation data, that is, the numbers of departures from origins and/or the numbers of arrivals at destinations, whereas LP (TT) does not. These constraints are potentially useful when estimates of origin–destination travel demands are scarce or unreliable.Despite all the disadvantages of Model 4 just mentioned, it is our experience that it performs well. Computational experience of its use within an SLA method is reported in Section 5. As will be seen, it performs favourably when compared with LP (TT)-based and bi-level methods, sometimes outperforming them. This is especially so when O–D travel demands are scarce or unreliable or when there does not exist an O–D travel matrix that can be user-optimally assigned to the network to replicate the observed link counts exactly.In solving Model 4, the routespijk(k=1,…,nij)can be enumerated implicitly as they are needed using column generation (see Lasdon, 1970). The standard LP solution algorithm, the simplex method, cannot be efficiently applied to Model 4 directly. This is because an explicit statement and processing of such an LP problem requires the enumeration of all possible routes between each O–D pair, which is computationally infeasible for problems of practical size. For this reason, an efficient approach that avoids explicit route enumeration is required. We employ the column generation approach that selectively generates route flows only as and when needed when applying the revised simplex method (Dantzig, 1963; Bazaraa et al., 1990).In order to demonstrate how column generation can improve the computational efficiency of FLIPSOD, consider Model 4. For the sake of brevity, it is assumed that constraints (3.25)–(3.28) are absent. They can be treated in an analogous manner to what follows in the present section. Suppose that the revised simplex method reaches iteration r, where the current basic feasible solution contains a set Brsay, of basic routes with positive flows. (In the first iteration, an advanced basis of artificial variables can be used.) When no confusion should arise we drop the superscript r in what follows. We denote the corresponding basis matrix and cost vector byBandcBr, respectively. Let Nrdenote the set of nonbasic routes (with zero flows).Letτandπdenote the simplex multiplier vectors for the constraints 3.23 and 3.24 and 3.29 and 3.30, respectively. That is, the complementary dual solution iscBr·B−1·(τ,π). Note that τij≡0, for all(i,j)∈OD⧹OD′.To establish whether or not the current basic feasible solution is optimal we must price the nonbasic variables by calculating their reduced costs. It is straightforward to pivot intoBany artificial variable or λ variable. Thus, we assume there is no such variable that can profitably enter the basis.We now consider pricing the nonbasic route flow variablesxijkr∈Nr. The problem is that the columns of these variables are not readily available in explicit form. Fortunately, column generation can be used to implicitly establish if any of the variables(xijk)r∈Nrhas a negative reduced cost. If these reduced costs are all nonnegative, the current basic feasible solution is optimal and the revised simplex algorithm is terminated.Otherwise, the route flow variable with the least negative reduced cost is chosen to enter the basis according to Dantzig’s Rule (Dantzig, 1963). We may increase the route flow of this nonbasic route from 0 to some positive, finite amount so the objective function value is decreased while solution feasibility is maintained. Recall thatpkijis a binary column vector that represents the links of the kth route from origin i to destination j. At the rth iteration letcarbe the cost of link a andfarbe its flow,∀a∈A, with the link costs and flows assembled into vectorscrandfr, respectively. Notecar=ca(fr),∀a∈A. LetKijrandKij′rdenote the versions of KijandKij′at the rth iteration, respectively. Having to enumerate all the nonbasic routes in Nrexplicitly can be avoided by solving minimisation problems of the following types:(4.1)SP1:Minimise(i,j)∈OD′,k∈Kijr(M2·cr-π)·pijk,whereM2=∑a∈A|πa|+1.(4.2)SP2:Minimise(i,j)∈OD′,k∈(Kij′)r(M·cr-π)·pijk,where M is introduced in (2.16).The above minimisation problems for each O–D pair(i,j)∈OD′are essentially simple path problems in the sense that no node repetition is allowed. In these shortest path problems, the vectors (M2·cr−π) and (M1·cr−π) specify the arc costs over the network. Note that the elements of (M1·cr−π) may be negative in sign as they correspond to the arcs of a kth route in G when k∈K′. Thus the arc costs may be positive or negative. Hence a shortest path algorithm that can detect and prevent negative cost cycles is needed. The Bellman–Ford algorithm (Bellman, 1958) can be used to detect whether negative cycles exist in the network G. If any negative cycles are detected, all negative-cost arcs are assigned a very small positive value. Alternative modifications to G to deal with negative costs cycles have been provided by Sherali et al. (1994). After G has been modified to account for negative cycles if necessary, the Floyd-Warshall algorithm (Floyd, 1962) can be applied to find the shortest routes between all O–D pairs. Or more efficiently, the shortest routes from anyi∈O′to allj∈D′can be found inO(n2)time using the NETFLOW suite of Kennington and Helgason (1980) where n=∣N∣. Alternative, equally efficient methods can be found in Bazaraa et al. (1990).We can employ the above ideas to implicitly price the reduced costs of the nonbasic route flow variablesxijk. If at least one reduced cost is negative, we can then establish which route to pivot into the basis matrix B, being the one with the lowest reduced cost value, over all O–D pairs. This creates a new column in the basis matrix. Then we must determine the flow on the entering route and simultaneously establish which variable must leave the basis matrix. The leaving variable is the one that maximises the flow on the incoming routexijk∗say, while maintaining current solution feasibility (keeping all basic route flows nonnegative). Suppose the shortest route of SP1 ispijk∗and lethij1=(cr-π)·(pijk)∗-τij. Ifhij1<0,(xijk)∗has a reduced cost ofhij1and is entered intoB. Otherwise, no route inKijrcan be entered intoB. In this case, suppose the shortest route of SP2 ispijk†and lethij2=(M1·cr-π)·(pijk)†-τij. Ifhij2<0,xijk∗has a reduced cost ofhij2and is entered intoB. Otherwise, the current solution is optimal forcrand a check is made to see if any stopping condition is met.Here we introduce a method (called FLIPSOD) that is similar to the SLA approach of Sherali et al. (2003) in the sense that it constructs a sequence of LP approximations in an iterative way. The approximating LP at each iteration has as input a limited set of routes between O–D pairs, their adjusted route costsCijk, the specified prior travel demandsQij′,∀(i,j)∈OD′,Oi,∀i∈Oi′,Dj,∀j∈Dj′and estimates of the link flowsfa,∀a∈A. The adjusted route costsCijk, defined by (2.15) and (2.16) are based on the link costsca(f),∀a∈A. The column generation technique (mentioned earlier) can be used to generate O–D routes as they are needed as part of the optimisation process.Let (M4)rbe the numerical instance of Model 4 to be solved at the rth iteration of FLIPSOD. For (M4)1, we set the link flows asfa=fa′,∀a∈AVandfa=0,∀a∈AM. For r>1, the flow volumesfarcan be computed using (2.8) where the sum is taken over only the active route flow variablesxijkfrom the previous iteration, that is, in the basis of the final solution to (M4)r−1. However, instead of simply using these link flows, we have found it more effective to use an arithmetic mean of the flow values from the two last iterations. This approach promotes a smoother transition from (M4)r−1 to (M4)r, usually avoiding drastic jumps back and forth in the flow values.Given the mean link flows, revised link costs ca(f) are then calculated and used by some efficient shortest path algorithm to establish the least cost routes among all (i,j) pairs inOD′. After that, the adjusted route costsCijkare recomputed using (2.15) and (2.16) and temporarily held constant during the iteration. This last calculation constitutes an important step as it induces FLIPSOD to tend towards a user equilibrium solution. Next, (M4)ris formulated withCijkin (3.22) for all active routespijk. To solve (M4)r, first the final simplex tableau of (M4)r−1 is updated with the just-mentioned parameters. If this causes infeasibility, the situation can be rectified by using the usual Phase 1 technique to regain feasibility (see Bazaraa et al., 1990). Once (M4)ris solved, checks are made to establish whether any stopping condition is met.Several types of stopping conditions can be defined for the method. For instance, it can be established whether or not the link flows of the current solution did not change significantly after a number of iterations. Another stopping condition is whether or not a given number of iterations was executed, the number being based on network size. Whichever stopping conditions are collectively adopted, the important idea here is to provide sufficient iterations to enable the link flows, and their associated link costs to converge as much as is feasibly possible towards a user-equilibrium assignment.We begin by outlining certain statistical measures that have been found useful in comparing the link flows and O–D matrices outputted by various O–D matrix estimation methods. Next, computational experience in applying FLIPSOD to three problems from the literature is reported. Computational comparisons are made with earlier bi-level and SLA methods. Finally, the outcome of applying FLIPSOD to a practical traffic network is discussed. All numerical tests were executed on a personal computer with an Intel Core Duo CPU with 2.8GHz clock speed, 4GB of RAM memory and 170GB of HD, running Linux with a FLIPSOD implementation using JAVA and CPLEX v.12 API. The run times of FLIPSOD were negligible for all cases of the problems from the literature. The computational details of the practical experiment are discussed in Section 5.5.Various statistical measures were used to compare the link flows produced by FLIPSOD and other methods with observed link counts. The measures are: the root mean square error (RMSE (LC)), the relative root mean square error (%RMSE (LC)) and the relative mean absolute error (%MAE (LC)) and are defined as:(5.1)RMSE(LC)=∑a∈AVfa∗-fa2|AV|,(5.2)%RMSE(LC)=RMSE(LC)∑a∈AVfa∗|AV|·100and(5.3)%MAE(LC)=∑a∈AV|fa∗-fa|∑a∈AVfa∗·100,wherefa∗is the observed link count and fais the outputted link flow, for alla∈AV.In order to compare the O–D matrices produced by FLIPSOD and other methods with the correct O–D matrix, the analogous statistics and the phi-statistic (Smith and Hutchinson, 1981) are used. These measures are:(5.4)RMSE(TT)=∑(Tij∗-Tij)2|OD′|,(5.5)%RMSE(TT)=RMSE(TT)∑Tij∗|OD′|·100,(5.6)%MAE(TT)=∑|Tij∗-Tij|∑Tij∗·100and(5.7)ϕ=∑max{1,Tij∗}lnmax{1,Tij∗}max{1,Tij},whereTij∗is the i–j entry of the correct O–D matrix,Tijis the i–j entry of the outputted O–D matrix and|OD′|is the number of given O–D travel demands.Software is available that calculates the non-separable cost ca(f) for each link based on various link flows. As an example, PETGYN (Jradi et al., 2009) is a software that models traffic flow in Brazil, taking into account the characteristics of the common urban traffic structure existing in many developing countries. With PETGYN, the non-separable cost function for each link depends on its own flow, on its traffic light phases, on local physical structure such as the number of lanes and also on flow in other links that interact with the link at intersections. In contrast, a separable cost function for any linka∈A, has been provided by the Bureau of Public Roads – BPR (1964):(5.8)ca(fa)=caF·1+β·fauaγ,wherecaFis the congestion-free travel cost, uais the effective capacity and β and γ are parameters that must be calibrated according to the particular traffic network to be modelled. For congested urban networks, values of β=0.15 and γ=4.00 have commonly been used in the United States and values of β=2.62 and γ=5.00 have been used in the Netherlands and in Japan (Steenbrink, 1974). Our experience suggests that values of β=1.65 and γ=4.50 appear to be suitable for modelling networks of urban areas in Brazil (Foulds et al., 2011) and we used these particular values for some of the numerical tests in Section 5.5.The use of FLIPSOD is illustrated by using it to solve particular numerical instances of the well-known “Corridor Problem” of Gur et al. (1980). The network of this problem has 12 nodes, 18 links and multiple routes between certain origin–destination pairs. As is shown in Table A.1, link capacities, congestion-free travel cost parameters and observed link counts are provided for all links. These parameters enable preliminary link and route costs to be calculated using (5.8) and (2.14)–(2.16). The prior O–D matrix, denoted by CTT in Table A.2, is the so-called “correct” O–D matrix. Recall from Section 1 that an O–D matrix is termed correct if it can be user-optimally assigned to the network to reproduce the observed link counts exactly. As noted by Sherali et al. (2003), the Corridor Problem has multiple user-equilibrium solutions, including those represented by Tables A.2 and A.3. Note that misprints in the values of T61 and T62 in Sherali et al. (2003) have been corrected in Table A.2. We provide a further user-equilibrium solution in Table A.4 that was produced by FLIPSOD.We present some computational experience that compares FLIPSOD with the SA(TT) method of Sherali et al. (2003). In order to conform with the terminology used in the articles referenced from now on, we use the phrases “O–D matrix” and “trip table” interchangeably. Three O–D matrices from the “Corridor Problem” of Gur et al. (1980) were used for test purposes. Thefa′values are set to the observed link counts in Table A.1 and theQij′values are set to the entries in Tables A.2, A.5 and A.6 for the three separate tests. The constraints (3.25)–(3.28) are not invoked and the terms involvingMOandMDdo not appear in the objective function (3.21). As the network represents a travel corridor in the United States, we set β=0.15 and γ=4.00 in (5.8). The other pre-normalised parameters were set as indicated in Table A.7.The matrix for the second test, the “small error” trip table (SETT), was constructed from small variations to the entries of CTT. In other words, it is a “noisy” version of CTT and is given in Table A.5. The third matrix, the “no information” trip table (NOTT), is an extremely inaccurate estimate ofT(given in Table A.6).For the purposes of testing FLIPSOD, following Sherali et al. (2003), we used three different versions of the availability of the observed link counts: (i) link counts for all the 18 links of the network, (ii) link counts for 67% of the links of the network and (iii) link counts for 50% of the links of the network, as indicated in Table A.1. Moreover, it is assumed that both the trip table entries and the link counts are inexact and the estimated O–D matrix entries and link flows can vary from their observed values as fuzzy numbers. For CTT, SETT and NOTT it was assumed that the estimated O–D matrix entries could vary by up to ±20%, ±50% and from 0% to 160% from the prior specified values given in CTT, SETT and NOTT, respectively. The link flows could vary by up to ±10% from the observed link counts given in Table A.1, for all three of CTT, SETT and NOTT.For CTT, FLIPSOD reproduced the results achieved by the SA (TT) methodology. That is, FLIPSOD replicated the observed link counts exactly and generated the correct trip table (Table A.2) for all three levels of link count availability. Moreover, FLIPSOD also replicated the observed link counts and generated the correct trip table (Table A.2) when the trip tables in Tables A.3 and A.4 were used as input, results that we have not seen elsewhere.The results of FLIPSOD and SA (TT) for SETT and NOTT are given in Tables A.8 and A.9, respectively. The %RMSE (LC) and %MAE (LC) values indicate that in all cases both SA (TT) and FLIPSOD assigned the observed link counts in Table A.7 exactly. The number of LP pivots at each iterations of FLIPSOD was never more than 200, for all tests of FLIPSOD for CTT, SETT and NOTT. For NOTT, FLIPSOD outperformed SA (TT) by generating the correct trip table (Table A.2). In the cases of 50% and 67% of link count availability neither method outperforms the other and the differences between the trip tables found by the two methods are statistically insignificant.The next reported numerical experiment with FLIPSOD involves a test problem introduced by Yang (1995)[Example 3]. It is based on a network with nine nodes, 14 links (three with observed link counts) and four origin–destination travel demands. The parameters of a (conventional BPR) relationship between the link counts and the link travel costs are specified by the author. The correct trip table is:T13∗=200,T14∗=150,T23∗=140,T24∗=185.The following two prior trip tables are provided by Yang (1995) and are used in our experiments:Prior1triptable:Q13′=210,Q14′=140,Q23′=135,Q24′=185;Prior2triptable:Q13′=180,Q14′=135,Q23′=125,Q24′=160.We mentioned earlier that it is often difficult in practice to identify reliable estimatesQij′, of the trip table entries. It is our experience that it is often more efficient to use estimates of trip generation data, that is,Oi′, of the origin departure numbers, andDj′, of the destination arrival numbers. Hence, we experimented with various combinations of constraints 3.23, (3.24)–(3.30) with corresponding adjustments to the objective function (3.21). TheOi′, andDj′estimates were calculated from the prior trip tables as follows:(5.9)Oi′=∑j∈DQij′,∀i∈O′,(5.10)Dj′=∑i∈OQij′,∀j∈D′.Results for problems based on the two prior trip tables are presented in Table A.10. The problems are represented by the rows PRIOR 1Qij′and PRIOR 2Qij′. The results displayed were obtained by FLIPSOD, SA (TT) and Yang (1995)’s iterative estimation assignment (IEA) and sensitivity analysis-based (SAB) algorithms. There are also results for the algorithms IEA* and SAB*, based on using a modified form of Yang’s objective function. Some of the row labels in Table A.10 are explained in Table A.11.In every instance, FLIPSOD and SA (TT) produced solutions that replicated the set of observed link counts exactly. As can be seen,FLIPSOD(Q,O,D)produced the same solution asFLIPSOD(Q), implying the addition of the constraints (3.25)–(3.28) did not change the solution constrained by (3.23) and (3.24) alone. This is not surprising, given constraints (3.25)–(3.28) are deduced from constraints (3.23) and (3.24), as shown in (5.9) and (5.10) and provide no additional information. But these results are either user equilibrium solutions or are relatively close to user-equilibrium. Furthermore, all of the solutions in Table A.10 represent improvements on the prior specified trip tables. According to the RMSE error statistics, FLIPSOD outperformed the other methods, and if no prior specified trip table entries are available,FLIPSOD(O,D)provided useful O–D matrix estimations.The last reported numerical experiment applying FLIPSOD to a problem from the literature concerns a test network from Yang et al. (1992)[Preliminary Test]. The input data for the problem are given in Table A.12.The network has only four links, three observed link counts and the two O–D travel demands:T13=T23=30. Although the problem is tiny, it represents an interesting challenge for estimation methods as a correct O–D matrix cannot be found. That is, there exists no O–D matrix that, when user-optimally assigned to the network, replicates the observed link counts exactly. This is because of an inconsistency in the observed link count flows on links 2 and 3. The observed flows imply c2(25)=60≠55=c3(30). AsT23>0, this clearly makes user-equilibrium and observed link count replication incompatible.When the bilevel method of Yang et al. (1992) is applied to this problem it produces the O–D estimates:T13=37.42,T23=36.73. When these estimates are user-optimally assigned to the network a user-equilibrium solution is generated but the observed link counts are not replicated. When the SA (TT) method of Sherali et al. (2003) is applied to the problem it produces the estimates:T13=40,T23=55. When these estimates are user-optimally assigned to the network an assignment that is not in user-equilibrium is generated but the observed link counts are replicated exactly. When FLIPSOD is applied to the problem and the weights in (3.21) are varied, a range of estimates can be produced, including the two just mentioned. This demonstrates the flexibility of FLIPSOD and its utility when user-equilibrium and observed link count replication are not simultaneously achievable.As an aside, if the observed count on link 3 is adjusted tof3′=35, the above inconsistency is rectified. When SA (TT) and FLIPSOD are applied to the network in this case, both methods find the estimates:T13=40,T23=60. When these estimates are user-optimally assigned to the network, user-equilibrium and observed link count replication are simultaneously achieved.FLIPSOD was applied to a network that represents a region (termed “Region A”) of Goiânia, the capital city of the State of Goiás in Brazil. The network has 388 nodes and 648 links and there are 22 origins, 24 destinations and 276 O–D pairs. Further information on Region A is available from the authors upon request.We usedQij′,Oi′,Dj′andfa′estimates for Region A that were inferred by observations of traffic flow in the network during the peak-time period between 7am and 8am on weekdays and from existing records. These data are incomplete and imprecise. We obtained observations for 52.9% of the link countsfa′and prior specifications of 34.8% of theQijpairs, 26.7% of theOivalues and 26.7% of theDjvalues. The aim of using Region A was to evaluate FLIPSOD with a practical network. Five tests were performed, to ascertain the accuracy of the link flows and O–D matrices estimated by FLIPSOD for various deviations from the link count observations and the prior specifications of the travel demands. The combinations of deviations used in the tests are shown in Table A.13. The deviations ofqijL,qijU,oiL,oiU,djL,djU,saLandsaUare introduced in the discussions of 2.1, 2.2, 2.3 and 2.4. For example,saL=saU=1.0implies that the traffic flow in link a ranges from 100% below to 100% above the observationfa′, that is,0⩽fa⩽2·fa′, whereassaL=saU=0.1implies that0.9·fa′⩽fa⩽1.1·fa′.Two types of link cost functions were employed. The traditional BPR function (5.8) was used in the first two tests, with values of β=1.65 and γ=4.50. The link cost function system specified for the PETGYN system (Jradi et al., 2009) was used for the remaining three tests.The tests are now described. With test T1 the BPR link cost function was used and it was deemed that the input data are unreliable. It is possible to estimate these data, but they can vary greatly and all of the deviations were set at 1.0. With test T2 the BPR function was again used and it was deemed that the input data are relatively reliable and all of the deviations were set at 0.1. With test T3 PETGYN was used to calculate the link costs and it was deemed that the input data are unreliable, with the deviations set as in test T1. With test T4, PETGYN was again used and it was deemed that the prior specifications of the travel demands are relatively reliable and the related deviations were all set at 0.1 but the link count observations are unreliable, withsaLandsaUset at 1.0. Of all the tests, the obtained O–D matrix-related measures %RMSE (TT) and %MAE (TT), are the smallest for test T4. This was expected since the specified O–D deviations are relatively small. Finally, with test T5 PETGYN was also used and it was deemed that the link count observations are reasonably reliable withsaLandsaUset at 0.1 but the prior specifications of the travel demands are unreliable, and all the other deviations were set at 1.0. Of all the tests, the resulting link count-related measures %RMSE (LC) and %MAE (LC) for test T5 are the smallest and the %RMSE (TT) and %MAE (TT) measures are easily the highest. Again, these effects were expected because the deviations of the link flows are relatively lowsaL=saU=0.1and the deviations for the prior specifications of the travel demands are relatively high.Table A.14 shows the main results of the tests. The solution is shown, along with the related values of the statistical measures. We also made some comparisons of the results. Comparing T1 with T3, we find that the results are quite similar, with T1 (which utilises the BPR function) being slightly superior in estimating link flows but with T3 (which utilises PETGYN) being slightly superior in estimating O–D matrices. Comparing T2 with T4, we find that T2 (which utilises the BPR function) is superior in estimating link flows but that T4 (which utilises PETGYN) outperforms all other configurations in estimating O–D matrices. Comparing T2 with T5, we find that T2 (which utilises the BPR function) is vastly superior in estimating O–D matrices but that T5 (which utilises PETGYN) outperforms all other tests in estimating link flows. As the %RMSE (LC), %RMSE (TT), %MAE (LC) and %MAE (TT) values obtained with the test T2 are homogeneous and relatively low in comparison with the other tests, it would appear that test T2 produces the best results of all the tests. The execution time of the tests varies greatly, as shown in the Table A.14. The tests T1 and T3 have a relatively large solution space, corresponding to the larger parameter settings and consequently, these tests have longer execution times.Region A allowed us to evaluate FLIPSOD for a practical network. All link count observations and travel demand specifications for this network are incomplete and imprecise. The results show that the method finds solutions close to the input data when they exist.We have reviewed issues concerned with the estimation of O–D matrices in urban traffic networks when the input data is incomplete and imprecise. Sherali et al. (2003) mentioned a non-linear formulation for O–D matrix estimation and described a successive linear approximation method for computing a heuristic solution to this formulation. We followed this line and have proposed an alternative successive linear approximation approach. Our method, called FLIPSOD, utilises the theory of fuzzy sets in order to deal with the imprecision of the given link count observations and the prior specification of travel demands. The fuzzy sets used have triangular membership functions that are easy to interpret and enable straightforward calibration of the parameters that weight the discrepancy between observed data and those predicted by the proposed approach. FLIPSOD is potentially useful when prior O–D matrix entry estimates are scarce or unreliable, necessitating the use of trip generation data, that is, the numbers of departures from origins and/or the numbers of arrivals at destinations. This leads to multiple modelling alternatives.Preliminary computational experience with FLIPSOD compares favourably with that of former, well-respected O–D matrix estimation methods. The authors are in the process of conducting further computational experiments with FLIPSOD and are investigating its convergence characteristics. When these projects are completed we believe FLIPSOD will become a useful tool for traffic planners.

@&#CONCLUSIONS@&#
