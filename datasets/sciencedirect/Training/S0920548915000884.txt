@&#MAIN-TITLE@&#
Resource allocation in uplink wireless multi-cell OFDMA networks

@&#HIGHLIGHTS@&#
We propose deterministic and stochastic models for wireless OFDMA networks.We maximize signal to interference noise ratio and total capacity of the system.We derive equivalent mixed integer programs and piecewise linear approximations.We propose a meta-heuristic procedure to obtain near optimal solutions.The numerical results are obtained in significantly less computational cost.

@&#KEYPHRASES@&#
Wireless multi-cell OFDMA networks,Mixed integer linear programming,Mixed integer nonlinear programming,Resource allocation,Variable neighborhood search,

@&#ABSTRACT@&#
We propose resource allocation models for wireless multi-cell orthogonal frequency division multiple access (OFDMA) networks. The models maximize signal to interference noise ratio (SINR) and capacity with SINR produced in an OFDMA network subject to user power and subcarrier assignment constraints. We derive mixed integer programming formulations for the case when maximizing SINR and piecewise linear approximations for the capacity objective. A variable neighborhood search (VNS) metaheuristic is proposed to compute near optimal solutions. Our numerical results indicate that VNS provides near optimal solutions and better feasible solutions than CPLEX and DICOPT solvers in significantly less computational cost.

@&#INTRODUCTION@&#
Orthogonal frequency division multiple access (OFDMA) is a wireless multi-carrier transmission scheme currently embedded into modern technologies such as IEEE 802.11a/g WLAN and IEEE 802.16a. It has also been implemented in mobile WiMax deployments, ensuring high quality of service (QoS) [19,23]. In a wireless OFDMA network, multiple access is achieved by assigning different subsets of subcarriers (subchannels) to different users using orthogonal frequencies. From theoretical point of view, this means that interference is completely minimized between subcarriers, which allows simultaneous data rate transmissions from/to several users to/from the base station (BS). We can have an OFDMA system consisting of one or more BSs surrounded by several mobile users within a given radial transmission area. The former is known as a single-cell OFDMA network, while the latter forms a multi-cell OFDMA network. The last one is by far the highest complex scenario since it involves the interference generated among different users [2]. Interference between the BSs is also possible, as long as their radial transmissions overlap each other. The interference phenomenon is mainly caused by the fact that different users and BSs use the same frequency bands, either for uplink and/or downlink transmissions. In the uplink case, the transmission of signals is performed from the users to the BS whereas in the downlink case, this is done in the opposite direction. In this paper, we propose deterministic and stochastic binary resource allocation models for uplink wireless multi-cell OFDMA networks. The models maximize the total signal to interference noise ratio (SINR) and the total capacity with SINR produced in a multi-cell OFDMA network, subject to user power and subcarrier assignment constraints. The SINR is defined as the ratio between the power of a signal over the sum of different powers, caused by other interfering signals, plus the absolute value of the Additive White Gaussian Noise (AWGN). Whereas the capacity in a wireless channel is defined as the logarithm in base two, of one plus the SINR associated to the wireless channel [2,3,17,25]. In particular, when no interference is present on the wireless channel, the SINR reduces to the well known signal to noise ratio (SNR). Maximizing SINR and/or capacity is relevant in a multi-cell OFDMA network, as it allows selecting the best subcarriers for the different users while simultaneously exploiting multi-user diversity. The multi-user diversity phenomena occurs since subcarriers perceive large variations in channel gains, which are different for each user, and then each subcarrier can vary its own transmission rate depending on the quality of the channel. The better the quality of the channel, the higher the number of bits that can be transmitted. On the other hand, the interfering signals in a particular subcarrier can be efficiently detected using any multi-user detection scheme [21]. We derive equivalent mixed integer linear and nonlinear programming formulations for the case when maximizing SINR, which allows obtaining optimal solutions for the problem. Whereas for the capacity objective, we propose piecewise MILP approximations. In particular, we transform the stochastic models into deterministic equivalent binary nonlinear optimization problems having quadratic terms and second order conic constraints, in order to obtain the MILP formulations. Thus, we compute optimal solutions and upper bounds directly, with their linear programming (LP) and nonlinear programming (NLP) relaxations. Since the proposed models are NP-Hard, we propose a variable neighborhood search (VNS) metaheuristic procedure to compute near optimal solutions. We choose VNS mainly due to its simplicity and low memory requirements [11,12].Several mathematical programming formulations for resource allocation in OFDMA networks have been proposed in the literature so far. In [2], the authors present table with 19 papers published until 2007, where only two of them deal with multi-cell OFDMA networks, either for uplink and downlink transmissions. More recent works can be found in [6,13,16,20,24]. For instance, in [13] the authors address the problem of inter-cell interference (ICI) management in the context of single frequency broadband OFDMA networks. Whereas in [24], the problem of resource allocation in multi-cell OFDMA networks under the cognitive radio network (CRN) paradigm is considered. In particular, the authors in [6] propose a resource allocation algorithm for downlink multi-cell OFDMA under the CRN approach. They compare with other suboptimal algorithms, showing the strengths of their approach. Similarly, in [20] the problem of energy efficient communication in the downlink of a multi-cell OFDMA network is considered. To the best of our knowledge, most papers deal with technological aspects of the multi-cell OFDMA problem, rather than taking into account the intrinsic combinatorial nature of the problem. Furthermore, none of them deal with maximizing SINR, while solving the problem to optimality or propose piecewise MILP approximations when maximizing the capacity of the system. We also consider the stochastic versions of the proposed models as well as a VNS algorithmic procedure to compute tight near optimal solutions. In particular, we adopt a simple scenario based approach to handle the expectation in the objective function of our stochastic formulations [8]. This is a valid assumption in stochastic programming framework, as one may use historical data for instance [4,8]. On the other hand, we use a second order conic programming (SOCP) approach to deal with the probabilistic user power constraints [15]. For this purpose, we assume that the entries in the input power matrices are independent multivariate random variables normally distributed, with known means and covariance matrices. The normal distribution assumption is motivated by its several theoretical characteristics among them the central limit theorem.The paper is organized as follows. Section 2 briefly introduces the system description and presents the deterministic and stochastic models. In Section 3, we derive the equivalent MILP and MINLP formulations for the proposed models. Subsequently, in Section 4, we present our VNS algorithmic procedure. In Section 5, we conduct substantial numerical tests in order to compare all the proposed models with the VNS approach. Finally, in Section 6, we give the main conclusions of the paper and provide some insights for future research.In this section, first we provide a brief system description of a multi-cell OFDMA network and then, we present deterministic and stochastic mathematical programming formulations for this problem.A general system description of an uplink wireless multi-cell OFDMA network is shown in Fig. 1. As it can be observed, within a given radial transmission area, the BSs and users simultaneously transmit their signals. This generates interference and degrades the quality of wireless channels. These types of networks may arise in many difficult situations where infrastructure less approaches are mandatorily required. Mobile ad hoc networks (MANETS) or mesh type networks are some examples, commonly used in emergency, war battlefield or natural disaster scenarios, where no strict planning of the network is possible due to short time constraints. In a multi-cell OFDMA network, the interference phenomena is a major concern in order to efficiently assign subcarriers to users. Each BS must perform the allocation process over time, in order to exploit the so-called multi-user diversity and hence increasing the capacity of the system [3]. Different modulation types can be used in each subcarrier. The modulation types depend on the number of bits to be transmitted. Commonly, M-PSK (M-Phase Shift Keying) or M-QAM (M-Quadrature Amplitude Modulation) modulations are used in OFDMA networks [22].In the next subsection, we propose deterministic and stochastic binary resource allocation models, in order to efficiently assign subcarriers to users in an uplink wireless multi-cell OFDMA network.In order to formulate deterministic models for an uplink wireless multi-cell OFDMA network, we assume without loss of generality, that each BS can fully and accurately predict the channel state information in each subcarrier. This is possible in OFDMA networks when using adaptive overlapping pilots in uplink applications [18]. We consider an uplink multi-cell OFDMA network composed by a set ofN={1,…,N} subcarriers in each BS, a set ofK={1,…,K} users and a set ofB={1,…,B} BSs. The BSs are surrounded by several mobile users, within a given radial transmission range, as depicted in Fig. 1. Each BS has to assign a set of subcarriers to a set of users within a given frame.11A frame is a packet in which the data to be transmitted is placed. Each frame is composed by T time slots and N subcarriers.We propose the following deterministic formulation for this problem(1)P0:maxx∑b=1B∑k=1K∑n=1NQk,nbxk,nb∑w=1w≠bB∑v=1v≠kKQv,nwxv,nw+σk,nb(2)st:∑n=1Npk,nbxk,nb≤Pkb,∀k∈K,b∈B(3)∑k=1Kxk,nb≤1,∀n∈N,b∈B(4)∑b=1B∑n=1Nxk,nb≥1,∀k∈K(5)xk,nb∈01,∀k,n,bwhere the decision variable xk,nb=1 if user k is assigned subcarrier n in BS b, otherwise xk,nb=0. The objective function (1) maximizes the total SINR produced in an uplink wireless multi-cell OFDMA network. The parameter σk,nb,∀k,n,b represents the AWGN experimented by user k, in subcarrier n of BS b, and |⋅| denotes the absolute value. Constraint (2) is a user power constraint. This is the main constraint, which makes the difference between a downlink and an uplink application. In the former, there should be only one power constraint imposed for each BS whereas in the latter, each user is constrained by its own maximum available powerPkb,k∈K,b∈B. Without loss of generality, we assume that each user makes his own decision regarding the amount of power Pkbto be used for each BS b∈B. In this paper, we mainly focus on the combinatorial nature of the problem, rather than using a specific technology where the power assignment protocol may differ. For example, both technologies WiMAX and long term evolution (LTE) use OFDMA, however both operate under different protocols. Therefore, in order to avoid specific technological aspects, in our numerical results presented in Section 5, we generate these power values randomly. In general, the entries in matrix Q=(Qk,nb) can be computed as (Qk,nb)=(pk,nbHk,nb), where each entry in matrix H=(Hk,nb) represents the channel gain associated to the channel link of user k when using subcarrier n of b∈B. Constraint (3) indicates that each subcarrier in each BS should be assigned to at most one user. Constraint (4) is used to assign, at least one subcarrier per user from any of the BSs in the system. This constraint ensures that no user is excluded or unattended in the system. Finally, constraint (5) represents domain constraints for the decision variables.Notice that P0 maximizes the total SINR and not the total capacity of the system. Next, we further consider the following deterministic model, which maximizes the total capacity of the system.P1:maxx∑b=1B∑k=1K∑n=1Nlog21+Qk,nbxk,nb∑w=1w≠bB∑v=1v≠kKQv,nwxv,nw+σk,nbst:∑n=1Npk,nbxk,nb≤Pkb,∀k∈K,b∈B∑k=1Kxk,nb≤1,∀n∈N,b∈B∑b=1B∑n=1Nxk,nb≥1,∀k∈Kxk,nb∈01,∀k,n,bThe only difference between P0 and P1 is in the objective function of the latter, which computes the total capacity with SINR of the system. This includes a sum of log-terms, instead of pure fractional terms as in P0. Consequently, P1 has the same feasible set as P0. In the next subsection, we present stochastic versions for P0 and P1, respectively.In order to formulate stochastic versions for P0 and P1, we recall that these models are formulated under the assumption that the BS can fully and accurately predict the channel state information. Although, it is possible in some cases [18], it might not be possible under more general situations. To overcome this assumption, we further consider generic stochastic formulations for both P0 and P1. The inherent stochastic nature of the problem may arise due to uncertainties in the input data matrices Q=(Qk,nb) and p=(pk,nb), ∀k,n,b. A generic stochastic version for P0 can be written as follows(6)P2:maxxEξ∑b=1B∑k=1K∑n=1NQk,nbξxk,nb∑w=1w≠bB∑v=1v≠kKQv,nwξxv,nw+σk,nb(7)st:ℙ∑n=1Npk,nbωxk,nb≤Pkb≥1−α,∀k∈K,b∈B∑k=1Kxk,nb≤1,∀n∈N,b∈B∑b=1B∑n=1Nxk,nb≥1,∀k∈Kxk,nb∈01,∀k,n,bwhile a stochastic version for P1 can be written as(8)P3:maxxEξ∑b=1B∑k=1K∑n=1Nlog21+Qk,nbξxk,nb∑w=1w≠bB∑v=1v≠kKQv,nwξxv,nw+σk,nbst:ℙ∑n=1Npk,nbωxk,nb≤Pkb≥1−α,∀k∈K,b∈B∑k=1Kxk,nb≤1,∀n∈N,b∈B∑b=1B∑n=1Nxk,nb≥1,∀k∈Kxk,nb∈01,∀k,n,bwhereE⋅denotes the mathematical expectation and ℙ{⋅} a probability measure. The objective function in P2 maximizes the expected SINR, while the objective function in P2 maximizes the expected capacity with SINR produced in an uplink wireless multi-cell OFDMA network. Constraint (7) denotes a probabilistic user power constraint and imposes the condition that each power constraint must be satisfied at least for (1-α)% of the cases, where α∈(0, 0.5) represents the risk of not satisfying some of these constraints [8,15]. Hereafter, we assume that the entries in each input matrix (Qk,nb)=(Qk,nb(ξ)) and input vector (pk,nb)=(pk,nb(ω)) are random variables of known probability distribution functions ξ and ω, respectively. Also, in order to avoid specific technological aspects, in our numerical results presented in Section 5, we generate these power values randomly as well.In this section, first we present an equivalent MILP formulation for P0. Then, we present an equivalent MINLP and a piecewise MILP formulation for P1. In particular, the piecewise MILP approximation uses the fact that each univariate log-term in the objective function of P1 is an increasing concave function. Similarly, we present MILP formulations for P2 and P3. For this purpose, we first transform P2 and P3 into deterministic equivalent problems, from which we derive the MILP formulations.An equivalent MILP for P0 can be obtained by the means of the following proposition.Proposition 1The fractional programming problem P0 is equivalent to the following MILP problem(9)MILP0:maxxtφ∑b=1B∑k=1K∑n=1Ntk,nbst:∑w=1w≠bB∑v=1v≠kKQv,nwφv,n,kw,b+tk,nbσk,nb=Qk,nbxk,nb,∀k,n,bφv,n,kw,b≤Mxv,nw,∀v,n,k,w,b,v≠k,b≠w(10)φv,n,kw,b≤tk,nb,∀v,n,k,w,b,v≠k,b≠w(11)φv,n,kw,b≥Mxv,nw+tk,nb−M,∀v,n,k,w,b,v≠k,b≠wφv,n,kw,b≥0,∀v,n,k,w,b,∑n=1Npk,nbxk,nb≤Pkb,∀k∈K,b∈B∑k=1Kxk,nb≤1,∀n∈N,b∈B∑b=1B∑n=1Nxk,nb≥1,∀k∈Kxk,nb∈01,∀k,n,b.First, we introduce nonnegative continuous variables tk,nb, ∀k,n,b for each fractional term in the objective function of P0. This allows one to write quadratic equalities under the form∑w=1w≠bB∑v=1v≠kKQv,nwtk,nbxv,nw+tk,nbσk,nb=Qk,nbxk,nb,∀k,n,b.Next, we introduce linearization variables φv,n,kw,b=tk,nbxv,nw≥0, ∀v,n,k,w,b such that (v≠k,b≠w). Finally, by using standard linearization methods [7,10], we replace each quadratic term by φv,n,kw,b, while adding simultaneously the linear constraints (9)–(11), whereMrepresents an arbitrarily large positive value. Notice that when xv,nw=1, these constraints imply that φv,n,kw,b=tk,nb,∀v,n,k,w,b,(v≠k,b≠w). On the opposite, when xv,nw=0, they imply that φv,n,kw,b=0 ∀v,n,k,w,b,(v≠k,b≠w). This concludes the proof.□Using Proposition 1, it is straightforward to obtain the following MINLP formulation for P1.(12)MINLP1:maxxtφ∑b=1B∑k=1K∑n=1Nlog21+tk,nbst:∑w=1w≠bB∑v=1v≠kKQv,nwφv,n,kw,b+tk,nbσk,nb=Qk,nbxk,nb,∀k,n,bφv,n,kw,b≤Mxv,nw,∀v,n,k,w,b,v≠k,b≠wφv,n,kw,b≤tk,nb,∀v,n,k,w,b,v≠k,b≠wφv,n,kw,b≥Mxv,nw+tk,nb−M,∀v,n,k,w,b,v≠k,b≠wφv,n,kw,b≥0,∀v,n,k,w,b,∑n=1Npk,nbxk,nb≤Pkb,∀k∈K,b∈B∑k=1Kxk,nb≤1,∀n∈N,b∈B∑b=1B∑n=1Nxk,nb≥1,∀k∈Kxk,nb∈01,∀k,n,bNotice that in this case, we replace each fractional term in the argument of the logarithm by the nonnegative variable tk,nb,∀k,n,b. This allows one to write the objective function in P1 with continuous univariate log-terms as well, which in turn, allows formulating MINLP1. Notice that MINLP1 can be solved with DICOPT solver as it requires that the binary variables be in linear form [9]. Finally, we propose an approximate MILP formulation for P1. For this purpose, we introduce the nonnegative continuous variables ϕk,nb,∀k,n,b to bound from below each log-term in constraint (12). This leads to write the following model(13)MILP1:maxxtφϕ∑b=1B∑k=1K∑n=1Nϕk,nbst:ϕk,nb≤amtk,nb+bm,∀m,k,n,b∑w=1w≠bB∑v=1v≠kKQv,nwφv,n,kw,b+tk,nbσk,nb=Qk,nbxk,nb,∀k,n,bφv,n,kw,b≤Mxv,nw,∀v,n,k,w,b,v≠k,b≠wφv,n,kw,b≤tk,nb,∀v,n,k,w,b,v≠k,b≠wφv,n,kw,b≤tk,nb,∀v,n,k,w,b,v≠k,b≠wφv,n,kw,b≥Mxv,nw+tk,nb−M,∀v,n,k,w,b,v≠k,b≠wφv,n,kw,b≥0,∀v,n,k,w,b,∑n=1Npk,nbxk,nb≤Pkb,∀k∈K,b∈B∑k=1Kxk,nb≤1,∀n∈N,b∈B∑b=1B∑n=1Nxk,nb≥1,∀k∈Kxk,nb∈01,∀k,n,bϕk,nb≥0,∀k,n,b.We denote by index “m” the line segments for the piecewise linear approximation in constraint (13). The parameters amand bmare obtained with the points we evaluate in the logarithm function. Obviously, the higher the number of line segments, the better the accuracy of the model. But also, the higher the computational cost to solve the problem, since we add more constraints in the model. As we will see in the numerical results section, even solving small instances of MILP1with CPLEX requires a significantly high CPU time, which makes it really hard to use for a large number of line segments. Therefore, we consider MILP1only as an alternative approximation method to be compared with our VNS approach.In order to obtain a deterministic equivalent formulation for P2, we assume that the input vectors (pk,•b(ω)) ∀k,b are independent multivariate random variables normally distributed with known meansp¯k,•b. Also, letΣkb=Σijkb,∀i,j∈N,k∈K,b∈Bbe the corresponding covariance matrices for each vectorp¯k,•b. For sake of simplicity, we assume that the input matrices (Qk,nb(ξ)) and the input parameter σk,nbare discretely distributed, which might be the case when using sample data in order to approximate any unknown source of uncertainty [4,8]. This allows one to consider finite sets of scenarios such as {(Qk,nb,1),(Qk,nb,2),…,(Qk,nb,S)} and {σ01,σ02,…,σ0S)} with probabilitiesPrs≥0,s∈S=12…Ssuch that∑s∈SPrs=1. In particular, eachσk,nb,s,s∈Sis generated according to a normal distribution with zero mean and standard deviation equal to one.Proposition 2The fractional programming problem P2 can be written as a MILP problem.First, an equivalent deterministic problem for P2can be written as(14)maxx∑b=1B∑k=1K∑n=1N∑s=1SPrsQk,nb,sxk,nb∑w=1w≠bB∑v=1v≠kKQv,nw,sxv,nw+σk,nb,s(15)st:∑n=1Npk,n−bxk,nb+F−11−α∑i=1N∑j=1NΣi,jk,bxk,jb2≤Pkb,∀k∈K,b∈B∑k=1Kxk,nb≤1,∀n∈N,b∈B∑b=1B∑n=1Nxk,nb≥1,∀k∈Kxk,nb∈01,∀k,n,bwhere F−1(1-α) denotes the inverse of F(1−α), which is the standard normal cumulative distribution function [15]. Now, we introduce nonnegative variables tk,nb,s,∀k,n,b,s to deal with the fractional terms in the objective function (14). Next, we square both sides of constraint (15), which allows one to write it as(16)F−11−α2∑i=1N∑j=1NΣi,jk,bxk,jb2≤Pkb−∑n=1Np¯k,nbxk,nb2∀k∈K,b∈BPkb≥∑n=1Np¯k,nbxk,nb,∀k∈K,b∈B.Subsequently, we consider separately each quadratic term in constraint (16) and introduce linearization variables φv,n,kw,b,s=tk,nb,sxv,nwwith (v≠k,w≠b) andθk,j,lb=xk,jbxk,lb,∀k∈K,j,l∈Nwith (j≠l) and b∈B. This leads to write the following MILP model(17)MILP2:maxxtφθ∑b=1B∑k=1K∑n=1N∑s=1SPrstk,nb,sst:∑w=1w≠bB∑v=1v≠kKQv,nw,sφv,n,kw,b,s+tk,nb,sσk,nb,s=Qk,nb,sxk,nb,∀k,n,b,sφv,n,kw,b,s≤Mxv,nw,∀v,n,k,w,b,s,v≠k,b≠w(18)φv,n,kw,b,s≤tk,nb,s,∀v,n,k,w,b,s,v≠k,b≠w(19)φv,n,kw,b,s≥Mxv,nw+tk,nb,s‐M,∀v,n,k,w,b,s,v≠k,b≠wφv,n,kw,b,s≥0,∀v,n,k,w,b,s,F−11−α2∑i=1N∑j=1NΣijkb2xk,jb+∑j=1N∑l=1j≠lNΣijkbΣilkbθk,j,lb≤Pkb2−2∑n=1Npk,n−bPkbxk,nb+∑n=1Npk,n−b2xk,nb+∑j=1N∑l=1j≠lNpk,j−bpk,l−bθk,j,lb∀k∈K,b∈BPkb≥∑n=1NPk,n−bxk,nb,∀k,b∑k=1Kxk,nb≤1,∀n∈N,b∈B∑b=1B∑n=1Nxk,nb≥1,∀k∈K(20)θk,j,lb≤xk,jb,∀k∈K,j,lj≠l,b∈B(21)θk,j,lb≤xk,lb,∀k∈K,j,lj≠l,b∈B(22)θk,j,lb≥xk,jb+xk,lb−1,∀k∈K,j,lj≠l,b∈Bxk,nb∈01,∀k,n,bθk,j,lb∈01∀k∈K,j,l∈N,b∈Bwhere constraints (17)–(19) and (20)–(22) are standard linearization constraints [7,10]. These linear constraints has the same effect as in Proposition 1. The parameterMis a bigM positive value. This concludes the proof. □Similarly as for obtaining MILP1, we use Proposition 2 to write an approximate piecewise MILP formulation for P3 asMILP3:maxxtφθϕ∑b=1B∑k=1K∑n=1N∑s=1SPrsϕk,nb,sst:ϕk,nb,s≤amtk,nb,s+bm,∀m,k,n,b,s∑w=1w≠bB∑v=1v≠kKQv,nw,sφv,n,kw,b,s+tk,nb,sσk,nb,s=Qk,nb,sxk,nb,∀k,n,b,sφv,n,kw,b,s≤Mxv,nw,∀v,n,k,w,b,s,v≠k,b≠wφv,n,kw,b,s≥Mxv,nw+tk,nb,s−M,∀v,n,k,w,b,s,v≠k,b≠wφv,n,kw,b,s≥0,∀v,n,k,w,b,s,F−11−α2∑i=1N∑j=1NΣijkb2xk,jb+∑j=1N∑l=1j≠lNΣijkbΣilkbθk,j,lb≤Pkb2−2∑n=1Np¯k,nbPkbxk,nb+∑n=1Np¯k,nb2xk,nb+∑j=1N∑l=1j≠lNp¯k,jbp¯k,lbθk,j,lb∀k∈K,b∈BPkb≥∑n=1Np¯k,nbxk,nb,∀k,b∑k=1Kxk,nb≤1,∀n∈N,b∈B∑b=1B∑n=1Nxk,nb≥1,∀k∈Kθk,j,lb≤xk,jb,∀k∈K,j,lj≠l,b∈Bθk,j,lb≤xk,lb,∀k∈K,j,lj≠l,b∈Bθk,j,lb≥xk,jb+xk,lb−1,∀k∈K,j,lj≠l,b∈Bxk,nb∈01,∀k,n,bθk,j,lb∈01∀k∈K,j,l∈N,b∈B.We only consider MILP3 as an alternative approximation method to be compared with our VNS approach as well. On the other hand, we do not present a MINLP formulation for P3 since DICOPT solver cannot solve the problem. Hereafter, we denote the LP relaxations of MILP0, MILP1, MILP2 and MILP3 by LP0, LP1, LP2 and LP3, respectively. The nonlinear relaxation of MINLP1 is denoted by RM1. In our numerical experiments, we solve RM1 with CONOPT solver [5]. Notice that RM1 is a convex relaxation and thus, provides the global optimal solution of the problem. We do not consider the nonlinear relaxation of P3 since CONOPT cannot solve the problem neither. Notice that MILP2 and MILP3 allow one to obtain optimal and/or feasible solutions for P2 and P3, respectively.In the next section, we propose a VNS algorithmic procedure to compute near optimal solutions for P0, and P1, and for the deterministic equivalent versions of P2 and P3, respectively.VNS is a metaheuristic approach [11,12] that uses the idea of neighborhood change during the descent toward local optima and to avoid valleys that contain them. We define only one neighborhood structure as Ngh(x) for P0 and also for P1, P2 or P3, as the set of neighbor solutions x′ in P0 at a distance “h” from x, where the distance “h” corresponds to the Hamming distance, e.g., to the number of 0–1 values, which are different in x′ and x. We propose a VNS procedure in order to compute feasible solutions for P0 and for P1, P2 or P3. The VNS approach mainly consists in solving the following equivalent problems for P0, P1, P2 and P3P0VNS:maxx∑b=1B∑k=1K∑n=1NQk,nbxk,nb∑w=1w≠bB∑v=1v≠kKQv,nwxv,nw+σk,nb+M∑k=1K∑b=1BminPkb−∑n=1Np¯k,nbxk,nb,0+M∑k=1Kmin∑b=1B∑n=1Nxk,nb−1,0st:∑k=1Kxk,nb≤1,∀n∈N,b∈Bxk,nb∈01,∀k,n,bP1VNS:maxx∑b=1B∑k=1K∑n=1Nlog21+Qk,nbxk,nb∑w=1w≠bB∑v=1v≠kKQv,nwxv,nw+σk,nb+M∑k=1K∑b=1BminPkb−∑n=1Np¯k,nbxk,nb,0+M∑k=1Kmin∑b=1B∑n=1Nxk,nb−1,0st:∑k=1Kxk,nb≤1,∀n∈N,b∈Bxk,nb∈01,∀k,n,bP2VNS:maxx∑b=1B∑k=1K∑n=1N∑s=1SPrsQk,nb,sxk,nb∑w=1w≠bB∑v=1v≠kKQv,nw,sxv,nw+σk,nb,s+M∑k=1K∑b=1BminPkb−∑n=1Np¯k,nbxk,nb−F−11−α∑i=1N∑j=1NΣi,jk,bxk,jb2,0+M∑k=1Kmin∑b=1B∑n=1Nxk,nb−1,0st:∑k=1Kxk,nb≤1,∀n∈N,b∈Bxk,nb∈01,∀k,n,bandP3VNS:maxx∑b=1B∑k=1K∑n=1N∑s=1SPrslog21+Qk,nb,sxk,nb∑w=1w≠bB∑v=1v≠kKQv,nw,sxv,nw+σk,nb,s+M∑k=1K∑b=1BminPkb−∑n=1Np¯k,nbxk,nb−F−11−α∑i=1N∑j=1NΣi,jk,bxk,jb2,0+M∑k=1Kmin∑b=1B∑n=1Nxk,nb−1,0st:∑k=1Kxk,nb≤1,∀n∈N,b∈Bxk,nb∈01,∀k,n,bwhere the parameterMis a positive bigM value. Notice that there are (K+1)BNpossible assignments for variable x=(xk,nb) in P0VNS, P1VNS, P2VNSand P3VNS. The VNS procedure we propose is depicted in Algorithm 4.1. It receives an instance of problem P0VNS(Resp. of P1VNS, P2VNSor P3VNS) and provides a feasible solution for it. We denote byx¯f¯the final solution obtained with the algorithm, wheref¯represents the objective function value andx¯the feasible solution found. The algorithm is simple and works as follows. First, in step 0 we initialize the required parameters and variables. Then in step 1, we obtain an initial feasible solution (x,f) for P0VNS. The initial solution is obtained based on an empirical observation, which consists of putting randomly the same assignment of variables xk,n• for each base station b∈B. Next, in step 2 the algorithm performs a variable neighborhood search process by randomly assigning toH≤β users different subcarriers and BSs. Initially,H←1 and it is increased in one unit when there is no improvement after new “η” solutions have been evaluated. On the other hand, if a new current solution is better than the best found so far, thenH←1, the new solution is saved and the process continues. Notice that the value ofHis increased untilH=β, otherwiseH←1 again after new “η” solutions have been evaluated. This gives the possibility of exploring in a loop manner from local to wider zones of the feasible space. Notice that in step 2.1, we randomly decide whether a new solution is obtained based on the empirical observation as we obtained the initial feasible solution or if we obtain it in a completely random manner. The latter means that we randomly choose a userk¯∈K, a subcarriern¯∈Nand a BSb¯∈Bto assign or not a value of one. For this purpose, we use a parameter δ∈(0,1). The whole process of the algorithm is repeated while the CPU time variable “Time” is less than or equal to the maximum available “maxTime” and the total CPU time “TotTime” is less than or equal to the maximum threshold value “maxiTime”. Note that we control the while loop with two maximum CPU time parameters, this is because we reset “Time=0” when a new better solution is found, which allows searching other “maxTime” units of time with the hope of finding better solutions. The variable “TotTime” controls the total CPU time of the algorithm.Algorithm 4.1VNS approachWe present numerical results for P0, P1, P2 and P3 by solving the equivalent deterministic formulations: MILP0, LP0, MINLP1, RM1, MILP1, LP1, MILP2, LP2, MILP3, LP3, P0VNS, P1VNS, P2VNSand P3VNS, respectively. A Matlab program is implemented using CPLEX 12.6 [14] to solve the MILP and LP relaxations, DICOPT [9] for solving the MINLP model, CONOPT [5] for solving the nonlinear relaxation and for the proposed VNS Algorithm 4.1 The numerical experiments have been carried out on a Intel(R) 64bits core(TM) with 3.4Ghz and 8GoBytes of RAM under windows 7. For the stochastic models P2 and P3, we generate a set of 1000 samples of realistic power data using a wireless channel from [25], while the entries in matrices (Qk,nb,s) are computed asQk,nb,s=pk,nb,sHk,nb,s,∀s∈S, where the values of pk,nb,sare also generated using the wireless channel from [25]. Each maximum available power value Pkb,∀k,b is set toPkb=0.4∗∑n=1Np¯k,nb, where eachp¯k,nb∀k,n,bcorresponds to the average over the set of 1000 samples. The channel values Hk,nb,sare generated according to a standard Rayleigh distribution function with parameter σ=1. For the deterministic models P0 and P1, we generate the input data exactly as for the stochastic models, however in this case we only consider one sample for the input data (Qk,nb), pk,nband Pkb,∀k,n,b. The input parameterσk,nb,s,∀s∈Sis normally distributed with zero mean and standard deviation equal to one. We calibrated the values of η=250, δ=0.5 and β=5, and set the parameters maxTime=250 and maxiTime=2500s in Algorithm 4.1. The values of amand bm, in models MILP1 and MILP3, are obtained for the interval [0, 100] when divided into 10 subintervals equally spaced. We choose this interval for all the instances presented in Tables 2, 4, 6, 8 and 10 in order to avoid a large number of line segments in the piecewise linear approximations. However, in Table 11 we also present a few small size instances when using the interval [0, 500], when divided into 500 subintervals equally spaced. Finally, we set α=0.1 and the bigM value is set toM=1013. In Table 1, column 1 gives the instance number and columns 2–4 give the instances dimensions. In columns 5 and 7 and 6 and 8, we provide the optimal solution values of MILP0 and LP0 and their CPU time in seconds CPLEX needs to solve them. Columns 9 and 10 show the best solution value found with VNS and its CPU time in seconds. Finally, in columns 11 and 12, we provide the gaps we compute for the LP and VNS approaches, respectively. These gaps are computed byLP0−MILP0MILP0∗100andMILP0−VNS0MILP0∗100, respectively. From Table 1, we mainly observe that solving MILP0to optimality does not require large CPU times except for the instance number 8, where CPLEX cannot find the optimal solution in 2h. We also see that VNS algorithm finds near optimal solutions within a short CPU time for most of the instances, especially for the larger ones e.g., instances 17–32. Finally, we observe that the LP relaxation is not tight when compared to the optimal solution value of the problem.The legend in Table 2for columns 1–4 is exactly the same as for Table 1, whereas columns 5 and 7 and 6 and 8 show the optimal solution values and CPU time in seconds for MILP1 and LP1, respectively. Column 9 presents the value obtained when we evaluate the optimal solution of MILP1 in the objective function of P1. Columns 10 and 12 and 11 and 13 present the optimal solution values of MINLP1 and RM1 when using DICOPT and CONOPT solvers and their CPU time in seconds, respectively. In columns 14 and 15, we show the best solution found with VNS and its CPU time in seconds. Finally, in columns 16–19, we present gaps that we compute as:LP1−MILP1MILP1∗100,RM1−MINLP1MINLP1*100,P1x1−MILP1MILP1*100andP1x1−VNS1P1x1*100, respectively. We mention that the instances in each row of Tables 1 and 2 are the same instances. In Table 2, we observe that the optimal objective function values of MILP1 are far from the objective values of P1(x1). We also see that the CPU time required to solve MILP1 is higher when compared to Table 1. In fact, we have more instances that cannot be solved to optimality in less than 2h. Also, the objective values of MILP1 are lower than the objective function values of MILP0. This is explained by the fact that now, we compute a sum of log-terms instead of pure fractional terms as in MILP0. We observe that the objective function values of the LP relaxation are not tight when compared to the optimal solution and less tight when compared to Table 1, although they can be solved very fast with CPLEX in both tables. By comparing columns 9 and 10, we see that the optimal objective function values of P1 are higher for all the instances. In general, we observe that DICOPT and CONOPT solvers cannot solve several instances. On the opposite, the VNS approach can find feasible solutions, which are very tight when compared to the solutions obtained for P1(x1) using the piecewise linear approximation and in very short CPU time. Finally, we see that the gaps for the nonlinear relaxation is higher than for the LP relaxation.In order to give more insight with respect to the performances obtained with the MILP and VNS approaches, Tables 3 and 4present numerical results for large size instances of the problem. We also mention that the instances in each row of these tables are the same instances. Notice that the condition K≤NB must hold for all the instances we consider throughout the paper, otherwise the problem becomes infeasible. This can be explained by the use of constraint (4), which is present in all our models. This condition was not considered in [1]. The legends in Tables 3 and 4 are the same as in Tables 1 and 2, respectively. With the exception that in Table 4, now we do not put numerical results for MINLP1 and RM1 since DICOPT and CONOPT solvers cannot solve these large size instances. From Tables 3 and 4, we mainly observe that CPLEX cannot find the optimal solution of the problem in 2h of CPU time. Moreover, we see that it cannot find feasible solutions for many of the instances (e.g. instances 12, 15–16, 20, 23–24, 27–28, 30–32 in both tables). Similarly, the CPU times required to solve the LP relaxations grow considerably, which explains the fact that CPLEX cannot find feasible solutions for the problem. On the opposite, we notice that the VNS approach can find feasible solutions for all the instances in both tables, although at higher CPU times when compared to Tables 1 and 2, respectively. This shows the effectiveness of the VNS approach. In particular, we observe from Table 3 that CPLEX finds better solutions than VNS for the instances 1–8. Additionally, we see that the performance of VNS deteriorates significantly when the ratioBNKdecreases. This is the case for the instances 3–4 and 7–8 in Table 3. However, for the instances 9–32 in this table, we observe that the VNS approach can find very tight solutions when compared to those obtained with CPLEX. Moreover, we see that for the instances 17–32, it can find better solutions than CPLEX in most of the cases and in less CPU time. This is confirmed by the gap columns in this table. Notice that for these instances the ratioBNKis larger. Concerning Table 4, we confirm by comparing columns 9 and 10 that VNS can find better feasible solutions than the piecewise MILP approximation for all the instances with the exception of instance 7, which is still very tight when compared to the solution obtained with CPLEX. With respect to the CPU times, we observe that they remain nearly the same as in Table 3 for the MILP, LP and VNS approaches, respectively. Finally, we see that the gaps for the LP relaxation are larger in Table 3 than in Table 4.Now, we present numerical results for the stochastic models P2 and P3 using S=4 scenarios. More precisely, we solve the equivalent deterministic formulations: MILP2, LP2, MILP3, LP3, P2VNSand P3VNS. The legends in Tables 5 and 7, and in Tables 6 and 8are exactly the same. In Tables 5 and 7, we present numerical results for MILP2, LP2 and P2VNSfor small, medium and large size instances, respectively, whereas in Tables 6 and 8we present numerical results for MILP3, LP3 and P3VNSfor small, medium and large size instances, respectively. In Tables 5–8, the first four columns show the instance number and the instance dimensions. Whereas in Tables 5 and 7, columns 5–12 show the same information as in Table 1. In Tables 6 and 8, columns 5–14 show the same information as in Table 4. However, in this case we denote by P3(x3) the objective function value obtained by evaluating the optimal solution of MILP3 in the objective function of P3VNS.From Tables 5 and 6, we observe that CPLEX can solve several instances in less than 2h. However, we also see that the CPU times grow very fast when the instances dimensions increase. This is the case for the instances 4, 7–8, 16, 21–24 and 26–32 in Table 5, and for the instances 4, 7–8, 15–17, 19 and 21–32 in Table 6. In both tables, we see that the LP relaxations can be solved very fast. More precisely, in less than 220s in Table 5 and in less than 150s in Table 6. With respect to the performance of the VNS algorithm, we observe that it can find very tight solutions when compared to those obtained with CPLEX for many instances in Table 5. However, we also see that it deteriorates significantly in some cases.This is confirmed by the gap columns. In particular, for the instances 30–32 where the gaps are large. We believe that this is caused by the inclusion of constraint (4) that was not considered in [1]. Regarding the CPU time, in general we observe that VNS requires a higher CPU time to get these solutions. In Table 6, on the opposite, we observe that VNS can find better solutions than CPLEX for all the instances and in less CPU time. This is confirmed by the gaps, which get larger when the instances dimension increase, which shows that VNS improves its solutions while incrementing the size of the instances.In Tables 7 and 8, we observe similar trends as in Tables 5 and 6, respectively. We see large gaps for the VNS approach when compared to the few instances solved with CPLEX in both tables. In particular, we observe in Table 8 that the optimal solutions obtained with VNS are significantly better than those obtained with CPLEX. In general, we remark that CPLEX cannot find feasible solutions for many of these large size instances and that VNS always find feasible solutions. In general, based on the numerical results presented in Tables 5–8, we can say that the performance of the VNS approach seems to be affected by the use of scenarios when maximizing SINR. This is not the case when maximizing the capacity where VNS is highly competitive.In order to give more insight with respect to the statement that VNS can handle instances with a large number of scenarios, we solve in Table 9some instances with S=10,30 and S=100. In columns 5–6 and 7–8, we present the best solution found with VNS and CPU time in seconds, VNS requires to find the first feasible solution of the problem when solving P2VNSand P3VNS, respectively. From these CPU times, we mainly observe that the larger the number of scenarios, the larger the CPU time required to reach a first feasible solution.In Table 10, we present numerical results for a few instances of models P0 and P1 that could be solved to optimality by CPLEX. With these results, we show how far the objectives of maximizing SINR and capacity in an OFDMA system are. For this purpose, we solve MILP0 and MILP1 and evaluate the optimal solution values found in both objectives functions of P0 and P1, respectively. We recall that P0 and P1 have the same feasible sets. The legend in Table 10 is as follows. Columns 1–4 show the number of the instances and their dimensions. In column 5, we show the optimal objective function value of MILP0. Then, in column 6 we present the value obtained while replacing the optimal solution of MILP1 in the objective function of P0. Similarly, in column 7 we present the value obtained while replacing the optimal solution of MILP1 in the objective function of P1. Finally, in column 8 we present the value obtained while replacing the optimal solution of MILP0 in the objective function of P1. Columns 9 and 10 show the gaps we compute as:MILP0−P0x1MILP0∗100andP1x1−P1x0P1x1∗100, respectively. From the gap columns in Table 10, we mainly observe that the optimal solution values obtained when maximizing SINR and capacity with SINR in both models: P0 and P1 are not large (e.g., less than 6% for most cases).In order to see what the trends are and how the accuracies of MILP1 and MILP3 behave when using a large number of line segments, in Table 11we present a few small and medium size instances using the interval [0, 500] divided into 500 subintervals equally spaced. Notice that all these instances are solved to optimality with the exception of instances 11 and 18, which cannot be solved within 2h. The legends are exactly the same as in Tables 4 and 6, respectively. From Table 11, first we observe that the CPU times required to solve the MILP models are larger than those presented in Tables 2 and 6. Also, we see that the optimal values are closer to the values of P1(x1) and P3(x3). This confirms the fact that using more line segments in the piecewise MILP models improves their accuracies. On the other hand, when comparing columns 9 and 10, we see that the feasible solutions obtained with the VNS and MILP models are nearly the same, which shows similar trends as in Tables 2 and 6 for these columns, respectively. In particular, we find better feasible solutions with VNS for the instances 2, 7, 9, 10, and 11. For the latter, we find it in less than 5s compared to 7200s used by CPLEX. Finally, the gap columns confirm these observations.Ultimately, in order to give more insight with respect to the fact that using more line segments in the piecewise MILPs do not necessarily imply finding better feasible solutions for the problem, we plot in Figs. 2 and 3average optimal values and CPU times for MILP1 and MILP3, respectively. In these figures, each row represents a fixed size instance that we solve for 100 samples of the input data. The interval numbers denote the following set of intervalsI={[0,50],[0,100],[0,200],[0,300],[0,400],[0,500]}, which we divide into subintervals of length 10.From Figs. 2 and 3, we mainly confirm our observations from Table 11. We confirm that using more line segments in the piecewise linear approximations does not necessarily improve the feasible solutions obtained with MILP1 and MILP3 when evaluated in the objective functions of P1VNSand P3VNS, respectively. We also confirm that the CPU time grows rapidly and that the optimal values of the MILP models decrease significantly.

@&#CONCLUSIONS@&#
In this paper, we proposed deterministic and stochastic binary resource allocation models for uplink wireless multi-cell OFDMA networks. The models maximize the total SINR and the total capacity with SINR produced in a multi-cell OFDMA network subject to user power and subcarrier assignment constraints. We derived equivalent MILP and MINLP models for the case when maximizing SINR, which allowed obtaining optimal solutions for the problem. For the capacity objective, we proposed piecewise MILP approximations. In particular, we transformed the stochastic models into deterministic equivalent binary nonlinear optimization problems having quadratic terms and second order conic constraints, in order to derive the MILP formulations. Since the proposed models are NP-Hard, we proposed an efficient Variable Neighborhood Search metaheuristic procedure to compute near optimal solutions [11,12]. Our numerical results showed that VNS provides near optimal solutions for small and medium size instances of the problem. Moreover, it has shown to be highly competitive as it allowed to find better feasible solutions than CPLEX and DICOPT solvers [5,14] for large size instances of the problem. Finally, these results were obtained at a significantly less computational cost.As future research, we plan to study new stochastic programming approaches for the problem. Namely, two-stage stochastic formulation and decomposition algorithmic approaches.