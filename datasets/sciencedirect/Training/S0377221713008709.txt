@&#MAIN-TITLE@&#
Lower and upper bounds for a two-stage capacitated facility location problem with handling costs

@&#HIGHLIGHTS@&#
We consider a two-stage capacitated facility location problem with handling costs.Handling costs are modeled by associating with each depot a set of handling modules.A hybrid approach is proposed to obtain good lower and upper bounds of the problem.Computational results show our approach provides good solutions with gaps below 2%.

@&#KEYPHRASES@&#
Facility location,Heuristic,Dantzig–Wolfe decomposition,Path relinking,

@&#ABSTRACT@&#
We study in this paper multi-product facility location problem in a two-stage supply chain in which plants have production limitation, potential depots have limited storage capacity and customer demands must be satisfied by plants via depots. In the paper, handling cost for batch process in depots is considered in a realistic way by a set of capacitated handling modules. Each module can be regards as alliance of equipment and manpower. The problem is to locate depots, choose appropriate handling modules and to determine the product flows from the plants, opened depots to customers with the objective to minimize total location, handling and transportation costs. For the problem, we developed a hybrid method. The initial lower and upper bounds are provided by applying a Lagrangean based on local search heuristic. Then a weighted Dantzig–Wolfe decomposition and path-relinking combined method are proposed to improve obtained bounds. Numerical experiments on 350 randomly generated instances demonstrate our method can provide high quality solution with gaps below 2%.

@&#INTRODUCTION@&#
As a key topic in the design of transportation systems (Brandeau & Chiu, 1989), facility location problems (FLPs) have appealed to both researchers and practitioners for more than 40years. A basic FLP, already NP-hard, is the uncapacitated FLP (UFLP), which consists in locating uncapacitated facilities, such as plants, depots or warehouses, and defining the amount shipped by open facilities to customers, in order to minimize the sum of the set-up costs of the open facilities and of the distribution costs. A natural extension is to take into account the maximum demand of each facility could supply, giving the capacitated facility location problem (CFLP) (Cornuejols, Sridharan, & Thizy, 1991; Klose & Görtz, 2007). A special case of CFLP met in distribution networks is the single source CFLP (Ahuja, Orlin, Pallottino, Scaparra, & Scutellà, 2004; Contreras & Díaz, 2008) or concentrator problem, in which each customer must be served by only one facility. More complicated versions of the CFLP include the dynamic CFLP, defined on a multiperiod horizon (Dias, Captivo, & Clímaco, 2007; Melo, Nickel, & Saldanha da Gama, 2006), and the stochastic CFLP in which demands and supplies can be random variables (Lin, 2009; Wang, Batta, & Rump, 2002).All problems cited above consider one product and a simple network with two layers of nodes (also called levels) or, equivalently, one distribution step (also called stage or echelon). Although such networks exist, most supply chains are more complex and involve several products, more than two levels (e.g., plants, depots and customers), and inter-level products. The development of operations research and computers have made possible the study of facility location problems in supply chains, called hierarchical facility location problems, see for instance the recent review of Şahin and Süral (2007).Hierarchical facility location problems (HFLPs) is an extension of the CFLP by taking into account more than one echelons in the distribution network. A set of customers are usually laid at the last echelon, while various type of facilities are modeled for other echelons. The product flow traverses all echelons successively. The two-stage facility location problem (TSFLP) (Keskin & Üster, 2007a, 2007b; Klose, 1999, 2000; Martí & Pelegrín, 1999; Tragantalerngsak, Holt, & Rönnqvist, 1997), with two types of facilities, is a basic model of HFLP. Products supplied by plants are delivered to capacitated depots, and then distributed to customers aiming at minimizing both shipment costs and the fixed opening costs of depots. Several variants were derived from the TSFLP, for instance by locating plants and depots (Elhedhli & Gzara, 2008; Pirkul & Jayaraman, 1996, 1998) and by considering four layers composed of suppliers, plants, depots and customers (Jayaraman & Pirkul, 2001). In this paper, our attention focuses on the TSFLP.The objective function of the TSFLP comprises both shipment costs and investment costs induced by opening depots. Investment costs, regarded as the strategic decision level, are much more important than shipment costs in practice. Therefore it is common to consider a reference period (e.g., quarter of a year), and let both shipment costs and investment costs including the overhead and amortization costs be modeled over this period. Besides the investment costs incurred by location decision and the operational shipment costs, the costs on handling products at depots cannot be negligible, specially in the food supply chain. The cargo must be unloaded, sorted, packaged, reloaded and dispatched after entering into depots. As this treatment of cargo involves tasks accomplished by both workers and machines, such as palletizers, forklifts and conveyors, it is common to regard it as capital and labor intensive process (Newton, Barnhart, & Vance, 1998). Efficiently using handling costs can save costs and bring profits for companies. Thus, the handling costs are significant parts of overall costs in the distribution system, and introducing them into the TSFLP seems reasonable and realistic.Two types of handling costs are considered in this paper: the cost for handling one unit of product and the bulk cost for processing a batch of products. Considering the first type of cost is not hard in the classical model of facility location problems, since it can be incorporated into the unit shipment cost on arcs starting from the depot. The bulk cost under special working situations is however not easy to integrate into the shipment cost, due to the facts that the number of workers assigned to the batch, their qualifications, the equipment used, etc. To describe handling costs in a understandable and realistic way, we retake the concept of handling modules proposed by Li et al. (2011). In the paper, a pre-given alliance of workers and equipment (e.g., a set of palletizers with their drivers), having both handling capacity and handling cost during a reference period, is modeled as one handling module. The handling capacity represents the maximum amount of cargo which can be treated over the reference period. The handling cost consists of the normal depreciation of equipment, employment costs of workers, etc. The handling cost per handling module and per cross-docking task is totally charged once the module is used to handle cargo, even for a small portion of its capacity. Thus, efficiently using module capacity leads to a smaller handling cost per product unit.Li et al. (2011) considered a two stage capacity location problem with handling cost (TSCFLP-HC) and cross-docking tasks. In our preliminary work (Li et al., 2011) of the TSCFLP-HC, a limited set of different types of handling module are equipped at each depot. The decision on depot location, product flow and the number of handling modules per type and per cross-docking task must be made, with the goal of minimizing the total depot opening, transportation and handling cost. The problem was formulated by a linear mathematical programming. However, the problem proposed by Li et al. (2011) takes into account cross-docking tasks, which pertain basically to detailed operational tasks, and unrealistic to be considered in the strategic level of facility location problem. The work in this paper is the extension of our precedent work. We proposed in this paper a mathematical model making a slight difference in comparison with the one of Li et al. (2011), since the facility location problem considered in this paper takes into account handling module in the strategic and tactical level decision, without the detailed operational level decision–cross-docking tasks. Therefore the work is a variant of TSCFLP-HC (Li et al., 2011).To derive an initial lower bound, Li et al. (2011) proposed a subgradient optimization procedure based on Lagrangean relaxation, and use a simple heuristic to provide an initial upper bound from each lower bound obtained. The heuristic repaired each lower bound by opening depots where handling modules are used, or randomly closing DCs iteratively until the minimum number is reached. In this paper, we proposed a local search heuristic based on the information provided by subgradient optimization, which concerns ADD/DROP/SWAP moves. The advantage of the local search heuristic is to avoid local optimum and provide good initial upper bound for further improvement with subsequent advanced approach.The paper brings two academic contributions. The first contribution is to provide initial upper bound with a local search heuristic algorithm based on the lower bound provided by subgradient optimization procedure. The second one consists in improving lower and upper bounds by using a weighted Dantzig–Wolfe decomposition, and reinforced by a path-relinking. To evaluate the performance of the proposed method, 350 randomly generated instances are tested.The remainder of the article is organized as follows. In Section 2, the TSCFLP-HC is defined in details and formulated as a mixed linear program. Section 3 describes the main blocks of the hybrid solution method: the Lagrangean relaxation with its subgradient optimization procedure, the column generation process and the post-optimization based on path-relinking. A set of instances and computational results are presented in Section 4. Some conclusions are drawn and future research is discussed in Section 5.The proposed TSCFLP-HC is defined on a three layers with a set I of plants, a set J of potential depots, a set K of customers and a set P of different products. Each planti∈Ihas a production limitationsipof each productp∈P. Each potential depotj∈Jhas an opening costgjand a limited capacitycj. Each productp∈Poccupies a volume per unit denoted asvp.When products arrive at a depot, they are processed by handling modules. LetMjrepresent the set of module types available at each depotj∈J. It is worth noting that the set of modules are different for each depot. Each typem∈Mjof handling module at depotj∈Jis characterized by a handling capacityqjmand a costbjm.ujmcorresponds to the number of modules available at each potential depotj∈J. The cost of a module is counted as soon as it is used, even for a fraction of its capacity.The non-negative demand of each productp∈Pfor each customerk∈Kis denoted bydpk. The total volume of all demands is represented byd(K)=∑p∈P∑k∈Kvpdkp. The unit transportation cost of productp∈Pfrom depotj∈Jto customerk∈Kis denoted byhjkp. Similarly,hijprepresents the cost of shipping one unit of productp∈Pfrom planti∈Ito depotj∈J. Three sets of variables are considered: binary variablesYjare equal to 1 if depot j is opened, non-negative integer variablesZjmrepresent the number of handling modules of typem∈Mused at depotj∈J, and real variablesXijpandXjkpdefining the flow of products from plants to customers via depots. Using the above notations, the TSCFLP-HC can be formulated as the following mixed integer program (P).(1)(P):min∑j∈JgjYj+∑j∈J∑m∈MjbjmZjm+∑p∈P∑i∈I∑j∈JhijpXijp+∑p∈P∑j∈J∑k∈KhjkpXjkp(2)s.t.∑j∈JXijp⩽sip∀i∈I,∀p∈P(3)∑i∈IXijp=∑k∈KXjkp∀j∈J,∀p∈P(4)∑j∈JXjkp=dkp∀k∈K,∀p∈P(5)∑p∈P∑i∈IvpXijp⩽cj∀j∈J(6)∑p∈P∑i∈IvpXijp⩽∑m∈MjqjmZjm∀j∈J(7)∑m∈MjqjmZjm⩽cj+maxm∈MjqjmYj∀j∈J(8)∑j∈JcjYj⩾d(K)(9)Xijp⩾0∀i∈I,∀j∈J,∀p∈P(10)Xjkp⩾0∀j∈J,∀k∈K,∀p∈P(11)Yj∈{0,1}∀j∈J(12)0⩽Zjm⩽ujm,Zjminteger∀j∈J,∀m∈MjThe objective function (1), to be minimized, includes the opening costs of depots, the costs of handling modules used and the transportation costs in the two stages. Constraints (2) restrict for each plant the amount supplied for each product. Eq. (3) are flow conservation constraints for the depots. All customer demands are met according to Constraints (4). Constraints (5) ensure that the volume of products handled at DC j does not exceed the total handling capacity of modules used at this DC. Constraints (6) ensure that the volume of products traversed at depot cannot be greater than the capacity of used handling module at this depot. Constraints (7) play two roles. IfYj=0(DC j is closed) no inbound product flow are moved into DC j; otherwise, ifYj=1(DC j is opened), the inbound product flow must be restricted by the capacity of DC j. Constraints (7) need further explanation. It seems unlikely that the total handling capacity for all used modules per depot is exactly equal to the depot capacity. Therefore we use a simple upper bound indicating that the capacity of minimum subset of modules can be larger, in the worst case, thancjby the maximum module capacity:maxm∈Mjqjm. Constraint (8) denotes that the total demand of customers are covered by the total capacity of open depots to ensure the feasibility of solutions. Constraint (8) are redundant to sharpen the lower bounds of model, which will be shown in the following section. Finally, constraints (9)–(12) define the variables used in the model.Based on the fact that the CFLP, in which products are shipped from depots, to be located, to customers, is equivalent to the second stage of our TSCFLP-HC, the CFLP is therefore a special case of the TSCFLP-HC. The TSCFLP-HC is NP-hard since the CFLP is known as a classical NP-hard problem. Based on our preliminary data experimentation, a well-known software engine CPLEX (CPLEX 11.0, 2010) is not able to solve large instances, even not for small ones, in reasonable computation times. Therefore a solution method based on a local search heuristic and a weighted Dantzig–Wolfe decomposition is proposed in this paper to tackle larger instances.Our solution method, sketched in Fig. 1, includes two main blocks. In the first block, a Lagrangean relaxation of the TSCFLP-HC is solved by using subgradient optimization. Each iteration of the subgradient procedure computes a lower bound LB, derives an upper bound UB by using a Lagrangean heuristic, and updates the global best bounds LB∗ and UB∗. The second block involves a weighted Dantzig–Wolfe decomposition to improve the bounds using column generation. Finally, a post-optimization phase based on path-relinking is applied for a last improvement. All these steps are detailed in the rest of this section.Widely applied to facility location problems (Li, Chu, & Prins, 2009; Zhu, Chu, & Sun, 2010), Lagrangean relaxation adds a subset of hard constraints, with weighted Lagrangean multipliers, to the objective function. If the relaxed problem can be quickly solved for fixed values of multipliers, a subgradient procedure can be used to adjust multipliers and yield a sequence of improved lower bounds. Our preliminary work in paper (Li et al., 2011) showed that Lagrangean relaxation is a good method to break down TSCFLP-HC into three sub-problems: (1) minimum-cost flow subproblem, (2) 0–1 knapsack problem and (3) bounded knapsack problem; and each subproblem can be solved by current techniques. By using the classical subgradient optimization procedure based on Lagrangean relaxation, initial lower bounds of the TSCFLP-HC can be derived. More details concerning on Lagrangean relaxation of constraints (6) and subgradient optimization procedure are referred to the paper (Li et al., 2011). As the three sub-problems will be useful for weighted Dantzig–Wolfe decomposition, we simply list them below.One minimum-cost flow subproblem (FSP):(FSP):U=min∑p∈P∑i∈I∑j∈Jhijp+λjvpXijp+∑p∈P∑j∈J∑k∈KhjkpXjkps.t.constraints(2)–(5),(9)and(10).|J|integer knapsack problems(BKPj):(13)(BKPj):Wj=max∑m∈Mjλjqjm-bjmZjms.t.∑m∈MjqjmZjm⩽cj+maxm∈Mjqjm(14)0⩽Zjm⩽ujm,Zjminteger∀m∈MjAnd one 0–1 knapsack problem (0–1 KP):(15)(0–1KP):V=min∑j∈J(gj-Wj)Yjs.t.∑j∈JcjYj⩾d(K)(16)Yj={0,1}∀j∈JNote on the initial upper bound. Depots are opened at random until their total capacity covers the total demand. Without taking the handling modules into account, a min-cost flow problem defined by the plants, the open depots, the customers and variablesXis solved using CPLEX. Finally, a bounded knapsack problemKNAPj(also used in Section 3.2, where it is explained) is solved to determine the number of modules required for each open depot j. In this way, one initial feasible solution is obtained.As constraints (6) are dualized into the objective function, the solution corresponding to a lower bound may be infeasible for the TSCFLP-HC. To acquire an upper bound based on each lower bound provided by subgradient optimization procedure, we should repair the violated constraints. Note that the constraint (6) for depotj∈Jis violated if the handling capacity is smaller than the amountAjof products distributed into depotj∈J, i.e., if∑m∈MjqjmZjm<Aj=∑p∈P∑i∈IvpXijp. By solving the following bounded knapsack problem(KNAPj), we can derive the minimum amount of modules to treat inbound product flowAj, and therefore all constraints (6) can be met. However, these tentative rectifications do not prohibit using modules at some closed depots. To derive a feasible solution, each depotj∈Jin this situation needs to be opened by settingYjto 1.(KNAPj):min∑m∈MjbjmZjms.t.∑m∈MjqjmZjm⩾Aj0⩽Zjm⩽ujm,Zjminteger,∀m∈Mj,j∈JTwo local search procedures are then applied to the resulting feasible solution. The first one closes one depot at a time and transfers its flows of products to other depots. A criterion inspired by Gendron, Potvin, and Soriano (2003) and Li et al. (2009) is employed to evaluate the gainGj0when a depotj0is closed, see Algorithm 2. A positive gain means the opening cost saved exceeds the increase in shipment cost. Each iteration computes the gains for each open depot and closes the one with maximum positive saving. The second local search is based on a swap move which closes one depotj0while opening another onej1. The gain of each swap move is estimated by subtracting the fixed cost ofj1from the savingGj0and the move with the largest positive gain is executed. Both procedures terminate when no improving move is detected.Algorithm 1Computation of gainGj0if depotj0is closed1: letJ∼be the remaining set of open depots ifj0is closed2: if∑j∈Jc∼j<d(K)then return (0) endif3: initialize the gain:Gj0=gj0+∑m∈Mj0bj0mZj0m4: compute for each depotj∈J∼the residual capacity:c̃j=cj-∑p∈P∑i∈IvpXijp5: for each each productp∈Pdo6: sort plants i withXij0p>0into nonincreasing order of transportation costshij0pin a listS(I)7: sort customers k withXj0kp>0into nonincreasing order ofhj0kpin a listS(K)8:for eachi∈S(I)do9:for eachk∈S(K)do10:sort the depots j ofJ∼withc̃j>0in nondecreasing order ofhijp+hjkpin a listS(J)11:for eachj∈S(J)do12:setX∼=minXij0p,Xj0kp,c̃j/vp,c̃j=c̃j-vpX∼,Xij0p=Xij0p-X∼,Xj0kp=Xj0kp-X∼13:Xijp=Xijp+X∼,Xjkp=Xjkp+X∼,Gj0=Gj0-hijp+hjkp-hij0p-hj0kp×X∼14:end for15:end for16:end for17: end for18: for eachj∈J∼do19: updateAj=∑p∈P∑i∈IvpXijp20: solve problemknapjto update the amount of handling modulesZjm,∀m∈Mj21: end for22: let H be the total cost of additional handling modules in the depots ofJ∼: updateGj0=Gj0-HNotes onAlgorithm 1. The test in line 2 is used to stop the evaluation if the remaining open depots cannot handle the total demand. The purpose of the three nested loops lines 5–17 is to route the flows of products traversing depotj0via another open depot. The innermost loop line 11 transfers the amount of product p on arcs(i,j0)and(j0,k)towards arcs(i,j)and(j,k): the flows, the residual capacity of depot j and the gainGj0are updated. Line 22, the definitive gain must take into account the possible increase in handling cost incurred by additional modules in the depots ofJ∼.A known alternative to subgradient optimization is to solve the Lagrangean dual problem (LDP) of a linear mixed-integer problem (MIP) by using linear programming. The associated linear program captures more information about the MIP but its number of constraints can be huge. However, the dual (MP) of (LDP) can be solved using Dantzig–Wolfe decomposition (DWD) and column generation. The master problem (MP) has too many columns to be solved directly. Starting from a restricted master problem (RMP) with a small number of columns, DWD consists in solving iteratively subproblems, which generate new columns for (RMP), and the (RMP) itself, which produce new Lagrangean multipliers for the subproblems.In this paper, we prefer to use a variant of DWD called weighted Dantzig–Wolfe decomposition (WDWD), proposed by Wentges (1997). The modified version does not use the optimal solution of (RMP) as Lagrangean multipliers for the next subproblem to be solved, but a specially weighted average of the best multipliers constructed so far. Wentges (1997) showed that WDWD is faster on average than DWD, when is applied to the capacitated facility location problem. For the TSFLP-HC, we keep the preliminary phase based on subgradient optimization to provide good bounds and multipliers that can be reused during WDWD.Before applying WDWD, we define the Lagrangean dual problem (LDP) using three setsSX,SYandSjZ(j∈J)which correspond to the Lagrangean subproblems already described in Section 3.1.SXis the set of feasible solutions for the minimum-cost flow subproblem (FSP),SYdenotes the feasible solutions of (0–1KP), andSjZ(j∈J)is the set of solutions of(BKPj),j∈J. A superscript is added to variablesXijp,YjandZjmwhen we refer to one solution s inSX,SYandSjZ, respectively, i.e.:Xijp,s,YjsandZjm,s.The Lagrangean dual can be formulated as follows:(17)(LDP):maxU+Vs.t.Wj⩾∑m∈Mjλjqjm-bjmZjm,s∀s∈SjZ,∀j∈J(18)V⩽∑j∈J(gj-Wj)Yjs∀s∈SY(19)U⩽∑p∈P∑i∈I∑j∈J(hijp+λjvp)Xijp,s+∑p∈P∑j∈J∑k∈KhjkpXjkp,s∀s∈SX(20)V∈R(21)U∈R(22)Wj⩾0∀j∈J(23)λj⩾0As problem (LDP) contains a huge number of constraints, we consider its dual (MP) which is going to be used as master problem in the weighted Dantzig–Wolfe decomposition. Letαjs,βs,γsbe the dual variables for constraints (17)–(19), respectively. The dual (MP) of (LDP) is given below. The dual variables of constraints (24)–(27) correspond respectively to the variablesU,Wj,λjand V of the Lagrangean dual problem.(24)(MP):min∑j∈J∑m∈Mj∑s∈SjZbjmZjm,sαjs+∑j∈J∑s∈SYgjYjsβs+∑p∈P∑i∈I∑j∈J∑s∈SXhijpXijp,s+∑p∈P∑j∈J∑k∈K∑s∈SXhjkpXjkp,sγss.t.∑s∈SXγs=1(25)∑s∈SYYjsβs-∑s∈Sjzαjs⩾0∀j∈J(26)∑s∈Sjz∑m∈MjZjm,sqjmαjs-∑s∈SX∑p∈P∑i∈IvpXijp,sγs⩾0∀j∈J(27)∑s∈SYβs=1(28)αjs⩾0∀s∈SjZ,∀j∈J(29)βs⩾0∀s∈SY(30)γs⩾0∀s∈SXIn order to implement column generation, we construct a restricted master problem by replacing the setsSX,SYandSjZ(j∈J)of the master problem by subsetsS∼X,S∼YandS∼jZ(j∈J). These subsets are respectively initialized with solutions from the poolsP∼x,P∼yandP∼z, gathered during the subgradient procedure (Algorithm 1). By solving the restricted master problem optimally, we obtain the values of its dual variables, denoted asU∼,Wj̃,λj̃andV∼. Using the values of these variables, we attempt to price out new columns (variables) whose reduced costs are negative.Firstly, for each depotj∈J, we solve a bounded knapsack problem with fixed valuesWj̃andλ̃j:RC1j=Wj̃-max∑m∈Mj(λj̃qjm-bjm)Zjms.t.Zjm∈SjZIf reduced costRC1jis negative, we price out the corresponding columnsZjm,m∈Mj. Next, the following 0–1 knapsack problem is solved withV∼:RC2=minj∈J(gj-Wj̃)Yj-V∼s.t.Yj∈SYColumnsYj,j∈J, are priced out when reduced costRC2is negative. Finally, we turn to a minimum-cost flow subproblem with fixed values forU∼andλj,∀j∈J. Similarly, all columnsXijpandXjkpare priced out if reduced costRC3is negative.RC3=min∑p∈P∑i∈I∑j∈Jhijp+λ̃jvpXijp+∑p∈P∑j∈J∑k∈KhjkpXjkp-U∼s.t.Xijp,Xjkp∈SXThe WDWD procedure is composed of two parts: one concerns the restricted master problem while the other deals with the Lagrangean subproblems. The first part iteratively solves the restricted master problem by the column generation technique to insert at each iteration high-quality columns into the problem, while improving Lagrangean multipliers. The second part aims to further improve the best lower bound by solving the Lagrangean subproblems, using multipliers provided by the first part. It is worth noting that the second part also prices out good columns into the restricted master problem, which accelerate convergence. Therefore, these two parts are interdependent.According to preliminary tests, we observed that the restricted master problem becomes harder to solve as columns are repeatedly added. However, many columns in the restricted master problem do not correspond to basic variables in the optimal solution. We adopt the method proposed by Klose and Görtz (2007) in order to accelerate the weighted Dantzig–Wolfe decomposition procedure by eliminating the columns which are non-basic during a certain number of iterations.The WDWD procedure in this paper extends the traditional WDWD procedure proposed by Wentges (1997), which is an overall solution architecture, by including the method of updating subsets of MP, the approach of updating Lagrangean multipliers and iterative multipliers, the criterion of adding new columns into MP, and stopping condition of WDWD procedure.Algorithm 2 depicts the WDWD procedure.ZRMPdenotes the objective value of the restricted master problem.UB∗is the best upper bound found andLB∗the best lower bound.εDWis the chosen tolerance, h the iteration number andHDWthe maximum number of iterations.Nbis the number of iterations before removing a non-basic column.Nimpis the number of improvements of the lower bound since the beginning of the algorithm.λ∗andλ̃respectively denote the best and current multipliers. A weighted averageλ¯is deduced in line 8, using a weightϕhand a constantc¯. The formula used gives more importance to the best multipliers as the number of iterations grows, to better exploit the information they represent.Path-relinking strategy was initially proposed as post-optimization procedure within a tabu search algorithm by Glover and Laguna (1997) but it can be applied to most metaheuristics. It consists in exploring trajectories (paths) that link elite solutions collected during the metaheuristic. To build a path between two elite solutions, one of them (the initiating solution) is progressively transformed into the other one (the guiding solution), which generates a sequence of intermediate solutions. The transformation is often based on a kind of move that introduces in the incumbent solution attributes of the guiding solution.Our path-relinking for the TSFLP-HC is depicted in Algorithm 3. It works in the space of 0–1 vectorsYwhich define the status open/closed for each depot. A path is generated between the two best vectors found during the previous phases. The best of the two,YI, is used as initiating solution, the otherYGbeing the guiding solution. Starting fromY=YI, we setYj=YjGforj=1,2,…,|J|, i.e., the 0–1 vectorYis progressively transformed intoYG, from left to right. A slope scaling heuristic is executed to deduce a feasible TSFLP-HC solution from each new vectorY.Z(Y)denotes the cost of this solution.Algorithm 2Weighted Dantzig–Wolfe decomposition1: letUB∗andLB∗be the best upper bound and the best lower bound obtained by Algorithm 1 and Lagrangean relaxation2: initialize:εDW=0.01,HDW=50,Nb=5,Nimp=0,c¯=2andZD=UB∗3: forh=1toHDWwhilemin{ZRMP,UB∗}/LB∗>1+εDWdo4://Restricted master problem5:solve the RMP with subsetsS∼X,S∼YandS∼jZ(j∈J)6:record the objective valueZRMPand the current dual variablesU∼,V∼,Wj̃andλ̃j(j∈J)7:remove all columns inS∼X,S∼YandS∼jZj∈Jwhich have been non-basic for the lastNbiterations8:compute the weightϕh=min{c¯,(h+Nimp)/2}and the new multipliersλ¯=1ϕhλ̃+ϕh-1ϕhλ∗9:column generation: add all variablesX,YandZj(j∈J)priced out intoS∼X,S∼YandS∼jZ(j∈J)10: //Lagrangean subproblems11: setϕh′=ϕh12:loop13: usingλ¯, solve problems FSP and 0–1KP with problemsBKP(j),j∈J14: new objective values U and V and a new solution(X,Y,Zj,j∈J)are obtained15:ifU+V>LB∗thenLB∗=U+V,Nimp=Nimp+1andλ∗=λ¯endif16: deduce reduced costs of variables in(X,Y,Zj,j∈J)from dual variablesU∼,V∼,Wj̃andλj̃,j∈J17:exit when there exist variables with negative reduced costs in(X,Y,Zj,j∈J)18: set1ϕh′=1ϕh′+0.05andλ¯=1ϕh′λ̃+ϕh′-1ϕh′λ∗19:end loop20: add variables with negative reduced costs toS∼X,S∼YandS∼jZ,j∈J, respectively21: apply the Lagrangean heuristic of Section 3.2 to repair solution(X,Y,Zj,j∈J)22: letZfeabe the objective value of the resulting feasible solution23:ifZfea<UB∗thenUB∗=Zfeaendif24: end forPath-relinking procedure1:Y=YI2: forj=1to|J|do3:ifYj≠YjGthen4:ifYj=0then5:close depot j (Yj=0) and open the nearest closed depotj′in{j+1,j+2,…,|J|}(Yj′=1)6:else7:open depot j(Yj=1)and close the nearest depotj′in{j+1,j+2,…,|J|}(Yj′=0)8:end if9:  apply the slope scaling heuristic (see text) to derive a feasible TSCFLP-HC fromY10:ifZ(Y)<Z(YG)then11:record the solutionYand update the best upper boundUB∗12:end if13:end if14: end forSlope scaling is an efficient heuristic successfully applied to facility location problems (Gendron et al., 2003), network design (Crainic, Gendron, & Hernu, 2004) and special minimum-cost flow problems (Kim & Pardalos, 2000). It is applied here to each vectorYgenerated in Algorithm 3. Each iteration begins by solving the following minimum-cost flow problem(P1)for the setJ‾of open depots defined byY:(P1):ZP1(Y)=min∑p∈P∑i∈I∑j∈Jh¯ijpXijp+∑p∈P∑j∈J∑k∈Kh¯jkpXjkps.t.Constraints(2)–(4),(9)and(10).∑p∈P∑i∈IvpXijp⩽cj∀j∈J‾The transportation costsh¯are initialized with the original costsh. LetX‾be the resulting solution.Next, usingX‾, we solve one problemP2jfor each open depot ofJ‾to find the number of handling modules required for each type.Z‾jdenotes the solution obtained for problemP2j,j∈J‾.P2j:ZP2j(X‾)=min∑m∈MjbjmZjms.t.∑m∈MjqjmZjm⩾∑p∈P∑i∈IvpX‾ijp0⩽Zjm⩽ujm,Zjminteger∀m∈MjUntil now, we got a feasible solution defined byY,X‾andZ‾j(j∈J‾). We can observe that problemP1and problemsP2j(j∈J‾) are solved separately, i.e., variablesX‾are determined without considering handling costs. We apply the slope scaling technique proposed by Crainic et al. (2004) to improve solution quality. It consists in incorporating the handling costs into the transportation costs for each arc incident with depotj,j∈J‾.(31)h¯ijp=hijp+vpZP2j(X‾)2∑p′∈P∑i∈Ivp′X‾ijp′∀p∈P,∀i∈I(32)h¯jkp=hjkp+vpZP2j(X‾)2∑p′∈P∑k∈Kvp′X‾jkp′∀p∈P,∀k∈KThis completes one iteration. The process is repeated with the new costsh¯. If the denominator of Eq. (31) or (32) becomes null for a depotj∈J‾, the corresponding modified cost is set to the maximum value obtained in previous iterations. The slope scaling heuristic stops whenh¯does not change.All algorithms were coded in Java and evaluated on a server with a 2gigahertz Intel Xeon processor, 2gigabytes of RAM and the Linux operating system. The following subsection describes how the instances used are generated. Next, the lower and upper bounds are compared with the results of CPLEX, on instances with 5 products and 62–224 nodes Finally, more detailed results are given for instances with up to 3–7 products and 62–434 nodes, varying the following parameters: the ratio number of depots/number of plants, the ratio number of customers/number of depots, the number of products, the average number of module types and the ratio total capacity of depots/total demand.The nodes of our instances are located on a3×2grid, like in Gendron et al. (2003). In these graphs, customers and depots are confined in predefined customer zones and depot zones. Depot zones overlap customer zones. Each zone is defined by a density which determines the number of nodes in it. Since our problem has an additional layer (the plants), we randomly distribute the plant locations in the depot zones, according to the zone density. Transportation costs are equal to the Euclidean distance, multiplied by a random factor in[1,5]. The reader is referred to the work of Gendron et al. (2003) for more details about this node generation method. The links between depots in this work are here ignored, since our problem excludes shipments among depots.As the problem considered in this paper is similar to the one of (Li et al., 2011), most parameters of test instances were constructed by using the random generation method proposed in our preliminary trial (Li et al., 2011), but with slight difference on two parameter definition: (1) the number of modules of type m at depot j (qjm) is drawn in[0.8×cj/(10×|Mj|),1.2×cj/(10×|Mj|)]and (2) the handling costbjmis set tohtot×qjm/(10×|K|), in whichhtotdenotes the sum of unit transportation costs over all arcs. The tests involve 30 groups of 5 instances each. All instances in a group share the following attributes: the number of plants|I|, the number of potential depots|J|, the number of customers|K|and the average number of module types per depot, denoted asM‾. All other data are randomly generated using uniform distributions.In this subsection, results of our algorithm are first compared with those of CPLEX, on 12 groups of instances P1 to P12 withRJI=|J|/|I|=10,RKJ=|K|/|J|=2,M‾=10andΔ=2. To improve CPLEX performance, we set cut strategy of GUB cuts, flow cover cuts and cover cuts with aggressive. The results are shown in Table 1. The columns for CPLEX concern the linear mixed-integer program (1)–(12) presented in Section 2. For the five instances of each group, they provide average values for the solution gap in percent, the CPU time in seconds and the number of failures due to memory overflows (Fail). The gap is computed as(UBCPLEX-LBCPLEX)×100/LBCPLEX, whereUBCPLEXandLBCPLEXdenote the upper and lower bounds found by CPLEX. A memory overflow occurs when there is no memory left to allocate new nodes in the branch-and-bound procedure of CPLEX. In that case, the solver returns the best bounds found at this time point. SOP means the subgradient optimization procedure and DWPR the weighted Dantzig–Wolfe decomposition followed by the path-relinking procedure. The gap is equal to(UB∗-LB∗)×100/LB∗, whereUB∗andLB∗are the best bounds achieved by our approach. The last two lines display the average and standard deviations for the gaps and running times.We can observe that CPLEX can solve to optimality the smallest instances, in groups P1 (62 nodes) and P2 (64 nodes). For all the other groups, the branch-and-bound of CPLEX lacks memory and the CPU time grows rapidly with problem size, exceeding 3hours on instances with more than 200 nodes (groups P6 and P12). Apart from groups P1, P2, P3, P7 and P8 (at most 124 nodes) for which CPLEX provides smaller solution gaps, the deviations obtained by the two approaches are quite close. Our approach even outperforms CPLEX a little on groups P9 and P12. In all cases, the SOP+DWPR achieves small gaps (average 1.31%, maximum 1.73), in less than one hour of computation.Table 2illustrates the contribution of the two phases of our approach, the subgradient optimization procedure (SOP) and the weighted Dantzig-Wolfle decomposition followed by path-relinking (WDPR). We can see that SOP achieves a gap of 3.93%, in 18minutes on average and 54minutes on the largest instances of group P21 with 310 nodes, 5 products and 10 module types per depot. WDPR divides these gaps by three, which can be explained by its better exploitation of problem structure. Moreover, the gaps are rather stable, as shown by the standard deviation. The price to pay is a larger running time, multiplied by 2.4 compared with SOP. Three hours are required for the largest instances, which is acceptable for a problem involving strategic decisions: building depots on the selected sites will engage the company for years, which is worth consuming a few hours of computer time.Tables 3 and 4show how results are affected if more plants or more customers are added, with the same number of depots. In Table 3,RJIis reduced to 5 whileRKJis increased up to2.5in Table 4. In both cases, the flow subproblem (FSP) formulated in Section 3.1 is larger and, as it is repeatedly solved in the subgradient procedure and in the weighted Dantzig–Wolfe decomposition, the two phases last longer on average, especially in Table 4 (+15% for SOP and +34% for DWPR). However, the solution gaps are only marginally affected. The average distance to the lower bound increases a bit when more plants are added, but the difference comes mainly from instances with 20 depots, for which the results are not as good as in Table 2 (1.73% vs. 0.72%). This average is even slightly improved in the case of additional customers (1.09%). In the two cases, the gaps are remarkably stable, with a standard deviation below 0.2%. We can conclude that our approach is not very sensitive to the numbers of plants or customers.We provide in Table 5results for 3 and 7 products instead of 5. A smaller number of products decreases the number of variables in the multicommodity min-cost flow problem (FSP). Our algorithms are in that case able to solve larger instances with up to 140 depots and 434 nodes (P37 group). Increasing the number of products has an opposite effect: with a running time limited to 5hours (18,000seconds), we cannot solve instances as large as in the previous tables: the biggest instances (P49 group) contain 80 depots and 248 nodes. Again in this table, solution quality and stability must be underlined.Table 6presents some results when the average numberM‾of module types is doubled. The running times increase a bit but the solution gaps are very close to those in Table 2, although we have to choose among more module types. The reason is that the associated knapsack problems are solved very rapidly by modern solvers like CPLEX.Finally, we tried to change the tightness factorΔused to choose depot capacities in the random generation of instances (Section 4.1). This parameter was set to 2 in previous tables. Table 7depicts the results forΔ=2.25andΔ=1.75. Compared with the caseΔ=2(Table 2) with its average solution gap of 1.24%, the problem becomes harder when the total capacity of depot sites is closer to total demand (Δ=1.75): the gap reaches 1.46% and the running time increases by 72%. WhenΔ=2.25, our method returns smaller solution gaps (1.17%) but the running is still larger (+34%). The reason probably resides in the higher number of possible choices for the open depots.In this paper, in addition to the opening costs of depots and transportation costs considered in the classical two-stage capacitated facility location problem, we handle handling costs to make a step toward on a more realistic problem since the cross-docking operations in logistic hubs is known to represent a labor and capital intensive process. The proposed solution method integrates a subgradient optimization procedure based on the Lagrangean relaxation of a linear mixed-integer formulation of the problem, a weighted Dantzig–Wolfe decomposition and path-relinking.The tests on 350 randomly generated instances with 62–434 nodes show that our approach consistently provides average solution gaps below 1.5%, with a remarkable stability confirmed by standard deviations. In comparison, a direct resolution of the MIP via CPLEX leads to a systematic memory overflow beyond 64 nodes. Concerning running times, instances with 100 nodes can be tackled in 15minutes and with 200 nodes in less than four hour. The computational time is mainly affected by the number of products, with up to 4hours and 40minutes for 8 plants, 80 depots and 160 customers. However, such durations are acceptable for a problem involving decisions at the strategic level.In the future, we envisage to extend our problem by considering a multiperiod horizon, giving a dynamic facility location problem with handling costs. Besides deciding which depots must be opened or closed, we wish to tackle period-dependent demands, supplies, shipment costs and the labor force. The goal will be to minimize the total cost of the system over the planning horizon. Our next step is to elaborate an efficient and effective solution method for this interesting problem.

@&#CONCLUSIONS@&#
