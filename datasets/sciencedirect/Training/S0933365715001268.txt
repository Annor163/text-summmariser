@&#MAIN-TITLE@&#
Using Arden Syntax for the creation of a multi-patient surveillance dashboard

@&#HIGHLIGHTS@&#
We created a graphical multi-patient dashboard entirely in Arden Syntax.We separated medical knowledge from technical functions through modularization.The prototype is easily extensible with additional medical knowledge.The prototype is sharable with other multi-patient installations.Encoded medical knowledge is reusable within additional dashboards.

@&#KEYPHRASES@&#
Arden Syntax,Medical Logic Modules,Multi-patient clinical decision support,Surveillance dashboard,

@&#ABSTRACT@&#
ObjectiveMost practically deployed Arden-Syntax-based clinical decision support (CDS) modules process data from individual patients. The specification of Arden Syntax, however, would in principle also support multi-patient CDS. The patient data management system (PDMS) at our local intensive care units does not natively support patient overviews from customizable CDS routines, but local physicians indicated a demand for multi-patient tabular overviews of important clinical parameters such as key laboratory measurements. As our PDMS installation provides Arden Syntax support, we set out to explore the capability of Arden Syntax for multi-patient CDS by implementing a prototypical dashboard for visualizing laboratory findings from patient sets.Methods and materialOur implementation leveraged the object data type, supported by later versions of Arden, which turned out to be serviceable for representing complex input data from several patients. For our prototype, we designed a modularized architecture that separates the definition of technical operations, in particular the control of the patient context, from the actual clinical knowledge. Individual Medical Logic Modules (MLMs) for processing single patient attributes could then be developed according to well-tried Arden Syntax conventions.ResultsWe successfully implemented a working dashboard prototype entirely in Arden Syntax. The architecture consists of a controller MLM to handle the patient context, a presenter MLM to generate a dashboard view, and a set of traditional MLMs containing the clinical decision logic. Our prototype could be integrated into the graphical user interface of the local PDMS. We observed that with realistic input data the average execution time of about 200ms for generating dashboard views attained applicable performance.ConclusionOur study demonstrated the general feasibility of creating multi-patient CDS routines in Arden Syntax. We believe that our prototypical dashboard also suggests that such implementations can be relatively easy, and may simultaneously hold promise for sharing dashboards between institutions and reusing elementary components for additional dashboards.

@&#INTRODUCTION@&#
Clinical decision support (CDS) functions based on Arden Syntax for Medical Logic Systems typically retain a single patient focus. This means that the underlying decision modules are generally limited to access data from a single patient. While many Arden Syntax installations are incapable of multi-patient CDS, the technical specifications of this standard actually leave the definition of input parameters for any interaction with a clinical information system to the particular institution [1,2]. A parameterization of the patient context would thus, in principle, allow for cross-patient database queries. Subsequent extensions of the initial type system of Arden Syntax, in particular the support for nested data structures provided by the object data type, appear specifically advantageous for processing more complex inputs such as for the description of patient sets. We therefore set out to demonstrate the fundamental capability of Arden Syntax for multi-patient CDS by implementing a prototypical graphical dashboard that simultaneously visualizes laboratory results from a population of intensive care patients.Arden Syntax is a standard for encoding and sharing medical knowledge [1]. Its classic field of application is the data-driven monitoring of clinical events [3]. In Arden Syntax, the knowledge base consists of independent modules, termed Medical Logic Modules (MLMs). An MLM typically contains sufficient knowledge to make a single clinical decision. Each MLM has a hierarchical structure, consisting of sections termed categories, which are themselves structured into subsections termed slots. For an introduction to this basic MLM structure see [4]. The execution of MLMs presupposes their transformation into a runnable format by an Arden compiler. The execution process is controlled by a runtime environment termed Arden engine. Whenever an MLM is evoked by a clinical event, such as the storage of a blood glucose value inside the patient record, several slots are subsequently executed. The DATA slot covers the readout of data from the patient record and maps them to variables. The LOGIC slot, containing the actual institution-independent medical knowledge, decides whether an action is to be performed or not. If so, the ACTION slot is executed. A typical action would be to send an alert notification to the clinical users.In practice, operating MLMs to support clinical decisions requires access to medical patient records. This may be a problem, as widely accepted standards for the patient records themselves, or for the interfaces to access their contents, have not yet evolved. Therefore, the designers of Arden Syntax decided to leave the access to clinical data to the particular institution, providing a pair of curly braces to enclose the parameters required to specify the database access. The fact that any institution must find its own solution to enable data access is therefore commonly referred to as the “curly braces problem”, which entails that any institution has to implement a way to map data items from patient records to data types of Arden Syntax. The elementary data types of Arden Syntax include those typically found in patient records, such as numbers, strings or timestamps. Initially, flat lists were the only compound data type, which prohibit nested data structures. About a decade ago, however, the type system was complemented with the object data type, which supports nesting to a random depth [5].While the potential utility of graphical summaries of individual patient records that “can be updated in real time” has been long recognized [6], a number of more recent publications [7–18] underline their increasing use for monitoring more comprehensive inputs. These automatically updated displays of time-varying metrics, also termed digital dashboards, have been proposed or applied for continuously summarizing and tracking diverse clinical or administrative parameters, such as department workflows [9,12–15], medication-related alerts [10,16,18], critical event reports [17], influenza surveillance measures [8], or preventative interventions [11,19,20]. A review of graphical methods for CDS purposes identified multi-patient visualizations among the more recent trends [21]. Previously published dashboard implementations had employed heterogeneous technical instruments [22], including Python [16], Ruby [14], PHP [8], and spreadsheets [12]. We are unaware of any previous implementation of a digital dashboard based on Arden Syntax. We assume that the particular density of electronically available intensive care unit (ICU) data, which has also fueled efforts to algorithmically induce new medical knowledge [23–25], specifically justifies investigations of clinical dashboards that process this rich information source.The purpose of this study was to investigate the opportunities for implementing graphical dashboards by means of Arden Syntax MLMs. We thus studied the technical requirements of an Arden Syntax installation to support the construction of a dashboard. Moreover, we investigated in how far our proposed prototype may be shareable with other institutions, and which parts of its architecture may be reused for the construction of additional dashboards.University Hospital Erlangen is a tertiary care hospital with 1.400 beds. Starting in 2006, a commercial patient data management system (PDMS, Integrated Care Manager, ICM©, Dräger Medical, Lübeck, Germany) has been installed at nine local ICUs [26]. The PDMS does not natively provide a means to generate patient overviews with customizable CDS functions. This forced local clinicians to subsequently open multiple patient records in order to obtain an overview of clinically relevant data from patient populations, which is time consuming. Thus, clinicians expressed a need for the construction of dashboards that graphically summarize multi-patient overviews of selective clinical parameters processed by CDS functions. During a previously described research cooperation we had technically integrated a commercial Arden engine environment (ArdenSuite©, Medexter Healthcare, Vienna, Austria) with the PDMS [27], providing 30 self-written MLMs of different complexity for daily routine. Another Arden environment, written by one of the authors for research on the language constructs itself, was the technical platform for this study. Our investigation was based on Arden Syntax version 2.8 [2], which supports the object data type.The first step of our study was to determine the practical requirements of the local clinical users in an interview, and to agree upon a basic graphical layout for the display of a dashboard prototype. They requested a tabular view of rectangular output elements, which we termed “signals”, with one table row for each patient, as shown in Fig. 1A. The first and last cell of each row display the patient name and bed position, while the remaining center cells contain signal outputs that are dynamically computed from patient facts (described below). For our prototype, we agreed on a set of clinical parameters to be processed and displayed, including three important laboratory values (blood glucose, leukocytes, and thrombocytes).To limit the complexity of the implementation and to ensure an easy extensibility of our prototype, we decided to modularize our approach. In particular, we intended to separate the technical aspects from the representation of actual clinical knowledge as far as possible. We chose to separate the logic controlling the patient context in a “controller MLM”, which iterates over the case numbers of all patients that are currently on the ward. A complementary set of signal-specific MLMs defines the actual medical knowledge according to well-tried conventions in the sense that these signal MLMs can already assume a specific patient context (which is set by the controller MLM).The next step was to design a data structure for the internal representation of the dashboard. We decided on a list of objects that each represents a table row (data type dashboardrow). Such an object contains four attributes as shown in Fig. 1B. The last attribute signallist stores a list of objects of another type, each of them representing one signal (data type signal). An object of type signal contains a superset of all attributes collected during the interview, like a label, a color, a numeric value (like a calculated score value), a tooltip, and so on. Each signal MLM has to be called with a case number as the only argument and has to return exactly one signal object. Besides these two requirements, any signal MLM might be programmed according to established Arden Syntax conventions. The controller MLM as the centerpiece of our architecture creates a dashboard representation as a list of dashboardrow objects, complete with case numbers, patient names and bed positions. The list of signals inside each row is initialized to an empty list. Signal objects are appended inside a loop, successively calling signal MLMs for each patient to complete the data structure row by row, signal by signal.To display the dashboard within the PDMS user interface, we created a presenter MLM that is called by the controller MLM, using the internal data structure that represents the dashboard as an argument. The presenter MLM thereby generates a HyperText Markup Language (HTML) table whose signal-specific cells are individually formatted via Cascading Style Sheets (CSS). Fig. 2demonstrates our presentation approach. For each attribute of the signal object, the presenter MLM creates an HTML element (DIV), and formats it according to a corresponding style sheet definition.To gain an idea of the execution speed we created a test script that invokes the dashboard 1000 times with a random delay between 1 and 3s on a standard server machine. To investigate the potential impact of multithreading on execution speed we implemented an alternative controller component, using a multithreading library to parallelize the execution of the signal MLMs.

@&#CONCLUSIONS@&#
