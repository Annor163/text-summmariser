@&#MAIN-TITLE@&#
Imposing angle boundary conditions on B-spline/NURBS surfaces

@&#HIGHLIGHTS@&#
We study the construction of a B-spline surface satisfying prescribed angle distribution of tangent planes along its boundary curve.We prove that for a given B-spline curve, the exact solution exists only in very special cases (for a special form of an angle function).We propose an algorithm for finding an approximate solution, derive a bound on its approximation error and study the approximation order of the proposed algorithm.

@&#KEYPHRASES@&#
NURBS surface,B-spline surface,Pelton turbine bucket,

@&#ABSTRACT@&#
Graphical abstract(14)g2(t)=q2(t)(cx′(t)2+cy′(t)2)(cy(t)cx′(t)−dy(t)cx′(t)−cx(t)cy′(t)+dx(t)cy′(t))2+q2(t)(cx′(t)2+cy′(t)2),q(t)∈R[t].cosf(t)=2(2+3t−6t2+3t3)5−16t+52t2−56t3+20t484−52t−51t2+1648t3−2518t4−3604t5+15641t6−22072t7+16108t8−6016t9+916t10.B-spline and NURBS curves and surfaces are currently the standard objects used in geometric modeling (cf. e.g.  [1]) for shape representation of objects. They are based on polynomial/rational parameterizations of curves and surfaces and allow to describe complex shapes with the composition of a relatively small number of low degree patches.Since the current CAD/CAM systems mostly rely on the description of objects based on B-spline/NURBS curves and surfaces, the standard approach in industrial engineering is to construct a model of a product in a CAD/CAM system and analyze it with the help of the follow-up computation based on Finite Element Method (FEM) or Finite Volume Method (FVM), depending on a type of an analysis necessary to perform. Such computations typically require to discretize a computational domain, i.e., to find a triangular or rectangular mesh of a surface or tetrahedral or quadrangular mesh of a volume. Obviously, the exact description of an object represented by B-spline/NURBS objects is lost. This can cause errors in the computational analysis and, eventually, in a shape optimization procedure based on the results of these computations. Recently, a modification of the well-known Finite Element Method (see e.g.  [2]) based on B-spline/NURBS objects appeared (cf.  [3,4]). The approach is known as isogeometric analysis and it is similar to FEM, only meshes typically used in FEM are replaced by meshes composed of parts of NURBS surfaces/volumes representing the computational domain. Thus, high-quality parametric geometric models with subsequent application of isogeometric analysis can serve as a cornerstone of modern automatic shape optimization algorithms.This motivated us to focus on a modeling of a Pelton turbine bucket with the help of B-spline surfaces. Pelton turbine (see Fig. 1) is a type of an impulse turbine which extracts the energy from the impulse of moving water (see e.g.  [5]). The main component of the Pelton turbine is the runner with buckets (also called Pelton wheel) which converts kinetic energy of the flowing fluid into the rotational energy. The water flows along the tangent to the runner and a nozzle streams the flow of water against buckets (or cups) mounted around the edge of the wheel. The buckets are divided into two parts by the so-called splitter. The water jet strikes the splitter symmetrically and the flow is equally distributed into two halves of the bucket. Pelton turbines belong among the most efficient types of the water turbines and they are the preferred turbines for hydro-power, when the available water source has relatively high hydraulic head at low flow rates.A lot of papers about numerical and experimental analyses of flow in Pelton turbines have been published in recent years—we will mention only a few of them focusing mainly on a modeling of the flow in the bucket. One of the first attempts to calculate free surface flow in a rotating bucket was done in  [6]. Paper  [7] investigates free surface flow in a Pelton turbine bucket using numerical simulations based on the two-phase homogeneous model. This paper studies the momentum transfer between the water particles and the bucket and shows the regions of the bucket contributing the most to the torque. Numerical analysis of flow in a two jet Pelton turbine with horizontal axis is studied in  [8]. The most complete analysis of flow in Pelton turbines was done in  [9] where flow in a rotating bucket was investigated experimentally through unsteady wall pressure measurements, flow visualizations and water thickness measurements and experimental results are completed with numerical computations. Two different jet configurations are analyzed and interaction between the jet and the bucket is studied in  [10]. CFD model, that predicts the torque applied to a Pelton bucket, subject to high-speed water jet, was developed and described in  [11]. There exist also several papers devoted to optimization procedures for construction of Pelton turbines, see e.g. [12,13]. However, they are not usually focused on the optimization of design parameters of a Pelton turbine bucket and if so, they optimize only basic parameters such as length, width and depth of the bucket. One of the reasons probably consists in complicated description of design parameters and shape properties of the bucket.In general, there are not many papers concentrating only on geometric models of parts of water turbines, but there are several papers which focus on different techniques for creation of geometric models of their blades (especially for Kaplan and Francis turbines) because of their complicated shape and importance in the process of transferring energy. For example, the methods for interactive design of blades are presented in  [14]. Blades are represented with NURBS surfaces and blades sections are defined with respect to general surfaces of revolution. Another method for modeling turbine blades based on lofted B-splines is presented in  [15], where the lofting process is extended to cylindrical and to conical isoparametric lines. A computer based process for modeling blades of horizontal axis turbines using B-spline surfaces is described in  [16]. This method starts with the creation of a 3D set of offsets that constitute rotor blades based on a 2D definition of airfoils, which is normally used in the design of different stations along the rotor blade and there is an emphasis on the fitting of a blade’s leading edge. Most of the methods for modeling turbine’s blades focus on using several profiles (sections) of blades and connecting them together to obtain geometric model, whereas M. Rossgatterer et al. (see  [17]) use an approach based on medial surface of a blade and profile curves attached to it and the construction of these curves depends on B-splines. Furthermore, there exist several papers devoted to particular problems related to the construction of geometric models of parts of industrial machines. For instance, the paper  [18] presents an algorithm for generating B-spline curves with cusps or B-spline surfaces with edges containing cusps with a specific angle constraint at the cusp. In paper  [19], the authors focus on a constrained object reconstruction. In particular, as a part of the algorithm a method for joining a plane and a free-form B-spline surface with a constant angle constraint is presented in the paper.The geometric model of a Pelton turbine bucket based on B-spline surfaces can be composed of a relatively small number of bicubic patches. Moreover, it allows to use isogeometric analysis for numerical simulations of the flow in the bucket and, consequently, for the shape optimization of the bucket. Since the bucket is usually given by several parameters (angles and distances), we investigate the imposition of these parameters to a B-spline model of the bucket. In particular, the main aim of the paper is to study given angle boundary conditions prescribed along a splitter and an outlet curve of the bucket and how they can be satisfied on the B-spline model. The main results of the paper are: (1) we prove that generally there exists no exact solution of this problem and (2) we propose an algorithm for finding an approximate solution, together with deriving a bound on its approximation error and numerical confirmation of an optimal approximation order of the algorithm.The rest of the paper is organized as follows. Section  2 briefly reviews the fundamentals of B-spline and NURBS curves and surfaces. Section  3 is devoted to the description of the problem and mainly discusses the existence of an exact solution. In Section  4, we formulate an algorithm for computation of an approximate solution, give a bound for its approximation error, numerically derive an approximation order of the algorithm and present several examples. Section  5 then concludes the paper.In this section, we briefly review fundamentals of the theory of B-spline/NURBS curves and surfaces, for more details see e.g.  [1].A NURBS curve of degreepis determined by a control polygon of control pointsPi, their associated weightswi,i=0,…,nand a knot vectorT=(t0,…,tn+p+1). Then its parameterization is of the form(1)c(u)=∑i=0nNi,p(u)wiPi∑i=0nNi,p(u)wi,whereNi,p(u)are B-spline basis functions of degreepcorresponding to the knot vectorT.For the given knot vectorT=(t0,…,tn+p+1), the B-spline basis functions are defined by a recursive formulaNi,0(t)={1,ti≤t<ti+1,0,otherwise ,Ni,k(t)=t−titi+k−tiNi,k−1(t)+ti+k+1−tti+k+1−ti+1Ni+1,k−1(t),k=1,…,p.The knot vector is a non-decreasing sequence of real numbers which determines the distribution of a parameter of the corresponding curve/surface/volume. In general, two different forms of the knot vector are commonly distinguished: periodic and non-periodic. Further, we distinguish uniform (uniformly distributed knots) and non-uniform (non-uniformly distributed knots) knot vectors.One of the main properties of B-spline basis functions is a relation between the multiplicity of knots in the knot vector and the continuity of the corresponding B-spline basis functions—the B-spline basis functions are of continuityCp−k, wherekis the maximal multiplicity of inner knots in the knot vector. Among their other properties belong non-negativity, partition of unity and local support.B-spline/NURBS curves possess a lot of important practical properties which follow from their definition and from the properties of B-spline basis functions, such as affine/projective invariance, convex hull property, local modification and variation diminishing property (see  [1]).As a straightforward extension, we can define NURBS surfaces that share most of the properties with NURBS curves. A NURBS surface of degree(p,q)is determined by a control net of(m+1)×(n+1)control pointsPij, their associated weightswij,i=0,…,m,j=0,…,n, and two knot vectorsU=(u0,…,um+p+1),V=(v0,…,vn+q+1). Then its parameterization is of the form(2)s(u,v)=∑i=0m∑j=0nNi,p(u)Nj,q(v)wijPij∑i=0m∑i=0nNi,p(u)Nj,q(v)wij,whereNi,p(u)andNj,q(v)are B-spline basis functions of degreespandqcorresponding to the knot vectorsUandV, respectively (see Fig. 2).Remark 1Let us mention that there exist algorithms for modification of a knot vector and, concurrently, the corresponding control polygon/control net by inserting new knots or elevating degree which do not affect the shape and the parameterization of a NURBS curve/surface. Moreover, these algorithms are very simple as they require to compute only simple combinations of control points to obtain new control polygon/net. More details about knot insertion and degree elevation algorithms can be found in  [1, Sections 5.2 and 5.5].In the rest of the paper, we will study the following problem: Letc(t)=(cx(t),cy(t),0)⊤,t∈[0,1]be a polynomial/rational parameterization of a given curve, e.g. B-spline/NURBS curve being a boundary curve of a general NURBS surfaces(s,t), letu=(0,0,1)⊤be a given vector and letf(t)be a function describing desired angle distribution which we need to prescribe ons(s,t)alongc(t)with respect tou, i.e., it holds that(3)cosf(t)=(0,0,1)⊤⋅(cx′(t),cy′(t),0)⊤×n(0,t)‖(cx′(t),cy′(t),0)⊤×n(0,t)‖wheren(s,t)=rs(s,t)×rt(s,t)‖rs(s,t)×rt(s,t)‖is a normalized normal vector field of a ruled surface(4)r(s,t)=(1−s)c(t)+sd(t),(s,t)∈R×[0,1]determined by the curvesc(t)andd(t)=(dx(t),dy(t),dz(t))⊤,t∈[0,1]. Is it possible to find polynomial/rational curved(t)such that the ruled surface (4) (and alsos(s,t)) satisfies the prescribed angle distributionf(t)alongc(t)?The ruled surfacer(s,t)represents the tangent surface to the desired surfaces(s,t)withc(t)being the boundary curve ofs(s,t)andf(t)the prescribed angle distribution alongc(t). In the context of B-spline/NURBS surfaces, whereas the control polygon ofc(t)determines the boundary column (row) of the control net ofs(s,t), the control polygon ofd(t)(defined for the same knot vector) represents the neighboring column (row) of this control net. Altogether, control polygons ofc(t)andd(t)determine the control net of the ruled surface (4) representing the tangent surface to the B-spline/NURBS surfaces(s,t)and also the first and second columns (rows) of the control net for the NURBS surfaces(s,t).Remark 2Let us emphasize that the angle distribution defined in (3) is independent of directions of the rulings ofr(s,t), as it is related to the normal vector ofr(s,t)alongc(t).Remark 3We study this case for the simplicity of the presented results, but exactly the same approach, presented in the following paragraphs, can be used for a general case, wherec(t)=(cx(t),cy(t),cz(t))⊤,t∈[0,1]andu=(ux,uy,uz)⊤, only the results are too long to be included into the paper.The study of this problem is motivated by the practical problem—modeling of an inner surface of a Pelton turbine bucket, see Fig. 3. Since the bucket is symmetrical with respect to the splitter, it is enough to model only one part. Usually, it is given by several angles and distances (see Fig. 4):•length (l),width (w),depth (d),length of a splitter (ls),width of a cutout in a bucket (wc),inclination of a splitter (is),angle distribution along a splitter (as(t)),outlet angle distribution from the bucket (ao(t)).Without giving all the technical details, we will briefly mention how to prescribe some of the parameters determining the shape of the bucket. One way is to start with the boundary of a B-spline surface describing the bucket, i.e., we describe the control points of the boundary curves. With the help of standard algorithms for knot insertion (see Remark 1) it is possible to satisfy given length, width, length of the splitter, inclination of the splitter and width of a cutout in the bucket, see Fig. 4. Then, we prescribe given angle distributions along a splitter and an outlet curve with the help of the algorithm presented in this paper. Further, it is necessary to preserve the given depth of the bucket. This can be done again with the help of knot insertion—a suitably chosen inner curve is included into the model via determining its control points, see Fig. 4. Finally, remaining control points are determined by minimizing the sum of the squared second order differences of control points to minimize the curvature of the resulting surface.The most difficult part of imposing given angles and distances on the Pelton turbine bucket B-spline model is to satisfy prescribed angle along a splitter and an outlet angle distribution which relates to the problem described in the previous paragraphs and which is the main aim of the paper.In the rest of the paper, the practical example which we will have in mind and which we will use for demonstrating most of the results, will be the uniform bicubic B-spline surface composed of 7×4 patches which is determined by the control net of 12×7 control points and knot vectorsU=(0,0,0,0,1/7,2/7,3/7,4/7,4/7,4/7,5/7,6/7,1,1,1,1),V=(0,0,0,0,1/4,1/2,3/4,1,1,1,1).This B-spline surface gives enough flexibility to model the shape of the inner surface of a Pelton turbine bucket. The multiplicity of one inner knot inUis increased to three to include one inner curve, representing the prescribed depth of a bucket, see Fig. 4. Despite this fact, the final B-spline surface isC2continuous (as the conditions forC2continuity across the inner curve are prescribed on the control points in the control net).In this section, we will study the existence of an exact solution of the above mentioned problem. Letc(t)andube defined as in the beginning of Section  3 and letf(t)be a given function defined fort∈[0,1]. We want to determine if there always exists another polynomial/rational curved(t)=(dx(t),dy(t),dz(t))⊤,t∈[0,1]such that the ruled surfacer(s,t)(cf. (4)) fulfills (3), or if such a curved(t)exists only in special cases.Thus, in the first step we need to computed(t)for givenc(t),uandf(t). Normal vectors ofr(s,t)alongc(t)can be written in the form (for brevity we mention not normalized form)n(s,t)|s=0=(−dz(t)cy′(t)dz(t)cx′(t)cx′(t)(cy(t)−dy(t))+(dx(t)−cx(t))cy′(t)).Substituting to (3) we obtain(5)cosf(t)=dz(t)cx′(t)2+cy′(t)2(cx′(t)(cy(t)−dy(t))+(dx(t)−cx(t))cy′(t))2+dz(t)2(cx′(t)2+cy′(t)2).If we denoteg(t)=cosf(t), then we compareg2(t)with the square of the right-hand side of (5), i.e.,(6)g2(t)=dz2(t)(cx′(t)2+cy′(t)2)(cx′(t)(cy(t)−dy(t))+(dx(t)−cx(t))cy′(t))2+dz(t)2(cx′(t)2+cy′(t)2),and we can solve this equation with respect todx(t). We arrive at(7)dx(t)=cx(t)+cx′(t)(dy(t)−cy(t))cy′(t)±dz(t)1−g2(t)g(t)cx′(t)2+cy′(t)2cy′(t).Similarly, we can solve (6) with respect tody(t)to obtain(8)dy(t)=cy(t)+cy′(t)(dx(t)−cx(t))cx′(t)±dz(t)1−g2(t)g(t)cx′(t)2+cy′(t)2cx′(t)or with respect todz(t)to obtain(9)dz(t)=g1−g2(t)cx′(t)(cy(t)−dy(t))+cy′(t)(dx(t)−cx(t))cx′(t)2+cy′(t)2.Thus, (7) obtained for an arbitrarydy(t),dz(t)(or (8) obtained for an arbitrarydx(t),dz(t), or (9) obtained for an arbitrarydx(t),dy(t)) completes the parameterization of the curved(t)such that the ruled surfacer(s,t)given in (4) satisfies the given angle distributionf(t)alongc(t)(cf. (3)).Further, we focus on an analysis of polynomiality/rationality ofd(t). First, if a given curvec(t)is a rationally parameterized curve, when is also the curved(t)rational? In other words, ifc(t)is a NURBS curve, when is alsod(t)a NURBS curve? We can distinguish two cases:1.c(t)is a Pythagorean hodograph (PH) curve: the defining property of planar PH curves (for more details see  [20] and references cited therein) is that square of the norm of its hodograph is a square of some rational function. This implies that the square rootcx′(t)2+cy′(t)2in (7) cancels. Thus,dx(t)is rational if and only ifdy(t)anddz(t)are rational and1−g2(t)g(t)=q(t)for some rational functionq(t). Thus,g2(t)must be of the form(10)g2(t)=11+q2(t),q(t)∈R(t).It is obvious that expressions (8) and (9) lead to exactly the same condition.c(t)is not a Pythagorean hodograph curve:dx(t)is rational if and only ifdy(t)anddz(t)are rational and1−g2(t)g(t)cx′(t)2+cy′(t)2=q(t)for some rational functionq(t). Thus,g2(t)must be of the form(11)g2(t)=cx′(t)2+cy′(t)2cx′(t)2+cy′(t)2+q2(t),q(t)∈R(t).It is again obvious that expressions (8) and (9) lead to exactly the same condition.Letc(t)be a given NURBS curve, representing boundary curve of a NURBS surface. Then there exists another NURBS curved(t)such that the ruled surface   (4)   fulfills angle distribution   (3)   for givenf(t)alongc(t)if and only if eitherc(t)is a Pythagorean hodograph curve  andg2(t)=cos2f(t)is of the form   (10)   for someq(t)∈R(t), org2(t)=cos2f(t)is of the form   (11)   for someq(t)∈R(t).Second, we can ask, whether there exists a polynomial parameterizationd(t), if the given curvec(t)is polynomial. We can use the similar approach as above but we have to distinguish between the cases represented by (7)–(9) now:1.dx(t)is polynomial if and only ifdy(t)anddz(t)are polynomial andcx′(t)(dy(t)−cy(t))cy′(t)±dz(t)1−g2(t)g(t)cx′(t)2+cy′(t)2cy′(t)=q(t)for some polynomial functionq(t). Thus,g2(t)must be of the form(12)g2(t)=dz(t)2(cx′(t)2+cy′(t)2)(cy(t)cx′(t)−dy(t)cx′(t)+q(t)cy′(t))2+dz(t)2(cx′(t)2+cy′(t)2),q(t)∈R[t];dy(t)is polynomial if and only ifdx(t)anddz(t)are polynomial andcy′(t)(dx(t)−cx(t))cx′(t)±dz(t)1−g2(t)g(t)cx′(t)2+cy′(t)2cx′(t)=q(t)for some polynomial functionq(t). Thus,g2(t)must be of the form(13)g2(t)=dz(t)2(cx′(t)2+cy′(t)2)(cx(t)cy′(t)−dx(t)cy′(t)+q(t)cx′(t))2+dz(t)2(cx′(t)2+cy′(t)2),q(t)∈R[t];dz(t)is polynomial if and only ifdx(t)anddy(t)are polynomial andg1−g2(t)cx′(t)(cy(t)−dy(t))+cy′(t)(dx(t)−cx(t))cx′(t)2+cy′(t)2=q(t)for some polynomial functionq(t). Thus,g2(t)must be of the form given in Box I.Proposition 2Letc(t)be a given B-spline curve, representing a boundary curve of a B-spline surface. Then there exists another B-spline curved(t)such that the ruled surface   (4)   fulfills angle distribution   (3)   for givenf(t)alongc(t)if and only ifg2(t)=cos2f(t)is of the form   (12),   (13)   or   (14)   given in   Box I   for someq(t)∈R[t].Example 1Letc(t)be a Bézier curve given by control pointsP0=(0,0,0)⊤,P1=(1,2,0)⊤,P2=(4,1,0)⊤,P3=(5,−1,0)⊤, i.e.,c(t)=(t(3+6t−4t2),t(6−9t+2t2),0)⊤,t∈[0,1],and letcosf(t)is given in Box II. We want to know if there exists a polynomiald(t)(asc(t)is polynomial) such thatr(s,t)defined in (4) fulfills givenf(t). Thus, we need to check ifcosf(t)is of the form (12). Let us arbitrarily choosedy(t),dz(t), e.g.dy(t)=12t(9−18t+5t2),dz(t)=−2−3t+6t2−3t3.Then, the necessary and sufficient condition for the existence of a polynomialdx(t)is that there exists a polynomialq(t)such that (12) holds. Thus, we can substitute components ofc(t),dy(t),dz(t)andf(t)into (12) and solve forq(t). We obtainq(t)=12(1−3t−3t2+5t3).Thus, the exact solution exists! Then, with the help of (7) we arrive atdx(t)=12(1+3t+9t2−3t3).It is obvious that this example is artificial. For general functionf(t), there is no polynomialq(t)andd(t)(see below). In this particular case, we just wanted to show that if we start from the solution (we basically started withd(t)and computed the correspondingf(t)in this example), we can reconstruct the exact solution.On the other hand, if we choose another angle function, e.g.cosf(t)=t2,then we can test if there exists at least some rational curved(t)such thatr(s,t)defined in (4) fulfills givenf(t)with the help of expression (11). Substituting components ofc(t)andf(t)to (11) and solving with respect toq(t)we obtainq(t)=±−20t8+56t7−52t6+16t5+15t4−56t3+52t2−16t+52t2(t2−3t+1)which is not rational. According to Proposition 1 we can conclude that there exists no exact solution of the above mentioned problem for this choice of the angle functionf(t).Remark 4Propositions 1 and 2 imply that an exact solution, represented by a B-spline/NURBS curved(t), for a given B-spline/NURBS curvec(t)exists only for a very special form of the given functionf(t)representing an angle distribution alongc(t), i.e., only in very rare cases. In practice,f(t)is usually given as a polynomial function which is clearly not of the form mentioned in Propositions 1 and 2. Thus, this problem does not have an exact solution in most cases. This motivates us to formulate an algorithm for finding an approximate solution which is demonstrated and studied in the next section.In this section, we will formulate an algorithm for finding an approximate solution to the problem stated in the previous section, derive an upper bound for the error of approximate angle distribution and study an approximation order of the method.Algorithm starts with a given regular B-spline curvec(t)=(x(t),y(t),0),t∈[0,1], which is described by its control polygon{Pi}i=0nand knot vectorU, and with a functionf(t)describing the desired angle distribution alongc(t).In the first step, we determine the exact solutionr(s,t)=c(t)+sv(t),(s,t)∈R×[0,1], wherev(t)is a vector field alongc(t)such that(0,0,1)⊤⋅v(t)‖v(t)‖=cosf(t).Thus,v(t)is of the formv(t)=R(f(t)).(0,0,1)⊤,whereR(f(t))is the rotation matrix describing the counterclockwise rotation around the unit tangent vectorw(t)=1x′(t)2+y′(t)2(x′(t),y′(t),0)⊤,i.e.,R(f(t))=w(t)w(t)⊤+cosf(t)(I−w(t)w(t)⊤)+sinf(t)(0−wz(t)wy(t)wz(t)0−wx(t)−wy(t)wx(t)0).We obtain(15)v(t)=(sin(f(t))y′(t)x′(t)2+y′(t)2,−sin(f(t))x′(t)x′(t)2+y′(t)2,cos(f(t)))⊤.Thus, we found a non-rational parameterization of a ruled surfacer(s,t)such that the angle between its rulingr(s,T)and the vector(0,0,1)⊤isf(T), for anyT∈[0,1].Then, the approximation starts with selecting a suitable initial control polygon of a B-spline curveĉ(t)which will be refined to the final approximation curvec̄(t)in the follow-up minimization procedure. Let us emphasize that the number of control points and the knot vector ofĉ(t)andc̄(t)(i.e., also the degree) are not arbitrary, they must be the same as forc(t)becausec(t)andc̄(t)must fit into the same control net of a final B-spline/NURBS surface and we do not want to change the number of control points and knot vector ofc(t).Because of our consideration the given curvec(t)being a planar curve inxy-plane (which is motivated by the practical example of modeling an inner surface of a Pelton turbine bucket) we choose control points{P̂i}i=0nofĉ(t)to havex- andy-coordinates the same as{Pi}i=0n, onlyz-coordinates are changed. The choice ofz-coordinateziof the pointP̂iis arbitrary with one exception:zi≠0must hold. Thus, vector ofz-coordinatesz=(zi)i=0nof control points{P̂i}i=0nis another input to the algorithm.Since we need to refine the control points{P̂i}i=0nsuch that the corresponding B-spline curve is the best approximation of the selected points onr(s,t), we introduce new control points(16)P̄i=P̂i+(Xi,Yi,Zi),i=0,…,nof the final approximation B-spline curvec̄(t)with unknown shifts(Xi,Yi,Zi),i=0,…,n. Then we sample the B-spline curveĉ(t)and for each selected pointĉ(T)on the curve we find the corresponding pointQ(T)on the rulingr(s,T), obtained for the same parameter valueT, lying in the plane parallel toxy-plane and going through the pointĉ(T). Then the differences of such pointsQ(T)and the corresponding pointsc̄(T)give us an objective functionF=∑i=0N‖c̄(i/N)−Q(i/N)‖2,i=0,…,Nwhich we need to minimize. Therefore, we solve the system of linear equations∂F∂Xi=0∧∂F∂Yi=0∧∂F∂Zi=0,i=0,…,nand the solution is substituted back to (16). This gives us the control points{P̄i}i=0nof the approximation curvec̄(t). Consequently, we obtain the approximate ruled surfacer̄(s,t)=(1−s)c(t)+sc̄(t)which approximately determines the tangent surface alongc(t)and which gives approximate angle distribution alongc(t). The obtained control points{P̄i}i=0nare then used as the neighboring row/column of boundary control points{Pi}i=0nin the control net describing a B-spline/NURBS surface and the same angle distribution alongc(t)is guaranteed also for the B-spline surface. The whole algorithm is summarized in Algorithm 1.Remark 5In the previous, we chose for simplicity (and because of the motivation by the practical example of a Pelton turbine bucket) a planar input curvec(t)and an angle was determined with respect to the unit normal vectoruof a plane containing the curvec(t), i.e.,u=(0,0,1)⊤.Nevertheless, it is possible to generalize the algorithm also for an arbitrary regular curvec(t)=(x(t),y(t),z(t))⊤,t∈[0,1]and vectoru=(ux,uy,uz)⊤which fulfill thatc′(t)is not co-linear withufor allt∈[0,1]. Then,w(t)is a perpendicular projection ofc′(t)to the plane perpendicular touandv(t)is computed analogously. This gives us the exact tangent surfacer(s,t). Further, the control points{P̂i}i=0nofĉ(t)are chosen as translated control points{Pi}i=0nin direction ofuand the rest of the algorithm is exactly the same.In the following we will show that the error of angle distribution approximation is bounded by the approximation error resulting from Algorithm 1.Theorem 1Letĉ(t)=(x̂(t),ŷ(t),ẑ(t))be the B-spline curve defined in Step  2  of Algorithm  1,p(t)=(px(t),py(t),pz(t))be the curve on the ruled surfacer(s,t)defined in Step  1  of Algorithm  1  such thatpz(t)=ẑ(t)andc̄(t)=(x̄(t),ȳ(t),z̄(t))be its B-spline approximation computed using Algorithm  1. Letf(t)andf̄(t)be functions describing the exact and approximate angle distributions alongc(t), respectively. Then it holdssin|f(t)−f̄(t)|≤δmaxt∈[0,1]‖p(t)−c̄(t)‖,whereδ=maxt∈[0,1]1|ẑ(t)−z(t)|.ProofFor arbitraryt, with the help of the triangle inequality (see Fig. 5(left)) we obtain‖p(t)−c(t)‖≥|ẑ(t)−z(t)|.Further,|f(t)−f̄(t)|≤α(t),α(t)∈〈0,π2〉and it holds thatsinα(t)=x‖p(t)−c(t)‖.Moreover, asx≤‖p(t)−c̄(t)‖(see Fig. 5(right)) we can writesinα(t)≤‖p(t)−c̄(t)‖‖p(t)−c(t)‖.Thus, we obtainsin|f(t)−f̄(t)|≤sinα(t)≤‖p(t)−c̄(t)‖‖p(t)−c(t)‖≤1|ẑ(t)−z(t)|‖p(t)−c̄(t)‖.Finally, by denotingδ=maxt∈[0,1]1|ẑ(t)−z(t)|, the statement follows.□Apart from deriving a bound for the error of an approximate angle distribution obtained with the help of Algorithm 1, we also analyze the approximation order of our above mentioned algorithm. We apply Algorithm 1 on a given B-spline curvec(t)and a given angle functionf(t)and we obtain a surface which approximately satisfies the given angle distributionf(t). Further, we analyze the obtained angle distribution on the resulting surface—the approximation error corresponds to the Hausdorff distance between the exact and approximate angle distributions. Then, we insert a new knot into each knot span (with the help of knot insertion algorithm—see Remark 1) and the process repeats for new data. We examine the ratio of two consecutive errors and we find out that the approximation order of the mentioned algorithm is 4, see Example 2.Example 2Let us consider the functionsf1(t)=π6t2+π180andf2(t)=413t4−35t3−19t2−112t+59and the B-spline curve on the intervalt∈[0,1]with the control points{(0,0,0)⊤,(1,2,0)⊤,(2,2,0)⊤,(4,0,0)⊤}and the knot vector(0,0,0,0,1,1,1,1). Table 1summarizes the approximation error and its improvement (ratio of two consecutive errors). The error was obtained by measuring the Hausdorff distance. The improvement ratio tends to16=24in both cases which indicates that the approximation order of the above mentioned procedure is 4.Remark 6Let us emphasize that refining a boundary curvec(t), i.e., increasing the number of knot spans in order to decrease the approximation error obtained in Algorithm 1, is not always appropriate because B-spline description (i.e., control net and knot vectors) of the corresponding B-spline surface becomes more complex.In the following example, we applied Algorithm 1 to the particular case of the model of a Pelton turbine bucket and its outlet curve and we show results for different functions describing the angle distribution along the outlet curve.Example 3In this example, we show the results obtained for the Pelton turbine bucket model and its outlet curve with the help of Algorithm 1 for two functions, in particular,1.f1(t)=π6t2+π180,t∈[0,1], see Fig. 6(top row), based on the analysis of the existing and used bucket,f2(t)=413t4−35t3−19t2−112t+59,t∈[0,1], see Fig. 6 (bottom row), based on the recommendations presented in  [21].

@&#INTRODUCTION@&#


@&#CONCLUSIONS@&#
