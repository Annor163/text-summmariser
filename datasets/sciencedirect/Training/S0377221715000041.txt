@&#MAIN-TITLE@&#
Single machine scheduling with two competing agents and equal job processing times

@&#HIGHLIGHTS@&#
The paper studies two agent scheduling models with unit processing times.We provide comprehensive complexity results for many min-max and min-sum type scheduling objectives.We provide polynomial and pseudo-polynomial time algorithms for the problems under consideration.

@&#KEYPHRASES@&#
Single machine scheduling,Two competing agents,Equal processing times,Complexity,

@&#ABSTRACT@&#
We study various two-agent scheduling problems on a single machine with equal job processing times. The equal processing time assumption enables us to design new polynomial-time or faster-than-known optimization algorithms for many problems. We prove, however, that there exists a subset of problems for which the computational complexity remainsNP-hard. The set of hard problems includes different variations where the objective functions of the two agents are either minimizing the weighted sum of completion times or the weighted number of tardy jobs. For these problems, we present pseudo-polynomial time algorithms.

@&#INTRODUCTION@&#
Scheduling models assuming equal processing time jobs address one of the most important and widely studied special cases in the scheduling literature. These models deal with the real life applications of mass production of similar items, or the repetitive manufacturing of the same product. When producing the same product in large quantities to satisfy different orders, these orders, and the jobs which form them, can have different due dates and costs while the job processing times are the same. Thus, manufacturing systems which allow a certain level of customization to otherwise identical products, often operate under the assumption of identical job processing times. These models can also be used for lower-bounding or approximating scheduling problems with general processing times by splitting the jobs into a pseudo-polynomial number of equal-length jobs. Due to the importance and relevance of this special case, a large number of papers consider various scheduling problems with job-independent processing times (see, e.g., Bansal, Kimbrel, and Sviridenko, 2006; Baptiste, 1999; Brucker and Kravchenko, 2008; Chen and Bulfin, 1990; Karhi and Shabtay, 2013; Lee, Leung, and Pinedo, 2011; Mosheiov and Oron, 2008; Mosheiov and Yovel, 2006; Shabtay, Arviv, Edan, and Stern, 2014; Van Den Akker, Diepen, and Hoogeveen, 2010).Our main aim in this paper is to study the single machine scheduling problem with two competing agents and equal job processing times, and to provide the best possible complexity classification of different variants of the problem. We note that some variants of this special case have already been studied in the literature by Elvikis and T’kindt (2014) and Elvikis, Hamacher, and T’kindt (2011). In addition to providing a large set of polynomial time procedures for numerous problem settings, one of the most important findings of our paper relates to the complexity of single machine problems with equal processing time jobs. Although problems with equal processing time jobs on a single machine setting allow the construction of polynomial time procedures for most scheduling objectives and settings, when two competing agents are assumed some variants are proven to beNP-hard. In addition, we identify several important relationships between different problem variants, and show that a large subset reduces to a bicriteria shortest path problem in an acyclic graph.In the following three sections we present a general definition of the single machine scheduling problem with two competing agents, present a brief literature review and state our research objective.Single machine scheduling problems with two competing agents can be stated as follows: We are given two sets of jobsJ(i)={J1(i),…,Jni(i)}for i ∈ {1, 2}, each belonging to a different agent. All jobs have to be scheduled nonpreemptively on a single machine and each agent seeks to minimize his own objective function. For i ∈ {1, 2} and j ∈ {1, …, ni}, letpj(i),dj(i)andwj(i)denote the processing time, due date and weight of jobJj(i). For a given job schedule on the single machine, letCj(i)be the completion time of jobJj(i). The quality of a schedule is measured by two different criteria, each of which is related to a different agent. Let F(i) be agent i’s criterion for i ∈ {1, 2}. We consider two different types of criteria. The first is a sum-type criterion,F(i)=fΣ(i)=∑j=1nifj(i)(Cj(i)),and the second is a max-type criterion,F(i)=fmax(i)=maxJj(i)∈J(i){fj(i)(Cj(i))},wherefj(i)(Cj(i))can be any non-decreasing (regular) function ofCj(i)for i ∈ {1, 2} and j ∈ {1, …, ni}. Important special cases of thefj(i)(Cj(i))function we consider areCj(i),Tj(i),andUj(i),where for jobJj(i),Tj(i)=max{0,Cj(i)−dj(i)}is the tardiness, andUj(i)is the tardiness indicator variable, i.e.,Uj(i)=1ifCj(i)>dj(i)andUj(i)=0ifCj(i)≤dj(i). Since all the above criteria are regular, a schedule for our two-agent problem is simply given by a processing permutation π of the n = n1 + n2 jobs on the single machine. We refer to the general problem by 1||(F(1), F(2)). Various research papers have addressed the following variants of the 1||(F(1), F(2)) problem, where Kiis a given upper bound on the value of F(i).•1||F(1) + θF(2): Find a job permutation which minimizes the total integrated cost, i.e., F(1) + θF(2).1||ε(F(1)/F(2)): Find a job permutation which minimizes F(1) subject to F(2) ≤ K2.1||ε(F(2)/F(1)): Find a job permutation which minimizes F(2) subject to F(1) ≤ K1.1||#(F(1),F(2)): Identify a Pareto-optimal permutation for each Pareto-optimal point, where a permutation π is called Pareto-optimal (or efficient) with respect to criteria F(1) and F(2) if there does not exist another permutation π′ such that F(1)(π′) ≤ F(1)(π) and F(2)(π′) ≤ F(2)(π), with at least one of these inequalities being strict.1|F(1) ≤ K1, F(2) ≤ K2| − : Determine if there exists a permutation with F(1) ≤ K1 and F(2) ≤ K2.We note here (see, e.g., Ehrgott, 2000; T’kindt and Billaut, 2006) that (i) solving problem1||#(F(1),F(2))also solves all other variants as a by-product; (ii) the 1|F(1) ≤ K1, F(2) ≤ K2| − problem is actually the decision version of problems 1||ε(F(1)/F(2)) and 1||ε(F(2)/F(1)), and this implies that neither or both of the latter two problems areNP-hard; (iii) the 1||ε(F(1)/F(2)) and 1||ε(F(2)/F(1)) problems are at least as hard as the 1|F(1) ≤ K1, F(2) ≤ K2| − problem; (iv) the optimal solutions for problems 1||F(1) + θF(2), 1||ε(F(1)/F(2)) and 1||ε(F(2)/F(1)) are Pareto-optimal; and that (iv) if either one of the last four variants of the problem is solvable in pseudo-polynomial time, then all last four variants are solvable in pseudo-polynomial time.

@&#CONCLUSIONS@&#
