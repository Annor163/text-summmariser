@&#MAIN-TITLE@&#
CURE—Towards enforcing a reliable timeline for cloud forensics: Model, architecture, and experiments

@&#HIGHLIGHTS@&#
Cloud time alteration attack scenarios, consequences, and countermeasures, have been surveyed.A novel cloud simulator has been designed, implemented, and released as open source.CURE architecture can detect Timeline of Events alterations to aid a forensic investigation process.A real-world deployment of CURE has been tested on a public cloud.Measured performance figures support CURE viability.

@&#KEYPHRASES@&#
Cloud computing,Timeline validation,Digital forensics,Measurement and simulation,Experimental test-beds and research platforms,

@&#ABSTRACT@&#
Graphical abstract

@&#INTRODUCTION@&#
Cloud computing allows performing demanding computations and also enables remote storage and management of large amounts of data. Unfortunately, cloud computing also presents relevant security challenges. In fact, it can open the way to novel cyberthreats and security issues. As an example, the pay-per-use model potentially allows an adversary to rent cloud resources and apply techniques (e.g. brute force, DDoS [1]) that were not affordable before. However, cloud computing also enables more advanced computer analysis and forensic techniques [2], since cloud technology allows seamless retrieval and storage of Virtual Machine status (e.g. VM images) [3].As the complexity and size of clouds grows, it is increasingly important to be able to protect such federated resources [4], especially from time alteration attacks [5]. With respect to this latter relevant threat [6], it becomes mandatory to enforce time consistency among the multiple and heterogeneous activities deployed on a cloud. A typical cloud or federated cloud scenario features multiple physical hosts running a large number of guest Virtual Machines, each one relying on internal and/or external time sources, as depicted in Fig. 1. In this figure, RTC indicates the actual physical Real Time Clock that is accessed by the host and that acts as a timing source for the Virtual Real Time Clocks that are simulated on the VMs for access by the kernel and userspace programs and services running on the VMs. The behavior of cloud VMs and services is based on the timings they get through the internal virtual clock source exposed by the host. As a matter of fact, time readings can be altered/faked both by an adversary on the VM and by an adversary on the host.Time alteration attacks are quite common and well known in distributed systems [5,6]. In particular, timestamp changes can maliciously affect the timeline of events (also ToE in the following) recorded by an application or system. The problem is particularly relevant in cloud scenarios as the underlying technology adds specificity to the problem [7]. In fact, cloud resources can be deployed and taken offline at will. Hence, it is mandatory to model and investigate cloud scenarios to improve the understanding of the problem and to suggest a remedy. In particular, prevention and detection of timing attacks are of uttermost importance in both computer forensics [8,9] and auditing [10].One of the challenges of reliable cloud forensics is that simply getting the physical image of cloud nodes does not suffice [11] to have a forensically sound image of the system under investigation. This is true even if remote logging is in place, since cloud hosts and their guests can manipulate the internal timing used to send log data [12]. Reconstructing the ToE of even a single user process can be tricky for a computer forensic professional (e.g. due to guest migration). The main threat we want to protect the cloud from, is the malicious machine-time variation in both hosts and guests. Such malicious alteration would undermine the efficacy of computer forensic investigations [5]. In fact, the ToE alteration is the Achilles’ heel of digital evidence collection, since it could jeopardize forensic analysis [6].The overall objective of this work is to improve the reliability of cloud host and guest event timings in order to allow effective forensics for the cloud (and also easing cloud auditing [13]). Cloud forensic here is intended as an activity aimed at investigating actions performed on the cloud by service users and service providers. In this paper we provide a solution to guarantee the ToE integrity (also referred to as good timeline or original timeline in Section 3) of hosts and guests in the cloud. Even in cases where such unaltered sequence of events cannot be reconstructed, then our approach guarantees that the alteration does not go undetected. Another goal is to gather as much information and insight as possible from simulating possible attack scenarios, and to discuss them in order to foster research in this novel direction.This paper provides several contributions. In particular, a generic cloud time model is introduced and possible attack scenarios and countermeasures surveyed. Further, a solution is provided to the problem of protecting the ToE integrity for events inside guests and hosts. The proposed CURE architecture detects ToE alterations and corrects them, ensuring the validity of the forensics investigation process. Hints on how cloud computing technology can help forensic investigation are also provided. In particular, a description is given on how a malicious time alteration can be detected and how the original good ToE can be reconstructed. Both host and guest ToE alteration scenarios are described. As regards the latter, cloud snapshot and rollback techniques are leveraged to bring the VM back to the original (unaltered) state. It is worth noting that we were able to test a large deployment by means of simulation over cloud nodes (Amazon Web Services). Simulation was used to test the scalability of our approach, as it would not have been possible to deploy our software on cloud hosts. Discussed results pave the way for further work and introduce novel research directions.The remainder of this document is organized as follows: Section 2 summarizes state of the art cloud security and forensics; Section 3 introduces a generic time model for cloud computing and describes the proposed CURE architecture; Section 4 discusses the security aspects of CURE; Section 5 gives implementation details and depicts the features of the Scalable Cloud Simulator (SCS) that was implemented; Section 6 describes the experimental testbeds (including Amazon AWS), presents performance figures and discusses results; finally, in Section 7 conclusions are drawn.

@&#CONCLUSIONS@&#
In this paper, we have provided several contributions. First, cloud host and guest time alteration detection and resilience have been introduced leveraging a novel architecture (CURE). Then, possible attack scenarios, consequences, and countermeasures, have been surveyed. Later, we have discussed issues related to host and guest machine-time security like reliability, channel security, and cloud time forensics.In particular, a cloud simulator (SCS) has been designed, implemented, and released as open source. Through SCS, we run a massive experimental campaign on a public cloud that allowed us to test a real-world deployment of our solution. Results show that the proposed CURE architecture detects Timeline of Events alteration and that it can guarantee the validity and reliability of the forensic investigation process. Obtained performance figures also support the viability of CURE. Future work will focus on distributed timeline integrity verification and further scalability.