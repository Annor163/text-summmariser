@&#MAIN-TITLE@&#
Mixed finite element formulations for strain-gradient elasticity problems using the FEniCS environment

@&#HIGHLIGHTS@&#
Solving mixed finite element formulation for strain gradient elasticity problems.Demonstrating FEniCS capabilities enabled easy implementation of the variational problems considered.FEniCS allows complex functionals to be quickly formulated and computed.Showing that the higher the degree of the discretization the better the solution agreement.

@&#KEYPHRASES@&#
Mixed finite element formulation,Strain-gradient elasticity,FEniCS,

@&#ABSTRACT@&#
This paper presents finite element implementations for the solution of gradient elasticity problems using the FEniCS project. The FEniCS Project provides a novel tool for the automated solution of partial differential equations by the finite element method. In particular, it offers a significant flexibility with regards to modelling and numerical discretization choices. The weak form of the gradient elasticity problem is derived from the Principal of Virtual Work. An equivalent mixed-type finite element formulation for the strain gradient elasticity problem is implemented in order to avoid the use of C1 continuous elements. The complete methodology and source codes (python scripts) are provided. Numerical results are presented and compared with well-known benchmark examples, demonstrating the applicability of FEniCS for such applications.

@&#INTRODUCTION@&#
Cutting edge composite material technology is becoming more dependent on nanosize particles and/or nanostructural systems. Nano scale systems are now commonly embedded into a standard matrix in order to obtain materials with more attractive properties than its original constituents. Carbon nanotubes (CNTs) are an example of nano-scale structures, for which a great deal of research has been carried out in order to investigate their properties and potential applications. Other nano scale aggregates that are being used in state of the art composite technology are Nanoclays and Graphene. Unfortunately, simulation technology in this area is not developing as fast as material science and manufacturing technology, potentially hampering the future progress of nano engineered materials.To study nanocomposites, classical (local) continuum theories tend to be inadequate, due to the fact that local theories do not account for micro-structural length scales of the material. Traditional or local elasticity theory considers that stresses at a point are a function of the strains at the same point (bonding forces between atoms are not considered). This assumption is valid for most continuum/macro scale simulations but in general it does not hold for micro/nano scales. To study the issue of size effects, theories which consider the material behaviour at a point as a function of the deformation of the surrounding have been proposed, these are usually referred as non-local or strain gradient theories.Non-local theories state that the stress at a point depends on the strain at all points in the continuum body [23,40]. There is a great deal of research dealing with non-local elastic theories [23–26,50] and gradient theories [34,40,61], as these could provide an efficient way to account for important scale effects. To study size effects in micro/nano composite materials, non-local/strain gradient theories currently represent one of the most attractive options as they provide a strong theoretical interpretation that converges to standard behaviours. For example, at the macro-scale, non-local/strain gradient theories seamlessly converge to the standard classical elasticity theory and are also consistent with continuum thermodynamics theory [44–47]. This type of theory can be extended to consider other configurations, e.g. non-singularities in dislocations and cracks [3–6], as well as dispersion and size effects in nano-objects [15,31].The most widely used and most important computational method in engineering applications is the Finite Element Method (FEM). It has been implemented successfully in engineering problems in many areas such as solid and fluid mechanics [1,22,27,29,49,52], electromagnetics [30,37] and biomechanics [48,51], to mention just a few examples. Most engineering commercially available software packages for structural/material simulations are based in FEM (e.g. Abaqus [55]). Unfortunately very few provide support/capabilities to model the nano/micro scale behaviour of materials (implementations of non-local/strain gradient FEM formulations are more complex than for classical theories).Under certain conditions, there is a direct equivalence between non-local stress theories and strain gradient theories. From the two approaches, strain gradient theories are well known to be simpler to solve/implement. They have previously been considered in several publications, using either the mixed-type finite element formulation [7,53] or meshless methods [17,56]. The main difficulty of using FEM to solve strain gradient elasticity is the continuity requirement (C1 continuity). In this paper, C1 continuous finite element can be avoided by a mixed-type formulation.Establishing mixed formulations was also not an easy task in the past [9]. Fortunately, thanks to the FEniCS project [36], development of complex mixed finite element formulations has become easier. The FEniCS Project is a modern collection of open source software components directed at the automated solution of Partial Differential Equations (PDEs) by FEM [36,57]. The FEniCS environment provides the following key components: (i) a high-level user interface (written in Python) that imitates the mathematical formulation of a finite element discretization, (ii) sophisticated computational techniques that allow a large class of finite element discretizations to be concisely defined while providing highly efficient code [32,33,43]. A very important characteristic of the FEniCS environment is its flexibility for changing the governing equations and their method of discretization, allowing the use of highly unusual function spaces. This flexibility makes FEniCS particularly useful for areas of research in which computational experimentation with different constitutive relations, different auxiliary equations and different regimes are of importance (as in the case of strain gradient elasticity). Its automation focus also allows for the automation of tedious and error-prone tasks such as the assembly of finite element matrices and vectors, encouraging rapid prototyping and development. Overall, the user-specified equations and methods of discretization remain explicit while the generic finite element implementation details are kept under the hood.Advanced FEM implementations in FEniCS are increasingly taking place as the capabilities offered by the project become evident. For example, Abert et al. [2] presented a micromagnetic simulation code, Hoffman et al. [28] presented a framework for adaptive finite element computation of turbulent flow and fluid-structure interaction, Mortensen et al. [42] presented a framework for experiments in computational turbulence while Vynnytska et al. [60] evaluate the usability of the FEniCS Project for mantle convection simulations.The main objectives of this paper are (i) to implement in FEniCS for the first time a set of mixed finite element formulations for the solution of strain gradient elasticity, (ii) to compare the results with the references established in the literature and (iii) to evaluate the suitability of FEniCS for the solution of strain gradient elasticity problems. The first numerical example considered is a patch test in which the displacement functions are quadratic polynomials [63]. Material behaviour of a perfectly bonded bi-material subjected to a shear stress and an infinite plate with a hole subjected to a distribution load are also investigated. Numerical results are presented and compared with well-known benchmark solutions, highlighting the suitability of FEniCS for the solution of this kind of problems.In this section, the variational formulation of the problem is introduced. The procedure is derived from the variation of strain energy in a volume V which equals the variation of work done (Principle of Virtual Work). From the domainΩshown in Fig. 1, the solution of the displacement field uiis investigated through the known boundary conditions; displacementu^ion the surfacedΓDand traction tion the surfacedΓN.From the problem domain, the strain energy density U in the volume is expressed as(1)δ∫ΩUdΩ=∫ΩσijδεijdΩwhere σijis the Cauchy stress (a symmetric tensor) and δεijis the arbitrary strain.To find the solution of the displacement field, Eq. (1) has to be rewritten in term of displacements. For this, the kinematic relation is required:(2)εij=12(∂jui+∂iuj)Noting that(3)σijδεij=σij12(∂iδuj+∂jδui)=σij2∂iδuj+σij2∂jδui=σij2∂iδuj+σji2∂iδuj=σij∂iδujit is possible to write(4)δ∫ΩUdΩ=∫Ωσij∂iδujdΩUsing the divergence theorem we can show that(5)∫Ω∂i[σijδuj]dΩ=∫ΓniσijδujdΓand using the product rule,(6)∫Ω∂i[σijδuj]dΩ=∫Ω[(∂iσij)δuj+σij(∂iδuj)]dΩRearranging the equations above we obtain(7)∫Ωσij∂iδujdΩ=∫ΓniσijδujdΓ−∫Ω(∂iσij)δujdΩ∫Ωσij∂iδujdΩ+∫Ω(∂iσij)δujdΩ=∫ΓniσijδujdΓ∫Ωσij∂iδujdΩ+∫ΩbjδujdΩ=∫ΓtjδujdΓwhere bjdenotes the body force per unit volume and tjis the traction on surfaceΓ. Therefore, the final form of the principle of virtual work is(8)∫Ωσij∂iδujdΩ+∫ΩbjδujdΩ−∫ΓtjδujdΓ=0Thus, the equilibrium equation in the bodyΩis(9)∂iσij+bj=0and the boundary condition on surfaceΓis(10)tj=niσij.In Mindlin׳s theory of gradient elasticity, the strain energy density is expressed in terms of the macroscopic displacements uiand the microscopic deformation gradient ηijk. The microscopic deformation gradient is formulated in three different forms [40]: Form I is defined as the second gradient of the macroscopic displacement, Form II as first gradient of the macroscopic strain and Form III there are two microscopic deformation effects including a gradient of macroscopic rotation and the second gradient of macroscopic displacement.The principle of virtual work can be written as a function of strain and strain gradient (including rotation gradient) as [35,38,40](11)W=W(εij,ηijk)=W(εij,η¯ij,η¯¯ijk)the second-order deformation gradient ηijkare defined as [7,16,18,35,38,58,59,66],Form I: second gradient of displacement(12)ηijk=∂i∂jukForm II: first gradient of strain(13)ηijk=∂iεjk=12(∂i∂kuj+∂i∂juk)Form III gradient of rotation(14)Θij=12(ui,j−uj,i)ωi=12(∇×u)i=−12eijkΘjkη¯ij=ωj,iη¯¯ijk=∂iεjk=13(∂j∂kui+∂i∂kuj+∂i∂juk)where ∂iis the gradient operator, uiis the displacement field, εijis the strain and ηijkis the strain gradient, Θijis the rotation tensor, wiis the rotation vector and eijkis the alternator matrix or permutation symbol. In this work, Strain-Gradient Elasticity based on Form-I and Form-II formulations are considered.In 1965, Mindlin [39] showed that the stress σijand double stress τijkare conjugated with the strain and the second-order deformation gradient:(15)σij=∂W∂εij,τijk=∂W∂ηijkThe variational of the total strain energy in a domainΩcan be written as(16)δ∫ΩWdΩ=∫Ω(σijδεij+τijkδηijk)dΩUsing the divergence theorem to reformulate the previous equation to the first variation of the strain energy density, we obtain (see Appendix A)(17)δ∫ΩWdΩ=−∫Ω(∂iσik−∂i∂jτijk)δukdΩ+∫Γ[nj(σjk−∂iτijk)δuk+niτijk∂jδuk]dΓFor the last term of the surface integral, the gradient of displacement variation on the boundary surface∂jδuk(see Fig. 2) can be decomposed into a surface normal gradient and a surface gradient as [35](18)∂jδuk=[∂jδuk−(ni∂iδuk)nj]+(ni∂iδuk)nj=δij∂iδuk−ninj∂iδuk+(ni∂iδuk)nj=(δij−ninj)∂iδuk+ninj∂iδukwe can also rewrite it as [35](19)∂jδuk=Djδuk+njDδukwhereni=ith component of the unit surface normal vectorsurface normal gradient operatorsurface gradient operator.From Eq. (19), the last term of the surface integral in Eq. (17) becomes [35](20)∫Γniτijk∂jδukdΓ=∫ΓniτijkDj∂ukdΓ+∫ΓniτijknjD∂ukdΓThe boundary surfaceΓis bounded by edgeΥ. Using Stoke׳s surface divergence theorem on a surfaceΓ, we obtain [35](21)∫ΓDj(niτijkδuk)dΓ=∮ΥnikjτijkδukdΥ+∫Γ(Dpnp)ninjτijkδukdΓThen surface integral in Eq. (17) becomes [35](22)∫Γ[nj(σjk−∂iτijk,i)+ninjτijk(Dlnl)−Dj(niτijk)]δukdΓ+∫ΓninjτijkDδukdΓ+Σm∮ΥΔ(nikiτijk)δukdΥSo that, the final form of the principle of virtual work [53] is(23)∫Ω[σijδεij+τijkδηijk]dΩ=∫ΩbkδukdΩ+∫Γ[tkδuk+rkDδuk]dΓ+Σm∮ΥpkδukdΥwhereσijstressstrainhigh-order stressstrain gradientbody force per unit volumedisplacementarbitrary displacement incrementtraction per unit areadouble traction per unit arealine load along sharp edgeTraction(25)tk=ni(σik−∂jτjik)+ninjτijk(Dpnp)−Dj(niτijk)Double traction(26)rk=ninjτijkLine load(27)pk=Δ(nikiτijk)According to the above equations, gradient elasticity leads to a fourth-order PDE in terms of displacements that can be solved for example by a Hermitian finite element implementation (C1 continuity). Another format of gradient elasticity FEM implementations consists of second-order PDEs in terms of displacements and additional variables that can be solved by mixed formulations (e.g. strains and/or stresses could be approximated independently together with displacements [7,16]). Due to the complications involved in developing general C1 elements (these are easy for 1D but not for 2D or 3D), the present work will specifically focus on developing Gradient Finite Element formulations based on a Mixed Variational Approach.Mixed finite element methods are formulations in which two or more finite element spaces are used to approximate different variables. Not only the primary variable (such as displacements in classical elasticity) but also secondary and/or tertiary variables would be approximated simultaneously (such as strains/stresses and their derivatives). These more complex implementations are sometimes called two-field or three-field mixed finite elements. There are many books and published works available for two-field or three-field mixed formulations in classical/local elasticity [14,12,65].Establishing mixed formulations was also not an easy task in the past. Fortunately, thanks to the FEniCS project, development of complex mixed finite element formulations has become easier. In the following sections, a mixed formulation together with its computer code implementation will be shown, to highlight the feasibility of FEniCS for such applications. In the present formulations, the displacement gradients (also called relaxed strains, ψij) and higher order stresses (also called Lagrange multipliers, ρjk) together with the displacements (ui) are the unknown variables of the problem (each will be approximated independently).In order to avoid the use of C1 elements, the principle of virtual work will be rewritten. To derive the weak form of the principle of virtual work, kinematic constrains are introduced.(28)ψij=uj,ian the Kinematic relation of arbitrary variations ofδuandδψis(29)δψij=δuj,i.Making use of the divergence theorem, the strain energy density Eq. (23) in the domainΩcan be rewritten as [53](30)∫Ω[σijδεij+τijkδηijk+τijk,i(δuk,j−δψjk)]dΩ=∫ΩbkδukdΩ+∫Γ[tkδψk+njrkδuk,j]dΓWhen applying a mixed finite element formulation, we have to enforce the first variational form of the constraints by introducing Lagrange multipliers, defined as(31)ρjk=−τijk,iThe constraints are enforced by writing Eq. (29) as a variational form, using an arbitrary variation of the Lagrange multipliers,δτijk,i, giving a set of extra conditions [53](32)∫Ω(ψjk−uk,j)δτijk,idΩ=0(nosumonjandk)After rewriting Eqs. (30) and (32), the modified virtual work becomes(33)∫Ω(σijδεij−ρjkδuk,j)dΩ=∫ΩbkδukdΩ+∫ΓtkδψkdΓ∫Ω(τijkδηijk+ρjkδψjk)dΩ=∫Γnjrkδuk,jdΓ∫Ω(ψjk−uk,j)δρjkdΩ=0(nosumonjandk).When two or more finite element function spaces are used in mixed finite element methods to evaluate separate variables, the mixed function spaces have to be chosen carefully. For mixed finite element formulation based on strain-gradient elasticity, the necessary conditions for convergence derived by Zervos et al. [62] is(34)sNGP≥nψand a sufficient conditions for convergence is(35)nu>nψ+sNGPifnψ≤sNGP<nuwhere nuandnψare number of degrees of freedom representing displacements (u) and relaxed strains (ψ), respectively. NGPdenotes the number of Gauss points, s is the number of the components of ψ (s=4 for 2D problems and s=9 for 3D problems). In addition, theoretically, other ways to automate the examination of stability are the inf-sup or LBB condition. Since Babuska (1973) and Brezzi(1974) presented the stability theory for mixed finite element discretizations, many papers have been published considering the appropriate discretization for mixed formulations [8–14,19–21].In this section the proposed methodology will be demonstrated while solving the patch test problem. The overall steps of the methodology are define PDE (weak form), define domains, create mesh and define function spaces, apply boundary conditions, perform computation and visualization of meshes and results.Patch tests are well known numerical examples that help to assess the convergence properties of FEM implementations. The proposed strain gradient mixed finite element implementation and discretizations will be tested with a patch test in which the displacement functions are quadratic polynomials [54,63] (traditional patch tests consider constant strains and stresses). The dimension of the patch is 0.24×0.12. The boundary conditions are the displacements uiand relaxed strains ψijat the boundary nodes. The inner nodes are investigated and the results are compared with analytical solutions [41].According to Zhao et al. [64] and Soh and Wanji [54] the displacement functions of the patch test should be a quadratic polynomial that satisfies the equilibrium equations. Following analytical solutions of the patch test [54], the displacement functions are expressed as(36)u(x,y)=∑i=110ϕiaiv(x,y)=∑i=110ψibiwhere aiand biare assumed as be equal toi=1,2…, and ϕiand ψiare defined as shown in Table 1.For the boundary conditions of the patch test, the nodal displacements and relaxed strains on the boundaries are given by Eq. (36). The material properties are assumed as E=1000,ν=0.25and nonlocal parameter le=0.1.In this section the FEniCS implementation will be explained. For a detailed documentation of the FEniCS project, refer to the FEniCS manual [57].First, the Dolfin library is called (DOLFIN is a C++/Python library that functions as the main user interface of FEniCS):To deal with multi-dimensional arrays and/or matrices, the Numpy library is used:The mesh was created in ABAQUS [55] (although any other mesh generator could be employed). The input file from ABAQUS (.inp) was used to obtain the xml file called ‘PatchTest01.xml’ (see Appendix B for the complete file).To define function spaces on the domain, different element types should be specified on a cell (triangular shape in 2D or tetrahedral in 3D). Using a 2D implementation (it is straight forward to consider a 3D implementation in FEniCS), the degrees of freedom for each variable are given as follows (displacements u, relaxed strains ψ and Lagrange multiplier ρ):(37)u={u1u2}2×1≈[Nu]2×2nu{u^}2nu×1(38)Ψ={ψ11ψ12ψ21ψ22}4×1≈[Nψ]4×4nψ{ψ^}4nΨ×1(39)ρ={ρ11ρ12ρ21ρ22}4×1≈[Nρ]4×4nρ{ρ^}4nρ×1where[Nu],[Nψ]and[Nρ]are the shape functions,{u^},{ψ^}.{ρ^}are nodal values (nodal degrees of freedom) and nu,nψandnρare the number of nodes per element.For displacements and relaxed strains, Lagrange polynomials of degree 2 (CG2) and 1 (CG1) will be used respectively (these basis belong to the H1 Sobolev space). For Lagrange multipliers, discontinuous Lagrangian elements of degree 0 (DG0) are employed (L2 Sobolev space). The graphical representation of these basis functions is given in Fig. 4.The total degrees of freedom for a triangular cell of the discretization described above are as follows:(40){u^}={u11u12u13u14u15u16u21u22u23u24u25u26}(41){ψ^}={ψ111ψ112ψ113ψ121ψ122ψ123ψ211ψ212ψ213ψ221ψ222ψ223}(42){ρ^}={ρ111ρ121ρ211ρ221}The functional spaces (basis functions) are defined as follows:As part of a symmetric variational weak form, trial and test function are defined using the same spaces,Using the mesh provided, FEniCS is able to define the entire domain of interest. Boundary definition is also performed using the mesh provided. In the present case (patch test), displacements and strains will be defined along all the boundary, therefore the entire boundary of the patch test will be marked as boundary part 0:Loading in FEniCS can be defined along the boundary or in the domain, in the present case no actual tractions or body forces are applied (only displacements and relaxed strains are applied), thereforeAccording to Eq. (36), the boundary conditions of the patch test are defined in FEniCS as follows:(43)u(x,y)=−4x2+2xy+11x/4+9y2+6y+1v(x,y)=8x2+2xy+4y−29y2/8+2ψ11(x,y)=2y−8x+11/4ψ12(x,y)=16x+2yψ21(x,y)=2x+18y+6ψ22(x,y)=2x−29y/4+4Material properties and constants definitions in FEniCS are also straight forward:The next step in the implementation methodology involves the definition of the governing equations. First we start with the kinematic relations,Next, the actual variational formulation is coded as follows (from Eq. (33)):From the above portion of the script, “a” represents the bilinear form and “L” represents the linear form, which are automatically identified and extracted by FEniCS from the variational formulation. To solve the variational form with the boundary conditions, the bilinear form, linear form and known variables are assembled as a system of equations as follows:Finally, result can be visualised in ParaView (export results to .pvd file),The above simple implementation is robust and general as it will be shown in the following sections. It also makes evident the suitability of FEniCS to solve these complex finite element implementations.The numerical results and analytical solutions [41] of the patch test are listed in Table 2(nodal displacements and relaxed strains of node E as shown in Fig. 3). The results show that triangular cells using three different discretizations (CG2CG1DG0, CG2CG2DG0 or CG3CG2DG0) can be used to efficiently interpolate displacements (u), relaxed strains (ψ) and Lagrange multipliers (ρ).In this section, the previous FEniCS implementation (patch test) will be modified in order to solve other well known benchmark problems in the area of non-local and strain gradient elasticity. The modification will only involve domain/boundary definition (extracted from the mesh file) and boundary conditions (displacement and loading defined as described by the problem of interest).Two materials bonded perfectly are subjected to a shear stressσ21∞as shown in Fig. 5. The shear modulus and non-local parameter of the two materials are assumed as [53,56](44)μ1=2μ2andl1=l2=lFirst, the domain is defined via a 2D mesh of triangular cells. In this problem, it is also necessary to define the different material properties for different parts of the domain. The mesh and the material properties were created in ABAQUS [55]. The input file from ABAQUS (.inp) was used to obtain the xml files for mesh and material properties (these are called ‘10×10meshI.xml’, ‘10×10meshI_E.xml’ and ‘10×10meshI_nu.xml’). For the material properties, a ‘MeshFunction’ over cells is used to represent subdomains of materials.To create functions of material properties (E andnu), a function space is implemented to collect all elemental properties (discrete function). The material properties in the xml files were read from the mesh functions and are turned to be functions of material properties (E andnu):When all other material properties are defined, the functions of E andnuare taken into account:Contrary to the patch test problem, the present case involves the application of different boundary conditions in different parts of the surface, therefore lets define different regions of the boundary:In order to avoid rigid body motion, it is also necessary to define points to fix the domain. In this case, the bottom left corner and the bottom right corner are used:Traction, displacement and relaxed strain boundary conditions are now defined. From Fig. 5, at the bottom left corner we setu=v=0and at the bottom right corner u=0. The relaxed strains φ11 and φ22 are zero along the left and the right of the boundary.Results for this problem are provided in Fig. 6and Table 3, from where it is clear that the agreement between FEniCS solutions and analytical solutions is excellent.The final example considered is an infinite plate with a circular hole as shown in Fig. 7. The plate is subjected to a uniformly distributed load p, and in this case we will study the influence of size effect in the solution (stress concentration around the hole).The results are compared with analytical and numerical results of published works [41,53,54,64]. First, the domain of the problem is created in Abaqus. The geometry and mesh are saved as an input file (.inp) and then these are converted to the necessary xml file (mesh file). Different meshes with different mesh ratios were considered to investigate the convergence.In the present example, due to symmetric considerations only a quarter of the model will be modelled:Boundaries of the quarter model will be now marked (defined) for application of boundary conditions,Finally, loading and boundary conditions are defined:In the present example as there is only one material definition, the rest of the script follows exactly the same steps as the patch test example. Results are presented in Figs. 8 and 9and Tables 4 and 5.The comparison of the stress concentration factor between the analytical solution [41], the two-dimensional simulations of quadrilateral elements [53,54,64] and the three-dimensional simulations [66] are presented in Table 6. The results show that the internal length scale l affects the stress concentration factor significantly and the stress concentration factors obtained with CG2CG1DG0 elements are in excellent agreement with the analytical solutions (Fig. 10).

@&#CONCLUSIONS@&#
