@&#MAIN-TITLE@&#
An augmented multi-objective particle swarm optimizer for building cluster operation decisions

@&#HIGHLIGHTS@&#
A bi-level operation decision framework based on an augmented multi-objective particle swarm optimization (AMOPSO) is proposed.The proposed AMOPSO algorithm outperforms the nine state-of-the-art multi-objective evolutionary algorithms.The proposed decision framework is able to derive Pareto solutions for building cluster which could significantly reduce energy cost.Compare to a memetic algorithm based decision framework, the proposed decision framework could significantly reduce computational cost.

@&#KEYPHRASES@&#
Particle swarm optimization,Multi-objective optimization,Pareto optimality,Smart grid,Smart building,

@&#ABSTRACT@&#
It is envisioned that other than the grid-building communication, the smart buildings could potentially treat connected neighborhood buildings as a local buffer thus forming a local area energy network through the smart grid. As the hardware technology is in place, what is needed is an intelligent algorithm that coordinates a cluster of buildings to obtain Pareto decisions on short time scale operations. Research has proposed a memetic algorithm (MA) based framework for building cluster operation decisions and it demonstrated the framework is capable of deriving the Pareto solutions on an 8-h operation horizon and reducing overall energy costs. While successful, the memetic algorithm is computational expensive which limits its application to building operation decisions on an hourly time scale. To address this challenge, we propose a particle swarm framework, termed augmented multi-objective particle swarm optimization (AMOPSO). The performance of the proposed AMOPSO in terms of solution quality and convergence speed is improved via the fusion of multiple search methods. Extensive experiments are conducted to compare the proposed AMOPSO with nine multi-objective PSO algorithms (MOPSOs) and multi-objective evolutionary algorithms (MOEAs) collected from the literature. Results demonstrate that AMOPSO outperforms the nine state-of-the-art MOPSOs and MOEAs in terms of epsilon, spread, and hypervolume indicator. A building cluster case is then studied to show that the AMOPSO based decision framework is able to make hourly based operation decisions which could significantly improve energy efficiency and achieve more energy cost savings for the smart buildings.

@&#INTRODUCTION@&#
In the United States, buildings use approximately 70% of the total electricity usage and emit approximately 40% of the greenhouse gases annually [1]. Today, industry is attempting to design an intelligent building termed as a “smart building” [2] which is able to meet the environmental sustainability goals, keep occupants safe and comfortable, and reduce the energy consumption and cost [2]. Although energy efficient building materials and appliances in the smart buildings are capable of energy demand reduction, it is still not sufficient to satisfy requirements of smart buildings due to ineffective operation strategies for those efficient appliances [2]. Therefore, intelligent and effective operation strategies which could achieve the greatest energy efficiency are of urgent need for smart buildings.The initial study of building operation and control research focuses on utilizing building thermal mass to achieve cost savings. Pre-cooling a building through optimally controlling building temperature set-points can significantly reduce energy costs [3–6]. Other than using the building thermal mass, extensive research investigates utilizing thermal storage systems [7–11] and energy generation systems [12–20] to reduce energy consumption and energy costs. We want to note that the main stream of research so far has been on single building. Only recent advancements in technology enable smart buildings in the neighborhood to share energy as a local energy network [21]. To the best of our knowledge, the first attempt to make operation decisions for multiple buildings (building cluster) is a memetic algorithm (MA) based framework [22]. In the building cluster decision model, each building aims to minimize its energy cost by sharing energy with other buildings, and the MA is employed to solve a multi-objective nonlinear programing problem to derive Pareto operation decisions for the building cluster to manage the usage of shared energy. It is demonstrated that the building cluster is more energy efficient than a single building [22]. Due to the poor computational performance of the MA based decision framework, it is not able to study the hourly (or even less time scale) operation decision which is expected to achieve more cost savings [22].It was demonstrated that particle swarm optimization is capable of deriving good results with low computational cost in [23]. Therefore we propose an augmented multi-objective particle swarm optimization (AMOPSO) algorithm to improve the computational performance of the decision framework. The proposed AMOPSO is augmented via the fusion of multiple search methods (e.g., sub-gradient method [24]) to improve its performance in terms of solution quality and convergence speed, and a crowding distance method is employed to maintain the non-dominated solutions found during the search process. To test the efficacy of the proposed AMOPSO, we first compare AMOPSO with several state-of-the-art multi-objective particle swarm optimization algorithms (MOPSOs) and multi-objective evolutionary algorithms (MOEAs) using the Zitzler–Deb–Thiele (ZDT) and Deb–Thiele–Laumanns–Zitzler (DTLZ) benchmark suits [25]. The AMOPSO based bi-level decentralized decision framework is then applied to a building cluster case to demonstrate its applicability to reach hourly operation decisions for a group of buildings.This paper is organized as follows: Section 2 briefly reviews the existing research on building operation decision support; the proposed AMOPSO and its performance assessment are presented in Section 3; followed by the application of the AMOPSO for building cluster decentralized operation decision support in Section 4, and conclusions are drawn in Section 5.Among all the consumption units, buildings are responsible for over 70% of electricity consumption with approximately half from commercial sources and the remainder from residential [26]. However, the fact is between 4 and 20% of energy used for heating, ventilating and air conditioning (HVAC), lighting and refrigeration in buildings is wasted due to problems with system operation. Thus, extensive research has been conducted to develop the operation or control strategy to improve the energy efficiency and reduce energy costs for buildings.It is demonstrated that the building thermal mass could be efficiently used to reduce energy consumption and energy cost, therefore lots of research focuses on pre-cooling the building by developing an optimal/near-optimal operation strategy to control the set-point temperature for the HVAC system [3–6]. Pre-cooling the building could significantly reduce energy costs [3–5]. For example, the optimal strategy for building thermal mass determined by a dynamic programing and on-line simulation based technique is able to significantly reduce energy consumption and operating cost [5]. A comprehensive review on building thermal mass operation strategy research is provided in [4].Similar to the passive thermal storage system (building thermal mass), the active thermal storage system could shift the energy demand from peak hour to off-peak hour to balance the energy demand and reduce energy costs [7–11]. Some meta-heuristic algorithms (e.g., particle swarm optimization [7]) are studied to obtain an optimal operation strategy for a thermal storage system. The rule based near-optimal control strategy for a storage system is determined from monthly simulation of a cooling system in [8]. To efficiently utilize the storage system, the model-free reinforcement learning control strategy is studied in [11] and the hybrid reinforcement learning control approach combining model-based with model-free method is presented in [9,10].As the development of on-site generator technology advances, another mainstream for reducing energy cost is to utilize the energy generation system which could increase the buildings’ resilience to power disturbances. Extensive research has been conducted to develop operation strategies to optimally utilizing a generation system [12–20]. For example, the long-term planning strategy for a single-period combined heat and power system is derived by a branch and bound algorithm in [12], and a modified dynamic programing approach is applied on a multi-period combined heat and power system planning in [13]. The short-term production plans for a hydropower system are developed using multi-stage mixed-integer linear stochastic programing in [14]. Particle swarm optimization (PSO) algorithm is also employed to study the generation system scheduling problems in [15,18]. The multi-objective optimization model is employed to study the power system scheduling in [17,20].Based on our knowledge, most of the existing literature focuses on operation decisions for a single building, and the first attempt to make operation decisions for multiple buildings (building cluster) which could share energy locally or globally is a MA based framework [22]. A decision model based on a building cluster simulator with each building modeled by energy consumption, storage and generation sub modules is developed in [22]. Assuming each building is interested in minimizing its energy cost, a bi-level operation decision framework based on MA is proposed to study the tradeoff in energy usage among the multiple buildings [22] and is demonstrated to be more energy efficient than a single building. In this research, we focus on the operation decisions for a building cluster in a short time scale (e.g., hourly) by improving the computation performance of the decision framework with an augmented multi-objective particle swarm optimization.Particle swarm optimization which mimics a flock of birds that communicate together as they fly was proposed in 1995 [27]. During the last two decades, PSO has attracted great attention and has been successfully applied to various industry applications [28]. In PSO with inertia weight, the velocity and position for particle p at iteration i are updated as [29],(1)vpi+1=wvpi+c1r1,pi×ppi−xpi+c2r2,pi×pgi−xpi(2)xpi+1=xpi+vpi+1where D-dimensional vectorvpiis the velocity of the pth particle (vpi∈−vmax,+vmax), vmax is used to constrain the velocity for each particle and is usually set between 0.1 and 1.0 times the search range of the solution space [30]; D-dimensional vectorxpiis the position of the pth particle;ppiis the best position (pBest) found so far by the pth particle;pgiis the best position (gBest) found so far by the swarm;r1,piandr2,pirepresent two independent random numbers uniformly distributed on [0,1]; c1 is the cognitive learning factor which represents the attraction that a particle has toward its own successppi; c2 is the social learning factor which represents the attraction that a particle has toward its neighbors’ best positionpgi; w is the inertia weight.During the last decade, extensive research has been conducted to study PSO for multi-objective optimization (MOO) problems [23] due to its simplicity of implementation and good performance. In general, the algorithms can be classified in two categories. The first category employs effective approaches (e.g., archive technique, Pareto ranking approach, etc.) which are utilized in existing MOEAs to study MOO problems [31–35]. For example, non-dominated sorting PSO [31] adopts a fast non-dominated sorting and sharing approach to maintain non-dominated solutions which is used in the non-dominated sorting genetic algorithm (NSGA-II) [36]. MOPSO proposed in [32] employs a hyper-cubes based adaptive grid technique to produce a well-distributed Pareto frontier. The second category is to augment PSO methods with focuses on exemplar learning, parameter control and extend it to study MOO problems [37–40]. For example, CLMOPSO [37] is an extension of comprehensive learning PSO for multi-objective problems. Cultural-based MOPSO [40] adaptively changes PSO parameter settings using a cultural framework.While great efforts have been spent on exploring the application of PSO and its extensions for multi-objective problems, there is still much room for improving the performance of MOPSO to simultaneously handle a diverse search space. It is common that multi-objective problems consist of different objectives with different properties (e.g., uni-modal, multi-modal). Thus, in this research we enhance the MOPSO by intelligently fusing multiple search methods to improve its search capability on a diverse set of search spaces (e.g., uni-modal, multi-modal). The intelligent multiple search methods fusion technique which fuses a non-uniform mutation-based method [41] and a sub-gradient method [24] has been demonstrated to successfully improve the performance of PSO on a diverse set of single objective optimization problems in terms of solution quality and convergence speed [42]. Due to its good balance between exploration and exploitation, the non-uniform mutation-based method [41] may be preferred by multi-modal functions. The sub-gradient method [24] is chosen to complement the search capability for uni-modal functions because of its performance in finding a local optimum very fast and good exploitation capability [43]. At each iteration, the effective search method is selected by using roulette wheel selection based on the search method's performance [41].The proposed AMOPSO (shown in Fig. 1) has three modules: (1) PSO module: the swarm is randomly initialized with the PSO operator being employed to update the swarm. (2) Intelligent multiple search methods module (see Section 3.2.1): two search methods (non-uniform mutation-based method [41] and sub-gradient method [24]) are implemented. At each iteration, an appropriate search method will be triggered based on its effectiveness index. (3) Archive module (see Section 3.2.2): the external archive which is used to maintain the non-dominated solutions set is updated and followed by updating pBest and gBest for each particle. The algorithm will stop if the stopping criterion (e.g., the maximum number of PSO iterations) is satisfied.The intelligent multiple search methods module is employed to enhance the performance of PSO. After each PSO iteration, a weighted sum function f is randomly generated to select a particlexgiin the swarm which has a minimal value on f to be improved by the multiple search methods module. The main purpose of weighted sum method is to assist the selection of particlexgiwhich could further improve the quality of the leader used for the next PSO iteration. It was demonstrated in [44] that integration of weighted sum with population-based algorithm (e.g., GA) could overcome the disadvantages of weighted sum as discussed in [45]. Due to its simplicity of implementation, the weighted sum is employed in this research. Several variants of weighted methods [46] such as weighted exponential sum, weighted min-max, and weighted product method will be investigated in the future study.(3)f=∑m=1Mwmfmwhere(4)wm=rm∑m=1Mrmrmare uniform random numbers from (0, 1) and m=1,…,M. The newly generated solutionxgi'will replace the particlexgiif it is better thanxgiin terms of function f, otherwisexgi'will replace a randomly selected particle to introduce randomness to prevent premature convergence.The non-uniform mutation-based method [41] is able to have the merits of large jumping (exploration) at the early stage and fine-tuning (exploitation) at the later stage [47] which could benefit PSO for multi-modal functions. Like gradient based methods, the sub-gradient method [24] exhibits good exploitation capability and could find a local optimum very fast [43] which could enhance PSO's performance on uni-modal functions. By intelligently fusing these two search techniques in the AMOPSO, it is expected to balance AMOPSO's search capability on both the uni-modal and multi-modal multi-objective optimization problems.In the non-uniform mutation based method, the dth dimension of the solutionxgiis randomly picked to be mutated to generate a new solution as(5)xg,di'=xg,di+Δi,Ud−xg,diifr≥0.5xg,di−Δi,xg,di−Ldifr<0.5where i is the current iteration index of PSO; Udand Ldare the upper and lower bounds ofxg,di; r is a uniform random number from (0, 1). The function Δ(i,y) is defined as(6)Δi,y=y×1−ρ1−i/Ibwhere ρ is a uniform random number from (0, 1); I is the maximum number of iterations for PSO; b is a system parameter determining the degree of dependency on iteration number (non-uniformity).Sub-gradient method [24] is a commonly used algorithm to solve the convex optimization, and is also applicable for non-convex problems. A sub-gradient at solution x∈ℜDfor a convex function f is a vectorγxsuch that(7)fy≥fx+γxTy−x,∀y∈ℜDSub-gradient method is equivalent to the gradient-based method when the objective function is differentiable. In the case that the objective function is non-differentiable which prohibits the application of gradient-based method, the sub-gradient method may still work very well. The sub-gradient method was demonstrated in [42] to be able to enhance PSO's search performance on uni-modal function. Therefore, the sub-gradient method is employed to complement AMOPSO's performance on uni-modal functions. In the sub-gradient method, a new solutionxgi'is generated as(8)xgi'=xgi−αiγgiwhereγgiis the sub-gradient of the objective function f in Eq. (3); αiis the step size. The step size in this research is selected to satisfy the conditions as [24](9)αi≥0,∑i=1∞αi=∞,limi→∞αi=0The sub-gradient of the objective function is evaluated as the gradient of the function if the gradient is available, otherwise the sub-gradient will be approximated by the Simultaneous Perturbation Stochastic Approximation method [48].In order to intelligently select the effective search technique, we assign an execution probabilityprobsito each search method to determine the probability that the sth search method will be adopted for the following iteration i+1. Then roulette wheel selection method is employed to choose the effective search method based on its execution probability. The execution probabilityprobsiis calculated as(10)probsi′=∑ii=1iηsiinsifns≥N,∀s=1,…,S1/Sotherwise(11)probsi=probsi'∑s=1Sprobsiwhere nsis the number of iterations that the sth method is adopted; I is the maximum number of PSO iterations; S is the number of search methods implemented in AMOPSO which is 2 in this research; N is the minimal required execution number for each search method which is set as 50 [42] in this research;ηsiis the effectiveness index for the sth search method at iteration i which is defined as(12)ηsi=fgi−fgi'fgisthsearchmethodisusedatiteraioni0otherwisewherefgiandfgi'are the weighted objective value ofxgievaluated in Eq. (3) before and after the multi-method search, respectively (please note we study a minimization problem in this research). It is observed from Eq. (10) that each search method has an equal probability to be selected at the early stage, and the effective search method tends to be preferred iteration by iteration.In this research, we employ an external archive to maintain at most Nmax (capacity of the external archive) non-dominated solutions found during the search process, and the solutions in the external archive will be reported as the approximated Pareto solutions when the algorithm stops. At each iteration, the external archive and particles’ leaders (pBest and gBest) will be updated after the multiple search methods module. Particlexpiis discarded if it is dominated by any solution in the external archive. Otherwise it will be added into the external archive and all the solutions in the external archive which are dominated byxpiwill be removed from the external archive. The external archive will increase quickly and it will be computationally prohibitive to update the external archive, therefore some techniques attempting to keep less crowded solutions by deleting crowded solutions are employed to prune the archive when its size exceeds the capacity. These techniques are not only able to bound the archive but also make the non-dominated solutions evenly spread on the Pareto frontier. The most commonly used techniques include: (1) adaptive grid [32]: it may be computationally expensive especially when the objective space should be frequently divided. (2) Clustering technique [49]: the size and quality of the archive depends on the number of clusters. (3) ɛ-Dominance [50–53]: the size of the archive is impacted by the user defined parameter ɛ. (4) Niche count [31,54]: the spread of the Pareto frontier depends on the user defined parameter σshare. (5) Crowding distance [37,55]. Due to its good computational performance and independency on user defined parameters, we employ the crowding distance method as studied in [37,55] to keep the capacity of the archive as Nmax. For each particle p, a weighted sum objective function f′ is randomly generated to assist the selection of pBest (ppi) and gBest (pg,pi)(13)f′=∑m=1Mrm∑m=1MrmfmThe pBest (ppi) is updated as(14)ppi+1=ppiiff′ppi<f′xpixpiiff′ppi≥f′xpiThe gBest (pg,pi) is updated as the non-dominated solution in the external archive which has a minimal f′ value.To evaluate the overall performance of the proposed AMOPSO algorithm, we adopt three quality indicators from [25]: additive unary epsilon indicator (Iε+1), spread (Δ), and hypervolume (HV). The first indicator measures the convergence of the approximated Pareto frontier, the second indicator measures the diversity of the approximated Pareto frontier, and the third indicator measures both convergence and diversity. For the first two indicators smaller values are better, for the third indicator larger value is better. A detailed explanation of the three indicators are provided in [25]. In the experiments, the swarm size of AMOPSO is set to be 30, the capacity of the external archive is set as 100, and the maximum number of function evaluations is set to be 10,000 for two objectives problem and 25,000 for three objectives problem. One hundred independent runs are conducted to collect data for statistical analysis. The performance of AMOPSO is compared with nine state-of-the-art MOPSOs and MOEAs by using five ZDT, seven two objectives DTLZ and seven three objectives DTLZ benchmark problems [25]. The features of the ZDT and DTLZ are presented in Table 1. Please note “U” denotes a uni-modal function, and “M” denotes a multi-modal function.The nine algorithms compared are: (1) AbYSS (archive-based hybrid scatter search) [56]; (2) CellDE (cellular differential evolution) [57]; (3) dMOPSO (decomposition based MOPSO) [58]; (4) MOCell (cellular genetic algorithm for multiobjective optimization) [59]; (5) NSGA-II (non-dominated sorting genetic algorithm II) [36]; (6) NSGA-IIa (adaptive variation operator selection NSGA-II) [60]; (7) NSGA-IIr (random variation operator selection NSGA-II) [60]; (8) OMOPSO (optimized MOPSO) [61]; and (9) SPEA2 (improved strength Pareto evolutionary algorithm) [62]. These nine algorithms are implemented in jMetal framework [63]. The optimization results in terms ofIε+1, Δ, and HV are summarized in Tables 2–4, respectively.It is observed that AMOPSO outperforms other nine algorithms on 9 out of 19 benchmark problems in terms of epsilon indicator. AMOPSO is comparable with the best algorithms for the remaining 10 benchmark problems.In terms of spread, AMOPSO outperforms other nine algorithms on 5 out of 19 problems. AMOPSO still could be considered as the best algorithm which performs best on largest number of problems.The blank values in Table 4 indicate that the obtained Pareto frontier is far away from the true Pareto frontier, and the HV result obtained for this type of Pareto frontier is unreliable [25], therefore we do not compute the HV value for this type of Pareto frontier. Please note that a larger value of HV is better. It is observed that AMOPSO outperforms the nine algorithms on 10 out of 19 problems. AMOPSO is comparable with the best algorithms for the remaining 9 benchmark problems.Pairwise comparison results using Wilcoxon test [64] in terms of epsilon indicator (Iε+1), spread (Δ), and hypervolume (HV) are summarized in Table 5. In terms of epsilon indicator (Iε+1), AMOPSO significantly outperforms 8 out of 9 algorithms and outperforms dMOPSO. In terms of spread (Δ), AMOPSO significantly outperforms 7 out of 9 algorithms, and outperforms MOCell and OMOPSO. In terms of hypervolume (HV), AMOPSO significantly outperforms all of the nine algorithms.In summary, AMOPSO outperforms the nine algorithms in terms of the three performance metrics. OMOPSO was demonstrated to significantly outperform five state-of-the-art MOPSOs in [25] in terms of the three performance metrics. Therefore, we could conclude that AMOPSO significantly outperforms the five state-of-the-art MOPSOs in [25]. In terms of epsilon indicator, dMOPSO is a very competitive algorithm due to the fact that the decomposition strategy proposed in [65] and the memory re-initialization process are employed. The intelligent feedback and replacement strategy implemented in MOCell [59] could provide effective communication between the archive and population set. It may be the reason that MOCell is comparable with AMOPSO in terms of spread. The sub-part (sub-swarm) concept proposed in OMOPSO [61] could promote diversity of the swarm and improve its capability to generate an evenly distributed Pareto frontier. In the future study, we will investigate the integration of these techniques (e.g., decomposition, feedback strategy, sub-swarm concept) to further improve the performance of AMOPSO. In addition, the experimental results also demonstrate that AMOPSO could perform well when the computational resources are limited (smaller number of function evaluation). In our earlier study of the decentralized decision support for building cluster, the computational cost to call the simulator to evaluate energy consumption is very high. Therefore, a computationally efficient multi-objective optimization algorithm like AMOPSO which could obtain good results with less computational cost is preferred to study the decentralized decision support for the building cluster.In Section 3, we demonstrate that AMOPSO outperforms the nine state-of-the-art MOPSOs and MOEAs. In this section, we will extend the bi-level decentralized decision framework by using the proposed AMOPSO to further study decentralized decisions for building clusters. The building cluster simulation model is introduced in Section 4.1, followed by the building cluster decision model in Section 4.2, the bi-level decentralized decision framework using AMOPSO is presented in Section 4.3, and the experimental results for the building cluster operation decisions are provided in Section 4.4.A simplified building cluster [22] consisting of two different mass levels—heavy mass (HM) and light mass (LM) buildings is studied in this research. As illustrated in Fig. 2[22], an ice storage system and a base chiller are shared by these two buildings, and each building has a battery and photovoltaic (PV) system. During on-peak hours, the ice storage system is the primary source to meet the buildings cooling loads with the remaining cooling request satisfied by the base chiller. Each building could not only request electricity from the power grid, but also could sell its surplus electricity generated by the PV panel back to the power grid. The operation decisions are evaluated by using the simulator. The decision model is explained in the following section.In the building cluster decision process, each building could control the set-point temperature of its HVAC system which impacts the “non-cooling load” in Fig. 2. To efficiently utilize the energy stored in ice storage, the buildings should negotiate with each other to determine the charging and discharging state of ice storage, and determine how to distribute the energy discharged from ice storage to each building. Since the battery and PV are individually owned by each building, therefore each building could independently determine the charging and discharging states of the battery, and determine how to use energy from PV (e.g., charging battery, powering building, or selling back to grid).To mathematically model the decision process of the building cluster, let M be the number of buildings, K be the number of building operation modes [11], Hkbe the number of hours in the kth building operation mode, then the decisions for the shared energy provider and building m (m=1,…,M) at building operation mode k (k=1,…,K) in this decision model are expressed by: (1) a set of continuous variablesTsp,kmfor building HVAC set-point temperature; (2) a set of integer variables Sis,kfor ice storage state (0: dormant; 1: charging; 2: discharging); (3) a set of continuous variablesηkmfor percentage of energy from ice storage to building m; (4) a set of integer variablesSbat,kmfor battery state (0: dormant; 1: charging; 2: discharging); and (5) a set of integer variablesSPV,kmfor PV panel state (0: dormant; 1: charging battery; 2: powering building; 3: selling power to grid).The objective for each building is to minimize its daily energy cost (see Eq. (15)) subject to several constraints: (1) Power grid capacity constraint (see Eq. (16)): the total energy requested from the power grid cannot exceed the grid capacity. (2) Building comfort level constraint (see Eq. (17)): the indoor temperature for the building should be kept at a comfort level. (3) Base chiller capacity constraint (see Eq. (18)): the total cooling energy requested from the base chiller cannot exceed the chiller capacity. (4) Ice storage state constraint (see Eqs. (19)–(21)): the total percentage of cooling energy provided by the ice storage system cannot exceed 1. The ice storage cannot be discharged if it is at the minimum state of charge, and cannot be charged if it is at a maximum state of charge. (5) Battery state constraint (see Eqs. (22) and (23)): the battery cannot be discharged if it is at the minimum state of charge, and cannot be charged if it is at a maximum state of charge. (6) PV panel state constraint (see Eq. (24)): the PV panel cannot be used to charge the battery if the battery is not at the charging state.(15)minfm=∑k=1K∑j=1HkRp,jmPp,jm−Rs,jmPs,jm,m=1,…,M(16)∑m=1MPp,jm≤Pgrid,j=1,…,Hk;k=1,…,K(17)TimL≤T¯i,jm≤TimU,j=1,…,Hk;k=1,…,K;m=1,…,M(18)∑m=1MQb,jm≤Qmax,j,j=1,…,Hk;k=1,…,K(19)BIis,k1≤ceilmax0,SOCis,max−SOCis,k,k=1,…,K(20)BIis,k2≤ceilmax0,SOCis,k−SOCis,min,k=1,…,K(21)∑m=1Mηkm≤BIis,k2,k=1,…,K(22)BIbat,km1≤ceilmax0,SOCbat,maxm−SOCbat,km,k=1,…,K;m=1,…,M(23)BIbat,km2≤ceilmax0,SOCbat,km−SOCbat,minm,k=1,…,K;m=1,…,M(24)BIPV,km1≤BIbat,km1,k=1,…,K;m=1,…,MwhereRp,jmandRs,jm($/kWh) are the energy purchase and selling price at time j for building m, respectively;Pp,jmandPs,jm(kW) are the purchase energy from power grid and selling energy back to the power grid at time j for building m, respectively; Pgrid (kW) is the power grid capacity;T¯i,jmis the average indoor temperature for building m at time j;TimLandTimUare 74°F and 81°F in this research;Qb,jm(Btu/h) is the cooling energy supplied by the base chiller for building m at time j; Qmax,jis the chiller capacity at time j; BI is a group of binary intermediate variables to denote the three state variables (Sis,k,Sbat,km,SPV,km); ceil(.) rounds the element to the nearest integer toward infinity; SOCis,max and SOCis,min are maximum and minimum state of charge for the ice storage; SOCis,kis the initial state of charge for ice storage at building operation mode k;SOCbat,maxmandSOCbat,minmare maximum and minimum state of charge for building m's battery;SOCbat,kmis the battery's initial state of charge for building m at building operation mode k. Please refer to [22] for a detailed explanation of the decision model.We take the advantage of the bi-level decentralized decision framework proposed in [22] which has one facilitator agent at the system level and a number of local optimization engines at the building level. At the system level, the optimizer classifies decision variables into local variables X (e.g., state of battery, state of PV system) for each building and coupled variables Y and Z shared by more than one building (e.g., shared ice storage). The constraints are separated into local constraints which belong to each building, and system constraints which apply to the group of buildings. By decomposing the decision variables space and constraints, each building can solve fully independent sub-problems simultaneously which could reduce the overall computational cost. In the decentralized decision framework, the facilitator agent will assist buildings to communicate with others to determine the utilization of shared energy resources. Since each building has its objective to minimize its daily energy cost, therefore a multi-objective problem is formulated at the system level which is handled by the facilitator agent. The decentralized decision model for the building cluster is constructed in Fig. 3. The decision variablesTsp,km, Sis,k, andηkmare the coupled variables Y, while the remaining variablesSbat,kmandSPV,kmare the local variables X. The constraints in Eqs. (16)–(21) are system constraints which are handled by the facilitator agent. Artificial coupled variables Z are employed to decompose the coupled system constraint in Eq. (16) as two constraints Eqs. (16.1) and (16.2) shown in Fig. 3. The constraints in Eqs. (22)–(24) are local constraints handled by each building agent.In the proposed decentralized decision framework, the facilitator agent employs AMOPSO to explore the coupled decision space Y and Z. Given the updated values of coupled variables provided by the system optimizer, each building separately optimizes its own objective over local variables X and updates the local decisions back to the system optimizer. The “optimum” of the coupled variables may be shifted in response to the changes from each local optimizer.The proposed AMOPSO based bi-level decision framework is illustrated in Fig. 4. Compared to the MA based decision framework, the computational efficiency of the AMOPSO based decision framework could allow us to study the performance of the smart building cluster at a different decision time scale (e.g., hourly). By shortening the decision time scale, we may more accurately track the dynamics of the building system, and derive a more effective operation strategy to reduce energy consumption and achieve more cost savings.The proposed AMOPSO based framework is applied to study a simple building cluster (two buildings) located in the Phoenix, Arizona area. Since Phoenix is known for hot summers when energy usage is critically important, we take July 21, 2009 as an example day for the experiments with data from the Salt River Project (SRP) (http://www.srpnet.com), a local electricity provider [22].In this experiment, we attempt to compare the computational performance of the AMOPSO based framework and MA based framework. Three building operation modes are considered: (1) from midnight to the onset of the on-peak period (0 am-1 pm); (2) the on-peak period (1 pm–8 pm); and (3) from the end of the on-peak period to midnight (8 pm–0 am). The capacity of the power grid is assumed to be 15kW. The heavy mass building applies the time-of-use (TOU) plan and the light mass building adopts the SRP EZ-3 option plan. In the EZ-3 plan, 3 pm–6 pm are the peak-hours where the price is much higher than the off-peak hours. In the TOU plan, 1 pm–8 pm are the peak-hours where the price is also higher (less than that of EZ-3) than the off-peak hours. During the off-peak hours, the price of the EZ-3 plan is relatively lower than that of the TOU plan. The population/swarm size for both the MA and AMOPSO is 30, and the archive capacity for both the MA and AMOPSO is 50. In the MA based decision framework, the maximal number of MA iterations is 30, and the maximum number of local search iterations is 20. In the AMOPSO based decision framework, the maximal number of AMOPSO iterations is 60, and the maximum number of multiple search methods module iterations is 5.The Pareto frontier in the single building energy cost performance space obtained by the proposed AMOPSO framework is shown in Fig. 5. The MA based Pareto frontier is also presented in Fig. 5 for comparison. In the decision model, most of the computational time is spent on calling the simulator to compute building cooling load, therefore, we use the number of simulator calls to measure the computational performance of the MA and AMOPSO based framework. We adopt three quality indicators from [25]: additive unary epsilon indicator (Iε+1), spread (Δ), and hypervolume (HV) to evaluate the solution performance of the MA and AMOPSO based framework in Table 6. All the non-dominated solutions in the MA based Pareto set and AMOPSO based Pareto set are used to approximate the true Pareto frontier (PF*).It is observed from Table 6 that the AMOPSO based decision framework significantly reduces the computational cost (lower number of simulator calls) and is more accurate than the MA based decision framework (smaller values of epsilon indicator and spread, larger value of hypervolume). This can also be seen directly in Fig. 5.In Section 4.4.1, we have demonstrated that the AMOPSO based decision framework is able to significantly improve the computational performance without losing solution accuracy. This more efficient decision framework enables us to explore decisions on different time scales, which is expected to achieve cost savings for the buildings. In this experiment, we study the decentralized decision under three operation modes and twenty-four operation modes (hourly operation decision). The Pareto frontiers in the single building energy cost performance space obtained by the proposed AMOPSO framework for the three modes and hourly operation decisions are demonstrated in Fig. 6. It is observed that the Pareto frontier for three modes decision is dominated by the Pareto frontier for hourly decisions. This is due to the fact that refining the time scale for the on-peak period to an hourly basis allows buildings to use the storage system more effectively, which is able to significantly reduce energy cost, and thus achieve more cost savings.The minimal energy cost for each building and total energy cost for the two buildings under three operation modes and 24 operation modes are recorded in Table 7. The power grid dependency rate (PGDR) proposed in [22] which measures the degree of dependencies of a building to the power grid is adopted to evaluate the three modes and hourly decisions. The lower value of PGDR is preferred which reflects a higher resilience capability of the building to a power disruption. According to the five metrics presented in Table 7, the hourly decision outperforms the three modes decision in terms of four out of five metrics which indicates that the hourly operation decision could achieve more cost savings.

@&#CONCLUSIONS@&#
The bi-level decision framework based on the memetic algorithm is demonstrated to be capable of deriving the Pareto solutions for the building cluster in a decentralized manner [22]. While promising, the framework is computationally expensive which prohibits its application to hourly (or even less) based operation decisions. In the research, we propose a bi-level decision framework based on augmented multi-objective particle swarm optimization which is capable of deriving good results with very low computational cost to improve the computational performance of the decision framework. The proposed AMOPSO outperforms nine state-of-the-art MOPSOs and MOEAs. The hourly operation decisions obtained by the AMOPSO based decision framework enables the buildings to utilize the storage systems in a more efficient way, reduce energy waste and improve energy efficiency, and thus reduce the energy cost.Although the AMOPSO based decision framework is capable of hourly decisions, the decision framework is still under deterministic assumptions which means that the noise that exists in weather (e.g., temperature, solar radiation), sensors and the model itself are not considered. In the future, we will conduct some statistical analysis to investigate properties of these noises and then integrate model calibration techniques (e.g., Kalman filter, particle filter [66]) to the decision framework to handle these noises. The integrated decision framework is expected to derive adaptive decisions for the building cluster which will enable buildings to quickly respond to the dynamic environment.