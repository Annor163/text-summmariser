@&#MAIN-TITLE@&#
Using patient lists to add value to integrated data repositories

@&#HIGHLIGHTS@&#
Project-specific patient lists add value to integrated data repositories (IDRs).Query on a patient list restricts returned data to list members.List uses include chart review, practice management, phenotyping and data brokering.A patient list can be used for searching and linking to registry data in an IDR.Features needed to implement patient lists could be added to i2b2 and other IDRs.

@&#KEYPHRASES@&#
Integrated data repository,Patient registry,Honest broker,Bio-repository,i2b2,Meaningful use,

@&#ABSTRACT@&#
Patient lists are project-specific sets of patients that can be queried in integrated data repositories (IDR’s). By allowing a set of patients to be an addition to the qualifying conditions of a query, returned results will refer to, and only to, that set of patients. We report a variety of use cases for such lists, including: restricting retrospective chart review to a defined set of patients; following a set of patients for practice management purposes; distributing “honest-brokered” (deidentified) data; adding phenotypes to biosamples; and enhancing the content of study or registry data. Among the capabilities needed to implement patient lists in an IDR are: capture of patient identifiers from a query and feedback of these into the IDR; the existence of a permanent internal identifier in the IDR that is mappable to external identifiers; the ability to add queryable attributes to the IDR; the ability to merge data from multiple queries; and suitable control over user access and de-identification of results. We implemented patient lists in a custom IDR of our own design. We reviewed capabilities of other published IDRs for focusing on sets of patients. The widely used i2b2 IDR platform has various ways to address patient sets, and it could be modified to add the low-overhead version of patient lists that we describe.

@&#INTRODUCTION@&#
We are well into the era of “secondary use” of health data [1], of which an important part is reusing clinical data for both publishable research and quality improvement [2]. A 2010 survey [3] defined “integrated data repository” (IDR) as a data warehouse integrating various sources of clinical data to support queries for a range of research-like functions. IDRs for research are usually designed to allow “attribute-centric” queries [4]: that is, queries for the set of patients who meet some criteria based on values of clinical observations or characteristics (also called “attributes” in the common Entity–Attribute–Value (EAV) model [5,6]). An example might be, “Give me all the patients who have more than one admission and are on inhaled corticosteroids.” Dinu and Nadkarni [7] said that clinical care systems are, in contrast, optimized to retrieve many or all attribute values for a particular patient. An example would be displaying the entire electronic chart for a selected patient. They also noted an occasional need to do both at once – to retrieve a specified set of attributes for a specified set of patients. They called this “bulk data extraction,” a name suggestive of exceptions and custom programming. We will call this a patient list query. An example might be “For my pre-defined set of patients, filter them by those who have had a chest CT and return their current meds and pulmonary function test results.” IDRs designed to query for specified sets of patients in this way seem to be rare or limited in the capability. In our own IDR [6] we have discovered a variety of uses for such a function. Primarily these involve query for detailed, patient-level data rather than aggregations. We shall illustrate the value of patient lists with a number of use cases, describe methods for addressing related technical and governance issues, and then discuss the concept with regard to i2b2.IDRs are complex systems that have to solve a variety of problems, including: identity management, semantic and syntactic comparability of data from different sources, protection of confidentiality, convenient and flexible query, and the performance and usability issues arising from the sheer volumes and varieties of medical data [6,8]. The ability of such systems to support patient-list query varies.One approach to an IDR is to simplify governance by irreversibly de-identifying all data, as in Vanderbilt’s BioVU DNA Biobank [9]. This would necessarily preclude query about a known (i.e., identified) set of patients.The Enterprise Data Trust at Mayo Clinic [10] emphasizes industrial-scale data modeling of healthcare concepts to a relationally normalized database. From this they extract a dimensional model [11] to support ad hoc query by using standard commercial tools. Dimensional models are used for queries that aggregate data across selected dimensions, such as time or location, that cut across all records. Other attribute values pertaining to individual patients, such as specific drugs, conditions or procedures, would not be available for selecting data in a dimensional query.The National Institutes of Health has an intramural IDR called BTRIS [12] to hold data from numerous research studies. BTRIS supports query by providing an interface with templates in which users can select values of clinical and demographic attributes for filtering returned data. Because protocols are a high-level concept in this system, an investigator can focus a query on the subjects in their own study. They also offer “list reports” to create lists of patients “that can be used as filters for other reports”. This seems like a form of query by patient list.The recent IDR survey [3] noted, by comparison to a previous survey, trends for substantial and increasing use of flexible, ad hoc user query interfaces (as opposed to custom programming for data extraction) and automatically de-identified data (during either data loading or output). One such system is Stanford’s STRIDE IDR [13]. It supports a clinical data warehouse, individual research project data management, and a biorepository. The underlying data model is EAV, accessed by two graphical user query interfaces with granular access control and with the ability to release data that has varying levels of de-identification. All are features that it shares with the widely used i2b2 platform [14]. STRIDE allows users to discover and save patient cohorts, which sounds like the internally-defined patient lists that we describe later. i2b2’s suitability for patient list query is discussed in detail later.This paper will illustrate patient list uses and concepts at National Jewish Health in a custom-designed IDR [6], known to us simply as the RDB (Research Database). The RDB uses a unique data model called a “dimensional bus”, implemented on a SQL Server 2005 database platform. It has a custom query user interface, programmed using the ColdFusion language, that compiles T-SQL queries at run time. This interface gives highly expressive, ad hoc and simultaneous query of any attribute of clinical, research and biorepository data. Data in the RDB come from an Allscripts EHR (electronic health record), a Freezerworks sample management system, and our custom-programmed clinical data management system, Study Design by Metadata (SDM).All researchers are allowed to query the RDB for record frequencies, obscured to protect privacy. Query for individual-level data is controlled by issuing to individual research projects customized “Access Tickets.” The Tickets implement the institutional review board’s (IRB) permissions specifying access to data sources, level of de-identification, and even patients’s consents for studies of a certain type. The RDB can act as an automated honest broker [15], by maintaining a link between a random internal identifier, called the ASID (Anonymous Subject IDentifier) and direct identifiers such as patient name. All queries expose the ASID automatically, but a study being allowed access to direct identifiers will obtain those through a separate action by our database curator.

@&#CONCLUSIONS@&#
Research enterprises have no doubt resorted to a variety of programming solutions to accomplish the tasks that patient lists helped us solve. The patient list concept works – almost automatically – with an increasingly common model [3]: research IDRs with graphical query interfaces for attribute-centered queries and automated data de-identification. The enabling concept of the patient list is simple: that a pre-defined set of patient identities can be thought of as just another source of data in an IDR. Further, patient lists are straightforward data structures which should not be burdensome to load into an IDR. Based on our experience, patient lists can add much value to an IDR. We think that the patient list concept can be adapted to different IDRs. The concept might even be applicable to federated query systems [22,23] – if these have some kind of overall identity management, so that a list of patient identities can be transformed into whatever the federation uses.