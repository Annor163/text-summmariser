@&#MAIN-TITLE@&#
A generic uniform scallop tool path generation method for five-axis machining of freeform surface

@&#HIGHLIGHTS@&#
Uniform scallop tool path has been generated via cutting simulation.Grass/CC rings are calculated both in parametric and 3D Euclidean space.Optimized methods are used to fast calculate the grass/CC ring.The method is free of local geometry assumptions; thus is more precise.The method is generic for any cutter, parametric surface and tool path pattern.

@&#KEYPHRASES@&#
Five-axis machining,Uniform scallop tool path,Cutting simulation,Ring,

@&#ABSTRACT@&#
In this paper, a generic uniform scallop tool path generation method for five-axis machining is presented. Unlike the conventional methods which are based on the local surface geometry assumptions, this method is inspired by cutting simulation. Initially, the designed surface is planted with dense grasses. If a cutter is put onto the surface, the affected grasses will be cut short. All the affected grasses form a grass ring on the surface. When the cutter moves along the previous tool path, the envelope of the grass rings will form a machining band. Based on the machining band, cutter contact points can be found on the surface to ensure that the cutting edge touches exactly on the side of the band. These cutter contact points are fitted to construct the next tool path. In this way, all the tool paths can be generated recursively. An optimization is also developed to improve the computing efficiency of the path generation process. The proposed uniform scallop tool path generation method is generic. It can be popularized to (1) any kind of end mill with various sizes, (2) any kind of parametric surface and (3) directional- or contour-parallel tool path topologies. Another salient feature of this method is that it is free of local surface geometry assumptions, so the obtained tool paths are more precise. The proposed method is implemented and evaluated with several freeform surface examples. The feasibility of the method is also verified by actual cutting experiment.

@&#INTRODUCTION@&#
Freeform surfaces are widely used in various industry applications. It is defined in a parametric way as the formS(u,v), in whichuandvare two parameters. Usually, freeform surfaces are sent to CAM systems before they can be machined on three- or five-axis machine tools. The main task of the CAM systems is to plan tool paths on the input surface. The tool path can be classified into roughing and finishing according to different machining stages. In our previous work  [1], we were able to generate contour-parallel roughing tool path. In this work, we put our focus on five-axis finishing tool path generation.A tool path defines the feed directions of the cutter on the surface. There are two basic error types involved in generating the finishing tool path: the chord error and the scallop error. The chord error is defined in the tool feed direction along the tool path, which is used to evaluate the cutter trajectory precision between two continuous cutter contact (CC) points; while the scallop error is defined in the cross section of the two adjacent tool paths, which is used to evaluate the surface roughness after machining. In the tool path generation strategy presented by Lo and Lin  [2], these two errors are integrated to get the finishing tool path. In this paper, however, the term tool path refers to an accurate curve on the designed surface. So in the tool path planning stage, the chord error is not taken into consideration.The quality of the finishing tool path has a direct influence on the final surface precision and the machining efficiency. For a high-quality tool path, the machining strip should be maximized while the geometric errors should be minimized  [3]. Among the available tool path planning strategies, the iso-parametric strategy seems to be the most straightforward. In an iso-parametric path, the cutter moves along constant parametric curves. The side step is constrained by maximum scallop between two adjacent parametric curves. Obviously, the maximum scallop must be smaller than the scallop allowance. Another strategy which is often used is the iso-planar strategy. The only difference between the iso-parametric and iso-planar strategies is that for the latter, tool path curves are obtained by intersecting planes with the designed surface. Both the iso-parametric and iso-planar strategies belong to the category of constrained scallop strategy, which is characterized as low efficiency as it might have overlapped or redundant tool paths. The uniform scallop (iso-scallop) strategy finds a balance between the machining precision and efficiency. It attracts much research attention in this area since it was first proposed probably by Suresh and Yang  [4]. However, it has never been an easy task to generate the iso-scallop tool path due to the irregular curvature distributions of freeform surfaces  [5], especially for five-axis machining, which has two additional motion degrees and is considered to be collision-prone.Five-axis machining has brought in many advantages including faster material-removal rates, improved surface finish, and the elimination of hand polishing  [6], as well as new problems such as tool positioning and collisions. In five-axis machining, the tool positions including its orientations should be carefully adjusted as to achieve the maximum machining strip. Methods such as curvature matching machining  [7,8], principle axis method  [9], multi-point machining  [10,11] and arc-intersect method  [12] are interesting. For collision detection and avoidance issue, it has been a significant research topic in five-axis machining during the last decades [13–18]. In our previous work presented in  [19], we aimed to efficiently calculate tool admissible area for any surface point, using the idea of sample admissible areas interpolation. In this work, the collision problem is left as an interface so it is not discussed at present. Also, this interface is compatible with the tool positioning problem.The main difficulty in generating the five-axis iso-scallop tool path is finding the corresponding CC point of the next tool path for a current CC point of the current tool path. On one hand, the surface curvature in the vicinity of the current CC point is irregular, making it nearly impossible to precisely formulize the position of the next iso-scallop CC point; on the other hand, as the tool orientation of the next point is unknown, the effective cutting radius (for flat- or fillet-end mills) is unknown, either. Meanwhile, one has to be careful to avoid the possible gouging or collision problems when adjusting the tool orientations.The purpose of this work is to build a framework for generating five-axis iso-scallop tool paths via cutting simulation. Many techniques can be used to do cutting simulation  [20–24], in which a well-known method is the normal vector method (NVM)  [9]. This method can be vividly described as mowing the lawn on the surface. At first, grasses (considered as straight) with appropriate lengths are planted perpendicularly onto the surface. Then a cutter is forced to move on the surface along a tool path. Any grass that makes contact with the cutting edge of the cutter is cut short at the intersecting point. As the cutter reaches the end of the path, the resulting grasses can be used to approximate the machined surface. The precision of the simulated surface is controlled by the density of the grasses on the surface. In this work, the concept of NVM is adopted to calculate the grass curve for the current tool path. And then the next iso-scallop tool path is calculated based on the grass curve. The benefit of using this method is that no surface curvature assumptions are needed, thus cutters with larger radii can be used. The fillet-end mill is used in this work. The advantage of fillet-end mills over ball- or flat-end mills is that it inherits the merits of the other two cutters and produces smaller scallops across the feed direction and low roughness along the feed direction  [25].The rest of the paper is organized as follows. Section  2 studies the backgrounds of iso-scallop tool path. In Section  3, some preliminary definitions and operations throughout the paper are given. The intermediate grass curve is generated in Section  4. Based on the grass curve, the tool path curve is generated in Section  5. Section  6 optimizes the proposed tool path generation method. Some iso-scallop tool paths examples including a real cutting test are given in Section  7. The last section concludes this paper.The iso-scallop tool paths are usually generated recursively  [26]: initially, a primary tool path from which the other paths are constructed is selected, usually, from the surface boundary curves. Then, all the CC points of the next tool path are calculated from the corresponding CC points of the current path, such that the scallop between the two paths remains at constant height. Theoretically, if these newly generated CC points are dense enough, they can be used directly as a tool path. Practically, these points cannot be too dense in order to save computation. They are usually fitted (interpolated or approximated) to a cubic spline, either in 3D physical space or 2D parametric domain. In practice, 2D parametric fitting is superior to 3D physical fitting in terms of accumulation errors as the former resulting splines remain staying always on the designed surface. The secondary path is then used as a primary path for generating another tool path. This process keeps recursively running until the stop condition is met.The real challenge here is to compute the next CC point according to the current one in the path interval direction. In three-axis machining, as ball-end mills are used, things are relatively easier because one only needs to handle the irregular freeform surfaces. For five-axis machining, flat-end or fillet-end mills are often used. In this case, the challenge is even bigger, because one has to deal with the irregular cutter surfaces, too.Suresh and Yang  [4] made probably the first attempt to plan tool path with constant scallop criterion for three-axis machining with ball-end mills. In their work, the classic scallop models on flat, convex and concave spherical surfaces (with regular curvature) are built (as shown in Fig. 1) and formulated as:(1)g=2a1+sign⋅r/R,in whichgis the path interval in physical space,ris tool end radius,Ris the surface curvature, and2a(asABin Fig. 1) is the distance between two adjacent tool centers, as shown in Fig. 1. sign is an operator whose value is 0 for flat surface, 1 for convex surface and −1 for concave surface. In Eq. (1), the solution ofarequires a tedious iterative process. Local surfaces are approximated in the neighborhood by spheres (referred as sphere assumption) so that the path interval can be calculated with Eq. (1). This path interval is converted (referred as conversion assumption) to parametric interval with the first order Taylor expansion, thus the next CC point can be located on the surface. Lin and Koren  [27] concerned that the first order Taylor expansion is only valid when the converted parametric interval is very small. They introduced a more accurate conversion technique based on both the second order Taylor expansion and an error compensation method. Besides, they further developed Eq. (1) and gave a much more neat expression of the path interval, as:(2)g=8hrRR+sign⋅r.Eq. (2) or similar forms of Eq. (2) were later also used by authors  [28–30] to evaluate the CC path interval.Feng and Li  [31] argued that the previous work had simply assumed that the corresponding swept sections on adjacent tool paths were coplanar. This assumption (referred as coplanar assumption) caused inaccuracy in the calculation of tool path intervals and compromised the generation of optimal tool path. In their work, two offset surfaces, the scallop surface and the tool center surface, are employed to successively establish scallop curves on the scallop surface and cutter location paths for the designed surface, such that the coplanar assumption is avoided. Besides, the questionable conversion assumptions involved in transforming the 3D cutting geometry to 2D parametric domain are not required. Their work was followed and further developed by Yoon  [32,33], who improved significantly not only the computing efficiency but also the accuracy of the tool path. These works are for three-axis machining with ball-end mill. In another work presented by Li and Feng  [34], the authors introduced the same method to five-axis iso-scallop tool path generation with flat-end mills. One notable difference is that, for five-axis machining, owing to the rotated and changing tool orientations, the scallop curve is facilitated by tedious coordinate system transformations.A similar method was adopted by Tournier and Duc  [35] by planning the iso-scallop tool path on machining surface  [36]. A general definition of the machining surface is a surface including all the information necessary for the driving of the tool. For three-axis ball-end mills, the machining surface is a traditional offset surface. The machining surface has an aptitude to treat curvature discontinuities; however, it may also have the invalid loop problem. To free the loops, in their work, only the cutters whose radius is smaller than the smallest concave radius of the surface are used. In one of our earlier research, Shen et al.  [37] used the Level Set Method to generate the offset surface and then plan iso-scallop tool path. With Level Set Method, loop problems during offsetting can be naturally eliminated. Afterwards, the machining surface method was popularized to five-axis iso-scallop tool path generation with fillet end-mill through a bi-parametric modeling method, also by Tournier and Duc  [38].For five-axis machining, Lee  [39] proposed a feasible machining strip evaluation technique for iso-scallop tool path generation with flat-end mills. In the osculating plane normal to the feed direction, the feasible machining strip is evaluated by intersecting the effective cutting shape with the scallop surface. Two adjacent machining strips can be put side by side so as to maximize the machining efficiency while maintaining the machined surface error, as shown in Fig. 2. In this way, the next CC point can be located. The parametric increments are determined by solving two vector form equations, one in the feed direction, and the other in the cross-feed direction. A searching method is proposed to improve precision of the parametric increments solution. As mentioned in his paper by the author himself, one limitation of the method comes from the assumption of using local surface curvatures at the cutter contact point in approximating the neighborhood surface (which is actually the spherical assumption). The approximation might introduce errors as tool size can be quite large. Another hidden assumption (referred cutting shape assumption) in this method might be using the current effective cutting shape in approximating the adjacent one.Pi et al.  [7] introduced a new automatic five-axis tool path generation method called Grind-Free tool path generation with a fillet-end mill. The CC path interval is calculated using a curvature matched machining algorithm. Lo  [40] also referred to Eq. (2) to calculate the CC path interval for five-axis iso-scallop tool path generation. Here in Eq. (2)ris the tool effective radius. Ahmet and Ali  [41] presented a rather complicated searching procedure for the next iso-scallop tool path on both the physical surface and parametric domain. However, in the procedure, many assumptions and estimations are involved to cope with the irregular surface curvatures and numerical iterations. Yet one noteworthy point in their work is that no differential geometry is applied to evaluate the surface curvatures and surface normal–tangent vectors. For a surface point, these features are calculated with three or four points in its neighborhood.Recently, the mesh surface has become the focus of considerable interest, since its geometric computation is simpler and more robust than that of the parametric surface. Kim and Yang  [42] presented a CL surface deformation approach for constant scallop height tool path generation from triangle mesh. One difficulty of planning iso-scallop tool path on meshed surface is that mesh surface does not have curvature information. Realizing that, Lee et al.  [43] presented several methods for estimating the curvature form the mesh, and compared these methods in terms of tool path generation. In their work, a drive surface method is proposed for propagating constant scallop paths flexibly on the mesh surface.Conventionally, the primary tool path is selected from the surface boundary curves. Agrawal et al.  [44] optimized the orientation of the primary path through application of a genetic algorithm for minimizing machining time. Giri et al.  [45] suggested that the direction of the maximum convex (or minimum concave) curvature should be selected as the initial tool path. Usually, the iso-scallop paths are organized in a directional-parallel way. In order to minimize the fluctuation of cutting load and the times of cutter retractions during the cutting operations, a contour-parallel topology tool path with constant scallop height is developed by Lee  [46]. Though, much more efforts should be made on the self-intersections removal and tool path linking issues. Chen et al.  [47] studied the surface scallop generating mechanism in ball-end milling process.From the above reviewed literatures, it can be seen that most of the current existing iso-scallop tool path generating techniques are based on assumptions, such as the spherical assumption, the coplanar assumption and the cutting shape assumption. These assumptions may have a chance to improve the computing efficiency of the tool path, but at the expense of the path accuracies. In this work, we will build the framework for the five-axis iso-scallop tool path generation without these assumptions. The details are presented in the following sections.In this work a fillet-end mill is used to generate the iso-scallop tool path. A fillet-end mill is made up of a bottom circular plane, a quarter of torus, and a cylindrical surface, as shown in Fig. 3, in whichR1is the bottom radius,R2is the filleted radius (or corner radius), and pointOis the tool center. A tool coordinate system (TCS) can be installed to the cutter with the origin at the tool center andZT-axis parallel to the tool axis direction, as shown in Fig. 3(a). In the cross section ofXOY, the tool contour profile can be formulated as:(3)r(z)={R1+R2,0≤z<LR1+R22−z2,R2≤z<0,in whichr(z)is the distance from a point on the tool contour profile to the tool axis, as shown in Fig. 3(b).For any CC pointCon the designed surface, as shown in Fig. 4(a), the local coordinate system (LCS) can be established with the origin atCandZL-axis parallel to the surface normaln. In the LCS, theXL-axis is defined in the cutter feed directionfatCand theYL-axis is determined using the right hand rule. Note that heren,fandbare all unit vectors.In the LCS, when the fillet-end mill is placed onto a CC pointC, the tool axis directionTand the tool center pointOcan be formulized as:(4)T=ncosβ+(fcosθ+bsinθ)sinβ,(5)O=C+n⋅(R2+R1/sinβ)−T⋅R1/tanβ,in whichβis the tool inclining angle to theZL-axis,β∈(0,π/2), andθis the tool rotational angle around theZL-axis,θ∈(0,2π], as shown in Fig. 4. With Eqs. (4) and (5), the cutter location (OandT) can be calculated ifC,f,βandθare given. Note that the coordinates of the vectorsn,f,bandTare calculated with respect to the workpiece coordinate system (WCS), so resulting coordinates ofTandOfrom Eqs. (4) and (5) are also in the WCS.As a basis of this work, it is essential to test whether a grass (consider as a line segment) contacts the cutting edge of the fillet-end mill. The height of the grass is set to be the allowable scallop error. The result should be a true or false Boolean value.A grass on the surface as mentioned in Section  1 can be represented by its root pointGon the surface, thus:(6)G(u,v)=S(u,v),in whichS(u,v)is the surface expression. And the head pointHof the grass can be expressed as:(7)H(u,v)=G(u,v)+n⋅h,in whichnis the surface normal at the root pointGandhis the allowable scallop error. With these, the above test can also be described as: for a given cutter location at the CC pointC, and a known grassGin the neighborhood ofC, decide whether the grass contacts the cutting edge of the fillet-end mill.Usually, the cutting edge of the fillet-end mill is only on the torus part, so from geometry point of view, it is only necessary to decide whether the grass intersects the quarter torus. In practice, solving the intersection of a spatial torus and a line segment involves solving a quartic equation, which is hard to find the explicit solution. Note that the scallop error (in about 0.01 mm scale) is much shorter than the corner radius (in about 1 mm scale) of the cutter, and usually the tool inclining angleβin LCS will not be near to 0 orπ/2, it is only necessary to test whether the head pointHof the grass is inside the torus part of cutter.As shown in Fig. 5, pointH′is a projection of the grass head pointHon the tool axis line.H′can be expressed by:(8)H′=O+λ⋅T,in whichλis a to-be-determined real parameter. With pointH′, vectorH′Hcan be expressed as:(9)H′H=OH−λ⋅T.AsH′H⊥T, namely,H′H⋅T=0, soλcan be solved as:(10)λ=OH⋅T.As the coordinates of pointsO,Hand vectorTare already known,λcan be determined with Eq. (10).Note that whenλ<−R2orλ>0,H′is outside the torus part of the cutter. In this case, the grass will not intersect the cutting edge. When−R2≤λ≤0,|H′H|is compared with|H′E|(=r(λ), as in Eq. (3)), in which pointEis the intersection point between the extended line ofH′Hand the cutting edge. If|H′H|>|H′E|, then the grass will not intersect the cutting edge, either; otherwise the grass will intersect the cutting edge.With the above discussion, one can easily decide whether a grass is in contact with the cutting edge with minimum computation cost.In this work, like in many literatures, we also take the surface boundary curve to generate the first tool path. And then other paths are generated recursively based on the first path. To make it more straightforward, we take theu=0boundary curve to generate to first path. Suppose the current tool path has been calculated in the previous step and is represented bytpi(t), in whicht∈[tmin,tmax]⊆[0,1]. The task of this section is to calculate the critical grass curvegci+1(t)fromtpi(t).tpi(t)is a curve fitted by a series of 4D abstract point data as(u,v,β,θ), in whichuandvare the surface parameters,βandθare the tool inclining and rotational angles in the corresponding LCS. For a designated parametert, the values ofu,v,β,θ,du/dtanddv/dtcan be calculated according totpi(t). If only theuandvdimensions are counted,tpi(t)can be considered as a curve on the surface, asS(u(t),v(t)). The tangent of the curve attcan be calculated as:(11)dtpi(t)dt=∂S∂u⋅dudt+∂S∂v⋅dvdt.This tangent is used as the feed direction of the tool path, so:(12)f=dtpi(t)dt.Note thatfis a unit vector, sof=f/|f|. The CC pointCand surface normaln(unit vector) can also be calculated with parametersuandv. With these, the LCS can be established as in Section  3.1. In the LCS, with the tool inclining and rotational anglesβandθ, the cutter location can be calculated with Eqs. (4) and (5). On the obtained cutter location, the grass ring is constructed as follows.Suppose initially, the surface is planted with dense grasses. The heights of the grasses are equal to the allowable scallop errorh. When the cutter is placed ontpi(t)at a CC pointCwith a certain tool posture, the affected grasses near the CC point will be cut short, leaving a cut area on the surface. This cut area can be represented by a grass ring formed by the critical grasses from the boundary of the area, as shown in Fig. 6. To find these critical grasses, brute-force algorithm can be easily designed by checking each grass on the surface to see whether it intersects the cutting edge. In this work, a bisection in the parametric domain is used to efficiently find the critical grasses for the CC point.Suppose the corresponding 2D point of the given CC pointCin parametric domain isCˆ(=(uC,vC)). For a grassGin the neighborhood ofC, its corresponding 2D point in parametric domain isGˆ(=(uG,vG)). The coordinates ofGˆcan be represented by:(13a)uG=uC+d⋅cosφ,(13b)vG=vC+d⋅sinφ,in whichdis the distance fromGˆtoCˆin parametric domain andφis the angle between segmentCˆGˆand theu+direction,φ∈(0,2π], as shown in Fig. 7. With Eq. (13), the grass position on the surface near pointCcan also be considered as a function ofφandd, namelyG(φ,d).As shown in Fig. 8, for a designatedφ0in the parametric domain, inφ0direction, whend=0, the grass contacts the cutting edge at the grass root (also the CC pointC); whendincreases, the contact point moves upwards the grass head; and for a relatively larged, the grass does not contact the cutting edge. The criticaldvalue that makes the grass contact the cutting edge can be found with a bisection method, as shown in the flow chart in Fig. 9.In the bisection, the initial lower limitdloweris set to be 0. The initial upper limitdupperis determined recursively. Initially,dupperis set to be a proper guessing value (for example, 0.002). If the currentduppervalue makes the grass contact the cutting edge, thendupper=2⋅dupper. This process goes on recursively until the grass does not contact the cutting edge. Then the outputduppervalue can be used in the above bisection. The stop condition for the bisection is the satisfaction of the expression:dupper−dlower<dε, in whichdεis a predefined parameter resolution. With the bisection, whenφgrows from 0 to2π, all the critical grasses can be found and the grass ring can be constructed, as shown in Fig. 6.When the tool motion is controlled bytpi(t)and whentincreases fromtmintotmax, two critical grass curves can be found on the envelop of the continuously moving grass rings, as shown in Fig. 10. Only the grass curve in the cross-feed direction is responsible for the next tool path. Notice that the head of the grass curve forms the scallop curve, as has been mentioned in  [31].In real computational implementations, to calculate the grass ring for a CC point, aΔφis set to control the increment ofφ. For example, ifΔφ=π/180(one degree), then 360 critical grasses can be calculated on the grass ring. And to calculate all the grass rings for the tool pathtpi(t), aΔtis set to control the increment oft. Then the grass curve can be obtained by fitting those responsible target grasses in each grass ring. In a grass ring, only one critical grass is responsible for the to-be-fitted grass curve. It is necessary to find the target grass in each grass ring. And for a given grass ring with its discrete grasses, the target grass should be in the orthogonal direction of the current tool path.As shown in Fig. 11, pointCis the current CC point,Giis the root point of a random grass from the grass ring,f(also the feed direction, unit vector) is the tangent of the tool path curvetpi(t)atC, andnis the surface normal. The angleωiformed byfandCGican be calculated as:(14)ωi=arccos(f⋅CGi|CGi|).Note that the resultingωifrom Eq. (14) ranges only from 0 toπ, while in reality,ωimay range from 0 to2π, as shown in Fig. 11. To get the full range ofωi, a flag is set as:(15)flag=(f×CGi)⋅n,in which ‘×’ and ‘⋅’ are the cross and dot product operators, respectively. With flag, at first, Eq. (14) is used to calculate the initialωivalue. And then Eq. (15) is used. Ifflag<0, thenωi=2π−ωi; otherwise,ωistays the initial value. Eachωican be calculated for each critical grass in the ring. The grass that makes the smallest value for the absolute value expression|ωi−3π/2|is selected to be target grass.In this work, as a directional-parallel tool path pattern is applied, for tool path curvetpi(t), whent=tminort=tmax, the first or last CC point is on (or near) the surface boundary. To ensure that the corresponding to-be-fitted grass curve also touches the surface boundary, the first or last target grass is picked directly on the surface boundary. With the recursive development of the grass curves, it is possible that the first or last target grass moves onto other surface boundaries, as shown in Fig. 12.The obtained target grasses are expressed by the parametric coordinates(u,v)of the root points in parametric domain. These 2D parametric points(u,v)sare used as data points for curve fitting (interpolating or approximating). The output of the fitting process is a grass curvegci+1(t),t∈[0,1]. This curve is used to generate the next tool pathtpi+1(t)oftpi(t).Note that due to the truncated error of the computers, the beginning or the ending part of the curve may not be in the legal parametric range, as shown in Fig. 13. A simple bisection method can be designed to find the legal range [tmin,tmax] oft. Whent∈[tmin,tmax], the resulting 2D points are in legal parametric range.The task of this section is to find the next tool path curvetpi+1(t)based on the obtained grass curvegci+1(t), such that when the tool is positioned at any CC point oftpi+1(t), the cutting edge touches the head of the corresponding grass on the grass curvegci+1(t). The tool path generating process is similar to the grass curve generating process. At first, aΔtis set for the grass curvegci+1(t)to control the increment. For each grass ongci+1(t), a corresponding CC point is found such that when the tool is positioned at the CC point, the cutting edge touches exactly on the head of the grass. Note that these obtained CC points should contain also the tool orientation information. Then these CC points are fitted into a tool path curve.However, the above task is much more difficult than that of generating the grass curve based on a known tool path. The main difficulty comes from the undetermined tool orientations of undetermined CC points. To solve the tool orientation problem, the LCS for a to-be-determined CC point should be established first.Ongci+1(t), for a designatedtvalue, the corresponding grassGcan be calculated. In the neighborhood of grassG, suppose pointCis the corresponding target CC point. Note thatCwill be used as one of the data points for the tool path curve fitting. And when the tool path is obtained, it can be considered to be an offset curve of the grass curve. So the tangent direction (denoted byf) of the tool path at CC pointCshould be parallel with the tangent direction (denoted bya) of the grass curve at grassG. Note thatfis also the cutter feed direction onCand it will be used for theX-axis of the LCS. Withgci+1(t),acan be calculated as:(16)a=dgci+1(t)dt=∂S∂u⋅dudt+∂S∂v⋅dvdt.Note thatfandaare on the tangent planes ofCandG, respectively. Due to the irregular surface curvatures,fandamight not be in the same direction, as shown in Fig. 14. In reality,fis calculated with(17)f=(a⋅i)⋅i+(a⋅j)⋅j,in whichiandjare random picked orthogonal unit vectors on the tangent plane ofC, as shown in Fig. 14. Asfis a unit vector, the result from Eq. (17) needs to be unitized. With the above information, the LCS ofCcan be established referring to Section  3.1.In the LCS, the tool orientation is controlled by the inclining angleβand the rotational angleθ. Here many tool positioning and collision detecting and avoidance techniques as mentioned in Section  2 can be used, by adjusting theβandθvalues. The purpose of using these techniques is to achieve the maximum machining strip, meanwhile to avoid collisions.In this work, however, we focus specifically on the iso-scallop tool path generation. So the optimization forβandθare left as an interface for the available techniques. In this work, for convenience, once theβandθvalues are set, they remain unchanged for all the CC points, for example,θ=0andβ=π/9(20°).For a given grassGon the grass curvegci+1(t), its coordinates in the 2D parametric domain is denoted byGˆ(=(uG,vG)). In the neighborhood of grassG, the coordinates of a CC pointCin the 2D parametric domain is denoted byCˆ(=(uC,vC)).uCandvCcan be expressed as:(18a)uC=uG+dcosφ,(18b)vC=vG+dsinφ,in whichdis the distance fromGˆtoCˆin the parametric domain, andφis angle formed by segmentGˆCˆand theu+line,φ∈(0,2π], as shown in Fig. 15. Actually, Eq. (18) is the reverse form of Eq. (13).From Eq. (18), ifdandφvalues in parametric domain are given, the CC pointCcan be located. With grassG, the LCS for the CC pointCcan be built (see Section  5.1). In the LCS, optimizedβandθvalues can be determined from the interface. Withβandθvalues, the tool position can be calculated. It is a fact that in the neighborhood of grassG, if the same optimized rule is used to optimize the tool orientation, then the tool orientation will not change much.For a fixedφ0value, as shown in Fig. 16, whend=0, the cutting edge contacts the grassGat the grass root; whendincreases, the contact point moves along the grass upwards the grass head; and whendequals to a relatively large value, the cutting edge will not contact the grass at all. A bisection method similar to that in Section  4.1 can be used to find the criticald.When the criticaldvalue inφ0direction is determined, the corresponding critical CC point can be calculated. And whenφincreases from 0 to2π, all the CC points can be found and they form a ring (CC ring) around the grass, as shown in Fig. 17.As shown in Fig. 17, also, aΔφis set to control the increment ofφ. In the obtained CC points, only one point is responsible for the to-be-fitted tool path curve. The rule of finding the target CC point in a CC ring is similar to that in Section  4.2. As shown in Fig. 17,ωiis the angle formed by the tangent (a) of the grass curve at grassGand the vectorGCi,ωi∈(0,2π]. The target CC point is the CC point that makes the minimum value of the absolute value expression|ωi−3π/2|. For the first and last target CC points, they are also picked on the surface boundary, as in Section  4.2.The obtained CC points are expressed in the format as(u,v,β,θ), in whichuandvare the surface parameters,βandθare tool inclining and rotational angles in the corresponding LCS. These(u,v,β,θ)s are used as the data points for the tool path curve fitting. The output of the fitting process is a tool path curvetpi+1(t). Please also note that due to the truncated error of the computers, the beginning or the ending part of the curve may not be in the legal range. The legal range [tmin,tmax] oftcan be found. Whent∈[tmin,tmax], the resulting 2D points are in legal parametric range.The obtainedtpi+1(t),t∈[tmin,tmax], is then substituted into Section  4 to generate the next grass curve until the whole surface is covered. In this way the iso-scallop tool paths can be generated recursively.In Sections  4 and 5, the concepts of grass and CC rings are introduced. However, in a grass/CC ring, only one grass/CC point is useful. Obviously it is inefficient to first calculate all the grasses/CC points in a ring and then find the target one. To speed up to tool path generation process, in real computational implementations, finding the target grass/CC point in a ring must be optimized.As in Sections  4 and 5, for a designatedφvalue in the parametric domain, the corresponding critical grass/CC point in physical space can be found; and then the angleω(see Figs. 11 or 17) between the grass/CC point and the curve tangent can also be found. Soωcan be considered as a function ofφ(see Figs. 7 and 15), thus:(19)ω=ω(φ).As the surface mapping system from 2D parametric domain to 3D physical space is nonlinear, Eq. (19) is nonlinear, either.Here we take the grass ring for example. The to-be-optimized problem can be simply described as: finding the grass in the3π/2-direction of the feed directionfas quickly as possible, as shown in Fig. 11. If Eq. (19) is also involved, then the problem can be specifically described as: finding theφthat makesωequal to3π/2with minimum computation. Although Eq. (19) is known to be nonlinear, the independent and dependent variables have certain connections:1.φis in the range of(0,2π]andωis obviously also in the range of(0,2π].Whenφturns a round from 0 to2π,ωalso turns a round back to its initial value.Whenφincreasesπ/180(1°),ωalso increases averagelyπ/180.With these connections, another bisection as shown in Fig. 18is designed to efficiently find the target grass/CC point. Asω(φ)is a periodic function and the period is2π, in the bisection, the initial lower limit ofφ, which isφlower, is set to be 0, and the initial upper limit ofφ, which isφupper, is set to beπ. The calculatedωvalues forφlowerandφupperare denoted byωlowerandωupper, respectively. If3π/2is not in the domain of [ωlower,ωupper], thenφloweris reset toπandφupperis reset to2π. It must be noticed that here in the domain of [ωlower,ωupper],ωlowermust be smaller thanωupper. If the calculated results do not agree with this, for example,ωlower=πandωupper=π/4, thenωupperis added with2π, so for this case,ωupperbecomes9π/4. When the obtained initial upper and lower limits ofφ, the bisection begins to quickly find the target grass/CC point.The stop condition for the bisection shown in Fig. 18 is the satisfaction of the expression:φupper−φlower<φε, in whichφεis a predefined angle resolution. For example, ifφεis set to beπ/180, then the target grass/CC point angle precision is within one degree; and only 10 times of Eq. (19) will be called to calculate theωvalues.With this optimization, the target grass/CC point in a ring can be efficiently found, without calculating the whole ring. Thus the whole tool path generation efficiency can be improved.The proposed iso-scallop tool path generation method in this work is implemented in C++ programming language. Meanwhile, the Standard Template Library (STL) is used to handle the arrays and the Matrix Template Library (MTL)  [48] is used to handle the sparse matrix operations in the curve fitting process. The test program is run on a Lenovo T400 model laptop with P8700 CPU @ 2.53 GHz and 3 GB RAM. In the test program, the inclining angleβand the rotational angleθin the LCS are left as an interface.Though, in the test examples, we focus on the iso-scallop tool path generation process, so the tool positioning and the collision problems are not taken into consideration. We set constant values toβandθ. They are set to beπ/9(20°) and 0, respectively, that is to say, the cutter inclines 20° forwards the cutter feed direction. The parameter resolutiondεas in Fig. 9 is set to be 1.0×10−5. The angle resolutionφεas in Fig. 18 is set to beπ/180(1°). The increment stepΔtoftfor the tool path curvetpi(t)or grass curvegci(t)is set to be 0.01, that is to say, about 100 sample target grasses/CC points will be imported into the curve fitting procedure in each recursive step. The parameter settings are also listed in Table 1.In the test program, the target grasses/CC points are fitted into curves by the cubicB-spline curve approximation method. In the approximation process, 20 control points are used to approximate the 100 data points. And the knot vector of theB-spline is evenly selected from 0 to 1. Frankly, in this work, we have not done any optimizations to improve the precision of theB-spline curve approximation.The tested parametric surfaces are created in the famous software CATIA and are saved in IGES format. These surfaces are actually NURBS surfaces. Fig. 19shows the first surface we have tested. It is a typical four-side surface with the size about90×90mm2. The boundary areas of the surface are convex and the center area is concave like a bowl. A filleted-end mill with the bottom radiusR1=5mmand the corner radiusR2=3mmis used to cut along a pre-existing tool path to generate the machining band. For better view, the scallop errorhwill be set relatively bigger, in this example,h=0.04mm. Note that in this example, the rings are calculated brutally. In each ring, there are 360 grasses. The increment stepΔtof the tool path is set to be 0.004, so there are about 250 grass rings. Fig. 19 shows the calculated machining band, which is formed by the crowded root points of the grass rings (see also the enlarged view). From Fig. 19, it can be seen clearly that the width of the machining band in the concave area is wider than that in the convex area, which agrees well with the conclusions of Lee  [39]. With the same cutting parameters, iso-scallop tool paths are generated to cover the same surface, as shown in Fig. 20. It can be seen from Fig. 20 that these tool paths are well distributed. In Fig. 20, there are in all 49 tool path curves; and the start and end points of the last five tool path curves are on theu=1boundary curve. The tool path generation process stops because the last tool path curve locates entirely on theu=1boundary curve.In the second example, we have compared our program with PowerMILL 10.0 and UG NX 8 on machining parametric surface. Another surface as shown in Fig. 21is picked in this example. This surface is specially designed so that thev=1boundary curve (about 36 mm) is much shorter than thev=0boundary curve (about 110 mm), as shown in Fig. 21(a). In these tests, fillet-end mills with the same size (R1=5mm,R2=3mm) are selected. In UG and our test program, the scallop errors are both set to be 0.04 mm. In PowerMILL, for parametric surface finish machining, only the path interval can be set and this value is set to be 2 mm. The generated tool paths are shown in Fig. 21. Fig. 21(a) shows the iso-scallop tool path generated by our program; Fig. 21(b) shows the tool path generated by PowerMILL; and Fig. 21(c) shows the tool path generated by UG. It can be seen from Fig. 21(a) that all the path intervals are uniformly distributed. From Fig. 21(b) and (c), it can been seen that the path intervals of PowerMILL and UG are wider near thev=0boundary curve; and the intervals become narrower near thev=1boundary curve. As a result, narrower path intervals cause reluctant tool paths and lower machining efficiency. For PowerMILL and UG, guessing from distributions, their paths might be iso-parametric.Two more examples are used to test our program. The third example is tested on a peanut-like surface, as shown in Fig. 22. This surface is about 120 mm by 70 mm in size and is machined with a cutter withR1=3mmandR2=2mm. The scallop error is set to be 0.01 mm, so the tool path curves in Fig. 22 are much denser. The fourth example is tested on a turbo fan surface, as shown in Fig. 23(a). Originally, the fan is about 2000 mm in length. It is scaled to 200 mm in length for the demonstration purpose. A cutter withR1=5mmandR2=3mmis selected and the scallop error is set to be 0.02 mm. The generated iso-scallop tool path is depicted in Fig. 23(b).Although the tool path generation method in this work is designed for directional-parallel pattern iso-scallop tool path, the same method has also the ability to generate contour-parallel pattern iso-scallop tool path, simply by neglecting the operations on the first/last grasses/CC points which are on the surface boundary. This ability is verified in the fifth example. For convenience, we pick an arbitrary 2D circle (expressed also in cubicB-spline curve) in the parametric domain of the freeform surface. This 2D circle, when mapping on to the 3D surface, is used as the initial grass curve for the contour-parallel tool path generation process. In this example, a tool withR1=3mmandR2=3mmis used and the scallop error is set to be 0.01 mm. The generated contour-parallel tool path curves are depicted in Fig. 24. In Fig. 24, there are 30 tool path curves. The stop condition of the generation process is manually controlled. If the process continues, sharp angles and self-intersections will appear on tool path. We have done some research on predicting and handling self-intersections in 2D curve offsetting  [1]; however, so far, we are not able to handle them in the 3D space. It seems that if a contour-parallel tool path pattern is applied, no matter how smooth the first tool path is, sharp angles would eventually appear in the successive shrinking process. These unavoidable sharp angles will cause sudden changes of cutter feed directions, which is bad for finished surface quality. On this sense, directional-parallel tool path pattern might be more suitable for the surface finishing process.The statistics including the parameter settings and the executing time of each example above by our program is detailed in Table 2. From Table 2, the program executing time for each example is much greater (about 36 times) if the optimization of finding the target grass/CC point as in Section  6 is not applied. However, with optimization, the executing time of each example is within 1 min. This performance suggests that the proposed iso-scallop tool path generation method is suitable for practical use.A real cutting experiment is carried out on the Mikron UCP 600 model five-axis machine tool. This machine tool is equipped with Heidenhain iTNC530 control system and has two rotary axes (AandCaxes) on the working table, as shown in Fig. 25(a). The surface as shown in Fig. 19 is used for this experiment. A filleted-end mill withR1=2mmandR2=1mmis picked to generate the iso-scallop tool path on this surface and the scallop height is set to be 0.02 mm. To make it simple, each of the obtained tool path curves is scattered with constant parameter distance. The obtained scattered cutter locations are then processed by a simple postprocessor developed by ourselves with the M128 TCPM (Tool Center Point Management) function. Fig. 25(a) shows the aluminum stock setup on the machine tool and Fig. 25(b) shows the roughed stock. The roughing tool path is generated by UG NX 8. Fig. 25(c) shows the finished workpiece by the proposed iso-scallop tool path. In the finishing process, the feed speed is set to be 1500 mm/min, and the spindle speed is set to be 15000 r/min. The whole finishing process takes about 35 min. Fig. 25(d) shows the amplified details of the tool tracks on the machined surface. From Fig. 25(d), it can be seen clearly that the scallops between the tool tracks are uniformly distributed. The cutting experiment suggests the proposed iso-scallop tool path is feasible in practice.

@&#CONCLUSIONS@&#
In this work, we have generated the five-axis iso-scallop tool path on freeform surfaces via cutting simulation. Here the term tool path refers to a four-dimensional curve, in which the first two dimensions identify the CC points and the last two dimensions identify the tool orientations. The basic idea of this work is simple. Initially, the freeform surface is planted with dense grasses and then a cutter is driven along the current tool path. The grasses that make contact with the cutting edge of the cutter are cut short. As a result, the machining band of the current tool path can be formed. After that, the next tool path can be calculated so that the next and current machining bands share the common boundary. This common boundary is formed by the critical grasses thus is called grass curve. So basically, there are two steps in generating an iso-scallop tool path: generating the grass curve and generating the tool path curve.In the first step, a number of CC points are picked on the current tool path. When the cutter is placed on each CC point, the grass ring can be constructed with a bisection method. The target grasses can be located in the vertical direction current tool path. The obtained target grasses are then fitted in parametric domain into a grass curve. The grass curve is then used for the next tool path generation. In the second step, a number of grasses are picked on the above obtained grass curve. For each grass, the CC ring can be constructed. In each CC ring, the target CC point can also be found in the vertical direction of the grass curve. Then the tool path curve can be generated by fitting the obtained target CC points. With these two fundamental steps, the iso-scallop tool path curves can be generated recursively until the whole surface is covered. An optimization is also proposed to improve the computing efficiency of finding the target grasses/CC points. The proposed iso-scallop tool path generation method in this work is free of the spherical assumption, the coplanar assumption and the cutting shape assumption, so the method is generic and suitable for larger cutters.One inherited problem in the recursive way of generating tool path is that if a tool path is disturbed (maybe by a sudden change of the surface curvature) somewhere, then this disturbance will be passed on to its successors. This phenomenon can be observed from the waved paths in Fig. 21(a). Another problem is in the sampling and fitting process. Now in this work, the sampling grass/CC points are picked evenly in the parametric domain, and the knot vectors of theB-spline fitting process are also picked evenly, which will surely influence the precision of the generated tool path. In the cutting experiment, we have observed vibrations of the machine tool during the machining process. As a result, some tool marks are left on the finished surface. Further research should be done on these aspects.