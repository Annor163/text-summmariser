@&#MAIN-TITLE@&#
A Web platform for the interactive visualization and analysis of the 3D fractal dimension of MRI data

@&#HIGHLIGHTS@&#
We present 3dfd.ujaen.es, a Web platform for computing and analyzing the 3D fractal dimension (3DFD).The first Web platform that allows the users to calculate, visualize, analyze and compare the 3DFD from 3D images (i.e. MRI).Novel technologies are used: CUDA for high-performance computing, and interactive 3D visualization of the images with WebGL.

@&#KEYPHRASES@&#
3D fractal dimension,Box-counting,Skeleton,Magnetic-resonance imaging,WebGL,CUDA,

@&#ABSTRACT@&#
This study presents a Web platform (http://3dfd.ujaen.es) for computing and analyzing the 3D fractal dimension (3DFD) from volumetric data in an efficient, visual and interactive way. The Web platform is specially designed for working with magnetic resonance images (MRIs) of the brain. The program estimates the 3DFD by calculating the 3D box-counting of the entire volume of the brain, and also of its 3D skeleton. All of this is done in a graphical, fast and optimized way by using novel technologies like CUDA and WebGL. The usefulness of the Web platform presented is demonstrated by its application in a case study where an analysis and characterization of groups of 3D MR images is performed for three neurodegenerative diseases: Multiple Sclerosis, Intrauterine Growth Restriction and Alzheimer’s disease. To the best of our knowledge, this is the first Web platform that allows the users to calculate, visualize, analyze and compare the 3DFD from MRI images in the cloud.

@&#INTRODUCTION@&#
A fractal is a geometry object that is self-similar at different scales. Fractals are described by fractal geometry, which was first proposed by Benoit Mandelbrot [1]. The fractal dimension (FD) is a non-integer number that characterizes the morphometric variability of a complex and irregular shape. In recent years, several studies have shown the utility of the FD as a good descriptor of structures in a wide range of scientific fields such as biomedicine [2–9], materials analysis [10–12], environmental science [13,14], and computer graphics [15], among others.When performing the calculation of the FD value, some authors choose to implement an algorithm that fits to their particular case study. This is the case of the papers presented in [7,8] or [16], where a MacOS application that reads directly from FreeSurfer files is developed [17]. But there also exist some general desktop applications that allow the user to calculate the FD. General and wide-use image analysis programs for calculating the 2D FD are available, such as ImageJ[18], and also more specific programs for the FD calculation such as HarFA – Harmonic and Fractal Image Analysis [19]. There are also specific programs designed to calculate the FD. This is the case of the Visual Basic tool announced in [20] and later improved in [21] by Grossu et al., a tool that allows us to estimate the FD of both 2D and 3D images represented as CSV files. Sezer presents in [22] a Java-based software called FRACEK for calculating the fractal dimension of 2D images. In [23], the authors present a Visual C# software for estimating the FD of 2D vector data. Recently, a C++ program designed for calculating the 3DFD of volumes generated from Magnetic Resonance Images (MRI) was presented in [24]. Finally, a so-called fast MatLab script for calculating both 2D and 3DFD is presented in [11].All of these desktop solutions are designed for a specific platform, and access to them could be difficult. Nowadays, web-based applications have become a very interesting solution and are overcoming the classic desktop software development [25]. The software that resides on the web engine presents some advantages over local applications. For example, when a software application is developed for the web, it could be directly accessed and executed by any user around the world, independently of his running OS (cross-platform character) and without installing any special software. Only an internet connection and a web browser for executing the application are needed. This is the main advantage of the web-based applications over the desktop-based ones. In addition, Web applications are centralized in the cloud, in a computer server, so it is guaranteed that the users will always access the newest version of the software, which is a very important feature. For these reasons, in recent years several web-based applications for resolving many kinds of problems have appeared. Focusing on the medical imaging research field, some platforms that allow interacting with and processing medical images have been developed. For example, in [26] an online 3D visor of medical images is presented. Other interesting web-based applications that allow visualizing and processing 2D and 3D medical images have been published in [27,28].But to the best of our knowledge there are no web-based applications designed to calculate the FD of a 2D/3D image yet. Therefore, we focus our efforts on the development of a Web platform that allows the user to calculate and analyze the FD value of magnetic resonance images (MRI), independently of the characteristics of his personal computer. We focus on this class of images because, nowadays, the FD analysis of medical images is the most established and widely used FD applied procedure, but our software could be extended to process other scientific images.The rest of the paper is organized as follows. First, we describe the theoretical basis and the computational methods on which our Web platform is based. Then some concrete implementation details are highlighted due to their interest and novelty. Afterwards, the user interface and main functionalities of the Web platform are outlined. In Section 5 we show a case study in which our Web platform is used for analyzing and characterizing 3D MR brain images related to three neurodegenerative diseases. Finally, we summarize our work in the conclusions section.The main feature of the web-based application presented in this paper is the estimation of the FD value of 3D volumes constructed from MR images. Thus, in this section we describe the basic algorithms and the theoretical basis for our Web application. In addition, the algorithm improvements that have been studied and implemented are outlined.A 3D volume, also known as 3D image or 3D matrix in the literature, is usually generated by stacking several 2D images or slices. This way of stacking images implies that each final (x, y, z) position of the 3D volume corresponds to the value of the pixel with coordinates (x, y) obtained from the 2D image number z. Just as we refer with the word “pixel” to each position of a 2D image, each position of a 3D volume is generally known as a “voxel”. In our Web platform, biomedical images are the expected input data, as previously mentioned, so in this case each 2D image is an MRI slice, and each voxel of the 3D volume stores an integer value between 0 and 255, since pixels of MR images are gray-color codified. Once the 3D matrix which represents the 3D object is generated, there are several algorithms used to display it, process the data or reconstruct the region of interest [29,30].The use of the Graphic Processing Unit (GPU) for improving algorithms and processes with a general purpose (GPGPU) has grown exponentially in recent times. The most common GPGPU programming models are NVIDIA CUDA [31] and Khronos OpenCL [32], CUDA being the more established nowadays. We use CUDA in the Web platform to parallelize and optimize the more time-consuming algorithms involved in 3DFD computation.The CUDA programming model allows the programmer to simultaneously launch thousands of GPU threads. Each thread executes the same function, called a kernel, on a dataset. All threads are organized into several levels. Individual threads are grouped in 1-, 2- or 3-dimensional thread-blocks. Thread-blocks are grouped in a mono- or bi-dimensional grid, and also, only on NVIDIA GF100 GPUs [33], in three-dimensional grids.Each CUDA-capable GPU has several Multi Processors (MPs), each one consisting of some Streaming Processors (SPs) with SIMD (Simple Instruction – Multiple Data) architecture. These processors are responsible for executing all the threads in a parallel way. The CUDA memory architecture is explicitly managed by the programmer. Each device has a large amount of slow Global Memory and some small-size and fast-access memory modules, called Shared Memory. Since the arrival of the GF100 Fermi architecture [33], a real cache memory hierarchy has been introduced. The CUDA organization philosophy allows a high level of scalability because thread-blocks are automatically assigned to idle MPs, independently of the number of existing cores in the device. Therefore, the same compiled program can be executed on different and heterogeneous CUDA capable devices.The FD of a 3D volume (3DFD) can be estimated by applying different methods [34]. One of the most widely used methods is the one known as box-counting calculation [35], a suitable method when working with statistically self-similar models [36]. In general terms, the box-counting algorithm consists of covering the object with a grid of square boxes with an edge size of l, then counting how many of these square boxes are totally or partially filled by the model represented in the 2D image or the 3D volume. Each one of these square boxes has a specific classification depending on whether it is completely, partially or not contained by the model. In the first case (full filled box), the box is labeled as black voxel; in the second case (partially filled box) it will be labeled as a gray voxel; and finally the rest of the boxes are labeled as white voxels. This process of counting and classifying boxes must be repeated for different box edge sizes, and also for different values of l.Since each pixel of the 2D slices takes an integer value between 0 and 255, as previously seen, it is necessary to set a threshold value, u, to determine whether a pixel belongs to the object or whether it corresponds to the background. In other words, it is necessary to binarize the images. Therefore, a voxel with an edge size of l (so l+1 consecutive pixels in the three dimensions from the new voxel) will be labeled as black if all the pixels contained in that voxel have a value equal to or greater than the threshold u. On the contrary, that voxel will be considered as white if all the covered pixels have a value less than u, and the voxel will be labeled as gray in all other cases.A graphical example of the 3D box-counting process is shown in Fig. 1for different edge sizes, where only the gray voxels are represented. Gray voxels correspond to the boundary voxels of the object, i.e. the surface cuts across them, while black voxels represent the inner sections. Logically, the higher the value of the edge box size is, the lower the resolution and the accuracy of the obtained representation are. So we can consider the box-counting algorithm as a Level of Detail (LOD) representation, since the original 3D volume has to be represented with different voxel resolutions, with the aim of counting how many boxes are necessary in each voxelization.So for each voxelization of size l, like the ones shown in Fig. 1, the number of black, gray, and white voxels is counted. From these data, the 3DFD for a concrete type of voxel, either isolated or combined (i.e. black+gray voxels), is calculated through a log–log linear regression in which the X axis represents the inverse of the edge size of the voxel, l, and the Y axis represents the counting, N(l), for the selected type of voxel. In other words, in the X axis each one of the considered voxelization resolutions is represented, and the Y axis shows the number of voxels that have been counted for its corresponding resolution. The final value for the 3DFD corresponds to the slope of the exposed linear regression:3DFD=-lnN(l)lnlAn example of this linear regression is shown in Fig. 2. Once the line is generated, it is necessary to adjust it to obtain the most reliable FD estimation. Thus, the selection of the voxel size range affects the value of the estimated FD. But this selection is still an open issue. The general method consists of discarding the points that fall outside of the linear part, usually the first and the last points of the line. Then the linear portion of the log–log plot that finally determines the FD value is obtained by selecting the point range that maximizes the correlation value [2,11]. In Fig. 2 the red dots correspond to the voxel edge sizes that have been discarded, while the green dots represent the selected values when calculating the final regression line. In this example, the box-counting (Y axis values) is the sum of both gray and black voxels.Some studies have focused on improving the exposed box-counting algorithm in terms of efficiency. One of the more important and widely used algorithms for performing the box-counting calculation is the one developed by Liebotich and Toth [37] and later improved by Hou et al. [38]. This algorithm is especially indicated for binary models, like the segmented MR image and its skeleton representation, as will be seen later. It has a time complexity of O(N*ln(N)). In brief, Hou’s algorithm assigns a unique bit string code to each position of the object, and then these codes are sorted according to their values, low to high. In the last step, the algorithm iteratively applies a mask to the codes and checks the values that are equal, since they correspond to the same box, thus labeling the boxes and obtaining the box-counting.In a previous study we further optimize Hou’s algorithm by developing an implementation designed for its execution on the Graphic Processing Unit (GPU) [39]. That optimized GPU implementation was developed by using NVIDIA CUDA. In this way the running time of the box-counting algorithm is decreased, the new GPU-based algorithm being 28 times faster than the classic mono threaded implementation on CPU, according to our tests. This improvement is especially interesting when performing the FD calculation on huge datasets of images, which is a usual situation. In other work we have also analyzed the performance obtained by using OpenCL in both GPU and multi-core CPUs [40].However, Hou’s box-counting algorithm, both the original algorithm and the one optimized for the GPU, has a limitation: it computes the box-counting only considering those boxes that have a power-of-2 edge size. Therefore, the number of multi-resolution grids of boxes used to cover the voxelized object is lower than the number of grids used with the classic box-counting algorithm, because of the limited number of values that l could take. Therefore, there are fewer points to adjust the regression line and then the FD estimation could not be as accurate as when all the points are available. This fact particularly affects the 3DFD estimation, since 3D models normally have a lower resolution in each axis than 2D images. So, for flexibility reasons and according to our successful previous studies [4–6,24], we include the classic algorithm in our Web platform, which offers sufficient values to estimate the FD in any case. Meanwhile, we are performing different tests and studies to ensure that, with the values obtained with Hou’s box-counting algorithm, the FD analysis provides similar results to our previous and contrasted studies on brain characterization [4–6,24].In general terms, a skeleton is a special representation of an object that captures its topological essence in a simple and very compact way. The skeleton known as curve skeleton[41] is a 1D representation for a 3D object, and it is the most compact and minimal object representation possible. So from here on, and throughout this paper, when we use the term skeleton we refer to the curve skeleton, unless otherwise stated. Skeletons have a wide variety of uses and applications [42]: virtual navigation, virtual endoscopy and animation, segmentation of anatomical structures, medical image registration, matching of 3D objects, morphing, surface reconstruction and mesh repair, among others.In many biomedical studies it is interesting to perform the FD calculation both on the original images and also on their skeleton representation [3–5,43–46]. This is because, by performing the FD analysis on the skeleton a double indicator could be obtained which is related to the hypothesis being analyzed, and it is even possible to obtain some results and conclusions that could not be obtained solely with the FD results associated with the original 3D volume.There are several kinds of algorithms for calculating the 3D skeleton [42]: based on the thinning technique, on the distance fields theory, and also on the Voronoi diagram. In our Web platform we use a thinning algorithm because of its usefulness and properties when working with 3D volumes represented by voxels, not represented by a mesh. Thinning algorithms work by iteratively deleting voxels of the original 3D object until its minimal representation is obtained. There are several thinning algorithms in the literature, but we have implemented into our Web platform the one introduced in [47], one of the most widely referenced and used algorithms presented in the literature.As in the case of the box-counting calculation, to generate the skeleton the original 3D image has to be binarized in order to determine the positions that belong to the object, and consequently the ones that belong to the background. Therefore, a threshold u has to be set and only the pixels of the images that have a value greater or equal to it are considered in the skeletonization process. Once the 3D skeleton is generated, the 3DFD calculation could be performed as outlined in Section 2.3, but starting from the 3D matrix defined by the skeleton itself and without applying a threshold cut, because the threshold is applied at the beginning, when the skeleton is generated.An important problem presented by all the thinning algorithms is their high computational cost; they are very time-consuming processes. For example, according to our tests the 3D skeleton generation of a standard model with a resolution of 256 voxels in each axis always surpasses one minute of running time. In the case of a 3D model with higher resolution, i.e. 512 voxels in each axis, the execution takes around 15min, so the running time has an almost exponential increase as the model resolution is higher. This fact is not acceptable in interactive and dynamic environments such as web applications, where a fast response of the system is necessary. For this reason, in a previous study we optimized Palágyi’s thinning algorithm by developing an implementation designed for its fast and parallel execution on GPU [48,49]. This implementation was also developed by using NVIDIA CUDA, and it has been included in the Web application, ensuring running time rates that allow an interactive and satisfactory user experience.

@&#CONCLUSIONS@&#
In this paper we have presented a novel Web platform for computing and analyzing the 3DFD of magnetic resonance images. We have summarized the computational methods on which our software is based, such as the box-counting computation and the skeleton generation algorithm. The design of the Web platform has been outlined; both the internal layers and the user interface design. In addition, we have shown how the available hardware, in this case two powerful GPUs, has been exploited in order to achieve the maximum performance possible. We have also focused on the interactive 3D visualization of the volumetric data involved in the 3DFD analysis with WebGL, a recent technology that offers several advantages for representing 3D models on the web.As examples of the usefulness and validity of the Web platform, we have presented a case study in which the 3DFD values obtained from several groups of segmented MR images of human brains belonging to healthy controls and Multiple Sclerosis, IUGR and Alzheimer’s disease patients are graphically and numerically compared in an efficient way. In this way we have shown how the Web platform allows us to easily analyze and characterize groups of MR images based on an on-line and interactive computation of the 3DFD.The Web platform is accessible through the URL http://3dfd.ujaen.es.Nowadays, new web-based technologies are being developed with the aim of improving and increasing the computing capabilities of the web browsers. The main example of this is WebCL [61], a new standard under development by the Khronos Group. In general terms, WebCL is a wrapper of the OpenCL computing platform. The final objective with the development of WebCL is to reach a high-performance computing level in web browsers by using the client devices, i.e. multi-core CPUs or GPU. As future work, it would be very interesting to use WebCL to improve the box-counting calculation and its visualization, by joining both WebCL and WebGL technologies in the client machine [62].From a biomedical point of view, our aim is to extend the Web platform by including efficient and interactive automatic and semi-automatic segmentation techniques of MR images and their normalization. In this way, the Web platform will offer the users the whole lifecycle of the 3DFD analysis, from the original MR image, as obtained from the MR scanner, to the graphical analysis of the 3DFD results.A pending task is the formal evaluation of the usability of the Web platform. We plan to use our tool in clinical studies about the application of the 3DFD of MRI in several neurodegenerative diseases. In this context, the feedback of many clinical staff will allow us to evaluate and improve the Web platform usability.