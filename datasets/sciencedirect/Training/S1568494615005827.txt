@&#MAIN-TITLE@&#
Swarm intelligence algorithms for macroscopic traffic flow model validation with automatic assignment of fundamental diagrams

@&#HIGHLIGHTS@&#
Evolutionary and swarm intelligence algorithms are applied to the traffic flow model calibration problem.Algorithms versatility is exploited to replace expert knowledge.Automatic spatial assignment of fundamental diagrams of traffic flow.Proposed solution method is designed to be simulator independent.Particle swarm is the most efficient search method for this problem.

@&#KEYPHRASES@&#
Traffic flow model parameter estimation,Intelligent Transportation Systems,Particle swarm optimisation,Genetic algorithms,Cuckoo Search,

@&#ABSTRACT@&#
This paper is concerned with the problem of macroscopic road traffic flow model calibration and verification. Thoroughly validated models are necessary for both control system design and scenario evaluation purposes. Here, the second order traffic flow model METANET was calibrated and verified using real data.A powerful optimisation problem formulation is proposed for identifying a set of model parameters that makes the model fit to measurements. For the macroscopic traffic flow model validation problem, this set of parameters characterise the aggregate traffic flow features over a road network. In traffic engineering, one of the most important relationships whose parameters need to be determined is the fundamental diagram of traffic, which models the non-linear relationship between vehicular flow and density. Typically, a real network does not exhibit the same traffic flow aggregate behaviour everywhere and different fundamental diagrams are used for covering different network areas. As a result, one of the initial steps of the validation process rests on expert engineering opinion assigning the spatial extension of fundamental diagrams. The proposed optimisation problem formulation allows for automatically determining the number of different fundamental diagrams to be used and their corresponding spatial extension over the road network, simplifying this initial step. Although the optimisation problem suffers from local minima, good solutions which generalise well were obtained.The design of the system used is highly generic and allows for a number of evolutionary and swarm intelligence algorithms to be used. Two UK sites have been used for testing it. Calibration and verification results are discussed in detail. The resulting models are able to capture the dynamics of traffic flow and replicate shockwave propagation.A total of ten different algorithms were considered and compared with respect to their ability to converge to a solution, which remains valid for different sets of data. Particle swarm optimisation (PSO) algorithms have proven to be particularly effective and provide the best results both in terms of speed of convergence and solution generalisation. An interesting result reported is that more recently proposed PSO algorithms were outperformed by older variants, both in terms of speed of convergence and model error minimisation.Traffic modelling is an essential element of traffic planning and management systems. Traffic models are mainly used for evaluation and system design purposes. Intelligent Transportation Systems (ITS) operating in motorway networks require the use of valid models for tasks like traffic prediction, state and travel time estimation, and real time model based predictive control. Automatic incident systems also make use of such models. Irrespective of their purpose, models have to be valid for the specific road network they are used for.This paper is concerned with the problem of macroscopic traffic flow model validation and, hence, microscopic and mesoscopic models are beyond its scope. For a more detailed discussion on modelling approaches, see [1].Macroscopic models describe the traffic flow as a liquid using aggregate variables. At point x on the road and time t, these are the vehicular density ρ(x, t) (veh/km), mean speedv(x,t)(km/h) and flow (or volume) q(x, t) (veh/h). The macroscopic description of traffic along a motorway was introduced in the seminal papers of Lighthill and Whitham [2] and Richards [3], resulting to the LWR model.The LWR model employs the vehicle conservation equation to calculate densities and flows, which reads(1)∂ρ(x,t)∂t+∂q(x,t)∂x=0.In order for Eq. (1) to be solved, the relationship between flow and density must be explicitly considered. In the LWR theory it is given in the form(2)q(x,t)=ρ(x,t)V[ρ(x,t)]where V[ρ(x, t)] (km/h) is an equilibrium relationship between density and mean speed, i.e. the so-called fundamental diagram (FD) of traffic. The FD models the traffic flow's tendency to settle to the equilibrium mean speed V[ρ(x, t)] for a given density level ρ(x, t). The typical shape of the density-flow FD, i.e. the way the quantity (ρ(x, t)V[ρ(x, t)]) changes with respect to ρ(x, t) is shown in Fig. 1. The FD accounts for the fact that until the critical density ρcris observed, the vehicular flow increases with increasing density. The flow is maximised at ρcr, and when the density increases past that level, the number of vehicles contained per unit of length is such that drivers are forced to slow down, reaching to zero speed at jam density level ρmax. Different functional expressions for the FD have been proposed in the literature, see [4–6].Typically, a space and time discretised version of Eq. (1), along with the FD constitute the basic elements of a first order macroscopic traffic flow model [2,3,7–11].Payne-type second order models result from coupling (1) with an empirical equation governing the mean speedv(x,t)dynamics [12]; this equation has the form(3)∂v(x,t)∂t+v(x,t)∂v(x,t)∂x+1ρ(x,t)∂P(x,t)∂x=1τ{V[ρ(x,t)]−v(x,t)}where τ is a relaxation constant and P(x, t) a pressure term, which gives rise to a range of different models [13].Irrespective of the model's order, a number of parameters characterising the aggregate driver-vehicle-infrastructure behaviour are used. For any practical purpose the values assigned to them are based on real data collected from the road network. Using data sets of traffic counts and vehicle speeds, typically obtained by means of inductive loop detectors embedded in the motorway, a rigorous model validation procedure needs to take place, for identifying an optimal set of parameters [14]. The validation process consists of two parts, model calibration and model verification.The calibration phase aims at determining an optimal set of model parameters that minimises the error for a specific data set. Verification is then performed to corroborate the model's accuracy using a different set of data, not used during calibration. Model validation is a difficult procedure due to the sensitivity and the non-linear nature of the traffic flow process. Furthermore, the resulting optimisation problem has numerous local minima [15].Here, the second order model Modéle d’Écoulement de Trafic sur Autoroute (META) [16] as well as its extension to networks, META-NETworks (METANET) [17], is used as a modelling tool. The METANET simulator and its predecessors have been successfully validated for networks of various sizes. A more extensive model validation exercise for the META model was conducted for the Paris ring road in [18]. The validation of the large scale network of the Amsterdam peripheral network is described in [16]. For the modelling of the Paris and Amsterdam sites, the deterministic search algorithm of Box [19] was used. A simplex based algorithm was used by Ngoduy et al. [20] to validate various numerical schemes.In [21] a method calculating the model parameters by comparing the congestion pattern of the data and model output aiming at avoiding incorrect data forms, was used. A cross entropy method is used in [15] to validate the model used in [21] for a 10km section of a UK highway. A comparative study of the first order Cell Transmission Model (CTM) [7,8] and METANET for a motorway in Greece based on the Nelder–Mead algorithm [22] is provided in [23]. The use of a genetic algorithm to validate METANET on a simple site in the UK is reported in [24]. In [25] a METANET model parameter identification algorithm is discussed using data from a 4.65km stretch of a California highway; the original expression used for FD in METANET is replaced with a two-regime model and the resulting optimisation problem is solved using a sequential quadratic programming algorithm.Motivated by the requirements generated for designing autonomic traffic management systems, i.e. systems that exhibit self-* (e.g. self-optimising, self-healing, self-configuring and so forth) properties, the model validation problem's scope was extended to automate elements that traditionally are based on engineering expert opinion [26]. This is one of this paper's contributions. The proposed problem formulation is able to replace expert engineering opinion and judgement by automatically selecting the spatial extension of the application of a FD along with its parameters. This extra requirement increases the problem complexity but removes the need for prior expert knowledge about congestion patterns. Bottleneck identification as used in [27,28] or choosing an arbitrary (based on educated opinion) point for a change in the FD parameter set [16] is not explicitly required. These are left to the optimisation algorithm to deal with, aiming at avoiding over-parametrisation as well. Within this setting, this paper aims at providing the details of mainly particle swarm optimisation (PSO) performance when used for the METANET model validation problem.In this manner many different categories of algorithms have been applied to various engineering problems. An application of differential evolution to constrained combinatorial problems is shown in [29]. A multi-objective genetic algorithm has been used to optimise electrical drives [30]. A gravitational search is conducted to optimise a fuzzy servo controller in [31]. Particle swarm optimisation has been used for reservoir optimisation [32], and hydrothermal scheduling [33].In this paper three classes of algorithms are evaluated, particle swarm optimisation (PSO), genetic algorithm (GA) and Cuckoo Search (CS). The emphasis of this paper is on the particle swarm optimisation and a variety of PSOs are used. The GA used is a simple one and is included as a baseline. The CS algorithm is included because it has been shown to outperform PSO for some problems [34,35].The suggested system has been applied to two UK sites that have their own congestion patterns. The data were obtained from the Highways Agency owned system Motorway Incident Detection and Automated Signalling (MIDAS).The rest of this paper is organised as follows. Section 2 provides an overview of the METANET model. Section 3 provides the optimisation problem formulation. Section 4 provides the used site descriptions. Section 5 is concerned with the details of the algorithms used. Results are provided and discussed in Section 6. Section 7 concludes this paper.The METANET simulator is a discrete form of Payne's model (3) and is able to model arbitrary motorway networks of any topology. A network is represented as a directed graph consisting of nodes and links. With links representing homogeneous road sections, where the number of lanes is a constant, and there is no significant change of curvature or gradient. Furthermore, no traffic sources or sinks (junctions) exist within a link. Nodes connect the links and are used at places where the geometry of the motorway changes or at on-/off-ramp junctions. Each node has at least one incoming and one outgoing link. Traffic enters via origin links and leaves through destination links.Time is discretised globally by a time step T and there are K steps in the time horizon. Each motorway link m is discretised into Nmsegments of equal length Lmas shown in Fig. 2. The traffic variables describing traffic conditions in segment i of link m, at time instant t=kT, k=0, 1, …, K, are: (a) the traffic density ρm,i(k) (veh/km/lane), which represents the number of vehicles in the segment divided by Lmand the link's number of lanes λm; (b) the mean speedvm,i(k)(km/h) representing the mean speed of the vehicles in segment i at time kT; (c) the traffic flow qm,i(k) (veh/h), which is the number of vehicles leaving segment i of link m during interval [kT, (k+1)T], divided by T.By discretising Eqs. (1) and (3)[18,17,36], the discrete time motorway traffic flow model is the following.(4)ρm,i(k+1)=ρm,i(k)+TLmλm[qm,i−1(k)−qm,i(k)](5)qm,i(k)=ρm,i(k)vm,i(k)λm(6)vm,i(k+1)=vm,i(k)+Tτ{V[ρm,i(k)]−vm,i(k)}+TLmvm,i(k)[vm,i−1(k)−vm,i(k)]−νTτLmρm,i+1(k)−ρm,i(k)ρm,i(k)+κwhere ν is an anticipation constant and κ a numerical stability constant; V[ρm,i(k)] is the FD and the functional expression used is the following.(7)V[ρm,i(k)]=vf,m·exp−1αmρm,i(k)ρcr,mαmwhere ρcr,mis the critical density of link m and αma parameter. Parametersvf,m, ρcr,m, αm, define a link's FD and the model validation process aims at identifying their values.In order to account for speed drops due to on-ramp inflow and merging phenomena the term−δTqμ(k)vm,1(k)/(Lmλm(ρm,1(k)+κ))is added at the right hand side of (6), where δ is a constant parameter, μ the merging link and m is the leaving link. This term is included only when the speed equation is applied to the first segment of the downstream link m. Speed decreases due to weaving at locations where the total number of lanes is reduced is accounted for by adding the term−ϕTΔλρm,Nm(k)vm,Nm(k)2/(Lmλmρcr,m)to the right hand side of (6), where Δλ is the reduction in the number of lanes and ϕ is another parameter. This term is only applied to the last segment of the link upstream the lane drop.Constraints are imposed on the mean speed to ensure that it cannot be lower than a network-wide minimum speedvminand on the density to ensure it is not larger than a maximum ρmax. This means that after executing the calculation of Eqs. (4) and (6), the following rules are applied(8)ρm,i(k+1):=min{ρm,i(k+1),ρmax}(9)vm,i(k+1):=max{vm,i(k+1),vmin}METANET employs a simple queuing model for collecting the demand during period k at origin o, and subsequently forwarding it into the mainstream. This is used for the calculation of the origin link's o outflow qo(k) into the motorway. However, for the model validation problem, qo(k) is a direct measurement from the loop detectors. Hence, the queueing model is bypassed, since the measurement is directly fed into the model and there is no need for it.In order for the speed equation to be applied at every exit location s, the density trajectories ρs(k) over the entire time horizon are provided as boundary conditions.Finally, a node model is used to assign flows at motorway junctions. Let Inand Ondenote the set of incoming and outgoing links to and from, respectively, node n. Then the sum of all flow entering the node n during time period k, Qn(k) is given by(10)Qn(k)=∑μ∈Inqμ,Nμ(k)∀n.The turning rateβnm(k)is defined as the percentage of Qn(k) that leaves through out link m∈Onduring period k. This means that qm,0(k) required by Eq. (4) when i=1 is calculated as(11)qm,0(k)=βnm(k)·Qn(k)∀m∈On.For a full description of the METANET, see [17] or Appendix A of [36]. By substituting (5), (10), (11) into (4); and the calculation of velocities and densities acting over nodes as in [17,36] into (6) the model can be expressed as the following discrete dynamic state-space system(12)x(k+1)=f[x(k),d(k);z].The state vector consists of the density and mean speed of every link segment, i.e.(13)x=[ρ1,1v1,1…ρ1,N1v1,N1…ρ1,M1v1,1…ρ1,NM1v1,NM1]Twhere M1 is the number of motorway links in the network.The disturbance vector d consists of (a) the inflows qoentering the system from entry points (origin links) like on-ramps or the upstream main site boundary and optionally the speedsvoat these locations; (b) the densities ρsat the exit locations (destination links) like off-ramps or downstream main site boundary; and (c) the turning rates at every split junction. These quantities are organised into vector(14)d=[q1v1…qM2vM2ρ1…ρM3β1μ1βM4μM4]Twhere M2 is the number of origins, M3 the number of destinations, M4 the number of split junctions and μn∈Onis the index of the destination link sending flow out of the network at split junction node n.Vector z consists of the model parameters as encountered in the dynamic density (4), speed (6) and fundamental diagram (7) equations. Hence, z includes the following network-wide global parameters: the maximum density ρmax; the minimum speedvmin; and the mean speed equation (6) parameters τ, ν, ϕ, δ and κ. It also contains parameters related to the fundamental diagram:vf,α,ρcr.From a known initial state x0 and known disturbance trajectories d(k), k=1, …, K, a forward integration of (12) results to a full profile of the traffic conditions in the network over the same time horizon. When x0 and d are given as measurements, the model output can be compared with measurements taken from locations inside the motorway. The model accuracy in this case depends on the selection of the parameter vector z. A set of measurementsxˆfrom a number of locations along the motorway, can be used for comparison between reality and model output. The resulting error minimisation problem takes the form(15)minzJ[x(k),xˆ(k)]subject to(16)x(k+1)=f[x(k),d(k);z],x(0)=x0(17)zmin≤z≤zmaxwhereJ[x(k),xˆ(k)]is a suitable error function and zmin and zmax are the lower and upper bounds, respectively, of z's elements. Hence, the objective function's dependence on the decision variables z is implicitly considered through the constraints (16). The evaluation of J for a particular feasible value of z requires the forward integration of (16) given as input the measured x0 and d(k). After this integration, i.e. a simulation run, the model state trajectories are used for obtaining J's value.As mentioned earlier the parameter vector z consists of two parts, a set of network-wide parameters and those pertaining to the fundamental diagram. Typically, expert engineering opinion is used for pre-setting the number of distinct fundamental diagrams that are going to be used and the spatial extension of their application. In other words, prior to the solution of the optimisation (15)–(17), there has to be a decision based on knowledge of the network's congestion dynamics, e.g. bottleneck location, related to the number of FDs to be used and for each one the list of motorway links using them. During the validation process, these two features change only manually and it is based on their specification that problem (15)–(17) is solved. Hence, ifNˆis the number of FDs used, each ones parameters ρcr, α andvfneed to be included in z, which then takes the form(18)z=[τκνρmaxvminδϕvf1α1ρcr1…vfNˆαNˆρcrNˆ]T.Notice the superscript number on the FD parameters is the index of the FD and is different from the numbers on the same symbols appearing as subscripts in the modelling section; the latter refer to link and segment indices. WhenNˆ=1then a single fundamental diagram is used for the site where the model is calibrated. IfNˆ=M1then every link has its own FD. From a modelling perspective the former is preferred to the latter, since having a unique FD for every link is a case of over-parametrisation. However, the different physical properties of the road network resulting to different aggregate traffic behaviour due to narrower lanes, upgrades, downgrades, changes of curvature, bottlenecks, junction merging and merge lane length, cannot be overlooked. Hence, there is a natural need for using a minimal number of different FDs. In the approach suggested here, these decisions become part of the solution of problem (15)–(17).This is done firstly by introducing into z a new FD parameter lℓ, which is defined as the number of links FD ℓ is applied to; secondly by using a simple rule for mapping FD onto the list of motorway links. The revised vector of model parameters is now(19)z=[τκνρmaxvminδϕvf1α1ρcr1l1…vfNˆαNˆρcrNˆlNˆ]Twhere lℓ∈[0, M1+1],ℓ=1,…,Nˆ.The mapping of FD to motorway links for the unidirectional flow sites considered here is a simple rule that assigns the first FD to the most upstream motorway link, which conventionally is assigned the number 1. Subsequently, the remaining FDs are assigned to links in an iterative manner. This rule is applied for a given z prior to the forward integration of (16) for the evaluation of the corresponding value of J. Hence, when the METANET executable is invoked, the motorway links have been assigned to FDs.In order to describe this rule when applied to a particular solution z, letAz={1,2,…,Nˆ}denote the set of FD indices in ascending order. LetBzℓandEzℓdenote the starting and the end link index, respectively for which FD ℓ is applied. LetFz⊆Azdenote the ordered set of FD indices with non-zero extension, i.e.(20)Fz={ℓ∈Az:lℓ>0}.Let us defineDFz(j)as the mapping that returns the list element at position j in the ordered setFz. Then the following rule is applied for assigning FDs to motorway links.(21)initialise withBDFz(1)=1EDFz(1)=lDFz(1)and then iteratively forj=2,…,|Fz|BDFz(j)=EDFz(j−1)+1EDFz(j)=BDFz(j)+lDFz(j).Subsequently, the triplets (ℓ, Bℓ, Eℓ),ℓ=1,…,Nˆare used to configure METANET's input file describing network configuration and link features (an ASCII file) using a simple script. Because the lℓ are considered as continuous variables in the optimisation problem, in the final mapping lℓ:=⌊lℓ⌋.The solution of optimisation problem (15)–(17), (21) provides an optimal set of model parameters and the optimal number and spatial extension of FD to be used. The model error minimisation as well as the preference towards minimum use of FDs are incorporated into the structure of the objective function (15), which depends on the available loop detector measurements.Let us assume that there are M5 loop detectors on the motorway providing flow and speed measurements for segment i of link m. The measurements vectorxˆto be used in (15) takes the form(22)xˆ=[y1,qy1,v…yM5,qyM5,v]Twhere yj,qandyj,vare the flow and speed measurements, respectively, from sensor j, j=1, …, M5. A global list is retained assigning each sensor to the corresponding motorway link it belongs to. Hence, if sensor j is installed at segment ijof link mj, then the discrepancy between yj,q(k) andqmj,ij(k), andyj,v(k)andvmj,ij(k)gives a measure of the model's accuracy.This comparison needs to be performed properly along the time dimension. Typically, the sensors’ measurement sample time Tsis larger than the model sample time T. For example, for the data used here, Ts=60s whereas T=8s. The assumption followed is that the real flow and speed during the minute the measurements were taken, are constant. Hence, for each model time period k the measurement sample period it belongs to is identified and the model outputs are compared to the same set of measurements.Given the measurements yj,q(k) andyj,v(k)the model's flow square errorJj,q(x,xˆ)from sensor j is given by(23)Jj,q(x,xˆ)=∑k=1K[yj,q(k)−qmj,ij(k)]2and the speed square error from(24)Jj,v(x,xˆ)=∑k=1K[yj,v(k)−vmj,ij(k)]2.Based on them, the weighted total error Jeis(25)Je(x,xˆ)=∑j=1M5[AqJj,q(x,xˆ)+AvJj,v(x,xˆ)]where AqandAvare scaling factors accounting for the fact that the flow and speed have different orders of magnitude; under stationary conditions, the flow may vary at 5000veh/h and the speed at 80km/h. The weights’ values used here are Aq=0.001 andAv=1and they are those reported in [14] where a similar error function is used. As has been observed in [23], the flow and speed error terms are not antagonistic in the sense that if the model mean speed is correct then the flow will also be correct by virtue of the density equation, which accounts for the vehicle conservation, hence, the Aq=0 in the objective function in [23].In order to achieve the automatic assignment of FDs by taking advantage the extension to z given by (19), the following penalty term Jp(z) is included in the total objective function.(26)Jp(z)=∑ℓ=1Nˆ−1∑r=ℓ+1Nˆ[wv(vfℓ−vfr)2+wρ(ρcrℓ−ρcrr)2+wα(αℓ−αr)2]wherewv,wρandwαare weighting parameters penalising the variance of FD parameters accounting for variable magnitude and they are set to 0.4, 0.5 and 10.0, respectively. The problem's objective function (15) takes the form(27)J(x,xˆ,z)=Je(x,xˆ)+wpJp(z)wherewpa weighting parameter applied on the total penalty term. The weightwpdepends on the problem size and properties, but a default value of 200 is used here, which is appropriate for the size of the sites considered. The inclusion of Jpin (27) aims at driving the minimisation algorithm towards solutions that minimise the distance between FD, hence, resulting implicitly to a minimum number of different FD in the optimal solution. This process results to what is termed here as Automatic Assignment of Fundamental Diagrams (AAFD).The resulting optimisation problem (15)–(17), (21), (27) is not trivial to solve and traditional gradient based approaches cannot be used. Due to their ability to efficiently search the space of solutions and find global minima, evolutionary and swarm intelligence algorithms are particularly suitable for this task, especially since there is no strong real-time computation requirement. There is ample time for the model validation, as once calibrated it remains valid for a sufficient amount of time. The data ageing problem does occur, but at considerably larger time scales compared to the computation time required to converge to a good solution.The overall system structure is depicted in Fig. 3. A simple interface allows the population based optimisation algorithm to automatically set up all the necessary input files for METANET to run using any vector z in view of rule (21). The fitness value (27) is calculated based on the output files created by METANET. Notice that in the suggested approach, the METANET simulator is used as a black box. As a consequence, the discretisation scheme followed does not depend on the sensors’ location. Once the algorithm provides a solution, it is verified using data that were not used during calibration.In total ten different optimisation algorithms are considered and their results are compared here. A brief overview is provided in Section 5.The first site considered here is a motorway stretch near Heathrow Airport and consists of the eastbound M4 linking London to Reading and Bristol. This site serves large traffic volumes due to the connection with London's M25 orbital and parts of Heathrow Airport. The modelled motorway stretch covers a length of 7.8km and the METANET model consists of five links as shown in Fig. 4.The model calibration was carried out using data from Monday 8th, 15th and 22nd of February 2010. To test the AAFD, the maximum number of FDs allowed to be used is set to be equal to the number of links, i.e.Nˆ=5(the maximum possible) resulting to a 27-dimensional optimisation problem.The second site is the Northbound M1 motorway as it enters Sheffield. It is larger than the Heathrow site extending over 21.9km and the METANET model consists of 20 links, Fig. 5. Typically, recurrent congestion has the form of a shock wave originating at the centre. Usually it occurs at the end of the link 6 where the off-ramp of Junction 33 is short and unable to cope with the demand of exiting flow, resulting to congestion backing up into the mainstream.For this site, data was used from Monday the 1st, 8th and 15th of June 2009. Again, the number of possible different FDs allowed to be used is set equal to the maximum, i.e.Nˆ=10, resulting to a 47-dimensional optimisation problem.The MIDAS data are collected from loop detectors installed on the motorways and the on-/off-ramps. They provide flow, speed, and occupancy measurements per lane averaged over 1min intervals. It is well known thatvm,iin Eq. (5) is the space mean speed, which for a small area centred around a loop detector is estimated by the harmonic mean of individual vehicle speeds passing over the detector. A simple calculation allows the estimation of the space mean speed for the whole cross-section. There is no need for any other transformations like those used in [21].The provided data are used to create the required model inputs, i.e. the initial state vector of Eq. (13)x(0), d as defined in Eq. (14) as well as for populating the measurements’ vectorxˆas defined in Eq. (22).Examples of these data are shown in Fig. 6. The turning rate trajectory for Heathrow's off-ramp at junction J4b. is shown in (a). The density profile at the most downstream site boundary is shown in (b). The inflow and speed profiles, also used as boundary conditions, at the motorway entrance of the Heathrow site are shown in (c). With the exception of the main motorway entrances, the speed is not given for on-ramps as the measured data may be of vehicles that are still accelerating and have not yet adjusted their speed to that of the main carriageway.The system designed and developed for this work has been based on the METANET traffic simulator. The optimisation problem formulation in conjunction with population based search methods result in a very flexible and versatile system where the search algorithms and the simulator executable can be replaced with other functionally similar components without much effort, as long as the model parameter vector is defined appropriately. As discussed in Section 3 the formulated optimisation problem is concerned with minimising (27) subject to (15)–(17) and (21) by varying the parameter vector z(19). As shown in Fig. 3, the objective function value calculation is treated as a black box by invoking a call to the simulator executable. All ten algorithms discussed here are based on the same procedure for objective function value evaluation. The search algorithms used adjust z and extract x(k), k=1, 2…K, from the simulator output, and manipulate the population of solutions according to their own specific rules. A brief overview of those algorithms is given next.The nature of optimisation problem dictates the use of derivative-free population based algorithms for solving it. The first choice in this study was the implementation of a simple and straightforward GA based on a real-coding scheme [37], where each member of the population is a parameter vector z. The GA used here is based on [38] and employs three key operators, selection, crossover and mutation.At every iteration individuals that are far away from the current optimum are disregarded by use of a sigma truncation scheme [39]. In the selection operation solutions are drawn from this reduced set by use of remainder stochastic sampling without replacement [39]. This method is used to create a mating pool of equal size to the population. Solutions within the mating pool are paired randomly and passed to the crossover operation.For each pair of solutions in the mating pool there is probability of crossover occurring. If crossover occurs then the two parent solutions are combined to create child solutions that are passed to the next generation. If crossover does not occur then the parents are passed to the next generation. Various operators have been proposed for the crossover, in this algorithm single point, mask, whole arithmetical and heuristic crossover are investigated, see [38] for details.Once crossover is complete each solution has a probability to mutate. If a solution mutates it is adjusted in accordance to the uniform or non-uniform mutation operator [38]. The mutation scheme to be used is selected randomly with the methods weighted equally.Trials runs were done and the probability of mutation was set at 0.7 and the probability of mutation at 0.05. These values were selected as they allowed for a diverse range of solutions to be maintained without disrupting convergence.The initial results revealed that the AAFD is possible through the proposed problem formulation. Having verified the idea, a brief investigation was conducted for evaluating different GA crossover operators. In [40] a method is proposed that uses a variety of crossover functions to increase the GA's ability to search the solution space effectively.Fig. 7depicts the evolution of the objective function against the number of function evaluations required by the GA for the Heathrow site for the different crossover schemes as well as a combination of all the investigated operators. The best results were obtained when real coded operators are used, arithmetical and heuristic crossover. Single point and mask crossover perform the worst and a combination of all schemes did not improve convergence. Therefore, further investigations will use a GA using just the arithmetical crossover operator.PSO [41,42] algorithms employ the notion of particles for searching the Γ dimensional solution spaceC⊂ℝΓhaving knowledge of the best previous solutions found by themselves and by other particles in their neighbourhood. This information is used to update a velocity vector governing each particles’ new position resulting to a flock converging towards the current best solution and evaluating the objective function at points along its flight path. An inertia weight [43] allows for the particles’ velocity to have a momentum resulting to overshooting over the current optimum and explore more of the solution space.Each particle ι is characterised by its position zι∈C that defines a solution of the problem, and its velocityθι∈ℝΓ. At iteration ξ particle ι is at positionzιξ=[zι,1ξ,zι,2ξ,…,zι,Γξ]within C and has directional velocityθιξ=[θι,1ξ,θι,2ξ,…,θι,Γξ]. Particle ι's directional velocities and positions are updated according to the rule(28)θι,γξ+1=ωθι,γξ+c1r1[πι,γξ−zι,γξ]+c2r2[zhι,γξ−zι,γξ](29)zι,γξ+1=zι,γξ+θι,γξ+1where ω is the inertia weight, c1, c2 the acceleration coefficients, r1, r2 are random numbers in the domain [0, 1],πιξ=[πι,1ξ,πι,2ξ,…,πι,Γξ]is the best position previously found by particle ι until iteration ξ and hιis the index of the best particle within the neighbourhood of particle ι.PSO algorithms use different topologies for determining a particle's neighbourhood. In Global-PSO [43] (GPSO, also known as gbest PSO [44]) all of the particles communicate with each other, hence hιis the best particle within the swarm and returns the same index for all particles ι. Local-PSO (LPSO, also known as lbest PSO [44]) [45] uses a ring structure where each particle has two neighbours, for convenience the neighbours are set to those as in the computer memory array list. Hence, hιis best current point of particle ι or its two neighbours in memory.In Adaptive-PSO-09 (APSO-09; the 09 indicates year of publication) [46] the parameters ω, c1, c2, which are constant in LPSO and GPSO, are changed in a controlled manner. The change is based on the state of search and iteration number. Fuzzy logic based Evolutionary State Estimation (ESE) is applied to ascertain the state of the search resulting to the appropriate parameters’ adjustments. An added feature helping to avoid premature convergence is to have an Elitist Learning Strategy (ELS) mutating the best solution in an attempt to encourage the occurrence of jumping out a local minimum [46].Two other independent versions of APSO where proposed in subsequent papers, APSO-12 [33] and APSO-14 [32]. In APSO-12 the parametersw, c1, c2 are changed following a simple rule, based on current and the maximum number of iterations. A slightly more complex procedure is used in APSO-14, whereby metrics estimating the convergence speed and population diversity are used to adapt the inertia weightw.The Chaos-Enhanced-Accelerated PSO (CEPSO) algorithm proposed in [47] is also considered here. In this variant, the velocity Eq. (28) is dropped and a revised version of (29) is used. The algorithm's parameters change over time following a chaotic mapping in order to have a robust convergence strategy. The convergence of this simplified PSO has been proved, although it may suffer in highly non-linear multi-modal problems [48]. Here, the sinusoidal chaotic mapping proposed in [47] is used for updating the position equation parameters.The final PSO variant investigated is the High Exploration PSO (HEPSO) [49], which combines elements of artificial bee colony and GA. In this case, the inertia weight is adapted in the same manner as APSO-09 and the acceleration coefficients are updated using the same method as APSO-12. The main method for updating the particles’ position is based on a GA crossover technique as described in [49]; at the initial stages, however, a particle's position may be updated based on an artificial bee colony algorithm.Cuckoo Search [50] utilises Lévy flights to update a population of solutions, referred to as nests. Each nest is a version of the parameter vector z that needs to be identified. At each iteration new solutions (eggs) are created for each nest. An egg is generated by perturbing every dimension of the nest solution by adding a scalar (characteristic step length) multiplied by a random number drawn from the Lévy distribution. If egg is an improvement over the solution at a randomly chosen nest then that nests solution is replaced by the egg, otherwise the egg is discarded. At the end of every iteration a proportion of the worst nests are abandoned and replaced with new ones by a random walk. This simple algorithm has few parameters, the number of nests (population), the proportion of nests to abandon and the characteristic step length. For a full description of CS see [50].This simplicity of CS may result in an inadequate search of the solution space [35]. In order to address this, a Modified Cuckoo Search (MCS) [35] was proposed, with two adjustments to the original algorithm. First, the characteristic length is now dynamic and reduced over iterations allowing for a gradually refined search. The second modification is to allow for information to be shared between current solutions, which is not present in the original CS. This is done by selecting a fraction of the best nests to form a pool from which new nests are spawned. Two nests are selected from the pool and a new nest is generated along the line connecting them. The nest is placed on this line using the inverse of the golden ratio(1+5)/2so that it is closer to the fitter solution. The new nest replaces the current worst nest in the search. For a full overview of the MCS see [35].All algorithms were initialised using Latin hypercubes. Each variable is assumed to have a uniform distribution within its range, as defined in Table 1. The limits in the table are simply handled by moving solutions that move outside the domain to the boundary. For the PSO algorithms the velocity component for dimensions that are adjusted in this manner is multiplied by −0.5. This prevents the solution from attempting to leave the space on the next iteration. For the PSO and GA optimisation algorithms the population size was set to 30. For CS and MCS a population of 25 was used as this is what is used in [50]. The GA parameters were previously discussed and the probability of crossover is set at 0.7 and the mutation probability at 0.05. In CS and MCS the percentage of nests to be abandoned in each iteration was set equal to 25% and 75%, as suggested in [34,35]. For CS the characteristic step length was set to 1/100 of the variable search range as shown in Table 1 as it is in [50]. For MCS the characteristic length is the same as proposed in [35]. The parameters for the various PSOs is typically inherited from the papers they were proposed in, and shown in Table 2. In the table ξ is the search iteration number and Ξ is the maximum number of iterations which was set at 5000. f is defined in [46,49] is the evolutionary factor that defines the spread of particles relative to the current optimum. For CEPSO the sinusoidal map which performed best in the benchmarks in [47] is used for the chaotic map. The probabilities for the artificial bee colony and GA operators used by HEPSO are the same as those in [49]. For GPSO and LPSO better results were obtained by using the parameter values suggested in [51] rather than the typically used c1=c2=2.0.

@&#INTRODUCTION@&#


@&#CONCLUSIONS@&#
This paper has presented a study on the application of population based optimisation methods to the problem of macroscopic traffic flow model calibration and verification. The suggested problem formulation treats the traffic simulator as a black box and therefore the METANET program used can easily be replaced by another executable. The network's spatial and temporal discretisation is model dependent and does not depend on the location of the sensors. A simple geographic mapping is sufficient for the followed approach to deliver excellent solutions given an appropriate algorithm.Furthermore, the results demonstrate the feasibility of achieving AAFD through the suggested problem formulation. This way, expert engineering opinion is removed from the calibration effort. It has been shown that the derived solutions are able to detect the capacity pattern of a particular network, although some cautious analysis needs to take place. These benefits have become possible to be realised thanks to the nature of the optimisation algorithms used.Ten different algorithms have been implemented and evaluated in this paper. A simple GA acting as baseline, two Cuckoo Search variants and seven PSO algorithms. It is clear that the PSO family outperforms the rest. Surprisingly, one of the most efficient PSO algorithms is LPSO, which manages to converge to very good solutions for the stand alone calibration problem faster than more recently proposed PSO variants. However, it is the solutions provided by HEPSO that generalise better for the particular verification problem. The reasons for this result are unclear and are subject to further investigation.Future research will also focus on investigating different ways of incorporating the generalisation property of a solution directly into the problem formulation. An automatic way of identifying appropriate values for the weighting parameters in the objective function is also something that needs further development. In fact, the suggested problem formulation implies a multi-objective problem, aiming concurrently at error minimisation, FD number and parameter variance minimisation, and maximum optimal solution generalisation. Explicit multiobjective optimisation methods can provide an alternative approach to the one adopted here. A learning module able to reason about the quality of data used for calibration and the solution obtained is another viable research direction.The overall objective is a system that combines modelling, optimisation and learning capabilities to automate the process of delivering relevant and up to date model parameter sets with minimum interference from the operator.