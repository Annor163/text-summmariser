@&#MAIN-TITLE@&#
A new mathematical programming formulation for the Single-Picker Routing Problem

@&#HIGHLIGHTS@&#
We define and consider the Single-Picker Routing Problem in a block layout.We suggest a new mathematical programming formulation for this problem which takes into account the characteristics of optimal routes in a warehouse.The size of the resulting formulation is independent of the number of pick locations.We compare the proposed formulation to Steiner and standard TSP formulations in terms of number of variables and constraints.We conduct numerical experiments in order to compare the computing times required for solving the model formulations.

@&#KEYPHRASES@&#
Traveling Salesman,Order picking,Picker Routing,

@&#ABSTRACT@&#
The Single-Picker Routing Problem deals with the determination of the sequence according to which article locations have to be visited in a distribution warehouse and the identification of the corresponding paths which have to be traveled by human operators (order pickers) in order to collect a set of items requested by internal or external customers. The Single-Picker Routing Problem (SPRP) represents a special case of the classic Traveling Salesman Problem (TSP) and, therefore, can also be modeled as a TSP. Standard TSP formulations applied to the SPRP, however, neglect that in distribution warehouses article locations are arranged in a specifically structured way. When arranged according to a block layout, articles are located in parallel picking aisles, and order pickers can only change over to another picking aisle at certain positions by means of so-called cross aisles. In this paper, for the first time a mathematical programming formulation is proposed which takes into account this specific property. By means of extensive numerical experiments it is shown that the proposed formulation is superior to standard TSP formulations.

@&#INTRODUCTION@&#
The Traveling Salesman Problem (TSP) is one of the most extensively studied problems in combinatorial optimization (Rego, Gamboa, Glover, & Osterman, 2011). It can be described as the problem of finding a least-weight Hamiltonian cycle (in short: a tour) in a complete edge-weighted graph (Glover & Punnen, 1997). The TSP arises in many different practical contexts. It is of prime importance for practical applications in engineering, management, health care and many other areas. For detailed reviews of applications of the TSP in practice we refer to Lenstra and Rinnooy Kan (1975), Matai, Singh, and Mittal (2010) and Filip and Otakar (2011).In this paper, we will deal with an application of the TSP that arises in distribution warehouse management. As for its core function, order picking, items have to be retrieved from the warehouse in order to satisfy a given demand from customers (Petersen & Schmenner, 1999; Wäscher, 2004). In picker-to-part systems, human operators (order pickers) travel through the warehouse, collecting the requested items at their storage locations. This gives rise to the so-called Single-Picker Routing Problem (SPRP) which includes the determination of the sequence in which the locations have to be visited. It can be interpreted as a special case of the (classic) TSP or the Steiner TSP (Burkard, Deneko, van der Veen, & Woeginger, 1998).For the (classic) TSP several mathematical programming formulations have been proposed in the literature (Padberg & Sung, 1991). These formulations and also formulations for the Steiner TSP, however, seem not to be appropriate for the SPRP since they ignore the special structure of the latter. In this paper, the first mathematical formulation for the SPRP will be introduced that takes into account specific properties of optimal solutions of this problem. In comparison to the more general modeling approaches mentioned above, the proposed formulation results in a substantial reduction of the number of variables and constraints. In particular, it will be shown that the size of the formulation is independent of the number of locations where items have to be picked from. By means of extensive numerical experiments it will be demonstrated that the proposed formulation for the SPRP is superior to standard TSP and Steiner TSP formulations.The remainder of this paper is organized as follows: In the following section we introduce the SPRP and review the related literature. In Section 3, we present three well-known general mathematical programming formulations for the TSP as well as a formulation for the Steiner TSP provided by Letchford, Nasiri, and Theis (2013). Since the size of the models will be an important criterion for the analysis and evaluation of the different formulations, we concentrate on compact formulations for the TSP here, i.e. formulations which only require a polynomial number of variables and constraints. In Section 4, the central part of this paper, we develop the newly proposed formulation for the SPRP. First, we describe a graph and its construction on which the formulation is based. Then we represent the graph in a mathematical programming model and exemplify its core elements. In order to analyze and evaluate the different formulations, extensive numerical experiments have been carried out in which a wide range of problem instances have been solved by a state-of-the-art commercial IP solver. The design of the experiments and the results obtained from them are presented in Section 5.For the sake of simplicity of exposition, we restrain the presentation of the newly-proposed model in Section 4 and the numerical experiments in Section 5 to the so-called single-block layout which represents a standard arrangement of storage locations in distribution warehouses. In Section 6, we extend our view and demonstrate how the graph and the resulting model formulation can be modified in order to represent more complex layouts and other aspects of order picking encountered in practice. In Section 7, the paper concludes with a summary and an outlook on future research areas. An Appendix includes a complete and detailed model formulation for the SPRP.In picker-to-part order picking systems, the arrangement of storage locations typically follows a block layout (Roodbergen, 2001) in which picking aisles run in parallel to each other. Articles are stored in and picked from racks on both sides of these picking aisles. Cross aisles can be used to proceed from one picking aisle to another. They do not contain any storage locations. A section between two adjacent cross aisles establishes a so-called block. In the following, we will focus on a single-block layout, i.e. only two cross aisles exist, one at the front and one at the rear of the warehouse (see Fig. 1).The black rectangles in Fig. 1 give an example of locations from which items have to be collected (pick locations) in order to satisfy a certain demand from (external or internal) customers. This is done by a so-called order picker, a human operator who completes a tour through the warehouse, i.e. he or she starts from a depot, proceeds to the pick locations, retrieves the requested items, and finally returns to the depot where the picked items are deposited.Due to the high proportion of time-consuming manual tasks, order picking is looked upon as the most labor cost-intensive warehouse function (Tompkins, White, Bozer, & Tanchoco, 2010). Consequently, the minimization of picking times is of vital importance for the efficient control of picking operations. The total order picking time, i.e. the time spent by an order picker to collect all items of a picking order, can be divided into (Tompkins et al., 2010) the setup time (the time for preparing the tour through the warehouse), the travel time (the time needed to travel to, from, and between the pick locations), the search time (the time needed at the article locations for the identification of the items that have to be retrieved), and the pick time (the time actually needed for retrieving the items from the respective article locations). Among these components, the travel time consumes the major proportion of the total order picking time. It also represents the only variable part while the remaining components (setup time, search time, pick times) can be considered to be constants (Bozer & Kile, 2008; Henn, Koch, Dörner, Strauss, & Wäscher, 2010). The travel time is determined by the total length of the picker tour (Jarvis & McDowell, 1991) which, again, is dependent on the sequence according to which the items have to be picked. Assuming that the order picker moves at a constant velocity, the minimization of the total length of the picker tour becomes equivalent to the minimization of the travel time. Therefore, the SPRP can be defined as follows: Given a set of items to be picked from known storage locations, in which sequence should the locations be visited such that the total length of the corresponding picker tour is minimized?The SPRP can easily be interpreted as a TSP in which the vertices of the corresponding graph are defined by the location of the depot and the locations of the items to be picked. Therefore, general TSP formulations may also be used to model the SPRP. The first mathematical programming formulation for the TSP can be attributed to Dantzig, Fulkerson, and Johnson (1954). It includes one binary variable per edge indicating whether an edge is contained in the tour or not. However, this formulation requires, like several other formulations (Gouveia & Pires, 2001), an exponential number of constraints.For an explicit representation of large TSPs, compact formulations appear to be more appropriate which only require a polynomial number of variables and constraints. A variety of such formulations have been proposed in the literature (Öncan, Altinel, & Laporte, 2009), of which the formulation of Miller, Tucker, and Zemlin (1960), the single-commodity flow formulation of Gavish and Graves (1978) and the multi-commodity flow formulation of Claus (1984) probably are the most prominent ones. They will be explained in greater detail in Section 3, since we will compare our modeling approach to these formulations.Burkard et al. (1998) pointed out that the SPRP can also be formulated as a Steiner TSP, which can be defined as follows: LetG=(V,E)be a graph with a set of vertices V and a set of edges E. Furthermore, let a sequencev1,e1,v2,…,vk,ek,vk+1(vi∈ V,ei=(vi,vi+1),i=1,…,k,k ≥ 0) with ei≠ ejfor i ≠ j andv1=vk+1be called a closed walk. Let P be a subset of V. The elements of V∖P are called Steiner points. A Steiner tour is then defined as a closed walk in which each vertex of P is visited at least once. The Steiner points do not have to be visited. Then the Steiner TSP consists of finding a Steiner tour of minimal length within G (Burkard et al., 1998).As for the SPRP (see Fig. 2), the set P is composed of the pick locations and the depot (black vertices), and the Steiner points are the intersections between the picking aisles and the cross aisles (white vertices). The distance between any pair of vertices is the length of the shortest path between the two vertices. By definition, a Steiner tour then has to include the depot and the storage locations of all items to be picked. Visiting these locations more than once is permitted. Multiple visits may occur, e.g., when a picking aisle is entered and left via the same cross aisle. On the other hand, visits of some of the white vertices may be skipped because two points exist for each picking aisle where an aisle can be entered or left, and it is possible to use one vertex twice and skip the other one.Letchford et al. (2013) developed three compact formulations for the Steiner TSP. These formulations are advantageous in comparison to general TSP formulations if the number of Steiner points is large compared to the total number of vertices (Letchford et al., 2013). For problem instances in which less than 100 vertices (including both Steiner points and locations to be visited) have to be considered, the authors proposed the application of a Steiner TSP formulation which is derived from the multi-commodity flow model of Claus (1984). Since instances of the SPRP from practice will usually result in a Steiner TSP with less than 100 vertices, we will focus on this formulation. It will be explained in greater detail in Section 3.The SPRP in a single-block or a two-block layout can be solved efficiently by problem-specific solution methods. Ratliff and Rosenthal (1983) introduced an optimal algorithm for the single-block case which is based on dynamic programming and solves the problem inO(m+n)time, where m is the number of picking aisles and n is the number of pick locations. Roodbergen and de Koster (2001a) modified the algorithm for the two-block case. However, it is very difficult to further extend this algorithm to layouts with three or more blocks and up to now no efficient algorithm exists which can deal with an arbitrary number of blocks (Roodbergen, 2001). Our approach is much more flexible with respect to the extension to different layouts which we consider as a main advantage of our approach. In particular, it allows for modeling a block layout with an arbitrary number of blocks and considering the case of decentralized depositing in which items can be deposited at the end of each picking aisle. Furthermore, our proposed model formulation can easily be modified to find simple tours through the warehouse which will be demonstrated in Section 6.In practice, in order to solve the SPRP, usually simple heuristics, so-called routing strategies, are applied (Roodbergen, 2001). Solutions from such routing strategies can be memorized and executed easily, and they reduce the risk of missing an item that should be picked. The simplest routing strategies are the S-shape, the return and the largest gap strategies (Gu, Goetschalckx, & McGinnis, 2007; de Koster, Le-Duc, & Roodbergen, 2007). The S-shape strategy provides solutions in which the order picker enters a picking aisle and traverses it completely if at least one required item is located in that aisle. Then he proceeds to the next aisle from which items have to be picked. An exception would only be a situation in which the order picker is positioned in the front cross aisle, facing the last picking aisle from which items have to be picked. He would then return to the front cross aisle after having picked the most-distantly located item in that aisle. Solutions from the return strategy provide tours in which each picking aisle containing at least one requested item is entered from the front cross aisle. The picker proceeds to the farthest pick location and returns to the front cross aisle with the picked items. The largest-gap strategy gives solutions in which the order picker completely traverses the first and the last aisle containing a requested item. All other aisles containing at least one required item are entered from the front and from the rear cross aisle in such a way that the non-traversed distance between two adjacent pick locations or a pick location and the adjacent cross aisle is maximal. The combined strategy (Roodbergen & de Koster, 2001b) integrates elements of the S-shape and return strategy. Aisles may be traversed entirely or may be entered and left via the same cross aisle. Solutions are generated by means of dynamic programming.The performance of the routing strategies is dependent on the problem characteristics (number of picking aisles, number of locations per aisle, position of the depot, number of requested items). Moreover, also the policy according to which items are assigned to different locations has a significant impact on the tour lengths provided by the heuristics. Elements of these routing strategies will be contained in the new model formulation for the SPRP presented in this paper.For a model formulation of the TSP usually a complete graphGTSP=(V,A)is assumed. In case of the SPRP, the set of verticesV={0,…,n}contains the depot (vertex 0) and all storage locations where items have to be picked. The set of arcs is defined asA={(p,q)∣p,q∈V,p≠q}and for each arc a distance cpqcan be calculated according to the respective layout.Based on this graph, we will focus on three model formulations which require a polynomial number of both variables and constraints. These formulations, which have also been chosen by Letchford et al. (2013) as a basis for their analysis of Steiner TSP formulations, differ with respect to two characteristics, namely the number of variables and constraints on the one hand and the quality of the lower bound which can be obtained by solving the LP relaxation on the other hand.We complete this section of model formulations by presenting the Steiner TSP formulation that was proposed by Letchford et al. (2013) and derived from the multi-commodity flow model of Claus (1984).The formulation proposed by Miller et al. (1960) uses the following variables:xpq={1,ifarc(p,q)iscontainedinthetour,0,otherwise,(p,q)∈A;hp:positionofvertexpinthetour,p∈V∖{0}.Then, the TSP can be represented as follows:(1)min∑(p,q)∈Acpq·xpq(2)∑p∈Vxpq=1∀q∈V(3)∑q∈Vxpq=1∀p∈V(4)hp−hq+(n+1)xpq≤n∀(p,q)∈A:p,q≠0(5)xpq∈{0,1}∀(p,q)∈A(6)hp≥0∀p∈V∖{0}The objective function minimizes the total cost of the tour, i.e. as for the SPRP the total length of the picker tour. Constraints (2) and (3) guarantee that each vertex is visited exactly once. Conditions (4) exclude subtours by ensuring that the position assigned to vertex p in a tour is smaller than the position assigned to vertex q if arc (p, q) is used. This formulation requires only O(n2) variables and constraints. However, the solution of its LP relaxation provides an extremely weak lower bound (Padberg & Sung, 1991).A formulation based on the flow of a single commodity type has been introduced by Gavish and Graves (1978). At the start of the tour, n units of the commodity are available. While the tour is being executed, these units have to be delivered to the vertices when they are visited. Each vertex requires the shipment of exactly one unit.For this model, additional non-negative variables are introduced describing the flow on arc (p, q) ∈ A:gpq:numberofunitsofthecommoditypassedondirectlyfromvertexptoq,(p,q)∈A:q≠0.Based on this definition and on the above-described considerations, the following model formulation can be introduced:(7)min∑(p,q)∈Acpq·xpq(8)∑p∈Vxpq=1∀q∈V(9)∑q∈Vxpq=1∀p∈V(10)∑q∈Vgqp−∑q∈V∖{0}gpq=1∀p∈V∖{0}(11)gpq≤nxpq∀(p,q)∈A:q≠0(12)xpq∈{0,1}∀(p,q)∈A(13)gpq≥0∀(p,q)∈A:q≠0Constraints (10) ensure that exactly one unit of the commodity is delivered to each vertexp∈V∖{0}while constraints (11) guarantee the flow to be zero along arcs not included in the tour. This formulation includes O(n2) variables and constraints. Padberg and Sung (1991) have shown that its LP relaxation leads to a stronger lower bound than the formulation of Miller et al. (1960).Another formulation that was proposed by Claus (1984) uses multi-commodity flows in order to prohibit subtours. Here, n different commodities have to be delivered. At the beginning of the tour, one unit of each commodity is available. Each vertex is meant to receive exactly one of these commodities.For the presentation of this model formulation, the following additional variables are introduced:wpqk:numberofunitsofcommoditykpassedondirectlyfromvertexptoq,(p,q)∈A,k∈V∖{0}.The TSP can then be represented as follows:(14)min∑(p,q)∈Acpq·xpq(15)∑p∈Vxpq=1∀q∈V(16)∑q∈Vxpq=1∀p∈V(17)∑q∈V∖{0}w1qk−∑q∈V∖{0}wq1k=−1∀k∈V∖{0}(18)∑q∈Vwpqp−∑q∈Vwqpp=1∀p∈V∖{0}(19)∑q∈Vwpqk−∑q∈Vwqpk=0∀p,k∈V∖{0}:p≠k(20)wpqk≤xpq∀(p,q)∈A,k∈V∖{0}(21)xpq∈{0,1}∀(p,q)∈A(22)wpqk≥0∀(p,q)∈A,k∈V∖{0}Constraints (17) guarantee that each commodity leaves the depot and is delivered to a vertex. Constraints (18) ensure that each vertex receives exactly one commodity. Constraints (19) ensure that a commodity leaves a vertex that is not its final destination. This model formulation requires O(n3) variables and constraints. The solution of its LP relaxation leads to the strongest lower bound of the three formulations considered here (Padberg & Sung, 1991).In a block layout, the order picker cannot proceed directly from one location of a requested item to another one if these items are located in different picking aisles. Instead, a cross aisle has to be used for switching over from one picking aisle to the other. This aspect is neglected in general TSP formulations since a complete graph is assumed. It can be taken into account explicitly, though, in Steiner TSP formulations. The following formulation for the Steiner TSP was provided by Letchford et al. (2013) and has been derived from the general multi-commodity flow TSP formulation of Claus (1984).Since the set of arcs in this formulation differs from the arc set of the general TSP formulation, we useA˜to denote the set of arcs of a Steiner TSP. As in Section 2, the set of Steiner points is denoted by P. The formulation for the Steiner TSP then is as follows:(23)min∑(p,q)∈A˜cpq·xpq(24)∑q∈V:(p,q)∈A˜xpq≥1∀p∈V∖P(25)∑q∈V:(p,q)∈A˜xpq−∑q∈V:(q,p)∈A˜xqp=0∀p∈V(26)∑q∈V:(q,1)∈A˜wq1k−∑q∈V:(1,q)∈A˜w1qk=−1∀k∈V∖(P∪{0})(27)∑q∈V:(q,k)∈A˜wqkk−∑q∈V:(k,q)∈A˜wkqk=1∀k∈V∖(P∪{0})(28)∑q∈V:(p,q)∈A˜wpqk−∑q∈V:(q,p)∈A˜wqpk=0∀p∈V∖{0},k∈V∖(P∪{0,p})(29)wpqk≤xpq∀(p,q)∈A˜,k∈V∖(P∪{0})(30)xpq∈{0,1}∀(p,q)∈A˜(31)wpqk≥0∀(p,q)∈A˜,k∈V∖(P∪{0})Constraints (24) ensure that each vertex not corresponding to a Steiner point is visited at least once, while (25) guarantee that the indegree of each vertex is equal to its outdegree. Constraints (26)–(29) correspond to the multi commodity flow constraints ((17)–(20)) in the formulation of Claus (1984).In general, the formulation of Letchford et al. (2013) for the Steiner TSP requires O(|P||E|) variables and constraints. When it is being used for representing a SPRP, the location of the depot and the pick locations have to be taken as points which have to be visited (|P|=n+1) while the points where a picking aisle can be entered or left represent Steiner points. Assuming the picking area following a block layout,|E|=O(n·m)arcs are needed to represent the SPRP as a Steiner TSP. This results in a model formulation which requires O(n2 · m) variables and constraints, i.e. its size is dependent on both the number of requested items and the number of picking aisles. However, especially for a large number of storage locations to be visited, it requires significantly fewer variables and constraints than the formulation of Claus (1984) on which it is based.Each of these four formulations can be used to model and solve the SPRP. However, the number of variables and constraints and, therefore, the computing times needed to solve the problems may grow quite large when the number of pick locations is increased. In order to find a model formulation of smaller size, it is necessary to change over from general TSP or Steiner TSP formulations to a more problem-specific formulation for the SPRP.Tours taken by order pickers in warehouses in which the storage locations are arranged according to a block layout exhibit a specific structure. It results from the fact that cross aisles have to be used for switching over from one picking aisle to another. Also movements within picking aisles are rather restricted. Both properties are not explicitly considered by general TSP formulations.In this section, we introduce a new graph for the SPRP that takes into account these properties and we show that the respective number of vertices and arcs is not dependent on the number of pick locations. Then, a TSP formulation is applied to this graph in order to provide a model for the problem.A representation of the SPRP in a single-block layout must not necessarily be based on a complete graph with arcs between each pair of vertices. Ratliff and Rosenthal (1983) have shown that for the generation of an optimal tour only six different paths need to be considered which allow for visiting all pick locations of a picking aisles (see Fig. 3).(1)The order picker enters the picking aisle from the front cross aisle, visits all pick locations sequentially, and exits the aisle at the rear cross aisle.The order picker enters the picking aisle from the rear cross aisle, visits all pick locations sequentially, and exits the aisle at the front cross aisle.The order picker enters and exits the picking aisle twice, one time from and back to the front cross aisle and another time from and back to the rear cross aisle. In both cases he returns to the cross aisle from where the picking aisle was entered. The return point is defined by the largest gap between two adjacent pick locations or between a pick location and the adjacent cross aisle.The order picker enters and leaves the aisle at the front cross aisle. The return point is defined by the pick location which corresponds to the largest distance from the front cross aisle.Likewise, the order picker enters and leaves the aisle at the rear cross aisle. The return point is defined by the pick location which corresponds to the largest distance from the rear cross aisle.The picking aisle is not entered at all since no requested item is located in that aisle.As a consequence, instead of considering all pick locations, it is sufficient that each picking aisle i is only be represented by six points, namely the points which are defined by(a)the intersection between the picking aisle i and the front cross aisle and the intersection between the picking aisle i and the rear cross aisle (vertices [i, f] and [i, b]),the two pick locations defining the largest gap (vertices [i, 2] and [i, 3]) andthe first and the last storage location where an item has to be picked (vertices [i, 1] and [i, 4]).If less than four pick locations have to be visited in an aisle, points need to be duplicated in order to obtain the required number. In case that items have to be picked from one location only, that location will be represented by [i, 1], [i, 2], [i, 3] and [i, 4]. In case items have to be picked from two different locations then [i, 1] and [i, 2] ([i, 3] and [i, 4]) are identical. In case of three different pick locations that have to be visited, the pair of locations defining the largest gap has to be determined. If the gap exists between the two pick locations nearest to the front cross aisle, then [i, 1] and [i, 2] are identical; otherwise [i, 3] and [i, 4] are identical.Based on these considerations, a graph representing the SPRP in a single-block layout can be constructed by introducing the six vertices for each picking aisle and choosing the edges that result from the options according to which pick locations can be visited (see Fig. 3). In order to represent moves of the order picker in the cross aisles, each pair of vertices([i,f],[i+1,f])and([i,b],[i+1,b])(i=1,…,m−1,where m denotes the number of picking aisles) is connected by two arcs. The depot is positioned in front of the leftmost picking aisle and identical to vertex [1, f] in the graph. An example of a graph related to a (single-) block layout with five picking aisles is depicted in Fig. 4.The weight cafor an arc a in a picking aisle i can be determined as follows: The arc weight c([i, 2], [i, 3]) is always equal to the largest gap between two adjacent pick locations in picking aisle i or a pick location and the adjacent cross aisle. Letji*be the location represented by vertex [i, 2]. Then, three different cases have to be distinguished for the determination of c([i, f], [i, 1]) and c([i, 1], [i, 2]):(1)Ifji*does not correspond to the location of a requested item but to the point where picking aisle i can be entered via the front cross aisle, thenc([i,f],[i,1])=c([i,1],[i,2])=0.Ifji*corresponds to the pick location nearest to the front cross aisle, then c([i, f], [i, 1]) is equal to the distance between the front cross aisle andji*,andc([i,1],[i,2])=0holds.Otherwise, c([i, f], [i, 1]) is determined as in the second case, and c([i, 1], [i, 2]) is the distance between the pick location nearest to the front cross aisle andji*.The determination of c([i, 3], [i, 4]) and c([i, 4], [i, 5]) is performed analogously. If picking aisle i does not contain any requested item, then c([i, 2], [i, 3]) is equal to the distance between the front and the rear cross aisle; the remaining arc weights are set to zero.A feasible solution for the SPRP would be given by a tour which starts and ends at vertex [1, f] and includes the vertices [i, 1], [i, 2], [i, 3] and [i, 4] for each picking aisle i that contains at least one requested item. When applying a model formulation for the TSP to this graph, we therefore need degree constraints for these vertices in order to ensure that they are contained in the tour. However, this approach would result in two problems. First, even in an optimal solution for the SPRP, it is possible that vertices are visited more than once, which is not permitted in standard definitions of the TSP. Second, simply guaranteeing that all vertices in a picking aisle are visited does not necessarily ensure that a feasible solution for the SPRP is provided.In Fig. 5, an infeasible combination of arcs in a picking aisle is depicted. All vertices in this picking aisle are visited, however, it cannot be guaranteed that all pick locations are included in the tour. This is due to the fact that the number of vertices, by which each picking aisle is defined, is not dependent on the number of requested items. Because of this reason, it is possible that some requested items are situated between the locations that are represented by the vertices. Vertices [i, 2] and [i, 3] represent the two locations defining the largest gap and, therefore, no pick location can be situated between those locations. This is not true for vertices [i, 1] and [i, 2] as well as for [i, 3] and [i, 4]. Since vertices [i, 1] and [i, 4] represent the location nearest and farthest from the front cross aisle, several storage locations containing requested items may be situated between these locations and the locations defining the largest gap. Thus, tours may be generated in which some of the pick locations are skipped.In order to ensure feasibility of solutions for the SPRP which are obtained from a TSP formulation based on this graph, additional predecessor and successor constraints for arcs are needed. For example, we will have to ensure that arc ([i, 3], [i, 4]) is used if arc ([i, 2], [i, 3]) was chosen.Another issue refers to the elimination of subtours. The general concept of the subtour elimination constraints in the TSP formulations presented above consists of the enumeration of the vertices according to the sequence in which they appear in the tour. This approach cannot be successful when using this graph, because on the one hand, vertices are allowed to be visited more than once and, on the other hand, some cycles are allowed within the tour (e.g. if a largest gap strategy is used in an aisle).In order to avoid vertices to be visited more than once, vertices are split up into several vertices in such a way that each generated vertex can only be visited one time. According to Ratliff and Rosenthal (1983) vertices corresponding to cross aisles can be visited up to three times, while the other vertices may be visited at most twice. Therefore, we replace each vertex [i, f] and [i, b](i=1,…,m)by three vertices, where one vertex has to be used to enter a picking aisle and the other two vertices correspond to movements to the left and to the right in the cross aisles. The vertices [i, 1], [i, 2], [i, 3] and [i, 4] represent movements within a picking aisle i and are replaced by two vertices, where these vertices correspond to movements towards the rear cross aisle (up) and the front cross aisle (down), respectively. Furthermore, a vertex symbolizing the location of the depot is added. An example for the resulting graph is depicted in Fig. 6.In general, the vertices of this graph can be described as follows. Vertex 0 symbolizes the location of the depot. The other vertices are characterized by a triple, where the first component represents the direction in which the tour can be continued. r and l indicate movements to the right and to the left, respectively. Movements towards the rear cross aisle and towards the front cross aisle are symbolized by u (“up”) and d (“down”). The second component characterizes the number of picking aisle i, where picking aisle 1 is the leftmost and aisle m the rightmost picking aisle. The last component of the triple represents the location of the vertex, where f and b mean that the vertex corresponds to the front and the rear cross aisle, respectively. The four locations in a particular picking aisle are enumerated from 1 to 4. Based on this denotation, the vertices [l, 1, b], [r, m, b] and [r, m, f] do not exist, because at these points either moves to the left or to the right are possible. After having introduced the vertices of the graph, arcs are added based on the feasible options according to which requested items can be picked in a picking aisle (see Fig. 3).These modifications result in a graph in which an optimal order picking tour can be constructed without visiting a vertex more than once. This graph includes more than twice the number of vertices as the previously presented graph does. However, the size of the improved model formulation for the SPRP will only be dependent on the number of arcs and not on the number of vertices. Furthermore, the size of the graph is completely independent of the number of pick locations. Applying a TSP formulation to this modified graph, in which the number of subtour elimination constraints increases linearly to the number of arcs, will lead to a mathematical model whose size increases linearly to the number of picking aisles.In this section, a TSP formulation is applied to the graph constructed in Section 4.1. The complete mathematical model for the SPRP is presented in the Appendix. It includes the following classes of constraints:•Degree constraints [(37)–(59)]: Each vertex has to be left after it has been visited.Subtour elimination constraints [(60)–(90)]: The resulting tour has to be connected.Depot inclusion constraint [(91)]: The depot has to be included in the tour.Pick location inclusion constraints [(92)–(93)]: Each pick location has to be included in the tour.The degree and subtour elimination constraints [(37)–(90)] are very similar to the corresponding constraints [(2)–(4), (8)–(11) and (15)–(20)] used in the general TSP formulations and will only be described briefly here. As decision variables we introduce binary variables for each arc, indicating if the arc is contained in the tour (variable is equal to 1) or not (0). For a picking aisle i, the notation of the variables for the different arc types is depicted in Fig. 7. For the sake of clarity, each arc type is only included for a single direction in this figure. Arcs corresponding to movements in the opposite direction are excluded. (For example, arc ([u, i, 3], [u, i, 4]) is depicted and ([d, i, 1], [d, i, 2]) is excluded.)The degree constraints in general TSP formulations ensure that each vertex is visited exactly once, which means that the indegree and the outdegree of each vertex are equal to one, respectively. When dealing with a SPRP represented by the modified graph, each vertex is visited at most once. However, some vertices may exist which are not included in an optimal tour. Therefore, it has to be ensured that the indegree and the outdegree are equal to 1 if a vertex is visited and equal to 0 otherwise. This can be done by requiring that, for each vertex, the indegree is equal to the outdegree. In the degree constraints (37)–(59), the outdegree is calculated on the left hand side of the equation while the right hand side represents the indegree.The mathematical models for the general TSP presented in Section 3 only differ in the way how subtours are excluded. Based on pretests, we decided to apply the subtour elimination constraints by Gavish and Graves (1978) in which the arcs are enumerated according to the sequence in which they are used in the tour. Constraints (10) ensure for each vertexi∈V∖{0}that the sum of variables corresponding to arcs, which can be used to reach vertex i, has to be by one greater than the sum of variables for arcs leaving this vertex. Constraints (11) result in a solution where both sums contain exactly one variable greater than zero, respectively. The general principle of constraints (10) is also used in the model formulation based on the modified graph. The application of these constraints leads to constraints (60)–(80). The structure of the left hand side of these equations is equal to those of constraints (10). However, the right hand side of constraints (60)–(80) cannot be equal to one for each vertex, because this would lead to tours in which all vertices have to be visited although it is allowed to skip some vertices when using the modified graph. Therefore, the right hand side of constraints (60)–(80) has to be equal to zero if the corresponding vertex is not included in the tour; otherwise, it has to be equal to 1. This can be obtained by calculating the degree (here: outdegree) for each vertex. The second part of the subtour elimination constraints [(81)–(90)] is equivalent to (11).Constraint (91) ensures that the depot is included in the tour.Since not all vertices must necessarily be visited, we will have to introduce vertex-related criteria which have to be satisfied if it is permitted to skip a vertex. Each vertex representing an intersection between a picking and a cross aisle is allowed to be skipped. Furthermore, in some cases it is also possible to skip vertices corresponding to a pick location. The pick locations of a picking aisle i are represented by four pairs of vertices. In order to guarantee that all requested items are contained in the tour, it is sufficient to visit the vertices nearest to the cross aisles. In this case, the degree constraints ensure that all pick locations will be visited. Let us consider the two vertices nearest to the front cross aisle which are denoted by [u, i, 1] and [d, i, 4]. Both vertices represent the same pick location and, therefore, only one of them has to be included in the tour. If vertex [u, i, 1] is visited, the next vertex to be visited is [u, i, 2], which means that the variable wi1fhas to be equal to one. If [d, i, 4] is included in the tour, the vertex [d, i, 3] has to be visited before, which implieswi3b=1. Since picking aisles which do not contain any requested items can also be skipped, the constraintwi1f+wi3b≥1must hold for all picking aisles i containing at least one requested item. This is expressed by the constant biwhich is equal to 1 if picking aisle i has to be visited and 0 otherwise. Analogously, the constraints resulting from the pair of vertices nearest to the rear cross aisle can be constructed. This results in the following two constraints for a picking aisle i:(32)wi1f+wi3b≥bi(33)wi1b+wi3f≥biHowever, another special case exists in which one of these two pairs of vertices is allowed not to be contained in the tour. This case occurs if the largest gap is not defined by two pick locations but by a pick location and the adjacent cross aisle. If the corresponding cross aisle is the rear cross aisle, then the pair of vertices nearest to the rear cross aisle does not have to be visited. In this case, the vertices [d, i, b], [u, i, 4] and [u, i, 3] represent the same location and, therefore, the distance between [d, i, b] and [u, i, 3], denoted byci3be,is equal to zero. This implies that constraint (33) must hold if and only ifci3be>0which can be obtained by multiplying both sides of the constraint byci3beresulting in (93). The same line of argumentation holds if the front cross aisle is considered. In this case, multiplying constraint (32) byci3feleads to (92).In total, we have O(m) variables and constraints, i.e. the number of variables and constraints increases only linearly to the number of picking aisles m and is not dependent on the number of pick locations.In order to evaluate the above-presented formulations, we have performed numerical experiments for various classes of problem instances. The formulations will be compared w.r.t. the actual model sizes and the computing times needed by a commercial IP-solver for providing optimal solutions to these instances. For the numerical experiments, the characteristics of the warehouse have been chosen according to the experiments of Henn and Wäscher (2012). Each picking aisle consists of 90 storage locations, 45 on each side. Demands are uniformly distributed, i.e. each pick location has the same probability of being included in a picking order. The length of each storage location amounts to one length unit (LU). Whenever leaving an aisle, the order picker has to move one LU in the vertical direction from either the first or the last storage location in order to reach the cross aisle. The distance between two adjacent picking aisles is equal to 5 LU. The depot is assumed to be located in front of the leftmost picking aisle.In their experiments, Henn and Wäscher (2012) fixed the number of picking aisles m to 10. Since both the size of the Steiner TSP formulation and the newly-proposed formulation are dependent on the number of picking aisles, we consider different values of m here. Therefore, m has been set to 5, 10, 15, 20, 25 and 30. For the size of the picking order (number of pick locations n), the values 30, 45, 60, 75 and 90 have been chosen. Combination of these parameters gives rise to 30 problem classes. For each class, 30 instances have been generated, resulting in 900 instances in total.All formulations have been implemented and solved by CPLEX 12.6. The experiments have been carried out on a desktop PC with a 3.4 gigahertz Pentium processor with 8 gigabytes RAM. The computing time for each instance and formulation has been limited to 30 minutes.

@&#CONCLUSIONS@&#
