@&#MAIN-TITLE@&#
Ribbon-based transfinite surfaces

@&#HIGHLIGHTS@&#
Two n-sided transfinite surface representations are presented.The new schemes interpolate ribbon surfaces withC1continuity.One of these is a generalization of the Coons patch based on the Boolean sum scheme.The other combines curved side interpolants.Special distance-based blending functions and parameterizations are introduced.

@&#KEYPHRASES@&#
Transfinite surface interpolation,n-sided surfaces,Ribbons,Distance-based blending functions,Parameterization,

@&#ABSTRACT@&#
One major issue in CAGD is to model complex objects using free-form surfaces of general topology. A natural approach is curvenet-based design, where designers directly create and modify feature curves. These are interpolated by smoothly connected, multi-sided patches, which can be represented by transfinite surfaces, defined as a combination of side interpolants or ribbons. A ribbon embeds Hermite data, i.e., prescribed positional and cross-derivative functions along boundary curves.The paper focuses on two transfinite schemes: the first is an enhanced and extended variant of a multi-sided generalization of the classical Coons patch (Várady et al., 2011); the second one is based on a new concept of combining doubly curved composite ribbons, each one interpolating three adjacent sides. Main contributions include various ribbon parameterizations that surpass former methods in quality and computational efficiency. It is proven that these surfaces smoothly interpolate the prescribed ribbon data. Both formulations are based on non-regular convex polygonal domains and distance-based, rational blending functions. A few examples illustrate the results.

@&#INTRODUCTION@&#
Curvenet-based design is a natural approach to create complex free-form models in three dimensions. The process begins with creating a curve network representing the boundaries and feature lines of the object. These curves may come from several sources, such as traditional blueprints, 2D sketches, or directly through some sophisticated 3D graphical user interface, such as in the works of Bae et al. (2009), Grimm and Joshi (2012), then the interpolating surfaces are expected to be automatically generated over the curve network. Transfinite surfaces are particularly suitable for this approach, since they are determined solely by boundary curves and cross-derivatives.It is hard to compare transfinite schemes with other types of general topology surfaces, such as (i) trimmed parametric surfaces, (ii) subdivision surfaces, or (iii) split n-sided surfaces. Trimmed surfaces are typically defined by a grid of control points, in contrast to transfinite patches that require only the boundary information. Certain symmetric n-sided configurations cannot be achieved by trimmed surfaces, for example a regular 3- or 5-sided patch cannot be exactly represented over a 4-sided domain. While the boundary edges over the four sides of the parametric domain can be directly edited in 3D, the internal trimming curves cannot. As for continuity, stitching parametric surfaces along general trimming curves can be achieved only in a numerical sense, controlled by tolerances; however, for transfinite patches accurate “watertight” stitching is possible.Subdivision surfaces offer a highly intuitive technique to produce smoothly connected, general topology surfaces derived from a control polyhedra, but interpolating a network of prescribed boundaries and cross-derivatives is a difficult task. To match a given network, first a good initial control polyhedron must be found, then the subdivision rules need to be modified to obtain an interpolating limit surface. Related work on interpolating curve networks by subdivision can be found in e.g. Levin (1999), Nasri and Abbas (2002), Ma and Wang (2009).There are CAD systems that use only stitched quadrilaterals, and when an n-sided patch needs to be represented, it is subdivided — in most cases — using the central split scheme. This may seem to be a good solution, but it is not easy to determine optimal splitting curves and a good center point, or to resolve compatibility constraints (Peters, 1993). T-splines also represent surfaces in this category (Sederberg et al., 2003), where the connection of adjacent patches with different knot vectors is efficiently solved. Recent work on n-sided patches composed of quadrilaterals include Karčiauskas and Peters (2007), Loop and Schaefer (2008), Bommes et al. (2011).Our work is motivated by designers and stylists, who want to focus on controllable boundary curves and ribbons. They expect nice, predictable and smoothly connected surfaces, and would like to avoid dealing with intricacies not related to design intent. Transfinite patches are attractive for real-time curve editing with immediate surfacing response. It is a disadvantage, however, that these surfaces are defined by high-degree rational polynomials in a non-standard format. Strictly local control can be an advantage, though some applications may demand for a global optimization over large curve networks; this may be the subject of future research.This paper expands former work by the same authors and also introduces a new transfinite formulation using composite ribbons. The concept of multi-sided generalization of Coons patches appeared in Várady et al. (2011), while composite ribbons were recently outlined in a short paper (Várady et al., 2013). Here we present the necessary boundary conditions and proofs of continuity for both formulations in details, which was formerly impossible due to space limitations. We also introduce new ribbon parameterizations that surpass former methods in terms of quality and computational efficiency. After reviewing related work in Section 2, we revisit classical topics, such as Hermite curves and Coons patches, that will help to reformulate the equations leading to the new schemes (Section 3). We summarize the basic elements of multi-sided surface constructions in Section 4, and discuss various ribbon parameterizations with and without constraints. The actual surface formulations are described in Sections 5 and 6. We analyze our results in Section 7, then suggestions for future work conclude the paper.There is an extensive and diverse literature on transfinite methods. These differ in several aspects, including (i) the number of boundaries, (ii) the cross-derivative constraints (C1,G1orG2) between adjacent surfaces, (iii) the definition of the interpolants, (iv) the type of blending functions, and (v) the method of parameterization, i.e., how the interpolants are mapped onto the domain and vice versa.In the classical work of Coons (1967) four boundaries were interpolated. This was followed by Gordon's extension to interpolate a grid of curves by quadrilaterals (Gordon, 1969). Then transfinite patches with three sides were investigated (Barnhill et al., 1973; Nielson, 1979) followed by 5-sided (Charrot and Gregory, 1984) and later general n-sided schemes (Gregory, 1986). Inserting two-sided or even one-sided patches has also become important, in order to complete general topology curve networks, see e.g. Sabin (1998), Várady et al. (2012). Initially, domains were regular polygons, but later non-convex polygons and domains with internal hole loops were also proposed (Kato, 1991; Sabin, 1998). The use of non-regular 2D domains was suggested in Várady et al. (2011).While Coons' 4-sided patches can be extended toC1orC2in a relatively simple manner by raising the degrees of the Hermite blending functions, most n-sided methods achieve onlyG1continuity. Extension toG2in a general way is not so easy (see e.g. Gregory and Hahn, 1989; Gao and Rockwood, 2005), and it generally requires further constraints related to the defining curve network. Important contributions concerning minimum energy curve networks, compatibility constraints, and conditions forG2curvenets can be found in Moreton and Séquin (1991), Peters (1992) and Hermann et al. (2009), respectively.At the beginning side-based interpolations dominated the field (see Coons-like patches and surfaces in Kato, 1991, 2000; Sabin, 1996). Later corner interpolants were suggested as well, e.g. Charrot and Gregory (1984), Plowman and Charrot (1996), Várady (1991). Many schemes, including Coons patches, need correction terms in the formulae to satisfy the interpolating constraints.An interesting concept of permanence was suggested in Farin and Hansford (1999), which requires a shrinking domain polygon with edges parallel to the original sides to be mapped onto an n-sided subpatch of the same kind. This is a challenging idea — currently no solution is known forn≠4.There is a fairly wide variety of blending functions and parameterization methods (Várady et al., 2011). For general n-sided patches, mostly “tricky” rational functions based on special distances are computed within the domain, for example in Gregory (1986), Kato (1991), Várady et al. (2011). In Sabin's early paper (Sabin, 1986) it is shown that rational polynomial parameterization by two domain variables is not possible forn⩾6.Generalized barycentric coordinates (Floater, 2003; Hormann and Floater, 2006) provide a good basis for parameterizing polygonal domains (see also Section 4.5). Recent publications extend this theory to interpolate Hermite data — continuous functions and derivatives — over polygons and curved boundaries (see moving least squares coordinates, Manson and Schaefer, 2010, and transfinite mean value interpolation, Dyken and Floater, 2009; Bruvoll and Floater, 2010).Recent developments of transfinite surfaces include Coons patches having geodesic boundaries (Farouki et al., 2009), and methods to adjust the shape interior of transfinite patches while retaining their boundaries (Várady et al., 2012).First we revisit and reformulate basic curve and surface equations to introduce our new n-sided surface schemes. Instead of separate positional and tangential data, we combine ribbons, i.e., continuous quadrilaterals having their own local parameterization. Generally ribbons are parameterized linearly by a distance parameter; in this paper we propose a rational ribbon reparameterization that reproduces Hermite cubics and Coons patches.A cubic Hermite curve interpolates four discrete quantities, two endpointsP1,P2, and two tangent vectorsT1,T2, each multiplied by the Hermite blending functionsα0(u)=2u3−3u2+1,α1(u)=−2u3+3u2,β0(u)=u3−2u2+u,β1(u)=u3−u2,sor(u)=P1α0(u)+P2α1(u)+T1β0(u)+T2β1(u).A similar curve equation can be formulated by combining two continuous, parametric straight line segments, which we call 2D ribbons (analogously to 3D ribbons used later). For each 2D ribbon let us introduce a local parameterdi, and define the segment with endpointPiand tangentTias follows:Ri(di)=Pi+γ(di)Ti,di∈[0,1],whereγ(di)is a scalar function with propertiesγ(0)=0andγ′(0)=1. Then the curve can be written asr(u)=∑i=1,2Ri(di)α0(di).The local ribbon parameters are computed from the parameter of the curve byd1(u)=u,d2(u)=1−u. Here only the first Hermite blending function needs to be used, andT2is reversed.γ(di)=diwould yield a quartic interpolating curve, however, if we apply a rationalγ(di)=β0(di)/α0(di)=di2di+1, a curve identical to the original cubic Hermite is obtained.TheC1Coons patch (Coons, 1967) is a four-sided surface S, parameterized in the(u,v)plane (u,v∈[0,1]). It interpolates four boundariesP1(u),P3(u),P2(v),P4(v)and four cross-derivative functionsT1(u),T3(u),T2(v),T4(v)(Fig. 3.1). In Coons' original Boolean sum formulation there are three constituents: an interpolant connecting sides 1 and 3, another interpolant connecting sides 2 and 4, and a term that corrects unwanted artifacts of the two side-to-side interpolants. The correction surface contains a combination of constant vectors at the corners, such asPi(0),Pi′(0),Ti(0)andTi′(0). In theC1Coons patch cubic Hermite blending functions are used.To reformulate the surface equation based on sides, we introduce cyclic indices (with 1 coming after 4), and so-called side parameterssi=si(u,v). Thesi-s are associated with the i-th side of the domain (i=1,…,4) and take the values of u, v,1−uand1−v, respectively, as shown in Fig. 3.1. For symmetry reasons, the parameterization of the boundaries are reversed along sides 3 and 4. Grouping the positional and tangential constraints ofPi(si)andTi(si), and splitting the correction surface into four parts (each one corresponding to one corner), we can rewrite the Coons patch as the composition of four side-based terms minus four corner-based correction terms, as follows:S(u,v)=∑i=14[α0(si+1)β0(si+1)]T[Pi(si)Ti(si)]−∑i=14[α0(si+1)β0(si+1)]T[Pi(0)Pi′(0)Ti(0)Ti′(0)][α0(si)β0(si)].The derivative ofTi(0)is the twist vector, which is a corner-specific quantity, also denoted byWi,i−1. We assume that the twist vectors related to the(i−1)-th and i-th cross-derivative functions are compatible, i.e.,Wi,i−1=∂∂siTi(0)=−∂∂si−1Ti−1(1).It is well-known, that when the twist vectors are not compatible, Gregory's rational twists need to be used (Gregory, 1974; Farin, 2002).Now let us construct a Coons patch using 3D ribbons, i.e., instead of blending eight one-dimensional vector functions, let us combine four biparametric surfaces, in a similar fashion as for the cubic curve. The i-th ribbon is defined asRi(si,di)=Pi(si)+γ(di)Ti(si).Here we use the other local parameter, called distance parameterdi=di(u,v), that measures a distance from the i-th boundary; fordi=0the positional and tangential constraints are satisfied. In the four-sided casedi=1−si−1=si+1is an obvious choice. The resulting patch equation is(3.1)S(u,v)=∑i=14Ri(si,di)α0(di)−∑i=14Qi,i−1(si,si−1)α0(si)α1(si−1),where the corner correction patchesQi,i−1are given asQi,i−1(si,si−1)=Pi(0)+γ(1−si−1)Ti(0)+γ(si)Ti−1(1)+γ(si)γ(1−si−1)Wi,i−1.The ribbons are ruled surfaces, the correction patches are doubly curved. If we apply the previous rationalγ(di)functions, this formula will be identical to the originalC1Coons patch. This is the basis of the multi-sided generalization presented in Section 5.We investigate multi-sided patches that interpolate n three-dimensional curvesPi(si),1≤i≤n, and related cross-derivative functionsTi(si)for an arbitraryn≥3. We focus on ribbon-based patches, where ribbons are biparametric surfacesRi(si,di)that reproduce prescribed positional and tangential constraints atdi=0. For creating a multi-sided patch, the following must be provided: (i) n ribbon surfaces, (ii) an n-sided domain polygon, (iii) blending functions, and (iv) appropriate methods to parameterize the ribbons.We assume that the patch is defined over a convex polygonal domain Γ in the(u,v)parameter plane, and the sides of the polygon,Γi, are mapped to the boundaries of the patch. The local side and distance parameters of the ribbons are computed from(u,v), i.e.,si=si(u,v),di=di(u,v), and for each side there is an associated blending functionBi(u,v)=Bi(d1,…,dn). We investigate two different schemes based on the weighted combination of ribbon surfaces. The first is a generalization of Coons' Boolean sum scheme with linear ribbons (Eq. (3.1)), that also requires a correction surface (see Section 5), while the second is a combination of doubly curved ribbons (see Section 6), each interpolating three consecutive sides.We briefly describe how ribbons can be created. We assume that for each vertex of the network the crossing curves define a local tangent plane. For each boundaryPi(si)of a given patch, there exists a normal vector functionNi(si)(often called the normal fence) that interpolates the normals at the related corners and minimizes its rotation along the boundary (see RMF frames, Wang et al., 2008). The cross-derivatives of the ribbons are composed by the well-known technique of∂∂diRi(si,0)=α(si)(Ni(si)×∂∂siRi(si,0))+β(si)∂∂siRi(si,0),whereα(si)andβ(si)are scalar functions. Thus, if two adjacent patches share a common normal fence, then both ribbons, and consequently both multi-sided patches, will be connected withG1continuity. The scalar functions are to satisfy end conditions at the corner points (si=0andsi=1), but there is further freedom to define these in order to optimize the shape of the ribbons. For example, by means of the so-called ribbon-handles, which are prescribed cross-derivatives at the middle point of the boundary (si=0.5), users can interactively edit ribbons, if needed. Alternatively, these can be optimized by different fairing algorithms, which is the subject of ongoing research. (Typically, we apply cubic B-spline boundaries with quadratic or cubic scalar functions.) From now on we will assume that the ribbons have already been defined, and focus only on the patch formulation.LetLidenote the arc-lengths of the boundary curves, andlithe side lengths of the domain. Also letφidenote the corner angles in 3D space, andαithose in the 2D domain. Introducing the constantsclength=∑Li/∑liandcangle=∑φi/∑αi, where∑αi=(n−2)π, we propose to minimize the expressions1n∑(Liliclength−1)2and1n∑(φiαicangle−1)2,i.e., the arc length and angle distortions between the surface and the domain.Our experience shows that we can apply a regular polygon, if the above measures remain below prescribed thresholds. However, if the length or angle distortion is high, we strongly recommend using non-regular convex polygons to avoid unexpected shape artifacts. Instead of solving a non-linear optimization, simple heuristic methods for creating non-regular domains have been suggested in Várady et al. (2011).Assume that we have a polygonal domain, and for each(u,v)point we determine an n-tuple of distance values. Eachdiis associated with the i-th side:diis equal to 0 on sideΓiand it increases monotonically as we move away fromΓi. In our patch formulations, we create distance-based rational blending functions to combine ribbons. We introduce the notationDi1…ik=∏j∉{i1…ik}dj2, where squared distance terms are needed to satisfyG1constraints.The simplest blending function proposed by various authors (e.g. Kato, 1991; Várady et al., 2011) is(4.1)Bi⁎(d1,…,dn)=Di∑jDj(=1/di2∑j1/dj2),with the property thatBi⁎=1onΓi, and 0 on all other sidesΓj,j∉i. (The formula in the parenthesis is equivalent to the one on the left. It is more efficient to evaluate the reciprocal terms when alldi-s are larger than a given threshold. At the same time, very smalldi-s can produce numerical instability, when we need to return to the original evaluation with theDiterms.) This blending function is singular at the corners — fortunately the corner positions and tangents are uniquely defined by the boundary constraints. Nevertheless, this sort of blending may create uneven curvature distributions in the vicinity of the boundaries.Avoiding singular blending functions while retaining the side-based concept was one of the key motivations in our research to generalize Coons patches. In the four-sided case, the cubic Hermite blending functions ensure interpolation onΓiand a “gradual”1→0transition on the sidesΓi−1andΓi+1, as we move fromΓito the opposite side of the domain. For general n this is impossible by means of the Hermite functions, but it is possible using distance-based blending functions. For a general n the basic requirement is that the side blending functionBiis equal to 1 onΓi, and vanishes on all non-adjacent sidesΓj, wherej∉{i−1,i,i+1}, see Fig. 4.1(left).Before going any further, let us introduce corner blending functions that provide a convenient way to define side blending functions, and will be later used for correction patches, as well:Bi,i−1(d1,…,dn)=Di,i−1∑jDj,j−1(=1/(didi−1)2∑j1/(djdj−1)2).These functions have also been proposed earlier in the transfinite surface patches of Gregory (1986), Plowman and Charrot (1996), where corner interpolants are combined. The corner blendBi,i−1yields 1 at the(i−1,i)corner, and ensures a “gradual”1→0transition on sidesΓi−1andΓias we move towards thei−1andi+1domain vertices;Bi,i−1=0on all the remaining sidesΓj,j∉{i−1,i}. See Fig. 4.1 (right).It is easy to show, that by adding together two adjacent corner blends, we obtain the requested properties of side blending:Bi(d1,…,dn)=Bi,i−1+Bi+1,i=Di,i−1+Di+1,i∑jDj,j−1.Due to the squared terms, most partial derivatives of the blending functions vanish, i.e.,∂∂dkBi,i−1(d1,…,dj=0,…,dn)=0,j∉{i−1,i},k∈[1…n],∂∂djBi,i−1(d1,…,dj=0,…,dn)=0,j∈[1…n],and consequently∂∂dkBi(d1,…,dj=0,…,dn)=0forj∉{i−1,i+1},k∈[1…n]. (Fork≠i, we get∂∂dkBi(d1,…,di=0,…,dn)=0fromBi(d1,…,di=0,…,dn)=1.)Both the side and corner blending functions will be used in the multi-sided Coons patch (Section 5), while only the side blends are needed for the composite ribbon patch (Section 6). These blending functions ensure that the ribbons naturally vanish on the “opposite” sides; the number of terms to be evaluated increases with the number of sides.The most crucial issue in transfinite surface generation is ribbon parameterization, i.e., how to compute the local side and distance parameters(si,di)from a given(u,v)domain point (see Fig. 4.2). This is what determines the associated points of the ribbons and thus has a critical effect on the shape. There are infinitely many possible solutions to map a four-sided parametric quadrilateral onto an n-sided domain, and our experiments produced a wide variety of visually similar surfaces with different interior curvatures. We will describe a few interesting solutions.Two groups of ribbon parameterizations are considered. In simple parameterizations (Section 4.5) it is natural to require that each side parametersj(j∈[1…n]) is linear, and for a point onΓi(4.2)si∈[0,1],di=0,si−1=1,si+1=0.The distance parametersdj(j∈[1…n]) also change linearly along the sides, so on the i-th side(4.3)di−1=si,di+1=1−si.For constrained parameterizations (Section 4.6) further properties must also be satisfied for a point onΓi:(4.4)∂di−1∂u=∂si∂u,∂di+1∂u=−∂si∂u,∂di−1∂v=∂si∂v,∂di+1∂v=−∂si∂v.Roughly speaking, this means that in the simple case the parameterizations of the adjacent ribbons match only in a positional sense. For the constrained case these are identical in a differential sense, as well (see Fig. 4.3). These properties are trivially satisfied for the four-sided Coons patch, but for n-sided domains special constructions are needed. In the evaluation of parameterization methods, there are two main issues: (i) the constantsi,diparameter lines should have an even distribution in the domain, and (ii) the(u,v)→(si,di)mappings must be simple and computationally efficient. New parameterization schemes will be introduced in the next two sections.A family of simple parameterizations is defined when thesi=constisolines are straight lines in the domain space; assivaries from 0 to 1 these lines sweep from sideΓi−1to sideΓi+1. Methods differ in how the directions change. The simplest is bilinear mapping defined by a quadrangle, spanned by sidesΓi−1,ΓiandΓi+1, see Fig. 4.4(left). Alternative sweeping line methods include the radial sweep (Charrot and Gregory, 1984) or the central line sweep (Várady et al., 2011). The former constrains all sweep lines to go through a given point outside the domain, the latter forces thesi=12isolines to go through the center point of the domain.For a(u,v)point, the related sweep lines determine thesicoordinates. In the casesn=3,4it is straightforward to use bilinear mapping for computing thedicoordinates, as well. Forn≥5, the well-known Wachspress coordinates (Wachspress, 1975; Floater and Hormann, 2012) turned out to be a good solution. The barycentric coordinatesλiare defined asλi(u,v)=wi(u,v)/∑kwk(u,v),where the individual weights are computed bywi(u,v)=Ci/(Ai−1(u,v)⋅Ai(u,v)).HereAi−1=△(pi−1,(u,v),pi),Ai=△(pi,(u,v),pi+1)andCi=△(pi−1,pi,pi+1)represent triangles (Hormann and Floater, 2006), whose areas are incorporated into the above formula. See Fig. 4.5.Then thedidistance parameter is computed asdi(u,v)=1−(λi−1(u,v)+λi(u,v)),that satisfies Eqs. (4.2) and (4.3) and edge linearity, due to the properties of Wachspress coordinates. This is a simple construction, however, the use of more general barycentric coordinates, such as Mean Value Coordinates (Floater, 2003) or Moving Least Squares (Manson and Schaefer, 2010) is also possible.As a side note, the distribution of thediisolines can be improved, if we force thedi=12isolines to go through the center point of the domain. This ensures that the midpoints of the ribbons are mapped to the midpoint of the domain. Assume that we have central line sweep parameterization, i.e.,si=12holds for the center point. Let us precompute the Wachspress coordinate of the center point by the original mapping:mi=di(centeru,centerv). Then, to obtain the(si,dˆi)coordinates of an arbitrary point, apply a quadratic reparameterization, using the original(si,di):(4.5)dˆi(si,di)=di⋅(1+(1−si)si⋅(1−di)di⋅wi),see Fig. 4.4(right).Here the unknownwican be determined by substituting the center point(0.5,mi)into the equation:dˆi(0.5,mi)=mi⋅(1+0.25⋅(1−mi)mi⋅wi)=0.5,thuswi=2−4mi(1−mi)mi2.Note thatdˆimust not become negative. Looking at Eq. (4.5), our condition is that(1−si)si⋅(1−di)di⋅wi≥−1, where(1−si)si≤14and(1−di)di≤14. Sowi≥−16is sufficient, resulting in the inequality8mi3−8mi2+2mi−1≤0, which limits the range ofmito[0,≈0.877]. In the rare case of higher values, the above improvement cannot be applied.In the following subsections we will propose two parameterizations that satisfy all three requirements (4.2)–(4.4).Take arbitrary functionssi(u,v)that give 0 for every point on sideΓi−1, and 1 everywhere onΓi+1. For all other points inside the convex domain they return values in[0,1]. For example, the s coordinates of the bilinear, radial or central line sweeps are such functions. These naturally satisfysi∈[0,1],si−1=1andsi+1=0for a point onΓi. Let us define a blending functionα(t):[0,1]→[0,1]withα(0)=1andα(1)=α′(0)=α′(1)=0, for example the Hermite functionα0(t)from Section 3, or a variation of the rational blend function presented in Section 4.3:α(t)=(1−t)2t2+(1−t)2. Now we can definediby means ofsi−1andsi+1as follows:di(u,v)=(1−si−1(u,v))⋅α(si)+si+1(u,v)⋅α(1−si).If we are on the i-th side,si−1=1andsi+1=0, sodi=0, satisfying (4.2).Furthermore on the i-th side,di−1and its derivative are the same as that ofsi:di−1=(1−si−2)⋅α(si−1)+si⋅α(1−si−1)=si,∂di−1∂u=∂∂u(1−si−2)⋅α(si−1)+∂∂usi⋅α(1−si−1)=∂si∂u,because the derivatives of the blend function vanish. The same reasoning works for the derivative by v. Similarlydi+1=(1−si)⋅α(si+1)+si+2⋅α(1−si+1)=1−si,∂di+1∂u=∂∂u(1−si)⋅α(si+1)+∂∂usi+2⋅α(1−si+1)=∂∂u(1−si)=−∂si∂u,so the requirements (4.3) and (4.4) are satisfied. A simplified view of this construction is that taking a(u,v)point, we determine three consecutive sweep lines that go through(u,v), and determinedias the weighted combination ofdi=si−1onΓi−1anddi=si+1onΓi+1, according to the middle coordinatesi.Fig. 4.6shows constant s and d lines for this parameterization using the central line sweep parameterization as a basis (Várady et al., 2012). The first image is based on the right side of the polygon; the second on the small side at the top-right; and the third on the top side. Observe that all lines of the second image start the in same way (in a differential sense) as their counterparts in the first and third images.While the interconnected parameterization scheme satisfies all the requirements, its d-constant parameter lines have inflections. In this section we will show a different parameterization where the d-constant parameter lines are cubic curves. This computation is not direct, as it requires the solution of fourth- or sixth-degree equations. (Cubic parameter lines are the simplest, but quartics can also be used by extending the method below to spread the d constant parameter lines more evenly for large n-s, e.g.n≥8.)Similarly to the previous method, this parameterization also builds on a sweep line parameterization. For simplicity's sake, we will use the bilinear sweep, but the same can be done for radial or other parameterizations, that lead to higher degree equations. For ease of computation, we will assume that the base side lies on the u axis, with its endpoints at the origin and(1,0). Points A and Z are the distant endpoints of the left and right polygon sidesΓi−1andΓi+1, respectively. See Fig. 4.7.Let us define the d isocurves in such a way, that they “inherit” the same positions and tangents from the left and right side as the corresponding bilinear sweeping lines of those sides. We place a point B as shown in the figure at a λ proportion of the AC side, Y is defined symmetrically on the ZX side. λ is a fullness parameter, that controls the shape of the d isocurves to be more flat or curved. The ABYZ polygon defines a cubic Bézier curve. Note that the quadrilateral[A∼C∼(0,0)∼(1,0)]produces a sequence of tangents corresponding to the bilinear parameterization based on the left side of the polygon, and similarly the quadrilateral[Z∼X∼(1,0)∼(0,0)]produces a sequence of tangents corresponding to the bilinear parameterization based on the right side of the polygon. In other words, thediisolines will start and end in the same way as the sweep lines at sidesi−1andi+1.Thus the left and right sweep lines define a family of Bézier curves, the two inner points of the Bézier control polygon are on the chords defined by[B∼(λ,0)]and[Y∼(1−λ,0)], respectively. One of these curves goes through the(u,v)point at parametersˆ. Let Q be the point on the top curve defined by the ABYZ control polygon atsˆ. The line through Q and(u,v)intersects the base side at P.Obviouslyv=u−puqu−pu⋅qv,where upper indices denote coordinates, e.g.Q=(qu,qv). This can also be written as(qu−pu)v+qv(pu−u)=0.From the definition of Q, we haveQ=(1−sˆ)3A+3(1−sˆ)2sˆB+3(1−sˆ)sˆ2Y+sˆ3Z,and similarly,P=(pu,0), wherepu=(1−sˆ)3⋅0+3(1−sˆ)2sˆ⋅λ+3(1−sˆ)sˆ2⋅(1−λ)+sˆ3⋅1.This leads to a sixth-degree equation insˆ, that can be solved by various numerical methods, see Press et al. (1992). (The sweeping line construction guarantees that there exists a unique line that goes through(u,v), thus we need to compute only the real root in the[0,1]interval, and can ignore the other ones.) Now we define d asd=vqv=v/((1−sˆ)3⋅av+3(1−sˆ)2sˆ⋅bv+3(1−sˆ)sˆ2⋅yv+sˆ3⋅zv).Note, that using13for the fullness parameter λ, the parameterization of the base side becomes linear, and the equation simplifies to fourth degree; however, the isoparameter lines become somewhat flat. A larger λ gives more fullness, but requires solving the above sixth-degree equation. This construction also satisfies the requirements of constrained parameterization (see Fig. 4.8).This section deals with the direct generalization of the Coons patch to n sides following the original idea of summing up linear side interpolants and subtracting corner correction patches (see also Section 3). Having a general polygonal domain, we define side and corner blending functions, and apply constrained parameterization for the individual ribbons. Either the interconnected or the cubic method can be used, or anything else that satisfies the requirements (4.2)–(4.4). Running the indices from 1 to n, the following surface equation is obtained:S(u,v)=∑i=1nRi(si,di)⋅Bi(d1,…,dn)−∑i=1nQi,i−1(si,si−1)⋅Bi,i−1(d1,…,dn).Along a given side, similarly to the reformulated Coons patch, five surface interpolants — three linear ribbons and two corner correction patches — are combined to evaluate a point on the boundary. As these satisfy the rules of constrained parameterization, the patch will interpolate the related boundary and cross-derivative functions. A short proof can be found in Appendix A; for more details see Salvi (2012). A few examples are shown in Section 7.Note, that forn=4this equation reproduces the Coons patch when the cubic Hermite blending functions are used, but only a close approximation of the original patch can be obtained when rational distance-based blending functions are applied.The patch defined in the previous section is based on linear ribbons. These are very simple and can be computed efficiently. On the other hand, linear ribbons may strongly deviate from highly curved n-sided surfaces, and their combination may cause unexpected curvature changes, when the points in the interior are computed by the affine combination of relatively “distant” positions. This motivated us to introduce a special curved ribbon that actually interpolates three consecutive linear ribbons. The curved ribbons align much closer to the final n-sided patch, and their combination, even in extreme cases, yields more predictable interior shapes (see Fig. 6.1). Using curved ribbons leads to a new multi-sided patch formulation, called composite ribbon patches.A curved ribbon is defined as the combination of three consecutive linear ribbons, and it is actually a Coons patch with three of its four sides given, defined over a local rectangular domain. LetCi(si,di)denote the curved ribbon for the i-th side. We simplify the notation and drop the indices of s and d, as it does not cause any ambiguity. The definition ofCiis as follows (see Fig. 6.2):Ci(s,d)=Ril(s,d)H(s)+Ri(s,d)H(d)+Rir(s,d)H(1−s)−Qil(s,d)H(s)H(d)−Qir(s,d)H(1−s)H(d),whereRil(s,d),Rir(s,d),Qil(s,d)andQir(s,d)denote ribbons and correction patches on the left and right sides, respectively. We parameterize these by the local coordinates of the i-th side as follows:Ril(s,d)=Ri−1(1−d,s)=Pi−1(1−d)+γ(s)Ti−1(1−d),Rir(s,d)=Ri+1(d,1−s)=Pi+1(d)+γ(1−s)Ti+1(d),Qil(s,d)=Qi,i−1(s,1−d)=Pi(0)+γ(s)Ti−1(1)+γ(d)Ti(0)+γ(s)γ(d)Wi,i−1,Qir(s,d)=Qi+1,i(d,s)=Pi+1(0)+γ(d)Ti(1)+γ(1−s)Ti+1(0)+γ(d)γ(1−s)Wi+1,iand apply anH(t)blend function, such as the Hermite blend function or the rational blend function, that creates a specialC1Coons patch over a four-sided domain.Due to the above construction, d is constrained to lie in[0,1]. This holds for the Wachspress and interconnected parameterizations, but not for the bilinear and cubic parameterizations.Note that the fourth side of the curved ribbons is “floating”; it comes as a by-product of the three interpolating linear ribbons. Constraining the fourth side can be an advantage, as it offers further degrees of freedom to adjust the shape. At the same time, this fourth side, as in the case of simple linear ribbons, has a relatively small influence due to the blending functions.Also, using our notation, the classical Gregory patch (Charrot and Gregory, 1984) can be interpreted as a combination of two-sided curved corner interpolants, that are made up of two linear ribbons minus a single correction term, as follows:Ri,i−1Gregory(si,si−1)=Ri−1(si−1,si)+Ri(si,1−si−1)−Qi,i−1(si,si−1).In the next sections we will present new schemes that combine curved ribbons.Curved ribbons can be used as side interpolants for simple transfinite interpolation patches using the singular blending function (Eq. (4.1)). Unfortunately, the direct generalization of Coons patches, introduced in Section 5, does not work with curved ribbons. Therefore, we propose an alternative representation that combines curved ribbons in a different way, and eliminates correction patches; thus yielding a simple formula:S(u,v)=12∑i=1nCi(si(u,v),di(u,v))Bi(d1(u,v),…,dn(u,v)).In this case, we use a constrained parameterization as defined earlier in Section 4.6. According to the characteristics of theBiblend function, for any point on the i-th boundary all addends of the sum vanish except forCi−1,CiandCi+1. Since each of these ribbons also interpolates the corresponding three boundaries, the related three points on these ribbons are the same. Their cumulative blend isBi−1+Bi+Bi+1=Bi,i−1+Bi+Bi+1,i=(Bi,i−1+Bi+1,i)+Bi=1+1=2,hence the division by two in the surface equation. This patch also satisfies the boundary constraints. A short proof can be found in Appendix B; for more details see Salvi (2012).It can be proven that the ribbon interpolation property remains valid, if we ignore the last parameterization requirement (4.4). Then we have the same tangent plane for every boundary point as the respective curved ribbon, but not the same tangent vector. This enables the use of simple parameterizations, such as the Wachspress method, which is computationally more efficient. The resulting patch reproduces the boundary constraints in aG1sense, as shown in Appendix B. The visual difference between theC1andG1patches can be noticed only at extreme boundary configurations.To sum it up, in this section we have created new transfinite surface schemes that (i) use curved side interpolants, (ii) have roughly the same computational complexity as other transfinite methods, and (iii) avoid using singular blending functions.In this section we show a few examples to evaluate our results. Where needed, we will refer to two prior schemes. The Side-based (SB) patch suggested by Kato (1991) applies singular blending functions. The Corner-based (CB) patch proposed by Gregory (1986) combines corner interpolants. We will use the abbreviations GC and CR for the Generalized Coons and the Composite Ribbon patches, respectively.Example 1Even curvature distribution and predictable patch interior is of great importance. In other words, curvature artifacts must be avoided. Our experience shows that in this respect CR patches seem to be the best, in particular for difficult boundary configurations. For simple cases, the curvature distributions are similar. This similarity is strong between the GC and CB patches, which are “close relatives” in generalizing the Coons patch, in spite of the fact that the GC patch is a combination of side interpolants, while the CB patch uses corner interpolants.The images in Fig. 7.1show mean curvature maps for SB, CB, GC and CR patches. Observe the undesirable narrow curvature variations that occur along some edges of the SB patch; this problem disappears when using GC or CR patches, yielding more natural transitions between the ribbons. Table 1(a) shows numerical values of mean curvature values including its minimum, maximum, average and standard deviation for all four schemes.These values were computed using a dense triangular mesh; if exact values are needed the derivatives are computed using the formulae in Appendices A, B, though this is computationally much more demanding.Example 2Computational efficiency is determined by three components: (i) evaluating the interpolants, (ii) computing the blending functions, and (iii) computing the ribbons' parameterization. Assuming cubic B-spline boundary curves, the basic interpolants are cubic-by-linear for SB and GC, bicubic for CB, and biquartic for CR. The blend functions are rational functions of the distances with degree2(n−1)for SB, and2(n−2)for the other patches. Finally, the mapping between the domain and the ribbons can be characterized by a bilinear polynomial for SB and CB, a quintic for GC, and a trigonometric parameterization for CR.Our experience shows that 97% of the evaluation time is used for ribbons, and only 3% is devoted to parameterization and blending functions. Table 2shows the computation times for a single point on a 2.5 GHz processor. As expected, the SB patch is the fastest, and the CR patch is the slowest. The ratios of computing different parameterizations are the following: interconnected → 1, cubic → 1.78, Wachspress → 1.28. (Computations can be made more efficient with extensive caching.)Example 3Another interesting question is how these rational transfinite patches can approximate regular shapes, such as an octant of a sphere. We have used approximate B-spline boundaries for the circular arcs with a constraint that the middle point of the patch lies exactly on the ideal sphere. In this test CR patches proved to be the best; in Fig. 7.2planar contours, a sensitively scaled Gaussian curvature map and isophotes illustrate the quality of the approximation. See Table 1(b) for numerical comparison of the radius values for all four schemes.Example 4Stability is a qualitative characteristic, that is hard to define for multi-sided schemes. Assuming that we are editing one of the boundaries, we would expect that the shape surrounded by the other sides is generally unaffected. Similarly, if we insert a new edge, i.e., we create an(n+1)-sided patch from an n-sided, we expect that the parts of the patch that are not directly adjacent will remain unchanged. Our experiment shows that in this respect CR patches are good, CB and GC patches are reasonable, and SB patches are somewhat weaker.Fig. 7.3shows a somewhat artificial model that interpolates a general topology curve network. It contains one 2-sided, two 3-sided, two 4-sided, one 5-sided and one 6-sided patch, all smoothly connected. For the 4-sided loops ordinary Coons patches were used, for the 2-sided a special formula shown in Várady et al. (2012) was used, and the rest was represented by CR patches. The cross-derivative functions were extracted from the curve network, and the ribbons satisfy tangent plane constraints at the vertices. See the shaded visualization (a) and the contours (b). This is an almost symmetric surface configuration, except that a corner was cut off at the right side, which converted the five-sided patch at the left into a six-sided patch. The isophote lines (c) and mean curvature map (d) figures show that the patch has changed only to a minimal extent in the middle. It can also be observed that these patches provide visualG2continuity in non-extreme configurations, see the smooth variation of the isophote lines across the boundaries.It is a particular advantage of transfinite schemes that they ensure a very concise representation for complex shapes. For example, the above model can be fully defined by 5 KB, while using quadrilateral B-splines would require more than 100 KB.Finally, a more complex example is shown in Fig. 7.4. The three close-up views show the face (a) without boundaries, (b) with the default ribbons and also with a (c) slicing map to showG1continuity. This collection of faces consists of six 5-sided, and two 4-sided patches.

@&#CONCLUSIONS@&#
