@&#MAIN-TITLE@&#


@&#HIGHLIGHTS@&#
We propose a protocol to construct privacy-preserving publish-subscribe overlays.Two extensions, probabilistic forwarding and the shell game protect anonymity.The construction protects against malicious insiders and global observers.Simulation results show effective privacy-protection.

@&#KEYPHRASES@&#
Anonymity,Overlay networks,Publish-subscribe,

@&#ABSTRACT@&#
Publish-subscribe is an increasingly popular messaging pattern for distributed systems, supporting scalable and extensible programming, and optimal spatial, temporal, and control-flow decoupling of distributed components. Publish-subscribe middleware and methods were extended towards supporting security, in particular confidentiality, and increased availability, yet a few prior works addressed anonymity of participants. Anonymity of senders and receivers may however be crucial, e.g., for supporting freedom of expression in regimes where political repression and censorship prevail. In this article, we review basic security and privacy requirements and introduce a new attacker model based on statistical disclosure, used to challenge anonymity. We elaborate on design options for privacy-preserving publish-subscribe systems and present a novel system that leverages peer-to-peer networking concepts; this novel approach protects subscriber anonymity by means of Probabilistic Forwarding (PF) and through a novel so-called Shell Game (SG) algorithm. We verify our solution against the requirements and provide a simulation-based analysis of the effectiveness of our approaches in light of our attacker model. The results show that the SG algorithm efficiently protects subscriber anonymity, and that anonymity sets can be adjusted via PF.

@&#INTRODUCTION@&#
Publish-subscribe (Pub-sub) drives many application in privacy-challenging environments, e.g., private car sharing systems or in a citizen journalism scenario in which participants could be subject of repression and political prosecution. Such a citizen journalism scenario matches micro-blogging services like Twitter.A pub-sub system disseminates information from producers (publishers) to consumers (subscribers) using third parties, so-called brokers. Brokers store and match interests of subscribers (subscriptions) against publications from publishers, to forward the publications as notifications to subscribers.Existing solutions for secure and privacy-preserving pub-sub [1–5] only protect the confidentiality of the exchanged information, so that the content of messages is not leaked to curious attackers. However, these systems do not protect the meta data of the communication such as the network IDs of publishers and subscribers—the anonymity.A dissident may for instance exchange encrypted information with other dissidents (confidentiality). Communication meta data however still reveals the fact that he communicates with dissidents (no anonymity). This may already lead to political repression.We therefore argue that a privacy-preserving pub-sub system must protect confidentiality and anonymity as well. In our scenario, once an attacker gets hold of one dissident’s encryption keys, other dissidents may be easily tracked down if anonymity is not protected as well. Furthermore, for application scenarios like citizen journalism, content should be made available to a large audience, and therefore does not allow for confidentiality in the first place.To achieve anonymity in pub-sub, it is crucial to avoid topologies with a central broker, because it would have full knowledge about publishers and their subscribers. To protect anonymity, a pub-sub system needs to distribute this brokering functionality onto all participants. While the distribution of brokering functionality prevents a single malicious participant from breaking anonymity, additional measures are required to prevent large-scale colluding eavesdroppers from inferring communication sources and sinks as publishers and subscribers from message flows.Nodes in such distributed systems take multiple roles simultaneously, namely the roles of publisher, subscriber, and broker. Information is disseminated from publishers, the root nodes in distribution trees, to subscribers in branch or leaf position. Additional nodes take over brokering functionality at branch positions and thus forward information on behalf of other nodes. The leakage of information of such distribution trees to attackers must be prevented for anonymous pub-sub.The main contribution of this article is a distributed pub-sub system that is able to protect the confidentiality of the exchanged information as well as publisher and subscriber anonymity at the same time. In this context, we introduce two novel mechanisms to protect anonymity in distributed pub-sub: Probabilistic Forwarding (PF) and the Shell Game (SG) algorithm. PF protects the anonymity of subscribers in leaf positions of dissemination trees by letting them forward received information probabilistically to other non-subscribed nodes. SG protects the anonymity of subscribers by shuffling dissemination trees via position swaps of adjacent nodes. For the evaluation of these two mechanisms, we introduce the model of an anonymity attacker structured along three dimensions: scope, interaction, and knowledge of secret. We evaluate our distributed pub-sub system via extensive simulations by exposing it to a strong attacker with global scope, passive interaction, and without secret knowledge. Our simulations results indicate that we can achieve a protection of subscriber anonymity close to the optimum anonymity according to the presented metrics.The rest of the article is structured as follows: Section 2 summarizes security and privacy requirements and introduces the model of the anonymity attacker. Section 3 discusses available technologies in the context of building blocks, followed by a discussion of existing systems. In Section 4, we present our existing anonymous and distributed pub-sub system and introduce two new mechanisms for protecting the anonymity of subscribers: PF and SG. We evaluated this system extensively via simulation by exposing it to the attacker and summarize our major evaluation findings in Section 5. Finally, Section 6 concludes the article.In this section, we introduce a notation and a model for distributed pub-sub systems. Furthermore, we discuss requirements for secure and privacy-preserving pub-sub and present an attacker model targeting the anonymity in such systems.A pub-sub system is established on top of a basic overlay that is a graph G ≔ (V, E) with peers V and edges E ⊂ V × V. The set of attributes A represents user interests, e.g., the Twitter hashtag #tahrir. Per attribute a ∈ A, we have a set of subscribersSa⊆Vand a set of publishersPa⊆V.On top of the basic overlay G and per attribute a ∈ A an anonymous pub-sub system establishes an attribute meshMa:=(Va,Ea).Mathat connects all subscribersSawith all publishersPa. To ensure connectivity ofMa,P2P-based pub-sub systems, e.g., [3,4,6], distribute the brokering functionality among all nodes in the basic overlay. Nodes, which only take the broker role in an overlayMabut not publisher and subscriber role, are called forwardersFa. The set of all nodes inMais denoted byVa:=Sa∪Pa∪Fa.Each node v ∈ V has different kinds of neighbors. N(v) as defined in Eq. (1) represents all neighboring nodes of v in the basic overlay G. The neighborhood N(v) can be further differentiated within an attribute overlay. In inbound neighborsNa+(v)⊆N(v)(Eq. (2)) forward notifications regarding a to the local node v; outbound neighborsNa−(v)(Eq. (3)) receive notifications regarding a from node v.(1)N(v)={w}:v,w∈V∧((v,w)∈E∨(w,v)∈E)(2)Na+(v)={w}:v,w∈Va∧(w,v)∈Ea(3)Na−(v)={w}:v,w∈Va∧(v,w)∈EaThe messages exchanged in a pub-sub system are either of type advertisement, subscription, or notification. An advertisementmaadvfor an attribute a is originated by a publisherp∈Paand is disseminated by following the edges E of the basic overlay. A subscriptionmasubis originated by a subscribers∈Saand establishes the set of overlay edges Ea. A notificationmanotifis originated by a publisher p, and only traverses edges in Ea.Manifold requirement definitions for secure and confidential pub-sub have been proposed, e.g., in [7,8]. We summarize these requirements and extend the anonymity definition .We define privacy in pub-sub as the combination of participant anonymity and confidentiality. Both requirements are closely related, since the lack of anonymity can lead to a violation of the confidentiality requirement and vice versa [9]. We use the set-based anonymity definition of Pfitzmann and Hansen: “Anonymity of a subject (participant) means that the subject is not identifiable within a set of subjects, the anonymity set.” [10]. In a communication system, the maximum anonymity set is the set of all participants, e.g., all nodes V. Even if an inside attacker compromises confidentiality, anonymity should be still preserved.Subscriber anonymity ensures that every subscriber can hide in an anonymity set anonSet from the perspective of every attacker. An attacker attempts to establish the minimal anonymity set containing only subscribers, and thus disclosing these subscribers, for a given attribute a from a set of attributeA. Thus, a pub-sub system meets subscriber anonymity w.r.t. to an adversary adv, and a set size k, if Eq. (4) holds. That is, the attacker cannot reduce any anonymity set below the size of at least k participants.(4)∀a∈A:|anonSet(a)|≥kPublisher anonymity ensures that a publisher cannot be identified within an anonymity set. Again, the size of the anonymity set provides a metric for the degree of the provided anonymity protection.Information is kept and transmitted secretly between publishers and subscribers. That is, no outsider can access notification content (notification confidentiality), attributes (advertisement, subscription, and notification confidentiality), and communication metadata.A pub-sub system has to remain scalable in terms of number of supported nodes. For that, the overhead at single nodes should grow at most proportionally with the node number. Overhead incurs in terms of communication, computational, and memory overhead, and has to be minimal.Only authorized participants can send notifications. Moreover, authenticity and integrity of messages can be verified.An anonymity attacker on pub-sub systems can have different capabilities along the three dimensions: its activity level, its ability to infiltrate the system, and his attack scope. Regarding its activity level, an attacker can be completely passive and thus only eavesdrops messages. In contrast, an active attacker interacts with the system by modifying and spoofing messages. An internal attacker controls one or several malicious nodes within the system. Thus, he has knowledge about secrets, pseudonyms, and cryptographic keys, while the external attacker does not possess any secrets. The attacker is called global if it attacks on the basis of global network knowledge, and local or colluding if the attacker uses one or several colluding nodes for attacks.The often referred honest but curious attacker [1,8,11] maps to the passive attacker with local scope and without secrets. We require an anonymous pub-sub system to protect against an active insider with local scope [6] (malicious node), as well as against a passive external attacker with global scope. This combined attacker is more powerful than the honest but curious attacker, and resembles NSA-like capabilities, i.e., large scale traffic monitoring in combination with compromised nodes. To extend our previous work, this article focuses on the passive external attacker with global scope.The goal of this attacker is to break publisher and subscriber anonymity by monitoring all messages. One scenario for this attacker is intelligence organizations attempting to obtain network IDs of Online Social Network (OSN) users communicating about a certain attribute. For that, these organizations monitor the message flow of many Internet Service Providers (ISPs) to determine IP addresses of users using a certain attribute.This attacker remains passive as it does not manipulate messages, external as it does not possess a priori key material, and global as it can observe the full communication network. According to the system model (cf. Section 2.1), the attacker observes notifications mnotif, knows an attribute a without associated secrets, possess topology information of the membership management G ≔ (V, E), and attempts to learnSaorPa. The attacker can achieve this goal via statistical disclosure attacks [12–14]. With them, the attacker discloses message sinks and nodes that remain persistent inMaafter overlay restructurings as subscribers.The attacker isolatesMa,e.g., by observing notification flows. Assuming a very strong attacker that also knows the amount of publishers|Pa|and subscribers|Sa|,the attacker sets up a probability distribution of all nodes Va. In case publishers and subscribers dominate the overlay over forwarders, i.e.,|Pa∪Sa|÷|Va|>0.5,the attacker immediately breaks publisher and subscriber anonymity. In addition, the attacker uses timing information to isolate so called leaf nodes via message flow fromMaSuch nodes have no outgoing neighbors inMa(Na−(v)={}). The attacker de-anonymizes such nodes as subscribers immediately in accordance with the overlay construction. We measure the attackers success via classification accuracy that is defined as the ratio of correct classifications (true positives TP and true negatives TN) among all classifications (TP, false positives FP, TN, and false negatives FN), Equation (5). Thus, the global attacker succeeds for accuracy > 0.5, i.e., it guesses publishers and subscribers better than a coin flip. In terms of anonymity size [10], anonSet(a) determines the set of nodes the attackers considers to be inSaandPa.(5)accuracy=TP+TNTP+FP+TN+FNIn this section, we discuss related work for anonymous pub-sub. The design of anonymous pub-sub leaves many choices for foundational technologies. We split anonymous pub-sub into six building blocks that enclose an elemental part of functionality each. In the following, we first discuss these building blocks and their underlying technologies. Second, we summarize related work along these building blocks.Fig. 1provides an overview of the six building blocks and their interdependencies. The membership management interconnects nodes. The attribute localization facilitates the discovery of desired information and is supported by matching that provides privacy-protection on the basis of keys and cryptographic material derived during key management. Afterwards, mechanisms for content distribution ensure the delivery of the actual content. In the following we briefly discuss each of these building blocks.The membership management ensures the overall connectivity of the pub-sub overlay and it can be either centralized, decentralized, or distributed. In a centralized membership management, a single broker acts as intermediary (forwarder) between publisher and subscriber. Decentralized systems make use of interconnected brokers, so-called broker networks [15], and assign each node statically to one of these brokers. Centralized and decentralized systems have the drawback that one, or few nodes respectively, learn about all communication relations, which violates anonymity. In distributed membership management, each node in the system can take the role of a publisher, subscriber, and broker simultaneously. This requires each node to run a membership management protocol that usually follows a P2P approach. The employed P2P approach can be either unstructured, e.g., SCAMP [16], or structured, e.g., Scribe [17]. Structured protocols cause less signaling overhead, but the structure they impose on the resulting overlay can be exploited by an anonymity attacker.After a pub-sub overlay is established by the membership management, nodes need to localize attributes within it by querying brokers. A central broker that distributes attribute knowledge among publishers and subscribers, has global knowledge. In case such a broker gets compromised, the anonymity of the system is broken. Splitting this knowledge on multiple brokers helps, but does not solve the problem completely. When distributing brokering functionality onto all peers, a distributed localization service is required that either places attribute knowledge at rendezvous nodes or that floods the basic overlay with information on that attribute.The usage of rendezvous nodes distributes attribute knowledge equally among all nodes. However, only one node remains responsible for each attribute and the attacker can attempt to monitor (global passive attacker) or compromise (passive insider) this node to break the anonymity for one attribute. Flooding eliminates this attack vector, but results in higher signaling overhead [18,19].To ensure confidentiality and authenticity of exchanged messages, and thus to prevent the disclosure of any information that can break anonymity, key management is crucial for anonymous pub-sub. Keys and other cryptographic material, e.g., certificates, can be managed either by a central Trusted Third Party (TTP) or by a hierarchy of TTPs. When using a central TTP [20], anonymity can only be protected when the TTP and forwarders do not collude. The combination of keys and routing information can lead to the complete disclosure of participants and their interests. Furthermore, as a TTP is a Single Point of Failure (SPoF), a pub-sub system should not presume an online TTP. Hence, the TTP is only involved once per joining participant for the provisioning of the initial cryptographic material.Rather than using a single TTP, keys can be also managed in a hierarchy, e.g., via a separation of attributes in groups and subgroups [21] a responsible TTP or TTP-role each.After setting up the overlay and a localization service, notifications and advertisements have to be matched with subscriptions by forwarders. Matching might easily violate the confidentiality of publishers and subscribers, i.e., expose their interests. A multitude of techniques exist to implement the confidential matching between subscriptions and advertisements/notifications. The simplest form of matching is provided by using pseudonyms [22–24] or bloom filters [8,25–27]. Both can be compared efficiently, but Bloom filters additionally allow for an aggregation of attributes. Order-preserving cryptography [5,8,25,28] and Identity-Based Encryption (IBE) [4] can be also applied for attribute matching. They also enable a comparison of numerical values (greater than, less than, ...) and a text search (contains keyword). Zero-Knowledge Proofs (ZKPs) can be used to prove interest without revealing that interest [2], and seems to provide best protection of confidentiality, but are also computationally expensive and result in signaling overhead.On top of the basic overlay provided by the membership management, nodes establish an additional meshMaper attribute a by making use of the attribute localization and matching service. These attribute meshes, or so-called communities, have to be maintained and optimized according to certain optimization goals in the presence of node churn. Such optimization goals can be the efficiency of the resulting mesh in distributing content, e.g., low delay between publishers and subscribers [29].Once attribute meshes are established, the content distribution ensures the confidential delivery of authentic content while it needs to preserve the anonymity and low signaling overhead at the same time. The security of the content distribution strongly depends on the key management and on the membership management. Thus, it has to be considered in combination.To distribute a notification, floodingMaensures delivery. With unreliable membership management, additional anonymous gossiping [30] can increase delivery reliability. However, modifications to anonymous gossiping are required. For instance, knowledge of the distance to the next publisher and subscriber should be avoided to protect anonymity.Regarding anonymity and confidentiality, notifications in content distribution should not reveal more information than advertisement in the attribute knowledge building block. For that, the content of notifications must be encrypted. While symmetric cryptography is fast, multilayer encryption such as onion routing [31], Multiple Layer Commutative Encryption (MLCE) [32] must be considered with care due to their computational overhead.Anonymity as a requirement in anonymous pub-sub has been first introduced by Wang et al. [7]. In particular, they point out that pub-sub may provide anonymity against the passive internal attacker, assuming each path between publisher and subscriber contains at least three nodes (cf. onion routing [33]) in the basic overlay. However, anonymity protection remains in a theoretical stage. Furthermore, challenges of key management are not resolved as pairwise keys are required and key management is left as open.Srivatsa and Lui [23] as well as Raiciu and Rosenblum [8] address key management and matching via an online TTP and pseudonyms. However, they require a central broker, or broker network respectively, and thus cannot provide publisher and subscriber anonymity. Chen et al. [5] distribute the broker role, but leave key management out-of-band. Their approach uses a searchable ciphertext method for matching.At the same time, first Peer-to-Peer (P2P)-based approaches that address key management as well as anonymity appeared, e.g., Shikfa et al. [3,32] and Tariq et al. [4]. However, the overlay networks created by these approaches still leak information that can be exploited by an attacker to break anonymity: with the approach of Shikfa et al., public keys of several nodes leading towards the recipient are required to be known at all times (passive internal attacker, passive global attacker). Hence, the attacker can reason about the overlay position of the recipient. With the approach of Tariq et al., subscribers learn about other subscribers with similar attributes (passive internal attacker).Following these P2P solutions, further advancements have been made in the area of key management and matching, such as the work from Nabeel et al. [1,2] (homomorphic cryptography) and Di Crescenzo et al. [11] (oblivious transfer (OT)). These mechanisms protect anonymity and confidentiality against the internal attacker. However, message flows can be still attacked by the global passive attacker to break anonymity.Summarizing the related work, none of them provides anonymity to both, publisher and subscriber, against both, the global and the internal attacker, while still being scalable. Several systems, which provide confidentiality, depend on expensive key exchange mechanisms. Thus, scalability and minimal overhead requirements are not fulfilled. None of those systems achieves all of the listed requirements at once.In this section, we describe our anonymous pub-sub system that builds up on a system formerly introduced by us in [6]. We significantly enhance this work by providing additional resistance against an anonymity attacker that has global knowledge on all communication in the system. The former system provided anonymity protection against an internal attacker with a very restricted view on the overall system. To protect anonymity in the presence of the more powerful global attacker, we introduce Probabilistic Forwarding (PF) and the Shell Game (SG) as two novel anonymity-preserving mechanisms for pub-sub.Fig. 2shows an example for our system. We presume a basic overlay network that is established by a membership management approach. A key management ensures the exchange of cryptographic material. On that basis, publishers (squares 1, 5) distribute attribute knowledge via a basic overlay, so that subscribers (rhombuses 7, 9) can match their interests. Afterwards, they establish an attribute overlay by sending anonymity-preserving subscriptions via the basic overlay to the publishers. As a result, all nodes on the subscription path will be included as brokers to the attribute overlay and thus will potentially also include non-subscribers or forwarders (circles 3, 6)The system ensures that the TTP is not involved in the actual message dissemination. Forwarders ensure a connected attribute overlay without requiring publishers and subscribers to know each other, and thus anonymity is protected.To describe our system, the remainder of this section follows the structure of the building blocks on the right side of Fig. 2. Within community management, we introduce SG as novel approach for anonymity protection. Within content distribution, we provide a novel adaptation of cover traffic (PF) to overlay networks, to protect anonymity as well.IP serves as communication protocol between peers for membership management. The gossiping protocol SCAMP [16] maintains the neighborhood, i.e., the set N(v) (cf. Function (1)). Successive building blocks use UDP over IP to ensure every packet is well controlled and no undesired information leak occurs. Heartbeat messages between neighbors support the detection of connection failures. Furthermore, a padding of these heartbeats creates a covert channel for successive building blocks. Heartbeats carry messages of the other building blocks. The padding prevents the global passive attacker from inferring message type from size. As an exception, we allow content distribution to send notifications outside of heartbeats. As a result, membership management does not restrict content distribution in terms of delivery time, size, or rate.An offline TTP performs key management with access control. The TTP serves as trust anchor by providing joining nodes with keys to subscribe and to decrypt attribute content. Furthermore, it issues certificates for publishers, so that they can disseminate authenticated content. The TTP has a secret private key skTTPand a public key pkTTPthat is known by all participants.Whenever a new publisher joins the system, he creates a secret/public key pair (ska, pka), and obtains a certificate certaon his public key pkafrom the TTP. Afterwards, the publisher can sign advertisements and notifications with skaand attaches certa. Hence, every receiving node can verify the authenticity of received advertisement and notification messages. In addition, the TTP hands out a key Kato all publishers Paand all subscribers Saof attribute a. This key is used for protecting the confidentiality of exchanged messages for attribute localization, matching, and in content distribution. Hence, only legitimate nodes can subscribe to an attribute a and access the respective content.In addition to the keys provided by the TTP, neighboring nodes in the established overlay exchange pair-wise keys to secure all exchanged messages. As a result, every message looks different on each hop, thus impeding the analysis of the system from the outside.To localize attributes, knowledge on them needs to be distributed in the system. For that, we flood the basic overlay G per attribute a with advertisement messages. Every advertisement contains an attribute pseudonym for matching as well as a novel transaction pseudonym to prevent basic overlay routing loops and to optimize the resulting attribute overlay.To construct an advertisement message, a publisherp∈Paderives an attribute pseudonym tafrom attribute a by encrypting it with the shared secret Ka, so thatta={a}Ka. In addition to ta, the publisher creates a random transaction pseudonym, a nonce h, to distinguish multiple publishers for the same attribute and thus prevents overlay partitioning and loops. The publisher then attaches ta, h to the advertisement message madv, and sends the message to all its neighbors N(p) in G. The transaction pseudonym allows nodes in G to resolve the challenges of duplicate detection and path length minimization as illustrated in Fig. 3. Left: without global node identifiers, f1 could not detect the loop without h. Right: f4 cannot detect duplicates without h.In addition to loop and duplicate detection, we include a novel mechanism for overlay path optimization. It allows to use the shortest paths in the basic overlay between publishers and subscribers by avoiding a hop count field that could be exploited in an attack. Nodes do not simply forward an advertisement message unmodified, but instead hash the included nonce h via a cryptographic hash function H to valueh′=H(h)first. As a result, instead of a single transaction pseudonym, we are using a hash chain per path. Upon reception of the same advertisement messages via two different neighbors, it enables a node to compare the length of the two possible subscriptions paths. For that, it needs to check if one hash value can be mapped on the other via successive hashing. The value that can be mapped onto another, has its origin from a shorter path in the basic overlay.Using a hash chain rather than transaction pseudonym and hop counter yields two major benefits: First, a hash chain does not reveal the distance to the publisher (publisher anonymity). Second, active internal attackers cannot lie (decrement) about the hash chain to gather more traffic.The publisher initializes a hash chain with nonce h and attaches it together with tato an advertisement messagemadv=(ta,h). Forwarders keep the triples (ta, h, v) in routing tables, where v is the neighbor it received the message from. When a forwarder receives an already known ta, it checks if one value can be mapped onto the other to get to know if both transaction pseudonyms originate from the same publisher and if there is a new and shorter path.Fig. 4provides an example:p∈Paobtains certafrom the TTP and creates an advertisement messagemadv=(ta,tasigska,certa,h)containing the encrypted attribute, the hash value, the signature, and the certificate. Afterwards, it floods the advertisement to all its neighbors N(p).Nodes perform matching via binary comparison of pseudonyms. For that, subscribers prepare attribute pseudonyms tafor their attributes a, and compare the pseudonym with incoming advertisements. In case of a match, a subscription is send on the reverse path of the respective advertisement.Fig. 5illustrates the process of attribute localization (left) via advertisements, matching (center), and community management (right) via subscriptions. Here, tais the attribute pseudonym of the advertisement, and txthe interest of subscriber s. When the system contains multiple publishers for a, every publisher p ∈ Pathat receives an advertisement for a subscribes to it. This ensures the connectivity of overlayMa.Attribute overlays, so-called communities, must be maintained under churn. Furthermore, resulting maintenance operations must ensure anonymity and confidentiality at the same time.We use heartbeat messages to detect node and connection failure, as well as means to exchange management messages in a privacy-preserving manner. For that, we increase the packet size of heartbeat messages via padding to enclose the largest possible management message. Now management messages can be “piggy-backed” inside heartbeats.Nodes leaving the attribute overlay send unadvertise and unsubscribe messages to their neighbors. Likewise, a node detecting a neighbor’s failure acts like having received such a message from the neighbor. This ensures that obsolete routing table entries are purged and replaced with alternative entries.The Shell Game (SG) shuffles the overlay topology to prevent the global passive attacker from inferring roles from the topology. We use a method inspired by the real-life shell game to restructure an overlay network, without that a global attacker can learn its actual structure. In a shell game, a ball is hidden under a shell. Then the positions of the shells are swapped, so that a player cannot tell the shell with the ball from empty shells.In our pub-sub SG, nodes swap overlay positions by exchanging their neighborhood sets. We hide those exchanged messages within heartbeat messages (cf. community management) and thus prevent the attacker from observing position changes. Thus, we call this approach SG algorithm.Every node starts the SG as soon as it has at least one overlay neighbor. When an overlayMais created by connecting subscribers with publishers along their subscription paths,Mais immediately shuffled even before the first notification reaches the subscribers. Hence, the global attacker cannot observeMa“before” the SG takes place. As a result, the subscriber anonymity set for the global attacker equals the size of the whole overlay:|anonSet(a)|=|Va|. Furthermore, the attacker accuracy for classifying subscribers remains as low as random guessingaccuracy=|Sa|÷|Va|.A node v first executes the Procedure shellGame upon the connection of the first subscriber. An exponential decay function (line 1) terminates the SG. The attribute overlay membership time t(v) of the node constitutes the variable parameter. Now, the probability of v performing a SG decreases over time (lines 2–3). Nodes not playing the SG schedules another invocation after an exponentially distributed waiting time (lines 4–7). Otherwise, v chooses a neighborw∈Na−(v)in (line 8, cf. Function (3)), and sends a message to w asking to swap positions in the overlay (line 9). As a result, w hands over(Na−(w),Na+(w))to v, and notifies these neighbors. Then v completes the SG by handing over(Na−(v),Na+(v))to w and notifies these neighbors as well (lines 10–13).Fig. 6depicts an overlay with one publisher, four subscribers, and three forwarders (left). The SG is performed two times, the outcomes are shown at the center/right of Fig. 6. We mark overlay changes between subsequent SGs in gray and highlight the node that executes the algorithm as dashed.In Fig. 6, subscriber s4 initially joins the overlay, and its parent node f runs the algorithm to swap with s4 as depicted in step (center). After that, the nodes p and f3 obtain new neighbors and also run the algorithm. In step 2, f3 swaps with child s3 while p does not swap. Then, s4 detects another change, new neighbor s3, and executes the SG algorithm.Parallel SGs may affect intersecting sets of nodes and could result in a partitioned overlay. The two-phase commit protocol [34,35] resolves this issue by locking adjacent nodes before starting the SG. We resolved conflicting locks via a timeout that has the same effect as waiting for tw. The protocol also ensures that no notifications are lost. Nodes locked via the two-phase commit do not delete routing table entries until the SG is complete and the lock is removed. As a result, duplicate notifications may occur within the set of locked nodes.Content distribution handles the dissemination of notifications. Symmetric cryptography ensures confidentiality; digital signatures ensure integrity and authenticity.Publishers distribute notifications for attribute a by flooding the notification through the respective and pre-established attribute overlayMa. With attribute pseudonym, encrypted content, and signature a notifications becomesmnotif=(ta,{m}Ka,sig)withsig=sign(ta∥{m}Ka,ska). The notation x||y denotes the concatenation of elements x, y.The global passive attacker applies the methods introduced in Section 2.3 to de-anonymize subscribers. That is, exploit the role distribution of the attribute overlay, as well as to pick leaf nodes. For the role distribution, the attacker has an advantage picking subscriber from an overlay mainly constituted by subscribers. Likewise, before the SG is played, the attacker has an advantage picking leaf nodes as subscribers.To mitigate this attack, we adapt the concept of cover traffic [36] as Probabilistic Forwarding (PF). PF adds nodes, which are not part of the attribute overlayMa,into the overlay. As a result, the number of nodes inMaincreases. Moreover, the global attacker loses the advantage of picking leaf nodes as subscribers. Compared to related work [36], we add cover nodes to the attribute overlay rather than just relaying messages to them. As a result, these nodes become indistinguishable from normal nodes. This is possible as our overlay construction supports the notion of forwarders. Compared to the SG, PF can be applied faster as the protocol overhead is lower.PF works as follows: upon sending a subscription message, an overlay node v ∈ Vadecides for every basic overlay neighbor w ∈ N∖Vaat random to forward notifications to this neighbor. That is, to add w toNa−(v)(cf. Function (3)). Node w also becomes member of VaandFa. The system parameter μ ∈ [0, 1] models the probability of choosing w. This concept causes the overlay to grow, and thus anonSet(a) ultimately increases as well.Fig. 7exemplifies this concept. Left: subscribers s1, s2, s4 are exposed as leaf nodes. The attack accuracy evaluates to(3+1)÷(3+0+1+1)=0.8. Middle: subscribers s1, s3 conceal themselves by adding cover neighbors. Thus, the accuracy drops to ≈ 0.43. Right: cover neighbors may pick additional cover neighbors by themselves—cover node f3 pulls in another cover node, f4 (accuracy 0.5).PF causes signaling overhead during content distribution. Furthermore, PF does not change the inner topology of the overlay. Hence, the global passive attacker can still infer information from this structure. To compensate the latter drawback, PF can be combined with SG as Probabilistic Forwarding & Shell Game (PFSG).The presented system seems to meet all requirements to anonymous pub-sub systems from Section 2.2.AnonPubSub ensures subscriber anonymity against the non-colluding internal attacker with anonymity sets anonSet≥|Na−(v)|+1.For publisher anonymity, we assume an internal attacker that possesses key material and imposes a subscriber. The attacker constructs a tree in G, rooted by himself that contains the shortest paths to all nodes. The attacker then removes branches from which he does not receive advertisements on the shortest path. Thus, the remaining branches contain at least one publisher each, and the size of each branch forms the anonymity set anonSet for the contained publisher. The publisher can estimate anonSet to be at least of size|Na+(v)|+1—his predecessors in the mesh plus himself. The same argument holds for subscriber anonymity assuming an internal attacker imposing a publisher.AnonPubSub is secure against this attacker, even without PF and SG. With PF, the setFaincreases. Anonymity still holds at the behavior ofFaremains indistinguishable from other participants. Likewise anonymity holds for SG as all nodes in Vaequally play SG and thus remain indistinguishable to the internal attacker as well. The avoidance of node identifiers and hop counts ensures that an active internal attacker does not learn the roles of neighboring nodes while playing the SG or being involved in PF. Section 5 complements this discussion with an analysis of anonymity against the global passive attacker.The system provides notification confidentiality and subscription confidentiality. In particular, attributes are only transmitted via pseudonyms. Notifications are only transmitted encrypted. The TTP ensures only members of closed attribute groups obtain the key material.In terms of memory overhead, AnonPubSub scales proportionally with the number of attributes and neighbors. As for the communication overhead, attribute knowledge cause the most signaling costs due to flooding of the basic overlay. The costs for subscriptions and notifications are bounded bydiameter(G)×|Sa|where diameter(G) denotes the diameter of the basic overlay.PF and SG cause additional signaling costs. Each SG between two nodes v1, v2 requires3×|Na+(v1)|+|Na+(v2)|+3×|Na−(v1)|+|Na−(v2)|messages including the two-phase-commit protocol. We can approximate|Na+(vx)|≈1and therefore require3×|Na−(v1)|+|Na−(v2)|+4messages. The actual signaling costs of the SG as well as PF highly depend on the basic overlay topology and have to be analyzed further via simulation in Section 5.The system enforces integrity and authenticity via signatures of advertisement and notification messages to prevent local attackers from spamming attributes and notifications. Subscriptions do not require authenticity as they do not threaten scalability.

@&#CONCLUSIONS@&#
