@&#MAIN-TITLE@&#
An empirical study based on semi-supervised hybrid self-organizing map for software fault prediction

@&#HIGHLIGHTS@&#
We proposed a software fault detection model using semi-supervised hybrid self-organizing map (HySOM).The HySOM minimize the role of experts for identifying fault prone modules.The advantage of HySOM is the ability to predict the label of the modules in a semi-supervised manner.The experimental results show improvement in false negative rate and overall error rate in 80% and 60% with NASA data sets.

@&#KEYPHRASES@&#
Artificial neural network,Clustering,Self-organizing maps,Semi-supervised,Software fault prediction,Threshold,

@&#ABSTRACT@&#
Software testing is a crucial task during software development process with the potential to save time and budget by recognizing defects as early as possible and delivering a more defect-free product. To improve the testing process, fault prediction approaches identify parts of the system that are more defect prone. However, when the defect data or quality-based class labels are not identified or the company does not have similar or earlier versions of the software project, researchers cannot use supervised classification methods for defect detection. In order to detect defect proneness of modules in software projects with high accuracy and improve detection model generalization ability, we propose an automated software fault detection model using semi-supervised hybrid self-organizing map (HySOM). HySOM is a semi-supervised model based on self-organizing map and artificial neural network. The advantage of HySOM is the ability to predict the label of the modules in a semi-supervised manner using software measurement threshold values in the absence of quality data. In semi-supervised HySOM, the role of expert for identifying fault prone modules becomes less critical and more supportive. We have benchmarked the proposed model with eight industrial data sets from NASA and Turkish white-goods embedded controller software. The results show improvement in false negative rate and overall error rate in 80% and 60% of the cases respectively for NASA data sets. Moreover, we investigate the performance of the proposed model with other recent proposed methods. According to the results, our semi-supervised model can be used as an automated tool to guide testing effort by prioritizing the module’s defects improving the quality of software development and software testing in less time and budget.

@&#INTRODUCTION@&#
In today’s life, all work depends on software technologies. However, confidence about reliability of the software is considered as one of the crucial problems in software development as well as the software engineering process. In order to achieve the objectives of software quality assurance initiatives, software quality models and tools are used [1]. These quality models help project managers, developers, and testers to categorize the more defect prone program modules together. Thus, the inadequate resources assigned for any software quality inspection such as testing and reviewing software programs can be allocated to those affected program modules to achieve cost-effective resource utilization [2]. One of the software quality models is software fault prediction.1Fault prediction, fault detection, and defect detection can be used interchangeably throughout the paper.1Usually, software measurement data with defect (faulty/quality) data from previously developed release or similar project is needed [1] to build software fault prediction models, which is also known as supervised learning. Various statistical and machine learning algorithms such as genetic programming [3], decision trees [4], neural network [5], naïve Bayes [6], case-based reasoning [7], fuzzy logic [8] and artificial immune recognition system [9–11] are already used for software fault prediction based on the supervised learning process. Nevertheless, in software development practice, the availability of defect data is limited due to reasons such as high cost, lack of budget, time limitation, or even unavailability of experts [1,12,13]; therefore, in such cases, regular supervised techniques cannot be used for building software quality models.To build software prediction models in the absence of defect data, unsupervised or semi-supervised approaches are used [1,13–20]. In unsupervised approaches, identifying faulty modules from non-faulty modules falls to software engineering experts [1,14,15,21,22]. In addition, labeling modules can also be done by using certain software measurement thresholds instead of software engineering experts [18,19,23]. On the other hand, semi-supervised approaches usually use small samples of software modules with known fault content which enhance the process of model training with modules for which the fault information is not available [16]. In semi-supervised approaches, sample labeled data are provided either by iterative semi-supervised techniques, or by software quality experts, or even data provided by the software company. In this paper, we proposed a semi-supervised fault detection model using hybrid self-organizing map clustering (HySOM) and artificial neural network classification with the help of available software measurement thresholds corresponding to certain module features extracted from the software program. The proposed method uses self-organizing maps (SOM) as the underlying clustering algorithm. After clustering process, neuron weights are labeled based on six available software measurement thresholds as faulty and non-faulty, which are then used as a sample data set to be trained with artificial neural network in order to perform the final prediction. The results have shown that the sample obtained from semi-supervised SOM clustering can exhibit relatively similar performance as the whole data set and can be used as a suitable labeled data set for further classification of unlabeled data set.This work attempts to take advantage of artificial neural network (ANN) in training self-organizing maps (SOM) cluster weights, to amend the performance of the unsupervised fault prediction method. SOM is claimed to be able to cluster the multi-dimensional data on a smaller dimensional space. This type of artificial neural network model can provide two-dimensional map space from a multi-dimensional input space along with topology-preserving mapping [24]. Each neuron inside the SOM produces cluster areas based on approximation of data density connected to input vectors over iterations in unsupervised learning. According to [25], SOM shows more accuracy in classifying most of the objects to their cluster than other clustering algorithms such as k-means and expectation maximization (EM).ANNs, on the other hand, is a good approach for modeling and detecting the relationship that may exist between software metrics and module labels. ANNs are able to investigate and learn the hidden knowledge inside input data while processing them. ANN is considered as a significant method in computational intelligence as it has solved many complex and nonlinear problems in the real world. Despite the popularity of ANNs, there are unfavourable choices due to lack of good performance in software quality and software fault prediction areas. In this study, we try to explore the possibility of using ANN for classification purpose to advance the generalization capability of SOM with the threshold during prediction by proposing a new hybrid model (HySOM) for predicting module labels from software measurement metrics using real industrial data.The performance of HySOM with other methods has been investigated in related studies [19,23]. According to the results, classification of the modules by HySOM is better than other proposed models in most cases. To show the superiority of HySOM, model was also compared with three well-performed supervised learning approaches [26,27], which were naive Bayes, random forest, and artificial neural network.Our proposed semi-supervised HySOM overcomes the problem of predicting fault prone modules in the absence of faulty data. The involvement of experts is more relaxed or provides more support now, and the performance compared with the unsupervised SOM is better in most of the data sets as shown in the experiment section. So far, SOM has not been used in this direction because of complexity of using it in semi-supervised ways. With this motivation, our model’s novelty is reflected by semi-supervised approach and proofs are provided according to the results. Furthermore, the knowledge learnt during semi-supervised approach yielded better classification of unlabeled modules as compared to both unsupervised clustering and supervised classification.This paper is organized as follows: discussion on related work is presented in Section 2. The prerequisite tasks are described in Section 3. Section 4 presents the proposed semi-supervised hybrid model. Experimental description followed by experimental results is explored in Sections 5 and 6, respectively. Finally, the paper is summarized in Section 7.

@&#CONCLUSIONS@&#
