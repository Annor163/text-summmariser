@&#MAIN-TITLE@&#
Optimization of interval type-2 fuzzy systems for image edge detection

@&#HIGHLIGHTS@&#
The optimization of the antecedent parameters for a type 2 fuzzy system of edge detection is presented.The goal of interval type-2 fuzzy logic in edge detection methods is to provide the ability to handle uncertainty.Results show that the Cuckoo search provides better results in optimizing the type-2 fuzzy system.

@&#KEYPHRASES@&#
Interval type-2 fuzzy logic,Edge detection,Image processing,Cuckoo Search algorithms,

@&#ABSTRACT@&#
This paper presents the optimization of a fuzzy edge detector based on the traditional Sobel technique combined with interval type-2 fuzzy logic. The goal of using interval type-2 fuzzy logic in edge detection methods is to provide them with the ability to handle uncertainty in processing real world images. However, the optimal design of fuzzy systems is a difficult task and for this reason the use of meta-heuristic optimization techniques is also considered in this paper. For the optimization of the fuzzy inference systems, the Cuckoo Search (CS) and Genetic Algorithms (GAs) are applied. Simulation results show that using an optimal interval type-2 fuzzy system in conjunction with the Sobel technique provides a powerful edge detection method that outperforms its type-1 counterparts and the pure original Sobel technique.

@&#INTRODUCTION@&#
The optimal design of fuzzy inference systems is a difficult task, beginning by defining the number of antecedents and consequents, number of membership functions, the type of membership functions, and it is also complicated to choose the optimal parameters and the number of ideal fuzzy rules to get a good result. In several works researchers present their design of fuzzy inference systems obtained under experimentation approaching an acceptable result after a series of tests. However, some researchers have applied meta-heuristics algorithms to find the optimal design for fuzzy inference systems with good results [1,2]. In the last years different meta-heuristics algorithms have been proposed for solving a wide range of optimization problems, such as Genetic Algorithms (GAs) [3], Ant Colony Optimization (ACO) [4], Bee Algorithms (BA), Particle Swarm Optimization (PSO) [5–7], the Firefly Algorithms (FA) [8,9], Bat-inspired Algorithms (BAT) [10], Cuckoo Search (CS) [11–14] and others.The main contribution of this paper is to optimize a fuzzy edge detector based on the Sobel technique and interval type-2 fuzzy logic (IT2-FLS), applying Cuckoo Search (CS) [11–14] and Genetic Algorithms (GA) with the idea of finding the optimal design of the antecedent parameters for an IT2-FLS and achieve better results than the non-optimized IT2-FLS in edge detection applications for digital images. The CS algorithm is a relatively new technique that is considered for the first time in this paper in the optimization of interval type-2 fuzzy systems for edge detection. In addition, the enhanced interval type-2 fuzzy Sobel edge detector is presented for the first time in this paper. Related works have proposed interval type-2 fuzzy edge detectors, but in combination with the morphological and Canny methods [15–18], but not with the Sobel edge detector, which is the one proposed here. Of course, the aim of enhancing the traditional Sobel edge detector with interval type-2 fuzzy logic is to provide the edge detection method with the ability to handle the uncertainty in real images, which is not a characteristic that the pure traditional mathematical edge detectors have.In order to evaluate objectively the performance of the edge detectors presented in this paper; for the simulation results we used synthetic images, these images are presented in Section 6, and the quality of the edge detection is evaluated with the figure of merit of Pratt (FOM), described in Section 5.The rest of the paper is organized as follows. The basic concepts of the fuzzy logic systems are defined in Section 2. The theory of the Cuckoo Search (CS) algorithm is presented in Section 3. In Section 4, the Sobel operator is described. The models proposed to achieve the optimization of type-1 FLS and interval type-2 FLS using CS and GA, are presented in Section 6. In Section 7, the obtained simulation results are shown, and finally, conclusions are presented in Section 8.The term fuzzy logic was introduced by Zadeh in his seminal work “Fuzzy sets,” which described the mathematics of fuzzy theory [19]. Fuzzy logic provides the ability to solve problems in which objects are associated with imprecise information [19–21].In the last 15 years great progress has been made in transitioning from type-1 fuzzy logic systems (T1-FLS) to interval type-2 fuzzy logic systems (T2-FLS). Type-2 fuzzy logic is an extension of the concept of type-1 fuzzy logic. The idea of going into higher orders or types of fuzzy logic is to achieve better models of uncertainty.In this section, we define type-1 fuzzy logic, interval type-2 fuzzy logic, and other important associated concepts that are used throughout this paper.Fuzzy sets are mostly used in a fuzzy logic system (FLS), which includes a fuzzifier, fuzzy rules, inference engine, and defuzzifier.A fuzzy set A on a universe of discourse X is characterized by a membership function μA(x) that takes values in the interval [0,1]. A fuzzy set A, is denoted by [19–21](1)A={(x,μA(x))|x∈X}where μA(x), is known as the membership function for the type-1 fuzzy set, AThe membership function maps each element of X to a degree of membership between 0 and 1. The construction of a fuzzy set is dependent of the identification of a suitable universe and the specification of a membership function. The membership functions more frequently used are the trapezoidal, triangular, Gaussian, singleton, and others. In Fig. 1the type-1 Gaussian membership function is illustrated.In this part we provide some important definitions and properties about interval type-2 fuzzy sets [22,23].An interval type-2 fuzzy set, denoted byA˜, is characterized by the membership functionμA˜(x,u)where x∈X and u∈Jx⊆[0, 1]:(2)A˜={((x,u),μA˜(x,u))|∀u∈Jx⊆[0,1]}in which0≤μA˜(x,u)≤1.A˜can also be expressed as(3)A˜=∫x∈X∫u∈JxμA˜(x,u)(x,u)Jx⊆[0,1]where ∫∫ denotes the union over all admissible input variables x and u. In fact Jx⊆[0, 1] represents the primary membership of x, andμA˜(x,u)is a type-1 fuzzy set known as the secondary set. Hence, a type-2 membership grade can be any subset in [0,1], the primary membership, and corresponding to each primary membership, there is a secondary membership (which can also be in [0,1]) that defines the possibilities for the primary membership [22–24]. Uncertainty is represented by a region, which is called the footprint of uncertainty (FOU). WhenμA˜(x,u)=1,∀u∈Jx⊆[0,1], we have an interval type-2 membership function, as shown in Fig. 2. The uniform shading for the FOU represents the entire interval type-2 fuzzy set and it can be described in terms of an upper membership functionμ¯A˜(x)and a lower membership functionμ_A˜(x)[22,23,25].An interval type-2 fuzzy logic system contains four components: rules, fuzzifier, inference engine, and the output processor, which is formed by a type-reducer and the defuzzifier that are interconnected, as shown in Fig. 3. An IT2-FLS can be viewed as a mapping from inputs to outputs, and this mapping can be expressed quantitatively as y=f(x) [22–25].The fuzzifier maps crisp numbers into fuzzy sets. Then, we need to activate rules that are in terms of linguistic variables, which have fuzzy sets associated with them. The rules can be provided by experts or can be extracted from numerical data. In either case, the rules that we are interested in can be expressed as a collection of IF-THEN statements.The inference engine of the FLS maps fuzzy sets into fuzzy sets. It handles the way in which rules are activated and combined. The output processor of a type-2 FLS contains two components: the first maps a type-2 fuzzy set into a type-1 fuzzy set and it is called type-reduction and the second performs defuzzification on the latter set. There are different type-reduction methods, the most common ones used are the Centroid, Height and Center-of-sets type reduction [22,23,25]. In this paper we applied Centroid type-reduction.The Cuckoo birds are an interesting species, because they have an aggressive reproduction strategy. Some parasitic cuckoos lay their eggs in communal nests so they can be breeding by using other species, but some host birds can engage in direct conflict with the intruding cuckoos. If the host bird discovers that an egg is not its own, it may either destroy the egg, throw this egg away or simply abandon the nest and build a new nest at a different place; therefore, this reduces the probability of their reproductivity.Some female parasitic cuckoos, such as the Tapera can imitate the colors and patterns of the eggs of the host species; this strategy helps to reduce the probability that their eggs can be abandoned and thus increases their reproductivity [12–14,26].Another strategy of the parasitic cuckoos is that they choose a nest where the host nests just laid their own eggs. Most of the time, the cuckoo eggs hatch earlier than the host bird eggs and the first instinct of the cuckoo chicks is to evict the host bird's eggs propelling them blindly out of the nest, which increases the possibility of being fed by the host bird [27–29].The Cuckoo breeding behavior mentioned above was the inspiration in Yang and Deb [30] to develop the Cuckoo Search (CS) meta-heuristic algorithm described in Section 3.2.Cuckoo Search is a meta-heuristic algorithm inspired by the Cuckoo bird breeding behavior and thus can be used for the development of new designs in complex optimization problems. There is also evidence that it can outperform other meta-heuristic algorithms in some applications [30].For simplicity the cuckoo search (CS) uses the following three idealized rules:1.Each cuckoo lays one egg at a time, and dumps its egg in a randomly chosen nest;The best nests with high quality of eggs will carry over to the next generations;The number of available host nests is fixed, and the egg laid by a cuckoo is discovered by the host bird with a probability pa∈[0, 1]. In this case, the host bird can either throw the egg away or abandon the nest, and build a completely new nest.Based on these three rules, the basic steps of the Cuckoo Search (CS) can be summarized as in the following pseudo code [11,12,30–32]:When generating new solutions X(t+1), a Lévy flight is performed by (4) and (5)(4)X(t+1)=Xt+∝⋅Lévy(β)whereXtis the vector of thetth-iteration(5)Lévy(β)=u|v|1/β(1<β≤2)where ∝>0 is the step size which should be related to the scales of the problem of interest [12,31–33]. In (5)u and v are drawn from normal distributions, that are defined in (6) and (7).(6)u∼N(0,σu2),v∼N(0,σv2)(7)withσu=γ(1+β)sin(πβ/2)γ[1+β/2]β2(β−1)/21/β,σv=1where γ is the standard Gamma function [37].The Lévy flight represents a random trajectory and it is the length of the step obtained by means of a Lévy distribution (8)[12,14]:(8)Lévy∼u=t−β(1<β≤2)which has an infinite variance with an infinite mean.Some advantages of using the CS algorithm are that this method has few parameters to be fine-tuned. Basically these parameters are the population size or number of nests (n), max generations (t), and the parameter (pa) which is the probability of the worse nests are abandoned and new ones are built. On other hand, some researchers also indicate that the convergence rate is insensitive to the parameter pa; therefore, we do not have to fine-tune these parameters for a specific problem [13,29].A number of edge detectors based on a single derivative have been developed by various researchers. Amongst them the most important operators are the Robert operator, Sobel operator, Prewitt operator, Canny operator and Kirsch operator [35–38]. In each of these operator-based edge detection strategies, we compute the gradient magnitude. If the magnitude of the gradient is higher than a threshold, then we are able to detect the presence of an edge.The classic Sobel operator is a 3×3 neighborhood based gradient operator. The convolution masks for the Sobel operator on a gray scale digital image are defined by Sobelx in (9) and Sobely in (10).(9)Sobelx=−1−2−1000121(10)Sobely=−101−202−101The positions on the two masks are separately applied on the input image to yield two gradient components gx in (11) and gy in (12) in the horizontal and vertical orientations respectively; the positions of the input image (f) are shown in Fig. 4, where the x-axis represents the horizontal positions and y-axis vertical positions.(11)gx=∑i=1i=3∑j=1j=3Sobelxi,j⋅fx+i−2,y+j−2(12)gy=∑i=1i=3∑j=1j=3Sobelyi,j⋅fx+i−2,y+j−2where f is the source image.The gradient magnitude or output edge is obtained by using (13).(13)G[f(x,y)]=gx2+gy2where gx in (11) is the result of the convolution of the input image (f) with the Sobelx filter in (9), and gy in (12) is the result of the convolution of the input image (f) with the Sobely filter in (10)[29,34,39]. The steps to obtain the output edge G[f(x, y)] can be summarized in the following pseudo code:The result of an edge image based on the Sobel operator is shown in Fig. 5.There are different types of methods to evaluate the detected edge of an image that use different parameters for assessing the abrupt change of color in the pixels. One of the most frequently used techniques is the figure of merit of Pratt(Figure of Merit; FOM) [18,40]. This technique represents the deviation of the actual (calculated) edge point from the ideal edge and it is defined in (14).(14)FOM=1max(II,IA)∑i=1IA11+∝d2(i)where IAis the actual number of detected edge points, IIis the number of edge points on the ideal edge, d(i) is the Euclidean distance [40,41] between the edge of the current pixel and its correct position in the reference image and α is a scaling constant (usually 1/9) [40]; i.e., the reference image (Il) or ideal edge of Fig. 6(a) is the one in Fig. 6(b). If the result of the FOM defined in (14) is 1 or very close to 1, it means that the detected edge IAis the same or very similar to the ideal edge Il. Otherwise, the closer we are to 0, then there is a high difference between the detected edge (IA) and ideal edge (Il).In this section the methodology for the optimization of the type-1 FLS (T1-FLS) and interval type-2 FLS (IT2-FLS) [42–44] for edge detection is described. The idea is to find the antecedent parameters of the membership functions. For the T1-FLS and IT2-FLS, two inputs are required, which are the gradients with respect to x-axis and y-axis, calculated with (11) and (12) which were described in Section 4, and for this case study we call them DH and DV respectively. For all the inputs and output fuzzy variables, the membership functions are of Gaussian type with uncertain mean. In the input membership functions, we used three linguistic values: LOW, MIDDLE, HIGH, and for the output (EDGES) this was represented by the linguistic values: BACKGROUND and EDGES. To perform the fuzzification process we use a type-2 singleton fuzzifier, the structure of the rules is the standard Mamdani-type FLS rule structure used in the type-1 FLS and for the defuzzification process, the centroid method was used. In Figs. 7 and 8, the general structures of the T1-FLS and IT2-FLS systems to be optimized are shown. The optimization was performed by the CS and GA algorithms, both of which are described next.For this case study, we have two inputs (in) with three Gaussian membership functions (mf) and to generate each membership function three parameters are needed (np); therefore, we have 18 values that represent the parameters of the input membership functions. The size of each nest is defined by the number of parameters to be optimized (ρ). The steps for the solution to this optimization problem applying the cuckoo search algorithm are described as follows:The steps of the previous algorithm are a modification of the Cuckoo Search Toolbox published in [45].The steps for the solution to this optimization problem are described as follows (Table 1):In order to evaluate objectively the performance of the proposed edge detector, for the simulation results we perform all the experiments using synthetic images. These synthetic images were built by plotting three mathematical functions as the original images and as ground truth reference for the ideal edges and in Table 2the synthetic and reference images are shown. The reference image is necessary to evaluate the quality of the edge detection process defined in (14); on the other hand, the reference image is also important to evaluate the objective function defined in (15) of the Cuckoo Search (CS) and GA algorithms used in this paper.In the first test, the edge detector was implemented with the traditional Sobel operator, without using a fuzzy logic system, as was presented in Fig. 5. The FOM was obtained with (14); the ideal FOM for any image is 1 or correspondingly an Error of 0, which means that all edges have been detected correctly. The results for the synthetic images of Table 2, are shown in Table 3, where an Error of 0.2506 was obtained with the Sphere image, 0.2357 for the Peaks image and 0.2124 for the Donut image. Remember that the ideal Error is 0; therefore the results from this experiment are a little far from the ideal Error or ideal edge.In the second test, the edge detection is based on the Sobel technique and the type-1 fuzzy logic system (T1-FLS). To perform these experiments, the model presented in Fig. 7 was used. The model of Fig. 7 has two inputs (DH and DV) which represent the gradients gx in (11) and gy in (12) respectively. The DH and DV inputs have three Gaussian membership functions labeled with the linguistic values: LOW, MIDDLE, and HIGH. The output was implemented using two Gaussian membership functions, which represent the linguistic values: BACKGROUND and EDGE. The parameters of the membership functions for the inputs and output were calculated as follows:The fuzzy inference system was designed considering different groups of rules because the idea is to implement different combinations of the DH and DV inputs. Some samples of the rules used in the experiments are presented in Tables 4–6. These fuzzy rules were obtained based on the knowledge of an expert in image processing and combined with a series of tests, to achieve good results with a minimum number of rules.The simulation results for these fuzzy rule bases, where we used different groups of fuzzy rules are shown in Table 7. We can notice that the Errors for the Sphere, Peaks and Donut images are lower when we used the fuzzy rules presented in Table 6 and for this reason we decided to only use three fuzzy rules.In the third test, the edge detection based on the Sobel technique and the interval type-2 fuzzy logic system (IT2-FLS) is considered. For the IT2-FLS, the gradients obtained with (11) and (12) were used as inputs, and the fuzzy system was built using the membership functions presented in Fig. 8. In this test the antecedents, consequents and fuzzy rules are obtained based on knowledge of an expert in image processing and combined with a series of tests, to achieve good results. The parameters for the antecedents and consequents were calculated as follows:In the same manner as in the previous test (Sobel+T1-FLS), we performed these experiments using different groups of rules, which are described in Tables 4–6. In Table 8we can find the values of the FOM and Error obtained for the Sphere, Peaks and Donut synthetic images, and we can notice, that the Errors are lower when we used the three fuzzy rules which are presented in Table 6. Additionally to this fact, the results in Table 8 are improved with respect to Table 7, because of the use of the IT2-FLS, which helps in better handling the uncertainty in the edge detection process.In another test, the parameters of the antecedents of the T1-FLS and IT2-FLS were optimized by the Cuckoo Search algorithm, and the simulation results are shown in Tables 9 and 10respectively. For these simulations, we used the same design parameters: antecedents and consequents presented in Section 6; also, we implemented the fuzzy rules presented in Table 6, because these fuzzy rules achieved the best results presented in Tables 7 and 8.The experiments were performed with 15 simulations (sn), for each simulation we obtain the number of nests (n), probability of nest loss (pa) and the number of iterations (inter), we applied the Simple Monte-Carlo simulation, and the range used for these parameters are shown in the algorithm of Section 6.1. The tests for optimization of the T1-FLS and T2-FLS were executed under the same conditions.In Tables 9 and 10, the average of the 15 simulations obtained for each image of Table 2 are presented, we show the values of FOM and Error obtained for the three images. In Table 10, we can note that the results obtained with the optimized Sobel+T2-FLS are improved with respect to the optimized Sobel+T1-FLS.The tests were also done with the GA described in Section 6.2. The simulation results were performed in order to optimize the parameters of the antecedents for the T1-FLS and IT2-FLS whose models are shown in Figs. 7 and 8. The averages of the simulation results after optimizing theT1-FLS and IT2-FLS using the GA are shown in Tables 11 and 12, where the FOM and Error for the synthetic images are presented.In these experiments we executed 15 simulations, we also varied the GA parameters, for the population number (N) Generation Number (gn), the crossover percentage (pc) and the mutation percentage (pm) using the simple Monte-Carlo simulation which is described in Section 6.2. In Table 11, we can appreciate that the results obtained in the optimization of Sobel+T2-FLS using GA are better than the optimization of Sobel+T1-FLS (Table 12).Based on the tests presented in the previous sections, a comparative analysis was performed. In Table 13, the averages of the FOM and Error of the Sphere, Peaks and Donut images obtained in the results of Tables 3 and 7 (with three fuzzy rules), 8 (with three fuzzy rules), 9, 10, 11 and 12 are presented.In the results of Table 13, we can notice that the FOM and Error values were very similar using the optimization of IT2-FLS by CS and GA, with a FOM of (0.9656, 0.9648) and an Error equal to (0.0344, 0.0352) respectively. However, these optimizations improved the results achieved by the non-optimized IT2-FLS whose FOM was 0.9597 and Error of 0.0403. In addition, it is important to note that the results obtained with the non-optimized Sobel+IT2-FLS were better than the Sobel+T1-FLS optimized by CS and GA and the non-optimized Sobel+T1-FLS. In contrast, the results obtained by the traditional Sobel edge detector, are worst than the four fuzzy detectors presented in this paper, which can be observed in Table 13. In general, we can note that the Sobel+IT2-FLS fuzzy edge detector was better than the Sobel+T1-FLS after the optimization using CS and GA.In the results of Table 13 when the CS and GA algorithms were applied to optimize the design parameters of the antecedents of a T1-FLS and IT2-FLS, similar results are obtained. However, there are fewer parameters to be fine-tuned in the CS than in the GA algorithms and this is favorable for improving the performance of various applications, which makes CS an attractive choice in optimizing the type-2 fuzzy systems.The visual edge detections for the Sobel, Sobel+T1-FLS, Sobel+T1-FLS optimized using CS, Sobel+T1-FLS optimized using GA, Sobel+IT2-FLS, Sobel+ IT2-FLS optimized using CS and Sobel+IT2-FLS optimized using GA are shown in Table 14. Of course, graphically we cannot clearly appreciate the difference in the detected edges and for this reason the metric defined in (14) and described in Section 5 was applied.

@&#CONCLUSIONS@&#
In summary, in this work several simulations results for the optimization of the fuzzy edge detectors were presented, the objective was to obtain the design parameters of the antecedents of interval type-2 fuzzy systems, which is a difficult task to solve when we consider fuzzy inference systems; therefore, for the optimization of the antecedent parameters the CS and GA meta-heuristic algorithms were applied.In the results of Table 13 when the CS and GA algorithms are applied to optimize the design parameters of the antecedents of an IT2-FLS, similar results are obtained; nevertheless, these optimizations improved the results achieved by the non-optimized IT2-FLS, optimized T1-FLS, non-optimized T1-FLS and traditional Sobel, which is the main goal in this paper, to improve the edge detector that can be applied in processing images. On the other hand, the results obtained with CS and GA have a small difference; however, there are fewer parameters to be fine-tuned in CS than in GA algorithms and this is an advantage for improving the performance of various applications. Of course, the main goal of the paper was to design optimal type-2 fuzzy systems for edge detection, and the particular meta-heuristic used to achieve this goal is not as important at this moment, but worth investigating in the future.In general, this can be considered as another case in which the hybrid combination of soft computing techniques can provide better results; in this case the hybrid approach considers the combination of the meta-heuristic optimization techniques with the use of interval type-2 fuzzy systems in achieving accurate edge detection.In the simulations results for this paper we only used synthetic images, because to evaluate the detected edge with the FOM metric (14), we need to know the ideal edge. However, in future work we can use real images, where in this case we can obtain the ideal edges with the knowledge of an expert in image processing (this would only be needed in the training phase to optimize the detector, but not for the real time application). Of course, once the system is optimized it could be used in real applications without the help of the expert. Another choice is to approximate the ideal edges with the interval type-2 fuzzy edge detector presented in Section 7.3 and improve the fuzzy edge detector using the optimization method proposed in this paper.