@&#MAIN-TITLE@&#
Quality guaranteed all-hex mesh generation by a constrained volume iterative fitting algorithm

@&#HIGHLIGHTS@&#
An iterative algorithm is developed to fill a triangular mesh with an all-hex mesh.The Jacobian values of the all-hex mesh are guaranteed to be positive.The convergence of the iterative algorithm is proved.

@&#KEYPHRASES@&#
Solid modeling,Hexahedral mesh generation,Volume subdivision fitting,Guaranteed quality,

@&#ABSTRACT@&#
The hexahedral mesh (hex mesh) is usually preferred to the tetrahedral mesh (tet mesh) in finite element methods for numerical simulation. In finite element analysis, a valid hex mesh requires that the scaled Jacobian value at each mesh vertex is larger than0. However, the hex mesh produced by lots of prevailing hex mesh generation methods cannot be guaranteed to be a valid hex mesh. In this paper, we develop a constrained volume iterative fitting (CVIF) algorithm to fill a given triangular mesh model with an all-hex volume mesh. Starting from an initial all-hex mesh model, which is generated by voxelizing the given triangular mesh model, CVIF algorithm fits the boundary mesh of the initial all-hex mesh to the given triangular mesh model by iteratively adjusting the boundary mesh vertices. In each iteration, the movements of the boundary mesh vertices are diffused to the inner all-hex mesh vertices. After the iteration stops, an all-hex volume mesh that fills the given triangular mesh model can be generated. In the CVIF algorithm, the movement of each all-hex mesh vertex is constrained to ensure that the scaled Jacobian value at each mesh vertex is larger than0, etc. Therefore, the all-hex mesh generated by the CVIF algorithm is guaranteed to be a valid all-hex mesh.

@&#INTRODUCTION@&#
In finite element methods for numerical simulation, the hexahedral mesh (hex mesh) is usually preferred to the tetrahedral mesh (tet mesh) owing to the reduced error and smaller number of elements  [1,2]. However, generating a hex mesh with desirable qualities often requires significant geometric decomposition. Therefore, hex mesh generation can be extremely difficult to perform and automate. As a result, it requires considerable user interactions and may require days or even weeks in the case of complex shapes  [3].Moreover, it is well known that a valid hex mesh in finite element analysis should satisfy the requirement that, the scaled Jacobian value at each mesh vertex is larger than 0  [4]. Unfortunately, there is little work which can generate an all-hex mesh with the quality guarantee stated above. On the other hand, though boundary representation models, especially triangular mesh models, are popular in current computer graphics and computer aided design applications, lots of existing all-hex mesh generation algorithms need a tet mesh model as an input  [5,6]. So they cannot handle triangular mesh models directly, and it is inconvenient.In this paper, we develop a constrained volume iterative fitting algorithm (abbr. CVIF) which can fill a given triangular mesh model using an all-hex volume mesh, with guaranteed quality that the scaled Jacobian value at each mesh vertex is larger than 0. Given a triangular mesh model, we first construct an initial all-hex mesh model by voxelizing the given model, and extract the boundary quadrilateral mesh of the initial all-hex mesh model. Then, the initial all-hex mesh model is fitted to the given triangular mesh model by the CVIF algorithm. In each iteration of the CVIF algorithm, there are two steps:(i)The adjustment of the vertices of the boundary quadrilateral mesh, andthe diffusion of the movement of the boundary mesh vertices to the inner mesh vertices.Specifically, the iterative adjustments of the boundary quadrilateral mesh vertices make up of the constrained surface iterative fitting algorithm (abbr. CSIF), and we show its convergence in this paper.The structure of this paper is as follows. In Section  2, we briefly review related work. In Section  3, we develop the constrained volume iterative fitting algorithm. After presenting some results and discussions in Section  4, we conclude the paper in Section  5.

@&#CONCLUSIONS@&#
