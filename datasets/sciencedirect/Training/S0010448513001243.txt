@&#MAIN-TITLE@&#
Engineering feature design for level set based structural optimization

@&#HIGHLIGHTS@&#
A method to design engineering features in structural optimization is proposed.It combines CSG modeling and level set based shape and topology optimization.Feature design and structural optimization are unified under the level set framework.A truly optimal structure with features can be designed conveniently.

@&#KEYPHRASES@&#
Engineering feature design,Structural optimization,Level set method,Constructive solid geometry,

@&#ABSTRACT@&#
Engineering features are regular and simple shape units containing specific engineering significance. It is useful to combine feature design with structural optimization. This paper presents a generic method to design engineering features for level set based structural optimization. A Constructive Solid Geometry based Level Sets (CSGLS) description is proposed to represent a structure based on two types of basic entities: a level set model containing either a feature shape or a freeform boundary. By treating both entities implicitly and homogeneously, the optimal design of engineering features and freeform boundary are unified under the level set framework. For feature models, constrained affine transformations coupled with an accurate particle level set updating scheme are utilized to preserve feature characteristics, where the design velocity approximates continuous shape variation via a least squares fitting. Meanwhile, freeform models undergo a standard shape and topology optimization using a semi-Lagrangian level set scheme. With this method, various feature requirements can be translated into a CSGLS model, and the constrained motion provides flexible mechanisms to design features at different stages of the model tree. As a result, a truly optimal structure with engineering features can be created in a convenient way. Several numerical examples are provided to demonstrate the applicability and potential of this method.

@&#INTRODUCTION@&#
In structural design, engineering features refer to regular and simple shape units containing specific engineering significance  [1]. They generally serve as a bridge between computer-aided design (CAD) and computer-aided manufacture (CAM), and also have a great impact on assembly  [2]. Recently, as structural optimization techniques have been widely utilized to design innovative and lightweight products, it is practically meaningful to generate an optimal structural layout containing engineering features at an early stage of product lifecycle. However, this has been a challenge for standard structural shape and topology optimization.Current structural optimization techniques for continuum structure can be categorized into three mainstreams based on different model representations. Firstly, the B-rep model based approaches  [3,4] are the most suitable for feature design, as engineering significance is captured directly through the dimensional parameters or constraints in a CAD modeler. But it rarely supports topology optimization over an explicit model by modifying its parameters. In comparison, the density based approaches, such as the Homogenization Method  [5], the method of Solid Isotropic Material with Penalization  [6,7] and the Evolutionary Structural Optimization  [8], are able to optimize structural topology conveniently. However, it is difficult to employ geometric constraints into optimization, because neither an explicit geometry nor feature concept is readily available from a finite element (FE) mesh model.Implicit model based approaches, such as level set based optimization [9,10], have the advantage of maintaining a clear structural boundary during a shape and topology optimization process. But due to its infinite dimensional nature, to track geometric consistency between consecutive updated models is nontrivial, such that feature constraints can hardly be imposed during optimization.To enhance the applicability of structural optimization, several techniques have been developed for a simultaneously optimization of engineering features and structural layout. The key to address this problem is that the model representation must support both feature definition and topological change. In  [11,12], a finite circle method was proposed to approximate the exact geometry of predefined feature components with circumcircles. The location and orientation of these circles can be determined together with a density based structural topology optimization. Besides, Kang and Wang  [13] presented a novel topology description model to design movable hole-features by combining material density and level set models. On the other hand, for dynamic feature design problems, that the feature shape is not fixed a priori, the state-of-the-art solutions are mainly geometric primitives based. In  [14], the Bubble method  [15] was utilized to insert basic hole-features, such as circles and triangles, into a structure according to topological derivative analysis. The optimal design eventually comprises several simple feature shapes, which approximate the merged holes. Another parametric solution can be found in  [16,17], in which they represented feature primitives byR-function and combined them with aB-spline model.The integration of feature and freeform boundary design has profound meaning in structural optimization. For example, if a right-angle feature shown in Fig. 1(a) is expected in final design, all the shape of Fig. 1(b)–(d) are potential candidates to be modeled into an initial structure for optimization. Obviously, the one with a freeform boundary, as shown in Fig. 1(d), can lead to a better structural performance than the other two fixed geometry because of the extra design freedom over the non-critical boundary. This example reveals that under certain circumstances, it is unnecessary to use fixed high-level primitives to capture the critical engineering significance. Instead, if one can separate out feature characteristics and freely optimize non-critical regions, a truly optimal design of maximum structural performance can be eventually realized. In the literature, the method proposed in  [16,17] can accomplish this task by carefully conceiving parametric constraints over the primitive’s boundary.A level set based optimization method has good potentials of designing freeform boundary meanwhile supporting flexible shape and topology optimization. However, there are two fundamental challenges to design features with the level set method. Firstly, as a structural boundary conventionally embeds inside an implicit model, a continuous shape evolution will make the underlying geometric consistency unpredictable. Hence, it is complicated to track any predetermined feature shape during optimization. Secondly, engineering features usually contain sharp characteristics, such as corners in 2D model or corners and edges in 3D model. Due to the inherent dissipation nature of numerical calculation, all of these high curvature regions will be gradually smoothed out during optimization.In this paper, the above modeling difficulties are resolved by leveraging a CSG representation and an accurate constrained motion scheme. Inspired from the multiphase level set description in  [18], a structural model here is built upon two types of entities: a level set model containing either a feature shape or a freeform boundary. These entities are the operands in a CSG model tree and serve as either feature models containing necessary engineering significance or freeform models (non-feature model) otherwise. An inherited advantage from the CSG modeling is that a structure can be flexibly constructed with different levels of entities according to design requirements. In this way, feature characteristics can be identified either through the shape of a particular feature model or the relation between lower-level feature entities (e.g. the right-angle determined by two line feature models in Fig. 1), rather than by simply resorting to a fixed high-level geometry.Besides modeling features, it is important to devise a workable mechanism to preserve and optimize them. The idea of imposing motion constraints has been proven a viable way in designing structures for practical requirements. In  [19], the design velocity of level set equation was regularized to ensure the optimal structure can be formed by casting. Moreover, the rigid body motion was justified in  [20], which spurs polygon-shaped components to be positioned and oriented optimally inside design region. In this work, a constrained affine transformation coupled with an accurate particle level set updating scheme  [21] is adopted to design feature characteristics. Specifically, it consists of translation, rotation and scaling, which can simulate most of the effects in deforming a geometric primitive by modifying its parameters  [17]. The transformation velocity is determined from a least square fitting to the continuous shape variation. Meanwhile, non-feature models just undergo a conventional level set updating for freeform shape and topology optimization.To demonstrate the proposed approach, this paper is organized as follows. Section  2 introduces the CSG based level sets representation. Section  3 presents a sensitivity analysis for linear elastic structural optimization problems. The constrained motion and implementation details are described in Sections  4 and 5 respectively. Section  6 shows several numerical examples. Finally, discussion and conclusion are stated in Section  7.Constructive Solid Geometry is a ubiquitous solid model representation, which facilitates both set operations and boundary evaluation. In CSG modeling, because a structure can be assembled flexibly with different solid entities, it becomes possible to interpret practical machining or assembly requirements in terms of the geometry of and relation between feature entities (e.g. a low-level linear entity for a flat edge or surface, an angle intersected by two entities, or a high-level predefined mating geometry). The level set method, on the other hand, provides an effective way to freely optimize the boundary of a solid model. Intuitively, by combining the strengths of CSG modeling in feature definition and level set method in shape and topology optimization, a CSG based Level Sets (CSGLS) model description is adopted to address the problem of feature design in structural optimization.The CSGLS represents a solid structure in terms ofmindividual sub-level set modelsΦ=[ϕ1,ϕ2,…,ϕm−1,ϕm]. Eachϕi(i=1,2,…,m)is a well defined half-space model, denoting a geometric entity in the model tree. Among these models, a “feature model” contains feature geometry according to the engineering requirement, as opposed to a “freeform model” (non-feature model) with freely designable boundary embedded. The design domainDwith a underlying structureΩis thus formulated asΦD=⋂i=1mϕi, and the followings are hold by convention:(1)ϕi(x)>0∀x∈Ωi/∂Ωi(inside)ϕi(x)=0∀x∈∂Ωi(on the boundary)ϕi(x)<0∀x∈D/Ωi(outside) ,(2)H(ϕi)={1ifϕi≥00ifϕi<0whereHis a Heaviside function. A simple combination rule implies that there are at mostn=2mnon-overlapping regionsωk(k=1,2,…,n)inside the domainD, such that:(3)D=⋃k=1nωkandωp∩ωq=0̸,p≠q.Each region is uniquely tagged with a constant Heaviside vectorH(Φ)=[H(ϕ1),H(ϕ2),…,H(ϕm)]:(4)ωk={x∈D:H(Φ(x))=constant vector}.Note that, since there is only one material region assumed in this paper, any point locating inside it should belong to the interior of all sub-level set models:(5)ωk={materialifH(Φ(x))=[1,…,1]x∈ωkvoidotherwise .Fig. 2illustrates the CSGLS description, in which a simple model is constructed with two sub-level set modelsΦ=[ϕ1,ϕ2]representing a rectangular hole feature as shown in Fig. 2(b) and (c) respectively. There are in total four separating regions in the design domain, whereH(Φ)=[1,1]denotes the material region and the others refer to void. In practice, the two feature modelsϕican be further decomposed into lower level entitiesϕi=[ϕi1,ϕi2,ϕi3,ϕi4],i=1,2, where eachϕij,j=1,2,3,4denotes a half space model defined by one dash line shown in Fig. 2(b) and (c). Such decomposition is important to preserve and retrieve sharp characteristics during optimization. As shown in Fig. 2(d), a 2D sharp corner is rebuilt by firstly cutting the voxel according to one zero level set (red dash line), and then the other (purple dash line). If such a sharp feature is expected in final design, the exact shape and relation ofϕ1andϕ2in Fig. 2(d) must be well maintained throughout optimization. This is the motivation to apply constrained affine transformation with a highly accurate updating scheme. Note that, to reconstruct complex geometry locally (e.g. curves defined by one or multiple level sets inside an element), several refinement schemes are available in  [22].In level set based structural optimization, a solid structure is represented by a dynamic signed-distance functionΦ(x,t)and optimized via solving the following Hamilton–Jacobi (H–J) equation:(6)∂Φ∂t+Vn⋅|∇Φ|=0,Φ(x,0)=Φ0(x),whereΦ0(x)denotes an initial structural configuration andVnrefers to a normal boundary velocity derived from the sensitivity analysis of continuum shape variation  [9,10]. However, for the proposed CSGLS model, because each sub-level set modelϕirequires an independent design velocityVnifor shape updating, the conventional sensitivity analysis for a single level set model must be modified accordingly.By leveraging the idea in  [23], a characteristic functionχk(x)is firstly introduced for each regionωkas:(7)χk(x)={1ifx∈ωk0otherwise .Let the Heaviside functionH(ϕi)be expressed as following:(8)Hi1=H(ϕi),Hi0=1−H(ϕi).Eq. (7) can be re-written in terms of Heaviside function as:(9)χk(Φ)=∏i=1mHiIik,where the superscriptIikindicates the relationship between eachωkandϕias follows:(10)Iik={1ifωk∈ϕi0otherwise .In this paper, the optimization problem of a linear elastic structure under a volume constraint is studied. The mathematical formulation with CSGLS representation is expressed as:(11)MinimizeΦJ(u,Φ)=∑k=1n∫DFk(u)χk(Φ)dΩ,(12)Subject toG(Φ)=∑k=1n∫Dχk(Φ)dΩ≤V0,(13)a(u,v,Φ)=l(v,Φ)for allv∈U,(14)a(u,v,Φ)=∑k=1n∫DEkε(u):ε(v)χk(Φ)dΩ,(15)l(v,Φ)=∑k=1n(∫D(fk⋅v)χk(Φ)dΩ+∫Γkhk⋅vdΓ),whereF(u)denoting the objective function,V0the upper allowable volume,Uthe space of kinematically admissible displacement fields with predefined displacement at Dirichlet boundary,uthe elastic displacement under external loads,Ethe elasticity tensor,εthe strain tensor,fthe body force,hthe boundary traction force, andΓkthe boundary ofωk. Eq. (13) corresponds to the linear elastic equilibrium, wherea(u,v,Φ)andl(v,Φ)are the energy bilinear and load linear variational form respectively.By taking the material derivative  [6,24] of Eq. (11), the following expressions can be obtained as in  [23]:(16)dJ(u,Φ)dt=∑i=1m∫DPi(u,w,Φ)δ(ϕi)∇ϕiVnidΩ=∑i=1m∫ΓiPi(u,w,Φ)VnidΓ,(17)Pi(u,w,Φ)=∑k=1n(2Iik−1)(Fk(u)+fk⋅w−Ekε(u):ε(w))∏e=1,e≠imHeIek+(∇(hi⋅w)⋅ni+(hi⋅w)κ(ϕi)),whereΓi={x:ϕi(x)=0}denoting the full boundary of level set functionϕii=(1,2,…,m),nthe normal,κthe curvature, andwan adjoint variable for the following adjoint equation:(18)∑k=1n∫DEkε(w):ε(v)χk(Φ)dΩ=∑k=1n∫D∂Fk(u)∂uχk(Φ)dΩ,∀v∈Uandw=0onΓD.Considering that the physical properties and corresponding measures are defined only at the material region, Eq. (17) reduces to the following expression by canceling out zero terms that related to the void regions:(19)Pi(u,w,Φ)=(Fks(u)+fks⋅w−Eksε(u):ε(w))∏e=1,e≠imH(ϕe)+(∇(hi⋅w)⋅ni+(hi⋅w)κ(ϕi)),whereksis the index for solid region. Meanwhile, the material derivative of the volume constraint in Eq. (12) can be determined as:(20)dG(Φ)dt=∑i=1m∫Γi[∏e=1,e≠imH(ϕe)]⋅VnidΓ.For simplicity, a traction-free boundary and body-force free conditions are assumed in this paper. (Readers may refer to  [23] and references therein for a complete discussion about the problem subject to a boundary dependent loading.) Consequently, by constructing an augmented objective functional as follows:(21)J¯=J+λ(G−V0),whereλis a Lagrange multiplier, the steepest descent direction of this composite objective can be readily found by setting the normal velocityVnifor each level set modelϕias:(22)Vni=−(Fks(u)−Eksε(u):ε(w)+λ¯)∏e=1,e≠imH(ϕe),whereλ¯i+1=max{0,λi+μ(∫ΩdΩ−V0)}andμ>0is a penalty parameter.Eq. (22) implies that non-zero design velocity exists only at a boundary portionΓi′ofϕi, whereΓi′={x∈D:ϕi(x)=0andΦ(x)=0}. The other partΓi∗={x∈D:ϕi(x)=0andΦ(x)≠0}submerged in solid region has zero velocity, which indicates no contribution in improving the overall structural performance. This result coincides with the single level set model problem in  [24], as the final design velocity are the same over the structural boundaryΓ={x∈D:Φ(x)=0}. However, it reveals an interesting fact that the evolution process of a single level set model can be decomposed into a parallel behavior of lower-level entities with a coherent but zero-extended velocity. Therefore, it is practically viable to separate out feature level sets from a CSGLS model and control their evolution individually.In feature based design, manufacture or assembly requirements are interpreted through carefully conceived feature geometry. To maintain such geometric information throughout optimization, a constrained motion strategy is pertinent for the proposed CSGLS scheme to preserve the shape and relation of well initiated feature models. Three basic affine transformations, namely translation, rotation, and scaling, are adopted here to reproduce the same net effect to that by changing a primitive’s parameters as in  [14,17]. They can be applied to entities at different levels of a CSG tree for various purposes, such as to change the shape of a composite model in a rigid body manner, to maintain the relation between entities, or to preserve the shape of a low-level primitive. The corresponding applications are demonstrated in Section  6.For simplicity and conciseness, only a 2D algorithm is introduced below. Extension to 3D problems is straightforward. Given a feature level set modelϕifwith boundaryΓi, the constrained velocity is defined as the composition of two linear translation velocitiesVxandVyforXandYaxis respectively, a counter-clock angular velocityθ̇about the centroidciofΓi, and a homogeneous scaling coefficientα̇aboutcifor both axes. For any pointp∈Γi, its normal velocityVnpcan be thus expressed in homogeneous coordinate as:(23)Vnp=n⋅W⋅(p−ci)T,where(p−ci)=[px−cix,py−ciy,1],n=[nx,ny,0]the normal vector at pointp, andWthe velocity matrix:(24)W=[α̇−θ̇Vxθ̇α̇Vy001].The unknownVx,Vy,θ̇,α̇are determined through the following least square fitting problem, which approximates the unconstrained normal velocityVninfiin Eq. (22):FindVx,Vy,θ̇,α̇,(25)MinZ=12∫Γi(Vnp−Vninfi)2dΓ.This quadratic problem can be readily solved as:(26)X=[VxVyθ̇α̇]T=A−1B,(27)whereA=[OPQRPMSTQSNURTUL],B=[∫ΓiVninfi⋅nxdΓ∫ΓiVninfi⋅nydΓ∫ΓiVninfi⋅[ny(px−cix)−nx(py−ciy)]dΓ∫ΓiVninfi⋅[nx(px−cix)+ny(py−ciy)]dΓ],O=∫ΓinxnxdΓQ=∫Γinx[ny(px−cix)−nx(py−ciy)]dΓP=∫ΓinxnydΓS=∫Γiny[ny(px−cix)−nx(py−ciy)]dΓ(28)R=∫Γinx[nx(px−cix)+ny(py−ciy)]dΓT=∫Γiny[nx(px−cix)+ny(py−ciy)]dΓN=∫Γi[ny(px−cix)−nx(py−ciy)][ny(px−cix)−nx(py−ciy)]dΓL=∫Γi[nx(px−cix)+ny(py−ciy)][nx(px−cix)+ny(py−ciy)]dΓM=∫ΓinynydΓU=∫Γi[ny(px−cix)−nx(py−ciy)][nx(px−cix)+ny(py−ciy)]dΓ.Note that the matrixAin Eq. (27) may become singular under certain circumstances. For example, if a feature model contains only a linear boundary with normal componentnx=0orny=0, many items in matrixAwill vanish. In such case, the translation motion alongXorYaxis should be suppressed and hence Eqs. (25)–(28) must be reformulated accordingly. In the Appendix, all the possible combinations of 2D transformations and corresponding design velocities are listed for reference. Properly combining the three basic transformations can produce flexible feature design capabilities.

@&#CONCLUSIONS@&#
This paper presents a general approach to designing engineering features in structural shape and topology optimization. It combines CSG modeling in representing features and level set method in optimizing freeform boundary. Several well-known techniques are employed, such as XFEM, particle level set method and semi-Lagrange method, and constitutes a viable solution to the proposed problem.The CSGLS description distinguishes feature entities from non-feature ones in a CSG model tree, and allows engineering significance to be precisely interpreted by the geometry or relation between feature models. For practical applications, the rule of thumb to build an effective CSGLS model is to use a minimum number of feature entities (such as line or plane primitives) to satisfy engineering requirements, while ensuring non-critical regions can be freely optimized as much as possible.The proposed constrained motion provides several basic but useful design functions to preserve and design features (including sharp characteristic) during optimization. It provides a practical means to manipulate features through an implicit design approach, especially for level set based structural optimization. However, the current affine transformation is by no means a complete solution. It would be desirable to develop alternative constrained motions to address more complex design requirements.Remarkably, this method unifies feature design and structural shape and topology optimization under the level set framework. It shows an appealing design flexibility to create truly optimal structural configurations with features considered. The whole scheme can be easily implemented into any level set based structural optimization framework without model parameterization. Based on the current implementation, future development could take 3D geometric editing into account for an integrated CAD/CAE solution. It would also be interesting to apply the proposed methodology to design sharp features for stress related design problems.For the constrained affine transformation, combination of translation, rotation and scaling can produce different motion patterns for practical design requirements. The following table summarizes all the possible constrained motions and the corresponding velocity matrix of 2D problem (see Table A.1).O=∫ΓinxnxdΓQ=∫Γinx[ny(px−cix)−nx(py−ciy)]dΓR=∫Γinx[nx(px−cix)+ny(py−ciy)]dΓP=∫ΓinxnydΓS=∫Γiny[ny(px−cix)−nx(py−ciy)]dΓT=∫Γiny[nx(px−cix)+ny(py−ciy)]dΓN=∫Γi[ny(px−cix)−nx(py−ciy)][ny(px−cix)−nx(py−ciy)]dΓL=∫Γi[nx(px−cix)+ny(py−ciy)][nx(px−cix)+ny(py−ciy)]dΓM=∫ΓinynydΓU=∫Γi[ny(px−cix)−nx(py−ciy)][nx(px−cix)+ny(py−ciy)]dΓ.