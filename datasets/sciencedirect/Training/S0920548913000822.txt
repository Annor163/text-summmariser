@&#MAIN-TITLE@&#
Automating educational processes implementation by means of an ontological framework

@&#HIGHLIGHTS@&#
A LMS-independent method to specify unambiguously learning processes.A method that automatically generates partial implementations of learning processes.A metamodel to define the OKI-OSID specification.An OKI ontology to facilitate the transcriptions from specifications of processes to code.A set of limitations to the OKI specification.

@&#KEYPHRASES@&#
Interface,Educational setting,Pattern,Specification,Ontology,

@&#ABSTRACT@&#
In the area of eLearning the automation of processes from their specifications is still unfeasible. The reason may be the lack of standards and specifications to specify learning processes unambiguously. The work presented in this paper try to solve such problem with two main contributions: the creation of a OKI-OSID metamodel to specify learning processes unambiguously, and the creation of a system that creates automatically partial implementations of learning processes from the OKI-OSID metamodel. Furthermore, an implementation of the method is also provided as well as some insights about the problems found in OKI-OSID and the underspecifications these lacks produces.

@&#INTRODUCTION@&#
Today, educational institutions can reuse a great deal of applications in order to create their own applications to improve learning processes. Applications aimed at e-learning environments can be created in two different ways: a) by using, and extending when necessary, the functions of a Learning Management System (LMS) or b) from scratch. In the first option, the particularities of the LMS platform reused must be taken into consideration, so possible extensions will depend mainly on the base LMS and its limitations. The second option requires the development of applications that can be adapted to the needs and management of each educational institution. Even though, extending an LMS can save implementation time and resources, we believe that implementing systems from scratch is preferable, given that it facilitates the adaptation of applications to each organisational environment irrespective of the LMS.The Object Management Group proposed in the Model Driven Architecture (MDA) methodology a way to create platform-independent software systems from the models that represent their specifications. In MDA the software development is directed by models, meaning that the implementation is mostly done in a higher degree of abstraction: people implement by modelling instead of by programming [12,24]. These models can be seen as the ontologies the information systems need to know in order to perform their functions [5]. In other fields some authors have also created a framework using ontologies for reusing, extracting and extending large domain ontologies by means of a SOA (Service Oriented Architecture) approach [3]. Information systems that use ontologies to be improved are known as Ontology-Driven Information Systems (ODIS) [23]. The main problem in these systems is the necessity to have an ontology that is good enough to be of value to the information system. Creating this ontology is a difficult and very time consuming task that may, sometimes, exceed the time or efforts of developing the application from scratch. However, if we can create an ontology that is general enough to be reused by different information systems of the same domain, then the resources needed for its creation can be acceptable. In the context of eLearning, an ontology that describes the most used specifications or standards, such as the OKI OSID specification, can be used successfully in order to automate some processes, increase interoperability among systems and support the programmers in the creation of new applications.The mid-term objective behind this work is to create an ODIS that supports the creation of learning applications using the MDA methodology. With this objective in mind, the objective of this work is two folded: 1) the creation of an ontology of the OKI-OSID specification that allows the representation of learning processes' specifications, and 2) the creation of an ODIS system that uses the OKI-OSID ontology in order to support the implementation of learning processes.In order to fulfil these objectives, the paper proposes a method for the specification of processes, irrespective of the learning system platform to be used, that is capable of establishing links between the processes that are carried out in different educational environments and their implementation. To prove the feasibility of the proposed model, a prototype was created that part-generate the implementation of educational scenarios by means of graphic representations in educational scenarios [7,6]. This framework is specially aimed at the higher education community and aims to offer support to the construction of learning systems and promote interoperability between different e-learning applications. In order to store and manage the specifications of learning processes the method uses the OKI-OSID ontology. This ontology has been created from scratch and defines the part of the OKI-OSID specification relevant for the proposed method. In addition, an in-depth study was also carried out on the O.K.I. OSID specification that has made it possible to create a metamodel and also to detect a number of its limitations.This work contributes to the community in two main ways: the proposal of a new method to represent learning processes and their interactions with other eLearning applications, and an OKI metamodel that supports creating eLearning applications using a model driven approach (MDA).This paper is composed of seven sections. After the Introduction section, the paper studies the relevant related work. Third section presents an overview of the proposed approach. Thereafter, Section 4 describes the case study that will be used in order to exemplify the proposed approach. Fifth section describes the OKI metamodel that has been created. Later, a discussion about the created metamodel and the architecture developed to create partial implementation from the specification is done in Section 6. Finally, in the last section conclusions and further work are addressed.In the last few decades research in the area of e-learning has evolved considerably with respect to specifications and standards related to digital content, as is demonstrated by a number of specifications and standards that have been developed. For example, Common Cartridge is a standard under which the IMS Consortium has grouped numerous specifications and standards such as Content Packaging v1.2 [16], Question & Test Interoperability v1.2 [17], IMS Tools Interoperability Guidelines v1.0 [15], IEEE Learning Object Metadata v1.0 [13] and SCORM v1.2 [1].Also, research into learning system platforms has undergone significant advances, as is demonstrated by the proliferation of systems of this type, learning systems (such as Claroline [9], LAMS [19] or SharePointLMS [30]) or course management systems (such as Dokeos [10], ILIAS [14], Moodle [22] or SAKAI [28]).However, there are no mechanisms to represent processes in educational environments for the purpose of obtaining a certain degree of automation, as in business with, for example, business process modeling (BPM) [26,20]. Neither is there any ontology when representing processes that makes it possible to formalise processes in educational environments or to promote them being shared, although there are ontologies that formally describe educational environments. For example there are ontologies to describe: learning content [29], interaction between students and learning systems in collaborative environments [21], learning tasks [27], objects of learning and working groups [4] as well as other elements involved in collaborative environment scenarios. As regards frameworks for the construction of learning environments, ELF [18] and OSID (Open Service Interface Definition) by OKI [25] are worthy of mention. Both have a clear orientation towards services and attempt to define what the services of an e-learning system should be.ELF, also known as e-Learning Framework, has been developed by different international organisations with the aim of offering support for the development and integration of systems in the e-learning environment, for research, and for educational administration, which has currently been subsumed by the e-framework initiative. This framework is made up of three levels, one for common services, another for services related to the e-learning domain and finally, a third for users and agents.The O.K.I. OSID specification is another framework aimed specifically at higher education communities and aims to offer a set of web service interfaces for the construction of learning systems for such environments that promote interoperability between applications. Version 2.0 of this framework onwards includes packages to facilitate the development of e-learning systems in languages such as Java C#, but there is still no metamodel to describe this specification on a conceptual level and, thereby, facilitate its use.This section describes a method that supports the development of eLearning applications independently of the LMS used. The proposed method uses a domain ontology to support the automatic creation of part of the implementation of the eLearning applications from their specifications. The method transforms graphic specifications of learning processes in the part of the code that implements them, independently of the LMS reused and the final programming language. We can see a graphical sketch of the proposed architecture in Fig. 1.The proposed method can be seen as a black box that takes the specifications of the eLearning processes provided by the user and generates the source code that implement those processes in a given language (or specification). In order to provide that functionality the system is composed by a domain ontology and a compiler. In this paper we focus in the green elements of the figure, that is the elements that deal with the specification of learning processes in terms of OKI services and its final implementation (OKI ontology and the compiler). The graphical language and the interface that the designer uses in order to specify the learning processes are presented in [7] and [6].The domain ontology allows specifying processes in the eLearning domain. For each process, the ontology allows representing its behaviour, its actors (human or computer processes), its interactions, data sources used (queried and updated), etc. The representation of particular learning processes is done by the instantiation of such ontology. The instantiation may be performed taking into account a graphical specification of the processes entered by the user, such as in [7]. In order to provide a complete and mature interface that can represent implementation details of learning processes independently of the implementation language we have used the OKI-OSID specification. In particular, we created the ontology as a metamodel of the OKI-OSID specification.For each learning process, stored in the domain ontology an inference engine processes a set of rules in order to translate the specification of the learning processes in terms of OKI services, creating several instances in the OKI ontology. Once the translation process is done, the OKI ontology will contain enough information to create a partial implementation of the specified processes. Thereafter, a compiler translates the knowledge stored in the ontology to source code that includes invocations to web services useful to implement the processes to automate in different programming languages. Even though the generated implementation is not complete, the system is able to generate most of the web services' contracts and the calls necessary to implement the interactions between learning processes.In order to exemplify our method and test it we used a real case, which is simple but representative enough to serve as a concept text. This case study consists of an educational scenario dealing with the assignation of teachers to a database subject of the Open University of Catalonia.However, before describing the selected scenario as a case study, we need to define the concept of an educational scenario. In general, we understand an educational scenario to be a set of activities that occur in a learning environment with the aim of preparing that environment, offering support during the learning process and evaluating the results obtained and the competences acquired during the learning process. For example, educational scenarios could include the preparation of a course and the correction of activities or course evaluation.Scenarios in educational environments tend to follow a common pattern, although they are adapted in one way or another depending on the institution, according to each particular organisation and its rules. Therefore, the figures involved and the resources used to reach the established objective will vary according to the organisation context in question.For example, before the start of the course any educational institution should assign teaching staff to the classrooms in which the course will take place. And a specific case of this generic scenario might be the scenario of Basic Consultancy Task (EBC in Catalan) Task Assignation for the Databases I course in the Autumn semester of 2010 at the Open University of Catalonia (UOC), which has been chosen as for the case study.The Open University of Catalonia is an online university offering all types of courses including higher and postgraduate studies. Currently, more than 40,000 students are enrolled and among other qualifications it offers Technical Systems Engineering (ITIS) and Technical Management Engineering (ITIG).One of the compulsory subjects in these courses is Databases I (BDI), which is taught in several classrooms given the high number of students enrolled. Due the practical nature of the subject it uses two types of classrooms: theory classrooms and laboratory classrooms.All subjects at the UOC are led by the lecturer responsible for the subject (PRA), who coordinates a team of teaching staff. The team members carry out the teaching and are known as consultants. The PRA, among other tasks, prepares the course and has to assign a consultant to each classroom. Assigning a classroom means that the consultant accepts responsibility for guiding the students assigned to the classroom during the learning process, correcting their activities and resolving any queries they may have. The UOC calls this a basic consultancy task (EBC).The EBC Task Assignment scenario for the BDI course occurs when the system detects the need to assign consultants to classrooms. Therefore, for each course identified by subject and semester, consultants or expert PDCs in the subject are found who can teach the courses, whether on a theoretical or practical level, and this information is given, together with the number of classrooms of each type, to the PRA, who uses it to carry out an initial assignment proposal. This proposal is returned to the system, which, in turn, sends individual notifications of the assignment to each consultant for their acceptance. Once all the assignment acceptances have been collected, the EBC is established for the course and, therefore, can be registered in the UOC repository for payment purposes, at the same time as the system notifies the finalisation of the scenario.From this description it is deduced that in this scenario the following teaching figures are involved: the PRA and the group of consultants, which, in this case, for the Catalan campus are three theory consulters and one for the laboratory. The required resources are the course data (IdSubject_DBI, IdTerm_DBI), the number of classrooms by type (DefaultNumClassroomsByType_DBI), the list of consultants of each type for BDI (ConsultantsByTypeList_DBI), the list of consultant assignments to BDI classrooms (AsignmentsConsultancyList_BDI), the notifications of acceptance (AssignmentToClassroom_DBI), the confirmations of acceptance (AssignamentAcceptance_DBI), the list of EBC tasks for BDI (TaskListEBC_DBI) and the UOC repository where the available consultants for the course can be accessed and the assigned EBC tasks stored. The scenario can be represented as a single process known as AssignEBCTasks_DBI_A10.Graphically, the educational scenario described above can be represented as indicated in Fig. 2.In Fig. 2 a representational language based on the standard BPMN [20,26] is used as a notation, allowing the processes occurring in educational environments to be represented as sequences of processes that require the use of certain resources and the involvement of participants external to the system in order to perform the task. This language is described in detail in [7] and to facilitate its use a CASE tool has been developed to offer support to the specification of scenarios using this notation. More information about this tool can be found at [6].The O.K.I. OSID specifications emerged in 2001 as an initiative of the Mellon Foundation to offer support to the development of LMS, which was later supported by MIT and other collaborating institutions. This specification defines an open architecture extendable for the construction of e-learning systems specially aimed at the higher education communities.A principal contribution of this specification is the set of definitions of web service interfaces (Open Service Interface Definitions) proposed for communication between the components of a learning environment, whether part of the platform or between different platforms, designed to facilitate the adaptation towards new technology and integration with the rest of the technological infrastructure of learning systems.There are different versions of this specification and, although there is a version 3, a metamodel of the second version (the last stable version of the specification) has been created, which offers a set of packages that facilitate the use of interfaces proposed in Java and C applications.This section focuses on the metamodel of the O.K.I. OSID specification and presents, whose part required to test feasibility of the prototype for the case study. The full version of the metamodel can be obtained from [8].Given the restrictions of space, only the OSIDs relevant for the case study are described. These OSIDs are:a)Agent to define the roles of PRAs and consultants, as well as the different processes involved, such as Assign Tasks EBC BDI T10Scheduling to define the consultancy tasks, specifically the EBC task and the assignment of said tasks to each consultant that will be teaching a courseCourse Management to represent the assignment data, the semester in question, the course and the different course classroomsUser Messaging to describe the information that is exchanged in each interaction of the process with external elements, such as teaching staffRepository to define the UOC repository and the information stored therein.Each of these OSIDs is defined through a set of properties and several associated methods per property and OSID. In order to facilitate its description, we present for each OSID:1)An UML class diagram that graphically describes the classes of the OSID, the properties of each class, and the relationships between classes (both belonging to the OSID and external),the classes contained in the OSID, and for each of them its properties and the necessary rules to define derived properties or integrity constraints using Semantic Rule Web Language (SWRL) andthe necessary comments regarding the relationships between classes and any methods that are not explicitly class constructors or getters and that need to be mentioned separately.The derivation rules written in SWRL shown in this paper will be used by the reasoner in order to infer the instances of some classes and properties based in the information stored in other classes or properties.This OSID has been designed to create, manage and query agents, understanding an agent as a person or a process that interacts with the learning system. There are groups of agents that can contain other groups that are also managed and accessed through the interfaces of this package.Fig. 3shows the class diagram for the O.K.I. OSID-v2 Agent package in which two classes can be distinguished: Agent and Group.An Agent is a body (individual or process) involved in specific services. Table 1shows the properties of this class.Even though the Agent class maintains relationships with many other classes, they are not mentioned in this section since navigability is in the opposite direction. They will be defined when the other classes are described.One instance of the Agent class in the case study is the PRA in the DBI course (PRA_DBI) and each of the consultants (TheoryConsultant_DBI_1, TeoryConsultant_DBI_2, TeoryConsultant_DBI_3, LaboratoryConsultant_BDI_1), as well as the process AssignEBCTaslks_DBI_A10.A Group is a type of specific agent representing the grouping of one or more agents under the same name or description.Groups may contain other groups. Given that a group is a specialisation of an agent, it inherits all of its properties and also includes some new attributes, as shown in Table 2.An instance of a Group class is the BDI consultancy team (ConsultancyTeam_DDI) whose members are consultants for the BDI course.The O.K.I. OSID specification takes into account some relationship types between the classes Agent and Group: the agents that are members of a group (Members) and the groups where agents belong (Groups). Table 3shows these relationship types.

@&#CONCLUSIONS@&#
