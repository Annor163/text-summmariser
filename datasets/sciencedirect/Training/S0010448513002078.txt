@&#MAIN-TITLE@&#
Constructing a meta-model for assembly tolerance types with a description logic based approach

@&#HIGHLIGHTS@&#
Constraint relations are formalized by assertional axioms.Assembly tolerance types are defined with terminological axioms.Assembly tolerance types are generated automatically in the meta-model.The meta-model has rigorous logic-based semantics.The meta-model lays a good foundation for realizing semantic interoperability.

@&#KEYPHRASES@&#
Meta-model,Assembly tolerance types,Semantic interoperability,Description logics,

@&#ABSTRACT@&#
There is a critical requirement for semantic interoperability among heterogeneous computer-aided tolerancing (CAT) systems with the sustainable growing demand of collaborative product design. But current data exchange standard for exchanging tolerance information among these systems can only exchange syntaxes and cannot exchange semantics. Semantic interoperability among heterogeneous CAT systems is difficult to be implemented only with this standard. To address this problem, some meta-models of tolerance information supporting semantic interoperability and an interoperability platform based on these meta-models should be constructed and developed, respectively. This paper mainly focuses on the construction of a meta-model for assembly tolerance types with a description logicALC(D)based approach. Description logics, a family of knowledge representation languages for authoring ontologies, are well-known for having rigorous logic-based semantics which supports semantic interoperability.ALC(D)can provide a formal method to describe the research objects and the relations among them. In this formal method, constraint relations among parts, assembly feature surfaces and geometrical features are defined with someALC(D)assertional axioms, and the meta-model of assembly tolerance types is constructed through describing the spatial relations between geometrical features with someALC(D)terminological axioms. Besides,ALC(D)can also provide a highly efficient reasoning algorithm to automatically detect the inconsistency of the knowledge base, a finite set of assertional and terminological axioms. With this reasoning algorithm, assembly tolerance types for each pair of geometrical features are generated automatically through detecting the inconsistencies of the knowledge base. An application example is provided to illustrate the process of generating assembly tolerance types.

@&#INTRODUCTION@&#
Semantic interoperability refers to the ability of computer systems to transmit data with unambiguous, shared meaning  [1]. With the sustainable growing demand of collaborative product design, there is a critical requirement for semantic interoperability among heterogeneous CAT systems  [2,3]. To implement semantic interoperability, heterogeneous CAT systems should have the ability to transmit tolerance information with unambiguous, shared meaning. However, CAT systems are developed separately and independently by different vendors. The data storage format and information transmission mode are all different in these systems. So CAT systems must use the standard for the exchange of product model data (STEP)  [4] as an intermediary to realize the exchange of tolerance information among them. From the perspective of data exchange, STEP has the following drawbacks  [5]: (1) STEP uses neutral files to realize data exchange. Because these neutral files always occupy a large amount of space, it is difficult to implement the real-time data exchange. (2) STEP attempts to use the EXPRESS modeling language to construct consistent semantic models. But because concepts are always expressed with ambiguous meaning in different application domains, it is difficult to construct a general semantic model. (3) STEP provides the mapping mechanisms from EXPRESS language to extensible markup language (XML). The uncontrollable nestifications in XML will lead to extremely complex structure and lacking data constraint of XML documents. Data exchange in STEP still remains on the level of syntax but not on the level of semantics. Thus, tolerance information is difficult to be transmitted unambiguously and semantic interoperability among heterogeneous CAT systems is difficult to be implemented only with STEP  [6].To accomplish semantic interoperability among heterogeneous CAT systems, some meta-models of tolerance information supporting semantic interoperability should be constructed and then an interoperability platform based on these meta-models should be developed. This paper mainly focuses on constructing a meta-model of assembly tolerance types with a description logicALC(D)based approach. The meta-models of other tolerance specifications will be constructed and the interoperability platform based on all these constructed meta-models will be developed in the upcoming works.Description logics, a family of knowledge representation languages for authoring ontologies, are well-known for having rigorous logic-based semantics supporting interoperability. They have been widely applied to the field of industrial information systems to realize semantic interoperability  [7]. The main strength of description logics is they provide considerable expressive power going far beyond propositional logic, while reasoning is still decidable. Furthermore, they offer highly efficient reasoning algorithms  [8]. As a kind of knowledge representation languages, the intuition of description logics is to define concepts of a domain and use these concepts to specify the properties of individuals occurring in this domain. The primitive symbols of description logics are a set of role names, a set of concept names and a set of individual names. Starting from these symbols, each kind of description logics provides a set of constructors to form complex roles and concepts. Attributive language with complements (ALC)  [9] is one of the most influential description logics. It provides negation (¬), conjunction (⊓), disjunction (⊔), existential restriction (∃) and value restriction (∀) constructors for construction of concepts. With these constructors, some knowledge on abstract logical level can be described. For example, the concept Computer-aided-tolerancing can be specified as follows:Computer-aided-tolerancing≡Tolerance-design⊓∃use.Computer.Which represents that computer-aided tolerancing is concerned with all aspects of using a computer to do tolerance design.ALCnot only provides certain expressive power for describing the knowledge on abstract logical level, but also desirable computational properties such as decidability, soundness and completeness of deduction procedures. However, a drawback ofALCis that all the knowledge has to be defined on abstract logical level. For example, coaxiality tolerance can be defined as a geometric variation caused by two coincident lines. This example refers to the knowledge defined on concrete logical level.ALCis not sufficient for describing the knowledge in the example.To meet the requirements of applications in which the knowledge can be defined on a concrete logical level,ALCis extended by adding a concept-forming predicate constructor andALC(D)[10] is therefore achieved.ALC(D)divides the set of logical objects into two disjoint sets, the abstract and the concrete objects. Abstract objects can be related to concrete objects via attributes. Relations between concrete objects are described with a set of domain specific predicates. Referring to these predicates, properties of abstract objects can also be described through using the concept-forming predicate constructor. InALC(D), the pair consisting of a set of concrete objects and a set of predicates defined over these objects is called a concrete domain. With a concrete domain, knowledge in a concrete application domain can be described and reasoned conveniently. SoALC(D)is quite sufficient to model assembly tolerance types. To make this paper self-contained, a technical background aboutALC(D)is sketched in Section  2.The rest of the paper is organized as follows. An overview of related works is given in Section  3. Constraint relations in the spatial relations based assembly tolerance representation model  [11] are defined with someALC(D)assertional axioms in Section  4. Section  5 defines a concrete domainDATand constructs a meta-model of assembly tolerance types with someALC(DAT)terminological axioms. Section  6 provides an application example to illustrate the process of generating assembly tolerance types in the constructed meta-model. Finally, discussions are carried out and conclusions are drawn in Sections  7 and 8, respectively.In this section, a brief introduction to the concrete domain and the syntax, semantics and reasoning algorithm of description logicALC(D)[10] are given.As mentioned in the introduction, the pair which consists of a set of concrete objects and a set of predicates defined over these objects is called a concrete domain. It can be formally defined as follows:Definition 1A concrete domainDconsists of a setdom(D), the domain ofD, and a setpred(D), the predicate names inD. Each predicate namePis associated with an arityn, and ann-ary predicatePD⊆dom(D)n.Primitive symbols of description logicALC(D)contain: a set of concept namesNC; a set of role namesNR; a set of abstract domain individual namesNAI; a set of concrete domain individual namesNCI; a set of attribute namesNA; a set of predicate namespred(D); the constructors¬,⊓,⊔,∃,∀, andC∃P; other symbols, including subsumed symbol⊑, defined symbol≡, parenthesis (), colon :, comma , and period ..Starting with these symbols, the concept terms ofALC(D)are inductively defined with a set of constructors.Definition 2The concept terms ofALC(D)is generated by the following syntax rule:C,D→Ci∣¬C∣C⊔D∣∀R.C∣P(u1,u2,…,un)whereCi∈NC,R∈(NR∪NA),P∈pred(D),u1,u2,…,un∈NA.The expressions of the formsCi,¬C,C⊔D,∀R.CandP(u1,u2,…,un)are atomic concept, concept negation, concept disjunction, value restriction and predicate restriction, respectively. The concept terms satisfy DeMorgan law. Thus the expressions of the forms Top (universal concept), Bot (bottom concept),C⊓D(concept conjunction) and∃R.C(existential restriction) are introduced as the abbreviations of the expressionsC⊔¬C,¬Top,¬(¬C⊔¬D)and¬(∀R.¬C).LetAbe a concept name,Cbe a concept term, the expressionsA≡CandA⊑C(called concept definitions) are all terminological axioms. A finite set of terminological axiomsTis a terminology or TBox iff the left-hand sides of all terminological axioms inTare unique.Now, a meaning can be assigned toALC(D)concept terms by giving a set-theoretic semantics as usual.Definition 3LetSIbe a set of abstract domain individuals,SDbe a set of concrete domain individuals, andSI∩SD=∅, the interpretation ofALC(D)is a pairI=(SI,⋅I), where⋅Iis an interpretation function which maps each concept nameCto a subsetCIofSI, each role nameRto a subsetRIofSI×SI, and each attribute namefto a partial functionfIfromSItoSD∪SI. Moreover, the interpretation function must satisfy the following equations:•TopI=SIBotI=∅(¬C)I=SI∖CI(C⊓D)I=CI∩DI(C⊔D)I=CI∪DI(∃R.C)I={a∈SI|∃b.(a,b)∈RI∧b∈CI}(∀R.C)I={a∈SI|∀b.(a,b)∈RI→b∈CI}P(u1,u2,…,un)I={x∈SI|∃r1,r2,…,rn∈SD:u1I(x)=r1∧u2I(x)=r2∧⋯∧unI(x)=rn∧(r1,r2,…,rn)∈PD}.An interpretationIis a model of aTBoxTiff it satisfiesAI=CIfor all terminological axiomsA≡C, andAI⊆CIfor allA⊑CinT.The following definition introduces the assertional language ofALC(D)which is used to represent knowledge about individual worlds.Definition 4LetNAI∩NCI=∅,Cbe a concept term,R∈NR,f∈NA,P∈pred(D),a,b∈NAI,x∈NAI∪NCIandx1,x2,…,xn∈NCI, the following expressions are assertional axioms:a:C,(a,b):R,(a,x):fand(x1,x2,…,xn):P.A finite set of assertional axioms is an ABox (denoted asA). An interpretationIsatisfies an assertional axioma:CiffaI∈CI,(a,b):Riff(aI,bI)∈RI,(a,x):fifffI(aI)=xIand(x1,x2,…,xn):Piff(x1I,x2I,…,xnI)∈PD.A knowledge base is a finite set of terminological axioms and assertional axioms (denoted asKB={T,A}), whereTdenotes TBox,Adenotes ABox. An interpretationIis a model of a knowledge base KB iff it is a model of bothAandT.Definition 5Letψbe an assertional axiom, KB be a knowledge base,ψis consistent with respect to KB iff there exists a modelIwhich satisfies KB⊧ψ,ψis inconsistent with respect to KB iff there does not exist a modelIwhich satisfies KB⊧ψ.The Tableau decision algorithm ofALC(D), determining whether anABoxAis consistent or not, is based on a set of propagation rules transformingAinto “simple” consistency preservingABoxAiuntil each of allAicontain a clash (indicating thatAis inconsistent) or someAidoes not contain a clash (indicating thatAis consistent). Obviously, the propagation rules and clash triggers need to be defined first.Definition 6In anABoxA, letC,D∈NC,R∈(NR∪NA),P∈pred(D),u1,u2,…,un∈NA,a,b∈NAIandx1,x2,…,xn∈NCI, the following propagation rules will replaceAby anABoxA′or by twoABoxesA′andA″.•The conjunction rule. Ifa:(C⊓D)∈Aanda:C∉Aora:D∉A, thenA′→A∪{a:C,a:D}.The disjunction rule. Ifa:(C⊔D)∈Aanda:C,a:D∉A, thenA′→A∪{a:C},A″→A∪{a:D}.The existential restriction rule. Ifa:∃R.C∈Aandb:C∉A, thenA′→A∪{(a,b):R,b:C}.The value restriction rule. Ifa:∀R.C∈Aandb:C∉A, thenA′→A∪{b:C}.The predicate restriction rule. Ifa:P(u1,u2,…,un)∈A, and the following situation does not hold: For the feature chainsui=fi1fi2…fin(i)(i=1,2,…,n), there are object namesbi1bi2…bin(i)−1∈NAIandxi∈NCIsuch that(a,bi1):fi1,(bi1,bi2):fi2,…,(bin(i)−1,xi):fin(i),(x1,x2,…,xn):P∈A. ThenA′→A∪{(x1,x2,…,xn):P}.Definition 7LetC∈NC,f∈NA,P∈pred(D),a,b∈NAI,x1,x2,…,xn∈NCI, anABoxAis inconsistent iff it contains the following clash triggers:•Abstract domain clash:a:C∈Aanda:¬C∈A.Attribute domain clash:(a,x):f∈Aand(a,b):f∈A.Concrete domain clash:(x1,x2,…,xn):P∈Aand(x1,x2,…,xn):¬P∈A.All domain clash:(a,x):f∈Aanda:∀f.C∈A.With the above propagation rules and definition, the Tableau decision algorithm can be defined as follows.Algorithm 1The following procedure takes anABoxA0as an argument and returns “A0is consistent” ifA0has a model, and “A0is inconsistent” ifA0has no model.Baader and Hanschke  [10] have proved that the Tableau decision algorithm ofALC(D)satisfies the properties of termination, soundness, and completeness. Lutz  [12] have proved that if reasoning with the concrete domainDis in PSPACE, reasoning withALC(D)is PSPACE-complete.

@&#CONCLUSIONS@&#
A meta-model for assembly tolerance types is constructed in this paper to ultimately implement semantic interoperability among heterogeneous CAT systems. The constructed meta-model is formalized with description logicALC(D), a kind of knowledge representation language which has rigorous logic-based, explicit and computer interpretable semantics. SinceALC(D)provides a formal method to describe the research objects and the relations among them, constraint relations in the spatial relations based model  [11] are represented withALC(D)assertional axioms, and assembly tolerance types determined by spatial relations between geometrical features are represented withALC(D)terminological axioms. With the highly efficient reasoning algorithm to detect the inconsistency of the knowledge base providing byALC(D)automatically, assembly tolerance types determined by each pair of mutual constraint geometrical features can be generated automatically by detecting the inconsistency of the meta-model. Because of the rigorous logic-based, explicit and computer interpretable semantics ofALC(D), the meta-model can lay a good foundation for future implementation of semantic interoperability among heterogeneous CAT systems.