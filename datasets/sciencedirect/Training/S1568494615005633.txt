@&#MAIN-TITLE@&#
Weighted Superposition Attraction (WSA): A swarm intelligence algorithm for optimization problems – Part 2: Constrained optimization

@&#HIGHLIGHTS@&#
The Weighted Superposition Attraction (WSA) algorithm was designed so as to tackle the constrained global optimization problems.Effects of the constraint handling methods over WSA were discovered.The convergence capability and the robustness of WSA were proven through a set of computational study.WSA produced better results than the best known results of mechanical design problems in literature.

@&#KEYPHRASES@&#
WSA algorithm,Non-linear programming,Constrained global optimization,Design optimization,Constraint handling,

@&#ABSTRACT@&#
This paper is the second one of the two papers entitled “Weighted Superposition Attraction (WSA) Algorithm”, which is about the performance evaluation of the WSA algorithm in solving the constrained global optimization problems. For this purpose, the well-known mechanical design optimization problems, design of a tension/compression coil spring, design of a pressure vessel, design of a welded beam and design of a speed reducer, are selected as test problems. Since all these problems were formulated as constrained global optimization problems, WSA algorithm requires a constraint handling method for tackling them. For this purpose we have selected 6 formerly developed constraint handling methods for adapting into WSA algorithm and analyze the effect of the used constraint handling method on the performance of the WSA algorithm. In other words, we have the aim of producing concluding remarks over the performance and robustness of the WSA algorithm through a set of computational study in solving the constrained global optimization problems. Computational study indicates the robustness and the effectiveness of the WSA in terms of obtained results, reached level of convergence and the capability of coping with the problems of premature convergence, trapping in a local optima and stagnation.Iteration number (stopping condition)Current iteration numberNumber of artificial agentsNumber of dimensions of the problemUser defined parameterUser defined parameterUser defined parameterUpper limit for the dimensionsLower limit for the dimensionsFitness of the current point of agent iFitness of the target pointWeight of the current point of an agentCurrent position vector of an agentPosition vector of the target pointVector combines an agent to target pointMove direction vector of an agentSignum functionStep length

@&#INTRODUCTION@&#
Optimization consist all of the endeavours within the purpose of systematically improving the effectiveness of a system or designing a system as efficient as possible. In other words, optimization procedures aim at finding the optimum values for the decision variables of the problem on hand by realizing some specific rules. During the optimization process it is possible to use different optimization procedures. The key issue is to determine the proper one thereby the most powerful optimization method, since the classical optimization techniques impose some limitations on solving complex optimization problems [1]. Within this context, many researchers have been interested in developing effective optimization procedures or improving the effectiveness of the existing optimization procedures for different optimization problems, which may arise in such fields of science, engineering and operational research.The domain of the decision variables of an optimization problem specifies the type of the optimization problem. Optimization problems are divided into three categories by the means of the domain of decision variables: (i) problems having exclusively discrete decision variables, (ii) problems having exclusively continuous decision variables, and (iii) problems having both discrete and continuous decision variables. The optimization problems belonging into these three categories may also be classified into two groups: constrained and unconstrained global optimization problems. This current paper is about to tackle the constrained global optimization problems via Weighted Superposition Attraction (WSA) algorithm, which was developed by Baykasoğlu and Akpınar in the Part-I of this paper as a new member of swarm based meta-heuristic algorithms and used to solve unconstrained global optimization problems [2].Global optimization, a branch of applied mathematics and numerical analysis, is a challenging research field, since many real word applications could be formulated as a global optimization problem. Engineering design, production management, computational chemistry, and environmental pollution management are some of the application fields of the global optimization. The rapidly developed global optimization techniques has taken interest in different scientific domains such as applied mathematics, operations research, industrial engineering, management science and computer science. Within this context, this current part of this paper mainly focus on analysing the performance of WSA algorithm on the well-known constrained mechanical design optimization problems, which are formulated as complex nonlinear programming models.A theoretical background of the engineering design optimization problems was reported by Belegundu [3] and the basic concepts and methods for these problems were described by Arora via some examples [4]. For the global optimization problems, the developed methods should monitor the approach of the algorithms towards the optimum point via a descent function [4] refers to the cost function of the problem. Nevertheless, the descent function must be aware of the feasibility for the constrained global optimization problems. For that reason, it is required to construct the descent function by adding a penalty to the current value of the cost function in case of the constraint violations and researchers would rather derive the penalty value via some formulations named as constraint handling methods.An improvement for the conventional constraint handling methods was introduced by Coello [5,6]. Their notation uses adaptive penalty factors for a Genetic Algorithm (GA) implementation, however, it has the potential of to be generalizing to any meta-heuristic. Coello and Mezura-Montes proposed another constraint handling method in order to overcome the constraint violations through the selection operator of GA [7,8]. A simple evolution strategy based approach, which does not require a penalty function, was presented by Mezura-Montes et al. [9]. Coello and Becerra proposed a cultural algorithm, which builds the map of the feasible region during the evolutionary process in order to avoid infeasibility and improves the performance of an evolutionary programming technique [10]. Another evolutionary-based approach free from penalty functions was proposed by Mezura and Coello in order to identify and maintain infeasible solution close to feasible region located in promising areas [11]. Furthermore, Akhtar et al. and Ray and Liew presented solution approaches based on the phenomenon of society and civilization for constrained engineering design optimization problems [12,13].Ray and Sani presented a swarm based approach that realizes a Pareto ranking scheme as a constraint handling method [14]. A feasibility preserving Particle Swarm Optimization (PSO), which is a well-known member of swarm based algorithms, was developed by Hu et al. [15]. A constraint handling approach named as fly-back method, makes any individual to return to its previous position it violates any problem constraint, was realized by He et al. in order to improve the performance of PSO while solving mechanical design optimization problems [16]. Parsopoulos and Vrahatis tested the performance of a unified PSO method by realizing a penalty function and a feasibility preserving modification of the algorithm [17]. A constraint handling technique based on feasibility and sum of constraints violation was realized by Aguirre et al. while tackling the constrained optimization problems via PSO [18]. He and Wang incorporate a co-evolution model into PSO for the first time and their approach realized two types of swarms, multiple swarms for searching satisfactory solutions and a single swarm for evolving suitable penalty factors [19]. A novel hybrid PSO was also presented by He and Wang with a feasibility-based rule has the aim of overcoming the deficiencies of penalty function methods [20]. Tomassetti proposed another hybrid PSO, which was inspired from evolutionary algorithms and realizes multi-start approach, randomly reinitializing the swarm and updating the inertia factor multiplying the previous velocity of the swarm with the aims of enlarging the exploration space, accelerating convergence to the optimal solution and avoiding the algorithm to remain trapped into local minima, respectively [21]. Cagnina et al. proposed a PSO with simple pairwise-comparison based constraint handling method and their method adds an amount of violation, normalized with respect to the largest violation stored far, for the infeasible solutions [22]. A new tool based on PSO proposed by Maruta et al. and it is applicable for a broad class of non-convex problems directly [23]. Kim et al. and Chun et al. proposed a PSO algorithm with a constraint handling method that transforms the given constrained optimization problem into an unconstrained problem without introducing extra problem-dependent parameters such as penalty factors or Lagrange multipliers [24,25].From the previous two paragraphs, it can be obviously seen that GA, PSO and evolutionary strategies were widely used for solving constrained global optimization such as mechanical design optimization problems. Besides these solution methodologies, some other meta-heuristic algorithms (Artificial Bee Colony Algorithm (ABC) [26,27], Differential Evolution (DE) [28], Harmony Search Algorithm (HSA) [29,30], Cuckoo Search Algorithm (CSA) [31], Bat Algorithm [32], Great Deluge Algorithm (GDA) [1] and Firefly Algorithm (FA) [33,34] were also preferred by varied researchers with the aim of tackling the related problems. Additionally, it must be stated that current competitive market and manufacturing conditions result many problems concerning design optimization and manufacturing parameters estimation. At this point, these problems required to be solved optimally and design optimization/manufacturing parameters estimation via meta-heuristics is a growing and challenging research field as can be realized from the existing literature [35–42].The main research concern of this current paper is to analyze the performance of WSA algorithm on the well-known constrained mechanical design optimization problems. The WSA algorithm was originally designed for unconstrained continuous global optimization problems in the first part of this paper, thus it requires to be redesigned so as to solve constrained problems and a constraint handling approach must be inserted into WSA. Within this context, we select 6 different constraint handling approaches for implementing WSA through them and analyze if the performance of WSA is strongly related with the used constraint handling approach or not. By the way we will have the ability of providing concluding remarks about the robustness of WSA for solving constrained mechanical design optimization problems at the end of the computational study of this paper.The remainder of this paper is organized as follows. In section 2, the WSA algorithm and the selected constraint handling methods are depicted. Comparative computational study is given in Section 3. Finally, the discussions and conclusions are presented in Section 4.In this paper, we have the aim of investigating the effectiveness of WSA algorithm on constrained global optimization problems. Baykasoğlu and Akpınar introduced WSA as a new member of swarm-based meta-heuristic algorithms in the first part of this paper and they also indicated that WSA has a conspicuous effectiveness on unconstrained continuous global optimization problems [2]. In parallel with the aim of the first part this paper, we will be tested the performance of WSA on the well-known mechanical design problems in the second part of this paper. Additionally, WSA requires a constraint handling mechanism when dealing with these problems, since they formulated as constrained global optimization problems. Within this context, we will be adapted 6 formerly developed constraint handling mechanisms for WSA. The WSA algorithm and the selected 6 constraint handling mechanism will be explained in the following sub-sections in details.Swarm intelligence has an attractant affect over the optimization research community, since both combinatorial and functional optimization problems were effectively solved by the search algorithms based on the simulation of routine behaviours of different swarms such as birds, fishes, ants, and honey bees. Similarly WSA was based on the superposition principle in combination with the attracted movement of agents that are observable in many systems; the same is also possible for social systems as well. This new member of the swarm-based meta-heuristic algorithms attempts to model and simulate the dynamically changing superposition due to the dynamic nature of the system in combination with the attracted movement of agents as indicated in the first part of this paper. The general flowchart of the WSA algorithm is given in Fig. 1.At the initializing phase WSA generates a pre-defined number of feasible solutions. Additionally, some parameter values required to be set in order to guide WSA during its search. After that, WSA starts its discovery on the solution space via its special search mechanism, which provides WSA to visit and evaluate different points of the search space and will be explained in the following sub-section with the title of neighbourhood mechanism.As mentioned in the first part of this paper, WSA is based on the superposition principle in combination with the attractant movement of agents that are observable in many systems. Within this context, WSA realizes artificial agents on a solution space and these artificial agents discover the solution space by moving from one point to another until the optimum point is found. During their movement on the solution space, the agents decide their search direction via the guidance of the superposition of their current positions. An artificial agent is disposed to move towards the superposition, if it is attractive for the related artificial agent. WSA determines the superposition such that the weighted sum of the agents’ position vectors forms the superposition and the weights are proportionally determined according to agents’ current position finesses. This superposition is a target point, which may attract the agents and they may move towards this target point. Once the move direction was determined by the artificial agents, each agent has to decide the move distance from its current location. Briefly, the neighbourhood mechanism of WSA is based on the determination of a search direction and a step length.WSA positions artificial agents at randomly selected points from the solution space. Each artificial agent is employed with collecting data about the fitness value and the position vector of its current location. After that, WSA uses all the collected data in order to determine the aforementioned target point. For this purpose, WSA ranks the artificial agents in ascending order according to their current location's fitness values, since the current paper deals with the minimization problems. After that, WSA assigns some weights to each artificial agent in accordance with their ranks, the lower the rank has an artificial agent, the higher the weight will be assigned to it, and determines the target point with regard to these weights by using the procedure given in Fig. 2.Whenever the target point determined, each artificial agent has to decide whether to move towards this point or not. Every artificial agent has to select one of two possible alternatives, moving towards the target point or not, by comparing the fitness value of the target point with the fitness value of its current location. If the target point is better than an artificial agent's current location, the related artificial agent certainly moves towards the target point. Otherwise, an artificial agent selects its move direction by comparing a randomly generated number via the value obtained as e(f(i)−f(tar)), where f(i) is fitness value of the current position of the related agent i and f(tar) is the fitness value of the target point. If the random number is lower than the obtained value, the related artificial agent decides to move towards the target point. Otherwise, it moves towards a randomly selected direction. The search direction determination procedure realized by WSA is given in Fig. 3.As mentioned earlier, neighbourhood mechanism has two major components, determination a search length and a step length. Once an artificial agent decided to move towards a direction, then it must decide the length of its move. After giving these decisions, each artificial agent updates its position by using a position updating mechanism [43]. By this way, artificial agents move one position to another for discovering its current position's neighbour area. The related position updating mechanism is given by Eq. (1) and agent i (1≤i≤AA) update its position on dimension j (1≤j≤D) at iteration t as below.(1)xij(t+1)=xij(t)+sl(t)*dij(t)*xij(t)where xij(t) is the value of the position of agent i on dimension j at iteration t, sl(t) is the value of step length at iteration t, dij(t) is the search direction of agent i on dimension j at iteration t, xij(t) is the norm of the position vector of agent i on dimension j at iteration t, and dij(t)∈{−1, 0, 1}.The second term (sl(t)*dij(t)*xij(t)) of the right hand side of Equation 1 updates the position of an artificial agent. Properly determining the step length makes the WSA algorithm to search solution space intensively and provide a satisfactory performance, from the optimization point of view. WSA realizes the step sizing function developed by [43] on the basis of the one that represented by [1]. This function is given by Eq. (2) and requires an initial step length (sl0) to be set. As the search progress WSA varies the step length via a proportional rule, which uses a randomly generated number r between 0 and 1 and a user defined parameter λ (Lambda).(2)sl(t+1)=sl(t)−e−t/(t+1)*φ*sl(t)ifr≤λsl(t)+e−t/(t+1)*φ*sl(t)ifr>λwhere t is the iteration number and φ(Phi) is a user defined parameter. WSA decreases the step length as the search progresses with regard to iteration number, although it increases the step length for some randomly generated iterations in order to achieve the ability of jumping out of local extremum points. The position update procedure realized by WSA is depicted in Fig. 4and this procedure in conjunction with procedure given in Fig. 3 specifies the moving patterns of the artificial agents in the search space during their explorations. On the other hand, it must be noted that the position update procedure may result a feasibility problem by inducing some artificial agents to exceed the search limits for some dimensions of the problem. In such a situation, WSA equalize the related dimension to UL if it exceeds UL and LL if it exceeds LL.As indicated before, the current part of this paper deals with the mechanical design problems as the constrained optimization problems having a general non-linear programming model in the following form.(3)Minf(x→)s.t.(4)gj(x→)≤0,j=1,…,J,(5)hk(x→)=0,k=1,…,K,(6)xil≤xi≤xiu,i=1,…,D.wherex→is an n dimensional vector and ith dimension (variable) can have values in the range of[xil,xiu]. Additionally, the equality constraints could be transformed into equality constraints thanks to a parameter of δ, which has a small positive value, in such a way thatgk+J(x→)≡|hk(x→)|−δ≤0[44]. Thus, the non-linear constrained optimization problem (3)–(6) will have m=J+K number of inequality constraints. A great deal of approaches were developed for solving these type of problems and the crucial component of these approaches is the used constraint handling method for guiding the search towards the satisfactory regions of the solution space. Additionally, constraint handling methods reduce the non-linear constrained optimization problem (3)–(6) into an unconstrained optimization problem. For more detailed information about the literature on constraint handling methods the reader can refer to [45,6,46,44]. As the WSA algorithm originally developed for unconstrained continuous global optimization problems, it also requires a constraint handling method while dealing with the constrained global optimization problems. For this purpose, we adapted six formerly proposed handling methods, Static Penalty Function [45–47], Adaptive Penalty Function [48], Dynamic Penalty Function [49], Inverse Tangent Constraint Handling (ITCH) approach [1,24], Deb's Method [50], and Morales and Quezada's Method [51], to WSA algorithm. As mentioned before, we will have the ability to analyze the effects of the handling methods on WSA and we would produce concluding remarks about the robustness of the WSA algorithm by this way.Static penalty function refers to an approach in which the iteration number has no effect over the determination of the penalty factor as the search progresses. Homaifar et al.’s method requires several levels of violation to be set, and penalty factors are chosen with regard to level of violation, the higher level of violation results the higher penalty factor to be selected, for the infeasible solutions [47]. This method evaluates each solution by using the following formula [45].(7)fitness(x→)=f(x→)+∑i=1mRk,i×max[0,gi(x→)]2where Rk,iare the specified penalty factors, m is the total number of constraints,f(x→)is the unpenalized objective function and k=1,…,l, where l is the user defined levels of violation. We adapted this method as given by Eq. (8) to WSA, since this methods requires m(2l+1) parameters [46] for m number of constraints, by setting a single penalty factor R instead of Rk,ipenalty factors.(8)fitness(x→)=f(x→)+∑i=1mR×max[0,gi(x→)]2Hadj-Alouane and Bean's adaptive penalty method takes feedback from the search process and evaluates each solution by using the following formula [48].(9)fitness(x→)=f(x→)+λ(t)∑i=1mmax[0,gi(x→)]2λ(t) is required to be update at each iteration via the following partial rule.(10)λ(t+1)=(1/β1)λ(t)ifcase#1β2λ(t)ifcase#2λ(t)otherwisewhere case #1 refers to the situation where the best individual in the last k iterations was always feasible, and case #2 refers to the situation where the best individual in the last k iterations was never feasible. Note that: β1, β2>1, β1>β2 and β1≠β2 (to avoid cycling).As distinct from the static penalty function, a dynamic penalty function refers to a method in which the calculation of the penalty factor is affected by the iteration number directly. In general, penalty function must be defined so as to increase the penalty factor over time with the aim of guiding the search towards the feasible region. The dynamic penalty function adapted to WSA is the one that proposed by Joines and Houck and evaluates the solutions at iteration t by the following formula [49].(11)fitness(x→)=f(x→)+(C×t)α×SVC(β,x→)where C, α and β are used defined parameters (the authors set C=0.5, α=1 or 2 and β=1 or 2) andSVC(β,x→)is defined in the following form.(12)SVC(β,x→)=∑j=1JDjβ(x→)+∑k=1KDk(x→)and(13)Dj(x→)=0ifgj(x→)≤0|gj(x→)|otherwise1≤j≤J(14)Dk(x→)=0,if−∈≤hk(x→)≤∈|hk(x→)|otherwise1≤k≤KThe ITCH approach for handling the constraints while dealing with the constrained optimization problems was developed by Kim et al. and it is not required to be set any problem-dependent parameters such as penalty factors and Lagrange multipliers [24]. This method evaluates each solution via the following equation.(15)fitness(x→)=gˆ(x→)=gmax(x→)ifgmax(x→)>0fˆ(x→)=atan[f(x→)]−π/2otherwisewheregmax(x→)=maxgi(x→)[g1(x→),g2(x→),g3(x→),…,gm(x→)]and atan[·] denotes the inverse tangent. The reader must note thatgˆ(x→)<0for anyx→, and thusfˆ(x→)<gˆ(x→)is guaranteed.Deb's penalty function divides solutions into two group, feasible and infeasible [50]. The objective function value of the feasible solutions are set as their fitness values, while infeasible solutions are evaluated on the basis of constraint violations to guide them towards feasible region. The reader must also note again that this method does not require any penalty factor to be set, and this method evaluates every solution via the following equation.(16)fitness(x→)=f(x→)ifgi(x→)≤0∀i=1,2,…,mfworst+∑i=1mmax[0,gi(x→)]otherwisewhere fworst is the objective function value of the worst feasible solution in the population, and if there are no feasible solutions in the population, then fworst is set to zero.Morales and Quezada's method is another type of static penalty function, since the iteration number has no effect over the penalty factor determined by this method as the search progresses [51]. This method evaluates each solution by using the following equation.(17)fitness(x→)=f(x→)if the solution is feasibleK+∑i=1sKmotherwisewhere s is the number of constraints satisfied, m is the total number of constraints and K is a large constant (it was set to 1×109 by the authors). Additionally, it should be emphasized that, fitness values of the infeasible solutions are not computed and the solutions that violate the same number of constraints receive the same penalty value without considering their distances to feasible region.The WSA algorithm with the aforementioned constraint handling methods was coded in MATLAB 8.4, and then the results were obtained by running the coded WSA algorithm on a personal computer having 3.2GHz processor and 4GB RAM. The parameter values used by WSA algorithm while solving the mechanical design problems are given in Table 1.The values for the parameters of Maxiter and AA were respectively chosen as 5000 and 100 for fairly compare the WSA algorithm to literature about solving the mechanical design problems. By this way the algorithm evaluates 500,000 number of solutions for its one run. The other values for the parameters of λ, φ and were taken from [2] and the values for the parameters of τ and sl0 were chosen experimentally. Finally, the results were obtained after running the WSA algorithm 20 times for each problem and the following sub-sections present the mechanical design problems with their obtained solutions in depth.This subsection is about to analyze the effects of the used constraint handling methods over the WSA algorithm during its search. Within this purpose, a two dimensional design problem, column design for minimum mass, was taken from [52]. The objective of this problem is to design a minimum-mass tubular column that is subjected to an eccentric load as represented in Fig. 5[52]. The design variables of this problem are specified as below.(18)x=(x1,x2)T≔(R,t)Twhere R is the mean radius of the tube and t is the wall thickness. The constrained non-linear mathematical programming formulation of this problem (19)–(24) was given by Arora in literature [52].(19)minf5(x)=2π(5)(7850)x1x2s.t.(20)g51(x)=P2πx1x2σa1+2(0.02)(x1+0.5x2)x1sec2Lx1PE(2πx1x2)−1≤0(21)g52(x)=1−π2E(πx13x2)4L2P≤0(22)g53(x)=0.002x1ΔsecLPE(πx13x2)−1−1≤0(23)g54(x)=x150x2−1≤0(24)D≔x∈ℝ2:(0.01,0.005)T≤x≤(1,0.2)TwhereP=50,000, E=210E9, L=5.0, σa=250E6, Δ=0.25.WSA was initialized for a number of 100 artificial agents with each aforementioned constraint handling method separately and ran for a maximum number of 500 iterations for the design of a column for minimum mass problem (see Fig. 6for 3D representation). After that, the initial artificial agents and the artificial agents after every 100 iteration are observed in order to visualize the effects of the constraint handling methods over the WSA algorithm during its execution. Through this visualization, we will achieve the ability to analyze the effects of the constraint handling methods over the WSA algorithm and to analyze how effect these constraint handling methods the convergence behaviour of WSA towards global optimum. Additionally, we would be produced some concluding remarks about the capability of the WSA algorithm in providing feasible solutions with each one of the aforementioned constraint handling methods.The contour plot of objective function of the design of a column for minimum mass problem was firstly constituted, then the agents of the related iterations were scattered on different contour plots of the objective function of the problem as can be seen through Figs. 7–12. In these figures feasible and infeasible solutions are visualized via the symbols of * and x, respectively.By this way, we have the possibility to visualize the capability of WSA in converging towards the global optima and producing feasible solutions with the related constraint handling method. And, we will establish whether the realized constraint handling method is significantly effective over the performance of WSA algorithm in solving the constrained mechanical design optimization problems or not.From the observation of the Figs. 7–12, it is clearly seen that WSA has a satisfactory level of convergence and we can conclude that WSA has an intensive search capability around the promising regions of the search space independently from the used constraint handling methods. Additionally, it should be noticed that, the capability of producing feasible solutions of WSA algorithm with the used constraint handling methods is satisfactory. Static, adaptive and dynamic penalty functions and Morales and Quezada's method are capable of producing feasible solutions in high proportions within a population during the search of WSA algorithm, while ITCH approach and Deb's method cause the WSA algorithm to produce feasible solutions in a decreasing proportion during the search process, as illustrated in Figs. 7–12.Furthermore, Fig. 13illustrates the variation of the artificial agents of WSA with the related constraint handling method having the best fitness as the search progresses for 5000 functions evaluations. Here we can produce some concluding remarks on WSA and the constraint handling methods: WSA converges to a promising area within the search space with the used constraint handling methods, except adaptive penalty function, as illustrated in Fig. 13. Additionally, WSA has the ability to reach a fitness value of 66.1921 better than the fitness value of 66.1922 reported by Arora for the design of a column for minimum mass problem [52]. The reader can refer to http://web.deu.edu.tr/baykasoglu/wsa_constrained.rar for the MATLAB code of this example problem.As indicated previously, this section is about the performance evaluation of WSA algorithm on the well-known non-linear constrained mechanical design problems, design of a tension/compression coil spring, design of a pressure vessel, design of a welded beam and design of a speed reducer. Additionally, an extra constrained test problem with 13 decision variables is also tackled via WSA in order further demonstrate the effectiveness of WSA. The explanations of these problems and the obtained results via WSA algorithm are given in the following sub-section in details.This first test problem, which was introduced by Belegundu for the first time in literature [3], is about the optimal design of the tension/compression coil spring and an example for compression coil spring is represented in Fig. 14[1,4]. The three design variables (one integer and two continuous) of this problem can be specified as below.(25)x=(x1,x2,x3)T≔(N,D,d)Twhere N is the number of spring coils, D is the winding diameter, and d is the wire diameter. Minimization the weight of the spring subject to minimum deflection, shear stress, surge frequency and limits on the outside diameter is objective of this design problem. The constrained non-linear mathematical programming formulation of this problem (26)–(31) was given by Arora and Kim et al. in literature [4,24].(26)minf1(x)=(x1+2)x2x32s.t.(27)g11(x)≔1−x1x2371785x34≤0(28)g12(x)≔4x22−x2x312,566(x2x33−x34)+15108x32−1≤0(29)g13(x)≔1−140.45x3x1x22≤0(30)g14(x)≔x2+x31.5−1≤0(31)D≔{x∈ℝ3:(2.0,0.25,0.05)T≤x≤(15.0,1.3,2.0)T}The design of a tension/compression coil spring problem was solved via the WSA algorithm by adapting the aforementioned 6 constraint handling methods and the obtained results are reported in Table 2separately. Additionally, Table 3compares the best result obtained by WSA algorithm with the results provided by various researchers in literature [34].From the observation of Table 2, it is obviously seen that WSA algorithm produced the best result for the design of a tension/compression coil spring problem by using Deb's Method as the constraint handling approach. However, WSA has the best performance over the design of a tension/compression coil spring problem via ITCH approach, if a comparison is done in terms of the average objective function value of the 20 runs. If the comparison is extended via the results available in literature, it is clear that WSA algorithm has a satisfactory performance in solving the design of a tension/compression coil spring problem with various constraint handling methods as it can be seen from Table 3. Additionally, the best result produced by WSA algorithm for the design of a tension/compression coil spring problem is differentiated from the best-known results in literature after the seventh digit in the decimal portion.Design of a cylindrical vessel capped at both ends by hemispherical heads as represented in Fig. 15[1,9] is the second test problem and was introduced by Kannan and Kramer for the first time in literature [53]. The objective is to minimize the total cost including the material, forming and welding costs. This problem has four design variables as specified as below.(32)x=(x1,x2,x3,x4)T≔(Ts,Th,R,L)Twhere Ts is the thickness of the shell, Th is the thickness of the head, R is the inner radius and L is the length of the cylindrical section of the vessel (not including the head). The first two design variables Tsand Thare integer multiples of 0.0625, which are the available thicknesses of the rolled steel plates; other two design variables are continuous. The constrained non-linear mathematical programming formulation of this problem (33)–(38) was given by Arora and Kim et al. in literature [4,24].(33)minf2(x)=0.6224x1x3x4+1.7781x2x32+3.1661x12x4+19.84x12x3s.t.(34)g21(x)≔0.0193x3−x1≤0(35)g22(x)≔0.00954x3−x2≤0(36)g23(x)≔1,296,000−πx32x4−43πx33≤0(37)g24(x)≔x4−240≤0(38)D≔x∈ℝ4:(0,0,10,10)T≤x≤(99,99,200,200)TThe second test problem, design of a tension/compression coil spring, was also solved via the WSA algorithm by adapting the aforementioned 6 constraint handling methods and the obtained results are reported in Table 4separately. Furthermore, Table 5compares the best result obtained by WSA algorithm with the results provided by various researchers in literature [34].As pointed out in Table 4, WSA has the best performance in terms of the produced best results over the design of a pressure vessel problem when adapting the dynamic penalty function as the constraint handling approach. The average objective function value for 20 replications of WSA algorithm over the design of a pressure vessel problem, reported in Table 4, also encourages the superior performance of WSA algorithm via the dynamic penalty function. Furthermore, the reported results in Table 5 indisputably indicate the superior performance of WSA algorithm over the available results for the design of a pressure vessel problem in literature. Thus, we can conclude that WSA surpasses the existing literature on tackling the design of a pressure vessel problem, since the WSA algorithm has the ability to produce better results than the previous literature with all of the aforementioned constraint handling methods.The third test problem, design of a welded beam, was introduced by Rao [54] with the aim of minimizing cost design of the structural welded beam as it shown in Fig. 16[1,12,17]. The design purpose is to minimize the structural cost of the beam and the main cost factors (set-up labour cost, welding labour cost and material cost) of such a welded beam under the constraints of weld stress, buckling load, beam deflection and beam bending stress. The problem has four continuous design variables as specified below.(39)x=(x1,x2,x3,x4)T≔(h,l,t,b)Twhere h is the weld thickness, l is the weld length, t is the bar thickness and b is the bar breadth. The constrained non-linear mathematical programming formulation of this problem (40)–(48) was given by Akhtar et al. and Parsopoulos and Vrahatis in literature [12,17].(40)minf3(x)=1.10471x12x2+0.04811x3x4(14+x2)s.t.(41)g31(x)≔τ(x)−τmax≤0(42)g32(x)≔σ(x)−σmax≤0(43)g33(x)≔x1−x4≤0(44)g34(x)≔0.125−x1≤0(45)g35(x)≔δ(x)−δmax≤0(46)g36(x)≔P−Pc(x)≤0(47)g37(x)≔0.10471x12+0.04811x3x4(14+x2)−5≤0(48)D≔x∈ℝ4:(0.1,0.1,0.1,0.1)T≤x≤(2,10,10,2)Twhere(49)τ(x)=(τ′)2+2τ′τ″x22R+(τ″)2(50)τ′=P2x1x2(51)τ″=MRJ(52)M=PL+x22(53)R=x224+x1+x322(54)J=22x1x2x2212+x1+x322(55)σ(x)=6PLx32x4(56)δ(x)=4PL3Ex33x4(57)Pc(x)=4.013Ex32x4636L21−x32LE4GP=6000Ib, L=14in, E=30×106psi, G=12×106psi.τmax=13,600psi, σmax=30,000psi, δmax=0.25in.The obtained results for the design of a welded beam problem via the WSA algorithm by adapting the aforementioned 6 constraint handling methods are reported in Table 6separately. Additionally, comparison between the WSA algorithm's best solution and the results provided by various researchers solved this third test problem with various solution procedures in literature [34] is reported in Table 7.When Table 6 is observed, it is clearly seen that WSA algorithm produced the best result for the design of a welded beam problem by using adaptive penalty function as the constraint handling approach. However, WSA has the best performance over the design of a welded beam problem via ITCH approach, if a comparison is done in terms of the average objective function value of the 20 runs. If the comparison is extended via the results available in literature, it is clear that WSA algorithm has a satisfactory performance in solving the design of a welded beam problem with various constraint handling methods as it can be seen from Table 7. Additionally, the best result produced by WSA algorithm for the design of a tension/compression coil spring problem is differentiated from the best-known results in literature after the sixth digit in the decimal portion. Here, the reader must also be noticed that, the provided best results for design of a welded beam problem are available for six digit in their decimal portion. Hence, we can claim that WSA algorithm is able to produce the best result in literature for the design of a welded beam problem.The fourth test problem, design of a speed reducer, was introduced by Siddall [55] and deals with the minimum weight design of a speed reducer subject to constraints on bending stress of the gear teeth, surface stress, transverse deflections of the shafts and stresses in the shafts as shown in Fig. 17[1,54]. The design of a speed reducer problem has seven design variables (except the third one all of them are continuous) as specified below.(58)x=(x1,x2,x3,x4,x5,x6,x7)T≔(b,m,z,l1,l2,d1,d2)Twhere b is the face width, m is the module of teeth, z is the number of teeth in the pinion, l1 is the length of the first shaft between bearings, l2 is the length of the second shaft between bearings, and d1 and d2 are the diameters of the first shaft and second shaft, respectively. The constrained non-linear mathematical programming formulation of this problem (59)–(71) was given by Golinski [56] and Rao [54] in literature.(59)minf4(x)=0.7854x1x22(3.3333x32+14.9334x3−43.0934)−1.508x1(x62+x72)+7.4777(x63+x73)+0.7854(x4x62+x5x72)s.t.(60)g41(x)≔27x1x22x3−1≤0(61)g42(x)≔397.5x1x22x32−1≤0(62)g43(x)≔1.93x43x2x3x64−1≤0(63)g44(x)≔1.93x53x2x3x74−1≤0(64)g45x≔[(745x4/x2x3)2+16.9×106]1/2110x63−1≤0(65)ag46(x)≔[(745x4/x2x3)2+157.5×106]1/285x73−1≤0(66)g47(x)≔x2x340−1≤0(67)g48(x)≔5x2x1−1≤0(68)g49(x)≔x112x2−1≤0(69)g410(x)≔1.5x6+1.9x4−1≤0(70)g411(x)≔1.1x7+1.9x5−1≤0(71)D≔x∈ℝ7:(2.6,0.7,17,7.3,7.8,2.9,5.0)T≤x≤(3.6,0.8,28,8.3,8.3,3.9,5.5)TThe aforementioned 6 constraint handling methods were also adapted into WSA for solving the design of a speed reducer problem, and the obtained results are reported in Table 8separately. Additionally, the best result obtained via WSA algorithm is compared in Table 9with the results provided by various researchers [34] in literature.Table 8 obviously indicates that WSA algorithm produced the best result for the design of a speed reducer problem by using ITCH approach as the constraint handling approach. Also WSA performs well via ITCH approach over the design of a speed reducer problem in terms of the average objective function value of the 20 runs. When WSA is via the existing literature on tackling this problem, the satisfactory performance of WSA can be clearly seen from Table 9. Additionally, the best result produced by WSA algorithm for the design of a speed reducer problem is differentiated from the best-known results, available for seven digit in their decimal portion, in literature after the seventh digit in the decimal portion.The fifth test problem is also a minimization problem of single objective function and this problem has 13 decisions variables and 9 inequality constraints [57]. This problem is a familiar benchmark used by several researchers [39,58–63] with the aim of testing the performance of their algorithms. The formulation of this problem was given by the equation set (72)–(82) in literature and the problem's global optimum has the value of f(x*)=15 at the point of x*=(1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1).(72)minf5(x)=5∑i=14xi−5∑i=14xi2−∑i=513xis.t.(73)g51(x)≔2x1+2x2+x10+x11−10≤0(74)g52(x)≔2x1+2x3+x10+x12−10≤0(75)g53(x)≔2x2+2x3+x12+x12−10≤0(76)g54(x)≔−8x1+x10≤0(77)g55(x)≔−8x2+x11≤0(78)g56(x)≔−8x3+x12≤0(79)g57(x)≔−2x4−x5+x10≤0(80)g58(x)≔−2x6−x7+x11≤0(81)g59(x)≔−2x8−x9+x12≤0(82)D≔x∈ℝ13:(0,0,0,0,0,0,0,0,0,0,0,0,0)T≤x≤(1,1,1,1,1,1,1,1,1,100,100,100,1)TThis problem was also tackled by WSA algorithm and the obtained results compared with the results produced by the formerly published papers in literature and provided by [39] in Table 10. From the observation of Table 10, we can conclude again that WSA algorithm is an effective search algorithm for constrained global optimization problems. In Table 10, we only reported the best results obtained by WSA with different constraint handling methods, since there was not a significantly difference between them. It must also be stated that the results of WSA, reported in Table 10, were obtained after running WSA 30 times independently with 100 artificial agents for a maximum number of 1000 iterations.A final analyses, a paired t-test, is executed on Excel 2013 in order to understand whether the differences in obtained results of the four test problems with WSA by using the constraint handling methods are due to random chance or not. This test is executed on the average values for 20 independent replications represented in Tables 2, 4, 6 and 8, and the results of the executed paired t-test are presented in Table 10.From the observation of the p-values presented in Table 10, we can conclude that, the used constraint handling methods have not a significant effect over performance of the WSA algorithm. Furthermore, Table 10 obviously indicates that the WSA is a robust approach in solving the constrained mechanical design optimization problems.

@&#CONCLUSIONS@&#
In this paper, we have tested the performance of the WSA algorithm, which is a new swarm based search algorithm and inspired by the superposition and the attracted movement of agents, in solving the well-known constrained mechanical design optimization problems. Since these problems are constrained optimization problems, WSA must cope with the feasibility problem during its search. Within this context, some constraint handling methods were required to adapt into WSA in order to make the algorithm to have the capability of overcoming feasibility problem. For this purpose, we have selected 6 formerly developed constraint handling methods and adapted them into WSA algorithm, then we have analyzed the effects of these methods over the performance of the WSA algorithm. The obtained results indicate how effective the WSA algorithm in solving the constrained mechanical design problems. Additionally, the robustness of the WSA algorithm stood out, since the used constraint handling methods were not significantly effective on the performance of the WSA algorithm in solving the constrained mechanical design problems. Computational results also indicate the effectiveness of the WSA algorithm by solving the constrained mechanical design problems in terms of obtained results, reached level of convergence and the capability of coping with the problems of premature convergence, trapping in a local optima and stagnation.