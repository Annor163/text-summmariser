@&#MAIN-TITLE@&#
Legendre spectral finite elements for Reissner–Mindlin composite plates

@&#HIGHLIGHTS@&#
First static and dynamic study of LSFEs for RM composite plates on unstructured grids.First comparison of RM LSFEs with SHELL281 elements in terms of model size, CPU time.Demonstration that LSFEs can provide orders of magnitude more accuracy than SHELL281.

@&#KEYPHRASES@&#
Composite,Finite element,High order,Numerical methods,Reissner–Mindlin,

@&#ABSTRACT@&#
Legendre spectral finite elements (LSFEs) are examined in their application to Reissner–Mindlin composite plates for static and dynamic deformation on unstructured grids. LSFEs are high-order Lagrangian-interpolant finite elements whose nodes are located at the Gauss–Lobatto–Legendre quadrature points. Nodal quadrature is employed for mass-matrix calculations, which yields diagonal mass matrices. Full quadrature or mixed-reduced quadrature is used for stiffness-matrix calculations. Solution accuracy is examined in terms of model size, computation time, and memory storage for LSFEs and for quadratic serendipity elements calculated in a commercial finite-element code. Linear systems for both model types were solved with the same sparse-system direct solver. At their best, LSFEs provide many orders of magnitude more accuracy than the quadratic elements for a fixed measure (e.g., computation time). At their worst, LSFEs provide the same accuracy as the quadratic elements for a given measure. The LSFEs were insensitive to shear locking and were shown to be more robust in the thin-plate limit than their low-order counterparts.

@&#INTRODUCTION@&#
In this paper we examine the performance of Legendre spectral finite elements (LSFEs) for calculating the static and dynamic response of composite Reissner–Mindlin (RM) plates. RM plate and shell models are commonly used in commercial finite element (FE) codes. Examples include the SHELL181 and SHELL281 elements in ANSYS®[1] and the S4R element in Abaqus®[2]. LSFEs are pth-order Lagrangian-interpolant FEs whose nodes are located at thep+1Gauss–Lobatto–Legendre (GLL) points. LSFEs can provide exponential (i.e., spectral) convergence rates through p-refinement while maintaining the geometric-modeling capabilities of low-order FE methods. The motivation for using LSFEs over low-order FEs can be stated from two perspectives. For a given computational effort (either in terms of model size or computing time), LSFEs can provide dramatically more accurate solutions than low-order elements. Alternatively, if one requires a certain accuracy level, LSFEs can require dramatically less computational effort.Spectral finite elements were first introduced by Patera [3] for computational fluid dynamics, where the nodes of the Lagrangian-interpolant basis functions were located at the Gauss–Lobatto–Chebyshev (GLC) points. Ronquist and Patera [4] introduced LSFEs with nodes located at the GLL points for fluid dynamics. Since their inception, LSFEs have seen continued development and application in many disciplines (e.g., fluids, acoustics, geophysics). However, their application to structural dynamics has been comparatively limited (see, e.g., Brito and Sprague [5] for more discussion).LSFEs were first applied to isotropic RM plates by Zrahia and Bar-Yoseph [6], where all FE inner products were evaluated with GLL nodal quadrature. While nodal quadrature is a reduced quadrature scheme for RM-plate mass and stiffness matrices, it is appealing because it is sufficiently accurate to maintain the order of convergence of the method [7], it provides consistent diagonal mass matrices [8], and GLL quadrature requires less computational effort than Gauss–Legendre quadrature for evaluation of stiffness-matrix inner products. Zrahia and Bar-Yoseph [6] showed, on a rectangle-domain mesh composed of a single square element, exponential convergence rates for static-deformation and natural-frequency problems. They also found, for their test case, that the LSFEs were shear-locking free. Kudela et al. [9] applied LSFEs in space and time to wave propagation in RM composite plates, where square elements were used along with nodal quadrature. Moleiro et al. [10,11] applied LSFEs in a least-squares formulation for RM plates where static deformation and natural frequencies were calculated on a structured grid for a rectangular plate. Unlike Zrahia and Bar-Yoseph [6], who employed nodal quadrature, Moleiro et al. [10,11] employed full Gauss–Legendre quadrature for mass and stiffness inner products. Again, solutions were found to be insensitive to shear locking. Liu et al. [12] examined Mindlin spectral elements for isotropic plates where the nodes were located at the Chebyshev–Gauss–Lobatto points, and both nodal and Guass-Legendre quadrature were examined for stiffness matrix calculations but only nodal quadrature was used for mass matrices, which were in turn diagonal. As with Zrahia and Bar-Yoseph, shear-locking studies were limited to square elements, and both quadrature schemes produced solutions insensitive to shear locking. The elements described by Liu et al. [12] were used by Hu et al. [13] to characterize damage size in metallic plates.Brito and Sprague [5] examined LSFEs applied to the static and dynamic response of isotropic RM plates on an unstructured grid for a circular plate. They demonstrated that LSFEs on an unstructured grid, and whose inner products were calculated with nodal quadrature, were prone to shear locking in the limit of vanishing plate thickness. This was attributed to the non-constant Jacobian of the element mapping. Brito and Sprague [5] introduced a mixed reduced quadrature scheme for which the shear-stiffness inner products were evaluated with reduced Gauss–Legendre quadrature, and bending-stiffness inner products were evaluated with nodal quadrature. This mixed scheme was shown to be locking free and maintained the desired exponential convergence rates. Also examined was the computational cost of LSFEs compared to standard first- and second-order elements for static- and dynamic-deformation problems. LSFEs offered dramatic savings over low-order elements. For the static problems, linear systems were solved with a Jacobi-preconditioned conjugate gradient solver, and for which LSFE matrix–vector products were evaluated in a tensor-product-factorized form. For the dynamic problems, central finite differences were employed.In this paper, we compare LSFEs against the serendipity-type quadratic SHELL281 elements in the commercial code ANSYS for a composite Reissner–Mindlin plate discretized with an unstructured grid. For static deformation, accuracy is examined in terms of model size (number of nodes), required memory storage, and computation wall-clock time for solution of linear systems where the LSFE and SHELL281 systems were solved with the same sparse-system direct solver. For dynamic deformation, the LSFE and SHELL281 models were discretized with a standard implicit trapezoidal rule, and accuracy is compared in terms of model size and computation time.The Reissner–Mindlin plate LSFEs are formulated with a Bubnov–Galerkin approach. The formulation, where trial and weight functions are the same Lagrangian-interpolant functions, is well established (see, e.g., Hughes [14]). We provide here a brief overview. The fundamental assumptions grounding Reissner–Mindlin plate deformation are that (i) in-plane displacements vary linearly through the plate thickness, (ii) stress in the normal direction is negligible, and (iii) transverse displacement is constant through the thickness.We are interested in calculating the static and dynamic responses of a plate with constant thickness h, whose midplane spans a domain Ω in the (x, y) plane. For our analyses, external forcing is restricted to a transverse distributed forcef(x,y)and boundary conditions are assumed to be clamped unless otherwise noted. The formulation is readily extended to accommodate more general forcing and/or boundary conditions. The generalized displacement vector of the plate midplane is denotedU=[uvwθyθx]T, whereu(x,y),v(x,y), andw(x,y)are the midplane displacements in the x, y, and z directions, respectively.θy(x,y)andθx(x,y)are the plate rotations about the y and x axes, respectively.In our finite-element discretization, Ω is represented as nelnon-overlapping quadrilateral elements with straight or curved edges, each with domain Ωe, such that(1)Ω≈Ωh=⋃e=1nelΩe.The element domain is given byx∈Ωe, where(2)x=∑i^=1(p+1)2xi^Φi^,wherexi^=[xi^yi^]Tis the location of nodei^, andΦi^(x,y)is thei^thLagrangian interpolant based on a tensor product of two one-dimensional pth-order-polynomial Lagrangian interpolants,i^∈{1,…,(p+1)2}. As described in Appendix A, the subscript index with a “hat” denotes a lexicographical numbering. In a LSFE formulation, nodes are located at the(p+1)×(p+1)GLL quadrature points (in element natural coordinates). This node positioning provides optimal polynomial interpolation (with respect to the L2 norm) [15] and is the fundamental difference between LSFEs and traditional high-order FEs that have nodes evenly spaced throughout the element domain. For the dependent variables, we employ an isoparametric formulation and the generalized-displacement approximationUh≈Uis represented (over element domain Ωe) as(3)Uh=∑i^=1(p+1)2Ui^Φi^,whereUi^=[ui^evi^ewi^eθi^y,eθi^x,e]Tis the generalized displacement at nodei^.The element-level semi-discrete equations governing motion may be written as(4)MU¨h+KUh=F,where an overdot denotes a time derivative,Mis the mass matrix,Kis the stiffness matrix, andFis the force vector. For the stiffness-matrix inner products, unless noted otherwise, the mixed-reduced quadrature introduced in Brito and Sprague [5] was employed, where bending- and extensional-stiffness terms were evaluated with(p+1)×(p+1)nodal quadrature and shear-stiffness terms were evaluated withp×pGauss–Legendre quadrature. Mass-matrix inner products were evaluated with nodal quadrature, which resulted in diagonal mass matrices. For comparison studies with low-order elements, stiffness matrices were stored in a compressed-storage-column (CSC) format and only the diagonals of LSFE mass matrices were stored.One of our numerical studies compares, for static-deformation LSFE systems, the computational cost of sparse-system solution with a preconditioned conjugate-gradient iterative solver. For iterative linear-system solution, the primary computational cost resides in the evaluation of matrix–vector products. Matrix–vector products can be efficiently evaluated in two ways. In the first approach, the sparse global stiffness matrix is calculated and stored and a sparse matrix–vector-product algorithm can be applied. The LSFE element-stiffness matrix is, in general, full and is5(p+1)2×5(p+1)2. Hence, the global matrix–vector product requiresO(p4)operations andO(p4)storage per element. The second approach is “matrix free”, where the matrix–vector product is calculated over each element incorporating quadrature and stiffness matrices are never explicitly calculated. In a naive implementation, this requiresO(p6)operations and negligible storage [5]. However, the tensor-product form can be effectively factorized [16] reducing the matrix–vector calculation cost toO(p3)operations withO(p2)storage per element [5]. Details regarding the LSFE matrices and their matrix–vector tensor-product factorization are included in Appendix B.We are interested in comparing the performance of LSFEs for composite RM plates with that of state-of-the-art low-order elements for static and dynamic linear deformations. To that end we compare against the SHELL281 quadrilateral elements of the commercial FE package ANSYS. SHELL281 elements are serendipity type with eight nodes, and are based on the formulation of Bathe and Dvorkin [17,1]. The elements have six degrees-of-freedom at each node (including a drilling degree-of-freedom).2×2quadrature is employed in-plane and three quadrature points per layer are employed through the thickness. The material shear stiffness is calculated through an ANSYS-proprietary approach. In order to ensure that the SHELL281-element model was solving the same governing RM equations as the LSFE model, two modifications were required. First, the drilling degrees of freedom were eliminated and the drilling stiffness was set to zero. Second, the material shear stiffness was calculated directly from the standard RM equations with a shear correction factor of 5/6 (see, e.g., [18], also described in Appendix A). For dynamic simulations, SHELL281 mass matrices were both calculated in consistent and lumped configurations. The global stiffness and mass matrices were exported from ANSYS in Harwell–Boeing (HB) sparse-matrix format [19], which is the CSC format plus additional file-header meta data. Force vectors were also exported from ANSYS.Dynamic analyses were performed with a standard trapezoidal-rule implicit algorithm (see, e.g., Cook et al.[20]).Linear systems that arose for the static and dynamic FE equations, for both LSFE and ANSYS SHELL281 models, were solved with packages from the HSL Mathematical Software Library [21] coupled with the METIS graph-partitioning libraries. In particular, sparse-system direct solves were accomplished with the HSL_MA97 package, which is based on a multi-frontal method and sparse Cholesky factorization. Indirect sparse-linear-system solves were accomplished with the MI28 package, which is a conjugate-gradient (CG) solver with preconditioning.LSFE mass and stiffness matrices were calculated with an in-house Fortran 90 code. SHELL281-element mass and stiffness matrices were calculated with ANSYS version 15.0. As described above, LSFE mass matrices were diagonal, whereas SHELL281 mass matrices calculated in either lumped or consistent configurations. For static and dynamic simulation, a Fortran 90 code was created for each that imported mass and stiffness matrices stored in CSC format. This enabled simulations with mass and stiffness matrices created from either the LSFEs or the ANSYS SHELL281 elements. As described above, these codes were equipped with the HSL_MA97 sparse linear-system solver. Having the same code and the same linear-system solvers enabled “apples-to-apples” comparisons between the underlying formulations. A separate Fortran code was used to examine LSFE-model computation time with the HSL MI28 conjugate-gradient solver with default tolerance settings.For our computational-simulation timing tests, the codes were compiled with the Intel® Fortran compiler version 13.1.3 with optimization enabled. Simulations were run in serial on a single computational core CPU (core Intel Xeon CPU, E5-2670) free of other application burdens. For a static simulation, the total computation time was calculated as the elapsed wall-clock time required for matrix factorization (in direct solves) and linear-system solution. For a dynamic simulation, total computation time was calculated as that required for matrix factorization and all subsequent solves at each time step. Total computation time in each configuration was taken as the average of at least five simulations.We consider composite plates composed of layers of orthotropic material with properties(5)E2=E1/25,(6)G23=0.2E2,G13=G12=0.5E2,(7)ν12=0.25,ν21=ν12E2E1,where Eiis the Young׳s modulus in theithdirection (1 being the fiber direction), Gijis the shear modulus in the i–j plane, and νijis the Poisson׳s ratio for transverse strain in j direction when stressed in the i direction [22]. In our comparison studies, we examine two-layered plates with a0°/90°material layup, where the angles are the lamination angles indicating the fiber orientation (in the (x, y) plane) with respect to the positive x axis.The majority of our numerical studies are for a circular plate with thickness h, radius R, midplane domain Ω, midplane boundary∂Ω, and clamped boundary conditions:(8)u=v=w=θy=θx=0,on∂Ω.For verification of our code, we examine below solutions for a square plate with side length a and with boundary conditions described below. We also examine a square plate with clamped-edges and four circular holes of radius Rhsymmetrically located in the four quadrants of the square domain.For all simulations full plates were discretized. Fig. 1(a) shows the upper right quadrant of our 12-element base LSFE mesh for the circular plate with p=2 refinement. LSFE refinement is accomplished by increasing p on the base mesh. Fig. 1(b) shows a refined LSFE mesh with p=6. As described above, the LSFE nodes are located at the(p+1)×(p+1)GLL points, which has nodes clustered near element boundaries as shown in Fig. 1(b). The base SHELL281-element mesh was identical to the base LSFE mesh (but without the element-center nodes). Refinement of the SHELL281-element model was accomplished by dividing the base-mesh into additional elements. Fig. 2shows the upper right quadrant of our 32-element base LSFE mesh for the perforated square plate with p=2 refinement anda/Rh=5. Refinement of the perforated-square-plate mesh was accomplished in the same manner as for the circle-plate mesh for both LSFE and SHELL281-element models.

@&#CONCLUSIONS@&#
