@&#MAIN-TITLE@&#
Fast local image inpainting based on the Allen–Cahn model

@&#HIGHLIGHTS@&#
We present a fast and efficient algorithm for image inpainting.The proposed model is based on the local Allen–Cahn equation.The proposed scheme is unconditionally stable with respect to time step size.

@&#KEYPHRASES@&#
Image inpainting,Energy minimization,Allen–Cahn equation,Operator splitting,Unconditionally stable scheme,

@&#ABSTRACT@&#
In this paper, we propose a fast local image inpainting algorithm based on the Allen–Cahn model. The proposed algorithm is applied only on the inpainting domain and has two features. The first feature is that the pixel values in the inpainting domain are obtained by curvature-driven diffusions and utilizing the image information from the outside of the inpainting region. The second feature is that the pixel values outside of the inpainting region are the same as those in the original input image since we do not compute the outside of the inpainting region. Thus the proposed method is computationally efficient. We split the governing equation into one linear equation and one nonlinear equation by using an operator splitting technique. The linear equation is discretized by using a fully implicit scheme and the nonlinear equation is solved analytically. We prove the unconditional stability of the proposed scheme. To demonstrate the robustness and accuracy of the proposed method, various numerical results on real and synthetic images are presented.

@&#INTRODUCTION@&#
Image inpainting is the process of filling in missing or damaged parts of images based on information from surrounding areas [1]. Up to now, a large number of algorithms have been proposed to solve the image inpainting problem. For the recent survey of the theoretical foundations, the different categories of methods, and illustrations of the main applications about the image inpainting, see the review paper [2] and references therein. Qin et al. [3] proposed an efficient image inpainting approach, which progressively propagates neighboring information into damaged region and can restore sharp edge successfully. In [4], the authors proposed a compact and fast PDE-based inpainting method using anisotropic heat transfer model, which can propagate both the structure and texture information from surrounding region into damaged region simultaneously. Liu and Caselles [5] presented a novel formulation of exemplar-based inpainting [6–8] as a global energy optimization problem, written in terms of the offset map. They also proposed a multiscale graph cuts algorithm to efficiently solve the energy minimization problem. Recently, Ramamurthy et al. [9] regularized the sparse models with manifold projection for image inpainting and Turek et al. [10] used the signal generation model for image inpainting.Many inpainting algorithms are based on partial differential equations, in which the missing region is filled by diffusing the image information from the known region into the missing region at the pixel level [11–13]. Among them, one of widely applied methods is proposed by Chan and Shen [12]. They proposed a variational framework based on total variation to recover the missing information, which minimizes the following energy functional:(1)ETV(c)=∫Ω|∇c|dx+∫Ωλ(x)2(f(x)−c)2dx,wherex=(x,y),f(x)is a given image, and c is the gray scale image in a domainΩ⊂R2.ΩD⊂Ωis the inpainting domain,∂ΩDis the boundary of inpainting domain, andΩ\ΩDis the complement ofΩDin Ω (see Fig. 1). The fidelity termλ(x)(f(x)−c)2was used to keep the solutions close to the given image inΩ\ΩD. For this purpose,λ(x)=0ifx∈ΩD; otherwiseλ(x)=λ0.The steepest descent equation for the energy functional (1) is given by(2)∂c∂t=∇⋅(∇c|∇c|)+λ(x)(f(x)−c).Hence,(3)∂c∂t={∇⋅(∇c|∇c|)ifx∈ΩD,∇⋅(∇c|∇c|)+λ0(f(x)−c)ifx∈Ω\ΩD.As can be observed, the pixel values in the solution are the same as the values inΩ\ΩD, i.e.,c≈f(x). And in the inpainting domain, the pixel values are obtained by curvature-driven diffusions. In [14], Chan and Shen proposed a new inpainting model based on the curvature-driven diffusions to realize the connectivity principle.(4)∂c∂t=∇⋅(G(x,|κ|)∇c|∇c|)+λ(f(x)−c).Here,(5)G(x,|κ|)={|κ|pifx∈ΩD,1ifx∈Ω\ΩD,wherep≥1and κ is the curvature, which is given by∇⋅(∇c/|∇c|). In [13], Esedoḡlu and Shen introduced the Mumford–Shah–Euler model, which is based on the Mumford–Shah image segmentation model [15], to solve the image inpainting problems. Ballester et al. [16] adapted a joint interpolation of vector fields and gray-levels to incorporate the principle of continuity in a variational framework. Li et al. [17] proposed a fast scheme to solve the Chan and Shen's inpainting model [12] with an operator splitting method. Another well-known method was introduced by Bertozzi et al. [18,19], where they proposed an inpainting model which is the modified Cahn–Hilliard (CH) equation(6)EB(c)=EB1(c)+EB2(c)=∫Ω(F(c)ϵ2+|∇c|22)dx+∫Ωλ2(f(x)−c)2dx,whereF(c)=0.25c2(1−c)2is the Helmholtz free energy density (see Fig. 2). The termF(c)is a force that makes c to be approximately 0 or 1.|∇c|2is a gradient energy, ϵ is the gradient energy coefficient related to the interfacial energy.By a superposition of gradient descent with respect toH−1inner product for the energyEB1and gradient descent with respect toL2inner product for the energyEB2, the authors in [18,19] proposed the following model:(7)∂c∂t=Δ(F′(c)ϵ2−Δc)+λ(f(x)−c).We note that ifλ=0in Eq. (7), then the equation becomes the classical CH equation [20], which has been used as a mathematical model to investigate the phase separation of binary mixture under quenching below a critical temperature. For physical, mathematical, and numerical derivations of the CH equation, see the recent review paper [21].In this paper, we propose a new effective and accurate image inpainting method which is based on the local Allen–Cahn equation [22]. The equation has been used in solving problems in image processing [23–27]. By using the Allen–Cahn equation, we can perform fast image inpaintings, because its fast and accurate hybrid numerical solver is available [28]. It should be pointed that our model is the extension of Chan and Shen's model [12], since Allen–Cahn equation describes the motion of mean curvature flow. Compared to Cahn–Hilliard equation [18,19], we choose to use the Allen–Cahn equation, since its numerical treatment is simpler than that of the Cahn–Hilliard type, which involves fourth-order differential operators. The outline of this paper is the following. In Section 2, the governing equations for the image inpainting are presented. In Section 3, we describe the proposed operator splitting algorithm and give a detailed proof for its unconditional stability. In Section 4, we present computational examples to demonstrate the efficiency and robustness of our proposed method. Finally, conclusions are drawn in Section 5.The inpainting algorithms can be summarized as: First, the missing region is filled by diffusing the image information from the known region into the missing region at the pixel level. Second, the image information in the known region should be close to the given image. To reduce the computational cost and keep the accuracy of the inpainting algorithm, we propose the following equations:(8)∂c∂t(x,t)={−F′(c(x,t))/ϵ2+Δc(x,t)ifx∈ΩD,0otherwise.(9)c(x,0)={0.5ifx∈ΩD,f(x)−fminfmax−fminotherwise.(10)n⋅∇c(x,t)=0,x∈∂Ω,wherefmaxandfminare the maximum and the minimum values of the given image, respectively, and n is the unit normal vector to ∂Ω. Thus, we have the normalized image datac(x,0)∈[0,1]. Eq. (8) is also called as the Allen–Cahn equation [22], which is widely applied in image processing due to the motion by mean curvature. We choose the AC equation because it has intrinsic smoothing effect on interfacial transition layers and its fast and accurate hybrid numerical solver is available [28].For the initial condition, we can choose different initial guesses for the inpainting domainΩDbecause the solution of missing regions will be defined by the information of the known region at the equilibrium solution. In this work, to reduce the numerical iterations, we setc(x,0)=0.5in the inpainting domain.In this section, we propose an operator splitting method to get an unconditionally stable numerical method for solving the proposed algorithm. Let the computational domain Ω be[1,Nx]×[1,Ny], h be the uniform grid size, andΩh={(xi,yj)|xi=(i−0.5)h,yj=(j−0.5)h,1≤i≤Nx,1≤j≤Ny}. Letcijnbe approximations ofc(xi,yj,nΔt), whereΔt=T/Ntis the time step, T is the final time, andNtis the total number of time steps. Here, the superscript n denotes an evaluation at time level n. We split the original problem (8) into a sequence of simpler problems as(11)ct=Δc,(12)ct=−F′(c)ϵ2.As the first step, we solve Eq. (11) by applying the fully implicit method with an initial conditioncn, that is,(13)cijn+12−cijnΔt=Δdcijn+12,whereΔdis the 9-point discrete Laplacian operator, i.e.,Δdcijn+12=ci+1,j+1n+12+ci+1,j−1n+12+ci−1,j+1n+12+ci−1,j−1n+126h2+2(ci,j−1n+12+ci,j+1n+12+ci+1,jn+12+ci−1,jn+12)−10cijn+123h2.The resulting implicit discrete Eq. (13) can be solved by the Gauss–Seidel method. Next, Eq. (12) is solved by the method of separation of variables [28–31] as(14)cn+1=12+cn+12−0.5e−Δt2ϵ2+(2cn+12−1)2(1−e−Δt2ϵ2).For more details, we refer to [28] and note that in the previous numerical solution of Eq. (11), the authors used the Crank–Nicolson scheme, which is prone to oscillations when a large time step is used. However, in this paper, we do not have oscillations because we use the fully implicit scheme.To solve Eqs. (11) and (12) inΩD, we introduce a control function g, which is defined as(15)gij={1if(xi,yj)∈ΩD,0otherwise.The schematic diagram is shown in Fig. 3.cn+1is updated fromcnby solving Eqs. (13) and (14) only whengij=1. We note that the closest neighboring exterior cells to the boundary ofΩDplay a role as the Dirichlet boundary condition. Therefore,cijncan have values between zero and one depending on the neighboring image values.In summary, our discrete solution algorithm is described as following:Step 1. Find the inpainting domainΩDusing various methods: for example, either by inspection or by image segmentation methods [29,32].Step 2. Define the control function g and initializec0asgij={1if(xi,yj)∈ΩD,0otherwise.andcij0={0.5if(xi,yj)∈ΩD,fij−fminfmax−fminotherwise.Step 3. Updatecn+1fromcnby solving Eqs. (13) and (14).An efficient preconditioned conjugate gradient (PCG) scheme is used to solve imaging problems [33].Our proposed hybrid splitting method, Eqs. (13) and (14), is an unconditionally stable scheme. To confirm the unconditional stability of Eq. (13), we apply the von Neumann analysis. Letcijnandcijn+1/2be decomposed into Fourier series ascijn=∑α=−NxNx∑β=−NyNyγαβnek(αi+βj)πhandcijn+1/2=∑α=−NxNx∑β=−NyNyγαβn+1ek(αi+βj)πh,respectively. Here, we denote n on γ as a power and k as the imaginary unit, i.e.,k=−1. Letc˜ijn=γnek(αi+βj)πhandc˜ijn+1/2=γn+1ek(αi+βj)πhdenote one summand of the series, respectively, where we drop the summand index inγnandγn+1. These formulas are now substituted into Eq. (13) and we obtainγ=3h23h2+2Δt(sin2⁡(α+β)πh2+sin2⁡(α−β)πh2+4sin2⁡απh2+4sin2⁡βπh2).We can see that the above γ satisfies the property|γ|≤1for any α and β. Hence, the numerical scheme Eq. (13) is unconditionally stable. Furthermore, the inequalityinf⁡(cn)≤cn+12≤sup⁡(cn)is satisfied by the discrete minimum and maximum principles for the heat equation [34]. Thus from Eq. (13), we get0≤cn+12≤1and this result induces0≤cn+1≤1from Eq. (14). Therefore our proposed scheme, Eqs. (13) and (14), is unconditionally stable for any time step.In this section, we present numerical results which are obtained by using the proposed numerical algorithm on various synthetic and real images. Unless otherwise specified, we use uniform grid sizeh=1and time stepΔt=2. The ϵ value is given asϵm=hm/[42tanh−1⁡(0.9)][35], where hm is approximately the transition length of c from 0.05 to 0.95. We also will present the CPU times in seconds of our calculations which are performed inC++on a 3 GHz with 3 G RAM.We stop the numerical computations when the difference between the(n+1)th and nth time step energies becomes less than a given tolerance, tol. In this paper, we settol=0.1. The termination criterion algorithm is listed as follows:Set a maximum iteration number N, a tolerance tol, andk=1.While(k≤N)do Steps 1–2Step 1 Computeϕn+1fromϕnby solving Eqs. (13) and (14).Step 2 If|EB1(ϕn+1)−EB1(ϕn)|<tol, then stop the calculation.Elsek=k+1.We start with an example which illustrates the basic mechanism of the algorithm, Eqs. (8)–(10). Let us consider a synthetic image as shown in Fig. 4(a) on the computational domainΩ=[1,128]×[1,128]. Here, white regions are close to 1 and black regions are close to 0. Gray region is an inpainting domain and is close to 0.5. Interfacial energy coefficientϵ3is used. The top and bottom rows in Fig. 4 show the evolution of the gray region and mesh plots of the numerical solutions, respectively. The evolution times are shown below each figure. The inpainting region evolves according to neighboring values, i.e., either 0 or 1.We perform a parameter ϵ sensitivity analysis for the model. The role of ϵ is interface thickness of a transition layer of the separated region which represents two different states. We take the same initial condition except for different interface parameter valuesϵ1,ϵ3, andϵ6. From the results shown in Fig. 5, we can observe that when ϵ is too small, interfacial transition is too sharp. On the other hand, if ϵ is too large, the inpainting result is blurry in appearance.To show the relation of the parameter ϵ and the time step Δt, we perform the same test as the above with different time steps,Δt=0.1ϵ2,2ϵ2, and10ϵ2. Here,ϵ=ϵ3is used. From Fig. 6, we can see that when the time step is larger, the interfacial transition is getting sharper. Therefore, too large time step is not good for getting smooth results.Fig. 7shows the evolution of inpainting an image with respect to three different initial conditions onΩ=[1,128]×[1,128]. Here,ϵ3is employed. As shown in Fig. 7(a), we setc(x,y,0)=1for(x,y)∈ΩD. Even thoughF(c)=0and|∇c|2/2=0for(x,y)∈ΩD, our method also works well because ofn⋅∇c≠0on∂ΩD. The inpainting result is obtained after 340 iterations. Another initial condition is with random perturbations onΩD, i.e.,c(x,y,0)=rand(x,y), whererand(x,y)is a random number between 0 and 1. The numerical solutions obtained from 200 iterations are shown in Fig. 7(b). In the last test, we consider our proposed initialization algorithm, i.e.,c(x,y,0)=0.5. It takes only 11 iterations to solve the image inpainting problem. Note that, with the three different initial conditions, image inpaintings are successfully done as shown in the last column of Fig. 7.In this section, we show our proposed method can inpaint various synthetic images such as double stripes, crosses, and disks. In this simulation,ϵ4is used. The initial configurations are shown in the first two columns of Fig. 8. The gray region in the initial configuration denotes the inpainting region. The inpainted results are shown in the last two columns. As shown in Fig. 8, our proposed method works well. Note that Bertozzi et al. [18] have taken similar numerical tests for double stripes and crosses by using the Cahn–Hilliard equation with an adaptive ϵ. The comparisons with the results in [18] for iterations and CPU time are listed in Table 1. From the results, we can see that our proposed method is more efficient than theirs.Figs. 9(a), (b), (c), (d), and (e) show an initial image, the inpainting domain, and the recovered images by using the Chan and Shen's method [12], the Li et al.'s method [17], and the proposed method, respectively. Interface parameterϵ15and time stepΔt=5are used. It took only 4 iterations, which is much faster than Li et al.'s method with 200 iterations and Chan and Shen's method with 5000 iterations for inpainting with Fig. 9(a).Also, we conduct the inpainting of a zebra and a QR code images, which are considered by Bosch et al. [1]. In Ref. [1], the authors developed a fast solver using the Moreau–Yosida regularization technique for the Cahn–Hilliard inpainting. The results by Bosch et al. [1] are presented in second column of Fig. 10. And we represent the our results in third column for comparison. As shown in Fig. 10, we obtain more clear recovered images of a zebra and QR code with only 8 and 10 iterations than Bosch et al. [1], respectively. These facts imply that our numerical method is also performed well in gray valued inpainting images.Figs. 11(a) and (b) show two removal of texts. Here,ϵ15andΔt=5are used. As shown in Fig. 11, image inpaintings are successfully done. We refer to [36] for an automatic image inpainting algorithm based on a fuzzy C-mean (FCM).In this section, we perform an image inpainting in three-dimensional space with our numerical method. It should be noted that in order to use more information from the original image, we use the 27-point discrete Laplacian operator in three-dimensional space [37], i.e.,Δdcijk=[14(ci+1,j,k+ci−1,j,k+ci,j+1,k+ci,j−1,k+ci,j,k+1+ci,j,k−1)+3(ci+1,j+1,k+ci+1,j−1,k+ci+1,j,k+1+ci+1,j,k−1+ci−1,j+1,k+ci−1,j−1,k+ci−1,j,k+1+ci−1,j,k−1+ci,j+1,k+1+ci,j−1,k−1+ci,j+1,k−1+ci,j−1,k+1)+ci−1,j+1,k+1+ci−1,j−1,k−1+ci−1,j+1,k−1+ci−1,j−1,k+1+ci+1,j+1,k+1+ci+1,j−1,k−1+ci+1,j+1,k−1+ci+1,j−1,k+1−128cijk]/(30h2).Figs. 12(a) and (b) show two 3D examples. From left to right, they are original, damaged, and recovered surfaces, respectively. Here,ϵ4andΔt=2are used. As can be seen, our proposed method performs well for inpainting in three-dimensional space.Now, we show the performance of all test problems which were done in previous sections. Table 2shows the image size (N), the inpainting domain size (Nis), the number of iterations, and the CPU time in each test. The result indicates that our proposed method is robust and efficient. It should be noted that since our proposed model is defined in the inpainting domain, the computational cost is notO(Nlog⁡N)butO(Nislog⁡Nis). To demonstrate it, in Fig. 13, we plot the average CPU time (total CPU time over total iterations) andO(Nislog⁡Nis), which are summarized in Table 2. Here, the linear fitting is done using the MATLAB function “polyfit”. We define the error as the difference between the average CPU time and the linear fit result. In this test, thel2error is 0.89%. Therefore the results suggest that the convergence rate of the computational cost is linear with respect toNislog⁡Nis. To show the effect and accuracy of our proposed method, we will compute PSNR (Peak Signal to Noise Ratio) [38–41], which is commonly used to measure the quality of reconstruction of image inpainting. Here, PSNR is defined asPSNR=−10log10⁡(1NxNy∑i=1Nx∑j=1Ny[cijn−(fij−fmin)/(fmax−fmin)]2).Since the pixel values in the inpainting domain are obtained by curvature-driven diffusions and the pixel values outside the inpainting region are the same as those in the original input image, we can expect the higher PSNR obtained by our proposed method.In this section, we test a disconnected stripe image with large inpainting region as the benchmark example [42]. First, we recover the example (see Fig. 14(a)) by using the modified Cahn–Hilliard equation. For this test, we useλ=1,Δt=1, andh=1. Numerical results withϵ=10and 100 are shown in Figs. 14(b) and (c), respectively.From these results, we know that the inpainting problem with large gap is difficult to recover with the modified CH equation. In order to resolve this problem which is arising in Cahn–Hilliard model, authors in [18,19,42] proposed the two-step method. This method is first performed with a large ϵ, then used with small ϵ to regulate the diffuse-interface motion. For more details about the two-step method, see the reference [18,19,42].Also, we conduct the test with new method proposed in this paper. In this test, we useΔt=0.01andh=1. And we do test with three different values of ϵ. Figs. 14(d)–(f) show the numerical results withϵ=0.01,0.1, and 1 at steady states, respectively. Here, we define the steady state as‖EB1(ϕn+1)−EB1(ϕn)‖<10−5. When we useϵ=0.1, we get the good numerical result as the one in [42].

@&#CONCLUSIONS@&#
