@&#MAIN-TITLE@&#
A comprehensive model of development on the balance-scale task

@&#HIGHLIGHTS@&#
We present a new model of children’s performance on the balance-scale task.Constructive neural networks implement an intuitive and a torque-rule module.A selection module decides whether to use the intuitive or torque-rule solution.The model covers all 4 stages seen in children, ending with a genuine torque rule.The model also covers perceptual effects, response times, and overlapping waves.

@&#KEYPHRASES@&#
Cognitive development,Balance scale,Constructive neural networks,Knowledge-based learning,KBCC,SDCC,

@&#ABSTRACT@&#
We present a new model of children’s performance on the balance-scale task, one of the most common benchmarks for computational modeling of psychological development. The model is based on intuitive and torque-rule modules, each implemented as a constructive neural network. While the intuitive module recruits non-linear sigmoid units as it learns to solve the task, the second module can additionally recruit a neurally-implemented torque rule, mimicking the explicit teaching of torque in secondary-school science classrooms. A third, selection module decides whether the intuitive module is likely to yield a correct response or whether the torque-rule module should be invoked on a given balance-scale problem. The model progresses through all four stages seen in children, ending with a genuine torque rule that can solve untrained problems that are only solvable by comparing torques. The model also simulates the torque-difference effect and the pattern of human response times, faster on simple problems than on conflict problems. The torque rule is more likely to be invoked on conflict problems than on simple problems and its emergence requires both explicit teaching and practice. Overlapping waves of rule-based stages are also covered by the model. Appendices report evidence that constructive neural networks can also acquire a genuine torque rule from examples alone and show that Latent Class Analysis often finds small, unreliable rule classes in both children and computational models. Consequently, caution in using Latent Class Analysis for rule diagnosis is suggested to avoid emphasis on rule classes that cannot be replicated.

@&#INTRODUCTION@&#
Ongoing debates between symbolic and neural-network models of cognition have often focused on development of children’s performance on balance-scale problems, one of the most simulated tasks in developmental psychology. The symbolic view is that knowledge is represented in propositional rules referring to aspects of the world, that processing occurs as rules are selected and fired, and that knowledge is acquired by learning such rules. In neural-network accounts, active knowledge is represented in rapidly changing neuronal-unit activations and long-term knowledge by excitatory and inhibitory synaptic connections between units, processing involves activation passing from one layer of units to another, and knowledge acquisition results from adjustment of connection weights and perhaps recruitment of new units into the network. The symbolic approach has been referred to as rule use, and the neural-network approach as rule following (Shultz & Takane, 2007).Although this may seem to be a subtle distinction, there are important differences between the two viewpoints that have consistently guided research over the last few decades. The rule-use approach assumes that people have and use rules to guide their reasoning and behavior, affording the perfect generalization that symbolic rules may allow. Rule-use is consistent with the idea that human cognition is often quite regular. In contrast, the rule-following approach assumes that such regularities may be naturally approximated by neural networks that adapt to regularities in the environment. This affords more graded generalizations whose regularity approximates the extent to which the environment is consistently regular, with the possible advantage that both regularities and exceptions can be accommodated within the same neural network. In rule-use systems, exceptions are instead typically memorized, and represented separately from the rules themselves. Such differences are highlighted in precise computational models of psychological phenomena (Shultz, 2003).The balance-scale task is interesting because it is representative of the many problems requiring integration of information across two separate quantitative dimensions and because it provides well-replicated results with an interesting stage progression.Here we present a new computational model of balance-scale acquisition that addresses a recent criticism affecting many of the balance-scale computational models – ensuring that the final stage consists of a genuine, multiplicative torque rule and not a simpler rule based on addition (Quinlan, van der Maas, Jansen, Booij, & Rendell, 2007). After describing the balance-scale task and phenomena, we present our new computational model.The task presents several pegs positioned on a rigid beam at regular distances to the left and right of a fulcrum (Siegler, 1976). An experimenter places some identical weights on a peg on the left side and some number of identical weights on a peg on the right side of the beam. The participant is asked to predict which side of the scale will drop, or whether the scale will remain balanced, when the beam is released from its supports, usually a block placed under each end of the beam. Archimedes’ principle of the lever describes a rule that yields a correct answer to all such problems: multiply the weight and distance from the fulcrum on each side and predict that the side with the larger product (or torque) to drop.A neural-network simulation using the cascade-correlation (CC) algorithm (Shultz, Mareschal, & Schmidt, 1994) captured the four stages seen in children (Siegler, 1976): (1) predicting the side with more weights to descend, (2) when the weights are equal on both sides, also predicting the side with greater distance to descend, (3) predicting correctly when weight and distance cues both forecast the same result and performing at chance when these cues conflict, and (4) being correct on at least 80% of balance-scale problems.If performance at Stage 4 is diagnosed as being correct on 80% of balance-scale problems, some of which are difficult problems in which weight and distance cues conflict with each other, then at least some computational models, both symbolic (Schmidt & Ling, 1996) and connectionist cascade-correlation networks (Shultz et al., 1994) reach Stage 4. But if Stage 4 is defined by possession of a genuine multiplicative torque rule, as opposed to say an addition rule, the modeling challenge remains open. Because many conflict problems can be solved by just adding weight and distance, documentation of a torque rule must be supported by success on problems that cannot alternately be solved by an addition rule (Boom, Hoijtink, & Kunnen, 2001; Quinlan, van der Maas, Jansen, Booij, & Rendell, 2007).With five pegs and five weights, the problem size often used in simulations of the balance scale (Shultz et al., 1994), there are 625 total problems, of which only 200 are relatively difficult conflict problems in which weight and distance information, used alone, predict different outcomes. Only 52 of these conflict problems are torque problems that cannot be solved by mere addition; the other 148 are addition problems that can be solved by adding distance and weight on each side and comparing these sums.An addition rule was routinely ignored in computational models of balance-scale development, whether symbolic (Schmidt & Ling, 1996) or connectionist (McClelland, 1989; Schapiro & McClelland, 2009; Shultz et al., 1994), just as it had been ignored in many older psychology experiments on the balance scale. But with evidence that at least some people use or follow a genuine torque rule, solving balance-scale problems that addition cannot solve (Boom, Hoijtink, & Kunnen, 2001; Quinlan, van der Maas, Jansen, Booij, & Rendell, 2007), it becomes important to test computational models for their ability to acquire and use a genuine torque rule.This problem of accurately diagnosing a terminal stage does not arise in the many other developmental domains where constructive neural networks have been successfully applied: conservation (Shultz, 1998, 2006), seriation (Mareschal & Shultz, 1999), transitivity (Shultz & Vogel, 2004), integration of cues for moving objects (Buckingham & Shultz, 2000), shift learning (Sirois & Shultz, 1998), deictic pronouns (Oshima-Takane, Takane, & Shultz, 1999; Shultz, Buckingham, & Oshima-Takane, 1994), word stress (Shultz & Gerken, 2005), syllable boundaries (Shultz & Bale, 2006), morpho-phonology (Shultz, Berthiaume, & Dandurand, 2010), habituation of infant attention to auditory (Shultz & Bale, 2001, 2006) and visual (Shultz, 2011; Shultz & Cohen, 2004) information, false-belief (Berthiaume, Onishi, & Shultz, 2008; Berthiaume, Shultz, & Onishi, 2013; Evans, Berthiaume, & Shultz, 2010), and concept acquisition (Baetu & Shultz, 2010; Shultz, Thivierge, & Laurin, 2008).Our experience teaching university students about psychological development on the balance scale suggests that those few students who spontaneously use the torque rule to solve balance problems admit that they learned this method in science classes, either in secondary school or college. When the remaining students are informed that balance-scale problems can be solved by computing and comparing torques, they too begin to sometimes use this torque rule to produce more correct answers. Thus, it seems likely that most people learn a torque rule from explicit verbal instruction that includes relevant examples (Siegler, personal communication). In contrast, people are unlikely to learn a torque rule from examples alone because problems requiring the torque rule are so rare.Here, we attempt to achieve a successful and psychologically more valid model of balance-scale development by capturing all four stages, including a genuine torque rule at stage 4, and perceptual, problem-type, and timing effects. The new model combines and extends our initial balance-scale simulation (Shultz et al., 1994) and more recent work with knowledge-based learning (Shultz, Rivest, Egri, Thivierge, & Dandurand, 2007).We posit two different processing modules to solve the task, an intuitive module and a torque-rule module. The intuitive module is a connectionist network that implicitly learns environmental regularities about balance-scale problems. It predicts which side of a balance scale will tip down, without any need to invoke a symbolic rule. The learning process is essentially bottom-up and stimulus driven. In contrast, the torque-rule module simulates explicit learning via teaching a torque rule, as in secondary-school science classes. Such a rule can be described in natural language, and coded in an appropriate manner in memory. In our model, we implement this as a neural module with torque-rule functionality. A meta-cognitive, selection module decides whether to use the prediction of the intuitive model or, if it determines that this prediction might be wrong, invokes the torque module to obtain a more definitive answer. All three modules are implemented as neural networks.A dual-processing approach (e.g., automatic vs. deliberate) is rooted in a long and currently active emphasis in cognitive psychology (Evans, 2010; Kahneman, 2011; Stanovich, 2012). Our results are discussed in that context.A recent critique argued that connectionist models of balance-scale development do not capture stage-4 performance (Quinlan et al., 2007), which on some theoretical accounts (Siegler, 1976) involves computation and comparison of torques. Torque is the rotational force applied to a lever, multiplied by its distance from the lever’s fulcrum. Because many conflict problems can be solved by adding (rather than multiplying) weight and distance, documentation of a torque rule needs to be supported by success on problems that cannot also be solved by addition.With five pegs and five weights, the problem size used in our original cascade-correlation (CC) simulations of the balance scale (Shultz et al., 1994) and in many balance-scale psychology experiments, there are 625 total problems, of which just 200 are conflict problems. Only 52 of these conflict problems (dubbed torque problems) actually require a torque rule for correct solution because the other 148 conflict problems (dubbed addition problems) can be solved correctly by adding distance and weight on each side and comparing these sums.Until recently, there was not much interest in using an addition rule to gage balance-scale performance and addition did not figure importantly in descriptions of balance-scale stages. Thus, addition was routinely ignored in both symbolic (Langley, 1987; Newell, 1990; Schmidt & Ling, 1996) and connectionist (McClelland, 1989; Schapiro & McClelland, 2009; Shultz, Mareschal, & Schmidt, 1994) simulations of balance-scale performance, and there was no attempt to distinguish addition from a genuine torque rule in these simulations.Thus it is not surprising that researchers using sophisticated methods such as Latent Class Analysis (LCA) failed to find evidence of a torque rule, distinct from an addition rule, in replications of connectionist models (Jansen & van der Maas, 1997; Quinlan, van der Maas, Jansen, Booij, & Rendell, 2007).Until recently none of balance-scale simulations ever tried to simulate or diagnose a genuine torque rule by distinguishing it from an addition rule. There is no reason to believe that a genuine torque rule will emerge in every neural network model. Although we show that a genuine torque rule does emerge in our KBCC model and in SDCC networks, this rule does not emerge, for example, in back-propagation networks. Indeed back-propagation networks do not even reach stage 4 when assessed with Siegler’s RAM technique. To our knowledge, we are the first to show that neural networks can achieve a genuine torque rule, and we confirm this result in two quite different constructive networks – SDCC networks alone and our favored three-part modular system.However, the conclusion that connectionist models are unable to learn a true torque rule is premature. The definition of torque as a product of number of weights and distance from the fulcrum is a rather simple multiplicative function, even if it has to be computed on both sides of the fulcrum and the larger torque selected as marking the descending side of the scale. An obvious, but untried way to see if networks can learn to compute and compare torques is to ensure that there are sufficient torque problems to the training set. Otherwise, the relatively few available torque problems can be easily swamped by the much larger number of problems that can correctly be solved by addition or even simpler rules involving weight or distance. This is particularly true when there are biases in the training set favoring equal-distance problems, thought to be necessary for capturing the stage-1 tendency to focus on weight information to the exclusion of distance information (McClelland, 1989; Shultz et al., 1994).Here we present simulations to test this hypothesis that prolonged training with sufficient numbers of torque problems can simulate learning to use torques. We apply several analyses of network responses to assess the use of torque and addition rules. We focus here on stages 3 and 4 and on the addition and torque rules thought to characterize those two stages, respectively (Boom et al., 2001; Jansen & van der Maas, 1997, 2002). We use newer sibling-descendant CC (SDCC) networks to study learning of a torque rule from prolonged exposure to torque problems.In this appendix, we apply two different diagnostic techniques to SDCC networks to test their ability to transition to a genuine torque rule: RAM and LCA.The classic method of detecting rules on balance scale tasks is to test a participant with several problems of each of six types (Siegler, 1976). Three of these types are relatively simple problems with no conflict between weight and distance information: balance problems in which there are equal numbers of weights on each side of the scale placed equally distant from the fulcrum, weight problems in which one side has more weights than the other with the weights placed equally distant from the fulcrum, and distance problems with the same number of weights on each side placed at different distances from the fulcrum. There are also three kinds of conflict problems in which one side of the scale has more weights and the other side has greater distance, making the prediction of which side will descend more difficult. Conflict-weight problems have greater torque on the side with more weight, conflict-distance problems have greater torque on the side with more distance, and conflict-balance problems have equal torques on each side of the fulcrum.The classic Rule-assessment Method (RAM) examines the pattern of performance across these six problem types (Siegler & Chen, 2002). Use of rule 1 (weight information) is indicated by a pattern of correct performance on the balance, weight, and conflict-weight problems and incorrect performance on the distance, conflict-distance, and conflict-balance problems. Rule 2 (weight information, but use of distance when the weights are equal across the two sides) is characterized by the same pattern as rule 1, but with additionally correct performance on distance problems. In rule 3, weight and distance information are both used, yielding correct performance on the simple problems, but confusion on conflict problems.Although Siegler (1976) suggested that rule 3 users guess on conflict problems, several later researchers have emphasized the use of other rules, particularly the addition rule, in which the side with the larger sum of weight and distance is predicted to descend (Boom et al., 2001; Ferretti et al., 1985; Jansen & van der Maas, 1997, 2002; Normandeau et al., 1989; Quinlan et al., 2007). Rule 4 is characterized by successful performance on all six problem types, perhaps indicating use of the torque rule in which the side with the larger torque (weight x distance) is predicted to go down. To accommodate error variance in human performance, RAM users tolerate up to 20% deviant responses from these precise patterns of performance. Because these four rules tend to develop in order of their numerical designation, they are often taken as evidence that a child is in a particular stage of development.More recently, several researchers have argued that Latent Class Analysis (LCA) is a methodologically sounder way to detect rules (Boom, Hoijtink, & Kunnen, 2001; Jansen & van der Maas, 1997, 2002; Quinlan et al., 2007). In exploratory LCA, estimated parameters of a statistically-fitting model differ across latent classes, typically designating homogeneous groups of participants that differ from each other (McCutcheon, 1987). Individuals can be sorted into the latent classes based on membership probabilities estimated from the model.In balance-scale research, the test problems typically come from the same types used by RAM researchers. But because LCA requires large numbers of participants and does better with small numbers of problems (see Appendix C for explanation), non-diagnostic problems such as balance and weight problems are often omitted from the test set. Also, in this recent research, there is often a systematic attempt to distinguish the addition rule from the torque rule by including among the conflict test problems some that can solved by either addition or torque and others that can only be solved by torque.Advantages and disadvantages of these two methods for detecting balance-scale rules have been noted and debated (Jansen & van der Maas, 1997, 2002; Siegler & Chen, 2002, 2008; van der Maas & Straatemeier, 2008). Both can test for the presence of pre-defined rules while LCA can as well identify previously unknown rules. Here we apply both techniques to the same dataset, produced by a large number of SDCC networks, in order to assess whether these networks can transition from an addition rule to a genuine torque rule. It was previously argued that such networks cannot achieve a genuine torque rule (Quinlan, et al., 2007).LCA was recently applied (Quinlan et al., 2007) to a replication of an early computational model of children’s development on the balance-scale task (Shultz et al., 1994). Quinlan and colleagues (2007) criticized this computational model, which had used constructive neural networks, for not capturing all of these stages. In an invited response to the Quinlan et al. paper, we argued among other points that LCA, as used by Quinlan et al., shows a strong tendency to identify small and unreliable classes (where each class represents a rule), and thus should be used cautiously in validating stages in both psychological and modeling studies (Shultz & Takane, 2007).In their response to our rejoinder, our argument was dismissed because our demonstration used a 3-class model of 4 items, which yields an unidentified statistical model that does not converge during estimation (van der Maas, Quinlan, & Jansen, 2007). Here we present a 3-class model of 6 items, which yields an identified statistical model, to study the reliability problem in more detail. We confirm that this problem is indeed severe enough to warrant caution in using LCA to assess rule development. First, we present a brief recap of relevant background literature and issues.The psychological literature on using LCA to assess balance-scale stages provides strong evidence of unreliability in rule identification. Independent LCA studies of human balance-scale performance produce a number of small, leftover classes with mutually inconsistent interpretations. For example, Boom and colleagues (Boom & ter Laak, 2007; Boom et al., 2001) found classes suggestive of Siegler’s four rules, the addition rule, and several infrequent and difficult-to-interpret classes. Likewise, Jansen and van der Maas (1997) found classes for Siegler’s first two rules, the addition rule, and a no-balance rule predicting that the scale would not balance, which was described as difficult to interpret. Jansen and van der Maas (2002) later reported classes consistent with Siegler’s four rules, addition, a smallest-distance-down rule, a distance-and-guessing-when-weights-are-unequal rule, a rule that seemed to combine Siegler’s rule 3 with the addition rule, and additional difficult-to-interpret classes. Tellingly, it is the smaller classes that tend to be the most difficult to replicate across these human studies.The problem with these small extra classes is not difficulty of interpretation. Humans often exhibit behavior that is difficult to interpret in terms of rules. The real problem with extra LCA classes is that they are small and inconsistent, suggesting that they might be random and essentially meaningless. As such, they should not be used to characterize children’s performance or adjudicate among computational simulations of that performance.Interesting in this context is Boom et al.’s (2001) distinction between classes and strategies. Classes are said to refer to a set of response patterns that are statistically similar, as revealed by say LCA. Strategies (or rules) refer to an interpreted procedure that could conceivably generate a statistical class. Classes that cannot be interpreted as being produced by sensible rules should not be treated as rules; they are merely statistical groupings that may not happen to fit a rule interpretation.In summary, the only balance-scale rules to be reliably diagnosed by LCA in humans are weight, weight-and-distance, addition, and torque. Ignoring the small and difficult-to-interpret latent classes in Quinlan et al.’s (2007) study, it is noteworthy that their LCA found evidence for weight, weight-and-distance, addition rules in their replication of our original balance-scale simulation (Shultz et al., 1994). Apart from a torque rule, these are precisely the same rules consistently found with children using LCA. Moreover, our accompanying manuscript and Appendices A and B provide clear evidence of neural networks also following a genuine torque rule.

@&#CONCLUSIONS@&#
