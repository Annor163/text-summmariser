@&#MAIN-TITLE@&#
Clear and smooth path planning

@&#HIGHLIGHTS@&#
Formulating the problem of path planning as multi-objective models.Considering energy consumption and safety of path.Proposing geometric-based operators customized for the path planning.Proposing an efficient multi-objective evolutionary algorithm.Comparing the algorithm with the other robust algorithms in difficult search problems.

@&#KEYPHRASES@&#
Multi-objective path planning,Multi-objective optimization,Evolutionary algorithms,

@&#ABSTRACT@&#
One of the challenging problems in motion planning is finding an efficient path for a robot in different aspects such as length, clearance and smoothness. We formulate this problem as two multi-objective path planning models with the focus on robot's energy consumption and path's safety. These models address two five- and three-objectives optimization problems. We propose an evolutionary algorithm for solving the problems. For efficient searching and achieving Pareto-optimal regions, in addition to the standard genetic operators, a family of path refiner operators is introduced. The new operators play a local search role and intensify power of the algorithm in both explorative and exploitative terms. Finally, we verify the models and compare efficiency of the algorithm and the refiner operators by other multi-objective algorithms such as strength Pareto evolutionary algorithm 2 and multi-objective particle swarm optimization on several complicated path planning test problems.

@&#INTRODUCTION@&#
Path planning (PP) problem is one of the challenging problems in motion planning which has widespread applications in robotics and manipulation and in daily routine works. The goal of this problem is to look for an optimal path between two given points—called source and destination denoted by s and d, respectively—in a workspace contains some obstacles. Since there are many types of robots with different abilities and constraints, and different applications, it is nearly impossible to provide a unique exact definition for the expression “optimal path” in the robot path planning context. But generally, it can be focused on two aspects of a plan: energy and safety. The energy is an issue related to the physical and mechanical structure of the robot and its abilities for moving, rotating and sensing. The safety is related to the planned path as it is very important to safe both robot and obstacles in the presence of some unavoidable errors raised due to sensors’ imperfections, finite computations, actuators’ inaccuracies or uncertainty in the workspace [1].With regard to the complexity of PP problems which is NP-hard [2] and also widespread applications of them, such as computer games and animations, bio-informatics, assembly planning and manufacturing design [3–5], many exact, approximation and heuristic algorithms have been proposed to solve the problem. Most of these algorithms focused on minimizing the path's length [1,6–8]. Cell decomposition, roadmap, potential field and heuristic algorithms can be reviewed as some of such algorithms. Cell decomposition methods decompose the workspace and convert the PP problem to a graph searching problem [8–10]. If the workspace is a path-connected space, these methods guarantee to find a feasible path (a path which starts from s and ends at d without crossing the obstacles), but there is no guarantee on the other aspects of the optimality. Roadmap approaches first construct a set of collision-free connected highways in the workspace and then for a given pair s and d, connect them to the highways. Finally the shortest s–d–path can be found in such highways. Visibility graph (VG) and Voronoi diagram (VD) are two famous roadmap objects [11,12]. VG is a graph whose vertices are obstacle vertices (and points s and d). There exists an edge between two nodes in VG if and only if they are visible to each other in the workspace. If the weight of each edge is equal to its length, VG is a weighted connected graph and we can find the minimum length path by searching the shortest path on the graph. Unfortunately, the optimal path in VG is not completely collision free; it is semi-collision free. In other words, it is possible that some parts of path lie on the boundary of obstacles. So, in these approaches usually the minimum distance between path and obstacle—called confidence interval or minimum clearance—is zero. On the other hand, by using VD approach a path with the maximum confidence interval can be found, but in most cases this path is too long for being reasonable. VD of a set of obstacles is defined as locus of all points in the workspace which has at least two nearest obstacles. Also, a hybrid of generalized Voronoi diagram and randomized planning was presented for translating and rotating rigid bodies [13].Potential field approach is a fast heuristic search method for PP problem but it is possible that this method is trapped in local optimums [8]. This method uses two differentiable attractive and repulsive functions simultaneously. The first function attracts robot to the destination point and the second one repels it from obstacles. The efficiency of potential field algorithm is dependent seriously on the functions quality. Several mathematical definitions have been presented to implement the functions [8]. There are also some PP algorithms which depend less on the dimension of search space; sample-based methods like probabilistic roadmap and other variations of it [1,14] and combinatorial heuristic approaches such as particle swarm optimization and ant colony optimization [15], can be mentioned. Also, genetic algorithms (GA) as robust popular heuristic search methods have been extensively used to solve the PP problem in the discrete and continuous spaces [16–18].Each of the above approaches has some advantages and disadvantages, but none of them regards all the mentioned aspects of the path's optimality, energy and safety, simultaneously. In fact, most of the methods consider just one of the objectives length, clearance or smoothness. However, to achieve an ideal path, it is necessary to synthesize all of these objectives. This challenge is introduced as natural-looking path in the Wein's study [19]; a path which is short and smooth and keeps a predefined amount of distance from obstacles. Two objects VG and VD are combined and a new object, visibility-Voronoi diagram with clearance c (denoted by VV(c)-diagram) is constructed. The extension of VV(c)-diagram to higher dimensional space has not been studied, but with regard to the complexity of VG and VD in higher dimensions, it can be said that it is exponentially complicated. Also, some studies have tried to achieve the safety term by using Minkowski sum, or by doing some post-processing on the output of other algorithms in order to improve it in terms of other aspects of optimality [20,21] e.g. first a sample-based algorithm finds a piece-wise short path, and then a post-process tries to improve smoothness or clearance of the path. For example, Pan et al. [22] by focusing on translation and rotation motions used cubic B-spline trajectories and presented an efficient post processing algorithm to generate smooth paths by sample-based methods. Unfortunately, in these cases there is no guarantee the path remains short after performing post-process. Also, as mentioned in [19], these types of algorithms are inefficient in higher dimensions as well as in complicated search spaces such as narrow passage and clutter workspaces.Castillo et al. [23] studied the PP problem in a grid with two objective functions, length and difficulty. They considered a predefined difficulty weight to each cell of the grid. Their algorithm uses a simple ranking procedure based on non-dominated solutions to sort the population with respect to the length and difficulty. For a grid workspace, Ahmed and Deb [24] considered the problem of offline point-to-point path planning with travel distance, safety and smoothness. They used non-dominated sorting genetic algorithm II (NSGA-II) with several chromosome representations for monotone paths. Also, they used spline representation to generate piece-wise polynomial and B-spline smooth paths on the grid [25]. Piazzi et al. [26] used the polynomial curves and η3-splines and proposed an approach to find smooth and short paths. Elshamli et al. [27] provided a single objective model based on the linear combination of all goal functions. This technique has some significant defects, e.g. there is no proportion between the objective space and weighted space, specially in non-uniform search spaces. In addition, there is no exact information about the priority of the objectives [28].Since population based evolutionary algorithms can emphasize to all objectives simultaneously, they are appropriate candidates to find a set of Pareto-optimal solutions as diverse as possible in objective space. NSGA-II and strength Pareto evolutionary algorithm 2 (SPEA2) are two robust multi-objective evolutionary approaches [29,30] that have been tested by several real and benchmark problems [28]. Mittal and Deb [31] used NSGA-II for offline path planning of unmanned aerial vehicles by using B-spline curves. They considered the objectives of minimizing length and maximizing margin of safety. Zhang et al. [32] formulated the problem of path planning under uncertainty as a bi-objective optimization problem focusing on minimizing risk degree and path's length, and used multi-objective particle swarm optimization (PSO) to solve it. Similarly, a hybrid of PSO and gravitational search algorithm was proposed by Purcaru et al. [33] for finding short and safe paths in dangerous environments. Davoodi et al. [34] regarded the path planning in a grid and considered two objectives, minimizing the path length in terms of Manhattan distance with four-connectivity and eight-connectivity and maximizing the distance of path from obstacle.Most of practical applications of PP need to a continuous workspace, e.g. car like robots. In this paper we suggest two multi-objective PP models on the continuous space focusing on minimizing energy consumption and maximizing path's safety. To achieve these goals, we follow three objectives: minimizing path length, maximizing smoothness, and maximizing clearance. Each of the models can be used in different applications with regard to the availability of minimum necessary confidence interval. Based on authors’ knowledge there is no study in the literature that simultaneously focuses on these objectives in the continuous space for point-to-point path planning. However, similar existing studies, for example [24–27], considered just some simple and usual workspaces for testing their presented algorithms. In this paper, for efficiently solving the multi-objective path planning problems, we propose an evolutionary algorithm based on the NSGA-II framework such that in addition to the standard genetic operators, it benefits a family of robust geometric path refiner operators. These new operators play a local search role and increase exploration and exploitation power of the algorithm. Also, this family of operators can be used in the body of any heuristic search algorithm for PP. We test our algorithm and the new operators, and show that these operators significantly improve the efficiency of such algorithms in the complicated PP workspaces such that the algorithm is able to find near Pareto-optimal solutions in the most of simulations.This paper includes six sections. Section two presents two mathematical multi-objective formulations of PP problem. Section three briefly reviews multi-objective optimization concepts. Genetic operators, new refiner operators and the algorithm are proposed in the fourth section. Section five shows simulation and comparison results, and finally we draw a conclusion in the last section.For a given path planning workspace contains some polygonal obstacles and two source and destination points s and d, we aim to find an energy and safety terms optimal point-to-point path between s and d which does not cross the obstacles. In most of applications, robot spends energy for sensing and moving which is performed by wheels or legs. Furthermore, usually robot's rotations along the path needs to energy because of its mechanical and physical construction. Therefore, the path's length and smoothness can be used as two appropriate factors for consuming energy. In the mathematic literatures a smooth path is a differentiable path, but since our discussion is based on the point-to-point planning strategy, we focus on the number of rotations and amount of them for smoothness objective. More precisely, to achieve the maximum smoothness we are interested to find a path with the minimum number of middle points and minimum deviation angle. Finally, the safety term or clearance is very important to protect both robot and obstacles. Indeed, it is impossible to avoid some errors like moving errors causing by friction and sliding robot's tracks, or by errors in robot's sensors. So, we are interested to find a path that has a necessary confidence interval from obstacles.We assume that the obstacles are static polygons in the workspace. By using some concepts, such as Minkowski sum and mapping between workspace and configuration space, without loss of generality it can be assumed that the robot is a single point. The length of a path can be computed by summing the length of all its sub-paths (segments). In fact, a path p=[s=p0,p1,p2,…,pn,pn+1=d] is a set of n consecutive points which starts from s and ends at d. The parameter n is the number of middle points or rotation points (RPs). If dis(pi,pi+1) shows the distance of two points piand pi+1, the length of p can be computed as follows:(1)Length(p)=∑i=0ndispi,pi+1,where dis(.,.) is a proper metric, such as Euclidean or Manhattan, which is determined with respect to application.However we can approximate any curve like path by increasing RPs of a path, robot needs to stop or reduce his velocity at each RP for rotating and changing his direction. So, there is a trade-off between minimizing the number of RPs and finding a smooth path. On the other hand, we can maximize smoothness for a fixed number of RPs. To clarify this problem, Fig. 1a shows two paths with only one RP. The path [s,p1,d] has deviation angle α, and the path [s,p2,d] has deviation angle β. Since β<α, it is obvious that the second path is smoother than the first one. So, the next objective is minimizing rotation angles. We have at least two options: minimizing the maximum deviation angle and minimizing the sum of deviation angles. However, we can consider both of them, for simplicity of the model we select one of them which is a proper representation for smoothness beside the objective of minimizing the number of RPs. Fig. 1b shows some paths from s to d which summation of their deviation angles is equal to α. If segments p2p5 and p4p5 are perpendicular to segments ud and su, respectively, then the maximum deviation angle of two paths [s,p2,p5,d] and [s,p4,p5,d] is equals to π/2. So, the maximum deviation angle of two other paths [s,p1,p5,d] and [s,p3,p5,d] is more and less than π/2, respectively. The path [s,p3,p5,d] is the smoothest path among the four illustrated paths. Thus, the number of RPs and the summation of deviation angles cannot be a good representation to smoothness. For obtaining a general application PP model, we choose the objective of minimizing the maximum deviation angle. Consequently, we define two objectives for reaching smoothness: minimizing the number of RPs and minimizing the maximum deviation angle. Generally these two objectives are in conflict to each other and each of them in absence of the other one is incomplete, but combination of them, which will demonstrated in our simulations, defines a proper representation for smoothness.Amount of deviation angle while robot walks on the sub-path [p1,p2,p3] in the plane, where pi=(xi,yi) for i=1–3, can be computed as follows:(2)Anglep1,p2,p3=π−Cos−1x2−x1x3−x2+y2−y1y3−y2disp1,p2×disp2,p3So, the following equation can be used to find the maximum deviation angle of a path as p=[s=p0,p1,p2,…,pn,pn+1=d].(3)MaxAnglep=Max0≤i≤n−1Anglepi,pi+1,pi+2.The safety term is related to the confidence interval or distance of robot from obstacles. To provide this goal, it is better to maximize the distance of robot from obstacles; specially from the nearest obstacle. Like the smoothness, we have some options: maximizing the minimum distance of the robot's path from the nearest obstacle, and maximizing the minimum (or average) distance from the nearest obstacle along the path. Usually, these objectives do not conflict to each other. The first option guarantees the minimum clearance, and the second one helps the path close the VD of obstacles. As aforementioned, VD has the maximum distance from obstacles. So we use both of the objectives for the safety term. By calculating the minimum distance of each segment from the nearest obstacles, we can compute the amount of clearance of a path. Suppose the minimum distance of the segment pipi+1 from an obstacle Ojis denoted by MinDis(pipi+1,Oj), and set O={O1,O2,…,Om} includes all m obstacles. So, we formulate the first multi-objective path planning problem as the following model:(4)p=s=p0,p1,p2,…,pn,pn+1=dMinimizef1(p)=∑i=0ndis(pi,pi+1)Minimizef2(p)=nMinimizef3(p)=Max0≤i≤n−1Angle[pi,pi+1,pi+2]Maximizef4(p)=Min0≤i≤nMin1≤j≤mMinDispipi+1,OjMaximizef5(p)=∑i=0nMin1≤j≤mMinDispipi+1,Ojsubjectto:pipi+1∈semi-freespace,0≤i≤nThe first objective is minimizing the length of path. The second and third objectives represent the smoothness, and the two others emphasize on the clearance of path. The only constraint of the model is the collision-free condition, that is, the obtained path does not cross obstacles but it can touch the boundary of obstacles. It is worth noting that the boundary of workspace is also an obstacle.Usually, the first and second objectives have a similar behavior, but both of them conflict with the last two objectives. When we minimize the number of RPs, automatically the length of the path is minimized, but in some cases we can minimize the length of the path by increasing the RPs specially in a “zig-zag” path. In other words, to obtain a better clearance we must increase the length and/or RPs. However, for maximizing the minimum deviation angle, we need to increase RPs.By solving the problem mentioned in the model illustrated in Eq. (4) a set of Pareto-optimal paths are obtained. So, we will have a set of paths with different clearance. These solutions are very useful for some applications that cannot obviously determine a parameter as a necessary clearance. Indeed, in the applications that it is possible to bound the maximum error of robot with respect to the maximum error in robot's sensors and actuators as a constant parameter minimum clearance MinC, we do not need to a path with clearance more than MinC. In such applications, the following formulation of the PP problem can be used:(5)p=s=p0,p1,p2,....,pn,pn+1=dMinimizef1(p)=∑i=0ndispi,pi+1Minimizef2(p)=nMinimizef3(p)=Max0≤i≤n−1Anglepi,pi+1,pi+2subjectto:Minimumclearance:Min0≤i≤nMin1≤j≤mMinDispipi+1,Oj≥MinCCollisionfree:pipi+1∈semi−freespace,0≤i≤nThis formulation of the problem, in addition to the mentioned usual PP inputs, has an extra parameter MinC which is the minimum necessary clearance to guarantee the safety. So, the objectives only emphasis on minimizing the length, RPs and deviation angles, and the clearance is formulated in the first constraint of the model by using a predefined clearance parameter MinC.We denote these two five- and three-objectives of path planning problems by 5objPP and 3objPP. In 3objPP problem if we are able to determine a proper value MinC with respect to the magnitude of robot's error, it is possible that there is no solution for such clearance MinC, while there is some paths with clearance less than MinC; specially for MinC−ɛ, for some small positive value ɛ. So a feasible solution in 3objPP is a path that satisfies the collision-free constraint and has at least a minimum clearance MinC. Therefore in 3objPP, it is possible that the workspace is path-connected while there is no feasible solution for the problem, particularly in narrow passage workspaces. However, in 5objPP such a path is feasible (even for a small minimum clearance MinC=ɛ).To solve both 5objPP and 3objPP problems, we can use multi-objective evolutionary optimization algorithms. Also, to satisfy the clearance constraint of 3objPP problem we can use Minkowski sum. It is sufficient that all obstacles be summed up to a disk with radius MinC. Minkowski sum in this case can be computed in linear time with respect to the size of obstacles [10,19]. This extension helps to improve time complexity. In the next sections, we introduce multi-objective optimization and propose a multi-objective genetic algorithm based on NSGA-II for solving both presented problems.Since in the multi-objective optimization problems the objectives usually conflict to each other, the first goal of such optimization is finding a set admissible solutions—called Pareto-optimal solutions. A Pareto-optimal solution is a solution which is not improved to an objective unless this improvement comes only from a sacrifice on the other objective. The second goal of multi-objective optimization is maximizing diversity in the objective space among the obtained solutions [35]. Domination-based approaches are efficient methods to achieve Pareto-optimal regions, that is, if p and q are two solutions of an M-objective optimization (minimization) problem, it is said that p is dominated by q if the following equation is satisfied [35].(6)∀m∈{1,2,...,M}:fm(p)≥fm(q)and∃m∈{1,2,...,M}:fm(p)>fm(q),where fmis the mth objective function. Thus, three cases may occur for p and q: in two cases one of the solutions is dominated by the other one, and in the third case none of them dominates. In other words, p and q are two non-dominated solutions in this case.To solve the suggested multi-objective PP problems, we propose a multi-objective evolutionary algorithm based on NSGA-II [29]. This algorithm uses a fixed size population and divides a genetic population to several preferred levels based on the non-dominated solutions. The non-domination rule helps the algorithm closes to the Pareto-optimal regions. To achieve the second goal it uses a diversity mechanism controller. It assigns a crowding distance weight to each solution which represents the number of neighbor solutions in the objective space. More details of NSGA-II can be found in [28,29].Before going into the details of the algorithm, let us explain it roughly. First, a set of paths (or chromosomes) are generated randomly and the fitness of each chromosome is determined by using the objective functions introduced in 5objPP or 3objPP problems. Then, the solutions are sorted based on the non-domination rule. A selection operator selects some of preferred solutions for producing the next generation using crossover and mutation operators. Finally, we use a family of refiner operators and improve the generated solutions locally. This process is repeated and the set of obtained non-dominated solutions are reported at the end. In the following, we present detail of the operators and a pseudo code of the algorithm.Since a path is a set of consecutive segments which starts from s and ends at d, a chromosome is a set of ordered endpoints, which denotes the rotation points (RPs) of the path. We also allow a path be infeasible in the population. For implementing a path, we represent a chromosome as a single linked list that each node saves an RP. For example, for a point pi=(xi,yi), we store xi, yiand a pointer to the next node. Fig. 2shows the data structure for a chromosome with n RPs. This data structure allows to efficient handling the genetic and refiner operators.In this step, a set of paths is generated randomly as the initial population. To this end, for each path k random points are generated in free workspace. These random points address exactly the RPs of the path ordered from s to d. The parameter k can be determined with respect to the complexity of workspace. It depends on the size, number and position of the obstacles and also position of s and d. We set k to a random number between zero and |O|, where |O| is the total number of vertices in the obstacles. It is possible that after applying genetic or refiner operators, the number of RPs changes by removing or inserting them.We compute the length, smoothness and clearance for each path by the objective functions addressed in Eqs. (4) and (5). While initializing step and applying genetic operators, we select the RPs from semi-free space. Thus, for 5objPP problem an infeasible solution is a solution that crosses some obstacles, and for 3objPP problem it is a solution with a clearance less than MinC.There are several approaches to satisfy constraints in the evolutionary algorithms e.g. penalty functions and special representations and operators [36]. We follow two goals with selection operator: finding feasible solutions and approaching to Pareto-regions. Hence, we use the constrained tournament selection operator. This operator selects two (or more) solutions and after a tournament between them, introduces the winner as a parent. Suppose p and q are two randomly selected solutions. If one of them is feasible and the other one is infeasible, the winner is the feasible solution. If both of them are infeasible, the winner is a solution which has a minimum constraint violation. For example, in the PP problem, violation of a path can be defined as difference between MinC and clearance value of the path. Finally, if p and q are feasible, the non-domination rule is used and the winner is selected. In this case, if the solutions are non-dominated, the winner is the solution with the better diversity which can be computed by crowding distance metrics [28].Some crossover operators, such as liner, blend, unfair average, etc. have been suggested in the evolutionary algorithms’ literature. We use a special crossover similar to the single point crossover. Suppose p=[s,p1,p2,…,pn,d] and q=[s,q1,q2,…,qn′,d] are two paths. If for some i and j, the segments pipi+1 and qjqj+1 intersect in a point r, two children p′ and q′ are generated as follows: p′=[s,p1,p2,…,pi,r,qj+1,…,qn′,d] and q′=[s,q1,q2,…,qj,r,pi+1,…,pn,d]. Otherwise, if p and q have no intersection, p′=p and q′=q.The mutation operator is used to alter some genes of chromosomes in a random manner with a small probability pm(usually between 5% and 15%). In the proposed GA, we use the mutation with the probability rate pmbetween 0.1 and 0.2, but if the crossover operator does not perform (and the children are equal to their parents), we apply the mutation with pm=1. To mute a path, we randomly select an RP of the path and replace it with a random point in semi-free space.The crossover and mutation operators are not sufficient to achieve Pareto regions in complicated PP workspaces. So, in the following we propose a family of path refiner operators based on the geometry of path. Fig. 3schematically shows how to work these operators.This operator is applied on the infeasible solutions crossing some obstacles. When a sub-path of a path intersects an obstacle, we can turn around the boundary of the obstacle by using the obstacle vertices. This idea comes from Bug algorithm which is a simple and popular approach for path planning in unknown workspaces [8]. This technique guarantees to find a collision free path in case of at least one does exist. A pseudo code of this operator is presented below.Invalid solution refiner operatorInput: Path p=[s=p0, p1,…, pn, pn+1=d] and polygonal obstacle Q.Output: Refined path p.Step 1: Start with p0 and toward pn+1along p to find the first two intersection points of p and Q – called i1 and i2. If there is no intersection return p. Also, assume piis the rotation point right before i1 and pjis the rotation point right after i2.Step 2: Randomly select the right or left turn and find all vertices of Q between i1 and i2 – called q1, q2, …, qm.Step 3: Refine path p by changing it to p=[s=p0, p1, …, pi, q1, q2, …, qm, pj, pj+1,…, pn, pn+1=d]Step 4: Repeat Step 1 to Step 3 to refine p.This operator searches along a path and removes loops. It improves the length and clearance of the path but it is possible smoothness is sacrificed.This operator randomly selects an RP of a path and removes it. This may causes infeasibility but helps to minimize the number of RPs and also minimize the length of the path.The smoothness refiner operator finds the maximum deviation angle of a path and replaces it with two new random RPs on its coincident segments. In the fourth subfigure in Fig. 3 the unfilled circles show the randomly selected RPs.The purpose of this operator is increasing the clearance of a path. First, it finds the critical point of the path which is a point between two consecutive RPs that has minimum distance from obstacles. The last subfigure in Fig. 3 shows the cases may happen. Then it replaces the critical point with a new randomly selected RP near to the critical point and has a better clearance.The standard inputs of the path planning problem are a representation of the workspace and two source and destination points denoted by s and d. For solving 3objPP problem, the algorithm requires the extra parameter minimum clearance, MinC. Since the suggested models are multi-objective, the output includes a set of final non-dominated solutions near to Pareto-optimal solutions. Because of using the invalid solution refiner operator, the algorithm is complete, that is, the algorithm is able to find a collision-free path if there exist at least one; otherwise it reports there is no such feasible solution. We denote this algorithm by GAMOPP and its pseudo code is as follows.A genetic algorithm for multi-objective path planning (GAMOPP)Input: Set of polygonal obstacles, s, d, (and MinC for 3objPP).Output: A set of non-dominated solutions near to Pareto-optimal solutions.Step 1: Set g=0 and generate initial population, called parent population.Step 2: Compute objectives’ value of solutions in the parent population.Step 3: Create an empty children population.Step 4: Repeat the following four steps until the children population has some empty places:(a) Use tournament selection operator and select two parents.(b) Use crossover and mutation operators and produce two new children.(c) Use refiner operators (self-intersection, invalid solution, shortness, smoothness and clearance) and refine the children.(d) Compute objectives’ value of the children and insert them into the children population.Step 5: Combine two parent and children populations and use the non-dominated sorting procedure and create some preferred levels of non-domination solutions.Step 6: Select the new parent population from the best combined solutions.Step 7: If termination condition is satisfied, stop and report non-dominated solutions, otherwise set g=g+1 and go to Step 3;Some conditions such as finding a specific solution, maximum number of generations or a predefined running time have been suggested to terminate an evolutionary algorithm. It is proved that if the evolutionary algorithms have sufficient resources, they can achieve to the global optimum (or global Pareto fronts) [28]. We use the maximum number of generations as the termination condition.Elitism is a mechanism for preserving the best solution(s) of population. In fact, this mechanism guarantees a solution survives while some better solutions are found. In the proposed algorithm, we use an implicit global elitism strategy when two populations are combined in Step 5 and the best ones are selected in Step 6.As mentioned before, the output of the algorithm is a set of non-dominated solutions near to Pareto-optimal fronts. In some applications, a decision maker can use high-level information to select one of the solutions and in the applications which need an automatic selection, some approaches like knee regions have been suggested to select the best compromise solution from the obtained Pareto set [37].In this section, we test the models and the proposed genetic algorithm for multi-objective path planning problem (GAMOPP). Also we compare the GAMOPP with strength Pareto evolutionary algorithm 2 (SPEA2) as a robust multi-objective evolutionary algorithm [38] and a multi-objective version of particle swarm optimization (MOPSO) [39]. We design different benchmark problems presented in the following. Also, more test problems can be found in [40].We use a 650×750 Euclidean rectangle as the boundary of workspace in the following tests. In each test, we generate some obstacles and two source and destination points. We set the size of the genetic population to 20 and the maximum generation number to 80. Also, we use 0.8, 0.2 and 0.5 probability rates for crossover, mutation and refiner operators, respectively.Fig. 4displays a clutter space with 20 small obstacles. Clutter spaces are difficult because there are many local optimum paths. Fig. 4 a shows four obtained non-dominated solutions for 5objPP, and Fig. 4b shows four obtained non-dominated solutions with the minimum clearance MinC=4 for 3objPP. Fig. 5displays a corridor space which the optimal paths need to pass through narrow passages. This type of space is difficult for sample-based methods. Fig. 5a for 5objPP and Fig. 5b for 3objPP with MinC=3 show three obtained paths. Finally, Fig. 6demonstrates a spiral shaped obstacle and three obtained similar solutions. The legend of the figures explains the fitness values of obtained paths in each test. In the test of 3objPP, we compute F4(.) and F5(.) in 5objPP and display them in the figure's legends, too.In the following we test GAMOPP for a usual workspace illustrated in Fig. 7. We run GAMOPP for 30 times and in each run we consider the obtained non-dominated solutions, and finally report the best, worst, average and standard deviation for each objective for the solutions in 30 runs. Table 1shows the results for 5objPP problem and 3objPP problem with the minimum clearance MinC=10. Also, Fig. 7 shows the obtained path of a random run (15th run of 30 runs) for 5objPP and 3objPP problems. Also, Fig. 8shows the value path plot [41] of obtained solutions illustrated in Fig. 7. This plotting method provides a qualitative assessment of the spread of the solutions and a good assessment of the trade-off among the objective functions captured by the solutions. As illustrated in the figure a good spread over the axes shows a good diversity of the solutions. Note that in some objectives it is impossible to find a solution with small values of normalized range. For example, the length of the obtained paths in Fig. 7a changes between 587 and 889. So, when we normalize such values by dividing to 1000 as an upper bound all the normalized values are greater than 0.587 in the depicted axes. Also, the cross-lines (zig-zag) show good trade-off among the obtained objective values.In this subsection we compare GAMOPP with improved strength Pareto evolutionary algorithm (SPEA2) [30] and multi-objective particle swarm optimization (MOPSO) [32,39]. SPEA2 is a strength algorithm and several comparison studies of it with the other evolutionary algorithms have been reported in the literature (e.g. [28,38,42]). PSO is a fast and simple randomized search algorithm applied on many optimization NP-hard problems, and several versions of multi-objective PSO have been proposed [35,39]. Also it is used on path planning problem [32,33], however, most of such studies focus on a single objective such as minimizing the path's length [43].To perform comparison we use the spacing metric (sm) [44] for measuring the diversity goal and the set coverage metric (scm) [45] for measuring Pareto-optimality of the final obtained solutions. Eqs. (7) and (8) show the mathematical definition of these metrics.(7)di=minj=1,...,nj≠i∑m=1Mfmi−fmj,d¯=1n∑i=1ndi,sm=1n∑i=1n(di−d¯)2,where, M is the number of objectives,fmiis the value of the mth objective for ith solution, and n is the number of obtained non-dominated solutions.Also, for two sets of non-dominated solutions A and B, scm(A,B) is defined as follows:(8)scmA,B=b∈B∃a∈A:a≺_bB,where≺_shows the weak dominance relation. To have a fair comparison, we set all the parameters exactly the same for both of the algorithms; population size to 30, number of generation to 100, and probability of crossover and mutation operators to 0.8 and 0.2, respectively. Also we set the size of the external population in SPEA2 to 8 (about ¼ of population size which is recommended in the literature [28,35]). We run the algorithms for 15 random pairs of source and destination points on a usual workspace illustrated in Fig. 9. In each run we compare the results of GAMOPP and SPEA2 with respect to the mentioned metrics spacing and set coverage. That is, we use the non-parametric Wilcoxon rank sum test to look at the differences between two independent samples of obtained results from GAMOPP and SPEA2. The comparison results are shown in Tables 2 and 3for 5objPP and 3objPP.Based on the results of Wilcoxon rank sum test for 5objPP, it is concluded that the difference between the spacing of GAMOPP (median=0.210217) and the spacing of SPEA2 (median=0.159366) is not significant. However the set coverage of GAMOPP (median=0.666667) is significantly better than that of SPEA2 (median=0.22222). Also, for 3objPP, the difference between the spacing of GAMOPP (median=0.16515537) and the spacing of SPEA2 (median=0.113322393) is not significant. However the set coverage of GAMOPP (median=0.33333) is significantly better than that of SPEA2 (median=0.0).Finally we compare GAMOPP with MOPSO. As aforementioned there are several versions of multi-objective PSO. In this comparison we use an external repository based MOPSO which is equipped to a mutation operator [39]. Similar to the previous comparison, for GAMOPP we set population size to 30, number of generation to 100, and probability of crossover, mutation and refiner operators to 0.8, 0.2 and 0.5, respectively. Similarly we set the MOPSO's parameters, the swarm size of 30 and the number of generations 100, size of 8 particles repository, a mutation rate of 0.2, inertia weight 0.4 and 30 divisions for the adaptive grid (as suggested in the original study [39]). We run GAMOPP and MOPSO 30 times on the five workspaces shown in Figs. 4–7 and 9. In each run we compare the algorithms’ final non-dominated solutions using the set coverage metric (scm) and spacing metric (sm). Tables 4 and 5show the comparison results for 5objPP and 3objPP. Based on these results, GAMOPP significantly outperforms MOPSO in the first three workspaces (Clutter, Narrow passage and Spiral shaped obstacle) with respect to the set coverage metric. Also, in the other comparisons again GAMOPP has better performance than MOPSO. In addition, in 48 runs of 60 runs (30 runs for 5objPP and 30 runs for 3objPP) in spiral shaped obstacle workspace, in 26 runs of 60 runs in narrow passage workspace and in 7 runs of 60 runs in clutter workspace, MOPSO is not able to find any feasible solution in 100 generations. We disregard such pairing comparison runs in Tables 4 and 5, and just compare and report the runs that MOPSO finds some feasible solutions. However, in terms of running time MOPSO almost 3–4 times faster than GAMOPP.

@&#CONCLUSIONS@&#
