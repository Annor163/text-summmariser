@&#MAIN-TITLE@&#
Self-tuning of 2 DOF control based on evolving fuzzy model

@&#HIGHLIGHTS@&#
The feedforward and feedback loops of the control algorithm are self-tuned based on Takagi-Sugeno fuzzy model.The evolving fuzzy model employs evolving mechanisms for adding, removing, merging and splitting the clusters.The experimental results confirm that the proposed control approach is capable of fast and accurate reference tracking.The simulation and real experiments show that the closed-loop step response of the presented approach is invariant to the operating point.

@&#KEYPHRASES@&#
Takagi-Sugeno fuzzy model,Evolving fuzzy model,Gustafson-Kessel clustering,recursive fuzzy least squares,2 DOF control,model predictive control,NARX,

@&#ABSTRACT@&#
In this paper we present a self-tuning of two degrees-of-freedom control algorithm that is designed for use on a non-linear single-input single-output system. The control algorithm is developed based on the Takagi-Sugeno fuzzy model, and it consists of two loops: a feedforward loop and feedback loop. The feedforward part of the controller should drive the system output to the vicinity of the reference signal. It is developed from the inversion of the T-S fuzzy model. To achieve accurate error-free reference tracking a feedback part of the controller is added. A time-varying error-model predictive controller is used in the feedback loop. The error-model is obtained from the T-S fuzzy model. The T-S fuzzy model of the system, required in the controller, is obtained with evolving fuzzy modelling, which is based on recursive Gustafson-Kessel clustering algorithm and recursive fuzzy least squares. It employs evolving mechanisms for adding, removing, merging and splitting the clusters.The presented control approach was experimentally validated on a non-linear second-order SISO system helio-crane in simulation and real environment. Several criteria functions were defined to evaluate the reference-tracking and disturbance rejection performance of the control algorithm. The presented control approach was compared to another fuzzy control algorithm. The experimental results confirm the applicability of the approach.

@&#INTRODUCTION@&#
Fuzzy-set theory was proposed by Zadeh [1], and has since been successfully applied to a diverse range of applications, mostly in the fields of control and artificial intelligence. The use of fuzzy data instead of crisp-valued data has proved to be a convenient way of solving problems that are highly non-linear or are hard to solve with traditional approaches. The way to use fuzzy logic to derive a controller was first shown by Procyk and Mamdani [2], where fuzzy sets were used to describe inputs to the controller as well as output actions. The Takagi-Sugeno (T-S) fuzzy system [3] that was proposed later, uses only some mathematical function of the input variables to describe an output.Fuzzy model represents a convenient way to describe the system behaviour. Furthermore, Takagi-Sugeno fuzzy systems are thought of as universal approximators [4, p. 77], since every system can be represented to an arbitrary precision in the form of a T-S fuzzy model.To identify the T-S model the structure and the parameters of the local models must be identified [3]. A structure identification includes an estimation of the cluster centers (antecedent parameters), which is usually done by fuzzy clustering. Then for each cluster the sub-model's parameters are estimated, which is usually done with a least-squares method [5].The identification can be made off-line or on-line. The on-line learning of the fuzzy model has made significant progress in the past few decades. A range of on-line identification procedures were developed. Some of them are based on fuzzy logic (eTS [6], exTS [7,8], simple_TS [9], +eTS [10], FLEXFIS [11], FLEXFIS+ [12], eTS based on switching to neighbouring models [13]), others use neural networks that realize the behaviour of the fuzzy model (EFuNN [14,15], DENFIS [16], ANFIS [17], GANFIS [18], SOFNN [19], SAFIS [20], SCFNN [21], NFCN [22], D-FNN [23], GD-FNN [24], SONFIN [25], NeuroFAST [26], RAN [27], ESOM [28], Neural gas [29], ENFM [30], and GAP-RBF [31]).The fuzzy models that are normally used by the methods are first-order Takagi-Sugeno (ANFIS, SONFIN, D-FNN, GD-FNN, DENFIS, eTS, NeuroFAST, SOFNN, etc.), zero-order Takagi-Sugeno (SCFNN, SAFIS, GAP-RBF, EFuNN) or generalized fuzzy model (GANFIS).The methods also differ in their ability of adapting the fuzzy model and its structure. Some of the methods require an initial fuzzy model structure, which is then adapted. The adaptation includes only the adaptation of consequent and premise parameters (adaptive methods[18,17]). Some of the methods include a mechanism for adding new clusters to the model structure (incremental methods[6]). Recently proposed methods also include mechanisms for merging, removing and splitting clusters. The methods use different clustering algorithms, such as ECM ([16]), recursive subtractive clustering ([6]), Gath-Geva clustering ([30]) and others. The local model parameters’ identification is usually done with some version of the least-squares algorithm. In this paper the evolving fuzzy model method (eFuMo) is used for the fuzzy-model identification. The method is based on the recursive Gustafson-Kessel clustering algorithm [32,33] and recursive fuzzy least squares [6]. It employs evolving mechanisms for adding, removing, merging and splitting the clusters. This method was also used in [34] for constructing the adaptive fuzzy predictive functional controller for a semi-batch reactor.A model of a system in an appropriate form can represent a valuable insight into the system internal behaviour. The control algorithms that take the model of a system into account implicitly belong to a class of internal model control [35]. The model of a system can be used to make predictions about the system behaviour, and can though be used to determine the optimal control actions that take the system dynamics and constraints into account, the approach known as predictive control[36–38]. Over the years many different predictive control algorithms have been developed: generalized predictive control (GPC) [39], model algorithmic control (MAC) [40], predictive functional control (PFC) [41], model-based predictive control (MPC) [42], etc. Predictive controllers were originally designed for linear systems, but the idea has since been extended to non-linear systems. Many different fuzzy-control approaches have been proposed: predictive functional control based on a fuzzy model [43,44], fuzzy model-based predictive control (FMBPC) [45], etc.Historically, the main emphasis in system-control design has been on the feedback loop; however, recently, the research interest in feedforward control has been growing [46–49]. A feedforward controller alone can never achieve an accurate tracking performance, but with the addition of a feedback extension this deficiency can be eliminated. The combination of feedforward and feedback control loops is known as two degrees-of-freedom (2 DOF) control [35]. The feedforward part should provide a fast reaction to reference changes and drive the output into the vicinity of the reference. The feedback part should eliminate the reference tracking errors that occur due to disturbances, drift, noise, imprecise system modelling, etc. The idea of 2 DOF control has, in recent years, received a lot of attention in the control community. The 2 DOF control structure was proposed for a class of integral processes [50], a class of MIMO non-linear systems [51], a class of hybrid systems [46], among others. The 2 DOF control approach was successfully implemented in a diverse range of applications: trajectory tracking [52–54], swing-up of the double pendulum on a cart [55], locomotion control of a hydraulically actuated hexapod robot [56], motion of a magnetic suspension positioning stage [57], control of a fire-rescue turntable ladder [58], temperature control of industrial refineries furnaces [59], temperature control in a batch reactor [46], etc.One of the goals of the paper is to present the usefulness of the evolving fuzzy modelling for solving the control problems. In this paper we present a 2 DOF fuzzy control design that is self-tuned based on fuzzy model of the system. This means that the control structure and parameters are determined implicitly based on the given fuzzy model of the system. Therefore, self-tuning can be achieved. Another goal is to achieve set-point invariant reference tracking. In this paper we consider that both parts of the 2 DOF controller are designed based on the (inverse) Takagi-Sugeno fuzzy model. The feedback part of the control algorithm is designed in the model predictive scheme based on the fuzzy model. The control algorithm is developed for SISO non-linear systems. We also present the evolving mechanisms for adding, removing, merging and splitting the clusters in the evolving fuzzy model.The outline of the paper is as follows. Section 2 presents a fuzzy model in T-S form, and Section 3 describes the method of evolving fuzzy modelling. This is followed by Section 4, which presents the 2 DOF control scheme. Section 5 gives a description and mathematical modelling of a helio-crane system, the system that was used for evaluation of the presented control algorithm. Section 6 presents experimental results made in simulation environment and on real system, and gives a comparison of the proposed control algorithm to a fuzzy predictive functional controller. Afterwards, a discussion on the results is given in Section 7 and finally, Section 8 concludes the paper with some ideas for future development.In this section the notation used to describe a fuzzy system is presented. An arbitrary system can be described with a set of K fuzzy rules{Rj}j=1,…,Kin Takagi-Sugeno fuzzy form, where the ruleRjis defined as:(1)IFy(k−n+1)isAnjAND…ANDy(k)isA1j,THENy(k+1)=fj(u(k−m+1),…,u(k),y(k−n+1),…,y(k)).The antecedents of the rules (IF parts) describe the fuzzy regions in the space of input variables. For the description of the input-output dynamics in THEN parts of the rules (consequences) the nonlinear auto regressive model with exogenous inputs (NARX) is selected, but any other model could be used as well. The NARX model predicts the next output based on the past inputs and outputs. Furthermore, we assume that every THEN part of each fuzzy rule can be approximated with an affine NARX model:(2)fj(k)=θjTψ(k),whereθjT=[rjbm,j…b1,jan,j…a1,j]contains all the parameters that apply to the ruleRj. In the vectorψT(k)=[1 u(k−m+1)… u(k) y(k−n+1)…y(k)] the past inputs and outputs are gathered.The predicted output of a fuzzy model can be given in a compact matrix form as follows:(3)y(k+1)=βT(k)ΘTψ(k),whereβT(k) represents the normalized degrees of fulfillment for the whole set of fuzzy rules{Rj}j=1,2,…,Kin the current time step, written in the vector formβT(k)=[β1(k) β2(k)…βK(k)]. We assume the normalized degrees of fulfillment, which are generally time dependent, comply with Eq. (4) for every time step k.(4)∑j=1Kβj(k)=1In Eq. (3) the matrixΘ∈ℝ1+m+n×ℝKcontains all the parameters of the fuzzy model for the whole set of rules{Rj}j=1,2,…,K:Θ=[θ1θ2 …θK].The evolving fuzzy model is based on recursive Gustafson-Kessel clustering. The algorithm starts with one cluster and adds clusters if necessary. The first data sample is taken as an initial center of the first cluster. The method considers two different regression vectors. One is for clustering (xf) (clustering data vector) and the other is for local model-parameter estimation (xk) (the regression vector). The y in the following equations denotes the output of the process.To cluster the input-output space the positions of the cluster centers and the variance of the data around the clusters should be calculated. Using the fuzzy c-means recursive algorithm this can be done using the following equations. First, the change of the center position is calculated as:(5)Δvi(k+1)=μik+1ηxf(k+1)−vi(k)si(k+1),wherevi(k)is the center position for the previous sample,xf(k+1) is the current clustering data vector and si(k+1) is the sum of the past membership degrees calculated as:(6)si(k+1)=γvsi(k)+μik+1η.The initial si(0) is usually set to one. With the initialization of si(0) to a higher value, the initial speed of adaptation slows down. Theγv∈[01]is the forgetting factor (value of one turns off forgetting and values lower than one increase the forgetfulness). The forgetting factor can be set using the rule of thumb Eq. (21). The centers are then moved forΔvi(k+1):(7)vi(k+1)=vi(k)+Δvi(k+1),i=1,…,c.The index i is the index of the cluster and c is the number of clusters. The membership μik+1 of the current clustering vectorxfis calculated as:(8)μik+1=1∑j=1cdik+1djk+12η−1,where dik+1 is the distance of the clustering vector to the ith cluster and η is the fuzziness (in most cases η=2). The distance is defined as:(9)dik+12=xf(k+1)−vi(k)TAixf(k+1)−vi(k),whereAidepends on the distance that we use. For the Euclidean distanceAiis the unit matrix (fuzzy c-means algorithm), and using the Mahanalobis distanceAiis equal to the inverse fuzzy covariance matrix. For the distance used with the GK clustering algorithm theAiis equal to the fuzzy inverse matrix and the determinant:(10)Ai=ρidet(Fi)1/zFi−1,where ρiis usually set to a value of one and z is the number of variables (number of elements ofxf).The fuzzy covariance is calculated using the following equation:(11)Fi(k+1)=γcsi(k)si(k+1)Fi(k)+μik+1ηsi(k+1)DFi,(12)DFi=xf(k+1)−vi(k+1)xf(k+1)−vi(k+1)T.When using the GK clustering algorithm there is a need for a calculation of the recursive inverse fuzzy covariance matrix and the determinant. The equation for the inverse fuzzy variance matrix is the following:(13)Fi(k+1)−1=1γcsi(k+1)si(k)Fi(k)−1−BC,(14)B=Fi(k)−1DFiFi(k)−1,(15)C=γcsi(k)μik+1η+dFiTFi(k)−1dFi,(16)dFi=xf(k+1)−vi(k+1).The equation for the recursive determinant calculation is given as:(17)detFi(k+1)=γcsi(k)si(k+1)zdetFi(k)1+A,(18)A=1γcμik+1ηsi(k)dFiTFi(k)−1dFi,where z is the number of elements of the clustering vector. A more detailed derivation of these equations can be found in [33].Once the clusters are updated the fuzzy recursive least squares are used to update the linear local models parameters. There are different algorithms proposed [60,6,30,61], and these are based on weighted recursive least squares. The equation for adaptation based on [61] are:(19)ψi(k+1)=[1,xk(k+1)T]T,y(k+1)=y(k+1),(20)Pi(k+1)=1λrPi(k)−βiPi(k)ψi(k+1)ψiT(k+1)Pi(k)λr+βiψiT(k+1)Pi(k)ψi(k+1),θi(k+1)=θi(k)+Pi(k)βiψi(k+1)y(k+1)−ψiT(k+1)θi(k).The parameters of the ith sub-models are denoted as θi, the forgetting factor is denoted with λrand βidenotes the membership degree of the current clustering vector to the ith cluster. For setting the forgetting factor λrone can use the rule of thumb presented in [62]:(21)λ=1−2N,where N is the number of samples that have an influence on estimation. The same rule can be used for setting the forgetting factors for the clustering algorithm γcandγv. It was found that setting γcequal toγvgives more true approximation of fuzzy covariance matrix. For βithe membership degrees that are calculated during the cluster update can be used. However, in general they do not have a smooth transition. When identifying a process with a smooth nonlinearity it is better to recalculate the membership degrees using a Gaussian function. For this we can use radial base functions:(22)μij=e−dij22ηmσij2,where dijis the distance between the jth component of the ith cluster and the jth component of the clustering data vector:(23)dij2=xfj−vij2,σij2is the jth diagonal element of the fuzzy covariance matrix and ηmis the overlapping factor (set between 0.25 to 1). The membership degree βiis calculated as a product of the membership degree of each component:(24)βi=∏j=1zμij,where z is the number of components of the clustering vectorxf. Note that these membership degrees βishould be normalized as in Eq. (4). The settings for the parameters are given in [34] and [33]. For the fine tuning of the local model parameters the concept of instrumental variables can be used, as presented in [61].(25)Pi(k+1)=1λrPi(k)−βiPi(k)ψmi(k+1)ψiT(k+1)Pi(k)λr+βiψiT(k+1)Pi(k)ψmi(k+1),θi(k+1)=θi(k)+Pi(k)βmiψmi(k+1)y(k+1)−ψiT(k+1)θi(k),whereψmi(k+1)is the regression vector, where the delayed process outputs (y) are replaced by the delayed model outputs (ym):ψmi(k+1)=[1u(k−m+1)…u(k)ym(k−n+1)…ym(k)]T. Theβmiare the membership degrees of the clustering vector, where the delayed process outputs are replaced by the delayed model outputs in the same way as with the regression vector.The above equations represent the adaptation algorithm of the eFuMo method. To achieve the evolving nature of the method the mechanisms for adding, removing, splitting and merging the clusters must be included. Also, a condition is added to prevent the moving of clusters to which the membership degree of the current clustering vector is lower than a certain threshold (the beta-cut condition). This threshold is set somewhere between 0.1 and 0.3. The evolving mechanisms are briefly described in the following subsections.The adding of clusters is usually done by some distance measure of the current clustering vector to existing clusters or by membership degree. If a current sample has a low membership degree a new cluster is added with the center in the current clustering vector. The eFuMo adding criterion is based on the normalized distance of the current clustering vector to the existing clusters. In general, different distances can be used. In our case we used the normalized Euclidean distance for each component of the clustering vector. The normalized distance is defined as:(26)dijnorm=dijknfijj,dij=|xfj−vij|,where i is the index of the closest cluster and j is the index of the component. The normalization constant knis user defined and is, in general, set to 2 andfijjis the jth diagonal element of ith cluster's fuzzy covariance matrix. In our case the normalized distances were then summed together:(27)Dsum=∑j=1zdijnorm.A new cluster can be added if the value of Dsumis greater than z, where z is the number of clustering-vector components.To prevent the adding of clusters based on outliers an additional condition [63] was introduced. For the cluster to be added at least N consecutive samples must satisfy the distance adding condition. The number N is normally set from 3 to 10, depending on the data. This condition lowers the possibility of adding the cluster based on outliers.The new cluster center is positioned at the current clustering vector. The fuzzy covariance matrix is initialized as a diagonal matrix where the distances to the closest cluster are considered. The diagonal elements are defined as:(28)fnewjj=−dij22ln(ϵβ),where ϵβis a user-defined constant that is normally set to 0.15. If the distance dijis smaller than the standard deviation (fijj), then a diagonal element is equal to the diagonal element of the closest cluster (fnewjj=fijj). In the same manner an initial fuzzy covariance for the first cluster can be set by considering the expected number of clusters and data range. Next, the parameters of a new local model can be initialized using a weighted mean:(29)θi+1j=∑i=1cωijθij∑i=1cωijwhere i is the index of the cluster and j is the parameter index. The weightsωijcan be equal to the normalized membership degrees of the other clusters or combined with the variance of the parameters:(30)ωij=βi1σPijj2,whereσPijj2is the jth diagonal element of the least-squares covariance matrix of the ith cluster. The index c defines the number of cluster that satisfy the beta-cut condition.The removing of clusters in our case is based on their support. Two conditions were implemented. The first one is minimal existence condition. This condition is implemented to remove the clusters, that were added based on outliers. In order for the cluster to stay in the structure it must gather a certain amount of support samples Nstrhafter a certain period after its creation kdelay. The Nstrhis usually set to 15 and kdelayto 5 [10]. The support Nsiis usually defined as the number of samples that have the maximum membership of a certain cluster. The second condition is based on cluster's support/age coefficient (Sn). The condition is meant to remove old clusters, that are no longer valid, from the structure. The cluster is removed if its support normalized with its age is lower than a fraction of the mean support/age coefficients. The age aiis defined as the number of samples from the creation kiand the current sample k:(31)ai=k−ki,(32)Sni=Nsiai.Both conditions for removing can be written as:(33)IFSni<ɛmeani=1,…,c(Sni)ORNsi<NstrhANDk>ki+kdelay,THENremoveithcluster,whereSniis the ith cluster's support/age coefficient,meani=1,…,c(Sni)is the mean value of support/age coefficient of all clusters and ɛ is the user defined constant lower than one (usually 0.1).The merging algorithm is meant to merge the clusters that are either close or have the same local model parameters. The eFuMo method considers merging based on the membership degrees of clusters to each other [30] (unsupervised) and merging based on the correlation method [12] (supervised).In eFuMo the unsupervised merging is based on a normalized Mahanalobis distance:(34)diknorm=((vk−vi)TFi−1(vk−vi))0.5(dfinormTFi−1dfinorm)0.5,(35)dfinorm=fi11fi22…fizzT.The clusters are merged if the distancesdiknormanddkinormare below a threshold kdand the ratio between the distances is lower than the threshold kr.(36)IFdiknorm<kdANDdkinorm<kdAND|1−diknormdkinorm|<kr,THENmergeithandkthcluster.The threshold kdis defined based on the allowed maximum membership degree ɛβof the kth cluster to the ith cluster and vice versa:(37)kd=−2ln(ɛβ).The krshould be set to around 0.1 and the ɛβto around 0.85. This rule only merges close clusters.In general, the clusters can be further apart, but still have the same shape and the parameters of the local model. To merge these kinds of clusters the supervised merging algorithm is used. A correlation between the past membership degrees (Cbetaik) of the clustering vectors is monitored, as in [12]. If the correlation is higher than a threshold value (usually 0.9), the clusters are considered for merging. This condition is combined with the condition of the angles between the parameters (ϕik) and support for the clusters from the time of the last change in the structure (Nsli). This means that each time some of the evolving mechanisms change the number of clusters the correlation value and the support Nsliare reset. The two clusters are merged if they have Nslilarger than a user defined threshold, the angles between the local models parameters are small and there are no other clusters between them. The angles of local models are calculated differently as in [12]. Using the angle condition as presented in [12] we found that in many cases clusters, that do not have similar parameters are often merged together. Therefore we implemented a different version of the condition. First the algorithm searches all local models for the absolute maximal value of each local model's parameter. The parameters of the two local models that are considered for merging are normalized and the angle difference is calculated for each parameter.(38)αj=|arctan(θnkj)−arctan(θnij)|,where k and i are the indexes of the two clusters considered for merging, j is the index of the parameter and θnis the normalized parameter. If angle differences αjfor all parameters are below the user defined threshold (usually 2 degrees), the clusters are merged together.The initialization of a new cluster position and variance is made as suggested in [30].The splitting of clusters is currently meant to fine tune the fuzzy model. It can add clusters in the input-output space where the output-model error is higher than a predefined threshold. The eFuMo method tracks the mean error for each cluster. For each sample, if the sample does not satisfy the distance condition for adding, the output error of the current model is calculated. Then the model error is divided among the clusters, depending on the membership degrees of the current clustering sample. If the error of one of the clusters exceeds the defined threshold, this cluster is split. The parameters of the model stay the same, and the centers of the clusters are positioned based on a fuzzy-covariance matrix. The new positions are calculated as:(39)vi1=vi+dfinorm,vi2=vi+dfinorm.This approach to initialization is also presented in [64]. Initialization can also be based on the eigenvectors of the fuzzy covariance matrix [65]. This fuzzy covariance matrix is divided by two, and the threshold is time decaying. The user specifies the maximum and minimum values and the decay constant for the threshold, the same as in [23]. The error is set to zero when the number of clusters changes.The eFuMo method also considers a general time delay (τ) for the evolving mechanisms. This delay is user specified. If a change in the number of clusters occurs, the evolving mechanisms are stopped for this specified delay. The scheme of the algorithm is shown in Fig. 1.The main goal of the presented control algorithm is to provide precise error-free reference-signal tracking. The control structure is designed in a way that all the system dependent parameters of the control algorithm can be obtained from the fuzzy model of the system. Since the fuzzy model can be obtained with the identification algorithm presented in Section 3, the control algorithm is considered to be self-tuned. The control structure uses a two degree-of-freedom concept: a combination of feedforward and feedback loops; and fuzzy model is used in the design of both control loops. An overview of the control structure in depicted in Fig. 2. Once the fuzzy model of the system is identified, it can be fed to the controller and the controller can be switched on. The identification is made on the open-loop system, and once the controller is switched on the identification is switched off, and the evolving fuzzy model is frozen.To implement a feedforward reference tracking controller the inverse model of the system needs to be known. The derivation of an inverse model may not be an easy task and the solution may not even be feasible. In this section we present a summary of an approach to the inversion of a T-S fuzzy model introduced by Karer et al. [46].First, we break apart the matrix of model parametersΘT=[θrΘuTθu,1ΘyT]and the regression vectorψT(k)=[1ψuT(k)u(k)ψyT(k)]of a fuzzy model Eq. (3), whereθr∈ℝK,Θu∈ℝm−1×ℝK,θu,1∈ℝK,Θy∈ℝn×ℝKandψu∈ℝm−1,ψy∈ℝn. Notice the slight abuse of notation, sinceθin this section does not correspond to theθdefined in Section 2. In the new extended notation the fuzzy system Eq. (3) is rewritten as:(40)y(k+1)=βT(k)θr+ΘuTψu(k)+θu,1u(k)+ΘyTψy(k).We assume the model Eq. (40) is capable of following the reference signal. Then, there should exist a time-serie of feedforward inputs uF(k) that achieves an error-free reference signal tracking of the model y(k)=r(k) for all the k>0. If we substitute in Eq. (40) all the outputs y for the appropriate reference values r and all the inputs u for the previous feedforward inputs uF, then the feedforward input uF(k) can be calculated:(41)uF(k)=r(k+1)−βrT(k)(θr+ΘuTψuF(k)+ΘyTψr(k))βrT(k)θu,1,whereψuFT(k)=[uF(k−m+1)…uF(k−1)]andψrT(k)=[r(k−n+1)…r(k)]. We have denoted the fulfillment vector with a subscript r to emphasis that the vector belongs to the model of the reference signal. The feedforward input uF(k) does not depend on the system measurements, but only on the undisturbed reference signal and previous feedforward inputs. The fulfillment vectorβr(k) is calculated based on the reference signal.The Eq. (41) clearly violates the causality constraint, since the optimum input in time-step k is dependent on the future reference signal at time step k+1. This means that the feedforward control has an inherent delay of one sample time.An important role in the calculation of the feedforward input uF(k) is played by the shape of the reference signal r. It should be noted that some reference signals (too frequency rich) may push the solution of the system Eq. (41) outside the area of physically feasible solutions (e.g., an infinite input impulse). To overcome this problem, the reference signal must be chosen carefully. It is recommended that some kind of filtering is considered in order to suppress the high frequencies in the reference signal. When selecting the filter cut-off frequency we can take into account the system dynamics and the upper and lower signal bounds of the input signal.Although the fuzzy model may be stable and invertible, the inverse of the fuzzy model could become unstable. The happens when the model has non-minimum phase. As a consequence, the system cannot be driven to the desired state by the feedforward controller alone. Naturally, the feedforward control cannot be implemented on inherently unstable systems. Therefore, in a case of unstable and non-minimum phase systems the feedforward control approach is not suitable. The feedforward approach could still be used on unstable systems, but the system must further be enclosed in a closed loop that is responsible for ensuring system stability. Note, that the feedback controller should be able to take the feedforward actions into account when determining the feedback corrections.In a 2 DOF control design, the control action is a sum of the feedforward and feedback signals, u(k)=uF(k)+(−uB(k)). Here, we make an assumption that the fulfillment vectors of the reference signal and system model are equalβr(k)=β(k) for all the steps k>0. This means that we do the clustering either on the reference signal or on the system output for the calculation of the feedforward and feedback actions. Substituting Eq. (41) into Eq. (40) the following relation can be expressed:(42)e(k+1)=βT(k)ΘuTψuB(k)+θu,1uB(k)+ΘyTψe(k),where we have introduced new variables: the predicted error e(k+1)=r(k+1)−y(k+1), the vector of the past feedback actionsψuB(k)=ψuF(k)−ψu(k)and the vector of the past errorsψe(k)=ψr(k)−ψy(k). The fuzzy error-model Eq. (42) can be transformed into a time-varying state-space form:(43)xe(k+1)=Ae(k)xe(k)+be(k)uB(k),e(k)=ceT(k)xe(k).We can conclude that the dynamic behaviour of the feedback controller depends on the dynamics of the system model. When transforming the fuzzy error model into the state-space error model, the selection of the state-space variables should be according to the following scheme:(44)xe(k)=e(k)e(k)−e(k−1)e(k)−2e(k−1)+e(k−2)⋮uB(k−1)uB(k−1)−uB(k−2)uB(k−1)−2uB(k−2)+uB(k−3)⋮,where every element inxe∈ℝn+m−1except for the first and the (n+1)th is calculated as a difference of the previous element at two consecutive past time steps.To ensure the integral action of the controller, an additional state-space variablevis introduced that integrates the output errorv(k+1)=e(k)+v(k). Augmenting the state-space vector with the new variableϵT(k)=[xeT(k)v(k)], the extended system can be written as:(45)ϵ(k+1)=Ae(k)0ceT(k)1ϵ(k)+be(k)0uB(k)=A(k)ϵ(k)+b(k)uB(k),whereA∈ℝN×ℝN,b∈ℝN, N=n+m.The error model Eq. (45) is used in the development of the predictive feedback control. In order to obtain the optimal control algorithm, we define a criterion function that penalizes the error and control action on a finite prediction horizonh∈ℕ:(46)J(uB)=∑i=1hξT(k+i|k)Qξ(k+i|k)+RuB2(k+i−1|k),where we have introducedξ(k+i|k)=ϵr(k+i|k)−ϵ(k+i|k) as the difference between the reference errorϵrT(k+i|k)and the predicted errorϵ(k+i|k) for all the i∈{1, 2, …, h} time-steps ahead of the current time-step k. In Eq. (46), theQ∈ℝN×ℝNandR∈ℝ, andxTQx≥0 for everyx∈ℝN, and R≥0. The development of the control law by minimization of the cost function Eq. (46) has previously been shown in [53]. Here, we give a summary of the approach that is rewritten for the SISO systems.Using the model Eq. (45) we can make a prediction of the errorϵ(k+i|k) as a function of the current errorϵ(k) and the unknown feedback inputs uB(k+i−1|k) for i=1, …, h:(47)ϵ(k+i|k)=Λi,0(k)ϵ(k)+∑j=1iΛi,j(k)b(k+j−1|k)uB(k+j−1|k),where we have definedΛi,j(k)=A(k+i−1|k)…A(k+j+1|k)A(k+j|k). It should be noted thatΛi,j(k)=Ifor all the j≥i, whereIis the unity matrix. All the predicted states can be gathered in an augmented vectorϵ¯T(k+1)=[ϵT(k+1|k)ϵT(k+2|k)…ϵT(k+h|k)], and all the future inputs in another augmented vectoru¯BT(k)=[uB(k|k)uB(k+1|k)…uB(k+h−1|k)]. Now, the following extended system can be written:(48)ϵ¯(k+1)=A¯(k)ϵ(k)+B¯(k)u¯B(k),where the matrixA¯(k)∈ℝhN×ℝNis defined as:(49)A¯T(k)=Λ1,0T(k)Λ2,0T(k)…Λh,0T(k)and the matrixB¯(k)∈ℝhN×ℝhis defined as:(50)B¯(k)=b(k|k)0…0Λ2,1(k)b(k|k)b(k+1|k)…0⋮⋮⋱⋮Λh,1(k)b(k|k)Λh,2(k)b(k+1|k)…b(k+h−1|k).The cost function Eq. (46) can be rewritten in a more compact form:(51)J(u¯B)=ξ¯T(k+1)Q¯ξ¯(k+1)+u¯BT(k)R¯u¯B(k),where we have introducedξ¯(k+1)=ϵ¯r(k+1)−ϵ¯(k+1)as the difference between the reference errorϵ¯rT(k+1)=[ϵrT(k+1|k)ϵrT(k+2|k)…ϵrT(k+h|k)]and the predicted errorϵ¯T(k+1)on the prediction horizon h. The weight matrices are given asQ¯=oplusi=1hQandR¯=oplusi=1hR, and are both required to be positive semi-definite. The operator oplusi(·) denotes the direct matrix sum.The reference error is usually defined as an exponentially decreasing function in the form of a state-space model:ϵr(k+i|k)=Ariϵ(k)for i∈{1, 2, …, h}. The model of the reference error on the entire prediction horizon h is thenϵ¯(k+1)=A¯r(k)ϵ(k), where a new augmented matrix has been introduced:(52)A¯rT(k)=ArT(k)Ar2(k)T…Arh(k)T.To obtain the optimum control law, we need to find the minimum of the objective function Eq. (51):(53)∂J(u¯B)∂u¯B=−2B¯TQ¯A¯r−A¯ϵ+2B¯TQ¯B¯+R¯u¯B=0.From the Eq. (53) the optimum control inputs are obtained:(54)u¯B,opt.(k)=B¯T(k)Q¯B¯(k)+R¯−1B¯T(k)Q¯A¯r(k)−A¯(k)ϵ(k).Since the term in the last parentheses in Eq. (53) is positive semi-definite, the obtained control input Eq. (54) is at the minimum of the objective function Eq. (51), and therefore really the optimum control input. According to the receding horizon strategy, at the time step k only theuB,opt.(k|k)=[10…0]u¯B,opt.(k)is added to the feedforward input signal uF(k), and, in spirit of the predictive control, during the next time step the whole procedure is repeated again.The control algorithm can be tuned with several different parameters. The weight matrixQand scalar R determine how strictly should the predicted error follow the desired reference error and how energy rich input signal is allowed, respectively. The controller can also be tuned by selecting the error reference modelArand the length of the prediction horizon h. These parameters define the desired response dynamics and power consumption.The presented control algorithm takes the system dynamics into account inherently, in terms of the given fuzzy model. Since the model of the system is obtained by identification of evolving fuzzy model, the control approach is considered to be self-tuned. The other tunable parameters presented in the paragraph above determine the desired goals of the control algorithm, and are relatively easy to tune. When the system goes through the input-output space, these additional parameters do not need to be changed and still the behaviour of the closed-loop system should stay the same regardless of the operating point. This means that even when we are dealing with non-linear systems, the closed-loop response should be invariant to the operating point, provided a good enough model of the plant is available.The stability study of fuzzy systems is a difficult task. Even if the fuzzy model has locally asymptotically stable subsystems, the system can be still globally unstable [66]. The presented control algorithm can achieve stable closed-loop response only on a certain class of non-linear SISO systems. The approach was designed to be used on non-linear SISO systems with simple dynamics. The system can be inherently unstable, but it must not have non-minimum phase, or else some additional measures must be taken to achieve stable behaviour. In a case of non-minimum phase system, the fuzzy model of the system used in the feedforward loop must be converted to appropriate minimum-phase system, otherwise the closed-loop system becomes unstable. This is only a necessary condition for closed loop stability and appropriate system behaviour. Although, the stability of the closed loop could be checked with the method of linear matrix inequalities (LMI) as in [67], this is not a simple task, since a complex set of equations has to solved. Furthermore, if the set of conditions for stability cannot be solved, the system could still be stable, since the approach of LMI only gives sufficient conditions for stability.The system that was chosen for the evaluation of the fuzzy-control algorithm is composed of a rigid metal rod on a pivot that can swing in a single vertical plane like a pendulum (Fig. 3). The swing of one end of the rod is physically restricted to a vertical half-plane, so the ends of the rod can freely move up and down. At the end of one end of the swinging rod a motor with a lightweight plastic propeller is placed perpendicular to the rod, so the rod can be raised or lowered by changing the propeller's thrust Fm. When the motor is not turned on, the end of the rod with the motor is at the bottom position. The motor can only rotate in one direction, so the thrust always points in the same direction with respect to the motor. However, applying some thrust to the motor can only raise the rod, and the rod is lowered passively by gravitational force. To the main rod some additional weights are attached that influence the behaviour of the system. The interaction with the system is made through an additional electronic circuit. The speed of the motor (system input) is voltage controlled in the range from 0V to 10V. The inclination of the rod (system output) is measured with a resistive sensor for measuring the angle that returns the voltage, also in range from 0V to 10V. Since the system is composed of a motor with a propeller, like the one in a helicopter, mounted on a swinging rod, which can lift a weight like a crane, the system name was coined helio-crane.The system can be mathematically modelled by writing down the basic physics equation for rotating objects:(55)Jφ¨=T(φ)−fφ˙,where φ is the inclination of the rod, T is the sum of all torques on the system, J is the moment of inertia and f is the damping factor. The moment of inertia J can be determined from the physical dimensions of the helio-crane, applying some basic knowledge for the calculation of the partial moments of inertia. According to Fig. 3, the moment of inertia J is:(56)J=ρd(13l1(r12−r1r2+r22)+l2(l223+r22))+mmlm2+mu1lu12+mu2lu22and the torque T is:(57)T=Fmlm+gsin(φ)(ρd(r222−r122)+mu1lu1−mmlm)++ρdl2dgsin(φ+ψ1)+mu2glu2sin(φ+ψ2),wherel2d=l2l224+r22,tanψ1=l22r2andtanψ2=l2+Δl2r2. The variables r1, r2, l1, l2, Δl2, lu1, lu2, lmrepresent the lengths as denoted in Fig. 3; mm, mu1 and mu2 are the masses of the motor and the two weights, respectively; g is the gravitational acceleration; and ρdis the linear mass density of the rods. The damping factor f can be heuristically determined and is defined in Table 1(a), where all the other model parameters are also gathered. The output characteristic function y=fy(φ) is approximately linear (Table 1(c)), but the input characteristic function Fm=fu(u) is highly non-linear (Table 1(b)). We can conclude that the helio-crane is a SISO non-linear system with second-order dynamics, as Eq. (55) suggests.The model describing the system, Eq. (55), can be linearised around some operating point (OP). We would like to obtain a linear mapping for different operating points between the input actuator voltage u and the output sensor voltage y. The system Eq. (55) can be rewritten into a non-linear state-space form(58)x˙(t)=F(x(t),u(t)),y(t)=H(x(t),u(t)),wherex=[x1x2]Tdenotes the internal states, which we choose to be x1=φ andx2=φ˙. The linearised state-space model is obtained by Taylor expansion of Eq. (58), where all the terms higher than the first order are omitted:(59)Δx˙(t)=01b1Jcos(x1)−b2Jsin(x1)−fJOPΔx(t)+0lmJ∂fu∂uOPΔu(t),Δy(t)=∂fy∂x10OPΔx(t),where we have introduced two new variablesb1=g(ρd(r22−r122+l2dcos(ψ1))+mu1lu1−mmlm+mu2lu2cos(ψ2))and b2=g(ρdl2dsin(ψ1)+gmu2lu2sin(ψ2)).Note that our approach does not require mathematical modelling of the system, since the model required for the controller is obtained by identification of the evolving fuzzy model. The derived analytical model will be used for validation of the presented identification algorithm.

@&#CONCLUSIONS@&#
