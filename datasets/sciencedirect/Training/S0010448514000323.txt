@&#MAIN-TITLE@&#
A multipoint method for 5-axis machining of triangulated surface models

@&#HIGHLIGHTS@&#
We give a method for positioning a radiused end milled cutter on an STL surface.Tool is positioned to have two points of contact.We give simulation and machining results.

@&#KEYPHRASES@&#
CNC machining,5-axis machining,Multipoint machining,STL,

@&#ABSTRACT@&#
In this paper, we present a multipoint machining method for the 5-axis machining of triangulated surfaces with radiused end mills. The main idea is to drop the tool onto the surface to find an initial point of contact, and then rotate the tool while maintaining tangency with this initial point of contact until a second point of contact is found. The proposed procedure ensures a gouge-free position with two points of contact, allowing for a larger side step than a single point of contact method. This proof of concept paper presents the mathematical equations that must be solved to position the tool with two points of contacts on an STL surface. The paper further verifies the concept with simulations and presents experimental results to confirm the simulations.

@&#INTRODUCTION@&#
The Stereo Lithography (STL) format describes engineering parts as a set of triangles and includes the vertices and normal of the facets. Industry users like this format because it simplifies data transfer, input into analysis algorithms, creation of 3D printed models, algorithms such as tool path planning and positioning and provides desired accuracy in parts made using triangulated models  [1–9]. Most Computer-Aided Design (CAD) packages can output part design in the STL format. Furthermore, most Computer Aided Machining (CAM) packages can accept the STL format as input for tool path planning  [1–9].The process of machining a triangulated model within a CAM package consists of selecting a tool; identifying a tool path footprint; and determining the tool position and orientation.The three types of tools commonly used in industry are ball-nosed end mill; flat end mill and radius end mill. A ball-nosed end mill has a simple geometry that lends itself to easy calculation of tool positioning. Ball-nosed end mills are commonly used for machining dies, molds and precision parts with curved surfaces. The drawback in using ball-nose end mills is that the cutting properties at the bottom of the tool are poor  [1,5]. Flat end mills have good cutting properties along the entire edge; however, tool path planning presents a challenge especially at the apex of a curved section of the part and in positioning of the tool for 5-axis machining of curved surfaces  [2,4–8]. Radius end mills are a generalization of both ball-nose and flat end mills. Although positioning the radius end mill for 5-axis machining is a challenging task, it provides a smooth surface finish much like a ball-nose end mill and has excellent cutting capability along its entire cutting edge  [1,3,9–15].A radiused end mill can be represented as a torus, the rotation of a circle of radiusRiaround a circle of radiusRO. Fig. 1shows a cross-section of a radius end mill. For our purposes, we are only interested in the cutting edges of the circle (shown by the dark arcs on the circles in Fig. 1(b)) and we will also think of the tool as having a flat bottom (shown by the dark, straight line across the bottom). Note ifRi=0then the radius end mill models a flat end mill, whereas ifRO=0it models a ball-nose end mill. In this paper, we propose a method for determination of exact positioning of a radiused end milled tool on the curved surface represented in the STL format for 5-axis machining applications.For identifying a tool path footprint in a region, typically a polyhedron to be machined is identified by the user. This region is projected onto a plane perpendicular to the tool axis (typically thez-axis). A pattern that describes the motion of the tool is developed within this plane. The pattern takes into account the surface finish required. Typical footprints are the zigzag pattern or the contour pattern. The focus of our work is tool positioning and so for simplicity we used the zigzag pattern within a rectangular region. The zigzag footprint is specified by two parameters, namely the feed forward step, and the side step as shown in Fig. 2.Once the footprint of the tool is defined it is discretized into small steps and at each point a gouge-free tool position is generated. The tool path comprises of the tool moving between consecutive tool positions along the tool path footprint. This method will also be used in our work.In this paper, a 5-axis method of positioning a radius end mill tangential to two points on a triangulated surface is presented. As a proof of concept, we generate tool paths for two different type of convex and concave STL surfaces that have been successfully machined on a DMU-80P 5-axis machine. The idea of our method is at each tool position, drop a radiused end mill tool onto the surface to find one point of contactPas shown in Fig. 4(a). The tool and the STL surface will touch tangentially at this point of contact (although “tangentially” is a somewhat loose term if the point of contact is on an edge or vertex of the STL surface). The point of contact will lie on a pseudo-insert of the tool, a circular cross-section of the torus shown in Fig. 4(b). We then rotate the tool around the vector through the center of this pseudo-insert and perpendicular to this pseudo-insert. This rotation will maintain the tangency between the tool and the STL surface atP. We rotate the tool until we find a second point of contactS, which will also be tangent to the STL surface. The result is a tool position that does not gouge the surface and is in contact with the STL surface at two points. The advantage of such a multipoint of contact tool positioning method is that it allows us to have a larger side step.

@&#CONCLUSIONS@&#
The drop and tilt method presented in this work can be used to position the tool on a triangulated surface with two points of contact using a radiused end milled tool for 5-axis machining. The method can handle multiple triangles, edges and vertices successfully, and the computed tool positions are gouge free. However, note that while a radiused end mill is a generalization of a ball-nose tool, in the case of a ball-nose tool our method will find only a single point of contact, since rotating around the pseudo-insert of a ball-nose tool (a sphere) does not change what is machined.Previous multipoint machining methods  [13] investigated cusp height. The observation from this earlier work is that the cusp profile for multipoint machining is W-shaped, which differs from the U-shaped cusp profile of 3-axis machining. Between the two contact points, the cusp height is small enough for most engineering applications, but the cusp rises sharply beyond the contact points. The impact this cusp shape is that a larger side step can be used while still meeting engineering tolerance requirements. While we have not investigated the cusp height for our method, we expect that it will be similar to that of this earlier work on multipoint machining.Xu et al.  [4] noted that drastic changes in tool orientation from point to point may increase machining time in certain cases. These changes in orientations manifest in the tool path planning phase. Tool path planning is not the focus of our work and further research is required to integrate our tool positioning method with a tool path planning algorithm to avoid these sharp motions.Our method rotates around the pseudo-insert. Alternate rotations are possible, but the optimal rotation likely depends on the particular goals of the machinist, such as minimizing cusp height, maximizing step forward, reducing cusp deviation. Optimizing for various goals is topic of future study.Finally, our method is based on solving linear/non-linear simultaneous equations. While these equations can readily be solved in Maple, the solution time is long and severely restricts the number of triangles that can be used. The STL file for an industrial part will have thousands or more triangles, and our Maple implementation would require hours to generated a tool path for such triangle set, an unacceptable amount of time in an industrial setting. Thus, stand-alone software using robust solvers are needed to make our method practical for industrial uses. A simple method for solving these equations is an open question.