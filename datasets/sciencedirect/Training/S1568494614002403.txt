@&#MAIN-TITLE@&#
Intelligent feedback linearization control of nonlinear electrohydraulic suspension systems using particle swarm optimization

@&#HIGHLIGHTS@&#
We design an active vehicle suspension system controller using computational intelligence technique.We compare the performance of this controller with the performance of passive, PID and non-optimized intelligent controllers.Robustness to parameter variations analysis is carried out in this paper.The proposed controller improved the vehicle ride comfort, road holding and disturbance rejection properties.

@&#KEYPHRASES@&#
Feedback linearization,Dynamic neural networks,Particle swarm optimization,Active vehicle suspension systems,Ride comfort,Road holding,

@&#ABSTRACT@&#
The core factors governing the performance of active vehicle suspension systems (AVSS) are the inherent trade-offs involving suspension travel, ride comfort, road holding and power consumption. In addition to this, robustness to parameter variations is an essential issue that affects the effectiveness of highly nonlinear electrohydraulic AVSS. Therefore, this paper proposes a nonlinear control approach using dynamic neural network (DNN)-based input–output feedback linearization (FBL) for a quarter-car AVSS. The gains of the proposed controllers and the weights of the DNNs are selected using particle swarm optimization (PSO) algorithm while addressing simultaneously the AVSS trade-offs. Robustness and effectiveness of the proposed controller were demonstrated through simulations.

@&#INTRODUCTION@&#
Vehicle suspensions are subsystems that aim to improve the performance of an automobile by isolating the vehicle from road-induced disturbances, improving passenger ride comfort, and enhancing the road holding performance of the vehicle. However, better ride comfort demands a softer suspension and superior road holding requires a stiffer suspension. The desire to manage these trade-offs has led to the development of active vehicle suspension systems (AVSS) which incorporates an actuator to deal with these compromises in real time [1].AVSS are highly nonlinear systems with complex actuator dynamics and need to be designed carefully to manage its sensitivity to parameter variations. Nonlinear AVSS have been successfully designed with linear controllers [1]. However, these controllers lack robustness when dealing with variations in vehicle speed, sprung mass and tyre load. On the contrary, nonlinear control schemes such as Fuzzy Logic Control (FLC), backstepping, FBL and neural network (NN)-based control have been able to deal with these issues more effectively [2–10]. In contrast to linear controllers, nonlinear control methods generate an input that aims to remove or significantly reduce the effects of nonlinearities in the system.The nonlinear AVSS model presented by Shi et al. [3] incorporated a servo-hydraulic system controlled by a combination of sliding mode and feedback linearization control methods. This effort and those of Yagiz and Sakman [2] and Chamseddine et al. [9] using sliding mode control were plagued with chattering challenges.Backstepping control has been performed by [4,5,10] for half-car and full-car models respectively. Their solutions showed a significant improvement over the passive vehicle suspension system (PVSS) and additionally provided an adequate bandwidth where they were able to reject a large range of road disturbances, which emphasizes the robustness of this control technique.However, these preceding control laws are fundamentally based on the mathematical models which have been chosen to be either linear or nonlinear. In the case of backstepping, highly nonlinear and realistic models would require rigorous interlaced backstepping which may in some cases prove impossible to solve. Furthermore, the associating zero-dynamics present in real models may be unstable under certain conditions. Furthermore, the systems may not be completely understood in reality and this would require the use of some model predictive controller to learn the dynamics of the plant.Intelligent nonlinear control seeks to emulate human logic as well as the brain. They do not require the mathematics of the system to be completely understood whilst developing a control law. FLC and NN-based control form part of this set and have been successfully implemented for AVSS designs to deal with robustness issues and to better manage AVSS trade-offs [13–25].Documented works in the literature have demonstrated that good AVSS performances can be achieved using FLC [24–26]. Combination of FLC with neural networks in AVSS applications has also shown remarkable improvements in the robustness of the controller designed. Rajeswari and Lakshmi [14], Lian [26], and Aldair and Wang [18] have proposed hybrid neuro-fuzzy controllers. They realized that the control structure performs better than a NN-based PID control architecture, which makes it more suitable for AVSS applications. Furthermore, there is no need to mathematically model the system since the NN can approximate it through the process of system identification.The accomplishments of FLC in AVSS have made it a suitable candidate for optimization algorithms. Chiou et al. [13], Rajeswari and Lakshmi [14], and Pekgökgöz et al. [25] used evolutionary algorithms to derive the membership functions of a FLC. This method was successful in improving either the body-heave acceleration or the suspension travel with larger success than a PID-controlled AVSS.With regards to the application of NN-based control to AVSS, intelligent controllers using multilayer NNs in system identification and control have improved the AVSS response as compared to the PVSS. Tang et al. [15] investigated the performance of a half-car AVSS that was controlled using a multilayer feedforward NN and genetic algorithm (GA). There was an improvement in the passenger's seat vertical response as compared to that of a PVSS. In terms of training a multilayer NN through PSO for AVSS, Alfi and Fateh [17] showed that this method performs better than the conventional NN training algorithms and GA-based training with quicker convergence speeds, improved accuracy, and had no premature convergence problem.Guclu and Gulez [27], and Aldair and Wang [18] utilized network inversion to control a full-car nonlinear AVSS with actuator dynamics. The NN-based controllers for each case displayed superior performance as compared to the PVSS. Eski and Yildirim [16] also used an adaptive multilayer NN to create a robust PID controller for a full-car model. The system displayed high identification and tracking capabilities as compared to offline supervised learning algorithms.Pedro et al. [21] designed a direct adaptive NN-based FBL controller for nonlinear quarter-car AVSS using radial basis function NN (RBFNN). However, the model did not contain any actuator dynamics and ignored zero dynamics that may exist as a result of FBL. The ride comfort and road holding improved as compared to the PVSS and PID-controlled AVSS. Pedro and Dahunsi [20] later utilized a multilayer feedforward NN to perform indirect adaptive control of a servo-hydraulic nonlinear AVSS using FBL. They considered subsequent zero dynamics and their resulting system displayed superior performance as compared to the case where linear controllers were used.DNN uses differential equation to model the neuron and contain feedback elements. DNN offers several benefits above static neural networks (radial basis function neural network (RBFNN) and multilayer perceptron neural network (MLPNN)) especially as regard computational efficiency. DNN has capacity to learn complex nonlinear systems especially when static neural networks fails to represent the model appropriately [30–32]. Application of DNN with PSO training is very rare, especially with respect to AVSS controller design. However, DNN has been used for various control systems: linear AVSS [23], semi-active suspension [22,33], evaporators [30,36], continuously stirred tank reactors (CSTR) [29,35] and flexible manipulators [37].Yildirim [23] successfully identified a linear AVSS using a recurrent neural network (RNN) and thereafter carried out network inversion to control the system. He achieved an improvement over the PVSS. Zapateiro et al. [22] performed recurrent neural network (RNN)-based backstepping control on a semi-active suspension that utilized a magnetorheological (MR) damper. Metered et al. [33] carried out network inversion on a MR-based semi-active suspension that was identified with a RNN.Becerikli et al. [34] presented a DNN to identify and control a CSTR. The system displayed adequate performance in the presence of a wide range of disturbances. The start-up and regulation problems of CSTR were resolved better with this configuration as compared to the currently employed control schemes for CSTR tanks.Al Seyab and Cao [35] created a DNN to identify and control a double CSTR plant. It was concluded that the DNN decreased the training time and improved the accuracy in the identification process as compared to conventional model predictive control configurations. Nanayakkarra et al. [36] successfully trained a DNN to identify an evaporator with the use of an evolutionary algorithm. The DNN outperformed the static NNs and required fewer neurons to learn the dynamics of the plant.Tian and Collins [37] designed a neuro-fuzzy controller for a flexible manipulator. The dynamics of the nonlinear model was learnt using a DNN. The identification results were satisfactory and this control method was superior to conventional industrial robots controllers. Deng et al. [28], Deng et al. [29] and Garces et al. [30] utilized DNN-based FBL for a variety of control systems. In each case, the network was trained using genetic algorithm and the response of the system displayed superior results as compared to conventional control architectures. Additionally they noticed that this control law can be implemented with linear control such as PID to improve system response.Both linear and nonlinear AVSS controllers have been optimized using heuristic search methods since they are effective methods in finding global minima. These methods are based on a random search methodology and do not require any function based methods to find the minimum. Such methods include PSO and GA. Wai et al. [12], Crews et al. [11], Chiou et al. [13], and Rajeswari and Lakshmi [14] optimized the gains of a single loop linear PID-based AVSS using PSO and GA techniques respectively. Pekgökgöz et al. [25] and Chiou et al. [13] optimized the membership functions and FLC control parameters using GA and PSO. The fitness function of these approaches incorporated sprung mass acceleration and body displacement. These optimal policies outperformed the manually tuned AVSS in terms of acceleration and body displacement at the expense of the actuation force.The major contribution of the paper is the demonstration of the impact of the combination of a PSO-optimized cascaded PID control with dynamic neural network (DNN)-based feedback linearization control. The weights of the DNN are chosen using PSO algorithm. Performance results for these controllers are presented for each controller when applied to a 2 degree-of-freedom (DOF) nonlinear electrohydraulic vehicle suspension system. These results are also compared with that of a controller that combines both schemes. The controller with combined controlled schemes is characterized with better performance for all the vehicle suspension performance parameters considered. The controller is also tested for robustness using response to parameter variation within the 20% range for speed, mass and tyre stiffness. The difference in the results obtained is marginal. Frequency domain analysis of the controllers are also presented within the whole-body-vibration range of 0–80Hz. The trend in performance is the same, corroborating the previous results and showing that all controllers attenuated vibration disturbance within the frequency range considered.The paper is organized as follows. In Active suspension system: overview and modelling section we present the active suspension system overview and mathematical modelling. Controller design section introduces the AVSS performance specifications followed by a brief description of the PID controller. PSO algorithm is also described in this section. Detailed description of the DNN-based system identification and FBL control are presented. Simulation results and discussion section presents both for deterministic and random disturbance inputs. Results for robustness analysis are also presented and discussed in this section. Finally, concluding remarks and recommendations for future work are given in Conclusion and future work section.A schematic of the quarter-car model used in this investigation is presented in Fig. 1. The mass of the wheel assembly is muand that of the chassis is ms. These two components are coupled through the suspension elements (spring ksand damper bs). In the case of AVSS, an actuator is placed in parallel with the suspension elements and supplies an actuator force Fawhich supports the PVSS components. The flexural nature of the wheel is captured by means of a spring with stiffness kt.Reference frames are created at the wheel, chassis and road surface withxw, xcandwdenoting the vertical movement of the wheel, vertical movement of the chassis and the road profile respectively. The associated velocity and accelerations of these bodies are represented asx˙andx¨, respectively.The governing equations of the system are derived by applying Newton's laws to both the wheel and chassis:(1)msx¨c=Fks+Fbs−Fa,(2)mux¨w=−Fks−Fbs+Fa+Fw,where Fksand Fbsare the respective spring and damping forces exerted by the suspension,Fwis the force produced by the road disturbance and Fais the actuator force. It is assumed that the wheel and suspension elements compress such thatw>xwandxw>xc.Both the spring and damping forces are functions of the suspension travel(xw−xc)and suspension travel velocity(x˙w−x˙c), respectively. The suspension components have linear, symmetric and nonlinear elements which are fundamentally a function of the suspension travel and its velocity and are described as follows [20]:(3)Fs=ksl(xw−xc)+ksnl(xw−xc)3,(4)Fb=bsl(x˙w−x˙c)+bsnl|x˙w−x˙c|sgn(x˙w−x˙c)−bssym|x˙w−x˙c|,wherekslandbslare the linear spring stiffness and linear damping constant of the suspension system,ksnlandbsnlare the corresponding nonlinear spring stiffness and damping constant of the suspension system, andbssymis the associating symmetric damping constant. The elastic behaviour of the tyre is assumed linear and the force produced due to its interaction with the road is:(5)Fw=kt(w−xw),where(w−xw)is the deflection of the tyre.The actuator force Fais manipulated through an electrohydraulic servo-valve which aims to return the system to rest after the vehicle is disturbed by the road disturbance. A schematic of the actuator explaining the flow of hydraulic fluid and pressure changes in the system is shown in Fig. 2.The electrohydraulic servo-valve consists of two components: a voltage-regulated electromechanical device and a three-land four-way spool-valve hydraulic system. The dynamics of the actuator are described through Newtonian fluid mechanics. The governing equations for the electrohydraulic actuator may be structured to a simpler form that is suitable for FBL using the following relations [38,39,41]:(6)PL˙=γΦxv−βPL+αA(x˙w−x˙c),where Φ=ϕ1×ϕ2 withϕ1=sgn(Ps−sgn(xv)PL)andϕ2=(Ps−sgn(xv)PL),α=4βeVt, βe=αCtp,γ=CdS1ρ. A is the cross-sectional area of the piston, PLis the change in pressure experienced across the piston,xvis the servo-valve displacement, Psis the supply pressure into the hydraulic cylinder, Pris the return pressure from the hydraulic cylinder, Puand Plrepresent the oil pressure in the upper and lower portion of the cylinder respectively, Vtis the total actuator volume, βeis the effective bulk modulus of the system, Φ is the hydraulic load flow, Ctpis the total leakage coefficient of the piston, Cdis the discharge coefficient, S is the spool-valve area gradient and ρ is the hydraulic fluid density.In order to reduce complexity, it is assumed that the electromechanical device that controls the motion of the spool valve is a first-order element with a time constant τ and is described as:(7)x˙v=1τ(Kvu−xv),whereKvis the valve gain and u is the control input voltage. Values of the parameters used in the quarter-car model are given in Table 1.The performance of the AVSS is investigated as the vehicle travels over a deterministic road bump at a speed of 40km/h. The road bump has a sinusoidal profile with a length of 2.5m and amplitude of 11cm. The equation describing the profile of the bump is presented in Eq. (8) and is displayed in Fig. 3(8)w(t)=a(1−cos2π(V/λ)t)20.45≤t≤0.9,0otherwise,where a is the bump height, V is the vehicle speed, λ is the half wavelength of the sinusoidal road undulation [20].The system may be further rearranged into a state-space form by defining the following state variables:x˙1=x3,x¨1=x˙3,x˙w=x4,x¨w=x˙4, x5=PL, andx6=xv[20]:(9)x˙=f(x)+g(x)u+w(x),(10)y=h(x)=x1−x2,where the state vector is given byx=[x1x2x3x4x5x6]T. The system matrices f and g are denoted by:(11)f(x)=[f1f2f3f4f5f6]T,(12)g(x)=00000kvτT.The disturbance matrix w is represented by:(13)w(x)=000w(t)mukt00T.The elements of these matrices are as follows [20]:(14)f1(x)=x3,(15)f2(x)=x4,(16)f3(x)=1msksl(x2−x1)+ksnl(x2−x1)3+bsl(x4−x3)−bssym|x4−x3|+bsnl|x4−x3|sgn(x4−x3)−Ax5,(17)f4x=1mu−ksl(x2−x1)−ksnl(x2−x1)3−bsl(x4−x3)+bssym|x4−x3|−bsnl|x4−x3|sgn(x4−x3)+Ax5,(18)f5(x)=γΦx6−βx5+A(x3−x4),(19)f6(x)=1τ(−x6).The fundamental objective of the controller is to return the system to steady state after being disturbed by a deterministic road bump (Eq. (8)). The controller must also satisfy the following performance specifications for the AVSS [20]:1.The controller should demonstrate good low frequency disturbance rejection.Satisfactory transient response with minimal oscillations after the disturbance has disappeared; that is:•the rise time should not be greater than 0.1s.the maximum overshoot should be less than 5%.and zero steady-state error.The body-heave acceleration,x¨1, should be less than 4.5m/s2 in order to keep the system in the Less Discomfort region as [43].The suspension travel, y=(x1−x2), must remain within ±0.1m.The control voltage is limited to ±10volts.The maximum actuation force,Famax, must be less than the static weight of the vehicle.For good road holding, the dynamic load that is transmitted from the road should be less than the static weight of the vehicle, i.e., Ftyre<msg.The controller should minimize a performance index which includes suspension travel (disturbance rejection), body-heave acceleration (ride comfort), wheel deflection (road holding), actuation force and control input voltage (power consumption); which is given by:(20)J=1T∫0Tx¨1x¨1max2+(x2−w)(x2−w)max2+yymax2+FaFamax2+uumax2dt,where J is the overall performance index; the first term is related to the vehicle ride comfort; the second term is related to the road holding properties; the third term is related to the suspension travel (rattle space); the fourth and fifth terms are related to power consumption respectively.x¨1max,(x2−w)max, ymax,Famax, umax are maximum allowable body-heave acceleration, road holding parameter, suspension travel, actuation force and control input voltage respectively. T is the final simulation time.The PID control for the AVSS comprises of two control loops: the outer loop, which regulates the controlled variable (suspension travel, y) and the inner loop which ensures stable operations of the electrohydraulic actuator [1]. A schematic of the multi-loop PID control system is shown in Fig. 4.The setpoint ydis set to zero to address a regulation problem, e1 and e2 are error signals that will be minimized in the outer and inner control loops respectively, Fais the actuator force that will be regulated in the inner control loop with Fdbeing its respective setpoint, and u is the control input voltage that is passed into the hydraulic actuator of the AVSS. PID controllers operate according to the following equations:(21)e1(t)=yd(t)−y(t)=yd(t)−xw(t)+xc(t),(22)Fd(t)=KPe1(t)+KDde1(t)dt+KI∫0Te1(t)dt,(23)e2(t)=Fd(t)−Fa(t),(24)u(t)=kpe2(t)+kdde2(t)dt+ki∫0Te2(t)dt,where KPand kpare the proportional gains of the outer and inner loops respectively; KIand kiare the corresponding integral gains of the controllers; and KDand kdare the derivative gains of the respective control loops.The proposed controller architecture is presented in Fig. 5. The DNN predicts the response of the plant for a specified input. The controller performs FBL on the trained DNN with the intention of producing a control signal that cancels out the system's nonlinearities. The FBL controller is augmented with a multi-loop PID controller to achieve improved performance [30]. PSO algorithm is thereafter used to optimize the PID gains, FBL control parameters and the DNN weightings in order to obtain an optimal control law that best manages the trade-offs associated with the AVSS. Rdis the desired suspension travel as shown in Fig. 5. The rest of this subsection is devoted to providing a detailed presentation of the system identification and controller design.Fig. 6shows the structure of a typical DNN. The dynamics of the neurons are described by a first-order differential equation with a time constant β. Additionally, each neuron receives feedback from neurons in its respective hidden layerx¯t−1of the neural network, as well as from the input layer of the neural network ut. Both the network and neuron-to-neuron inputs are essentially added to the right hand side of the differential equation that describes the dynamics of the neuron.The output of each neuron is passed through an activation function σ(x) before it is fed back to each neuron in the corresponding hidden layer. Additionally, each neuron has two external inputs: control input u and a delayed system statex¯t−1, each of which possesses its own associating weighting value. Hence, a neuron in the first hidden layer of the neural network is described by:(25)x˙=−βx+Wσ(x)+γut+ζx¯t−1,where x is a vector denoting the outputs of each neuron, β is a diagonal matrix containing the time constants for each neuron in the hidden layer, σ(x) is the vector containing the neuron outputs after it had passed through the activation function, W is the inter-connecting neuron weights, utis a vector that holds the various control input signals that are being passed into the real system, γ is a matrix which holds the weighting contributions that each control input has on each neuron,x¯t−1is a vector that holds the actual system output or delayed output at the previous time step, and ζ is the contribution of these aforementioned outputs on each neuron.The output layer of the DNN comprises of a single neuron and is fundamentally an algebraic equation, which is essentially the weighted sum of the neuron outputs from the preceding hidden layer x. Thus, the neuron in this layer is described as follows:(26)yˆ=hn(x)=∑i=1nnwixi,where xiis a vector comprising of the output of the ith neuron from the hidden layer,wiis the associating weighting contribution of the ith neuron in the hidden layer, nnis the number of neurons in the hidden layer.In order to further simplify the model and the subsequent computation, the output of the networkyˆwill depend solely on the output from the first neuron in the preceding hidden layer. Consequently, the output layer will be simplified to:(27)yˆ=h1=w1x1.Furthermore, the selection of the network parameters such as: the number of hidden layers, size of the hidden layer nnand the activation function σ(·) is based on two items: the network stability and the method of pruning [32]. In the course of pruning, the primary network parameters such as the hidden layer size are increased until the predicted system outputyˆstops changing topology with further increase in the hidden layer size. Garces et al. [30] suggest that σ(·) should be bounded to within ±1 so that the free response of the DNN converges to zero and thus stabilizes once the networks inputs are removed. Hence, the hyperbolic tangent function is chosen as activation function σ(·) to meet this condition. The next condition may only be fulfilled after the selection of appropriate input–output data.An important step in system identification is to select a range of input–output data that covers the range of signals that will be encountered in reality. In indirect adaptive control the DNN must predict the output of the suspension system for a given set of control input voltage. White-Band-Limited (WBL) noise is used to create a set of input data because it can successfully create a random set of input signals which span the space of the expected input signals.Selection of an appropriate data set is a rather rigorous process that requires several conditions to be met. Firstly, the dynamics of the subsystem with the smallest time constant must be captured and this demands that the seed strength of the WBL be significantly high. Secondly, the input data must span the space of all possible input voltages, which is known to be in the range of ±10V. Similarly, the set of suspension travel output must span the region in which it is expected to operate, which corresponds to ±0.1m. “Whole Body Vibration” (WBV) frequency range is classified to be between 0.5 and 80Hz. Human occupants are susceptible to vibrations within this range. The resonant frequency range for the suspension system is smaller and fits into both the WBV as well as, the “low frequency” range. It is thus paramount that the system identification input covers these frequencies [42]. In order to satisfy the preceding conditions, WBL was set as follows:i.Control input u operates within ±10V.WBL has the following properties:•Seed strength of 22,641.0.001s sampling time.Hyperbolic Tangent is used for the activation function σ(x) as this ensures the DNN stability [28–30].This DNN is trained offline using PSO algorithm. PSO was first introduced by Kennedy and Eberhart [44] and they mimic the food searching process of swarms. As in the swarm of animals, each animal or particle searches a search space for a specific item. Each particle thereafter relays their success in relation to finding the desired item. Each particle will subsequently travel towards the position of the particle with the highest success at various speeds. At the same time, it will examine the area for a personal best position to achieve. The position of the particle refers to the location of the particle in n dimensional space where n is the number of parameters that are being altered. Searching towards the vicinity of the best particle and in the neighbourhood its personal best are referred to as the global and local searches respectively. The process repeats itself until the stopping criterion is met. The algorithm is summarized in the following steps [17]:Step 1:Produce a random population of particles using the uniform distribution.Provide an initial small velocity to each particle using pseudo-random normal distributions.Choose the fittest particle as the best particle.If the stopping criteria has been met, then stop the algorithm, otherwise proceed to Step 5.Adjust the local and global search parameters according to:(28)wlocal=w1nnmax,(29)wglobal=w21−nnmax,wherewlocal, andwglobalare the local and global search parameters respectively; whilstw1andw2are the maximum local and global search weighting respectively. n and nmax are the current iteration and maximum number of iterations respectively.Compute the new positions of each particle in the search space using:(30)X(t+1)=X(t)+V(t+1),where X is a matrix comprising of the neural network parameters, V is a matrix consisting of velocity as each parameter varies(31)V(t+1)=w1V(t)+wlocal×rand1(Pbest−X(t))+wglobal×rand2(Gbest−X(t)),where Gbestdenotes the vector containing the parameters of the global best particle, Pbestrepresents the matrix containing the personal best parameters of each particle. rand1 and rand2 are pseudo-random numbers.If the fitness of its new position is better than the fitness of its personal best, replace its personal best position with its current position and proceed to Step 8, otherwise continue straight to Step 8 without any adjustments.Find the fittest particle in the population and choose it as the best particle and return to Step 4.The objective function of the PSO algorithm during the system identification process is the mean square error (MSE) of the deviation between the actual and predicted outputs [20]:(32)J=MSE=12N∑i=1N(yi−yˆi)2,where N is the total number of samples used in the input–output data. The PSO parameters chosen are listed in Table 3and the variation of the global fitness with each iteration is presented in Fig. 8. The resulting verification and validation data are shown in Figs. 9 and 10, respectively.Before controller design can begin, the stability of the DNN model must be ensured. Deng et al. [28], Deng et al. [29] and Garces et al. [30] suggest that the DNN stability will be guaranteed if the followingconditions hold:Step i.The activation function σ(x) is continuously differentiable.σ(x) is bounded to 0≤σ(x)≤1.Givenutϵℝ+, there is a symmetric and positive solution P to the following equation:(33)βTP−Pβ=−μI.I is an identity matrix and μ is a scaling factor which [30] suggested should have a value of 1.The inequality of Eq. (33)must be satisfied:(34)||W||2≤μ−2||P||||P||,where ||·|| is the Euclidean norm of the specified matrix.The DNN model is rearranged into the compatible control affined form that is required to derive the feedback linearizing law as follows:(35)x˙=f(x)+g(x)ut+ζx¯t−1,where f(x)=W(x)−βx, and g(x)=γ. The following steps involve computing the consecutive derivatives of the DNN model outputs until a corresponding derivative is explicitly a function of the control input ut. The first derivative of the network output is computed as follows:(36)yˆ˙=∂yˆ∂t=∂yˆ∂x∂x∂t=∂h1(x)∂xx˙,=∂h1∂xf(x)+g(x)u=Lfh1(x)+Lgh1(x)u,=∂h1∂x1∂h1∂x2......∂h1∂x8f(x)+g(x)uT,=w1−β1x1+∑i=18W1iσ(xi)=Lfh1(x).whereLfh1(x)=∂h1∂xf(x), is known as the Lie derivative of h1 along f. g(x) is the consequence of DNN training, and its resulting matrix has its first element g1(x)=0. Furthermore,∂h1∂x1…∂h1∂x8are zero as h1 is a function of x1 only as per Eq. (27). Such values give rise to Eq. (36), where clearly the first derivative of the DNN model outputyˆ˙is not a function of the control input ut. Subsequent computation of the second derivative of the network output produces:(37)yˆ¨=∂2yˆ∂t=∂∂yˆ∂t∂x∂x∂t=∂Lfh1(x)∂xf(x)+g(x)u,=w1[−β1x1+W11(1−σ(x1)2)+W12(1−σ(x2)2)+…+W18(1−σ(x8)2)]f(x)+g(x)u,=d(x)+e(x)ut=Lf2h1(x)+LgLfh1(x)ut,where d(x) orLf2h1(x)is the free response of the system and e(x)utorLgLfh1(x)utis the forced response of the system. In the above derivative of the output, the DNN of the PSO training yielded a matrix where g1(x), g2(x), …, g3(x) were considerably large constants. Hence the computation of the second derivative of the network outputyˆ¨produced a solution which was explicitly dependent on the control input ut. Hence, the relative degree of the system is two, which infers that the DNN is input–output linearizable as its relative degree is less than the number of states of the DNN (which corresponds to 8 as there are eight neurons in the hidden layer).The next step in the controller formulation demands that the DNN dynamics now be transformed into a coordinate system which separates the observable and zero dynamics. The DNN may be described in terms of its observed and unobserved zero dynamics using the diffeomorphism as follows:(38)η˙=f0(ξ,η),(39)ξ˙=Acξ+Bcυ+p¯(w),(40)ξ˙=Acξ+Bcu(t)−a(x)b(x)+p¯(w),(41)yˆ=Ccξ.As the relative degree of the DNN is 2, the transformation yields a slightly different set of system matrices which are:(42)Ac=01λ0λ1,Bc=01,Cc=10T,p¯(w)=01T.The control law aims to create a linear mapping between the virtual input υ and the system network outputyˆas explained in Fig. 6 such that:(43)λ2yˆ¨=υ.Ψ must be invertible such that:(44)Lfψi=dψidxg(x),r+1≤i≤nwhere n is the number of state variables. With regards to guaranteed stability, both the observable ξ and unobservable η system dynamics must be stable. The unobservable system dynamics η are defined as non-trivial internal dynamics that remain once the output and observable system dynamics are forced to zero such that ξ=0 and henceη˙0(η,0). Such dynamics is termed the zero dynamics, and they tend to have a significant impact on the stability of the system. Asymptotic stability of the system is confirmed if the origin of the transformed system (η=0, ξ=0) is an equilibrium point. Such stability reduces the dynamics of the rth derivative of the output described by Eq. (37) to:(45)λ2yˆ¨=υ.Hence the FBL control law required to linearize the DNN and to acquire the linear mapping preferred in Eq. (45) is of the form:(46)u=1λ2LgLfyˆ(x)υ−λ2Lf2yˆ(x).The virtual input υ may be designed using pole placement approach such that:(47)υ=−λ1yˆ˙−λ0yˆ+υ¯.Consequently, the actual control law will take the form:(48)u=1λ1LgLf1yˆ(x)υ¯−λ2Lf2yˆ(x)−∑i=01λi−1Lfi−1yˆ(x).The new virtual control inputυ¯is determined through a multi-loop PID control system described in Fig. 5.With regards to controller gains, there are now 9 controller gains to be optimized; namely the 6 PID gains of the multi-loop PID controller, and the 3 FBL controller gains (λ0, λ1, λ2). The performance index used to select these gains is the same presented in Eq. (20). The process of the manual tuning of the intelligent controller was rather cumbersome and rigorous as very small variations in λ0, λ1, and λ2, cause considerable variations in the system response.The best gains that could be obtained through manual tuning are listed in Table 4. The gains of the controller are selected using the PSO algorithm and the optimization parameters are listed in Table 3.Fig. 11clearly indicates an improvement in the performance index from that of the PSO-optimized PID-controlled AVSS tuning. This infers that PSO-optimized controller tuning is successful in improving system performance. This figure also shows a better performance index for the DNNFBL controller, which infers that DNNFBL performs overall better than the PID case. However, this figure does not show if the inherent conflicting performance criteria of AVSS have been resolved. Thus investigation of each aspect of AVSS performance needs to be conducted to account for this. The corresponding optimal controller gains are listed in Table 4.The current investigation analyzes the performance of an AVSS that has been controlled through a PSO-optimized, DNN-based FBL (DNNFBL+PSO) controller. The system performance is further evaluated against its non-optimized counterpart (DNNFBL) and the PSO-optimized PID controller. The system response is assessed as the vehicle passes over a realistic deterministic road bump. The performance of the various performance criteria such as suspension travel, ride comfort, road holding and power consumption are listed in Table 5and their associating responses are plotted in Figs. 12–16.Fig. 12 shows the comparison of the suspension travel responses for the PVSS, PID+PSO, DNNFBL and DNNFBL+PSO AVSS to a deterministic road bump. Plots of suspension travel show that the DNNFBL+PSO-controlled AVSS improved the transient response by minimizing the number of peaks and troughs as the suspension travel dampened out to zero as soon as the disturbance had been traversed. Furthermore, it settled quicker than both the PID+PSO and DNNFBL-controlled cases and this finding suggests that DNNFBL+PSO case contains good disturbance rejection properties. These positive results were attained as a consequence of the objective function which gave suspension travel an appropriate weighting. However, improved settling time and transient response were achieved at the cost of increased peak and root mean squared (RMS) suspension travel. This may be attributed to the considerable weightings that were given to the remaining trade-offs in the cost function.The DNNFBL+PSO controlled AVSS possesses better RMS and peak values of the suspension travel than its non-optimized counterpart. This proves that the PSO algorithm is an effective tool in improving the response of the system. Controller tuning of the DNNFBL case proved to be rather sensitive to changes in gains, which hence produced a weaker response than the optimized PID case as well. Therefore, it may be stated that the tuning of FBL gains is more rigorous and less intuitive than that of the PID tuning.The ride comfort (body-heave acceleration) and road holding (wheel deflection) characteristics plots shown in Figs. 13 and 14 clearly depict the DNNFBL+PSO case in a favourable light as it was able to bring the ride comfort to the Less Discomfort range and contain both improved peak and RMS values of body-heave acceleration and wheel deflection. Furthermore, the DNNFBL+PSO case displayed a lower degree of chattering in these aspects. These results show that the objective function for the PSO algorithm that contains each of the AVSS trade-offs is an effective tool for resolving design specifications particularly on ride comfort, road holding and system transient response. On the other hand, the PID+PSO controlled case performed better than the DNNFBL case and fell marginally short than the DNNFBL+PSO case in terms of peak and RMS values of the wheel deflection and the body-heave acceleration. It did also maintain a greater degree of chattering than the intelligent controller.Figs. 15 and 16 indicate that the success of the DNNFBL+PSO controller was achieved at the cost of actuation force and voltage. This is expected as a control input and hence actuation force is required to bring down the acceleration considerably into the Less Discomfort range of the ISO standards. However, hydraulic actuators in general are sensitive to changes in control input, where a slightly smaller variation in control voltage as in the case of the optimized PID and DNNFBL controllers produces a larger variation in actuator forces. Hence, in order to satisfy both hard design specifications (such as ride comfort) and a reduced performance index, the actuator force will naturally be larger. In conclusion this data argues that actuator dynamics play a significant role in AVSS design and that it should not be neglected.To test the sensitivity to parameter variations of the DNNFBL+PSO controller, several realistic suspension parameters were altered. These included tyre stiffness, vehicle mass and speed. Each parameter was varied by ±20% and the corresponding suspension travel responses are plotted in Figs. 17 and 18, respectively.Figs. 17 and 18 indicate that the DNNFBL+PSO case has a satisfactory robustness to parameter variations. The system remained Bounded-Input Bounded-Output (BIBO) stable, and the steady-state error increased upon the variation of the various parameters. Alteration in vehicle mass contained the most severe steady-state error, followed by the adjustments in vehicle speed and tyre loading respectively. Its transient response did however remain similar to the original case where no topology was lost whatsoever. The optimized PID controller on the other hand displayed no steady-state error, but its transient response was worst than the DNNFBL+PSO controller with greater settling times and additional peaks. This implies that the intelligent controller has a better robustness to parameter variations.The robustness of the proposed controller was also tested for the case of a random road disturbance presented in Fig. 19. The suspension travel responses for the optimized PID and PSO-augmented DNNFBL subjected to this disturbance is presented in Fig. 20.The optimized PID case reported larger peaks with a marginally greater RMS value. This implies that the DNNFBL+PSO performed better in this aspect as well, which further highlights its improved robustness.System sensitivity is also investigated through frequency domain plots. The most sensitive frequencies of vibrations for human exposure range between 2 and 80Hz [43]. These standards also explain that body-heave acceleration is used to quantify human exposure and hence body-heave acceleration under these frequencies is investigated. The frequency response of the proposed AVSS schemes covering this range is presented in Fig. 21and it was generated using the Power-Spectral-Density (PSD) estimates from Matlab signal processing toolbox. The settings for this estimate are listed in Table 6.In this frequency range, the DNNFBL+PSO controller showed substantially lower power ratios than its counterparts across most frequencies. It maintained the best power ratio in the most sensitive low frequency range. Beyond 10Hz it performed worst than the PVSS, but the power ratios in this range for all the control methods are effectively negligible. These results once again highlight the robustness of the DNNFBL+PSO controller.In light of the preceding discussion, the following conclusions are made. Firstly, the DNN was successful in learning the dynamics of the AVSS. However, the DNNFBL-controlled case produced weaker data than the benchmark PID controller as it proved rather tedious to tune. PSO overcame this tuning issue and produced significantly better results which completely outperformed the optimized PID-controlled case. The DNNFBL+PSO controlled case is characterized with improved ride comfort, road holding, suspension travel, settling time and contained a significantly lower degree of chattering as compared to the optimized PID-controlled case.However, this success came at the price of increased actuation force. This is required to further minimize the effects of the transmitted road disturbance and hence improve the suspension travel response, ride comfort, settling time and road holding properties. On the contrary, the control input voltage did not alter significantly for the various cases. This may be attributed to the nature of the hydraulic actuator, where small increments in voltage develop large changes in force. Furthermore, the optimal intelligent controller displayed an acceptable sensitivity to parameter variations.The DNNFBL+PSO control displayed the best robustness with the most desirable response for variations in parameter values, even though it had the shortfall of steady-state error. It showed better response than its PID counterpart in the frequency domain as well as when subjected to a random road disturbance.In relation to future work, it is worth stating that success of the proposed controller may be extended to a full-car model to resolve its associating trade-offs. This is necessary as full-car models are much more complex and realistic. Furthermore, experimental validation should be carried out as real-world model contains additional complexities and introduces various issues that have been ignored in numerical simulations.

@&#CONCLUSIONS@&#
