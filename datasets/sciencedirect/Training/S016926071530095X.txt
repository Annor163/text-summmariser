@&#MAIN-TITLE@&#
Design of a heart rate controller for treadmill exercise using a recurrent fuzzy neural network

@&#HIGHLIGHTS@&#
The manuscript presents RFNNHRC replacing the PI.RFNN achieves minimal HR deviation & resulted in smaller fluctuation than PIRFNN performs smoother in treadmill speed and incline control by our test.RFNN controls HR with adjusting parameter and online learning algorithm.Experiments in the manuscript proves more stable HRC by RFNN against PI.

@&#KEYPHRASES@&#
Computer controlled treadmill,Recurrent fuzzy neural network,Heart rate controller,Treadmill speed and incline,Adjustable parameters,On-line learning algorithm,

@&#ABSTRACT@&#
Background and objectiveIn this study, we developed a computer controlled treadmill system using a recurrent fuzzy neural network heart rate controller (RFNNHRC). Treadmill speeds and inclines were controlled by corresponding control servo motors. The RFNNHRC was used to generate the control signals to automatically control treadmill speed and incline to minimize the user heart rate deviations from a preset profile.MethodsThe RFNNHRC combines a fuzzy reasoning capability to accommodate uncertain information and an artificial recurrent neural network learning process that corrects for treadmill system nonlinearities and uncertainties. Treadmill speeds and inclines are controlled by the RFNNHRC to achieve minimal heart rate deviation from a pre-set profile using adjustable parameters and an on-line learning algorithm that provides robust performance against parameter variations. The on-line learning algorithm of RFNNHRC was developed and implemented using a dsPIC 30F4011 DSP.ResultsApplication of the proposed control scheme to heart rate responses of runners resulted in smaller fluctuations than those produced by using proportional integra control, and treadmill speeds and inclines were smoother. The present experiments demonstrate improved heart rate tracking performance with the proposed control scheme.ConclusionsThe RFNNHRC scheme with adjustable parameters and an on-line learning algorithm was applied to a computer controlled treadmill system with heart rate control during treadmill exercise. Novel RFNNHRC structure and controller stability analyses were introduced. The RFNNHRC were tuned using a Lyapunov function to ensure system stability. The superior heart rate control with the proposed RFNNHRC scheme was demonstrated with various pre-set heart rates.

@&#INTRODUCTION@&#
Automated exercise testing systems are increasingly important during exercise training, rehabilitation, and cardio respiratory analyses. However, currently available treadmills that offer heart rate control have poor performance and lack mechanisms for setting desired heart rate profiles. Among heart rate systems for treadmills, proportional–integral (PI) controllers operate on simple algorithms that produce high-stability margins and high reliability when properly designed [1,2]. However, these properties of PI controllers remain subject to nonlinear speed characteristics of treadmill systems and vary with drive operating conditions, or are too complex to control using traditional strategies [3–10]. Cardiac diseases have a challenging problems with enormous economic impact worldwide [11–13]. A cyber-physical systems approach to pacemaker was designed that exploits the fractal properties of heart rate activity. In order to achieve adaptive tracking performance, an adaptive neural network control scheme is presented to adjust controller parameters based on its on-line learning ability [14].Recent studies report fuzzy logic controls, adaptive controls, and neural network applications that accommodate control system nonlinearities and uncertainties [15–19]. Although fuzzy logic controls can be manipulated to compensate for system nonlinearities, successful applications are dependent on the experience of the designer. Moreover, fuzzy control rules, rule numbers, and parameter values of membership functions are difficult to select, and parameter values of the membership function cannot be adjusted on-line to provide robust performance against treadmill system nonlinearities and uncertainties. In contrast, adaptive controls automatically adjust system responses in accordance with parameter variations, but generally require reference system models that are impractical for treadmill exercise systems.Neural networks are classified as feed-forward or recurrent according to structure [20], and it is well known that feed-forward neural networks can closely approximate any continuous function. However, feed-forward neural networks employ static mapping without the aid of delays, and fail to represent dynamic mapping. Although many previously reported feed-forward neural networks have been used to address delays and dynamic problems, these require large numbers of neurons to express dynamic responses [21]. Furthermore, weight calculations do not update quickly and function approximations are dependent on training data.To overcome these difficulties, we propose the use of a recurrent fuzzy neural network heart rate controller with adjustable parameters and on-line learning algorithms that have potential for wide application in unknown, nonlinear or uncertain dynamic systems such as the fractal characteristics of the heart rate. Recurrent neural networks are dynamic mapping environments that display good control performance in the presence of unknown, nonlinear, uncertain and time-varying model dynamics [22,23]. Moreover, recurrent neurons have internal feedback loops and can capture dynamic system responses without requiring delayed external feedback. Hence, recurrent neural networks are better suited for dynamic systems than feed-forward neural networks [24].When hidden neurons are too numerous, computation loads can overwhelm systems, which then become unsuitable for practical on-line applications. However, too few chosen hidden neurons lead to insufficient learning performance to achieve adequate control. To overcome this problem, we developed a novel recurrent fuzzy neural network heart rate controller (RFNNHRC) that maintains high accuracy under both of these conditions. In addition, this RFNNHRC employs local modeling and fuzzy input space partition, dynamic fuzzy rule linguistic descriptions, proper learning based structure for training examples, and parsimonious models with reduced parametric complexity [25]. This novel combination of fuzzy reasoning capabilities and artificial recurrent neural network learning processes may accommodate information uncertainties and compensate for treadmill system nonlinearities and uncertainties. The present scheme for heart rate control was designed to control heart rate according to a pre-set heart rate profile during treadmill exercise using adjustable parameters and an on-line learning algorithm that overcomes problems of nonlinearity. Moreover, updating of connections weights in the RFNNHRC allows effective computation of variable treadmill characteristics and provides robust performance against parameter variations.To characterize and validate the present innovation, the proposed RFNNHRC was compared with a conventional PI controller and its utility and validity were verified experimentally. The present analyses demonstrate stable performance of the present RFNNHRC under various exercise conditions.Fig. 1shows the RFNNHRC treadmill control scheme. Treadmill speeds and inclines were controlled by corresponding control servo motors, and the RFNNHRC was used to generate the control signals uSand uθ, and to automatically control treadmill speed and incline so that the difference between the users heart rate h and the preset heart rate command h* was minimized.As shown in Fig. 2the RFNNHRC comprises an input layer, a membership layer, a rule layer, and an output layer.The RFNNHRC mathematical model is summarized as follows:RFNNHRC inputs follow the error e=h*−h and error changee˙, and the outputsxe,i1andxe˙,i1can be expressed as:(1)xe,i1=e,i=1,…,9(2)xe˙,i1=e˙,i=1,…,9Define the fuzzy sets PE, ZE and NE on error e, fuzzy sets PD, ZD and ND on error changee˙, fuzzy sets PU, MU, ZU, SU and NU on control force u, while the responding Gaussian membership functions are shown in Fig. 3(a)–(c), respectively. As a result, 9 fuzzy rules are constructed which are shown as follows, while 9 hidden nodes on Membership layer and Rule layer are chosen.Rule 1: If e is PE ande˙is PD, then u is PU.Rule 2: If e is PE ande˙is ZD, then u is PU.Rule 3: If e is PE ande˙is ND, then u is MU.Rule 4: If e is ZE ande˙is PD, then u is MU.Rule 5: If e is ZE ande˙is ZD, then u is ZU.Rule 6: If e is ZE ande˙is ND, then u is SU.Rule 7: If e is NE ande˙is PD, then u is SU.Rule 8: If e is NE ande˙is ZD, then u is NU.Rule 9: If e is NE ande˙is ND, then u is NU.The Membership layer outputsye,i2andye˙,i2can be expressed as a Gaussian function:(3)xe,i2=exp−xe,i1−se,ize,i2,i=1,…,9(4)xe˙,i2=exp−xe˙,i1−se˙,ize˙,i2,i=1,…,9whereS=[se,1,…,se,9,se˙,1,…,se˙,9]Tis the mean Gaussian function vector andZ=[ze,1,…,ze,9,ze˙,1,…,ze˙,9]Tis the standard deviation Gaussian function vector.Rule layer outputs are expressed as:(5)xi3(t)=1+11+exp−rixi3(t−1)xe,i2(t)xe˙,i2(t),i=1,…,9where R=[r1, …, r9] is the recurrent weight vector. The recurrent neurons have internal feedback loops and can capture dynamic system responses without requiring delayed external feedback.The output layer outputs uSand uθcan be expressed as follows:(6)uS=∑i=19w1ixi3+uC1(7)uθ=∑i=19w2ixi3+uC2Eqs. (6) and (7) can be rewritten in matrix form as:(8)u=WTT(x,s,z,r)+uCwhereT(x,s,z,r)=[x13x23…x93]Tis the fuzzy rule function vector,W=w11w11…w19w21w22…w29Tis the adjustable output weight vector, andu(t)=uS(t)uθ(t)TanduC=uC1uC2Tcomprise the compensated force.The treadmill nonlinear dynamic system can be expressed as follows:(9)y¨=f(y)+g(y)u(t)+d(t)where f(y) andg(y)=g1(t)g2(t)are unknown treadmill functions and are assumed to be bound,u(t)=uS(t)uθ(t)Tis the control input, and d(t) is the external disturbance.The present RFNNHRC was designed so that the treadmill rotor angle tracks the reference model output angle using the following tracking error vector:(10)E=ee˙TFrom (9) and (10), an ideal controller can be chosen as(11)y¨n=fn(y)+gn(y)u*(t)+dn(t)−KTEwhereK=k2k1T, and k1 and k2 are positive constants. Upon application of (11) to (9), the error dynamics can be expressed as(12)e¨+k1e˙+k2e=0If K corresponds with Hurwitz polynomial coefficients, or polynomials with roots lying strictly in the open left half of the complex plane, limt→∞e(t)=0 for all initial conditions. Nevertheless, the functions f(y) and g(y) are not accurately known and the external load disturbances are perturbed. Thus, the ideal controller u*(t) cannot be practically implemented. Nonetheless, the present RFNNHRC was designed to approximate this ideal controller, and the proposed control scheme for the treadmill with RFNNHRC and compensated controllers is shown in Fig. 1.From Eqs. (9), (10), and (11), the error equation can be rewritten as follows:(13)E˙=AE+B(u*−u)whereA=01−k2−k1andB=00g1(y)g2(y).Pending on the assumption that a RFNNHRC can be developed to approximate the ideal control force, the following equation is true:(14)u*(e,W*,S*,Z*,R*)=W*TT*+εwhere ɛ is a minimum reconstructed error, and W*, S*, Z*, R* and T* are optimal parameters of W, S, Z, R and T, respectively. Thus, the control force is assumed to take the following form:(15)u(e,W⌢,S⌢,Z⌢,R⌢)=W⌢TT⌢+uCwhereW⌢,S⌢,Z⌢,R⌢andT⌢are the optimal parameter estimations provided by tuning the subsequent algorithmsu(t)=uS(t)uθ(t)TanduC=uC1uC2T. Subtracting (15) from (14), an approximation erroru˜is obtained as(16)u˜=u*−u=W*TT*+ε−W⌢TT⌢−uC=W˜TT*+W⌢TT˜+ε−uCwhereW˜=W*−W⌢andT˜=T*−T⌢. The linearization technique transforms the multidimensional receptive-field basis functions into a partially linear form such that the expansion ofT˜in a Taylor series can be written as follows:(17)T˜=[x˜13,…,x˜93]T=TsS˜+TzZ˜+TrR˜+Ovwherex˜i3=xi3*−x⌢i3,xi3*is the optimal parameter,x⌢i3is the estimated parameter ofxi3*,S˜=S*−S⌢,Z˜=Z*−Z⌢,R˜=R*−R⌢, andOvare higher-order terms, andTs=∂x13∂s∂x23∂s…∂x93∂ss=s⌢T,Tz=∂x13∂z∂x23∂z…∂x93∂zz=z⌢T, andTr=∂x13∂r∂x23∂r…∂x93∂rr=rˆT.Accordingly, Eq. (17) can be rewritten as(18)T*=T⌢+TsS˜+TzZ˜+TrR˜+OvSubstitution of (18) into (16) leads to the following equation:(19)u˜=W˜TT⌢+W⌢T(TsS˜+TzZ˜+TrR˜)−uC+DwhereD=W˜T(TsS˜+TzZ˜+TrR˜)+W*TOv+εis the uncertainty term and is assumed to be bound with a small positive constant vectorβ=β1β2T(letD≤β).TheoremConsidering that the treadmill dynamic system is represented by(9), the RFNNHRC control law is designed as in(15), with adaptive laws for network parameters as described in(20)–(23). The compensated controller control law is designed as in(24)with the estimation law given in(25). The stability of the proposed control scheme can then be guaranteed, and η1, η2, η3, η4, and η5are strictly positive constants:(20)W⌢˙=η1T⌢ETPB(21)S⌢˙=η2TsTW⌢ETPB(22)Z⌢˙=η3TzTW⌢ETPB(23)R⌢˙=η4TrTW⌢ETPB(24)uC=β⌢sgn(ETPB)(25)β⌢˙=η5ETPBThe following proof can be defined as a Lyapunov function candidate:(26)V(t)=12ETPE+12η1tr(W˜TW˜)+12η2S˜TS˜+12η3Z˜TZ˜+12η4R˜TR˜+12η5β˜Tβ˜where P is a symmetric positive definite matrix that satisfies the following Lyapunov equation:(27)ATP+PA=−Qin which Q is a positive definite matrix. Here, the uncertainty boundary estimation error is defined asβ˜=β−β⌢. Taking the Lyapunov function (26) differential and applying Eqs. (19) and (27), it is concluded that(28)V˙(t)=−12ETQE+12(ETPB+BTPE)u˜−1η1W˜TW⌢˙−1η2S⌢˙TS˜−1η3Z⌢˙TZ˜−1η4R⌢˙TR˜−1η5β˜Tβ⌢˙=−12ETQE+ETPB[W˜TT⌢+W⌢T(TsS˜+TsZ˜+TrR˜)uC+D]−1η1W˜TW⌢˙−1η2S⌢˙TS˜−1η3Z⌢˙TZ˜−1η4R⌢˙TR˜−1η5β˜Tβ⌢˙=−12ETQE+W˜TETPBT⌢−1η1W⌢˙+ETPBW⌢TTs−1η2S⌢˙TS˜+ETPBW⌢TTz−1η3Z⌢˙TZ˜+ETPBW⌢TTr−1η4R⌢˙TR˜−ETPBuC+ETPBD−1η5β˜Tβ⌢˙Similarly, after incorporation of Eqs. (20)–(25) into (28), the derivative of V(t) can be rewritten as(29)V˙(t)=−12ETQE−ETPBuC+ETPBD−1η5β˜Tβ⌢˙≤−12ETQE−β⌢T|ETPB|+|ETPB||D|−(βTβ⌢)T|ETPB|≤−12ETQE−|ETPB|(|β|−|D|≤0In this case,V˙(t)is smaller than zero, which implies that E(t) will converge to zero as t→∞. As a result, the stability of the proposed control system can be guaranteed.According to the above derivative, the on-line learning algorithm of RFNNHRC is summarized as follows:Step 1: Initialize the parameters ofW⌢,S⌢,Z⌢,R⌢andβ⌢.Step 2: Measure heart rate h, then calculate e=h*−h ande˙.Step 3: Calculate RFNNHRC inputsxe,i1(i=1,…,9)andxe˙,i1(i=1,…,9)using Eqs. (1) and (2).Step 4: Calculatexe,i2(i=1,…,9)andxe˙,i2(i=1,…,9)using Eqs. (3) and (4).Step 5: Calculatexi3(i=1,…,9)using Eq. (5).Step 6: CalculateuC=uC1uC2Tusing Eq. (24).Step 7: Calculate RFNNHRC outputs uSand uθusing Eqs. (6) and (7).Step 8: UpdateW⌢,S⌢,Z⌢,R⌢andβ⌢using Eqs. (20)–(23) and (25), then go to step 2.A heart rate sensor is initially placed on the runners chest (Fig. 4).The heart rate sensor monitors the runner's heart rate in real time, and delivers data to the heart rate receiver on the treadmill via blue tooth. Subsequently, heart rate data is sent to the digital signal processor (DSP) and then to the computer through an RS 232 data interface, and is analyzed using Matlab Software (Fig. 5), which generates results from experimental curves as shown in Figs. 10–18. For the slow-changing heart rate response, the proposed controller has been designed to achieve the desired performance such as rise time smaller than 360s, settling time smaller than 420s and overshoot smaller than 10%.The DSP is the control center of the treadmill, and executes all functions from the treadmill. Specifically, the DSP controls the treadmill speed and incline motor driver and the console control, and activates the RFNNHRC using heart rate receiver data via Bluetooth connections. The RS232 Port and computer were connected and experimental curve diagrams were generated. Generally, microprocessors have insufficient capacity for the present application, thus a DSP with high-speed processing capabilities was used to implement the recurrent fuzzy neural network heart rate controller (Fig. 6).

@&#CONCLUSIONS@&#
Neural networks have superior capabilities compared with feed-forward neural networks, with rapid dynamic responses and information-storing capabilities [26–28]. The present novel RFNNHRC scheme was combined with adjustable parameters and an on-line learning algorithm, and was applied to a computer controlled treadmill system with heart rate control during treadmill exercise. Novel RFNNHRC structure and controller stability analyses were introduced, and treadmill speeds and inclines were controlled to minimize heart rate deviations from a preset profile. Moreover, related membership functions and weight variables were updated using adaptive algorithms, and all parameters for the proposed RFNNHRC were tuned using a Lyapunov function to ensure system stability. Subsequent experimental comparisons with a commercially available PI heart rate control system indicated superior heart rate control and smoothness of treadmill speed and incline changes. Finally, superior stability and reliability of heart rate control with the proposed RFNNHRC scheme was demonstrated with various pre-set heart rates, speeds, and inclines.