@&#MAIN-TITLE@&#
A Total Order Heuristic-Based Convex Hull Algorithm for Points in the Plane

@&#HIGHLIGHTS@&#
We propose a 2D convex hull algorithm based on comparison operators.We propose a 2D convex hull algorithm that outperforms Quickhull.We propose a 2D non-convex hull algorithm.

@&#KEYPHRASES@&#
Convex hull,Geometric algorithms,Computational geometry,

@&#ABSTRACT@&#
Computing the convex hull of a set of points is a fundamental operation in many research fields, including geometric computing, computer graphics, computer vision, robotics, and so forth. This problem is particularly challenging when the number of points goes beyond some millions. In this article, we describe a very fast algorithm that copes with millions of points in a short period of time without using any kind of parallel computing. This has been made possible because the algorithm reduces to a sorting problem of the input point set, what dramatically minimizes the geometric computations (e.g., angles, distances, and so forth) that are typical in other algorithms. When compared with popular convex hull algorithms (namely, Graham’s scan, Andrew’s monotone chain, Jarvis’ gift wrapping, Chan’s, and Quickhull), our algorithm is capable of generating the convex hull of a point set in the plane much faster than those five algorithms without penalties in memory space.

@&#INTRODUCTION@&#
The convex hullH(P)of a planar point setPcan be defined as the smallest convex polygon that enclosesP. Every point ofPbelonging to the boundary ofH(P)is called an extreme vertex. The notion of convex hull is considered by many as one of the most fundamental geometric structures we find in computational geometry, computer graphics, robotics, etc.  [1]. In fact, important problems in computational geometry like Delaunay triangulation, Voronoi diagrams, halfsapce intersection, etc. can be reduced to the problem of computing the convex hull of a set of points  [2].Besides, the problem of finding the convex hull crosses many research domains and applies to an endless number of problems and situations. For example, convex hulls play an important role in computer vision  [3], pattern recognition  [4,5], visual pattern matching  [6], operations research  [7], path planning and obstacle avoidance in robotics  [8,9], astronomy  [10,11], and biology and genetics  [12], just to mention a few of them.The remainder of the paper is organized as follows. Section  2 overviews the prior work on convex hull algorithms. Section  3 describes the TORCH (Total Order-Based Convex Hull) algorithm step by step. Section  4 carries out the complexity analysis of the TORCH algorithm. Section  5 compares the TORCH algorithm to other well-known convex hull algorithm with reference to both arbitrary and definite sets of points in the plane. Section  6 concludes the paper, with some hints for future work.

@&#CONCLUSIONS@&#
This paper has proposed a sorting-based algorithm to compute the convex hull (and also the approximate convex hull) of a set of points inR2. This algorithm, named TORCH, outperforms Quickhull. This is important because Quickhull is known as the fastest algorithm we find in the literature. But, more importantly, it is the simplicity of the algorithm, which is essentially due to sorting operations. The only geometric computations done by the algorithm are those concerning the process of convexification (or inflating) of the approximate convex hullAinto the convex hullH. TORCH source code (including input point sets) is publicly available at http://github.com/mosqueteer/TORCH/.In short, the algorithm performs inexpensive sorting operations to findA, and expensive geometric operations to findHfromA. The speed of the algorithm is explained by the fact that the number of geometric operations is negligible compared to the number of sorting operations carried out by the algorithm. In the near future, we intend to design an even faster algorithm without using the first step of the algorithm relative to sorting in thexdirection. Based on the same leading idea of the algorithm herein described, we can generalize TORCH to higher dimensions, without using the preliminary sorting of the input point set.