@&#MAIN-TITLE@&#
CONSERT: Applying semantic web technologies to context modeling in ambient intelligence

@&#HIGHLIGHTS@&#
We formally define an ontology-based context meta-model.Approach offers uniform modeling of context content, annotation and dependencies.Reasoning cycle performs automatic computation of temporal continuity of situations.OSGi-compatible reasoning engine exploits the context meta-model in customizable way.

@&#KEYPHRASES@&#
Ambient intelligence,Context modeling,Ontology,Semantic web,SPARQL,Rule-based reasoning,

@&#ABSTRACT@&#
Representation and reasoning about context information is a main research area in Ambient Intelligence (AmI). Context modeling in such applications is facing openness and heterogeneity. To tackle such problems, we argue that usage of semantic web technologies is a promising direction. We introduce CONSERT, an approach for context meta-modeling offering a consistent and uniform means for working with domain knowledge, as well as constraints and meta-properties thereof. We provide a formalization of the model and detail its innovative implementation using techniques from the semantic web community such as ontology modeling and SPARQL. A stepwise example of modeling a commonly encountered AmI scenario showcases the expressiveness of our approach. Finally, the architecture of the representation and reasoning engine for CONSERT is presented and evaluated in terms of performance.

@&#INTRODUCTION@&#
Ambient Intelligence (AmI) is nowadays a well recognized area of research with work done in domains ranging from hardware (e.g. sensors, actuators) through middleware (e.g. information management, basic services) to innovative end applications and human computer interfaces. The industry is also starting to embrace scenarios and ideas from the ambient intelligence domain, most notably in activity areas such as home monitoring and automation, smart city sensing and monitoring infrastructures. There is a growing number of start-up enterprises that are active in the mentioned areas (e.g. Ninja Sphere,1http://ninjablocks.com/.1Nest,2https://nest.com/.2SmartThings3http://www.smartthings.com/.3) and increasingly more cities are offering their support for installing prototype smart environment infrastructures.The possibilities for AmI application development increase even further, given the emerging industry enterprises that offer entire development platforms for creating application and business logic in the IoT and M2M (machine-to-machine) domains (e.g. Xively,4https://xively.com/.4ThingWorx5http://www.thingworx.com/platform/#how-it-works.5). Such initiatives open up a trend that leads towards systems which promote anonymous social experiences and focus on models of group activity rather than just individual ones. It raises an AmI that is centered on enhancing human interaction apart from supporting individual needs and preferences.In terms of information and situation supervision (the Context Management research branch of AmI), the perspectives listed above translate to requirements of being able to support interoperability and openness. They also demand an increased expressiveness of contextual information models and the accompanying reasoning and query solutions. The growing complexity of situation definitions in AmI scenarios as promoted by the consideration of models for social activities and experiences drives the need for model expressiveness, whereas the decentralized and heterogeneous nature of devices and applications found in the IoT and M2M domains imposes the necessity for interoperability through standards.With this in mind, the information management middleware and the way in which it handles the notions of context representation and reasoning, as introduced by Dey [1], are of first importance. The past decade has seen many contributions in these particular fields of research [2–4]. Recognizing the need for interoperability and standards in terms of languages and approaches, works have started focusing on ontology models in support of context modeling. The representation potential of description logics, the ability to ensure knowledge consistency and the support for reasoning make for compelling benefits. However, the majority of approaches for ontology-based context modeling focus on building either a very generic (e.g. [5]) or a highly specific (e.g. [6]) vocabulary for the domain knowledge of a given AmI application. Consequently, many such models cannot support important design expressiveness aspects of domain statements such as arbitrary arity of predicates or well-structured representation and reasoning on statement meta-properties (e.g. quality metrics, temporal validity).Furthermore, an inference process based solely on the capabilities offered by description logics is not sufficient to address the challenges of having a well-structured means for concomitantly reasoning over context domain knowledge, time dependent meta-properties and integrity constraints.In this article we propose to address the earlier mentioned shortcomings by developing CONSERT, a context representation meta-model implemented as an ontology, which extends and combines previous works [7,8], providing extensive design support for expressing statement meta-properties (annotations) and constraints. We furthermore define a context representation and reasoning engine (CONSERT Engine) which tackles the problems of (i) combining rule-based and ontological reasoning for domain knowledge, (ii) structured manipulation of context annotations and (iii) detection of context integrity violations. Thereby we make use of the latest proposals of the semantic web community for standards such as RDF and SPARQL in order to address the storing, querying and reasoning aspects. As we will see later on, the latter reliance on semantic web standards is our solution to the requirements of interoperability with third party applications and general openness in AmI systems.The remainder of this paper is structured as follows. In Section 2 we analyze related work in the domains of context ontology models and semantic web approaches to reasoning over context information and point out the works and concepts that influenced our own approach the most. Section 3 presents an application scenario which we further use to illustrate examples of the notions we define along the way. We then start a formal definition of our proposed context model in Section 4, present its implementation in Section 5 and provide, in Section 6, a designer’s guidelines for using our approach to model the scenario exposed earlier. Sections 7 and 8 describe the architecture of our proposed representation and reasoning engine as well as the validation and performance tests we carried out. The paper concludes with Sections 9 and 10, where we discuss the contributions, existing limitations and future directions of work.The field of context modeling has received a noticeable amount of contributions over the last decade [2,3] ranging from simple key-value models, through mark-up and graphical models and down to different ontology models [5,7,9]. As mentioned in the introduction, the need for expressive modeling and reasoning support has led to ontologies for context modeling becoming a focus in many research approaches. In the following we provide an overview of ontology based context models going through domain centric proposals, works on context meta-models and approaches of reasoning about context. Throughout the analysis we try to point out how the presented works address the concerns of expressiveness and interoperability that we mentioned as focus elements in the introduction. At the end of the section we briefly explain how our own proposal tries to collect and combine relevant influences from the listed research works.As mentioned in the introduction, many lines of work tackled the problem of expressiveness by focusing on developing extensible and generic context modeling ontologies that would cover as many context domains as possible. Some of the works tried to also address the dimension of quality of context information.CONON [9] defines a set of 14 classes that constitute its core vocabulary, which focuses on modeling persons, locations, activities and computational entities. It further defines a QualityConstraint class that can represent different quality aspects of context information such as accuracy or freshness. However, the authors in [9] do not make it clear how this meta-information is assigned to domain knowledge or how it is used in inferencing.The CoOL ontology [5] is based on the Aspect-Scale-Context model (ASC) and it is intended to enable context-awareness and contextual interoperability. CoOL focuses on defining a more abstract and overarching vocabulary. The authors point out that it could be used to achieve transfers between arbitrary context models thereby allowing the model to act as an interoperability and comparison layer.SOUPA [7] is a well-known context ontology model [10] which achieves great genericity and reusability by creating its core vocabulary in a modular way, based on upper-level consensus ontologies that cover aspects such as person (FOAF6http://www.foaf-project.org/.6), time (OWL-Time7http://www.w3.org/TR/owl-time/.7) or space (spatial ontologies in OpenCyc8http://www.cyc.com/opencyc.8). Though originally used in applications centered on user activity modeling, we considered it general enough for use as the default upper-ontology in our model (see Section 5.1), able to describe entities involved in a wider variety of context management applications. More recent works ([6,11]) apply ontology modeling for human activity recognition. However, as mentioned in the introduction, they represent examples of targeted domain modeling. Specifically, Chen and Nugent [6] focus on providing an extensive vocabulary for Activities of Daily Living (ADL) and a reasoning algorithm, based on description logic, which works in an incremental fashion. With every step it builds an increasingly precise realization of the activity of a person, given sensory information that describes usage of every-day objects. The authors note however that they leave all modeling and reasoning related to temporal and meta-properties (e.g. quality of information) to future work.Riboni and Bettini [11] examine the benefits of using the OWL 2 ontology language to build a vocabulary for human activity recognition. The authors analyze the way in which newer constructs available in OWL 2 (e.g. qualified cardinality restrictions, property composition) help to cover modeling efforts which had previously used a combination of OWL 1 and predicate logic, thereby reducing hybrid reasoning mechanisms to a single well-defined one. The work illustrates this by presenting an OWL 2 based model of ADLs for a smart home and smart workspace scenario. Still, the authors observe that their model cannot currently support the definition of context information quality metrics or easy handling of conflicting and incomplete information, while the tree model property condition [12] of OWL 2 limits the expressiveness of the language.All of the works presented so far have put the entities of an application domain at the center of their model and tried to provide vocabularies that would cover as many context domain dimensions as possible. Only some of them [5,9] offer support to characterize meta-properties of context information (e.g. quality information). However, they do not detail how these annotations are used during an inference process.In contrast with the above mentioned approaches, other works propose focusing on predicates to describe the relations that exist between entities of an application domain. They apply the annotations (e.g. quality of information) aspect to entire context statements, rather than just entities. Most of them try to increase the expressiveness of their approaches by distinguishing between a base component (a meta-model realization), that provides a vocabulary for working with the different model elements and their properties, and an upper-component that, when extended, captures the different domain dimensions of a particular application field.One such approach is mySAM [13] which introduces an ontology model able to define arbitrary context predicates. The principal model element is the ContextAttribute, which is a general construct that can express arbitrary statements of a context domain. The ContextAttribute has properties stating its arity, the list of entities over which it applies and the value(s) it returns. The model distinguishes between a context ontology and a domain ontology. The domain ontology is used to define the actual concepts that pertain to an application domain. The context ontology contains all the ContextAttributes that apply over the domain concepts. The approach is flexible in terms of its domain modeling expressiveness, but the work does not attempt to model quality (meta-properties) of the ContextAttributes, nor does it specify how reasoning is performed with the given constructs.Fuchs et al. [14] propose a Context Meta Model capturing semantics of entities, properties and quality classes that characterize the properties. Similar to the ASC model [5], the meta model defines DataStructure classes and transformation rules that can convert from one DataStructure to another. Predicate dependencies and derivation rules are also specified in order to perform inferencing. However, the OWL-DL instantiation that the authors give to their Context Meta Model deals only with binary predicates and uses rules defined in SWRL to accomplish derivation of higher level context information, thereby limiting the expressiveness of the reasoning approach.The work in [14] is similar to another proposal of particular interest, the Context Modeling Language (CML [8]). CML builds upon the Object-Role Model (ORM) conceptual language for data modeling used in the Relational Database domain and extends it with constructs specific to the area of context representation. The basic representational unit in CML is the fact, a relationship holding between one or more entities, categorized into static, sensed, profiled or derived depending on the acquisition type. It allows expression of uniqueness constraints and fact dependencies as well as annotation of facts with quality indicators. CML also introduces a form of first-order predicate logic used to derive higher-level information (called situations). The model’s realization however was based on Relational Database schemas, thereby missing out on advantages given by implementations with a semantic dimension. A further result of this choice was that CML did not complement its context meta model with an upper-level component that would capture the concepts of a given application domain.The shift towards predicates as first class elements might render the presented models more complex in practical use. However, we consider that the benefit of explicit access to meta-properties of context information outweighs the modeling overhead, since it introduces a more feature rich basis for inferring contextual situations. We analyze some of the different reasoning approaches in what follows.Most works presented above made use of ontology definition languages (more specifically OWL-DL) to represent their models. This immediately offered the benefits of the possible description logic entailments, most notably those of maintaining knowledge consistency and instance realization.Apart from ontological approaches, many other works have taken a logic-supported rule-based view of context reasoning. For instance, SAGE [15] proposes a system using both forward chaining deductive reasoning and abductive reasoning to implement environment monitoring and control.Toninelli et al. [16] develop an access control policy model that exploits context-awareness for the specification and evaluation of the defined policies. Context-awareness in their approach is implemented by a combination of ontology modeling and logic programming to overcome limitations of pure ontology reasoning.Bikakis and Antoniou [17] use a reasoning mechanism based on the Multi-Context Systems paradigm extended with non-monotonic logic features (defeasible local rules, defeasible mapping rules) and a preference ordering mechanism in order to handle unknown, uncertain and conflicting context information. Whilst our reasoning approach does not handle non-monotonic reasoning, we address uncertain information by means of reasoning over explicit certainty annotations and manage conflicting information by detecting integrity constraint violations and using a policy-based resolution mechanism.We note that the works listed above are not specific on how or whether annotations (e.g. timestamp of creation, duration, source, quality metrics) of the processed context information are represented or used during inference. Many AmI scenarios involve utilization of sensor data which may have inherent inaccuracies. Furthermore, complex activity recognition requires the capability to reason over the temporal order and duration of context situations. A mechanism to explicitly represent, query and reason about such annotations is therefore a clear benefit.Additionally, many of the works that combine an ontology-based representation with a logic-based rule system require a transformation of knowledge representation to be performed before executing inference, thereby incurring additional runtime overhead.A more recent approach for driving inference is found in [18], where an ontology for modeling complex activities is proposed. Though restricted to the domain of activity definition, the authors propose using SPARQL through its CONSTRUCT queries as a rule language that helps reason about composition of simpler activities into more complex ones. The inherent expressiveness of the SPARQL query syntax is the main advantage of this approach, while an additional benefit is its reliance on a standard of the semantic web community which favors interoperability.Further works (e.g. EP-SPARQL [19]) considered enhancing the SPARQL standard with the ability to perform temporal reasoning tasks commonly found in event-processing systems. Others [20] made it an integral part of semantic event-driven systems, which combine static background knowledge modeled using ontologies with the complex dynamics of event processing systems.Our reasoning engine proposes an architecture and process flow similar to that of the CROCO ontology-based context management service [21]. In contrast with Croco however, our approach exposes context information meta-properties and constraint detection rules directly as part of the vocabulary of the CONSERT ontology used to build the context model of an application, thereby providing a more unified design experience.Lastly, both Croco and the majority of works in Section 2.2 offer support to further characterize context information with meta-properties (annotations) and some approaches [14] also provide vocabularies to specify the particular data types for each considered annotation. However, the mentioned works do not detail a means by which these meta-properties can be used in a structured and uniform way during an inference process (i.e., how to combine annotations of existing context information when deriving the ones for the inferred statement).To complement this, we considered taking insights from the domain of annotated RDF [22,23], itself inspired by Annotated Logic Programming [24], where formalization in terms of algebraic structures is provided for the annotation language and the corresponding deductive system. More specifically, Zimmermann et al. [22] defines representation forms and specific operators that are used to combine annotations of RDF statements during RDFS inferencing.In the earlier three sections we have seen different aspects of context model approaches and what contributions each can bring with respect to expressiveness and interoperability. Our proposed CONSERT context model and associated reasoning engine detailed in the sections that follow tries to combine the best out of three worlds.We present an ontology based solution that similar to [14] has an OWL-DL vocabulary to refer to meta-model elements including annotations and integrity constraints. Unlike [14] but similar to [8] we offer support to express context information statements of arbitrary arity and categorize them into sensed, profiled and derived ones. However, in contrast to [8], our meta-model elements are realized as an ontology which adds the inherent reasoning benefits. Additionally, we use an adapted version of SOUPA [7] as our default upper-ontology for giving a grounding to entities of the context domain of an application.In our reasoning engine we employ a rule-based deduction approach using SPARQL CONSTRUCT queries coupled with ontology reasoning. The constructs that can be used within the SPARQL WHERE statements (e.g. term comparisons, aggregation, existence verification) alongside usual basic graph patterns ensure the expressiveness of the inference language. Similar to [18], we represent the rules in an RDF serialization using a semantic web proposal called SPIN9http://spinrdf.org/.9(SPARQL Inferencing Notation). The inference mechanism moves in the direction of semantic event processing and, while it currently cannot match the processing performance reported in works such as [19,20], it offers important built-in modeling and reasoning capabilities not present in the cited works (e.g. determining the continuity of a context situation, detecting context integrity constraints – detailed in Section 7). These choices eliminate the need for knowledge representation transformations during inference and promote interoperability through use of standards.Lastly, in a manner similar to [22], we consider giving structure to the different context information annotations, setting the requirement to define specific operators that help to manipulate and combine annotation information in the derivation process. Our reasoning engine then presents the benefits this approach can bring with respect to information consistency and integrity.Before detailing our formal context modeling approach and its implementation using semantic web technologies, we introduce a scenario which is further used throughout the paper to exemplify the subjects we discuss. We use a fairly known and sought after AmI scenario: the smart conference application. We formulate the description as a series episodes that capture functionality from several points of view: user profile settings, session management, networking.Rebecca is a first time participant to the AmI conference. Upon registration she also installs a smartphone application that can support all of her interactions during the event whether on site or remotely. During setup users have the option of building a personal profile, visible only to other conference participants, that includes online contact information (e.g. email, links to professional social networks), data about affiliation and research interests. This information helps to compute participant similarities, which are used to provide recommendations for contact or short ad hoc discussion sessions between the participants.Rebecca can also indicate what role she will play in the conference: participant, presenter or session chair. She indicates she is a presenter and the application offers her the option to upload or provide a URI towards the content of her presentation. This will make it easier to retrieve it faster later on. Meanwhile, Ted arrives at the registration desk, installs the application and logs in as a session chair, which opens up further functionality for him.The user smartphones also act as an indoor localization means, since the conference is equipped with low-energy bluetooth wireless location beacons, which allow estimating the whereabouts of conference participants down to the level of specific interest areas (e.g. speaker area within a session room, the reception desk, ad hoc discussion areas).The first session is about to start. Ted is chairing and he starts introducing Rebecca as the first speaker. He then marks her presentation as active through the application and this automatically sets up an internal clock which will help Ted to keep track Rebecca’s presentation time. Rebecca walks to the front of the room and is detected by a location beacon as being in the speaker area. Since Ted marked her presentation as active, the application concludes that her presentation must start and automatically sends Rebecca’s slides to the computer connected to the session room’s projector.During the presentation, all persons detected as being in a session room with an active presentation are deemed by the application as being busy and a default action is to automatically mute the ringtone of the phone.Ted receives a notification as Rebecca’s presentation nears its end. Her work was very interesting so she receives a lot of questions. Ted agrees to prolong her presentation time and indicates a 5min extension within the application, such that the following presentations get rescheduled correspondingly.Using the similarity check functionality, the application determines that Rebecca and Steve, another conference participant, have a very high match. Both receive a recommendation to get in contact with each other. The application suggests they meet at an ad hoc discussion area that is closest to their current position. As Rebecca and Steve arrive and start talking, based on the proximity data and noise level picked up by nearby embedded microphones the support application concludes that the users have started a discussion. This again automatically changes their smartphone availability status such that their conversation is not interrupted.While most of the previously described situations do not represent totally new scenarios for conference management applications, they do contain a level of complexity that allows us to demonstrate the benefits of our approach in terms of modeling context domain statements, manipulating annotations, assigning constraints and expressive inference rules. Section 6 makes an explicit possible design of the scenario with help from our model.We now present the formal model of context representation and reasoning (called CONSERT, an abbreviation from CONtext asSERTion), focusing on the key elements. Each concept is exemplified from the scenario of the previous section. The implementation of this model based on semantic Web Technologies is presented in Section 5.

@&#CONCLUSIONS@&#
Our goal in this work was to obtain a context modeling approach that is able to address the challenges of expressiveness in representation and reasoning by using technology standards of the semantic web, which promote interoperability and ease of usage in open application environments. The Smart Conference scenario implementation described in this paper highlights the flexibility in representation offered by our proposed context meta-model taking the form as the CONSERT Ontology. We have shown how arbitrary arity statements, specifications for structured annotations and integrity constraints ranging over both domain and meta-property information are all addressed with our model. We then introduced the CONSERT engine, a service component that, through its execution cycle, leverages the CONSERT Ontology to provide support for rule-based event processing and ontology reasoning, structured annotation manipulation and constraint detection. Further, it exposes and interacts with a variety of service interfaces that connect the engine to an external management platform allowing an application to control different aspects of the engine execution at runtime. Based on initial testing, we identified existing limits and means by which to increase engine throughput.We consider that the presented work is promising and has the potential of being useful to support context modeling in ambient intelligence computing.