@&#MAIN-TITLE@&#
A type-safe embedding of SQL into Java using the extensible compiler framework J%

@&#HIGHLIGHTS@&#
The SQL queries are syntactically checked.Optionally the SQL queries can be validated against a specified SQL database schema.Each SQL query can be separately configured with different compile-time features.The integration between the Java and SQL is type-safe.The compiler automatically generates secure code against SQL injection attacks.

@&#KEYPHRASES@&#
Domain-specific languages,Programming languages,

@&#ABSTRACT@&#
J% is an extension of the Java programming language that efficiently supports the integration of domain-specific languages. In particular, J% allows the embedding of domain-specific language code into Java programs in a syntax-checked and type-safe manner. This paper presents J%׳s support for the sql language. J% checks the syntax and semantics of sql statements at compile-time. It supports query validation against a database schema or through execution to a live database server. The J% compiler generates code that uses standard jdbc api calls, enhancing runtime efficiency and security against sql injection attacks.

@&#INTRODUCTION@&#
Domain-specific languages (dsls) [1–4] are designed specifically to address problems in a particular domain. Furthermore, they are used to improve the efficiency in a software development process [5,6]. Well-known dsls include regular expressions and sql.General-purpose languages (gpls) have a wider scope, providing a set of processing capabilities applicable to various problem domains [4]. Typical examples of gpls are Java, C++ and Scala.Modern software engineering paradigms indicate that dsls are often used together with gpls [7–10]. The integration of sql with various gpls constitutes a field that drew the attention of researchers and practitioners for many years [11–14]. This integration in the context of Java is realised with a jdbc (Java Database Connectivity) application library [15]. By using it, the programmer has to pass the sql query to the database as a string. Through this process, the Java compiler is completely unaware of the sql language contained within the Java code and usually many sql syntax and type errors are detected at runtime. Such errors remain undetected, even with extensive testing during the development process.J% (pronounced J-mod and stands for modular Java) is an extension of the Java programming language [16] initially discussed in reference [17]. Its main contribution resides in the development of a generic framework, by which arbitrary dsls can be embedded in Java programs in a type-safe, syntactically correct fashion. dsl can be included on demand as module plug-ins.This work analyses the case of sql integration. The prototype implementation focuses on mysql database backend, but in the future, we plan to expand the module׳s support to other rdbms too. The key contribution points are the following:Query validation:The sql queries are syntactically checked, and optionally can be validated against a specified sql database schema. In addition, the queries can also be executed in a live database environment at compile-time to provide real-world testing.The integration between the two languages is type-safe, and all problems are reported at compile-time. The current implementation uses J%׳s type mapping facility, which enables the declaration of compatible type relations between languages. This approach follows the standard type mapping conventions proposed in the jdbc apis (Application Programming Interfaces) [15].Each sql query can be separately configured with different compile-time and runtime features. This is implemented with the utilisation of the external configuration concept, which was introduced by the J% compiler architecture [17].The current jdbc standard does not support the sql operator in conveniently. Our approach supports it in a better, type-safe way. It simplifies the usage of this operator, which normally requires the programmer to write additional code to handle the translation from the Java composite types to an sql set.The sql module uses the existing jdbc specification and does not require from programmers to learn and understand new apis. The generated code utilises prepared statements, therefore securing the application against sql injection attacks.

@&#CONCLUSIONS@&#
The contribution of J% sql module is that it supports embedding of sql code in Java programs in a type-safe and syntax checked way. Each sql statement is checked and all errors are reported at compile-time. In addition, Java types are mapped into sql types, and all interactions between the two languages are also checked at compile-time.The integration of the sql query language to the J% compiler system provides developers with some notable features. The first involves an extensive query configuration. In essence, each query can be configured with different code generation and testing features. This is achieved with the utilisation of the external configuration concept introduced by our approach. Query validation is another key feature of J%. If this feature is enabled, queries can be checked against a specified database schema, which is provided as part of the query configuration.The J% sql module utilises the existing jdbc specification, without alienating the developer with new apis or frameworks. In addition, our approach supports the transparent usage of prepared statements. Furthermore, J% employs the performance optimisations offered by the prepare statements compilation in a transparent manner. Finally, by using prepared statements, J% provides shielding against input validation attacks. This feature could be very useful, especially in the case of web applications.One of the disadvantages of our approach is the fact that for every single query the developer must define a new external type, which may lead to significant external type pollution in large projects. Features like type mapping and compile-time configuration, greatly support the development process and permit the implementation of advanced features, such as live database testing in the sql module. To assess J%׳s impact to the software development process, more experiments must be performed; thus the measurements presented here were indicative.