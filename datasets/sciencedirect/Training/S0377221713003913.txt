@&#MAIN-TITLE@&#
Machine-part cell formation using biclustering

@&#HIGHLIGHTS@&#
In this paper we apply biclustering to part-machine grouping problem.Biclustering has been almost exclusively applied to DNA microarray analysis.We prove the validness of the proposed technique.Experimental results demonstrate that it outperforms similar ones for known datasets.It can be applied to various machine-part cell formation problems.

@&#KEYPHRASES@&#
Flexible manufacturing systems,Data mining,Group technology,Cell formation,Biclustering,

@&#ABSTRACT@&#
Cellular manufacturing is the cornerstone of many modern flexible manufacturing techniques, taking advantage of the similarities between parts in order to decrease the complexity of the design and manufacturing life cycle. Part-Machine Grouping (PMG) problem is the key step in cellular manufacturing aiming at grouping parts with similar processing requirements or similar design features into part families and by grouping machines into cells associated to these families. The PMG problem is NP-complete and the different proposed techniques for solving it are based on heuristics. In this paper, a new approach for solving the PMG problem is proposed which is based on biclustering. Biclustering is a methodology where rows and columns of an input data matrix are clustered simultaneously. A bicluster is defined as a submatrix spanned by both a subset of rows and a subset of columns. Although biclustering has been almost exclusively applied to DNA microarray analysis, we present that biclustering can be successfully applied to the PMG problem. We also present empirical results to demonstrate the efficiency and accuracy of the proposed technique with respect to related ones for various formations of the problem.

@&#INTRODUCTION@&#
Many modern flexible manufacturing techniques, e.g. Group Technology, are based on the formation of manufacturing cells, taking advantage of the similarities between parts. Cellular manufacturing (CM) is the cornerstone of such manufacturing techniques. Actually, it has been recognized as the second generation of Group Technology (Wang and Li, 1991) while in the first generation only part families were formed based on similar geometric shapes (see e.g. Kuo et al., 2001) without physically changing the machine layout. CM aims at producing small batches of a large variety of part types by grouping parts with similar processing requirements or similar design features into part families and by grouping machines into cells associated to these families. CM allows for reduced set-up times, smaller economic lot sizes, lower work-in-process inventories, reduced material-handling costs, simplified material flows, reduced tool requirements, faster throughput, increased quality, better control of shop floor, etc. (see e.g. Chu, 1997; Wemmerlöv and Johnson, 1997).One of the first problems faced in implementing CM is the cell formation (CF). The key step of CF concerns the identification of the part families and the machine cells on which these parts are to be processed, which is also called Part-Machine Grouping (PMG) problem. Then, CF requires assignment labor and other resources to each machine cell, layout decisions, evaluation of capacity, minimization of load imbalances, material flows, etc. Most of CF procedures are applied to the binary part–machine incidence matrix (PMIM). A binary PMIM represents the relationship between each part and a set of machines (e.g., a part routing).The key step of CF, the PMG problem, is a hard problem (see e.g. Papaioannou and Wilson, 2010). Since a brute force algorithm, based on testing all possible part families associated with all possible machine cells, is completely infeasible, the different CF procedures are based on heuristics and near-optimal solution approaches. In this paper, a new approach for solving the PMG problem is proposed which is based on biclustering. Biclustering is a methodology where rows and columns of an input data matrix are clustered simultaneously (see Busygin et al. (2008) and Madeira and Oliveira (2004) for recent surveys). A bicluster is defined as a submatrix spanned by both a subset of rows and a subset of columns, such that objects represented by the first are the most similar to each other when compared over the latter. As in clustering, similarity is calculated by using a (dis)similarity measure (see e.g. Boutsinas and Papastergiou, 2008).Most interesting proposed biclustering models are proved to be NP-complete (see e.g., Tanay et al., 2002) by reduction to finding the maximum edge biclique in a bipartite graph. Thus, usually, the different biclustering algorithms are based on heuristics. We consider two different approaches in detecting biclusters. The first one is adopted by algorithms trying to detect “good” biclusters using an objective function to measure the quality of the biclusters. They start with a set of initial (usually randomly selected) biclusters or one large bicluster which is usually the whole input data matrix and then try to improve the quality of these biclusters by altering them (e.g. removing, adding, or permuting rows and columns). Such algorithms do not guarantee the detection of the best biclusters. They provide only an approximate answer, however they have a low time complexity. The second approach is adopted by algorithms trying to exhaustively enumerate all candidate biclusters in order to guarantee the detection of the best biclusters. Since there are (2|R|−1)*(2|C|−1) possible biclusters in an input data matrix D(R,C), they are based on a theory to reduce the search space.The key idea of the proposed technique is based on the observation that a part family allocated to a machine cell forms straightforwardly a bicluster. In Section 2 we present related techniques for solving the PMG problem while in Section 3 we present the application of biclustering to the PMG problem. In Section 4 we present empirical results which demonstrate the efficiency and accuracy of the proposed technique. Finally, in Section 5, we discuss the application of the proposed technique to various formations of the PMG problem and we conclude.

@&#CONCLUSIONS@&#
