@&#MAIN-TITLE@&#
Constrained binary artificial bee colony to minimize the makespan for single machine batch processing with non-identical job sizes

@&#HIGHLIGHTS@&#
We propose artificial bee colony (ABC) approach to minimize the makespan for a single batch-processing machine.ABC is capable of solving problems with 50 jobs or more within reasonable time.We notice throughout the experimentations that the solution quality and run time are highly sensitive to the choice of parameters of the ABC method.

@&#KEYPHRASES@&#
Single machine bath processing,Non-identical jobs,Artificial bee colony heuristic,

@&#ABSTRACT@&#
This paper proposes an artificial bee colony approach to minimize the makespan for a single batch-processing machine. The single batch-processing problem is characterized by discontinuity in the objective function and having integer variables. Since the problem under study is NP-hard, an artificial bee colony approach is proposed. The penalty function method is used to convert the constrained problem to unconstrained problem, which is then solved by the ABC algorithm. A procedure to generate initial solutions is presented, which is based on filling partially filled batches first. The analysis in the article shows that the colony size, the value of the penalty parameter, the penalty function iteration, the ABC iteration, and maximum trials per food source all have a significant effect on the performance of the ABC algorithm; however, no pattern can be established.

@&#INTRODUCTION@&#
A batch-processing machine is one in which jobs are processed simultaneously as a batch [1,2]. Some practical applications where batch-processing machines used are metal working, heat-treating ovens, chemical processes performed in tanks or kilns, testing process of electrical circuits, wafer fabrication process, etc. [2–5,33,34]. Applications of batch processing in non-industrial settings are becoming more prevalent in parallel computing. Lets expand on the last application of batch processing. Parallel computing permits the break down of large computation tasks into smaller pieces of calculation instructions that are spread over 2 or more computation processing machines so that these instructions can be processed concurrently. When different instructions are processed in parallel, the time to carry out the computation task as a whole is reduced. In the traditional setup of sequential processing, calculation instructions are aligned in a sequence so that no piece of code can be processed unless the previous piece has been completed. The analogy between heat treatment and parallel computing can be illustrated by considering one computation task, which consists of a number of calculation instructions. Consider the computation task in Fig. 1that has eight instructions. By applying certain scheduling scheme, the instructions are assembled into batches so that the number of instructions in a batch does not exceed 3, which is equal to the number of parallel computers. The processing time of a batch is equal to the processing time of the longest instruction in the batch. Therefore, to optimize the processing time of the computation task, long instructions are grouped together into batches, filling empty batches first, while trying not to exceed the capacity of the parallel computers.This paper considers a scheduling problem for a single machine that can process jobs in batches. The batch-processing machine can process a batch of jobs, as long as the number of jobs and the total size of all the jobs in a batch do not violate the machine's capacity. The processing time of the job and its size are known. The processing time of a batch is the longest processing time among all the jobs in the batch. The objective is to minimize the makespan.Batch-processing machine problems can be classified into problems with constant batch processing time and varying batch-processing time. In the varying batch-processing time case, the processing time of a batch depends on the jobs that are assigned to the batch; and the jobs complete processing only when the longest processing job is completed. Constant batch-processing time problems assume that the processing times are independent of the jobs assigned to the batch. Chen et al. [6], Cheng et al. [7], Husseinzadeh et al. [8], Mathirajan et al. [9], Parsa et al. [10], Ramasubramaniam et al. [11], and Wang and Chou [12] are among the most recent articles that deal with problems in which the processing time of the batches is dependent on the batches formed. Sung et al. [13], Su [14], and Tang and Liu [15] have dealt the problem with constant batch-processing times. In this paper, we consider the varying batch-processing time case.The problem of minimizing the makespan for single machine batch processing with non-identical job sizes is NP-hard [4,16,17]. Heuristics based solution methods have been proposed to solve machine batch processing scheduling, such as simulated annealing [4,18–20], genetic algorithms [2,5,17,21,22], tabu search [23,24], and ant colony [6,25].The artificial bee colony (ABC) is a relatively new member of swarm intelligence. ABC tries to model natural behavior of real honey bees in food foraging. Honey bees use several mechanisms like waggle dance to optimally locate food sources and to search new ones. This makes them a good candidate for developing new intelligent search algorithms. The foraging behavior, learning, memorizing and information sharing characteristics of bees have recently made ABC one of the most interesting research areas in swarm intelligence. More information about ABC can be found in [26–28].In this paper, we propose a constrained binary ABC based heuristic for the solution of the makespan minimization for single machine batch processing with non-identical job sizes. The paper is organized as follows: Section 2 describes the problem; Section 3 discusses the artificial bee colony algorithm; and Section 4 presents the numerical analysis.In the single machine batch processing problem, a grouping of jobs into batches needs to be found that will minimize the makespan of the schedule cmax. Each job j∈J has a processing time pjand a job size sj. The total capacity of the machine is S. Since any batch is formed only if it is needed, the set of batches B must satisfy∑j∈Jsj/S≤B≤|J|/(S/maxj∈Jpj). The decision variables xj,bare defined in Eqs. (1) and (2):(1)xj,b=1ifjobjisassignedtobatchb0otherwise(2)yb=1ifbatchbisformed0otherwiseThe processing time of batch b∈B is cb, which is equal to the processing time of the longest job in the batch, cb=maxj∈J(xj,bpj). In machine batch processing scheduling models, the makespan is used as a measure of the quality of the schedule; see for example [29–31]. For the single machine batch processing – SMBP, the mathematical formulation can be written as:(3)Minimizecmax=∑b∈BcbSubject to(4)∑b∈Bxj,b=1∀j∈J(5)∑j∈Jsjxj,b≤Syb∀b∈B(6)cb≥pjxj,b∀j∈J,b∈B(7)xj,b∈{0,1}∀j∈J,b∈B(8)yb∈{0,1}∀b∈BThe objective function (3) is to minimize the makespan. Constraint set (4) ensures that job j is assigned to only one batch. Constraint set (5) ensures that machine capacity is not violated when jobs are assigned to a batch. Constraint set (6) finds the processing time of each batch. Constraint sets (7) and (8) enforce binary restrictions on the decision variables.The ABC algorithm starts with scout bees being placed randomly on the search space. The ABC algorithm tries to collect information about the behavior of the objective function from many trials and to communicate the gathered information to the new set of trials. Section 3.1 outlines the general steps of the ABC algorithm; and Section 3.2 presents the proposed ABC algorithm for the solution of the single machine batch processing problem.The ABC algorithm has the following main steps:1.The algorithm starts with a random initialization of bees, which correspond to solutions. Every food source has only one employed bee.The objective function is evaluated for these bees.The probability associated with each of the food sources is measured, usingℙi=F(Xi)/∑k∈SF(Xk)for i∈S; where Xiis a solution,F(Xi)is the objective function, andSis the set of solution indices.An onlooker is assigned to a food source with a chance proportional to the probability associated with this food source.The onlooker searches randomly in the neighborhood of the solution assigned to find a better solution.If a better solution is found around this point, the solution is changed to the new position, and the onlooker returns to the hive.When the solution Xicannot be improved after certain number of trials, Xiis abandoned and the employed bee converts to a scout.The size of the food sources that can be explored simultaneously is given by the setS. When a random solution Xiis generated in step 1, the solution has to be feasible. If a random feasible solution cannot be easily generated, a penalty P(Xi) is added to the fitness function to account for this violation. As the algorithm progresses, this violation will drop to zero and the optimal solution is found. The probabilityℙisuggests a ranking of the food sources that will be helpful to onlooker bees to choose from the available food sources. In objective minimization problems,ℙiis high for high fitness values; so the best solutions will be the ones with the smallerℙivalues. Therefore, the form of probability function that can work with the minimization problem can be defined in Eq. (9).(9)ℙˆi=F(Xi)∑k∈SF(Xk)After an onlooker is assigned to a food source, the onlooker searches around this food source for a source with more nectar, i.e., for better objective function value. A new food source around the current source is selected randomly using Eq. (10).(10)Xinew=Xi+U[−1,1](Xi−Xk)In this expression, U[−1,1] is a uniform random number generator with values between −1 and 1. The index i is selected randomly, and index k is selected randomly among the top best solutions. In essence, by Eq. (10), the neighborhood solution is a combination of the current solution and a weighted deviation of the current solution from a superior solution. The value ofXinewcan be restricted to the range [−Xmax, Xmax], where Xmax is a user supplied value.If the neighborhood search has led to a solutionXinewthat is better than the current solution Xi, the neighborhood solution is accepted and the current solution is replaced by the new solution,Xi=Xinew. However, if the neighborhood solution is worse than the current solution, the neighborhood solution is discarded and the step for generating a new neighborhood solution is applied again to generate a new neighborhood solution. The ABC algorithm has a maximum number of unsuccessful trials around the current solution; this is specified by limit; if no better solution is found after limit trials, this solution (food source) is abandoned and the assigned onlooker becomes a scout and is assigned to a new random solution.From the explanation of the ABC algorithm above, three control parameters must be specified: the number of food sources which is equal to the number of employed bees, the maximum number of trial neighborhood solutions limit, and the maximum number iterations.For the implementation of ABC algorithm, certain procedural instructions must be defined; these instructions are: the definition of the objective function, initial solution generation rule, selection of candidate solutions for further exploration by onlookers, the local greedy search heuristic, the abandonment of a solution and the generation of a new random solution, and the termination of the algorithm. In the following subsections, these instructions will be explained.For SMBP, the objective function Eq. (3) is to minimize the makespan; and the makespan is defined as maxb∈B,j∈J(xj,bpj). Define the solution set π to SMBP that will be feasible to Eq. (4) but not feasible to Eq. (5). The violation of Eq. (5) can be added to the objective function as a penalty that will be systematically reduced to zero. Define the quadratic penalty function Eq. (11) for solution set π:(11)P(π)=∑b∈Bmax0,∑j∈J(xj,b,yb)∈π(sjxj,b−Syb)2When π is feasible, P(π)=0; and when π is not feasible, P(π)>0. Now, the composite function is defined in Eq. (12).(12)T(π,r)=maxb∈B,j∈Jxj,b∈π(pjxj,b)+rP(π)The penalty parameter r>0 is started small and systematically increased to drive P(π) to zero. The steps of the penalty function method are given in Algorithm 1:Algorithm 1Penalty functionInitializationr←r1, for r1 smallm←1π0←any arbitrary initial solution setwhile termination criterion not satisfiedSolve minT(π, rm) starting from πm−1πm←the optimal solutionm←m+1rm←αrm−1 for α>1endIn this article, we propose an ABC algorithm to solve minT(π, rm) in Algorithm 1.A scheduling heuristic for single machine batch processing can be used to generate an initial solution. The FFD (First Fit Decreasing) algorithm is one of the best known algorithms in bin packing [32]. In this heuristic, we select the job with the largest size and place it into the first batch that has a remaining space enough to accommodate this job. If the job does not fit in any existing batch, we create a new batch, and we repeat this assignment procedure until all jobs have been assigned to a batch.In our ABC algorithm, we modify the FFD algorithm so we can get a solution, which is not necessarily feasible, with the available open batches. We will call this FFDFB algorithm, where FB stands for fixed number of batches. The steps of FFDFB algorithm are shown in Fig. 2.FFDFB does not create a schedule that will satisfy the batch capacity constraint in Eq. (5); but this schedule will be reasonable to start the ABC algorithm with. An example of a schedule created by FFDFB with 5 batches and 15 jobs is illustrated in Fig. 3. Repeating the steps 1–6 again will not generate a different solution; therefore, we have to change the order of the batches in a random fashion to generate a different solution, which corresponds to a different food source.The social interaction of the honey bee community is exemplified in the ABC algorithm by the ranking of food sources in the order of their p values. Onlookers choose among the available sources of food in a probability proportional with p. But since SMBP is a minimization problem, the p values must be calculated as in Eq. (9), which gives a higher p value for smaller objective function values.After an onlooker has selected a food source, local exploration around the food source begins. A greedy search heuristic is applied to find a better neighborhood solution. We propose a move operation for our ABC algorithm. Our greedy search heuristic will move one job to another batch in a way to minimize the penalty term defined in Eq. (11). The penalty value will be reduced if the largest job in the batch with the largest penalty value is moved to another batch. The steps of the move operation are described by Algorithm 2.Algorithm 2Local greedy search heuristicInitializationLet b* be the batch with the largest penalty value; i.e.,∑j∈Jsjxj,b*−Syb*>∑j∈Jsjxj,b−Sybfor b≠b*Let b** be the batch with the largest size not filled; i.e.Syb**−∑j∈Jsjxj,b**>Syb−∑j∈Jsjxj,bfor b≠b**ifb* is emptySelect random job j* in b≠b**Move job j* to batch b**elseSelect random job j** in b*. Any job must have an equal chance of being selectedMove job j** to batch b**endIn Algorithm 2, we recommend that the candidate job j* or j** is selected randomly from the jobs in the current batch. We have found through experimentation that targeting only the jobs with the largest size will not be effective in reducing the penalty value, and therefore producing a better neighborhood solution. If only large jobs are moved, then most likely the same jobs will be selected in one of the following iterations of the ABC algorithm.A food source is explored by an onlooker with trials equal to limit, which is a parameter of the ABC algorithm. When the onlooker finds a better food source, it returns to the hive to share the information about the new food source with other onlookers. If the onlooker cannot improve over the current food source and the number of trials have been reached, this food source is abandoned and the onlooker coverts to a scout. The scout is then assigned a random solution. In our ABC algorithm, the random solution is generated by assigning each job to a randomly selected open batch; this continues until all jobs are assigned. The ABC algorithm is terminated when a pre-specified number of iterations has been reached.The ABC algorithm is illustrated in Algorithm 3.Algorithm 3ABC algorithmInitializationGenerate an initial solution xi={xi,j,b}, for i∈S using FFDFB algorithmSetxipbest←xi.Evaluate Eq. (12)(Tgbest, xgbest)←min(Ti;xi)r←r1, for r1 small.form=1 to mmaxforl=1 to lmaxfori=1 to |S|pˆi←1−TiΣk∈STkifpˆi>uniform(0,1)ρ←0forη=0 to limitApply the heuristic Algorithm 2xinew←thenewsolutionTinew←thecorrespondingobjectivefunctionvalueifTinew≥Tiρ←ρ+1elseρ←0xi←xinewTi←TinewifTipbest>TiTipbest←Tixipbest←xiifTgbest≥TipbestTgbest←Tipbestxgbest←xipbestendendendendifρ=limitxi← a random solution as illustrated in Section 3.2.5Calculate TiifTipbest>TiTipbest←Tixipbest←xiifTipbest>TipbestTgbest←Tipbestxgbest←xipbestendendendendendendrm+1←αrm, for α>1xi←xipbestendThe solution quality and run time are affected by the following parameters: number of bees (population size), the penalty factor r, mmax, lmax, α, and the number of attempts of searching around the neighborhood solution (limit). The run time of ABC is compared with that of CPLEX optimizer. CPLEX is the implementation of the simplex method for the solution of linear mathematical models, which can have discrete variables. To test the effectiveness of ABC approach, the algorithm will be run on different number of jobs; and the processing times and sizes of jobs are generated from the uniform distribution as specified in Table 1.The number of jobs selected for the analysis is between 10 and 200. The batch size is set to 60. The ABC algorithm has been developed under the GAMS environment. The computer codes have been run on a PC with a 2.66-GHz processor speed and XP Pro Win OS. The comparison between the ABC algorithm with CPLEX is shown in Table 2. The best values for the ABC parameters are also shown. For the values that have been selected for the processing times and sizes, CPLEX is not capable of solving problems 50 jobs and beyond. However, CPLEX shows to be faster than ABC for problems with 30 jobs and less.The test problems show that the colony size needs to be increased with the increase in the number of jobs. Also observed, the penalty iteration must be set to larger values as the number of jobs increases. When the ABC iteration parameter has been examined, it shows that increasing the number of jobs will require increase the value for the ABC iteration; and the same observation applies to the number of exploration trials.Setting the best ABC parameters means moving faster toward the best solution. We have examined how ABC performance shows sensitivity to the values given to its parameters. We consider the sensitivity of the following ABC parameters: bee colony size |S|, penalty iterations mmax, ABC iterations lmax, penalty parameter r, and limit. To conduct the analysis, we take the 100-jobs instance. The parameter analysis is shown in Fig. 4. The result of the parameter analysis shows that there is no trend that ties the parameter values and the improvement in the objective function value. But it has been noted that the feasibility of the solution is affected by the choice of values given to the parameters.

@&#CONCLUSIONS@&#
An ABC approach has been developed to minimize the makespan for a capacitated batch-processing machine that processes jobs of non-identical size. Random sets of instances have been generated to test the effectiveness of ABC. The run times and optimal solutions from ABC are compared with CPLEX results; and the results show that ABC algorithm can solve instances with 50 jobs and more within reasonable time. It has been proven throughout the experimentations that the solution quality is highly sensitive to the choice of parameters of the ABC method; and the best values to the parameters change with the change in the number of jobs. This work can be extended by considering the performance of ABC for the problem to optimize other performance measures with/without job release times.