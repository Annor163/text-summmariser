@&#MAIN-TITLE@&#
Applying geometric constraints for perfecting CAD models in reverse engineering

@&#HIGHLIGHTS@&#
Reverse engineered CAD objects get perfected using constrained fitting.Various local and global constraints are detected and enforced upon segmented data.The selection of meaningful subsets of “likely” constraints is an automatic process.Best alignments, reference grids and optimal symmetry planes are computed.Special measures for partial and approximate constraint satisfaction are proposed.

@&#KEYPHRASES@&#
Reverse engineering,Constrained fitting,Approximate and partial symmetry,

@&#ABSTRACT@&#
Graphical abstract

@&#INTRODUCTION@&#
Reverse engineering (digital shape reconstruction) is an expanding and challenging area of Computer Aided Geometric Design [2]. This technology is utilized in various applications where a given physical object is scanned in 3D, and a computer representation is needed in order to perform various computations. A wide range of applications emerges in engineering, medical sciences, and to preserve the cultural heritage of mankind [3].For CAD models the process can be split into the following phases:(1) 3D data acquisition (scanning), (2) filtering and merging point clouds, (3) creating triangular meshes, (4) simplifying and repairing meshes, (5) segmentation (partitioning into disjoint regions), (6) region classification, (7) fitting primary (functional) surfaces, (8) fitting connecting surfaces (e.g. fillets), (9) perfecting surfaces (including constrained fitting and surface fairing), (10) creating a B-rep model (i.e., stitching surfaces and building up a topological structure), (11) exporting to CAD/CAM systems.In the majority of engineering applications, it is crucial that the reconstructed models satisfy various geometric constraints. The primary surfaces—and their associated directions and axes, if any—must obey various rules, such as being orthogonal, parallel, tangential, symmetric, concentric, and so on. If we approximate the segmented regions separately, one by one, we may obtain inaccurate surfaces and poor CAD models. This is due to the noise and incompleteness of measured data, and the numerical nature of the subsequent algorithmic phases, such as merging multiple data sets, decimating and repairing triangular meshes, segmentation, and least-squares fitting without constraints.The goal of our research is to perfect CAD models created from measured data. We introduce techniques to automatically detect likely engineering constraints, and enforce these by performing constrained fitting. We work with the following assumptions.(i) Our input is a segmented mesh containing a set of regions. In most cases, this means that the highly curved triangle-strips corresponding to fillets or sharp edges get removed, and thus a numerically stable set of disjoint regions is obtained that corresponds to the face structure of the final B-rep model—an example is shown in Fig. 1.(ii) By means of classification, a surface type has already been assigned to each region providing the best local approximation to the underlying data points.(iii) We deal with the most frequent engineering surfaces: planes, quadric surfaces (cylinders, cones, spheres), extruded and drafted surfaces (defined by a direction vector and a profile), rotational surfaces (defined by an axis and a profile), and the remaining surfaces considered as free-form. (Constraints for free-form surfaces and general sweeps are going to be subject of future research.)Let us take the above simple CAD model and look at a few problems that motivate our work. This object has been measured in a general 3D workspace, so its base surfaces are not aligned to an optimal coordinate system. The planar surfaces at the bottom and top (green) are not perfectly parallel, neither perpendicular to the planar faces at the left and right sides. The horizontal cylindrical holes (yellow) are unlikely to share the same axis and radius. The two extruded surfaces (beige) on the top may have two slightly different profiles and directions of extrusion. The two vertical cylinders (yellow) in Fig. 1(b) will not be exactly concentric, their axis will not necessarily be contained in the plane of symmetry, and will not be perpendicular to the top planar face (green), and so on. Nothing guarantees that the reconstructed object will be symmetric.Our proposed techniques are based on recognizing the most likely constraints using the initial parameters of individually fitted surfaces. We select groups of relevant surfaces that are likely to comprise a set of parallel/orthogonal entities, share common axes and directions, force profile curves to be identical or symmetric, and so on; then refit while maintaining these constraints. We also search for likely best-fit coordinate systems that align the majority of surface elements and refit accordingly. We locate relevant surface groups that are found fully or partially symmetric and enforce symmetry accordingly. We attempt to compute a global reference grid, where the dimensions match a well-defined grid-size, that likely corresponds to the original design intent, and snap the related elements. All these problems are converted into solving a large system of non-linear algebraic equations.Handling constraints may seem relatively easy for a human engineer, when the constraint types and the set of relevant surfaces are explicitly specified. However, this is fairly difficult for a program, where even the group of surfaces is unknown for which the constraints needs to be set up. While the majority of commercial systems offers a wide range of operations to tweak surface parameters directly, here we search for automatic techniques, that can save a large amount of manual work and reduce errors. In this context users remain involved at two levels: (i) prescribe “likelihoods” by setting various tolerances (depending on the quality of measured data and the dimensions of the object), and (ii) check and approve perfected surface geometries, as constrained fitting is moving forward.The paper is structured as follows. In Section 2 previous work is reviewed. In Section 3, the method of Benkő et al. [1] is revisited, as this constitutes the basis of the current work. Section 4 deals with local constraint detection and satisfaction. In Sections 5–7 algorithms are presented to compute global constraints that relate to the whole, or at least large parts of the object including best-fit coordinate systems, reference grids and symmetry planes. Test examples at the end of each section illustrate the results.

@&#CONCLUSIONS@&#
