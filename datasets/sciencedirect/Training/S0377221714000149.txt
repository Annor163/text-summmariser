@&#MAIN-TITLE@&#
Car sequencing versus mixed-model sequencing: A computational study

@&#HIGHLIGHTS@&#
We compare the solution quality of mixed-model sequencing (MMS) and car sequencing (CS).We study several variants of CS with different sequencing rule generation approaches and different objective functions.Sequences obtained by using CS lead to at least 15% more work overload than solution found by MMS.CS is not able to produce competitive results in terms of solution quality compared to MMS.

@&#KEYPHRASES@&#
Scheduling,Mixed-model assembly line,Car sequencing,Mixed-model sequencing,

@&#ABSTRACT@&#
The paper deals with the two most important mathematical models for sequencing products on a mixed-model assembly line in order to minimize work overload the mixed-model sequencing (MMS) model and the car sequencing (CS) model. Although both models follow the same underlying objective, only MMS directly addresses the work overload in its objective function. CS instead applies a surrogate objective using so-called sequencing rules which restrict labor-intensive options accompanied with the products in the sequence. The CS model minimizes the number of violations of the respective sequencing rules, which is widely assumed to lead to minimum work overload. This paper experimentally compares CS with MMS in order to quantify the gap in the solution quality between both models. The paper studies several variants of CS with different sequencing rule generation approaches and different objective functions from the literature as well as a newly introduced weighting factor. The performance of the different models is evaluated on a variety of random test instances. Although the objectives of CS and MMS are positively linearly correlated, results show that a sequence found by CS leads to at least 15% more work overload than a solution found by MMS. For none of the considered test instances and for none of the three different objective functions, CS is able to produce competitive results in terms of solution quality (work overload) compared to MMS. The results suggest that decision makers using CS should investigate whether MMS would lead to better sequencing orders for their specific instances.

@&#INTRODUCTION@&#
On a mixed-model assembly line, different car models are produced in facultative sequence with a lot size of one. The models vary in the number of options and therefore require different processing times at the line’s stations. Since a station is balanced in terms of average production time, a sequence with consecutive work-intensive models could lead to a work overload of the line operators if an assembly task cannot be finished within the station limits. Work overload has to be compensated, e.g., by employing additional utility workers or stopping the line.In order to minimize the amount of work overload, two approaches are present in the literature mixed-model sequencing (MMS) and car sequencing (CS). Although both follow the same underlying objective, their approaches are different. MMS (Tsai, 1995; Wester & Kilbridge, 1964) directly minimizes the amount of work overload by explicitly considering processing times, worker movements, station borders and other operational characteristics of a line. This level of detail results in a high effort for data collection and computation time. CS (Drexl & Kimms, 2001; Parrello, Kabat, & Wos, 1986) uses a more simplified surrogate objective for work overload and applies sequencing rules. A sequencing rule restricts the maximum occurrence of options in any subsequence of defined length. The aim is to find a production sequence with a minimum number of rule violations. Since CS is more aggregated than MMS, its data requirements are lower and the evaluation of sequences is faster. Furthermore, sequencing rules seem to be more intuitive to human decision makers.In the past decade, CS experiences more attention in the literature, mainly due to its practical relevance. For instance in 2005, the automobile manufacturer Renault launched the ROADDEF’2005 contest, where the aim was to optimize real-world CS instances from Renault’s plants (Solnon, Cung, Nguyen, & Artigues, 2008). Puchta and Gottlieb (2002) presented several other real-world CS instances from a German car manufacturer. However, the CS literature almost exclusively deals with different solution approaches, leaving the question open: to what extent does the surrogate objective function (minimizing rule violations) lead to the underlying goal of minimizing work overload. The accuracy of CS in identifying sequences with minimum work overload depends on the type of sequencing rules used and the manner in which rule violations are evaluated by the objective function. In the literature, two rule generation approaches – one by Bolat and Yano (1992b) and another by Golle, Boysen, and Rothlauf (2010), the multiple sequencing rule approach (MSR) – and three commonly used objective functions for CS have been proposed.In this paper, we examine and compare the solution quality (work overload) of CS and MMS. CS is applied with different combinations of objective functions and different types of sequencing rules as well as with a newly introduced weighting factor. As CS objective functions we use the sliding window (SW) objective function (Fliedner & Boysen, 2008; Gagne, Gravel, & Price, 2006; Gottlieb, Puchta, & Solnon, 2003), an objective function introduced by Fliedner and Boysen (2008), and another introduced by Bolat and Yano (1992a). All three objective functions aim to minimize work overload. First, we perform a correlation analysis in order to investigate the linear relationship between both objectives, the number of sequencing rule violations (CS), and the amount of work overload (MMS). Second, by analyzing optimal solutions and evaluating the performances of both models on various test instances, we determine the gap in the solution quality between CS and MMS. Our results reveal the following insights:•The objectives of CS and MMS are positively linearly related using Pearson’s product moment correlation coefficient.The best sequence found by CS causes on average at least 23% more work overload than a solution found by MMS. If inadequate sequencing rules and/or objective functions for CS are used, this gap can increase to 75%.The gap in the solution quality can be decreased to 15% by using a new weighting factor for CS.Overall, our results show that the surrogate objective of CS aggregates too strongly from the underlying objective of minimizing the work overload. Therefore, the CS model is not able to produce competitive results in terms of solution quality compared to MMS for problem instances studied in this work. Therefore, we encourage both researchers and practitioners to focus more on detailed comparisons between MMS and CS taking also other performance measurements than work overload into account. Furthermore, we suggest practitioners to publish real-world MMS scenarios which would allow researchers to validate the findings of this work.Section 2 states the MMS approach and some assumptions made for this paper. The CS model is introduced in Section 3 together with rule generation approaches, objective functions and the additional weighting factor. Section 4 presents the computational study and results, followed by a critical discussion of the advantages of CS in Section 5. The paper ends with concluding remarks.MMS was introduced by Wester and Kilbridge (1964); it aims to find a sequence of different modelsm∈Mwith minimum total work overload based on a detailed schedule. Work overload occurs whenever an operator is unable to finish assembly operations on a workpiece within the station’s boundaries. MMS explicitly takes several operational characteristics of the line into account, such as processing times, station borders, operator movements and others (for an overview see Boysen, Fliedner, & Scholl, 2009). The range of different characteristics and resulting MMS models makes it impossible to study all possible MMS settings. Therefore, we apply the basic MMS problem as our benchmark model, which is based upon the following assumptions (see Boysen et al., 2009; Scholl, 1999, p. 96):•Without loss of generality, assembly lines are assumed to flow from left to right.All stations are closed, i.e., operators are not allowed to work beyond the station borders.All stations are consecutively arranged along the line and models move with constant speed through the stations.The processing of a model starts early, i.e., as soon as operator and model meet within the station boundaries.An operator has zero return times, i.e., when he has finished one model he moves with infinite speed to the next model. This assumption is adequate, since the speed of the conveyor is usually much slower than the operators walking speed. If not, the cycle time c can be reduced to include the average return time.A fixed rate launching is applied, i.e., consecutive models are placed on the conveyor at the same interval equal to the cycle time c.The demandsdmof the models are given for the whole planning period and remain unchanged, i.e., no rush orders are allowed.The number of stations K and their respective lengthslk, withk∈K, are given – for example, they are obtained from the solution of the preceding balancing problem.All processing timespmkof modelsm∈Min stationsk∈Kare static and deterministic.pmk⩽lk∀m∈M;k∈Kholds, otherwise sequence-independent work overload would occur whenever the respective model is processed.Work overloadwktinduced by the tth model of the sequence in station k is immediately compensated by additional utility workers within the station borders, such that the starting timesk+1,tof the respective model in the subsequent stationk+1is not affected.With these assumptions and the notation summarized in Table 1, we formulate the MMS model (Boysen et al., 2009; Scholl, 1999, p. 105):(1)(MMS)Minimizeobjwo=∑k=1K∑t=1Twkt(2)subject to∑t=1Txmt=dm∀m∈M(3)∑m∈Mxmt=1∀t=1,…,T(4)skt⩾sk,t-1+∑m∈Mpmk·xm,t-1-c-wk,t-1∀k=1,…,K;t=2,…,T(5)skt+∑m∈Mpmk·xmt-wkt⩽lk∀k=1,…,K;t=1,…,T(6)skt⩾0∀k=1,…,K;t=1,…,T(7)wkt⩾0∀k=1,…,K;t=1,…,T(8)sk1=0∀k=1,…,K(9)xmt∈{0,1}∀m∈M;t=1,…,TThe total work overload over all stationsk∈Kand production slots t is minimized (1). Eqs. (2) and (3) ensure that the demanddmfor each model is met and each slot in the sequence contains exactly one model. Furthermore, the processing of a model at position t in station k cannot start until the respective operator has processed the preceding model at positiont-1(4). Potential work overload is immediately compensated and, thus, does not affect subsequent starting times (5). (5) together with (6) also model closed stations. Work overload is required to be nonnegative (7). The line is assumed to be in an initial condition before processing the entire sequence (8), thus, an operator awaits the first model at the left-hand station border. Note that for comparative reasons we do not require this initial condition to be reached again after processing the entire sequence, since this constraint cannot be modeled with CS. Finally,xmttake only binary values (9).ExampleConsider one stationK=1, two modelsM=2, and a sequence length ofT=11. We assume a cycle timec=5, the length of the single stationl1=12and model 0 (model 1) with a demand ofd0=7(d1=4) and processing timep01=3(p11=10). Fig. 1shows the movement diagram for the example sequence〈01110001000〉. In a movement diagram, the operator movements within a station necessary to process the sequence are visualized. Processing times are represented by horizontal lines, return times by diagonal dashed lines. The operator starts processing at the left-hand station border at position 0. The example sequence contains a copy of model 0 at the first slot. After assembling this model, the operator returns back to position 0 and processes model 1 at slot 2. Since model 1 requires a processing time ofp11=10, the operator fails to reach the left-hand station border again after finishing it. Instead he meets the subsequent model, which already crossed the left-hand station border, at position 5. A copy of model 1 needs to be processed once again which in turn leads to a work overload of 3. It is assumed that the work overload is immediately compensated, therefore, the operator meets the 4th model at position 7 in the station and so on. Note that the example sequence leads to a total work overload of 8, since the operator is unable to finish the respective models at slots 3 (work overloadw13=3) and 4 (w14=5) in time.Compared to MMS, CS is a more aggregated approach for finding a production sequence with minimum work overload. It assumes that a car contains different options and different models can be distinguished by their (often binary) options (such as a car having air conditioning, or not). CS employsHo:Nosequencing rules in order to restrict the occurrences of each optiono∈Oin any subsequence ofNosucceeding models to at mostHo. For example, a sequencing rule of2:3for the option “air conditioning” requires that in any subsequence of three consecutive models at most two models contain this option, otherwise a violation occurs. The objective of CS is to minimize the number of sequencing rule violations over all scheduled options.The existing CS literature implicitly assumes that the surrogate objective of minimizing the number of rule violations is associated with the minimization of work overload. However, to our best knowledge, this assumption has never been evaluated. In any case, suitable sequencing rules and an appropriate objective function are required in order to accomplish the underlying objective of minimizing work overload. In this paper, we identify and consider two sequencing rule generation approaches and three recently applied objective functions from the literature.Bolat and Yano (1992b) derive sequencing rules for CS based on operational characteristics of the assembly line. For this purpose, they assume that exactly one optiono∈Ois processed at each stationk∈K, therefore we use the notations o and O synonymously for k and K, respectively. Since CS applies binary options, each option has merely two processing times. A model requiring option o has processing timepo+larger than the cycle time c, while a model without this option needs processing timepo-, which is lower than c. Thus,po-<c<po+⩽lo. Given these assumptions, the Bolat and Yano Sequencing Rule (BYSR) approach computes a sequencing ruleHo:Nofor option o as(10)Ho=lo-cpo+-cand(11)No=Ho+Ho·(po+-c)c-po-∀o∈O.Hois the maximum possible number of consecutive models having option o that can be processed without inducing work overload.Nois computed by adding toHothe number of succeeding models without option o that are required to shift the operator back to the left-hand station border after processingHomodels with option o.ExampleConsider the aforementioned example withl1=12,c=5,p-=p01=3,p+=p11=10. Then,Hoamounts to 1 andNoto 4. Thus, the BYSR approach returns a sequencing rule of1:4.The BYSR approach has some limitations (Golle et al., 2010). Denoting a sequence to be feasible if no work overload occurs, the BYSR approach does not correctly identify all feasible sequences. Indeed, usually a number of feasible sequences violate at least one sequencing rule. Therefore, since the BYSR approach excludes feasible solutions from consideration, it can be problematic for optimization approaches that search for feasible sequences. To overcome the problems of BYSR, Golle et al. (2010) introduce the Multiple Sequencing Rules (MSR) approach. This approach ensures that no feasible solution violates a sequencing rule and any infeasible solution violates at least one sequencing rule.MSR builds on the same assumptions as the BYSR approach. Hence, exactly one optiono∈Ois processed at each stationk∈Kwith two processing timespo+for models with option o andpo-for models without o, withpo-<c<po+⩽lo. Instead of a single rule per optiono∈O, MSR introduces multiple sequencing rulesHoq:Noq, withq=1,…,QoandQobeing the total number of sequencing rules for option o.Qoamounts toqomax-qomin+1with(12)qomin=lo-cpo+-c∀o∈O(13)qomax=T(c-po-)+(lo-c)po+-po-∀o∈O.qominequalsHofrom the BYSR approach and returns the maximum number of successive models containing option o without inducing work overload.qomaxcomputes the maximum number of models with option o that can occur in a sequence of length T without work overload.Then,∀qo∈qomin,qomax, MSR generates a sequencing ruleHoqo-qomin+1:Noqo-qomin+1with(14)Hoqo-qomin+1=qo∀o∈O(15)Noqo-qomin+1=Hoqo-qomin+1+qo(po+-c)-(l-po+)c-p0-∀o∈O.The last term of (15) computes the minimum number of models without option o that are required after processingqomodels with o in order to process another model containing o without inducing work overload.ExampleConsider again our example withl1=12,c=5,p-=p01=3,p+=p11=10and assume a sequence lengthT=11. Then,qominis 1 andqomaxamounts to 4, thus, four sequencing rules are needed overall. With (14) and (15), we getHo1:No1=1:3,Ho2:No2=2:6,Ho3:No3=3:10andHo4:No4=4:13.A number of objective functions for CS have been proposed in the literature (for an overview see Boysen et al. (2009)). In this paper, we consider the three most widely used objective functions: the sliding window (SW) objective function (Fliedner & Boysen, 2008; Gagne et al., 2006; Gottlieb et al., 2003), an objective function introduced by Fliedner and Boysen (2008), and another introduced by Bolat and Yano (1992a). In addition, we modify these objective functions to incorporate more than one sequencing rule per option and introduce additional weights that allow us to differentiate between the violations of different options and their impact on the resulting work overload.CS evaluates a sequence by sliding through the sequence and summing up the violations of each relevant subsequence, also called window. A violation occurs if a window of sizeNocontains more thanHooccurrences of the option o. The three objective functions differ in the windows considered as well as in the amount of violations a single window can provoke. The SW objective function counts all windows of sizeNothat are violated. Every violated window leads to exactly one violation in the objective function, regardless how many excessive option occurrences it contains. With notations from Table 2, the SW objective function results in the following model (Fliedner & Boysen, 2008; Gagne et al., 2006; Gottlieb et al., 2003):(16)Minimizeobjsw=∑o∈Ovowith(17)vo=∑t=1T-No+1min1;max∑t′=tt+No-1∑m∈Maom·xmt′-Ho;0∀o∈Osubject to (2) and (3).(16) minimizes the total number of violations over all options. (17) assesses all violated subsequences of sizeNowith 1. Fig. 2considers our aforementioned example sequence from Fig. 1 together with the 1:4 sequencing rule obtained by the BYSR approach. The first window from slot 1 to 4 is violated due to three occurrences of option o. So is the second window from slot 2 to 5. Overall, the SW objective function amounts to three violations.Fliedner and Boysen (2008) introduce a different objective function (FB), which is similar to a function proposed by Gagne et al. (2006). The FB approach eliminates some defects of the SW approach which considers less violations either at the beginning or at the end of a sequence since fewer windows are violated. Thus, the FB objective function uses windows of size<Noat the end of the sequence. Furthermore, it only considers a violated window if the first model in the window contains the respective option. Thereby, the FB objective function counts the option occurrences that actually lead to a violation of a subsequence. The associated model is as follows (Fliedner & Boysen, 2008):(18)Minimizeobjfb=∑o∈Ovowith(19)vo=∑t=1T-Homin∑m∈Maom·xmt;max∑t′=tmin{t+No-1;T}∑m∈Maom·xmt′-Ho;0∀o∈Osubject to (2) and (3).Again, (18) minimizes the total number of violations over all options. (19) evaluates all violated subsequences with 1 if the first model in the subsequence has option o, and 0 otherwise. We slightly modified the formula of Fliedner and Boysen (2008), since the first sum of (19) only needs to run untilT-Hoinstead of T as no violation can occur in subsequences of sizeHoand less. Fig. 3evaluates the example sequence using the FB objective function. Although the first window contains excessive option occurrences, it induces no violation since the first model in the window does not require the option. The second window from slot 2 to 5 is counted with one violation since the first model in the window has the respective option. Note that the evaluation runs up to slotT-Ho=11-1=10, and thus also considers subsequences of size less than 4 at the end of the sequence. Overall, the FB objective function counts two violations.In order to capture the extent to which a window is violated, Bolat and Yano (1992a) propose an objective function (BY) where each excessive option occurrence in a window leads to one additional violation. Therefore, a window can induce at mostNo-Hoviolations. The BY objective function results in the following model (Benoist, 2008; Bolat & Yano, 1992a) (we follow the more compact notation of Benoist (2008)):(20)Minimizeobjby=∑o∈Ovowith(21)vo=∑t=Ho-No+2T-Homax∑t′=tt+No-1∑m∈Maom·xmt′-Ho;0∀o∈Osubject to (2) and (3).(20) minimizes the total number of violations over all options. (21) counts the number of excessive occurrences of option o in each subsequence. Note that all subsequences have a size equal toNoand the evaluation can go beyond the actual sequence since models prior to the sequence beginning at slotHo-No+2and models after the sequence up to slotT-Ho+No-1are included. All models beyond the sequence are assumed not to have option o. Fig. 4evaluates the example sequence with the BY objective function. The evaluation starts at slot-1with the first window not being violated. The second window is violated since it has one excessive occurrence of option o which leads to one violation. The third window even has two excessive option occurrences and is evaluated with two violations. The BY objective function also considers two models after the actual sequence at slots 12 and 13, both of which do not require the respective option but are considered for the last two windows starting at slot 9 and 10, respectively. The BY objective function calculates six violations.ExampleWe use the example from Section 2 with the sequencing rule1:4according to the BYSR approach. Table 3shows two example sequences together with the number of violations calculated by the three different objective functions. The different objective functions lead to different evaluations. While the SW objective function evaluates sequence 2 better than sequence 1, the BY objective function evaluates sequence 1 better than sequence 2. The FB objective function does not differentiate between the two sequences. In this example, the BY objective function is more appropriate since the work overloadobjwofor sequence 1 is lower than for sequence 2.To apply the MSR approach with the three objective functions, we have to adjust (17), (19) and (21) such thatQosequencing rules for each option o are incorporated:(22)Minimizeobjsw=objfb=objby=∑o∈O1Qo∑q∈QovoqSince the number of sequencing rulesQofor each option can vary, (22) considers the average violations over all sequencing rules. Furthermore, we have to introduce in (17), (19) and (21) additional indices forHoandNo, respectively, leading to(23)voq=∑t=1T-Noq+1min1;max∑t′=tt+Noq-1∑m∈Maom·xmt′-Hoq;0∀o∈O;q∈Qofor the SW objective function,(24)voq=∑t=1T-Hoqmin∑m∈Maom·xmt;max∑t′=tmint+Noq-1;T∑m∈Maom·xmt′-Hoq;0∀o∈O;q∈Qofor the FB objective function, and(25)voq=∑o∈O∑t=Hoq-Noq+2T-Hoqmax∑t′=tt+Noq-1∑m∈Maom·xmt′-Hoq;0∀o∈O;q∈Qofor the BY objective function.We consider our example with four sequencing rules 1:3, 2:6, 3:10 and 4:13 generated by the MSR approach. Table 4shows the same two example sequences as used in Table 3 as well as the violations according to the three objective functions. Using the MSR approach, all three objective functions correctly evaluate sequence 2 better than sequence 1.The use of objective functions that treat each rule violation as equal leads to two problems. First, we are unable to determine to which extent the amount of imminent work overload caused by excessive occurrences of option o depends on the position of the excessive options in a window. Succeeding option occurrences, which lead to a violation, usually result in a higher work overload than non-succeeding options (for an example see Table 4, where sequence 2 leads to a higher work overload than sequence 1). Second, the amount of work overload caused by the violation of a sequencing rule can considerably vary between different optionso∈Osince different stations that assemble different options often have different operational characteristics such as station length. The three objective functions only partially address these issues. The SW and BY objective function favor non-succeeding violations, since such violations lead to less window violations (except for the SW function, when violations occur at the beginning or end of the sequence; see Fig. 3 for an example). Furthermore, both of these functions also implicitly choose between options. Each option occurrence, for instance, affects at mostNowindows, which thus can lead to at mostNoviolations. Therefore, violations of an option o with lowerNoare favored and implicitly assumed to cause less work overload. However, there is no justification for this assumption. The FB objective function does not differentiate between violations at all. Each option occurrence that causes a violation is always assessed with one violation in the objective function.To distinguish between option violations, we propose to use explicit weightsλofor each optiono∈O. This leads to the objective function(26)Minimizeobjw=∑o∈Oλo1Qo∑q∈Qovoq,whereλoshould be associated with the induced work overload, if a violation occurs. We suggest using the maximum work overload that can be caused by one violation of option o. The maximum work overload occurs if an operator reaches the right-hand station border while assembling a model and the next model in the line also contains option o. In this case, the operator reaches the next model at timelk-cin the station and sincepo+>cthe resulting maximum work overload amounts to(27)λo=lk-c+po+-lk=po+-c∀o∈O.ExampleConsider two stations (options) 1 and 2 withl1=l2=10andc=5. For the two options, we assumep1+=10,p1-=0andp2+=8,p2-=2. For both options, the BYSR approach yields a 1:2 rule; the weights amount toλ1=5andλ2=3. We want to produce three different models (each with a single copy) where model 1 requires both options, model 2 only option 1, and model 3 only option 2. Fig. 5depicts two different sequences which differ in the order of model 2 and model 3. When not using weights (column obj), all three objective functions return the same number of violations (obj=1). When using weights (columnobjw), sequence 1 is correctly identified as the one causing more work overload.

@&#CONCLUSIONS@&#
Our work is the first that compares the solution quality of CS and MMS. Therefore, we perform a comprehensive computational study with random MMS instances of various sizes. Based on these instances, we derive the related CS instances using different sequencing rule generation approaches and also apply various objective functions for CS discussed in the literature. Furthermore, we introduce an additional weighting factor for CS in order to distinguish between the effects of different option violations. A full factorial design of the rule generation approaches, objective functions and weighting factor is performed which leads to 24 different CS variants. The number of rule violations is positively linearly related to the amount of work overload using Pearson’s product moment coefficient. Moreover, the solution quality of MMS and the different CS variants is assessed by computing the resulting amount of work overload when each model is applied on the various test instances. For the problem instances, CS results in solutions that contain at least 23% more work overload than solutions of the related MMS problem. This gap can be decreased to 15% by considering our weighting factor for CS. The difference in the solution quality between CS and MMS increases, if CS is applied with inadequate sequencing rules and/or objective functions. For instance, using sequencing rules created by the BYSR approach in combination with the sliding-window objective function even leads to a solution gap that is higher than 75%.Our experimental results show that the surrogate objective followed by CS aggregates too much from the underlying goal of minimizing work overload. For the studied problem instances, the solution quality of CS is not competitive compared to MMS. Based on our experimental findings and the discussion of the advantages of CS against MMS, we encourage decision makers to study whether MMS is an alternative to CS for future applications, at least until new developments increase the solution quality of CS. Thus, future research should address the following issues:1.As there are no real-word MMS scenarios publicly available, we use test instances generated by the test MMS instance generator of Scholl (1999). This generator is widely used and expected to produce test instances resembling real-world instances. For further validation and generalization of our findings, we recommend to publish real-world MMS instances and to validate our findings on these scenarios.New sequencing rule generation approaches and objective functions for CS that better reflect the underlying goal of minimizing the work overload could be developed. However, we have doubts that either of these would considerably improve the solution quality of the CS model.The simple CS model needs to be extended in order to incorporate more practical characteristics of the line, e.g., to consider open stations and more than merely two processing times per stations. A first approach regarding multiple processing times can be found in Golle et al. (2010). Another idea to consider multiple processing times could be to set up a non-binary CS model, which uses the displacement (processing time minus cycle time) a model induces instead of just the binary options. A sequencing rule for this kind of problem could check if the sum of the displacements in any window of a certain length amounts to zero.Solnon et al. (2008) present an unelaborated idea that uses cross ratio constraints instead of simpleH:Nrules to allow for an interaction between option/station constraints and thus allow the modeling of open stations. Another idea could be to use multidimensional sequencing rules of the kind(H1,H2):N, where not more thanH1occurrences of option 1 andH2occurrences of option 2 are allowed in any 2-dimensional window of length N incorporating both options. Maybe some insights on these issues can be drawn from the literature on system reliability (Chao, Fu, & Koutras, 1995) as well, where sequencing rules of typeH:Nare also applied in consecutive ”k-out-of-m-from-n” systems.We conclude that the choice of a suited sequencing approach is a central decision task influencing many departments of each manufacturer, so that sequencing mixed-model assembly lines will remain a fruitful field of research in the foreseeable future.