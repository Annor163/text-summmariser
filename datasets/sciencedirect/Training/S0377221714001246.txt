@&#MAIN-TITLE@&#
Baseline value specification and sensitivity analysis in multiattribute project portfolio selection

@&#HIGHLIGHTS@&#
We consider the baseline value parameter in multiattribute project portfolio models.We develop novel methods for baseline value specification.We develop tools for conducting baseline value sensitivity analysis.We develop an algorithm to solve all potentially optimal portfolios.We develop an algorithm to identify all value-to-cost orderings of projects.

@&#KEYPHRASES@&#
Decision analysis,Multiattribute project portfolio selection,Resource allocation,Linear-additive portfolio value,

@&#ABSTRACT@&#
A key issue in applying multi-attribute project portfolio models is specifying the baseline value – a parameter which defines how valuable not implementing a project is relative to the range of possible project values. In this paper we present novel baseline value specification techniques which admit incomplete preference statements and, unlike existing techniques, make it possible to model problems where the decision maker would prefer to implement a project with the least preferred performance level in each attribute. Furthermore, we develop computational methods for identifying the optimal portfolios and the value-to-cost -based project rankings for all baseline values. We also show how these results can be used to (i) analyze how sensitive project and portfolio decision recommendations are to variations in the baseline value and (ii) provide project decision recommendations in a situation where only incomplete information about the baseline value is available.

@&#INTRODUCTION@&#
Organizations recurrently need to decide which of the available project proposals are implemented with the limited resources available. Plenty of methodological and applied research on how mathematical modeling and optimization can be used to support such decisions has been carried out under titles such as project portfolio selection, resource allocation and, most recently, portfolio decision analysis (for surveys see Kleinmuntz, 2007; Salo, Keisler, & Morton, 2011). Perhaps the most widely used approach for capturing multiple objectives is the linear-additive portfolio value model (Golabi, Kirkwood, & Sicherman, 1981), in which an additive value function aggregates the projects’ attribute-specific performances into an overall project value, and the portfolio value is the sum of those projects’ overall values that are included in the portfolio. This portfolio value can then be maximized subject to resource constraints using standard integer linear programming (ILP) techniques. Indeed, a lot of high impact applications of the linear-additive model have been reported in the literature (see, e.g., Ewing, Tarantino, & Parnell, 2006; Brown, Dell, & Newman, 2004; Kleinmuntz, 2007; Könnölä, Brummer, & Salo, 2007; Montibeller, Franco, Lord, & Inglesias, 2009).Recently, Clemen and Smith (2009) highlighted that the results given by the linear-additive model depend on the baseline value, i.e., a model parameter that defines the value associated with the alternative that a project is not implemented (see also Morton, 2010). Although this issue was discussed already in the seminal paper of Golabi et al. (1981), Clemen and Smith (2009) found several applications in which the linear-additive portfolio value function has been used without the term that captures the value difference between implementing a project with the least preferred performance in each attribute and not implementing any project at all. Furthermore, they demonstrated how such a practice can lead to a value model in which implementing a very risky project with a negative cash flow and a poor fit to the company’s strategy would be preferred to the alternative of not implementing it. Even if such a project candidate did not exist, the baseline value can affect the decision recommendations for projects which are worth implementing, i.e., whose values are greater than the baseline value.While the existing literature has recognized the importance of the baseline value in applications of linear-additive portfolio value model, the tools available for specification and analysis of the baseline value are limited. First, existing approaches for specifying the baseline value assume not implementing a project to be at least as preferred as implementing a project with the least preferred performance level on each attribute (Golabi et al., 1981; Clemen & Smith, 2009). Second, these methods require the decision-maker (DM) to precisely specify a hypothetical project such that he is indifferent between implementing and not implementing it. Hence, these approaches cannot harness ordinal preference, although giving ordinal preference statements can be more easy for DMs (see Weber, 1987; Moshkovich, Mechitov, & Olson, 2002; Punkka & Salo, 2013). Finally, the current literature offers no computational tools for conducting sensitivity analysis with regard to the baseline value even though methods for analysing sensitivity with regard to other parameters (e.g., Liesiö, Mild, & Salo, 2007, 2008; Lourenço, Morton, & Bana e Costa, 2012; Greco, Matarazzo, & Slowiński, 2013) have found use in applications (Lindstedt, Liesiö, & Salo, 2008; Grushka-Cockayne, De Reyck, & Degraeve, 2008; Toppila, Liesiö, & Salo, 2011; Liesiö & Salo, 2012).Motivated by these observations, this paper develops (i) baseline value specification techniques which are based on ordinal comparisons of project portfolios and (ii) computational tools for analyzing how sensitive the decision recommendations given by the linear-additive portfolio value model are to the baseline value. The developed specification techniques produce an interval or a point estimate for the baseline value, depending on how precisely the DM can or is willing to answer questions about her preferences between project portfolios. Unlike the methods proposed in the literature (Golabi et al., 1981; Clemen & Smith, 2009), these methods are applicable also in situations where implementing a project with least preferred performance level in each attribute is preferred to the alternative of not implementing it. The developed computational tools identify portfolios that are optimal for some interval of baseline values and the projects’ possible value-to-cost ratio rankings. In cases where the baseline value is precisely specified, these tools make it possible to conduct sensitivity analysis on the baseline value. Furthermore, the paper reports a simulation experiment, in which the decision recommendations are computed for randomly generated problem instances to get insights on how sensitive the results of a linear-additive portfolio value model are to baseline value specification in general.The rest of this paper is structured as follows. Section ‘Linear-Additive Portfolio Value’ introduces the linear-additive portfolio model and reviews the role of the baseline value in this model. Section ‘General Methods for Baseline Value Specification’ develops general techniques for baseline value specification. Sections ‘Potentially Optimal Portfolios and Projects’ Value-to-Cost Rankings’ develop the computational tools for identifying the potentially optimal portfolios and possible project value-to-cost rankings, respectively. Section ‘Discussion’ discusses the implications of the developed methods to portfolio decision analysis practice, and Section ‘Conclusions’ presents some concluding remarks.Let project candidatesj=1,…,mbe evaluated with regard to attributesi=1,…,nwith measurement scalesX1,…,Xn. We denote the most and the least preferred levels ofXibyxi∗andxi0, respectively. The performance of the jth project candidate corresponds to the vectorxj=x1j,…,xnj∈X1×…×Xnand the project’s additive overall value is(1)v(xj)=∑i=1nwivixij,wherewi>0is the weight of attribute i andvi(·)its attribute-specific value function. Routinely, these are normalized such thatvixi∗=1,vixi0=0and∑i=1nwi=1to obtain project valuesv(xj)that are in the range[0,1](see, e.g., Dyer & Sarin, 1979).Letz∈{0,1}mdenote a project portfolio, such thatzj=1if and only if the portfolio includes the jth project. The linear-additive value (Golabi et al., 1981) of portfolio z is(2)V(z)=∑j=1m[zjv(xj)+(1-zj)vB]=∑j=1mzj[v(xj)-vB]+mvB,wherevBis the baseline value, i.e., the value of not implementing a project. Among portfolios that can be afforded with the budget B, the one with the highest value (2) can be obtained by solving the integer linear programming (ILP) problem(3)mvB+maxz∈{0,1}m∑j=1mzj[v(xj)-vB]∑j=1mcjzj⩽Bwherecj>0is the cost of the jth project. In general, there can be multiple linear constraints in (3) which make it possible to model, for instance, alternative implementation modes of projects, cost synergies, several resource types or scheduling projects over multiple time periods (see, e.g., Stummer & Heidenberger, 2003; Liesiö, Mild, & Salo, 2008). To maintain the generality of the results, we useZF⊆{0,1}mto denote the set of feasible portfolios satisfying such problem-specific constraints without taking a stance on what these constraints are.To exemplify the effects of choosing the baseline value, we use the ‘CBAA’ example by Kleinmuntz (2000), which was also used by Clemen and Smith (2009). In this example,m=8software projects are evaluated with regardn=3attributes that measure the projects’ financial contribution(X1=[-$13,750,$442,500]), risk(X2={‘safe’,‘probable’,‘uncertain’})and strategic fit(X3={1,…,5}). The number of persons days available for implementing these projects isB=2500. The project data and values are presented in Table 1, where the attribute-specific value function for financial contribution is linear, i.e.,v1(y)=[y-(-$13,750)]/[$442,500-(-$13,750)]and the attribute weights arew=(0.25,0.25,0.5).If the terms containing the baseline value in the objective function of (3) are not used, then it is implicitly assumed that the baseline value is equal to the value of a project that has the least preferred performance level on all attributes, i.e,vB=0=vx10,…,xn0. In the CBAA example this corresponds to using the baseline valuevB=v(-$13,750,‘uncertain’,1)=0and as a result the optimal portfolio that maximizes (3) includes projects B, C, D, E and H. However, it seems counter-intuitive that not implementing a project is equally preferred to implementing a risky project with negative financial contribution that does not even fit the company strategy.In their application, Golabi et al. (1981) recognized this problem and asked the DM to define the project performancexB∈X1×…×Xnsuch that she would be indifferent between implementing and not implementing a project with performancexB. The baseline value was then obtained by evaluating the project value function (1) atxB, i.e.,vB=v(xB)∈[0,1].In the CBAA example, one candidate for such a project could bexB=($0,‘safe’,1), which would lead to a baseline valuevB=v($0,‘safe’,‘1’)=0.25·[0-(-13,750)]/[442,500-(-13,750)]+0.25·1+0.5·0≈0.258. In this case the optimal portfolio would contain projects A, B, C and D, which differs from the optimal portfolio obtained with the baseline valuevB=0.Clemen and Smith (2009) propose the baseline value to be elicited by defining the above projectxBattribute by attribute. This approach assumes that each measurement scale has a levelxiBthat can be associated with the outcome of not implementing a project. For example, the financial contribution of such a project could bex1B=$0, the risk associated with such a project could be of levelx2B=‘safe’, and fit to strategyx3B=1. The baseline value is then obtained fromvB=vx1B,…,xnB=∑i=1nwivixiB.Existing techniques for specifying the baseline value require that the DM chooses a vector of performance levels such that she is indifferent between implementing and not implementing a project with such performance. However, if the DM would prefer to implement any project with performances inX1×…×Xn, then such performance levels do not exist. This can happen, for example, in applications where the project proposals are pre-screened and only proposals with at least satisfactory quality are evaluated with the multi-attribute value model. Hence, the measurement scales used in the model do not necessarily include levels that would capture the performance of a low quality project which the DM would not implement. As an example, consider selecting projects to improve the water quality in a river by considering two attributes: the number of riverside houses whose recreational use of the river is improved by the project (X1={500,…,1000}) and a holistic expert evaluation on how the project enhances biodiversity in the river(X2={‘low’,‘medium’,‘high’}). Here, it may well be that the DM would implement a project with performancex0=(500,‘low’), since it has positive effects on both recreational use and biodiversity.The methods developed here can be applied in settings, in which the DM would prefer to implement any project with performance inX1×…×Xn. Furthermore, these methods allow the DM to give ordinal statements, i.e., one alternative is preferred to another, rather than forcing her to adjust the alternatives until she is indifferent between the two. Such ordinal statements are transformed to constraints on the baseline valuevB.The first step is to determine whether the DM would implement a project with performancex0, i.e., the least preferred performance inX1×…×Xn. If she prefers not to implementx0, then she can be presented with a list of better project performance vectors such that each vector dominates the next one. She is then asked to go through the list and find the last project on the list that she would implement. In the CBAA example, the DM could be presented with the three project performance vectors($0,‘safe’,1),($0,‘probable’,1)and(-$13,750,‘Uncertain’,1). If she would implement only the first project, then the baseline value would satisfyv($0,‘probable’,1)︸≈0.133⩽vB⩽v($0,‘safe’,1)︸≈0.258.If needed, the resulting constraints can be made more restrictive by providing the DM with additional performance vectors whose values are between 0.133 and 0.258, and then asking which of these she would implement.On the other hand, if the DM would implementx0, thenvB<v(x0)=0. To obtain a rough location of a negative baseline value, the DM can be asked which of the two portfolios she prefers:(P1)a portfolio consisting of k projects with the least preferred performancex0, ora portfolio consisting ofk-1projects with the most preferred performancex∗.Fork=1, portfolios (P1) and (P2) have linear-additive valuesv(x0)+(m-1)vBandmvB, respectively. BecausevB<0, a DM consistent in her preferences should prefer portfolio (P1). The value of integer k is then increased until portfolio (P2) becomes more preferred: letk′be such that the DM prefers portfolio (P1) whenk=k′and portfolio (P2) whenk=k′+1. By using the linear-additive portfolio value function (2), these preferences correspond to the constraintsk′v(x0)+(m-k′)vB⩾(k′-1)v(x∗)+(m-(k′-1))vB⇔0⩾k′-1+vB⇔vB⩽-k′+1and(k′+1)v(x0)+(m-(k′+1))vB⩽k′v(x∗)+(m-k′)vB⇔0⩽k′+vB⇔vB⩾-k′,sincev(x0)=0andv(x∗)=1. Together these constraints limit the baseline valuevBto the interval[-k′,-k′+1].For instance, assume that in the river protection example the DM answers the question corresponding tok=2by stating that a portfolio of two projects with the least preferred performancex0=(500,‘low’)is preferred to a portfolio containing a single project with the most preferred performancex∗=(1000,‘high’). This statement corresponds to2v(500,‘low’)+(m-2)vB⩾v(1000,‘high’)+(m-1)vB⇔0+0⩾1+vB⇔vB⩽-1Next, she compares a portfolio containingk=3projects with performancex0=(500,‘low’)and a portfolio consisting of 2 projects with performancex∗=(1000,‘high’). If she prefers the latter portfolio, then3v(500,‘low’)+(m-3)vB⩽2v(1000,‘high’)+(m-2)vB⇔0+0+0⩽1+1+vB⇔vB⩾-2.Thus,k′=2and the baseline value belongs to the interval[-k′,-k′+1]=[-2,-1].To obtain a more precise estimate on the baseline value, portfolio (P1) can be modified by improving the performance of one of its projects. More specifically, with any performance vectorx∈X1×…×Xn, the DM can be asked whether she prefers(P1’)a portfolio consisting ofk′projects with the least preferred performancex0and a single project with performance x, ora portfolio consisting ofk′projects with the most preferred performancex∗.Preference for portfolio (P1’) or (P2) results in the additional constraintk′v(x0)+v(x)+(m-(k′+1))vB⩾k′v(x∗)+(m-k′)vB⇔vB⩽-k′+v(x)ork′v(x0)+v(x)+(m-(k′+1))vB⩽k′v(x∗)+(m-k′)vB⇔vB⩾-k′+v(x),respectively. Thus, the baseline value belongs either to the intervalvB∈[-k′,-k′+v(x)]or the intervalvB∈[-k′+v(x),-k′+1], which both are subsets of[-k′,-k′+1]becausev(x)∈[0,1].For instance, consider that in the river protection example the DM prefers a portfolio containing two projects with performancex0=(500,‘low’)and single project with performancex=(750,‘medium’)to a portfolio containing two projects with performancex∗=(1000,‘high’). This results in the constraintv(500,‘low’)+v(500,‘low’)+v(750,‘medium’)⩾v(1000,‘high’)+v(1000,‘high’)+vB⇔vB⩽-2+v(750,‘medium’).Furthermore, if the DM prefers the portfolio containing two projects with performancex∗=(1000,‘high’)to a portfolio containing two projects with performancesx0=(500,‘low’)and single project with performancex=(500,‘medium’), then the baseline value must also satisfyv(500,‘low’)+v(500,‘low’)+v(500,‘medium’)⩽v(1000,‘high’)+v(1000,‘high’)+vB⇔vB⩾-2+v(500,‘medium’).With equal attribute weights and linear attribute-specific value functions overX1={500,…,1000}andX2={‘low’,‘medium’,‘high’}, the baseline value lies in the intervalvB∈[-2+v(500,medium),-2+v(750,medium)]=[-1.75,-1.5]⊂[-2,-1].In the special case that the baseline value belongs to the interval[-1,0](i.e.,k′=1), a more precise estimate for the baseline value can also be obtained by comparing preferences between implementing a project and a change in the project’s performance (Morton, 2010). This approach avoids the need to compare portfolios consisting of multiple projects, but in turn requires that the DM answers questions concerning the strength of preference (see Dyer & Sarin, 1979 for formal axiomatization). First, the DM is asked to consider the value increase associated with implementing a project with performancex0, i.e.,v(x0)-vB. Then, she is asked to state whether this value increase is more or less than the value gained when the performance of such a projectx0is improved to some fixed levelx∈X1×…×Xn, i.e.,v(x)-v(x0). If she states that implementing projectx0adds more value than improving its performance to x, then the baseline value must satisfyv(x0)-vB⩾v(x)-v(x0)⇔vB⩽-v(x).If, in turn, the performance improvement is more valuable, thenvB⩾-v(x). In the river protection example, a statement that implementing a project with performancex0=(500,‘low’)adds more value than changing its performance tox=(750,‘medium’)results in the constraintvB⩽-v(750,‘medium’)=-0.5.It is worth highlighting that the development of tailored techniques for specifying the baseline value in a specific application is relatively straightforward, since comparison of any two portfolios with unequal number of projects results in a constraint for the baseline value: if portfolio z is preferred toz′thenV(z)⩾V(z′)⇔vB∑j=1mzj′-zj⩾∑j=1mv(xj)zj-zj′.If portfolios z andz′contain equally many projects, then the left-hand side of the inequality becomes zero and hence the comparison does not restrict the baseline value.In this section we develop methods to analyze how the optimal portfolio changes as a function of the baseline value. Rather than focusing on some interval of baseline values established with the techniques of Section ‘General Methods for Baseline Value Specification’, we analyze the entire range of possible baseline values(-∞,1]. Based on this analysis, identifying portfolios that are optimal on some specific interval is then straightforward. Furthermore, such analysis can even be carried before the baseline specification and its results used in designing the baseline specification questions. These alternative modes of using the developed methods in decision support will be discussed in more detail in Section ‘Discussion’.Specifically, the aim is to identify for each baseline valuevB∈(-∞,1]the feasible portfolioz∈ZFwhich maximizes the portfolio value(4)V(z,vB)=∑i=1mzjv(xj)+(1-zj)vB,which is equivalent to Eq. (2) except nowvBis explicitly written as an argument of function V. SinceV(z,vB)is linear invB, each of these portfolios is optimal either for (i) a single baseline value or (ii) a continuous interval of baseline values. However, for any portfolio that is optimal only for a single baseline valueṽB, there exists a portfolio that is optimal for an interval of baseline values which includesṽB. Hence, we focus only on the potentially optimal portfolios that have the highest value for an interval of baseline values.Definition 1The optimality range of a feasible portfolio z is the (possibly empty) set[d̲,d¯]={vB∈-∞,1|z∈argmaxz′∈ZFV(z′,vB)},whered̲∈R∪{-∞}. Furthermore, a feasible portfolio is potentially optimal if its optimality range is non-empty andd̲<d¯.Fig. 1illustrates the concepts of optimality range and potentially optimal portfolio using the CBAA example. The optimality range of the feasible portfolio consisting of projects B, C, D, E and H is(-∞,0.0424], wherefore it is potentially optimal. The upper bound of the range corresponds to the value of a project with performance($63,630,‘Uncertain’,1), for instance. If the DM would not prefer to implement such a project, thenvB>0.0424. For baseline values in0.0424,0.6171the optimal portfolio includes projects A, B, C and D. The upper bound of the optimality range corresponds to the value of project A (i.e.,x1=($200,000,‘Uncertain’,5)). It seems likely that the DM would prefer to implement project A, whereforevB⩽0.6171. Thus, the optimal portfolio would probably consist of projects A, B, C and D.Our approach for solving the potentially optimal portfolios and their optimality ranges is based on the observation that the number of projects a portfolio contains determines the relative location of its optimality range (assuming it is nonempty). For instance, in Fig. 1 the number of projects included in the potentially optimal portfolio decreases as the baseline valuevBincreases. Furthermore, if two portfolios are optimal for some baseline value(s) and contain the same number of projects, then the values of these portfolios are equal for all baseline values and hence their optimality ranges are identical. These properties are formalized in the following lemma, where||z||=∑j=1mzjdenotes the size of portfolio z. All proofs are in Appendix ‘Proofs’.Lemma 1Let z andz′be feasible portfolios with nonempty optimality ranges[d̲,d¯]and[d̲′,d¯′], respectively.(i)If‖z‖=‖z′‖, then[d̲,d¯]=[d̲′,d¯′].If‖z‖>‖z′‖, thend¯⩽d̲′.The value difference of two portfolios of the same size does not depend on the baseline value. Hence, any potentially optimal portfolio must have the highest value among all feasible portfolios that contain equally many projects.Lemma 2If z is potentially optimal, thenz∈argmaxz′∈ZF{V(z′,vB)|‖z′‖=‖z‖}for allvB∈(-∞,1].Lemmas 1 and 2 imply that if the number of projects to be included in the portfolio is fixed, then the baseline value does not affect the decision recommendations. This result is in line with the existing literature; in their seminal paper Golabi et al. (1981) motivate the need for baseline value specification with the observation that the number of projects may vary across the feasible portfolios. This result has also practical implications: in some applications the size of the portfolio is constrained only by the number of projects included in the portfolio and hence specification of the baseline value is not required. For example, when selecting a portfolio of ‘less tangible’ project ideas or topics for further development, the projects’ costs are often unknown and the portfolio size serves as a proxy for the number of ideas the organization can refine into concrete project proposals (see, e.g., Könnölä et al., 2007; Punkka & Salo, 2014).Lemmas 1 and 2 suggest the following algorithm for identifying the potentially optimal portfolios and their optimality ranges. In the first phase, the algorithm considers feasible portfolios of each size k and solves those that have maximal value (denoted byZ(k)) for some chosen baseline, sayvB=0. Although Lemma 2 shows that no potentially optimal portfolio will be missed by this technique, often there is no need to consider all portfolio sizes between 0 and m. First, portfolios containing a large number of projects are usually infeasible due to, for example, budget constraints. Hence, the maximum number of projects a feasible portfolio can contain (denoted byk¯) – which can be solved from a simple ILP problem – implies an upper bound for the size of a potentially optimal portfolio. Second, Lemma 1 suggests that the smallest potentially optimal portfolio will have an optimality range that includes the baseline valuevB=1, wherefore the algorithm solves the feasible portfolios that maximizeV(z,1). According to Lemma 1 only the largest one of these will have an optimality range that contains baseline valuesvB<1and its size,k̲, is a lower bound for the size of any potentially optimal portfolio.After the value maximizing portfoliosZ(k)of sizesk∈{k̲,…,k¯}have been solved, the second phase of the algorithm identifies which of these portfolios are potentially optimal and computes their optimality ranges. Lemma 1 implies that among the largest portfolios, the ones that maximize the portfolio value (i.e.,Z(k¯)) have an optimality range that spans to-∞and hence they are potentially optimal. The algorithm then checks the sets of portfoliosZ(k)in a descending order of portfolio size||z′||; at each iteration, the algorithm determines the upper boundd¯of the optimality range for portfolios inZ(||z′||)and finds||z″||<||z′||such that the optimality range of portfolios inZ(||z″||)has a lower bound equal tod¯. As an output, the algorithm delivers sets of portfolios, each associated with an optimality range. The union of these sets equals the set of all potentially optimal portfolios and the union of the ranges is equal to(-∞,1]. Formally, the algorithm can be stated as follows:Algorithm 1The algorithm finds all potentially optimal portfolios and their optimality ranges.Computationally the most time-consuming part of the algorithm is solving the ILP problems on lines 1–3. In fact, on line 2 two ILP problems are solved; the maximum portfolio value atvB=1and the largest portfolio that produces this value. Furthermore, on line 3 the algorithm solves all optimal solutions to each of thek¯-k̲+1ILP problems.In turn, solving the optimization problems on lines 6 and 8 requires very little computational effort. This is because the optimality ranges of portfolios in eachZ(k)are identical (see property (i) of Lemma 1) and hence the choice of z fixes the value of the objective function d on line 6, i.e.,V(z,d)=V(z′,d)⇔d=∑j=1mv(xj)zj′-zj‖z‖-‖z′‖.Thus, the optimization problem on line 6 can be solved by evaluating the objective function d with one solution z from each setZ(‖z′‖-1),…,Z(k̲). Furthermore, among the portfolios z that minimize d, the portfolio with the minimum number of projects‖z‖also solves the optimization problem on line 8.In this section we seek to identify circumstances in which a ‘small’ change in the baseline value is ‘likely’ to change the decision recommendations given by the linear-additive portfolio value model. For this purpose we solve the potentially optimal portfolios for a large number of randomly generated instances of problem (3) with varying number of projects, budget and correlation between the projects’ values and costs.More specifically, we consider problem instances withm=50,m=100andm=200projects. Both the projects’ values and the costs have uniform marginal distributions and the joint (cumulative) distribution is a Gaussian copula (see, e.g., McNeil, Rudiger, & Embrechts, 2005) with the correlation coefficientρtaking values 0, 0.5 and 0.9. Fig. 2illustrates random samples of projects’ values and costs for different values of the correlation coefficient. The budget B is set equal to 25%, 50% or 75% of the sum of the projects’ costs∑cj. Altogether there are thus 27 different combinations of parametersm,B/∑cjandρ. For each combination, the potentially optimal portfolios are solved for 100 randomly generated problem instances.The simulation results are presented in Table 2where each of the 27 rows contains average results for one parameter combination. The results include the average solution time12.5gigahertz dual–core processor; lp_solve 5.5.2.0 (http://lpsolve.sourceforge.net/5.5/) used to solve the ILP problems.1(t), the average number of potentially optimal portfolios (#PO), and the average number of project-specific decision recommendations that are affected by changes in the baseline value (i.e., the average number of decision variableszjwhose value depends on the baseline value). The algorithm seems to have a reasonable running time, with longest computation times recorded in instances with a high number of projects and high correlation between the projects’ costs and values. This is not surprising, as solving the ILP problems takes some 98% of the total solution time and it is well known that ILP problems become more difficult to solve as the number of decision variables grows and the correlation between the objective function and the constraint coefficients increases (e.g., Martello & Toth, 1990).The results indicate that the number of potentially optimal portfolios increases when the number of projects and the budget increase, or the correlation between the projects’ values and cost decreases. The number of projects is the main determinant of the number of potentially optimal portfolios. This is possibly because the number of feasible portfolios increases exponentially in the number of projects. Of the three budgets considered, the number of potentially optimal portfolios is the greatest when the budget is sufficient to fund some 75% of the projects. This can be explained by the fact that the number of potentially optimal portfolios is bounded from above by the maximum number of projects that can be afforded with the budget (see Lemmas 1 and 2). Out of the three parameters, the correlation between the projects’ values and costs seems to have the smallest effect on the number of potentially optimal portfolios. Overall these observations are in line with the theoretical results and thus lend support to the correctness of the simulation experiment.Fig. 3illustrates how the optimality ranges of the potentially optimal portfolios are located. More specifically, the figure shows the share of potentially optimal portfolios that have an optimality range intersecting each baseline value interval(-∞,-2],[-2,-1.75],…,[0.75,1]. These shares are averages over all the 2700 random instances. Clearly, portfolios that are optimal for low baseline values have wider optimality ranges than those that are optimal for high baseline values.These findings support to the main argument of Clemen and Smith (2009), that the choice of the baseline value should be carefully considered as it virtually always affects the decision recommendations. The decision recommendations are most sensitive when the baseline value is between zero and one; in such cases however, specifying a relatively narrow interval for the baseline value is quite straightforward, because it is derived from statements on whether a project inX1×…×Xnis worth implementing (see Section ‘General Methods for Baseline Value Specification’). On average there are also multiple potentially optimal portfolios whose optimality ranges are subsets of the intervalvB∈[-1,0]. However, in this case the DM can specify the baseline value by comparing the strength of preference between implementing a project and improving its performance, or by making ordinal comparisons of portfolios containing at most two projects. Finally, if the baseline value is below-1, the DM needs to compare portfolios with more than two projects. However, determining a narrow baseline value interval is often unnecessary for reaching a single optimal portfolio, because in this case the optimality ranges of the potentially optimal portfolios are relatively wide.In applications with a single resource constraint∑jcjzj⩽B, a common practise is to prioritize projects based on their value-to-cost ratiosv(xj)/cj(e.g., Kirkwood, 1997; Phillips & Bana e Costa, 2007). Intuitively, a project with a high value-to-cost ratio uses resources more efficiently than a project with a lower ratio. Such prioritization can be particularly useful, because it does not require precise specification of the available budget B and hence the budget can be treated as a ‘soft constraint’, or as one of the decision variables (e.g., Kleinmuntz & Kleinmuntz, 1999; Phillips & Bana e Costa, 2007; Liesiö et al., 2008; Punkka & Salo, 2014).As such, this approach implicitly assumes that the value of not implementing a project is zero. The non-zero baseline value can be taken into account by subtracting it from the numerator. However, negative ratios do not serve as basis for prioritisation since implementing a project with a negative ratio would reduce the portfolio value. Hence, we use here a modified value-to-cost ratio, defined for projectxjas(5)VCRj(vB)=maxv(xj)-vBcj,0.Value-to-cost ratio (5) works as a project prioritization rule, because selecting projects into a portfolio in a descending order of positive VCRs always results in a portfolio that makes optimal use of the consumed resources. This property is formalized by the following lemma.Lemma 3Take anyvB∈(-∞,1]andz∗∈{0,1}msuch thatVCRj(vB)>0for all j withzj∗=1. Ifminj|zj∗=1VCRj(vB)⩾maxj|zj∗=0VCRj(vB),thenz∗is an optimal solution to(3)with budgetB=∑j=1mcjzj∗and baseline valuevB.Different baseline values usually lead to different prioritization of the projects. For instance, in the CBAA example Project B has the highest VCR for a wide range of baseline values, but projects C and D have a higher VCR whenvB=0.6(see Fig. 4). Since the VCR of any project is zero when the baseline value exceeds the project’s value, the relative order of two projectsxjandxkdepends on their VCRs for baseline valuesvB∈S=(-∞,max{v(xk),v(xj)}). Within this interval of baseline values,VCRj(vB)andVCRk(vB)can be•equal for exactly one baseline value in S, in which case the VCR difference between the projects is strictly negative for some baseline values and strictly positive for some (cf. projects A and E in Fig. 4), orunequal for all baseline values in S, in which case one project has a strictly higher VCR than the other for all baseline values in S (cf. projects A and F in Fig. 4), orequal for all baseline values.The next lemma provides sufficient and necessary conditions for these three cases.Lemma 4Letxj,xk∈X,cj,ck>0and denoteS=(-∞,max{v(xj),v(xk)}). Then,(i)VCRj(vB)=VCRk(vB)for exactly onevB∈Siffv(xj)>v(xk)andcj>ck, orv(xj)<v(xk)andcj<ck.VCRj(vB)>VCRk(vB)for allvB∈Siffv(xj)⩾v(xk)andcj⩽ckwith one of the inequalities strict.VCRj(vB)=VCRk(vB)for allvB∈Siffv(xj)=v(xk)andcj=ck.Property (ii) implies that VCR is consistent with dominance: if one of two projects is less expensive and has a higher value, then it has a strictly higher VCR for any baseline value in S. This is illustrated also in the CBAA example in Fig. 4: project B is the least expensive one, but its value is the third highest after projects C and D. Hence, project B has a higher VCR than projects A, E, F, G and H for any baseline value in S.To extend the analysis from two to m projects we define the concept of a ranking.Definition 2Projectxjhas rankingr∈{1,…,m}on the baseline value interval[v̲B,v¯B]⊂(-∞,1],v̲B<v¯B, if|{k∈{1,…,m}|VCRk(vB)>VCRj(vB)}|=r-1∀vB∈(v̲B,v¯B)andVCRj(vB)>0for allvB∈(v̲B,v¯B).According to Definition 2, a project has ranking r on an interval of baseline values, if the number of projects with strictly higher VCR isr-1in every interior point of this interval. For example, project E in Fig. 4 has the rankingr=2on the baseline value interval(-∞,0.0386], because with baseline values below 0.0386 only project B has a higher VCR. Project E then has rankingr=3on the baseline value interval[0.0386,0.0627]. By definition, those baseline values that lead to a zero VCR for a project do not affect its ranking; for example, project H cannot attain rankingr=1on any interval, although no project has a higher VCR for baseline values above 0.701.Our algorithm for solving all possible rankings is based on the fact that a ranking can only change at baseline value pointsvBin which (i) VCR of some project reaches zero, i.e., there existsj∈{1,…,m}such thatvB=v(xj)or (ii) two projects have equal positive VCRs. The latter condition holds only for pairs of projectsxj,xkthat satisfy property (i) of Lemma 4, in which case the baseline valuevBcan be solved fromv(xj)-vBcj=v(xk)-vBck⇔vB=ckv(xj)-cjv(xk)ck-cj.These baseline value points are then collected in an ascending order into a single vectorδ. After evaluating the projects’ VCRs (5) at some point inside each interval(-∞,δ1]and[δl-1,δl],l=2,…, dim(δ), the projects’ rankings can be computed using Definition 2. Formally, the algorithm is stated as follows:Algorithm 2Fig. 5illustrates the projects’ possible rankings in the CBAA example. The 22 elements of vectorδ=(-3.2373,-1.5812,…,0.676,0.701)are marked on the horizontal axis. For instance, if the baseline value is between 0.2777 and 0.3479, the projects’ ranking would be B, D, C, A, E, G and F. In this interval, the value of project H is below the baseline value, wherefore it does not have a ranking.

@&#CONCLUSIONS@&#
In this paper we have developed general methods (i) for specifying the baseline value (i.e., the value of not implementing a project) for the linear-additive portfolio value function and (ii) for analyzing how sensitive the optimal portfolio and the projects’ value-to-cost rankings are to the baseline value. The identification of potentially optimal portfolios is based on solving ILP problems, while analysis of the value-to-cost rankings requires pairwise checks between the projects. Hence, both analyses are relatively straightforward to use and implement. The tests carried out with random problem instances confirm that potentially optimal portfolios can be solved in a reasonable time for problem sizes often encountered in applications.The results presented in this paper can be applied also with more general portfolio value functions. Although the developed methods are based on the assumption that the portfolio value is the sum of the project values, they do not require that these values are obtained through an additive aggregation of attribute-specific values. Hence, the sensitivity analysis tools of Sections ‘Potentially Optimal Portfolios and Projects’ Value-to-Cost Rankings’ can be used even in cases were the project values are obtained with, for example, a multiplicative value function (Golabi et al., 1981). However, if the portfolio value is not additive across projects (cf. Liesiö, 2014), then the identification of the potentially optimal portfolios cannot be based on the algorithm presented in Section ‘Potentially Optimal Portfolios’. Furthermore, in this case the value-to-cost ratio does not offer a justifiable prioritization rule for the projects.There are several interesting avenues for future research. First, the methods developed for specifying the baseline value should be tested in real-life applications to identify best practices on how to use them in different types of multi-attribute portfolio problems. Second, a logical path would be to develop computational models that identify the potentially optimal portfolios in situations where – in addition to the baseline value – also other parameters of the linear-additive portfolio value function (e.g., attribute weights) are defined through set inclusion (see, e.g., Liesiö et al., 2007; Liesiö et al., 2008). Finally, techniques for specifying the baseline value and for carrying out sensitivity analysis could be developed for non-additive portfolio value functions (Liesiö, 2014).