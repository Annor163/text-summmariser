@&#MAIN-TITLE@&#
A twofold model for the analysis of access control policies in industrial networked systems

@&#HIGHLIGHTS@&#
A model to describe access control policies in industrial networked systems.The model allows the high level description of access control policies in RBAC.The model allows the detailed description of the real system low level mechanisms.The model allows automated analysis of the correctness of policy implementation.

@&#KEYPHRASES@&#
Industrial networked systems,Access control,RBAC,Security,Modeling of distributed systems,

@&#ABSTRACT@&#
Requirements concerning the specification and correct implementation of access control policies have become more and more popular in industrial networked systems during the last years. Unfortunately, the peculiar characteristics of industrial systems often prevent the designer from taking full advantage of technologies and techniques already developed and profitably employed in other application areas. In particular, the unavailability and/or impossibility of adopting hardware (h/w) and software (s/w) mechanisms able to automatically enforce the policies defined at a high level of abstraction, often results in checking the correctness of policy implementation in the real system manually. The first step towards carrying out this cumbersome task in an automated way is the development of a model able to capture both the high level policy specification as well as the details and low-level mechanisms characterizing the actual system implementation. This paper introduces a twofold model for the description of access control policies in industrial environments aimed at coping with this requirement and which can be profitably adopted in several kinds of automated analysis.

@&#INTRODUCTION@&#
In the last years, the security of industrial networked systems (INS) and, especially, those aspects regarding the protection against threats carried out from either their inside or their outside have been receiving increasing attention [1–7]. Prevention/detection of attacks as well as reaction triggering have been also significantly considered in the scientific literature [8–10]. Unfortunately, relatively little work has been done about techniques for the coherent, error-free design of access control policies and, in particular, for the verification of correctness of policy implementation.The specification and implementation of access control policies is one of the fundamental steps in the process of securing any kind of system. Indeed, in almost all situations where the access to resources has to be managed in a secure way, a basic need is guaranteeing that the specification of access control policies and their implementation match correctly to some extent.This aspect is remarkably true for INS, such as those adopted in distributed process control/automation applications and critical infrastructures. Because of technological progresses and enhancements, these systems look more and more similar, today, to general-purpose IT solutions that are popular in other application areas such as, for instance, office and enterprise networks. The other side of the coin is that they are exposed to the same cyber-threats experienced by their IT counterparts.Different performance and functional requirements, which make INS different from general-purpose IT systems [11], deeply affect the way the matching between the specification and implementation of policies can be guaranteed. In particular, in most real situations the only viable option is an a posteriori verification of correctness of policy implementation. Moreover, this difficult and cumbersome task has often to be performed by hand, which makes it even more time-consuming and error-prone.In these conditions a model, designed to both specify access control policies and capture descriptive elements about the low-level access control mechanisms used for their implementation, is of valuable help in enabling correctness and coherence analyses. Our approach keeps a neat separation between the description of policies following the Role Based Access Control (RBAC) paradigm [12,13], and the description of the system structure including its low-level access control mechanisms and architectural details.In the following we will refer to the RBAC-based portion of the model as the Specification model, while the part dealing with the actual system description will be called Implementation model. The Implementation view of the model, in particular, takes into account a wide variety of access control mechanisms, which are usually deployed in industrial distributed systems, and is the basis needed to provide a detailed description of the sequences of actions which can be performed by any user to access resources in the considered system. Specifically, the Implementation model allows for the description of both the system spatial topology (i.e. rooms and gates, cabinets, and so on) and its protection (locks and keys, electronic access control mechanisms, etc.). Devices and their physical locations and interconnections are also modeled together with services offered by any of them. Preconditions necessary for accessing services are considered as well (i.e. the need for either the physical access to the host where the service is located or the host accessibility through the network) and network device settings (e.g. firewall configurations) are also taken into account.The main idea is schematically represented in Fig. 1which puts into evidence how information about high-level policies is collected in the Specification part of the model, while low-level mechanisms and fine-grained details, concerning the real system implementation, build up the Implementation part. The two portions of the model are then processed by an automated analysis s/w tool, which is able compute all the possible actions a user should be allowed to perform according to the policy definition (Specification set), on the one hand, and all the operations the user is actually able to carry out in the actual system implementation (Implementation set), on the other hand. In particular, to compute the Implementation set, the tools builds a Labeled Transition System (LTS) for each user in the system, recording all the possible sequences of actions he/she can perform in the real systems. Elements in both Specification and Implementation sets are triples in the form (user, operation, object). By (automatically) comparing the resulting sets, the designer can check whether the system is correctly supporting the policies as expected (verification) or discrepancies are discovered. Clearly, in practical situation this process is iterative and, in principle, it should be repeated any time anything changes in the system. This occurs, for instance, whenever some policy implementation error is discovered and corrected, so as to keep the Implementation model aligned with the physical system characteristics and guarantee the consistency of the verification procedure. Note that in Fig. 1 dashed lines indicate tasks that need to be carried out manually by the designer, while solid ones represent actions/computations automatically performed by the tool.Even though our final goal is checking whether or not the Implementation matches the Specification correctly, the focus of this paper is on the ability of our model to describe policies and access mechanisms in industrial systems in detail, thus the characteristics of the analysis and automated s/w tool will not be discussed further. The interested reader can find more details on these aspects in [14–17].It must be pointed out that, while the Specification set directly comes from the policy definition, deriving the Implementation model from the real system could be a cumbersome task requiring careful consideration. Our future activities will address such a critical point by trying to use already available system information (network equipment configuration files, cabling and network schema, and so on) to automatically feed parts of the model.The paper is then organized as follows: Section 2 discusses some related works and Section 3 introduces the model structure. Section 4 describes the RBAC-based Specification model in more detail, while Section 5 deals with the Implementation model and, in particular, presents the description of the physical system and the LTS used to compute the Implementation set. Finally, some conclusions are drawn in Section 6.

@&#CONCLUSIONS@&#
The design and implementation of access policies in industrial networked systems demand for new techniques and automated tools able to cope with a number of characteristics, that are peculiar to most situations where a physical process or plant is interfaced, controlled and/or managed through a distributed ICT infrastructure. For instance, the difficulty or even impossibility to modify the architecture of the special-purpose hardware and software, that are frequently adopted in industrial systems, their real-time requirements and their long lifespan (i.e., decades) with respect to that of many IT technologies (i.e., few years) make appealing solutions, already developed and available in other application areas, hard to be applied also to industrial systems.A key point in designing and implementing the access policies correctly, in this case, is the ability to exploit the low-level security mechanisms, which are present in the industrial system, to support the set of policies defined at a higher abstraction level. Although these mechanisms can also be very poor, in principle, they are often the only element that can be leveraged to try setting up a satisfactory configuration of the system from the access control point of view.The model introduced in this paper has been developed bearing this basic aspect in mind. An automatic analysis tool, able to help with the policy design and check their correct implementation, has to be based on a system description capable of capturing the definition of high-level policies, on the one hand, but also a very large number of system implementation details, on the other hand. To the best of our knowledge, several other approaches appeared in the literature have dealt very extensively with the former aspect, but no attempt has been carried out, till today, to include also the description of the physical system in the model as we have done in our proposal.The model definition, however, is only the first necessary step of our work, which is focused on the development and experimentation of an automatic analysis tool for access policies in industrial environments. Ongoing activities, in fact, include the study of efficient analysis algorithms for verifying whether the specification part of the model correctly matches the implementation part and, finally, the enhancement of our automated analyzer prototype.