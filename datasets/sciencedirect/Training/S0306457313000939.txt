@&#MAIN-TITLE@&#
Temporal and multi-versioned XML documents: A survey

@&#HIGHLIGHTS@&#
XML documents contain temporal information and evolve over time.Our work explores change detection, versioning and querying support in XML documents.It describes the storage structures to efficiently store and retrieve XML documents.It explains the change management features in some commercial tools.It highlights several open research issues for multi-versioned XML documents.

@&#KEYPHRASES@&#
XML documents,Multi-version,Evolving,Temporal,Data model,Change detection,

@&#ABSTRACT@&#
Extensible Markup Language (XML) documents are associated with time in two ways: (1) XML documents evolve over time and (2) XML documents contain temporal information. The efficient management of the temporal and multi-versioned XML documents requires optimized use of storage and efficient processing of complex historical queries. This paper provides a comparative analysis of the various schemes available to efficiently store and query the temporal and multi-versioned XML documents based on temporal, change management, versioning, and querying support. Firstly, the paper studies the multi-versioning control schemes to detect, manage, and query change in dynamic XML documents. Secondly, it describes the storage structures used to efficiently store and retrieve XML documents. Thirdly, it provides a comparative analysis of the various commercial tools based on change management, versioning, collaborative editing, and validation support. Finally, the paper presents some future research and development directions for the multi-versioned XML documents.

@&#INTRODUCTION@&#
In today’s age, the challenge is to crack the business value of information available through the Web. The significance of enterprise information depends on the applications that manage it. An enterprise can publish its products catalogue on the Web, allow customers to browse and query the catalogue, and collect valuable suggestions from customers. XML promises to achieve such features of business functions including content integration, content intelligence, and content reuse. To fulfill the promises of XML, it is mandatory that we properly maintain XML documents.XML provides storage and manipulation of meta-data to create vocabularies for exchanging information between operational data sources via the Web (Pokorny, 2002). The increasing requirement of applications that use and exchange XML data is creating a demand to store XML documents for future references. Additionally, the information contained in XML documents is dynamic and changes across time (Dyreson & Grandi, 2009). Multi-versioned XML documents are applicable in cooperative authoring, software configuration control, e-permanence of web documents, and web information warehouses. The versatile applicability of XML documents in different fields information maintenance and management is increasing the demand for their multi-versioning support. Therefore, different versions of XML documents are stored with time. However, storage of all versions of an XML document introduces redundancy, makes content-based searches hard due to the explosion of hits, and increases difficulty to answer queries on an evolving document. Therefore, efficient schemes are required to store and detect changes in dynamic XML documents. Furthermore, it is necessary to identify optimized schemes to efficiently execute queries that span over multiple versions of XML documents, known as cross-version queries.Various surveys (Ali & Pokorný, 2009; Colazzo, Guerrini, Mesiti, Oliboni, & Waller, 2010; Guerrini & Mesiti, 2009; Hartung, Terwilliger, & Rahm, 2011) have been written on evolving semi-structured or XML data and schema. (Guerrini & Mesiti, 2009; Hartung et al., 2011) provide an overview of the schema evolution support in several commercial tools. (Colazzo et al., 2010) provides an overview of the various languages available for the specification, semantics, and handling of XML document updates. (Ali & Pokorný, 2009) gives a comparative analysis of several temporal XML data models. This study surveys schemes to store, retrieve, and query temporal and multi-versioned XML documents on the basis of different parameters, including versioning support for XML document and schema, temporal support for elements and attributes, supported time dimensions, change detection, change management, and supported query types. Further, it provides a comparative analysis of the various commercial tools and database management systems (DBMSs) based on their versioning support.The remainder of this paper is organized as follows: Section 2 provides an overview of XML data model. Section 3 discusses some version control schemes for change detection and change management in dynamic XML documents. Section 4 discusses several schemes for query support of XML documents. Section 5 provides in-depth analysis of the literature work. Section 6 describes storage structures to usefully store XML documents. Section 7 provides a comparative analysis of various commercial tools and database management systems (DBMSs) for XML documents. Section 8 gives some future research and development directions for multi-versioned XML documents. Finally, Section 9 concludes this paper.Web browsers use Hyper Text Markup Language (HTML) to compose textual, graphical, audible, and visual material in the form of Web pages. The standards for HTML are provided by World Wide Web Consortium (W3C). HTML has some limitations for representing Web content such as separately handling of web data (content) and its representation. Therefore, W3C designed a new language namely, Extensible Markup Language (XML), to resolve the limitations of HTML. XML is like HTML in format. However, it is more extensible and handles only content, while presentation is addressed separately. It also supports validation of external data. The XML Schema or Document Type Description (DTD) defines a structure of XML documents and helps applications to validate imported data.Businesses appreciate XML as it removes many costly workarounds required in HTML to represent rapidly changing data. The widespread acceptance of XML demands its continuous support over the next decade.Several standards are available for data sharing and management in XML such as Extensible Stylesheet Language (XSL) to transform an XML document and Document Object Model (DOM) to allow programs to dynamically access or update an XML document. Thus, XML with other related technologies provides great benefits and simplicity. XML and database technology are more complementary. The task of managing loads of XML data has increased the demand to explore the integration of these two fields. XML databases are equally beneficial for content-centric and change-centric applications. The change-centric applications such as software configuration and cooperative work may exploit dynamic XML documents since the content and structure of a dynamic XML document changes hourly, or weekly, depending on the underlying business processes, such as the content of a website of an online store. In contrast to a dynamic XML document, the content and structure of a static XML document remains unchanged. Whenever the content of a XML document changes, either of the two change management approaches may be used: (1) let the document evolve (2) create a new version for the document. The former approach is straightforward but no history is retained in this case. The latter approach creates an increasing number of XML documents and requires version control schemes to manage the content. A version control scheme may use object-referencing or deltas to detect and store the changes between multiple versions. In this paper, we study the three main issues related to multi-versioned XML documents: (1) how to detect changes between multiple versions, (2) querying multi-versioned XML documents, and (3) storage structures for multi-versioned documents. The significance of multi-versioned XML documents has motivated us to also highlight the commercial tools, which support the versioning feature for XML documents.Furthermore, XML documents also contain temporal information such as relational databases published in XML (Wang & Zaniolo, 2003b) and cultural heritage (Grandi, 2002). Similar to the data models for temporal relational databases, the temporal data models are required to manage temporal information in XML documents. An XML temporal data model extends an XML data model by time dimensions.Version control is required to manage and query the semi-structured nature of continuously changing XML documents. Various schemes have been proposed for controlling versions of XML data based on deltas (Chien, Tsotras, & Zaniolo, 2001b; Leonardi & Bhowmick, 2005; Leonardi, Bhowmick, & Madria, 2005; Rusu, Rahayu, & Taniar, 2005; Wong & Lam, 2002; Wuwongse, Yoshikawa, & Amagasa, 2004; Wang & Zaniolo, 2003a; Marian, Abiteboul, Cobena, & Mignet, 2001; Wong & Lam, 2003) and object references (Chien, Tsotras, & Zaniolo, 2001a; Chien, Tsotras, & Zaniolo, 2001c; Chien, Tsotras, & Zaniolo, 2002; Chien, Tsotras, Zaniolo, & Zhang, 2001). However, deltas are more intuitive as compared to object referencing because they can be directly applied to a version to obtain its previous version.Section 3.1 discusses management of evolving XML documents and provides a comparative analysis of the various schemes based on versioning and temporal support. Section 3.2 describes how change is detected and provides a comparative analysis of the various schemes based on change management.Versions and temporal data are inter-related. For example, a Web page management system maintains record of multi-versioned Web pages with respect to time. Some efforts have been made to unify these two concepts for effective management of evolving XML documents (Wuwongse et al., 2004; Wang & Zaniolo, 2003a; Gergatsoulis & Stavrakas, 2003; Grandi, Mandreoli, & Tiberio, 2005; Grandi, Mandreoli, Tiberio, & Bergonzini, 2003). Fig. 1shows a temporal multi-versioned data model (TVDM), which integrates temporal information and delta namely, temporal delta (tDelta) (Wuwongse et al., 2004).Data models for multi-versioned XML documents that treat a version as a snapshot are unable to effectively store historical information. The inclusion of temporal information with multi-versioned XML enhances the historical value of such documents. However, various schemes have been proposed to either manage temporal XML data (Amagasa, Yoshikawa, & Uemura, 2000; Dyreson, 2001; Dyreson, Lin, & Wang, 2004; Wang & Zaniolo, 2004; Zhang & Dyreson, 2002) or multi-versioned XML documents (Cavalieri, 2010; Cavalieri, Guerrini, Mesiti, & Oliboni, 2011; Guerrini & Mesiti, 2008; Guerrini, Mesiti, & Sorrenti, 2007). A comparative study of the schemes for managing multi-versioned XML documents requires the analysis of various parameters, including supported time dimension, temporal queries, temporal attributes, temporal elements, content versioning, schema versioning, collaborative editing, query language, and XML syntax. Each of these parameters has its own significance.Schema evolution is the ability to adapt the deployed schemas to changing requirements and should not degrade the availability or performance of the changed system. It supports evolution transparency by storing different explicit versions of schemas and their associated instances. It should support backward compatibility, forward compatibility, versioning, and views to isolate the applications and other schema consumers from changes. In backward compatibility between schema versions S and S’, applications of the old schema version S can use S’ while in forward compatibility, applications of S’ can use S.Two types of approaches are available for the adaptation of original schema instances to the evolved schema: (1) automatic (2) query-based. Automatic adaptation is feasible when there is an obvious way to correct documents, for example, upon minimal changes to schema such as renaming of an element.The support of collaborative editing of multi-versioned XML documents by integrating the versioning technologies and fragment access is another important management feature for such documents.Time dimensions may be applied to elements and attributes of an XML document.XML documents having temporal information are managed by associating a timestamp with each object in the document. Several time dimensions including valid, transaction, efficacy, and publication are used to represent temporal data in XML documents. The valid time (VT) indicates the time when the data is true in the real world. The transaction time (TT) indicates the recording time of data in the system. VT and TT combined are considered as bi-temporal time. Efficacy time represents the data validity. Furthermore, XML data models can be extended with a version stamp to manage non-linear versioning (Rosado, Márquez, & Gil, 2007; Wuwongse et al., 2004). XML databases with either time type or several time types lead to their various temporal data models (Amagasa et al., 2000; Dyreson, 2001; Rizzolo & Vaisman, 2008; Wang & Zaniolo, 2004; Zhang & Dyreson, 2002). In (Amagasa et al., 2000; Wang & Zaniolo, 2008; Zhang & Dyreson, 2002) a valid time support is added to XPath. In (Grandi et al., 2005; Wang & Zaniolo, 2003a; Wang & Zaniolo, 2004; Wang & Zaniolo, 2008) and (Grandi et al., 2005; Wang & Zaniolo, 2003a; Wang & Zaniolo, 2004) valid and transaction time supports are added to XQuery. This support results in an extended data model and query language.Some approaches (Brahmia, Bouaziz, Grandi, & Oliboni, 2010; Cavalieri, 2010; Rizzolo & Vaisman, 2008; Rosado et al., 2007) adopt a particular language for addressing parts of an XML document as the basis of their data models while others (Chien et al., 2001c; Chien, Tsotras et al., 2001; Guerrini & Mesiti, 2008; Guerrini et al., 2007; Zholudev & Kohlhase, 2009) do not discuss anything about the use of a particular language. Some approaches (Grandi et al., 2005; Wang & Zaniolo, 2003a; Wang & Zaniolo, 2004; Wang & Zaniolo, 2008; Wong & Lam, 2002) describe how XQuery can be used to express queries in their representation scheme.Table 1provides a summary of the comparative analysis of the various schemes based on the abovementioned parameters.Version detection is required in various applications such as web page ranking, software clone identification, plagiarism detection, and peer-to-peer searching. Versions can be detected by analyzing the similarities between various files for which selecting a similarity function and threshold value are important key factors. The similarities of content and structure, as well as application requirements are helpful in designing a similarity function for version detection. Various schemes have been proposed for detecting changes in multiple versions of an XML document based on the ‘diff’ algorithms (Cobena, Abiteboul, & Marian, 2002; Rusu, Rahayu, & Taniar, 2008; Saccol, Edelweiss, Galante, & Zaniolo, 2007; Wang, DeWitt, & Cai, 2003; Wong & Lam, 2002; Wong & Lam, 2003), textual content of documents (Baeza-Yates & Ribeiro-Neto, 2011), structure of document (Flesca & Pugliese, 2005; Gao & Chen, 2013; Wan & Yang, 2006), key-based (Viyanon & Madria, 2009), and document classification (Pon, Cárdenas, Buttler, & Critchlow, 2007; Wang, Hodges, & Tang, 2003). The diff-based schemes may use a delta document or a consolidated delta document for change-centric management of versions.A delta document indicates the changes between two versions of an XML document whereas a consolidated delta document contains the data of the original version as well as all deltas. Further, a delta document can be of two types, backward delta and forward delta. The consolidated delta is more efficient (Rusu et al., 2008) as it provides a mapping between both types of deltas and, thus, reduces the space complexity for storing deltas. Given the first version of an XML document and completed delta, any successor or predecessor version can be calculated by following a set of rules. Consider a document having n versions at n time stamps, T1, T2,…,Tn. The version T4 can be obtained at any time moment Tnby using intermediate delta or consolidated delta, as shown in Fig. 2. Former has two drawbacks (1) keeping all the delta documents introduces redundancy in case the elements of a document change often and (2) time overhead to recreate each previous version of the document by using intermediate deltas. The redundancy may come in three ways (1) data stored in deltas (2) recreating elements in consecutive versions, and (3) retrieving historical versions. Latter has a drawback of time overhead to query backward the unchanged parts of a document.The comparative study of change detection schemes requires the analysis of various parameters including change detection between two versions of an XML document, use of relational, delta, or object-referencing approach for change detection, support for ordered XML documents, scalability, supported file size, and representation of unchanged parts. Each parameter has its own significance.Some schemes can explicitly show the user the changed parts (Leonardi & Bhowmick, 2005; Leonardi et al., 2005; Rusu et al., 2005; Wong & Lam, 2002; Wuwongse et al., 2004) while other cannot (Cavalieri, 2010; Cavalieri et al., 2011; Guerrini & Mesiti, 2008; Guerrini et al., 2007; Rosado et al., 2007; Snodgrass, Dyreson, Currim, Currim, & Joshi, 2008; Wang & Zaniolo, 2008; Zholudev & Kohlhase, 2009). Schemes should be scalable to detect changes in large XML documents.The storage of intermediate complete versions of XML documents improves the efficiency and space complexity as the required version can be created by using the appropriate intermediate complete version instead of the current version only. Query processing becomes efficient while a system stores the intermediate complete versions because there is no need to reconstruct the intermediate versions.The schema-oblivious approaches use a fixed schema to store the logical order of an XML document and provide two benefits (1) handle XML schema evolution and (2) change detection does not require any modification in SQL queries.The reference-based schemes use object references and preserve the logical order of dynamic XML documents. A version is represented by using objects, which can (1) reference records representing unchanged parts between two versions and (2) be the actual document objects records.A valid XML document satisfies some constraints. As an XML document evolves, the validity of the updated part should be verified. Thus, validation of the time-varying multi-versioned XML documents is a hot research area (Brahmia et al., 2010).The storage of multi-versioned XML documents with high-similarity introduces redundancy. The objective is to reduce redundancies without loss of significant information. The storage redundancy can be avoided by storing only once the elements which remain unchanged between multiple versions.Table 2gives a summary of the comparison between various schemes based on the above mentioned parameters.Queries can be of two types (1) change-related, including queries spanning over a single version and queries spanning over multiple versions and (2) content-related. Queries spanning over a single version involve querying edit operations performed over a single document version. Queries spanning over multiple versions are processed over several deltas and their results are combined to answer a query. A query involving the version v is processed by reconstructing the version v for which a sequence of deltas is applied on the current version or the nearest complete version of the document. However, it is inefficient for queries which involve a range of versions as multiple versions have to be reconstructed. The queries can be of different types, including structural projection, path-expression, parent–child expression, content-based selection, version-interval, version aggregation, and diff-based queries, as described below briefly.•The structural projection queries like “Project the document’s 20th version between the third and the sixth chapters” require a continuous chunk of the document from a given version.The path-expression queries like “For 20th version, find all table elements under chapter 5” require a version and a regular path expression to output the elements that satisfy the expression for a specified version.Parent–child expression queries like “Find all table elements under chapters in 20th version” combine the structural joins with a path expression.Content-based selection queries output versions, which satisfy the predicates given in the where clause.The version-interval queries are extended single-version queries, supporting multiple versions. For example, “Project the document from 20th version to 25th version between the third and the sixth chapters” or “Find all table elements within chapter 5 from 20th version to 25th version”.The version aggregation query finds an aggregate value of elements, which are specified by a version-interval query. For example, “Find the word count of chapter 10 from versions 5 to 15”.The diff query like, “Retrieve all the changes applied to chapter 10 from 20th version to the current version” answers the changes made to an element between versions.Such queries are challenging to respond to efficiently, require identification of parent–child relationship between document elements, and can be answered efficiently by avoiding full traversal of the document sub-trees.XML versioning approaches based on line-edit scripts and object references are inefficient to capture the logical order, parent–child relationship, or tree structure of a document. The logical order of the document can be captured by using the numbering schemes (Abiteboul, Kaplan, & Milo, 2001; Al-Khalifa et al., 2002; Bruno, Koudas, & Srivastava, 2002; Li & Moon, 2001; Wang, Park, Fan, & Yu, 2003). Such schemes are invariant to document updates, utilize unused numbers for tagging the elements in future, can adopt fixed-size or variable-length numbers for tagging elements, and facilitate full-document version retrieval queries.Several numbering schemes are available such as durable node (Li & Moon, 2001), range-based (Abiteboul et al., 2001; Al-Khalifa et al., 2002; Bruno et al., 2002; Li & Moon, 2001), and prefix-based (Dyreson & Mekala, 2011; Sans & Laurent, 2008). In range-based numbering, each node is assigned a range of numbers to identify its position in the XML tree. The range-based numbering reduces path-expression queries to join operations. With the durable numbering scheme, the addition and deletion of elements do not affect the numbers assigned to elements and thus, it maintains the nodes in the pre-order traversal. Further, the space between numbers can be used for future insertions. In prefix-based numbering, the node number of a parent node is used as a prefix to assign a number to a child node. However, it uses variable length encodings and requires more space than other numbering schemes. Several schemes have been proposed to efficiently support queries for XML documents. Table 3provides a summary of the comparative analysis of these schemes based on supported querying type.The power of any model depends also on the support for powerful queries. (Wang & Zaniolo, 2003a; Wang & Zaniolo, 2008) describe support for powerful temporal queries expressed in XQuery for multi-versioned XML documents without requiring new constructs in the language. Similarly, (Rosado et al., 2007) discusses support for temporal queries expressed in XPath and XSLT for multi-versioned XML documents without requiring new constructs in the language. Other models in Table 3 do not discuss the issue of temporal queries. Several complex query types for multi-versioned XML documents are supported in (Chien et al., 2001a; Chien, Tsotras et al., 2001; Chien, Tsotras et al., 2002).As the schema evolves over time, even an expert user may not be able to pose the correct query for her needs. Work in the area of multi-versioned XML documents does not explore the design independence property, as these systems must have full knowledge of the schema. In (Termehchy, Winslett, & Chodpathumwan, 2011) the benefits of design independence and the potential of statistical based methods to have such a property are introduced.

@&#CONCLUSIONS@&#
