@&#MAIN-TITLE@&#
Resource loading with time windows

@&#HIGHLIGHTS@&#
Resource loading decides the resource usage and timing of a portfolio of orders.Resource loading is relevant to tactical multi-project capacity planning.We define three fundamental variants of resource loading.We provide a detailed complexity analysis.We investigate the inclusion of a non-preemption constraint.

@&#KEYPHRASES@&#
Resource loading,Complexity theory,Manpower planning,Preemption,

@&#ABSTRACT@&#
Resource loading appears in many variants in tactical (mid-term) capacity planning in multi-project environments. It develops a rough sketch of the resource usage and timing of the work packages of a portfolio of orders. The orders need to be executed within a time horizon organized into periods, each of which has a known number of workers available. Each order has a time window during which it must be executed, as well as an upper and lower bound on the number of workers that can work on this order in a period. The duration of the order is not fixed beforehand, but depends on the number of workers (intensity) with which it is executed. In this article we define three fundamental variants of resource loading and study six special cases that are common to the three variants. We present algorithms for those cases that can be solved either in polynomial time or in pseudo-polynomial time. The remaining cases are proven to be np-complete in the strong sense, and we discuss the existence of approximation algorithms for some of these cases. Finally, we comment on the validity of our results when orders must be executed without preemption. Although inspired by a number of practical applications, this work focuses on the properties of the underlying generic combinatorial problems. Our findings contribute to a better understanding of these problems and may also serve as a reference work for authors looking to design efficient algorithms for similar problems.

@&#INTRODUCTION@&#
Many organizations adopt a project structure to cope with large and highly complex tasks. These tasks usually involve expertise from many different departments or teams, such as engineering, service providers, process and production planning, and various production departments (De Boer, 1998). Traditionally, research in the area of project planning has focused on planning isolated projects. Many companies, however, employ an organizational structure in which multiple projects are run in parallel, sharing the same limited resources. This corresponds with a so-called ‘matrix structure’: resources are associated with functional departments, but are assigned to different ongoing projects over time (Larson and Gobeli, 1989). Adler, Mandelbaum, Nguyen, and Schwerer (1995) point out that frequent conflicts of interest arise when more than one project requires the same resource at the same time. The global coordination of such multi-project organizations is the essence of multi-project management. An aggregate, combined project plan facilitates cross-project analysis and reporting (Kerzner, 1998), and offers a useful tool for management to ensure that the organization does not take on more projects than it can complete (cf. Wheelright and Clark, 1992). Speranza and Vercellis (1993) observe that, because of the multi-objective and dynamic nature of multi-project planning, a monolithic approach is inadequate for most practical applications. Instead, they suggest a decomposition into an operational and tactical planning phase. In the latter phase, which we refer to as resource loading, the distinct production operations are often aggregated into jobs representing whole production phases, and planning and scheduling decisions typically pertain to these so-called work packages(Alfieri, Tolio, and Urgo, 2011). While detailed production planning (scheduling) at the operational level has already been the subject of extensive research efforts for various industrial sectors, the work on mid-term capacity planning is rather limited. This paper contributes to a better understanding of the latter through a careful analysis of the underlying combinatorial optimization problem.We are given a set of potential orders (henceforth, ‘jobs’) and a work roster for the planning horizon. The workforce capacity may change over time in function of the individual workers’ calendars and earlier capacity-allocation decisions. Each job has a release time and a deadline, which together make up the job’s time window, as well as a work content (equivalently referred to as workload), expressed in worker-periods. The essential difference between ‘classic’ planning and scheduling, on the one hand, and resource loading, on the other hand, is that the latter allows flexible resource utilization for the jobs to be performed, i.e. the workload can, to a certain extent, be spread over several periods in the planning horizon, and this in varying proportions. The duration of a job is therefore not fixed beforehand, but depends on the number of workers (intensity) with which the job is executed. Additionally, this intensity can change over time. A job can, for example, be started with two workers and completed with one, or vice versa. This model is of particular interest for tactical planning in equipment maintenance and in project-based make-to-order (MTO) and engineer-to-order (ETO) environments, where capacity utilization may strongly fluctuate over time and orders may vary significantly with respect to routings, material and tool requirements. Moreover, these attributes may not be fully known at the stage of order acceptance. In the classic product-process matrix of Hayes and Wheelright (1979), these environments belong to the same cell because they all deal with low-volume, low-standardization, one-of-a-kind products or assignments, with high variety. The available capacity is therefore flexibly planned in an aggregate fashion, relegating detailed scheduling decisions to the operational level. Throughout this text, we mainly refer to workers as the resource type being planned, but obviously the results obtained can also be directly applied to other renewable (i.e., non-consumable) resource types such as machines and other equipment.As mentioned supra, resource loading is part of tactical capacity management, which seeks to develop a rough overview of the resource usage and timing of the work packages involved in a given portfolio of orders. Dependent on the application, this may entail due-date setting and accept/reject decisions for individual orders, as well as choices regarding overtime and subcontracting. One specific application pertains to the planning of aircraft line maintenance, the routine maintenance performed at airports between flight arrival and departure. Line maintenance takes place on the tarmac (not in a hangar); typical tasks include troubleshooting, minor repairs, systems servicing, and the removal or replacement of components such as batteries, filters and reflectors. For each flight, the maintenance must be performed between the scheduled time of arrival and the scheduled time of departure of the aircraft, and the expected maintenance workload is known (see Beliën, Demeulemeester, and Cardoen, 2012). A similar application has been described for maintenance procedures of civil helicopters by Masmoudi (2011), more precisely for the so-called Heavy Maintenance Visit (HMV). For individual helicopters, HMVs are of a very low frequency: on average they occur only once every 12 years. De Boer (1998) describes similar problems encountered at the Royal Netherlands Navy (RNN) Dockyard, in the context of maintenance and repair of national-defence marine equipment. As an application in MTO environments rather than service operations, we can mention a tactical production-planning problem in sheet-metal production. Each order here consists of one or more jobs that are related via chain-like precedence constraints, and each job visits one specific machine group (a preliminary study was done in a Master’s thesis by Smeulders, 2011). Other practical illustrations of resource loading are presented by Naber and Kolisch (2014).We define three fundamental problem variants. We first consider the decision problem that verifies the existence of a feasible schedule that executes all orders with the workers available. Second, we study the scheduling problem of finding a feasible schedule that minimizes the number of additional worker-periods needed to execute all orders within the planning horizon. Finally, we look into the combined selection and scheduling problem of choosing a subset of orders that can be executed with the workers available while maximizing the total revenue. We identify six special cases that apply to each of these three related problems, and present algorithms for those cases that can be solved either in polynomial time or in pseudo-polynomial time. The remaining cases are shown to be np-complete in the strong sense, and we also discuss the existence of approximation algorithms for some of these cases. Finally, we comment on the validity of our results when orders must be executed without preemption: in practice, management often prefers a schedule in which jobs are not interrupted and resumed at a later time.Although inspired by a number of practical applications, this work focuses on the properties of the underlying generic combinatorial problems. Our findings contribute to a better understanding of the structural properties of resource loading. In addition, they can serve as a reference work for authors looking to design efficient algorithms for similar problems: the proposed algorithms can be implemented as a subroutine within any framework for solving practical problems. Beliën et al. (2012), for instance, propose a two-level solution approach for the line maintenance problem at Sabena Technics, where at the higher level an enumeration of a number of shift planning options is performed, and at the lower level a resource loading instance (as defined in Section 2.1) is encountered for each of the enumerated options. If the instances to be solved at the lower level display some of the specific characteristics outlined in Section 2.4, or can without too much loss of practical validity be modified to match those characteristics, then substantial runtime savings can be achieved by solving the instances with a dedicated algorithm (such as those proposed in this text) rather than by means of a commercial mixed-integer programming (MIP) solver (which is used by Beliën et al.). More generally, for any practical application, the work in this article allows to assess which of the modeling assumptions will tilt the problem from easily solvable to intractable.The remainder of this article is organized as follows. In Section 2.1, we give a formal definition of the three problem variants and review the relevant literature. In Section 3 the decision-problem variant is discussed, while the scheduling variant is analyzed in Section 4, and Section 5 focuses on resource loading with job selection. Finally, Section 6 presents conclusions and suggestions for future research.We provide a formal problem statement in Section 2.1, followed by an illustrative example (Section 2.2). Section 2.3 briefly reviews the relevant literature, while in Section 2.4 the results obtained in the following sections are summarized.We consider H consecutive time periods that constitute the planning horizon, where period t (t = 1, …, H) runs from time (instant) t − 1 to t (period 1, for instance, is the interval [0, 1]). For aircraft line maintenance, for instance, the planning horizon is typically 1 week: the same flights are to be serviced every week. In period t, ctworkers are available (this number can be derived from the work roster). We denote by N = {1, 2, …, n} the set of available jobs (orders), which can be executed by a single resource type (representing the workers) within the planning horizon. Each job j has a release time rj, before which it cannot be started, and a deadlined¯j,which represents the ultimate completion time of the job. In other words, each job j is associated with a time window[rj,d¯j]. The work content (workload) of job j is denoted by pj, and is expressed in worker-periods. Furthermore, each job j has a pre-specified minimum number of workers lbjthat must, and a maximum number ubjthat can be assigned, during each period in which it is scheduled(1≤lbj≤ubj≤pj). In aircraft maintenance, for example, the size of the aircraft and the specific nature of each task impose an upper bound on the number of workers that can work simultaneously, while (for safety reasons and effective coordination) there is also a minimum number of workers that should be present around the aircraft when maintenance is performed.For each job j, we assume thatlbj≤ctfor each period t during which j can be executed, andubj≤max{ct:t=rj+1,…,d¯j}. The decision problem rlp-decision answers the question whether it is possible to devise a schedule that executes all jobs within the time horizon while respecting the time windows as well as the bound and capacity constraints. By rlp-scheduling we refer to the problem of finding a schedule that executes all the jobs using a minimum number of extra worker-periods. In practice, this implies that, if needed, external workers will be hired on a per-period basis or part of the work is subcontracted. Note that by solving rlp-scheduling we can also infer the answer to rlp-decision. Finally, we consider that each job j also has a revenue Qj, which is gained only when the job is completed, and depends on the nature of the job and the fee the client is willing to pay. The objective of the third problem, rlp-selection, is (1) to evaluate which jobs should be accepted in order to maximize total revenue and (2) to derive a feasible schedule that executes all the selected jobs within the time horizon using the workers available. Clearly, rlp-selection is also at least as hard as the problem rlp-decision, but no such obvious relationship exists between rlp-scheduling and rlp-selection.A MIP formulation of these three problem variants uses the binary decision variables xjtdefined for j ∈ N andt∈{rj+1,…,d¯j},with the interpretation that xjt= 1 if and only if job j is executed in period t, and the integer variablesyjt∈{0,lbj,lbj+1,…,ubj}(j ∈ N andt∈{rj+1,…,d¯j}) representing the number of workers assigned to job j in period t. For rlp-scheduling we also use integer variables zt(t = 1, …, H) to indicate the number of external workers hired in period t. Finally, problem rlp-selection also gives rise to binary variables sjfor j ∈ N, with sj= 1 if and only if job j is selected. A formulation contains the following set of constraints, which says that each job (each selected job, for rlp-selection) should be executed completely between its release time and deadline.(1)∑t=rj+1d¯jyjt=pjsj,j=1,…,n.For rlp-decision and rlp-scheduling, all the variables sjin Eq. (1) take the value 1. The workload assigned to each period cannot exceed the number of workers available (including external workers), which translates into:(2)∑j=1nyjt≤ct+zt,t=1,…,H.For rlp-decision and rlp-selection, all the variables ztin Eq. (2) are set at 0. Eq. (3) ensures that the number of workers assigned to each job in each period is either 0 or within the specified lower and upper bounds.(3)lbjxjt≤yjt≤ubjxjt,j=1,…,n,t=rj+1,…,d¯j.The problem rlp-decision corresponds with deciding whether the domain defined by constraints (1)–(3), with all sj= 1 and zt= 0, is non-empty. Problem rlp-scheduling consists in optimizing the objective function (4) subject to constraints (1)–(3), with all sj= 1.(4)min∑t=1HztFinally, rlp-selection amounts to solving(5)max∑j=1nQjsjsubject to constraints (1)–(3), with all zt= 0.A solution to rlp-decision, rlp-scheduling or rlp-selection is entirely determined by the matrix Y = (yjt)j, tfor j = 1, …, n and t = 1, …, H. We can deduce the value of the remaining variables as follows: xjt= 1 if and only if yjt> 0, sj= 1 if and only if∑t=rj+1d¯jyjt>0,andzt=max{0,∑j=1nyjt−ct}. Throughout this paper, we denote a solution to rlp-decision, rlp-scheduling and rlp-selection by Y, and we resort to the variables X = (xjt)j, t, S = (sj)jand Z = (zt)tonly when necessary.Next, we present our first result, which states that the integrality constraint on the variables yjtin the MIP formulations can be relaxed if all the parameters are integers.Proposition 1If all parameters are integers, then any optimal solution to rlp-decision, rlp-scheduling or rlp-selection obtained using the MIP formulations without integrality constraint on yjtcan be transformed in polynomial time into an equivalent solution satisfying the restrictionyjt∈{0,lbj,lbj+1,…,ubj}for all j ∈ N and t = 1, …, H.We prove this result for the problem rlp-selection, the reasoning for rlp-decision and rlp-scheduling is analogous. Assume that all parameters are integers and let Y′ be an optimal solution to the MIP formulation for rlp-selection without integrality constraint (so yjt≥ 0 for j ∈ N and t = 1, …, H). Suppose that some components of Y′ are not integer. If there is a unique job j0 ∈ {1, …, n} for which someyj0t′are fractional, then we define an integral solution Y as follows. Let t1 be the first period (smallest index) withyj0t1′fractional; we build a new solution Y with integer yjtfor t ≤ t1 and for all j by definingyjt=yjt′for j ∈ N∖{j0} and t = 1, …, H; andyj0t=⌈yj0t′⌉for t ≤ t1 (here ⌈ · ⌉ is the symbol for the ceiling); the remainingyj0twith t > t1 are adapted accordingly. More concretely, let t2 > t1 be the first period so thatyj0t1−yj0t1′≤∑t=t1+1t2(yj0t′−⌊yj0t′⌋)(where ⌊ · ⌋ is the symbol for the floor), thenyj0t=⌊yj0t′⌋for t1 < t < t2;yj0t2=⌊yj0t2′⌋+[∑t=t1+1t2(yj0t′−⌊yj0t′⌋)−yj0t1+yj0t1′]andyj0t=yj0t′for t > t2. By repeating this procedure at most H times, we arrive at a solution Y whose components are all integer. Furthermore, Y is a solution to rlp-selection that executes the same jobs as Y′, and hence Y and Y′ have the same objective value.Now suppose that more than one job has fractional components. Without loss of generality, we assume that for each t = 1, …, H, eitheryjt′∈{0,lbj,lbj+1,…,ubj}for all j ∈ N, or there are at least two jobs j1 and j2 that are executed with a fractional number of workers in that period. If this is not the case, we simply consider the equivalent solution where for that unique job, say j1, we have replacedyj1t′by⌈yj1t′⌉,and the execution of job j1 in the subsequent periods is adapted as described above. Using a similar argument, we can assume that for each period t the quantity∑j=1nyjt′is integer.Let Y′ be an optimal solution to the relaxation of the MIP formulation for rlp-selection satisfying the above restrictions. We build the following weighted complete bipartite graph G = (V1∪V2, E), where each node in V1 corresponds with a job j having at least one period t whereyjt′is fractional and each node in V2 corresponds with a period t with at least one job j withyjt′fractional; we write V1 = {j1, j2, …, jα} and V2 = {t1, t2, …, tβ}, where α ≤ n and β ≤ H. Each node i ∈ V1 is a source node with supply∑t=ri+1d¯i{yit′−⌊yit′⌋},and each node t ∈ V2 is a sink node with demand∑j=1n{yjt′−⌊yjt′⌋}. Finally, each arc (i, t) ∈ V1 × V2 has unit capacity, and zero cost ifyit′≠⌊yit′⌋and cost = M otherwise, where M is a large positive number. All the arc capacities are integer, so the Integrality Theorem (Ahuja, Magnanti, and Orlin, 1993) implies that there exists an optimal integer solution to the resulting capacitated network flow instance. Furthermore, since there is a fractional solution with cost 0, we infer that any optimal integer solution also has objective value 0. LetA=(ajktℓ)k,ℓ,for k = 1, …, α and ℓ = 1, …, β, be such an optimal integer solution, which can obtained in polynomial time (Ahuja et al., 1993). We consider the matrix Y defined as follows: for (j, t)∉V1 × V2 we haveyjt=yjt′and for (j, t) ∈ V1 × V2 we setyjt=⌊yjt′⌋+ajt. Matrix Y is an integer solution to rlp-selection that executes the same jobs as Y′; therefore Y and Y′ have the same objective value.□We close this section with additional definitions. We say that a job j ∈ N is splittable if and only if2lbj≤pjandrj+1<d¯j,which are two necessary conditions for a job to be executable over more than one period. Note that in an optimal schedule a splittable job need not be executed in multiple periods. A job j ∈ N is said to be executed without preemption if and only if it is executed in consecutive periods, meaning that all periods with yjt≥ 1 are consecutive, for all j ∈ N. Whenlbj≥1for j = 1, …, n, Proposition 1 remains valid even if each job must be executed without preemption. In Section 2.4 we will conclude that cases wherelbj=0can be replaced bylbj=1,so the result holds regardless of the values of the lower bounds.We now present a small example to illustrate the foregoing definitions. We consider a planning horizon with H = 10 weeks, with capacities (c1, c2, …, cH) = (2, 3, 3, 5, 7, 9, 8, 8, 10, 9). Observe that the available capacity is lower especially in the first weeks of the planning horizon. As noted by Hans (2001), this typically occurs in practice when capacity is reserved for (scheduled) orders that are already on the shop floor, and that may not be shifted in time. The remaining data are gathered in Table 1.An optimal solution to the corresponding instance of rlp-scheduling is graphically depicted in Fig. 1(a). The thick black curve represents the available regular capacity; the minimum required number of external workers is 13. The answer to the associated rlp-decision instance is therefore No. Fig. 1(b) represents an optimal solution to the rlp-selection instance with the same parameters; the maximum total revenue is 61, which is achieved by selecting all jobs except job 8.

@&#CONCLUSIONS@&#
In this paper, we have defined a generic resource scheduling problem inspired by tactical capacity planning in project-based environments. The direct contributions of this study are mainly theoretical: we contribute to a better understanding of the problem by presenting a structured complexity analysis of the underlying combinatorial optimization problem. In the process, we have observed a number of links with existing work in equipment maintenance and MTO and ETO planning, as well as operational and multiprocessor scheduling. Our results are useful to further the understanding of the structural properties of resource loading, and the proposed algorithms can be implemented as a subroutine within any framework for solving practical resource loading problems.Further work in this area should focus on incorporating practical aspects of specific planning cases. In one particular aircraft line maintenance problem, for instance, we learned that the intensities were required to be monotone, meaning that a job is executed with either non-decreasing or non-increasing intensities. This would mean, for instance, that one cannot start a job with one person, then continue with two persons, and finish again with one person. This monotonicity constraint also implies that the jobs are executed without preemption. Related studies have identified similar monotonicity constraints as dominant properties (see Hendel et al., 2014; Sadykov, 2012), hence this aspect certainly deserves further research. Resource loading as described in this paper can also be seen as a variant of the multiple knapsack problem in which items can be spread across different knapsacks. The bin packing problem is closely related to the multiple knapsack problem, and the possibility of splitting jobs across multiple bins has also been the subject of recent research (see Casazza and Ceselli, 2014). This area might also present a number of interesting synergies to be further explored.