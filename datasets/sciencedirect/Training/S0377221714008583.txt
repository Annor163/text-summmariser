@&#MAIN-TITLE@&#
On the MILP model for the U-shaped assembly line balancing problems

@&#HIGHLIGHTS@&#
Optimization models for U-shaped assembly lines are investigated.A MILP model is investigated in detail and shown that it may find optimal solutions that are infeasible.Theoretical analysis of infeasibility is provided and a revised version of this model is given.The infeasibility of the solutions reported by the model on a large set of benchmark problems.

@&#KEYPHRASES@&#
Integer programming,Facilities planning and design,U-shaped assembly lines,

@&#ABSTRACT@&#
U-shaped assembly lines are an important configuration of modern manufacturing systems due to their flexibility to adapt to varying market demands. In U-shaped lines, tasks are assigned after their predecessors or successors. Some MILP models have been proposed to formulate the U-shaped assembly line balancing problem using either–or constraints to express precedence relationships. We show that this modeling approach reported in the literature may often find optimal solutions that are infeasible and verify this on a large set of benchmark problems. We present a revision to this model to accurately express the precedence relationships without introducing additional variables or constraints. We also illustrate on the same benchmark problems that our revision always reports solutions that are feasible.

@&#INTRODUCTION@&#
The U-shaped assembly lines (UALs) gained significant popularity in industry and attracted the attention from academia over the past decades. In UALs, the products return back when they reach the end of the assembly line, and leave from the first workstation. Assembly line balancing problem (ALBP) is defined as: given a set of tasks, a set of precedence relationships, processing times of tasks, and a cycle time, we aim to assign the tasks to an assembly line with minimum number of workstations (or minimum cost), with respect to assignment, cycle time, and precedence constraints. The assignment constraints allocate tasks to stations. The cycle time constraints ensure that the total processing times of workstations do not exceed the given cycle time. The precedence constraints guarantee predefined priorities among tasks. Becker and Scholl (2006),Boysen et al. (2007) provide a comprehensive survey on problems and methods for generalized ALBP.Based on precedence constraints, a task is assigned to a workstation after assigning its predecessors or successors to the same or previous stations in U-shaped assembly lines. Some papers in the literature use 0-1 variables to formulate these possibilities as either–or constraints (Aase et al., 2004; 2003; Kazemi et al., 2011). We examine this modeling approach in detail and prove that it may find infeasible solutions. We test this model on a large set of benchmark problems and show that it finds infeasible solutions for a significantly large fraction (0.9262) of these problems. We provide a revision of this model and show that this revised model is able to find correct optimal solutions for UALBP without introducing additional variables or constraints. We conduct an experimental study on the benchmark problems to show the efficiency of the revised model.SALBP and UALBP are represented using the same model except for precedence constraints. In SALBP, a task is assigned to the assembly line after all of its predecessors; while in UALBP, a task is assigned after all of its predecessors or successors. To formulate precedence constraints, 0-1 variables are used to represent the either–or scenario (Aase et al., 2004; 2003; Kazemi et al., 2011). The following model exploits this approach to formulate precedence constraints in UALBPs (Aase et al., 2004; 2003).(1)min.∑j=1m∑i=1nCjXij(2)s.t.∑j=1mXij=1fori=1,…,n,(3)min.∑i=1ntiXij≤CTforj=1,…,m,(4)min.∑j=1mj(Xpj−Xqj)≤Myqforq=1,…,n∀(p,q)∈℘(5)min.∑j=1mj(Xsj−Xqj)≤M(1−yq)forq=1,…,n∀(q,s)∈℘(6)min.Xij∈(0,1)fori=1,…,n;j=1,…,m,(7)min.yi∈(0,1)fori=1,…,n,where, j is an index for stations, m is an upper bound on the number of workstations, i, p, q, and s are indices for tasks, n is the number of tasks, Cjare objective function coefficients, Xijare 0-1 variables that take a value of 1 if task i is assigned to station j, and 0 otherwise, tiare processing times of tasks, CT is the cycle time, M is a large scalar, yqis a 0-1 variable necessary for expressing either–or constraints, and ℘ = {(p, q)} is the set of immediate precedence relationships.Objective function (Eq. (1)) minimizes the total assignment cost and Eqs. (2) and (3) guarantee assignment and cycle time constraints, respectively. Eqs. (4) and (5) enforce precedence constraints among tasks.Property 1The model represented in Eqs. (1)–(7) may find optimal solutions that are infeasible for UALBP.We provide an example to show that an infeasible solution for UALBP may be feasible for the model in Eqs. (1)–(7). Fig. 1represents the precedence graph of the Jackson problem (Jackson, 1956) as well as processing times of the tasks. Fig. 2proposes an assignment of tasks to five workstations. For task 2, task 1 is predecessor and tasks 6, 8, 10, and 11 are successors. Task 2 is assigned to the first station, then its predecessors or its successors should have been assigned to the same or previous stations. However, neither all of the predecessors (task 1) nor all of the successors (tasks 6, 8, 10, and 11) have been assigned. Notice that although some of task 2’s successors (tasks 6 and 8) have been assigned, this does not satisfy the precedence constraints in UALBPs. Similarly, the assignment of tasks 6 and 8 to the first station and tasks 5, 7, and 9 to the second workstation violates the precedence constraints in UALBPs. Thus, the assignment given in Fig. 2 is infeasible.We show that the assignment given in Fig. 2 is feasible for the model in Eqs. (1)–(7). Note that Fig. 2 satisfies assignment constraints (Eq. (2)) and cycle time constraints (Eq. (3)). Let m = 5 (note that m can be any value not less than 5). Eq. (4) is written for (1, 2) and becomes∑j=15j(X1j−X2j)≤My2. Since task 1 is assigned to station 3, X13 = 1 and X1j= 0 ∀j = 1, 2, 4, 5. Since task 2 is assigned to station 1, X21 = 1 and X2j= 0 ∀j = 2, 3, 4, 5. Then, Eq. (4) becomes 3 − 1 ≤ My2, implying that y2 = 1. This should satisfy Eq. (5) which is written for (2, 6). Substituting q = 2, s = 6 and y2 = 1, Eq. (5) becomes∑j=15j(X6j−X2j)≤0. Using Fig. 2, X61 = X21 = 1 and X6j= X2j= 0 ∀j = 2, 3, 4, 5. Thus, the left-hand-side of this inequality also becomes 0 (0 ≤ 0); hence, it is satisfied. Therefore, task 2 can be assigned to station 1. We can similarly show that tasks 6 and 8 can be assigned to the first workstation and tasks 5, 7, and 9 can be assigned to the second workstation. Thus, the assignment in Fig. 2 is feasible for the model represented in Eqs. (1)–(7).It is obvious that an infeasible solution for UALBP may be feasible for the model in Eqs. (1)–(7); hence, the feasible region for this model incorporates solutions that are infeasible for UALBP. Therefore, the model in Eqs. (1)–(7) may find an optimal solution that is infeasible for UALBP.□This section presents the accurate either–or formulation for precedence relationships in U-shaped lines. A U-line comprises front-line (the entering leg) and back-line (the leaving leg). Let Yi∈ {True, False}, i = 1, …, n, be a Boolean variable that is True if task i is assigned to the front-line and False, if task i is assigned to the back-line. We also define Boolean variable χij∈ {True, False}, i = 1, …, n, j = 1, …, m that is True if task i is assigned to station j, and False otherwise. The either–or formulation in U-shaped lines is expressed as the following propositional logic.(8)Yi∧χij⇒Yp∧(∨j^=1jχpj^)∀i,j,p:(p,i)∈℘(9)¬Yi∧χij⇒¬Ys∧(∨j^=1jχsj^)∀i,j,s:(i,s)∈℘Property 2Eqs. (8) and (9) force the precedence relations in UALBPs.We define Piand Sias the set of all predecessors and successors of task i, respectively. For instance, in Jackson problem, P6 = {1, 2} and S6 = {8, 10, 11}. Suppose that task i is assigned to station j (i.e. χij= True). There are two possibilities for task i:•Yi= True. If p is an immediate predecessor of i (i.e. (p, i) ∈ ℘), based on Eq. (8), Yp= True and p is assigned before i. Similarly, all immediate predecessors of p have the Y-value of True and are assigned before p; hence, immediate predecessors of p are assigned before i. It is straightforward to generalize this for all predecessors of i;Yp^=Trueand(∨j^=1jχp^j^),∀p^∈Pi. Thus, i is assigned after all of its predecessors.Yi= False. If s is an immediate successor of i (i.e. (i, s) ∈ ℘), based on Eq. (9), Ys= False and s is assigned before i. Similarly, all immediate successors of s have the Y-value of False and are assigned before s; hence, immediate successors of s are assigned before i. It is straightforward to generalize this for all successors of i;Ys^=Falseand(∨j^=1jχs^j^),∀s^∈Si. Thus, i is assigned after all of its successors.Therefore, task i can be assigned after all of its predecessors (when Yi= True) or successors (when Yi= False). Hence, Eqs. (8) and (9) guarantee the precedence relationships among tasks in U-shaped lines.□To formulate Eqs. (8) and (9) as integer programming (IP) constraints, we define binary variable ui= {0, 1}, i = 1, …, n, that takes a value of 1 if task i is assigned to the front-line (when Yi= True), and 0 otherwise. Also, let Ωi, i = 1, …, n be the index of station that task i is assigned to (i.e.Ωi=∑j=1mjXij). The equivalent IP formulation of the propositional logic relationships given in Eqs. (8) and (9) is as follows.(10)Ωp−Ωi≤m(1+up−2ui)∀i=1,…,n∀p:(p,i)∈℘(11)Ωs−Ωi≤mui∀i=1,…,n∀s:(i,s)∈℘Property 3Eqs. (10) and (11) are the IP formulation of Eqs. (8) and (9).Considering p and s immediate predecessor and successor of i:(12)Ωp−Ωi≤m(1+up−2ui)∀p:(p,i)∈℘(13)Ωi−Ωp≤mup∀p:(p,i)∈℘(14)Ωi−Ωs≤m(1+ui−2us)∀s:(i,s)∈℘(15)Ωs−Ωi≤mui∀s:(i,s)∈℘uihas two possibilities:•ui= 1. Eq. (12) implies up= 1 for all p immediate predecessors of i. Note that if up= 0, Eq. (12) becomes Ωp− Ωi≤ −m and is infeasible since the smallest possible value of the left-hand-side is 1 − m. Hence, up= 1 and Ωp− Ωi≤ 0, ∀p: (p, i) ∈ ℘. Based on Eq. (14), ustakes value independently. Eqs. (13) and (15) have no effect as the largest value of the left-hand-side is m − 1. Therefore, ui= 1 implies up= 1 and Ωp≤ Ωi, ∀p: (p, i) ∈ ℘. Hence, the first logic given by Eq. (8) is satisfied.ui= 0. Eq. (12) has no effect independent of value of up. Based on Eq. (13), uptakes value independently. Eq. (14) implies us= 0 for all s immediate successors of i. Note that if us= 1, Eq. (14) becomes Ωi− Ωs≤ −m and is infeasible. Then, Eq. (14) has no effect. Hence, us= 0 and Ωs− Ωi≤ 0, ∀s: (i, s) ∈ ℘. Therefore, the second logic (Eq. (9)) is satisfied.□In our revision, we use Eqs. (10) and (11) instead of Eqs. (4) and (5) to guarantee feasibility. Note that Ωiis substituted with∑j=1mjXij. Therefore, the revised model guarantees feasibility without introducing additional variables or constraints.

@&#CONCLUSIONS@&#
We examine the either–or constraints, used by some papers in the literature, to formulate precedence relationships in UALBPs and illustrate its inconsistency. We test this modeling approach on a large set of benchmark problems and show that the reported solutions to a large fraction (0.9262) of these problems are infeasible. We propose a revision without introducing new variables or constraints and demonstrate its efficiency on benchmark problems.Supplementary data associated with this article can be found, in the online version, at 10.1016/j.ejor.2014.10.036.