@&#MAIN-TITLE@&#
Complexity results for the linear time–cost tradeoff problem with multiple milestones and completely ordered jobs

@&#HIGHLIGHTS@&#
We consider two project linear time–cost tradeoff problems with multiple milestones.The first problem is NP-hard, even when jobs are completely ordered.The first problem is pseudo-polynomially solvable, when jobs are completely ordered.The second problem is polynomially solvable, when jobs are completely ordered.

@&#KEYPHRASES@&#
Project scheduling,Time–cost tradeoff,Computational complexity,Chain precedence graph,

@&#ABSTRACT@&#
We consider two linear project time–cost tradeoff problems with multiple milestones. Unless a milestone is completed on time, penalty costs for tardiness may be imposed. However, these penalty costs can be avoided by compressing the processing times of certain jobs that require additional resources or costs. Our model describes these penalty costs as the total weighted number of tardy milestone. The first problem tries to minimize the total weighted number of tardy milestones within the budget for total compression costs, while the second problem tries to minimize the total weighted number of tardy milestones plus total compression costs. We develop a linear programming formulation for the case with a fixed number of milestones. For the case with an arbitrary number of milestones, we show that under completely ordered jobs, the first problem is NP-hard in the ordinary sense while the second problem is polynomially solvable.

@&#INTRODUCTION@&#
The time–cost tradeoff problem (TCTP) assumes that processing times can be compressed through the expenditure of additional resources such as labor and capital (Ford & Fulkerson, 1962; Kelley, 1961). Its typical objective is to minimize the project completion time subject to a constraint on total costs or to minimize total costs subject to a constraint on project completion time.The linear TCTP (LTCTP) is defined as a TCTP where the set of possible processing times is a closed interval and compression cost decreases linearly on the closed interval. The discrete TCTP (DTCTP) is defined as a TCTP with the discrete set of possible processing times. The LTCTP can be formulated as a linear programming (LP) problem. Furthermore, it can be solved efficiently with a network flow approach (Fulkerson, 1961; Kelley, 1961). However, the DTCTP is strongly NP-hard (De, Dunne, Ghosh, & Wells, 1997). Thus, for the DTCTP, Skutella (1998) developed approximation algorithms with a constant performance guarantee for various special cases. For a comprehensive review of the more general model (e.g., (multi-mode) resource-constrained project scheduling), see (Artigues, Demassey, & Neron, 2008; Brucker, Drexl, Möhring, Neumann, & Pesch, 1999; Demeulemeester & Herroelen, 2002; Weglarz, 1999; Weglarz, Jozefowska, Mika, & Waligora, 2011).The TCTP research above assumes one milestone for the overall project, that is, the last job. In reality, however, milestones can exist at any point in the project. For example, a venture capital company makes small investments in a project at first and then, when a milestone has been reached, determines whether to stop the project or make more investments (Bell, 2000; Sahlman, 1994). To the best of our knowledge, no study has been conducted on an LTCTP with more than one milestone.This paper considers two LTCTPs with multiple milestones such that penalty costs occur unless each milestone is reached no later than its due date. The first problem tries to minimize the total weighted number of tardy milestones within the budget for total compression costs, while the second problem tries to minimize the total weighted number of tardy milestones plus total compression costs. Let the first and second problems be referred to as LTCTP 1 and LTCTP 2, respectively.Our problems can be formally stated as follows. The LTCTP is represented by a directed activity-on-node graphG=(V,A), whereV={1,2,…,n}is the set of jobs and A is the set of precedence relations. Relation(i,j)∈Ameans that job i should be completed before job j is started. Associated with job j is a normal processing timepj, a maximal compression amountuj, and a compression cost ratecj,j=1,2,…,n. Letx=(x1,x2,…,xn)be the vector, wherexjis the compressed amount of job j and0⩽xj⩽uj,j=1,2,…,n. Note that throughout the paper, without loss of generality, we will consider only schedules such that each job is processed as soon as possible by not allowing unnecessary idle time. Thus, since each job has a unique starting time under each x, let x be termed schedule in this paper. LetD⊆Vbe the set of milestones. Note that each milestone corresponds to a specific job. Forj∈D, letwjanddjbe the penalty cost for tardiness and the due date of milestone j, respectively. LetCk(x)be the completion time of job k under x. Then, throughout this paper, LTCTP 1 and LTCTP 2 are defined, respectively, asminimize∑j∈T(x)wjsubject toCi(x)+pj-xj⩽Cj(x),∀(i,j)∈A,∑j=1ncjxj⩽B0⩽xj⩽uj,j=1,2,…,n,andminimize∑j∈T(x)wj+∑j=1ncjxjsubject toCi(x)+pj-xj⩽Cj(x),∀(i,j)∈A,0⩽xj⩽uj,j=1,2,…,n,whereT(x)={j|Cj(x)>djforj∈D}is the set of tardy milestones in D under x and B is the budget for total compression costs. Let milestone g be referred to as a just-in-time (JIT) job under x if completed exactly on its due date under x, that is,dg=Cg(x).Proposition 1LTCTP 1 and LTCTP 2 with a fixed number of milestones are polynomially solvable.Suppose thatD‾is the set of milestones which are completed no later than their due dates in a feasible schedule. For givenD‾, LTCTP 1 and LTCTP 2 can be formulated as an LP below.minimize∑j∈D⧹D‾wjsubject toCi(x)+pj-xj⩽Cj(x),∀(i,j)∈A,Cj(x)⩽dj,∀j∈D‾∑j=1ncjxj⩽B0⩽xj⩽uj,j=1,2,…,n,andminimize∑j∈D⧹D‾wj+∑j=1ncjxjsubject toCi(x)+pj-xj⩽Cj(x),∀(i,j)∈A,Cj(x)⩽dj,∀j∈D‾0⩽xj⩽uj,j=1,2,…,nNote that since the objective value in LTCTP 1 is a constant, our concern is to find a feasible schedule. It is observed that if the set of the milestones completed before the due dates is known in advance, then LTCTP 1 and LTCTP 2 can be formulated as an LP. Since the number of the milestones is fixed, this implies that optimal schedules of the two problems can be found by solvingO(2|D|)LP’s, where|D|is the cardinality of D. The proof is complete.□By Proposition 1, hereafter, we consider the case with an arbitrary number of milestones. Furthermore, in this paper, we focus on the LTCTP with a chain precedence graph (LTCTP-Chain) as starting point the LTCTP with multiple milestones. The motivation of LTCTP-Chain is found in a product development process consisting of sequential stages (Roemer & Ahmadi, 2004). Throughout the paper, assume that a chain precedence graph is described below:1→2→⋯→n,wherei→jrepresents that job j can start after job i is completed. Without loss of generality, assume that 1 and n are the start and the end jobs, respectively. Let LTCTP 1 and LTCTP 2 with a chain precedence graph be referred to as LTCTP-Chain 1 and LTCTP-Chain 2, respectively.The remainder of the paper is organized as follows. Section 2 shows that LTCTP-Chain 1 with an arbitrary number of milestones is NP-hard. It also presents a pseudo-polynomial time approach for LTCTP-Chain 1 with an arbitrary number of milestones. Section 3 shows that LTCTP-Chain 2 with an arbitrary number of milestones is polynomially solvable. The final section presents concluding remarks and discusses future work.In this section, we establish the computational complexity of LTCTP-Chain 1, and develop its pseudo-polynomial time approach.We can transform LTCTP-Chain 1 withD⊂Vinto the LTCTP-Chain 1 withD=Vby lettingdi=∑j=1npjfori∈V⧹D. It is clear that optimal schedules of this two problems are identical, since jobs i fori∈V⧹Dwill not be completed tardily. Thus, for simplicity of notations, we assume thatD=V.In this section, we show that the decision version of LTCTP-Chain 1 is NP-complete by the reduction from the partition problem, which is known to be NP-complete, see (Garey & Johnson, 1979). The partition problem can be stated as follows: Given n positive integersa1,a2,…,ansuch that∑j=1naj=A, is there a subsetI⊂{1,2,…,n}such that∑j∈Iaj=A2?Theorem 1The decision version of LTCTP-Chain 1 is NP-complete.The decision version of LTCTP-Chain 1 is denoted as follows: Given a threshold K, is there a schedule x such that x satisfies the precedence relations and∑j∈T(x)wj⩽Kand∑j=1ncjxj⩽B?It is clear that decision version of LTCTP-Chain 1 is in NP. Henceforth, we will reduce the partition problem to the decision version of LTCTP-Chain 1. Given an instance of the partition problem, we construct an instance of LTCTP-Chain 1 as follows. There are n jobs such that fork=1,2,…,n, letpk=Mk,wk=2ak,ck=akMkanduk=Mk, whereM>2(n+1)A. LetD={1,2,…,n}, which implies that all jobs have the dates of appraisal. Letd1=0anddk=∑j=1k-1Mj,k=2,3,…,n. LetK=AandB=A2.Suppose that there exists a setI‾such that∑i∈I‾aj=∑i∈{1,2,…,n}⧹I‾aj=A2. We can construct a schedulex¯by lettingx¯j=Mjifj∈I‾whilex¯j=0, otherwise. Note that sincex¯k=Mkfork∈I‾,Ck(x¯)=∑j=1k(pj-x¯j)⩽∑j=1k-1Mj=dk,and thus jobs inI‾are non-tardy, while sincex¯k=0fork∈{1,2,…,n}⧹I‾,Ck(x¯)=∑j=1k(pj-x¯j)⩾Mk>∑j=1k-1Mj=dk,and thus jobs in{1,2,…,n}⧹I‾are tardy, that is,T(x¯)={1,2,…,n}⧹I‾. Thus,∑j∈T(x¯)wj=∑j∈{1,2,…,n}⧹I‾2aj=A.The total compression cost is∑j∈I‾cjx¯j=∑j∈I‾ajMj·Mj=∑j∈I‾aj=A2.Thus,x¯is a feasible schedule to the decision version of LTCTP-Chain 1, defined above.Suppose that there exists a schedulexˆsuch that∑j∈T(xˆ)wj⩽Aand∑j=1ncjxˆj⩽A2. □If job k is not tardy underxˆ, thenxˆk⩾Mk-∑j=1k-1Mj.Suppose thatxˆk<Mk-∑j=1k-1Mjinxˆ. Then,Ck(xˆ)=∑j=1k(pj-xˆj)⩾pk-xˆk>Mk-Mk-∑j=1k-1Mj=∑j=1k-1Mj=dk.This is a contradiction. The proof of Claim 1 is complete.□For an arbitrary setE⊆{1,2,…,n},1-∑j∈EajMj∑i=1j-1Mi>2AM.Sinceaj<Aand1Mj∑i=1j-1Mi<2M,j=1,2,…,n,∑j∈EajMj∑i=1j-1Mi<2nAM.Thus, sinceM>2(n+1)A,1-∑j∈EajMj∑i=1j-1Mi>1-2nAM>2AM.The proof of Claim 2 is complete. □LetE(xˆ)be the set of non-tardy jobs underxˆ. Then, we can construct a solutionI^to the partition problem by lettingI^=E(xˆ). If∑j∈I^aj=∑j∈E(xˆ)aj>A2, then, by Claims 1 and 2, and∑j∈E(xˆ)aj⩾A2+1,∑j=1ncjxˆj⩾∑k∈E(xˆ)ckxˆk⩾∑k∈E(xˆ)akMkMk-∑j=1k-1Mj=∑k∈E(xˆ)ak-∑k∈E(xˆ)akMk∑j=1k-1Mj⩾A2+1-∑j∈E(xˆ)akMk∑j=1k-1Mj>A2+2AM>B.Sincexˆis infeasible, this is a contradiction.If∑j∈I^aj=∑j∈E(xˆ)aj<A2, then, by∑j∈E(xˆ)aj⩽A2-1,∑j∈T(xˆ)wj=2∑j=1naj-∑j∈E(xˆ)aj⩾2A-A2-1=A+2>K.This is a contradiction. From the contradiction, it follows that∑j∈I^aj=A2and henceI^is a solution to the instance of the partition problem. This, in turn, shows that the instance of the partition problem is a yes-instance precisely if the corresponding instance of the decision version of LTCTP-Chain 1 is a yes-instance as well, which completes the proof.□In this section, we show that LTCTP-Chain 1 can be solved in pseudo-polynomial time.Lemma 1There exists an optimal schedule satisfying one of the following conditions:•All jobs are uncompressed;There exists at least one JIT job.The proof is given in Appendix A.□It is observed from Lemma 1 that all jobs are uncompressed or the number of JIT jobs is at least one in an optimal schedule. Henceforth, we consider only schedules where the number of JIT jobs is at least one.Lemma 2There exists an optimal schedule such that the jobs processed after the last JIT job are uncompressed.The proof is given in Appendix B.□There exists an optimal schedule such that the number of the partially compressed jobs between consecutive JIT jobs is at most one.The proof is given in Appendix C.□There exists an optimal schedule x such that when l andl′are the consecutive JIT jobs,(1)max{cj|j∈Fl,l′(x)}⩽min{cj|j∈Ul,l′(x)}, whereFl,l′(x)andUl,l′(x)are the sets of compressed and uncompressed jobs in{l+1,l+2,…,l′}under x, respectively;If there exists a partially compressed job (for simplicity, let that job be denoted by h), thench=max{cj|j∈Fl,l′(x)}.The proof is given in Appendix D.□There exists an optimal schedule x such that when k andk′are consecutive JIT jobs and the number of compressed jobs in{k+1,k+2,…,k′}is h, thenxπ(j)=uπ(j),j=1,2,…,h-1andxπ(h)=dk+∑j=k+1k′pj-∑j=1h-1uπ(j)-dk′,whereπ(j)is the job with the jth smallest compression cost rate in{ck+1,ck+2,…,ck′}, that is,cπ(1)⩽cπ(2)⩽⋯⩽cπ(k′-k+1).It holds immediately from Lemmas 3 and 4.□Without loss of generality, assume that ifcα=cβandk<α<β⩽k′, thenπ-1(α)<π-1(β),whereπ-1(α)andπ-1(β)are the positions of jobsαandβinπ, respectively.Based on Lemma 5, LTCTP-Chain 1 can be reduced to the restricted shortest path problem, (RSPP) which can be stated as follows: In graphG=(V,E)with a node setV={1,2,…,n}and an edge set E, each edge(i,j)∈Ehas a lengthli,jand a transition timeti,j, where 1 and n are source and sink nodes, respectively. The objective is to find a shortest constrained(1,n)-pathPsuch that∑j∈Pti,j⩽T, where T is a given value. It is known that the RSPP can be solved in pseudo-polynomial time (Hassin, 1992).Theorem 2LTCTP-Chain 1 can be solved in pseudo-polynomial time.We will prove the pseudo-polynomiality of the single chain case of LTCTP-Chain 1 through its reduction to the RSPP.LetN(0)andN(n+1)be the source and sink nodes, respectively. Note thatN(0)andN(n+1)are dummy nodes, which do not correspond to any job in LTCTP-Chain 1. For consistency of notations, letd0=0. Fori=0,1,…n, letN(i)denote a node representing that job i is a JIT job. For0⩽k<k′⩽n, letN(k)be connected toN(k′), if(1)dk+∑j=k+1k′pj⩾dk′and(2)dk+∑j=k+1k′pj-∑j=k+1k′uj⩽dk′.Note that if inequalities (1) and (2) are not satisfied, then jobk′cannot be a JIT job when job k is a JIT job. By using Lemma 5, the length and transition time of the arc going fromN(k)toN(k′)are calculated as follows:•tk,k′=∑j=1h-1cπ(j)uπ(j)+cπ(h)dk+∑j=k+1k′pj-∑j=1h-1uπ(j)-dk′, where–π(j)is the job with the jth smallest compression cost in{ck+1,ck+2,…,ck′},dk+∑j=1h-1(pπ(j)-pπ(j))+∑j=hk′-k+1dπ(j)>dk′anddk+∑j=1h(pπ(j)-uπ(j))+∑j=h+1k′-k+1pπ(j)⩽dk′;lk,k′=∑j∈Tk,k′wj, whereTk,k′is the set of tardy jobs in{k+1,k+2,…,k′}that are obtained when Lemma 5 is applied.Fori=0,1,…,n, letN(i)be connected toN(n+1)withli,n+1=∑j∈Ti,n+1wjandti,n+1=0, whereTi,n+1is the set of tardy jobs in{i+1,i+2,…,n+1}that are obtained when Lemma 2 is applied. LetT=B. The objective is to find the pathP∗from the source node to the sink node which minimizes∑(i,j)∈P∗li,jsubject to∑(i,j)∈P∗ti,j⩽B. In the reduced RSPP, the number of nodes isO(n)and the number of arcs is at mostO(n2), because the number of the arcs coming from each node is at mostO(n). Thus, this reduction can be done in polynomial time. The proof is complete.□LTCTP-Chain 1 is NP-hard in the ordinary sense.It hold immediately from Theorems 1 and 2.□In this section, we develop the approach to solve LTCTP-Chain 2 in polynomial time when the precedence graph is a chain.We can transform LTCTP-Chain 2 withD⊂Vinto LTCTP-Chain 2 withD=Vin a similar way which has been applied to LTCTP-Chain 2. Thus, for simplicity of notations, henceforth, we assume thatD=V.Lemma 6There exists an optimal schedule satisfying one of the following conditions:•All jobs are uncompressed;There exists at least one JIT job.The proof is given in Appendix E.□It is observed from Lemma 6 that all jobs are uncompressed or the number of a JIT job is at least one in an optimal schedule. Henceforth, we consider only the schedules such that the number of JIT jobs is at least one.Lemma 7There exists an optimal schedule such that jobs processed after the completion of the last JIT job are uncompressed.The proof is given in Appendix F.□There exists an optimal schedule such that the number of the partially compressed jobs between consecutive JIT jobs is at most one.The proof is given in Appendix G.□There exists an optimal schedule x such that when l andl′are the consecutive JIT jobs,(1)max{cj|j∈Fl,l′(x)}⩽min{cj|j∈Ul,l′(x)}, whereFl,l′(x)andUl,l′(x)are the sets of compressed and uncompressed jobs in{l+1,l+2,…,l′}under x, respectively;If there exists a partially compressed (for simplicity, let that job be denoted h), thench=max{cj|j∈Fl,l′(x)}.The proof is given in Appendix H.□There exists an optimal schedule x such that when k andk′are consecutive JIT jobs and the number of compressed jobs in{k+1,k+2,…,k′}is h,xπ(j)=uπ(j),j=1,2,…,h-1andxπ(h)=dk+∑j=k+1k′pj-∑j=1h-1uπ(j)-dk′,whereπ(j)is the job with the jth smallest compression cost in{ck+1,ck+2,…,ck′}, that is,cπ(1)⩽cπ(2)⩽⋯⩽cπ(k′-k+1).It holds immediately from Lemmas 8 and 9.□Without loss of generality, assume that ifcα=cβandk<α<β⩽k′, thenπ-1(α)<π-1(β),whereπ-1(α)andπ-1(β)are the positions of jobsαandβinπ, respectively.Based on Lemma 10, LTCTP-Chain 2 can be reduced to the shortest path problem (SPP), which can be stated as follows: In graphG=(V,E)with a node setV={1,2,…,n}and an edge set E, each edge(i,j)∈Ehas a lengthli,j, where 1 and n are source and sink nodes, respectively. The objective is to find a shortest(1,n)-pathPsuch that∑j∈Pti,j⩽T, where T is a given value. It is known that the SPP can be solved in polynomial time (Ahuja, Mehlhorn, & Orlin, 1990).Theorem 3LTCTP-Chain 2 can be solved in polynomial time.We will show the polynomiality of LTCTP-Chain 2 through its reduction to the SPP.LetN(0)andN(n+1)be the source and sink nodes, respectively. Note thatN(0)andN(n+1)are dummy nodes, which do not correspond to any job in LTCTP-Chain 2. For consistency of notations, letd0=0. Fori=0,1,…n, letN(i)denote a node representing that job i is the JIT job. For0⩽k<k′⩽n, letN(k)be connected toN(k′), if(3)dk+∑j=k+1k′pj⩾dk′and(4)dk+∑j=k+1k′pj-∑j=k+1k′uj⩽dk′.Note that if inequalities (3) and (4) are not satisfied, then jobk′cannot be a JIT job when job k is a JIT job. By using Lemma 10, the length of the arc going fromN(k)toN(k′)is calculated as follows:lk,k′=∑j∈Tk,k′wj+∑j=1h-1cπ(j)uπ(j)+cπ(h)dk+∑j=k+1k′pj-∑j=1h-1uπ(j)-dk′,where•π(j)is the job with the jth smallest compression cost in{ck+1,ck+2,…,ck′};dk+∑j=1h-1(pπ(j)-uπ(j))+∑j=hk′-k+1pπ(j)>dk′anddk+∑j=1h(pπ(j)-uπ(j))+∑j=h+1k′-k+1pπ(j)⩽dk′;Tk,k′is the set of tardy jobs in{k+1,k+2,…,k′}that are obtained when Lemma 10 is applied.Fori=0,1,…,n, letN(i)be connected toN(n+1)withli,n+1=∑j∈Ti,n+1wj, whereTi,n+1is the set of tardy jobs in{i+1,i+2,…,n+1}that are obtained when Lemma 7 is applied. The objective is to find the pathP∗from the source node to the sink node which minimizes∑(i,j)∈P∗li,j. In the reduced SPP, the number of nodes isO(n)and the number of arcs is at mostO(n2), because the number of the arcs coming from each node is at mostO(n). Thus, this reduction can be done in polynomial time. The proof is complete.□We present an LP–based approach to solve LTCTP 1 and LTCTP 2 in polynomial time, when the number of milestones is fixed. We prove that LTCTP-Chain 2 with an arbitrary number of milestones is NP-hard. Finally, we show that LTCTP-Chain 1 (LTCTP-Chain 2) can be solved in pseudo-polynomial (polynomial) time, when a number of milestones is arbitrary.For future research, it would be interesting to investigate the polynomially solvable cases of LTCTP 1 and establish the computational complexity of LTCTP 2 with general precedence constraints, when the number of milestones is arbitrary.ProofSuppose that there exists an optimal schedulex∗such that none of the jobs is completed exactly at its due date and jobαis compressed. LetEα(x∗)be the set of non-tardy jobs in{α+1,α+2,…,n}underx∗. Then, we can construct a new schedulex1by lettingxα1=xα∗-θ, whereθ=minxα∗,min{dj-Cj(x∗)|j∈Eα(x∗)}.Since∑j=1ncjxj1=∑j=1ncjxj∗-cα·θ<∑j=1ncjxj∗⩽B,x1is feasible, and by the definition ofθ,T(x∗)=T(x1). Thus,x1is also an optimal schedule.Ifθ=xα∗, then jobαbecomes an uncompressed job underx1, while otherwise, at least one job inEα(x∗)becomes a JIT job underx1. This implies that we can construct another optimal schedule satisfying Lemma 2 by applying the above argument repeatedly. The proof is complete.□ProofSuppose that there exists an optimal schedulex∗such that•job k is the last JIT job and jobαis processed after job k, that is,α>k;jobαis compressed, that is,0<xα∗⩽uα.LetEα(x∗)be the set of non-tardy jobs in{α+1,α+2,…,n}underx∗andFk(x∗)be the set of compressed jobs in{k+1,k+2,…,n}underx∗. Then, we can construct a new schedulex1by lettingxα1=xα∗-θ, whereθ=minxα∗,min{dj-Cj(x∗)|j∈Eα(x∗)}.Since∑j=1ncjxj1=∑j=1ncjxj∗-cα·θ<∑j=1ncjxj∗⩽B,x1is feasible, and by the definition ofθ,T(x∗)=T(x1). Thus,x1is also an optimal schedule. Ifθ=xα∗, then jobαbecomes an uncompressed job underx1, which implies(5)|Fk(x1)|⩽|Fk(x∗)|-1.Ifθ=min{dj-Cj(x∗)|j∈Eα(x∗)}, then at least one job inEα(x∗)becomes a JIT job. For simplicity, let that job be denotedk′. Then, jobk′is the last JIT job underx1, and(6)|Fk′(x1)|⩽|Fk(x∗)|-1.Inequalities (5) and (6) imply that Lemma 2 can be obtained by applying the above argument repeatedly. The proof is complete.□ProofSuppose that there exists an optimal schedulex∗such that•k andk′are the consecutive JIT jobs, that is, jobs in{k+1,k+2,…,k′-1}are non-JIT jobs;{α,β}⊆Pk,k′(x∗), wherePk,k′(x∗)is the set of the partially compressed jobs in{k+1,k+2,…,k′}underx∗, that is,0<xα∗<uαand0<xβ∗<uβ;Jobβis processed after jobα, that is,α<β.Consider two cases.(i)cα⩽cβ.We can construct a new schedulesx1by lettingxα1=xα∗+θ1andxβ1=xβ∗-θ1, whereθ1=min{uα-xα∗,xβ∗}. Since∑j=1ncjxj1=∑j=1ncjxj∗+(cα-cβ)θ1⩽∑j=1ncjxj∗⩽B,x1is a feasible schedule, and by the definition ofθ1,T(x1)⊆T(x∗). Thus,x1is also an optimal schedule. Furthermore, we observe that(7)|Pk,k′(x1)|⩽|Pk,k′(x∗)|-1.cα>cβLetEα,β(x∗)be the set of non-tardy jobs between jobsαandβunderx∗. We can construct a new schedulesx2by lettingxα2=xα∗-θ2andxβ2=xβ∗+θ2, whereθ2=minxα∗,uβ-xβ∗,min{dj-Cj(x∗)|j∈Eα,β(x∗)}.Since∑j=1ncjxj2=∑j=1ncjxj∗-(cα-cβ)θ2<∑j=1ncjxj∗⩽B,x2is a feasible schedule, and by the definition ofθ2,T(x2)=T(x∗). Thus,x2is also an optimal schedule. Ifθ2=min{xα∗,uβ-xβ∗}, then we observe that(8)|Pk,k′(x2)|⩽|Pk,k′(x∗)|-1.Ifθ2=min{dj-Cj(x∗)|j∈Eα,β(x∗)}, then a new JIT job is found under another optimal schedulex2. For simplicity, let that job be denotedk″, andPk,k″(x2)andPk″,k′(x2)be the sets of the partially compressed jobs between jobs k andk″and between jobsk″andk′, respectively. Clearly,(9)|Pk,k″(x2)|⩽|Pk,k′(x∗)|-1and|Pk″,k′(x2)|⩽|Pk,k′(x∗)|-1.Inequalities (7)–(9) imply that Lemma 3 can be obtained by applying the above argument repeatedly. The proof is complete.□Proof (1)Suppose that there exists an optimal schedulex∗such that•k andk′are the consecutive JIT jobs;cα>cβ, whereα∈Fk,k′(x∗)andβ∈Uk,k′(x∗).Consider two cases.(i)α>β.We can construct a new schedulex1by lettingxα1=xα∗-θ1andxβ1=θ1, whereθ1=min{xα∗,uβ}. Since∑j=1ncjxj1=∑j=1ncjxj∗-(cα-cβ)θ1<∑j=1ncjxj∗⩽B,x1is a feasible schedule, and by the definition ofθ1,T(x1)⊆T(x∗). Thus,x1is also an optimal schedule. Furthermore, we observe that ifθ1=xα∗, thenα∈Uk,k′(x1)andβ∈Fk,k′(x1), while ifθ1=uβ, thenα∈Fk,k′(x1)andβ∈Fk,k′(x1). From this observation,(10)β∈Fk,k′(x1).α<β.LetEα,β(x∗)be the set of non-tardy jobs between jobsαandβunderx∗. Then, we can construct a new schedulex2by lettingxα2=xα∗-θ2andxβ2=θ2, whereθ2=minxα∗,uβ,min{dj-Cj(x∗)|j∈Eα,β(x∗)}.Since∑j=1ncjxj2=∑j=1ncjxj∗-(cα-cβ)θ2<∑j=1ncjxj∗⩽B,x2is a feasible schedule, and by the definition ofθ2,T(x2)=T(x∗). Thus, we observe thatx2is also an optimal schedule. Furthermore, we observe that•Ifθ2=xα∗, thenα∈Uk,k′(x2)andβ∈Fk,k′(x2), while ifθ2=uβ, thenα∈Fk,k′(x2)andβ∈Fk,k′(x2). Thus, in two cases, it is observed that(11)β∈Fk,k′(x2).Ifθ2=min{dj-Cj(x∗)|j∈Eα,β(x∗)}, then a new JIT job is found underx2(for simplicity, let that job be denotedk″). LetJk,k′(x∗)be the set of the jobs between jobs k andk′inx∗, andJk,k″(x2)andJk″,k′(x2)be the sets of the jobs between jobs k andk″and between jobsk″andk′underx2, respectively. Clearly,(12)|Jk,k″(x2)|⩽|Jk,k′(x∗)|-1and|Jk″,k′(x2)|⩽|Jk,k′(x∗)|-1.Inequalities (10)–(12) imply that Lemma 4-(1) can be obtained by applying the above argument repeatedly.(2) Since Lemma 4-(2) can be proved in the way similar to the proof of Lemma 4-(1), we omit the proof for Lemma 4-(2).□ProofSuppose that there exists an optimal schedulex∗such that any job is not completed exactly at its appointed date and jobαis compressed. LetEα(x∗)be the set of non-tardy jobs in{α+1,α+2,…,n}underx∗. Then, we can construct a new schedulex1by lettingxα1=xα∗-θ, whereθ=minxα∗,min{dj-Cj(x∗)|j∈Eα(x∗)}.By the definition ofθ,T(x∗)=T(x1), and thus∑j∈T(x1)wj+∑j=1ncjxj1=∑j∈T(x∗)wj+∑j=1ncjxj∗-cα·θ⩽∑j∈T(x∗)wj+∑j=1ncjxj∗.Thus,x1is an optimal schedule. Ifθ=xα∗, then jobαbecomes an uncompressed job inx1, while otherwise, at least one job inEα(x∗)becomes a JIT job underx1. This implies that we can construct another optimal schedule satisfying Lemma 6 by applying the above argument. The proof is complete.□ProofSuppose that there exists an optimal schedulex∗such that•job k is the last JIT job and jobαis processed after job k, that is,α>k;jobαis compressed, that is,0<xα∗⩽uα.LetEα(x∗)be the set of non-tardy jobs in{α+1,α+2,…,n}underx∗andFk(x∗)be the set of compressed jobs processed after job k underx∗. Then, we can construct a new schedulex1by lettingxα1=xα∗-θ, whereθ=minxα∗,min{dj-Cj(x∗)|j∈Eα(x∗)}.By the definition ofθ,T(x∗)=T(x1)and thus,∑j∈T(x1)wj+∑j=1ncjxj1=∑j∈T(x∗)wj+∑j=1ncjxj∗-cα·θ⩽∑j∈T(x∗)wj+∑j=1ncjxj∗.Thus,x1is also an optimal schedule. Ifθ=xα∗, then jobαbecomes an uncompressed job underx1, which implies(13)|Fk(x1)|⩽|Fk(x∗)|-1.Ifθ=min{dj-Cj(x∗)|j∈Eα(x∗)}, then at least one job inEα(x∗)becomes a JIT job. For simplicity, let that job be denotedk′. Then, jobk′is the last JIT job underx1, and(14)|Fk′(x1)|⩽|Fk(x∗)|-1.Inequalities (13) and (14) imply that Lemma 7 can be obtained by applying the above argument repeatedly. The proof is complete.□ProofSuppose that there exists an optimal schedulex∗such that•k andk′are the consecutive JIT jobs, that is, jobs in{k+1,k+2,…,k′}are non-JIT jobs;{α,β}⊆Pk,k′(x∗), wherePk,k′(x∗)is the set of the partially compressed jobs belonging to{k+1,k+2,…,k′}inx∗, that is,0<xα∗<uαand0<xβ∗<uβ;Jobβis processed after jobα, that is,α<β.We can construct two new schedulesx1andx2by letting.•xα1=xα∗+θ1andxβ1=xβ∗-θ1, whereθ1=min{uα-xα∗,xβ∗};xα2=xα∗-θ2andxβ2=xβ∗+θ2, whereEα,β(x∗)is the set of non-tardy jobs between jobsαandβinx∗θ2=minxα∗,uβ-xβ∗,min{dj-Cj(x∗)|j∈Eα,β(x∗)},Ifcα≠cβ, then eitherx1orx2has a better objective value thanx∗. This is a contradiction. Henceforth, we consider only the case withcα=cβ. Then, we observe that•∑j∈T(x1)wj+∑j=1ncjxj1⩽∑j∈T(x∗)wj+∑j=1ncjxj∗;|Pk,k′(x1)|⩽|Pk,k′(x∗)|-1.These observations imply that Lemma 8 can be obtained by applying the above arguments repeatedly. The proof is complete.□Proof (1)Suppose that there exists an optimal schedulex∗such that•k andk′are the consecutive JIT jobs;cα>cβ, whereα∈Fk,k′(x∗)andβ∈Uk,k′(x∗).Consider two cases.(i)α>β.We can construct a new schedulex1by lettingxα1=xα∗-θ1andxβ1=θ1, whereθ1=min{xα∗,uβ}. By the definition ofθ1,T(x1)⊆T(x∗)and thus,∑j∈T(x1)wj+∑j=1ncjxj1⩽∑j∈T(x∗)wj+∑j=1ncjxj∗-(cα-cβ)θ1<∑j∈T(x∗)wj+∑j=1ncjxj∗.This is a contradiction.α<β.LetEα,β(x∗)be the set of non-tardy jobs between jobsαandβunderx∗. Then, we can construct a new schedulex2by lettingxα2=xα∗-θ2andxβ2=θ2, whereθ2=minxα∗,uβ,min{dj-Cj(x∗)|j∈Eα,β(x∗)}.By the definition ofθ2,T(x2)=T(x∗)and thus,∑j∈T(x2)wj+∑j=1ncjxj2=∑j∈T(x∗)wj+∑j=1ncjxj∗-(cα-cβ)θ2<∑j∈T(x∗)wj+∑j=1ncjxj∗.This is contradiction. By (i) and (ii), Lemma 9-(1) holds.(2) Since Lemma 9-(2) can be proved in a way similar to the proof of Lemma 9-(1), we omit the proof for Lemma 9-(2).□

@&#CONCLUSIONS@&#
