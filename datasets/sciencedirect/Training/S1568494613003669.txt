@&#MAIN-TITLE@&#
Multi-objective hardware–software partitioning of embedded systems: A case study of JPEG encoder

@&#HIGHLIGHTS@&#
HW–SW partitioning of embedded system is formulated as a multi-objective problem.Various cost terms of the problem are taken as objective functions.A binary GA is developed for solving the partitioning problem.Results are statistically compared for showing the performance of the GA.

@&#KEYPHRASES@&#
Embedded system,JPEG encoder,Hardware–software partitioning,Multi-objective optimization,Binary-coded genetic algorithm,

@&#ABSTRACT@&#
Embedded systems have become integral parts of today's technology-based life, starting from various home appliances to satellites. Such a wide range of applications encourages for their economic design using optimization-based tools. The JPEG encoder is an embedded system, which is applied for obtaining high quality output from continuous-tone images. It has emerged in recent years as a problem of optimum partitioning of its various processes into hardware and software components. Realizing pairing and conflicting nature among its various cost terms, for the first time the JPEG encoder is formulated and partitioned here as a multi-objective optimization problem. A multi-objective binary-coded genetic algorithm is proposed for this purpose, whose effectiveness is demonstrated through the application to a real case study and a number of large-size hypothetical instances.

@&#INTRODUCTION@&#
An embedded system is one that has hardware with software embedded in it as one of its most important components. It is a dedicated computer-based system for one or more particular task(s) or application(s). It may be either an independent system or a part of a larger system. Today the embedded systems have penetrated into the human life to a very large extent. Electronic devices (calculator, cell phone, digital camera, iPOD, television, music system, etc.), office equipment (printer, photocopier, fax machine, etc.), home appliances (refrigerator, washing machine, microwave oven, etc.), or automobiles (transmission control, fuel injection, etc.) are now equipped with either light or heavy embedded systems. The embedded systems play very vital roles in industries also. Robotics, Computer Numerical Control (CNC) machines, motion controllers, AC/DC drives, stepper motor controllers, Programmable Logic Controller (PLC) based automation, sensors, rectifiers, inverters, etc., are very good examples of embedded systems in industries. Many military applications, satellites and other space applications also employ embedded systems. Missile technology, high explosive bombs, fighter aircraft, tanks, rocket technology, different satellites, etc., have become possible because of embedded systems only.An embedded system typically consists of application-specific hardware (HW) and programmable software (SW) parts. In comparison to the HW part, the SW part is much easier to develop and modify. Thus, SW is less expensive in terms of cost and development time. HW, however, provides better performance. For this reason, the main goal of a system designer is to design a balanced system fulfilling all system constraints. The co-design phase, during which the system specification is partitioned into HW and SW parts of the target architecture, is called the HW–SW partitioning. Hence, the performance-critical components of an embedded system should be realized in HW, and its non-critical components in SW. In this way a good trade-off between cost and performance can be achieved. This phase represents one key issue during the design process of heterogeneous systems. Therefore, the aim of the partitioning task is to find a design implementation that fulfills all the specification requirements (functionality, goals and constraints) at a minimum cost. Traditionally the partitioning was carried out manually, in which a system designer decided, taking into account his/her own knowledge in the field, which blocks of the system could be implemented in HW and which could be realized as SW running on a standard processor. Such manual approaches were limited to small design problems with small number of constituent modules. With increasing complexity in system architecture, automatic HW–SW partitioning has now emerged as a very complex optimization problem. Since an embedded system is dedicated to specific tasks, provision is there for increasing the reliability and performance of a product by optimizing its size and cost. For example, Hong [22] minimized memory requirement (which impacts size), while Allam [2] minimized both power consumption and memory requirement.The Joint Photographic Expert Group (JPEG) encoder is a good example of an embedded system [23,30,40]. It is the first international digital image compression standard for continuous-tone images and photographs (grayscale or color). The rapidly increasing application encourages the automated HW–SW partitioning of the JPEG encoder also. The study is still immature. Only a limited number of preliminary works are found in the literature, in which it is partitioned as a single-objective optimization problem by combining different cost terms into a single scalar objective function [29,30,36]. It is realized in the present work that there exists some kinds of pairing among various cost terms of the problem. Motivated by the fact, an investigation is made with two major aims. In the first stage, the actually conflicting cost terms are identified by considering them pair-wise. Finally, it is studied as a multi-objective optimization problem with those conflicting cost terms as individual objective functions. For solving this new formulation of the problem, a multi-objective binary-coded genetic algorithm is also proposed with some problem-specific operators. The effectiveness of the algorithm is demonstrated statistically through its application to a 22-module real case study of JPEG encoder system, as well as to a number of large-size hypothetical instances generated by replicating the real case study.The rest of the article is organized as follows: the related literature is reviewed in Section 2. The JPEG encoding system is addressed in Section 3, followed by the formulation of the embedded system as an optimum multi-objective HW–SW partitioning problem in Section 4. The GA developed for solving the multi-objective HW–SW partitioning problem is introduced in Section 5, and the numerical experimentation and discussion thereon are presented in Section 6. Finally, the article is concluded in Section 7 by briefing the present findings and the future research direction on this theme.

@&#CONCLUSIONS@&#
Embedded systems have a wide range of applications starting from various home appliances to satellites, which encourages for their economic design. An embedded system has already been identified as an optimum HW–SW partitioning problem. Although the quality of such a partition is measured by some cost terms, it is usually tackled as a single-objective optimization problem in some other form. Motivated by the fact, the HW–SW partitioning is formulated here as a multi-objective optimization problem for simultaneously optimizing its actual cost terms. A multi-objective binary-coded GA is also developed for solving the problem. A JPEG encoding system, which is applied for obtaining high quality output from continuous-tone images, is considered as a case study. It is first studied as a bi-objective problem by taking two out of four cost terms as the two objective functions, which reveals that the problem actually has only two conflicting cost terms, namely the memory requirement and slice use rate. Finally, the problem is studied under different scenarios for simultaneously optimizing those two conflicting cost terms. The considered case study involves only 22 components. Therefore, in order to investigate the potentiality of the GA over different problem-size, a number of large-size hypothetical instances are generated by proportionally replicating the original case study. Interestingly, the outcomes of the GA for those hypothetical instances are also found in similar proportions to that of the original case study. Since it is the first work of this kind, due to the non-availability of any reported work for comparison, the performance of the GA is evaluated by statistically comparing its outcomes for different cases. The statistical analysis demonstrates the consistency of the GA over varying problem size, as well as different initial solutions and other algorithmic parameter values. The potentiality of the proposed approach may be extended to other embedded systems, as well as to large-size real instances. Further attempts may be made for reducing the computational time of the GA, particularly at higher dimensions of the problem.