@&#MAIN-TITLE@&#
Approximation algorithms for solving the constrained arc routing problem in mixed graphs

@&#HIGHLIGHTS@&#
We consider the constrained arc routing problem in mixed graphs.It is to determine a shortest tour T traversing each e between l(e) and u(e) times.We design an (1+1/l_0)-approximation algorithm inO(n2m3logn)to solve this problem.We also present two optimal algorithms to solve its special versions, respectively.

@&#KEYPHRASES@&#
Combinatorial optimization,Arc routing,Lower/upper demand bound,Approximation algorithm,Combinatorial algorithm,

@&#ABSTRACT@&#
Given a mixed graph G with vertex set V, let E and A denote the sets of edges and arcs, respectively. We useQ+andZ+to denote the sets of positive rational numbers and positive integers, respectively. For any connected mixed graphG=(V,E∪A;w;l,u)with a length functionw:E∪A→Q+and two integer functionsl,u:E∪A→Z+satisfyingl(e)⩽u(e)for eache∈E∪A, we are asked to determine a minimum length tour T traversing eache∈E∪Aat leastl(e)and at mostu(e)times. This new constrained arc routing problem generalizes the mixed Chinese postman problem. Letn=|V|andm=|E∪A|denote the number of vertices and edges (including arcs), respectively. Using network flow techniques, we design a(1+1/l0)-approximation algorithm in timeO(n2m3logn)to solve this constrained arc routing problem such thatl(e)<u(e)holds for each edgee∈E,l(e)⩽u(e)holds for each arce∈Aandl0=min{l(e)|e∈E}. In addition, we present two optimal combinatorial algorithms in timesO(n3)andO(nm2logn)to solve this problem for the casesA=∅andE=∅, respectively.

@&#INTRODUCTION@&#
In most arc routing problems, the objective is to determine a least-cost traversal of a set of specified edges or arcs of a mixed graph. Such problems occur in a variety of practical contexts and have attracted attention from both mathematicians and operations researchers. The earliest arc routing problem was the Königsberg seven bridges problem, which is to determine whether there exists a closed tour traversing exactly once each of the seven bridges on the Pregel river through Königsberg. After Euler solved the Königsberg seven bridges problem in the negative, he was concerned almost exclusively with the existence of a tour. The question of determining such a tour was addressed and solved by Hierholzer and Wiener (1873). The reader is referred to Fleischner (1991) for an interesting account of this problem.Another closely related well-known problem is the so-called Chinese postman problem (CPP) posed by Guan (1960). In contrast to the Königsberg seven bridges problem, Guan addressed a natural question that is to determine a minimum length tour traversing each edge of a weighted graph at least once. The CPP is a version of the arc routing problem specialized to graphs. Using Edmonds’ combinatorial algorithm for solving the maximum weighted matching problem (Edmonds, 1965), Edmonds and Johnson (1973) designed an optimal combinatorial algorithm to solve the CPP.Closely related to the CPP is the directed Chinese postman problem (DCPP), which is a version of the arc routing problem specialized to directed graphs, or simply digraphs. Using a combinatorial algorithm in Ford and Fulkerson (1962) for solving the transportation problem, Edmonds and Johnson (1973) also designed another optimal combinatorial algorithm to solve the DCPP.The mixed Chinese postman problem (MCPP), listed in Garey and Johnson (1979) as the problem ND25, is a common generalization of the CPP and the DCPP. In the MCPP, an input graph may contain both undirected and directed edges. A directed edge is also referred to as an arc. The objective is to determine a tour that traverses at least once every edge in either direction and every arc in the direction of that arc. Even though the CPP and the DCPP are both polynomially solvable (Edmonds & Johnson, 1973), Papadimitriou (1976) showed that the MCPP becomes NP-complete. Because a number of practical applications, such as mail delivery, snow removal, and trash pick-up, can be modeled as instances of the MCPP, it is important to design good approximation algorithms for this problem.Quite a few papers about the MCPP have appeared in the literature over the past four decades. Edmonds and Johnson (1973) presented the first approximation algorithm for the MCPP. Christofides, Benavent, Campos, Corberan, and Mota (1984) designed an exact algorithm for the MCPP based on a branch-and-bound algorithm using Lagrangian bounds. Afterwards, Frederickson (1979) showed that the approximation algorithm due to Edmonds and Johnson (1973) is indeed a 2-approximation algorithm to solve the MCPP. Frederickson provided a mixed strategy algorithm for the MCPP that is a 5/3-approximation algorithm. As far as we know, the best approximation algorithm to solve the MCPP is a 3/2-approximation algorithm due to Raghavachari and Veerasamy (1999). Comprehensive surveys, latest advances and new challenges on the MCPP are available in Dror (2000), Golden et al. (2008) and Toth and Vigo (2002). Integer and linear programming formulations of the postman problems have generated great interest in recent years (Nobert & Picard, 1996; Ralphs, 1993). Ralphs (1993) showed that a linear relaxation of the MCPP has optimal solutions that are half-integral. One can use this fact to derive a 2-approximation algorithm for the MCPP. It is interesting to note that the implementation of Nobert and Picard (1996) has been used for scheduling snow removal in Montreal. Corberan, Marti, and Sanchis (2002) presented a heuristic algorithm for the MCPP, using greedy randomized adaptive search procedure techniques. Goel and Gruhn (2008) recently considered a general vehicle routing problem (GVRP) that generalizes the MCPP, where the GVRP is a rich vehicle routing problem incorporating various complexities found in real-life applications. Other interesting materials related to the GVRP are referred to Ghiani and Improta (2000) and Jozefowiez, Semet, and Talbi (2008).In the literature, one may either traverse some required edges or arcs exactly once in a minimum length feasible tour of a mixed graph or show the non-existence of such a tour. This becomes a variant of the MCPP. In order to widen the scope of possible applications for arc routing models, the times that an edge or arc is traversed should be given a reasonable range rather limited to at least once. We should consider a generalization of the MCPP for which some required edges or arcs would be traversed at leastt1and at mostt2times (1⩽t1⩽t2) in a tour. This new model generalizes the above-mentioned variant of the MCPP. In this paper, we consider the constrained arc routing problem in connected mixed graphs (CARM) defined as follows. LetG=(V,E∪A;w;l,u)be a connected mixed graph defined on vertex set V such that E is the set of all edges and A is the set of all arcs. Letn=|V|andm=|E∪A|denote the number of vertices and edges (including arcs), respectively. LetQ+andZ+denote the set of positive rational numbers and the set of positive integers, respectively. For a length functionw:E∪A→Q+and two integer functionsl,u:E∪A→Z+satisfyingl(e)⩽u(e)for eache∈E∪A, we are asked to determine a tour T traversing eache∈E∪Aat leastl(e)and at mostu(e)times such that the objective is to minimize the total lengthw(T)=∑e∈E∪At(e)w(e), wheret(e)denotes the number of times that the edge or arc e is traversed by the tour T.There are two special cases to note. (1) Ifl(e)=u(e)=1for each edge e of the required subset ofE∪A, then the CARM problem for this version becomes the above-mentioned variant. (2) Ifl(e)=1andu(e)=+∞for each edgee∈E∪A, then the CARM problem for this version specializes to the MCPP. It follows that the CARM problem is also NP-complete.A capacitated Chinese postman problem (CCPP) was posed by Golden and Wong (1981) as follows. Consider a mixed graphG=(V,E∪A;q;c). Vertexv1represents a depot where identical vehicles of capacity L are based. Eache∈E∪Ahas a positive demandq(e)and a costc(e)and can be traversed any number of times by any number of vehicles. A vehicle route is said to be feasible if it starts and ends at the depotv1and the total demand of the edges and arcs traversed by the vehicle does not exceed L. The CCPP looks for a set of feasible vehicle routes of least total cost such that each edge or arc appears in at least one route and is traversed by exactly one vehicle. Beullens, Muyldermans, Cattrysse, and Oudheusden (2003), Golden et al. (2008), Mourão and Amado (2005) and Zachariadis and Kiranoudis (2011) studied the capacitated arc routing problem (CARP) that is an extension of the CCPP. Recently, Lysgaard and Wohlk (2014) also considered a variant of the CARP where the objective is to minimize the sum of arrival times at the customers, for a fixed starting time of each route.It is easy to see that the CCPP restricted to the case of one vehicle of capacityL⩾∑e∈E∪Aq(e)becomes the MCPP. Christofides et al. (1984) proposed a heuristic procedure for obtaining a reasonable solution to the CCPP. Golden and Wong (1981) showed that even finding a 3/2-approximation algorithm to solve the CCPP remains NP-complete.We know that the CARM problem and the CCPP generalize the MCPP, but each of them does not follow from the other. Since the CCPP can be formulated as a set covering problem (Golden, 1978), Theorem 4.4 in Feige (1998) implies that the CCPP would not be approximated within(1-ε)lognunlessNP⊆TIME(nO(loglogn)), whereε∈(0,1). However, the CARM problem can be approximated within a constant performance ratio as shown in the following text. We will show that two special versions of the CARM problem can be optimally solved in polynomial times.The remainder of this paper is organized as follows. In Section 2, we present terminology for the description of our algorithms, and then establish some key lemmas to ensure the correctness of our algorithms. In Section 3, we study the CARM problem that can be approximated within performance ratio1+1/l0and in timeO(n2m3logn), wherel(e)<u(e)holds for each edgee∈E,l(e)⩽u(e)holds for each arce∈Aandl0=min{l(e)|e∈E}. In Section 4, we study the CARM problem for the caseA=∅that can be solved optimally by our combinatorial algorithm in timeO(n3). In Section 5, we study the CARM problem for the caseE=∅that can be solved optimally by our combinatorial algorithm in timeO(nm2logn). In Section 6, we summarize our conclusions.A mixed graphG=(V,E∪A)contains both edges (unordered pairs of vertices in E) and arcs (ordered pairs of vertices in A). A mixed graph G is called a multigraph if G contains parallel edges or arcs, but no self-loops. Parallel edges (or arcs) are called multi-edges (or multi-arcs). In this case, the set E (or A) is a multiset of edges (or arcs). A mixed graph G is called a simple mixed graph if G contains neither self-loops nor parallel edges or arcs, but G may have an edge and an arc with the same end-vertices. The term “edge” is also used to refer both edge and arc of a mixed graph. Thus, an arc is regarded as a directed edge. A mixed graphG=(V,E∪A)is said to be an undirected graph (or simply, graph) ifA=∅and a directed graph (or simply, digraph) ifE=∅, respectively.In the sequel, G always denotes a mixed graph. A walk in G is an alternating sequenceW=x1e1x2e2x3⋯xk-1ek-1xkof verticesxiand edges or arcsejfrom G such that either the two end-vertices of the edgeeiarexiandxi+1or the tail of the arceiisxiand the head of the arceiisxi+1for every1⩽i⩽k-1. This means that this walk W traverses every edgeeiin either direction and every arceiin the direction of that arc. We say that W is a walk fromx1toxkor an(x1,xk)-walk. A walk W is closed ifx1=xk, and we always refer such a closed walk as a tour or circuit.If the vertices of a walk W are distinct, then W is called as a path. If the verticesx1,x2,…,xk-1are distinct andx1=xk, wherek⩾3,Wis called as a cycle. Two pathsP1andP2are said to be vertex-disjoint (or edge-disjoint) if their vertex sets (or edge sets) are disjoint, respectively. Similarly, we can define two directed paths being arc-disjoint.A mixed graphG=(V,E∪A)is connected if, for any two vertices x and y in G, there exists a pathPx,yfrom x to y, where each edgee=uvonPx,ymay be traversed in either direction of this edge, but each arce=(u,v)onPx,ymay only be traversed from u to v. In addition, when G is a (mixed) weighted graph andPx,yis a path from x to y in G, we denotew(Px,y)to be the sum of weights of all edges and arcs in the pathPx,y, and we referdG(x,y)as the weight of a shortest path from x to y, i.e.,dG(x,y)=min{w(Px,y)|Px,yis a path from x to y inG}. On the other hand, a digraphD=(V,A)is strongly connected if, for any two vertices x and y in D, there exists a directed pathPx,yfrom x to y and at the same time a directed pathPy,x′from y to x.For any vertex v in a mixed graphG=(V,E∪A), the degree of the vertex v, denoted bydG(v)ord(v), is the number of edges and arcs that are incident to v. For any vertex v in a mixed graphG=(V,E∪A), the vertex v is even if its degreedG(v)is even, otherwise the vertex v is odd. For any vertex v in a digraphD=(V,A), denoteδD+(v)the set of arcs leaving v andδD-(v)the set of arcs entering v, respectively. The out-degree of a vertex v, denoted bydD+(v), is the number of arcs that have v as their common tail, and the in-degree of a vertex v, denoted bydD-(v), is the number of arcs that have v as their common head. Equivalently,dD+(v)=|δD+(v)|anddD-(v)=|δD-(v)|, then the numberdD+(v)+dD-(v)is the degree of a vertex v.In a mixed graphG=(V,E∪A), an Eulerian tour is a closed walk that starts at some vertexv0, traverses each edge or arc exactly once, and returns to the same vertexv0. A mixed graph is Eulerian if it contains such an Eulerian tour. In addition, if a digraphD=(V,A)contains a directed Eulerian tour, then this digraphD=(V,A)is called a directed Eulerian graph, or simply an Eulerian digraph.A matching in a graphG=(V,E)is a set M of pairwise disjoint edges (i.e., the end-vertices of edges are all distinct), and each edge in M is called a matching edge. In addition, M is called a perfect matching if all vertices in V are covered by M, i.e., the matching M satisfies|M|=|V|/2. Moreover, for a weighted graphG=(V,E;w),Mis called a maximum matching in G if the weightw(M)=∑e∈Mw(e)is maximized among all matchings in G. Similarly, for a weighted graphG=(V,E;w)and a matching M ofG,Mis called a minimum cost perfect matching if M is a perfect matching such that the weightw(M)=∑e∈Mw(e)is minimized among all perfect matchings in G.For any network, a synonym of digraph,N=(V,A;u;c;s,t)with a capacity functionu:A→R+, a cost functionc:A→R+, a source s and a sink t, a flow from s to t (briefly, an(s,t)-flow) is a function f from A to the setR0+of non-negative real numbers, i.e.,f:A→R0+, satisfying the following conditions:(1)(the capacity constraint)0⩽f(e)⩽u(e)for each arce∈A;(the flow conservation)∑e∈δD+(v)f(e)=∑e∈δD-(v)f(e)for each vertexv∈V-{s,t};v(f)=∑e∈δD+(s)f(e)-∑e∈δD-(s)f(e)⩾0for the source s.We callv(f)the value of an(s,t)-flow f, and we define its costc(f)=∑e∈Ac(e)f(e). In addition, if the valuef(e)is integral for each arce∈A, we call an(s,t)-flow f as an integral(s,t)-flow.For a networkN=(V,A;l,u;s,t)with a demand functionl:A→R0+and a capacity functionu:A→R+, a functionf:A→R0+is called a circulation in N if the function f satisfiesl(e)⩽f(e)⩽u(e)for each arce∈Aand the flow conservation rule (2) holds at every vertex v in N. When f is a circulation in N, the cost of f is defined to be the valuec(f)=∑e∈Ac(e)f(e). Similarly, we call a circulation f to be integral iff(e)is integral for each arce∈A.For any real number r, let⌊r⌋(or⌈r⌉) denote the greatest (or smallest) integer less (or greater) than or equal to r.The following key lemmas are needed to design our algorithms later on.Lemma 1Hierholzer and Wiener, 1873Suppose thatG=(V,E)is a connected graph. Then G is an Eulerian graph if and only if every vertex v of G has even degree.If a graphG=(V,E)is Eulerian, we use an algorithm due to Edmonds and Johnson (1973) in timeO(m)to determine an Eulerian tour on G. We call such an algorithm the Eulerian-Cycle algorithm.Lemma 2Fleischner, 1991Suppose thatD=(V,A)is a strongly connected digraph. Then D is an Eulerian digraph if and only if every vertex v of D has equal in- and out-degrees.If a digraphD=(V,A)is Eulerian, we use another algorithm due to Edmonds and Johnson (1973) in timeO(nm)to determine a directed Eulerian circuit on D. We call such an algorithm the Eulerian-Circuit algorithm.Lemma 3Goldberg and Tarjan, 1989LetN=(V,A;l,u;c)be a network with a demand functionl:A→R0+, a capacity functionu:A→R+and a cost functionc:A→R+. A minimum cost circulation f in N can be determined in timeO(n2m3logn). In addition, if the demand functionl(·)and the capacity functionu(·)are both integral, then a minimum cost circulation f in N is integral, and it can be determined with the same running time.We refer a combinatorial algorithm due to Goldberg and Tarjan (1989) to solve the minimum cost circulation problem as the Cycle-Canceling algorithm.Lemma 4Ford and Fulkerson, 1962Suppose thatN=(V,A;u,c;s,t)is an instance of the minimum cost flow problem. Letf1be a minimum cost(s,t)-flow of valuek0in N andf2an(s,t)-flow of value 1 along an augmentation(s,t)-path P inN′(f1)of least cost, whereN′(f1)is the incremental weighted flow network of the flowf1. Thenf1+f2is a minimum cost(s,t)-flow of valuek0+1in N. In addition, if the capacity functionu(·)is integral andf1is a minimum cost integral(s,t)-flow of valuek0in N, thenf1+f2is a minimum cost integral(s,t)-flow of valuek0+1in N.By Lemma 4 and the Belleman–Ford algorithm (Bellman, 1958) in timeO(nm)to determine an augmentation(s,t)-path P inN′(f1)of least cost, we can design an algorithm in timeO(nmk1)to determine a minimum cost(s,t)-flow of integral valuek1in N. We call such an algorithm the Successive-Shortest-Path algorithm.The Successive-Shortest-Path algorithm is not a polynomial-time algorithm to solve the minimum cost flow problem. The capacity scaling algorithm in Orlin (1988) is a variant of the Successive-Shortest-Path algorithm, and it solves the minimum cost flow problem in timeO(nm2logk1). In this paper, we need a more efficient algorithm in Orlin (1993) to solve the integral minimum cost(s,t)-flow problem, that is a variant of the capacity scaling algorithm. We call such an algorithm the Enhanced-Capacity-Scaling algorithm.Lemma 5Orlin, 1993The Enhanced-Capacity-Scalingalgorithm solves the capacitated minimum cost flow problem in timeO(mlognS(n,m)), whereS(n,m)is the time required to solve a shortest path problem with n vertices and m arcs. In addition, if the capacity functionu(·)is integral, then a minimum cost integral(s,t)-flow can be determined with the same running time.The constrained arc routing problem in mixed graphs (CARM) was defined in the introduction section. We first give an integer programming formulation of the CARM problem as follows. Each mixed graphG=(V,A∪E)is associated with a digraphG↔=(V,A∪B)such thatB=E+∪E-and each edgee∈Eis replaced by two arcse+∈E+ande-∈E-of opposite direction with the same weightw(e+)=w(e-)=w(e). Since G is a connected mixed graph, we can obtain a necessary and sufficient condition for any instance of the CARM problem as follows. A non-negative integral circulation x inG↔corresponds to an arc routing of G (i.e., a feasible solution to the instance G of the CARM problem) if and only if (1)l(e)⩽x(e)⩽u(e)for each arce∈A, and (2)l(e)⩽x(e+)+x(e-)⩽u(e)for each edgee∈E, wherex(e)is the number of times that the arce∈Ais traversed in the arc routing of G andx(e+)+x(e-)is the number of times that edgee∈Eis traversed in the arc routing of G for the CARM problem, respectively.Thus, we can establish an integer program, denoted by CARM(G), which is equivalent to the CARM problem for the instanceG=(V,A∪E;w;l,u).(1)CARM(G)min∑e∈A∪Bw(e)x(e)s.t.for eachv∈V(2)l(e)⩽x(e)⩽u(e)for eache∈A(3)l(e)⩽x(e+)+x(e-)⩽u(e)for eache∈E(4)x(e)⩾0for eache∈A∪B(5)x(e)integerfor eache∈A∪BNow, we construct a new weighted digraphG^=(V^,A^)from the mixed graphG=(V,E∪A;w;l,u)as follows. At the beginning, letV^≔VandA^≔A. We replace each edgee=ab∈E, by a directed subgraphDeconsisting of four verticesa,b,ye,zeand five arcs(a,ye),(b,ye),(ye,ze),(ze,a),(ze,b)(see Fig.1), where we add the two new verticesyeandzeintoV^and the five new arcs intoA^, and we define lower and upper bounds and length weights on these five arcs as follows:l(a,ye)=l(b,ye)=l(ze,a)=l(ze,b)=0,l(ye,ze)=l(e),u(a,ye)=u(b,ye)=u(ye,ze)=u(ze,a)=u(ze,b)=u(e), andw(a,ye)=w(b,ye)=w(ze,a)=w(ze,b)=0,w(ye,ze)=w(e). Thus, each arc inA^of the new weighted digraphG^belongs to A or to a directed subgraphDefor somee∈E, but not both.For each new arce∈A^of the networkG^=(V^,A^;w;l,u), the valuesl(e),u(e)andw(e)may be regarded as demand, capacity and unit cost of e, respectively.Lemma 6LetG=(V,E∪A;w;l,u)be an instance of the CARM problem such thatl(e)<u(e)holds for each edgee∈Eandl(e)⩽u(e)holds for each arce∈A. There exists a feasible tour T in G if and only if there exists an integral circulation f in the networkG^=(V^,A^;w;l,u).A feasible tour T to the instance G of the CARM problem can be transformed into a feasible solution x of the corresponding integer program CARM(G), and vice versa. We only need to prove that there exists a feasible solution x of the integer program CARM(G) if and only if there exists an integral circulation f in the networkG^=(V^,A^;w;l,u).Necessity. Suppose that x is a feasible solution of the integer program CARM(G). We construct an integral circulation f in the networkG^=(V^,A^;w;l,u)as follows. For each arce∈A, letf(e)=x(e). And for each edgee=ab∈E, without loss of generality, we may assumee+=(a,b)ande-=(b,a), then letf(a,ye)=f(ze,b)=x(e+),f(b,ye)=f(ze,a)=x(e-)andf(ye,ze)=x(e+)+x(e-). It is easy to verify that f is an integral circulation inG^.Sufficiency. Suppose that f is an integral circulation inG^=(V^,A^;w;l,u). First, we may construct a new integral circulationf̃from f inG^that satisfies further properties.For each arce∈A, letf̃(e)=f(e). For each edgee=ab∈E, we examine either the pairf(a,ye)andf(ze,b)or the pairf(b,ye)andf(ze,a). Iff(a,ye)=f(ze,b)(implyingf(b,ye)=f(ze,a)), letf̃(e′)=f(e′)for each arce′∈{(a,ye),(ze,b),(b,ye),(ze,a),(ye,ze)}. Iff(a,ye)≠f(ze,b), we may assumef(a,ye)>f(ze,b), then we denoteθ1=f(a,ye)-f(ze,b)2andθ2=f(a,ye)-f(ze,b)2. We consider two possibilities.(1) Iff(ye,ze)=l(e), letf̃(a,ye)=f(a,ye)-θ1,f̃(ze,b)=f(ze,b)+θ2,f̃(b,ye)=f(b,ye)+θ2,f̃(ze,a)=f(ze,a)-θ1andf̃(ye,ze)=f(ye,ze)-θ1+θ2. It follows thatl(e)=f(ye,ze)⩽f̃(ye,ze)⩽f(ye,ze)+1=l(e)+1⩽u(e)(2) Iff(ye,ze)>l(e), letf̃(a,ye)=f(a,ye)-θ2,f̃(ze,b)=f(ze,b)+θ1,f̃(b,ye)=f(b,ye)+θ1,f̃(ze,a)=f(ze,a)-θ2andf̃(ye,ze)=f(ye,ze)-θ2+θ1. It follows thatl(e)⩽f(ye,ze)-1⩽f̃(ye,ze)⩽f(ye,ze)⩽u(e)It is easy to verify thatf̃is also an integral circulation inG^andf̃(a,ye)=f̃(ze,b)for each edgee=ab∈E.Now, we can construct a feasible solution x to the integer program CARM(G) as follows. For each arce∈A, letx(e)=f̃(e). For each edgee=ab∈E, without loss of generality, we may assumee+=(a,b)ande-=(b,a), then we letx(e+)=f̃(a,ye)andx(e-)=f̃(b,ye). Sincef̃is an integral circulation inG^, it is easy to see that the constraint condition (1) in the integer program CARM(G) holds. The constraint condition (2) holds obviously. For each edgee∈E, the constraint condition (3) also holds sincel(e)⩽x(e+)+x(e-)=f̃(ye,ze)⩽u(e). The constraint conditions (4) and (5) clearly hold. Thus, x is a feasible solution of the integer program CARM(G).□Edmonds and Karp (1972) designed an algorithm to solve the minimum cost circulation problem, but their algorithm is based on a capacity scaling method and it can be implemented to run in timeO(m(m+nlogn)logU), whereU=max{u(e)|e∈A}. Tardos (1985) was the first to design a strongly polynomial-time algorithm to solve the minimum cost circulation problem. In this paper, we invoke a simpler and more efficient combinatorial algorithm due to Goldberg and Tarjan (1989) to solve the minimum cost circulation problem. It is stated in Lemma 3 and referred to as the Cycle-Canceling algorithm.Using Lemmas 3 and 6, we can design an approximation algorithm to solve the CARM problem as follows.Algorithm 1CARMInput: A connected mixed graphG=(V,E∪A;w;l,u)with a length functionw:E∪A→Q+and two integer functionsl,u:E∪A→Z+satisfyingl(e)⩽u(e)for eache∈E∪A.Output: A constrained arc routing T and its total length.BeginStep 1 Construct a new weighted digraphG^=(V^,A^)from the mixed graphG=(V,E∪A;w;l,u)as above.Step 2 Using the Cycle-Cancelling algorithm in Goldberg and Tarjan (1989), determine a minimum cost integral circulation f inG^. If no such circulation exists, then output “no feasible solution to this instance of the CARM problem”, and stop.Step 3 Construct a new integral circulationf̃inG^associated with the integral circulation f as follows(1)For each arce∈A, letf̃(e)=f(e).(2)For each edgee=ab∈E, letf̃(ye,ze)=f(ye,ze)-θ1+θ2, whereθ1=|f(a,ye)-f(ye,b)|2andθ2=|f(a,ye)-f(ye,b)|2; andif (f(a,ye)>f(ye,b)) thendenotef̃(a,ye)=f(a,ye)-θ1,f̃(ze,b)=f(ze,b)+θ2,f̃(b,ye)=f(b,ye)+θ2andf̃(ze,a)=f(ze,a)-θ1.elsedenotef̃(a,ye)=f(a,ye)+θ2,f̃(ze,b)=f(ze,b)-θ1,f̃(b,ye)=f(b,ye)-θ1andf̃(ze,a)=f(ze,a)+θ2.Step 4 Construct a feasible solution x to the integer program CARM(G) as follows(1)For each arce∈A, letx(e)=f̃(e).(2)For each edgee=ab∈E, doif (e+=(a,b)ande-=(b,a)) thendenotex(e+)=f̃(a,ye)andx(e-)=f̃(b,ye).elsedenotex(e-)=f̃(a,ye)andx(e+)=f̃(b,ye).Step 5 Construct a digraphGD=(V,A∼)so that there arex(e)multi-arcs from the vertex a to the vertex b inGDfor each arce=(a,b)inG↔.Step 6 Using the Eulerian-Circuit algorithm in Edmonds and Johnson (1973), find a directed Eulerian tourTDonGD.Step 7 For each arc e inTD, remove its direction only ife∉A, and then construct a (mixed) tour T in G.Step 8 Output the tour T and the valuew(T)=∑e∈A∪Bw(e)x(e).EndFor an instanceG=(V,E∪A;w;l,u)of the CARM problem, let OPT denote the optimal value and OUT the output value of the algorithm CARM, respectively.Theorem 1For any instanceG=(V,E∪A;w;l,u)of the CARM problem, ifl(e)<u(e)holds for each edgee∈Eandl(e)⩽u(e)holds for each arce∈A, then the algorithm CARM can produce a feasible arc routing to satisfyOUT⩽(1+1/l0)·OPT, wherel0=min{l(e)|e∈E}, and the running time of the algorithm CARM isO(n2m3logn).We first obtain a minimum cost integral circulation f inG^by executing the Cycle-Canceling algorithm (Goldberg & Tarjan, 1989) on the weighted digraphG^. From the proof of Lemma 6, we know thatf̃constructed at Step 3 is an integral circulation inG^and x constructed at Step 4 is a feasible solution to the integer program CARM(G). By the definitions of x and the digraphGD, we obtainw(T)=∑e∈A∪Bw(e)x(e)=w(f̃).Since an optimal solution for the instance G of the CARM problem must correspond to an integral circulation inG^, then Step 2 works correctly. Because f is a minimum cost integral circulation in the weighted digraphG^, we havew(f)=∑e∈A^w(e)f(e)⩽OPT.On the other hand, by Step 3 of the algorithm CARM, we have the factsf̃(e)=f(e)for each arce∈Aand the inequalitiesf(ye,ze)⩽f̃(ye,ze)=f(ye,ze)-θ1+θ2⩽f(ye,ze)+1for each edgee=uv∈E. Thus, we can obtainw(T)=w(f̃)=∑e∈Aw(e)f̃(e)+∑e∈E∑e′∈Dew(e′)f̃(e′)=∑e∈Aw(e)f̃(e)+∑e∈Ew(ye,ze)f̃(ye,ze)⩽∑e∈Aw(e)f(e)+∑e∈Ew(ye,ze)(f(ye,ze)+1)=∑e∈Aw(e)f(e)+∑e∈Ew(ye,ze)f(ye,ze)+∑e∈Ew(ye,ze)=∑e∈Aw(e)f(e)+∑e∈E∑e′∈Dew(e′)f(e′)+∑e∈Ew(e)=w(f)+∑e∈Ew(e)⩽w(f)+1l0∑e∈Ew(e)l(e)⩽OPT+1l0·OPT=1+1l0·OPT.wherel0=min{l(e)|e∈E}.It is obvious to see that the running time of the algorithm CARM heavily depends on the running time of the Cycle-Canceling algorithm (Goldberg & Tarjan, 1989). According to Lemma 3, we know that the running time of the algorithm CARM isO(n2m3logn).This establishes the theorem.□The following special version of the CARM problem can be derived from the proof of Theorem 1.Corollary 1Given a digraphD=(V,A;w;l,u)with two integer functionsl,u:A→Z+satisfyingl(e)⩽u(e)for each arce∈Aand a length functionw:A→Q+, the algorithm CARM produces an optimal arc routing for D and its running time isO(n2m3logn).It is well known that Raghavachari and Veerasamy (1999) designed a 3/2-approximation algorithm to solve the mixed Chinese postman problem. We propose a conjecture for the CARM problem to conclude this section.Conjecture 1It would admit a 3/2-approximation algorithm to solve the CARM problem.In this section, we consider the constrained edge routing problem in graphs (CERG), i.e., a special version of the constrained arc routing problem in mixed graphs (CARM) for the caseA=∅. The CERG problem is a generalization of the Chinese postman problem (CPP).It is known that the CPP is solvable in polynomial time by the following strategy.(1)When a graph G is Eulerian, the Eulerian-Cycle algorithm due to Edmonds and Johnson in Edmonds and Johnson (1973) produces an Eulerian tour as an optimal solution.When a graph G is not Eulerian, we must add some edges from G to create a new Eulerian graphG′. The edges added to createG′must be of least total length, and an Eulerian tour in the augmented graphG′is an optimal solution. As shown in Edmonds and Johnson (1973), these edges of least total length can be determined by solving a minimum cost perfect matching problem on the complete graph H whose vertices are the odd-degree vertices of G.It is known that each edge in a graph G is used at most twice in any optimal solution for the CPP. A similar argument can establish the following.Lemma 7For any graphG=(V,E;w;l,u)as an instance of the CERG problem, each edge e in G is used at mostl(e)+1times in any optimal solution.For convenience, we may assumeu(e)=l(e)+1whenl(e)<u(e)for each edgee∈Eof any instanceG=(V,E;w;l,u)for the CERG problem.In order to describe our combinatorial algorithm to optimally solve the CERG problem, we need two auxiliary constructions. We construct a multigraphGl=(V,El), where the multisetElcontains each edge e of E exactlyl(e)times. LetEu={e∈E|l(e)<u(e)}. Then we construct a weighted graphGu=(V,Eu;wu), where the length functionwu:Eu→Q+satisfieswu(e)=w(e)for each edgee∈Eu.By Lemma 7, we can design a combinatorial algorithm to solve the CERG problem by the following strategy.(1)If needed, find a subsetEu′ofEusuch that the augmented multigraphG′=(V,El∪Eu′)is an Eulerian graph, having the minimum total lengthw(Eu′)=∑e∈Eu′w(e).Construct an Eulerian tour onG′. We may call the setEu′as in Guan (1960) a priority set to the instanceG=(V,E;w;l,u)of the CERG problem, or simply a priority set.In our algorithm to solve the CERG problem, we need an algorithm due to Floyd (1962) in running timeO(n3)to find all shortest paths among all odd-degree vertices and another algorithm due to Edmonds (1965) in running timeO(n3)to find a minimum cost perfect matching in an appropriate graph. We refer these two algorithms the Floyd algorithm (Floyd, 1962) and the Edmonds algorithm (Edmonds, 1965), respectively.An algorithm to solve the CERG problem is designed as follows.Algorithm 2CERGInput: A connected graphG=(V,E;w;l,u)with a length functionw:E→Q+and two integer functionsl,u:E→Z+satisfyingl(e)⩽u(e)for eache∈E.Output: A minimum length edge routing T on G to satisfy the constraint.BeginStep 1 DefineElto be a multiset consisting of each edge e of E exactlyl(e)times. And construct the multigraphGl=(V,El).Step 2 If (the connected multigraphGlis Eularian) thenDetermine an Eulerian tour T onGlby means of the Eulerian-Cycle algorithm (Edmonds and Johnson, 1973), and stop. The tour T corresponds to an optimal solution on G.Step 3 Construct a graphGu=(V,Eu;wu), whereEu={e∈E|l(e)<u(e)}andwu:Eu→Q+satisfieswu(e)=w(e)for each edgee∈Eu.Step 4 Determine the setVoof odd-degree vertices inGl. Construct a graphH=(Vo,EH;wH)with vertex setVoand edge setEH, where an edgevivj∈EHif and only if there exists a path inGuto connect the two odd-degree verticesviandvj, and then define the costwH(vi,vj)of edgevivjin H to be the length of a shortest pathPvi,vjbetweenviandvjinGu.Step 5 If (there exists no perfect matching of cardinality|Vo|/2in H) thenOutput “no feasible solution on G”, and stop.Step 6 Use the Edmonds algorithm (Edmonds, 1965) to find a minimum cost perfect matching M of cardinality|Vo|/2in H.Step 7 SetG′≔Gl. For each edgevivjin the minimum cost perfect matching M, add toG′all edges that lie on the shortest pathPvi,vjbetweenviandvjinGu.Step 8 Determine an Eulerian tour T onG′by means of the Eulerian-Cycle algorithm (Edmonds and Johnson, 1973), and stop. The tour T corresponds to an optimal solution on G.EndUsing the algorithm CERG, we obtain the following result for the CERG problem.Theorem 2The algorithm CERG works correctly to solve the CERG problem and its running time isO(n3).We first prove that the algorithm CERG produces a feasible solution to the instanceG=(V,E;w;l,u)of the CERG problem. Any two shortest paths produced at Step 4 corresponding to two distinct edges in the minimum cost perfect matching M must be edge-disjoint, for otherwise another perfect matchingM′in H can be constructed satisfyingwH(M′)<wH(M), a contradiction (the proof in details is similar to that in Edmonds (1965), we omit it here). Then we add to the augmented graphG′all edges that lie on the shortest pathsPvi,vjbetweenviandvjinGu, wherevivjcorresponds to a matching edge in M. Thus,G′becomes an Eulerian graph and the Eulerian tour T onG′produced at Step 8 is a feasible solution to the instanceG=(V,E;w;l,u).Next, we prove that the Eulerian tour T produced at Step 8 is a minimum total length solution to the instanceG=(V,E;w;l,u)of the CERG problem. We may assume thatT∗=(V,E∗)is an optimal tour to G. We shall provew(T)⩽w(T∗), equivalently,∑vivj∈M∑e∈Pvi,vjw(e)=wH(M)⩽w(T∗-El).We may assume that the multigraphGl=(V,El)contains exactly2kvertices of odd degree, namelyvi1,vi2,…,vi2k-1,vi2k, and the vertex setVoof the graph H at Step 4 consists of precisely these2kvertices, hence2k=|Vo|. We consider the reduced graphH′=T∗-El, where each vertex of odd degree inH′is also a vertex inVo.SinceEl⊆E∗⊆(El∪Eu)and⋃vivj∈ME(Pvi,vj)⊆Eu, the graphH′contains no cycle. To the contrary, we may suppose that if C were a cycle inH′, then the reduced graphT∗-E(C), satisfyingw(T∗-E(C))<w(T∗), would be another feasible solution to the instance G of the CERG problem, which contradicts the optimality ofw(T∗).Since the graphH′contains no cycle, we obtain the fact thatH′is a forest. Then the edges inH′can be decomposed into k edge-disjoint simple paths by modifying graph searching algorithm (Papadimitriou & Steiglitz, 1998) in the following recursive steps (note thatH′contains at least two vertices of degree 1).(1)Forr=1, choose any vertex of degree 1 inH′, namelyvj2r-1, and by using the similar graph searching algorithm in Papadimitriou and Steiglitz (1998) to find the next vertex of odd degree along sole path fromvj2r-1inH′, namelyvj2r, we can construct a simple pathPvj2r-1,vj2r′to connectvj2r-1andvj2rinH′.LetH′≔H′-E(Pvj2r-1,vj2r′). Using the similar argument in (1), we can choose two new vertices of odd degree in the new graphH′, namelyvj2r+1andvj2r+2, and then construct a simple pathPvj2r+1,vj2r+2′to connectvj2r+1andvj2r+2inH′. Letr≔r+1and execute (2) repeatedly untilr=k.Now, without loss of generality, we assume that the edges inH′are decomposed into k edge-disjoint simple pathsPvj2r-1,vj2r′,r=1,2,…,k, such that the edge set{vj1vj2,vj3vj4,…,vj2k-1vj2k}is a perfect matching in H. It follows thatdGu(vj2r-1,vj2r)⩽w(Pvj2r-1,vj2r′),r=1,2,…,k, andw(H′)=∑r=1kw(Pvj2r-1,vj2r′).Since M is a minimum cost perfect matching inH=(Vo,EH;wH), we obtainwH(M)=∑vivj∈M∑e∈Pvi,vjw(e)⩽∑r=1kdGu(vj2r-1,vj2r)⩽∑r=1kw(Pvj2r-1,vj2r′)=w(T∗-El).It impliesw(T)=w(El)+wH(M)⩽w(El)+w(T∗-El)=w(T∗). This shows that the Eulerian tour T produced at Step 8 has a minimum total length to the instanceG=(V,E;w;l,u)of the CERG problem.Finally, the running time of the algorithm CERG can be determined as follows.(1)Since each of thel(e)multi-edges of G can be constructed within a constant time, the multigraphGl=(V,El)at Step 1 needs timeO(m)to be constructed.Since each of thel(e)multi-edges of G can be traversed within a constant time, an Eulerian tour T on G at Step 2 needs at most timeO(m)to be determined.The graphGu=(V,Eu)at Step 3 needs timeO(m)to be constructed.The graph H at Step 4 needs timeO(n3)to be constructed, by using the Floyd algorithm (Floyd, 1962).A minimum cost perfect matching M in H at Steps 5 and 6 needs timeO(n3)to be found.The augmented graphG′at Step 7 needs at most timeO(n2)to be constructed.An Eulerian tour T onG′at Step 8 needs at most timeO(n2)to be determined.Hence, the total running time of the algorithm CERG isO(n3). This establishes the theorem.□Using the algorithm CERG, we can obtain the following immediately.Corollary 2For any connected graphG=(V,E;w;u), where a length functionw:E→Q+and an integer functionu:E→Z+, the algorithm CERG can either produce a minimum length tour traversing each edge e at least once and at mostu(e)times or determine that there is none.In this section, we consider the constrained arc routing problem in digraphs (CARD), that is the constrained arc routing problem in mixed graphs specialized to the caseE=∅. This problem is a generalization of the directed Chinese postman problem (DCPP).We know that the DCPP is solvable in polynomial time. A solution exists if and only if the digraph D is strongly connected. The techniques used to solve the DCPP are similar to those used for the undirected case. If D is symmetric, i.e., each vertex in D has equal in- and out-degrees, then the directed Chinese postman tour constructed by the Eulerian-Circuit algorithm (Edmonds & Johnson, 1973) corresponds to a directed Eulerian circuit in D.If D is not symmetric, then copies of some arcs of D must be added to D so that the augmented digraphD′becomes symmetric. A directed Eulerian circuit inD′corresponds to a directed Chinese postman tour in D. The digraphD′can be obtained from D by solving a transportation problem described in Ford and Fulkerson (1962).In order to describe our algorithm to optimally solve the CARD problem, we need two auxiliary constructions. First, we construct a multidigraphDl=(V,Al), where the multisetAlcontains each arc e of A exactlyl(e)times. LetAudenote the subset{e∈A|l(e)<u(e)}. Next, we construct a weighted digraphDu=(V,Au;wu), where the length functionwu:Au→Q+satisfieswu(e)=w(e)for each arce∈Au. For any feasible solution for the CARD problem, find some multi-arcs fromAuto create the multisetAu′such that the augmented multidigraphD′=(V,Al∪Au′)is Eulerian.Modifying the steps to solve the DCPP, we can solve the CARD problem by the following strategy.(1)If needed, find a multisetAu′ofAusuch that the augmented multidigraphD′=(V,Al∪Au′)is Eulerian, having the minimum total lengthw(Au′)=∑e∈Au′w(e).Construct a directed Eulerian circuit inD′.In our algorithm to solve the CARD problem, we needed a combinatorial algorithm in Orlin (1993) to solve the minimum cost integral(s,t)-flow problem, that was referred the Enhanced-Capacity-Scaling algorithm in Lemma 5.We design an algorithm to solve the CARD problem as follows.Algorithm 3CARDInput: A strongly connected digraphD=(V,A;w;l,u)with a length functionw:A→Q+and two integer functionsl,u:A→Z+satisfyingl(e)⩽u(e)for all arcse∈A.Output: A minimum length arc routing T on D to satisfy the constraint.BeginStep 1 LetAldenote the multiset consisting of each arc e of A exactlyl(e)times. And construct the multidigraphDl=(V,Al).Step 2 For each vertexv∈V, computeσDl(v)=dDl-(v)-dDl+(v).Step 3 If (Dlis strongly connected andσDl(v)=0for each vertexv∈V) thenDetermine a directed Eulerian circuit T onDlby using the Eulerian-Circuit algorithm in Edmonds and Johnson (1973), and stop. The tour T corresponds to an optimal solution on D.Step 4 Construct the digraphDu=(V,Au;wu), whereAu={e∈A|l(e)<u(e)}andwu:Au→Q+satisfieswu(e)=w(e)for each arce∈Au.Step 5 LetI={vi∈V|σDl(vi)>0}andJ={vj∈V|σDl(vj)<0}.Step 6 Construct a networkN=(V′,A′;u′;c;s,t)from the digraphDu=(V,Au;wu)satisfying the following.(1)LetV′=V∪{s,t}andA′=Au∪AI∪AJ. The source s and the sink t are two vertices not belonging to V so thatAI={(s,vi)|vi∈I}andAJ={(vj,t)|vj∈J}.(2)Define the capacity functionu′:A′→Z+as followsu′(e)=u(e)-l(e)if the arce∈Au,σDl(vi)if the arce=(s,vi)∈AI,-σDl(vj)if the arce=(vj,t)∈AJ.(3)Define the cost functionc:A′→Q+as followsc(e)=w(e)if the arce∈Au,0if the arce=(s,vi)∈AI,0if the arce=(vj,t)∈AJ.(4)Letσ0=∑vi∈IσDl(vi).Step 7 If (there exists no(s,t)-flow of valueσ0) thenOutput “no feasible solution in D”, and stop.Step 8 Using the Enhanced-Capacity-Scaling algorithm in Orlin (1993), determine a minimum cost integral(s,t)-flow f of valueσ0in N.Step 9 Construct the multiset of arcsAf={(x,y)1,(x,y)2,…,(x,y)f(x,y)|(x,y)∈Auandf(x,y)>0}.Step 10 Construct the multidigraphDf≔(V,Al∪Af).Step 11 Determine a directed Eulerian circuit T onDfby the Eulerian-Circuit algorithm in Edmonds and Johnson (1973), and stop. The tour T corresponds to an optimal solution on D.EndUsing the algorithm CARD, we obtain the following result for the CARD problem.Theorem 3The algorithm CARD works correctly to solve the CARD problem, and its running time isO(nm2logn).First, we prove the output tour T produced by the algorithm CARD is a feasible directed circuit to the digraphD=(V,A;w;l,u)of the CARD problem. If T is produced at Step 3, it is easy to verify that T is an optimal solution to the digraphD=(V,A;w;l,u). Now, we assume that output T is produced at Step 11. Since f is a minimum cost integral(s,t)-flow of valueσ0, whereσ0=∑vi∈IσDl(vi), we obtain the following three facts.∑x:(vi,x)∈Auf(vi,x)-∑x:(x,vi)∈Auf(x,vi)=f(s,vi)=σDl(vi)for each vertexviof I;∑y:(y,vj)∈Auf(y,vj)-∑y:(vj,y)∈Auf(vj,y)=f(vj,t)=-σDl(vj)for each vertexvjof J;∑x:(x,z)∈Auf(x,z)=∑y:(z,y)∈Auf(z,y)for each vertex z ofV-(I∪J).For each vertexvi∈I, we havedDf+(vi)=dDl+(vi)+∑x:(vi,x)∈Auf(vi,x)=dDl+(vi)+∑x:(x,vi)∈Auf(x,vi)+σDl(vi)=dDl+(vi)+∑x:(x,vi)∈Auf(x,vi)+(dDl-(vi)-dDl+(vi))=dDl-(vi)+∑x:(x,vi)∈Auf(x,vi)=dDf-(vi).For each vertexvj∈J, we havedDf-(vj)=dDl-(vj)+∑y:(y,vj)∈Auf(y,vj)=dDl-(vj)+∑y:(vj,y)∈Auf(vj,y)-σDl(vj)=dDl-(vj)+∑y:(vj,y)∈Auf(vj,y)-(dDl-(vj)-dDl+(vj))=dDl+(vj)+∑y:(vj,y)∈Auf(vj,y)=dDf+(vj).For each vertex z ofV-(I∪J), we havedDf+(z)=dDl+(z)+∑y:(z,y)∈Auf(z,y)=dDl-(u)+∑x:(x,z)∈Auf(x,z)=dDf-(z).This shows thatdDf+(z)=dDf-(z)for each vertex z inDf. Since D is strongly connected, so isDf. Thus,Dfis an Eulerian digraph. Obviously, the output tour T onDfproduced at Step 11 is a feasible solution to the instanceD=(V,A;w;l,u)of the CARD problem.Next, we prove that the Eulerian tour T produced at Step 11 is a minimum total length solution to the instanceD=(V,A;w;l,u). We may assume thatT∗=(V,A∗)is an optimal directed tour onD=(V,A;w;l,u)such that each arc e in A appears inT∗exactlylT∗(e)times, wherel(e)⩽lT∗(e)⩽u(e), and thatw(T∗)=∑e∈T∗w(e)is minimized.Let the directed subgraphH′=D[T∗-Al]be obtained from the multidigraphH=T∗-Alby replacing multi-arcs joining the same pair of end-vertices by one arc. SinceT∗is an optimal directed tour in D, by the fact thatAlis a multiset of arcs of A, the multidigraph H contains no directed circuit, otherwise the optimal valuew(T∗)would be reduced. It follows that the reduced digraphH′is an acyclic subdigraph of the digraphDu.Now, letI′={vi∈V|dH+(vi)>dH-(vi)}andJ′={vj∈V|dH-(vj)>dH+(vj)}. SinceT∗is an optimal directed tour in D and it traverses all arcs inAl, and for every vertexv∈V, we havedT∗+(v)=dDl+(v)+dH+(v),dT∗-(v)=dDl-(v)+dH-(v)anddT∗+(v)=dT∗-(v). It follows thatdH+(v)-dH-(v)=dDl-(v)-dDl+(v)=σDl(v). In addition, we have knownI′=IandJ′=Jsuch that∑vi∈I(dH+(vi)-dH-(vi))=∑vi∈IσDl(vi)=σ0and∑vj∈J(dH+(vj)-dH-(vj))=∑vj∈JσDl(vj)=-σ0.We define a networkN∗=(V(H′)∪{s,t},A″∪AI∪AJ;u∗;c;s,t)fromH′=D[T∗-Al]so thatA″is the arc set ofH′(clearly,A″⊆Au),AI={(s,vi)|vi∈I}andAJ={(vj,t)|vj∈J}. The capacity functionu∗:A″∪AI∪AJ→Z+is defined as follows:u∗(e)=lT∗(e)-l(e)if the arce∈A″,σDl(vi)if the arce=(s,vi)∈AI,-σDl(vj)if the arce=(vj,t)∈AJ.and the cost functionc:A″∪AI∪AJ→Q+is defined as followsc(e)=w(e)if the arce∈A″,0if the arce=(s,vi)∈AI,0if the arce=(vj,t)∈AJ.Now, we can construct an integral(s,t)-flow of valueσ0inN∗as follows. For each arce∈A″, we definef∗(e)=lT∗(e)-l(e),f∗(s,vi)=σDl(vi)for(s,vi)∈AIandf∗(vj,t)=-σDl(vj)for(vj,t)∈AJ. SinceT∗is an optimal directed tour in D, it is easy to verify thatf∗is an integral(s,t)-flow of valueσ0inN∗(and in N) and its cost isc(f∗)=∑e∈A″w(e)·(lT∗(e)-l(e)). It follows thatc(f∗)+∑e∈Alw(e)=∑e∈T∗w(e).Since f is a minimum cost integral(s,t)-flow of valueσ0at Step 8 of the algorithm CARD, we havew(Af)=c(f)⩽c(f∗). It follows thatw(T)=∑e∈Auw(e)f(e)+∑e∈Alw(e)=c(f)+∑e∈Alw(e)⩽c(f∗)+∑e∈Alw(e)=∑e∈T∗w(e). Hence, the directed Eulerian tour T produced at Step 11 is a minimum total length solution to the instanceD=(V,A;w;l,u)of the CARD problem.Finally, the running time of algorithm CARD can be determined as follows.(1)For each arc e in D, thel(e)multi-arcs at Step 1 need a constant time to be constructed. Hence, the multidigraphDl=(V,Al)needs timeO(m)to be constructed.AllσDl(v)at Step 2 need at most timeO(m)to compute.For each arc e in D, thel(e)multi-arcs at Step 3 need a constant time to traverse. A directed Eulerian tour T on D needs at most timeO(nm)to be determined.The digraphDu=(V,Au)at Step 4 needs timeO(m)to be constructed.The network N at Steps 5 and 6 can be constructed in timeO(m).A minimum cost integral(s,t)-flow f in N at Steps 7 and 8 needs timeO(nm2logn)to be found. The Belleman–Ford algorithm (Bellman, 1958) used to solve the shortest path problem needs timeO(nm).The augmented multidigraphDfat Steps 9 and 10 needs at most timeO(m)to be constructed.For each arc e in D, thel(e)multi-arcs need a constant time to traverse. A directed Eulerian tour T onDfat Step 11 needs at most timeO(nm)to be determined.Hence, the running time of algorithm CARD isO(nm2logn). This establishes the theorem.□Using the algorithm CARD, we can obtain the following immediately.Corollary 3For any strongly connected digraphD=(V,A;w;u), where a length functionw:A→Q+and an integer functionu:A→Z+, the algorithm CARD can either produce a minimum length directed tour traversing each arc e at least once and at mostu(e)times or determine that there is none.

@&#CONCLUSIONS@&#
In this paper, we considered the constrained arc routing problem in mixed graphs (CARM) and obtained the following three results.(1)For any instanceG=(V,E∪A;w;l,u)of the CARM problem, wherel(e)<u(e)holds for each edgee∈E,l(e)⩽u(e)holds for each arce∈Aandl0=min{l(e)|e∈E}, we have designed a(1+1/l0)-approximation algorithm in timeO(n2m3logn)to solve the CARM problem.We presented a combinatorial algorithm in timeO(n3)to optimally solve the CARM problem for the caseA=∅.We provided a combinatorial algorithm in timeO(nm2logn)to optimally solve the CARM problem for the caseE=∅.