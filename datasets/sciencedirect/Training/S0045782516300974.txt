@&#MAIN-TITLE@&#
Unstructured Moving Particle Pressure Mesh (UMPPM) method for incompressible isothermal and non-isothermal flow computation

@&#HIGHLIGHTS@&#
Extension of MPPM particle-mesh method to handle complex flow domain.Extension of MPPM to handle non-isothermal buoyant flow.The viscous term in MPPM is treated by an implicit and consistent Laplacian model.No ghost particles are used to model no-slip wall boundary.Accuracy enhancement in MPPM can be achieved via particle adaptation.

@&#KEYPHRASES@&#
Moving Particle Semi-implicit (MPS),Consistent Particle Method (CPM),Moving Particle Pressure Mesh (MPPM),Particle-In-Cell (PIC),Unstructured mesh,Incompressible flow,

@&#ABSTRACT@&#
In this work, we intend to address the limitation of our earlier particle method, namely the Moving Particle Pressure Mesh (MPPM) method in handling arbitrary-shaped flow boundaries. The application of the Cartesian pressure mesh system adopted in our original MPPM method, which serves as the main key in recovering the divergence-free velocity condition for incompressible flow in the framework of particle method, is rather limited to rectangular flow domain. Here, the hybrid unstructured pressure mesh is adopted to remove the geometrical constraint of our earlier MPPM method. Coupled with the moving particle strategy in the Moving Particle Semi-implicit (MPS) method, the new method is named as the Unstructured Moving Particle Pressure Mesh (UMPPM) method in the current work. A consistent Laplacian model, namely the Consistent Particle Method (CPM) recently reported in the open literature is incorporated as well in the framework of UMPPM for discretizing the viscous term on the scattered particle cloud, while its implicit form is solved in the current work for overall robustness. Finally, we shall verify our UMPPM method with a series of benchmark solutions (for isothermal and non-isothermal flows) available from the literatures, including those obtained from the commercial code. It is appealing to find that the numerical solutions of UMPPM compare well with the benchmark solutions. In some cases, the accuracy of our UMPPM is better than that of the existing particle method such as Smoothed Particle Hydrodynamics (SPH).

@&#INTRODUCTION@&#
Since the proposal of the particle method, namely the Moving Particle Semi-implicit (MPS) method by Koshizuka and Oka  [1], this numerical technique has been gaining significant attentions amongst the CFD practitioners since the past decade. In MPS, which is rather similar to the Smoothed Particle Hydrodynamics (SPH) approach, the Navier–Stokes Equation (NSE) is solved in the Lagrangian mesh-free manner with a set of interacting particles. One of the important advantages of particle method is the exact treatment of convection term in the flow transport equation by advecting the fluid particle in the Lagrangian manner. To date, MPS has been successfully applied to a wide range of engineering applications, including turbomachinery problem  [2,3], flow boiling problem  [4], injection molding problem  [5], solidification problem  [6], liquid dripping problem  [7] and mixing problem  [8,9] to name a few.Most of the engineering flow domains are geometrically complex. This has translated into several numerical challenges in MPS, particularly on developing a robust technique to avoid the deficiency of particle number density of wall particles (denoted asni,wall) taking part in the solution process of the Pressure Poisson Equation (PPE). The ghost particle approach such as that of placing multiple layers (number of layer is dependent on the value of radius of influence) of ghost particles near the wall particle is the most common approach in MPS. While it is trivial to accomplish this in a simple geometry (say a rectangular flow domain), the flexibility of ghost particle approach is questionable particularly when the geometrically complex flow domain is encountered. There are three approaches available in the literature to address this problem. In the first approach, the particles are placed in their voxel positions (or the stair-case approach). Although this technique could assure uniform initial particle number density (n0) throughout the flow field, the modeled boundary is not continuous and it may differ from the actual geometry of the flow boundary (unless a very fine resolution is used at the boundary). The related MPS works utilizing this approach to treat non-rectangular flow boundary can be found in  [10–14,8,9]. The second approach is similar to the body-fitted mesh generation approach in the mesh-based method, whereby the wall particles are placed along the flow boundary. The ghost particles are then displaced accordingly to adhere to the geometry of the flow boundary. This approach can be traced back from the earlier MPS works by Koshizuka et al.  [15], Koshizuka and Oka  [16], Kouh  [17] and Shakibaeinia and Jin  [18], whereby a slanted plane has been modeled. Application of this approach on more complex flow boundary can be found from the works by Nakanishi et al.  [2] in modeling the geometry of the Pelton bucket and Sun et al.  [19,3] in modeling the geometry of a cylindrical stator. Although this approach can be used to address the limitation of the first approach (i.e. geometric conformance), discussion on how to ensure a uniform distribution of initial particle number density (n0), which is a key requirement for incompressible flow problem, is unclear. The more recent (or the third) approach works by negating the use of ghost particles. Here, a smooth and continuous function (dependent only on the distance from the wall) is used to replace the calculation of particle number density contributed by the wall. Fine-tuning of this function, however, is required if one wishes to extend this method to handle problems with arbitrarily shaped boundaries. The related works can be found in  [20] and the very recent MPS work reported by Li et al.  [21].Besides that, it is challenging to enforce the no-slip boundary condition at the wall if the shape of the flow boundary is complex. The earlier proposal of Koshizuka et al.  [15] suggested the modeling of no-slip wall by placing multiple layers of zero-velocity ghost particles adjacent to the wall particles. Owing to the inaccuracy of this conventional approach, this has prompted  [22] in using the mirror image particle to enforce the no-slip condition. A similar work can be seen from the works by Zhang et al.  [23] and Lee et al.  [24]. Owing to the fact that the locations of mirror image particles are dynamically updated in each time step, an increase of computational load can be expected. Also, it is very challenging while placing the mirror image particles in the vicinity of sharp-angled boundaries. Interested readers may refer to the recent work of Akimoto  [25] for a more detailed explanation on the implementation of this method.In spite of the fact that different ways have been proposed in MPS to handle flows involving complex geometry, its robustness in solving practical flow problem involving arbitrarily complex geometry is still worth for further investigation. Few years ago, we have been working on a hybrid Lagrangian–Eulerian method, namely the Moving Particle Pressure Mesh (MPPM) approach  [26,27] by combining the benefits of both Eulerian and particle methods in simulating incompressible flow. The main idea is to treat the pressure as the Eulerian variable, which is in contrast with the original proposal in MPS method whereby the pressure and velocity are stored on the Lagrangian particles. In MPPM method, the mass conservation equation (hence PPE) is solved on the Eulerian background mesh and hence a divergence-free velocity condition can be assured on the mesh level. Owing to the fact that information such as particle number density is not required in the entire solution process of MPPM, this has surmounted several computational deficiencies in the existing MPS method. However, due to the nature of the Eulerian mesh used in MPPM which is essentially Cartesian, this has hampered its applicability in practical flow problems. In order to address the no-slip boundary at the wall, the wall particles are simply represented by a series of stationary particles placed on the wall boundary without the use of mirror image (or ghost) particle. This approach is preferable, as discussed in our recent MPPM method for multiphase flow (see the Moving Particle Level-Set (MPLS) method by Ng et al.  [28]), owing to the fact that it is computationally cheaper and simpler to implement. However, an accurate Laplacian model must be sought in order to address the deficiency of number of particles near the wall. Still, in most of our computational work conducted earlier by using MPPM  [26,27], a numerically inconsistent Laplacian model (e.g. the MPS Laplacian model of Koshizuka et al.  [15], which isO(h−1)in irregular particle layout wherehis the particle spacing) has been used to discretize the viscous term. Although the development of a new Laplacian model has been reported in our recent MPLS work  [28] in order to reduce the leading error of the MPS Laplacian model, its order of accuracy is onlyO(h0).There are several papers available in the open literature addressing the use of hybrid Eulerian–Lagrangian approach in fluid flow simulation. In fact, the MPPM shares a very similar idea with the Particle-In-Cell (PIC) method [29,30], whereby the advection of massless particles is adopted to treat the convective term. According to the very recent PIC work reported by Kelly et al.  [30], the excessive numerical diffusion inherited in the original advection procedure of the PIC method can be circumvented via incrementing the particle velocity based on the change in the grid velocity. This procedure, however, requires one to perform numerous numerical interpolations between the grid and the particle levels (see Section 3.4 in  [30]). A very recent paper reported by Matsunaga et al.  [31] utilizes a hybrid approach as well, whereby the Lagrangian advection procedure is used only to solve the species concentration equation to minimize the numerical diffusion, while the flow equations are solved on the Eulerian mesh via the finite volume method. Due to the truncation error inherited from the time discretization scheme implemented in the particle advection procedure, particle distribution error will occur and the highly anisotropic particle spacing may cause numerical instability. In the recent works of Kelly et al.  [30] and Matsunaga et al.  [31], certain tunable particle regularization/redistribution procedures must be employed to artificially shift the positions of particles to improve spacing uniformity. Although these particle regularization procedures can be omitted by recovering the mass property on each Lagrangian particle such as that reported by Liu et al.  [32], PPE must be expressed on both mesh and particle levels and this will ultimately increase the computational cost. As one shall witness later, in contrast with PIC and other hybrid procedures reported above, MPPM solves the momentum equations directly on the Lagrangian particles (similar to the fully Lagrangian methods such as SPH and MPS), without performing numerical interpolation from the mesh level as practiced in the above literatures. Numerical interpolation takes place, however, from the particle to mesh level, in order to obtain the mesh face velocities that appeared as the source term of PPE. Due to the employment of massless particles in MPPM, we have similarly noticed the anisotropic spacing of fluid particles as simulation progresses. This problem is resolved by performing the particle addition/deletion procedure (discussed later), without artificially shifting the positions of the particles.In the current work, we aim to extend the MPPM solver to handle arbitrary-shaped flow boundaries. The Cartesian mesh originally embedded in MPPM can be used to handle a geometrically complex flow domain with modifications, for instance, by the Immersed Boundary (IB) method. However, it involves complex data interpolation particularly at the flow boundary (see  [33,34]). Owing to this, the body-fitted unstructured mesh is chosen as the candidate to replace the Cartesian pressure mesh embedded in our original MPPM method. In the current work, the associated modifications in our original MPPM solver which are implemented to accommodate the more robust unstructured pressure mesh will be explained in detail. Also, we recognize the limitation of our Laplacian model adopted in our previous work  [26–28], which is numerically inconsistent. Therefore, we shall investigate on a consistent Laplacian model (i.e. the Consistent Particle Method (CPM)) recently proposed by Koh et al.  [35], whereby consistency is ensured via the Generalized Finite Difference (GFD) and the Least Square (LS) methods. In order to enhance its robustness, an implicit form of CPM is considered in the computation of viscous stress term reported in current work, which is never reported before in open literature. Also, we shall further extend our method to solve non-isothermal flows. Finally, we shall verify our new Unstructured Moving Particle Pressure Mesh (UMPPM) method with the benchmark solutions available for Taylor–Green decaying vortex problem, lid-driven flow problems in several cavities, inflow–outflow problems and some natural convection problems.The two-dimensional incompressible flow is considered in the current work, whereby the fluid flow is governed by the mass conservation (continuity) equation:(1)∇•u→=0and the momentum conservation equation:(2)ρDu→Dt=−∇P+μ∇2(u→)+S→.Applications involving heat transfer can be analyzed by solving the energy equation alongside with Eqs. (1) and (2):(3)ρCpDTDt=k∇2(T).In the above equations,ρis the fluid density,Pis the fluid pressure,μis the fluid dynamic viscosity,S→is the momentum source vector,u→=〈u,v〉is the fluid velocity vector,Tis the fluid temperature,kis the fluid thermal conductivity andCpis the fluid specific heat. In order to account for buoyancy force, the Boussinesq approximation is used:(4)S→=−ρβg→(T−To),whereβis the fluid thermal expansion coefficient,g→is the gravitational acceleration vector andTois the reference temperature.In MPS, the flow domain is filled (or discretized) with finite number of particlesi. By integrating the momentum equation (Eq. (2)), the velocity of particleiat time leveln+1can be determined by:(5)u→in+1=u→in+1ρi∫(μ∇2(u→)i+S→i−∇Pi)dt.By using the conventional Moving Particle Semi-implicit (MPS) method  [1], the diffusion/source terms and pressure gradient term are commonly discretized by using the first-order explicit and implicit schemes, respectively:(6)u→in+1=u→in+Δtρi(μi∇2(u→)in+S→in−∇Pin+1),and the new position of the particleican be updated as:(7)r→in+1=r→in+Δtu→in+1.The pressure fieldPn+1which appeared in Eq. (6) must be recovered in such a way that it satisfies the continuity equation (1). As such, the fractional-step approach is commonly adopted. For the first step, the intermediate velocity of particleiis computed via:(8)u→i∗=u→in+Δtρi(μi∇2(u→)in+S→in).In order to take the flow convection effect into account, the particleiis advected in the following manner:(9)r→i∗=r→in+Δtu→i∗.Here, the superscript * denotes the intermediate time level. In the second step, the effect of pressure gradient is recovered by:(10)u→in+1=u→i∗−Δtρi∇Pin+1.The Pressure Poisson Equation (PPE) can then be derived by simply putting Eq. (10) into the divergence form and applying the continuity equation (∇•u→in+1=0) to yield:(11)Δtρi∇2Pin+1=∇•u→i∗.Eq. (11) is called the “divergence-free” condition in the MPS work reported by Tanaka and Masunaga  [36]. Apart from the fact that a smooth pressure field can be attained (due to the relative smooth source term in Eq. (11)), the particle number density (denoted asnin MPS literature) is not required. However, the conservation of volume of a fluid particle (hence the particle number density,n), which is an essential requirement for incompressible fluid calculation, cannot be assured as the time progresses. This has prompted Tanaka and Masunaga  [36] to modify the source term of the PPE into the following form:(12)Δtρi∇2Pin+1=∇•u→i∗+γ1Δtnio−niknio.Here,γis the tuning parameter,nioandnikdenote the particle number density of particleiat time level 0 (i.e. initial condition) and time levelk(k>0), respectively. A similar idea can be found from other MPS works reported by Kondo and Koshizuka  [37], Lee et al.  [24], Ng and Ng  [9], Ng et al.  [8] and Natsui et al.  [38]. While the above formulation (Eq. (12)) may lead to a smoother pressure field and volume conservation, the effort of calibrating the tuning parameterγis cumbersome. On the other hand, a large amount of computational effort is needed to reconstruct the coefficient matrix of the PPE at each time step due to the possible repositioning of fluid particles.In fact, if one treats the fluid particle as an observation point rather than that which is carrying a certain mass/volume (material point), one can get rid of Eq. (12) to obtain the new pressure field. Inspired by the physical nature of pressure in an incompressible flow condition (i.e. lacking of the convective effect), Hwang  [26] has argued that pressure should be treated as an Eulerian variable (as proposed in his Moving Particle Pressure Mesh (MPPM) method). Therefore, the Poisson equation of pressure (Eq. (11)) can be solved on a fixed Eulerian pressure mesh (say mesh with centroid locationP) to retrieve the new pressure field:(13)ΔtρP∇2PPn+1=∇•u→P∗,after one has calculated the intermediate velocities and positions of all fluid particles via Eqs. (8)–(9). Here, the intermediate velocities are interpolated to the mesh level (hence mesh-based velocities) in order to construct the source term of the PPE (RHS of Eq. (13)). More importantly, the coefficient matrix of the PPE expressed in Eq. (13) is fixed (due to fixed pressure mesh employed), which could lessen the overall computational effort.It is worth to mention here that the idea of interpolating the mesh-based intermediate velocities from the advected velocities stored in Lagrangian points (or fluid particles) in MPPM is somewhat analogous to that of the Semi-Lagrangian (SL) method proposed by Stam  [39]. Instead of tracking the particles’ velocity and position at each time step as implemented in MPPM, the advection procedure in SL method works by simply applying the backward trajectory approach to determine the departure location of a particle that arrives at the interpolating mesh point. The intermediate velocity at the interpolating mesh point is then prescribed to that at the departure location (obtained via interpolation from intermediate velocities stored in neighboring mesh). While this method is computationally cheaper than MPPM, the truncation error is large (numerically diffusive as reported by Jin and Chen  [40]) and the departure location may be located outside of the computational domain  [41].Similar to MPS, upon solving the PPE in MPPM (see Eq. (13)), the particle velocity can be corrected via Eq. (10) and its new position can be updated in accordance with Eq. (7).In most of the existing studies in MPS or MPPM, the diffusive term (Laplacian of velocity) is treated explicitly for the ease of computation (e.g.  [1,26]). However, as the flow problem involving highly viscous fluid or small particle diameter (or higher pressure mesh resolution in MPPM), this method is simply inefficient because it delimits the allowable time step size for numerical stability. Implicit algorithm is therefore considered in the current work:(14)u→i∗=u→in+Δtρi(μi∇2(u→)i∗+S→in).The Laplacian model such as that implemented in MPS  [1]:(15)∇2(u→)i∗=2d∑j≠iw(|r→j−r→i|)|r→j−r→i|2∑j≠iw(|r→j−r→i|)(u→j∗−u→i∗)can be used to discretize the diffusive term in Eq. (14), wherejis the index for neighboring particle of local particlei. The above implicit form of Laplacian model has been recently considered by Fukuzawa et al.  [42] in simulating highly viscous non-Newtonian flow. Here,w(|r→j−r→i|)is taken as the standard kernel function in MPS:w(|r→j−r→i|)=R/|r→j−r→i|−1, i.e. Eq. (3) reported in  [15].Ris the influence radius, normally taken as 2–4 times of initial particle diameter (see  [26,15]).Notwithstanding the fact that the above Laplacian model (especially in its explicit form) has been used extensively in MPS literature, it has been mathematically shown by Ng et al.  [27] that the above formulation is numerically inconsistent in irregular particle layout. A similar finding has been reported by Souto-Iglesias et al.  [43] as well. Recently, Koh et al.  [35] have addressed this problem by introducing a new Laplacian model (they named it as Consistent Particle Method (CPM)), whereby consistency is ensured via the Taylor series. In the current work, the CPM model is expressed in its implicit form:(16)∇2(u→)i∗=∑j≠iwj2[(c1+e1)hj+(c2+e2)kj+(c3+e3)hj22+(c4+e4)hjkj+(c5+e5)kj22](u→j∗−u→i∗).Here, the neighboring particlejin CPM is searched from the neighboring pressure meshes as outlined in Fig. 1. Here, the searching operation is performed up to the second neighbor of the local pressure mesh containing particlei, which is somewhat analogous to the influence radius value recommended by Koh et al.  [44], i.e.R=2.1l0(l0is the initial particle diameter in MPS). In the above CPM model, the coefficientscn,en(n=1,2…5) can be easily found from the Least Square (LS) method via minimizing the square of errors with the gradient components (see Eq. (20) in  [35]). The outcome of the minimization is quoted below from the subsequent work by Koh et al.  [44]:(17)[a1a2a3a4a5b1b2b3b4b5c1c2c3c4c5d1d2d3d4d5e1e2e3e4e5]=[∑j≠iwj2hj2∑j≠iwj2hjkj0.5∑j≠iwj2hj3∑j≠iwj2hj2kj0.5∑j≠iwj2hjkj2∑j≠iwj2hjkj∑j≠iwj2kj20.5∑j≠iwj2hj2kj∑j≠iwj2hjkj20.5∑j≠iwj2kj30.5∑j≠iwj2hj30.5∑j≠iwj2hj2kj0.25∑j≠iwj2hj40.5∑j≠iwj2hj3kj0.25∑j≠iwj2hj2kj2∑j≠iwj2hj2kj∑j≠iwj2hjkj20.5∑j≠iwj2hj3kj∑j≠iwj2hj2kj20.5∑j≠iwj2hjkj30.5∑j≠iwj2hjkj20.5∑j≠iwj2kj30.25∑j≠iwj2hj2kj20.5∑j≠iwj2hjkj30.25∑j≠iwj2kj4]−1.Here,hjandkjare (xj−xi) and (yj−yi), respectively.wjis the weight function in CPM (taken aswj=1/|r→j−r→i|3) as recommended by Gao  [45] after performing numerical testing on several kernel functions. The inverse matrix (RHS of Eq. (17)) results in other coefficients as well such asan,bnanddn(n=1,2…5) which can be used to evaluate terms involving first derivative and cross derivative. At this point, according to our knowledge, the current work is the first attempt whereby the viscous stress term is discretized by the implicit CPM method.The earlier MPPM works have witnessed their applicability in simulating single-phase  [26,27] and multi-phase flow  [28]. Nevertheless, the computations are limited to flow applications involving rectangular flow domain. The bottleneck is due to the nature of the pressure mesh employed in the original MPPM work which is essentially Cartesian. Obviously, one may extend the Cartesian pressure mesh system to handle flow involving complex boundary  [34] by using the Immersed Boundary (IB) method. Nonetheless, this method requires complex data interpolation at the boundary which may degrade the flow accuracy in the vicinity of the flow boundary.From our point of view, the more practical solution would be employing the body-fitted unstructured pressure mesh system on the entire flow domain. As such, the discretization procedure of the PPE in MPPM must be modified accordingly. In the current work, we intend to generalize the discretization procedure of the PPE so that it is applicable in the hybrid unstructured pressure mesh environment. We express the PPE (Eq. (13)) in its volume integral form:(18)∫∇2PPn+1dV=∫ρPΔt∇•u→P∗dV.Upon applying the divergence theorem, the following area integral equation is obtained:(19)∫∇Pfn+1•dA→=ρPΔt∫u→f∗•dA→.The above equation can be discretized accordingly as:(20)∑f∇Pfn+1•A→f=ρPΔt∑fu→f∗•A→fwhere the summation is performed on each mesh facef. Fig. 2illustrates the configuration of two pressure meshes sharing a common facef. In this case, the area vectorA→fis pointing to the pressure meshB.While it is straightforward to discretize the LHS of Eq. (20) when the mesh is orthogonal (e.g.AA′⃗=BB′⃗=0⃗), unstructured mesh may give rise to the well-known issue of mesh non-orthogonality. In order to circumvent this issue, Jasak  [46] has decomposed the area vector on the LHS of Eq. (20) into its orthogonal and non-orthogonal components (denoted by subscriptoand no, respectively):(21)∇Pfn+1•A→f=PBn+1−PAn+1‖AB‖⃗‖A→f,o‖+∇Pfn•A→f,no.From his work, the vectorA→f,ois parallel toAB⃗. Jasak  [46] has studied the numerical accuracy and stability of three different methodologies in estimating the vectorA→f,o. The non-orthogonal term (second term of the RHS of Eq. (21)) is then treated as an extra source term in the PPE (on top of the mass imbalance term), which may cause numerical instability when the mesh is highly irregular.In the current work, we adopt a more intuitive strategy (see Fig. 2) inspired by Niceno  [47], whereby the LHS of Eq. (20) is discretized as:(22)∇Pfn+1•A→f=PB′n+1−PA′n+1‖A′B′‖⃗‖A→f‖.Due to the fact that pressure variables are stored at the centroidsAandB, the gradient projection method (similar to those employed in  [48–51]) can be used to interpolate the pressure values at the imaginary positionsA′andB′:(23)PA′n+1=PAn+1+∇PAn+1•AA′⃗(24)PB′n+1=PBn+1+∇PBn+1•BB′⃗.Substituting Eqs. (23), (24) into Eq. (22) gives:(25)∇Pfn+1•A→f=PBn+1−PAn+1+∇PBn+1•BB′⃗−∇PAn+1•AA′⃗‖A′B′‖⃗‖A→f‖.The pressure gradient at the mesh centroid can be evaluated by using the divergence theorem, or the Least-Square method by adopting the computational stencils similar to that illustrated in Fig. 3. In the current work, the latter method is preferred to get rid of the pressure interpolation at the mesh facefas required in the divergence theorem. Upon minimizing the square of errors with each gradient component (∂P∂x,∂P∂y), the following equation can be obtained for each meshP:(26)[∂Pn+1∂xP∂Pn+1∂yP]=[∑j(xj−xP)2∑j(xj−xP)(yj−yP)∑j(xj−xP)(yj−yP)∑j(yj−yP)2]−1[∑j(xj−xP)(Pjn+1−PPn+1)∑j(yj−yP)(Pjn+1−PPn+1)].From the above equation, it is important to note that the matrix inversion is performed only once (because the pressure mesh is fixed) and the source term is constantly updated at each time step in order to evaluate the pressure gradient at meshP. The pressure gradient terms∇PAand∇PBappeared in Eq. (25) can then be evaluated by using the similar method outlined in Eq. (26). Due to the involvement of neighboring mesh pressurePjin the pressure gradient calculation, the coefficient matrix for the PPE will involve the second neighbor of meshP(see Fig. 4), thereby enlarging the bandwidth of the coefficient matrix of the PPE as compared to that of our previous work  [26–28].As mentioned in Section  3.1, the intermediate face velocities that appeared on the RHS of the discretized PPE (Eq. (20)) are interpolated from the intermediate particle velocities in MPPM. There are many interpolation procedures available. In particle method (e.g. MPS), the most common approach is the weighted averaging technique similar to that of the Shepard interpolation procedure:(27)uf∗⃗=1∑jw(|r→j−r→f|)∑juj∗⃗w(|r→j−r→f|).Here, the standard kernel function in MPS such asw(|r→j−r→f|)=R/|r→j−r→f|−1[26,38] and other non-standard kernel functions such as those proposed by Yoon et al.  [52] and Shakibaeinia and Jin  [53] may be considered. Although the above procedure is somehow computationally cheaper than other more advanced methods such as the Moving Least Square (MLS) method  [54,55], we found that the overall quality of the flow solution is very sensitive to the accuracy of the interpolated face velocityuf∗⃗. Owing to this reason, the MLS technique with a quadratic basis function:(28)R=[1xyxyx2y2]is adopted in the current work. Here, we impose a local coordinate system centered at point of interest (say pointf, see Fig. 5). The locally fitted intermediate velocity field in the vicinity of facefreads:(29)u∗(x,y)⃗=P(A−1B)where(30)A=∑jw(|r→j−r→f|)RTR(31)B=∑jw(|r→j−r→f|)uj∗⃗RT.LetA−1B=[m1m2m3m4m5m6]T. Obviously, the interpolated face velocityuf∗⃗can be obtained by simply settingx=0andy=0in the basis function appeared in Eq. (29) to yield:(32)uf∗⃗=[100000](A−1B)=m1.Correspondingly, the partial derivatives such asufx∗⃗,ufy∗⃗can be recovered whenever necessary:(33)ufx∗⃗=m2(34)ufy∗⃗=m3.At this point, it is important to note that the neighboring particlejis searched from the neighboring pressure meshes, which are consisting of first neighbors and second neighbors as illustrated in Fig. 5. In order to account for the influence of distance between the neighboring particlejand the interpolating point (pointfin this case), Tabbara et al.  [54] have proposed an exponentially decaying kernel function with an adjustable parametercto control the rate of descent. In the current work, we found that the tuning-free kernel function originally proposed by Koshizuka et al.  [15] in MPS works well, with a slight modification to account for the non-uniformity of the unstructured pressure mesh:(35)w(|r→j−r→f|)=1(xj−xfxm)2+(yj−yfym)2−1.Here,xm=Max|xj−xf|+Δx¯andym=Max|yj−yf|+Δy¯.Δk¯is the mean value of spatial lengths (in thek-direction) of the two pressure meshes straddling on facef.Once the intermediate face velocities are obtained, the discrete PPE (Eq. (20)) is solved by the preconditioned BiCGSTAB method  [56]. In order to ensure mass conservation, the PPE is solved until the L2-error norm is below 1×10−15. It is important to note here that the simultaneous equations arisen from the implicit discretization of viscous term are solved by using the same sparse matrix solver implemented for PPE.Upon solving the PPE, the velocity of particleican be corrected accordingly as outlined in Eq. (10). During the velocity correction stage, the pressure gradient of particleican be calculated from the MLS procedure (see Eqs. (33), (34)), by making use of the new pressure values stored in the neighboring pressure meshes. In the conventional MPS method, the artificial repulsive force term (e.g. the minimum pressure model by Koshizuka et al.  [15] and CMPS model by Khayyer and Gotoh  [57]) is added to the pressure gradient term to ensure numerical stability. The pressure gradient term in MPPM, however, is retained in its original form and no artificial treatment is required.In the standard MPS method, collision model (such as that proposed by Lee et al.  [24]; Shakibaeinia and Jin  [53]; Natsui et al.  [38]) is usually employed if the moving particles are too close to each other. From their work, the particle velocityu→in+1is modified accordingly to account for the effect of collision. In MPPM method, by getting rid of the material constraint on the moving particles, particles which are close to each other (δ<αdc) are simply deleted as reported in the original MPPM work  [26]. Here,dc=Δx2+Δy2whereΔxandΔxare the spatial lengths of a pressure mesh in thex- andy-direction.αis taken as 0.09 in the original MPPM work. The particle deletion procedure is permissible because particles are merely acting as observation points (used to interpolate the intermediate face velocities in the mesh level as in Eq. (32)).In the event of detecting an empty pressure mesh (mesh with no fluid particles), a particle is added at the mesh centroid. The velocity of the new particleiis updated accordingly as:(36)u→in+1=u→Pn+1=u→P∗−ΔtρP∇PPn+1.Here,u→P∗is the intermediate velocity at mesh centroidP, which is interpolated from the neighboring intermediate particle velocityu→j∗by using the MLS procedure similar to that used to approximate the intermediate face velocity discussed in Eq. (32). The term∇PPn+1can be evaluated via the least-square method outlined in Eq. (26).In general, the solution procedure of the new UMPPM method can be summarized as:Step 1:Build the unstructured pressure mesh on the domain of interest.Insert the fluid particle at the mesh centroid and boundary particle at the centroid of the boundary face (see Fig. 6). The positions of the boundary particle remain unchanged during the simulation.Evaluate the inverse matrix (first term of the RHS of Eq. (26)) for each pressure mesh. The coefficients that appeared in the inverse matrix are needed for pressure gradient calculation.Construct the coefficient matrix of PPE (see Eqs. (20), (25) and (26)).Calculate the time step size (Δt) according to the prescribed CFL value.Solve the intermediate particle velocity from Eq. (14). The diffusion term is treated implicitly via the procedure outlined in Section  3.2.1. At this stage, if heat transfer problem is considered, the source term (e.g. Eq. (4)) can be included in the momentum equation. Subsequently, the energy equation (Eq. (3)) is solved implicitly as:(37)Tin+1=Tin+ΔtρiCp,iki∇2(T)in+1.Advect the fluid particles to their intermediate positionsr→i∗in accordance with Eq. (9).Interpolate the intermediate velocities at mesh facefand mesh centroidPusing the Moving Least Square (MLS) procedure outlined in Eq. (32). Compute the source term of the PPE accordingly by using the intermediate face velocities (RHS of Eq. (20)).Solve the PPE to obtain the new pressure fieldPPn+1.Obtain the new velocity and position of particleiby Eqs. (7) and (10), respectively. Accordingly, the new velocity of meshPcan be calculated by Eq. (36). Based on the corrected positions of the fluid particle, the temperature of meshP(TPn+1)is interpolated from the temperature values stored at the neighboring fluid particles via the MLS method.Particles are deleted/added as necessary as discussed in Section  3.2.2.2.Go back to Step 5 and repeat the process until the desired time level is reached.Here, the solution obtained from the particle deletion (i.e. depending on theαvalue) and particle addition procedures outlined in Section  3.2.2.2 is denoted as UMPPM in this section. If such procedure is employed, as we shall witness later, the total number of particlesNpis likely to increase as time progresses. This may contribute to higher flow accuracy at the expense of higher computational cost. In the current study, we have further investigated the possibility wherebyNpis enforced to be similar toNm(i.e. number of pressure meshes). This is achievable by retaining only the fluid particle that is closest to the mesh centroid, while deleting the other fluid particles lying on the same pressure mesh. The solution obtained from this approach is named as UMPPM* in this section.The Taylor–Green flow consists of a series of decaying vortices in thex–yplane (x∈[0,1];y∈[0,1]) in which the flow field can be expressed analytically as:(38)utheo(x,y,t)=−Uebtcos(2πx)sin(2πy)(39)vtheo(x,y,t)=Uebtsin(2πx)cos(2πy)(40)Ptheo(x,y,t)=−U24e2bt(cos(4πx)+cos(4πy)).Here,bis the decaying rate defined as−8π2/Reand the Reynolds numberRe(=ρUL/μ)is prescribed as 100. The reference speedU, densityρand domain lengthLare treated as unity in this case, similar to those reported in the previous SPH works  [58,59].The flow field is initialized from the analytical solution given above. Regarding the space discretization of the flow field, the unit square domain is firstly discretized by the square elements, followed by decomposition of each square element into four triangular elements (hence pressure mesh) as shown in Fig. 7. The total number of pressure meshes generated is denoted asNm. Simulation is executed untiltmax=5s(with CFL  =  0.25, similar to that adopted by Ellero et al.  [58] and Adami et al.  [59]). And, in order to check the convergence of the current method, the total number of particlesNpis enforced to be similar as the total number of pressure meshesNm(i.e. the UMPPM* solution described in Section  4).Fig. 8shows the instantaneous particle speed and fluid pressure att=2sforNm=2500. Velocity vectors are plotted as well to reveal the flow structure. It is interesting to observe the smoothness of velocity and pressure field as we do not employ any artificial numerical treatments in our UMPPM* method. The decay of the maximum speed over time is shown in Fig. 9. It is encouraging to see that the agreement is very good even though a coarse particle resolution is considered (Nm=1600). As compared to the ISPH result (Np=1600) reported by Ellero et al.  [58] and the recent Weakly Compressible SPH (WCSPH) result (Np=2500) reported by Adami et al.  [59], our UMPPM* solution is considerably smoother and closer to the theoretical solution. In order to quantify the numerical error, we have adopted the relative errorL∞(similar to Adami et al.  [59]), defined as:(41)L∞(t)=|max‖u→P‖−Uebt|Uebt.Fig. 10shows the relative errors of maximum speed obtained at different particle resolutions as time progresses. The order of convergence of the UMPPM* method is almost comparable to that of the ISPH method reported by Ellero et al.  [58] as reported in Fig. 11, while the error level of the UMPPM* method is lower than that of the ISPH method. As shown in Fig. 10, the error levels are considerably smoother as compared to those of the WCSPH computation reported by Adami et al.  [59]. Also, it is interesting to note that the relative error (case of coarsest resolution, i.e.N=1600) is below 2%, which is considerably lower than the numerical errors (fluctuating within 5%) of all the test cases reported in the literature (cf. Figure 8(b) in  [59]).As the last check of the spatial convergence, theL2norm of thex-velocity field is computed as:(42)‖u‖2=∑N(u(t)−utheo(t))2Nm,and the result is shown in Fig. 12. The error is reduced progressively as the number of particles is increased with the order of convergence ∼1.We consider the lid-driven flow in a square cavity at high Reynolds number (Re=10000). This is a computationally challenging problem as strong velocity gradient exists near the walls and several secondary vortices exist at the corner. The square cavity with side lengthL=1.0mis filled with a fluid of densityρ=1.0kg/m3andμ=1/RePas. Here, the top wall is moving at a constantx-velocity, i.e.u=1.0m/s.At such a high Re flow condition, it is interesting to note from the original MPPM work by Hwang  [26] that the flow profiles at the mid-sections of the square cavity can be represented well (see Figure 14 in  [26]) even on a coarse pressure mesh resolution of80×80(orNm=6400). Owing to the adaptive nature of the original MPPM method (particle addition/deletion was performed,α=0.09), the total number of particles may become larger than the total number of pressure meshes employed (see Fig. 13). As one shall notice later, this feature is particularly useful in enhancing the flow accuracy at a reasonable number of pressure meshes.Similar to the original MPPM work, the simulation is executed untilt=1000s(CFL  =  0.1, similar to Hwang  [26]) to ensure a statistically steady solution on the80×80square pressure mesh. As reported in Fig. 14, it is interesting to note that the adaptive UMPPM solution is already close to the fine grid solution of Ghia et al.  [60]. For this case, the number of particlesNp/Nm∼2.3at steady-state condition as reported in Fig. 13. Without particle adaptation (i.e. case UMPPM*), seemingly, the high velocity gradients near the wall are under-predicted and the insufficient particle resolution may yield an unphysical overshoot of velocity profile near the top wall. By using the same mesh resolution (80×80), the finite-volume solutions are obtained as well from the commercial code (FLUENT). Here, two convective discretization schemes, namely the First-order Upwind Differencing (FUD) scheme and the high-resolution MUSCL scheme are considered. It is appealing to note that the numerical solutions of UMPPM* (no adaptation) exhibit less smearing as compared to the solutions of high-resolution MUSCL scheme. As expected, the excessive numerical diffusion in the FUD scheme is very prominent at this high Re flow.On the other hand, Adami et al.  [59] have recently attempted their newly developed SPH technique in this lid-driven problem as well. The SPH results obtained by using their finest particle resolution (400×400) are reported in Fig. 14. While the high velocity gradients in the vicinity of the walls are nicely captured, their numerical solutions at the core region are somehow not agreeable with the reference solutions of Ghia et al.  [60]. As reported by Adami et al.  [59], the primary vortex is more centered with increasing Re, which is observed as well in our current study (see Fig. 15). Also, it is appealing to note that the secondary vortices are nicely captured in the corners of the square cavity even though the resolution employed in the current UMPPM method is considerably coarser as compared to the one used by Ghia et al.  [60] and Adami et al.  [59].Next, the lid-driven flow in a skewed cavity is considered. This is indeed the case computed previously by Erturk and Dursun  [61] whereby they have solved the flow equations by using the vorticity–stream function approach on a very fine grid resolution of512×512. Similar to the lid-driven flow in the square cavity, the side lengthLis prescribed as 1.0 m. The fluid densityρis1.0kg/m3and fluid dynamic viscosityμis 0.001 Pa s. Again, the top wall is moving at a constantx-velocityu=1.0m/s(henceRe=1000). Here, the skewed angleψis15°, which is similar to the case of having the most extreme skewed angle reported by Erturk and Dursun  [61]. The schematic diagram of the skewed cavity is shown in Fig. 16(a). In the current computational study, a hybrid pressure mesh system is employed. The layout of the pressure mesh (average mesh sizelavg=0.02m) is shown in Fig. 16(b).For each computation considered here, the simulation is executed untilt=10sto ensure a statistically stationary solution. The velocity plots predicted by using the UMPPM method along lineaand linebare shown in Fig. 17. Here,αis taken as 0.05. As seen, the numerical results are converging to the benchmark solutions of Erturk and Dursun  [61] as the pressure mesh (hence particle resolution) is refined. Seemingly, the average mesh size of 0.01 m is adequate enough to resolve theu-velocity along linea. However, along lineb, a finer mesh resolution (lavg=0.0025m,Nm=39395,Np=71246att=10s) is needed to resolve the relatively high velocity gradient in the vicinity of EdgeB. It is worth to mention here that the numerical results obtained from this particular mesh resolution are almost similar to the benchmark solutions of Erturk and Dursun  [61] obtained on the very fine mesh system (i.e.512×512).In fact, the effectiveness of employing the particle adaptation is more prominent when the resolution of the pressure mesh is coarse. As observed from Fig. 18for the case oflavg=0.02m, the UMPPM* solution is not comparable at all with the reference one. Interestingly, upon implementing the particle adaptation procedure (UMPPM), the numerical solutions are now closer to the reference data as shown in Fig. 18. However, as the resolution of the pressure mesh is refined, the effectiveness of the particle adaptation strategy is no longer apparent as shown in Fig. 19. Table 1reports on the CPU time needed to complete the flow simulation untilt=10s. For the case of UMPPM*, the increase in CPU time is approachingO(Np2)asNpis increased as shown in Fig. 20.One of the attractive components of the current method is its implicit feature which has enabled us to adopt a larger time step size for numerical computation. As reported in Fig. 21, there is no significant discrepancy between the flow solutions adopting different CFL numbers, except for the fact that there is a slight under-prediction of the under- and over-shoots of the velocity profiles if CFL is >1.0.In order to demonstrate the capability of the current method in handling flow involving complex geometry, a lid-driven flow in a complex cavity such as that illustrated in Fig. 22is considered. An unstructured pressure mesh with an averaged mesh size of 0.02 m is adopted in this flow case. The Reynolds number defined as:Re=UL/υis 1000. Here,Uis the speed of the moving lid (top boundary), prescribed as 1.0 m/s andLis the length of the top boundary, i.e.L=1.0m(see Fig. 22). The UMPPM* results are compared with those obtained from the finite-volume method (FLUENT) as well. Here, it is important to note that a similar mesh is used in FLUENT while the comparison of flow solutions is made.Fig. 23shows the contour lines of they-velocity values obtained from the finite volume solutions and the UMPPM* solution. Different convective discretization schemes are considered during the execution of the finite-volume computation, i.e. the First-order Upwind Differencing (FUD) scheme and the third-order MUSCL scheme. As seen, three sets of numerical results are comparable to each other. The ascending jet between the top cylinders is well captured by the UMPPM* method. In order to better reveal the capability of UMPPM* in handling flow involving sharp gradient, a close-up view of the descending jet which is observed in the vicinity of top right corner of the cavity, is plotted in Fig. 24. From these plots, it is apparent that our UMPPM* solution is coming closer to that of the high-resolution MUSCL scheme. The smearing of the velocity field predicted by the FUD scheme (Fig. 24(a)) is rather obvious.Here, the method is used to solve the flow over a backward-facing step as illustrated in Fig. 25. This case has been previously computed by Adami et al.  [59] by using the SPH method, whereby they have imposed a constant velocity flow condition (U=0.14m/s) at the inlet. In order to ensure a fully-developed flow condition at the outlet, the total length of the flow domain is prescribed asL=122.4m. A pressure mesh with an average size of 0.2 m is used to discretize on the flow domain. The fluid having density of1.0kg/m3and dynamic viscosity of 0.01456 Pa s is considered here (Re=2ρUHin/μ=100).By using the above numerical settings, the simulation has been executed untilt=2000sto ensure a statistically steady result. The predicted fully-developed flow profile atx/S=17.84is shown in Fig. 26. As seen, the UMPPM* solution compares very well with the theoretical solution. Also, the velocity profiles at different flow sections are depicted in Fig. 27and the numerical solutions exhibit good agreement with the experimental data of Armaly et al.  [62].This flow case involves multiple inlets and one outlet, as illustrated in Fig. 28. There is an inflow from the bottom opening of the primary flow channel of widthW=1.0m, whereby the fluid particles will undergo a meandering motion (due to the semi-circular grooves) before exiting the outlet located at the top. Prior to reaching the grooved channel, the fluid particles in the primary flow channel are mixed with those from the secondary flow channel (with smaller widthWs=0.5m) as reported in Fig. 28. In this case, the primary and the secondary inflow speeds are 1.456 m/s and 2.912 m/s, respectively. Both inflow directions are normal to the corresponding flow boundaries. The Reynolds number (Re=ρUW/μ) is 10, whereρis1.0kg/m3,μis 0.1456 Pas,Uis the primary inflow speed(=1.456m/s).The UMPPM* computation is performed on a pressure mesh with an average mesh size of 0.05 m. There are four semi-circular grooves in the middle section of the complex flow channel, which will contribute to significant pressure drop of the fluid particles as delineated in Fig. 29. The meandering motion of the fluid particles is quite visible. At such a low Re flow condition, flow separations are hardly found near the boundaries of the semi-circular grooves, except that a visible recirculating flow region can be found behind the last semi-circular groove. The pressure difference between the outlet and the primary flow inlet (bottom opening) during the progress of the simulation is reported in Fig. 30. The time-averaged pressure difference (taken between 2 and 10 s) is ∼304.58 Pa.Next, the current method is used to study the natural convective heat transfer between a concentric annulus as shown in Fig. 31(a). Here,RandLare prescribed as 0.02 and 0.10 m, respectively which translate to parameterrr=L/2R=2.5as defined in  [63]. The temperatures of the inner circular wall and outer square wall are fixed atT1=301.5518KandT2=300K, respectively. Here, the reference temperatureTothat appeared in the buoyancy force term (Eq. (4)) is prescribed asT2. With the Rayleigh number (Ra=ρ2Cpgβ(T1−T2)D13/kμ) of 1×105, a hot rising stream can be seen in the vicinity of the inner hot circular cylinder as shown in Fig. 31(b), (c). The working fluid with the following properties: specific heatCp=1006.3J/kgK, thermal conductivityk=0.02816W/mK, thermal expansion coefficientβ=0.003K−1, dynamic viscosityμ=0.00002Pasis considered. The gravitational acceleration is assumed as−10m/s2.The local heat transfer at the inner circular wall can be computed as:(43)q=h(T1−T2)=−k∂T∂n.Therefore, the local convection coefficienthcan be obtained:(44)h=−k∂T∂n1(T1−T2).During the computation,his computed at each pressure mesh lying adjacent to the inner circular cylinder. The area-weighted averageh̄is then determined and consequently the average Nusselt numberNuavgcan be calculated as:(45)Nuavg=h̄Sk.Here,Sis taken as half of the circumferential length of the inner circular cylinder.The time histories ofNuavgare plotted in Fig. 32. By considering the coarsest pressure mesh resolution(Nm=479), the numerical result obtained from the UMPPM* solution is not encouraging at all, as the predictedNuavgdeviates considerably from the reference solutions as reported in Fig. 32(a). This shortcoming can be partly circumvented by adopting the UMPPM strategy (particle adaptation) as shown in Fig. 32(b), whereby the predictedNuavg(∼4.8) is now coming closer to the reference solutions. As the pressure mesh is refined, the numerical solutions are approaching to the reference solutions. However, the grid-independent UMPPM and UMPPM* solutions are closer to those reported by Shu et al.  [63] and Peng et al.  [64].Finally, the buoyancy-driven flow between the two concentric cylinders is considered. Fig. 33(a) illustrates the schematic diagram of two concentric cylinders with different radius (R1=D1/2=0.02mandR2=0.052m). Similar to Liang et al.  [66], the flow temperature is initialized with a linear temperature profile (see Fig. 33(a)) att=0s. The inner and outer temperatures of the cylindrical walls are prescribed asT1=323.664KandT2=300K, respectively. Again, the reference temperatureTois taken asT2. Here, the fluid is considered as air with specific heatCp=1006.3J/kgK, thermal conductivityk=0.02816W/mK, thermal expansion coefficientβ=0.003K−1and dynamic viscosityμ=0.00002Pas. This translates into the Rayleigh number (Ra=ρ2Cpgβ(T1−T2)D13/kμ) of 97600, which is similar to the experimental condition of Kuehn and Goldstein  [67]. The gravitational acceleration is assumed as−10m/s2.The solutions are executed untilt=20sto ensure a steady-state condition. Again, the computations are executed on a hybrid unstructured pressure mesh environment as shown in Fig. 33(b) for the case ofNm=1916(lavg=2mm). Here, no particle adaptation is activated in the UMPPM* calculation. For this flow case of relatively high Ra, a thermal plume is expected to be seen on top of the inner cylinder as illustrated in Fig. 34. This is consistent with the very recent MPS result presented by Liang et al.  [66]. Fig. 35shows the predicted temperature profiles at various angular positionsψ(its definition can be found in Fig. 33(a)). As seen, the numerical solutions compare well with the experimental data of Kuehn et al.  [67] at various angular positions. While it is clear that the accuracy of the numerical result can be enhanced via pressure mesh refinement as reported in Fig. 35, it is worth to mention here that the solutions of the case employingNm=7536(lavg=1mm) are already grid-independent.

@&#CONCLUSIONS@&#
