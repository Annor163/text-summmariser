@&#MAIN-TITLE@&#
The continuous artificial bee colony algorithm for binary optimization

@&#HIGHLIGHTS@&#
This paper introduces an ABC variant to solve binary optimization problems.The performance of the proposed method is investigated on well-known UFLPs.The proposed method is compared with the ABC variants and PSO variants.The experimental results show that the proposed algorithm is an alternative tool for binary optimization.

@&#KEYPHRASES@&#
Artificial bee colony,Binary optimization,Conversion of continuous values,Uncapacitated facility location problem,

@&#ABSTRACT@&#
Artificial bee colony (ABC) algorithm, one of the swarm intelligence algorithms, has been proposed for continuous optimization, inspired intelligent behaviors of real honey bee colony. For the optimization problems having binary structured solution space, the basic ABC algorithm should be modified because its basic version is proposed for solving continuous optimization problems. In this study, an adapted version of ABC, ABCbinfor short, is proposed for binary optimization. In the proposed model for solving binary optimization problems, despite the fact that artificial agents in the algorithm works on the continuous solution space, the food source position obtained by the artificial agents is converted to binary values, before the objective function specific for the problem is evaluated. The accuracy and performance of the proposed approach have been examined on well-known 15 benchmark instances of uncapacitated facility location problem, and the results obtained by ABCbinare compared with the results of continuous particle swarm optimization (CPSO), binary particle swarm optimization (BPSO), improved binary particle swarm optimization (IBPSO), binary artificial bee colony algorithm (binABC) and discrete artificial bee colony algorithm (DisABC). The performance of ABCbinis also analyzed under the change of control parameter values. The experimental results and comparisons show that proposed ABCbinis an alternative and simple binary optimization tool in terms of solution quality and robustness.

@&#INTRODUCTION@&#
In recent years, many swarm intelligence-based meta-heuristic approaches have been proposed in order to solve NP-hard optimization problems. Artificial bee colony (ABC) algorithm, which is one of them, has been proposed for solving continuous optimization problems, inspired waggle dance and foraging behavior of real honey bee colonies [1]. If the solution space of the problem is binary structured, either working of the method should be adapted to run on the binary solution space by using binary vectors or continuous values in the solution vectors in the method should be transformed to binary values. In this study, by inspiring an approach proposed for particle swarm optimization (PSO) by Güner and Şevkli [2], the continuous values in the solutions produced by ABC have been moved to binary space and the results obtained by the proposed approach named as ABCbinhave been compared with continuous PSO.Since invention of ABC, studies on ABC in the literature have increased significantly. The ABC algorithm was used for designing of digital IRR filters by Karaboga [3], Singh [4] used it for solving leaf-constrained minimum spanning tree problem, Rao et al. [5] proposed ABC for optimization of distribution network configuration for loss reduction. The ABC was implemented to solve quadratic minimum spanning tree problem by Sundar and Singh [6]. While a modified ABC for real parameter optimization was proposed by Akay and Karaboğa [7]; Karaboğa and Akay [8] also modified ABC for solving constrained optimization problems by using Deb's rules [9] and Pan et al. [10] developed a discrete model of ABC for lot-streaming flow shop scheduling problem. The ABC was also used for neural networks training [11], solving reliability redundancy allocation problems [12], software test suite optimization [13]. In addition, Alatas [14] proposed a chaotic ABC algorithm for avoiding to get stuck on local solutions and a Gbest-guided ABC for numerical function optimization was proposed by Zhu and Kwong [15]. DisABC which means discrete ABC algorithm for solving uncapacitated facility location problems (UFLPs) has been also proposed by Kashan et al. [16]. Artificial agents of ABC algorithm is modified to work on binary structured solution space to solve binary optimization problems by using logic operators in [17], and an ABC variant is proposed for binary optimization in [18].According to above applications and modifications of ABC, the algorithm is highly successful for solving optimization problems. But according to best knowledge of the authors, the usage of ABC algorithm that its artificial agents work on continuous solution in this study is first effort for solving a binary optimization problem. The paper is organized as follows; Section 1 presents introduction and a brief literature review about the method, the ABC algorithm is given in Section 2. Conversion of continuous values to binary values is presented in Section 3 and the general model of the UFLP is presented in Section 4. The computational experiments are conducted in Section 5. Finally, conclusion and future works are given in Section 6.In the artificial hive of ABC, there are two types of forager called as employed and unemployed foragers. A new food source is produced for each employed forager in the initialization of the algorithm. Employed foragers move not only nectar foraged from food source but also the position information about food sources to the hive. Onlooker bees which are one of the unemployed foragers try to improve food source positions of employed foragers by considering information moved by employed foragers to the hive. In the algorithm, food sources represent feasible solutions for the optimization problem. The other type of unemployed foragers is scout bee. If a food source could not be improved by the employed or onlooker bees in a certain time (limit), the employed bee assigned to this food source becomes a scout bee. ABC algorithm consists of four phases named as initialization, employed bee, onlooker bee and scout bee, which are sequentially realized. It should be also mentioned that ABC algorithm is an iterative algorithm and half of the population in the hive is employed bee and the other half is onlooker bee and only one scout bee can occur at the each iteration. Phases of the algorithm are expressed as follows [8]:Initialization phase: This phase is realized only one time. The population size is first determined and half of the population consists of employed bee and the other half is onlooker bees. A new food source is produced for each employed bee by using Eq. (1).(1)xi,j=xjmin+λ(xjmax−xjmin)i=1,…,N,j=1,…,Dwhere xi,jis jth dimension of ith employed bee,xjminandxjmaxis lower and upper bounds of jth parameters, respectively, λ is a random number in range of [0,1], N is the number of employed bees and D is the dimensionality of the optimization problem. In addition, the abandonment counter (AC) of each employed bee is reset in this phase. And then, the fitness values of the food sources of the employed bees are calculated as follows:(2)fiti=11+fiif(fi≥0)1+abs(fi)otherwisewhere fitiis the fitness value of food source of ith employed bee, fiis the objective function value specific for the optimization problem of food source of ith the employed bee. In addition, limit value is determined and a counter (abandonment counter-AC) is created and reset for each food source in this phase.Employed bee phase: Each employed bee try to find a new food source in order to improve self-solution by using Eq. (3).(3)vi,j=xi,j+ϕ(xi,j−xk,j)i,k∈{1,2,…,N},j∈{1,2,…,D}andi≠kwherevi,jjth dimension of ith candidate solution, xi,jis jth dimension of ith employed bee, xk,jis jth dimension of kth employed bee, ϕ is a random number in range of [−1,+1], N is the number of employed bee and D is the dimensionality of the optimization problem. Also, the neighbor of candidate solution (k) and dimension of the problem (j) are randomly selected among the employed bee population and between dimensionality of the problem, respectively.The fitness value of the new food source is calculated by using Eq. (2) and if new one is better than old one, the new food source position is memorized by the employed bee and the AC of the food source is reset. Otherwise, AC is increased by 1.Onlooker bee phase: The employed bee share the position information about the self-food source by dancing in the dance area of the hive. The onlooker bees watch the dance and select an employed bee by using the fitness values of the food sources of the employed bees and roulette wheel. The selection probability is calculated as follows:(4)pi=fiti∑j=1Nfitjwhere piis probability of being selected ith employed bee. After the selection, the onlooker bees try to improve the solutions of employed bees by using Eq. (3). If new solution obtained by the onlooker bee is better than the solution of employed bee, the employed bee memorizes the solution of onlooker bee and the AC is reset. Otherwise, AC is increased by 1.Scout bee phase: In this phase, the AC with highest content is fixed and compared with predetermined limit value. If value of the AC with maximum content is higher than the limit, the employed bee of food source belongs to this AC with maximum content becomes a scout bee. A new solution is generated for this scout bee by using Eq. (1) and the AC of the new food source is reset. The scout bee generated new solution for itself returns to instatement (employed bee).The continuous values of the food source position in the ABC algorithm should be converted to the binary values in order to solve the binary optimization problem. Despite the fact that Eq. (5) has been proposed for conversion of continuous values to binary solution in Şevkli and Güner [19], we used a bit modified version (Eq. (6)) of Eq. (5) in order to increase search ability of the ABC algorithm and provide quick change for the binary values in this study.(5)zi=floor(|yimod2|)where yiis the solution vector included continuous values and ziis the binary vector. The continuous value is first divided by 2 and absolute value of the remainder is floored. Therefore, the binary number is obtained. An example is given as follows:zi=floor(|−3.724mod2|)=floor(|−1.724|)=floor(|1.724|)=1According to this conversion, if the absolute value of the remainder is between 0 and 0.9999, the binary number will be 0 and if the absolute value of the remainder is between 1 and 1.9999, the binary number will be 1. When absolute value of the remainder is higher than 0.5, despite the fact that absolute value of the remainder is closer to 1 than 0, it is obtained 0 by Eq. (5). The same manner, when absolute value of the remainder is higher than 1.5, despite the fact that absolute value of the remainder is closer to 2 than 1, it is obtained 1 by Eq. (5). Therefore, we propose round operation instead of floor and double mod process given by Eq. (6).(6)zi=round(|yimod2|)mod2An example of the solving Eq. (6) is presented as follows:zi=round(|−3.724mod2|)mod2=round(|−1.724|)mod2=round(|1.724|)mod2=2mod2=0By using Eq. (6), if the absolute value of remainder is between 0 and 0.4999 or 1.5 and 1.9999, the binary number is obtained as 0. If the absolute value of remainder is between 0.5 and 1.4999, the binary number is obtained as 1.In the ABC algorithm, before the continuous solution vector is evaluated by objective function specific for the problem, it is converted to binary solution vector by using Eq. (6). This is also illustrated in Table 1.After transformation mechanism and ABC algorithm are explained, the adaptation of the mechanism with ABC algorithm is shown in Fig. 1.According to Fig. 1, it is shown that before the objective function specific for the problem, which is objective of UFLP in this study, is evaluated, the continuous solutions should be converted to binary solution. Like the basic ABC algorithm, the proposed approach works on continuous solution space but the binary solutions are used before evaluating the objective function by nature of the problem.A brief description about UFLP is given in this section. The performance and accuracy of the proposed ABCbinalgorithm are tested on UFLP. In the basic formulation, UFLP consists of a set of potential facility sites I where a facility can be opened and has no capacity constraint, and a set of customer location J that must be serviced. The goal (Eq. (7)) is to find a subset F of I facilities that is corresponded demand of customers J. The objective function of this problem is to minimize sum of the shipment costs between F and J and the opening costs of the facilities. The general model of the UFLP can be mathematically expressed as following [20]:(7)f(UFLP)=min∑i∈I∑j∈Jcijxij+∑i∈IfiyiSubject to:(8)∑i∈Ixij=1,j∈J(9)xij≤yi,i∈Iandj∈J(10)xij∈{0,1},i∈Iandj∈J(11)yi∈{0,1},i∈Iwhere I={1,2,…,n} is the set of possible facility locations, J={1,2,…,m} is the set of customer demand points, fiis the fixed cost of opening a facility in i∈I, cijis the shipment cost between ith facility location and jth customer point. The decision variable xijis the demand of customer j corresponded ith facility and yiis the binary variable: yi=1 if a facility is located in i∈I, yi=0 otherwise. While Eq. (8) provides to satisfy all demand of customers, Eq. (9) ensures that a customer can be served from a facility only if a facility is opened. Eqs. (10) and (11) define the decision variables in binary structure. Due to single assignment property of UFLP, demand of a customer is always entirely fulfilled by its nearest facility [21]. When the locations of facilities which will be opened are determined, which customer will be served by a facility can be obtained easily. Therefore, we address a vector A of n variables where each variable in A is bit. Each bit (Ai, i=1,2,…,n) indicates that whether a facility is opened at location i or not. This vector plays a critical role in ABCbinbecause each employed bee represents this vector.UFLP is one of the most important NP-hard problems in location theory [16,22] and many studies are presented on it in the literature. In order to solve UFLPs, many exact methods such as the branch-and-bound [23], linear programming and Lagrangian relaxation [24], dual-based procedure [25] have been proposed. Despite the fact that these methods ensure the optimality, computation time of these methods may be too much. For this reason, some approximate methods have been proposed for solving UFLPs. These methods cannot guarantee to find the optimal solution but can obtain optimum or near optimum solution in a reasonable time. For instance, genetic algorithm [26], tabu search [27,28], continuous and discrete PSO [2,19] have been proposed in order to solve UFLPs. In addition, a comparative study for binABC [17], DisABC [16], discrete binary particle swarm optimization (BPSO) [29], improved BPSO (IBPSO) [30] on solving UFLPs is presented in [17].In order to test performance and accuracy of proposed approach with PSO, 15 UFLPs taken from OR-Lib [31] were used and the problem size and optimum cost for the problems were given in Table 2. The results obtained by ABCbinwere compared with the results of CPSO (continuous PSO) algorithm, taken from Şevkli and Güner [19]. In comparison tables, the better results are written in bold face font type. According to Şevkli and Güner [19], the population size of the method is selected as number of facilities and the upper and lower bound of the continuous solution space are taken as −10 and +10, respectively. c1 cognitive and c2 social components of the PSO are set to 2, the upper and lower bound of velocities for the PSO are taken as −4 and +4, respectively. Inertia weight for the PSO is a random number in the range [0.5,1]. The termination condition of the algorithms is maximum iteration number and it is set as 1000 iterations. Also, the limit value for ABCbinis calculated as follows:(12)limit=N×Dwhere N is the population size and D is the number of potential facility locations. The limit is N square due to equality of N and D. It must be mentioned that if the number of the potential facility location (D) is odd number, the population size of the ABCbinis selected as D−1 in order to avoid odd number for population size of ABCbin, because half of the population of ABCbinconsists of the employed bees and the other half consists of onlooker bees.The methods were repeated 30 times with random seeds and the best, the worst, standard deviations, number of runs yielded to optimum (Hit) and CPU times of the algorithms were reported in the Table 3. The results of CPSO are taken from Şevkli and Güner [19]. In order to make a fair comparison between the algorithms, CPSO algorithm is re-coded on MATLAB with same PC and CPU times are obtained by tic and toc functions of MATLAB. The convergence graph of the ABCbinalgorithm drawn for each problem is presented in Fig. 2.The gap in the graph is used in order to show the accuracy of the method and it is calculated by using Eq. (13). As it is seen from the Fig. 2, the ABCbinhas converged to the optimum or near optimum because global search and exploitation ability of the algorithm is quite good.(13)Gap=f(sol)−f(opt)f(opt)×100where f(opt) is the cost of the optimum solution, f(sol) is the cost of the best solution obtained by ABCbinat each iteration.As seen from Table 3, ABCbinis superior to CPSO in terms of solution quality and also ABCbinalgorithm is more robust than CPSO according to standard deviations. Especially, in respect of CPU time, CPSO consumes more CPU time than ABCbinalgorithm. Finally, it should be mentioned that ABCbinalgorithm is faster than CPSO algorithm, with respect to running time of the algorithms.In order to analyze the behavior of the proposed ABCbin, it has been run with different population sizes. The effect of the population size is tested on four problems that are Cap73, Cap103, Cap133 and CapB to represent of each test problem group. Each of the experiments was repeated 10 times with the limit value=1000. The mean values with different population sizes varying as 10–100 by step 10 have been presented in Table 4and shown in Figs. 3 and 4.From Table 4 and Figs. 3 and 4, it can be concluded that as the population size increases, as expected the algorithm produces better results. For the Cap73, optimal value is obtained in all population sizes. For the Cap103, after the population size is 50, algorithm can find the optimal value. However, optimal values are not achieved in each different population size for the test problems Cap133 and B.Finally, increasing the population size from 10 to 100 does not make any sense on optimal convergence of Cap73 and increases the convergence to optimal of Cap103, 133 and B 0.024%, 0.11% and 1.43%, respectively. In the frame of effect of population size on the test problems, the population size that is greater the 50 can provide an acceptable and effective convergence speed for search.As mentioned in Section 2, the scout bee production is controlled by the control parameter limit in the ABC algorithm. According to Karaboğa and Baştürk [28], there is an inverse proportionality between the value of limit and the scout bee production frequency. As the value of limit approaches to infinity, the total number of the scout bees produced goes to zero. The limit value used in this paper is equaled to N×D, where, N is the population size and D is the number of potential facility locations. The limit is N square due to equality of N and D. In order to show the effects of changing the limit value, in other words, to show the effect of the scout bee production on the performance of the ABCbin, the mean values for the test problems Cap73, 103, 133 and B are obtained for the different limit values (N×D/4; N×D/2; N×D; N×D×2; N×D×4) and the results are given in Table 5and Figs. 5 and 6.As seen from Table 5 and Figs. 5 and 6, for all test problems, when the scout bee production frequency is very high (N×D/4) or close to zero (N×D/4), the results obtained by the proposed ABCbinare get worse that the moderate value for limit value is N×D/2. The results that are nearest to optimal values are obtained when the limit value is equaled to N×D/2.This results show that the global search ability of the proposed method is as important as local search ability of the method. And also it shows that scout bee production should not be neglected for this kind of problems.In addition to the analyses of the effects of changing population sizes and limit values on the performance of the ABCbin, in this section, simultaneous analyses of these two decisive parameters is investigated. For that reason, the population size is increased from 10 to 100 step by 10 while the limit value is equaled to N×D. Therefore, while the population size is increased, the limit value will be updated dynamically. With mentioned parameter application, the mean values for the test problems Cap73, 103, 133 and B are obtained and the results are given in Table 6and Figs. 7 and 8.As seen from Table 6 and Figs. 7 and 8, optimal values are obtained for the test problem Cap73 in each population size and limit value. Increasing the population size and accordingly the limit value (N×D) also increases the optimal convergence of test problems Cap103, 133 and B. As expected, increasing the number of population size and limit value at the same time results in increasing the chance of getting the optimal solution by the proposed algorithm. Almost for all problems, choosing a greater number of population size, results in improving the quality of solutions obtained by ABCbin.In order to validate performance of the proposed algorithm, the performance of the proposed approach is compared with the some binary versions of PSO and ABC algorithms. The DisABC [16] and binABC [17] algorithms are binary structured methods and they work on the binary solution space. BPSO [29] is the discrete binary version of classic PSO algorithm. IBPSO [30] is a variant of BPSO but the particles of IBPSO works on binary structured solution space. While DisABC uses similarity-based search on the solution space, the binABC and IBPSO uses logic operator for producing candidate solutions.For comparison of ABCbinand BPSO, IBPSO, binABC and DisABC, the results of these methods on the test problems are taken directly from [17]. The control parameter setting of the methods are summarized in Table 7, and the comparative results are given in Table 8. Based on Table 8, it is shown that the proposed method produces competitive results for the binary test problems like binABC and DisABC algorithms.

@&#CONCLUSIONS@&#
