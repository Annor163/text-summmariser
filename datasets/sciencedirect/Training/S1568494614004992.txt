@&#MAIN-TITLE@&#
An improved constrained differential evolution algorithm for unmanned aerial vehicle global route planning

@&#HIGHLIGHTS@&#
The global route planning problem for unmanned aerial vehicle (UAV) is formulated as a constrained optimization problem with multiple threats and terrain obstacles taking into account.An improved constrained differential evolution (DE) algorithm, which combines DE algorithm with the level comparison method, is proposed to find the optimal route in feasible regions.Numerical experimental in two-dimensional and three-dimensional scenarios are carried out. The effectiveness and robustness of the improved algorithm are demonstrated by comparing its performance with the original DELC algorithm and other numerous bio-inspired algorithms.

@&#KEYPHRASES@&#
Unmanned aerial vehicles (UAVs),Global route planning,Differential evolution (DE),Constrained optimization,

@&#ABSTRACT@&#
This paper formulates the global route planning problem for the unmanned aerial vehicles (UAVs) as a constrained optimization problem in the three-dimensional environment and proposes an improved constrained differential evolution (DE) algorithm to generate an optimal feasible route. The flight route is designed to have a short length and a low flight altitude. The multiple constraints based on the realistic scenarios are taken into account, including maximum turning angle, maximum climbing/gliding slope, terrain, forbidden flying areas, map and threat area constraints. The proposed DE-based route planning algorithm combines the standard DE with the level comparison method and an improved strategy is proposed to control the satisfactory level. To show the high performance of the proposed method, we compare the proposed algorithm with six existing constrained optimization algorithms and five penalty function based methods. Numerical experiments in two test cases are carried out. Our proposed algorithm demonstrates a good performance in terms of the solution quality, robustness, and the constraint-handling ability.

@&#INTRODUCTION@&#
Unmanned aerial vehicles (UAVs) can greatly increase the capability of high-risk targets penetration, suppressing enemy air defense, deep target attacking and dominating the battle space. Route planning and optimization is one of the most important problems in the autonomous navigation process of UAVs [1,2]. It allows the UAV to autonomously compute the best path from a start point to an end point [3]. For both the civil and military tasks of the UAV, the route planning is often formulated as an optimization problem, where the feasibility of the candidate route depends on the mission, environment and UAV physical constraints. Meanwhile, the optimality of the candidate route is evaluated according to the planning criteria, such as minimal path length or destruction risk [4]. Previous research has proposed series of algorithms to solve the UAV route planning problem, for example, the graph-based methods, such as the Voronoi diagram search method [5]; the grid-based methods, such as the mathematical programming methods, the A* searching algorithm [6] and the bi-level programming based method [7]; the nature inspired methods, such as the artificial physics algorithm [8] and the evolutionary computation technique [9–11]; and other methods, such as optimal control based methods [12] and sampling based methods.The global and integrative optimization of the flight route is important content of the modern flight vehicle design, which can be in favor of improving flight qualities to meet the technical requirements for all determined missions [13]. It has been proven that finding the optimal route is an NP-hard problem, and the problem complexity increases very quickly as the size of the problem grows. To reduce the complexity, many researchers have applied the population-based algorithms to solve the route planning problem, including genetic algorithm (GA) [3–5], particle swarm optimization (PSO) [14,15], ant colony optimization (ACO) [16–18], artificial bee colony (ABC) [19], differential evolution (DE) [20–22], gravitational search algorithm (GSA) [23], intelligent water drops optimization (IWD) [24], and memetic computing method [25]. Zheng et al. [9] adopted the evolutionary computation to design a real-time route planner for UAV. Besada-Portas et al. [4,10] presented a UAV path planner based on evolutionary algorithms for realistic scenarios. The planner can return the paths that fulfill and optimize the multiple criteria, with the properties of real UAVs, terrains, radars, and missiles taken into consideration. Roberge et al. [3] compared the performance of GA and PSO in computing feasible and quasi-optimal paths for fixed wing UAVs in a complex 3D environment, and a multiobjective cost function is developed to evaluate the characteristics of the optimal path. Moreover, by using a parallel implementation on standard multicore CPUs, they drew the conclusion that real-time path planning for UAVs is possible. Fu et al. [14] proposed the phase angle-encoded and quantum-behaved particle swarm optimization (θ-QPSO) to generate a safe and flyable path for the UAV in the presence of different threat environments.Recently, differential evolution (DE) [26] has been successfully applied in many research and application areas. The recent two reviews on DE can be seen in [27] and [28]. Compared with many other population-based algorithms, DE is much simpler and straightforward to implement, which only takes several lines to code the core part of the algorithm in any programming language [28]. Despite its simplicity, DE exhibits the outstanding performance on a wide variety of problems including unimodal, multimodal, separable, non-separable and so on, and many modified versions of DE has been proposed for both unconstrained and constrained optimization problems [27–29]. Several existing researches have studied the application of the DE to the UAV route planning problem. Brintaki et al. [20] adopted the DE algorithm to design a 2D offline path planner for multi-UAVs coordinated navigation in known static maritime environments. Zhou et al. [21] presented a three-dimensional (3-D) trajectory planning algorithm for UAV based on an improved DE algorithm. Moreover, considering that the route planning problem is truly a multi-objective optimization problem in which conflicting goals of minimizing the length of the route and maximizing the margin of safety can be simultaneously important, Mittal et al. [22] used a hybrid multi-objective evolutionary algorithm to optimize the flight distance and risk factor simultaneously, and thus generated a set of Pareto-optimal routes. However, the majority of existing studies mainly employs the penalty function based methods to handle the constraints and cannot always achieve the feasible route during every computation. Different from these existing works, we formulate the UAV route planning as the constrained single objective optimization problem in the 3-D environment, and generate the feasible route by using a variant of constrained DE algorithm.During the last few years, several DE-based methods were proposed for the constrained optimization problems [30–38]. These methods adopt various constraint-handling strategies and can be grouped into the following categories [30]: (1) methods based on preserving feasibility of solutions, (2) methods based on penalty functions, (3) methods, which make a clear distinction between feasible and infeasible solutions, and (4) other hybrid methods. Inspired by the fuzzy control theory, Takahana et al. [35,38] proposed the α constrained method and the ɛ constrained differential evolution algorithm (ɛDE). Due to the excellent performance of DE on unconstrained optimization problems and the superior constraint-handling ability of α constrained method, Wang et al. [31,32] designed a hybrid DE algorithm with level comparison (DELC) for the constrained optimization by incorporating the α constrained method into DE. In this paper, a novel UAV route planning method is proposed by combining the DE algorithm and an improved level comparison strategy. Our proposed route planning algorithm is easy to implement and numerical experiments demonstrate its effectiveness, efficiency and robustness.The rest of this paper is organized as follows. Section 2 describes the UAV route planning problem, including the route representation, the objective function and multiple constraints in the realistic scenarios. In Section 3, the improved DE algorithm is described in detail, and a detailed implementation procedure to solve the route planning problem is also presented. Experiments and comparisons with some existing constrained algorithms are provided in Section 4. Further discussion and comparisons are presented in Section 5, including the influence of some parameters as well as the comparison with the penalty function based methods and other DE variants. Finally, Section 6 concludes with a brief summary of this paper.As to the problem of UAV global route planning considered in this paper, we assume that the flight environment is fixed and all obstacles and threat areas are known a priori. The mission of the UAV is to fly through a high-threat region as safely as possible, and meanwhile, with the least time consumption.In the global earth-surface inertial reference frame Sg-OXYZ, which puts the origin of coordinates O on a certain point on the ground and uses three orthogonal directions as the X, Y, Z axes, where the X, Y axes are in the horizontal plane and the Z axe is in the vertical direction, the labelsS:(xS,yS,zS)TandT:(xT,yT,zT)Tidentify the starting and target points, respectively, as is shown in Fig. 1, and various danger zones, forbidden flying areas and terrain obstacles exist in the mission region. The offline route planning is to generate a short and safe route from S to T, while satisfying the constraints. The UAV route can be described by a point set consisting of N waypoints besides S and T asPUAV={S,p1,p2,⋯,pN,T}, which can be determined by n control pointswk:(xk,yk,zk)Tand a predefined trajectory smooth strategy. It plays a key role of the route parameterization in the global route planning problem. Bezier curves have been widely adopted when computing smooth, dynamically feasible trajectories for the UAV [4,10,11,14,15]. Employing Bezier curve, the route can be represented using a relatively smaller number of parameters than using a complete geometric description of the route. However, the construction of Bezier curves needs all the coordinates of the corresponding control points, including horizontal ordinates and vertical coordinates.In order to reduce the dimension of the problem, a new rotated coordinate frame Sr-SXrYrZr shown in Fig. 1 is established usingST¯as the new X-axis [19,19,21]. Given the straight distance from S to T is L, coordinates of the points S and T are(0,0,zS)Tand(0,L,zT)Tin the coordinate frame Sr-SXrYrZr. The coordinate transformation between the two reference systems is performed according to:(1)xyz=cosθ−sinθ0−sinθcosθ0001⋅xryrzr+xSyS0where (x, y, z)T and (xr, yr, zr)T are coordinates of the same point in the original global reference frame and the rotated frame, respectively, and the angle θ is measured counterclockwise from the positive OX axis. DivideST¯into (n+1) equal parts with the length of Δl by n vertical lines, denoted as l1, l2,…,ln, whereΔl=||ST¯||/(n+1). Thus, the point in the vertical line lk,k=1,2,…,n, has the same horizontal coordinatexkr=kΔlin the coordinate frame Sr-SXrYrZr. If the control waypoint wkis located on the vertical line lk, its location can be uniquely determined by the vertical coordinatesykrin the coordinate frame Sr-SXrYrZr. Therefore, the UAV route can be determined by the 2n-dimensional vector[y1r,y2r,…,ynr,z1r,z2r,…,znr], which can greatly reduce the computational cost.In order to make the search process more efficient, we constrain the route search space between the start and target points as shown in Fig. 2, where two dash lines limit the upper and lower bounds. The search bounds are determined by extending outward a certain distance Δd of the points that have the maximum distance from the lineST¯, in addition, it should also take into account the special condition that all threat areas are distributed on one side of the lineST¯as shown in Fig. 2(b). Based on the rotated coordinate frame Sr-SXrYrZr, the vertical coordinate of each waypoint is restricted in[Smin,Smax], of which the maximum and minimum bounds are computed as follows:(2)Smin=min{minj{ythreatjr−Rj},0}−ΔdSmax=max{maxj{ythreatjr+Rj},0}+Δdwhereythreatjris the vertical coordinate of jth threat and Rjis the radius of its threat range.To ensure the generated route smooth and flyable, we adopt a class of dynamically feasible trajectory smooth strategy [39] to make the curvature continuous. As is shown in Fig. 3, consider the sub-route defined by three control points wi−1, wiand wi+1, and letq→ibe the unit vector in the direction from wi−1 to wi, andq→i+1be the unit vector in the direction from wito wi+1, as follows:(3)q→i=(wi−wi−1)||wi−wi−1||q→i+1=(wi+1−wi)||wi+1−wi||Let φ represent the angle betweenq→iandq→i+1, andφ=arccos(−q→i+1⋅q→i). Meanwhile, letC⌢be a circular arc with the radius(4)R=0.5min{||wi−wi−1||,||wi+1−wi||}tanφ2where the center Cilies on the bisector of the angle formed by the three control points, given by(5)Ci=wi+Rtanφ/2(q→i+1−q→i)||q→i+1−q→i||The circular arc intersects the two lineswi−1wi¯andwiwi+1¯, and the original routewi−1wi¯+wiwi+1¯can be replaced byA′A¯+C⌢+BB′¯. Using this strategy, the routes produced are composed of line segments and circular arcs and can be smoothed for feasible flying. As is shown in Fig. 3, the endpoints and the midpoints of each line segment together with the four equal diversion points of each circular arc make up the smoothed route for UAVs.Compared with Bezier curves, the route representation method is more simple and easier to implement. One limitation of this method is that the route must be monotone along the X-axis, which means the UAV cannot fly around obstacles through moving backward. However, for an amount of realistic scenarios, the UAV absolutely can bypass obstacles without flying backward.The objective function that evaluates a candidate route should take account of the cost of the route and the performance and mission constraints, which is expressed as follows:(6)minJ=JL+JHs.t.gi≤0,i=1,2,3,4hj=0,j=1,2,3.where JLand JHrepresent the cost functions that are introduced to evaluate the performance of the candidate routes in terms of flight length and altitude, respectively. The inequality constraints gi, i=1, 2, 3, 4 require the candidate routes to satisfy the maximum turning angle, the climbing/gliding slope and the terrain constraints, while the equality constraints hj, j=1, 2, 3 can avoid the UAV flying inside the threaten and forbidden flying areas, and outside the map range.Assume that the UAV route is represented by a collection of discrete waypoints{p0,p1,p2,…,pN,pN+1}and the coordinate of pkis(xk,yk,zk), where the first and last waypoints are the given start and target points, respectively, and thus the cost functions and constraints of the UAV route are presented as follows:(1) Length costThe cost function JLis the length of the UAV route, which is defined to provide the shorter route and calculated with the following expression:(7)JL=∑k=0Nlkwithlk=(xi+1−xi)2+(yi+1−yi)2+(zi+1−zi)2(2) Flight altitude costWhen flying at low altitude, the UAV can benefit from the terrain mask effect, which will help itself to avoid unknown radars [4]. Therefore, the cost function JHintegrates the flight altitude along the route to make the UAV tend to search the low-altitude routes, which is calculated as follows:(8)JH=∫PUAVHpdlwithHp=0,ifzk<0zp,otherwisewhere zpis the altitude of the route at the waypoint p.(3) Turning angle constraintIn order to obtain the smoother routes, the maximum turning angleφkmaxis introduced at each waypoint pk, which depends on the maximum lateral overload nmax and the flight velocity V, given as(9)φkmax=nmaxgV⋅(xk+1−xk)2+(yk+1−yk)2where g is the gravitational acceleration. The turning angle constraint function g1 is the maximum value that the turning angle violates its upper bound, which is written as(10)g1=max(φk−φkmax)≤0for all k in 1,2,…,N, where φkdenotes the turning angle of the path at the waypoint pk.(4) Climbing/gliding constraintThe UAV slope skat the waypoint pkis constrained by the maximum climbing slope αkand the minimum gliding slope βk, which both depend on the altitude. The constraint functions g2 and g3 can be calculated as follows [10](11)g2=max(sk−αk)≤0(12)g3=max(βk−sk)≤0for all k in 1,2,…,N, where(13)αk=−1.5377×10−10zk2−2.6997×10−5zk+0.4211(14)βk=2.5063×10−9zk2−6.3014×10−6zk−0.3257(15)sk=zk+1−zk(xk+1−xk)2+(yk+1−yk)2(5) Terrain constraintThe minimum altitude of the UAV route above the ground should be larger than a predefined safe flight height. The terrain constraint function g4 is written as(16)g4=Hsafe−min(zk−Hter(xk,yk))≤0for all k n 1,2,…,N, where Hsafe denotes the minimal safe flight height, andHter(xk,yk)is the height of the ground at (xk, yk).(6) Forbidden flying area constraintThe constraint function h1 is introduced to avoid the UAV getting into the user-defined forbidden flying areas (i.e., NFZs) [10], such as high-risk zones, harsh climate zones, unknown zones, large buildings [40] and so on. The UAV route must satisfy the following equality constraint:(17)h1=LInNFZ=0whereLInNFZis the length of the UAV route that is inside the NFZs.(7) Map constraintIn order to limit the UAV to completely fly within the map range, the constraint function h2 is introduced as follows:(18)h2=LOutMap=0whereLOutMapdenotes the length of the UAV route that is outside the map.(8) Threat area constraintThe threat area constraint h3 is designed to avoid the UAV flying into scopes of the ground radars and weapons. The threat function depends on the length and the threat probability of each route segment, given as(19)h3=∑k=0Nlk⋅∑j=1nTPj,k=0where Pj,kis the threat probability from the jth threat at the midpoint on the path segment pkpk+1. In this paper, three kinds of ground weapon units are considered, i.e., radars, missiles, and anti-air guns, and the corresponding probability-of-detection and probability-of-kill functions are calculated as follows.(1) RadarThe probability of radar detection PRdepends on the radar cross-section RCS of the UAV and the distance d between the UAV and the radar [10], which is calculated with the following expression:(20)PR=0ifd>RRmax11+ς2(d4/RCS)ς1otherwisewhere ζ2 and ζ2 are the inherent parameters of the radar, RR max denotes the maximum detection distance. RCS depends on the orientation of the UAV with respect to the radar and can be calculated as follows:(21)RCS=πa2b2c2(aαzβϕ)2+(bαzαϕ)2+(cβz)2withαz=sinψe,βz=cosψe,αϕ=sinϕe,βϕ=cosϕe, where ψeis the angle between the velocity vector of the UAV and the segment that joins the UAV and radar positions, andϕe=ϕ−arctan(tanθ/sinψ)with ϕ, θ and ψ denote the roll, elevation and azimuth between the positions of the UAV and the radar.(2) MissileNeglecting the influence of the altitude of the UAV, the simplified kill model of ground antiaircraft missile is utilized in this paper. Let RM max be the maximum hit radius of antiaircraft missile at a certain height and d be the distance between UAV and the missile center, the probability-of-kill PMcan be expressed by(22)PM=0d>RMmaxRMmax4d4+RMmax4d≤RMmax(3) Anti-aircraft gunThe probability-of-kill PGof the anti-aircraft gun is expressed by(23)PG=1d<RG1/dRG≤d≤RGmax0otherwisewhere RGand RG max denote the effective and maximum hit radius, respectively, and d is the distance between the UAV and the anti-aircraft gun.The DE algorithm is a population-based stochastic parallel direct search method originally applied to unconstrained problem, and it operates through three computational steps, namely mutation, crossover and selection. According to its original definition by Storn and Price [26], the general structure of DE algorithm can be described in Algorithm 1.Algorithm 1Standard DE algorithmSet the generation counter t=0/*Initialization*/ generate Mpop individualsxitof the initial population randomly and evaluate every individualswhile termination criteria are not satisfied dogeneration counter t=t+1fori=1: Mpopdo/*Mutation*/ generate the donor vectorvitusing different individuals randomly selected/*Crossover*/ generate the trial vectoruitthrough the random crossover scheme/*Selection*/ evaluateuitand perform greedy selectionend forend whileSuppose the objective function to be minimized is f(x),x=[x1,…,xD]∈ℜDand the optimization search space is defined by lower and upper bound values, i.e.,xmin=[x1,min,…,xD,min],and,xmax=[x1,max,…,xD,max]and. In the computation process, each individual can be symbolized byxit=[xi,1t,…,xi,Dt], fori=1,2,…,Mpop, wheret=0,1,…,Gmaxdenotes the current generation and Gmax is the maximum number of generation.At generation t=0, the initialization is implemented by using a random number distribution to generate the potential individuals in the optimization search space according to(24)xi,j0=xj,min+rj⋅(xj,max−xj,min)where rjis a uniformly random number in [0,1].For each target vectorxit, the mutation operation is performed as follows:(25)vit=xr1t+F⋅(xr2t−xr3t)wherevit=[vi,1t,…,vi,Dt]is known as donor vector. r1, r2 and r3 are randomly chosen indices from the population whiler1≠r2≠r3≠i, and F is a real positive parameter, called mutation or scale factor[38]. This scheme, named DE/rand/1, is the most widely used and simplest DE variant, which uses one difference as perturbation of the base vector. Other DE variants of the mutation rule have been subsequently proposed [27,28], which are summarized as:(1)DE/rand/2:vit=xr1t+λ⋅(xr2t−xr3t)+F⋅(xr4t−xr5t)DE/best/1:vit=xbestt+F⋅(xr1t−xr2t)DE/best/2vit=xbestt+F⋅(xr1t−xr2t)+F⋅(xr3t−xr4t)DE/current-to-best/2:vit=xit+F⋅(xbestt−xit)+F⋅(xr2t−xr3t)DE/rand-to-best/2vit=xr1t+F⋅(xbestt−xr2t)+F⋅(xr3t−xr4t)DE/current-to-rand/2vit=xit+F⋅(xr1t−xit)+F⋅(xr2t−xr3t)Then, the crossover operation constructs the trial vectoruit=[ui,1t,…,ui,Dt]by mixing the components of the target and donor vectors according to:(26)ui,jt=vi,jtifrj≤crorj=rnxi,jtotherwisewhere rjdenotes a random value generated for each j in accordance with a uniform distribution over [0,1], cr is the crossover rate between 0 and 1, rn is a randomly selected index from {1, 2,…,D}, which ensures that at least one component is taken from the donor vector.Finally, DE compares the objective function values of the targetxitand trialuitindividuals. If the new trial individual yields an equal or lower value of the objective function, it is accepted for the next generation; otherwise the target is retained in the population. The greedy selection operator can be described:(27)xt+1=utiff(ut)≤f(xt)xtiff(ut)>f(xt)The α level comparison based constraint-handling technique introduces the α satisfaction level for the constraints to indicate how well the search solutions satisfy the constraints [35]. The constrained problem can be converted to the unconstrained problem by comparing the solutions based on a predefined satisfaction level.A general objective constrained optimization problem can be described as follows:(28)minxf(x)s.t.gi(x)≤0,i=1,2,…,nhj(x)=0,j=1,2,…,pwherex=[x1,x2,…,xD]is a D-dimensional vector of the decision variable, f(x) is an objective function,gi(x)≤0andhj(x)=0denote the inequality and equality constraints. The satisfaction levelμ(x)is defined in the following function:(29)μ(x)=1ifgi(x)≤0andhj(x)=0foralli,j0≤μ(x)≤1otherwiseObviously, the solution with satisfaction level less than 1 is not feasible. Each constraint in (28) can be transformed into one of the satisfaction levels defined by piecewise linear functions on giand hjas follows:(30)μgi(x)=1ifgi(x)≤01−gi(x)biif0≤gi(x)≤bi0otherwise(31)μhj(x)=1−hj(x)bjifhj(x)≤bj0otherwisewhere biand bjare two positive fixed numbers.The satisfaction level of the solution is obtained by combining the satisfaction levels of all constraints according to:(32)μ(x)=mini,j{μgi(x),μhj(x)}Note that the constraint satisfaction level depends on parameters bi(i=1, 2,…n) and bj(j=1, 2,…,p). The proper setting of the two parameters depends on the special problems. In this paper, the median values of the constraint violations in the initial population are employed, because the median values of the random initialization can show suitable magnitudes of constraint violation [31].The α level comparison is introduced to describe the order relation on the set of solution. In order to emphasize the feasibility, the α level comparison is defined by a lexicographic order in which the comparison between two solutions will give priority to μ(x) instead of f(x).Suppose that f1, f2 and μ1, μ2 are the function values and the satisfaction levels of x1 and x2, respectively. For any α∈[0,1], the α level comparison ≤αand <αbetween (f1, μ1) and (f2, μ2) are defined as follows:(33)(f1,μ1)≤α(f2,μ2)⇔f1≤f2ifμ1,μ2≥αf1≤f2ifμ1=μ2μ1≥μ2otherwise(34)(f1,μ1)<α(f2,μ2)⇔f1<f2ifμ1,μ2≥αf1<f2ifμ1=μ2μ1>μ2otherwiseAccording to the α level comparison, only if two solutions both have higher satisfaction level than the predefined value or they have the same satisfaction level, the comparison between them will be performed based on the objective function value. Obviously, the α level comparison is equivalent to ordinal comparison of objective function value when α=0, while the satisfaction level μ(x) will completely replace the function value f(x) during comparison in the case of α=1.According to the α constrained method, the ordinary comparisons are replaced by the α level comparison, and thus, the general constrained minimization problem is transformed to:(35)minαf(x)where minαdenotes the minimization based on the α level comparison ≤αor <α.The DELC algorithm has the similar procedure as the standard DE [30,31], in which the random population initialization, the differential mutation and crossover operators are the same as those of the standard DE without any modification. However, the selection operator of DELC is based on the α level comparison to handle constraints as follows:(36)xt+1=utiff(ut)≤αf(xt)xtiff(ut)>αf(xt)In many cases, the α level does not need to be controlled and many constrained problems can be solved when the α level is constantly 1 [38]. However, to obtain high quality solutions when the feasible region is very small, it should utilize the information of the infeasible solutions at earlier searching stage, and stress feasibility at later searching stage simultaneously [31]. For this consideration, the α value of is dynamically updated as follows:(37)αt=μ0t=0(1−β)⋅αt−1+βt<Gmax/21t≥Gmax/2where β is used to control the increasing rate of α. μ0 is set as the average value of the maximum and the median of the satisfaction levels in the initial population [31], and it is limited to 0.1 in order to pay more attention to the infeasible region at the beginning of the search process.This section discusses the application of DELC to the route planning in details. The route planning problem described in Section 2 is modeled as a constrained optimization problem with four inequality constraints and three equality constraints. According to Eqs. (30) and (31) as well as the definitions of the constraints in Section 2.2,μgi(PUAV)andμhj(PUAV)can be calculated to describe whether the UAV candidate route PUAV meets the inequality and equality constraints or not. Thus, the UAV candidate route's satisfaction level μ(PUAV) is obtained by using Eq. (32). The flowchart of the DELC-based UAV route planner is shown in Fig. 4.In this section, the improvement strategy is presented to improve the performance of the original DELC algorithm in solving the constrained route planning problem.As noted previously, the α level is constantly 1 and does not need to be controlled. But for those problems in which the feasible region is very small, such as the problem with several strong equality constraints, the α level should be controlled properly to obtain high quality solutions. In Takahama et al.’s [38] and Wang et al.’s [31] works, they designed the α level control method shown in Eq. (37). Fig. 5shows the change curves between the α value and the computing iteration under different β values. When β is large, the α level comparison strategy makes the search region decrease rapidly, which leads to the bad quality of the solutions. When β is small, the algorithm escapes the infeasible region slowly and also fails to find the optimal solution.Although the algorithm can control the curve shape of the α value via changing β value to solve different problems, it is still not satisfactory to solve the large dimensional problems with strong equality constraints. The α value determined by Eq. (37) increases too rapidly, at the earlier searching stage, to make full use of the information in the infeasible domain. Especially for the problems with a large number of variables and small feasible region, forcing the solution to jump out of the infeasible domain prematurely cannot help to solve the problem effectively.In this paper, we design a modified strategy to update the α value by using the sigmoid function (see Fig. 6). The α value is dynamically updated as follows:(38)αt=11+exp(4−ε⋅t/Gmax)t<Gmax/21t≥Gmax/2where the parameter ɛ is introduced to control the increasing rate of α. With the different values of ɛ, the changing curves of the α value are illustrated in Fig. 7. Compared with Fig. 5, the α update function here is S-shaped and the α value increases slowly at earlier searching stage. Thus, the population can avoid the prematurity and have adequate time to escape from the infeasible regions.The detailed implementation procedure of our proposed improved algorithm, which is referred to as mDELC to distinguish from the original DELC, to the UAV route planning is illustrated in Algorithm 2.Algorithm 2The mDELC algorithm for solving the UAV route planning problem (DE/rand/1)/*Mission*/ Mission information: start and target points (xS, yS)T, (xT,yT)T, performance parameters of the UAV, and the number of the control points n;Threat area information: threat types (including radar, missile and anti-aircraft gun), threat centers (xthreat j, ythreat j)T and the maximum radius Rj;NFZ information: the vertices of the polygonal NFZs./*Modeling*/ (1) Establish the rotated coordinate frame Sr-SXrYrZr;(2) Determine the upper and low bounds Smax, Smin;(3) Compute horizontal coordinate for each control point xrk=kΔl, whereΔl=||ST||/(n+1)and n is the number of control point required;/*Input for mDELC*/ Maximum number of generation Gmax, the population size Mpop, the scale factor F, the crossover rate cr, and the parameter ɛ./*Initialization*/ Set the generation number t=0 and random initialize Mpop individualsxit=[xi,1t,…,xi,Dt]where D=2n and each element uniformly distributed in the range [Smin, Smax] with i=1, 2,…,Mpop./*Evaluation*/ Route generation: Generate the control point sequence{Sr,w1r,…wnr,wr}for eachxitin the coordinate frame Sr-SXrYrZr, where Sr=[0,0, zS]T, Tr=[0,∥ST∥, zT]T,pkr=[kΔl,xi,kt,xi,n+kt]Twith k=1,2,…,n; transform the point sequence into the inertial reference frame Sg-OXYZ, and then, generate the smooth trajectoryPUAV,i={S,p1,p2,…,pN,T};Satisfaction level computation: Compute the cost and constraints of each candidate route, and then compute its satisfaction level μ(PUAV,i)./*Iteration computation*/whilet≤GmaxdoGeneration counter t=t+1 and update the value of αtby usingαt=11+exp(4−ε⋅t/Gmax)t<Gmax/21t≥Gmax/2.fori=1:Mpop/*Mutation*/ Choose r1, r2, r3 from [1,2,…,Mpop] s.t. r1≠r2≠r3≠i, and generate the donor vectorvitviavit=xr1t+F⋅(xr2t−xr3t).forj=1:Dif(vi,jt>Smaxorvi,jt<Smin)thenvi,jt=Smin+rj⋅(Smax−Smin).end for/*Crossover*/ Generate the trial vectoruit=[ui,1t,…,ui,Dt]according toui,jt=vi,jtifrj≤crorj=rnxi,jtotherwise./*α-Selection*/ Evaluation the trial vectoruit, compute the satisfaction level μ(uti), and choosexit+1fromxitanduitaccording toxit+1=uitif(JL(uit),μ(uit))≤α(JL(xit),μ(xit))xitotherwiseend forend while/*Output*/ Decode and output the best route for UAVTo assess the performance of the mDELC algorithm to solve the constrained route planning problem, series of experiments are conducted. Each algorithm is executed 50 times independently and the statistical results are used for evaluation and comparison. Performance parameters of the UAV are set as: the maximum flight altitude Hmax=3km, the minimum safety flight altitude Hsafe=50m, the maximum lateral overload nmax=5g, and the flight velocity V=200m/s. The number of control points is n=10, and Δd=20km. The UAV mission region is 1000km long and 1000km wide with several known threat areas and NFZs. Two test cases are designed to compare the performance of the proposed mDELC with the original DELC [31] and other state-of-the-art constrained versions of the population-based algorithms, including the constrained partial swarm optimization (CPSO) [42], the ɛ constrained differential evolution (ɛDE) [35] and two versions of the self-adaptive differential evolution, namely SaDE [37] and jDE-2 [34]. Because the PSO and DE are the two representative optimization algorithms with strong search ability, we mainly choose the PSO and DE based variants to make the comparison. The information of the two test cases is presented in Table 1. For the anti-aircraft guns, missiles and radars, the information contains the threat center and the radius. For the NFZs, the information is the coordinates of all vertices. Both the two test cases fulfill the hypothesis that there exist feasible routes with the monotonous increasingxkrvalues in the straight line that joins the start and end point.The main parameters of the mDELC are set as follows: cr=0.9, mutation factor F is uniformly distributed in [0.2,0.9] [31], the population size Mpop=50, the maximum iteration Gmax=400, and the control parameter ɛ=10. To make a fair comparison, the same population size and the maximum iteration number are both used for all the algorithms. Other parameters of these tested algorithms are set according to the original literature: for DELC [31], F is set as a random value in [0.2, 0.9], cr=0.9, β=0.01; for CPSO [42], c0=0.9, and c1=c2=0.8; for jDE-2 [34], Fu=0.9, FI=0.1, τ1=τ2=0.1, k=15, l=40; for SaDE [37], F takes random values in the range (0, 2] with normal distributions of mean 0.5 and standard deviation 0.3, and the learning period is 20; for ɛDE [35], cp=5, F=0.7, cr=0.9, Pg=0.01, and Rg=3.Fig. 8shows the best UAV routes of Case I generated by the above six constrained algorithms during 50 independent runs. Part (a) of these figures displays the 3-D view of UAV routes in the digital terrain, where the cylinders represent the threat areas of missiles, radars and anti-aircraft guns, and the cubes represent the NFZs. Part (b) shows the 2-D view of (a) in the contour map, where the danger zones are labeled. Parts (c)–(h) are the corresponding vertical profiles of the six UAV routes in (a), where the X-axis is the length of the route and the Y-axis is the altitude of the corresponding waypoints. During 50 runs, all the six optimization algorithms with the customized constraint-handling strategies can successfully produce the feasible routes that avoid all danger zones. However, the route obtained by mDELC has the smallest length. The best cost value J of the route generated by mDELC is 1441.8, which is much smaller than those of other five algorithms.The statistical results of mDELC, DELC, CPSO, ɛDE, jDE-2 and SaDE during 50 runs on Case I are listed in Table 2, where the best, median, mean, worst and standard deviation of the cost value are recorded. The best results are marked with boldface in Tables 2–5. The better values are highlighted using boldface. The last column FR denotes the feasible rate of the 50 runs that find the feasible routes that satisfy all constraints. Note that these statistical results listed in columns 1–5 only count those successful runs that produce the feasible solutions. From the statistics given in Table 2, it is observed that the FR of mDELC, DELC and jDE-2 can achieve 100%, while those of CPSO, SaDE and ɛDE are only 54%, 98% and 88%, respectively. The mDELC obtains the minimum best, mean, median and worst cost among all algorithms, and even the worst result produced by mDELC is better than the best results of other five algorithms. Moreover, the standard deviation of mDELC is 24.41, also is smaller than others, which further demonstrates the high robustness of mDELC. So, the performance of mDELC is superior to that of the other five tested algorithms in terms of effectiveness and robustness.The convergence curves of the average best cost values over 50 runs are shown in Fig. 10. The mDELC algorithm is originally designed to make full use of the infeasible information, and it allows the population to select the solutions that violate the constraints in the early stage. Thus mDELC achieves a faster convergence speed and the smaller cost when t<0.5Gmax, as is shown in Fig. 9. However, when t>0.5Gmax and the α value gets 1, the α selection strategy of mDELC forces the population out of the infeasible regions gradually and make the population evolve into the feasible solution finally. It is noted that the convergence curve of mDELC fully accords with the design original intention. Compared with other five algorithms, although the cost value of mDELC gets larger in the middle of the evolution and converges a little slower at the later stage, the fastest convergence speed of mDELC at the early stage (mainly in the infeasible regions) can also guarantee that the mDELC can achieve the best solution in the feasible regions.Fig. 10 displays the experimental results of Case II during 50 independent runs. The corresponding statistical results are illustrated in Table 2 and the convergence curves of average best fitness values are displayed in Fig. 11. It can be observed that all the six tested algorithms still can generate the feasible routes that avoid all threat areas and NFZs. The best routes generated by mDELC, CPSO, ɛDE and SaDE obviously are shorter than those generated by jDE-2 and DELC, while jDE-2 and DELC generate the routes with lower altitude than mDELC, CPSO, ɛDE and SaDE. The minimum cost value obtained in Case II is 1518.7, which is generated by ɛDE. The FR values of the six tested algorithms are 100%, 96%, 50%, 100%, 88% and 94%, respectively, and only mDELC and jDE-2 can obtain the feasible route successfully during every run. The mDELC obtains the minimum value in the mean cost, the worst cost and the standard deviation among the six tested algorithms. Meanwhile, the mDELC achieves the fastest convergence speed. Therefore, it is concluded that the mDELC has the more powerful robustness and constraint-handling ability than other five tested algorithms. In both the two test cases, the ɛDE also shows its powerful search ability and robustness to solve the UAV route planning problem, but the feasible rate of ɛDE is always lower than that of mDELC, DELC and jDE-2. In a word, the mDELC is superior to the five constrained optimization algorithms in solving the UAV route planning problem.From the above comparisons in Section 4, it can be seen that the mDELC is superior to the state-of-the-art constrained optimization algorithms in solving the UAV route planning problem. In this section, we further compare the mDELC with the penalty function based methods, and then discuss the influence of ɛ and n. In addition, we make a further comparison between the mDELC and the original DELC as well as other DE versions.In the penalty function methods, the extended cost function is defined by adding the constraint violation to the cost function as a penalty. The optimization of the cost function and the constraint violation is realized by the optimization of the extended cost function. In this paper, we define the extended cost function as follows:(39)fP=J+104∑imax{0,gi}+∑j|hj|where the later term is the penalty term to penalize the infeasible solutions.In this section, we compare the mDELC with five population-based optimization algorithms in solving the constrained route planning problem, including PSO, DE [21], ABC [19], the self-adaptive differential evolution (jDE) [43], and the phase angle-encoded and quantum-behaved particle swarm optimization (θ-QPSO) [14]. The five tested algorithms use the penalty function method to handle the inequality and equality constraints, and the extended cost function (39) is treated as the cost function to be optimized. The population size and maximum iteration are set asMpop=50,Gmax=400for all algorithms. Each of the algorithms is executed 50 times independently. Parameters of these algorithms are set according to the original literature: for PSO [3],wmax=0.9,wmin=0.4,c1=c2=1.49; for ABC [19],Ne=25,Nu=25,Limit=30; for DE [21,31,41,44], F is set as a random value in [0.2, 0.9], cr=0.9; for jDE [43], Fu=0.9, Fl=0.1, τ1=τ2=0.1; for θ-QPSO [14], b is decreased linearly from 1.0 to 0.5. Theses algorithms are tested in both Cases I and II and the experimental statistical results are recorded in Table 2. The optimal route comparisons of the mDELC and the five penalty function based algorithms for Cases I and II are shown in Figs. 12 and 14, respectively. The corresponding convergence curves of the average best cost value are shown in Figs. 13 and 15.From Table 2, it can be seen that the penalty function based algorithms also can successfully generate the feasible routes in both two test cases. The jDE gains the larger FR than PSO, DE, ABC and θ-QPSO, and the standard deviation of jDE is even better than mDELC in Case II. The smallest best cost values obtained by the five penalty function based algorithms are 1570.6 for Case I and 1522.0 for Case II, which are both obtained by DE. All the five penalty function based algorithms have the lower FR than mDELC, DELC, jDE-2 and ɛDE in both Case I and Case II. Moreover, in Case II, the best cost value obtained by DE is even smaller than that of mDELC, and a little larger than ɛDE, but the mean cost, standard deviation and FR of DE are still inferior to those of mDELC. Comparing the experimental results between DE and mDELC, it can conclude that the level comparison strategy of mDELC has more powerful constraint-handling ability than the penalty function method. These experimental results demonstrated that the mDELC still maintains its superiority to the penalty function based algorithms in solving the UAV route planning problem.In the UAV route planning problem, n represents the number of control points. Note that the dimension of the problem D=2n. Generally, the selection of n is a problem dependent parameter determined by user to make a tradeoff between accuracy of the route and computational efficiency. In order to study the influence of the number of control points on the generated routes, we test the mDELC with n=5, 8, 10, 12, 15 in the above two test cases. We execute the mDELC 50 times independently with each n, and the statistical results are listed in Table 3. It can be seen that, for both Case I and Case II, when n≤10, the mDELC can find feasible routes consistently and the standard deviation are rather small. When n=5, the best cost value obtained by mDELC is larger than those obtained with n=8–10. When n=12 and 15, the FR cannot achieve 100%, and meanwhile, the standard deviation shows the significant increase. Therefore, as the number of the control points increases, the route planning problem becomes more complex and it is more difficult and unstable for the mDELC to handle the constraints and search the optimal solution. However, when the number of the control points is too small, it becomes difficult to describe the route accurately enough, and the optimal solution is not so satisfactory. So, n=10 is the most appropriate value in the test case.As is mentioned above, the α level should be controlled properly to generate high quality solutions when the feasible region is rather small. Figs. 5 and 7 show the various α update strategies with different β and ɛ values, respectively. In order to study the influence of the α update strategy, we test the performance of DELC (with β=0, 0.01, 0.05, 0.09, 0.2) and mDELC (with ɛ=5, 10, 15, 20, 25) in solving the UAV route planning problem. The environment information of Case I and Case II is used here and each algorithm is run 50 times independently. The statistical results are listed in Table 4.From Table 4, it can be seen that the mDELC is generally superior to the DELC for various β and ɛ. For DELC, the best cost value obtained with β=0 is much smaller than those obtained with β=0.01, 0.05, 0.09 and 0.2, but the FR of β=0 is the smallest. For mDELC, all the best cost values obtain by each ɛ are generally smaller than those obtained by DELC, and the FR values are greater than 95%. So, the mDELC shows the significant superiority to the DELC, and the proposed modified α update strategy greatly improves the searching ability and robustness of the original algorithm. Meanwhile, as the value of ɛ increases, the best cost value changes rather little, but the standard deviation becomes large. For the UAV route planning problem in this paper, ɛ=10 is a recommended value.In this section, we compare the performance of mDELC in different DE variants, including DE/rand/1, DE/rand/2, DE/best/1, DE/best/2, DE/current-to-best/2, DE/rand-to-best/2 and DE/current-to-rand/2, detailed description of which are presented in Section 3.1. We run the mDELC with each variant 50 times independently for the two above test cases. The statistical results are recorded in Table 5. It can be seen that only the DE/rand/1 has the FR of 100% in finding the feasible route for both the two test cases. DE/best/1 and DE/best/2 are the worst two variants that cannot find the feasible route at all. The DE/current-to-rand/2 can obtain the second best route only after DE/rand/1. Comparing the seven DE variants, the DE/rand/1 variant significantly outperforms other six variants in terms of the global searching and constraint-handling abilities as well as robustness. Thus, DE/rand/1 is employed in the mDELC algorithm to solve the UAV route planning problem.

@&#CONCLUSIONS@&#
