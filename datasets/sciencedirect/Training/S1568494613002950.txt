@&#MAIN-TITLE@&#
A general methodology for online TS fuzzy modeling by the extended Kalman filter

@&#HIGHLIGHTS@&#
We present an online fuzzy modeling methodology based on the extended Kalman filter.This methodology can work with noise, is very efficient and completely general.The model can be obtained in a recursive way only based on input–output data.There are no restrictions in the type of membership functions used.Membership functions can even be mixed in the antecedents of the rules.

@&#KEYPHRASES@&#
Algorithm,Estimation,Fuzzy system,Kalman filter,Modeling,

@&#ABSTRACT@&#
This paper presents an online TS fuzzy modeling general methodology based on the extended Kalman filter. The model can be obtained in a recursive way only based on input–output data. The methodology can work online with the system, properly in the presence of noise, is very efficient computationally and completely general. It is general in the sense theorically there are no restrictions neither in the number of inputs nor outputs, neither in the type nor distribution of membership functions used (which can even be mixed in the antecedents of the rules). Some examples and comparisons with other online fuzzy identification models from signals are provided to illustrate the skill of the online identification of the proposed methodology.

@&#INTRODUCTION@&#
Obtaining an accurate model of a system is a fundamental part of its study, however, not always have enough information to obtain an acceptable mathematical model, it is necessary to use modeling techniques based on input–output data [1]. This process is even more critical in control systems, since both, system analysis [2–8] and controller design [9–11], require to obtain a model as accurate as possible. One exception to this may be the Mamdani [12] type control systems, although its great heuristic load difficult formal stability analysis.Takagi–Sugeno (TS) fuzzy modeling are universal approximators [13–16], and allows to obtain, in most cases, highly accurate models from a small number of rules [17], and therefore is an ideal tool for this purpose. Up to date, many fuzzy modeling algorithms based on input–output data have been proposed [18–21]. However, in many cases it is required that modeling algorithm works online with the system, and do it properly in the presence of noise.In order to design fuzzy modeling algorithm based on input–output data, which can work online with the system, properly in the presence of noise and can be very efficient computationally, this paper presents a general methodology that, by the extended Kalman filter [22], it allows for online accurate models, in the presence of noise, and without renounce the computational efficiency that characterizes the Kalman filter. The presented algorithms allow to adjust both antecedents and consequents of TS fuzzy models, imposing restrictions, if desired, in the distribution of the antecedents of the model.The Kalman filter is an efficient recursive filter that estimates the internal states of a linear dynamic system from a series of noisy measurement. It is used in a wide range of engineering and econometric applications, from radar and computer vision to estimation of structural macroeconomic models, and it is an important topic in control theory and control systems engineering.The Kalman filter is the minimum-variance state estimator for linear dynamic systems with white noise with zero-mean value. Various modifications of the Kalman filter can be used to estimate the state in nonlinear systems, like the extended Kalman filter (EKF) [23], which linearizes the system around the current parameters. This algorithm updates the parameters been consistent with previous data, and usually converges in a few iterations.The Kalman filter has been previously used with fuzzy logic in various applications [24–27]. In 2002, Simon introduced the use of Kalman filter for adjusting the parameters of a fuzzy model [28,29], assuming that antecedents were membership functions of triangular type, and using its center of gravity to perform the adaptation process. Later, other proposals have been made [30,31], however, the complexity of the calculation for others types of membership functions has meant that this proposal has not been widespread so far.Motivated by the successful use of Kalman filter in the works presented above, a theoretically general methodology for use of the extended Kalman filter (EKF) to estimate the adaptive parameters of a TS fuzzy model is presented in this paper. This methodology is theoretically general because it adjusts both, the antecedents such as the consequents, it does not limit the size of input/output vectors, neither the type or distribution of the membership functions used in the definition of fuzzy sets of the model. So, the authors try to use the excellent features of Kalman filter to obtain fuzzy models of unknown systems from input–output data, and also allowing its application in real-time [32].In recent years, evolving fuzzy systems (EFS) have had a major advance [33–35], especially evolving Takagi–Sugeno (eTS) systems [36–38]. eTS systems evolve online with the process, adapting the consequents and updating the rule base using an online clustering mechanism. The algorithms presented in this paper should not be understood as an alternative to eTS, but as a method of adjusting the parameters of the model that does not change its structure. Therefore, these algorithms may be complementary. In any case, in order to evaluate the fitness of the presented algorithms, a comparative example with the eTS has been included.This paper is organized as follows: Section 2 presents the problem and the formulation used throughout the entire paper. Section 3 presents the Kalman filter and its extended version, which will be used in Section 4 to present three algorithms to fuzzy modeling. The proposed algorithms are illustrated by several examples in Section 5. Finally, Section 6 provides some conclusions.As it is known, TS models are universal approximators, and they can achieve high accuracy with a small number of rules [14,13,15,16]. On the other hand, is relatively easy to convert them into nonlinear state models [11,39], which support formal analysis to use in control engineering. However, it is also known that the number of rules in TS models is increased as a lower approximation error is desired [40]. This implies that the modeling process is very important both for analysis and the design of fuzzy control systems.Let n be the number of input variables and m the number of output variables of a completely general system to model; a discrete Multiple Input Multiple Output – MIMO – TS fuzzy model can be represented by the following set of rules [20,41–43]:(1)R(l,i):Ifx1(k)isA1iland…andxn(k)isAnilThenyil(k)=a0il+∑j=1najilxj(k),where l=1, …, Miis the index of the rule and Mithe number of rules that model the evolution of the i-th system output, yi(k). Theaijl, j=0, …, n, elements represent the set of adaptive parameters of the consequents of the rules, thus they must be determined by the modeling process. k indicates the current sampling time.Note that in using the above representation, there are multiple inputs and outputs, and each output can be modeled by a different number of rules. This representation facilitates the reduction of the total number of rules needed to model correctly a complex system, and, therefore, facilitates the modeling process by reducing the number of model parameters.If input vector is extended in a coordinate [11,39] byx˜0=1, extended vectorx˜takes the form:(2)x˜=x˜0,x˜1,…,x˜nT=1,x1,…,xnTUsing the weighted average as a method of aggregation and the extension of the state vector given in (2), the output yigenerated by the set of rules R(l,i), can be calculated by [17,44]:(3)yi(k)=hi(x(k))=∑j=0naji(x)x˜j(k),being aji(x) variables coefficients [45] defined by(4)aji(x)=∑l=1Miwil(x)ajil∑l=1Miwil(x),wherewil(x)is calculated by (5) and represents the degree of activation of the rules of fuzzy model:(5)wil(x)=∏j=1nμjil(xj(k),σjil).μjil(xj(k),σjil)represents the j-th membership function of the l rule for the i-th model output, which determines the fuzzy setAjil. Theσjilelements represent the set of adaptive parameters of this membership function, so these values, with the adaptive parameters of the consequents of the rules,ajil, shall be determined according to estimation algorithm to achieve an appropriate system model. Then, the problem to be solved is to determine the values of the adaptive parameters of both, antecedents,σjil, and consequents,ajil, of the rules of the model (1).Note that the representation used is completely general, and does not limit or the type and the distribution of the antecedents of fuzzy rules. These antecedents can be specified individually, without any restriction or pre-established relationship with the rest of the antecedents.Kalman filter was developed by Rudolph E. Kalman [22,46] and allows to construct an optimal observer for linear systems in the presence of white noise both in model and in measures. The Kalman filter is a recursive estimator. This means that only the estimated state from the previous time step and the current measurement are needed to compute the estimate for the current state. In contrast to batch estimation techniques, no history of observations and/or estimates is required. The basic Kalman filter is limited to a linear assumption. More complex systems, however, can be nonlinear. The nonlinearity can be associated either with the process model or with the observation model or with both. To cover nonlinear systems, the Kalman filter was adapted via extended Kalman filter [23], if the system supports linearized models around any working point. Although the extended Kalman filter is not optimal, since it is based on a linear approximation of a model and its accuracy depends heavily on the goodness of such approximations, is a powerful tool for estimation in environments with noise.If a nonlinear discrete system as follows is considered:(6)x(k+1)=fx(k),u(k)+v(k)y(k)=gx(k)+e(k),where v(k) and e(k) are white noises that represent uncertainty both in the model of equation of state and in output, respectively. And being the Jacobian matrices of the system:(7)Φ(k)=∂f∂xx=x(k),u=u(k)(8)Γ(k)=∂f∂ux=x(k),u=u(k)and(9)C(k)=∂g∂xx=x(k)The Kalman filter can be conceptualized as two distinct phases: predict and update. The predict phase uses the estimated state from the previous time-step to produce an estimation of the state at the current time-step. This predicted state is also known as the a priori estimated state because, although it is an estimate of the state at the current time-step, it does not include observation information from the current time-step. In the update phase, the current a priori prediction is combined with current observation information to refine the estimate state. This improved estimate is termed the a posteriori estimate state.Following the previous, the extended Kalman filter can be solved by iterative application of the following set of equations [47]:Predict:(10)xˆ(k|k−1)=Φ(k)xˆ(k−1|k−1)+Γ(k)u(k)(11)P(k|k−1)=Φ(k)P(k−1|k−1)ΦT(k)+RvUpdate:(12)K(k)=(Φ(k)P(k|k−1)CT(k)+Rve)(C(k)P(k|k−1)CT(k)+Re)−1(13)xˆ(k|k)=xˆ(k|k−1)+K(k)y(k)−yˆ(k)(14)P(k|k)=Φ(k)P(k|k−1)ΦT(k)+Rv−K(k)C(k)P(k|k−1)ΦT(k)+RveT,wherexˆ(k|k−1)andxˆ(k|k)represent respectively the estimate of x predicted (a priori), and updated estimation (a posteriori) given observations up to, and including at time k. P(k|k−1) is the predicted (a priori) estimate covariance, and P(k|k) is the updated (a posteriori) estimate covariance matrix. K(k) is the Kalman gain,yˆ(k)are the estimated outputs, andRv, Rveand Reare the noise covariance matrices, estimated from the hope operator, E(·):(15)Rv=E(v(k)vT(k))(16)Rve=E(v(k)eT(k))(17)Re=E(e(k)eT(k))The extended Kalman filter has been widely studied in the literature and indeed the computation of the inverse can cause problems. However, these problems are usually due to:1.Bad initial estimates of the covariance matrix, P.Unmodeled process noise.Unmodeled state variables of the dynamic system.Errors in the dynamic coeficients or state transition matrix, and overlooked nonlinearities.The iterative process starts with an initial estimate of state vectorxˆ(0)=m0=Ex(0)and an initial value of the covariance matrix P(0)=E((x(0)−m0)(x(0)−m0)T) being known x(0|−1), u(0) and y(0). Then it is evolving online with respect the system, obtaining a solution that minimizes both estimation error and its covariance matrix for the linearization obtained at each instant. Eq. (13) guarantees the stability of Kalman filter for the value of K calculated according to the rest of the filter equations, where the linear approximation error is bounded [22,46,47].A so interesting application of extended Kalman filter is the adaptive identification of parameters in nonlinear systems, which allows the online obtaining of the adaptive parameters set of a discrete nonlinear model with noise presence and in a pseudo-optimal way (is optimal in linear systems). The identification of a TS fuzzy model can be seen as the obtaining of parameters of a nonlinear model, so the Kalman filter can be applied using the extended algorithm for estimating these parameters.First it is necessary to raise the problem of estimation by extended Kalman filter. For this, a system whose states depend directly on the parameters to be estimated [28] must be build, and then apply recursively from (10) to (14).Let p(k) be the set of adaptive parameters of a fuzzy system, and y(k) the set of outputs of this fuzzy system, the system represented in (18) allows to obtain these parameters using the extended Kalman filter.(18)p(k+1)=Ψp(k)y(k)=h(x(k),p(k))+e(k)Ψis a constant matrix that relates the parameters between themselves, for example, to meet the requirements of the Standard Fuzzy Partition (SFP) [48] frequently used in control applications [6,49]. If all parameters can be adjusted freely,Ψwill be the identity matrix. e(k) is the uncertainty of the measurement of the output system and is represented by a white noise, whose covariance is Re. The diagram that allows the use of extended Kalman filter for the online estimation of a fuzzy model is shown in Fig. 1.Thus, the first thing to do is the calculation of Jacobian matrices of the system using (7), (8) and (9). Applying these expressions on (18):(19)Φp(k)=Ψ(20)Γp(k)=0(21)Cp(k)=∂h∂pp=pˆ(k)beingpˆ(k)the current estimation of the parameters vector of the fuzzy model.Note that, given formulation exposed in Section 2, the estimation problem of the TS fuzzy model (1) is to determine the values of the adaptive parameters of both antecedents,σjil, and consequents,ajil, of rules. Therefore, for a TS fuzzy model, the expression h(x(k), p(k)) corresponds to (3), and (21) must be obtained from the derivative of this expression with respect to each of adaptive parameters of the fuzzy model.As can be seen in (3), that use (4), function h(·) is linear with respect the set of adaptive parameter of consequents,ajil, so:(22)∂hi∂aJIL=wILx˜J∑l=1MIwIlifi=I0ifi≠I,where L, J and I determine the particular parameteraJILof the possible set of consequent parameters. Moreover, for each parameters set of the membership function of antecedent, is obtained, if exist:(23)∂hi∂σJIL=∑j=0n∂∑l=1Miwilajil/∑l=1Miwil∂σJILx˜jOnly the I-th output depends of theσJILparameter, thus,(24)∂hi∂σJIL=0ifi≠I.Developing the partial derivative of (23), and considering (24):(25)∂∑l=1MIwIlajIl/∑l=1MIwIl∂σJIL=∂∑l=1MIwIlajIl/∂σJIL∑l=1MIwIl−∂∑l=1MIwIl/∂σJIL∑l=1MIwIlajIl∑l=1MIwIl2,Considering thatσJILparameter is only present in L rule of I-th output, is easy to deduce that(26)∂∑l=1MIwIlajIl∂σJIL=∂wIL∂σJILajIL,and working in a similar way,(27)∂∑l=1MIwIl∂σJIL=∂wIL∂σJIL.Replacing (26) and (27) in (25):(28)∂∑l=1MIwIlajIl/∑l=1MIwIl∂σJIL=∂wIL∂σJILajIL∑l=1MIwIl−∑l=1MIwIlajIl∑l=1MIwIl2=∂wIL∂σJIL∑l=1MIwIl(ajIL−ajIl)∑l=1MIwIl2Replacing the above expression in (23), the final expression is obtained:(29)∂hi∂σJIL=∂wIL∂σJIL∑j=0n∑l=1MIwIl(ajIL−ajIl)∑l=1MIwIl2x˜jifi=I0ifi≠IFinally, to conclude the calculation of (29) is necessary to determine the derivative of the degree of activation from the rules of the fuzzy model,wil, with respect to each of the parameters of the antecedents. Obviously, this calculation is dependent on the type of membership function used for each antecedent. However, is possible to express in a general form:(30)∂wIL∂σJIL=∂∂σJIL∏q=1nμqIL(xq(k),σqIL),or a more developed form:(31)∂wIL∂σJIL=∂μJIL(xJ(k),σJIL)∂σJIL∏q=1,q≠JnμqIL(xq(k),σqIL)Note that(∂μJIL(xJ(k),σJIL)/∂σJIL)represents the derivative of the membership function that is defined by the parameters setσJIL. Thus, the calculation of this derivative depends on the type of membership function used and it can be performed from the expression that defines it. For example, for a Gaussian membership function(32)μGaussian[c,β](x)=e−(x−c)2β2whereσis the vector [c, β],(33)∂μ[c,β](x)∂c=2(x−c)β2μGaussian[c,β](x),and(34)∂μ[c,β](x)∂β=2(x−c)2β3μGaussian[c,β](x).Note it is not necessary that the membership functions are differentiable, but it is enough to be piecewise differentiable. Piecewise membership functions could provide a jump discontinuity in its derivative, however, since the set of singular points is a null set, in numerical implementations this is not a real problem. For example, it is possible to suppose that its derivative is a point infinitesimally close to the right, or to the left, or as the average of these derivatives.In this section, three algorithms that allow the application of the extended Kalman filter to model a fuzzy system are presented. Algorithm 1, EKF(c), is presented in Fig. 2. This algorithm only adjusts the consequents, keeping antecedents in their initial values. EKF(c) is the fastest of the proposed algorithms because needs to do fewer calculations, but its ability to model complex systems is limited.Before running the modeling algorithm it must be initialized. Since it is assumed that no information is available about the system, all consequents are initialized to 0, but it could be initialized by other procedures [50]. α is a positive integer of a relatively high value which represents the little certainty that the algorithm should give to the initial parameters, and I is the identity matrix.The following algorithms adjust both antecedents and consequents of the fuzzy model, but they confront with modeling process using two different strategies. Algorithm 2, EKF(ac), shown in Fig. 3, performs the simultaneous adjustment of antecedents and consequents. As in the previous algorithm, α and β are positive integers which represents the little certainty that the algorithm should give to the initial parameters. In this case, α is used for consequents and β for antecedents. Considering again that the system is considered completely unknown, the antecedents initialization will be done through an uniform distribution of them. However, this initialization is better than the consequents, so the distinction of these two parameters can refine the algorithm and decrease response, both the modeling error, as the potential for instability of it. Choosing a too high value of β would lead the algorithm to make very abrupt initial changes of the antecedents, implying a high volatility modeling algorithm. However, it is usually desirable to a higher value of α which allows modify the consequents values appropriately, hence the importance of separating these two parameters.Algorithm 3, EKF(c+a), is really the sequential execution of two filters. First it is performed the setting of consequents, and later the adjust of antecedents. The adjustment in the reverse order is worse, so it will not be considered. The algorithm EKF(c+a) is shown in Fig. 4, where α and β have the same meaning as in the previous algorithm.To demonstrate the practical application of the extended Kalman filter to fuzzy modeling, several examples will be shown in this section. For each case, the three algorithms presented in the previous section are run to evaluate their performance: EKF(c), EKF(ac) and EKF(c+a). These algorithms has been programmed using the Fuzzy Logic Tools (FLT) library [51].Examples 1, 2 and 3a carried out 10 times with a different noise signal (tenfold cross validation [52]), while the example 4 does not incorporate noise. Both, the online modeling capability and the quality of the final models are studied (the final models are the models obtained at the end of the training phase. This model is not changed during the validation phase). The initialization of the covariance matrix of each algorithm is performed based on a previous study. In future works the authors hope propose an initialization method more robust.To assess the quality of modeling, in each case will present the absolute error,|yˆ(k)−y(k)|, during the modeling process (online training absolute error), the error of the model obtained at the end of the training phase, both with respect to the training data (final model errors from training data), and with respect to the validation data (Final model validation errors from data). During the validation process the noise is removed to check if the model fit to the real system without its interference. The root mean square error (RMSE) is calculated for the validation data as a global measure of the goodness of the obtained models, whereRMSE=E((y(k)−yˆ(k))2). To see the quality of the algorithms comparatively, will be presented the outputs of the systems with respect to outputs of the models obtained online during the training phase, and the final model with respect to the validation data.The following examples represent a wide range of possibilities: static and dynamic nonlinear systems with simple and multiple outputs, with only one type of membership function and with mixed antecedents types, and with restrictions in the distribution of the antecedents and without them. Finally, examples 3 and 4 makes a comparison with some recently published methods in order to assess the goodness of the proposed algorithms.Let be the system:(35)y(x)=e−0.03xsin(0.1x)withx∈[−150,150].Re=0.5 and the covariance matrix for each of the algorithms will be initialized with the value that obtain best performance in each case (based on previous tests), i.e., α=103 for EKF(c) algorithm, α=100 and β=0.1 for EKF(ac) algorithm, and α=105 and β=1 for EKF(c+a).Each case is carried out 10 times changing the noise in each run, with a 60–40% random split between the training and validation data subsets. The function (35) will be modeled using two different initial configurations. In the first case, an initial model composed only of membership functions of Gaussian type is used, while the second case use a mixture of different membership functions.In this case, the antecedents of the initial model starts with Gaussian membership functions uniformly distributed, with all consequents set to zero, andΨ=I. After run ten times with different noise signal, the average errors are shown in Table 1. Note that the validation results are better than training since the algorithm performs online modeling.For one of the executions, the absolute errors of the final models are shown for training and validation data in Figs. 5 and 6. The evolution of online modeling outputs for each algorithm shown in Fig. 7, the final response from validation data in Fig. 8, and the online evolution of absolute errors are shown in Fig. 9. Finally, Fig. 10shows the resulting antecedents of each model, where the changes made by the EKF(ac) and EKF(c+a) algorithms from the original antecedents can be seen.Based on the results obtained can be checked that the three algorithms modeled properly online, and obtain final models that adequately represent the original function. Algorithms EKF(ac) and EKF(c+a) perform better because they can adjust the antecedents and it gives them more flexibility. Analyzing the standard deviations in Table 1, is possible to see that the algorithms are fairly consistent, since they get very similar results to changes in input data and noise that affects the equation.In this case, the antecedents of the initial fuzzy model are defined by a S membership function, a Z, two trapezoidal and two triangular. These antecedents have been distributed according to the EKF(c) graph of Fig. 16. In order to demonstrate the operation ofΨin (18), a restriction on the antecedents is defined, so that each of them depends on the previous antecedent, and they are never overlap in the regions of full membership. If the membership are straight lines overlapping by pairs, the adaptation problem does not have an unique solution which can lead to convergence problem of the algorithm. This fact and a solution has been discussed in [53].In EKF(ac) and EKF(c+a) algorithms,Ψis used both to define the relationship between the parameters of the antecedents as the consequent. To define the relationship between consequents,Ψmatrix is always the identity, whereas the relationship between the parameters of the antecedents is determined by (36). Note that bold numbers in (36) marks changes from the identity matrix.(36)After run ten times with different noise signal, the average errors are shown in Table 2. As in the previous case, is taken one of the executions of the algorithm. The absolute errors of the final models are shown in Figs. 11 and 12, the modeling outputs in Fig. 13, the final response from validation data in Fig. 14, and the online evolution of absolute errors are shown in Fig. 15. Fig. 16shows the resulting antecedents of each model, where can be seen that the algorithm has complied with the antecedents relationship from (36).Based on the results obtained, it is possible to draw the same conclusions as in the previous case, but can be seen that the use of the matrixΨcan impose restrictions on the adjust of antecedents.Given the tunnel-diode circuit shown in Fig. 17, where R=1.5kΩ, C=2pF and L=5μH, its dynamics can be represented by the Multiple Input Multiple Output (MIMO) space state model in (37), wherex1(t)=vC(t), x2(t)=iL(t), T=0.1ns is the sampling time, andh(v)is the nonlinearvR–iRcharacteristic of the tunnel-diode [54].(37)x1(k+1)=x1(k)+T(x2(k)−h(x1(k)))C+e1(k)x2(k+1)=x2(k)+T(u(k)−x1(k)−Rx2(k))L+e2(k)It is assumed that the system is affected by a white noise e(k) of covariance:(38)Re=10−4000.01,and the initial state isx(k)=00. The input signal applied to the system is(39)utr(k)=20sin(kT/10)(kT+10),for training process, and(40)ute(k)=5sin(kT/5)(kT+5),for the validation.An initial fuzzy model is created using Gaussian membership functions uniformly distributed, and with all consequents set to zero, andΨis set to the identity matrix. The initial covariance matrix is initialized with the value giving the best performance in this case, i.e., α=108 for EKF(c) algorithm, α1=0.1 and β1=10−5 for the first output and α2=103 and β2=0.005 for the second output for EKF(ac) algorithm, and α=108 and β=100 for EKF(c+a). After run ten times, the average errors are shown in Table 3. Note that, as in previous cases, the validation results are usually better than training since the algorithm performs the modeling online.Extracting data from one of the ten simulations, training errors are shown in Figs. 18 and 19, errors of the final models obtained from training data are shown in Figs. 20 and 21, and errors of the final models obtained from validation data are shown in Figs. 22 and 23. Fig. 24shows the real outputs and the online evolution of the outputs of the model, Fig. 25shows the system response and the validation data obtained by the adjust algorithms, and finally, Fig. 26shows the resulting antecedents of one of the executions of the algorithms.This example shows that the proposed algorithms can model MIMO nonlinear dynamic systems. EKF(c) and EKF(c+a) get very good results, while EKF(ac) has more problems to model multiple-output systems such as the example.In order to compare the proposed methods with a recent known for its good performance, the second example of [55] has been taken. Be the nonlinear system affected by a white noise e of covariance Re=0.5:(41)f(x,y)=5x2+3xy−y2+e,withx,y∈[−4,4],Each case is carried out 10 times changing the noise in each run, with a 60–40% random split between the training and validation data subsets. The initial model consists of four Gaussian membership functions uniformly distributed for each antecedent (16 rules), with all consequents equal to zero. The initial covariance matrix is initialized with the value giving the best performance in this case, i.e., α=100 for EKF(c) algorithm, α=50 and β=0.01 for EKF(ac) algorithm, and α=104 and β=0.1 for EKF(c+a). Since no restriction has been imposed on the antecedents,Ψ=I.After run ten times, the average errors are shown in Table 4. Note that the validation results are better than training since the algorithm performs online modeling.With the idea of showing the response of the different models obtained has been extracted one of the ten executions. Training errors are shown in Figs. 27 and 28, and errors of the final models obtained from training and validation data are shown in Figs. 29 and 30, respectively. Fig. 31shows the function (41) and the validation data obtained by the EKF(c+a) algorithm. Finally, Fig. 32shows the resulting antecedents of one of the executions of the algorithms.It is very difficult to make a precise comparison of the proposed algorithms with respect to Roh's algorithm, since the EKF algorithms do not obtain the model structure and the initialization is clearly different. However, and considering that the proposed algorithms perform online modeling while the Roh's algorithm runs off-line, can be clearly seen that these algorithms achieve very good results, especially the EKF(c+a) algorithm. In addition, the training modeling error decreases rapidly during the execution, which allows for an appropriate model within a few iterations.The proposed approach has also been tested by predicting 6, 12 and 85 steps ahead of Mackey–Glass chaotic time series based on the values of the current signal, 6, 12 and 18 steps back (x=[v(t−18),v(t−12),v(t−6)v(t)]T). This series is a well-known benchmark function, and it is generated from the differential delay equation defined by [33,35,37]:(42)v˙(t)=γv(t−τ)1+v(t−τ)10−δv(t).with γ=0.2, δ=0.1, τ=17 andv(0)=1.2.The initial fuzzy models start with 8 rules for each output (24 rules in total), with 2 Gaussians uniformly distributed forv(t−12),v(t−6)andv(t). In this case a noise signal is not incorporated in the system. The first 300 values of the series are used as training data, and the next 500 values as validation data. The initial covariance matrix is initialized with the value giving the best performance in this case, i.e., α=1000 for EKF(c) algorithm, α=9×1012 and β=10−6 for EKF(ac) and EKF(c+a) algorithms.The results of the execution of the three algorithms are shown in Table 5along with results obtained in [36] by the MIMO eTS algorithm. Figs. 33 and 34show the output of the models during training and validation phases. eTS outputs can be seen in the original paper [36].Note that the MIMO eTS algorithm automatically generates the structure of the fuzzy model and ends with a total of 11 rules, so that the comparison made is not equitable; however, the results show good overall performance of the proposed algorithms.

@&#CONCLUSIONS@&#
This paper has addressed the problem to apply the extended Kalman filter in estimation of adaptive parameters of a completely general TS fuzzy system based on input–output data. The generality lies with at there are no restrictions on the size of the input or the output vectors, or the type or distribution of membership functions used in the rules of the model. The presented algorithms allows to adjust both antecedents and consequents, and in addition, it allows to imposing restrictions, if desired, in the distribution of the antecedents of the model.The problem tackled has been solved in two levels; first at the theoretical level from fuzzy models obtained by authors in previous works. This has allowed to obtain compact mathematical expressions ready to be implemented by numerical algorithms. Thus, on the second level, the complete solution (theoretical + practical) of the problem has been presented with three algorithms. In order to show the generality of the developed methodology, several possible alternatives for fit both antecedents and consequents of the TS fuzzy model have been presented, and several comparatives of accuracy and efficiency performed have obtained on several examples, for static and dynamic nonlinear systems. Two comparisons with two recently published methods were performed in order to assess the goodness of the proposed algorithms.In future works, the authors aim to improve the overall response of the algorithms through an online study of the evolution of the modeling process, so as to obtain a more robust initialization of the algorithms. In addition, with respect to the initialization of the covariance matrices, the authors are working on several alternatives to formalize and to limit the current dependence of the parameters α and β.