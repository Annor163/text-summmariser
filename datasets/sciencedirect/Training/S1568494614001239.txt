@&#MAIN-TITLE@&#
Adaptive hybrid control system using a recurrent RBFN-based self-evolving fuzzy-neural-network for PMSM servo drives

@&#HIGHLIGHTS@&#
An adaptive hybrid control system using RRSEFNN for PMSM servo drive is proposed.The computed torque control is designed to stabilize the PMSM servo drive.The RRSEFNN is used to estimate the nonlinear lumped uncertainty of the PMSM drive.The online adaptive laws are derived using the Lyapunov stability analysis.All control algorithms are implemented using TMS320C31 DSP-based control computer.

@&#KEYPHRASES@&#
Computed torque controller,Permanent-magnet synchronous motor drive,Radial basis function network (RBFN),Recurrent self-evolving fuzzy neural network,Robust control,Sliding-mode control,

@&#ABSTRACT@&#
In this paper, an adaptive hybrid control system (AHCS) based on the computed torque control for permanent-magnet synchronous motor (PMSM) servo drive is proposed. The proposed AHCS incorporating an auxiliary controller based on the sliding-mode, a recurrent radial basis function network (RBFN)-based self-evolving fuzzy-neural-network (RRSEFNN) controller and a robust controller. The RRSEFNN combines the merits of the self-evolving fuzzy-neural-network, recurrent-neural-network and RBFN. Moreover, it performs the structure and parameter-learning concurrently. Furthermore, to relax the requirement of the lumped uncertainty, an adaptive RRSEFNN uncertainty estimator is used to adaptively estimate the non-linear uncertainties online, yielding a controller that tolerate a wider range of uncertainties. Additionally, a robust controller is proposed to confront the uncertainties including approximation error, optimal parameter vector and higher order term in Taylor series. The online adaptive control laws are derived based on the Lyapunov stability analysis, so that the stability of the AHCS can be guaranteed. A computer simulation and an experimental system are developed to validate the effectiveness of the proposed AHCS. All control algorithms are implemented in a TMS320C31 DSP-based control computer. The simulation and experimental results confirm that the AHCS grants robust performance and precise dynamic response regardless of load disturbances and PMSM uncertainties.

@&#INTRODUCTION@&#
Recent advancements in magnetic materials, semiconductor power devices and control theories have made the permanent-magnet synchronous motor (PMSM) drives play a vitally important role in motion-control applications. PMSMs are widely used in high-performance applications such as industrial robots and machine tools because of their compact size, high-power density, high air-gap flux density, high-torque/inertia ratio, high torque capability, high efficiency and free maintenance. The overall performance of a speed and/or position control of PMSM drives depend not only on the quickness and the precision of the system response, but also on the robustness of the control strategy which has been carried out to assure the same performances if exogenous disturbances and variations of the system parameters occur. In fact, the control of PMSM drives often necessitates the determination of the machine parameters. The online variations of parameters, which essentially depend on temperature variation, saturation and skin effects, external load disturbance and unmodeled dynamics in practical applications can affect the PMSM servo drive performances [1–4]. Therefore, to compensate for various uncertainties and nonlinearities, sophisticated control strategy is very important in PMSM servo drives.In practical applications, strong robustness to various uncertainties is always an important property that a good controller should achieve. From a practical point of view, complete information about uncertainties is difficult to acquire in advance. Therefore, the control performance of the PMSM servo drives may be seriously influenced. To deal with these uncertainties, much researches has been carried out in recent years to apply various approaches to attenuate the effect of uncertainties. On the basic aspect, the conventional proportional-integral-derivative (PID) controllers are widely used in industry due to their simple control structure, ease of design and low cost [3–7]. On the other hand, the computed torque controller (CTC) is utilized to linearize the nonlinear equation by cancelation of some, or all, nonlinear terms such that a linear feedback controller is designed to achieve the desired closed-loop performance. However, an objection to the real-time use of such control scheme is the lack of knowledge of uncertainties. Several CTCs have tried to circumvent the problem of uncertainties using adaptive techniques [8–11].Nowadays, a lot of intelligent control techniques have been developed to improve the performance of the PMSM servo drives and to deal with the nonlinearities and uncertainties using fuzzy logic, neural network and/or the hybrid of them [12–17]. Much research has been done on application of neural networks (NNs) for identification and control of dynamic systems. According to their structures, the NNs can be classified as feed-forward neural networks and recurrent neural networks (RNNs). It is well known that a feed-forward neural networks is capable of approximating any continuous function. However, the feed-forward neural network is a static mapping. On the other hand, RNNs have superior capabilities than the feed-forward neural networks, such as dynamics and the ability to store information for later use. Since a recurrent neuron has an internal feedback loop, it captures the dynamic response of a system without external feedback through delays [18,19]. The RNNs have the ability to deal with time-varying input or output through their own natural temporal operation [18]. Moreover, the RNNs are dynamic mapping and demonstrate good control performance in the presence of unmodeled dynamics, parameter variations, and external disturbances [18,19]. The concept of incorporating fuzzy logic into a neural network (NN) has grown into a popular research topic. In contrast to the pure neural network or fuzzy system, the fuzzy-neural-network (FNN) possesses both their advantages; it combines the capability of fuzzy reasoning in handling uncertain information and the capability of NNs in learning from the process [20–24]. On the other hand, the recurrent fuzzy-neural-network (RFNN), which naturally involves dynamic elements in the form of feedback connections used as internal memories, has been studied by some researchers in the past few years [25–29].Recently, the combination of recurrent structures and fuzzy neural networks has become popular in identifying and recognizing temporal behaviors. Therefore, recurrent structures enable effectively address temporal sequences responding to memory information from prior system states. In contrast with pure feed-forward FNN, we have to know the number of lagged inputs and outputs in advance, and feed these lagged values as feed-forward FNN input. The exact order of a dynamic system is usually unknown, and thus, we do not know the number of lagged values to provide. Moreover, the lagged values increase input dimensions and result in a larger network size. Apparently, the use of a feed-forward FNN is unsuitable for constructing dynamic system. Therefore, some recurrent fuzzy neural networks (RFNNs) have already been proposed for solving the temporal characteristics of dynamic systems, and have been shown to outperform feed-forward FNNs and recurrent neural networks [30–35]. One of the important points in the design of FNNs is the consequent part, which is able to impact performance on using different types. Two types of FNNs are the Mamdani-type and the Takagi–Sugeno–Kang (TSK)-type. For Mamdani-type FNNs, the minimum fuzzy implication is adopted in fuzzy reasoning. For TSK-type FNNs, the consequence part of each rule is a linear combination of input variables [36–42]. In Refs. [41] and [42], it has been shown that TSK-type FNN offer better network size and learning accuracy than Mamdani-type FNNs. In the TSK-type FNN, which is a linear polynomial of input variables, the model output is approximated locally by the rule hyperplanes. Nevertheless, the traditional TSK-type FNN does not take full advantage of the mapping capabilities that may be offered by the consequent part. Introducing a nonlinear function, especially a neural structure, to the consequent part of the fuzzy rules has yielded the neural networks designed. However, the multilayer neural network has such disadvantages as slower convergence and greater computational complexity. Therefore, this paper uses the RBFN to the consequent part of the fuzzy rules, called recurrent RBFN-based self-evolving fuzzy-neural-network (RRSEFNN). The consequent part of the proposed RRSEFNN model is a nonlinear combination of input variables.The radial-basis function network (RBFN) is the architecture developed from the Kohonen network model and constructed with input, output and hidden layers of normalized Gaussian activation functions. The RBFN is widely used in the areas of nonlinear mapping and control problems due to its outstanding performances despite simple structure. Since the RBFN can be used for a universal approximator like fuzzy and neural networks, it has been introduced as an attractive solution to the nonlinear problems [43–47]. The RBFN that employs local receptive fields to perform function mappings was proposed in [48]. In addition, the RBFN has a faster convergence property than a multilayer perceptron because the RBFN has a simple structure. Additionally, the RBFN has a similar feature to the fuzzy system. First, the output value is calculated using the weighted sum method. Then, the number of nodes in the hidden layer of the RBFN is the same as the number of IF–THEN rules in the fuzzy system. Finally, the receptive field functions of the RBFN are similar to the membership functions of the premise part in the fuzzy system. Therefore, the RBFN is very useful to be applied to control the dynamic systems [49,44,50–54].In practical control applications, it is desirable to have a systematic method of ensuring the stability, robustness and performance properties of the overall system. Recently, several neural network control approaches have been proposed based on Lyapunov stability theory [25–29]. One main advantage of these control schemes is that the adaptive laws were derived based on the Lyapunov synthesis method and, therefore, guarantees the stability of the controlled system. However, some constraint conditions should be assumed in the control process, e.g., that the approximation error, optimal parameter vectors or higher order terms in a Taylor series expansion of the nonlinear control law, are bounded. Besides, the prior knowledge of the controlled system may be required, e.g., the external disturbance is bounded or all states of the controlled system are measurable. These requirements are not easy to satisfy in practical control applications. With the above mentioned motivations, this paper presents the combination of recurrent structure and a RBFN to construct the consequent part of the recurrent RBFN-based self-evolving fuzzy-neural-network, for the control of PMSM servo drive system. The motivation of this paper is to design an adaptive hybrid control system using RRSEFN not only guarantee the stability of the PMSM servo drive system but also the constrained conditions and prior knowledge of the controlled system are not necessary in the design process such that it can easily extend to other nonlinear dynamic system. To deal with uncertainties and to enhance the control performance of motor drives, in recent years, many nonlinear control methods have been developed for PMSM servo drive systems [55–76,79].With the above mention motivations, this paper presents an adaptive hybrid control system to control the rotor position of the PMSM servo drive which guarantees the robustness in the presence of parameter uncertainties and load disturbances based on the computed torque control. The proposed control scheme comprises an auxiliary controller based on the sliding-mode, a recurrent RBFN-based self-evolving fuzzy-neural-network controller (RRSEFNNC) and a robust controller. The AHCS combines the merits of the self-evolving fuzzy-neural-network, recurrent neural network and RBFN. The combination of self-evolving fuzzy-neural-network and a RBFN to construct the consequent part, called recurrent RBFN-based self-evolving fuzzy-neural-network for identification of nonlinear dynamic uncertainty function and control of PMSM servo drive system. An online learning algorithm, consisting of structure learning and parameter learning, is proposed to construct the RRSEFNN model automatically. The structure learning algorithm determines whether a new rule should be extracted from the training data and to determine the number of fuzzy sets in the universal discourse of each input variable. Initially, the RRSEFNN model has no rules. The rules are automatically generated from training data. The parameter learning algorithm is based on supervised gradient-descent method for the antecedent part and recurrent parameters. The consequent parameters in the RRSEFNN are tuned using a variable-dimensional Kalman filter algorithm simultaneously to minimize an output error function. The RRSEFNNC was used to adaptively estimate the non-linear uncertainties, while the robust controller was designed with adaptive bound estimation algorithm to recover the residual of the approximation error via the RRSEFNN approximation. The online adaptive control laws have been derived based on the Lyapunov stability analysis so that the stability of the PMSM servo drive can be guaranteed. The simulated and experimental results have successfully confirmed that the proposed AHCS grants robust performance and precise dynamic response to the reference model regardless of load disturbances and PMSM parameter uncertainties.This paper is organized as follows. Section 2 presents the field-oriented control (FOC), dynamic analysis of the PMSM servo drive and the problem formulation. The structure of the recurrent radial basis function network (RBFN)-based self-evolving fuzzy-neural-network (RRSEFNN) as well as the structure learning and parameter learning algorithms are introduced in Section 3. The description of the adaptive hybrid control system of the PMSM servo drive is introduced in Section 4. In addition, the design methodology for the computed torque controller, auxiliary controller based on the sliding-mode, robust controller and the recurrent RBFN-based self-evolving fuzzy-neural-network estimator are also given in Section 4. Besides, the design procedures and adaptive learning algorithms of the proposed adaptive hybrid control system are described in details in Section 4. The validity of the design procedure and the robustness of the proposed controller are verified by means of computer simulation and experimental analysis. All of the control algorithms have been developed in a control computer that is based on a TMS320C31 and TMS320P14 DSP DS1102 control board. The dynamic performance of the PMSM drive system has been studied under load changes and parameter uncertainties. Numerical simulations and experimental results are provided to validate the effectiveness of the proposed adaptive hybrid control system in Section 5. Conclusions and future works are introduced in Section 6.The voltage equations of the stator windings in the rotating reference frame can be expressed in (1) and (2). Then, using FOC and setting d-axis current as zero, the electromagnetic torque is obtained as given in (3) and (4)[2]. The parameters of the surface-mounted PMSM are listed in Table 1.(1)Vqsr=Rsiqsr+Lssddtiqsr+ωrLssidsr+ωrλm'(2)Vdsr=Rsidsr+Lssddtidsr−ωrLssiqsrThe electromagnetic torque can be expressed(3)Te=32P2λmiqsr=KtiqsrThe equation of motion of the PMSM is given as:(4)Te=Jm2Pd2dt2θr+βm2Pddtθr+TLThe dynamic analysis of the PMSM may be expressed as follows. From (3) and (4), the mechanical dynamics can be simplified as:(5)θ¨r=−βmJm2Pθ˙r+KtJm2Piqsr*−2P1JmTL(6)θ¨r=Am⋅θ˙r+Bm⋅U(t)+Dm⋅TLwhereU(t)=iqsr*(t)is the control effort, Am=−(βm/Jm)·(P/2), Bm=Kt/(Jm·P/2) and Dm=−(P/2)·(1/Jm).Now, assume that the parameters of the PMSM are well known and the external load disturbance is absent, rewriting (6) can represent the model of the PMSM servo drive system.(7)θ¨r(t)=Am⋅θ˙r(t)+Bm⋅U(t)By considering the dynamics in (6) with parameter variations, disturbance load and unpredictable uncertainties will give:(8)θ¨r(t)=(Amn+ΔAm)⋅θ˙r(t)+(Bmn+ΔBm)⋅U(t)+(Dmn+ΔDm)⋅TL(9)θ¨r(t)=Amn⋅θ˙r(t)+Bmn⋅U(t)+Γ(t)where Amn, Bmnand Dmnare the nominal parameters of Am, Bmand Dmrespectively. ΔAm, ΔBm, ΔDmand TL are the uncertainties due to mechanical parameters Jmand βm, and Γ(t) is the lumped parameter uncertainty and is defined as:(10)Γ(t)=ΔAmθ˙r(t)+ΔBmU(t)+(Dmn+ΔDm)TLThe bound of the lumped parameter uncertainty is assumed to be given, that is,(11)Γ(t)≤Kθwhere Kθis a given positive constants.In this section, both the problem formulation and the description of the proposed adaptive hybrid control system (AHCS) for PMSM drive are presented. The configuration of the proposed hybrid control system for PMSM servo drive is shown in Fig. 1, in which the reference model is given in (12), the adaptive hybrid controller, the current regulated PWM (CRPWM) inverter, d–q axis current controllers, the FOC, coordinate transformations and the PMSM. The configuration of the conventional position control system for PMSM servo drive is basically consists of four control loops. Two PI current controllers in d–q-axes, a 2DOF I-PD speed controller and a 2DOF I-PD position controller. The current, speed and position controllers have been designed and analyzed in [75]. After decoupling control is realized, there are three control loops in cascade; the q-axis current control loop, the speed control loop and the position control loop. At nominal operating condition of PMSM dynamic model, a 2DOF I-PD position controller is designed to achieve the desired tracking and regulation position control performance. Then, the reference model is derived from the closed loop transfer function of the PMSM drive system. The parameters of the position controller are chosen according to prescribed time-domain specifications [57,75,79].(12)Grmθ(s)=b0k(1+τs)b5s5+b4s4+b3s3+b2s2+b1s1+b0where b0, b1, b2, b3, b4b5, k and τ are functions of PMSM parameters and kp, kiand kdparameters of the 2DOF I-PDC. The details design of the conventional FOC-PMSM servo drive system can be found in [75,79].In Refs. [22] and [75], at nominal parameters of the PMSM, a 2DOF I-PDC position controller is designed. Although the desired tracking and regulation position control performance can be realized using the 2DOF I-PDC position controller with the nominal PMSM parameters, the performance of the drive system still sensitive to parameter variations. Due to the existence of nonlinearities, uncertainties and disturbances, conventional linear control methods, including the PID control, cannot guarantee a sufficiently high-performance for the PMSM servo drive. To solve this problem and in order to control the rotor position of the PMSM effectively, we propose an AHCS. The proposed AHCS integrates recurrent RBFN-based SEFNN (RRSEFNN) controller, a robust controller and an auxiliary controller based on the computed torque control. We use the recurrent RBFN-based SEFNN controller combined with the robust controller to adaptively estimate the nonlinear function, Q(υ), yielding a controller that can tolerate a wider range of uncertainties. The proposed AHCS is assumed to take the following form:(13)Uqs*(t)=iqsr*(t)=[Qˆ−u(t)]=[QˆRRSEFNN+UqsRC(t)−u(t)]whereUqs*(t)is the hybrid adaptive control system, u(t) is the auxiliary controller,QˆRRSEFNNis the RRSEFNN controller andUqsRC(t)is the robust controller.This section presents the structure and learning algorithms for the recurrent radial basis function network (RBFN)-based self-evolving fuzzy-neural-network (RRSEFNN). The recurrent structure in RRSEFNN uses interaction feedback that has the ability to capture the critical information from other rules. The consequent part of each recurrent fuzzy rule is a radial basis function network. The RRSEFNN combines the merits of the self-evolving fuzzy-neural-network, recurrent-neural-network and RBFN. The RRSEFNN simultaneously uses two types of learning to evolve structure and parameter learning. There are no rules in the RRSEFNN initially. The rules are created on line as learning proceeds upon receiving the training data. After a rule is generated, its free parameters are tuned by subsequent parameter learning. The following sections introduce detailed structure and parameter learning of the recurrent RBFN-based self-evolving fuzzy-neural-network (RRSEFNN).To improve the accuracy of the function approximation, a RBFN is adopted to implement the RBFN bases for the RRSEFNN in this paper. The architecture of a RBFN is shown in Fig. 2, which is a three-layer neural network including input, hidden, and output layer. Each output (i.e. H1, H2, …) formulated by a sub-RBFN is defined as a RBFN base. If the Gaussian function is selected as the receptive field function in the hidden layer and assuming that the input vector of the RBFN is X=[x1, x2, …, xn]T, where n is the number of external inputs and using the weighted sum method to calculate the output of the RBFN, then the output becomes:(14)Hˆj=∑k=1MWkjΦk(X)=W1jΦ1+W2jΦ2+W3jΦ3+⋯+WMjΦM,j=1;…;Mandk=1;…;M(15)Φk(X)=exp[−(X−μk)Tσk(X−μk)]whereHˆjdenotes the jth of the RBFN base is the jth output of the local model for the jth rule, the link weight Wkjis the connected weight between the hidden layer and the output layer of the RBFN model, Φkis the kth output of the hidden layer of the RBFN, the mean vector and the standard deviation vector of the Gaussian functions are μk=[μ1k, μ2k, …, μik]Tandσk=[1/σ1k2,1/σ2k2,…,1/σik2]T, μikand σikare the mean and standard deviation of the kth neuron in the hidden layer of the ith input of the RBFN, M denotes the number of the RBFN bases and the receptive field units in the hidden layer of the RBFN which equals the number of fuzzy rules in the RRSEFNN [43–54]. In the RRSEFNN, the RBFN bases do not exist in the initial state, and they are generated on line concurrently with the fuzzy rules using the structure learning.This section describes the structure of the recurrent RBFN-based SEFNN that employs RBFN to the consequent part of the RRSEFNN for enhancing network's performance. The recurrent structure of the proposed network is formed as an external loops and an internal feedback by feeding the rule firing strength of each rule to other rules and itself. The consequent part of fuzzy rules is composed of a RBFN for promoting the mapping ability. The architecture of the recurrent RBFN-based SEFNN is a six layer SEFNN embedded with dynamic feedback connections and an RBFN as shown in Fig. 3. The basic functions and signal propagation for each layer are described as follows [30–35].The RRSEFNN model realizes a fuzzy IF–THEN rule in the following form:(16)Rulej:IFx11isA˜1jandx21isA˜2j…andxijisA˜ij…andxnjisA˜njTHENHˆj=∑k=1MWkjΦk=W1jΦ1+W2jΦ2+W3jΦ3+⋯+WMjΦMy=∑i=1Nψqi(t).∑k=1MWkjΦk,q=1,…,nowherexijandHˆjare the input and local output variables,A˜ijis the linguistic term of the precondition part with a Gaussian membership function, n is the number of input variables, Wkjis the link weight of the local output, Φkis the basis function of the input variables, M is the number of basis function, and the Rule j is the jth fuzzy rule.ψqi(t)is the temporal firing strength. The operation functions of the nodes in each layer of the RRSEFNN model are described.Layer 1 (input layer):The inputs are crisp values. No computation is performed in this layer. Each node in this layer is an input node, which corresponds to one input variable and only transmits input values to the next layer directly. Therefore, there are no weights to be adjusted in this layer. xi=[x1, x2, …, xn].(17)yi(1)=xiwhere xirepresents the ith input to the node of layer 1.Layer 2 (membership function layer):Each node in this layer defines a Gaussian membership function (MF) and performs a fuzzification operation. For ith fuzzy setA˜ijon the input variable xj, j=1, …, n, a Gaussian MF in this layer is(18)uj(2)=yj(1)(19)yj(2)=λA˜(xj)=exp−12uj(2)−μjiσji2whereuj(2)andyj(2)are the input and output of the jth node in this layer, respectively; andμjiandσjiare the associated mean and variance of the Gaussian MF of the jth term of the ith input variable xi.Layer 3 (spatial firing layer):Nodes in this layer represent the preconditioned part of a fuzzy logic rule that computes the firing strength. Since this layer does not depend on any temporal input, we call this layer “spatial” to distinguish it from the “temporal” firing strength computed in the next layer. As a result, each node in this layer is represented by the algebraic product operation. There are M nodes in this layer and the spatial firing strength ϕiis computed as(20)uj(3)=yj(2)(21)yj(3)=ϕi=∏j=1nuj(3),i=1,…,Nwhere N is the total number of rules.Layer 4 (temporal firing layer):Each node in this layer is a recurrent rule layer node that forms an internal feedback (self-loop). The out put of a recurrent rule node is a temporal firing strengthψqi(t), which depends not only on the current spatial firing strength ϕi(t) but also on the previous temporal firing strengthψqi(t−1). The temporal firing strengthψqi(t)is a linear combination of the spatial firing strength ϕi(t) and the previous temporal firing strengthψqi(t−1). The combination equation is given by:(22)uj(4)=yj(3)(23)yj(4)=∑ϖqi⋅yj(3)(t)+(1−ϖqi)⋅ψqi(t−1)and hence,(24)ψqi(t)=∑ϖqi⋅ϕi(t)+(1−ϖqi)⋅ψqi(t−1)i=1,…,Nandq=1,…,nowhere0≤ϖqi≤1represents the recurrent feedback weight that determine the contribution ratio between the current and previous inputs to the network outputs. The feedback weights are initialized with random numbers uniformly generated from the interval [0,1] and then learned through the gradient descent algorithm.Layer 5 (consequent layer):Nodes in this layer are called consequent nodes. The input to a node in layer 5 is the output from layer 4yj(4)and the other inputs are nonlinear combinations of the input variables from an RBFNHˆj. For such node(25)uj(5)=yj(4)(26)yj(5)=yj(4).∑k=1MWkjΦk=ψqi.∑k=1MWkjΦki=1,…,Nandq=1,…,noLayer 6 (output layer):Each node in this layer corresponds to a single output variable. The output node in layer 6 integrates all of the actions from layers 4 and 5 and acts as a center of area defuzzifier.(27)uj(6)=yj(5)(28)yo(6)=Hˆj⋅∑i=1Nyi(4)∑i=1Nyi(4)=∑i=1Nψqi(t)⋅∑k=1MWkjΦk∑i=1Nψqi(t)q=1,…,no(29)yo(6)=UqsRRSEFNNC(t)=Qˆ(υ)whereUqsRRSEFNNC(t)is the RRSEFNN controller output.This section presents an on-line learning algorithm for constructing the RRSEFNN model. The proposed learning algorithm comprises a structure learning phase and parameter learning phase. Fig. 4shows the flow chart of the structure/parameter learning for the recurrent RBFN-based SEFNN model. The RRSEFNN simultaneously uses the two types of learning to evolve structure and parameter learning. Initially, there are only input and output nodes in the RRSEFNN without any membership, rule and recurrent nodes in the RRSEFNN and the hidden and output nodes in the RBFN. The membership, the rule and the recurrent nodes in the RRSEFNN and the neurons of the hidden and output layer in the RBFN are generated automatically and dynamically in the learning process according to the on-line incoming data by performing the structure and parameter learning processes. Structure learning is used to evolve fuzzy rules and fuzzy sets on-line. The parameter learning phase is based on the gradient descent algorithm. After a rule is generated, its free parameters are tuned by subsequent parameter learning. The following sections introduce detailed structure and parameter learning algorithms [30,31,35].The structure learning algorithm is responsible for on-line rule generation. The first step in structure learning is to determine when to generate a new rule. The way the input space is partitioned determines the number of rules extracted from the training data, as well as the number of fuzzy sets in the universe of discourse for each input variable because one cluster in the input space corresponds to one fuzzy rule, in whichμjirepresents the mean andσjirepresents the variance of that cluster. The spatial firing strength ϕiin (21) is used to determine whether a new rule should be generated. The first incoming data point xi(0) is used to generate the first fuzzy rule. The mean and variance of the fuzzy membership functions associated to this rule and the corresponding weight link for the consequent part are set as:(30)μj1=xj(0)(31)σj1=m(32)Wkj1=r(33)ϖq1=rwhere xjis the new incoming data, j=1, …, n, m is a prespecified constant (m=0.35 in this paper) that determine the width of the memberships associated with a new rule and r∈[−1, +1] is a random variable. For subsequent new incoming data xi(t)=[x1, x2, …, xn], we find(34)I=argmax1≤j≤m(t)ϕi(xj(t))where m(t) denotes the number of existing rules at a time t. According to the degree measure, the criterion for generating a new fuzzy rule and a new RBFN base for new incoming data is described as follows. Find the maximum degreefcI(x)(35)fcI(x)=max1≤j≤m(t)ϕjIffcI(x)≤ϕth, then a new rule and a new RBFN base are generated, where ϕth∈[0, 1] denotes a prespecified threshold, then the new fuzzy rule is generated and the number m(t) is incremented by one, m(t+1)=m(t)+1. Because the generation of a membership function corresponds to the generation of a new fuzzy rule and a new RBFN base, the link weights and the feedback weights, Wkjandϖqiassociated with a new fuzzy rule and a new RBFN base have to be decided. Generally, the link weights are selected with prespecified constants. Once a new rule has been generated, the next step is to decide whether or not to generate a new fuzzy set and a new RBFN base on each input variable. The idea behind (34) is applied to one-dimensional space in an RRSEFNN where the membership valueA˜ij(xj)of each input is directly used as the fuzzy set generation criterion for deciding if a new fuzzy set should be generated. For each newly generated rule, compute(36)Ij=argmax1≤j≤pj(t)A˜ij(xj(t)),j=1,…,nwhere pj(t) is the number of fuzzy sets in the input variable xj. IfA˜ij(xj)>Ath, where Ath∈[0, 1] is a prespecified threshold, then use the fuzzy setA˜ijas the antecedent part of the new rule in input variable j. Otherwise, generate a new fuzzy set in the jth input variable and set pj(t+1)=pj(t)+1. Once a new rule has been generated, it should be assigned with the initial mean and variance to the new membership function and the corresponding link weight for the consequent part. Since, the goal is to minimize an objective function, the mean, variance and weight are all adjusted in the parameter learning phase. Hence, the mean, variance and weight for the new rule are set as(37)μjpj(t+1)=xj(t)(38)σjpj(t+1)=β[xj(t)−μjIj](39)Wkjpj(t+1)=r∈[−1,+1](40)ϖqpj(t+1)=r∈[−1,+1]where β>0 determines the overlap degree between two fuzzy sets. The phenomenon of high overlapping between fuzzy sets occurs when β is too large and there is almost no overlapping if when β is too small. In this paper, β is set at 0.5 so that the width of the new fuzzy set is half the distance between the centers of the new fuzzy set and fuzzy set at Ijand a suitable overlapping between these two fuzzy sets is generated [30,31,35,51,52]. The whole algorithm for the generation of new fuzzy rules and fuzzy sets in each input variable is as follows. No rule is assumed to exist initially.Step 1: IF xiis the first incoming pattern THEN do{Generate a new fuzzy rule, assign initial width and center of each antecedent fuzzy setwith mean μi1=xi, variance σi1=σinit,weight of feedback ϖq1=r∈[−1, +1],weight of consequent part Wkj1=r∈[−1, +1],where σinitis a prespecified constant.}Step 2: ELSE for each succeeding incoming xi, do{FindI=argmax1≤j≤m(t)ϕi(xj(t))IFfcI(x)≤ϕthTHEN do{Generate a new fuzzy rule, m(t+1)=m(t)+1For J=1,….,n{FindIj=argmax1≤j≤pj(t)A˜ij(xj(t)),j=1,…,nIFA˜ij(xj)>AthTHEN do{use the fuzzy setA˜ijas antecedent part of the new rule m(t+1)}ELSE{Generate a new fuzzy set, pj(t+1)=pj(t)+1,set width and center of the new fuzzy setwith meanμjpj(t+1)=xj(t), varianceσjpj(t+1)=β[xj(t)−μjIj]weight of feedbackϖqpj(t+1)=r∈[−1,+1],weight of consequent partWkjpj(t+1)=r∈[−1,+1]}}}}The aforementioned structure learning algorithm shows that RRSEFNN automatically stops the generation of rules iffcI(x)>ϕthfor incoming data, indicating that all input data have been suitably covered by the existing fuzzy rules geometrically. Parameters of each evolved rules are modified by the parameter learning algorithm introduced in the next section.The parameter learning phase occurs concurrently with the structure learning phase. For each piece of incoming data, all free RRSEFNN parameters are tuned, whether the rules are newly generated or originally existent. For clarification, we consider the single output case, where the objective is to minimize the error function Eθ using the supervised gradient-descent method. The energy function is chosen as:(41)Eθ=12[θrm−θr]2=12[eθm]2whereθrm(t)is the desired response, θr(t) is the actual output andeθmis the error signal between the desired response and of the RRSEFNN. There are two parts in the parameter learning. The first one is the consequent part and the second is the antecedent part. Parameters in the consequent part are learned based on the variable-dimensional Kalman filter algorithm as discussed in [30,35,51–53]. The RRSEFNN output in (28) can be expressed as(42)y=Ψ(t)T⋅Wand(43)Ψ(t)T=ψqi(t)∑i=1Nψqi(t)⋅Φkwhere(44)Ψ(t)T=ψq1(t).∑i=1Nψqi(t).Φ1,…,ψq1(t).∑i=1Nψqi(t).ΦM︸M+1,…,ψqN(t).∑i=1Nψqi(t).Φ1,…,ψqN(t).∑i=1Nψqi(t).ΦM︸M+1∈ℜ1×(M+1)×Nand(45)W=[W10,…,W1M,…,WN0,…,WMN]T∈ℜN×(M+1)×1and(46)Φk(X)=exp[−(X−μk)Tσk(X−μk)]k=1,…,M,X=x1,…,xnThe consequent parameter vector W is updated by executing the following variable-dimensional Kalman filtering algorithm:(47)W(t+1)=W(t)+G(t+1)Ψ(t+1)[y(t+1)−Ψ(t+1)W(t)](48)G(t+1)=1ϑG(t)−G(t)Ψ(t+1)ΨT(t+1)G(t)ϑ+ΨT(t+1)G(t)Ψ(t+1)where 0<ϑ≤1 is a forgetting factor. Once a new rule is generated, the dimension of the vectors W and Ψ and the matrix G increases accordingly. When a new rule evolves at time (t+1), the new vector Ψ(t+1) becomes(49)Ψ(t+1)T=ψq1(t)∑i=1N+1ψqi(t)⋅Φ1,…,ψq1(t)∑i=1N+1ψqi(t)⋅ΦM︸M+1,…,ψqN+1(t)∑i=1N+1ψqi(t)⋅Φ1,…,ψqN+1(t)∑i=1N+1ψqi(t)⋅ΦM︸M+1∈ℜ1×(M+1)×(N+1)The RRSEFNN augments Ψ(t) and G(t) in the right side of (63) as follows:(50)WnewT(t)=[WT(t)W(N+1)0,…,W(N+1)M]T∈ℜ(N+1)×(M+1)×1(51)Gnew(t)=block diag[G(t),C⋅I]∈ℜ(N+1)×(M+1)×(N+1)×(M+1)where C is a large positive constant.The antecedent parameters of the RRSEFNN are tuned by gradient descent algorithm. The gradient descent algorithm and the variable-dimensional Kalman filter algorithm are performed once for each time that incoming data are received. By using the gradient descent algorithm, the recurrent weights, mean and variance are updated as follows:Layer 6: output layerIn the output layer (layer 6), there are no parameter to be tuned in this layer. Only the error term to be propagated is calculated as:(52)δo(6)=−∂Eθ∂yo(6)=−∂Eθ∂eθm⋅∂eθm∂yo6()=−∂Eθ∂eθm⋅∂eθm∂θr⋅∂θr∂yo(6)Layer 5: consequent layerIn the consequent layer (layer 5), the error term to be propagated is calculated as:(53)δj(5)=−∂Eθ∂yj(5)=−∂Eθ∂yo(6)⋅∂yo(6)∂yj(5)=δo(6)1∑i=1Nyi(4)=δo(6)1∑i=1Nψqi(t)q=1,…,noAccording to (53), the weights in the RBFN are updated using the following equation.(54)ΔWkj=−ηW∂Eθ∂Wkj=−ηW∂Eθ∂yj(5)∂yj(5)∂Wkj=ηWδj(5)⋅yj(4)⋅Φk=ηWδj(5)⋅ψqi⋅Φkwhere ηWis the learning rate parameter of the connecting weights of the RBFN.The weights of the consequent layer (layer 5) are updated according to the following equation.(55)Wkj(t+1)=Wkj(t)+ΔWkjLayer 4: temporal firing layerIn the temporal firing layer (layer 4), the error term is calculated as follows:(56)δj(4)=−∂Eθ∂yj(4)=−∂Eθ∂yj(5)⋅∂yj(5)∂yj(4)=δj(5)⋅∑k=1MWkjΦkAccording to (56), the recurrent feedback weightsϖqiare updated using the following equation.(57)Δϖqi=−ηϖ∂Eθ∂ϖqi=−ηϖ∂Eθ∂yj(6)∂yj(6)∂ψqi⋅∂ψqi∂ϖqi=ηϖδj(6)⋅∑k=1MWkjΦk∑i=1Nψqi(t)⋅[ϕi(t)−ψqi(t−1)]=ηϖδj(6)⋅Hˆj∑i=1Nψqi(t)⋅[ϕi(t)−ψqi(t−1)]where ηϖis the learning rate parameter of the recurrent feedback weights of the temporal firing layer of the RRSEFNN.The weights of the temporal firing layer (layer 4) are updated according to the following equation.(58)ϖqi(t+1)=ϖqi(t)+ΔϖqiLayer 3: spatial firing layerIn the spatial firing layer (layer 3), the error term to be propagated is calculated as:(59)δj(3)=−∂Eθ∂yj(3)=−∂Eθ∂yj(4)⋅∂yj(4)∂yj(3)=δj(4)ϖqiLayer 2: membership function layerIn the membership function layer (layer 2), the error term is calculated as follows:(60)δj(2)=−∂Eθ∂∂yj(2)=−∂Eθ∂yj(4)⋅∂yj(4)∂yj(3)⋅∂yj(3)∂∂yj(2)=δj(3)⋅∏j=1nyj(2)The update laws of the meanμjiand varianceσjiare given:(61)Δμji=−ημ∂Eθ∂μji=−ημ∂Eθ∂yj(6)⋅∂yj(6)∂yj(4)⋅∂yj(4)∂yj(3)⋅∂yj(3)∂yj(2)⋅∂yj(2)∂μji=ημδj(6)∂yj(6)∂ψqi⋅∂ψqi∂ϕi⋅∂ϕi∂λA˜⋅∂λA˜∂μji=ημδj(6)⋅Hˆj∑i=1Nψqi(t)⋅ϕi⋅ϖqi⋅2(yj(1)−μji)(σji)2(62)Δσji=−ησ∂Eθ∂σji=−ησ∂Eθ∂yj(6)⋅∂yj(6)∂yj(4)⋅∂yj(4)∂yj(3)⋅∂yj(3)∂yj(2)⋅∂yj(2)∂σji=ησδj(6)∂yj(6)∂ψqi⋅∂ψqi∂ϕi⋅∂ϕi∂λA˜⋅∂λA˜∂σji=ησδj(6)⋅Hˆj∑i=1Nψqi(t)⋅ϕi⋅ϖqi⋅2(yj(1)−μji)(σji)32where ημand ησare the learning rate parameters of the mean and variance. The mean and variance are updated as follows:(63)μji(t+1)=μji(t)+Δμji(t)(64)σji(t+1)=σji(t)+Δσji(t)In order to control the position of the PMSM effectively, an adaptive hybrid control system (AHCS) is proposed in this section. The configuration of the proposed AHCS using RRSEFNN is shown in Fig. 1. The control problem is to find a control law so that the rotor position θr(t) can track the desired commandθrm(t). First, the sliding-mode control system is used to derive the ideal equivalent control law (IECL), Ueq(t), which determines the dynamic of the PMSM servo drive system on the sliding surface. Then, the computed torque controller (CTC) is designed to stabilize the PMSM servo drive system and to approximate the IECL and the stability analysis of the CTC is carried out. Since the parameter variations of the servo drive system are difficult to measure and the exact values of the external disturbances are also difficult to know in advance for practical applications, the CTC law cannot be implemented practically. Therefore, the RRSEFNN is proposed to approximate the nonlinear function Q(υ), which contains the effects of parameter variations and external load disturbances while the robust controller is used to compensate the approximation error of the RRSEFNN. The design of the proposed AHCS as well as the stability analysis is introduced.The control objective is to find a control law so that the rotor position of the PMSM can track any desired command despite of uncertainties exist in the dynamic model. To achieve this control objective, we can define the error position function,eθ(t)=[θrm(t)−θr(t)]. The sliding surface can be defined as a PID performance tracking measure and is given by(65)S(t)=e˙θ(t)+λ1eθ(t)+λ2∫0teθ(τ)dτwhere the positive constants λ1 and λ2 are designed based on the desired drive system dynamics in time domain, such as rise time, overshoot and settling time. Differentiating S(t) with respect to time will give:(66)S˙(t)=e¨θ(t)+λ1e˙θ(t)+λ2eθUsing the differentiation of the error position function,e˙θ(t)=[θ˙rm(t)−θ˙r(t)], and (9) and substituting into (66) will yield:(67)S˙(t)=[θ¨rm−θ¨r(t)+λ1e˙θ(t)+λ2eθ(t)](68)S˙(t)=[θ¨rm−Amnθ˙r(t)−Bmn.U(t)−Γ(t)+λ1e˙θ(t)+λ2eθ]In the design of the sliding-mode control system, the ideal equivalent control law, Ueq(t), which determines the dynamics of the PMSM drive system on the switching surface, is derived. The ideal equivalent control law is derived fromS˙(t)=0.(69)S˙(t)U(t)=Ueq(t)=0Applying this equality to (68) will provide(70)[θ¨rm−Amnθ˙r(t)−Bmn.U(t)−Γ(t)+λ1e˙θ(t)+λ2eθ(t)]=0Solving (70), we can obtain(71)Ueq(t)=Bmn−1[θ¨rm−Amnθ˙r(t)−Γ(t)+λ1e˙θ(t)+λ2eθ]Thus, forS˙(t)=0, the dynamic of the system on the sliding surface a t≥0 is given by(72)e¨θ(t)+λ1e˙θ(t)+λ2eθ=0The choice of a suitable values for λ1 and λ2 means that the desired drive system dynamics such as rise time, overshoot and settling time can be easily designed by using second order system. However, if the PMSM parameters are perturbed, the ideal equivalent control law cannot guarantee the performance specified by (71). Moreover, the stability of the PMSM drive system may be destroyed. To ensure the system performance (72), in spite of the existence the uncertain dynamics, an AHCS based on the computed torque control is proposed in the following sections.The control objective is to ensure that the PMSM servo drive system tracks a desired command despite of uncertainties exist in the dynamic model. According to (65),e˙θ(t)=S(t)−λ1eθ(t)−λ2∫eθ(τ)dτ, (68) and (70), the ideal equivalent control law in (71) can be rewritten as(73)Ueq(t)=Bmn−1[AmnS(t)−S˙(t)]+Qwhere(74)Q=Bmn−1[θ¨rm(t)+λ1e˙θ(t)+λ2eθ(t)]−Amnθ˙rm(t)+λ1eθ(t)+λ2∫eθ(τ)dτ−Γ(t)The computed torque control law is designed to approximate the ideal equivalent control law and is assumed to take the following form(75)UqsCTC(t)=Ueq(t)=Q−u(t)in which u(t) is an auxiliary controller. Substituting (75) into (73), the auxiliary controller as function of the closed loop system dynamics is given by(76)u(t)=Bmn−1S˙(t)−Bmn−1AmnS(t)where Ueq(t) is the ideal equivalent control effort, Q is a nonlinear function includes the lumped uncertainty of the PMSM servo drive system and is function of υ,υ=[eθe˙θθrmθ˙rmθ¨rm]T, u(t) is the new control input,θrm(t)andθ˙rm(t)are the desired rotor position and speed of the PMSM servo drive;eθm(t)ande˙θm(t)denote the rotor position and speed errors. In the computed torque control, a PID controller is designed to be the auxiliary control input u(t). Let us specify the PID controller has(77)u(t)=−KDe˙θ(t)+KPeθ(t)+KI∫0teθ(τ)dτwhere KP, KIand KDare the control gains and positive constants. If we choose KP=λ1×KDand KI=λ2×KDand substituting in (77) will yield(78)u(t)=−KDe˙θ(t)+λ1eθ(t)+λ2∫0teθ(τ)dτ=−KDS(t)From (78) and (76), the closed-loop system can be rewritten as(79)Bmn−1S˙(t)=Bmn−1AmnS(t)−KDS(t)=(Bmn−1Amn−KD)S(t)Define the Lyapunov function candidate as(80)V1(S(t))=−12S(t)Bmn−1S(t)Taking the derivative of the Lyapunov function and using (79) and using (76), we can obtain(81)V˙1(S(t))=S(t)Bmn−1S˙(t)=−S(t)[Bmn−1Amn−KD)S(t)≤0SinceV˙1(S(t))≤0,V˙1(S(t))≤0is a negative semi-definite function (i.e. V1(S(t))≤V1(S(0))), which implies that S(t) is bounded function. Let the functionΛ1(t)=−S(t)[Bmn−1Amn−KD)S(t)≤−V1and integrate the function Λ1(t) with respect to time yields:(82)∫0tΛ1(τ)dτ≤V1(S(0))−V1(S(t))Since V1(S(0)) is bounded and V1(S(t)) is non-increasing and bounded, the following result can be obtained:(83)limt→∞∫0tΛ1(τ)dτ≤∞In addition,Λ˙1(t)is bounded. By using Barbalat's Lemma [77] and [78], it can be shown thatlimt→∞Λ1(t)=0. That is, S(t)→0 as t→∞. As a result, the computed torque control is stable. Moreover, the tracking error of the system will converges to zero according to S(t)→0.The computed torque control lawUqsCTC(t)consists of two parts, the first one Q(υ) and the second u(t). The two parts depend on the choice of the values for λ1 and λ2 and the PMSM parameters. The choice of a suitable values for λ1 and λ2 means that the desired PMSM servo drive system dynamics such as rise time, overshoot and settling time can be easily designed by using second order system. However, if the PMSM parameters are perturbed, the control law cannot guarantee the performance specified by (72). From (74), the nonlinear function, Q(υ), contains the effects of parameter variations and external load disturbances. Since the parameter variations of the PMSM servo drive system are difficult to measure and the exact value of the external load disturbances are also difficult to know in advance for practical applications, the computed torque control law shown in (75) cannot be implemented practically. Moreover, to ensure the stability of the PMSM drive despite the existence of the uncertain dynamics and external load disturbance, an RRSEFNN controller is proposed to learn the nonlinear function Q(υ) in the following sections.The structure of the adaptive hybrid control system using recurrent RBFN-based SEFNN is introduced. The proposed AHCS incorporates an auxiliary controller based on the sliding-mode technique, a recurrent radial basis function network (RBFN)-based self-evolving fuzzy-neural-network (RRSEFNN) controller and a robust controller. The RRSEFNN combines the merits of the self-evolving fuzzy-neural-network, recurrent-neural-network and RBFN. Moreover, it performs the structure and parameter-learning concurrently. Furthermore, the RRSEFNN is used to adaptively estimate the non-linear uncertainties online, yielding a controller that tolerates a wider range of uncertainties. Additionally, a robust controller is proposed to confront the uncertainties including approximation error, optimal parameter vector and higher order term in Taylor series. The online adaptive control laws are derived based on the sense of Lyapunov stability analysis, so that the stability of the AHCS can be guaranteed. The RRSEFNN is proposed to approximate the nonlinear function Q(υ) as(84)Uqs*(t)=Qˆ−u(t)(85)Qˆ=QˆRRSEFNN+UqsRC(t)whereQˆRRSEFNNis the output of the RRSEFNN controller andUqsRC(t)is the robust controller. The RRSEFNN controllerQˆRRSEFNNis used to learn the nonlinear function Q due to uncertain PMSM servo drive system dynamics and the robust controllerUqsRC(t)is designed to compensate the difference between Q andQˆRRSEFNN.The output of the RRSEFNN (29) can be represented as:(86)UqsRRSEFNNC(t)=QRRSEFNN(E,Θ,μ,σ)=ΘTΩwhere Θ∈ℜN×(M+1)×1 is the adjustable weights vector in the rule to output layer and Ω∈ℜ1×(M+1)×Nis the output vector of the membership layer,E=[eθe˙θ]∈ℜ2×1is the input state of the RRSEFNN. Define the vectors μ, σ,Wkj=wandϖqi=ϖ, collecting all parameters of the RRSEFNN as:(87)μj=[μ1j,μ2j,…,μij]σj=1σ1j2,1σ2j2,…,1σij2ϖ=[ϖ1i,…ϖnoi,…ϖq1,…,ϖqNw=[W10,…,W1M,…,WN0,…,WMN]i=1,…,Nandq=1,…,noAccording to the universal approximation property [12], there exists an optimal RRSEFN controllerQRRSEFNN*to learn the nonlinear function Q such that(88)Q(υ)=QRRSEFNN*(E,Θ*,μ*,σ*)+ε=Θ*TΩ*+εwhere ɛ is a minimum reconstructed error; and Θ*, μ* and σ* are the optimal parameters of Θ, μ and σ, respectively, in the RRSEFNN. Rewriting (85), we can obtain(89)Qˆ(υ)=QˆRRSEFNN(E,Θˆ,μˆ,σˆ)+UqsRC=ΘˆTΩˆ+UqsRCwhereΘˆ,μˆandσˆare the estimated values of the optimal parameters as provided by the tuning algorithms that will be introduced. subtracting (89) from (88), the approximation error,Q˜, is defined as:(90)Q˜=Q−Qˆ=Θ*TΩ*+ε−ΘˆTΩˆ−UqsRC=Θ˜TΩ*+ΘˆTΩ˜+ε−UqsRCwhereΘ˜=(Θ*−Θˆ)andΩ˜=(Ω*−Ωˆ). The weights of the RRSEFNN are updated online to make its output approximate the unknown nonlinear function Q(υ) accurately. To achieve this goal, the linearization technique is used to transform the nonlinear output of RRSEFNN into partially linear form so that the Lyapunov theorem extension can be applied. The expansion ofΩ˜in Taylor series is obtained as follows:(91)Ω˜=Ω˜1Ω˜2⋮Ω˜j=∂Ω1∂μ∂Ω2∂μ⋮∂Ωj∂μTμ=μˆμ˜+∂Ω1∂σ∂Ω2∂σ⋮∂Ωj∂σTσ=σˆσ˜+OQ≡ΩμTμ˜+ΩσTσ˜+OQwhereΩμ=∂Ω1∂μ∂Ω2∂μ⋯∂Ωj∂μTμ=μˆ,Ωσ=∂Ω1∂σ∂Ω2∂σ⋯∂Ωj∂σTσ=σˆ,μ˜=(μ*−μˆ),σ˜=(σ*−σˆ)and OQis a vector of higher order terms and assumed to be pounded by a positive constant. Rewriting (91), it can be obtained that(92)Ω*=Ωˆ+ΩμTμ˜+ΩσTσ˜+OQSubstituting (92) into (90) will yield(93)Q˜=Θ*TΩ*+ε−ΘˆTΩˆ−UqsRC=Θ*T[Ωˆ+ΩμTμ˜+ΩσTσ˜+OQ]+ε−ΘˆTΩˆ−UqsRC=Θ˜TΩˆ+ΘˆTΩμTμ˜+ΘˆTΩσTσ˜−UqsRC+Ξwhere the uncertain termΞ=Θ˜TΩμTμ˜+Θ˜TΩσTσ˜+Θ*TOQ+ε. According to (73), (76), (78), (84), (90) and (93), the dynamic equation can be represented as(94)Bmn−1S˙(t)=Bmn−1AmnS(t)−Uqs*(t)+Q=Bmn−1AmnS(t)−Qˆ+u(t)+Q=Bmn−1AmnS(t)+u(t)+Q˜=Bmn−1AmnS(t)+u(t)+[Θ˜TΩˆ+ΘˆTΩμTμ˜+ΘˆTΩσTσ˜−UqsRC+Ξ]TheoremConsider the PMSM servo drive system represented by(9), if the computed torque controller is designed as(84), the auxiliary control law is designed as(77), the intelligent control law is designed as(89), in which the adaptation laws of the RRSEFNN controller are designed as(95)–(97)and the robust controller is designed as(98)with the adaptive lumped uncertainty estimation algorithm given in(99). As a result, the stability of the adaptive hybrid control system can be guaranteed.(95)Θˆ˙=η1S(t)ΩˆT(96)μˆ˙=η2(S(t)ΘˆΩμ)T(97)σˆ˙=η3(S(t)ΘˆΩσ)T(98)UqsRC=Ξˆ(t)(99)Ξˆ(t)=η4S(t)where η1, η2, η3 and η4 are strictly positive learning rates andΞˆ(t)is the on-line estimated value of the uncertainty term Ξ.To minimize the error function and to derive the adaptation laws of Θ, μ, σ and Ξ for the adaptive hybrid control system, a Lyapunov function is defined as:(100)V2(S(t),Θ˜,μ˜,σ˜,Ξ˜(t))=−12S(t)Bmn−1S(t)+12η1Θ˜TΘ˜+12η2μ˜Tμ˜+12η3σ˜Tσ˜+12η4Ξ˜2(t)whereΞ˜=(Ξ−Ξˆ)is the estimated error. By taking the derivative of the Lyapunov function (100) with respect to time and using (78), (94), it is obtained that:(101)V˙2(S(t),Θ˜,μ˜,σ˜,Ξ˜(t))=−S(t)Bmn−1AmnS(t)+u(t)+[Θ˜TΩˆ+ΘˆTΩμTμ˜+ΘˆTΩσTσ˜−UqsRC+Ξ]−1η1Θˆ˙TΘ˜−1η2μˆ˙Tμ˜−1η3σˆ˙Tσ˜−1η4Ξ˜(t)Ξˆ˙(t)=S(t)(Bmn−1Amn−KD)S(t)+S(t)[Θ˜TΩˆ+ΘˆTΩμTμ˜+ΘˆTΩσTσ˜−UqsRC+Ξ]−1η1Θˆ˙TΘ˜−1η2μˆ˙Tμ˜−1η3σˆ˙Tσ˜−1η4Ξ˜(t)Ξˆ˙=S(t)(Bmn−1Amn−KD)S(t)+Θ˜ΩˆS(t)−1η1Θˆ˙+S(t)ΘˆΩμ−1η2μˆ˙Tμ˜−S(t)ΘˆΩσ−1η3σˆ˙Tσ˜+S(t)(Ξ−UqsRC)−1η4Ξ˜(t)Ξˆ˙(t)If the adaptation laws of RRSEFNN controller are chosen as (95)–(97) and the robust controller is designed as (98) with the adaptive pound estimation algorithm (99), then (101) can be rewritten as follows:(102)V˙2(S(t),Θ˜,μ˜,σ˜,Ξ˜(t))=S(t)(Bmn−1Amn−KD)S(t)+S(t)(Ξ−UqsRC)−1η4Ξ˜(t)Ξˆ˙(t)=S(t)(Bmn−1Amn−KD)S(t)+S(t)(Ξ−Ξˆ(t))−Ξ˜(t)S(t)=S(t)(Bmn−1Amn−KD)S(t)+S(t)Ξ˜(t)−Ξ˜(t)S(t)=S(t)(Bmn−1Amn−KD)S(t)≤0SinceV˙2(S(t),Θ˜,μ˜,σ˜,Ξ˜(t))≤0,V˙2(S(t),Θ˜,μ˜,σ˜,Ξ˜(t))is a negative semi-definite function (i.e.V˙2(S(t),Θ˜,μ˜,σ˜,Ξ˜(t))≤V˙2(S(0),Θ˜,μ˜,σ˜,Ξ˜(0))), which implies that S(t),Θ˜,μ˜,σ˜andΞ˜(t)are bounded functions. Let the functionΛ2(t)=−S(t)[Bmn−1Amn−KD)S(t)≤−V2and integrate the function Λ2(t) with respect to time yields:(103)∫0tΛ2(τ)dτ≤V2(S(0),Θ˜,μ˜,σ˜,Ξ˜(0))−V2(S(t),Θ˜,μ˜,σ˜,Ξ˜(t))SinceV2(S(0),Θ˜,μ˜,σ˜,Ξ˜(0))is bounded andV2(S(t),Θ˜,μ˜,σ˜,Ξ˜(t))is non-increasing and bounded, the following result can be obtained:(104)limt→∞∫0tΛ2(τ)dτ≤∞In addition,Λ˙2(t)is bounded. By using Barbalat's Lemma [77] and [78], it can be shown thatlimt→∞Λ2(t)=0. That is, S(t)→0 as t→∞. As a result, the proposed adaptive hybrid control system is stable. Moreover, the tracking error of the system will converges to zero according to S(t)→0.□The design steps of the AHCS are summarized as follows:Step (1) Initialize the predefined parameters of RRSEFNN,Step (2) The learning algorithm for the RRSEFNN model is given in Fig. 3. The details of the structure learning are also given in (30)–(40) and (41)–(64) for parameter learning,Step (3) The tracking error vector is defined byE=[θrm−θrθ˙rm−θ˙r]T=[eθme˙θm]Tand the sliding surface is given in (65),Step (4) The output of recurrent radial basis function network (RBFN)-based self-evolving fuzzy-neural-network (RRSEFNN) controller is given byQˆ(υ)=QˆRRSEFNN(E,Θˆ,μˆ,σˆ)+UqsRC=ΘˆTΩˆ+UqsRC, whereΘˆ,μˆandσˆare the estimated values of the optimal parameters as provided by the tuning algorithms and are given by (95)–(97), respectively,Step (5) The proposed AHCS control law is designed as (13), the computed torque controller is designed as (84), the auxiliary control law is designed as (77), the intelligent control law is designed as (89), in which the adaptation laws of the RRSEFNN controller are designed as (95)–(97) and the robust controller is designed as (98) with the adaptive lumped uncertainty estimation algorithm given in (99),Step (6) Return to Step (2).In order to investigate the effectiveness of the proposed tracking control scheme, the simulation and experimentation of the computed torque controller and the AHCS are carried out using MATLAB/SIMULINK package based on the control system shown in Figs. 1 and 5. A DSP control board dSPACE DS1102 that is based on a TMS320C31 and TMS320P14 DSPs, is installed in the control computer which includes multi-channels of ADC, DAC, PIO and encoder interface circuits. Digital filter and frequency multiplied by four circuits are built into the encoder interface circuits to increase the precision of the speed and the position feedback signals and coordinate transformations. The sampling rate is chosen as 200μs and hence, the carrier frequency of the PWM inverter is 5kHz. The control interval of the position control loop is set at 1ms. The current-regulated PWM VSI is implemented using Mitsubishi intelligent power module (IPM) using IGBTs with rating of 50A, 1200V and a switching frequency of 15kHz and driven by a six SEMIKRON IGBT drivers. The DC-link LC filter components are an inductor of iron powder core with 250μH and a polypropylene-film capacitor with 5μF. The position acquisition has been performed with a 10,000 pulses/revolution incremental optical encoder. Therefore, the output of the frequency multiplier circuit is 40,000 pulses/revolution which results high precision of the speed/position measurement.The simulations results of the PMSM drive system are presented to verify the feasibility of the proposed AHCS under various operating conditions. To investigate the robustness of the proposed controllers, four cases including parameter uncertainties (PU) and external load disturbance are considered. The electrical and mechanical time constants are τs=(Ls/Rs) and τm=(βm/Jm).Case 1: 1.0×(Ls/Rs), 1.0×(βm/Jm), 1.00×λm, TL=0−3.6NmCase 2: 0.5×(Ls/Rs), 1.5×(βm/Jm), 0.85×λm, TL=0−3.6NmCase 3: 1.5×(Ls/Rs), 3.0×(βm/Jm), 1.25×λm, TL=0−3.6NmCase 4: 1.5×(Ls/Rs), 5.0×(βm/Jm), 1.25×λm, TL=0−3.6NmThe dynamic performance of the PMSM servo drive due to reference model command of 2π rad under subsequent loading of 3.6Nm for the recurrent self-evolving fuzzy neural network (RSEFNN) position tracking controller at Case (1) of PU including the responses of the reference model and rotor position, the tracking position error, rotor speed, the tracking speed error, d–q axis current response and adaptive control signals are predicted as shown in Fig. 6(a), respectively. On the other hand, the dynamic performance of the PMSM servo drive using the AHCS with the recurrent RBFN-based self-evolving fuzzy neural network position tracking controller is shown in Fig. 6(b) at Case (1) of PU. The disturbance rejection capabilities have been checked when a load of 3.6Nm is applied to the shaft at t=1.45s. Enlarge dynamic response of Fig. 6 is illustrated in Fig. 7. The results obtained in Figs. 6 and 7 illustrate good dynamic performances, in command tracking and load regulation performance, are realized for both position tracking controllers. Improvement of the control performance by addition the proposed AHCS controller can be observed from the obtained results. From these results shown in Figs. 6 and 7, the tracking position and speed errors with the RSEFNN controller are larger than the ones using the AHCS. In addition, the dynamic performance of the PMSM servo drive system at no-load for both position tracking controllers at Case (1) of PU is illustrated in Fig. 8.To further verify the performance robustness of the proposed control schemes, four cases of PU and external load disturbance are considered, Cases (1–4), for comparison. The dynamic performance of the PMSM servo drive for both positions tracking controllers at all cases of PU is predicted in Fig. 9. Furthermore, the maximum tracking position errors at nominal parameters, Case (1) of PU is approximately 0.2103rad, for the proposed computed torque control system. In addition, the maximum tracking position errors at nominal parameters and full loading condition, Case (1) of PU is approximately 0.01512rad, for the RSEFNN controller. On the other hand, the one with the AHCS at the same case is approximately equals 0.07875rad. The maximum position regulation dips at four cases of PU are constant and equal to 0.1512rad, for the proposed RSEFNN controller. On the other hand, the ones with the AHCS at the four cases of PU are approximately constant and equal to 0.07875rad. From the simulation results shown in Fig. 9, the tracking errors converges quickly and the robust control characteristics of the proposed RSEFNN controller and AHCS under the occurrence of PU can be clearly observed. Compared with the computed torque controller, the tracking errors and regulation characteristics are reduced. Therefore, the proposed control schemes, RSEFNNC and AHCS, can yield superior control performance than the computed torque control as shown in Tables 2–6. Thus, it can be verified that the proposed AHCS at all cases of PU can satisfy the robustness, the accuracy requirements and is more suitable in the tracking control of the PMSM servo drive for industrial applications.To further verify the performance of the proposed control schemes applied to the PMSM servo drive in practical applications, some experimental results are introduced. The experimental results of the dynamic performance for the proposed RSEFNN controller due to reference model command under subsequent loading of 3.6Nm at Case (1) of PU including the responses of the reference model and rotor position, the tracking position error, rotor speed, the tracking speed error, d–q axis current response and adaptive signals are predicted in Fig. 10(a), respectively. On the other hand, the experimental results of the PMSM servo drive using the proposed AHCS is shown in Fig. 10(b) at the same conditions. Furthermore, the disturbance rejection capabilities have been checked for both position controllers. In addition, the maximum tracking position errors at nominal parameters, Case (1) of PU is approximately 0.2101rad, for the computed torque control system. As well, the maximum tracking position errors at nominal parameters and full loading condition, Case (1) of PU is approximately 0.01514rad, for the RSEFNN controller. On the other hand, the one with the AHCS at the same case is approximately equals 0.07877rad. The enlarge dynamic response of Fig. 10 is illustrated in Fig. 11. The experimental results obtained in Figs. 10 and 11 clearly illustrate good dynamic performances, in command tracking and load regulation performance, are realized for both position tracking controllers. Compared with the computed torque control, the tracking errors and regulation characteristics are much reduced for the proposed RSEFNN controller and the AHCS. Therefore, the proposed control schemes, RSEFNNC and AHCS, can yield superior control performance than the computed torque controller as shown in Table 6. It is obvious that the performance of the PMSM servo drive system using RSEFNN controller and the AHCS is improved greatly. In addition, the dynamic performance of the PMSM servo drive system at no-load for both position tracking controllers at Case (1) of PU is illustrated in Fig. 12. Thus, it can be verified that the proposed AHCS can satisfy the accuracy requirements and is more suitable in the tracking control of the PMSM servo drive system for practical applications. Although the proposed AHCS requires extra time to execute the computation operations and adaptive laws, it results in superior control performance compared with [22], CTC and RSEFNNC. However, recent developments in microelectronics and very large scale integration (VLSI) have pushed the performance of DSPs to an unprecedented level with lower cost. Today, high-performance DSPs can be used effectively to provide flexible environments with high execution rates for advanced control schemes.To measure the performance of the PMSM servo drive, the maximum tracking error, TEmax, the average tracking error, TEmean and the standard deviation (SD) of the tracking error, Tsd, are defined as follows:(105)TEmax=maxkT(k)2(106)TEmean=∑k=1nT(k)n(107)TEsd=∑k=1n(T(k)−TEmean)2nwhereT(k)=[θrm(k)−θr(k)].The performance measures can be easily demonstrated using the TEmax and the TEmean. Moreover, the oscillation of the position tracking error can be measured using TEsd. To further investigate the improvement of the proposed AHCS, the performance measures of the CTC, RSEFNNC and AHCS are compared and summarized in Tables 2–6 for simulation and Tables 7 and 8for experimentation. Tables 2–4 include the maximum tracking errors, average tracking errors and the standard deviation of the tracking errors at the four cases of parameters uncertainties whereas Tables 5 and 6 illustrate the percentage reductions in the tracking errors for both RSEFNNC and AHCS with respect to CTC control scheme at the same operating conditions. As well, Tables 7 and 8 show the percentage reductions in the tracking errors for both RSEFNNC and AHCS with respect to CTC control scheme at Case (1) of parameters uncertainties in experimentation. From these results, one can easily observe that high values of TEmax, TEmean and TEsdhave been successfully reduced by the proposed AHCS. Therefore, the AHCS possesses the best robust control characteristics and can control the PMSM servo drive system effectively.To further investigate the improvement of the proposed AHCS, the comparison of the control performance of the CTC, RSEFNNC and AHCS at the four cases of PU are compared using the percentage of the tracking error reductions with respect to CTC. The percentage reductions in the tracking errors for both RSEFNNC and AHCS with respect to CTC control scheme are given in Figs. 13–16. From the results, one can easily observe that the percentage reduction values of TEmax, TEmean and TEsdhave been effectively reduced by the proposed AHCS.This paper proposed an adaptive hybrid control system to control the rotor position of the PMSM servo drive which guarantees the robustness in the presence of parameter uncertainties and load disturbances. The proposed control scheme comprises an auxiliary controller based on the sliding-mode, a recurrent RBFN-based self-evolving fuzzy-neural-network controller and a robust controller. The AHCS combines the merits of the self-evolving fuzzy-neural-network, recurrent neural network and RBFN. The RRSEFNN learning started with an empty rule base and all of the rules have been generated and learned on line through a simultaneous structure and parameter learning. The consequent update parameters were derived by a variable-dimensional Kalman filter algorithm. The antecedent and recurrent feedback loop parameters have been learned using a gradient descent algorithm. The RRSEFNN controller was used to adaptively estimate the non-linear uncertainties, while the robust controller was designed with adaptive bound estimation algorithm to recover the residual of the approximation error via the RRSEFNN control system approximation. The online adaptive control laws were derived based on the Lyapunov stability analysis so that the stability of the PMSM servo drive can be guaranteed. The simulated and experimental results have successfully confirmed that the proposed AHCS grants robust performance and precise dynamic response to the reference model regardless of load disturbances and PMSM parameter uncertainties. Finally, the main contributions of this paper are: (i) the successful development, application and implementation of a new AHCS to control the rotor position of the PMSM servo drive system to track reference trajectory with robust control performance considering the existence of load disturbances and parameters uncertainties (ii) the successful development of a new recurrent RBFN-based self-evolving fuzzy-neural-network with the structure and parameter learning algorithms executing concurrently; (iii) the successful practical implementation of the recurrent RBFN-based self-evolving fuzzy-neural-network controller using DSP on a PMSM servo drive system. For future research, the proposed control scheme can be applied for identification and control of highly nonlinear dynamic systems and MIMO nonlinear systems. In addition, future studies will theoretically analyze the learning convergence of the recurrent RBFN-based self-evolving fuzzy-neural-network and examine possible practical applications to temporal problems with uncertainties such as magnetic levitation systems using linear induction motor (LIM) drive or permanent-magnet linear synchronous motor (PMSLM) drive in transportation systems, multi-axis motion control systems and robotic manipulators.

@&#CONCLUSIONS@&#
