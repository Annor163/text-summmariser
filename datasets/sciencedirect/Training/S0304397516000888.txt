@&#MAIN-TITLE@&#
Two-stage scheduling on identical machines with assignable delivery times to minimize the maximum delivery completion time

@&#HIGHLIGHTS@&#
Scheduling with delivery coordination.Identical machines and assignable delivery times.Minimize the maximum delivery completion time.A 3/2-approximation algorithm and a PTAS.

@&#KEYPHRASES@&#
Identical machines,Delivery coordination,Assignable delivery times,Approximation algorithm,Polynomial-time approximation scheme,

@&#ABSTRACT@&#
In this paper, we consider the two-stage scheduling problem in which n jobs are first processed on m identical machines at a manufacturing facility and then delivered to their customers by one vehicle which can deliver one job at each shipment. In the problem, a set of n delivery times is given in advance, and in a schedule, the n delivery times should be assigned to the n jobs, respectively. The objective is to minimize the maximum delivery completion time, i.e., the time when all jobs are delivered to their respective customers and the vehicle returns to the facility. For this problem, we present a32-approximation algorithm and a polynomial-time approximation scheme.

@&#INTRODUCTION@&#
Since Maggu and Das [13] first studied the scheduling problem with delivery coordination, the topic has attracted increasing attention of the scheduling research community. In order to be competitive, storage costs have to be reduced for enterprises. That is, all jobs are needed to be transported as soon as possible to another machine for further processing or to their customers. Thus, it is important for industry manufacturers to coordinate job production and job delivery. According to the transportation function, the problems on this topic can be classified into two types (see Lee and Chen [9]). The first type (type-1) involves intermediate transportation of the unfinished jobs from one machine to another for further processing. The second type (type-2) involves outbound transportation of the finished jobs from the machine(s) to their customer(s). In this paper, we study the scheduling problem with type-2 transportation.Potts [15] first studied the single machine scheduling problem with release dates and delivery times to minimize the maximum delivery completion time. In this problem, there is a sufficient number of vehicles so that each finished job can be delivered individually and immediately to its customer. A32-approximation algorithm was presented in [15] for the problem. Hall and Shmoys [6] presented two polynomial-time approximation schemes for the same problem. Woeginger [19] studied a similar problem in the parallel-machine environment in which the jobs have a common release date.Lee and Chen [9] studied several scheduling problems with type-2 transportation. In their problems, there are v vehicles with the same capacity c to transport all finished jobs. Soukhal et al. [17] and Yuan et al. [20] studied the two-machine flow-shop scheduling problem to minimize the maximum delivery completion time. They showed that the problem is binary NP-hard whenc=2and is strongly NP-hard whenc≥3even if the jobs have the same processing time on the first machine and all jobs have the same transportation time. Lu et al. [12] considered the single-machine scheduling with release dates in which only a vehicle can be used to deliver all jobs to a single customer. They showed that the problem is strongly NP-hard for each fixedc≥1and gave a heuristic with a tight worst-case performance ratio of53.Chang and Lee [2] extended Lee and Chen's model in [9] and gave an algorithm with the worst-case performance ratio of53by considering the situation where each job might occupy a different amount of physical space in a vehicle. He et al. [8] presented an improved approximation algorithm with the worst-case performance ratio of5335. For the same problem, Lu and Yuan [10] provided a heuristic with the best-possible worst-case performance ratio of32. Lu and Yuan [11] also extended Chang and Lee's problem in [2] on an unbounded parallel-batch machine. They showed that the problem is strongly NP-hard and gave a heuristic with a worst-case performance ratio of74. For the scheduling problem on two parallel machines, Zhong et al. [21] presented an improved algorithm with the worst-case ratio of53and Su et al. [18] proposed a heuristic with a worst-case performance ratio of6340, except for two particular cases. Dong et al. [4] considered a two-machine open-shop problem with one customer. They gave two algorithms with worst-case performance ratios of 2 for the casec≥2where each job might occupy a different amount of physical space and32for the casec=1, respectively. Chen et al. [3] presented a preemptive scheduling problem on identical machines, in which they showed that the problem is strongly NP-hard and gave an algorithm with the worst-case ratio of32. Pei et al. [14] investigated the setting in which the jobs are first processed in serial batches on a bounded serial batching machine at the manufacturer's site and then the batches are delivered to a customer by a single vehicle with limited capacity during the transportation stage, where the actual job processing time is a linear function of its starting time.Scheduling under the assumption of generalized due dates (GDD) was first introduced by Hall [7]. Under the GDD assumption, there are n jobs and n due dates given in advance, but each due date does not belong to a specific job. In a schedule, the n due dates are assigned to the jobs in the way that the job completed first is assigned the earliest due date, the job completed second is assigned the second due date, and so on. A flexible version of the GDD assumption, called assignable due dates (ADD), was introduced in Qi et al. [16]. Under the ADD assumption, the n due dates given in advance can be assigned to the n jobs independently.Inspired by the GDD assumption and the ADD assumption, we consider the scheduling with delivery coordination under the assumption of assignable delivery times (ADT). Under the ADT assumption, corresponding to the n jobsJ1,⋯,Jn, we have n delivery timesq1,⋯,qngiven in advance. In a schedule, the n delivery times are assigned to the n jobs, respectively. Let([1],⋯,[n])be a permutation of(1,⋯,n)so thatq[1]≥⋯≥q[n]. When the objective function to be minimized is the maximum delivery completion time of jobs, by using the two-exchange argument, we can show that, under every machine environment, there is an optimal schedule so that the n delivery times are assigned to the n jobs in the following way: the job completed first is assigned the maximum delivery timeq[1], the job completed second is assigned the second delivery timeq[2], and so on. Then the ADT assumption can be also understood as the assumption of generalized delivery times (GDT).The ADT assumption is also motivated by the following phenomenon in practical application: Apart from the processing and delivery of the jobsJ1,⋯,Jnfrom the customers, the manufacturer has n tasksT1,⋯,Tnin the customer center. Such tasksTimay include local transportation, repairing services, procurements, or collecting new orders. Suppose that the manufacturer has just one vehicle in working. Then a round of shipment of the vehicle consists of the following procedures: (i) deliver a processing completed jobJjto its customer in the customer center, (ii) execute a taskTiin the customer center, and (iii) return to the manufacturer. Suppose that, in a round of shipment, the time used in procedure (i) and (iii) is given byq′which is independent ofJjandTi, and the time used in procedure (ii) is given byqi′which is independent ofJj. Then the time used in this round of shipment of the vehicle is equal toqi=q′+qi′which only depends on the taskTi. Therefore, we regard eachqias a delivery time to be assigned. Fig. 1may help the reader to understand the model easily.In this paper, we consider the two-stage scheduling problem with delivery coordination under the ADT assumption. In the problem, a setN={1,2,⋯,n}of n jobs are first processed on m identical machines and then delivered to their customers by only one vehicle which can deliver one job at each shipment. Moreover, a set of n delivery times are given in advance, but each delivery time does not belong to a specific job. A schedule for the problem includes a processing scheme of the n jobs on the m machines, an assignment of the n delivery times to the n jobs, and a delivery scheme for the delivery of the n jobs, where a job j can be assigned a delivery time and delivered only if it has completed its processing and the only vehicle is available. The objective is to minimize the maximum delivery completion time, i.e., the time when all jobs are delivered to their respective customers and the vehicle returns to the facility. LetDjbe the delivery completion time of job j, i.e., the time when job j is delivered to its customer and the vehicle returns to the facility. We useDmaxto denote the maximum delivery completion time of all jobs. Following the classification scheme for scheduling problems by Graham et al. [5], the problem in consideration is denoted byP|ADT|Dmax.Note that the classical scheduling problemP||Cmaxis a special version of problemP|ADT|Dmax. Since problemP||Cmaxis strongly NP-hard, problemP|ADT|Dmaxis also strongly NP-hard. Then we study the approximation of problemP|ADT|Dmax. For this problem, we present a32-approximation algorithm and a polynomial-time approximation scheme (PTAS).The paper is organized as follows. In Section 2, we provide some useful notations and lemmas. A32-approximation algorithm for problemP|ADT|Dmaxis proposed in Section 3. A PTAS for problemP|ADT|Dmaxis presented in Section 4.The following notations are used in this paper.•N={1,2,⋯,n}is the set of n job indices.M={1,2,⋯,m}is the set of m machine indices.Q={q1,q2,⋯,qn}is the given set of delivery times to be assigned to the n jobs.pjis the processing time of job j.qj(σ)∈Qis the round-trip delivery time assigned to job j between the machine and the customer in schedule σ.p(J)=∑j∈Jpjis the sum of processing times of the jobs inJ⊆N.q(J)=∑j∈Jqj(σ)is the sum of delivery times assigned to the jobs inJ⊆Nin schedule σ.Sj(σ)is the processing starting time of job j on the machines in schedule σ.Cj(σ)is the processing completion time of job j on the machines in schedule σ.C(i)(σ)is the processing completion time of the last job on machine i in schedule σ. We also callC(i)(σ)the processing load of machine i in schedule σ.Cmax(σ)=max⁡{Cj(σ):1≤j≤n}is the makespan of schedule σ.Cmin(σ)=min⁡{C(i)(σ):1≤i≤m}is the minimum processing load of the machines.τj(σ)is the departure time (i.e., the delivery starting time) of job j in schedule σ. In our discussion, we require that σ is a feasible schedule. Thenτj(σ)≥Cj(σ)and the vehicle is available at timeτj(σ).Dj(σ)=τj(σ)+qj(σ)is the delivery completion time of job j in schedule σ.Dmax(σ)=max⁡{Dj(σ):1≤j≤n}is the maximum delivery completion time of all jobs in schedule σ.σ(i)is the i-th delivered job in schedule σ,1≤i≤n.β=(β(1),β(2),⋯,β(n))is the permutation of(1,2,⋯,n)so thatqβ(1)≥qβ(2)≥⋯≥qβ(n).By using the shifting argument and two-exchange argument, the following lemma can be easily verified.Lemma 2.1For problemP|ADT|Dmax, there is an optimal schedule σ with the following three properties:(i)Cσ(1)≤Cσ(2)≤⋯≤Cσ(n).τσ(i)(σ)=max⁡{Cσ(i)(σ),Dσ(i−1)(σ)}for1≤i≤n, whereDσ(0)(σ)=0.qσ(i)(σ)=qβ(i).Based on Lemma 2.1, we only need to consider schedules which have the three properties in Lemma 2.1. Such a schedule is completely determined by the processing scheme of the n jobs. For convenience, we always describe a schedule by the processing scheme.Suppose that the jobs in N are initially sorted in LPT order so thatp1≥p2≥⋯≥pn. For convenience, we suppose thatn≥8. Note that the problem would be trivial ifn≤m. Then we further assume thatn≥m+1. We defineLS=(1,2,⋯,n)and call LS the LPT list of the jobs in N. For eachi∈N, we defineLS(i)=(1,2,⋯,i). When no confusion can occur, we also useLS(i)to denote the instance{1,2,⋯,i}.For the classical scheduling problemP||Cmax, Graham et al. [5] presented a43−13mapproximation algorithm called List-LPT. We will use List-LPT as subroutines in our algorithm.List-LPT: At the current time t, if some machine is available and some job is unscheduled, then schedule the first unscheduled job in the list LS on the first available machine starting at time t.For problemP||Cmax, let π be the schedule obtained by List-LPT and letπ⁎be an optimal schedule. We call π the List-LPT schedule ofLS=N. For eachi∈N, we useπ|(1,⋯,i)to denote the subschedule of π restricted onLS(i). Thenπ|(1,⋯,i)is also a List-LPT schedule ofLS(i).Letz∈Nbe the minimum job index so that, in scheduleπ|(1,⋯,z), some machine receives three jobs. In the case that such an index z does not exist, we definez=n+1. Then the definition of z implies thatz≤min⁡{n+1,2m+1}≤2m+1. We further defineD(z)=pz−2+pz−1+pzifz∈NandD(z)=0ifz=n+1. For convenience, we setπ1=π|(1,⋯,z−1). Thenπ1is a List-LPT schedule ofLS(z−1)so that each machine has at most two jobs inπ1. It is implied in Graham et al. [5] thatπ1is an optimal schedule of problemP||Cmaxon instanceLS(z−1).Letσ⁎be an optimal schedule ofP|ADT|Dmax. ThenDmax(σ⁎)=max⁡{Dj(σ⁎):1≤j≤n}is the maximum delivery completion time of the jobs inσ⁎. We define(1)D=max⁡{1m⋅p(N)+qβ(n),maxj∈N⁡{pj+∑k=1jqβ(n+1−k)},Cmax(π1),D(z)}.Then we have the following useful lemma.Lemma 3.1Dmax(σ⁎)≥D,p(N)≤mD, andq(N)≤D.ProofRecall thatqβ(1)≥qβ(2)≥⋯≥qβ(n). In a feasible schedule, at least one job has a processing completion time of at least1m⋅p(N)and every job has a delivery time of at leastqβ(n). Hence, we haveDmax(σ⁎)≥1m⋅p(N)+qβ(n).To show thatDmax(σ⁎)≥maxj∈N⁡{pj+∑k=1jqβ(n+1−k)}, we fix an indexj∈Nand consider the jobs inLS(j). Each jobi∈LS(j)has a processing timepi≥pj, and so, completes no earlier thanpjinσ⁎. Since the j smallest delivery times are given byqβ(n+1−k),1≤k≤j, the total delivery time of the jobs inLS(j)is at least∑k=1jqβ(n+1−k)inσ⁎. It follows thatDmax(σ⁎)≥maxj∈N⁡{pj+∑k=1jqβ(n+1−k)}.The inequalityDmax(σ⁎)≥Cmax(π1)follows from the fact thatπ1is an optimal schedule of problemP||Cmaxon instanceLS(z−1).To show thatDmax(σ⁎)≥D(z), we may assume thatz∈N, sinceD(z)=0ifz=n+1. Thenn≥m+2andD(z)=pz−2+pz−1+pz. Letπ2=π|(1,⋯,z)and letπ2⁎be an optimal schedule of problemP||Cmaxon instanceLS(z). Suppose that job z is processed on machine i inπ2. Let(i,1)and(i,2)be the two jobs other than z processed on machine i inπ2. IfCmax(π1)=Cmax(π2), thenD(z)=pz−2+pz−1+pz≤p(i,1)+p(i,2)+pz≤Cmax(π2)=Cmax(π1)≤Dmax(σ⁎), as required. Suppose in the following thatCmax(π1)<Cmax(π2). LetM(1)(π2)be the set of machine indices k so that machine k receives just one job inπ2. LetM(2)(π2)=M∖M(1)(π2). LetJ(1)(π2)andJ(2)(π2)be the sets of jobs processed onM(1)(π2)andM(2)(π2)inπ2, respectively. From the definitions of z andπ2, we haveJ(1)(π2)∪J(2)(π2)={1,2,⋯,z},|M(1)(π2)|+|M(2)(π2)|=m,|J(1)(π2)|=|M(1)(π2)|, and|J(2)(π2)|=2⋅|M(2)(π2)|+1. By the implementation of List-LPT, for every two jobsj′andj″with{j′,j″}∩J(1)(π2)≠∅, we havepj′+pj″>Cmax(π2)≥Cmax(π2⁎). This means that each job inJ(1)(π2)cannot be processed on a machine together with other jobs inπ2⁎. Then, in the optimal scheduleπ2⁎of problemP||Cmaxon the instanceLS(z),|J(1)(π2)|=|M(1)(π2)|machines are only used for processing the jobs inJ(1)(π2)and the remainingm−|M(1)(π2)|=|M(2)(π2)|machines are used for processing the2⋅|M(2)(π2)|+1jobs inJ(2)(π2). By the pigeonhole principle, some machine processes at least three jobs inπ2⁎. Letj1,j2,j3be three jobs which are processed on a common machine inπ2⁎. Thenpj1+pj2+pj3≥pz−2+pz−1+pzsinceLS(z)=(1,2,⋯,z)is an LPT list. Consequently,D(z)=pz−2+pz−1+pz≤pj1+pj2+pj3≤Cmax(π2⁎)≤Dmax(σ⁎).From the above discussions, we conclude thatDmax(σ⁎)≥D.Finally, the relationsp(N)≤m⋅Dandq(N)≤Dfollow directly from the definition of D in (1). The lemma follows. □Sometimes we choose to obtain a schedule of the n jobs in N in the following way: For an indexn0with0≤n0≤n−1, we first generate a scheduleσ0for then0jobs inLS(n0)without artificial idle times on each machine. After this, we schedule the remaining jobsn0+1,n0+2,⋯,nby the strategy of algorithm List-LPT. In this case, we say that the jobsn0+1,n0+2,⋯,nare scheduled by algorithm List-LPT based onσ0. We useCmax(σ0)to denote the maximum processing completion time of the jobs1,2,⋯,n0inσ0. Whenn0=0, we defineCmax(σ0)=0.Lemma 3.2Suppose that0≤n0≤n−1andσ0is a schedule ofLS(n0)without artificial idle times on each machine. Let σ be the schedule of N obtained by scheduling jobsn0+1,n0+2,⋯,nby algorithm List-LPT based onσ0. Then(2)Cmax(σ)≤max⁡{Cmax(σ0),Cmin(σ)+pn0+1}≤max⁡{Cmax(σ0),D+pn0+1}.Moreover, if each machine has at most one job which completes after time D inσ0, then each machine also has at most one job which completes after time D in σ.ProofNote thatCmax(σ)≥Cmax(σ0). Hence, the result holds trivially ifCmax(σ)=Cmax(σ0).Suppose in the following thatCmax(σ)>Cmax(σ0). Let j be a job assumingCmax(σ)in σ. Thenj∈{n0+1,n0+2,⋯,n}, and so,pj≤pn0+1. Note thatSj(σ)≤Cmin(σ)since σ is the schedule of N obtained by scheduling jobsn0+1,n0+2,⋯,nby algorithm List-LPT based onσ0. In the time interval[0,Cmin(σ)]the m machines are all busy. This implies thatCmin(σ)≤p(N)/m≤D, where the last inequality follows from Lemma 3.1. ThenCmax(σ)=Sj(σ)+pj≤Cmin(σ)+pn0+1≤D+pn0+1. This proves (2).The second statement follows from the fact thatCmin(σ)≤p(N)/m≤Dand the implementation of algorithm List-LPT. The lemma follows. □The following notations will be used in our discussion.•JA={j∈N:3D4<pj≤D}.JB={j∈N:D2<pj≤3D4}.JE={j∈N:3D8<pj≤D2}.JF={j∈N:D4<pj≤3D8}.JG={j∈N:D8<pj≤D4}.JH={j∈N:0<pj≤D8}.nA=|JA|,nB=|JB|,nE=|JE|,nF=|JF|,nG=|JG|, andnH=|JH|.Lemma 3.3nA+nB≤m, and so,pm+1≤D2.ProofSuppose to the contrary thatnA+nB≥m+1. Thenz≥m+2and{1,2,⋯,m+1}⊆JA∪JB⊆LS(z−1). This means that two jobs, sayj′andj″, inJA∪JBare scheduled in a common machine inπ1. Then we haveD<pj′+pj″≤Cmax(π1)≤D, where the first inequality follows from the fact thatj′,j″∈JA∪JBand the last inequality follows from the definition of D in (1). This contradiction establishes the lemma. Then we havenA+nB≤m, and so,pm+1≤D2. □Lemma 3.4nA+nB+nE≤min⁡{z−1,2m−nA}≤2m. Furthermore, ifnA+nB+nE=2m−nA, thenpnA+2(m−nA)+1≤D4.ProofNote that(1,2,⋯,x)is an LPT list for eachx∈N. IfnA+nB+nE≥z, thenz−2,z−1,z∈JA∪JB∪JE. This implies thatpz−2≥pz−1≥pz>3D8. From (1), we haveD<3⋅3D8<pz−2+pz−1+pz=D(z)≤D, a contradiction. It follows thatnA+nB+nE≤z−1.To continue the proof, we setx=2m−nA+1=nA+2(m−nA)+1. We only need to show thatnA+nB+nE≤x−1and ifnA+nB+nE=x−1, thenpx≤D4.Suppose to the contrary that eithernA+nB+nE≥xornA+nB+nE=x−1andpx>D4. Thenx≤z. IfnA+nB+nE≥x, then{1,2,⋯,x}⊆JA∪JB∪JE, and so,px>3D8>D4. Hence, in both cases, we havepx>D4, and so,x≤n. From Lemma 3.3, we havenA≤m. Thenx≥max⁡{m+1,nA+1}≥3,JA={1,2,⋯,nA}⊆{1,2,⋯,x−1}, andx−2,x−1∈JA∪JB∪JE. This further implies thatpx−2≥px−1>3D8.In the List-LPT schedule π of N, thenAjobs1,2,⋯,nAinJAare scheduled on the firstnAmachines1,2,⋯,nA, respectively, and the2(m−nA)jobsnA+1,nA+2,⋯,x−1inJB∪JE, each having a processing time greater than3D8, are scheduled on the lastm−nAmachinesnA+1,nA+2,⋯,mso that each machine receives exactly two jobs. If job x is processed on one of the firstnAmachines in π, then there is a jobj∈JAso that the two jobs x and j are processed on a common machine in π. Sincepx>D4andpj>3D4, we haveD=D4+3D4<px+pj≤Cmax(π1)≤D, a contradiction. If job x is processed on one of the lastm−nAmachines in π, thenx=z. From the definition of D, together with the facts thatpx−2≥px−1>3D8andpx>D4, we haveD=3D8+3D8+D4<px−2+px−1+px=pz−2+pz−1+pz=D(z)≤D, a contradiction again. The lemma follows. □The following two inequalities, which follow directly from Lemma 3.1 and the definition of D in (1), will be repeatedly used in our discussion.(3)q(N)≤D.(4)pj+∑k=1jqβ(n+1−k)≤Dforj∈N.Now we are ready to describe our approximation algorithms for problemP|ADT|Dmax. We usei→jto denote the fact that job i is processed directly before job j on the same machine,i,j∈N. We first consider the case thatn≤2m−1.Algorithm HFor problemP|ADT|Dmaxwithn≤2m−1.Step 1. LetLS=(1,2,⋯,n)be the LPT list of the n jobs in N.•Ifz=n+1, then go to Step 2.Otherwise, go to Step 3.Step 3. Schedule jobsz+j−1→jon machine j starting at time zero for eachj=1,2,⋯,n−z+1. Schedule jobsm+j→m−j+1on machinem−j+1starting at time zero for eachj=1,2,⋯,z−m−1. Schedule the remaining2m−njobsn−z+2,n−z+3,⋯,2m−z+1on machine j for eachj=n−z+2,n−z+3,⋯,2m−z+1. The resulted schedule, denoted byσ″, is described in Fig. 3.Step 4. Let σ be the current schedule of N. The jobs are delivered in the nondecreasing order of their processing completion times in σ as soon as possible. □It is not hard to see that Algorithm H runs inO(nlog⁡n)time. Note that we have three schedulesσ′,σ″and σ in Algorithm H. Moreover, ifz=n+1, we haveσ=σ′, and ifz≤n, we haveσ=σ″.Theorem 3.5Algorithm Hhas a worst-case performance ratio of at most32.ProofFrom Lemma 3.1, we only need to show thatDmax(σ)≤3D2. Let l be the first job in σ so that the vehicle is busy from timeτl(σ)to timeDmax(σ). Thenτl(σ)=Cl(σ). LetJ+(l)={j∈N:Cj(σ)≥Cl(σ)}. ThenDmax(σ)=Cl(σ)+q(J+(l)). Moreover, from (3), we haveq(J+(l))≤q(N)≤D.IfCl(σ)≤D2, thenDmax(σ)=Cl(σ)+q(J+(l))≤D2+D=3D2, as required. Hence, we assume in the following thatCl(σ)>D2. We distinguish the following two cases.Case 1:z=n+1. Thenπ=π1,σ=σ′, and the jobs are processed in Step 2 of Algorithm H. By the implementation of Algorithm H, the first2m−njobs1,2,⋯,2m−nare processed on the first2m−nmachines, respectively, and the remaining2(n−m)jobs2m−n+1,2m−n+2,⋯,nare processed on the lastn−mmachines in the way that the two jobsm+jandm−j+1are processed on machinem−j+1for eachj=1,2,⋯,n−m(see Fig. 2). This implies thatσ=σ′is obtained fromπ1=πby exchanging the order of the two jobs on each of the lastn−mmachines. From the definition of D, we haveCmax(σ)=Cmax(π1)≤D. Moreover,m+j→m−j+1on machinem−j+1implies thatqm+j(σ)≥qm−j+1(σ)for eachj=1,2,⋯,n−m. It follows thatq({2m−n+1,2m−n+2,⋯,m})≤q({m+1,m+2,⋯,n}). From the factq(N)≤Din (3), we have(5)q({2m−n+1,2m−n+2,⋯,m})≤D2.The factm+j→m−j+1(for eachj=1,2,⋯,n−m) also implies thatCn(σ)≤Cn−1(σ)≤⋯≤Cm+1(σ)=pm+1≤D2, where the last inequality follows from Lemma 3.3. From the assumptionCl(σ)>D2, we havel∈{1,2,⋯,m}.Ifl≤2m−n, from Fig. 2, we haveJ+(l)⊆{1,2,⋯,l}∪{2m−n+1,2m−n+2,⋯,m}. From (5), we haveq(J+(l))≤∑k=1lqβ(n−k+1)+D2. Note thatCl(σ)=pl. ThenDmax(σ)=Cl(σ)+q(J+(l))≤pl+∑k=1lqβ(n−k+1)+D2≤D+D2=3D2, where the second inequality follows from (4), as required.Suppose in the following thatl≥2m−n+1. IfCl(σ)≤p1, we choose an indexh≤2m−nwithCl(σ)≤Ch(σ)so thatCh(σ)is as small as possible. From Fig. 2, we haveJ+(l)⊆{1,2,⋯,h}∪{2m−n+1,2m−n+2,⋯,m}. From (5), we haveq(J+(l))≤∑k=1hqβ(n−k+1)+D2. Note thatCl(σ)≤Ch(σ)=ph. ThenDmax(σ)=Cl(σ)+q(J+(l))≤ph+∑k=1hqβ(n−k+1)+D2≤3D2, as required.IfCl(σ)>p1, thenJ+(l)⊆{2m−n+1,2m−n+2,⋯,m}. From (5), we haveq(J+(l))≤D2. By the definition of D, we haveCl(σ)≤Cmax(σ)=Cmax(π1)≤D. ThusDmax(σ)=Cl(σ)+q(J+(l))≤D+D2=3D2, as required.Case 2:z≤n. Thenσ=σ″and the jobs are processed in Step 3 of Algorithm H. By the implementation of Algorithm H, on the firstn−z+1machines, the two jobsz+j−1and j are processed on machine j for eachj=1,2,⋯,n−z+1, and on the lastz−m−1machines, the two jobsm+jandm−j+1are processed on machinem−j+1for eachj=1,2,⋯,z−m−1(see Fig. 3). Letσ0be the schedule ofLS(z−1)obtained fromσ″by deleting jobs in{z,z+1,⋯,n}, exchanging the order of the two jobs on each of the lastz−m−1machines, and deleting unnecessary idle times. It can be observed thatσ0=π1. From the definition of D, we have(6)max⁡{pm+j+pm−j+1:j=1,2,⋯,z−m−1}≤Cmax(π1)≤D.Note that the jobsz+j−1→jare processed on machine j for eachj=1,2,⋯,n−z+1andm+j→m−j+1are processed on machinem−j+1for eachj=1,2,⋯,z−m−1. Thenqz+j−1(σ)≥qj(σ)for eachj=1,2,⋯,n−z+1andqm+j(σ)≥qm−j+1(σ)for eachj=1,2,⋯,z−m−1. It follows thatq({1,2,⋯,n−z+1})+q({2m−z+2,2m−z+3,⋯,m})≤q({z,z+1,⋯,n})+q({m+1,m+2,⋯,z−1}). From the factq(N)≤Din (3), we have(7)q({1,2,⋯,n−z+1})+q({2m−z+2,2m−z+3,⋯,m})≤D2.Moreover, we can observe that each job in{m+1,m+2,⋯,n}starts at time zero in σ. By Lemma 3.3, we haveCn(σ)≤Cn−1(σ)≤⋯≤Cm+1(σ)=pm+1≤D2. Thenl∈{1,2,⋯,m}sinceCl(σ)>D2.Ifl≤n−z+1andCl(σ)≤D, from Fig. 3, we haveJ+(l)⊆{1,2,⋯,l}∪{2m−z+2,2m−z+3,⋯,m}. From (7), we haveq(J+(l))≤D2. Consequently,Dmax(σ)=Cl(σ)+q(J+(l))≤D+D2=3D2, as required.Ifl≤n−z+1andCl(σ)>D, from (6), we haveJ+(l)={1,2,⋯,l}, and so,q(J+(l))=∑k=1lqβ(n−k+1). Sincez+l−1≥z≥m+2>m+1, from Lemma 3.3, we havepz+l−1≤pm+1≤D2. Note thatCl(σ)=pz+l−1+plandpl+∑k=1lqβ(n−k+1)≤Dfrom (4). ThenDmax(σ)=Cl(σ)+q(J+(l))=pz+l−1+pl+∑k=1lqβ(n−k+1)<D2+D=3D2, as required.Ifl∈{n−z+2,n−z+3,⋯,2m−z+1}, from Fig. 3, we haveJ+(l)⊆{1,2,⋯,l}∪{2m−z+2,2m−z+3,⋯,m}. From (7), we haveq(J+(l))≤∑k=1lqβ(n−k+1)+D2. Note thatCl(σ)=pl. ThenDmax(σ)=Cl(σ)+q(J+(l))≤pl+∑k=1lqβ(n−k+1)+D2≤3D2, as required.Ifl≥2m−z+2, then the definition ofπ1implies thatC1(σ)=pz+p1≥Cmax(π1)≥max⁡{pm+j+pm−j+1:j=1,2,⋯,z−m−1}≥Cl(σ), where the second inequality follows from (6). Leth≤2m−z+1be a job index withCl(σ)≤Ch(σ)so thatCh(σ)is as small as possible. Ifh∈{n−z+2,n−z+3,⋯,2m−z+1}, from Fig. 3, we haveJ+(l)⊆{1,2,⋯,h}∪{2m−z+2,2m−z+3,⋯,m}. From (7), we haveq(J+(l))≤∑k=1hqβ(n−k+1)+D2. Note thatCl(σ)≤Ch(σ)=ph. ThenDmax(σ)=Cl(σ)+q(J+(l))≤ph+∑k=1hqβ(n−k+1)+D2≤3D2, as required. Ifh≤n−z+1, from Fig. 3, we haveJ+(l)⊆{1,2,⋯,h}∪{2m−z+2,2m−z+3,⋯,m}. From (7), we haveq(J+(l))≤D2. Note thatCl(σ)≤max⁡{pm+j+pm−j+1:j=1,2,⋯,z−m−1}≤Cmax(π1|(1,2,⋯,z−1))≤D. ThenDmax(σ)=Cl(σ)+q(J+(l))≤D+D2=3D2, as required. This completes the proof. □Suppose in the following thatn≥2mand recall thatqβ(1)≥qβ(2)≥⋯≥qβ(n). From the relationq(N)≤Din (3), we have(8)∑k=1mqβ(n−k+1)≤D2.When∑k=1mqβ(n−k+1)>3D8, we define three indicesα1,α2,α3∈M={1,2,⋯,m}in the following way.Definition 1Suppose that∑k=1mqβ(n−k+1)>3D8. For eachi∈{1,2,3}, we defineαi∈Mto be the machine index so that∑k=1αiqβ(n−k+1)≤iD8and∑k=1αi+1qβ(n−k+1)>iD8.RemarkUnder the assumption∑k=1mqβ(n−k+1)>3D8, i.e.,qβ(n)+qβ(n−1)+⋯+qβ(n−m+1)>3D8, we can show thatα1,α2andα3exist. Recall thatn≥8,qβ(1)≥qβ(2)≥⋯≥qβ(n), andqβ(1)+qβ(2)+⋯+qβ(n)≤D. Ifα1does not exist, thenqβ(n)>D8, and so,n≤7, a contradiction. Hence,α1indeed exists. This also shows thatα2andα3exist. From Definition 1, we further have1≤α1≤α2≤α3≤m−1. Moreover, we have the following inequalities forα1,α2andα3:(9){∑k=1α1qβ(n−k+1)≤D8and∑k=1α1+1qβ(n−k+1)>D8,∑k=1α2qβ(n−k+1)≤D4and∑k=1α2+1qβ(n−k+1)>D4,∑k=1α3qβ(n−k+1)≤3D8and∑k=1α3+1qβ(n−k+1)>3D8.By putting (4) and (9) together, we have the following inequalities forpα1+1,pα2+1andpα3+1:(10)pα1+1<7D8,pα2+1<3D4,pα3+1<5D8.Letμ=nA+nB+nE. Thenμ+1∉JA∪JB∪JE, and so,pμ+1≤3D8. From Lemma 3.4, we haveμ≤z−1andμ≤2m−nA≤2m. This implies that(11)p2m+1≤pz≤pμ+1≤3D8.Algorithm LPT-LS-SPTFor problemP|ADT|Dmaxwithn≥2m.Step 1. LetLS=(1,2,⋯,n)be the LPT list of the n jobs in N.•If∑k=1mqβ(n−k+1)>3D8, then go to step 2.Otherwise, go to step 3.(2.1) Schedule the first 2m jobs1,2,⋯,2mby the following way:•Ifz≤2m, then schedule jobsj→z+j−1on machine j starting at time zero for eachj=1,2,⋯,2m−z+1, and schedule jobsm+1−j→m+jon machinem+1−jstarting at time zero for eachj=1,2,⋯,z−m−1(see Fig. 4).Ifz=2m+1, then schedule jobsm+1−j→m+jon machinem+1−jstarting at time zero for eachj=1,2,⋯,m(see Fig. 5).(2.2) Schedule the remainingn−2mjobs2m+1,2m+2,⋯,n(if any) by algorithm List-LPT based on the schedule of jobs1,2,⋯,2min Step (2.1). Letσ1be the resulted schedule of the n jobs.(2.3) LetJ⁎={j∈N:Cj(σ1)>D}and setλ⁎=|J⁎|. Note that, from the second statement in Lemma 3.2, theλ⁎jobs inJ⁎are scheduled onλ⁎distinct machines inσ1. LetK⁎={i∈M:C(i)(σ1)≤D,i≤α2}and setν⁎=|K⁎|. Then no jobs inJ⁎are processed on theν⁎machines inK⁎inσ1, or equivalently, exactlyα2−ν⁎jobs inJ⁎are processed on the firstα2machines1,2,⋯,α2inσ1. From the relationα3≥α2, we observe that at mostα3−ν⁎jobs inJ⁎are processed on the firstα3machines1,2,⋯,α3inσ1. Consequently, at leastλ⁎−α3+ν⁎jobs inJ⁎are processed on the lastm−α3machinesα3+1,α3+2,⋯,minσ1.•Ifλ⁎>α3, we defineSub(J⁎)to be the set of the smallestλ⁎−α3+ν⁎jobs (subject to the processing times) inJ⁎which are processed on the lastm−α3machines inσ1. Then we modify the scheduleσ1by the following way:Delete the jobs inSub(J⁎)fromσ1. The resulted schedule is denoted byσ1∖Sub(J⁎). Reschedule the jobs inSub(J⁎)by algorithm List-LPT on the firstα2machines1,2,⋯,α2based on the scheduleσ1∖Sub(J⁎)of the jobs inN∖Sub(J⁎). The resulted schedule is denoted byσ2. Then go to Step 4.•Ifλ⁎≤α3, then setσ2=σ1and go to Step 4 directly.Step 4. Let ψ be the current schedule of N. We obtain a new scheduleσ4of N from ψ by rescheduling the jobs on each machine in SPT order starting at time 0. Then the jobs are delivered in the nondecreasing order of their processing completion times inσ4as soon as possible. □It is not hard to see that Algorithm LPT-LS-SPT runs inO(nlog⁡n)time. We have five schedulesσ1,σ2,σ3,σ4and ψ of N in Algorithm LPT-LS-SPT.σ1is the schedule at the end of Step (2.2),σ2is the schedule at the end of Step (2.3),σ3is the schedule at the end of Step 3,σ4is the schedule at the end of Step 4 and also the end of Algorithm LPT-LS-SPT, andψ∈{σ1,σ2,σ3}is the schedule at the beginning of Step 4. Moreover,σ4is the schedule of N obtain from ψ by rescheduling the jobs on each machine in SPT order starting at time 0. From Fig. 4 and Fig. 5, the subscheduleσ1|(1,⋯,z−1)is the same asπ1, up to the permutation of machines. Sinceμ≤z−1,σ1|(1,⋯,μ)is a subschedule ofσ1|(1,⋯,z−1). From the definition of D, we have(12)Cmax(σ1|(1,⋯,μ))≤Cmax(σ1|(1,⋯,z−1))=Cmax(π1)≤D.Note thatσ1|(1,⋯,2m)is the schedule of the first 2m jobs1,2,⋯,2mobtained in Step (2.1) of Algorithm LPT-LS-SPT. Moreover,μ=nA+nB+nEandLS=(1,2,⋯,n)is an LPT list of the jobs in N. Ifz≤2m,σ1|(1,⋯,2m)is described in Fig. 4. In this case, we havez∈JF∪JG∪JH, and so,Cmax(σ1|(1,⋯,2m))=p1+pz≤D+3D8=11D8. Ifz=2m+1, from (12), we haveCmax(σ1|(1,⋯,2m))=Cmax(σ1|(1,⋯,z−1))≤D. Hence, for the first 2m jobs, we always have(13)Cmax(σ1|(1,⋯,2m))≤11D8.Recall thatC(i)(σ)is the processing load of machine i in schedule σ andCmin(σ)=min⁡{C(i)(σ):i=1,2,⋯,m}. From Lemma 3.1, we have the following Observation 1, which is also implied in the proof of Lemma 3.2.Observation 1Cmin(σk)≤D,k=1,2,3,4.Recall thatμ=nA+nB+nE≤z−1. From (12), we have the following Observation 2.Observation 2{j:Cj(σ1)>D}⊆JF∪JG∪JH, or equivalently,Cj(σ1)>Dimpliespj≤3D8.Lemma 3.6If∑k=1mqβ(n−k+1)>3D8, thenp2m+1<D4.ProofFrom (4), we havep2m+1+∑k=12m+1qβ(n−k+1)≤D. Sinceqβ(1)≥qβ(2)≥⋯≥qβ(n), we also have∑k=12m+1qβ(n−k+1)≥2∑k=1mqβ(n−k+1)>2⋅3D8=3D4. Consequently,p2m+1<D4. The lemma follows. □In the case that∑k=1mqβ(n−k+1)>3D8andλ⁎>α3, we setSub(J⁎)={j1,j2,⋯,jλ⁎−α3+ν⁎}so thatpj1≥pj2≥⋯≥pjλ⁎−α3+ν⁎. Moreover, we useTII(σi)to denote the total idle time in the time interval[0,D]on the m machines inσi,i=1,2.Lemma 3.7Suppose that∑k=1mqβ(n−k+1)>3D8andλ⁎>α3. Then we have the following two statements.(i) Each machinei≥α3+1, which has a job inSub(J⁎)inσ1, has at least three jobs inσ1. Moreover, we have(14)jk≥2m+1andpjk≤p2m+1<D4for eachjk∈Sub(J⁎).(ii) We have the following three inequalities:(15)m−α3≤min⁡{α1,α2−α1}and2(m−α3)≤α2,(16)p1≥p2≥⋯≥pα2≥3D8,(17)TII(σ1)≤TII(σ2)<(m−α3)⋅D4.ProofIn fact, ifjkis a job inSub(J⁎)andi≥α3+1is a machine so that only the two jobsjkand i are processed on machine i inσ1, from Observation 2, we havepjk≤3D8. From (10), we havepα3+1<5D8. Sincepi≤pα3+1<5D8, we havepjk+pi<3D8+5D8=D, contradicting the fact thatjk∈Sub(J⁎).The above discussion implies thatjk≥2m+1, and so, from Lemma 3.6, we havepjk≤p2m+1<D4for eachjk∈Sub(J⁎). This proves the first statement.To prove (15), we setκ=min⁡{α1,α2−α1}. We first show thatm−α3≤κ. Recall thatqβ(1)≥qβ(2)≥⋯≥qβ(n).Ifm−α3≥κ+2, then eitherm−α3≥α1+2orm−α3≥α2−α1+2. From (8) and (9), in the case thatm−α3≥α1+2, we haveD2≥∑k=1mqβ(n−k+1)=∑k=1α3+1qβ(n−k+1)+∑k=α3+2mqβ(n−k+1)≥∑k=1α3+1qβ(n−k+1)+∑k=1α1+1qβ(n−k+1)>3D8+D8=D2, a contradiction, and in the case thatm−α3≥α2−α1+2, we haveD2≥∑k=1mqβ(n−k+1)=∑k=1α3+1qβ(n−k+1)+∑k=α3+2mqβ(n−k+1)≥∑k=1α3+1qβ(n−k+1)+∑k=1α2+1qβ(n−k+1)−∑k=1α1qβ(n−k+1)>3D8+D4−D8=D2, a contradiction again. Hence,m−α3≤κ+1.Ifm−α3=κ+1, then eitherm−α3=α1+1orm−α3=α2−α1+1. Suppose first thatn≥2m+2. From Lemma 3.1 and (9), in the case thatm−α3=α1+1, we haveD≥∑k=1nqβ(n−k+1)≥2∑k=1m+1qβ(n−k+1)≥2(∑k=1α1+1qβ(n−k+1)+∑k=1α3+1qβ(n−k+1))>2(D8+3D8)=D, a contradiction, and in the case thatm−α3=α2−α1+1, we haveD≥∑k=1nqβ(n−k+1)≥2∑k=1m+1qβ(n−k+1)≥2(∑k=1α2+1qβ(n−k+1)−∑k=1α1qβ(n−k+1)+∑k=1α3+1qβ(n−k+1))>2(D8+3D8)=D, a contradiction.Suppose in the following thatn≤2m+1. From (12), we haveCmax(σ1|(1,⋯,z−1))≤D. This implies thatCi(σ1)≤Dfori=1,2,⋯,z−1, and so,λ⁎≤n−(z−1).Ifz−1≥2m−α3+1, thenλ⁎≤n−(z−1)≤n−(2m−α3+1)≤α3, a contradiction.Ifz−1≤2m−α3, then by the implementation of Algorithm LPT-LS-SPT, the two jobsm−j+1andm+jare processed on machinem−j+1,j=1,2,⋯,z−m−1. From (12), we havemax⁡{pm−j+1+pm+j:j=1,2,⋯,z−m−1}≤Cmax(π1)≤D. Note thatz≥m+2. Thenz+α3−1≥m+2+α3−1=m+α3+1. From (4), we havepz+α3−1≤D−∑k=1mqβ(n−k+1)−∑k=1α3+1qβ(n−k+1)<D4. Recall thatα1≤α2≤α3. Then eitherα3≥α1+1orα3=α1. Ifα3≥α1+1, from (10), we havepα3≤pα1+1<3D4. Note that the jobs j andz+j−1are processed on machine j,j=1,2,⋯,2m−z. Thuspz+α3−1+pα3=C(z+α3−1)(σ1)<D. Hence,λ⁎∈{z,z+1,⋯,z+α3−2,n}, and so, we haveλ⁎≤α3−1+1=α3, a contradiction. Ifα3=α1, thenqβ(n−α3)=∑k=1α3+1qβ(n−k+1)−∑k=1α3qβ(n−k+1)=∑k=1α3+1qβ(n−k+1)−∑k=1α1qβ(n−k+1)>D4. From (3) and (8), we havem−α3=1andn≤m+2. Note thatz−1≥m+1. Thenλ⁎≤n−(z−1)≤m+2−(m+1)=1≤α3, a contradiction again.From the above discussions, we conclude thatm−α3≤κ. Consequently,m−α3≤min⁡{α1,α2−α1}and2(m−α3)≤α2. This proves (15).To prove (16), we suppose to the contrary thatpα2<3D8. Recall thatp2m+1<D4from Lemma 3.6. By Step 2.1 of Algorithm LPT-LS-SPT, there are just two jobs of{1,2,⋯,2m}which are processed on machine i inσ1,i=1,2,⋯,m. ThenC(i)(σ1|(1,⋯,2m))≤2pα2<3D4for eachi≥α2, or equivalently, the processing load on each of the lastm+1−α2machines inσ1|(1,⋯,2m)is less than3D4. Since|J⁎|=λ⁎>α3≥α2, we haven≥2m+1. Letn′=min⁡{n,3m+1−α2}. According to the implement of Step 2.2 of Algorithm LPT-LS-SPT, then′−2mjobs2m+1,2m+2,⋯,n′are scheduled on the m machines by algorithm List-LPT based onσ1|(1,⋯,2m)inσ1. Sincen′−2m≤m+1−α2andpj≤p2m+1<D4for eachj=2m+1,2m+2,⋯,n′, from Lemma 3.2, we haveC(i)(σ1|(1,⋯,n′))<3D4+D4=Dfor eachi≥α2. Then the fact|J⁎|>α2further implies thatn>n′, and therefore,n′=3m+1−α2. Sinceλ⁎=|J⁎|=|{i∈M:C(i)(σ)>D}|, we have(18)λ⁎≤(α2−1)+(n−n′).Ifn−n′≥α3−α2+1, thenn>3m+(α3+1)−2α2. From the fact thatqβ(1)≥qβ(2)≥⋯≥qβ(n), we have(19)q(N)≥3×∑k=1mqβ(n−k+1)+∑k=1α3+1qβ(n−k+1)−2×∑k=1α2qβ(n−k+1).Note that our assumption in this lemma implies that∑k=1mqβ(n−k+1)>3D8. Moreover, from (9), we have∑k=1α2qβ(n−k+1)≤D4and∑k=1α3+1qβ(n−k+1)>3D8. Thus, from (19), we haveq(N)>3×3D8+3D8−2×D4=D. But this contradicts (3). Consequently, we haven−n′≤α3−α2.Now, from (18), we haveλ⁎≤(α2−1)+(α3−α2)=α3−1, a contradiction to the assumption thatλ⁎>α3. This proves (16).To prove (17), we note from (14) thatpj1≤p2m+1<D4. SinceCj1(σ1)>D, we haveSj1(σ1)=Cj1(σ1)−pj1>3D4. From Algorithm LPT-LS-SPT, in the time interval[Sj1(σ1),D]the m machines are all busy inσ1∖Sub(J⁎). It follows thatCmin(σ2)>3D4.Recall thatσ2is obtained fromσ1by rescheduling theλ⁎−α3+ν⁎jobs inSub(J⁎)on the firstα2machines by algorithm List-LPT. ThenTII(σ1)≤TII(σ2). After deleting theλ⁎−α3+ν⁎smallest jobs inSub(J⁎)fromσ1, there are exactlyα3jobs remaining inJ⁎which are processed on distinct machines inσ2. Therefore,|{i∈M:C(i)(σ2)≤D}|≤m−α3. Together with the fact thatCmin(σ2)>3D4, we conclude thatTII(σ2)<(m−α3)⋅D4. The lemma follows. □Lemma 3.8Cmax(σ4)≤11D8.ProofAccording to the implementation of Step 4 of Algorithm LPT-LS-SPT, we haveCmax(σ4)=Cmax(ψ). Then we only need to show thatCmax(ψ)≤11D8. Recall thatψ∈{σ1,σ2,σ3}. We first show thatCmax(σ1)≤11D8.In factσ1is the schedule of N obtained by scheduling jobs2m+1,2m+2,⋯,nby algorithm List-LPT based onσ1|(1,⋯,2m). From (11), we havep2m+1≤3D8. From (2) in Lemma 3.2 and (13), we haveCmax(σ1)≤max⁡{Cmax(σ1|(1,⋯,2m)),D+3D8}=11D8.SinceCmax(σ1)≤11D8, we only need to distinguish the following two cases.Case 1:ψ=σ3. Thenσ3is the List-LPT schedule of N. Ifz=n+1, thenσ3=π1. From (1), we haveCmax(σ3)=Cmax(π1)≤D, as required. Ifz≤n, thenσ3is the schedule of N obtained by scheduling jobsz,z+1,⋯,nby algorithm List-LPT based onπ1. From (11), we havepz≤3D8. From (2) in Lemma 3.2, we haveCmax(σ3)≤max⁡{Cmax(π1),D+3D8}=11D8, as required.Case 2:ψ=σ2andσ2≠σ1. Then∑k=1mqβ(n−k+1)>3D8andλ⁎>α3. Note thatσ2is obtained fromσ1by rescheduling the jobs inSub(J⁎)by algorithm List-LPT on the firstα2machines1,2,⋯,α2based on the scheduleσ1∖Sub(J⁎)of the jobs inN∖Sub(J⁎).LetJ(α2)(σi)andJ(m−α2)(σi)be the sets of jobs processed on the firstα2machines and the lastm−α2machines inσi, respectively,i=1,2. From the definition ofσ1, we haveJ(α2)(σ1)∪J(m−α2)(σ1)={1,2,⋯,n}and{j1,j2,⋯,jλ⁎−α3+ν⁎}⊆J(m−α2)(σ1). From (17) in Lemma 3.7, we haveTII(σ2)<(m−α3)⋅D4. Then the total processing time of the jobs on the firstα2machines in scheduleσ2is less thanα2⋅D+(m−α3)⋅D4≤α2⋅9D8, where the inequality follows from (15). This implies thatCmin(σ2|J(α2)(σ2))≤9D8.IfCmax(σ2)≤Cmax(σ1), the result holds trivially sinceCmax(σ1)≤11D8.IfCmax(σ2)>Cmax(σ1), thenCmax(σ2)=Cmax(σ2|J(α2)(σ2))andσ2|J(α2)(σ2)is obtained by scheduling jobsj1,j2,⋯,jλ⁎−α3+ν⁎on the firstα2machines by algorithm List-LPT based onσ2|(J(α2)(σ1)). From (14), we havepj1<D4. From (2) in Lemma 3.2, we haveCmax(σ2)=Cmax(σ2|J(α2)(σ2))≤max⁡{Cmax(σ2|(J(α2)(σ1))),Cmin(σ2|J(α2)(σ2))+pj1}≤max⁡{Cmax(σ1),9D8+D4}≤11D8. This proves the lemma. □Lemma 3.9Sj(σ4)≤Dfor eachj∈{1,2,⋯,m}.ProofNote that j is the last and longest job on machine j inσ4,j=1,2,⋯,m. Ifψ∈{σ1,σ3}, from Observation 1, we haveSj′(ψ)≤Dfor each jobj′∈N. Then the relation of ψ andσ4implies thatSj(σ4)≤Dfor eachj∈{1,2,⋯,m}.Suppose in the following thatψ=σ2andσ2≠σ1. Thenσ2is the schedule of N obtained by scheduling the jobs inSub(J⁎)by algorithm List-LPT on the firstα2machines1,2,⋯,α2based on the scheduleσ1∖Sub(J⁎)of the jobs inN∖Sub(J⁎). No jobs inSub(J⁎)are scheduled on the machinesα2+1,α2+2,⋯,minσ2and, from Observation 1, we haveSj′(σ1)≤Dfor each jobj′∈N. ThenSj′(σ2)≤Dfor each jobj′which is scheduled on one of the machinesα2+1,α2+2,⋯,m. Consequently, we haveSj(σ4)≤Dfor eachj∈{α2+1,α2+2,⋯,m}.For eachj∈{1,2,⋯,α2}, from (16) in Lemma 3.7, we havepj≥3D8. From Lemma 3.8, we haveSj(σ4)+pj=Cj(σ4)≤Cmax(σ4)≤11D8. Consequently,Sj(σ4)≤Cmax(σ4)−pj≤11D8−3D8=D. The lemma follows. □To continue the discussion, we introduce some notations.•W={j∈N:Cj(σ4)≥5D4}.X={j∈N:Cj(σ4)≥9D8}.Y={j∈N:Cj(σ4)>D}.Note thatW⊆X⊆Y, and so,|W|≤|X|≤|Y|.Lemma 3.10q(Y)≤3D8,q(X)≤D4, andq(W)≤D8.ProofFrom (9), we only need to show that|Y|≤α3,|X|≤α2, and|W|≤α1. We distinguish the following three cases.Case 1:∑k=1mqβ(n−k+1)>3D8. We distinguish the following two subcases.Case 1.1:ψ=σ1. Thenλ⁎≤α3. Note thatσ1is the schedule of N obtained by scheduling jobs2m+1,2m+2,⋯,nby algorithm List-LPT based onσ1|(1,⋯,2m). ThenSj(σ1)≤Cmin(σ1),j=2m+1,2m+2,⋯,n. Sincep2m+1<D4(from Lemma 3.6) andp2m+1≥p2m+2≥⋯≥pn, we further have(20)Cj(σ1)<Cmin(σ1)+D4,j=2m+1,2m+2,⋯,n.From (12), we haveCj(σ1)≤D,j=1,2,⋯,z−1. It follows from (20) that, ifCj(σ1)>DandCj(σ1)≥Cmin(σ1)+D4, thenj∈{z,z+1,⋯,2m}. From Fig. 4, jobs j andz+j−1are processed on machine j,j=1,2,⋯,2m−z+1. This implies that the first2m−z+1jobs are processed separately on the first2m−z+1machines. Sincep1≥p2≥⋯≥pn, we have(21)C(1)(σ1|(1,⋯,2m))≥C(2)(σ1|(1,⋯,2m))≥⋯≥C(2m−z+1)(σ1|(1,⋯,2m)).For eachΔ≥Cmin(σ1)+D4, we defineM⁎(Δ)={i∈M:C(i)(σ1)≥Δ}. From (20), we can see that no jobs in{2m+1,2m+2,⋯,n}are processed on any machine inM⁎(Δ). From Fig. 4 and (21), we haveM⁎(Δ)={1,2,⋯,|M⁎(Δ)|}and(22)|M⁎(Δ)|=max⁡{i∈M:C(i)(σ1)≥Δ}=max⁡{i∈M:C(i)(σ1|(1,⋯,2m))≥Δ}.Moreover, for eachi∈M⁎(Δ), only the two jobs i andz+i−1are processed on machine i inσ1andσ4, and so,z+i−1is the job on machine i assumingC(i)(σ1)inσ1and i is the only job on machine i assumingC(i)(σ4)inσ4. Note thatC(i)(σ1)=C(i)(σ4)fori∈M. Then we have(23)|M⁎(Δ)|=|{j∈N:Cj(σ4)≥Δ}|=|{j∈{z,z+1,⋯,2m}:Cj(σ1)≥Δ}|≤2m−z+1.From (10) and (11), we havepα1+1<7D8,pα2+1<3D4, andpz+α2≤pz+α1≤3D8. In the case thatz+α1≤2m, the two jobsα1+1andz+α1are processed on machineα1+1, and in the case thatz+α2≤2m, the two jobsα2+1andz+α2are processed on machineα2+1. Then we have the following inequalities:(24){C(α1+1)(σ1|(1,⋯,2m))=Cz+α1(σ1)=pα1+1+pz+α1<7D8+3D8=5D4,ifz+α1≤2m,C(α2+1)(σ1|(1,⋯,2m))=Cz+α2(σ1)=pα2+1+pz+α2<3D4+3D8=9D8,ifz+α2≤2m.We consider the following two possibilities.•Cmin(σ1)≤7D8. In this case,5D4>9D8≥Cmin(σ1)+D4. Ifz=2m+1, as shown in Fig. 5, jobsm−j+1andm+jare processed on machinem−j+1,j=1,2,⋯,m. Thenz−1=2m, and so,X=W=∅. Hence,|Y|=λ⁎≤α3and|X|=|W|=0, as required.Suppose in the following thatz≤2m. Ifz≤2m−α2, then bothz+α1≤2mandz+α2≤2mhold sinceα1≤α2. From (22) and the two inequalities in (24), we have|M⁎(5D4)|≤α1and|M⁎(9D8)|≤α2. Note that5D4>9D8≥Cmin(σ1)+D4. From (23) forΔ=5D4, we have|W|=|{j∈{z,z+1,⋯,2m}:Cj(σ1)≥5D4}|=|M⁎(5D4)|≤α1, and from (23) forΔ=9D8, we have|X|=|j∈{z,z+1,⋯,2m}:Cj(σ1)≥9D8}|=|M⁎(9D8)|≤α2, as required.If2m−α2+1≤z≤2m−α1, thenz+α1≤2mholds. As in the above discussion, from (22), (23), and the first inequality in (24), we have|W|=|M⁎(5D4)|≤α1. Moreover, from (23), we have|X|=|M⁎(9D8)|≤2m−z+1≤α2. Thus|Y|=λ⁎≤α3,|X|≤α2, and|W|≤α1, as required.If2m−α1+1≤z≤2m, from (23), we have|W|≤|X|=|M⁎(9D8)|≤2m−z+1≤α1, as required.•Cmin(σ1)>7D8. In this case, sinceCmin(σ1)≤Dholds from Observation 1, we have5D4>Cmin(σ1)+D4. The total processing time in the time interval[D,9D8]inσ1is at least|X|⋅D8. Meanwhile, the total idle time in the time interval[7D8,D]inσ1is strictly less than(m−|X|)⋅D8. From the fact thatp(N)≤m⋅D, we have(m−|X|)⋅D8>|X|⋅D8, and so,|X|<m2. Since|X|is an integer, we further have|X|≤⌊m2⌋. Note that∑k=1mqβ(n−k+1)≤D2, and so,∑k=1⌊m2⌋qβ(n−k+1)≤D4. From the definition ofα2, we have|X|≤⌊m2⌋≤α2.Ifz≤2m−α1, thenz+α1≤2m, and so, the first inequality in (24) holds. From (22), (23) forΔ=5D4, and the first inequality in (24), we have|W|=|{j∈{z,z+1,⋯,2m}:Cj(σ1)≥5D4}|≤α1, as required.Ifz>2m−α1, from (23), we have|W|=|{j∈{z,z+1,⋯,2m}:Cj(σ1)≥5D4}|≤2m−z+1≤α1, as required.Case 1.2:ψ=σ2andσ2≠σ1. Thenλ⁎>α3. From (17) in Lemma 3.7, we haveTII(σ1)<(m−α3)⋅D4. From Lemma 3.9, we haveSj(σ4)≤D,j=1,2,⋯,m. This means that each of the last completed job on every machine starts its processing at a time no more than D inσ4. Note that the total processing time in the time interval[D,9D8]inσ2is at least|X|⋅D8and the total processing time in the time interval[D,5D4]inσ2is at least|W|⋅D4. Sincep(N)≤m⋅D, we have|X|⋅D8<(m−α3)⋅D4and|W|⋅D4<(m−α3)⋅D4. Then|X|<2(m−α3)and|W|<(m−α3). From (15) in Lemma 3.7, we havem−α3≤α1and2(m−α3)≤α2, and so,|X|<α2and|W|<α1.It remains to show that|Y|≤α3. From the implementation of Step (2.3) in Algorithm LPT-LS-SPT, at most one job on each machine completes after time D inσ1, there are exactlyλ⁎machines having processing loads larger than D, and among the firstα2machines, there are exactlyν⁎machines having processing loads at most D. So, after we obtainψ=σ2fromσ1by shifting theλ⁎−α3+ν⁎jobs inSub(J⁎)from the lastm−α3machines to the firstα2machines, the number of machines which have processing loads larger than D is at mostλ⁎−(λ⁎−α3+ν⁎)+ν⁎=α3. From the relation ofσ4and ψ, we can see that at mostα3machines have processing loads larger than D inσ4. From Lemma 3.9, at most one job on each machine completes after time D inσ4. It follows that|Y|={j:Cj(σ4)>D}|≤α3, as required.Case 2:∑k=1mqβ(n−k+1)≤3D8. Thenψ=σ3. According to the implement of Algorithm LPT-LS-SPT, we haveSj(σ4)≤D,j=1,2,⋯,m. IfCmin(σ3)≤3D4, thenCj(σ4)≤max⁡{Cmin(σ3)+pμ+1,D}≤max⁡{3D4+3D8,D}=9D8for eachj∈Nby Observation 2. Thus all jobs are scheduled in time interval[0,9D8]inσ3. It follows thatq(Y)≤3D8,q(X)=0, andq(W)=0, as required.If3D4<Cmin(σ3)≤7D8, thenCj(σ4)≤max⁡{Cmin(σ3)+pμ+1,D}≤max⁡{7D8+3D8,D}=5D4for eachj∈Nby Observation 2. The total processing time in the time interval[D,9D8]inσ3is at least|X|⋅D8. Meanwhile, the total idle time in the time interval[3D4,D]inσ3is strictly less than(m−|X|)⋅D4. Sincep(N)≤m⋅D, we have(m−|X|)⋅D4>|X|⋅D8. Then|X|<2m3. Since|X|is an integer, we further have|X|≤⌊2m3⌋. Note that∑k=1mqβ(n−k+1)≤3D8. Then∑k=1⌊2m3⌋qβ(n−k+1)≤23⋅3D8=D4. Thusq(Y)≤3D8,q(X)≤D4, andq(W)=0, as required.If7D8<Cmin(σ3)≤D, then the total idle time in the time interval[7D8,D]inσ3is strictly less than(m−|X|)⋅D8and(m−|W|)⋅D8. Note that the total processing time in the time interval[D,9D8]inσ3is at least|X|⋅D8and the total processing time in the time interval[D,5D4]inσ3is at least|W|⋅D4. From Lemma 3.1,p(N)≤m⋅D, we have|X|⋅D8<(m−|X|)⋅D8and|W|⋅D4<(m−|W|)⋅D8. Then|X|<m2and|W|<m3. Since|X|and|W|are integers, we further have|X|≤⌊m2⌋and|W|≤⌊m3⌋. Note that∑k=1mqβ(n−k+1)≤3D8. Then∑k=1⌊m2⌋qβ(n−k+1)≤12⋅3D8<D4and∑k=1⌊m3⌋qβ(n−k+1)≤13⋅3D8=D8. Thusq(Y)≤3D8,q(X)<D4andq(W)≤D8. The lemma follows. □Theorem 3.11Algorithm LPT-LS-SPThas a worst-case performance ratio of at most32.ProofFrom Lemma 3.1, we only need to show thatDmax(σ4)≤3D2. Let l be the first job inσ4so that the vehicle is busy from timeτl(σ4)to timeDmax(σ4). Thenτl(σ4)=Cl(σ4). LetJ+(l)={j∈N:Cj(σ4)≥Cl(σ4)}. ThenDmax(σ4)=Cl(σ4)+q(J+(l)). Moreover, from (3), we haveq(J+(l))≤q(N)≤D.IfCl(σ4)≤D2, thenDmax(σ4)=Cl(σ4)+q(J+(l))≤D2+D=3D2, as required.IfD<Cl(σ4)≤9D8, then the definition of Y implies thatJ+(l)⊆Y. From Lemma 3.10, we haveq(Y)≤3D8. ThenDmax(σ4)=Cl(σ4)+q(J+(l))≤9D8+q(Y)≤9D8+3D8=3D2, as required.If9D8≤Cl(σ4)≤5D4, then the definition of X implies thatJ+(l)⊆X. From Lemma 3.10, we haveq(X)≤D4. ThenDmax(σ4)=Cl(σ4)+q(J+(l))≤5D4+q(X)≤5D4+D4=3D2, as required.If5D4≤Cl(σ4)≤11D8, then the definition of W implies thatJ+(l)⊆W. From Lemma 3.10, we haveq(W)≤D8. ThenDmax(σ4)=Cl(σ4)+q(J+(l))≤D+q(W)≤11D8+D8=3D2, as required.Suppose in the following that(25)D2<Cl(σ4)≤D.For each machine i, we useyito denote the number of jobs processed on machine i inσ4, and use(i,j)to denote the j-th job processed on machine i inσ4,i=1,2,⋯,m,j=1,2,⋯,yi. Then(i,yi)=iand the jobs(i,1),(i,2),⋯,(i,yi)are processed on machine i in this order. Since the jobs on each machine are processed in the SPT order inσ4, we havep(i,1)≤p(i,2)≤⋯≤p(i,yi)for each machine i.For eachi∈M, we definexito be the index so thatC(i,x)(σ4)<Cl(σ4)for each x with1≤x≤xiandC(i,x)(σ4)≥Cl(σ4)for each x withxi+1≤x≤yi. Then0≤xi≤yi. Note thatj∈J+(l)if and only ifj=(i,x)for somei∈Mand some index x withxi+1≤x≤yi. Then(26)∑1≤i≤mxi=n−|J+(l)|and∑1≤i≤m(yi−xi)=|J+(l)|.Moreover, we have the following claim.Claim 1Suppose thati∈Mso thatxi≥1andyi−xi≥3. Then we have the following statements.(i)If4Cl(σ4)>3S(i,yi)(σ4), thenyi−xi≤xi.If3Cl(σ4)>2S(i,yi)(σ4), thenyi−xi≤xi+1.If2Cl(σ4)>S(i,yi)(σ4), thenyi−xi≤xi+2.Ifyi−xi≥4and5Cl(σ4)>3S(i,yi)(σ4), thenyi−xi≤xi+1.Proof of Claim 1SinceC(i,xi+1)≥Cl(σ4)andC(i,xi+1)(σ4)+p(i,xi+2)+p(i,xi+3)+⋯+p(i,yi−1)=S(i,yi)(σ4), we havep(i,xi+2)+p(i,xi+3)+⋯+p(i,yi−1)=S(i,yi)(σ4)−C(i,xi+1)(σ4)≤S(i,yi)(σ4)−Cl(σ4). This implies thatp(i,xi+1)≤1yi−xi−2×(S(i,yi)(σ4)−Cl(σ4))≤S(i,yi)(σ4)−Cl(σ4)sincep(i,xi+1)≤p(i,xi+2)≤⋯≤p(i,yi−1). Then we havep(i,xi+1)+p(i,xi+2)+⋯+p(i,yi−1)≤(1+1yi−xi−2)(S(i,yi)(σ4)−Cl(σ4))≤2(S(i,yi)(σ4)−Cl(σ4)).If4Cl(σ4)>3S(i,yi)(σ4), from the relationp(i,xi+1)≤S(i,yi)(σ4)−Cl(σ4), we haveC(i,xi)(σ4)=C(i,xi+1)(σ4)−p(i,xi+1)≥Cl(σ4)−p(i,xi+1)>2(S(i,yi)(σ4)−Cl(σ4)). Now the firstxijobs(i,1),(i,2),⋯,(i,xi)on machine i inσ4have a total processing timep(i,1)+p(i,2)+⋯+p(i,xi)=C(i,xi)(σ4)>2(S(i,yi)(σ4)−Cl(σ4)), and the nextyi−xi−1jobs(i,xi+1),(i,xi+2),⋯,(i,yi−1)on machine i inσ4have a total processing timep(i,xi+1)+p(i,xi+2)+⋯+p(i,yi−1)≤2(S(i,yi)(σ4)−Cl(σ4)), and so,p(i,1)+p(i,2)+⋯+p(i,xi)>p(i,xi+1)+p(i,xi+2)+⋯+p(i,yi−1). Sincep(i,1)≤p(i,2)≤⋯≤p(i,yi−1), we conclude thatxi>yi−xi−1. This proves (i).If3Cl(σ4)>2S(i,yi)(σ4), from the relationp(i,xi+1)≤S(i,yi)(σ4)−Cl(σ4), we haveC(i,xi)(σ4)=C(i,xi+1)(σ4)−p(i,xi+1)≥Cl(σ4)−p(i,xi+1)>S(i,yi)(σ4)−Cl(σ4). Thenp(i,1)+p(i,2)+⋯+p(i,xi)=C(i,xi)(σ4)>S(i,yi)(σ4)−Cl(σ4)≥p(i,xi+2)+p(i,xi+3)+⋯+p(i,yi−1). Consequently,xi>yi−xi−2. This proves (ii).If2Cl(σ4)>S(i,yi)(σ4), thenp(i,1)+p(i,2)+⋯+p(i,xi+1)=C(i,xi+1)(σ4)≥Cl(σ4)>S(i,yi)(σ4)−Cl(σ4)≥p(i,xi+2)+p(i,xi+3)+⋯+p(i,yi−1). Consequently,xi+1>yi−xi−2. This proves (iii).Ifyi−xi≥4and5Cl(σ4)>3S(i,yi)(σ4), thenyi−xi−2≥2, and so,p(i,xi+1)≤12(S(i,yi)(σ4)−Cl(σ4)). This implies thatC(i,xi)(σ4)=C(i,xi+1)(σ4)−p(i,xi+1)≥Cl(σ4)−p(i,xi+1)>S(i,yi)(σ4)−Cl(σ4). Thenp(i,1)+p(i,2)+⋯+p(i,xi)=C(i,xi)(σ4)>S(i,yi)(σ4)−Cl(σ4)≥p(i,xi+2)+p(i,xi+3)+⋯+p(i,yi−1). Consequently,xi>yi−xi−2. This proves (iv). The claim follows. □To proceed the proof, we distinguish the following two cases.Case 1:∑k=1mqβ(n−k+1)>3D8. Then(27)σ1|(1,⋯,2m)is a subschedule ofψ.To prove (27), we note thatψ∈{σ1,σ2}since∑k=1mqβ(n−k+1)>3D8. In the case thatψ=σ1,σ1|(1,⋯,2m)is a subschedule ofσ1. Alternatively, in the case thatψ=σ2andσ2≠σ1, we haveλ⁎>α3. From Lemma 3.7(i), we haveSub(J⁎)⊆{2m+1,2m+2,⋯,n}, and so,σ1|(1,⋯,2m)is also a subschedule ofσ2. Hence, in both cases,σ1|(1,⋯,2m)is a subschedule of ψ. This proves (27).In scheduleσ1|(1,⋯,2m), each machine has exactly two jobs and job i is the first job on machine i inσ1,i=1,2,⋯,m. Note thatσ4is the schedule of N obtained from ψ by rescheduling the jobs on each machine in SPT order. Then we haveyi≥2and(i,1)∉{1,2,⋯,m}for eachi∈M. From Lemma 3.3, we have(28)p(i,1)≤pm+1≤D2for eachi∈M.From the conditionD2<Cl(σ4)≤Din (25), together with (28), we havexi≥1for eachi∈M. Moreover, we have(29)p(i,yi−2)<D4andp(i,yi−1)≤D2ifyi≥3.To prove (29), we note that the conditionyi≥3implies(i,yi−2),(i,yi−1)and(i,yi)are the last three jobs scheduled on machine i inσ4. Then the relation ofσ4and ψ implies that(i,yi),(i,yi−1)and(i,yi−2)are the first three jobs processed on machine i in this order. From (27), we can see that(i,yi−2)≥2m+1and(i,yi−1)≥m+1. From Lemma 3.6 and the fact thatpm+1≤D2, we conclude thatp(i,yi−2)<D4andp(i,yi−1)≤D2. This proves (29).IfD2<Cl(σ4)≤7D8, from (28), at least m jobs complete their processing before timeCl(σ4)inσ4. Thusq(J+(l))≤q(N)−∑k=1mqβ(n−k+1)<D−3D8=5D8. It follows thatDmax(σ4)=Cl(σ4)+q(J+(l))<7D8+5D8=3D2, as required.If7D8<Cl(σ4)≤D, then we have(30)yi−xi≤xifor eachi∈{1,2,⋯,m}.In fact, ifyi−xi≤1, then (30) holds trivially sincexi≥1. Ifyi−xi=2, from (29), we havep(i,xi)<D4andp(i,xi+1)≤D2. SinceC(i,xi+1)(σ4)≥Cl(σ4)>7D8, we haveC(i,xi)(σ4)=S(i,xi+1)(σ4)=C(i,xi+1)(σ4)−p(i,xi+1)>7D8−D2=3D8>D4>p(i,xi). This implies that(i,xi)is not the first job on machine i inσ4, and so,xi≥2=yi−xi. Ifyi−xi≥3, then the condition7D8<Cl(σ4)≤Dimplies that4Cl(σ4)>3D≥3S(i,yi)(σ4), where the last inequality follows from Lemma 3.9. From Claim 1(i), we haveyi−xi≤xi. This proves (30).From (26) and (30), we get|J+(l)|≤n−|J+(l)|, i.e.,2×|J+(l)|≤n. Sinceq(J+(l))is the sum of the|J+(l)|smallest delivery times, we have2×q(J+(l))≤q(N). From the relationq(N)≤D, we conclude thatq(J+(l))≤D2. It follows thatDmax(σ4)=Cl(σ4)+q(J+(l))≤D+D2=3D2, as required.Case 2:∑k=1mqβ(n−k+1)≤3D8. Thenψ=σ3. Let γ be the largest machine index such that only job γ is processed on machine γ inσ4. In the case that γ does not exist, we setγ=0. Then the definition of γ implies that, for eachi∈{1,2,⋯,γ},yi=1and i is the only job processed on machine i inσ4, and for eachi∈{γ+1,γ+2,⋯,m},yi≥2and at least two jobs (including job i) are processed on machine i inσ4. Note that, for eachi∈{1,2,⋯,m},i=(i,yi)is the last job processed on machine i inσ4. Then we have(i,yi−1)≥m+1for eachi∈{γ+1,γ+2,⋯,m}. From Lemma 3.3, we have(31)p(i,yi−1)≤pm+1≤D2for eachi∈{γ+1,γ+2,⋯,m}.SinceD2<Cl(σ4)≤D, from (31), for eachi∈{γ+1,γ+2,⋯,m}, we havexi≥1, and so,(32)yi−xi≤xiifyi−xi=1,andyi−xi≤xi+1ifyi−xi=2.Sinceψ=σ3is a List-LPT schedule of N, we haveSj(ψ)<Cmin(ψ)for eachj∈N. From the relation of ψ andσ4, we can observe thatCmin(σ4)=Cmin(ψ)andSj(σ4)<Cmin(σ4)≤Dforj∈N. Especially,Sj(σ4)<Cmin(σ4)≤Dforj=1,2,⋯,m. Note that j is the last job processed on machine j inσ4,j=1,2,⋯,m. Then at most m jobs complete their processing at or after timeCmin(σ4). Hence, in the case thatCl(σ4)≥Cmin(σ4), we have|J+(l)|≤m, and so,q(J+(l))≤∑k=1mqβ(n−k+1)≤3D8, which implies thatDmax(σ4)=Cl(σ4)+q(J+(l))<D+3D8<3D2, as required.It remains to consider the case that(33)D2<Cl(σ4)<Cmin(σ4).We distinguish the following two subcases.Case 2.1:Cmin(σ4)≤3D4. Then we have(34)yi−xi≤xi+1for eachi∈{1,2,⋯,m}.In fact, ifyi−xi≤1, then (34) holds trivially sincexi≥0. Ifyi−xi=2, thenyi≥2, and so,i∈{γ+1,γ+2,⋯,m}. In this case, (34) follows from (32). Suppose in the following thatyi−xi≥3. SinceCl(σ4)>D2by (33),Cmin(σ4)≤3D4, andS(i,yi)(σ4)≤Cmin(σ4), we have3Cl(σ4)>2S(i,yi)(σ4). From Claim 1(ii), we haveyi−xi≤xi+1. This proves (34).From (26) and (34), we get|J+(l)|≤n−|J+(l)|+m. Sinceq(J+(l))is the sum of the|J+(l)|smallest delivery times, we haveq(J+(l))≤(q(N)−q(J+(l)))+∑k=1mqβ(n−k+1). Sinceq(N)≤Dand∑k=1mqβ(n−k+1)≤3D8, we haveq(J+(l))≤11D16<3D4. It follows from (33) thatDmax(σ4)=Cl(σ4)+q(J+(l))<Cmin(σ4)+q(J+(l))<3D4+3D4=3D2, as required.Case 2.2:3D4<Cmin(σ4)≤D. Then we distinguish the following three subcases.Case 2.2.1:D2<Cl(σ4)≤5D8. Then we have(35)yi−xi≤2xi+1for eachi∈{1,2,⋯,m}.In fact, ifyi−xi≤1, then (35) holds trivially sincexi≥0. If2≤yi−xi≤3, theni∈{γ+1,γ+2,⋯,m}, and so, (35) follows from the factxi≥1. Suppose in the following thatyi−xi≥4. SinceCl(σ4)>D2andS(i,yi)(σ4)≤Cmin(σ4)≤D, we have2Cl(σ4)>D>S(i,yi)(σ4). From Claim 1(iii), we haveyi−xi≤xi+2≤2xi+1. This proves (35).From (26) and (35), we get|J+(l)|≤2(n−|J+(l)|)+m. Sinceq(J+(l))is the sum of the|J+(l)|smallest delivery times, we haveq(J+(l))≤2(q(N)−q(J+(l)))+∑k=1mqβ(n−k+1). Sinceq(N)≤Dand∑k=1mqβ(n−k+1)≤3D8, we haveq(J+(l))≤7D8. ThenDmax(σ4)=Cl(σ4)+q(J+(l))<5D8+7D8=3D2, as required.Case 2.2.2:5D8<Cl(σ4)≤3D4. We distinguish the following two subcases.Case 2.2.2.1: There is a certaini∈Mso thatyi−xi=3andxi=1. Thenyi=4and the four jobs(i,yi),(i,xi+2),(i,xi+1),(i,xi)are processed on machine i inσ3in this order. From the definition of z, we have(i,xi+1)≥z. Since(i,xi)>(i,xi+1)≥z, from (11), we havep(i,xi)≤p(i,xi+1)≤pz≤3D8. This implies thatp(i,xi)=C(i,xi)(σ4)=C(i,xi+1)(σ4)−p(i,xi+1)≥Cl(σ4)−p(i,xi+1)>5D8−3D8=D4. Sincep(i,xi)+p(i,xi+1)=C(i,xi+1)(σ4)≥Cl(σ4)>5D8andp(i,xi)+p(i,xi+1)≤p(i,xi+2)+p(i,yi), we have5D4<2(p(i,xi)+p(i,xi+1))≤p(i,xi)+p(i,xi+1)+p(i,xi+2)+p(i,yi)=C(i)(σ4), i.e.,C(i)(σ4)>5D4.Now letσ5be the schedule of N obtained fromσ4by shifting the processing of each job(i′,k)on each machinei′forward an amount of11D8−C(i′)(σ4)units of time. Then we haveCmax(σ5)=C(i′)(σ5)=11D8,S(i′,k)(σ5)=S(i′,k)(σ4)+11D8−C(i′)(σ4), andC(i′,k)(σ5)=C(i′,k)(σ4)+11D8−C(i′)(σ4)for eachi′∈Mand eachk=1,2,⋯,yi′. SinceCmax(σ5)=11D8andCmax(σ4)≥C(i)(σ4)>5D4, we haveCmax(σ5)−Cmax(σ4)≤Cmax(σ5)−C(i)(σ4)<D8. From the relations ofσ3,σ4andσ5, we can observe that, for every two distinct jobsj,j′∈N,Sj(σ3)≤Sj′(σ3)if and only ifCj(σ5)≥Cj′(σ5). Sinceσ3=πis a List-LPT schedule of N, we haveSj(σ3)≤Sj′(σ3)ifj≤j′. Then(36)Cj(σ5)≥Cj′(σ5)ifj≤j′.SinceC(i,xi)(σ4)=p(i,xi)≤3D8andCmax(σ5)−C(i)(σ4)≤D8, we haveC(i,xi)(σ5)=C(i,xi)(σ4)+Cmax(σ5)−C(i)(σ4))<D2. From (36), we haveCj(σ4)≤Cj(σ5)<D2for eachj≥(i,xi). SinceCl(σ4)>5D8>D2, those jobs j withj≥(i,xi)do not belong toJ+(l). This implies thatj<(i,xi), and so,pj≥p(i,xi)>D4, for eachj∈J+(l). From (4), we deduce thatq(J+(l))<3D4. Hence,Dmax(σ4)=Cl(σ4)+q(J+(l))≤3D4+3D4=3D2, as required.Case 2.2.2.2: There is noi∈Mso thatyi−xi=3andxi=1. Then we have(37)yi−xi≤xi+1for eachi∈{1,2,⋯,m}.In fact, ifyi−xi≤1, then (37) holds trivially sincexi≥0. Ifyi−xi=2, then (37) follows from the factxi≥1. Ifyi−xi=3, then (37) follows from the factxi≥2. Suppose in the following thatyi−xi≥4. SinceCl(σ4)>5D8andS(i,yi)(σ4)≤Cmin(σ4)≤D, we have5Cl(σ4)>3S(i,yi)(σ4). From Claim 1(iv), we haveyi−xi≤xi+1. This proves (37).From (26) and (37), we get|J+(l)|≤(n−|J+(l)|)+m. Sinceq(J+(l))is the sum of the|J+(l)|smallest delivery times, we haveq(J+(l))≤(q(N)−q(J+(l)))+∑k=1mqβ(n−k+1). Sinceq(N)≤Dand∑k=1mqβ(n−k+1)≤3D8, we haveq(J+(l))<3D4. ThenDmax(σ4)=Cl(σ4)+q(J+(l))<3D4+3D4=3D2, as required.Case 2.2.3:3D4<Cl(σ4)≤D. We distinguish the following two subcases.Case 2.2.3.1:3D4<Cl(σ4)≤7D8and there is a certaini∈Mso thatyi−xi=2andxi=1. Thenyi=3,(i,xi)≥z, andC(i,xi+1)(σ4)≥Cl(σ4)>3D4. From (11), we have(38)p(i,xi)≤pz≤3D8.Sincep(i,xi)+p(i,xi+1)=C(i,xi+1)(σ4)>3D4and(i,xi+1)≥m+1, we have(39)pm+1≥p(i,xi+1)>3D4−p(i,xi)≥3D8.From (31), we havep(i,xi+1)≤D2. Then(40)p(i,xi)=C(i,xi+1)(σ4)−p(i,xi+1)>3D4−D2=D4.Ifμ=2m−nA, by Lemma 3.4, we havepμ+1<D4. Since(i,xi)≥z≥μ+1, we havep(i,xi)≤pμ+1<D4, a contradiction to (40). Thusμ<2m−nA. Sincep(i,xi+1)>3D8from (39), we have(i,xi+1)∈JA∪JB∪JE. Then the fact(i,xi+1)≥m+1implies thatμ=nA+nB+nE≥(i,xi+1)≥m+1, and so,z≥μ+1≥m+2. Recall thatσ3=πis a List-LPT schedule of N andσ4is obtained fromσ3by rescheduling the jobs on each machine in SPT order. Then the two jobsi′and2m+1−i′are processed on machinei′for eachi′∈{2m−z+2,2m−z+3,⋯,m}. This further implies that2m−i+1=(i,xi+1)≤μ, and so,2m+1−μ≥i. For eachi′∈Mwithi′≥i, we have(i′,yi′−1)=2m−i′+1≤2m−i+1=(i,xi+1). It follows from (39) that(41)p(i′,yi′)≥p(i′,yi′−1)>3D8for each machinei′≥i.If there exists some job(i′,x)∈J+(l)so thati′≥iandx≤yi′−2, from (41) and the fact thatC(i′,x)(σ4)≥Cl(σ4)>3D4, we haveCmax(σ4)≥C(i′)(σ4)≥C(i′,x)(σ4)+p(i′,yi′−1)+p(i′,yi′)>3D4+2⋅3D8=3D2>11D8, a contradiction to Lemma 3.8. By putting (41) in consideration, we have(42)p(i′,x)>3D8andx≥yi′−1if(i′,x)∈J+(l)andi′≥i.Moreover, we have(43)p(i′,xi′+1)>3D8ifxi′+1≤yi′≤3.Note that (43) is equivalent to(44)p(i′,x)>3D8if(i′,x)∈J+(l)andyi′≤3.To prove (43), we fix ani′∈Mso thatxi′+1≤yi′≤3. Ifyi′=xi′+1, then(i′,xi′+1)=(i′,yi′)=i′≤m, and so,(i,xi+1)>(i′,xi′+1)since(i,xi+1)≥m+1. From (39), we havep(i′,xi′+1)≥p(i,xi+1)>3D8, as required in (43).Ifyi′≥xi′+2, thenyi′≥2, and so,xi′≥1. This further implies thatyi′=3andxi′=1. Note that2⋅p(i′,xi′+1)≥p(i′,xi′)+p(i′,xi′+1)=C(i′,xi′+1)(σ4)≥Cmin(σ4)≥Cl(σ4)>3D4, where the second inequality follows from (33). Thenp(i′,xi′+1)>3D8. This proves (43).Ifpj>3D8for eachj∈J+(l), from (3), we haveq(J+(l))<5D8. ThenDmax(σ4)=Cl(σ4)+q(J+(l))<7D8+5D8=3D2, as required.Suppose in the following that there is a certainh∈J+(l)so thatph≤3D8. For our purpose, we assume that h is as large as possible. ThenJ+(l)⊆{1,2,⋯,h}, andh=(i′,x)for somei′∈Mandx=xi′+1≤yi′. From (44), we haveyi′≥4. From (42), we havei′≤i−1. Since(i′,yi′)≤m, from (39), we havep(i′,yi′)>3D8, and so,x≤yi′−1.Ifp(i′,yi′)≥5D8, thenCl(σ4)≤C(i′,x)(σ4)≤Cmax(σ4)−p(i′,yi′)≤11D8−5D8=3D4, where the last inequality follows from Lemma 3.8. This contradicts our assumption in Case 2.2.3 thatCl(σ4)>3D4. It follows thatp(i′,yi′)<5D8.Note that, for every two distinct jobsj′,j″∈N, the conditionSj′(σ3)<Sj″(σ3)impliesj′<j″. SinceS(i′,yi′−1)(σ3)=p(i′,yi′)<5D8<3D4andS(i,xi)(σ3)=p(i,yi)+p(i,xi+1)>3D4from (39), we have(i′,yi′−1)<(i,xi), and so,p(i′,yi′−1)≥p(i,xi). Together with the relationp(i′,yi′)≥p(i,xi+1), we havep(i′,yi′)+p(i′,yi′−1)≥p(i,xi+1)+p(i,xi)>3D4. From Observation 2, we haveS(i′,1)(σ3)≤Cmin(σ3)≤D. Thenp(i′,2)+p(i′,3)+⋯+p(i′,yi′)≤D, and so,p(i′,2)+p(i′,3)+⋯+p(i′,yi′−2)≤D−p(i′,yi′)+p(i′,yi′−1)<D−3D4=D4. This means thatp(i′,1)≤p(i′,2)<1yi′−3⋅D4, and so,C(i′)(σ4)≤D+p(i′,1)<D+1yi′−3⋅D4.Ifyi′≥5, thenCl(σ4)≤C(i′,x)(σ4)≤S(i′,yi′)(σ4)=C(i′)(σ4)−p(i′,yi′)<D+1yi′−3⋅D4−3D8≤3D4, where the first inequality follows from the factp(i′,yi′)>3D8implied in (39). This contradicts the assumptionCl(σ4)>3D4in Case 2.2.3. Hence, we haveyi′=4. This further implies thatp(i′,1)≤p(i′,2)<1yi′−3⋅D4=D4.Now by the definition of h, we haveSh(σ4)=S(i′,x)(σ4)≤S(i′,yi′−1)(σ4)=p(i′,1)+p(i′,2)<2⋅D4=D2. Note thatCh(σ4)≥Cl(σ4)andJ+(l)⊆{1,2,⋯,h}. Sinceph+∑k=1hqβ(n+1−k)≤Dfrom (4), we haveDmax(σ4)=Cl(σ4)+q(J+(l))≤Ch(σ4)+∑k=1hqβ(n+1−k)=Sh(σ4)+ph+∑k=1hqβ(n+1−k)<D2+D=3D2, as required.Case 2.2.3.2: Either7D8<Cl(σ4)≤Dor there is noi∈Mso thatyi−xi=2andxi=1. Then we have(45)yi−xi≤xifor eachi∈{γ+1,γ+2,⋯,m}.In fact, ifyi−xi=1, (45) follows from (32).Ifyi−xi=2and3D4<Cl(σ4)≤7D8, then the assumption of Case 2.2.3.2 implies thatxi≠1. Then (45) follows from the fact thatxi≥2.Ifyi−xi=2and7D8<Cl(σ4)≤D, then(i,yi−1)=(i,xi+1)≥m+1. From Lemma 3.3, we havep(i,xi+1)≤pm+1≤D2. ThenC(i,xi)(σ4)=C(i,xi+1)(σ4)−p(i,xi+1)≥Cl(σ4)−p(i,xi+1)>7D8−D2=3D8. Since(i,xi)is the third job processed on machine i inσ3, we have(i,xi)≥z. From (11), we havep(i,xi)≤3D8. Then the factC(i,xi)(σ4)>3D8implies thatxi≥2, and therefore,yi−xi≤xi.Suppose in the following thatyi−xi≥3. SinceCl(σ4)>3D4andS(i,yi)(σ4)≤D, we have4Cl(σ4)>3S(i,yi)(σ4). From Claim 1(i), we haveyi−xi≤xi. This proves (45).For eachi∈{1,2,⋯,γ}, sinceC(i)(σ4)=pi≥Cmin(σ4)≥Cl(σ4), we haveyi=1andxi=0, and so,yi−xi=1. By putting (26) and (45) in consideration, we conclude that|J+(l)|≤(n−|J+(l)|)+γ. This implies thatq(J+(l))≤q(N)−q(J+(l))+∑k=1γqβ(n−k+1). From the factq(N)≤Din (3), we obtainq(J+(l))≤D2+12×∑k=1γqβ(n−k+1)≤D2+∑k=1γqβ(n−k+1).Ifγ=0, thenq(J+(l))≤D2. ThusDmax(σ4)=Cl(σ4)+q(J+(l))<D+D2=3D2, as required.Ifγ>0, thenDmax(σ4)=Cl(σ4)+q(J+(l))<pγ+∑k=1γqβ(n−k+1)+D2≤D+D2=3D2, as required. This completes the proof.  □Let I be an instance of problemP|ADT|Dmax. As the discussion in Section 3, we useN={1,2,⋯,n}to denote the index set of jobs. To avoid the trivial case, we assume thatn≥m+1. Moreover, we suppose thatp1≤p2≤⋯≤pnandqβ(1)≥qβ(2)≥⋯≥qβ(n). Let ϵ be an arbitrary small rational number with0<ϵ≤13. For simplicity, we shall assume thatE=1ϵis integral.Recall that, in (1), we defineD=max⁡{1m⋅p(N)+qβ(n),maxj∈N⁡{pj+∑k=1jqβ(n+1−k)},Cmax(π1),D(z)}.As in Section 3, we defineσ⁎to be an optimal schedule of problemP|ADT|Dmaxon instance I. From Lemma 3.1, D is a lower bound ofDmax(σ⁎), and from the discussion in Section 3,32Dis an upper bound ofDmax(σ⁎). Then 2D is an upper bound of(1+ϵ)Dmax(σ⁎).A jobj∈Nis called big ifpj>ϵD, and is called small ifpj≤ϵD. Let μ be the number of small jobs in I. Then1,2,⋯,μare the small jobs andμ+1,μ+2,⋯,nare the big jobs.By the two-exchange argument, we can show that there is an optimal scheduleσ⁎of I which satisfies the three properties in Lemma 2.1 such that the jobs on each machine are processed in the SPT order. Hence, we only consider in this section the schedules in which the jobs on each machine are processed in the SPT order. This implies, on each machine, the small jobs are processed before the big jobs.We defineLS(μ)=(1,2,⋯,μ). When no confusion can occur, we also useLS(μ)to denote the instance{1,2,⋯,μ}. LetL→=(L(1),L(2),⋯,L(m))be an m-vector in which eachL(i)is a nonnegative number. We useProblem(LS(μ),L→)to denote the problem for processing the small jobs1,2,⋯,μon the m machines, without artificial idle times, such that the total processing time of the small jobs assigned to machine i is upper bounded byL(i)(called deadline of machine i in the sequel),1≤i≤m. In this case, we also callL→=(L(1),L(2),⋯,L(m))the deadline vector of the machines (for scheduling the small jobs). We will use the following Algorithm List-SPT as subroutines for scheduling the small jobs.Algorithm List-SPTForProblem(LS(μ),L→).At the current time t, if the first unscheduled job in the listLS(λ)is j and some machine i is available for scheduling job j completing by the deadlineL(i), then schedule job j on machine i starting at time t.The benefit of Algorithm List-SPT is that, for the schedule π generated by Algorithm List-SPT forProblem(LS(μ),L→)(if feasible), we haveπ(j)=jfor allj=1,2,⋯,μ.GivenL→=(L(1),L(2),⋯,L(m)), we defineL→+ϵD=(L(1)+ϵD,L(2)+ϵD,⋯,L(m)+ϵD).Lemma 4.1LetL→andL→′be two nonnegative m-vectors withL′→≥L→+ϵD. If σ is a feasible schedule ofProblem(LS(μ),L→), then the schedule π generated by theAlgorithm List-SPTforProblem(LS(μ),L→′)is feasible and(46)Cj(π)≤Cσ(j)(σ)+ϵD,j=1,2,⋯,μ.ProofFix an indexk∈{1,2,⋯,μ}, and suppose that (46) holds for eachj∈{1,2,⋯,k−1}. From the definition of small jobs, we havep1≤p2≤⋯≤pk≤ϵD. Suppose that jobσ(k)is processed on machinei0in σ and let t be the completion time of jobσ(k). Thent≤L(i0). Let A be the set of machines i withL(i)<tand let B be the set of machines i withL(i)≥t. Theni0∈B. We only need to show that List-SPT schedules job k starting at a timet′≤t.Suppose to the contrary that List-SPT cannot schedule job k starting at a timet′≤t. Note that the deadline of each machine i is given byL′(i)≥L(i)+ϵDinProblem(LS(μ),L→′). Therefore, when Algorithm List-SPT considers to schedule job k, for eachi∈A, machine i is busy in the interval[0,L(i)+ϵD−pk]⊇[0,L(i)], and for eachi∈B, machine i is busy in the interval[0,t]. This implies thatp1+p2+⋯+pk>∑i∈AL(i)+t⋅|B|+pk. On the other hand, by the definitions of σ and t, we havepσ(1)+pσ(2)+⋯+pσ(k)≤∑i∈AL(i)+t⋅|B|. This contradicts the fact thatp1+p2+⋯+pk≤pσ(1)+pσ(2)+⋯+pσ(k). This proves (46) and also the feasibility of π. The lemma follows. □Then following lemma is also useful in our discussion.Lemma 4.2Lete1,e2,⋯,en,δ1,δ2,⋯,δn,δbe2n+1numbers so thate1≤e2≤⋯≤enandmax⁡{δ1,δ2,⋯,δn}≤δ. Let(f1,f2,⋯,fn)be a sorting of the n numberse1+δ1,e2+δ2,⋯,en+δnsuch thatf1≤f2≤⋯≤fn. Thenfi≤ei+δfori=1,2,⋯,n.ProofThe lemma holds trivially whenn=1. Inductively, suppose that the result holds whenn≤k−1, wherek≥2is an integer. We now consider the case thatn=k. Thene1≤e2≤⋯≤ek,max⁡{δ1,δ2,⋯,δk}≤δ, and(f1,f2,⋯,fk)is a sorting of the k numberse1+δ1,e2+δ2,⋯,ek+δksuch thatf1≤f2≤⋯≤fk.Suppose thatek+δk=fifor somei∈{1,2,⋯,k}. Then(f1,⋯,fi−1,fi+1,⋯,fk)is a sorting of thek−1numberse1+δ1,e2+δ2,⋯,ek−1+δk−1such thatf1≤⋯≤fi−1,fi+1≤⋯≤fk. By the induction hypothesis, we have(f1,⋯,fi−1,fi+1,⋯,fk)≤(e1+δ,e2+δ,⋯,ek−1+δ). From the fact that(fi,⋯,fk−1)≤(fi+1,⋯,fk), we have(f1,f2,⋯,fk−1)≤(e1+δ,e2+δ,⋯,ek−1+δ). Finally, sincee1≤e2≤⋯≤ekandmax⁡{δ1,δ2,⋯,δk}≤δ, we also havefk=max⁡{e1+δ1,e2+δ2,⋯,ek+δk}≤ek+δ. The result follows. □Inspired by the rounding technique in [1], we construct a new instanceI⁎by the following way:•We keep the n delivery timesq1,q2,⋯,qnunchanged inI⁎.For each small jobj∈{1,2,⋯,μ}, we still definepj⁎=pjto be the processing time of job j inI⁎.For each big jobj∈{μ+1,μ+2,⋯,n}, the processing time of job j inI⁎is defined to bepj⁎=ϵD(1+ϵ)h, where h is the unique nonnegative integer withϵD(1+ϵ)h−1<pj≤ϵD(1+ϵ)h.In the following, we useπ⁎to denote an optimal schedule of problemP|ADT|Dmaxon instanceI⁎. Note thatI⁎is obtained from I by enlarging the processing time of each big job a factor of at most1+ϵ. Then we have(47)Dmax(π⁎)≤(1+ϵ)Dmax(σ⁎)≤2D.In the optimal scheduleπ⁎ofI⁎, by delaying the starting time of the first big job (if any) on each machine up to the nearest multiple of ϵD, we obtain a scheduleπ′ofI⁎withDmax(π′)≤Dmax(π⁎)+ϵD, which takes only a small loss. Then we defineDelay(I⁎,ϵD)to be the restricted problem ofP|ADT|Dmaxon instanceI⁎in which the starting time of the first big job (if any) on each machine must be the multiple of ϵD. Note that aboveπ′is just a feasible schedule of problemDelay(I⁎,ϵD). In the following, we useπ⁎⁎to denote an optimal schedule of problemDelay(I⁎,ϵD). Then we have(48)Dmax(π⁎⁎)≤Dmax(π⁎)+ϵD≤(2+ϵ)D,where the last inequality follows from (47).Now we consider the processing of big jobs. Recall that the processing time of each big job j inI⁎is of the formpj⁎=ϵD(1+ϵ)h. SinceϵD<pj≤pj⁎≤(1+ϵ)pjandpj≤D, we have1≤h≤ρ, whereρ=⌈log1+ϵ⁡E⌉. This means that the number of big processing times inI⁎is at most ρ, a constant. Then then−μbig jobs can be simply denoted by the vectorn→=(n1,n1,⋯,nρ), wherenhis the number of big jobs with processing timeϵD(1+ϵ)h.A machine-configuration (for the big jobs) is a nonnegative vectorV→=(λ;n1′,n2′,⋯,nρ′)so thatλ∈{0,1,2,⋯,2E}andn1′,n2′,⋯,nρ′, with(n1′,n2′,⋯,nρ′)≤(n1,n2,⋯,nρ), are nonnegative integers such thatn1′+n2′+⋯+nρ′≤2E. Note that we have2E+1choices for λ, and at most(2E+1)ρchoices for(n1′,n2′,⋯,nρ′). Then the number of machine-configurations, denoted by Δ, is at most(2E+1)1+ρ, a large constant! The introducing of the machine-configurations is motivated by the fact that, in every optimal schedule of problemDelay(I⁎,ϵD), the processing of the big jobs (if any) on each machine is coincide with some machine-configurationV→=(λ;n1′,n2′,⋯,nρ′)such that: the starting time of the first big job is λϵD and, for each h with1≤h≤ρ, exactlynh′big jobs have processing timeϵD(1+ϵ)h. Then we callλ⋅ϵDthe desired starting time of machine-configurationV→=(λ;n1′,n2′,⋯,nρ′). In our later algorithm, when the machine-configurationV→=(λ;n1′,n2′,⋯,nρ′)is assigned to a machine, we will use(λ+1)ϵDas the actual starting time of the first big job processed on this machine. Then the correspondingn1′+n2′+⋯+nρ′big jobs are scheduled in the SPT order from time(λ+1)ϵDto time(λ+1)ϵD+∑h=1ρnh′ϵD(1+ϵ)hon the machine. In the following, we useV→i=(λi;n1(i),n2(i),⋯,nρ(i)),i=1,2,⋯,Δ, to denote the Δ machine-configurations.A schedule-configuration (for the big jobs) is a nonnegative integral vectorX→=(x1,x2,⋯,xΔ)such thatx1+x2+⋯+xΔ=m. Then the number of schedule-configurations, denoted by K, is given by(m+Δ−1m)=(m+Δ−1Δ−1)=O(mΔ−1), a polynomial in m. The introducing of the schedule-configurations is motivated by the fact that, in every optimal schedule of problemDelay(I⁎,ϵD), the processing of the big jobs (if any) on the m machines is coincide with some schedule-configurationX→=(x1,x2,⋯,xΔ)such that: the machine-configurationV→i=(λi;n1(i),n2(i),⋯,nρ(i))is assigned to exactlyximachines,i=1,2,⋯,Δ. Note that a schedule-configurationX→=(x1,x2,⋯,xΔ)is feasible if and only if∑i=1Δxi⋅(n1(i),n2(i),⋯,nρ(i))=(n1,n2,⋯,nρ)=n→, that is, the big jobs are all scheduled on the m machines. In the following, we useX→k=(x1(k),x2(k),⋯,xΔ(k)),1≤k≤K, to denote the K schedule-configurations.For a given schedule-configurationX→k=(x1(k),x2(k),⋯,xΔ(k)), the factx1(k)+x2(k)+⋯+xΔ(k)=mimplies that exactly m machine-configurations (repetition is allowed), sayV→i1,V→i2,⋯,V→imwithi1≤i2≤⋯≤im, are assigned to the m machines. The desired deadlinesλi1ϵD,λi2ϵD,⋯,λimϵDof the m machine-configurations form a deadline vector(λi1ϵD,λi2ϵD,⋯,λimϵD)of the machines for scheduling the small jobs. Such a vector will be denoted byL→kand is called the deadline vector corresponding to schedule-configurationX→k.We are ready to describe our PTAS, called SPT-LS-ENU, for problemP|ADT|Dmax, which combines List-SPT and enumeration of big jobs.Algorithm SPT-LS-ENUA PTAS for problemP|ADT|Dmax.Input: An instance I and a small constant ϵ with0<ϵ<13andE=1ϵbeing integral.Output: A schedule σ of problemP|ADT|Dmaxon instance I.Step 1: Sort the processing times in the orderp1≤p2≤⋯≤pnand sort the delivery times in the orderqβ(1)≥qβ(2)≥⋯≥qβ(n). Determine the small jobs1,2,⋯,μand the big jobsμ+1,μ+2,⋯,n.Step 2: Construct the new instanceI⁎, the vectorn→=(n1,n2,⋯,nρ), the machine-configurationsV→i=(λi;n1(i),n2(i),⋯,nρ(i)),i=1,2,⋯,Δ, and the schedule-configurationsX→k=(x1(k),x2(k),⋯,xΔ(k)),1≤k≤K.Step 3: Fork=1,2,⋯,K, do the following for the schedule-configurationX→k=(x1(k),x2(k),⋯,xΔ(k)):(3.1) If∑i=1Δxi(k)⋅(n1(i),n2(i),⋯,nρ(i))≠(n1,n2,⋯,nρ), then claim that the schedule-configurationX→kis infeasible. Setσkto be a dummy schedule withDmax(σk)=+∞.(3.2) LetV→i1,V→i2,⋯,V→imwithi1≤i2≤⋯≤imbe the m machine-configurations induced byX→kand letL→k=(λi1ϵD,λi2ϵD,⋯,λimϵD)be the deadline vector corresponding toX→k. Do Algorithm List-SPT forProblem(LS(μ),L→k+ϵD). Then we consider the following two cases:•If List-SPT cannot schedule the small jobs subject to the deadline vectorL→k+ϵD, then the result in Lemma 4.1 implies that the deadline vectorL→kis infeasible for scheduling the small jobs. Setσkto be a dummy schedule withDmax(σk)=+∞.If List-SPT schedules all the small jobs subject to the deadline vectorL→k+ϵD, we useσk′to denote the resulted schedule of the small jobs. Then, by using the m components(λi1+1)ϵD,(λi2+1)ϵD,⋯,(λim+1)ϵDofL→k+ϵDas the actual starting times of the big jobs on the m machines1,2,⋯,m, respectively, we schedule the big jobs according to the m machine-configurationsV→i1,V→i2,⋯,V→im. We useσk″to denote the resulted schedule of the big jobs. Thenσk′σk″is a schedule of problemDelay(I⁎,ϵD), whereσk′σk″is the union of schedulesσk′(for the small jobs) andσk″(for the big jobs). By replacing the processing times of the big jobs inI⁎with the original processing times of the big jobs in I, we obtain fromσk′σk″a schedule, denoted byσk, of instance I. Then the jobs are delivered in the nondecreasing order of their processing completion times inσkas soon as possible. In this case, we haveDmax(σk)<+∞.In Algorithm SPT-LS-ENU, Step 1 runs inO(nlog⁡n)time. Step 2 runs inO((1+ρ)Δ)+O(ΔK)=O(ΔK)time. In each iteration of Step 3, Step (3.1) runs inO(ρΔ)time and Step (3.2) runs inO(n)time. Then Step 3 runs inO((n+ρΔ)K)time. Finally, Step 4 runs inO(K)time. Then the total time complexity of Algorithm SPT-LS-ENU is given byO(nlog⁡n+ΔK+(n+ρΔ)K). Note thatρ=⌈log1+ϵ⁡E⌉andΔ≤(2E+1)1+ρare constants andK=O(mΔ−1). Then Algorithm SPT-LS-ENU runs inO(nlog⁡n+nK)=O(nlog⁡n+n⋅m(2ϵ+1)1+⌈log1+ϵ⁡1ϵ⌉)time, which is polynomial in n and m.Theorem 4.3Let σ be the schedule generated byAlgorithm SPT-LS-ENU. ThenDmax(σ)≤(1+3ϵ)Dmax(σ⁎).ProofWe first consider the optimal scheduleπ⁎⁎of problemDelay(I⁎,ϵD). For each machine i, we define the unique nonnegative integerλ[i]by the following way: If some big jobs are processed on machine i inπ⁎⁎, thenλ[i]ϵDis the starting time of the first big job on machine i, and if no big jobs are processed on machine i inπ⁎⁎, thenλ[i]is the minimum such that no small jobs completes after timeλ[i]ϵD. Moreover, for each h with1≤h≤ρ, we usenh[i]to denote the number of big jobs of processing timeϵD(1+ϵ)hon machine i. Then, for each i with1≤i≤m, the vectorV→[i]=(λ[i];n1[i],n2[i],⋯,nρ[i])forms a machine-configuration. For each i with1≤i≤Δ, letxibe the number of machine-configurations inV→[1],V→[2],⋯,V→[m]which are identical to the machine-configurationL→i. Then(x1,x2,⋯,xΔ)forms a schedule-configuration. It follows that there isk∈{1,2,⋯,K}such thatX‾k=(x1,x2,⋯,xΔ). By renumbering the m identical machines, we may assume that(V→[1],V→[2],⋯,V→[m])=(V→i1,V→i2,⋯,V→im)coincide with the notation in Step (3.2) of Algorithm SPT-LS-ENU for the schedule-configurationX‾k.L→k=(λ[1]ϵD,λ[2]ϵD,⋯,λ[m]ϵD)is the deadline vector corresponding toX→k.Letσk′andσk″be the same as that in Step (3.2) of Algorithm SPT-LS-ENU for the schedule-configurationX‾k. Thenσk′is the schedule of the small jobs generated by Algorithm List-SPT forProblem(LS(μ),L→k+ϵD), andσk″is the schedule of the big jobs obtained from that inπ⁎⁎by delaying the starting time of each big job an amount of ϵD. Letπ=σk′σk″and letπ′be the schedule of the small jobs inπ⁎⁎. From (46) in Lemma 4.1, for each small jobj∈{1,2,⋯,μ}, we haveCj(π)=Cj(σk′)≤Cπ′(j)(π⁎⁎)+ϵD. Moreover, from the definition ofσk″, for each big jobj∈{μ+1,μ+2,⋯,n}, we haveCj(π)=Cj(π⁎⁎)+ϵD. From Lemma 4.2, we conclude thatCπ(j)(π)≤Cπ⁎⁎(j)(π⁎⁎)+ϵDforj=1,2,⋯,n. Note that, in each schedule, the jobs are delivered in the nondecreasing order of their processing completion times as soon as possible. Then we have(49)Dmax(π)≤Dmax(π⁎⁎)+ϵD.Note thatσkis obtained fromπ=σk′σk″by replacing the processing times of the big jobs inI⁎with the original processing times of the big jobs in I. Sincepj≤pj⁎for all big jobs j, we have(50)Dmax(σk)≤Dmax(π).Putting (47), (48), (49) and (50) together, we have(51)Dmax(σk)≤(1+ϵ)Dmax(σ⁎)+2ϵD≤(1+3ϵ)Dmax(σ⁎).By the choice of σ, we haveDmax(σ)≤Dmax(σk). From (51), we conclude thatDmax(σ)≤(1+3ϵ)Dmax(σ⁎). The result follows. □

@&#CONCLUSIONS@&#
