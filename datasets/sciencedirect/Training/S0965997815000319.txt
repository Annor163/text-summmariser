@&#MAIN-TITLE@&#
Deferred boundary evaluation of complex CSG models

@&#HIGHLIGHTS@&#
Robust and accurate method for evaluating CSG evaluations of complex models.The evaluation of the CSG expression is performed in one step.This method allows us to calculate any partial result with no extra computation time.It generates better triangulations for the result than the classic method.High-performance, uses multithreading, and can be used with an out-of-core approach.

@&#KEYPHRASES@&#
Constructive solid geometry,Boolean operations,Triangular meshes,Boundary representations,Geometric algorithms,Computer-aided design,

@&#ABSTRACT@&#
In this paper we present a deferred method for evaluating a complete CSG tree based on triangulated solids. It allows the exact evaluation of the surface of the entire model in a single step, using regularized Boolean classifications. The overall performance with this approach is better than with the classical method, which incrementally evaluates a CSG tree with single Boolean operations. The deferred algorithm does not use any intermediate result for the nodes of the CSG tree. It uses a very simple data structure and an octree that speeds up spatial queries for the entire CSG tree. The algorithm intensively uses multitasking and is ready for working with very complex CSG expressions, including the application of an out-of-core based approach.

@&#INTRODUCTION@&#
Constructive Solid Geometry (CSG) is an essential tool used in geometric modeling for the creation of complex models. It is based on a set-theoretic Boolean expression of primitive solid objects [7] of a typically very simple structure. The Boolean operations, such as union, intersection, difference, and symmetric difference, are applied to the boundary of 3D objects in the same way as with other sets. This is one of the most intuitive ways to create objects. The construction process is incremental and hierarchical. By using CSG, we can obtain very complex solids.A CSG representation consists of a sequence of Boolean operations on graphical primitives. It is stored as a tree. The leaf nodes contain the primitives, and each inner node represents a Boolean operation. Every node also stores a geometric transformation, which allows performing translations, rotations, and scaling as well as non-rigid transformations. This form of 3D modeling has been used extensively in fields such as industrial engineering (CAD/CAM), Virtual Reality, and Computer Graphics [2,11].In this paper we present a method for evaluating CSG trees based on polygonal meshes, specifically triangulated meshes. The triangle mesh is the most versatile polyhedral representation among B-Rep representations [15]. This boundary representation scheme has multiple applications, and it is used in CAD, Virtual Reality and videogames to represent polyhedral solids, mostly due to its simplicity. It can represent almost any object with a given level of detail. Moreover, it can be directly processed with graphics hardware.Pure CSG and B-Rep representations have different advantages and disadvantages. A CSG solid is always closed and encloses a volume, which is desirable in CAD environments. However, the rendering is typically carried out by ray tracing, which is a highly time-consuming process. There are systems that perform real-time ray tracing, but in general they are slower (even the GPU based methods) than the standard rasterization performed by OpenGL/DirectX with B-Reps primitives. On the other hand, B-Reps models (and thus triangle meshes) can be easily rendered. Nonetheless, a B-Rep has to fulfill strong geometric and topological requirements in order to correctly represent a solid [7]. For this reason, Boolean operations, and thus CSG evaluations, are far more difficult to perform properly on triangle meshes. In consequence, solid modelers tend to combine both solid representations in order to take advantage of the strengths of each one.Our method computes the evaluation of a CSG tree based on triangulated solids. The representation of the tree is given by a script which contains commands for describing all the primitives, their rigid transformations and the Boolean operations between them. However, solid design is an interactive process in most of the cases. This means that the user performs operations one by one, including corrections and modifications. This interactive process is usually assisted by command stacks, which include Boolean operations and geometric transformations. Also, undo and redo commands are used. This list of interactive commands can be represented by a tree, and can be internally used to build a CSG tree. But generally speaking, a script has much higher scope for describing all the data needed. Therefore, our method is tested with scripts, because the interactive scenario is rather a concatenation of independent Boolean operations. Our algorithm is designed to evaluate the entire tree in a single step in order to improve the performance.The evaluation of a CSG tree in a single step has several advantages. Because no intermediate results are stored, several intermediate calculations are simplified and compacted, resulting in a more robust algorithm. With B-Rep, the topology of the result of a Boolean operation between two solids must be checked and corrected in order to ensure that is a valid solid representation. With a complex CSG tree, this can present a severe performance penalty. With a one-step approach the topological corrections are carried out only once (for the final result).The creation and evaluation of CSG trees has been an active research topic for years. Usually a solid modeler uses the CSG to B-Rep conversion as the last step in editing solids, while different rendering methods are used for the editing stage itself. In this regard, the last research efforts are concentrated on visualization and rendering algorithms [4,5,24]. This is due to the need of low response times on CAD systems. As the CSG to B-Rep conversion is considered as an intrinsically slow process, a large number of recent papers are focused on the visualization of the result, or on obtaining an approximate evaluation in order to achieve realtime edition. However, the correctness of the CSG to B-Rep conversion is also important, because there are applications that do need an exact result instead of an approximation, such as architectural design, industrial design, CAE, machining and prototyping, among others. In these cases, the quality of the result is critical from the beginning, and an approximate rendering/evaluation is not enough for some purposes. Nevertheless, a hybrid approach could use a GPU-based method for the rendering and an exact method for the final evaluation.Our work is centered on the evaluation step, so we propose an optimized algorithm for the CSG to B-Rep conversion, particularly by using triangle meshes. Other representations for 3D objects, such as volumetric structures, curved surfaces or complex non-manifold B-Reps, require different solutions. Most research works have focused on isolated Boolean operations. By using these methods, the evaluation of a CSG tree is performed by a succession of Boolean operations between the solids stored on the leaf nodes. Boolean operators and geometric transformations are stored on inner nodes. The binary tree that represents the CSG expression is traversed in post-order. For each inner node, a Boolean operation is carried out.With regarding simple Boolean operations between solids, there are many approaches that have been proposed. However, since this problem is very complex, not every method is suitable for all situations. The representation scheme determines the algorithm to be used. Some methods compute Boolean operations directly on the input elements, such as faces, edges and vertices [9,13,23,31]. These algorithms tend to suffer from robustness problems, because they are based on a rather complex data structure that complicates the topology management, and ultimately leads to a large number of special cases of geometric operations. Other systems avoid these drawbacks by converting the polygonal meshes into volumetric representations. After resolving the Boolean operation with voxels in a straightforward manner, the polygonal result is extracted from the volumetric result. However, a volumetric representation has a limited precision, and the loss of geometric features is unavoidable. Typical methods use a Marching Cubes algorithm to extract features from the volumetric result [10,17]. There are other frameworks that give approximate results. This is because the performance is critical in modern CAD systems [32], and the amount of data to be processed can be very large. The approximations can be made at different levels, such as arithmetic [26] surface definition and representation [1,19,20,28,29,32] or by using direct rendering using the GPU [4,24]. Some of these methods propose the use of hybrid techniques which use voxels at a coarser level and geometry below the voxel resolution [19,27]. However, the extraction of features can be problematic sometimes or they are resolved with a complex approach. Other hybrid methods propose the use of a volumetric representation only at the intersections zones [29]. There are other systems that can calculate a B-Rep model from a pure BSP solid representation [30]. However, in most cases those systems do not provide exact results in order to maximize the performance. Moreover, they tend to suffer from additional issues and special cases, and some of them are very difficult to adapt to the use of extended/exact precision arithmetic (if needed). Approximate methods can be desirable in some applications such as collision detections, biomedical analysis or videogames. However, there are applications that do need an exact result instead of an approximation, such as architectural design, industrial design, CAE, machining and prototyping, among others. Our method is designed for these applications.Our proposal for evaluating regularized Boolean operations on triangulated meshes is based on a classical approach for B-Reps. We focus on triangle intersection and tessellation. As stated in our previous work [3], we demonstrate that this approach is faster than other popular methods when working with triangular meshes. In this work, we extend the classic Boolean operation method presented in that previous work [3] in order to adapt it to the evaluation of the entire CSG tree in one step. This has a number of advantages: intermediate results that introduce precision errors are avoided at each step, so it also increases robustness; more performance is obtained, because much of the computations associated with inner nodes are not needed; the method is robust and provides accurate results. The following sections present the background and the details of the algorithm. Finally, the implementation and the results are analyzed.

@&#CONCLUSIONS@&#
In this paper we have presented an efficient method for evaluating a complete CSG tree based on triangulated solids. It performs the exact evaluation of the surface of a CSG tree in a single step, using a deferred regularized Boolean classification. The overall performance with this approach is better than with the classical method, which incrementally evaluates a CSG tree with isolated Boolean operations. The deferred method also allows us to calculate any partial result of the CSG expression with almost no extra computation time. It generates better triangulations for the result than the classic method, and also performs the topological corrections only once at the end.