@&#MAIN-TITLE@&#
Structural network analysis of biological networks for assessment of potential disease model organisms

@&#HIGHLIGHTS@&#
Potential model organisms may be identified through the study of disease pathways.A graph mining technique can identify “fingerprints” from disease pathways.Potential model organism relevance can be determined based on these fingerprints.Non-obvious model organisms may be identified using graph mining techniques.

@&#KEYPHRASES@&#
Disease pathway mining,Translational bioinformatics,Structural pattern analysis,Interaction networks,

@&#ABSTRACT@&#
Model organisms provide opportunities to design research experiments focused on disease-related processes (e.g., using genetically engineered populations that produce phenotypes of interest). For some diseases, there may be non-obvious model organisms that can help in the study of underlying disease factors. In this study, an approach is presented that leverages knowledge about human diseases and associated biological interactions networks to identify potential model organisms for a given disease category. The approach starts with the identification of functional and interaction patterns of diseases within genetic pathways. Next, these characteristic patterns are matched to interaction networks of candidate model organisms to identify similar subsystems that have characteristic patterns for diseases of interest. The quality of a candidate model organism is then determined by the degree to which the identified subsystems match genetic pathways from validated knowledge. The results of this study suggest that non-obvious model organisms may be identified through the proposed approach.

@&#INTRODUCTION@&#
Complex diseases stem from an interplay of genetic and environmental factors. At the genetic level, these diseases are often associated with the dysfunction of more than one gene. This necessitates the study of complex diseases at a systems level, which includes the modeling of cellular processes that underlie an observed disorder and may involve both sequential and simultaneous molecular interactions between many agents (e.g., genes and chemical compounds). This highlights the importance of curating molecular interaction networks (e.g., gene/protein interaction networks, metabolic networks, and genetic pathways). Data resources that catalogue these networks are increasing both in terms of the number and size of networks as well as their coverage of organisms. Environmental factors, on the other hand, complicate the study of human diseases, since it is difficult to create a controlled environment that enables scientists to study environmental effects on disease development. Hence, model organisms offer opportunities for detailed study of features associated with complex diseases, because these organisms may be genetically engineered to produce desired phenotypes (e.g., associated with a particular disease of interest) and can be studied more easily in a controlled environment.Model organisms play a vital role in advancing knowledge about disease processes. The sophisticated genetics of human diseases makes it important to study model organisms to uncover underlying mechanisms of diseases. Model organisms may not necessarily be closely related to humans from an evolutionary perspective. For instance, yeast are regularly used to model disease states [1]. Comparison of different phenotypes that arise from a conserved set of genes can be important for exploring model organisms for specific human disorders or diseases [2,3]. Analysis of model organism microarray data may also help identify those that have disease-related genes differentially expressed [2].The house mouse (Mus musculus) has been a typical model organism in the study of human disease processes [4], as well as complex traits and social behavior [5]. Mice have also been genetically engineered to provide models for studying cancer and immune diseases [6,7]. However, mice may not always be suitable for the study of all categories of disease. In a recent study of ‘phenologs’ (phenotypes that are equivalent across organisms), McGary et al. suggested a worm model (Caenorhabditis elegans) for breast cancer, a mouse model for autism, a plant model (Arabidopsis thaliana) for Waardenburg syndrome, and a yeast model (Saccharomyces cerevisiae) for angiogenesis disorders [3]. Thus, there may be many potential choices for a suitable model organism relative to the spectrum of phenomena associated with disease. An empirical approach may therefore facilitate the identification of organism(s) that might provide insights to human diseases.Evaluation of candidate model organisms might be measured by the degree to which gene/protein interaction networks include pathways that are structurally and functionally similar to human disease-related biological processes. To this end, prediction of pathways in candidate model organisms that are similar to disease-related pathways in humans can be effective in evaluating model organisms. Pathway prediction can be performed by a variety of techniques. A widely used technique involves mining gene or protein interaction networks to extract dense subgraphs (highly connected components within the network) and then calculating the statistical significance of the discovered subgraphs [8]. Statistically significant subgraphs are then cast as predicted pathways. Tian et al. developed a method to discover statistically significant pathways from gene expression data [9]. Bebek and Yang annotated gene networks with GO annotations and developed the PathFinder method to predict novel pathways [10]. Cakmak and Ozsoyoglu developed a method that used frequent functional patterns in a known pathway to find organism-specific versions of that pathway in the gene networks [11]. Finally, Senf and Chen developed a hidden Markov model-based method to identify genes participating in genetic pathways [12].The present study proposes a computational method that attempts to provide a quantitative measure of how well a candidate model organism might be suited for the study of a given disease type. The proposed quantitative measure is based on the proportion of correctly predicted genetic pathways that can be identified in interaction networks for a given organism. The proposed approach makes use of three types of knowledge resources: (1) Kyoto Encyclopedia of Gene and Genomes (KEGG) [13] pathway database, (2) The Biological General Repository for Interaction Datasets (BioGRID) and Search Tool for the Retrieval of Interacting Genes/Proteins (STRING) gene/protein interaction databases [14], and (3) Gene Ontology (GO) [15] annotations that have been applied to genes or proteins in curated databases. The main premise of this work was to leverage a machine learning method to extract significant functional and structural patterns, or ‘fingerprints,’ [16] from functionally annotated KEGG disease pathways and match these patterns to functionally annotated gene/protein interaction networks in major databases (e.g., BioGRID) as well as meta-databases (e.g., STRING). Depending on an organism’s interaction network coverage of structural patterns for a given disease, it can be ranked in terms of model organism suitability for that disease. Through the use of a statistical model, this study was able to quantify the dependency of functional structural patterns in pathways and disease categories for 14 organisms. It was assumed that some species may be a better suitable model for one disease category and thus less suitable for studying other diseases. This assumption was motivated by the McGary et al. study, where a range of model species were suggested for complex diseases [3]. The promising results suggest that the described approach may be used to determine the potential for a given organism to serve as a model for the study of a particular disease.In this section, the five phases of the developed approach are described: (1) annotation of gene/protein nodes in pathway graphs with molecular function annotations, (2) learning disease fingerprints within annotated pathways, (3) functional annotation and indexing of gene/protein interaction networks, (4) prediction of novel subsystems within gene/protein interaction networks using learned fingerprints, and (5) scoring discovered subsystems using reference pathways. Fig. 1provides an overview of the approach.KEGG genetic pathways are modeled as directed graphs with a node set (V) representing biochemical entities such as genes, chemical compounds, and protein complexes and an edge set (E) representing interaction relations between entities such as general process type (e.g., a gene expression [GErel] or protein interaction [PPrel] relation) and specific relation types (e.g., activation, expression, and inhibition). For this study, only gene/protein nodes were considered. To increase the generalization capability, gene nodes were enriched with molecular function annotations as defined in Gene Ontology (GO) [15]. These GO annotations were imported from Human Protein Reference Database (HPRD) [17] and overlaid on gene/protein nodes of pathway graphs. Gene/protein nodes without a match to HPRD GO annotations were assigned a default ‘NULL’ annotation. Nodes could be associated with multiple GO term annotations and edges could also have multiple labels. Thus, for each graph there was a shift of focus from “what gene/protein is in a given node?” to “what function does the node perform in a system that models a biological process?” With knowledge-enriched annotations of genes/proteins, pathways were represented at a functional level. Subsequently, functional structural patterns in these pathways graphs could be matched to sub-networks of large interaction networks with functionally annotated nodes. In this study, the KEGG disease pathways dataset contained 63 disease pathways across seven human disease classes. KEGG disease pathways cover many biological processes related to genetic information processing, metabolism, and cellular processes. However, this study did not focus on a particular pathway category such as metabolic pathways and cellular processes. Each graph instance in this design set was associated with a class label from the seven disease classes in KEGG.The objective of the second module of the proposed method was to identify characteristic biological functionality patterns, termed “fingerprints,” in annotated disease pathways. A mathematical model and an algorithm were designed to accomplish this task. A disease fingerprint was defined as a subgraph within a GO annotated disease pathway. Fingerprints were assumed to represent functional sub-processes that could be characteristic of a disease class such as immune, infectious, or neurodegenerative disease. Graphs in the design dataset were assumed to be independent and identically distributed (iid) data observed from an unknown probability distribution P(G). The iid data assumption was made to facilitate statistical inference and to make decision about properties (e.g., class label) of a graph instance independent of other graph instances in the dataset. For a given GO-annotated pathway graph, there can be a large number of possible GO functionality subgraph patterns, which will be called “subgraph patterns” hereafter. A mathematical model was proposed to allow for scoring of subgraph patterns. High scoring patterns were output from the model as disease fingerprints.Mining of key subgraph patterns in the dataset was performed so that a subgraph pattern is evaluated within a context of its neighboring patterns in a graph. To formalize the idea of neighbor context, a utility function termed “graph partitioning function” was used to decompose a graph into a set of subgraphs. A partitioning function π: E(G)→Z assigned an integer to every edge e of graph edge set E(G) such that edges with the same integer formed a subgraph. The set of subgraphs Hπ that were highlighted by a specific partitioning function (π) was defined asHπ={gi|∀e∈E(gi),E(gi)⊆E(G),π(e)=i}. Fig. 2illustrates the concept of partitioning.Typically, there exists a large space of possible partitionings for a given graph. Searching for the most likely partitionings in the dataset leads to the identification of key subgraph patterns (fingerprints). Searching for best graph partitionings can be better than searching for individual subgraph patterns (e.g., as in frequent pattern mining techniques [18]). This is because a graph partitioning hypothetically decomposes a system (represented by a graph) into a set of components (subgraphs), and partitioning quality reflects how good is a partitioning in identifying key components of that system (pathway in this case).The search for best partitionings therefore required a scoring function that could be used to assign a high score to a partitioning that highlights the most likely patterns. For a pathway graph (G) of a disease class C and a partitioning π, P(G,π|C) was defined as the probability of observing a pathway graph G and a partitioning π given a disease class C. The value of P(G,π|C) depended on how good that partitioning highlighted key subgraph patterns. Recall that Hπ was defined as the set of subgraphs according to a partitioning function π of graph G:Hπ={gi|∀e∈E(gi),E(gi)⊆E(G),π(e)=i}The graph partitioning probability P(G,π|C) was then computed as a function of the set of subgraphs g∈Hπ:(1)P(G,π|C)=P(g1,g2,…,gn|C)where g1,g2,…,gn∈Hπ. Assuming subgraphs resulting from a partitioning function were conditionally independent, P(G,π|C) was written as(2)P(G,π|C)=∏g∈HπP(g|C)The probability P(g|C) represented the degree to which a subgraph g was a fingerprint of a disease class C. For the purpose of probability estimation, counting the number of instances of a given subgraph in partitionings of all graphs in a direct way was deemed impractical. This was because deciding whether two subgraphs were the same would require a test of subgraph isomorphism [19]. An indirect method was thus used to approximate subgraph matching by representing each subgraph with a set of maximal paths connecting its nodes. A maximal path was defined as a path that could not be extended by adding nodes to either end. The probability P(g|C) could then be expressed in terms of probabilities of maximal paths given a class C. GO-annotated maximal paths inside the subgraphs were used to approximate representation of subgraphs, and thus avoid subgraph isomorphism test. Each maximal path represented a sequence of GO annotations of nodes that lay in that maximal path. In the case where a node had more than one GO annotation, multiple maximal paths were generated so that each maximal path had only one GO annotation per node. Then, P(g|C) was calculated approximately as:(3)P(g|C)≈∏a∈gP(a|C)where a denotes a GO-annotated maximal path that connected a subset of nodes inside subgraph g. Using Eqs. (2) and (3), the likelihood of a partitioning and a graph instance given a disease class label was written as(4)P(G,π|C)=∏g∈Hπ∏a∈gP(a|C)Thus, Eq. (4) represented a scoring function that was used in the search for best partitionings that highlighted disease fingerprints within pathway graphs. The problem was then that the probability distribution of maximal paths P(a|C) did not exist a priori and needed to be estimated while searching for best partitionings. To solve this problem, an iterative training algorithm was used (described in the next section).The proposed model had a set of parameters θ={P(a|C)} composing entries of the conditional probability table of maximal paths. The parameter set θ needed to be estimated in order to score graph partitionings. The Expectation Maximization (EM) [20] algorithm was used to estimate model parameters according to Eqs. (2)–(4) while identifying the set of best partitionings for each graph in the pathway dataset. Initially, a set of random partitionings was generated and maximal paths within these partitionings were collected and an initial distribution for P(a|C) was created. The parameter estimation process for this study had two basic steps. The first step was to search for highly scoring partitionings using the most recent probability table P(a|C) obtained in the previous iteration of EM. Then, counts of maximal paths were collected from subgraphs of the set of best partitionings obtained. Collected counts were then normalized to produce a conditional probability model. During searching and scoring of partitionings, a small probability value was used as a value of P(a|C) in the case where a maximal path had not been added yet to the probability table. The EM algorithm was run for four iterations in this study. Additional details of the mathematical model and EM parameter estimation procedure are presented in Appendix A.The EM algorithm had two outputs: the conditional probability table P(a|C) and the set of best partitionings of each pathway in the dataset. Disease fingerprints were extracted from best partitionings of pathways. Using the model described above, the search for disease fingerprints not only depended on an individual score of a subgraph (according to Eq. (3)), but also based on the contributions of other subgraphs in the quality of a graph partitionings (according to Eq. (4)). To test the model, a graph classifier was built to classify pathways using probability table P(a|C) that was estimated during EM run. This classification task served as benchmarking of the proposed model.The efficacy of the structural pattern analysis method was demonstrated by implementing a graph classifier for disease pathways that utilized the conditional probability model estimated during model training. Given a test set of graphs, the task of the classifier was to assign the most likely disease class to each graph in a test set.This classification task was modeled mathematically by finding the value for C that maximized P(C|G), which represented the probability that C is a disease class of pathway G. Using Bayes’ theorem:(5)P(C|G)=P(C)P(G|C)P(G)where P(C) quantified a priori knowledge about class label distribution, P(G|C) was defined as the conditional probability of observing graph G given that its class label was C, and P(G) was the probability distribution of graphs. The choice of class label did not depend on P(G). Therefore, Eq. (5) was expressed as(6)P(C|G)∞P(C)P(G|C)Modeling P(G|C) directly would have required counting number of instances of a graph G. This approach had a practical challenge: Because each pathway was represented only once in the dataset, P(G|C) would have followed a uniform distribution with probability equal to 1/(number of pathways of class C), and that would not have helped the statistical inference process. An alternative approach to model P(G|C) that was used in this study was to incorporate the subgraph patterns in G according to the set of partitioning. Subgraphs tended to be more frequent in the dataset than their super graphs. Since one cannot be sure about which partitioning is the best, P(G|C) was expressed in this study as the sum of best partitionings for graph G,(7)P(G|C)=∑π∏g∈Hπ∏a∈gP(a|C)Hence, having a prior distribution P(C) and a conditional probability P(G|C) that was calculated using partitionings and maximal paths conditional probability distribution, the classification problem was to find a class label C* that maximized Eq. (6):(8)C∗=argmaxCP(C)P(G|C)During classification process, the search for a set of best partitionings was performed for each test graph instance (in the same way it was performed during probability estimation). The classification process started with setting a hypothesized class label C0 for a test graph. Then, a search for the best partitioning set started with class label of test graph fixed to C0. Eq. (6) was used to evaluate P(C0|G). Then, another class label was used as a value for C0, and a new set of partitionings was searched for and Eq. (6) used to calculate P(C0|G). The class label that achieved the highest score was reported as classifier output.After benchmarking the graph structural pattern analysis method, the next module used the identified GO functionality patterns to predict subsystems in the GO-annotated interaction networks for a set of 14 species. This pattern matching module had two components, which are described in the following two subsections.For each species, a network of genetic and protein interactions was constructed by importing interactions from two sources: BioGRID [14] and STRING [21]. BioGRID data contains curated interactions from high throughput datasets and individual focused studies. In this study, only interactions within the same species were included. For some species analyzed in this study, the number of interactions was limited in BioGRID. To increase coverage of a species’ interaction network, more interactions were imported from STRING database (version 9.0). STRING provides information about experimental and predicted interactions. Seven sources of information about a given interaction are used in STRING, including: genome context methods, gene co-expression, text mining, as well as associations known from other database resources such as BioCyc [22] and PDB [23]. An interaction in STRING database has a combined score that is computed using evidence scores from each data source. In this study, for data imported from STRING database, only interactions with combined score greater than or equal to 70% confidence were used in the construction of networks. Since fingerprints consisted of only GO terms (i.e., not gene/protein names) interaction networks of each species were GO-annotated in order to be suitable to match disease fingerprints learned from GO-annotated disease pathways. Nodes of interaction networks were annotated with molecular function annotations from the AmiGO Gene Ontology database [24].In this study, an interaction network of a given species could have had as many as 12,000 nodes (genes/proteins) and as many as 50,000 edges (interactions). Network indices were created for these large networks to enable efficient sub-network searches.An index of an interaction network was built by generating a hash table with keys composed of ordered pairs of GO terms with first component being the node identifier of the node being indexed and second component denoting one of its neighbors. Values in the index table are identifiers of nodes with label equal to the first component of the ordered pair key. A value of a given key can be a single node identifier or a set of node identifiers. The index table was constructed by traversing every node in a given interaction network and examining its neighboring nodes.Fig. 4shows an example of GO-annotated interaction network and its index. In this example, suppose node n1 is to be indexed. Its neighbor nodes are {n2,n3,n4}. For the pair (n1,n2) the corresponding annotation pair is (GO3,GO1). A key of (GO3,GO1) is inserted into the index with value {n1}. Similarly, the key (GO3,GO2) is inserted with value {n1}. In case a key already exists, values are appended to ones that already exist. For instance, when indexing node n8 that is annotated with GO3, a key (GO3,GO2) already exists in the table with value being {n1}. Therefore, the value set is updated by adding element n8 and the final key:value pair will be (GO3,GO2):{n1,n8}.Disease fingerprints were identified using the method described in Section 2.2 were matched to the GO annotated interaction networks (with interactions imported from BioGRID and STRING databases) using a similarity search algorithm. This algorithm used a network index to find subnetworks that matched an input disease fingerprint. Given a query subgraph and using the network index, the algorithm went through three steps.In the first step, an initial set of matched node identifiers (the “candidate matching set”) was retrieved for every node in the query subgraph. This was performed by using GO terms of nodes of each edge in the fingerprint subgraph to search the index. The following is an example to illustrate the pattern matching process (see Fig. 5). Let v be a node in a query subgraph. For simplicity of demonstration, presume that each node has only one GO annotation. For every node u with an edge leading to v, an ordered pair of GO terms utand vtwas used as a key to lookup the network index. As a result, sets of node identifiers values of the corresponding key were retrieved from the table. For example, as shown in Fig. 5c, three sets of network node identifiers that matched query node v3 (one set per neighbor). The first set resulted from the edge (v3,v1), with a key consisting of (GO3,GO1). By looking the value up in the index table, the retrieved value was the set {n1}. The second candidate set for query node v3 resulted from the edge (v3,v2), with a key consisting of (GO3,GO2). By looking this value up in the index table, the retrieved value of this key was the set {n1,n8}. Similarly, the third candidate set for query node v3 resulted from the edge (v3,v4), with a key consisting of (GO3,GO4), with {n1} as third candidate set for query node v3 (see Fig. 5c). The process was repeated for every node in the query subgraph.The second step was to examine candidate node identifier sets for each query node and to check topological constraints. A member in the candidate node set conforms to topological constraints if it has link to a member of other candidate node sets of neighbor nodes. Topological constraints were checked first by performing set intersection operation of all candidates sets of a given query node. For example, the final candidate set for query node v3 was {n1,n8}∩{n1}∩{n1}={n1}. If the set intersection operation returned empty set, then it would mean failure to match the query subgraph to any subnetwork in the interaction network, and hence the search was stopped. Node identifiers in the candidate set were then removed if they did not have any links to any node in candidate sets of other neighboring query nodes. For example, the node identifier n5 in the candidate sets of v2 (see Fig. 5d–e) was removed from that candidate set, because it was not connected to any item from candidate set of v3 (n5 was supposed to be connected to n1 according to the query subgraph structure, but in the interaction network there was no link between node n1 and node n5). This step was repeated until all network node identifiers in query subgraph candidate sets satisfied topological constraints.The third and final step was the generation of a set of sub-networks from candidate nodes sets of every query subgraph node. If there was only one node identifier for each candidate sets of query nodes, then it meant there was only one subnetwork that matched the input query subgraph. Otherwise, multiple subnetworks were returned as a matched set of the query subgraph. Details of the subgraph matching method are provided in Algorithm 1 of Appendix B. The output of this algorithm was a set of subnetworks that served as candidate subsystems that partially or completely matched known pathways available in literature.For each disease category, fingerprints were used to find subsystems in the interaction network for each of the 14 species. To evaluate these candidate subsystems, a set of reference pathways was used to determine the degree of matching between predicted subsystems and known pathways. A candidate subsystem was considered as being predicted correctly if 70% or more of its genes/proteins were found in a known pathway in a reference dataset. The Wikipathways database [25] was used as reference dataset. As recommended on the WikiPathways download page, only the analysis collection pathways were used for evaluation. Schizosaccharomyces pombe, Escherichia coli and Sus Scrofa had no WikiPathways analysis collection data. Also, since the pathways of Saccharomyces c. S288c and Arabidopsis thaliana in WikiPathways data were mainly metabolic pathways, they were not used to evaluate the predicted pathways. Predicted pathways of Escherichia coli and Saccharomyces c. S288c were matched to reference pathways from BioCyc. Reference pathways for Arabidopsis thaliana were downloaded from AraPath database [26]. A further detailed evaluation for each species was reported for each disease of cancer and infectious disease classes in the design set.

@&#CONCLUSIONS@&#
