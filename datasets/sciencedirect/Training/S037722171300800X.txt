@&#MAIN-TITLE@&#
A unified solution framework for multi-attribute vehicle routing problems

@&#HIGHLIGHTS@&#
A component-based heuristic framework for multi-attribute vehicle routing problems is introduced.Problem-specific attributes are confined into adaptive resolution components in relation to their structure.A general-purpose local search based on partial route concatenations is introduced.A Unified Hybrid Genetic Search (UHGS) with a unified Split algorithm is proposed.UHGS matches or outperforms all current best problem-tailored algorithms on 29 notable VRP variants and 42 benchmark sets.

@&#KEYPHRASES@&#
Vehicle routing,Multiple attributes,General-purpose solver,

@&#ABSTRACT@&#
Vehicle routing attributes are extra characteristics and decisions that complement the academic problem formulations and aim to properly account for real-life application needs. Hundreds of methods have been introduced in recent years for specific attributes, but the development of a single, general-purpose algorithm, which is both efficient and applicable to a wide family of variants remains a considerable challenge. Yet, such a development is critical for understanding the proper impact of attributes on resolution approaches, and to answer the needs of actual applications. This paper contributes towards addressing these challenges with a component-based design for heuristics, targeting multi-attribute vehicle routing problems, and an efficient general-purpose solver. The proposed Unified Hybrid Genetic Search metaheuristic relies on problem-independent unified local search, genetic operators, and advanced diversity management methods. Problem specifics are confined to a limited part of the method and are addressed by means of assignment, sequencing, and route-evaluation components, which are automatically selected and adapted and provide the fundamental operators to manage attribute specificities. Extensive computational experiments on 29 prominent vehicle routing variants, 42 benchmark instance sets and overall 1099 instances, demonstrate the remarkable performance of the method which matches or outperforms the current state-of-the-art problem-tailored algorithms. Thus, generality does not necessarily go against efficiency for these problem classes.

@&#INTRODUCTION@&#
General-purpose solvers for combinatorial optimization are algorithms that can be used to address large classes of problem settings without requiring extensive adaptations, user involvement or expertise. The development of such solvers is critical to the understanding of the impact of problem characteristics on the performance of solution methods, as well as to the capability to efficiently address new problem settings and applications displaying particular sets of characteristic combinations. One thus aims for high-performance general-purpose solvers, achieving a subtle balance between generality of scope and specificity in exploiting particular problem characteristics, to identify high-quality solutions for the broadest set of problem settings possible within limited computation time. Such developments are very challenging. As illustrated by Wolpert (1997), generality may be paid for in terms of performance, while dedicated algorithms cannot address problem variants without extensive adaptation.We focus on vehicle routing problems (VRPs), one of the major classes of combinatorial optimization problems with an extremely broad range of applications. Real-life settings lead to a very large number of variants born of the requirement to manage a wide variety of characteristics and decisions, called attributes in Vidal, Crainic, Gendreau, and Prins (2013b), to account for the particular customer, vehicle, driver, and network settings and to combine routing considerations with other tactical or strategic choices. The number of VRP attributes that need to be jointly considered is continuously increasing, yielding a considerable variety of Multi-Attribute Vehicle Routing Problems (MAVRPs).The current state-of-the-art and knowledge does not offer the means to use exact solution methods for combinatorial optimization as general-purpose solvers for MAVRPs. Consequently, literally hundreds of papers were published recently, proposing supposedly different heuristic methods for VRP variants with diverse combinations of sets of attributes. As for the most general vehicle routing metaheuristics proposed in the literature (Cordeau, Gendreau, & Laporte, 1997; Cordeau, Laporte, & Mercier, 2001; Ropke & Pisinger, 2006a; Ropke & Pisinger, 2006b; Subramanian, Uchoa, & Ochi, 2013), they usually address a single difficult compound problem formulation including several variants as special cases, but still require extensive adaptation when the main problem setting is modified. The field thus lacks an efficient general-purpose MAVRP solver, and building one represents a considerable research challenge. Our objective is to address this challenge and propose a component-based heuristic framework and a general-purpose solver providing high performance in terms of solution quality and computational efficiency for a very broad and diverse set of multi-attribute vehicle routing problems. These new contributions may point to promising developments in related fields such as scheduling.We thus introduce a component-based heuristic solution framework designed in accordance with problem structure and attribute specifics, as well as a Unified Hybrid Genetic Search (UHGS). Any unified method must ultimately account for the specific attributes, objectives, and constraints of the particular problem setting at hand. Yet, to achieve a high level of generality, these problem attributes are confined to restricted adaptive components. Thus, UHGS relies on unified problem-independent procedures: local search, crossover, Split algorithm and diversity management, while problem-specific strategies are restricted to a few modular components which take charge of assignment changes (e.g., of customers to depots or days), enumerations of sequencing alternatives, and route evaluations. These components are self-adapted in relation to the attributes of the problem at hand. Furthermore, to achieve high efficiency during local-improvement procedures, we propose a unified route-evaluation methodology based on information preprocessing on sub-sequences, and move evaluations as a concatenation of known sub-sequences. This framework unifies and extends efficient pre-processing techniques which were previously used for different problems.Extensive computational experiments demonstrate the remarkable performance of the resulting metaheuristic on the classical VRP as well as on MAVRP with multiple periods, multiple depots, vehicle-site dependencies, soft, multiple, and general time windows, backhauls, cumulative or load-dependent costs, simultaneous or mixed pickup and delivery, fleet mix, time dependency, service site choice, driving and working hours regulations, and many of their combinations. With a single implementation, parameter setting and termination criterion, UHGS matches or outperforms all current problem-tailored methods, from more than 180 articles, on 29 vehicle routing variants, 42 benchmark sets and a total of 1099 problem instances. Hence, it appears that generality does not necessarily impede efficiency for the considered problem classes.The contributions of this work are the following: (1) A component-based heuristic design is proposed for multi-attribute vehicle routing problems, which efficiently isolates problem-specific adaptations from the generic framework; (2) A unified framework for efficient route evaluations and local search, based on efficient move-evaluation techniques from Kindervater and Savelsbergh (1997), Savelsbergh (1985), Savelsbergh (1992), which builds and exploits information on sub-sequences through concatenation operations to efficiently explore neighborhoods; (3) Unified versions of efficient genetic operators, solution representation, and Split algorithm; (4) A UHGS which addresses a large set of variants with a single implementation and set of parameters, and yields solutions of exceptional quality on prominent VRP variants and benchmark instance sets.This paper is structured as follows. Section 2 states the problem, reviews the main classes of general-purpose MAVRP solvers, and introduces the proposed component-based heuristic design. Section 3 details the unified local search and route-evaluation operators. Section 4 describes the UHGS. Computational experiments on a wide range of problems are reported in Section 5. Section 6 concludes.Vehicle routing problems have been studied for more than 50years, serving as support for a vast literature, including numerous surveys (see Andersson, Hoff, Christiansen, Hasle, & Lokketangen, 2010; Gendreau, Potvin, Bräysy, Hasle, & Lokketangen, 2008; Vidal et al., 2013b, among others), books (Golden et al., 2008; Toth & Vigo, 2002), and overall more than a thousand dedicated journal articles (Eksioglu, Vural, & Reisman, 2009). The research effort on the topic is still growing today, because of its major economic impact, the large difficulty of many settings, and the considerable variety of attributes combinations encountered in practice.The classical Capacitated Vehicle Routing Problem (CVRP) can be stated as follows. LetG=(V,E)be a complete undirected graph with∣V∣=n+1vertices, vertexv0∈Vrepresenting a depot, where a fleet of m identical vehicles with capacity Q is based, the other verticesvi∈V⧹{v0}for i∈{1, …, n} representing customers characterized by a demand for qiunits of product. Edges(i,j)∈Eillustrate the possibility to travel from a customer vito a customer vjfor a cost dij(assimilated to the distance). The CVRP requires designing up to m cycles (vehicle routes) starting and ending at a depot v0 in order to service each customer once.Many VRP variants with attributes have emerged due to the requirements of practical applications. These particular versions aim at better accounting for customer requirements (e.g., time-dependent service costs, time windows, multiple planning periods), network and vehicle characteristics (multiple depots, congestion, heterogeneous fleet, vehicle-site dependencies), driver needs (working hour regulations, lunch breaks), or at better integrating the decisions in a tactical or strategic planning (inventory or location routing). The large variety of actual settings, characteristics and VRP attributes is addressed by a vast literature. For the sake of conciseness, a detailed literature review on all considered VRP variants is out of scope. Comprehensive surveys can be found in Gendreau et al. (2008), Golden et al. (2008), Andersson et al. (2010), and Vidal et al. (2013b).As in Vidal et al. (2013b), three main categories of attributes are discerned in this paper. ASSIGN attributes are problem particularities requiring decisions on the assignment of customers to some globally constrained ASSIGN Attribute Resources (AARs), for example, depots, days or vehicle types. Notice that “Profits” is defined as an ASSIGN attribute. Indeed, VRP with profits lead to an assignment of customers to two mutually exclusive groups, customers selected for service and the ones which are not. Routing costs are in this case dependent upon the AAR. SEQ attributes are problem characteristics that explicitly impact the structure and geometry of the routes such as, backhaul trips, multiple trips, or multi-echelon attributes. Finally, EVAL attributes affect the way routes are evaluated. This latter class of attributes encompasses advanced route costs or feasibility evaluations, as well as the eventual optimization of additional decisions on routes (e.g., service dates, waiting times, packing of objects in the vehicle) when the sequence of visits if fixed. Each family of attributes thus impacts the resolution methodologies in a very different way.Three main approaches for achieving generality may be identified when analyzing the literature on general-purpose MAVRP solution methods. Rich solvers and modeling and solution frameworks, examined in this subsection, and component-based frameworks, which are the topic of the next one.Rich solvers are designed to address a multi-attribute VRP formulation generalizing several variants associated to subsets of its attributes. Several well-known VRP heuristics are included in this category and are displayed in Table 1: the Unified Tabu Search (UTS; Cordeau et al., 1997; Cordeau et al., 2001; Cordeau & Laporte, 2001; Cordeau & Laporte, 2003; Cordeau, Laporte, & Mercier, 2004), the Adaptive Large Neighborhood Search algorithm (ALNS; Pisinger & Ropke, 2007; Ropke & Pisinger, 2006a; Ropke & Pisinger, 2006b), the Iterated Local Searches of Ibaraki et al. (2005), Ibaraki et al. (2008) and Hashimoto, Ibaraki, Imahori, and Yagiura (2006, 2008) (ILS), and Subramanian et al. (2013) (ILS-SP), the latter being hybridized with integer programming components, and the exact integer programming approach of Baldacci and Mingozzi (2009) and Baldacci, Bartolini, Mingozzi, and Valletta (2011a, 2011b) (IPSP), based on a set partitioning formulation. Keeping in line with the focus of the paper on general-purpose algorithms, the table indicates for each method the largest subset of MAVRPs that was addressed in a single implementation, generally the one from the original paper. Most successful methodologies were extended later onto other variants, but separate developments were generally required. The subset of variants addressed by the general-purpose UHGS methodology we propose is also displayed for comparison purposes.Hybrid Genetic Algorithms (HGA), with giant-tour solution representations and local search solution enhancements (Prins, 2004), have proven their ability in addressing many MAVRPs (Labadi, Prins, & Reghioui, 2008; Ngueveu, Prins, & Wolfler Calvo, 2010; Prins, 2009; Vidal, Crainic, Gendreau, Lahrichi, & Rei, 2012a), as well as a large class of mixed node and arc routing problem variants (Prins & Bouchenoua, 2005). We did not include them in this classification, however, because no unifying implementation of this class of methods has been proposed up to date, particular hard-coded implementations of solution representation, crossover, Split, and local search procedures being proposed for different MAVRPs. Generalizing these procedures to a wider range of variants is an important challenge that we address in this paper.Each rich solver included in Table 1 relies on a “rich” multi-attribute VRP formulation, a periodic VRP with time windows (UTS), a pick-up and delivery problem with time windows (ALNS), a VRP with general time windows, time-dependent, and flexible travel-times (ILS), or a heterogeneous pickup-and-delivery problem with time windows (ILS-SP). Yet, relying on such formulations to achieve generality presents two main limitations. First, problems become more intricate and difficult to address as the number of attributes one must consider simultaneously grows. Second, all the features of the general model are still present when particular variants, with less attributes, are considered, resulting in loss of efficiency through wasted computations induced by deactivated attributes and, sometimes, higher complexity for some algorithm components. The methodology we propose avoids these pitfalls.Modeling and solution frameworks seek to capture the general properties of the attributes to transform them into machine-readable components. Thus, the framework of Desaulniers et al. (1998) formulates a number of classes of attributes as resources (e.g., load, distance, time), which are extended to successive customer visits through resource extension functions (REFs) subject to interval constraints. This framework was applied to various crew scheduling and routing problem variants, the resulting formulations being then solved efficiently by column generation (Desaulniers et al., 2005).It is well known that the performance of many heuristics for MAVRPs is directly linked to the capability of efficiently evaluating new routes produced during the search. Hence, a large body of literature focuses on reducing the complexity of route evaluation in presence of difficult EVAL attributes (Campbell & Savelsbergh, 2004; Garcia, 1996; Kindervater & Savelsbergh, 1997; Savelsbergh, 1985; Savelsbergh, 1992). These approaches share the common characteristic that they develop meaningful information on sub-sequences of successive visits (partial routes) to speed up evaluations of new routes. Using this methodology, time windows, simultaneous pickups and deliveries, and load-dependent costs attributes can be efficiently managed in the course of local searches, leading to notable gains in computational complexity.Merging these two avenues of research, Irnich (2008b) considered forward and backward extension of resources, as well as the management of generalized resources extension functions on sub-sequences of visits to perform efficient route evaluations. This extended REF methodology was combined with sequential search concepts, leading to a unified solution approach (Irnich, 2008a). Yet, strong properties on REFs inversion and generalization to segments are required for the framework to apply.Finally, Puranen (2011) introduced a domain model able to express VRP variants and transform them into a routing metamodel workable by optimization methods. The routing metamodel is based on the concepts of actors, activities, resources, and capabilities. It exploits both the concept of resource extension functions, and a generalization called mapping-ordering constraints. The methodology covers the complete resolution process flow, from the domain model, to the routing metamodel and its resolution. However, few computational experiments were presented to demonstrate the capabilities of the approach.As underlined in this review, a few unifying methodologies have been proposed for multi-attribute VRPs. However, these approaches are limited in the classes, properties and number of attributes they manage. Modeling and solution frameworks (Desaulniers et al., 1998; Irnich, 2008a; Irnich, 2008b; Puranen, 2011) do provide remarkable formalisms for many attributes, but in counterpart require strong properties to be efficiently applied, such as the existence of REFs which are invertible and generalizable to segments.In this paper, we proposed a component-based heuristic framework designed in accordance with the problem structure. Any general-purpose solver must ultimately account for the specific attributes, objectives, and constraints of the particular problem setting at hand. In our approach, to achieve a high level of generality, the problem attributes are confined to small polymorphic (Meyer, 1997) method components capable of adapting to the problem specifics. We create a library of basic attribute-dependent operators, out of which the algorithm can automatically select the necessary operators in accordance to the problem. Components are designed to offer the possibility to integrate attribute-specific strategies, opening the way to efficient route-evaluation procedures managing meaningful data on sequences.Some related designs have been used in the combinatorial optimization literature to build general-purpose heuristic solvers or software libraries (e.g., Cahon, Melab, & Talbi, 2004; Fink & Voss, 2003), hyper-heuristics (Burke et al., 2010), and cooperative methods (Crainic & Toulouse, 2010). Component-based heuristic approaches are rare in the VRP literature (Du & Wu, 2001; Groër, Golden, & Wasil, 2010). While polymorphism has been efficiently used to generate adaptable resolution strategies, i.e., configurable metaheuristics or local-search strategies, it has not yet provided the means to address the challenge of the broad variability in problem settings. Moreover, although hyper-heuristics and cooperative methods achieve more robust solving by making several basic methods adapt or cooperate, they are still dependent upon the availability of these basic problem-tailored methods.We restrict this paper to the VRP class in order to keep the length of the paper within acceptable limits. Similarly to several other combinatorial optimization problems, MAVRPs present a particular structure combining decisions on assignment (and partitioning), sequencing, and fixed-sequence optimization and evaluation. Consequently, we identify three categories of attributes, defined relatively to their impact on the heuristic resolution: ASSIGN attributes requiring the assignment of routes and customers to global resources (depots, days, vehicle types), SEQ attributes determining the structure of the network and the sequences of visits, and EVAL attributes modifying the solution evaluations. We introduce three adaptive components, which account for these attributes, and which fulfill the following tasks:•Assignment. Select and check the feasibility of customer and route re-assignments to different ASSIGN attribute resources (day, depot, vehicle type, etc.);Sequence choice. Generate neighbor solutions with different sequence alternatives with regards to SEQ attributes;Route evaluations. Evaluate a fixed route and optimize side decisions related to EVAL attributes (timing or loading sub-problems).We show in the next sections how these components can serve as building blocks for a wide range of general-purpose neighborhood- or population-based metaheuristics for MAVRPs. Section 3 first describes how route-evaluation components can lead to an efficient unified local search, and then Section 4 follows with a description of the proposed Unified Hybrid Genetic Search for MAVRPs.Designing a general-purpose high-performance local search for MAVRPs is an important research challenge in itself. We therefore introduce first the methodology we propose to address this challenge, before proceeding to the complete UHGS framework. The emphasis is on EVAL attributes, which impact the heuristic resolution during route evaluations, such as loading constraints or timing aspects. In the proposed approach, these problem specifics are confined to route-evaluation components, which are adaptive problem-dependent elements of the methodology to perform route, move-evaluation, and feasibility statements. Since high performance is sought, these components are designed to manage pre-processed information on sub-sequences during move evaluations. We first define these components, proceeding then to the corresponding route-evaluation operators and, finally, to the unified local search method.The route-evaluation components exploit the fact that any local-search move issued from a bounded number of edge exchanges and node relocations can be assimilated to a recombination of a bounded number of sequence of visits from an incumbent solution (Kindervater & Savelsbergh, 1997; Vidal, Crainic, Gendreau, & Prins, 2011). As illustrated in Fig. 1, an inter-route Relocate move of a sequence of visits [σr(u), …, σr(v)] next to a visit σr′(w) yields two recombined routes ρ=[σr(1), …, σr(u−1)]⊕[σr(v+1), …, σr(∣r∣)] and ρ′=[σr′(1), …, σr′(w)]⊕[σr(u), …, σr(v)]⊕[σr′(w+1), …, σr′(∣r′∣)],⊕ denoting the concatenation operator.We thus introduce in Table 2five operations of route-evaluation components. The first three operations, called INIT(σ), FORW(σ), and BACK(σ) provide the means to initialize and build the re-optimization information on sequences by forward and backward concatenation of single visits, respectively. Within a local search, they can be used during a pre-processing phase to build the information on sub-sequences. The evaluation of new sequences made of a concatenation of several sub-sequences is then performed by using an evaluator, which takes advantage from the previously developed information on sub-sequences. Two evaluators, EVAL2(σ1, σ2) or EVALN(σ1, …, σn), are presented. The former considers the concatenation of two segments, while the latter allows for any number of segments. The reasons for designing two different operations relate to the fact that all attributes do not allow for an efficient EVALN operation and thus, in some well-defined settings, the algorithm must rely on EVAL2 and construction operations to perform route evaluations (Section 3.3).The route-evaluation component provides the basic structure to obtain state-of-the-art local search procedures for all EVAL attributes. It relies on a library of route-evaluation operators, specific to each attribute, which are selected automatically by the method relatively to the problem specification. Route-evaluation operators for different attributes are presented in Section 3.2. A unified local search based on these operators is presented in Section 3.3.Route-evaluation operators are specific to each attribute, but always respect the five-operations scheme described in Section 3.1. Three cases of attributes arise:•For the first case, some type of information, including cost characterization, is efficiently computable by induction on the concatenation operation, such that a single equation can serve as the basis for all operations. Such a situation corresponds in the framework of Irnich (2008b) to the case of REFs that are invertible and generalizable to segments. Among the MAVRPs that can be managed in this way, we find the VRP with capacity, distance constraints, backhauls, cumulative costs, hard (eventually multiple) time windows, simultaneous deliveries and pickups, or lunch breaks.In the second case, which includes soft time windows and time-dependent travel times, among others, the structure of the re-optimization information is more complex and FORW(σ) or BACK(σ) operations may become more computationally expensive than quick concatenation evaluations. In addition, EVALN may not be available in all cases.Finally, a more advanced role may be given to the route-evaluation operator for some MAVRPs. These operators can indeed assume the optimization of additional decisions on visit locations within groups of customers (case of the generalized VRP), explicitly determine the break times placement for drivers (VRP with truck driver schedule regulations), or position the objects in the vehicle (VRP with loading constraints). Bi-directional shortest path procedures, tree search methods, or integer programming components are then potentially employed in the operators.To illustrate the different cases, we now describe route-evaluation operators for several important attributes. Some of these operators are derived from past works and hereby unified in our framework. In addition, new operators are introduced for some other problems, e.g., VRP with cumulative costs, load-dependent costs, simultaneous deliveries and pickups, lunch breaks, service site choices, and hours of service regulations.The classical CVRP is perhaps the simplest setting for which information preprocessing is frequently used. Indeed, it is natural to manage for each sub-sequence σ its partial load Q(σ) and partial distance D(σ) to speed-up the load constraint checks and distance computations. Eqs. (1) and (2) enable to compute these quantities by induction on the concatenation operation, and provide the means to perform both FORW, BACK and EVALN in O(1) time. It is also worth noting that other globally constrained resources accumulated on arcs or vertices on the routes can be managed in the same way (see Irnich, 2008b).(1)Q(σ1⊕σ2)=Q(σ1)+Q(σ2)(2)D(σ1⊕σ2)=D(σ1)+dσ1(∣σ1∣)σ2(1)+D(σ2)The Cumulative VRP (CCVRP) is based on a different objective seeking the minimization of the sum of arrival times to customers. Evaluating the cost of a route subject to some modifications requires more advanced methods than for the classical CVRP, since arrival times to many customers in the route are impacted. Still, evaluations remain manageable in amortized O(1) operations for several families of classical local search neighborhoods (Ngueveu et al., 2010). Vidal et al. (2011) and Silva, Subramanian, Vidal, and Ochi (2012) show that three types of information on sub-sequences are sufficient to efficiently evaluate route costs: the duration D(σ) to perform the sequence of visits σ, the cumulative cost C(σ) when starting at time 0, thus representing the cost of the sequence, and the delay cost W(σ) for each unit of time delay in the starting date. For a sequence σ0 containing a single vertex, the information can be initialized by setting D(σ0)=0 as no travel time is performed, C(σ0)=0, and W(σ0)=1 when the vertex is a customer, otherwise W(σ0)=0. Eqs. (3)–(5) then enable to compute this information by induction on the concatenation operation, thus allowing to efficiently implement all route-evaluation operations.(3)D(σ1⊕σ2)=D(σ1)+dσ1(∣σ1∣)σ2(1)+D(σ2)(4)C(σ1⊕σ2)=C(σ1)+W(σ2)(D(σ1)+dσ1(∣σ1∣)σ2(1))+C(σ2)(5)W(σ1⊕σ2)=W(σ1)+W(σ2)The fuel consumption fijof a vehicle is estimated in Xiao, Zhao, Kaku, and Xu (2012) to grow linearly with the load qijon a segment, and thus fij=(f1qij+f2)dij, where f1 represents the fuel cost per mile and unit of load, and f2 stands for the base cost per mile. We propose an efficient evaluation of fuel consumption on a route which involves the computation of cumulated demand Q(σ), distance D(σ), and the load-factor F(σ) (load-times-distance) on sequences. The fuel consumption C(σ) can be derived from this information since C(σ)=f1F(σ)+f2D(σ). For a sequence σ0 containing a single vertex vi, Q(σ0)=qi, D(σ0)=0, and F(σ0)=0. Furthermore, Eqs. (6)–(8) enable to compute these values by induction on larger sub-sequences, leading to route evaluations in O(1) time.(6)D(σ1⊕σ2)=D(σ1)+dσ1(∣σ1∣)σ2(1)+D(σ2)(7)Q(σ1⊕σ2)=Q(σ1)+Q(σ2)(8)F(σ1⊕σ2)=F(σ1)+Q(σ2)(D(σ1)+dσ1(∣σ1∣)σ2(1))+F(σ2)In the VRP with Backhauls (VRPB), to each customer is either associated a delivery quantity qi≠0 of a product, or a pickup quantity pi≠0 of a different product. The capacity of the vehicle is limited to Q product units. Furthermore, a structural route constraint is imposed, pick-up customers being necessarily serviced at the end of the route, after at least one delivery customer. This structural constraint can be modeled directly in the distance matrix by setting cij=+∞ if vertex vicorresponds to a pickup customer and vjis a delivery customer, and by setting the distance from the depot c0j=+∞ for any pickup customer vj. Evaluating the routes then requires checking the load constraints and summing up the distances. Three types of information are developed on sequences σ to that extent: the partial distance D(σ), the total delivery quantityQd(σ), and the total pickup quantityQp(σ). Since the two types of products are never jointly in the vehicle because of structural route constraints, checking load feasibility on a sequence involves simply to check whetherQd(σ)⩽QandQp(σ)⩽Q. Hence, bothQd(σ)andQp(σ)can be independently evaluated as previously described in Eq. (1) to perform route evaluations.The VRP with simultaneous deliveries and pickups (VRPSDP) also involves two different products to be respectively delivered and picked-up. In contrast with the VRPB, no structural constraint is imposed on the routes, and a vertex can require both a delivery and a pick-up. As the vehicle can now contain both types of products simultaneously, load feasibility must be ensured at each vertex of the trip. To address this case, we introduce a re-optimization method based on three types of information on sub-sequences:Qd(σ)andQp(σ), the sum of deliveries and pick-ups on the sequence σ, respectively, andQmax(σ), the maximum load in the vehicle while processing the sequence σ when starting with an initial load ofQd(σ). These values can be computed by induction on the concatenation operation using Eqs. (9)–(11), leading to efficient constant time route-evaluation operations.(9)Qp(σ1⊕σ2)=Qp(σ1)+Qp(σ2)(10)Qd(σ1⊕σ2)=Qd(σ1)+Qd(σ2)(11)Qmax(σ1⊕σ2)=max{Qmax(σ1)+Qd(σ2),Qmax(σ2)+Qp(σ1)}Another variant of VRPSDP has been addressed in Kindervater and Savelsbergh (1997), where a single commodity was considered and products picked-up at a location could be used to service further customers in the route, leading to different equations.The VRP with hard time windows (VRPTW) imposes interval constraints [ei, li] on arrival dates to each customer vi, as well as service durations si(by default s0=0). Waiting time is allowed on the route. The VRPTW is the first variant on which information on sub-sequences was managed and exploited (Garcia, 1996; Kindervater & Savelsbergh, 1997; Savelsbergh, 1985; Savelsbergh, 1992). These authors proposed to characterize any sub-sequence with four types of information: a feasibility statement F(σ), the sum of travel and service times T(σ), the earliest possible completion time for the sequence of visits E(σ), and the latest feasible starting date L(σ). For a sequence σ0=(vi) containing a single vertex, T(σ0)=si, E(σ0)=ei+si, L(σ0)=li, and F(σ0)=true. Eqs. (12)–(15) enable then to compute by induction the information for a concatenation of sequences.(12)T(σ1⊕σ2)=T(σ1)+dσ1(∣σ1∣)σ2(1)+T(σ2)(13)E(σ1⊕σ2)=max{E(σ1)+dσ1(∣σ1∣)σ2(1)+T(σ2),E(σ2)}(14)L(σ1⊕σ2)=min{L(σ1),L(σ2)-dσ1(∣σ1∣)σ2(1)-T(σ1)}(15)F(σ1⊕σ2)≡F(σ1)∧F(σ2)∧(E(σ1)+dσ1(∣σ1∣)σ2(1)⩽L(σ2))When the departure date of the vehicle is not fixed, starting dates have an influence on the total waiting time on the route. The minimum duration for the route can still be obtained from the previous information as DUR(σ)=max{E(σi)−L(σi), T(σi)}. Route evaluations are thus manageable in O(1) time.Lunch breaks appear in several real-life applications (Bostel, Dejax, Guez, & Tricoire, 2008; Sahoo, Kim, Kim, Kraas, & Popov, 2005), but have been the focus of only moderate attention in the literature. Let the VRPTW with lunch breaks (VRPTWLB) be defined as a VRPTW variant such that for any non-empty route a single break of durationslbmust be taken between[elb,llb]at one dedicated locationvlbchosen in a set of potential locationsVlb. Let also the variant with flexible breaks (VRPTWFB) represent the case where the location of the break is unconstrained. In the following, we introduce route-evaluation operators to account for lunch placement choices in the VRPTWFB.Any sub-sequence σ can be characterized by two sets of information: a data set T(σ), E(σ), L(σ), F(σ), characterizing the time windows as in Eqs. (12)–(15) when no break has been taken in the sub-sequence, and another data set T′(σ), E′(σ), L′(σ), F′(σ), characterizing the case where a break is taken somewhere between the first and the last visit of σ. By definition,T′(σ)=T(σ)+slbfor any σ. Initially, for a sequence σ0=(vi) containing a single vertex, T(σ0)=si, E(σ0)=ei+si, L(σ0)=liand F(σ0)=true. Furthermore, breaks are exclusively taken inside the sequence and thus, a sequence made of a single visit should not include a break, such that E′(σ0)=+∞, L′(σ0)=0 and F′(σ0)=false. Computing T(σ1⊕σ2), E(σ1⊕σ2), L(σ1⊕σ2), F(σ1⊕σ2) can be done as previously with Eqs. (12)–(15). Computing their counterparts with breaks by induction comes to select a best case out of three: the break is either taken during σ1 (Case 1), between σ1 and σ2 (Case 2), or during σ2 (Case 3). These computations are displayed in Eqs. (17)–(27).(16)E′(σ1⊕σ2)=min({Ecasei′s.t.Fcasei′=true}∪+∞)(17)L′(σ1⊕σ2)=max({Lcasei′s.t.Fcasei′=true}∪-∞)(18)F′(σ1⊕σ2)=Fcase1′∨Fcase2′∨Fcase3′(19)Ecase1′=max{E′(σ1)+dσ1(∣σ1∣)σ2(1)+T(σ2),E(σ2)}(20)Ecase2′=max{E(σ1)+dσ1(∣σ1∣)σ2(1)+slb+T(σ2),elb+slb+T(σ2),E(σ2)}(21)Ecase3′=max{E(σ1)+dσ1(∣σ1∣)σ2(1)+T′(σ2),E′(σ2)}(22)Lcase1′=min{L′(σ1),L(σ2)-dσ1(∣σ1∣)σ2(1)-T′(σ1)}(23)Lcase2′=min{L(σ1),llb-T(σ1),L(σ2)-dσ1(∣σ1∣)σ2(1)-slb-T(σ1)}(24)Lcase3′=min{L(σ1),L′(σ2)-dσ1(∣σ1∣)σ2(1)-T(σ1)}(25)Fcase1′=F′(σ1)∧F(σ2)∧(E′(σ1)+dσ1(∣σ1∣)σ2(1)⩽L(σ2))(26)Fcase2′=F(σ1)∧F(σ2)∧(E(σ1)⩽llb)∧(elb+slb⩽L(σ2))∧(E(σ1)+dσ1(∣σ1∣)σ2(1)+slb⩽L(σ2))(27)Fcase3′=F(σ1)∧F′(σ2)∧(E(σ1)+dσ1(∣σ1∣)σ2(1)⩽L′(σ2))It is worth mentioning that a similar methodology can be used to adjust dynamically, within the evaluation of the routes, the break location choices in the VRPTWLB case, as well as the choice and placement of depot visits in a multi-depot setting (Vidal, Crainic, Gendreau, & Prins, 2012b). Integrating these decisions in the evaluation operators enables to combine the placement or assignment features within local search moves, and considerably reduce the combinations of choices to be worked out in the remaining parts of the method.For all previously-mentioned attributes, constant-size characteristic data was available for the segments, as well as general concatenation equations (segment REFs in the terminology of Irnich (2008b)). However, several MAVRPs fall outside of this class. This is the case for the VRP with soft time windows (VRPSTW), which allows penalized late arrivals to customers, and, more generally, for the generalization of the VRPTW where the service cost ci(ti) of each customer viis a piecewise linear function of the service time. For this latter variant, the placement of departure times and waiting times, and thus the determination of a good schedule for a fixed route, makes for a non-trivial timing problem with separable time-dependent processing costs (Vidal et al., 2011) and no judicious O(1) size data structure is known to characterize the sub-sequences and their exact cost when concatenated together.In this case, the route-evaluation information can be developed as a set of piecewise functions (Hendel & Sourd, 2006; Ibaraki et al., 2005; Ibaraki et al., 2008). Each sub-sequence is characterized by a function F(σ)(t) representing the minimum cost to service the sequence σ while arriving at the last customer before time t, and B(σ)(t) stating the minimum cost of servicing σ after time t.For a sequence σ0=(vi) with a single vertex,Fσ0(t)=minx⩽tci(x)andBσ0(t)=minx⩾tci(x). The construction operator FORW relies on forward dynamic programming (Eq. 28) to build explicitly the information for the concatenation of a sequence σ with a vertex vi. In reverse, BACK is based on backward dynamic programming (Eq. 29). Eq. (30) provides the cost Z∗(σ1⊕σ2) of the concatenated sequence σ1⊕σ2 when F(σ1)(t) and B(σ2)(t) are available, thus leading to an efficient EVAL2 operation.(28)F(σ⊕vi)(t)=min0⩽x⩽tci(x)+F(σ)(x-sσ(∣σ∣)-dσ(∣σ∣),i)(29)B(vi⊕σ)(t)=minx⩾tci(x)+B(σ)(x+si+di,σ(1))(30)Z∗(σ1⊕σ2)=minx⩾0{F(σ1)(x)+B(σ2)(x+sσ1(∣σ1∣)+dσ1(∣σ1∣)σ2(1))}In our implementations, the data structures F(σ)(t) and B(σ)(t) are managed as linked lists of function pieces characterized by interval, origin value and slope. The data construction operations FORW(σ), BACK(σ) and EVAL2 work in O(Σiξ(ci)) time, ξ(ci) representing the number of pieces of a piecewise cost function ci. However the EVALN operation is not efficiently manageable. In the particular case where all functions ci(t) are convex, more advanced implementations based either on heaps (Hendel & Sourd, 2006) or on search trees (Ibaraki et al., 2008) achieve a complexity of O(logΣiξ(ci)) for both EVAL2 and EVALN.The literature contains various other EVAL attributes related to time, such as duration constraints, multiple time windows, time-dependent trip durations, flexible travel times, and minimum and maximum intervals of time between pairs of services. We refer to Vidal et al. (2011) for a comprehensive review and analysis of state-of-the-art algorithms for the underlying timing sub-problems for route evaluations, and their incremental resolution during local searches. These approaches were used to generate UHGS route-evaluation operators for the related problems with time characteristics.In the Generalized Vehicle Routing Problem (GVRP), each request viis associated to a set (group) of λialternative locationsLi={li1,…,li∣λi∣}. Exactly one location of each group must be serviced. As illustrated in Baldacci, Bartolini, and Laporte (2009), the GVRP is relevant for several practical applications and directly generalizes other variants of vehicle routing.The most recent metaheuristics for this problem (Moccia, Cordeau, & Laporte, 2012) conduct local search on the order of groups, and iteratively solve shortest path problems to optimally choose the best customer sequence within the groups. Building upon these concepts, we propose efficient route-evaluation operators for the GVRP, storing for each sequence of groups some auxiliary data to speed-up the shortest path computations during the search. In this case, the information to be stored for a sequence σ is the shortest path S(σ)[i, j] between the ith location of σ(1) and the jth location of σ(∣σ∣), where i∈{1, …, λσ(1)} and j∈{1, …, λσ(∣σ∣)}. For a sequence σ0=(vi) containing a single service, S(σ0)[x, x]=0 for any x∈{1, …, λi} and S(σ0)[x, y]=+∞ if x≠y. Eq. (31) enables then to develop this information on larger sub-sequences by induction on the concatenation operation. This approach is closely related to the Floyd-Warshall algorithm and to bi-directional dynamic programming concepts.(31)S(σ1⊕σ2)[i,j]=min1⩽x⩽λσ1(∣σ1∣),1⩽y⩽λσ2(1)S(σ1)[i,x]+dlixljy+S(σ2)[y,j]∀i∈{1,…,λσ1(1)},∀j∈{1,…,λσ2(∣σ2∣)}Eq. (31) provides the means to perform efficiently in O(λ2) operations all route-evaluation operations, λ standing for the maximum number of locations associated to a service. This complexity is notably better than the complexity of computing each shortest path from scratch, which would be O(nrλ2) operations for a route containing nrservices.Governments worldwide impose complex regulations on truck-driver schedules to limit the amount of work and driving within intervals of time and impose a minimum frequency and duration for break and rest periods. Because of their large impact on driving times, these regulations should be accounted for when optimizing the routes, leading to combined vehicle routing and truck-driver scheduling problems (VRTDSP). However, even checking the existence of a feasible placement of breaks for a fixed sequence of visits makes for a highly complex problem which is known to be solvable in a quadratic time for United States hours of service regulations (Goel & Kok, 2012), while no polynomial algorithm is known for many other cases, with European Union, Canadian, and Australian rules.Despite this high complexity, most efficient methods for the VRTDSP integrate break scheduling feasibility checks directly in the local search (Goel & Vidal, 2013; Prescott-Gagnon, Desaulniers, Drexl, & Rousseau, 2010), and thus during each route evaluation. In the proposed methodology, these break-scheduling procedures are used inside the route-evaluation operators. A set of schedule alternatives is maintained for each sub-sequence of consecutive visits. The schedule information is extended to larger sub-sequences by appending new driving and break activities at the end of the schedules, and selecting only a relevant subset by means of dominance relationships. Our current implementation is exclusively based on forward operators, and thus EVAL2(σ1, σ2) is performed by iteratively completing the schedule of σ1 with services of σ2.

@&#CONCLUSIONS@&#
