@&#MAIN-TITLE@&#
Relation-based granules to represent relational data and patterns

@&#HIGHLIGHTS@&#
Formula-based relations defined in a granular computing framework are proposed.The relations are used to construct more informative granules.The granules are used to represent relational data and patterns.Thanks to this approach, the generation of patterns can be speeded up.The approach makes it possible to discover richer knowledge from relational data.

@&#KEYPHRASES@&#
Granular computing,Data mining,Relational databases,

@&#ABSTRACT@&#
The complex structure of relational data makes the process of knowledge discovery from data a more challenging task compared with the single table data structure. The usefulness of granular computing based approaches to mining data stored in a single table is a driving force for adapting this method to relational data. This paper proposes relation-based granules that are defined in a granular computing based approach to mining relational data. The relations are used to represent relational data and patterns to be discovered. Thanks to this representation, the generation of patterns can be speeded up. The representation also makes it possible to discover richer knowledge from relational data.

@&#INTRODUCTION@&#
Granular computing provides a general framework for problem solving. It covers theories, methodologies, techniques, and tools that make use of granules [1]. They are, in general, understood as collections formed in the process of a semantically meaningful grouping of elements based on their indistinguishability, similarity, proximity or functionality [2].The main idea of granular computing is to make it possible to view the same problem at many levels of granularity. Switching between different levels enables to choose the representation best matching to the problem. A more specific level granularity may reveal more detailed information, whereas a more abstract level granularity may improve a problem solution thanks to omitting irrelevant details.A granular computing approach has successfully found application in data mining (e.g. [3–7]). Some attempts have also been made to adapt the idea of granulation to mining data stored in a relational structure (e.g. [8–10]).Granulation tools can provide an alternative representation of the data to be mined. The primitives in this case are defined not by attribute values, but by granules of entities. Using granules, one can form collections of objects that share the same features (e.g. attribute values). A granular representation of the data facilitates the generation of patterns. Since elementary granules reveal basic features hidden in data, they are used as atoms in the construction of patterns.A granular computing based approach for data mining can be defined using a description language for information granules [11]. The data is primarily stored in an information system. However, it can also be represented in a granular form that is constructed using atomic formulas of the language. Each information granule is characterized by a pair of syntax and semantics. The former is defined by a formula constructed using attributes and values that describe objects, whereas the latter is understood as the set of objects that satisfy the formula. Information granules can be used to express patterns hidden in the data.The above approach can be upgraded to a relational case by expanding the description language by additional atomic formulas that identify pairs of joinable objects from different database tables [12,13]. The data in such an approach is represented by a compound information system that is a combination of particular information systems (each corresponding to one database table). These systems are combined according to the connections that occur among database tables.The compound information system can be directly mined or can be beforehand transformed into a granular form. The former facilitates the construction of patterns over many tables since the connection among tables are included in the system; however, elementary granules that show objects sharing the same features are not contained. The latter, in turn, includes elementary granules (each associated with one table or with two tables to show the connection between them) but the construction of relational patterns over the description language requires granules to be defined so that each of them is associated with all tables under consideration.To construct a relational data representation that is more coherent and useful for pattern discovery, relation-based granules are proposed in this study. They are formed using relations that join relational information granules with their features. They are used to represent both the data and patters. Relation-based granules are more informative than the granules based on which they are constructed. They include information about how a given granule can alternatively be joined with another from a different information system. The relations used to represent data are fundamental components of patterns. Since the relations express basic features of objects, the process of the generation of patterns can be speeded up. Furthermore, the structure of relation-based granules facilities the formation of more advanced conditions. They correspond to those that can be formed by using aggregation functions in relational databases. Therefore, patterns constructed based on such relations show richer knowledge than standard relational patterns.The organization of the remaining part of the paper is as follows. Section 2 introduces compound information systems and description languages defined for relational information granules. Sections 3 and 4 propose relation-based granules and show their application to the representation of relational data and patterns. In Section 5, the approach is evaluated by analyzing its time complexity. Section 6 compares the approach with other related approaches. Finally, Section 7 concludes the study.This section introduces the definitions of information systems and their description languages defined for relational data. The languages are expansions of the description language defined for data stored in the standard information system [11].Throughout this paper the following running example will be used.Example 1Given a database for the customers of a grocery store.customerIdNameAgeGenderIncomeClass1Adam Smith30Male1500Yes2Tina Jackson33Female2500Yes3Ann Thompson30Female1800No4Susan Clark30Female1800Yes5Eve Smith26Female2500Yes6John Clark29Male3000Yes7Michael Thompson30Male1800Nomarried_toIdCust_id1Cust_id2151264337productIdNamePrice1Bread2.002Butter3.503Milk2.504Tea5.005Coffee6.006Cigarettes6.50purchaseIdCust_idProd_idAmountDate111124/06213224/06321125/06423126/06546126/06642327/06755227/06864127/06The following defines an information system corresponding to a database table.Definition 2[14,12] (Information system for database table)An information system for a database table with the schema Ri(id, a1, …, am) is a pair ISi=(Ui, Ai), where Ui={x:x∈Ri} and Ai={id, a1, a2, …, am}.11The index (i.e. the relation identifier) is omitted if this does not lead to a confusion.To construct granules for an information system, logical formulas over some language are used. Namely, granules are defined by formulas which are used to express the properties of the objects from the granules. Therefore, an information system IS=(U, A) is given along with the following:•A set of formulas Φ over some language.A function SEM:Φ→P(U).The following general definitions of the syntax and semantics of a language are used. They will be applied in the further part of the paper for defining particular languages. Let L be a language such that the syntax and semantics of an atomic formula α∈L and its negation ¬α∈L are defined.Definition 3[12]The syntax and semantics of a language L are defined recursively by those of α∈L and ¬α∈L, and by1.α1, α2∈L⇒α1∧α2∈L and SEM(α1∧α2)=SEM(α1)∩SEM(α2);α1, α2∈L⇒α1∨α2∈L and SEM(α1∨α2)=SEM(α1)∪SEM(α2).In Fig. 1, language L is expanded for any atomic formulas by their conjunction and disjunction (black arrows labeled with ∧ and ∨). The semantics of new formulas is constructed based on that of the atomic formulas (white arrows).Let now L=L1∪⋯∪Lk(k>1) be a language such that for each Li(1≤i≤k) the syntax and semantics are defined.Definition 4[12]The syntax and semantics of a language L are defined recursively by those of each Liand by the following1.α∈Li⇒α∈L and SEM(α)=SEMi(α)22SEMiis the semantics of Li.;α∈L⇒¬α∈L and SEM(¬α)=SEMi(¬α), where α∈Li;α1, α2∈L⇒α1∧α2∈L and SEM(α1∧α2)=SEM(α1)∩SEM(α2);α1, α2∈L⇒α1∨α2∈L and SEM(α1∨α2)=SEM(α1)∪SEM(α2).In Fig. 2for any defined language Liits every formula α is added to language L (black unlabeled arrows). Language L is extended by the negation of every previously added formula (the arrow labeled with ¬). The negated formulas are de facto taken from Li. The semantics of added formulas are unchanged (white arrows). Defining the conjunction and disjunction of formulas, we proceed analogously to Fig. 1.A description language for an information system using the above definitions is defined as follows. Let A=Ades∪Akey, where IS=(U, A) is an information system and Ades(Akey) is the set of descriptive (key) attributes.Definition 5[12] (Syntax and semantics ofLIS=LISdes∪LISkey)The syntax and semantics of a language LISare defined recursively by the following, by Definition 3 (applied toLISdesandLISkey) and by Definition 4 (applied to LIS)1.a∈Ades,v∈Va⇒(a,v)∈LISdesandSEMISdes(a,v)={x∈U:a(x)=v};α∈LISdes⇒¬α∈LISdesandSEMISdes(¬α)=U\SEMISdes(α);a,a′∈Akey⇒(a,a′)∈LISkeyandSEMISkey(a,a′)={x∈U:a(x)=a′(x)};α∈LISkey⇒¬α∈LISkeyandSEMISkey(¬α)=U\SEMISkey(α).Using any granule description language L, one can define granules of the form (α, SEM(α)), where α∈L.Example 6For illustrative purposes the customer table is extended by an attribute balance that is defined as follows balance={(1, 3550), (2, 40100), (3, 140), (4, 1800), (5, 10860), (6, 3000), (7, 0)}.We construct the information system IS=(U, A), where U={1, …, 7}, A=Ades∪Akey, Ades={age, gender, income, balance, class}, and Akey={id, income, balance}. It is assumed that the customer table can be joined with itself using the attribute income or/and balance.For formulaα1=(income,1800)∈LISdeswe obtainSEMISdes(α1)={3,4,7}33Objects are represented by their identifiers.andSEMISdes(¬α1)={1,2,5,6}. For formulaα2=(income,balance)∈LISkeywe obtainSEMISkey(α2)={4,6}andSEMISkey(¬α2)={1,2,3,5,7}. The pairsg1=(α1,SEMISdes(α1))andg2=(α2,SEMISdes(α2))can be viewed as granules of customers whose income is 1800 (g1) and those whose balance is equivalent to their income (g2).To consider data from more than one database table, compound information systems are introduced. Firstly, a compound information system and description language corresponding to two database tables are constructed.Definition 7[12] (Compound information system IS(i,j))Let ISi=(Ui, Ai) and ISj=(Uj, Aj), where i≠j, be information systems. A compound information system IS(i,j) is defined by44The intersection of Aiand Ajis empty because all attributes names are distinct from one another, e.g. customer.id≠purchase.id.(1)IS(i,j)=×(ISi,ISj)=(Ui×Uj,Ai∪Aj)Definition 8[12] (Syntax and semantics ofLIS(i,j))The syntax and semantics of a languageLIS(i,j)are defined recursively by those ofLISiandLISj, by the following, by Definition 3 (applied toLISi∨jandLISi∧j), and by Definition 4 (applied toLIS(i,j))1.α∈LISi⇒α∈LISi∨jandSEMISi∨j(α)=SEMISi(α)×Uj;α∈LISj⇒α∈LISi∨jandSEMISi∨j(α)=Ui×SEMISj(α);α∈LISi∨j⇒¬α∈LISi∨jandSEMISi∨j(¬α)=(Ui×Uj)\SEMISi∨j(α);a∈(Ai)key,a′∈(Aj)key⇒(a,a′)∈LISi∧jandSEMISi∧j(a,a′)={(x,y)∈Ui×Uj:a(x)=a′(y)};α∈LISi∧j⇒¬α∈LISi∧jandSEMISi∧j(¬α)=(Ui×Uj)\SEMISi∧j(α).The above defined language makes it possible to construct formulas that show features of pairs of objects from different universes. Furthermore, the formulas can also show the relationship between the objects themselves (i.e. formulas with a descriptor of the form(a,a′)∈LISi∧j).Example 9Consider the information system IS(1,2)=×(IS1, IS2), where IS1 and IS2 are constructed based on relations R1=customer and R2=purchase, respectively.For formulaα1=(age,30)∈L(IS1)deswe obtainSEM(IS1)des(α1)={1,3,4,7}andSEMIS1∨2(α1)={1,3,4,7}×U2.For formulaα2=(R1.id,R2.cust_id)∈LIS1∧2we obtainSEMIS1∧2(α2)={(1,1),(1,2),(2,3),(2,4),(4,5),(4,6),(5,7),(6,8)}.For formulaα3=α1∧α2∈LIS(1,2)we obtainSEMIS(1,2)(α3)={(1,1),(1,2),(4,5),(4,6)}.Each granulegi=(αi,SEMIS(1,2)(αi))(i=1, 2, 3) shows pairs of some customers and purchases, e.g. g3 is a granule of 30 years old customers and their purchases.A compound information system and description language corresponding to m database tables are defined as follows.Definition 10[12] (Compound information system IS(1,2,…,m))Let ISi=(Ui, Ai) be information systems, where 1≤i≤m and m>1 is a fixed number. A compound information system IS(1,2,…,m) is defined by(2)IS(1,2,…,m)=×(IS1,IS2,…,ISm)=∏i=1mUi,⋃i=1mAi.The syntax and semantics of a languageLIS(m)are defined recursively by those ofLISiandLIS(i,j)(1≤i<j≤m), by the following, and by Definition 3 (applied toLIS(m)).1.α∈LISi⇒α∈LIS(m)andSEMIS(m)(α)=U1×⋯×Ui−1×SEMISi(α)×Ui+1×⋯×Um;α∈LIS(i,j)⇒α∈LIS(m)andSEMIS(m)(α)={(x1,…,xi,…,xj,…,xm)∈∏k=1mUk:(xi,xj)∈SEMIS(i,j)(α)};α∈LIS(m)⇒¬α∈LIS(m)andSEMIS(m)(¬α)=(U1×⋯×Um)\SEMIS(m)(α).Since knowledge discovery is focused on selected database tables only, usually one table (i.e. the target table), the semantics ofLIS(m)are expanded by the following.1.α∈LIS(m)⇒SEMIS(m)πi(α)=πAi(SEMIS(m)(α)), where 1≤i≤m55πA(•) is a projection on the attributes from A.;α∈LIS(m)⇒SEMIS(m)π(i1,i2,…,ik)(α)=πAi1,Ai2,…,Aik(SEMIS(m)(α)), where 1≤i1, i2, …, ik≤m and k<m.UnlikeSEMISi(α), the limited semanticsSEMIS(m)πi(α)shows objects that have external features, i.e. the objects are in a relationship with objects from other universes that have features expressed by formula α.Example 12Consider the information system IS(4)=×(IS1, IS2, IS3, IS4), where IS1, IS2, IS3, and IS4 are constructed based on relations R1=customer, R2=married_to, R3=purchase, and R4=product, respectively.For formulaα1=(age,30)∈LIS1we obtainSEMIS(4)(α1)={1,3,4,7}×U2×U3×U4.For formulaα2=(R1.id,R3.cust_id)∈LIS(1,3)we obtainSEMIS(4)(α2)={1}×U2×{1,2}×U4∪{2}×U2×{3,4}×U4∪{4}×U2×{5,6}×U4∪{5}×U2×{7}×U4∪{6}×U2×{8}×U4.For formulaα3=α1∧α2∈LIS(1,3)we obtainSEMIS(4)(α3)={1}×U2×{1,2}×U4∪{4}×U2×{5,6}×U4,SEMIS(1,3)π(α3)={(1,1),(1,2),(4,5),(4,6)}andSEMIS1π(α3)={1,4}.Each granulegi=(αi,SEMIS(4)(αi))(i=1, 2, 3) shows tuples of some customers, marriages, purchases, and products, e.g. g3 is a granule of 30 years old customers, all marriages, the customers’ purchases, and all products. Whereas(α3,SEMIS(1,3)π(α3))is granule g3 limited to 30 years old customers and their purchases.Data mining patterns (i.e. frequent patterns, association rules, and classification rules) are defined using relational information granules as follows.Let IS(m)=×(IS1, IS2, …, ISm) be a compound information system.Definition 13Frequent pattern1.A pattern in IS(m) is an expression of the formα=α1∧⋯∧αk∈LIS(m), where k≥1.The frequency of α isfreqIS(m)(α)=|SEMIS(m)(α)||U(m)|.66U(m) denotes the universe of IS(m).The frequency of α with respect to ISi(1≤i≤m) isfreqIS(m)πi(α)=|SEMIS(m)πi(α)||Ui|.Definition 14Association rule1.An association rule in IS(m) is an expression of the formα→β∈LIS(m), where α and β are patterns in IS(m), and they have no common descriptor.The frequency and confidence of α→β arefreqIS(m)(α→β)=freqIS(m)(α∧β)andconfIS(m)(α→β)=freqIS(m)(α∧β)freqIS(m)(α), respectively.The frequency and confidence of α→β with respect to ISi(1≤i≤m) arefreqIS(m)πi(α→β)=freqIS(m)πi(α∧β)andconfIS(m)πi(α→β)=freqIS(m)πi(α∧β)freqIS(m)πi(α), respectively.A classification rule is defined as a special case of an association rule.Definition 15Classification rule1.A classification rule in IS(m) is an association ruleα→β∈LIS(m)such that β is the decision descriptor.The accuracy and coverage of α→β areaccIS(m)(α→β)=freqIS(m)(α∧β)freqIS(m)(α)andcovIS(m)(α→β)=freqIS(m)(α∧β)freqIS(m)(β), respectively.The accuracy and coverage of α→β with respect to ISi(1≤i≤m) areaccIS(m)πi(α→β)=freqIS(m)πi(α∧β)freqIS(m)πi(α)andcovIS(m)πi(α→β)=freqIS(m)πi(α∧β)freqIS(m)πi(β), respectively.Example 16Let IS(1,2)=×(IS1, IS2) be a compound information system, where IS1 and IS2 are constructed based on relations R1=customer and R2=purchase, respectively.For formulasα=(age,30)∧(cust_id,R1.id),β=(gender,female)∧(amount,1),γ=(class,yes)∈LIS(1,2)we have the following semanticsSEMIS(1,2)(α)={(1,1),(1,2),(4,5),(4,6)},SEMIS(1,2)(β)={2,3,4,5}×{1,3,4,5,8},SEMIS(1,2)(γ)={1,2,4,5,6}×U2.We can obtain the following data mining patterns with their qualities.1.The frequency of pattern α (with respect to IS1) isfreqIS(1,2)(α)=|{(1,1),(1,2),(4,5),(4,6)}||U(1,2)|=1/14(freqIS(1,2)π1(α)=|{1,4}||U1|=2/7).The frequency and confidence of association rule α→β (with respect to IS1) arefreqIS(1,2)(α→β)=|{(4,5)}||U(1,2)|=1/56andconfIS(1,2)(α→β)=|{(4,5)}||{(1,1),(1,2),(4,5),(4,6)}|=1/4(freqIS(1,2)π1(α→β)=|{4}||U1|=1/7andconfIS(1,2)π1(α→β)=|{4}||{1,4}|=1/2).The accuracy and coverage of classification rule α→γ (with respect to IS1) areaccIS(1,2)(α→γ)=|{(1,1),(1,2),(4,5),(4,6)}||{(1,1),(1,2),(4,5),(4,6)}|=1andcovIS(1,2)(α→γ)=|{(1,1),(1,2),(4,5),(4,6)}||{1,2,4,5,6}×U2|=1/10(accIS(1,2)π1(α→γ)=|{1,4}||{1,4}|=1andcovIS(1,2)π1(α→γ)=|{1,4}||{1,2,4,5,6}|=2/5).

@&#CONCLUSIONS@&#
This paper has expended description languages defined for relational information granules. The expansion includes formula-based relations designed for representing relational databases and patterns to be discovered. The main advantages of the approach can be summarized as follows.1.The cost of generation of relational patterns can be decreased compared with that when the patterns are generated directly from the database. In fact, relations that represent the database consist of atomic formulas to be used for pattern construction.Richer knowledge can be discovered from relational data when generating patterns using relations. The patterns exploit information which can be acquired from a standard relational database by applying additional computations such as aggregation.