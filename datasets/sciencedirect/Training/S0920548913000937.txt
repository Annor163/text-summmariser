@&#MAIN-TITLE@&#
Development of context-aware workflow systems based on Petri Net Markup Language

@&#HIGHLIGHTS@&#
We demonstrate the capabilities of PNML in development of applications.We propose a methodology to automatically generate context-aware user interface.We propose Petri nets to describe workflows and resource activities in PNML.Our method generates context-aware user interface based on PNML files.We illustrate our design methodology by an example.

@&#KEYPHRASES@&#
PNML,Context-aware,Workflow,Petri net,User interface,Resource allocation,

@&#ABSTRACT@&#
The Petri Net Markup Language (PNML) is originally an XML-based interchange format for Petri nets. Individual companies may specify their process models in Petri nets and exchange the Petri nets with other companies in PNML. This paper aims to demonstrate the capabilities of PNML in the development of applications instead of an industrial interchange format only. In this paper, we apply PNML to develop context-aware workflow systems. In existing literature, different methodologies for the design of context-aware systems have been proposed. However, workflow models have not been considered in these methodologies. Our interests in this paper are to propose a methodology to automatically generate context-aware action lists for users and effectively control resource allocation based on the state of the workflow systems. To achieve these objectives, we first propose Petri net models to describe the workflows. Next, we propose models to capture resource activities. Finally, the interactions between workflows and resources are combined to obtain a model for the whole processes. Based on the combined model, we propose architecture to automatically generate context-aware graphical user interface to guide the users and control resource allocation in workflow systems. We demonstrate our design methodology using a health care example.

@&#INTRODUCTION@&#
The Petri Net Markup Language (PNML) [19,37] is originally an XML-based interchange format for Petri nets. Individual companies may specify their process models in Petri nets and exchange the Petri nets with other companies in PNML. Existing literature rarely addresses or studies whether the PNML may be applied in development of software or applications. This paper aims to demonstrate the capabilities of PNML in the development of applications instead of just an industrial interchange format. In this paper, we apply PNML to develop context-aware workflow systems.Context-aware computing becomes more and more important with the wide deployment of ubiquitous/pervasive computing infrastructure. It refers to an application's ability to adapt to changing circumstances and respond based on the context of use. Dey defines context as “any information that can be used to characterize the situation of an entity”, and an entity as “a person, place, or object that is considered relevant to the interaction between a user and an application, including the user and applications themselves” [12]. Among the main types of contextual information considered relevant are identity, time, activity, and location which are known as primary context [33]. A system is context-aware if it uses context to provide relevant information and/or services to the user, where relevancy depends on the user's task [11]. Context-aware computing aims to provide relevant information/services to users. A variety of prototypical context-aware applications have been created. Well-known examples include context-aware guides that present tourists with information tailored to their location [9] and context-aware environments such as classrooms, meeting spaces and smart homes that are instrumented with sensors to enable tracking of the occupants and their activities and supporting independent living of the elderly or disabled [8,13,35]. Readers may refer to [3,4,15,20,21,23,25,26,36] for a comprehensive survey on context-aware technologies and systems.The requirements of context-awareness pose challenges in modeling, analysis and design of applications/systems. Different methodologies for supporting the modeling of context and design of context-aware systems have been proposed. [30] proposed a model of context called Activity-Centric context and illustrated it via a detailed example. Henricksen & Indulska address software engineering challenges in developing context-aware pervasive computing applications. They proposed context modeling techniques, a preference model for representing context-dependent requirements and two programming models and a software infrastructure that can be used in conjunction with the proposed models [14]. Achilleos, Yang, Georgalas proposed a model driven approach that facilitates the creation of a context modeling framework and simplifies the design and implementation of pervasive services [1]. Serral, Valderas, Pelechano introduced a model driven development method for developing context-aware pervasive systems [34]. Their method allows one to specify a context-aware pervasive system by means of a set of models, which describes both the system functionality and the context information, and generate code based on the models. Riva and Toivonen have investigated a hybrid approach that enhances context-aware service provisioning with peer-to-peer social functionalities in the DYNAMOS project [31]. Chaari, Ejigu, Laforest and Scuturici propose a generic adaptation framework that involves content adaptation and presentation adaptation to guarantee adaptation of applications to the context in a pervasive computing environment [7].Many information systems in the real world involve complex workflows. An example is the medical information systems of hospitals. Ardissono, Di Leva, Petrone, Segnan and Sonnessa present the architecture of a framework integrating workflow management and context-aware action execution to support the personalized management of medical guidelines in home health care assistance services [2]. Hospital workers are highly mobile; they constantly change location to perform their daily work, which includes visiting patients, locating resources, such as medical records, or consulting with other specialists. The information required by these specialists is highly dependent on their location, role, time and activity. Health care has been recognized as an important and promising field of context-aware research [6]. How to streamline the processes by providing timely information to health care workers and exploit the advantage of handheld devices is an important research issue. Although contextual elements such as location, role and timing have been considered in the system proposed in [32,22], other contextual elements such as the workflow state are not addressed. However, typical medical processes usually involve workflows. To enable effective modeling of the medical processes, the workflow contextual elements must be taken into account. All the health care prototype systems mentioned above have not addressed the design of context-aware workflow management systems. Our interests in this paper are to propose a methodology to automatically generate context-aware user interface and effectively control resource allocation in workflow systems.The Workflow Management Coalition (WfMC) defines a workflow management system (WFMS) as: a system that defines, creates and manages the execution of workflows through the use of software, running on one or more workflow engines, which is able to interpret the process definition, interact with workflow participants and, where required, invoke the use of Information-Technology (IT) tools and applications [24]. In the existing literature, many workflow specification languages have been proposed, e.g. XPDL [38], BPMN [29] and WS-BPEL [28]. However, these workflow specification languages lack formal semantics and explicit representation of the process state. To propose a methodology to design context-aware workflow systems, a model for capturing workflows is required. Petri nets [27] are an effective model for modeling and analysis of workflows. The advantages of applying Petri net formalism are summarized as follows. First of all, the graphical nature of Petri nets can visualize sequences of firing via token passing over the net. Second, Petri nets have well-established formal mechanisms for modeling and analysis of systems. Third, the mathematical foundation of Petri nets can analyze structural and dynamic behaviors of a system. These advantages make Petri nets a suitable modeling and analysis tool. The application of Petri nets to workflow management have been studied by W.M.P. van der Aalst in [41]. Advances in business process management have been addressed in [39]. W.M.P. van der Aalst and A. Kumar [40] propose the addition of a team concept to today's workflow management systems.In order to achieve the objectives, we first propose Petri net models to describe the workflows. Next, we propose models to capture resource activities. Finally, the interactions between workflows and resources are combined to obtain a model for the whole processes. Based on the combined model, we propose architecture to automatically generate context-aware graphical user interface to guide the users and control resource allocation in workflow systems. We propose an action generation algorithm to generate the list of actions for a resource in a given system state to avoid deadlocks. We demonstrate our design methodology using a health care example throughout this paper.As we use Petri nets as the workflow models, a representation format must be adopted to realize context-aware applications. The Petri Net Markup Language (PNML) [19,37] is an XML-based interchange format for Petri nets. Currently, there are several Petri net tools implementing PNML file format, e.g. WoPeD, Renew, PNK, PEP, VIPtool) [5]. Therefore, we adopt PNML as the format for representing the Petri net models.Our design methodology is broken down into three steps. First, we construct workflow models and resource activity models in Petri nets using PNML editors. Second, we combine the PNML files of the workflow models and resource activity models into a single PNML file for the complete Petri net for resource allocation. Third, we propose an action generation algorithm to generate the list of actions for a resource in a given system state to avoid deadlocks [16–18]. Finally, we develop a context-aware user interface generation program to generate the user interface based on the list of actions. The advantages of our design methodology include specification of workflows and resource activities with PNML to minimize the cost involved in analysis and design and efficient generation of context-aware user interface based on the PNML specification of workflows and resource activities. Our approach is different from the approaches proposed in [1,14,34] as our design methodology is based on Petri net models and PNML for representing the models. As we concentrate on the design of context-aware applications to allocate resources in workflow systems, this paper is also differentiated from the one presented in [10], which proposes an approach to modeling, enactment and dynamic reconfiguration of workflows.The remainder of this paper is organized as follows. In Section 2, we propose our architecture for developing workflow-driven context-aware applications. In Section 3, we introduce a workflow model in Petri net. We propose a resource activity model in Section 4. In Section 5, we propose a complete Petri net model which models the resource contention and interactions between medical processes based on context composition. We propose an action generation algorithm in Section 6. Generation of user interface is addressed in Section 7. We conclude this paper in Section 8.A hospital's staff is distributed in space or time, works in different shifts and their information needs are highly dependent on their location and other contextual conditions such as their role or the time of day. These characteristics pose challenges in the development of effective information systems and resource management scheme for hospitals. Due to the complexity of the tasks performed and the distributed information and resources, medical processes in a hospital require considerable mobility and coordination of resources. Although the increasing use of handheld computers in medical practice facilitates the coordination of the hospital staffs' actions more efficiently, there is still a lack of study on systematic methodology for the management and control of resources in medical processes. To achieve effective management of resources, a process model is required.A medical process abstracts the procedures in a hospital. Each medical process consists of a set of tasks. Each task is associated with roles to be played by staff members. We are mainly concerned with the management of related resources for effective enactment of these tasks. Each task has a unique identification, a description, and a set of roles that are capable of executing the task. Fig. 1describes a typical surgery process. When a patient is scheduled for surgery after being admitted to the ward, he/she has to go through radiology tests. A surgery time is then assigned. Before the surgery, the head nurse initiates the procedures. She calls the ward, requests the ward officer to prepare the patient and calls the hospital porter to fetch the patient. The anesthesiologist is asked to go to the preparation room at a specific time. After the anesthesia, the patient is brought to the operating room, where the surgeon and the assisting nurses will be waiting. After the operation, the patient will be moved to the intensive care room. If everything goes well, the patient will be returned to the ward.We assume that each worker is equipped with either a mobile handheld communication device such as a Java phone or a computer used for communication with other team members. Fig. 2shows our proposed architecture for developing workflow driven context-aware applications. In Fig. 2, the contextual model repository is used to capture the context of different types of team members and task workflows. The information to be delivered to different members in the system varies depending on the role of the member involved in carrying out the task. The workflow manager aims to provide a model to monitor the progress of tasks. A team member usually needs to participate in different parts of the task workflows. Depending on the role of a team member, the communication devices that are accessible vary. How to generate the context-aware information to guide a team member using a variety of different types of communication devices to collaboratively accomplish the task is a significant design issue.Fig. 3illustrates the proposed scheme to generate context-aware user interface for different team members. The inputs of the processes include resource activity contexts, workflow contexts and the device contexts. To monitor the progress of each workflow, a workflow monitor model is constructed for each task. Construction of the workflow monitor model is obtained by taking into account the interactions between the resource activity contexts and the relevant workflow context of the task. A context composition procedure is needed to combine the resource activity contexts and the task workflow context into a workflow monitor model. Based on the workflow monitor model, the action generation algorithm elicits and identifies the active user context corresponding to the current state of the workflow. Once the active user context has been identified, the user interface generation procedure is invoked to generate the active user interface by combining the active user context model with the device context model.To facilitate automated generation of context-aware guidance information for each team member, an appropriate contextual modeling approach must be adopted to capture the interactions between the individual contexts of the team members, the contexts of different task workflows and the contexts of the communication devices accessible. There are two requirements in the selection of models. First, the model must have well-established formal mechanisms for modeling as well as analysis. Second, the model must be accompanied by a standardized interchange format. Petri nets [27] are a model that meets these two requirements. Therefore, we adopt Petri nets to model the contexts. The advantages of applying the Petri nets formalism to the modeling and analysis of a context-aware system can be summarized as follows. First of all, the graphical nature of Petri nets can visualize sequences of firing via token passing over the net. Second, Petri nets have well-established formal mechanisms for modeling and property checking of systems with concurrent, synchronous and/or asynchronous structures. Third, the mathematical foundation of Petri nets can be used to analyze the structural and dynamic behaviors of a system. These advantages make Petri nets a suitable modeling and analysis tool. Furthermore, the emerging Petri Net Markup Language (PNML) [19,37] is a preliminary proposal of an XML-based interchange format for Petri nets. PNML makes it possible for individual companies to exchange their process models specified by Petri nets. In this paper, PNML is used for sharing and exchanging the process models of participants in a team. To model the medical processes, we propose Petri net models to capture medical workflows as well as the resources required for performing the operations in the medical workflows. A brief introduction to Petri nets is first given.A Petri net (PN) N is a five-tuple N=(P, T, I, O, m0), where P is a finite set of places with cardinality |P |, T is a finite set of transitions, I: P×T→{0,1} is the input function that specifies input places of transitions, O: P×T→{0,1} is the output function that specifies the output places of transitions, and m0: P→Z|P| is the initial marking of the PN with Z as the set of nonnegative integers. The marking of N is a vector m∈Z|P| that indicates the number of tokens in each place and is a state of the system. In a Petri net, •t denotes the set of input places of transition t and t• denotes the set of output places of transition t. A transition t is enabled and can be fired under a marking m if and only if m(p)≥I(p,t)∀p∈•t. Firing a transition once removes one token from each of its input places and adds one token to each of its output places. A marking m' is reachable from m if there exists a firing sequence bringing m to m'. The reachability set R(m0) denotes all the markings reachable from m0. The readers may refer to [27] for a tutorial on Petri nets.For the medical process shown in Fig. 1, there are eight steps. Each step can be modeled using Petri net. To model a medical workflow as a Petri net, we use a place to represent a state in the workflow while a transition represents an event or operation that brings the workflow from one state to another. The workflow of a medical process wnis modeled by a subclass of Petri nets called a workflow net [41] with wn=(Pn, Tn, In, On, mn0), where the set Pnof places denotes the production states whereas the set Tnof transitions denotes the operations.Definition 3.1The workflow of a medical process wnis a workflow net wn=(Pn, Tn, In, On, mn0).A Petri net wn=(Pn, Tn, In, On, mn0) is a workflow net if and only if (i) wnhas a source place ε and a sink place θ with •ε=Φ and θ=Φ and (ii) if we add a new transition t to wnto connect θ with ε, the resulting PN wnis strongly connected. The augmented workflow netw′nassociated with wnis the strongly connected PN obtained by add a new transition t to wnto connect θ with ε.As each transition represents a distinct operation in a task, Tj∩Tk=Φ for j≠k.Fig. 4illustrates the individual workflow Petri net models w1through w9for the steps of the medical process in Fig. 1. Note that the individual workflow Petri net model for each step has one ready state, one finished state and several processing states. For example, the workflow Petri net model w1 for Step 1 consists of one ready state (P1), one finished state (P3) and one registration state (P2). Two alternative types of diagnosis are available for Step 2. These two types of diagnosis are modeled by workflow Petri nets w2 and w3, respectively. Step 3 has two tests to be performed. The order to perform the two tests is arbitrary. We model Step 3 as an acyclic Petri net that is similar to a marked graph. To model Step 3 in Petri net, we represent radiology test 1 by p6t6p7t7p8 whereas we represent radiology test 2 by p9t8p10t9p11. We add transitions t5 and t10 to denote the starting and the terminating events of Step 3. The resulting workflow Petri net model is depicted in w4 in Fig. 4. Fig. 4 also shows the individual workflow Petri net models w1 through w9 for Step 1 through Step 8 in Fig. 1.To construct the complete workflow models, we define the operator "‖" as follows to merge two Petri net models with common transitions, places and/or arcs. The operator "‖" can be easily implemented based on the incidence matrices of the Petri nets.Definition 3.2Given two Petri nets N1=(P1, T1, I1, O1, m10) and N2=(P2, T2, I2, O2, m20), N1‖N2=(P, T, I, O, m0), where P=P1∪P2, T=T1∪T2,Ipt=I1ptifp∈P1andt∈T1I2ptifp∈P2andt∈T2,Opt=O1ptifp∈P1andt∈T1O2ptifp∈P2andt∈T2, andm0p=m10pifp∈P1m20pifp∈P2.The complete Petri net model corresponding to a complete medical workflow Wnis modeled by Wn=‖k∈ωnwn, where ωnis the set of indices of the individual workflows involved in Wn.A component has been designed to merge the individual workflows. Fig. 5shows the complete workflow W1 obtained by merging w1–w9.A medical process cannot be carried out without the required resources. In each step of the medical process, specific resource requirements must be met to start its operation. A medical workflow specifies only the sequence of operations to complete a medical process. Each operation in a medical workflow consumes a number of different types of resources. In hospitals, the set of resources includes doctors, nurses, specialists, porters, operating rooms, beds in the ward and related equipments for medical analysis and treatment, etc. In addition to the workflow specified by Wn, the activities for each type of resource must also be specified. Each resource may take part in some of the operations in different medical workflows. A resource may visit different states throughout the lifetime of its usage in performing various operations in the workflows. For example, a doctor may be in different states depending on the time, schedule, location and his role. Specialists and equipments for radiology test may be either in idle state or in busy state. A bed in the ward of a hospital may be occupied by a patient during the medical processes. The bed will return to idle state after the medical processes are finished. For another example, a porter may be in either a busy state or idle state. Depending on the location, the porter may be in different busy states. To facilitate control of resource allocation, a model is required to capture the activities of each type of resources.An activity is a sequence of operations to be performed and states to be visited by a certain type of resource. We use a place in Petri net to represent a state in the resource activity. LetRndenote the set of resource types required to perform the operations in workflow Wn. For the workflow W1 in Fig. 4,R1={r1,r2,r3,r4,r5,r6,r7}, where the meaning of ri, is listed in Table 1.Each resource has an idle state and each resource activity starts and ends with an idle state. Each activity brings a patient from one state to another in the medical process. The activity r1t1p2t2 brings the patient to the “registered” state. The activity r3t3p4t4 moves the patient from the “registered” state to the “diagnosis” state. A resource activity is described by a cycle in Petri net. A cycle indicates that the resource activity includes resource allocation and de-allocation.Fig. 6shows the resource activities of the seven resources corresponding to the workflow in Fig. 4.The Petri net model for the k-th activity for a type- r resources, where r ϵRn, is described by a Petri net Arkdefined as follows.Definition 4.1Petri net Ark=(Prk, Trk, Irk, Ork, mrk) denotes the k-th activity for a type- r resources, where r∈Rn. Remark that Trk∩Trk'=Φ for k≠k'.Let Krbe the number of activities of a type-r resources. Let Ωnr⊆{1,2,3,...,Kr} denote the set of type-r activity IDs in Wn. The initial marking mrkis determined based on the number of resources allocated to the k-th activity. More specifically, mrk(r) is the number of resources allocated to place r, where r is the idle place of type-r resources.The resource contextual model for workflow Wnis constructed based on the following definition.Definition 4.2The resource contextual model for workflow Wnis Ar=‖k∈ΩnrArk.Fig. 7shows the resource contextual models for each type of resources.The complete Petri net model of a medical process is constructed by combining the resource contextual models with the workflow model to take into account the interactions between resources and the workflow. By applying the "‖" operator, resources involved in an operation are synchronized so that the operation can be executed.Definition 5.1The complete Petri net model corresponding to a complete medical workflow Wnis modeled by Gn=‖r∈RnAr‖Wn=(Pn,Tn,In,On,mn0), where Ar=‖k∈ΩnrArk.Fig. 9 shows Gn=Wn‖Ar11‖Ar21‖Ar22‖Ar31‖Ar41‖Ar51‖Ar61‖Ar71.Let m0 be the initial marking of Gn. The initial marking m0 of Gnis defined below.Definition 5.2Mn0≡{m|m(p)=0∀p∈Pn\Poandm(p)>0∀p∈Po} denotes the set of initial markings of Gn, where P0is the set of all idle state places of all types of resources.The complete Petri net model is a five-tuple Gn=(Pn,Tn,In,On,mn0), where mn0∈Mn0 ≡{m|m(p)=0∀p∈Pn−Po}andm(p)>0∀p∈Po,Mn0 is the set of markings under which all resources are idle.In Fig. 8(a) and (b), P0={r1,r2,r3,...,r7}, where r1,r2,r3,...,r7 are idle state places.Different medical processes may share the same of types of resources. Let N denote the set of all medical processes. The overall system is represented by G=‖n∈NGn=(P,T,I,O,m0).In Fig. 8(a), the tokens in place P1represent two patients are ready for reservation. The two patients contend for the staff. The counter staff may process the two reservation requests according to a simple rule such as first come first served. Suppose the counter staff processes the first patient's request first and then the second patient's request. By processing the first patient's request, transition t1 and transition t2 will be fired. This will bring a token to place P3. By processing the second patient's request, transition t1 and transition t2 will be fired again. This will bring a token to place P3. The resulting state is shown in Fig. 8(b), where the two patients are now in a state ready for the diagnosis of the doctor. The doctor may now start to diagnose the patients according to the schedule.We implement a context composer to achieve context composition. Fig. 9illustrates our approach to composing contextual models. The workflow Petri net models and the resource activity Petri net models are parsed into the internal representation first. Based on the internal representation, the workflow Petri nets and the resource activity Petri nets are merged into a complete Petri net in the internal representation. The resulting complete Petri net is converted to the PNML representation.Resources in hospitals are limited and expensive. To utilize the available resources effectively, resources are usually shared by different medical processes so that the total cost can be minimized. The model we proposed previously can be used to monitor and control resource allocation in hospitals. To control resource allocation, we need the following definition.Definition 6.1A control action a is a vector in Z|T| that determines how many times that each transition in T may be fired concurrently, where a(t) denotes the number of times transition t can be fired under control action a. A control policy u is a mapping u: R(m0)→Z|T| that generates a sequence {a} of control actions for G based on its marking m∈R(m0), where R(m0) is the set of all reachable markings of G from an initial marking m0.G(m0)=(P, T, I, O, m0) is live under a control policy u if no matter what marking has been reached from m0, it is possible to ultimately fire any transition of G by progressing through some further firing sequence under u. A control action a is called an admissible control action if there exists a control policy that keeps G live after executing a.M⁎denotes the set of initial markings of G with minimal resources for the existence of a control policy to keep it live. The set of resources under m*∈M* is called a minimal resource requirement (MRR) of G.Given G with marking m∈R(m0), there exists a control policy u such that G is live under m if and only if there exists a sequence of control actions that bring m to a marking m′∈M0 with m′(p)≥m*(p)∀p∈P0, where m*∈M*.In [16], we have proposed an algorithm to generate admissible control actions for a class of Petri nets. The algorithm is tailored for the net G(m0)=(P, T, I, O, m0) to generate actions in this paper.Fig. 10shows our proposed architecture for the implementation of a context-aware workflow management system based on Petri net models. The deadlock avoidance algorithm is based on [16,18] and is out of the scope of this paper.We assume each worker is equipped with a handheld device to receive the action list for execution. The complete Petri net model maintains the state of the medical processes based on the up-to-date state information from the state update algorithm. With the most up-to-date information of the medical processes, the action generation algorithm generates the action list for each worker. Different workers select their actions from the action lists for execution. By executing an action, a message is forwarded to the state update algorithm to update the state of the complete Petri net model. The action generation algorithm then generates the action lists based on the new state.The following action generation algorithm generates the set of transitions that can be fired under a marking. The set of transitions that can be fired under a marking may be involved with different resources. Let a denote the control action generated by the action generation algorithm. Let Te(m) denote the set of transitions enabled under marking m. Let Ar=‖k∈ΩnrArk=PrTrIrOrmrdenote the Petri net model of resource r. To generate a context-aware user interface for individual resources, we find the set Tr(m)=Te(m)∩Trof transitions allowed to be fired for resource r. Based on Tr(m), we specify the desired user interface to represent the list of actions that can be taken by the resource with XML. For the state in Fig. 8(b), the set of transitions allowed to be fired for resource r3 isTr3m=t3t21. The XML specification of list of actions for resource r2 is shown in Table 2.Action generation algorithmStep 0:Given m0m←m0Set Tr(m)←Φ for each r∈RFind the set Te(m) of enabled transitions under marking mFor each t∈Te(m)Find the marking m' reached under after firing t under mIf m⁎ is coverable from marking m'For each r∈RIf t∈TrTr(m)←Tr(m)∪{t}End IfEnd ForEnd IfGenerate Action List ALrfor resource r according to Tr(m) for each r∈RRespond to resource r with Action List ALrfor each r∈R.To generate context-aware user interface, we have developed a prototype system to comprise the complete contextual Petri net model, generate the action lists and specify the desired context-aware user interface specification in XML format. Finally, the context-aware user interface generation application running on J2ME generates the user interface dynamically based on the XML specification of the desired user interface and the device context of the J2ME platform.Suppose a user takes an action to fire transition t under marking m. Let a denote the control action that fires t once. The state of the complete Petri net model evolves to state m', wherem′=m+ATa.We have developed a prototype system to generate context-aware user interface based on Petri nets. The system consists of three parts: Composer, GUI Generator and Administrator. Composer is used to specify the PNML files for workflows as well as resource activities and merge the PNML files into a single PNML file for the complete Petri net model. The functions of Administrator are to define users and resources in the system and monitor the system. GUI Generator is used to generate the list of actions for users based on the contextual model and the system state. The sequence diagrams of the system consist of two parts: (i) interaction between entities in the design phase and (ii) interaction between entities in the execution phase.Fig. 11shows the sequence diagram in the design phase. In the design phase, the system designer first specifies the workflow and the resource activities in Petri nets. Basically, any Petri net Editor that supports PNML standard can be used in this step. For example, WoPeD (Workflow Petri net Designer, http://www.woped.org/) is a PNML compliant Petri net editor. The PNML files for the workflow Petri nets in Fig. 4 and the resource activity Petri nets in Fig. 6 can be created using WoPeD. After creating all the PNML files for the workflow Petri nets in Fig. 4 and the resource activity Petri nets in Fig. 6, the designer interacts with the system by following the sequence of events in Fig. 11. A designer first specifies the location of the PNML file for the workflow Petri net and uploads it to the composer. Next, the location of the PNML file for the resource activity Petri net is specified and uploaded to the composer. After specifying the location of the PNML files of the workflow and the resource activities, the designer invokes the composer to merge all the PNML files into a single PNML file for the complete Petri net model. We implement the merging function based on JAXP which supports marshaling and un-marshaling of the XML documents in Java language.Our prototype system includes the functions to define workflows and resource activities, configure the capabilities of resources and link the type of registration to the corresponding workflow. Fig. 12(a) shows the snapshot to define a workflow. The user interface to define a resource activity is shown in Fig. 12(b). Fig. 12(c) shows the snapshot to configure the capabilities of resources. Fig. 12(d) shows the snapshot to link the registration type to workflow. The Composer constructs the complete Petri net model by merging the PNML files of workflows and the resource activities. This finalizes the design phase.In the execution phase, users interact with our prototype system to generate the context-aware user interface by following the sequence of events in Fig. 13. An user first invokes the Login() method provided by the GUIGenerator to identify itself to the system. After logging in the system successfully, ActionGenerator is invoked to generate the ActionList for the user. The GUIGenerator then presents the ActionList GUI for the user. From the ActionList GUI, the user takes action according to the priority of the actions. After taking action, the Monitor is invoked to update the system state and the ActionList. The GUIGenerator then presents the updated ActionList GUI for the user to take the next action.For the example of Fig. 8(b), two transitions t3, t21 are enabled. In this example, resource r3 corresponds to a doctor. Under the state in Fig. 8(b), our system generates the context-aware user interface for r3 to select between the actions t3 or t21 to be taken by resource r3. Suppose the diagnosis action t3 is executed and t4 represents the completion of the diagnosis process. After firing t4, the token moves to place p5 and fires transition t5. The system evolves to the state in Fig. 14.The two transitions t6 and t8 are relevant to r2. Therefore, the context-aware user interface for r2 (Allen in this example) displays two diagnosis actions: t6 (corresponding to Radiology Test1) and t8 (corresponding to Radiology Test2). Suppose t6 is selected by Allen(r2). The details of the selected will be displayed in the next screen. Fig. 15shows two snap shots of the workflow driven graphical user interfaces for resource r2 generated by PNMLs for the state in Fig. 14.

@&#CONCLUSIONS@&#
