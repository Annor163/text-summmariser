@&#MAIN-TITLE@&#
External coupling software based on macro- and micro-time scales for explicit/implicit multi-time-step co-computations in structural dynamics

@&#HIGHLIGHTS@&#
Subdomain decomposition framework using a Dual Schur approach.Comparison of two external coupling software based on the GC and PH algorithms.Explicit/implicit multi-time-step co-computations with different FE codes.Improved variant of the PH algorithm.Parallel capabilities and conserving energy features.

@&#KEYPHRASES@&#
Non-overlapping coupling method,Heterogeneous time integrators,Heterogeneous time scales,External code coupling,Structural dynamics,

@&#ABSTRACT@&#
External coupling software based on the coupling algorithm proposed by Prakash and Hjelmstad (PH method) is compared to the previous external coupling software based on the GC (Gravouil and Combsecure) method. The salient features of multi-time-step partitioning methods are presented: they involve non-overlapping partitions and follow a dual Schur approach by enforcing the velocity continuity at the interface with Lagrange multipliers. The main difference between the two methods lies in the time scale at which the interface problem is solved: the micro-time scale for the GC algorithm and macro-time scale for the PH algorithm. During the multi-time-step co-computations involving two finite element codes (explicit and implicit FE codes), the tasks carried out by the coupling software PH-CPL, based on a variant of the PH algorithm, are illustrated and compared to the coupling software GC-CPL based on the GC algorithm. The advantage of the new coupling PH-CPL software is highlighted in terms of parallel capabilities. In addition, the PH-CPL coupling software alleviates the dissipative drawback of the GC method at the interface between the subdomains. Academic cases are investigated to check the energy features and the accuracy order for the GC and PH algorithms. Finally, explicit/implicit multi-time-step co-computations with GC-CPL and PH-CPL software are conducted for two engineering applications under the assumption of linear elastic materials: a reinforced concrete frame structure under blast loading striking its front face and a flat composite stiffened panel subjected to localised loads applied to its central frame.

@&#INTRODUCTION@&#
The increasing complexity of numerical simulations involving multiphysics phenomena has boosted the development of partitioning approaches. In fluid–structure interactions, the partition is driven by both physical and computational considerations: phenomena expected in each medium are very different from the point of view of space and time scales, arguing for a natural partitioning of the problem. In structural dynamics such as a structure subjected to localised impact loads, a small part of the structure is expected to experience strong non-linear phenomena over a short duration along with high-frequency features, whereas the remaining structure would mainly be concerned with linear low-frequency vibrations over a much longer duration. Then the choice of the subdomain decomposition of the whole mesh is driven by computational consideration: adopting different time steps and time integrators (explicit or implicit) depending on the partitions of the structure is much more advantageous in terms of computation times than a fixed time step depending on the smallest finite element in the mesh when considering conditionally stable time integrators such as the explicit central difference scheme.Partitioning approaches are also very appealing with a view to coupling dynamic parts of heterogeneous systems in the context of hybrid (experimental/numerical) real time testing which requires different explicit or implicit time integration schemes in different subdomains (i.e. substructures) depending on their complexity and characteristics. The purpose of such hybrid experimental/numerical testing such as continuous pseudo-dynamic testing (PsD) is to test a key region of interest while the remainder of the structure is numerically handled. Typically, fewer degrees of freedom are considered for the tested part but with a large number of small time steps, advocating the use of explicit time integration schemes or other non-iterative schemes such as the α-operator splitting method [1]. In contrast, the numerical part may involve a large number of degrees of freedom with a large time step, which is efficiently handled by an implicit time integration scheme. As a consequence, the hybrid numerical–experimental testing techniques require high-performance coupling methods from the field of computational mechanics to be able to trigger the physical and numerical parts to interact in real time.A great deal of research on partitioning approaches has been published in the literature since the pioneering work of Hughes and Liu in 1978 [2,3], and Belytshko and Mullen in 1976 [4–6]. These time integration procedures followed a primal approach, that is, the solution of the kinematic quantities (primal field) is obtained by solving the interface problem. The procedures refer to mixed time integration methods when different time integrators are considered, and subcycling or multi-time-step methods when different subdomain time steps are used in the mesh. Domain decomposition is based on nodal partitioning or element partitioning [7–18].The alternative approach to the primal subdomain decomposition methods is the dual approach, characterised by an interface problem whose unknowns are dual quantities, Lagrange multipliers, representing the interface forces between the subdomains. This approach has been popularised by the success of finite element tearing and interconnecting method (FETI) developed by Farhat and Roux [19], first for static problems and subsequently extended to dynamic problems [20]. The FETI method uses non-overlapping subdomains and provides a very useful framework for building new coupling algorithms such as the multi-time-step integration method proposed by Gravouil and Combescure, labelled the GC method [21]. The stability of the GC method is demonstrated for Newmark time integrators by studying the sign of the interface pseudo-energy using of the so-called energy method, as first proposed by Hughes [22] for demonstrating the stability of mixed time integration methods. The interface pseudo-energy remains equal to zero when the same time step is employed in the subdomains and becomes negative when different time steps are adopted. In terms of accuracy orders, the artificial energy dissipation results in the loss of one order of accuracy when second-order accurate Newmark time integrators with different time steps are coupled. Furthermore, the GC method proposed for Newmark schemes in linear dynamics has been extended to non-linear dynamics [23], explicit non-linear dynamics with non-matching meshes at the interface [24], and coupling subdomains described according to a modal approach [25]. Prakash and Hjelmstad [26] dealt with the energy dissipation issue at the interface by extending the GC method.The main difference of the PH method lies in the time scale at which the interface problem is solved: contrary to the GC method whose interface problem is solved at the fine time scale, the interface problem is solved at the large time scale. It has been proven that the PH method is energy conserving in the sense that the interface pseudo-energy remains equal to zero. The partitioning method turns out to be stable and of second-order accuracy when Newmark second-order accurate time integrators are considered. In the context of first-order systems, a FETI-based domain decomposition technique has been developed by Nakshatrala et al. [27] enabling arbitrary numerical schemes to be coupled.The development of hybrid experimental/numerical testing methods has fostered the tailoring of the previous subdomain methods, by investigating the suitability of primal [28] and dual [29] approaches for these particular heterogeneous subsystems. Indeed, the staggered nature of the GC method constitutes a severe drawback in the context of the PsD tests in which experimental and numerical tasks have to be conducted in a concurrent way. Consequently, a new interfield parallel integration procedure, called the PM method from the authors’ names (Pegon and Magonnette), has been described by Bonelli et al. [30] by coupling Newmark time integrators. Recently, further work has been undertaken by Bursi et al. [31] to build a coupling method able to handle the generalised-α schemes proposed by Chung and Hulbert [32], well known for their optimal numerical dissipation properties by filtering out the high frequencies of the response without altering the low frequencies. Nonetheless, it has been pointed out that generalized-α schemes have to be adapted to the end time collocation format of the GC method along the lines of Arnold and Bruls [33].In Section 2 of this paper, the salient features of the GC algorithm are reviewed as well as the discrete energy balance equation [22,34] in order to accurately assess the spurious energy dissipated at the interface. The next section is devoted to the PH method which enables the energy drawback at the interface to be alleviated, by solving the interface problem at the macro-time scale. It will be emphasised that some unbalanced free terms at the micro-time scale are required in the classical PH algorithm found in the literature [26,35]. An improved variant of the PH algorithm, noted as modified PH algorithm, is proposed by deriving a new form of these unbalanced free forces. In Section 4, on the basis of this modified PH algorithm, new coupling software, called PH-CPL, is set up and compared to the coupling software based on the GC algorithm (labelled GC-CPL). Finally, numerical examples are presented in the last section. The first example is the academic case of the split-oscillator to assess the accuracy orders of the GC and modified PH coupling schemes. The second example is a simple clamped-free 2D beam subjected to a lateral end load. The third example concerns a reinforced concrete frame structure subjected to blast loads at its front face, simulated using both coupling software programmes (GC-CPL and PH-CPL). The last example deals with a flat plane panel, with stiffeners and frames, subjected to localised impact loads. Multi-time-step explicit/implicit co-computations using both GC and modified PH coupling software programmes show the accuracy and efficiency of the partitioning approach in comparison to the full-explicit computation.First, the key points of the GC progenitor multi-time-step subdomain algorithm proposed by Gravouil and Combescure [21,23] are given: the method is FETI-based, that is, it follows a dual Schur approach, involving the dual variable, the Lagrange multiplier, to enforce the kinematic continuity of the velocity across the interface at the micro-time scale.Second, in order to accurately assess the dissipated energy at the interface due to the GC method, the discrete balance energy equation is written in the case of a domain split into two subdomains handled with different Newmark time integrators and time steps.The GC coupling method is based on a dual Schur complement formulation which consists in ensuring the velocity continuity across the interface between subdomains by means of Lagrange multipliers. The Lagrange multipliers represent the interface forces between the two subdomainsΩAandΩB. The kinematic constraint, continuous over time, related to the velocity continuity across the interface is expressed as(1)LAu̇A(t)+LBu̇B(t)=0whereLA(respectively,LB) is a Boolean constraint matrix when the subdomain meshes conform at the interface, which operates on nodal quantities of the subdomainΩA(respectively,ΩB), picks out the degrees of freedom lying on the interface and assembles them in an interface vector. Conversely, the transpose matrixLAT(respectively,LBT) operates on interface quantities, picks out the degrees of freedom that belong to the subdomainΩA(respectively,ΩB) and assembles them at their corresponding position in a global vector relative to the whole subdomain.Using the so-called energy method proposed by Hughes for demonstrating the stability of mixed explicit/implicit coupling scheme, it has been shown in [21] that enforcing the kinematic continuity in terms of velocity leads to a stable algorithm. More precisely, the pseudo-energy at the interface involved in the pseudo-energy balance equation is equal to zero for homogeneous time steps, whereas the pseudo-energy at the interface is negative when considering different time steps. The demonstration holds for any time integrators from the Newmark family.The velocity constraint at the interface is ensured by means of Lagrange multipliersΛ(t), enabling equilibrium of subdomains to be automatically verified. Therefore, the semi-discrete form of the equilibrium equations in the case of linear elastic material can be written as(2){MAu¨A(t)+KAuA(t)=fextA(t)−LATΛ(t)MBu¨B(t)+KBuB(t)=fextB(t)−LBTΛ(t)where M is the symmetric definite-positive mass matrix, K is the semi-definite positive stiffness matrix andu(t)denotes the nodal displacements. A superposed dot over a quantity denotes its time derivative. The subscripts A and B are used for the matrices, whereas the superscripts A and B are used for the vectors.On the right side of the above equations, the interface forces,−LATΛ(t)and−LBTΛ(t), acting on subdomainsΩAandΩB, are defined as the product of the transpose of the constraint matrices with the Lagrange multipliersΛ(t). It can be noted that they act on a given subdomain as a field of external forces.Two time integrators from the Newmark family characterised by the parametersγA,γBandβA,βB, are considered for the subdomainsΩAandΩB, related to two time scales: a macro-time scale with the sizehA=[t0,tm]and a micro-time scale with the sizehB=[tj−1,tj]. The discrete forms of the equilibrium equations are written at the end of the macro-time step and at the end of every micro-time step:(3){MAamA+KAumA=fext,mA−LATΛmMBajB+KBujB=fext,jB−LBTΛj,j=1,…,mThe velocity continuity is enforced at every micro-timetj:(4)LAvjA+LBvjB=0,j=1,…,mwhere velocitiesvjAat the micro-timetjare deduced from the velocities at the beginning and at the end of the macro-time stephA=[t0,tm], namelyv0AandvmA. The kinematic quantities are split into free and linked quantities: the free quantities are obtained by solving the equilibrium equations in each subdomain (Eq. (3)) without considering the interface forces, whereas the linked quantities are the solutions of the equilibrium equations with only the interface terms on the right side.By introducing the approximate formulae of the Newmark time integrators in their acceleration format and assuming a linear interpolation for the free velocitiesvfree,jAbetween the values of the beginning and end of the macro-time stephA=[t0,tm], the velocity constraint given in Eq. (4) can be expressed as a small-size symmetric dual problem governing the Lagrange multipliers at the interface as follows:(5)HGCΛj=bjThe left-hand side matrixHGCdenotes the interface operator of the GC method, corresponding to the Schur complement of the system formed by Eqs. (3) and (4), and the right-hand side vectorbjis only dependent on the free velocities of subdomainsΩAandΩB. They are defined as(6){HGC=γAhALAM˜A−1LAT+γBhBLBM˜B−1LBTbj=LAvfree,jA+LBvfree,jBwithM˜AandM˜Bthe classical dynamic operators related to the two subdomains when introducing classical Newmark approximate formulae in their acceleration form:M˜A=MA+βAhA2KAandM˜B=MB+βBhB2KB. The interface operator can be viewed as a condensed form of the dynamic operators on the degrees of freedom belonging to the interface.The interface problem in Eq. (5) has to be solved at every micro-timetjso as to derive the Lagrange multipliersΛjand then the linked quantities at the micro-time scale. The total quantities at the micro-time scale are then obtained by summing free and linked quantities in subdomainΩB. Finally, when the Lagrange multiplierΛmis obtained at the end of the macro-time steptm, the linked and complete quantities belonging to the macro-subdomainΩAare computed before proceeding to another macro-time step.It can be pointed out that the GC method is staggered because the computing tasks in different subdomains cannot be carried out in a concurrent way: first, the subdomain related to the macro-time scale has to be solved without considering the interface forces; then the subdomain related to the micro-time scale can be solved, by computing first the free quantities and second the linked quantities after solving the Lagrange multipliers; and finally, the linked quantities in the macro-subdomain are computed. The successive computation tasks carried out in the GC method in the case of different time steps can be found in earlier studies [36].The staggered feature of the GC method and the time scale at which the interface problem is solved constitute two drawbacks to implementing the method in a parallel setting.The dissipative drawback of the GC method has pointed out by several numerical applications in linear and non-linear dynamics [21,23]. The spurious dissipated energy can reach a few percent of the total energy for impact problems and earthquake engineering applications [36,37].The discrete energy balance equation over a macro-time step is considered in order to scrutinise the artificial energy dissipated or generated at the interface in the case of multi-time-step algorithms. Krenk [34] derived the discrete form of the energy balance equation in the case of the Newmark algorithms. For a given subdomain, without considering structural damping, the energy balance equation over a time step can be written as(7)[12vTMv+12uTKu+(β−12γ)12h2aTMa]nn+1=ΔuT{12(fext,n+1+fext,n)+(γ−12)Δf}−(γ−12){12ΔuTKΔu+(β−12γ)12h2ΔaTMΔa}whereh=[tn,tn+1]is the time step andfextdenotes the external forces. The symbol Δ is used to indicate quantity increments. This expression can be simplified whenγ=1/2, that is for the average acceleration scheme and the central difference as(8)[12vTMv+12uTKu+(β−12γ)12h2aTMa]nn+1=ΔuT{12(fext,n+1+fext,n)}The left-hand side of the equation represents the evolution of an energy whose variation over the time step is equal to the variation of the external energy during the time step. Eq. (7) can be expressed as the balance equation between the sum of kinetic, internal and complementary energies and the external energy:(9)ΔWkin+ΔWint+ΔWcomp=ΔWextThe complementary energy, which can be viewed as an additional contribution due the time discretisation of the Newmark scheme in the continuous energy balance, disappears whenβ=(1/2)γ, that is, when adopting the average acceleration scheme. Nonetheless, it has to be taken into account in the case of the central difference scheme when β=0.In the case ofγ>1/2, an additional termWdisscontributes on the right side of Eq. (7), representing the algorithmic dissipation coming from the Newmark time integrator. In the following, a dissipative implicit time integrator will also be employed by selecting the Newmark parameters asγ=(1/2)−αandβ=(1/4)(1−α)2with the parameter α taking a negative value. It provides a suitable high-frequency dissipation but results in a drop to first-order accuracy when compared to the second-order accurate central difference and average acceleration schemes [22].When a domain is split into two subdomains (ΩAandΩBusing the average acceleration scheme and central difference scheme, respectively), the discrete energy balance equation becomes(10)ΔWinterface=ΔWkinA+ΔWintA+ΔWkinB+ΔWintB+ΔWcompB−ΔWextA−ΔWextB︸ΔWunbalancedwhere the unbalanced energy on the right side is equal to the interface energy artificially dissipated or created by the multi-time-step algorithms. The unbalanced energy is composed of the following terms: the terms related to the variation of the kinetic energies in the subdomainsΩAandΩBdeveloped as{ΔWkinA=12vmATMAvmA−12v0ATMAv0AΔWkinB=∑j=1m(12vjBTMBvjB−12vj−1BTMBvj−1B)the terms related to the variation of the external energies:{ΔWextA=12(fext,mA+fext,0A)T(umA−u0A)ΔWextB=∑j=1m[12(fext,jB+fext,j−1B)T(ujB−uj−1B)]the terms related to the strain energies (linear case):{ΔWintA=12(KAumA+KAu0A)T(umA−u0A)ΔWintB=∑j=1m[12(KBujB+KBuj−1B)T(ujB−uj−1B)]and the complementary energy for the explicit subdomainΩB:ΔWcompB=∑j=1mhB22(β−γ2)(ajBTMBajB−aj−1BTMBaj−1B)On the left-hand side of Eq. (10), the discrete interface energy over a macro-time step is expressed as(11)ΔWinterface=ΔWinterfaceA+ΔWinterfaceBwith the contributions from both subdomains given below as(12){ΔWinterfaceA=−12(LATΛm+LATΛ0)T(umA−u0A)ΔWinterfaceB=∑j=1m[−12(LBTΛj+LBTΛj−1)T(ujB−uj−1B)]From the global discrete energy balance equation in Eq. (10), it can be seen that the interface energy can be computed in two different ways: first, by computing the unbalanced energy between the sum of kinetic, internal and complementary energies and the external energy; second, by directly computing the interface energy in (11) and (12) depending on the Lagrange multipliers. Both ways will be used in the following numerical examples so as to thoroughly check the discrete energy balance in Eq. (10).Prakash and Hjelmstad [26] proposed a FETI-based method, which can be viewed as an extension of the GC method: the main difference lies in the velocity continuity, which is not enforced at the micro-time scale as for the GC method but at the macro-time scale. Enforcement of the velocity continuity at the macro-time scale results in a much more complex interface operator than the interface operator from the GC method. A slight variant of the PH method is proposed to derive an algorithm, denoted modified PH algorithm, which enables the computations on both subdomains to be conducted in a complete concurrent way. The flowchart of the modified PH method is given to highlight its enhanced parallel capabilities with respect to the GC method.The method proposed by Prakash and Hjelmstad maintains the zero value of the interface pseudo-energy in the sense of the energy method [26], contrary to the GC method for which the interface pseudo-energy is negative when different time steps are adopted [23]. The key difference from the GC method is the enforcement of the velocity continuity by Lagrange multipliers at the macro-time scale rather than at the micro-time scale. The discrete velocity continuity at the end of the macro-time step (at timetm) becomes(13)LAvmA+LBvmB=0In the same manner as the GC method, the system of equilibrium equations for both subdomains is decomposed into free and linked quantities as follows:•the free problem:(14){MAafree,mA+KAufree,mA=fext,mAMBafree,jB+KBufree,jB=fext,jB,j=1,…,mthe link problem:(15){MAalink,mA+KAulink,mA=−LATΛmMBalink,jB+KBulink,jB=−LBTΛj,j=1,…,mTo express the interface problem, the interpolated quantities in subdomainΩAare required at the micro-timetj, written above in a compact form as(16){wfree,jA=(1−jm)w0A+(jm)wfree,mAwlink,jA=(jm)wlink,mAwhere the quantities w denote for the displacements, velocities and accelerations in the subdomainΩA.Then the unbalanced free and unbalanced linked interface reactions are introduced as(17){Sj=LA(fext,jA−MAafree,jA−KAufree,jA)Tj=LA(−MAalink,jA−KAulink,jA)−ΛjThe above interface forces can be viewed as the disequilibrium of the free and link problem for the macro-subdomainΩA, expressed at the micro-time scale and projected on the interface, due to the linear assumption for the kinematic quantities given in Eq. (16).The two disequilibrium terms must counterbalance each other at every micro-timetjas(18)Tj+Sj=LA(fext,jA−MAajA−KAujA−LATΛj)=0Using the second equation of (16), the projected disequilibrium of the linked quantities can be expressed as(19)Tj=−(jm)LA(MAalink,mA+KAulink,mA)−ΛjIn addition, incorporating the expression (15) for subdomainΩAinto the above equation, the projected disequilibrium of the linked quantities can be written as(20)Tj=(jm)LA(LATΛm)−ΛjFinally, by using Eq. (18) at the micro-time, the following relationship is derived as(21)Λj=Sj+(jm)ΛmThe above relationship allows expressing the Lagrange multipliersΛjat the micro-time scale as a function of the unbalanced free interface reactionsSjand the Lagrange multipliersΛmat the end of the macro-time step. The unbalanced termSjis first computed by solving the system of free equilibrium equations. Then the relationship (21) is incorporated into the equilibrium equations for the subdomainΩBgiven in Eq. (3)(22)MBajB+KBujB=fext,jB−LBTSj−jmLBTΛm,j=1,…,mWithout entering into further detail that can be found in [26], it can be shown that the global system composed of the equilibrium equation in subdomainΩAand the m equilibrium equations in Eq. (22) can be solved in three stages by splitting the equations into free and link problems:•Solve the global free problem only accounting for the external forcesfext,jBand the unbalanced terms−LBTSjat each micro-timetj(from j=1 to j=m).Solve the interface problem derived from the velocity continuity given in (13) at the macro-time scale. As shown by the authors [26], the interface problem takes the form(23)HPHΛm=LAvfree,mA+LBvfree,mBOnce the Lagrange multipliersΛmat the macro-time scale have been obtained, the linked quantities are obtained by solving the link problem only accounting for the terms−(j/m)LBTΛmin Eq. (22).HPHin Eq. (23) denotes the interface operator at the macro-time scale and is obtained as follows:(24)HPH=LAymA+LBymBwhere the matricesymAandymBrelated to the two different time scales are obtained according to the flowchart given inTable 1. From Table 1, it can be verified that the expression of the interface operatorHGCin Eq. (6) is retrieved when the same time step is considered in both subdomains (taking j=m for the task (2B)): in this case, the PH method matches the GC method. In the case of different time steps, the interface operator of the PH method turns out to be much more time-consuming than the GC interface operator because it requires the iterative computing of the matricesyjBforj=1…m.It is interesting to note that the resolution of the free problem is staggered in the PH method because the unbalanced free interface forcesSjin the subdomain related to the macro-time step are required before proceeding to the computations in the subdomain related to the micro-time step (Eq. (22)). Consequently, free computations cannot be carried in a concurrent way in both subdomains. In contrast, it can be observed that link computations can be completely parallelised once the Lagrange multipliers are established at the macro-time scale. In the following, the unbalanced free interface forcesSjwill be expressed in a new form so as to make the free computations independent on both subdomains.It is useful to make the computation of the free problem in subdomainΩBcompletely independent from the free problem in subdomainΩA. For this purpose, the PH interpolation relationships in displacement and acceleration (given in Eq. (16)) are incorporated into the expression of the unbalanced free interface forcesSj(25)Sj=LA(fext,jA−MA((1−jm)a0A+jmafree,mA)−KA((1−jm)u0A+jmufree,mA))This can be rewritten as follows:(26)Sj=LA[fext,jA−(1−jm)fext,0A−jmfext,mA]…+LA[(1−jm)fext,0A−(1−jm)MAa0A−(1−jm)KAu0A]⋯+LA[(jm)fext,mA−(jm)MAafree,mA−(jm)KAufree,mA]In the above expression, the unbalanced free interface forces at the beginning of the macro-time stepS0and at the end of the macro-time stepSmcan be recognised, leading to the following expression:(27)Sj=LA[fext,jA−(1−jm)fext,0A−jmfext,mA]+(1−jm)S0+(jm)SmUsing Eq. (21), the unbalanced free interface forces at the beginning and at the end of the macro-time step are equal to:S0=Λ0andSm=0, respectively. Thus, the final expression of the unbalanced term at the micro-time becomes(28)Sj=LA[fext,jA−(1−jm)fext,0A−jmfext,mA]+(1−jm)Λ0This gives a clear advantage to the previous expression of the unbalanced free terms in Eq. (17) because the interpolation of free quantities obtained in the macro-subdomainΩAis no longer required: only Lagrange multipliers at the beginning of the macro-time step are required. Thus the free computations in subdomainΩBcan be carried out without waiting for the quantities from the free problem in subdomainΩA. It can be noted that a projected unbalanced external force appears in the final expression. In practice, since the external forces applied on the subdomainΩAare often assumed to be linear on the macro-time step, this contribution disappears.By employing the new expression of the unbalanced free interface forcesSj, a variant of the PH algorithm, called the modified PH algorithm, can be derived with enhanced parallel capabilities in comparison to the original PH algorithm. The flowchart is given inTable 2.The three stages to solve the kinematic quantities over a large time step are given in Table 2. The flowchart of the modified PH method is related to subdomainsΩAandΩB, assigned to the macro- and micro-time scales, respectively. Stage (2) is the initialisation of the subdomain computation by building the interface operator as described in Table 1.Contrary to the original PH algorithm, the new expression of the unbalanced free interface termSjin Eq. (28) enables the free computations in both subdomains to be carried out in a parallel setting (stages (4A) and (4B)). Once final velocities have been obtained in both subdomains, the dual variables, the Lagrange multipliers, are computed using a direct solver in stage (5). For a large-scale simulation, the direct solver could be impractical, advocating an iterative solver as proposed in the FETI method [19,20]. In stages (6A) and (6B), linked quantities can be derived in a parallel setting in both subdomains. The final quantities can be obtained by summing free and linked quantities and another macro-time step in stage (7) can be carried out.The purpose of this section is to present how explicit/implicit multi-time-step co-computation has been handled according to the GC and modified PH algorithms. Two external code coupling software programmes have been set up to make a first finite element code based on implicit time integration interact with a second finite element code based on explicit time integration.In the following, we focus on building the PH coupling software, developed in C language, whereas the GC coupling software, presented in previous papers [36,37], is only briefly reviewed. Two finite element codes are connected to the coupling software: CAST3M (implicit or explicit) and Europlexus (explicit). Communication between processors uses pipe technology, making it possible to send or receive data from one process to another. For the PH coupling software, the building of the interface operator on the macro-time step is detailed in an initialisation stage before the co-computation. In comparison to the GC interface operator, the PH building operator turns out to be more complex. Finally, the successive tasks in a given macro-time step managed by the coupling software during the explicit/implicit multi-time-step co-computation are detailed.First, the FE code Europlexus, a computer code being jointly developed since 1999 by Commissariat à l׳Énergie Atomique (CEA, CEN Saclay, DMT) and European Commission (Joint Research Centre, Ispra), uses an explicit algorithm for the discretisation in time (Europlexus [38]). It is best suited for fast dynamic phenomena taking into account the geometric non-linearities (large displacements, large rotations, large strains), and material non-linearities (plasticity, viscoplasticity, etc.). Second, the coupling software can operate with the FE code CAST3M, developed by the CEA (CEN Saclay, DMT). It provides a high-level programming language: the Gibiane language [39]. CAST3M code is well adapted to non-linear (geometric and material non-linearities) implicit dynamic analyses but can also be used for explicit analyses, by taking advantage of the flexibility of the Gibiane language for programming different time integration schemes.The coupling software was developed in C language. The role of the coupling software during the co-computation is essentially to manage the data exchanges with the connected FE codes and to solve the small-size interface problem expressed at the micro-time scale for the GC algorithm and at the macro-time scale for the modified PH algorithm.For parallel computing purposes, communication between computers classically uses standard protocols such as TCP/IP and MPI (Message-Passing-Interface). It enables parallel computing in a distributed architecture, associated with distributed memory, such as the heterogeneous parallel computing environment as discussed by Rama Mohan Rao [40,41].In this work, the first purpose was to implement co-computation involving several FE codes on a given computer. Consequently, in the case of a given computer with several processors sharing the same memory, the pipes in C language, also called FIFO (first-in-first-out), constitute an elegant method to pass data directly from one process to another without the overhead of writing the data to the disk and then reading the data from the disk. The pipe mechanism provides a location in a file system where two processes can exchange without actually using files.For each FE element code connected to the coupling software, for example the FE code dealing with the subdomainΩA, two pipes, associated with two locations in the file system, have to be created by the coupling software: the first one (FIFO1-SDA, reading pipe) reads data flow from the FE code SDA and the second one sends data flow to the FE code SDA (FIFO2-SDA sending pipe). Regarding the connected FE code SDA, the pipes must be opened on the opposite end before data can be passed. The pipes are opened in the sending direction to FIFO1-SDA and in the receiving direction from FIFO2-SDA, by targeting the locations in the file system of the previous two pipes.Communication by means of pipes is very fast and does not require memory space in comparison to classical writing and reading in classical files. For example, the FE code SDA can send data to the FIFO1-SDA pipe as if it were a file, but nothing happens until the coupling software tries to read from that pipe.Another important advantage in view of synchronising the computations between the FE codes and the coupling software is the blocking feature of the reading function through a pipe. For example, after invoking a reading function in the FE code SDA, the computation in subdomainΩAis stopped, waiting for data coming from the coupling software. Therefore, we can ensure that the coupled code is waiting for Lagrange multipliers coming from the coupling software.It is important to note that no direct communication between FE codes is allowed. The coupling software completely ensures the interface between the two FE codes. In addition, the co-computations can be conducted without interfering in the parallel computing strategies employed by both FE codes.The initialisation stage for the co-computation is devoted to building the interface operator as given in Table 1.Once the pipes needed for communication between FE codes have been created, denoted SDA and SDB, and the coupling software, denoted CPL, the coupling software requires data for building the interface operatorHGCandHPH. The coupling software does not know the typology (coordinates of nodes) in subdomains SDA and SDB: it only receives vectors and matrices associated with the degrees of freedom at the interface from both subdomains. This strategy is very effective but is limited to the case of matching meshes at the interface.The first step for building the interface operator H is to compute the following matrices related to the subdomainsΩAandΩB:(29){y¨mA=M˜A−1LATy¨mB=M˜B−1LBTwhere the dynamic operatorsM˜Aare of dimensionNA×NA, withNAthe number of degrees of freedom of subdomainΩAand the constraint matrixLAof dimensionNI×NA, withNIthe number of degrees of freedom of subdomainΩAbelonging to the interface.The matrices of dimensionNA×NI, related to the velocities, are then deduced from the previous matrices related to the accelerations:(30){ẏmA=γAhAy¨mAẏmB=γBhBy¨mBTo build the interface operator in the GC algorithm, the last step for completing the building of the interface operator H of dimensionNI×NI, is to send the matricesẏmAandẏmBfrom the FE codes to the coupling software and to compute the GC interface operator as follows:(31)HGC=LAẏmA+LBẏmBIt can be checked that the expression in Eq. (6) is retrieved.For the PH algorithm, an iterative computation of the interface operator is carried out by looping on the micro-subdomain SDB as given in Table 1. This iterative computation over the macro-time step is only handled by the FE code associated with the SDB. At each time step j, predictors in displacements and velocitiesyj−1Bpandẏj−1Bpare required, then the acceleration matrixy¨jBis obtained by solving a linear system involving the dynamic operator matrix of the subdomain SDB and finally the computation of the complete matricesẏjBby accounting for the correctors derived from the acceleration matrix.The last matrixẏmBis sent through the sending pipe of the FE code SDB and is read by the PH coupling software. Finally, the PH interface operatorHPHtakes the same form as the one given in Eq. (31).The computation time for constructing the PH interface operator clearly comprises overhead in terms of computation time in comparison to the GC method.Once the interface operator has been obtained, the co-computation is carried out between the actors of the co-computation (the coupling software and the two FE codes for subdomains SDA and SDB) over the macro-time stephA. The tasks undertaken in the GC algorithm are compared to those in the modified PH algorithm inFig. 1. The successive tasks and data exchanges in the case of the PH algorithm follow the modified PH algorithm, previously given in Table 2. Over a given macro-time step associated with the subdomainΩA, the following tasks for the PH algorithm are undertaken:•Computing the free quantities by the FE code SDA over the macro-time stephA(stage (4A) in Table 2) and sending the free velocitiesvfree,mAto the PH coupling code software (noted in the following PH-CPL for the sake of brevity).Simultaneously, solving the series of free problems in the subdomainΩBat the micro-time scale by the FE code SDB, by looping over the macro-time stephA, composed of m micro-time stephB(forj=1,…,m, stage (4B) in Table 2). The last free velocitiesvfree,mBin subdomainΩBare sent from the FE code SDB to the PH-CPL.The interface problem (stage (5) in Table 2) can be set up. The PH interface operator has been previously built in the PH-CPL. The right-hand sidebmis composed of the free velocities at the end of the macro-time step coming from both FE codes SDA and SDB.Solving the interface problem by computing the Lagrange multipliersΛmat the end of the macro-time step and sending the Lagrange multipliers to the FE codes SDA and SDB.Computing the linked quantities by the FE code SDA on the macro-time stephA(stage (6A) in Table 2) and updating the quantities (free+linked, stage (7)).Simultaneously, solving the series of linked problems in the subdomainΩBat the micro-time scale by the FE code SDB, by looping over the macro-time stephA, composed of m micro-time stephB(forj=1,…,m, stage (6B) in Table 2) and updating all the quantities at the micro-time scale (stage (7)).From Fig. 1, one can check that no data exchange occurs directly between the two FE codes. Apart from the initial building of the PH interface operator, the mission of the PH-CPL exclusively consists in receiving free velocities from the FE codes and sending back the computed Lagrange multipliers.Contrary to the building of the interface operator which is much more time-consuming in the PH algorithm, the requirements in terms of data exchanges in comparison to the GC algorithm are clearly alleviated, as highlighted in Fig. 1. Indeed, the GC coupling software has to communicate2mtimes over the macro-time step to solve the quantities in subdomainΩB: at each micro-time step, one direction for reading the free velocitiesvfree,jBfrom the FE code SDB, and one direction for sending back the computed Lagrange multipliersΛjat the fine time scale. In the PH algorithm, only2data exchanges are involved in the computation in the FE code SDB: the PH-CPL reads the last free velocitiesvfree,mBfrom the FE code SDB and sends back the computed Lagrange multipliersΛmat the end of the macro-time step. It can be concluded that the PH algorithm is far more efficient than the GC algorithm in terms of data exchanges.On the other hand, as underlined above, the advantage in terms of parallel capabilities of the modified PH algorithm with respect to the GC algorithm is underlined. Free computations in subdomainsΩAandΩBcan be conducted concurrently (stages (4A) and (4B) in Table 2). The interface problem is solved once all the free computations have been completed in both subdomains and then, once again, linked computations in the subdomainsΩAandΩBcan be conducted concurrently (stages (6A) and (6B) in Table 2). In contrast, all the tasks required in the GC algorithm are staggered: free computations in subdomainΩA, free computations in subdomainΩBat the micro-time scale, solving the interface problem at the micro-time scale, linked computations in subdomainΩBat the micro-time scale, loop over the macro-time step, and finally linked computations in subdomainΩA.The GC and PH modified algorithms are studied by investigating academic examples and engineering applications handled with the GC and PH coupling software.The first academic example is a single degree of freedom problem involving an oscillator with a mass and a stiffness split into two masses and two springs linked together through a Lagrange multiplier. The order of accuracy will be checked for the GC and PH modified algorithms as well as the interface energy generated at the interface.The second example is a beam composed of classical two-node beam finite elements, with two degrees of freedom per node. Finite element modelling is partitioned into two equal length subdomains, the first one handled with an average acceleration scheme and the second one with a central difference scheme. The interface energy induced by the multi-time-step coupling algorithms investigated will be carefully examined for a fixed time step ratio between subdomains and for a decreasing size of the macro-time step. Coupling between a dissipative Newmark scheme with the central difference scheme is also investigated. These two academic examples are sufficiently simple to be implemented in a Matlab software environment.The third example is a reinforced concrete frame structure of engineering interest in the field of earthquake-resistant construction. The structure has also been studied under blast loading, with or without subdomain partitioning in the case of non-linear material behaviour for the concrete and the reinforcement using the GC algorithm [37]. Under the assumption of linear elastic behaviour for the constitutive materials, these co-computations are carried out using both coupling software programmes (GC-CPL and PH-CPL) so as to highlight the conserving energy features of the modified PH algorithm in comparison to the GC algorithm. The CAST3M code is used for both implicit and explicit partitions.Finally, the last example consists of a flat plane panel used as a case study within the European research program MAAXIMUS (More Affordable Aircraft through eXtended, Integrated and Mature nUmerical Sizing). The panel is assumed to be impacted on a localised area handled with an explicit time integrator (central difference scheme) with a fine time step, whereas the remainder of the structure is integrated in time according to an implicit scheme (average acceleration scheme) with a large time step. Both coupling software programmes (GC-CPL and PH-CPL) are employed, connecting two different FE codes. The following computations and co-computations are conducted:•Full-explicit computation with the CAST3M code, providing the reference results.Multi-time-step explicit-implicit co-computations with the CAST3M code for both partitions.Multi-time-step explicit-implicit co-computations with the CAST3M code for the implicit partition and Europlexus code for the explicit partition.To check the accuracy order of the modified PH algorithm, a split single degree of freedom (SDOF) mass–spring system is studied: an undamped oscillator is artificially decomposed into two subdomains, with different time steps, and linked together with a Lagrange multiplier. The split SDOF mass–spring system is illustrated inFig. 2.The equilibrium equation, continuous in time, of the undamped oscillator characterised by the angular frequency ω, under free vibrations is(32)a(t)+ω2u(t)=0The oscillator angular frequency is defined by the mass m and the stiffness k as:ω=k/m. The initial conditions areu(t=0)=u0,v(t=0)=v0. In the following, the analytical solution of the undamped oscillator under free vibration will be used as reference results so as to assess the accuracy order of the multi-time-step algorithms.The mass and the stiffness are split as follows:m=mA+mBandk=kA+kB. The following values for the split system were adopted:mA=1×10−6,kA=1×104,mB=1×10−6,kB=1×104. An initial displacement problem is considered:u0=1,v0=0. The macro-subdomainΩAwith a large time stepΔtAis integrated in time using the average acceleration scheme (γA=1/2,βA=1/4), whereas the micro-subdomainΩBwith a fine time stepΔtBis integrated using the central difference scheme (γB=1/2,βB=0). The time step ratio between the two time steps is noted m and is set to 100. The final time of the free vibration simulation is:Tf=2×10−4s.First, the discrete energy balance is checked for a macro-time stepΔtAequal to1×10−6sfor the multi-time-step GC and modified PH algorithms inFig. 3: the total energy corresponds to the sum of the internal, kinetic and complementary energies, whereas the unbalanced energy is the difference between the total energy and the initial elastic energy stored in the oscillator. The spurious dissipated energy is clearly highlighted in the case of the GC algorithm, reaching 14% of the initial elastic energy at the end of the simulation. This drawback is not observed with the modified PH algorithm.The convergence rate for the multi-time-step algorithms (GC and modified PH) is studied by considering a fixed time step ratio m equal to 100 and varying macro-time stepΔtA. We define the classically used reduced angular frequencyΩAas equal to the product between the angular frequency and the macro-time step (ΩA=ωAΔtA). The reduced angular frequencies investigated for the subdomain SDA range from10−2sto10−1s, corresponding to macro-time steps ranging from10−7sto10−6s. For each macro-time step size, the error in terms of displacements at the end of the computation between numerical results and reference results (analytical results) is computed as follows:(33)erru=|ucomputed(t1)−ureference(t1)ureference(t1)|wheret1is equal to the final timeTf.In the case of the multi-time-step GC algorithm, the errors in terms of displacements, velocities and accelerations are plotted versus the reduced angular frequency of the subdomain SDA inFig. 4, along with slopes corresponding to the accuracy order equal to 1 or 2. It is shown that the convergence rate is reduced by one order when different time step sizes are involved, as already highlighted in Mahjoubi et al. [42]. In the case of the multi-time-step modified PH algorithm, the convergence rate remains equal to 2 for multi-time scales as shown inFig. 5. Like the PH algorithm, the modified PH method algorithm achieves a second order of accuracy, corresponding to the minimum of the orders of accuracy among the time integrators involved in the partitioned simulation. It has been checked that results obtained from the modified PH algorithm exactly match the results from the PH algorithm.Furthermore, it is useful to compute the spurious interface energy when decreasing the size of the macro-time step, with a fixed time step ratio m equal to 100. For both the GC and modified PH algorithms, the interface energy error is computed as follows:(34)errWinterface=|Winterface|max(|WintA+B|,|WkinA+B|,|WextA+B|)This relative energy error due to the dissipated energy at the interface is plotted versus the reduced angular frequency for the coupling GC and modified PH algorithms inFig. 6. In the case of the GC algorithm, it should be noted that the error in the energy balance linearly decreases as a function of the reduced angular frequency, varying from 14% to 1% for a macro-time step decreasing from10−6sto10−7s.In the case of the modified PH algorithm, it can be highlighted that the relative energy error is very weak (almost negligible) but is not exactly equal to zero, contrary to the pseudo-energy at the interface, which is equal to zero, as proved by the authors using the energy method. This small error in the classical norm of the energy is equal to less than10−6for a reduced angular frequency of10−1(macro-time step of10−6s) and decreases to about10−10for a reduced angular frequency of10−2(macro-time step of10−7s). This observation will be confirmed in the following example.The case of a clamped/free beam is considered, subjected to a lateral load at its free end, as illustrated inFig. 7; the force increases in a very short time durationτ=0.1msfrom the zero value to a constant valueFmax=21N.The length of the beam isL=0.4mwith a circular cross section of radiusR=1cm. The behaviour law is assumed to be linear with the following material parameters: Young׳s modulusE=200GPa, mass densityρ=7800kg/m3and Poisson׳s ratioν=0.3. The beam is modelled with two-node beam elements, two degrees of freedom per node, namely lateral displacement and rotation.The beam is decomposed into two equal-length subdomains, the first one (at the clamped end) uses an implicit time scheme (average acceleration schemeγA=1/2,βA=1/4) with a macro-time stephAand the second one (at the free end) is handled by an explicit time scheme (central difference schemeγB=1/2,βB=0) with a fine time stepΔtB. In this case, the interface is very simple, corresponding to two shared nodes (same coordinates), one belonging to the macro-subdomain, and the other to the micro-subdomain. Since each node has two degrees of freedom, the interface operator H involved in the subdomain computation has a dimension of4×4. The purpose of this example is to scrutinise the artificial energy at the interface induced by the GC and modified PH methods for this simple finite element structure split into two subdomains. A time step ratiom=100is adopted. The simulation is performed over a total durationTf=1s, corresponding to a large number of response cycles according to the fundamental frequency of the beam (approximately 85 cycles), in order to exacerbate the artificial interface energy in the time induced by the coupling algorithms. A micro-time stephB=1×10−6s, satisfying the CFL condition, is adopted in the following. Thus, with a time step ratio of 100, the corresponding macro-time step ishA=1×10−4s.InFig. 8, the lateral top displacements predicted by the GC and modified PH algorithms are plotted versus time: both predictions match very well at the beginning of the vibration (top graph) but not at the end of the simulation, where it can be seen (bottom graph) that the amplitude of response cycles predicted by the GC algorithm are damped in comparison to the response cycles obtained by the modified PH algorithm. The interface energy versus time for both algorithms, computed from the unbalanced energy or directly from the Lagrange multipliers, is shown inFig. 9. The two ways for computing the spurious interface energy (WunbalancedorWinterfacedefined in Section 2.2) coming from the two coupling algorithms are consistent. It can also be seen that the GC algorithm dissipates some energy at the interface; the dissipated energy regularly increases in absolute value over time, reaching an interface energy error of 6%, as defined in Eq. (34). In contrast, the interface energy induced by the modified PH algorithm is not strictly equal to zero, as previously observed when using split oscillator, but remains bounded, with an interface energy error less than 1.4%.The case of an implicit dissipative α-Newmark scheme is considered by choosing the parameterα=−0.3. The resulting time integrator is known to provide high-frequency dissipation with an alteration of the low frequencies as well, indicated by the loss of one order of accuracy with respect to the previously investigated time integrators. This dissipative scheme is coupled with a central difference scheme in order to assess the effect of GC and modified PH algorithms in the case of a dissipative time integrator. It can be seen inFig. 10 that, once again, the GC algorithm damps the response more in terms of displacement than the modified PH algorithm. This observation is confirmed by the bottom graph in Fig. 10 in which the unbalanced energy coming from the two coupling methods are compared: dissipated energy emerges from both coupling algorithms, including both the dissipated energy in subdomain SDA assigned to the dissipative Newmark integrator (Wdissin Section 2.2) and the artificial interface energy stemming from the coupling methods (Winterfacein Section 2.2); the unbalanced energy coming from the modified PH algorithm remains less than that due to the GC algorithm. It can be concluded that the modified PH algorithm remains more advantageous from the energy point of view than the GC algorithm in case of dissipative time integrators.Keeping the same time step ratio between the subdomainsm=100, the interface energy error is investigated when reducing the size of the macro-time stephAfrom10−4sto10−5sin the case of non-dissipative Newmark integrators (constant average acceleration with central difference schemes). The interface energy errors coming from the GC and modified PH algorithms are plotted versus the size of the macro-time step inFig. 11. The interface energy decreases as the macro-time step decreases. In the case of the modified PH algorithm, it can be highlighted that the relative energy error is clearly lower that in the case of the GC algorithm. In addition, it can be noted that the comparison is made for a large but limited duration of 1s. Fig. 9 already underlines that the dissipated energy at the interface induced by the GC algorithm regularly increases, whereas the interface energy for the modified PH algorithm remains bounded. Consequently, the longer the time duration, the larger the discrepancy is between the GC and modified PH algorithm in favour of the modified PH algorithm. The interface energy displayed with the modified PH algorithm can be viewed as some dynamic fluctuations which have no effect on the stability and the convergence rate of the multi-time-step scheme. In contrast, the GC algorithm produces spurious energy dissipated at the interface, which does not entail stability problems but reduces the convergence rate by one order of the magnitude.The case of a non-earthquake-resistant reinforced structure under blast loading is considered. The model of the structure has been presented in a previous article [37]. Briefly, the model of the frame structure is composed of multi-fibre Timoshenko beam elements, whose cross section is discretised into material fibres for concrete and longitudinal reinforcement. Non-linear computations and multi-time-step explicit/implicit co-computations carried out demonstrated the relevance of the partitioning approach using the GC-CPL coupling software with the CAST3M code for both implicit and explicit partitions [37]. Here, the purpose is to assess the advantages of the PH-CPL coupling software in terms of energy dissipation at the interface in comparison to the GC-CPL coupling software. InFig. 12, the complete mesh of the structure is illustrated (3D visualisation for exhibiting the cross section of the beam elements) as well as the partitioning assumed in the following co-computations: beam elements for columns and column beam joints are gathered into the explicit partition, whereas the remaining elements of the mesh (the FE beams without the joints) are included in the implicit partition with the macro-time step. Linear elastic behaviour is assumed for all the concrete and steel fibres with Young׳s modulus equal to 25,000MPa and 200,000MPa, respectively. Dead and live loads are taken into account as well as the blast loads applied to the front face of the structure. Details of the simulation can be found in [37].Co-computations are carried out with both coupling software programmes, the GC-CPL and the PH-CPL, by making two CAST3M processes interact, dealing with either the implicit or the explicit partition. The time step ratio adopted between the macro-time step and the micro-time step is equal to 40. The reference results are provided by a fully explicit computation using the CAST3M code.Fig. 13 shows the comparison of the co-computations investigated and the reference results in terms of displacements and velocities in the direction of the blast load (Y-axis) at the top of the structure׳s C5 column. The almost perfect agreement between the results is highlighted.The unbalanced energy (sum of kinetic, internal and complementary energies minus the external energy) is checked for both coupling approaches. FromFig. 14, it can be seen that the dissipated energy created at the interface by the GC algorithm cannot be neglected, whereas only very limited energy dissipation at the interface can be observed in the case of the modified PH algorithm.A composite flat plane panel is considered in this last example. It has been proposed as a numerical case study in the framework of the MAAXIMUS European research program. The mesh of the composite plate panel is shown inFig. 15: it is composed of the skin, six stiffeners meshed with multi-layer shell elements and three frames meshed with classical (one-layer) shell elements. The distance between stiffeners is equal to 125.82mm and the distance between frames is equal to 584.20mm.Geometric and material details of the composite skin, the composite stiffener and the frame are given inFig. 16. The skin dimensions are:L=1300mmandH=792mm. The total thickness of the skin is equal to 1.625mm. The skin is composed of 13 layers. Each layer has a thickness equal to 0.125mm and is associated with an elastic orthotropic behaviour law characterised by the following material parameters: the principal axis of the orthotropic law in the shell planeθ1, Young׳s modulus relative to the principal axisE1, Young׳s modulus according to the perpendicular axis (in the shell plane)E2, Poisson׳s ratio in the shell planeν12, the shear modulus in the shell planeG12, and the shear moduli in the shell thickness planesG13andG23. The elastic parameters adopted were:E1=157GPa,E2=8.5GPa,ν12=0.35,G12=4.2GPa,G13=4.2GPaandG23=4.2GPa. The principal axis is dependent on each orthotropic layer, varying with 45° steps from layer to layer as illustrated in Fig. 16. In addition, the same material properties are assumed for the stiffeners, composed of nine orthotropic 0.125-mm-thick layers.The frames are assumed to be composed of isotropic material with Young׳s modulus E equal to 72GPa and Poisson׳s ratioνequal to 0.33. The mass density of the composite material for the skin and the stiffeners is equal to1580kg/m3and the mass density of the isotropic material for the frames is equal to2700kg/m3.The flat plane panel is assumed to be clamped along its entire contour. The partitioning is shown inFig. 17. The load area, located at the top of the central frame, is included in the subdomain SDB, which is integrated in time according to an explicit time integration scheme (central difference scheme) with a fine time stephBequal to10−7s. The fine time step fulfills the CFL condition. The remaining mesh is handled with an implicit time integration scheme (average acceleration scheme) with a large time stephA=mhB, m being the time step ratio between the two subdomains. In the following, a time step ratio of 100 has been adopted for the co-simulations.The force increases from the zero value to 1000N over a short duration equal to10−4s, and then remains constant. The computations are carried out for a total duration equal to10−2s. Reference results are obtained by fully explicit computation with the fine time step. Again, the CAST3M code is used for the fully explicit computation. For the multi-time-step co-simulation, the external coupling software based on the GC and modified PH algorithms is employed, interacting in time with two CAST3M processes for the two subdomains. A last co-computation is added: it concerns the external coupling software GC-CPL operating with the CAST3M code for the implicit subdomain and the Europlexus code for the explicit subdomain.InFig. 18, vertical displacements and velocities from the fully explicit computation and the explicit/implicit multi-time-step co-computations are plotted at point P, previously displayed in Fig. 17. It can be seen that the multi-time-step co-simulations very accurately predict the displacements and velocities obtained by the fully explicit computation. The discrepancies observed for the co-simulation GC-CPL with the CAST3M and Europlexus codes can be explained by the different type of shell element adopted in the Europlexus code in comparison to the shell element adopted in the CAST3M code. The deformed meshes along with the unixial strain isovalues in the Y-direction (stiffener direction) are shown inFig. 19 for the last time of the co-computation using the PH-CPL coupling software. It is visually confirmed that the two subdomains interact correctly between each other during the co-computation.The last point concerns the verification of the energy-preserving property of the multi-time-step coupling modified PH algorithm. At the top ofFig. 20, the kinetic, internal and external energies are plotted versus time for the implicit subdomain SDA. External energy is equal to zero because the loads are only applied to the central area of the explicit subdomain. Separate unbalanced energy for both subdomains is added to the two graphs in Fig. 20; the unbalanced energy, positive in subdomain SDA due to the zero external energy, must be balanced with the unbalanced negative energy in subdomain SDB. This is confirmed byFig. 21.Finally, the computation time required for the fully explicit computation and the explicit/implicit multi-time-step computation are compared. The fully explicit computation requires 23,694s of CPU time. In the case of the explicit/implicit multi-time-step co-computation, the computation on the explicit subdomain SDB requires 168s, whereas the computation on the implicit subdomain SDA requires 966s. Consequently, the computation time has been reduced by a factor of approximately 20 in comparison to the fully explicit computation. It is worth noting that the computation gain provided by the multi-time-step co-simulation approach is mainly dependent on the number of degrees of freedom of the explicit subdomain with the fine time step. Here, the highly reduced explicit subdomain with respect to the implicit subdomain with the large time step, enables a large computation time gain to be achieved.

@&#CONCLUSIONS@&#
