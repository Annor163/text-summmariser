@&#MAIN-TITLE@&#
Minimax regret 1-sink location problem with accessibility in dynamic general networks

@&#HIGHLIGHTS@&#
Considered the minimax regret 1-sink location problem with accessibility in dynamic general networks.Computed the values of T(opt(s), s) in O(m2n3) time.Got the minimax regret sink x* in O(mn4) time after known the values of T(opt(s), s).

@&#KEYPHRASES@&#
Accessibility,Algorithm,General network,Location,Minimax regret,

@&#ABSTRACT@&#
In this study, we consider the minimax regret 1-sink location problem with accessibility, where all of the weights should always evacuate to the nearest sink point along the shortest path in a dynamic general network with positive edge lengths and uniform edge capacity. LetG=(V,E)be an undirected connected simple graph with n vertices and m edges. Each vertex has a weight that is not known exactly but the interval to which it belongs is given. A particular assignment of a weight to each vertex is called a scenario. The problem requires that a point x should be found as the sink on the graph and all the weights evacuate to x such that the maximum regret for all possible scenarios is minimized. We present an O(m2n3) time algorithm to solve this problem.

@&#INTRODUCTION@&#
The minimax regret sink location problem was first proposed by Cheng et al. (2013) in the context of the Tohuku-Pacific Ocean Earthquake, which occurred in Japan on March 11, 2011. In general, the problem can be described as follows. We are given an undirected connected graphG=(V,E),|V|=nand|E|=m. Each vertex is associated with a vertex weight that is not known exactly but the interval to which it belongs is known. Each edge is associated with an edge length and an edge capacity. The edge length is the distance between the two endpoints of the edge and the edge capacity is the upper boundary for the number of weights that enter an edge per unit time. The objective is to find k(k ≥ 1) sink points on G such that all the weights are sent to one of the k sinks and the maximum regret of the evacuation time is minimized. In this case, the evacuation time usually refers to the maximum time, i.e., the time required by the last unit weight to complete evacuation.Cheng et al. (2013) considered the minimax regret 1-sink location problem in a dynamic path network with a uniform edge capacity, where an O(nlog2n) time algorithm was proposed for the problem. Later, Wang (2014) and Higashikawa et al. (2015) proposed two improved algorithms to address the problem, which each had a time complexity of O(nlog n). It is noteworthy that the algorithm proposed by Wang (2014) further reduced the space complexity degree of previous algorithms. Li, Xu, and Ni (2014) considered the minimax regret vertex 2-sink location problem in dynamic path networks with a uniform edge capacity, where the sinks are limited to being located on the vertex of the path, and an O(n3log n) time algorithm was proposed. For a general k, Ni, Xu, and Dong (2014) proposed anO(n1+k(logn)1+logk)time algorithm, whereas Arumugam, Augustine, Golin, and Strikanthan (2014) proposed two algorithms for this problem. The first algorithm proposed by Arumugam et al. (2014) is better for small values of k, where it runs in O(kn2(log n)k), whereas the second algorithm is better for larger values of k, where it runs in O(kn3log n). It is noteworthy that Arumugam et al.’s algorithm is the first polynomial time algorithm for this problem. For other networks, Higashikawa, Golin, and Katoh (2014a) considered the minimax regret 1-sink location problem in dynamic tree networks with a uniform edge capacity and they proposed an O(n2log2n) time algorithm. For the minimax regret 1-sink location problem in dynamic cycle networks with a uniform edge capacity, Xu and Li (2015) proposed an O(n3log n) time algorithm. Bhattacharya and Kameda (2015) proposed several algorithms which improved the previous best algorithms for several minimax regret sink location problems, including an O(n) time algorithm for the minimax regret 1-sink location problem in a dynamic path network, an O(nlog n4) time algorithm for the minimax regret 2-sink location problem in a dynamic path network, and an O(nlog n) time algorithm for the minimax regret 1-sink location problem in a dynamic tree network.When the exact weight of each vertex is known, the objective of the sink location problem is to find the sink location in the given network that minimizes the evacuation time. For path networks, Higashikawa, Golin, and Katoh (2014b) solved the k-sink location problem in dynamic path networks with a uniform edge capacity in O(knlog n) time for a general k and proposed an improved algorithm with a time complexity of O(kn) (Higashikawa et al., 2014b). Tree networks have been addressed in several studies. Mamada, Makino, and Fujishige (2002) considered the vertex 1-sink location problem in a dynamic tree network with general capacities while an O(nlog2n) time algorithm for this problem was proposed by Mamada, Uno, Makino, and Fujishige (2006). Higashikawa et al. (2014a) described an O(nlog n) time algorithm for the problem when the capacities are uniform. In addition, it should be mentioned that the studies of Higashikawa et al. (2014b) and Higashikawa, Golin, and Katoh (2014c) also considered a situation where the evacuation time was denoted as the total time instead of the maximum time.If there is only one sink and the route to the sink is unique for any vertex, it is obvious that the weights on a vertex will evacuate to the sink along that unique route. If there is more than one sink or the route from a vertex to a sink is not unique, then we need to make a decision such that the evacuation solution (which includes the objective sink and the corresponding evacuation path) is defined for every vertex. In previous related studies (Arumugam et al., 2014; Bhattacharya & Kameda, 2015; Higashikawa et al., 2014b; 2014c; Li et al., 2014; Ni et al., 2014; Xu & Li, 2015), the division point is set to the optimal value, i.e., the weight of any vertex will evacuate to the sink(s) with the optimal evacuation solution, which allows the weights to evacuate to more distant sinks rather than the nearest and/or complete evacuation along a path that is not the shortest path. It is assumed that the weights on a vertex should evacuate to the same sink and we also retain this assumption in this paper. Thus, the optimal evacuation solution is the solution with the minimum evacuation time for the weights between any two neighboring sink points. However, when an emergency, such as an earthquake, occurs, people do not behave as expected during the evacuation process and they will usually evacuate to the nearest shelter via the shortest path (known as the intuitive evacuation solution) rather than evacuating according to the optimal evacuation solution. Indeed, the optimal evacuation solution might not be known when an emergency occurs.Thus, in this paper, we consider the minimax regret sink location problem with accessibility where all of the weights are assumed to evacuate to the nearest sink via the shortest path. We consider this problem in a general networkG=(V,E)where the number of sink points is 1. Throughout this study, we assume that each edge has a uniform edge capacity. As usual, and without loss of generality, we also assume that the undirected connected graph G contains no loops or multiple edges, i.e., the graph G is an undirected connected simple graph. Given a dynamic general network G, the weight of every vertex is known as an interval. A specific assignment of a weight to each vertex is called a scenario. The problem involves finding a point x on G as the sink point such that the maximum regret of the evacuation time should be as small as possible. The remainder of this paper is organized as follows. In Section 2, we provide some useful definitions and properties. In Section 3, we present an O(m2n3) time algorithm for the minimax regret 1-sink location problem in a dynamic general network, and we present our conclusions in Section 4.LetG=(V,E)be an undirected connected simple graph whereV={v1,…,vn}. A positive number l(e) (called the length of e) and a positive number c (called the uniform edge capacity) are associated with each of the|E|=medges, and an intervalW(vi)=[wi̲,wi¯]with0<wi̲≤wi¯(called the weight interval of vi) is associated with each of the|V|=nvertices. LetSdenote the Cartesian product of all W(vi) for 1 ≤ i ≤ n. When a scenarios∈Sis given, we use the notation wi(s) to denote the weight of each vertex vi∈ V under the scenario s. Let τ be a constant that represents the time required to traverse the unit distance of each unit weight. We also use a notation G to denote the set of all points on G. The distance between any two points x and y on G, which is represented by dx, y(note thatdy,x=dx,y), is the length of the shortest path on G from x to y. We assume that the distance between any two vertices is known. In fact, the distance matrix (which gives the distance between any two vertices) of a general graph can be obtained in O(n3) time with the Floyd–Warshall algorithm. Of course, there are algorithms which are better than O(n3) time and for more details please refer to Williams (2014). Since the time required to determine the distance matrix has no effect on the time complexity of our algorithm, in this paper we just assume the distance matrix is known. Because G is connected,m≥n−1holds. Whenm=n−1,G is a tree, and thus we assume that m ≥ n in this study.Next, we define the time required for the evacuation of all weights to x ∈ G unders∈S,i.e., T(x, s). Because there is only one sink and all of the weights are assumed to complete their evacuation along the shortest path, then the evacuation solution for every vertex is provided as long as the sink point is given. In other words, with a given sink point x, the general graph G can be viewed as a tree graph G(x) rooted at x, based on which the evacuation paths for all of the vertices are represented. For any point x, in G(x) we define the vertices adjacent to x as neighbors of x, which are denoted as Nx. Thus, for a vertex vi,Nvi={vj∣e=(vi,vj)existsinG(x)},and for a point x ∈ e, if we assume thate=(vp,vq),x ≠ vp, and x ≠ vq, thenNx={vp,vq}. Note that when we state thatx∈e=(vp,vq),we always mean the points on e except for the two endpoints vpand vq, unless indicated otherwise. With a given sink x, for any vertex vi∈ G, the evacuation path of vimust contain the vertex vj∈ Nx. Let G(x, vi) be a subtree of G(x) rooted at viandTvi(x,s)is the evacuation time required for all of the weights on G(x, vi) to complete their evacuation to x under scenario s. Then, we have(1)T(x,s)=maxvi∈Nx{Tvi(x,s)}.For example, as shown in Fig. 1,T(vp,s)=max{Tv1(vp,s),Tv2(vp,s),Tv3(vp,s),Tvq(vp,s)}. Ifx∈e=(vp,vq),thenT(x,s)=max{Tvp(x,s),Tvq(x,s)}. We assume that vi∈ Nx,Tvi(x,s)can be obtained by transiting G(x, vi) to a path (Kamiyama, Katoh, & Takizawa, 2006). Suppose that n′ vertices in G(x, vi) are denoted asu1,u2,…,un′(=vi)such thatdx,ui≤dx,ui−1for 2 ≤ i ≤ n′. Kamiyama et al. (2006) proved thatTvi(x,s)does not change if x and uifor 1 ≤ i ≤ n′ are relocated on a line with the same capacity such thatdx,uiremains unchanged. Thus,Tvi(x,s)can be represented as follows:(2)Tvi(x,s)=max1≤j≤n′{τ·dx,uj+∑1≤l≤jwl(s)c}.We assume that the weights on the sink point can complete their evacuation instantly.We denote xopt(s) as the optimum sink location under s and the corresponding evacuation time is T(xopt(s), s). We define the regret of x under s asR(x,s)=T(x,s)−T(xopt(s),s).Moreover, we also define the maximum regret of x asRmax(x)=maxs∈SR(x,s).A scenario s is called a worst case scenario for the location x ifRmax(x)=R(x,s). Our goal is to find a point x* ∈ G called the minimax regret sink that minimizes Rmax(x).First, we discuss the worst case scenarios. With a given sink point x and a given scenario s, suppose thatT(x,s)=maxvi∈Nx{Tvi(x,s)}=Tvi(x,s). For the vertices in G(x, vj), where vj∈ Nxand j ≠ i, decreasing the weights on these vertices has no effect on T(x, s). In addition, for the vertices in G(x, vi), decreasing the weights on these vertices will decrease at most(wi¯−wi̲)/c. Taking Fig. 1 as an example,x=vp. Suppose thatRmax(x)=R(x,s*),i.e., the worst case scenario of x is s*. Without loss of generality, assume thatT(x,s*)=max{Tv1(x,s*),Tv2(x,s*),Tv3(x,s*),Tvq(x,s*)}=Tvq(x,s*). Assume that there are n′ vertices in G(x, vq), which are denoted asu1,u2,…,un′=(vq)such thatdx,ui≤dx,ui−1for 2 ≤ i ≤ n′. Suppose thatTvq(x,s*)=max1≤j≤n′{τ·dx,uj+∑1≤l≤jwl(s*)c}=τ·dx,uj+∑1≤l≤jwl(s*)cholds. For the vertices {ui∣1 ≤ i ≤ j}, a decrease in the weight of uiwill lead to a decrease of at most(wi¯−wi̲)/cin T(xopt(s*), s*) while T(x, s*) will result in a decrease of exactly(wi¯−wi̲)/c. Thus, R(x, s*) will decrease or not change if we decrease the weight on any vertex ui(1 ≤ i ≤ j). For the vertex vl∈ {V∖{ui∣1 ≤ i ≤ j}}, a decrease in the weight of vlwill lead to a decrease of at most(wl¯−wl̲)/cin T(xopt(s*), s*) whereas T(x, s*) will not change. Thus, R(x, s*) will increase or remain unchanged if the weight decreases on any vertex vl∈ {V∖{ui∣1 ≤ i ≤ j}}. Therefore, for the vertices {ui∣1 ≤ i ≤ j},wi(s*)=wi¯,and for the vertices vl∈ {V∖{ui∣1 ≤ i ≤ j}},wl(s*)=wl̲. Under this scenario, R(x, s*) has the maximum value and we refer to the scenario with this structure as the dominant scenario of x. Generally, with a given general dynamic networksG=(V,E)and a given sink point x, for any subtree G(x, vi) of G(x) where vi∈ Nx, relocate the vertices of G(x, vi) on a line P with the same capacity such thatdx,vjwhere vj∈ G(x, vi) remain the same, we denote the reordered vertices of G(x, vi) on P asu1,u2,…,un′(=vi)from left to right such thatdx,ui≤dx,ui−1for 2 ≤ i ≤ n′. If a scenario s satisfies that for some vertex ulwith 1 ≤ l ≤ n′,wf(s)=wf¯for 1 ≤ f < l andwf(s)=wf̲for l ≤ f ≤ n′ hold, andwj(s)=wj̲for all vj∉G(x, vi) hold, we define this scenario s as a dominant scenarios of x. With a given sink point x, we denote all the dominant scenarios of x asDx. It is not difficult to determine thatDxcomprises O(n) scenarios. The following lemma is provided.Lemma 1For any sink point x ∈ G, there is a dominant scenarios*∈Dxsuch that R(x, s*) ≥ R(x, s) for anys∈S.Lemma 1 implies that for any x ∈ G, the worst case scenario of x must be inDx. DefineDas the set of all the dominant scenarios we need to consider. Since the sink point x can be any point of G, we haveD={⋂Dx∣x∈G}.We know that G(x) may be different for various values of x. To obtain the evacuation solution for every vertex, we must determine G(x) for any x. If we consider an edgee=(vp,vq)with a given s, where the sink point x moves along the edge e from vpto vq, then how will G(x) and T(x, s) change? Note that for any vertex vi∈ V, the shortest path to x must be one of the following paths:(1)P1, a path from vito x that crosses vp;P2, a path from vito x that crosses vq.In the following, we embed the edge e, including the endpoints, on a real line such that vp< vq. For convenience, we abuse the notation vito denote the coordinates of vertex viand abuse the notation x to denote the coordinates of point x. We designate the point x′ ∈ e as a sensitive point if at least one vertex viexists such that the evacuation path for viis different when x ∈ (vp, x′] and x ∈ (x′, vq). Letgi=|dvi,vp−dvi,vq|. Ifgi>dvp,vq,the evacuation path of viwill not change when x moves along the edge e, i.e., no sensitive point exists on e. Ifgi=0,viwill select P1 whenx∈(vp,vp+vq2]and P2 whenx∈(vp+vq2,vq),i.e.,vp+vq2is a sensitive point. If0<gi≤dvp,vq,whendvi,vp≤dvi,vq,viwill select P1 whenx∈(vp,vp+dvp,vq+gi2]and P2 whenx∈(vp+dvp,vq+gi2,vq),i.e.,(vp+dvp,vq+gi2)is a sensitive point. Ifdvi,vp>dvi,vq,viwill select P1 whenx∈(vp,vp+dvp,vq−gi2]and P2 whenx∈(vp+dvp,vq−gi2,vq),i.e.,(vp+dvp,vq−gi2)is a sensitive point. There are at most(n−2)sensitive points on any edge. Thus, we obtain the following lemma in a straightforward manner.Lemma 2With a given edge e, all of the sensitive points on e denoted as Xe, which contain O(n) elements, can be obtained in O(n) time.With a given edgee=(vp,vq),we embed the edge e, including the endpoints, on a real line such that vp< vq. We assume thatXe={x1,x2,…,xt},wherex0=vp<x1<x2<···<xt<vq=xt+1. Based on the definition of Xe, G(x) is the same forx∈(xi,xi+1](0 ≤ i ≤ t). Note that wheni=t,the interval should be open, i.e., (xt, vq). Thus, for anyx∈(xi,xi+1],Dx=Dxi+1is the same. Note that in the following discussion, we always embed the edgee=(vp,vq)on a real line such that vp< vq. Let ϵ be a positive number that is infinitely close to zero. For any x ∈ e, we definex^+=x+ϵandx^−=x−ϵ. In particular, whenx=vp,vp^−is meaningless and onlyvp^+is defined, and whenx=vq,vq^+is meaningless and onlyvq^−is defined. So, for the last interval (xt, vq), we haveDx=Dvq^−. For a vertex vi, although vimay be incident to multiple edges,vi^+andvi^−are unique and clear when we focus on a particular edge. For convenience, letV^+={vi^+∣vi∈G}andV^−={vi^−∣vi∈G}. It was necessary to state that the notations ofvi^+andvi^−are defined only when the corresponding edge is given.V^+andV^−contains O(m) points, respectively. Consider the number of scenarios inD. We haveD={⋂Dx∣x∈G}={⋂Dx∣x∈{V,V^−,{Xe∣e∈E}}}. As we know, there are n vertices and m edges on G, and Xecontains O(n) elements; thus, we need to considerO(n+m+mn)points. Since eachDxcontains O(n) scenarios, we have the following lemma.Lemma 3Dcontains O(mn2) scenarios.As we know, for any x ∈ e and scenario s,T(x,s)=max{Tvp(x,s),Tvq(x,s)}. Next, we focus on computingTvp(x,s),butTvq(x,s)can be obtained in the same manner. According to Eq. (2), suppose thatTvp(x^+,s)is known for all x ∈ XeandTvp(vp^+,s)is also known, then forx∈(xi,xi+1]where 0 ≤ i ≤ t, we have the following equation:(3)Tvp(x,s)=Tvp(xi^+,s)+τ·dxi,x.Thus,Tvp(x,s)(x∈e)is a piecewise linear function for which the corresponding boundary points are listed in Xe. Moving the sink point x along an edgee=(vp,vq)from vpto vq, when a sensitive point occurs, it means that the evacuation path of some vertices will change, but the evacuation time may be the same. Therefore,Tvp(xi,s)may be equal toTvp(xi^+,s),where xi∈ Xe. In this case (whereTvq(xi,s)should also be equal toTvq(xi^+,s)), the sensitive point xican simply be ignored, and thus in our illustrations we simply assume that the change in the evacuation path does have an effect onTvp(x,s)and/orTvq(x,s). For any sensitive point xi, it is easy to see thatTvp(xi,s)≥Tvp(xi^+,s)andTvq(xi,s)≤Tvq(xi^+,s). Fig. 2shows an illustration ofTvp(x,s). Part (a) shows the situation where no sensitive point exists on e, and part (b) shows the situation where there are three sensitive points (denoted as x1, x2, and x3) on e. Fig. 3shows an illustration of T(x, s) for x ∈ e. Note that the slopes of all the segments inTvp(x,s)(resp.Tvq(x,s)) are τ (resp.−τ). We denote the intersection points ofTvp(x,s)andTvq(x,s)asYe={yi∣i∈Z+}. SinceT(x,s)=max{Tvp(x,s),Tvq(x,s)},we have the following lemma.Lemma 4For anye=(vp,vq)and s, if we letxe*∈ebe a point such thatT(xe*,s)≤T(x,s)for any x ∈ e, thenxe*∈{Xe,Ye,vp^+,vq^−}.Ifvi^+orvi^−is the sink point, this means that the sink is located on vi, but wi(s) cannot complete the evacuation instantly and|Nvi^·|=2. Note the little dot in|Nvi^·|denotes the notation+or−. Therefore, in general, if viis not a sensitive point, thenT(vi^·,s)≥T(vi,s). Note that Xeis only related to the edge e, whereas Yeis related to the edge e but also to the scenario s.Lemma 5For any e and any s, Ye contains O(n) elements.Assume thate=(vp,vq). It is known thatTvp(x,s)andTvq(x,s)for x ∈ e are piecewise linear functions. We denote the segments ofTvp(x,s)(resp.Tvq(x,s)) asLivp(i=1,2,…)(resp.Livq(i=1,2,…)in order from left to right. First, we prove that ifLivpintersects with k segments ofTvq(x,s)and the last intersection is withLjvq,thenLi+1vpwill never intersect withLj−1vq. We take Fig. 4as an example. We denote the sensitive point on edge e from left to right asx1,x2,…. In Fig. 4, we only indicate the second sensitive point x2 and the third sensitive point x3.L1vpintersects with 3 segments:L1vq,L2vq,andL3vq. We prove thatL2vpwill never intersect withL2vqby proving that x3 will always be greater than x2. Denote the intersection ofL1vpandL3vqas y1. As a point onL1vp,y1 ≤ x3 holds. In addition, as a point onL3vq,y1 > x2 holds, then we have x3 > x2. Therefore, ifLivpintersects with k segments ofTvq(x,s)and the latest intersection is withLjvq,thenLi+1vpwill never intersect withLj−1vq. We denote all the segments that intersect withLivp(resp.Livq) asIivp(resp.Iivq) and|Iivp|=rivp(resp.|Iivq|=rivq). This property implies that the intersection ofIi+1vpandIivp(resp.Ii+1vqandIivq) contains zero or one elements.Without loss of generality, we assume thatTvp(x,s)andTvq(x,s)have n segments, respectively. If we denote the number of elements in Yeas Δ, thenΔ=∑1≤i≤nrivp=∑1≤i≤nrivq. Note that if the intersection of any two setsIi+1vpandIivp(1≤i≤n−1) is empty, thenΔ=∑1≤i≤nrivp≤n. Since the intersection ofIi+1vpandIivpcontains at most one element, each segment ofTvq(x,s)can intersect with at most two segments ofTvp(x,s),i.e.,rivp≤2. Therefore, we haveΔ=∑1≤i≤nrivq≤2n. Thus, the lemma follows.□To obtain the optimal sink location under s, according to Lemma 4,xopt(s)∈{V,V^+,V^−,Xe,Ye∣e∈E},so we have four steps to compute T(x, s) (x ∈ G). First, we consider the situation where the sink point is located on a vertex vi. Then, we consider the situation where the sink point is located onvi^+orvi^−. Next, we consider the situation where the sink point is located on a sensitive point xi. Finally, we consider the situation where the sink point is located on yi.Lemma 6With a given s and x, T(x, s) can be obtained in O(n) time.With a given x, G(x) is known. Note that G(x) is a tree and the evacuation solution for every vertex is known.T(x,s)=maxvi∈Nx{Tvi(x,s)}. Next, we show thatTvi(x,s)can be computed inO(nvi)time wherenviis the vertex number in G(x, vi), and thus T(x, s) can be obtained in O(n) time since∑vi∈Nxnvi≤n.Suppose that thenvi=n′vertices in G(x, vi) are denoted asu1,u2,…,un′(=vi)such thatdx,ui≤dx,ui−1for 2 ≤ i ≤ n′. Lettix(s)be the time required for all of the weights on ul(1 ≤ l ≤ i) to evacuate to x under s.Tvi(x,s)=tn′x(s). Note thatt1x(s)=τ·dx,u1+w1(s)ccan be computed in constant time. According to Eq. (2), forj=2,3,…,n′,it is clear thattjx(s)=max{tj−1x(s),τ·dx,uj+∑1≤l≤jwl(s)c}.We denote Ajasτ·dx,uj+∑1≤l≤jwl(s)c. It is easy to obtainAj+1=Aj−τ·duj+1,uj+wj+1cin constant time. Thus, we can obtaintj+1x(s)in constant time iftjx(s)is known. By computingtjx(s)in the order ofj=1,2,…,n′,we can obtaintjx(s)for all j in O(n′) time. Thus, the lemma follows.□According to the definition ofx^+andx^−,we provide the following corollary.Corollary 1With a given s,T(x^+,s)andT(x^−,s)can be obtained in O(n) time for any x ∈ G.We know thatDcomprises O(mn2) scenarios and we have already shown this by proving that we need to consider O(mn) different trees, while we also need to consider O(n) scenarios for each tree. Now, we have a sink point x, and thus to compute T(x, s) for alls∈D,we divide the scenarios into O(mn) groups (corresponding to the O(mn) trees), where each groupDx′comprises O(n) scenarios. Note that x′ ∈ {V, {Xe∣e ∈ E}}. According to the analysis in Section 2.2 (see paragraph 1), the O(n) dominant scenarios in a givenDx′are composed of|Nx′|parts where each part comprises of the dominant scenarios of a subtree of G(x′) rooted at one of x′’s neighbors. So, for eachDx′,we further divide it into|Nx′|parts, which are denoted asDx′vj,wherevj∈Nx′,and each part comprises O(n′) scenarios, where n′ is the number of vertices in G(x′, vj). For a given scenario s and a vertex vl∈ V, suppose thatwl(s)=wl¯,we definesl−as a scenario wherewl(sl−)=wl̲while the weights of the other vertices are the same, i.e., for any vertex vf∈ {V∖vl},wf(sl−)=wf(s).Lemma 7With a given x and a givenDx′,T(x, s) can be obtained in O(n2) time for alls∈Dx′.SinceDx′comprises O(n) scenarios, based on Lemma 6, we can obtain this lemma in a straightforward manner. We provide another algorithm that is simpler and more efficient for the situation where the sink point is located on an edge (see Corollary 2).First, we divideDx′into|Nx′|parts where each part comprises O(n′) scenarios, and n′ is the number of vertices inG(x,vj)(vj∈Nx′). We only consider one part ofDx′,which is denoted asDx′1,but the other parts can be treated in the same manner. Suppose thatDx′1consists of n1 scenarios. Denote the n1 vertices asu1,u2,…,un1such thatdx,ui≤dx,ui−1for 2 ≤ i ≤ n1. Note that the vertexun1is a neighbor of x′. Order the scenarios inDx′1as{s1,s2,…,sn1},wheresk+1=(sk)n1−k+1−for 1 ≤ k < n1. s1 is a scenario such thatwi(s1)=wi¯for all the vertices onG(x,un1)(i.e.,u1,u2,…,un1) andwi(s1)=wi̲for other vertices not onG(x,un1). Next, we show that with a given sink x, a given scenario s and a given vertex ul(1 ≤ l ≤ n1), if T(x, s) is computed in the manner shown in Lemma 6,T(x,sl−)can be computed in O(n) time.Suppose thatT(x,s)=maxvi∈Nx{Tvi(x,s)}=Tvi(x,s). Denote the n′ vertices in G(x, vi) asg1,g2,…,gn′(=vi)such thatdx,gi≤dx,gi−1for 2 ≤ i ≤ n′. Without loss of generality, assume thatTvi(x,s)=τ·dx,gj+∑1≤k≤jwk(s)c. If ul∉G(x, vi) where 1 ≤ l ≤ n1, thenT(x,sl−)=T(x,s). Next, we focus on the situation where ul∈ G(x, vi) and we distinguish the following two cases. Note that if ul∈ G(x, vi), ulwill be overlapping a gi(1 ≤ i ≤ n′). For convenience, we do not change the notation in this situation and we just use the notations uland giat the same time.Case 1: ul> gjIn this case, a decrease in the weight of ulhas no effect on the time, i.e.,T(x,sl−)=T(x,s).Case 2: ul≤ gjIn this case, a decrease in the weight of ulwill lead to a decrease inTvi(x,sl−). Without loss of generality, we assume thatul=gf. It is not difficult to see thatTvi(x,sl−)=max{Tvi(x,s)−wf¯−wf̲c,max1≤r≤f−1{τ·dx,gr+∑1≤k≤rwk(sl−)c}}=max{Tvi(x,s)−wf¯−wf̲c,tf−1x(sl−)}=max{Tvi(x,s)−wf¯−wf̲c,tf−1x(s)}.According to Lemma 6,tf−1x(s)is known. Thus, we can obtainTvi(x,sl−)in constant time. For vj∈ Nxand vj≠ vi,Tvj(x,sl−)=Tvj(x,s). Since |Nx| < n,T(x,sl−)can be obtained in O(n) time.We compute T(x, si) in the order ofi=1,2,…,n1,s2=(s1)n1−. To compute T(x, si), where 3 ≤ i ≤ n1, we need to know the value oftn1−i+1x(si). Note thattn1−i+1x(si)=tn1−i+1x(s1)and the values oftjx(s1)are known for all 1 ≤ j ≤ n′, and thus in O(nn1) time, we can obtain the values of T(x, si) for allsi∈Dx′1. Therefore, we can obtain the values of T(x, s) for alls∈Dx′in O(n2) time.□When x ∈ e,|Nx|=2. Based on Lemma 7, the following corollary is provided.Corollary 2With a given x ∈ e and a givenDx′,T(x, s) can be obtained for alls∈Dx′in O(n) time.Now, we present three lemmas to address situations in which the sink point is located on V or{V^+,V^−}or Xe.Lemma 8The values of T(x, s) can be obtained for alls∈Dand all x ∈ V in O(mn4) time.As shown by Lemma 7, with a given x ∈ V and a givenDx′,T(x, s) can be obtained for alls∈Dx′in O(n2) time. We know that we need to consider n vertices and O(mn)Dx′; thus, the lemma follows.□The values of T(x, s) can be obtained for alls∈Dand allx∈{V^+,V^−}in O(m2n2) time.Note that for anyx∈{V^+,V^−},we always have|Nx|=2. Since we need to consider 2m points and O(mn)Dx′,then based on Corollary 2, the lemma follows.□With a given edge e, the values of T(x, s) can be obtained for alls∈Dand all x ∈ Xe in O(mn3) time.As shown by Corollary 2, with a given x ∈ e and a givenDx′,T(x, s) can be obtained for alls∈Dx′in O(n) time. Since Xecomprises O(n) elements, T(x, s) can be obtained for alls∈Dx′and all x ∈ Xein O(n2) time.Dcontains O(mn)Dx′,so the lemma follows.□With a givene=(vp,vq)and s, ifTvp(vp^+,s),Tvq(vp^+,s),Tvp(xi^+,s)andTvq(xi^+,s)for all xi∈ {Xe} are known, then the values of Ye and T(yi, s) can be obtained for all yi∈ Ye in O(n) time.AsTvp(vp^+,s),Tvq(vp^+,s),Tvp(xi^+,s)andTvq(xi^+,s),where xi∈ {Xe}, are all known, then we can obtain the functions ofTvp(x,s)andTvq(x,s)in O(n) time, where x ∈ e. For any two segments, i.e., one fromTvp(x,s)and one fromTvq(x,s),we can determine the intersection of these two segments (no intersection or one intersection) and the corresponding time (i.e., T(yi, s)) in constant because the function of each segment is known. Without loss of generality, suppose thatLjvpintersects with rjsegments ofTvq(x,s),which are denoted as Ij, and the number of segments between the last segment of Ijand the first segment ofIj+1isgj+1. If Ijhas a nonempty intersection (which must contain only one element according to Lemma 5) withIj+1,thengj+1=−1. We compute the values of T(yi, s) in the order ofi=1,2,…. First, we considerL1vp. InO(g1+r1+1)time, we can obtain the values of the first r1 intersections and the corresponding time. According to Lemma 5, forL2vp,we can obtain the intersections and the corresponding time inO(1+g2+r2+1)time. Since there are at most(n−2)sensitive points on e, forTvp(x,s)orTvq(x,s),there are at most(n−1)segments. Thus, we can obtain all the values of yiand T(yi, s) inO(g1+r1+1+1+g2+r2+1+···+1+gn−1+rn−1+1)time.Next, we prove thatO(g1+r1+1+1+g2+r2+1+···+1+gn−1+rn−1+1)<O(n). According to Lemma 5,r1+r2+···+rn−1≤2(n−1). Asg1+g2+···+gn−1<n,we haveO(g1+r1+1+1+g2+r2+1+···+1+gn−1+rn−1+1)<O(n+2n−2+n−1)=O(4n−3)=O(n). The proof is complete.□With a givene=(vp,vq),the values of Ye and T(yi, s) can be obtained for alls∈Dand all yi∈ Ye in O(mn3) time.According to Corollary 2, with a givenDx′,the values ofTvp(xi^+,s)andTvq(xi^+,s)can be computed for all xi∈ {Xe} and alls∈Dx′in O(n2) time. The values ofTvp(vp^+,s),Tvq(vp^+,s)can be computed for alls∈Dx′in O(n) time. By combining Lemma 11 with a givenDx′,the values of Yeand T(yi, s) can be obtained for alls∈Dx′and all yi∈ Yein O(n2) time. The lemma follows because the number ofDx′we have to consider is O(mn).□Previously, we have obtained the values of T(x, s) for alls∈Dand all x ∈ V in O(mn4) time (Lemma 8) and the values of T(x, s) for alls∈Dand allx∈{V^+,V^−}in O(m2n2) time (Lemma 9). Based on Lemmas 10 and 12, because there are m edges, we can obtain the values of T(x, s) for alls∈Dand all x ∈ {Xe, Ye∣e ∈ E} in O(m2n3) time. For any scenario s, since we know thatxopt(s)∈{V,V^+,V^−,Xe,Ye∣e∈E}and for each e ∈ E, then Xeand Yecontain O(n) elements, respectively. Thus, with additional O(mn) time, we can obtainxopt(s)=argmin{T(x,s)∣x∈{V,V^+,V^−,Xe,Ye∣e∈E}}and the corresponding time is T(xopt(s), s). Since there are O(mn2) scenarios, with additional O(m2n3) time, we can obtain the values of xopt(s) and T(xopt(s), s) for alls∈D. m2n3 ≥ mn4 holds because m ≥ n. We conclude this subsection with the following theorem.Theorem 1The values of xopt(s) and T(xopt(s), s) can be computed for all scenarioss∈Din O(m2n3) time.In this subsection, based on the results in the previous subsection, we present an O(mn4) time algorithm for determining the minimax regret sink x* that minimizes Rmax(x). We divide the points on G into two parts: points located on a vertex and points located on an edge. For the points located on an edge, we divide the edge into O(n) intervals such that R(x, s) is convex in each interval. First, we discuss the situation where the sink point is located on a vertex.Note that we already obtained the values of T(x, s) for all x ∈ V and alls∈Dwhen we computed the values xopt(s) and T(xopt(s), s) for alls∈D. Thus, with a given vertex vi, we can obtain R(vi, s) for alls∈Dviin O(n) time. Therefore,Rmax(vi)=maxs∈DviR(vi,s)can be obtained in O(n) time. Then, we can obtain Rmax(vi) in O(n2) time for all vi. If we let v* be a vertex such that Rmax(v*) ≤ Rmax(vi) for any vi∈ V, then we have the following lemma.Lemma 13The values of v* and Rmax(v*) can be computed in O(n2) time.Next, we focus on the situation where the sink point is located on an edgee=(vp,vq). As we know, with a given s ande=(vp,vq),T(x, s) is a piecewise linear function for x ∈ e, which is divided by the O(n) boundary points in {Xe, Ye}. Note thatDxis the same for allx∈(xi,xi+1],where 0 ≤ i ≤ t. Thus, to compute Rmax(x) forx∈(xi,xi+1],we only need to consider the O(n) scenarios inDx. We know thatR(x,s)=T(x,s)−T(xopt(s),s). For a given s, T(xopt(s), s) is a known constant andT(x,s)=max{Tvp(x,s),Tvq(x,s)}. Then, we haveR(x,s)=max{R1(x,s),R2(x,s)}=max{Tvp(x,s)−T(xopt(s),s),Tvq(x,s)−T(xopt(s),s)}. In the previous subsection, we obtained the piecewise linear functions ofTvp(x,s)andTvq(x,s),where x ∈ e for all e ∈ E and alls∈D. Thus, for a given s, we can obtain the functions of R1(x, s) and R2(x, s) in constant time forx∈(xi,xi+1]. Typical plots of Rmax(x) are shown in Fig. 5, wherex∈(xi,xi+1]and different colors represent various scenarios. For each scenario, R1(x, s) and R2(x, s) are shown in the figure. LetDx={s1,s2,…,sn}wherex∈(xi,xi+1]. Because R(x, sj) (1 ≤ j ≤ n) are all convex whenx∈(xi,xi+1](again, note that wheni=t,the interval is (xt, vq)) where 0 ≤ i ≤ t, then Rmax(x) is convex in the interval(xi,xi+1].We denotezi*∈(xi,xi+1]as a point such thatRmax(zi*)≤Rmax(x)holds for anyx∈(xi,xi+1]. Then,zi*is located onxi^+,orxi+1,or the intersections of R1(x, s) and R2(x, s′). Whens=s′,the intersection of R1(x, s) and R2(x, s′) is denoted as yl, as defined in the previous section (see Fig. 5, part (c)). When s ≠ s′, the intersection of R1(x, s) and R2(x, s′) is denoted as fk(see Fig. 5, part (d)). To computezi*,we first need to obtain the values ofRmax(xi^+),Rmax(xi+1),and Rmax(yl) for all l, and Rmax(fk) for all k.Rmax(xi^+)andRmax(xi+1)can be computed in O(n) time because we only need to consider O(n) scenarios, and thus for each scenario sj, we can obtain the functions of R1(x, sj) and R2(x, sj) in constant time forx∈(xi,xi+1]. Clearly, whenx∈(xi,xi+1],the number of intersections of R1(x, s) and R2(x, s′) for O(n) scenarios is O(n2). Thus, the number of yland fkis O(n2). In O(n) time, we know that we can obtain the functions of R1(x, s) and R2(x, s) for alls∈Dx,wherex∈(xi,xi+1]. For any two scenarios, s and s′ inDx,if we letR1(x,s)=R2(x,s′),then we can obtain the intersection (which might not exist) in constant time. Therefore, we can obtain the values of yland fkin O(n2) time for all l and k. For any intersection ylor fk, we can obtain Rmax(yl) or Rmax(fk) in O(n) time. Then, we know that Rmax(yl) and Rmax(fk) can be computed in O(n3) time for all l and all k. Thus,zi*andRmax(zi*)can be computed in O(n3) time. Because O(n) intervals such as(xi,xi+1]need to be considered, we can obtain the values ofzi*andRmax(zi*)in O(n4) time for all i. We denoteze*∈eas a point such thatRmax(ze*)≤Rmax(x)holds for any x ∈ e. Then,ze*=argmin0≤i≤t{Rmax(zi*)}can be obtained in O(n) additional time. We conclude this part with the following lemma.Lemma 14With a given edge e, we can obtainze*in O(n4) time such thatRmax(ze*)≤Rmax(x)holds for any x ∈ e.Based on Lemma 14, we can obtain the values ofze*andRmax(ze*)in O(mn4) time for all e ∈ E. We know thatx*=argmin{Rmax(v*),Rmax(xe*)∣e∈E},so we can obtain the values of x* and Rmax(x*) with O(m) additional time. We conclude this subsection with the following theorem.Theorem 2The minimax regret 1-sink location problem with accessibility in a dynamic general network can be solved in O(m2n3) time.

@&#CONCLUSIONS@&#
