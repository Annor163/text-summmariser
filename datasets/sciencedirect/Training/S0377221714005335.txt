@&#MAIN-TITLE@&#
The economic lot-sizing problem with an emission capacity constraint

@&#HIGHLIGHTS@&#
We consider a lot-sizing problem with one global constraint on carbon emissions.We show that this problem is NP-hard.We present a Lagrangian heuristic, pseudo-polynomial algorithm and FPTAS.Special attention is paid to an efficient implementation of the FPTAS.Tests show that a combination of the heuristic and FPTAS is very fast.

@&#KEYPHRASES@&#
Integer programming,Approximation scheme,Lot-sizing,Carbon emissions,

@&#ABSTRACT@&#
We consider a generalisation of the lot-sizing problem that includes an emission capacity constraint. Besides the usual financial costs, there are emissions associated with production, keeping inventory and setting up the production process. Because the capacity constraint on the emissions can be seen as a constraint on an alternative objective function, there is also a clear link with bi-objective optimisation. We show that lot-sizing with an emission capacity constraint isNP-hard and propose several solution methods. Our algorithms are not only able to handle a fixed-plus-linear cost structure, but also more general concave cost and emission functions. First, we present a Lagrangian heuristic to provide a feasible solution and lower bound for the problem. For costs and emissions such that the zero inventory property is satisfied, we give a pseudo-polynomial algorithm, which can also be used to identify the complete set of Pareto optimal solutions of the bi-objective lot-sizing problem. Furthermore, we present a fully polynomial time approximation scheme (FPTAS) for such costs and emissions and extend it to deal with general costs and emissions. Special attention is paid to an efficient implementation with an improved rounding technique to reduce the a posteriori gap, and a combination of the FPTASes and a heuristic lower bound. Extensive computational tests show that the Lagrangian heuristic gives solutions that are very close to the optimum. Moreover, the FPTASes have a much better performance in terms of their actual gap than the a priori imposed performance, and, especially if the heuristic’s lower bound is used, they are very fast.

@&#INTRODUCTION@&#
In recent years, there has been a growing tendency to not only focus on financial costs in a production process, but also on its impact on the environment. An important example of an environmental implication is the emission of pollutants during production. Particular interest is paid to the emission of greenhouse gases, such as carbon dioxide (CO2), nitrous oxide (N2O) and methane (CH4). By now, there is a general consensus about the effect that these gases have on global warming. Consequently, many countries strive towards a reduction of these greenhouse gases, as formalised in treaties, such as the Kyoto Protocol (United Nations, 1998), as well as in legislation, of which the European Union Emissions Trading System (European Commission, 2010) is an important example.The shift towards a more environmentally friendly production process can be caused by such legal restrictions, but also by a company’s desire to pursue a ‘greener’ image by reducing its carbon footprint. As Vélazquez-Martínez, Fransoo, Blanco, and Mora-Vargas (2014) mention: “A substantial number of companies publicly state carbon emission reduction targets. For instance, in the 2011 Carbon Disclosure Project annual report (Carbon Disclosure Project, 2011), 926 companies publicly commit to a self-imposed carbon target, such as FedEx, UPS, Wal-Mart, AstraZeneca, PepsiCo, Coca-Cola, Danone, Volkswagen, Campbell and Ericsson.”In order to reduce their carbon footprints, companies can reduce their emissions by, for instance, using less polluting machines or vehicles, or using cleaner energy sources. One should not overlook the potential benefit that changing operational decisions has on emission reduction. As mentioned by Absi, Dauzère-Pérèz, Kedad-Sidhoum, Penz, and Rapine (2013), examples of studies at the operational level are Bektas and Laporte (2011) who consider a vehicle routing problem where the objective function consists of both travel distance and environmental costs, and Fang, Uhan, Zhao, and Sutherland (2011) who study a flow shop scheduling problem with both cycle time and environmental factors as an objective. Also in production planning there is no guarantee that minimising costs of operations will lead to low emissions. In fact, fashionable production strategies like just-in-time production, with its frequent less-than-truckload shipments and frequent change-overs on machines, may lead to emission levels that are far from optimal.For these reasons, we consider a generalisation of the classic economic lot-sizing model. Besides the usual financial costs, emission levels are associated with production, keeping inventory and setting up the production process. Set-up emissions can for example originate from having fixed per-truckload emissions of an order, or from a production process that needs to ‘warm up’ (see e.g. Jans & Degraeve, 2004), where usable products are not created until the production process has gone through a set-up phase that is already polluting. Keeping inventory can also emit pollutants, for instance because products need to be stored in a specific way, e.g. refrigerated, or because of lighting systems in a warehouse, which emit indirectly due to their electricity consumption. The lot-sizing model that we consider in this paper minimises the (financial) costs under an emission capacity constraint. This constraint is imposed as one global restriction over all periods. This problem was introduced by Benjaafar, Li, and Daskin (2013), who integrate carbon emission constraints in lot-sizing models in several ways. They consider a capacity on the total emissions over the entire problem horizon, as we do in this paper, but also a carbon tax, a capacity combined with emissions trade, or carbon offsets (where additional emission rights may be bought, but not sold). Moreover, they study the effect of collaboration between multiple firms within a serial supply chain. They examine how the values of the problem parameters, as well as the parameters of regulatory emission control policies, affect costs and emissions. They assume that all cost and emission functions follow a fixed-plus-linear structure, and no attention is paid to finding good solution methods.In our paper, we study a lot-sizing problem with an emission constraint under concave cost and emission functions. We show that this problem isNP-hard, even if only production emits pollutants (linearly). We will see that this model is also capable of handling multiple production modes. Furthermore, we develop several solution methods. First, we develop a Lagrangian heuristic that finds both very good solutions and a lower bound inO(T4)time, where T is the number of time periods. We also prove several structural properties of an optimal solution that we use while working towards a fully polynomial time approximation scheme (FPTAS). As a first step, a pseudo-polynomial algorithm is developed in case the costs and emissions are such that the single-sourcing (or zero inventory) property is satisfied in an optimal solution, that is, there is no period with both strictly positive production and strictly positive incoming inventory. This pseudo-polynomial algorithm is then turned into an FPTAS, which, in turn, is generalised to deal with costs and emissions that do not satisfy the single-sourcing property. We expect that this technique to construct a pseudo-polynomial algorithm and an FPTAS can be applied to more problems where one overall capacity constraint is added to a problem for which a polynomial time dynamic program exists.Special attention is paid to an efficient practical implementation of these algorithms. This includes a combination of the lower bound that is provided by the Lagrangian heuristic with an FPTAS. This combination results in excellent solutions within short computation times, as becomes clear from the extensive computational tests of all algorithms that have been carried out for this paper. Besides that, our algorithms do not only have an a priori gap (ε), but they also produce a (smaller) a posteriori gap. To reduce this gap even further, we develop an improved rounding technique, which we think can be applied to other FPTASes of the same type. Furthermore, if we compare the algorithms’ solutions to the optima, we see that the gaps are even much smaller.The model is more general than it looks at first sight, since the ‘emissions’ in the ‘emission constraint’ that we consider do not necessarily need to literally refer to emissions. They can be any kind of costs or output, other than those in the objective function, related to the three types of decisions (i.e., set-up, production and inventory). This makes the relationship with bi-objective lot-sizing clear. In multi-objective optimisation (and bi-objective optimisation in particular), one is usually interested in the set of Pareto optimal solutions or Pareto optimal set for short. Theoretically, finding the optimal costs for all possible emission capacities would result in finding the Pareto optimal set. The multi-objective lot-sizing problem is studied in more detail by Van den Heuvel, Romeijn, Romero Morales, and Wagelmans (2011), who divide the horizon in several blocks, each with its own objective function. The case with one block of length T corresponds to our problem (with fixed-plus-linear costs and emissions). In our paper, we will show that we can find the Pareto optimal set in pseudo-polynomial time, if the costs and emissions are such that the single-sourcing (zero-inventory) property is satisfied.Besides the works of Benjaafar et al. (2013) and Van den Heuvel et al. (2011), there are other papers that integrate carbon emission constraints in lot-sizing problems. Absi et al. (2013) introduce several lot-sizing models with multiple production modes and a constraint on the average amount of emission per unit produced, which may be on a periodic, cumulative, global (as we have) or rolling horizon basis. Although the models are similar to our work, the main difference is the type of emission constraint: we have a bound on the total emission, which acts as a kind of capacity constraint, while Absi et al. (2013) have a bound on the average emission per unit produced. Furthermore, in Absi et al. (2013) the emission is linear in the amount produced, while our emission functions are more general with emissions caused by setups and holding inventory. Since our model can also handle multiple production modes, the models coincide (except for the emission function structure) in case of a global emission constraint. Vélazquez-Martínez et al. (2014) study the effect of different levels of aggregation to estimate the transportation carbon emissions in the economic lot-sizing model with backlogging. Heck and Schmidt (2010) discuss lot-sizing with an ‘eco-term’, which they solve heuristically with an ‘eco-enhanced’ Wagner–Whitin and Part Period Balancing algorithm, with the possibility of ‘eco-balancing’. Other papers approach the emission problem from an EOQ (economic order quantity) point of view, such as Chen, Benjaafar, and Elomri (2013), Hua, Cheng, and Wang (2011), and Bouchery, Ghaffari, Jemai, and Dallery (2012).The remainder of this paper is organised as follows. The next section provides a formal, mathematical definition of the lot-sizing problem with a global emission capacity constraint. In Section 3, we show that this problem, as well as a variant with two production modes, isNP-hard under quite general conditions. Furthermore, we prove several structural properties of an optimal solution, which are used by the algorithms that are introduced in Section 4. Section 4.1 gives a Lagrangian heuristic. Sections 4.2 and 4.3 present a pseudo-polynomial algorithm, respectively FPTAS, for what we will define as co-behaving costs and emissions, that is, cost and emission functions which move in the same direction. An FPTAS for general costs and emissions is derived in Section 4.4. The combination of the heuristic and FPTASes is discussed in Section 4.5. Section 5 describes the results of the extensive computational tests and the paper is concluded in Section 6. In an online supplement, the proofs of several theorems from this article are given, as well as pseudocode for the Lagrangian heuristic, additional information on backtracking in one of the FPTASes, and tables with detailed results.The model can be formally defined as follows:(1)min∑t=1T(pt(xt)+ht(It)),(2)s.t.It=It-1+xt-dtt=1,…,T,(3)I0=0,(4)xt,It⩾0t=1,…,T,(5)∑t=1T(pˆt(xt)+hˆt(It))⩽C^,wherextis the quantity produced in period t, andItis the inventory at the end of period t. The demand in period t is given bydt, the length of the problem horizon is T, andC^is the emission capacity. Furthermore,ptandhtare production and holding cost functions, andpˆtandhˆtare production and holding emission functions, respectively. We assume that all functions are concave, nondecreasing and nonnegative. A cost function that is concave in the number of items, means that we assume that there are economies of scale. We assume that these economies of scale also apply to the emissions. Since the functions are not assumed to be strictly concave, constant returns to scale fit within this framework too. Note that the production and holding costs and emission functions (pt,ht,pˆtandhˆt) can also contain a fixed component. The fixed component inptcan represent set-up costs for example. This includes the well-known case with fixed set-up costs and linear production and holding costs.Eq. (2) gives the inventory balance constraints. There is no initial inventory (3). The nonnegativity constraints are given by (4), and (5) constrains the emissions over the whole problem horizon. We shall refer to problem (1)–(5) as ELSEC (Economic Lot-Sizing with an Emission Constraint).The right hand side of (5) can be chosen in several ways dependent on the setting. Besides viewing it as a global constraint, we can interpret it as a bound on the average emission per period or per produced item (since the total demand is known). This may still lead to unbalanced solutions in the sense that some periods/produced items may have more emissions than others. In this case one can model the emission constraint as in Absi et al. (2013), in which smaller or overlapping intervals are considered, but this is beyond the scope of this paper.Of course,pˆtandhˆtdo not necessarily refer to emissions. They can be any kind of costs other than those in the objective function. Examples of what can be modelled bypˆtandhˆtinclude other types of negative externalities for society, such as other pollutants or noise resulting from production or carrying inventories. Moreover, we can impose a maximum on the total or average inventory by choosinghˆt(It)=Itandpˆt(xt)=0for all t, andC^equal to the maximum total inventory or T times the maximum average inventory.Also, we can model a lot-sizing problem with m production modes and T periods by transforming it into an instance of ELSEC with Tm periods. To formalise this transformation, consider an instance with m production modes and letpti(resp.pˆti) be the production cost (resp.emission) function of mode i (i=1,…,m) in period t (t=1,…,T). Then we can construct a new instance of ELSEC with (i)T′=Tmperiods, (ii) production functionspm(t-1)+i′=ptiandpˆm(t-1)+i′=pˆtifori=1,…,m;t=1,…,T, and (iii) holding functionshtm′=htandhˆtm′=hˆtand demandsdtm′=dtfort=1,…,Tand values zero for the other indices. Note that this transformation is valid because periods appear in groups of m, such that each of these periods corresponds to another production mode, with zero holding costs within such a group and where demand occurs only in the last period of a group of m periods. This implies that our model is able to handle the extension of ELSEC with multiple production modes.If the costs and emissions follow a fixed-plus-linear structure, then the model can also be formulated as the standard mixed integer linear program (6)–(12). We shall refer to this problem as ELSEC-MILP. See Fig. 1for a graphical representation with four periods.(6)min∑t=1T(Ktyt+ptxt+htIt),(7)s.t.It=It-1+xt-dtt=1,…,T,(8)xt⩽yt∑s=tTdst=1,…,T,(9)I0=0,(10)xt,It⩾0t=1,…,T,(11)yt∈{0,1}t=1,…,T,(12)∑t=1TK^tyt+pˆtxt+hˆtIt⩽C^,KtandK^tare the set-up cost and emissions, respectively. Now,pt,pˆt,htandhˆtrefer to the unit production and holding costs and emissions.ytis a binary variable indicating a set-up in period t and constraints (8) ensure that production can only take place if there is a set-up in that period.The fixed-plus-linear cost structure is said to have the Wagner–Whitin or non-speculative motives property if the cost parameters satisfy the conditionpt-1+ht⩾ptfort=2,…,T. This means that it is better to postpone production as much as possible in terms of variable costs. Similarly, we say that the emissions satisfy the Wagner–Whitin property if this condition holds on the emission parameters.Van den Heuvel et al. (2011) show that some special cases of ELSEC-MILP can be solved in polynomial time. Moreover, they show that ELSEC-MILP isNP-complete in general, even if only set-ups emit pollutants and under Wagner–Whitin (non-speculative) costs and emissions.In this section, we show that another special case of ELSEC-MILP isNP-hard.Theorem 1Lot-sizing with a capacity constraint on the total emissions isNP-hard, even if only production emits pollutants and these emissions are linear in the quantity produced.We show that knapsack is a special case of ELSEC-MILP by defining an instance of ELSEC-MILP in which periods appear in pairs, in which production in an even period corresponds to putting an item in the knapsack and production in an odd period to not putting an item in the knapsack. The details of the proof can be found in Appendix A.1.□We can view the instance from the proof as a lot-sizing problem with an emission constraint and two different production modes in each period, with a horizon of12Tperiods. The even and odd periods then correspond to these two different production modes, and we get the following corollary.Corollary 2Lot-sizing with a capacity constraint on the total emissions and two production modes in each period isNP-hard, even if only production emits pollutants (linearly) and either all (financial) costs or all emissions are time-invariant.Theorem 5 in Absi et al. (2013) states that lot-sizing with a cumulative emission capacity isNP-hard. Our problem (with a global emission capacity constraint) is a relaxation of that problem. Absi et al. (2013) mention that the problem with a global emission capacity isNP-hard as well and that the same reduction as in the proof of their Theorem 5 could be used, but a precise proof is omitted. One important difference between their proof and ours is that they assume a general number of production modes, whereas we consider the more restricted case with only two modes. On the other hand, they have time-invariant instances with unit demand, whereas we have either costs or emissions that are time-invariant and non-unit demand.Before we introduce our algorithms in Section 4, we prove the correctness of some structural properties of an optimal solution, which these algorithms will use.We use the common definition of a block as an interval[t,s]such thatIt-1=Is=0andIτ≠0∀t⩽τ⩽s-1. Furthermore, let a period t be called a double-sourcing period, ifIt-1>0andxt>0, that is, there is both inventory carried over from the previous period and positive production in period t. Let a period t be called a single-sourcing period if eitherIt-1=0orxt=0. Note that the single-sourcing property is also called the zero inventory (ordering) property in the literature.Later, we will want to consider a given solution and find out what happens to the costs (and emissions) when we shift production from period i to period j and vice versa. Therefore, it is convenient to make the following definitions. Letxbe a given solution. Letxi,jbe the quantity produced in period i that is kept in inventory until at least period j in that solution. Defineqi,jas the additional production quantity in period i (compared tox) that is kept in inventory until at least period j. We can interpretxias the production quantity in period i in the ‘old’ (given) situation andxi+qi,jas the production quantity in period i in the ‘new’ situation. Similarly, we can interpret the quantitiesIk+qi,jas the inventories in periods k (i⩽k⩽j-1) in the ‘new’ situation. Now, defineCi,j(qi,j;xi,Ii,…,Ij-1)≔pi(xi+qi,j)+∑k=ij-1hk(Ik+qi,j). We will useCi,j(qi,j)as shorthand forCi,j(qi,j;xi,Ii,…,Ij-1)andCi,jas shorthand forCi,j(0)=Ci,j(0;xi,Ii,…,Ij-1). In this way,Ci,j(0)gives the production costs in period i plus the holding costs incurred in periods i throughj-1in the ‘old’ situation, andCi,j(qi,j)gives the production and holding costs in the same periods in the ‘new’ situation. Because of concavity ofpiandhk, it holds thatCi,jis concave (inqi,j) too. Note thatCj,j(qj,j)=pj(xj+qj,j). Similarly, defineC^i,j(qi,j;xi,Ii,…,Ij-1)≔pˆi(xi+qi,j)+∑k=ij-1hˆk(Ik+qi,j), and useC^i,j(0)andC^i,jas shorthand forC^i,j(0;xi,Ii,…,Ij-1). Definepi′(xi)≔limh↓0pi(xi+h)-pi(xi)h,i.e.,pi′is the right derivative ofpi. Becausepiis real-valued and concave, we know that this right derivative exists forxi>0.Similarly, letpˆi′,hi′,hˆi′,Ci,j′,C^i,j′be the right derivatives of their respective functions. We know that the right derivative ofpˆiexists forxi>0, the right derivatives ofhiandhˆiexist forIi>0, and the right derivatives ofCi,jandC^i,jexist forqi,j+xi>0andqi,j+Ik>0(i⩽k<j)(i.e., the quantity that is produced less in period i is such that the remaining production quantity, respectively inventories are positive).In the next theorem we prove that the single-sourcing property still holds under a special cost structure, which we call co-behaving. The cost structure is said to be co-behaving if for each pairi⩽j, eitherCi,j′(qi,j)⩽Cj,j′(qj,j)andC^i,j′(qi,j)⩽C^j,j′(qj,j)orCi,j′(qi,j)⩾Cj,j′(qj,j)andC^i,j′(qi,j)⩾C^j,j′(qj,j)holds, for all(x,I)and all(qi,j,qj,j)(such thatqi,j+xi>0,qj,j+xj>0andqi,j+Ik>0(i⩽k<j)). Note that such cost and emission functions ‘co-behave’, because over time, they move in the same direction, i.e. if one increases (decreases), the other increases (decreases) as well.Theorem 3If the financial costs and the emissions are co-behaving, then there exists an optimal solution to ELSEC, such that the single-sourcing property holds in all periods.Suppose there exists an optimal solution(x,I)with (at least) one double-sourcing period. Let v be a double-sourcing period. Suppose that period v’s demand is procured from two periods, t and s, then it must be that eitherv=torv=s. Furthermore, assume thatCt,v′(0)⩾Cs,v′(0)andC^t,v′(0)⩾C^s,v′(0). (Note that this also covers the caseCt,v′(0)⩽Cs,v′(0)andC^t,v′(0)⩽C^s,v′(0), because we can switch the indices t and s.) Now, we should producext,vunits in period s instead of period t, so that we obtain a solution with single-sourcing in period v. We show that this will decrease both costs and emissions. Because of concavity, it holds thatCt,v(0)-Ct,v(-xt,v)⩾Ct,v′(0)xt,v⩾Cs,v′(0)xt,v⩾Cs,v(xt,v)-Cs,v(0),i.e., the savings are larger than the extra expenses. Completely analogously,C^t,v(0)-C^t,v(-xt,v)⩾C^t,v′(0)xt,v⩾C^s,v′(0)xt,v⩾C^s,v(xt,v)-C^s,v(0).If there are any double-sourcing periods left, then repeat the above procedure until there are only single-sourcing periods left.□If both the financial costs and emissions satisfy the Wagner–Whitin property, then there exists an optimal solution to ELSEC, such that the single-sourcing property holds in all periods.By definition, the Wagner–Whitin property means that it is cheapest to procure products from the most recent production period, i.e.Ci,j′⩾Cj,j′andC^i,j′⩾C^j,j′for alli⩽j. □The following corollary is a direct consequence of Theorem 3.Corollary 5If the emission functions are time-invariant and the holding emissions are zero, OR the financial cost functions are time-invariant and the holding costs are zero, then there exists a solution to ELSEC, such that the single-sourcing property holds in all periods.In general, the following property holds.Theorem 6There exists an optimal solution to ELSEC, such that the single-sourcing property holds in all but at most one period.We show that if there are at least two periods with double-sourcing in an optimal solution, we can alter the solution by shifting production such that only one double-sourcing period remains and the costs do not increase. By repeating this argument, we end up with an optimal solution having at most one double-sourcing period. The details of the proof can be found in Appendix A.2.□Finally, we prove the next property, which is used in Section 4.4.Theorem 7There exists an optimal solution in which either the full emission capacity is used, or the single-sourcing property holds.We show that any optimal solution that does not satisfy any of the two properties can be modified by shifting production such that one of the properties holds and the costs do not increase. The details of the proof can be found in Appendix A.3.□We propose several algorithms to solve ELSEC. First, we present a Lagrangian heuristic that provides an upper and lower bound for the problem. Secondly, we develop an exact algorithm that solves the co-behaving version of ELSEC in pseudo-polynomial time. We turn this algorithm into a fully-polynomial approximation scheme (FPTAS). Next, this FPTAS is extended to deal with more general cost and emission functions. Finally, we show how the FPTASes can be sped up by using a lower bound, such as the one given by the Lagrangian heuristic.In this section, we present a Lagrangian heuristic that is based on relaxation of the emission capacity constraint (5). The resulting formulation is given below. This heuristic will give us both a lower bound and a feasible solution.(13)min∑t=1T(pt(xt)+ht(It))+λ∑t=1Tpˆt(xt)+hˆt(It)-C^=∑t=1Tpt(xt)+λpˆt(xt)+ht(It)+λhˆt(It)-λC^,(14)s.t.It=It-1+xt-dtt=1,…,T,(15)xt,It⩾0t=1,…,T,(16)I0=0,(17)λ⩾0,First, suppose thatλis given. Obviously, constraints (14)–(16) are the same as in the classic (uncapacitated, single-item) lot-sizing problem. Moreover,pt+λpˆtis a concave function ofxt, because bothptandpˆtare concave, andλis nonnegative. Similarly,ht+λhˆtis a concave function ofIt. Furthermore,λC^is a constant, so we can ignore it when optimising. Hence, for a givenλ, the relaxed problem (13)–(16) is a classic lot-sizing problem and we can solve it with Wagner and Whitin (1958)’s algorithm.We apply Megiddo (1979)’s algorithm for combinatorial problems that involve minimisation of a rational objective function to the lot-sizing problem. Gusfield (1983) showed that this is equivalent to minimising an objective of the forma+λb. See also Wagelmans (1990) and Megiddo (1983). These papers imply that if, for a givenλ, the relaxed problem can be solved inO(A)(with a ‘suitable’ algorithm) and we can check inO(B)whether the relaxed constraint is violated or not, then the parameterised problem (a+λb) can be solved inO(AB). For a givenλ, our relaxed problem (13)–(16) can be solved inO(T2)with the Wagner–Whitin algorithm. Moreover, the same algorithm can be used to determine whether the emission constraint is violated or not. Although Megiddo (1979) only mentions fractions of linear functions, his algorithm can be generalised to our problem in a straightforward manner. Hence, we can solve our Lagrangian relaxation inO(T2T2)=O(T4).In Appendix B, we give the pseudo code for Megiddo (1979)’s algorithm applied to our problem.After executing the algorithm, we get an interval[λLB,λUB]such thatλ∗is one of the endpoints. Atλ∗, we are indifferent between two solutions, of which one is infeasible and the other feasible. The latter will give us an upper bound. Furthermore, suppose thatx∗is an optimal solution of problem (13)–(16) for some value ofλ, say forλ=λ¯. Then we can compute∑t=1Tptxt∗+htIt∗+λ¯∑t=1Tpˆtxt∗+hˆtIt∗-C^, which is a lower bound for our problem. Observe that bothxLBandxUBare optimal solutions, forλLBandλUB, respectively. Hence, we can compute that above expression for both solutions and take the higher lower bound.Apart from the heuristic, we also give a dynamic programming algorithm that solves ELSEC to optimality in case the costs and emissions satisfy the conditions in Theorem 3. We shall see that this algorithm works in pseudo-polynomial time. We construct this algorithm in such a way that it will be easy to turn it into an FPTAS in the next section.First, assume that demand and all cost functions are integer, i.e.,dt∈Nandpt(xt),ht(It)∈Nforxt,It∈N. Note that this does not have to hold for the emission functions,pˆtandhˆt.The general idea of the algorithm is as follows: we minimise the emissions under a (financial) budget constraint. Because of Theorem 3, we know that the single-sourcing property holds and we can extend Wagner and Whitin’s well-known algorithm for the classic lot-sizing problem (Wagner & Whitin, 1958) with an extra state variable €, which denotes the budget. More precisely, letf(t,€)denote the minimum emissions for periods t until T, given budget €. We define the following recursion:(18)f(t,€)=mins>t:€⩾c(t,s){e(t,s)+f(s+1,€-c(t,s))}fort⩽T,(19)f(T+1,€)=0.(20)Here,c(t,s)≔pt(Dt,s)+∑τ=ts-1hτ(Dτ,s),(21)e(t,s)≔pˆt(Dt,s)+∑τ=ts-1hˆτ(Dτ,s),whereDt,sis defined as∑τ=tsdτ. Now,f(1,€)gives the minimum emissions given budget €. We first computef(1,€)for€=1. We consecutively computef(1,€)for budgets€=1,2,3,…and compute the correspondingf(1,€)untilf(1,€)⩽C^, i.e., the minimum emissions are less than or equal to the emission cap. The first budget € for which this holds, is the optimal value.For eachf(t,€), the optimal s is stored. The production schedule corresponding to the solution found by the algorithm can then be found through a simple backtracking procedure.It is easy to see that the running time of this dynamic program isO(T2opt), where opt is the optimal value (of the financial budget).This algorithm needsO(Topt)memory, to store all valuesf(t,€)and the corresponding optimal s.In the process of finding the optimal solution, we construct part of the Pareto optimal set. This is because for each budget€=1,…,opt, we find the minimum emissions,f(1,€). This algorithm can be used to find the whole Pareto optimal set. We first minimise emissions regardless of costs. This can be done by executing the (classic) Wagner–Whitin algorithm with the emission level as the objective (instead of the financial costs). Denote the corresponding costs by€∼; it is easy to see that this is polynomial in the input of a problem instance. Now, we can compute the minimum emissions,f(1,€)for each budget€=1,…,€∼. This procedure gives the whole Pareto optimal set for co-behaving costs and emissions inO(T2€∼)time.An alternative to find Pareto optimal solutions is to take linear combinations of the objective functions. However, in contrast to our pseudopolynomial algorithm, this method will not find the complete Pareto optimal set as our experiments (see Section 5) show that non-supported solutions exist in general (i.e., solutions not on the convex hull of the set of Pareto outcomes). Namely, each time the Lagrangian heuristic does not find an optimal solution of ELSEC, the corresponding solution is non-supported. To see this, the objective function in the Lagrangian heuristic is a weighted average of the original objective function and the left hand side of the emission constraint. Hence, for each value ofλ(and in particular for an optimal value ofλ) we find a supported efficient solution of the bi-objective problem corresponding to ELSEC.Clearly, it is the large number of budgets € to consider that makes the algorithm in the previous section run in pseudo rather than fully polynomial time. However, it is possible to turn the pseudo-polynomial algorithm into an FPTAS by reducing the number of states of € in a smart way. Instead of all budgets€=1,2,…, we now only consider budgets equal to(22)Δk≔1+ε(e-1)(T+1)k,k∈N.(See Fig. 2.) This means that in every step of the dynamic programming recursion, we have to round down the budget to the nearest value ofΔk.(23)f(t,€)=mins>t:€⩾c(t,s)e(t,s)+f(s+1,round(€-c(t,s)))fort⩽T,(24)f(T+1,€)=0,(25)whereround(a)≔maxk∈N{Δk:Δk⩽a}.Analogously to what we did before, we try budget€=Δ1,Δ2,Δ3,…untilf(1,€)⩽C^, i.e. the minimum emissions are less than or equal to the emission cap. Again, for eachf(t,€), the optimal s is stored. The production schedule corresponding to the solution found by the algorithm can then be found through a simple backtracking procedure.The approach in which an exact, but only pseudo-polynomial dynamic program is transformed into a FPTAS by trimming the state space is attributable to Woeginger (2000) and Schuurman and Woeginger (2008) (see also Ibarra & Kim, 1975), as well as the idea to use a so-called trimming parameterΔof the typeΔ≔1+ε2gT. The FPTAS presented in this section takes an approach that is similar to Woeginger (2000). As far as we know, the FPTAS that is presented in Section 4.4 does not fit within his framework, because it is not based on a pseudo-polynomial algorithm, but rather on a generalisation of another FPTAS.We verify that the obtained solution is in fact a(1+ε)approximation of the true optimum. The question is: how much of the budget is ‘wasted’ by repeatedly rounding off the budget?In each production period, at most the size of one interval[Δi,Δi+1)is lost. In the worst case this is the largest interval. Since there are at most T production periods, the maximum rounding error equals the size of the T largest intervals. Suppose that for some budget€=Δk+T, the algorithm gives no feasible solution (i.e.,f(1,Δk+T)>C^). Then we know thatΔkis a lower bound, because we could have lost at most T intervals. Now, suppose that for the next budget, the algorithm does find a feasible solution (i.e.,f(1,Δk+T+1)⩽C^). So because we raise the budget fromΔk+TtoΔk+T+1each time we computef(1,€), we may lose one more interval. Hence, the maximum total error equals the size of theT+1largest intervals. That means that if the algorithm finds a solutionΔk+T+1, the optimal value is at leastΔk. We therefore need to show that1+ε(e-1)(T+1)k+T+1⩽1+ε(e-1)(T+1)k(1+ε)or equivalently,1+ε(e-1)(T+1)T+1⩽(1+ε). This is true because1+ε/(e-1)T+1T+1⩽1+(e-1)·εe-1=1+ε(if0<ε⩽(e-1)).The inequality follows from the fact that1+znn⩽1+(e-1)z, if0⩽z⩽1.The pseudo-polynomial algorithm in Section 4.2 has a running time ofO(T2opt). Instead of opt intervals, the algorithm in this section needs to consider at mostnFPTASintervals, wherenFPTASis the smallest integer such thatΔnFPTAS⩾(1+ε)opt. It follows that:nFPTAS=log1+ε(e-1)(T+1)(1+ε)opt=ln(1+ε)optln1+ε(e-1)(T+1)⩽1+(e-1)(T+1)εln((1+ε)opt),where the inequality follows from the fact thatln(x+1)⩾xx+1, which can be seen from the Taylor expansion ofln(x+1)(see also Schuurman & Woeginger, 2008). Therefore, there areOTmax{ln(opt),1}εbudgets € to consider. Hence, the total running time isOT3max{ln(opt),1}ε, which is fully polynomial.This algorithm needsOT2max{ln(opt),1}εmemory, to store all valuesf(t,€)and the corresponding optimal s.As we have shown that the algorithm described in this section is a(1+ε)approximation, we know a priori that the optimality gap of the obtained solution is at most100ε%. Previously, we have seen thatΔkis a lower bound for the optimal value, ifΔk+T+1is the (final) budget € corresponding to the algorithm’s solution. Afterwards, we can compute the actual costs of this solution, which we will callvFPTAS. We know thatvFPTAS⩽Δk+T+1. That means that, a posteriori, we can compute the optimality gap more accurately asvFPTAS-ΔkΔk.An even smaller a posteriori gap can be obtained if we round down as much as possible during the execution of the algorithm. The reasoning behind this is as follows. The algorithm tries to find if there is a solution with some budgetΔk, such that the emissions are at mostC^. However, because of rounding, we may lose at mostT+1intervals. Therefore, we start the algorithm with a budgetΔk+T+1, of whichΔk+T+1-Δkmay be ‘spent’ on rounding. To be precise, we round down once in each block. Since there are T periods, there are at most T blocks, and we round down at most T times. (Another interval may be lost, because we raise the budget fromΔk+TtoΔk+T+1each time we computef(1,€), as mentioned earlier.) However, if, at some point during the execution of the algorithm, we consider a block of length k, we know that in the future periods, we can have at mostT-kblocks. TheseT-kblocks need at mostT-kextra intervals for the budget € for the approximation to be correct. In other words, if we consider a block of length k, we may lose one interval because of rounding and we are allowed to ‘throw away’k-1intervals of the budget. By throwing awayk-1intervals, or rounding down more as we call it, we keep the available budget in the algorithm low and the costs of the solution that the algorithm finds (given the initial budgetΔk+T+1),vFPTAS, are lower than without rounding down extra. BecausevFPTASis lower, the a posteriori gap will be lower, since this is computed asvFPTAS-ΔkΔk.Formally, we round down the budget according to the following rounding function:(26)roundmore(Δi-c(t,s),t,s)≔maxk∈NΔk:Δk⩽Δi-s+t-c(t,s).So we lose not just one interval in each block, but a number of intervals equal to the length of the block. It follows that the maximum number of intervals that we lose by rounding equals the total number of periods (T), as before. The roundmore function replaces the round function, defined in Eq. (25).As the FPTAS in the previous section is based on the single-sourcing property, it cannot be applied to the problem with general costs and emissions in a straightforward manner. However, Theorem 6 tells us that there is at most one period with double-sourcing. This leads to the following idea for a general FPTAS.All blocks are ‘normal’ single-sourcing blocks, except for one double-sourcing block, say[t,s]. The costs and emissions in the double-sourcing block depend on which period between t and s, say v, is the double-sourcing period. This implies that t and v are the two production periods in this block. The costs and emissions also depend on how much of the demand in periods v until s is produced in period t and how much in v. Note that the demand fort,…,v-1, the earlier periods in this block, always has to be produced in period t. The costs to satisfy all demand in double-sourcing block[t,s]are between, say,atsandbts. The existence of these bounds follows directly from the boundedness of the lot-sizing problem. These costsatsandbtscan be computed by considering all double-sourcing periods v and calculating the costs corresponding to the situation where there is a set-up (if applicable) in both periods t and v, but all demand in periods v until s is produced in either period t or period v. Now, we iterate over a ‘suitable subset’ of all values betweenatsandbts. These are the ‘double-sourcing block budgets’, $. For each $, we can compute the corresponding best v and (minimum) emissions in the double-sourcing block. For all other blocks, the single-sourcing property holds, so we can use a recursion like in the previous section.The precise recursion is defined as follows:(27)g(t,€)=minmins⩾t:€⩾c(t,s){e(t,s)+g(s+1,round(€-c(t,s)))},mins⩾t,$∈Bts:€⩾${e(t,s,$)+f(s+1,round(€-$))},(28)g(T+1,€)=0,(29)e(t,s,$)=minv=t+1,…,s{e(t,v,s,$)},(30)e(t,v,s,$)=pˆt(Dt,v-1+αtvs$Dv,s)+pˆv((1-αtvs$)Dv,s)+∑τ=tv-1hˆτ(Dτ,v-1+αtvs$Dv,s)+∑τ=vshˆτ(Dτ,s),f(t,€),c(t,s),e(t,s)andround(•)are exactly the same as in Eqs. (23), (20), (21) and (25), respectively.The interpretation of recursion (27) is:g(t,€)gives the minimum emissions in periods t until T, given that there is a budget € and that there may be double-sourcing (once) in periods t until T. To find the value ofg(t,€), we need to determine whether the current block should have double-sourcing or not. The first line of (27) corresponds to the situation in which there is no double-sourcing in the current block[t,s]. In that case, there may be double-sourcing in a later block and we should minimise over all possible values of the next production period, in a recursion that is similar to thef(t,€)recursion (see Section 4.3). If there is double-sourcing in the current block, as in the second line of (27), then we need to minimise over s and$, where s is the end of the current block and$is the amount of money that is spent in double-sourcing block[t,s]. Since there cannot be another block with double-sourcing, the recursion uses the valuef(s+1,€)(see Section 4.3) as the minimum emissions of periodss+1,…,T.The minimum emissions given a budget € are given byg(1,€). Try budget€=Δ1,Δ2,Δ3,…untilg(1,€)⩽C^, i.e., the minimum emissions are less than or equal to the emission cap, whereΔis defined as in Eq. (22).The suitable subset of double-sourcing block budgetsBtsis defined as(31)Bts=$:$=(1+ε)k,k∈N,ats⩽(1+ε)k⩽bts,(32)whereats=minv=t,…,s{c(t,v-1)+c(v,s)},(33)andbts=maxv=t,…,s{c(t,v-1)+c(v,s)}.That is, the double-sourcing block budget $ is equal to(1+ε)kfor some integer k and has to lie between the minimum and maximum costs in the double-sourcing block. See Fig. 3.In Eq. (29)e(t,s,$)gives the minimum emissions in double-sourcing block[t,s], given a budget $. It is computed by minimising over all the possible double-sourcing periods v.In Eq. (30),e(t,v,s,$)gives the emissions in double-sourcing block(t,v,s)(so given the double-sourcing period v), if a budget of $ is spent. If the production and holding emissions are fixed-plus-linear, then this equation reduces to(34)e(t,v,s,$)=αtvs$aˆtvs+(1-αtvs$)bˆtvs,whereaˆtvsandbˆtvsare the emissions to satisfy demand in the double-sourcing block, when there is a set-up (if applicable) in both periods t and v, but all demand in periods v through s is produced in period t, respectively v.αtvs$gives the fraction of demand in periods v through s that is produced in period t, if the budget in double-sourcing block(t,v,s)is $; the remaining(1-αtvs$)is then produced in period v. If the production and holding emissions are fixed-plus-linear, then this is simplyαtvs$=$-btvsatvs-btvs,whereatvsandbtvsare the costs to satisfy demand in the double-sourcing block, when there is a set-up (if applicable) in both periods t and v, but all demand in periods v through s is produced in period t, respectively v. In general,αtvs$is the solution of(35)pt(Dt,v-1+αtvs$Dv,s)+pv((1-αtvs$)Dv,s)+∑τ=tv-1hτ(Dτ,v-1+αtvs$Dv,s)+∑τ=vshτDτ,s=$.We assume that thisαtvs$can be found in constant time. This is the case for e.g. fixed-plus-linear costs, cost functions that are polynomials of degree at most four, and compound functions of which every piece is such a function (as long as the resulting function is concave for relevant production/inventory quantities). Otherwise, if finding anαtvs$takesO(A)time and this is more thanOmax{ln(opt),1}ε, the time complexity becomesOT3max{ln2(opt),1}ε2+T3max{ln(opt),1}ε·A(see ‘Running time’ in Section 4.3). Note that we may approximateαtvs$, for instance with a numerical method like bisection. However, in order for the algorithm to be accurate enough, we may not overestimateαtvs$. (Here we assume that the left hand side in (35) is an increasing function inαtvs$. Otherwise, defineαtvs$new=1-αtvs$.)In practise, the algorithm can be sped up, because we know that for many choices oft,vand s, the triple(t,v,s)does not have to form a double-sourcing block in an optimal solution. This is because Theorem 3 tells us that the single-sourcing property holds for a triple(t,v,s)such thatCt,s⩽Cv,sandC^t,s⩽C^v,sor(Ct,s⩾Cv,sandC^t,s⩾C^v,s). This means that, if these conditions hold for a triple(t,v,s), there exists an optimal solution in which period t is the only production period in block[t,s]. Therefore, it is not necessary to consider all possible second production periods v to compute the minimum in (29).The production schedule corresponding to the solution found by the algorithm can be found through a relatively simple backtracking procedure. For eachf(t,€), we store the optimal s, as before. For eachg(t,€), we store the optimal s, whether double-sourcing in block[t,s]is optimal or not, and if so, which budget $ is optimal. We could also store the optimal double-sourcing period v, but in certain cases, we can choose an approach to make a solution with lower costs by using as much of the (remaining) emission capacity as possible. More details of this approach are given in Appendix C.As in Section 4.3, we verify that the obtained solution is in fact a(1+ε)approximation of the true optimum by answering the question: how much of the budget is ‘wasted’ by repeatedly rounding off the budget?Rounding values of $ costs at most one ‘big’(1+ε)-interval. In the remainder of the algorithm, at mostT+1‘small’Δ-intervals are lost. In Section 4.3, we have shown that these small intervals add up to at most one ‘big’(1+ε)-interval. Hence, the maximum total error isε·opt+ε(1+ε)opt=(2ε+ε2)opt⩽3ε·opt(for0⩽ε⩽1). We could defineε≔δ3to get a(1+δ)approximation. In practise, we chooseε=1+δ-1⩾δ3. That way,εis the positive solution of2ε+ε2=δ.As in the FPTAS for co-behaving costs, there areOTmax{ln(opt),1}εvalues for €. Similarly, we can show that there areOmax{ln(opt),1}εintervals for$, because the number of double-sourcing block budgets$is at most1+εlog(opt)=ln(opt)ln1+ε⩽1+1εln(opt).In total, there areOT2max{ln(opt),1}εvalues of bothg(t,€)andf(t,€)that need to be computed. As in Section 4.3, it takesO(T)time to compute onef(t,€). Computing oneg(t,€)takesOT+T·max{ln(opt),1}ε=OTmax{ln(opt),1}εtime, because there are two minimisations in recursion (27); the first one over periods s; the second one over periods s and$∈Bts. Hence, the total time needed to compute allg(t,€)andf(t,€)isOTmax{ln(opt),1}ε+T3max{ln2(opt),1}ε2=OT3max{ln2(opt),1}ε2.Furthermore, there areOT2max{ln(opt),1}εvalues ofe(t,s,$)that need to be computed. Computing onee(t,s,$)takesO(T)time, so the time needed to compute alle(t,s,$)isOT3max{ln(opt),1}ε. Since alle(t,s,$)can be computed beforehand, it follows that the time complexity of the whole FPTAS isOT3max{ln2(opt),1}ε2.As in the co-behaving case, this algorithm needsOT2max{ln(opt),1}εmemory to store all valuesf(t,€)and the corresponding optimal s, and all valuesg(t,€)and the corresponding optimal s and$. Storing all valuese(t,s,$)requiresOT3max{ln(opt),1}εmemory. Hence, the total required memory is of the same order.As we have shown that the algorithm described in this section is a(1+ε)approximation, we know a priori that the optimality gap of the obtained solution is at most100ε%. Previously, we have seen thatΔk+T+12ε+ε2(or even:Δk+T+1(1+ε)ΔT+1=Δk1+ε) is a lower bound for the optimal value, ifΔk+T+1is the (final) budget € corresponding to the algorithm’s solution. Afterwards, we can compute the actual costs of this solution, which we will callvFPTAS. We know thatvFPTAS⩽Δk+T+1. That means that we can compute the optimality gap more sharply asvFPTAS-Δk1+εΔk1+ε.As in Section 4.3, an even better a posteriori gap can be obtained if we round down €as much as possible during the execution of the algorithm. We round down the budget €according to the roundmore function (see Eq. (26)). As before, it follows that the total number ofΔ-intervals that we lose by rounding € equals the total number of periods (T).In the execution of the FPTASes in Sections 4.3 and 4.4, we encounter many small intervals. For example, we need to computef(t,€)for€=Δ1,Δ2,Δ3,…, even though the optimal value is closer to, say,Δ100. In retrospect, we would not have needed intervals smaller thanε(e-1)(T+1)optfor €. Of course, we do not know the optimal value beforehand. However, we can compute a lower bound (LB) first, so that we know that we do not need intervals smaller thanε(e-1)(T+1)LBfor€during the execution of the FPTAS. We replace all intervals below LB by intervals of sizeε(e-1)(T+1)LB. To see why this works, we look back at the paragraph entitled ‘Correctness of the approximation’ in Section 4.3. Again, suppose we find a solution when€=Δk+T+1(⩾LB). Also, suppose we have a lower bound after executing the algorithm, sayLBpost. In Section 4.3, this lower bound is equal toΔk; now, it isLBpost=max{Δk,LB}. IfLB⩾Δk, then it follows that we have found a(1+ε)approximation, becauseopt-LB⩽opt-Δk⩽Δk+T+1-Δk⩽Δk(ΔT+1-1)⩽Δk(1+ε-1)⩽LB·ε⩽opt·ε, where the correctness of the fourth inequality was shown in Section 4.3. Alternatively, suppose thatΔk>LB. In the worst case, we have lost theT+1intervals due to rounding. In the proof in Section 4.3, we have shown that losing theT+1biggest intervals still resulted in a(1+ε)approximation. There, the smallest of the biggest intervals had sizeΔk+1-Δk=Δk(Δ-1)=Δk·ε(e-1)(T+1). In the algorithm in this section, the intervals above LB are the same as before; the intervals below LB have sizeε(e-1)(T+1)LB⩽ε(e-1)(T+1)Δk. Because theT+1biggest intervals that can be lost in this section have the same size as or are smaller than in Section 4.3, we conclude that we still have a(1+ε)approximation.Similarly, we may use intervals of size at leastε·LBfor $ in the FPTAS for general costs and emissions. We replace all intervals below LB by intervals of sizeε·LB. See Fig. 4for an example withLB=4ε=(1+ε)k.In the computational tests of the next section, we will use the Lagrangian heuristic from Section 4.1 to compute a lower bound, but of course any method to compute a nonzero lower bound would do.We would like to point out that, if we have a nonzero lower bound that we use in the FPTASes, the assumption of integer demand and cost functions, which we made in Section 4.2, is not necessary anymore. The only reason why we needed this assumption for correctness of the FPTASes, is that 1 had to be a trivial lower bound for the problems. This is because the FPTASes in the previous sections have one big interval between 0 and1=Δ0=(1+ε)0for€and $. (Note that the points after this,Δ0,Δ1,Δ2,…or(1+ε)0,(1+ε)1,(1+ε)2,…, are much closer to each other in general.) A problem instance with an optimal value lower than 1 would therefore require more intervals between 0 and 1. However, if we use a nonzero lower bound in the FPTASes in this section, we already know that all intervals have a size of at mostε(e-1)(T+1)LBfor€andε·LBfor $, and that these intervals are small enough, as discussed above. Of course, it is possible that we are unable to find a nonzero lower bound. In this case, the assumption of integer demand and cost functions can still be useful, because it guarantees a nonzero lower bound (namely 1), but any other method to obtain a nonzero lower bound would suffice for the FPTASes in this section.To determine the running times of both FPTASes if we use the minimum interval size as described above, we must compute the new numbers of values for€and$.For the total budget€, we compute the number of values that we had in the FPTAS before, subtract the number of values that lay below LB (as these values will not be used anymore), and add the number of newly created, larger intervals that lie below LB. We get:1+ε(e-1)(T+1)log(opt)-1+ε(e-1)(T+1)log(LB)+LBε(e-1)(T+1)LB⩽1+ε(e-1)(T+1)log(opt)-1+ε(e-1)(T+1)log(LB)+(e-1)(T+1)ε+3=1+ε(e-1)(T+1)logoptLB+(e-1)(T+1)ε+3,so there areOTmax{lnoptLB,1}ε+Tε=OTmax{lnoptLB,1}εvalues for €, using the same argument as in Section 4.3.For the double-sourcing block budget$, the analysis is similar. We get:1+εlog(opt)-1+εlog(LB)+LBε·LB⩽1+εlog(opt)-1+εlog(LB)+1ε+3=1+εlogoptLB+1ε+3,so there areOmax{lnoptLB,1}ε+1ε=Omax{lnoptLB,1}εvalues for $, using the same argument as in Section 4.4.This gives the following running times:•OT3maxlnoptLB,1εfor the FPTAS for co-behaving costs and emissions plus the running time of the algorithm that provides the lower bound. The Lagrangian heuristic from Section 4.1 that we use, for instance, has a running time ofO(T4), giving a total running time ofOT3maxlnoptLB,1ε+T4. This can be reduced toOT3maxlnoptLB,1εfor fixed-plus-linear costs and emissions if anO((TlnT)2)implementation of the heuristic is used, i.e., one that is based on anO(TlnT)algorithm for the classic lot-sizing problem, such as Wagelmans, Van Hoesel, and Kolen (1992).OT3maxln2optLB,1ε2for the FPTAS for general costs; again plus the running time of the algorithm that provides the lower bound.It follows that the FPTAS for co-behaving costs and emissions needsOT2maxlnoptLB,1εmemory and the general FPTAS needsOT3maxlnoptLB,1εmemory.The FPTASes that we developed have some nice theoretical properties regarding their running times and approximation qualities. However, we are also interested in their practical performance. Moreover, we would like to know how well the Lagrangian heuristic performs on a large number of test instances. Therefore, we have randomly generated 1800 problem instances. These instances are solved with all of the algorithms presented in this paper. More specifically, these are:•the Lagrangian heuristic (‘Megiddo’) from Section 4.1;the pseudo-polynomial algorithm for co-behaving costs and emissions (PP-CB) from Section 4.2, if the instance satisfies the conditions for co-behaviour in Theorem 3;the FPTAS for co-behaving costs and emissions (FPTAS-CB) from Section 4.3, again only if the instance is co-behaving indeed;the FPTAS for co-behaving costs and emissions that uses the lower bound generated by Megiddo (FPTAS-CB-LB), again only if the instance is co-behaving;the general FPTAS (FPTAS-gen);the general FPTAS that uses the Megiddo lower bound (FPTAS-gen-LB);for comparison purposes, we included the cplex 12.4 solver. We used this solver on the ‘natural’ formulation, as defined in Eqs. (6)–(12), as well as on the shortest path reformulation. The shortest path reformulation, as introduced by Eppen and Martin (1987), is known to have a better linear programming relaxation.For each of the FPTASes, three values ofεwere used: 0.10, 0.05 and 0.01. The FPTASes that use Megiddo’s lower bound (FPTAS-CB-LB and FPTAS-gen-LB) were executed even when the feasible solution found by Megiddo was within(1+ε)from the lower bound. This was done in order to reduce the a posteriori gap, even though it was not strictly necessary.The values of the problem parameters were chosen in the following way. Although the algorithms are suitable for more general concave functions, all cost and emissions functions were assumed to have a fixed-plus-linear structure. This is a common cost structure in the literature. Moreover, it allowed us to also solve the instances with ibm ilog cplex, so that we can compare our algorithms’ solutions with the optimal solution.The time horizons that we considered were 25, 50 and 100 periods. Horizons as long as 100 period were considered, because the number of time periods in our model (T) may correspond tom·T′for instances with m production modes andT′periods.First, we generated instances that satisfy the co-behaviour conditions in Theorem 3. Demand was generated from a discrete uniform distribution with minimum 0 and maximum 200 (and thus mean 100). Both the set-up costs and emissions were drawn from three different discrete uniform distributions: DU(500, 1500), DU(2500, 7500) and DU(5000, 15,000) (with means 1000, 5000 and 10,000).pt,pˆt,htandhˆtwere all generated from DU(0, 20), but we only kept those(p,pˆ,h,hˆ)that satisfy the conditions in Theorem 3.The second group of instances was generated from the same distributions, with the same parameters, but we only kept those(p,pˆ,h,hˆ)such that exactly12Tperiod pairs(t,s)are eligible for double-sourcing. That is, for12Tpairs the conditions in Theorem 3 were violated.The third group of instances was different from the other data sets in the sense that periods always occurred in (consecutive) pairs, where the even periods have low production and set-up costs and high production and set-up emissions, and the odd periods have high costs and low emissions. To be precise,ptwas drawn from DU(0, 9) for t even and from DU(11, 20) for t odd;pˆtwas drawn from DU(11, 20) for t even and from DU(0, 9) for t odd. The low set-up costs and emissions,KtandK^s, for t even and s odd, were drawn from DU(500, 1500). The high set-up costs and emissions, for t odd and s even, were both drawn from DU(2500, 7500) and DU(5000, 10,000) . The holding costs and emissions between two periods within one pair were always zero. Between two pairs, they were drawn from DU(0, 20). Demand was zero in the first period of a pair, and in the second period generated from DU(0, 200). The numbers of periods we considered are 26, 50 and 100. Generating the data in this way corresponds to a problem with12Tperiods, but with two production modes, ‘cheap & dirty’ and ‘expensive & clean’. These instances show similarities with the instance that was used in theNP-hardness proof (Theorem 1), so we expect that they are difficult to solve.Ten instances were generated for every combination of the parameter settings that were described above, giving 600 data sets. Every instance thus generated was combined with three different values of the emission capacity. We letC^=[βC^min+(1-β)C^max], whereβ=0.25,0.5,0.75,C^minis the level of emissions when emissions are minimised, ignoring costs, andC^maxis the level of emissions when costs are minimised, ignoring emissions. In total, this gave600·3=1800instances.All algorithms were implemented in a Java program that was used to solve all instances on a Windows 7-based PC with an Intel Xeon X5667 processor (4×3.06GHz) and 12GB RAM.

@&#CONCLUSIONS@&#
