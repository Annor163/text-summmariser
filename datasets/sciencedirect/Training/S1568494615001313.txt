@&#MAIN-TITLE@&#
A novel multi-objective meta-heuristic model for solving cross-docking scheduling problems

@&#HIGHLIGHTS@&#
Cross-docking is a material handling technique in supply chain management.We consider multi-objective mathematical modeling for solving cross-docking problems.We propose genetic algorithm and particle swarm optimization to solve the problem.We minimize the make-span, transportation cost and the number of truck trips.

@&#KEYPHRASES@&#
Supply chain,Cross-docking,Non-dominated sorting genetic algorithm,Particle swarm optimization,Scheduling,Transportation planning,

@&#ABSTRACT@&#
Cross-docking is a material handling and distribution technique in which products are transferred directly from the receiving dock to the shipping dock, reducing the need for a warehouse or distribution center. This process minimizes the storage and order-picking functions in a warehouse. In this paper, we consider cross-docking in a supply chain and propose a multi-objective mathematical model for minimizing the make-span, transportation cost and the number of truck trips in the supply chain. The proposed model allows a truck to travel from a supplier to the cross-dock facility and from the supplier directly to the customers. We propose two meta-heuristic algorithms, the non-dominated sorting genetic algorithm (NSGA-II) and the multi-objective particle swarm optimization (MOPSO), to solve the multi-objective mathematical model. We demonstrate the applicability of the proposed method and exhibit the efficacy of the procedure with a numerical example. The numerical results show the relative superiority of the NSGA-II method over the MOPSO method.

@&#INTRODUCTION@&#
Cross-docking is a material handling and distribution method for moving goods directly from receiving to shipping. The primary objective in cross-docking is to eliminate storage and excessive handling [1]. Cross-docking can reduce inventories, increase operational efficiency, shorten product delivery time, increase customer satisfaction and responsiveness, and tighten control in the distribution operation. Cross-docking has become a widely used distribution method as companies streamline their distribution functions. In supply chain management, cross-docking is a logistics method for minimizing the need for warehouse storage and coordinating the distribution activities related to loading goods between delivery vehicles and shipping vehicles. In general, five activities are conducted in the distribution centers: reception, organizing, storing, selection, and transfer. Improving these activities can have a direct impact on the productivity in a supply chain.Handling freight at cross-docking terminals is a complex planning task which comprises several activities including unloading shipments delivered by inbound trucks, sorting according to designated destinations, and loading onto outbound trucks delivery. Cross-docking operations need to be carefully synchronized due to the absence of storage facilities inside a cross-dock [2–5]. This synchronization requires coordination between the performance of inbound and outbound trucks so that these trucks can be effectively scheduled for delivery.Lee et al. [6] argue that previous studies have dealt mostly with the conceptual advantages of cross-docking from the strategic viewpoint. They consider both cross-docking and vehicle routing scheduling and propose a heuristic algorithm based on a tabu search to solve this NP hard problem. Waller et al. [7] developed models to predict the changes in the retailer's system-wide inventory levels as a result of cross-docking and examined the impact of a number of relevant parameters on the cross-docking performance. Yan and Tang [8] and Tang and Yan [5] constructed analytical models for distribution strategies for two different types of cross-docking: pre-distribution cross-docking and post-distribution cross-docking. They developed three models and showed that pre-distribution cross-docking is preferred for environments with shorter supply lead time and lower uncertainty in demand. Chen and Lee [9] studied the scheduling problem in cross-docking and showed that the problem is a NP-hard problem. They developed a polynomial approximation algorithm with an error-bound analysis. Chen and Song [10] also studied the scheduling problem in cross-docking and used a mixed integer programming model to minimize the total operational time (makespan).Vahdani and Zandieh [11] applied five meta-heuristic algorithms: the genetic algorithm, tabu search, simulated annealing, an electromagnetism-like algorithm and a variable neighborhood search to schedule the trucks in a cross-docking system by minimizing total operation time when a storage facility is used to temporarily hold goods at the shipping dock. They showed that the variable neighborhood search outperforms the other four methods in this study. Liao et al. [12] considered a model for integrating cross-docking into the vehicle routing problem. The objective of their model was to determine the number of vehicles and a set of vehicle schedules to minimize the sum of the operational and transportation costs. They proposed a new tabu search algorithm and obtained a good feasible solution for the problem.Boloori Arabani et al. [13,14] studied three famous multi-objective algorithms including the non-dominated sorting genetic algorithm-II (NSGA-II), the strong Pareto evolutionary algorithm-II (SPEA-II), and the sub-population genetic algorithm-II (SPGA-II) to solve the cross-docking scheduling problems. They considered the makespan and the total lateness of all outbound trailers as objective functions and used four criteria to evaluate each algorithm. Boloori Arabani et al. [15] also studied a scheduling problem of inbound and outbound trucks in a cross-docking system. Again they considered minimization of the total makespan and minimization of the total lateness of outbound trucks and developed three multi-objective algorithms based on the sub-population concept of evolutionary algorithms. Sadykov [16] proposed a dynamic programming algorithm to optimize the schedule for both inbound and outbound trucks when products are unloaded in the inbound door but the corresponding outbound truck is not immediately available in the outbound door. Kuo [17] studied the efficiency of multi-door cross docking by optimizing both inbound and outbound truck sequencing and both inbound and outbound truck dock assignment. A variable neighborhood search algorithm was proposed to minimize the makespan and optimize the sequence of all inbound and outbound trucks. Four simulated annealing algorithms were adopted for comparison. The experimental results showed that the proposed variable neighborhood search algorithm was efficient and effective in solving cross-docking problems.Larbi et al. [18] argue that little attention has been given to the transshipment operations inside a cross-dock. They studied the transshipment scheduling problem in a single receiving and a single shipping door cross-dock under various conditions including complete information on the order of arrivals and the contents of all inbound trucks, and the availability of partial and no information on the sequence of upcoming trucks. They proposed an optimal graph based model for the full information case and two heuristics for the other two cases. Liao et al. [19] considered minimizing total makespan or equivalently maximizing the throughput of a cross-docking system and studied inbound and outbound truck sequencing for cross-docking operations. They proposed two new hybrid differential evolution algorithms which performed better than the pure differential evolution algorithms in the literature. The also used 30 problems to test the effectiveness of the proposed algorithms. Liao et al. [20] also studied the simultaneous dock assignment and sequencing of inbound trucks for a multi-door cross docking operation with the objective of minimizing the total weighted tardiness. They solved the problem with six different meta-heuristic algorithms including simulated annealing, tabu search, ant colony optimization, differential evolution, and two hybrid differential-evolution algorithms.Meysam Mousavi and Tavakkoli-Moghaddam [21] formulated a two-stage mixed-integer programming problem for cross-docking location planning and solved this problem with a two-stage hybrid simulated annealing and tabu search model. They randomly generated several problems and showed that the proposed hybrid simulated annealing performs efficiently and converges rapidly to reasonable solutions. Bellanger et al. [22] studied the optimization of a cross-docking system by modeling the system as a three-stage (i.e., receiving dock, sorting stations, and shipping docks) hybrid flow shop, in which shipments and orders were represented as batches. Their goal was to find a schedule that minimizes the completion time of the latest batch. They developed several heuristic schemes which produced good quality feasible solutions. They then proposed a branch-and-bound algorithm that took the three stage problem decomposition into consideration. They also proposed a lower bound to evaluate the heuristics and to reduce the tree size during the branch-and-bound computation. They conducted several computational experiments and showed that their algorithm provided good quality feasible solutions.Meysam Mousavi et al. [23] introduced two novel deterministic mixed-integer linear programming models for determining the location of cross-docking centers and scheduling of the vehicle routing problem. They also proposed a hybrid fuzzy possibilistic–stochastic programming solution to incorporate two kinds of uncertainties into their mathematical programming models. They generated several test problems and appraised the applicability and suitability of the proposed model. Agustina et al. [24] studied cross-docking operations for just-in-time food delivery with minimum cost of delivery (i.e., inventory holding and transportation costs) and penalty costs for early or tardy deliveries. They integrated vehicle scheduling and routing, which have traditionally been modeled separately, in one comprehensive model. They formulated the problem as a mixed-integer linear program. They also introduced the concept of customer zones to reduce the size of the solution space. Van Belle et al. [25] have presented an extensive review of the cross-docking literature and concepts. They have also discussed guidelines for the successful use and implementation of cross-docking strategies.In this study, we focus on the cross-docking transportation operations in a supply chain. As shown in Fig. 1, the incoming trucks with varying capacities ship the products directly from suppliers to customers or offload them in the cross-dock. The products are then shipped by the outgoing trucks with different capacities from the cross-dock to the customers. In other words, each truck can ship products from one or more suppliers. In addition, a given truck can ship the products to one or more customers. The figure shows that the trucks which are used in transportation have different capacities.We propose a multi-objective mathematical model for minimizing the make-span, transportation cost and the number of truck trips in the supply chain. The proposed model allows a truck to travel from a supplier to the cross-dock facility and from the supplier directly to the customers. We propose two meta-heuristic algorithms, the NSGA-II and the multi-objective particle swarm optimization (MOPSO), to solve the multi-objective mathematical model. We also demonstrate the applicability of the proposed method and exhibit the efficacy of the procedure with a numerical example.The remainder of this paper is organized as follows. In Section 2, we review multi-objective evolutionary algorithms including the NSGA-II method and the MOPSO method. In Section 3, we present the multi-objective cross-docking model proposed in this study. In Section 4, we demonstrate the applicability of the proposed method and exhibit the efficacy of the procedure with a numerical example. In Section 5, we perform a comparative analysis between the NSGA-II method and the MOPSO method. Finally, in Section 6, we present our conclusions and future research directions.Evolutionary algorithms are stochastic search methods that are designed to emulate the language of natural biological evolution. These search methods apply the principle of survival of the fittest to a population of alternative solutions in order to produce better solutions to a problem. The most important advantage of evolutionary algorithms in multi-objective optimization problems is their capacity to achieve a set of non-dominated solutions without assigning weights to the target functions which are a function of the decision makers’ views. The notion of searching a solution space is a key characteristic of evolutionary algorithms which makes them suitable for multi-objective optimization [26]. Evolutionary algorithms used for solving multi-objective optimization problems are known as multi-objective evolutionary algorithms (MOEAs). We apply two known multi-objective meta-heuristic algorithms, the NSGA-II and MOPSO, to achieve an optimum solution in the cross-docking problem introduced in this paper.As the number of goals have increased in the optimization problems, more applications of multi-objective genetic algorithms (which have been an outgrowth of single-objective algorithms) have been considered. Deb [27] proposed a non-dominated sorting genetic algorithm (NSGA-II) which has been transformed into a multi-objective algorithm by the addition of two necessary operators to a single-objective genetic algorithm. The two operators are: (1) the operator which assigns a superiority criterion (ranking) to the members of the population based on non-dominated sorting; (2) the operator which maintains the variety of solutions among the ones with similar ranks. This method can find the set of best solutions, known as the optimal front, instead of a single best solution. In this algorithm, it is necessary to explain the concepts of dominance, non-dominated sorting, and swarm distance.In the NSGA-II method, the members of populations are sorted according to the concept of non-dominance. In the non-dominant sorting method, the non-dominated members of the population are assigned a ranking of 1 and they are put in the first front set. They are then removed from the population and among the remaining members, the non-dominated members are selected and a ranking of 2 is assigned to them. These members are put in the second front and they are removed from the population temporarily. This process continues until all the members of the population are put in different fronts (Fig. 2). The dominance of one point with respect to another point has been shown in Eq. (1). This shows that point b is dominated by point a. fiand fjare target functions i and j.(1)∀i∈{1,…,n}:fi(a)≥fi(b)∧∃j∈{1,…,n}:fj(a)>fj(b)When a single-objective algorithm is discussed, the superiority of solutions relative to each other is very simple and clear, because there is only one target function. For minimization problems, the minimum value of the target function is the best solution and it is superior to the other solutions. However, a multi-objective algorithm requires at least two target functions. In most cases, some points are found which are not superior to each other and that cannot be compared with each other by the concept of dominance. Therefore, they should be sorted according to a criterion in order to obtain the best solutions. In this algorithm, each solution is assigned a rank based on the number of dominations relative to other points. At the end of the algorithm, those points which have the best rank (rank 1) are identified as the solution set or Pareto front points.After arranging the points in the fronts, another criterion is used to evaluate the points in a front which does not have swarm distance. The swarm distance is a substitute for shared in the NSGA method. First, the results are sorted for every target function Z. Those points which have the maximum and minimum values of the target function are assigned extreme distance values. The swarm distance for the members of the population in each front is calculated according to Eqs. (2)–(4). As shown in Fig. 3, the distances are considered among the members that are in the same front.(2)cd1(x)=z1i+1−z1i−1z1max−z1min(3)cd2(x)=z2i+1−z2i−1z2max−z2min(4)cd(x)=cd1(x)+cd2(x)The reason behind the creation of these two operators in a multi-objective genetic algorithm is related to the selection stage. In this stage, a number of chromosomes should be selected from the chromosomes of the parents and children in order to start the next stage and other solutions should be deleted. Fig. 4shows one of the iterations in the NSGA-II algorithm.PSO is a social search algorithm which has been copied from the behavior of birds’ flocks. This algorithm was introduced for the first time by Eberhart and Kennedy [28]. The PSO was initially used to discover the patterns of birds’ flight and the sudden changes that happen in their course of flight as well as the optimum changes in the shape of the flock. The PSO algorithm begins with a group of random answers (particles) and then it seeks to find the optimum answer by sorting (finding new positions) the particles in each repetition. When decision variables and particle positions are equal to zero and one, velocity and position vectors of each particle in each iteration of the algorithm are calculated by Eqs. (5)–(8).(5)Vit=w.Vit−1+c1.r1.(pBesti−xit)+c2.r2(nBesti−xit)(6)−Vmax≤Vit≤Vmax(7)si=11+exp(−Vit)(8)xit=1ρ≤si0otherwiseAccording to Eq. (5), the new velocity vector of each particle is calculated by the previous velocity of the same particle (Vit−1), the optimum position which has been achieved by the particle (pBesti), and the position of the best particle which is near to that particle (nBesti). When the neighborhood of the particle includes all the particles of the group, nBestiis the position of the best particle in the group which is denoted by Gbest. r1 and r2 are two random numbers generated independently by a normal distribution in [0,1]. c1 and c2, which are called the learning coefficients, control the impact of pBest and nBest on the search process. w is the inertia weight coefficient. Vmax is the maximum of particles’ velocity vector. Vmax is a constraint that controls the capability of the particles’ universal search. Using Eq. (7), we can transfer each particle's velocity vector to change the probability vector. In this equation, siindicates the probability of xit=1. The new position of each particle is found by Eq. (8). The new positions of the particles are taken as the new inputs of the simulation model of the particles’ movement in the second iteration. Then, the target function is obtained once again. This process continues until the maximum number of iterations is reached. In this equation, ρ is assumed to be a random variable normally distributed between zero and one. The position of each particle is determined by its relative position to the other particles.Moreover, the movement toward the optimum point is different in the single-objective PSO and the MOPSO.In the single-objective PSO algorithm, each particle follows its target function. In the MOPSO algorithm, we have more than one target function. Therefore, the algorithm should be compatible with all the target functions. The vector evaluation PSO is a multi-objective algorithm which uses one set for every target function. Consequently, in each set, each particle has its specific Pbest. But, in each set, Gbest is replaced by the Gbest of other sets for the next iterations. Fig. 5presents an example of Pbest and Gbest exchange in a triple-objective problem [29].In the proposed method, a dynamic archive for the exchange of produced particles is created in each iteration. The particles are compared to each other, the non-dominated solutions are maintained, and other solutions are deleted at the end of each iteration. In this process, we have access to the members of the external archive in each iteration. Also, the size of the external archive is changed dynamically.We consider three minimization goals in the cross-docking model proposed in this study: the time of transportation operations, the expenses of transportation by the trucks, and the number of transportations by the trucks between sources and targets. Also, the number and capacity of the trucks, the distances which are covered by the trucks between sources and targets, the time of shipment and offloading, and the time of products’ movement in the cross-docking are modeled using uniform distribution functions with different domains. Table 1presents the random data spans for each problem.The following hypotheses are applicable to the model proposed in Section 3.2:•All incoming and out-going trucks are accessible at zero time.All incoming trucks can act as an out-going truck.All products in cross-docking should be transferred to the customers and are not allowed to be stored for a long period of time.The capacity of cross-docking is unlimited.The number and type of supplied products are fixed.The number and type of products which are demanded by customers are fixed.The number of suppliers, customers, and cross-dockings are fixed.In a sequence of transportation, a truck can carry the products of more than one supplier and also it can offload the products for more than one customer.In a sequence of transportation, based on the allowed capacity, a truck can transport the whole or part of a customer's demands.The demands of a given customer might be satisfied by one or more suppliers.The incoming and out-going trucks cannot carry more products than their capacities.The type and amount of products which are carried by incoming trucks should be equal to the customers’ demands, andif the amount of products which are offloaded by incoming trucks in the cross-docking is very high, these products can be stored temporarily until the time of transportation to the targets.The following variables and parameters are used in the model proposed in this study:IndicesNthe number of suppliersthe number of customersthe number of incoming trucks (reception)the number of out-going trucks (dispatch)the number of incoming and out-going trucksthe number of shipment and offloading conditionsthe capacity of the trucksa large numberthe number of products unit in α condition needed by the customer (c)the number of products unit in α condition needed by the supplier (s)TimeTcdsαithe time of transportation by the incoming truck i from cross-docking (cd) to supplier (s), while it is shipping type α orderthe time of transportation by the incoming truck i from supplier (s) to customer (c), while it has shipped type α orderthe time of transportation by the incoming truck i from supplier (s) to cross-docking (cd), while it has shipped type α orderthe time of transportation of a k type product from the entrance of cross-docking (r) to its exit (sh)the time of transportation by the out-going truck j from cross-docking (cd) to customer, while it has shipped type α orderthe time of transportation by the incoming truck i from supplier in the source (sm) to the supplier in the target (sn), while it is shipping type α orderthe time of transportation by the incoming truck i from the customer in the source (cm) to the customer in the target (cn), while it is offloading type α orderthe time of transportation by the outgoing truck j from the customer in the source (cm) to the customer in the target (cn), while it is offloading type α orderthe time of transportation by the incoming truck i from customer (c) to cross-docking (cd), while it has offloaded type α orderthe time of transportation by the outgoing truck j from customer (c) to cross-docking (cd), while it has offloaded type α orderthe time required for the last truck g to return from the last customer in the source (cn) and arrive at cross-docking (cd), while it has offloaded type α orderthe time required for type α order to be shipped in the incoming truck i by supplier (s)the time required for type α order to be offloaded from incoming truck i into cross-docking (cd)the time required for type α order to be offloaded from incoming truck i to the customer (c)the time required for type α order to be shipped from cross-docking (cd) by the out-going truck jthe time required for type α order to be offloaded from out-going truck j to the customer (c)ExpensesCcdsαithe expenses related to the transportation by incoming truck i from cross-docking (cd) to supplier (s), while type α order is shippedthe expenses related to the transportation by incoming truck i from supplier (s) to customer (c), while it has shipped type α orderthe expenses related to the transportation by incoming truck i from supplier (s) to cross-docking (cd), while it has shipped type α orderthe expenses related to the transportation of type k products from the entrance of cross-docking (r) to its exit (sh)the expenses related to the out-going truck j from cross-docking to customer (c), while it has shipped type α orderthe expenses related to the transportation by incoming truck i from the source supplier (sm) to target supplier (sn), while type α order is shippedthe expenses related to transportation by incoming truck i from source customer (cm) to target customer (cn), while it offloads type α orderthe expenses related the transportation by out-going truck j from source customer (cm) to target customer (cn), while it offloads type α orderthe expenses related to the transportation by incoming truck i from customer (c) to cross-docking (cd), while it has offloaded type α orderthe expenses related to the transportation by out-going truck j from customer (c) to cross-docking (cd), while it has offloaded type α orderInteger variablesqαsthe number of product units α which are shipped by incoming trucks i from suppliersthe number of product units α which are shipped by out-going truck j from cross-dockingthe number of transportations by trucks between sources and targetsthe time of transportationthe expenses of transportationZero and one variablesXcdsαi=1whentheincomingtruckimovesfromcrossdocking(cd)towardsupplier(s)anditshipstypeαorder0inothercasesXsmsnαi=1whentheincomingtruckimovesfromsourcesupplier(sm)towardtargetsupplier(sn)anditshipstypeαorder0inothercasesXscdαi=1whentheincomingtruckimovesfromsupplier(s)towardcrossdocking(cd)andithasshippedtypeαorder0inothercasesXscαi=1whentheincomingtruckimovesfromsupplier(s)towardcustomer(c)andithasshippedtypeαorder0inothercasesXcmcnαi=1whentheincomingtruckimovesfromsourcecustomer(cm)towardtargetcustomer(cn)andithasshippedtypeαorder0inothercasesXcmcnαj=1whentheout-goingtruckjmovesfromsourcecustomer(cm)totargetcustomer(cn)andithasshippedtypeαorder0inothercasesXcdcαj=1whentheout-goingtruckjmovesfromcrossdocking(cd)towardcustomer(c)andithasshippedtypeαorder0inothercasesXccdαi=1whentheincomingtruckimovesfromcustomer(c)towardcrossdocking(cd)andithasoffloadedtypeαorder0inothercasesXccdαj=1whentheout-goingtruckjmovesfromcustomer(c)towardcrossdocking(cd)andithasoffloadedtypeαorder0inothercasespij=1whenincomingtruckitakesprecedenceoverincomingtruckj0inothercasesqg1g2=1whentruckg1takesprecedenceovertruckg20inothercasesThe set of variables and parameters described above define a supply chain environment that integrates a standard cross-docking process within its logistic structure. In particular, the logistic framework defined by these variables is presented in Figs. 6 and 7. These figures can be directly compared with Fig. 1, which represents the standard textbook case of a cross-docking process integrated within a supply chain.We have separated the transportation duties of incoming and outgoing trucks to make the model more tractable. Note how, incoming trucks do not connect the cross-dock directly with the customer, a task reserved exclusively for outgoing trucks. At the same time, incoming trucks are in charge of collecting orders from the supplier and either bringing them back to the cross-dock or delivering them to the customers. Thus, the model proposed extends the main research environments formalized in the current cross-docking literature, which range from different variants of the cross-docking scheduling problem [13,14,30] to vehicle routing [6], and integrates them within a supply chain structure.As we will emphasize in the following section, the decision variables of the mathematical model define a binary decision vector to which the NSGA-II and MOPSO algorithms can be applied. Moreover, we design the multi-objective optimization problem in a way such that the binary decision vector determining the entire transportation structure extends the sequential transportation structure defined by Boloori Arabani et al. [13,14] within a more complex supply chain setting. The main contribution of the current paper is the formalization of this logistic structure together with the definition of the multi-objective optimization problem in a way such that it can be analyzed and solved using standard evolutionary algorithms.The mathematical model proposed in this study is based on three different target functions. As emphasized above, the model has been designed so that the transportation sequences determining the logistic structure of the model are encoded in a binary decision vector. IfX=[Xi,Xj]is the decision vector of the problem, i.e.,X=[Xcdsαi,Xsmsnαi,Xscdαi,Xscαi,Xcmcnαi,Xccdαi,Xcdcαj,Xcmcnαj,Xccdαj],∀α∈K,i∈R,j∈H, andz=[T(Xi,Xj),C(Xi,Xj),F(Xi,Xj)]is the target vector, the target functions and the range of the decision variables of the model can be defined as follows:(9)T:MinZ1=∑i=1R∑s=1NTcdsαi+Lcdsαi×Xcdsαi+∑i=1R∑s=1NTsmsnαi×Xsmsnαi+∑i=1R∑s=1N∑k=1KTscdαi+ULscdαi+Trshk×Xscdαi+∑i=1R∑s=1N∑c=1MTscαi+ULscαi×Xscαi+∑i=1R∑c=1MTcmcnαi×Xcmcnαi+∑j=1H∑c=1M(Tcdcαj+Lcdcαj+ULcdcαj)×Xcdcαj+∑j=1H∑c=1MTcmcnαj×Xcmcnαj+∑i=1R∑c=1NTccdαi×Xccdαi+∑j=1H∑c=1MTccdαj×Xccdαj(10)C:MinZ2=∑i=1R∑s=1NCcdsαi×Xcdsαi+∑i=1R∑s=1NCsmsnαi×Xsmsnαi+∑i=1R∑s=1N∑k=1KCscdαi+Crshk×Xscdαi+∑i=1R∑s=1N∑k=1KCscαi×Xscαi+∑i=1R∑c=1MCcmcnαi×Xcmcnαi+∑j=1H∑c=1MCcdcαj×Xcdcαj+∑j=1H∑c=1MCcmcnαj×Xcmcnαj+∑i=1R∑c=1MCccdαi×Xccdαi+∑j=1H∑c=1MCccdαj×Xccdαj(11)F:MinZ3=∑i=1R∑j=1H∑c=1M∑s=1N(Xcdsαi+Xsmsnαi+Xscdαi+Xscαi+Xcmanαi+Xcdcαj+Xcdαi+Xccdαj)s.t.:(12)T≥Tcncdαg×Xccdαg∀g∈{iorj}(13)∑i=1R∑s=1Nqαs×Xcdsαi=Pcα∀α∈K&∀c∈M(14)∑j=1H∑c=1Mqαcd×Xcdcαj+∑i=1R∑s=1N∑c=1Mqαs×Xscαi=Psα∀α∈K&∀s∈N(15)∑i=1R∑s=1NXcdsαi≥1∀α∈K,∀s∈N&∀i∈R(16)Xcdsαi=∑i=1R∑s=1NXssnαi+∑i=1R∑s=1NXscdαi+∑i=1R∑s=1N∑c=1MXscαi∀α∈K&∀i∈R(17)Xsmsnαi=∑i=1R∑s=1NXsnskαi+∑i=1R∑s=1NXsncdαi+∑i=1R∑s=1N∑c=1MXsncαi∀α∈K&∀i∈R(18)Xcdcαj=∑j=1H∑c=1MXcmcnαj+∑j=1H∑c=1MXccdαj∀α∈K&∀j∈H(19)Xcmcnαi=∑i=1R∑c=1MXcnckαi+∑i=1R∑c=1MXccdαi∀α∈K&∀i∈R(20)Xcmcnαj=∑j=1H∑c=1MXcnckαj+∑j=1H∑c=1MXccdαj∀α∈K&∀j∈H(21)Xscαi=∑i=1R∑c=1MXcmcnαi+∑i=1R∑c=1MXccdαi∀α∈K&∀i∈R(22)∑i=1R∑s=1Nqαs×Xscdαi=∑j=1H∑c=1Mqαcd×Xcdcαj∀α∈K(23)Tcdsαj×Xcdsαj≥(Bsmsnαi×Xsmsnαi+Bscαi×Xscαi+Bscdαi×Xscdαi)−E(1−Pij)∀α∈K,∀i∈R,∀j∈H,∀s∈N&∀c∈M(24)Tcdsαi×Xcdsαi≥(Bsmsnαj×Xsmsnαj+Bscαj×Xscαj+Bscdαj×Xscdαj)−(E×Pij)∀α∈K,∀i∈R,∀j∈H,∀s∈N&∀c∈M(25)Tcdcαg2×Xcdcαg2+Tscαg2×Xscαg2≥(Accdαg1×Xccdαg1+Acmcnαg1×Xcmcnαg1)−E(1−qg1g2)∀α∈K,∀s∈N&∀c∈M,∀g1&g2∈{iorj}(26)Tcdcαg1×Xcdcαg1+Tscαg1×Xscαg1≥(Accdαg2×Xccdαg2+Acmcnαg2×Xcmcnαg2)−(E×qg1g2)∀α∈K,∀s∈N&∀c∈M,∀g1&g2∈{iorj}(27)Bsmsnαi×Xsmsnαi+Bscαi×Xscαi+Bscdαi×Xscdαi≥∑s=1N(Tcdsαi+Lcdsαi)×Xcdsαi+∑s=1NTsmsnαi×Xsmsnαi(28)Acmcnαg×Xcmcnαg+Accdαg×Xccdαg≥∑s=1N∑c=1M(Tscαi+ULscαi)×Xscαi+∑c=1M(Tcdcαj+Lcdcαj+ULcdcαj)×Xcdcαj+∑c=1MTcmcnαg×Xcmcnαg(29)∑s=1NXcdsαi×qαs≤Qi∀α∈K&∀i∈R(30)∑c=1MXcdcαj×qαcd≤Qj∀α∈K&∀j∈H(Xcdsαi,Xsmsnαi,Xscdαi,Xscαi,Xcmcnαi,Xcdcαj,Xcmcnαj,Xccdαi,Xccdαj)∈{0,1}i=1,2,3,…,R,j=1,2,3,…,H,s=1,2,3,…,N,c=1,2,3,…,M,α=1,2,3,…,KAllvariables≥0,∀i,j,s,candαThe first target function is related to the minimization of the entire operation time in the supply chain. This is equal to the sum of the time periods which are spent transporting products from suppliers to customers, products’ shipment from suppliers and cross-docking into the trucks, products’ offloading from trucks to customers and cross-docking, and also the movement of products from cross-docking's entrance to its exit. Note that this target function as well as the next one represents the set of transportation processes defining the logistic structure of the model, whose sequential properties are determined using the set of constraints given in Eqs. (12)–(30). In order to illustrate this point, we have disaggregated Eq. (9) into the different transportation processes represented by each one of its terms. The resulting description is presented in Fig. 8. Note that the transportation processes described in Fig. 8 correspond to those presented in Figs. 6 and 7, when defining the cross-docking structure integrated within a supply chain.The second target function is related to the minimization of transportation expenses in the supply chain, which is equal to the sum of expenses of incoming and out-going trucks from suppliers to customers. The third target function minimizes the number of transportations. When a truck moves from one source or one target to another source or another target, it is considered as one transport.Constraint (12) guarantees that the whole time of transportation operations is longer than or equal to the time that the last incoming or out-going truck spends to move from customer to cross-docking. Constraint (13) guarantees that the sum of the products which are shipped by suppliers into incoming trucks i is equal to the demands of the customers. Constraint (14) guarantees that the sum of customers’ demands is exactly equal to the products which are produced by suppliers. Constraint (15) guarantees that at least one of the incoming trucks i move toward the supplier in order to ship type α order. Constraint (16) guarantees that when the incoming truck i moves from cross-docking and arrives at the supplier's (s) place, it selects supplier (sn), customer (c), or cross-docking (cd) as its next target. Constraint (17) guarantees that when incoming truck i moves from source supplier (sm) and arrives at target supplier (sn), it selects supplier (sk), customer, or cross-docking as its next target. Constraint (18) guarantees that when out-going truck j moves from cross-docking and arrives at the customer's place, it selects customer (cn) or cross-docking as its next target. Constraint (19) guarantees that when the incoming truck i moves from source customer (cm) and arrives at the target customer's (cn) place, it selects the customer (ck) or cross-docking (cd) as its next target. Constraint (20) is similar to constraint (19), but it is applied to out-going truck j. Constraint (21) guarantees that when incoming truck i moves from a supplier and arrives at the customer's (c) place, it selects the customer (cn) or cross ducking as its next target. Constraint (22) guarantees that the number of product units that are offloaded from incoming trucks i into cross-docking is exactly equal to the number of product units which are shipped by out-going trucks j toward customer (c). In fact, this constraint guarantees that the products are not held in cross-docking for a long time and all products are sent to the customers after a short period of time.Constraint (23) guarantees that the time of entrance (incoming truck j) from cross-docking to supplier (s) is longer than or equal to the time which is spent by incoming truck i to exit from supplier's (s) place. This constraint can be applied when the incoming truck i takes precedence over the incoming truck j. Constraint (24) is similar to constraint (23). This constraint can be applied in the case when the incoming truck i takes no precedence over incoming truck j. Constraint (25) guarantees that the time of entrance (incoming or out-going truck g2) from cross-docking (cd) or supplier (s) to the customer (c) is greater than or equal to the time which is spent by an incoming or out-going truck g1 to exit from customer's (c) place. This constraint can be applied when truck g1 takes precedence over truck g2. Constraint (26) is similar to constraint (25). This constraint can be applied when truck g1 takes no precedence over truck g2. Constraint (27) guarantees that the time of exit of incoming truck i from supplier (s) is longer than or equal to the sum of three time periods: the time of truck i's entrance into supplier's (s) place, the time of products’ shipment from suppliers by incoming truck i, and the time of transportation by incoming truck i among suppliers. Constraint (28) guarantees that the exit time of incoming or out-going truck g from customer (c) should be longer than or equal to the sum of three time periods: the entrance time of incoming or out-going truck g to customer's (c) place, the time of products offloading from incoming or out-going truck g among the customers, and the time of transportations by incoming or out-going truck g among customers. Constraints (29) and (30) are related to the capacities of incoming and out-going trucks. Constraint (29) and (30) guarantee that the amount of products being shipped from suppliers and cross-docking does not exceed the allowed capacity of incoming and out-going trucks.In the current section, we illustrate how the NSGA-II and MOPSO algorithms described in Section 2 are applied to solve the multi-objective optimization problem presented in Section 3. The considerable importance of evolutionary algorithms when solving complex real world optimization problems in different industrial fields has been illustrated repeatedly. For example, Oduguwa et al. [31] presented a survey of evolutionary computing applications used for solving real world problems in the manufacturing industry, while Precup and Preitl [32] developed structurally stable fuzzy control systems and illustrated their application to mechatronics. Recent applications involving the two algorithms considered in the current paper are given by Zăvoianu et al. [33], who embedded artificial neural networks within a NSGA-II algorithm to optimize the performance of electrical drives, and El-Hefnawy [34], who introduced a modified PSO algorithm to solve fuzzy bi-level single and multi-objective problems.We use 10 sample problems to demonstrate the applicability of the two algorithms proposed in this study. We consider a realistic problem with four suppliers, five customers, one cross-docking, and 10 different products. In all 10 sample problems, the numbers of suppliers, customers, cross-dockings, and products have been assumed to be fixed. Also, the type of products has been assumed to be fixed. For all 10 sample problems, the supplies of suppliers have been presented in Table 2and the demands of the customers have been provided in Table 3.In all 10 sample problems, the number of trucks and their capacity, along with the selected time of product shipments from the source, the time of product offloading in the targets, the time of product movement from unloading shipments delivered by inbound trucks to loading onto outbound trucks delivery, and the distances covered by the trucks between sources and targets, have been chosen randomly based on the uniform distribution functions shown in Table 1. The values obtained for the 10 problems have been given in Table 4.We used the NSGA-II and MOPSO algorithms to solve this problem. For the NSGA-II algorithm, the size of population is 100. In each execution, the number of iterations is 200. Also, the probability of intersection (crossover) is assumed to be 0.9 and the probability of mutation is assumed to be 0.05. For the MOPSO algorithm, the size of population is equal to 100. In each execution, the number of iterations is 200. c1, c2, and w are 1.494, 1.494, and 0.729, respectively. It must be noted that all parameters of the algorithm have been selected empirically using a trial and error method and all problems are solved on a personal computer (Intel® Core™ DUE CPU processor Ram 4GB) with the MATLAB 7.12.0 program.We elaborate further on the stochastic structure of both algorithms below.The NSGA-II and MOPSO algorithms are applied to an initial population of chromosomes (sequences of trucks) that defines a binary transportation sequence based on the set of available trucks. This population, which constitutes also the decision vector of the multi-objective cross-docking model(X=[Xcdsαi,Xsmsnαi,Xscdαi,Xscαi,Xcmcnαi,Xccdαi,Xcdcαj,Xcmcnαj,Xccdαj],∀α∈K,i∈R,j∈H)is described in detail in Fig. 9and Table 5.Fig. 9 illustrates how incoming and outgoing trucks are integrated within the set of total trucks considered in the multi-objective cross-docking model. Table 5 adapts a section of the decision vector to provide a more detailed description of the variables composing the transportation sequence of an incoming trucki∈Rand an outgoing truckj∈Hfor a given order of typeα∈K. Note that, in order to simplify the presentation, we have assumed thatN=Mwhen describing Table 5. For illustrative purposes, we have provided a particular set of transportation sequences for incoming truck i and outgoing truck j in Table 6, whose binary coding is described in Table 7.The transportation sequences of incoming truck i indicate that this truck performs three different sequences of trips for a given order of typeα∈K. Consider the first sequence of trips described in Table 6. In its initial trip, truck i moves from cross-docking and arrives at the place of supplier 1. The incoming truck i moves then from source supplier 1 and arrives at target supplier 3 before returning to cross-docking. Similarly, the outgoing truck j moves initially from cross-docking to customer 5. The outgoing truck j moves then from source customer 5 and arrives at target customer 8. After the delivery, it returns to cross-docking as its next target.The pseudo-code of the NSGA-II algorithm applied to solve the multi-objective cross-docking model is presented in Fig. 10. The crossover and mutation schemes implemented to the binary transportation sequence of the trucks are described below in more detail. It should be noted that the crossover and mutation schemes applied are standard. As was the case in, for example, Fallah-Mehdipour et al. [35], we have placed the emphasis of the paper on the solvability of the problem instead of the design of new variants of the algorithms. In this regard, the current model can be solved using any of the multi-objective genetic-based algorithms proposed in the cross-docking literature, see Boloori Arabani et al. [13,14], where a binary decision matrix defines the optimal transportation sequence of the trucks. A comparison among all the potential algorithms is outside the scope of the current paper, but can be performed in future extensions.The crossover scheme implemented is a simple derivative of the standard 1-point crossover and is described in Fig. 11. Given the assumed probability of intersection (crossover), we determine randomly the number of genes that will be affected from each parent chromosome. Then, the gene strings located before the point will be copied from the opposite parent, while the gene strings located after the point will remain unchanged for each corresponding child.The mutation scheme implemented is a derivative of the standard inversion operation, where a set of genes (trucks) is randomly selected from a subset of parent chromosomes and their values transformed into ones (i.e. a random subset of trucks is assigned a random transportation duty).The application of the MOPSO algorithm to solve the multi-objective cross-docking model is also standard and an example based on a cross-docking system can be found in Boloori Arabani et al. [13]. However, in the current setting, we include a mutation scheme within the main loop of the MOPSO algorithm. This mutation modifies the sequence of zeros and ones determining the transportation structure of the trucks in the multi-objective model. The probability of mutation will be defined as follows(31)pm=1−(it−1)(Maxit−1)1/μwhere it represents the current iteration, Maxit is the maximum number of iterations considered, 200 in the current setting, andμ=0.1is the mutation rate. Note that the probability of mutation decreases in the number of iterations.As already explained, the variable xitin Eq. (5) represents the binary decision vector defining the current position of the corresponding particle (truck) within a given iteration. The mutation scheme implemented modifies the transportation sequences of a subset of randomly selected trucks. The mutation process consist of selecting a random set of trucks from the population and modifying their respective siprobabilities (and, therefore, their relative position). This modification is based on a random evaluation process determined by their previous sivalues and the current mutation probability. In particular, the mutation probability defines an interval domain on which the previous simay be uniformly redefined. The resulting sivalues obtained are then used in Eq. (8) to provide a reordering of the transportation structure of the trucks based on the new xitposition values of each particle.The random values for the number of trucks and capacities for the 10 sample problems and the transportation sequence for truck 1 in problem 4 using the NSGA-II algorithm are given in Tables 8 and 9, respectively.In problem 4, we consider 10 trucks with various capacities (101, 52, 120, 135, 69,190, 167, 130, 58, and 61). The trip sequence for Truck 1 (in problem 4) is given in Table 8 for the NSGA-II and in Table 9 for the MOPSO method. For example, according to Table 8, Truck 1 has 7 trip sequences. In each sequence, the type and number of products as well as the source and target have been given. In the first trip sequence for Truck 1 in problem 4 (NSGA-II algorithm), product C (31 items) is shipped from Supplier 1 and product F (30 items) is shipped from Supplier 4. Both products are sent to the cross-docking facility. Similarly, while taking into account the allowed capacities of the trucks, these trip sequences continue for the other nine trucks until all the products have been sent from the suppliers to the customers.In Figs. 12–15, the Pareto solutions for Problem 4 are obtained by the NSGA-II and the MOPSO algorithms. Fig. 12 shows the solutions obtained by the NSGA-II and MOPSO algorithms in a two-dimensional space for the target functions of operation time and transportation expenses. As can be seen in this figure, transportation expenses decrease as the operation time increases. We can derive three results from the proposed model. Note that in two-dimensional diagrams, some solutions dominate other solutions. Fig. 13 shows the solutions obtained by the NSGA-II and MOPSO algorithms in a two-dimensional space for the target functions of operation time and the number of truck trips. It can be seen that as the number of truck trips increases, the operation time increases accordingly. Fig. 14 shows the solutions obtained by the NSGA-II and MOPSO algorithms in a two-dimensional space for transportation expenses and the number of truck trips. Fig. 14 shows that as the number of truck trips decreases, the transportations expenses increase. Finally, Fig. 15 shows the Pareto optimum solutions obtained by the NSGA-II and MOPSO algorithms, while considering all three target functions. It can be seen that as the number of truck trips decreases, the transportation costs by them decrease and the operation time increases. In a three-dimensional space, these solutions are non-dominated and no solution dominates another one. Therefore, the decision-maker can select one of the solutions based on his/her preferences.Before comparing the performance of both algorithms, consider the applicability of the results obtained. The current paper integrates cross-docking as a fundamental part of the supply chain within a unique multi-objective model that can be solved numerically using standard evolutionary algorithms. The literature generally concentrates either on the logistic processes of the chain absent cross-docking, Griffis et al. [36], or on the cross-docking process absent its supply side integration, Van Belle et al. [25]. Merging both lines of research provides a realistic approach to the modelization of cross-docking as an integrated and essential part of the supply chain. The current integrated approach relates directly to the logistic processes implemented, for example, by Sears [37] and UPS [38]. In this regard, it is widely known that many major retailers, such as Wal-Mart, utilize cross-docking services within their own distribution channels [39]. In particular, Fig. 1 represents the standard cross-docking strategy implemented by a retailer such as Wal-Mart, where the shipments from various suppliers are combined at the cross dock to create shipments for the final delivery destinations.Convergence to optimum Pareto solutions and the creation of density and variety among the obtained solutions are the primary goals of every multi-objective evolutionary algorithm. Because these three goals are conflicting, there is no absolute criterion for deciding on the application of the algorithms. If we had access to such a criterion, it would have been possible to decide on the superiority of one algorithm over another one. In order to compare the quality of the solutions obtained by the NSGA-II and MOPSO algorithms, four criteria have been taken into account, including the number of Pareto solutions, the mean ideal distance measure (MIDM) (distance from the ideal point), the spacing measure (SM), and the width measure (WM) (maximum expansion). In order to compare the algorithms and to identify the most efficient one, each problem has been carried out 10 times. In other words, each algorithm has been applied 100 times for these problems. Overall, the NSGA-II and MOPSO algorithms have been applied 200 times for these 10 problems.Algorithms with more non-dominated solutions in the Pareto archive can provide more options to the decision maker(s) and, therefore, are more successful in determining the real Pareto optimum level [35]. The standard values of NPS for each problem (minimum, average, and maximum) have been presented in Table 10. The means of the values in Table 10 have been calculated in Fig. 16. According to Fig. 16, the NPS index is more suitable for the NSGA-II algorithm than the MOPSO algorithm.This index (measure), which is used for measuring the degree of closeness to the real Pareto optimum level, is calculated by Eq. (32):(32)MID=∑i=1ncinIn this equation, n is the number of solutions in the Pareto optimum set and ciis the Euclidean distances of the Pareto set members from the ideal point, which is calculated by Eq. (33):(33)ci=(f1i−f1∗)2+(f2i−f2∗)2+⋯+(fmi−fm∗)2In Eq. (33), fmiis the value of the target function m for solution i, whilefm*represents the ideal point (real Pareto optimum value) for the target function m. It is clear that in the comparison of Pareto optimum sets, the sets with a lower value for this index are better positioned (closer to) with respect to the real Pareto optimum level [40]. Fig. 17shows a schematic view of the MIDM (distance from the ideal point).The standard values of the MIDM for each problem (minimum, average, and maximum) have been presented in Table 11. The means of the values in Table 11 have been calculated and presented in Fig. 18. According to Fig. 18, the MIDM index is more suitable for the NSGA-II algorithm than for the MOPSO algorithm.This index (measure), which was introduced by Schott [41], shows the relative distance between successive solutions by Eq. (34):(34)s=1Q∑i=1Q(di−d¯)2In this equation, |Q| is the size of Pareto archive. diand d can be calculated by Eqs. (35) and (36):(35)di=mink∈Q∧k≠i∑m=1Mfmi−fm−1k(36)d¯=∑i=1QdiQIn fact, the SM is the standard deviation of the divalues. When the solutions are arranged normally beside each other, the value of the spacing (S) is small. Therefore, those algorithms whose final non-dominated solutions have a small spacing value are more favorable. The standard values of the SM for each problem (minimum, average, and maximum) have been given in Table 12. In Fig. 19, the means of these values (minimum, average, and maximum) have been presented for both algorithms. According to Fig. 19, the NSGA-II algorithm performs better than the MOPSO algorithm.The WM (maximum expansion) measure, which was introduced by Zitzler et al. [42], is the diameter length of the cube that is created by the final values of the non-dominated solutions set in the target space. Therefore, as this index increases, the Pareto archive solutions are expanded. This index is calculated by Eq. (37) as follows:(37)D=∑i=1M(maxi=1:Qfmi−mini=1:Qfmi)2The index (measure) of maximum width shows the Pareto archive solutions. The standard values of the measure for each sample problem (minimum, average, and maximum) have been given in Table 13. In Fig. 20, the means of these values (minimum, average, and maximum) have been presented for both algorithms. Based on the WM index, the MOPSO algorithm performs better than the NSGA-II algorithm.One of the most important factors when implementing successful supply chain management is the ability to efficiently control the physical flow of materials and goods in the supply chain. Various methods have been proposed to increase customer satisfaction and reduce costs in supply chains. Cross-docking is an innovative storing strategy which has great potential for controlling distribution expenses in supply chains and satisfying customer needs. Cross-docking can also facilitate on-time distribution, increase supply-demand compatibility and utilize transportation assets more efficiently.In this study, a multi-objective mathematical model was presented whose aim is to minimize the operation time, the transportation costs, and the number of truck trips in a supply chain and cross-docking facility. Two evolutionary meta-heuristic algorithms were used to solve the model: the NSGA-II and the MOPSO algorithms. In addition, the NPS, the MIDM, the SM, and the WM measures were used to compare and to select the best Pareto solutions. The results obtained by these algorithms show that using the Pareto archive size index (measure), the NSGA-II algorithm is superior to the MOPSO algorithm. Using the MIDM, which measures the closeness to the real Pareto optimum solution, the NSGA-II algorithm is superior to the MOPSO algorithm. Using the SM, which measures the Pareto archive solutions’ density, the NSGA-II algorithm performs better than the MOPSO algorithm. Using the WM, the MOPSO algorithm provides wider solutions than the NSGA-II algorithm.It should be noted that we have implicitly imposed several simplifying assumptions when defining the multi-objective optimization problem presented in the paper in order to guarantee its numerical tractability. For example, the cross-docking process modeled in the paper has been assumed to be simpler than the ones generally considered in the literature [13,14,30]. These simplifications have been imposed in order to allow us to concentrate on the supply chain structure of the process, while considering a cross dock with, for example, unlimited capacity. Moreover, optimal decisions depending on the stochastic properties of demand together with the allocation of different cross docks in order to optimize the distribution of products among consumers have also been omitted. Note that the resulting problems would be considerably harder to deal with, independently of the evolutionary algorithms applied to solve them, due to the increasingly complex formal structure required to define the corresponding solvable multi-objective optimization problems. Considering the limitations described above, the main extensions of the current paper are defined as follows.1.In this study, the capacity of cross-docking was assumed to be unlimited, in spite of the fact that the capacity of cross-docking is limited in real applications. Therefore, future research can assume the limitation of the cross-docking capacity in the mathematical model.In this study, only one cross-docking facility and one warehouse were taken into account in the proposed model. Future research can consider more than one cross-docking facility and warehouse.In this study, an optimal location for establishing a cross-docking facility was not investigated. Optimal location planning for cross-docking facilities within the supply chain can be the subject of future research.In future research, target functions can be included in the mathematical model to minimize the delays and to shorten the time that trucks spend in sources and targets.

@&#CONCLUSIONS@&#
