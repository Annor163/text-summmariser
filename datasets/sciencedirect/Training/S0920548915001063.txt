@&#MAIN-TITLE@&#
A UML-based domain specific modeling language for service availability management: Design and experience

@&#HIGHLIGHTS@&#
We present a UML-based domain specific modeling language (DSML) that models the SA Forum Availability Management Framework (AMF) domain model.Our DSML provides designers with the tools needed for designing, editing, and potentially analyzing AMF configurations.Our DSML has been carefully designed to represent AMF concepts, their relations, and constraints.Our DSML has been implemented using IBM Rational Software Architect.We show the effectiveness of our DSML in designing AMF configurations through a case study.We report on our experience in designing this language and the challenges encountered during this process.

@&#KEYPHRASES@&#
Domain-specific modeling languages,UML profiles,High-availability,Availability Management Framework Standard,Service Availability Forum,

@&#ABSTRACT@&#
For critical systems, providing services with minimal interruption is essential. Availability Management Framework (AMF), defined by SA Forum for managing highly-available applications, requires configurations of applications consisting of various entities organized according to AMF-specific rules and constraints. Creating such configurations is difficult due to the numerous constrained entities involved. This paper presents UACL (UML-based AMF Configuration Language) and a supporting implementation that models the AMF domain, providing designers with tools needed to design, edit, and analyze AMF configurations. UACL is an extension of UML through its profiling mechanism and has been designed to represent AMF concepts, their relations, and constraints.

@&#INTRODUCTION@&#
Service availability has long been an important software requirement, especially for safety-critical systems for which any service interruption may have fatal results, hence, the latest increase in attention to effective solutions that usually take the form of high-availability middleware for the development of highly available (HA) systems. The common practice is to have some sort of redundancy models so as failing nodes are detected and their workload is shifted to standbys. However, most existing solutions are proprietary and platform specific, which hinders the portability of the applications from one platform to another. To address this issue, many telecommunications and computing companies have joined forces in the Service Availability Forum (SA Forum) [34], a consortium whose objective is to define open standard specifications in order to support the development and management of HA applications and to enable portability and reusability across different platforms. More specifically, the SA Forum standard service interfaces enable the use of Commercial-Off-The-Shelf (COTS) building blocks for an HA system, which results in the enhanced portability and flexibility of the components. Moreover, since the developers need only to focus on the application logics, SA Forum standards reduce the complexity of the application development.The SA Forum specifications can be grouped into two categories:•The Application Interface Specification (AIS) [35] which defines a set of services that are needed to fully support the high availability of the application's components.The Hardware Platform Interface (HPI) [36] which provides standard means to control and monitor hardware components.There are several implementations of AIS provided by different groups. OpenAIS is an open source project that started at MontaVista [17] as an implementation of AIS and later became part of Linux implementation and was licensed under the Revised BSD license [30]. Other projects such as Corosync also were derived from OpenAIS [5]. The most popular implementation AIS is OpenSAF which is supported by various telecommunication and software companies through OpenSAF Foundation [32].The major implementation of HPI is OpenHPI, which is provided by the open source community [31].Among the services defined in AIS, perhaps the most important one is the Availability Management Framework (AMF) [37], which is the middleware service that manages the high availability of the applications' services by coordinating the applications' redundant components. An AMF configuration for a given application is a logical organization of resources that enables AMF to perform workload assignments to provide service availabilityThe design of AMF configurations requires 1) the description of the software components provided by the vendor in an Entity Types File (ETF), which follows a standard format defined in [38], 2) the description of the deployment infrastructure, 3) the definition of the services to be provided, and 4) the required redundancy model. Such a design requires a good understanding of AMF concepts and their relations. This is a complex task due to the large number of entities and parameters that need to be designed and generated. There are also several constraints imposed by the AMF domain, which tend to crosscut various entities, making the configuration design process very complex. Also, the specifications are described in an informal way, leaving room for ambiguity and misinterpretations.To address these issues, we have designed a precise and complete modeling language, called UACL11MAGIC (Modeling and Automatic Generation of Information and upgrade Campaigns for service availability). The acronym MAGIC is used throughout the description of UACL to reflect concepts and elements that have been newly introduced or further refined compared to standard specifications.(a UML-based AMF Configuration Language) to enable the design and analysis of AMF configurations. Our language is a new domain-specific modeling language (DSML) tailored to capture the AMF domain's concepts and semantics.Using UACL, one can benefit from the advantages of a domain specific modeling language (e.g. usability, the reuse and conservation of domain knowledge and the ease of communication) [42] as well as from the advantages associated with UML, including its standard design notation and accessible tool support.UACL is a UML profile [27] for the modeling of AMF domain concepts, their attributes, their relationships, and the domain specific constraints. It has been implemented using IBM Rational Software Architect (RSA) [9]. We believe that it is an important contribution to the service high availability community since it aims to enable different activities, such as the design of configurations using domain concepts as first class artifacts, model driven generation of valid AMF configurations, the validation of third party AMF configurations.In this paper, we also report on our experience in designing such a profile by discussing the challenges we have encountered and that we attribute mainly to three aspects: (a) the lack of a systematic approach for creating profiles, especially for the mapping of the domain concepts to the UML metamodel — in many situations, we have found that there were many alternatives and it was not always obvious which one to choose; (b) the use of Object Constraint Language (OCL) [28] which turned out to be problematic, since most of the domain constraints needed extensive OCL expressions that crosscut several domain contexts; and (c) the lack of flexible tool support. These challenges are discussed along with the lessons learned from the overall project, with the aim of contributing to the modeling community with the results of this experience. It is worth noting that the work described in this thesis is part of a larger research project called MAGIC1 — a collaboration between Concordia University and Ericsson — and the results of this thesis are being used in other MAGIC research streams. The term MAGIC is used throughout the profile.The remaining part of this paper is structured as follows. In Section 2, we introduce the main concepts in the AMF specification. In Section 3, we present the related work where we reviewed different UML profiles relevant to our domain. In Section 4, we describe the methodology used for the design of our profile, the domain model of the profile, as well as the description of the language and its mapping to theUML metamodel. In Section 5, we present the implementation of UACL and a case study, followed by a discussion of the challenges in Section 6. We conclude the paper in Section 7.AMF [37] is part of the AIS middleware, responsible for managing the availability of the services provided by an application. AMF fulfills this responsibility by managing the redundant components of an application by dynamically shifting workloads of faulty components to the healthy components. In order to manage the services, AMF requires a configuration that specifies the organization and the characteristics of the entities under its control. These entities model the service providers, the provided services, and the deployment information. An AMF configuration consists of two different sets of concepts: AMF entities and the associated AMF entity types. AMF entities are categorized into different logical entities representing services and service providers' resources. The basic entities are called Components. Components represent hardware or software resources capable of supporting the workload of the application services. Such a workload is referred to as a Component Service Instance (CSI). For example, an instance of MySQL server could be a component called MySQL_1 which is capable of supporting a specific set of clients. The IP addresses of these clients form the description of the workload for this specific instance of MySQL component which is captured through a CSI (MySQL_1_CSI). Components are aggregated into Service Units (SU), logical entities representing the basic redundancy unit for AMF. The aggregation of components (e.g. MySQL_1, Driver Manager_1, and JDBC Connector_1) enables the combination of their functionalities to form higher level services. More specifically, the workloads of the components of an SU are aggregated into a Service Instance (SI), which represents the aggregated workload assigned to the SU. An SI also represents the combined higher level service of the collaborating components within the SU. In our example, the combination of MySQL_1, Driver Manager_1, and JDBC Connector_1 forms a database tier (SU) which can provide service for software systems, developed using Java based technologies.SUs are further grouped into Service Groups (SG) in order to protect a set of SIs by means of redundancy. SGs are characterized by redundancy models. AMF supports the No-Redundancy, 2N, N+M, N-Way and N-Way-Active redundancy models. These redundancy models differ on the number of SUs that can be active and on standby for the SIs and on how these assignments are distributed among the SUs. In the 2N redundancy model, one SU is active for all the SIs protected by the SG and one is on standby for all the SIs. In the N+M model, N SUs support the active assignments and M SUs support the standbys. N+M allows at the most one active and one standby assignment for each particular SI. An SG with N-Way redundancy model contains N SUs. Each SU can have a combination of active and standby assignments. However, each SI can be assigned active to only one service unit while it can be assigned as on standby to several service units. An SG with the N-Way-Active redundancy model has N SUs which are assigned only as active. It has no SU assigned as on standby. Furthermore, each of the SIs protected by this SG can be assigned to more than one SU. In contrast to N-Way-Active, in the No-Redundancy redundancy model each SI is assigned to at most one SU and each SU can protect at most one SI. An AMF application is composed of one or more service groups. Each SU is deployed on an AMF node and the set of all AMF nodes forms the AMF cluster. Table 1summarizes the AMF entities and their descriptions.AMF entity types are used to define the common characteristics among multiple instances of the same type. For example, a component type can define all the characteristics/attributes of the MySQL server which are common among all instances of this server. In AMF, all entities except for the deployment entities (i.e., node, NG, and cluster) have a type. The types are derived from a vendor's description of the application in the ETF [38].Fig. 1shows an example of an AMF configuration. In this example, a cluster is composed of two nodes (Windows Server 1 and Windows Server 2). It hosts an application consisting of one SG (MySql SG_1) protecting two SIs (MySql Java Connection_1 and MySql Java Connection_2) in a 2N redundancy model. The MySql SG_1 consists of two SUs, MySql Db Tier_1 and MySql Db Tier_2, each being composed of three components. Although shown in Fig. 1, the distribution of the active and standby assignments is not part of the configuration as defined by AMF, since this is decided by AMF at run-time. The types, part of the configuration, are shown in the right hand side of the figure. The relationship between the type entities and the entities presented in the configuration are as follows: MySQL_1 and MySQL_2 are from the Component Type MySQL Server. JDBC Connector_1 and JDBC Connector_2 are from MySQL Connector/J. Both the SUs are represented by the same SUType called MySQL Db Tier for Java. MySql SG_1 and App1 are from the type MySql Service Group and APT-A, respectively. At the service level, both SIs (MySql Java Connection_1 and MySql Java Connection_2) are from the type MySql Java Connection while the CSIs are from three different types. More specifically, MySQL_CSI_1 and MySQL_CSI_2 are of the type MySQL_CST, JDBC_Con_CSI_1 and JDBC_Con_CSI_2 are from the type MySQL Connector/J_CST and finally, Drv_Mng_CSI_1 and Drv_Mng_CSI_2 are from Driver Manager_CST.

@&#CONCLUSIONS@&#
