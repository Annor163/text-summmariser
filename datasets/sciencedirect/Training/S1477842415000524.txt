@&#MAIN-TITLE@&#
Generative and accumulative recursion made fun for beginners

@&#HIGHLIGHTS@&#
Teaching generative and accumulative recursion to beginners is effective and fun.Beginners learn depth-first, breadth-first, and heuristic-based searching.Functional video games motivate students to learn principles of Computer Science.Functional video games help close the Computer Science gender gap.Beginners are introduced to the perils and benefits of randomness.

@&#KEYPHRASES@&#
Generative recursion,Accumulative recursion,Functional video games,Heuristic search strategies,Computer Science education,

@&#ABSTRACT@&#
In a programming classroom for beginners, a delicate balance must be struck between teaching the design, implementation, and testing fundamentals of programming and the need for students to find their first programming course enjoyable. A course that focuses solely on the fundamentals is not likely to nourish the excitement a student may have for Computer Science. A course that focuses solely in making programming fun is not likely to have students walk away with a solid grasp of the fundamentals. A very successful approach to strike this balance uses functional video games to motivate the need to learn principles of program design and Computer Science in a context that is of interest and fun for most students. Such an approach has successfully engaged students to learn design and implementation principles using primitive data, finite compound data, structural recursion for compound data of arbitrary size, and abstraction. This article explores how to use a functional video game approach to engage beginning students in problem solving that employs generative and accumulative recursion while at the same time reinforcing the lessons on structural recursion and abstraction. In addition to these two new forms of recursion, beginning students are also introduced to depth-first searching, breadth-first searching, heuristic-based searching, and the use of randomness. The article uses the N-puzzle problem to illustrate how all these topics are seamlessly addressed in the beginner׳s classroom while keeping student enthusiasm high as evidenced by student feedback.

@&#INTRODUCTION@&#
To a programming course for beginners, Computer Science students usually come with a great deal of enthusiasm. Their minds are imagining the creation of video games, chat tools, graphics, and other applications that are part of popular culture. This enthusiasm ought to be nurtured to motivate the principles of the discipline the students are entering and to avoid the development of apathy for material that appears irrelevant to their creative desires. In other words, student enthusiasm can be harnessed to learn programming and Computer Science principles by applying said principles to the development of applications that capture a student׳s imagination and that allow for a student׳s creativity to make a contribution. The key to success then becomes striking the right balance between learning principles and using them in a fun context for the students. One approach to striking this balance is to use the development of a video game to motivate the principles students need to learn.Based on the teaching philosophy of program by design (PBD) put forth in the textbook How to Design Programs (HtDP) [6], the development of functional video games has proven to be an effective medium through which to engage students in learning while harnessing their enthusiasm and creativity [2,5,13–15]. At the heart of HtDP methodology is the design recipe—a series of steps that take you from a problem statement to a working solution. To provide support for beginners, PLT׳s DrRacket [7] integrates a hierarchy of student languages for use in conjunction with HtDP.11The reader should note that students in the course considered in this article are not taught Racket, but do learn Racket-like syntax on a need-to-know basis.This approach is popular with students, because the student languages allow for the generation of error messages that are meaningful for beginners and the development of a video game provides an exciting development domain. From a Computer Science educator׳s perspective this approach is successful, because beginners are liberated from having to reason about state-based computations allowing them to learn principles and algorithms, such as heuristic-based searching, the use of randomness, and minimax searching, that traditionally have been restricted to advanced undergraduate courses.The ideas presented in this article were motivated by trying to find a way to continue to feed student enthusiasm once students master the basics of structural recursion using the PBD methodology. Students are guided to explore generative and accumulative recursion. This transition is best made by having the students discover the need for something more than structural recursion. This approach strongly contrasts with a student simply arriving to class one day and discovering that a new topic called “generative recursion” is being covered. For instance, consider presenting students with the problem of finding a path from node A to node B in a directed acyclic graph. It is not difficult for students to realize that a path from A to B is a path that starts at A and that is followed by a path from a successor of A to B. The students can see that this is a recursive process, but it is certainly not structural recursion. They have discovered generative recursion: the subproblem generated is a new instance (hopefully smaller) of the original problem that is not derived from the structure of the input. Students contrast this with, for example, searching for the maximum of a list of numbers where the subproblem is based on the rest of the input list—that is, it is derived from the structure of the input. Extending this example to a directed graph (one that may have cycles), students discover that their implemented solution no longer works. Upon further analysis, they realize that in the presence of a cycle it is necessary to not visit a node more than once during the search. Otherwise, the search process may never exit a cycle in the graph. To avoid this, the nodes that have been visited must be remembered from one recursive call to the next. The students have discovered the need for a new kind of recursion: accumulative recursion where knowledge is accumulated from one recursive call to the next. This type of approach motivates the need to study two new forms of recursion, but fails at getting students truly excited about the material. Students can surmise that such a function may be useful for building a GPS navigator, but they are not actually building a navigator nor are they presented with an opportunity to creatively inject their personalities into their solutions.Students get excited by actually building a product in a domain that they consider fun and which allows them to express their creativity. This article advocates the position that video games ought to be used with beginners to motivate the need to study generative and accumulative recursion. It presents an example on how to make the transition from structural recursion to generative and accumulative recursion using the N-puzzle problem. This road map is used in the curriculum at Seton Hall University. The primary goal is to introduce these topics in a context that allows students to express their creativity and that reinforces lessons on PBD, structural recursion, and abstraction. Equally important goals are to expose students to ideas that they may encounter in upper-level courses such as heuristic search strategies, the A⁎ algorithm, and the use of random number generators.This article has grown out from the original presentation of the material published in the proceedings of Trends in Functional Programming 2011 [13]. It varies significantly from that original presentation in the following manner:1.The introduction describes the author׳s classroom experience motivating the study of generative and accumulative recursion through the process of discovery. In addition, it argues that traditionally considered advance topics in Artificial Intelligence can be successfully introduced to beginners.The discussion on the first classroom encounter with the N-puzzle problem reflects current practices. It addresses how to expose students to the perils of generative recursion and of randomness to motivate careful study. Throughout the article, current practices are emphasized.The discussion of accumulative recursion revisits the use of randomness and describes how to expose students to a useful application of randomness.There is a new section that discusses empirical data obtained from student feedback suggesting that the approach described is well-received by beginners.

@&#CONCLUSIONS@&#
