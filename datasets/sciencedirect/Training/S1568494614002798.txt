@&#MAIN-TITLE@&#
Optimal design of interval type 2 fuzzy controllers based on a simple tuning algorithm

@&#HIGHLIGHTS@&#
Evolutionary algorithms are one of the most common choices reported in the literature for tuning fuzzy logic controllers.An alternative is the simple tuning algorithm, which is a methodology designed to improve the response of type-1 fuzzy logic controllers.An extension of the simple tuning algorithm for type-2 fuzzy controllers is presented.The proposed algorithm illustrated with experiments applied to different types of plants.

@&#KEYPHRASES@&#
Type-2 fuzzy logic,Fuzzy controllers,Parameter tuning algorithm,

@&#ABSTRACT@&#
Evolutionary algorithms are one of the most common choices reported in the literature for the tuning of fuzzy logic controllers based on either type-1 or type-2 fuzzy systems. An alternative to evolutionary algorithms is the simple tuning algorithm (STA-FLC), which is a methodology designed to improve the response of type-1 fuzzy logic controllers in a practical, intuitive and simple ways. This paper presents an extension of the simple tuning algorithm for fuzzy logic controllers based on the theory of type-2 fuzzy systems by using a parallel model implementation, it also includes a mechanism to calculate the feedback gain, new integral criteria parameters, and the effect of the AND/OR operator combinations on the fuzzy rules to improve the algorithm applicability and performance. All these improvements are demonstrated with experiments applied to different types of plants.

@&#INTRODUCTION@&#
Type-1 fuzzy logic-based controllers have strong rivalry in industrial applications, like those controllers based on PLC (programmable logic controller), DCS (distributed control system) and PAS (process automation system). Most of these controllers are based on PID (proportional-integral-derivative) [1] for the resolution of the control algorithms; this is because of the large number of applications reported in the literature, the diversity of products, efficiency, consistency and stability. However, most of these controllers have the problem of complexity in the tuning, and this is simplified only when dealing with relatively simple or very common problems.It is important to say that for this research the objective is not to defeat the PID-based controller, but to present an easier way to control systems, avoiding a very expensive expert in the field to set the PID-based controllers in industry. The PID is involved in this research just for comparison reasons.Regarding fuzzy logic controllers, most of the applications already developed are based on type-1 fuzzy systems, and they are still quite few applications based on type-2 fuzzy systems, which are basically an extension of traditional type-1 [2] but more capable of uncertainty handling by the inclusion of fuzziness in the membership function in addition to the fuzziness in the input, but they have the disadvantage of greater complexity in the design and implementation of its fuzzy rules-oriented operations (union, intersection, complement). For this reason few type-2 applications have been developed, compared with those based on type-1 [3–7].It is important to note that a crucial disadvantage of controllers based on fuzzy logic systems, either type-1 or type-2, is the complexity in their tuning, compared against the popular PID-based controllers. The reason behind this disadvantage is the number of variables to consider: number and type of membership functions, ranges for each function, rules, overlapping, etc., as mentioned in previous works [8–10]. There have been many different approaches to develop a controller based on intelligent computing to try to compete with PID-based controllers; among these works are the following:•Fuzzy knowledge based controllers (FKBC) [11].Evolutionary computation [12–14].Clustering [15].Optimization [16].Sliding mode control [17–19].Min–max-gravity fuzzy reasoning [20].Performance and tuning controllers [21–23].And others types of learning [24,25].These methods search for the solution according to objective functions, parameter estimation, gradient error, self-tuning [26,27], etc.; but in many cases these alternatives have convergence problems and a complex mathematical representation. For example, FKBC is a robust tool for the qualitative design of if-then rules and quantitative design of scaling or normalization factors, however, it is necessary to have some knowledge of the control area to have a good parameter tuning. The “learning techniques” use the data obtained for the system to generate the same type of design, but with the problem of a longer computational time or it is possible that the solution computed is only a local minimum of the general solution.There are other studies that aim to solving this problem by reducing the complexity of a type-2 fuzzy system [4], using a variant of such systems, called interval type-2 fuzzy systems (IT2FS).Some of the works around fuzzy logic-based controllers [28–32] established a solution to simplify the tuning of these controllers. The algorithm proposed in those papers is called simple tuning algorithm for fuzzy logic controllers (STA-FLC), which is basically an algorithm evolved over the idea of simplifying the tuning of fuzzy logic-based controllers with only two parameters that can be manipulated in a very intuitive way. The proposed algorithms in these papers have been focused on a simplification of their logic, parameters and operative conditions as follows:•Only two input parameters are required:∘Error (k1).Error derivative (k2).Simplification of the rule matrix with 25 elements (5×5) evolved until reaching some degree of symmetry.Remarkable results with two tuning criteria:∘Settling time (Ts).Maximum overshoot (Os).Compared against distinct PID tuning methods and tested on several representative plants.Polynomial simplification for the exponent of the power function γf=γqto compress and expand the membership function considering the characteristic curve relation:∘Original:(1)q(k)=30k3+37k2+52k+140Optimized:(2)q(k)=4k2Reduced number of membership functions and types (5 symmetric MFs considered):∘trapezoidal.triangular.Considering the limits of the actual version of the algorithm, in this paper a modification to the simple tuning algorithm for fuzzy logic controllers (STA-FLC) is analyzed specifically to implement some concepts from type-2 fuzzy systems to better handle uncertainty which is something common in real-world systems. We proposed parallel type-1 fuzzy systems to emulate a type-2, which represents a simplification of type-2 fuzzy set theory, combined with an adaptive algorithm for feedback gain calculation to reduce the steady-state error to improve the performance of the algorithm. The evaluation criteria used were the different integral errors described in the fourth section of this document (“simple tuning algorithm for type-1 fuzzy logic controllers”) to provide a way to compare the performance of the original and new version of the STA-FLC algorithm, and also against the PID-based controller, by measuring the accumulated error in the response of each controller.Other improvements to the algorithm in terms of performance and applicability are a proposed mechanism to compute the feedback gain when non-unitary gain is present, new integral criteria parameters and the effect of the AND/OR fuzzy rule operators (and their combinations).In general, the main objective of this research is to improve the STA-FLC algorithm to be applied to more plants, keeping the simplicity in its tuning and operation, and considering also the implementation of some ideas taken from type-2 fuzzy systems, in order to develop new applications for that type of systems when is necessary to handle uncertainty, which is a common factor in real-world controllers.The paper is structured as follows: the second section (“Type-1 vs. Type-2 fuzzy systems”) describes a type-1 fuzzy system, including only a simple and brief explanation to support the proposed algorithm and to explain the differences with type-2 fuzzy systems, describing the effect of the operators in the fuzzy system behavior and their relation with the presence or absence of input uncertainty. Third section (“fuzzy logic controller requirements”) presents the preconditions for a typical fuzzy logic controller and a high-level description of the algorithm steps to be elaborated in the next section. Fourth section (“simple tuning algorithm for type-1 fuzzy logic controllers”) describes the current simple tuning algorithm for fuzzy logic controllers (STA-FLC) and some background on tuning for fuzzy logic controller is explained. It also contains the description of the criteria used to evaluate the performance of the STA-FLC algorithm when applied to the different systems tested, this criteria is based on integrals of error which are performance measures that consider the accumulated error giving different weights to the moment and duration of the error. The fifth section (“Experimental results”) contains the outcome of the experiments performed using the enhanced version of the algorithm. In the sixth section (“The effect of AND/OR operators in plants with uncertainties”) some experiments are developed around the combination of AND/OR operators in the fuzzy rules to demonstrate their effect under different noise conditions, and finally in seventh section (“Conclusions”) the work results are presented.Fuzzy logic was conceived by Zadeh [2], based on a theory of fuzzy sets that differ from traditional sets in considering the degree of membership. The next paragraphs describe a very simple review of the type-1 fuzzy systems to understand the foundations of the STA-FLC algorithm and support the theory of the proposed mechanism to handle system uncertainty.The degree of membership is represented by a membership function that evaluates the input and, according to certain predefined rules, assigns the degree of membership to a fuzzy set. These values range between 0 and 1, with 0 being none and 1 representing total membership to the fuzzy set.Based on its form (and the type of concept that needs to be modeled), the membership function can be: triangular, Gaussian, trapezoidal, pseudo-exponential, extended trapezoidal, S-form, gamma, etc.By combining the above concepts, fuzzy inference systems (FIS) were developed. These systems receive a fuzzy input and return a crisp output which can be handled by other systems to evaluate and perform accordingly. The operation of a FIS can be represented graphically as:Fig. 1represents the inference process of applying a rule over a concrete input x that represents the fuzzy input evaluation in the form of a triangular function A (IF), when this input reaches some value in A, a membership function μ is applied over a rule consequent B that is another triangular function (THEN), to obtain the correspondent (crisp) output y. The combination of several of these rules enables the fuzzy inference system to compute fuzzy-terminology like “very”, “approximately”, “about”, etc. into concrete figures that can be handled computationally.According to [4,33,34], there is another classification called type-2 fuzzy systems, theoretically proposed by Lotfi A. Zadeh in 1975. The reason for evolving type-1 fuzzy systems is to consider uncertainty to a limited degree (not entirely), therefore expanding its scope.In type-2 fuzzy systems the membership functions can now return a range of values that varies depending on the uncertainty involved, not just at the entrance but also in the same membership function.For type-1 fuzzy systems, membership function is two-dimensional (Fig. 2) and for type-2, is three-dimensional (Fig. 3). The 3rd dimension is called “Footprint of Uncertainty” (FOU) and is the function value at each point in a two-dimensional space. As shown in Fig. 3, the membership function can have more than one response to the same input variable.In type-1 fuzzy sets, the value or range of values (between two endpoints) obtained is clearly defined, while on type-2 fuzzy sets average values and standard deviations are used for both endpoints of the type-1 result, creating a blurred area that handles the uncertainties associated to the original endpoints (Fig. 4).The implementation of type-2 fuzzy systems is more complicated than type-1, but there are many fields in which this theory could be implemented, for example to consider the noise present in all real-world plants. Fig. 5shows a diagram of the components of a type-2 fuzzy system, in which the rules are defined as described for Fig. 1 but the output results are obtained diffusely (directly) and crisp through the type-1 reducing element type added to the output processing system. The inference mechanism for type-1 systems handles type-1 fuzzy sets (bi-dimensional in terms of the membership functions), whereas for type-2 handles type-2 fuzzy sets (containing the additional third dimension for fuzziness in the functions return values) and is represented in Figs. 5 and 6as an isolated component. The other important difference is the type reduction required to convert the type-2 fuzzy output as either type-1 fuzzy sets, to “map” type-2 to type-1 outputs by removing the third dimension, or as simple crisp (non-fuzzy) results.To account for a higher degree of uncertainty in the improved algorithm that will consider real systems (which inherently have noise or other uncertainties), part of the theory of type-2 fuzzy systems was integrated based on the definition of the Footprint of Uncertainty (FOU), which is the range of values that the membership function can return for a given input condition. This footprint can be represented as a shadow around the membership function in a type-1 fuzzy system, with the original graphic in the center and an area around that represents the FOU. Fig. 6 represents the FOU wrapping a type-1 primary function.With this idea, a mechanism that adds a configurable range (lower–upper) around a membership function of type-1 fuzzy systems was proposed in this paper to get something similar to what is described in the theory of type-2 fuzzy systems.As shown in Fig. 6, the FOU is obtained by applying a disturbance ɛ as upper and lower range around the initial membership function, yielding a trace symmetrical with respect to the primary function. This disturbance ɛ is defined in a range from 0 to 1, being 0 no disturbance at all and 1 representing the maximum disturbance allowed:(3)ε∈[0,1]The proposed mechanism applies to most-used types of membership function, subtracting and adding (respectively) the disturbance ɛ preset for each value of the primary function (type-1).In the specific case of a triangular membership function, the following variables define their sides (Fig. 7):•x0 (first edge at the base of the triangle).x1 (second edge at the base of the triangle).y0=0 (vertical baseline of the triangle, constant in this case).y1=1 (triangle height, constant in this case).Then, it is necessary to calculate the slope variation m for each new membership function to evaluate (minimum and maximum for this variation):(4)mmin=±1−0(x1−x0)−(x0+ε)(5)mmax=±1−0(x1−x0)−(x0−ε)(6)umin(x)=mmin(x−(x0+ε)),(x0+ε)<x<(x1−x0)1,x=(x1−x0)−mmin(x−(x1−x0))+1,(x1−x0)<x<(x1−ε)0,otherwise(7)umax(x)=mmax(x−(x0+ε)),(x0+ε)<x<(x1−x0)1,x=(x1−x0)−mmax(x−(x1−x0))+1,(x1−x0)<x<(x1−ε)0,otherwisewhere•mmin (minimum slope variation).mmax (maximum slope variation).umin (membership function representing the minimum bound).umax (membership function representing the maximum bound).In Eqs. (6) and (7), the minimum and maximum uncertainty is defined for each of the conditions that represent the different variations of the triangular function. Since the triangular functions are symmetric the same slope is used for both sides of the triangle changing the sign only.The FOU is obtained by applying the disturbance ɛ to both sides of the original membership function:(8)FOU=2εFor example, considering the values x0=1 and x1=2, and applying a disturbance ɛ of 0.1 to the previous calculations, the following functions and charts (Fig. 8) are obtained for a FOU of 0.2 with the simulation of a type-2 fuzzy set membership function:(9)umin(x)=1.1111(x−1.1),1.1<x<21,x=2−1.1111(x−2)+12<x<2.90,otherwise(10)umax(x)=0.909(x−0.9),0.9<x<21,x=2−0.909(x−2)+12<x<3.10,otherwiseBy combining triangular and trapezoidal functions defined for the algorithm proposed in Ortiz de la Vega [29], with the functions for the FOU simulation mechanism discussed in this section, a simplified approximation of type-2 fuzzy system is proposed in this paper, composed by two parallel diffuse inference engines type-1. One for the maximum and the other one for the minimum uncertainty ranges that compose the simulated footprint of uncertainty (FOU), based on the original primary membership function in a similar way as an interval type-2 fuzzy system described in Mendel et al. [4]. Figs. 9 and 10show the mechanism used and the base membership functions for the algorithm. This statement will be demonstrated in the ‘experimental section’ of this paper.By decomposing a type-2 fuzzy system in two type-1 systems it is possible to apply all the theory and tuning methodology of the STA-FLC keeping the tuning simplicity and tested performance but considering now uncertainty in the controlled plants.In order to use the parallel approximation of the type-2 fuzzy systems, the controller has to fulfill some requirements about the number and shape of the membership functions, number of rules, the defuzzification method, etc.The type of fuzzy logic used was based on the Mamdani inference method [35] with two inputs and one output. The inputs are the error and the change of error, and the output is the control action. The plant output is used as the feedback closed loop.The control scheme used is represented in Fig. 11and it will be applied in all the experiments. The saturation blocks restrict the signals in order to represent real constrains.The control goal is to set the error to zero, to fulfill this condition it is necessary to have odd number of membership functions. In this paper five membership functions for each variable are used, and were selected based on their symmetry (three triangular functions in the middle and two trapezoidal functions in the edges to consider the initial and final endpoints). The initial configuration of these membership functions is arranged symmetrical to the central set following Ruspini partitioning [36] and considering three triangular functions. This means that if the shared operation point's condition is kept and a value in the universe of discourse is selected, it intersects two fuzzy sets and their degrees of truth will sum one as shown in Fig. 12.Based on Fig. 13(and Fig. 15 for symbology) to explain this configuration, consider five membership functions Ai, in the normalized range [−1, 1]: Ai(x;γi)∀x∈[−1, 1], where i=1,…,5 and the operation points γiwhich share some of these operation points: a=0, b=1/3, c=2/3, d=1; represented as follows:1.A1(x;−d, −d, −c, −b)=A(−)(x;−1, −1, −2/3, −1/3)A2(x;−c, −b, a)=A−(x;−2/3, −1/3, 0)A3(x;−b, a, b)=AZ(x;−1/3, 0, 1/3)A4(x;a, b, c)=A+(x;0, 1/3, 2/3)A5(x;b, c, d, d)=A(+)(x;1/3, 2/3, 1, 1)Observe that with the Ruspini partitions, the number of parameters to be tuned is reduced.In order to obtain the membership functions for every input or output variable in an application, the normalized membership function has to be multiplied by the maximum absolute value for each input or output. In a real application, the maximum ranges for the membership functions of the error and the change of error, depends on the maximum and minimum values on the range of input sets used for that particular application. These values can be computed experimentally using a step function with the input as the maximum amplitude value (Fig. 14).As example, for the external fuzzy sets of the error:A1(x;−d,−d,−c,−b)=A(−)(x;−emax,−emax,−2/3emax,−1/3emax)A5(x;b,c,d,d)=A(+)(x;1/3emax,2/3emax,emax,emax)The range of the error is given by the minimum and maximum values of the sets,−dd=−emaxemaxand the range for the change of error is−ΔemaxΔemax. This means that if we consider the (a, b, c, d) parameters with this procedure, the value of d is computed with the maximum value.With this step the number of parameters (a, b, c, d) of the FLC is reduced too, and for a fine tuning it is necessary to compute the internal ranges (a, b, c) only.A similar procedure is followed for the output of the controller. The input plant signal boundaries should be taken into consideration to avoid exceeding those limits during the control action.The size and direction of the arrows (Fig. 16) indicate the magnitude and type of error change respectively. Between points 1 and 8 (largest error change), the same behavior but reversed can be observed between points 2–7 and 9–14.To understand the methodology to find the rules, let us define some symbols to characterize the output response (Fig. 15). Let “z” be the symbol for zero while the circled symbols are more negative or positive than symbols without circle, for each case.Once the symbols are established, significant points in the transient response (Fig. 16) should be proposed in order to evaluate those symbols and decide a control action for each operation-point case considering the inputs values. The results of this analysis are expressed by the rule matrices in Tables 1 and 2. The character “n” is used for negative and “p” for positive. Capital letters are used to indicate very negative or very positive and letter Z stands for zero. Table 1 shows where each operation point is placed and Table 2 shows the final decision for the output. The output is composed of five fuzzy sets, maximum decrease (D), decrease (d), no action or zeros (Z), increase (i) and maximum increase (I).Based on Fig. 16 labeled points, Table 1 was obtained to illustrate the corresponding errors and change of errors for each section of the graph. This information will be used to obtain the rule matrix, assigning different labels for each group of points as shown in Table 2. The blank cells are deduced based on the nearest values.The resulting rule matrix (Table 2) is symmetric on the desired response based on the two input parameters, which is the desired and logical approach; this also facilitates the implementation of the rules obtained.The control surface represents the relationship between the inputs and the output, for this case: the error, the change of error and the control signal. The control surface, also called characteristic curve, shows in a graphic way how the FLC output would be, depending on the different combinations of the inputs, and is totally shapable by modifying the membership function and its ranges. The STA-FLC algorithm modifies the control surface with parameter variation in order to achieve different performances, by compressing or expanding the membership functions ranges using a power function.Based on experiments from [37] it was discovered that if an exponent “q” of the power function is applied to the operation points of the membership functions (Fig. 13), such as:(11)γf=γqIn Eq. (11)γ are the operation points of the membership function and γfthe final operation points after the desired compress or expand action. The effect is that the operation points of the intermediate section are increased or decreased based on the value of exponent q. If a slow and easy, or fast and aggressive response is required the power function should be modified accordingly, as depicted in the following scenarios and figures.Considering the normalized membership functions in Fig. 13 as initial condition, three cases can be considered:(1)q=1: In this case the normalized function has no change; so, the characteristic curve is not modified. Look how the distance between the operation points is the same, a−b=b−c=c−d.q<1: After computing the power function, the distances between the middle sets of operation points are longer than the external: aq−bq>cq−dq, producing the expansion of the membership functions and a characteristic curve with small slope as shown in Fig. 17. Remember that a, b, c, d≤1.q>1: This is the opposite case of the previous one, the distances between the two external sets operation points are larger than the others; aq−bq<cq−dq, producing the compression of the membership functions and a characteristic curve with big slope as shown in Fig. 18.The values proposed in Gomez-Ramirez [30] are q∈[04] with the polynomial described in Eq. (12), where:(12)q(k)=4k2Eq. (12) is calculated with three conditions: q(0)=0, q(1/2)=1 and q(1)=4 such that the value of k (k∈[01]) controls the behavior of the compression/expansion function in a very simple and intuitive way as shown in Table 3.The first advantage of these new values q∈[04] when k=0 (or q(k)=0), are that the controller stops working, because for this condition every operation point equals the maximum value in the range, leaving continue variable values inside the range without membership functions, and therefore obtaining a zero response. The second advantage is the reduction of the polynomial size, compared with the first version of Eq. (1)[28] to reduce computational cost, this is very important for FPGA or microcontroller implementation on real applications.Two tuning factors “k” are proposed, one for each input, the output is fixed in similar way (initial condition) than the inputs with a tuning factor k=0.5. To show the effect of each factor, two second order plants are presented; over-damping (13) and under-damping (14) systems. These systems are commonly find in many real-world applications of the form mass-spring-damper, and are also good examples to illustrate the impact of the controller tuning:(13)G(s)=0.81s2+2.16+0.81(14)G(s)=2.17s2+0.8838+2.17In the next lines, the effect of the tuning factors will be shown in a graphic representation.(1) Error tuning factor – k1: This tuning factor is exactly the same that was proposed in Gomez-Ramirez [30] and Gomez-Ramirez and Chavez-Plascencia [28], and has a direct effect in the stabilization time of the response. For over-damping systems, increasing this factor improves the settling time improving the response of the system. Fig. 19shows that for the over-damping system, when k1=0 the response has a very long rise time, producing a big settling time; while, when k1=1 the least rise time is achieved, also obtaining the least settling time.For the under-damping plant there is a similar effect, with the difference that if k1 exceeds a value, the rise time is so fast that produces overshoot as shown in Fig. 20.The above examples demonstrate that by increasing the error factor k1 the rise time is improved, but this does not mean that the settling time will be improved too, if an overshoot is produced the settling time tends to be longer but this can be handled with the error factor k2 which is able to reduce the overshoot.(2) Change of error tuning factor – k2: This tuning factor is responsible of expanding and compressing the change of error membership functions, as shown before. In the next figures the effect obtained by reducing or increasing this factor is shown with an over-damping plant (Fig. 21) and over an under-damping plant (Fig. 22).An important thing to observe is that, when the response starts rising, the slope does not change a lot when the tuning factor is modified because correspond to points 1 and 8 of Fig. 16; this fact is more notorious for the over-damping plant.When the response approaches the input, it is notable that for the lower values of the tuning factor, the slope gets drastically reduced, producing a longer settling time for over-damping plants; but, in the case of the under-damping plants this drastic change in the slope helps reduce expected overshoot.Fig. 22 shows that when k2=0 the maximum overshoot is achieved. Remember that for this value the controller is not working on the change of error, so instead of using a 5×5 rule matrix, a 5×1 rule vector is finally used.As k2 is incremented, overshoot is reduced, but care must be taken because if k2 increases too much the settling time gets compromised.With the introduction of the tuning factors to the inputs membership functions, the users are able to modify the system performance with the usage of only two variables, k1 and k2. Considering that the first factor is able to reduce settling time but generating overshoot, and the second factor can reduce the overshoot, therefore small or none overshoot and small settling time can be obtained if a good combination of both tuning factors is calculated.It may seem quite difficult to tune both factors, but in fact it is easy to get acceptable performance without a complex methodology compared with common PID-tuning procedures. In next lines is a description of an easy empirical method to tune the STA-FLC without complex mathematics, just by looking at the controller response.For a didactical explanation, consider the system in the Laplace domain of Eq. (14), a very simple SISO second order under-damping plant. To begin, let the tuning factors be k1=0 and k2=0 (closed loop mode without controller).As this is an under-damping plant the response presents overshoot, which normally is undesirable. In order to mitigate overshoot and reduce settling time, let the change of error tuning factor be k2=1, this value will produce the lowest slope during the rise and, if possible, overshoot will not exist. This configuration produces the following response (Fig. 23).Now let increase k1 until the quickest response without overshoot is found, in this case it was located on k1=1 (Fig. 24).Once k1 has been chosen, k2 needs to be tuned by reducing this tuning factor, the response rising slope will increase producing a reduction in the settling time, this value should be decreased just before an overshoot appears as shown in Fig. 25, note that the time scale has changed.The result is that the STA-FLC has been tuned in k1=1 and k2=0.8. This configuration gives a very acceptable performance, demonstrating also how easy is to reduce settling time with one variable and reduce the overshoot with a second variable.There could be a lot of tuning configurations in k1=0 and k2=0 to k1=1 and k2=1, depending of the resolution Δk between factors and the control goals required. Letk1,k2∈0,Δk,2Δk,…,1, Tsand Osare settling times and overshoot percentages matrix results of running the procedure for all the tuning factor combinations depending on the Δk value.If Δk=0.05 is fixed for each tuning factor and plot these matrixes as surfaces the behavior of the STA-FLC can be visualized graphically. By looking at Fig. 26, a relation between both surfaces appears, taking special attention in how flat the overshoot percentage (Os) surface is at the right zone, so there are various tuning factors that avoid the overshoot; but in the other hand, for the same zone in the settling time (Ts) surface a very long settling time is obtained.Just when overshoot starts to increase in the right to left transition zone, there are minimum values for the settling time but if we keep going to the left, settling time will increase.Note that for some tuning factors the settling time did not appear because is longer than the open-loop settling time selected as the simulation time. When that happened the value is not available and could not be plotted. This is the reason that some sections of the surface look incomplete.There are many tuning-factors combinations that will work on different plants depending on their nature; but, how to select the optimal tuning factors combination? Well, if all these values could be measured, that would be simplified by setting the control goals; for example, in order to minimize the settling time the key is to look for the optimal k values in the Tsmatrix.In our case the target was to minimize the settling time, minimizing the overshoot as much as possible with a Δk=0.05 resolution. A proposal is to normalize Tsand Osmatrix by Eq. (15); then, sum both factors obtaining a new matrix called the mixed matrix whose surface is plotted (Fig. 27); and finally, select thek1*andk2*values that produce the minimum value in the mixed matrix, as shown below:(15)Norm(X)=X−min(X)max(X)−min(X)withX∈ℜ(16)V=Norm(Ts)+Norm(Os)Vk1*,k1*=mink1,k2Vk1,k2Note that Eq. (16) is just an example of the control goal and can be different for a specific case.In addition to the two criteria factors described (Tsand Os), there are some integral functions normally used in control area to evaluate the response. Depending on the type of integral of the error, one can give more or less weight to large errors, or consider the time of occurrence and duration of the error. This section describes 4 types of integral functions of error that may be used as performance criteria [38] where e(t) stands for the error function:•Integral square error (ISE). Relatively insensitive to small errors, large errors greatly contribute to the value of the integral which gives a response with: small overshoot, relatively low stability and long settling times; is not a very selective criterion. The formula of this integral is:(17)ISE=∫0∞e2(t)dtIntegral absolute error (IAE). Small errors have more influence on the value of the integral compared to ISE, but not with large errors. When handling an absolute value the implementation is simple but the analysis is complicated. Not recommended for systems with too much or too small damping. The formula is:(18)IAE=∫0∞e(t)dtIntegral time square error (ITSE). Initial errors are not considered; much greater weight is given to the errors that stay longer and has higher selectivity than ISE. The following formula describes this integral:(19)ITSE=∫0∞te2(t)dtIntegral time absolute error (ITAE). Initial errors are not considered; much greater weight is given to the errors that remain for a longer time. Usually short settling times and higher overshoot are obtained. Its formula is as follows:(20)ITAE=∫0∞te(t)dtThe setting on the control action is based on minimizing the value of the above parameters.After analyzing the results obtained in Ortiz de la Vega [29], it is clear that in some systems and under certain conditions, when using the parameters obtained by the algorithm the response of the Fuzzy-based controller was improved compared against a PID-based controller, because there are some conditions that the settling time and maximum overshoot criteria do not consider. By combining the criteria previously explained it is possible to obtain best results for a wider variety of plants.The performance criteria (and their combinations) that are included in the updated version of the algorithm are:•IAE+Os(integral absolute error and maximum overshoot).ISE+Os(integral square error and maximum overshoot).ITAE+Os(integral absolute error multiplied by time and maximum overshoot).ITSE+Os(integral square error multiplied by time and maximum overshoot).Two PID controllers were selected to compare, the first one was the ideal PID structure with the Chien–Hrones–Reswick or CHR [39] tuning method while the second selected was the Anti-Windup (AW) structure with the Ziegler–Nichols or ZN [40] tuning method. Table 4shows the tuning factors for these two PID controllers.In Fig. 28, the step response of the second order under-damping plant (14) is plotted for the PIDAW and the STA-FLC. Just as a reference the open-loop output is plotted too, and the results for the ideal PID and other FLC-STA configuration are shown in Table 5.The tuning factors (k1 and k2) represented in Table 5 were obtained by the STA-FLC based on the tuning criteria Ts, Osor the combination of both: Ts+Os. The tuning criteria on FLC is to know which tuning goal to target, Tscriteria is used to minimize the settling time, Oscriteria to totally avoid overshoot, while Ts+Ostargets a balanced reduction for the settling time and the overshoot. Although the Oscriteria alone reduce the Overshoot drastically, the combined criteria perform better in terms of both tuning criteria: Overshoot Osand the settling time Ts, and improves the response compared to the initial PID-tuned results. An additional measurement parameter is the rise time Tr, used to determine how fast it reaches the reference value.As it can be noted in Fig. 28 the FLC is able to practically reduce the overshoot. If Δk<0.05, the reduction of the overshoot would be definitive. Note that tuning factors for this FLC response are different that the factors found manually in Fig. 27.

@&#CONCLUSIONS@&#
According to the results obtained in this paper, the simple tuning algorithm for fuzzy logic controllers remains very simple and easy to use, providing an intuitive way to tune the fuzzy-based controller and achieving acceptable response compared to the traditional PID. The simplicity and ease of use of the algorithm is a notable advance in the implementation of methods based on fuzziness, as normally these methods are quite complicated to deploy in real-world applications.Among the different improvements to the STA-FLC, the new tuning criteria (integral of errors) provide a broader list of parameters that can be considered based on the type of plants to be controlled and the control goals required. This improves the flexibility and applicability of the algorithm. In some plants with specific conditions the results obtained by applying new criterion were better than those obtained by using the original tuning parameters as demonstrated in the experiments included in this paper.Another remarkable improvement in the algorithm was the application of a methodology based on type-2 fuzzy systems to consider uncertainties in the plant, this functionality is critical to apply the STA-FLC in real plants with normal environment (noise) conditions. The methodology was developed based on the theory of the interval type-2 fuzzy systems and it was implemented using a pair of type-1 fuzzy systems in parallel that represent the lower and upper bounds of the new membership function, with an area of uncertainty between called “Footprint of Uncertainty” or FOU.Another proposed improvement was the consideration of variable-gain systems, which is also a very common requirement found on real-world systems, this modification was implemented with an iterative and adaptive procedure that calculates the appropriate feedback gain based on the initial conditions and the plant output.Finally, the last upgrade to the STA-FLC was the introduction of the rule operator factor, in which the AND operator of the fuzzy inference rules, results in a better control action and lower settling times when the plant does not present noise or this is minimal; and the OR operator produces a better response and consideration of disturbances when the system has more uncertainty. This applies also for the original fuzzy inference engine (single type-1), which was defined in Ortiz de la Vega [29] and Gomez-Ramirez [30] and previous works.All these improvements were applied and tested on the STA-FLC, always considering that the tuning simplicity should remain as the most remarkable merit of the algorithm. Many other types of controllers, already widely used in the industry, can achieve similar results, but with additional effort required to properly tune them according to the plant type and their specific conditions.An important future work is to define the necessary constraints to ensure the stability of the proposed fuzzy controller. Other important research area is the automatic computing of the k1 and k2 gains considering all the different tuning criteria and their combinations.