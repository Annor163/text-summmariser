@&#MAIN-TITLE@&#
Five-axis finishing tool path generation for a mesh blade based on linear morphing cone

@&#HIGHLIGHTS@&#
Five-axis finishing tool path based on Linear Morphing Cone (LMC) is presented.The method is implemented on a mesh model.Tool path generated from the proposed method is boundary-conforming.Boundaries of the machining region can be arbitrarily assigned.Experiments are carried out on two mesh blades.

@&#KEYPHRASES@&#
Five-axis tool path,Mesh,Blisk machining,Boundary-conformed,Linear morphing cone,

@&#ABSTRACT@&#
Blisk is an essential component in aero engines. To maintain good aero-dynamic performance, one critical machining requirement for blades on blisk is that the generated five-axis tool path should be boundary-conformed. For a blade discretely modeled as a point cloud or mesh, most existing popular tool path generation methods are unable to meet this requirement. To address this issue, a novel five-axis tool path generation method for a discretized blade on blisk is presented in this paper. An idea called Linear Morphing Cone (LMC) is first proposed, which sets the boundary of the blade as the constraint. Based on this LMC, a CC curve generation and expansion method is then proposed with the specified machining accuracy upheld. Using the proposed tool path generation method, experiments on discretized blades are carried out, whose results show that the generated tool paths are both uniform and boundary-conformed.

@&#INTRODUCTION@&#
Blisk is an important component in aero engines. Because of their complex shapes, blades on a blisk are exclusively manufactured by five-axis machining for its unique advantage of large range of machinability and good machining accuracy.Nowadays, tool path planning plays an important role with regard to computer-aided design, concurrent engineering and their related topics [1]. There are many existing methods for five-axis machining tool path generation, among which the most popular ones are the iso-parametric [2,3], the iso-planar [4–6] and the iso-cusp height [7–11] method. For these three methods, the tool path is generated based on the criterion of choosing a constant parameter in the machining process, i.e., either a constant u or a constant v in the parametric domain of the blade surface, a set of parallel planes with a constant step-over interval, or a constant cusp height between the neighboring Cutter Contact (CC) curves, respectively. These three methods can offer different CC curve patterns, among which the iso-parametric method is the most popular in blade machining, where the blade must be represented as a pure parametric surface. It is exactly because of this parametric representation, in which the boundary of the blade is naturally an iso-parametric curve, the iso-parametric method is able to satisfy the boundary-conforming requirement. Along with these three most common methods, there are also other machining methods aiming at achieving certain specific objectives in the machining process, e.g., good machining efficiency [12], good dynamic and kinematic behavior of the machine tool [13] and effective cutting conditions for the cutter [14], etc. However, all these methods require that the blade be represented as a pure parametric surface. Since for a blade model obtained via a 3-D scanning or CMM acquisition, it can only be represented by a point cloud or mesh, the above mentioned methods can be hardly used to machine the blade directly.Towards the tool path generation for a discretized model (hereinafter referred as a mesh, since a point cloud can be easily constructed into a mesh), the most intuitive way is to modify the existing methods so as to find their application for a mesh model. With this strategy, the iso-planar method can be applied to generate tool path for a mesh model [6,15,16] because it is straightforward to calculate an iso-planar tool path by intersecting planes with the mesh. The iso-cusp height concept was also incorporated into the mesh model tool path generation [17,18] to shorten the total CC curve length. Unfortunately, similar to that in the parametric case, neither of these two adapted methods for a mesh blade is able to meet the boundary-conforming requirement. To address this conforming issue, Sun and Xu did a series of work [19–23] by re-parameterizing the mesh model into a parametric surface with a domain of a square or circular region, so did Oulee et al. [24]. By choosing iso-parametric curves in the re-parameterized domain, the boundary-conformed tool paths can be generated. The method can also be used to generate tool paths for compound surfaces. However, for this method, two sets of very large linear equations are required to be solved in the re-parameterization process, especially when the mesh is very dense, making this method very computational expensive and also prone to numerical instability. Instead of planning the tool path in the re-parameterized parametric domain, Yang et al. [25] and Li [26] directly carried out the calculation on the surface itself to generate boundary-conformed tool paths; but their methods are very complicated and difficult to implement.To address the above mentioned issues, we in this paper propose a new method of 5-axis tool path generation for a blade represented by a mesh. This method is based on a concept called Linear Morphing Cone (LMC), which is defined according to the geometric properties of the blade on blisk. With the help of LMC, CC curves are constructed by intersecting the mesh model with the LMC. For a blisk with a cone-shaped hub, the proposed method can fulfill the boundary-conforming requirement while the specified machining accuracy (i.e., the cusp height) is upheld. The concept can also be easily extended to cases when the hub is represented by not a cone but a general revolution surface.In the following part of the paper, the details of the algorithm of constructing the LMC will be introduced first, in Section 2; and then the tool path generation algorithm based on the constructed LMC will be presented, in Section 3; after that, experiments on two blade models will be described in Section 4; and finally we conclude the paper in Section 5.A blisk is usually composed of a hub with dozens of evenly distributed blades (sometime with splitters) mounted round it.Fig. 1 shows an example (of part) of a blisk with the hub and three blades. For the hub as shown in Fig. 1 (also the bottom surface of any blade), it is a surface of revolution and usually a lateral surface of a cone or cylinder. Also, for the top surface of a blade as shown in Fig. 1, it is always a surface trimmed from a lateral surface of another cone or cylinder. Thus, the two boundaries of the blade on blisk, as shown inFig. 2, lie on two cones.Note that cylinder and cone are similar to each other: both of their lateral surfaces are generated by revolving a line (also called generatrix line) around an axis for 2π degrees. Without losing any generality, we use Cone-1 and Cone-2 to denote the two revolted surface, as shown in Fig. 2.Clearly, for a blade on blisk, Cone-1 and Cone-2 are defined according to its boundaries. The generated CC curves which are cone-conformed also conform to the two boundaries of the blade. For a cone-conforming (also boundary-conforming for a blade on blisk) tool path, the first and last CC curve should lie on Cone-1 and Cone-2, respective, while the rest of CC curves should be uniformly distributed between those two cones. Motivated by this simple fact, we can utilize the two cones, i.e., Cone-1 and Cone-2, to first generate a set of cones that linearly morph from one to the other, and then intersect them with the blade surface to generate the desired CC curves.For the blade model in Fig. 2, its coordinate system is defined in the center of the bottom plane, as shown inFig. 3, where e1 and e2 are the bottom and top edge of Cone-1, respectively. Intersect e1 and e2 with the X–O–Z plane results in two points P1 and P2. Clearly, the line l1 passing through P1 and P2 is the generatrix of Cone-1, as shown in Fig. 3. Similarly, the generatrix line l2 passing through two points Q1 and Q2 can be found for Cone-2.The generation of the morphing cones consists of two steps. First, the generatrix of the morphing cone, lm, is calculated by linearly interpolating between l1 and l2. Next, we revolve lmaround the Z axis to generate a cone, i.e., the LMC. The detailed derivation steps are described below.The generatrix line l1 can be expressed by P1 and P2 in a parametric form:(1)l1=(1−t)P1+tP2wheret∈[0,1]is the parameter of this line.Similarly, the generatrix line l2 can be expressed as:(2)l2=(1−t)Q1+tQ2where parametertis the same as that in Eq. (1).The generatrix line of the morphing cone lmis a linear interpolation of l1 and l2:(3)lm=(1−s)l1+sl2wheres∈[0,1]represents the morphing ratio from Cone-1 to Cone-2.With the generatrix lm, the next step is to revolve it around the Z axis to generate the morphing cone Cone-m:(4)cm=[xmcosθxmsinθzm]where:xm,ymandzmare the coordinates oflm;θ∈[−π,+π], denoting the revolving angle oflmaround the Z axis.Eqs. (2) and (3) indicate that Cone-m is a linear function oftands. Eq. (4) indicates thatcmis also a sine function of the third parameterθ, so that it can be expressed ascm(t,s,θ). An example of Cone-m withs=0.5 is shown in Fig. 2.With the above derivation, the morphing cone can be constructed as a function of three parameters: t, s and θ, where s is the morphing ratio between Cone-1 and Cone-2, which determines the shape of the LMC. For a certain s, the other two parameter t and θ define the location of the point on the cone.With the LMC, the cone-conforming CC curve can be generated by intersecting the LMC with the meshed blade model. Details for this method will be given next.Tool path generation for a meshed blade model based on LMC mainly involves two steps: (1) the CC curve generation, which calculates the CC points so as to obtain a CC curve; and (2) the CC curve expansion, which finds the side step for deciding the next CC curve. Methods for these two steps are explained in details in the next two sub-sections.As already alluded, a CC curve is generated by intersecting the LMC with the meshed blade model. Therefore the CC curve generation is essentially a mesh–cone intersection problem. For a mesh model, its underline component is an edge with two end points. Before solving the mesh–cone intersection problem, the issue of edge–cone intersection should be addressed first.Give an edge with two end points T1 and T2 as shown inFig. 4, it can be expressed as:(5)l(r)=(T2−T1)r+T1=cr+dwhere:c=(T2−T1),r∈[0,1]is the parameter of the edge.For a particular LMC, s is given, e.g.,s=si, and the LMC can be expressed ascm(t,si,θ). Withldefined in Eq. (5), solving the edge–cone intersection problem, i.e.,l(r)intersects withcm(t,si,θ), resorts to finding the solution of parameters r,θand t, which can be achieved by solving a 3 by 3 equations:(6)cm:[(a1t+b1)cosθ(a1t+b1)sinθa3t+b3]=l:[c1r+d1c2r+d2c3r+d3]where: ai, bi, ci, diare the ith component of vectors a, b, c, d that are the parameters constructing the LMC and the edge.We get:(7)[(a1t+b1)cosθ]2+[(a1t+b1)sinθ]2=(c1r+d1)2+(c2r+d2)2Solve the Z component:(8)t=c3a3r+d3−b3a3=m⋅r+nwhere:m=c3/a3,n=d3−b3/a3.Substitute Eq. (8) to Eq. (7), we get:(9)(c12+c22−a12m2)r2+2(c1d1+c2d2−a12mn−a1mb1)r+[d12+d22−(a1n+b12)]=0To solve r, the discriminant ∆ should be solved. If ∆<0, there is no intersection between the cone and the line; Else, select the solution ofrwithr∈[0,1].With r solved, the intersection point can be obtained by substituting r into Eq. (5).With the available node–edge–face topology (such as the half-edge data-structure) of the meshed blade obtained in the mesh constructing and storing process, the mesh–cone intersection problem can be easily solved based on the already solved edge–cone intersection problem.Assume for a triangulated mesh, three lists are constructed to store the nodes, edges and faces of the mesh, denoted asN={n1,n2,…,ni…},E={e1,e2,…,ei…}andF={f1,f2,…,fi…}, respectively. The mesh–cone intersection problem can be easily solved with the following three steps.Step1 Scan the edge listE, until an edgeemis found intersecting with the conecm; this edge is marked as the initial edge intersected by the cone.Step 2 Based on the edge–face topology, find the left face ofem, e.g.,fl; and then traverse its three edges, find the other edgeeo(rather thanem,) which also intersects conecm;Step 3 Substituteemwitheo, and repeat Step 2, until the very initial edge found in Step 1 is reached again.With the node–edge–face topology, the mesh–cone intersection problem can be solved efficiently with the above three steps, with the time-complexity no worse thanO(log(n)), wherenis the number of edges of the mesh.The intersection between the meshed blade and a particular LMC forms a 3-D closed point loop on the mesh. However, the distribution of those points largely depends on the quality of the mesh model, which may be too dense or too sparse. To guarantee an appropriate machining accuracy, the forward step calculation should be carried out by firstly interpolating the intersection points as a cubic spline and then sampling the CC points according to the specified chord error.Assume that the interpolated CC curve iss(t),t∈[0,1], and the specified chord error for the CC point sampling ise, as shown inFig. 5. For the i-th CC curve piwith its parameter ons(t)beingt=ti, the next CC point pi+1 is obtained by calculating the parametric incrementΔtiof the CC curve at pi, which can be approximated as:(10)Δti=8eri−4e2Iwhere:riis the radius of curvature ofs(t)att=ti,Iis the length of the tangent vector ofs(t)att=ti, which isI=||ds(t)/dt|t=ti||2;WithΔtiat picalculated per Eq. (10), the next CC point pi+1iss(t)|t=ti+Δti.In the CC point sampling process, the initial CC point is selected as the points(t)|t=0, and the following CC points are recursively calculated per Eq. (10), until the entire CC curves(t)is sampled, i.e., whent=1is reached.For each CC curve, CC points are generated by intersecting the LMC with the meshed blade model. Given one CC curve, CC curve expansion is to generate the next CC curve, so that the cusp height between the two neighboring CC curves is bounded by some specified value h. In our particular setting, the CC curve expansion problem is equivalent to: from a given LMC ofs=si, find the next LMC withs=si+1.Assume that the i-th CC curve is composed of n CC points, e.g., CCi={CCi,0, CCi,1,… CCi,n}, and for the j-th CC point CCi,jon this CC curve, CCi+1,jis the corresponding offsetting point on the next CC curve CCi+1, as shown inFig. 6.From the tool path generation scheme proposed in Section 3.1, it is clear that both CCi,jand CCi,j+1 are on a certain LMC. Assume that curve CCiis generated from an LMC ofcm(t,si,θ)withs=si, and for CCi,j, there are corresponding values of t andθ, e.g.,ti,jandθi,j. In this case, CCi+1,jcan be expressed by the first order Taylor׳s expansion at CCi,j:(11)CCi+1,j=CCi,j+∂cm∂t|(s=si,t=ti,j,θ=θi,j)⋅Δti,j+∂cm∂s|(s=si,t=ti,j,θ=θi,j)⋅Δsi,j+∂cm∂θ|(s=si,t=ti,j,θ=θi,j)⋅Δθi,jFrom another perspective, both CCi,and CCi+1,jbelong to the blade surface. To carry out the expansion, a local frame k–f–n should be defined on CCi,j, as shown in Fig. 6; wheref⇀andn⇀are the feed direction and surface normal at point CCi,j, respectively, andk⇀is the cross product off⇀andn⇀:k⇀=f⇀×n⇀. The expansion distant from CCi,to CCi+1,jare bounded by the machining accuracy requirement.(12)CCi+1,j−CCi,j=k⇀⋅di,jwheredi,jis the cutting strip width at point CCi,and it is decided by the local geometry around point CCiand the specified maximal cusp height h.The cutting strip width d can be calculated for a given cusp height h as:(13)d={2⁎r2−[2rR−2hR−h22(h+R)]2/(1−r/R)(convexcase)2⁎r2−[−2rR+2hR−h22(h−R)]2/(1+r/R)(concavecase)where: r is the radius of the ball-end cutter, and R is the radius of curvature at the CC point along direction k. Since it is a mesh model, the radius of curvature R for CCi,is estimated with the method proposed in [27].By combining Eqs. (11)–(13),Δsi,jis obtained by solving a 3 by 3 linear equation system. For each CC point CCi,jin CCi={CCi,0, CCi,1,… CCi,n},Δscan be calculated similarly, i.e.,{Δsi0,Δsi,1,…Δsi,n}. To ensure that the cusp height between CCiand CCi+1 not exceed the maximal cusp height h, the minimumΔsamong all the CC points on CCiis selected:(14)Δsi=min(Δsi,j),(j=1,2,…n)WithΔscalculated for LMC withs=si, the next LMC is then readily available:(15)si+1=si+ΔsiIn our implementation, the first CC curve is generated by intersecting the mesh blade with the LMC ofs=0with the method proposed in Section 3.1. From this initial CC curve, expansion is carried out with the equations as described from Eq. (11) to Eq. (15). The two processes – CC curve generation and CC curve expansion – are carried out iteratively, until the whole blade surface is coveredFig. 7.

@&#CONCLUSIONS@&#
