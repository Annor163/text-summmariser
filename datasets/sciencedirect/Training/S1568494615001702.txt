@&#MAIN-TITLE@&#
Size optimization for hybrid photovoltaic–wind energy system using ant colony optimization for continuous domains based integer programming

@&#HIGHLIGHTS@&#
ACOR based integer programming is employed for size optimization.The objective function of the hybrid PV–wind system is the total design cost.Decision variables are number of solar panels, wind turbines and batteries.A complete data set, an optimization formulation and ACOR are benefits of this paper.

@&#KEYPHRASES@&#
Ant colony optimization for continuous domains,Complete data set,Integer programming,Hybrid photovoltaic–wind energy system,

@&#ABSTRACT@&#
In this paper, ant colony optimization for continuous domains (ACOR) based integer programming is employed for size optimization in a hybrid photovoltaic (PV)–wind energy system. ACOR is a direct extension of ant colony optimization (ACO). Also, it is the significant ant-based algorithm for continuous optimization. In this setting, the variables are first considered as real then rounded in each step of iteration. The number of solar panels, wind turbines and batteries are selected as decision variables of integer programming problem. The objective function of the PV–wind system design is the total design cost which is the sum of total capital cost and total maintenance cost that should be minimized. The optimization is separately performed for three renewable energy systems including hybrid systems, solar stand alone and wind stand alone. A complete data set, a regular optimization formulation and ACOR based integer programming are the main features of this paper. The optimization results showed that this method gives the best results just in few seconds. Also, the results are compared with other artificial intelligent (AI) approaches and a conventional optimization method. Moreover, the results are very promising and prove that the authors’ proposed approach outperforms them in terms of reaching an optimal solution and speed.

@&#INTRODUCTION@&#
The earth's capacity for supplying fossil energy will not last long. So it is beneficial to employing inexhaustible energy sources to avoid the depletion of fossil fuels. Hence, solar and wind energies can be appropriate alternatives. Solar energy is the one of the most inexhaustible energy using all over the world. Due to the fact that these energies are abundant, renewable and clean without producing greenhouse gases, numerous researches carried out to optimize the size of hybrid photovoltaic and wind power generating systems in recent years.One of the earliest researches was performed by Kellogg et al. [1], who presented a simple numerical algorithm to determine the optimum generation capacity and storage needed for a stand-alone, wind, PV, and hybrid wind PV system. Also, an economic analysis carried out for these systems and employed to justify the use of renewable energy versus constructing a line extension from the nearest existing power line to supply the load with conventional power. Another study conducted by Habib et al. to meet a certain load distribution demand in the city of Dhahran, Saudi Arabia [2]. This analysis applied to satisfy a constant load of 5kW required for cathodic protection in offshore platforms. Rajendra Prasad and Natarajan performed an analysis to optimize the size of integrated wind, photovoltaic system with battery backup system for the site Pompuhar, Tamil Nadu state in India [3]. In this study, deficiency of power supply probability, relative excessive power generated, unutilized energy probability and levelized energy cost of power generation with battery bank selected as the decision variables. Yang et al. presented the hybrid solar-wind system optimization sizing model to optimize the sizing of the hybrid solar-wind power generation system employing a battery bank [4]. The model of the hybrid system, the model of loss of power supply probability and the model of the levelized cost of energy were three main parts of this study. The size of a PV–wind hybrid energy conversion system with battery storage optimized by Ekren and Yetkin using Box–Behnken design and the response surface methodology based on an hourly operating cost [5]. Also, the objective function was taken as the hybrid system cost and the PV size, the wind turbine rotor swept area and the battery capacity considered as the decision variables. Hakimi and Moghaddas-Tafreshi [6], employed the particle swarm optimization method to optimize sizing of a stand-alone hybrid power system for Kahnouj area in south-east of Iran. The system included fuel cells, some wind units, some electrolyzers, a reformer, an anaerobic reactor and some hydrogen tanks. The aim of this study was to minimize the total costs of the system such that the demand was met. Ekren and Ekren applied the simulated annealing algorithm for optimizing size of a PV–wind integrated hybrid energy system with battery storage [7]. The proposed methodology is a heuristic approach which uses a stochastic gradient search for the global optimization. The objective function was the hybrid energy system total cost which should be minimized. Also, PV size, wind turbine rotor swept area and the battery capacity considered as the decision variables. Belfkira et al. used the DIRECT optimal sizing methodology for a stand-alone hybrid wind/PV/diesel energy system [8]. This algorithm employed to minimize the total cost of the system while guaranteeing the availability of the energy. Also, the optimum numbers and the types of wind turbines, of PV panels and of batteries determined in the optimization procedure. Moreover, the total cost of the hybrid wind/PV/diesel energy system with batteries compared with the hybrid wind/PV/diesel energy system without batteries.Boonbumroong et al. employed the TRNSYS 16 software in assistance with particle swarm optimization (PSO) to optimize the model configuration of a typical AC-coupling stand alone hybrid power system [9]. An existing PV/wind/diesel hybrid power system at Chik Island, Thailand, considered as a reference system. The total cost through the useful life of the system is taken the objective function which should be minimized. Nasiraghdam and Jadid used a novel multi-objective artificial bee colony algorithm to optimize sizing of the distribution system reconfiguration and hybrid (photovoltaic/wind turbine/fuel cell) energy system [10]. The objective functions of this paper were the total power loss, the total electrical energy cost, the total emission produced by hybrid energy system, the grid minimization and the voltage stability index of distribution system maximization. Also, the authors compared the proposed algorithm with NSGA-II and MOPSO methods and showed that there was a good quality and a better diversity of the Pareto front compared with those of NSGA-II and MOPSO methods. Size optimization for a hybrid photovoltaic–wind energy system carried out by Geem [11]. The total design cost which consists of total capital cost and total maintenance cost are taken as objective function. And, the number of solar panels, number of wind turbines and the number of batteries considered as the decision variables. This study applied Branch-and-Bound (B&B) and Generalized Reduced Gradient (GRG) methods to optimize the numerical example which had a regular optimization formulation. Abbes et al. reported a new approach to design an autonomous hybrid wind–photovoltaic (PV)-batteries system in order to assist the designers to take into consideration both the economic and ecological aspects [12]. In this study, the primary embodied energy (EE) introduced as a new criterion for hybrid systems, designing with the objective to minimize loss of power supply probability (LPSP). Also, single and multi-objective optimization algorithms employed to optimize the sizing of a wind-PV-batteries system. Ant colony optimization for continuous domains (ACOR) based 0–1 integer programming is proposed by Fetanat and Shafipour to find the optimal solution of the generation maintenance scheduling in power systems [13]. The objective function of this algorithm considered the effect of economy as well as reliability. Various constraints such as spinning reserve, or duration of maintenance crew are being taken into account. The ACOR formulation developed applied on a power system with six generating units. Liao et al. presented an ant colony optimization algorithm for mixed-variable optimization problems [14]. The proposed algorithm included three solution generation mechanisms including a continuous optimization mechanism, a continuous relaxation mechanism for ordinal variables and a categorical optimization mechanism for categorical variables which allowed tackling mixed-variable optimization problems. Also, the authors introduced a novel procedure to generate artificial and mixed-variable benchmark function. Huang et al. incorporated continuous ant colony optimization (ACOR) with particle swarm optimization (PSO) to improve the search ability, investigating four types of hybridization including sequence approach, parallel approach, sequence approach with an enlarged pheromone-particle table and global best exchange [15]. These hybrid systems employed to data clustering. The experimental results showed that the performances of the proposed hybrid systems were superior compared to those of the K-mean, standalone PSO, and standalone ACOR. Mostapha Kalami Heris and Hamid Khaloozadeh proposed an intelligent particle filter, namely ant colony estimator (ACE) to improve the estimation performance and overcome the well-known problems of Degeneracy and Sample Impoverishment [16]. In this paper, ACOR is used for implementing an adaptive proposal density function, which improves the performance of the estimation algorithm. Zengqiang Chen and Chen Wang employed the neural network method to model the Radio Frequency Identification reflected signal strength distribution [17]. In order to achieving a satisfied solution, a continuous ant colony optimization algorithm that can overcome the defect of back propagation (BP) algorithm combined with neural network. The results showed that this method had a good performance.In this paper, size optimization is carried out for hybrid photovoltaic–wind energy system (Fig. 1) using ant colony optimization for continuous domains based integer programming. The objective function of this system design is the total design cost which is the sum of total capital cost and total maintenance cost. The number of solar panels, wind turbines and batteries are considered as the decision variables. Also, one of the purposes of this paper is to introduce a full data set for the design of a basic PV–wind system. In addition, the results of this problem are compared with other artificial intelligent (AI) and conventional optimization techniques. This study proves a better optimization formulation and solving technique.The remainder of this paper is organized as follows: Section 2 reviews the modeling of problem in details. Section 3 describes ant colony optimization for continuous domains. Section 4 presents the integer programming problem. Section 5 explains the case study. Section 6 provides the results and discussion. Finally, the conclusions summarize in Section 7.The optimization problem is specified as follows:Minimizef(x→)Subject to(1)gi(x→)≥0i=1,2,…,Minehj(x→)=0j=1,2,…,PeqxrL≤xr≤xrUr=1,2,…,Ndvwheref(x→)is the objective function, Mineis the number of inequality constraints and Peqis the number of equality constraints.x→=(x1,x2,…,xNdv)is the set of each decision variable xrand Ndvis the number of decision variables. The lower and upper bounds for each decision variable arexrLandxrU, respectively.Infeasible solutions that violate the constraints have a chance to be included in the feasible solution area. Static penalty functions are used to calculate the penalty cost for an infeasible solution. The total cost for each solution vector is evaluated using:(2)fitness(x→)=f(x→)+∑i=1Mineαi×min|[0,gi(x→)]|+∑j=1Peqβj×|hj(x→)|where αiand βjare the penalty coefficients. Generally minimizing of fitness function (2) is guaranteed if the values of the penalty coefficients are chosen as large numbers.The total cost CTis considered as objective function which includes the sum of total capital cost CCptand total maintenance cost CMtn:(3)MinCT=CCpt+CMtnIn this study, the Capital Recovery Factor (CRF) depends on the interest rate as well as estimated equipment life time. CRF is determined using the following relation [11]:(4)CRF=i(1+i)n(1+i)n−1where i is the annual interest rate and n is the system life span in years. Thus, total annual capital cost CCpt, one may write:(5)CCpt=CRF[NSolCSol+NWindCWind+NBattCBatt+CBackup]where NSolis number of solar panels, CSolis unit cost of solar panel, NWindis number of wind turbines, CWindis unit cost of wind turbine, NBattis number of batteries, CBattis unit cost of battery and CBackupis cost of backup generator for the use when solar and wind energies are not sufficient and storage batteries are low. The unit cost of solar panel CSolconsists of panel price and installation fee and the unit cost of wind turbine CWindconsists of turbine price and installation fee. The number of batteries NBatt, is given by the following equation [11]:(6)NBatt(NSol,NWind)=RoundupSReqη⋅SBattwhere Roundup (·) is a function which returns a number rounded up to an integer number, SReqis required storage capacity, η is usage (%) of rated capacity which guarantees battery's life span and SBattis rated capacity of each battery. The required storage capacity SReqis the function of number of solar panels (NSol) and number of wind turbines (NWind) as(7)SReq(NSol,NWind)=∑t=1Maxt(PSolt+PWindt−PDmdt)Δt−∑t=1Mint(PSolt+PWindt−PDmdt)Δtwhere Max t is the time when cumulative energy (kWh) is highest; Min t is the time when cumulative energy (kWh) is lowest, Δt is unit time,PSoltis the power (kW) generated by solar panels at time t,PWindtis the power (kW) generated by wind turbines at time t andPDmdtis the power (kW) demanded at time t. Here, the power generated by solar panels is derived as follows:(8)PSolt=NSol×PSol_EachtwherePSol_Eachtis the power (kW) generated by each solar panel at time t.PSol_Eachtcan be obtained using insolation data and insolation power characteristic curve. The power generated by wind turbines is derived as follows:(9)PWindt=NWind×PWind_EachtwherePWind_Eachtis the power (kW) generated by each wind turbine at time t.PWind_Eachtcan be obtained using wind speed data, turbine hub height correction function and wind speed-power characteristic curve.Total annual maintenance cost CMtnin Eq. (3) is defined as [11](10)CMtn=CMtnSol×∑t=124(PSolt×Δt)+CMtnWind×∑t=124(PWindt×Δt)×365whereCMtnSolis maintenance cost per kWh for PV array andCMtnWindis maintenance cost per kWh for wind turbine. Here, due to the fact that the battery is vulnerable in the renewable power generation system, the replacement cost of the battery may be also included in the objective function of the total design cost.The constraints considered in this study are as follows: total energy generated by solar panels and wind turbines should be greater than or equal to total energy amount required by users as follows [11]:(11)∑t=124(PSolt×Δt)+∑t=124(PWindt×Δt)≥∑t=124(PDmdt×Δt)The numbers of solar panels and turbines should be non-negative integer variables as follows:(12)NSol=Integer,NSol≥0(13)NWind=Integer,NWind≥0and(14)NSol≤NSolMax(15)NWind≤NWindMax(16)NBatt≤NBattMaxwhereNSolMaxis maximum available number of solar panels,NWindMaxis maximum available number of wind turbines andNBattMaxis maximum available number of storage batteries.In this problem, NSol, NWindand NBattare decision variables.Similarly to a combinatorial optimization problem (COP), also a model for continuous optimization problem (CnOP) may be formally defined:A model Q=(S, Ω, f) of a CnOP consists of:•a search space S defined over a finite set of continuous decision variables and a set Ω of constraints among the variables;an objective functionf=S→R0+to be minimized.The search space S is defined as follows: Given is a set of continuous variables Xi, i=1, …, n, with valuesvi∈Di⊆R. A variable instantiation, that is, the assignment of a value vito a variable Xi, is denoted byXi←vi. A solution s∈S – i.e., a complete assignment, in which each decision variable has a value assigned – that satisfies all the constraints in the set Ω, is a feasible solution of the given CnOP. If the set Ω is empty, Q is called an unconstrained problem model, otherwise is called a constrained one. A solution s*∈S is called a global optimum if and only if: f(s*)≤f(s) ∀s∈S. The set of all globally optimal solutions is denoted by S*⊆S. Solving a CnOP requires finding at least one s*∈S.The idea that is central to the way ACO works is the incremental construction of solutions based on the biased (by pheromone) probabilistic choice of solution components. In ACO applied to combinatorial optimization problems, the set of available solution components is defined by the problem formulation. At each construction step, ants make a probabilistic choice of the solution component cifrom the set N(sp) of available components according to Eq. (17).(17)p(cij|sp)=τijα⋅η(cij)β∑cil∈N(sp)τilα⋅η(cij)β,∀cij∈N(sp)The probabilities associated with the elements of the set N(sp) make up a discrete probability distribution (Fig. 2(a)) that an ant samples in order to choose a component to be added to the current partial solution sp.The fundamental idea underlying ACOR is the shift from using a discrete probability distribution to using a continuous one, that is, a probability density function (PDF) (Fig. 2(b)). In ACOR, instead of choosing a component cij∈N(sp) according to Eq. (17), an ant samples a PDF. In the following sections we explain how this is accomplished. In Section 3.1, we present briefly the idea of using a PDF, and in Section 3.2 we outline the pheromone representation used in ACOR. Finally, in Section 3.3 we give a detailed description of the ACOR algorithm itself.Before going into in-depth description of the ACOR algorithm, we must discuss certain characteristics of PDFs, and select the one that we will use. In principle, a probability density function may be any function P(x)≥0 ∀x such that:(18)∫−∞∞P(x)dx=1For a given probability density function P(x), an associated cumulative distribution function (CDF) D(x) may be defined, which is often useful when sampling the corresponding PDF. The CDF D(x) associated with PDF P(x) is defined as follows:(19)∫−∞xP(t)dtThe general approach to sampling PDF P(x) is to use the inverse of its CDF, D−1(x). When using the inverse of the CDF, it is sufficient to have a pseudo-random number generator that produces uniformly distributed real numbers. However, it is important to note that for an arbitrarily chosen PDF P(x), it is not always straightforward to find D−1(x).One of the most popular functions that are used as a PDF is the Gaussian function. It has some clear advantages, such as a reasonably easy way of sampling – e.g., the Box–Muller method [19] – but it also has some disadvantages. A single Gaussian function is not able to describe a situation where two disjoint areas of the search space are promising, as it only has one maximum. Due to this fact, we use a PDF based on Gaussian functions, but slightly enhanced – a Gaussian kernel PDF. Similar constructs have been used before [20], but not exactly in the same way. We define a Gaussian kernel as a weighted sum of several one-dimensional Gaussian functionsgli(x)and denote it as Gi(x):(20)Gi(x)=∑l=1kωlgli(x)=∑l=1kωl1σli2πe−((x−μli)2/2σli2)Since we use as many Gaussian kernel PDFs as the number of dimensions of the problem, i=1, …, n identifies a single such PDF. The Gaussian kernel Gi(x) is parameterized with three vectors of parameters: ω is the vector of weights associated with the individual Gaussian functions, μiis the vector of means, and σiis the vector of standard deviations. The cardinality of all these vectors is equal to the number of Gaussian functions constituting the Gaussian kernel. For convenience, we will use the parameter k to describe it, hence |ω|=|μi|=|σi|=k.Such a PDF allows a reasonably easy sampling, and yet provides a much increased flexibility in the possible shape, in comparison to a single Gaussian function. An example of how such a Gaussian kernel PDF may look like is presented in Fig. 3.In ACO for combinatorial optimization, pheromone information is stored as a table. At each iteration, when choosing a component to be added to the current partial solution (according to Eq. (17)), an ant uses some of the values from that table as a discrete probability distribution (Fig. 2(a)). In the case of continuous optimization, the choice an ant makes is not restricted to a finite set (Fig. 2(b)). Hence, it is impossible to represent the pheromone in the form of a table. A different approach has to be adopted.We use an idea similar to that proposed by Guntsch and Middendorf in Population-Based ACO (PB-ACO) [21]. In PB-ACO the pheromone table is updated based on the components of good solutions found – just like in regular ACO. However, in regular ACO, the actual solutions found by the ants are discarded once the pheromone table has been updated. In contrast, PB-ACO keeps track of a certain number of the solutions used to update the pheromone table. Instead of using pheromone evaporation, the pheromone associated with the oldest solutions is eventually removed by performing a negative update on the pheromone table – thus canceling its influence.In ACOR we also keep track of a number of solutions in a solution archive T. For each solution slto an n-dimensional problem, ACOR stores in T the values of its n variables and the value of the objective function f(sl). The ith variable of lth solution is hereby denoted bysli. The structure of the solution archive T is presented in Fig. 4.While in case of PB-ACO the components of the solutions are used directly to modify the pheromone table, in the continuous case we use them to dynamically generate probability density functions. In order to accomplish this, a method for generating a PDF based on a set of memorized solutions is defined. As indicated in Section 3.1 (Eq. (20)), the Gaussian kernel PDF Giis parameterized by three vectors ω, μiand σi(each of cardinality k). The solutions in the archive are used to calculate the values of these parameters, and hence shape the Gaussian kernel PDF used to guide the ants in their search process.The number of solutions memorized in the archive is set to k and this parameter determines therefore the complexity of the PDF: There are k separate Gaussian functions making up the Gaussian kernel PDF. For each dimension i=1, …, n of the problem, there is a different Gaussian kernel PDF Gidefined (see Fig. 4). For each such Gi, the values of the ith variable of all the solutions in the archive become the elements of the vector μi:(21)μi={μ1i,μ2i,…,μki}={s1i,s2i,…,ski}The vector of weights ω is created in the following way. Each solution that is added to the archive T is evaluated and ranked (ties are broken randomly). The solutions in the archive are sorted according to their rank – i.e., solution slhas rank l. The weight ωlof the solution slis calculated according to the following formula:(22)ωl=1qk2πe−((l−1)2/2q2k2)which essentially defines the weight to be a value of the Gaussian function with argument l, mean 1.0, and standard deviation qk, where q is a parameter of the algorithm. When q is small, the best-ranked solutions are strongly preferred, and when it is large, the probability becomes more uniform. The influence of this parameter onACOℝis similar to adjusting the balance between the iteration-best and the best-so-far pheromone updates used in ACO.In order to find the final shape of each Gaussian kernel PDF Gi, the vector σiof the standard deviations must still be defined. The detailed description of how this is accomplished is presented in the following section as part of the description of the solution construction process. Fig. 5[13,22], showsACOℝalgorithm.In this section, we outline the ACOR version of the three major algorithmic components of the ACO metaheuristic as presented in Fig. 6.AntBasedSolutionConstruction(). Given decision variables Xi, i=1, …, n, an ant constructs a solution by performing n construction steps. At construction step i an ant choose a value for variable Xi. As mentioned earlier, the Gaussian kernel PDF is composed of a number of regular Gaussian functions. The number of functions used is equal to the size k of the solution archive T. At construction step i, only the information about the ith dimension (i.e., decision variable Xi) is used. In this way, at each step i the resulting Gaussian kernel PDF Giis a different one.Following Eq. (20), in order to define the PDF Githe values of vectors μi, σiand ω must be defined. While the creation of μiand ω has been discussed in Section 3.2, the computation of the standard deviation vector σiis the most complex issue. Before presenting how this is done in detail, we explain the practical implementation of Eq. (20).In practice, the sampling process is accomplished as follows. First, the elements of the weight vector ω are computed following Eq. (22). Then, the sampling is done in two phases. Phase one consists of choosing one of the Gaussian functions that compose the Gaussian kernel. The probability plof choosing the lth Gaussian function is given by(23)pl=ωl∑r=1kωrPhase two consists of sampling the chosen Gaussian function (i.e., at step i – functiongli). This may be done using a random number generator that is able to generate random numbers according to a parameterized normal distribution, or by using a uniform random generator in conjunction with, for instance, the Box–Muller method. This two-phase sampling is equivalent to sampling the Gaussian kernel PDF Gias defined in Eq. (20).It is clear that at step i, the standard deviation needs only to be known for the single Gaussian functiongli(x)chosen in phase one. Hence, we do not calculate the whole vector of standard deviations σi, but only the σlithat is needed.The choice of the lth Gaussian function is done only once per ant, per iteration. This means that an ant uses the Gaussian functions associated with the single chosen solution sl, that is, functionsgli,i=1,…,n,for constructing the whole solution in a given iteration. This allows exploiting the correlation between the variables. Of course, the actual Gaussian function sampled differs at each construction step, as for step i,μli=sli,andσliis calculated dynamically, as follows.In order to establish the value of the standard deviationσliat construction step i, we calculate the average distance from the chosen solution slto other solutions in the archive, and we multiply it by the parameter ξ:(24)σli=ξ∑e=1k|sei−sli|k−1.The parameter ξ>0, which is the same for all the dimensions has an effect similar to that of the pheromone evaporation rate in ACO. The higher the value of ξ, the lower the convergence speed of the algorithm. While the rate of pheromone evaporation in ACO influences the long term memory – i.e., worse solutions are forgotten faster – ξ in ACOR influences the way the long term memory is used – i.e., the search is less biased toward the points of the search space that have been already explored (and which are kept in the archive).As we said, this whole process is repeated for each dimension i=1, …, n, and each time the average distanceσliis calculated only with the use of the single dimension i. This ensures that the algorithm is able to adapt to linear transformations of the considered problem (e.g., moving from a sphere model to an ellipsoid, or rotating an ellipsoid).PheromoneUpdate(). As mentioned earlier, in case ACOR, the pheromone information is stored as a solution archive. This implies that the pheromone update procedure has to perform some form of update on this archive.The size k of the archive T is a parameter of the algorithm. However, k may not be smaller than the number of dimensions of the problem being solved. At the start of the algorithm, the solution archive T is initialized generating k solutions by uniform random sampling.Pheromone update is accomplished by adding the set of newly generated solutions to the solution archive T and then removing the same number of worst solutions, so that the total size of the archive does not change. This process ensures that only the best solutions are kept in the archive, so that they effectively guide the ants in the search process.DaemonActions(). As part of this algorithmic block, the best solution found is updated, so that it may be returned once the termination condition is met. We do not apply any local search heuristics, though this could be easily done to improve the algorithm performance.Solution methods for discrete optimization problems are generally classified into combinatorial and continuous approaches. Combinatorial or discrete optimization problems, that is, problem with a discrete feasible domain and/or a discrete domain object function, model of large spectrum of applications in computer science, operation research and engineering. A typical combinatorial approach generates a sequence of states, which represent a partial solution, drawn from a discrete set. Continuous approaches are based on different characteristics, or reformulations of the considered problem in a continuous space. These characterizations include equivalent continuous non-convex formulations, or continuous relaxation, which embed the initial discrete domain into integer continuous space. While combinatorial approaches represent a more natural or typical way of addressing discreteness of the considered problems, continuous methods may provide new insight into the problem structure and properties, and allow one to develop more efficient algorithms for computing optimal and approximate solutions [23]. Therefore, by considering the above descriptions, ACOR is a continuous approach that solves discrete optimization.Many real-world applications (e.g., production scheduling, resource allocation, VLSI circuit design, etc.) require the variables to be integers. These problems are called Integer Programming problems. Optimization methods developed for real search spaces can be used to solve Integer Programming problems by rounding off the real optimal values to the nearest integers. Size optimization problem is kind of Integer Programming or Discrete Optimization. In our proposed technique, integer variables are primarily released in the form of a real number. While running the algorithm, these variables which have to be changed into integer numbers are rounded to the closest integer number. In other words, suppose is the same real number that is supposed to be changed into integer number, so if xr≺[xr]+0.5, then xris changed intoxr; otherwise, xris changed intoxr.In this paper, the numerical example of Kellogg et al. and Geem [1,11] is considered for optimization. Due to the fact that this numerical example has a complete data set, other researchers can evaluate that using their own mathematical or metaheuristic techniques. A simulation code is developed using VB.net software to facilitate the analyses. Due to the fact that the ACOR is converged rapidly, 100 generations are suitable. M=50 is search population size and serves the speed and accuracy of the calculation. q is a parameter of the algorithm. When it is 0.3, the best-ranked solutions are strongly preferred. The higher of the convergence speed is achieved by the lower of the value of ξ or ξ=0.68. To increase the accuracy and to have more solutions in the archive, k is considered as 100. Moreover, to guarantee of minimization of Eq. (2), the penalty coefficients are considered 200,000.The values of design parameters are given in Table 1. Regarding to life span of each battery which is 4 years, five times on NBattis needed to satisfy the life span of the PV–wind system.The values of annual average hourly demandPDmdtand generated powers by each of solar panels (PSol_Eacht) and wind turbines (PWind_Eacht) are given in Table 2. The value of Figs. 7–9illustrates the annual average hourly demand, the annual average solar power generated by each solar panel and the annual average wind power generated by each wind turbine, respectively.

@&#CONCLUSIONS@&#
