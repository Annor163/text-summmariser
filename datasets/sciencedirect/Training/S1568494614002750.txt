@&#MAIN-TITLE@&#
MOCCA-II: A multi-objective co-operative co-evolutionary algorithm

@&#HIGHLIGHTS@&#
A new multi-objective co-operative co-evolutionary algorithm.A systemic investigation into niching and archiving strategies in multi-objective co-operative co-evolutionary.A comparison study that highlights the performance of different niching and archiving strategies in multi-objective co-operative co-evolutionary.

@&#KEYPHRASES@&#
Co-operative co-evolution,Multi-objective optimization,Evolutionary optimization,

@&#ABSTRACT@&#
Most real-world problems naturally involve multiple conflicting objectives, such as in the case of attempting to maximize both efficiency and safety of a working environment. The aim of multi-objective optimization algorithms is to find those solutions that optimize several components of a vector of objective functions simultaneously. However, when objectives conflict with each other, the multi-objective problem does not have a single optimal solution for all objectives simultaneously. Instead, algorithms attempt to search for the set of efficient solutions, known as the global non-dominated set, that provides solutions that optimally trade-off the objectives. The final solution to be adopted from this set would depend on the preferences of the decision-makers involved in the process. Hence, a decision-maker is typically interested in knowing as many potential solutions as possible.In this paper, we propose an extension to a previous piece of work on multi-objective cooperative coevolution algorithms (MOCCA). The idea was motivated with a practical problem in air traffic management to design terminal airspaces. MOCCA and a further study that was done on a distributed environment for MOCCA, were found to fit the need for the application. We systematically questioned key components of this algorithm and investigated variations to identify a better design. This paper summarizes this systematic investigation and present the resultant new algorithm: multi-objective co-operative co-evolutionary algorithm II (MOCCA-II).

@&#INTRODUCTION@&#
Most real-world problems naturally involve multiple conflicting objectives, such as in cases when attempting to maximize both efficiency and safety of a working environment. The purpose of a multi-objective (MO) optimization algorithm is to optimize a group of objective functions simultaneously. Because of the conflict among the objective functions, the multi-objective problem usually does not have a single solution that is able to optimize all objectives. Instead it has a set of trade-off solutions, known as the set of Pareto-optimal solutions (POS). Any Pareto-optimal solution is optimal in the sense that no improvement can be made in one criterion without a degradation in at least one other criterion. The choice of a solution to be adopted depends on the preferences of the decision makers involved and various other problem-related factors. Hence, a decision-maker is typically interested in knowing as many potential Pareto solutions as possible [1].The most straightforward way to solve a MO optimization problem is to transform it into a single objective one by taking the weighted sum of its objectives. One can then use single objective optimization methods. This approach has two profound drawbacks. First, the choice of the weight vector can highly affect the resultant solutions. Second, the method can only generate the non-dominated set – through a massive number of repeated calls of the optimization algorithm with different weights – only if the Pareto-front is convex; otherwise many solutions won’t be discovered.An evolutionary algorithm (EA) is a population-based optimization heuristic that can evaluate many solutions simultaneously. This allows for the search to be done in parallel and potentially avoids convergence to a local optimum that does not coincide with the global one. Thus, it seems natural to use EA for solving MO optimization problems.In generic terms, there are two primary goals for a MO algorithm to achieve: guiding the search toward the global Pareto front and spreading the solutions properly throughout the Pareto front. In other words, a MO optimization algorithm is expected to find a set of non-dominated solutions, which belong to the optimal Pareto front or as close as possible to it, while spreading uniformly along it. Examples of MO evolutionary algorithms include the Niched Pareto Genetic Algorithm (NPGA) [2], the strength Pareto evolutionary algorithm 2 (SPEA2) [3], and non-dominated sorting genetic algorithm II (NSGAII) [4]. A class of these algorithms can self-tune its own parameters such as the Self-Adaptive Pareto Differential Evolution Algorithm [5].Multiobjective cooperative coevolutionary algorithms promise efficient mechanisms to solve MO problems. The reciprocal interaction between different populations in a coevolutionary algorithm provide an effective strategy to explore and exploit the search space simultaneously. Our aim is to design an efficient multiobjective cooperative coevolutionary algorithm to solve computational red teaming (CRT) [6] problems in the air traffic and capability planning domains. In CRT, we attempt to evaluate solutions against problems. Therefore, the optimization problem naturally falls into two populations, one that optimizes solutions while the other attempts to discover those problems that will fail to be optimized. However, before we can use cooperative coevolution for multi-objective optimization in CRT, we needed to design an algorithm that is efficient on a set of benchmark problems with known characteristics.In this paper, we use a systematic series of investigations to design a new multiobjective cooperative coevolutionary algorithm. The proposed method is based on work done by KC Tan and colleagues [7] on multi-objective cooperative coevolution algorithms (MOCCA). This paper will demonstrate that there are opportunities to improve on this state-of-the-art multiobjective cooperative coevolutionary algorithm.We have chosen this algorithm for a number of reasons. Our main motivation to use cooperative evolution for multiobjective optimization stems from a real-world application that we have to solve CRT problems as we discussed above. In particular, we wish to design the terminal airspace area in the domain of air traffic management. The application requires a method that can decompose the problem. MOCCA does that by assigning each variable to a sub-population. Moreover, while many other studies simply used a classical evolutionary multiobjective optimization method and adopted it for coevolution, MOCCA was designed specifically for multiobjective optimization. The analysis done on the distributed implementation of MOCCA in [8] was also assuring in that we can have a distributed environment to solve our application. When we attempted to analyze MOCCA in more details, we saw opportunities for improving it, making it even more powerful. This initiated and motivated the development of this work.We systematically question key components of MOCCA and investigate variations to identify a better design. We call the new algorithm, multi-objective co-operative co-evolutionary algorithm II (MOCCA-II). The results demonstrate that the proposed approach is capable of evolving solutions toward the true global Pareto-front more effectively, while maintaining a high diversity of the solution set.The rest of this paper is organized as follows. In Section 2, background materials are presented. This is followed by a brief discussion on the co-operative coevolution evolutionary algorithm (CCEA) [7] in Section 3. Two investigations are then covered in Sections 5 and 6, and the proposed algorithm is presented in Section 4. Last, but not least, conclusions are drawn in Section 7.

@&#CONCLUSIONS@&#
