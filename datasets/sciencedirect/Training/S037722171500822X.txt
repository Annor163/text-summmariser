@&#MAIN-TITLE@&#
Iterated Tabu Search and Variable Neighborhood Descent for packing unequal circles into a circular container

@&#HIGHLIGHTS@&#
HighlightA high performance algorithm for packing unequal circles into a circular container.A new insert neighborhood is designed to supplement traditional swap neighborhood.An efficient mechanism to employ the insert neighborhood.The algorithm improves or matches all but one records of three benchmark sets.Analyses on which key new features are important and how they work.

@&#KEYPHRASES@&#
Packing,Tabu Search,Variable Neighborhood Descent,Iterated Local Search,

@&#ABSTRACT@&#
This paper presents an Iterated Tabu Search and Variable Neighborhood Descent (ITS-VND) algorithm for packing unequal circles into a circular container (PUCC). The algorithm adapts the Tabu Search procedure of Iterated Tabu Search algorithms and proposes a Tabu Search and Variable Neighborhood Descent (TS-VND) procedure. We observe there are strong complementarities between the small circles and the large vacant places, and propose the insert neighborhood to match up the small circles with the large vacant places. Although the insert neighborhood is inefficient and time-consuming, it is an important supplement to the classic swap neighborhood as it could arrange the small circles properly. Predicated on these features, we employ the insert neighborhood only at chosen local minima of the swap neighborhood that shows promise for an improvement. The traditional Tabu Search procedure is then transformed into a hybrid procedure composed of two alternative parts, namely Variable Neighborhood Descent and Tabu Search respectively. Besides this reformed procedure, ITS-VND also incorporates other new features, such as an adaptive evaluation function, a novel method for accelerating the neighborhood exploration, and the “collision accidents” criterion for evaluating how intensively the area near the current solution has been explored. The computational results on three well established benchmark sets show that the proposed algorithm not only has a good discovery capability but also can provide good results within a reasonable time. For a total of 84 benchmark instances, the proposed algorithm improves the best-known results on 23 instances, matches 60, and only misses one.

@&#INTRODUCTION@&#
In the past decades, the circle packing problem has been an active research issue in the cutting and packing (C&P) problem family. The problem is to place given rigid circles into a container without overlap. The problem is widely encountered in industry and science fields, including areas such as material manufacturing, logistics, wireless communication, architecture layout, and molecular construction analyses (Adickes et al., 2002; Birgin, Martinez, & Ronconi, 2005; Castillo, Kampas, & Pint´er, 2008). As a classic NP-hard problem, it is difficult to obtain exact solutions. So researchers usually resort to heuristic methods. This paper focuses on an important case of it where the shape of the container is circular and the radii of the circles are not uniform, known as the problem of packing unequal circles into a circular container (denoted by PUCC). We describe it formally as follows.Given a circular container D0 with undetermined radius R, as well as n (n∈N+) circles D1, D2, …, Dnwith known radii r1, r2, …, rn(r1≤ r2… ≤ rn). Let the center of D0 be the origin of the two-dimensional coordinate system and let the coordinate of the center of Di(i∈[1, n]) be (xi, yi). The problem is to find a feasible (non-overlapping) solution (R, X) with smallest container radius R, where X is a configuration denoted by (x1, y1, …, xi, yi, …, xn, yn). The objective can be formulated below:Minimize R, s.t.(1)xi2+yi2≤R−ri,∀1≤i≤n,(2)(xi−xj)2+(yi−yj)2≥ri+rj,∀1≤i<j≤n.Formula (1) forbids any overlap between any circle and the container, and formula (2) forbids any overlap between any two circles.A solution is feasible if it meets the above formulas. An infeasible solution can exist in the intermediate optimization process, and the following potential energy model is used to measure the infeasibility of an infeasible solution (Huang & Xu, 1999):(3)U(X)=∑i=0n−1∑j=i+1n12O2ij.Oijstands for an overlap. When i = 0, Oijis the overlap between the container and circle Dj:(4)O0j=Max{xj2+yj2+rj−R,0}.When i > 0, Oijis the overlap between circle Diand circle Dj:(5)Oij=Max{ri+rj−(xi−xj)2+(yi−yj)2,0}.Previous algorithms which are based on above model fix the container radius on a proper value, and use the potential energy U alone as the evaluation function. However, since there is no way to compare two feasible solutions by U, when the current solution becomes feasible they have to end the process and reduce the container radius. To evaluate the solutions more adaptively, we combine R and U(X) in lexicographical order to form a new evaluation function. When comparing two solutions, we consider one is better than the other only in two conditions: first, the container radius of the former is smaller; second, they have equal container radii but the former has a smaller potential energy. To make the new evaluation function work, we limit the candidate container radii R to some discrete values kv (k∈N+and v is a predefined small constant like 0.1). When we reach a feasible solution (R, X), we reduce R to the largest kv which cannot make the solution feasible again by LBFGS (Liu & Nocedal, 1989) optimization. For example, for the left solution illustrated in Fig. 1, by setting R = (a + 1)v we can get a feasible solution through LBFGS optimization, but by setting R = av we cannot. So we set k = a and adjust the container radius to av. Similarly the container radius of the right solution is adjusted to (a + 1)v. By this means, even without knowing the final potential energy U of these two solutions, we still can judge the first solution as better by simply comparing their final container radii. This example illustrates how R works in the evaluation function.Then we can first minimize the evaluation function 〈R, U(X) 〉 iteratively and then further optimize the final solution into a feasible and compact one by using techniques such as SNOPT (Addis, Locatelli, & Schoen, 2008a). Following this approach we propose the Iterated Tabu Search and Variable Neighborhood Descent algorithm (ITS-VND) to minimize 〈R, U(X) 〉. Compared with the existing Iterated Tabu Search algorithms for this problem (Fu, Huang, & Lü, 2013; Huang, Fu, & Xu, 2013; Huang, Zeng, Xu, & Fu, 2012; Ye, Huang, & Lü, 2013), our algorithm has two major new features: a new neighborhood and a mechanism to combine different neighborhoods.The first new feature is the new neighborhood. Tabu Search (Glover, 1989, 1990) is the basic search engine of Iterated Tabu Search, and how to define moves to construct proper neighborhoods is one of its most important issues. The existing Iterated Tabu Search algorithms for the PUCC problem use the swap moves or the union of the swap and the random relocate moves to construct neighborhoods for their Tabu Search procedures (Huang et al., 2013, 2012; Ye et al., 2013). They have obtained state-of-the-art results recently. However, although the swap moves are powerful, they cannot efficiently handle some occasions. For example, considering the left solution in Fig. 2, one can relieve its infeasibility considerably by placing circle D1 into a vacant place P1 (see the right solution in Fig. 2). But this is difficult to accomplish by swapping two circles or randomly relocating a small circle. To handle this kind of occasions efficiently, we introduce the insert neighborhood. The new neighborhood is developed from the random relocate neighborhood (Huang et al., 2013) and is inspired by the Vacancy Search algorithm for packing equal circles into a square (Huang & Ye, 2010). A solution in the insert neighborhood is formed by picking out a small circle (such as D1 in Fig. 2) from the current solution, and placing it back at a large vacant place (such as P1 in Fig. 2), and further continuously optimizing the resulting solution (The vacant places are calculated beforehand). Comparing with the existing swap and random relocate moves, one can observe that the insert moves can make the best of the complementarities between the small circles and the large vacant places.The second new feature is the mechanism for efficiently combining swap and insert neighborhoods. The GP-TS algorithm (Huang et al., 2013) uses the relocate neighborhood at all the iterations of Tabu Search to supplement the swap neighborhood. But during our tests we found that although the insert neighborhood is complementary to the swap neighborhood, it is time-consuming and less productive. Based on these features, it is better to not employ the insert neighborhood frequently. So we decide to only use it on certain “key occasions”. How to define these key occasions may influence the efficiency considerably. The powerful local search method Variable Neighborhood Search (VNS) (Mladenović & Hansen, 1997) switches to inefficient neighborhoods only when the efficient neighborhood gets stuck at a local minimum. Inspired by it, we classify the inner iterations of Tabu Search into two types, namely improving iterations and non-improving iterations. If an iteration improves the current best solution, it is an improving iteration; otherwise it is a non-improving iteration. Fig. 3provides an illustration on improving and non-improving iterations. We regard the turning points between the improving iterations and the non-improving iterations as our key occasions and employ the insert neighborhood only at this kind of points. The insert neighborhood is expected to eliminate some of the turning points and increase the number of the improving iterations (See the difference between Figs. 3 and 4). It can be observed that the turning points are special among all the local minima. If the insert moves improve the current solution at a turning point, they increase the improving iterations immediately. But it does not necessarily occur at other local minima. Hence these turning points are valuable to the insert neighborhood. After employing the insert neighborhood at these turning points, the Tabu Search procedure then is transformed into a hybrid procedure composed of two alternative parts: Variable Neighborhood Descent (it is the simplest version of Variable Neighborhood Search) and Tabu Search. The Variable Neighborhood Descent part roughly corresponds to the improving iterations, and the Tabu Search part roughly corresponds to the oscillation of the non-improving iterations.Besides the above two features, we also incorporate other new features in the algorithm, including the adaptive evaluation function 〈R, U(X)〉, and the adaptive greedy-redo method for accelerating neighborhoods explorations. In addition, we give a formal definition to vacant degree and vacant points, show analyses to explain which new features are essential, divide the inner iterations of Tabu Search into improving and non-improving ones and based on it give further analysis on how our key new features work. We also define an original conception of collision accident, which is employed to greedily evaluate how intensively ITS-VND has explored the area near the current solution.The rest of the paper is organized as follows. The related works are discussed in Section 2. Then, Section 3 presents a detailed description on ITS-VND algorithm. Section 4 provides the computational results and Section 5 analyzes some key features of ITS-VND. We conclude the paper in Section 6.

@&#CONCLUSIONS@&#
This paper has presented an algorithm for packing unequal circles into a circular container (PUCC), called Iterated Tabu Search and Variable Neighborhood Descent (ITS-VND). The algorithm achieved a very good performance on three well-established benchmark sets with a total of 84 instances. The improvement of efficiency is mainly attributed to the introduction of the new insert neighborhood, and employing the new neighborhood at the turning points to increase improving iterations efficiently. Experimental results show that both the new neighborhood and the mechanism to employ the new neighborhood are important.Other contributions of this paper include: an adaptive evaluation function 〈R, U(X)〉, a formal definition to vacant degree and vacant points, the collision accidents criterion for ending ITS-VND, the adaptive greedy-redo method for accelerating neighborhoods exploration, and an analysis about which new features are important and how they work.Although we only focus on solving the PUCC problem in this paper, the idea about how to efficiently combine Tabu Search and Variable Neighborhood Descent together is quite general and would be applicable to other similar problems.