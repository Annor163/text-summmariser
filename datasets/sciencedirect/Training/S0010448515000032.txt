@&#MAIN-TITLE@&#
A robust conforming NURBS tessellation for industrial applications based on a mesh generation approach

@&#HIGHLIGHTS@&#
A tessellation technique based on a mesh generation is described.A minimum number of elements is generated to encode the shape of a model as compressed as possible.Conformity is guaranteed by construction.NURBS singularities are commented and handled properly.Drawbacks of parametric methods are highlighted.

@&#KEYPHRASES@&#
NURBS surfaces,Surface triangulation,CAD tessellation,Surface untangling,Parabolic lines,NURBS singularities,

@&#ABSTRACT@&#
A NURBS tessellation technique is presented with the goal to robustly approximate CAD surfaces that define the boundary of complicated three dimensional geometric shapes with a minimum number of triangles. The minimization is achieved by generating anisotropic triangles in the three dimensional space. New procedures are presented to handle numerical stability issues due to the anisotropy. The tessellation is generated using a mesh generation viewpoint, as opposed to the more classical viewpoint of graphical visualization of surfaces in CAD. This ensures topological conformity of the resulting mesh. A tiered approximation approach is used for speed and robustness. Degeneracies associated with NURBS curves and surfaces are given special attention as they occur frequently in naval and aerospace conceptual-to-early design process. Analogies with a classical mesh generation process are discussed and several numerical examples illustrate the method.

@&#INTRODUCTION@&#
Tessellations are critical to the design process as they provide early visual depiction of geometry under consideration. They may also serve as the basis for generation of analysis suitable meshes by either providing a starting mesh or by facilitating its sizing field and gradation, where the sizing field is the sizing dictated by the user at a given location in space. An optimal tessellation would:•minimize the number of trianglesbound the distance between the surface and the discrete facets by a user specified normalized error tolerancebound the angle between the surface normal and the discrete facets relying on the provided error tolerancerobustly handle various types of degeneracies in the surface and curve representation commonly employed in the conceptual and early design of aircraft and ship structuresbe a conforming mesh.In the literature, one of the first attempts to achieve optimal interpolation with triangles is proposed by D’Azevedo et al.  [1]. Based on a convex quadratic model, they show that the Delaunay triangulation in a transformed plane minimizes the maximum interpolation error. This work is later extended to minimize the gradient error in  [2]. Lane et al.  [3] appear to have been the first to give a bound in the distance between an analytic surface and its triangulation. However the bound is global and the mesh is isotropic. This bound was later improved by Filip et al.  [4]. However, only orthogonal triangles are considered. Later, Sheng et al.  [5] give bounds for a general triangulation. Bézier surfaces are considered and an approximation of the second derivatives through Chebyshev polynomials is proposed to seek a practical algorithm. Piegl et al.  [6] generalize this approach to trimmed NURBS surfaces relying on yet another approximation of the second derivatives. More recently, Anglada et al.  [7] generalize the bounds for the anisotropic case. As noted in Elber  [8], one of the main drawbacks of relying on the second derivative of the parametrization is the dependence of the error estimate on the parametrization of the surface. In order to remove this dependence, other characteristics of the surface are advocated, such as the principal radii of curvature. As mentioned in  [9], the previous metric tries to bound the distance between the surface and its tessellation. However, no guarantee on the approximation of the tangent plane is given. Furthermore, surface anisotropy increases the sensibility to face normal change as a small change in coordinates may produce a large change in the face normal, which does not appear for isotropic three dimensional triangles. The proposition of  [9] consists mainly in limiting the anisotropy of the metric. Another class of methods relies on the coupling between the surface tessellation and the display by the graphic card of the resulting triangles. Advantage is taken to tessellate only a subset of surfaces visible on the screen  [10,11] at the price of maintaining a dynamic environment. NURBS surfaces are converted into their rational Bézier counterparts, as in Rockwood et al.  [12]. These methods reach a high speed of display but are neither adaptive nor anisotropic, relying on a user specified distance on the screen. Some methods split the surface into subpatches until trimming contours form a unique loop  [12,13]. The main drawback of this approach is the necessity of handling non conforming patches inside the surface. In all the previous references, the tessellation is performed from the parametric plane without any reference to the three dimensional space. Common NURBS features include degeneracies  [14–16], where theG1continuity may not even exist  [17]. Tangent plane and normal computations may be jeopardized. Therefore, some other methods prefer to rely on an error estimate based on a three dimensional criterion. In Balázs et al.  [18], the distance between the control points and the bilinear surface approximation is considered. In Shu et al.  [19], a similar “flat test” is used. In the same spirit, Piegl et al.  [20] do not assume any differentiability of the surface and rely on an approximating plane of the four corners of the control polygon. In Haimes et al.  [21], triangles are split at their centroid if the distance between the centroid and the surface is larger than the defined tolerance. We conclude this literature review by noting that very few references about CAD tessellation generation exist from the main CAD vendors, while CAD tessellation is not an entirely solved problem  [22].Originally, tessellations were primarily created for visualization purposes where every geometric face is tessellated independently. This approach leads to non conforming meshes at face boundaries which may be acceptable for visualization but not for analyses or mesh generation input that relies on conforming tessellations. In this work, a finite element mesh generation process is followed, where edges are meshed first followed by faces that use the existing edge meshes for the boundaries. Conformity is therefore enforced by the design of the meshing process. Conformity is essential to classify mesh entities against their respective geometry entities  [23], to be able to remesh a surface from the original tessellation  [24], or simply to have a conforming mesh to output the tessellation compared to a stereolithographic model (STL), where many topological pathologies may arise  [25–27]. Finally, minimizing the number of triangles allows encoding a geometry with a minimum number of triangles given an accuracy threshold. It also provides the ability to generate sizing fields with a minimum number of elements  [28].The rest of this paper is as follows. Parametric curves and surfaces along with their approximation are reviewed in Section  2; they represent the most widely used class of surface definition in CAD kernels. This allows us to define basic tools to guarantee an accurate tessellation. Some practical pitfalls that are associated with this approach are also discussed. Section  3 presents the core of the method which relies as much as possible on using the three dimensional space instead of relying onG1continuity of the parametric form. Finally, Section  4 illustrates the capabilities of the method on some representative examples.In this section, some basic notions of curves and surfaces are recalled to address the tessellation interpolation problem. It gives the basic tools to measure the tessellation accuracy, and to illustrate the potential pitfalls met in practice. As far as notations are concerned, quantities belonging to the parametric space are noted with lower case letters, while quantities belonging to the three dimensional space are noted with capital letters.In this part, parametric curves are considered. Then, interpolation error estimates are commented. LetCbe a parametric curve from a domainω⊂RtoΓ⊂R3as:(2.1)C:ω⊂R→Γ⊂R3t→C(t).Typically, the parametric curve is assumed to be twice differentiable with respect tot. However, this may not be true in practice.The main aim of a tessellation is to approximate the geometry of the curve as accurately as possible. The length of the curve represents a critical tool to accomplish this task. The lengthLof a parametric curve from parametert0tot1reads:(2.2)L=∫t0t1‖C′(l)‖dlwhere‖C′(l)‖is the norm of the tangent vector of the curve. For a straight mesh edgeABon the parametric line reparametrized with respect totbetween 0 and 1, as shown in Fig. 2.1, it reads:(2.3)L=∫01(B−A)T‖C′(t)‖(B−A)dt.However, the three dimensional length of the curve does not indicate if more mesh edges should be used to discretize the curve accurately. An interpolation error is needed to drive the refinement process. By modifying the metric used in the length of a curve, it is possible to obtain more insight on where to refine, as shown in the next section.The classical Taylor series expansion of the curve aroundt0reads:(2.4)C(t)=C(t0)+(t−t0)C′(t0)+12(t−t0)C″(t0)(t−t0)+O(t3).However, by definition of the tangent vector:(2.5)C′(t)=s′(t)T(t)wheres(t)is the arc length, ands′(t)the speed of the parametrization andT(t)denotes the unit tangent vector. By definition of curvature:(2.6)κ(t)=‖T′(t)‖s′(t)the second derivative term may be written  [29]:(2.7)C″(t)=s″(t)T(t)+s′(t)2κ(t)P(t)where:(2.8)P(t)=T′(t)‖T′(t)‖is the principal normal vector. Reorganizing the terms in the Taylor series, one obtains:(2.9)C(t)=C(t0)+(s′(t0)(t−t0)+12s″(t0)(t−t0)2)T(t0)+12s′(t0)2κ(t0)(t−t0)2P(t0)+O(t3).This clearly shows that for an arbitrary parametrization, first and second order terms appear in the error estimate. The advantage of the last expression is to highlight more clearly the part of the error estimate that is not based on the parametrization of the curve. For the arc length parametrization, it is seen that the second order is driven by curvature in the principal normal direction. Curvature seems therefore to provide a good answer to drive the curve division regardless of the parametrization, as shown in  [8]. A standard approach  [30–32] consists therefore in practice in meshing the curve based on its curvature. Instead of using this standard expression, the length may be evaluated as:(2.10)L=∫01(B−A)T‖s′(t)‖(cρ(t))2(B−A)dtwhereρ(t)is the radius of curvature of the curve, andca scaling parameter. The mesh size is therefore proportional to the inverse of the radius of curvature. Given an errorϵ, the scaling coefficient becomes  [32]:(2.11)c=2ϵ(2−ϵ).It guarantees, for a second order approximation of the curve, to maintain a deviation gap between the mesh elements and the curve geometry ofϵ. Numerically, Eq. (2.10) is approximated with an integration formula. The final length evaluation therefore boils down to the sum of the CAD curve curvature evaluations along a mesh edge, weighted by the parametric one dimensional length. If a localized high curvature occurs, curvature may not be detected if it is associated with a small feature. This is typical of theL2norm. Taking the sup of the curvature along the edge may provide a more accurate mesh curve discretization as it trivially replaces theL2norm by theL∞norm. This is the expected behavior as every geometric feature has to be taken into account.In the first part of this section, some classical notions of differential geometry used in the tessellation process are reviewed briefly. Then, the approximation error is discussed.In this section, parametric surfaces are reviewed, and necessary results are recalled briefly, as this drives the tessellation process. LetSbe a parametric surface, from a domainΩ⊂R2toΣ⊂R3as:(2.12)S:Ω⊂R2→Σ⊂R3(u,v)→S(u,v).Similarly to parametric curves, parametric surfaces are assumed to be twice differentiable. The first fundamental form of the surface  [33,29] is defined as:(2.13)I(du,dv)=edu2+2fdudv+gdv2where, given the tangent vectors(Tu,Tv)=(∂S∂u,∂S∂v), the previous coefficients are:(2.14)e(u,v)=Tu⋅Tu(2.15)f(u,v)=Tu⋅Tv(2.16)g(u,v)=Tv⋅Tv.The first fundamental form relates how distances in the three dimensional space are perceived from the two dimensional space  [34]. It is related to the norm of the tangent vector for a parametric curve, and provides first order information about the surface. Second order information is gathered in the second fundamental form:(2.17)II(du,dv)=ldu2+2mdudv+ndv2where, given the normal vectorN, the previous coefficients read:(2.18)l(u,v)=−Tu⋅Nu(2.19)m(u,v)=−12(Tu⋅Nv+Tv⋅Nu)(2.20)n(u,v)=−Tv⋅Nvwhere(Nu,Nv)=(∂N∂u,∂N∂v). Finally, the principal curvatures and principal directions are the eigenvalues and eigenvectors of the Weingarten map:(2.21)−w(u,v)=(lmmn)(effg)−1.These quantities are independent of the parametrization. The Weingarten map is the projection of the second fundamental form in the normal direction rescaled by the inverse of the first fundamental form. It provides the second order approximation of the surface in the tangent plane.Regarding error approximation, the classical bound on the distance between the surfaceS(u,v)and its triangulationT(u,v)reads  [5]:(2.22)supu,v∈t‖S(u,v)−T(u,v)‖≤29Lmax2(m1+m2+m3)where:(2.23)m1=sup(u,v)⊂t‖∂2S(u,v)∂u2‖(2.24)m2=sup(u,v)⊂t‖∂2S(u,v)∂u∂v‖(2.25)m3=sup(u,v)⊂t‖∂2S(u,v)∂v2‖Lmaxis the maximal edge length of the triangle, andtis the parametric domain of the triangle. Its anisotropic version becomes  [7]:(2.26)supu,v⊂t‖S(u,v)−T(u,v)‖≤29supu,v⊂t(lQx(u,v)(pq),lQy(u,v)(pq),lQz(u,v)(pq))wherepis the site vertex  [7] of(u,v),qis the intersection point between the edge of the triangle opposite topand the line through(u,v)andp, andlQx(pq),lQy(pq)andlQz(pq)are the Riemannian distances evaluated in the metric of the second order derivatives in thex,yandzdirections.The main drawback of these error estimators is due to the fact that they are strongly tied to the parametrization. It is therefore difficult to provide absolute tolerances given an accuracy of the surface approximation, as different parametrizations of the same surface will produce different values. Furthermore, the error estimator provides a bound on the distance between a triangulated surface and the surface, but does not give any hint about the tangent plane approximation. In order to get more independence with respect to the parametrization, a derivation similar to the parametric curves may be followed. Relying on the Taylor development of a surface and using tensorial notations, it reads:(2.27)S(ξ)=S(ξ0)+∂S∂ξγdξγ+∂2S∂ξα∂ξβdξαdξβ+O(ξ3)whereα,β,γrun from 1 to 2 andξ=(u,v). Inserting the dual basis(Tu,Tv)such that:(2.28)Tα⋅Tβ=δαβand:(2.29)Tα⋅N=0the identity reads:(2.30)Id=N⊗N+Tγ⊗Tγ.Therefore:(2.31)∂2S∂ξα∂ξβ=(N⊗N)∂2S∂ξα∂ξβ+(Tγ⊗Tγ)∂2S∂ξα∂ξβ.Or, by definition of the tensorial product:(2.32)∂2S∂ξα∂ξβ=(N,∂2S∂ξα∂ξβ)N+(Tγ,∂2S∂ξα∂ξβ)Tγ.Inserting the expression of the Weingarten operatorwαβand the first fundamental formIαβ, it reads:(2.33)∂2S∂ξα∂ξβ=−wαδIδβN+(Tγ,∂2S∂ξα∂ξβ)Tγ.Finally, reinjecting the last expression into the Taylor development, one obtains:(2.34)S(ξ)=S(ξ0)−(wαδIδβdξαdξβ)N+(dξγ+(Tγ,∂2S∂ξα∂ξβdξαdξβ))Tγ+O(ξ3).This last expression is very similar to (2.9), where the tangent plane terms are controlled by first and second derivatives of the parametrization, while the normal terms are mostly controlled by the principal curvatures.In a surface mesh generation context, classical requirements consist in respecting a size provided in the three dimensional space, and possibly at the same time, to refine areas where curvature is high to accurately capture the geometry. The transfer of the three dimensional information to the parametric plane is achieved using the first fundamental form of the surface:(2.35)m1=(TuTTvT)M(TuTv)whereMis a provided metric in the three dimensional space. Similarly to curves, a metric of the form:(2.36)m2=(TuTTvT)(V1V2N)(1(c1ρ1(u,v))20001(c2ρ2(u,v))2000c3)(V1TV2TNT)(TuTv)whereV1andV2are the principal directions,ρ1(u,v)andρ2(u,v)are the principal radii of curvature, andc1,c2andc3are scaling coefficients, would provide a second order approximation of the surface along the edge. Some freedom exists in choosing thec1andc2coefficients, as described in  [32]. For two different curvature values, the absolute gap will not be the same in both directions even though the relative error is the same. However, guided by the choice of generating the least amount of elements, coefficients of the same value may be picked forc1andc2. Metric intersection  [35] allows us to generate a final metric which takes into account both requirements. In this work however, where only the tessellation problem is considered, the second requirement (curvature capturing) is sought.In this section we highlight some of the pitfalls of using a purely parametric approach to generate a tessellation of a NURBS based geometry representation. For high quality isotropic mesh generation, different limitations associated to parametric approaches are discussed in  [36].Principal curvature is a local quantity. For surfaces with local plateaus, curvature will be very low, inducing an anisotropic sizing field with extremely large values in the direction of the plateau, arbitrarily close to some reasonably well formed metrics. These ellipses, corresponding to the anisotropic sizing in the parametric plane  [34], define the distance properties and contribute to the computations that drive diagonal swaps to improve quality. Large metric variations will therefore produce low quality meshes since an underlying assumption in the metric computation is that the image space is well defined. In  [37], a metric gradation technique is proposed to limit rapid variation of the sizing field based on the principal curvatures to a predefined slope. However, this approach would create an unnecessary large number of facets thus negating the tessellation’s main goal to limit the number of facets. It is therefore not obvious to achieve a well behaved anisotropic sizing field in the parametric plane in a tessellation context.Once the metric of the curvature radii has been chosen, an accurate evaluation of it must be carried out. Some adaptive numerical integration can be used  [38], representing a very generic way of handling the integration problem. However, geometric details may be present in large faces, drastically changing the scales of relevant features in the parametric plane. This may cause either the total loss of a detail, or an over sampling issue giving rise to a drastic increase in computational effort.When generating a parametric mesh by point insertion and local swapping optimization  [39], a classical strategy relies on accounting for the anisotropy created by the second fundamental form, as discussed in the previous section. While isotropic swapping has been well studied under different criteria, such as the Delaunay min–max  [40], or the max min triangulation  [41], very little is known in general about the convergence or uniqueness of an anisotropic swapping approach. In practice, convergence issues may be removed easily by, for example, introducing a maximum number of iteration or another heuristic. However, it is very difficult in practice to guarantee good connectivities for fast varying highly anisotropic sizing fields. Again, this implicitly assumes that the anisotropic size variation induced in the parametric plane has to be smooth enough.NURBS are flexible in representing a wide range of free form shapes. Many complex shape representations using NURBS often produce degeneracies, when control points are merged at the same location. Degeneracies may induce a first fundamental form that suffers from singular or collinear tangent vectors, making curvature difficult to compute and therefore providing indefinite anisotropic sizing. In such cases, a purely parametric view is therefore unable to correctly reproduce the three dimensional representation.Parabolic lines on surfaces are lines separating synclastic areas, where both principal curvatures have the same sign, from anticlastic areas, where both principal curvatures have opposite signs [42,43], as illustrated in Fig. 2.2. Along these lines, the Gaussian curvature is zero, as one of the principal curvatures is zero. Therefore, the anisotropy is very strong, with the danger of missing the curvature of these lines. The torus lower and upper parts constitute a good example of these lines where, up to the second order, the surface is approximated by a cylinder. Therefore, the mesh generator would like to produce an edge as large as possible, potentially covering the entire hole of the torus. More generally, a surface of order higher than two may create difficulties if the surface is not locally well approximated up to the second order. One of the simplest examples is the monkey saddle surface  [33] for which, up to second order, the surface will appear as a plane where the curvature changes sign.Now we describe a method for generating a robust tessellation by pursuing a layered approach, where steps are sequenced based on the amount of geometric knowledge that is needed to describe the surface being tessellated. In practice, it allows for running the fastest and more robust, but less accurate components first, and only then invoking the slower and less robust, but more accurate steps.It is assumed here that the edges have already been meshed based on their curve curvature. These mesh edges form the boundaries of the potentially trimmed faces to be tessellated. Our approach consists of the following main tasks:1.Structured point generation: The first and critical task of the tessellation process is to produce well positioned points on the surface to capture the surface curvature.Structured surface generation: Since all the points generated in the previous step may not belong to the closure of the trimmed face, the second task consists in obtaining a structured grid for the points such that any grid cell that intersects a trimming boundary is discarded.Mesh generation: Starting from the structured grid representation of the previous step, this step applies a mesh generation approach to obtain a topologically conforming tessellation of the possibly trimmed face.Improvements: The final step consists in applying specific local mesh operations to optimize the resulting tessellation.In the following subsections, each step is presented in the order of their use in the overall tessellation process.The generation of points on the surface is done in three substeps. At the start of the first substep of the point generation stage, only the NURBS based definition of the surface is known. As discussed earlier, the NURBS data is necessary to determine parametric locations where shape changes occur and the parametric extent of such variation. In order to find these relevant length scales, knots are scanned in both parametric directions and multiplicities, if any, are removed. Given the degree of the NURBS surface in each parametric direction, additional points are added by uniformly dividing each knot range. The number of points is therefore proportional to the degree of the NURBS surface in each direction. Even though this does not provide a global error estimate, it provides a parametric scale proportional to the degree of the NURBS surface. This a well-known engineering rule of thumb used, for example, in acoustics  [44]. In practice, the number of new points introduced is limited because very high degree NURBS are seldom used due to their poor numerical stability. This is the only step which relies on the explicit NURBS definition. For other surface definitions, if an explicit representative parametric length scale of the curvature variation is known, the rest of the algorithm is applicable.Once an estimate of the geometric scale has been obtained, the second substep refines or collapses rows and columns of control points. This is based on the previously defined discrete error estimate and performed with a simple finite difference normal scalar product which is similar to the “flat test” of  [19,20]. The normal scalar product tries to locally measure the normal variation in order to mimic the Weingarten operator. As commented by  [8], this measure does not involve the size of the object. It does not offer any bound on the interpolation error. For a flat surface with a small bump, a scalar product of two points in the flat region will completely miss the small bump. However, we have already resolved the geometry scale through the previous coarse order estimate. Therefore, curvature should not vary drastically more than what a pointwise scalar product should sense.This brings us to the third and final substep. At this point, the surface curvature should have been captured adequately. The current surface point density however only relies on the surface curvature. A highly curved boundary edge of the current surface generates small boundary mesh edges. If the surface is almost flat, the point density due to the surface curvature will be very low, as illustrated in Fig. 3.1. This may create a scale mismatch, giving rise to an ill conditioned point insertion, where connections should be created between points of very different length scale. Therefore, a final refinement is performed which compares the density of the current cloud of points compared to the density of the boundary points in the boundary mesh edges. If the current length scale of the surface points is too low compared to the boundary points, the surface points are refined. These steps are very fast as only point operations are involved.At the start of the second step, a possibly non uniform structured cloud of points has been created. However, only a subset of these points belongs to the closure of the trimmed surface. The non uniform regular grid of quadrilateral cells created by these points in the parametric plane is intersected by the trimming linear boundary mesh edges. In order to obtain a fast algorithm, a point to edge linked list is created, and mesh edges are intersected based on the edge loops defining the boundary of the parametric face. The intersected cells are discarded, as they are not conforming to the boundaries. The boundary edges of the non discarded cells are created, as illustrated in Fig. 3.2and are added to the existing boundary edges. For the non intersected cells, triangles are automatically created by splitting the cells in two triangles using a normal smoothness criterion. For intersected cells, the local unstructured reconnection will provide the conformity between the boundary mesh edges and the face triangles.This brings us to the third step of the method. As noted before, it is assumed that all the geometry edges have been meshed based on their curvature. A large part of the surface is covered by a structured triangular mesh. However, the conformity of the mesh edges to the mesh faces has yet to be enforced. Two different types of boundary edges exist. The first type comes from the true boundary curves that bound the surface. The second type comes from the boundaries of the intersected structured triangular mesh generated at the previous section. Both types are enforced during the boundary recovery phase described below.Boundary recovery  [30] deals with the insertion of some required mesh edges into a pre-existing triangulation. Delaunay type methods are initialized in the plane with one or two triangles that cover the region of interest, and then insert a given cloud of points one by one. As highlighted in  [34], a mesh is more than a triangulation as it should be conforming to a boundary. In the parametric plane, the boundary mesh is given by the mesh edges of the geometric edges adjacent to the current face. Therefore, it is also required that some of the triangle edges formed by inserting these points match the boundary mesh edges. As only points are inserted, there is no guarantee that by inserting boundary points, boundary edges will appear as triangle edges. This is the main task of boundary recovery.Even though boundary recovery is guaranteed in exact arithmetic in two dimensions  [30], a scaling mismatch may appear between the size of the boundary edges and the extent of the parametric plane. The range of the parametric plane may present a global length scale much larger than local point densities created by high curvature areas, which may numerically jeopardize the point insertion stage. The point insertion order in Delaunay methods has been thoroughly commented in the literature  [30]. The main aim is mostly to avoid the worst case complexity of the incremental insertion strategy by providing some randomness. However, the fact that points may be inserted very close to other points already present in the triangulation inside very large triangles has, to the authors knowledge, not been addressed enough, while it may create a very difficult numerical context. In order to circumvent this scaling issue, the approach proposed in Aubry et al.  [45] has been revisited for the parametric plane:•Boundary points are first sorted and collapsed given their edge size to capture the scale of the edges using them.From the two dimensional boundary edges, an advancing front point creation as described in Löhner et al.  [46] is performed with a geometrically increasing size with a common ratio of the order of 10. This process yields a well conditioned cloud of points regardless of the size of the boundary edges. The point generation is performed in the direction pointing inside as well as outside the edge boundaries. The bounding box is also scaled appropriately to achieve a proper gradation of the element size.Boundary points are inserted incrementally by an approach similar to Lawson  [39] where the element containing the point to be inserted is first split, and diagonal swapping is then applied. Points are inserted in a multigrid ordering, where points associated with a large scale are inserted first. This allows us to greatly reduce the poor conditioning of distorted elements enabling numerically robust edge swap computations.Finally, classical edge swaps are applied to recover the missing boundary edges.As all the boundary edges now exist as edges of triangular mesh faces, it is now possible to classify triangles as interior or exterior to face using a simple mesh traversal procedure. Among the triangular faces that have been classified as interior to the face, a similar traversal will classify those that are the current triangles that overlap with the structured triangles generated previously. It is then simple to remove these triangles and to merge the current mesh containing the boundary edges with the previously generated one.In this section, some enhancements to the basic method described previously are discussed.As mentioned before, small boundary edges due to high curvature, as well as high surface curvature, will generate refinement in the point creation. Due to the structured refinement of the NURBS, a necessary localized refinement may have propagated along the whole surface. A three dimensional collapse procedure produces a tessellation with a minimum number of elements given a geometry tolerance.Simple local operators are used during the mesh generation process. They include the standard split, swap, collapse and move operators  [30] as illustrated in Fig. 3.3. The main component of the algorithm is a Red Black tree  [47] that provides the longest and shortest current edge. We found that a faster convergence and a higher degree of regularity was obtained through this procedure. In a typical isotropic refinement, a split operation may be only permitted if no subsequent tiny edges are created. However, in the current context of anisotropy, it is mandatory to allow such splits. For instance, if a high curvature zone crosses a small part of an edge, the resulting split may produce a new edge outside this high curvature area. This edge will hence be considered as too small. However, it is necessary to split the original edge to resolve the geometry. Therefore, this constraint is not enforced in our method. If more splits are necessary, a subsequent collapse may possibly handle small edges in the metric.The convergence process is much more complex than with isotropic meshes. At each iteration, the current maximum length and minimum length are retrieved through the Red Black tree. A split is attempted if the edge is too long and subsequent swaps improve the mesh quality right away. Then, the collapse operator is attempted if the minimum edge is too small. The process should be guaranteed to terminate in a finite number of steps. However, numerous hysteresis may occur. For example, an edge split does not guarantee that the newly created edges are all smaller than the original edge. A feature may have been discovered in another direction that the original one. A swap is based on quality and may generate an edge smaller or larger than the current minimum or maximum. To ensure convergence, some rules are enforced based on empirical results:•The split operator is the least constrained operator. It is based on the assumption that a small feature cannot be missed.The collapse operator cannot recreate edges larger than the threshold value for large edges. Therefore a collapse cannot undo the result of a split.The swap operator cannot regenerate an edge larger than the current global maximum. If a small edge is created, the collapse operator will be applied.Surface tangling appears when the triangle face normal is in the opposite direction compared to one of its point normals provided by the CAD kernel. It means that locally, the orientation of the discrete surface is opposed to one of the CAD surface. The triangle surface may however be very close to the CAD surface distance wise, providing a good zero order approximation to the surface. It is therefore the first order approximation to the surface, the tangent plane, which is very poor. As presented in  [9], a unit parametric mesh in the metric of the principal curvature radii does not necessarily guarantee avoidance of tangled elements. It is also stated in the previous work that the normal variation of an anisotropic triangle is very sensitive to the variation of the coordinates of the triangle is used. Considering a perfectly equilateral triangle, moving one of its vertices produces only a small change in the triangle normal. Considering now a very anisotropic triangle, moving a vertex associated with a small edge may produce a large change in the normal direction, as illustrated in Fig. 3.4. Considering curvature bounds the distance between the triangle and the surface, but no bound is provided on the tangent plane approximation, as this would need a third order approximation of the surface. Therefore, there is no guarantee that a valid two dimensional parametric mesh will produce a valid three dimensional surface mesh. Here, validity is considered by measuring also the approximation of the surface tangent plane by the triangle facets.As tangled meshes may occur, some provisions are made to handle these specific cases. Recently, various procedures have been proposed to deal with the untangling of either high or lower order meshes  [48–50]. As only linear triangles are used in this work, a simpler approach has been pursued based on the work of  [51]. When a volume mesh is tangled, or equivalently has negative Jacobians, or volumes, the procedure consists in maximizing the current volume to untangle the mesh. The equivalent for a surface consists in maximizing the value of an indicator of the alignment between the triangle and the tangent plane of the parametric surface. In this work, the reliable indicator of  [32] is used, and consists in evaluating the minimum scalar product between the point normals and the face normal for a given triangle. As shown in   [52,53], as long as a valid topological triangulation is preserved, swaps can be performed. The validation of the swap adds the avoidance of an already created edge in the mesh.In this section, some numerical examples illustrate the application of our proposed method. The tessellation generation is a low level process, that talks straight to the CAD kernel, and that provides the tessellated faces to the renderer module. Timings are provided for each example for an Intel i5 at 2.6 GHz with opensuse 12.3 and the gcc compiler.This first example illustrates the method on simple shapes, namely frustum, which is here a truncated cone with 10 sides, torus, sphere, cylinder, cone and cube, as shown in Fig. 4.1. The cube has 6 faces, the sphere has 4 faces, the cone has three faces, the torus has one face and the frustum has 12 faces with this particular CAD kernel. On planar faces, no inner surface points are expected when curvature is null. For a sphere, an isotropic mesh is obtained as curvature is constant regardless of direction. The cylinder illustrates anisotropy where curvature is non null only in one direction. The torus is more complicated as it has different curvatures sections. Some sections are elliptic, as the outer parts with a fine anisotropic mesh is obtained. Some parts are hyperbolic, such as the inner part where again a fine mesh is obtained due to the high curvature in one direction. Finally, some parabolic part appears with the highest stretch along the orthoradial direction. The mesh clearly illustrates the principal directions. For these example, an error tolerance of 0.001 as been used. Fig. 4.2​illustrates the same models with an error tolerance of 0.0007. An expected refinement pattern is observed. Less than a second is necessary to generate both tessellations.This example involves a more complex curvature field across the surface. However, a minimum number of elements is used to describe the surface. The surface is composed of only one face. Fig. 4.3displays the surface for an error of 0.0007. The mesh contains 37554 triangles and 19272 points. Less than a second was necessary to generate the tessellation. Table 4.1displays the number of triangles generated and the timing given the error. Table 4.2provides the same information without optimization. It appears clearly that the optimization takes more CPU times but consistently achieves to decrease the number of triangles originating from the structured mesh. Regarding the number of triangles generated, it clearly shows that, as the error decreases, the refinement tends to be isotropic in the limit. This is consistent as in the limit, the surface appears more and more planar locally. Fig. 4.4shows the tessellation obtained from the native CAD SMLIB  [54] for comparison purposes. Unfortunately, refinement occurs in a non intuitive manner, where some locally planar areas are over-refined compared to high curvature areas, which are too coarse at some other locations. Furthermore, it seems that the curve tessellation error does not match the surface tessellation error.This example represents the space shuttle main features. Only two faces composed of two NURBS surfaces are used to represent the whole model. Some control points are collapsed and a strong distortion of the mapping appears at the tip of each winglet. Fig. 4.5displays the surface for an error of 0.0007. The mesh contains 41446 triangles and 20976 points. The tessellation has been generated in one second.In this part, two models presenting singularities and discontinuities are tessellated to illustrate the behavior of the tessellation. The first contains a singularity along an edge. In the second model, various singularities run across the surface.This example represents a propeller blade. It is constituted by one face composed of one NURBS surface, with three edges, one being used in both directions. Therefore, one edge of the four sided parametric NURBS degenerates into one point in the three dimensional space. Furthermore, as one edge is used twice, the surface completely wraps the singularity, creating huge deformations of the parametric mapping. The mesh contains 11,141 triangles and 5601 points and is illustrated in Fig. 4.6. The tessellation has been generated in less than a second.For this example, some full rows of control points are merged to produce aG0surface. There is again only one topological face in this example. Some chines clearly appear inside the surface through the edges. The mesh contains 28,247 triangles and 14,211 points and is displayed in Fig. 4.7. The tessellation has been generated in less than a second.This example, downloaded from the excellent GRABCAD  [55] repository, represents a complex turbine, and is shown in Fig. 4.8. The geometry is composed of 8158 faces. The mesh contains 2,337,013 triangles and 1,156,928 points. The tessellation has been generated in 1 mn and 30 s.

@&#CONCLUSIONS@&#
