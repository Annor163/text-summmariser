@&#MAIN-TITLE@&#
A bi-objective continuous review inventory control model: Pareto-based meta-heuristic algorithms

@&#HIGHLIGHTS@&#
We propose a bi-objective multi-product (r,Q) inventory.We consider budget limitation and storage space in the model.We present several multi-objective Pareto-based optimization algorithms.The algorithms are compared with best-developed multi-objective algorithms.

@&#KEYPHRASES@&#
Inventory control,Continuous review,Multi-objective optimization,Pareto-based meta-heuristics,

@&#ABSTRACT@&#
In this paper, a bi-objective multi-product (r,Q) inventory model in which the inventory level is reviewed continuously is proposed. The aim of this work is to find the optimal value for both order quantity and reorder point through minimizing the total cost and maximizing the service level of the proposed model simultaneously. It is assumed that shortage could occur and unsatisfied demand could be backordered, too. There is a budget limitation and storage space constraint in the model. With regard to complexity of the proposed model, several Pareto-based meta-heuristic approaches such as multi-objective vibration damping optimization (MOVDO), multi-objective imperialist competitive algorithm (MOICA), multi-objective particle swarm optimization (MOPSO), non-dominated ranked genetic algorithm (NRGA), and non-dominated sorting genetic algorithm (NSGA-II) are applied to solve the model. In order to compare the results, several numerical examples are generated and then the algorithms were analyzed statistically and graphically.

@&#INTRODUCTION@&#
Inventory model as a main issue of production management has been studied widely during the last decades. In inventory models, determining the order quantities of products is one of strategic decisions. One of the models that has been attended over the past years, is the (r,Q) model in which an order of size Q should be placed when the inventory level drops to a reorder point r. In the (r,Q) model, the problem is determining the economic order quantity Q and the economic reorder point r.In many real inventory systems with regard to stochastic demand, some costumers may encounter with shortage. In other words, when the system is out of stock and the supply and demand are not in the same size, two different situations may occur: if the customer, whose needs are not critical at that time, will wait for the item to be fulfilled, then the demands will be backordered (backorder case) but if the costumer cannot wait and fulfills the demand by another supplier, then all the demands are lost (lost sales case). Das [1] and Yano [2] considered a stochastic (r,Q) inventory system with complete backordering. Buchanan and Love [3] presented the lost sales case for a special inventory system with Poisson demands and Erlang lead times. Kim and Park [4] proposed a stochastic inventory model in which a fraction of stockout is backordered and the rest of the demand is lost. Axsater [5] provided a good review of the models dealing with continuous review policies for inventory systems. Salameh et al. [6] considered a (r,Q) inventory system in which delays in retailers’ payments could happen immediately after the receipt of the order or till the next replenishment order. Zhang et al. [26] proposed an inventory control system with continuous review policy and considered Poisson demands and constant lead time in their model. Hill [7] presented a continuous review lost sales inventory model with a Poisson demand process. Mitra [8] analyzed a deterministic model under continuous review inventory model in a multi-echelon system including suppliers, depots and distributors. Tajbakhsh [9] considered a continuous review (r,Q) inventory model with a fill rate service constraint and relaxed the assumption that the distribution of lead time demand is known. Zhao et al. [10] studied a multi-item continuous review inventory model with regarding resources’ limitation and stochastic demands. Alaghebandha and Hajipour [11] presented a mathematical model for a multi-product continuous review inventory model and considered warehouse spaces, service level, number of shortages and cost of expected shortage limitations and finally used an ICA algorithm to solve the proposed model. Saracoglu et al. [12] formulated a multi-product inventory models as an integer linear programming which considers some constraints such as capacity constraint and budget limitation and finally developed a genetic algorithm to solve their problem.Most of the relevant researches in the (r,Q) model, consider a single objective problem. For example some researches attempted to define the economic order quantity and reorder point through minimizing the total cost of the inventory system. Some other studies considered maximization of service level in an inventory system. Despite of these single objective models, some researches considered several objectives simultaneously and provided multi-objective models. Agrell [13] proposed a multi-criteria framework for an inventory control system and determined lot size and safety stock (service level). Mahapatra and Maiti [14] presented a multi-objective inventory model and involved the impact of quality level into the demand function. Mandal et al. [15] considered a multi-objective fuzzy inventory model and used geometric programming method to solve it.All of the abovementioned works applied a weighting approach to convert the multi-objective problem to a single one. In the recent years, some researches applied meta-heuristic approaches to solve the multi-objective inventory models. Among algorithms used for multi-objective problems, non-dominated sorting genetic algorithm (NSGA-II) is a commonly used Pareto-based algorithm proposed by Deb et al. [16]. This algorithm is applied in different areas of industrial and operational management. Bhattacharya and Bandyopadhyay [17] employed NSGA-II for solving conflicting bi-objective facility location problem. Chambari et al. [18] implemented NSGA-II to solve a bi-objective redundancy allocation problem. Mehdizadeh and Tavakkoli-Moghaddam [19] proposed a new meta-heuristic optimization algorithm, namely vibration damping optimization (VDO), which is based on the concept of vibration damping in mechanical vibration. They first utilized the VDO algorithm to solve the parallel machine scheduling problem. This algorithm simulates the vibration phenomenon. In addition, Mehdizadeh et al. [20] proposed a hybrid VDO algorithm to solve the multi-facility stochastic-fuzzy capacitated location-allocation problem. Furthermore, Mousavi et al. [21] developed a special type of the VDO algorithm to solve capacitated multi-facility location–allocation problem with probabilistic customers’ locations and demands. In the recent years, according to the efficiency of this algorithm for single-objective problems, many researchers attempt to use this algorithm for multi-objective problems. Hajipour et al. [22] introduced multi-objective version of VDO called MOVDO to solve the multi-objective optimization problems. Hajipour et al. [23] applied MOVDO for solving redundancy queuing facility location-allocation problem. Based on Atashpaz-Gargari and Lucas [24] presented a new kind of evolutionary algorithm, called imperialist competitive algorithm (ICA), which is inspired by a social phenomenon. They used this algorithm for some benchmark problems to show its ability in finding good solutions.Tsou [25] used a multi-objective particle swarm optimization (MOPSO) algorithm to solve the inventory system. Tsou [26] developed his algorithm and applied an improved version of MOPSO (IMOPSO) in which a local search is used to enhance the convergence to the Pareto-optimal front. He also employed a clustering technique to the non-dominated archive to control the speed and diversification of the search. Moslemi and Zandieh [27] presented a comparison of some recent improving strategies on MOPSO algorithm in continuous review stochastic inventory control system.Unlike many researches in which a single objective (r,Q) inventory model is considered, in this paper a bi-objective continuous review (r,Q) inventory model with regard to backordering of the shortage, storage space limitation and budget constraint is presented. The first objective function aims to minimize the total cost of the system, consist of holding cost, ordering cost and shortage cost and the second objective function, maximizes the service level through minimizing the cumulative distribution of the demands. Considering these objective functions simultaneously, on one side leads to reduce the total cost of the system and on the other side helps in having more satisfied customers with regarding to service level issue. Furthermore, according to the complexity of the proposed bi-objective model, two novel Pareto based multi-objective approaches including MOVDO and MOICA are used to solve the bi-objective model and the results are compared with other Pareto based approaches including MOPSO, NRGA, and NSGA-II which have been employed a lot in the literature to solve multi-objective models.The rest of this paper is organized as follows: in Section 2, the parameters and variables are defined and then the bi-objective multi-product (r,Q) model is formulated. In Section 3, the multi-objective Pareto-based meta-heuristic algorithms are explained. Next, the results and comparisons are analyzed in Section 4. Finally, the conclusion and further research suggestions are given.In this paper, a bi-objective multi-product inventory system is considered in which the inventory level is reviewed continuously. It is assumed that the demand of each product is a continuous random variable with a uniform probability density function f(xi) and cumulative distribution function F(xi). The inventory control policy of this system is a (r,Q) policy. Based on this policy which is a generalization of the EOQ model, when the inventory level reduces to the level r, an order of size Q should be placed [28]. It is assumed that shortage is allowed for each product and it can be backordered [29]. Also a budget constraint and limited storage capacity are considered in the model.This paper formulates the abovementioned multi-product inventory system as a bi-objective model in which the first objective function attempts to minimize the total cost of the system and the second objective function tries to maximize the minimum of the service level, simultaneously. The problem is finding the optimal order quantity and reorder point for each product with regard to mentioned objective functions.Assumptions•Shortage could occur as backorderThe demand for each product during the lead time is stochastic and has a continuous uniform distribution functionThe rate of annual demand for each product is fixedThe budget is limitedStorage space of the warehouse is limitednumber of productsmaximum capacity of warehousemaximum budget for producing safety stockannual holding cost per unit of product iexpected demand of product iannual shortage cost per unit of product i in backorder situationmaximum shortage level of product iprobability density function of realized demand for product irandom variable of realized demand for product icumulative distribution function of realized demand time for product iaveraged shortage of product i per cyclepurchasing cost per unit of product idemand rate of product i unit per yearstorage space per unit of product ifixed ordering cost of product iorder quantity of product ireorder point of product i(1)MinZ1=∑i=1Nhiri−μi+Qi2+πi.DiQib¯(ri)+DiQiai(2)MaxZ2=MiniF(xi)s.t.(3)∑i=1N((ri−μi)⋅Ci)≤B;∀i=1,…,N(4)∑i=1N(si(ri−μi+Qi))≤CP;∀i=1,…,N(5)DiQib¯(ri)≤ki;∀i=1,…,N(6)ri,Qi≥0andinteger;∀i=1,…,NEq. (1) minimizes the total cost of the inventory system including the holding cost of inventory, shortage cost, and ordering cost. Eq. (2) maximizes the service level through minimizing the cumulative distribution of demand during the lead time. Eq. (3) assures the budget limitation. Eq. (4) guarantees that the storage space should not exceed the maximum capacity of the warehouse. Eq. (5) avoids the averaged shortage of product i to be more than the maximum shortage level of product i. Eq. (6) denotes the variables type.Many researchers have successfully applied meta-heuristic approaches to solve complicated optimization in different fields of industrial and operation management. These researchers also involve the NP-hard mixed binary integer programming for the inventory control problem. In their model, we follow to obtain the solutions which are both desire and inexpensive. These two goals are addressed by a bi-objective model. Since main concept in multi-objective optimization is objectives confliction, in their model, when the holding cost (the first part of objective function is reduced, service level is decreased; therefore, the objectives confliction is provided.In this section, two Pareto-based meta-heuristic algorithms called MOVDO, MOICA are proposed to solve the presented bi-objective mathematical formulation at hand and the results are compared with several common Pareto-based meta-heuristic algorithms such as MOPSO, NSGA-II, and NRGA. First some required multi-objective backgrounds are defined in the following subsection. For better clarification, Fig. 1shows the graphical explanation of solving bi-objective multi-period system by proposed meta-heuristics.Consider a multi-objective model with a set of conflict objectivesO(x→)=o1(x→),…,om(x→)subject togi(x→)≤0,i=1,2,…,c,x→∈X, wherex→denotes n-dimensional vectors that can get real, integer, or even Boolean values and X is the feasible region. Then, for a minimization model, solutiona→dominates solutionb→(a→,b→∈X)if:1.oi(a→)≤oi(b→),∀i=1,2,…,mand∃i∈{1,2,…,m}:oi(a→)<oi(b→)As you probably already know, a set of solutions that cannot dominate each other are called Pareto solutions set or Pareto front. A good Pareto front has two features: (1) good convergence, and (2) good diversity of the solutions. Accordingly, Pareto-based algorithms aim to achieve the Pareto optimal front during the evolution process. The front of the last iteration of the algorithms is called the Pareto optimal front. This front is expected to have the most convergence and the highest diversity [16].VDO is a meta-heuristic algorithm that works on the concept of vibration damping in mechanical vibration improvisation of musicians [19]. In this paper, the multi-objective version of VDO algorithm has been developed for discrete environments of the current research. The details of this algorithm are explained in the following subsections.The chromosome structure which is used to code solutions is shown in Fig. 2, where N is the number of products, riis the reorder point of ith product, and Qiis the quantity of ith product. The main logic of this representation is to determine the quantity of each product along with its reorder point.Since some constraints are likely to be violated, they are penalized using the method given in Yeniay and Ankare [30]. In other words, infeasible solutions are fined using Eq. (7).(7)P(x)=M×g(x)b−1≥0where M, g(x), P(x), and o(x) represent a large number, the constraint under consideration, the penalty value, and the objective function value of chromosome x, respectively. In this equation that is designed for a constraint like g(x)≤b, more violations receive bigger penalties. Moreover, penalty values are considered for all of the three objective functions through an additive function given in Eq. (8).(8)J(x)=o(x);x∈feasible regiono(x)+P(x);x∉feasible regionIn the vibration theory, the concept of vibration can be considered to be the oscillation. If the damping is small, it has very little influence on the natural frequencies of the system, and hence the calculation for the natural frequencies is nearly made on the basis of no damping. In the VDO algorithm, at high amplitudes, a scope of a solution is bigger and the probability of obtaining a new solution is further. Therefore, when the amplitude is reduced, the probability of obtaining a new solution decreases, and then the system stops from the amplitude state [19].In the analogy between an optimization problem and the vibration damping process, the states of the oscillation system represent feasible solutions of the optimization problem, the energies of the states correspond to the objective function value computed at those solutions, the minimum energy state corresponds to the optimal solution to the problem, and rapid quenching can be viewed as local optimization.The VDO algorithm starts working by generating random solutions in the search space. Then, the algorithm parameters including initial amplitude (A0), max of iteration at each amplitude (L), damping coefficient (γ) and standard deviation (σ) are initialized. Then, the solutions are evaluated by means of the objective function value (OFV). The algorithm contains two main loops. The first loop generates a solution randomly and then using neighborhood structure a new solution is obtained and it chooses the best one. However, similar to the SA algorithm, the solution with a lower OFV can be selected with regarding to the Rayleigh distribution function. In fact, the new solution is accepted if Δ=OFV (New Solution)−OFV (Current Solution)<0. Besides, if Δ>0, generates a random number ɛ between (0, 1) the current solution is selected with regards to the following criteria:(9)ε<1−exp−A22σ2The second loop which adjusts the amplitude is used for reducing them in each iteration. The algorithm is stopped when the stopping criterion is met.(10)At=A0exp−γt2After brief illustration of the VDO algorithm, the first proposal of applying a multi-objective version of the VDO algorithm called MOVDO is introduced to solve and manage Pareto-optimal solutions. To do so, two main concepts of multi-objective meta-heuristics; namely, fast non-dominated sorting (FNDS) and crowding distance (CD), are employed to compare the solutions. In FNDS, R initial populations are compared and sorted. In order to do this, all chromosomes in the first non-dominated front are first found. Since both objective functions in the mathematical model are to be minimized, the chromosomes are chosen using the concept of domination. In this case, yiis the non-dominated solution within the solution setyi,yj. Otherwise, it is not. Then, in order to find the chromosomes in the next non-dominated front, the solutions of the previous fronts are disregarded temporarily. This procedure is repeated until all solutions are set into fronts.After sorting the populations, a CD measure is defined to evaluate solution fronts of populations in terms of the relative density of individual solutions [16]. To do this, consider Z and ok; k=1,2,…,m as the number of non-dominated solutions in a particular front (F) and the objective functions, respectively. Besides, let diand djbe the value of the CD on the solution i and j, respectively. Then, the CD is obtained using the following steps:(I)Set di=0 for i=1, 2, …, ZSort all objective functions ok; k=1,2,…,m in an ascending orderThe CD for end solutions in each front (d1 and dz) are d1=dZ→∞The crowding distance for dj; j=2, 3, …, (Z−1) aredj=dj+(fkj+1−fkj−1)To select individuals of the next generation, the crowded tournament selection operator ≻ is applied [31]. In order to do that, the following steps are required to be carried out:Step 1: choose n individuals in the population randomly.Step 2: non-dominated rank of each individual should be obtained and the CD of the solutions having equal non-dominated rank is calculated.Step 3: The solutions with the least rank are the selected ones. Moreover, if more than one individual share the least rank, the individual with the highest CD should be selected.In other words, the comparison criterion of MOVDO algorithm's solutions can be written as follows:If ρx<ρyor (ρx=ρyand dx>dy) then x≻y where ρxand ρyare the ranks and dxand ρyare the CDs. In this paper, a polynomial neighborhood structure for the selected chromosome is performed.After operating the aforementioned concepts and operators, the parents and offspring population should be combined to ensure the elitism. Since the combined population size is naturally greater than the original population size N, once more, non-domination sorting is performed. In fact, chromosomes with higher ranks are selected and added to the populations until the population size becomes N. The last front is also consisted of the population based on the crowding distance. The algorithm stops when a predetermined number of iterations (or any stopping criteria) are reached.The process is started by initializing the initial population of the solution vectors Pj. Then, the new operators are implemented on Pjto create a new population Gj. The combination of Pjand Gjcreates Rjfor keeping elitism in the algorithm. In this step, vectors of Rjare sorted in several fronts based on FNDS and CD. Using the proposed selection method, a population of the next iteration Pj+1is chosen to have a predetermined size. Fig. 3illustrates the evolution process of the proposed MOVDO, schematically.It is valuable to be mentioned that using Pareto dominance solutions is a computationally efficient algorithm implementing the idea of a selection method based on classes of dominance of all the solutions, to increase readability of the proposed MOVDO.Fig. 4illustrates the pseudo code of MOVDO algorithm based on the basic operators of a VDO algorithm and the described multi-objective operators. The main multi-objective parts are shown using different colors.Imperialist competitive algorithm is a kind of evolutionary algorithm which was proposed by Atashpaz-Gargari and Lucas [24] for the first time. This algorithm searches the solution space by using some initialized countries. The competition between imperialists and their attempts to affect their colony states is inspired as a source in ICA.Over the past years ICA is used as a meta-heuristic approach for a wide range of single objective problems. Its capability in finding a near optimal solution for different single objective, leads to use this approach for multi-objective problems. Enayatifar et al. [32] developed an EV based on ICA for a multi-objective problem, called multi-objective imperialist competitive algorithm (MOICA) and tested this algorithm on six well-known test functions.In this paper a MOICA as another meta-heuristic approach is used to solve the presented inventory model and compare the results with the other approaches.The steps of the proposed MOICA can be described as follows:(1)Initializing the empires: creating Npopcountries, selecting Nimpof the most powerful countries as imperialist and the remaining countries as colonies (Ncol) and giving N·Cncolonies to each imperialist by using Eq. (12).Power of each country is determined based on two criteria: the rank of each country which is calculated by using non-dominated sorting with regards to all objective functions, merit of each country with the same ranks. According to the mentioned criteria, the power of each country can be computed by using Eq. (11)[32]:(11)powern=1∑j=1mfj(C)/∑i=1Nrank(C)fj(i)(Rank(C)−1)×mwhere m is the number of objective functions, f(i) is the value of ith objective function and Nrank(C) is the number of countries in rank C.(12)NCn=roundpnNcolwherepn=powern∑i=1Nimppoweri.Moving of the colonies toward their imperialist: according to a random variable of uniform distribution regarding the distance between each colony and its imperialist (Eq. (13)) and considering a deviation in the movement (Eq. (14)).(13)x∼U(0,β×d)(14)θ∼U(−γ,γ)Exchanging position of imperialist and colony: computing the fitness function of each colony after moving and choosing the best member of empire (the member with the best fitness function) among the whole imperialist and moved colonies as a new imperialist.Computing the total cost of all empires: determining the total cost of each imperialist with regard to its own position and the mean of its colonies’ positions (Eq. (15)):(15)TCn=Cost(imperialistn)+ζmeancostcolonieshere ζ is a positive number less than 1 that indicates the influence of the mean of colonies’ cost on the imperialist cost.Imperialist competition: giving the weakest colony of the weakest imperialist to the strongest one with regarding to the normalized total cost (Eq. (16)):(16)NTCn=TCn−maxTCnEliminating the powerless empires: omitting the imperialist which lost all its coloniesThe flowchart of proposed MOICA is shown in Fig. 5, in which the multi-objective parts are highlighted.Particle swarm optimization (PSO) is a search method that can obtain a near optimal solution for a problem. Kennedy and Eberhart [33] introduced this technique as a biologically inspired evolutionary computation algorithm. This algorithm searches the feasible space by suing a population of solutions instead of a single point. In this technique which is based on the birds’ movement behavior patterns for finding food, a population of solution as search agents (or particles) is used to find the optimal solution in some search spaces. Each particle moves around the space based on its position and velocity direction and improves its position using particles’ own experience (cognitive information) and observation of neighbors (social information). Best response are discovered and used to guide the movements in the next iterations.PSO's ability in finding a good solution for single objective problems encourages researchers to use this technique in multi-objective problems. For the first time, Moore and Chapman [34] developed the PSO strategy for solving multi-objective problems and after them, a large number of extensions applied to PSO technique for multi-objective problems. Hence, multi-objective particle swarm optimization (MOPSO) can be referred as an extension of PSO which is used for multi-objective problems.In this paper a MOPSO for a multi-objective inventory control problem is applied. The structure of the proposed algorithm is given as follows:(1)Generation and initializing positions and velocities for particles: First of all, the PSO with a group of random particles (solutions) should be initialized. To do this, R particles (or solutions) are generated, randomly.x→ki={xk,1i,xk,2i,…,xk,di}andv→ki={vk,1i,vk,2i,…,vk,di}are defined respectively as the position and the velocity of particle i in time k, in a d-dimensional search space by using the following equations:(17)x0i=xmin+RAND(xmax−xmin)(18)v0i=xmin+RAND(xmax−xmin)where xmin and xmax are the lower and upper bounds on the design variable values and RAND is a random number between 0 and 1. A big penalty is also applied for each infeasible solution that does not satisfy the constraints, on its fitness, to keep them in a feasible space.Selection of the best position and velocity: The best solution (fitness) that has been achieved for each particle can be denoted by:(19)pBest→ki={pBestk,1i,pBestk,2i,…,pBestk,di}(20)gBest→ki={gBestk,1i,gBestk,2i,…,gBestk,di}where,pBest→kiandgBest→kiare respectively, the best position already found by particle i until time k and the best position already found by a neighbor until time k.Velocity update and position update: In this step, the new position and velocity of each particle are computed by using the following equations [35]:(21)vk+1,di=w⋅vk,di+C1⋅r1⋅(pBestk,di−xk,di)+C2⋅r2⋅(gBestk,di−xk,di)(22)xk+1,di=xk,di+vk+1,diwhere C1 and C2 are given acceleration constants towardpB→estandgB→estrespectively and ɛ1 and ɛ2 are random numbers between 0 and 1 and w is the inertia weight which can be defined as follows:(23)w=wmax−wmax−wminiter_maxiterationwhere iter_max is the maximum number of iterations and iteration is the current number of iteration and wmax and wmin are the initial and final weights, respectively. Eq. (23) presents how the inertia weight is updated. The related results of the two parameters wmax=0.9 and wmin=0.4 were investigated by Shi and Eberhart [36] and Naka et al. [35].Stopping criterion: different stopping criterion, such as achieving to a predetermined (CPU) time, a fixed average and standard deviation of the solution in several consecutive generations and etc. can be considered. The procedure is repeated until achieving the stopping criterion. Fig. 6shows the pseudo-code of MOPSO algorithm.One of the popular non-domination based evolutionary algorithm for multi-objective problem is non-dominated sorting genetic algorithm (NSGA) which was proposed by Srinivas and Deb [37]. Like the other evolutionary algorithms, this approach works with a population of solutions to find the optimum solution in the space. With regard to main criticisms of this algorithm, such as complexity of non-dominated sorting and lack of elitism, NSGA-II as a modified version of this algorithm was proposed by Deb et al. [16]. Another popular extension of evolutionary algorithms is non-dominated ranked genetic algorithm (NRGA), which is widely used for multi-objective problems. For more details about NSGA-II and NRGA, one can refer to Hajabdollahi et al. [38] and Rahmati et al. [39].In this paper both NRGA and NSGA-II algorithms which are GA based and use the evolution process of genetic algorithm are applied. The parameters of both NRGA and NSGA-II algorithms such as population size and the other required parameters are determined identically. The mutation processes for both algorithms are the same. Their crossover operator is defined based on Haupt and Haupt [40] uniform crossover operator. The difference between them is their selection strategies [41]. The proposed NSGA-II uses a binary tournament selection while a Rolette wheel selection strategy is used in NRGA. Fig. 7shows the flowchart of both NRGA and NSGA-II algorithms in which the multi-objective parts are highlighted.To evaluate the performances of the proposed Pareto-based algorithms, five standard metrics of multi-objective algorithms are applied as follows:•Diversity: measures the extension of the Pareto front [42].Mean ideal distance (MID): measures the convergence rate of Pareto fronts to a certain point (0, 0) [42].Spacing: measures the standard deviation of the distances among solutions of the Pareto front in which the smaller value, the better it is [43].Number of found solutions (NOS): counts the number of the Pareto solutions in Pareto optimal front in which the bigger value, the better it is.The computational (CPU) time of running the algorithms to get near to the optimum solutionsThe experiments are implemented on 10 test problems. Furthermore, to eliminate uncertainties of the solutions obtained, each problem is used thirty times under different random environments. Then, the averages of these runs are treated as the ultimate responses. The NSGA-II as the most applicable Pareto-based MOEAs in the literature is applied to demonstrate the capability of the proposed algorithms to solve the multi-objective optimization problems.In order to calibrate the algorithms, Taguchi method follows to minimize the effect of noise and to determine the optimal level of signal factors. To do so, the signal to noise ratio (S/N), which calculates the amount of variation of the response, is implemented. Eq. (22) formulates S/N of this type of response, where Y denotes the response and n shows the number of orthogonal arrays. For more details on the Taguchi approach, one can refer to Peace [44]; Mousavi et al. [45], and Hajipour et al. [46].(24)SN=−10×logSY2NTo conduct the Taguchi method, a new measure introduced by Rahmati et al. [39] named MOCV is applied. In order to utilize the Taguchi method, the levels of the factors are first determined in Table 1. Then, using Minitab Software, the L9 design is used for NSGA-II and NRGA. Meanwhile, the L27 design is employed for MOVDO, MOPSO, and MOICA. For each algorithm, the effect plot for S/N ratio is presented in Fig. 8. Using the above results, the proper values of the parameters are determined and are highlighted in Table 1.To evaluate the performance of the proposed Algorithms, Table 2reports the multi-objective metrics amounts on the 10 test problems. It is noticed that the MATLAB Software (Version 7.10.0.499, R2010a) [47] has been used to code the proposed meta-heuristic algorithms, and the programs have been executed on a 2GHz laptop with eight GB RAM.The algorithms are statistically compared based on the properties of their obtained solutions via the analysis of variance (ANOVA) test. These outputs are reported in Table 3in terms of the defined metrics. In order to clarify our statistical results, individual value plots are represented in Fig. 9. Moreover, the graphical comparisons of all metrics on 10 test problems are shown in Fig. 10.Based on the statistical outputs in Table 3 along with Fig. 9, proposed MOICA shows better performance in terms of NOS with statistical significant difference; while MOVDO is dominated by MOICA, MOPSO, NRGA, and NSGA-II. Moreover, they also show the comparability of novel MOVDO in comparison with MOICA, MOPSO, NRGA, and NSGA-II in terms of spacing, time, MID and diversity metrics, in which the algorithms have no significant differences and statistically work same. It required to be mentioned that this conclusions are confirmed at 95% confidence level. Graphical outputs in Fig. 10 also confirmed abovementioned conclusions. The Pareto fronts of proposed algorithms for problem No. 10 are also plotted in Fig. 11to enhance the readability of results analysis.To wrap of the results, Table 4presents the overall rankings of the four algorithms according to the four comparison metrics. As shown in this table, with regards to the NOS metric, the rankings of the algorithms are as follows: MOICA>NRGA>MOPSO>NSGA-II>MOVDO. With regards to Spacing metric, the rankings of the algorithms are as follows: MOVDO>NRGA>MOICA>MOPSO>NSGA-II. With regards to the MID metric, the rankings of the algorithms are as follows: MOPSO>NRGA>MOVDO>MOICA>NSGA-II. With regards to the Diversity metric, the rankings of the algorithms are as follows: NSGA-II>NRGA>MOPSO>MOICA>MOVDO. Finally, with regards to the Time metric, the rankings of the algorithms are as follows: MOVDO>NRGA> NSGA-II>MOPSO>MOICA. In the end, we have reported the optimized solutions obtained by the algorithms for problem numbers 1 and 2 in Appendix 1.

@&#CONCLUSIONS@&#
