@&#MAIN-TITLE@&#
An initial industrial evaluation of interactive search-based testing for embedded software

@&#HIGHLIGHTS@&#
Practical application and industrial evaluation of interactive SBST.Interaction of domain experts with SBST combines computational power with experience.Interactive SBST complements existing techniques for testing embedded software.

@&#KEYPHRASES@&#
Search-based software testing,Interactive search-based software engineering,User centered,Embedded software,Industrial experience,

@&#ABSTRACT@&#
Search-based software testing promises the ability to generate and evaluate large numbers of test cases at minimal cost. From an industrial perspective, this could enable an increase in product quality without a matching increase in the time and effort required to do so.Search-based software testing, however, is a set of quite complex techniques and approaches that do not immediately translate into a process for use with most companies.For example, even if engineers receive the proper education and training in these new approaches, it can be hard to develop a general fitness function that covers all contingencies. Furthermore, in industrial practice, the knowledge and experience of domain specialists are often key for effective testing and thus for the overall quality of the final software system. But it is not clear how such domain expertise can be utilized in a search-based system.This paper presents an interactive search-based software testing (ISBST) system designed to operate in an industrial setting and with the explicit aim of requiring only limited expertise in software testing. It uses SBST to search for test cases for an industrial software module, while also allowing domain specialists to use their experience and intuition to interactively guide the search.In addition to presenting the system, this paper reports on an evaluation of the system in a company developing a framework for embedded software controllers. A sequence of workshops provided regular feedback and validation for the design and improvement of the ISBST system. Once developed, the ISBST system was evaluated by four electrical and system engineers from the company (the ‘domain specialists’ in this context) used the system to develop test cases for a commonly used controller module. As well as evaluating the utility of the ISBST system, the study generated interaction data that were used in subsequent laboratory experimentation to validate the underlying search-based algorithm in the presence of realistic, but repeatable, interactions.The results validate the importance that automated software testing tools in general, and search-based tools, in particular, can leverage input from domain specialists while generating tests. Furthermore, the evaluation highlighted benefits of using such an approach to explore areas that the current testing practices do not cover or cover insufficiently.

@&#INTRODUCTION@&#
Software, especially embedded software, is an essential part of a variety of complex systems that are used in many domains. The companies developing such systems focus their core competencies on domain specific knowledge and experience, rather than software engineering and software testing. As a result, they often lack the expertise to perform systematic software testing and quality assurance, focusing instead on testing the product as a whole. Since the quality of the developed products depends on a series of trade-offs, software quality assurance is often not a priority concern. Developing in-house software expertise is prohibitively expensive and companies often prefer to focus their resources on improving domain specific competitive advantages.11We will use the phrase ‘domain specialists’ to describe system engineers and other specialists who use, develop and test software, even though their focus is firmly on their particular domain.It therefore becomes important to enable domain specialists to improve the quality of the software they develop, without shifting their focus away from their primary concerns. This could be achieved by developing a pre-packaged software testing toolkit that would offer the best practices in software development without the need to master the details behind the tool. This concept is sound, but developing such a package before the specifics of the application become known is a difficult task. Moreover, the functionality of the applications and the ways they are tested may change, or may differ between different testers and domain specialists involved, further emphasizing the importance of being able to use domain knowledge as an integral part of the testing process and have a flexible tool that can adapt to different scenarios and types of usage.This paper proposes a system for testing embedded software by applying a technique that largely automates the generation of test data while still enabling domain specialists to contribute their knowledge and experience, thus allowing them to focus on domain-specific concerns. The automated technique applied uses a metaheuristic optimization algorithm to generate the test data and thus is a form of search-based software testing [1,2]. The domain specialist interacts with the system to guide the optimization algorithm in the generation of test cases that are appropriate in a given context. This interaction is inspired by existing work in interactive evolutionary computation [3–7], and is designed to make it easy for the domain specialist to make their contribution, while shielding them from the implementation details of the tool itself.The contributions of this paper are as follows:•A proposal that search-based software testing may be combined with user interaction with the objective of permitting test cases to be generated efficiently by users who are not necessarily testing experts.A description of how this proposal was implemented as an interactive search-based software testing (ISBST) system during a case study in collaboration with an industrial partner.An industrial evaluation demonstrating that the ISBST system can be successfully used by domain specialists to develop test cases without requiring extensive training in its use.A laboratory experiment that validates the contribution of the underlying search-based test generation algorithm. This experiment compares the effect of the algorithm in the context of different interaction strategies that are based on data gathered during the industrial evaluation.In Section 2, we consider existing approaches to interactive evolutionary search, and discuss how our approach differs from them. Section 3 is an overview of the industrial case study, and Section 4 describes the ISBST system developed during the study. Section 5 describes an evaluation of the system by users from our industrial partner. A laboratory experiment motivated by the results of the evaluation is described in Section 6. The results of the industrial evaluation and laboratory experiment are discussed in Section 7. Threats to validity are discussed in Section 8. Section 9 concludes the paper.

@&#CONCLUSIONS@&#
In this paper we have presented an interactive search-based software testing (ISBST) system, and have evaluated its applicability in an industrial setting. The system itself is designed to interact with domain specialists, in order to fully benefit both from their experience and from the power of search-based software testing methods. Simple, intuitive interaction with domain specialists is a key factor in industrial applicability, since it makes such a system more usable and more easily accepted in an industrial setting.An industrial evaluation was conducted and showed that ISBST is a useful addition in the context of our industrial partner, and complements existing testing methods. In addition, a follow-up experiment has shown that, while test cases can be developed from a static fitness function, user interaction is essential in developing interesting and useful test cases.Overall, an ISBST system can be used by a domain specialist unfamiliar with search-based techniques to help test an embedded software module, while requiring a minimal effort in terms of training and generating test cases that complement existing approaches.Future work will, of course, include further efforts to improve the inner cycle, without diminishing its capacity for generating the diverse potential solutions. Since we envision the system being used as an exploratory tool, to investigate those areas of a vast input space that a human would not think to test, ensuring that the back end provides diverse enough candidates is essential.Clear avenues for further improvement of the ISBST system have also been identified. One example of such a potential improvement is extending the ISBST system to other modules, other companies and other contexts. The ISBST system was designed to be modular, specifically to allow easy extension to other modules within the same company and context.Adapting the ISBST system to other companies in the same domain would be more involved. Subtle differences between companies mean that existing quality objectives would have to be validated and new objectives developed to match the new context. Changes and additional validation would also be needed to ensure that the information displayed is relevant in the new context.Therefore, the improvement goal is to automate the integration of new SUTs in the same context, and to provide a clear roadmap for attempts to reuse the ISBST system in a new context, detailing. Changes of context could also be made easier by developing an editor that would allow the creation of new representations, new quality objectives, and that would synchronize the display mechanisms to the other components.