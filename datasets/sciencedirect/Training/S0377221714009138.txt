@&#MAIN-TITLE@&#
A heuristic for the OD matrix adjustment problem in a congested transport network

@&#HIGHLIGHTS@&#
An approximation of the gradient of the objective function in DAP is built.An effective descent scheme to numerically solve DAP is presented.An actualization scheme for the penalization parameters improves the approximation.

@&#KEYPHRASES@&#
Traffic assignment,Origin–destination matrix adjustment,Numerical solution,

@&#ABSTRACT@&#
We study the Demand Adjustment Problem (DAP) associated to the urban traffic planning. The framework for the formulation of the DAP is mathematical programming with equilibrium constraints. In particular, if we consider the optimization problem equivalent to the equilibrium problem, the DAP becomes a bilevel optimization problem. In this work we present a descent scheme based on the approximation of the gradient of the objective function of DAP.

@&#INTRODUCTION@&#
The urban traffic planning process consists in a sequence of many steps, among them, it is the stage of collecting the relevant data. To make any decisions as regards the transport system, it is necessary to know the pattern of trips over the network, that is to say, the number of trips originating and terminating for each origin–destination pair. These quantities are stored in what we know as the origin–destination matrix (OD-matrix). Obtaining this information may be expensive if we make it through surveys or other similar methods of data gathering. However, if we have some information available, as observed link volumes and/or an outdated OD-matrix it is possible to design an optimization problem whose solution solves the Demand Adjustment problem (DAP).The DAP model may vary depending on the characteristics of the transport system we are considering. Firstly, we must choose between a congested or uncongested network and the traffic assignment procedure that rules the users (all-or-nothing assignment, deterministic user equilibrium, stochastic user assignment, etc.). Secondly, the information available to estimate the demand may conduce to different objective functions, as well as the statistical method chosen. Usually, maximum likelihood procedures and generalized least squares are used, see Chen and Florian (1996) and Peterson (2007).The main difficulties within the DAP are its bad mathematical properties, such as non-convexity and non-differentiability; the huge dimensions of real size problems and the fact that the point-set mapping which gives the equilibrium flows is no explicitly known.The differences between the approaches for the OD-estimation problem depend mainly on the nature of the assignment proportions (congested or uncongested network) and the decision to make an approximation of the gradient of the objective function or an approximation of the point-set mapping that defines the equilibrium flows. Van Zuylen (1978),Van Zuylen and Willumsen (1980),Carey, Hendrickson, and Krishnaswami (1981),Willumsen (1981),Bell (1983),Cascetta (1984),McNeil and Hendrickson (1985),Spiess (1987),Brenninger-Göthe, Jornsten, and Lundgren (1989),Bierlaire and Toint (1995),Bianco, Confessore, and Reverberi (2001) and Bierlaire (2002) all have designed methods for uncongested networks. Nguyen (1977) was the first to model the congested version of DAP. Spiess (1990),Chen and Florian (1996),Yang, Sasaki, Iida, and Asakura (1992),Codina and Barceló (2004),Codina and Montero (2006) and Lundgren and Peterson (2008) constitute examples in which different approximations of the gradient of the objective function are obtained. Recently, García-Ródenas and Verastegui-Rayo (2008) have designed a column generation algorithm to solve DAP. They proved interesting theoretical results of convergence but the implementable version is still a heuristic.The purpose of this work is to present a descent scheme for the problem DAP in the case of a congested network, based on the approximation of the gradient of the objective function that improves the results in Codina and Barceló (2004) and Lundgren and Peterson (2008). The algorithmic approaches presented in those works by Codina and Barceló, and Lundgren and Peterson respectively, are studied and compared to the proposed one. Rademacher’s theorem that assures that a Lipschitz continuous function is differentiable almost everywhere, motivates building an approximation of the gradient with the proximal point problem of C-B with the advantage of making it possible to decrease the total number of Traffic Assignments to be calculated. For the approximation of the gradient proposed in L-P,|C|(total of OD-pairs) quadratic problems must be solved, while the proposed approximation requires a Traffic Assignment only.As an optimization problem, the DAP belongs to the category of MPEC’s (Mathematical programs with equilibrium constraints). In this case, the equilibrium constraint corresponds to the deterministic version of Wardrop’s user equilibrium (DUE) parameterized in the demand variable. The demand is the variable of the upper level, where we have the problem of adjusting the OD-matrix that combines the information of previous estimations and observed flows. The mathematical formulation of DAP in the link flow space is:(DAP)minF(v,g)=η1F1(v)+η2F2(g)s.a.c(v)t(v′−v)≥0,∀(v′,g)∈Ω,where Ω is the closed convex cone that consists in the pairs (v, g), g ≥ 0 and v is a feasible flow for g, i.e. a non-negative flow that satisfies the demand.The function F1 measures the deviation between the assigned flow for the demand g and the observed flow in some links of the network(A¯⊂A). The function F2 measures the distance between g and the outdated OD-matrixg˜. The usually used metrics are those of minimum squares, maximum entropy and maximum likelihood (see Chen and Florian, 1996). The parameters η1 and η2 reflect the confidence of the datag˜andv˜respectively. Finally, v is the link flow vector and c(v) is the link cost vector.In a general version of DAP, for which continuity hypotheses of the functions F1, F2 and c(v) are only necessary, it is proved in Chen and Florian (1996) that the problem admits at least one solution. In this work we consider the case, where the mapping g↦v*(g), that assigns the equilibrium flows to a given demand g, is single valued (i.e. the DUE admits an only one solution) and we write F(g) = F(v*(g)). Then it is necessary to make some assumptions over the traffic network:•the network is strongly connected, i.e. there exists at least one route for each OD pair;the route cost functions are additive, i.e. they are the sum of the link costs that constitute the route;the link costs are separable, i.e. the flow in each link is independent of the flow of all other links in the network;the demand gpqis positive for each(p,q)∈C;the link cost functionca:R↦Ris positive, continuous and non-decreasing for eacha∈A.These hypotheses guarantee the existence of equilibrium (both in the link and route flow variables) and uniqueness of OD-equilibrium times. If we also assume that each link cost function cais strictly increasing, we have uniqueness of the equilibrium link flow solution.Even though being under these hypotheses, the problem may present difficulties in very simple frameworks as it is shown in Figs. 1and 2. For a very simple network with only two demands the objective function of DAP is well behaved but the equilibrium function for the arc’s flow is clearly non-differentiable, see Fig. 2Although its bad mathematical properties, it can be proved that under a strong monotonicity assumption of the link costs, the objective function of DAP is Lipschitz continuous and therefore differentiable almost everywhere, as Rademacher’s theorem states. We present the result in the following lemma:Lemma 1Suppose the link cost function c(v) satisfies(1)(c(v)−c(v′))t(v−v′)≥α∥v−v′∥2(strongmonotonicitycondition)∀v,v′∈co¯(Ω(g)∪Ω(g′)),where Ω(g) and Ω(g′) are the feasible link flow spaces for the demands g and g′, respectively and co( · ) is the convex hull of a set. Then,F(g)=η1F1(v*(g))+η2F2(g)is Lipschitz continuous in g.|F(g1)−F(g2)|=|η1(F1(v*(g1))−F1(v*(g2)))+η2(F2(g1)−F2(g2))|≤(*)η1L1∥v*(g1)−v*(g2)∥+η2L2∥g1−g2∥≤(**)η1L1Lv*∥g1−g2∥+η2L2∥g1−g2∥=(η1L1Lv*+η2L2)∥g1−g2∥(*)F1 and F2 are differentiable functions in general.Under condition (1)v*(g) is Lipschitz continuous (Dafermos and Nagurney, 1984).ThereforeF(g):R++|C|→Ris Lipschitz continuous in g.□(R++is the notation used in Patriksson (1994) to represent the set of positive real numbers).Having proved this result we invoke Rademacher’s theorem that states: If U is an open subset inRnandF:U→Ris Lipschitz continuous in U, then Fis differentiable almost everywhere in U. Then, under an optimistic point of view, we will be in a point of differentiability of the function F(g), most of the times. Consequently, we propose an approximation of the gradient and a descent scheme with a search direction that is opposite to the approximated gradient. Even though we assume the gradient exits, it is not possible to calculate it, in general. In fact,∇gF(g)=η1∇vF1(v*(g))Jv*(g)+η2∇gF2(g)whereJv*(g)=(∂va*∂gi)a∈A,i∈Chas no explicit expression as it is the case of the relation v*(g).The approximation of the gradient that we choose is inspired in the work of Codina and Barceló (2004). In fact they present a minimization problem(2)ming≥0F(g)+ρ2∥g−g˘∥2whose solution g* allows to build the approximationg(ρ)=−ρ(g*−g˘),for which they prove in Codina and Barceló (2004) the following theorem.When F is a Lipschitz continuous function, as it is the case, the generalized gradient of Clarke is a well defined, non-empty, but difficult to calculate set. However, there exits the following useful characterization, proved in Clarke (1983).(3)∂F(x)=co{lim∇F(xi):xi→x,xi∉S,xi∉ΩF}where S is any set of measure 0 and ΩFis the set of points where F fails to be differentiable. Thanks to Rademacher’s theorem, the set S can be chosen to be the same set ΩFwhich is of measure zero.Theorem 2Let G*(ρ) denote the solution set of problem (2), being ρ > 0 and ∂F(g) is the generalized gradient of Clarke in g. If g* ∈ G*(ρ), then1.−ρ(g*−g˘)∈∂F(g*).Let (ρk) be an increasing sequence with ρk→ +∞. For any ɛ > 0, ∃k0 so that ∀ k ≥ k0, ifgk*∈G*(ρk)there holds thatd(−ρ(gk*−g˘),∂F(g˘))≤ɛ. Whered(−ρ(gk*−g˘),∂F(g˘))=Min{∥ρ(gk*−g˘)−r∥2:r∈∂F(g˘)},see Codina and Barceló (2004).Wheng˘is a point of differentiability of F, the set ∂F(g) is a singletone (a set with only one element) and verifies ∂F(g) = ∇F(g). Then,g(ρ)=−ρ(g*−g˘)could be used as an approximation of∇F(g˘)for an appropriate ρ > 0.The problem (2) is as difficult to solve as it is the case of the original problem DAP. Codina and Barceló suggest to reformulate (2) as the following problem:(4)Min(v,g)ψ(v,g)=F(v,g)+ρ2∥g−g˘∥22s.a.T(v)−V(g)=0(v,g)∈Ω.whereT(v)=∑a∈A∫0vaca(s)dsis the objective function of the optimization problem equivalent to the DUE and V(g) = T(v*(g)).For this problem it is possible to apply the penalization method as it is presented in Bazaraa, Sherali, and Shetty (1993) (see Theorem 9.2.2) with the identity function as the penalty function. Then, being Ω a nonempty subset ofR|A|+|C|,and the only one equality constraint such that T(v) − V(g) ≥ 0 in Ω, the cited theorem states that we can find a solution to (2) solving the following problem(5)Min(v,g)ψ(v,g)=T(v)−V(g)+zF(v,g)+zρ2∥g−g˘∥22s.a.(v,g)∈Ω.and making z → 0+, ρ → ∞.We concentrate now in solving problem (5). If we put together the terms with the same variables v or g, we can rewrite the function ψ as follows:ψ(v,g)=T(v)+zη1F1(v)−V(g)+zη2F2(g)+zρ2∥g−g˘∥2.This problem presents still, another difficulty, the implicit definition of V(g). We could think of replacing the undesired term, by its linearization, as the partial linearization algorithm of Patriksson does (Patriksson, 1993). In this way and based on the properties of the solutions to problem (5) proved in Codina and Barceló (2004), we make a linearization of V(g) aroundg˘and move to solve the partially linearized problem(6)Min(v,g)ψ(v,g)=T(v)−gπg˘t+zF(v,g)+zρ2∥g−g˘∥22s.a.(v,g)∈Ω.In fact,V(g)≈V(g˘)+∇V(g˘)(g−g˘)t=V(g˘)+πg˘(g−g˘)tbut we discard the constants for the minimization process.Following the work done in Appendix A, problem (6) can be re-written as the Elastic Traffic Assignment problem (EDTA):(7)Min(v,g)ψ(v,g)=∑a∈A∫0vasa(x)dx−∑(p,q)∈C∫0gpqwpq−1(x)dxs.a.(v,g)∈Ω.for appropriate functions saandwpq−1.We have chosen Gartner’s transformation to solve the EDTA. The main motivation to make this choice is the will to profit from the good performance of the algorithms that solve fixed demand traffic assignments problems and that are already implemented in the toolbox CiudadSim (Lotito, Mancinelli, Quadrat, and Wynter, 2003) for Scilab. The transformation of Gartner consists in finding the solution of the Elastic Demand Traffic Assignment Problem by network representation. A series of modifications are made to the original network, the addition of virtual links, and a fixed-demand DUE problem is then solved over the augmented network (see Sheffi, 1985). For computing this and all the equilibrium assignments we use the Disaggregated Simplicial Decomposition (DSD) algorithm which is implemented following the issues in Lotito (2006).We propose a gradient-based descent scheme to solve the problem. The idea is to construct, at each iteration, the presented approximation of the gradient at the current point and to obtain a descent direction with an appropriate choice of the parameters z and ρ. A line search that preserves feasibility is performed and the process is repeated until a stopping criterion is satisfied.A similar approach can be found in Codina, García, and Marín (2006). However, we differentiate in the way we choose to solve the EDTA and by the inclusion of an actualization routine for the parameters z and ρ. No specific criterion could be established yet to set those parameters. Consequently, the subroutine (2c) was designed and included in order to overcome any inconveniences within the accuracy of the approximation of the gradient.The scheme of the proposed heuristic can be outlined as follows:•Initialization. g(0), an initial value for the demand and r(0) ∈ ∂F(g(0)).M constant, upper bound for the demand.ɛ > 0, lower bound for the step size.0 < q < 1 constant, for the improvement of F.Set k ≔ 1.Iteration k.1.Search direction dk − 1. Set dk − 1 ≔ −rk − 1.Line search. Calculate a maximum step size αmax such that gk≔ gk − 1 + αmaxdk − 1 ≥ 0 and ||gk||∞ ≤ M,(a)if F(gk) ≤ q · F(gk − 1) then go to Step 4,while F(gk) ≥ q · F(gk − 1) and α > ɛα ≔ α/2,gk≔ gk − 1 + αdk − 1,if F(gk) ≥ q · F(gk − 1) and α ≤ ɛz ≔ z/2,ρ ≔ ρ · 10,calculaterk−1′∈∂F(gk−1).rk−1:=rk−1′. Go back to Step 1.Stopping criteria. If satisfied, STOP. Otherwise, go to Step 4.Update.gk≔ gk − 1 + αdk − 1.rk∈ ∂F(gk).k ≔ k + 1.End of iteration k.The details of the implementation are described in the next subsections.As it has been stated, the approximation of the gradient is made under the assumption ∂F(gk) = {∇F(gk)}. Then, at each iteration k, the subproblem (5) is solved forg˘=gk. In fact, the equivalent EDTA is solved using Gartner’s transformation (see Sheffi, 1985).The line search is initiated with the maximum step size that preserves feasibility, i.e., the largest step length that leads to positive demands for the chosen direction, dk. For each value of α the objective function F is evaluated. If the value of F has descended considerably with respect to the previous iteration the line search stops and the algorithm continues. Otherwise we make α ≔ α/2 and evaluate F for the new value of α. The process is repeated until F descends considerably or the step length α has become too small. In the last case, we assume the approximation for the gradient is not sufficiently accurate and proceed to improve the approximation dk= ρ(g* − gk).These parameters are present in each subproblem (5) and must verify z → 0+ and ρ → ∞ respectively.With the reformulation of problem (5) as an EDTA problem, these parameters are involved in the definition of the travel costs functions of the associated transport network. Consequently, they affect the solution to the EDTA g*, used in the definition of the search direction dk. In fact, if we consider the augmented network that results from the original, once Gartner’s transformation has been chosen as the solution method for the EDTA, the link cost functions are safor the original links, wheresa(va)={ca(va)+zη1(va−v¯a)ifa∈A˜ca(va)inothercase,and for the new links, as a result of Gartner’s transformation,wpq−1(vpq),wherewpq−1(vpq)=πpq(vpq)−z(ρ(vpq)(vpq−g˘pq)+η2(vpq−g˜pq)).As regards the transformed network, the complete link flow vector v consists in the flow in the original linksva,a∈Aand the excess demand flow in the new linksvpq,(p,q)∈C.Initial values for those parameters depend on each problem. The proposed routine is designed with an actualization Step 2(c) that allows to improve the approximation of the gradient.We have studied other two schemes for the DAP, in detail. The gradient based scheme of Lundgren and Peterson (2008) and the modified Wolfe method of Codina and Barceló (2004).The first one has a scheme similar to the WML heuristic with an approximation of the gradient constructed in a different way. In fact, an approximation for the JacobianJv(g)=(∂va(g)∂gi)a∈A,i∈Cis built. Each column of the Jacobian is the solution to a quadratic problem. There is one quadratic problem for each OD pair.Following the presented scheme, for the heuristic of Lundgren and Peterson, we have:1.Search direction dk − 1. Calculate rk − 1 = η2∇gF2(g) + η1Jv(g)∇vF1(v(g)) approximation of the gradient, wherefor i = 1 to|C|∂va(g)∂gi=wi,wiis the solution of a quadratic problem, see Lundgren and Peterson (2008).dk − 1 = −rk − 1.Line search. Calculate a maximum step size αmax such that gk≔ gk − 1 + αmaxdk − 1 ≥ 0 and gk≤ M,(a)if F(gk) ≤ q · F(gk − 1) then move to Step 4.while F(gk) ≥ q · F(gk − 1) and α > ɛα ≔ α/2,gk≔ gk − 1 + αdk − 1,an increment of the objective value function may be admitted.Update.gk≔ gk − 1 + αdk − 1.k ≔ k + 1.Search direction dk. Calculate dk= −r*, r* the unique solution to the problem Min{||u||2, u ∈ co(G(k))}.If ||dk||2 < ɛ then(a)if ak≤ δ STOP. gk≈ g*,if ak> δ then gk + 1 ≔ gk; ak= 0; Gk= {rk}. Restart.If ||dk||2 ≥ ɛ then go to Step 2.Line search. Same as L-P.Update. Same as WML heuristic plus the update of Gk + 1 and ak + 1.The search direction stage in each heuristic reflects the main differences between them. For both the WML and L-P heuristics an approximation of the gradient is calculated but with different techniques. If no updating stage of the parameters z and ρ is necessary, only one DUE will be enough to builddkWML. However, for the directiondkL-Pthere will be, invariably,|C|quadratic problems to be solved.As regards buildingdkC-B,information on previous iterations is needed and no advantage is taken in the case the sequence of approximations has arrived to a point of differentiability. This may involve unnecessary calculations of ri∈ ∂F(gi) to build the subgradient∂F(g˘)and consequently, unnecessary calculations of DUEs.Each calculation of an element r ∈ ∂F(g), present in heuristics WML and C-B, requires solving at least, one DUE, and the quantity of these depends on how we choose to solve (5). In both cases, problem (5) is partially linearized and shown to be equivalent to an EDTA problem. However, while for the algorithmic approach proposed in this work, the equivalent EDTA is solved through Gartner’s transformation, Codina and Barceló choose an iterative procedure (algorithm of Leblanc and Farhangian) for this purpose although being aware of its poor convergence rate. What is more, the last one requires to solve one DUE in each iteration which is an undesirable characteristic in general.Numerical results for different experiments are presented. We have considered two DAPs characterized by the use or non-use of target matrix and observed flows only in subsets of the total link set of each network.The WML heuristic has been coded using Scicoslab 4.3 program which has the toolbox CiudadSim already implemented.Firstly, the topology of each network and link costs functions are described in Table 1.Secondly, the experiments are described in Table 2.For the experiments that were possible, we plotted the graphics of the objective functions and observed that the model with a target origin–destination matrix, in general, produces more regular objective function than the model without reference matrix. This is shown in Figs. 3 and 4for Steenbrink’s example, and in Figs. 6 and 7for Codina’s example.For experiments 1 and 2 the difference in regularity that we mentioned above may explain the differences in the speed of convergence of WML heuristic in each case (see Tables 3 and 4).Six test problems have been chosen to test the performance of the WML heuristic. The stopping criterion, in each case, has been the evolution of the objective function values under a tolerance, that is to say, the WML heuristic stops when no further improvement of the objective function can be obtained.For experiments 1 and 5, the optimum values attained were compared to the minimums found in the grids we used to plot the objective functions and they proved to be very close, what is more, the first ones improved the last ones (see Tables 3 and 7).In the case of experiments 2 and 6 we chose, as observed flows, vectors associated to known origin–destination matrices in order to make it possible to check if the WML heuristic converged to the matrix that produced the optimum of value zero. Both experiments produced the desired results (see Tables 4 and 8).For experiments 3 and 4, we have no reference optimum values to compare with, except for the case of the Nguyen Dupuis network (Fig. 5) that we could observe similar values in the work of Lundgren and Peterson (2008). Due to the complexity of both test problems we may just say that the optimum values found are local optimum values (see Tables 5and 6).An implementation of Codina-Barceló’s modified Wolfe was made. Each TAP involved was solved via DSD algorithm as it was made in WML heuristic, in order to make it reasonable to compare them. In the paper of reference Codina and Barceló (2004) there are no many details for the numerical experiments carried out. Consequently, values for the parameters z, ρ and g0 (initial estimation for the demand) were copied from the numerical experiments above presented. As regards the parameters ɛ, δ and N exclusive of C-B approach, different combinations were tested.No information for the order of precision the assignments should be solved is available. For the numerical comparisons, the order already used for WML’s numerical tests was chosen.The comparisons made contemplate performance of C-B heuristic for different combinations of parameters z and ρ. Wolfe C-B (1) same initial values of WML. Wolfe C-B (2) new initial values, see Fig. 8. In both cases, WML scheme provided, in a reasonable number of iterations, better approximation of the demand than C-B method.Some numerical tests over medium-large scale networks have been made for WML heuristic.Large scale networks may present many local minimums for the problem of adjusting the origin–destination matrix making it difficult for the heuristic to arrive to a global solution. What is more, the fact that no easily checkable optimality conditions for the general case are available, makes it difficult to make sure that successive iterations have actually arrived to a local optimum. However, the scheme reached an adjusted matrix in most of the cases and we worked on a simple test to check if such approximation could be a local solution. Throughout the numerical experiments we could observe that the WML heuristic when applied to large size networks, at a certain point started to produce directions of search that were parallel. This could be due to the fact that, at that point, the actualization of the parameters produced no numerical difference, as a consequence of being z and ρ too small and too big, respectively.The simple test we mentioned can be described as follows: When we arrived at a point that the WML heuristic produced no improvement from iteration to iteration, the procedure stopped and we increased the precision of the DSD algorithm. We re-started the WML heuristic from the last approximation produced and checked that even when different directions of search were produced (consequence of major precision of the assignment algorithm), the WML scheme continued to oscillate in the neighborhood of the point that was being checked, giving us the idea that it was a local solution.Numerical results can be seen in Table 9and Fig. 9, both showing the evolution of the objective function of the DAP.Chicago’s net has 2176 links, 546 nodes and 10 022 demands. For the observations, 10 links were randomly chosen and the observed flows were constructed as perturbations of equilibrium flows for an outdated OD matrix. The numerical experiments were carried out for an objective function without target matrix, i.e.,F(v,g)=∥v−v¯a∥2. Each traffic assignment was solved within 10.06 seconds with the DSD algorithm implemented in CiudadSim, Scilab’s Toolbox. The WML heuristic has been implemented in ScicosLab-4.3 and the calculations for the test have been carried out with an Intel(R) Core(TM)i3-2350M CPU @ 2.30 gigahertz processor with 4.00 gigabytes RAM memory. The CPU time needed for the 70 iterations carried out was 21 987.951 seconds, 6 hours 6 minutes approximately.

@&#CONCLUSIONS@&#
In this paper a descent scheme for Demand Adjustment Problem was presented. An approximation of the gradient was proposed by solving a proximal point problem, an approach for which there exist results of consistency for the approximation. The proximal point problem was solved approximately as an EDTA by means of Gartner’s transformation. At this point, great advantage was taken by the utilization of the already existing solvers for Traffic Assignment Problems available in CiudadSim (Scilab Toolbox) (Lotito et al., 2003). The main idea of the heuristic relies on the result proved in Lemma 1 and the Rademacher’s theorem.The scheme proved to have a good performance in small scale and some medium scale networks. For large scale problems, as Chicago’s network, the heuristic results computationally expensive due to the size of the variables involved. However some adjusted matrices can be reached and local exploration may help to accept them as local solutions.