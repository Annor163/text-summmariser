@&#MAIN-TITLE@&#
Integrated particle swarm optimization algorithm based obstacle avoidance control design for home service robot

@&#HIGHLIGHTS@&#
A new adaptive PSO method is proposed and verified by simulations and a real robot.Our proposed method has been successful applied to three-dimensional obstacle avoidance with manipulator for the home service robot.Both the free-space and obstacle avoidance states are established for evaluations in computer simulations and real-time experiments. Our PSO-IAC algorithm has achieved outstanding performance compared to other methods in these experiments.

@&#KEYPHRASES@&#
Adaptive inertia weight,Constriction factor,Home service robot,Manipulator,Obstacle avoidance,Particle swarm optimization,

@&#ABSTRACT@&#
This paper presents a new particle swarm optimization (PSO) algorithm, called the PSO-IAC algorithm, to resolve the goal of reaching with the obstacle avoidance problem for a 6-DOF manipulator of the home service robot. The proposed PSO-IAC algorithm integrates the improved adaptive inertia weight and the constriction factor with the standard PSO. Both the free-space and obstacle avoidance states are established for evaluations in computer simulations and real-time experiments. The performance comparisons of the PSO-IAC algorithm with respect to the existing inertia weighted PSO (PSO-W), constriction factor based PSO (PSO-C), constriction factor and inertia weighted PSO (PSO-CW), and adaptive inertia weighted PSO (PSO-A) algorithms are examined. Simulation results indicate that the PSO-IAC algorithm provides the fastest convergence capability. Finally, the proposed control scheme can make the manipulator of the home service robot arrive at the goal position with and without obstacles in all real-time experiments.

@&#INTRODUCTION@&#
Robot arms are quite important executive tools for home service robots in carrying out their services at home. A robot arm must be able to reach the target position precisely. In order to arrive at the goal point, the rotations of the end effector and each link are calculated by inverse kinematics [1]. Ref. [2] proposed a biomimetic approach to figure out inverse kinematics such that the end-effector of an anthropomorphic robot arm can be correctly located. Nearchou [3] introduced a modified genetic algorithm for solving the inverse kinematics problem. A recurrent neural network [4] was applied to solve the kinematic control problem of collaborative redundant manipulators.Essentially, inverse kinematics are used to determine the rotating angle of each joint without considering collision with obstacles. Being collision free becomes an important issue for robotic arms in planning the trajectory movements. A concept of neural networks based on Q-learning [5] was carried out to address the problem of obstacle avoidance with a robot arm. Ref. [6] presents a dual neural network approach to deal with the collision-free inverse kinematics problem. Application of the adaptive fuzzy algorithm to solve inverse kinematics and obstacle avoidance problems with redundant manipulators was examined in [7]. A flexible fuzzy logic control [8] was proposed to overcome the collision avoidance problems with manipulator robots in complex environments.Chyan and Ponnambalam [9] used hybrid Particle Swarm Optimization (PSO) to conquer the static obstacle avoidance problem of the 5-DOF robot manipulator in a 2-D environment. Over the last decade, many studies have proposed different types of PSO algorithms to overcome various engineering problems such as a new constraint-handling mechanism concept [10] applied to constrained particle swarm optimization to solve engineering problems. A PSO-based optimal tuning strategy was proposed by Nery et al. [11], which utilizes a basic PSO concept to solve complex constrained mixed-integer nonlinear optimization problems, and was applied to constrained multivariable predictive controller (MPC) algorithms with model uncertainty. A PSO method [12] apply to solve optimization problem about defense against SYN flooding attacks. Advanced Particle Swarm Optimization (APSO) and Fully Informed Particle Swarm Optimization (FIPS) algorithms [13] were proposed to improve optimization of the tool path planning in 5-axis flank milling, which successfully resulted in fewer machining errors. Ref. [14] proposed utilize PSO method apply to efficient spatial domain based on image hiding scheme. Vasumathi and Moorthi [15] suggested a hybrid adaptive Neural Network–Particle Swarm Optimization (ANN–PSO) algorithm for the harmonic estimation problem and some other PSOs [16,17] to handle global optimization problems. This paper presents a novel PSO method applied to resolve the obstacle avoidance and angle planning problems of a 6-DOF robotic arm for the home service robot in 3-D spatial circumstances. The PSO algorithm is a population-based optimization search algorithm that was first introduced by [18] in 1995. The advantages of PSO include rapid convergence speed, lower parameter setting, and dynamic environment capability. The concept of PSO is to simulate bird flocking behavior, assuming there is some food in an area, but such food is unknown to the birds. However, the birds can get information about the distance from the food, and then they can find food close by. These birds are assumed to be the particles in the PSO algorithm; each particle represents a solution, and the quality of the solution is determined by the corresponding fitness value. The particle with the highest fitness value is a leader in the group. The leader will release its position message to other particles in the group. The velocity and position updating rules of each particle are described in [18],(1)Vi(t+1)=Vi(t)+c1·rand1·(pbesti−Xi(t))+c2·rand2·(gbesti−Xi(t))(2)Xi(t+1)=Xi(t)+Vi(t+1)where Vi(t) is the current velocity of particle i at iterationt,c1and c2 are two positive constants called acceleration coefficients, rand1 and rand2 are two independent random numbers distributed in the range of [0,1], Xi(t) is the current position of particle i at iterationt,pbestiis the best previous position of particle i at iteration t, and gbestiis the best previous position among all the particles at iteration t.The major contributions of this paper are as follows: (1) a new artificial algorithm is presented to resolve the goal reaching with obstacle avoidance problem for a 6-DOF manipulator of the home service robot; (2) the proposed PSO-IAC algorithm applies the integration of the constriction factor and improved adaptive inertia weight to the standard PSO to increase the obstacle avoidance control system convergence velocity; (3) the practical effectiveness of an obstacle avoidance control scheme is demonstrated by experiments of the free-space and obstacle avoidance states for the home service robot.The rest of this paper is organized as follows. Section 2 introduces the hardware configuration of the 6-DOF robotic arm of the home service robot and the forward kinematic analysis. Section 3 examines the various PSOs, for example, inertia weighted PSO (PSO-W), constriction factor based PSO (PSO-C), constriction factor and inertia weighted PSO (PSO-CW), and adaptive inertia weighted PSO (PSO-A), and presents a novel PSO algorithm, the PSO-IAC. In Section 4, computer simulations and real-time experiments are utilized to demonstrate the performance of the proposed PSO-IAC in comparison with PSO-W, PSO-C, PSO-CW, and PSO-A. Finally, Section 5 draws some conclusions.This section introduces the hardware mechanism of robots and gives the calculation of the kinematics based on the Denavit–Hartenberg (D–H) parameters [19] obtained from the relevant hardware parameters. The home service robot used in this study is called May and was implemented in the aiRobots laboratory. She is shown in Fig. 1. This subsection focuses on the hardware configuration of her arms. First, the materials in May’s skeleton are aluminum alloy (Al) and magnesium (Mg). All servo motors used for the mobile chassis, robotic neck, arms, and fingers were made by the ROBOTIS company, including RX-28, RX-64, and EX-106+. The mechanism of the 6-DOF robotic arm is shown in Fig. 2, with 2-DOF on the shoulder, 2-DOF on the elbow, and 2-DOF on the wrist. In order to provide a large enough torque on the shoulder joint, each DOF of the shoulder has in fact two EX-106+ motors.The coordinate system for 6-DOF robotic arm of the home service robot is established by using D–H convention. Fig. 3depicts the coordinate system of the right 6-DOF robotic arm. With this coordinate system, four parameters of each joint, known as D–H parameters, are defined in Table 1. The range of EX-106+ motor is 250° and that of RX-64 is 300°. Fig. 4 illustrates the range and actual values (diand ai) of the right 6-DOF robotic arm.The above-mentioned information reveals that the position of the end-effector can be calculated via the forward kinematic method. According to the D–H convention, the coordinate transformation matrices for each link are obtained as follows.(3a)0A1=[c10s10s10−c1001000001],1A2=[c20−s2a2c2s20c2a2s20−10−d20001],2A3=[c30s30s30−c3001000001],(3b)3A4=[c40−s40s40c400−10d40001],4A5=[c50s50s50−c5001000001],5A6=[c6−s600s6c600001d60001]To calculatethe position of the end-effector opposite the world coordinate system, it is necessary to find the coordinate transformation matrix 0T6 between the world coordinate system (x0, y0, z0) and the end-effector coordinate system (x6, y6, z6) as below.(4)0T6=0A11A22A33A45A6=[noap0001]=[nxoxaxpxnyoyaypynzozazpz0001]where the orientation matrix [n o a] represents the posture matrix of the end-effector, and the vectors n, o, and a, are normal vectors. Furthermore, the vector p is the end-effector’s position from the origin of the world coordinate. With the coordinate transformation matrix, one can obtain the result of the end-effector’s position and posture by giving six servo motors’ angles (i.e.,θ1,θ2,⋯,θ6) of the robotic arm. In this paper, we will adopt the PSO algorithms described in the following section to generate the corresponding motors’ rotation angles such that the manipulator can arrive at the desired position.This section will first introduce four different PSO algorithms: PSO-W, PSO-C, PSO-CW, and PSO-A. Then a new PSO algorithm called PSO-IAC is investigated by fusing the constriction factor and improving the adaptive inertia weight.Shi and Eberhart [20] proposed the inertia weight method based on the standard PSO algorithm in 1998. The linear decreasing inertia weight (w) in PSO-W was used to change the exploitation and exploration degree to increase the speed of the system convergence [21],(5)Vi(t+1)=w·Vi(t)+c1·rand1·(pbesti−Xi(t))+c2·rand2·(gbesti−Xi(t))(6)w(iter)=itermax−iter/itermax×(wmax−wmin)+wminwhere the changes in the value of w are usually set fromwmax=0.9towmin=0.4. Initially, the higher setting value of w in the PSO algorithm will enhance the exploration of the particles into a wide scope, whereas the lower value of w, due to the linear decrement, will cause a higher exploitation of the particles to the local area.The PSO-C algorithm is introduced in [22], where the concept of the constriction factor is integrated into a standard PSO. Ref. [23] made a modification and brought in(7)Vi(t+1)=χ*[Vi(t)+c1·rand1·(pbesti−Xi(t))+c2·rand2·(gbesti−Xi(t))]where χ is the constriction factor defined as(8)χ=2/|2−φ−φ(φ−4)|whereφ=c1+c2,φ>4, the value of accelerated factor will affect the setting of the constriction factor.Ref. [24] combined with the constriction factor and the linear decreasing inertia weight to give the PSO-CW algorithm and the velocity of (7), which therefore becomes(9)Vi(t+1)=χ*[w*Vi(t)+c1·rand1·(pbesti−Xi(t))+c2·rand2·(gbesti−Xi(t))]where the configuration method for w is the same as in (6) and the inertia weight will linearly decrease as the number of iterations increases. The configuration method for χ is also the same as that in (8).The main function of the inertia weight in the PSO algorithm is to regulate the proportion of particle swarm exploitation and exploration in the evolutionary process. An adaptive inertia weight approach (PSO-A) was submitted to solve the optimization problem in [25]. The concept of PSO-A is to adopt the proportion of the successful revolution to determine the inertia weight value of the next revolution. The success of particle i at iteration t in a minimization problem is described by(10)S(i,t)={1iffit(pbestit)<fit(pbestit−1)0iffit(pbestit)=fit(pbestit−1)where the conditionfit(pbestit)<fit(pbestit−1)is suitable for the minimization problem according to the design of fitness function. For the maximization problem,(11)S(i,t)={1iffit(pbestit)>fit(pbestit−1)0iffit(pbestit)=fit(pbestit−1)The definition of fitness function will be described in detail in Section 3.4. The success percentage of the swarm is defined as(12)Ps(t)=∑i=1nS(i,t)nwhere n is the number of particles. The possible range of inertia weights is(13)wa(t)=(wmax−wmin)Ps(t)+wminwhere the range of the inertia weight([wmin,wmax])is selected to be[0,1].The obstacle avoidance problem of the 6-DOF robotic arm is a highly complex problem, which not only needs to take into account the coordination transition issues in 3-D space but also needs to determine whether the planned link angles of the joints will cause the arm to collide with obstacles. This paper proposes three kinds of improved PSO. The first one is the improved adaptive inertia weight PSO, called PSO-IA. The inertia weight is corrected by(14){wia(0)=1wia(t)=(wmax−wmin)Ps(t)−QiawhereQia=wia(t−1)(Ps(t)−Ps(t−1)). The improved adaptive inertia weight wia(t) is adjusted by Qia. Different from the constantwmin, the value Qiawill be changed in each iteration, and then it will be more capable of fitting the situation of the system and searching for more suitable inertia weight. The pseudo code of the PSO algorithm with improved adaptive inertia weight is shown in Fig. 5.The second PSO algorithm presented in this paper is called PSO-AC, which combines the constriction factor and the adaptive inertia weight to resolve the optimization problem,(15)Vi(t+1)=χ*[wa(t)*Vi(t)+c1·rand1·(pbesti−Xi(t))+c2·rand2·(gbesti−Xi(t))]The third PSO algorithm proposed in this paper is called PSO-IAC, which integrates the constriction factor and improved the adaptive inertia weight with the standard PSO. In other words, wain (15) is replaced by wiadetermined by (14),(16)Vi(t+1)=χ*[wia(t)*Vi(t)+c1·rand1·(pbesti−Xi(t))+c2·rand2·(gbesti−Xi(t))]In processing the PSO, the proposed PSO-AC and PSO-IAC can increase the convergence speed of particle swarm through the constriction factor and the adaptive inertia weight.Resolving the link joint angle with obstacle avoidance for the robotic arm can be regarded as an optimization problem, where the design of the fitness function is an important task. Two issues are adopted to define the fitness function for the robotic arm: one is the magnitude of distance error between the end-effector and goal-point coordinates, and the other is confirming that each link of the robotic arm will not collide with obstacles.Applying thepx,py,pzin (4) to calculate the position of the end-effector coordinatePointe=(xe,ye,ze), the target coordinate is specified byPointg=(xg,yg,zg), and then the first issue, the position error, is defined by(17)Err=(xe−xg)2+(ye−yg)2+(ze−zg)2The second issue is realized by defining a safety parameter coll as follows:(18)coll={1,safety0,collisionAfter taking into consideration the end-effector, the distance error from the target position, and the obstacle avoidance problem, the fitness function used in this paper is given by(19)fitness=coll/1+ErrThis definition of fitness function means that a maximization PSO problem is now examined. In the iterative process of the PSO algorithm, the forward kinematics addressed in Section 2 is used to obtain the coordinates of the end effectors in the mechanical arms. Then we can calculate the distance error (17) with respect to the goal point and figure out the fitness value (19).The home service robot, May, will be used in solving the obstacle avoidance problem for a 6-DOF manipulator by the proposed method in some experiments. Before carrying out the experiments, we must verify whether the definition of the coordinate space for the target position is in line with the coordinate space of the robotic arm. From the base point shown in Fig. 6, the origin of the robotic arm coordinate space is the first joint motor of the robotic arm, where the front of the robot refers to the X direction, the left and right of the robot refers to the Z direction, and the up and down of the robot refers to the Y direction.The experimental environment is set up as free-space and obstacle avoidance states. The illustration of the free-space state is shown in Fig. 7, where the origin of the spatial coordinates isPoint0=(x0,y0,z0), the end-effector coordinate isPointe=(xe,ye,ze), and the target position coordinate is denoted asPointg=(xg,yg,zg). The obstacle avoidance state is depicted in Fig. 8, where two obstacles are placed on the table between the robot and the target. In this state, the robot should consider both the table corners and obstacle impacts while executing the goal reaching command.By evaluating the manipulator performance, the proposed PSO-IA, PSO-AC, and PSO-IAC algorithms are first used to compare with the PSO-W, PSO-C, PSO-A, and PSO-CW algorithms via computer simulations. The objective of these seven algorithms is to determine six link joint angles such that the fitness function in (19) becomes one. For the simulations, the settings of theseven different algorithms are the same; that is, the number of particles in the swarm is 30, the maximum allowed number of function iterations is 1000, and there is a total of 20 independent runs. The parameters for these PSOs are provided in Table 2 and the acceleration coefficients are all set up asc1=c2=2.05. The simulations are carried out via programming in Visual C++ 2010 on a personal computer with a 3.1GHz/Intel Core i3 processor and a memory capacity of 4GB.For thefree-space state expressed in Fig. 7, the goal coordinate is defined asPointg=(430,−100,−30)in each simulation. Table 3 illustrates the mean number, standard deviation and convergence time for successfully reaching the target. One can see in this table that PSO-IAC gives the best and the fastest reaching capability. From the average value point of view, it takes only 43.3552 times function evaluations for PSO-IAC to getfitness=1, the standard deviation is 8.97273, and the convergence time is only 0.03349s that is the least one among all PSOs. The convergence characteristics of all PSO algorithms in one run are shown in Fig. 9.For real-time application to the home service robot, May, the goal coordinate is chosen to be the same as that of simulation setting,Pointg=(430,−100,−30). Fig. 10 depicts the scene in the free-space experiment. The continuous motions about the real-time experimental process are demonstrated in Fig. 11, where the manipulator will first complete the preparatory action by calculating the rotation angle of each motor via the PSO-IAC method (as shown in Fig. 11(a)–(d)), then Fig. 11(e)–(j) shows the robotic arm moving to the goal position, and finally Fig. 11(j) illustrates the robotic arm successfully reaching the goal position.In order to realize the goal reaching with obstacle avoidance capability, two scenes are set up. Scene I is shown in Fig. 8, where the specifications of the obstacles are described in Table 4. The center-point coordinate of the obstacles are set toPointo1=(300,−355,−150)andPointo2=(450,−330,75). The goal point for the robotic arm is defined asPointg=(420,−300,−40). The simulation results for solving the manipulator problem in the obstacle avoidance state are listed in Table 5, where the PSO-IAC algorithm indeed gives the best results from the mean, standard deviation, and convergence time points of view. Fig. 12 depicts the convergence characteristics, where the proposed PSO-IAC still outperformed other PSO methods.The real-time experimental setup of Scene I is shown in Fig. 13, where all coordinate settings are referred to as the definitions in the simulation. The serial motion pictures about Scene I of the obstacle avoidance state are demonstrated in Fig. 14, where Fig. 14(a)–(d) describes the prepared postures of the manipulator, and Fig. 14(e)–(j) shows that the PSO-IAC method can send commands to the robotic arm to reach the goal position without colliding with these two obstacles.In the Scene II experiment, the positions of these two obstacles are moved to the front of the goal object, which increases the difficulties in avoiding a collision. The center-point coordinates of the obstacles are set toPointo1=(310,−355,−125)andPointo2=(355,−380,20). The target position for the robotic arm is defined asPointg=(450,−270,−60). Fig. 15 shows the setup of Scene II. The serial motion pictures about the experimental process in Scene II are shown in Fig. 16(a)–(j), where Fig. 16(a)–(d) describes the robotic arm moving to the prepared posture. Fig. 16(e)–(j) demonstrates that the PSO-IAC algorithm can give commanding angles of each link joint such that the manipulator is able to reach the goal position without touching any obstacle. One can find from Figs. 14 and 16 that the proposed PSO-IAC method can successfully make the manipulator arrive at the desired position with/without obstacles.

@&#CONCLUSIONS@&#
This paper has presented a novel PSO-IAC algorithm for a 6-DOF robotic arm manipulating in a 3-D environment. The design and implementation of a 6-DOF manipulator for the home service robot have been addressed. The introductions of ordinary PSO-W, PSO-C, PSO-CW, and PSO-A algorithms have been given. The design procedure of the submitted PSO-IAC algorithm has been discussed and examined. The proposed PSO-IAC algorithm, which integrates the constriction factor and the improved adaptive inertia weight, has more complex computing process in each iteration than other PSOs. However, the simulations have revealed that PSO-IAC algorithm takes only a few generations to obtain the optimal solution in the swarms and does not have to re-exploit and re-explore new particles. From mean, standard deviation, and convergence time points of view, the PSO-IAC algorithm indeed provides the best convergence performance. Both the computer simulations and real-time experiments demonstrate the effectiveness and feasibility of the presented methodology and robotic arm.