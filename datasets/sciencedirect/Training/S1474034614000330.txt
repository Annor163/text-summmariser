@&#MAIN-TITLE@&#
A multi-agent methodology for multi-level modeling of mechatronic systems

@&#HIGHLIGHTS@&#
We propose a multi-agent methodology for multi-abstraction modeling of mechatronic systems.We decompose the design into agents linked with relationships and managed with design rules.The methodology is applied to a design case of energy harvesting system.We illustrate how this approach ensures continuity between abstraction levels.We also illustrate how designers identify modeling errors using checking rules.

@&#KEYPHRASES@&#
Mechatronic design,Multi-agent system,Multi-level modeling,

@&#ABSTRACT@&#
Mechatronic design aims to integrate the models developed during the mechatronic design process, in order to be able to optimize the overall mechatronic system performance. A lot of work has been done in the last few years by researchers and software developers to achieve this objective. However, the level of integration does not yet meet the purposes of mechatronic system designers, particularly when dealing with modeling changes. Therefore, new methodologies are required to manage the multi-view complexity of mechatronic design. In this paper, we propose a multi-agent methodology for the multi-abstraction modeling issue of mechatronic systems. The major contribution deals with proposing a new method for the decomposition of the multi-level design into agents linked with relationships. Each agent is representing an abstraction level and both agent and relationships are managed with rules. By considering an application to a piezoelectric energy harvesting system, we show how we associate agents, rules and inter-level relationships to multi-abstraction modeling. We also show how modeling errors are identified using this approach.

@&#INTRODUCTION@&#
Mechatronic design is the integrated design of mechanical-based systems and their embedded control systems [1]. The mechanical system may eventually be considered as a multi-physics system coupling the mechanical structure with other multi-physics sub-systems: fluid, thermal, electrical, electromagnetic, etc. This means that the optimal mechatronic system performance can be obtained when the overall mechatronic system is designed and optimized in an integrated way.However, integrating models coming from diversified disciplines, with different levels of abstraction and using heterogeneous modeling tools is not an easy task. Because, despite the effort deployed until now, it is still difficult to identify and track errors coming from changes in models during the mechatronic design process. Some software vendors claim to offer a solution that encompasses the entire mechatronic design process, although practical experiences showed that it is still far from satisfactory.One choice might be to apply the ’divide and conquer’ technique [2] to manage design complexity, rather than looking to integrate the complex mechatronic design process in one platform or language. Based on this idea, multi-agent system approach has been successfully applied to several industrial fields: intelligent manufacturing [3], process control [4], telecommunications [5], air traffic control and transportation systems [6], information management and health care [7], etc.For that purpose, several multi-agent methodologies have been developed in the last few years. However, most of them are designated to specific systems or architectures [8]. Therefore, a multi-agent methodology needs to be correctly specified and properly applied in order to reduce the distance between the different viewpoints of mechatronic design integration.In this paper, we propose a multi-agent technique that meets mechatronic design integration issues. In the second section we begin by giving an overview of the mechatronic design issues for multi-view integration. Then, in the third section, we present some previous works about multi-view modeling based on multi-agent techniques. In section four we detail our methodology to deal with one design issue which is the multi-level of abstractions. A piezoelectric energy harvesting system is treated as an application of our approach in the fifth section. A conclusion and the future work to extend the approach to other mechatronic design issues are given in the section six.Integrated design of mechatronic systems has been addressed by several researchers during the last years, this has led to the fact that integration issues depend on the design viewpoints considered [1,9,10]. Accordingly, mechatronic design issues are dependent on each other and the following design viewpoints are the most investigated in literature:•Multi-disciplinary domain: Mechatronics include a combination of engineering domains, mainly mechanical, electrical, control and computer engineering. For this reason, one important issue is how to ensure integration between models coming form different disciplines.Multi-activities: The design process of mechatronic systems include different modeling activities such as task clarification and detail design. As a result, performing these activities in a continuous way is a problem that must be dealt with.Multi-physics simulation: Beyond the control system, the operative parts of a mechatronic system have in most of cases multi-physics behavior with a coupling between structure and other physics such as thermal, fluid, electric, electromagnetic and piezoelectric effect. Thence, different simulation techniques such as finite element method (FEM), finite difference method or finite volume method should be correctly coupled to simulate the behavior of the overall system.Multi-level of abstraction: Abstraction is defined as the process of simplifying a model of the system that maintains some of the details or properties, while suppressing others [11]. Consequently, depending on modeling purposes, different models may represent the same object with different granularity of detail, and the question is how to ovoid inconsistency between different abstraction levels.Multi-tool design: Related to previous viewpoints, modeling tasks in mechatronic design could not be performed with one unique design tool or formalism. For instance, some languages and formalisms such as SysML,1SysML: Systems Modeling Language (www.sysml.org).1Modelica2www.modelica.org.2or Bond Graphs3http://www.bondgraph.com.3are advocated in high abstraction level. While, other tools and methods such as CAD software and FEM are recommended in a more detail level. Therefore, defining consistent strategies of interoperability between different modeling tools is an other problem to overcome.Analyzing the aforementioned viewpoints, one can remark that the integration issues in mechatronic design are not only a research topic but also concern other contributors such as modeling tool vendors and institutions of standards for the exchange of data. Several research papers were interested only in one or few of the viewpoints previously presented. For instance, Buur [12] and Isermann [13] reported two ways of integration in mechatronic systems: spatial integration (or hardware integration) and integration by information (or software integration). While the spatial integration was not well focused on, [13] has detailed information processing and control. A multi-level approach for integrated design of control systems was presented by the [13] to characterize multi-level control functions from low-level control through supervision to overall control.Likewise, Groothuis and Broenink [14] proposed a multi-view methodology based on views, multidisciplinary core models and correctness preserving code generation to facilitate the multidisciplinary design of embedded control software.For the multi-activity viewpoint, many authors consider that the design process of any technical product is defined by four phases: task clarification, conceptual design, embodiment design and detail design [15]. The task clarification phase involves identifying and formulating design requirements and constraints. Conceptual design phase includes abstracting to find essential design problems, establishing function structures, searching for working structures and selecting a suitable working structure. Embodiment design is concerned with producing a definitive layout of the proposed technical system or product. It should be noted that embodiment design is also called preliminary design by other authors [16]. In the detail design phase, all of the individual parts of the system are precisely specified: dimensions, forms, arrangement, materials, drawings and production documents [15].Every design phase has its objectives and requires different engineering skills, such as systems engineering at conceptual level, architecture analysis at embodiment level and experts in modeling and analysis of components in detail level.One key issue of mechatronic multi-activity design is consistency between models developed during mechatronic design process. This subject has been addressed in previous works by several researchers. For instance, Hehenberger et al. [17] proposed to define rules for the checking of design consistency as a solution to identify and track modeling errors when models are modified.For multi-physics simulation, several multi-tool approaches and frameworks have been proposed in previous published papers for coupling different modeling and simulation tools, either in sequential way or by co-simulation. For example, Hammadi et al. [18] proposed an approach for integrating different modeling and simulation tools for the optimization process of power electronic converters. The method proposed allows to automate the exchange of data between models with order reduction of FEM models during the optimization process.For multi-level modeling, several authors focused on relations between abstraction levels of modeling. For example, Scheidl and Winkler [19] proposed to define relations between conceptual level models and detail level models. These relations are defined mathematically as projection functions between the two levels.Other approaches, such as Multi-Paradigm Modeling (MPM) and Model-Driven Engineering (MDE), have also been considered to address the integration issues when designing complex systems, taking into account the dependency between several viewpoints. For instance, Hardebolle and Boulanger [20] have presented a comparison between MPM techniques based on four design purposes: application domain, abstraction level, design activity and modeling view. Authors in [20] concluded that there is no single type of technique which solves all the categories of problems, since different modeling paradigms are used for different modeling goals.Lauder et al. [21] considered five dimensions for the conceptual description of the models and information used for integration in the context of MDE approach. These five dimensions are related to: relationships between element belonging to different disciplines, meta-modeling, domain customization, abstraction level and evolution of the model versions. Nevertheless, problems were also encountered when integrating tools in the complex domain of automation engineering. In their conclusion, authors in [21] reported that more ideas need to be explored in order to automate the change propagation between the heterogeneous models according to the five dimensions previously mentioned.From the previous overview, we can conclude that despite the several works that have been interested in integrated design of complex systems, the integration issues have been partially fulfilled. Several integration solutions based mainly on MPM and MDE techniques were applied to domains such as electric design, software engineering and embedded control, but mechanical domain was not well covered due to the complexity related to 3D geometry. Therefore, a global paradigm is still required to respond in the best way to mechatronic design requirements. In the next section we explain why the multi-agent techniques are especially adapted for the multi-view modeling of mechatronic systems.Recent research trends in systems engineering [16] focused on integration of multi-agent paradigm with simulation technologies [22]. The Multi-agent approach can be seen as an emergent development of a combination of trends including artificial intelligence, object-oriented programming and concurrent object-based systems [23,24].Ören and Yilmaz [25] presented three complementary categories of integration between agent techniques and simulation: simulation for agent or agent simulation, agent-based simulation and agent-supported simulation.Agent simulation concerns the use of simulation techniques to simulate the behavior of agent systems. The agent system may be any complex system, such as a mechatronic system or a group of mechatronic systems which communicate between each other.Agent-based simulation is the use of agent techniques to generate simulation models. Agents are viewed in this case as intelligent systems of design that generate models and develop scenarios of simulation.Agent-supported simulation deals with the use of intelligent agents to enrich simulation environments. For more details about the three categories of integration between agent and simulation one should refer to [25].More recently a methodology based on multi-agent technique was proposed by Treur [26]. He suggested a unified specification format for interlevel relations between agent models in multi-abstraction dimensions. For this reason, [26] used the interpretation mapping technique to define relations between a higher abstraction level and a lower abstraction level according to three abstraction dimensions which are process abstraction, temporal abstraction, and agent-cluster abstraction dimension. However, the unified specification format for interlevel relations presented by [26] is a high level format and need to be adapted to be applied to concrete cases of engineering systems.Compared to other techniques, Iglesias et al. [27] have illustrated in their survey about multi-agent methodologies that several emerging agent-oriented methodologies are mainly extensions to known object-oriented or knowledge engineering methodologies. This offers to the multi-agent method more flexibility and autonomy of modeling and simulation under concurrent and cooperative design constraints. Therefore, multi-agent techniques are well suited to representing systems that have multi-problem solving methods, with multi-interacting entities and multi-abstraction levels. Thus, multi-agent approach is a privileged way to multi-view modeling of mechatronic systems.Since it is impossible to cover in one paper all the viewpoints previously presented concerning mechatronic design, we will limit the scope in next section to multi-level modeling issue. At the end of the paper we will briefly elaborate how the agent-based approach can deal with the other issues.Our multi-agent approach is based on defining a multi-agent system with three views: Agent (A), Relationships (R) and Rules (R). An Agent is a representation of a mechatronic entity and its attributes to characterize every abstraction level. Relationships are used to describe relations between agents. Rules are used to handle knowledge representation related to both agent and relationships. The three views of the ARR multi-agent methodology, as it will be detailed in this section, are sufficient to manage the multi-abstraction modeling of mechatronic systems.The agent view is itself described with three dimensions: agent-model (AM), space dimension (SD) and temporal dimension (TD). Hence the abstraction level of any mechatronic entity model can be defined according to these three dimensions.An agent-model describes single agents representing mechatronic entities, their internal properties (materials, physical parameters, etc.) and their design variables. Agent model describes also the behavior of a mechatronic entity in relation with its initial states. Moreover, in agent-model we can define environment elements by defining connection interfaces, boundary conditions and environment parameters. Furthermore, an agent-model is specified with a formalism and a modeling tool. A formalism is considered here as a rigorous mathematical framework, such as, analytic models, differential equations, state-spaces, and transfer functions. Modeling tools are for example MCAD/ECAD4MCAD/ECAD: Mechanical/Electrical Computer Aided-Design.4tools, Modelica language, SysML language, FEM software, etc. Depending on the abstraction level, several agent models may represent the same mechatronic entity. The behavior of the mechatronic entity represented by the agent model can (or not) be dependent on time (temporal dimension) or space (space dimension).An agent model can be defined with a space dimensionsd∈{0D,1D,2D,3D}. The space dimension of an agent-model depends on the discipline considered, the accuracy and the computing time required. For illustration, 0D models such as analytical or lumped parameter models are usually sufficient for a global rapid evaluation of a required performance. Whereas, other problems require 1D, 2D or 3D models, particularly in mechanical design. In electric domain however, 0D models are commonly used, but also 2D models are required for example to design Printed Circuit Boards (PCB). Control design and software modeling do not need more than 0D models.An agent model can be defined as time-dependent or steady-state. Time-dependent models are required for dynamic behavior modeling of agent-models with discrete-event, continuous or hybrid discrete–continuous simulations. Time-independent category is used to describe static or steady-state agent-models.Relationship view describes how interaction between agents take place, either at the same level of abstraction or in inter-level relationships. For the latter case, two types of relations can be described: Top-Down and Bottom-up relationships. Top-Down relationships are relations of simple abstract models to more complex and detailed models. The method of decreasing abstraction can be used for this purpose [28,29]. Relations can be described for example by using mathematical equations relating parameters of higher abstraction level to those of lower abstraction level.Bottom-up relationships are relations of lower abstraction level to higher abstraction level. For example, geometric shape abstraction techniques can be used for modeling problems based on geometric shapes [30]. Similarly, the method of temporal abstraction [31] or the generalized averaging method [32] can also be used for time-dependent problems. Furthermore, techniques of model order reduction (MOR) can be used for problems based on differential equations [33–35].To illustrate the Top-Down relationship view. We adapt the formalism used in [26] to the mechatronic design case and we consider different abstraction levels of a mechatronic entity as shown in Fig. 1.Every abstraction level is represented by an agent-model. AssumingAM1andAM2are the two agent-models corresponding respectively to the highest and the lowest abstraction levels. The interlevel relationships between the two agent-modelsAM1andAM2are defined by the arrows drawn in Fig. 1.δ:AM1→δ(AM1): represents a relationship between two dimensional abstraction levels. For example in a conceptual levelAM1, 1D Euler–Bernoulli beam theory is used to model the beam deflection. Whereas, a 3D FEM model can be used in a detail levelδ(AM1)for a more accurate modeling of the same beam deflection.τ:AM1→τ(AM1): represents a relationship between two temporal abstraction levels. For example, the same case of a beam deflection can be modeled with steady-state model in the conceptual level and a continuous time-dependent model in a more detail level.α:AM1→α(AM1): represents a relationship between two agent-models, representing the behavior of the same object with two abstraction levels. For example, the agent-modelAM1is defined with a simple formalism represented with an analytical model. The formalism describing the agent modelα(AM1), however, can be a partial differential equation combined with MCAD tool and FEM method for simulation.The relationships between different abstractions levels are mathematically illustrated for the case of a piezoelectric energy harvesting system treated in the next section.The rule view is the set of knowledge related to the design process of the mechatronic system. They are established by designers and experts involved in the design process according to the design requirements. In multi-abstraction level modeling context, we define two types of rules, namely modeling rules and checking rules.Modeling rules are used in the upstream of the modeling process to define assumption conditions and constraints, required at each abstraction level, to apply efficiently the formalisms and approximation techniques to agent-models. Therefore, modeling rules can be described by the following representation:Rule:Assumptioncondition/constraint⇒Formalism/ApproximationmethodFor example, we define the modeling ruleR1as:RC1⇒F1, whereRC1designates a modeling condition or constraint andF1designates a formalism or an approximation method to be applied.Moreover, modeling rules are also used to describe how interlevel relations are applied. These rules describe the logical conditions to be respected when applying the mathematical equations relating variables belonging to different abstraction levels.Furthermore, modeling rules are utilized to specify how to verify the models used. In this case verification metrics should be preliminarily defined. In addition, the level of acceptance should also be specified to measure the level of satisfaction of the model.Checking rules can be used either in the upstream or downstream of the modeling process for inconsistency checking. Inconsistency is defined as the situation in which prescribed modeling rules are violated. In this case checking rules can be simple logical rules of type “if …then …”. Therefore, checking rules allow designers to check the consistency of the formalisms applied and the interlevel relations defined. Conjointly checking rules help designers to verify if the design objectives are met.However, rules should be structured and implemented in knowledge-based software to be able to automate the checking task. The structuring of rules can be performed by relating generic rules of high abstraction level to more detailed rules of lower abstraction levels. This allows designers detecting and tracking modeling inconsistencies during the design process, where changes could frequently take place.To conclude this section, relationships between agents are defined by designers with respect to modeling rules, and both agent models and relationship models can be verified with checking rules. So that, identifying modeling errors and tracking them can be automated.For illustration, the methodology presented here will be applied in the next section to the case of the multi-level modeling of a piezoelectric energy harvesting system.Piezoelectric energy harvesting is a multidisciplinary domain attracting several engineering disciplines including mechanical, electrical, aerospace, civil, materials as well as the mechatronic field, for purposes related to environment and in situ power generation from ambient vibration energy.Piezoelectricity is a form of coupling between the mechanical and electrical effect of piezoelectric materials. When a piezoelectric material is mechanically strained, an electrical polarization is produced, this is known as the direct piezoelectric effect. When the same material is subjected to an electric polarization, it becomes mechanically strained, this is called the converse or inverse piezoelectric effect [36]. For instance, piezoelectric actuators are based on the inverse effect, whereas the direct piezoelectric effect is utilized in energy harvesting. The most common way to proceed in piezoelectric energy harvesting is by using a cantilever beam with integrated piezoelectric ceramics.Designers of piezoelectric energy harvesting systems (PEHSs) are interested in optimizing mass, geometry and materials of piezoelectric device to maximize the generated electric power at different excitation frequencies and acceleration amplitudes.The power generated by a PEHS is maximum when the natural frequency of the device matches the frequency of excitation. Therefore, a proof mass is commonly used to reduce the natural frequency. Fig. 2shows four possible configurations of PEHSs with one active piezoelectric layer (Unimorph), two active piezoelectric layers (Bimorph), with and without a proof mass. For both unimorph and bimorph configurations, a passive flexible layer is required as a mechanical support for the PEHS.The objective of this study is to apply the multi-agent ARR methodology to the case of multi-level modeling of a PEHS. Therefore, three agentsAM1,AM2andAM3corresponding to three levels of abstraction will be described in the next section.As it has been described in the ARR multi-agent methodology, modeling rules are used to precise modeling assumptions that help designers to define formalisms. Hence, for defining the agent-modelAM1, we will be limited to the following four assumptions which associated to four modeling rules [36]:•R11: The length-to-thickness aspect ratio is usually high enough to neglect the shear deformation and rotary inertia effects (Euler–Bernoulli beam assumptions [37]).R12: Deformations of beam are assumed to be small and its composite structure is assumed to exhibit linear-elastic material behavior.R13: The piezoelectric (electromechanical) coupling effect is neglected at this level of abstraction.R14: steady-state models are required at this level of modeling.Regarding the aforementioned rules, simple analytic equations are enough to estimate the power generated by the piezoelectric harvester. Hence, the available vibrating power can be calculated in this case with the following equation [38]:(1)Po1=MeχeY02(ωωn)3ωn3(1-(ωωn)2)2+(2(χe+χm)(ωωn))2where Me is the equivalent mass of the system,Y0is the amplitude of vibration,ωandωnare respectively the excitation frequency and the natural frequency of the beam,χmandχeare the mechanical and electrical damping coefficients, respectively. The maximum available power is determined whenω=ωnand it can be calculated with following equation:(2)Po1max=MeχeY02wn34(χe+χm)2In the two previous equations defining the agent-modelAM1, few parameters are used and they are of two types, internal property parameters (Me,ωn,χmandχe) and input parameters (Y0andω), which are due to the interaction between the system and its environment.Accordingly, the agent-modelAM1is a 0D steady-state model that complies the modeling rules.Some assumption rules ofAM1will also be considered in this level of modeling, in particularR11andR12. Thus, the following assumption rules will be taken into consideration:•R21=R11.R22=R12.R23: The piezoelectric (electromechanical) coupling effect is taken into account at this level of abstraction.R24: Dynamic effect is taken into consideration.R25: Vibration is assumed to be harmonic.The lumped-parameter time-dependent model represented by Fig. 3was used in several works for modeling PEHSs [39]. The mathematical representation of the lumped-parameter model that respects the set of rules mentioned above is given by the following system of ordinary differential equations (ODEs).(3)Mz¨+Dż+Kz-αv=-My¨αż+Cpv̇=0where M is the equivalent mass of the piezoelectric harvester, D is the damper coefficient that represents the mechanical and electrical damping, K is the spring stiffness,αis a the force-voltage coupling factor andCpis the internal piezoelectric device capacitance.The input is the relative displacementz(t)defined with:(4)z(t)=x(t)-y(t)wherey(t)is the displacement of the system due to vibration andx(t)is the absolute displacement of the mass M.The output is the voltagev(t)that can be, for instance, determined numerically by solving the ODE system (3). The available vibrating power in the piezoelectric energy harvesting system can be given by the following equation.(5)Po2(t)=Mω2yżwhereωis the vibrating frequency. The electric current generated by the PEHS is depending on the load used.For this abstraction level, we consider a 3D model of a bimorph configuration with a proof mass as illustrated in Fig. 4. More rule assumptions are required at this level of modeling.•R31=R11.R32=R12.R33=R23.R34=R24.R35=R25.R36=The middle layer is considered grounded.R36=The poling direction and the 3D notation are described in Fig. 5.R37=The electromechanical coupling mode to be considered is the transverse mode “31”.Piezoelectric effect depends on electromechanical coupling modes. The most used coupling modes are ‘33’ and ‘31’. The ‘33’ mode evokes a strain and an electric poling in the same direction 3. Whereas strain direction is 1 and electric poling direction is 3 for the ‘31’ mode. Despite the better electromechanical coupling for the ‘33’ mode, the ‘31’ mode promotes vibrating at lower natural frequencies.Four forms of the piezoelectric constitutive equations are used in literature: Strain-Charge from (S-D), Stress-Charge form (T-D), Strain-Voltage form (S-E) and Stress-Voltage form (T-E).(6)S=[sE]T+[d]tED=[d]T+[∊T]EStrain-Charge(7)T=[cE]S-[e]tED=[e]S+[∊S]EStress-Charge(8)S=[sD]T+[g]tDE=-[g]T+[∊T]-1DStrain-Voltage(9)T=[cD]S-[h]tDE=-[h]S+[∊S]-1DStress-VoltageThe definitions of the variables used in the four forms are given in Table 1.For more precision,sEandsDare the mechanical compliance matrix at constant electric filed and constant electric charge density, respectively. In the same way,cEandcDare the mechanical stiffness matrix at constant electric field and constant electric charge density, respectively. As well as,∊Sand∊Tare the permittivity (dielectric constant) matrix at constant strain and constant stress.Two of the four formalisms are most used in FEM programs, namely strain-charge and stress-charge forms. The matrix representation of the strain-charge form is given by the following two equations:(10)S1S2S3S4S5S6=s11Es12Es13E000s12Es22Es13E000s13Es13Es33E000000s44E000000s44E0000002.(s11E-s12E)T1T2T3T4T5T6+00d3100d3100d330d150d1500000E1E2E3(11)D1D2D3=0000d150000d2400d31d31d33000T1T2T3T4T5T6+∊11T000∊11T000∊33TE1E2E3In the same way, the matrix representation of the stress-charge form is given by the following two equations:(12)T1T2T3T4T5T6=c11Ec12Ec13E000c12Ec22Ec13E000c13Ec13Ec33E000000c44E000000c44E000000c11E-c12E2S1S2S3S4S5S6-00e3100e3100e330e240e1500000E1E2E3(13)D1D2D3=0000e150000e2400e31e31e33000T1T2T3T4T5T6+∊11S000∊11S000∊33SE1E2E3Since we have three agent models corresponding to three abstraction levels, two types of relationships can be described; relationships between agent-models at the same abstraction level and relationships between agent-models of different abstraction levels.To illustrate interchangeability between agent-models at the same level of abstraction, we consider the agent-modelAM3. The following equations present 4 out of the 6 possible combinations relating the different formalisms previously presented to define agent-modelAM3[40]:Strain-Charge to Stress-Charge transformation:(14)[cE]=[sE]-1(15)[e]=[d][sE]-1(16)[∊S]=[∊T]-[d][sE]-1[d]tStrain-Charge to Strain-Voltage transformation:(17)[sD]=[sE]-[d]t[∊T]-1[d](18)[g]=[∊T]-1dStress-Charge to Stress-Voltage transformation:(19)[cD]=[cE]+[e]t[∊S]-1[e](20)[h]=[∊S]-1[e]Strain-Voltage to Stress-Voltage transformation:(21)[∊S]-1=[∊T]-1+[g][sD]-1[g]t(22)[cD]=[sD]-1(23)[h]=[g][sD]-1To sum up, if we choose the strain-charge as a formalism forAM3, Fig. 6shows the modeling parameters allocated to the three agent-models and the relationships between the different abstraction levels. We note that the more the abstraction level is high the more the number of modeling parameters is reduced, therefore the complexity and interchangeability are better managed.Relationships between agent-modelsAM1andAM2concern the equivalent mass which is the same in the two models:(24)Me=MIn addition, the natural frequency of the piezoelectric harvester is the same inAM1andAM2.(25)ωn=ω0whereω0can be calculated with:(26)ω0=KMThe damping ratios inAM1and the damping coefficient D inAM2are related with the following equation:(27)D=2(χe+χm)MKThe relationship between the outputs of the two agent-models can be defined by the following equation:(28)Po1max=average(Po2(t))The last equation is an example of relationships between a time-dependent agent-model and a steady-state agent-model,AM2andAM1in this case.In the same way, we can define relationships between agent-modelsAM2andAM3. For this end, to relate the equivalent mass M used inAM2with dimensions of the piezoelectric harvester used inAM3, we first use the following equation [41]:(29)M=Me=33144Mb+MpwhereMbis the mass of the beam andMpis the proof mass.Then, we use the following equations forMbandMp:(30)Mb=ρbLxLyh+2ρpzLxLyhpz(31)Mp=ρmLxmLymhmwhereρb,ρpzandρmare material densities of middle layer, piezoelectric layers and proof mass, respectively.In the same way, to relate the equivalent stiffnessK=Keto the geometric dimensions of the PEHS, we use the following equation:(32)Ke=3EeIeLx3whereEeis the equivalent Young’s modulus, andLxis the beam length.To calculateEethe following equation is used:(33)Ee=Eh+2Epzhpzh+2hpzwhere E andEpzare respectively the Young’s modules of the flexible layer and the piezoelectric material. The latter module, is given by the following equation:(34)Epz=1s11EThe equivalent moment of inertiaIecan be calculated using the parallel axes rule:(35)Ie=I+Ipz+hpzLy(h+hpz)22where I andIpzare the moments of inertia of the middle layer and one piezoelectric layer, defined respectively by the two following equations:(36)I=Lyh312(37)Ipz=Lyhpz312The internal piezoelectric capacitanceCpand the coupling coefficientαutilized inAM2can be expressed with parameters inAM3using the two following equations:(38)Cp=∊33LxLy2hpz(39)α=nEpzd31Ly(2hpz)Lxwhere n is the number of piezoelectric layers, n=2 in this case.Therefore, the modeling rules allow us to find the simplifications and then to define the relationships between the piezoelectric parameters of the 3D agent-modelAM3and those of the 0D agent-modelAM2. These relationships are illustrated by reducing respectively the matrices[d],[∊T]and[cE]to parametersd31,∊33Tands11E, as shown in the following relations:(40)0000d150000d2400d31d31d33000⇔d31(41)∊11T000∊11T000∊33T⇔∊33T(42)s11Es12Es13E000s12Es22Es13E000s13Es13Es33E000000s44E000000s44E0000002(s11E-s12E)⇔s11EThe last relationships are an example of transformation between abstraction levels of different space dimensions, 0D and 3D in this case.Checking rules are an efficient way for identifying and tracking errors. For example, in the case of our application, we need to modify dimensions of the system to maximize its output power. For this, if we add a checking rule defined as the following: “ifLx/h⩾Lh0then the ruleR1is violated”, whereLh0is a threshold defining the limit of Bernoulli assumptions. During an optimization process, it is prevalent that designers do not detect this error. But with the checking rule it is possible to program a message to indicate to designers at different abstraction levels that a modeling rule is no more respected. In that case designers either limits the dimensions to the intervals in which the ruleR1is usually respected, or change the model used to take into consideration the shear deformation and rotary inertia effects.

@&#CONCLUSIONS@&#
