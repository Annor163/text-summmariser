@&#MAIN-TITLE@&#
Coordination of production and interstage batch delivery with outsourced distribution

@&#HIGHLIGHTS@&#
We model coordinated production and interstage batch delivery scheduling problems.Delivery is outsourced to a third-party logistics provider (3PP) that uses two transportation modes.We analyze the problems faced by the 3PP when either the manufacturer dominates or the 3PP dominates.We investigate the complexity of several problems, providing polynomiality and NPcompleteness results.

@&#KEYPHRASES@&#
Supply chain scheduling,Batching and delivery,Outsourced distribution,Two delivery modes,Dynamic programming,

@&#ABSTRACT@&#
In this paper, we consider coordinated production and interstage batch delivery scheduling problems, where a third-party logistics provider (3PP) delivers semi-finished products in batches from one production location to another production location belonging to the same manufacturer. A batch cannot be delivered until all jobs of the batch are completed at the upstream stage. The 3PP is required to deliver each product within a time T from its release at the upstream stage. We consider two transportation modes: regular transportation, for which delivery departure times are fixed at the beginning, and express transportation, for which delivery departure times are flexible. We analyze the problems faced by the 3PP when either the manufacturer dominates or the 3PP dominates. In this context, we investigate the complexity of several problems, providing polynomiality and NP-completeness results.

@&#INTRODUCTION@&#
Supply chain management is an active domain consisting of the optimization and management of flows between different actors in the chain, such as suppliers, manufacturers, logistics providers, distributors and customers. These actors generally have conflicting objectives, which makes the coordination of their decisions a crucial issue in supply chain management.In recent years, supply chain coordination issues have received great attention from several researchers. Before 2000, most of the work has focused on coordination at the strategic and tactical levels, see e.g. the surveys by Sarmiento and Nagiy (1999) and Erengüç, Simpson, and Vakharia (1999). Thomas and Griffin (1996) pointed out the need for research that addresses supply chain issues at an operational level rather than a strategic level. This has triggered a certain amount of research on supply chain coordination at the operational level. Hall and Potts (2003) were the first to study coordination issues among scheduling, batching and delivery decisions in a three-stage supply chain formed by suppliers, manufacturers, and customers. They study two individual decision models, corresponding to the viewpoint of one supplier or one manufacturer respectively. Agnetis, Hall, and Pacciarelli (2006) also study a coordinated scheduling problem between a supplier and several manufacturers, taking into consideration an intermediate storage buffer. Dawande, Geismar, Hall, and Sriskandarajah (2006) analyze conflict and cooperation issues in distribution systems, and they evaluate the cost of conflict between the manufacturer and the distributor. They provide algorithms for scheduling problems in different bargaining power scenarios. Chen and Hall (2007) study conflict and cooperation issues in assembly systems, where several suppliers need to deliver the parts to a manufacturer. Aydinliyim and Vairaktarakis (2010) study coordination of outsourced operations among several manufacturers, using both optimization and cooperative game-theoretic models. Hall and Liu (2010) study coordination between one manufacturer and several distributors for capacity allocation and scheduling decisions. Cai and Vairaktarakis (2012) propose a cooperative model for the coordination in a supply chain where several manufacturers outsource jobs to one third party facility.Recently, growing attention have been devoted to integrated supply chain scheduling issues. Chen (2010) surveys integrated production and outbound distribution scheduling (IPODS). Outbound distribution deals with a manufacturer shipping its products to the next stage of the supply chain, that typically belongs to another company. As a consequence, the receiving firm may set due dates or deadlines that will constrain the production/distribution problem. The focus of the analysis is on coordinating production decisions (typically, sequencing) and distribution decisions (typically, batching). These two aspects are often conflicting, and require a careful consideration of objectives and roles of the subjects involved. Most of the recent literature on integrated supply chain scheduling refers to outbound distribution. Several IPODS models have been considered. For example, Lee and Chen (2001) study an IPODS problem with batch delivery to a single customer. Pundoor and Chen (2005) consider an IPODS problem with batch delivery to multiple customers by the direct shipping method. Chen and Vairaktarakis (2005) study an IPODS problem with batch delivery to multiple customers by the routing method. Averbakh and Baysan (2012) consider an IPODS problem with batch delivery to multiple customers and semi-online environment.In this paper, we are concerned with the situation arising when the same manufacturer owns both the upstream and the downstream stage. This case is referred to as interstage distribution. A few articles address integrated production and interstage distribution scheduling issues. Lee and Chen (2001) study a 2-machine flow shop scheduling problem, which minimizes makespan and considers constraints on both transportation capacity and transportation times. Lee and Strusevich (2005) provide approximation algorithms for the 2-machine flow shop and open shop scheduling problems with an (uncapacitated) interstage transporter. Gong and Tang (2011) propose a heuristic algorithm for a coordinated production–distribution scheduling problem in a 2-machine flow shop environment, and analyze the problem with different job physical space setting. Aloulou, Bouzaiene, Dridi, and Vanderpooten (2014) consider a bicriteria 2-machine flow shop scheduling problem with an infinite number of vehicles and limited capacity. They minimize two criteria, namely transportation cost and makespan.These models generalize classical machine scheduling models, and are suitable for a scenario in which the owner of the two facilities takes care of transportation, so that this can be synchronized with processing at the two stages. Actually, transportation can be outsourced to a third-party logistics provider (3PP), and their relationship be regulated by a contract specifying an appropriate level of responsiveness. This is apparently a very common practice among companies (Langley, van Dort, Ang, & Sykes, 2006; Tezuka, 2011). In spite of this, there are not many articles about interstage distribution in which transportation is outsourced. Among them, Li, Sivakumar, and Ganesan (2008) study the coordinated scheduling of parallel machine manufacturing and 3PP transportation in make-to-order consumer electronics supply chain. They analyze first the 3PP transportation allocation problem, and then develop the parallel machine scheduling problem with the due date imposed by the 3PP. Zhong, Chen, and Chen (2010) study an integrated production/distribution scheduling problem, in which the 3PP specifies various shipping times for different vehicles.In this paper, we consider production and interstage distribution scheduling, focusing on the problems faced by the 3PP. Given a set of items (jobs) produced by the manufacturer at the upstream facility, the contract requires the 3PP to deliver each of them to the downstream stage, within a certain time T from its release at the upstream stage. Small values of T indicate high responsiveness of the 3PP, which is desirable for the manufacturer. However, this may entail higher costs for the 3PP. In our models, we will consider both the 3PP cost function and responsiveness requirements.We are going to investigate two different types of contract. In the first type, the manufacturer decides the schedule of the jobs that are being released at the upstream stage and prescribes a certain value of T. The 3PP is therefore left with the problem of minimizing its costs while complying with the responsiveness requirement. We say that in this scenario the manufacturer dominates. In the second type of contract, expectedly cheaper for the manufacturer, the responsiveness requirement is still present, but the 3PP can prescribe the order in which the jobs at the upstream stage are to be picked up. The 3PP has therefore more flexibility to conveniently arrange the jobs. In this case, we say that the 3PP dominates.Another feature considered in our model is the presence of multiple transportation resources. As observed by Chen (2010) in his survey on integrated production and distribution scheduling problems, research has not yet adequately addressed problems with fixed delivery departure times. These refer to the fact that transportation resources are available to depart from the upstream stage only at fixed, known departure times. While a handful of papers (Li, Ganesan, & Sivakumar, 2005, 2006; Stecke & Zhao, 2007; Wang, Batta, & Szczerba, 2005) address coordination between production and outbound distribution with fixed delivery departure times, we are not aware of articles on production and interstage distribution scheduling problems with fixed delivery departure times. In this paper we consider a general setting in which transportation can be provided by means of resources with fixed departure times as well as dedicated resources which are always available. We will refer to the two transportation modes above as regular and express respectively. In general, deciding which transportation resource is the most appropriate to perform each delivery is part of the 3PP decision problem. Koc, Toptal, and Sabuncuoglu (2013) consider the similar transportation setting for an integrated production and outbound delivery planning problem.This paper is organized as follows. In Section 2, we formally describe the problems and introduce notation and terminology. Section 3 illustrates some general properties of the optimal solutions which are common to all scenarios. Section 4 is devoted to the scenario in which the manufacturer dominates, Section 5 to the scenario in which the 3PP dominates. Section 6 contains some conclusions and suggestions for future research.In this section, we formally define the problems addressed in this paper. We refer to the upstream and downstream stages of a supply chain as machineM1andM2respectively. The context is specified by the following points.•A manufacturer has to process a set of n nonpreemptive jobs,1,…,n. Each jobj,j=1,…,nis processed on machineM1, with processing timepj. A production scheduleσis an assignment of starting timesSjto each job j onM1. Since jobs cannot be preempted, job j completes onM1atCj=Sj+pj. We denote byσ(j)the j-th job in the production scheduleσ, and byCk(σ)the completion time of job k onM1in the production scheduleσ.Throughout the paper we consider production schedules in whichM1continuously processes jobs, with no idle time. This constraint enforces a minimum productivity requirement, which is particularly meaningful in the scenario in which the 3PP dominates.After processing onM1, the jobs have to be shipped fromM1toM2(typically, located in a different city) for further processing. A 3PP is in charge of transportation.Transportation must comply with a certain responsiveness requirement, i.e., each job j has to be delivered toM2within a time T from its completion onM1. In other words, for each job j, a deadlined̃j=Cj+Tis specified. We letDjdenote the actual delivery time of job j toM2, so in a feasible solutionDj⩽d̃jfor all j.The vehicles used by the 3PP have a certain capacity, given by the maximum number of jobs a vehicle can carry (i.e., jobs are supposed to have equal size).The 3PP uses two transportation modes.–Type-1 transportation is regular transportation. There areV1identical vehicles of capacityc1⩽neach of which has a fixed departure time. The transportation time fromM1toM2is denoted byℓ1. The transportation cost per delivery is denoted byh1. We assume we have L fixed delivery departure timest1<…<tL,vs⩽nvehicles for departure timets,s=1,…,L, and consequentlyV1⩽Ln.Type-2 transportation is express transportation. There areV2identical vehicles of capacityc2⩽n, each of which can depart at any time, i.e., there are no fixed departure times. The transportation time fromM1toM2is denoted byℓ2and the return time byℓ2′. The transportation cost per delivery is denoted byh2, expectedly larger thanh1.Clearly, if eitherV1=0orV2=0, only one transportation mode exists.For both transportation modes, jobs in the same delivery form a batch. A batch B is available for delivery when all jobs belonging to B are completed atM1. The delivery time of a batch B, denoted byDB, is the time at which the batch reachesM2. We let a regular batch or an express batch be a batch for which regular or express transportation, respectively, is used.Given a production schedule, a delivery scheduleBis a partition of the jobs into b batches, along with the specification of a transportation mode and the departure time for each batch.A production–distribution schedule is specified by a production scheduleσand a delivery scheduleB. We indicate a production–distribution schedule by the pair(σ,B). Given a production–distribution schedule, we letB(j)denote the batch of job j. The delivery time of a job j is therefore denoted byDB(j).In all scenarios, the objective of the 3PP is to minimize the transportation costTC=h1n1+h2n2, wheren1andn2are the number of batches of type 1 (regular) and type 2 (express), respectively. If only one transportation mode is present, the objective is to minimize the number of batches.Scenarios. In this paper we consider two scenarios, corresponding to two types of agreements (contracts) between the manufacturer and the 3PP. These are formally defined in the following.1.Manufacturer dominates. In this scenario, the manufacturer predetermines the production schedule onM1, and hence the timeCjat which each job j is released byM1. The 3PP aims at finding a delivery schedule that minimizes TC, while respecting the deadlined̃j=Cj+Tof each job j. These problems can be seen as IPODS (Integrated production and outbound distribution scheduling) problems (Chen, 2010) with a single machine, deadlines and batch delivery to a single customer, in which the sequence on the machine is fixed. Throughout the paper we use the five-field notationα|β|π|δ|γintroduced by Chen (2010), the problem can therefore be denoted as1|fseq,d̃j=Cj+T|π|1|TC, where:α:This field is equal to 1, which refers to a single machine (M1).In this field, fseq indicates that the sequence onM1is fixed, and deadlines are defined asCj+T.This field may contain the following values:•V1(x1,y1), wherex1∈{V1,∞}is the total number of vehicles for regular transportation (either limited or unlimited) andy1∈{c1,∞}is the capacity of each vehicle for regular transportation (either limited or unlimited).V2(x2,y2), wherex2∈{V2,∞}represents the total number of vehicles for express transportation (either limited or unlimited) andy2∈{c2,∞}represents the capacity of each vehicle for express transportation (either limited or unlimited).This field is equal to 1, which refers to a single customer (M2).This field contains the objective function, which is the total cost to the 3PP (TC).3PP dominates. In this scenario, the 3PP decides a production–distribution schedule (hence, both a production schedule onM1and a delivery schedule) such that the transportation cost TC is minimized, while delivering each job within T from its release byM1(i.e.,d̃j=Cj+Tfor each job j). Also this problem can be seen as an IPODS problem, denoted by1|no-idle,d̃j=Cj+T|π|1|TC. In theβfield we specify thatM1must never be idle, whileπis as described in the previous scenario.Tables 1 and 2summarize the complexity results presented in this paper, in which P stands for polynomially solvable, and sNP for strongly NP-hard.In this section we give some general properties of the optimal delivery schedule that apply to all scenarios considered in this paper, hence to all problems denoted by1|·,d̃j=Cj+T|π|1|TC, where·may actually be either fseq (if the manufacturer dominates) orno-idle(if the 3PP dominates).In what follows, we say that a batch B is split by another batchB′if B contains some jobs that are processed before some jobs ofB′, and some jobs which are processed after some jobs ofB′onM1. Also, given a delivery schedule, we say that we swap two jobs i and j to mean that we move job i toB(j)and job j toB(i), without changing the production scheduleσonM1nor the departure time of each batch.Lemma 1There exists an optimal delivery schedule for the problem1|·,d̃j=Cj+T|π|1|TC, such that the following properties hold:1.If jobs i and j are delivered by the same transportation mode andCi<Cj, thenDi⩽Dj.An express batch can be only split by regular batches and a regular batch can be only split by express batches.If there exists one transportation mode only, the jobs of each batch are processed consecutively on machineM1.If there exist two transportation modes,(a)Ifℓ1⩾ℓ2, no regular batch is split.Ifℓ1⩽ℓ2, no express batch is split.If there exists an unlimited number of vehicles for express transportation, each express batch departs at the completion time of the last job in this batch.If there exists a limited number of vehicles for express transportation, each express batch departs either at the completion time of the last job in this batch or as soon as a vehicle for express transportation is available.In what follows, we denote bySe(i,j)the subsequence of jobs fromσ(i)throughσ(j)onM1. We do not change the production scheduleσ.□Suppose that there is an optimal delivery schedule such that job i is delivered after job j by the same transportation mode althoughCi<Cj, i.e.,DB(j)<DB(i)andd̃i<d̃j. SinceDB(i)⩽d̃i, one hasDB(j)<DB(i)⩽d̃i<d̃j. We can then swap i and j obtaining a new delivery schedule which is still feasible and has the same transportation cost. This argument can be repeated until the delivery schedule satisfies Property 1.Suppose there is an optimal delivery schedule which does not respect Property 2, i.e., assume that a regular batch B is split by some express batches and some regular batches. Consider the subsequenceSe(i,j), whereσ(i)andσ(j)are respectively the first and the last job of batch B. Due to Property 1,DB(σ(i))⩽DB′⩽DB(σ(j)), whereB′is any regular batch inSe(i,j). SinceDB(σ(i))=DB(σ(j)), all regular batches inSe(i,j)have the same departure time. In the subsequenceSe(i,j), we do the following: as long as there is an h and ank,i⩽h<k⩽j, such thatσ(h)∈Bandσ(k)∈B′, whereB′is a regular batch different from B, swapσ(h)andσ(k). When no further such swap is possible, we stop. In the resulting delivery schedule, batch B is split only by express batches. By a very similar argument, one can prove that there is an optimal schedule in which any express batch can be only split by regular batches.This is a direct consequence of Property 2. If only one transportation mode exists (i.e., eitherV1=0orV2=0), no batch can be split.Suppose that in an optimal delivery scheduleB, the jobs of a regular batch B are not processed consecutively on machineM1whenℓ1⩾ℓ2. According to Property 2 above, batch B can be only split by express batches. Letting againσ(i)andσ(j)be the first and last job in B, consider the subsequenceSe(i,j), and letσ(u)be the first job inSe(i,j)belonging to an express batch such thatDσ(u)-ℓ2⩾Cσ(j)(seeFig. 1, in whichσ(i)=4,σ(j)=8andσ(u)=6). Note that jobσ(u)is the first job of an express batch. Hence, in the subsequenceSe(i,u-1), we do the following: as long as there is anh,i⩽h⩽u-2, such thatσ(h)∈Bandσ(h+1)∈B′, whereB′is an express batch, swapσ(h)andσ(h+1). When no further such swap is possible, we stop. In the resulting delivery scheduleB^, batch B is scheduled after all express batches preceding job u. InB^, the deadline of the first job of batch B has been delayed, so the jobs of batch B are not late. For each jobσ(k)from any express batch, recalling thatDσ(k)-ℓ2<Cσ(j),Cσ(j)+ℓ1⩽d̃σ(i)andℓ2⩽ℓ1, one has thatDσ(k)⩽Cσ(j)+ℓ2⩽d̃σ(i)⩽d̃σ(k). So no job from any express batch is late. Symmetrically, starting now fromB^, consider the subsequenceSe(u,j), and do the following: as long as there is an h such thatσ(h)∈B′andσ(h+1)∈B, whereB′is an express batch, then swapσ(h)andσ(h+1). When no further such swap is possible, we stop. In the resulting delivery scheduleB‾, batch B terminates before all express batches following job u. Note that, since neither the leftmost job of B norDBhave changed, no job of batch B is late. Also, the deadline of the first job of no express batch has been anticipated, so again no job from any express batch is late. In conclusion,B‾is optimal and the jobs of batch B are processed consecutively on machineM1(seeFig. 1).Applying this argument to each regular batch B which is split, we can obtain a new optimal production–distribution schedule in which no regular batch is split.Property 4(b)The proof is symmetrical to that of Property 4(a).Simply observe that if, in an optimal delivery schedule, the departure time of an express batch B is later than the completion time of the last job in B, one can simply anticipate the departure time of batch B to the completion time of the last job in batch B. If there is an unlimited number of vehicles for express transportation, this does not affect the subsequent schedule.Similar to that of Property 5, but since the number of vehicles is limited, now we anticipate the departure time of a batch B either to the completion time of the last job in B or to the time the vehicle transporting B becomes available.In this section we consider the scenario in which the manufacturer decides the production schedule. Throughout Section 4, since the production schedule is fixed, we can simplify the notation assuming that the jobs are numbered by increasing completion times, i.e.,σ(i)=iandC1<…<Cn.In the following subsections, we consider the 3PP’s problems with different transportation modes. First we consider the problems with both transportation modes (Section 4.1), then the problems with regular transportation only (Section 4.2), and finally the problems with express transportation only (Section 4.3).We first address the problem1|fseq,d̃j=Cj+T|V1(V1,c1),V2(∞,c2),ℓ1>ℓ2|1|TC, in which there is a limited numberV1of vehicles for regular transportation and an unlimited number of vehicles for express transportation, andℓ1>ℓ2. We present a dynamic programming algorithm to solve this problem. Recall that according to Property 4(a) of Lemma 1, the jobs of each regular batch are processed consecutively onM1, according to Property 2 of Lemma 1 each express batch can be only split by regular batches, and according to Property 5 of Lemma 1 each express batch departs at the completion time of the last job in this batch.Algorithm EE1.State and Value FunctionThe dynamic program considers state(i,j1,j2,s,v,g,m), in which:•The first i jobs have been delivered.Jobj1is the first job of the last regular batch scheduled so far, jobj2is the first job of the last express batch scheduled so far.Parameter m indicates the transportation mode of the last batch, namelym=1stands for regular transportation, andm=2for express transportation.The current last regular batch departs at timets.At timets,v⩽vsvehicles for regular transportation have been used.The current last express batch consists of g jobs. Ifm=2, job i is the current last job of such batch, thus it departs at timeCi.We letf(i,j1,j2,s,v,g,m)denote the minimum transportation cost of all schedules in state (i,j1,j2,s,v,g,m).Boundary conditionf(0,0,0,0,0,0,1)=0,f(0,0,0,0,0,0,2)=0.Optimal solution valuemin(j1,j2,s,v,g,m)∈Af(n,j1,j2,s,v,g,m),whereA={(j1,j2,s,v,g,m)|1⩽j1⩽n,1⩽j2⩽n,0⩽s⩽L,0⩽v⩽vs,0⩽g⩽c2,m=1,2}.Recurrence relationWe next consider the recurrence relation forf(i,j1,j2,s,v,g,m). Actually, such state is only defined for values of the indices such that:•i∈{1,…,n},j1∈{1,…,i},j2∈{1,…,i},s∈{0,…,L},v∈{0,…,vs},g∈{0,…,c2},m∈{1,2}.Ifm=1, thens>0,v>0and:–Ci⩽ts, i.e., job i must be completed before the batch departs.ts+ℓ1⩽Cj1+T, i.e., the vehicle must arrive inM2within the most restrictive due date of a job in the batch.i-j1+1⩽c1, i.e., the batch size cannot exceed the vehicle capacity.Ifm=2, then–Ci+ℓ2⩽Cj2+T, i.e., the vehicle must arrive inM2within the most restrictive due date of a job in the batch.0<g⩽c2.Ifi=j2, theng=1since the current last job only consists of job i.If a state does not satisfy all these conditions, we letf(i,j1,j2,s,v,g,m)=+∞. We can now express the recursive relation as:f(i,j1,j2,s,v,g,m)=minf(i-1,j1,j2,s,v,g,m),ifi>j1,m=1minj1′,m′,s′,v′∈A1fi-1,j1′,j2,s′,v′,g,m′+h1,ifi=j1,m=1min{f(i-1,j1,j2,s,v,g-1,1),f(i-1,j1,j2,s,v,g-1,2)},ifi>j2,m=2min(j2′,g′,m′)∈A2f(i-1,j1,j2′,s,v,g′,m′)+h2,ifi=j2,m=2whereA1={j1′,m′,s′,v′|1⩽j1′⩽i-1,m′=1,2, ifv>1, thens′=sandv′=v-1, otherwise0⩽s′<sand0⩽v′⩽vs′},A2={(j2′,g′,m′)|1⩽j2′⩽i-1,0⩽g′⩽c2,m′=1,2}.The four terms in the recurrence relation have the following meaning.•The first term corresponds to the case in which job i is added to the current last batch, and such batch is regular. According to Property 4(a) of Lemma 1, such batch is not split by other batches, so it contains jobsj1,…,i.In the second term, job i is the first job of a new regular batch. In this case, we must consider all possible states of the firsti-1jobs, in which the last express batch is the same as state(i,j1,j2,s,v,g,m). All these states are described by setA1. Note that ifv=1, the new regular batch is indeed the first being shipped at timets, whereas ifv>1other vehicles have been already planned to depart atts, so we must only consider states of type(i-1,j1′,j2,s,v-1,g,m′)The third term considers the case in which job i is added to the current last batch, and such batch is express. Note that job i andj2are both in such batch, while jobi-1can either be in a regular batch (so that we considerf(i-1,j1,j2,s,v,g-1,1)) or in the same express batch as job i (and hence we considerf(i-1,j1,j2,s,v,g-1,2)). In the former case, the regular batch splits the current last batch.The fourth term is similar to the second. In this term, job i is the first job of a new express batch. This term considers all possible states of the firsti-1jobs, in which the last regular batch is the same as state(i,j1,j2,s,v,g,m). These states are described by setA2.Algorithm EE1 finds an optimal delivery schedule for problem1|fseq,d̃j=Cj+T|V1(V1,c1),V2(∞,c2),ℓ1>ℓ2|1|TCinO(n3((L+V1)2c2+(L+V1)c22))time.There existsO(n3(L+V1)c2)states. In fact, for eachs∈{0,…,L},vcan assumevs+1distinct values. Since∑svs=V1, one hasO(L+V1)possible pairs(s,v). In the recurrence relation, the first and third term requireO(1)time and are applied respectively forO(n3(L+V1)c2)states. The second term requiresO(n(L+V1))time and is applied forO(n2(L+V1)c2)states. The fourth term requiresO(nc2)time and is applied forO(n2(L+V1)c2)states. Therefore, the complexity of algorithm EE1 isOn3(L+V1)2c2+(L+V1)c22.□Note that sinceV1⩽Lnandc2⩽n, this problem is solvable in polynomial time. For the other problems with both transportation modes and an unlimited number of vehicles for express transportation, we can give similar dynamic programming algorithms. The complexity results are shown in the first two rows of Table 1.Let us consider the problem1|fseq,d̃j=Cj+T|V1(V1,c1),V2(V2,c2),ℓ1⩾ℓ2|1|TC, where both the number of vehicles for regular transportation and that of vehicles for express transportation are limited andℓ1⩾ℓ2. According to Property 4(a) of Lemma 1, the jobs of each regular batch are processed consecutively on machineM1. From Property 2 of Lemma 1, each express batch can be only split by regular batches. Since, according to Property 6 of Lemma 1, each express batch departs either at the completion time of the last job in this batch or when a vehicle for express transportation becomes available, the possible departure times for vehicles for express transportation areCj,Cj+ℓ2+ℓ2′,…,Cj+uℓ2+ℓ2′, for someu=0,…,n-jandj=1,…,n. Assuming that there areL′+1distinct candidate departure times, we denote them ast0=0,t1,t2,…,tL′. Note thatL′⩽n(n+1)/2, henceO(n2)(Lee & Chen, 2001). We assume thatV2is fixed. The problem can be solved by a dynamic program which is similar to EE1.Algorithm EE2.State and value functionThe dynamic program considers statef(i,j1,j2,s,v,g,m,s1,…,sV2), where parametersi,j1,j2,s,v,gand m are defined exactly as algorithm EE1 (see Section 4.1.1), and the lastV2express batches depart at timests1,…,tsV2, wheresk∈{0,1,…,L′}fork=1,…,V2and0⩽s1⩽…⩽sV2. We letf(i,j1,j2,s,v,g,m,s1,…,sV2)denote the minimum transportation cost of all schedules in state(i,j1,j2,s,v,g,m,s1,…,sV2).Boundary conditionf(0,0,0,0,0,0,1,0,…,0)=0,f(0,0,0,0,0,0,2,0,…,0)=0.Optimal solution valuemin(j1,j2,s,v,g,m,s1,…,sV2)∈Af(n,j1,j2,s,v,g,m,s1,…,sV2),whereA={(j1,j2,s,v,g,m,s1,…,sV2)|1⩽j1⩽n,1⩽j2⩽n,0⩽s⩽L,0⩽v⩽vs,0⩽g⩽c2,m=1,2,0⩽sk⩽L′,k=1,…,V2}.Recurrence relationConsidering the recurrence relation forf(i,j1,j2,s,v,g,m,s1,…,sV2), we have that this is defined only for values of the indices such that:•i∈{1,…,n},j1∈{1,…,i},j2∈{1,…,i},s∈{0,…,L},v∈{0,…,vs},g∈{0,…,c2},m∈{1,2}.sk∈{0,…,L′},k=1,…,V2,su⩽su+1,u=1,…,V2-1.Ifm=1, thens>0,v>0and:–Ci⩽ts, i.e., job i must be completed before the (regular) batch departs.ts+ℓ1⩽Cj1+T, i.e., the vehicle must arrive inM2within the most restrictive due date of a job in the batch.i-j1+1⩽c1, i.e., the batch size cannot exceed the vehicle capacity.Ifm=2, then–Ci⩽tsV2, i.e., job i must be completed before the (express) batch departs.tsV2+ℓ2⩽Cj2+T, i.e., the vehicle (departing attsV2) must arrive inM2within the most restrictive due date of a job in the batch.0<g⩽c2.Ifi=j2, theng=1since the current last job only consists of job i.If a state does not satisfy all these conditions, we letf(i,j1,j2,s,v,g,m,s1,…,sV2)=+∞. We can now express the recursive relation as:f(i,j1,j2,s,v,g,m,s1,…,sV2)=minf(i-1,j1,j2,s,v,g,m,s1,…,sV2),ifi>j1,m=1minj1′,m′,s′,v′∈A1fi-1,j1′,j2,s′,v′,g,m′,s1,…,sV2+h1,ifi=j1,m=1min{f(i-1,j1,j2,s,v,g-1,1,s1,…,sV2),f(i-1,j1,j2,s,v,g-1,2,s1,…,sV2)}ifi>j2,m=2min(j2′,g′,m′,s1′)∈A2f(i-1,j1,j2′,s,v,g′,m′,s1′,s1,…,sV2-1)+h2,ifi=j2,m=2whereA1={j1′,m′,s′,v′|1⩽j1′⩽i-1,m′=1,2, ifv>1, thens′=sandv′=v-1, otherwise0⩽s′<sand0⩽v′⩽vs′}.A2={j2′,g′,m′,s′|1⩽j2′⩽i-1,0⩽g′⩽c2,m′=1,2,0⩽s1′⩽s1,ts1′+min{1,s1′}∗ℓ2+ℓ2′⩽tsV2}.The four terms in the recurrence relation have the following meaning.•As in EE1, the first term corresponds to the case in which job i is added to the current last batch, and such batch is regular. Due to Property 4(a) of Lemma 1, such batch is not split by other batches, so it contains jobsj1,…,i.Also the second term is very similar to the corresponding term in EE1. Job i is the first job of a new regular batch. In this case, we must consider all possible states of the firsti-1jobs, in which the last express batch is the same as state(i,j1,j2,s,v,g,m,s1,…,sV2). All these states are described by setA1. Ifv=1, the new regular batch is indeed the first being shipped at timets, whereas ifv>1other vehicles have been already planned to depart atts, so we must only consider states of typei-1,j1′,j2,s,v-1,g,m′.The third term considers the case in which job i is added to the current last batch, and such batch is express. Note that job i andj2are both in such batch, while jobi-1can either be in a regular batch (so that we considerf(i-1,j1,j2,s,v,g-1,1,s1,…,sV2)) or in the same express batch as job i (and hence we considerf(i-1,j1,j2,s,v,g-1,2,s1,…,sV2)). In the former case, the regular batch splits the current last batch.The fourth term is similar to the second. In this term, job i is the first job of a new express batch. This term considers all possible states of the firsti-1jobs, in which the last regular batch is the same as state(i,j1,j2,s,v,g,m,s1,…,sV2). These states are described by setA2.Algorithm EE2 finds an optimal delivery schedule for problem1|fseq,d̃j=Cj+T|V1(∞,c1),V2(∞,c2),ℓ1⩾ℓ2|1|TCinO(n2V2+3(L+V1)2c2+n2V2+5(L+V1)c22)time, which is polynomial ifV2is fixed.The proof is similar to that of algorithm EE1.□For the other problems with two transportation modes and limited number of vehicles for express transportation, similar dynamic programming algorithms can be given. The results are shown in Table 1. IfV2is fixed, all of the above problems can be solved in polynomial time. Otherwise, the problems are open.We next consider problem1|fseq,d̃j=Cj+T|V1(V1,c1)|1|TC, which can be seen as a special case of problem1|fseq,d̃j=Cj+T|V1(V1,c1),V2(V2,c2),ℓ1=ℓ2|1|TC(Section 4.1.2), withV2=0. We can give a similar dynamic programming algorithm that runs inO((n(L+V1))2)time. SinceV1⩽Ln, this problem is solvable in polynomial time.Similarly, viewing problem1|fseq,d̃j=Cj+T|V1(∞,c1)|1|TCas a special case of1|fseq,d̃j=Cj+T|V1(∞,c1),V2(V2,c2),ℓ1=ℓ2|1|TCwithV2=0, one can solve it by dynamic programming algorithm in timeO((nL)2). Actually, we can give a greedy algorithm having smaller complexity. Hereafter we assume, together with assumptions in Sections 2 and 4, that jobs and departure times are numbered in increasing order (of completion times and departure times respectively). In fact, for each job i, we lett(i)denote the first departure time after the completion of job i, i.e.:t(i)=min{ts:ts⩾Ci,s=1,…,L}Note that all valuest(i)can be computed inO(n+L), simply scanning the two ordered sets.Algorithm 1Algorithm ECThe algorithm EC greedily scans the jobs in increasing order of completion times, assigning jobs to the current batch as long as no deadline is violated. When the addition of the next job would make the first job late, a new batch is started.The algorithm exploits the fact that there exists an optimal delivery schedule in which no batch is split (Property 3 of Lemma 1). In Algorithm EC, i is the index of the last considered job, j is the index of the last considered batch, P contains the delivery schedule andtBjis the departure time of batchBj.Theorem 3Algorithm EC finds an optimal delivery schedule for problem1|fseq,d̃j=Cj+T|V1(∞,c1)|1|TCin polynomial timeO(n+L).Letϕbe the schedule generated by Algorithm EC, and consider an optimal delivery scheduleB. From Property 3 of Lemma 1, no batch can be split inB. Suppose thatBandϕcoincide up to the firstk-1batches. According to Algorithm EC, one hasDBk(B)⩾DBk(ϕ)and|Bk(ϕ)|⩾|Bk(B)|, whereBk(ϕ)andBk(B)denote the k-th batch inϕandBrespectively,|Bk(ϕ)|denotes the number of jobs in batchBk(ϕ). We distinguish three cases.•|Bk(ϕ)|>|Bk(B)|andDBk(B)=DBk(ϕ). In this case, we add toBk(B)the jobs inBk(ϕ)⧹Bk(B), so that|Bk(ϕ)|=|Bk(B)|without changingDBk(B), which does not increase the transportation cost.|Bk(ϕ)|=|Bk(B)|andDBk(B)>DBk(ϕ). In this case, we anticipateDBk(B), so thatDBk(B)=DBk(ϕ), and this does not increase the transportation cost.|Bk(ϕ)|>|Bk(B)|andDBk(B)>DBk(ϕ). In this case one can perform both previous transformations, to get both|Bk(ϕ)|=|Bk(B)|andDBk(B)=DBk(ϕ), which does not increase the transportation cost.Applying the same rule, we can transform the subsequent batches inBas inϕwithout increasing the transportation cost. So scheduleϕproduced by Algorithm EC is optimal.For each job, Algorithm EC checks (at line 13) whether its addition to the current batch violates any deadline or the batch size. This is done in constant time. Since there are n jobs, lines 3–17 are executed inO(n), and the complexity of Algorithm EC is therefore dominated by the computation of valuest(i), i.e.,O(n+L).□Fig. 2shows an example of the third case in the proof of Theorem 3, whereϕ,B1andB2represent respectively the schedule created by Algorithm EC, the optimal schedule before change and that after change. In this example,DBk(ϕ)=ts+l1is earlier thanDBk(B1)=ts+1+l1.Bk(ϕ)={4,5,6}has 3 jobs whileBk(B1)={4,5}has 2 jobs. This accords with the condition of the third case. After change as the proof, we obtain a new optimal scheduleB2, such thatDBk(B2)=ts+l1andBk(B2)={4,5,6}.Let us now turn to problems in whichV1=0. Again, from Property 3 of Lemma 1, there exists an optimal delivery schedule in which no batch is split.If there is an unlimited number of vehicles, considering that1|fseq,d̃j=Cj+T|V2(∞,c2)|1|TCis as a special case of1|fseq,d̃j=Cj+T|V1(V1,c1),V2(∞,c2),ℓ1=ℓ2|1|TCwithV1=0, one can give a dynamic programming algorithm having complexityO(n2). Indeed, also in this case the problem can be solved more efficiently by a greedy algorithm. Such algorithm is identical to Algorithm EC, except that the departure time of a batch now coincides with the completion time of the last job in the batch, and, of course, there is no need to definet(i). Hence, it suffices replacing the step at lines 12 and 17, “ts=t(i+1)”, with “ts=Ci+1”, and the time complexity is thereforeO(n).Let us now turn to problem with a limited number of vehicles, i.e.,1|fseq,d̃j=Cj+T|V2(V2,c2)|1|TC. Notice that in this case each roundtrip (of lengthℓ2+ℓ2′) corresponds to a batch, and the problem indeed consists of delivering all jobs within their respective deadlines with the minimum number of batches.The complexity of1|fseq,d̃j=Cj+T|V2(V2,c2)|1|TCis open ifV2is not fixed. IfV2is fixed, the problem can be seen as a special case of problem1|fseq,d̃j=Cj+T|V1(V1,c1),V2(V2,c2),ℓ1=ℓ2|1|TCwithV1=0, and hence one can give a similar dynamic programming algorithm that runs inO(n2V2+4)time. In particular, when there is only one vehicle, the complexity of this algorithm isO(n6). Indeed, we next show that in this case the problem can be solved inO(n3)by a different algorithm, that we present in the following.The algorithm is based on the following idea. Since there is a single vehicle, the whole production schedule can be decomposed into contiguous subschedules, each spanning an interval of consecutive jobs. We denote by[i,j]a subschedule containing jobsi,i+1,…,j-1,j. The beginning of the subschedule is marked by the fact that the vehicle departs exactly at the timeCi-1(i.e., at the starting timeSiof job i). A subschedule consists of a number of consecutive roundtrips (i.e., with no idle time in between them), followed by an idle interval for the vehicle (possibly null, if it happens that the vehicle gets back toM1precisely when the last job of the subschedule completes). Each roundtrip corresponds to a batch, and a subschedule may consist of one or more batches. The key observation is that, whenever a new subschedule starts, the subsequent scheduling of the vehicle is independent of the scheduling up to that point. In the following,(u,v)denotes the batch containing jobsu,u+1,…,v-1,v.We introduce some additional notation. For a given time t, letq(t)be the last job completing onM1before or at t. For each job j, let alsok(j)be the highest-indexed job that can still be included in a batch with j. It is computed as follows. Letk̃(j)=argmax{h:Ch⩽d̃j-ℓ2}. In other words, a batch containing j may contain all jobs from j tok̃(j), but cannot extend beyondk̃(j). Since moreover the vehicle has capacityc2, by no means a batch containing j can extend beyond jobk(j)=min{k̃(j),j+c2-1}.Let us consider job 1, and for simplicity let us suppose that the vehicle starts (for a 0-th roundtrip) at time 0 (this hypothesis can be easily removed), so that the first batch departs not sooner thant1=ℓ2+ℓ2′. The first batch may actually include jobs that will complete even after that time. Precisely, at timeℓ2+ℓ2′, either(a)the vehicle will start immediately carrying away the jobs completed until then, or(b)it waits for the rest of the batch to be completed.If case(a)occurs, clearly the first batch is(1,q(t1)), and the first subschedule will include at least another batch. If case(b)occurs, the first batch is one of the following (see Fig. 3):(1)(1,q(t1)+1)(2)(1,q(t1)+2)(3)…(1,k(1))Notice that if we are in case(b), the first subschedule is complete, i.e., in this case the first subschedule only contains one batch.Now suppose we are in case(a), i.e., the vehicle restarts immediately. Then, the first job of the second batch will beq(t1)+1(see Fig. 4). Now again there are two cases, depending if(a′)again the vehicle restarts immediately, or(b′)it is idle until completion of the second batch. If case(a′)occurs, lettingt2=2ℓ2+ℓ2′, clearly the second batch will be(q(t1)+1,q(t2))and the first subschedule will contain at least another batch. If case(b′)occurs, as shown in Fig. 4, the second batch will be one of the following:(4)(q(t1)+1,q(t2)+1)(5)(q(t1)+1,q(t2)+2)(6)…(q(t1)+1,k(q(t1)+1))and the first subschedule would now be complete.The whole reasoning can be repeated several other times, to consider all possibilities for the first subschedule. An important observation is the following. Suppose that the completion time of jobk(1)is larger than2ℓ2+ℓ2′. This means that if the first time (after time 0) the vehicle departs fromM1is at the completion ofk(1), all jobs completed so far can be safely delivered within their due date. So, if the first subschedule spans jobs from 1 tok(1), there is no point in considering two consecutive roundtrips during the first subschedule. In fact, the vehicle would anyway get back toM1before the end ofk(1). This is illustrated in the first depicted case in Fig. 4. This case will never occur in an optimal solution, since it is always dominated by the last case of Fig. 3. On the contrary, it does make sense to consider two consecutive roundtrips if the subschedule extends beyondk(1)(second and third case in Fig. 4). Hence, when enumerating possible subschedules with two roundtrips (i.e., two batches), we will start from[1,k(1)+1]. Such observation allows to efficiently enumerate the possible structures of the first subschedule.Summarizing, one possibility is that the first subschedule includes only one roundtrip, in which case we have the possibilities expressed by (1)–(3) and illustrated in Fig. 3. If the first subschedule contains two roundtrips, we have the possibilities enumerated in (4)–(6) and illustrated in Fig. 4, and so on. By the way, it should be noted that it might simply not be possible to have a second roundtrip in the first subschedule, because the vehicle might arrive too late from the first roundtrip to be back on time for the completion of jobk(q(t1)+1). So, the cases enumerated in (4)–(6) are not always all feasible. Anyhow, in general one has that the vehicle will start again immediately or there will be the idle period, and so on.In practice, if the first batch spans from 1 to a job j, we should only consider the minimum number of roundtrips (batches) that allow the subschedule to extend up to j. Hence, there will be a number of cases which are ’covered’ by a single batch (in Fig. 3, the cases in which the first subschedule is either [1,4], [1,5], [1,6] or [1,7]). Thereafter, there are cases which require two batches (in Fig. 4, the cases in which the first subschedule is either [1,8] or [1,9]), and so on. It is important that for each terminal job of the first subschedule, there is a well-defined number of batches (in Fig. 4, one batch if the last job is 4, 5, 6 or 7, and two batches if it is 8 or 9).As a consequence of what above, we haveO(n)possible subschedules of the type[1,j], for all j fromq(t1)+1onwards (possibly, up to n). The number of consecutive roundtrips corresponding to each value of j can be computed while enumerating all of them with no further computational burden, so that generating all these cases requiresO(n). Now suppose to associate with each of the subschedules considered a node of a graph, labeled with[1,j], and weighted by the minimum number of consecutive roundtrips that make that subschedule feasible. These nodes are obviouslyO(n).The whole discussion can be repeated considering as the starting job of a subschedule a jobp>1, instead of job 1. For each p we generateO(n)nodes, corresponding to subschedules[p,p+1],[p,p+2],…,[p,k(p)]. In conclusion, we generateO(n2)nodes, corresponding to feasible subschedules. Now simply define an arc from each node[i,j]to each node[j+1,h]. Each node hasO(n)successors, and the graph therefore hasO(n3)arcs. We also add a dummy starting node S and a dummy ending nodeS′, and connect S to all nodes[1,j]and all nodes[j,n]toS′. Hence, each path from S toS′corresponds to a delivery schedule, and the weight of the path equals the total number of batches in the schedule. Hence,1|fseq,d̃j=Cj+T|V2(1,c2)|1|TCbecomes finding the path of minimum weight from S toS′. Note that the weights of the nodes can be transferred to outgoing arcs, to obtain an ordinary shortest path problem. Since the graph is acyclic, the following result holds.Theorem 4Problem1|fseq,d̃j=Cj+T|V2(1,c2)|1|TCcan be solved inO(n3).We now address the set of problems in which the 3PP dominates, i.e., it is entitled to determine both a production and a delivery schedule. As discussed in Section 2, in these scenarios the problem can be seen as an IPODS (Integrated production and outbound distribution scheduling) problem, where the jobs are processed on a single machine and the batches are delivered to a single customer, with deadlines depending on the production schedule. We analyze the complexity of the problems in this scenario, denoted by1|no-idle,d̃j=Cj+T|π|1|TC, whereπis the transportation parameter. Since in the literature the deadlines are independent of the production schedule, known complexity results do not in general apply to our problems. After giving some properties, we address the case in which there are only vehicles for express transportation (Section 5.1) and the case in which there are only vehicles for regular transportation (Section 5.2). We will see that most of the cases analyzed are NP-hard.We can prove that the following property holds for these problems with all possible values ofπ.Lemma 2There exists an optimal production–distribution schedule for problem1|no-idle,d̃j=Cj+T|π|1|TCsuch that, if the jobs of batch B are processed consecutively onM1, then the job having longest processing time in the batch is in first position.In a given optimal production–distribution schedule(σ,B), consider a batch B consisting of jobs consecutively processed onM1, and in which the first job, say job j, is not the longest job. Here the batch B can be a regular batch or an express batch. Let k be the longest job in B. Due to feasibility,DB⩽d̃j=Cj(σ)+T. Now consider the new production scheduleσ′obtained by moving k in first position in its batch, and shifting all other jobs forward, without changing the departure time of batch B. Since k is the longest job in B,Ch(σ′)>Ch(σ)for allh≠k. Hence, since the delivery dateDBof the batch has not changed, all these jobs are on time inσ′. The only job which has been moved backward is k. Sincepk>pj, thenCk(σ′)>Cj(σ), and since j was on time inσ,DB⩽Cj(σ)+T<Ck(σ′)+T. In conclusion, alsoσ′is feasible and optimal. By repeatedly applying this argument, one can find a production schedule which respects the property and having the same transportation cost as(σ,B).□In this section we address the case in which only express transportation exists. We show that the complexity of the problem can be fully characterized. We first consider the case with an unlimited number of vehicles (Section 5.1.1), then the case in which there is actually only one vehicle (Section 5.1.2).We next show that the complexity of the problem depends on the capacity of the vehicle. We first show that if each vehicle can carry at least 4 jobs, the problem is difficult. In what follows, we use the following strongly NP-complete problem (Garey & Johnson, 1979):3-partition. Given3nintegersa1,…,a3n, so that∑ai=nW, and such thatW/4<ai<W/2for all i, is it possible to partition them into n triples each summing up to W?Theorem 5The problem1|no-idle,d̃j=Cj+T|V2(∞,c2)|1|TCwherec2⩾4is strongly NP-hard.We reduce 3-partition to our problem. Given an instance of 3-partition, define an instance of1|no-idle,d̃j=Cj+T|V2(∞,c2)|1|TCas follows. There are4njobs, namely n long jobs and3nshort jobs. Short jobs correspond to the integers of 3-partition, sopi=ai,i=1,…,3n. Each long job has processing timeQ≫W. We letT=Q+2W, hence the deadline of a job isCj+T=Cj+(Q+2W). Transportation time isℓ2=Q+W. We want to know whether there exists a production–distribution schedule (σ,B) consisting of n batches that respects all due dates.Suppose that a solutionΣto 3-partition exists. Then we can build a production–distribution schedule(σ,B)for 3PP as follows. We put in each batch one long job, followed by one of the triples ofΣ. Doing so, the total processing time of each batch is exactlyQ+W, and so a long job j which completes atCjwill be delivered exactly atCj+Q+2W, hence on time. Of course, also the three short jobs will be on time. So, the obtained schedule (σ,B) is a solution to 3PP.Now suppose that a solution(σ,B)to 3PP exists, i.e.,(σ,B)consists of n batches and respects all due dates. The following facts concerning(σ,B)hold.Fact 1. Each batch contains exactly one long job. In fact, if in a batch there are two long jobs, the first of them would be certainly delivered late.Fact 2. Each batch contains exactly three short jobs. If not, there is at least one batch with four short jobs, letp̃be their total processing time. From Lemma 2, the long job is the first in the batch, and it would be delivered afterp̃+Q+Wfrom its completion time. SinceW/4<ai,p̃>W. Hence, the long job would be late.Fact 3. The total processing time of the short jobs in each batch equals W. If this is not the case, there would be at least one batch in which the total processing time of the short jobs would exceed W and hence, similarly to Fact 2, the long job in this batch would be delivered beyond its due date.In conclusion, the short jobs in each batch define a triple which constitutes a solution to 3-partition.□Now let us turn to the casec2=3. For the sake of simplicity, we suppose that in a schedule with b batches, there are3b-ndummy jobs with zero processing time, so that we can regard each batch as consisting of exactly three jobs.We can prove that the following properties hold for the problem1|no-idle,d̃j=Cj+T|V2(∞,3)|1|TC. In what follows, we suppose the jobs numbered in the longest precessing time (LPT) order, i.e.,p1⩾…⩾pn.Lemma 3There exists an optimal production–distribution schedule, consisting of b batches, such that the following properties hold:1.The jobs1,…,bare the first jobs in their respective batch.For eachi=0,…,b-1, the jobsb+1+iand3b-iare in the same batch.Property 1: The proof of this property is illustrated by Fig. 5. Consider an optimal schedule(σ,B), and suppose that there is a batch B with a job i such that1⩽i⩽b, and i is not the first job in B. Since there are b batches, there is at least one batch, sayB′, in which the first job has indexj>i. Now swap the jobs i and j among B andB′inB, and update the departure time of each batch by the completion of each batch, hence obtaining a new schedule(σˆ,B^)with the same number of batches. Note that(σˆ,B^)is feasible. In fact, the first job of B is the same in the two schedules, and the difference between the departure time of B and the completion time of the first job of B is smaller inB^, so B is on time in(σˆ,B^). ConcerningB′, the first job is longer in(σˆ,B^)than in(σ,B)byθ=pi-pj, so the difference between the departure time and the completion time of the first job increases byθ. However, the difference between the deadline of the first job and the completion time of the first job increases also byθ, so alsoB′is on time in(σˆ,B^). We can repeat the same argument for each job k such that1⩽k⩽band which is not the first job in its batch, until an optimal schedule respecting Property 1 is obtained.Property 2: Let(σ,B)be an optimal production–distribution schedule which respects the previous Property 1. Suppose thatb+1+iand3b-iare not in the same batch, andb+1+iis the smallest-indexed job which is not in the same batch with3b-i, fori⩽b-1. Let k denote the job in the same batch withb+1+i, andk′the job in the same batch with3b-i. Note thatpb+1+i⩾pk⩾p3b-iandpb+1+i⩾pk′⩾p3b-i. We can exchange job k with job3b-iinB, and update the departure time of each batch by the completion of each batch, without changing the number of batches, hence obtaining a new schedule(σˆ,B^). Again,(σˆ,B^)is feasible. In fact, sincepb+1+i+p3b-i⩽pb+1+i+pk⩽T-ℓ2, the batch containingb+1+iand3b-iis on time. The batch containing k andk′is also on time, sincepk′+pk⩽pb+1+i+pk⩽T-ℓ2. One can repeatedly apply the same argument until a schedule with the same number of batches is obtained that respects Property 2.□According to Lemmas 2 and 3, we propose a greedy algorithm EX1 for the problem1|no-idle,d̃j=Cj+T|V2(∞,3)|1|TC.Theorem 6Algorithm EX1 finds an optimal production–distribution schedule for problem1|no-idle,d̃j=Cj+T|V2(∞,3)|1|TCinO(n2)time.In the algorithm EX1, the first step requiresO(nlogn)time. The second and the fourth step requireO(1)time. The checking action in the third step requiresO(n)time and in the worst case we need to checkO(n)times. The assignment in the third step requiresO(1)time. So the algorithm EX1 finds an optimal schedule for problem1|no-idle,d̃j=Cj+T|(∞,3)|1|TCinO(n2)time.□Algorithm EX1Algorithm EX2We next propose a greedy algorithm EX2 for the problem1|no-idle,d̃j=Cj+T|V2(∞,2)|1|TC. In this case, with a similar proof, the Property 1 of Lemma 3 holds for the problem withc2=2.Theorem 7Algorithm EX2 finds an optimal production–distribution schedule for problem1|no-idle,d̃j=Cj+T|V2(∞,2)|1|TCinO(nlogn)time.In the algorithm EX2, the first step requiresO(nlogn)time. The second step requiresO(n). and the forth step requireO(1)time. The check whetherpb+1⩽T-ℓ2is done in constant time, and in the worst case we need to check itO(n)times. As soon aspb+1⩽T-ℓ2, the computation of the rest of the delivery schedule can be done inO(n). So the algorithm EX2 finds an optimal schedule for problem1|no-idle,d̃j=Cj+T|(∞,2)|1|TCinO(nlogn)time.Finally, forc2=1, the problem1|no-idle,d̃j=Cj+T|V2(∞,1)|1|TC, is trivially solved inO(n)by randomly ordering the jobs onM1, and delivering each job by a different vehicle as soon as it is finished.In Section 5.1.1 we considered only problems in which the 3PP has a sufficiently large number of vehicles for express transportation. Let us now consider the case in which there is only one vehicle which can carry only one job, i.e., problem1|no-idle,d̃j=Cj+T|V2(1,1)|1|TC. In this case, batches correspond indeed to jobs, and each roundtrip of the vehicle concerns the delivery of a single job, i.e. the transportation cost of any feasible solution isTC=h2n. Hence, the only issue is to check whether there exists a feasible production–distribution schedule.A schedule for this problem has a very distinctive structure, in which we call offsetOjthe difference between the departure time of the vehicle that carries away job j (equal toDj-ℓ2) and the completion timeCjof the same job onM1. Note that by definition the offset can never be negative. The offset is zero if a job is already completed onM1before (or exactly at) the time the vehicle is back inM1. It is easy to check that in general, if we let i be the job that immediately precedes j in a schedule:(7)Oj=max{0,Oi-pj+ℓ2+ℓ2′}.Note that ifpj>ℓ2+ℓ2′, then the offset decreases (byℓ2+ℓ2′-pj), while on the contrary, ifpj<ℓ2+ℓ2′, then the offset increases (byℓ2+ℓ2′-pj). No job can be scheduled if the offset becomes larger thanT-ℓ2, so in a feasible schedule all the offset values are below this value.To establish the complexity of the problem, we use the following strongly NP-complete problem (Kellerer, Kotov, Rendl, & Woeginger, 1998):Stock Size Problem (SSP). Given a set I of n nonzero integersa1,…,an, and a positive integer Q such that∑j∈Iaj=Q, is there an orderingσof the n integers such that, denoting byσ(i)the i-th integer in the ordering, for allk=1,…,nit holds(8)0⩽∑i=1kaσ(i)⩽Q?Theorem 8The problem1|no-idle,d̃j=Cj+T|V2(1,1)|1|TCis strongly NP-hard.We reduce SSP to our problem. Given an instance of SSP, we letPandNdenote positive and negative integers in I respectively. We letℓ2=ℓ2′=Q+1andT=2Q+1. For eachai, define a job i having processing timepi=2ℓ2-ai(note thatpi<2ℓ2ifi∈Pandpi>2ℓ2ifi∈N). We callJPandJNthe job sets corresponding toPandNrespectively. Finally, add a dummy job havingp0=ε>0, whereεis very small. Note that a schedule is feasible iff the offset never exceedsT-ℓ2=Q. We want to show that a feasible schedule exists iff a solution to SSP exists.Given a solution to SSP, a feasible schedule can be built as follows. The first job is the dummy job, which has therefore to be carried away. We then sequence the jobs in the same order as in the solution to SSP. Each jobi∈JPincreases the offset byai, while each jobi∈JNdecreases it byai. After the k-th job, the value of the offset is precisely the value∑i=1kaσ(i). From (8), for all k it does not exceed Q, and the sequence is therefore feasible.Now viceversa, suppose that we have a feasible production–distribution schedule(σ,B). First of all, the dummy job is certainly at the beginning of the schedule, and the initial offset isOσ(0)=0. Consider now the n Eq. (7):Oσ(1)=max{0,2ℓ2-pσ(1)}=max{0,aσ(1)}Oσ(2)=max{0,Oσ(1)+2ℓ2-pσ(1)}=max{0,Oσ(1)+aσ(2)}Oσ(3)=max{0,Oσ(2)+2ℓ2-pσ(2)}=max{0,Oσ(2)+aσ(3)}…Oσ(n)=max{0,Oσ(n-1)+2ℓ2-pσ(n-1)}=max{0,Oσ(n-1)+aσ(n)}Suppose thatOσ(i)+aσ(i+1)<0for some i,0⩽i⩽n-1. Summing up all equations, one would get that the final offsetOσ(n)>∑i=1naσ(i)=Q, which would make it impossible to deliverσ(n)within T. This would contradict the feasibility of (σ,B). Hence,Oσ(i)+aσ(i)⩾0for all i. This implies that the vehicle is never idle throughout the schedule. As a consequence, the value of the offset after each job k is given precisely by∑i=1kaσ(i)which never exceeds Q, since(σ,B)is feasible. Hence, (8) is satisfied, i.e., the corresponding sequence of integers is feasible for SSP.□The last problem we consider concerns the cases in which only regular transportation exists. We next show that the problem is difficult, even if the number of vehiclesvsfor each known fixed departure timetsis unlimited.Theorem 9The problem1|no-idle,d̃j=Cj+T|V1(∞,c1)|1|TCis strongly NP-hard, for any value ofc1.Given an instance of 3-partition, define an instance of 3PP’s problem1|no-idle,d̃j=Cj+T|V1(∞,c1)|1|TCas follows. There are4njobs, namely n long jobs and3nshort jobs. The short jobs correspond to the integers of 3-partition, sopi=aifori=1,…,3n. All long jobs have the same processing timeQ≫W. We letT=Q+2w, so the deadline of a job isCj+T=Cj+(Q+2W). There are n fixed departure timesQ+W,2(Q+W),…,n(Q+W). Transportation time isℓ1=Q+W. For different values of capacity, we want to establish whether there is a feasible production–distribution scheduleσwith a number of batches given by n (ifc1⩾4),2n(ifc1=2orc1=3), or4n(ifc1=1).Suppose that a solutionΣto 3-partition exists. Then we can build a production schedule (σ,B) starting with a long job and in which long jobs and triples of small jobs alternate. For what concerns the delivery schedule:•c1⩾4. In this case we define n batches, each consisting of one long job followed by the subsequent triple ofΣ. Doing so, the total processing time of each batch is exactlyQ+W, and each batch departs at its completion time, which is precisely one fixed departure time. Each long job is delivered exactly at its deadline.c1=2orc1=3. In this case we define2nbatches, obtained by splitting in two each batch defined in the previous case. One has therefore that at each fixed departure timei(Q+W),i=1,…,n, two vehicles start, each carrying two jobs (one vehicle will transport the long job and one small job, the other vehicle will transport the other two small jobs). Both batches are on time.c1=1. In this case we simply define one batch for each job, so that at each timei(Q+W), four vehicles depart fromM1.In all cases, the obtained production–distribution schedule is a solution to the 3PP’s problem.Now suppose that a feasible production–distribution schedule to 3PP exists. The following facts concerning the corresponding production schedule(σ,B)hold, for any value of the capacityc1.Fact 1. In(σ,B), exactly one long job is entirely processed between(i-1)(Q+W)andi(Q+W), for1⩽i⩽n. In fact, if a long job starts before somei(Q+W)but ends afteri(Q+W)for some i, it would be certainly delivered late, since it could not depart before(i+1)(Q+W), and therefore the long job should wait more than W before leaving. With no loss of generality, we can therefore suppose that the long job starts exactly ati(Q+W), for0⩽i⩽n-1.Fact 2. In (σ,B), each long job is followed by exactly three short jobs, and the total processing time of these three short jobs equals W. Suppose in fact that there exists a long job followed by a set of short jobs whose total processing time is not W. Then, there exists a long job j followed by short jobs whose total processing time exceeds W. As a consequence of Fact 1, the last of these short jobs, say k, cannot depart in the same batch of the long job j. But the next departure time is too far and job k could not be delivered within its deadline. So, the total processing time of these jobs is W, and sinceW/4<ai<W/2, there are exactly three short jobs after each long job.In conclusion, the short jobs after each long job define a triple which constitutes a solution to 3-partition.□In Theorem 9, we observe that in the instance of the 3PP’s problem for each case we consider the minimum number of vehicles. So this proof applies to the 3PP’s problem with limited number of vehicles for regular transportation. That means the 3PP’s problem with limited number of vehicles for regular transportation is also strongly NP-hard.

@&#CONCLUSIONS@&#
