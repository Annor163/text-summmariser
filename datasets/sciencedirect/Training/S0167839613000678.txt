@&#MAIN-TITLE@&#
A second order geometric method for ray/parametric surface intersection

@&#HIGHLIGHTS@&#
A novel second order method is proposed to compute the intersection between a ray and a parametric surface using the second order approximation.It is a geometric iteration scheme which is less sensitive to initial conditions than Newton–Raphson and Halley methods.It handles cases that Newton–Raphson or Halley method fails to do: inappropriate initial condition, tangential and multiple intersections.

@&#KEYPHRASES@&#
Ray/surface intersection,Curvature,Numerical method,Second order approximation,Newton–Raphson method,Halley method,

@&#ABSTRACT@&#
In this paper, a new method for computing intersection between a ray and a parametric surface is proposed, which finds many applications in computer graphics, robotics and geometric modeling. The method uses the second order derivative of the surface, which can handle inherent problems that Newton–Raphson and Halley methods have such as instability caused by inappropriate initial conditions and tangential intersection. Case examples are presented to demonstrate the capability of the proposed method.

@&#INTRODUCTION@&#
Ray and surface intersection has been an important topic for various applications in computer graphics, robotics and geometric modeling including ray tracing, point classification, collision detection and surface interrogation, where efficient and robust computation of accurate intersection between them is a key issue.The ray and surface intersection problem is formulated as a system of equations, which can be solved in various ways. The analytic solution, however, is hard to obtain in most cases. Therefore, numerical techniques, which are designed to compute approximate solutions with some accuracy, are widely used.The existing numerical solution methods can be categorized with respect to the order of derivatives required for solving the governing equation of the ray and surface intersection: the category of the zeroth order includes those based on subdivision. They use geometric information of the ray and the surface without derivatives. Methods by Fougerolle et al. (2008), Nishita et al. (1990), Rogers (1985), Whitted (1980), Woodward (1989) belong to this category. The convex hull of Bézier representation is used as a surface bound for intersection computation (Nishita et al., 1990; Whitted, 1980; Woodward, 1989). The quasi-interpolating scheme (Rogers, 1985) is considered to approximately represent a surface with a set of polygons for efficient approximate intersection, which can be given as input to an iteration-based root finding method. These algorithms are a global scheme in that they can compute all the intersections in the domain. They are frequently used in order to provide the starting condition for Newton–Raphson based iteration methods. However, they are time consuming since all the algorithms require bound computation and subdivision of the underlying surface, which are expensive operations. Also, the convergence to the solution is slow.The representative algorithm using the first order derivatives of the surface and the ray is Newton–Raphson method. Since it is easy to implement and shows quadratic convergence to a local solution, it has been widely used for various applications from ray tracing to collision detection. Many approaches (Barth et al., 1994; Barth and Sturzlinger, 1993; Fougerolle et al., 2008; Giger, 1989; Joy and Bhetanabhotla, 1986; Lischinski and Gonczarowski, 1990; Sweeney and Bartels, 1986; Toth, 1985; Woodward, 1989) in the literature are based on Newton–Raphson method for computing ray–surface intersection. Despite several advantages that Newton–Raphson method can provide, there are a couple of problems still addressed in the literature. The convergence to the correct solution is not guaranteed when the given initial condition for iteration is inappropriate. Or even the method may crash depending on the initial conditions. Much research has been performed to improve robustness of Newton–Raphson method by using interval arithmetic (Barth and Sturzlinger, 1993; Fougerolle et al., 2008; Giger, 1989) or quasi-Newton method (Toth, 1985). Another limitation of Newton–Raphson method is that it is not able to handle the case when a ray intersects a surface tangentially. In this case, the Jacobian matrix of Newton–Raphson scheme becomes ill-conditioned as the iteration approaches the solution, resulting in unstable behaviors and eventually crashing the computation. However, this limitation is not sufficiently discussed in the previous related studies. Qin et al. (1997) improved the efficiency of Newton–Raphson scheme by introducing the polynomial extrapolation. But, the robustness of Newton–Raphson method is not addressed.As a second order derivative algorithm, Halley method is frequently considered. The basic scheme is similar to Newton–Raphson method. However, by incorporating the second order derivative terms in the iteration, Halley method shows a faster rate of convergence for finding a single isolated root. Multivariate Halley method and its implementation strategy are presented in the paper by Cuyt and Rall (1985). However, this method requires Jacobian matrix in the computation. Therefore, it cannot avoid the issues associated with singular Jacobian matrix that Newton–Raphson method experiences.The objective of this paper is to propose a novel algorithm of computing the ray–surface intersection. The surface is given as a parametric form such as NURBS, which is widely used in computer graphics and CAD. The method can handle cases that Newton–Raphson and Halley methods cannot do at a small amount of additional cost compared to Newton–Raphson or Halley method. The proposed method is a local iterative scheme similar to Newton–Raphson method. However, the proposed method uses the second order approximation which approximates the surface more accurately, making it more robust than Newton–Raphson or Halley method.A rayl(t)in a space is defined asl(t)=O+dt, t⩾ 0, where O is the starting point and d is the direction. Whent<0, it is assumed that the ray is not defined and no intersection is considered for the region.Consider a parametric curvec(s)(0⩽s⩽1), where s is a parameter. At a point on the curve ats=s0, the curve around the point is expressed by the Taylor expansion as follows:(1)c(s)=c(s0)+dcdsΔs+12!d2cds2Δs2+13!d3cds3Δs3+HOT.The shape of the curve in the neighborhood ofc(s0)can be approximated by Eq. (1) while the high order terms (HOT) are ignored. If s is the arc length parameter λ, then(2)c′=dcdλ=t,c″=dtdλ=κn.Here the prime ′ indicates the differentiation with respect to λ, t and n are the unit tangent and normal vectors and κ is the curvature.Given a parametric surfacer(u,v)(0⩽u,v⩽1), a curve on the surface with the arc length parameter λ is given byc(λ)=r(u(λ),v(λ)). Then the local shape of the curve near a point on the curve is represented by using Eq. (1). Note that instead of representing exactc(λ)explicitly, the local shape of the curve can be approximated by taking the terms of the zero, first and second derivatives in Eq. (1), which are computed by using the surface as follows:(3)c′(λ)=ruu′+rvv′,(4)c″(λ)=ruu(u′)2+2ruvu′v′+rvv(v′)2+ruuu″+rvvv″.Here, the subscripts indicate the partial derivatives.Newton–Raphson method can be used to solve a system of multivariate nonlinear equations. Consider a system of equationsF(X)=0,F:Rk→Rk,X∈Rk, where k is a positive integer. Suppose thatX+ΔXis the root of the equations, namelyF(X+ΔX)=0. Using the expression ofF(X+ΔX)by the Taylor expansion around X, the following equation is obtained:(6)F(X+ΔX)=F(X)+J⋅ΔX+HOT,where J is the Jacobian matrix of F and HOT indicates the high order terms. Ignoring HOT, the equation becomes(7)F(X)+J⋅ΔX=0.The amount of updateΔXis computed by(8)ΔX=−J−1⋅F(X).The updated root is given byXnew=Xold+ΔX. This process starts with an initial vector ofX0and is repeated until|ΔX|becomes small. Newton–Raphson method shows the quadratic convergence to an isolated single root. It is, however, a local scheme. So, it is usually employed for computing one solution of interest in the domain of interest.The basic idea of Halley method is to use the second order derivative terms to achieve the cubic convergence for finding a root. For a single isolated root, this method shows the cubic convergence. Consider a system of equationsF(X)=0,F:Rk→Rk,X∈Rk, where k is a positive integer. ThenF=(f1,f2,…,fk)andX=(x1,…,xk). The update for the Halley methodΔXis formulated as:(9)ΔX=Q2Q+12b.Here, Q is the Newton–Raphson update given by(10)Q=−J−1⋅F(X),b is the combination of Q and Hessian matrix H offisuch that(11)b=J−1⋅[QT⊗H]Q.Here,(12)QT⊗H=[QT⋅H(f1)QT⋅H(f2)⋯QT⋅H(fk)],H(fl)=[∂2fl∂xm∂xn](l,m,n=1,…,k).In Eq. (9), the component-wise operations are employed. IfV=(v1,v2,…,vk)andW=(w1,w2,…,wk), thenVW=(v1w1,v2w2,…,vkwk),V2=VVandVW=(v1w1,v2w2,…,vkwk),wl≠0.The updated root isXnew=Xold+ΔX. This process is repeated until|ΔX|is less than a user-defined tolerance.In this section, ray–planar curve intersection is discussed. This problem is introduced in order to provide the basic idea of the proposed method of solving the ray–surface intersection problem.The intersection between a ray and a planar curve is obtained by solving(13)F(s,t)=c(s)−l(t)=0.Here,F(s,t)=(Fx(s,t),Fy(s,t))Tand if either s or t is out of range then they do not intersect. For solving Eq. (13), we consider four methods: Newton–Raphson, Halley, the first order and the second order methods.GivenX=(s,t)T, the amount of update for X, denoted byΔX, is computed by solving Eq. (8). The Jacobian matrix J of F is given by(14)J=[∂Fx∂s∂Fx∂t∂Fy∂s∂Fy∂t].The updatedXnewisXnew=Xold+ΔX. Given the initial vectorX0, the prescribed procedure is performed iteratively until|ΔX|<δ, where δ is the user defined tolerance.GivenX=(s,t)T, two Hessian matrices are obtained to be(15)H(Fx)=[∂2Fx∂s2∂2Fx∂s∂t∂2Fx∂t∂s∂2Fx∂t2],H(Fx)=[∂2Fy∂s2∂2Fy∂s∂t∂2Fy∂t∂s∂2Fy∂t2].Then, b is computed by substituting (15) into (12) and subsequently (11). The amount of update for X,ΔX, is obtained from Eq. (9). Given the initial vectorX0, the prescribed procedure is performed iteratively until|ΔX|<δ, where δ is the user defined tolerance.Consider a pointP=c(s0)onc(s). The first two terms in the right-hand side of Eq. (1) are taken as the approximation ofc(s)near P. The intersection equation between them is given by(16)O+dt=P+dcdsΔs.The root of these equations can be computed analytically since there are two equations and two unknowns and they are linear. Then the parameter value is updated by Δs to yieldsnew=sold+Δs. The iteration begins withs=s0and continues until|Δs|<δ. This process is equivalent to finding the intersection between the ray and the tangent line at P as illustrated in Fig. 1. As the tangential line at P is formulated asTl(σ)=P+tσwith a parameter σ, the intersection betweenTl(σ)andl(t)is computed analytically, yieldingq1as shown in Fig. 1. Subsequently,q1=P+tΔσand Δσ is computed:(17)Δσ=t⋅(q1−P)t⋅t=t⋅(q1−P).Here, an assumption is made thatΔs≈Δσ, which is used as the amount of update for the parameter s. In this method, the local shape of the curve at P is approximated by the tangent lineTl(σ), whereσ=s. The pointq1is treated as approximation to the true intersection.In this method, the first three terms of the approximated expression of Eq. (1) are used to approximate c near the point P, which is illustrated asc2in Fig. 1. Therefore, the intersection equation is formulated as(18)O+dt=P+dcdsΔs+12d2cds2Δs2.Eq. (18) consists of two equations and two unknowns. The unknown t can be eliminated to derive a quadratic equation for Δs. The roots of the equation,Δs1andΔs2, are computed, among which the value which yields a point on the curve closer toO,q2as shown in Fig. 1, is selected. The new parameter value s is then updated by snew=sold+Δs. This process is repeated until|Δs|<δ.Similar to the ray and curve intersection, the ray and parametric surface intersection can be solved by using the four methods: Newton–Raphson, Halley, the first and the second order methods.Given a parametric surfacer(u,v)(0⩽u,v⩽1) and a rayl(t)in 3D space the intersection between them is formulated as:(19)G(u,v,t)=r(u,v)−l(t)=0.The basic approach to solve Eq. (19) is identical to the case of finding intersection between a ray and a planar curve. GivenX=(u,v,t)T, the amount of update for X,ΔX=(Δu,Δv,Δt), is obtained by solving Eq. (8). The Jacobian matrix of G is given by(20)J=[∂Gx∂u∂Gx∂v∂Gx∂t∂Gy∂u∂Gy∂v∂Gy∂t∂Gz∂u∂Gz∂v∂Gz∂t].The updatedXnewis computed byXnew=Xold+ΔX. Starting withX0, the iteration continues until|ΔX|<δ.GivenX=(u,v,t)T, three 3 by 3 Hessian matrices are obtained to beH(Gx),H(Gy)andH(Gz)for u, v and t. As an example,H(Gx)is given by(21)H(Gx)=[∂2Gx∂u2∂2Gx∂u∂v∂2Gx∂u∂t∂2Gx∂v∂u∂2Gx∂v2∂2Gx∂v∂t∂2Gx∂t∂u∂2Gx∂t∂v∂2Gx∂t2].Using the Hessian matrices,ΔXis obtained by Eq. (9). The updatedXnewis then computed by usingXnew=Xold+ΔX. Starting withX0, the iteration continues until|ΔX|<δ.Consider a point P on the surface. Then the tangent plane at P is given by(XT−P)⋅N=0, whereXT=(x,y,z)Tand N is the unit surface normal vector at P:(22)N=ru×rv|ru×rv|.The intersection between the ray and the tangent plane is computed by plugging the ray equation into the tangent plane equations, yielding the value of t as follows:(23)t=(P−O)⋅Nd⋅N.Substituting Eq. (23) into the ray equation generates the intersection point q. The update values for u and v are computed by solving the following equations.(24)(q−P)⋅ru=ru⋅ruΔu+rv⋅ruΔv,(q−P)⋅rv=ru⋅rvΔu+rv⋅rvΔv.Then the new parameter values for u and v areunew=uold+Δuandvnew=vold+Δv. This process continues until(|Δu|2+|Δv|2)1/2<δis satisfied.Given a point P and a ray, a plane containing them can be created as illustrated in Fig. 2. Then the intersection of the generated plane and the surface produces a curve c, which indicated as a dotted curve in Fig. 2. Since the intersection curve is on the plane, it becomes a planar curve and subsequently the intersection point between the ray and the surface should lie on the intersection curve c. So, the same method developed for the ray and 2D planar curve intersection case is directly applicable for this problem.The curve c is a curve on the surfacerB. Therefore, it is obvious thatc(λ)=rB(u(λ),v(λ))as explained in Section 2.1. Here, λ is the arc length of c. There are two ways to construct c. One method is to find the functionsu(λ)andv(λ), which would be a curve in theu–vparametric space. The other way is to directly constructc(λ)in 3D space. In this work, the latter approach is taken since it is computationally simple and more importantly consistent with the proposed method. The shape of c in the neighborhood ofP=c(0)is represented by using the Taylor expansion:(25)c(λ)=c(0)+c′Δλ+12c″Δλ2+HOT.Therefore, by specifying the coefficients of each term, the curve c can be explicitly constructed. In the proposed method, the exact shape of the intersection curve is not necessary. Instead, an approximate to the second order is considered as presented in Section 3.4. Therefore, the first three terms are taken from the right-hand side of Eq. (25) to approximate the curve c:(26)c(λ)≈P+Δλt+κ2Δλ2n,where t and n are the tangent and the normal vectors of the intersection curve c at P using Eq. (2), respectively. The tangent vector t is computed as(27)t=NA×NB|NA×NB|whereNAandNBare the unit normal vectors of the plane A and the surfacerBat P, which are computed by(28)NA=(P−O)×d|(P−O)×d|,NB=rBu×rBv|rBu×rBv|.Since t is the unit tangent vector of the intersection curve c that lies on the surfacerB, we have(29)t=rBuu′+rBvv′.The normal curvature κ and the normal vector n of the intersection curve is (Patrikalakis and Maekawa, 2002)(30)κn=κB(1−cos2θ)(−cosθNA+NB).Here,cosθ=NA⋅NBandκBis the normal curvature of the surface at P in the direction of t, which is obtained by projecting Eq. (30) onto the surface unit normalNB. Using the second fundamental form forrB,(31)κB=L(u′)2+2Mu′v′+N(v′)2,where L, M, and N are the second fundamental form coefficients ofrB:L=rBuu⋅NB,M=rBuv⋅NB,N=rBvv⋅NB.By taking the dot product on both sides of (29) withrBuandrBvandc′=t, we have(32)t⋅rBu=rBu⋅rBuu′+rBv⋅rBuv′,t⋅rBv=rBu⋅rBvu′+rBv⋅rBvv′.Solving Eq. (32) yieldsu′andv′.The intersection between the ray and the approximated intersection curve given by Eq. (26) is(33)P+Δλt+κ2Δλ2n=O+dt.The dot products of Eq. (33) with t and n yield two equations:(34)Δλ−d⋅tt=(O−P)⋅t,(35)κ2Δλ2−d⋅nt=(O−P)⋅n.After eliminating t, a quadratic equation of Δλ is obtained, which hasΔλ1andΔλ2as solutions in general. This means that there exist at most two intersection points,q1andq2, among which the one closer to O is selected as an approximated intersection point. For the selection of points, a plane passing the center point of the two candidates,qmid=(q1+q2)/2.0, and perpendicular to the ray direction d is computed, which subdivides the space into two parts. Then, the candidate point, which is in the same space as O, is selected as q. Given q and the corresponding Δλ, the increments to both u and v directions are obtained fromΔu=u′ΔλandΔv=v′Δλand the new parameter values for u and v are updated asunew=uold+Δuandvnew=vold+Δv. This process continues until the convergence criterion(|Δu|2+|Δv|2)1/2<δis satisfied. If the updatedunewandvneware out of the parametric range, then the estimated values in the parametric domain calculated from the line segment connecting (uold,vold) and (unew,vnew) are computed and used instead.

@&#CONCLUSIONS@&#
In this paper, the second order geometric iteration algorithm for computing the intersection between a ray and a parametric surface is proposed. The proposed one uses the second order terms which provide better approximation to the local shape of the surface. Although the proposed method does not guarantee that it always converge to the correct solution, it can handle broader cases for ray–surface intersection than Newton–Raphson or Halley method, resulting in improved overall performance in the ray vs. parametric surface intersection.The proposed method takes more time than Newton–Raphson or Halley method for convergence. This performance drawback, however, can be offset by the robustness of the proposed method. The cases that Newton–Raphson or Halley method fails to converge may require ways totally different from Newton–Raphson scheme to handle, making its algorithm more complicated and expensive. Therefore, the proposed method is advantageous for those applications that require robust computation of intersection between a ray and a surface.