@&#MAIN-TITLE@&#
Minimizing worst-case regret of makespan on a single machine with uncertain processing and setup times

@&#HIGHLIGHTS@&#
Address the robust single machine scheduling with uncertain job data.Represent uncertain processing times and setup times using intervals.Minimize the absolute deviation from the optimal makespan in worst case scenario.Reformulate the problem as a robust traveling salesman problem.Propose a local search-based heuristic to solve the reformulated problem.

@&#KEYPHRASES@&#
Single machine scheduling,Sequence-dependent setup times,Uncertainty modeling,

@&#ABSTRACT@&#
This research addresses a single machine scheduling problem with uncertain processing times and sequence-dependent setup times represented by intervals. Our objective is to obtain a robust schedule with the minimum absolute deviation from the optimal makespan in the worst-case scenario. The problem is reformulated as a robust traveling salesman problem (RTSP), whereby a property is utilized to efficiently identify worst-case scenarios. A local search-based heuristic that incorporates this property is proposed to solve the RTSP, along with a simulated annealing-based implementation. The effectiveness and efficiency of the proposed heuristic are compared to those of an exact solution method in the literature.

@&#INTRODUCTION@&#
Uncertainty is a very practical concern for scheduling in various manufacturing and service industries, because many of the parameters associated with scheduling are often subject to unexpected deviations that prevent the execution of schedules exactly as they are developed. For instance, incomplete/inaccurate job information or unexpected/unavoidable stochastic variability in raw material availability and resource reliability gives rise to uncertainty which inevitably leads to infeasibilities and production/service disturbances. This research concerns scheduling jobs on a single machine with uncertain job processing times and sequence-dependent setup times (SDSTs).To deal with uncertain job data in scheduling problems, a number of previous studies have developed different methods to generate robust schedules that minimize impacts of data uncertainty on production performances [1,2]. Stochastic programming (SP) [3] is among the classical approaches to tackle job data uncertainty in single machine scheduling problems. SP techniques assume the variations of job attributes (e.g., processing times, release data, and due dates) follow given distributions; actual values are realized only after a scheduling decision has been made. Since the outcome of a scheduling decision depends on the specific realization of uncertain job parameters, SP models typically aim at optimizing expected (or average) system performance, such as flow time [4], weighted number of early and tardy jobs [5], maximum lateness [6], and number of tardy jobs [7].In the cases when exact probability distributions of random job data are not available (thus SP techniques cannot be applied), an interval representation of uncertain processing times and SDSTs may be more appropriate. For example, in the production line for a new electronic product where jobs are processed for the first time, not much information about the probability distribution of processing and setup times is available. Nevertheless, lower and upper bounds of processing times and SDSTs could be (relatively) easily estimated based on past experiences from similar products and should be utilized in developing production schedules. Lai et al. [8] and Lai and Sotskov [9] dealt with the scheduling problem with interval or bounded processing times. Some other researchers focused on flowshop [10], jobshop [11], and parallel machine [12] scheduling problems with interval processing times and setup times. Although a number of studies addressed flowshop and jobshop scheduling problems with bounded processing times and setup times, the single machine scheduling problem with interval-represented processing time and SDSTs received very little attention.Robust optimization (RO) is another class of approaches of dealing with single machine scheduling with uncertain job data [13,14]. This class of approaches uses continuous intervals or ranges to represent uncertain job data and aims to optimize worst-case scheduling performances. Daniels and Kouvelis [15] generated robust schedules on a single machine with interval job processing times. Their objective was to minimize the absolute deviation from the optimal total flow time in the worst-case scenario. They developed a branch-and-bound exact algorithm and two surrogate relaxation heuristics to find robust schedules. Yang and Yu [16] addressed the same problem as Daniels and Kouvelis [15] but with a discrete, finite set of processing time scenarios rather than interval data. Kasperski [17] considered uncertain due dates and processing times in a single machine scheduling problem with precedence constraints. The uncertainty was described by interval data and the performance measure is maximum lateness. The author developed a polynomial time algorithm for constructing robust schedules with a minimum worst-case scenario deviation. RO has also been applied to solve other combinatorial optimization problems with uncertain data. For instance, robust shortest path problems have received significant attention from a number of researchers, such as Yu and Yang [18], Karasan et al. [19], Montemanni et al. [20], and Lu et al. [21]. Sungur et al. [22] proposed a robust optimization model for the capacitated vehicle routing problem with demand uncertainty. Averbakh and Berman [23,24] presented algorithms for the robust p-center problem on a network with uncertain demand.The research presented in this paper adopts the robustness approach to solve the single machine scheduling problem (SMSP) with both job processing times and SDSTs represented by interval data. The objective is to obtain a robust job sequence with minimum worst-case absolute deviation of the makespan from an optimal solution. We reformulate the robust single machine scheduling problem (RSMSP) as a robust (asymmetric) traveling salesman problem (RTSP) whereby a useful property can be utilized to determine a worst-case scenario among a possibly infinite number of scenarios. Because the RTSP problem is NP-hard [14], in order to obtain acceptable solutions within a reasonable time for problem instances with practical sizes, a generic algorithmic framework is presented, together with a specific implementation based on SA. Numerical experiments are conducted to demonstrate the effectiveness and efficiency of the SA-based heuristic, to examine the tradeoff between robustness and optimality, and to explore the impact of varying degrees of data uncertainty on the selected performance measures.The rest of this paper is structured as follows. In Section 2, following the definition of the RSMSP with uncertain processing times and SDSTs, the reformulation of the RSMSP as the RTSP is presented. Then, in Section 3, the proposed SA-based heuristic for solving the RTSP is described. Numerical experiments and results are reported in Section 4. Finally, Section 5 presents concluding remarks with some recommendations for future research.Given a set N={1, 2, …, n} of jobs that require to be processed on a single machine, the RSMSP aims to obtain a sequence of the N jobs with minimum absolute deviation from optimal makespan in a worst-case scenario. The nominal processing time of each job j is pj(j=1, 2, …, n), and all jobs are available for processing at the beginning (i.e., time zero) of the planning horizon. The nominal SDST between jobs j and k is denoted as sjk(j, k=1, 2, …, n, and j≠k), where sjk≠skj. Note that s0j, ∀j, represents the required setup time when job j is placed in the first position of a sequence.The uncertainty of processing times and SDSTs is described using intervals or ranges. Specifically, each job j is associated with an interval [plj, puj], 0<plj≤puj, to represent the uncertainty of its processing time. In addition, an interval [sljk, sujk], 0<sljk≤sujk, is used to capture the uncertainty of the SDST between two adjacent jobs j and k. Let pj(r) denote the processing time of job j and sjk(r) the SDST between two jobs j and k in scenario r. Let R be the set of possible scenarios. A scenario r∈R denotes a realization of the job processing times and SDSTs, with pj(r)∈[plj, puj] ∀j and sjk(r)∈[sljk, sujk] ∀j, k, and j≠k. Let C(τ, r) denote the makespan of sequence τ under scenario r. The deviation between the makespan of sequence τ and that of optimal sequence τ*(r) in scenario r is defined as follows:(1)CDev(τ,r)=C(τ,r)−C(τ*(r),r),The robustness cost of τ is defined as its maximum deviation among all possible scenarios:(2)RCost(τ)=maxr∈RCDev(τ,r)The RSMSP intends to find the robust sequence τrobustwhich has the smallest (among all possible sequences) maximum (among all possible scenarios) absolute deviation; that is(3)RCost(τrobust)=minτ∈ΩRCost(τ)=minτ∈Ωmaxr∈RCDev(τ,r),where Ω is the set of feasible sequences. In this definition, the robust sequence can be considered as a sequence that should guarantee reasonably good performance (compared to the optimal solution) under a set of realizations of job processing times and SDSTs.Based on the above definitions, the RSMSP under consideration can be represented using the classical three-field notation scheme, developed by Graham et al. [25], as (α|β|γ)=(1|STsd, pj∈[plj, puj], sjk∈[sljk, sujk]|RCost), where two sub-fields (pj∈[plj, puj], sjk∈[sljk, sujk]) are introduced in the β field and the objective function RCost in the γ field.It was shown that, for a given scenario r, the single machine scheduling problem with SDSTs and the objective of minimizing the makespan can be reformulated as an asymmetric TSP by introducing a dummy job 0 representing the depot of a vehicle [26]. Let G=(N, A) be a connected graph. N is the set consisting of depot node 0 and n customer nodes, each of which corresponds to a job in the single machine scheduling problem. A is the set of arcs (j, k) connecting nodes j and k, ∀j, k ∈N and j≠k. An arc (j, k) denotes that node j is visited immediately before node k (i.e., job j is scheduled immediately before job k). The arc distance matrix of the corresponding TSP in scenario r is given by D(r)={djk(r), j, k=0, …, n}, where djk(r) is the distance between nodes j and k, which equals the sum of the setup time between jobs j and k and the processing time of job k; that is, djk(r)=sjk(r)+pk(r). Because pk(r)∈[plk, puk] and sjk(r)∈[sljk, sujk], the uncertain link distance djk(r) is in the range [dljk, dujk], where dljk=sljk+plk, dujk=sujk+puk, 0<dljk≤dujk. Note that djk(r)=0, if k=0 (the depot).The TSP considers all the jobs as the nodes to be visited and intends to find a Hamiltonian tour (a sequence) with the minimal distance (the makespan) for the vehicle that departs from the depot (job 0), services the n nodes (jobs) exactly once, and returns to the depot. Let Ω be the set of feasible TSP tours of the TSP, and τ be a feasible tour (τ∈Ω). Let Z(τ, r) denote the distance of tour τ in scenario r. The robust deviation of tour τ in scenario r is defined as the difference between the distance of tour τ and that of the optimal tour τ*(r):(4)ZDev(τ,r)=Z(τ,r)−Z(τ*(r),r).The robustness cost of a tour τ is its maximum robust deviation among all possible scenarios:(5)RCost(τ)=maxr∈RZDev(τ,r)The RTSP aims to find the robust tour τ* which minimizes (among all possible paths) the worst-case deviation (among all possible scenarios); specifically,(6)τrobust=argminτ∈ΩRCost(τ)=argminτ∈Ωmaxr∈RZDev(τ,r).Since the RTSP is NP-hard [14], in order to obtain acceptable solutions within a reasonable time for problem instances with practical sizes, we propose a generic heuristic framework based on local search as follows:Step 1:Initialization1.1.Generate randomly the initial tour τ0; τ=τ0.Evaluate the robustness cost of τ, RCost(τ).Local search2.1.Generate a new tour, τnew, from the neighborhood of τ, N(τ).Evaluate the robustness cost of τnew, RCost(τnew).Solution acceptance or rejection3.1.If the rule of solution acceptance is satisfied, then τ=τnew.Otherwise, decline the new tour τnew.Convergence check4.1.If convergence criteria are satisfied, then stop.Otherwise, go to Step 2.In Step 2.1 of the above algorithmic framework, the neighborhood of τ, N(τ), typically contains more than one elements, and the choice of which one to move is decided only based on the robustness cost of a new solution (i.e., local information of the current solution). When no improving mechanisms are designed for the search of the neighborhood, local search may be stuck at local optima. This local-optima problem can be remedied by applying, for instance, restarts with different initial solutions, or more sophisticated schemes based on iterations (e.g., iterated greedy) or memory-less stochastic modifications (e.g., simulated annealing) in Step 3.2 of the above framework.One of the major difficulties in solving the RTSP is the identification of the worst-case scenario for evaluating the robustness cost of a tour τ over all possible scenarios in R (i.e., Step 2.2 of the heuristic framework). This is particularly troublesome when the uncertain data set R is represented using (continuous) intervals (because this representation implies an infinite number of scenarios). To deal with this difficulty, a useful property is derived to facilitate determining the worst-case scenario of a given tour τ. This property, described in the following theorem, indicates that even when arc costs are specified as independent ranges, attention can be restricted to an appropriately selected, finite set of discrete scenarios in evaluating the robustness cost of a tour τ.Theorem 1If a scenario r0 induced by a tour τ∈Ω has the largest possible distances on the arcs of τ and the smallest possible distances on remaining arcs (that is djk(r0)=dujk, ∀(j, k)∈τ and djk(r0)=dljk, ∀(j, k)∉τ), then this scenario is the worst-case scenario (denoted by wcr), which produces the largest (robust) deviation (i.e., the robustness cost) for τ.Because r0 possesses the properties as stated in the theorem, for any other (non-worst-case) scenario r, djk(r0)≥djk(r), ∀(j, k)∈τ\τ*(r) and djk(r0)≤djk(r), ∀(j, k)∈τ*(r)\τ. According to the definition of robust deviation in Eq. (4):(7)ZDev(τ,r)=Z(τ,r)−Z(τ*(r),r)=Σ(j,k)∈τdjk(r)−Σ(j,k)∈τ*(r)djk(r)=Σ(j,k)∈τ\τ*(r)djk(r)−Σ(j,k)∈τ\τ*(r)djk(r)≤Σ(j,k)∈τ\τ*(r)djk(r0)−Σ(j,k)∈τ\τ*(r)djk(r0).In addition, it can be observed that(8)Σ(j,k)∈τ\τ*(r)djk(r0)=Σ(j,k)∈τdjk(r0)−Σ(j,k)∈τ∩τ*(r)djk(r0)Then,(9)Zdev(τ,r)≤Σ(j,k)∈τdjk(r0)−[Σ(j,k)∈τ∩τ*(r)djk(r0)+Σ(j,k)∈τ\τ*(r)djk(r0)]=Z(τ,r0)−Z(τ*(r),r0)≤Z(τ,r0)−Z(τ*(r0),r0)=ZDev(τ,r0).Thus, we know that r0 is the worst-case scenario wcr for τ. This completes the proof.□The following example illustrates how to evaluate the robustness cost of a given solution τ. Consider a RSMSP with n=4 jobs. The interval processing times ([plj, puj], j=1, …, 4) and SDSTs ([sljk, sujk], j, k=0, …, 4, j≠k) are given in Table 1and Table 2, respectively. The RSMSP can be reformulated as the RTSP and the interval distances ([dljk, dujk], j, k=0, …, 4, j≠k) are shown in Table 3, where dljk=sljk+plkand dujk=sujk+puk, according to the description in Section 2.2.Given a feasible TSP tour (or job sequence) τ=(0, 1, 4, 3, 2). The worst-case scenario (wcr) for τ is obtained using Theorem 1, and is given in Table 4. The distances of the four arcs (bold numbers in Table 4) used in the tour τ are assigned as the upper bounds of the corresponding intervals shown in Table 3, while the distances of the other arcs are assigned as the lower bounds of their intervals. Summing up the distances of the used arcs, we can obtain that the worst-case tour length for τ, Z(τ, wcr)=149. Since there are only four nodes, it is easy to find that the best tour in the scenario is τ*(wcr)=(0, 4, 1, 2, 3) and Z(τ*(wcr), wcr)=125. Then, the robustness cost of τ, RCost(τ)=149−125=24.This research presents a specific implementation of the generic heuristic framework based on simulated annealing (SA), which is capable of escaping from being trapped into a local optimum by accepting, in small probability, worse solutions during its iterations. It has been applied successfully to a wide variety of highly complicated combinatorial optimization problems [27,28].Given the input of jobs information (processing times and SDSTs) and parameters: T0, Itemax, Nummax, TimeLimitand β, the proposed SA-based heuristic starts by generating an initial solution τ0 and initializing the current temperature Temp as initial temperature T0, the number of iterations Ite, the current solution τ, and its objective value (i.e., the robustness cost) RCost(τ). In each iteration, firstly a new solution τnew is generated by randomly selecting two jobs and swapping their positions in the current solution τ. Let ΔE=RCost(τnew)−RCost(τ). If ΔE≤0, then the current solution τ is replaced by the new solution τnew; otherwise, the probability of replacing τ with τnew is Temp/(Temp2+ΔE2). This is done by generating a random number, rand, from a uniform distribution U(0, 1) and replacing τ with τnew if rand<(Temp/(Temp2+ΔE2)). The current temperature Temp is decreased after running Itemax iterations from the previous decrease, according to the formula Temp=Temp×β, where 0<β<1. If the incumbent solution τ is not improved within Nummax successive reductions in temperature or the computational time exceeds TimeLimit, the algorithm is terminated. Upon termination, the optimal or near-optimal solution is τ with robustness cost RCost(τ). The pseudo-code of the SA-based heuristic is presented as follows:SA(T0, Itemax, Nummax, TimeLimit, β)BeginGenerate the initial solution τ0;Initialize τ=τ0; Temp=T0; Ite=0; Num=0; τbest=τ; RCost*=RCost(τ);While (Num<Nummax and computational time<TimeLimit) {Ite=Ite+1;Generate τnew by randomly choosing two jobs in τ and swapping their positions;Determine the (induced) worst-case scenario, wcr, of τnew based on Theorem 1;Apply the LKH (Lin-Kernighan heuristic) method [29] to obtain the optimal tour length Z(τ*(wcr), wcr) in the worst-case scenario wcr;Compute the robustness cost: RCost(τnew)=Z(τnew, wcr)−Z(τ*(wcr), wcr);ΔE=RCost(τnew)−RCost(τ);If (ΔE≤0) τ=τnew;Else {Generate a random number rand∼U(0, 1);If (rand<(Temp/(Temp2+ΔE2))) τ=τnew;}If (RCost(τ)<RCost*) {τbest=τ; RCost*=RCost(τ); Num=0;}If (Ite=Itemax) {Temp=Temp×β; Ite=0; Num=Num+1;}}End.

@&#CONCLUSIONS@&#
