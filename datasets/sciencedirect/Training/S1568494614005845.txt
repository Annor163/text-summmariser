@&#MAIN-TITLE@&#
Minimizing makespan for flow shop scheduling problem with intermediate buffers by using hybrid approach of artificial immune system

@&#HIGHLIGHTS@&#
Permutation flow shop scheduling problem with intermediate buffer is presented.Minimization of Makespan is considered as objective functions.Three new meta-heuristics are presented.Hybrid artificial immune system and artificial immune system are proposed.

@&#KEYPHRASES@&#
Flow shop scheduling problem,Limited buffers,Artificial immune system,Iterated greedy algorithm,

@&#ABSTRACT@&#
In this study, three new meta-heuristic algorithms artificial immune system (AIS), iterated greedy algorithm (IG) and a hybrid approach of artificial immune system (AIS-IG) are proposed to minimize maximum completion time (makespan) for the permutation flow shop scheduling problem with the limited buffers between consecutive machines. As known, this category of scheduling problem has wide application in the manufacturing and has attracted much attention in academic fields. Different from basic artificial immune systems, the proposed AIS-IG algorithm is combined with destruction and construction phases of iterated greedy algorithm to improve the local search ability. The performances of these three approaches were evaluated over Taillard, Carlier and Reeves benchmark problems. It is shown that the AIS-IG and AIS algorithms not only generate better solutions than all of the well-known meta heuristic approaches but also can maintain their quality for large scale problems.

@&#INTRODUCTION@&#
Scheduling is one of the most important concerns in operation research. As a typical manufacturing and scheduling problem with strong industrial background, flow shop scheduling has appealed wide attention both in academic and engineering fields [1].Flow shop scheduling problem consists in scheduling some independent jobs on the some consecutive machines. If the jobs have same sequence on all machines, the problem is called permutation flow shop scheduling problem and if the processing sequence on each machine can be altered, the problem is called non-permutation flow shop.A special case of flow shop scheduling problem is existence of buffer between consecutive machines, capacity of buffers can be finite or infinite (depend on the size of semi-manufactured). When the capacity of buffers is zero, the problem is called blocking flow shop; in this case, when the next machine is busy the job is blocked on the current machine. But in general cases capacity of buffers are finite. In this situation while next machine is busy, jobs will be pasted to buffers.For determining the computational complexity of the flow shop with intermediate buffers, Papadimitriou and Kanellakis [2] proved that it is NP-hard even only for two machines. Therefore, in practice, using approximation methods near optimal solutions can be obtained taking reasonable time.Currently, the approximation algorithms for solving flow shop problems can be classified into two categories: heuristic methods and meta-heuristic methods.As samples of heuristic methods we can cite Ronconi [3] where the authors presented three constructive heuristics called minmax (MM), combination of MM and NEH (MME), and combination of permutation flow shop and NEH (PFE), for the blocking flow shop problem. Leisten [4] proposed that some priority-based heuristics for both the permutation and general flow shop problems with intermediate buffers.Recently, extensive computational requirements of flow shop problems have resulted in numerous attempts to develop efficient heuristics, leading to a significant interest in meta-heuristics [5]. As examples, Norman [6] proposed the Tabu Search (TS) algorithm for flow shop scheduling Problems with sequence dependent setup time and finite buffers restrictions. Smutnicki [7] also proposed different TS approach for two machines flow shop environment with limited buffers. Nowicki [8] developed Smutnicki's idea with more than two machines. Later, Brucker et al. [9] applied Nowicki's approach for solving non-permutation flow shop with limited buffers. Recently, Hsieh et al. [10] proposed an artificial immune system approach for the same problem and this algorithm obtained very good solutions.Many researchers have concluded that hybrid approaches for scheduling problems could end up with high quality results [11–13]. As examples of hybrid meta-heuristics for the proposed problem, Wang et al. [14] developed a hybrid genetic algorithm (HGA) for the general flow shop scheduling problem with limited buffers to minimize the makespan. Liu et al. [15] proposed a hybrid particle swarm optimization (HPSO) algorithm for this problem. Pan et al. [16] applied discrete differential evolution (P-DDE) for flow shop with finite capacity of buffers and after that developed P-DDE algorithm and proposed hybrid discrete differential evolution (HDDE) [1] algorithm for the same problem. Pan et al. [17] used New Harmony Search (CHS) approach for solving intermediate buffers constraints in flow shop problem.The artificial immune system algorithm (AIS) is one of the newest nature-inspired algorithms which is created based on the pattern taken from the body immune system for recognizing invader factors and eliminating them. In comparison to the other meta-heuristics in the literature, the AIS algorithm has fewer complexity and mathematical requirements and due to discrete nature, can be easily used for solving various kinds of scheduling problems. As samples of AIS algorithm applications in various scheduling problems, Ying [18] studied multistage hybrid flow shop problem and solved it by hybrid AIS. Zandieh et al. [19] also proposed hybrid approach of AIS for hybrid flow shop environment with sequence dependent setup time constraint. Naderi [20] implemented hybrid AIS for Realistic variant of job shops with makespan criteria. Liu, Huang, and Chang [21] applied AIS algorithm for solving grid scheduling problems. Chen, Chang and Lin [22] proposed an AIS algorithm with T-cells and B-cells for solving permutation flow shop problems.AIS algorithm also has wide use in other science category. For example, Kephart [23] studied on computer viruses and applied a control way for them by artificial immune system.Among the modern meta-heuristic-based algorithms, the AIS algorithm and simulated annealing (SA) algorithm have emerged as highly effective and efficient algorithmic approaches to NP-hard combinatorial optimization problems [24–26]. The iterated greedy (IG) algorithm is one of the simplest local search methods which in terms of concept and performance is similar to SA algorithm. The IG has two central phases: destruction and construction. The IG starts with an initial solution and generates a new solution by using the destruction and construction steps. The IG has been successfully applied to different variant of scheduling problems. Pan [27] proposed an improved IG algorithm for no-wait flow shop. Ying [5] applied IG with the NEH heuristic approach for non-permutation flow shop. Fanjul-Peyro and Ruiz [28] coined IG algorithm as a local search mechanism and proposed it for unrelated parallel machines scheduling problem.In this study, three meta-heuristic approaches AIS, IG and a hybrid approach of artificial immune system (AIS-IG) algorithm by combining clonal selection of artificial immune system and destruction and construction phases of iterated greedy algorithm for solving the permutation flow shop scheduling problem with limited buffers are presented. Experimental results and comparisons show that the proposed AIS-IG algorithm is effectiveness approach for solving the flow shop scheduling problem with finite buffers for makespan criterion.The reminder of this paper is organized as follows. Definition of problem and mathematical model are presented in section 2, section 3 deals with the proposed AIS-IG algorithm. The computational results are provided in Section 4 and the conclusions are presented in Section 5.The permutation flow shop problem considered in this study can be defined as follow. There are n independent jobs (i=1…n) that should be processed on m machines (k=1…m) and Bkis intermediate buffer between two consecutive machines. The order of machines is given and the jobs are processed on m machines in the same sequence. Processing time of job i on machine k is shown by pik. When a particular type of machine is busy, the incoming parts will be moved to next machine, buffer (if the buffer is not full) or will be blocked on the same machine. The following assumptions are considered:•The setup times are included in the processing times.All jobs are available at time zero and there is no precedence constraint.At any time, each machine can processes at most one job and each job can be processed only one machine.The number of jobs and their processing times on each machine are given.For describing the mathematical model let a job permutation π={π(1),π(2),…,π(n)} represents the sequence of jobs to be processed, and dπ(i),kbe the departure time of operation oπ(i),kfrom machine k which will be calculated by following relations proposed by Pan et al. [1]:(1)dπ(1),1=pπ(1),1(2)dπ(1),k=pπ(1),k−1+pπ(1),kk=1,…,m(3)dπ(i),1=dπ(i−1),1+pπ(i),1i=1,…,B1+1(4)dπ(i),k=max(dπ(i−1),k,dπ(i),k−1)+pπ(i),ki=2,…,B1+1k=2,…,m−1(5)dπ(i),1=max(dπ(i−1),1+pπ(i),k,dπ(i−B1−1),2i>B1+1(6)dπ(i),k=max(max(dπ(i−1),k,dπ(i),k−1)+pπ(i),k,dπ(i−Bk−1),k+1)i>Bk+1k=2,…,m−1(7)dπ(i),m=max(dπ(i−1),m,dπ(i),m−1)+pπ(i),mi=2,…,mIn the above relations, the departure time of the first job on each machine is calculated at first, then the second job, and so on. Eqs. (1) and (2) define the departure time of job π(1) through machine 1 to machine m. Eqs. (3) and (4) determine the departure time of job π(i) on machine 1 (i=2, 3, …, B1+1) or on machine k=2, 3, …, m−1(i=2, 3, …, Bk+1). Eqs. (5) and (6) calculate departure time of job π(i) on the last machine (i>B1+1) or on machine k=2, 3, …, m−1(i>Bk+1). In this case, the buffer capacities should be considered. In Eq. (6) max(dπ(i−1),k, dπ(i),k−1)+pπ(i),krepresents the completion time of operation oπ(i),kanddπ(i−Bk−1),k+1is associated with limited buffer capacities. Eq. (7) gives the departure time of job π(i) (i=2, 3…n) on the last machine. It can be easily concluded from the above formulations that the buffer constraint makes no effect on makespan and the above problem becomes the classical permutation flow shop scheduling problem when Bk>n−1. In the above equations Bkis defined as an intermediate buffer after machine k, but not as the size of buffer.With the above definitions, the objective is to find a sequence for processing all jobs on all machines so that its maximum makespan is minimized. Corresponding this target, the objective function is:(8)minCmax(π)=dπ(n),mIn this section, at first AIS and IG algorithms are briefly described and discussed how to implement each aspect of these algorithms for the considered problem and then the combination approach for the AIS and IG algorithms that called AIS-IG is explained. Finally performance of AIS, IG and AIS-IG algorithms are evaluated over some well-known benchmark problems.The artificial immune system (AIS) is a recent branch of stochastic search algorithms and classified as a population-based meta-heuristic method [18]. AIS is inspired on biological immune system (BIS). BIS is a natural complex system which can identify invader factors (pathogen) in body and defend the body from them. Invading pathogens are associated with specific proteins that are called antigen. The immune systems are able to recognize antigens [20] and also can generate antibodies which are able to match with antigen. Then BIS has a mechanism that is able to remember best antibodies and reproduce them in the next generation of the antibodies. Basic procedure of AIS is shown in Fig. 1.The human body has two sets of immune systems: the innate immune system and the adaptive (acquired) immune system. The former is for general defense and has no preference for any specific antigen and the latter responds to specific antigens [31]. Recently, this system has been used for solving complex real world problems, for example, optimization [30–34], data analysis [35–37], anomaly detection [38–40] and scheduling [18,39,41]. In the following, how to implement the AIS algorithm for the flow shop scheduling problem with finite buffers is described.An antibody (solution) is presented by a string of numbers π={π1, π2, …, πn} that is a permutation of n jobs. Also the initial population of antibodies is generated by randomly job permutation.Each antibody π has a makespan value Cmax (π) that must be used for affinity calculation base on Lin and Ying [31] definition, affinity (π)=1/Cmax (π). So the smaller makespan values and higher affinity values are optimal. From this equation an antibody with higher affinity value (lower makespan value) is better than an antibody with the lower one. Although the affinity function can be defined in other different forms which follows the same concept, but this equation has been applied successfully in Lin and Ying [31] research.It is important to notice that the defined equation for affinity calculation does not have impact on the solution diversity because it is not guarantee that the worst solutions in current population are not better than the best mutated solutions. It means that with less probability, the next generation may not be better than the current generation.Corresponding to Lin and Ying [31] research, for generating the next antibody population (repertoire), ncantibodies with higher affinity values are selected for cloning procedure. Each antibody proliferate amount of (nc−k+1) where k is the ranking number of its affinity value. From this statement, an antibody with higher ranking number has a smaller proliferation number. So this step increases the average of affinity value in the next generation. A numerical example is shown in Table 1.Unlike genetic algorithm, mutation in AIS is applied for all antibodies of population but according to its affinity measure [31], it means that smaller mutation is performed on antibodies with higher affinity values. So in the literature this phase of AIS algorithm is called somatic hyper mutation. But in most research on AIS algorithm mutation operator is performed on all antibodies in the same way [10,19,31]. Based on this concept, each antibody may be mutated more than one time. So, the antibody with smaller affinity value is mutated more than the antibody with the higher affinity value. The times of mutation loop for each antibody is equal to the ranking number of its original antibody (k). So, the antibody with highest affinity value is mutated only one time.Somatic hyper mutation phase can be done by a heuristic method or one of the well-known methods. In this study, three approaches swap, insertion and a combination of swap and insertion methods (with equal probability) are applied as somatic hyper mutation phase in AIS algorithm. The swap and insertion approaches are described below:Swap operator: In this case, firstly two jobs in the solution are randomly selected. Then, they are swapped in their positions.Insertion operator: For using this strategy, at first, one job is randomly selected and eliminated. Then, the solution is reproduced by reinserting the eliminated job in new randomly selected location.The procedure of the somatic hyper mutation in AIS algorithm is described as follows:1.Determine the iteration number (k) for the initial solution s0.S=s0Apply the mutation operator to the initial antibody (S) and generate the new antibody (s′).S=s′Check the iteration number. If the iteration number is equal to k, stop and the otherwise go to step 3.To evaluate the performance of these methods, twelve Taillard benchmark problems (one problem of each size) are randomly selected and each of them is run five times by each of above mutation approaches. These results are summarized in Fig. 2and Table 2.As shown in Fig. 2 and Table 2, Change in the mutation operator does not have much impact on the performance of the AIS algorithm but the swap operator is slightly better than the two other approaches.In the original AIS algorithm, population of next generation is a combination of best antibodies of current population and best antibodies of mutant which are obtained from the previous subsection. For this purpose, ncantibodies with the highest affinity value are selected. Then, the population is updated by replacing the ncworst antibodies in the initial population with the ncbest mutated antibodies. The pseudo-code of this algorithm is shown in Fig. 3.As shown in Fig. 3, the AIS algorithm is started by generating the initial population randomly (step 1). All generated antibodies are evaluated by calculating the affinity values (step 3). According to the affinity values, the best antibodies are selected (step 4). Each selected antibody is reproduced (cloned) according to its affinity value. Therefore, an antibody with higher affinity value reproduced more than an antibody with lower affinity value (step 5). The swap mutation is performed to each cloned antibody based on its affinity value. It means that, if the affinity value of an antibody is good, its swap time's decreases (step 6). After that, the affinity value is calculated for each of mutated antibodies (step 7). The best mutated antibodies are selected (step 8). Then, the population is updated by replacing the worst antibodies in the initial population with the best mutated antibodies (step 9). Finally, the termination criterion is checked.Local search (LS) is a method in which by a change to the current solution, the neighborhood solutions are examined. The LS is basic concept of meta-heuristic methods.Iterated greedy (IG) is a local search method which generates a sequence of solutions by iterating over greedy constructive heuristics using two main phases: destruction and construction [11]. During the destruction phase some solution components are eliminated from a complete candidate solution. Then, the construction procedure reconstructs a new complete solution by applying the eliminated components in new positions which selected randomly. When the new solution is completed, according to the acceptance criterion, the new constructed solution will be replaced by the candidate solution. These steps are iterated until the some stopping criterion is met.Due to simplicity of coding and obtaining good solutions, IG has attracted wide attention of researchers. So in recent years, IG has applied for different categories of complex problems with success. For example, Marchiori and Steenbeek [44] presented IG algorithm for solving set covering problem. To the scheduling problem, Ruiz and Stutzle [43] are applied IG for permutation flow shop problem which is called IG_RSLS. Ke-Pan et al. [27] studied no-wait flow shop problem and Ching Ying [5] presented IG for non-permutation flow shop scheduling problem.The details of how to implement the IG algorithm for proposed problem are described in below.An initial solution can be generated randomly or by significant procedure. However, Ruiz and Stutzle [43] defined a procedure based on NEH heuristic for generating an initial solution. They considered the processing time for each job and then sorted the jobs in descending order of their processing time and generate a sequence. The first two jobs are selected and two possible sequences of them are evaluated. Step 3 repeated until all jobs are sequenced. But, in this study an initial solution is represented by a randomly job permutation. The cost function of the initial solution is corresponding to its makespan value Cmax.The two main phases of any IG algorithm are the destruction and construction procedures. The destruction procedure is implemented to a candidate solution by removing some components of it randomly. If the candidate solution has n jobs and during the destruction procedure d jobs of it are removed, the destructed solution has n–d jobs.The construction phase in Ruiz and Stutzle research is consisted in the application of step 3 of the NEH heuristic until a complete sequence of all n jobs is obtained [43]. But, in this study the construction phase consists of d steps in which one of the d removed job is reinserted to the destructed solution. The replace position is selected randomly. The construction process is iterated until all of the d jobs are reinserted. A numerical example of how to implement the destruction and construction phases is shown in Fig. 4.Although, the calculation complexity of the construction phase in IG_RSLS[43] is more than the one in IG algorithm, but the experimental results are shown that the quality of solutions which are obtained by IG are better than the IG_RSLS in half of the experiments. These results are shown in Fig. 5.When the new solution is generated by the destruction and construction phases, it is important to consider whether the new sequence can be accepted for next iteration or not. One of the simplest acceptance criteria is to accept the new solutions only if they provide the smaller cost functions values. But this criterion may lead the algorithm to the insufficient situation and reduce the diversification of algorithm. Therefore, in this study, the simple simulated annealing like acceptance is considered as criteria the acceptance criteria [45] with the constant temperature which is calculated by the suggested Osman and Potts formula as:(9)Temperature=T∑i=1m∑j=1npijn⋅m⋅10where T is the parameter that needs to be adjusted.The pseudo-code of IG algorithm is shown in Fig. 6.Many researchers have concluded that hybrid approaches for scheduling problems could end up with high quality results [11–13]. Preliminary tests of Naderi et al. also demonstrated that the performance of the AIS is significantly influenced if it is combined with another algorithm [20]. In this study, a hybrid approach of AIS with destruction and construction phases of iterated greedy algorithm was presented to improve their exploration ability and increase convergence speed.The AIS-IG searches the solution space by a population of antibodies. According to the quality of antibodies, the affinities will be calculated. The base loop for this algorithm proceeds as follows:1.The best solutions are selected for proliferation phase. These antibodies are sorted in non-increasing order and a rank number k is assigned to each of them.According to antibodies affinity values, the selected antibodies are proliferated.Antibodies of clone population are mutated by destruction and construction phases of IG algorithm. Each antibody is mutated k times. These antibodies are evaluated by calculating the affinity of them.The poorest antibodies in original population will be replaced by the best antibodies in mutated population.This procedure is repeated until one of termination conditions is met. Fig. 7shows the pseudo-code of the AIS-IG algorithm.According to step 3, when k=1, each antibody is mutated one time and generates a neighborhood solution. But, for antibodies with ranking numbers k>1, the mutation steps are iterated more than one time. So, there are many differences between the new solution and its original solution. Based on this concept, some of the new solutions lead the searching process to the portions of the search space that have not been searched yet.On the other hand, based on step 4, there is no guarantee that always the best antibodies in mutated population are better than the poorest antibodies in the original population.As a result of the above concepts, applying the destruction and construction phases of IG algorithm cannot lead the searching process to local optimum.In this section at first, the comparison between AIS, IG, and AIS-IG is performed. Then, to evaluate the performance of the proposed AIS-IG algorithm on permutation flow shop problem with intermediate buffers the steps of computational experiments are described.Usually the purpose of using hybrid algorithms is improving quality of solutions and increasing the convergence speed. Following the idea, the Taillard benchmark problems [48] are used to evaluate the performance of the proposed algorithms. Each of instances was run in five trials with three AIS, IG, and AIS-IG algorithms with the same number of iterations and time limit 30×m×n millisecond. The results are placed in following links.11http://ees.elsevier.com/asoc/download.aspx?id=272195&guid=3ec56385-afb2-45a6-9c1c-0417805ba30f&scheme=1; http://ees.elsevier.com/asoc/download.aspx?id=272196&guid=a3ec9f5c-4cef-4461-b445-0ce21c7a249e&scheme=1; http://ees.elsevier.com/asoc/download.aspx?id=272197&guid=9ca4f55c-2f26-4ceb-8db5-6b7089fc2862&scheme=1.For each replication the percentage relative error (PRE) is calculated as follows:(10)PRE(A)=(CA−C*)×100C*where C*22These lower bounds are available in http://mistic.heig-vd.ch/taillard/problemes.dir/ordonnancement.dir/ordonnancement.html.is the new lower bound solutions found by Taillard with case of capacity of buffers are infinite (classic flow shop) and CAis the makespan value obtained by algorithm A. It is important to notice that the parameters of algorithms for this subsection are tuned by experience of different combinations of parameters.The average relative percentage error (APRE) and time spent over 5 replications for each of set problems are summarized in Table 3. Based on Eq. (10), lower value of APRE is better than its higher value.As can be seen in Table 3 and Fig. 8, the AIS-IG and AIS algorithms are outperformed to the other algorithm. Although the AIS and AIS-IG algorithms have nearly equal performance in small scale problems but when the size of problems becomes large, the difference of solution quality of AIS and AIS-IG is considerable. In addition, Basis on Fig. 9, AIS-IG algorithm has higher convergence speed than two other algorithms. However, difference of solution quality of these algorithms is not considerable and in most cases have nearly equal performance. Therefore, in the next subsection, parameter tuning of these algorithms are performed and their performances are evaluated by comparison with other well-known meta-heuristic algorithms.Parameter setting may influence the quality of results [31]. For choosing the best combination of parameters, twelve test problems from Taillard benchmark problems [48] are randomly selected (one problem of each size of benchmark problem). The combinations of parameters are tested on twelve selected problems which are shown in Table 4. It should be noted that determined value of each parameters of AIS and IG algorithms not only used to these algorithms but also used to AIS_IG algorithm.In the proposed algorithms max cpu time is 30×m×n (milliseconds) where n is the number of jobs and m is the number of machines. It is observed that when max k or npopin AIS algorithm is increased, better solution can be obtained but computational time was not change much. Thus, Based on the primary testing, the following parameter values are chosen for AIS algorithm: nc=10, npop=30, max k=3000. In addition, the best combination of parameters in IG algorithm is: d=n/2, λ=0.95, T0=200, Tf=0.005. The AIS-IG algorithm consist four parameters, named npop, nc, max k and d where npoprepresents the size of antibody population, ncis the number of selected antibody for cloning step, max k is the suppression parameter for defining termination criterion and d is the destruction parameter.

@&#CONCLUSIONS@&#
