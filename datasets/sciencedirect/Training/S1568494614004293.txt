@&#MAIN-TITLE@&#
Swarm intelligent approaches to auto-localization of nodes in static UWB networks

@&#HIGHLIGHTS@&#
Soft computing techniques for wireless sensor networks.Particle swarming optimization (PSO) algorithm for static localization of nodes.Swarm-based approaches can outperform standard geometrical algorithms.Hybrid particle swarming.The proposed hybrid PSO allows obtaining faster convergence.

@&#KEYPHRASES@&#
Auto-localization,Particle swarm optimization (PSO),Hybrid PSO,Two-stage maximum-likelihood (TMSL) method,Plane intersection (PI) method,

@&#ABSTRACT@&#
In this paper, we address the problem of localizing sensor nodes in a static network, given that the positions of a few of them (denoted as “beacons“) are a priori known. We refer to this problem as “auto-localization.” Three localization techniques are considered: the two-stage maximum-likelihood (TSML) method; the plane intersection (PI) method; and the particle swarm optimization (PSO) algorithm. While the first two techniques come from the communication-theoretic “world,” the last one comes from the soft computing “world.” The performance of the considered localization techniques is investigated, in a comparative way, taking into account (i) the number of beacons and (ii) the distances between beacons and nodes. Since our simulation results show that a PSO-based approach allows obtaining more accurate position estimates, in the second part of the paper we focus on this technique proposing a novel hybrid version of the PSO algorithm with improved performance. In particular, we investigate, for various population sizes, the number of iterations which are needed to achieve a given error tolerance. According to our simulation results, the hybrid PSO algorithm guarantees faster convergence at a reduced computational complexity, making it attractive for dynamic localization. In more general terms, our results show that the application of soft computing techniques to communication-theoretic problems leads to interesting research perspectives.

@&#INTRODUCTION@&#
The problem of locating sources in an indoor environment can be addressed by using wireless sensor networks, which combine low-to-medium data rate communications with positioning capabilities. As a matter of fact, radio signal exchanges between pairs of nodes allow estimating the distance between them, by extracting from these signals some physical quantities, such as the received signal strength, the angle of arrival, or the time of flight [1]. In this way, under the assumption of perfect knowledge of the exact positions of a sufficiently large number of nodes, a new one can be located by measuring and properly processing its distances from a few nodes with known positions.Since wireless communications are affected by errors, the obtained positions will not be precise. The main sources of errors in indoor communications are phenomena such as non-line-of-sight propagation, multipath, and multiple access interference. In order to obtain more accurate position estimates by reducing the impact of these sources of errors, we consider ultra wide band (UWB) signaling between nodes, because (i) UWB signals’ large bandwidth allows penetrating through obstacles and resolving multipath components and (ii) their high time resolution improves the ranging capability [2]. A time difference of arrival (TDOA) approach, based on the differences between the arrival times of signals, is used to estimate the distances between pairs of nodes.Indoor node localization has applications in many fields, such as, for example, tracking of people in high security areas and of patients in hospitals. Another scenario of interest involves the location of “tags” in large warehouses, where it can be assumed that many static nodes are placed on the ceiling: the knowledge of their positions would allow locating and tracking moving people and/or vehicles. In order to guarantee accurate position estimates of a moving target in every accessible point inside a large warehouse, a very large number of accurately positioned static nodes would be necessary. Moreover, if the geometry of the warehouse changes (e.g., for varying quantities of stored goods), the nodes might be replaced and/or new ones might be added. Accurate placement of a huge number of nodes would thus be very demanding also from an economic point of view. For this reason, it is interesting to focus on the auto-localization of the static nodes, assuming to know the exact positions of only a few of them, which will be denoted as “beacons.” Then, the other nodes would “learn” their positions starting from the beacons: eventually, all static nodes would self-localize and then cooperate to localize (possibly moving) tags. The number of beacons should be small, in order to reduce the cost of installation, but sufficiently large to guarantee reliable position estimates of other static nodes, which is necessary to properly use them to locate moving targets. In this work, we investigate self-localization in UWB networks.Among the wide variety of location estimation techniques which have been proposed in the literature, it is worth recalling iterative methods, such as those based on Taylor series expansion [3] or the steepest-descent algorithm [4], graph-based methods [5], or methods based on metaheuristics [6]. To overcome some limitations of these methods, closed-form algorithms have been studied, such as the plane intersection (PI) method [7] and the Two-stage maximum-likelihood (TSML) method [8]. Both these methods deal with solving linear or non-linear systems of equations, whose data contain the coordinates of beacons and the range estimates between them and the current tag. In some particular cases (for instance, if the considered beacons lay on the same line), the matrices involved in the aforementioned algorithms might become ill-conditioned, thus leading to a wrong position estimate of the current tag. To avoid this kind of problems, it is possible to re-interpret the “geometric” localization problem as a minimization one. In this paper, by re-formulating the initial system of equations of the TSML method in terms of an optimization problem, we solve it through the use of particle swarm optimization (PSO). Direct comparison of the performance of a geometric method (i.e., the PI or the TSML methods) with that of the PSO algorithm shows that the latter can significantly outperform the former.In [9], we compare the performance of the TSML method with that of the PSO algorithm in terms of the impact of the distances between beacons and nodes. In [10], we investigate the performance of the TSML method, the PI method, and the PSO algorithm was investigated, in a comparative way, for various numbers of beacons. In this paper, we extend the preliminary investigation of [9,10]. In particular, we consider a larger number of topologies, analyzing the performance of the TSML, PI, and PSO methods for various configurations in terms of number of beacons and distances between beacons and nodes. As predicted by the preliminary analysis in [9,10], our results show that the PSO method is to be preferred regardless of the network configuration (number of beacons and topology).We then propose a novel improved version of the PSO algorithm, which extends the hybrid approach proposed in [11], and we compare its performance with that of the standard PSO algorithm. In particular, we investigate the number of iterations which are needed to achieve a given error tolerance in the position estimate. Our simulation results show that the proposed hybrid version of the PSO algorithm guarantees, at a significantly reduced computational complexity, the fastest convergence in all considered scenarios, making it very attractive from an applicative viewpoint.This paper is organized as follows. In Section 2, the considered scenario is described. In Section 3, the positioning algorithms are described and simulation-based performance results are presented. In Section 4, a hybrid version of the PSO algorithm, with improved performance, is proposed. Section 5 concludes the paper.As anticipated in Section 1, all considered static nodes are supposed to lay, at the same height, on the ceiling of a large indoor environment. A sufficiently large (but still limited) number M of these nodes, denoted as “beacons”, is used to estimate the position of each remaining node (with unknown position). The coordinates of each beacon are represented by bidimensional vectorss_i=[xi,yi]T,∀i∈{1,…,M}, and we denote as Kithe norm of vectors_i,∀i∈{1,…,M}. All the other nodes are estimated one after another. The true position of the currently considered node is indicated asu_e=[xe,ye]T, while the obtained position estimate is denoted asu_ˆe=[xˆe,yˆe]T. Following this notation, the true and the estimated distances between the ith beacon and the considered node are, respectively:(1)ri=(u_e−s_i)T(u_e−s_i),rˆi=(u_ˆe−s_i)T(u_ˆe−s_i).According to the results on UWB signaling presented in [12], we assume that the estimated distances can be expressed as follows:rˆi=ri+νiwhere νi=ɛi+b;ɛi∼N(0,σi2); ɛiis independent from ɛjif i≠j (i, j∈{1, …, M}); and b is the synchronization bias. Moreover, the standard deviation σiof the distance error estimate between the ith beacon and a generic node can be approximated as the following linear function of the distance between them:(2)σi=0.01ri+0.08.The values of the coefficients in Eq. (2) are obtained in [12] by considering Channel Model 3 described in [13] and the energy detection receiver presented in [14], which is composed by a band-pass filter followed by a square-law device and an integrator, in which the integration interval was set equal to Ts=1s. Therefore, the results presented in the following hold under these channel and receiver conditions.As stated at the beginning of the current section, the reference scenario is a large industrial scenario, whose area may be of several hundreds of square meters. Assuming to divide the whole area into smaller squares, with 10m-long sides, and that in each square the same number of beacons is considered, without loss of generality we only refer to a single square in the simulation-based performance analysis presented in the following. Two illustrative configurations of the distribution of the nodes inside a square are shown in Fig. 1(a) and (b).In this section, we describe two classical geometrical approaches widely used to tackle localization problems, namely the TSML method and the PI method [7,8]. The initial system of equations of the TSML method is then rewritten as a minimization problem, which is solved by means of the PSO algorithm. Finally, the performance of the three approaches is compared, through simulations.For the sake of simplicity, we preliminarily introduce the following notation:(3)Δ1i≜ri−r1andΔˆ1i≜rˆi−rˆ1,∀i=2,…,M.Observing thatri2=(Δ1i+r1)2, ∀i∈{2, …, M}, the following TDOA non-linear system of equations can be derived [15]:(4)Gˆ__ϕˆ_1=hˆ_where(5)Gˆ__=−x2−x1y2−y1Δˆ12x3−x1y3−y1Δˆ13⋮⋮⋮xM−x1yM−y1Δˆ1M,h_ˆ=12K12−K22+Δˆ122⋮K12−KM2+Δˆ1M2andϕˆ_1=[uˆ_eT,rˆ1]T.The system (4) may look like a linear system in the three unknownsxˆe,yˆeandrˆ1, but it is not, since, by definition,rˆ1=(xˆe−x1)2+(yˆe−y1)2. The solution of system (4) is found in two steps. All the details of the algorithm can be found in [15] and, for the sake of simplicity, we only give a few hints. First, the system (4) is solved as if it was a linear one, by using the least square (LS) technique. Once the solutionϕˆ_1has been obtained, in order to take into account the relation betweenxˆe,yˆe, andrˆ1the following system is derived:(6)G__′ϕ_2=h_′whereh_′=[([ϕˆ_1]1−x1)2,([ϕˆ_1]2−y1)2,[ϕˆ_1]32]T,G__′=100111,ϕ_2=[(xˆe−x1)2,(yˆe−y1)2]T.System (6) is then solved, once again, by means of the LS technique, and the solutionϕˆ_2is used to obtain the final position estimate of the target, which can be expressed as follows:u_e=U__[ϕˆ_2]1,[ϕˆ_2]2T+s_1whereU__=diag[sgn(ϕˆ_1−s_1)].According to the PI method, introduced in [7], any triple of beacons (which leads to a pair of TDOA measurements) identifies the major axes of a conic, a focus of which is the position of the source. Given at least two triples of beacons, the position estimate can then be determined by solving the system given by the equations of the corresponding axes. By considering the axes identified by{s_1,s_2,s_k}, k∈{3, …, M}, the system can be written as(7)Aˆ__uˆ_e=bˆ_where(8)Aˆ__=(x1−x2)Δˆ13−(x1−x3)Δˆ12(y1−y2)Δˆ13−(y1−y3)Δˆ12(x1−x2)Δˆ14−(x1−x4)Δˆ12(y1−y2)Δˆ14−(y1−y4)Δˆ12⋮⋮(x1−x2)Δˆ1M−(x1−xM)Δˆ12(y1−y2)Δˆ1M−(y1−yM)Δˆ12and the ith element ofbˆ_, ∀i{1, …, M−2}, isbˆ_i=−Δˆ12Δˆ1,i+2(Δˆ1,i+2−Δˆ12)+(K12−K22)Δˆ1,i+2−(K12−Ki+22)Δˆ12.The LS solution of (7) is then given by(9)uˆ_e=(Aˆ__TAˆ__)−1Aˆ__Tbˆ_.The starting point for the TSML method is system (4). Through simple algebraic manipulations, this system can be rewritten as(10)B__uˆ_e=tˆ_where(11)B__=−2x2−x1y2−y1x3−x1y3−y1⋮⋮xM−x1yM−y1,t_ˆ=rˆ22−rˆ12+K12−K22rˆ32−rˆ12+K12−K32⋮rˆM2−rˆ12+K12−KM2.Note that with the new formulation (10), the measurements affected by noise only appear in vectort_ˆ, while matrixB__only contains known parameters. Instead of solving directly the system (10), we reinterpret it as an optimization problem, with solutionuˆ_eexpressed as:(12)uˆ_e=argminu_F(u_e)where the fitness function F(·) is the following:(13)F(u_e)≜||tˆ−B__u_||.Among all possible optimization algorithms which could be used to solve (10), we now consider the PSO algorithm, originally introduced in [16]. We remark that the use of soft computing techniques for the localization of nodes in WSNs has been already proposed in the literature [17,18].According to the PSO algorithm, the set of potential solutions of an optimization problem can be modeled as a swarm of particles, whose positions are randomly initialized in the region of interest, and which are guided towards the optimal solution by exploiting “social interactions” among themselves. In the following, the size of the swarm is denoted as S. It is assumed that every particle i in the swarm, at each iteration step t (t∈{0, 1, 2, …}), is associated with a positionx_i(t)(within the region of interest) and with a velocityv_i(t), which are both randomly initialized, at the beginning, with valuesx_i(0)andv_i(0)and which are updated at each iteration [19]. Moreover, it is supposed that the entire system has a global memory, which allows each particle to know, at every instant, not only its own best position (according to the lowest value of the fitness function (13)) reached so far, but also the best position among the ones reached by any other particle in the swarm. Each particle also keeps track of the values of the fitness function in correspondence to both its best position and the global best position. All these values are used to iteratively update the velocity and the position of every particle. The updating rule for the velocity of particle i is [20](14)v_i(t+1)=ω(t)v_i(t)+c1R1(t)(y_i(t)−x_i(t))+c2R2(t)(y_(t)−x_i(t)),i∈{1,…,S}where ω(t) is a weight called inertial factor; c1 and c2 are positive real parameters called cognition parameter and social parameter, respectively; R1(t) and R2(t) are independent random variables uniformly distributed in (0, 1), whose realizations are drawn at each iteration step. Finally,y_i(t)andy_(t)are the position of the ith particle with the best objective function and the position of the particle with the best (among all particles) objective function reached until instant t, respectively. For the considered minimization problem (12), these positions can be expressed as follows:(15)y_(i)(t)=argminz_∈{x_(i)(0),…x_(i)(t)}F(z_)y_(t)=argminz_∈{y_(1)(t),…y_(S)(t)}F(z_).The rationale behind the updating rule (14) is to add to the velocity at the previous epoch (which is weighed by a multiplicative factor) a stochastic combination of the direction to the best position of the ith particle and to the best global position. The definition of the velocity given in (14) is then added to the current position, in order to update the position of the corresponding particle, according to the rule(16)x_i(t+1)=x_i(t)+v_i(t+1),i∈{1,…,S}.This process is iterated until a stopping criterion (such as achieving a satisfactory value of the fitness function or reaching a maximum number of iterations) is met. The solution of (12) will then correspond to the position of the particle which best suits the optimization requirements in the last iteration.In order to obtain the simulation results presented in Section 3.4, the PSO algorithm has been implemented in Matlab with a population of S=40 individuals and with a stopping condition corresponding to 50 PSO iterations. We consider c1=c2=2, in order to make both the averages of the weights for social and cognition contributions equal to 1. The initial positions of all the particles are randomly initialized over the entire region of interest, namely a square with 10m-long sides. The choice of the inertial factor ω(t) deserves some more comments. From (14), it can be observed that this parameter quantifies the ability of the swarm to explore new areas. More precisely, a relatively large value of ω(t) improves the exploitation ability of the swarm, which is a good feature to avoid local optima in optimization problem. Since, however, we are considering a convex problem (i.e., a problem without local minima), we can ignore this parameter and, unlike [9,10], we set ω(t)=0, as proposed in [21]. This choice, besides accelerating the speed of convergence, also reduces the computational complexity of the algorithm. As a matter of fact, since the first addend at the right-hand side of (14) is not considered, there is no need to initialize and define velocities, and the updating rule for the positions of the particles becomes:x_i(t+1)=x_i(t)+c1R1(t)(y_i(t)−x_i(t))+c2R2(t)(y_(t)−x_i(t)),i=1,…,S.

@&#CONCLUSIONS@&#
Three approaches to UWB signaling-based auto-localization of nodes in a static wireless network have been considered: two stem from the geometry-oriented localization literature (the TSML method and the PI method) and one originates from the soft computing literature (a PSO-based approach). The obtained results show that the PSO-based approach guarantees, with respect to the other algorithms, a better accuracy in the position estimate, both in terms of required number of beacons and of tolerable distance between beacons and nodes. Furthermore, an improved version of the PSO algorithm has been proposed, showing that its convergence speed is significantly higher than that of classical PSO approach. We have also investigated the convergence speed as a function of the population size, showing that the novel hybrid PSO algorithm allows fast convergence even with a small swarm size. As an attractive side benefit, the improvement of the convergence speed of the hybrid PSO algorithm is associated with a relevant reduction of the total computational complexity.