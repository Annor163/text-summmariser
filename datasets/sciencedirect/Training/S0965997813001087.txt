@&#MAIN-TITLE@&#
An efficient algorithm for solving a multi-layer convection–diffusion problem applied to air pollution problems

@&#HIGHLIGHTS@&#
An urban scale Eulerian non-reactive multi-level air pollution model is proposed.The mass-consistent wind field model provides a completely self-sufficiently model.Adaptive F.E.M. with characteristics and F.D. with splitting techniques is developed.Splitting techniques, adaptativity and parallel strategies reduce the cots.

@&#KEYPHRASES@&#
Air pollution modeling,Splitting methods,Adaptive Finite Element Method,Parallel algorithm,Parabolic convection–diffusion PDE,PDE numerical methods,

@&#ABSTRACT@&#
An urban scale Eulerian non-reactive multilayer air pollution model is proposed describing convection, turbulent diffusion and emission. A mass-consistent wind field model developed by authors is included in the air pollution model. An Adaptive Finite Element Method with characteristics in the horizontal directions and Finite Differences in the vertical direction using splitting techniques is proposed to numerically solve the corresponding PDE problem. A parallel version of the algorithm improves the precision of the solution keeping computation time below real time of simulation. A numerical example illustrates the whole problem.

@&#INTRODUCTION@&#
Air pollution models play an important role in science, because of their capability to assess the importance of the relevant processes. Air pollution models are the only method that quantifies the deterministic relationship between emissions and concentrations/depositions, including the consequences of past and future scenarios and the determination of the effectiveness of abatement strategies. Model simulations must have a high degree of accuracy and must be achieved faster than real time to be of use in decision support.There is a wide range of air pollution modeling techniques: from local level (e.g., micro scale models) to larger scales (e.g., urban or regional scales) and also global scale modeling the earth’s troposphere; from non-reactive (e.g., dispersion modeling) to reactive (e.g., photochemical modeling); and different modeling approaches: from deterministic models (e.g., gaussian, lagrangian and Eulerian models) to stochastic models. There is a large variety of computer packages for simulation of air pollution (e.g., AERMOD, CALPUFF, CMAQ), an extent guidance of air quality models is provided by the database Model Documentation System of the European Environment Agency [1]. For a brief review of air pollution techniques see [2].Behind all these air pollution models arise a large variety of mathematical problems providing interesting challenges from the mathematical, numerical and computational point of view.In this work we propose an urban scale Eulerian model of a kind of pollutant which on this scale does not significatively react with other composites. We select a non-reactive model for one pollutant in order to simplify and focus the attention on the numerical method proposed, but it is not difficult to generalize to several reactive pollutants. The mathematical basis for the urban air pollution model is the conservation of mass equation, which describes convection, turbulent diffusion and emission of the pollutant, given by the following parabolic convection–diffusion PDE:(1)∂C∂t+U·∇C-∇·(K∇C)=finΩ×(0,tf)endowed with appropriate initial and boundary conditions for the pollutant concentration C. U is the wind field, K is the turbulent diffusivity tensor, and f is the pollutant source. WithΩ∈R3we indicate the spatial domain corresponding to an air layer over a given ground surface, while tfis the final time.For the numerical solution of pollution models given by equations of the type (1) is very important to use accurate and stable numerical methods. We propose a combination of the Adaptive Finite Element Method with characteristics in the horizontal directions and Finite Differences in the vertical direction using splitting techniques. The splitting methods are widely used in various large-scale scientific and engineering problems, and commonly used in the numerical treatment of air pollution models. Splitting procedures applied to air pollution models are described in many papers, see for example [3,4], or the more recent review [5]. For a complete review of splitting methods see [6]. In this work we focused in operator splitting methods and product formula algorithms for general equations of evolution. For a brief introduction of this topic, see [7].Furthermore, parallel computing provides the tools to realize the idea behind splitting methods: splitting complicated problems into simpler systems. The use of parallel computers provides an avenue to overcome the computational requirements of air pollution models. Strategies of parallelization of the transport and chemistry of air pollution models appears in many papers, see for example [8–10]. We also propose a parallel implementation of the algorithm developed in this work, the idea is to compute simultaneously (parallel) the horizontal convective and diffusive terms on each layer, so we can improve the accuracy by increasing the number of layers without shooting up the computational cost, so we have high degree of accuracy computed faster than real time.Eulerian models have the advantage of being computed on a three-dimensional grid providing 3D descriptions of the meteorological fields rather than trajectories of single particles, but Eulerian models have difficulties in resolving steep gradients when fixed meshes are used. This phenomenon causes problems particularly in resolving dispersion from a single point source, resulting in very large gradients near the release. The adaptive methods provides solutions able to reveal features which could not be detected using a coarse mesh without using a fine mesh over the whole domain. Adaptive algorithms can automatically place a finer resolution grid in the regions where higher spatial numerical error can be expected, obtaining the desired solution with minimal effort. Adaptive methods applied to air pollution models have been used by several authors, see for example, [11,12] or [13].The variables required for the solution on this model are wind field U and turbulent diffusion described by K. These depend in general on soil orography and meteorology. For a given domain Ω, the soil orography is known, but the meteorological conditions could considerably vary, hence the weather forecasts represent a crucial aspect in the simulation of transport and diffusion of pollutants.For the wind field, we use a mass-consistent wind field model developed by authors [14–16] where an asymptotic approximation of the primitive Navier–Stokes equations is used to provide a 3D velocity wind field governed by a 2D equation, taking into account the soil orography. The wind field is adjusted to several punctual wind velocity measurements at different points in the 3D domain by an optimal control problem solved using the adjoint equation.For the diffusivity, we focus our model on the transport and diffusion of pollutants emitted by point sources on urban scale (e.g., pollutants emitted by industrial chimneys), hence we make use of the Gaussian models. In Gaussian models, the concentration of the pollutants assumes the form of a Gaussian distribution in space, and allows to fit the coefficients of the turbulent diffusivity tensor in the following form,(2)K=Kxx000Kyy000Kzzbeing z the vertical spatial coordinate, while x and y those associated with the horizontal plane. The Gaussian models allow to determine empirically the values of the coefficients Kxx, Kyyand Kzzon the basis of the orography, atmospheric stability conditions and spatial coordinates, and are evaluated as,(3)Kxx=Kyy=Kh=σh2||U||2randKzz=Kv=σv2||U||2rwhere r is the distance from the pollutant source and σhand σvare the dispersion coefficients according to the Gaussian models. The dispersion coefficients are empirically related to the soil orography, stability class, distance from the pollutant source and surface roughness. For more details see [17].In the following we deal with our mathematical model in a three-dimensional domain corresponding to an air layer over a ground surface S not necessarily plane. Letω⊂R2be a two-dimensional normalized bounded and connected domain representing the projection of the three-dimensional ground surface S, let x= (x,y) be any of its points and t the time. We denote Ω={(x,z):x∈ω,h(x)<z<h(x)+δ} to represent the air layer studied. We decompose the boundary of Ω into ∂Ω=S∪A∪L, where S={(x,z):x∈ω,z=h(x)} is the ground surface, A={(x,z):x∈ω,z=h(x)+δ} is the air upper horizontal boundary and L={(x,z):x∈∂ω,h(x)<z<h(x)+δ} is the air lateral vertical boundary.In this section, we denote by an indexxythe two-dimensional operators and by the indexzthe operators concerning the vertical component, no index means three-dimensional operators. We use small letters for the two-dimensional problem, and capital letters for the three-dimensional problem. We denote the air velocity U=(U1,U2,U3), where we distinguish the vertical velocity from the horizontal one denoting W=U3,V=(U1,U2).Eq. (1), finally reads,(4)∂C∂t+V·∇xyC+W∂C∂z-∇xy·(Kh∇xyC)-∂∂zKv∂C∂z=finΩ×(0,tf)where C represents the amount of pollutant at each point of the domain Ω, and at each instant t, Kh=Kxx=Kyyis the horizontal diffusion coefficient and Kv=Kzzis the vertical diffusion coefficient.In order the problem to be well defined we have to add boundary and initial condition. We assume the following boundary condition,(5)-Kh∇xyC·νxy-Kv∂C∂zνz=[U·ν]+ConL×(0,tf)0onA×(0,tf)0onS×(0,tf)where ν=(νxy,νz)=(νx, νy, νz) is the normal unit outer vector. The notation [g]+ means g if g>0 and 0 otherwise. On the lateral boundary L of the three-dimensional domain Ω, this boundary condition represents the loss of pollutant on the outdoor boundary. As νz=0 on this boundary, Eq. (5) can be reduced to(6)-Kh∇xyC·νxy=[V·νxy]+ConL×(0,tf)We assume no loss on the upper, we also assume no loss on the lower boundary, although it is easy to represent surface deposition fluxes with a non homogeneous boundary condition on S.The initial conditions are arbitrarily set to zero, because it is difficult to determine the initial conditions in all the domain of study due to the sparsity of data. Anyway, the initial conditions have been found to be important only in the initial period of simulation.(7)C|t=0=0inΩThe source term f depends on the rate of emission and the localized emission subdomain which is not the real emission point, but it is affected by several factors as the atmospheric stability class, wind field, source geometry, emission velocity of the plume and temperatures. For the numerical examples we make use of Holland formula to compute the effective stack height and predict the plume rise (see [18,19]).We make a change of coordinates in order to transform the three-dimensional domain Ω into a cuboid and to be able to apply the splitting method proposed in this article. This change of coordinates implies new convective and diffusive terms in the vertical direction affected by the soil orography, and also new diffusive cross terms. The new coordinates will beτ=tξ=xη=yζ=z-h(x,y)By straightforward computations for any function ϕ=ϕ(t, x, y, z) we have∂ϕ∂t=∂ϕ∂τ∂ϕ∂x=∂ϕ∂ξ-hx∂ϕ∂ζ∂ϕ∂y=∂ϕ∂η-hy∂ϕ∂ζ∂ϕ∂z=∂ϕ∂ζwhere, in order to simplify notation,hx=∂h∂xandhy=∂h∂y.Then the convective term becomes,(8)U·∇C=V·∇ξηC+(W-U1hx-U2hy)∂C∂ζand the diffusive term is(9)-∇xy·(Kh∇xyC)-∂∂zKv∂C∂z=-∇ξη·(Kh∇ξηC)-∂∂ζKv+Kh(hx2+hy2)∂C∂ζ+∂∂ξ(Khhx∂C∂ζ)+∂∂ζKhhx∂C∂ξ+∂∂ηKhhy∂C∂ζ+∂∂ζKhhy∂C∂ηConsequently the equations in the transformed domain are analogous to Eqs. (4) and (5) replacing W byW¯=W-U1hx-U2hyand KvbyK¯=Kv+Kh(hx2+hy2)plus the terms with crossed derivatives in Eq. (9).Rearranging terms,(10)∂C∂τ+V·∇ξηC+W¯∂C∂ζ-∇ξη·(Kh∇ξηC)-∂∂ζK¯∂C∂ζ+∂∂ξKhhx∂C∂ζ+∂∂ζKhhx∂C∂ξ+∂∂ηKhhy∂C∂ζ+∂∂ζKhhy∂C∂η=fThis change of coordinates affects the boundary conditions in the same way. On the lateral boundary, νxy=νξη, so Eq. (6) writes in the new variables,(11)-Kh∂C∂ξ-hx∂C∂ζνξ-Kh∂C∂η-hy∂C∂ζνη=[V·νξη]+ConL×(0,tf)On the upper boundary A, taking into account that νxyz=(−hx,−hy,1)/∣h∣ on A, Eq. (5) writes,(12)Khhx∂C∂ξKh+hy∂C∂η-K¯∂C∂ζ=0onA×(0,tf)although we must not forget that in the new variables the normal unit outer vector to the upper boundary is νξηζ=(0,0,1).On the lower boundary S, taking into account that νxyz=(hx,hy,−1)/∣h∣ on S, condition Eq. (5) writes(13)-Khhx∂C∂ξ-Khhy∂C∂η+K¯∂C∂ζ=0onS×(0,tf)although now νξηζ= (0,0,−1).As we propose a Finite Element method for the spatial variables, in order to clarify how the change of coordinates affects the variational formulation, we detail the weak formulation of the diffusive term and the crossed derivatives, where we denote here Γ=∂Ω, and G is a test function,-∫Ω∇ξη·(Kh∇ξηC)+∂∂ζK¯∂C∂ζGdΩ+∫Ω∂∂ξKhhx∂C∂ζ+∂∂ζKhhx∂C∂ξ+∂∂ηKhhy∂C∂ζ+∂∂ζKhhy∂C∂ηGdΩusing Green’s formula∫ΩKh∇ξηC·∇ξηG+K¯∂C∂ζ∂G∂ζdΩ-∫ΓKh∇ξηC·νξηG+K¯∂C∂ζνζGdΓ-∫ΩKhhx∂C∂ζ∂G∂ξ+Khhx∂C∂ξ∂G∂ζ+Khhy∂C∂ζ∂G∂η+Khhy∂C∂η∂G∂ζdΩ+∫ΓKhhx∂C∂ζGνξ+Khhx∂C∂ξGνζ+Khhy∂C∂ζGνη+Khhy∂C∂ηGνζdΓrearranging and taking into account Eqs. (11)–(13), it follows∫ΩKh∇ξηC·∇ξηG+K¯∂C∂ζ∂G∂ζdΩ+∫L[V·νξη]+CGdΓ-∫ΩKhhx∂C∂ζ∂G∂ξ+Khhx∂C∂ξ∂G∂ζ+Khhy∂C∂ζ∂G∂η+Khhy∂C∂η∂G∂ζdΩIn order to simplify notation, we use again the notation x, y, z and t for the new coordinates instead of ξ, η, ζ and τ.We propose an Adaptive Finite Element – Characteristic – Finite Difference method. Given a time step Δt, and an interval length Δz in the vertical direction, letAlnbe a Finite Element approximation of the operator −∇xy(Kh∇xy) in the layer zlat time tnand we denoteClnthe solution in this level at this time. We use a two-dimensional Adaptive Finite Element method in each level combined with the Characteristic method. In the vertical direction we approximate the convective term with an upwind first order scheme and the diffusive term with a second order Finite Differences scheme. The crossed derivatives are approximated using prisms with triangular section, which is equivalent to use triangular Finite Element in the horizontal direction and Finite Difference in the vertical direction. Letω¯be any of the horizontal sections of the cuboid. We denote Bland Dlthe matrix defined by the terms(14)(Bl)ij=∫ω¯Khhx∂φj∂x+hy∂φj∂yφi(15)(Dl)ij=∫ω¯Khhx∂φi∂x+hy∂φi∂yφjGiven a time step Δt, and a interval length Δz in the vertical direction, for each layer l=1,…,LCln+1-C¯lnΔt+Wl+Δz(Cln+1-Cl-1n+1)-Wl-Δz(Cl+1n+1-Cln+1)+AlCln+1+K¯-Cl-1n+1+2Cln+1-Cl+1n+1(Δz)2+12ΔzBl(Cl+1n+1-Cl-1n+1)+12ΔzDl(Cl+1n+1-Cl-1n+1)=fn+1whereWl+=max{0,Wl},Wl-=max{0,-Wl}andC¯lnis given byC¯ln=Cln∘Xnwhere Xn(x)=X(x;tn) is the solution at time tnof the final value problem(16)dXdt=V(17)X(x,tn+1)=xIn the former scheme, all the layers are coupled, so is not very suitable from a practical point of view. Now we consider a splitting method where the problem can be solved at each layer separately. Notice that each elementary operator remains unconditionally stable.For l=1,…,L(18)Cln+1/4-C¯lnΔt/2=0(19)Cln+1/2-Cln+1/4Δt+Wl+Δz(Cln+1/2-Cl-1n+1/2)︸positive vertical convection+12AlCln+1/2︸half horizontal diffusion+K¯-Cl-1n+1/2+Cln+1/2(Δz)2︸half vertical diffusion+12Δz(-BlCl-1n+1/2)+12Δz(-DlCl-1n+1/2)︸some cross terms=12fn+1/2For l=L,…,1(20)Cln+3/4-Cln+1/2Δt-Wl-Δz(Cl+1n+3/4-Cln+3/4)︸negative vertical convection+12AlCln+3/4︸half horizontal diffusion+K¯Cln+3/4-Cl+1n+3/4(Δz)2︸half vertical diffusion+12Δz(BlCl+1n+3/4)+12Δz(DlCl+1n+3/4)︸some cross terms=12fn+3/4(21)Cln+1-C¯ln+3/4Δt/2=0A large grid size could lead to significant errors in the concentrations of pollutant species, especially in the presence of very large gradients near single point sources of pollutants. An adaptive algorithm may be considered to be a computational procedure for constructing a finite element discretization for a given problem (not requiring any a priori information on the exact solution) such that, the error of the corresponding approximate solution is within a given tolerance in a given norm and such that the number of degrees of freedom (and the computational effort) is minimal. We propose an h-adaptive algorithm driven by the residual estimator proposed in [20].On each layer l we solve the parabolic problem with mesh adaptation (refine/coarsen) on each time step n. The local error indiator on an element T of the corresponding mesh is given by,(22)ηT2=hT4||Cln+1-In+1C¯lnΔt-∇xy(Kh∇xyCln+1)-f||L2(T)2+∑Γ⊂∂T∩(Ω∪ΓN)hT3||[Kh∇xyCln+1·νxy]||L2(Γ)2where hTis the element diameter and I represents the corresponding interpolation operator. [] denotes the jump of a quantity across an interior edge or its value for an edge on the Neumann boundary ΓN.We use nested meshes generated by the 4−T algorithm of Rivara [21]. In the numerical examples we use 8 or 9 nested meshes.At the refinement stage, the last mesh is refined twice when the error indicator point out. The refinement strategy is given by,ηT2⩾γ1ηmax2whereηmax2=maxT{ηT2}, that is, the elements satisfying the previous formula are marked to be refined. In the numerical examples γ1=0.1, and the number of nested meshes increases even 10 or 11.At the coarsen stage, a new sequence of nested meshes is constructed reducing the number of meshes according to the interpolation error. The new sequence of meshes is generated by succesive refinements of a very coarse basic mesh, an element T is refined only if(ηTI)2⩾γ2(ηmaxI)2so that the interpolation error has a very low value. Again(ηmaxI)2=maxT{(ηTI)2}, but now(ηTI)2=∫T(Cln+1-ICln+1)2dTis the interpolation error, beingCln+1the solution obtained for a certain mesh during the refine stage, andICln+1the interpolated ofCln+1onto the mesh generated during the coarsen stage. In the numerical examples γ2=0.001.If we observe Eqs. (18)–(21), the horizontal convective and diffusive terms can be computed simultaneously at all layers, but not the vertical convective and diffusive terms, and the crossed derivatives. We propose a further splitting in order to allow parallel computation: keeping unconditional stability and obviously the same order of accuracy, we split the horizontal convective and diffusive terms which can be parallel computed in all layers.The new splitting parallel algorithm is:•For l=1,…,L– Parallel loopCln+1/6-C¯lnΔt/2=0Cln+1/3-Cln+1/6Δt+12AlCln+1/3=12fn+1/3– Non-parallel loopCln+1/2-Cln+1/3Δt+Wl+Δz(Cln+1/2-Cl-1n+1/2)+K¯-Cl-1n+1/2+Cln+1/2(Δz)2+12Δz(-BlCl-1n+1/2)+12Δz(-DlCl-1n+1/2)=0For l=L,…,1– Non-parallel loopCln+2/3-Cln+1/2Δt-Wl-Δz(Cl+1n+2/3-Cln+2/3)+K¯Cln+2/3-Cl+1n+2/3(Δz)2+12Δz(BlCl+1n+2/3)+12Δz(DlCl+1n+2/3)=0– Parallel loopCln+5/6-Cln+2/3Δt+12AlCln+5/6=12fn+5/6Cln+1-C¯ln+5/6Δt/2=0Taking advantage of the software tools for parallelization, this parallel algorithm can reduce significantly the computation time thanks to the fact that the horizontal convective and diffusive terms in each layer can be computed simultaneously as we said before, achieving that the computing time is below the real time simulation. The solution obtained through parallelization has the same precision than the solution obtained through the sequential algorithm as the parallel algorithm has the same order precision than the sequential one, and it is also unconditionally stable, but the computational time is less (bellow real time of simulation). If we use more layers in the parallel algorithm we obtain a more accuracy solution with a small penalty in time, as more layers means more accuracy.For parallelization, we have used the shared memory paradigm, in particular the set of directives OpenMP [22], to distribute the corresponding load to each layer between the different cores of the machine.The reduction of the computation time is especially important as the number of layers increases, thereby improving the precision of the solution with a small penalty in time. Observe that each core computes the terms of one or more layers, so, using more cores than layers is pointless. In Table 1, we can see it when we use 8 or more cores for 6 layers.We compare computation time of the sequential algorithm (using only one core) and the parallel algorithm (using several cores) for 6, 12 ans 24 layers in Tables 1–3respectively. We get a time reduction factor up to 7,288 using 12 cores for 24 layers. This example has been computed on a Dell Precision T7500 workstation, equipped with 2 processors Intel Xeon X5650 (6 cores each one working at a frequency of 2.66GHz, 12 cores altogether) and 24GB RAM.The computation times of Tables 1–3 correspond to 100 time steps which represents 500s of real time of simulation of the example presented in next section. The maximum number of meshes during the adaptive processes on each layer is 9. Parallel time is the time spent in the parallel loops of the algorithm, sequential time is the time needed for the sequential ones, run time is the sum of both parallel and sequential times, speed up is defined as the ratio between the run time using one core and the run time using a defined number of cores, and the efficiency is calculated as the relation of the speed up and the number of cores used. Finally, the cost is the difference in time of using more layers than 6; also, we calculated the cost as the percentage in which the time is increased with respect to time using 6 layers.The following results correspond to 12 layers and 12 cores. The simulation is in an area of 5×5km2 in Cofrentes (Valencia, Spain) with a maximum difference height of 213m (see Fig. 1).The air layer studied is about 60m high over the surface (see Fig. 2).Using a punctual wind velocity measurement in the center of the domain of 5m/s north-west, the wind field is computed with the mass-consistent wind field model developed by authors ([14–16]) briefly described in the introduction. The wind field at ground level is shown in Fig. 3.The example presented here describes the atmospheric dispersion of a hypothetical continuous emission of a non reactive pollutant gas from an emission area placed to a height of 10 meters over the surface, 1.25km to the north and 3.75km to the east of the bottom left corner of the domain where the axis origin is placed. The stack diameter is d=10m, the concentration of the emission is Q=5000mg/m3, the stack exit velocity is Vs=1m/s and its temperature is Ts=373K, the atmospheric pressure is p=1024mbar and the ambient temperature at stack height is Ta=293K. The effective height of emission is computed using the Holland formula [18],Δh=Vsdus1.5+2.68×10-3pTs-TaTswhere usis the wind velocity in the emission area computed by the wind field model. The effective height computed is 14.91m.At the effective height, the emission is represented by the following expression,f(x,y)=QVs2Δze-4((x-x0)2+(y-y0)2)/d2where Δz is the thickness of the layer, Δz=5 for 12 layers, and (x0,y0) are the coordinates of the emission point.The dispersion coefficients σhand σzare computed by the following power-law expressions valid for distances between 100 meters and 10km for continuous emissions [19],σh=a·rb,σz=c·rd(10z0)m,where m=0.53·r−22 and the coefficients a, b, c and d depend on the Pasquill stability classes and roughness length z0. We have chosen z0=0.15m corresponding to a roughly open surface (low crops; occasional large obstacles) and stability class C (slightly unstable).Figs. 4–6shows the concentration at different levels and times. The highest concentration levels take place in the 10m−15m and 15m−20m layers as was to be expected since the effective height is 14.91m. The plume follows the main wind direction computed by the wind model in each level and it is possible to notice the effect of the wind field on the boundary of the plume.Fig. (7)represents the vertical distribution of pollutant concentration at four different distances downwind from the emission point, in order to clarify the pollutant concentration distribution along the plume. These four points are highlighted in the map of Fig. (8).In order to compare the numerical results with possible experimental measurements it is useful to compute the vertically integrated pollutant concentration, using a numerical integration method and the data of the several levels. In Fig. (8) the isolines of vertically integrated pollutant concentration are projected over the orographic map.

@&#CONCLUSIONS@&#
We present a non-reactive urban scale Eulerian air pollution model based on the conservation of mass equation describing convection, turbulent diffusion and emission. The wind field used in this air pollution model is computed with a mass-consistent wind field model developed by authors. We assume a Gaussian model to determine the diffusivity coefficients. We propose a numerical method to solve the corresponding parabolic convection–diffusion partial differential equation based on a combination of the Adaptive Finite Element Method with characteristics in the horizontal directions and Finite Differences in the vertical direction using splitting techniques in order to reduce the computational cost and provide solutions more accurate. We also present the parallel version of the algorithm with a significant reduction time. We present a numerical example describing the numerical solution from several points of view.