@&#MAIN-TITLE@&#
A heuristic hierarchical scheme for academic search and retrieval

@&#HIGHLIGHTS@&#
We present PubSearch, a new system for academic search and retrieval.PubSearch is based on a cascade hierarchy of three heuristics.The heuristics include Term-Frequency, citation distribution and topics’ inter-relations.We compare PubSearch performance against ACM Portal on 58 user queries.The system outperforms ACM Portal in terms of ERR, NDCG & LEX metric by large margin.

@&#KEYPHRASES@&#
Academic search,Search and retrieval,Heuristic document re-ranking,

@&#ABSTRACT@&#
We present PubSearch, a hybrid heuristic scheme for re-ranking academic papers retrieved from standard digital libraries such as the ACM Portal. The scheme is based on the hierarchical combination of a custom implementation of the term frequency heuristic, a time-depreciated citation score and a graph-theoretic computed score that relates the paper’s index terms with each other. We designed and developed a meta-search engine that submits user queries to standard digital repositories of academic publications and re-ranks the repository results using the hierarchical heuristic scheme. We evaluate our proposed re-ranking scheme via user feedback against the results of ACM Portal on a total of 58 different user queries specified from 15 different users. The results show that our proposed scheme significantly outperforms ACM Portal in terms of retrieval precision as measured by most common metrics in Information Retrieval including Normalized Discounted Cumulative Gain (NDCG), Expected Reciprocal Rank (ERR) as well as a newly introduced lexicographic rule (LEX) of ranking search results. In particular, PubSearch outperforms ACM Portal by more than 77% in terms of ERR, by more than 11% in terms of NDCG, and by more than 907.5% in terms of LEX. We also re-rank the top-10 results of a subset of the original 58 user queries produced by Google Scholar, Microsoft Academic Search, and ArnetMiner; the results show that PubSearch compares very well against these search engines as well. The proposed scheme can be easily plugged in any existing search engine for retrieval of academic publications.

@&#INTRODUCTION@&#
Academic research has been revolutionized since the days of standard library-based research, mostly by the advancements of the internet and the world-wide web, and by the break-through advancements of companies such as Google. And yet, searching for papers on specific topics on standard digital libraries such as ACM or IEEE digital libraries often leads to top results that are not as satisfactory as the search results on more generic queries such as those depicted on Yahoo!’s “Trending Now” section. For example, searching for the terms “Web Information Retrieval” on ACM Portal (http://portal.acm.org) the top 100 results do not include the—required reading—paper on “The anatomy of a large-scale hyper textual web search engine” defining Google’s Page-Rank algorithm (Brin & Page, 1998). Similarly, on the IEEE Xplore’s web site, the query results fail to include the paper in the first one hundred results. The same query when submitted on Microsoft’s Academic Search (http://academic.research.microsoft.com) fails to return the landmark paper among the 266 results it returns even though its database contains the paper. Even on Google Scholar (http://scholar.google.com), when submitting the same query, the paper appears buried in the 27th position–in the third page of results–despite the fact that by the same system’s account, the paper has received 8000 citations to date!. Notice that the terms “Web” and “Information Retrieval” both appear as keywords in the afore-mentioned paper, yet none of the major academic search engines manages to return the article in a high position among its result set. As another example, when searching for “peer-to-peer protocol”, ACM Portal returns the landmark paper “Chord: a scalable peer-to-peer lookup protocol for internet applications” (Stoica et al., 2003) that has received more than 1900 citations in the 43rd position in the results list (on the third page of results). From the examples above, it becomes apparent that while web information retrieval in general has advanced to a very mature state, academic search has still some way to go before reaching maturity (Beel & Gipp, 2009; Walters, 2007).In this paper, we propose a heuristic hierarchical scheme for re-ranking publications returned from standard digital libraries such ACM Digital Library and evaluate the scheme based on the feedback of users. The scheme relies on a combination of a custom implementation of the term frequency heuristic that takes into account the positioning of the query terms in the document and their relative distance in-between sentences, paragraphs and sections, the annual distribution of the paper’s citation count and the paper’s index terms from the ACM Document Classification System. In particular, index terms are grouped together in cliques according to the co-occurrence of pairs of terms in the literature (see Tang, Jin, and Zhang (2008) for a related approach to topic modeling); a paper’s index terms are then matched (as a set) against pre-computed cliques of terms that have been obtained by crawling offline a large sample of papers in the ACM Portal. This crawling process resulted in the formation of a set of graphs connecting index terms according to the authors and co-authors who work on these topics as well as the papers’ index terms (Section 2 provides all necessary details). The properties we use are ordered in a hierarchy. Each property is used to obtain an ordering of the results, which are then clustered together in buckets; within each bucket, the results contained in it are further re-ranked using the property that is immediately lower in the hierarchy of properties, and then further clustered together in finer-grain buckets. In the bottom-end of the hierarchy, the ordered documents within each bucket together with the order of the buckets forms a new ordering of the original results to the submitted query.The remainder of this paper is organized as follows. A brief overview of related work is presented in Section 1.1. Section 2 describes the system architecture & design and applies all ranking algorithms we implemented. The design of our experimental test-bed is analyzed in Section 3. Experimental results are described in Section 4. Finally, in Section 5 we present our conclusions and plans for future work.

@&#CONCLUSIONS@&#
