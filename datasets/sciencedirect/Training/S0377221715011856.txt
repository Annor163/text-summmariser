@&#MAIN-TITLE@&#
Min–max regret version of a scheduling problem with outsourcing decisions under processing time uncertainty

@&#HIGHLIGHTS@&#
We consider a single-machine scheduling problem with an outsourcing option.Processing times are uncertain and expressed as the set of scenarios.The objective is to minimize the maximum regret over all scenarios.We establish the computational complexity such as NP-hardness and FPTAS.We investigate several conditions under which the problem can be polynomial.

@&#KEYPHRASES@&#
Scheduling,Uncertainty,Outsourcing,Computational complexity,

@&#ABSTRACT@&#
We consider the min-max regret version of a single-machine scheduling problem to determine which jobs are processed by outsourcing under processing time uncertainty. The performance measure is expressed as the total cost for processing some jobs in-house and outsourcing the rest. Processing time uncertainty is described through two types of scenarios: either an interval scenario or a discrete scenario. The objective is to minimize the maximum deviation from optimality over all scenarios. We show that when the cost for in-house jobs is expressed as the makespan, the problem with an interval scenario is polynomially solvable, while the one with a discrete scenario is NP-hard. Thus, for the discrete scenario case, we develop a 2-approximation algorithm and investigate when the problem is polynomially solvable. Since the problem minimizing the total completion time as a performance measure for in-house jobs is known to be NP-hard for both scenarios, we consider the problem with a special structure for the processing time uncertainty and develop a polynomial-time algorithm for both scenarios.We study a single-machine scheduling problem with outsourcing decisions under processing time uncertainty. While typical scheduling problems assume that all jobs are processed on an in-house machine, we consider another option where jobs can be outsourced to an subcontractor to improve the performance measure. The performance measure is expressed as the total cost of using an in-house machine to process jobs and pay subcontractors who process the outsourced jobs. Our model assumes that the cost for in-house jobs is the latest completion time of in-house jobs, called the makespan, or the total completion time. Further, the objective of our scheduling problem is to minimize the maximum deviation from optimality over all scenarios, referred to as the min-max regret version.In this paper, we assume that processing time uncertainty is described through a scenario, which corresponds to the assignment of feasible values of processing times. We consider two types of scenarios, introduced by Kouvelis and Yu (1997). The interval scenario represents the case where the uncertainty for the processing time of a job j is described as the interval of uncertainty[pjL,pjU],wherepjLandpjUdenote the lower and upper bounds on the processing time of job j, respectively. Since each processing time can take on any real value within its interval of uncertainty, the set of scenarios is the Cartesian product of the intervals of uncertainty[pjL,pjU]. Note that the number of scenarios in the interval scenario case is infinite. On the other hand, the discrete scenario represents the case where the uncertainty for the processing times is described through a finite set of processing times vectors. Hence, a discrete scenario is defined as a vector of processing times.Our problem has a practical importance since it can be applied to the various kinds of situations where manufacturing firms consider an outsourcing option. Many manufacturing companies entrust a non-critical portion of their operations to a third party to reduce total costs, shorten lead times, and make their production systems more flexible; see Cachon and Harker (2002); Wu, Chien, and Gen (2012) for details. In general, oursourcing is a very good strategic option to deal with uncertainties and prepare the operational risks. Typically, processing times can change due to many uncertain factors, such as the introduction of new machines, disruptions in the finished product’s delivery, and changes in statistical values. Therefore, we should consider a scheduling problem that has an outsourcing option to deal with the processing time uncertainty within in-house manufacturing process as motivated by the previous work in Ghezavati and Saidi-Mehrabad (2010); Liu, Wang, Chen, and Yang (2014).The literature on single-machine scheduling with an outsourcing option has studied the problem of simultaneously deciding which jobs to be outsourced and how to schedule in-house jobs. Vickson (1980) considered a single-machine scheduling problem to minimize the sum of the total completion time and the total compression cost. Note that the compression cost in Vickson (1980) can be interpreted as the outsourcing cost of our problem. He showed that the problem can be reduced to the assignment problem, which is shown to be polynomially solvable. Lee and Sung (2008) considered a single-machine scheduling problem to minimize the weighted sum of the outsourcing cost and total completion time subject to a budget constraint on outsourcing. They showed that the problem is NP-hard in the ordinary sense and presented two heuristics and a branch-and-bound algorithm. Bartal, Leonardi, Marchetti-Spaccamela, Sgall, and Stougie (2000) considered a parallel machine scheduling problem in which the objective is to minimize the sum of the makespan and total outsourcing cost. Chen and Li (2008) considered a parallel machine scheduling problem to minimize the total production cost subject to a constraint on the makespan. Qi (2009) considered a two-stage flow shop scheduling problem that allows only operations in the first stage to be outsourced. For practical reasons, Qi’s model considered a single-batch system with a transportation delay, with the objective of minimizing the makespan subject to the constraint on the maximum outsourcing cost. Qi (2011) presented two-stage flow shop models with different types of outsourcing options. Choi and Chung (2011) considered a two-stage flow shop model with outsourcing option, in which the objective is to minimize the sum of the makespan and total outsourcing costs. They showed that the problem is NP-hard in the ordinary sense, and investigated a special case. Further, Chung and Choi (2013) presented an approximation algorithm for the model that was introduced in Choi and Chung (2011), and then analyzed the computational complexity for the special cases. Chung, Lee, Shin, and Park (2005) also considered a job shop scheduling problem with an outsourcing option.Combinatorial optimization problems under scenario-based uncertainty have been extensively studied in Aissi, Bazgan, and Vanderpooten (2007); 2009); Kasperski and Zielinski (2006); Kouvelis and Yu (1997). In Daniels and Kouvelis (1995); Kasperski and Zielinski (2008); Kouvelis, Daniels, and Vairaktarakis (2000); Lebedev and Averbakh (2006), the approaches developed above have been applied to machine scheduling problems. Daniels and Kouvelis (1995), Lebedev and Averbakh (2006), and Kasperski and Zielinski (2008) considered the min-max regret version of a single-machine scheduling problem to minimize the total completion time with uncertain processing times. Daniels and Kouvelis (1995) showed that the discrete scenario case is NP-hard and developed exact and heuristic algorithms to solve the problem. Lebedev and Averbakh (2006) showed that the interval scenario case is NP-hard, and investigated the structural properties that would make the problem polynomially solvable. Kasperski and Zielinski (2008) showed that the interval scenario case is approximable within two. Kouvelis et al. (2000) and Kasperski, Kurpisz, and Zielinski (2012) considered the min-max regret version of a two-machine flow shop to minimize the makespan with uncertain processing times. Kouvelis et al. (2000) showed that both scenario cases are NP-hard and presented exact and heuristic solution approaches. Kasperski et al. (2012) showed that both scenario cases are strongly NP-hard and established their approximability.Note that the objective of the problems in Aissi, Alouloua, and Kovalyov (2011); Aloulou and Croce (2008); Mastrolilli, Mutsanas, and Svensson (2013); Yang and Yu (2002) is to minimize the maximum cost over all scenarios, referred to as the min-max version. Yang and Yu (2002) considered a min-max version of the problem of scheduling n jobs on a single machine to minimize the total completion time with uncertain processing times. They proved that the discrete scenario case is NP-hard and presented a dynamic programming method and two heuristic algorithms. Aloulou and Croce (2008) considered the min-max version of a single-machine scheduling problem where due dates, weights, and processing times are uncertain. The performance measures considered were the total weighted completion time, the general maximum cost function, and the number of tardy jobs. They established the computational complexity of discrete scenario cases for the various combinations of uncertain job parameters and performance measures, except for the case where the due dates are uncertain and the performance measure is the number of late jobs. Aissi et al. (2011) later showed the NP-hardness for that problem. To the best of our knowledge, however, the scheduling problem with an outsourcing option under uncertain job processing times has not yet been studied.The rest of our paper is organized as follows. In Section 2, we provide the definition of our scheduling problem to consider outsourcing decisions under processing time uncertainty. The objective for the in-house jobs is to minimize either the makespan or the total completion time. In Sections 3, we show that the scheduling problem minimizing the makespan with the interval scenario is polynomially solvable. We also establish the computational complexity for the problem with a discrete scenario and determine the condition under which the problem can be polynomially solvable. In Section 4, we consider the scheduling problem minimizing the total completion time and show that it is polynomially solvable for both the discrete and interval scenarios under some special structure of processing time uncertainty. Finally, we conclude with our contributions and provide the direction for future research.In this section, we define our problems formally. Consider the setJ={1,2,…,n}of n independent jobs that can be either processed on a single in-house machine or outsourced to a subcontractor. In this paper, we assume that the capacity of the subcontractor is infinite, that is, all jobs may be outsourced. The processing time uncertainty is described as the set of scenarios denoted S. Letpjsdenote the processing time of job j under scenario s ∈ S. In the interval scenario, the processing time of job j is given as any value within the interval[pjL,pjU],wherepjL:=min{pjs∣s∈S}andpjU:=max{pjs∣s∈S}. A discrete scenario s ∈ S is described as a vector of processing times(p1s,p2s,…,pns).While the processing time uncertainty is one of the main issues in our scheduling problem, we are also interested in determining whether each job is processed in-house or outsourced. Let (I, O, σ) be the schedule such that•I and O are the sets of in-house and outsourced jobs, respectively, whereI∪O=JandI∩O=∅,σ is a sequence of jobs in I.LetCjs(σ)be the completion time of job j ∈ I in sequence σ under scenario s and let ojbe the outsourcing cost for job j ∈ O.In this paper, we study two problems, with two different expressions for the cost of in-house jobs: the makespan or the total completion time. The total cost in the first criterion, referred to as Problem MSO, is expressed as the sum of the makespan and the total outsourcing cost, that is,fsm(I,O,σ)=∑j∈Ipjs+∑j∈Ooj,wherefsm(I,O,σ)is the total cost of the schedule (I, O, σ) under scenario s. Since the cost for in-house jobs is expressed as the makespan in Problem MSO, however, the sequence of in-house jobs does not affect the total cost. For the simplicity of notation, henceforth, we use (I, O) instead of (I, O, σ) as the schedule for Problem MSO. The objective of Problem MSO is to find an optimal schedule (I*, O*) to minimizeZm(I*,O*)=maxs∈S{fsm(I*,O*)−fsm(Is*,Os*)},where(Is*,Os*)is the optimal schedule to minimize the total cost under scenario s.The total cost of the other problem, referred to as Problem TCO, is to minimize the sum of the total completion time and total outsourcing cost, that is,fst(I,O,σ)=∑j∈ICjs(σ)+∑j∈Ooj,wherefst(I,O,σ)is the total cost of the schedule (I, O, σ) under scenario s. The objective of Problem TCO is to find an optimal schedule (I*, O*, σ*) to minimizeZt(I*,O*,σ*)=maxs∈S{fst(I*,O*,σ*)−fst(Is*,Os*,σs*)},where(Is*,Os*,σs*)is the optimal schedule to minimize the total cost under scenario s.In this section, we establish the computational complexity of the interval and discrete scenario cases, and introduce the property that makes the discrete scenario case polynomially solvable.In this section, we prove that the interval scenario case is polynomially solvable, while the discrete scenario case is NP-hard even if the number of scenarios is only two. Furthermore, we show that the discrete scenario case has a fully polynomial time approximation scheme (FPTAS) if the number of possible scenarios is fixed, while it becomes strongly NP-hard if that number is variable.Lemma 1For the interval scenario case, there exists an optimal schedule (I*, O*) such that j ∈ I*whenpjL+pjU≤2oj,and j ∈ O*whenpjL+pjU>2ojfor all j ∈ J.Observe that ifoj<pjL,then job j should be outsourced in an optimal schedule and ifoj>pjU,then job j should be processed in-house in an optimal schedule. Henceforth, we consider the remaining jobs such that for all j ∈ J,pjL≤oj≤pjU. It is observed that for a scenario s ∈ S, an optimal schedule(Is*,Os*)can be constructed by lettingj∈Os*ifpjs≥ojand otherwisej∈Is*. Thus, the objective value of(Is*,Os*)can be expressed as follows:fsm(Is*,Os*)=∑j=1nmin{pjs,oj}.Then, for an arbitrary schedule (I, O),Zm(I,O)=maxs∈S{fsm(I,O)−fsm(Is*,Os*)}=maxs∈S{∑j∈I(pjs−min{pjs,oj})+∑j∈O(oj−min{pjs,oj})}.Sincepjs−min{pjs,oj}andoj−min{pjs,oj}are non-decreasing and non-increasing functions forpjs,respectively,Zm(I,O)=∑j∈I(pjU−min{pjU,oj})+∑j∈O(oj−min{pjL,oj}).SincepjL<oj<pjU,we obtain thatmin{pjU,oj}=ojandmin{pjL,oj}=pjL. Thus,(1)Zm(I,O)=∑j∈I(pjU−oj)+∑j∈O(oj−pjL).Consider the following two cases.Case 1: There exists an optimal schedule (I*, O*) such that i ∈ I* andpiL+piU>2oi. Let(I¯,O¯)be the schedule such thatI¯=I*∖{i}andO¯=O*∪{i}. Then, by Eq. (1),Zm(I¯,O¯)−Zm(I*,O*)=oi−piL−piU+oi=2(oi−piL+piU2)<0.This is the desired contradiction.Case 2: There exists an optimal schedule (I*, O*) such that h ∈ O* andphL+phU<2oh. Let(I^,O^)be the schedule such thatI^=I*∪{h}andO^=O*∖{h}. Then, by Eq. (1),Zm(I^,O^)−Zm(I*,O*)=phU−oh−oh+phL=2(phU+phL2−oh)<0.This is also a contradiction.In the two cases above, we conclude that an optimal schedule satisfying Lemma 1 can be obtained.□Lemma 1 implies that if the median of job j’s processing time is larger than its outsourcing cost, then job j is outsourced and otherwise processed in-house. Further, we have Corollary 1 directly from Lemma 1.Corollary 1Problem MSO with the interval scenario is solvable in O(n) time.We next study the problem MSO which has the discrete scenario for the processing time uncertainty. We show in Theorem 1 that this problem is NP-hard.Theorem 1Problem MSO with the discrete scenario is NP-hard, even when the number of possible scenarios is only two.The proof is by reduction from the partition problem which is proven to be NP-hard in Garey and Johnson (1979). Consider the partition problem (P): Given n integers a1, a2, … , ansuch that∑j=1naj=2A,is there a set B ⊆ {1, 2, … , n} such that∑j∈Baj=A?Given an instance of the partition problem (P), we can construct a two-scenario instance of the discrete scenario case as follows. Letpjs=αspjfors=1,2such thats∖j12⋯npjs1a1a2⋯an23a13a2⋯3anoj2a12a2⋯2anNote thatα1=1andα2=3. Clearly, this reduction can be done in polynomial time. It is observed from this reduction that1.In an optimal schedule fors=1,all jobs should be processed in-house becausepj1<ojfor j ∈ J. We obtain thatf1m(I1*,O1*)=2A.In an optimal schedule fors=2,all jobs should be outsourced becausepj2>ojfor j ∈ J. We obtain thatf2m(I2*,O2*)=4A.For (I, O), we have thatf1m(I,O)=∑j∈Ipj1+∑j∈Ooj=∑j∈Iaj+∑j∈O2aj=2A+∑j∈Oajandf2m(I,O)=∑j∈Ipj2+∑j∈Ooj=∑j∈I3aj+∑j∈O2aj=4A+∑j∈Iaj.Thus,(2)Zm(I,O)=max{f1m(I,O)−f1m(I1*,O1*),f2m(I,O)−f2m(I2*,O2*)}=max{∑j∈Oaj,∑j∈Iaj}.We next show that there exists a schedule (I, O) such that Zm(I, O) ≤ A if and only if there exists a solution to the partition problem (P). However, this holds immediately from equality (2). The proof is complete.□Problem MSO with the discrete scenario has an FPTAS, if the number of possible scenarios is a constant.We show that Problem MSO with the discrete scenario is polynomially reducible to a min-max shortest path problem with k scenarios that can be stated as follows: Given a graphG=(V,A)with a node set V and an arc set A, a length vectorci,j=(ci,js)s=1,2,…,kwhereci,jsis the cost of arc (i, j) ∈ A under scenario s, an origin node N0 ∈ V and a destination nodeNn+1∈V,the objective is to find the shortest path of minimum total length from N0 toNn+1in the worst scenario, that is,minP∈Pmaxs∈{1,2,…,k}{∑(i,j)∈Pci,js},where P is a path from N0 toNn+1andPis the set of the feasible paths. It is known from Corollary 1 in Aissi et al. (2007) that a min-max shortest path problem has an FPTAS, if k is a fixed number. Forg=1,2,…,n,let Ngdenote a node representing that jobs in {1, 2, … , g} have been determined to be processed in-house or outsourced. Let N0 andNn+1be the origin and the destination nodes, respectively. Forg=0,1,…,n−1,let Ngbe connected to the following nodes:•Ni, fori=g+1,g+2,…,n+1,with the length vector cg,i, defined below:cg,i=(∑j=g+1i−1oj+pi1−∑j=g+1imin{oj,pj1},…,∑j=g+1i−1oj+pik−∑j=g+1imin{oj,pjk}),whereon+1=pn+11=⋯=pn+1k=0. Note that in Problem MSO, these arcs means that the jobs in{g+1,g+2,…,i−1}are outsourced and job i is processed in-house.The resulting network is depicted in Fig. 1. Clearly, this reduction can be done in polynomial time, and the objective values of the optimal schedule for Problem MSO and the shortest path for the reduced problem are identical. Thus, the proof is immediately obtained from Corollary 1 in Aissi et al. (2007). The proof is complete.□Problem MSO with the discrete scenario is strongly NP-hard, if the number of possible scenarios is part of the problem instance.The proof is by reduction from the exact cover by 3-sets (X3C) problem which is proven to be NP-complete in the strong sense in Garey and Johnson (1979). Consider the X3C problem: Given a setX={1,2,…,3q}and a collectionH={H1,H2,…,Hg}of 3-element subsets of X, is there a subcollectionH′⊆Hsuch that each element of X occurs in exactly one subset inH′?The decision version of Problem MSO can be stated as follows: Given a threshold λ, is there a feasible schedule (I, O) with Zm(I, O) ≤ λ?Given an instance of the X3C problem, we can construct the following instance of the discrete scenario case. LetS=X∪{3q+1}andn=g. Forj=1,2,…,g,pjs={2ifs∈Hj,1otherwise,pj3q+1=1−1g−q,andoj=1.Letλ=1. Clearly, this reduction can be done in polynomial time. One numerical example for the reduction above is given as follows: Consider the instance of X3C problem such thatq=3,g=7,•X={1,2,…,9};H1={2,5,6},H2={1,4,7},H3={1,4,8},H4={3,6,9},H5={3,8,9},H6={4,5,8}andH7={2,4,9}.Through our reduction scheme, the instance of Problem MSO can be constructed from the instance above as follows: Lets=10,n=7,oj=1,ands∖j12345671122111122111112311122114122112252111121621121117121111181121221911122121034343434343434It is observed from this reduction that•Under scenarios=1,2,…,3q,an optimal schedule is to outsource all jobs, that is,Is*=∅andOs*={1,2,…,g}. Thus, fors=1,2,…,3q,fsm(Is*,Os*)=g.Under scenarios=3q+1,an optimal schedule is to process all jobs in-house, that is,Is*={1,2,…,g}andOs*=∅. Thus,f3q+1m(I3q+1*,O3q+1*)=g(1−1g−q)Hence, we show that there exists a feasible (I, O) with Zm(I, O) ≤ 1 if and only if there exists a feasible set to the X3C problem.Suppose that there exists a feasible subcollectionH¯′={H¯1′,H¯2′,…,H¯q′}for the X3C problem. LetI¯be the set of in-house jobs corresponding to the 3-element sets inH¯′,andO¯be the set of the others that are outsourced. By the property ofH¯′,it is observed that•|I¯|=qand|O¯|=g−q;Under each scenarios=1,2,…,3q,the number of in-house jobs j withpjs=2is one, and thus,fsm(I¯,O¯)=g+1.Under scenario3q+1,f3q+1m(I¯,O¯)=q(1−1g−q)+g−q.Then, fors=1,2,…,3q+1,fsm(I¯,O¯)−fsm(Is*,Os*)=1.Suppose that there exists a feasible schedule(I^,O^)withZm(I^,O^)≤1. We claim that|I^|=q. To prove this claim, we consider the following two cases.(i)|I^|<q: In this case,f3q+1m(I^,O^)−f3q+1m(I*,O*)=g−|I^|g−q−(g−gg−q)=g−|I^|g−q>1.|I^|>q: Note that each job has three scenarios under which its processing time is two. Thus, in this case, there should be a scenario s′ ∈ {1, 2, … , 3q} such that at least two jobs whose processing times are 2 are processed in-house in(I^,O^). Thus,fs′m(I^,O^)−fs′m(I*,O*)≥g+2−g=2.Since two cases above are contradictory, we obtain that|I^|=q.Observe from|I^|=qthat•Since each job has three scenarios under which its processing time is two, there should be only one job whose processing time is two under each scenario in {1, 2, … , 3q}. Thus, fors=1,2,…,3q,fsm(I^,O^)−fsm(I*,O*)≥g+1−g=1.Under scenario3q+1,f3q+1m(I^,O^)−f3q+1m(I*,O*)=g−qg−q−(g−gg−q)=1.Then, we can construct a subcollectionH^′by the 3-element sets corresponding to in-house jobs inI^such that each element of {1, 2, … , 3q} occurs in exactly one subset inH^′.□Since Problem MSO with the discrete scenario is strongly NP-hard, we develop a 2-approximation algorithm.Theorem 3Problem MSO with the discrete scenario has a 2-approximation algorithm.Problem MSO can be formulated as the following integer programming (IP):minZm(I,O)s.t.Zm(I,O)≥∑j=1npjsxj+∑j=1noj(1−xj)−∑j=1nmin{pjs,oj}∀s∈Sxj∈{0,1}∀j∈J,wherexj=1if job j is processed in-house and otherwise,xj=0. LetxLP=(x1LP,x2LP,…,xnLP)be an optimal solution for the linear programming (LP) relaxation of the IP above. Then, we develop the following approximation algorithm:Algorithm APPStep 1Obtain xLP for the IP of Problem MSO.Constructx¯by lettingx¯j={1ifxjLP≥12,0otherwiseNow, we prove the 2-approximability of Algorithm APP. For the simplicity of notation, let A be the set of jobs j ∈ J such thatxjLP≥1/2and B be the set of the remaining jobs. Let(I¯,O¯)be the schedule corresponding tox¯,and ZLP be the optimal value of the LP relaxation. Then, for each s ∈ S,(3)ZLP≥∑j=1noj+∑j=1n(pjs−oj)xjLP−∑j=1nmin{pjs,oj}=∑j=1noj+∑j∈A(pjs−oj)x¯j−∑j=1nmin{pjs,oj}−Δs,whereΔs=∑j∈A(pjs−oj)(1−xjLP)−∑j∈B(pjs−oj)xjLP. Now we show that ZLP ≥ Δsfor each s ∈ S. For each s ∈ S,ZLP−Δs≥∑j∈A(oj+(pjs−oj)(−1+2xjLP)−min{pjs,oj})+∑j∈B(oj+2(pjs−oj)xjLP−min{pjs,oj}).For j ∈ A such thatpjs−oj≥0,sincexjLP≥1/2,oj+(pjs−oj)(−1+2xjLP)−min{pjs,oj}=(pjs−oj)(−1+2xjLP)≥0.For j ∈ A such thatpjs−oj<0,sincexjLP≤1,oj+(pjs−oj)(−1+2xjLP)−min{pjs,oj}=−2(pjs−oj)(1−xjLP)≥0.For j ∈ B such thatpjs−oj≥0,sincexjLP≥0,oj+2(pjs−oj)xjLP−min{pjs,oj}=2(pjs−oj)xjLP≥0.For j ∈ B such thatpjs−oj<0,sincexjLP<1/2,oj+2(pjs−oj)xjLP−min{pjs,oj}=−(pjs−oj)(1−2xjLP)≥0.Thus, we obtain that ZLP ≥ Δsfor each s ∈ S. Further, inequality (3) is rewritten as follows: for each s ∈ S,(4)2ZLP≥∑j=1noj+∑j∈A(pjs−oj)x¯j−∑j=1nmin{pjs,oj}.By inequality (4) and ZLP ≤ Zm(I*, O*),Zm(I¯,O¯)≤2ZLP≤2Zm(I*,O*).Therefore, we conclude that APP is a 2-approximation algorithm.□In this section, we consider the discrete scenario case withpjs=pj+αs,where the set of scenarios is {α1, α2, … , αk}. Note that αscan be interpreted as the uncertain factor of scenario s. This structure of uncertain processing times represents the uncertainty weight of a scenario having the same impact on all jobs through the same constant. This expresses a manufacturing environment such that•All jobs are processed on the same machine.Each job is subject to the same impact, depending on the machine’s state, such as its speed and the degree of deterioration.We show that the discrete scenario case withpjs=pj+αsis polynomially solvable.Lemma 2Suppose thatp1−o1≥p2−o2≥⋯≥pn−on. If h ∈ O*in an optimal schedule (I*, O*) of the discrete scenario case of Problem MSO withpjs=pj+αs,then{1,2,…,h−1}⊂O*.Suppose by contradiction that there exists an optimal schedule (I*, O*) such that jobh−1is processed in-house and job h is outsourced, that is,h−1∈I*and h ∈ O*. We can construct a new schedule(I¯,O¯)by lettingI¯=(I*∖{h−1})∪{h}andO¯=(O*∖{h})∪{h−1}. Sincephs=ph+αsandph−1s=ph−1+αs,we have that for each scenario s,fsm(I¯,O¯)−fsm(I*,O*)=∑j∈I¯pjs+∑j∈O¯oj−(∑j∈I*pjs+∑j∈O*oj)=phs+oh−1−ph−1s−oh=ph−oh−(ph−1−oh−1)≤0.This implies thatZm(I¯,O¯)≤Zm(I*,O*). Thus, by using this argument repeatedly, we can construct the optimal schedules satisfying Lemma 2 without increasingfsm(I*,O*). The proof is complete.□Lemma 2 implies that when the uncertainty weight of each scenario has the same impact on all jobs through the same constant, the job with the larger value of processing time minus outsourcing cost has a higher outsourcing priority than a job with a smaller such value.Theorem 4The discrete scenario case of Problem MSO withpjs=pj+αsis solvable in O(nlog n) time.It observed from Lemma 2 that the following set of schedules contains at least one optimal schedule:{(J,∅),(J∖{1},{1}),…,({n},J∖{1,2,…,n−1}),(∅,J)}.Theorem 4 immediately holds from the above observation. The proof is complete.□In this section, we consider the Problem TCO, which is equivalent to the min-max regret version of 1||∑Cj, when the outsourcing costs are large enough. Note, however, that the min-max regret version of 1||∑Cjfor both interval and discrete scenarios is known to be NP-hard in Kouvelis and Yu (1997); Lebedev and Averbakh (2006). Thus, we study a special case of the Problem TCO with the processing time uncertainty such thatpjs=pj+αs. Note that in the interval scenario case, the uncertainty value of αshas any real value from [αL, αU], where αLand αUare the lower and the upper bounds of αs, respectively. On the other hand, the discrete scenario case has the finite set of scenarios {α1, α2, … , αk}. Without loss of generality, assume in the discrete scenario case thatAssumption 1α1 < α2 < ⋅⋅⋅ < αk.It is clear that in-house jobs should be processed in the increasing order of pj, referred to as the shortest processing time(SPT) order, in an optimal schedule since the total cost for in-house jobs is expressed as the total completion time. Whenpjs=pj+αs,we observe that the SPT order in an optimal schedule is same for all scenarios. That is, in-house jobs are always processed in the increasing order of pjin any optimal schedule. Thus, we use (I, O) instead of (I, O, σ) throughout this section. Let (I*, O*) denote an optimal schedule to minimize Zt(I, O). Without loss of generality, we assume thatAssumption 2p1 ≤ p2 ≤ ⋅⋅⋅ ≤ pn.In this subsection, we develop a polynomial-time algorithm to find an optimal schedule(Is*,Os*)for s ∈ S. We formulatefst(I,O)as a0−1quadratic programming(QP). Define binary variablesxj=1if j ∈ I and otherwisexj=0. Then,(5)fst(I,O)=∑j=1nxj∑i=1jpisxi+∑j=1noj(1−xj).Letx=(x1,…,xn)Tbe the n-dimensional vector and xTbe its transpose. Sincexj=xj2,formulation (5) can be rewritten asfst(I,O)=xTQsx+∑j=1noj,whereQs=(qs,i,j)i=1,⋯,nj=1,⋯,nis an n × n matrix, defined as follows:qs,i,j={pi+αsifi<j,pj+αs−ojifi=j,0otherwise.Note that qs,i,jis the (i, j)th element of Qs. For simplicity, let the0−1quadratic programming to minimizexTQsx+∑j=1nojbe referred to as0−1QP(αs).First, we introduce one lemma which is used to develop a new algorithm.Lemma 3Letl=min{i|qs,i,i≤qs,j,jforj=1,2,…,n}in0−1QP(αs). If qs,l,l< 0, then there exists an optimal schedule withxl=1and otherwise (0, 0, … , 0)Tis an optimal schedule.If qs,l,l≥ 0, then qs,i,j≥ 0,i=1,2,..,n,j=1,2,….,n. Thus, clearly, (0, 0, … , 0)Tbecomes an optimal schedule. Hence, we only consider the case with qs,l,l< 0. Suppose that there exists an optimal schedulex¯such thatx¯l=0. Letr:=max{j|x¯j=1forj=1,2,…,n}.Then, we can construct a new schedulex^by lettingx^l=1,x^r=0,andx^j=x¯jfor j ∈ {1, 2, … , n}∖{l, r}. Consider the following two cases.Case 1: r < l. Since vectorsx¯andx^are identical except for the lth and rth elements andqs,i,r=qs,i,l,i=1,2,…,r,(6)∑j=1r−1x¯j∑i=1jqs,i,jx¯i=∑j=1r−1x^j∑i=1jqs,i,jx^iandx¯r∑i=1r−1qs,i,rx¯i=x^l∑i=1r−1qs,i,lx^i.Thus, by Eqs. (6) and qs,r,r> qs,l,l,x¯TQsx¯−x^TQsx^=qs,r,r−qs,l,l>0.Case 2: r > l. Since vectorsx¯andx^are identical except for the lth and rth elements, we have that(7)∑j=1r−1x¯j∑i=1jqs,i,jx¯i=∑j=1r−1x^j∑i=1jqs,i,jx^i,(8)∑j=l+1r−1x¯j∑i=1l−1qs,i,jx¯i=∑j=l+1r−1x^j∑i=1l−1qs,i,jx^i,and(9)∑j=l+1r−1x¯j∑i=l+1jqs,i,jx¯i=∑j=l+1r−1x^j∑i=l+1jqs,i,jx^i.Furthermore, from the structure of Qs, we obtain that•qs,i,r=qs,i,lfori=1,…,l−1;Ifl+1≤i≤r−1,then qs,i,r≥ qs,l,j,j=l+1,…,r−1.Thus, by Eqs. (7)–(9), the observations above,x¯j=x^j,j=l+1,…,r−1,x¯r=x^l=1,and qs,r,r≥ qs,l,l,x¯TQsx¯−x^TQsx^=∑i=l+1r−1(qs,i,r−qs,l,i)x^i+qs,r,r−qs,l,l≥0.By the above two cases, the proof is complete.□It is observed from Lemma 3 that when qs,l,l< 0, the optimal schedule of0−1QP(αs) is identical to the one of0−1QP(αs) withxl=1. Note that0−1QP(αs) withxl=1can be reformulated as0−1QP(αs) by using the variables in {x1, x2, … , xn}∖{xl}. For simplicity of notations, letx˜j=xj,j=1,2,…,l−1andx˜j=xj+1,j=l,l+1,…,n−1. Then,0−1QP(αs) withxl=1can be reduced to the0−1quadratic programming to minimizex˜TQ˜sx˜,whereQ˜s=(q˜s,i,j)i=1,⋯,n−1j=1,⋯,n−1is constructed as follows:q˜s,i,j={0ifi>jqs,i,i+qs,i,l=pi−oi+pi+2αsifi=jandi≤l−1qs,j+1,j+1+qs,l,j+1ifi=jandj≥l=pj+1−oj+1+pl+2αsqs,i,j+1=pi+αsifi<jandi≤l−1qs,i+1,j+1=pi+1+αsifi<jandi≥l.The structure of matrixQ˜sis basically equivalent to that of matrix Qs, in that•If i > j, the (i, j)th element is zero;If i < j < j′, thenqs,i,j=qs,i,j′andq˜s,i,j=q˜s,i,j′.Thus, it is observed that Lemma 3 can be applied to the0−1quadratic programming to minimizex˜TQ˜sx˜. That is, ifl′=min{i|q˜s,i,i≤q˜s,j,jforj=1,2,…,n−1}andq˜s,l′,l′<0,then there exists an optimal solution withxl′=1in the0−1quadratic programming that minimizesxTQ˜sx. By repeatedly applying this argument, we develop the new algorithm to solve0−1QP(αs) as follows.Algorithm QPStep 0:Seth=1,Qs(h)=Qs,I=∅andO={1,⋯,n}.Select the smallest index lhfrom set{i|qs,i,i(h)≤qs,j,j(h)for j ∈ O}. Let lhbe the index selected in iteration h. Ifqs,lh,lh(h)≥0,go to Step 2, and otherwise go to Step 3.Obtain an optimal schedule x* such thatxj*=1for j ∈ I andxj*=0for j ∈ O, and compute(x*)TQsx*+∑j=1noj. STOP.From an initial matrix Qs, find the index πs(h) corresponding to lh. LetI=I∪{πs(h)}andO=O∖{πs(h)}.Construct an(n−h)×(n−h)matrixQs(h+1)=(qs,i,j(h+1))i=1,⋯,n−hj=1,⋯,n−h,which is constructed as follows:qs,i,j(h+1)={0ifi>jqs,i,i(h)+qs,i,lh(h)ifi=jandi≤lh−1qs,j+1,j+1(h)+qs,lh,j+1(h)ifi=jandj≥lhqs,i,j+1(h)ifi<jandi≤lh−1qs,i+1,j+1(h)ifi<jandi≥lh.h=h+1and go to Step 1.Note that since the number of the iterations is at most n and the time to select lhin Step 1 and updateQs(h)fromQs(h+1)in Step 4 is O(n) time per each iteration, Algorithm QP can be done in O(n2) time.Note that the0−1quadratic programming above is the special case of a half-product, defined as a0−1quadratic programming below:∑1≤i<j≤naibjxixj−∑1≤j≤ncjxj,wherea=(a1,a2,…,an)andb=(b1,b2,…,bn)are vectors of non-negative integers. Jurisch, Kubiak, and Jozefowska (1997) developed anO(n∑j=1nbj)algorithm for a half-product. Sincebj=1forj=1,2,…,nin our model, the following corollary is immediately obtained.Corollary 2For s ∈ S, the problem to find an optimal schedule(Is*,Os*)in Problem TCO is solvable in O(n2) time.However, we introduce a new algorithm in order to find the structure of an optimal schedule for Problem TCO withpjs=pj+αs. Note that the information for the structure of(Is*,Os*)is used to derive the optimality condition for Problem TCO withpjs=pj+αs.In this subsection, we provide an optimality condition for Problem TCO withpjs=pj+αs. To represent the optimality condition, we introduce the following new notation. Let πs(h) denote the job corresponding to index lhin the hth iteration while Algorithm QP is applied to0−1QP(αs). Sincepjs=pj+αs,we observed from Algorithm QP that for arbitrary scenarios s1 and s2,•Suppose thatqs1,lh,lh(h)<0andqs2,lh,lh(h)<0in the hth iteration of Algorithm QP. Then, since job lhis selected uniquely in Step 1 of Algorithm QP,(10)πs1(h)=πs2(h);Ifαs1<αs2,thenqs1,lh,lh<qs2,lh,lhand(11)Is2*⊆Is1*,whereIs1*andIs2*are the sets of in-house jobs in the optimal schedule in0−1QP(αs1) and0−1QP(αs2), respectively.By Eq. (10), we can use π(h) instead of πs(h). LetIg′={π(1),π(2),…,π(g)}andOg′=J∖Ig′,g=1,2,…,n.Note that(Ig′,Og′)is an optimal schedule for the problem to minimizexTQsx+∑j=1nojsubject to∑j=1nxj=gand it can be obtained by the modified Algorithm QP identical to Algorithm QP except thatStep 1:Select the smallest index lhfrom set{i|qs,i,i(h)≤qs,j,j(h)for j ∈ O}. Let lhbe the index selected in iteration h. Ifh=g,go to Step 2, and otherwise go to Step 3.Letgs=|Is*|for each scenario s. Note that•Since α1 < αk, g1 ≥ gkby relation (11);Is*=Igs′for each scenario s.LetB={(Ig′,Og′)|g=gk,gk+1,…,g1}. Ifpjs=pj+αs,then there exists an optimal schedule (I*, O*) for Problem TCO with the discrete or interval scenario in B.Suppose that (I*, O*) ∉ B and|I*|=g. Then, we observe from Algorithm QP that the structure offst(Is*,Os*)withIs*={π(1),π(2),…,π(gs)}is as follows: LetEs*={(i,j)|i,j∈Is*andi>j}.Then, for a scenario s,fst(Is*,Os*)=∑π(i)∈Is*(pπ(i)s−oπ(i))+∑(π(i),π(j))∈Es*min{pπ(i)s,pπ(j)s}+∑j=1noj=∑i=1gs(pπ(i)s−oπ(i))+∑i=1gs∑j=1i−1min{pπ(i)s,pπ(j)s}+∑j=1noj=∑i=1gs(∑j=1imin{pπ(i)s,pπ(j)s}−oπ(i))+∑j=1noj=∑i=1gs(∑j=1imin{pπ(i),pπ(j)}+iαs−oπ(i))+∑j=1noj.Note that for i ≤ gs,(∑j=1imin{pπ(i),pπ(j)}+iαs−oπ(i))<0can be interpreted as the decreasing amount in the i-iteration. Furthermore, by relation (11), for i > gs,(∑j=1imin{pπ(i),pπ(j)}+iαs−oπ(i))≥0. Thus,fst(Is*,Os*)=∑i=1g1min{Δi+i·αs−oπ(i),0}+∑j=1noj,whereΔi=∑j=1imin{pπ(j),pπ(i)}. Furthermore, it is observed from relations (11) that for i > g1,(12)Δi+i·αs−oπ(i)≥0and for i ≤ gk,(13)Δi+i·αs−oπ(i)<0.By the similar argument above,fst(Ig′,Og′)=∑i=1g(Δi+i·αs−oπ(i))+∑j=1nojConsider the following three cases.Case 1: g > g1. It is observed from inequality (12) that for each scenario s,fst(I*,O*)≥fst(Ig′,Og′)=∑i=1g(Δi+i·αs−oπ(i))+∑j=1noj≥∑i=1g1min{Δi+i·αs−oπ(i),0}+∑j=1noj=fst(I1*,O1*).Note that(I1*,O1*)∈B.Case 2: gk≤ g ≤ g1. By inequality, for each scenario s,fst(I*,O*)≥fst(Ig′,Og′). Note that(Ig′,Og′)∈B.Case 3: g < gk. It is observed from inequality (13) that for each scenario s,fst(I*,O*)≥fst(Ig′,Og′)=∑i=1g(Δi+i·αs−oπ(i))+∑j=1noj>∑i=1gkmin{Δi+i·αs−oπ(i),0}+∑j=1noj=fst(Ik*,Ok*).Note that(Ik*,Ok*)∈B.By considering the above three cases, the proof is complete.□Ifpjs=pj+αs,thenZt(Ig′,Og′)=max{f1t(Ig′,Og′)−f1t(I1*,O1*),fkt(Ig′,Og′)−fkt(Ik*,Ok*)}.Suppose thatZt(Ig′,Og′)=flt(Ig′,Og′)−flt(Il*,Ol*)satisfying that1.α1 < αl< αk.At least one of the following two equalities is strictly satisfied:(14)flt(Ig′,Og′)−flt(Il*,Ol*)≥f1t(Ig′,Og′)−f1t(I1*,O1*),and(15)flt(Ig′,Og′)−flt(Il*,Ol*)≥fkt(Ig′,Og′)−fkt(Ik*,Ok*).Then, sincefst(I,O)=∑i=1nxi∑j=1ipjxj+αs∑i=1nxi∑j=1ixj+∑j=1noj(1−xj)such thatxj=1if j ∈ I andxj=0otherwise, we obtain thatflt(Ig′,Og′)−f1t(Ig′,Og′)=(αl−α1)|Ig′|(|Ig′|+1)2,andfkt(Ig′,Og′)−flt(Ig′,Og′)=(αk−αl)|Ig′|(|Ig′|+1)2.Thus, inequalities (14) and (15) are rewritten, respectively, as follows:|Ig′|(|Ig′|+1)2≥flt(Il*,Ol*)−f1t(I1*,O1*)αl−α1,andfkt(Ik*,Ok*)−flt(Il*,Ol*)αk−αl≥|Ig′|(|Ig′|+1)2.Since at least one of the equalities (14) and (15) is satisfied strictly,(16)flt(Il*,Ol*)−f1t(I1*,O1*)αl−α1<fkt(Ik*,Ok*)−flt(Il*,Ol*)αk−αl.Now we claim thatfst(Is*,Os*)is concave for αs. To prove this claim, letf(αs)=fst(Is*,Os*). Letα1≤α¯≤α^≤αk,and 0 ≤ β ≤ 1. Then, sincemin{a+b,0}≥min{a,0}+min{b,0}for arbitrary real values a and b,f(βα¯+(1−β)α^)=∑i=1g1min{Δi+i·(βα¯+(1−β)α^)−oπ(i),0}+∑j=1noj≥β(∑i=1g1min{Δi+i·α¯−oπ(i),0}+∑j=1noj)+(1−β)(∑i=1g1min{Δi+iα^−oπ(i),0}+∑j=1noj)=βf(α¯)+(1−β)f(α^).Hence, we show thatfst(Is*,Os*)is concave for αs. However, this is a contradiction to inequality (16). Therefore, the proof is done.□Based on Lemmas 4 and 5, we develop an algorithm to solve Problem TCO withpjs=pj+αsas follows.Algorithm TCOStep 1:Construct two setsI1*andIk*by using the Algorithm QP andIg′,g=gk,gk+1,…,g1,by using the modified Algorithm QP.Find a schedule(Ig′,Og′)to minimizemax{f1t(Ig′,Og′)−f1t(I1*,O1*),fkt(Ig′,Og′)−fkt(Ik*,Ok*)}.Note that since the number of running the Algorithm QP and the modified Algorithm QP are two and at most n, respectively, Algorithm TCO can be done in O(n3) time.Theorem 5Ifpjs=pj+αs,then Problem TCO with the discrete or interval scenario is solvable in O(n3) time.Since the complexity of Algorithm TCO is O(n3) time, the proof is complete.□

@&#INTRODUCTION@&#


@&#CONCLUSIONS@&#
We study the min-max regret version of a single-machine scheduling problem with an outsourcing option and uncertain processing times. The performance measure is the total cost for processing in-house jobs and subcontracting outsourced jobs. We consider the two types of processing time uncertainty: the interval scenario and the discrete scenario. The objective is to minimize the maximum deviation from optimality over all scenarios.First, we consider a scheduling problem with the makespan as the cost of in-house jobs and prove the polynomiality of an interval scenario case. However, a discrete scenario case is NP-hard even if the number of scenarios is two andpjs=αspj. Furthermore, we show that a discrete scenario case is strongly NP-hard if the number of scenarios is part of the problem instance, while it has an FPTAS if that number is a given constant. Thus, we develop a 2-approximation algorithm for the case with an arbitrary number of scenarios, and we restrict our attention to the discrete scenario case withpjs=pj+αsand prove its polynomiality. Second, we study a scheduling problem with the cost of all in-house jobs as the total completion times, which is known to be NP-hard for both scenario cases. Thus, we consider the problem with processing time uncertainty defined aspjs=pj+αs,and present its optimality conditions. Based on these results, we develop its polynomial-time algorithm for both scenario cases.For future research, it would be interesting to investigate•The min-max version of Problems MSO and TCO such that Zm(I*, O*) and Zt(I*, O*) are modified intoZm(I*,O*)=maxs∈S{fsm(I*,O*)}andZt(I*,O*,σ*)=maxs∈S{fst(I*,O*,σ*)},respectively. Note that the min-max version of Problem MSO can be proven to be strongly NP-hard through modifying the reduction in the proof of Theorem 2 as follows: LetS=X∪{3q+1}andn=g+1. Forj=1,2,…,g,pjs={0ifs∈Hj,2otherwise,pj3q+1=3,andoj=2.Letpg+1s=q+2fors=1,2,…,3q,pg+13q+1=0andog+1=q+1,andλ=2g+q. Furthermore, a 2-approximability can be proved similarly as the proof in Theorem 3;The structural characteristics of processing time uncertainty that make Problem TCO polynomially solvable. Note that relation (10) does not hold whenpjs=αspjby the following counterexample:p1=3,p2=7,o1=5,o2=10,α1=1andα2=1.5,which implies that Lemmas 4 and 5 do not hold. Thus, it remains open to determine whether Problem TCO withpjs=αspjis NP-hard or not for both scenario cases;The computational complexity of Problem TCO when the subcontractor has a finite capacity. Note that in that case, Problem MSO is equivalent to the partition problem, which is NP-hard, ifoj=0forj=1,2,…,n.