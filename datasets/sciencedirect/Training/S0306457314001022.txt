@&#MAIN-TITLE@&#
Building a better mousetrap: Compressing mouse cursor activity for web analytics

@&#HIGHLIGHTS@&#
We study 10 techniques to compress users’ cursor interactions on the Web.A systematic evaluation of both lossy and lossless algorithms is performed.We found that different compression techniques excel depending on the objective.LZW and piecewise linear interpolation balance well accuracy and efficiency.

@&#KEYPHRASES@&#
Mouse cursor tracking,Web analytics,Temporal-spatial data compression,Data simplification,

@&#ABSTRACT@&#
Websites can learn what their users do on their pages to provide better content and services to those users. A website can easily find out where a user has been, but in order to find out what content is consumed and how it was consumed at a sub-page level, prior work has proposed client-side tracking to record cursor activity, which is useful for computing the relevance for search results or determining user attention on a page. While recording cursor interactions can be done without disturbing the user, the overhead of recording the cursor trail and transmitting this data over the network can be substantial. In our work, we investigate methods to compress cursor data, taking advantage of the fact that not every cursor coordinate has equal value to the website developer. We evaluate 5 lossless and 5 lossy compression algorithms over two datasets, reporting results about client-side performance, space savings, and how well a lossy algorithm can replicate the original cursor trail. The results show that different compression techniques may be suitable for different goals: LZW offers reasonable lossless compression, but lossy algorithms such as piecewise linear interpolation and distance-thresholding offer better client-side performance and bandwidth reduction.

@&#INTRODUCTION@&#
Websites that know what their users do on their pages can provide better content and services to those users. For example, search engines can re-rank search results using what people click as implicit feedback (either personalizing results for individuals from their click history, or using aggregated data from past searches to improve the overall ranking), e-commerce sites can learn what parts of the page deter potential customers, and social networking sites can use aggregated usage metrics to improve the usability of their application. A website can easily find out where a user has been on their pages through server access logs, but this yields an incomplete picture of what their users were actually doing. To find out what content is consumed and how it was consumed at the page level, the website can use client-side tracking to record richer interactions such as cursor movements and hovering, scrolling activity, and text highlighting. These interactions can be interpreted into higher-level behaviors like reading and marking interesting text with the cursor, quickly skimming the entire page, or moving the cursor out of the way to the side. To this end, page-level interactions provide researchers and practitioners with a way to gain additional insight of users’ Web browsing behavior.Previous literature has shown value in using mouse cursor interaction data for applications such as: determining the relevance of search results (Guo & Agichtein, 2012; Huang, White, Buscher, & Wang, 2012b; Speicher, Both, & Gaedke, 2013), to track what users are reading on a page (Diaz, White, Buscher, & Liebling, 2013; Guo & Agichtein, 2010b; Hauger, Paramythis, & Weibelzahl, 2011; Hauger & Van Velsen, 2009), user modeling (Buscher, White, Dumais, & Huang, 2012; Leiva & Vidal, 2010), or potentially as a proxy for gaze tracking (Huang, White, & Buscher, 2012a; Huang, White, & Dumais, 2011; Rodden, Fu, Aula, & Spiro, 2008). Many commercial Web analytics services allow websites to track their users’ mouse cursor interactions: ClickTale, LuckyOrange, MouseFlow, Mpathy, and Clixpy. Once set up on a website, the analytics service allows Web developers the ability to replay cursor movements from a user session, or generate heatmaps with aggregated cursor positions.While recording cursor interactions can be done without interrupting the user, the overhead of recording the cursor movements and transmitting this data to the server can be substantial. For instance, swiping the mouse from left to right can generate a hundred {x, y} cursor coordinate pairs, which over a minute of interaction can lead to nearly 1MB of data being sent to the analytics server. Compressing cursor activity is challenging because current transport protocols have no mechanism for compressing this type of high-frequency client-side generated data. In our work, we investigate methods to compress the trail a cursor makes on a page, taking advantage of the fact that not every cursor coordinate has equal value to the web developer. This problem is particularly important for situations where bandwidth is limited, such as on a mobile network or in developing countries. And while there are a limited number of services offering cursor tracking features, having efficient cursor tracking methods will benefit all Web users. One Web analytics company may be used by a thousand websites which in turn may serve a million users.The contribution we make in this paper is a rigorous evaluation of 10 compression algorithms for 3-dimensional data (x-coordinate, y-coordinate, and time), evaluated with 4 metrics that represent different needs for the compressed data. The evaluation is conducted across both a dataset collected from a lab study and a dataset from a live web page, both datasets involving real users. We show that different compression techniques may be useful in different situations; the situations can reflect a desire for consuming less bandwidth, better client-side performance, more accurate replication of the original data, or a combination of all three objectives. With the reduction in data size, tracking mouse cursor interactions can finally become a practical, scalable technology. As a secondary contribution, we share the dataset we collected and the implementations of the compression algorithms we used in our experiments.2See http://hci.cs.brown.edu/mousetrap/.2This will allow commercial analytics services to build on top of our work, and for other researchers to replicate our results.

@&#CONCLUSIONS@&#
