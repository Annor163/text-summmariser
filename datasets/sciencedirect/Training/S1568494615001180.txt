@&#MAIN-TITLE@&#
TSK fuzzy model with minimal parameters

@&#HIGHLIGHTS@&#
An efficient genetic algorithm (GA) to generate a simple and well defined.TSK model is proposed.Three different attributes characterizing the structure of a TSK model, are optimized simultaneously (MSE, number of rules and number of parameters).Simulation results show that our approach outperforms some methods proposed in previous work.

@&#KEYPHRASES@&#
Hierarchical chromosome,Mother chromosome,Fuzzy model,Optimization,SPEA-2,

@&#ABSTRACT@&#
In this paper, an efficient genetic algorithm (GA) to generate a simple and well defined TSK model is proposed. The approach is derived from the use of the improved Strength Pareto Evolutionary Algorithm (SPEA-2), where the genes of the chromosome are arranged into control genes and parameter genes. These genes are in a hierarchical form so that the control genes can manipulate the parameter genes in a more effective manner. In our approach, we first apply the back-propagation algorithm to optimize the parameters of the model (parameters of membership functions and fuzzy rules), then we apply the SPEA-2 to optimize the number of fuzzy rules, the number of parameters and to fine tune these parameters.Two well-known dynamic benchmarks are used to evaluate the performance of the proposed algorithm. Simulation results show that our modeling approach outperforms some methods proposed in previous work.

@&#INTRODUCTION@&#
Fuzzy models present an alternative approach for modeling complex systems [1]. They have similar characteristics with feedforward neural networks [2] and they can approximate any real continuous function in a compact set with an arbitrary accuracy [3]. Within the different fuzzy modeling techniques, the model introduced by Takagi, Sugeno and Kang (TSK) [4] is one of the most used because of its good results in different areas and due to its mathematical treatability. This model consists on use of If-Then rules with fuzzy antecedents and a mathematical function at consequent part of the form:(1)Ri:Ifx1isA1iandx2isA2iand⋯andxrisAriThenyi=a0i+a1ix1+a2ix2+⋯+arixrfori=1,2,…,Kwhere K is the number of rules, xj(j=1, 2, …, r) is the jth input, yiis the output of the fuzzy rule Ri,A1i,A2i,…,Ariare fuzzy sets that are characterized by membership functionsAji(xj)andajiare real parameters. The overall output of the model is computed by(2)y=∑i=1Kωiyi∑i=1Kωiwhere ωiis the firing strength of rule Ridefined by(3)ωi=A1i(x1)×A2i(x2)×⋯×Ari(xr)From (1), it is clear that the TSK model tries to decompose the input space into fuzzy regions, and then approximates a system in every region by a simple linear equation. The main advantage of this model is its representative power and it ability in describing a highly non-linear system using input/output data. However, the TSK model includes too many parameters, most of which are located in the consequent part of fuzzy rules. In addition, identification of the parameters is technically difficult and may lead to a nonlinear programming problem [4]. Wang and Langari [5], have used both fuzzy C-means (FCM) clustering algorithm to find the parameters of membership functions and least squares algorithm to optimize the parameters related to the fuzzy rules. In [6] the authors have used a modified version of FCM and gradient descent algorithm in their new learning process to improve the accuracy of the TSK model, expressed by the mean squared error (MSE). Neural networks are integrated with fuzzy logic in the form of a neural fuzzy model and used to construct TSK model [7]. However, none of these works has tackled the complexity of the model which can be expressed by the number of fuzzy rules and/or the number of parameters included in the model.During the past decade, genetic algorithms (GAs) [8,9] have been used to minimize the complexity of fuzzy systems, thanks to their ability to deal with large search spaces and to locate global optimum without a precise description of the problem. In this hybridization approach, the objective function (fitness function) is formulated as linear combination of some objectives such as accuracy (error measures) and complexity (number of fuzzy rules) [10–12]. Aggregating several objectives into a single objective has the advantage of solving a simple problem, but on the other hand many design iterations are required to obtain an acceptable compromise.Recently the design of fuzzy model is solved using multi-objective genetic algorithms (MOGAs) [13]. Multiobjective optimization leads to a set of fuzzy models with different tradeoffs between objectives instead of a single usually biased fuzzy model [14–16]. After this, the designers can select, depending on their preferences, the most suitable model.In [17] the non-dominated sorting genetic algorithm II (NSGA-II) [18] which is one of the most powerful MOGAs, is used to construct TSK fuzzy models for regression problems. Two competing objectives are considered: the accuracy, expressed by the normalization root mean squared error, and the complexity, measured by the number of fuzzy rules.In this paper, we propose a new and efficient method to construct a TSK fuzzy model from data, using genetic approach with the following innovations:-In addition to the MSE and the number of fuzzy rules (which are used in the literature as standard metrics to characterize the accuracy and the complexity of the TSK model, respectively) we introduce an additional criterion which is the number of parameters for a good characterization of the model's complexity. The optimization of these criteria is performed by using the improved Strength Pareto Evolutionary Algorithm (SPEA-2) [19], which is one of the most powerful multi-objective techniques.The coding of the parameters of the TSK fuzzy model is based on hierarchical chromosome formulation so that it can perform the simultaneous optimization of the parameters of membership functions, the number of rules and the rule consequents. Unlike traditional TSK fuzzy models where all input variables are linearly combined in the rule consequents, only some significant input variables are included in the rule consequents when we use the proposed coding.The initial population is generated from a ‘mother chromosome’ that encodes the parameters of optimized TSK model by back-propagation algorithm. Thus, reasonably good initial models instead of random ones are first obtained for the GA.The paper is organized as follows. The fundamental concept of the hierarchical genetic algorithm (HGA) is introduced in Section 2. A specific coding of the HGA chromosome for TSK fuzzy model design is described in Section 3. Section 4 gives brief overviews of multiobjective optimization problem and SPEA-2 algorithm. In Section 5, the learning process is described. In Section 6, we compare the proposed approach with existing methods on two examples taken from the literature. Finally in Section 7, a general conclusion is given.Hierarchical genetic algorithms (HGAs) [20] are an improved version of standard genetic algorithms and are used when we are interested in optimizing the topology of system as well as its parameters simultaneously. For example, in [21–23] a HGA based method for tuning Mamdani's fuzzy controller was proposed. The HGA scheme emulates the biological DNA (deoxyribonucleic acid) structure which integrated two different types of genes: regulatory sequences (RSs) and structural genes (SGs). The SGs are coded for polypeptides or ribonucleic acids (RNAs), while the RSs serve as the leaders that denote the beginning and ending of SGs. Similar to this structure, in HGA, the chromosome consists of two types of genes, control genes (analogous to SGs) and parameter genes (analogous to RSs). When a control gene is “1”, then the corresponding parameter gene is activated otherwise it is deactivated. It should be noted that the inactive genes always exist within the chromosome as they are in the DNA. This hierarchical architecture implies that the chromosome contains more information than that of the standard GA structure. Fig. 1illustrates further this concept.The genetic operators namely crossover and mutation may apply independently to each level of genes, as in the case of standard genetic algorithms. On the other hand, the genetic operators that affect the high-level genes can result in changes within the active genes which eventually lead to a multiple change in the lower level genes. This is the reason why the HGA is not only able to obtain a good set of system parameters, but can also reach a minimized system structure.Since the HGAs are well suitable for solving the topological structure of an unknown system, they are a good candidate for determining the fuzzy membership functions and rules. In our proposed method, we use the three-level hierarchical structure as shown in Fig. 2.The chromosome is divided in two parts:Part1: this part, concerns the fuzzy rules, it is formed of two levels of control genes, and one level of parameter genes (see Fig. 2(b)). The control genes (zi) of level 2, in the form of binary digits (0 or 1), determine the fuzzy rules activation, whereas the control genes (hji) of level 1, also in the form of binary digits, determine the input variables that participate in the consequent part of fuzzy rules. Unlike traditional TSK fuzzy models where all input variables are linearly combined in the consequent parts, only some significant input variables are used on the consequent parts of our TSK fuzzy model. The parameter genesajiare in the form of real numbers to present the relative parameters of consequent parts of fuzzy rules. When an integer ‘1’ is assigned for control gene (zi) in level 2, the fuzzy rule (Ri), corresponding to this particular active control gene is activated, and the input variables that participate in the consequent part of fuzzy rule (Ri) is governed by values of control genes (hji,j=1,2,…,r) in the level 1 corresponding to (zi).Thus, if zi=0, ∀i=1, 2, …, K, none fuzzy rule is included in the TSK model, in this case(4)∑i=1Kzi=0To avoid this situation, we introduce the following constraint(5)∑i=1Kzi≥lrwhere lris the minimal number of fuzzy rules included in the model.Also ifhji=0,∀j=0,1,…,r, the output value of the fuzzy rule (Ri) is zero:(6)∑j=0rhji=0To avoid this situation, a second constraint is required(7)∑j=0rhji≥1,i=1,2,…,KPart2: this part contains only parameter genes which code the parameters of membership functions (see Fig. 2(c)). In this work, all the membership functions are in Gaussian form(8)Ai(x)=exp−(x−ci)22mi2where ciand miare, respectively, the center and the width of the Gaussian membership function. To reduce the length of the chromosome, we use real-coded genes.The formulation can be further illustrated by the following example.Consider a TSK fuzzy model with two inputs x1 and x2 and one output y. Suppose that each input is characterized by two Gaussian membership functions, then the rule base has at most K=4 (2×2) fuzzy rules:R1:Ifx1isA11(c=1,m=1.5)andx2isA21(c=1.2,m=2)Theny2=0.3+1.1x1+0.2x2R2:Ifx1isA11(c=1,m=1.5)andx2isA22(c=5,m=3)Theny1=1.5+0.7x1+0.9x2R3:Ifx1isA12(c=3,m=2.1)andx2isA21(c=1.2,m=2)Theny3=1.3+2.1x1+1.2x2R4:Ifx1isA12(c=3,m=2.1)andx2isA22(c=5,m=3)Theny4=4.2+1.8x1+0.4x2As indicated in Fig. 2, the chromosome corresponding to this fuzzy model can thus be formulated, as illustrated in Fig. 3. It should be noted that the TSK fuzzy model includes four rules and twenty parameters (8 premise parameters and 12 consequent parameters).If we alter some control genes in the chromosome, we can, for example, obtain a new chromosome as shown in Fig. 4.In this case, only two fuzzy rules are considered in the corresponding fuzzy model, because the 2nd and the 4th control genes of the up level are not active ({1010}).By taking into account the different values of control genes and parameter genes, the two fuzzy rules, can expressed as:R1:Ifx1isA11(c=1,m=1.5)andx2isA21(c=1.2,m=2)Theny2=0.3+1.1x1+0.2x2R3:Ifx1isA12(c=3,m=2.1)andx2isA21(c=1.2,m=2)Theny3=1.3+2.1x1+1.2x2the inputs x1 and x2 are not included in the consequent part of fuzzy rules R1 and R3, respectively. In addition, the number of parameters in the model is reduced from 20 to 9 (6 parameters related to membership functions and 3 parameters related to consequent part of fuzzy rules).For many real-world applications there is a need for simultaneous optimization of multiple objectives and often some of these objectives are conflicting. Hence, such multiobjective optimization problems require separate techniques, which are very different from the standard optimization techniques for single objective optimization. Multiobjective optimization algorithms seek to optimize the parameters of a fitness vector function, obtained according to some objectives. Formally, it can be described in mathematical terms as follows:(9)min/maxy=f(x)=[f1(x),f2(x),…,fn(x)]x=[x1,x2,…,xm]∈Xy=[y1,y2,…,ym]∈Ywhere n>1,xis the decision vector, X is the parameter space,yis the objective vector and Y is the objective space. Assuming a minimization problem, without loss of generality, the following definitions apply:Definition 1A decision vectora∈X is said to dominate a decision vectorb∈X (ora≺b)if and only if(10)∀i∈{1,2,…,n}:fi(a)≤fi(b)Λ∃i∈{1,2,…,n}:fi(a)<fi(b)The decision vectorais said to be non-dominated solution if and only if there is no vector in X which dominatesa(11)∄b∈X:b≺aThe decision vectors that are non-dominated within the entire search space are denoted as Pareto optimal and constitute the so-called Pareto-optimal set. The corresponding set of objective vectors is denoted as Pareto front which describes the trade-off among contradicted objectives as shown in Fig. 5.In this section, we give a brief overview of the improved Strength Pareto Evolutionary Algorithm (SPEA-2), which is one of the most powerful multi-objective techniques. This algorithm provides excellent results compared to others proposed multi-objective genetic algorithms such as its first version [24].Generally, the algorithm can be described in the following steps [19].•Step 1 (Initialization): Generate an initial population Ptwith N size and create an empty archive (external) Pareto optimal set QtwithN˜size. Set t=0Step 2 (Fitness assignment): Calculate fitness values of individuals in Ptand Qtas follows:1.Assign strength value S(i) for each individualiin the external Pareto set Qtand the population Pt. S(i) represents the number of individualsidominates:(12)S(i)={j/j∈Pt∪Qt∧i≺j}where |.| denotes the cardinality of a set and the symbol ≺ corresponds to the Pareto dominance relation. (i≺jifidominatesj).On the basis of the S values, the raw fitness R(i) of an individualiis calculated:(13)R(i)=∑j∈{Pt∪Qt}∧j≺iS(j)The raw fitness is determined by the strength of its dominators in both the archive and population. R(i)=0 corresponds to non-dominated individuals, while high R(i) value means thatiis dominated by many individuals.For each individualithe distances to all individualsjin the external and population sets are calculated and stored in a list. After sorting the list in increasing order, the kth element gives the distance ofito its kth nearest neighbor, denoted asσik. Calculate the density D(i) for each individuali:(14)D(i)=1σik+1wherek=|Pt|+|Qt|.Finally the fitness value of an individuali:(15)F(i)=D(i)+R(i)Step 3 (External setup dating): The following steps are used to update the external Pareto optimal set:1.Search the population for the non-dominated individuals and copy them to the external Pareto set.Search the external Pareto set for the non-dominated individuals.If the number of the individuals in the external set(Qt+1)<N˜(already specified external Pareto set size) then the best dominated individuals are copied into the new external set until|Qt+1|=N˜.If the number of the individuals in the external set(Qt+1)>N˜then an archive truncation technique is invoked which iteratively removes individuals from Qt+1 until|Qt+1|=N˜.Step 4 (Termination): If stopping criterion is satisfied then set Q* to the set non-dominated individuals in Qt+1. Stop.Step 5 (Selection): Select two individuals at random from the updated external set Qt+1 and compare their fitness. Select the better one and copy it to the mating pool.Step 6 (genetic operators): Perform the crossover and mutation operations according to their probabilities to generate the new population Pt+1. Increment generation counter (t=t+1) and go to Step 2.The complexity and performance of fuzzy systems are greatly dependent on the learning process and it is usually impossible to achieve both objectives at the same time. There is often a trade-off between the complexity and the accuracy of TSK fuzzy models. Thus, it is a kind of multiobjective optimization problems which we have described in Section 4.1. Since the 1990s several multi-objective genetic algorithms have been proposed and used to solve this problem [25]. Among these algorithms, we use the SPEA-2 outlined in the previous section. Because we use the hierarchical chromosome structure and a number of corresponding operators, we call our learning algorithm as hierarchical SPEA-2.Like traditional GAs, this algorithm consists of two major operators: crossover and mutation. Before going into the detail of these two genetic operators, the issue of objective functions and initialization procedure of chromosomes are discussed.The aim of training the TSK fuzzy model is to minimize three different objectives:-The first (Ob1) is the mean squared error (MSE) (the error is the difference between the output of the fuzzy model y and the desired output yd) defined as:(16)Ob1=1L∑k=1L(y(k)−yd(k))2where L is the size of learning data.The second (Ob2) is the complexity of the model which is simply defined by the number of active fuzzy rules. It is based upon the simply summation of control genes ziof the level 2.(17)Ob2=∑i=1KziThe third (Ob3) is also the complexity of the model which is defined by the number of parameters included in the TSK fuzzy model:(18)Ob3=∑i=1Kzi×∑j=0rhji+∑j=1r∑p=1nj2×λpjwhere njis the number of membership functions associated to the jth input variable. λpjis binary digit equals 0 if the pth membership function related to the jth input variable is not included in the antecedents part of activated fuzzy rules and equals 1 otherwise.Unlike the standard initialization methods, based on random way, in our case the initial population is generated as follows: we start by creating a ‘mother chromosome’ according to the structure illustrated in Fig. 2. The parameter genes are initialized by set of values corresponding to the parameters of TSK model obtained using back-propagation algorithm. The description of the learning process based on back-propagation is outside the scope of this paper. More detailed information can be found in [6]. To activate the whole fuzzy rules and parameters, control genes at level 2 and 1 are set to one. After the ‘mother chromosome’ is created, the initial population is generated by mutation with low rate of this chromosome (at levels control genes and parameter genes). This method aims to create powerful chromosomes according to MSE criterion.The crossover operator allows recombining chromosomes of the same generation by interchanging one or more genes of them. Some of the commonly used crossover techniques are one-point crossover, two-point crossover, multiple-point crossover and uniform crossover. In our study, two-point crossover operator and Laplace crossover operator recently proposed in [26] for real coded genetic algorithms are used. The first operator is applied with the probability rate pccto control genes, while the second operator is applied with a probability rate pcpgreater than pccto parameter genes. However, we need to ensure that constraints (5) and (7) are met after any crossover operation. In order to respect the constraint (5), the crossover operator at level 2 of control genes is carried out as follows:Consider the control genes of level 2 of chromosomes ch1 and ch2 before two point crossover (lr=5):Controlgenesoflevel2ofch1:1|0000|11101,constraint satisfiedControlgenesoflevel2ofch2:0|1111|11100,constraint satisfiedIf the crossover operator is applied to the indicated points by “|” symbols, the following offspring are produced:ch1′:1|1111|11101,constraint satisfiedch2′:0|0000|11100,constraint satisfiedIn order to keep satisfied constraint (5), we only interchange the first bits of ch2 which satisfied the constraint. After this correction we obtain:ch2′:0|0011|11100,constraint satisfiedThe same principle is also applied to the control genes of level 1 in order to satisfy the constraint (7).The mutation operator is used to avoid the possibility of mistaking a local optimum for a global one. With mutation, new genetic materials can be introduced in the population. Since there are two types of coding in chromosome structure, specific mutation operators are designed for each type of coding.Control genes mutation (binary coding): Bit mutation with the probability rate pmcis applied to control genes which are in the form of a bit-string. Each bit of the control gene is flipped if a probability test is satisfied (a randomly generated number β smaller than pmc).Also, the mutation of some control genes (when a one is mutated to zero) may violate the constraints (5) and (7) such as shown by the following example:Consider the control genes of level 2 of chromosome ch3 before mutation (lr=5): 1110001001, the constraint (5) is satisfied. If mutation occurs at the first gene, we obtain after mutation: 0110001001. Then, constraint (5) is violated and in order to maintain it satisfied, the first gene is set to one (cancelation of the mutation).Parameter genes mutation (real coding): A real value mutation is designed for the real-string. For each parameter gene, a random quantity (generated by a random function such as the Gaussian distribution) is added with probability rate pmp. The new random mutation is then:(19)a=a+α×ψ(μ,υ)where ψ is a random function, μ, ν are the mean and variance related to ψ. α is the offset.

@&#CONCLUSIONS@&#
