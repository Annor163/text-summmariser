@&#MAIN-TITLE@&#
Automatic test case generation for WS-Agreements using combinatorial testing

@&#HIGHLIGHTS@&#
We propose a method to test SLAs using standard testing techniques.Constraints that avoid generating non feasible test cases are automatically obtained.Different coverage strategies are defined to grade the thoroughness of the tests.A tool named SLACT that automates the generation of the test cases is implemented.Application of the approach to a real and critical eHealth service-based scenario.

@&#KEYPHRASES@&#
Software testing,Service based applications,Service Level Agreements,WS-Agreement,Combinatorial testing,

@&#ABSTRACT@&#
In the scope of the applications developed under the service-based paradigm, Service Level Agreements (SLAs) are a standard mechanism used to flexibly specify the Quality of Service (QoS) that must be delivered. These agreements contain the conditions negotiated between the service provider and consumers as well as the potential penalties derived from the violation of such conditions. In this context, it is important to assure that the service based application (SBA) behaves as expected in order to avoid potential consequences like penalties or dissatisfaction between the stakeholders that have negotiated and signed the SLA. In this article we address the testing of SLAs specified using the WS-Agreement standard by means of applying testing techniques such as the Classification Tree Method and Combinatorial Testing to generate test cases. From the content of the individual terms of the SLA, we identify situations that need to be tested. We also obtain a set of constraints based on the SLA specification and the behavior of the SBA in order to guarantee the testability of the test cases. Furthermore, we define three different coverage strategies with the aim at grading the intensity of the tests. Finally, we have developed a tool named SLACT (SLA Combinatorial Testing) in order to automate the process and we have applied the whole approach to an eHealth case study.

@&#INTRODUCTION@&#
Service Oriented Architecture (SOA) has become a solid paradigm to develop interoperable, flexible and highly dynamic Service Based Applications (SBAs) by means of integrating available services over the web. The main features of these services include loose coupling between them, coarse grained service interfaces, dynamic service discovery and binding, self-containment of services, service interoperability and protocol independence [1]. SBAs are implemented using different Internet-based standards [2] such as the Simple Object Access Protocol (SOAP) [3] for transmitting data, the Web Service Description Language (WSDL) [4] for defining services or the Business Process Executable Language for Web Services (BPEL4WS) [5] for orchestrating services.In SBAs, it is necessary for the stakeholders involved to specify the conditions related to the provision and consumption of the services. These conditions are usually specified in a contract or technical document, called Service Level Agreement (SLA), which is a standard mechanism that allows determining and regulating the trading between the service providers and the consumers. In the scope of SBAs, the WS-Agreement standard [6] is a language used to specify the conditions negotiated and agreed by these stakeholders. WS-Agreement supports the representation of information regarding the functional features of services, non-functional requirements related to the Quality of Service (QoS) level that should be achieved by the service provision, penalties derived from the violation of the terms and any other relevant information related to the agreement. It is therefore of utmost importance for both providers and consumers to develop suitable actions that allow avoiding or minimizing the consequences derived from SLA violations.The management of SLAs [7] is an integral part of the applications developed under the rules of a standard SOA Governance framework [8] and has received considerable attention both in industry and academia (see, for example, the SLA@SOI FP7 European Project [9]). Many large companies, including Amazon, Microsoft, Google, AT&T and HP, that provide XaaS (Everything as a Service) use SLAs as a mechanism for specifying the functionalities and QoS levels that they are capable of providing in their XaaS offerings [10–14].The management of SLAs involves different tasks including SLA negotiation [15], re-negotiation [16,17], specification [18,19], evaluation [20], testing [21], and monitoring [22]. Among these tasks, the testing of the SLAs has been identified as a challenge [23–25]. The testing of the SLAs involves designing and executing tests in the SBA by means of considering the specification of the SLA as the test basis. This requires that the specification of the SLAs needs to be somehow formalized in order to automate as much as possible the process of obtaining the tests.Currently, there are different approaches that aim at detecting, forecasting or preventing SLA violations using testing techniques. Most of these works are reactive and use monitoring to observe the behavior of the SBA at runtime in order to detect potential deviations from the guaranteed conditions specified in the SLA [22,40]. These approaches are useful in detecting problems in SBAs but they present an important drawback: problems are detected after their occurrence and, therefore, consequences derived from such problems cannot be avoided. On the other hand, different proactive approaches have been proposed to predict or anticipate the detection of problems associated to the violation of the SLA [21,36].Considering the characteristics of both approaches, in a previous work we presented a conceptual method to test SLA-aware service based applications. In that work, our aim was to combine the advantages of both proactive and reactive approaches [26]. Later, we addressed the identification of situations to be tested from the information contained in the individual SLA terms [27]. These situations may be used to guide the design of an appropriate test suite that exercises such situations and also to derive a monitoring plan allowing checking the compliance of the SLA at runtime.In this article, and as a further step, we define a method to generate test cases from an SLA specified in WS-Agreement standard language by integrating testing techniques that have been used broadly in the industry and standardized in ISO/IEC/IEEE 29119 [28]. We also provide a tool that automates the whole process. The main contributions of this article are the following:1)We define how standard techniques for testing, namely the Classification Tree Method and Combinatorial Testing can be applied in the context of SLAs in order to obtain a set of test cases that are suitable for testing an SBA in which the conditions that need to be satisfied are specified in a single SLA.We define how to automatically obtain specific constraints from the specification of the SLA and the behavior of the SBA in order to avoid the generation of non-feasible test cases.We define three different coverage strategies with the aim at grading the thoroughness of the resulting test suite.We implement a tool called SLACT that automatically generates the test cases, making use of an existing testing tool [29].We apply the approach to an eHealth scenario that was proposed by the EU F7 project PLASTIC [30] and has been previously used by other authors to test SLAs [31–34].These contributions aim at taking into account some particular challenges that arise from the testing of service-based systems [23]. In our case, we have to deal with the controllability of the services and the infrastructure so, to mitigate this limitation, the services will be under our control and, consequently, the set of generated test cases will be executed in a controlled environment.The rest of this article is structured as follows. Section 2 outlines related work. Section 3 provides a background about the two cornerstones of this research: Software Testing standards and WS-Agreement. It also summarizes the four-valued logic used to evaluate SLA Guarantee Terms, which was previously developed by the authors [27] and is again used in this article. Section 4 discusses the generation of test cases and the level of automation provided by SLACT. Section 5 presents the results derived from the application of our approach to the eHealth case study. Section 6 highlights the main limitations of this approach. Finally, Section 7 provides some concluding remarks and outlines plans for future work.

@&#CONCLUSIONS@&#
In this article we have been concerned with the problem of testing service based applications (SBAs) regulated by Service Level Agreements (SLAs) that have been negotiated between the service provider and consumer. To address this problem, we propose a step-wise method that generates test cases from a specification based on WS-Agreement by means of defining how to apply existing testing techniques used in the industry. We have also developed tool, called SLACT (SLA Combinatorial Testing), to automate the process.The approach is based on identifying a set of classifications and classes from the content of the SLA in order to construct a hierarchical model using the Classification Tree Method. From this structure, we apply standard combinatorial testing techniques in order to derive the test coverage items through the combination of the classes represented in the leaves. We have applied three strategies that provide different levels of thoroughness in the resulting test suites.The main benefit of our work is that supports the automatic generation of a set of test cases from the specification of SLAs, described in WS-Agreement. The execution of the test cases allows detecting problems in the SBA proactively, i.e., before such problems lead to undesired consequences for the stakeholders who have agreed the SLA. In addition to this, our approach can assure that the number of generated test cases will be manageable and such test cases are feasible to be executed in the SBA. Furthermore, it gives the tester the possibility to decide whether the SBA should be tested with more or less thoroughness or even determine which parts of the SBAs should be tested and with what degree of intensity.The whole process has been automated by SLACT. SLACT receives the SLA and automatically identifies the classes and extracts the implicit constraints. The tool can be used to define explicit testing constraints and selecting a combinatorial strategy for testing. Based on these inputs, SLACT generates different test suites and provides one that, while satisfying the expected coverage, contains the least number of test cases.The approach has been validated using an existing eHealth service based application where we applied the above three testing strategies obtaining three different test suites with 10, 42 and 32 test cases respectively. Thus we were able to obtain a reasonable and manageable number of tests for a critical scenario.In future work, we will focus on improving the definition of tests using additional information contained in the SLA and taking both the logical and hierarchical structure of the agreement into account. We expect to be able to identify new cases for testing by applying existing standard coverage criteria as, for example, the Modified Condition Decision Coverage (MCDC) defined in the RTCA/DO-178B standard [73]. In relation to this, we will have to evaluate the testability of these test situations and decide which of them can be exercised through the generation of tests and which of them should be checked at runtime using monitoring techniques. Finally, we are planning to study the feasibility of improving SLACT with the aim of integrating these new test criteria.