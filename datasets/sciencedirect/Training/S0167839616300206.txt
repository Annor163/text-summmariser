@&#MAIN-TITLE@&#
Generalized quantum splines

@&#HIGHLIGHTS@&#
Quantum splines are extended to splines whose divided differences agree at the joins.Generalized quantum blossoms are used to derive properties of generalized quantum splines.Algorithms and formulas are extended from quantum splines to generalized quantum splines.Generalized quantum B-spline bases and generalized quantum B-spline curves are also studied.

@&#KEYPHRASES@&#
Generalized quantum blossom,Generalized quantum differentiation,Generalized quantum B-splines,de Boor algorithm,Knot insertion algorithms,Marsden's identity,

@&#ABSTRACT@&#
Generalized quantum splines are piecewise polynomials whose generalized quantum derivatives agree up to some order at the joins. Just like classical and quantum splines, generalized quantum splines admit a canonical basis with compact support: the generalized quantum B-splines. Here we study generalized quantum B-spline bases and generalized quantum B-spline curves, using a very general variant of the blossom: the generalized quantum blossom. Applying the generalized quantum blossom, we develop algorithms and identities for generalized quantum B-spline bases and generalized quantum B-spline curves, including generalized quantum variants of the de Boor algorithms for recursive evaluation and generalized quantum differentiation, knot insertion procedures for converting from generalized quantum B-spline to piecewise generalized quantum Bézier form, and a generalized quantum variant of Marsden's identity.

@&#INTRODUCTION@&#
Quantum splines are piecewise polynomials whose quantum derivatives up to some order agree at the joins (Simeonov and Goldman, 2013). But what precisely are quantum derivatives? The primary objectives of this paper are to provide the most general definition of quantum derivatives and then to investigate the most general types of quantum splines.In the quantum calculus there are two standard notions of quantum derivatives: h-derivatives and q-derivatives (Kac and Cheung, 2002). The h-derivative is defined by the difference quotientDh(f)(t)=(f(t+h)−f(t))/h.The q-derivative is expressed by another difference quotientDq(f)(t)=(f(qt)−f(t))/((q−1)t).The classical derivative is a limiting case of these quantum derivatives, sinceD(f)(t)=limh→0⁡Dh(f)(t),D(f)(t)=limq→1⁡Dq(f)(t).Thus these quantum derivatives are discrete approximations to the classical derivative.But there are many other ways to approximate the classical derivative with difference quotients. For example, we could take the symmetric differencesSDh(f)(t)=(f(t+h)−f(t−h))/(2h),which are perhaps a more natural way to approximate the classical derivative. Or we could combine the h-derivative and the q-derivative into a single(q,h)-derivativeDq,h(f)(t)=(f(qt+h)−f(t))/((q−1)t+h).Evidently then there are many different types of quantum derivatives.Quantum splines based on the h-derivative were introduced in the early 1970s by Schumaker and Mangasarian (1971, 1973) in order to investigate some constrained minimization problems in Euclidean space, which are suggested by certain minimization problems in Banach space whose solutions are generalized splines. These h-splines were then studied extensively a few years later by Lyche (1975) using divided differences. Lyche's motivation included finding best summation formulas, computing nonlinear splines, performing spline interpolation with curved constraints, solving discrete operator equations, and computing discrete least squares.More recently Simeonov and Goldman (2013) examined quantum splines based on the q-derivative using a generalization of classical blossoming, which they call quantum blossoming (Simeonov et al., 2012). Simeonov and Goldman were motivated by two properties of quantum B-splines not available in classical B-splines: tolerances and interpolation. Quantum derivatives approximate classical derivatives, so quantum splines are natural if one wants to do design for manufacture. During manufacturing two adjacent surfaces will never meet with exact matching derivatives; manufacturing smooth joins is only possible within some tolerance. Quantum splines can include these tolerances as approximations to the derivatives during design, rather than putting tolerances in by hand after the fact as is necessary with classical splines. In addition, for special knot sequences quantum B-splines interpolate all their control points; this interpolation property is not available with classical B-splines without solving systems of linear equations. Simeonov and Goldman also show that h-splines are a limiting case of q-splines, so the theory of q-splines includes the theory of h-splines as a limiting case.The primary purpose of this paper is to investigate the most general type of quantum splines based on the most general form of the quantum derivative. To perform this analysis, we shall apply the most general form of the quantum blossom. As a running example, we shall study(q,h)-splines based on the(q,h)-derivative, where more explicit formulas often exist. The theory of(q,h)-splines completes the theory of q-splines and h-splines first investigated inMangasarian and Schumaker (1971, 1973),Lyche (1975), andSimeonov and Goldman (2013).Quantum derivatives are difference quotients, and difference quotients are divided differences. ThusDh(f)(t)=(f(t+h)−f(t))/h=f[t,t+h].Dq(f)(t)=(f(qt)−f(t))/((q−1)t)=f[t,qt].Moreover higher order h-derivatives and q-derivatives are also divided differences up to constant multiples, sinceDhm(f)(t)=Dh(Dhm−1(f))(t)=m!f[t,t+h,…,t+mh]Dqm(f)(t)=Dq(Dqm−1(f))(t)=[m]q!f[t,qt,…,qmt],where[m]qis a q-integer (see Section 2). Therefore, to generalize our notions of quantum splines, we shall consider quantum derivatives based on divided differences.To define the general concept of an m-th order quantum derivative, we start with an arbitrary collection of linear functionsG(t)=(g1(t),…,gd(t)). We set the m-th order quantum G-derivative to be(1.1)DGm(f)(t)=f[g1(t),…,gm+1(t)],m=0,…,d−1.A generalized quantum spline or G-spline is a piecewise polynomial whose G-derivatives up to some order agree at the knots.We begin our investigation of these generalized quantum splines in Section 2 with a brief review of divided differences. We then define quantum derivatives as in (1.1) in terms of divided differences composed with linear functions.In Section 3 we recall the notion of the generalized quantum blossom from Goldman and Simeonov (in press), which is our main tool for analyzing quantum splines. The generalized quantum blossom or the quantum G-blossom of a degree d polynomialP(t)is the unique symmetric, multiaffine functionp(u1,…,ud;G)that reduces toP(t)along the G-diagonal-that is,p(g1(t),…,gd(t);G)=P(t). Under mild restrictions on the linear functionsg1(t),…,gd(t), the G-blossom does indeed exist and is unique (Goldman and Simeonov, in press).We apply this G-blossom in Section 4 to construct the local quantum analogue of the de Boor recursive evaluation algorithm for one polynomial segment of a quantum spline. Since at this point we are dealing with a single polynomial segment, here we also investigate quantum Bernstein basis functions, the generalized quantum analogues of the classical Bernstein basis functions.Section 5 is devoted to the study of piecewise polynomials generated locally by the quantum analogue of the de Boor recursive evaluation algorithm. We call these curves generalized quantum B-spline curves or G-B-spline curves, and we show that these G-B-spline curves are indeed piecewise polynomials whose quantum G-derivatives up to some order agree at the joins. In the rest of this paper we shall often omit the adjective generalized when speaking about quantum blossoms, quantum B-splines, and quantum Bernstein bases.In Section 6 we study multiplicity. For quantum splines there are two kinds of multiplicity: multiplicity in the knotsT={ti}and multiplicity in the linear functionsG(t)=(g1(t),…,gd(t)). We show that multiplicity in the knots T decreases the order of smoothness at the knots, but multiplicity in the functionsG(t)increases the order of smoothness at the knots.In Section 7 we consider the question of whether all quantum spline curves are quantum B-spline curves-that is, can all piecewise polynomials whose quantum derivatives up to some order agree at the knots be generated by the quantum de Boor algorithm? Classically all spline curves are indeed B-spline curves-that is, all piecewise polynomials whose classical derivatives up to some order agree at the knots can be generated by the de Boor algorithm (Goldman, 2003). For quantum splines we show that in certain important special cases all quantum spline curves are indeed quantum B-spline curves, but in the Appendix we provide an example to show that this result fails to hold in full generality.Some elementary properties of quantum B-spline curves that mostly mimic the elementary properties of classical B-spline curves are presented in Section 8. Some non-classical properties such as interpolation of all the control points for certain special knot sequences are also derived.In Section 9 standard knot insertion algorithms for classical B-spline curves are shown to hold as well for quantum B-spline curves. However, the control polygons generated by these knot insertion algorithms do not converge to the original quantum B-spline curves, so we cannot use standard knot insertion algorithms to analyze quantum B-spline curves. Nevertheless, we can use these standard knot insertion procedures to convert from quantum B-spline to piecewise quantum Bézier form. Subdivision algorithms for quantum Bézier curves based on knot insertion procedures do converge to the original quantum Bézier curves (Goldman and Simeonov, in press; Simeonov et al., 2012, 2011). So by converting to piecewise quantum Bézier form, we can apply knot insertion procedures to render and intersect quantum B-spline curves.We close in Section 10 by studying quantum B-spline bases, the quantum analogues of classical B-spline bases. We show that these quantum B-spline bases share many of the properties of classical B-spline bases: they form a partition of unity, have compact support, and satisfy a de Boor recurrence, a two term differentiation formula, a Marsden identity, a truncated powers formula, and a de Boor–Fix formula. Some non-classical properties such as cardinal conditions for certain special knot sequences are also investigated.Quantum splines are piecewise polynomials whose quantum derivatives up to some order agree at the joins. Since quantum derivatives are defined in terms of divided differences, we begin here with a brief review of divided differences.The d-th order divided difference of a function f evaluated at the nodest0≤t1≤…≤tdis denoted byf[t0,…,td]and can be defined recursively by setting (Goldman, 2003, Section 4.2):f[t0]=f(t0)f[t0,…,td]={f[t1,…,td]−f[t0,…,td−1]td−t0,td≠t0f(d)(t0)d!,td=t0.We extend this definition by settingf[tσ(0),…,tσ(d)]=f[t0,…,td]for every permutation σ of the integers0,…,d. It follows easily by induction on d that the divided difference is well-defined. We shall also need the following result about divided differences.Proposition 2.1The following statements are equivalent:1.f1[t0,…,tm]=f2[t0,…,tm],m=0,…,d.2.f1[ti1,…,tik]=f2[ti1,…,tik]for every subset{i1,…,ik}of{0,…,d}.3. For every0≤i≤d,f1(r)(ti)=f2(r)(ti),r=0,…,μi−1, whereμiis the multiplicity oftiin the set{tj}j=0d.Proof1⇔2: This equivalence follows from Lemma 2.2 below.2⇒3: Follows from the definition of divided difference.3⇒2: Follows easily by induction on k. □Lemma 2.2The following statements are equivalent:1.f1[t0,…,tm]=f2[t0,…,tm],m=0,…,d.2.f1[ti,…,ti+k]=f2[ti,…,ti+k],0≤i≤i+k≤d.Proof1⇒2: Follows easily by induction on i.2⇒1: Obvious. □Quantum derivatives are defined in terms of divided differences. For example, givenh≠0the quantum h-derivative is defined byDh(f)(t)=f(t+h)−f(t)h=f[t,t+h].Similarly, givenq≠1the quantum q-derivative is defined byDq(f)(t)=f(qt)−f(t)(q−1)t=f[t,qt].We can extend these standard notions of a quantum derivative to a quantum(q,h)-derivative. Givenq≠0and(q,h)≠(1,0), the(q,h)-derivative of a functionf(t)is defined by(2.1)Dq,h(f)(t)=f(qt+h)−f(t)(q−1)t+h=f[t,qt+h].Iff(t)is differentiable at t, then(2.2)D1,0(f)(t):=f′(t)=lim(q,h)→(1,0)⁡Dq,h(f)(t).The product rule forDq,his(2.3)Dq,h(f1f2)(t)=f1(t)Dq,h(f2)(t)+f2(qt+h)Dq,h(f1)(t).For a functionf(t1,…,tn)we define the quantum(q,h)-partial derivatives by(2.4)Dq,h,tj(f(t1,…,tn))=f(t1,…,tj−1,qtj+h,tj+1,…,tn)−f(t1,…,tn)(q−1)tj+h.It follows immediately from (2.4) that these partial derivatives commute, that is(2.5)Dq1,h1,tjDq2,h2,tl(f(t1,…,tn))=Dq2,h2,tlDq1,h1,tj(f(t1,…,tn)),1≤j≠l≤n.Higher order(q,h)-derivatives can also be expressed in terms of divided differences. To see how, we need to employ composite functions. Setg(t)=qt+hwithq≠0. It follows by induction on m that the m-fold composition ofg(t)with itself is(2.6)g[m](t)=(g∘⋯∘g︸m)(t)=qmt+[m]qhwhere the q-integer[m]qis defined by[m]q=1+q+⋯+qm−1,[m]q=qm−1q−1,q≠1.We setg[0](t)=tand for later use we also introduce the inverse functions(2.7)g−1(t)=t/q−h/q,g[−m](t)=(g−1)[m](t).From (2.6) it follows that(2.8)g[m](t)−t=[m]q(g(t)−t),(2.9)g[m](y)−g[m](x)=qm(y−x).Using the composite functionsg[m](t), we can now compute higher order(q,h)-derivatives in terms of divided differences. Indeed by (2.8) and induction on m, we have(2.10)Dq,hm(f)(t)=Dq,h(Dq,hm−1f(t))=[m]q!f[t,g(t),…,g[m](t)],where[m]q!denotes the q-shifted factorial of m defined by Andrews et al. (1999), Kac and Cheung (2002)[m]q!=[1]q[2]q⋯[m]q,m≥1,[0]q!=1.Later in the paper we shall also use the q-binomial coefficients defined forq≠−1by Andrews et al. (1999), Kac and Cheung (2002)(2.11)[mi]q=[m]q![i]q![m−i]q!,i=0,…,m.The following rule is an immediate consequence of definitions (2.1), (2.10), and (2.6):(2.12)Dq,h(Dq,hm1(f)(g[m2](t)))=qm2Dq,hm1+1(f)(g[m2](t)).As an example of the(q,h)-derivative, we compute the(q,h)-derivative on monomials. Notice the similarities and differences between the(q,h)-derivative on monomials and the classical derivative on monomials.Lemma 2.3Letq≠0and(q,h)≠(1,0). Then1.Dq,h(td)=[d]qtd−1+lower order terms.2.Dq,hd(td)=[d]q!.3.Dq,hm(td)=0form>d.Proof1. By the definition ofDq,h, we haveDq,h(td)=(qt+h)d−td(qt+h)−t=∑j=0d−1(qt+h)jtd−1−j=[d]qtd−1+lower order terms.2. This result easily follows from part 1.3. This result easily follows from part 2. □Motivated by the(q,h)-derivatives, we now introduce the following general notion of quantum derivatives (or G-derivatives) for a vector of linear functionsG(t)=(g1(t),…,gd(t))by setting(2.13)DG0(f)(t)=f(g1(t)),DGm(f)(t)=f[g1(t),…,gm+1(t)],m=1,…,d−1.Typically, but not always, we shall setg1(t)=t. We shall see in Sections 5–7 that generalized quantum splines can be defined in terms of this general notion of the quantum derivative.In the study of quantum B-splines we need to determine when two polynomial segments have matching quantum derivatives. Therefore we close this section with criteria for two functions to have matching quantum derivatives.Proposition 2.4The following statements are equivalent:1.DGm(f1)(t)=DGm(f2)(t),m=0,…,d−1.2.f1[g1(t),…,gm(t)]=f2[g1(t),…,gm(t)],m=1,…,d.3.f1(r)(gi(t))=f2(r)(gi(t)),r=0,…,μi−1, whereμiis the multiplicity ofgi(t)in{gj(t)}j=1d.4.f1[gi1(t),…,gik(t)]=f2[gi1(t),…,gik(t)]for every{i1,…,ik}⊆{1,…,d}.5.DGImf1(t)=DGImf2(t)for every subsetGI(t)=(gi1(t),…,gik(t))ofG(t)and0≤m≤k.ProofThis result follows immediately from definition (2.13) and Proposition 2.1. □The generalized quantum blossom lies at the very heart of our construction of generalized quantum B-splines. This blossom was introduced and studied in Goldman and Simeonov (in press). Here we recall the definition and main properties of this generalized quantum blossom.Let(3.1)φd,0(u1,…,ud)=1,φd,k(u1,…,ud)=∑1≤i1<⋯<ik≤dui1⋯uik,k=1,…,ddenote thed+1elementary symmetric functions in d variables.Definition 3.1A vectorG(t)=(g1(t),…,gd(t))of d linear functionsgj(t)=qjt+hj,j=1,…,dis called an admissible vector ifφd,k(q1,…,qd)≠0,k=1,…,d.Notice that ifq1,…,qdall have the same sign thenG(t)is admissible. Moreover, letg(t)=qt+h, whereq≠0,−1. ThenG(t)=(t,g(t),…,g[d−1](t))is admissible, since by Simeonov et al. (2012), Lemma 3.2φd,k(1,q,…,qd−1)=qk(k−1)/2[dk]q≠0,k=1,…,d.Theorem 3.2LetG(t)=(g1(t),…,gd(t))be an admissible vector and letP(t)be a polynomial of degree d. Then there exists a unique functionp(u1,…,ud;G)that has the following properties:•Symmetry:p(uσ(1),…,uσ(d);G)=p(u1,…,ud;G)for everyσ∈SdMultiaffine:p(u1,…,cuk+(1−c)rk,…,ud;G)=cp(u1,…,uk,…,ud;G)+(1−c)p(u1,…,rk,…,ud;G)G-diagonal evaluation:p(g1(t),…,gd(t);G)=P(t).The proof of Theorem 3.2 is given in Goldman and Simeonov (in press). The functionp(u1,…,ud;G)is called the generalized blossom or the G-blossom of the polynomialP(t). WhenG(t)=(t,g(t),…,g[d−1](t))withg(t)=qt+h, the G-blossom is called(q,h)-blossom and is denoted byp(u1,…,ud;q,h)(Goldman and Simeonov, 2015).In order to represent certain quantum derivatives in terms of quantum blossom values, we need the notion of a multilinear G-blossom or multilinear quantum blossom for homogeneous polynomials. The homogenization of a degree d polynomialP(t)=∑k=0daktkis the bivariate polynomialP(t,w)=∑k=0daktkwd−k. Clearly,P(t,1)=P(t)andP(ct,cw)=cdP(t,w).Theorem 3.3Given a homogeneous polynomialP(t,w)and an admissible vectorG(t)=(g1(t),…,gd(t)), there exists a unique multilinear G-blossom ofP(t,w). That is, there exists a unique functionp((u1,w1),…,(ud,wd);G)satisfying the following three axioms:•Symmetry:p((uσ(1),wσ(1)),…,(uσ(d),wσ(d));G)=p((u1,w1),…,(ud,wd);G)for everyσ∈SdMultilinear:p((u1,w1),…,c1(uk,wk)+c2(rk,sk),…,(ud,wd);G)=c1p((u1,w1),…,(uk,wk),…,(ud,wd);G)+c2p((u1,w1),…,(rk,sk),…,(ud,wd);G)G-diagonal evaluation:p((g1(t,w),w),…,(gd(t,w),w);G)=P(t,w).The proof of Theorem 3.3 is given in Goldman and Simeonov (in press).We shall treat the multilinear G-blossom of a degree d homogeneous polynomialP(t,w)as the multilinear G-blossom of the polynomialP(t)=P(t,1). We shall also denote the multilinear G-blossom ofP(t,w)orP(t)byp(u˜1,…,u˜d;G)whereu˜i=(ui,wi),i=1,…,d, and we shall identify a blossom value u with the blossom pair(u,1).The classical multilinear blossom can be used to differentiate polynomials (Goldman, 2003). Moreover, the q-multilinear and the h-multilinear blossoms can be used to q-differentiate and to h-differentiate polynomials (Simeonov et al., 2012, 2011). This blossoming approach has also been extended to find certain(q,h)-derivatives of polynomials (Goldman and Simeonov, in press).Definition 3.4Given a vectorG(t)=(g1(t),…,gd(t)), we setGm(t)=(g1(t),…,gm(t))form=1,…,d.Proposition 3.5Letg(t)=qt+hwithq≠0and(q,h)≠(1,0), and letP(t)be a degree d polynomial with multilinear(q,h)-blossomp(u˜1,…,u˜d;q,h). Then(3.2)D1/q,−h/qmP(t)=[d]q![d−m]q!p(t,g(t),…,g[d−m−1](t),δ,…,δ︸m;q,h),m=0,…,d, whereδ=(1,0). Moreover(3.3)[d]q![d−m]q!p(u˜1,…,u˜d−m,δ,…,δ︸m;q,h)is the multilinear(q,h)-blossom ofD1/q,−h/qmP(t),m=0,…,d−1.The proof of Proposition 3.5 is given in Goldman and Simeonov (2015).Equations (3.2) and (2.10) yield the following result.Corollary 3.6Letg(t)=qt+hwithq≠0and(q,h)≠(1,0). Then the following expressions are equivalent:1.D1/q,−h/qmP(t)2.[d]q![d−m]q!p(t,g(t),…,g[d−m−1](t),δ,…,δ︸m;q,h)3.[m]1/q!P[t,g−1(t),…,g[−m](t)].Proposition 3.7Letg(t)=qt+hwithq≠0and(q,h)≠(1,0), and set(3.4)ψ0(t,x;q,h)=1,ψd(t,x;q,h)=∏ν=0d−1(x−g[ν](t)),d≥1.Then(3.5)D1/q,−h/q,tmψd(t,x;q,h)=(−1)m[d]q![d−m]q!ψd−m(t,x;q,h),m≤d,and zero otherwise. Furthermore(3.6)D1/q,−h/q,xmψd(t,x;q,h)=[d]1/q![d−m]1/q!ψd−m(g[m](t),x;q,h),m≤d,and zero otherwise.ProofThe multilinear(q,h)-blossom ofψd(t,x;q,h)is∏ν=1d(wνx−uν). Therefore (3.5) follows from (3.2). Equation (3.6) is the special caser1=0,r2=d−1of the more general formula(3.7)D1/q,−h/q,xm∏ν=r1r2(x−g[ν](t))=[r2−r1+1]1/q![r2−r1+1−m]1/q!∏ν=r1+mr2(x−g[ν](t)),forr1≤r2and0≤m≤r2−r1. Formula (3.7) is easily verified by induction on m. □The local de Boor algorithm evaluates points on a degree d polynomial curveP(t)recursively starting fromd+1control points which can be represented in terms of the blossom ofP(t)(Goldman, 2003). In this section we will construct a G-version of the classical local de Boor algorithm. Throughout the rest of this paperG(t)will denote an admissible vector of d linear functionsgj(t)=qjt+hj,j=1,…,d.Definition 4.1A sequence{ti}i=12dis called a progressive knot sequence ifti≠tjwheneveri≤d<j≤i+d.A sequence{(ti,ri)}i=12dis called a progressive homogeneous knot sequence iftirj−tjri≠0wheneveri≤d<j≤i+d.Recursive evaluation for the G-blossom. Let{ti}i=12dbe a progressive knot sequence. SetQk0=p(tk+1,…,tk+d;G),k=0,…,d, and define recursively(4.1)Qks=tk+d+1−ustk+d+1−tk+sQks−1+us−tk+stk+d+1−tk+sQk+1s−1,k=0,…,d−s,s=1,…,d.It follows by induction on s and the symmetry and multiaffine properties of the G-blossom that(4.2)Qks=p(tk+s+1,…,tk+d,u1,…,us;G),k=0,…,d−s,s=0,…,d. In particular,Q0d=p(u1,…,ud;G). Since the knot sequence is progressive the denominators in equation (4.1) do not vanish, so this algorithm is well-defined.Recursive evaluation for the multilinear G-blossom. Let{t˜i=(ti,ri)}i=12dbe a progressive homogeneous knot sequence. SetQ˜k0=p(t˜k+1,…,t˜k+d;G),k=0,…,d, and define recursively(4.3)Q˜ks=tk+d+1ws−rk+d+1ustk+d+1rk+s−tk+srk+d+1Q˜ks−1+rk+sus−tk+swstk+d+1rk+s−tk+srk+d+1Q˜k+1s−1,k=0,…,d−s,s=1,…,d. Using the identityu˜s=tk+d+1ws−rk+d+1ustk+d+1rk+s−tk+srk+d+1t˜k+s+rk+sus−tk+swstk+d+1rk+s−tk+srk+d+1t˜k+d+1,whereu˜s=(us,ws),s=1,…,d, the symmetry and the multilinear properties of the multilinear G-blossom and induction on s, we derive(4.4)Q˜ks=p(t˜k+s+1,…,t˜k+d,u˜1,…,u˜s;G),k=0,…,d−s,s=0,…,d. In particular,Q˜0d=p(u˜1,…,u˜d;G). Clearly, whenri=1,i=1,…,2d, (4.3) and (4.4) reduce to (4.1) and (4.2). The recursive evaluation algorithm for the multilinear G-blossom in the cubic case is illustrated schematically in Fig. 1. In Figs. 1 and 2, the value at each node is computed by multiplying the values at the nodes one level below directly to the left and to the right by the quantity along the arrow exiting that node, and then adding the two products.Notice that these two evaluation algorithms for the G-blossom are identical to the evaluation algorithms for the classical blossom, since these algorithms depend only on the symmetry and multiaffine or multilinear properties of the G-blossom. Only when we perform polynomial evaluation with the G-blossom and make use of the diagonal property do we get new algorithms.Recursive polynomial evaluation. By the symmetry and diagonal properties of the G-blossom it follows that for any permutationσ∈Sdwe can setui=gσ(i)(t),i=1,…,din (4.1) and evaluateP(t)recursively. In particular,(4.5)Q0d=p(gσ(1)(t),…,gσ(d)(t);G)=P(t).In this way for a degree d polynomial we can generate d! recursive evaluation algorithms starting from the G-blossom values at any progressive knot sequence.The m-th order quantum derivativeD1/q,−h/qmof a degree d polynomialP(t)can be evaluated using equation (3.2) and the recursive evaluation algorithm for the multilinear G-blossom. There are(dm)(d−m)!=d!/m!such distinct recursive evaluation algorithms forD1/q,−h/qmP(t).The G-de Boor algorithm. The G-de Boor algorithm is the recursive polynomial evaluation algorithm generated by using the permutationσ(i)=d+1−i,i=1,…,d. Therefore in the G-de Boor algorithmPk0=p(tk+1,…,tk+d;G),k=0,…,d, and(4.6)Pks=tk+d+1−gd−s+1(t)tk+d+1−tk+sPks−1+gd−s+1(t)−tk+stk+d+1−tk+sPk+1s−1,k=0,…,d−s,s=1,…,d. In this case by (4.2)(4.7)Pks=p(tk+s+1,…,tk+d,gd−s+1(t),…,gd(t);G),k=0,…,d−s,s=1,…,d. In particular,P0d=p(g1(t),…,gd(t);G)=P(t). We shall see in Section 5 that this particular evaluation algorithm is especially important for developing the theory of generalized quantum B-splines. The G-de Boor algorithm for cubic polynomials is illustrated schematically in Fig. 2.ExampleConsider the polynomial(4.8)ψd(t,x;G)=(x−g1(t))⋯(x−gd(t)).The multiaffine and the multilinear G-blossoms ofψd(t,x;G)are given by(x−u1)⋯(x−ud)and(xw1−u1)⋯(xwd−ud). Using the preceding algorithms, we can evaluateψd(t,x;G), the multiaffine G-blossom ofψd(t,x;G), and the multilinear G-blossom ofψd(t,x;G)recursively from the initial values{(x−tk+1)⋯(x−tk+d)}k=0dand{(xrk+1−tk+1)⋯(xrk+d−tk+d)}k=0d.LetBkd(t;T;G)be the function generated by any G-recursive evaluation algorithm from the initial valuesPj=δj,k, whereG(t)=(g1(t),…,gd(t))is an admissible vector andT={t1,…,t2d}is a progressive knot sequence. Then for any degree d polynomialP(t), by the G-recursive evaluation algorithm and linearity we have(4.9)P(t)=∑k=0dBkd(t;T;G)p(tk+1,…,tk+d;G).In particular, the functions{Bkd(t;T;G)}k=0dform a basis for the space of polynomials of degree d because every polynomial has a G-blossom. This basis is called the progressive G-basis for the progressive knot sequence T. We shall see in Section 10 that the progressive basis functions{Bkd(t;T;G)}k=0drepresent the generalized quantum B-splines over a single polynomial segment.WhenG(t)=(t,g(t),…,g[d−1](t))withg(t)=qt+h, we denote these progressive basis functions by{Bkd(t;T;q,h)}k=0d.Since the control points of a polynomial relative to a fixed basis are unique, equation (4.9) implies the following dual functional property:Dual functional property. LetP0,…,Pdbe the control points of a degree d polynomialP(t)relative to a progressive basis{Bkd(t;T;G)}k=0d, that is, letP(t)=∑k=0dBkd(t;T;G)Pk. Then(4.10)Pk=p(tk+1,…,tk+d;G),k=0,…,d.Using the de local Boor algorithm, we can generate a recurrence for the progressive basis functions. LetG(t)=(g1(t),…,gd(t))be an admissible vector and letT={t1,…,t2d}be a progressive knot sequence. By the definition of a progressive G-basis and the G-de Boor algorithm, for any degree d polynomialP(t)we have(4.11)P(t)=∑k=0dBkd(t;t1,…,t2d;G)Pk0=∑k=0d−1Bkd−1(t;t2,…,t2d−1;Gd−1)Pk1.Now from (4.11) and (4.6) withs=1andPk0=δk,i,k=0,…,d, it follows that(4.12)Bid(t;t1,…,t2d;G)=gd(t)−titi+d−tiBi−1d−1(t;t2,…,t2d−1;Gd−1)+ti+d+1−gd(t)ti+d+1−ti+1Bid−1(t;t2,…,t2d−1;Gd−1),i=0,…,d, whereB−1d−1:=0andBdd−1:=0.We can also generate a two-term recurrence for the multilinear G-blossom of the progressive basis functions. Let{t˜i=(ti,ri)}i=12dbe a progressive homogeneous knot sequence and letbkd(u˜1,…,u˜d;t˜1,…,t˜2d;G)denote the G-blossom ofBkd(t;t1,…,t2d;G),k=0,…,d. For the homogeneous G-blossomp(u˜1,…,u˜d;G)of a degree d polynomialP(t)by linearity we have(4.13)p(u˜1,…,u˜d;G)=∑k=0dbkd(u˜1,…,u˜d;t˜1,…,t˜2d;G)Q˜k0=∑k=0d−1bkd−1(u˜2,…,u˜d;t˜2,…,t˜2d−1;Gd−1)Q˜k1.It follows from equations (4.13) and (4.3) withs=1andQ˜k0=δk,i,k=0,…,d, thatbid(u˜1,…,u˜d;t˜1,…,t˜2d;G)satisfies the recurrence relation(4.14)bid(u˜1,…,u˜d;t˜1,…,t˜2d;G)=riu1−tiw1ti+dri−tiri+dbi−1d−1(u˜2,…,u˜d;t˜2,…,t˜2d−1;Gd−1)+ti+d+1w1−ri+d+1u1ti+d+1ri+1−ti+1ri+d+1bid−1(u˜2,…,u˜d;t˜2,…,t˜2d−1;Gd−1),i=0,…,d, whereb−1d−1:=0andbdd−1:=0.One canonical set of progressive basis functions{Bkd(t;T;G)}k=0dare the G-Bernstein basis functions. For any admissible vectorG(t)=(g1(t),…,gd(t))and any interval[a,b]such thatgj(b)≠gi(a),1≤j<i≤d, the G-Bernstein basis functions are the progressive basis functions{Bkd(t;T;G)}k=0dfor the knotsT={g1(a),…,gd(a),g1(b),…,gd(b)}. We denote these basis functions by{Bkd(t;[a,b];G)}k=0d, and we call the curves using{Bkd(t;[a,b];G)}k=0das blending functions G-Bézier curves over the interval[a,b].Explicit formulas for the G-Bernstein basis functions for an arbitrary admissible vectorG(t)are not known. But for a special class of admissible vectorsG(t), one can write an explicit formula for the G-Bernstein basis functions (Nowak, 2009; Goldman and Simeonov, 2015).Proposition 4.2(SeeGoldman and Simeonov, 2015, Proposition 4.12.) LetG(t)=(t,g(t),…,g[d−1](t)), whereg(t)=qt+hwithq≠0. Let[a,b]be an interval such thatb≠g[j](a),j=0,…,d−1. Define the knot sequencetj=g[j−1](a),td+j=g[j−1](b),j=1,…,d, and the progressive basis functionsBkd(t;[a,b];q,h):=Bkd(t;t1,…,t2d;G),k=0,…,d. Then(4.15)Bkd(t;[a,b];q,h)=[dk]q∏j=0k−1(t−g[j](a))∏j=0d−k−1(b−g[j](t))∏j=0d−1(b−g[j](a)),k=0,…,d.The functions in equation (4.15) are called the(q,h)-Bernstein basis functions on the interval[a,b]. Notice that these(q,h)-Bernstein basis functions reduce to the classical Bernstein basis functions wheng(t)=t. Moreover in the caseg(t)=qt, the(q,h)-Bernstein basis functions reduce to the q-Bernstein basis functions (Lewanowicz and Woźny, 2004), (Simeonov et al., 2012, Theorem 6.3), and in the caseg(t)=t−h, the(q,h)-Bernstein basis functions reduce to the h-Bernstein basis functions (Stancu, 1984), (Simeonov et al., 2011, Theorem 4.3).For the classical Bernstein bases, there is a two-term formula for the derivative of a Bernstein basis function in terms of Bernstein basis functions of lower degree. Next we shall show that there is an analogous two-term formula for the(1/q,−h/q)-derivatives of the progressive(q,h)-Bernstein basis functions.Proposition 4.3Letg(t)=qt+hwithq≠0and(q,h)≠(1,0). Then(4.16)1[d]qD1/q,−h/qBid(t;t1,…,t2d;q,h)=Bi−1d−1(t;t2,…,t2d−1;q,h)ti+d−ti−Bid−1(t;t2,…,t2d−1;q,h)ti+d+1−ti+1.ProofSettingu˜1=δ=(1,0),u˜ν=(g[ν−2](t),1),ν=2,…,d, andri=1,i=1,…,2din (4.14) and applying (3.2) yields (4.16). □For many additional interesting properties of(q,h)-Bernstein basis functions and(q,h)-Bézier curves, see Goldman and Simeonov (2015).In Section 4 we examined one segment of a polynomial curve. Here we are going to investigate piecewise polynomials whose quantum derivatives agree at the knots. We begin by extending the notion of progressive knot sequences of length 2d for polynomials of degree d to knot sequences of arbitrary length for piecewise polynomials of degree d.Definition 5.1A knot sequenceT={ti}is called a progressive knot sequence of order d if wheneverti+1≠tithe sequenceti−d+1,…,ti+dis progressive and no knot has local multiplicity greater than d-that is, ifti=ti+1=⋯=ti+d−1, thenti+d≠ti+d−1.Progressive knot sequences of order d will be used to construct quantum B-spline curves of degree d. When the degree d is fixed, we shall simply say progressive knot sequence instead of saying progressive sequence of order d.Notice that in a progressive knot sequence the knots need not be non-decreasing; as the indices get larger, the knots can increase, decrease, or repeat. Moreover, in a progressive knot sequence knot intervals can even repeat or overlap, as long as the repeating or overlapping knot intervals are far enough apart. All we require is that the local de Boor algorithm is well defined for all non-empty knot intervals and that the local multiplicity of any knot is at most d.Progressive knot sequences, though unorthodox, are not without precedent in the theory of splines. Peters (2013) investigated classical splines with progressive knot sequences; Peters calls these progressive knot sequences unsorted or collocated knot sequences. In addition, splines with complex knots where the notion of non-decreasing is not meaningful have been investigated by Tsianos and Goldman (2011).Definition 5.2LetG(t)=(g1(t),…,gd(t))be an admissible vector and letT={ti}be a progressive knot sequence. A G-B-spline curve of degree d is a piecewise polynomial curveB(t)whose polynomial segments are generated by the local G-de Boor algorithm for the knot sequenceT={ti}and a sequence of control points{Pj}. The polynomial segments ofB(t)are the segments of the polynomial curvesBk(t)over the corresponding intervals[tk,tk+1], where eachBk(t)is generated by the local G-de Boor algorithm for the knotstk−d+1,…,tk+dand the control pointsPk−d,…,Pk. WhenG(t)=(t,g(t),…,g[d−1](t)), whereg(t)=qt+hwithq≠0,−1and(q,h)≠(1,0), a G-B-spline curve of degree d is called(q,h)-B-spline curve of degree d.Our goal in this section is to show that adjacent segments of a G-B-spline curve of degree d meet withd−1matching quantum derivatives. Here we shall assume that in our progressive knot sequenceti+1≠tifor all i. G-B-splines with multiple knots will be investigated in Section 6.2. As promised our main tool for analyzing these G-B-spline curves will be the quantum G-blossom.Theorem 5.3LetBk−1(t)andBk(t)be adjacent segments of a G-B-spline curve with progressive knotsT={ti}and admissible vectorG(t)=(g1(t),…,gd(t)). Letbk−1(u1,…,ud;G)andbk(u1,…,ud;G)be the multiaffine or multilinear G-blossoms ofBk−1(t)andBk(t). Then for all blossom valuesu1,…,ud−1(either affine or homogeneous)(5.1)bk−1(tk,u1,…,ud−1;G)=bk(tk,u1,…,ud−1;G).ProofThe polynomial curvesBk−1(t)andBk(t)have d common control points{Pj}j=k−dk−1and2d−1common knots{ti}i=k−d+1k+d−1. By the dual functional property (4.10)(5.2)bk−1(ti+1,…,ti+d;G)=Pi=bk(ti+1,…,ti+d;G),i=k−d,…,k−1. Applying the recursive evaluation algorithm (4.3)–(4.4) for the G-blossom to the G-blossom values in (5.2) and observing that∩i=k−dk−1{ti+1,…,ti+d}={tk}, we obtain (5.1). □Theorem 5.4LetBk−1(t)andBk(t)be adjacent polynomial segments of a G-B-spline curve with progressive knotsT={ti}and admissible vectorG(t)=(g1(t),…,gd(t)). Then(5.3)Bk−1(r)(gj−1(tk))=Bk(r)(gj−1(tk)),r=0,…,μj−1,j=1,…,d,whereμjis the multiplicity ofgj−1(tk)in the set{gl−1(tk)}l=1d.ProofSetLk(t)=Bk(t)−Bk−1(t)and letlk(u1,…,ud;G)be the G-blossom ofLk(t). Suppose thattk⁎:=gj−1(tk)has multiplicityμjin the set{gl−1(tk)}l=1d. By the symmetry of the G-blossom we may assume thatgj−1(tk)=tk⁎,j=1,…,μ, whereμ=μ1. Thengj(tk⁎)=tk,j=1,…,μ. We are going to show that the first μ terms in the Taylor expansion ofLk(t)vanish att=tk⁎and therefore thatLk(r)(tk⁎)=0,r=0,…,μ−1.By Theorem 5.3 we have(5.4)lk((tk,1),(u1,1),…,(ud−1,1);G)=0for all values of the blossom variablesu1,…,ud−1. Moreover by the G-diagonal property and the linearity of the functionsgj(t)=qjt+hj,j=1,…,d, it follows that(5.5)Lk(tk⁎+ϵ)=lk(g1(tk⁎+ϵ),…,gd(tk⁎+ϵ);G)=lk(tk+q1ϵ,…,tk+qμϵ,gμ+1(tk⁎)+qμ+1ϵ,…,gd(tk⁎)+qdϵ;G)=lk((tk,1)+q1ϵδ,…,(tk,1)+qμϵδ,(gμ+1(tk⁎),1)+qμ+1ϵδ,…,(gd(tk⁎),1)+qdϵδ;G),whereδ=(1,0). By (5.5) and the multilinear property of the homogeneous G-blossom, for everyr=0,…,μ−1the coefficient ofϵrin the Taylor expansion ofLk(tk⁎+ϵ)as a polynomial in ϵ is a linear combination of G-blossom values of the formlk(tk,u1,…,ud−1;G)and therefore vanishes by (5.4). HenceLk(r)(tk⁎)=drLk(tk⁎+ϵ)/dϵr|ϵ=0=0,r=0,…,μ−1. Therefore (5.3) holds. □Corollary 5.5LetBk−1(t)andBk(t)be adjacent polynomial segments of a G-B-spline curve with progressive knotsT={ti}and admissible vectorG(t)=(g1(t),…,gd(t)). Then(5.6)Bk−1[gi1−1(tk),…,gim−1(tk)]=Bk[gi1−1(tk),…,gim−1(tk)]for every1≤i1<⋯<im≤dandm=1,…,d.ProofThis result follows immediately from Theorem 5.4 and Proposition 2.1. □Corollary 5.6LetBk−1(t)andBk(t)be adjacent polynomial segments of a G-B-spline curve with progressive knotsT={ti}and admissible vectorG(t)=(g1(t),…,gd(t)). SetG−1(t)=(g1−1(t),…,gd−1(t)). Then for everyI={ij}j=1m⊆{1,…,d},(5.7)DGI−1rBk−1(tk)=DGI−1rBk(tk),r=0,…,m−1.ProofThis result follows immediately from Theorem 5.4 and Proposition 2.4. □Corollary 5.7LetBk−1(t)andBk(t)be adjacent polynomial segments of a(q,h)-B-spline curve of degree d with progressive knotsT={ti}. Then(5.8)D1/q,−h/qmBk−1(tk)=D1/q,−h/qmBk(tk),m=0,…,d−1.ProofThis result follows immediately from Corollary 5.5 and equation (2.10). □Classical B-spline curves can have multiple knots: knots where the smoothness decreases by the multiplicity of the knot. G-B-spline curves can have two kinds of multiplicity: multiplicity along the G-diagonal and multiplicity in the knots. These two kinds of multiplicity have inverse effects: multiplicity along the G-diagonal increases the order of smoothness of certain quantum derivatives; multiplicity in the knots decreases the order of smoothness. In addition, we shall see that each of these two kinds of multiplicity have two subcategories of multiplicity:(q,h)-multiplicity and t-multiplicity. In this section we shall study each of these kinds of multiplicity and their effects on the quantum smoothness of the corresponding G-B-spline curves.There are two interesting kinds of multiplicity along the G-diagonal:(q,h)-multiplicity and t-multiplicity. Each of these multiplicities increases the smoothness of certain quantum or classical derivatives. We begin here with the definitions of these two kinds of multiplicity.Definition 6.1Letg(t)=qt+hwithq≠0and(q,h)≠(1,0). We say that an admissible vectorG(t)=(g1(t),…,gd(t))has(q,h)-multiplicity m if the functions(t,g(t),…,g[m−1](t))are a subset ofG(t). (Note that the order does not matter.) In particular,G(t)has q-multiplicity m if the functions(t,qt,…,qm−1t)are a subset ofG(t)and h-multiplicity m if the functions(t,t−h,…,t−(m−1)h)are a subset ofG(t).Definition 6.2We say that an admissible vectorG(t)has t-multiplicity m if the functions(t,…,t︸m)are a subset ofG(t)=(g1(t),…,gd(t)).Theorem 6.3LetBk−1(t)andBk(t)be adjacent polynomial segments of a G-B-spline curveB(t)with progressive knotsT={ti}and admissible vectorG(t)=(g1(t),…,gd(t)). Suppose that(gs(t),g(gs(t)),…,g[m−1](gs(t)))is a subset ofG(t)for someg(t)=qt+h, where(q,h)≠(1,0)andg∘gs=gs∘g. Then(6.1)D1/q,−h/qrBk−1(gs−1(tk))=D1/q,−h/qrBk(gs−1(tk)),r=0,…,m−1.ProofBy the symmetry of the G-blossom we may assume thats=1andgj+1(t)=g[j](g1(t)),j=0,…,m−1. Sinceg∘g1=g1∘g, we havegj+1−1(t)=g[−j](g1−1(t)),j=0,…,m−1. Therefore by Theorem 5.4,Bk−1(g[−j](g1−1(tk)))=Bk(g[−j](g1−1(tk))),j=0,…,m−1. Now the result follows immediately from equation (2.10) and Proposition 2.1. □To see when the composition of two linear functions is commutative, suppose thatg1(t)=q1t+h1andg2(t)=q2t+h2. Then(g1∘g2)(t)=(g2∘g1)(t)if and only ifq1q2t+q1h2+h1=q2q1t+q2h1+h2or equivalently if and only if(q1−1)h2=(q2−1)h1. In particular,(g1∘g2)(t)=(g2∘g1)(t)if eitherq1=q2=1orh1=h2=0. One can also show that(g1∘g2)(t)=(g2∘g1)(t)if an only ifg1(t)=qr1t+[r1]qhandg2(t)=qr2t+[r2]qhfor some q, h,r1, andr2.We could try to derive a result similar to Theorem 6.3 for t-multiplicity, by taking limits as(q,h)→(1,0). But then we would need to worry about the meaning of divided differences for multiple nodes and taking these limits can be a bit tricky. Also there is no need for analytic methods (e.g. limits) here. Since we are dealing with polynomials, everything can be defined and derived algebraically, including the notions of derivative and Taylor expansion. Therefore we shall use Taylor expansion to derive the result about t-multiplicity.Theorem 6.4LetB(t)be a G-B-spline curve with progressive knotsT={ti}and admissible vectorG(t)=(g1(t),…,gd(t))with t-multiplicity m. ThenB(t)isCm−1continuous at the knots.ProofThis theorem is a particular case of the following theorem. □Theorem 6.5LetB(t)be a G-B-spline curve with progressive knotsT={ti}and admissible vectorG(t)=(g1(t),…,gd(t)). Suppose thatG(t)contains(gs(t),…,gs(t)︸m). ThenB(gs−1(t))isCm−1continuous at the knots.ProofFor every knottkwhere adjacent segments ofB(t)meet, the multiplicity of the valuegs−1(tk)in the set{gl−1(tk)}l=1dis at least m. Therefore this result follows immediately from Theorem 5.4. □ExampleLetG(t)=(t,t,t,qt,q2t,t−h,t−h)and letT={ti}be a progressive knot sequence. Then at the knots, any G-B-spline curve has two matching classical derivatives (corresponding to(t,t,t)– Theorem 6.4), two matching1/q-derivatives (corresponding to(t,qt,q2t)– Theorem 6.3), and one matching h-derivative (corresponding to(t,t−h)– Theorem 6.3). For all knotstithere is also one matching classical derivative atti+h(corresponding to(t−h,t−h)– Theorem 6.5).Just like multiplicity along the G-diagonal, there are two interesting kinds of multiplicity in the knots:(q,h)-multiplicity and standard multiplicity (or simply multiplicity). When these multiplicities are combined with the corresponding multiplicities along the G-diagonal, the smoothness of certain classical or quantum derivatives decreases.Definition 6.6Letg(t)=qt+hwithq≠0and(q,h)≠(1,0)and letT={ti}be a progressive knot sequence. We say that a knottkhas(q,h)-multiplicityμk≤diftk+i=g[i](tk),i=1,…,μk−1, andtk+μk≠g[μk](tk).Definition 6.7LetT={ti}be a progressive knot sequence. We say that a knottkhas multiplicityμk≤diftk+i=tk,i=1,…,μk−1, andtk+μk≠tk.When a knottkhas multiplicityμk, the segmentsBk(t),…,Bk+μk−2(t)of a B-spline curveB(t)are empty.Theorem 6.8LetB(t)be a G-B-spline curve with progressive knotsT={ti}and admissible vectorG(t)=(g1(t),…,gd(t)). Suppose thatG(t)has(q,h)-multiplicity m and that the knottkhas(q,h)-multiplicityμk≤m. If(q,h)≠(1,0), then(6.2)D1/q,−h/qrBk−1(tk)=D1/q,−h/qrBk−1+m1(tk),r=0,…,m−m1,m1=1,…,μk.If(q,h)=(1,0), then(6.3)Bk−1(r)(tk)=Bk−1+μk(r)(tk),r=0,…,m−μk.Theorem 6.8 is a special case of the following theorem.Theorem 6.9LetB(t)be a G-B-spline curve with progressive knotsT={ti}and admissible vectorG(t)=(g1(t),…,gd(t)). Suppose that(gs(t),g(gs(t)),…,g[m−1](gs(t)))is contained inG(t), whereg(t)=qt+handg∘gs=gs∘g. Suppose too that the knottkhas(q,h)-multiplicityμk≤m. If(q,h)≠(1,0), then(6.4)D1/q,−h/qrBk−1(gs−1(tk))=D1/q,−h/qrBk−1+m1(gs−1(tk)),r=0,…,m−m1,m1=1,…,μk.If(q,h)=(1,0), then(6.5)Bk−1(r)(gs−1(tk))=Bk−1+μk(r)(gs−1(tk)),r=0,…,m−μk.ProofFirst suppose that(q,h)≠(1,0)and let1≤m1≤μk. The curvesBk−1(t)andBk−1+m1(t)haved+1−m1common control pointsPk−1+m1−d,…,Pk−1and2d−m1common knotstk+m1−d,…,tk−1+d. By the dual functional property (4.10)(6.6)bk−1(ti+1,…,ti+d;G)=Pi=bk−1+m1(ti+1,…,ti+d;G),i=k−1+m1−d,…,k−1. The common knots that appear in the G-blossom values in (6.6) aretk,…,tk−1+m1. Consider the symmetric, multiaffine functionsbˆν(u1,…,ud−m1)=bν(tk,…,tk−1+m1,u1,…,ud−m1;G),ν=k−1,k−1+m1. From (6.6) it follows that for eachi=k−1+m1−d,…,k−1,bˆk−1(ti+1,…,tk−1,tk+m1,…,ti+d)=bˆk−1+m1(ti+1,…,tk−1,tk+m1,…,ti+d).Thus, for the knot vector(tk+m1−d,…,tk−1,tk+m1,…,tk+d−1)of size2(d−m1), the functionsbˆk−1andbˆk−1+m1agree at each sequence ofd−m1consecutive knots. Therefore by the recursive evaluation algorithm for symmetric multilinear functionsbˆk−1(u1,…,ud−m1)=bˆk−1+m1(u1,…,ud−m1)or equivalently,(6.7)bk−1(tk,…,tk−1+m1,u1,…,ud−m1;G)=bk−1+m1(tk,…,tk−1+m1,u1,…,ud−m1;G).By the symmetry of the G-blossom we may assume thats=1andgj(t)=(g[j−1]∘g1)(t),j=1,…,m. Moreover by assumption form1≤μkwe havetk+i=g[i](tk),i=1,…,m1−1. Now lettˆk=g1−1(tk). Then, sinceg∘g1=g1∘g, for eachr=0,…,m−m1we can write(6.8)(tk,…,tk−1+m1)=(tk,g(tk),…,g[m1−1](tk))=((g[r]∘g1)(g[−r](tˆk)),…,(g[r+m1−1]∘g1)(g[−r](tˆk)))=(gr+1(g[−r](tˆk)),…,gr+m1(g[−r](tˆk))).Now let0≤r≤m−m1and in (6.7) set(6.9)ui={gi(g[−r](tˆk)),i=1,…,rgi+m1(g[−r](tˆk)),i=r+1,…,d−m1.From (6.7), (6.8), (6.9), and the diagonal property of the G-blossom it follows that(6.10)Bk−1(g[−r](tˆk))=Bk−1+m1(g[−r](tˆk)),r=0,…,m−m1,m1=1,…,μk. Now (6.4) follows from (6.10), (2.10), and Proposition 2.1.Next, suppose that(q,h)=(1,0), that isg(t)=t. Once again we can assume thats=1. In this case we can use the previous argument to establish (6.7) but only form1=μk. We get(6.11)bk−1(tk,…,tk︸μk,u1,…,ud−μk;G)=bk−1+μk(tk,…,tk︸μk,u1,…,ud−μk;G).By the diagonal property of the homogeneous G-blossom(6.12)Bν(g1−1(tk+ϵ))=bν((tk,1)+ϵδ,…,(tk,1)+ϵδ︸m,(gˆm+1(tk),1)+qˆm+1ϵδ,…,(gˆd(tk),1)+qˆdϵδ;G),ν=k−1,k−1+μk, whereδ=(1,0)andgˆj(t)=gj(g1−1(t))=qˆjt+hˆj,j=m+1,…,d. By (6.12) and the linearity of the homogeneous G-blossom, for everyr=0,…,m−μkthe coefficient ofϵrinBν(g1−1(tk+ϵ))=Bν(tˆk+ϵ/q1)is a linear combination of G-blossom values that appear in (6.11). Therefore by (6.11), for everyr=0,…,m−μkthe coefficients ofϵrinBk−1(tˆk+ϵ/q1)andBk−1+μk(tˆk+ϵ/q1)are equal. This fact and the simple propertyF(r)(a+bϵ)=b−rdr(F(a+bϵ))/dϵryield (6.5). □ExampleLetG(t)=(t,t,t,qt,q2t,t−h)and letT={ti}be a progressive knot sequence of order 3 containing the knots(tk,…,tk+8)=(τ1,τ1,τ1,τ2,qτ2,q2τ2,τ3,τ3−h,τ3−2h).LetB(t)be a G-B-spline curve with knots T and polynomial segmentsBk(t). ThenBk−1(τ1)=Bk+2(τ1),D1/qrBk+2(τ2)=D1/qrBk+3(τ2),r=0,1,2,D1/qrBk+2(τ2)=D1/qrBk+4(τ2),r=0,1,Bk+2(τ2)=Bk+5(τ2),DhrBk+5(τ3)=DhrBk+6(τ3),r=0,1,2,DhrBk+5(τ3)=DhrBk+7(τ3),r=0,1,Bk+5(τ3)=Bk+8(τ3).Here we introduce the notion of generalized quantum spline curves or G-spline curves, and we explore under what conditions G-spline curves are G-B-spline curves.Definition 7.1Let{τi}i=1Ibe an increasing sequence of knots and letG(t)=(g1(t),…,gd(t))be an admissible vector. A G-spline curve of degree d with knots{τi}i=1Iis a function that is a polynomialSi(t)of degree d on[τi,τi+1],i=1,…,I−1, and for everyi=2,…,I−1there exists a non-empty setJi={j1,…,jmi}⊆{1,…,d}such that(7.1)DGJi−1rSi−1(τi)=DGJi−1rSi(τi),r=0,…,mi−1,that is,S(t)isGJi−1continuous atτi. WhenJi={1,…,d}, we say thatS(t)isG−1continuous at the knots{τi}.Definition 7.2LetG(t)=(t,g(t),…,g[d−1](t)), whereg(t)=qt+hwithq≠0,−1and(q,h)≠(1,0). A G-spline curveS(t)of degree d with knots{τi}i=1Iis called(q,h)-spline curve if there exist constants{mi}i=2I−1such that for everyi=2,…,I−1,S(t)has continuous(1/q,−h/q)-derivatives of orderr=0,…,mi−1at the knotτi.It follows from Corollary 5.6 that every G-B-spline curve with a non-decreasing knot sequence is a G-spline curve. However, not every G-spline curve is a G-B-spline curve. This fact is demonstrated in the Appendix with an example.Next we explore two important special cases where every G-spline curve is a G-B-spline curve:G−1-continuous spline curves and(q,h)-spline curves.Theorem 7.3LetG(t)=(g1(t),…,gd(t))be admissible and letS(t)be a G-spline curve that isG−1continuous at the knots{τi}. ThenS(t)is a G-B-spline curve.ProofLetSi(t)be the polynomial segment ofS(t)defined over the interval[τi,τi+1]and letsi(u1,…,ud;G)be the G-blossom ofSi(t),i=1,…,I−1. We begin by constructing an increasing knot sequence{tk}for the corresponding G-B-spline curve. Define the knotsti+d−1=τi,i=1,…,I, and let the knotst1<⋯<td−1<τ1andτI<tI+d<⋯<tI+2d−2be arbitrary. We shall now construct the G-B-spline curve corresponding toS(t)segment by segment. LetB1(t)be the polynomial of degree d generated by the local G-de Boor algorithm from the control pointsPj=s1(tj+1,…,tj+d;G),j=0,…,dand the knots{tk}k=12d. By the dual functional property-equation (4.9),S1(t)=∑j=0dBjd(t;t1,…,t2d;G)Pj≡B1(t).In particular,S1(t)≡B1(t)on[τ1,τ2]. Now we proceed by induction on1≤i≤I−1. Suppose that for some1≤i<I−1, we have already constructed the polynomialBi(t)by applying the local G-de Boor algorithm to the control pointsPj=si(tj+1,…,tj+d;G),j=i−1,…,i+d−1and the knots{tk}k=ii+2d−1. Again it follows from equation (4.9) thatSi(t)≡Bi(t). Next we construct a polynomialBi+1(t)by applying the local G-de Boor algorithm to the control pointsPj=si(tj+1,…,tj+d;G),j=i,…,i+d−1, and a (yet to be determined) control pointPi+d, and the knots{tk}k=i+1i+2d. By Corollary 5.5 and theG−1continuity ofS(t)atτi+1we haveBi+1[g1−1(τi+1),…,gr−1(τi+1)]=Bi[g1−1(τi+1),…,gr−1(τi+1)]=Si[g1−1(τi+1),…,gr−1(τi+1)]=Si+1[g1−1(τi+1),…,gr−1(τi+1)],r=1,…,d. These equations hold independent of the choice of the control pointPi+d. Now we pick a valueτi+1⁎∉{gj−1(τi+1)}j=1dand determine the control pointPi+dfrom the conditionBi+1(τi+1⁎)=Si+1(τi+1⁎), that is, by solving the linear equationBi+1(τi+1⁎)=∑j=ii+dBj−id(τi+1⁎;ti+1,…,ti+2d;G)Pj=Si+1(τi+1⁎)for the unknown control pointPi+d. Then by Proposition 2.1 the degree d polynomialsSi+1(t)andBi+1(t)agree at thed+1values{gj−1(τi+1)}j=1d∪{τi+1⁎}counting multiplicity. Hence,Si+1(t)≡Bi+1(t). Therefore the G-spline curveS(t)coincides with the G-B-spline curveB(t)over the interval[τ1,τI]. □As we mentioned at the start of this section, not every G-spline is a G-B-spline. Problems occur when the G-spline of degree d is notG−1continuous. However both for classical splines and for(q,h)-splines, lower order continuity can be modeled with multiple knots.Theorem 7.4LetG(t)=(g1(t),g(g1(t)),…,g[d−1](g1(t)))be admissible, whereg(t)=qt+hwith(q,h)≠(1,0)andg∘g1=g1∘g, and letS(t)be a G-spline curve with knots{τi}i=1I. ThenS(g1(t))is a G-B-spline curve with knots{g1−1(τi)}i=1I. In particular, ifg1(t)=t, thenS(t)is a G-B-spline curve.ProofLetSi(t)be the polynomial segment ofS(t)defined over the interval[τi,τi+1],i=1,…,I−1. Setτˆi=g1−1(τi),i=1,…,I. SinceS(t)is a G-spline curve, there are constants{mi}i=2I−1such that(7.2)(Si−Si−1)[τˆi,g−1(τˆi),…,g[−r](τˆi)]=0,r=0,…,mi−1,i=2,…,I−1. Letsi(u˜1,…,u˜d;q,h)be the(q,h)-blossom ofSi(t)and letsˆi(u˜1,…,u˜d;G)be the G-blossom ofSˆi(t)=Si(g1(t)). Now observe thatsˆi(u˜1,…,u˜d;G)=si(u˜1,…,u˜d;q,h),because the right-hand side is symmetric, multiaffine, and along the G-diagonalsi(g1(t),g(g1(t)),…,g[d−1](g1(t));q,h)=Si(g1(t))=Sˆi(t).From (7.2) and Corollary 3.6 it follows that(si−si−1)(τˆi,g(τˆi)…,g[d−r−1](τˆi),δ,…,δ;q,h)=0or equivalently,(7.3)(sˆi−sˆi−1)(τˆi,g(τˆi)…,g[d−r−1](τˆi),δ,…,δ;G)=0,r=0,…,mi−1,i=2,…,I−1.To construct the knots forSˆ(t), define the numbers{ki}i=1Iby(7.4)k1=d,k2=d+1,ki+1=ki+d−mi+1,i=2,…,I−1.Then define the knotstki=τˆi,i=1,…,I, andtki+ν=g[ν](τˆi),ν=1,…,d−mi,i=2,…,I−1,and choose knotst1≤⋯≤td−1≤τ1andτI≤tkI+1≤⋯≤tkI+mI−1−1so that the knot sequence{tk}k=1kI+d−1is progressive.Now notice that for everyi=2,…,I−1, the intersection of themisets of G-blossom parameter values in (7.3) is∩r=0mi−1{τˆi,g(τˆi),…,g[d−r−1](τˆi)}={tki,…,tki+1−1}.Applying the recursive evaluation algorithm for symmetric multilinear functions to themiG-blossom values in (7.3) yields(7.5)(sˆi−sˆi−1)(tki,…,tki+1−1,u˜1,…,u˜mi−1;G)=0for all values of the parametersu˜1,…,u˜mi−1,i=2,…,I−1. In particular,(sˆi−sˆi−1)(tj+1,…,tj+d;G)=0,j=ki+1−d−1,…,ki−1,i=2,…,I−1. Therefore the control points(7.6)Pj=sˆi(tj+1,…,tj+d;G),j=ki+1−d−1,…,ki+1−1,i=1,…,I−1, are well-defined.LetB(t)be the G-B-spline whose polynomial segments are the polynomialsBki+1−1(t)generated by the local G-de-Boor algorithm from the knots{tk}k=ki+1−dki+1+d−1and the control points{Pj}j=ki+1−d−1ki+1−1defined over the interval[tki,tki+1]=[τˆi,τˆi+1],i=1,…,I−1. By (7.6), the evaluation algorithms forSˆi(t)andBki+1−1(t)are the same; henceSˆi(t)≡Bki+1−1(t),i=1,…,I−1. Therefore the piecewise polynomial curveSˆ(t)coincides with the G-B-spline curveB(t). □Corollary 7.5All(q,h)-spline curves are(q,h)-B-spline curves.The case(q,h)=(q,0),q≠1of Corollary 7.5 is Theorem 6.3 in Simeonov and Goldman (2013). The classical case(q,h)=(1,0)not covered by Corollary 7.5 is treated by Theorem 7.3 in Goldman (2003).A G-B-spline curve of degree d is a piecewise polynomial curve specified by an admissible vectorG(t)=(g1(t),…,gd(t)), a progressive knot sequenceT={ti}, and an arbitrary set of control points{Pj}, where each individual polynomial segment is generated by the local G-de Boor algorithm.By construction (Definition 5.2), each segmentBk(t)of a G-B-spline curve of degree d•lies over the parameter interval[tk,tk+1]depends on the 2d knotstk−d+1,…,tk+dis specified byd+1control pointsPk−d,…,Pk.Below we list some elementary properties of G-B-spline curves:1. Piecewise polynomial. Obvious by construction.2. Quantum continuity of orderm−μat knots of(q,h)-multiplicity μ whenG(t)has(q,h)-multiplicity m, where0≤μ≤m≤d. This property follows from Theorem 6.8.3. Local control. On an interval[tk,tk+1]the values of a G-B-spline curveB(t)depend only on the control pointsPk−d,…,Pk. So a control pointPjinfluencesB(t)only over intervals[tk,tk+1]withj≤k≤j+d.Similarly, since the segment ofB(t)over the interval[tk,tk+1]depends only on the knotstk−d+1,…,tk+d, a knottjinfluencesB(t)only over intervals[tk,tk+1]withj−d≤k≤j+d−1.4. Affine invariance. Since each intermediate point in the G-de Boor algorithm is an affine combination of two other points at a lower level, applying an affine transformation to the control points will transform each intermediate point in the G-de Boor algorithm and therefore each point on the G-B-spline curve by the same affine transformation.5. Interpolation of control points at knots of G-multiplicity d. LetB(t)be a G-B-spline curve of degree d, whereG(t)=(t,g1(t),…,gd−1(t))is admissible. LetBk(t)be the segment ofB(t)over the interval[tk,tk+d]and letbk(u1,…,ud;G)be the G-blossom ofBk(t). Suppose that the knotstk,…,tk+d−1satisfytk+ν=gν(tk),ν=1,…,d−1. ThenPk−1=bk(tk,…,tk+d−1;G)=bk(tk,g1(tk),…,gd−1(tk);G)=Bk(tk)=B(tk).In particular ifgν(t)=g[ν](t),ν=1,…,d−1and the knots satisfytk+1=g(tk)for all k, then the G-B-spline curve interpolates all of its control points.A knot insertion algorithm is a procedure for introducing additional knots called pseudo-knots, knots where the same polynomial lies on both sides of the knot, to represent the same underlying B-spline curve. In this section, we review for completeness some basic insights from Simeonov and Goldman (2013) concerning knot insertion algorithms for quantum B-spline curves.In order to express a B-spline curve relative to a new set of knots, the control points change, even though the curve itself remains the same. A knot insertion procedure is a technique for computing these new control points from the original control points, the original knots, and the new knots. For classical B-splines, as the knot spacing approaches zero, the control polygons generated by knot insertion converge to the original underlying B-spline curve. This convergence is what makes knot insertion such a powerful tool for analyzing the geometry of B-spline curves: as the distance between the knots approaches zero, we can effectively replace the original B-spline curve with the simple piecewise linear curve represented by the control polygons generated from a knot insertion procedure.Many effective knot insertion algorithms are known for classical B-spline curves, including Boehm's knot insertion algorithm (Boehm, 1980), the Oslo algorithm (Cohen et al., 1980), the Lane–Riesenfeld algorithm for uniform B-splines (Lane and Riesenfeld, 1980), and Schaefer's algorithm for arbitrary B-splines (Schaefer and Goldman, 2009). All of these algorithms can be derived from blossoming, using only the symmetry and the multiaffine properties of the blossom. But as observed by Simeonov and Goldman (2013), any algorithm for classical B-spline curves derived from blossoming without invoking the diagonal property must also be valid for quantum (or G-) B-spline curves, since the symmetry and multiaffine properties hold as well for the quantum (or G-) blossoms. Therefore, Boehm's knot insertion algorithm, the Oslo algorithm, the Lane–Riesenfeld algorithm, and Schaefer's algorithm all remain valid for quantum (or G-) B-spline curves.Nevertheless there is a problem because the control polygons generated by these knot insertion procedures for quantum (or G-) B-splines will not converge to the original underlying quantum (or G-) B-spline curves. Instead, since the knot insertion algorithms for quantum (or G-) B-spline curves are identical to the knot insertion algorithms for classical B-spline curves, as the knot spacing approaches zero these control polygons will converge to the classical B-spline curve with the original knots and the original control points. Thus we cannot use knot insertion in this naive way to analyze the geometry of quantum (or G-) B-spline curves.Instead we will use knot insertion algorithms for quantum (or G-) B-spline curves to convert to piecewise quantum (or G-) Bézier form. For quantum (or G-) Bézier curves, there is a straightforward subdivision algorithm that generates control polygons that do converge to the quantum (or G-) Bézier curve as the length of the domain (knot interval) approaches zero (Simeonov et al., 2011, 2012; Goldman and Simeonov, in press, 2015). Now we have two choices: we can either use knot insertion to convert the original quantum (or G-) B-spline curve directly to piecewise quantum (or G-) Bézier form and then use quantum (or G-) Bézier subdivision to generate control polygons that converge to the original quantum (or G-) B-spline curve, or we can use knot insertion to generate control polygons for which the knot spacing approaches zero and then convert to piecewise quantum (or G-) Bézier form. Both of these approaches generate control polygons that converge to the original quantum (or G-) B-spline curve. Now we can replace the original quantum (or G-) B-spline curve with this piecewise linear approximation to analyze the geometry of the original quantum (or G-) B-spline curve.To convert a quantum (or G-) B-spline curve to piecewise quantum (or G-) Bézier form, we can proceed in the following fashion. Recall from Section 4.2 that for G-Bézier curves of degree d over the interval[a,b]with an admissible vectorG(t)=(g1(t),…,gd(t)), the corresponding knot sequence is{g1(a),…,gd(a),g1(b),…,gd(b)}. Suppose, as usual, thatg1(t)=t. Then to convert a G-B-spline curve with knots{ti}to piecewise G-Bézier form, we simply use any of our knot insertion algorithms to insert the knotsg2(tk),…,gd(tk)in each interval[tk,tk+1]. The result is a control polygon for a piecewise G-Bézier curve that is identical to the original G-B-spline curve.In this section we introduce the G-B-spline basis functions and study some of their properties. All of these results for the G-B-spline basis functions have analogues for the classical B-spline basis functions, except for Proposition 10.7 on cardinal splines. Our main tools for deriving these formulas will be the dual functional property of the G-blossom and the G-de Boor recurrences from Section 4.LetG(t)=(g1(t),…,gd(t))be an admissible vector and letT={ti}be a progressive knot sequence. The G-B-spline basis functionNkd(t;T;G)of degree d is the G-B-spline curve generated by the local G-de Boor algorithm with control pointsPj=δj,k.WhenG(t)=(t,g(t),…,g[d−1](t)), whereg(t)=qt+hwithq≠0and(q,h)≠(1,0), we denote the G-B-spline basis functions byNkd(t;T;q,h)and we call these functions(q,h)-B-spline basis functions.Since a control pointPkinfluences a G-B-spline curve only over the intervals[tj,tj+1]withk≤j≤k+d, we have(10.1)support(Nkd(t;T;G))⊆[tk,tk+d+1].Furthermore, by the local G-de Boor algorithm (4.6)–(4.7) and the definition ofNkd(t;T;G)it follows thatPk0=Pkaffects only the values ofPjs,j=k−s,…,k,s=1,…,dwhose evaluation involves only the functionsαs,j(t)=gd−s+1(t)−tj+stj+d+1−tj+s,j=k−s,…,k,s=1,…,d. ThereforeNkd(t;T;G)depends only on the knotstk,…,tk+d+1.By linearity every G-B-spline curveS(t)of degree d with progressive knotsT={ti}and control points{Pj}has the representation(10.2)S(t)=∑kNkd(t;T;G)Pk.Thus the functions{Nkd(t;T;G)}span the space of G-B-spline curves of degree d. In addition, for every j the functions{Nkd(t;T;G)}k=j−djare linearly independent over the interval[tj,tj+1], since by (4.9) these functions form a basis for the polynomials of degree d over interval[tj,tj+1]. Therefore{Nkd(t;T;G)}is a locally supported basis for the G-B-splines of degree d.To introduce the dual functional property for the G-B-spline basis functions, we first need to extend the G-blossom from polynomials to splines. LetSk(t)be the polynomial of degree d that represents the G-B-spline curveS(t)over the interval[tk,tk+1]and letsk(u1,…,ud;G)be the G-blossom ofSk(t). By the dual functional property (4.10)Pi=sk(ti+1,…,ti+d;G),k−d≤i≤k.Thereforesj(ti+1,…,ti+d;G)=sk(ti+1,…,ti+d;G)provided thatj−d≤i≤jandk−d≤i≤k. We define the G-blossom ofS(t)evaluated at the knotsti+1,…,ti+dby settings(ti+1,…,ti+d;G)=sk(ti+1,…,ti+d;G)for any index k such thati≤k≤i+d. Now we have the following dual functional property for the basis functions{Nkd(t;T;G)}.Proposition 10.1(Dual functional property) LetS(t)=∑kNkd(t;T;G)Pkbe a G-B-spline curve of degree d with progressive knotsT={ti}and control points{Pj}. Then(10.3)Pk=s(tk+1,…,tk+d;G).Equivalently(10.4)S(t)=∑ks(tk+1,…,tk+d;G)Nkd(t;T;G).The G-de Boor algorithm generates a recurrence for the basis functions{Nkd(t;T;G)}. This recurrence is the global analogue of the local recurrence in (4.12).Proposition 10.2(G-de Boor recurrence)Nk0(t;T;G)={1,tk≤t<tk+10,otherwise,(10.5)Nkd(t;T;G)=gd(t)−tktk+d−tkNkd−1(t;T;Gd−1)+tk+d+1−gd(t)tk+d+1−tk+1Nk+1d−1(t;T;Gd−1).ProofLetB(t)be a G-B-spline curve of degree d with control points{Pj0}. By (10.2) and the local G-de Boor algorithm (4.6)–(4.7)(10.6)B(t)=∑lNld(t;T;G)Pl0=∑lNl+1d−1(t;T;Gd−1)Pl1wherePl1=tl+d+1−gd(t)tl+d+1−tl+1Pl0+gd(t)−tl+1tl+d+1−tl+1Pl+10.Now (10.5) follows directly from these two equations by settingPl0=δl,k. □Proposition 10.3(Generalized G-de Boor recurrence)(10.7)Nkd(t;T;G)=∑l=k−rkNl+rd−r(t;T;Gd−r)Bk−lr(t;tl+1,…,tl+2r;(gd−r+1,…,gd)),r=0,…,d.ProofLetS(t)be a G-B-spline curve with control points{Pl0}and let{Plr(t)}be the points defined by (4.7) in terms of the G-blossoms(u1,…,ud;G)ofS(t), that isPlr(t)=s(tl+r+1,…,tl+d,gd−r+1(t),…,gd(t);G),r=0,…,d.Then starting from the control points{Plr(t)}at any level0≤r≤dand using linearity, we can write(10.8)S(t)=∑lNl+rd−r(t;T;Gd−r)Plr(t).SettingPj0=δj,k, we getS(t)=Nkd(t;T;G)and(10.9)Plr(t)={Bk−lr(t;tl+1,…,tl+2r;(gd−r+1,…,gd)),l∈{k−r,…,k},0,l∉{k−r,…,k},in terms of the progressive(gd−r+1,…,gd)-basis functionsBjrdefined in Section 4.2. Substituting equation (10.9) into equation (10.8) yields formula (10.7). □Proposition 10.4(G-de Boor blossoming recurrence) Letnkd(u˜1,…,u˜d;G)denote the homogeneous G-blossom of the basis functionNkd(t;T;G). Then(10.10)nkd(u˜1,…,u˜d;G)=u1−tkw1tk+d−tknkd−1(u˜2,…,u˜d;Gd−1)+tk+d+1w1−u1tk+d+1−tk+1nk+1d−1(u˜2,…,u˜d;Gd−1).ProofBy (10.2) and the G-de Boor recursive evaluation algorithm (4.3)–(4.4), the G-blossoms(u˜1,…,u˜d;G)of a G-B-spline curveS(t)of degree d with control points{Q˜j0=Pj0}satisfies(10.11)s(u˜1,…,u˜d;G)=∑lnld(u˜1,…,u˜d;G)Q˜l0=∑lnl+1d−1(u˜2,…,u˜d;Gd−1)Q˜l1whereQ˜l1=tl+d+1w1−u1tl+d+1−tl+1Q˜l0+u1−tl+1w1tl+d+1−tl+1Q˜l+10.SettingQ˜l0=δl,kin the last two equations yields (10.10). □Proposition 10.5(Differentiation recurrence) Letg(t)=qt+hwithq≠0and(q,h)≠(1,0). Then(10.12)D1/q,−h/qNkd(t;T;q,h)=[d]q(Nkd−1(t;T;q,h)tk+d−tk−Nk+1d−1(t;T;q,h)tk+d+1−tk+1).ProofEquation (10.12) follows from (10.10) and the casem=1of (3.2) by setting in (10.10)u˜1=δ=(1,0)andu˜ν=(g[ν−2](t),1),ν=2,…,d. □Using the dual functional property of the G-blossom, we can prove some additional identities for the G-B-basis functions.Proposition 10.6(Partition of unity)(10.13)∑kNkd(t;T;G)=1.ProofThis result follows immediately from the dual functional property, Proposition 10.1, of the G-blossom applied to the constant functionS(t)≡1whose G-blossom iss(u1,…,ud;G)=1. □Proposition 10.7(Cardinal(q,h)-splines) Letg(t)=qt+hwithq≠0and(q,h)≠(1,0), and suppose that the knots satisfytk+1=g(tk)for all k. Then(10.14)Nkd(tj;T;q,h)={0,j≠k+11,j=k+1.ProofBy construction, the control points for the basis functionNkd(t;T;q,h)arePj=δj,k. Therefore, from the diagonal property of the(q,h)-blossom and the dual functional property, Proposition 10.1, it follows thatNkd(tj;T;q,h)=nkd(tj,g(tj),…,g[d−1](tj);q,h)=nkd(tj,…,tj+d−1;q,h)=Pj−1=δj−1,k.□Corollary 10.8(Spline interpolation) Letg(t)=qt+hwithq≠0and(q,h)≠(1,0), and suppose that the knots satisfytk+1=g(tk)for all k. LetS(t)be a(q,h)-spline with progressive knots{ti}and control points{Pj}. ThenS(t)interpolates all of its control points. In particular,S(tk+1)=Pkfor all k.ProofThis result follows immediately from Propositions 10.1 and 10.7. □Here we derive an analogue of the Marsden identity for the G-B-spline basis functions. We shall also derive two important consequences of this Marsden identity: truncated powers formula for the G-B-spline basis functions and a de Boor–Fix formula for the dual functionals.Proposition 10.9(Marsden's identity)(10.15)∏j=1d(x−gj(t))=∑k(x−tk+1)⋯(x−tk+d)Nkd(t;T;G).ProofThe G-blossom of the polynomialP(t)=∏j=1d(x−gj(t))isp(u1,…,ud;G)=(x−u1)⋯(x−ud).Therefore formula (10.15) follows immediately from equation (10.4). □Definition 10.10(x−t)+m={(x−t)m,x>t0,x≤t.Proposition 10.11(Truncated powers formula) LetG(t)=(g1(t),…,gd(t))be an admissible vector and letT={ti}be an increasing knot sequence. Then(10.16)Nkd(t;T;G)=(tk+d+1−tk){∏j=1d(x−gj(t))}(x−t)+0[tk,…,tk+d+1].ProofThis result is a consequence of Marsden's identity. The proof is almost identical to the proof of the analogous result for classical B-splines in de Boor (1993) which was also applied in Budakçi et al. (2015), Theorem 5 for q-B-splines. Therefore we do not repeat this proof here. □We finish this section with two de Boor–Fix type formulas for(q,h)-B-splines: one for the(q,h)-dual functionals and one for the(q,h)-blossom. Letg(t)=qt+hwithq≠0and(q,h)≠(1,0). For a sequence of constants{cl}l=0d, we define the corresponding bilinear bracket operator by(10.17)[f1,f2]dq,h(t)=∑l=0dclD1/q,−h/ql(f1)(t)D1/q,−h/qd−l(f2)(g[d−l](t)).Lemma 10.12Letg(t)=qt+hwithq≠0and(q,h)≠(1,0)and let[f1,f2]dq,hbe the bracket operator for a sequence{cl}l=0d. Then the bracket operator satisfies the following two properties:1.[P1,P2]dq,h(t)is a constant wheneverP1andP2are polynomials of degree at most d;2.[1,td]dq,h=1;if and only if(10.18)cl=cd,l(q,h)=(−1)lq(d−l)(d−l−1)/2[d]q!,l=0,…,d.ProofSuppose that the bracket operator satisfies properties 1 and 2, and letP1andP2be polynomials of degree at most d. By (10.17), the product rule (2.3), and (2.12), we have(10.19)0=D1/q,−h/q([P1,P2]dq,h)(t)=∑ν=0dcν[D1/q,−h/qν+1(P1)(t)D1/q,−h/qd−ν(P2)(g[d−ν−1](t))+D1/q,−h/qν(P1)(t)D1/q,−h/q(D1/q,−h/qd−ν(P2)(g[d−ν](t)))]=∑ν=0dcν[D1/q,−h/qν+1(P1)(t)D1/q,−h/qd−ν(P2)(g[d−ν−1](t))+D1/q,−h/qν(P1)(t)qd−νD1/q,−h/qd−ν+1(P2)(g[d−ν](t))]=∑ν=1d[cν−1+qd−νcν]D1/q,−h/qν(P1)(t)D1/q,−h/qd−ν+1(P2)(g[d−ν](t)).SettingP1(t)=tlandP2(t)=td−l+1, by Lemma 2.3 we get0=∑ν=1d[cν−1+qd−νcν]δν,l; hencecl=−q−d+lcl−1,l=1,…,d. Therefore(10.20)cl=(−1)lq−ld+l(l+1)/2c0,l=0,…,d.We determinec0from the condition[1,td]dq,h=1. From Lemma 2.3 with(q,h)replaced by(1/q,−h/q)it follows thatD1/q,−h/qd(td)=[d]1/q!=q−d(d−1)/2[d]q!. Therefore by (10.17) we get1=[1,td]dq,h=c0q−d(d−1)/2[d]q!, which together with (10.20) yields (10.18).To prove the converse, we first note that the casel=0of (10.18) implies property 2. To show that (10.18) implies property 1, we follow the proof forward omitting the 0= at the start of (10.19) and then inserting the values of the c's from (10.18) in the last line of (10.19) to obtain 0 for the quantum derivative. □In the remainder of this section we shall assume that the coefficients{cl}l=0dof the bracket operator (10.17) are defined by (10.18).Proposition 10.13Letg(t)=qt+hwithq≠0and(q,h)≠(1,0), and setψ0(t,x;q,h)=1andψd(t,x;q,h)=∏l=0d−1(x−g[l](t)),d≥1. Then for any polynomialP(t)of degree at most d(10.21)[ψd(t,x;q,h),P(t)]dq,h=P(x)and(10.22)[ψd−r(g[r](t),x;q,h),P(t)]dq,h=[d−r]1/q![d]1/q!D1/q,−h/qr(P)(x),r=1,…,d.ProofBy Lemma 10.12 and equations (10.17) and (3.5), the expression(10.23)[ψd(t,x;q,h),P(t)]dq,h=∑l=0dcd,l(q,h)(−1)l[d]q![d−l]q!ψd−l(t,x;q,h)×D1/q,−h/qd−l(P)(g[d−l](t))is a functionC(x)independent of t. Now notice thatψl(x,x;q,h)=0whenl≥1. Thus, settingt=xin (10.23) yieldsC(x)=cd,d(q,h)(−1)d[d]q!ψ0(x,x;q,h)P(x)=P(x).Formula (10.22) is derived by applyingD1/q,−h/q,xrto (10.21) and using (10.17) along with the fact thatD1/q,−h/q,xandD1/q,−h/q,tcommute, and (3.6). □For our next result we need a simple lemma.Lemma 10.14LetT={ti}i=12dbe a progressive knot sequence. Then the polynomials defined bypd,i(t;T)=∏l=1d(t−ti+l),i=0,…,d, are linearly independent.ProofWe use induction on d. Ford=1the result is straightforward. Next suppose that the lemma is true for somed−1≥1. Since, by assumption,T={ti}i=12dis a progressive knot sequence,ti≠tjfor alli≤d<j≤i+d. Suppose that there exist constants{ci}i=0dsuch that∑i=0dcipd,i(t;T)=0for all t. Settingt=tdyieldscd∏l=1d(td−td+l)=0, hencecd=0. Thus(t−td)∑i=0d−1cipd−1,i(t;T′)=0, whereT′={t1,…,td−1,td+1,…,t2d−1}is a progressive sequence. Therefore by the inductive hypothesisci=0,i=0,…,d−1. □Proposition 10.15(de Boor–Fix formula for the dual functionals) Letg(t)=qt+hwithq≠0and(q,h)≠(1,0). LetT={ti}be a progressive knot sequence and setpd,i(t;T)=∏l=1d(t−ti+l). Then(10.24)[Nkd(t;T;q,h),pd,i(t;T)]dq,h=δk,i.ProofLett∈[tj,tj+1]and letψd(t,x;q,h)=∏l=0d−1(x−g[l](t)),d≥1,ψ0(t,x;q,h)=1. From (10.1) and Marsden's identity (10.15) it follows thatψd(t,x;q,h)=∑k=j−djpd,k(x;T)Nkd(t;T;q,h).Applying (10.21) toP(x)=pd,i(x;T), we getpd,i(x;T)=[ψd(t,x;q,h),pd,i(t;T)]dq,h=∑k=j−djpd,k(x;T)[Nkd(t;T;q,h),pd,i(t;T)]dq,h.Now (10.24) follows from Lemma 10.14. □Proposition 10.16(de Boor–Fix formula for the(q,h)-blossom) Letg(t)=qt+hwithq≠0and(q,h)≠(1,0), and letT={ti}be a progressive knot sequence. Then for every polynomialP(t)of degree d, the(q,h)-blossom ofP(t)is given by(10.25)p(u1,…,ud;q,h)=q−d(d−1)/2[∏j=1d(uj−g[d−1](t)),P(t)]dq,h.ProofTo verify (10.25) first notice that the right-hand side of (10.25) is a symmetric and multiaffine function ofu1,…,ud. Moreover, settinguj=g[j−1](x),j=1,…,don the right-hand side of (10.25), using the fact thatg[d−1](t)=g[j−1](g[d−j](t)), and applying (2.9) and (10.21), we obtainq−d(d−1)/2[∏j=1d(g[j−1](x)−g[d−1](t)),P(t)]dq,h=[ψd(t,x;q,h),P(t)]dq,h=P(x).□

@&#CONCLUSIONS@&#
