@&#MAIN-TITLE@&#
The green vehicle routing problem: A heuristic based exact solution approach

@&#HIGHLIGHTS@&#
We develop a solution approach to solve the green vehicle routing problem.We propose a simulated annealing heuristic to improve the quality of solutions.We present a new formulation having fewer variable and constraints.We evaluate the algorithm in terms of the several performance criterions.Our algorithm is able to optimally solve 22 of 40 benchmark instances.

@&#KEYPHRASES@&#
The green vehicle routing problem,Mixed integer programming formulation,Branch-and-cut algorithm,Simulated annealing,

@&#ABSTRACT@&#
This paper develops a simulated annealing heuristic based exact solution approach to solve the green vehicle routing problem (G-VRP) which extends the classical vehicle routing problem by considering a limited driving range of vehicles in conjunction with limited refueling infrastructure. The problem particularly arises for companies and agencies that employ a fleet of alternative energy powered vehicles on transportation systems for urban areas or for goods distribution. Exact algorithm is based on the branch-and-cut algorithm which combines several valid inequalities derived from the literature to improve lower bounds and introduces a heuristic algorithm based on simulated annealing to obtain upper bounds. Solution approach is evaluated in terms of the number of test instances solved to optimality, bound quality and computation time to reach the best solution of the various test problems. Computational results show that 22 of 40 instances with 20 customers can be solved optimally within reasonable computation time.

@&#INTRODUCTION@&#
Today's competitive economic environment requires strategic and operational decisions for companies in order to optimize and manage their logistic processes more efficiently. One of the most important operational decision concerns the design of vehicle routes since it offers great potential to reduce the costs and to improve the service quality.The classical vehicle routing problem (VRP) aims at routing a fleet of vehicles on a given network to serve a set of customers under specified supply and demand related constraints. Minimizing the total distance traveled by all vehicles or minimizing the overall travel cost are the typical objectives of the VRP and usually the cost is computed as a linear function of distance. Since its introduction by Dantzig and Ramser [1], the VRP and its variants have been studied extensively by researchers. Many heuristics have been developed in recent years for several variants of the VRP (see [2–5]). For a recent coverage of the state-of-the-art models and solution algorithms, the reader is referred to the survey by Cordeau et al. [6] and Laporte [8], and to the books by Golden et al. [7] and Toth and Vigo [9].The classical VRP assumes that the vehicle fuel tank capacity is unlimited and the fuel amount in the tank is always sufficient to serve all customers in any possible route. However, in real-life, vehicles need to refuel their tanks to continue and complete their tour. This situation is frequently encountered in the case of companies or agencies having alternative energy powered fleets (i.e., natural gas, electricity, ethanol) in which routes have to be planned taking additional difficulties associated with the limited refueling infrastructure into account. The alternative energy powered fleet operations (or more generally green logistics concept) have emerged as one of the latest extensions of the VRP literature in recent years. For example, many studies suggest that there are several opportunities for reducing carbon dioxide (CO2) emissions by extending the traditional VRP objectives to account for wider environmental and social impacts rather than just economic costs [10–12]. These studies are motivated by the activities of the transportation industry which has significant negative impacts on the environment, economy and human health. These impacts include increased resource consumption, toxic effects on ecosystems and humans, increased air and noise pollution, and also the climatic effects induced by greenhouse gas (GHG) emissions. GHG and in particular CO2 emissions are the most concerning ones as they have direct effects on human health, e.g., pollution, and indirect ones, e.g., climate change. Growing concerns about such hazardous effects of transportation on the environment call for revised planning approaches to road transportation by explicitly accounting for such negative impacts. Juan et al. [13] studied the fleet size and mix vehicle routing problem with multiple driving ranges in which the total distance that each vehicle type can travel is limited. This problem arises in the routing of electric and hybrid-electric vehicles which can only travel limited distances due to the limited capacity of their batteries. A mathematical model is formulated and a multi-round heuristic is developed. The method is based on a biased randomized algorithm which can be used alone to create alternative fleet choices whenever the feasibility of the prespecified fleet configuration is not guaranteed. A set of benchmark instances were created to analyze how distance-based costs increase when considering “greener” fleet configurations. The method performed well on all benchmark instances and many different alternative solutions offer competitive distance-based costs while using fewer long- or medium-range vehicles than normally required. More recently, Koç et al. [14] studied the fleet size and mix pollution-routing problem where the objective is a linear combination of vehicle, fixed cost, fuel cost and CO2 emissions, and driver cost. The authors formally defined the problem, presented a mathematical model and developed a hybrid evolutionary metaheuristic. For a further coverage of green issues at the operational level the reader is referred to the book chapter of Eglese and Bektaş [15] and to the surveys of Demir et al. [16] and Lin et al. [17].Erdogan and Miller-Hooks [18] introduced the green vehicle routing problem (G-VRP). The problem design least-cost delivery routes from a depot to a set of geographically scattered customers within a pre-specified time limit and without exceeding the vehicle's driving range that depends on fuel tank capacity to minimize the total distance traveled and/or total cost. In the G-VRP, vehicles have limited fuel tank capacity and are allowed to refuel when needed. The vehicles may be refueled at a limited number of fuel stations (FSs) which are available in the service area and at the depot node. In practice, the G-VRP is encountered, particularly, when the vehicle fleet includes the alternative fuel vehicles (AFVs). The authors proposed a mathematical formulation, and developed two construction heuristics; the Modified Clarke and Wright Savings heuristic and the density-based clustering algorithm, and a customized improvement technique.Another problem that is closely related to the G-VRP is the VRP with satellite facilities (VRP-SF) in which replenishment of a vehicle is allowed from another facility different from the depot. Bard et al. [19] have formulated the VRP-SF as a mixed integer programming (MIP) formulation with capacity and tour duration limitation constraints. Vehicles with capacity limitations have the option to stop at satellite facilities to reload in order to serve customer demand at the nodes. In their formulation, dummy nodes are introduced to represent multiple stops at intermediate depots for reloading vehicles with goods for delivery process. The authors have also developed an exact solution procedure (B&C algorithm) for solving VRP-SF to optimality. Regarding the complexity of the problem, different heuristic/meta-heuristic approaches have been also proposed to solve larger VRP-SF instances [20–22].Frade et al. [23] studied the location of electric-vehicle charging stations in the city of Lisbon. The authors used a maximal covering model, and the aim to minimize the level of service and the number of charging stations. Chen et al. [24] later studied the electric vehicle charging stations location problem where a parking-based assignment method is presented for the city of Seattle. Nie and Ghamami [25] developed a conceptual optimization model to investigate travel of electric vehicles along a long corridor. Cavadas et al. [26] later described a method to locate the electric charging stations in the city of Coimbra where the aim is to maximize the number of electric vehicles under a fixed budget for building the stations. More recently, Schneider et al. [27] introduced an extended version of the G-VRP by considering an electric vehicle fleet with time windows, recharging at stations and limited vehicle load capacity. The authors formulated the electric vehicle routing problem with time windows and recharging stations (E-VRPTW) as a MIP and employed a hybrid heuristic solution procedure that combines a variable neighborhood search algorithm with a Tabu Search heuristic. The authors have also improved the MIP formulation of Erdogan and Miller-Hooks [18] and used it to solve the set of small G-VRP benchmark instances with CPLEX. The algorithm is tested on a benchmark instances derived from the literature and on a newly generated benchmark instances. The results have shown that the proposed heuristic performed well and the hybridization mechanism had positive impacts on the solution quality. Schneider et al. [28] later studied the vehicle routing problems with intermediate stops (VRP-IS) in which stopping requirements at intermediate facilities may include replenishment/disposal and refueling/recharging stops. The authors have developed an adaptive variable neighborhood search algorithm to solve the VRP-IS instances. The algorithm is tested on several related VRP instances (G-VRP, E-VRPTW, etc.) in the literature and on the new benchmark instances. The authors reported that the proposed algorithm shows a satisfactory performance compared to the methods from the literature and is able to obtain numerous new best solutions. Felipe et al. [29] proposed constructive and local search heuristics within a simulated annealing framework to solve a variant of the G-VRP which considers multiple technologies and partial recharges. The authors tested their solution method on a newly generated benchmark instances, which indicate the efficiency of the algorithm.This brief review shows that only several heuristic algorithms have already solved the G-VRP, which does not guarantee the optimality. We believe there exists merit for the development of a new solution approach based on simulated annealing heuristic and branch-and-cut (B&C) algorithm, which is capable of optimally solving the G-VRP. This is the main motivation of this paper. The contributions of this paper are as follows. We introduce an efficient and powerful new solution approach to solve the G-VRP. We develop a new mathematical formulation having fewer variable and constraints without network augmentation, and adapts a set of valid inequalities to strengthen the linear programming relaxation of the formulation. We propose a simulated annealing heuristic to improve initial solution and upper bounds found during the search process of the solution approach.The rest of this paper is organized as follows. The problem description is given in Section 2. Section 2.1 shows the formulation of Erdogan and Miller-Hooks [18]. Section 2.2 presents the proposed mixed integer programming formulation, and subsequently Section 3 introduces valid inequalities. The proposed solution approach is described in Section 4. Finally, Section 5 presents the result of computational experiments, followed by conclusions in Section 6.The G-VRP is defined on a complete directed graph G=(N,A), where N=“0”∪Nc∪F is the set of nodes, “0” corresponds to the depot, Nc={n1,n2,…,nc} is the customer nodes, F={nc+1,nc+2,…,nc+s} is the fuel stations, and A={(ni,nj):ni,nj,∈N} is the set of arcs that connect nodes in N. An unlimited number of homogeneous vehicle fleet is available at the depot to serve customers with fuel tank capacity Q (gallons) and fuel consumption rate r (gallons per mile). Each vehicle travels on the graph with constant speed sp (miles per hour). Each arc (ni,nj)∈A is associated with a nonnegative distance dij, travel time tijassociated with distance (tij=dij/sp) and also the triangular inequality holds (dij+djk≥dik). Note that our formulation is also valid when the triangular inequality does not hold. Each node is associated with a service time pi, which represents the service time at the customer node and refueling time at fuel station node. The depot can serve as a fuel station and all fuel stations have unlimited capacities. There is no limitation on the number of stops for refueling and fuel tank of vehicle is assumed to be full after leaving a fuel station (FS). There exists a time horizon (Tmax) which establishes the duration of a workday.The problem is to determine the corresponding vehicle routes so as to minimize the total cost subject to the following assumptions:•Each vehicle is used for at most one route.Each route starts and ends at the depot.Each customer is served by exactly one vehicle.Fuel level at the vehicle's tank must be greater than or equal to the fuel consumption between any two nodes.The amount of fuel in a vehicle's tank is sufficient to be able to visit between any pair of nodes.The duration of the route assigned to a vehicle cannot exceed Tmax.In this section, we present the formulation for the G-VRP in the literature. This formulation is originally developed by Erdogan and Miller-Hooks [18] (abbreviated as FEMH) and improved by Schneider et al. [27].In FEMH, graph G is augmented as G′=(N′,A′) with a set of s′ dummy nodes,Fˆ=nc+s+1,nc+s+2,…,nc+s+s′, one for each potential visit to a fuel station (FS) or depot serving as a FS(i.e.,N′=N∪FˆandA′={(ni,nj):ni,nj∈N′}). Based on this augmentation, the decision variables and FEMH are presented as follows:Decision variables:xijBinary variable equal to 1 if a vehicle travels from node i to j, 0 otherwise ∀i, j∈N′.fiFuel level variable specifying the remaining fuel level upon arrival to node i and it is reset to Q at each refueling station node i and at the depot (∀i∈N′).τiTime variable specifying the arrival time of a vehicle at node i, initialized to zero upon departure from the depot (∀j∈N′).Model (FEMH):(1)min∑(i,j)∈N′,i≠jdijxijsubject to(2)s.t.∑j∈N′,i≠jxij=1∀i∈Nc(3)∑j∈N′,i≠jxij≤1∀i∈N′\Nc(4)∑i∈N′,i≠jxji−∑i∈N′,i≠jxij=0∀j∈N′(5)∑j∈N′\''0''xoj≤m(6)∑i∈N′\''0''xi0≤m(7)τj≥τi+tij+pixij−Tmax1−xij∀i∈N′;∀j∈N′\''0'';i≠j(8)0≤τ0≤Tmax(9)t0j≤τj≤Tmax−tj0+pj∀j∈N′\''0''(10)fj≤fi−r⋅dijxij+Q1−xij∀j∈Nc;∀i∈N′;i≠j(11)fj=Q∀j∈N′\Nc(12)fj≥r⋅djixji∀i∈F∪Fˆ;∀j∈Nc(13)xij∈0,1∀i,j∈N′Objective function (1) minimizes the total distance traveled by the vehicles. Constraint sets (2)–(4) are known as degree and flow conservation constraints. While constraint sets (2) and (3) ensure that each customer must be visited exactly once, and each FS (and associated dummy nodes) will have at most one successor node, constraint set (4) guarantees that entering and leaving arcs to each node are equal. Constraint sets (5) and (6) ensure that at most m vehicles are used to serve customers. Value m should be set as the number of available vehicles in case of the number of vehicle restrictions, otherwise these constraints should be removed. Constraint sets (7)–(9) both determine the arrival time at each node and ensure that each vehicle returns to the depot no later than Tmax. Constraint set (10) is associated with a vehicle's fuel level based on node sequence and type. Constraint sets (7) and (10) are also eliminates the illegal routes (such as cycle without depot node). Constraint set (11) replenishes the vehicle fuel tank level to Q when it arrives at any FS. Constraint set (12) guarantees that there will be enough remaining fuel to return to the depot by the way of a FS from any customer location en route. Finally, constraint set (13) is known as integrality constraints.The G-VRP formulation described in previous section requires the augmentation of a network with dummy nodes in order to represent multiple visits to an alternative fuel station. In the worst case, the number of dummy nodes for each FS visit can be equal to the number of customers i.e.,|N|which increase the total number of nodes in the augmented network from (|Nc|+|F|+1) to (|Nc|+|Nc||F|+1). Although, it is acceptable for small test instances, this method requires quite more solution time for larger instances since the number of binary variables in a formulation increases with the additional dummy nodes. As it is known, the size of enumeration tree in any MIP solver increases exponentially based on the number of binary variables in a problem. Furthermore, the memory requirement of any commercial software increases with the size of the matrix dimensioned with the number of variables and constraints. Thus, it is expected that the formulation obtained by augmentation of a network has poorer performance than that of one with no augmentation in terms of linear programming (LP) relaxation, CPU time, etc. In this paper, the G-VRP is formulated without network augmentation.In our formulation, Miller–Tucker–Zemlin (MTZ) capacity and subtour elimination constraints for the VRP are adapted for the G-VRP, which were proposed by Miller et al. [30] for the traveling salesman problem (TSP). Kulkarni and Bhave [31] adapted them to the capacitated VRP. Desrochers and Laporte [32] lifted them and introduced new bounding constraints on additional variables. Kara et al. [33] corrected the lifted version of these constraints, and finally, exact meanings to auxiliary variables were given by Kara [34].For the sake of simplicity, we add the service time (pi) to the succeeding arc (i.e., tij=pi+(dij/sp)) and introduced two new parameters which are indirect distancedˆijkand indirect travel timetˆijkcalculated as follows:(14)dˆijk=dik+dkj∀i,j∈N;∀k∈F;i≠j(15)tˆijk=pi+pk+dˆijk/sp∀i,j∈N;∀k∈F;i≠jwheredˆijkdefines the distance between node i and j through fuel station k andtˆijkdetermines the total duration which includes the service time, refueling time and en route time on arcs (i,k) and (k,j). Based on these definitions, the decision variables of the G-VRP are presented as follows:Decision variables:xijBinary variable equal to 1 if a vehicle travels from node i to j directly, 0 otherwise (∀i, j∈(0∪Nc)).yijkBinary variable equal to 1 if a vehicle travels from node i to j through fuel station k, 0 otherwise (∀i, j∈(0∪Nc);∀k∈F).fiFuel level variable specifying the remaining tank fuel level upon arrival to node i (∀i∈Nc).τiTime variable specifying the arrival time of a vehicle at node i (∀i∈Nc).Model (FKK):(16)min∑i,j∈0∪Ncdijxij+∑i,j∈0∪Nc∑k∈0∪Fd⌢ijkyijk(17)s.t.∑i∈0∪Ncxij+∑k∈0∪Fyijk=1∀j∈Nc(18)∑i∈0∪Ncxij−xji+∑k∈0∪Fyijk−yjik=0∀j∈0∪Nc(19)τi−τj+M1ijk−t⌢ijkxij+M1ijk−t⌢ijk−tij−tjixji+M1ijk−tijyijk+M1ijk−tij−t⌢ijk−t⌢jikyjik≤M1ijk−tij−t⌢ijk∀i,j∈Nc;∀k0∪F(20)τj≥t0jx0j+∑k∈F(t⌢0jky0jk)∀j∈Nc(21)τj≤Tmax−Tmax−t0jx0j−∑k∈FTmax−tˆ0jky0jk∀j∈Nc(22)τi≤Tmax−ti0xi0−∑k∈Ftˆi0kyi0k∀i∈Nc(23)fj−fi+M2ijxij+M2ij−r⋅dij−r⋅djixji≤M2ij−r⋅dij∀i,j∈Nc;i≠j(24)fj≤Q−r⋅d0jx0j−∑i∈0∪Nc∑k∈Fr⋅dkjyijk∀j∈Nc(25)fi≥r⋅di0xi0+∑j∈0∪Nc∑k∈Fr⋅dikyijk∀i∈Nc(26)τi,fi≥0∀i∈Nc(27)xij∈0,1∀i,j∈0∪Nc(28)yijk∈0,1∀i,j∈0∪Nc;k∈F.In the given formulation, two constants (M1ijand M2ij) are used for all (i,j) pairs and are evaluated as follows:(29)M1ijk=Tmax+tij+tˆijk−ti0−t0j∀i,j∈Nc;k∈F(30)M2ij=Q+r⋅dij−mink∈Fr⋅dkj−mink∈Fr⋅dik∀i,j∈NcObjective function (16) minimizes the total distance traveled by the vehicles. Constraint sets (17) and (18) are known as degree constraints. While constraint set (17) ensures that each customer must be visited exactly once, constraint set (18) guarantees that entering and leaving arcs to each node are equal. The arrival time of a vehicle to each customer is determined by constraint set (19). Constraint set (19) along with constraint sets (20)–(22) guarantee that each vehicle must return to the depot before time Tmax. Constraint sets (20) and (21) both bound the decision variables (τi) and specify the arrival time of a vehicle at the first customer in any route. Constraint set (22) ensures that the arrival time of a vehicle at the last customer must allow the vehicle to return to the depot before time Tmax. Constraint set (23) determines the fuel level at each customer node based on the distance and the vehicle's fuel consumption rate. Constraint set (24) specifies the vehicle's fuel level at the first customer node of any route or first customer node after refueling. Constraint set (25) guarantees that vehicle's fuel level is enough to return to the depot or to reach a FS. Constraint sets (26)–(28) are known as non-negativity and integrality constraints, respectively.It should be noted that whereas FKK has O(|NC|2 |F|) binary variables, O(|NC|) continuous variables and O(|NC|2 |F|) constraints, FEMH has O(|NC|2 |F|2) binary variables, O(|NC| |F|) continuous variables and O(|NC|2 |F|2) constraints.The success of any exact solution procedure mainly depends on the performance of the upper and lower bounding procedures. Rapid improvements on these bounds shorten the solution procedure. In this section, we describe the valid inequalities derived from the VRP literature to improve the lower bounds.Valid inequalities are one of the most practical ways to strengthen the linear relaxations of the formulations. These inequalities eliminate some fractional solutions from the solution space in such a way that a stronger lower bound can be obtained for the problem. The first valid inequality which bounds below the number of routes originating from the depot is given as follows:(31)∑j∈NCx0j+∑k∈Fy0jk≥rG-VRPNCwhere rG-VRP(NC) is the minimum number of vehicles. Similar bounding constraint has been used by Achuthan et al. [35] for the capacitated VRP and [36,37] for the location routing problem with simultaneous pickup and delivery.Although, the minimum number of vehicles required can easily be evaluated for vehicle routing problems having customer load and vehicle capacity (i.e.,rVRP(NC)=∑i∈NCpi/Cap: where piis the demand of customer i, and Cap is the vehicle capacity), it is not as easy as for routing problems without load restrictions. In this paper, we use the following property of any feasible route for G-VRP to obtain rG-VRP(NC).Property 1Let us consider a feasible routeP=v0,v1,v2,…,vs−1,vs,vs+1with arbitrary s customers (as illustrated in Fig. 1) wherev0andvs+1represent the depot node "0". The total en route time of P, called as tP, is evaluated as(32)tP=tv0,v1+tv1,v2+⋯+tvs−1,vs+tvs,vs+1or equivalently(33)tP=tv0,v12+tv0,v1+tv1,v22+tv1,v2+tv2,v32+⋯+tvs−1,vs+tvs,vs+12+tvs,vs+12and more formally(34)tP=tv0,v12+∑i=1stvi−1,vi+tvi,vi+12+tvs,vs+12In the best case, the preceding(vi−1)and the succeeding node(vi+1)of each customer(vi)on any route are the first and the second nearest nodes toviin P, respectively. Therefore, the total en route time evaluation without sequence information in P using the first and the second nearest nodes, calledt¯P, gives a lower bound on tP.□According to Property 1, a polynomial time procedure is used to obtain rG-VRP(NC) which is illustrated in Table 1. To the best of our knowledge, this evaluation scheme is the first for the VRP without customer demands.Constraint (31) is a special case of the following exponential-size constraints derived from capacity and subtour elimination constraints of the VRP [38].(35)∑i,j∈Sxij+∑k∈Fyijk≤S−rG-VRPS∀S⊂NC,S>2where rG-VRP(S) is calculated as in constraint (31). The constraint set (35) guarantees that the number of vehicles visiting a set of customers is not smaller than the corresponding lower bound.Another exponential-size inequality for the G-VRP is based on the generalized large multistar (GLM) inequalities which have been originally proposed for the VRP [39,40]. We have adapted the GLM for the G-VRP as follows:(36)∑i∈S∑j∈N\Sxij+∑k∈Fyijk≥1Tmaxt¯S+∑i∈S∑j∈N\Stx→ijxij+tx←jixji+∑k∈Fty→ijkyijk+ty←jikyjik∀S⊂NC,S≠∅wheret¯Sis given as in Eq. (34) for the customer set S and(37)tx→ij=ti,0if nodejis depotti,j+tj,0otherwisetx←ji=t0,iif nodejis depott0,j+tj,iotherwise∀i,j∈Nc(38)ty→ijk=tˆi0if nodejis depottˆijk+tj,0otherwisety←jik=tˆ0iif nodejis depott0,j+tˆjikotherwise∀i,j∈Nc;k∈FThe constraints set (36) ensure that the number of leaving arcs (or equivalently the number of routes) from a set of customers (S) must satisfy the required number of routes. These inequalities are useful whent¯S/Tmaxis close to the next integer.This section presents a detailed description of our heuristic based exact solution approach for the G-VRP. The method implements a combination of cutting planes and implicit enumeration to solve any combinatorial optimization problem. The basic idea is the identification of the violated inequalities that are valid throughout the enumeration tree. Therefore, at each step of the solution method, violated inequalities which are identified by solving the separation problem are added to the formulation and the corresponding linear program is reoptimized.At each iteration of the simulated annealing (SA) heuristic, neighbors of the current solution are generated by using all of the moving strategies. The best one among them is chosen as a new solution (Snew) for the problem. In recent years, SA has received increased attention for solving several routing problems [41]. Banos et al. [42] developed a SA heuristic which is based on a multi-objective procedure to solve the VRP with Time Windows.The SA algorithm implements a candidate list strategy in generating the neighbors since searching whole neighborhood of the current solution by a moving strategy is a very time consuming process. According to this strategy, each moving step randomly generates a subset of neighbors, LS, in order to satisfy the G-VRP constraints. Then, this neighbors are gathered in a pool to select the new solution (Snew). If the new solution is better than the current solution then it is accepted as the current solution. Otherwise, it is accepted with probability ofexp−Δs/Titras the current solution. Δs is the relative percent deviation of the quality of the new solution from the current solution which is calculated by [(f(Snew)−f(Scur))/f(Scur)]*100. In each iteration of the SA, temperature (Titr) is reduced using a geometric cooling schedule, i.e., Titr←αTitr−1 where α is the cooling rate (0<α<1).At the beginning of the SA, the temperature is set to initial temperature (i.e., Titr←T0) and the SA stops when the temperature reaches the final temperature (Tf). SA heuristics use a set of correlated parameters and configuration decisions. In our implementation, we initially used the parameters suggested by [36,37] for the SA, where an extensive meta-calibration procedure was applied to generate effective parameter values. But we have conducted several experiments to further fine-tune these parameters. After several preliminary experiments, following parameter values are implemented in the SA. The initial temperature (T0) is set 665 in which an inferior solution (inferior by 70% relative to current solution) is accepted with a probability of 0.90, the final temperature (Tf) is chosen 0.15 such that a solution which is inferior by 1% relative to current solution is accepted with a probability of 0.001. The number of neighbors generated by each moving strategy is set |NC| for Swap operator, |F| for Merge, FSAdd and FSDrop operators. Furthermore, cooling rate is selected as 0.95. Because of the stochastic nature of the SA, it is run 5 times for each instance with different random seeds.The steps of the proposed B&C algorithm for the G-VRP are presented in Table 2, where LP is the LP-relaxation of the MIP model,St*is the optimal solution of LP at a particular node t, S0 is the initial feasible solution, Φ is the set of unexplored nodes of enumeration tree.The B&C is initialized by Step 1 in which the initial LP model is constructed, an initial feasible solution S0 is obtained, and S0 is accepted as the best feasible solution. The procedure to obtain an initial solution in our algorithm can be summarized as follows: first, we implement an extension of the well-known Clarke and Wright heuristic [43]. In this heuristic, a simple route for each customer from the depot is constructed. Then, all pairs of routes (R1, R2) in the solution are examined in terms of cost savings obtained by their merge and the merge is implemented by combining the pair of nodes providing the largest cost savings. This strategy is repeated until no feasible combination is found. After an initial feasible solution(S′0)is generated, a classical simulated annealing (SA) algorithm is implemented to obtain an initial solution (S0) for the B&C algorithm. SA, which stems from the simulation of the annealing of solids, is a stochastic search technique that is able to escape from local optima using a probability function [44]. It starts with an initial feasible solution(S′0)and improves it until a stopping criterion is met. We employ the following moving strategies, two of which are well-known in the VRP literature and the others are developed for the G-VRP.Merge: Two routes (R1 and R2) are selected randomly, R2 is located to each best position in R1, and the best feasible position is selected. An example of this operator is illustrated in Fig. 2. In this figure, routes (0-6-2-5-7-1-0) and (0-3-4-0) are merged into new one as (0-6-2-5-7-3-4-1-0).Swap: Two randomly selected customers, which are in the same route or in two different routes, are exchanged. Swap operator is illustrated in Fig. 3. In this figure, customers 3 and 6 are swapped as illustrated in Fig. 3(a) and (b).FSAdd: Two successive customers are selected randomly and a FS visit is added between them if there is no previous FS visit. Although this operator may increase the routing cost, better results can be obtained at the successive iterations by using other operators (i.e., merge or swap) as it is not possible for the current iteration due to the fuel tank capacity limitations. An illustrative example for this operator can be seen in Fig. 4. In this figure, a FS visit between customers 3 and 1 is added. After this insertion it may be possible to merge routes (0-2-3-6-1-0) and (0-4-5-0) into new one as (0-2-3-6-1-4-5-0) for the next iteration.FSDrop: A randomly selected FS visit is removed if possible. This operator is illustrated in Fig. 5. In this figure, FS visit between customers 2 and 3 are removed and a new arc is added to these customers.Steps 2–6 are the classical steps of the B&C algorithm. Step 2 specifies the termination criterion and selects an unexplored node having the smallest objective function value from enumeration tree for additional processing. Then, the next step solves the corresponding LP model and obtains the (probably fractional) optimal solution(St*). Steps 4 and 5 prune the current node t, ifSt*is infeasible or its objective function value is worse than that of the best feasible solution found so far (Sbest), respectively. Step 6 prunes the current node ifSt*is integer, and then Sbest is updated if a better integer solution is found.In B&C literature, it has been observed that optimal fractional solutions may include some information about optimal integer solutions, and it is highly possible to obtain good quality integer solutions from fractional solutions by using a heuristic and/or exact solution procedure. Based on this idea, we obtain a feasible solution fromSt*by using the following heuristic procedure in Step 7. Letxij*andyijk*be an optimal fractional solution of any node on enumeration tree. Firstly, a route R is started by selecting customer i* with largestx0i*(ory0ik*) and then appending a new customer j* with largestxij*(oryijk*) to the last customer i* in the route R continues as long as addition is feasible. This step is repeated until all customers are assigned to routes. Ifyijk*is selected as the largest value, then a FS (k*) visit is included between the customers i* and j* (i.e., 0, …, i*, k*, j*, …, 0). Note that a simple route is constructed for customer j who is not assigned to any routes since nodes i withxij*,xji*,yijk*,yjik*>0are assigned previously to another route. After generating a feasible solution(S′t), an improved solution(Stfeas)is obtained by implementing SA algorithm explained in Step 1. To reduce the computation time spent by this procedure, SA is applied to all nodes up to depth level ten and all nodes on every tenth depth level in enumeration tree.Step 8 determines the valid inequalities, if a tailing off does not exist. In our B&C algorithm, inequality (31) is imposed directly to the model at the beginning of the algorithm (Step 1) since there is only one constraint in (31). However, we need a procedure to obtain constraints from the sets (35) and (36). For this purpose, we introduce a greedy constructive heuristic procedure to separate these inequalities. In each iteration of this procedure, a customer is selected randomly as a seed node and customer set S is initialized with this seed. Then, a new customer node (m*) that minimizing the slack of the constraint (i.e.m*←argminm∈(NC\S){slackm35}for (35) andm*←argminm∈(NC\S){slackm36}for (36)) is selected and S is expanded with m* (i.e. S←S∪m*). The definitions of the slack values are given as follows for (35) and (36), respectively.(39)slackm35=S∪m−rG-VRPS∪m−∑(i,j)∈(S∪m)xij*+∑k∈Fyijk*(40)slackm36=∑i∈S∪m∑j∈N\S∪mxij*+∑k∈Fyijk*−1/Tmaxt¯S∪m+∑i∈S∪mj∈N\S∪mtx→ijxij*+tx←jixji*+∑k∈Fty→ijkyijk*+ty←jikyjik*where rG-VRP(S∪m) andt¯(S∪m)is defined as previously. When the customer m* is selected, the validity of the current constraint is checked. If the violation is occurred for the set S is added to the cut pool. This procedure is repeated until all violated cuts have been identified. These cuts are then imposed to the LP model and reoptimized in Step 9. Finally, Step 10 creates two new nodes by applying branching rule, if a tailing off exists or new violated inequalities are not identified.This section presents the computational results of numerical experiments. Firstly, we give brief information about the test problems. Then, we investigate the effectiveness of our formulation (FKK) and Erdogan and Miller-Hooks’ formulation (FEMH) with respect to linear programming relaxations. Finally, the performance of the proposed B&C algorithm is analyzed. All experiments were conducted on Intel Xeon 3.16GHz equipped with 8GB RAM computer (the operating system is Windows 7-x64).The algorithm is tested using the benchmark set generated by Erdogan and Miller-Hooks [18]. Each instance involves 20 customers and FSs varying from 2 to 10 (with increments of two). Each customer and FS node are located in a grid of 330 by 300 miles and the depot is located near the center of the grid. To investigate the effect of the location configuration of both customers and stations and the number of FSs, four different scenarios have been considered. In Scenario-1 (2) customers are located uniformly (clustered) and three FSs are fixed between the depot and the grid boundaries in westerly, northerly and southeasterly directions. In Scenario-3, while half of the test instances are selected from Scenario-1, others are selected from Scenario-2, and for each of them 3 additional FSs are located randomly. In Scenario-4, while half of the test instances are created from one instance of Scenario-1, others are created from one instance of Scenario-2, and the number of FSs is increased from 2 to 10 by increments of two for each instance.In the original test set, some instances are infeasible because of time and refueling restrictions, such as some customers cannot be served in a given maximum route duration or cannot be reached without more than one refueling stop. Therefore, these customers are identified and removed from the test instances.In this section, we compare two MIP formulations with respect to LP relaxation quality. The LP/MIP solver IBM ILOG CPLEX 12.5 is used as LP solver. To analyze the computational results, we use lower bound gap which is the percentage gap between the objective function value of the LP relaxation (ZLP) corresponding to a particular formulation and the optimal or the best found integer feasible solution (Z*) obtained by proposed B&C algorithm. The percentage gap values are calculated as Δ=100*((Z*−ZLP)/Z*). Note that, these gap values report how close the corresponding LP bounds to the optimal/best known solution. It is well-known that the quality of the bounds is one of the critical issues in reducing execution time of exact solution procedure. A tighter bound can help the exact solution procedure to get optimal solutions in a shorter computational time. Table 3presents the computational results for each test problem.In Table 3, each triple of columns reports the name of the instance, the percentage gap values for the Erdogan and Miller-Hooks’ formulation (ΔEMH) and our formulation (ΔKK) for each scenario, respectively. As shown, our formulation provides better results than [18] formulation for all instances. Average percentage gap values on all scenarios are obtained as 36.41% for our formulation while this value is 61.53% for [18] formulation. These results indicate that it is plausible to use the proposed formulation in B&C algorithm since tight bounds are one of the most crucial components for exact solution procedures.In this section, we investigate the effects of heuristic solution procedures (i.e., extended Clarke and Wright heuristic (ECW) and simulated annealing (SA) algorithm). Table 4presents the computational results for each scenario, respectively. In this table, successive three columns give instance name, average percentage gap values for ECW and SA heuristics at the beginning of B&C, respectively. The gap values are evaluated as 100*((Zheur−UB)/Zheur), where Zheur is the feasible solution value for corresponding heuristic solution value and UB is optimal/best found solution value. Please note that, the computation times of these heuristics are less than 1s.Table 4 shows that average percentage gap values are 14.35% and 5.98% for ECW and SA heuristic, respectively. For ECW, the average gap values are 11.18%, 13.15%, 16.20% and 16.87% for scenario 1, 2, 3 and 4, respectively. For SA heuristic, the average gap values are 2.59%, 7.52%, 8.67% and 5.14% for scenario 1, 2, 3 and 4, respectively. According to these results, although the solutions obtained by ECW heuristic are far from the optimal/best found solution proposed SA heuristic improves this solution within short computation time.In this section, we analyze the performance of our B&C algorithm in terms of the number of test instances solved to optimality, computation time, and bound qualities of several components (i.e., LP relaxation, root node of enumeration tree, and overall B&C algorithm). Bound quality is defined as the gap between corresponding lower bound (LB) and the optimal/best found solution (UB) and is evaluated as 100*((UB−LB)/UB).We implement our B&C algorithm using the SCIP v1.2.0 framework [45] and [46] as underlying LP solver, the default parameters were used, and a time limit of 1h is set for each instance.Tables 5–8summarize the computational results for each scenario, respectively. In these tables, the first four columns display the name of instance, the number of customers, the number of FSs and upper bounds obtained by the proposed B&C algorithm. Bold and italic entries in UB columns indicate that the corresponding problem solved to optimality in one hour. Successive columns give information about LP relaxation, root node of the enumeration tree and overall B&C algorithm. While the columns labeled Gap report the percentage gap, the columns labeled CPU show the solution time. The columns labeled #(35) and #(36) display the number of added valid inequalities (35) and (36), respectively.In these tables, it can be seen that the average lower bound percentage gap values of LP relaxation from FKK are obtained as 32.2%, 48.4%, 34.0% and 31.0% for each scenario, sequentially. However, at the root node, these values are reduced to 14.7%, 29.2%, 10.9% and 14.7% without significant increase in solution time (i.e., less than 1s). This result indicates that valid inequalities (35) and (36) are very efficient in improving the solution quality.Tables 5–8 also show that 22 out of 40 instances are solved to optimality using the proposed B&C algorithm. For the other test instances that is not solved in optimally, the same results found as in [27] which reported the best G-VRP results in the literature. Average percentage gap values are obtained as 3.5%, 1.9%, 1.4% and 5.4% with the average solution time of 2373.0, 1293.3, 1204.1 and 3453.4s for each scenario, respectively.Tables 5 and 6 indicate that test problems where customers are uniformly located (i.e., Scenario-2) are more difficult to solve than clustered test problems (i.e., Scenario-1). Average percentage gap values are obtained as 3.5% and 1.9% with the average solution time of 2373.0 and 1293.3s for uniformly and clustered located test problems, respectively.Table 7 reports the results obtained from the test problems in Scenario-3 which are obtained by increasing the number of FSs from three to six on the selected test problems from Scenarios 1 and 2. As is seen in this table, the average gap value and CPU time are found as 1.4% and 1204.1s while these values are 2.8% and 1935.1 when the original problems for each row are considered (see Tables 5 and 6), meaning that the problem is easy to solve when the number of FSs increases.In another experiment, we analyze the effect of the number of FSs for the same customer configuration. Table 8 shows the results obtained from the test problems in Scenario-4. These results are obtained by increasing the number of FSs from two to ten by increments of two on the selected test problems from Scenarios 1 and 2 (20c3sU4 and 20c3sC4, respectively). The results clearly show that the objective function value for the test problems derived from 20c3sU4 is improved (i.e., decreased from 1582.21 to 1396.02) when the number of FSs increases. However, there is some fluctuation on the objective function value for the test problems derived from 20c3sC4 since the some customers become feasible as the newly added fuel stations and the number of customers are increased. Therefore, the objective function value increases when the number of customers increases.

@&#CONCLUSIONS@&#
We have developed a heuristic based solution approach to solve the green vehicle routing problem (G-VRP). We have presented a mixed integer programming formulation and developed a B&C algorithm for the exact solution of the G-VRP. We have adapted several valid inequalities from literature to solve the G-VRP. We have also developed several separation algorithms for these inequalities and a simulated annealing heuristic to improve the quality of solutions. The solution approach has evaluated in terms of optimality gap and computation time to reach the best solution on the various test problems derived from the literature.Our results clearly indicated that the proposed mathematical formulation in the B&C algorithm is effectively able to tighten the bounds. The results also show that the SA heuristic improves this solution within short computation time, however the solutions obtained by ECW heuristic are far from the optimal/best found solution. We realized that the G-VRP is easy to solve when the number of fuel stations increases. Our results show that optimal solutions for 22 out of 40 test instances with 20 customers are obtained within reasonable computation time. Furthermore, the computational results indicate that the simulated annealing heuristic is able to improve the performance of the B&C algorithm in finding high quality solutions.Concerning the future research directions, the proposed MIP formulation and B&C algorithm can be modified by considering more realistic aspects of the G-VRP including customer demands, time windows, multiple depots, etc. The proposed B&C algorithm implements a straightforward branching scheme (i.e., branching most fractional variable), and three set of valid inequalities. Further researches may also address how to affect different branching schemes and valid inequalities to the G-VRP. CO2 emissions or other greenhouse gas emission can be embedded into the objective function.