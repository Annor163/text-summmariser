@&#MAIN-TITLE@&#
SOA support to virtual campus advanced architectures: The VCAA canonical interfaces

@&#HIGHLIGHTS@&#
This paper describes and defines several architectures for virtual campuses (VCs).One of these architectures promotes VCs independent of their underlying LMSs.We define a set of software interfaces that isolate VCs from specific LMSs.Implementation of these interfaces for three relevant LMSs is also provided.A running prototype of virtual campus has been deployed and it has been used by users.

@&#KEYPHRASES@&#
e-Learning,lms,Virtual campus,

@&#ABSTRACT@&#
Virtual campuses (VCs) are becoming complex applications. Nowadays, users demand more tools, more e-learning platforms, and fewer dependencies among these platforms. To deal with these requirements the Virtual Campus Advanced Architecture project has defined multitier software architecture for VC based on the SOA integration of e-learning platforms. This solution defines a set of interfaces that standardizes the core functions of learning management systems (LMSs), so decoupling VC from LMSs and promoting its evolution towards the SaaS model. Simplicity and viability have been key issues in the development of these interfaces that have been implemented for Blackboard Learn, Moodle and Sakai.

@&#INTRODUCTION@&#
Nowadays, Information and Communication Technologies (ICT) are present more than ever in learning institutions. Thus, institutions of primary and secondary education, universities, and private companies are incorporating e-learning platforms, i.e. Learning Management Systems (LMSs), in their e-learning infrastructure. These LMSs become part of virtual campuses[34]. In our approach, virtual campuses (VCs) are considered to be those complex software systems that higher education institutions use to give support to their teaching and learning activities [29,35].Small and medium institutions can use a single LMS to support their e-learning activities. However, large institutions need to develop a complex software infrastructure that integrates different LMSs with each other or with other software systems. In addition, when the number of users is very large, user demands increase proportionally [23]. Thus, users call for more tools, more e-learning platforms, less dependence on these platforms, and shorter development times for their demands to be implemented [28].In order to support users' demands, modern virtual campuses need maintainable software architectures that are able to deal with the integration of several e-learning platforms [7]. For example, the Universidad Complutense de Madrid (UCM) VC architecture relies on a multitier architecture that integrates several e-learning platforms: Moodle 1.9 and Sakai 2.4 (and originally WebCT 4.1). This architecture has proven very useful for the management of the 80,000 users of this virtual campus [29].However, our experience in the field of virtual campus architectures and current developments [16,28,32] shows us that more advanced software architectures have to be developed in order to support and smoothly integrate different e-learning platforms. For example, in the present architecture of the UCM VC, the heterogeneity of languages in which e-learning platforms are programmed forces the use of Service Oriented Architecture (SOA) [8] in some parts of the software architecture [29]. Therefore, the natural development is to provide a SOA-based solution for the integration of e-learning platforms in modern virtual campuses [16,28,30].SOA-based solutions permit a better integration of e-learning platforms and the development of virtual campus architectures that are independent of the underlying e-learning platform. In the architecture presented in this paper, the virtual campus is designed and implemented to be used with different e-learning platforms. Thus, for example, in an academic course the virtual campus can be configured to be used with Moodle 2.0, and in the following academic year the virtual campus can be configured for use with Blackboard Learn 9.1 (assuming that migration facilities for courses are available). We have called these virtual campuses white-label virtual campuses, because they provide the same e-learning facilities to their users irrespective of the specific label (Blackboard, Moodle, Sakai, etc.) that supports them.In a first architectural step, only one e-learning platform can be used at any one time in this white-label virtual campus, although, in the future, the simultaneous use of several e-learning platforms is envisaged. The simultaneous use of several LMSs would permit the combined use of the individual tools of each LMS. For example, the virtual campus could thus use the file management facility provided by Moodle, and the blog facility provided by Sakai.This paper describes our findings in the context of Virtual Campus Advanced Architectures (VCAA), a research project that we are developing. Section 2 presents related work. Section 3 materializes in terms of multitier architecture one architecture previously outlined in literature. This architecture relies on a SOA solution for the isolation of virtual campuses from their underlying e-learning platforms. Section 4 describes a set of VCAA canonical interfaces that we have defined to implement this SOA solution. The implementation of these interfaces in terms of web services for Blackboard Learn 9.1, Moodle 2.0 and Sakai 2.7 is also described. Section 5 presents conclusions and future work. Finally, Appendix A includes the complete definition of the VCAA interfaces defined in Section 4 and Appendix B lists the XML Document Type Definitions (DTDs) used as return types in some operations defined in Appendix A.

@&#CONCLUSIONS@&#
It is a matter of fact that current users of virtual campuses are calling for more tools, more e-learning platforms, fewer dependencies on these platforms, and shorter development times for implementing their demands. In order to support the demands of their users, present and future virtual campuses need maintainable software architectures, able to deal with the integration of several e-learning platforms.In this paper we have materialized the loosely outlined T3 architecture in terms of multitier architecture. The T3 architecture permits the development of a white-label virtual campus independent of the underlying e-learning platform. This architecture relies on a SOA infrastructure, based on a set of canonical interfaces that we have defined and implemented. These interfaces are enough to implement the main features of a virtual campus. They are not as powerful as those provided by OKI and IMS but, precisely due to their simplicity, they are easier to implement in specific e-learning platforms. Thus, we have provided implementations for Blackboard Learn 9.1, Moodle 2.0 and Sakai 2.7.A consequence of the work presented in this paper is the standardization of the set of web services that an LMS should implement in order to be integrated with a virtual campus. This is an open research issue, and at present, LMSs present very heterogeneous functionalities, exposed as web services [15]. In this way, the canonical web services proposed in this work could be the seed for a standard such as OASIS Sear/Retrieve Web service (SRW) ([25]b), the ANSIL/HL7 Retrieve, Locate, and Update Service (RLUS) as specified by the HL7 V3 Standard [14] or OASIS Content Management Interoperability Services (CMIS)[25]. Thus, as CMIS compliant systems can be used by clients irrespective of their implementation details, canonical service compliant LMSs can be used by virtual campuses developed with Type 3 architecture irrespective of LMS implementation details.Using the T3 architecture and these canonical web services, virtual campuses are totally isolated from concrete e-learning platforms: users do not interact with LMSs and virtual campus code is independent of specific LMSs. Thus, if migration facilities are provided, educational institutions can migrate from one e-learning platform to another, without the need to reprogram their virtual campuses, their users being unaware of the change. In addition, canonical interfaces allow LMSs to be modular parts of virtual campuses developed using more advanced architectures such as T4 and T5.Regarding specific isolation techniques for making virtual campus code independent from web services, we have chosen a solution based on a classic business delegate, because of its isolation properties, although other interesting choices have been defined.With respect to the three platforms where the VCAA web services have been implemented, it is evident that they are at different stages of maturity. In addition, they have different philosophies for their web service support. These factors have directly affected VCAA web service implementation in each platform.Finally, with regard to discovering services, the nature of the use of LMSs does not promote individual service discovery. However, our approach promotes a new and interesting facet for LMS providers: the possibility of offering their LMSs as SaaS. Nowadays, enterprises like Blackboard offer the hosting of their LMSs to educational institutions. However, institutions are linked to their LMS providers. The presentation of LMS through a set of standard web services (such as our proposed canonical web services) would enable one both to refocus the LMS market to the SaaS approach and to isolate virtual campuses from specific LMS providers.Future work involves the additional definition of canonical services for the management of some aspects not considered up to now (e.g. data loading from university database to virtual campus database), as well as their implementation for the target platforms used in the project. On the other hand, new implementations for VCAA web services on additional platforms could be undertaken. The study and enhancement (if needed) of migration facilities between platforms have also to be considered.Long-term future work includes the definition of the virtual campus architecture, its canonical interfaces, and their implementation for the T4 architecture. The implementation of a T5 architecture is envisaged following the implementation of T4. The use of model-driven development techniques is also being considered in order to ease code generation from abstract models.