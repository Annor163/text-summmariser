@&#MAIN-TITLE@&#
Fleet routing position-based model for inventory pickup under production shutdown

@&#HIGHLIGHTS@&#
Chronological ordering of nodal-visits leads to a position model for fleet routing.Positions model has fewer binary variables than node-arc or path formulations.A smart algorithm is developed to maximize fleet productivity using positions model.Model is applied to barge routing for oil pickup from offshore production platforms.Optimal schedules require nodal inventory removal several times per repeatable-cycle.

@&#KEYPHRASES@&#
(B) Inventory routing,Vendor-managed inventory,Pickup and delivery optimization,Off-shore barge scheduling,

@&#ABSTRACT@&#
This paper addresses the problem of collecting inventory of production at various plants having limited storage capacity, violation of which forces plant shutdowns. The production at plants is continuous (with known rates) and a fleet of vehicles need to be scheduled to transport the commodity from plants to a central storage or depot, possibly making multiple pickups at a given plant to avoid shutdown. One operational objective is to achieve the highest possible rate of product retrieval at the depot, relative to the total travel time of the fleet. This problem is a variant (and generalization) of the inventory routing problem. The motivating application for this paper is barge scheduling for oil pickup from off-shore oil-producing platforms with limited holding capacity, where shutdowns are prohibitively expensive. We develop a new model that is fundamentally different from standard node-arc or path formulations in the literature. The proposed model is based on assigning a unique position to each vehicle visit at a node in a chronological sequence of vehicle-nodal visits. This approach leads to substantial flexibility in modeling multiple visits to a node using multiple vehicles, while controlling the number of binary decision variables. Consequently, our position-based model solves larger model instances significantly more efficiently than the node-arc counterpart. Computational experience of the proposed model with the off-shore barge scheduling application is reported.

@&#INTRODUCTION@&#
This paper considers the routing problem for a fleet of vehicles dispatched to collect a perishable (or time-sensitive) commodity which is available (or produced) at a known set of locations (or nodes), and the commodity must be delivered to a collection facility (or central depot). Such problems occur frequently in practice, for example, collecting blood at various locations to be delivered to a central blood bank, collecting milk at various farms to be delivered to a central cold storage/warehouse, or in scheduling multiple barges to pick up oil from various offshore platforms and delivered to an onshore depot. Nodal production of the commodity may be continuous and at differing rates across nodes and, depending on the commodity produced, may have a predetermined lifetime beyond which the product may become obsolete. In a different situation, a nodal production facility may have limited on-site storage for the commodity and the inability to pick up (or remove) the product may possibly force a prohibitively expensive production shutdown at the node. Therefore, several vehicles may have to visit the same location possibly multiple times in order to avoid production shutdowns within a given time horizon. Considering the repeatability aspect of such an operation into the future, pre-specifying a time horizon, or cycle time, with optimal initial conditions is difficult. The focus of this paper is solving the problem with deterministic nodal production rates.The above problem is a generalization of the standard vehicle routing problem (VRP), e.g. Bodin, Golden, Assad, and Ball (1983) and Magnanti (1981), and the VRP specified with time windows of service, termed VRPTW, e.g. Solomon (1987), Solomon and Desrosiers (1988), Kolen, Kan, and Trienekens (1987), Desrochers, Desrosiers, and Solomon (1992), Desaulniers, Lessard, and Hadjar (2008), and Jepsen, Petersen, Spoorendonk, and Pisinger (2008). In VRPTW, time windows are static because the earliest and latest time within which a node must be serviced is known ‘a priori’. There are several variants of static time windows; for instance, imposing strict time limits on route duration (when perishable goods are transported) as in Azi, Gendreau, and Potvin (2010), allowing traveling times and costs to be time-dependent functions as in Hashimoto, Yagiura, and Ibaraki (2008), and the case of non-static and sliding time windows in Ferland and Fortin (1989).In our problem, multiple service calls at a node in a horizon may become mandatory due both to the schedule repeatability requirement, as well as to guarantee that neither the product is time-expired nor the nodal storage limit is exceeded prior to the subsequent cycle of operation. Each successive visit-time is, then, required to be within a time window that is dependent on the nodal inventory level, which depends on the prior visits (and inventory removed thus far from the node) and initial stocks. Therefore, each nodal visit window is tour-dependent, hence dynamic.The problem addressed in this paper is, therefore, more closely related to the class of problems known as Inventory Routing Problem (IRP) where the nodes are consumers rather than producers. See Moin and Salhi (2007), Andersson, Hoff, Christiansen, Hasle, and Lokketangen (2010), and Coelho, Cordeau, and Laporte (2013) for recent reviews of the IRP literature. The basic IRP is concerned with the distribution of a single product from a central facility (or vendor) to a set of customers (or retailers) over a given planning horizon. Customer consumption rates and maximum inventory capacities are known. Product is distributed from the vendor using a fleet of homogeneous (and known) capacity to the customers who do not specify an order size or when to deliver. Instead, the vendor determines when it is best to deliver and in what quantities, possibly multiple times a day, with an intent to minimize distribution and inventory costs, while incurring no stockouts at any customer. Thus, the general setup in IRP is that of a vendor managed inventory (VMI) system, which is becoming popular in logistics where a vendor manages the inventory of its customers, resulting in distribution cost savings to the supplier by better coordinating deliveries to customers, see e.g. Campbell, Savelsbergh, Clarke, and Kleywegt (1998) and Campbell and Savelsbergh (2002, 2004).As the IRP problem is a generalization of the VRP, solution of these problems is very difficult. As such, numerous heuristic techniques, ranging from simple heuristics to more complex metaheuristics, are primarily used to solve the IRP, see Coelho et al. (2013). More recently, however, some exact techniques have been proposed for solving smaller problems. One exact technique based on a branch-and-cut approach for the multi-vehicle IRP was proposed by Coelho and Laporte (2013). They were able to solve problems with up to 50 customers over 6 time periods to optimality using their technique, while problems with up to 200 customers and 6 time periods were attempted, but could not be solved in the 24hour (cpu) time limit imposed. The use of mathematical programming techniques to solve all or part of these types of problems is currently a fertile area of research.One extension of the problem that is of particular relevance is the addition of a periodic or repeatability requirement to the schedule. See, for instance, Francis, Smilowitz, and Tzur (2008) for a review of the Periodic Vehicle Routing Problem (PVRP) and its extensions. They identify that the key difference between the VRP and the PVRP is that the PVRP requires the selection of a “visit schedule” over a given planning horizon, thus not all nodes are visited every day but all nodes will be visited the required number of times within the planning horizon. Solution methods proposed in the literature include heuristics, metaheuristics and mathematical programming approaches based on Lagrangian relaxation. Moreover, the Periodic Inventory Routing Problem (PIRP) was considered by Gaur and Fisher (2004) in the context of a supermarket chain. They formulate the multiple visits to nodes as a set of shortest-path problems to form clusters, clusters are chosen using a set-partitioning formulation which is solved using a heuristic. Aksen, Kaya, Salman, and Akca (2012) address the Selective and Periodic Inventory Routing problem (SPIRP) in a reverse logistics context, whereby part of the problem is to determine which customers to service realizing that some customers may not be visited at all if it is not profitable to do so. They propose two MILP formulations based on a single commodity flow formulation, one based on selecting a node to be visited in each period, while the second is based on predefined schedules which are allocated to each node. With a two-hour CPU time limit, solutions were obtained to 25 node problems within 3.28% of optimality.While related to the IRP, our problem has a few notable differences from the standard IRP and the periodic version of the problem. In IRP or PIRP, the objective is to minimize the total travel and inventory costs. This is not a useful objective for the problem in this paper as the central facility is concerned with the quantity of oil recovered, and labor staffing the fleet is a major variable cost. Therefore, the objective is to recover the product at the depot at the highest possible rate relative to the time the fleet spends away from the depot, i.e., achieve the maximum fleet utilization while avoiding shutdowns in all future periods. Thus, we are dealing with a fractional objective involving the volume of oil collected (which is directly related to the cycle period) and the total time the fleet are at sea. Furthermore, the minimal number of vehicles needed to guarantee no nodal shutdowns is unknown ahead of time and the fleet may be heterogeneous. Additionally, with the required repeatability of fleet schedules for long-term operational success, nodes may need to be visited multiple times within a given schedule (possibly by different vehicles) for inventory removal. This implies that both the total number of times a node is visited by the fleet and the required length of the time horizon to guarantee repeatability of fleet routes are unknown ‘a priori’, and they must be determined optimally within the model. In this sense, the modeling situation in this paper is more general than that of IRP or PIRP.Our routing problem is also close to the so-called Pickup and Delivery Problem (PDP). The class of PDPs has a growing interest due to its applications in planning situations in transportation logistics and public transit. In the PDP, see Savelsbergh and Sol (1995), objects, people, or commodities must be collected and transported among locations of origins and destinations without any transshipment. The schedule for each vehicle is a sequence of pickup and delivery locations along with associated arrival and departure times at each location. In practice, most pickup and delivery problems have to deal with restrictions requiring pickup and delivery within certain time intervals, the class of problems known as PDP with time windows, or PDPTW, see Dumas, Desrosiers, and Soumis (1991). Applications of such models include airline scheduling, or the so-called dial-a-ride problem, in which requests are received to pick up personnel by a cab company or letters/parcels by a courier company.In an earlier attempt, Edirisinghe, Bowers, and Agarwal (2010) used the conventional node-arc (NA) approach to model the problem of scheduling barges to pickup oil from offshore oil platforms and delivering to a central depot. In an NA formulation, binary decision variables are defined for each vehicle corresponding to the traversal of a given arc linking two nodes, with identifiers for the visit numbers at each of the two nodes since multiple nodal visits may be needed to avoid shutdowns. However, since the number of such binary variables in the NA model grows with the visit frequency, the optimal value of which is unknown ‘a priori’, the latter reference limited (and pre-specified) the maximum number of such visits per node within a cycle by all vehicles. Close variants of the problem for ammonia pickup reported in Christiansen (1999) and the ship scheduling problem to deliver multi-commodities between supply and demand ports reported in Al-Khayyal and Hwang (2007) are all node-arc formulations as well. These node-arc formulations grow in problem size quite dramatically as the fleet size, number of nodes, and the maximum number of visits to a node are increased. These models cannot determine an optimal visit frequency for nodes or an optimal horizon length of repeatable operation. Although NA models are generally easier to formulate, the price to be paid is the astronomical growth of the model-size as well as the sub-optimality of schedules so-determined; in Edirisinghe et al. (2010), the model is computationally intractable even for a modest number of nodes with no more than two visits to a node. In contrast, the position-based model proposed in this paper is formulated to address all these issues optimally and simultaneously and it is a novel approach to modeling these general situations, in addition to improving the solutions by the node-arc counterpart.In the proposed position-based (PB) model, the total number of nodal visits by all vehicles to all nodes, say P, is fixed rather than the visit frequency to a specific node, and P is varied iteratively. For a given P, the model is formulated without any prior knowledge of a maximum number of visits to be made to a specific node by all vehicles, or a maximum total number of visits by a given vehicle at all nodes. It develops through our PB model that the arbitrary choice of setting the maximum number of nodal visits to two in Edirisinghe et al. (2010) is sub-optimal for certain model instances. In the sequel, the model growth in our new PB formulation is shown to be much smaller compared to the NA model, thereby enabling us to solve larger problem instances directly via MIP solvers.Our PB formulation is quite different from the standard path formulations in VRP. The path formulation of the VRPTW has been studied by several authors; see Kallehauge, Larsen, Madsen, and Solomon (2005) for a survey of this formulation in the context of column generation solution techniques. Splitting the single depot into a start and destination depot, a path in this context is a vehicle route from the start depot node to the destination depot node through the network of customer nodes. In contrast, PB formulation relies on a chronological list of ordered nodal visits by all vehicles. In this sense, this list allows a given node to be visited by multiple vehicles if need be, or a given vehicle visiting a node multiple times as necessary. This flexibility associated with the PB formulation makes it a versatile modeling tool for generalized vehicle routing problems with inventory pickup or distribution.In the barge scheduling application, Edirisinghe et al. (2010) use an objective of either maximizing the total quantity of oil picked up during a cycle, or maximizing the overall rate at which oil is delivered at the depot. However, given the cycle-repeatability requirement in this paper, the former objective entails seeking the longest cycle, and the resulting problem becomes substantially simplified. Moreover, in the latter case, the objective maximum is trivially-determined, and asset utilization of the fleet becomes substantially undermined, namely, while the oil is delivered at the maximal rate at the depot, certain vehicles could end up having substantial tour-time (‘sea-time’) relative to the oil being recovered. Consequently, we propose a new objective criterion, termed the fleet productivity metric that ensures for the fleet that tour-time is maximally-utilized. Furthermore, under the fleet productivity objective, node-arc formulations become even more difficult numerically, while our PB model remains relatively more stable.Comparisons of the proposed PB model with the NA model in this paper are limited to the direct solution of the model using standard mixed-integer programming software; exploiting the model structure for developing efficient decomposition methodology is outside the scope of this paper and will be the subject of future research.Suppose there is a fleet of V vehicles at a central depot (indexedj=0) that must be scheduled to visit N nodes (indexedj=1,…,N) to pick up and deliver a commodity produced at nodal sites. We do not assume an explicit set of delivery routes for vehicles, such as in Campbell and Savelsbergh (2004), nor do we assume a homogeneous fleet, such as in Raa and Aghezzaf (2009). The production rate at node j isRjand its on-site storage capacity isCj. If at any time the storage level at node j exceedsCj, a forced shutdown occurs at node j, which must be avoided at all costs due to a prohibitively expensive production-restart. Such cases are frequent in practice where continuous production takes place, including the situation with offshore oil platforms. Vehicle v has a speed ofSPv,v=1,…,V, and the distance between nodes j and k isDjk. While the distance matrix is symmetric, thusDjk=Dkj, the usual triangular inequality may not hold, namely, the inequalityDkj+Djl⩾Dklmay not hold for nodesk,j,l. Each vehicle has a limited capacity, denoted byQv. In practice, note that bothRjandSPvare likely to be subject to random variation, due to factors such as traffic congestion, weather conditions, production breakdowns, etc. For the purposes of this paper, we consider a mean model in which averages are assumed for these data, and hence, a deterministic modeling paradigm is considered.Consider a cycle that begins when all vehicles are stationed at the depot, and possibly some time later, the first vehicle leaves the depot empty. This cycle ends sometime after the last vehicle has returned to the depot with product on-board. During a cycle, a vehicle may make only one tour. The elapsed cycle time is denoted by T. For none of the nodes to shutdown during the elapsed time T, a given vehicle may have to make multiple stops at a node and a given node may receive visits by multiple vehicles. Furthermore, such a feasible cycle to be repeated without the fear of future shutdowns, under steady-state conditions, the nodal storage at the beginning of a cycle must equal that at the end of a cycle, and thus, a repeatable cycle. Without the multi-vehicle-multi-visit flexibility for a node, there may not exist a feasible schedule for a given fleet such that no production shutdowns would occur in a repeatable cycle.Suppose there is a total of P nodal visits involving all vehicles and all nodes within such a cycle. The list of P visits then corresponds to an ordered sequence of nodal visits and the chronology of the ordering is based on the time at which a node is visited by a vehicle. That is, each position p of the visit list corresponds to a unique vehicle and a unique node (except the depot), for eachp=1,…,P. A schedule may also need to have the flexibility of possibly waiting at a node for a vehicle to guarantee repeatable cycles while avoiding shutdowns, yet yielding the highest depot delivery rate relative to the fleet tour time. To the best of our knowledge, no single model in literature has considered all these flexibilities simultaneously; the model in Edirisinghe et al. (2010) is too restrictive and its size explosion due to the node-arc modeling paradigm makes its solution computationally difficult.Let the time value associated with position p be denoted bytpand the node and vehicle pair corresponding to p isjˆ(p)andvˆ(p). For a given p, define the binary variablexjp=1ifj=jˆ(p)andxjp=0ifj≠jˆ(p). Similarly, define the binary variablezvp=1ifv=vˆ(p)andzvp=0ifv≠vˆ(p). Due to the chronological ordering, the continuous nonnegative variabletpsatisfies(1)tp+1⩾tp⩾0,∀p=1,…,P.The clock is initialized when the cycle begins, i.e., the start timets=0. Also note that the above definitions admit the possibility for two consecutive positions to havejˆ(p)=jˆ(p+1)andvˆ(p)=vˆ(p+1). This implies that the vehicle v that visits node j at position p also makes a dummy visit to node j at positionp+1. SinceDjj=0and we assume that there is no product-loading time, this dummy visit should not consume time from the cycle time T, i.e.,tp=tp+1must hold in the latter event. Accordingly, a given listing of P positions associated with cycle time T can be flexibly expanded to a listing of positionsP∼>Pwithout incurring additional cycle (or travel) time or total product removal. The uniqueness ofjˆ(p)andvˆ(p)is implied by the following constraints:(2)∑j=1Nxjp=1,∀p=1,…,P,and(3)∑v=1Vzvp=1,∀p=1,…,P.Observe that the above constraints do not require that every vehicle has to leave the depot. If it turns out that∑p=1Pzvp⩾1, then vehicle v makes a tour; otherwise, vehicle v does not service any nodes.The position-based modeling approach requires onlyP(N+V)binary decision variables, where P is generally ofO(N), in addition to several continuous variables that will be presented in the sequel.Consider two positionsp1andp2in the sequence such that1⩽p1<p2⩽P. These two positionsp1andp2may be associated with the same vehicle or different vehicles. If it is the same vehicle, then time can be incremented fromtp1totp2by the elapsed time to traverse the distance between the two nodes (associated withp1andp2), including possible wait time, provided this vehicle does not have any other positions in the interval(p1,p2). Define the constants:(4)κi≔maxj=1,…,N{Dij},∀i=0,1,…,N.The following two results are straightforward.Proposition 1Vehicle v is associated with two positionsp1andp2(>p1)and these two positions are “consecutive” in vehicle v’s tour if and only ifαv(p1,p2)=0, where(5)αv(p1,p2)≔zvp1+zvp2-∑p=p1+1p2-1zvp-2,and the summation∑p=p1+1p2-1zvp=0ifp2=p1+1; otherwise,αv(p1,p2)<0holds.Given two positionsp1andp2in the sequence such thatp2>p1, the distance between the two nodes associated with positionsp1andp2satisfies the equation:(6)Djˆ(p1),jˆ(p2)=maxi=1,…,Nκi(xip1-1)+∑j=1Nxjp2Dij.Combining Propositions 1 and 2, the distance traveled by vehicle v from positionp1top2, denoted byδv(p1,p2), satisfies:(7)δv(p1,p2)=max0,maxi=1,…,Nκi(xip1-1)+∑j=1Nxjp2Dij+κiαv(p1,p2).Observe that if vehicle v is not associated with at least one of the positionsp1andp2or when these two positions are not consecutive in vehicle v’s tour, (7) implies thatδv(p1,p2)=0. Therefore, note for a given pair(p1,p2)that it is possible to haveδv(p1,p2)=0for allv=1,…,V.The elapsed time between the two positionsp1andp2(>p1)satisfies the inequality:(8)tp2-tp1⩾maxv=1,…,Vδv(p1,p2)SPv.Observe that the rhs of the above inequality is zero (and thus the inequality is redundant) unless positionsp1andp2are consecutive in the tour of some vehicle v. Moreover, the timing model (8) provides more flexibility by allowing possible ‘waiting time’ for vehicles at nodes, in this case atjˆ(p2).For a given vehicle v, denote the depot departure time bytsvand the return time at the depot bytev. Upon leaving the depot on a tour, vehicle v makes the first nodal visit at position p if and only ifαsv(p)=0where(9)αsv(p)≔zvp-1-∑p¯=1p-1zvp¯;otherwise,αsv(p)<0. Whenαsv(p)=0holds, the distance traversed by vehicle v upon leaving the depot to its first nodal visit is∑j=1ND0jxjp. In general, the latter distance is given by∑p=1Pδsv(p)where(10)δsv(p)=max0,∑j=1ND0jxjp+κ0αsv(p).On the other hand, defining(11)αev(p)≔zvp-1-∑p¯=p+1Pzvp¯,vehicle v ends its tour with final nodal visit at position p, before returning to the depot, if and only ifαev(p)=0; otherwiseαev(p)<0. Defining(12)δev(p)=max0,∑j=1ND0jxjp+κ0αev(p),the distance traversed by vehicle v to the depot from the final nodal visit is∑p=1Pδev(p). These distance models can be used to determine the depot departure/arrival times by combining with nodal position times. Depot departure time model is then:(13)tp-tsv⩾δsv(p)SPv+Tmaxαsv(p),and the depot return time model is:(14)tev-tp⩾δev(p)SPv+Tmaxαev(p),whereTmaxis an upper bound on cycle time, T. An upper bound on cycle time can be obtained by considering the total carrying capacity of all vehicles and the total productive capacity at all nodes. Denote the maximum holding capacity of vehicle v byQvand the production rate at node j byRj. Given the cycle-repeatability requirement, it is straightforward to see that(15)T⩽Tmax≔∑v=1VQv∑j=1JRj.Recalling that a cycle ends sometime after the last vehicle returns to the depot,(16)T⩾maxv=1,…,V{tev},orequivalently,T-tev⩾0,v=1,…,V.The value oftev, and thus the cycle time T, depend on the quantity of product removed from the nodes to ensure nodal inventory is within on-site capacity, as well as the repeatability of schedules.From a nodal standpoint, let the amount of product removed from node j in position p be denoted by the decision variableqjp(⩾0). Moreover, suppose the initial storage (at timets=0) at node j be denoted by the decision variableSj0(⩾0). Then, the inventory at node j at timetp, corresponding to position p, denoted bySj(p), is(17)Sj(p)≔Sj0+Rjtp-∑r=1p-1qjr.Then,qjp⩽Sj(p),∀j,p, guarantees that product removal is within the availability at the node, whileSj(p)⩽Cjguarantees that no shutdown occurs at node j in any positionp=1,…,P, that is, respectively,(18)Sj0+Rjtp-∑r=1pqjr⩾0,∀j=1,…,N;p=1,…,P,(19)andSj0+Rjtp-∑r=1p-1qjr⩽Cj,∀j=1,…,N;p=1,…,P.The cycle-ending inventory at node j is given bySje≔Sj0+RjT-∑p=1Pqjp. For the cycle to be repeatable,Sje=Sj0must hold. Moreover, to ensure that no-shutdown occurs at the end of the cycle,Sje⩽Cjmust hold. Combining these two expressions,(20)RjT-∑p=1Pqjp=0,,∀j=1,…,N,(21)Sj0⩽Cj,∀j=1,…,N.The quantityqjpshould be positive only if node j is visited in position p; moreover, such a visit may be mandated to collect a minimum inventory ofqminto account for fixed costs in collection operations. That is,(22)qminxjp⩽qjp⩽Cjxjp,∀j=1,…,N;p=1,…,P.From a vehicle standpoint, let the quantity of the product collected by vehicle v in position p be denoted by the nonnegative decision variableyvp. This quantity is strictly positive only when vehicle v makes a nodal visit (say node j) in position p; in the latter event,yvp=qjpmust hold. These are accomplished by the constraints:(23)yvp⩽Cmaxzvp,∀v=1,…,V,∀p=1,…,P,(24)and∑j=1Nqjp=∑v=1Vyvp,∀p=1,…,P,whereCmax≔maxj=1,…,N{Cj}. The total product collected in a tour must be within a vehicle’s holding capacity,Qv, that is,(25)∑p=1Pyvp⩽Qv,∀v=1,…,V.Fleet scheduling is typically performed with multiple goals in mind, e.g., to improve product recovery by the fleet, to attain the highest rate of delivery of product at the depot, improve the level of fleet utilization, minimize the total travel costs of the fleet, or simply to find a feasible repeatable schedule that does not lead to production shutdown.Edirisinghe et al. (2010) considered the objective of maximizing the total depot delivery, i.e., maximize∑v∑pyvp, herein termed the maxDD objective. Given the cycle-repeatability condition in (20) and the equality in (24), however, maxDD is equivalent to maximizing∑jRjT, hence, maximizing the cycle time, T. Lengthening the cycle time so as to increase the total inventory pickup under the maxDD objective can become an expensive strategy especially because fleet costs are ignored. We will show that the model under maxDD objective is a special case of the practically-more useful criterion that seeks maximizing the fleet productivity, discussed in the sequel. Consequently, solution complexity too is more simplified for the maxDD model relative to objectives that concern with system performance metrics, as evident from our computational experiments.Maximizing the depot delivery rate, termed maxDDR, is also an objective considered in Edirisinghe et al. (2010). In this case, the delivery rate is the total inventory pickup per unit cycle time, i.e.,∑j∑pqjpT. Given the repeatability condition for operation in (20), maxDDR is equivalent to maximizing∑jRj, the constant representing the total production rate. Thus, maxDDR is a feasibility problem in which a repeatable cycle of tours with no shutdown at any node is sought. In this respect, managerial-preference of the schedules under this objective is questionable.For a given total number of positions, P, to minimize the total travel distance incurred by the fleet, denoted byD(P), the following mixed-integer linear programming model is formulated, referred to as minTD model:(26)(minTD):D∗(P)=minC1(P)D(P)≔∑v=1V∑p1=1P-1∑p2=p1+1Pδv(p1,p2)+∑p=1Pδsv(p)+∑p=1Pδev(p),where the feasible setC1(P)for the minimization above is defined by the following constraint set:(27)C1(P):∑j=1Nxjp=1,∀p,∑v=1Vzvp=1,∀p,tp+1-tp⩾0,∀p,qjp⩾qminxjp,∀j,p,qjp⩽Cjxjp,∀j,p,yvp⩽Cmaxzvp,∀v,p,∑p=1Pyvp⩽Qv,∀v,∑j=1Nqjp=∑v=1Vyvp,∀p,RjT-∑p=1Pqjp=0,∀j,T-tev⩾0,∀v,Sj0+Rjtp-∑r=1pqjr⩾0,Sj0+Rjtp-∑r=1p-1qjr⩽Cj,Sj0⩽Cj,∀j,p,tp2-tp1⩾1SPvδv(p1,p2),∀v,∀p1<p2,tp-tsv⩾1SPvδsv(p)+Tmaxzvp-1-∑p¯=1p-1zvp¯,∀v,p,tev-tp⩾1SPvδsv(p)+Tmaxzvp-1-∑p¯=1p-1zvp¯,∀v,p,δv(p1,p2)⩾∑j=1Nxjp2Dij+κixip1+zvp1+zvp2-3-∑p=p1+1p2-1zvp,∀i,∀v,∀p1<p2,δsv(p)⩾∑jxjpD0j+κ0zvp-1-∑p¯=1p-1zvp¯,∀v,∀p,δev(p)⩾∑jxjpD0j+κ0zvp-1-∑p¯=p+1Pzvp¯,∀v,∀p,T⩽Tmax,T,Sj0,qjp,yvp,tp,tsv,tev⩾0;xjp∈B,zvp∈B,∀j,v,p,δv(p1,p2)⩾0,δsv(p)⩾0,δev(p)⩾0,∀v,p,∀p1<p2.We propose this objective as a way of addressing both the depot delivery and fleet cost concerns, and it is the most useful, but computationally more difficult, objective criterion. Toward this, first define the tour-timeτvof vehicle v by(28)τv=tev-tsv⩾0,which represents, in our application, the total time barge v spends in the ocean, referred to as sea-time, from the time it leaves the depot until it returns to the depot. Then,∑p=1Pyvp/τvis a productivity metric for the vehicle v, representing the inventory delivered at the depot by vehicle v per unit of tour time in a cycle. However, we are interested in the productivity for the overall fleet, and accordingly, we define the “fleet productivity” (FP) index, for a given number of total positions P, by:ρ(P)=∑v=1V∑p=1Pyvp∑v=1Vτv=T∑jRj∑vτv.Thus, maximizing the FP metric, termed maxFP, is equivalent to maximizingλ≔T∑vτv, rather than simply maximizing T as in the maxDD objective. For the maxFP problem, notice that the travel-distance variablesδv(p1,p2)are not required, and thus, these can be eliminated by substituting forδv(p1,p2)in (8) from that in (7). In this case, using the definition in (5) and noting (1), we obtain the nodal visit-time model as:(29)tp2-tp1⩾1SPv∑j=1Nxjp2Dij+κixip1+zvp1+zvp2-∑p=p1+1p2-1zvp-3,for alli=1,…,N,v=1,…,V,p1=1,…,P-1, andp2=p1+1,…,P. A similar approach is used to substitute for the distance variables from and to the depot,δsvandδev, respectively.The number of constraints in (29), and hence in the maxFP problem, is of the orderO(VNP2). Similarly, observe that the size of the block of constraints defining travel distancesδvin the minTD model in (26) too is of the orderO(VNP2). Therefore, the size of either model grows quadratically in P, the total number of positions. Indeed, an optimal value for P is unknown a priori for either model. In the event the (node-arc) distance matrix violates the triangular inequality (TI), in order to achieve an optimal total distance or fleet productivity, extra (artificial) nodal visits may have to be incorporated to tours in order to reduce node-to-node travel distance/time, which then further increases the required P and thus the model size. Therefore, when a position-based approach to modeling is considered, it is desirable to have a distance matrix that adheres to TI. This can be achieved by using shortest path distances (among nodes themselves and with the depot) so that the distance matrix used in a position-based model satisfies TI, as we shall follow in our computational implementation.Moreover, an additional simplification of the visit-time constraints is achieved for the maxFP problem when the distance matrix satisfies TI.Proposition 3Suppose the nodal distance matrix satisfies the triangular inequality. Then, the position timing model given in(29)is equivalent to:(30)tp2-tp1⩾1SPv∑j=1Nxjp2Dij+κi(xip1+zvp1+zvp2-3),for alli=1,…,N,v=1,…,V,p1=1,…,P-1, andp2=p1+1,…,P.Since the right hand side of (29) is no greater than that of (30), positions times feasible in model (30) are also feasible in (29). Thus, given(x,z)satisfying (2) and (3), it is only necessary to show that{tp}feasible in (29) is also feasible in (30) provided TI holds.Consider a given vehicle v, a pair of positionsp1andp2, and a node i. If node i is not associated with positionp1or if the vehicle v is not associated with either ofp1andp2, thenxip1+zvp1+zvp2<3, and thus, both inequalities (29) and (30) are vacuous and there is nothing prove. Therefore, consider the case whenxip1+zvp1+zvp2=3. In this case, let v visit node i at positionp1and then visits node j at positionp2. If vehicle v has no positions in the interval(p1,p2), then (29) and (30) are identical. Therefore, it is only necessary to consider the case when there are intermediate positions for vehicle v in the interval(p1,p2), denoted byp(1),…,p(n)such thatp1<p(1)<⋯<p(n)<p2. Suppose positionp(r)for vehicle v is associated with nodek(r),r=1,…,n. Then, (29) for vehicle v for position sequencep1,p(1),…,p(n),p2yield the (nontrivial) inequalities,tp(1)-tp1⩾1SPvDi,k(1),tp(r+1)-tp(r)⩾1SPvDk(r),k(r+1),r=1,…,n-1,tp2-tp(n)⩾1SPvDk(n),j.Summing the above inequalities, we have the valid inequality:(31)tp2-tp1⩾1SPvDi,k(1)+∑r=1n-1Dk(r),k(r+1)+Dk(n),j⩾1SPvDij,where the inequality in (31) holds due to the TI. Moreover, observe that (31) is the instance of (30) applied to vehicle v for the position pairp1,p2. Hence, positions times feasible in model (29) are also feasible in (30), which completes the proof. □Observe that the constraints in (30) are more sparse than those in (29), and thus computationally more appealing, although both systems have exactly the same number of constraints. Under TI, it can similarly be shown that the depot departure/return times in (13) and (14) are simplified as, respectively,(32)tp-tsv⩾1SPv∑jxjpD0j+κ0vzvp-1,(33)andtev-tp⩾1SPv∑jxjpD0j+κ0vzvp-1forv=1,…,V,p=1,…,P, where we have defined the constantκ0v≔κ0SPv+Tmax.Accordingly, under TI, the maxFP fractional optimization model is formulated as follows:(34)(maxFP):λ∗(P)≔maxC2(P)T∑vτv,where the feasible setC2(P)for the maximization above is defined by the following constraint set:(35)C2(P):∑j=1Nxjp=1,∀p,∑v=1Vzvp=1,∀p,tp+1-tp⩾0,∀p,qjp⩾qminxjp,∀j,p,qjp⩽Cjxjp,∀j,p,yvp⩽Cmaxzvp,∀v,p,∑p=1Pyvp⩽Qv,∀v,∑j=1Nqjp=∑v=1Vyvp∀p,RjT-∑p=1Pqjp=0,∀j,T-tev⩾0,∀v,Sj0+Rjtp-∑r=1pqjr⩾0,Sj0+Rjtp-∑r=1p-1qjr⩽Cj,Sj0⩽Cj,∀j,p,tp2-tp1⩾1SPv∑j=1Nxjp2Dij+κi(xip1+zvp1+zvp2-3),∀i,∀v,∀p1<p2,tp-tsv⩾1SPv∑jxjpD0j+κ0(zvp-1)+Tmax(zvp-1),∀v,∀p,tev-tp⩾1SPv∑jxjpD0j+κ0(zvp-1)+Tmax(zvp-1),∀v,∀p,τv=tev-tsv,∀v,T⩽Tmax,T,Sj0,qjp,yvp,tp,tsv,tev,τv⩾0;xjp∈B,zvp∈B,∀j,v,p.Suppose P is chosen large enough so that maxFP model is feasible. For such feasible and fixed P, observe that maxFP has fewer variables and constraints relative to the total distance minimization model minTD. Referring to Lee, Epelman, White, and Bozer (2006) and under the conditions of TI for given a feasible P, it can be argued that scheduling an additional nodal visit cannot lead to a reduction in the total travel distance in a given route for a single vehicle. Therefore the minimum travel distance can be achieved with the smallest P such that the minTD model is feasible if the vehicle capacity is not constraining the solution; otherwise, such a smallest P solution leads to a local minimum. In contrast, given the fractional (hence, nonlinear) objective function, maxFP optimization model is more difficult to solve because standard binary linear optimization software such as CPLEX (by IBM) cannot be applied directly. Therefore, an iterative solution approach is discussed next.For a fixed number of positionsP(⩾N), fleet productivity maximization model maxFP can be iteratively solved by appealing to linear fractional programming solution methodology, see Lasdon (1970). The basic idea is that given a strict lower boundλ¯onλ∗(P), an improved fleet productivity is obtained by searching for a set of tours satisfyingλ¯<T∑vτv. Since (2) and (3) guarantee for some p that there is some node j and vehicle v withxjp=zvp=1, i.e., at least one vehicle must leave the depot, and thus the model-constraints ensure that∑vτv>0must always hold. Therefore, the inequalityλ¯<T∑vτvimplies whenλ¯<λ∗(P)that there must exist a feasible solution inC2(P)such that(T-λ¯∑vτv)>0. Accordingly, consider the following mixed-integer LP, parameterized by the scalarλ(⩾0):(36)f(P,λ)≔maxC2(P)T-λ∑vτv.Proposition 4For a fixed P, the following properties hold for the optimal value functionf(P,λ)in(36):(i)f(P,λ)>0forλ<λ∗(P). Moreover,f(P,λ∗(P))=0,f(P,λ)<0forλ>λ∗(P),f(P,λ)is nonincreasing and piecewise linear convex inλ.Let an optimal solution of (34) be(T∗,τ∗v). To show (i), suppose by contradiction,f(P,λˆ)⩽0for someλˆ<λ∗(P). The later strict inequality then impliesT∗-λˆ∑vτ∗v>0⩾f(P,λˆ), which violates the optimality in (36) forλ=λˆ. On the other hand, forλ=λ∗(P), since(T∗,τ∗v)is feasible in (36),f(P,λ∗(P))⩾T∗-λ∗(P)∑vτ∗v=0follows. By contradiction, supposef(P,λ∗(P))>0and let(T∼,τ̃v)be an optimal solution of (36) forλ=λ∗(P). Then,T∼∑vτ̃v>λ∗(P)holds, which violates the optimality of(T∗,τ∗v)in (34). Thus,f(P,λ∗(P))=0.Conversely, for (ii), for someλ¯>λ∗(P), suppose an optimal solution of (36) is(T‾,τ¯v). Then,λ¯>λ∗(P)=T∗∑vτ∗v⩾T‾∑vτ¯vholds due to optimality in (34), which implies that0>T‾-λ¯∑vτ¯v, and thus,f(P,λ¯)<0follows.For (iii), f is nonincreasing inλbecause T and∑vτvare nonnegative. To show the piecewise linear convexity, for a fixed P, consider the feasible regionC2(P)of (36). There is only a finite set of feasible cycles (consisting of tours for each vehicle) inC2(P). Denote the index set of this discrete set of cycles byHP. That is, the set of all feasible solutions inC2(P)determine the set of all feasible cycle times and tour times,Th,∑vτhv:h∈HP. Therefore,(37)f(P,λ)=maxh∈HP{Fh(λ)},whereFh(λ)≔Th+-∑vτhvλ.Since eachFhis linear (and decreasing) inλ,f(P,λ)is determined as the maximum of a finite set of linear functions. Therefore, f is piecewise linear convex inλ. □Proposition 4 guarantees for a fixed P thatλ∗(P)is the only ‘zero’ of the functionf(P,λ). For convex continuous (nonsmooth) nonincreasing f, Newton’s method is employed to findλ∗(P)wheref=0occurs, that is, at some iteration k with givenλk, the updatedλk+1is determined by(38)λk+1=λk-f(P,λk)∂kf(P,λk),where∂kfis a sub-gradient of f w.r.tλatλk. Suppose an optimal solution of (36) forλ=λkyields{Tk,τkv,v=1,…,V}. Then,∂kf=-∑vτkv, and substituting in (38),λk+1=Tk∑vτkvfollows, see Fig. 1(a) for an illustration. Finiteness of this updating procedure is guaranteed due tof(P,λ)having a finite number of linear pieces as a function ofλ.A lower bounding initialλ0can be obtained by determining a feasible schedule, for instance, by solving the maxDD model,maxC2(P){T}, which is equivalent to settingλ=0to obtainf(P,0). Instead, a computationally simpler lower bound may be obtained as follows. Sinceτv⩽T,∀v, it follows thatλ∗(P)⩾T∑vτv⩾T∑vT=1/V, and thus,λ0=1/V>0. Note that this initial value can be quite small for large fleet sizes.For givenP(⩾N), and starting withλ0(=0 or1/V), the computational algorithm to solve (34) is presented below.Procedure:RFP(P,λ0)Step-0: Set iteration countk=0.Step-1: Solve the model (36) forλ=λkand obtain its solution{Tk,τkv,v=1,…,V}and objective valuef(P,λk).Step-2: Iff(P,λk)⩽0, STOP (and setλ∗(P)≔λk).Otherwise, defineλk+1≔Tk∑vτkv, setk←k+1, and go to Step-1.The procedure-RFP is referred to as a “Restricted FP” algorithm because it determines an optimal fleet productivity metricλ∗(P)for a fixed (or restricted) size of total visits, P, to nodes. However, such an arbitrary choice of P cannot be expected to yield the highest possible fleet productivity (FP). As P increases, the model in (34) becomes computationally more-challenging since the model size increases as a quadratic of P. Therefore, it is of paramount importance to design an efficient algorithmic search to determine the unrestricted-optimalP∗.Given the nonzero production ratesRj, each node must be visited at least once for cycle-repeatability, and thusP⩾Nmust hold. Thus, the unrestricted FP metricλ∗∗can be determined by solving(39)λ∗∗≔maxP{λ∗(P):P⩾N}.Proposition 5For sufficiently smallε>0, supposeqmin=ε. Then,λ∗(P)in(34)is non-decreasing in P. Moreover, ifP∗is an optimal solution of(39), thenλ∗∗=λ∗(P)for allP⩾P∗.For two values of P such thatP1<P2, consider the feasible setC2(P1). Given a feasible solution(x¯,z¯,y¯,q¯,t¯)inC2(P1), consider the final nodal positionp∗≡P1. There exist uniquej∗andv∗such thatx¯j∗p∗=1andz¯v∗p∗=1. Extend this solution to the ‘hat’ solution(xˆ,zˆ,yˆ,qˆ,tˆ)inC2(P2)such that for any positionp∈{P1+1,…,P2},xˆj∗p=zˆv∗p=1,xˆjp=zˆvp=0forj≠j∗,v≠v∗, and for anyp∈{1,…,P1}, letxˆjp=x¯jp,∀j, andzˆvp=z¯vp,∀v.Moreover, forp∈{P1+1,…,P2}, setqˆj∗p=yˆv∗p=ε,qˆjp=yˆvp=0forj≠j∗,v≠v∗, and setqˆj∗p∗=yˆv∗p∗=q¯j∗p∗-(P2-P1)ε. Forp∈{1,…,P1-1}, letqˆjp=q¯jp,∀j, andyˆvp=y¯vp,∀v. Moreover, settˆp=t¯pforp∈{1,…,P1}, and settˆp=t¯p∗forp∈{P1+1,…,P2}. For sufficiently smallε>0, sinceq¯j∗p∗-(P2-P1)ε⩾ε, it is straightforward to see that this ‘hat’ solution is feasible inC2(P2). Moreover, the ‘bar’ solution inC2(P1)and the ‘hat’ solution inC2(P2)produce the same FP rate. Thus,λ∗(P1)⩽λ∗(P2)holds. The second part of the proposition follows trivially sinceλ∗(.)is monotonic. □Following Proposition 5, a naïve method to determine a local optimal solution of (39) is to start with the initialP1=N, and iteratively update P byPk+1←Pk+1, untilλ∗(Pk)no longer improves. However, such a method is computationally expensive because Procedure-RFP must solve (36) to optimality at each iteration to obtain an optimalλ∗(Pk). In particular, if there are many ‘linear pieces’ close to the ‘zero’ of the functionf(P,.), such a naïve method for (39) can become quite inefficient. A remedy for this situation is proposed by noting the following result.Proposition 6f(P,λ)is non-decreasing in P for fixedλ.Follows analogous to the proof of Proposition 5. □The basic idea of the remedy is to prematurely terminate the iteration in Procedure-RFP for givenP(=P1)at someλ=λk, and then increase P toP2(say,P1+1), and continue RFP starting fromλ=λkunderP=P2. As Fig. 1(b) illustrates, updatingP1beforeλhas converged toλ∗(P1)can save (unnecessary) computational effort. The efficiency of this approach is dependent on the timing of ‘when-to-update P’ while theλ-iteration in (38) is in progress. For this purpose, we employ the following rule-of-thumb, referred to as the “CPU-rule for P-updates”.Define the elapsed CPU time threshold constantγ>0(say, in seconds). For some fixedP=Pk, check theλ-solution progress in Procedure-RFP(Pk,λk-1)in everyγCPU seconds. If a solution iterateλˆkis found to be (sufficiently) improved overλk-1, then terminate RFP prematurely and setλk∗=λˆk. The resulting unrestricted ‘Smart FP procedure’, denoted SmartFP, is given below.Procedure:SmartFPStep-0: SetP1=N, andλ0∗=λ0. Set the iteration counterk=1and fix the CPU thresholdγ>0and the tolerance termδ(⩾0).Step-1: Initiate the solution of model (36) for(P=Pk,λ=λk-1∗),If (36) is infeasible, setPk←Pk+1, and go to Step-1.Else, check the solution of (36) at elapsed CPU time epochs,rγforr=1,2,…, and obtain its current solution{Tk(r),τkv(r),v=1,…,V}. Computeλk(r)≔Tk(r)/∑vτkv(r).•ifλk(1)-λk-1∗/λk-1∗⩽δ, then solve (36) to optimality using Procedure-RFPPk,λk-1∗to obtainλ∗(Pk). Setλk∗=λ∗(Pk)and go to Step-2.ifλk(1)-λk-1∗/λk-1∗>δ, then if[λk(r+1)-λk(r)]/λk(r)⩽δ, for somer=1,2,…, setλk∗=λk(r+1)and go to Step-2.Step-2: Ifλk∗=λk-1∗, STOP (and setλ∗∗≔λk∗).Otherwise, definePk+1=Pk+1, setk←k+1, and go to Step-1.The proposed PB model is applied to a real-world situation involving two barges scheduled for picking up oil from 14 offshore platforms (nodes). This is an extended application from Edirisinghe et al. (2010) with an increase in the number of oil-producing platforms representing the real-world situation. The latter reference employed a node-arc formulation under the assumption that each platform may be visited no more than two times for oil pickup in a given cycle by all barges. Their model, slightly modified to accommodate our fleet productivity objective, is included in the Supplement (available on-line), against which we shall compare the efficiency of our PB-model. The basic data pertaining to this application is summarized in Table 1. Platform capacity,Cj, is in “barrels” (bbl) and production rate,Rj, is in bbl per day. The two barges have oil carrying capacitiesQvof 100,000 bbl and 110,000 bbl, and each barge has an average speed of 5 mph. The node numbering of the platforms in Table 1 is such that the first 5 nodes have the highestD0jRj/Cjratio. This ratio is indicative of the speed at which a platform needs to be accessed directly from the depot to avoid capacity overflow. TheN=5case has the set of nodes {1,2,3,4,5}, which are thus the platforms most-prone to shutdown. Note that for the distance matrix, TI is not held everywhere, as evident fromD56+D67=58+7<67=D57. Therefore, all models in this study are implemented using ‘shortest-path’ (SP) distances as discussed previously.In what follows, we compare the position-based (PB) and node-arc (NA) models under the two objectives of maximizing fleet productivity (FP) and minimizing travel distances (TD), i.e., the four model versions are herein abbreviated as PBFP, PBTD, NAFP, and NATD. Note that schedules under NAFP (and NATD) are more restrictive compared to those under PBFP (and PBTD), since a node is not visited more than twice in the NA models. For comparison purposes, PB models may also be considered under the visit restriction by imposing the additional constraints:(40)∑p=1Pxjp⩽L=2,∀j=1,…,N.When (40) is incorporated to position-based models, the resulting restricted versions are referred to as PBFP-2 and PBTD-2, where the total number of visits to each node is restricted to be no more than two. All MIP models are solved using CPLEX 12.4 by IBMTM. All experiments are run on an Intel Core i5 CPU-670@3.47gigahertz PC with 8gigabytes RAM, running Windows 7 Professional 64-bit operating system.A relative comparison between position-based and node-arc approaches to modeling under the fleet productivity objective is considered here. As for NAFP model, withL=2visits per node, the maximum possible nodal visits is2N– NAFP model size grows dramatically as L increases. Accordingly, we first compare it with PBFP-2 model specified withP=2Npositions so that both models admit an equal number of total nodal visits. These results are in Table 2for N=4, 5, and 6. PB-models are solved using Procedure-RFP (2N,λ0) withλ0=1/V=0.50, and for all subsequent iterations inλ, ‘warm start’ feature in CPLEX is enabled. Also note that in this application no feasible (repeatable) schedule exists forN>4using a single visit to each oil-platform within a cycle.As can be seen from Table 2, the optimum NAFP-schedule requires a total number of total visits that is much smaller than2Nalthough certain nodes are visited twice. Similarly, PBFP-2 schedule chooses nodal visits, up to a maximum of 2 per node, from the given list ofP=2Npositions, but requires an order of magnitude less CPU time relative to NAFP. For instance, for N=6, the node-arc formulation takes over 156hours of CPU time, while the position-based formulation with the same features solves the problem within a minute. This direct comparison amply demonstrates that the position-based modeling approach is far superior to the node-arc approach – NAFP has a much larger set of binary variables that grows rapidly with N, thus making NAFP computationally more tedious, and moreover, the increased matrix density in PBFP-2 does not appear to offset its advantage due to a smaller number of binary variables.Relaxing the maximum number of nodal visit constraint, PBFP model achieves an unrestricted and superior fleet productivity as seen in Table 2. Note that in this case certain nodes are visited more than twice for maximizing the fleet productivity metric, thus yielding a maximized FP value in PBFP that is higher than that of NAFP or PBFP-2. UsingN=5as an example, although NAFP uses 8 of the available 10 visits, no node is allowed to visit more than twice, whereas PBFP uses up only 9 of the 10 positions, with certain nodes being visited 4 times to gain an improved fleet productivity. In order for NAFP model to attain this improved FP value, four nodal visits must be pre-specified for each node because it is difficult to know ‘a priori’ which node must be visited 4 times, which would then lead to an even larger instance of the node-arc formulation. PBFP runs slower than PBFP-2 due to the increased flexibility in the former for deciding the optimal number visits to each node, and this slowness appears to stem from the increased number ofλ-iterations for the convergence of the Procedure-RFP.While the above experiments specifiedP=2Nfor a direct comparison with the node-arc model, it should be noted that solving an MIP involving2Npositions for eachλ-iteration is computationally-inefficient, see the case ofN=6with PBFP taking about an hour of CPU time with Procedure-RFP. Therefore, Procedure-SmartFP is employed, with CPU thresholdγ=100seconds, and with initial P set atN+1, to determine an (locally) optimal FP value. The results using SmartFP comparing PBFP model and its visit-restricted counterpart PBFP-2 are reported in Table 3. Comparison ofN=6case with that in Table 2 reveals that Procedure-SmartFP is far-superior to Procedure-RFP specified withP=2Nbecause the former searches for a locally-optimalP∗by starting withP=N+1and incrementing P iteratively. As the number of nodes increases, this relative advantage in SmartFP significantly improves. Also, observe that the PBFP-2 model (allowing only 2 visits per node, thus equivalent to the node-arc model) is solved by SmartFP significantly more efficiently compared to the unrestricted PBFP model. Moreover, as Table 3 shows, visit-restricted fleet productivity is only marginally lower relative to the unrestricted FP, except in the case of 10 platforms where fleet productivity loses 6% of the value when a maximum of only two loading-visits are allowed at a platform per cycle. The iterative progress of Procedure-SmartFP for solving PBFP model is depicted in Fig. 2. UsingN=9as an example, Fig. 3shows how the optimal barge tours are modified when a node cannot be visited more than twice.PBTD model is solved, starting withP=Nand incrementing P by one until the model is feasible, at which time the model solution corresponds to a (locally) minimal travel distance. Comparisons of the position-based model with the node-arc counterpart is in Table 4. The minimized travel distances are sometimes smaller with the PBTD model due to its flexibility in allowing nodal wait times. For instance, for the case of 5 platforms, PB model allows a total of 42.4hours of waiting at platforms in order to reduce the total travel distance of the barges by 62 miles compared to the non-waiting NA model. PBTD model is far-more efficient computationally than NATD model, and the latter failed to solveN>7incidences within the allotted time of 50 CPU hours. Also notice that the PB model solves the total distance objective significantly more efficiently compared to the fleet productivity objective. However, when minimizing travel distance, the fleet productivity is severely undermined – for instance, forN=7, PBTD minimizes travel distance to 462 miles, but attains only 281.9 bbl/hr for fleet productivity. In contrast, the PBFP-maximized fleet productivity at 635.2 bbl/hr is 125%-improved while the total travel distance associated with it is only 530 (=106.0×5) miles, which is within 15% of the minimum travel distance. On the other hand, it can be shown that PBFP-model, constrained with no more than 462 miles of total travel, can attain a maximum fleet productivity of 431.9 bbl/hr, i.e., an increase of 53% in FP over PBTD model for the same travel distance. Consequently, the usefulness of the minTD model, over maxFP, remains questionable.Interestingly, the model for maximizing inventory collection (maxDD objective) can be solved for all 14 platforms using the position-based model, with a node being visited no more than twice, in 188seconds, resulting in a total delivery of 69,600 bbl with an optimal 16 nodal visits. Indeed, maxDD solution looks for a feasible schedule with the longest cycle time. Thus, the Position-Based maxDD model could serve as an efficient tool to generate initial feasible schedules for the fleet routing problem.

@&#CONCLUSIONS@&#
