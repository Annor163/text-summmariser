@&#MAIN-TITLE@&#
A clonal selection algorithm for urban bus vehicle scheduling

@&#HIGHLIGHTS@&#
A clonal selection algorithm based bus vehicle scheduling approach is proposed.A fitness function is devised to evaluate the quality of a scheduling solution.Two heuristics are suggested to improve the quality of the scheduling solution.

@&#KEYPHRASES@&#
Vehicle scheduling,Bus scheduling,Immune algorithm,

@&#ABSTRACT@&#
The bus vehicle scheduling problem addresses the task of assigning vehicles to cover the trips in a timetable. In this paper, a clonal selection algorithm based vehicle scheduling approach is proposed to quickly generate satisfactory solutions for large-scale bus scheduling problems. Firstly, a set of vehicle blocks (consecutive trips by one bus) is generated based on the maximal wait time between any two adjacent trips. Then a subset of blocks is constructed by the clonal selection algorithm to produce an initial vehicle scheduling solution. Finally, two heuristics adjust the departure times of vehicles to further improve the solution. The proposed approach is evaluated using a real-world vehicle scheduling problem from the bus company of Nanjing, China. Experimental results show that the proposed approach can generate satisfactory scheduling solutions within 1min.

@&#INTRODUCTION@&#
Public-transport operations consist of four phases in sequence, namely network design, timetabling, vehicle scheduling and crew scheduling. Each of these phases can be treated as an independent problem.The vehicle scheduling problem of an urban public-transport system is to assign vehicles according to a given timetable, making departure times coincide with start times in the timetable, as well as minimizing some objectives, such as the number of vehicles used. Such scheduling is very significant for bus companies since good schedules can reduce operation costs and improve quality of service.Generally speaking, there are two types of bus vehicle scheduling algorithms, i.e., exact algorithms and heuristic algorithms. Exact algorithms, such as mathematical programming, obtain an optimal schedule but the computation time grows unmanageable with the size of bus fleet. Freling et al. [1] used a linear programming model to describe the single depot vehicle scheduling problem and proposed an auction based algorithm to solve it. Ribeiro et al. [2] presented a column generation approach to solve the vehicle scheduling problem. Kliewer et al. [3] utilized a time–space network to model the multi-depot vehicle scheduling problem. Heuristic algorithms, such as dispatching rules or Lagrangian relaxation, can get approximate scheduling solutions within reasonable computation time. Pepin et al. [4] summarized five heuristic algorithms for the multi-depot vehicle scheduling problem, namely branch-and-cut method, Lagrangian heuristic, column generation heuristic, large neighborhood search heuristic and tabu search. These approaches were applied to real-world data and their advantages and disadvantages were discussed. Freling et al. [5] proposed a rule-based heuristic algorithm to solve vehicle scheduling problems with different vehicle types. Laurent et al. [6] combined an iterated local search algorithm with a neighborhood schema for the multiple depot vehicle scheduling problem. Vanitchakornpong et al. [7] proposed a bus fleet scheduling model with multi-depot and line change operations and developed a constrained local search method to solve this problem. Ceder [8] proposed a heuristic algorithm based on the deficit function theory for multiple vehicle-type scheduling problems. Hadjar et al. [9] used a branch and price approach to solve the multiple depot vehicle scheduling problem with time windows.Some studies investigated the integration of vehicle scheduling and crew scheduling. Huisman et al. [10] combined column generation with Lagrangian relaxation to solve single depot integrated vehicle and crew scheduling. They also used a similar approach to solve multi-depot cases. Haase et al. [11] presented a set partitioning model for the crew scheduling problem. The model contains side constraints on the number of vehicles in order to generate feasible vehicle scheduling in polynomial time. de Groot et al. [12] split large vehicle and crew scheduling instances into smaller ones and solve them in integrated or sequential approaches respectively using a Lagrangian relaxation algorithm. Laurent et al. [13] used a greedy randomized adaptive search procedure (GRASP) to solve vehicle and crew scheduling problems for the single depot case. Initial solutions were constructed using constraint programming techniques and then improved by a local search approach which embeds a neighborhood exploration mechanism. Rodrigues et al. [14] used conventional integer programming combined with a heuristic to solve vehicle and crew scheduling problems. Trip durations were stretched so as to provide a chance to adjust the trip departure times in the later phase to improve the final solution. Lin et al. [15] presented a multi-objective programming model of vehicle and crew scheduling problems, and used a branch and bound algorithm to solve it. Mesquitaa et al. [16] combined a multi-commodity model with a set partitioning/covering model to describe and solve the vehicle and crew scheduling problem.An evolutionary algorithm (EA) is a kind of population based meta-heuristic. It starts from an initial population, and evolves the population by evolutionary operators until reaches a stopping criterion. Compared with traditional optimization algorithms, it can achieve global search capability and can effectively balance solution quality and computational time. Studies have shown that EA is very effective for NP-hard scheduling problems that cannot be solved by traditional algorithms within a reasonable timeframe [17–20]. Although EA has been used to solve vehicle routing problems [21,22], it has not been applied to solve realistic cases of urban bus vehicle scheduling.Immune evolutionary algorithms emerged in recent years are inspired by the biological immune system, and have been applied successfully to a variety of optimization problems. Many researchers have shown that immune algorithms possess several attractive properties to avoid premature convergence and improve local search [23–25]. In our previous work [26], a culture immune algorithm was used to solve a small-scale bus vehicle scheduling problem. However, this approach was overly complex and only able to produce a feasible scheduling solution for a small-scale problem. We now propose an immune algorithm based vehicle scheduling approach to generate a practical and high quality vehicle scheduling scheme for a large-scale bus line scheduling problem in China.In our approach, firstly, a set of vehicle blocks is generated based on the maximal wait time of bus drivers. A vehicle block is a set of consecutive trips by a single bus. Secondly, a subset of blocks is constructed by the clonal selection algorithm to produce an initial vehicle scheduling solution. Thirdly, two heuristics adjust the departure times of vehicles to further improve the solution.The contributions of this paper includes: (1) a clonal selection algorithm based bus vehicle scheduling approach able to produce a good scheduling solution quickly (within 1min); (2) a fitness function to evaluate the quality of a scheduling solution; (3) two heuristics to further improve the quality of the scheduling solution.The remainder of this paper is organized as follows. The vehicle scheduling problem of urban bus lines is described in Section 2. Section 3 gives the proposed approach for this problem. In Section 4, results obtained by executing the approach on a real-world vehicle scheduling problem are given. Finally, concluding remarks are in Section 5.A bus line involving two control points is a typical case in practice, such that we consider a line with two control points (CP1 and CP2). In each of the two CPs, drivers can rest. A trip is the act of driving the vehicle between two CPs. Each trip has a duration and direction, starting from one CP to another. A vehicle block is a sequence of consecutive trips designated to one vehicle.The initial departure time of a block means the departure time of its first trip. The timetable of a bus line consists of a large number of start times, each of which represents a trip. Given a timetable, the vehicle scheduling problem is to find a set of trips covering all start times (trips) in the timetable.A constraint-based formulation of this vehicle scheduling problem is given as follows.Let T be the set of trips in the timetable in chronological order. Let V be the set of vehicles and E be the set of drivers. For each driver e∈E, Sperepresents the driver's maximum allowed spread time, which consists of the driver's working and resting time, and Wkeis defined as the driver's maximum allowed working time.Generally speaking, there are two types of blocks, namely long blocks and short blocks. A long block is completed by two drivers while a short block uses only one driver. The operation times of a short block and a long block can be denoted by Speand 2Spe, respectively. Let Bsand Blbe the set of short blocks and long blocks, respectively. For each block b∈Bs∪Bl,Tb(b) is defined as the set of trips that are covered by it.For each driver e∈E, Td(e) is defined as the set of trips that are assigned to the driver e. For each vehiclev∈V, Tv(v) is defined as the set of trips that are assigned to vehicle v. For each trip t∈T, st(t) and et(t) represent the start time and end time of t, respectively. Let Tmbe a set of time points and each element in it represents 1min of a day.In addition, we definef(v,t)=1,t∈Tv(v)0,t∉Tv(v),∀v∈V,t∈TgCP1(v,δ)=1,vehiclevisstationedatCP1attimeδ0,vehiclevisnotstationedatCP1attimeδ∀v∈V,∀δ∈TmgCP2v,δ=1,vehiclevisstationedatCP2attimeδ0,vehiclevisnotstationedatCP2attimeδ∀v∈V,∀δ∈TmIn order to assure service quality of the bus company, the following restrictions need to be satisfied:(1)Each trip must be serviced by one vehicle.∑v∈Vf(v,t)≥1,∀t∈TThe driver's spread time cannot exceed the allowed maximal spread time.st(t1)−et(t2)<Spe,∀t1∈Td(e),t2∈Td(e)The driver's working time cannot exceed the allowed maximal working time.∑t∈Td(e)st(t)−et(t)<Wke,∀e∈ETrips that are assigned to each driver and vehicle must be feasible.et(t1)<st(t2)oret(t2)<st(t1),∀t1∈Td(e),t2∈Td(e)et(t1)<st(t2)oret(t2)<st(t1),∀t1∈Tv(v),t2∈Tv(v)For short vehicle blocks,et(t1)−st(t2)<Spe,∀t1∈Tb(b),t2∈Tb(b),∀b∈BsFor long vehicle blocks,et(t1)−st(t2)<2Spe,∀t1∈Tb(b),t2∈Tb(b),∀b∈BlThe optimization objective is to generate a scheduling solution that is able to cover each time in the timetable by one trip in the solution and at the same time satisfies the above constraints.A block is a sequence of trips assigned to one vehicle and there is a time interval between any two adjacent trips in a block. Using a specific maximum allowed wait time W (determined by an algorithm parameter), a block set can be produced for each vehicle by making the wait time between any two adjacent trips less than W. The blocks of all vehicles compose the set of candidate blocks. Then we need to find a block subset (solution) from the set of candidate blocks to make each time in the timetable be covered by one trip in the subset, and at the same time make the solution satisfy all constraints. The clonal selection algorithm proposed in [28] relies on its mutation to achieve a good local search capability and is suitable to solve combinatorial problems. In the paper, we use the clonal selection algorithm to solve this problem.Initial start times are defined as those start times in the timetable that can be chosen as the initial departure time of a block. Suppose the set of initial start times in the timetable are S={s1, s2, …, sl}. For each start time si∈S, a block setBsi=bsi,1,bsi,2,…,bsi,Bsiis constructed that contains all possible blocks starting from si, wherebsi,jmeans the jth block starting from time si. The set of candidate blocks is expressed byB=⋃i=1lBsi.The process of constructing a block set for each initial start time is shown in Fig. 1. Let Trip1 be the first trip of a vehicle starting from CP1 at time si, and its arriving time to CP2 is time ta. There are one or several start times in the interval [ta+R, ta+R+W], where R is the driver's rest time. For each start time t in the interval, the next trip is chosen to continue this block. Each such possible continuation can produce a different vehicle block. For example, we can choose Trip1 and Trip2 as the first and second trips of a possible block, respectively, and we can also choose Trip1 and Trip3 for another possible block. The above process is then carried out continuously for each of Trip2 and Trip3 to select its next trip, such that a block set is constructed for each initial start time.The W used to produce the block set is calculated by two start times tband tcnext to the arriving time ta(see Fig. 1), namely W=(tc−tb)χ. χ≥1 is a given control factor to make sure there is at least one start time in the interval [ta+R, ta+R+W] to continue a block.During constructing a block, before the next trip is added, the total elapsed time Twof this block is compared with the maximum allowed spread time Spe. If Tw<Spe(for short blocks) or Tw<2Spe(for long blocks), the trip is added to this block; otherwise, the constructive process of the block is terminated.The number of blocks in block set B is usually huge. Choosing a block subset from those blocks is a complex combinatorial optimization problem.(1)Representation of scheduling solutionRepresentation is a key issue of applying an evolutionary algorithm to solve a problem. We design an initial start time based encoding scheme for this problem. An antibody (solution) is expressed by an integer-valued vector, each gene of which corresponds to an initial start time. There are l initial start times in the set S, so the coding length is l.The encoding of an antibody X is shown in Fig. 2. Gene xi(i=1, 2, …, l) in X corresponds to the ith initial start time, si, in S. The value of each gene xiis an integer in the range0,Bsi. The expression xi=j means that the jth vehicle blockbsi,jin the setBsiis chosen. The expression xi=0 indicates that no block starting at time siis chosen. Therefore an antibody X represents a block subset BXselected from B. Subset BXcontainsmX=∑i=1lzX,siblocks, wherezX,si=1zX,si=0if and only if a block belonging toBsiis (not) selected to construct BX. Let BXto bebX,1,bX,2,…,bX,mX, where bX,j, j=1, 2, …, mX, denotes its jth vehicle block.Evaluation functionThe following objective (evaluation) function is designed to evaluate an antibody (solution) X.(1)f(X)=α∑i=1U∑j=1uioij−1+β∑i=1nyti,where n represents the number of start times in the timetable T={t1, t2, …, tn}, andyti∈{0,1}.yti=0means there is at least one trip in the solution X whose departure time is equal to ti; otherwise, no such departure time exists in this solution. Start times in T are divided into several groups by a fixed small time interval, such that in each group the departure time of a trip in X can be adjusted to its adjacent start time in the timetable by the adjustment procedure (explained in Section 3.3). U denotes the number of groups; uirepresents the number of start times in the ith group; oijindicates the number of trips covering the jth start time in the ith group. Weights α and β are pre-specified positive integers.The first term in Eq. (1) is used to evaluate the quality of a solution. If this term equals to zero, then the solution may cover each start time in T with one trip after the adjustment procedure. The second term is used to evaluate the feasibility of a solution (corresponding to constraint (1)). If this term is greater than zero, resulting in the increase of objective function value, then this solution tends to be deleted in the evolutionary process. Constraints (2)–(5) are satisfied in the process of creating the block set.Antibodies in the population are sorted in ascending order according to their evaluation values. Then the sorted antibodies are divided into w groups, each of which contains the same number of antibodies. The affinity of an antibody in the ith group can be calculated by(2)Ai=h−i,i∈{1,2,…,w}where h is a given integer.Select candidate solutions using clonal selection algorithmThe clonal selection algorithm's steps are described as follows.Step 1: Let g be the number of generations and g=0. Initialize the population P(g). The number of antibodies in P(g) is N.Step 2: Calculate the affinity of each antibody in P(g) by Eq. (2), and sort all antibodies in descending order according to their affinities.Step 3: Each antibody in P(g) clones, and the number of clones for each antibody is proportional to its affinity. N clones are generated to compose the population Pc(g).Step 4: Each clone in Pc(g) mutates. The mutation rate of each clone is inversely proportional to its affinity, i.e., a clone with a higher affinity will have a lower mutation rate. N mutated clones are produced to form population Pm(g).Step 5: ncantibodies with the highest affinity are selected from P(g) and Pm(g) to compose the population S(g).Step 6: N–nsrandomly generated antibodies are added to S(g). Let P(g+1)←S(g), g←g+1. Return to Step 2 until the stopping criterion is satisfied.Detailed operations are as follows.(1)Population initializationA good initial population can help an evolutionary algorithm quickly converge to a high quality solution. We generate the initial antibodies by three ways according to [26], i.e., (1) covering start times from beginning to end; (2) covering start times from end to beginning; (3) randomly covering start times. The number of blocks in each initial antibody is given as a random integer in the range [mmin, mmax], where mmin and mmax are the lower bound and upper bound of the required number of blocks, respectively.Clone operationAll antibodies are sorted according to their affinities. Each antibody clones and the clone probability of the ith antibody Abiis calculated by(3)AffinityAbi∑j=1NAffinityAbj,i∈{1,2,…,N}where Affinity(·) is the affinity function. The roulette wheel method [27] is used to determine the number of clones for each antibody.Mutation operationEach clone mutates and its mutation rate is inversely proportional to its affinity. An antibody with a higher affinity has a lower mutation rate. Let η and ρ be the highest and lowest mutation rate. The clones are divided into p groups according to their affinities, and the mutation rate of clones in the ith group is computed by(4)ρ+η−ρp×i,i∈{1,2,…,p}If a gene xiof a clone mutates, its value is replaced by a block number randomly chosen from the setBsiwith probability of 0.7, and is set to zero (means no block starting at siis chosen) with probability of 0.3. The block number in a gene is replaced by another block number with greater probability (0.7) because it is possible to produce an improved solution. Setting the value of a gene to zero removes that block from the solution. This deletion may create a solution with a smaller number of blocks but often results in uncovered start times. Therefore, a small probability (0.3) is used for deletion.According to the objective function in Eq. (1), the clonal selection algorithm is used to produce a solution with a high affinity. To further improve the quality of this solution, an adjustment to try to make each start time in T be covered by exact one trip is made.The adjustment procedure consists of two steps. The first step is to adjust the departure of trips to try to make each start time in the timetable be covered by one trip in the solution, and the second step is to avoid each start time in the timetable covered by more than one trip.(1)Adjusting departure times of tripsSuppose there are n1 start times in CP1 and n2 start times in CP2. For a solution X, assume that the number of trips covering start times in CP1 is expressed byC=c1,c2,…,cn1and the number of trips covering start times in CP2 is expressed byD=d1,d2,…,dn2. For each block bX,j(j=1, 2, …, mX) inBX=bX,1,bX,2,…,bX,mX, suppose the relaxation times of its trips are denoted byLX,j=lX,j,1,lX,j,2,…,lX,j,mjX. A trip's relaxation time in a block is defined as the time interval between its arrival time and the departure time of its next trip in the block. rmin is defined as the minimum rest time between two adjacent trips for a driver.Firstly, the start times in CP1 are checked in chronological order, and then the start times in CP2 are checked. For each start time, such as the ith start time in CP1, if ci=0, then the forward adjustment and backward adjustment are executed sequentially to make the ith start time be covered.Starting from i−1th start time and let k=i−1, the forward adjustment checks whether ck=1. If the answer is yes, we find the trip covering the kth start time and suppose that it is the qth trip in bX,j. Then check whether its relaxation time lX,j,qis larger than the sum of rmin and the difference between the kth and k+1th start times. If the answer is yes, the adjustment of departure time of the trip from k to k+1 is feasible. Then for the k−1th start time, the above adjustment process is repeated until ck≠1 or the relaxation time of the trip covering the kth start time is smaller than the sum of rmin and the interval between the kth and k+1th start times.If ck>1 and the relaxation time of the trip covering the kth time is larger than the sum of rmin and the interval between the kth and k+1th start times, then we adjust the start time one by one according to the sequence (k, k+1, …, i) to make the ith start time in CP1 be covered by a trip. For example, suppose the qth trip in bX,jcovering the kth time needs to be adjusted, then that trip is adjusted to make it cover the k+1th start time instead of the kth start time and the relaxation times lX,j,qand lX,j,(q−1) are also updated. Suppose the interval between the kth and k+1th start times is ak, then let lX,j,q=lX,j,q−akand lX,j,(q−1)=lX,j,(q−1)+ak. This process continues until the ith start time is reached, and then let ci=1 and ck=ck−1. If there are more than one trip that cover the kth start time, then the trip with the maximal relaxation time is chosen to be adjusted.If ck=0 or the relaxation time of the trip covering kth start time is smaller than the sum of rmin and the interval between the kth and k+1th start times, then the forward adjustment is terminated and the backward one starts. The backward adjustment is similar to the forward one, except that each start time after the ith time is checked in reverse chronological order.Remove overlapping tripsThis step is used to remove overlapping trips in the solution. For each block bX,j(j=1,2, …, mX) of a solution X, suppose start times covered by bX,jareTX,j=tX,j,1,tX,j,2,…,tX,j,rXj, whererXjis the number of start times covered by bX,j. Starting from the first start time in TX,j, let i=1 and check tX,j,iand tX,j,(i+1). If i is an odd number, it means start times tX,j,iand tX,j,(i+1) are in CP1 and CP2, respectively; otherwise they are in CP2 and CP1, respectively. If both tX,j,iand tX,j,(i+1) are covered by more than one trip, then only one randomly chosen trip is kept and all other trips are removed from each of the two start times. Set i=i+1, and repeat the above process until all times in the block bX,jare considered. The above procedure is performed for each block in the solution X to remove overlapping trips.The proposed scheduling approach is applied to the real-world vehicle scheduling problem of a bus line of Nanjing city in China. The average travel time a trip takes is about 32min for off-peak hours and 35min for rush hours and normal hours. For this bus line, the rush hours include the periods of 6:30–9:00 and 17:00–20:00 while 4:30–6:30 and 21:00–01:05 are off-peak hours, and 9:00–17:00 and 20:00–21:00 are normal hours. The maximal spread time of a driver is 8h (each driver needs to perform several trips in 1 day, and there is a rest time between any two adjacent trips). The operation information of this bus line is given in Table 1.According to the actual operation management, the first trip of a vehicle should start before 11 o’clock. The average time interval of two adjacent start times in the timetable is about 3–4min, such that the 120th start time in CP1 is just at 11:01. The first 120 start times in CP1 are considered as the initial start times, so the length of an antibody is 120. According to Section 3.2, the ith gene of an antibody represents a block in the set ofBsi.The range of the number of blocks in an initial antibody is chosen as [42,46] by estimating the actual number of blocks required to produce a schedule solution. Each block corresponds to one vehicle, which is assigned to one (for a short block) or two drivers (for a long block). In the phase of generating the set of candidate blocks, the rest time R is set to 10min. The control factor χ is set to 1.2 to guarantee that there is at least one start time to continue a block. The parameters of clonal selection algorithm are chosen as N=300, ns=240, ρ=0.02, η=0.08, p=4, h=17, w=8 after brief experimentation. The algorithm performance is not sensitive to its parameters except ρ and η, which are further analyzed in Section 4.2. In the adjustment phase, the minimum rest time rmin is set to 2min according to practice.

@&#CONCLUSIONS@&#
In this paper, we propose a bus vehicle scheduling approach. The approach consists of three steps. Firstly, a set of candidate vehicle blocks is constructed, which includes all feasible blocks that satisfy the constraints of the problem. Then a clonal selection algorithm based block selection approach is designed to choose the most suitable block subset from the candidate block set to produce a scheduling solution. Finally, two adjustment procedures are used to adjust the departure times of trips in the solution to further improve its quality.The proposed approach is applied to a real-world vehicle scheduling problem. The experiments show that the approach is effective and can find satisfactory scheduling solutions quickly.