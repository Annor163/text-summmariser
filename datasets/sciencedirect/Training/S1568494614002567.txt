@&#MAIN-TITLE@&#
A new approach for unit commitment problem via binary gravitational search algorithm

@&#HIGHLIGHTS@&#
Binary gravitational search algorithm (BGSA) is proposed to solve unit commitment.BGSA based on priority list is adopted to optimize on/off status of units.Decommitment of excess units is devised to improve the properties of BGSA.Heuristic search strategy is applied to repair minimum up/down time constraints.BGSA is expanded to solve mixed integer nonlinear optimization problem.

@&#KEYPHRASES@&#
Binary gravitational search algorithm,Unit commitment,Economic load dispatch,Heuristic strategy,Local mutation,

@&#ABSTRACT@&#
This paper proposes a new gravitational search algorithm to solve the unit commitment (UC) problem, which is integrated binary gravitational search algorithm (BGSA) with the Lambda-iteration method. The proposed method is enhanced by priority list based on the unit characteristics and heuristic search strategies to repair the spinning reserve and minimum up/down time constraints. Furthermore, local mutation strategies are applied to improve the performance of BGSA. The implementation of the proposed method for UC problem consists of three stages. Firstly, the BGSA based on priority list is applied for solution unit scheduling when neglecting minimum up/down time constraints. Secondly, heuristic search strategies are used to handle minimum up/down time constraints and decommit excess spinning reserve units. Thirdly, local mutation strategies are raised to avoid premature convergence of the algorithm and prevent it from trapping into local optima. Finally, Lambda-iteration method is adopted to solve economic load dispatch based on the obtained unit schedule. The feasibility and effectiveness of the proposed method is verified by the systems with the number of units in the range of 10–100 and the results are compared with those of other methods reported in literatures. The results clearly show that the proposed method gives better quality solutions than other methods.

@&#INTRODUCTION@&#
Unit commitment (UC) is a very significant optimization task, which plays an important role in the economic operation planning of power systems. The unit commitment problem (UCP) in power systems refers to the optimization problem for determining the start-up and shut-down schedule of generating units over a scheduling period so that the total production cost is minimized while satisfying various constraints. The UCP can be considered as two linked optimization decision processes, namely the unit-scheduled problem that determines on/off status of generating units in each time period of planning horizon, and the economic load dispatch problem. Mathematically, the UCP has commonly been formulated as a complex nonlinear, mixed-integer combinational optimization problem with 0–1 variables that represents on/off status and continuous variables that represents unit power, and a series of prevailing equality and inequality constraints. Furthermore, the number of combinations of 0–1 variables grows exponentially as being a large-scale problem. Therefore, UCP is known as one of the problems which is the most difficult to be solved in power systems.Many methods have been developed to solve the UCP in the past decades. The major methods include priority list method (PL) [1,2], dynamic programming (DP) [3], branch-and-bound methods (BBM) [4], integer and mixed integer linear programming (MILP) [5], Langrangian relaxation (LR) [6,7]. Among these methods, PL is simple and fast, but the quality of final solution is not guaranteed. DP is flexible but the disadvantage is the “curse of dimensionality”, which leads to more mathematical complexity and increases computation time if the constraints are taken into consideration. The shortcoming of BBM is the exponential growth in the execution time with the size of UCP. MILP adopts linear programming techniques to solve and check an integer solution, which is approximate to handle nonlinear characteristics of UCP. These methods are usually applied to solve small-scale UCP and require major assumptions that limit the solution space. The main problem of the LR is the difficulty encountered in obtaining feasible solutions. Due to the non-convexity nature of the UCP, optimality of the dual problem does not guarantee feasibility of the primal UCP. Furthermore, solution quality of LR depends on the method to update Lagrange multipliers.Aside from the above methods, meta-heuristic approaches such as artificial neural network (ANN) [8], ant colony optimization [9,10], genetic algorithm (GA) [11–16], evolutionary programming (EP) [17], memetic algorithm (MA) [18], chaos optimization (CO) [19], simulated annealing (SA) [20], greedy random adaptive search procedure (GRASP) [21,22], bacterial foraging (BF) [23], differential evolution [24,25] and particle swarm optimization (PSO) [26–34] have also been used to solve UCP since the last decades. These meta-heuristic optimization methods attract much attention because it implements simply to find the near-global minimum and can easily deal with various complex nonlinear constraints. However, these meta-heuristic methods have one or another drawback such as premature phenomena, parameter sensitivity, trapping into local optimum and taking too much computation time especially for a large-scale UCP. Thus, improving current optimization techniques and exploring new optimization methods to solve the UCP problem has great significance.In recent years, a new optimization method known as gravitational search algorithm (GSA) proposed by Esmat Rashedi et al. [35] in 2009 has become a candidate for optimization application due to its flexibility and efficiency, which is based on the Newton's law of gravity and law of motion. GSA has been verified high quality performance in solving different optimization problems, such as optimal power flow in power system [36], parameter identification of water turbine regulation system [37], future oil demand forecasting [38] and prototype classifier [39]. The most substantial feature of GSA is that gravitational constant adjusts the accuracy of the search, so it speeds up solution process. Furthermore, GSA is memory-less, it works efficiently like the algorithms with memory, and it can be considered as an adaptive learning algorithm, respectively. However, application of GSA in combinatorial optimization problems is still limited. The major obstacle of successfully applying GSA to combinatorial problems is due to its continuous nature. To remedy this drawback, this paper proposes an enhanced gravitational search algorithm to solve UCP, which is integrated binary gravitational search algorithm (BGSA) with the Lambda-iteration method. The proposed method is enhanced by priority list based on the unit characteristics and heuristic search strategies to repair the spinning reserve and minimum up/down time constraints. To improve the performance of the method, local mutation strategies are raised to avoid premature convergence and trapping into local optima. In the proposed method, BGSA is used to solve the unit-scheduling problem and the Lambda-iteration method is used to solve the economic load dispatch problem. Finally, the proposed method is tested on the UCP systems with the number of units in the range of 10–100. Simulation results demonstrate the feasibility and effectiveness of the proposed method in terms of solution quality compared with those of other optimization methods reported in the literatures.This rest of the paper is organized as follows. Section 2 provides the mathematical formulation of the UCP. Section 3 briefly introduces the basics of binary gravitational search algorithm. Section 4 proposes an improved binary gravitational search algorithm for solving UCP. Section 5 gives the numerical example. Section 6 outlines the conclusions. Finally, acknowledgements are given in Acknowledgements Section.The objective of UCP is to find the generation scheduling over the scheduled time horizon such that the total production cost can be minimized while satisfied all kinds of constraints. The total production cost over the entire scheduling periods is the sum of the operating cost and startup cost for all of the units. Thus, the objective function of the UC problem is to minimize(1)∑t=1T∑i=1N[fi(Pit)+STit(1−uit−1)]uitwhere N is number of generators; T is total scheduling period;Pitis generation of unit i at time t;uitis on/off status of unit i at time t (on=1 and off=0);STitis startup cost of unit i at time t.Generally, the fuel cost,fi(Pit)per unit is a function of the generator power output. Most frequently used cost function is in the form of(2)fi(Pit)=ai+biPit+ci(Pit)2where ai, biand cirepresent the unit cost coefficients.(1)System power balanceThe generated power from all committed units must be sufficient enough to meet the system power demand.(3)∑i=1NPituit=PDtwherePDtis system load demand at time t.(2)System spinning reserve requirementSpinning reserve requirements are necessary in the operation of a power system. This necessity is due partly to certain outages of equipment. The reserve is considered to be a prespecified value or a given percentage of the forecasted demand.(4)∑i=1NuitPimax≥PDt+PRtwherePRtis spinning reserve at time t.(3)Generation power limitsEach unit has generation range, which is represented as(5)uit⋅Pimin≤Pit≤uit⋅Pimaxwhere Pimin and Pimax are minimum and maximum generation limit of unit i, respectively.(4)Unit minimum up timeA unit must be on for a certain number of hours before it can be shut down.(6)Ti,ont≥Ti,upwhereTi,ontis continuously on time of unit i up to time t; Ti,upis unit i minimum up time.(5)Unit minimum down timeA unit must be off for a certain number of hours before it can be brought online.(7)Ti,offt≥Ti,downwhereTi,offtis continuously off time of unit i up to time t;Ti,downis unit i minimum down time.(6)Unit initial statusThe initial status at the start of the scheduling period must be taken into account.The gravitational search algorithm (GSA) [35] and binary gravitational search algorithm (BGSA) [40] are first introduced and developed by Rashedi. Although the GSA has been verified high quality performance in solving different optimization problems [36–39], they are all continuous variable optimization problems in the references. Many problems defined in the real space, may be considered in the binary space such as unit commitment. To break the restriction of GSA for solving descries optimization problems with binary code solutions, BGSA was proposed based on the theory of GSA.The gravitational search algorithm (GSA) as one of the newest stochastic search algorithms is proposed based on Newtonian laws of gravity and mass interaction. In GSA, agents are considered as objects and their performance is measured by their masses. All these objects attract each other by the gravitational force, and the force causes a global movement of all objects toward the objects with heavier masses. Hence, masses cooperate using a direct form of communication, through gravitational force. The heavier masses correspond to better solutions and move more slowly and conversely lighter masses correspond to worse solutions and move toward heavier masses much faster. This guarantees the exploitation step of the algorithm. Each mass (agent) has four specifications in GSA: position, inertial mass, active gravitational mass and passive gravitational mass. Some velocity and position updating scheme of agents are employed here. Velocity of each agent is updated after calculating acceleration of each agent, using Newton's law of motion. Consequently, position of each agent is updated using the modified velocity. The position of the mass corresponds to a solution of the optimization problem, and its gravitational and inertial masses represent fitness function.GSA algorithm can be summarized as following steps:Step 1: InitializationWhen it is assumed that there is a system with NP masses, position of the ith mass is described as follows. At first, the positions of masses are fixed randomly. That is,Xi=(xi1,xi2,…,xid,…xin). wherexidis the position of the ith mass in dth dimension.Step 2: Fitness evaluation of all AgentsIn this step, to execute for all agents at current iteration and best and worst fitness are computed as follows (for a minimization problem).(8)best(t)=minj∈{1,...,NP}fitj(t)(9)worst(t)=maxj∈{1,...,NP}fitj(t)For a maximization problem:(10)best(t)=maxj∈{1,...,NP}fitj(t)(11)worst(t)=minj∈{1,...,NP}fitj(t)where fitj(t) is the fitness of the jth agent of iteration t, best(t) and worst(t) are best (minimum) and worst (maximum) fitness of all agents at iteration t.Step 3: Compute the gravitational constant (G(t))In this step, the gravitational constant at iteration t (G(t)) is computed as follows.(12)G(t)=G01−tTmaxwhere G0 is the initial value of the gravitational constant chosen randomly, t is the current iteration and Tmaxis the total iteration number.Step 4: Update the gravitational and inertial massesIn this step, the gravitational and inertial masses are updated for each agent at iteration t as follows.(13)Mai=Mpi=Mii=Mi,i=1,2,…NP(14)mi(t)=fiti(t)−worst(t)best(t)−worst(t)where fiti(t) is the fitness of the ith agent at iteration t.(15)Mi(t)=mi(t)∑j=1NPmj(t)where Maiis the active gravitational mass of the ith agent, Mpiis the passive gravitational mass of the ith agent, Miiis the inertia mass of the ith agent, Mi(t) is the mass of the ith agent at iteration t.Step 5: Calculate the total forceIn this step, the total force acting on the dth dimension of ith agent at iteration t (Fid(t)) is calculated as follows.(16)Fid(t)=∑j=1,j≠iKbestrandj⋅Fijd(t)where randjis a random number between interval [0,1] and Kbest is the set of first Kbest agents with the best fitness value and largest mass.The force acting on the ith mass (Mi(t)) from the jth mass (Mj(t)) at the specific iteration t is described according to the gravitational theory as follows.(17)Fijd(t)=G(t)⋅Mpi(t)×Maj(t)Rij(t)+ε(xjd(t)−xid(t))where Rij(t) is the Euclidian distance between ith and jth agents (||Xi(t)−Xj(t)||2) and ɛ is the small constant.Step 6: Calculate the acceleration and velocityIn this step, the acceleration (aid(t)) and velocity (vid(t)) of the ith agent at iteration t in dth dimension are calculated through law of gravity and law of motion as follows.(18)aid(t)=Fid(t)Mii(t)(19)vid(t+1)=randi×vid(t)+aid(t)where randiis the random number between interval [0,1].Step 7: Update the position of agentsIn this step the next position of the ith agents in dth dimension (xid(t+1)) are updated as follows.(20)xid(t+1)=xid(t)+vid(t+1)Step 8: Repeat step 2–step 7until the iterations reach the criteria.In the final iteration, the algorithm returns the value of positions of the corresponding agent at specified dimensions. This value is the global solution of the optimization problem.In standard version of GSA, the algorithmic “gravitational forces” lead directly to change in the position of search points in a many-dimensional continuous space. In the binary version of GSA, the outcome of these forces is converted into a probability value for each element of the binary vector, which guides the elements to take on the value 0 or 1. Thus, agents of BGSA adopt binary 0–1 encoding technique.In discrete binary environment, each dimension can take only 0 or 1. Moving through a dimension means that the corresponding variable value changes from 0 to 1 or vice versa. In order to introduce a binary mode for the gravitational algorithm, the updating procedure of the force, acceleration and velocity may be considered similar to the continuous algorithm (Eqs. (18)–(20)). The main difference between continuous and binary GSA is that in the binary algorithm, the position updating means a switching between “0” and “1” values. And the switching should be done according to the mass velocity. The key idea is to update the position in a manner that the current bit value is changed with a probability that is calculated according to the mass velocity. In other words, BGSA updates the velocity based on Eq. (19) and considers the new position to be either 1 or 0 with the given probability. A new agent's position (xid(t+1)) is updated using a condition as shown in (21). The flowchart of BGSA is shown as Fig. 1.(21)xid(t+1)=xid(t),¯ifrand<|tanh(vid(t+1))|xid(t),otherwiseThe unit-scheduled problem of UCP is a discrete optimization problem with 0–1 decision variables representing on/off status of units, which determines on/off status of generating units in each time period of planning horizon. As the Section 3.2 introduced, Binary gravitational search algorithm whose solutions are based on binary 0–1 values is suitable for solving unit-scheduled problem of UCP. In this algorithm, the target population is constructed based on the units’ on/off status values (binary 0–1 values) as represented by Xi=[1, 0, ...1, ..., 0], i=1, 2,…, NP.The proposed gravitational search algorithm for solving UCP consists of four stages. In the first stage, combination binary gravitational search algorithm with priority list is used to commit units to satisfy spinning reserve neglecting the minimum up and down time constraints. In the second stage, heuristic search strategy is applied to repair violations of the minimum up and down time constraints and excessive units are decommitted based on the unit schedule from the first stage. In the third stage, local mutation strategies are proposed to avoid premature convergence and trapping into local optima of the algorithm. In the last stage, the equal Lambda-iteration method is used to solve the economic load dispatch (ELD) problem. Finally, the total production costs including operational costs from economic dispatch and start up costs from UC is calculated. When one generating units combination has the lowest total generation production cost, it will be chosen as an optimal solution of UC schedule.Before using the binary gravitational search algorithm to solve UCP, the representation of agent must be defined. We defined each unit on/off (or 1/0) status as a gene, all available unit status at each hour make up a sub-chromosome, and there are T sub-chromosomes over the time horizon T comprising an agent. An agent would display the unit commitment schedule over the time horizon T. The on/off schedule of the units is stored as an integer-matrix U with dimension N×T. A matrix representation of an agent is shown as follows.(22)U=u11u12…u1Tu21u22…u2T⋮⋮⋮⋮uN1uN2…uNTwhereuitis unit on/off status of unit i at time t(uit=1/0for on/off)In the initialization process, a set of agents are created at random. For the NP agents, the candidate solution of each agent Uj(j=1, 2, …, NP) is randomly initialized. The elementsuitof each agent Ujis generated using a uniform distributed random function, which generates either 0 or 1 and they are equally probability.Priority list is created according to the parameters of each unit. Cost per produced of a unit at its maximum output power is usually less than that at other output power levels. So, it is expected to run a unit at its maximum output power. In this paper, priority list is based on fuel cost obtained from the average fuel cost of each unit operating at its maximum output power.The average full-load cost α of a unit is defined as the cost per unit of power ($/MW) when the unit is at its full capacity. When the fuel cost of unit is given by Eq. (2), α can be expressed as:(23)αi=fi(Pimax)Pimax=aiPimax+bi+ci⋅PimaxThe units are ranked by their α in ascending order. Thus, the priority list of units will be formulated based on the order of αi, in which a unit with the lowest αiwill have the highest priority to be dispatched.The obtained primary unit scheduling using BGSA may not satisfy the spinning reserve constraints (4). Therefore, the spinning reserve violations are repaired by heuristic search strategy. Meanwhile, in order to keep the randomness nature of GSA which is known as a stochastic searching algorithm, a constant pris defined as a utilization ratio of the priority list. The procedures for repairing the spinning reserve violations in primary unit scheduling are shown as follows:Step 1: Set t=1.Step 2: For all uncommitted units at hour t, calculate the average full-load cost αiusing formula (23). Sort them in ascending order of αito obtain a list SS(αi).Step 3: The amount of excessive spinning reserve at each hour is calculated by:(24)Rt=∑i=1NuitPimax−PDt−PRtStep 4: If Rt≥0, go to Step 6;Step 5: Generate a random number ξ∈[0,1]. If ξ<pr, commit an uncommitted unit in SS(αi) with the lowest αiand return to step 3; Otherwise, randomly commit an uncommitted unit in SS(αi) and return to step 3.Step 6: If t<T, t=t+1 and return to Step2. Otherwise, stop.Minimum up and down time constraints may be violated from the obtained unit schedule since they are neglected in the previous procedures. Therefore, they should be checked and repaired if the violations occur. The minimum up time of the units is usually violated at peak load levels at which the peak load hours are shorter than the minimum up time, thus “hills” exist. Similarly, the minimum down time is usually violated at low load levels at which the low load level hours are shorter than the minimum down time of the units, thus “valleys” exist. Heuristic search algorithm will be used to bank “hills” and fill “valleys”.To check for violations, on and off times of units are determined in advance. The continuously on/off times of the unit i up to hour t is calculated as follows:(25)Ti,ont=Ti,ont−1+1ifuit=10ifuit=0,Ti,offt=Ti,offt−1+1ifuit=00ifuit=1The details procedures to repair violations of the minimum up and down times constraints are as follows:Step 1: Calculate the duration on and off times of all units for the whole schedule time horizon using formula (25).Step 2: Set t=1.Step 3: Set i=1.Step 4: Ifuit=0anduit−1=1andTi,ont−1<Ti,up, then setuit=1.Step 5: Ifuit=0anduit−1=1andt+Ti,down−1≤TandTi,offt+Ti,down−1<Ti,down, then setuit=1.Step 6: Ifuit=0anduit−1=1andt+Ti,down−1>Tand∑j=tTuij>0, then setuit=1.Step 7: Update the duration on/off times for the unit i using formula (25).Step 8: If i<N, i=i+1 and return to step 4.Step 9: If t<T, t=t+1 and return to step 3. Otherwise, stop.Repairing the minimum up and down time constraints can lead to excessive spinning reserves, which is undesirable due to the high operation cost. We use heuristic search algorithm based on a priority list to decommit the redundant units due to the minimum up and down time repairing, thereby reducing the operating cost. Starting from the committed units with the lowest priority list (the highest average operating cost), the algorithm determines units that can be decommitted without violating the minimum up and down time and spinning reserve constraints until no unit can be decommitted. So in this process, the spinning reserve and minimum up and down time constraints must be checked before decommitting a unit.The details procedures for decommitment of excessive units are expressed as follows:Step 1: Set t=1.Step 2: Calculate the average full-load cost αiof each committed unit in hour t and sort the units in the descending order of αito obtain a list SS(αi). Let the first unit in SS(αi) be CUt.Step 3: The amount of excessive spinning reserve at hour t is calculated by(26)Rt=∑i=1NuitPimax−PDt−PRtStep 4: If Rtis less than the maximum generation power of CUt, go to step 6.Step 5: If decommitting CUtdoes not violate its minimum up/down time constraint, decommit CUtand update on/off status for all units.Step 6: Delete CUtfrom SS(αi).Step 7: If SS(αi) is not empty, let CUtbe the first unit in SS(αi) and return to step 3.Step 8: If t<T, t=t+1 and return to step 2. Otherwise, stop.In order to avoid premature convergence and improve the performance of BGSA for solving UC problem, this paper proposed two kinds of local mutation strategies based on deep analysis of the UC problem.As the Section 3 introduced, BGSA uses the internal interactions among the agents to search for optimal solution. The forces act on each other lead the agents move forward to a certain region which may contains better solutions, but the variety of the population becomes unsatisfactory in the later optimization, which may result in trapping into local optima. To relief the undesirable effects of these drawbacks, a single agent except the best one is randomly chosen to execute the mutation in each of the iteration. The chosen one updates its position according to the follow equation instead of Eq. (21). The special agent introduces new information to the population in each of the iteration and thus increases the population diversity.(27)xid(t+1)=0,ifrand<|tanh(vid(t+1))|xid(t),otherwiseAlthough the mutation introduced above can relief the bad effects of the shortcomings of the algorithm such as premature convergence and trapping into local optima in some degree, BGSA as a kind of intelligent optimization algorithm has its stochastic searching nature which may result in imperfect outcomes. To overcome the drawback, some further interventions should be brought in the BGSA as an effective tool to guide the population for better evolution and finally find better solution. In this paper, a substitution mutation strategy, which is based on deep analysis of the units’ characteristics and system constraints, has been proposed to act as this tool.As the Section 4.2 introduced, different units have their own characteristics and they are suggested to commit in their priority order. And generally larger capacity unit has a higher commitment priority. For the complex UC problem with strict constraints such as system spinning reverse constraints and minimum up and down time constraints, the stochastic searching nature of BGSA may result in algorithm trapping into local optimal solutions in which several small capacity units are committed but large ones uncommitted in certain time intervals. The commitment of several small capacity units instead of large ones will raise the operation cost. In order to solve this problem, those committed units with smaller capacity could be decommitted and replaced with certain numbers of uncommitted units which have larger capacity and higher priority order. In those processes, the minimum up and down time constraints, the spinning reverse constrains should be considered. The substitution mutation starts when the BGSA stops evolving for certain iterations. For a certain iteration of BGSA, the substitution mutation procedures can be described as follows:Step 1: Copy the information of the best agent to the worst one at current iteration, then choose one of them to execute the procedures as follows.Step 2: Sort the committed units in time t in the ascending order of αito obtain a priority list SU(αi) and sort the uncommitted units in time t in the descending order of αjto obtain a priority list SD(αj).Step 3: Choose the first unit j in SD(αj). If committing unit j violates its minimum down time constrains, go to step 9.Step 4: Choose the first unit i in SU(αi). If decommitting unit i violates its minimum up time constraints, go to step 7.Step 5: If substitute unit j for unit i violates the spinning reverse constraints in time t, stop; Otherwise, commit unit j and decommit unit i.Step 6: Decommiting excess units in time t according to the methods introduced in Section 4.5.Step 7: Delete unit i from SU(αi).Step 8: If SU(αi) is not empty, return to step 4.Step 9: Delete unit j from SD(αj).Step 10: If SD(αj) is not empty, return to step 3; Otherwise, stop.During the mutation, the variable t traverse in [1,T] as the iteration increase until the end of the optimization. That means in each of the later compute, only the best one is chosen to be the mutation agent. And at each of the iteration, the substitution is only happened in a certain time interval. However, the whole time interval will be traversed as the increase of iteration. The useful information in the mutation agent in each of the iteration will help the algorithm overstep the local optima and finally find better solutions.With the feasible UC schedule, classical equal Lambda-iteration method is used to solve the ELD problem in this paper. The ELD procedure is stopped when the tolerance, which indicates that the sum of all online units output minus the load demand, is less than the value given beforehand. Once the optimal values ofPitare found, the total generation production cost is computed by adding the operating cost of all units over the time horizon T. The total start-up cost is calculated by adding the start up costs of those units that change their states from 0 to 1.Lambda-iteration method for solving ELD pseudo-codes is listed as follows:begingiven a feasible solutionU=[uit]N×Tset toleranceτfor t=1 to T doset initial values for λ(t) and Δ(t)for i=1 to N dowhile (notε≤τ) dobegincalculatePi∗usingdfi(Pit)dPit=λ(t)calculatePitusingPit=min{max{Pi∗,Pimin},Pimax}calculateε=PDt−∑i=1NPituitif (ɛ<0) thenset λ(t)=λ(t)−Δ(t)elseset λ(t)=λ(t)+Δ(t)endifSet Δ(t)=Δ(t)/2endendforendforendThe procedures of the proposed BGSA method for solving UCP are shown as follows.Step 1: Initialization agents in the population as in Section 4.1.Step 2: Calculate priority list of units according to parameters of each unit as in Section 4.2.Step 3: Modify units’ status of agents in the population to satisfy the spinning reserve constraints as in Section 4.3.Step 4: Repair agents in the population for minimum up/down time violations as in Section 4.4.Step 5: Decommit units of each agent in the population to reduce excessive spinning reserve, which is result from minimum up/down times repairing, as the method introduced in Section 4.5.Step 6: Solve ELD problem using equal lambda-iteration method as introduced in Section 4.7.Step 7: Fitness evaluation of all agents. Calculate the fitness function value of each agent using the objective function (1) and evaluate each agent in the population.Step 8: Determination of gravitational constant, best and worst fitness. For all agents, best and worst fitness in each of the iteration are determined using Eqs. (8) and (9). The gravitational constant at t iteration is determined according to Eq. (12). Gravitational constant adjusts the accuracy of the search and gravitational constant reduces as the iteration increases.Step 9: Update the gravitational and inertial masses. In this step, the gravitational and inertial masses are updated as in (13)–(15).Step 10: Calculate the total force. At the specific t iteration, the gravitational force and total force are described according to (16) and (17).Step 11: Calculate the acceleration and update velocity. In this step, the acceleration and updating velocity of the ith agent at t iteration in dth dimension are calculated according to Eqs. (18) and (19).Step 12: Update the position of the agents. The next positions of the normal agents are updated according to (21) in BGSA, while the position of the mutation agent which introduced in Section 4.6.1 should be updated according to Eq. (27).Step 13: If the BGSA has stopped evolving for certain iterations, apply the mutation strategy introduced in Section 4.6.2 to the following iterations.Step 14: If the maximum iteration number is reached, then go to Step 15. Otherwise, increase iteration number and go back to Step 3.Step 15: Stop and the optimal solution of UCP is obtained from the agent in the population that generated the least total production cost.In order to verify the feasibility and effectiveness of the proposed method (BGSA) for solving UCP, the proposed BGSA is tested on different system sizes based on a basic system of 10 units from literature [13]. The scheduling time horizon T is chosen as one day with 24 intervals of one hour each. The spinning reserve requirement is set to be 10% of total load demand. For the systems of 20, 40, 60, 80 and 100 units, the basic 10-unit system is duplicated and total load demands are adjusted proportionally to the system size. The proposed BGSA method is coded in visual C++ 6.0 and implement on a Intel 2.26GHz CPU with RAM 2GB personal computer. The demand and generating unit data of the test system are given in Tables 1 and 2.BGSA method is applied to solve UCP for several test system with the number of units ranging from 10 to 100. To successfully implement the BGSA for solving the UCP problem, the optimum settings of different parameters are required to be determined. Different trials have been performed for this test system. Based on the trials, the following parameters are found to be best for the optimal performance of the BGSA algorithm: population size takes 20, the initial gravitational constant G0 takes 220, the maximal iterative generations is 1000. Under the chosen parameters, we run BGSA 30 times from different initial populations in succession and select the best result as the final optimization solution. In the meantime, for each test system we also performed BGSA 30 trials from different initial populations in succession to examine the variation in their total production costs. Test results are shown in Table 3. The best, worst, and average total production costs findings of the BGSA are obtained together with their standard deviation. From Table 3, the average production costs of 30 trials generated variation in a small range and the standard deviation are small and tolerable. Simultaneously, average production costs are near to the middle position between their maximum and minimum values. So, it is clear that solutions are not biased and they are equally distributed between the best and the worst solutions. To see the result visually, the distribution of the best solutions are shown in Figs. 2–7. The optimal solution derived by the proposed algorithm for 10-unit system is shown in Table 4.In the meantime, we examine the variation in the total fuel cost of test system with evolutionary generation numbers. For different test systems, the convergence processes of the best solution in the 30 trials are listed in Figs. 8–13.From Figs. 8–13, it is easy to see the BGSA has satisfactory convergence and the algorithm escaped from the local optima at the later iterations. It proved that the stochastic searching mechanism of BGSA, which is conducted by gravitational forces among agents, is efficient. And the proposed mutation strategies improved the performance of BGSA.To validate the results obtained with the BGSA, we compare the performance of the BGSA to those of other approaches with respect to the best total production cost. The results were reported in literature when the same problem were solved using binary-coded GA (BCGA) [13], Lagrangian relaxation and memetic algorithm (LRMA) [18], integer-coded GA (ICGA) [13], bacterial foraging (BF) [23], particle swarm optimization combined with the Lagrangian relaxation method (LRPSO) [34], enhanced simulated annealing algorithm (ESA) [20], memetic algorithm (MA) [18], Lagrangian relaxation (LR) [15], greedy random adaptive search procedure (GRASP) [21], genetic algorithm (GA) [11], local search metaheuristics (LSM) [22], stochastic priority list (SPL) [1], evolutionary programming (EP) [17], matrix real-coded genetic algorithm (MRCGA) [16], proposed genetic algorithm (PGA) [12], genetic algorithm based on unit characteristic classification (GAUC) [14], binary differential evolution (BDE) [24], improved particle swarm optimization algorithm (IPSO) [27], binary clustered particle swarm optimization (BCPSO) [32]. Table 5provides comparison of the best total production cost from the BGSA method to those of other methods.From Table 5, it is clearly shown that the total operation costs achieved by the proposed improved BGSA is the best in terms of the test systems of 10, 40, 60, 80 units. For the test systems with 20 units and 100 units, the result of BGSA is second best. It is obvious that the proposed improved BGSA is superior to the mentioned methods.To observe the rate of increase for CPU execution time of the BGSA, the CPU execution time of the BGSA method versus the problem size of the UC problem is plotted in Fig. 14. From Fig. 14, it is noticed that the rate of the increase in the CPU execution time of the BGSA is roughly a linear function of the problem size. That means the CPU execution time of the BGSA is not increasing exponentially with respect to the system size of UCP, which is favorable for large-scale UCP implementation.Direct comparison of the computational time of the proposed BGSA approach with respect to other methods in different literatures is not straightforward as these results have been achieved on a diverse array of computers; instead, Table 6shows the normalized execution time relative to that of 10 generating units for different methods (where data is provided) including BGSA. Using the scaled CPU time in Table 6, the computational times of methods are relatively estimated for the same base, in which a method with the lowest scaled CPU time is the fastest one for solving the same problem and vice versa. This analysis confirms that BGSA is the one amongst the methods that scale well with the increasing number of generating units.As the results shown above, the total production costs of the BGSA are demonstrated to be less expensive than those of other methods on generating unit systems. Obviously, the BGSA vastly improves performance than other methods in terms of both solution quality and CPU times especially on the large-scale UCP. The proposed BGSA converges to the solution at a faster rate than the other methods reported in the literature.

@&#CONCLUSIONS@&#
In this paper, we proposed an improved binary gravitational search algorithm to solve unit commitment problem. The proposed method is a combination of discrete binary gravitational search algorithm with Lambda-iteration method, which is enhanced by priority list to handle the spinning reserve constraints and a heuristic search strategy to handle minimum up/down time constraints. In addition, local mutation strategies are raised to avoid algorithm trapping into local optima and improve the performance of BGSA .The simulation results for solving several UCP instances with the number of units in the range of 10–100 shows that the proposed method is effective for solving UCP. The total production costs over the scheduled time horizon achieved by the proposed method are less expensive than other optimization methods reported in the literature. Moreover, the CPU times of the proposed method increase linear with the UCP system size, which is favorable for large-scale implementation.