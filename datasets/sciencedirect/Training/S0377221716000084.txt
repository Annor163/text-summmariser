@&#MAIN-TITLE@&#
Integer programming formulations for the elementary shortest path problem

@&#HIGHLIGHTS@&#
We compare integer programming formulations for the elementary shortest path problem.We describe IP formulations with exponentially-many SECs and MIP extended formulations of polynomial size.We study the polyhedral structure of the two strongest formulations and prove their LP bounds are equivalent.We report computational results for the LP relaxations and for the full branch-and-cut.Formulation with dynamically generated cutset inequalities is the most effective.

@&#KEYPHRASES@&#
Integer programming,Elementary shortest path,Branch-and-cut,Extended formulations,Subtour elimination constraints,

@&#ABSTRACT@&#
Given a directed graphG=(V,A)with arbitrary arc costs, the Elementary Shortest Path Problem (ESPP) consists of finding a minimum-cost path between two nodes s and t such that each node of G is visited at most once. If negative costs are allowed, the problem isNP-hard. In this paper, several integer programming formulations for the ESPP are compared. We present analytical results based on a polyhedral study of the formulations, and computational experiments where we compare their linear programming relaxation bounds and their behavior within a branch-and-cut framework. The computational results show that a formulation with dynamically generated cutset inequalities is the most effective.

@&#INTRODUCTION@&#
Given a directed graphG=(V,A)and arc costs cijfor each (i, j) ∈ A, the shortest path problem consists of finding a minimum-cost path between two nodes s and t.Often, an implicit assumption is that such path has to be elementary. A path is elementary if it does not visit any node more than once, i.e., if it does not contain subtours. When the costs cijinduce no negative cycles on G, the problem can be solved efficiently via ad-hoc polynomial time algorithms, like Bellman–Ford’s or Dijikstra’s algorithm (if cij≥ 0). However, if negative cycles do arise, subtours must be explicitly prevented, leading to the so-called Elementary Shortest Path Problem (ESPP).The ESPP is clearlyNP-hard due to a simple reduction from the Hamiltonian path problem. Its equivalent maximization counterpart, where one seeks a longest path over a graph with positive cycles, has been vastly discussed in the literature, usually referred to as the Longest Path Problem (LPP). Björklund, Husfeldt, and Khanna (2004) prove that the LPP is hard to approximate on unweighted directed graphs within a ratio ofn1−ϵfor any ϵ, unlessP=NP. For undirected graphs, approximation algorithms are described by, e.g., Karger, Motwani, and Ramkumar (1997) and Gabow (2007).Related to the ESPP are variants of the Travelling Salesman Problem (TSP) with profits, such as the Prize Collecting TSP (Balas, 1989), the Orienteering Problem (Vansteenwegen, Souffriau, & Oudheusden, 2011) and the Capacitated Profitable Tour Problem (Jepsen, Petersen, Spoorendonk, & Pisinger, 2014), that involve prizes on each node, which can be visited at most once.While an interesting problem in its own right, the ESPP also arises in the pricing subproblems of branch-and-price algorithms (Amaldi, Coniglio, & Taccari, 2014). Often, the pricing phase in Vehicle Routing Problems (VRP) involves resource-constrained variants of the elementary shortest path problem (ESPPRC) (Irnich & Desaulniers, 2005). These problems are usually solved with fast dynamic programming-based label algorithms, e.g., see Boland, Dethridge, and Dumitrescu (2006); Feillet, Dejax, Gendreau, and Gueguen (2004); Righini and Salani (2006). It is possible to adapt this kind of approach to the unconstrained ESPP by considering an artificial resource for each node which is consumed when the node is visited, and imposing that no more than one unit of each resource is used, as already proposed by Beasley and Christofides (1989); Boland et al. (2006). However, this is a rather weak constraint, in the sense that it allows for very long paths, so that approaches based on label algorithms become very time consuming, as noted by Drexl and Irnich (2014). This limitation is already highlighted for the ESPP with a capacity constraint by Jepsen, Petersen, and Spoorendonk (2008b), that propose a branch-and-cut algorithm that significantly outperforms label algorithms. In the context of a branch-and-price algorithm, where the ESPP is solved repeatedly in the pricing phase, another desirable feature of an integer programming approach is its flexibility, that allows one to easily incorporate general branching decisions or valid inequalities (e.g., the subset-row inequalities by Jepsen, Petersen, Spoorendonk, and Pisinger (2008a)) that would change the structure of the pricing subproblem. These reasons motivate the study of integer programming techniques for the ESPP.Several branch-and-cut approaches can be found in the literature for related problems (Bauer, Linderoth, & Savelsbergh, 2002; Fischetti, Gonzalez, & Toth, 1998; Gendreau & Laporte, 1998; Jepsen et al., 2014). However, not much previous work has appeared on integer programming approaches tailored specifically for the ESPP. Ibrahim, Maculan, and Minoux (2009) provide computational results on the linear programming (LP) bounds of a flow-based extended formulation, but give no details on its behavior in a branch-and-bound algorithm. Another extended formulation is proposed by Haouari, Maculan, and Mrad (2013). Drexl and Irnich (2014) describe a branch-and-cut approach and compare its efficiency with the extended formulation by Ibrahim et al. (2009), while Drexl (2013) studies the efficient separation of subtour elimination constraints for the ESPP.In the context of integer programming, the choice of a formulation is crucial for the effectiveness of methods based on branch-and-cut. In this article we present a thorough comparison between different formulations for the ESPP, which are described in detail in Section 2. We include integer programming formulations with exponentially many subtour elimination constraints, and mixed-integer programming extended formulations with a polynomial number of variables and constraints. In Section 3 we provide some analytical results, including a proof of equivalence between the polyhedra described by the two strongest formulations. Section 4 reports computational experiments where we compare the LP relaxation bounds and branch-and-cut results. Finally, in Section 5, we give some concluding remarks and discuss further research topics.Let us consider a directed graphG=(V,A)with the set of nodes V and the set of arcs A. Let n and m be the cardinality of V and A, respectively. A path is a sequence of nodesv1,…,vk,and is said to be elementary if no node appears in the path more than once. A cycle, or tour, is a path withv1=vk. We denote byδ+(i)andδ−(i)the set of outgoing and incoming arcs of node i, byδ+(S)andδ−(S)the arcs leaving/entering the set S ⊆ V, and by A(S) the set of arcs with both ends in S ⊆ V. Let us also define Vi≔ V∖{i}, Vij≔ V∖{i, j}, and, for any arc set B ⊆ A, we define x(B) ≔ ∑b ∈ Bxb. In all the formulations, it is assumed w.l.o.g. that|δ−(s)|=|δ+(t)|=0.A standard integer programming formulation to determine a shortest path from node s to node t is the following:(1)min∑(i,j)∈Acijxij(2)∑(i,j)∈δ+(i)xij−∑(j,i)∈δ−(i)xji={1ifi=s−1ifi=t0else∀i∈V(3)∑(i,j)∈δ+(i)xij≤1∀i∈V(4)xij∈{0,1}∀(i,j)∈A,wherecij∈Rare the arc costs, and xijare binary arc variables that take value 1 if the arc (i, j) belongs to the path. Constraints (2) are flow conservation constraints, while Constraints (3) ensure that the outgoing degree of each node is at most one. When the costs cijinduce negative cycles on G, i.e., there is a subtour such that the total cost of its arcs is negative, this system of inequalities is not sufficient to guarantee the elementarity of the path. Thus, additional constraints (and possibly variables) are necessary to prevent subtours.Notice that the crucial difference with respect to problems in which the path has to be Hamiltonian is the absence of the degree constraints:∑(i,j)∈δ+(i)xij=∑(j,i)∈δ−(i)xji=1∀i∈Vst.We now describe different sets of constraints and variables that can be added to Formulation (1)–(4) to obtain a valid integer programming formulation for the ESPP.For the TSP, success has been achieved with strong formulations with exponentially many constraints. It is possible to write a formulation for the ESPP based on the classical Dantzig–Fulkerson–Johnson subtour elimination constraints (Dantzig, Fulkerson, & Johnson, 1954), adding to the basic formulation (1)–(4) the following inequalities:(5)∑(i,j)∈A(S)xij≤|S|−1∀S⊆Vst,|S|≥2.In each subset S, subtours are prevented ensuring that the number of arcs in S which are selected is smaller than the number of nodes in S. This formulation includes O(m) variables and O(2n) constraints.For Hamiltonian path problems, due to the degree constraints, the DFJ subtour eliminations constraints can be equivalently written in the cutset form:(6)∑(i,j)∈δ+(S)xij≥1∀S⊂V,|S|≥2.For the ESPP, Constraints (6) are valid only for subsets S with s ∈ S and t ∉ S. Moreover, they are not sufficient to prevent all subtours.Example 1Consider the solution depicted in Fig. 1, assuming it is a complete graph and that only the arcs withxij=1are drawn. The solution does not violate any inequality (6) for any set S containing s, sincex(δ+(S))=1for any such S, although it contains a (disconnected) subtour. On the other hand, notice that the inequality (6) is not valid for S′, although it does not contain subtours, due tox(δ+(S′))=0.DFJ Constraints (6) can be adapted to the ESPP by replacing the constant right-hand side with a variable expression. This approach is used for a symmetric version of ESPPRC by Jepsen et al. (2008b) and applied to the asymmetric ESPP by Drexl and Irnich (2014). Similar subtour elimination constraints are also used in branch-and-cut algorithms for the VRP (Naddef & Rinaldi, 2002) or variants of the TSP with profits (Fischetti et al., 1998; Jepsen et al., 2014). We refer to them as generalized cutset inequalities (GCS):(7)∑(i,j)∈δ+(S)xij≥∑(k,j)∈δ+(k)xkj∀k∈S,∀S⊆Vst,|S|≥2.Constraints (7) prevent subtours by ensuring that, for each subset S, the number of selected arcs leaving S is not smaller than the number of selected arcs outgoing from any node in S. In an integer solution, this means that the cut induced by S must contain at least one arc if at least one node in S belongs to the s–t path, while, if S does not contain any node in the s–t path, the constraint is the trivial inequality. The number of variables in the formulation is O(m), while the number of constraints is O(n2n).Constraints (7) can be shown to be equivalent to a strengthened version of (5).Proposition 2Constraints(7)can be rewritten as:(8)∑(i,j)∈A(S)xij≤∑i∈S∖{k}∑(i,j)∈δ+(i)xij∀k∈S,∀S⊆Vst,|S|≥2.For all k ∈ S,x(δ+(k))≤x(δ+(S))=x(δ+(S))+x(A(S))−x(A(S))=∑i∈Sx(δ+(i))−x(A(S)).□These inequalities can be interpreted as imposing that the number of selected arcs in a subset S is strictly smaller than the number of nodes in S that belong to the s–t path.To derive an extended formulation à la Miller, Tucker, and Zemlin (1960) (hereafter MTZ) it is enough to introduce, for each node, an auxiliary variable that can be viewed as the position of the node along the path and a constraint for each arc:(9)tj≥ti+1+(n−1)(xij−1)∀(i,j)∈A,i≠s,j≠t.For the Asymmetric TSP (ATSP), this formulation is well-known to give poor linear relaxation bounds. However, it is very compact, as it requires only O(m) additional constraints and O(n) auxiliary variables.From the following nonlinear reformulation of the MTZ formulation:(10)tjxij=(ti+1)xij∀(i,j)∈A,i≠s(11)tjxsj=xsj∀(s,j)∈δ+(s)(12)1≤ti≤n−1i∈Vs,Haouari et al. (2013) apply a partial Sherali–Adams reformulation-linearization technique (Sherali & Adams, 1990) to obtain the following stronger formulation for the ESPP:(13)αij=βij+xij∀(i,j)∈A(14)xsj+∑(i,j)∈δ−(j)i≠sαij−∑(j,i)∈δ+(j)βji=0∀j∈Vt,(s,j)∈δ+(s)(15)∑(i,j)∈δ−(j)αij−∑(j,i)∈δ+(j)βji=0∀j∈Vst,(s,j)∉δ+(s)(16)αij≤(n−1)xij∀(i,j)∈A,i≠s(17)xij≤βij∀(i,j)∈A,i≠s(18)αij≥0,βij≥0∀(i,j)∈A,where the bilinear terms are linearized introducing the variables αij≔ tjxijand βij≔ tixijand Constraints (16)–(17). On a given selected arc (i, j) ∈ A, the variables βijand αijcan be interpreted respectively as the position of the nodes i and j along the path. This extended formulation requires O(m) constraints and O(m) auxiliary variables.A formulation similar to the single-flow ATSP formulation of Gavish and Graves (1978) can be obtained introducing an auxiliary flow q to be delivered to the nodes belonging to the s–t path. In addition, variables zkare added to the formulation:(19)qij≤(n−1)xij∀(i,j)∈A(20)∑(s,j)∈δ+(s)qsj=∑k∈Vszk(21)∑(i,k)∈δ−(k)qik−∑(k,j)∈δ+(k)qkj=zk∀k∈Vs(22)∑(i,k)∈δ−(k)xik=zk∀k∈Vs(23)qij≥0∀(i,j)∈A(24)zk∈{0,1}∀k∈Vs.Constraints (19) impose that the auxiliary flow is positive only over the arcs wherexij=1. The auxiliary flow leaving from the node s has value equal to the number of nodes that are reached by the s–t path. Constraints (21) ensure that the balance of the auxiliary flow on each node is equivalent to zk, which, according to Constraint (22), is either 1, if node k is in the s–t path, or 0 otherwise.An extension of the single-flow formulation is obtained by disaggregating the auxiliary flow inton−1unitary flows. Subtours are prevented by enforcing one unit of a distinct auxiliary flow from s to each node that belongs to the s–t path:(25)qijk≤xij∀k∈Vs,(i,j)∈A(26)∑(i,j)∈δ+(i)qijk−∑(j,i)∈δ−(i)qjik={zkifi=s−zkifi=k0else∀i∈V,∀k∈Vs(27)∑(i,k)∈δ−(k)xik=zk∀k∈Vs(28)∑(s,j)∈δ+(s)xsj=1(29)∑(i,t)∈δ−(t)xit=1(30)qijk≥0∀k∈Vs,(i,j)∈A(31)zk∈{0,1}∀k∈Vs.The formulation includes O(nm) additional variables and constraints. This extended formulation is introduced, for the ESPP, by Ibrahim et al. (2009), and it is very similar to classic multi-commodity flow formulations for the ATSP proposed by Wong (1980) and Claus (1984).

@&#CONCLUSIONS@&#
We have analyzed integer programming formulations for the ESPP, including formulations not yet appeared in the literature.The polyhedral results in Section 3 provide a partial hierarchy among the ESPP formulations, and prove that the strong extended formulation MCF has a projection on the space of the arc variables which is equivalent to the polytope of the GCS formulation, that has exponentially many subtour elimination constraints.It is also important to understand how effective the formulations are from a computational point of view. In this regard, we report a set of extensive computational experiments, suggesting that the extended formulations are inferior for all practical purposes, and the dynamic separation of subtour elimination constraints appears to be the best option when tackling the ESPP as an integer program. The GCS approach with the strong component-based separation procedure is able to solve small-sized instances in a few seconds and medium-sized instances, with up to 1000 nodes, within a minute, but it is still not sufficient to solve large-scale problems. When the implementation of a separation procedure is not possible or convenient, formulation SF is probably the best choice.It seems likely that the development of good primal heuristics and additional strong valid inequalities, possibly extended from of the ATSP (e.g., 2-matching or comb inequalities), might further speed up the computing times and allow the solution of larger-sized instances. It might also be useful to borrow techniques from the typical approaches used for the ESPPRC, such as a preprocessing phase with the aim of reducing the search space.