@&#MAIN-TITLE@&#
A novel meta-heuristic based method for deriving priorities from fuzzy pairwise comparison judgments

@&#HIGHLIGHTS@&#
The proposed method derives crisp weights from fuzzy comparison matrices. Therefore, the crisp weights obviate the need of additional aggregation and ranking procedures.The proposed method is superior to five well known existing methods from the viewpoint of satisfaction of initial judgments by the obtained priority vector.The proposed method is invariant to the specific form of the fuzzy sets used to represent the judgments.The proposed method for the first time considers judgments represented by triangular/trapezoidal shaped fuzzy number.

@&#KEYPHRASES@&#
Priority vector,Genetic algorithm,Triangular fuzzy number,Trapezoidal fuzzy number,Triangular shaped fuzzy number,Trapezoidal shaped fuzzy number,

@&#ABSTRACT@&#
This paper proposes a new method to derive the priority vector from fuzzy pairwise comparison matrices. Unlike several known methods, the proposed method derives crisp weights from consistent and inconsistent fuzzy comparison matrices. Therefore, the crisp weights obviate the need of additional aggregation and ranking procedures. To derive the priority vector, a Modified Fuzzy Logarithmic Least Square Model (MFLLSM) is proposed. In order to solve the MFLLSM, a framework based on genetic algorithm is proposed. In the proposed framework, a heuristic algorithm of population initialization, a heuristic algorithm for simulating fuzzy numbers and a heuristic algorithm of fitness evaluation are proposed.The solution of the prioritization problem requires finding priorities such that their ratio approximately satisfies the initial judgments. Computational results reveal the superiority of the proposed method in comparison with five well known methods of literature from the viewpoint of satisfaction of initial judgments by the obtained priority vector. It is shown by ten different examples that the deviation of the priorities ratio from initial judgments in the proposed method is less than five existing methods of literature. In addition, unlike several methods of literature, the proposed method considers fuzzy judgments represented by both triangular and trapezoidal fuzzy numbers. Furthermore, the proposed method for the first time considers judgments represented by triangular shaped fuzzy numbers and trapezoidal shaped fuzzy numbers which are discussed in the paper.

@&#INTRODUCTION@&#
Analytical Hierarchy Process (AHP) [1] has been extensively used as a Multi Criteria Decision-Making (MCDM) tool or a weight estimation technique in many areas such as selection, evaluation, planning and development, decision making, forecasting, and so on [2].Triantaphyllou and Lin [3] summarized the following advantages for AHP: (1) AHP is easier to understand and can effectively handle both qualitative and quantitative data; (2) the AHP can also help decision makers to organize the critical aspects of a problem in a hierarchical structure, making the decision process easy to handle; (3) pairwise comparisons in the AHP are often preferred by the decision makers, allowing them to derive weights of criteria and scores of alternatives from comparison matrices rather than quantify weights/scores directly; (4) AHP can be combined with well-known operation research techniques to handle more difficult problems; (5) it can measure the consistency in the decision maker's judgments. It should be noted that AHP is not the only available method to measure consistency of preferences. Herrera-Viedma et al. [4] proposed a new characterization of the consistency property defined by the additive transitivity property of the fuzzy preference relations. Using this new characterization they proposed a method for constructing consistent fuzzy preference relations from a set of n−1 preference data. They stated that applying this method it is possible to assure better consistency of the fuzzy preference relations provided by the decision makers, and in such a way, to avoid the inconsistent solutions in the decision making processes. Fedrizzi and Giove [5] proposed a new method for calculating the missing elements of an incomplete matrix of pairwise comparison values for a decision problem. The matrix is completed by minimizing a measure of global inconsistency, thus obtaining a matrix which is optimal from the point of view of consistency with respect to the available judgements. Chiclana et al. [6] presented a short discussion on dealing with incomplete information in decision making process and proposed a new estimation method of missing values in an incomplete fuzzy preference relation which is based on the modeling of consistency of preferences via a representable uninorm. Chiclana, et al. [7] analyzed two methods for calculating missing values of an incomplete reciprocal fuzzy preference relation [5,8]. They stated that the underlying concept driving both methods is the additive consistency property and as a result they claimed that both methods should be seen as complementary rather than competitors in their application. Chiclana et al. [9] stated that consistency of preferences is related to rationality, which is associated with the transitivity property. Many properties suggested to model transitivity of preferences are inappropriate for reciprocal preference relations. Therefore, a functional equation was put forward in their paper to model the “cardinal consistency in the strength of preferences” of reciprocal preference relations.The traditional AHP requires exact judgment. However, due to the complexity and uncertainty involved in real word decision problems, it is sometimes unrealistic or even impossible to require exact judgments. It is therefore more natural or realistic that a decision maker (DM) is allowed to provide fuzzy judgments instead of precise comparisons [10].However, there are lots of methods dealing with comparison matrices with exact judgments. Grzybowski [11] proposed new optimization techniques for deriving priority weights from comparison matrices. In his proposed approach, the constrained optimization models are based on the same idea which underlies the right eigenvalue method which was proposed by Saaty [12]. Hovanov et al. [13] stated that the problem of deriving weights from pairwise comparison matrices has been treated extensively in the literature, but most of the results are devoted to the case when the matrix under consideration is reciprocally symmetric (i.e., the i, jth element of the matrix is reciprocal to its j, ith element for each i and j). However, there are some applications of the framework when the underlying matrices are not reciprocally symmetric. Therefore, they employed both statistical and axiomatic arguments to derive weights from such matrices. Dong et al. [14] presented two performance measure algorithms to evaluate the numerical scales and the prioritization methods. Using these performance measure algorithms, they compared some common numerical scales and the prioritization methods. Grzybowski [15] proposed a new goal programming model for deriving priority vectors and for measurement of consistency. In his approach the idea of goal programming is combined with the idea of Saaty's eigenvalue method. Bozóki et al. [16] studied the extension of the pairwise comparison matrix to the case when only partial information is available: for some pairs no comparison is given and they studied the uniqueness problem of the best completion for two weighting methods, the Eigenvector method and Logarithmic Least Squares method. Huo et al. [17] proposed new parametric methods to determine a family of priority vectors in an analytic hierarchy process, pointing out the logical relation of elements in the comparative matrix. To derive the priorities of alternatives, a series of theorems and mathematical programming models is given based on pairwise comparison matrix. It should be noted that the proposed method of the present paper regards the uncertainty of judgments and for this purpose it considers judgments represented as fuzzy sets.A number of methods have been developed to deal with fuzzy comparison matrices. The existing methods mainly differ on the employed fuzzy judgments or the developed fuzzy prioritization method [18]. Van Laarhoven and Pedrycz [19] suggested a fuzzy logarithmic least squares method (LLSM) to obtain triangular fuzzy weights from a triangular fuzzy comparison matrix. Boender et al. [20] found that the normalization method in the fuzzy LLSM destroyed the optimality of the fuzzy weights and therefore presented a modification to the normalization method. Kwiesielewicz [21,22] presented a generalized pseudoinverse approach to solve the fuzzy LLSM, which decomposed the fuzzy least squares problem into a crisp modal values problem and an interval analysis problem. Wang et al. [10] revisited the fuzzy logarithmic least square method and pointed out its incorrectness in the normalization of local fuzzy weights, infeasibility in deriving the local fuzzy weights of a fuzzy comparison matrix when the lower bound value of a non-normalized fuzzy weight turns out to be greater than its upper bound value, uncertainty of local fuzzy weights for incomplete fuzzy comparison matrices, and unreality of global fuzzy weights. Therefore, they suggested a modified Fuzzy LLSM to tackle all these problems. Buckley [23] proposed fuzzy priorities of comparison ratios similar to the proposed approach of Wagenknecht and Hartmann [24], and Buckley employed trapezoidal membership functions, claiming that such numbers are more easily understood by experts. Chang [25] introduced an extent analysis method for the synthetic extent values of the pairwise comparisons and applied a simple arithmetic mean algorithm to find crisp priorities from fuzzy comparison matrices, whose elements are represented by triangular fuzzy numbers. Zhu et al. [26] made a discussion on the extent analysis method and improved the formulation of possibility degree for comparing two triangular fuzzy numbers. The improved formula included the case that two fuzzy numbers do not intersect with each other and defined the degree of possibility of the smaller fuzzy number over the bigger one as zero. These methods have some characteristics.Firstly, they derive priorities from fuzzy comparison matrices. However, the approach of constructing fuzzy reciprocal matrices, taken by analogy from the crisp prioritization methods leads to some problems, as illustrated for Triangular Fuzzy Numbers (TFNs) in [27] and illustrated for Trapezoidal Fuzzy Numbers (TrFNs) in the next section of the present paper.Secondly, except for Chang [25] and Zhu et al. [26], all these methods derive fuzzy priorities and, after aggregating, the final scores of the alternatives are also represented as fuzzy numbers or fuzzy sets. Due to the large number of multiplication and addition operations, the resulting fuzzy scores have wide supports and overlap over a large range [18]. As shown by [20,28], the normalization procedure used in some of these methods may even result in irrational final fuzzy scores, where the normalized upper value is less than the normalized mean value, which is less than the normalized lower value.Thirdly, as it explained in [18], the fuzzy prioritization methods mentioned above require an additional fuzzy ranking procedure in order to compare the final fuzzy scores. The different ranking procedures, however, often give different ranking results [29].More recently, some methods are proposed which derive priority weights from fuzzy pairwise comparison matrices. Xu and Chen [30] stated that how to derive the interval priority weights from an interval fuzzy preference relation is an interesting and important issue in decision making with interval fuzzy preference relations. They proposed some linear programming models for deriving the priority weights from various interval fuzzy preference relations. Wang et al. [31] based on the definition of additive consistent fuzzy preference relations developed a new approach to obtain priority weights. They proposed linear programming models for generating interval priority weights from additive consistent or inconsistent interval fuzzy preference relations. Genç et al. [32] proposed an approach to discover whether an interval fuzzy preference relation is consistent or not, and to derive interval priority vector of a consistent interval fuzzy preference relation. Lan et al. [33] provided the relations between a multiplicative consistent interval fuzzy preference relation and an additive consistent interval fuzzy preference relation. Based on the new relations, they proposed a new method to derive interval weights by transforming a multiplicative consistent interval fuzzy preference relation into an additive consistent interval fuzzy preference relation, collecting additive consistent information, transforming back into multiplicative consistent information and calculating the interval weights. Xu [34] focuses on the investigation of consistency of interval fuzzy preference relations. He first established a quadratic programming model by minimizing all the deviations of individual interval fuzzy preference relations and collective interval fuzzy preference relation, from which an exact solution can be found to derive the importance weights of experts. Then, he gave two approaches to constructing additive and multiplicative consistent interval fuzzy preference relations, respectively, and shows the relationship between the consistency of individual interval fuzzy preference relations and the consistency of collective interval fuzzy preference relation. Wang and Chen [35] in order to alleviate inconsistencies applied fuzzy linguistic preference relations to construct a pairwise comparison matrix with additive reciprocal property and consistency. They reviewed the fuzzy AHP method, and then proposed fuzzy linguistic preference relations method. The methods mentioned above obtain fuzzy priorities; therefore, they require an additional fuzzy ranking procedure in order to compare the final fuzzy scores. As explained in [18] the different ranking procedures, however, often give different ranking results, especially for fuzzy priorities with wide overlap over a large range.To overcome the shortcomings of some of the fuzzy prioritization methods, Mikhailov [27] developed a fuzzy preference programming (FPP) method for deriving crisp priorities from fuzzy comparison judgments that eliminates some of the drawbacks of the existing fuzzy prioritization methods. This approach does not require the construction of complete fuzzy comparison matrices and it can derive crisp priorities from an incomplete set of fuzzy judgments. The proposed approach is also invariant to the specific form of the fuzzy sets used to represent the judgments. By using α-cuts, the initial fuzzy judgments are transformed into a series of interval judgments. The FPP method is employed to transform the prioritization problem into a fuzzy linear programming which can derive priorities from the interval judgments, corresponding to each α-cuts level, thus eliminating the need for an additional fuzzy ranking procedure. An aggregation process of the optimal priorities derived at the different α-level is also needed for obtaining overall crisp scores of the prioritization elements. However, the steps in the FPP method are complicated from a computational point of view [18,27]. Furthermore, determining different α-cuts level and different tolerance parameters affects the final priority vector [27]. In order to avoid some of these steps, Mikhailov proposed a non-linear FPP for prioritization which can find directly crisp values of priorities from a set of comparison judgments, represented as only triangular fuzzy numbers. He stated that in contrast to the linear FPP, which is linear and can be solved using the simplex method, the solution of the non-linear FPP needs some appropriate numerical methods for non-linear optimization to be employed because there is non-linearity in constraints of the model [27]. Moreover, it is shown in [27] that if the fuzzy judgments are skewed or inconsistent, the results of the linear-FPP and non-linear FPP are different.More recently, Javanbarg et al. [18] proposed a method which derives crisp weights from consistent and inconsistent fuzzy comparison matrices. The Javanbarg et al. [18] method transforms a fuzzy prioritization problem into a constrained non-linear optimization model. They applied an improved particle swarm optimization (PSO) to solve the optimization model. The method of Javanbarg et al. [18] like the non-linear FPP method of [27] finds crisp values of priorities from a set of comparison judgments, represented as only triangular fuzzy number. In other words, the non-linear FPP method of [27] and also method of [18] cannot consider judgments represented by the other types of fuzzy numbers or fuzzy sets except for triangular fuzzy numbers.This idea – deriving crisp priorities from fuzzy judgment matrices – shows a new way to deal with the prioritization problem from fuzzy reciprocal comparisons in the fuzzy AHP [18].In order to overcome some of the shortcomings of the prioritization methods above, this paper proposes a prioritization method, which derives exact priorities from consistent and inconsistent fuzzy comparison matrices. Since the proposed method is based on simulating the vague judgments, it is invariant to the specific form or the shape of the fuzzy sets. In other words, the proposed method can consider judgments represented by symmetric or non-symmetric TFN/TrFN, symmetric or non-symmetric triangular shaped fuzzy number (TSFN)/trapezoidal shaped fuzzy number (TrSFN) and interval value fuzzy set. This property provides opportunity for solving prioritization problems with mixed types of comparison judgments (as it is illustrated in Section 7.3), such as fuzzy sets of different forms and intervals.It should be noted that the weights role of elements is vital in AHP. In fact, inappropriate weights of elements may results in inaccuracy of ranking of alternatives as it is illustrated in [10]. Therefore, an inappropriate method of prioritization may lead to a wrong decision to be made about the rank of each alternative.This paper unlike the existing methods illustrates its merit by comparing the obtained priority vector of the proposed method with five well known methods of literature from the viewpoint of satisfaction of initial judgments by the obtained priority vector.This paper is organized as follows: Section 2 discusses the preference representation formats, Section 3 explains the shortcoming of constructing fuzzy reciprocal matrices in some existing methods, Section 4 provides the proposed fuzzy optimization model, in Section 5 the proposed algorithm of fuzzy number simulating is presented, Section 6 provides the proposed algorithm to obtain priority vector of fuzzy comparison matrices, in Section 7 some numerical examples are presented to illustrate the proposed method and to show the superiority of the proposed method over some of the existing methods, Section 8 concludes the paper.To reach a decision, experts have to express their preferences by means of a set of evaluations over a set of alternatives [7]. Different alternatives preference elicitation methods were compared in [36], where it was concluded that pairwise comparison methods are more accurate than nonpairwise methods.The introduction of the concept of a fuzzy set as an extension of the classical concept of a set when applied to a binary relation leads to the concept of a fuzzy relation. A fuzzy preference value can be associated with the following two semantics [37]: “the intensity of preference (to what extent alternative xiis preferred to alternative xj)” and “the uncertainty about the preference (how sure it is that xiis preferred to xj)”. The fuzzy interpretation of intensity of preference was introduced by Bezdek et al. [38] via the concept of a reciprocal fuzzy relation and later reinterpreted by Nurmi [39].Fixed a set of alternatives in a decision making problem, there exist several preference representation formats that can be used by experts to provide their preferences about that set of alternatives. The most common ones are:•Preference orderings. The preferences of an expert about a set of feasible alternatives X are described as a preference ordering O={o(1),…,o(n)} where o(·) is a permutation function over the indexes set {1,…,n} for this expert [40,41]. Thus, an expert gives an ordered vector of alternatives from best to worst.Utility values. An expert provides his/her preferences about a set of feasible alternatives X by means of a set of n utility values U={u1,…,un}, ui∈[0,1], the higher the value for an alternative, the better it satisfies experts’ objective [41,42].Preference relations. In this case, experts’ preferences on X are described by means of a P⊂X×X characterized by a function μp: X×X→D where μp(xi, xj)=pijcan be interpreted as the preference degree or intensity of the alternative xiover xjexpressed in the information representation domain D[41,43]. Different types of preference relations can be used according to the domain used to evaluate the intensity of the preference:1.Fuzzy preference relations[38,39,41,44,45]: If D=[0,1] every value pijin the matrix P represents the preference degree or intensity of preference of the alternative xiover xj: pij=1/2 indicates indifference between xiand xj, pij=1 indicates that xiis absolutely preferred to xj, and pij>1/2 indicates that xiis preferred xj. It is usual to assume the additive reciprocity property pij+pji=1∀i, j.Multiplicative preference relations[46]: If D=[1/9,9] and then every value pijin the matrix P represents a ratio of the preference intensity of the alternative xito that of xj, i.e., it is interpreted as xiis pijtimes good as xj: pij=1 indicates indifference between xiand xj, pij=9 indicates that xiunanimously preferred to xj, and pij∈{2,3,…,8} indicates intermediate evaluations. It is usual to assume the multiplicative reciprocity property pij·pji=1∀i, j too.Linguistic preference relations[47–49]: If D=S, where S is a linguistic term set S={s0,…,sg} with odd cardinality (g+1), sg/2 being a natural label (meaning “equally preferred”) and the rest of labels distributed homogeneously around it, then every value pijin the matrix P represents the linguistic preference degree or linguistic intensity of preference of the alternative xiover xj.The relationship between multiplicative and fuzzy preference relations is analyzed in [41] assuming that in a decision making problem an expert, ek, provides his preferences on X by means of a multiplicative preference relation,Ak=[aijk].In general, ifA′={Ak=[aijk]|aijk.ajik=1,aijk∈[1/9,9],k=1,…,m}is the set of multiplicative preference relations in Saaty's sense, andP′={Pk=[pijk]|pijk+pjik=1,pijk∈[0,1],k=1,…,m}is the set of additive fuzzy preference relations, then we are looking for a continuous functionF:A′→P′,|F(Ak)=Pk,∀k.After some mathematical operations (see [41]) Chiclana et al. reached the following results for the relationship between additive and multiplicative preference relations:Proposition 1Suppose that we have a set of alternatives, X={x1,…,xn}, and associated with it a multiplicative preference relationAk=[aijk]. Then, the corresponding additive fuzzy preference relation,Pk=[pijk], associated with Akis given as follows:In this paper, it is assumed that the evaluations about the alternatives and elements are provided by means of the multiplicative preference relations and every value pijin the matrix P is represented by TFN, TrFN, TSFN, TrSFN and intervals.A triangular fuzzy numberN˜, Fig. 1a, is defined by three numbers a<b<c where the vertex of the triangle is at x=b and its base is the interval [a, c]. We writeN˜=(a,b,c)for a triangular fuzzy number. A triangular shaped fuzzy numberM˜is partially defined by a<b<c because its sides are continuous curves, not straight lines. We writeM˜≈(a,b,c)for a triangular shaped fuzzy numberM˜shown in Fig. 1b–e. A trapezoidal fuzzy numberT˜is defined by four number e<f<g<h whereT˜(x)=1on [f, g] and its base is the interval [e, h] as shown in Fig. 1f. We writeT˜=(e,f,g,h)for a trapezoidal fuzzy number. A trapezoidal shaped fuzzy numberU˜is partially defined by e<f<g<h, because its sides need not be straight lines as shown for instance in Fig. 1g and h. We writeU˜≈(e,f,g,h)for a trapezoidal shaped fuzzy number as shown in Fig. 1g [50].The concept of considering judgments represented by TSFN and TrSFN is introduced in this paper for the first time; therefore, it is discussed in the following.Suppose a DM regards the first element (e1) as “approximately three” times more important than the second element (e2), i.e.a˜12=3˜. All the existing methods consider this preference as a TFN (Fig. 1a) because it is simple to work with TFNs and there is no need of complex computations for considering judgments represented by TFNs, whereas “approximately three” means different things to different people from the viewpoint of emphasis on “three” and the viewpoint of tendency to the right or to the left side of “three”. Therefore, an appropriate prioritization method is needed for considering these types of judgments. To deal with this concept, this paper proposes the use of judgments represented by TSFN/TrSFN.In general, “approximately three” may be expressed by one of the following:(i)TFN (Fig. 1a);TSFN for much emphasis on “three” (Fig. 1b), when the certainty of “three” is high for DM;TSFN for less emphasis on “three” (Fig. 1c), when the certainty of “three” is low for DM;TSFN (Fig. 1d), when DM tends to the right side of “three”;TSFN (Fig. 1e), when DM tends to the left side of “three”.It is seen that the membership function of the fuzzy numbers in cases ii, iii, iv and v is nonlinear and judgments represented as TSFN. In Section 7.3, the superiority of the proposed method to the linear FPP method [27] is illustrated for problems with judgments represented as TSFN.In case i, the membership function of the fuzzy number is linear and there are lots of methods that can regard it, but in Section 7, it is illustrated that in such problems, the proposed method is superior to the five known existing methods of literature from the viewpoint of satisfaction of initial judgments by the obtained priority vector. In other words, the deviation of wi/wjfrom aijby the proposed method is less than five known methods of literature.Suppose that A is a 3×3 matrix obtained from pairwise comparisons in the formA=1a12a131/a121a231/a131/a231.The aim is to find the priority vector (w1, w2, w3)Tand a positive reciprocal matrix X in the formX=1w1/w2w1/w3w2/w11w2/w3w3/w1w3/w21,which deviation of a12, a13, 1/a12, a23, 1/a13, and 1/a23 from w1/w2, w1/w3, w2/w1, w2/w3, w3/w1, and w3/w2, respectively, are as less as possible; therefore, an appropriate method of estimating priority vector is one that results in aij=wi/wjfor all i and j.Mikhailov [27] explained that the approach of constructing fuzzy reciprocal matrices with judgments represented by TFNs, taken by analogy from the crisp prioritization methods leads to some problems. Now, in this section it is shown that this shortcoming also applies in case of representing judgments by TrFNs.LetN˜be a TrFN (e, f, g, h) and has a linear piecewise continuous membership functionμN˜(x)with the following characteristics:(1)a continuous mapping from ℜ to the closed interval [0,1];μN˜(x)=0for all x∈[−∞, e] and for all x∈[h, +∞];strictly linearly increasing on [e, f] and strictly decreasing on [g, h];μN˜(x)=1for x∈[f, g].Suppose a prioritization problem with n unknown prioritiesw=(w1,w2,…,wn)T, where the pairwise comparison judgments are represented by trapezoidal fuzzy numbersa˜ij=(eij,fij,gij,hij).The known fuzzy prioritization methods require a full set of m=n(n−1)/2 comparison judgments, in order to construct a positive reciprocal matrix of pairwise comparisonsA˜={a˜ij}of the type:(1)A˜=1a˜12…a˜1na˜211⋯a˜2n⋮⋮⋱⋮a˜n1a˜n2⋯1wherea˜ji=1/a˜ij=(1/hij,1/gij,1/fij,1/eij).The problem mentioned above is explained by two following examples.Example 1Consider a perfectly consistent two-dimensional prioritization problem, where there are only two elements to be compared pairwisely. The decision maker regards the first element as approximately between “two” and “three” times more important than the second one. Suppose that this judgment represented by a symmetrical TrFN,a˜12=(1,2,3,4)(note that the membership degree for values located outside 1 and 4 are assumed equal to zero). The solution of the prioritization problem by existing fuzzy methods requires finding fuzzy prioritiesw˜1>0andw˜2>0, such that their ratio approximately satisfies the initial judgment, i.e.r˜12=w˜1/w˜2≈a˜12. The normalization constraintw˜1+w˜2≈1˜must also be satisfied [27].In order to apply some of the existing fuzzy prioritization methods we have to construct a fuzzy comparison matrix (Eq. (1)), calculating the reciprocal fuzzy judgment, which isa˜21=(1/4,1/3,1/2,1). It is evident, however, that the reciprocal fuzzy number is non-symmetrical. This asymmetry of the reciprocal judgments in the fuzzy comparison matrix, constructed from symmetrical elements, leads to non-symmetrical final fuzzy scores. For instance, applying the fuzzy geometric mean method [23], the following fuzzy normalized priorities are obtained:w˜1=(0.3333,0.5798,0.8697,1.3333),w˜2=(0.1667,0.2367,0.3551,0.6667).The resulting fuzzy ratio, corresponding to these fuzzy priorities can be easily be calculated, by the division operator, defined in [23,51]:r˜12=w˜1w˜1=(0.5000,1.6330,3.6742,8).It is seen that the ratior˜12is rather dissimilar to the initial fuzzy judgmenta˜12=(1,2,3,4). Furthermore, the fuzzy ratio is strongly skewed, in contrast to the initial symmetrical judgment.The resulting fuzzy priorities can be compared, using some of the fuzzy ranking methods. The crisp value of the fuzzy numberN˜=(a,b,c,d)based on Center of Area (COA) method can be expressed by following relation [52]:(2)defuzz(N˜)=∫xμ(x)dx∫μ(x)dx=−ab+cd+1/3(d−c)2−1/3(b−a)2−a−b+c+dThe COA method gives the following crisp values of the priorities:w1=0.7890,w2=0.3687Normalizing these priorities results in w1=0.6815, w2=0.3185 where the resulting crisp ratio isr=w1/w2=2.14, whereas the difuzzified value ofa˜12=(1,2,3,4)by COA method is equal to 2.5. Also, the amount ofr˜12=w˜1/w˜2=(0.5000,1.6330,3.6742,8)by COA method is equal to 3.6040 which is located outside of the interval [2,3] in fuzzy number (1, 2, 3, 4).Solving the same two-dimensional problem with crisp judgments, a12=2.5 and a21=0.4 by any crisp prioritization method will give us perfectly consistent normalized prioritiesw1=0.7143,w2=0.2857, so that the ratior=w1/w2=2.5is equal to the initial judgment.Example 2Consider a perfectly consistent two-dimensional prioritization problem, where there are only two elements to be compared pairwisely. The decision maker regards the first element as approximately between “three” and “four” times more important than the second one. Suppose that this judgment represented by a non-symmetrical TrFN,a˜12=(1,3,4,5)(note that the membership value for values located outside 1 and 5 are assumed equal to zero). The solution of the prioritization problem by existing fuzzy methods requires finding fuzzy prioritiesw˜1>0andw˜2>0, such that their ratio approximately satisfies the initial judgment, i.e.r˜12=w˜1/w˜2≈a˜12. The normalization constraintw˜1+w˜2≈1˜must also be satisfied.In order to apply some of the existing fuzzy prioritization methods we have to construct a fuzzy comparison matrix (Eq. (1)), calculating the reciprocal fuzzy judgment, which isa˜21=(1/5,1/4,1/3,1). Applying the fuzzy geometric mean method [23] as a method which considers judgments represented by TrFN, the following fuzzy normalized priorities can be obtained:w˜1=(0.309,0.672,0.896,1.545),w˜2=(0.138,0.194,0.259,0.691).The resulting fuzzy ratio, corresponding to these fuzzy priorities can be easily be calculated, by the division operator, defined in [23,51]:r˜12=w˜1w˜2=(0.447,2.598,4.619,11.18).It is clear that the ratior˜12is rather dissimilar to the initial fuzzy judgmenta˜12=(1,3,4,5).The resulting fuzzy priorities can be compared, using some of the fuzzy ranking methods.The COA method gives the following crisp values of the priorities:w1=0.872,w2=0.345.Normalizing these priorities results inw1=0.716,w2=0.284, where the resulting crisp ratio isr=w1/w2=2.526, whereas the difuzzified value ofa˜12=(1,3,4,5)by COA method is equal to 3.2. Moreover, the amount ofr˜12=w˜1/w˜2=(0.447,2.598,4.619,11.18)by COA method is equal to 4.962 which is located outside of the interval [3,4] in fuzzy number (1, 3, 4, 5).According to these two examples, it can be concluded that the introduction of additional reciprocal elements and the construction of full fuzzy comparison matrices with judgments represented by TrFNs lead to some inaccuracy in the final results from the viewpoint of deviation of the priorities ratio from initial judgments. Moreover, Mikhailov [27] stated that the skewed reciprocals might reverse the final ranking of the elements if an inverse ratio scale is used. It is proved by Barzilai [53] that the geometric mean method is independent of scale inversion and preserves rank strongly for crisp comparison matrices. But it is proved by Mikhailov [27] that this property of the geometric mean does not hold in the fuzzy cases, even if the pairwise comparisons are perfectly consistent. Therefore, Mikhailov [27] stated that an appropriate prioritization method is one that avoids construction of full fuzzy comparison matrices. The proposed method of this paper like linear FPP and non-linear FPP proposed by Mikhailov [27] derives the priority vector from a fuzzy comparison matrix without need of constructing full fuzzy comparison matrices, but since the reciprocity property is imperative in the AHP method, the proposed method regards this property by a heuristic method proposed in Section 6. For this purpose, in Section 6 it is illustrated that the proposed method makes the full comparison matrices with reciprocal elements based on the simulated judgments not directly the fuzzy judgments. Since the proposed method works with simulated judgments, it overcomes the shortcomings of the fuzzy reciprocal elements. Moreover, the proposed heuristic simulation method of fuzzy numbers gives the opportunity of considering symmetrical/non-symmetrical fuzzy judgments and also the judgments represented by interval value fuzzy sets.The prioritization method refers to the process of deriving a priority vector from the numerical pairwise comparison matrix. Dong et al. [14] stated that there have been a large number of prioritization methods, among which the Eigenvalue method [54] and the logarithmic least square method (LLSM) [55] are most commonly used [14]. Crawford and Williams [55] proposed the LLSM. They stated that the LLSM shares the desirable qualities of the Eigenvalue method and is preferable in several important aspects.The LLSM method [55] uses the L2 metric in defining an objective function of the following optimization problem:min∑i=1n∑j=1nln(aij)−lnwiwj2s.t.wi≥0,∑i=1nwi=1The proposed fuzzy optimization model of this paper is inspired by the LLSM [55]. Suppose that a fuzzy judgment matrixA˜is constructed as Eq. (1). The elements of the judgment matrix are pairwise comparisons ratio represented by TFNs, TrFNs, TSFNs, TrSFNs, intervals or a combination of them with extreme points of lijand uij.The proposed fuzzy optimization model to derive crisp priorities from fuzzy judgment matrix is as follows:(3)minJ=∑i=1n∑j=1nlnwiwj−ln(a˜ij)2subject to(4)∑k=1nwk=1(5)lij≤˜wiwj≤˜uij(6)wk>0,k=1,2,…,nThe proposed prioritization model is a constrained nonlinear optimization model. The objective function of the optimization model which is represented in Eq. (3) is inspired by LLSM [55] but with judgments represented by fuzzy numbers or fuzzy setsa˜ij. Eq. (3) obtains exact weights such that it minimizes the deviation of priorities ratio (wi/wj) from initial judgments (a˜ij). Since value of wiand wjare exact numbers, calculating the natural logarithm of wi/wjis applicable and the natural logarithm of wi/wjis an exact number, but in order to compute the natural logarithm ofa˜ij, sincea˜ijis a fuzzy number, an appropriate method of calculatingln(a˜ij)should be applied.In order to calculate the objective function (3), sinceln(a˜ij)should be computed, a proposed heuristic method based on a proposed heuristic method of simulating fuzzy numbers is provided in Section 6. Furthermore, the proposed heuristic method of simulating fuzzy numbers is provided independently in Section 5.Eq. (4) assures that the obtained priority vector is normalized. Since a framework based on genetic algorithm is utilized to solve the optimization model, a heuristic method in Section 6 is provided to generate random numbers for(w1,w2,…,wn)Tsuch that the sum of wkbe equal to one.An exact priority vector(w1,w2,…,wn)Tderived fromA˜must satisfy the fuzzy inequality (5) wherewi>0,wj>0,i≠jand the symbol≤˜means “fuzzy less than or equal to”. Consider a set of m≤n(n−1)/2 fuzzy pairwise comparison judgments which the lower and upper limits are denoted by lijand uijrespectively. When the fuzzy judgments are consistent, there are many priority vectors, whose elements satisfy the inequalities lij≤wi/wj≤uij. If the judgments are inconsistent, there is no priority vector that satisfies all fuzzy judgments simultaneously. However, it is reasonable to try and find a vector that satisfies all judgments “as well as possible”. This implies that a good enough solution vector has to satisfy all fuzzy judgments approximately, orlij≤˜wi/wj≤˜uij. In Section 6 a heuristic method is provided to hold this constraint with minimum violation for inconsistent judgments.The proposed fuzzy optimization model is a constrained nonlinear optimization model and there are nonlinear relations in both objective function and constraints. General optimization algorithms limited to convex regular functions cannot be applied to this optimization problem since the model is nonlinear and also the natural logarithm of a fuzzy numbera˜ijshould be calculated. Therefore, an efficient optimization algorithm which can solve difficult optimization problems may be employed. For this purpose, a framework based on genetic algorithm is proposed in Section 6.Prior to elaborate the proposed algorithm of deriving priorities from fuzzy pairwise comparison judgments, which is described in Section 6, this section sheds light on the proposed method of fuzzy number simulating, which is used in the proposed algorithm (Section 6.3). It should be noted that the proposed method of fuzzy number simulating can be applied for different types of fuzzy numbers including TFN, TrFN, TSFN, TrSFN, interval value fuzzy sets.Step 1Let Nland Nube the left and the right extreme points of fuzzy numberN˜, respectively.Classify the close interval [Nl, Nu] into C classes with distance υ:(7)[Nl,Nl+υ]︸Class1,[Nl+υ,Nl+2υ]︸Class2,…,Nl+(C−1)υ,Nl+C.υ︸Nu︸ClassCCalculate the membership degree of extreme points of each class.(8)[μN(Nl),μN(Nl+υ)],[μN(Nl+υ),μN(Nl+2υ)],…,[μN(Nl+(C−1)υ),μN(Nl+C.υ)]Calculate the average of the extreme points of relation (8).(9)η1=12(μN(Nl)+μN(Nl+υ)),η2=12(μN(Nl+υ)+μN(Nl+2υ)),…,ηc=12(μN(Nl+(C−1)υ)+μN(Nl+C.υ))Normalize η1, η2, …, ηC.(10)ψ1=η1∑i=1Cηi,ψ2=η2∑i=1Cηi,…,ψC=ηC∑i=1Cηiwhere ψistands for the normalized value of ηi.Calculate the cumulative values of ψi.(11)δ1=ψ1,δ2=ψ1+ψ2,…,δC=∑i=1CψiGenerate a uniform random number θ∈[0, 1]•If θ≤δ1, generate a uniform random number between [Nl, Nl+υ]If θ>δ1 and θ≤δ2, generate a uniform random number between [Nl+υ, Nl+2υ]⋮If θ>δC−1 and θ≤δC, generate a uniform random number between [Nl+(C−1)υ, Nl+C.υ]Repeat step 7 numerously in order to simulate the fuzzy numberN˜.To illustrate the validity of the proposed fuzzy number simulating method, consider two fuzzy numbersa˜=(1,2,3)TFNandb˜=(1,2,3)LRFNLMwith membership function defined in Eqs. (12) and (13), respectively. These two fuzzy numbers are simulated numerously by utilizing the proposed fuzzy number simulating method. The left part of Fig. 2demonstrates the bar chart of number of generated figures in each class fora˜=(1,2,3)TFNand the right part demonstrates the membership function curve fora˜=(1,2,3)TFN. The left part of Fig. 3demonstrates the bar chart of number of generated figures forb˜=(1,2,3)LRFNLMand the right part demonstrates the membership function curve forb˜=(1,2,3)LRFNLM. With comparing the left and the right part of Figs. 2 and 3, it is evident that the pattern of simulated figures follows the membership function curve; therefore, the validity of the proposed method is accepted.(12)μa˜(x)=0x<1x−111≤x≤23−x12≤x≤30x>3(13)μb˜(x)=0x<1x−1131≤x≤23−x132≤x≤30x>3Genetic Algorithms have proven to be very adaptable to a great variety of different complex optimization tasks and many researches use this algorithm to solve the different problems [56–60]. The main role of genetic algorithm (GA) is to perform global search within all feasible search spaces. In the representation of GA, real-number representation is selected instead of bit-string one. Real-number representation has several advantages of (i) being better adapted to numerical optimization problems with continuous decision variables, (ii) speeding up the search over the bit-string representation, and (iii) easing the development of approaches for hybridizing with other conventional methods such as local search techniques [61]. In this section, the pseudo code of the proposed GA based algorithm is provided to derive priority vector from fuzzy pairwise comparison judgments. Furthermore, the proposed algorithm is explained by Sections 6.1–6.7.L1:“Initialize population”L2:for c← 1 to population sizeL3:counter ← 0L4:w1c ← a random number ∈[0, 1]L5:doL6:counter ← counter+1L7:upper limit ← 0L8:for k← 1 to counterL9:upper limit ← wkc+upper limitL10:next kL11:wk+1c ← a random number ∈[0, 1−upperlimit]L12:loop until (counter ← n - 2)L13:upper limit ← 0L14:for k← 1 to counter+1L15:upper limit ← wkc+upper limitL16:next kL17:wnc ← 1 - upper limitL18:next cL19:“Satisfaction of initial judgments”L20:step ← 0L21:for c← 1 to population sizeL22:if (lij≤wic/wjc≤uij) then go to the next cL23:else:L24:doL25:counter ← 0L26:if c← 1 thenL27:if (counter1 ← δ) thenL28:step ← step+ɛL29:counter1 ← 0L30:end ifL31:end ifL32:generate a new priority vectorL33:if (lij – step≤wic/wjc≤uij+step) then go to the next cL34:else:L35:counter ← 1L36:counter1 ← counter1+1L37:loop until (counter ← 0)L38:next cL39:for t← 1 to a maximum number of iterationsL40:“Fitness calculation of parents”L41:for f← 1 to ηL42:aijf← a random number using proposed fuzzy number simulatingL43:next fL44:for c← 1 to population sizeL45:sumfitc ← 0L46:for f← 1 to ηL47:fitnessfc ←∑i=1n∑j=1n((ln(wic/wjc)−ln(aijf))2+(ln(wjc/wic)−ln(1/aijf))2)L48:sumfitc ← sumfitc+fitnessfcL49:next fL50:fitnessc ← (1/η) * sumfitcL51:next cL52:“Selection”L53:perform selection by tournament strategyL54:“Crossover”L55:perform two-point crossover at rate of crossover rate and generate offspringsL56:if∑k=1nwkc≠1then normalize priority vectorL57:for c← 1 to population sizeL58:if (lij – step≤wic/wjc≤uij+step) then go to the next cL59:else:L60:doL61:counter ← 0L62:generate a new priority vectorL63:if (lij – step≤wic/wjc≤uij+step) then go to the next cL64:else:L65:counter ← 1L66:loop until (counter ← 0)L67:next cL68:“Mutation”L69:for c← 1 to population sizeL70:swap the amounts of two random genes at rate of mutation rateL71:if (lij – step≤wic/wjc≤uij+step) then go to the next cL72:else:L73:doL74:counter ← 0L75:generate a new priority vectorL76:if (lij – step≤wic/wjc≤uij+step) then go to the next cL77:else:L78:counter ← 1L79:loop until (counter ← 0)L80:next cL81:“Fitness calculation of offsprings”L82:calculate fitness for offsprings and choose the best priority vectorL83:“Replacement”L84:reproduct the new population by tournamentL85:next tL86:repeat iterations until a satisfactory solution been foundThe first section of the proposed algorithm initializes the population (L1-L18). In the proposed heuristic algorithm of population initialization, each chromosome with n genes indicates a priority vector, and each gene indicates the weight of an element of pairwise comparison matrix. The proposed heuristic initialization algorithm is designed such that the sum of genes’ values in each chromosome be equal to one; therefore, constraint (4) be hold. To initialize the population, a random number between [0,1] is inserted into w1c(L4), where w1cdepicts the weight of element 1 in chromosome c. In order to generate wk+1c(the weight of element k+1 in chromosome c), the sum of w1cto wkcis calculated and called “upper limit” (L8-L10). Afterward, a random number between [0,1- upper limit] is generated and inserted into wk+1c(L11). By performing this operation, w1c, w2c,…, wn−1cbe generated. In order to generate wnc(the weight of element n in chromosome c), the sum of w1cto wn−1cis calculated and inserted into “upper limit” (L14–L16), and then the amount of “1- upper limit” is inserted into wnc(L17). By performing this algorithm for each chromosome, w1c, w2c,…, wn−1c, wncbe generated such that the constraint (4) be hold.After population initialization, each chromosome (priority vector) should be evaluated whether it satisfies constraint (5). For this purpose, at first, the proposed algorithm evaluates whether each priority vector satisfies inequalities lij≤wic/wjc≤uijfor all judgments (note that ≤is less than or equal to not fuzzy less than or equal to – L22). If the priority vector satisfies these inequalities, it is remained for further analysis. Since there may be different priority vectors that satisfy inequalities lij≤wic/wjc≤uij, a more precise evaluation is needed to compare the priority vectors in order to determine which of them better satisfies the initial judgments. This precise evaluation is discussed in Section 6.3, where the fitness of each chromosome is calculated.If the first chromosome (priority vector) of the population does not satisfy inequalities lij≤wic/wjc≤uijfor all judgments, the proposed algorithm replaces it with a new generated chromosome (by the heuristic method of Section 6.1 – L32), and evaluates the replaced chromosome whether it satisfies the inequalities (L33). Again, if the replaced chromosome does not satisfy the inequalities, this chromosome is replaced with a new generated chromosome and evaluation process is repeated. This operation is performed for at most δ times, in order to find a priority vector that satisfies the inequalities for all judgments.If the judgments be inconsistent, there is no priority vector that simultaneously satisfies all fuzzy judgments. Therefore, in δ times replacing the first chromosome with a new generated chromosome, if the algorithm does not find a priority vector that satisfies inequalities lij≤wic/wjc≤uijfor all judgments, the algorithm lets the priority vector to slightly violates lij and uij. For this purpose, a very small amount of ɛ greater than zero is inserted into “step” (L28), and the algorithm evaluates whether the new generated chromosome (L32) satisfies inequalities lij-step≤wic/wjc≤uij+step for “step=ɛ” for all judgments (L33). If the first chromosome does not satisfy the inequalities, the proposed algorithm replaces it with a new generated chromosome (by the heuristic method of Section 6.1 – L32), and evaluates the new generated chromosome whether it satisfies the inequalities (L33). Again, if the replaced chromosome does not satisfy the inequalities, this chromosome is replaced with a new generated chromosome and is evaluated. This operation is performed for at most δ times, in order to find a priority vector that satisfies the inequalities.In δ times replacing the chromosome with a new generated chromosome, if the algorithm does not find a priority vector that satisfies lij-step≤wic/wjc≤uij+step for all judgments for “step=ɛ”, a small amount of ɛ greater than zero is added to “step” (L28), and the algorithm tries to find a chromosome that satisfies lij-step≤wic/wjc≤uij+step with the new amount of “step” (note that now the amount of step is equal to 2*ɛ). In fact, by adding ɛ to “step”, the algorithm lets more violation of priority vector from lij≤wic/wjc≤uij.This operation is performed repeatedly until for a given amount of “step”, a priority vector be found that satisfies inequalities lij-step≤wic/wjc≤uij+step for all judgments. The more the amount of “step” is, the more the deviation of priorities ratio from initial judgments will be.With performing this algorithm, the minimum amount of “step” be found that leads to minimize the violation of chromosomes from inequalities lij≤wic/wjc≤uij.Since in this phase, the minimum amount of “step” is determined, and the algorithm finds priority vectors that satisfy inequalities lij-step≤wic/wjc≤uij+step for all judgments for a given amount of “step”, this value of “step” is utilized for the other chromosomes and in the remaining of the algorithm (crossover and mutation) whenever it is needed.Since the process of finding the minimum amount of “step” is performed only once in the entire algorithm, it is suggested to set a large number for δ and a small number for ɛ at the beginning of the algorithm in order to find as minimum amount for “step” as possible.It should be mentioned that, at the beginning of evaluating satisfaction of initial judgments, the algorithm enters the process of finding the minimum amount of “step” if and only if the first chromosome does not satisfy inequalities lij≤wic/wjc≤uijfor all judgments. In other words, if the first chromosome satisfies inequalities lij≤wic/wjc≤uijfor all judgments, the algorithm finds that it can gain priority vectors that satisfy inequalities lij≤wic/wjc≤uijfor all judgments; therefore, the algorithm does not enter the process of finding the minimum amount of “step”, and the amount of “step” remains zero for the entire algorithm. To explain more, suppose that the first chromosome satisfies inequalities lij≤wic/wjc≤uijfor all judgments but the second chromosome not. In this situation, since the algorithm does not enter the process of finding the minimum amount of “step” and the amount of step is equal to zero, the second chromosome enters into a loop (L24–L37) and it cannot exit the loop until a priority vector be found that satisfy inequalities lij≤wic/wjc≤uijfor all judgments. This operation will be performed for all the remained chromosomes.The fitness evaluation of chromosomes is performed by means of Eq. (3). To explain the proposed method of fitness evaluation of chromosomes, consider an example of n-dimensional prioritization problem, where there are n elements to be compared pairwisely. According to Eq. (3), the following equation should be computed:J=lnw1w2−ln(a˜12)2+lnw2w1−ln1a˜122+lnw1w3−ln(a˜13)2+lnw3w1−ln1a˜132+lnw2w3)−ln(a˜23)2+lnw3w2−ln1a˜232+⋯lnwn−1wn−ln(a˜(n−1)(n))2+lnwnwn−1−ln1a˜(n−1)(n)2.In order to compute the above equation, a heuristic method based on simulating fuzzy numbers is proposed. The reasons of proposing this method are explained in Section 6.3.1.To calculate the fitness of chromosomes by means of Eq. (3), each fuzzy judgmenta˜ijis simulated η times by the step 8 of Section 5, and the simulated values are inserted intoaijf(L41–L43). Afterward, the fitness of each chromosome is calculated η times by Eq. (14) based on η amounts ofaijf(L47). Finally, the average of these η values is considered as fitness of the chromosome (L50).(14)fitnessfc=∑i=1n∑j=1nlnWicWjc−ln(aijf)2+lnWjcWic−ln1aijf2There are two reasons for proposing the heuristic fitness evaluation method as follows:(i)Obtaining an exact amount of fitness for chromosomes. There are some known methods for calculating the natural logarithm of a fuzzy number, e.g. “extension principle”, “alpha-level” and etc., but these methods give a fuzzy number or a fuzzy set for the natural logarithm of a fuzzy number; therefore, by means of the mentioned methods, we will have a fuzzy number or a fuzzy set for the fitness of each chromosome, and then an additional ranking procedure is needed in order to compare the fuzzy fitness of chromosomes. As explained in [18] the different fuzzy ranking procedures, however, often give different ranking results, especially for fuzzy numbers with wide overlap over a large range. On contrary, as it can be seen in the proposed method of fitness evaluation, since the fuzzy judgments are simulated as crisp numbersaijf, the fitness amount of each chromosome is equal to an exact number (crisp number); hence, the chromosomes can be easily be compared with each other for selection, reproduction and ranking procedures.Avoiding of constructing fuzzy reciprocal judgments. As discussed in Section 3, the approach of constructing fuzzy reciprocal judgments1/a˜ijfor calculating(ln(wi/wj)−ln(a˜ij))2+(ln(wj/wi)−ln(1/a˜ij))2, taken by analogy from the crisp prioritization methods leads to some problems. As it can be seen in Eq. (14), since bothaijfand1/aijfare crisp numbers (the simulated numbers), reciprocal fuzzy judgments are not needed more.Since the heuristic proposed method is based on simulating the fuzzy numbers, the nature of this method is approximate; therefore, for an illustration and justification of the proposed heuristic method for computing the natural logarithm of a fuzzy number, the results of the proposed heuristic method is compared to the Zadeh's extension principle method [62] for the following five examples:(i)The natural logarithm of TFNA˜1=(6,7,8)is equal to a triangular fuzzy numberln(A˜1)=(ln(6),ln(7),ln(8))=(1.7918,1.9459,2.0794)by means of the extension principle method, and it is equal to a crisp 1.9443 by means of the heuristic proposed method. Note that to calculate the natural logarithm ofA˜1=(6,7,8)by means of the heuristic proposed method,A˜1is simulated numerously and the natural logarithm of the simulated numbers is calculated and then the average of these numbers is considered as the natural logarithm ofA˜1.The natural logarithm of TFNA˜2=(3,6,8)is equal to a triangular shaped fuzzy numberln(A˜2)≈(ln(3),ln(6),ln(8))≈(1.0986,1.7918,2.0794)by means of the extension principle method, and it is equal to a crisp 1.7138 by means of the heuristic proposed method.The natural logarithm of TFNA˜3=(4,5,7)is equal to a triangular shaped fuzzy numberln(A˜3)≈(ln(4),ln(5),ln(7))≈(1.3863,1.6094,1.9459)by means of the extension principle method, and it is equal to a crisp 1.6672 by means of the heuristic proposed method.The natural logarithm of a TrFNA˜4=(2,(5/2),(7/2),4)is equal to a trapezoidal fuzzy numberln(A˜4)=(ln(2),ln(5/2),ln(7/2),ln(4))=(0.6931,0.9163,1.2528,1.3863)by means of the extension principle method, and it is equal to a crisp 1.0868 by means of the heuristic proposed method.The natural logarithm of a TrFNA˜5=(1,(3/2),(5/2),4)is equal to a trapezoidal shaped fuzzy numberln(A˜5)≈(ln(1),ln(3/2),ln(5/2),ln(4))≈(0,0.4055,0.9163,1.3863)by means of the extension principle method, and it is equal to 0.7851 by means of the heuristic proposed method.As it can be seen in the above examples, the solutions of the proposed method lie in the corresponding interval of the solutions of the extension principle method, so the results of the proposed method are reasonable. The extension principle method gives a fuzzy number for the natural logarithm of a fuzzy number while the heuristic proposed method gives a crisp amount for the natural logarithm of a fuzzy number.As mentioned in Section 6.3.1, since we need a crisp amount for the fitness of each chromosome, the proposed heuristic method is an appropriate method for this purpose. Note that if we want to defuzzify the results of the extension principle method to have the crisp amounts, there are lots of methods to defuzzify triangular fuzzy numbers, triangular shaped fuzzy numbers, trapezoidal fuzzy numbers, trapezoidal shaped fuzzy numbers and intervals which often give different crisp numbers, but by means of the proposed method we obtain only a crisp amount for both natural logarithm of a fuzzy number and fitness of each chromosome; therefore, in this way, we can easily compare the different chromosomes in procedures of selection, reproduction and ranking.GAs use a selection technique to select individuals from the population to insert individual into mating pool. Individuals from the mating pool are used to generate new offspring, with the resulting offspring forming the basis of the next generation. Goldberg and Deb [63] have shown that the tournament selection has better or equivalent convergence and computational time complexity properties when compared to any other reproduction operator that exists in the literature. So, in this study tournament selection operator is used.At each iteration, pairs of individuals are selected and are recombined into new solutions [64]. Crossover is used to recombine genetic material in two parent chromosomes to produce two child chromosomes that share characteristics of their parents. In this work two-point crossover is applied at rate of probability of crossover.Since performing crossover may lead the child chromosomes to violate from constraint (4); therefore, at this circumstance the algorithm normalizes the child chromosomes that violate from constraint (4) (L56). Afterwards, the algorithm evaluates whether each child chromosome satisfies inequalities lij-step≤wic/wjc≤uij+step for all judgments (note that the minimum amount of “step” is determined in Section 6.2.1). If a chromosome does not satisfy the inequalities, the algorithm seeks a new chromosome to replace by the heuristic method of Section 6.2.1 (L57–L67).Mutation operator prevents the solution from being excessively localized and as a result increases the possibility of obtaining the global solution [65]. In this algorithm, inversion method is used for mutation. In inversion method, the substring between two randomly selected positions in a chromosome is inverted (Fig. 4).With applying the inversion method, the mutated chromosome certainly is normalized and does not violate constraint (4) as it is demonstrated in Fig. 4, but the algorithm should evaluate whether each mutated chromosome satisfies inequalities lij-step≤wic/wjc≤uij+step for all judgments for predetermined amount of “step”. If a chromosome does not satisfy the inequalities, the algorithm seeks a chromosome to replace by the heuristic method of Section 6.2.1 (L69-L80).After genetic operators are applied to generate the offspring, in this paper a replacement based on tournament is used to combining the current generation and offspring for reproduction.The same stopping criterion as IGA in [66] is used in the proposed method. A maximum number is chosen to be the upper bound of evolving generations.In order to illustrate the performance of the proposed method, several cases are provided to compare the proposed method with some existing methods of literature. Examples 3 and 4 of Section 7.1 show the reasonability of the proposed algorithm. In Example 5 of Section 7.1, four cases are solved with judgments represented as TFN to show the superiority of the proposed method to five known methods of literature. In Section 7.2, two examples are solved to show the capability of the proposed method to consider trapezoidal fuzzy judgments, and it is illustrated that the proposed method is superior to two known methods of literature (which are capable of considering judgments represented by TrFN). In Section 7.3, the capability of the proposed method to consider judgments represented as TSFN is illustrated. Furthermore, four cases are solved with judgments represented as TSFN to show the superiority of the proposed method to a known method of literature.Example 3To validate the proposed method of this paper, consider a perfectly consistent two-dimensional prioritization problem, where there are only two elements to be compared pairwisely. The decision maker regards the first element more important than the second one and his judgment is represented by triangular fuzzy numbera˜12=(1,2,3). Table 1depicts the priority vectors obtained by the proposed method and four existing methods. It is seen that the difference of the priority vector obtained by the proposed method and linear FPP [27]/non-linear FPP [27] is inconsiderable and also the priority vector obtained by the proposed method is located in range of priority vectors obtained by Wang et al. [10] and Buckley [23]; therefore, it can be concluded that the results of the proposed method are reasonable.As an another example to validate the proposed method, consider example that given by Boender et al. [20], where a decision maker provides the matrix of pairwise comparisons for three different criteria by TFNs;a˜21=(2.5,3,3.5),a˜31=(4,5,6)anda˜32=(1.5,2,2.5). Table 2depicts the priority vectors obtained by the proposed method and four existing methods. It is seen that the difference of the priority vector obtained by the proposed method and linear FPP [27]/non-linear FPP [27] is inconsiderable and also the priority vector obtained by the proposed method is located in the range of priority vectors obtained by Wang et al. [10] and Buckley [23]; therefore, it can be concluded that the results of the proposed method are reasonable.In this example, four cases are evaluated in which the judgments represented by TFNs and some of the judgments are inconsistent. It is shown that the deviation of priorities ratio from initial judgments in the proposed method is less than five existing well-known methods of literature.Case 1 of Example 5. Consider a decision maker provides the matrix of pairwise comparisons for three different criteria by TFNs;a˜13=(4,5,6),a˜21=(2,3,4),a˜23=(6,7,8). Table 3depicts the priority vectors obtained by the proposed method and five existing methods of literature.As discussed in Section 2 and in [55], considering a pairwise comparison matrix A=[aij], the aim is to find the priority vector (w1, w2,…, wn)Tand a positive reciprocal matrix X=[wi/wj] which deviation of aijfrom wi/wjbe as less as possible (see Section 2). Since this concept is basis of the AHP, LSM and LLSM are designed based on this concept. Therefore, to compare the proposed method with the existing methods, the deviation of priorities ratios (wi/wj) from initial judgments (aij) is calculated by sum of squared error (SSE) as defined in Eq. (15) where aijstands for defuzzified amount ofa˜ijby COA method. The last row of Table 3 (SSE) depicts the amount of Eq. (15) for each method. It should be mentioned that in order to calculate Eq. (15) for Buckley [23] and Wang et al. [10] which derive fuzzy weights from comparison matrices, priority vectors are defuzzified by COA method.(15)SSE=∑i=1n∑j=1naij−wiwj2(i≠j)It is clear that the amount of Eq. (15) for the proposed method (2.8610) is less than five other existing methods; therefore, the proposed method is superior to the five other existing methods. Although, there is small difference between the amount of Eq. (15) for the proposed method and the non-linear FPP [27], but it should be mentioned that the non-linear FPP [27] is applicable for only judgments represented by TFNs, but the proposed method is applicable for TFNs, TrFNs, TSFNs, TrSFNs, intervals and a combination of them as it discussed further. Since the weight of the third criterion is equal to zero by the Chang [25], the amount of Eq. (15) is equal to infinity for this method. It means that the method developed by Chang [25] is much weak to satisfy the initial judgments. Note that w1/w3=infinity, and this is dissimilar toa˜13=(4,5,6). Furthermore, w2/w3=infinity, whereasa˜23=(6,7,8).To indicate calculation of Eq. (15), consider the following calculation for the proposed method as instance:E=a12−w1w22+a13−w1w32+a21−w2w12+a23−w2w32+a31−w3w12+a32−w3w22=13−0.31040.61172+5−0.31040.07772+3−0.61170.31042+7−0.61170.07772+15−0.07770.31042+17−0.07770.61172=2.861Case 2 of Example 5. Consider a decision maker provides the matrix of pairwise comparisons for four different criteria by TFNs;a˜12=(3,4,5),a˜14=(7,8,9),a˜31=(4,5,6),a˜32=(7,8,9),a˜34=(3,4,5),a˜42=(1,2,3). Table 4depicts the priority vector obtained by the proposed method and five existing methods. The last row of Table 4 (SSE) depicts the amount of Eq. (15) for each method. The amount of SSE for the proposed method is equal to 37.206 which is less than five other existing methods; therefore, the proposed method is superior to the five other methods. In other words, the proposed method better satisfies the initial judgments compared with the five other existing methods.Case 3 of Example 5. In order to compare the performance of the proposed method to other methods, suppose that a decision maker provides the matrix of pairwise comparisons for three different criteria by TFNs;a˜12=(5,6,7),a˜31=(2,3,4),a˜32=(7,8,9). Table 5provides the priority vectors obtained by the proposed method and the five existing methods. It is seen that the amount of SSE for the proposed method is equal to 3.9229 which is less than five other existing methods; therefore, the proposed method is superior to the five other methods.Case 4 of Example 5. As an another example to illustrate the superiority of the proposed method to some other existing methods, suppose a decision maker compares four elements and provides the following judgments represented by TFNs;a˜12=(7,8,9),a˜13=(3,4,5),a˜14=(6,7,8),a˜32=(4,5,6),a˜34=(7,8,9),a˜42=(3,4,5). Table 6depicts the priority vector obtained by the proposed method and the five existing methods. The amount of SSE for the proposed method is equal to 90.574 which is less than five other existing methods; therefore, the proposed method is superior to the five other methods.As mentioned before, the proposed method of this paper has got the ability of deriving exact priorities from fuzzy comparison matrices with fuzzy judgments represented as TrFNs as well as TFNs. To illustrate the performance of the proposed method, consider the Example 6.Example 6In this example, two cases are evaluated in which the judgments represented by TrFNs. As discussed before, all the existing methods introduced in Section 1 except for Buckley [23] and linear FPP [27] are developed to regard judgments represented by TFNs and do not consider the judgments represented by TrFNs. Therefore, the obtained priority vector by the proposed method for the following examples is compared with the obtained vectors by Buckley [23] and linear FPP [27]. It is shown that the deviation of priorities ratio from initial judgments in the proposed method is less than both linear FPP [27] and Buckley [23].Case 1 of Example 6. Consider a decision maker provides the matrix of pairwise comparisons for four different elements by TrFNs;a˜12=(4,(9/2),(11/2),6);a˜14=(7,(15/2),(17/2),9);a˜31=(3,(7/2),(9/2),5);a˜32=(7,(15/2),(17/2),9);a˜34=(6,(13/2),(15/2),8);a˜42=(3,(7/2),(9/2),5). Table 7illustrates the priority vector obtained by the proposed method and methods of Buckley [23] and linear FPP [27]. The last row of Table 7 (SSE) illustrates the amount of Eq. (15) for each method. The amount of SSE for the proposed method is equal to 35.080 which is less than two other existing methods; therefore, the proposed method is superior to the two other existing methods. In other words, the proposed method better satisfies the initial judgments compared with Buckley [23] and linear FPP [27].Case 2 of Example 6. In order to compare the performance of the proposed method with other existing methods to deal with judgments represented by TrFNs, suppose that a decision maker provides the matrix of pairwise comparisons for four different criteria by TrFNs;a˜12=(2,(5/2),(7/2),4);a˜13=(5,(11/2),(13/2),7);a˜14=(6,(13/2),(15/2),8);a˜32=(6,(13/2),(15/2),8);a˜34=(7,(15/2),(17/2),9);a˜42=(3,(7/2),(9/2),5). Table 8provides the priority vector obtained by the proposed method and methods of Buckley [23] and linear FPP [27]. It is seen that the amount of SSE for the proposed method is equal to 71.0065 which is less than two other existing methods; therefore, the proposed method is superior to the two other existing methods.As mentioned before, in some cases, some preferences may be represented by TSFN/TrSFN. In this section, the capability of the proposed method to consider such problems is discussed.Eq. (16) with δ and γ=1 depicts the membership function of a TFN:A˜=(a,b,c)which the form of the membership function is similar to Fig. 1a. Determining other unequal to one amounts for δ and γ, results in converting a TFN into a TSFN. For instance, Fig. 1b demonstrates a TSFN with δ and γ>1; Fig. 1c demonstrates a TSFN with δ and γ<1; Fig. 1d demonstrates a TSFN with δ>1 and γ<1 and Fig. 1e demonstrates a TSFN with δ<1 and γ>1. Therefore, by determining the value of δ and γ unequal to one, DM can express his judgment as a TSFN.(16)μA˜(x)=0x≤ax−ab−aδa≤x≤bc−xc−bγb≤x≤c0x≥cExample 7In order to illustrate the capability of the proposed method to consider such problems, consider a perfectly consistent two-dimensional prioritization problem, where there are only two elements to be compared pairwisly. Suppose a DM regards the first element as approximately two times more important than the second onea˜12=(1,2,3), and his judgment is represented by Eq. (16). Table 9indicates the priority vector obtained by the proposed method for different amounts of δ and γ. It is seen that for δ=1 and γ=1, the priority vector is equal to w1=0.6664 and w2=0.3336, but for δ=3 and γ=1/3, the weight of element 1 is equal to w1=0.6935 which is greater than 0.6664 and the weight of element 2 is equal to w2=0.3065 which is less than 0.3336 as expected. Also, for δ=1/3 and γ=3, the weight of element 1 is equal to w1=0.6324 which is less than 0.6664 and the weight of element 2 is equal to w2=0.3676 which is greater than 0.3336 as expected.In this example, four cases are evaluated in which some of the judgments are represented by TSFN. Since linear FPP [27] is capable of considering judgments represented by TSFN/TrSFN, the priority vectors obtained for the four cases by the proposed method is compared with the linear FPP [27]. It is shown by different examples that the deviation of priorities ratio from initial judgments in the proposed method is less than linear FPP [27].Case 1 of Example 8. Suppose that a decision maker provides the matrix of pairwise comparisons for four different criteria bya˜12=(3,4,5)as a TFN;a˜14=(7,8,9)δ=3,γ=3as a TSFN;a˜31=(4,5,6)as a TFN;a˜32=(7,8,9)δ=3,γ=1/3as a TSFN;a˜34=(3,4,5)as a TFN;a˜42=(1,2,3)δ=1/3,γ=3as a TSFN. Table 10illustrates the priority vector obtained by the proposed method and linear FPP [27]. The last row of Table 10 (SSE) illustrates the amount of Eq. (15) for each method. The amount of SSE for the proposed method is equal to 83.1927 which is less than linear FPP [27]; therefore, the proposed method is superior to the linear FPP [27]. In other words, the proposed method better satisfies the initial judgments compared with linear FPP [27].Case 2 of Example 8. In order to compare the performance of the proposed method to the linear FPP [27] for dealing with problems in which some of the judgments represented by TSFN, consider a decision maker compares four elements and provides the following judgments;a˜12=(1,2,3)δ=3,δ=1/3as a TSFN;a˜14=(7,8,9)δ=3,γ=3as a TSFN;a˜31=(4,5,6)δ=3,δ=3as a TSFN;a˜32=(7,8,9)δ=3,γ=1/3as a TSFN;a˜34=(3,4,5)as a TFN;a˜42=(4,5,6)δ=1/3,γ=3as a TSFN. Table 11depicts the priority vector obtained by the proposed method and linear FPP [27]. The amount of SSE for the proposed method which is equal to 127.5801 is less than linear FPP [27]; therefore, the proposed method better satisfies the initial judgments compared with linear FPP [27].Case 3 of Example 8. As an another example to illustrate the superiority of the proposed method to linear FPP [27], consider a decision maker provides the matrix of pairwise comparisons for four different criteria bya˜12=(3,4,5)δ=1/3,δ=3as a TSFN;a˜31=(5,6,7)as a TFN;a˜32=(7,8,9)δ=1/3,γ=3as a TSFN;a˜34=(3,4,5)δ=3,γ=3as a TSFN;a˜41=(7,8,9)as a TFN;a˜42=(4,5,6)δ=1/3,γ=3as a TSFN. As it demonstrated in Table 12, the amount of SSE for the proposed method is equal to 112.816 which is better than the linear FPP [27] (Table 13).Case 4 of Example 8. Suppose that a decision maker compares four elements and provides the following judgmentsa˜13=(7,8,9)as a TFN;a˜14=(3,4,5)δ=1/3,δ=3as a TSFN;a˜21=(5,6,7)δ=3,δ=3as a TSFN;a˜23=(1,2,3)δ=1/3,δ=3as a TSFN;a˜24=(3,4,5)as a TFN;a˜43=(7,8,9)δ=1/3,γ=3as a TSFN. The amount of SSE for the proposed method is equal to 92.3597 which is less than the linear FPP [27]; therefore, the proposed method is superior to the linear FPP [27].

@&#CONCLUSIONS@&#
