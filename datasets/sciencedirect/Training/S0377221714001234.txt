@&#MAIN-TITLE@&#
A fast algorithm for identifying minimum size instances of the equivalence classes of the Pallet Loading Problem

@&#HIGHLIGHTS@&#
The paper deals with minimum size instance of the Pallet Loading Problem.A faster Minimum Size Instance (MSI) identification algorithm is presented.A faster minimum size instance enumerating algorithm is presented.The two algorithms improve solution schemes that require MSI identification.

@&#KEYPHRASES@&#
Packing,Pallet Loading Problem,Equivalence class,

@&#ABSTRACT@&#
In this paper, a novel and fast algorithm for identifying the Minimum Size Instance (MSI) of the equivalence class of the Pallet Loading Problem (PLP) is presented. The new algorithm is based on the fact that the PLP instances of the same equivalence class have the property that the aspect ratios of their items belong to an open interval of real numbers. This interval characterises the PLP equivalence classes and is referred to as the Equivalence Ratio Interval (ERI) by authors of this paper. The time complexity of the new algorithm is two polynomial orders lower than that of the best known algorithm. The authors of this paper also suggest that the concept of MSI and its identifying algorithm can be used to transform the non-integer PLP into its equivalent integer MSI.

@&#INTRODUCTION@&#
The pallet loading problem (PLP) arises in manufacturing workshops (and also in other logistics areas), where small items must be placed onto a large pallet (Dowsland, 1987a, 1987b; Morabito & Morales, 1998; Waescher, Haussner, & Schumann, 2006). The PLP is commonly reduced to its two-dimensional version, in which identical small rectangular items (boxes) must be packed onto a large rectangular pallet; items may be rotated 90°, but only orthogonal packing is allowed. The aim is to pack as many items onto the pallet as possible without overlapping any two items. Using the classification of Dyckhoff (1990) and Waescher et al. (2006), the problem belongs to class 2/B/O/C and IIPP, respectively. This type of PLP problem is also known as the Manufacturer’s Pallet Loading Problem (MPLP) (Ribeiro & Lorena, 2007).The practical significance of the PLP has been expressed by many authors (Alvarez-Valdes, Parreno, & Tamarit, 2005; Birgin, Lobato, & Morabito, 2010; Dowsland, 1987a; Dyckhoff, 1990; Martins & Dell, 2008; Nelissen, 1993; Ram, 1992; Young-Gun & Maing-Kyu, 2001) in the course of solving the PLP. In these publications, the authors state or imply that the only constraint is the stability and safety of the boxes and thus use orthogonal placement (e.g., Dowsland, 1987a; Martins & Dell, 2008; Nelissen, 1993; Young-Gun & Maing-Kyu, 2001). There are also a small number of authors who consider additional constraints, such as clampability (e.g., Carpenter & Dowsland, 1985). Recently, Kocjan and Holmström (2010) deals with specific loads of PLP, and Bortfeldt and Wäscher (2013) reviews special constraints on general container loading. The PLP also occurs in a number of cutting stock and floor design scenarios (Martins & Dell, 2008).The PLP is difficult to solve exactly within a short computation time, and sample instances are often used to demonstrate an algorithm’s efficiency (Martins, 2003; Martins & Dell, 2007). Dowsland (1984) first showed that PLP instances can be divided into equivalence classes with the same optimal placement pattern. Such authors as Dowsland (1984, 1987a, 1987b), Scheithauer and Terno (1996), Nelissen (1993), Morabito and Morales (1998), and Pureza and Morabito (2006) used PLP instances of equivalent classes numbering from approximately 10,000 to approximately 50,000. Restrictions on the aspect ratio of the pallet and the items are commonly applied to confine the number of instances investigated. Alvarez-Valdes et al. (2005), Birgin, Morabito, and Nishihara (2005), and Lins, Lins, and Morabito (2003) investigated a common set of approximately 50,000 instances.Martins and Dell (2007) first proposed the idea of identifying a PLP equivalence class by the Minimum Size Instance (MSI). The input of a PLP instance contains four parameters: the length and width of the pallet and the length and width of the boxes. An MSI of an equivalent class is the equivalent instance that has all four parameters minimised. Martins and Dell (2007) proved that the existence and uniqueness of an MSI for a PLP equivalence class is guaranteed. These researchers also found the parameter bounds of the MSI when the PLP’s area ratio (the ratio of pallet area to item area) is bounded. Thus, an enumerating procedure can be designed to generate all equivalence classes of a PLP subject to a given area ratio bound.According to Martins and Dell (2007), the motivation for determining the MSI is to identify equivalent classes by unique instances and to provide a systematic way of exhaustively enumerating PLP equivalent classes subject to a given boundary (such as the area ratio bound). It should be noted that Dowsland (1984) also demonstrates a method for enumerating PLP equivalent classes subject to given bounding conditions, and Dowsland (1987a) also mentions minimising the smaller dimension of the box such that the solution space is smaller and easier to solve. However, Martin and Dell’s work clarifies the concept of MSI and provides a systematic way to use it.Exhaustively enumerating PLP equivalence classes also provides an exact solution scheme that reuses MSI solutions. Because most PLP equivalent classes are easily solvable, the hard classes may be tackled at the cost of a long run time or expensive hardware. However, once the classes are solved, the solutions, represented by the solutions of MSIs, can be stored in a database for future reference. Both Dowsland (1987b) and Martins and Dell (2008) suggest using this scheme for completely solving the PLP subject to a given area ratio bound.The MSI enumeration algorithms presented by Martins and Dell (2007) are of a high-order polynomial. Enumerating all MSIs of area ratio N<101 requires the maximum bearable computing load on a 600-Megahertz computer (with a 2.8-Gigahertz computer, N<151 is bearable).The input sizes of sample instances for demonstrating PLP algorithms continue to grow over time. The Cover I dataset has an area ratio of N<51 and was used by the earliest authors (Dowsland, 1984, 1987a). Later, a dataset with N<101 (the Cover II dataset) was used by most authors until 2010. In 2010, Birgin et al. (2010) used a Cover III dataset with N<151. To the best of the author’s knowledge, N<151 is currently the largest input size being used in PLP datasets.Although the Cover I, II, and III datasets are valuable for developing algorithms, they are far from representing the requirements of real applications. For example, the practical wood pulp stowage problem (Birgin et al., 2010) involves area ratios ranging from 147 to 341. The area ratio of the PLP in container loading may reach values in the several thousands (Young-Gun & Maing-Kyu, 2001).The L-shaped heuristic is a notably effective PLP algorithm and is estimated to be exact (Birgin et al., 2005; Lins et al., 2003). This algorithm has been tested by Cover I (N<51), Cover II (N<101), and Cover III (N<151) but has not been systemically tested by equivalent classes with N⩾151.In this paper, the authors introduce a new way for identifying the MSI. The new MSI-identifying algorithm’s computing complexity is two polynomial orders lower than that of the algorithm of Martins and Dell (2007). With a 2.8-Gigahertz computer, the new algorithm enumerates all of the equivalence classes with an area ratio N<101 in approximately two minutes. All equivalence classes with an area ratio N<201 and N<301 are enumerated. Additionally, the new algorithm is based on an item aspect ratio interval (equivalence ratio interval), which provides a new perspective on the nature of equivalence classes and the MSI. The authors of this paper also note that the concept of MSI and its identifying algorithm can be used to transform a non-integer PLP into its equivalent integer MSI. The new algorithm is simple to implement. When programmed in C++, the total code length of the equivalence class enumerating algorithm is only 127 lines.The following are suggested applications of the algorithm described in this paper:1.As a subroutine of the exact solution scheme that reuses MSI solutions (proposed by Martins & Dell, 2008; Dowsland, 1987b), the MSI-identifying algorithm discussed herein, which has O(N2) complexity, can be used to substitute the corresponding Martins and Dell (2008) MSI-identifying algorithm, which has O(N4) complexity.The N<201 and the N<301 equivalent class datasets can be used for algorithm testing or demonstration and can also be used to expand the capacity of the exact solution scheme that reuses MSI solutions.The 127 C++ code lines, which are much easier to distribute and execute much more rapidly, can be used to substitute for the previous N<151 datasets, which are difficult to describe in publication materials or share online. Of course, the code can also serve as the source of the N<201 and N<301 datasets.For a dataset that has N⩾301, because the number of instances will grow to be excessively large, the authors suggest using the 127 C++ code lines plus additional constraints and/or selection mechanisms, such as the uniform random selection, to generate sample instances for the purpose of algorithm testing and demonstration.The MSI identification algorithm can be employed to convert non-integer PLP instances from real applications to their equivalent integer MSIs without losing any precision such that they can be solved using up-to-date algorithms that involve integer assumptions.As pointed out by Dowsland (1985, 1987a), the MSI reduces the problem to one with fewer potential placement positions, and usually strengthens bounds such as that due to Barnes, thus improving the efficiency of many exact approaches to the problem. This can be done only when we have a high efficiency MSI-identifying algorithm, especially when the area ratio of the problem is large. Thus the O(N2) MSI-identifying algorithm presented in this paper is better than the previous O(N4) algorithm for this purpose.Presently, the O(N4) algorithm by Martins and Dell (2008) is the only well described MSI-identifying algorithm. In Dowsland (1987a), it is stated that using an idea similar to the aspect ratio interval to minimise the smaller dimension of the box could reduce the search space. However, the detailed procedure is not described. In this paper we will present the O(N2) MSI-identifying algorithm with theoretic details, the computational analysis, and the code realisation along with a numerical test.The rest of this paper will be organised as follows. In Sections 2.1 and 2.2, basic notation, assumptions, and commonly known properties of the PLP are presented or reviewed. In Section 2.3, the general scheme of the new method is concisely introduced. Details of the new method are introduced in Sections 3–5. Section 6 addresses the implementation issue, where an integer realisation is proposed to avoid the precision issue associated with float computing. Section 7 provides numerical results, and Section 8 concludes the paper.In this paper, a PLP instance is represented by (X,Y,a,b). X and Y are the pallet’s width and height; a and b are the item’s width and height; X⩾Y⩾a⩾b is assumed. It is also assumed that X, Y, a, b are integers, except when explicitly mentioned otherwise.It is sometimes convenient to focus only on one pallet dimension. For example, it is sometimes convenient to consider only the relationship between X and (a,b). In this case, the notation (X,a,b) will be used. Similarly, the notation (Y,a,b) may also be used. (S,a,b) will be used for the general case, where S could be either X or Y.The area ratio of a PLP instance is denoted by N, and N=⌊(XY)/(ab)⌋.For a pallet dimension S, the set of efficient partitions of S, denoted by E(S,a,b), is defined to be the set of all feasible partitions (n,m) satisfying(1)n∈{0,1,…,⌊S/a⌋}andm=⌊(S-n·a)/b⌋.If there are numbers n and m, satisfyingn·a+m·b=S,then (n,m) is called a perfect partition of S.Dowsland (1984) shows that if two instances of the PLP possess the same set of efficient partitions for the pallet width and length, then both instances share the same set of optimal solutions. The class of PLP instances that possess the same efficient partitions for both the pallet width and length are called the equivalent class. Nelissen (1993) shows that two PLP instances (X,Y,a,b) and (X′,Y′,a′,b′) are equivalent if and only if(2)n·a′+m·b′⩽X′∀(n,m)∈E(X,a,b),(3)n·a′+m·b′+b′>X′∀(n,m)∈E(X,a,b),(4)⌊X/a⌋a′+a′>X′,with a similar set for Y, Y′, and E(Y,a,b).If (X⌣,Y⌣,a⌣,b⌣) is equivalent to (X,Y,a,b) and for any (X′,Y′,a′,b′) that is equivalent to (X,Y,a,b), then we haveX⌣⩽X′,Y⌣⩽Y′,a⌣⩽a′, andb⌣⩽b′, and we say that (X⌣,Y⌣,a⌣,b⌣) is the MSI of (X,Y,a,b). Because a PLP equivalence class is a collection of mutually equivalent PLP instances, all instances that belong to the same equivalence class have the same MSI. The MSI of an equivalence class equals the MSI of any of its member instances.Considering only one pallet dimension, if two instances (S,a,b) and (S′,a′,b′) possess the same set of efficient partitions, then we state that (S,a,b) and (S′,a′,b′) are equivalent. If (S⌣,a⌣,b⌣) is equivalent to (S,a,b), andS⌣,a⌣,b⌣are the smallest possible values, then we say (S⌣,a⌣,b⌣) is the MSI of (S,a,b).The pallet size of (X,Y,a,b) may be reduced. Let S be a pallet dimension, which can be X or Y; thus,S can be reduced to S∗ using the following formula:(5)S∗=max{n·a+m·b:(n,m)∈E(S,a,b)}.It is not difficult to verify that (2)–(4) are satisfied if S is reduced to S∗. This type of reduction is called the perfect partition reduction by Dowsland (1985) and Letchford and Amaral (2001). Let us say that (S,a,b) is perfect-partition-reducible if S∗<S and that (X,Y,a,b) is perfect-partition-reducible if either (X,a,b) or (Y,a,b) is perfect-partition-reducible.Algorithm 1 is a notably simple pseudo-code for verifying that (S,a,b) is perfect-partition-reducible. The time complexity of Algorithm 1 is linear with respect to ⌊X/a⌋ (this complexity can be improved by a more complex algorithm (see Letchford & Amaral (2001))).Algorithm 1Pseudo-code for determining whether (S,a,b) is perfect-partition-reducibleInput: S, a, bOutput: Answer1Begin2S∗←max{n·a+m·b: (n,m)∈E(S,a,b)}3IfS∗=SthenAnswer′←′No′; elseAnswer′←′Yes′4End.The general scheme of the method proposed by this paper is as follows:First, it will be shown that any instance (S,a,b) that belongs to a given equivalence class will have the property that its item size aspect ratio a/b belongs to an open interval (rlb,rub); and, from any item with a size aspect ratio r∈(rlb,rub), an instance belonging to the same equivalence class can be constructed. If (rlb,rub) is known, then the smaller item sizeb⌣of the MSI can be identified easily. The procedure is to find the smallest positive integerb⌣such that the interval (brlb,brub) contains a positive integera⌣. Accordingly, (a⌣,b⌣) will be the item size of the MSI. The pallet sizeS⌣of the MSI can be determined from Eq. (5). The details of this part of the algorithm will be presented in Sections 3 and 4.1 of this paper.Second, it will be shown that any instance (X,Y,a,b) belonging to an equivalence class will also have the property that its item aspect ratio belongs to an open interval (rlb,rub), which is the intersection of the two aforementioned open intervals determined by (X,a,b) and (Y,a,b), respectively. A similar procedure can be adopted to identify the MSI (X⌣,Y⌣,a⌣,b⌣). Details of this part of the algorithm will be presented in Section 4.2.Third, the MSI enumerating procedure is presented. This procedure checks all instances (X,Y,a,b) with an area ratio less than N+1, eliminating all instances that cannot be a MSI by determining whether the MSI is equal to itself. Details of this part of the algorithm will be presented in Section 5.In this section, we show that there is a strong relationship between an equivalence class and the problem’s item size aspect ratio.Lemma 1Let (S,a,b) be a PLP instance. Thus, there is an open interval (rlb,rub) of real numbers such that for any (S′,a′,b′) that is equivalent to (S,a,b), it is true that a′/b′∈(rlb,rub). In addition, for any positive integers a′ and b′ that satisfy a′/b′∈(rlb,rub), there is an S′ such that (S′,a′,b′) is equivalent to (S,a,b).Let (S′,a′,b′) be an equivalent instance of (S,a,b); thus,(6)n·a′+m·b′⩽S′∀(n,m)∈E(S,a,b),(7)n·a′+m·b′+b′>S′∀(n,m)∈E(S,a,b),(8)⌊S/a⌋a′+a′>S′.We choose to reduce (S′,a′,b′) to its perfect reduction (S′∗,a′,b′). For (S′∗,a′,b′), because of Eq. (5), inequality (6) is automatically followed. Inequalities (7) and (8) can be rewritten as (9) and (10), respectively:(9)ni·a′+mi·b′+b′>S′∗⩾nj·a′+mj·b′∀(ni,mi,nj,mj)∈E(S,a,b),(10)⌊S/a⌋a′+a′>S′∗⩾nja′+mjb′∀(nj,mj)∈E(S,a,b).Let r=a′/b′. From (9), we have(11)r>mj-mi-1ni-nj∀(ni>nj,mi,mj)∈E(S,a,b),(12)r<mj-mi-1ni-nj∀(ni<nj,mi,mj)∈E(S,a,b).From (10), we have(13)r>mj⌊S/a⌋+1-nj∀(nj,mj)∈E(S,a,b).Let(14)rlb=maxmj-mi-1ni-nj:∀(ni>nj,mi,mj)∈E(S,a,b),mj⌊S/a⌋+1-nj:∀(nj,mj)∈E(S,a,b),and let(15)rub=minmj-mi-1ni-nj:∀(ni<nj,mi,mj)∈E(S,a,b);therefore, r=a′/b′∈(rlb,rub). We can guarantee that (rlb,rub) exists, i.e., rlb<rub, because if rlb⩾rub, then at least one inequality from (11)–(13) can never be satisfied, and thus, at least one inequality from (6)–(10) can never be satisfied. However, this statement is a contradiction because we know that if we let a′=a and b′=b, inequalities (6)–(8) will be satisfied. Thus, the first part of the lemma is proved.For the second part of the lemma, if a′/b′∈(rlb,rub), then we can define S′=S′∗ using Eq. (5), i.e., we letS′=S′∗=max{n·a′+m·b′:(n,m)∈E(S,a,b)}.It is easy to verify that (S′,a′,b′) satisfies inequalities (11)–(13), (9)–(10) and (6)–(8) and thus is equivalent to (S,a,b).□If we are given an instance (S,a,b), then the interval (rlb,rub) can be determined by Eqs. (14) and (15). (rlb,rub) will be called the Equivalence Ratio Interval (ERI) of (S,a,b) and will be denoted by ERI(S,a,b).As shown in Algorithm 2, the algorithm for finding (rlb,rub) of (S,a,b) involves two steps. In the first step, E(S,a,b) is calculated using Eq. (1). In the second step, rlband rubare calculated using Eqs. (14) and (15). The total time complexity will be O(⌊S/a⌋2), which is dominated by computing Eqs. (14) and (15).Algorithm 2Pseudo-code for finding ERI(S,a,b).Input: S, a, bOutput: ERI(S,a,b)=(rlb,rub)1Begin2 Calculate E(S,a,b) using Eq. (1)3 Calculate rlband rubusing Eqs. (14) and (15)4End.Let (S,a,b) be the parameters of a PLP’s dimension instance. We want to find its minimum size instance (S⌣,a⌣,b⌣) from its equivalence ratio interval (rlb,rub).Lemma 2(S′,a′,b′) is equivalent to (S,a,b) for some S′ and a′ if and only if(16)(rlbb′-⌊rlbb′⌋)+(rub-rlb)b′>1,where rlband rubare the lower bound and the upper bound of ERI(S,a,b), respectively.b′ is a positive integer by implication; we need to guarantee that a′ is also a positive integer. From Lemma 1, we know that a′/b′∈(rlb,rub), and thus, a′∈(rlbb′,rubb′). Positive integer a′ exists if the interval (rlbb′,rubb′) contains at least one integer, that is, if(rlbb′-⌊rlbb′⌋)+(rub-rlb)b′>1.If inequality (16) is satisfied, then we can choose a′ and S′ as follows:(17)a′=⌈rlbb′⌉,(18)S′=S′∗=max{n·a′+m·b′:(n,m)∈E(S,a,b)}.If inequality (16) is not satisfied, then there will be no positive integer in (rlbb′,rubb′), and because a′∈(rlbb′,rubb′), there will never be an integer a′ such that (S′,a′,b′) is equivalent to (S,a,b). Thus, the lemma is proved.□The algorithm for determining the minimum instance (S⌣,a⌣,b⌣) is shown in Algorithm 3. The algorithm contains a loop enumerating b′ from b′=1 up to b′=b. The enumeration stops when it finds a b′ that satisfies (16). When the enumeration stops, makeb⌣equal to the current b′.a⌣andS⌣are determined by (17) and (18). The time complexity of the algorithm is dominated by the cost of finding (rlb,rub) plus the cost of the loop of line 4. The total cost will be O(⌊S/a⌋2+b).Algorithm 3Pseudo-code for finding the MSI of a given PLP dimensionInput: S, a, bOutput:S⌣,a⌣,b⌣1Begin2 Call Algorithm 2 to calculate E(S,a,b) and rlb, rub3b′←1, bmax←b4Loop whileb′⩽bmax5If(rlbb′-⌊rlbb′⌋)+(rub-rlb)b′>1break loop6Elseb′←b′+17b⌣←b′8a⌣←⌈rlbb⌣⌉9S⌣←max{n·a⌣+m·b⌣:(n,m)∈E(S,a,b)}10EndLet us define the Equivalence Ratio Interval (ERI) of a PLP instance to be the intersection of the ERIs of its two dimensional instances. More formally, let (X,Y,a,b) be a PLP instance, letrlbX,rubXbe the ERI of (X,a,b), and letrlbY,rubYbe the ERI of (Y,a,b). Next, the ERI of a PLP instance (X,Y,a,b) is defined asERI(X,Y,a,b)=rlbX,rubX∩rlbY,rubY=maxrlbX,rlbY,minrubY,rubY.The existence of ERI(X,Y,a,b) is guaranteed because at least we have (a/b)∈ERI(X,Y,a,b).Lemma 3(X′,Y′,a′,b′) is equivalent to (X,Y,a,b) for some X′, Y′, and a′ if and only if(19)rlbb′-⌊rlbb′⌋+(rub-rlb)b′>1,where rlband rubare the lower bound and the upper bound of ERI(X,Y,a,b), respectively.(X′,Y′,a′,b′) is equivalent to (X,Y,a,b) if and only if (X′,a′,b′) is equivalent to (X,a,b) and (Y′,a′,b′) is equivalent to (Y,a,b). From Lemma 1, we know that the item ratio a′/b′ must be in both ERI(X,a,b) and ERI(Y,a,b). Because a′ is a positive integer, inequality (19) must be satisfied.If (19) is satisfied, the values of a′, X′, and Y′ can be determined by(20)a′=⌈rlbb′⌉,(21)X′=X′∗=max{n·a′+m·b′:(n,m)∈E(X,a,b)}.(22)Y′=Y′∗=max{n·a′+m·b′:(n,m)∈E(Y,a,b)}.If (19) is not satisfied, the positive integer a′ can never exist. The lemma is proved.□The pseudo-code for finding the MSI of a PLP instance is shown in Algorithm 4. After calculating the instance’s ERI and partitions, the algorithm enumerates b′ from 1 up to bmax=min {b,⌊X/a⌋+⌊Y/a⌋+1}, breaking the loop when inequality (19) is satisfied and settingb⌣=b′. Afterb⌣is found,a⌣,X⌣andY⌣are determined using Eqs. (20)–(22).The complexity of the algorithm is dominated by the cost of the calculation of the ERIs and the enumerating loop of b′. The complexity is O(⌊X/a⌋2+bmax)=O(⌊ X/b⌋2). The corresponding algorithm given by Martins and Dell (2007) is O(⌊X/b⌋4); thus, Algorithm 4 is two polynomial orders more efficient.Note that at line 5, the algorithm uses the fact thatb⌣⩽⌊X/a⌋+⌊Y/a⌋+1, proved by Martins and Dell (2007).Algorithm 4Pseudo-code for identifying the minimum size instance of a PLPInput: X, Y, a, bOutput:X⌣,Y⌣,a⌣,b⌣1Begin2 Call Algorithm 2 to calculaterlbX,rubXand E(X,a,b)3 Call Algorithm 2 to calculaterlbY,rubYand E(Y,a,b)4rlb←maxrlbX,rlbY,rub←minrubX,rubY5b′←1, bmax←min{b,⌊X/a⌋+⌊Y/a⌋+1}6Loop whileb′⩽bmax7If(rlbb′-⌊rlbb′⌋)+(rub-rlb)b′>1break loop8Elseb′←b′+119b⌣←b′10a⌣←⌈rlbb⌣⌉11Y⌣←max{n·a⌣+m·b⌣:(n,m)∈E(Y,a,b)}12X⌣←max{n·a⌣+m·b⌣:(n,m)∈E(X,a,b)}14EndAlgorithm 4 can provide a natural and convenient way for transforming a non-integer PLP into its equivalent integer MSI. The idea is based on the fact that any non-integer PLP instance can be transformed into one of its integer equivalence instances.For a non-integer PLP (X,Y,a,b), Eq. (1) is clearly applicable, which indicates that E(X,a,b) and E(Y,a,b) can be defined, making lines 2 and 3 of Algorithm 4 applicable; thus, the whole algorithm will be applicable.The run time of Algorithm 4 is still O(⌊X/a⌋2). In a sense, Algorithm 4 completely justifies the integer assumption that is commonly adopted by researchers when addressing the PLP.This section will introduce the ERI method for enumerating all MSIs whose area ratios are smaller than N+1 boxes per pallet. Because the MSI of an equivalence class is unique, the procedure is also a procedure of enumerating equivalence classes.Let (X⌣,Y⌣,a⌣,b⌣) be an MSI. It is shown by Martins and Dell (2007) thatb⌣anda⌣are bounded by1⩽b⌣⩽N+2,andb⌣+1⩽a⌣⩽2N+1.Because the area ratio is bounded by N,Y⌣is bounded bya⌣⩽Y⌣⩽N(b+1)-1,where the lower bounda⌣is chosen following Martins and Dell’s convention. This lower bound is selected becauseY⌣<a⌣disables the 90° rotation freedom of the items and is trivial.X⌣is bounded byY⌣⩽X⌣⩽(N+1)a⌣b⌣/Y⌣-1.The pseudo-code for enumerating the MSI is shown in Algorithm 5. The algorithm contains four loops enumerating b, a, Y, and X from the outer loop to the inner loop. At line 4, any instance where a and b have a greatest common divisor greater than 1 is discarded because it cannot be an MSI. At line 6 and 8, every perfect-partition-reducible instance is discarded because it cannot be an MSI, either. Line 9 calls Algorithm 4 to calculate the MSI of (X,Y,a,b). Line 10 verifies whetherb⌣=b; if the answer is ‘yes’, then the instance is an MSI and is output.The complexity of the algorithm is dominated by the run time of the four loops, multiplying the cost of line 9 where it calls Algorithm 4 and has a cost of O(⌊X/b⌋2)=O(N2). The total complexity of the algorithm will be O(N6b2). Algorithm 5 is faster than Martins and Dell’s algorithm by two polynomial orders of N based on the improvement of Algorithm 4.Algorithm 5Pseudo-code for enumerating the MSIs of all equivalence classes with an area ratio smaller than N+1.Input: NOutput: All MSIs with an area ratio smaller than N+11Begin2Loop forb=1 to N+23Loop fora=b+1 to 2N+14IfGCD(a,b)>1, continue for next a5Loop for Y=a to N(b+1)+16Call Algorithm 1 to check if (Y,a,b) is perfect-partition-reducible; If the answer is yes, continue for next Y7Loop for X=max{Y,(b−Y/a−1)a} to (N+1)ab/Y−18Call Algorithm 1 to check if (X,a,b) is perfect-partition-reducible; If the answer is yes, continue for next X9Call Algorithm 4 to identify the MSI of (X,Y,a,b); let it be (X⌣,Y⌣,a⌣,b⌣)10Ifb⌣=bandX⌣Y⌣/(a⌣,b⌣)<N+1then output (X,Y,a,b) as a MSI.11End

@&#CONCLUSIONS@&#
In this paper, it is shown in detail that the item aspect ratios of PLP instances of the same equivalence class will belong to an open interval. This interval characterises the equivalence classes and is referred to as the Equivalence Ratio Interval (ERI).A rapid MSI-identifying algorithm can be implemented using the concept of ERI. The method can also be applied to transform a non-integer PLP instance into an integer MSI.New and faster PLP equivalence class enumerating algorithms can be implemented using ERI. The new algorithms based on ERI reduce the time complexity by two polynomial orders compared to that of previous algorithms reported by Martins and Dell (2007), who first introduced the concept of MSI.The new algorithms are simple to implement. When programmed in C++, the total length of the equivalence class enumeration algorithm is 127 lines. With this feature, the algorithm is a good problem generator that can exhaustively list PLP instances subject to given constraints.